{
    "brianlagunas": "The Forms bootstrapper will be as close as possible to the WPF version, but it will be different.  Prism for Forms will be completely different guidance than for WPF.  There are a ton of differences in the frameworks and XAML implementations that impact this guidance.\nLogging will be part of the Forms initialization, it just hasn't been implemented just yet.  \nWhen creating guidance for application development for a particular platform, it is important that we follow that platforms standard practices as much as possible.  Changing the way you initialize a Forms app impedes on the adoption of the guidance, complicates getting started with the guidance, and opens yourself up for potential issues when changes are made to the target framework.\nWhile some devs may enjoy configuring application startup in XML, this is not something the Prism has ever done, and will not start doing.  We don't plan on changing the core concepts of Prism for our Forms support.  We must keep all concepts as similar, consistent, and familiar as possible.  There are also a number of limitations that you will run into by trying to configure everything in XML.  Then, we will wind up writing a ton of code trying to work around them.  For example, using a NavigationPage as your initial page.  Also, I'm a lazy developer, and writing application configuration in XML is not as efficient, or type safe, as creating a bootstrapper class, overriding 3 methods, and calling Run().\n. I was specifically talking about XML, but not too much changes with XAML though.  Not so much from the XAML property intellisense, but rather the values for the properties.  I realize Prism uses XAML for module catalog support.  My specific statement was around Prism never supporting application setup via an XAML/XML file.\nKeep in mind, in your implementation, you derived from Application which gives you access to the application object.  Prism's bootstrapper doesn't have this ability.  I guess you could define the bootstrapper as a resource in the App.xaml, override the OnStartup, and then get the resource using FindResource, and call the Run method on it.  But then, what Is the benefit?  Just a coding style?\nAs far as limitations, the thing that stands out to me immediately is the inability to use your container to resolve your shell (maybe not a big deal).  You also have to be able to register types in your container prior to them being used in the bootstrapper.  Also in the case of Forms, if using a NavigationPage, there would be no way to navigate to a particular view while passing dynamic parameters.  There may also extensibility issues that come into play.  There may be more, but I won't know until I really get into it.\nThis is something that would require some big changes to the bootstrapper for sure.  New public properties, and behavior changes such as showing the shell automatically (which might be a good thing to do anyways).\nI will keep this on the backlog for consideration.  As with all feature requests, there is also the aspect of how many devs will actually use this.  If only 5 % use this, then it's probably not worth us spending our limited dev time on this feature.  But, if 50% of devs use it, then maybe it would be time well spent.\nI need to look into some type of user voice account to help track these ideas, and allow the Prism community to vote on them.  GitHub isn't the best medium for capturing this info.\n. Well I disagree with your statement regarding configuration being cheaper, especially in the case of the Bootstrapper.  Look at everything you have to do in order to even support this, including custom interfaces and classes, and markup extensions to do something I can do with two words in C#.  What I see is an over complicated and over architected implementation.  The Bootstrapper shouldn't be so complicated that you need a designer to create it.  Configuration has its place in an application, but I don't think this is one of them.  If the configuration item is essentially a data structure only the developer understands, it\u2019s not configuration.  The point of configuration is letting you concisely and declaratively express your intentions in a higher level of abstraction.  If you have configuration that requires just as much detail, or more, as the code would, you don\u2019t really have configuration at all, you\u2019ve got imperative code, just in a very inconvenient language for writing imperative code, the worst of both worlds.  Adding in a layer of configuration adds complexity.  It's not cheaper by any means.\n. Container.Resolve\n. I could be completely misunderstanding what you are trying to accomplish.  Maybe you should implement it on your fork and submit a pull request.  Then I will see exactly what you mean :0)\n. Modularity is something that we have discussed, and will continue to discuss.  When writing mobile apps, we have to consider a number of factors, such as size and number of references, performance, battery impact, number of processes, etc.  Also, in Forms, there is a major limitation with references not being loaded in the app domain unless there has been a static call, or direct reference to an object in that assembly.\nI'm not saying we will never add Modularity in to Prism.Forms, but we will have to really look at the benefits and feasibility of doing so.  For now the plan is to wait and see how the Xamarin.Forms platform matures.  We also have to wait and see what is going to happen with WinRT.  Hopefully we will know more after the Build conference about Windows store and Phone.\nWe will also need to look at how the majority of Forms apps are built to see if this is something that at least 80% of Forms devs would even use or benefit from.  It may turn out to be overkill.  Then again, it may turn out to be the best thing since sliced bread.\n. Thanks for sharing.  This is exactly the reason we are being so cautious with what features we start porting over at this time.  It really is a \"hurry up and wait\" situation.\n. Michael, I want to go back to your DirectoryModuleCatalog question, as I don't really understand it.  The DirectoryModuleCatalog will search for all assemblies that exist in a directory for classes that implement the IModule interface and load all of them.  So I am not sure what you mean by \"... only loads in IModules from assemblies that have NOT been loaded in the current domain\".  It will load all assemblies in the directory.  The link you posted is a modification to the DirectoryModuleCatalog that allows it to monitor the directory for assemblies being added after the application has been run.  So when a new assembly is dropped into the directory, it will be loaded into the application automatically during runtime.\n. Oh I see what you are asking.  First off, an assembly can only be loaded once into each AppDomain.  The CLR doesn't support the concept of having two (or more) copies of an assembly in a single AppDomain.  If you did by chance try to load the same assembly twice, the already loaded assembly would be returned.  So this line of code protects the developer from themselves.  If they were to load \"AssemblyA\" using a different module catalog (don't forget you can get modules form many sources), then that line of code would prevent any issues from arising.  So we make sure we are loading modules that have not already been loaded.\n. MEF automatically handles the assembly loading to not have collisions in the same AppDomain.  The CLR does not allow the same version of the same assembly to be loaded multiple times.  We are doing the same thing that MEF is doing.  The naming does not need to change.  The DirectoryModuleCatalog succinctly describes the purpose and functionality of the class, and we do not need to rename it to include implementation specifics in its naming.  Keep in mind, Prism has been around since 2008, and is being used by many thousands of companies and in even more applications.  This has never been an issue, and documenting how the CLR handles loading assemblies in AppDomains is not something we should be concerned about.\nAs far as a developer is concerned, when they put assemblies in a directory they will be loaded.  Event if they mistakenly have \"AssemblyA\" in a different catalog, the mistake is transparent to the developer and the end-user of the app, because the app will just work as expected.\n. I would also like to mention that I know it seems like you have been getting nothing but push back on every idea you have presented, but don't let that discourage you from continuing to participate in our community.\nKeep in mind that we have a very large user base that we have to consider with every change we make.  We have to be very careful of every change we make, and challenge every choice to make a change.  We don't mind making breaking changes, but those changes must have an obvious benefit to our users or align the product with our vision of where we are going to take Prism.\nRight now, your ideas are very grand in nature, and would require a lot of code churn in our already mature WPF code base which is very risky.  We can't introduce that risk to our customers that depend on Prism for the mission critical enterprise LOB applications.\nI hope this sheds some light on our decision process when evaluating new features or code changes.\n. Sorry, I can't take that advice, especially when its a customer using or extending a product I am responsible for.  I have to call it like I see it or that wouldn't be doing anyone any favors.  I try not to let my customers shoot themselves in the foot if I can help it.  May I suggest that when someone calls an approach over complicated, don't take it personally, but rather re-evaluate the approach being taken.  Chance are, there are some merits to the comment.  Especially when it comes from the team that owns the product you are using or extending.\nMy 2 cents.  Take it for what its worth.\n. While I would love to address each and every one of your concerns regarding why I think trying to configure a Prism application using nothing but XAML is a bad idea, I would rather do other things with my very limited free time.\nNot everything in WPF is done declaratively in XAML, so trying to support your position by implying that it is, doesn't help your cause.  XAML has its place, but this is not one of them.  Don't assume you were the first person to ever think about a declarative bootstrapper.\nBut, that's the beauty of open source.  While we will never do this in Prism, you have the complete freedom to spend the time and effort to do whatever you want to our framework in your own fork.\nTo end this conversation I will say, it doesn't really matter what I, or anyone else, thinks.  Just work on what gives you enjoyment, and if that's writing a framework that lets you configure Prism apps in XAML, go for it.\n. Prism has always been about providing guidance for developer composite XAML applications.  This will not change.  The guidance provided by Prism doesn't necessarily translate well to other application types, and there are n-number of application types that we would then have to start testing for and supporting.  Sure, there may be a very limited number of concepts that can be used, but there implementation may be, and probably should be, different.\n. True.  As soon as we can get a website created, we will added a forum to it.  This is something I have been wanting to do, but just haven't found the time.  We are also considering starting a monthly advisory board, or maybe an open meeting, to discuss the project and show off what we have been working on and gather feedback.\n. Well said @bartlannoeye.  It is indeed a waiting game, and even the current work being done on prism for Xamarin.Forms is too volatile to rely on at this time.\n. Actually, there is a similar library available for WinForms called CAB (Composite UI Application Block).  There is also the Smart Client Software Factory for WinForms.  Unfortunately, Prism will not be supporting WinForms.  The nature of Prism and it's features are tailored around the XAML platform, and do not fit well with the WinForms platform.\nThanks for the suggestion.\n. Yeah, the same would have happened to Prism if we didn't take ownership of it.  Unfortunately though, WinForms is not on our roadmap.\n. Thanks for the suggestion.  We will have to research the best way to handle that scenario as it is a common need.  We may provide a mechanism which allows you to hook into the process and clean up however you like which won't require the use of IDispose.  This can be achieve with a simple RegionBehavior if you need this functionality now.\n. I'm sure once we dig into this feature and get more information about the internals, we will find a solution that will work for everyone.\n. We have decided that using a custom region behavior is the solution for this scenario.\n. If you look at the new structure, Prism is now headed towards a true cross platform library.  Commanding, Logging, and Even Aggregation (PubSubEvents) have moved into a single PCL.  We also recently started adding support for Xamarin.Forms.  Soon we will be adding Windows 10 support.\n. Well technically, the class doesn't really do anything special.  PubSubEvent is not the concern that is doing the publishing or subscribing.  The IEventAggregator is doing the pub/sub action.  So the PubSubEvent name doesn't fit well with the class.  The PubSubEvent is just an event used by the IEventAggregator.  The reason to prefix with \"Prism\" is to eliminate any collisions with any .NET Event class, since it is an event specifically for use in Prism with the event aggregator.\n. So I was looking into this some more and it appears that there is no Event class in .NET.  There is an \"event\" keyword, but no Event class.  So, what if we just called it Event?\npublic class SaveEvent : Event < string > {  }\nThoughts?\n. It's been brought up that Event < string > may be too ambigious, and I tend to agree.\nAnd, it turns out that I was wrong when I said the IEventAggregator does the pub/sub action.  It is actually the event.  I don't know what I was thinking!\nAnyways, knowing that the event does actually perform the pub/sub actions, should we just keep it PubSubEvent?\nI am leaning towards keeping it that way.\n. This will be moved into the base bootstrapper and user the ServiceLocator\n. The first major change has already been made and that was the complete restructure of the Prism Library.  We have move MVVM (commanding, and ViewModelLocator), logging, and event aggregation (PubSubEvents) into the core Prism.dll which is now a PCL.  We changed all namespaces to remove Microsoft.Practices, and renamed the other WPF components to Prism.Wpf, Prim.Wpf.Unity, and Prism.Wpf.Mef.  There have been a number of minor fixes in the WPF version of Prism that will soon be published in a change log.  We have started adding support for Xamarin.Forms (Prism.Forms, and Prism.Forms.Unity).  We will need a lot of feedback here, as Xamarin.Forms is a new tech, and this is completely new guidance.  We will be publishing a preview on NuGet shortly.  We will also be looking at Windows 10 very soon and seeing what makes sense there.  Brian Noyes will be leading the effort there.\nI know one question we will be asking ourselves when it comes to Windows 10 is \"does regions and region navigation make sense for Windows 10?\".  My instincts say yes, but we won't know for sure until we really get into it.\n. features that are needed will be added as issues.  For now, the Navigation needs some serious attention and dog-fooding to make sure we get it right.\n. This is because Prism.Forms  is in pre-release itself and is not built against Xamarin.Forms 1.4.2.6359, but rather 1.4.0.6341 which does not have the Windows Store and Phone 8.1 support.  Since you need it so quickly, I suggest downloading the source and upgrading the Xamarin.Forms target, then make any modifications you need for your demo. \n. You probably have an issue with your ViewModelocator code, because nothing would have changed just by recompiling.  Make sure you are following the default naming conventions.\nFor INavigationService your ViewModel needs to implement INavigationServiceAware.  It won't work by asking for it from the container because it isn't registered with the container.\n. We haven't done any testing for WinRT/WP, but just for fun try creating a view called HomePage, and then a HomePageViewModel and see if it works.  We made a change to the convention in the latest code base to Ignore the \"View\" from a view name to eliminate the ugly \"ViewViewModel\" that is created.  For example; HomeView has a HomeViewViewModel.  With the change it should only be HomeView and HomeViewModel.\n. I am thinking that we should reconsider this convention change and perhaps revert it back to how it was.\n. Right!  The NavigationService is not a globally available service because navigation in Xamarin.Forms is dependent on the Page the VM is associated with.  Therefore, we don't register the INavigationService with the container because there is no single navigation stack to use, and we don't want to give the impression there is.\nAlso, you didn't have to rename your views.  You could have just changed the convention for the VML :0).  Like I said, we will probably change the convention back to how is was due to breaking every app the currently uses the old convention and having the \"ViewViewModel\" is so arbitrary, it's not worth the breaking change and confusion (just like you experienced with your view names).\nThis is why it is still in Preview :0)\n. No, I mean change the naming convention for how the ViewModelLocator finds your ViewModels.  You can use what ever convention you want.\nCheck out: http://brianlagunas.com/getting-started-prisms-new-viewmodellocator/\nLook under the \"Change those Nasty Conventions\" section that explains how to do it.\n. Thanks for the suggestion.  After thinking about it, we agree.\nWe made the changes you suggested to the project structure and project names.  Minus the \"Windows\" part :0)\n. Fixed with @AbdouMoumen pull request.\n. @GreatFireWall This is by design. See this video for more information: https://youtu.be/I_3LxBdvJi4. @bartlannoeye Good idea on the Blank templates.  Also, you wouldn't happen to have created a Prism.Autofac assembly for your AutoFac support, would you?  I think that would be a great contribution to Prism :)\n. Not yet. We haven't gotten there yet.  We are still working on features.\n. The first version of this has been released. Please test it out and let me know if you run into any issues:\nhttps://visualstudiogallery.msdn.microsoft.com/e7b6bde2-ba59-43dd-9d14-58409940ffa0\nRight now there are no WPF Project templates, but they are coming.\n. @mtaulbee Thanks for testing them out. Now I need to start adding a project template for WPF.  Multi-project ProjectTemplates take forever to create and test.  Besides a full project templae, I am also thinking of a \"Module\" project template too.\n. @mtaulbee Did you try the ViewModel item template too?  Thoughts?\n. The ViewModel Template is just under the Prism category since it is used on all platforms.  Yeah, I need to learn how to write a custom wizard that lets you create a View ad ViewModel while placing them in the appropriate Views/ViewModels folders, but also give you the ability to change the folders.  It gets complicated :)\n. Those templates coming soon.\n. Thanks for the contribution.\n. These have been separated into individual issues.\n. I am having issues merging this pull request.  Can you merge the changes made to the master into your branch, so I can try to merge this again?  Thanks\n. Never mind, it was a GitHub issue.  Seems to have merged properly now.\n. To be honest, I am not a very experienced tester.  I have always been the implementer, and left the testing to others better suited for it.  So I don't feel strongly about it.\nI am not apposed to it, I would just need to learn how it works, and what dependencies would be required, as well as how much work it would take to rewrite/convert the tests we do have.\nWhat are the benefits?  The tests we have now seem to work, and it's not complicated to add more tests.\nIf we were to make a switch would you be willing to do the leg work to convert everything over :0)\n. @bartlannoeye You don't need to have PresentationCore for the base Prism PCL.  Only if you are dealing with the Prism.Wpf assembly.\n. @bartlannoeye Ahhh... yes, good point.  When we start adding tests for the Xamarin.Forms projects, we will soon discover any issues with MSTest :0)\n. So MSTest doesn't support Xamarin.  I will give XUnit a try for the Xamarin support.\n. We have started moving to xUnit for tests.  Prism.Tests has already been converted.\n. @omares here is the interface definition:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/INavigationService.cs\nI am thinking that the animated parameter should at least go last since it is probably not used as the useModalNavigation would be.\n. What about passing the \"animated\" option as a NavigationParameter, instead of placing it on the Navigate method signature?\n. For now, I just moved the animated parameter to the end of the method signature.  I will re-evaluate if the community is completely against it.\n. This looks like spam to me.\n. Sorry with the very limited information provided it was hard to tell if this was spam or not.  What benefit does this provide to this project?\n. Reopening, because this is not spam.\n. I tend to agree with @omares, but I will leave this issue open just in case the community would like to elaborate.\n. This is not a high priority for us, and probably not worth the effort at this time.\n. Thank you for your contribution.  Tests would be awesome :)\n. As you eluded to, Prism for WinRT is not support in this version, and is likely to be deprecated in favor of new guidance for the Windows UAP platform.  When we start looking at Prism for UAP, we will be looking at improvements to the navigation service altogether.\n. How would you envision removing pages from the back stack from within a view model, where you have no reference to the pages?\nWould you do it based on page index?  Something like Remove(int pageIndex)?\nI have to answer this same question for Xamarin.Forms.\n. What if you have multiple instances of that view on the stack?  How do you choose which instance to remove?\n. Or should we not allow multiple instances to be created and instead always navigate to an existing instance?\n. I think this really goes outside the scope of what prism should support.  This is more in the custom control space.  I wrote this exact control for the Extended WPF Toolkit http://wpftoolkit.codeplex.com/wikipage?title=ChildWindow\n. Didn't mean to close, just wanted to open the discussion so we can decide if we are going to add this.\n. I am going to close this as I don't think this is something we will be doing anytime soon.\n. That's for sharing, but this isn't something we are gong to add to Prism.  I think this would make a great blog post :)\n. This is freaking great!  Thanks for working on this.\n. If you are using ViewModel first, then you are navigating with VMs and not views in the journal.  If you are using View first then you are navigating to Views and dealing with Views in the NavigationJournal.\nTo answer your question, you would simply call RequestNavigate(\"SomeView\") in your ItemViewModel.  Then you will be navigated to the current instance of the \"SomeView\".  If you want to navigate to a new instance of \"SomeView\", then you would return false in INavigationAware.IsNavigationTarget.\n. Whoops, didn't mean to close, just meant to comment :0)\n. Oh, I understand now, thanks for the clarification.  We will think about how we can enable this scenario.\n. Unfortunately, we haven't had time to look into this.\n. So I stared looking into this, and was thinking of the best way to accomplish this.  I think simply adding some methods on the NavigationJournal would be the best, and least disruptive, approach.  Something like:\nRemove(string Uri, NavigationParameters parameters = null)\nRemoveAt(int index)\nRemoveLast()\nWould that work?\nKeep in mind that the navigation framework depends on the URI, so we aren't dealing with object instances here.  We will look up the view to remove using either the URI, or a combination of the URI and matching parameter set.  Even this approach will require rewriting how the NavigationJournal functions by replacing the Stack<T> variables with a different data type.\nThoughts?\n. Good idea.  I am trying to get all the docs in order, and then I will start looking at larger features like this.\n. Luckily for us there is one area in which a new journal entry is made:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Regions/RegionNavigationService.cs#L269\nWell, technically 3, but the other two are in the RegionNavigationJournal and they are exsiting entries, so as long as we prevent the entry from being made in the RegionNavigationService in the first place, it will never show up in the journal and we don't have to worry about it.  So we have a couple of options that I can think of off the top of my head:\n- Use a hard coded navigation parameter that is checked.  Is this intuitive, error prone?\n- Use an attribute.  I don't like the idea of using reflection for every single navigation call.\n- Use an interface.  This is faster than an attribute and more explicit.\nOn thing I am worried about implementing this feature is that is opens up the developer to be confused and application bugs.  Let's say we navigated like this:\nViewA -> ViewB -> ViewC\nNow ViewC is marked to not be included in the journal.  Now in ViewC I call GoBack().  What view did I just navigate to?  Well we will go to ViewA, because the current entry in the journal is ViewB since ViewC did not get added.  I can see this being a problem.\nWhat are your thoughts?\n. Just thinking here, but I am wondering if adding an optional parameter on GoBack that would allow you to skip pages altogether.  So basically all pages get added to thr backstack as expected, but I say GoBack(2) meaning go back 2 pages without ever actually navigating to the 1st one.  So, given this scenario:\nViewA -> ViewB -> ViewC -> ViewD\nI call GoBack(2), and then this is what my stack looks like now:\nViewA -> ViewB \nBut I never actually navigated ViewC, or maybe we do still navigate to VIewC, but you won't wind up there when the navigation is done.  What do you think about that?\nEDIT:  actually, that's probably not a good idea.  Might as well call GoBack twice to get the same result.\n. We can't add the entry before OnNavigatedTo in GoBack/GoForward because it relies on the navigation callback that is invoked after OnNavigatedTo in order to add an entry.\n. You can have a PR ready, but it will be awhile before this will be reviewed.\n. @dvorn I am ready to look at this for the upcoming v7.0 release.  Is your branch still valid?. Also, I think that we can say that this feature is not support for a multiple active view scenario.  Honestly, I'm not sure opting out of the journal makes sense in that scenario.\nI also think it is acceptable to introduce a slight break for anyone using a custom IRegionNavigationJournel.  The interface will tell them how to fix the break. Also, I doubt there are many custom navigation journals out there.. It only took 1.5 years, but we finally have this feature :). Yes, but it will be the last thing on my mind.  It would be nice to have a section added to the current nav topic.  Could you help us out?. Nope, all you need to do is have the view or VM implement IJournalAware and return false for PersisInHistory and it will be removed from the backstack.. Well since we don't have any components in the VS toolbox, we don't have to specify a default prefix.  If we did have a default prefix, say in our project and item templates I'll be creating, I would probably go with \"prism\".\n. Well, do we want to tie the name to a source control vendor?  Even if we didn't own the actual domain name, http://prismlibrary.com/ would be specific to prism and not imply a method of source control.  What happens when the next great source control solution CleanSource is released?\n. This has been complete.  I left the XmlnsDefinition(\"http://www.codeplex.com/prism\", \"namespace\") definition in there for backwards compatibility.\n. Having a .com doesn't mean it's a commercial product.  Lots of open source projects the use the .com domain alias (GitHub) since it is the most widely used and it's usually the first thing someone types when looking for a website.\n. It seems you didn't follow the standard pattern of implementing a ServiceLocatorAdapter which derives from ServiceLocatorImplBase.  See UnityServiceLocatorAdapter.\n. The effort to do this and support SL may not be worth it.  Besides getting the code ported, and all the tests in place we would also have to answer support questions regarding SL.  I'm not sure this is something worth the time and effort considering the fate of SL.\nIf this was to be done, most likely we would use linked files.  We would definitely not put in a number of dependencies and new projects just to support SL.\n. Frankly, this isn't going to happen.  As other members have commented, you will have to either create your own port to take advantage of the new Prism 6 features, or continue to use Prism 4.1 for Silverlight projects.\n. The current PubSubEvents will exist as it's own NuGet as it does now.  The code is solid and will most likely not have to be modified, so it should just work.  Meaning you should be able to continue to use it as is.  Prism is being repositioned as a product.  Going forward you would just add the Prism nugget package for PubSubEvents.  Yes there will be a couple of classes for MVVM, but that shouldn't be a big deal.  PubSubEvents is not used enough as a stand-alone solution to create more dependencies for Prism as well as maintain a separate project and NuGet packages.  PubSubEvents is core to the guidance of Prism, and has been brought under the same project and brand to reflect that.\n. Well, there is only NuGet packages available for Prism 5 right now.  When Prism 6 is released, we are going to evaluate how we can make the upgrade path seamless.  If you start with v5, and upgrade to v6, there will be breaking changes with the namespaces.  If you start with v6, you will have to manually add the references until we release NuGet packages for it.\n. We are assuming this issue has been resolved.  We can reopen if this is not the case.\n. The community has been completely silent about Prism for Xamarin.Forms.  I have some small items to tighten up, then I will probably release what we have and just wait for feedback.\n. We will begin to use a combination of labels and Milestones to communicate our roadmaps and PR needs.\n. I am wondering if the use-case is large enough for an app to have this built directly into Prism region functionality.  I would think that having this as a behavior would be better since it allows a view to opt into the Loaded/Unloaded events without having the logic checked every time in the region lifecycle.  I don't see a lot of views in a single app needing this functionality, but rather maybe just a few.  I personally have never had this need, so I am curious how common this really is.\nThoughts?\n. I haven't tried this yet, but shouldn't you be able to use the InvokeCommandAction to execute a command on the loaded and unloaded events?\n. Good points\n. Can you provide a link to a sample that reproduces this issue?\n. I am looking into this.  For now, you can get around this issue by using the RegionMemberLifetime attribute on the view.\n[RegionMemberLifetime(KeepAlive = false)]\npublic partial class FirstView : INavigationAware\nThis will fix the issue by creating a new instance of the view each time you navigate to it.\n. Alright this had been fixed.  I would also like to point out that we have decided to make the InteractionRequestTrigger Obsolete since it really isn't needed.  You can use the built-in EventTrigger like this:\n\n. This issue has been fixed and was closed.  If you need the fix right away, you can use the latest source code.\n. The fix is only available for Prims 6.  If you are using Prism 5, just use the built in EventTrigger and set the EventName=\"Raised\"\n. This has been implemented with PR #101 \n. Thanks for the suggestion.  Everything you said makes complete sense, and is actually the direction we will be going with the other platforms.  Unfortunately for WPF, we will not be changing this.  We have way too many apps out there that use the current implementation for navigation and other app view logic.  If we were to refactor this out it would break every single app out there, and that is just too much of a change to implement for WPF.  In the other platforms though, this is what we will be doing.\n. Done. I would image that you wouldn't be trying to reference a View type in your ViewModels.  Right?\n. Hopefully we'll get some movement on the UWP side of things soon.  Those full time jobs are a real pain sometimes :0)\n. We have some experiments going on right now, but nothing solid has be formalized.\n. We decided to stick with PubSubEvent.  So PrismEvent is not being used.\n. The tutorial is meant to cover what has ben publically released through the preview, not source code.  When we release an updated preview, the post will be updated.\n. Working on this now\n. Thanks for the great work\n. BY default, the VML does not use DI, because that would be creating a dependency on a specific Container that you may not want to be using.  So, by default we use reflection.  But, if you want o use DI, then you can easily use your own container of choice by overriding the SetDefaultViewModelFactory method.  So if you want to use MEF, you can.\nSee this post: http://brianlagunas.com/getting-started-prisms-new-viewmodellocator/\n. What platform are you targeting?  If WPF, then #51 has nothing to do with your issue.  #51 was about the Xamarin.Forms support.  What version of the VML are you using?  In the current codebase, The base bootstrapper for WPF uses the ServiceLocator to resolve the VM so it won't matter if you are using Unity or MEF, it should work just fine.  If you are using the public NuGets packages for WPF, then this is not included in that version, and you will need to override the ViewModelLocationProvider yourself.\n. Please add tests in MefBootstrapperRunMethodFixture for the inclusion of the ConfigureViewModelLocator method call.\n. Thank a ton!  Great work.\n. Interesting... Are you sure it is still true event though you pass in false?  Are you getting an exception?  Is it not navigating?  Is your root page a NavigationPage?  Do you have a sample you can share?\n. Also, are you using the latest 5.7.0-pre1 version that was just released?\n. Interesting indeed!  I haven't run into this during testing.  I am going to see if I can reproduce this issue.  Dang, that would suck to have to drop the use of optional parameters.   Would you mind sharing your sample?  You can email it to me if you can share publically.\n. I was able to duplicate it!  I duplicated it on a GoBack call.  Very freaking strange.  Looks like this is an issue with the language feature.  I will have to create overloads instead of use optional parameters.  I am going to run this pas the father of C# and see what he has to say.\nEDIT:  Once I rearranged the parameters of the GoBack method (I had a mismatch against the interface), the parameter passed correctly to the GoBack call.  I can't duplicate it on the navigate call.\n. Actually I may need it after all :)\n. Okay, it seem I had another mismatch against the interface for Navigate as well.  Looks like when I did some refactoring, I got the \"animated\" and \"useModalNavigation\" parameter positions mixed up.  That may have cause the issue.\nI thought interfaces were supposed to protect us from this stuff!  I guess not when using optional parameters.\n. Okay, I think I got it fixed.  Go ahead and download the newest Nuget package Prism.Forms 5.7.0-Pre2.  It may take a moment for the package to show up in search results.\nLet me know fi that fixes your issue.\n. Great!  Thanks for reporting it, and be sure to provide any feedback and feature requests as you see fit.\n. @Clement-Jean if you only have one view on your NaviagtionPage then there is nothing to go back to, unless your NavPage is being shown modal, which means you'll have to force a modal GoBackAsync(useModalNavigation = true). Then if you want to go back from PageB to PageA, you have to force a modal goback.\nHonestly, not sure why you have your stack like that, why not just push PageB onto the root NavigationPage?. You mean you're new to Xamarin.Forms navigation. Prism doesn't do anything special and uses the XF navigation API directly :)\nThen it sounds like you might be adding another NavigationPage to your stack... something like calling \"NavigationPage/PageB\" from your PageA.  This is incorrect. You're already within a NavPage.  No need to add another.. Either there is an issue with your code, or a bug in the GetNavigationUriPath logic.  Please submit a separate issue with an app the reproduces your issue.. Interesting.  This must be something different with Xamarin.Forms memory management.  This DelegateCommand is used in all other XAML platforms, so I will have to be very careful with any changes made here.  Let me take a look.  First I will need to duplicate it.  I will take what you have and see if that is enough.\n. It exists in the core PCL of Prism for all other platforms, and adds familiarity to current Prism users coming to Xamarin.Forms.  I will hunt down why it's being collected as soon as I duplicate it.\n. This definitely is an issue.  It looks like Xamarin.Forms memory management is very aggressive.  This one will be a tough issue to solve.  Thanks for reporting this.\n. Alright.  I made the fix and updated the Nuget package.  Go ahead and upgrade to Prism.Forms 5.7.0-Pre3.\nOh, and forgot to mention Prism also has a CompostieCommand and IActiveAware support, which are other compelling reasons to keep DelegateCommand around :0)\n. No.  This was originally introduced because of a binding bug in WPF that would cause an ICommand to never be released.  Other platforms did not have this issue.   Instead, since the other platforms are much more aggressive with memory management, the weak references were being collected and breaking the bindings altogether.  So we had to remove it.\n. It's still possible in WPF, but it mainly happens when binding to command within DataTemplates on a touch device that creates automation peers.  As far as I know, this has not been fixed in WPF.\n. Are you using BindableBase for your business objects too or just ViewModels?  Are you trying to serialize ViewModels or just business objects, or both?.  I think that [DataContract] is the attribute that is available in the PCL, so if we added an attribute it would most likely be that one.  But I would like to better understand the scenario.\n. Also, which serializer are you trying to use?  The built-in .NET serializes are slow, but if you use a modern serializer like JSON.NET for instance, the policy there is to serialize everything public, unless it is marked as \u201cnot serializable\u201d.  Meaning no attribute would be needed.  This is the approach other frameworks have taken since when you start adding one attribute, then requests for other attributes normally follow just to support inferior serializers.\n. Actually, in Prism 6 IView is gone.  There will be no need for it.  As far as using x:Bind, you simply need to add a strongly typed property to your View code behind and use x:Bind against that.\npublic MyVieModel ViewModel\n{ get { return (MyViewModel)DataContext;} }\n. Does it work property with interfaces?  Off the tope of my head, we may be able to look into an IView[T] with a definition like this:\npublic T ViewModel {...}\nThis would be a UWP thing only and not included in the other platforms for obvious reasons.  Of course this would be optional, but I am not really sure exactly what this would be buying you since you are basically still having to create a property in the code-behind.  So I'm not really seeing the benefit off the top of my head.\n. Well, I don't see an issue adding an IView for x:Bind support.  The VML can look for that interface, and if it finds it then use it, if not, then just set the data context.  Though, maybe we should think of a better name for the interface to make it more explicit on what the interface is used for.  IBindable?\n. Well this is good timing for this discussion since I am just now starting to look at UWP support, and ViewModelLocator will be the first thing that will be brought over.  A better interface name will definitely need to be thought of.  ISupportXBind?\n. I am thinking something more along the lines of IXBindViewModel.  I like things that are self-describing in what they are used for.  I'm still not 100% sold on this, but this is something I will play around with as it is not difficult to implement.\n. Actually after thinking about it, I'm not sure this would work anyways.  I couldn't use a generic interface, because I would need to be able to cast the View as a generic interface, but I couldn't because the ViewModelLocator doesn't have access to those types.\nI would nee to be able to do something like:\nvar bindable = view as IXBindViewModel;\n....\nOf course reflection could be used, but then we are adding a performance hit for the sake of a single property.\n. Actually, it doesn't have to do with using a container, it has to do with trying to cast a DependencyObject (the view) as a generic interface in order to set the generic ViewModel property.\n. I do not believe this is possible in UWP.\n. Have you tried having a non-generic base class that looks like this:\npublic class ViewBase : Page\n{\n    public IViewModel ViewModel { get { return (IViewModel)DataContext; } }\n}\n. The best extension point to hook into with Prism would be the ViewModelLocator.  Create your own ViewModelLocator attached property based off of Prism's implementation:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Windows10/Prism.Windows/Mvvm/ViewModelLocator.cs\nYou can see how the DataContext is being set in the Bind method.  Just modify the Bind method to check for your custom interface and set it accordingly.\n. It is, but we don't have the resources to work on UWP right now.  Prism for XF is my priority right now.  Which I am working on adding modularity to now.\n. It's on the road map, but it's really far down the road.\n. no news. No timeline. it gets done when we get to it.. create your own module management system. Are you suggesting NavigationParameters : IEnumerable<IDictionary<string,object>>?\n. Hmmm.. I haven't really looked into that.  Not sure if that would cause any breaking changes or not.  I wouldn't think it would.  I do know that would mean implementing a lot more methods, meaning more code to write.\nPull request anyone :)\n. thanks for the pull request.  It's been merged.\n. We actually just converted this back to the original API. It was too large of a breaking change for no real benefit.\n. There are a ton of other scenarios that weren't considered before we changed it which caused a ton of breaking changes for all of our other customers. So we had to revert back. I think a better approach would be to add a TryGetValue method to the NavigationParameters instead of changing its base type. You could even use an extension method if using Any or First it inconvenient for you.\nCan you provide a code snippet on what you have to do now, and then another one of how you would like it to be?  This will help us better understand your scenario.\n. It is easy to not understand API decisions when you are not exposed to a wider range of application scenarios, especially those that have cross platform concerns.  As developers it is easy to only see things with tunnel vision, because we just have no idea of the other use cases that must be supported.\nThanks for the extension methods.\n. Of course for WPF, we won't change it, but we will have to discuss if we want to try to share a single NavigationParameters class across platforms or not.   Not only do these classes exist in different namespaces for WPF and XF (doesn't exist for UWP yet), they are different implementations.  So, if we did standardize on one, it would have to be the WPF version.  Then we would have a breaking change for a namespace that doesn't make any sense on either XF or UWP, unless we moved the namespace for WPF too.  I am thinking we will keep them separate for now.  One class of duplication isn't going to hurt us, and I am not sure is worth the hassle for developers.\n. Ahh, I see what you did.  Instead of implementing IDictionary, you just derived from Dictionary :)\nThat makes things a lot easier.\n. This is actually a good idea.  How do you envision the API working to enable this feature?  Using an attribute on the View, maybe something like a NavigationPageAttribute?  How about an overload of the NavigationService.Navigate method, something like Navigate(\"View\", useNavigationPage: true)?  Any other ideas?\n. I'm curious if it would be easier to just create a class the derives from NavigationPage and just register that with the navigation framework.\npublic class MyNavigationPageA : NavigationPage {....}\nContainer.RegisterTypeForNavigation<MyNavigationPageA>();\nOr something like that.  I haven't really thought this through, but it's just an idea that popped in my head.  Whatever the solution, it should not involve having the ViewModel know about a View type.\n. I'll have to think about this one.  Hopefully the community can come together to help solve this one.\n. My first stab at this will use an attribute on the view.  Something like [NavigationOptions(PageType.NavigationPage)].  Expect a PR for review soon. \n. Okay, so after implementing this, I think it may be better to Provide an attribute that accepts an IPageProvider.  So something like [NavigationOptions(PageProviderType=typeof(ViewAPageProvider)].\nThen it could be passed the view being navigated to so that properties can be set on it, then it could also return a different page to act as a wrapper/target page like a NavigationPage.\nWhat do you think about that?\nEdit:\nActually the more I play with it, the more I want to ditch the NavigationOptionsAttribute in favor of just a NavigationPageProviderAttribute.  Then provide a Type property for the INavigationPageProvider and use service locator to resolve it so that any dependencies the provider may need can be constructed.\n. Actually @odedlevy, the container is used to create the provider.  So you would have no problem injecting dependencies into your provider class.  Prism navigation doesn't use reflection, but the addition of this attribute does require reflection to check for the attribute.  For this reason, we cache the result so we are not incurring the cost everytime.\nIs it common to have a reference to the source page when navigating to another taregt page in order to configure properties on the target?  Testing the INavigationPageProvider should not be an issue at all.\nSince you are not a fan of the attribute, how would you like to see the API?\n. We definitely need to consider the need for multiple providers.  I also thought of adding an overload to the INavigationService interface to accept an INavigationPageProvider.  This would remove the need for reflection to check the attribute.  Another benefit to placing it on the navigation service is that you can provide different providers even when navigating to the same type of view.  This is a tough one.\n. No regions, but there is an approach to wrapping the target page in a navigationPage or other type of page.  See PR #195 for details.  This PR has already been merged.  Now, I am trying to decide if this should remain an attribute, or become something you must provide in the NavgationService.Navigate signature.\n. Well, you can actually return any type of Page from this interface, such as Master/Detail.  Also, you can have multiple XF.NavigationPages per app.  So I think I am going to remove the attribute and rely on the parameter on the Navigate method.\n. Now I have an issue.  If I do that, now the ViewModel will know about INavigationPageProvider (which relies on the XF.Page type in its members).  Is this a big deal?  I wanted to keep all references of XF.Page out of the ViewModel and any class that the ViewModel needs.\nThis also opens the VM up to inappropriate touching since using the INavigationProvider in the VM will give the access to both the source page and target page before navigation has completed.\nThoughts?\n. @odedlevy there is no need for an Enum.  Please see the implementation here:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/INavigationPageProvider.cs\nAnd here:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/NavigationPageProviderAttribute.cs\nYou can see the code snippet here for an example of how it would be implemented with some small changes since this PR is outdated now:  https://github.com/PrismLibrary/Prism/pull/195\n. Yes, the current code accomplishes everything you mentioned except currently to enable it you must attribute the view with the provider you want to use.\nThe reason I am not in favor of adding a param to the Navigate method is because now you have introduced an interface with knowledge of the XF.Page type into your ViewModel which breaks the MVVM concept.  I wouldn't mind adding the param, but I need to find away to remove this Page type dependency.\n. No. To clarify, the INavigationPageProvider reference the XF.Page type in its members. This means that when you use it in your VM, you now have reference to the XF.Page type, and now you also open a hole for the VM to inappropriately touch both the source Page and target Page within the VM.  This is not good.\nThe source still decides where you are navigating.\nThe attribute goes on the target View, not the ViewModel.  This keeps the View references and responsibilities in the View.\nI do agree on the benefit of deciding which provider to use during each navigation action using the param approach.  But, I have to find a way to remove the reference, or exposure, of the XF.Page type on the interface so that I can add the param on the Navigate method.\n. Yeah, I thought about that too. The problem with that is now you have to do casting from object to XF.Page in both the interface implementation and the Prism code base for consumption.  This not only puts a burden on writing the code, but also the performance hit taken with the boxing an unboxing.\nAlso this stills leaves the ViewModel open to the inappropriate touching of the source and target pages via the interface.\n. So, I just discovered that you can create a class that derives from NavigationPage:\npublic class MyNavigationPageA : NavigationPage {....}\nYou just have to either pass you default page to through the constructor:\npublic class MyNavigationPageA : NavigationPage\n{\n    public MyNavigationPageA() : base (new ViewA()) {..}\n}\n, or call navigate.PushAsync in the constructor:\npublic class MyNavigationPageA : NavigationPage\n{\n    public MyNavigationPageA()\n    {\n        Navigation.PushAsync(new ViewA());\n    }\n}\nSo now the question is, should the NavigationPageProvider be removed?\n. There is in the current NuGet, but I have removed it in the latest source code check in.  I am re-working the navigation to support deep linking scenarios, and removed it o that I can rethink the solution after the navigation code has been stabilized.\n. In 6.0.1 you use the INavigationProvider like this:\nhttps://github.com/PrismLibrary/Prism/blob/ba1858a088d6062a054f7deff3c3d7a68aa078b2/Documentation/Xamarin.Forms/3-NavigationService.md#wrapping-the-target-in-a-navigationpage\nLike I said in the latest source code this has been removed.  I have checked in deep linking navigation support into the repo.  So if you work from source assemblies for now, you ca do this:\nNavigate(\"ViewA/ViewB/MyNavigationPage/SubPageA/SubPageB\");\nIn this code snippet, ViewA, ViewB, and MyNavigatinPage will automatically be navigated to modally, while the subpages of MyNavigationPage will automatically be navigated to non-modally.  MyNavigationPage is just an empty class that derives from NavigationPage.\nJust so you now, you can create a Page that derives from NavigationPage.  You just have to make sure to navigate to a page in the ctor.\n. The MainPage has to be created in code because the Application doesn't have a Navigation proxy.  So you are correct, your MainPage ViewModel will not have INavigationAware invoked since it wasn't navigated to using the NavigationService. What is your use-case to have it fire on the MainPage instantiation?  Could you not use the constructor of the ViewModel instead?\n. So what this boils down to, is I need to add the ability to navigate using the INavigationService on App start up when the Applicatioon.Current.MainPage is null.  Is this correct?\nLet me think about how I can do this.\n. Yes, navigating to a NavigationPage as the Detail page of a MasterDetail is fully supported in the latest preview.  The INavigationPageProvider has been removed and is no longer needed.\n. This will be a very low priority.  Since there are mock classes available in Prism's unit tests as well as the old Stock Trader app, this isn't going to be something I get to anytime soon.  This is where a pull request would come in handy :0)\n. Thanks for the idea.  We will discuss it.\n. We have started looking into this and have already found an issue.  We have some dependencies, such as StructureMap, that are not strongly named.  This means if we strongly named Prism, then we would no longer be able to use those dependencies.  This would break current Prism users.  Unless we maintain two separate versions of Prism (signed and unsigned), this is a no go for our project.  We will continue to investigate this.  For now, you can download the repo and sign it yourself.  At least until we can come up with a solution that does not add a lot of overhead to the project maintenance.\n. Actually seems SructureMap does have separate signed version.  We will have to check all of our other dependencies, and then find a way to create the different packages with little overhead.\n. We have a PR #178 in which we are testing signing Prism.  I am not 100% confident in our dependencies (Autofac, Unity, etc.) sinced I'm not sure they are signed or not.\n. Thanks for bringing this issue to our attention.  We will look at how we can improve this.  Maybe we can add a property called something like AllowDisable that you can use to turn this off for these scenarios.\n. Great!  I haven't looked at the code yet, but could the AutoEnable property just be defined in the CommandBehaviorBase class instead of being passed to it?\n. This has been implemented\n. Well, we kind of have two scenarios.  We need samples to show off a feature or specific approach to a problem, and other samples that we use to actually test the functionality during development.  @briannoyes and I have discussed this briefly regarding if all the samples should just add the Prism projects in their solution to help enabled learning/debugging, or if the samples should just use the NuGet packages instead to keep the sample solution clean and focused as well as test the NuGet distribution.\nI don't think we have come up with an answer yet, but this is definitely something we need to figure out before we start porting existing samples or creating new ones..\n. We have decided that any sample that we create under the Prism-Samples-[Platform] repos will rely on the NuGet packages.  We will create new reference implementation apps that will be linked to the source code under the Prism repo at a later time.\n. Thanks for the suggestion @YehudahA but this issues is not for WPF, but rather Xamarin.Forms.  This is why there is a \"[XF]\" in front of the issue.\n. @noufionline No, we will not be adding a dialog service to WPF.  Dialog services are usually very specific to an application and/or scenario that usually involve a number of customized needs.  It is so simple to create a dialog service, there is no need for us to ship one that will most likely not meet the needs of most devs.\n. I'm curious how the proper PageResolver would be obtained when using different types of pages in a navigation lifecycle.  For example, let's say the MainPage of the app is a ContentPage upon loading.  We ask for the IDialogService in the Page's ViewModel, and everything works fine.  It will use the DefaultPageResolver.  Then we navigate away to a MasterDetailPage.  We again ask for the IDialogService in the constructor of the MasterDetailPage's ViewModel, but now how do we change out the resolver?  Since we are using DI to create our dependencies, we aren't passing them in manually.\n. Good point.  The responsibility could probably just be placed on the app developer for their specific scenario.\nAnother thought, should this be called an AlertService instead?  My gut is telling me it should, but wanted to get your thoughts.\n. This has been implemented by @joacar with PR #113 \n. Thanks for the PR.  We will review this as soon as we can.  It is vacation time for us, so expect a delay for the next few weeks.\n. This looks interesting.  We will look into this soon.  It is vacation time for us, so expect a delay in our response for the new few weeks :)\n. This looks pretty good.  We will discuss it as soon as we can.\n. I'm curious if calling InitializeEventHandlers inside the constructor of the DeviceGestureService would be better so that the consumer doesn't have to worry about making that call upon creation of the service.  We could then remove the InitializeEventHandlers method off of the interface.\nThoughts?\n. I think a Style property might be something to consider.  I also think that the call to SizeToContent can be moved into the GetWindow method.  Or better yet, add the SizeToContent property to both the DefaultConfirmationWindow and DefaultNotificationWindow objects in XAML, and also in the CreateWindow method before retuning the new Window instance.  This way the size can be better controlled.\n. This Style property has been implemented.\n. You're assuming that WindowContent will always be a custom class.  A lot of times it's just a simple inline declaration of elements.  Also, this would introduce side effects such as trying to create the provided type when the request to show the Window is made, which causes delays due to the various logic and size of the element trying to be created.  Even then, the constructor would still only be invoked once.  Otherwise you are suggesting recreating the object every time it is shown.  Which would not be recommended.  If you have already created the necessary object, why destroy it and keep recreating it just for the sake of getting the constructor to fire each time it is shown?  Now this would most definitely increase your memory consumption as multiple copies of the same object type are being created and stored until the GC decided to clean them up.\nThis is not a memory leak in any sense of the term.  When the view is collected, the WindowContent is also collected which in turn frees up the memory that was allocated for those elements.  I see no benefit in providing this capability.\n. It sounds like you should be using a dialog service rather than the PopUpWindowAction.\n. This doesn't seem to be needed right now.  I have a solution, and no one else has seemed to have asked for this.\n. I have a Pluralsight course that shows you how to add scoped region support for the navigation framework:\nhttps://www.pluralsight.com/courses/prism-mastering-tabcontrol\n. When using the navigation framework, you must register your views as type Object or it won't work.  This is a requirement for using navigation and is discussed in my Introduction to Prism course.\n. No, it's not a limitation. If you don't want to use the navigation framework, then you can continue to register your Views as you are now.  If you want to use navigation, you must register as an object because of how resolving objects with DI containers work in general.\n. @dvorn this is really going to be tough sell.  I have seen so many different requirements for scoped regions, I would be hesitant to try to add it directly to the framework as I know that it will only work for a certain scenario, and a lot of devs will still have to have their own custom implementations.. Thanks for the PR.  We will look at this as soon as we can.\n. Great work! Thanks for the PR\n. Good question.  This code was written a very long time ago, so I am not sure why it is that way.  This wouldn't be the first time we found some over complicated code.  I haven't looked at that code, but feel free to try it out and see what happens.  Though, I am not sure what the benefit of making this change would be.  We could be introducing risk for scenarios we aren't thinking about, which may cause issues for someone.\n. This is not something Prism addresses, but something like Fody does.\nhttps://github.com/Fody/PropertyChanged\n. Thanks for this PR.  We'll check it out the first chance we get.\n. Please remember this is an open source project in which we, as well as many other community members, contribute to in our spare time.  Spare time that we must find somewhere between our fulltime jobs, families, and other life responsibilities.  So please forgive us for not putting our family vacations on hold so that we can be ready to support Microsoft's initial RTM of Windows 10.\nAs @bartlannoeye pointed out, the community has already stepped up and provided a compiling version, which is awesome.  When we return from vacation, we will be merging everything into the main repo.\nA big thank you to @ElementalNex, @Feinstein, and @veccie for the awesome community support.\n. I don't know when Brian Noyes' vacation will end, but mine will be Aug 23rd.\n. There is no need for that \"workaround\".  You don't change anything \"in a DelegateCommand\", you are changing it within the ViewModel itself through a delegate method in response to the invocation of the Execute event in the DelegateCommand.  The original issue exists in your bindings not in the DelegateCommand.  Creating a binding to sub properties doesn't change anything related to the DelegateCommand.  This tells me it was something wrong with your initial bindings in your UI.\nAre you invoking the SelectItemCmmand with a button click or something?  Just declaring the command will not cause the code within the delegate to be executed.\n. Also, in your second example, you are not calling PropertyChanged in the setter of Baz, so of course your UI will not update.\n. That's good, that means you have something in your UI which is data bound to the command which will invoke it, causing your code within the delegate to execute.  Now you have to make sure you are properly calling PropertyChanged in the setters of your property, or use SetProperty, and that the bindings are configured properly in your view.  You also have to make sure you DataCOntext of your View is set properly.\n. Something is weird then, because it works fine for me.  Try declaring you command like:\nSelectItemCommand = new DelegateCommand(Execute);\nvoid Execute()\n{\n    Property = \"new value\";\n}\nDoes that make a difference for you?\n. The underlying Prism INavigationService does indeed use the XF navigation services.  Prism doesn't do anything different than if you were to do it with XF, except it abstracts away the view stuff from your VM.\n. Thanks for the PR.  I will review this after vacation.  I return from vacation the week on the 24th.\n. After consideration, we have decided to not include this for now.  If enough people ask for it, we will revisit this decision.  I believe using a dialog service would be a better approach to this scenario.\n. After consideration, we have decided to not include this for now.  If enough people ask for it, we will revisit this decision.\n. After consideration, we have decided to not include this for now.  If enough people ask for it, we will revisit this decision.\n. Yes, great catch.  It seems that for some reason, in the past Prism allowed you to have duplicate parameter keys.  When we changed it to Dictionary, this was no longer supported.  We believe this is a good thing.\nI actually consider the old behavior a bug.  There should be no reason to have a duplicate parameter.\nThis has been fixed.\n. We actually just converted this back to the original API. It was too large of a breaking change for no real benefit.\n. Thanks for submitting this.  I haven't tried 1.4.4 yet, so I'll have to look into this.  I find this interesting though since all the navigation service is doing is calling the Pop methods supplied by Xamarin.\n. I upgraded the projects to the latest version of XF 1.4.4.6392, and then ran the sample, and I got the same error.  This is very strange.  I think this is an XF issue, because absolutely nothing else changed expect upgrading XF.\n. Just reached out to Xamarin.  Seems this is a bug being reported by others as well.  I am going to wait to upgrade Prism until this has been addressed by Xamarin.\n. This has been fixed\n. Done.  Prism 6 is live on NuGet.\n. Why not just create NavigatingFromEventArgs and remove the \"Frame\" from it.  This may be reusable when we introduce region navigation.  Also, it would remove the concept of \"frames\" from the navigation service itself.\n. ReflectionOnlyLoad  only loads an assembly so that it can be examined, and does not allow it to be executed.  It also doesn't try to load any dependencies the assembly being loaded may have (depending on the assembly being loaded, this could be a massive dependency tree).  This means that ReflectionOnlyLoad also comes with a performance benefit.\nUnfortunately, this is not something we will be changing.  If you require the behavior you describe, you will need to contnue to use your custom DirectoryModuleCatalog.\n. I like a lot that is in this PR.  The UserActionService should be renamed to ActionSheetService.  This is more descriptive about the actual function of the service.  I am also not 100% sold on the UserInteractionFacade.  As you mentioned, it changes the meaning of the return value of the DisplayAlertSheet, and it's implementation is different than the AlertSheetService implementation.  That can be a source of bugs and confusion.  We should standardize on the platforms implementation.  Also, it seems to duplicate the calls that the services already have access to.  It would be easier to just call UserInteractionFacade.AlertService.DisplayAlert.  Since the UserInteraction is really a duplication of efforts, I don't think we should include it in the source.  This can easily be added by our customers, and it really only consolidate two small services to reduce the number of dependencies a VM constructor may need.\nThe folder structure needs some work, but that is an easy fix.  We should throw the IAlertService/AlertService, and the IActionSheetService/ActionSheetService into the services folder.  Remove the UserInteractionFacade for now.\nI am also undecided on the use of IPageAware or IPageProvider.  I can see benefits to both approaches, but do not want to cause confusion by using one interface differently than it was intended.  More thought is needed for this.  For now IPageAware will work, until we can decide what approach will be best.\n. Or... we could create one service called IPopupService/PopupService and include both DisplayAlert and DisplayActionSheet.  This would be similar to your UserInteractionFacade, but not be dependent on the other two independent services.  What do you think about that?\n. I guess I was trying to ask if we should either have a single service that performs both DisplayAlert and DisplayActionSheet in the form of an IPopupService (or some other name), or have two separate services (IAlertService/IActionSheetService) that must be used independently.\n. I discussed with @briannoyes and we both agree that a single service, that includes calls to both DisplayAlert and DisplayActionSheet, would probably be best in this scenario.  This means we can drop the IAlertService and IActionSheetService interfaces in favor of a single interface.\nSo, now we just have to think of a solid name for this service.  Hopefully it will succinctly describe what the service does.  Considering that this service will essentially provide access to the Page DisplayAlert and DisplayActionSheet methods, maybe something like PageDialogService?\nThoughts?\n. Okay, then IPageDialogService it is.  Let's keep the IPageAware property in the service closed for now.  I don't want to expose this to ViewModels.\n. This looks really good.  I really like what you did with the ActionSheetButton.  So much so I am making it part of the PageDialogService definition.  We will expose the native API as well as the improved API too.\nTo answer your question regarding what to do if the user taps outside the area to dismiss the ActionSheet.  I would guess that nothing has to be returned.  Since they are relying on Commands to be executed when a button is tapped, if no button is tapped then no Commands are executed and the action sheets is dismissed.\n. Due to package dependency differences, I went ahead an manually transferred your code into the master solution.  I also move the IPageAware into a Common namespace, and registered the PageDialogService with the Unity container.  Thanks for this awesome PR!\n. Thanks for sharing your sample.\n. Right now there is a bug in Xamarin.Forms which breaks navigation on Windows Phone.  We are waiting for Xamarin.Forms to fix this bug before we upgrade the Prism project.  As of now, Prism for XF is still on v1.4.0.6341 and WP 8.0\n. It is related to navigating in Windows Phone when calling PopModalAsync would throw an exception.  This is supposed to be fixed soon.\n. Xamarin fixed the navigation bug, so I upgraded to the latest version of Xamarin.Forms and added WP 8.1 support.\n. Good question.\n. In Xamarin.Forms this already exists.  For WPF, this would be a major effort that is not a high priority.\n. No known issues.\n. > This change is straightforward and can be easily done.\nThis is not the case.  I looked into doing something like this and it was not a simple task, and was going to take forever, so I decided not to work on it as I had higher priorities.\nThis would definitely be great to have, but I just don't have the time to do it.\nHaving said that, after Prism for XF is ships as stable, I am going to be researching adding regions to XF and UWP, which means the creation of a new IRegionNavigationService that can be placed in the PCL and shared across all platforms.  Of course a lot of thought and planning would have to go into a feature like this across all platforms.\n. @dvorn Region navigation in WPF is not really Async, and never was.  It was faked by providing a call back that would execute when navigation completed.  But, the navigation blocked the UI and was not done on a separate thread or in an async manner.\n. you cannot update ContentControl.Content without blocking the UI.  That's done on the UI thread.\nI would love to a PR, though @wldevries made an initial attempt and it was closed because we haven't done a proper review of the necessary changes that need to be made in order to support this without breaking anyone.\n. @dvorn at first glance it looks pretty good.  Things to keep in mind; we can't introduce breaking changes. We have to make sure the NavigationJOurnal works properly.  We have to make sure the navigation events fire when they are supposed to. We have to make sure we cover IRegion interface as well.  I am sure there are some other things, but that's it off the top of my head.\n. @dvorn  I don't mind breaking custom implementations (adding to interfaces), we just can't break default implementations.\nAs far as samples go, the Sandbox folder is not meant to be actual samples, but rather just a playground for developing features.  They can be completely deleted at anytime.\nIf we can get the PR to a point where it is accepted, then you should fork the WF Samples repo, and your sample there.  Then when the NuGet packages are updated, switch it to use the public Nugets, and then submit the sample as a PR in the samples repo.\n. @sunefred It didn't die. I am only one person. I haven't had time to properly investigate this implementation or all of the possible repercussions of implementing it.  Think more of it as being in a coma. One day it will have a miraculous awakening :)\nBy the way, if it dies, the PR will be closed.. > the developer should already be aware that something extra has to be done to inform the user of the switch\nPeople have a hard enough time with the simplest features of Prism.  Implementing this async approach could be a big can of worms I'm not sure I want to open.  I'm trying to decide what the real benefit of this would be.  There is nothing wrong with async void, and in the case of INavigationAware it would make sense.  The INavigationAware methods can be considered events, but due to the nature of the extensibility they were made an interface instead.  Async void doesn't really do anything except force you to do proper error handling.\nBeside syntactical sugar, what is the real need for this feature?  What does not having this prevent you from doing?\n. > Instead you need to add a try/catch block or handle the NavigationFailed event\nIf you're not doing this in your production apps, you're doing it wrong.  Catch all is a horrible way to handle exceptions, and I would never allow that in my apps.  Is you are using a Tasked based approach, and an exception is thrown, you still have to handle it or it will be swallowed.  Nothing changes here.. @wldevries Exception handling is not a motivating factor for implementing this async feature.  If that is the basis for this feature, then it will not be implemented.\n. @dvorn that is a knee-jerk comment that is unfounded an disrespectful.  You of all people should see the amount of work I put into this project every day.  Honestly, coming from you, it pisses me off.  Let's get a few things straight.  First, every single release of Prism.Wpf so far has had bug fixes and small updates.  Also, just because someone has a feature request or an idea doesn't mean it will be accepted.  Prism has a massive install base and is used in mission critical, and life-saving software.  Everything from finance, banking, infrastructure, medical, 911 software, and nuclear applications just to name a few.  You do not know the scope of Prism and don't talk to, or meet, with the customers in these industries.  I do!  For your information, no one else is asking for this feature (two doesn't count).  It is a very high risk feature that has no real demonstrated benefit, and needs to be properly and thoroughly tested before it will even be considered for implementation.  I haven't had time to do this.  The fact that I haven't closed it is showing good faith that the feature is still under consideration.  After that stupid-ass comment I am very motivated to just close it and move on.\nSince you think Prism.Wpf is dead, I suggest you fork it, and create your own version that you support 24 hours a day 7 days a week. You can travel the world evangelizing your own framework and deal with ungrateful people that don't get what they want when they want it.  You can spend all your free time away from family and friends writing tooling and training material to help your users.\nEither contribute and support the project the best you can, or don't.  That's up to you. What you won't do is make unfounded and ludicrous claims about a project that is constantly being worked on as \"dead\", just because one of your PR's aren't being merged quickly enough.  The choice is yours.. @sunefred You hit the nail on the head, and thank you for your support. I think a conversation is always worth having.  One thing that I am very protective about is behavior changes.  I am not apposed to making breaking changes as long as they are obvious and can easily be found such as an API break.  Behavior changes are the most risky and challenging to introduce.  If the break can be found with a compile error, that is more likely to be considered than a change in logic that will be impossible to discover until the app is in production and being used.  Those are the dangerous and critical breaks.  There must also be a demonstrated benefit to Prism in order to add the feature.\nI suggest you open your issue and start the discussion.  We can work through all your ideas and what problems we are trying to solve.\n. @dvorn apology accepted. I understand that it's easy to get frustrated when things you are passionate about don't move fast enough.\nAs far as adding this feature goes, instead of trying to modify what's there and breaking existing apps, what about if we introduce an new \"opt-in\" region service called IRegionNavigationService which is async friendly?. I am closing this as it is a duplicate of the more focused #657. We will continue any discussion there.. This has ben implemented.\n. @ekalchev see https://github.com/PrismLibrary/Prism/issues/678. Can you add this async call to the class directly?  We want to limit the number of extension methods being used in the Prism codebase.  Thanks.\n. This is great! Thanks for the PR\n. This looks pretty good.  We want to get away from the extension methods and provide this functionality though the interfaces to make unit testing a little less painful for users.  We would also need to add this async call to the IRegionManager since it's possible to call RequestNavigate off of that class as well.  Can you modify this PR with those changes soon?  We are trying to get this in the Prism 6 release which we want to try to release this week.  Thanks\n. I think the tests are divided up between a number of fixtures like the NavigationAsyncExtensionsFixture.  The RequestNavigate methods used to be extension methods, and we have been moving them into the actual classes to eliminate the extension methods and improve testability.  We may have some gaps in those tests.\n. Don't forget the IRegionManager :)\n. Well, since we are trying to release Prism 6 this week.  Let's hold off on merging this until we can flush it out completely.  I would feel more comfortable if we took our time and made sure everything was working perfectly before adding it.  So, continue to work on this to get it just how you want it, then we will do a proper review of it.  Once merged, we can release it as an update.  What do you think?\n. We are going to close this until we can do a proper async navigation design review.\n. We are going to close this until we can do a proper async navigation design review.\n. I don't think we will change the data type of the return value since this would break many people and require more than just a find/replace type of fix.  We are currently trying to decide the best way to host our documentation, and when we figure that out, we will update the documentation to be more explicit in describing this behavior.\n. were you able to get a null result?  I am not able to create the conditions necessary to have the Result property return null.\n. Nothing yet, sorry.  We are slammed with our day jobs right now.  We hope to find some free time soon.\n. This should be fixed with the new Template10 merge.. There are a lot of apps that actually use this feature.  Even I have some that do.  We will not be removing this support.\n. Interesting.  I'll look into this.  Thanks for reporting it.\n. uuuuggghhhhh!!!  I just found that the \"XML documentation file\" was not checked in the Build tab of the projects.  I will need to rebuild all of the assemblies, and repackage and upload the new NuGet packages.\n. Alright, all NuGet packages have been updated.  Check out v6.0.1 and let me know if the XML doc still don't show.\n. This is listed in the release notes https://github.com/PrismLibrary/Prism/wiki/Release-Notes---6.0.0\n. Good catch.  We were going to do that, but didn't get it in.  I'll remove it.\n. We actually just converted this back to the original API.  It was too large of a breaking change for no real benefit.\n. I am in agreement with @briannoyes.  I am closing this until substantial evidence in support of this request can be made.\n. Do you see this being handled in the ViewModel, or in a separate configuration class?\n. Please check out PR #195.\nCreate a new class that implement the INavigationPageProvider interface\n```\n    public class ViewANavigationPageProvider : INavigationPageProvider\n    {\n        Page _page = null;\n    public void Initialize(Page page)\n    {\n        _page = page;\n        NavigationPage.SetHasNavigationBar(_page, true);\n        NavigationPage.SetBackButtonTitle(_page, \"Go Back Sucka\");\n        NavigationPage.SetHasBackButton(_page, true);\n    }\n\n    public Page CreateNavigationPage()\n    {\n        var newPage = new NavigationPage(_page);\n        newPage.BarBackgroundColor = Color.Green;\n        newPage.BarTextColor = Color.White;\n        return newPage;\n    }\n}\n\n```\nNext attribute the Page that you are navigating to that you want to apply this provider to:\n[NavigationPageProvider(typeof(ViewANavigationPageProvider))]\n    public partial class ViewA : ContentPage\n    {\n        public ViewA()\n        {\n            InitializeComponent();\n        }\n    }\nNow navigate:\n_navigationService.Navigate(\"ViewA\", parameters);\n. fixed\n. Yeah, this test is a real pain right now.  Sometimes it fails, and sometimes it passes.  Basically the luck of timing it seems.\n. we commented this out for now until we can figure out why the test fails sometimes and passes other times.\n. If you add the [Bindable] attribute to the application class, does it still error?\n. @JerryNixon thanks for validating the state of UWP testing\n. @JerryNixon well that's not confusing :)\n. I'm not sure this is something that should tie into the navigation, but rather should exist as a separate feature.  Basically, you just want to respond to the page's appearing and disappearing life cycle, which may not be related to a navigation action?\n. I did a little research and this is a source of memory leaks.  The events are never unhook and the attached property retains a ref to the page which roots it.  Having said that, we will not be adding this to Prism for now.\n. Your PR fixed this.  Thanks.\n. I have updated the AppVeyor settings and everything seems to be working as you explained.\n. I think the reason it is named Execute as apposed to ExecuteAsync I so that is can be invoked async from the ICommand interface.  I'm not 100% sure why the Execute was written the way it is, but I am hesitant to mess with it without understanding the thought behind the current approach.\n. This has already been documented here:  https://github.com/PrismLibrary/Prism/wiki/Release-Notes---6.0.0\n. Just so you now, we just reverted this back to the way is was in Prism 5.  v6.1 will have this change.\n. Whoever told you that is wrong.  As Brian Noyes says, BindableBase and SetProperty are still the recommended way to provide INPC.\n. Thanks @DashPriyabrata! I am sure this will help someone else.. Great find!  Thanks for checking this out.  Any idea on when a fix for this will be released from Xamarin?\n. Thanks for the update.\n. Honestly this is not something that I think we will consider.  The initialization of a Prism app now is very simple and extensible.  I would probably challenge you on your approach, since you are now creating a tight coupling between the Prism app, and your Shell module.  So I am not really seeing the advantage.  If you just wanted to have the container of your regions to be dynamic, or in it's own module, then I would just have a single regioned Shell in the Prism app, and then inject your container (the view to act as your region container) using your Shell module to act as the region targets.  This way the Prism app is really just a dumb container.\n. There are actually some other changes I would like to make to the Bootstrapper regarding the Shell, but would be braking changes.  None the less, I would like your thoughts.\nSince we have dropped support for Silverlight, there is no need for CreateShell to return a DependencyObject.  Instead it can be a Window, since we know we are in WPF now.  Another change would be to modify InitializeShell to call Application.Current.MainWindow.Show by default.  So devs wouldn't have to worry about that method override at all.  Unless they are doing something custom.\nThe only thing is, this would break current apps.  I don't think it is a horrible break, as you are just changing the return type from DP to Window, and as along as the overridden InitializeShell didn't call base.InitializeShell, then there wouldn't be an issue there.  I'm not sure it's worth it or not.  Maybe not for the data type change, but possibly the change for InitializeShell would be worth it?\n. Okay, I can see not changing the DataType of the return value for CreateShell, but how about at least providing a default InitializeShell so that devs don't have to worry adding code just to show the Shell if it exists and it's a Window?  Something like:\nprotected virtual void InitializeShell()\n{\n     if (Shell != null && Shell is Window)\n     {\n          Application.Current.MainWindow = (Window)Shell;\n          Application.Current.MainWindow.Show();\n     }\n}\nThis change will only impact devs who called base.InitializeShell in their bootstrapper, and is easily fixed by removing that line of code in their override.\nThoughts?\n. Yes, I realize that this would break those who are either showing their shell in the CreateShell method, or that are calling base.InitializeShell in their overridden InitializeShell method call.  The fix is easy for both of those scenarios, and would eliminate code for the majority of users than it would impact those that are showing the shell in the CreateShell method (which goes against recommendations anyways).  The bottom line is calling Application.Current.MainWindow.Show is repetitive monkey code, that we can remove the need for, and still provide the flexibility needed for more advanced scenarios.\nI guess we can always wait for more demand, since this hasn't been brought up before now.  I just think we can make this part a little easier for our users, instead of keeping it the way it is simply for legacy support reasons.\n. Please review PR #184 to make sure this meets your needs.\n. CreateShell is now virtual.\n. Yes, we are definitely in need of samples.  We just haven't had time to create them yet.  I took a look at some of your samples and they are a great starting point.  I think there could be some improvements made, but overall very good.  We will discuss our format for samples and then give you guidance for your samples.\n. I have created a new repo for the WPF samples.  You should look at the HelloWorld sample and simplify your samples to meet it's structure and code.\n. Yes, it's just a time thing at this point.  We are want to get a preview out as soon as we can.  Also keep in mind, that for UWP, we have to use the new NuGet JSON format to create the package which honestly is a major pain in the ass.  NuGet is a hot mess right now.\n. You can read the documentation for Prism 5 on MSDN:  https://msdn.microsoft.com/en-us/library/gg406140.aspx?f=255&MSPPError=-2147217396\nNot a lot has changed functionality wise.  The main changes were in assembly references and namespaces.  We did add some new functionality to Prism 6 that I will cover in a blog post soon.\n. I also have a number of PluralSight courses that cover Prism:  http://www.pluralsight.com/author/brian-lagunas\nI will be updating the intro course to Prim 6 soon.\n. @briannoyes already has a course for Prism and WinRT here:\nhttps://app.pluralsight.com/library/courses/building-windows-store-business-applications-prism/table-of-contents\nIt is for Windows 8, but a lot of it still applies.\n. Not a bad idea, and it could be done without breaking anyone.  We will discuss this.  Thanks for the idea.\n. Actually, to implement this properly would require a new property on the IRegionBehavior interface, which would be a breaking change.  Because of this, we will not be introducing this feature right now.\n. Yes, ideally we would use the same Prism.Unity package.  Yeah, I have been trying to think of how we would do the versioning.  I am thinking introducing the 4th version number only on the NuGet packages for those types of releases.  So like 6.0.1.x where the \"x\" would identify an update in the assemblies in the package.  Or something like that.\n. I think we are going to stick with the v2 format for now.  v3 is just a pain in the ass and doesn't play well with others :).  v2 appears to work just fine with Universal apps, so we shouldn't run into any issues.  Has anyone noticed any issues with using v2 for UWP?\n. Could you update this PR with the changes made to the master?  Then we can start looking at creating the new NuGets for the next minor release of Prism for WPF and the Preview for UWP.\nWe will want the Prism.Unity package to include the DLL for WPF, UWP, and Xamarin Forms\n. What is the error?  I doubt this issue has anything to do with the Unity container, because Unity is registered as a singleton in the Shell project so when the module is loaded the IUnityContainer will be properly injected through the interface.\n. I am closing this issue, as this is not a limitation of Prism, but most likely an issue with application code.\n. Are you setting the Style's TargetType to be a Window?\n. Alright, I found the issue.  When the WindowStyle feature was added, there is a check for the type of style that is being applied  IN this case, the code is checking for a style of type Window, which means that unless the style is targeting a Window, it would not be applied.  This should be an easy fix.  For now you can override GetWindow method and copy/paste everything except the line of code which is checking for the type of Style.\n. Fixed\n. Actually, it would be easier to just make the current RegisterTypeForNavigation have an optional name parameter.  Which honestly, I thought it did, because that is the snippet I use in all my apps.  I must have gotten confused when adding this extension method.  Oversight on my part.\n. I also wanted to mention that I wouldn't use the FullName for the registration by default because that would force you to type in the fully qualified name of the view in your ViewModel.  Which is most likely not desired.  Instead, I would just use the name of the view itself.\n. So something like this:\npublic static void RegisterTypeForNavigation<T>(this IUnityContainer container, string name = null)\n        {\n            Type type = typeof(T);\n            string viewName = String.IsNullOrWhiteSpace(name) ? type.Name : name;\n            container.RegisterType(typeof(object), typeof(T), viewName);\n        }\n. This has been fixed for Unity, Autofac, and StructureMap\n. The problem with that is if you use FullName, then in your VM, when you navigate you will be required to provide the entire fully qualified name of the View.  So something like RequestNavigate(\"MyApplication.Modules.Customers.Views.CustomerView\").  This is not only a major pain in the ass, but it also creates a dependency of knowledge which will require you to know the exact location of the View as it relates to your module dependencies.\n. The good thing about this is that if you prefer the FullName, simply create your own extension method to support it.\n. If you want to use MEF for Prism 6 you must use the Prism.Mef NuGet package.  Just so you know, MEF is not an IOC container :)\n. Nothing changed except the namespaces.  What is your exception?\n. Also, please confirm that you are using the Prism.Mef package and NOT then Prism.MefExtentions package (deprecated).\n. Were you using Unity before you switch to MEF?  You said you removed the Unity package in an earlier statement, which implies you were using Unity.  If you did, then there are other steps that you must take when switching to use MEF.\n. Which stock example?\n. Worked for me.\n. All I did was download the ZIP.  Unblock the zip file before extracting.  Removed all old Prism packages, added new Prism 6 packages. Find Replace fix on namespaces.   Then it worked.\n. Interesting feature.  This implementation means that the attribute is only useful if the BindableBase class is being used.  Which could be a source of confusion.  I think it is worth discussing.  Thanks for the idea.\n. At this time, we will not be implementing this suggestion.  Thanks again, and keep the ideas coming.\n. Please post your question here:  http://stackoverflow.com/questions/tagged/prism\n. Do you have a sample that can demonstrate this issue that we could look at?\n. Is this related to #175 and will the proposed fix solve your problem?\n. Can you provide us with anymore information around your scenario to help replicate the issue?  Are you wanting the dialog to be centered in the parent window, or an element within the view that is located on the bottom right?\n. Can you provide a sample that shows this behavior?  I haven't been able to get it to go off screen.\n. fixed with #245 \n. I believe CenterOverAssociateObject isn't meant to replace StartUpLocation.  I think it was provided for cases where the notification window is not to be centered around a parent Window, but instead an element in a view.  @briannoyes do you know the history behind this?\n. fixed with #231 \n. We are looking into signing our assemblies too, so we may consider upgrading our support for Unity v4 at the same time.\n. Just so you know, Unity was always signed, but the new owners had to sign it with a new key file.  This means any assemblies that referenced an earlier version of Unity (pre v4) was built against a different signing key, and will not work against v4 because it is using a different key.  So, we would have to release an update that references Unity v4 in order for that to work.  Right now, there is no functional difference with v4, so we don't see a benefit of changing our support Unity version just yet.\n. We have our top two. Now on to the final stage.\n. @briannoyes and @bartlannoeye please check out this new Release-Signed configuration and let me know if you spot/run into any issues.\n. We are working on a more secure signing process.  This PR is not the approach we want to take for signing.\n. Are you expecting this to fire when changing tabs, or just when you initially navigate to a tab?\n. I'm still a little confused.  Do you have a sample that can demonstrate your issue?  Are you saying that the Notification isn't shown yet because the View hasn't been loaded?  You mentioned an error. Where does this error occur?  Is it an exception, or an output error.  What does the error say?\n. I would probably use an event trigger for the loaded event of the view and then invoke a command which would raise the notification.  You don't want to go throwing exceptions around just to show a dialog.\n. Because we cannot detect if the request is not received by the Interaction request trigger.  The InteractionRequestTrigger is bound to a SourceObject.  It uses reflection to listen for the Raised event off of the bound request object.  The framework handles this, and we have no way of knowing if the trigger received the event or not.\n. Prism already provides an async command.  Granted there is no cancellation token support.\n. There is always a possibility.  Especially if someone wants to submit a PR for it.\n. We aren't going to be adding this at this time.\n. What RibbonRegionAdapter?  Prism doesn't ship one of those.\n. Agreed.  Let's hope VS2015 is improved to better support these testing scenarios.\n. Thanks for the proof reading :0)\n. I guess we can give StackOverflow a shot using the \"Prism\" tag.  I lost my credentials for my account, I don't even know what email I used, so I will have to create a new account.  Hopefully you can subscribe to a tag or something to make it easier to monitor.  Also, I hope you can edit the tag information, because the \"Prism\" tag needs to be updated.\n. I have created my stack overflow account and requested a change to the \"Prism\" tag.  This is what we will be using to support Prism:\nhttp://stackoverflow.com/questions/tagged/prism\n. Well, we will be building a website to help aggregate our content in one place under the PrismLibrary.com domain.  Do we use GitHub pages and just use a redirect for the domain name?\n. Step one complete:  http://prismlibrary.github.io \n. @tomzorz This looks very promising!  Thanks.  I will check it out.  Looks like either way we need to convert our word doc into markup.\n. Okay so step one is definitely convert current docs into markdown. I have created issue #198 for this.\n. These classes are not deprecated, and are in the Prism.Core.dll under the Prism.Mvvm namespace.  Make sure you don't have any old packages installed that could be causing your issues.  Remove all old prism assemblies.\n. Please check out PR #195.\nCreate a new class that implement the INavigationPageProvider interface\n```\n    public class ViewANavigationPageProvider : INavigationPageProvider\n    {\n        Page _page = null;\n    public void Initialize(Page page)\n    {\n        _page = page;\n        NavigationPage.SetHasNavigationBar(_page, true);\n        NavigationPage.SetBackButtonTitle(_page, \"Go Back Sucka\");\n        NavigationPage.SetHasBackButton(_page, true);\n    }\n\n    public Page CreateNavigationPage()\n    {\n        var newPage = new NavigationPage(_page);\n        newPage.BarBackgroundColor = Color.Green;\n        newPage.BarTextColor = Color.White;\n        return newPage;\n    }\n}\n\n```\nNext attribute the Page that you are navigating to that you want to apply this provider to:\n[NavigationPageProvider(typeof(ViewANavigationPageProvider))]\n    public partial class ViewA : ContentPage\n    {\n        public ViewA()\n        {\n            InitializeComponent();\n        }\n    }\nNow navigate:\n_navigationService.Navigate(\"ViewA\", parameters);\n. This addresses #64 and #138\n. I'm a little concerned with the naming I am using, as I fear it may cause confusion.  CreateNavigationPage doesn't mean you can only return a Xamarin.Forms.NavigationPage, it means you can crete any tyoe pf Page that you want to wrap/navigate to.\nMaybe rename it to CreatePageForNavigation?\n. I am also curious if I should reduce this interface down to a single method.  Get rid of the Initialize, and just provide the CreatePageForNavigation method?  Or should I keep both methods to keep clear what is expected?\n. yes, one can be used without the other.  The initialize can be used to configure various properties of the view.  Then return null on the CreatePageForNavigation so that the page isn't wrapped in a new page, like  Xamarin.Forms.NavigationPage for example.  I am not 100% sure how useful that is though.  If you are using this attribute, is the expectation that you will always be wrapping the page in a different parent for navigation?\n. This has been fixed with the latest preview of Prism for Xamarin.Forms.\n. Phase one will be to convert.  Then we can go through and edit :)\n. Okay, WPF docs have been converted to MD.  Next phase, fix all the formatting, insert the images, and update the content one file at a time.\n. I'm starting Modular Application Development now.\nEDIT:  Completed with #217 \n. Awesome. Let remove the what's new page.  I'm about to board a flight to Germany, so I'll check in when I land in 10 hours :)\n. Looks like we completed the WPF doc conversion.  Thank you everyone for your efforts.\n. We have a winner.  You'll have to wait to see which one it is :)\n. If you are using Prism 6, there is a new extension method called Conatiner.RegisterTypeForNavigation which uses the view name by default.\n. It's there for all the containers :)\n. What is the purpose of this class?  What problem does it solve?  How does it fit into Prism's current feature set?  I see this being a source a memory leaks.  Why are you not using weak references?\n. I'm not really seeing the benefit.  If the Model already implements INPC, then you can simply hook into the PropertyChanged event directly.\n. I said I'm not seeing the benefit, not that there isn't one.  I am trying to understand exactly what this does.  Based on your description, it looks like it just lets you use a lambda to create a listener for a specific property name instead of using if/switch checks.  It is an interesting approach.\n. Thanks for the help!\nYes, remove C# tags.  Just provide the code snippets.\nThis doc images can be found here:  http://compositewpf.codeplex.com/releases/view/614456\n. Just want to mention that make sure the content is identical. When I used pandoc to convert the docx files, not all of the content came over. I found many cases where I had to copy from MSDN over.\nThanks again.\n. Good question.  I think we shouldn't update a package for sake of keeping version numbers the same.  Practically speaking, there will be some assemblies that don't receive any updates, while others (like WPF or XF) will receive a lot of updates.  We should only update a package version if it needs it.  I'm not sure about syncing on major versions or not.  I guess we can ask that question again when we get to v7 :)\n. Okay, we only need to sync the assembly versions when either we are releasing a new major version of Prism (like Prism 7), or if all assemblies get modified with the same minor feature.  For example, I just incremented all the Prism for WPF assemblies to Prism 6.1, because I changed all of them to have the assemblies signed during the Release-Signed build configuration.\nGoing forward, we only increment the assembly that was changed.  So if only Prim.Wpf.dll got new features/bug fixes, then only that assembly's version will be modified.\nI am going to implement the use of the AssemblyInformationalVersion attribute too.  This should help us keep things straight.\nI hope that makes sense.\n. What version of the .NET framework are you using?  Prism 5.0 and 6.0 only supports .NET 4.5 and greater.  If you download the source code and check, you will see that Prism is built against v4.5 of System.Windows.Interactivity.  Have you tried an assembly redirect?\n. Thanks for the sample.  Unfortunately, it worked perfectly for me in VS2015 with no errors or warnings.  @briannoyes and @bartlannoeye do you have any issues with this?\n. I'm glad you got it sorted out.  Let us know if you run into anything else.\n. I'm glad you got it figured out.\n. Probably the same!  Good find.  I hope they figure this out soon.\n. Voted!  BY the way, in the next update we will be shipping the assembly with our Prism.Wpf package so that this doesn't happen anymore.\n. While I appreciate your open and honest feedback, I think a lot of it is misplaced and you are not fully informed of the current state of Prism.\nFirst off, the version of Prism you are talking about (v4.1 and 5) was built and maintained by Microsoft and as not maintained by the community here on GitHub.  The breaking of VS was not an issue with Prism, but rather bugs in Visual Studio.  Obviously if a UserControl implementing an interface breaks the VS designer, that is not Prism's fault.  Your blame is misplaced.\nThe issues with the Interactivity are annoying, but once again it's not a Prism issue.  Prism did not write or ship the Interactivity assembly.  It used to ship with Blend, then Blend for Visual Studio.  Depending on what version of VS/Blend and VS update version you installed you might have a different interactivity version that was only because of a timestamp.  This is nothing Prism caused.  Once again, your blame is misplaced.\nYes, you are correct.  Microsoft really made a mess of the references.  That I can agree with.  If you were using NuGet, changing those references wouldn't be such a big deal.  But, if you didn't then it as definitely a pain in the ass to manually replace all the references.  Luckily, Prism 6 already fixed this issue.  There are only 3 references now; Prism.dll, Prism.Wpf.dll, Prism.Unity.Wpf.dll.\nBackwards compatibility is always a consideration.  We have decided not to make a number of changes/improvements as to keep backward compatibility in tact.  Having said that, somethings must change and evolve to improve the framework.  Sometimes those require a breaking change.  These changes are documented, and as a dev considering an upgrade you must read those docs so you can decide whether you want to upgrade or not.  If you decide to upgrade based on your research, then you must also have a plan in place to have a successful upgrade.\nIf you would have taken the time to review the wiki, project readme, updated docs, and changes you would have seen that all of these complaints have been fixed.  Once Prism was given to the community, a number of changes were made to address all of these issues.  Parts of Prism were architected to get around the bugs in Visual Studio so you no longer get those errors.  References were simplified.  xmlns namespaces simplified to one. New NuGet packages created.\nPrism 6 was initially released with these fixes in Oct of last year.\n. > Which is the \"right\" one? When this question comes up, I will usually go for the official Microsoft or Patterns and Practices version, which is what I did\nWell when you added the \"official\" MS packages you should have seen the word Deprecated next to the package title, with instructions on what to use in the description.  You should have also started by reading the Readme of this project which tells you exactly which Nuget packages to use.  It also tells you the history of Prism and how it ended up on GitHub and who maintains it now.  It also points you to some training videos to help you better understand Prism.  There is also a ton of documentation available that helps you better understand various topics.\n\nBreaking the designer is definitely its worst offense\n\nOnce again, your frustrations are misplaced.  All of the designer issues you describe are not the fault of Prism, but rather Visual Studio.  We had to implement work-arounds in Prism just to get VS to work properly.\n\nI just got an opportunity to continue on this project, which has been dormant for a while, and things just got worse\n\nI am actually curious as to what in VS you think is broken due to Prism.  There are only two known issues.  One regarding ViewModelLocator and the use of IView, and then the issue with Microsoft's Interactivity assembly.  Having said \"things just got worse\", you are just being dramatic now.  Nothing related to the Visual Studio designer changed, so it couldn't have gotten worse.  If you upgrade to Prism 6 it even gets 100% better, because these have been fixed.\n\nHere we are years later and the newer versions of VS 2015 and Prism still can't play nice. \n\nOnce again, you are wrong.  There  are no issues with Prism 6 and breaking the Visual Studio designer now.\n\nForgive me for getting verbose, but as a point of reference for the contributors of this project, I recently for the first time had to take a peek at iOS development environment on a Mac, even though I have been strictly a Microsoft developer and defender\n\nThis has nothing to do with Prism, so I fail to see the relevance.\n\nPrism requires all sorts of careful cajoling to get things to work\n\nCould you please elaborate on all the cajoling you need to do in order to get it to work.  I feel you are exaggerating your frustration to the point of trying to make Prism look as if it doesn't work.\n\nI would hope this project gets to a point where it is closer to what Apple has achieved\n\nYou do realize you are comparing apples to oranges here right?  Prism is an application framework for WPF, UWP, and Xamarin.Forms.  It has nothing to do with the underlying platforms it supports.\n\nI don't know what the relationship is between Microsoft and the community that has taken over this project, but I would hope there is some way to stop pointing fingers and get Microsoft to respond to the issues and work with the community to get such an important component to work harmoniously with the IDE.\n\nThere is no relationship with MS.  This community has no association with Microsoft.  There is only person here I see pointing fingers.  Once this community took this project over, every Visual Studio designer issue you have complained about (though you haven't been very explicit about which ones exactly) has been fixed.\n\nCan you please advise as to what is the best approach for my project? Do you think I would have to spend another couple of days fixing things if I update to version 6 from this group's library?\n\nThis is only a choice you can make.  Given your history you have given me, I would say that it would take you a couple of days to upgrade to Prism 6.\n\nIt is now somewhat broken, and therefore the frustration.\n\nI want you to realize you are complaining about an old version of a framework, and it's samples, that is no longer supported by Microsoft and hasn't been for over a year.\n. I want to also mention, that prism is now open source and supported by the community.  This includes you.  Since you have already identified a number of areas where Prism is broken, I think you are the perfect person to help us fix it.  If you would please fork Prism and fix the issues you have discovered.  You can then submit a PR with the fixes so that the entire Prism community can benefit. You can help make Prism better, which is the whole point of moving Prism to GitHub.  Just make sure you follow our contributing process:\nhttps://github.com/PrismLibrary/Prism/blob/master/.github/CONTRIBUTING.md\n. Great tip!\n. You're right, this isn't an issue, but you're really looking for advice on how to approach this scenario.  Please post this question here:\nhttp://stackoverflow.com/questions/tagged/prism\n. I don't have an issue with this change.  @briannoyes @bartlannoeye do you guys have any concerns with this?\n. I don't think we should make any changes to the ILoggerFacade, or add any extension methods for the reasons @briannoyes just brought up.  I would be more willing to pass the entire message since that shouldn't break anyone, and provide more information.  Even if they are searching the string for an error, I hope they are using Contains so the code should still work.\nOr we just leave it as is since it really isn't a pressing matter, and introducing this could introduce a break for no real \"mass\" benefit.\n. What additional information are you trying to gain from adding the entire exception details?\n. Well, I am curious why this wouldn't work by default.  In Bootstrapper.cs we are setting the ViewModelLocationProvider like this:\nprotected virtual void ConfigureViewModelLocator()\n        {\n            ViewModelLocationProvider.SetDefaultViewModelFactory((type) => ServiceLocator.Current.GetInstance(type));\n        }\nShould we override this in the MefBootstrapper and call it like in @znakeeye comment?\n. I noticed your PR #227 that you have a custom method for getting the owner.  Will Window.GetWindow not work?  Also, I am curious if we can always set the parent window, and remove the need for the property in general.\nI am also not sure about adding the WindowStartupLocation.  Maybe we just need to improve on the CenterOverAsscoiatedObject logic?\n. Is it not possible to use the WindowStyle property to do this?  Does the WindowStartupLocation property not work when using a style?\n. Ahhhh... yeah that would be a problem.\n. Based on your error, I think you are talking about UWP.  We had this same issues when testing.  We had to delete our output bins, and our nugget cache to get this to work.  It seems VS2015 and NuGet don't play well with UWP yet.  The nuget cache will be under C;\\Users\\UserName.nugget.\nLet me know if that works.\n. I just created a new app, brought in the packages, and it worked.  So yeah, it has to be related to how VS upgrades UWP apps.  Let me know if you are still having issues.\n. Please have a look at PR #245 and see if that fixes you issue.  I am not sure we should be adding a property for the widow startup position since we already have a property to control centering the window is relation to the associated object.  Unless you are wanting to have the other options like center screen?\n. I think I have a better understanding of what you want to do.  Let me think about how we can enhance the PopupWindowsAction to achieve the desired result.\n. Sorry for the late reply, but I am traveling in Europe and somewhat busy.  I'll review it as soon as I get a chance.\n. Thanks for the PR\n. There is nothing to serialize in the BindableBase class.  You can create your own base class that derives from BindableBase and mark that as serializable, if you require serialization.  This has been discussed in issue #57 \n. Thanks a lot!  This is really helpful.\n. And then submit a PR :)\n. There hasn't been any further interest in this and no PR has been received, so I'm closing it.\n. Fixed\n. For this scenario, I would recommend using a dialog service instead of the InteractionRequest.\n. You could simply register the PageNaviationService with the container in your bootstrapper, like this:\nContainer.RegisterType<INavigationService, PageNavigationService>(new ContainerControlledLifetimeManager());\nThen use the ServiceLocator to get your service.  Just keep in mind, when you do this, you will always be navigating off the Application.Current.MainPage object.\n. This normally happens because you are trying to navigate to a region that hasn't been created yet.  This is why you use RegisterViewWithRegion.  This will let the region handle injecting the view when it has been created.  This is also known as \"view discovery\".\n. I am not able to reproduce your issue.  Can you provide a sample that reproduces your issue?\nAre you are not registering your ViewB with the container for use with navigation?  If not then navigation will not work.\n_container.RegisterTypeForNavigation<ViewB>();\nIf the RegionManager didn't have the region in it, then ViewA wouldn't show at all.  If ViewA shows, it has the region.  How are you getting the RegionManager to navigate to your ViewB?\n. Ahhh... I see what's going on.  You are using MahApps Metro Window and trying to create a region on a command object that is not part of the visual tree.  Since the metro:WindowsCommand is not part of the visual tree, the RegionManager will not find the WindowCommand region at runtime.  So you just need to set the RegionManager on your metro:WindowCommands object manually.\nXAML:\n<metro:MetroWindow.RightWindowCommands>\n        <metro:WindowCommands x:Name=\"_windowsCommand\" />\n    </metro:MetroWindow.RightWindowCommands>\nCode-Behind:\n```\n        public Shell(IRegionManager regionManager)\n        {\n            InitializeComponent();\n        RegionManager.SetRegionName(_windowsCommand, RegionNames.WindowCommands);\n        RegionManager.SetRegionManager(_windowsCommand, regionManager);\n    }\n\n```\nNow it will work as expected.  Just remember, the RegionManager can only find regions that are part of the visual tree.\n. Actually it doesn't. You can look at the code to see why it works initially, and not when calling RequestNavigate if you want to understand the inner workings.\n. Well, I have documentation on the dependency service.  I am still working on the docs for XF.  There are more docs coming.  Would definitely appreciate any help on documentation I can get.  For now, if you need something to get you started, check out my blog post.  It's a little outdated, but still relevant.\nhttp://brianlagunas.com/first-look-at-the-prism-for-xamarin-forms-preview/\nSome major topics I still need to add:\n- getting started\n- navigation\n. Yes, please.\n. It sounds like you should be subscribing to the PropertyChanged events in your aggregated class, and expose methods to \"refresh\" the values of the sub objects calculated (and I assume read only) properties.  Also, if values in the assembly effect calculated properties of the parts, it sounds like you should be setting new values of the subparts that would internally update the calculated values of that part.\n. Since the parts have a reference to the Assembly then the parts can hook into the assembly instance INPC event and listen for changes there.\n. Yeah, I really hate how we have to do the service injection.  I requested Unity to add support for type based parameter override so that we can remove this limitation.  Also, I think that if we just use the Page property, it should work.  I'm not 100% sure if the dialogs must be shown from it's specific page.\n. Yeah, that is definitely something we need to do.  I have something locally that I use as a playground.  I'll try to think of a somewhat decent sample that we cam start with for this purpose.\n. Dang, I would really like to avoid this.  Have you tried just changing the service to use the property instead of the backing field?  For showing dialogs, it should be safe just to use the MainPage right?\n. Actually, that was only there for experimentation as part of the PR.  It was just never removed.  There is no need for that interface, and the Page property can just return the application mainpage.  Don't even need a backing field.\nI am also going to look into other possible approaches to solve the parameter override issue, because the navigation service does rely on the page instance but I hate the naming limitation.\n. You can also see the versions by viewing the current release on the releases page located here: https://github.com/PrismLibrary/Prism/releases\nThe region adapters that Actipro has available for Prism will work regardless of it being v5 or v6.  Simply take the code and bring it into your project and it will work.\n. Of course, just ask for it in the constructor.\n```\npublic StackPanelRegionAdapter(IRegionBehaviorFactory factory, IUnityContainer container)\n         : base(factory)\n     {\n}\n\n```\n. I am also not able to reproduce the error.  I am closing this until it can reproduced consistently.\n. Yes, we have use the \"help wanted\" tag in the past.  Right now, I'm not sure we have gone through and identified anything that the tag can be associated with.  Thanks for reminding us to utilize the tags more.\n. Great!\n. Well, it might be :)\nThe majority of the VML applies to all platforms, so this topic may be move up a level in the docs. \n. I have so much documentation to write, having one open issue on one topic is kind of pointless. Closing this :). Sweet!  This will be extremely helpful.  Just a few notes:\n- There is a new NuGet package for Unity for XF called Prism.Unity.Forms.  This had to be added because of XF's support for UWP.  So that will be the new NuGet to use going forward.  Although, currently it is still in preview.\n- I love starting with the Prism Template Pack, but we should also have a section on how to manually set up your project just incase you don't have the Template Pack because you are on an older version of VS.\n- Be sure to point to the Navigation documentation for more detailed information when you show how to navigate to a new page.\n- You can drop the \"Displaying a dialog\" and \"Using the Dependency Service\" from the Getting started.  These are well documented independently.\n. Well, since I added the new Module Editor to the template pack, I have run into an issue with VS2013.  It looks like it may now be a VS2015 only thing now.  I will have to see if I can get VS2013 to play nice or not.\nYour doc is looking great.  I may be weird, but I am actually quite excited about this :)\n. Fixed with PR #491\n. Thanks for the fix\n. This exists in Prism.Wpf.dll now.\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Extensions/ExceptionExtensions.cs\n. No just add Prism.Unity to your Xamarin.Forms solution.\nCheck out these samples: https://github.com/PrismLibrary/Prism-Samples-Forms\n. Prism.Forms does not have a PrismApplication, or PrismUnityApplication\n. BindableBase is already supported in UWP.  It's in the core Prism PCL.  Xamarin.Forms is working on UWP support, so when that is released, you will be using Prism.Forms with Xamarin.Forms to create iOS, Android, and UWP apps.\n. Great start.  I will add to what you already have.\n. I am not familiar with Ninject, so I am not sure of the best way to accomplish this.  It would be good if we can find someone familiar with Ninject to help guide us on this issue.\n. This looks great.  I'm at the MVP Summit this week, but will take a closer look next week and merge.  Unless @bartlannoeye wants to check it out before then :)\n. This is great! Thanks!\n. I think that we could improve the NuGet package layout/descriptions.  Maybe separating out the containers form the library would be a good start.\n. I think it may be useful to document which assemblies are in the various packages.  Maybe we don't have to use the same tables for this, but I think full disclosure is good regarding what will actually be added to the customers projects when a package is added.  Think about how we cam restructure this.\n. By the way, I do like the new format of the container support matrix\n. Thanks for reporting this.  We will simply set the Button.IsDefault property to true to fix this.\n. fixed\n. This has been this way since the beginning of Prism.  I am not aware of the history behind why this decision was made.  Honestly, I am hesitant to change this code as there is no telling what impact it would have.  @briannoyes do you have any knowledge of this?\n. I don't really understand your issue.  What are you expecting to happen?  You only load MainView once (Which IsActive = true), and then navigate within that view to NestedView (IsActive becomes true).  Next, if you click the Navigate button, you navigated View2 into the MainRegion.  MainView is now IsActive = false, and View2 becomes active.  Although, you do not have View2 implementing IActiveAware, so you don't get notifications there.\nFrom what I can tell, your region behavior doesn't do anything because the IsActive values are already true, and your behavior is just setting them to true again.\n. Ohhh... I get what you mean now.  Your behavior was throwing me off, because it is always setting IsActive to true, so the NestedView.IsActive was always true, even when you meant to be false.\nWhen you navigate away from MainView you want NestView to be IsActive=false too.  So when you come back to MainView, NextView.IsActive becomes true again along with MainView.\nIs this correct?\n. This is the expected behavior.  When a nest view is active, and it's parent becomes inactive, the nested view is still active within the context of the parent.  So if you need specific functionality to have a nested region go inactive with the parent, then you are using the correct approach of a custom region behavior.\n. I will have to research if an application with no MainPage has a functional INavigation that can be used.  If a MainPage is required before a navigation can occur, then this will make for a very interesting dilemma.  For now, you may be able to Override InitialzieMainPage, grab the BindinContext, cast it as the expected ViewModel, or as INavigationAware, and then call the OnNavigatedTo manually passing your parameters.\n. Another option would be to do that on the Page before you return it in the CreateMainPage method.\npublic override CreateMainPage()\n{\n    var page = new MyPage();\n    //do stuff\n    return page;\n}\n. Since there is a NuGet that already has this, what would the benefit be to adding it to Prism?  Where in Prism do you see this being used?\n. After reviewing Stephen's project, this is not something I believe should be brought into Prism.  Actually it seems you can use Stephen's code with Prism.\n. Ohhh... It did!  Back in v2.  In v2.2 it looks like it was removed.\n. Just call Command.RaiseCanExecuteChanged() when you need to requery it.\n. Nothing changed from Prism 4 to Prism 6 in regards to the execution of a delegate command.  It appears you are trying to make the call on a separate thread.  You should use the dispatcher to raise the method on the UI thread in which the command was created.\n. Yes, start a new issue addressing your topic.  This issue is related to XML comments.  If this is related simply mention this issue in your new issue.\n. @federom your issue has been fixed. You can now make calls RaiseCanExecuteChanged on a background thread and it will work.\n. What version of Xamarin.Forms and Prism.Forms are you using?  What is the exception?\n. If you are downloading the Zip of the current source code, be careful because it s being actively developed on.  You also have to make sure you are using the correct Xamarin.Forms version.  The current stable version is v6.0.1:\nhttps://github.com/PrismLibrary/Prism/releases/tag/Prism.Formsv6.0.1\n. Sorry for the late response.  Prism doesn't do anything special with the split view so you will have to manually close the pane.\n. Please look at how the default confirmation window is done:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Interactivity/DefaultPopupWindows/DefaultConfirmationWindow.xaml.cs\nAs you can see, your implementation isn't quite right.  Your Window should not implement IConfirmation, but rather have a property that is the data context of the window.\n. If you are using MVVM, there will be a DataContext. That's how MVVM works.. Have you tried using the WindowStyle property to set it?\n. Yes, as I explained in our last conversation, the fix for setting the owner is in the current code base.  So, if you use the current code base and then set the ShowInTaskbar property using the WindowStyle does it work as expected?\n. I tested this and it worked for me\n. I am still working on the navigation service.  The current code base supports what you want.  You just have to call navigate from the MasterDetail ViewModel, and it will automatically update the MasterDetail.Detail property as expected.  The same goes for NavigationPage.  If you have a view that is a child of a NavigationPage, it will automatically call PushAsync.\nThis is the sample I am using to test various navigation scenarios as I work on it:  https://github.com/PrismLibrary/Prism/tree/master/Samples/Xamarin/HelloWorld\nThis is only available in the current repo, not in the public NuGet packages yet.\n. Yes.  Didn't you try it?\n. You need to play around with the sample and the various navigation scenarios you want.\n. I'm assuming these are the default and current setting of the Prism code base, right?\n. This is not an issue with Prism or AutowireViewModel.  The app crashes because of limitations with testing Universal projects.  Actually, UWP testability really sucks right now.  The reason the test project fails is because you are using a custom application base class.  This would happen even if you used you own custom app base class.  This is the error that would be thrown:\nCannot deserialize XBF metadata type list as 'PrismUnityApplication' was not found in namespace 'Prism.Unity.Windows'. [Line: 0 Position: 0]\nYou need to add the BindableAttriute to your application class.\n[Bindable]\nsealed partial class App : PrismUnityApplication\n{\n    ...\n}\nKeep in mind, this will not be the only issue you run into trying to test a UWP app.\nThe other issue you are having when pulling your view and ViewModels out is due to the way UWP handles loading types from referenced assemblies.\n. Yes, this is the convention.  Don't worry, you can change the convention.  Check out this article.\nhttp://brianlagunas.com/getting-started-prisms-new-viewmodellocator/\nIt's a little outdated, but most of it still applies.  Especially the part about changing the conventions.\n. Interesting!  Is the Loaded event reliable to use to set the size of the Window properly?\n. So where are we at with this PR?  Does the positioning work correctly with multiple monitors and high DPI displays?\n. I tested this PR, and every thing seemed to work just fine regarding the positioning of the popup.\n. Dispatcher is Windows specific and doesn't exist in other platforms like Xamarin.Forms.\n. You can try.  This is an interesting scenario for sure.  I'm not sure how I would get around this in the DelegateCommandBase.\n. A PR would be great :)\n. That would be awesome!\n. Fixed!\n. No, this is not a problem Prism tries to solve as this issue is related to the tooling around app development.\n. You can already use the WindowsStyle property to set these properties for your popup window.  Also, these properties weren't implemented in your PR, just defined.\n. So, is the issue related to the positioning of the PopupWindowAction or how the OS is painting the windows?\n. This is most likely not related to Prism, as Prism does not control how the Windows are painted.  I cannot duplicate this on any of my machines.  Have you tried this on a different computer?  Do you have a sample you can share that duplicates it?\n. Have you tried moving your dialogs outside of the DataTemplate?\n. Well, I personally wouldn't have put it in the DataTemplate.  Based on your statement, you made each item in the DataGrid a \"ViewModel\", which contains the Command, which is why you placed it in the DataTemplate, correct?  This does elude to the issue being related to having it exist in a DataTemplate.  Of course without a repo, I am just speculating.  I highly doubt this is related to Prism as all the PopupWindowAction is doing is creating a Window object, setting the content property and then calling Show().  Have you tried with the latest source code?  We made some small improvements where we are setting the owning Window of the popup, but I am not sure that will have any affect on this particular issue.\nGive it a try and let me know.\n. Since this is not an issue with Prism, I am going to close this issue.  I would be interested in if you have found a workaround or not.\n. Just use an IDialogService service instead of the popup action.  This will abstract away any messagebox knowledge from your VIewModels.\n. I just published a new preview release to NuGet.  You can download the newest version and try it out, but I really doubt this will address your issue since this really isn't related to Prism.  But hey, you never know.\n. Sounds like something either in your environment or in you code.  Very strange that our sample works fine, but it doesn't in your apps.  Good luck.  If you find the root cause I would be interested to know what it was.\n. I'm glad you figured it out.  These types of things are always hard to find.  Especially when you have a fully functional production app full of styles.  Not as bad as debugging CSS though, but almost :)\nThanks for the update, and let me know if you run into anything else.\n. Thanks for the idea, but this is not something we will be adding to Prism.  You don't need to customize all the TabControls you use.  Only the TabCOntrols being used as a region.  Also, there really isn't any code duplication, you can create one style and use it for every TabControl that is a region, thus reusing that style across your application.  Yes, it is untyped, by that is the nature of binding in WPF in general.\nI think your behavior is a great approach to simplifying things for you, but the interface members are too limiting for mass usage.  For one, TabItem.Header is of type object, so not just text can go in there.  This implementation would limit that and would actually reduce functionality which is not something we want to do.\nI think leaving it as-is would be the best option as it leaves it wide open for the developer to choose how they want to implement it to fit their application requirements.\n. This isn't something I plan on doing anytime soon.  I suggest submitting a PR of just adding support into your specific project.\n. Since there has been no reply, I am closing this issue.. I actually have the same prismprop snippet :)\nYes, I am heads down in feature work, but please copy/paste your snippets here and I will add them to the list that we want to release\n. I will review what you have and see what makes sense to include when we finally get around to it.\n. So far, the only one that I would probably put in is the prismprop.  Maybe the prismVM one, but I will have to play with it.  Basically you have to create a new file, then delete what is there and then use the snippet.  Maybe a new item template would be best in this case?\nAs for the command snippets, I would not provide that type of guidance for defining commands so these would not be included in the official prism VSIX.\n. The first version of this has been released.  Please test it out and let me know if you run into any issues:\nhttps://visualstudiogallery.msdn.microsoft.com/e7b6bde2-ba59-43dd-9d14-58409940ffa0\n. great, now we just need to identify more snippets for code we write all the time, but also make sense to add to the plugin\n. I'm curious if a PubSubEvent snippet would be better than a PubSubEvent item template, or maybe both?  Hmm... maybe a CompositeCommand definition snippet/item template too?\n. So this is what I am thinking of adding so far:\nprismpropcmd - new DelegateCommand property (only getter/setter)\nprismpropcmdgeneric new DelegateCommand of T generic property (only getter/setter)\nprismpubsubevent - new PuSubEvent deinfition (should this also be an Itemtemplate or would a snippet do)\n. @boodoolak it's under the Prism category. You can also just search the template for Prism ViewModel.\n. @boodoolak We don't have any UWP templates yet.\n. @nguyenthanhliemfc You'll have to ask Resharper that question.  YOu can find the snippets here:  https://github.com/PrismLibrary/Prism-Extensibility/tree/master/TemplatePack/TemplatePack/Snippets/CSharp/Prism\nGood luck.. @nguyenthanhliemfc either VS is messing up, or you could have a conflict.  Easy to fix though.\nFind the Prism Folder in Code Snippets Manager, and update the URI to this location:\nC:\\Users{UserName}\\AppData\\Local\\Microsoft\\VisualStudio(Version of VS)\\Extensions{Install ID}\\Snippets\\CSharp\\Prism\nYou will have to browse and find the proper Install ID.\n. Well, in my view MEF is not a DI container.  It does container type functions, but it really isn't meant to be used that way.  Honestly, I wish the first version of Prism never shipped with official MEF support.\nMy guidance for choosing a container vs. MEF is this; if you need an unknown 3rd party extending your application, then MEF is your tool of choice.  If you are resolving known types and have internal access to the code, then use a true DI container.\nYou can actually use a DI container in conjunction with MEF for plugin app architecture.\nTo answer your question; will MEF become officially supported in Prism for UWP?  Not anything soon.  Luckily, you can easily create your own MEF extensions to work with Prism.  So if you want to use MEF, go for it.\n. While I can appreciate your point of view, not only do I not believe MEF should be used as a DI container, but I do not also want to support all the issues people run into when trying to use MEF.  That is another major factor in not adding support for MEF.\n. We do our best to keep the docs up to date.   We actually just moved them to http://prismlibrary.readthedocs.io\n. Because \"to verify\" means we have to verify the issue first before we can start working on a fix.\n. We haven't made any progress on the serialization issue.\n. This probably won't happen due to the reasons discussed in this post: https://github.com/PrismLibrary/Prism/issues/57\n. This issue has been resolved on SO. https://stackoverflow.com/questions/34062780/session-state-service-failed-uwp. How about a nuspec file and an update to our nugget generator script too :)\n. Thanks.  I don't see the Release-Signed build configuration for this project.  Can you add it?  Just look at the other projects to compare.\n. This is not 100% correct. There is a build for each of the four solution files (not including the PrismLibrary.sln) that occur anytime a PR is submitted, regardless of what file changed.  So any time something is checked in, all four projects get rebuilt.\n. I don't know why AppVeyor only shows the WPF project, but there is also a build for the UWP project here:\nhttps://ci.appveyor.com/project/brianlagunas/prism-gv1t3/build/1.0.15\n. The XF samples located here are not built against the current code base:  https://github.com/PrismLibrary/Prism-Samples-Forms\nThis sample is built against the current code base and is what I use for testing all the navigation scenarios:  https://github.com/PrismLibrary/Prism/tree/master/Samples/Xamarin/HelloWorld\nMake sure you have Android Marshmallow installed as the sample is built against that API and will not run without it.\n. Yes, it works.  I actively develop with it.  If that doesn't want to work for you then just create a new project and start from scratch.  Use the sample code to help you get started, but only use it as reference.  No reason to spend so much time trying to get a throw away sample to work anyways :)\n. I have no idea what your environment is missing or having issues with.  The project compiles fine in other environments, such as our integrated build server (you can see the build status here https://github.com/PrismLibrary/Prism).\nXF is just a NuGet, so that really shouldn't be your issue for compiling just the PrismLibrary_XF.sln solution.  Of course, make sure you are compiling using the Debug build configuration, because you can't build using the Release-Signed build configuration.\nWhat errors are you getting exactly?\n. Wait... are you unblocking the zip file before you unzip it?\n. try opening just the PrismLibrary_XF solution and just build that.\n. Yeah, all you need is the Prism assemblies, then you go create a new project.  I will say though, those \"errors\" may not be Build errors, but initellisense errors.  VS has a bug regarding XF projects.  If you change the drop down in the Error tab to \"Build Only\" does it work?  Those may just be intellisense errors and the app will run just fine.\n. Basically hit F5 and see what happens\n. I don't know of any memory leak issues with XF.  It's actually pretty aggressive with releasing objects.  I had a weak reference bug because they are so aggressive with disposing objects.  Be sure to provide your feedback both positive and negative with Prism for XF.\n. The samples in this repo are used for development efforts only, not as guidance.  There is no point in adding all the different container samples in this repo.  When the NuGets are available, these type of samples can be added to the Prism-Samples-Windows repo\n. Please remove the samples from this PR, and we will review again.\n. We never set any guidelines around this within the team until just right now :)\n. We are not going to accept any new containers for UWP until we have had an opportunity to take a proper look at the current UWP codebase and re-evaluate our current approaches.\n. At this time, unit testing UWP apps is not support.  I'm closing this issue until MS decides to realize that devs need to test their apps and add support for testing.  Related to #140 \n. In the current preview there is no support for this.  In the current code base, you would use an absolute URI to replace the MainPage and essentially remove and replace the current modal/navigation stack.  I will be pushing another preview with this update in it soon.\nI will think more about the PopToRoot scenario.  Can you add another issue specifically for PopToRoot?\n. What is where they started from?  Is it the App.MainPage?\n. Navigate(\"MasteDetail/Detail\")\nFor example; if you wanted to have a MasterDetailPage as your App.MainPage followed by a default NavPage as the detail that navigated async to another ContentPage it would be like this:\nNavigate(\"MasterDetail/NavigationPage/ViewA\");\n. What do you mean \"app links\"?  Do you mean you are launching the app via a website using a URI?\nIf so, you would navigate to an absolute URI like this:\nExplicit\nNavigate(new Uri(\"android-app://MyAppName/MasterDetail/NavigationPage/ViewA\", UriKind.Absolute));\nImplicit\nNavigate(\"android-app://MyAppName/MasterDetail/NavigationPage/ViewA\");\nIt can be any protocol such as \"http://\" too\n. Yup, in that case just navigate to your URI on Startup.  I'm about to publish a new Preview that has the absolute uri support in it right now.  Check for an update in about 5 minutes\n. New packages have been published.  Check out this sample for how to setup your app now.  I will update the official samples soon.\nhttps://github.com/PrismLibrary/Prism/tree/master/Samples/Xamarin/HelloWorld\n. It's in my comment above :)\n. Calling NavigationService.GoBack and hitting the back button do the exact same thing.  The only difference is, for the moment, the INavigationAware methods don't get called when using the back button.  I hope to fix that soon.\nBy the way, you don't go from ViewA to the NavigationPage.  Your ViewA is the root of the NavigationPage, so if you call GoBack from ViewA, nothing will happen.  Now, if you call GoBack from MyNavgationPage then you will exit the app because you just popped modal the MasterDetail.\n. This is correct. Since ViewA was the view you navigated to by calling GoBack, then INavigationAware is called on ViewA.  It wouldn't make sense to call INavigationAware methods on any other view that was not the target of the navigation.\nNo, this is how it should always behave.\n. There will never be an option to pass a page type via navigation, but in a future version there will be a way to cache pages for use during navigation.\n. Hmmm... I'll test that out on as soon as I can.  There could be a bug there with the GoBack. The logic to determine how to find the previous page in the stack may be flawed. I have a busy day tomorrow so I won't be able to look at this until Sunday.\nSince you are running from source, if you have time to debug through the GoBack logic that would be very helpful.  If you find the issue, you can also submit a fix :)\n. Remember, navigation is always relative to where you are calling Navigate().\nIf you open the menu from MasterDetailPage to navigate, then you must call navigate from the MasterDetailPageViewModel in order to replace the Detail with the target view.\nCalling Navigate() from your MainNavigationViewModel will not be replacing the Detail of the MasterDetailPage, but rather navigating another page onto the MainNavigationView navigation stack.  Also, if you are calling NavigationService.Navigate(\"MainNavigationView/UserContactListView\"); from your MainNavigationViewModel, then you are actually adding another NavigationPage that navigates to your UserContactListView to your stack.  Remember, your target is relative to where you are calling Navigate.\nSo, if you want to push another page onto your MainNavigationView, then you simply call Navigate(\"TheOtherView\"); from your MainNavigationViewModel.\n. That is probably happening because you are going from a modal stack to a non modal.  I'll have to research that.\nI do find it odd that you are navigating modal from a NavigationPage.  Not sure that makes sense from a mobile navigation perspective.\n. The suggested code is very specific to this particular navigation stack and will not work for every other possible navigation scenario.  I will have to think about the problem more in depth while considering all navigation scenarios and see of I can think of a solution.\n. No page types allowed in a VM.  This is actually more complicated than you may think initially.  Also, just because you are going back modally doesn't mean that the target is a modal view and there is no telling how deep the navigation stack goes.  But, you may want to actually go back to a modal view.  Considering the many different types of pages, each handling children differently and each having its own navigation stack, things get more complicated by the minute :)\nIdeally, the signature of the GoBack method should not change.\n. Can't rely on string types, as there can be many instances of the same type on the nav stack.  Also, a modal nav can happen from any page type not just content pages.  I have an idea of how I will solve this.  I still need to think this through though.\n. Hate to burst your bubble, but all of those assumptions are incorrect.  Every one of those is possible and actually should be expected.  You cannot base your logic on the application MainPage.  It has to be relative to the page calling GoBack, which may not be the current visible page.\n. The first step should be finding the position of the current page in the proper stack.  Then find the page prior to it in the stack.  Then iterate over the prior pages modal and nav stack to find the proper page to call OnNavigatedTo\n. page.Parent doesn't work like you think it does, and will not work reliably for other scenarios. Every page type can have a different navigation stack based on its parent and what views have been navigated to for a particular navigation branch.  So that means that a content page can have a nav stack if its parent is a navigation page.\n. A modal doesn't have a parent.  It's modal :)\n. Yeah, its a doozy for sure.  I have some ideas I will play with after my vacation.  This discussion did help me through my thought process, so thanks for that.  XF definitely made some interesting decisions regarding navigation, bit then again they are trying to unify nav for 5 or more different platforms in a single API.\n. I just checked in some navigation improvements with the GoBack method call.  Be sure to test it out.\n. Yes, there is a 6.3 preview on NuGet which has this built in.  Read what's new here:\nhttp://brianlagunas.com/prism-for-xamarin-forms-6-3-preview-with-improved-template-pack/. You don't close screens in Xamarin.Forms.  You push and pop them off the navigation stack.  I don't know what OnTapGestureRecognizerTapped is or how it is defined, but when using a modal navigation, you are essentially replacing the root of the application. As long as there is a page before the current modal page, GoBackAync will pop the current page off the stack.. You need to call GoBack from the Page you are leaving.  Not from the App.cs. Button holds two references to a command one through the Command binding, and it holds a second as a Delegate reference when it subscribes to CanExecuteChanged. And since it never unsubscribes, even though tearing down the view makes the binding one go away, the delegate ref lingers.\nWe used to have code in our DelegateCommand that made use of WeakReferences, but it was removed because other platforms would collect the weak reference too soon and the command would stop working altogether.  We will see what we can do about this.\n. Just so you know, this is a known issue with WPF:\nhttp://blogs.msdn.com/b/nathannesbit/archive/2009/05/29/wpf-icommandsource-implementations-leak-memory.aspx\n. This seems to be an issue with the WPF framework and how it manages ICommand.  Since in your scenario you had a collection of child VM's all with their own command, which used a data template to data bind the Button's Command and CommandParameter, you were creating a reference from the Button to the bound child VM, which held on to it after the child VM item was removed from the collection.  Once your View would have been destroyed these child VMs would have been released.\nI have reached out to Microsoft to see if this is something they can address.\n. Good news!  Well for Prism anyways... This is an issue with WPF's automation peer framework.  In this case, the TabItemAutomationPeer is holding on to the objects.  So no matter what ICommand implementation you use, you would have a leak.  I am working with Microsoft to see what can be done about this.\n. Try making this change:\n```\nprotected override void ConfigureContainer()\n{\n    base.ConfigureContainer();\nViewModelLocationProvider.SetDefaultViewModelFactory(viewModelType =>\n   Container.GetExports(viewModelType, null, null).Value);\n\n}\n```\n. Honestly, I don't know anything about MEF.  I never use it because it isn't a container, and I don't need the plugin support that MEF provides.  You're not the only one that runs into this regardless of using ViewModelLocator or not.\nhttp://stackoverflow.com/questions/18890651/mef-throws-exception-importcardinalitymismatchexception\nhttp://mindinthewater.blogspot.com/2011/05/problems-encountered-when-using-mef-as.html\nI would recommend just googling the MEF exception and see what you find.\n. Do you have a simple sample that will reproduce your issue to share?\nI'm closing this because it's not an issue, but I still want to help you figure it out so feel free to post a link to your sample for me to look at.\n. I'm not sure I follow.  A DialogService won't have a ViewModel.  The view it shows will, but not the service.  Can you explain your scenario in more detail please?\n. How would you use it?  The method only creates ViewModels for Views.  It doesn't cache them, so if you are calling this method, you get a different instance.  Can you explain how this would be helpful in your scenario?\n. Well, actually after looking at the method GetViewModelForView, it turns out it doesn't ever create ViewModels.\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Prism/Mvvm/ViewModelLocationProvider.cs#L107\nSo this methods doesn't help you out.\n. The VMLP is cross platform and has a single responsibility.  Not only should it never know about a NavigationContext, but the other platforms do not have such an object.\nI am really confused on why you are trying to use the VMLP to resolve ViewModels from within your ViewModel.  Just use the container, that's its job.\n. It seems your approach is a custom to fit your application needs.  Based on this information, we will not be modifying the VMLP to support this.  Thanks for the request.\n. Thanks for that.  I have seen that before, but I vaguely remember issues with it when trying to show multiple instances.  Have yo run into that?  We would probably have to think how we would introduce automatically scoping that type of region.\n. Yeah, the need for those type of customizations for production apps do not make it a good candidate to include in the source code, but we are eventually going to start a \"How To\" section in our docs where we can start documenting these types of things.  We haven't really figured out exactly how we want to do this, but it is something we are thinking about.\n. Your solution to managing scoped regions is here:\nhttps://app.pluralsight.com/library/courses/prism-showing-multiple-shells/table-of-contents\nand here:\nhttps://app.pluralsight.com/library/courses/prism-mastering-tabcontrol/table-of-contents\nThe good news is that all your issues have a solution.\n. Thanks for watching.  Those courses help pay to support Prism :)\n. @TaviTruman I'm sorry, is that a question about this PR?\n. I will throw an exception if a type cannot be created.  This exception will give instructions on where to start looking for the cause of the issue, such as registering your type for navigation.\n. I don't think this is a Prism issue as Prism does nothing with rendering of Pages.  The navigation service simply creates a page as you would normally and then calls XF's Navigation.PushAsync/PushModalAsync.  If you have custom resources I would start by removing them completely.  Remove everything and then add everything back one at a time until you duplicate it.  \nI'm closing this for now since we don't know what it is exactly, but if we find out that it is related to Prism, I will open it back up.\nLet me know what you find.\n. First it may help if you understand that Prism does not support Win/WinPhone 8.0/8.1, or Silverlight.  Those are essentially dead technologies as UWP is the direction of Windows Store dev.\nThe ViewModelBase is UWP specific in terms of functionality and contents of the class.  Prism only supports WPF, UWP, and Xamarin.Forms.  Navigation is applicable to other platforms, but each platform handles navigation completely different, so each platform must have it's own navigation service, as well as it's own INavigationAware interface.  The only platform that does any of the state session stuff is UWP.  So that is the only place ViewModelBase makes sense.\nIf we were only supporting Windows Store apps then this would be a no brainier, but unfortunately that is not the case.  If you are trying to write an app across WPF, Silverlight, Win/WinPhone 8.0/8.1, Console, ASP.NET MVC, and UWP all using the same navigation API, well then Prism probably isn't going to be a solution for you.\nPrism has to have a distinct implementation for each platform because each platform is so vastly different.  You cannot standardize on one INavigationAware for example.  Not unless you start dropping features until you reach the common denominator.  Which would probably only be OnNavigatedTo/From(NavigationParameters parameters).  Removing all of the session state functionality, which in your case would help you out anyways because you want that stuff.\n. Phone is dead, and so is this issue :). Interesting.  I haven't had a chance to test that scenario yet.  So it seems that if you are using the App.xaml approach, the InitializeComponent has to fire before the base ctor of the PrismApplication.  Since the initialization of the PrismApplication happens in the constructor before the InitializeComponent, try moving the call to InitializeComponent to the Oninitialized method before you navigate.  I'm not at my computer, so I haven't tested that, but it seems like they should work.  Let me know if that works, and I'll add it to the docs.\n. Is that an intellisense error or a build error?  can you hit F5 and will it run?  VS has a ton of issues with Xamarin.Forms and intellisense errors.\n. You don't need to prefix with \"App\".  There is no bootstrapper anymore.  You are dealing with a base application class now.\nSo it will be like this:\n```\n        protected override void OnInitialized()\n        {\n            InitializeComponent();\n        NavigationService.Navigate(\"MyNavigationPage/ViewA/ViewB/MainPage\");\n    }\n\n```\nAt least this worked for me.\n. Can you confirm if that worked for you?  If so I will update the Prism Template pack.\n. Great, thanks for the update.\n. Make sure both the App.xaml AND App.xaml.cs are using the PrismApplication.  It sounds like you haven't updated your App.xaml to use PrismApplication\n. Your syntax is wrong.\n```\n\n\n```\n. Please provide your sample so that we can make sure you have properly implemented the necessary steps.\n. You should reply to the same thread instead of opening new ones.  Continue discussion on issue #357\n. I think you have a slight misunderstanding of how scoped regions work.  When you create a scoped region, you must use the scoped region manger that is created instead of the globally registered region manager.  So when you have the scoped region manager, when your call RegisterViewWithRegion the view will be registered with the proper region manager and injected into the proper region when ready.  There is no need for an unregister method.\nhttps://github.com/PrismLibrary/Prism/blob/master/Documentation/WPF/50-ComposingtheUserInterface.md#creating-multiple-instances-of-a-region\n. Oh..... now I understand what you mean.  Yes, this is the expected behavior, and by design.  This is actually because of the AutoPopulateRegionBehavior.  If you don't want this behavior you need to use view injection or navigation.\n. If you have time it would be great of you could make a note in the docs and submit a PR :)\n. You should reply to the same thread instead of opening new ones. Continue discussion on issue #357\n. No, there is no such behavior in the IPageDialogService.  It is built on top of the Page.DisplayAlert, and Page.DiplayActionSheet functionality, so there is no automatically dismissing the dialogs.\n. You don't have to worry about resource clean up.  The docs you are referring to aren't the XF docs.  Here is the XF docs regarding DisplayAlert an DisplayActionsheet\nhttp://developer.xamarin.com/guides/cross-platform/xamarin-forms/user-interface/navigation/pop-ups/\n. I don't know if Xamarin.Forms has a memory leak or not.  Given that Prism is built on top of XF, then if there was a memory leak in XF, using Prism wouldn't fix it.\n. Each time you navigate to a page, the page is created and the VM is then created.  It will not recreate the VM when going back to the page via a GoBack call.  Only when navigating to the page.  We do not provide page caching yet as there are a number of issues that have to be solved first.  Namely, a page instance cannot exist in the stack twice.  So a new page instance must be created when navigating to a page.  So if caching, should we automatically remove the page from it's previous position in the stack (which stack) and the add it at the end?  Maybe, maybe not.  As you can see, this it just the tip of the iceberg.\n. This is expected in some cases.  For example, if you are navigating to a navigationPage and then another page, then only the final target will invoke those methods.  For example:\nNavigationService.Navigate(\"MyNavigationPage/ViewA\");\nThen only ViewA will have those methods invoked.  It doesn't make sense for the navigation page to invoke those methods.  For the same reasons that the OnAppearing or OnDissapearing methods aren't being called by XF.\nCan you provide more details on your exact navigation scenario?\n. Navigation is always relative to the current view.  So if you navigate to \"MainPage\" at app startup, the OnNavigatedTo will invoke on the MainPageViewModel.  So from there if you navigate to \"LoginPage\" then OnNavigatedFrom will invoke on MainPage and OnNavigatedTo will invoke on the LoginPage.\nAlthough the INavigationAware methods will work with logic based navigation, it currently does not work with the hardware buttons.  So if you press the hardware back button on WinPhone or Android, those methods will not invoke because currently there are no hooks in XF for Prism to hook into.  Also, there is no ability to prevent a back operation when invoked from a hardware button.  I am working with Xamarin to see if this is something that they can provide in their framework.\nYou are correct. GoBack will pop the current view and go back to the previous page.\nINavigationAware methods will only work when using the INavigationService method calls.\n. By the way, your second scenario is fully supported and will work as expected.\n. Ahhh, yeah I was assuming you were using the latest preview with the nav improvements. As you can see the current stable version has some limitations and issues.\n. I just checked in some navigation improvements with the GoBack method call.  Be sure to check them out.\n. Thanks for the question.  As @bartlannoeye pointed out, guidance from Prism is not to pass parameters via construction of your objects but rather during the navigation process using the INavigationAware.  What happens when you want to navigate to this view again?  Well, now you are forced to keep recreating it or duplicate your code.  Also, you are dealing with a container so just to pass a parameter via ctor is adding more complexity to your code base as you have to add infrastructure in place just to provide this functionality with your DI container.\nWe do not recommend passing parameters via the ctor.  If you wish to have this functionality, you can extend Prism to achieve your desired functionality.  We will not be adding this to the Prism code base.\n. Thanks for the suggestion, but at this time we prefer not to take on this new platform.  As the platform matures and gains adoption, we may reconsider it.\n. We do as much cross plat as we can.  One thing to keep in mind is that Prism has always been about providing guidance for building maintainable, scalable, and testable applications for XAML platforms, and not so much trying to be a true cross platform framework.  Even an INavigationService interface cannot be standardized across all platforms, which is why Prism doesn't have such an interface in it's core.\nNavigation is not baked into ViewModels.  The UWP ViewModelBase simply implements the INavigationAware interface to automatically handle state management while using the navigation service.  Since navigation is so vastly different on all the other platforms, we can't standardize on single INavigationAware interface either to add to the core Prism PCL.  This is really the only limitation preventing you from sharing your ViewModels 100%.\n. Well, I have had the same thought, but there are some issues with that. First, that would be a major functional change to UWP.  I'm not opposed to it, but we would have to make sure all functionality is kept.  Then we have XF which has additional parameters that do mot apply to any other platform.  Granted, they are optional parameters that don't have to be used, but the API just seems weird having parameters in a nav service that are used only for a particular platform.\nI haven't been involved in the UWP support.  When our XF support stabilizes, I am going to reevaluate the UWP navigation service and INavigationAware signatures to see if they can be consolidated.  For example, the NavigationParameters class should be used for UWP and brought into core.  It will be a major break for UWP, but might be worth it.\nLike I said, we are always looking at cross plat where we can make it happen.\n. This is not a defect or an issue.  Think about how you would accomplish this without Prism.  You would have to manually remove and add your view instances around your modal stack.  So you would always have to keep track of your page instances, and the iterate the stack to find it's current position, remove it, then put it back in the stack where you want based on where you are going and where you are coming from.  Also, you should not be using modal as you primary navigation mechanism using XF.  Modal works a lot differently on the other platforms.  For Windows it uses a navigation page under the covers so its seems like it works, but try on iOS and Android and you will soon discover different behavior.  You need to think hard about the flow or your application and how users get from one screen to another.  You'll  use a combination of Navigate and GoBack to manage your stack in Prism.\nWe are researching how to cache pages in XF for reuse, but there is a lot to be considered before we can implement something like that.\n. By the way, Prism doesn't default to modal.  It tries to be smart about what you want to do based on the current page and target page.  The latest preview has a lot of navigation improvements including useModalMavigation is null be default.\n. This is the right place to start such a discussion, so keep the thoughts/suggestions coming.  XF has turned out to be a very big pain in the butt when it comes navigation. It has the strangest nav pattern I've ever seen when there are two different navigation stacks and each page can have its own nav stack.  It's things like this that make it difficult to share code cross plat.\nI'm hoping that as Prism for XF matures, we can find more common ground to share across all plats.\nYou know XF supports UWP now so you could technically target all plat forms with the same VMs using Prism for XF.\n. That would be it.  Though, I would probably make that into an extension method or something for code reuse and maintainability.\n. We might be able to add something.  I'll discuss it with the team.\n. Would you expect to have the removed views available to you in the collectionchanged event args (e.OldItems)?\n. We are going to call it RemoveAll which will then iterate the Views and remove them one at a time which will give you access to the removed view in the collection changed events handler.\n. MEF 2 is a light weight version of MEF specifically meant for platforms such as web.  WPF will not benefit from this.  It is easy to create your own base bootstrapper.  Just look at the examples that are there already.  WPF will not be using MEF 2.  I am not sure if we will add support for MEF 2 for UWP or not.\n. Sorry, I don't use MEF.  MEF isn't a container, so I don't try to use it like one.\n. @ValdimarThor you are correct. Nuget cannot detect you are in an XF solution, so it is adding the wrong Prism Unity reference.  For now you have to manually reference Prism.Unity.Forms.  We will have to create a separate NuGet package for XF containers to accommodate the newly supported UWP projects in an XF solution.\n. My newest Prism Problems and Solutions Loading Modules Based on User Roles course should be published soon.  Then I have more in the works after the holidays.\n. As I mentioned in this thread, you can't use NuGet to add the correct assemblies to a UWP project.  For example, PrismApplicationBase does not even exist in PrismForms because that is in the Prism.Windows assembly.  For now, you have to manually add the references to your UWP XF applications.\n. Okay, I created a new NuGet package to support UWP in XF apps now.  Can you guys try it out and let me know if you run into any issues:\nhttps://www.nuget.org/packages/Prism.Unity.Forms/6.2.0-pre3\n. I don't think the ctor should be added, but I don't see any issue with the fluent API improvement on RegisterCommand.\n@briannoyes do you have any feelings about this?\n. Per discussion in #380 we will not be implementing this.\n. You can't.  This is a side effect of using MVVM to write loosely coupled code.  All you are doing is raising a notification and anything in the view listening for that can respond.  When using interaction requests, just don't forget to have your view respond to them.\n. Would having this same fluent API be helpful on UnregisterCommand too?\n. Actually the more i think about it, the more I can't see the need for this fluent API.  In what scenario are you registering multiple commands in a VM with a single CompositeCommand?\n. That is not the intention of a CompositeCommand.  There are many ways to integrate analytics into your apps, but I would not be using a CompositeCommand to do it.\n. No, I wouldn't use it for that either.  I would just have a 4th command that called the logic of the other 3 commands.  If everything happens in the same VM, there is no need for a CompositeCommand.  CompositeCommands are meant to support cross-view and cross-module communication.\n. Sorry for the delay.  I have been swamped with my day job.  Would you mind throwing together a simple example for me?  That would really help me get to this sooner rather than later.\n. So I have been looking into this and I can see the exception, but I am confused on your use-case of IRegionMemberLifetime.  The IRegionMemberLifetime interface is primarily intended to allow you to manage the lifetime of views within regions during activation and deactivation, the KeepAlive property is also considered during navigation after the new view is activated in the target region.  When calling Region.Remove you are completely bypassing the IRegionMemberLifetime functionality because you are explicitly removing the view, so no matter what the IRegionMemberLifetime  value is, you will always be removing the view.  This is where the exception comes in.  Since you are explicitly removing the view from the region, when the IRegionMemberLifetimeBehavior kicks in it also tries to remove the view again, since it thinks you are trying to have the IRegionMemberLifetime manage the lifetime of the view.\nSo what exactly are you trying to accomplish?\n. So you have a scenario where you are using a view in both navigation scenarios and scenarios where you have to manually remove the view.  That seems acceptable to me.  I think we can add a simple check in the RegionMemberLifetimeBehavior to do a simple check like:\nif (Region.Views.Contains(inactiveView)\n     Region.Remove(inactiveView);\nThis should protect against exceptions in your scenario and not break the current functionality.\nWhat do you think?\n. Actually, after thinking about it, you may be on to something.  It may be best to only apply the RegionMemberLifetimeBehavior to SingleActive region adpaters only, so the ContentControlRegionAdapter and the SelectorRegionAdapter only.\n. But... if someone created a custom region adapter that uses a SingleActiveRegion, then they would be broken.  So maybe this isn't the best choice after all.  Hmm..... Still thinking\n. I went with the simplest fix which was the conditional check.\n. How is this different than having a single command call multiple methods?\n. Well, that's not a dependency.  That's just logic.  Methods call other methods in code.  If your logic requires and Exit method call, then it needs to have an Exit method call.  Essentially all you are doing is making your method calls via an ordered list of methods.  They have to be defined in a specific order or it breaks.  What happen if one command's CanExecute delegate returns false, while the others return true?  What if that occurs in the middle of your logic chain?  Very prone to bugs.  You can accomplish the same thing by adding a method to your VM that takes in multiple delegate methods instead of commands.\nThanks for the idea, but this is not something we will be adding to Prism.\n. By the way, what you would really want to do is something close to this:\n```\nvoid Save()\n{\n    if (PerformSave())\n         Exit();\n}\nbool PerformSave()\n{\n    ....\n}\nvoid Exit()\n{\n}\n```\nYou remove your \"dependency\" and still keep your logic separated into their proper concerns.\n. The navigation journal does not track view instances, rather URI's.  So no, if you remove a view from your region by calling Region.Remove, this does not impact the journal.  The journal will maintain the IRegionNavigationJournalEntry and use it's URI to navigate to it when calling GoBack/GoForward.\n. Currently there is no ability to remove items directly from the back/forward stack of the navigation journal.  We have issue #30 to track this feature.  Manually removing views from a region should have no impact on the navigation journal.  Now, calling Clear on the navigation journal would completely clear out both the back and forward navigation stacks.  If that would meet your need, then you could use that approach.\n. Out of curiosity, are you wanting to remove a view that is in the middle of the journal?\n. So if you had a nav like this:\nViewA -> ViewB -> ViewC\nand then called GoBack from ViewC, you want to be on ViewB, but essentially remove ViewC from the Forward stack?\n. So I have been thinking about this and right now Prism uses Stack objects for both the Back and Front nav stacks.  This means there is no way to remove items in the middle of the stack for example.  But what if we exposed a RemoveLast method that would remove the last entry in the journal.  So on the you can call RemoveLast to remove the current view from the journal and then call your navigation method.  Well something like that.\n. Actually, I'll have to double check on the timing of these events.  If I navigate from ViewA to ViewB, is ViewB in the forward stack already?  I know ViewA is on the back stack.  When I go to ViewC, at what point is ViewB on the back stack.\nWe may have to use a different data type for the stacks to allow iterating them to remove items which I would be a little hesitant to do.\n. What happens if I navigate to ViewA -> ViewB -> ViewC, but when I GoBack() I want to go to ViewA.  So we need to think of a cohesive stack management feature.\n. I understand your scenario, but we have to consider the other issue of not allowing a view being adding to the back stack which occurs during navigation discussed in issue #30.  So we need a cohesive approach for controlling the stack for both back and forward scenarios which makes this more complicated.\n. Give this navigation stack (bold is active view):\nViewA -> ViewB -> ViewC -> ViewD\nThen call GoBack()\nViewA -> ViewB -> ViewC -> ViewD\nThen call GoBack() but remove only ViewC from the nav stack\nViewA -> ViewB -> ViewD\nWould this ever be needed?\n. Good catch. I don't see an issue with this change. How about you submit a PR :)\n. I'm glad you said something @MattWhilden.  We have actually run into a number of problems related to the .NET Native compilation.  This is the most recent report, but we also has reports related to serialization in issue #333, though I think we may have a work around for that.  Not sure, I will have to double check the issue.  We still have to verify this particular issue specifically, but it does work in debug mode :)\n. Thanks @MattWhilden, that's great to know!\n. Interesting, what's your default culture?\n. @MattWhilden have you had similar issues reported when using resource files and compiling with the .NET Native toolchain?\n. Thanks for the update.  I'll leave this issue open until a fix has been confirmed in the .NET Native compiler so that all interested parties will be notified when the fix is available.\nThanks again!\n. @mustaphakd thanks for your vote :)\nWe do have docs for WPF, but our docs on UWP and XF need to be done.  Docs are definitely on our todo list.  As our feature work slows down, I am sure our docs will start to improve :)\n. So how do we feel about something like:\n- propp\n- cmd\n- cmdg\n. snippet shortcuts have been shortened.  This has been addressed with PR #393 \n. Yes, you just have to manually register the ViewModel with your View using the ViewModelLocationProvider.Register method.\n. The MasterDetail toolbar functions differently between FormsApplicationActivity and FormsAppCompatActivity, but that is not the root of your navigation issue.\nThe reason the toolbar is showing initially is because you have the ContentPage wrapped in a NavigationPage.  Once you navigate by clicking the \"ViewA\" button, you have now navigated to a new view.  Since you made the navigation call from the MasterDetailViewModel, this replaces the current Detail with the new target View, which is not wrapped in a NavigationPage, and removes the NavigationPage/ViewA completely.  So hence, your toolbar is removed.\nYou have to rememebrt hat navigation is always based on the calling page.  So if you want to maintain the same NavigationPage in the MasterDetai.Detail, then you have to navigate off of the NavigationPage.Current instead, and not the MasterPage itself.\nSo you would want to do something like this:\n<MasterDetailPage.Master>\n    <ContentPage Title=\"My MatserDetailPage\">\n      <StackLayout>\n        <Button Text=\"ViewA\" BindingContext=\"{x:Reference masterDetail}\" Command=\"{Binding Detail.CurrentPage.BindingContext.NavigateCommand}\" CommandParameter=\"ViewA?id=A\" />\n        <Button Text=\"ViewB\" BindingContext=\"{x:Reference masterDetail }\" Command=\"{Binding Detail.CurrentPage.BindingContext.NavigateCommand}\" CommandParameter=\"ViewB?id=B\" />\n        <Button Text=\"ViewC\" BindingContext=\"{x:Reference masterDetail }\" Command=\"{Binding Detail.CurrentPage.BindingContext.NavigateCommand}\" CommandParameter=\"ViewC?id=C\" />\n      </StackLayout>\n    </ContentPage>\n  </MasterDetailPage.Master>\n. I'm curious why you would expect that behavior with your snippet?  If it were to behave the way you were expecting, how would you replace the Detail with a new NavigationPage?  Also, what would be the point of removing the previous page form the NavigationPage and adding a new one?  You would gain no benefit since you would not have the navigation history in the NavigationPage.  So it appears you would be doing this for the sole purpose of keeping the toolbar.  Would that be an accurate statement?\n. Yes, that is the expected behavior when using FormsAppCompatActivity.  The MasterDetailPage.Detail page will only display a navigation bar if it is an instance of NavigationPage.\nSo if all you want is to have the toolbar show for everypage, but don't want any of the navigation history, then just place all the page in a NavigationPage like in your above smippet.  Just realize, this is a new NavigationPage instance on every navigation.\n. The Sandbox project is my playground for playing with features.  When the navigation functionality stabilizes I will create a MasterDetail sample.\n. Just so you know, I am trying to think of how Prism can make this more intuitive and easier to use.  Basically hide the platform limitations/annoyances from the user.  I am going to research using attached properties to control the NavigationPage scenarios for MasterDetailPages.\n. Correction:  If your snippet is:\n<StackLayout>\n        <Button Text=\"ViewA\" Command=\"{Binding NavigateCommand}\" CommandParameter=\"MyNavigationPage/ViewA?id=A\" />\n        <Button Text=\"ViewB\" Command=\"{Binding NavigateCommand}\" CommandParameter=\"MyNavigationPage/ViewB?id=B\" />\n        <Button Text=\"ViewC\" Command=\"{Binding NavigateCommand}\" CommandParameter=\"MyNavigationPage/ViewC?id=C\" />\n      </StackLayout>\nThen the NavigationPage is reused, and we are removing the previous page, and adding the new one.  I got confused.  Anytime the Detail is the same as the target page, it is reused.\nI guess my question to you would be, should we modify the NavigationPage logic to always add pages to the NavigationPage stack, or remove them like we do now.\n. Okay, the more I look at this the more I think the ProcessNavigationForNavigationPage logic needs to be rethought.  I think some improvements can be made there.\nSome decisions need to be made regarding navigating from a NavigationPage.  Right now the logic goes something like this:\n- If NavigationPage.NavigationStack is empty, then create a new page.\n- Check the first element in the NavigationPage.NavigationStack, and if that page is the same as the next, and there are more items on the stack, then PopToRoot, and continue. (should this change)?\n- If the root page page is different, then PopToRoot, and continue - (should this change)\nBasically, should we always clear the stack when navigating from a NavigationPage, or should we just always keep pushing onto the NavigationStack?\n. I actually found a bug in Xamarin.Forms which is causing the MasterDeatil button to render incorrectly when reusing the NavigationPage.\nWe can track it here:  https://bugzilla.xamarin.com/show_bug.cgi?id=38105\n. As you alluded to, I would never recommend binding to a property in your VM as a CommandParameter as there is no point or benefit in doing that.\nYou would have the exact same problem if you did this:\n```\n        private string _raised;\n        public string Raised\n        {\n            get { return _raised; }\n            set { SetProperty(ref _raised, value); }\n        }\n    public MainWindowViewModel()\n    {\n        ...\n        PropertyChanged += MainWindowViewModel_PropertyChanged;\n    }\n\n    private void MainWindowViewModel_PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)\n    {\n            ShowTestCommandRaised.RaiseCanExecuteChanged();\n    }\n\n```\nThis is not a scenario that I think should be supported.  It is so rare, in fact I have never heard of it before, that no time should be spent trying to figure out some way to control the timing of the INPC event and the WPF binding system.  Honestly, I'm not sure how you would control the timing at all.  I'm going to mark this as \"won't fix\" for now.  Thanks for submitting this very interesting issue.\n. You're better off just exposing a public property for your container off of the applciatin class, o rjust use XF's built-in DependencyService registration:\ndocs:  https://github.com/PrismLibrary/Prism/blob/master/Documentation/Xamarin.Forms/5-DependencyService.md\nsample:  https://github.com/PrismLibrary/Prism-Samples-Forms/tree/master/UsingDependencyService\n. @NewBLife you can use the IPlatformInitializer to register your platform types directly with Prim container.\nLook at this example: https://github.com/PrismLibrary/Prism/blob/master/Sandbox/Xamarin/HelloWorld/HelloWorld/HelloWorld.Droid/MainActivity.cs. I'm not sure I understand.  You get the container in the IPlatformInitializer.  What you have works, but not sure why it's needed.. Well, you already have the application in the platform specific app. So just use the Container property off of it:\nvar application = new MyApp(new UwpInitialer());  \nvar ea = application.Container.Resolve<IEventAggregator>();.. What are you testing in your View?  Are you only checking to see if a DataContext was set to a VM?  If so, that might not be worth testing since the VIewMOdelLocator is already covered with the Prism tests.  Also, most unit test libraries support testing views, like MS Test, which is what all tests are written in for Prism.Wpf, including testing the views.\n. In your test did GetWindow(AssociatedObject) ever come back null when GetWindow(this) did not, and vice-versa?\n. Can you provide a repo?  It may very well be that we should be using GetWindow(AssociatedObject) and drop GetWindow(this) all together.\n. So I did a little playing around, and I think you are right.  We should be using GetWindow(AssociatedObject).  Can you modify your PR to remove the use of GetWindow(this)?\n. Thanks for the PR, and good catch!\n. Well, we can't change the interface definition because it would break every single Prism app out there for no real benefit.  It's a good API suggestion, but it needs to be done so that it will not break anyone.  Think about it a let me know if you come up with anything.\n. Yeah, Resharper is a good tool, but we can't rely on a third-party in order to provide our VS tooling/templates.\n. Do you mean edit the template that we would be building, or edit the file that is created by the template?  Depends on how complicated we make the template.  Ideally, the template wizard will handle everything.\n. After thinking about this a little more.  I'm not sure this is worth the time and effort required.  The current templates, while a little more manual, still allows you to accomplish the same goal.\n. Yes, when navigating with a NavigationPage, you always provide the NavigationPage followed by the page you want added to the navigation stack.  Now, I am not sure I understand what you mean by \"modal page wrapped in a NavigationPage\".\n. Oh wait.. is everything working navigation wise, it's just the animation that's not working as expected?\n. So, I just found the issue:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/PageNavigationService.cs#L85\nThe navigation service tries to be smart about deep linking navigation and checks to see if there are more than 1 navigation segment.  If there is then is turns off animation by default.  It seems I need to rethink this.  Good thing you found this now.  I was about to release a Preview 3 to NuGet :)\nMaybe a deep link should be considered 3 or more navigation segments?\nOr, maybe it's not smart about it at all, and if you are deep linking then you have to set the animated param manually?\n. just released preview 3.  Let me know if our fix works.\n. I am closing this as this is not an issue with Prism, but please feel free to continue the conversation.  I would be interested to know what you find.  Honestly, if I could, I would just deprecate Prism's support for MEF, because it's not a DI container.  So when you try to use it like one, you'll always hit issues and limitations.\nBe sure to let us know what you find just in case another member from the community runs into the same thing.\n. @znakeeye it was your application code causing the issue.  I was able to get your sample to run by moving the location of the assemblies.\nAlso, there are a ton of article about MEF vs a true DI container.  Here is a pretty short explanation:\nhttp://blogs.msmvps.com/peterritchie/2010/02/24/mef-is-not-an-ioc-container-but-mef-uses-ioc/\nBasically my recommendation is you should use MEF to manage your unknown dependencies and an IoC container to manage your known dependencies.\n. Sure.  That would work.\n. Yeah, I am okay with moving docs to GitHub website.  Probably easier to find there.\n. Don't delete the docs from the current repo.  Let's get the website up first and then I will remove the docs when everything is in place.\n. Doesn't look like a bad option.  When I get some time I'll look more into this.\n. Would love a website.  I'll never get around to building one :). I do have the http://prismlibrary.com domain.  I think ideally it would be good if the website was placed in this repo:  https://github.com/PrismLibrary/prismlibrary.github.io\nThe website should be pretty simply.  I haven't put much time into thinking about what content is should have, but it looks like it would be close to the https://angularjs.org/ site.  Simple website that provides the GitHub link, the Documentation link.  A section for Learn where I can place videos (youtube) and links to my pluralsight courses. A way to link to various blogs posts on my blog, or even other peoples blogs.  Point people to the slack channel, report bugs, follow me on twitter, and stuff like that.  I would even really like it to be localized to Japanese.  I can do the text translation, but the mechanism needs to be on the site to change languages.\nThose are my initial thoughts.  Like I said, I really have thought about it in much detail yet, so I am sure I am missing something :). @riandesign dude!  This is beautiful!  I love it.  You rock!. Also, I agree with @bartlannoeye, but we can figure out the content as we go.  The layout is great.. Well, I am actually thinking that the content area for \"Setup the Prism Source Code\" should be more of a \"Getting Started\".\nStep 1 - Install the Template Pack (small screenshot of template pack )\nStep 2 - Create a Project (small screenshot of the project templates)\nStep 3 - Run the code. (small screenshot of running app, preferably a mobile app)\nSomething like that, but show \"Fast and Easy\" type of stuff.  More thought probably need to go into it, but something along the lines of how easy it is to start writing Prism apps.\nI'm not sure about the NuGet section.  Something just seems a little off.  I can't put my finger on it yet.\n. Another thing I would like to highlight is our Slack channel.  Maybe right under the main section.  \"Join our Slack Channel\" or something.  Not sure.. looks great!. Yes, please develop it.  For now you can use the text you have.  When you check it into the website repo, I will update the text.  This way you don't have to wait on me for anything.. @garrypolley on the readme file there is a link to the docs: http://prismlibrary.readthedocs.io/en/latest/\nWe do not have a website yet.. @riandesign no hurry. I understand you are doing this on your limited free time and we appreciate your effort.. Have you made any progress on this yet?. You can also email them to me directly.  Just let me know when you are done.  Thanks.. Good start.\nIdeally, we would modify the project files to copy the assemblies to a \"Binaries\" folder and then pull form there.  Then we would need to zip up the folder at the end of the process too.\n. Not yet. Too many other efforts going on right now.\n. Do you have Xamarin installed?\n. Unzip:\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Xamarin\\Xamarin\\4.0.0.1689\\T\\PT\\Cross-Platform\\Xamarin.Forms.PCL.zip\nThen open up FormsTemplate\\FormsTempate.vstemplate and see what version of the wizard it is asking for.\n. Ahhh. well, that may be it.  Try upgrading and see if you have any issues.\n. I'll be sure to update the Prism Template Pack page to indicate the supported version of Xamarin for the templates.\n. Just for fun, check out the v3 templte and see if it has any template wizard info in there.  I don't think it does.  I think they changed they way their templates worked with v4.\n. I just updated the Prism Template Pack page with the Xamarin 4 requirement.  Thanks for finding this issue.\n. Yup, they completely change their assemblies and namespaces for their template wizard from 3 to 4.\nv3:  Xamarin.Forms.VSTemplate -> Xamarin.Forms.FormsWizard\nv4: Xamarin.VisualStudio.TemplateWizards -> Xamarin.VisualStudio.TemplateWizards.FormsWizard\nThat's the issue.\n. Unfortunately not.  You'll just have to manually add Prism to your project, which isn't that difficult.\n. Well, your terminology is off a little, you don't navigate a modal in a NavigationPage.  You can navigate to a NaviagtionPage modally, and then push pages onto the NavigationPage's navigationstack (PushAsync).\nYes, this is fully supported.\n. If you are navigating from within a NavigationPage and then want to push a new modal page you must use the useModalNavigation parameter in the Navigate method call.\n. You don't PushAsync to another page unless it is inside a NavigationPage.  PushAsync only works inside a NavigationPage.\n. Keep in mind that navigation is relative to where you are calling Navigate from.  So if you have something like this: where your main page is a NavigationPage with 2 pages that were pushed sync.\nMainNavigationPage -> ViewA -> ViewB\nNow if you want to push modal to another navigationpage, from ViewBViewModel you would call\nNavigate(\"SomeNavigationPage\", useModalNavigation:true)\nThen from your SomeNavigationPage root page, you would call Navigate(\"nextView\") and it will push async to SomeNavigationPage\n. With no code, I can't tell you what you are missing.\n. You can't navigate to an empty NavigationPage.  Since your NavigationPage is empty it crashes because this isn't allowed in XF.  You have to navigate using a deep link\nNavigateAsync(\"MyNavigationPage/MyPage\");\nThis navigates to a navigationPage, but sets the initial page before the navigation is completed so that it complies with the rules of the XF framework.\n. What are you doing to \"reset\" the stack?  Why would OnInitialized in the App.cs need to be called?  That is only called for the initialize app startup and all resources are loaded then.\n. In order to \"reset\" the entire navigation stack of the app use an absolute URI.  Essentially to reset the App.MainPage you would do this:\nNavigate(new Uri(\"Root/MyPage\", UriKind.Absolute));\n. Can you provide a sample?  Prism isn't doing anything special when it comes to creating pages, except that it is using a container instead.  Have you tried doing this without using the navigation framework to see if the same thing happens?  Once a resource is loaded, you would think that it would always be loaded.\n. I just threw together a simple example and could not reproduce the error.\n. Here is what I have:\n<prism:PrismApplication.Resources>\n    <ResourceDictionary>\n      <Color x:Key=\"MyPageColor\">Red</Color>\n    </ResourceDictionary>\n  </prism:PrismApplication.Resources>\n```\n    public partial class App : PrismApplication\n    {\n        protected override void OnInitialized()\n        {\n            InitializeComponent();\n        NavigationService.Navigate(\"Root/MainPage?title=Hello%20from%20Xamarin.Forms\");\n    }\n\n    protected override void RegisterTypes()\n    {\n        Container.RegisterTypeForNavigation<MainPage>();\n        Container.RegisterTypeForNavigation<Root>();\n    }\n}\n\n```\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:prism=\"clr-namespace:Prism.Mvvm;assembly=Prism.Forms\"\n             prism:ViewModelLocator.AutowireViewModel=\"True\"\n             x:Class=\"PrismUnityApp1.Views.MainPage\"\n             Title=\"MainPage\" BackgroundColor=\"{StaticResource MyPageColor}\">\n  <StackLayout HorizontalOptions=\"Center\" VerticalOptions=\"Center\">\n    <Label Text=\"{Binding Title}\" />\n    <Button Command=\"{Binding Navigate}\" Text=\"Navigate\" />\n  </StackLayout>\n</ContentPage>\n```\n    public class MainPageViewModel : BindableBase, INavigationAware\n    {\n        INavigationService _navigationService;\n    private string _title;\n    public string Title\n    {\n        get { return _title; }\n        set { SetProperty(ref _title, value); }\n    }\n\n    public DelegateCommand Navigate { get; private set; }\n\n    public MainPageViewModel(INavigationService navigationService)\n    {\n        _navigationService = navigationService;\n        Navigate = new DelegateCommand(Nav);\n    }\n\n    private void Nav()\n    {\n        _navigationService.Navigate(new Uri(\"http://brianlagunas.com/Root/MainPage\"));\n    }\n\n    public void OnNavigatedFrom(NavigationParameters parameters)\n    {\n\n    }\n\n    public void OnNavigatedTo(NavigationParameters parameters)\n    {\n        if (parameters.ContainsKey(\"title\"))\n            Title = (string)parameters[\"title\"] + \" and Prism\";\n    }\n}\n\n```\nWorks as expected.\n. It seems you are using a custom renderer.  I would suggest removing Prism navigation from this and then test your scenario.  I am doubtful this is a Prism issue.\n. No it doesn't work without Prism.  Modify initialize to this:\n```\n        protected override void OnInitialized()\n        {\n            InitializeComponent();\n        MainPage = new MyPage();\n    }\n\n```\nThen your MyPageViewModel.Navigate method like this:\nasync Task Navigate()\n        {\n            // Reset the stack\n            App.Current.MainPage = new NavigationPage(new MyPageTwo());\n        }\nIt still doesn't work.  There is a problem with the logic in the PageViewContainerRenderer.ChangePage method.  If you were to comment out all the logic in this method, it will navigate as expected, with or without Prism.\n. Yes, an absolute navigation will reset the MainPage of the app.  As you can see in your output window, you have an issue in your code that is throwing an exception which will not allow the navigation to continue.  Fix your error and try again.. > Cannot destroy MasterDetailPage. System.ArgumentException: Value was an invalid value for ItemTemplate\nThere is an error in your MasterDetailPage.. Correct, because XF isn't cleaning up your previous view like Prism does.  You should provide a simple sample that can reproduce the issue.. Well, this is definitely an interesting question.  I think this question my be better placed on our StackOverflow tag so that you get a wider range of eyes on your questions.  I would also recommend not limiting this to Prism but rather MVVM, because MVVM really doesn't have a lot to do with Prism in general.\n. The PrismUntyApp.csproj is required.  It's the VS project for creating the template in the TemplatePack solution.  Also, UWP can't use the Prism.Unity NuGet package, it has to use the new Prism.Unity.Forms packages.\n. No, it's not working fine without it because the PrismUntyApp.csproj file is what the PrismTemplatePack.sln needs to add the project to the solution.\nFor now, we will not be removing any projects from the XF app template.  If devs don't need it, they can remove it.  When Xamarin has officially removed it from their templates, then we will follow suite.\n. I added some notes for your review.\n. There is going to be a large change to the Xamarin.Forms project template, so I am going to close this.  This PR is great, but I have so much work to do, that it would be easier for me just to include it myself as I modify the other parts of the template.  This also requires downloading the dependent Nuget apckages locally to be deployed with the VSIX.\n. I am going to use your template, but since I have to change the template altogether, I figured I would avoid merging since I have to make so many changes.\n. Great! Thanks for the help.  I've already download your repo locally.\n. Can you provide the detail that the exception does give?\n. Thanks or the PR.  We do not check-in sample projects into the Source folder.  If you would like to provide a sample to verify a bug fix, you can place it under the Sandbox folder.  After it is verified the sample can be deleted.  Also, your PR broke the build so be sure to validate your code against current tests and you might want to write new tests for your changes :)\n. I'm closing this because it doesn't appear that you are working on this anymore.  If you get can fix the failing tests and write new tests to cover the new functionlaity, I can reopen.\n. Sweet!  Thanks for letting us know :)\n. Want it?  Submit a PR :)\n. Thanks for the PR\n. This seems to happen because of the logic that is invoked when setting CenterOverAssociatedObject=\"True\".  When setting this property, the PopupWindowAction hooks into the Window's SizeChanged event.  When the window is minimized the position of the AssociatedObject is {-31997,-31922}, which is obviously way off screen.  So when the position of the popup is calculated, it is being positioned way off screen in order to be centered around the hidden window.  So, technically the reason it appears to be locked is because it's a modal window that you can't activate because it is way off your monitor.\nI'm not sure how I will fix this.  Just because the position of the parent window is less than 0 doesn't mean it is off screen.  It could mean that it is simply on a different monitor, and depending on the DPI of the monitor, the negative values can be very large.\nIn the meantime you should use the WindowStartupLocation property instead.  Since, this scenario doesn't require the popup to be centered around a single element in a portion of the view.\n. Well, the AssociateObject isn't always a Window, so we might have to look for the AssociatedObject's Window and then check the state.  I'll play around with the logic and see what I can come up with.\n. Well, I am thinking that if the parent windows is minimized, then the popup's WindowStartupLocation should be CenterScreen by default.\nSo maybe something as simple as this would fix it:\nvar parentWindow = wrapperWindow.Owner;\nif (parentWindow != null && parentWindow.WindowState == WindowState.Minimized)\n{\n     wrapperWindow.WindowStartupLocation = System.Windows.WindowStartupLocation.CenterScreen;\n     return;\n}\nWhat do you think?\n. I think given the scope of the PopupWindowAction, my proposed fix will work :)\n. Thanks for the PR.  I like the nameof addition to get rid of those magic strings.  I will have to review every single line of the use 'var' to make sure it makes sense to use.  I don't like to use var for everything, and I try to follow the C# Coding standards when it comes to using var.\n- Use implicit typing for local variables when the type of the variable is obvious from the right side of the assignment, or when the precise type is not important.\n- Do not use var when the type is not apparent from the right side of the assignment.\n- Do not rely on the variable name to specify the type of the variable. It might not be correct.\n- Avoid the use of var in place of dynamic.\nWe have to be careful of the overuse of var because it can make source code less readable for others, which is very important in OSS projects.  May I suggest creating 2 separate PR's for each change.\n. @bartlannoeye  those stood out to me too as candidates for not changing to var.\n. Looks good, just saw one extra line break after an if statement that should be removed.  Fix that, and I'll merge.\n. Not a bad idea, and I can see where that could be useful.  I'm not sure we should change the current IConfirmation interface as that would be a very large breaking change.  But we could possibly create a new interface called something like IConfirmationCancelable (need to think of a good name), that would support this.\nIf we did this then I have some concerns around it being confusing since the default ConfirmationWindow has a \"Cancel\" button, yet sets the Confirmation = false.  If we were to add this new confirmation type, then it's cancel button would either set a new nullable Confirmation property to null, or an additional Cancel property = true.  This confused me just writing it down.  I guess if we created a separate interface and then had the default Confirmation dialog inherit that one as well, and then modify it to set the new Cancel property on the new interface on the \"Cancel\" button, then maybe it wouldn't be so bad.\n@briannoyes and @bartlannoeye , what do you guys think of this addition?\n. I am closing this and including it in the discussion for a compete overhaul of the popup behavior in #864 . Thanks for the clean up.\n. I said that if you are going to reference view properties, or need to perform an action in the View, from a VIewModel then do it via an interface.  This way you are not directly referencing view types in a VM because those shouldn't be in there.  This way you don't break the MVVM guidelines and are still testable.\nFor example; if you needed to close a VIew from a VM more easily, instead of creating a custom behavior, you could just do somthign like this:\n```\ninterface IMyView\n{\n    void Close();\n}\npublic class MyView : UserControl, IMyView \n{....}\npublic class MyViewViewModel : BIndableBase\n{\n     public IMyView View {get;set}\n void CloseView()\n {\n      View.Close();\n }\n\n}\n```\nAs you can see, we are remaining true to the MVVM guidelines, but still giving us a little more flexibility in our VM when it comes to some of the View details.  So, View types should not be defined in ViewModels if possible.\n. It's an interesting idea.  I would be a little concerned about the performance hit you would take when showing the dialog.  When the dialog is shown, the service locator will have to resolve the content, then set the window's content to that instance.  Depending on the complexity of the view, there may be a noticeable lag in showing the dialog.  You will also lose the ability to data bind to the properties on your view, but maybe that is a tradeoff of the feature.\nYou may want to implement this in your own fork and play around with it to see what type of performance issues you run into.\n@briannoyes and @bartlannoeye what are your thoughts?\n. Honestly, I would use a custom dialog service instead of the PopupWindowAction.\n. @dvorn have you had any success implementing this in your app?  Have you seen any side effects?. I think that makes sense.. As mentioned in your PR, we will most likely just ship with assembly with the WPF NuGet package instead.  Option #3, since it does meet licensing requirements.\n. Actually, we will most likely just ship with assembly with the WPF NuGet package instead.  This is how the P&P team used to do it, but we changed it since the SDK ships with VS2015.\n. Fixed by updating NuGet.  See PR #498 \n. Yeah, I just found this one too.  It's because of the \".\" that is in the name.  I haven't figured out a way to detect that in the template, so I'm not sure of a fix yet.\nI am thinking that I could just create a standard Module file name and use that every time, but I personally don't like that idea.  I'm busy with my full time job right now, but I will investigate how to address this as soon as I can.\n. This will be fixed in the next update.\n. @briannoyes and @bartlannoeye what are your thoughts?\n. Fixed with the new merge of Template10. Yes, there is a fundamental concept you are missing about navigation in Xamarin.Forms in general.  You don't wrap a MasterDetail in a NavPage in order to get a back button for a detail page navigation operation.  You set the MainPage as the MasterDetail, and wrap the Detail page in a NavigationPage.\nEssentially you set the MasterDetailPage.Detail = new NavigationPage(new MyView());  Then you can call Navigate from MyView and it will behave as you expect.\nIn order to do that with Prism, assuming your app is launching for the first time, simple call NavigationService.Navigate(\"MyMasterDetail/MyNavigationPage/MyView\").  Then you call Navigate in the MyViewViewModel to any other view and it will be inside the NavigationPage as you expect.\nNow, there is a bug in the latest version of Xamarin.Forms in this scenario in which the back button never turns into the hambuger button again when you navigate to another Detail page.  It has been logged here:\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=38105\nThis should be fixed soon.\n. The Xamarin.Forms templates require Xamarin 4 to be installed.  What version do you have installed?  These templates currently require v4.0.0.1689\n. Ahhh... Yeah, these templates haven't been updated to the latest version.  So it looks like Xamarin broke their templates again!  They did the same thing with the last update.  How annoying!\nI'll update my install of Xamarin and the fix the templates.  Then release the updated to the VS Gallery.\n. I fixed this with #453.  It should be available in the next update.  I am waiting on a reply from the Visual Studio team about a bug before pushing out an update, so it might be a few of days.\n. Not right now.  For now, it will reuse the current NavigationPage, pop all of it's children, and then push the new \"detail page\" onto the navigation stack.  This serves as a memory and performance improvement.  What is the benefit of creating a new NavigationPage on each request?\n. Well, if you want a new NavPage for every request, for now you would need to create a separate NavigationPage for each menu item.  Then navigate to it accordingly\nNavigate(\"NavPage1/DetailPage\");\nNavigate(\"NavPage2/AnotherDetailPage\");\nNavigate(\"NavPage3/AnotherDetailPage\");\nI have been thinking of adding an attached property to control if the MasterPage should reuse the current Detail or to create a new instance.  Something like:\nprism:NavigationOptions.MasterDetailPage.RecycleDetail=\"true\"\nI just can't think of a good name, or how common this need would be.\n. Oh in that case, make sure that your links in your MasterDetail.Master always include the NavigationPage.\nNavigate(\"NavPage1/DetailPage\");\nNavigate(\"NavPage1/AnotherDetailPage\");\nNavigate(\"NavPage1/SomeotherDetailPage\");\nNow, currently there is a bug in Xamarin.Forms that will not update the MasterDetailPage toolbar button back to the hamburger.   It is being tracked here:  https://bugzilla.xamarin.com/show_bug.cgi?id=38105\nSo in order to get your buttons to work properly, you will need to use a new navigatoinPage instance until they fix this bug.  It's a pain, but should be temporary.\n. As you can probably guess, this is not an issue related to Prism, but rather the TapGestureRecognizer.  I myself have run into this behavior.  This was my workaround:\nint _tapCount = 0;\nprivate void Navigate()\n{\n    _tapCount += 1;\n    if (_tapCount > 1)\n    {\n        _tapCount = 0;\n        return;\n    }                \n    _navigationService.Navigate(\"Page2View\");\n}\nYes, I would expect the INavigationAware methods to be invoked when using the hardware and software buttons.  The problem is that Xamarin.Forms does not expose an API for me to use in order to support that scenario.  So until Xamarin adds an API for me to hook into, I can't do anything about it.  The good news is that I am working with Xamarin to get something like this added.  I don't know when they will get it in, but it is something we are discussing.\n. I'm glad you found a workaround.  Now if we can just get Xamarin to add a property to their TapGesturerecognizer to have a MaxNumberOfTaps or similar to prevent more than one tap.\n. @dhaligas this is not an issue with the Navigation service.  This is the result of a multiple button clicks that occur rapidly in succession.  You could try setting the CanExecute of the command to false before Navigation and then set it back to true after navigation, or you can use a timer approach like @craigblazakis did in the code snippet above.\n. In the next release you'll be able to simply do this to prevent a double click:\nprivate bool _canNavigate = true;\n        public bool CanNavigate\n        {\n            get { return _canNavigate; }\n            set { SetProperty(ref _canNavigate, value); }\n        }\nNavigateCommand = new DelegateCommand(Navigate).ObservesCanExecute((vm) => CanNavigate);\nasync void Navigate()\n        {\n            CanNavigate = false;\n            await _navigationService.NavigateAsync(\"ViewB\");\n            CanNavigate = true;\n        }\n. I will be releasing a new preview release soon.  I am leaving for NDC Olso soon, so it might be a couple of weeks.\n. I may release another preview soon, but I can't release as stable until XF 2.3.1 is released.\nXamarin still hasn't exposed any API for me to tap into fo rthe hardware/software buttons.\n. I just released a preview 6 to NuGet that has this fix.\nYeah, me too. Unfortunately, the Xamarin.Forms team has been pretty unresponsive since Evolve.\n. @dude3133 No, the navigation service should not be responsible for this.  This is application logic.  The navigation service is only responsible for navigating. That's it.  Since you have decided to provided three buttons in a UI that all navigate, it is your responsibility to support your application behavior.  You can easily do this using the CanExecute of your navigate commands.  See above snippet.. This is not a scenario I think you should be concerned about.  While technically possible, this is not a scenario that is very common.  If a user does do this, then they are placing that behavior on themselves as that is a very deliberate end-user action.  I have never seen an app that would prevent navigation in one part of the screen based on the immediate action of a button press on another part of a screen's menu.  Also keep in mind that each VM gets a different instance of a INavigationService.  Due to the nature of dealing with an unknown number of object instances across an entire application and the async nature of navigation in XF, it would be very difficult to create a reliable mechanism to do this.  Not to mention the fact that not all apps wish to behave this way.  So you would have to have a mechanism to turn it off as well.  Even XF navigation does not have this built in.  This is just not something that Prism will ever do.. To prevent multiple button clicks: https://github.com/PrismLibrary/Prism/issues/442#issuecomment-222882322. What BaseViewModel?  Prism doesn't have a BaseViewModel.  What platform are you using?\n. You can, but you have to also inject them into your derived class and pass them to your base ctor.\nWhy would you modify the NavigationSevice to handle a double tap?  That should be handled by your UI, and you would call a navigation action on the double tap.\nWhat platform?\n. What platform?\n. Okay, so you are using Xamarin.Forms.  Once again, this is not something you will handle in the navigation service.  The TabGestureRecognizer has a property that lets you define a double tab called NumberOfTapsRequired.  If you want to prevent a double tap, then you need to handle this logic in your ViewModel, not the navigation service.\n. I am closing this since I do not consider this a Prism issue, but rather an Autofac issue.  Prism doesn't do anything special with DI containers except leverage their built-in features to resolve objects.  If there is indeed a memory leak in the Autofac service locator, it needs to be fixed at the source.\n. @systemsymbiosis Infragistics has a great WPF docking manager control.  If you convert the profiler into a Prism app with a docking manager, I'll give you a license :)\n. 1) Yes, anytime you navigate with multiple page ids in the Navigate method, it uses deep linking\n3) You don't put a login screen in a NavigationPage. You log in using a modal login, then pop it after success, then navigate to you intended target.  Otherwise, your users can always get back to the loging screen by hitting back.  You also don't want to put a MasterDetail in a NavigationPage.  Now you have too many navigation elements in your view, and it's a very confusing user experience.\n4) Yes, it smart enough to now if you are navigation from a MasterDetail.  So make sure you are navigating from a MasterDetail, and not the MasterDetailPage.Master, or the MasterDetailPage.Detail.  Navigation is always relative to where you are calling Navigate.\n5) No, you don't need to set a Detail if you use the NavgationService to get there.  The buttons in your Master need to call the Navigate command from your MasterDetailPage.\n6) Yes, definitely.  Otherwise you are not navigating from a MasterDetailPage.  You are navigating from somewhere else.\n7) Not sure what you mean here.\n8) As mentioned above, if you want to change the Detail, then the navigation must come from the MasterDetailPage.  Navigation is relative to where you are calling Navigate.\n9)  No, and you don't want it to be.  That would make for a very confusing navigation paradigm.\n. 2) Just call Navigate(\"target\").  If I am on ViewA and want to navigate to a MasterDetail, from viewAViewModel, simply call Navigate(\"MasterDetailPage/DetailPage\").  If your detail page needs to be in a navigationPage then Navigate(\"MasterDetailPage/NavigationPage/DetailPage\");\n3) Just bind the buttons in your Master to the MasterDetailPage's ViewModel Commands.  There should be no messaging required.  From your MasterDetailPageViewModel you simply navigate to your target. Navigate(\"DetailPage\"), or if it needs to be wrapped in a NavigationPage use Navigate(\"NavigationPage/Detail\");\n. Depends on how your have your pages structured.  However you have it structured, you have to call the command from the MasterDetailPage BindingContext.  If you can rely on BindingContext inheritance great, if you need to make the call more explicitly then do that.\n. * In Xamarin.Forms, the only way to get the navigation bar is to wrap your pages in a NavigationPage\n This is correct.   You are on the ProfilePage, then you hit back and it goes HomePage.  You are now at the root of the navigation Page which is the Detail of the MasterDetailPage.  You would need to hit the hardware back button again in order to get back from the ProfilePage since that appears to be a modal navigation\n You should study up on how navigation works in Xamarin.Forms.  Prism uses the XF navigation APIs directly, and does nothing special or different.\n. What are you doing to navigate modally?  What ViewModel are you trying to navigate from?\n. Yes, the MasterDetailPage needs to have it's own ViewModel.  Though currently, it doesn't take into account the need to navigate modally from the MaserDetailPage directly.  It always assumes you are navigating to a Detail page.\nI will have to think if navigating modally from a MasterDetailPage makes sense or not.  Is this something you should do, or should this action happen from the Detail as it currently does?  Not sure.\nI could modify the logic for the MasterDetailPage logic to check to see if the useModalNavigation parameter is true, and if it is then navigate modally directly from there.  Let me think about this for a little bit.\nAs a work around, you can call navigate off of the Detail page instead.\n. You can extend the navigation service to do whatever you want.  You have access to the source code :)\n. Just so you know, I just committed support for MasterDeatil modal navigation.  Now, if you are navigating from a MasterDetailPageand set the useModalNavigation = true, then the target page will be navigated to modally while not trying to change the Detail of the master detail.\n. It's still in my local commit.  Working on other nav improvements.\n. What are you using as a View that is a FrameworkContentElement?  This class does not define its own rendering behavior, and is mainly used in the System.Windows.Documents.  None of which make a good view type.\n. I'm closing this issue as this is not something I think we will be adding.  Feel free to continue the discussion if you want to try to convince us otherwise.\n. Ahhh. DevExpress... yeah, they made some really bad choices with their WPF controls.\nActually, there used to be an interface call IView with the DataContext property, but as you started creating more and more views, it became a real pain in the ass to use, so we got rid of it.\n. The only thing I can think of is to create your own attached property and change the behaviors of the Bind callback.  See this as an example:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Mvvm/ViewModelLocator.cs\n. If you need to show a dialog without it being associated with a view, then the best approach is to use a dialog service.  I show how to build a dialog service in my Pluralsight course \"Prism Problems & Solutions Showing Multiple Shells\"\nhttps://www.pluralsight.com/courses/prism-showing-multiple-shells\n. I am waiting to see if Microsoft can get the two missing VS2013 VS SDK assemblies on NuGet so that I can update the extension.  If they don't do this, then I have two options; install the VS2013 SDK and re-reference everything, or simply restrict the use of the extension to VS2015 only.\n. I have decided to only support VS2015.  Its just easier for me :)\n. Since WPF can handle both View first and ViewModel first, we left this extension out of the API.  Adding this will cause confusion and will open devs up to trying to pass View types into this method, which they should not be doing in a ViewModel.\n. This is discussed in the documentation:\nhttps://github.com/PrismLibrary/Prism/blob/master/Documentation/WPF/60-Navigation.md#view-based-navigation\nYou never want to have a View type used or referenced in a ViewModel..\n. Because you shouldn't be referencing View types in your ViewModel.  If you rely on View types, then you have violated MVVM.\n. Since SimpleInjector does not have the features required to work with Prism, I am closing this issue.\n. > Anyway, as soon as you navigate to a view in a viewmodel, you're referencing the view in the viewmodel, whether by string or by type.\nNo, you're not.  You are providing a key or unique identifier, which may or may not be related to a view object.  When objects are registered for navigation, their class name is not always used as the navigation key, but rather some other value is provided instead.  Using a key also removes a dependency on assemblies and object types which further supports the modularity, and dynamic assembly loading aspect of Prism.\n. Once again, you are incorrect.  It is easily maintainable when you don't use magic strings, but rather constants, and it is especially easy to test because you aren't dealing with view objects or types (which some unit test libraries don't allow you to even create).\n. If you don't mind creating empty marker interfaces for every view in your app for the sole purpose of using a strongly typed name; then sure, go for it.  If that's the case you are better off creating extension methods for both registering your views for navigation with your container, and for RequestNavigate to use a generic instead.  Then you don't even need to pass in a name at all.\n. > Why does Prism provide one of them and not both (or none of them)?\nBecause we aren't going to encourage referencing view types in ViewModels.  Now, we have something similar for Xamarin.Forms, but we restrict the generic from being a view type.  Basically, you can't use a View type as the strongly type key to prevent you from trying to reference view types in your VM.\n\nIf the navigated-to assembly is in the same assembly as the navigating viewmodel, it doesn't apply.\n\nThis isn't an accurate statement.  There is no situation in which you should be referencing your View types from within your ViewModel.\n. Just because a view and ViewModel exist in the same assembly doesn't mean the view is known to the ViewModel.  If you want to create a coupling between your View and ViewModel, then go for it.  The pattern police will not come to arrest you.\nThe great thing is that Prism doesn't care how you do it.  It is flexible and extensible enough to allow you to do anything you want.  So pick your poison and build great apps.\n. No, this is  major breaking change as it would break every single app that uses the NavigationParameters.  Checking for existence of a key is just as easy now compared to using a dictionary.\nif (parameters[\"key\"] != null)\n...\n. Yeah, I have noticed this.  As you eluded to, this isn't so much an issue with Prism, but rather Xamarin.Forms.  I can't prevent the number of clicks that occur on buttons or the tap gesture, but you do have a good idea though.  I think I could add a simple internal boolean property (IsNavigating) to the navigation service.  Then check the value of that before performing a navigation.  If false, navigate, if true then don't navigate.  This should protect prism apps from the dreaded double tap/click for navigation actions.\nI'll look into this.  Thanks fo rthe idea.\n. Great!  Glad you figure it out.  I was playing around with adding an IsNavigating check in the navigation service itself, but due to the async nature of navigation, it won't work how I was hoping.  So it sounds like your solution is the right one.\n. Are you using the latest 6.1.0 Preview 3?\n. Are you calling NavigationService.GoBack(), or are you simply hitting the built-in software button?\n. Weird.  Can you provide a simple repo that I can run to debug?\n. Yup, duplicated it with your repro.  I'll dig into this and see why iOS is being a pain in the ass.\n. Found the issue!  It seems iOS and Android handle the modal navigation stack differently.  Uhhhhggggg!!!  I'll work on fixing this one.\n. So it appears this is something I can't fix.  I am going to ask Xamarin why iOS behaves this way and if it is either a bug on their side, or if there is a work around that I can use.  I'll keep you posted.\n. This is a confirmed Xamarin.Forms bug.  You can follow the status here:\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=39104\nI will update this issue when this has been resolved by Xamarin.  This seems to be limited to the initial MainPage so all other GoBack calls will work as expected.\n. This has been fixed by Xamarin.  Should be available in Xamarin.Forms 2.2.0-pre1\n. Sweet!  Be sure to find me and say hello.\n. I actually just discovered this today.  It seems I wasn't properly returning the result, instead I was actually awaiting the result in the service.  I am going to look into this.\n. So looking into this, it seems that the Navigate methods don't need to return tasks at all, because all it does is await the Xamarin.Forms DoPush and DoPushModal methods.  Nothing is actually being returned from these methods.  I'll look into if I can make these an actual awaitable method or not.\n. Oh, I remember why they have the Task return type, it's because the method await an async call.  Async/await guidelines state that a method that awaits an async operation should not have a void return type and instead should use Task.  So I'm not sure this is an issue or not.\nhttps://msdn.microsoft.com/en-us/library/hh524395.aspx\nI'm still looking into it though.\n. I actually ran your test scenario and everything worked for me.  The next view was navigated to, the previous view navigated away from, and then the debug was written.  How are you verifying that the Debug.WriteLine is happening immediately and not waiting for navigation to complete?\n. Correct.  The await is not awaiting for you to come back from Page2, it is awaiting the actual navigation to Page 2.\n. You can build a view-switching, modular Prism application using MEF, or any DI container such as Unity.  The sample was one of the original samples written my the Microsoft Patterns and Practices team back in the early days.  It is just a sample on how to do it with MEF.\n1. If you want to use MEF, then go for it.  There is nothing wrong with using MEF.\n2. You have to remove the Unity references, add the MEF references, and update the bootstrapper, and attribute your views/ViewModels accordingly.\n3. Of course it's possible.  You will need to read the docs and study the samples that we have available.\nNow for my opinion.  I would not personally recommend using MEF as your \"container\".  MEF is not an IoC container.  My rule of thumb is to use a DI container for known dependencies, and MEF for unknown dependencies.  So unless you plan to open up your application to unknown third party's to extend your application, there is no real benefit to using MEF.\n. Can you provide the error, and possibly a sample?\n. Honestly, you are probably better off debugging this yourself, and reporting what you find.  Maybe even a PR with the fix.  I'm not going to be looking at this anytime soon.\n. Haven't even looked at it yet.\n. Well, I am finding that the SO zealots don't like questions that are asking for \"opinions\" and wind up closing them.  I am getting a little tired of SO not wanting to actually help devs with questions.\n. Keep using SO until someone says your question isn't good enough for SO.  Then just come back here.  Also, be sure to watch our Pluralsight courses to help you get started with Prism more quickly.\nhttp://pluralsight.com/author/brian-lagunas\nStart with the Intro to Prism course.  It's a little outdated, but all the concepts are the same.\n. Make sure you have set the title on your views.  In the sandbox they do not have titles.\n. If that isn't it, you will have to provide a sample that demonstrates the issue.\n. I'm assuming you figured this out, so I am closing this issue.\n. For UWP, you have to use Prism.Unity.Forms NuGet.  This has not bee made public as it is still preview.\n. The up-coming rewrite of Prism for UWP will have support for multipl instances. We are merging with Template 10 which already has this solved.. I am not familiar with MahApps, but why don't you just override CreateWindow and return your new MahApps window instance?  PrepareContentForWindow doesn't return anything, so I'm not sure what you mean by that.\n. Use Blend's design time data features.\n. You may need to set the AutoFlush = true since the StreamWriter is never being closed.\nprotected override ILoggerFacade CreateLogger()\n        {\n            StreamWriter writer = File.CreateText(\"Log.txt\");\n            writer.AutoFlush = true;\n            return new TextLogger(writer);\n        }\n. If the resource dictionary is in a separate assembly and shared amongst your modules, then just add a references to your shell Project and merge it into the Application.Resources.\n. StrongNamer looks great, but we are not able to remove strong naming from Prism for WPF.  Prism has been signed ever since its creation in the Microsoft P&P team.  There are too many critical apps that rely on the strong naming that would break if the string naming would be removed.  Trust me, we've tried before.  StrongNamer is a cool solution but does not fix the problem of breaking a majority of WPF apps without a reliable way to provide guidance for those broken apps to use StrongNamer assuming that some companies will even allow it in the first place.\n. Basically, if you don't need strong naming, then fork the repo and build it unsigned.  The beauty of OSS.\n. Also, we do not have the time or resources to support managing separate builds and duplicate NuGet packages for the purpose of having unsigned assemblies.  We already have 14 packages, I don't want to make that 28.\n. Hmmm... If we could automate that, then that may be an option.  We already have a Release (which is unsigned) and a Release-Signed build configuration, so it should be easy to switch in a script.  So far, StructureMap is the only container that is unsigned.\n. @joelweiss For now we do a manual build and then run this PS script\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/nuspecs/CreatePrismNuGetPackages.ps1\nI have a task to automate the build process altogether, but just haven't found time to do it.\n@bartlannoeye that makes sense.  I was just thinking that maybe it wouldn't make sense to have signed Prism and Prism.Wpf and an unsigned Prism.SturctureMap.Wpf, but that should work.\n. Okay, we will just modify the Release-Sign configuration to build StructureMap unsigned, and then modify the NuSpecs to get the binaries from the correct location.\n. I'll push out new packages when I have Prism for Xamarin.Forms ready for the next pre-release\n. I think you forgot the PrismLibrary_Wpf.sln :)\n. I can't duplicate it on my end.  Make sure you aren't navigating to any views in the constructor of your MainNavigationPage.\n. I think you forgot to provide a link to the project.\n. Actually, I managed to reproduce this on my own using a very simple sample.  The sample I was originally working with had a ton of other stuff going on in it, so I stripped it down and started from scratch.  This is actually a bug in Xamarin.Forms.  This can easily be reproduced in a standard Xamarin.Foms application using this snippet:\n```\n            var navPage = new MainPageNavigationPage();\n            var mainPage = new MainPage();\n            var viewA = new ViewA();\n        await mainPage.Navigation.PushAsync(viewA);\n        await navPage.Navigation.PushAsync(mainPage);\n\n        MainPage = navPage;\n\n```\nThis essentially reproduces the steps the Prism navigation service takes when performing a deep link navigation.  As you can see, this is where the problem lies.  I will report this to Xamarin and hopefully they will get a fix out as soon as possible.\nThis is the second Xamarin.Forms navigation bug found by Prism users in about a week :)\n. I have reported this bug to Xamarin.  You can follow the status here:\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=39187\n. Xamarin has started working on this bug and it is \"In Progress\".  I will update this issue when it has been fixed.\n. It is partially fixed.  It is fixed in the specific test case I provided, but doesn't in other simple scenarios like:\n```\n        public App()\n        {\n            var mainPage = new MainPage();\n            var viewA = new ViewA();\n        mainPage.Navigation.PushModalAsync(viewA);\n\n        MainPage = mainPage;\n    }\n\n```\n. Closing in due to @ali-hk response to this PR.\n. Managing focus is not a Prism issue.  I recommend asking this question on StackOverflow.\n. Your answer is in your question.  You have already outlined all the steps required, now just implement it using the various features of Prism.  Obviously you can't automatically inject views in the Initialize of the modules since you need to wait until after you authenticate and authorize your user. There's a clue for you; you to have to find another mechanism to notify your modules when they should load their views (evenAggregator maybe).  Think through your problem and address it one issue at a time.\n. Also, you may have better luck on these types of questions by posting them on our Stack Overflow tag: http://stackoverflow.com/questions/tagged/prism\n. I'll have to think about this.  I also have never published an event without a payload (that I can remember).  I'm not sure I'll put any effort into this anytime soon.\n. The amount of code churn that must be done in order to implement this may not be worth the time and effort.\n. Even better :)\n. Watch this:\nhttps://app.pluralsight.com/library/courses/prism-loading-modules-user-roles/table-of-contents\n. This question is discussed in Modules 2 clip 5 \"Demo - Storing Roles\"\n. This is being discussed on SO\n. Very strange.  As you can see, all Prism does is call Xamarin.Forms Pop:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/PageNavigationService.cs#L41\nIt's not doing anything with threading.  Can you debug through source and see where the exception is thrown?\n. I do have a relationship with Xamarin, but they have been a little non-responsive sine the buy out with MS and with the up coming Evolve event.  I have two outstanding bugs still waiting to be fixed.  What I like to do is recreate the bug using standard Xamarin Forms code and then send them that with the bug so they can't say it is Prism.  So far it has never been Prism :)\nBy the way, the ViewModel is created on the same thread as the View.  I would submit the bug and then post the bug link here so that we can track it's progress.\n. Thanks for the update.\n. Sweet!  Thanks for the PR.  We'll review it as soon as we can.\n. This is a great PR!  Especially thankful for the test coverage :)\n. I was hoping for a small repo, not the entire app :). Would be easier to debug without all the other noise.\n. I see the problem.  You are using a Shared Project.  This will not work.  A SharedProject does not produce an assembly but rather acts as if the class is defined in the referenced assembly and is compiled within it.  You have to use a PCL.\n. You can't.  Xamarin has not exposed an API that allows you to hook into the software or Hardware buttons yet.  This is a known limitation and Xamarin will eventually be exposing an API.\nEssentially, what you want Is for the INavigationAware methods to be invoked when using the soft/hardware button.  We have to wait on Xamarin before we can implement this.\n. When navigating from a MasterDetailPage, the Detail will be set to the target page.  There is no Modal navigation happening here.  Basically the \"isModal\" is not being respected.  In the current code base this has been fixed so that the MasterDetailPage will respect the \"isModal\" parameter and properly navigate modally when set to true.  I am hoping to release Preview 4 with this fix in it soon.\nIn the mean time, a work around would be to navigate like this:\nprotected override void OnInitialized()\n{\n    InitializeComponent();\n    NavigationService.Navigate(\"MyMasterDetailPage/MainPage\");\n}\nThen in the MainPageViewModel OnNavigatedTo, navigate modally to your LoginPage.\n. That's not how MasterDetailPage works.  A MasterDetailPage is a single page that has another page as it's Detail.  It actually sets the MasterDetailPage.Detal property.  There is no going back from here.  If you swipe from the left edge your Master menu will slide out.  You could also wrap your detail in a navigation page to get the hamburger menu at the top.\n. I'm not seeing how it won't.  The flow is the exact same.\nApp starts -> load MasterDetail/MainPage.  MainPage checks to see if you are logged in, and if you are then nothing happens.  Your MainPage is the Detail of the MasterDetail just as you expect.  If you are not logged in, then it will immediately navigate modally to your LoginPage.  There you can login and call GoBack when successful.\nAnother option is to change your process to check if the user is logged in first on App startup.  If they aren't navigate to the login screen.  Upon logging in, use an absolute URI to replace the navigation stack with your MasterDetailPage.\n. Your ViewModel should implement IActiveAware.  That will tell you which View/VM is active.\n. Nope. Just implement the interface and you will be good.\n. @MikaelFerland why didn't I think of that?  Thanks for the plug :)\n. Freaking awesome!  Thank you so much!\n. Actually, this is a scenario I didn't consider.  Essentially what happens is the NavigationPage is reused, but it's navigation stack is cleared (PopToRootAsync) and the new target page is place on the navigation stack, then the first Page on the Stack is removed (RemovePage).\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/PageNavigationService.cs#L191\nI think I can just pass in the currentNavRoot into the DoNavigateAction here instead of the NavigationPage.  This makes sense when dealing with a MasterDetailPage scenario, but does it make sense when using the NavigationPage by itself?\nEssentially, if I am on a NavigationPageViewModel and call Navigate, would I expect the same behavior that I get when reusing the NavigationPage in the MasterDetailPage scenario?\nGood find.  I'll have to think about this one.\n. If this is indeed a bug, you would need to report this to Microsoft as Prism doesn't control how the attribute behaves.  All Prism does is call into the System.ComponentModel.DataAnnotations.Validator.TryValidateProperty and relies on the System.ComponentModel.DataAnnotations.ValidationResult.ErrorMessage property to get the message.\n. Yes, as @joelweiss pointed out.\n. That's a tricky question.  I'm not an attorney so I cannot say for sure.  You should talk to a legal professional before submitting code taken from a project under a different licensing model.\n. I am going to close this until you have had a chance to clear the use of the two classes that were copied from another project.\n. It's Telerik. Remove that and use a normal UserControl and it will work.\n. Of course.  Just make sure your layout supports it.\n. Which platform?  The exception is coming from the Xamarin.Forms.NavigationPage.  Prism is simply calling Xamarin's INavigation methods. Which most likely means this is a bug in Xamarin.Forms.  Can you provide a sample that reproduces the problem?\n. Also, if you were to remove your animation, does the issue still occur?\n. Have you tried to remove Prism and use XF navigation calls to reproduce it?  All Prism does is call the XF navigation calls, so there isn't anything special going on under the covers.  I don't have an iPad so I will not be able to test your solution.\n. Try awaiting your navigation calls.\n. Essentially, based on your description, you are navigating to another view before the other view has been place on the stack.  Hence the \nSystem.ArgumentException: Page to remove must be contained on this Navigation Page\n at Xamarin.Forms.NavigationPage.RemovePage (Xamarin.Forms.Page page) [0x0004b] in :0\nWhen you turn off animations, the view is placed on the stack immediately so you do not encounter this issue.  Why are you trying to navigate between the views so quickly?  So quickly in fact that you can't mouse click quick enough to reproduce on the emulator.\n. This is one of those issues that will be very difficult to debug since you can't reproduce on an emulator.  Ideally, you would debug the source code and find the exact location of the exception.  It would be somewhere in this method\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/PageNavigationService.cs#L157\nIf you need to prevent navigating so quickly between pages, then add a Property to your VM called IsNavigating and set that to true before any navigation action and back to false after the navigation has complete (await the navigation call), and then check that property value before allowing another navigation to occur.\n. Are you saying that the API isn't there, or that it doesn't work as expected?\n. Doesn't look like you are using Pre-3.  If you were, you would see\n[assembly: AssemblyInformationalVersion(\"6.1.0-pre3\")]\nIn the Prism.Forms assembly information.\n. Thanks to @jingliancui for getting a response from the EF team\nhttps://github.com/aspnet/EntityFramework/issues/5517\n. The session state service is being removed from Prism for UWP in the up-coming rewrite.. No, that is not a problem Prism tries to solve.\n. 1. There won't be a back button on the NavigationPage if there is only one Page on the navigation stack.\n2. Set the useModalNavigation optional parameter to false.  In the next preview release this will not be necessary as the navigation service is more intelligent and will automatically handle this.\n. I am unable to reproduce the issue.  Please provide a sample that reproduces the issue.  Make sure you are navigating from NewsPageViewModel to \"NewsPostPage\".  Do not navigate from the MyNavigationPageViewModel.\nJust so you know, you do not have to define a URI object.  You can simply Navigate(\"NewsPostPage\");\nAlso, what platform?\n. Thanks for the sample, it explains everything.\nThis is because you have improperly overridden the ConfigureViewModelLocator method.  Navigation is page specific and you cannot simply use the PrismApplicationBase NavigationService.  You must create a navigation service for each page that has been resolved and pass that into your ViewModel ctor.  Otherwise you are always navigating from the App.MainPage.  Also, since you have decided not to use a container such as Prism.Unity.Forms, you have to register your types with the PageNavigationRegistry, or any deep linking will not work.\n. NavigationService.Navigate<MainPage>(); is not supported.  You should never do this.  The generic Navigate method is meant to be used with other object types, most likely a ViewModel.  This also only works when registering your Page using the RegisterTypeForNavigation<PageType, VIewModelType>();\n. Session state service is being removed from the rewrite of Prism for UWP.. I do not have any experience using Mock.  I would suggest posting this to either the Mock support forums or NUnit as it seems one of those is having a problem.  Have you tried creating your own mock INavigationService class and using that instead?\n. Names can be changed :)\n. Yeah, I will get some feedback when I give my talk at Evolve.  If I am going to do it, I would need to do it with 6.2.\n. Did you ever figure this out?\n. Glad you got it figured out\n. Done\n. Yes, just create a project for your DI container of choice and implement the classes using this as a guide: https://github.com/PrismLibrary/Prism/tree/master/Source/Xamarin/Prism.Unity.Forms\n. Initialize has to be public so that the DI container specific projects can override the implementation.  If this is made private, then the derived PrismApplications would be broken.\n. The protected ctor seems reasonable.\n. Oh, I see what you mean. Thanks for clarifying.  Actually, that's not a bad idea.  The derived classes do call OnInitialized in their Initialize override, so we could remove that knowledge from the implementer and reduce the knowledge complexity.  Submit your PR, so you can get credit :)\nAlso, what do you think about renaming the DI container derived classes to be container specific.  Right now they are all PrismApplication, but I am thinking of changing them to PrismUnityApplication and PrismNinjectApplication, etc.  Let me know what you think when you're back from walking your dog :)\n. Yes, tests should accompany any new functionality like this.  We use xUnit.  Just add the Prism.DryIoc.Forms.Tests project to the current Tests folder.\n. Whoops didn't mean to close.\n. Honestly, since I haven't yet started adding tests for that, I haven't even looked into it.  I don't like the idea of adding compiler directives and new build configuration just to support testing.  I'll reach out to Xamarin and see if they have any guidance for testing custom application classes.\n. So Xamarin basically agreed testing anything to do with Application is a pain in the ass.  Get it working, and I will check out the solution and determine if this is something we should adopt in order to test the other DI projects.\n. Done\n. there are a lot of unrelated changes in this PR.  Also the Prism.Ninject.Forms and Prism.Unity.Forms application classes need to be updated to accommodate your suggestion.\n. The best way to learn is to debug the source.  Let us know your findings.\n. The bootstrapping process is correct.  If CreateShell was last then you would not be able to inject views from within your modules, which would be a massive break and limitation.  The issue is where you are defining and registering your dependencies.  You need to move your dependency registrations around so that the classes that require them can properly reslove the dependencies when needed.\n. I know because you can't inject views into a region that doesn't exist.  If calling IRegion.Add(view) inside the IModule.Initialize before the Shell has been created, it will throw an exception.  You need to move your services out into a separate assembly so that all your modules and shell can use the same service without taking a dependency on each other.\n. Thanks for the updates!  I really like the links at the beginning.  I will start doing that for all docs going forward.  Great idea!\n. This will most likely be soon after Xamarin Evolve.  So beginning of May.\n. That's not technically navigation, but rather tab changing.  You would have to handle the neccessary tab selection events and pass your parameters there.  You might be able to use a behavior instead to avoid the code behind.\n. Can you reproduce this consistently?\n. I have not been able to reproduce this.  I am closing this for now until it is reported again.\n. I'm not sure why BindableBase would be causing any issues at all.  It literally only has INPC in it.  Although this is not an issue with Prism, if you provide a sample I will take a look when I have time.\n. It has not been removed.\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Modularity/ModuleCatalog.cs#L120\n. Thanks for sharing. Hopefully others will find this helpful.\n. There isn't enough information here to help find the issue.  If it works in a brnad new project, but not your current one, this leads me to believe that you are not following the proper VIewModelLocator conventions.  Make sure your namesspaces are Namespace.Views.ViewName and Namespace.ViewModels.ViewNameViewModel.\n. Yeah, I just forgot.  I have so much going on right now :)\nJust added nav improvements and these\n- Modularity\n- Launch Modal from MasterDetail\n. Updated the link in the package\n. There is a new package for Unity called Prism.Unity.Forms that will be used going forward.  Since XF added support for UWP, and we already had a different version of prism for UWP, we had to create a different package for XF Unity.  Right now it is preview, but after Evolve I will be publishing an official release.\n. Also, if you don't need modularity, then you don't need to override InitializeModules.  Only override this method if you are going to use modules.\n. @dansiegel you should not be deriving from ApplicationBase unless you are creating your own Container project.  Your project should only use one o fthe PrismApplication classes from the unity or Ninject container projects.\n. Yeah, I'm traveling right now and was in a hurry to get the next preview out.  I'll be sure to fix all the docs and make sure the message is clearer after Xamarin Evolve at the end of this month.\n. I haven't tested VS15 Preview, but the System.Windows.Interactivity is ships with the Blend SDK.  It could be that the Preview doesn't include this assembly yet.  For now, there is an unofficial NuGet package for it that you can use.  We will be updating the Prism.Wpf NuGet package to include the assembly soon.\n. cool. The nugets should be updated after the Xamarin Evolve event.\n. Just submit a PR :)\n. I see this is where you added the Test configuration that PR #412 depends on.  This actually looks really good.  I don't think having the Test config is a big deal, and it adds a ton of test coverage.  It seems my abstraction of the IApplicationProvider caused some conflicts.  Do you want to fix them, or do you want me to just copy and paste what you have here into my solution?\n. Yes, please update and change the configuration to be based off of Release.  I'll update AppVeyor to build off the Test configuration.\n. Can you get this one sync'd up with master?\n. We have moved to using a named instance for extensibility reasons.  Yu can see the Unity registration here:  https://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Unity.Forms/PrismApplication.cs#L82\nAnd the usage here:  https://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Unity.Forms/PrismApplication.cs#L51\nThis allows the developer to provide their own implementation more easily by overriding the INavigationService registration wit their own implementation.\nCan we do it like this?\n. Let's use the named instance and go with consistency with the other containers.  This makes documentation a lot easier too.  Whenever I get to that point :)\n. Revert that.  The extensibility of Prism comes from using a container.\n. I made some changes to the PrismApplicationBase which will make it easier to create container projects in the future and make them easier to maintain.  Could you rebase from master and update the PrismApplication?  We're almost there :)\n. It's missing the new IPlatformInitializer implementation. See the Unity project for how to implement.\n. @ederbond waiting on Xamarin to release the stable version of XF\n. Great PR! Thanks for the hard work!\n. how about adding the ability to override the name with a custom string?\n. Thanks for the PR!\n. Can you run the code provided in the bug they fixed and see if the navigation stack counts match?\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=39104\nIf they don't match then Xamarin introduced a regression :(\nAlso, you'll want to start using the Prism.Unity.Forms package now.  Because of UWP, we had to move to using a specific Unity package for XF.\n. Prism.Unity\n. This has been verified and reported to Xamarin as a regression.  I'll update you when this has been fixed.\n. This has been fixed\n. There are a ton of unrelated changes in this PR.  Could you please update this PR to only include the feature you wish to add.\n. @bartlannoeye what's going on with this PR?  It is breaking the build, and I don't see a resolution agreed upon in the thread.  Should we close it?\n. @ali-hk could you rebase with master so I can merge this in?\n. I haven't had time to look over this in detail, but I did notice you are using the term UAP, which is not the term we should be using.  We should be using the term UWP, as this is the standard term endorsed and promoted by Microsoft.\n. Thank you very much for the PR.  We will be reviewing our guidance for UWP very soon and expect a number of changes to Prism for UWP.  Giving the up coming effort, I want to hold off on adding any templates until we have made sure we have a stable code base to work with.  This will reduce any reworking of the templates that would have to be done.  If it turns out that no major changes are made, we will reopen this PR and merge after a final review.  I hope you understand, and please do not let this discourage you from continuing to submit PRs and being involved with the project.\n. One more thing, I did do a quick review of the templates, and the UWP project template has a little too much going on.  Looks like you changed the default convention for the ViewModelLocator, have empty folders, created some resource dictionaries, added enums, etc.  These templates should really be super simple blank apps.\n. First off, what version of Prism are you using?  Also, are you using FormsAppCompatActivity for Android?\n. Also, which ViewModel are you navigating from when you call \"MyNavigationPage/SettingPage\"?\n. I see what you mean now about the arrow changing to an arrow and back to the hambuger menu quickly.  This didn't used to happen.  Something must have changed in Xaamrin.Forms.  I'll have to look into it.\nThe reason we check to see the next segment is because we want to see if the target page is the same as the current detail page.  If it is, there is no need in creating a new instance, instead we can improve performance and reuse the current detail page.  But, if that detail page is a NavigationPage, we have to first navigate to the next page and then remove the root, which is the actually cause of the arrow behavior.\nI am on the road now and don't have access to an iOS device for testing, but it shouldn't be doing anything modally so you should still be able to show the hamburger menu and navigate normally on iOS.  If not, then Xamarin broke something with their latest update.\n. Okay, so I have met with Xamarin on this issue, and they have a couple of ideas to fix this.  I will let you know what we come up with.  In the mean time, I can fix the part where the arrow shows up, but the hamburger menu still navigates the rotation.  Is this an acceptable compromise until the complete fix is in?\n. Here is the Xamarin bug to follow its status: https://bugzilla.xamarin.com/show_bug.cgi?id=41038\n. Sweet!\n. Thanks for the information.  I will consider this resolved.\n. Yeah, it's a preview so it wasn't built in release mode.  After Xamarin Evolve at the end of the month an RTM build will be pushed, and will be in release mode.\n. I am going to be pushing another preview until XF 2.3 comes out of preview.  I will make sure to build it in Release mode this time.\n. Just release the preview 5 update.  Everything was built in release mode :)\nhttps://www.nuget.org/packages/Prism.Unity.Forms/6.2.0-pre5\n. I see you are not providing a detail page for your MasterDetail in your navigation link.  Is your Detail hardcoded in the initial MasterDetail?\n. Yes, this is related to #537 and is a regression bug on Xamarin's part.  I have reported this to them, and I hope to have a fix soon.\n. Okay, I have spoken to Xamarin, and they changed the way the modal stack works.  They no longer include the Application.MainPage in the navigation stack.  I will have to handle this case manually in Prism now.\n. It won't change anything.  I just have to manually handle the case of navigating back to the root (MainPage) of the app.  It's a pain in the ass for sure.\n. No, there is no API to remove parameters from NavigationParameters.  NavigationParameters is a temporary object meant pass state from one VM to another.\n. Please post these types of questions on StackOverflow using our \"Prism\" tag.\nAlso, there is not enough information in your question and doesn't really relate to Prism.  Be sure to include your platform, and include the code for your view and ViewModel when you post your question.\nhttp://stackoverflow.com/questions/tagged/prism\n. Thanks @bkaankose \n. Thanks!  I'll check this out next month.  I am slammed with work and then I have Evolve next week.\n. Just the binaries.  A lot of customers don't use NuGet and still rely on plain old assembly references.  So I was thinking of creating a folder structure similar to this under a parent Build folder where all our build scripts a stuff will go:\n- Binaries\n  - Core\n  - WPF\n  - Windows\n  - Forms\nWe could add a post build process to the projects to copy the assemblies into those location.  Then our build process could zip the Binaries folder up as part of the build.\nThat's what was going through my head anyways.  Haven't really thought it out completely.\n. I'm checking this out, but I don't see the new Test configuration.  I am assuming I just need to run the build.ps1 script correct?\n. I am in the process of research Appveyors ability to automatically do everything for me :)\n. Thanks for the idea, but we aren't going to be doing this anytime soon.  This is related to #45 \n. Thanks a lot for taking the time to help with this issue.  All my time is being taken up with Prism for Xamarin.Forms :)\n. Thanks a lot!  Saved me a lot of time :)\n. Right now I do not have the NuGet packages automated.  This is something on our list of things to do.  Actually @joacar has already started automating our build in PR #548.  We'll get there eventually :)\n. And yes, you would need to build from source for this change, and all the others I've been making today.\n. What platform and what version or Prism?  I am unable to duplicate this.  DelegateCommand is just an ICommand.  So there is no difference between declaring your command like this:\npublic ICommand SearchCommand ...\nSearchCommand = new DelegateCommand ...\nvs.\npublic DelegateCommand SearchCommand ...\nSearchCommand = new DelegateCommand ...\n. I'm going to assume you got this working.  If not be sure to let me know.\n. This is really weird!  I see it happen in your app, and that it originates from the Xamarin.Forms.Core assembly.  I was testing off of the latest preview, so maybe they fixed a bug since this.  I am going to be publishing a new update soon, and hopefully this will fix it for you.\n. Remember, navigation is always relative to the page's VM you are calling navigate from.  This means you are calling navigate from some page inside a TabbedPage, not the actual TabbPageViewModel.   You should try setting the useModalNavigation parameter to false.\n_navigationService.Navigate(nameof(TabbedPage2), useModeNavigation: false);\nThis will force a PushAsync\n. Just so I am clear you... at app OnInitialized you are doing:\nNavigationService.Navigate(\"MyNavPage/MyTabbePaged1\");\nThen on TabbedPage1ViewModel you are calling:\n_navigationService.Navigate(\"TabbedPage2\", useModeNavigation: false);\nAnd it's not working?\n. Also, how are you connecting the command from a Page in the TabbedPage.Children collection to the VM for the TabbedPage?  Also make sure you are setting the Title of your Pages.\n. Actually, I found the issue:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/PageNavigationService.cs#L217\nWe are forcing all navigation from a TabbedPage to be modal.  I didn't see a scenario in which you would want to navigate directly from a TabbedPage within a NavigationPage.  I assumed all navigation would occur from a Page within the Children collection.  Let me think about this.\n. The navigation service does not create tabs and/or add them to the TabbedPage.Children collection.  Adding tabs is not navigation.  If all you want is to navigate to the next page and have it be part of the NavigationPage navigation stack, then pass the useModalNavigation = false parameter in the NavigateAsync call.\n. Simple, just add a NavigationPage with a child ContentPage in your TabbedPage XAML or code-behind.  Then whenever you navigate from the ContentPage, it will automatically navigate within the NavigationPage\n. Yes, because you are using a navigation page to wrap your MasterDetailPage.Detail  TabbedPage, and you also have a NavigationPage nested inside a tabbed page.  So this is to be expected.  You just need to hide one of your navigation bars.\n. You don't set the property on the NavigationPage.  You set it on the child page.  Since you have two navigation pages, you need to set the property on either the TabbedPage, which I would recommend, or on your EntradaPage.  I suggest reading up on the Xamarin.Forms docs to get a better understanding on how navigation works within XF.\n. This is a known issue.  The problem is that Xamarin Forms does not expose an API that I can use to hook into the hardware buttons, or the NavigationPage button events.  Xamarin is aware of this need, and will be adding a method to the Application class that will enable Prism to invoke the INavigationAware methods as expected.\n. My first thought is you would add the INavigationAware to the Page, or just use the OnAppearing/OnDisappearing events, and kick off your animation there.  Animations are always considered a view responsibility in my opinion.\n. Yes, it has.. Can you submit a new issue, and provide a sample that reproduces the issue.  There is a chance we aren't considering a specific scenario.. @weitzhandler Prism doesn't have control over the page lifecycle or when the XF events are fired. You should ask Xamarin that question.. Only one way to find out :). Yes, there is a standard convention that is documented here:\nhttps://github.com/PrismLibrary/Prism/blob/master/Documentation/WPF/40-ImplementingtheMVVMPattern.md#creating-the-view-model-using-a-view-model-locator\nYou can change these conventions if you need to.  Check out this blog post describing how to change them:\nhttp://brianlagunas.com/getting-started-prisms-new-viewmodellocator/\n. Changing tabs in a TabbedPage is not a navigation function.  I would suggest creating a behavior that hooks into the selected tabbed changed event of the TabbedPage and invoke the methods from there.\n. This is the same issue as #541.  This only happens on iOS right?\n. Here is the Xamarin bug to follow its status:  https://bugzilla.xamarin.com/show_bug.cgi?id=41038\n. @dshchodro that is exactly the issue.  If you look at the bug linked above, you can see what it takes to reproduce this bug in Xamarin Forms.\n. Sadly, you're not wrong.  This is a confirmed bug in Xamarin.Forms:\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=42548\nWaiting for them to fix this one again.\n. Well, now this only happens when using AppCompat mode.  If you don't use AppCompat it will work as expected.\n. As you probably guessed, Prism doesn't do anything special to the base Application class.  You still have access to OnResume, you just have to override it like you normally would.  For the most part, if you can get something working in a normal XF Application, it will work in a Prism application.\n. I don't want to add an optional parameter to the NavigateAsyc method for a couple of reasons.  The biggest is that we are adding a parameter that only controls a very specific property of a very specific page type in a very specific scenario.\nAnother thing to think about it if this method should be application wide, or on a per method call basis.  In other words, should this be a global setting that is set once and respected by all MasterDetailPages in the app (would you really have more than one?), or should this be re-evaluated each time NavigateAsync is called from a MasterDetailPage?\n. Great scenario!\nThis issue is that the solution must be implemented by the INavigationService.  So the approach must expose a hook of sorts to control what the INavigationService does in this scenario.  I guess the INavigationService could look for an interface and use the value off of that to determine if it should be presented or not.\nSo option number 3: Use an interface\n. The INavigationService just has to read the value at the time of navigation, not set the property.  So we could just use the query string approach to send the value to the navigation service at the time of navigation, or we could use an interface that the navigation service can use to read the value when it's ready to navigate.\n. If we use an interface, it needs to be used on both the MasterDetailPage or the ViewModel.  This means that given we have an interface defined like this:\npublic interface IMasterDetailPage\n{\n    bool IsPresented { get; }\n}\nThen the MasterDetailPage must implement this interface explicitly like this:\n```\n    public partial class MyMasterDetail : MasterDetailPage, IMasterDetailPage\n    {\n        public MyMasterDetail()\n        {\n            InitializeComponent();\n        }\n    bool IMasterDetailPage.IsPresented\n    {\n        get { return Device.Idiom != TargetIdiom.Phone; }\n    }\n}\n\n```\nThis is because the base MasterDetailPage already has a property called IsPresented.  Obviously we can't use that instance of the property because it is tied to the MasterDetailPage.Master behavior.  If you did not implement this interface explicitly then it would not work as expected and the result of the IsPresented property would always return true.\nDoes anyone think this would be an issue?\n. This sample is simply showing how you would use this interface if you placed it on the MasterDetailPage instead of the ViewModel.  The interface would be supported in both the View and ViewModel\n. I think we should name this interface something different.  Since this interface is only used for controlling the IsPresented during navigation, it probably shouldn't be called IMasterDetailPage.\nWhat does everyone thing about:\npublic interface IMasterDetailPageNavigationOptions\n{\n    bool IsPresentedAfterNavigation { get; }\n}\nAny other name suggestions?\n. I like that name.  How do you feel about me placing this in the Prism.Navigation namespace, or do you think this should go into a different namespace.  If so, what namespace makes sense to you?\n. As discussed in this SO thread:  http://stackoverflow.com/questions/37239147/prism-for-xamarin-forms-i-cannot-resolve-the-navigationservice-unless-if-viewmo/37243428#37243428\nCurrently it is too cumbersome to provide a different VM that requires the INavigationSevice to the View using the ViewModelLocator based on custom logic such as which device type I am running on.\nScenario\nAs a developer I want to use one ViewModel if I am on a phone, and provide a different ViewModel if I am on a tablet and have the INavigationService injected properly\nif (Device.Idiom == TargetIdiom.Tablet)\n    //use TabletViewModel for MainPage\nelse\n    //use PhoneViewModel for MainPage\nDoes this accurately represent your issue?\n. So right now how are you switching out your pages?  Can you provide a code snippet?\n. You can now do this:\nif (Device.Idiom == TargetIdiom.Tablet)\n{\n    Container.RegisterTypeForNavigation<TabletMainPage>(\"MainPage\");\n    ViewModelLocationProvider.Register<TabletMainPage, MainPageViewModel>();\n}\nelse\n{\n    Container.RegisterTypeForNavigation<PhoneMainPage>(\"MainPage\");\n    ViewModelLocationProvider.Register<PhoneMainPage, MainPageViewModel>();\n}\n. Great catch!  Not sure what we should set the default to.  Let me look at the Visual Studio default templates and see what they are doing\n. Fixed!\n. Good catch @powerdude. I forgot about those :)\n. Done with PR #580 \n. Well actually, if the page is not created, it should throw an exception.\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/PageNavigationService.cs#L339\n. That's weird.  So maybe we should add logging as well as throw the error?  Should we only log if in debug mode, or any more in the case in which someone has provided their own custom logger.\n. No because this would be a breaking change to all existing WPF app.\n. So Xamarin didn't make this any easier, but I took the time to create them anyways.  I got Item, Project, and Code templates for Xamarin Studio.  Now I just have to get them submitted to the gallery.  That should be fun.\n. In Xamarin Studio open up the Add-in Manager, and then select the Gallery tab.  The problem is that MonoDevelop builds it form source, and I'm having a hard tie getting it to work right now.\n. Well, one thing is for sure; the INavigationService will never expose any Page objects.\nI see problems with having/maintaining a CurrentPage property.  First, what would constitute a current page?  For example, what if I am on a MasterDetailPage, what's the current Page?  The master, the detail, or the MasterDetailPage itself?  What about a TabbedPage, or a CarouselPage?  What is the current page?  I think this changes depending on the scenario.  Knowing this, it would be extremely difficult to control this.  Besides, there would be a technical challenge since the INavigationService is instance based (each page gets its own instance), so maintaining a CurrentPage/PreviousPage property would be problematic given that we are navigating from one service to another VM that has a different service.  We would probably have to use a static property to manage that, and I really dislike that idea.\nI don't think we should have a PreviousPage property, but I could possibly see adding a Boolean result coming from GoBackAsync.  So you can check the result of GoBackAsync and if it is false, then there is no Page to go back to, and you know to close the app instead.\n. What version of Prism.Forms are you using?  No exceptions should be thrown.  Do you have a repro?\nI don't think showing a ViewModel will work either for a couple of reasons.  First you don't navigate to ViewModels.  You navigate to keys/ids.  So mixing the concept would be confusing and misleading.  Once again, we run into the problem of what constitutes the Current/Previous items if I'm in a MasterDetailPage, or a CarouselPage, or a TabbedPaged?\n. You're not using the latest version.  If you upgrade to pre-5 the exception won't occur anymore.\n. Ahhh, I see what you mean.  I thought it was related to a previous exception that was fixed.  This is actually an exception being thrown from Xamarin.Forms.  You would get this exception if you simply did this:\nprivate async void Btn_Clicked(object sender, System.EventArgs e)\n        {\n            var p = await Navigation.PopModalAsync();\n        }\nWe can probably throw that in a try/catch for that scenario.\n. For that you simply use an absolute URI.  That resets the Application.Current.MainPage.\n. GoBackAsync now returns Task.  True if the go back was a success, false if it was not.\n. Please do not post the same issue in two different project sites.  Since this is .NET Native related, you have already submitted this issue to the .NET Native project site.  If the answer comes back from the .NET Native team that it is Prism related, then feel free to open a issues here and provide all the information from the previous submitted issue.\nThanks,\n. You don't have to create a new issue in order to reply to your other one.  Please continue the conversation on #582 \n. Thanks for the PR!\n. Thanks for the update!\n. We are a planning to add logging issues to the output window when debugging.  See #576 \n. This is going to be a hard sell.  Given a developer can provide their own extension methods to extend what they pass to their logger, there must really be a motivating benefit to changing the current logger interface.  Besides creating this new interface, we would have to deprecate the old one, then eventually remove it which would be a breaking change for a lot of apps out there.\nI will let the community weigh in on this.\n. Given that the loggers primary function is to simply log Prism events, and the majority of apps that require more verbose logging wind up using a different logger and extension methods can be used to provide a parameter override to format things like exceptions as the dev needs, this is not something we will be doing anytime soon.\npublic static class LoggerExtensions\n    {\n        public static void Log(this ILoggerFacade logger, Exception ex)\n        {\n            logger.Log(...);\n        }\n    }\n. IApplicationProvider was provided to abstract away the Application.Current.MainPage dependency.  Not only is that a static dependency which sucks ass, but it is a hidden dependency for anyone wanting to extend or create their own navigation service.  We want to leave that in there.\n. I'll start off by reiterating that INavigationService will never expose any Page objects.\nThe first step to recommending improvement to the INavigationService is to identify the best practice for solving these scenarios with normal XF code.  What would you do if you weren't using Prism?\nGoBackAsync(\"Name\") will not be easy and I am worried about performance.  Essentially we would have to go into a loop and PopModal/Async depending on what the parent was, until we could find the type that has been assigned the \"Name\" in the parameter.  Then what happens when we hit a MasterDetail, a TabbedPage, etc.\nRight now I am thinking the best approach would be to improve the Absolute URI logic to reuse Pages in the stack instead of replacing them if they are the same.  This way no state will be lost, nothing is recreated, and you can get wherever you want to go.  Even this will be extremely complicated and I'm not sure if I can properly handle all the different Page scenarios.\nAlso keep in mind the intent of Prism is to provide guidance on how you should be building apps, and not necessarily give you every possible option to do what ever you want.  We try to limit the ability to shoot yourself in the foot.  I am also trying to keep the interface light, as I am hoping to leverage it in UWP too.  Not sure that's going to be possible though since UWP navigation is so different.\n. One thing I think I can do right now is make the GoBack and Navigate methods virtual so it is easier to extend or customize.\nAgree?\n. @cbordeman there is no global navigation service for XF.  Navigation in XF is dependent on the correct Page instance, so it is impossible to have a global navigation service.  It is possible to replace the Prism implementation with your own, but you'll have to update the ViewModelLocator using this as a guide:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Unity.Forms/PrismApplication.cs#L40\nBecause navigation is page specific, we have to make sure the navigation service instance is aware of the correct page.  I can make this easier by registering the INavigationService with a name that is used internally, and that you can then override with a simple registration instead of having to touch the VML.\n. Okay, I checked-in the ability to more easily override the Navigation service.  First create your own navigation service and derive from the UNityPageNavigationService:\n```\n    public class MyNavigationService : UnityPageNavigationService\n    {\n        public MyNavigationService(IUnityContainer container, IApplicationProvider applicationProvider)\n            : base (container, applicationProvider)\n        {\n    }\n\n    public override Task GoBackAsync(NavigationParameters parameters = null, bool? useModalNavigation = default(bool?), bool animated = true)\n    {\n        //do what you want\n        return base.GoBackAsync(parameters, useModalNavigation, animated);\n    }\n}\n\n```\nThen in your App.cs, override COnfigurContainer and register your service with the container using the correct name:\nprotected override void ConfigureContainer()\n        {\n            base.ConfigureContainer();\n            Container.RegisterType<INavigationService, MyNavigationService>(\"UnityPageNavigationService\");\n        }\nNow you're off and running.\nAs an example, you could override GoBackAsync, pass in a parameter with numberOfPages, and then call Base.GoBackAsync as needed.\n. The Prism Template Pack has no impact or influence on intellisense.  It is just a set of Item and Project templates.  Nothing more.\n. No, because you will never be calling NavigateAsync<Page>().  NavigateAsync<T> is meant to be used with ViewModels.\nActually, you have given me the idea of doing a check of <T> to make sure it's not a Page type and if it is throw an exception :)\n. Actually before we do this, we have to create a new NuGet package called Prism.Ninject.Forms.  This I sbecause of the issue of supporting UWP in two different ways (native UWP, and XF UWP).  So our containers need their own Forms package.  Can you create the Prism.Ninject.Forms nuspec in a separate PR, then update the package references in this PR? :)\n. did you just want to update the logos as we discussed on this before I merge, or would it be easier to merge and then update them?\n. thanks for the PR!\n. Since there has been no response so I am assuming this works as expected.. The IPageDialogService in Xamarin Forms is built specifically to address the need of calling Page.DisplayALert and Page.DisplayActionSheet from within a ViewModel.  So we are simply abstracting away the Page reference need to call the platform's built-in API's.  UWP doesn't have such an API.  So this would not be needed for that abstraction.\n. The location of the ViewModels are irrelevant.  If you require this in your projects you would simply create your own interface and provide the UWP implementation of your required functionality.  Register that interface with your container, and anytime you ask for the interface, you'll get it.\n. Thanks for the idea, but this is not something we feel Prism should be addressing at this time.\n. This class hasn't used a SynchronizationContext since v2.  The only change that was made was related to the WeakEventHandlers which I do not believe would have impacted this behavior (I could be wrong).  There is already an open issue #322 which has been waiting for the community to help out that relates to this topic :)\n. Oh I see now! The WeakEventHandlerManager had the SynchronizationContext, not the DelegateCommand.  Good catch!  Well, issue #322 has been waiting for a PR to fix this for awhile now (hint hint)\n. Awesome!  Make sure to run the tests before submitting the PR\n. This has been fixed\n. Yup, I definitely have some async/await issues.\n. Using Xamarin Studio, In MainActivity I am getting a runtime exception at line 21 Android.Views.InflateException has been thrown.  Binary XML file line 1: error inflating class android.support.v7.widget.toolbar\n. Make sure you rebase with master. Some changes you submitted have already been made.\n. Actually, I was going to remove the IDisposable because I was only using that in the beginning for the initial development.  It never gets fired and provides no benefit.  I just forgot to remove it :) \n. I removed the IDispose.  Fell free to create another PR with your other improvements in it.  Thanks.\n. Good catch!  I'll get that fixed.\n. Navigating away from a View does not mean that it is no longer in memory.  Especially if you called NavgateAsync.  Your entire navigation stack remains in memory.\n. No, there is a misunderstanding.  If you are navigating forward and just adding pages to the stack, then of course your previous pages remain on the current stack and in memory.  If you navigate back to pop pages off the stack, or use an absolute URI then those pages are just waiting to be GC'd.  I have no control over when that happens.  Xamarin.Forms manages the collection of their pages when removed from the navigation stack.  When those pages are collected, then then IEventAgregator will not hold a reference to them as the weak event handlers will be released.\n. Also, the ViewModels are only recreated if you are adding a page to the stack using NavigateAsync, not if going back to a previous page with GoBackAsync\n. @dationguyen you have not provided enough information for us to determine what the problem may be.  If you want to clean up your ViewModels you should be using IDestructible. Thanks for bringing this scenario to my attention.  This is a great scenario, and I can imagine a very common one.\nMy first thought is to expose an event that you can hook into in order to register types in the platform project heads.  Maybe called \"Initializing\"?  Though, I'm not sure that will work because OnInitialized may still happen before you have finished handling the event.  I'll have to test that out.\nDo you have any ideas of how you would like to see this implemented?\n. I actually just coded up that approach!  In PrismApplicationBase I added this:\n```\nAction _registerPlatformTypes;\npublic PrismApplication(Action registerPlatformTypes = null)\n{\n    _registerPlatformTypes = registerPlatformTypes;\n}\n```\n```\n        public override void Initialize()\n        {\n            ...\n            RegisterTypes();\n        _registerPlatformTypes?.Invoke(Container);\n        ...\n    }\n\n```\nThen you just need to add a ctor to the App if you ant to use this extension point:\n```\n        public App(Action registerPlatformTypes = null) : \n            base(registerPlatformTypes)\n        {\n    }\n\n```\nNext, in the Platform project provide your delegate:\n```\n    public class MainActivity : global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity\n    {\n        protected override void OnCreate(Bundle bundle)\n        {\n            ...\n            LoadApplication(new App(RegisterPlatformTypes));\n        }\n    void RegisterPlatformTypes(IUnityContainer container)\n    {\n        ...\n    }\n}\n\n```\n. I also like the idea of accepting a class that implements an interface as well.  That leaves room for extension without modifying the App ctor again.\n. I like the idea, but we need to keep performance in mind, and searching for assemblies using reflection could be expensive.  Especially if there are a lot of modules in the app.\n. I like the idea of passing an interface rather than an abstract class, since there will be no implementation provided.  Having said that, since each container project has it's own container type (IUnityContainer, IKernel, IContainer, etc) there is no standard interface I can use for registering types.\n@totht91 how is it an anti pattern?  You might be thinking of calling virtual methods from within an abstract ctor, which is not happening here.\nEither way, in order to support this, I am going to have to move the InitializeInternal method out of the base ctor in order for any platform specific methods to be respected during the initialization process.\n. Alright, I think I have decieed to go with an interface approach.  I just need a good name for it.  I was thinking something like:\npublic interface IPlatformConfiguration\n    {\n        void Configure(IUnityContainer container);\n    }\nThis is pretty generic, but the only problem is if there is ever a need to add more methods that occur at different times during the initialization process.  So maybe  Something more specific like:\npublic interface IPlatformConfiguration\n    {\n        void RegisterTypes(IUnityContainer container);\n    }\nThen we could add more methods/properties as necessary through the initialization process, but is that a real possibility or not?  Also, if we take this approach, I'm not sure I like the \"Configuration\" part of the name.  So maybe a better name?\nThoughts?\n. How about IPlatformInitializer?  That's essentially what it is going ot be used for.  Initializing the application with platform specifics.\n. Because this leaves us open for extension down the road if necessary.\n. This has been implemented in #630 \n. Check out the sandbox https://github.com/PrismLibrary/Prism/tree/master/Sandbox/Xamarin/HelloWorld\n. Yes, but this is where you would register your types with the container\n. Can you please provide more information about this issue? What version of Prism? What version of Xamarin Forms?  How do reproduce the issue?  Do you have a repo app?\n. Sweet! Glad you got it figured out.\n. Not sure if those docs are accurate.  There is a DependencyServiceProvider that handles the XF DependencyService registrations.\n. This was removed\n. might as well update the WPF ones too :)\n. I'm sorry, but what exactly is the issue?  You didn't provide any context to this issue.  If this is related to another issue then you should continue the discussion there and not open a new issue.  Thanks.\n. This is because of how you are retemplating the control.  Fix your template and it will work.\n. I am out of country and on my phone so I'm not going to type the markup out. Delete your ControlTemplate and create a simple style to update the template property.\n. Upgrading the framework would be a breaking change and prevent a ton of current WPF Prism users from upgrading.  This would be the main reason why this probably won't happen anytime soon.\n. First, we would have to research to make sure this class makes sense, and can be used, on all platforms before moving it into the PCL project.  Then decide if the hassle of using type forwarders is worth it for this one class.  Which I am going to assume it's not.  I also do not want the PCL project to take a dependency on another package (which isn't an official MS DataAnnotation package) just to support this single class.  Honestly, I really don't see this happening right now.\n. Good idea.  I think you might be better off and get more adoption if you make it more of a stand alone component without taking a dependency on Prism.Core.  It looks like you are only using BindableBase which is just INPC so it's not really needed.  Plus, I think Prism.Extensions is too generic of a name for this.  I would recommend something more inline with what this component actually does (validation).\n. You would use the WindowStartupLocation property to control this\n. This may be related to #541 as it still relates to using the NavigationPage.  I am at NDC Olso right now, but when I return I will verify this issue.\n. I assume you are calling NavigateAsync from your NavigationPageViewModel right?\n. Can you provide more information such as how you navigating when the application initializes, as well as which ViewModels you are navigating from and to.  Please provide all necessary code\n. I'm confused.  What platform are you talking about UWP or Xamarin.Forms?  Could you please clarify your issue?\nCurrently, we can't have the same INavigationService definition in UWP and Xamarin.Forms.  You can see how vastly different the navigation paradigms are between the two platforms.  Also, there is no CanGoBack equivalent in Xamarin.Forms.  How would you expect CanGoBack to work for in Xamarin.Forms?  What would CanGoback actually do to determine if it can go back or not?\n. I'm sorry, but you still have not provided enough information for me to understand exactly what you are asking for.\nTo automatically get the back button in Xamarin.Forms, you must be within a NavigationPage. \n. This is because you are navigating from MainPage to a NavigationPage with only one Page on it's stack, hence no back button.  If you want a back button to show when navigating to View2page, then you must wrap the MainPage in a navigationPage.\nNavigationService.NavigateAsync(\"MyNavPage/MainPage?title=Hello%20from%20Xamarin.Forms\");\n. Make sure in your MainPageViewModel you navigate without having the NavPage in the uri.\nNavigateAsync(\"View2Page\");\notherwise you are navigating to a different navigation page instance with only one view on its stack.\n. @KalpeshChheda you need to specify that you don't want to use modal navigation. Set the useModalNavigation parameter to false.\n. Can you provide a sample app that reproduces the issue?\n. > I want to keep useModalNavigation to true because i don't want to see tabs when i am on SettingPage.\nIf you want modal navigation, you will never have a back button.  Only navigation that occurs within a NavigationPage will have a back button (non-modal navigation).\n. I took a look at the sample app, first of all stop using the DelegateCommand.FromAsyncHandler.  It is going to be removed in the next release, and provides no benefit.\nRegarding naivating to SettingsPage from MainPage (MasterDetail).  Currently when you navigate it is being set as the Detail of the MainPage, but it is not wrapped in a NavigationPage so there is no hamburger menu at the top.  This is why hitting hardware back button closes app, because the MainPage is still the root page.  If you want the hambuger menu you need to navigate to the SettingPage and wrap it in a NavigationPage like NavigateAsync(\"NavPage/SettingsPage\").   If you don't want the SettingsPage to be set as the detail when you navigate, you need to navigate to it modally (useModalNavigation=true). \nLike I said, the only way to get a back button is to have your page wrapped in a NavigationPage.  So no, unless you wrap your pages in navigation pages you won't get a back button.  You'll have to add one manually with a custom renderer.\n. Actually that's not a bad idea. I'll play with that after I eat.\n. Great idea, it worked out great!  Check it out and let me know what you think.\n. Great call. I didn't even see that :)\n. I haven't looked at this closely, but one thing I did notice is that you aren't using the latest preview version of Xamarin.Forms which is what Prism is built against.  You need to update all your references.\n. I always create a branch and then submit my PRs from the branch. I never work on master directly.\n. Closing this since you already asked this question on StackOverflow.  Please do not post in both locations.\n. Nah, not really.  Honestly this is not an important issue and not worth the time to figure out.  This will be one of those \"not going to fix\" issues.  If you wanted to take a stab at it that would be cool, but I'm not going to spend any time on it.\n. Good find!\n. Well I would be very hesitant. This is a very old part of the code base, and I am personally not familiar with it.  The side effects are unknown to me, hence why I'm not sure we should be touching this code.\n. This is a known issue and a limitation of Xamarin.Forms. currently XF does not provide an API to respond to the hardware back button.   Even when they expose this API, there will most likely not be an ability to prevent the go back from occurring. I will leave this open until XF adds the ability.\n. That won't work. I have been working with Xamarin and they will be adding a proper API in a future release. When they do, then I'll implement this functionality. \n. It's the same problem regardless of if it is the hardware back button or the software back button.\n. Xamarin has a solution, they just haven't implemented it yet.  Still waiting\n. Turns out, there will be no way to support IConfirmNavigation in this scenario as there is no way to use an event to hook into the OnBackButtonPressed.  The only way to support this is to override the OnBackButtonPressed in your application on an \"as-needed\" basis.\nSome good news, is that I think I have found a way to support calling the other INavigationAware methods when using the system/hardware buttons.\n. What problem does these changes solve?  No need to rename the methods.  I don't necessarily name methods to reflect the technical implementation, but rather the conceptual implementation.\n. Before we start making changes to the coding style to improve perf, we need actual data to validate making the change.  Also, in XF the more methods you have the slower it is.  This is why a lot of the logic is somewhat duplicated an in large method bodies.  Regarding the custom MultiPage scenario.  Is this a common scenario?  It has not been reported as an issue yet.  Is this something you need in your app?  I would assume someone would just derive from CarouselPage if they needed a custom page.  Also, Xamarin is going to be adding an interface for these types of pages that we would use instead.  Not sure when they plan on adding it, but it is on their backlog.\n. I am closing this PR for now as I am not ready to consider these changes.  In the future, please create an issue to discuss your ideas before submitting PRs to ensure that the PR will provide value and you don't waste your time.  It will also ensure that your PR will more likely be accepted.\n. We'll also need unit tests\n. Please rebase from Master. Fix compile issues (because I broke you), and fix tests.  Also, please update your extensions to follow the new pattern (see the UnityExtensions as an example).\n. Looking good. Let's get it upgraded to the latest XF preview, and get the Prism.Autofac.Forms nupec created so we can get this merged into master.  Great job!\n. Thanks for the great PR!\n. Once again, this is a bug in Xamarin.Forms.  Here is the code to duplicate it in XF without Prism:\n```\n    public partial class App : Application\n    {\n        public App()\n        {\n            MainPage = new MainPage();\n        }\n    }\npublic class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        Title = \"MainPage\";\n\n        Button btn = new Button() { Text = \"Navigate from MainPage\", HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center };\n        btn.Clicked += Btn_Clicked;\n\n        Content = btn;\n    }\n\n\n    private void Btn_Clicked(object sender, System.EventArgs e)\n    {\n        Navigation.PushModalAsync(new NavigationPage(new ViewA()));\n    }\n}\n\npublic class ViewA : ContentPage\n{\n    public ViewA()\n    {\n        Title = \"View A\";\n\n        Button btn = new Button() { Text = \"Navigate from View A\", HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center };\n        btn.Clicked += Btn_Clicked;\n\n        Content = btn;\n    }\n\n    private void Btn_Clicked(object sender, System.EventArgs e)\n    {\n        Navigation.PushAsync(new ViewB());\n    }\n}\n\npublic class ViewB : ContentPage\n{\n    public ViewB()\n    {\n        Title = \"View B\";\n\n        Button btn = new Button() { Text = \"Navigate from View B\", HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center };\n        btn.Clicked += Btn_Clicked;\n\n        Content = btn;\n    }\n\n    private void Btn_Clicked(object sender, System.EventArgs e)\n    {\n        Application.Current.MainPage = new MainPage();\n    }\n}\n\n```\n. Here is the XF bug: https://bugzilla.xamarin.com/show_bug.cgi?id=41854\n. The Prism Template Pack fro  Xamarin Studio 6 has been published.\n. Yeah, looks like there was a breaking change with XS 6.0.  The Project type = \u2018PortableDotNet\u2019 should be set to Project type = \u2018C#PortableLibrary\u2019\n. This was fixed\n. Yeah, this is not something we are conferenced about :)\n. I am closing this because this is not an issue with the VIewModelLocator, but rather WPF DataContext inheritance.  Having said that, if a controls DataContext is set, it should not be overridden by it's parent.  Can you provide a repo app that demonstrates the issue?\n. Good catch!  I'll update the code to reflect your recommended changes.\n. Of course all the tests break once I do that :)\n. So when I add this line\nif (_synchronizationContext != null && _synchronizationContext != SynchronizationContext.Current)\n                _synchronizationContext.Post((o) => CanExecuteChanged?.Invoke(this, EventArgs.Empty), null);\nThe tests fail because the test runner always uses a different sync context for each test, and due to the async nature, the test method finished before the Post has completed.  FAIL!  I am not sure how to fix this to where the tests pass.  If you have any insights on how this, I would appreciate the help.\n. Actually, after investing this some more, the culprit is making the sync context static\nprivate static readonly SynchronizationContext _synchronizationContext = SynchronizationContext.Current;\nThis is the root of the issue.\n. @dvorn It is not an issue with the comparing of contexts, it's an issue with the sync context being static and testing it reliably with xUnit.  It functions just fine, it's just getting the tests to pass which is proving to be difficult.\n. I can't get xUnit tests to pass for the life of me.  It's quite frustrating.  It has to do with each test getting a different sync context, and I don't have the original to monitor for completion of the post process before checking the asserts.  I have no idea how the previous tests pasts, because they would have the same issue.\n. Before the tests were using MSTest, I bet that a sync context was never created in those tests, which is why they would pass.  xUnit actually creates a sync context for each test, but I have no way of waiting for the Post to complete before checking the asserts, which run and fail before it's ready.\n. using Task doesn't matter.  The issue is that the new static variable to hold the sync context is set to a different sync context of the tests.  I cannot Assert a value until after the sync context post has occurred.\nFor example:\n```\n        [Fact]\n        public void RaiseCanExecuteChangedRaisesCanExecuteChanged()\n        {\n            var handlers = new DelegateHandlers();\n            var command = new DelegateCommand(handlers.Execute);\n            bool canExecuteChangedRaised = false;\n            command.CanExecuteChanged += delegate { canExecuteChangedRaised = true; };\n        command.RaiseCanExecuteChanged();\n\n        //post hasn't completed so this fails\n        Assert.True(canExecuteChangedRaised);\n    }\n\n```\nMSTest doesn't create a Sync Context, which is why these tests past prior when using the WeakEventManager.  We are using xUnit now which does create a Sync Context, which now introduces our problem of testing.\n. Actually just found out that in UWP, if you have multiple top-level windows, each has their own UI thread....so using a static would capture the wrong context.  This means we can't use the static approach after all.\n. @pculver See this thread issue #648 \nYou'll just have to wait a couple more weeks.\n. Could you please provide more detail around the issue?  What is the exception?  What does your ViewModels/Vews look like?  It would be best if you can provide a sample app the reproduces the issue.\n. Based on the exception, and I see you are passing NavigationParameters, you have logic that is adding the same parameter to the NavigationParameter twice.  NavigationParameters is a Dictionary, and can only have one unique key at a time.\n. What was the motivation for changing the interfaces and moving the originals into extension methods?  By doing that, you have completely broke anyone using custom implementations.  It would probably be better if you just added the Async methods to the interface directly.  This way when devs using custom implementations upgrade they can simply implement the new members with a NotImplementedException since they aren't using them.  The way it is done now, they would have to change their implementation.\nIConfirmNavigationRequest, and similar interfaces,  should not be considered deprecated.  Every single Prism app out there uses this interface, and it is the standard way of writing Prism apps.  We are adding support for async/await, not replacing the current stable and mature implementations.\n. Prism hasn't been created just now.  It has been around for nearly 10 years with a huge user based that have built very large and mission critical applications on top of it.  Everything from 911 response software, to offshore drilling, to stock trading and financial apps.  We cannot suddenly say change your app to use this new way.  Yes, we are stuck with supporting the current WPF Prism implementation.  Any feature we add must be \"additive\".  We must not change current implementations.  We should only add to it.  Also, using Async isn't always the best approach.  It is only useful in scenarios where it actually makes sense to use any of the Async features.  Most of the time, async/await is not needed for region navigation.\n\nThis means that our implementation of awaitable methods in RegionManager and Region (which delegates to IRegionNavigationService) cannot assume that IRegionNavigationService implement the awaitable portion interface and cannot call it.\n\nExactly my point.  We are introducing a number of breaking changes, some we haven't even considered, that would not only break the actual implementation of the region navigation service, but the current functionlaity of Prism applications.\nThis is not a feature that can be taken lightly.  A lot of due diligence must be done in order to verify backwards compatibility and that all current functionality is left intact.\n. > Aren't you attempting to be a greater Catholic than the Pope?\nNot sure what that means.  If it means making sure every feature added to Prism is done right and doesn't break/change the functionality of every Prism application using navigation, then yes.\n\nEvery new major Prism Release introduced breaking changes.\n\nThe past breaking changes were small and included things like class renames, namespace changes, assembly name changes, etc.  Most of which had to be done when the project was taken over from Microsoft.  Nothing that impacted a major functional area of Prism.  Changes that are easily fixed by find/replace.  Developers didn't have to update or verify functionality.  Those changes do not compare to the possible issues that could occur if we do not implement this feature correctly.  If not done correctly, this will break the actual functionality of an application, not just whether it compiles or not.\nAlso, all existing tests must not be modified in order to support this feature.  We need to verify that all current functionality remains in tact.  If we modify existing test to work with the new Async feature, then we have lost the ability to verify existing functionality is correct.  We should only create new tests for the Asyn feature being added.\n. I understand the benefits, I just want to be cautious and very careful on how we implement it.\n. I am going to discuss this with @briannoyes since he is more familiar with this area of the Prism code base.\nFeel free to keep adding tests to this PR to cover your new API.\n. Don't add that to the PR.  That's ugly. We aren't going to create new interfaces postfixed with \"Old\" with a wrapper class. This points to issues with the feature implementation and maintaining backwards compatibility.\n. yes\n. I'm in Sydney the rest of the week. I'll be releasing a new stable build next week :)\n. Just a quick update.  I am going to get some small updates in and then I plan on releasing 6.2 as stable end of this week (week of Aug 8).\n. It has been done!  Available on NuGet now\n. Possibly. I am thinking this is related to the breaking change they made when they modified the ModalStack behavior.  Let's wait and see what Xamarin comes back with regarding the bug.\n. Go ahead and submit a PR with this workaround.  I am not sure XF can get a fix ready in time for their 2.3.1 stable release (if they even consider this a bug), and this need to work when we release Prism 6.2.  We can always remove this check if necessary in a future release.\n. I'm curious  if we could create a new interface that the NavigationService can use to control the TabbedPage navigation behavior.  Something like\npublic interface ITabbbedPageNavigationOptions\n{\n    bool UseTabbedBasedNavigation {get;}\n}\nThen the TabbedPage could implement the interface and switch tabs instead of calling PushModelAsync/PushAsync.\nBut... that would require calling the navigation action off of the TabbedPageViewModel itself, not a page within the TabbedPaged.  SO how would that work?\n. The only issue I can think about with the behavior is preventing the INavAware from invoking multiple times; once when navigated to, then again when responding the the tab changed event.\n. Maybe a new interface would be better as to not to cause confusion between a navigation operation and a tab switching operation.  I'm curious if passing parameters between tab changes would be needed, and if so how we could solve that.\n. @polepage would you mind sharing your approach?\n. @polepage thanks for sharing\n. My gut has me leaning towards a behavior\n. I am leaning towards explicitly\n. It can't be default because there is no easy way to remove it if it's not wanted.  It will have to be an opt-in.\n. I am not a fan of adding a separate attached property to turn off a behavior.  That is not a common or expected approach in XAML development.\n. So after playing around a little bit, I do kind of like that it is done automatically :)\nThe dev experience is much nicer.  We just have to think of a good way to opt-out.  Any other ideas besides an attached property?  Maybe an interface IMultiPageNavigationOptions just like we have for NavigationPage and MasterDetail?  It follows the same pattern anyways.\n. I agree with @sunefred.  This is not navigation.  You are just in a tabbed control changing/selecting a different tab.\n. @toadzky Let's say you have a nav uri like this:\nNavigatAsync(\"MyTabbedPage/NextPage\")\nThe first argument would be the actual TabbedPage.  The next argument represents the next page in the navigation request, which may or may not be a page representing a tab in the MyTabbedPage.  If it is a tab, then it will select that tab and continue processing the navigation request.  This becomes more important when the tab is a navigation page, and navigation must continue within a different navigation stack.  If it is not, it will create an instance of the NextPage, add it to the navigaton stack, and continue processing the navigation request.  Just to clarify, the tabs don't have to be part of the navigation URI.  \nThere is a distinct difference between simply changing tab selection, and processing a complex navigation request.\n. So I am finally getting around to looking at this.  First off, in WPF, responding to tab changes in a tab control is handled by using the IActiveAware interface, with no options for passing parameters between tabs.  Essentially, you are responding to a tab that is becoming active.  Couldn't we take the same approach and leverage the IActiveAware interface for this?\nI am also curious how common it is to pass parameters between tabs of a TabbedPage?  I have a hard time seeing the need for that.  Thoughts?\n. @toadzky Well can't you just propagate those parameters in the TabbedPage to it's children?  Implement INavigationAware on the TabbedPage, capture the parameters and then loop through the children and set a property on their ViewModels that is used to load the data?\nI'm just trying to think if passing parameters from tab to tab is a common task, or just an exception.\n. @dansiegel Well would it be more useful if the TabbedPageNavigationOptions had a property called PropagateParametersToChildren which if set, the navigation service would send the parameters to all child pages via OnNavigatedTo?  It would be more of a one time thing, and wouldn't support passing params from tab to tab on selection changed\n. @toadzky You get the VMs from the child Page's BindingContext.  Cast them as a common interface and set the property accordingly.\n. If we did add a property to an interface to control this, should it be an enum to control the behavior?  Assuming the property was called ForwardNavigationParameters\nWith the following options:\n- ActivePage\n- AllPages\n. Okay, so we may have two issues here:\n1. Need a way to optionally pass parameters to the TabbedPaged children (one or all).\n2. Need a way to pass parameters from tab to tab upon a new tab selection.\nSo for issue 1 we can utilize a TabbedPageNavigationOptions interface with a property to forward the parameters to the children via the INavigationAware interface.  This will be opt-in, and may cause a duplicate call to OnNavigatedTo if they have the property set and are explicitly navigating to a tab; for example NavigateAsync(\"MyTabbedPage/TabA\")\nIf we implement issue 1, we may be creating a source of bugs and confusion.\nFor issue 2, we need a behavior that will\n- Call a method from the tab being unselected to signify we are changing tabs\n- Provide a method that can request or gather parameters that will be used in the newly selected tab (maybe this method is the same method in the first bullet)\n- Call a method on the newly selected tab and provide the parameters that were provided from the previously selected tab.\nIf we properly implement issue 2, we may not need to implement issue 1 as issue 2 would essentially provide a consistent way of getting parameters from tab to tab.\nDoes this sound right?\n. @scorpio2000 this is probably not something Prism will do.  Changing tabs from within a tab is not an orthodox navigation function in XF.  You can create a custom behavior to achieve this.\n. @nuitsjp Good thinking.  It is very common the have a NavigationPage within a TabbedPage.  If we are dealing with a navigationPage, should we call the methods on the NavigationPage AND the CurrentPage, or just the CurrentPage?\nprotected async Task HandleNavigationToPage( Page page, bool navigatedTo, NavigationParameters parameters )\n{\n    var navigationPage = page as NavigationPage;\n    if (navigationPage != null)\n    {\n        await NavigationAwareHandler(navigationPage.CurrentPage, parameters, navigatedTo);\n        await NavigationAwareHandler(navigationPage.CurrentPage?.BindingContext, parameters, navigatedTo);\n    }\n    else\n    {\n        await NavigationAwareHandler( page, parameters, navigatedTo );\n        await NavigationAwareHandler( page?.BindingContext, parameters, navigatedTo );\n    }\n}. As everyone can see, I am back from vacation and ready to start implementing more features.  I plan on releasing another preview soon after we get the EventToCommand, and maybe some other smaller things fixed.  So look for this feature to be implemented in preview 3.. this hasn't been implemented yet.  This will be in the next 6.3 release which currently doesn't have a release date.. I haven't really looked at the code, but you could try adding them to the parameters collection in the OnNavigatedFrom.  Then they should be passed to the OnNaviatedTo of the target page.  Not sure though, as I didn't write the code.. > I have a static ObservableCollection defined in the app.cs class \nThis scares me. I would not recommend that.\nAs of now, INavigationAware does not fire when switching tabs via clicking on tab headers.  This is why this issue has been submitted.  We need a solution to this, and there is one approach available in this thread, and PR #712  has been submitted which also need to be reviewed.  As of now, this has not been implemented.. IActiveAware does nothing special in regards to binding, nor does INavigationAware.  The IActiveAware.IsActive property is set after a new Tab selection has been made.. The plan is to have a solution to tab switching in 6.3 RTM.. No. I do not have a date. I work on Prism in my free time in-between my job, family, and other community events.  That's why I push previews throughout the process.. @beylkhanovdamir no, there is no tab switching solution built into Prism yet.  It is still pending.. Starting this thread up again.  I think the best approach for tab change notifications is to use IActiveAware.  Passing parameters between tab selections don't make a lot of sense.  If this behavior is desired it can be achieved using either the IEventAggregator, or a class that maintains the state between the tabs.  Like a singleton state manager service.  When IActiveAware.IsActive is being set, you can set/read the parameters from this service.  This also aligns the tab behavior with exactly how Prism for WPF works.\nHowever, propagating parameters passed from the TabbedPage to the CurrentPage does make sense.  For example, given I navigate to directly to the TabbedPage:\nNavigatAsync(\"MyTabbedPage?name=Brian\");\nThe first child should also be passed the parameter.. Okay, so the real issue is being able to pass parameters to either the first tab or all tabs when navigating to the TabbedPage for the first time.  This in combination with IActiveAware should address the majority of TabbedPage issues?. You are responsible for firing that, not the framework. In the IsActive property setter, you raise that event, similar to how you implement INotifyPropertyChanged.. Like I said, in the IsActive property setter, you know if the tab is active or not. Raise it there.. I have been investigating this issue and it's much more complex than I thought it would be.  I have a branch that kind of works, but not perfectly.\nIf you navigate to the TabbedPage with no further navigation segments (NavigateAsync(\"TabbedPage\")) all tabs will invoke the INavAware methods just fine.\nHowever, I cannot prevent the INavAware methods from being invoked twice if you provide a deep link such as NavigateAsync(\"TabbedPage/NavigationPage/SomeTab\"). In this case SomeTab will have it's INavAware methods invoked twice.\nNow keep in mind that this would only happen if you are trying to deep link into your TabbedPage.\nI am really leaning towards requiring having the propagation of parameters to all the other tabs being the responsibility of the developer.  Essentially, this is all that would be required:\n```\n    public class MyTabbedPage : TabbedPage, INavigatingAware\n    {\n        public virtual void OnNavigatingTo(NavigationParameters parameters)\n        {\n            foreach(var child in Children)\n            {\n                PageUtilities.OnNavigatingTo(child, parameters);\n            if(child is NavigationPage navPage)\n            {\n                PageUtilities.OnNavigatingTo(navPage.CurrentPage, parameters);\n            }\n        }\n    }\n}\n\n```\nThis would give the developer full control over what tabs get what parameters.  Although, it is a little more code that has to be written.  We could provide some Gists in the docs to help, or maybe even some VS code snippets.\nThoughts?\n. It would not be wise to place the \"if check\" in the PageUtilties as that method is specific to invoking methods on the target page.  Adding that logic may cause issues in other places the method is used (for example during deep linking).  If we provided a behavior, it wouldn't solve the problem we have now... the INavAware methods would be invoked twice when you provide a deep link for a tab (NavigateAsync(\"TabbedPage/NavigationPage/SomeTab\")).  By handling it in the code-behind, you can prevent this from happening on a case-by-case basis.. You can't use a behavior in this case because we have to respond to the INavAware methods that are called on the page directly.  There is nothing for a behavior to listen to.  I also don't think you fully undertand the issue with trying to call the INavAware methods on all tabs in general.  There is no way to prevent them from being invoked twice.. Okay, I have made great progress on this issue.  This is where we are. I had to change the behavior of the TabbedPage.\nNavigateAsync(\"TabbedPage/SomeTab\")  will no longer select the \"SomeTab\" tab of the TabbedPage.  Instead it will navigate to the SomeTab page.  If you wish to select a tab, you simply set a parameter (yet to be named) like this:\nNavigateAsync($\"TabbedPage?{KnownNavigationParameters.SelectedTab}=SomeTab\").\nTo select tabs that are nested in a NavigationPage you simply provide a special syntax:\nNavigateAsync($\"TabbedPage?{KnownNavigationParameters.SelectedTab}=NavigationPage|SomeTab\").\nThis is actually more flexible than what we have now.\nNow the new problem.  How do we indicate that I want to navigate within a Tab that is wrapped in a navigationPage?  For example, right now you can use NavigateAsync(\"TabbedPage/NavigationPage/SomeTab/SomeOtherTab\").  This will have the TabbedPage as the root of the app, and navigate the SomeOtherTab within the current tab.\nWith this new approach this will not work.  I need to know how to determine the intent of the navigation.\nShould we use another parameter in the target similar to:\nNavigateAsync($\"TabbedPage?{KnownNavigationParameters.SelectedTab}=NavigationPage|SomeTab/SomeOtherTab?navWithinTab=true\").\nShould the default behavior always navigate from the TabbedPage.Current page, or do we default to navigating from the TabbedPage itself?\nWhat are your thoughts?\n. Another option is to have somewhat of a nested navigation which is indicated by the '|' character:\nNavigateAsync($\"TabbedPage?selectedTab=NavigationPage|ViewA|ViewB/SomeOtherView\")\nThis means that you will not be able to pass individual parameters to any nested pages.  Only to the NavigationPage.CurrentPage\nHow common is it to do a nested navigation in a tab during a deep link?. Knowing that is a tab is irrelevant.  The syntax you provided will no longer work in the new API.  You will need to provide a selectedTab parameter.. No, I am working on it now.. There is now a breaking change in the TabbedPage behavior.  Please read PR #1195 for detail ont he new syntax.\nThe good news is now all tabs will receive parameters in the OnNavigatingTo method.  You no longer have t manually forward these.. Feel free to test this out with the latest 7.0.0.124-ci build on MyGet. See issue #648 \n. PopUpWindowAction does nothing in regards to blocking/controlling behaviors.  All it does is show a Window with the Content property set.  Please provide a sample app the reproduces this issue.  I would also suggest taking the PopupWindowAction code and brining it into your own application and using it so that you can debug the issue:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Interactivity/PopupWindowAction.cs\n. At first glance this approach looks much better.  Async methods are added as the extension methods and it appears that we aren't breaking anyone.\n. My only concern is the testability of the extension methods in Prism applications.  Those are a pain to test, and if the methods were added to the interface, it would be easier to mock/test.  Having said that, I'm not sure that is a deal breaker.\n. Sure, might as well add #119 if we are trying to tackle this async/await feature.\n. I am in agreement with you @dvorn.  While this would be cool, It's probably not worth the effort and breaking changes it would introduce.\nThanks for the thoughtful response.. I haven't had time to verify it yet, but go ahead and get your PR together to fix it.\n. Well that makes it easy :)\n. Correct.  This is the expected behavior.  The Observes functionality hooks into the INPC of the defining class, so in this case it would be your test class.  The feature also does not support complex objects like you have in your test. ObServesProperty(() => Class.PropertyName); would not work even if you defined the command within the VM, because it does not hook into the INPC of the property being observed.\n. That would require you to provide the defining type of the property to the function which would make the API more complicated for the 95% use case, and honestly it isn't meant to be used the way you are trying to use it.\n. No, because that is asking for memory leaks.  You will be hooking into the INPC event of an object, and that will root that object unless you explicitly unhook the event.\n. Just an update.  Support for nested properties has been added in the latest code base.  Should be available in the next major release. Thanks for the PR!\n. Thanks a lot for the extra test coverage!\n. I am making a lot of improvements to the template pack which include some of these items.  I am going to close this and then we can regroup on what's left.\n. This can be done with the new IPlatformInitialzer.\n. Why can't this be done using IPlatformInitializer?\n. Actually, I just thought about one scenario.  Modules.  If loading modules, these View resgitrations won't go through the IPlatformInitializer.\nSo, let's discuss the API, and what it should looks like/behave.\n. The important thing is that we do not create confusion between this new method and the current extension methods for registering types for navigation.\n. Here are some possible API's for this feature\nA - the first TView is used as the default view\n```\n            container.RegisterTypeForNavigationOnPlatform(\n                iOSView: typeof(iOSView), \n                androidView: typeof(AndroidView));\n        navigationService.NavigateAsync<ViewAViewModel>();\n\n        container.RegisterTypeForNavigationOnPlatform<ViewA, ViewAViewModel>(\n            name: \"ViewA\",\n            iOSView: typeof(iOSView), \n            androidView: typeof(AndroidView));\n\n        navigationService.NavigateAsync(\"ViewA\");\n\n```\nB - a default view type must be provided as a param\n```\n            container.RegisterTypeForNavigationOnPlatform(\n                defaultView: typeof(ViewA), //not optional\n                iOSView: typeof(iOSView), \n                androidView: typeof(AndroidView));\n        navigationService.NavigateAsync(\"ViewA\");\n\n        container.RegisterTypeForNavigationOnPlatform<ViewAViewModel>(\n            name: \"ViewA\",\n            defaultView: typeof(ViewA), // not optional\n            iOSView: typeof(iOSView), \n            androidView: typeof(AndroidView));\n\n        navigationService.NavigateAsync(\"ViewA\");\n\n```\nI am worried that option A would cause a lot of confusion with the current RegisterTypeForNavigation<TVIew, TVIewModel> and when to use NavigationService.NavigateAsync(\"name\") vs. NavigateAsync<TViewModel>.\nUsing option B though there is no way to use the NavigateAsync<TVIewModel> approach to navigation which a lot of devs like.\nThoughts/ideas?\n. Also, what about those cases where each platform page uses a different ViewModel?  I guess that means we would also need a \nRegisterTypeForNavigationOnPlatform<TView>\nWhere we only allow the registration of Views, and not ViewModels.  But then how does this play with the other methods.  Are we confused yet?\n. Then what about scenarios where one page uses one VM and another page uses a different VM?  Or do we consider that too custom for us to handle?\n. @dansiegel I don't think we should remove it.  It is still a common way for devs to think about navigating.  Check out #666 .  This change will essentially do what you were first expecting.  It will register whatever ViewModel you specified as the one to use, and allow you to navigate to it using NavigateAsync<SomeViewModel>()\n. @joacar it's simpler than that.  We are creating a new extension methods with this signature:\nRegisterTypeForNavigationOnPlatform<TView, TViewModel>(this IUnityContainer container, string name = null, Type AndroidView = null, Type iOSView = null, Type OtherView = null, Type WindowsView = null, Type WinPhoneView = null)\nRegisterTypeForNavigationOnIdiom<TView, TViewModel>(this IUnityContainer container, string name = null, Type DesktopView = null, Type TabletView = null, Type PhoneView = null)\n. yeah, I think the idea was to mimic the Device.OnPlatform. That can easily be changed though.\n. Then that would essentially render NavigatAsync<TViewModel> broken, which in turn will break a number of apps.  I know this is a common pattern for devs to navigate to ViewModels.  Removing it would standardize the navigation though.\nIf anything, maybe we provide a RegisterViewModelForNavigation extension methods which would support the NavigateAsync<TVIewModel>.  Does that make the intent of the method more clear?\n. I cannot repro this issue. Assuming I have an app startup like this:\nprotected override void OnInitialized()\n        {\n            NavigationService.NavigateAsync(\"MainPage\");\n        }\nAnd then in MainPageViewModel I navigate using an absolute uri:\nasync void LoadModuleA()\n        {\n            await _navService.NavigateAsync(\"myapp:///ViewA\");\n        }\nThe MainPageViewModel.OnNavigatedFrom is invoked as expected\n. Works perfectly for me.  Set a break point on the OnNavigatedFrom methods and you will see that they are firing as expected.\n. Without the ability to reproduce the issue, I really can't provide any hints on where to look.  I guess just make sure you are using the latest version of Prism, you're in debug mode, and that the symbols are loaded.\n. Very strange. I'm glad it worked itself out though.  Let me know if you have anymore issues.\n. @Troto see issue #634 \n. See the last statement:\n\nIt's the same problem regardless of if it is the hardware back button or the software back button.\n. This is not related to Prism but rather how WPF handles focus during touch on a double click (double touch).  The ListBox is keeping focus, so you have to give focus to the popup before you can close it with touch.  Change your event to MouseUp and it will work.\n. This addresses #664 and #666 \n. Thanks for the improvement and added test :)\n. Make sure you have added the correct references to all projects in your solution.  If one fails they all fail.\n. I completely agree with you, and I even tell people not to do that.  Especially when you start getting into modules and navigating between them.  I think Prism can be opinionated in this.  I can provide a sample on how to write the extension methods so devs that want to can, but they have to purposely opt-in\n. @kdawg1406 the motivation is two fold. One is to keep the current navigation consistent and to eliminate any confusion between how NavigateAsync(\"VIewName\") and NavigateAsync<TViewModel>() works in combination with the registration methods RegisterTypeForNavigation<TView>(\"ViewName\") and RegisterTypeForNavigation<TView, TViewModel>.  This has been a source of confusion a number of times.\n\nThe other is that this coupling is discouraged and this type of navigation is not present in any other Prism platform (back to consistency).\nNavigateAsync<TViewModel> was added early on before the code base really matured, and now it is becoming clear that it should not be there.\n. @dvorn yes, and no.  There was nothing specific in Prism tat allowed you to navigate to a ViewModel similar to NavigateAsync<TViewModel>, but Prism for WPF is so flexible you essentially registered your VM with a name, and then gave it a key.  But you still had to navigate via the key.\n. @kdawg1406 There is no real ViewModel first in Xamarin.Forms.  Essentially you are only using the ViewModel.GetType().FullName as the navigation key, but you are always navigating via a Page\n. @kdawg1406 to your point, the concept of navigating via ViewModels is very common, and to keep support for it would only require the addition of 3 new extension methods for registering the Views/VM's for ViewModel based navigation.  Essentially 6 lines of code, so it's not a big deal to keep it.  The only requirement would be a retraining on the registration for this type of navigation.\nSo instead of using the standard\nContainer.RegsiterTypeForNavigation<TVIew, TViewModel>()\nYou would use\nContainer.RegisterTypeForViewMOdelNavigation<TView, TViewModel>()\nMaybe that's not a big deal.\n. @dansiegel well, the problem with that is we are fixing #666 to behave as expected and eliminate the current navigation registration confusion, which essentially breaks the current NavigatAsync<TviewModel>. \nSo we can keep it, but if we do we need to provide new extension methods that allow it to be used.  Otherwise, it will be useless and unusable in its current state.\n. Here are three limitations of ViewModel based Navigation:\n- No support for navigating to views in unreferenced modules\n- No support for deep linking.\n- No support for resetting the navigation stack like you can with absolute uri based navigation\nThese are three more reasons in favor of removing the ability to navigate via ViewModels.  It's limited and inconsistent with the standard navigation pattern.\nOne option would be to remove the NavigateAsync<TVIewModel> from the API and provide a GIST of the extension methods that a developer could add to their project if they wanted t support it.\nhttps://gist.github.com/brianlagunas/40b8a7d1e25ccc64623b19f11d758171\n. @dvorn Although your question is off topic, there is no ViewModel first navigation in Xamarin.Forms.  It's not possible. Navigation is Page based.  Doesn't matter though, because you still navigate with strings/uri in Prism for XF so nothing changes conceptually wise.\n. Thanks for all the feedback. I have decided to remove it, but I will provide a GIST of the extension methods a developer could use in their app in order to add this capability as an opt-in feature.\n. @totht91 the default behavior will always be a new NavPage (scenario 1), but I am trying to think of how to make scenario 2 more easily implemented.  I think my original assumptions about navigating directly from a NavPage were wrong.\n. So I am thinking of adding an interface similar to:\npublic interface INavigationPageOptions\n    {\n        bool ClearNavigationStackBeforeNavigation { get; }\n    }\nIf the NavigationPage or it's ViewModel implement this interface, it can control the behavior of the navigation when navigating directly from the NavPage.\n- Return True and the NavigationPage will call PopToRoot and replace the existing Page with the target Page being navigated to (this is the current behavior)\n- Return False and the target Page will be added to the NavigationPage's existing NavigationStack using PushAync. \nThoughts?\n. No.  This is not discoverable and is very prone to bugs.  The behavior of a NavigationPage should not be dynamic or change.  It should be decided based on application flow during the design process.  This is a position I have taken as guidance.\n. This is not good either.  Now we are starting to break standard design principles.  The NavigationParameters has one job, and we do not want to start placing state that manages the behavior of the navigation service in a very specific scenario onto the NavParams class.  Also, this nav params class is going to be cross plat as soon as I can get into UWP.\n\nyou're saying if I make a custom navigation page  MyNav1  that I can't decide to clear the stack in one instance but leave it alone in another\n\nNo, that's not what I'm saying.  That's why you use an interface.  You can provide logic to control the result of the ClearStackOnNavigation property.  Having said that, I personally would not do that as that could be a source of bugs in the app.  I would recommend having two diffferent navPages. One for each specific scenario and use the navPage you need when you need it.  If you needed it.  I haven't run into any apps that would require that behavior.\n. If you call Pop from the previous page, you will not get the behavior your are expecting.  Navigation always has to happen relative to the current page.  The reason you get an error about the modal stack being empty is because Xamarin treats the MainPage separately from the Model stack.  So you may have two pages (MainPage and a PopModalAsync). When you call Pop your modal stack is now empty even though you still have a MainPage.  This has been fixed in the latest Prism code base, but the NuGet hasn't been updated yet.\n. I am actually leaning towards removing this altogether and noting it as a breaking change in the next major release..  I should have personally tested this thoroughly before excepting the PR, and that was my fault.\n. @bartlannoeye The real motivation behind this is that in Prism for XF, AutowireViewModel is required in order to get the INavigationService injected into the VM.  This is because in XF, navigation is based on the specific Page instance, so we must have an instance based nav service.  Besides this, it really is extremely rare that you would not want a VM for a Page.\nThis change would be considered a breaking change, and a very difficult to debug change if you by chance have a Page that is not using AutowireViewModel. Though honestly, I'm not sure how prominent that scenario would be.  It is also inconsistent with WPF and UWP (for now).\nI guess the big question is what is the benefit of doing it automatically vs. requiring the attached property?  Is it worth the change?  Does it make it easier to use Prism for XF, or is it a source for more problems?\nI'm really on the fence on this one.\n. There is no Designer or concept of \"DesignMode\" in Xamarin.Forms.  I don't know of anyway to detect this currently.  I would have to research this.\n. No, Rasmus said he blogged about ViewModelLocator, not swapping out VMs with a Design VM at design time, and a different VM at runtime.  You should play around with your idea and let me know what you find.\n. I don't know own either. I haven't tried this before.  Please keep this thread focused on just the original issue.\n. So I did a little research and it seems that currently, I can't determine the difference between the AutowireViewModel property being set to false and not being defined at all.  Unlike in WPF where we have UnsetValue to determine if an attached property has been defined on an object, Xamarin.Forms does not have this value.  So I cannot check if it has not been defined, or just set to false.  Because of this, I have to continue to require the manual addition of the property.\nWhat I could do is change the data type of the AVM property to a Nullable and set the default to null.  Then I would know if it was set to false or not defined (null).  But, I'm not sure what impact this would have on current apps if any.\n. By the way, I am leaning towards adding this feature since it really is core to the guidance Prism for XF provides.  I need to decide by next week as I plan on releasing Prism 6.2 as stable :)\n. This currently not supported.\n. Actually, in the latest Prism for Xamarin.Forms pre-7, this was removed.  But don't worry, it' just an extension method.  You can create your own extension methods to get this functionlaity.  You extension methods should use the ViewModel FullName as the resgitration key, and then use that same key to navigate to.  Use this as a guide, but modify it to work with WPF:\nhttps://gist.github.com/brianlagunas/40b8a7d1e25ccc64623b19f11d758171\n. This is something that I have not looked into yet.  I'm not sure exactly what the benefit would be since the features available in the Prism.dll is really geared towards XAML platforms.  I would need to dig into this further, which is going to be a low priority for me right now.\n. Great discussion guys!  I think based on the comments in this thread, Prism isn't ready for consideration of .NET Standard.  I'm going to close this until .NET Standard evolves more and a benefit is more apparent for making the transition.\n. Nothing will happen until .NETStandard 2.0.. Done!. Why exactly does an  Async method have an option to run sync (executeSynchronously)?  Wouldn't devs just use the normal Raise method instead?\n. I'm concerned about the addition of this property to support a very specific use case.  My gut tells me this type of behavior should be handled in application code, not in the Prism API.  In application code you would determine if you should call Raise or RaiseAsync.  It feels wrong to have an async method have a parameter to execute it sync just to support a single use case.\n. @dvorn If your app requires this, then you write your helper method to perform the action you require and you don't duplicate code in your app.  But this is an app requirement and does not belong in the Prism API\n. > I already have this in my application\nGreat, that is where it belongs.\n\nIf you continue your reasoning, you end up with the Prism is not needed at all - developers can write all the code by themselves\n\nTechnically they can now, but that's a lot of code to write.  There must be a balance between providing a helpful framework, and keeping clear and succinct API.  Adding that parameter is just bad API design.  I cannot accept this PR if that parameter is there.\n. I am removing RaiseAsync form the Prism API. See #858 . The DirectoryModuleCataglog does not recursively search the directory tree.  You need to either specify which directory you want o search, or create a custom catalog that does what you want.\n. Also, you're expecting a parameter, but your aren't defining a command that takes a parameter.  You are using a simple DelegateCommand and not a DelegateCommand<T>  If you want to use your CommandParameter for the CanExecute logic, you need to be using DelegateCommand<T>\n. @dvorn I was going off of this snippet that @opcodewriter provided:\nRunItemCmd = new DelegateCommand(\n                        () => { ... SelectedItem ...  }, \n                        () => SelectedItem != null)\n            .ObservesProperty(() => SelectedItem);\n@opcodewriter ObservesProperty behaves exactly as it should.  It simply calls DelegateCommand.RaiseCanExecuteChange when the INPC of the specific property is invoked.  That's it.  So when the SelectedItem property changes, RaiseCanEecuteChanged is called for the command, and no parameter will be passed because this was not raised from the UI.\nMy question to you is why are you using ObservesProperty in the first place if you are using the CommandParameter to pass your state to the CanExecute?  You should only be using ObsrvesProperty if you need to call RaiseCanExecuteChanged in response to the value of a VM property being changed.\n. The code snippet you provided will have absolutely no impact on whether CanExecute will be called or not. \n<ListView Name=\"LV\" SelectedItem=\"{Binding SelectedItem}\" ItemsSource=\"{Binding Items}\" />\nThis is what causes it to get called.  When you make a new selection in the LV.\nSet a break point on CanExecute.  When you make a new selection in the LV, the SelectedItem is updated, and the CanExecute is called.\n. Do you have a sample that demonstrates the issue?  It works perfectly for me.  When I make a new selection, SelectedItem is changes, INPC is invoked, and CanExecute is then called.\nObviously we can't control anything that ButtonBase does, and honestly, I don't think I agree with that behavior.  I don't think the CanExcute should be raised if the CommandParameter changes.\n. Yeah, that's probably a good idea.  I never thought of it.  I was just trying to get the packages out the door as quickly as possible.  For the next releases I'll be sure to tag them.  Thanks for the suggestion.\n. Well we know that it does exist:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Properties/AssemblyInfo.cs#L40\nVS has always had issues with the interactivity stuff.  I am hoping ot ease this pain in the next Prism for WPF release next week.\n. > I do not expect that anybody's code may be broken by the fix.\nObviously we can't rely on this :)\nThis is a scenario I'm not we want to support out of the box.  There should be very few scenarios when you would do this, and I have never had to do this personally.  I'll have to think about this.  This may just be a \"how to\" in the documentation.\n. Only if you are relying on implicit templates to represent your View which I would never recommend.  That's slow as hell and introduces a number of other development pains.\n. Yeah.. the doc snippet you pasted doesn't point out anything ground breaking.  Using implicite data templates for your apps primary views is extremely slow in WPF.  I would never do this in any WPF app I build.  That's just my opinion.\n\nIt allows to run complete user scenarios with real view models in acceptance tests\n\nYou can do this with view first or VM first.  The view approach should have no impact on testing your VMs.\n. > this change does not affect existing code and view-first scenarios. \nWe need to verify this and cannot assume.  There are many scenarios around regions and scoped regions (View and VM first).  We also need to determine the performance impact we are introducing my complicating the logic.  This may seem like a simple change, but we must do a proper review before making this change as it touches a stable and very important aspect of the Prism code base.  This is a high risk change that I am not in a hurry to make.\n. There are also a number of ways to solve this.  This is also another good approach http://southworks.com/blog/2011/11/10/regions-inside-datatemplates-in-prism-v4-using-a-region-behavior/\n. This is not supported out of the box.\n. Please also provide unit tests\n. I have decided not to support this out of the box in the framework.\n. Thanks for the suggestion, but this is not going to happen.\n. the destination has to know how to parse the expected parameters. If you are not standardizing on how you pass parameters, then you make this a little more complicated for yourself.\n. @toadzky technically you can use NavigationParameters in deep linking, but the result will still be a string.\nYou could just standardize on using strings then.\n. You need to wrap your pages in a NavigationPage in order to get a navigation bar\n. That's not possible.  The View and VM are created first, then navigated to which will then give you access to the parameters.  You cannot navigate to something that doesn't exist.\n. There is no Navigate anymore.  Essentially, you would have to prevent the view from rendering until your VM has been navigate to, which isn't something you can do off the top of my head.  My sample is so simple in the video, its possible it just happens so quickly you don't notice it.  You can't update a UI element from a binding unless the view has been created and initialized.\n. This addresses #679 \n. That's why you should use async methods that don't block UI or navigation execution.. IConfirmNavigationAsync. No, you asked about popping a page, which you would use the ICOnfirmNaviagtionAsync method. Now you are talking about a different scenario.\nYou handle exceptions just like you would handle any other non-blocking async operation. Nothing changes.. First off, you can't make a navigation decision in OnNavigatingTo. The page is not part of the NavigationStack so if you tried to navigate from there is would fail. Second, XF itself does not provide an async version of its OnAppearing/Disappearing either.  So how would you do this in a non-Prism app using only the XF APIs that are not Task based?  There is also the issue of the INavAware interfaces being called in more places than just navigating forward with a button click. There are many scenarios this interface is called where any async version would/could not be invoked causing a ton of confusion, duplication of code and a different set of threading problems.\nThe approach you described is actually a good approach. You must know your navigation path before navigating. The fact that you want to navigation to a page, create it, render it, and then decide if they should be immediately navigated to another page is a performance overhead I wouldn't want in my app.\nAs with most OSS projects, you are more than welcome to customize prism to fit your needs.\nBy the way, in your sample you were not handling any exceptions, only throwing them.. I think this may help some people: https://johnthiriet.com/removing-async-void/. Your advice not to use OnNavigatingTo is ill-advised. It may not work for your scenario, but it does work for many other apps that are in production today.\nAdd the try catch around your code in the async void method.\nI can make DoNavigation extensible.  For now, you can just copy/paste the navigation service into your app to modify it.. If you use the preview, you don't have to duplicate all that code. You can just derive from PageNavigationService and override the methods like DoNavigateAction. It will eliminate a ton of code.. I am hesitant to add these types of methods.  Besides being vey complex to implement, especially when you have multiple instances of the same view in your history, they add too much knowledge of the platform nav specifics and goes against the current goal of Prism navigation into a ViewModel.\nI would need a lot of convincing before I even consider adding these methods.  For now, if you want to manipulate the navigation stack directly, I would recommend using code-behind for that.\n. This is not something I will be adding any time soon.  First I will need to determine is NavigationParameterss will stay a Dictionary, and if it can be reused across all platforms.\n. Looks like your save code is taking to long to run.  Make sure you are running that on a separate thread to keep the app responsive.\n. What do you mean children?  What is the scenario?\n. @dansiegel if you navigate using _navigationService.NavigateAsync( \"MyTabbedPage?foo=bar\" ) then you are purposely passing the parameter to the TabbedPage and not any of its children.  If you wish to select and/or pass a parameter to a tab in a TabbedPage then you would have to specify the tab _navigationService.NavigateAsync( \"MyTabbedPage/TabA?foo=bar\" ) .  We cannot change this behavior.\n. I also want to clarify for everyone on this thread that this behavior really is not a navigation action, but rather a change of the selected page in a MultiPage.  This is one reason I am hesitant to use the term 'navigation' in this behavior as it's not really navigating.\n. @powerdude Possibly, but once you do this you break the navigation pattern.  You can no longer control which page gets what parameter.  Also consider deep linking scenarios.  Parameters should be passed explicitly to the target.  Also, once you do this here you must revisit NavigationPage and MasterDetailPage, etc.  Now the logic becomes more complicated.  This is a can of worms I don't really want to open right now.\n. Just an update for everyone.  The reason this is taking so long for me to look at is because I am heads down recording a new Pluralsight course on Prism for Xamarin.Forms.  This, plus my day job, leaves me little time right now.  I'll check this out as soon as I can.  Luckily this is something that you can add to your projects until it is added to Prism.\n. this has been implemented via #888 . You can either wait until we get the base behavior infrastructure in place, and update this PR later, or close this PR and wait to update your PR then resubmit.  Also, I think we would like to avoid the event args converter and use a parameter path if possible.\n. I am almost leaning towards naming it InvokeCommandAction just to align with WPF, since it is the same thing, but I prefer the EventToCommand name.  Better yet, I may just rename the WPF version to EventToCommand :)\n. So I finally started looking at this, and I have a couple of thoughts going through my head.  First, we have this same type of behavior in WPF, except it's called InvokeCommandAction.  In WPF, you can assign multiple InvokeCommandActions to an event.  Then I started thinking, wait, I am sure this has already been written, and then I found David Britch's Behaviors for Xamarin.Forms that does this exact same thing.  \nhttps://github.com/davidbritch/behaviors\nWhy should we include it in Prism, if it is already available in another package?\n. Well I'm not sure that's a strong argument.  Another argument is that everything shouldn't be in one assembly, instead these should be separated out into another assembly and I can chose to bring them in is I want.\nPlus, I was trying to point out the limitations regarding EventToCommand vs. the new implementation of the concept in the link I provided.  Essentially EventToCommand has been replaced with a much more flexible and feature rich solution similar to that of WPF.\n. Alright, I have decided that we will keep it simple and only provide a simple EventToCommand behavior.  I don't want Prism to become a do everything framework, so if anyone requires a more custom implementation to execute multiple behaviors for the same event, then they will need to use their own implementation or an existing OSS behavior framework such as David's.\nCan you please fix the merge conflicts and get the PR building again?. This has been merged via #888 . For now let's remove the splash screen from the android projects. I'm not really happy with the design of it.  Better just to keep it \"stock\" for now.\nWe probably want to add an empty implementation of IPlatformInitializer.\nAlso, I think the new Xamarin.Forms templates have been updated with support for FormsAppCompatActivity.  Let's compare what we have to the new XF templates and see if we can simplify our implementation.\n. Also, hold off doing any rebasing or new templates.  I am updating the Template Pack now so I can release an update and start recording my pluralsight course :)\nAfter I have got all the Template Pack updates made, we can start moving forward here\n. I do not want to complicate the structure of the project templates.  It is easy enough to rearrange projects in a solution to meet the developers desired layout.\n. This is actually a good catch.  How about a PR?\n. Pull Request.  It means you fix it and submit your changes so everyone can benefit.\n. Also, I'm not sure why this was added to DelegateCommand in the first place.  I think there should have been a DelegateCommandAsync too, instead of trying to get the existing DelegateCommand to act in an async manner.   I'll see if I can ask Microsoft about their thinking when they did this.\n. @dvorn great insight!  We will consider it by design.\n. To use the async version of DelegateCommand use DelegateCommand.FromAsyncHandler\n. This issue is not unique to DelegateCommand.  You should add exception handling to your code.\n. @dbeavon An exception should never crash an app.  All exceptions should be handled and logged accordingly.  Working with an ICommand, be it DelegateCommand, RelayCommand, or your own custom command, is no different than working with an even handler in code-behind.  Event handlers are void, and when you run async/await code in an event handler, you must have proper exception handling.\n. Let's address this first guideline of async/await; you should prefer async Task to async void... The exception to this guideline is asynchronous event handlers, which must return void. This exception includes methods that are logically event handlers even if they\u2019re not literally event handlers (for example, ICommand.Execute implementations).\n. I'll add that I think the original Prism team made a poor design decision trying to stuff async/await support into the existing DelegateCommand.  I would much prefer to see a separate AsyncDelegateCommand that is responsible for async/await scenarios.  Or even possibly adding a new IAsyncCommand interface to DelegateCommand.\n. @dbeavon I'm not here to discuss how to manage exception handling in apps, but rather to determine how we could improve Prism to address this new concern with the introduction of async/await.  I made some suggestions above.  Did you give those any thought?\n. Honestly, I'm not sure how to go about this without breaking someone.  I don't like the current design of DelegateCommand, but it is one of the most used classes in Prism.  I will have to really think about how we can modify DelegateCommand to do what we want, and also the possibility of introducing a new AsyncDelegateCommand.\n. @dvorn I have to make changes to the DelegateCommandBase class.  I am playing around with removing the Task Execute, and just have the ICommand.Execute instead.  This will create parity between the way the command is invoked via code and a binding.  DelegateCommand redefines a number of methods.\n. @dansiegel Yeah, this is just a real big pain in the ass. I'm not sure how I can make the necessary changes without breaking something.\n. @Emasoft Just so you are aware, this is not a \"fatal flaw\".  This is the nature of async/await.  Commands by nature are not async, and do not support async/await.  No other framework even has this concept.  Also, exceptions being swallowed is only an issue if you are calling DelegateCommand.Execute manually in code without awaiting it and this is not an issue when data binding to the DelegateCommand.  This really comes down to understanding how async/await works and how to properly handle exceptions in a multi-threaded application.\n. I think you are over complicating things a bit.  Just make you method a Task and test it directly.\npublic Task DoWork() { }\nYou command can invoke it with:\nvar command = new Command(async () => await DoWork());\nNow test your DoWork method directly.  Easy :). You can use the INavigationPageOptions.ClearNavigationStackOnNavigation to control how the NavigationPage pushes pages.  Implement this on the View or ViewModel.\n. You need your NavigationPage to implement this interface.\n. You don't need BindableBase if you are using Fody\n. This is not something we are looking at anytime soon.  @briannoyes has a design in mind that we will get to one day. Closing this for now.\n. Was your VM created on a separate thread?  I'm not sure why this would happen, and even then I don't know why this would work in 6.1 and not 6.2.  The only change made was to use the SyncContext in 6.2 so that you could raise CanExecute on a separate thread.  Can you provide a simple sample that can reproduce it?\n. Thanks for the PR, but this is not something we want to add to the NavigationParameters class right now.  I am actually looking at consolidating the NavigationParameters class from WPF into the Prism PCL, but this can't be done until UWP is sorted out.  This would also involve making a breaking change.  So for now, we are not adding any methods like this to NavigationParameters.\n. I'll have to look into this.  The DelegateCommand was originally created by Microsoft, and it has been this way since it's creation, so I am hesitant to change it.  I will see if I can find out the thinking behind why they did it the way they did.  If anything, I think you should be deriving from DelagateCommandBase.\n. Right!  Hmmm.... not sure how to take this one.  We can't remove the virtual, because I'm sure there is someone extending the DelegateCommand by overriding this method as-is.  Maybe just leave this as by design and call it done.\n. I almost want to completely rewrite the DelegateCommand, because it seems too overly complicated to me.  They even mixed Async verison in the same delegate command, but required the use of a static factory method to create it.  I would prefer to have a DelegateCommandAsync or something instead, and simplify the current DelegateCommand.\n. I'm closing this as \"by design\" since this was the decision by the original authors of Prism.  I will talk with @briannoyes about what to do here.\n. The recommendation is that custom commands should derive form DelegateCommandBase\n. As @dvorn pointed out, this is probably something that should remain as-is.\n. The modularity is not fully baked.  I have more design work there before I can call it complete.  Feel free to use an extension method for now.\n. I cannot duplicate any of these issues.  Make sure you have your resources available when you try to use them.  This is not related to Prism, but rather it is something in your Xamarin.Forms application.  I suggest using the Prism Template Pack to create a new project to get you going in the right direction.\n. Thanks for the fix\n. Thanks for the PR, but this is not something I believe we should add to Prism at this time.  Next time I suggest opening an issue to discuss your ideas before you spend the time submitting your PR.  I know your time is valuable, and I don't want you wasting it on something we won't add to Prism.\n. We will not be adding any new MEF support to Prism.  What we have is all there is going to be.\n. There are a number of other containers that are supported by their respective teams that Prism already has NuGets for.  MEF2 is not an IoC container.  I will not be adding MEF support to the official Prism library, because I do not want to support it and I do not believe it should be used for internal dependency construction.  You are more than welcome to create your own MEF2 extension project on GitHub and publish it to Nuget under your project name.  You can use one of the current IoC implementations as a reference. I am sure your community will appreciate your contribution.. We really haven't touched UWP since we ported it from the original MS P&P team.  It is my lowest priority.  Xamarin.Forms already has a number of IoC containers supported.  You can check out the documentation to see what is support right now.\nhttp://prismlibrary.readthedocs.io/en/latest/NuGet-Packages/. Thanks for the PR, but like I said in our dicussion, we are not adding support for MEF2\n. Closing this as this is not a Prism issue.  Feel free to continue the conversation even though the issue is closed.\n. Thanks for the update.\n. This is a known limitation of the Xamarin.Forms API and is also a duplicate of #634 \n. I'm tired of waiting on Xamarin, so I am working on my own solution.\n. Windows phone is no longer officially supported.  Not even Xamarin provides templates for Windows or Windows Phone 8.1 anymore.  I would suggest not creating an 8.1 project because it's end of life is very near.. Yes, it works. When using the hardware/software buttons only the OnNavigatedFrom and OnNavigatedTo methods are called.. I don't know what to tell you.  It works perfectly for me.. I'd use Unity over Autofac any day, but DryIoc is a good option too.. Did you actually test this, or are you guessing?  Why don't you just add the behavior in your navigationPage ctor?. That would probably be a good thing.  I am actually working on abstracting the page behaviors out of the navigation service and into an IPageBehaviorFactory to make it much easier to add new behaviors.  Feel free to submit your PR, and I will take it and apply it to my refactored version I am working on now.. Thinking about it, it's really weird that it didn't work.  Since the NavigationPage is in the inheritance tree the \"is\" check should have worked.. But the IconNavigationPage is a NavigationPage. @jacksonveroneze As you can see, this issue has been closed as fixed.. This looks pretty good at first glance.  Do you now of any breaks this will cause, so we can document them in the release notes?\n. The fluent API suggestion to inject functionality into the DelegateCommand internals in not something we would add to the public API.  DelegateCommand is just a simple ICOmmand implementation.  If you need something more complex, you can just create your own ICommand implementation.\n. Just so everyone knows, I have decided to remove the Async stuff from delegate command.  IT serves no real purpose except in the rare cases in which you call a command manually, which should not be very often.  I will be marking it deprecated at first.  Then removed in a later release.  Then we can fix the DelegateCommand altogether.\n. That is not a valid scenario that constitutes having an Async delegate command in Prism.  That is a very rare use-case.  Also, the commanding framework in XAML does not call the Execute method in an async manner.  It simply calls ICommand.Execute.  There is no mass benefit of having DelegateCommand try to behave in an async manner.  All this does now is break everyone's current code that is in the command.  Valid exception are swallowed even though they are synchronous.  The good news is that you will still be able to have your own custom implementation that does this exact same thing.\n. I am unable to reproduce this issue.  I wrote two unit tests and even ran a sample app and was not able to duplicate.  Do you have a sample that can demonstrate this issue?\n. I'm closing this as I could not verify it.  If you can provide a sample I will take a look.\n. A CarouselView is not a Page, but rather a control on a Page and therefore will not receive navigation events.\n. I'm sorry, but this GitHub project is targeted for the Prism Library.  For Template 10 question or regular UWP platform questions you stick with SO, or other forums.\n. I'm sorry, but please continue to use StackOverflow for questions like this and keep GitHub for Prism issues (bugs) and feature requests.\n. I'm comfortable making those methods protected virtual.  However, I will not be adding CreatePageFromSegment to the INavigationService as this will expose a Papge object via ViewModels, and it will clutter the API with a method that has nothing to do with the public API related to navigation.  We could possibly create a new INavigationServiceImpl interface with those types of things, but I'm not sure if that would help you or not, because I'm not sure I would have INavigationService implement INavigationServiceImpl or not.\n. Were you going to prep a PR for your suggested protected modifier changes?\n. Fixed with #766 \n. Not until the behvaior stuff is nailed down\n. I won't have time for a pre-release anytime soon.  This is not a blocking issue.\n. I did intentionally leave this out because during my initial attempt at supporting this, I found managing the lifetime of the objects too complicated.  I could not detect when the instance property was set to a new instance and therefore unhook the previous and hook into the new instance.  Not to mention, what happens when you start trying to do Person.Address.Street.  So by adding this we are also opening a can of feature worms.\n@briannoyes, or anyone else for that matter, if you have any ideas to simplify this I would love to hear them.\n. I think you are trying to turn the ObservesProperty feature into something is was not meant to be.  It is not meant to be a generic observer that can observe anything passed in.  It is meant to observe properties that have been defined within the VM.  If you want to just observe anything, then there are other observer patterns available to you.\nBecause the Xamarin.Forms Button class does not raise ICommand.CanExecuteChanged when you click on it.  Actually no button in any XAML platform does, and it probably shouldn't.\nThose lambas are needed in order for the DelegateCommand to work.  And that variable is readonly because it can only be set once.\n. Just an update.  Support for nested properties has been added in the latest code base.  Should be available in the next major release. Not sure.  We are working on a number of large features including .NET Standard support.  I also have some travel coming up.  Hopefully a couple of months.  We will be releasing previews more frequently though.  So keep an eye out for those.. If you have a default value, then it will be displayed until the underlying data has been changed in the OnNavigatedTo.\n. First, you should upgrade to Prism for Xamarin.Forms 6.2.  There is no longer a bootstrapper.  Better yet, just install the Prism Template Pack from the Visual Studio Gallery, and use it to create your project.\nhttps://visualstudiogallery.msdn.microsoft.com/e7b6bde2-ba59-43dd-9d14-58409940ffa0\nWhy not just load your data in the INavigationAware.OnNavigtedTo method?  Also, you can still have async code run in the ctor, you just have to use a different approach that doesn't use async/await\n. Thanks for reporting this.  As it turns out this is not an issue with Prism, but rather a bug in Xamarin Forms.  I have submitted this bug to Xamarin and you can follow the status here:\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=44115\n. @hardcodet This is a known issue and has already been reported to Xamarin\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=45978. The only work-around is don't deep link. Unfortunately, this is a bug that has not been fixed by Xamarin.  You could try a trick to where you add INavigatonAware to the Page/ViewModel, and in the OnNavigatedTo of the Page to set the Title to the correct text.. Worth a try.. Fixed!. Sorry for the late reply. I am traveling.  This is an interesting scenario.  Let me think about this.\n. Thank you everyone for helping with this.  It seems there has been no response from @mrkhangtran on the comments and questions from the community.  I am closing this, as I am assuming this is related to @dansiegel suggestion of #712.\n. @Hedego sorry, but this is the Prism GitHub, not MvvmCross.  You should probably ask the MvvmCross community for help.. you need to set the WindowStyle property to a style that targets the Window type and set your properties accordingly.\n. There is no way to find the cause of this issue if it cannot be reproduced.  The only thing I can think of is if the user is not an admin on the machine and the modules are being loaded from a directory the user is not allowed access too.  Like you said, it works on every other machine yo tried.\n. Prism does nothing different than an plain XF app except abstract away the framework so it can be used within a VM.  I would tend to agree with @leo-mck .  I do not believe this is an issue with Prism.\n. This is so that your platform specific services can utilize the services from the PCL.  All navigation then occurs after all types have been registered so that VM's can utilize all services with no issues.  This tells me you are trying to resolve an instance of a service before all types have been registered.\n. You would use the IPlatformInitializer to register your types in the specific platform projects.. Why are you resolving objects and setting properties in a method meant for registering types?  Set your properties in OnInitialized after all your types have been registered. Also, only set properties if you need to use them in the actual App.cs.  If you are creating them just to pass into a ctor of a class to create, you're doing it wrong.  Use the DI container to your advantage.  As long as all of your types are property registered, you do not have to manually pass in any of the dependencies at all.  The container will create them for you, no matter how nested the dependency tree is.  You should rarely have to call Container.RegisterIntance.. I personally never use RegisterInstance to register singletons except in rare cases.  I would always recommend using RegisterType<TFrom,TTo>(new ContainerControlledLifetimeManager());  That also registers objects as singletons and is lot less work than manually creating objects and passing in parameters via the ctor.  I always use Container.Resolve to create the objects and not manually new them up.\nThough you do bring up a good point regarding the direction of dependencies.  After thinking about it more, I believe the IPlatformInitializer.RegisterTypes should be moved before the PrismApplication.RegisterTypes since the PCL will be using types from the platform project heads and not the other way around.  This will be an easy fix for the 6.3 release.. @dersia no, you must call InitializeComponent in the OnInitialized method right before navigating. Essentially, you will not be using the ctor of the application in a Prism application.. This is an unorthodox way of handling an exception from a Notification.  I have honestly never seen this approach before and would not recommend it.  This is not something Prism will support as it is not a recommended pattern to implement.\n. I have no idea what could be causing that, and without the ability to repro the issue I am not sure what else I can do for you.  Try this post, maybe it will help.\nhttps://blog.mastykarz.nl/installed-visual-studio-extension-doesnt-work/\n. Glad you go it figured out.  VS can be a pain sometimes.\n. I'm confused on what you are trying to achieve here.  What issue did you run into that resulted in you submitting this PR?  If you want to change which logger is used, you  simply override the CreateLogger method and that is automatically registered with the container after the container is created. So whenever you request the logger form the container in the IPlatformInitializer, you will get the correct logger from the container.\n. what do you mean by \"explicitly reset the logger?  This is the exact same approach taken in WPF and there has never been any request to change it.  Is this an actual issue, or is this more of a \"I think this may happen\" type of issue.\n. So you are using a logger that is created on the platform (Android, iOS, etc), and need to use that logger from the PCL?\n. What if we just moved the initial call of CreateLogger?  Maybe the new process is something like this:\nCreate Container\nConfigureContainer\nCreateNavService\nResgiterTypes\nplatform types\nCreateLogger\nInitializeModules\n. Hmm.. yeah, we need it there.  Well, if you register a ILoggerFacade in IPlatformInitializer, then that will be used for everything going forward.  The registration should override the first registration.\n. Oh, now I see!  Every where in the app would use the new logger except the App, because the App.Logger property is still using the original instance that was created.  I hate having to set it twice.  It seems like a hack of sorts.  I am sure we can come up with another way.  At least I hope we can :)\n. What type of logger is required to be created in the platform project and can't be created in the PCL?  Is this common?\n. What if we added a new method to IPlatformInitialzer to provide a logger?  Then instead of adding all the code to the PrismApplication classes, we rely on the initializer to provide it.  Granted we are still setting the logger again, but it keeps the code a little cleaner.  It will also be a breaking change.\nEither way, you will not have any of the initial PrismApplication initialization processes logged because those all happen before you reset the App.Logger with the platform version.  What are you logging after all the initialization has completed?\n. Also, I want to mention that traditionally, the ILoggerFacade was provided only as a way to log the internal processes of Prism.  Not to be used as a full application logger.  In WPF, you would always have a separate logging interface/service that you would use for actual app logging.\n. I think for now, I am going to leave this as is.  I haven't heard any other requests for this, and this can easily be handled in application code.  For example, override the CreateLogger method and in the Oninitialized method set the logger to your overridden method.. So you're suggesting moving the call to OnNavigatedTo before the page is actually navigated to?  Essentially moving the call from line 353 to 347?\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/PageNavigationService.cs#L353\n. I like the idea of an additional interface for handling the OnNavigatingTo and OnNavigatingFrom.  As for the name, this will be tricky.  Naming things are always the most difficult part of an API :)\n. How about INavigatingAware?\n. I like what you have, but as you said, this would be a major breaking change.\n. Actually, I just remembered a great explanation of possible issues with adding something like this on #704.  Essentially, the new view hasn't been added to the navigation stack when OnNavigatingTo would be called.  What happens if the code in OnNavigatingTo causes a lag or delay.  The app may not behave as you would expect and give a poor end-user experience.  Thoughts?\n. One more question for everyone.  What would be the benefit of OnNavigatingFrom?  I see no usefulness in having that particular method.  It simply gets called right before OnNavigatedFrom, with the exact same information.  I'm not sure this method makes sense to add.\nI see the usefulness of OnNavigatingTo, and even in the code it is actually called prior to navigating to a Page.\nThoughts?\n. Now the million dollar question.  Should we introduce a breaking change and add this directly to the INavigationAware, or create a separate interface and rely on that.  I think that OnNavigatingTo will be used more often for the reasons stated in this thread.  It s also early in the life of Prism for XF.  Lukcily the break is easy to fix because devs can easily re-implement the interface and they are compiling again.\nFYI, there will already be a breaking change in DelegateCommand because we are removing the FromAsyncHandler in Prism 6.3.\nThoughts?\n. To be more specific, take @joacar suggestion and make it like this:\npublic interface INavgationAware : INavigatingAware, INavigatedAware\n{\n}\n. @powerdude we will not be adding this functionality to any of the navigation methods.  IConfirmNavigation exists for this reason.\n. Okay guys... check out PR #796.  This approach makes it a breaking change.  Let me know what you think.  If we decide that a breaking change should be avoided, then I can modify the PR.\n. So I am really struggling on if I should make this a breaking change or not.  Any comments?\n. No, there will be a breaking change in DelegateCommand because I will be removing the FromAsyncHandler mess.\n. Well, since this will be breaking, should I go through the trouble of creating separate interfaces or should I just add OnNavigatingTo to the current INavigationAware interface?\n. This is a known issue.  There is currently no API available that allows Prism to respond to all navigation events, both modal and non-modal, invoked by the hardware/software device buttons in order to call the INavigationAware methods.\n. This has been fixed.\n. You need to be using the Prism for XF 6.3 Preview.  This is not available in 6.2.\n. > I got the issue \n\nNavigating from XAML is not working.\nUsing NavigateAsync is working fine.\n\nWhat do you mean?  You don't navigate from XAML with Prism.  The INavigationService is only available in the ViewModels.\n. There are no regions in UWP yet.. @bartlannoeye We should probably revert this change. I have no experience with Autofac, so I will not be able to help you.  Hopefully someone that does use autofac will step in.  Until they do, I suggest downloading the source code and stepping through the AutowireViewModel code and see if you can spot the issue.\nIt's also not clear from your code how you are storing/using the container. Is it possible you have created multiple containers?\nYou could also try to Autofac project site for help.\n. Please review this branch to make sure I didn't miss anything.  I tried to simplify the DelegateCommand without breaking anything (except for the async stuff)\nhttps://github.com/PrismLibrary/Prism/tree/DelegateCommand-Improvements/Source/Prism/Commands\n. @dvorn  good catch :)\nJust so you know, Execute(T parmater) is only used when you call the command in code against the DelegateCommand type.  When XAML invokes the command, it will always use ICommand.Execute(object parameter).  The framework will never directly call the Execute(T parameter) method.  That's the reason I removed those methods.  I wanted to create consistency in the API.  I could add tem back it's no big deal.  If I do that, if someone declares DelegateCommand MyCommand, and called MyCommand.Execute() somewhere in code, then changes the command type to ICommand (ICommand MyCommand), it will be broken.\n. What would be the purpose of that?  Regardless, the XAML framework is still only calling Execute(object param), while the developer would be calling DelegateCommand.Execute(T parameter).  Then, base.Execute is still another ICommand implementation.  I guess I'm not seeing the benefit.\n. Based on what is there now, there is only a single Execute method that is called by both XAML and code which is the same.\npublic virtual void Execute(object parameter = null)\n{\n    _executeMethod(parameter);\n}\nIf you override this method in your custom command, it gives you the exact same behavior, minus the strongly type parameter.  That is what I was meaning about the benefit of doing what you have vs. what's there.  It is the strongly typed parameter that you want?\n. I don't see a problem with adding the strongly typed parameter as you have it.  As long as it behaves the exact same when XAML or code calls it.\n. By doing this, we now have a slightly confusing API.  We have two overloads of Execute and CanExecute.\nIn the case of DelegateCommand<string>\nExecute(object parameter)\nExecute(string parameter)\nIn the case of DelegateCommand\nExecute()\nExecute(object parameter)\nNot really sure this helps a whole lot.  Maybe I am missing something.\n. Execute(T parameter) is just a helper method for strongly typed parameters when calling in code so you don't pass an invalid type.  XAML doesn't care about this and only uses Execute(object parameter).  If you override Execute(object parameter) you are not blocked from adding any custom logic in your derived command.  I pushed an update to the branch.  Check it out.  I cleaned the API up and not show the duplicate Execute/CanExecute methods (made them protected).\n. Crap, you're right!  I didn't think about that :)\n. I didn't realize how ugly this DelegateCommand was :)\n. You know... if we didn't care about that silly strongly typed parameter this would all be a non-issue.  Is it really that important?  I don't see any other command that implements it like that (MVVMLight, etc).\n. Also, as a side effect, when trying to override the Execute(T parameter) method using intellisense, a Visual Studio exception is raised complaining of duplicate methods; because of the Execute(object parameter) in the base class.  I would argue this is a worse experience.\n. And, if a developer overrides OnExecute, it will never fire when calling DelegateCommand.Execute in code.  That will only invoke with a XAML invocation, leading to another poor/confusing experience.\n. I am actually leaning towards sealing the DelegateCommand and DelegateCommand<T> classes.  Thus, any custom command should derive from DelegateCommandBase.  See the latest update.\n. All other commands are sealed, and probably for the same reason. Creating a custom command that derives from DelegateCommandBase is not difficult, and it would prevent all the issues we are trying to avoid.  You get your strongly typed Execute/CanExecute :)\n. We can't make everyone happy.  You can choose between loosing your Execute<T> which is a bad experience (and hasn't been fully tested yet), or losing the ability to derive from DelegateCommand<T> (that every other command does) which is a bad experience.  Either way, someone is getting a bad experience.\n. @hardcodet No, you're missing the point. There is no synchronous execution.  Execute is always async and needs to be awaited, even when you are writing synchronous code.  Synchronous exceptions are swallowed, and ICommand.Execute is not async, but DeleateCommand hides this implementation and makes it async.  It's broken.\n. Long running Execute functions should be placed on separate thread as to not block the UI.  I will not be adding an async command to Prism at this time.\n. Honestly, I don't think an async command will ever make it into Prism.  After DelegateCommand is fixed, I will have to get a pulse from the community about it.  To me, it doesn't make sense.\n. @Sockenfresser \n\ntest that shows that it has a bug regarding exception handling is wrong in it's posted form\n\nNo, it's not.  DelegateCommand has been functioning as synchronous since it was first created.  When the async stuff was added it broke every single dev using DelegateCommand and they didn't even know it.  DelegateCommand is a primarily sync command, as is ICommand in general.  Sync code is broken with the current implementation.  In your modified test, you had to add an async context to make it work.  This is wrong.  This should not be needed for a default sync command.  There should be no consideration of handling a Task, and the XAML framework doesn't even consider a Task.  Right now, DelegateCommand behaves differently depending on if it was called from XAML or in code.  Its behavior is inconsistent.  Even if you call it in code, if your property is defined as ICommand and not DelegateCommand, it behaves differently.  FromAsyncHandler is misleading, does not work as expected, breaks sync code, creates an inconsistent and confusing API as well as behavior.\nICommand is not async, and is never called as async.  Trying to make it behave as async makes no sense just for the sake of supporting the async/await feature, and introduces nothing but problems.  There is a reason that no other framework provides an async command.  Commands are not meant to behave async.  If you need to use async/await in a command delegate, you would just use async void as you would with am event handler.\n. @toadzky I'm not using semantic versioning at this time.\n. @spasas Thank for the suggestion, but I am not looking to add to the API surface of DelegateCommand.\n. > Proven Patterns and Practices for predictable results\n@feinstein this has yet to be proven.  When the XAML platforms add native support for async commands, I will add it.  Until then, you can simply add Cleary's approach to your application.\n. I just checked in another approach. @dvorn check it out and let me know your thoughts.. @dvorn yeah, I am still playing around with the value type thing.  I think I am going to remove the Action/Func's from the DelegateCommanBase, and have each command responsible for their own delegates instead of passing them around.. @dvorn check it out now.  What do you think of this direction?  I will worry about the value type thing later.. To handle the null Value Type issue, I think I am going to just throw a Debug.Assert instead or preventing the use of Value Types.  No other command restricts the use of value types, and they don't seem to have any issues.  I just need to figured out if the WPF framework passes null at anytime during it's initialization that is not controlled by the developer.  I personal have never run into this.\n```\n        protected override void Execute(object parameter)\n        {\n            Debug.Assert(parameter == null && typeof(T).GetTypeInfo().IsValueType, \"You have defined a ValueType for your paramater, but are tyring to pass null.  Fix your code!\");\n        Execute((T)parameter);\n    }\n\n```. WOW!  Okay, we'll just have to leave the restriction of Value Types in there then.  Other than that, does everything else look goo to you?. Alright, this has been merged into the master and will be in the next major release.  Since Prism has never been on semantic versioning, and since this is such as massive break for devs, I will move Prism to semantic versioning on the next release.... Prism 7.0.. It shouldn't come as a surprise as the preview has been out since Nov of 2016, and was blogged about and talked about in this issue as well as other forums.  I did the best I could to notify everyone.  But, of course only those paying attention would have seen the notice.\nNone the less, it no different than any other ICommand.\nvar command = DelegateCommand(Execute);\nasync void Execute()\n{\n    await your code\n}. This has been fixed. Please test v1.4\n. Thanks!  Did you test the fix before submitting the PR?\n. Fixed with #790 \n. Thanks for the fix!\n. No one is working on it, but I'm not sure that is a container that we want to add to the Prism repo.  I don't see a lot of demand for that container within the WPF community.\nAnyone else using this container?\n. I am closing this because it is not a container that we feel has enough adoption to warrant adding it to the library.  Fortunately it is very easy to add support for this container for use in your own project. \n. sounds good\n. @TaviTruman That statement is incorrect. Castle Windsor has never been an officially supported Prism container. The container you use has no impact on the Prism APIs or how you use Prism (except in the case of MEF, which isn't a container or supported anymore). Container specific samples make no sense unless you do not know how to use the container you have selected.. @dansiegel Can you play with this and make sure it is working right.  The Sandbox app has been updated to provide a simple example.  Let me know what you think.\n. This will most likely be dependent on #634 \n. I have some merge conflicts, so I am going to close this one and then create a new branch that has been rebased from master.\n. @bartlannoeye can you verify this?  Thanks\n. As you can see, there are many options here.  You could either show the login screen first, and if they login then show the protected navigation options/links.  If they don't login the user can still continue, but the protected navigation options/links won't be visible.  You could also juts use an absolute URI which resets the navigation stack, and the deep link to your intended target after successful login.\n. There was never a Prism 6.1.1, maybe you mean Prism 6.2.0 which is the most current version?  Also, this issue is not related to Prism as this appears to be a simple binding issue with Xamarin.Forms.  My Mac has stopped working so I am unable to test this.  You should start by slowing removing various bindings and see what the cause is.  Chances are this is a Xamarin.Forms issues, and should be reported to them.  I have a suspicion that is you remove the CommandParameter binding it would work.  THat's just a guess though.\n. How about a PR to fix it?\n. @dvorn great analysis!  I completely agree with your assessment.  I couldn't have said it better myself.  As you can see my answer was a result of me not having time to actually look into it :)\n. Sorry for the late response.  I am traveling in Japan right now.  I am unable to reproduce the issue you are describing.  It works perfectly for me.  I am able to change tabs of the TabbedPage that is in the MasterDeatilPage.Master.  So, it works on my machine :)\n\nTo be safe, make sure you have declared the base class on your TabbedPage just so the Container doesn't have any issues registering it:  public partial class TabbedPageView : TabbedPage\nOther than that, I have no idea why it's not working for you.\n. I do have a slack channel, but never published it publically.  I don't have enough time to monitor too many communication methods.  So I would prefer to keep it to GitHub and SO.  Unless you expect the community to monitor it itself?\n. The problem with slack is that an invitation must be sent out in order for people to join.  I couldn't find a way to let anyone just sign up.\n. Okay, I have created a new website to automate the process of signing up for the http://prismlibrary.slack.com/ channel.\nYou can use this website: https://prismslack.herokuapp.com/\nLet me know if this works.. This is because Herokuapp limits how many hits the site can have a month.  Just wait until the 1st and the limit resets :). I am not sure how common it is to need access to this information in a ViewModel.  Is this needed often across the majority of Xamarin.Forms applications, or is it needed in just a few special scenarios?  This would not be difficult to add.\n. I am implementing the following:\n```\n    public interface IDeviceService\n    {\n        TargetIdiom Idiom { get; }\n    TargetPlatform Platform { get; }\n\n    void BeginInvokeOnMainThread(Action action);\n\n    void OnPlatform(Action iOS = null, Action Android = null, Action WinPhone = null, Action Default = null);\n\n    void StartTimer(TimeSpan interval, Func<bool> callBack);\n}\n\n```\nNothing else looked like it would make sense.  Thoughts?\n. OpenUri does not make sense because Prism has it's own INavigationService that you should use to open a URI.\nOnPlatform is in the Interface I pasted above.\n. You can review PR #809 \n. Sorry, I missed that one.  Please check it again :)\n. This is to address #793 \n. I'm a little concerned with using IDisposable. I'm not sure this if could cause issues if the framework tries to also call IDisposable somewhere in its lifecycle.  Maybe I should create a unique interface to support this?\n. When I get time, I might have to dig through Xamarin.Forms source code and see if IDisposable is called anywhere.\n. So thinking about it, to properly implement IDisposable requires a big of repetitive code to do it properly.  This would require more knowledge on the developers part to guard themselves from issues related to an improper IDisposable implementation as well as add a little bloat to a ViewModel. Granted they could probably just put the majority in a base class.  The purpose of this feature is to allow devs to clean up Views/Viewmodels from events and other items.  So, I'm not 100% sure we should be using IDisposable here.  I'm not apposed to it, but I am not sold on it either.  I want to make it easy and worry free.  Thoughts?\n. Any ideas on what the name of this interface should be?\n. We can't use IActive aware, because that is about activation, not cleaning up because your view/vm has been removed form the navigation stack.\nSomething like IDestroy, IClean, or IPopped\n. I'm leaning towards IDestroy.  Also, keep in mind that this will be called on both the View and ViewModel :)\n. I have also included a solution to #744 in this PR since they are so closely related.\n. No one has asked for it for WPF or UWP yet.  I wouldn't do it for UWP because I am not sure what my plans are for it yet.\n. I haven't decided.  Actually I am working with Jerry to see if we can consolidate Prism and Template10.  So it really depends on a number of factors.\n. Seems people are having issues with DryIoC in XF so I am holding off adding it to WPF or UWP.. I am getting emails and twitter questions.  Here is one app that someone is having trouble getting to work.  I haven't looked into it.\nhttps://github.com/ederbond/Toro.App. WPF now has DryIoc. I'm not touching UWP until my plan for the platform is finalized.. The Prism Template Pack has no control over how Xamarin Studio performs while loading packages.  I did notice that I need to update the package versions to the latest, but other than that there is nothing I can do.  I suggest closing XS and restarting it.\n. did you upgrade the add-in to 1.5?  Also, my Mac is down so I can't test this.  Can you download the source and debug this, then submit a PR to fix?\n. Does the template work now?\n. Working on it, but can't seem to get it to work just yet:\nhttp://prismlibrary.readthedocs.io\n. got it working.  Now just need to improve some minor stuff and write more docs :)\n. only until we get the RTD up and running.  Then I will remove the old docs repo.\n. Duplicate of #814 .\n. Can you install 1.5 and see if it works for you?\n. The OnPropertyChanged method will never get a null because it is using the CallerMemberNameAttribute.  It will always use the name of the Calling method, property, or event.  This means if you want to call OnPropertyChanged with an empty string, you have to pass it in, otherwise the calling method name will be used instead.  There are only a couple of scenarios where the default parameter of the method will actually get used:\nhttps://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.callermembernameattribute(v=vs.110).aspx\n. Calling OnPropertChanged(String.Empty) is the best approach.  It's simple, clean, does not require creating a derived class, and does not require creating a dirty API in the Prism implementation.\n. > R# rightfully complains about the call with an explicit value\nI disagree with this statement.  R# has this behavior completely wrong.  The reason a method has the CallerMemberNameAttribute is to pass default caller information and this signature requires an optional parameter.  This optional parameter allows you to override the caller information, which is to be an expected capability of a method with this attribute.\n. We do not take on the responsibility of signing dependent assemblies.  Please remove any scripts or actions related to signing DryIoC.  This is the responsibility of the author.\n. Just to clarify, do not modify any of the existing Prism assemblies. Only the new DryIoc feature related assemblies.\n. Make sure that DryIoC can automatically resolve concrete classes.  Just ran into this in Xamarin.Forms.. Thanks for taking the time to create this PR.  Your community is grateful.. We have no control over that link.  This is a bug in RTD.\n. I noticed this too. Very weird.  Seems RTD has a couple of issues :)\n. Looks like we have to get rid of the space between the # and the text.\n. Thanks for the PR, but this directory is going to be deleted.  We have created a new directory called \"docs\" which will be used to feed our http://prismlibrary.readthedocs.io documentation site.  We are now in the process of fixing all the links and issues to get it working with Read The Docs (RTD) under this new \"docs\" directory.\n. Just noticed that the corresponding XAML Page is called PrismContentPage.  Can you update that as well?\n. Perfect!  Thanks again\n. This is by design.  Navigation paths must be a valid relative, or absolute URI.  Also, never register a type for navigation with a \" \" or \"\\\" in it.\n. Once you understand that navigation is always URI based, regardless of what overload you use, then it becomes clear.\n. No, not legacy.  Navigation in Prism has always been URI based.  The benefit is clean, maintainable, testable, and extensible WPF applications.\n. It's not misleading at all, and it is very clear that it doesn't have to be an http, but can be any valid URI syntax.  There is a much bigger picture that you aren't seeing, especially considering the impacts on DI container registrations.  Unfortunately, these are concepts that cannot be explained in a GitHub thread.\n. Actually, I wrote this sample to reproduce a bug in Xamarin.Forms.  I had to reproduce it in order to submit it to Xamarin\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=45978\nWe cannot change the order in which we build the navigation stack.\n. Luckily, this is not a very common navigation pattern. So it is not a big deal.\n. Weird!  I didn't change anything.  Well... I did just get a new computer, so I bet when I built on this new machine, it changed the key.  Damn it!  I'll get this fixed ASAP!\n. I just removed the Prism.Core 6.2.1 package from NuGet until I can get this fixed.  I really don't want to have to rebuild, and release everything just to make these compatible.\n. Alright.  We figured out the issue.  After releasing 6.2, we removed the PFX and went with SNK.  This is what changed the key.  So we will be releasing a 6.3 preview this week instead.\n. This has been fixed with the 6.3.0 preview.\n. Thanks for the idea, but this is not something we will be adding to Prism.  The even aggregator is fire and forget.\n. This is not something that is high on my priority list.  I'm not sure how many more releases/websites/deployments that I want to add to my list of things to manage.  My first thought is that if you need to debug, download the source :)\n. Unfortunately VB is not in my language dictionary, and given this only happens in release mode I have a feeling its related to the .NET Native build chain.\n. I wish you would have submitted an issue to discuss adding this before you took the time to work on a PR.  Unfortunately, this is not a container we will be adding support for at this time.\n. I understand.  This is just not a popular enough container for us to take responsibility of and support.  For sure you can create your own Nuget and put it up there so all who need it can benefit.\n. @djcparker Great idea!\n. Way too many features going on in this PR, without even deciding which ones will be adding :)\n. I don't like giving too many ways of doing something and inflating an API surface.  I will review when I have a chance.\n. Can you provide more information, maybe even a sample?  The changes you made will have no impact on the actual functionality because this is not a single instance navigation service;.  Each nav service is associated with a view.  So changing this will not behave the way you think it does.\n. Also, the preview now handles the GoBack buttons, so you can remove the code in your work around.  That could be causing the issue.\n. Ahh, that's the issue then.  Having a singleton instance will cause you problems even with your changes.  If you keep your navigation paths very simple it may work for your needs, but you are messing with fire.  You cannot have a reliable and stable singleton navigation service in XF.\nAlso, the MSDN docs say \"outdated\" because it is no longer maintained by MS, but instead is now open source.  The MSDN docs say the same thing about Prism, yet here we are :)\n. We are in the middle of changing over to read the docs.  As soon as we can verify all the links and docs are working on RTD, then we will be removing the \"Documentation\" folder and updating all links pointing to the new doc system.\n. Sorry, that is a limitation of the Xamarin.Forms platform.  An absolute URI is equal to MainPage = new SomePage().\n. I would assume since the first sentience in the ReadMe explicitly states \"Xamarin Forms\", all docs reference Xamarin.Forms, the NuGet packages are post fixed with \".Forms\", and there is no mention of Xamarin.iOS, Xamarin.Android, UIKit or native UI frameworks that it would be quite clear that Xamarin is not a target for Prism.\n. If it works without your ZXing.Net.Mobile for Forms code, then your problem probably lies with code related to your scanning feature.\n. We will not be adding any type of async command support any time soon.\n. ICommand is not async, and will not be called from the XAML platform as async.  This is overcomplicating the simple concept of commanding, as well as the Prism API.  There are many ways to do async, and many existied before the async/await keywords.  The concept of an async ICommand is misleading at best.\n. Please verify memory leaks before submitting an issue on a memory leak :)\n. There has only been one verified instance where a memory leak could occur and that is when binding to a command with a command parameter in a DataTemplate, but that is a WPF issue with the automation peer holding references and not a Prism or any other framework issue.\n. Definitely something worth looking into.  I won't have time for awhile though.\n. This may also only be an issue with WPF, and not other platforms.  For example; the native Xamarin.Forms command does not use any weak handlers:\nhttps://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Core/Command.cs\nThis is why I had to remove weak handlers from DelegateCommand because they were immediately getting GC'd in XF.\n. Unless someone volunteers to look at this, I am going to close this.  I won't have time to research something that has not be confirmed and was submitted under a \"it's possible\" assumption.\n. I took what little free time I had tonight to look at this.  As I thought, there is no issue.  The WPF framework uses a WeakEventManager to hook into the CanExecuteChange notifications.  I also could not create a leak in a sample that my profiler could detect.\nDelegateCommand does not use the CommandManager.  Not only is this WPF specific and will not work in a PCL, but it also is bad practice to use it in a DelegateCommand.\n. The navigation service does work :)\nFirst off, you should not be adding any code to your Android MainActivity releated to navigation.  In a Xamarin.Forms application you handle all navigation within the PCL.\nSecondly, to wrap your pages in a navigation page you simple need to register the built-in NavigationPage, or a customer navigation page, for navigation and then simply prefix you navigation uri with the navigation page.\nContainer.RegisterTypeForNavigation();\nNavigationService.NavigateAsync(\"NavigationPage/MainPage\");\nYou will never navigate in the ctor of a ViewModel.\n. I'm sorry, I do not understand your scenario.  I would like to mention that the Prism INavigationService is not available in a XAML Page code-behind, so if you are trying to use it there it will not work.\n. The navigation service cannot be a singleton.  Navigation in XF is page dependent, meaning that each page is responsible for its own navigation stacks (both modal and non-modal).  You cannot have a singleton nav service in XF.\nAs for your other issue of \"subsequent GoBackAsync\", could you please elaborate on the scenario?  The IPageAware.Page should not be updated as the service must know about its associated page object.  Could you help me understand why you feel the IPageAware.Page should be updated and in what scenario this is needed?  Maybe even provide a sample app the reproduces your scenario.\n. No, it can never be a singleton.  This is the nature of navigation in XF.  The XF navigation is specific to a page and cannot be abstracted out into a singleton.  I will close this for now.  IF you find that you are still having the same issue with GoBack, then I will reopen.  Just let me know what you find.\n. Closing as no sample provided when requested in 2016. Might be good to also call the INavigationAware methods when the app is going to sleep and being resumed.. Should I use the INavigationAware methods and just pass the NavigationMode in the params, or should I create a new interface like IApplicationLifecycleAware with OnResume and OnSleep?  I'm not sure which direction to go here.. If I reuse the INavigationAware methods, then everytime you suspend and resume the methods will be invoked and you would have to always check the NavigationMode in order to control what code gets executed:\npublic void OnNavigatingTo(NavigationParameters parameters)\n        {\n            var navigationMode = parameters.GetNavigationMode();\n            if (navigationMode == NavigationMode.Back)\n                Title = \"Went Back\";\n            else if (navigationMode == NavigationMode.New)\n                Title = \"Went to New Page\";\n            else if (navigationMode == NavigationMode.Sleep)\n                Title = \"App when to sleep\";\n            else if (navigationMode == NavigationMode.Resume)\n                Title = \"App resumed\";\n        }\nThis might get a little annoying.  I am thinking that maybe we do not mix navigation concepts with application lifecycle events.  Instead have this:\npublic interface IAppLifecycle\n    {\n        void OnSleep();\n        void OnResume();\n    }\nThis will allow the developer to handle these specific application lifecycle events separately.\nThoughts?. Thanks for all the feedback. this has been implemented in PR #852 . See my response in #887 . Closing as Prism for UWP is no longer applicatible to the current version of Windows. We are aligning with Template 10.. I do not know anything about DevExpress controls, so this probably isn't the best place for this type of question.  I would say that it sounds like you need a custom region behavior, but hard to say based off a simple description.  I would try asking on the DevExpress forums or stack overflow.. One thing to realize is that switching tabs is not a navigation operation and would not call the INavigationAware interfaces.\nIf you want to call the INavigationAwar emethods when you first navigate to the TabbedPage, ou must include the default page in your navigation URI.\n_navigationService.NavigateAsync(\"MyTabbedPage/SelectedTab\");\nAs far as tab selection goes, we are working on solution in issue #650 .  I am closing this as a duplicate, you can follow the status of issue #650.. had to revert because the PR broke a test. Yes, I would like to see your solution.. No. When going back, the order is \nHardware/software button:\n1. OnNavigatedFrom (Source)\n2. OnNavigatedTo (Target)\n3. Destroy (Source)\nCalling GoBackAsync\n1. OnNavigatingTo (Target)\n2. OnNavigatedFrom (Source)\n3. OnNavigatedTo (Target)\n4. Destroy (Source)\nAlso, I do not want to create our own INaviagtion to replicate the XF navigation stack.  We must depend on the XF navigation functionality.  Otherwise our tests are not accurate.  If we have a custom INavigation that works properly, but the XF navigation is broken we will not know there is an issue.. I would like to greatly simplify the entire process of showing dialogs. As it is now, using the Interactionrequest is way too complicated.  It is so much easier to use a simple IDialogService.  I think we can add a new and improved implementation and just use a different name.  Maybe DialogRequest and ShowDialogAction, or something like that.  Then deprecate the old way in favor of the new way.  The new way needs to be stupid simple and not require a lot of plumbing to get it to work.. I am linking #430 into this thread to keep track of the requested scenario.. This will not make it into v7.0.  I would actually like to remove the requirement of the Interactivity dependency altogether and move to more of an IDialogService that is called from within a ViewModel.  I really hate how much ceremony is involved in creating a simple dialog with the current implementation.. This is something that I will have to think about, but the improved API will not require the creation of a ViewModel in order to show a dialog.  This is a coupling that is not recommended by Prism guidance.  Instead it will follow current established patterns within Prism.  Thanks for the link though. We may be able to use some ideas from there... What I mean is that the API will not require a ViewModel type different than the calling VM.  For example\n```\nprivate void ShowDialog()\n    {\n        var dialogViewModel = new AddTextDialogViewModel(); // NOT ALLOWED in Prism\n    bool? success = dialogService.ShowDialog(this, dialogViewModel);\n    if (success == true)\n    {\n        Texts.Add(dialogViewModel.Text);\n    }\n}\n\nOr even\n_dialogService.Show();\nInstead, it should follow the current navigation patterns such as\n_dialogService.Show(\"NameOfDialog\", parameters)\n```\nNot saying that is the API, just trying to clarify my original statement.\n. Yeah, I can see the need to register custom dialogs with the service somewhere in the module or boostrapper/Prism application class.\nI haven't really put much thought into this yet.  I have been slammed with other stuff, but this is definitely on my radar for the v7 release for WPF.\n. @dvorn That is a great idea. I  like the way you're thinking.  I'm wondering if we could just reuse the NavigationParameters instead of using a DialogResult<T>, where T is just some random parameters type.  This would also provide a better mechanism for providing multiple parameter to control window properties.\nHow ever, I wonder how we could control the dialog parent (maybe we always use the active window).  Also, I would hate to provide a mapping for each parameter to control specific properties (WindowStartupLocation, etc).  I wonder what we can do here.  Some type of implicit style?. That's what I'm hoping.. @bzuillsmith Always interested in seeing code.  How do you deal with substituting your own custom window type, or do you handle that yet?. That would be great. No hurry, I am still swamped with my day job and working on aligning modularity across all 3 platforms.. @sanekpr If you noticed, we just released our final preview or Prism 7.1. More testing is needed for WPF before we can release. Since the community is not providing much feedback on our previews, it places that testing on the team which takes much longer. It would be great if you started testing the latest preview in your applications and let us know if everything still works :). @steji113 no.. @DanoPTT I'm not sure I understand the question. Any new dialog service will not interfere with the parent view loading. I've started working on an initial attempt at a new DialogService that does not rely on any interactivity references.\nYou can check it out here: https://github.com/PrismLibrary/Prism/tree/Interactivity-Improvements/Source/Wpf/Prism.Wpf/Services/Dialogs\n@dvorn what do you think of this direction?. I'm closing this as I have created a new issues specifically for the new IDialogService. See #1666 . Thanks for the PR!. Closing this since it was fixed in PR #1019 . Unfortunately, this is not a Prism related issue.  Prism has no control over toolbar placement or how Xamarin implements this feature.   I will say that according to their documentation, you can set it in XAML:\n<TabbedPage ...\n            xmlns:windows=\"clr-namespace:Xamarin.Forms.PlatformConfiguration.WindowsSpecific;assembly=Xamarin.Forms.Core\"\n            windows:Page.ToolbarPlacement=\"Bottom\">\n  ...\n</TabbedPage>\nhttps://developer.xamarin.com/guides/xamarin-forms/user-interface/platform-specifics/consuming/\nIf it doesn't work as documented, I would consider it an XF bug and submit it to Xamarin.. You cannot navigate non-modal unless you are inside of a navigation page.  So wrap your MasterDetailPage in a navigation page, and then it will work.. If you are trying to update the Detail of the MasterDetailPage, then you have to navigate from the MasterDetailPageViewModel.. I think this feature needs a little more vetting before it is added to the official Prism API.  Can you provide a clear use case(s) with a corresponding sample application that demonstrates the feature and how it is expected to be used. . @dvorn is 100% correct here.  Which is why I was asking for more detail on what you were trying to achieve.  Based on the information in this thread, this PR doesn't not reliably provide the functionality that you were trying to achieve.. Can you add this as an issue instead of a PR?  More work needs to be done in order to support the new enum values.. I think you may have meant to add this as a feature request.  A PR would also contain the implementation with tests :). Without even looking at the sample I can probably guess that you aren't checking for the existence of a parameter before you try to read it which is causing an exception.\nYou probably have a single line of code like this: string p = (string)parameters[\"key\"];\nWhat you should have is:\nif (parameters.ContainsKey(\"key\"))\n{\n    string p = (string)parameters[\"key\"];\n}. 1. You get an exception any time you try to get a value from a dictionary and it doesn't exist. It appears to work because OnNavigatedTo occurs after navigation has occurred, while OnNaviatingTo happens before navigation occurs. Since the exception happens before navigation, it will not change pages.\n2. Yes, it is handled in the navigation service so the app doesn't come crashing down because the developer didn't check for the existence of keys before accessing them :). Closing as this has been fixed.   Will be releasing in the next preview.. The example is correct.  If you were to copy and paste the sample code and replace the region names it would work perfectly.  The sample code in no way even hints that you can set the region name via the interface.  Even the documentation above the code snippet (the one you pasted) specifically states \"using the RegionManager static method SetRegionName...\".  . The method was not obtained by the interface. It is a static method off of the RegionManager class.  I do not know how to make it more clear.  Maybe it will help if you renamed the region manager instance to something else.\nIRegionManager someOtherNameThatYouPick= ServiceLocator.Current.GetInstance<IRegionManager>();\nRegionManager.SetRegionManager(this.ActionContent, someOtherNameThatYouPick);\nRegionManager.SetRegionName(this.ActionContent, \"ActionRegion\");. Sorry, I have zero experience with autofac.  Could it e related to #875? If not, maybe someone form the community can help.. Prism.Autofac.Forms was added by the community via a PR, and therefore must be supported by the community.  If the expectation is that if I ship a DI container package, then I am responsible for supporting the functionality of the DI container, then I will delete all DI packages immediately.  I am not about to drag myself into that support lifecycle :)\nAs far as the IPlatformInitializer, yes you are using it right.  You register your platform specific classes to the interfaces that are defined in the PCL.  Though, I am not familiar with how you register types with Autofac via it's container so I can't help there.  Looking at your code, it doesn't look like that is even related because you are not trying to resolve the AndroidSqliteProvider yet.  So the issue lies somewhere else.  Possibly in just creating the view itself.\nIf you look through the issue I linked to, it leads to a code snippet that may or may not be related to your issue.  Please see if it fixes your issue:\nhttps://github.com/PrismLibrary/Prism/issues/742#issuecomment-263822188\n. What's the status of this issue?. So I took a look into this and found that it is in fact related to the issues linked previously.  Autofac does not automatically resolve concrete classes that have not been registered.  This means that the MainPageViewModel could not be resolved and was throwing an exception.  A work around is to add this code snippet as the last code block in RegisterTypes:\n```\n        protected override void RegisterTypes()\n        {\n            base.Container.RegisterTypeForNavigation(\"MainPage\");\n        var containerUpdater = new ContainerBuilder();\n        containerUpdater.RegisterSource(new AnyConcreteTypeNotAlreadyRegisteredSource());\n        containerUpdater.Update(Container);\n    }\n\n```\nThis means that this should be fixed with the next preview.\nNow having said that, I did notice that the RegisterTypeForNavigation is only registering the View and not the ViewModel.  Not sure why that was done, but we could probably automatically register the VM as well in that method.\n. There is not enough information in your issue for me to understand what the issue really is.  Is it an issue with updating the state of a page?  Your repo steps are not sufficient to see any issues.  If your issue is that the page loads and then you notice a delay in the data being updated which results in a \"choppy\" experience then this is not something you can do a whole lot about.  This is the nature of data binding.  I would recommend using the OnNavigatingTo so you can prep your data prior to the page being displayed.  It is hard to tell what the root issue is as your issue is not descriptive enough.. Yeah, that's definitely not something Prism even has access to or can manipulate.. This is a known bug in Xamarin.Forms and has already ben reported with #765. We are just waiting for Xamarin to fix it.. I have setup a slack account, but I don't have time right now to automate the sign up process.\nhttp://prismlibrary.slack.com. Actually, that might be a better option! Thanks for the heads-up.. Okay, I have created a new website to automate the process of signing up for the http://prismlibrary.slack.com/ channel.\nYou can use this website:  https://prismslack.herokuapp.com/\nLet me know if this works.. Patreon processes pledges on the first of each month. So you will you will be charged and receive your invite on August 1st.. Thanks for the PR!. @ChristianRiedl MS got it wrong.  I do not believe suspending and resuming are navigation actions.  They are app lifecycle events.  Luckily, in the latest codebase I have added a new IApplicationLifecycle interface that will allow VM's to respond to OnSleep and OnResume app events.  I will be dropping another preview within the next few weeks.\n. @markti Can you please give us an update?. I'm going to assume your issues is resolved.  If not, just let us know and we can reopen.. This is not an issue with Prism.  This is an issue with SliderOverkit.  I would suggest contacting the SlidOverkit support.. Prism region navigation in WPF does not have the concept of a hardware/software back button.  Essentially, it is not possible for the system to navigate your app backwards without an explicit call to GoBack.  If you need a parameter for your app to know which direction you are going, you can manually add it to the NavigationParameters.. Yeah, I just discovered this myself. I say we do the automatic resolution for concrete types just like we did for AutoFac. Do you know how to do this in DryIoC?. let me ask you this... is there a performance benefit to manually registering the VM like we do with the View vs. automatically for all concrete types?. Agreed!. @dansiegel well, doesn't the XF DependencyService rely on an interface the lives in the PCL, and the interface is what is used to resolve the object?. Yeah, that's weird and a little annoying.. There is a rule that says if DryIoC can't resolve the type then try using Xamarin.Forms DependencyService\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.DryIoc.Forms/Extensions/UnknownServiceResolverRule.cs\nAccording to @dansiegel, by adding the WithAutoConcreteTypeResolution it breaks this behavior.  Even though the XF DependencyService relies only on an interface and not a concrete class to resolve. . @dadhi DryIoc is completely broken for Xamarin.Forms.  It won't resolve concrete types using the WithAutoConcreteTypeResolution rule, you must register everything. If you register an XF navigationPage it completely crashes the app.  App won't even run.  I afraid I am going have to drop support for DryIoc if I can't get this to work.. * Using v2.10.1. Tried upgrading, but still didn't work.\n Exception occurs when I try to resolve a concrete type no matter what rule I add to it.  If I simply try to register a NavigationPage the app never starts, it just shows a white screen and the MainPage is never created.\n No. I don't have time to debug source.\n* No, I haven't tried that. I do not use DryIoc.  It was a contribution from the community. I am writing a VS Project Template for it to include in the Prism Template Pack, but when I create the project it won't work so I can't include it.\nI have attached a bare bones file -> new\nPrismDryIocApp2.zip\n. @dadhi Okay, we have narrowed down the NavigationPage issue:\nUnspecified how to select single constructor from type Xamarin.Forms.NavigationPage with multiple public constructors:\nVoid .ctor();\nVoid .ctor(Page)\nApparently the XF NavigationPage has two ctors.  How can I tell it that I want the default ctor?\nThe other issue with concrete types is not what it seems to be.  The person that implemented this code may have made a mistake.\nWhat needs to happen is when a View is created a ViewModel is created automatically.  When the VM is created, we want to inject a precreated navigation service into the ctor, but only if it is being asked for.  Other wise create the ViewModel and inject anything that it is asking for, or use the dfeult ctor is it is not asking for anything.  I am not familiar with DryIoc maybe you can spot the issue here:  https://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.DryIoc.Forms/PrismApplication.cs#L117. @dadhi Yes, this is definitely an implementation issue.  The author of this obviously didn't test this is a real app.\nUse the sample app I provided and modify the MainPageViewModel by adding this to the ctor:\n```\n        public MainPageViewModel(INavigationService navigationService)\n        {\n    }\n\n```\nIf you add this in the RegisteredTypes method, you will see that an instance of MainPageViewModel is not being created with an INavigationService parameter.  This is actually throwing an exception.\n```\n                var page = new MainPage() { Title = \"Test\" };\n                var vmType = typeof(MainPageViewModel);\n            var navigationService = CreateNavigationService(page);\n            // Resolve type using the instance navigationService\n            var resolver = Container.Resolve<Func<INavigationService, object>>(vmType);\n            var result = resolver(navigationService);\n\n```\nHow can we create an instance of the MainPageViewModel and inject the INavigationService instance, but only if the parameter exists.  If the param doesn't exsts it should just create the VM, resolve any other services if there are any, and return the new ViewModel class.. We cannot use that approach.  Each instance of a ViewModel needs to have a different instance of the INavigationService injected which must have other properties set at runtime.  So we cannot do this at the container level.  This injection really is ViewModel specific.\nThis is how Autofac does parameter injection:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Autofac.Forms/PrismApplication.cs#L53\nThis is how Unity does it:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Unity.Forms/PrismApplication.cs#L27\nWe need a way to pass the specific override at the time of resolve.  Unfortunately, if we can't achieve a dynamic override, then I have to drop support for DryIoc.. This SO question is what we need to achieve.  It was marked as an answer, but it does not work:\nhttp://stackoverflow.com/questions/37431451/override-certain-implementation-when-resolving-a-dependency. It seems that Container.Resolve<Func<INavigationService, object>>(vmType); doesn't like the object generic in the Func.  If I hard code it to the MainPageViewModel type it will work.  Unfortunately, we can't do this as we won't know the type until runtime.  So there is no way for use to pass the ViewModel type into the Func as a generic.\nThis works:\nvar resolver = Container.Resolve<Func<INavigationService, MainPageViewModel>>(vmType);\nThis doesn't, but we need this:\nvar resolver = Container.Resolve<Func<INavigationService, object>>(vmType);. Just use the sample I provided already, and follow the instructions for adding the nav service to the MainPageViewModel ctor.\nThis is the same app I am using . @dadhi We are making progress.  We have a PR that seems to work so far.  Looks like the WithDependencies was what we needed.\nhttps://github.com/PrismLibrary/Prism/pull/997\nWe just need a workaround for the NavigationPage object, and we are set.  I'll push an update to Prism.DryIoc and then publish my new DryIoC templates in the Prism Template Pack.. @dadhi thanks for the help! I was under pressure to ship this weekend. So we had to fix or drop :)\nLooks like we fixed it with your help and guidance. I've heard good things about DryIoc, but I haven't had time to try it.  I am looking for a new \"standard\" to replace my favorite Unity container so I may give DryIoc a try.. Thanks. We'll update when we push 7.0 aka .NET Standard support.. @rasmuschristensen This has already been fixed in the latest CI build on MyGet, and will be in the final release when we RTM next week.. I will leave this open until I have merged the PR's.  I don't have time to review right now, but I will review as soon as I can.  Thanks for all your help!\n\u3069\u3082\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\uff01. I merged the WPF templates. I should have time next week to review the Xamarin.Forms templates.. We do not provide documentation for the DI container projects.  Anyone that wants to know the differences between them can use their favorite search engine.. A big thank you to @nuitsjp for the great work on these templates.. Thanks for the PR.  I will review as soon as I can.. Please make sure all .vstemplate files have unique template id's. If they are not unique, the templates will not work.. This is because it is navigating modally.  You need to set the useModalNavigation = false in order to navigate from within  a child ContentPage that is in a TabbedPage, that is wrapped in a NavigationPage that is being used as the Detail of a MasterDetailPage.  See how things start to get complex :). It's not about what the default value of a nullable type is, it's about the expectations of the platform.  XF default expected navigation is modal.  While the Prism INavigationService tries it's best to be smart about handling the navigation, there are certain scenarios in which it simply falls back to the platform expectations.  This just happens to be one of those scenarios. That's why the parameter exists so that you can override it's behavior.. The DryIoC problem is similar to the Autofac issue we had.  We will be fixing this in the framework, so no need to include it in the template.  I haven't had time to review the template, but I will ass soon as I get some free time.. Yes, there was an older Ninject template that was very old and out of date.  It was never used.  I just deleted it to clear up any confusion.. While this may be possible when dealing with Modal navigation, I don't know how to do it with non-modal navigation (navigation within a NavigationPage).\nWith modal navigation I could handle the ModalPopping event on the application class, check the interface and then call e.Cancel if false.  The NavigationPage does not provide such a capability.  I do not want to add a feature have it work in one scenario and not another, so I decided not to implement it at all.\nUnless someone else has another way, but remember that it must work the same on all supported platforms.. I think one thing I can do to make your life easier in this scenario is make the method that checks this interface public so that you can easily call it from within your own custom code where it is needed.  This would eliminate some headache on your side by using the code in Prism.\nRight now it is protected, but I can make it public for this scenario:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/PageNavigationService.cs#L483\nThen you can call it only in the cases where you need it.  Would that work?. I just realized though that when using a NavigationPage the OnBackButtonPressed doesn't get invoked when hitting the software backbutton, so it would only work when users hit the hardware back button.  I wonder if there is a way to do this.. Do you think you would find value in making the CanNavigateAsync method I linked to earlier public so that you can at least handle this in your own application code?. You can now use `PageUtilities.CanNavigateAsync' in your custom back button logic.. Thanks for the fix!. Please make sure all .vstemplate files have unique template id's. If they are not unique, the templates will not work.. Please make sure all .vstemplate files have unique template id's. If they are not unique, the templates will not work.. This is expected.  OnNavigatingTo is execute prior to the navigation back to your HomePage.  When OnNavigatingTo is fired navigation has not started yet.  So before you navigate to the HomePage, you are navigating to DetailsPage, so this Page will now be navigated to first.  It a simple order of operations.  Do not navigate in the OnNavigatingTo.\nHonestly, your navigation scheme doesn't make any sense to me.  If I'm a user and click a button that calls GoBackAsync, I would not expect to see a page that I never went to.  I would expect to see the previous HomePage.  If I click something on the EditorPage to show details, I would expect to navigate to another page and now have three pages in my navigation stack.. You could also use an absolute URI to reset the navigation stack.  If I could understand the scenario better, I may be able to add a feature to support it.. Hmmm... that's an interesting idea.  I'm not sure how feasible that would be to actually implement, as it would be quite complex, but I will play around with it.. This should not be an issue now with the Template10 merge. If it is, let us know.. Thank you for the suggestion.  Unfortunately, this is not something that we will be adding to Prism.  This is the responsibility of the developer to control focus, and there are too many scenarios that must be considered to add such a feature.  It's not a simple as give the first control focus.  Luckily, this can be done very easily with attached properties and custom code to meet your needs exactly.. This is a known issues and I already captured this when I first wrote the feature as something I need to address.  See #862 . Use the IActiveAware interface available in the latest preview.. you'll need to provide a sample repro app. It works fine for me.. No, I mean provide a link to a full working application that reproduces the issue.. I would prefer a GitHub repo. Thanks. You're not using the right version.. You need to be using the 6.3 preview.. You have to select the \"Include Prerelease\" checkbox. I'm glad I could help :). I'm getting a failed test Navigate_UnregisteredView_ThrowInvalidOperationException()\nTest Name:  Prism.DryIoc.Forms.Tests.PrismApplicationFixture.Navigate_UnregisteredView_ThrowInvalidOperationException\nTest FullName:  Prism.DryIoc.Forms.Tests.PrismApplicationFixture.Navigate_UnregisteredView_ThrowInvalidOperationException\nTest Source:    C:\\Users\\BLagunas\\Documents\\GitHub\\Prism\\Source\\Xamarin\\Prism.DryIoc.Forms.Tests\\PrismApplicationFixture.cs : line 94\nTest Outcome:   Failed\nTest Duration:  0:00:11.271\nResult StackTrace:\nat System.ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument argument, ExceptionResource resource)\n   at DryIoc.ContainerException.Of(ErrorCheck errorCheck, Int32 errorCode, Object arg0, Object arg1, Object arg2, Object arg3, Exception innerException)\n   at DryIoc.Throw.ThrowIfNullT\n   at DryIoc.FactoryMethod.<>c.<.cctor>b__7_0(Request request)\n   at DryIoc.ReflectionFactory.GetFactoryMethod(Request request)\n   at DryIoc.ReflectionFactory.CreateExpressionOrDefault(Request request)\n   at DryIoc.Factory.GetExpressionOrDefault(Request request)\n   at DryIoc.Factory.GetDelegateOrDefault(Request request)\n   at DryIoc.Container.DryIoc.IResolver.Resolve(Type serviceType, Object serviceKey, Boolean ifUnresolvedReturnDefault, Type requiredServiceType, RequestInfo preResolveParent, IScope scope)\n   at DryIoc.Resolver.ResolveTService\n   at Prism.DryIoc.Navigation.DryIocPageNavigationService.CreatePage(String segmentName) in C:\\Users\\BLagunas\\Documents\\GitHub\\Prism\\Source\\Xamarin\\Prism.DryIoc.Forms\\Navigation\\DryIocPageNavigationService.cs:line 35\n   at Prism.Navigation.PageNavigationService.CreatePageFromSegment(String segment) in C:\\Users\\BLagunas\\Documents\\GitHub\\Prism\\Source\\Xamarin\\Prism.Forms\\Navigation\\PageNavigationService.cs:line 411\n   at Prism.Navigation.PageNavigationService.d__17.MoveNext() in C:\\Users\\BLagunas\\Documents\\GitHub\\Prism\\Source\\Xamarin\\Prism.Forms\\Navigation\\PageNavigationService.cs:line 184\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Prism.Navigation.PageNavigationService.d__14.MoveNext() in C:\\Users\\BLagunas\\Documents\\GitHub\\Prism\\Source\\Xamarin\\Prism.Forms\\Navigation\\PageNavigationService.cs:line 145\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at Prism.DryIoc.Forms.Tests.PrismApplicationFixture.<>c__DisplayClass7_0.<b__0>d.MoveNext() in C:\\Users\\BLagunas\\Documents\\GitHub\\Prism\\Source\\Xamarin\\Prism.DryIoc.Forms.Tests\\PrismApplicationFixture.cs:line 97\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nResult Message: \nAssert.Throws() Failure\nExpected: typeof(System.NullReferenceException)\nActual:   typeof(System.ArgumentOutOfRangeException): Index was out of range. Must be non-negative and less than the size of the collection.\nParameter name: index\n. I went ahead and got this figured out.  I used what you had and just slightly modified it.. So essentially you are asking to queue up all the exceptions and then throw an exception that contains all the other exceptions?  Hmm.. I'm not sure if this is a change we should make.  Given how old this code base is, there could be a number of apps that are expecting and handling known exceptions.  If we change this behavior it may break all those apps. @briannoyes what are your thoughts on this change?. I think that is a reasonable change.  I would recommend testing this first to make sure it works as you expect.  Once you have verified it will fit your needs, submit a PR with the change.. Thanks for the PR. The issue is not clear.  It is not possible to diagnose your issue without having an app the reproduces the problem.  There are too many moving pieces that could be causing your problem.. The project is missing a solution file and does not build.  I need a compiling project to debug. Also, the app should only contain the files with the problem. Do not include everything.  Only what the issue is.  We want to focus.. Please create a project that reproduces your issue without including all the other pages.  Only the pages that are causing the issue.  Plus, the page that is in the exception you pasted (DetailsPage) doesn't even exist in the solution.. This is because you have an issue with your code.  The SocketOn method is returning null.  Then you call ToString() on it which will throw a null ref exception because you can't ToString a null object.  If you just remove the ToString() method call it will work. Now you know what your problem is, and it's not Prism :). I'll just leave it as-is then :) It was just a thought. @snowppy, @rmenezes was suggesting to use an absolute URI and provide the entire stack you wish to have which will reset the navigation stack and deep link you to exactly where you want to be.\nNavigationService.NavigateAsync(new Uri($\"app:///LwdMasterDetailPage/LwdNavigationPage/ProjectsListPage/SessionsListPage\", UriKind.Absolute));\n. @snowppy I don't think using an absolute URI is the best solution.  I will see about adding the ability to remove a view based on name.\nINavigationService.Remove(\"Name\")\nThough, this gets very tricky if you have more than one instance of the same page, so maybe you provide an index to remove instead?\nINavigationService.Remove(2). @snowppy to answer your question, it recreates eveything. I think using the index based approach is safer and places the responsibility of knowing which page to remove on the developer, which I really like :). Let me know your thoughts on #921 . You cache your data and load from the cache.  That way it is already in memory and very fast to load.. @Depechie I have not yet seen a scenario where you were deep in a navigation stack and wanted to suddenly remove a page in the very start of the stack.. It has always been the page prior to the last navigation action.  \nAnother example is a Login.  As user logs in, the app navigates to another page, and now the login page should be removed.  Right now, an absolute URI is perfect for login, but if the login happens somewhere else in the app, and not at app startup, then this remove would be helpful.\nWhat do you think the API would look like.  Add a bool \"removePreviousPage\" argument to the NavigateAsync signature?\nNavigateAsync(string uri, bool useModalNaviagtion, bool animated, bool removePreviousPage)\nI am hesitant to add another signature to the navigate method.  I would almost prefer an interface over a change in signature.  Something like IDestroyAfterNavigation which simply implements IDestructible, but is used as a marker to remove the page when the target page has been navigated to.. @dansiegel that's an interesting approach.  I'm wondering if this would cause confusion between GoBack() or not.  Would we also support something like \"../../../ViewB\"?  I can see where that can start to get very difficult to manage.  Defintiely worth something worth looking into.. @dansiegel the difficulty lies in knowing if to PopModalAsync or PopAsync.  This would provide a little extra flexibility though.  It would probably remove a lot of cases where you have to reset the navigation stack with an absolute URI and rebuild everything.\nTo define it's function; every \"../\" encountered would represent a Pop, and then if a view is provided \"../ViewName\" the view would be created and added to the stack?. @dansiegel also, how would one control if the pop would be modal or just async?\nEdit: would we use the existing useModalNavigation parameter?  If so, the pops would be one or the other and we will not be able to control them in more complex scenarios.. @powerdude this is something we are also looking at.  We actually are going to make a breaking change in #922 to support this.  Though, we cannot add any properties to the NavigationParameetrs class, rather they would have to be extension methods.  NavigationParameetrs will be shared across multiple platforms, and some known parameters will not be used on other platforms.. So I have something working with the \"../\" syntax, but there is a side effect that may not be desirable.  Lets say the navigation stack looks like this:\n\"ViewA/ViewB/ViewC\"\nNow I navigate using:\nNavigateAsync(\"../../ViewD\");\nThere will be a quick flash of ViewA and then ViewD will be shown.  This is because when the previous views are removed, ViewA is made the current page and then the navigation to ViewD occurs.  I'm not sure this is acceptable or not.. Also, should the INavigationAware methods be called? I am leaning towards no, since we are not trying to navigate to or from them, but rather remove them completely.  I can see calling IDestructible on them. Okay, so I have some good news and bad news.\nGood news, I have a working prototype of using \"../NewView\" to remove pages from the navigation stack without having the flash issue I mentioned above.\nBad news, this can only be supported for NavigationPages and will not work for anything modal.  This is because the XF INavigation.RemovePage method is only supported for NavigationPages.\nIs this acceptable, or is supporting modal pages also required?. Unfortunately, the only way to achieve support for both modal and non-modal scenarios is to pop the pages off the stack and then add the new pages onto the stack.  This causes a quick visual flash of the previous page, which is undesirable.\nXF does not have a method that can remove pages off of a modal stack.  They must be popped.\nSo it's either support both and have this weird flash, or only support NavigationPages and have no flash.. Are your pages inside a NavigationPage?  So is it like this:\nNavigationPage/ViewA/ViewB/VIewN. Just so you know, there is no way to remove a Page in a modal scenario.  You can only pop and then push a new page, which results in a \"flash\" of the previous page. Would this be acceptable?. you can't call navigate from the same page you called GoBack, because you just popped that page off the stack so it is no longer part of the navigation stack.. I haven't tested this, but you can try calling NavigateAsync on the previous page on the IOnNavigatedTo method.  Just pass a parameter in the GoBackAsync call so that you know that you want to navigate in response to a GoBack.  I'm not sure if that will work either because technically then GoBackAsync task hasn't completed yet, but it's worth a try.. Yes, it will still flash.  There is no way to remove a modal page from the stack without popping it.. @weitzhandler you never access a Page from a ViewModel. Prism will never let you do that.  If you are in the Page's code-behind and need access to the ViewModel, you get it from the BindingContext.  This is the standard approach.. Besides calling GoBackAsync, no.  That's why this issue exists :)\nAs of now, your best bet is to use code-behind to control removing specific pages in the stack.. The chances of me adding a remove method using that syntax is very low, as that creates a coupling between ViewModels.  In Prism, even ViewModels shouldn't know about other ViewModels.. @wowfood you can already remove views from a region in WPF in a number of ways.. I'm still thinking about this.  Until I figure this out, I do have an easy solution for PopToRoot scenarios.\nUse this extension method:\npublic static class NavigationServiceExtensions\n    {\n        public static System.Threading.Tasks.Task PopToRoot(this INavigationService navigationService)\n        {\n            Prism.Common.IPageAware page = (Prism.Common.IPageAware)navigationService;\n            return page.Page.Navigation.PopToRootAsync();\n        }\n    }\n. Has anyone tried the extension method in the Prism.Forms extension to see if it will work?\npublic static void RemoveView(this INavigationService navigationService, string name)\n{\n    var formsNav = ((Prism.Common.IPageAware)navigationService).Page;\n    var pageType = PageNavigationRegistry.GetPageType(name);\n    page = formsNav.NavigationStack.LastOrDefault(p => p.GetType() == pageType);\n    if (page != null)\n    {\n         formsNav.RemovePage(page);     \n    }    \n }\nWill this be sufficient to solve this issue?. This has been implement with PR #1207. Please try this out with the latest 163-CI build on MyGet.  I need feedback as soon as you can give it to me.. @djcparker both are valid URI's, and both would be supported.  This would not impact deep linking.  It is solely to allow passing arrays via the URI query.\nAll breaking changes will be noted in the release notes, and blog post.  6.3 preview already contains some breaking changes as these types of issues are being discovered.. Prism has nothing to do with this.  We make no changes to the UWP MainPage.xaml or influence it in anyway.  The only change made to the platform projects is the addition of the platform initializer class.  other than that, Prism does not touch this.  The issues is something else.. Before submitting any PR's, it is suggested that you create an issue to discuss the functionality you want to add.  You can read our submission guidelines here: https://github.com/PrismLibrary/Prism/blob/master/.github/CONTRIBUTING.md\nWhat you want goes against the recommended guidance of Prism.  We do not want to create any coupling between ViewModels.  We do no want multiple ways of doing the same thing.  Not only does this approach not align with Prism, it will not work properly.  It will not support deep linking.  It will not support nesting inside NavigationPages, selecting tabs in a TabbedPage, or navigating to a MastrDetailPage and its detail.  Not to mention, you are basing everything off the Page name, when the navigation key to that page can be named anything.  This also assume that the VMs will also follow the standard naming convention, which they may not.  So this will not work.\nIf you want to add this to your code, you need to use something similar to this:  https://gist.github.com/brianlagunas/40b8a7d1e25ccc64623b19f11d758171. No, I will not be incorporating the gist into the main repo.. @andreax64 of course, this has not been fixed in 6.2 because it has just now been reported.  @dvorn asked if you could try PR #928 to see if it fixes your issue.. Great.  Thanks for letting us know. As soon as @dvorn adds a test or two then I'll get it merged.. Fixed by @dvorn PR. @eldhogeorge86 you can use the 6.3 preview that is on Nuget now.. Please provide tests. Great work!. I don't use Autofac, so I can't help you there. But, I noticed in the error message that you are asking for the INavigationService named \"navigation\" in a ctor of your VM.   This is not correct.  Is must be named \"navigationService\" (case sensitive) in order to work.. Yes, this is documented here:  http://prismlibrary.readthedocs.io/en/latest/Xamarin-Forms/3-Navigation-Service/#getting-the-navigation-service\nLuckily, this is the only service that has this limitation.  Everything else can be called whatever you want.. This has nothing to do with Prism.  This is a platform feature.  If you have a XAML file, then the code behind of that file requires a call to InitializeComponent.\nYou should check out this forum post that talks about creating ViewCells in XAML: https://forums.xamarin.com/discussion/20409/creating-a-custom-viewcell-in-xaml. I have no knowledge of Autofac, so I leave it up to the community to support it.. You can only run the XF tests using the \"Test\" build configuration. What's the benefit of doing this?  Do we gain anything?. Since we are unsure if the change will actually benefit us in any way, I am going to close this issue.  It can be reopened once someone can identify a technical reason why we should change it.  Thanks.. Great find!  You just need a small fix to your logic and I will merge the PR.. Fixed with your PR #933 . While this new Parse method fixes the uri's that start with a \"/\", it breaks a valid absolute URI\n[Fact]\n        public void ParseUriThatStartsWithHttp()\n        {\n            var uri = UriParsingHelper.Parse(_absoluteUri);\n            Assert.NotNull(uri);\n            Assert.True(uri.IsAbsoluteUri);\n        }. Also, custom protocols are broken:\n[Fact]\n        public void ParseUriThatStartsWithCustomProtocol()\n        {\n            var uri = UriParsingHelper.Parse(\"myApp:///MainPage\");\n            Assert.NotNull(uri);\n            Assert.True(uri.IsAbsoluteUri);\n        }. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f. Navigation is always relative by default, so by providing another navigationPage in your URI, you are creating a new nav page.  If you want o force a navigation from within the root NavigationPage, simply set the useModelNavigation parameter = fasle.. Please only submit bugs/issues and feature requests to the GitHub Issues.  Questions can be asked on our StackOverflow tag or Slack.. This is a known issue (duplicate of #765).  It is a bug in Xamarin.Forms and you can monitor the progress of the bug here: https://bugzilla.xamarin.com/show_bug.cgi?id=44115. You won't get a toolbar or software back button unless your views are wrapped in a NavigationPage.  This is how XF works.. Try setting the useModalNavigation = false when you navigate.. Yes, you are seeing a combination of two Xamarin.Forms bugs.\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=45978\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=44115\nI have been waiting for Xamarin to fix these for a long time.  They haven't fixed them yet.. instead of making the PageNavigationEventRecoder behavior static, why not make it instance based so that you don't have to worry about running tests in parallel?. Actually, why is the PageNavigationEventRecorder needed?  Can you just check if the DestroyCalled property has been set?. This is great!  Yes you can leave the order of the events.  When deep linking, the pages are built in reverse order.  So the order of the events is correct for deep links is correct.. I cannot reproduce this behavior.  Navigation works fine on iOS.  Can you please provide more detail?  What page are you navigating from?  What does the navigation stack look like?  I would start by removing all the content within the target page and see f it works.  Set a break point on the NavigateToSearch method and make sure it is being hit. check the result of the task to see if it was faulted.. Please do not double post.\nhttps://forums.xamarin.com/discussion/comment/252643. This is not something we will be adding to Prism.  The errors should simply track which page has the error and then you navigate to that page when you click on the error.. Actually, this is being considered now.  If we did this, we would deprecate the NavigateAsync parameters in favor of using the uri query parameter.  This will also allow us to share the INavigationService across UWP making code sharing much easier.. Feel free to take a stab at it.  I am in Japan for 2 weeks and will not have time to look at this anything soon.  It should be relatively simple.  I can't think of anything off the top of my head which would complicate it.  Of course, you won't know for sure until you start coding it and writing tests.. Done. @dvorn is correct. You must await the task and the exception will then be thrown while debugging.. If all you want to do is load modules based on a user roles, then this can be done without having to modify this code.  Just prompt for login when the app starts, get a list of the modules that they have rights to, and then add them to the module catalog and load them.\nI'm not sure exactly why you are going through the trouble of creating a new ModuleManager class.  if anything, you would probably want to be looking at an IModuleInitializer instead.. I would also like ot mention that these types of questions are better suited on our StackOverlow.\nhttp://stackoverflow.com/questions/tagged/prism. This is a very custom scenario.  Luckily, you have all the source code available to you to use to meet your needs.  Unfortunately, this is not something I will be adding to the Prism framework.  Good luck.. You're missing the name of the parameter: ConversationPageViewModel(INavigationService navigationService). This is code that was written by the MS P&P team a long time ago.  I have no knowledge of why it behaves the way it does.  I don't know if it was on purpose, or if it's a bug.  @briannoyes was around when this code was written, maybe he can shed some light on the issue.. Yeah, unfortunately this is one of those high risk areas of the code.  Changing this will most certainly cause any number of production applications to break.  Hunting down the break will be very difficult for anyone as it will be so subtle and in a very complex portion of their app.  Thank you for documenting this as now we know of it's existence and work-around.\nI think I will add a \"known issues\" section to the docs for things like this.. This seems to be an issue with Xamarin.Forms.  The same thing happens if you use XF code\nApp.Current.MainPage = new NavigationPage(new MainPage());\nYou should report this issue to Xamarin.. Thank for taking the time to create this PR, but you should have submitted an issue before submitting a PR.  Scoped regions are not an easy thing to manage.  The biggest issue is this:\n\nThe current way I set up my application ...\n\nThere are so many ways that scoped regions can be implemented, that it is difficult to implement a solution that will work consistently.  For this reason, we have purposefully not implemented any default scoped region support, as the implementation may block someone from implementing a solution for their specific scenario.  The second you add support for scoped regions, that's when you open yourself up for a ton of unexpected side effects and \"bugs\". Not to mention that this is a very mature part of the code base, and it would be a very high risk change for little benefit.. @ThAlmighty I completely disagree with you 100%. Prism was born out of large enterprises, and some of the largest companies in the world base their internal application frameworks on Prism.  Prism has no limits.  It is 100% extensible to implement any custom logic or feature you need.  The scale of the apps I have built with Prism would blow your mind.. thanks for the PR!. How about a PR with tests?. Thanks for the PR @dvorn . This is most likely a result of you trying to use a null object in your Destroy() method.  Destroy cannot be called on a null object, so if a null exception is being thrown, it most likely exists in your code.  Please check for nulls before trying to call methods on your objects in Destroy.\nIf you can create a repro that proves it is happening in Prism, I will reopen and address the issue.  Let me know what you find.. @tonholis When a Page is removed from the navigation stack (destroyed) the BindingContext is set to null to avoid any memory leaks that XF is notorious for having.  Currently there is no way to change this behavior.  If we didn't null it out, you would have a memory leak because your behavior has an event handler for an event of a control in your Page.  So actually, this worked exactly as it was supposed to.  Prism let you know that you had a potential memory leak with that event handler :). By the way, I would suggest adding IDestructible to your View and removing all behaviors you have defined in your Page.. @odahan You will have to provide a sample app the reproduces your issue.  I cannot help based on your description.  My initial thought is that you have an issue in your code, but there is always a chance there is a bug in Prism for your specific scenario.. If you read the release notes, this is noted as a breaking change because NavigationParameters is no longer a Dictionary.  It is now an IEnumerable.\nhttps://github.com/PrismLibrary/Prism/wiki/Release-Notes-6.3.0-Pre2. Please do not post the same question in multiple places.\nThis is the expected behavior.  Trying to keep pages in memory is a huge pain and has many unintended side effects, so it is best to recreate the page.  If you wish to have this behavior, you can manually control this with code-behind, or register your pages with the container as a singleton.. Your best bet would be to create your own extension method based off of the built-in functionality to add this.  https://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Unity.Forms/UnityExtensions.cs#L17\nMaybe something like:\npublic static IUnityContainer RegisterTypeForNavigationAsSingleton(this IUnityContainer container, Type viewType, string name)\n{\n    PageNavigationRegistry.Register(name, viewType);\n    return container.RegisterType(typeof(object), viewType, name, new ContainerControlledLifetimeManager());\n}. No problem.  This is my fault.  I haven't had time to write proper documentation on this feature yet.  You would have never found this on your own.  Glad I could help.. Check your code. Prism doesn't null out any binding contexts when going back to a page.  The only pages that get a nulled binding context is the page that is being popped off the stack.. Ahhhhh... You are using a singleton!  This is why.  Your pages remain in memory, except when they are popped off the stack, everything is cleaned up.  Once again, why using a singleton is problematic.. I under stand the scenario, but I can't think of a good solution right now.  Prism doesn't support singletons so I need to find a way to address this, but without impacting the current expected behavior.  The expectation is when a View is popped off the stack, its resources are cleaned up.  I might need to think of a way to override this to opt in to allowing the resources to remain in memory.. I don't use Autofac so I rely on the community to support it.  If you would like, you can submit a PR with your suggested improvements.  If you decide to submit a PR, please fix it for all platforms.. Thanks for the heads up. I will leave this open and give it the \"Help Wanted\" tag and hope an experienced Autofac dev picks this up.. Honestly I would prefer a breaking change to implement it the right way.  This break would be published in our 7.0 update when we move to .NET Standard.  Autofac users should understand that their DI container has deprecated the Update method so they will know this pain is coming.. So basically it looks like Autofac for WPF will be dropped when Update support is dropped.  Prism for WPF relies heavily on Modules which can be loaded in any number of ways.  If Autofac cannot work with modules that are lazy loaded, then I have no choice but to drop support for Autofac on Prism for WPF.  Now, this just means that I will not be updating the Prism.Autofac version to the version that drops the Update feature.. @stevejbrother we haven't had time to focus on this yet.  We are still trying to wrap up our .NET Standard and automated build processes, as well as focus on the navigation bugs in XF.. This is being addressed by PR #1288. Essentially, modules are not supported with Autofac. only mutable containers will support modules.. Unless you are doing something special, you should always use the default subscription thread which is the publisher thread.  Please update and let us now.  I am closing this unless you can repo the same behavior using the publisher thread.. I'm not convinced that this should be the default behavior.  If a module does not have the supporting framework, an exception should be thrown.  If this is not the behavior you want, you can use your own implementation with the changes you have implemented.. viewModelState is a dictionary Prism.Windows, where the NavigationParameters class is an IEnumerable.  There is already a GetValue to get the parameters that behaves the same way (minus returning bool).  The signature on a Dictionary.TrGetValue does not have an option for the generic T.  So the signature is different.  What benefit would there be in adding another method of TryGetValue<T>?  If we are adding TryGetValue<T> then we should probably also add TryGetvalues<T> to return the array parameters too.. After speaking to @dansiegel I think the current GetVaue should throw when the key cannot be found, and then we add TryGetValue for the existence of the key.  I like it.. So I looked into this and there is no rhyme or reason for this error.  This can not be reproduced in a C# project.  It seems this only occurs in a VB project.  What's strange is that if you derive from BindableBase it works perfectly.  It only crashes with ValidatableBindableBase.  What's even stranger is that if you simply override the SetProperty method and don't change anything, it works just fine.\n```\n        Protected Overrides Function SetProperty(Of T)(ByRef storage As T, value As T,  Optional propertyName As String = Nothing) As Boolean\n        Return MyBase.SetProperty(storage, value, propertyName)\n\n    End Function\n\n```\nUnfortunately, this is one of those weird things that I have no idea what the cause is and I'm going to blame VB and .NET Native compile chain.  So you can either add the simple override or switch to use C#. . Hard to say without a repo.  The only way a toolbar shows up is if you are wrapped in a navigation page.  So as long as that exists it should work unless Xamarin broke something.  Prism does not control toolbars.. This happened because you are forcing a modal navigation which will replace the root of the application and you are no longer in the NavigationPage.  You need to change the useModalNavigation: true line and set it to false.. Prism 6.3.0-pre-2 has this built-in. Upgrade and the INavigationAware methods will be fired when you go back using the hardware/software buttons.. You need to submit a repro with this.  I am unable to reproduce this issue.  This is working fine on the app I am running right now.. Please create a repo app.. You can either place it on GitHub or in a zip file. This will make it easier, and faster,  for me to look into.. Also, if you implement INavigationAware on the TabbedPage, does it fire?.  A repro app is a simple application that reproduces the issue. Something ready for me to run and see the issue to make it easier to debug and fix. . I was able to duplicate your issue using your repro steps.  You have uncovered a very interesting scenario.  I must decide how the OnNavigatedTo works when going back.  It looks like we need to call OnNavigatedTo on both the parent and the child pages on a GoBackAsync.  For example, if I am going back to a MasterDetailPage, I need to call OnNavigatedTo on both the MasterDetailPage and the Detail because I don't know exactly what the target is.  Same goes for TabbedPage and CarouselPage.  Since I don't know the intent of the GoBack call, I have to fire the OnNavigatedTo on both Parent and Child.  Does this seem correct behavior to you?\nBy the way, great find!. Maybe we only target the Child and not the parent, because in a GoBack operation we are really navigating to the active child.  Is there a scenario where we want both the parent and child to respond in a go back operation?. I'm going to go with the Child only approach for now.  Currently for modal navigation scenarios we only call it on the child.  I just overlooked this in the non-modal scenario.  SO I will make the two behaviors the same.  Targeting only the child.. Fixed with PR #980 . This is a tough call. For now I have decided to just call OnNavigatedTo on the child.  Do you have an actual use-case for it to be called on the parent too, or is this just more of a \"I was thinking\" scenario?. @cpboyd In that case I would use the event aggregator to send a message with the id of the device and then filter your subscribers to only listen for event for the specific device id.. @ruanpelissoli Can you provide more information about your scenario.  What does you navigation sack look like?  What type of page are you navigating away from, and what kind of page are you navigating to?  There are no known issues regarding INavigationAware and GoBackAsyc.. Thanks for the fix!. I think we should drop it.  Not only is the XF DependencyService an anti-pattern, it is screwing with our WithAutoConcreteTypeResolution behaviors.  If someone want to use the XF DependencyService they have to use the IDependencyService to use it in an MVVM friendly way.  We will no longer automatically do it.. We would likely keep the IDependencyService in place, but remove the auto-resolve feature of the XF DependencyService.. I'm closing this as there is no community discussion.  For now, we will keep what we have.. None of the unit tests run because VS does not support testing .NET Standard.. The VS Runner does not support .NET Standard Projects.  You converted the test projects to .NET Standard, and now those test will not run.  We have more than 880 tests :).\nYou can test this by opening the PrismLibrary_Core.sln and try running the Prism.Tests.. I am unable to run the Tests and they are not showing in Test Explorer.  I get no test artifacts in the code editor.\n\n. Edit: I have tests showing in the Test Explorer in VS2017, but the test indicator is not showing in the code files.\nI also noticed that you completely changed the folder structure of the projects, renamed solutions and folders, and essentially changed a lot of solution structure.  That's like going into my garage and moving all my tools without telling me.  What was your motivating factor for this?  . The reason the tests are failing is because it appears you removed the FormsApplication class that was used for testing and moved it into the Prism.DI.Forms.Tests project: https://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/FormsApplication.cs\nThis breaks all XF tests.\nThere are a ton of changes in this PR, some are structural that I don't like.  This is very high risk PR.. > See it more as showing you a picture how your garage could look.\nYou're obviously not a car guy :). Adding .NET Standard Support isn't a simple tasks and requires a ton of effort.  We are looking into this now, and will release a preview when we think we are ready for testing.. This is an issue in general and not just Prism.  Prism actually has an issue upgrading because some of the containers that don't support .NET Standard.  You may have to use an earlier version of your packages that support the PCL profile.  Even Xamarin.Forms itself does not support .NET Standard, and won't until the end of the year.  This is something we are working on, but it's not a simple change to make.  Microsoft really created a big cluster-fu*k with this.. There is no concept of Design Mode in Xamarin.Forms. There is no designer, it's just an XML file.. I agree with @nuitsjp.  This is not something that Prism is, or should be, responsible for.  If devs want design time support in XF, then Xamarin needs to add support for it.  Once XF has support for deign time, then we can provide an implementation, but we aren't going to create our own implementation.\nI think @nuitsjp solution is a great solution, and we can add it to the official docs as the recommended way to provide design time data.  Of course, we'll wait until he releases his blog so we don't ruin his surprise :). You can find docs here: http://prismlibrary.readthedocs.io/en/latest/\nYou don't get the base region adapter mapping from the service locator.  Just get them from call base.ConfigureRegionAdapterMappings. Instead of using the ServiceLocator you could try using the Container.GetExportedValue method.  Other than that, I don't support MEF. Maybe you'll get lucky and have someone from the community help you out.\nIf you used a real container it would look like this:\nprotected override RegionAdapterMappings ConfigureRegionAdapterMappings()\n{\n    RegionAdapterMappings mappings = base.ConfigureRegionAdapterMappings();\n    mappings.RegisterMapping(typeof(StackPanel), Container.Resolve<StackPanelRegionAdapter>());\n    return mappings;\n}\nDon't use MEF, and everything will work.. This is not an issue with Prism, it falls out side the scope of support on this site.  The good news is that this does work, the bad news is that the issue is in your custom region adapter and you have to find it.  You haven't provided any code or samples that run, so no one will be able to help you as this is a vey custom implementation that no one has access to.  If you narrowed the problem down to \"_regionTarget never gets updated\" then you need to make sure you are updating it.  This appears to be a globally scoped variable you use to track the region.  This is a bad idea since region adapters are a singleton.. Correct, Prism does not have a RemovePage method.\nYou already have the solution.  You use an absolute path to reset the navigation stack.. This is a duplicate of #921, so I am closing it.  You should follow #921 for updates on this feature.  So I can understand your scenario, can you provide more information about the structure of your navigation stack?  Is it a modal stack or are you within a NavigationPage?  Can you provide what your nav stack looks like?. If you want navigation to happen within a tab, you must wrap your tab (for example HomePage) in a NavigationPage.. It depends on what you are trying to do.  If you are navigating from within a Tab (which is actually a content page) then you need to wrap the actual tab item (the content page within the TabbedPage) in a NavigationPage.\nExample:\n<TabbedPage\n    xmlns=\"http://xamarin.com/schemas/2014/forms\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:views=\"clr-namespace:MyApp.Forms.Views;assembly=MyApp.Forms\"\n    x:Class=\"MyApp.Forms.Views.MainTabbedPage\">\n    <TabbedPage.Children>\n        <views:NavigationPage Title=\"Tab1\">\n            <x:Arguments>\n                <views:Tab1Page />\n            </x:Arguments>\n        </views:NavigationPage>\n    </views:TabbedPage.Children>    \n</TabbedPage>. Please read the release notes, specifically the dynamic tab generation topic\nhttps://github.com/PrismLibrary/Prism/releases/tag/7.0.0-Forms\nYou should be using a pipe not a slash.. @dvorn thanks for the note. It's been fixed. I am actually leaning towards closing this as \"by-design\".  Trying to get two different concepts to work the same way interchangeably is probably not a box I want to open.  If using RegionMemberLifetime, then you are explicitly using the Navigation framework.  If you are using Region.Clear/Remove, you are using View Injection.  This will be a tough sell for me.. @dvorn that would be great!  This is a very low priority for me :). There are a number of approaches described in the links that @dvorn provided.  One of them is to deactivate the view. I'm closing this as it is incomplete and this is actually something I want to do :). I'm sorry, but I do not understand what your issue is.  You changed the default implementation of ViewModelLocator, and it also looks like you are creating a new Unity container instance which is probably your issue.  I don't know what version of Prism.  I would suggest backing out your changes until you find the error in your code.. I also see that that you are trying to resolves things with your container instance with nothing registered and not in the bootstrapper.  Show the login in your bootstrapper before you show the Shell.. I don't know what any of the code means or its context.  You can't have a null MainWindow for an app.. You need to find out what is null.. Also, if your not authenticated you are hanging your app because you aren't closing it.. You need to do a complete clean and rebuild. Delete all obj and bin folders. Uninstall the app from the emulator. Do a rebuild and redeploy the app to the simulator.. No, you must now override the OnPropertyChanged(PropertyChangedEventArgs args) method.. They way it was done before was wrong.  OnPropertyChanged(PropertyChangedEventArgs args) was added to allow you to correctly override the behavior.. For future reference, these types of questions belong on our stack overflow tag (http://stackoverflow.com/questions/tagged/prism) or out Slack (https://prismslack.herokuapp.com/).\nNavigateAsync(\"YourMasterDetailPage/YourDetail\");\nif you wrap the detail in a navigation page:\nNavigateAsync(\"YourMasterDetailPage/NavigationPage/YourDetail\");. This PR looks good.  Just curious, why didn't you move the initialization of the Views and ActiveViews into the ctor like you suggested earlier in 993. Sorry, no chance that is going to be removed.  That is there due to the possibility of null being passed when bindings are initialized in WPF.  If it that wasn't there then apps would crash, and they wouldn't know why.  No value types allowed.  Make your object nullable, or use a converter to pass a valid parameter.  Can you just define DelegateCommand<Cert?>?. Yup, you definitely need to figure out why a different type than what you are expecting is being passed.  That is the root of your issue.. Anything is possible :). I'm curious, have you tried using XF Command to see if it happens?. I am with @dvorn on this one.  Not only would we introduce a perf hit on every CanExecuteChanged notification, but we would essentially introduce a breaking change for no real benefit.  What happens if the types aren't the same, and it is a legitimate bug? The developer will have no idea what's going on or why the CanExecute is not being called.  This would be an extremely frustrating and impossible scenario to debug.  Not to mention, this may produce a larger number of issues being submitted that we would have to support.  If the wrong object is being passed to the Command, this tells me that there is either an issues in the platform, or in the developers code/approach.  I do not think that Prism should swallow these types of exceptions, as that would be a very poor practice for a framework follow.. FYI, they didn't design command to overcome the issue, they accepted a PR that implemented a workaround on Dec 1st, 2016.  So the same behavior was in Xamarin since it's first release.  Instead of doing a proper API review to check the functionality of the inherited binding context, they made a bad decision to patch the behavior in the command and hid potential legitimate issues from developers.  The issue here is that DelegateCommand is used on more platforms than just Xamarin.Forms, and there are many more Prism apps in the wild than there are Xamarin.Forms apps.. This is definitely problematic and annoying as hell.. Honestly, if you want to use DelegateCommad, your best bet is to just have it be DelegateCommand<object> and check the parameter to make sure it is the correct type in the Execute and CanExecute methods.\nvoid Execute(object item)\n{\n    //if item is Cert then do something\n}. @weitzhandler the reason this will not be built into the DelegateCommand has already been discussed in this thread.  \n\nplease address this issue, or at least make this obsolete or include some remarks etc\n\nNot sure what you mean here.  Nothing is obsolete, and the DelegateCommand functions exactly like it should.\n. Can you explain?  What do you mean unusable with nested properties?. As I already explained above.  DelegateCommand works exactly how is it supposed to and is used on more platforms than just XF.  It does work just fine with \"nested properties\".  You just have to define it as DelegateCommand<object> instead to workaround the quirk in XF when required.. We cannot use a precompiler directive to determine the current environment.. In the future these types of question do not belong here, but instead should be posted on our StackOverflow tag (http://stackoverflow.com/questions/tagged/prism) or our Slack channel (https://prismslack.herokuapp.com/).\nI would not recommend doing that at all. That is a code smell to me. I would re-evaluate your design.  If you absolutely had to do it, just register the ViewModel instance in the container as a singleton.  Like I said, don't do it.. This type of question should be asked on StackOverflow http://stackoverflow.com/questions/tagged/prism\nMake sure you provide more information in your question when you post it to SO, because no one can help as it is unclear exactly what could be causing your issue.. You're doing it wrong :)\nRead this:  https://developer.xamarin.com/guides/xamarin-forms/xaml/resource-dictionaries/. are you using a Shared project or a PCL project?. I am unable to reproduce this issue. Please provide a sample that has the issue.. That tells me there is a bug in Xamarin.Forms.  When I get time, I will set some break points in the NavigationPage.Popped event and see if it fires.. XF UWP has an open bug regarding deep linking. May be related.. I'm no licensing expert, but there may be an issue with that.  When this project was OSS'd by Microsoft, it was done under the current license.  I don't think I can just change the licensing to something else without carrying forward the original license.. I have reached out to Microsoft to see if this would be allowed.  I'll update this thread when I hear something.. Just wanted to update this thread.  We are making progress on this.  I am working with the .NET Foundation to make this happen.  Since we had PR's before Prism became part of the .NET Foundation, we will need to get permission from everyone that submitted a PR prior to Aug 30, 2015 to change the license.  Essentially, they will need to sign our CLA in order for us to proceed.  If they don't, then we can't make the change.. This has been approved.  The next v7.0.0 release will be MIT. Can you provide an example?  I would hate to include a reflection call every time a command is executed.  This will really suck for mobile platforms.. You must include tests for this new functionality. Thanks for the PR.  Great addition. @dvorn is correct. This is an issue with your application architecture. Basically, don't do what you are doing. Sharing the same VM instance across multiple views is a code smell, and should be a very rare occurrence. .  I'll email Brian and find out if anything can be done. That is for raising this issue.. I haven't had a reply, so I am going to assume we won't get the discussions.. Thanks @dvorn for the fix.\n@tNRevan I want to reiterate what @dvorn mentioned.  MEF is no longer an officially supported container.  It's mainly here for backwards compatibility.  . I don't understand what you are trying to do.  If you are manually resolving objects you don't have to register your views as objects.  If you are trying to use the navigation framework (RequestNavigate) you would not register the same view type twice. You would just pass the necessary data to the view instance.. That's awesome! Congrats on the app.. Chefs For Seniors: https://chefsforseniors.com/\nVideo discussing the project: https://channel9.msdn.com/Blogs/DevRadio/DR1719\nPrism segment: https://channel9.msdn.com/Blogs/DevRadio/DR1719#time=20m18s\n. Why, what is supposed to happen with the v4.5 release?. I took a quick look at this and I do not feel comfortable having this abstraction around the container.  I would prefer if we could just use the container directly.. IServiceProvider is not compatible with XF yet.  I was looking into this already.  I think when XF and Prism moves to .NET Standard this may be something we look into.. It seems this effort has stalled.  I understand that this is a time consuming effort and I do not expect you to continue to meet our requested changes.  I will close the PR and may refer to it when the time comes to implement this support.. @bartlannoeye What do you think of this PR?. This is already possible by registering your types using your ViewModel name as the key\nContainer.RegisterTypeForNavigation<View>(nameof(ViewModel));\nor even\nContainer.RegisterTypeForNavigation<View, ViewModel>(nameof(ViewModel));\nI personally don't reference other ViewModels because that is also creating a coupling between other VMs.. Can you provide a sample that reproduces the issue?  I am unable to reproduce it in my sample.. I am assuming you fixed this as I have not seen a reply in about a week.  Let me know if you are still having issues.. @mikegottlieb Correct. INavAware fires on the target of the nav operation. Since you did not specify a tab then it just fires on the TabbedPage and then moves on to the next page.. @bartlannoeye Does this PR have your sign-off?. Thanks for submitting this scenario.  This should be an easy fix.  We are already handling the modal scenario.  Just need to add the logic for this scenario.  FYI, this works fine for TabbedPage as long as you aren't nesting NavigationPages, which is not recommended anyways :). Thanks for the update. I wasn't sure how common this scenario was, or if it was even a recommended pattern for mobile development.  I may still implement it just for fun :). I'm just now getting this, and it is recommended that you never place a MasterDetailPage inside a NavigationPage.  The only child of a NavigationPage should be a ContentPage.  In some cases a TabbedPage is acceptable.. Are you sure they are swallowed?  Are they just not being caught?  If I await and wrap navigation in a try/catch I get the exceptions.  Can you reproduce an instance where that is not the case?. We should probably update the templates to provide guidance on this.  Maybe update the app to this:\n```\n        protected override async void OnInitialized()\n        {\n            InitializeComponent();\n        try\n        {\n            await NavigationService.NavigateAsync(\"MainPage\");\n        }\n        catch (Exception ex)\n        {\n            //TODO: handle exception\n        }\n    }\n\n. We could also add an event handler to catch unhandled exceptions and add a virtual method in the base class so they can be overridden\nTaskScheduler.UnobservedTaskException += TaskScheduler_UnobservedTaskException;\n\n            virtual void TaskScheduler_UnobservedTaskException(Object sender, UnobservedTaskExceptionEventArgs e)\n        {\n            if (!e.Observed)\n            {\n                // prevents the app domain from being torn down\n                e.SetObserved();\n            // TODO: handle exception\n            //var exception = e.Exception.Flatten().GetBaseException();\n        }\n    }\n\n```. We could also log more in the NavigationService. I mean we have the logger there. Might as well use it.. We could actually reset the Application.MainPage to an instance of a new ContentPage that contains the error message by default.  Do you think this would be too intrusive, or a good thing to help developers?. I'm not sure the Prism API's will have to change, only the implementation.. What about the IDeviceService?. Since Xamarin has changed the way OnPlatform works (XAML friendly only) and added a new RuntimePlatform property of type string, this is what I am thinking.\nFirst create an Enum that wraps the string property of RuntimePlatform.\npublic enum RuntimePlatform\n    {\n        Android,\n        iOS,\n        Windows, //2.3.4\n        WinPhone,\n        //WinRT, //2.3.5\n        //UWP, //2.3.5\n        Unknown\n    }\nThen in the IDeviceService deprecate the OnPlatform methods and add a new property of type RuntimePlatform Enum\n/// <summary>\n        /// Gets the Platform (OS) that Xamarin.Forms is working on.\n        /// </summary>\n        RuntimePlatform RuntimePlatform { get; }\nNext deprecate the RegisterTypeForNavigationOnPlatform methods for the containers.  This means that you will now be required to manually check the Device.RuntimePlatform property value to register different views based on the result.\nThoughts?. Please check out PR #1043 to see if this is an acceptable solution to the deprecation of the OnPlatform API.\nNotable changes:\nAdd new Enum to replace the string-based RuntimePlatform:\npublic enum RuntimePlatform\n    {\n        Android,\n        iOS,\n        macOS,\n        Tizen,\n        UWP,\n        WinPhone,\n        WinRT,\n        Unknown\n    }\nIDeviceService\n deprecated OnPlatform methods\n added DeviceRuntimePlatform property - this mimics the XF API and returns a string\n* added RuntimePlatform property which returns an Enum of type RuntimePlatform and wraps the XF string-based values\nRegisterTypeForNavigationOnPlatform Extensions\n deprecated the RegisterTypeForNavigationOnPlatform signature that requires explicit platform parameters\n added new signature that accepts new IPlatform objects\nExample:\nContainer.RegisterTypeForNavigationOnPlatform<MainPage, MainPageViewModel>(\"Main\",\n     new Platform<MainPage_Android>(RuntimePlatform.Android),\n     new Platform<MainPage_iOS>(RuntimePlatform.iOS));\nI would like your feedback on this new API.. @mackayn not sure, I haven't fully tested their API.  This is mimicking Xamairn.Forms API exactly as-is.. > Prism 6.3 introduced the ability to add tabs via the navigation path\nNo, this was not a feature added to Prism and is not currently supported.\nYou can select an existing tab using NavigateAsync(\"TabbedPage/SelectedTab\"), but the tab must exist or it will not be selected, but rather a new page will be created an navigated to instead.. Done!. We'll be pushing nuget packages as soon as we get the CI details done. Thank you for the PR, but I wish you would have submitted an issue to talk about this first.  Unfortunately, this is not functionality I want to add to Prism for a number of reasons.  First, there are no tests. I cannot except a PR with no tests.  This feature was not added to the other containers.  We need to keep feature parity between the containers.  I also don't like property injection for a number of other reasons, and do not recommend it.  Fortunately, you can easily add this to your app to support your scenario.. IActiveAware does not fire twice.  You have something else in your code causing this issue.  As to your question, there are number of approaches you can take.  Continure to use IActiveAware, use INavigationAware in combination with the navigation framework, or just load your data in the ctor of the class so when it is created, you are already loading the data.  I'm sure there are more ways to do it.. Find: OnPropertyChanged\\(\\(\\) => (.+)\\);\nReplace: RaisePropertyChanged(nameof($1));. That's a great idea!  I put it on my TODO list :). @dansiegel I wish you would have talked to me about this first.  This really isn't a pressing issue or a real benefit to the framework.  We might be able to talk about this later as C# 7 becomes more popular and prevalent in the dev space, and after AppVeyor is compatible with C# 7.  For now, this isn't something that \"moves the needle\" if you will.  . Thank you for the PR.  Unfortunately, this does not meet the desired API for this feature.  The desired API needs to be simply ObservesProperty(() => Property.NestedProperty), and also support infinite levels of nested properties such as  Property.NestedProperty.AnotherProperty.AnotherNestedProperty.\nAlso, you have introduced a memory leak as you are hooking into the complex object INPC but never unhooking it.  This means you are rooting that instance.  So whenever a new instance of that property is set, the previous instance is being held on to in memory and hen you are adding INPC event handler to the new instance as well.\nWould you be able to implement the desired API and remove the memory leak?. Thanks for the update.  I just got back from MS Build and have a lot to catch up on.  I will review as soon as I can.. Dude..... this is bad ass! Great work.  I tested this in WPF and could not produce a memory leak.  One of my most favorite features from the community so far.\nThanks!. Thanks for the suggestion, but this will remain in the Prism library only. . Actually SimpleInjector is not a container that has had a lot of requests.  having said that, if support was to be added, it must be added to all Prism platforms.  I am no longer going to allow a container to only support one Prism platform.\nI will say that this may become a challenging task as SimpleINjector does not allow to resolve objects by name, which is core to Prism navigation:  https://simpleinjector.readthedocs.io/en/latest/howto.html#resolve-instances-by-key\nYou would need to build a custom implementation for this.  You would also need to make sure you can override ctor parameters at runtime for the INavigationService injection in Prism.Forms.. The default behavior works fine for me.  The only issue that was noticed is that the App.xaml.cs requires an empty default ctor.  I added this, and everything worked fine:\npublic App() : this(null) { }\nI found no issues of exceptions in the previewer with VML.  The bindings worked and displayed all the default values defined for the properties.\nWhen PrismAplication was written, I did not consider anything creating it using reflection, so I was not concerned with having a default ctor.  Since it is obvious that the Previewer needs this, I will update the PrismApplication class to have a default ctor.\n. Actually, this isn't something that needs to be done in Prism itself.  The templates just have to be updated to provide the ctor snippet.. @osicka Sorry for the late reply, just got back from MS Build.  I would suggest caching your data, not the VIewModels.. Thanks for submitting the issue.  ServiceLocator is an anti-pattern, but I understand that a lot of developer like to use it.  We will talk about this.. The package will not add to a XF project due to an incompatible target profile.. The Microsoft.Extensions.DependencyInjection package. is this not what you were referring to?. As I mentioned, Prism.Windows did not have DI in it at all from the start.  This is not important enough to add any type of infrastructure to Prism to support this.  When all platforms support the necessary API's this can be revisited.  The current approach is the exact same as which was used for Prism for WPF which was written originally by the P&P team (this has splashes of ServiceLocator in it, but does not expect or recommend the end-user use that pattern).. There are also a number of DI container features that must be supported by IServcieProvider before it can be used.  It's not as simple as a blanket GetService call.  Looking at the interface, there is no way this could be used as a standard across all platforms.\n\nIf you're serious about doing DI properly \n\nI'm sorry, but this comment cracks me up. FYI, Prism.Windows has not really been touched since the P&P team first wrote it. It's been relatively the same since P&P first released it for Win 8.1 :). One example would be runtime ctor parameter overrides. There is more to Prism than just Win10.  Actually Win10 is last on my list of priorities right now.. I'm not sure it's worth it or not.  In the end, you can still use your container of choice.  This is a very low priority for me as the benefit to my users does not stand out at me.  It just seems like a refactoring at what's here.  Using the IServiceProvider doesn't impact the \"sharability\" of VM's or business logic at all.. ummm.... no.  That's not true at all.  I am sharing code between WPF, UWP, and Xamarin now (not using Shared Projects).  There is no way I would ever use DI to new up an ICommand.. I am not using shared projects. I actually refuse to use them for my own reasons.  I think the issue here is that you are not familiar enough with Prism as it is applies across all platforms.. Back to the original issue, ServcieLocator is not intended to be supported out of the box.  Prism does not recommend using it, and if needed a developer can add support for it.  Also, it should be noted that not all containers use CommonServcieLocator, which would make doing this inconsistent with other containers.. Perfect! We are on the same page then :)  CommonServiceLocator is only added because they are dependencies of the container in question.  Prism does not utilize that reference.  Prism for UWP needs a complete review as it hasn't been touched since P&P wrote it.  When I review what's there, then the DI will be reevaluated.. Thanks for the heads up.  It seems Xamarin has been made well aware of this from many other users.  Here is the bug we can use for tracking:\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=56240\nThis was the recommendation fro Xamarin:\n\nFor those of you on VS2015 who would like to downgrade, you can download the previous release from the Xamarin account page as mentioned here (in the bug link). If you are using VS2017, to downgrade go to this page and sign in with your MSDN account or sign up for VS Dev Essentials in order to access the download for 15.0.. Xamarin says this is fixed now :). Thanks for this detailed write-up.  In fact, DI was an after thought or Prism.Windows :)\n\nWe are actually in talks now about an update/rewrite of Pism.Windows to make it more consistent and improve the API.  These notes will be very helpful during these discussions.. Feel free to share what you have.  The more information we have the better.. Currently, Microsoft.Extensions.DependencyInjection is not compatible with Xamarin.Forms until XF gets support for .NET Standard.. Stage one will be to get .NET Standard support.  Stage two will be to review Prism for UWP.  Then these types of conversation will begin.. Have you made any progress on your branch?  I would be interested to see what you have so far.. So I spent a couple of hours researching this and the needs of the Prism library as a whole (not just UWP), and the IServiceProvider will not meet our needs.  We need access to the actual containers to use their more advanced registration and resolution features.  We also need our containers to be mutable to properly support modules.\nUnless I am overlooking something obvious, we will have to continue using the approach we have now, minus the CommonServiceLocator.. Another issue is that we need to stick to .NET Standard 1.0.  So I may just create my own IServiceProvider implementation that accomplishes what I need.. I can't rely on IServiceProvider, but that doesn't mean we can't standardize on our own fa\u00e7ade API around an actual DI container.  I was thinking of creating an interface that would act as a fa\u00e7ade and provide the functionality required by Prism.  For more advanced usage, the developer could gain access to the actual DI container if necessary.  Maybe something like\n```\n public interface IContainer\n    {\n        object Instance { get; } //the actual DI container instance\n    object GetService(Type type);\n\n    object GetService(Type type, string name);\n\n    T GetService<T>();\n\n    T GetService<T>(string name);\n\n    void RegisterInstance<TInterface>(TInterface instance);\n\n    void RegisterSingleton<TFrom, TTo>() where TTo : TFrom;\n\n    void RegisterType(Type from, Type to);\n\n    void RegisterType(Type from, Type to, string name);\n\n    void RegisterType<TFrom, TTo>(string name) where TTo : TFrom;\n}\n\n```\nThen the Prism code base would always rely on these methods.  As long as the DI container extension projects implemented these, then it would be a seamless integration for any container.\nThoughts?. As I mentioned, we can't use IServiceProvider as we are in netstandard 1.0.  The ServiceProvider and IServiceCollection is in netstandard 2.0.  Also, there are a number of features that Prism needs that are to limited in the IServiceCollection implementation. Such as named instances and registrations, as well as a mutable container.. By the way I am separating these methods into separate interfaces\n```\n    public interface IContainerExtension: IContainer, IContainerRegistry\n    {\n}\n\n\n    public interface IContainer\n    {\n        object Instance { get; }\n    object Resolve(Type type);\n\n    object Resolve(Type type, string name);\n\n    T Resolve<T>();\n\n    T Resolve<T>(string name);\n}\n\n\n    public interface IContainerRegistry\n    {\n        void RegisterInstance(TInterface instance);\n    void RegisterSingleton<T>(); //maybe\n\n    void RegisterSingleton<TFrom, TTo>() where TTo : TFrom;\n\n    void RegisterType(Type from, Type to);\n\n    void RegisterType(Type from, Type to, string name);\n\n    void RegisterType<T>(); //maybe\n\n    void RegisterType<T>(string name); //maybe\n\n    void RegisterType<TFrom, TTo>() where TTo : TFrom;\n\n    void RegisterType<TFrom, TTo>(string name) where TTo : TFrom;\n}\n\n```\n. netstandard 1.1 is not netstandard 1.0.\nAlso, we keep our dependencies minimal and only on the absolutely required packages such as Xamarin.Forms and a container. It becomes dangerous to take dependencies on other packages, especially those maintained by individuals as they can abandon the project at any time.\nIServiceProvider is not common in desktop or Xamarin development. It's market really is in the asp.net space.  Adding support for IServiceProvdier doesn't buy Prism anything.  There is no real benefit to explicitly supporting IServiceProvider in Prism.\nI think the intent of this post was to create a more standardized DI API that was more plug & play without all the ceremony.  This new fa\u00e7ade API accomplishes this.  While IServiceProvider might have been nice to use, it does not exist in the target framework.. @dazinator IServiceProvider is not in netstandard1.1. Regardless, as far as Prism is concerned, there is no benefit to using IServiceProvider over using our own fa\u00e7ade interfaces.  Also, only WPF uses CommonServiceLocator. No other platform requires it to function. UWP added it as a courtesy, but it will be removed in the next release.  Also, we were talking about more that just one dependency, as you recommend other packages that support the named registrations., That, or I would have to write those anyways on top of the newly added dependencies.  I feel more comfortable not having to change target platforms, and instead controlling what's required for Prism to function with as few dependencies as possible.  Instead of using IServiceProvider as the abstraction, I am using my own interfaces which will accomplish the same thing.  My biggest hang up is that we require named registrations and resolutions, as well as access to the actual container for more advanced scenarios.\n@dvorn Good idea.  I'll take a look at which methods can be extension methods, and which ones would be required. This will cut down a little on the core required to create a Prism extension.. @dazinator IServiceProvider is not in netstandard1.1. Regardless, as far as Prism is concerned, there is no benefit to using IServiceProvider over using our own fa\u00e7ade interfaces.  Also, only WPF uses CommonServiceLocator. No other platform requires it to function. UWP added it as a courtesy, but it will be removed in the next release.  Also, we were talking about more that just one dependency, as you recommend other packages that support the named registrations., That, or I would have to write those anyways on top of the newly added dependencies.  I feel more comfortable not having to change target platforms, and instead controlling what's required for Prism to function with as few dependencies as possible.  Instead of using IServiceProvider as the abstraction, I am using my own interfaces which will accomplish the same thing.  My biggest hang up is that we require named registrations and resolutions, as well as access to the actual container for more advanced scenarios.\n@dvorn Good idea.  I'll take a look at which methods can be extension methods, and which ones would be required. This will cut down a little on the core required to create a Prism extension.. Interesting. When I was trying it out, it didn't show up for me.  I must have fat fingered something.  If IServiceCollection can do everything we need it to then I would be open to using it, but it is limited in it's current capacity,  For example, we need to be able to register and resolve named instances.  Unless I am missing something obvious, it doesn't have an API for that, and since it doesn't give you access to the container, you can't write an extension method to do it.  Unless you have some ideas you can share?  We also have to considers things such as modularity which requires a mutable container and API.\nRemember, we have to consider all platforms and we aren't talking just about UWP.. Thanks for the link, I'll take a look, but at first glance that API is not going to work.. @dvorn Yeah, I moved a lot into extensions. You can check out the branch\nhttps://github.com/PrismLibrary/Prism/tree/Container-Abstractions/Source/Xamarin/Prism.Forms/Ioc. Sweet. Didn't catch that! I'll take another look.. Thanks again for another great find and fix!. This is dependent on the following Xamarin.Forms bug being fixed:\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=56593. Fixed!. Thank you for the great PR.  I would like to request that each issue being fixed is placed in a separate PR.  This way I can concentrate on confirming one issue at a time.  One PR per issue :)\nWould this be a problem?. \u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01. I am unable to duplicate this issue.  You need to provide the code or an app the can reproduce the issue.. I do not have a bit bucket account. You can either put it on GitHub, or zip it up and email it.  Can you duplicate this issue in new project or dos it only happen in this app?. This tells me it is something in your app, and not Prism :)\n[email removed]\n. You're going to hate this, but it worked perfectly for me.. Beautiful app by the way!. try running the zip file you made me.  First uninstall the app from your emulator.  download your zip, unblock it, and then extract to your desktop.  Set the Droid project as startup and run the app.  This is exactly what I did and it worked.  If it works running from your desktop, then you might need to clean your project directly completely.\nLet me know what you find.. Thanks for the update. Good luck!. Great catch my friend!. Can you please rebase to fix the conflicts so I can start reviewing this PR :). I don't think the re-base was done properly.  It seems you pulled in all the changes instead of rebasing.  Could you please rebase?  Maybe it will be easier for you to close this PR and open a new one?\nI am not sure I understand the issue with the test.  Can you open a new issue so we can discuss the issue and discuss possible fixes?\nThanks for your great work!. I'm sorry, but this is not the correct place to ask thee types of questions.  This forum is for Prism support questions only.  I would suggest posting your question on StackOverflow instead.  You are more likely to get an answer there.\nThanks. With this fix, you have also uncovered a bug in XF.  When deep linking from within a NavigationPage, the pages are placed on the stack backwards.  Given your code snippet\nnavigationService.NavigationAsync(\"NavigationPage/ContentPageA\");\nnavigationService.NavigationAsync(\"ContentPageB/ContentPageC\");\nThe result will actually be ContentPageA/ContentPageC/ContentPageB.  Even then ContentPageC will be broken. This used to work in Android, but was broken in UWP.  Now it's broken in both UWP and Android.  I haven't tested iOS yet.. Here is the bug: https://bugzilla.xamarin.com/show_bug.cgi?id=56593. This was actually fixed with other navigation improvements.. Fixed!. You are setting the useModalNavigation to false in your navigation call.  You can only do this if your pages are wrapped in a NavigationPage.  So either wrap your root page in a navigationPage, or don't set the useModalNavigation property to false.. Let's keep this specific issue focused and not bunch it into the other general issue.  I'll have to look into this and see if this is possible.  This is the older part of the code base and I am not sure if the Region class is resolved using a container.  If that is the case then we would not be able to inject the service locator.  I'm not sure why the P&P team did it this way, but I am assuming they had their reasons.\nHonestly, creating a container per modules makes me nervous and I have never seen the need for that.  I am sure you have your reasons, but this is very unorthodox.. So you have an interface called IFoo that each module has a different implementation of?  So ModuleA needs FooA and ModuleB needs FooB, but both are based on IFoo?. If it's the same types then what is the problem?  Register once, and resolve your objects when you need them.  Do these concrete classes have an associated interface, or are they just a concrete class you are trying to register?. I'm closing this as I don't think this is really something Prism should be responsible for, but feel free to continue the conversation.. Resharper isn't correct.  While the CallerMemberName attribute does automatically obtain the method or property name of the caller to the method, you apply the CallerMemberName attribute to an optional parameter that has a default value. You must specify an explicit default value for the optional parameter. You can't apply this attribute to parameters that aren't specified as optional.\nAlso keep in mind that methods are used in a variety of scenarios which means that you are't always calling RaisePropertyChnaged from the corresponding property.  For example; in a FirstName and LastName properties you may call RaisePropertChanged(nameof(FullName));.  This is the intended design of the attribute.  Resharper is wrong.\n. Feel free to reopen when the other # have been fixed.. Ahh, another good catch.  Great job!. I am assuming you mean the xmlns namespace (https://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Properties/AssemblyInfo.cs#L30)\nYes, those will continue to work as it has nothing to do with the actual website.  I would recommend upgrading to Prism 6.3, because 4.1 and 5..0 are no longer supported.  If you want, you can continue to use 4.1 without an issue.\nAs you can tell, this is the home for Prism, not CodePlex.  Prims has been n GitHub for over a year now.  I would watch this project for updates and new releases.. Correct, you have to upgrade to use the latest namespace.\nUpgrade to 6.3.. because we are splitting out the UWP nuspecs I am closing this PR.  We should have a lot more flexibility regarding releasing platform updates with everything having it's own packages.. I haven't had any issues with the tests not running.  The ResetViewModelLocationProvider(); method resets the class before each test is executed.  Does this not work as expected?. I don't see any harm in adding it just to be safe :). I prefer the single method approach.  Template 10 also discovered this is better and moved away from the individual method approach.. I'm closing this issue since the question has been answered :). I'm not 100% sold yet, but I'll let the community weigh in.. To do regions properly is not a simple task and will require a ton of planning as well as feature scope.  For example, do you expect regions to have their own navigation stack with GoForward and GoBack methods, manage object lifetimes, manage active states, support nested regions, custom region behaviors, customer region adapters, interact with the hardware/software back buttons just to name a few.  Regions aren't as simple as show something in the area.  A lot of thought needs to go into them and a ton of code will be added to Prism in order to support them.  Also, the API will not match the WPF version for a number of reasons.  We also have to consider native UWP in this feature.. The problem with writing a single API that works across multiple platforms is you MUST develop against the least common denominator.  Not all controls that are WPF controls can exist in an XF app.  They will have to be completely rewritten to fit the target platforms, which will be the least common set of functionality across all platforms.\nYou are over simplifying a broad concept.  The devil is in the details.  I will also boldly say that I would never write an app meant for WPF in XF.  That would be ridiculous.  If you have a simple mobile app that you want to port to WPF, sure why not.\nKeep in mind that XF has tons of issues with Android, iOS, and UWP as it is.  It's a real massive pain in the ass.  Now add another platform on top of that and it's cluster fuck of problems.  I really wish Xamarin would concentrate on stabilizing what they have now before trying to shove another platform into an unstable code base.  Wow, I went way off topic there :)\n. @juanperezADD This is not planned for implementation anytime soon.  XF \"sort of\" supports WPF, so I would be careful placing all you eggs in that basket.. The INavigationService is not a singleton and is specific to a particular page.  This means an instance of the nav service must be created, properties set, and then injected into each ViewModel manually.  Is there a better way?. By the way, I am considering making DryIoc the new \"official\" container of Prism. So any improvements you can make to the implementation the better :). For each page that is created, an INavigationService instance must be created and the Page property must be set.  Then that INavigationService instance must be injected into the page's ViewModel ctor if the INavigationService interface is defined as a dependency in the VM ctor.  I'm not apposed to adding a Page parameter to the ctor as long as it works :)\n. At first glance this does seem to work.  However, if we add the Page parameter to the ctor, a Page object will always be created even when it's not wanted.  Sometimes it needs to be null so that we access the Application's MainPage:  https://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/PageNavigationService.cs#L492\nNow, you'll probably say that to turn off WithAutoConcreteTypeResolution, but we need this in order for other concrete objects to be created when required. Such as the XF NavigationPage.. Would this be better than what we have now?\nif (page != null)\n                {\n                    var navService = CreateNavigationService(page);\n                    var getVM = Container.Resolve<Func<INavigationService, object>>(type);\n                    return getVM(navService);\n                }. > It is better to avoid such convention in framework itself. If user wants such magic in the App services, it is his choice.\nYou will never win this argument :).  If this option is turned off, Prism breaks and is completely unusable as none of the ViewModels would be created.\n. Great to hear! . Hey @dadhi, I was wondering why this code doesn't work when providing a serviceKey:\n```\nstatic void Main(string[] args)\n        {\n            const string navigationServiceName = \"navigationService\";\n        var container = new Container();\n\n        container.Register<INavigationService, PageNavigationService>(serviceKey: navigationServiceName);\n        container.Register<INavigationService>(\n            made: Made.Of(() => SetPage(Arg.Of<INavigationService>(navigationServiceName), Arg.Of<Page>())),\n            setup: Setup.DecoratorWith(r => navigationServiceName.Equals(r.ServiceKey)));\n\n        container.Register<ViewModel>();\n\n        var getVM = container.Resolve<Func<Page, object>>(typeof(ViewModel));\n        var result = getVM(new Page());\n    }\n\n    internal static INavigationService SetPage(INavigationService navigationService, Page page)\n    {\n        if (navigationService is IPageAware pageAware)\n            pageAware.Page = page;\n\n        return navigationService;\n    }\n\n    internal interface INavigationService { }\n\n    internal class Page { }\n\n    internal interface IPageAware\n    {\n        Page Page { get; set; }\n    }\n\n    internal class PageNavigationService : INavigationService, IPageAware\n    {\n        public Page Page { get; set; }\n    }\n\n    internal class ViewModel\n    {\n        public INavigationService NavService { get; }\n        public ViewModel(INavigationService navigationService)\n        {\n            NavService = navigationService;\n        }\n    }\n\n```\nIs this supported?. Never mind, I think I understand what is going on and why this doesn't work. The serviceKey is not the parameter name when the INavigationService is being resolved as a dependency.. We accept PRs :). The current WPF docs were written by the Microsoft P&P team and just brought over.  Docs are always the last thing an OSS author wants to do and are often the most neglected.  I haven't touched the current docs, because although they are a tough read, all the information is there with very detailed explanations.  So definitely not worth the time to rewrite docs.. @ronnieoverby It wasn't a knee jerk. It was in response to a blatantly asinine issue being submitted.  Your humor was not realized when responding.  The RST conversion wasn't related to your original issue.  Your original issue was about how hard of a read the docs were and you wanted a simpler version.  So the discussion this is turning into does not even address your original pain point.\n@brinko99 I hope when you re-read your initial statements you realize how ridiculous they are.  You might have not meant for them to come off that way, but they did.\nRegarding the RST conversion.  This is not a priority.  We are not going to spend the time to convert all our docs to another format just because RTD has a bug.  If there are better free online documentation options available that support MK, please list them.\nThis is a freely open source project and is maintained by the community.  No one has a job or any type of obligation to work on or support Prism.  It is done by people with a passion for the project and they sacrifice their free time to do it. When people complain and initially come off as jerks (even if unintentionally), it puts everyone on defense and makes it less likely that we want to spend our free time helping you.\nIf I provided a paid support option, would that be of interest to you?\nHere we are with this issue:\n- I agree, the docs could be less wordy and more to the point (P&P is notorious for long-winded docs), but the fact of the matter is that the WPF docs that are there are very detailed and complete.  If you would like to attempt to rewrite the docs and submit a PR, we would be willing to review the work you do and work with you to make sure everything is covered appropriately.  This is not an effort I, or the rest of the current core maintainers are going to spend our time on.\n- broken RTD search is not something we are going to claim responsibility for.  While broken search sucks, you can still use the left nav and read through the wall of text or use the browsers \"Find\" feature.\n- if there are other documentation options that support MK docs then please provide a list of options that could be investigated when we have the time.\nOne last note, if you want to complain about something or request improvements, a discussion is more likely to occur if you succinctly explain the problem and provide alternate possible solutions to that problem.  Saying \"this makes me want to die\", or \"it's your job so fix it\" is not very conducive to a discussion.. Thanks for reporting this.  I'll check it out.. I'm not sure this is very hard.  We just modify the current IActiveAware behavior to check to see if the page is a NavigationPage, and if it is set the IsActive on the NavigainPage.CurrentPage. At least off the top of my head it seems like a simple fix.  It may not be the case when I actually start looking into it.. Actually, now I see what you are saying.  If you are on a tab, and then navigate within the tab's navigationPage, the new current page has to update the active property on both the previous and current.  Or should it?  Is this a scenario we want to handle?  Maybe this falls into the \"custom\" scenario and you must manually handle the more complex scenario? Hmmmm..... Keep in mind, the primary use of this feature is going to be in a TabbedPage scenario.  So this means that the tabs will most likely be defined in XAML.  I'm curious if we should take the behavior approach, and automatically apply it to the NavigationPage tab.  I am looking the approach with the least amount of effort on the developers part, and the highest amount of maintainability on ours.. Sure, but this approach will work in all scenarios since we would be adding the behavior to a NavigationPage tab regardless of how it was added.. This has been fixed in the latest CI build.  Please test it out on MyGet.\nFollow the instructions here: #1164  . Yup, thanks for pointing this out.  We'll make sure we do it right in our new scripts. Thanks for the PR, but we are actually redoing this entire thing :). The shell must exist first as the modules are initialized and the regions must exist or when the initialize method is called form the IModule, not views would be injected.  We cannot change the order.  I would challenge you why you are wanting to inject module classes as a dependency in your shell.  Something doesn't seem right there.. Any dependencies the Shell has must be registered in the Shell assembly.  You can have dynamic shells no problem, you just have to make sure you dependencies are registered in time so they can be used.. We currently don't support VS for Mac.  You can track the feature progress here: https://github.com/PrismLibrary/Prism-Extensibility/issues/1. Unfortunately, this doesn't seem to work as there is an issue with the previous pages on the stack.  Example; run the HelloWorld, select the 56593 option.  Click the Navigate button on ViewA.  It appears to work as VIewB is navigated to.  Press the software back button until you arrive at ViewA again.  It seems the BindingContent, or something is now null, or some other issue with the view has occurred as the Label binding is now empty, and the Navigate button no longer works.\nThe same happens with 45978. Click the back button and the previous pages are now not functioning.\n\n. Actually, I changed all the Labels to hard code their View Names, and it appears we have a similar issue when I get back to ViewA, it's Actually ViewC with ViewA as the title, but it's busted and won't work:\n\n. Thank you my friend for another great find.. It looks like this effort has stalled.  I will close this until the effort picks back up or the community would like to revive it.. Great!  I am glad you figured it out.  I will close the issue for you.. I think your solution makes sense.  I mainly leave the Debug logger there for when I am developing features.  It makes sense that when it is in release mode, that an empty logger should be provided, and the developer must provide their own logger if they wish.  Submit your PR.. This should be fixed now. To know which ViewModel is the active tab use the IActiveAware interface.  For command to invoke against the active tab, use a CompositeCommand and set the ctor param to true to monitor the IsActive property.. No problem.  No stupid question.  The community is here to help each other learn and be successful.. Hey @dansiegel what do you think about this PR?. @rdrrichards Honestly, the only platforms I care about is WPF and XF. Looks like we can get both of those now :).  Go for it.. @rdrrichards I would like to mention that you will loose a lot of the features of dynamic module loading when using Simplenjector.  This may be a source of support issues for us.  For XF, its not a big deal because due to the nature of the platform, it's not really possible anyways.  On WPF it is much more important.. Where are we on this PR?  I would like to move it forward, or close it.  Thanks.. Since there hasn't been any movement on this PR I'm going to close it.  When you find some free time to finish it, simply resubmit it.  Thanks for the initial attempt.. Thanks for the updates. I'm glad it was figured out.. Thank you to everyone for the help while I was on vacation :). There is not enough information to diagnose your issue.  Make sure you are checking for parameters existence before trying to use them.  Chances are you are using a parameter in your OnNavigatedTo and not checking for null.\nYou need to provide more information about the exception.  It would be best to provide a sample app the demonstrates the issue.. @bartlannoeye Did you have a chance to review this?. As discussed on the Slack channel.  Use Task.Yield() in this scenario.. This is something that has been discussed in the past, but hasn't had any traction because it is not very common and can be accomplished by deriving from PageNavigationService like Dan suggested.  If you would like to talk about a design and put a preliminary PR together for what you had in mind, that would be great. . I worked on a branch with this new abstraction, but I'm not sure if it is worth it or not.  If I pull this out into an IPageBehaviorFactory we will have to rely on reflection in order to determine if the page type is the target type or a derived type in order to properly apply the behaviors.  Reflection means performance hit.  This code would invoke for every page created.\nEssentially we would have this class\n```\n    public class PageBehaviorFactory : IPageBehaviorFactory\n    {\n        List> _pageBehaviors = new List>();\n    public PageBehaviorFactory()\n    {\n\n    }\n\n    public void Register<T>(Behavior behavior) where T : Page\n    {\n        _pageBehaviors.Add(new KeyValuePair<Type, Behavior>(typeof(T), behavior));\n    }\n\n    public IEnumerable<Behavior> GetPageBehaviors(Page page)\n    {\n        List<Behavior> behaviors = new List<Behavior>();\n\n        foreach (var kvp in _pageBehaviors)\n        {\n            if (IsSameOrSubclass(kvp.Key, page.GetType()))\n            {\n                behaviors.Add(kvp.Value);\n            }\n        }\n\n        return behaviors.AsEnumerable();\n    }\n\n    bool IsSameOrSubclass(Type potentialBase, Type potentialDescendant)\n    {\n        return potentialDescendant == potentialBase || potentialDescendant.GetTypeInfo().IsSubclassOf(potentialBase);\n    }\n}\n\nThen you can register your behaviors in the Prism Application:\n        protected virtual void ConfigurePageBehaviors(IPageBehaviorFactory pageBehaviors)\n        {\n            if (pageBehaviors != null)\n            {\n                pageBehaviors.Register(new NavigationPageSystemGoBackBehavior());\n                pageBehaviors.Register(new TabbedPageActiveAwareBehavior());\n                pageBehaviors.Register(new CarouselPageActiveAwareBehavior());\n            }\n        }\n```\nThoughts?. I am closing this as there has not been a community response in a month.. I'm not sure I understand the full scenario around what you are trying to accomplish, but invoking async methods is no easier by adding On[...]ing methods.  Maybe if you provide more information about what you are trying to do.. I am going to close this issue as this is not an interface I will be adding, but feel free to continue the conversation so we can help you with your problem.. You can use an EventSetter in your style, but I would just use a custom dialog service instead.. I've thought about this a little bit and probably the best approach would be to use #define DEBUG in the logger so it will work.  This means we could remove all the other #if checks. Let me think about this a little more. Maybe we should remove the DebugLogger. I did it to make my life easier for developing, but it provides no value to anyone using the class outside of debugging the source code.. That's actually not a bad idea.. With the DEBUG defined, there should be no need to have the conditional EmptyLogger now right?. Thanks for the PR. GC and break points are not a reliable mechanism to find memory leaks.  These types of discussions always lead to a needle in a haystack effort that results a lot of wasted time.  If you want to find memory leaks, please use a proper memory analyzer and provide the results that include what is rooting the objects.. I'm not sure what this is supposed to be saying.  You need to provide much more information about what you are testing for and what your results are.  Find what is rooting the your views to enable a more productive conversation.  Also, it looks likes you are using MEF.  Doesn't MEF makes things a singleton by default (Shared Creation Policy)?  Have you tried this with an actual DI container?. I would never recommend MEF to be used as a container, because it's not a DI container.  MEF is not even officially supported by the Prism team, but rather the MEF community only.  I haven't looked at the sample, but are you removing the View from the region?  Is your View and VM being resolved via MEF hence being created as a Shared Creation Policy (singleton)? Do you know what is rooting your objects?. My only thought could be to test manually removing the region when the view is closed to see if that works.  You essentially need to figure out what is rooting the object.  Once you know that, it will be easier to figure out a solution.\nAlso, is it only one instance of the view that is always hanging around, or every time you navigate do you keep having multiple instances being added in memory?. So, if it is only one instance at a time then this is most likely not a memory leak.\nBy default, Prism keeps the View alive and reuses it when navigating to the same instance.  When using a DI container you woud control this using the IRegionMemebrLifetime interface or the RegionMemberLifetime attribute on the View and set the KeepAlive property to false.  When you do this, the view is removed from the region automatically when deactivating.  You should know that deactivating is not the same as removing.  So by using the KeepAlive property you can remove the view on deactivation.. You'll need to provide a sample that reproduces the issue.. That is not a sample.  I need a running sample that reproduces the issue.  I have a lot of apps that have ListViews that have this functionality with no issues.  I need to look at the actual app to see what is wrong.. I think there is more to it than that.  Without seeing the app it's hard to say.  Glad you got it figure out.. Yes this is expected because you changed the BindingContext of the entire page to something else.  It's no longer your ViewModel.. I can't view a swf video.  You should send as an .mp4\nAlso, when you select a button on an action sheet, it should closes automatically.  Prism does not control when it closes and there is no API to close one programmatically.\nIt would be better if you had a running sample the reproduces the issue.. I am unable to reproduce the issue.  Please provide a sample.. This is not something that Prism will take on responsibility for.  This is application code.  You must implement your own mechanism for saving and restoring the last uri of your app when then phone shuts off.  You are already persisting the entered data, just throw in the uri with it.. Ohhhh.. Now I understand what you are asking for.  Essentially a way to ask the navigation service the current navigation stack.  I have actually thought about this feature before but never implemented it.  I'll have to think about the best way to do this.. Yeah, this will be a tricky one. Most likely won't make 7.0. Just an update.. I am making very slow progress on this feature.  So far I have the NavigationPage scenario covered.  Now, I am working on the more complicated scenarios of a mix of modal and non-modal while throwing in MasterDetailPages, TabbedPages, and NavigationPages. I'm getting confused :). Done! Feel free to test it out using the latest CI build on MyGet which should be ready in about 15 minutes.. Thanks! It will definitely need some testing.  There are so many different navigation scenarios, I probably missed something.  Let me know if you find anything.. No intentional. That should work. Provide a sample that I can check out.. The App property is still available in a Prism app.  Could you be more specific about what you are trying to accomplish?  Provide the actual code that isn't working or you expect to work?. Also, I hope you did see the large test at the beginning of the article\"\n\"NOTE: This post is now over 3 years old. I strongly suggest you use something else, like Auth0 or some other authentication solution. I am no longer maintaining this code, so it probably won't work anymore.\"\nIt seems this is no longer supported.. hmmmm... I'm not sure.  We ship release builds, and I would prefer not to bloat the NuGet packages as they are included in the Prism Template Pack which would really increase the sizes of them.  If you need to debug, why not just download the source code?. You can't use the HelloWorld sample as I use that to test various features and scenarios.   In it's current state it is set up to reproduce a Xamarin.Forms bug so that the Xamarin team can debug it.  I suggest starting from a new project and not the HelloWorld sample.. The only way you will get a back button when using master detail is if you are reusing the navigation page.  This is implemented in the HelloWorld, so if you copied that, that is why you are getting the back buttons and not the hamburger menu.. I did watch it.  I am telling you what the problem is based on what I saw.  The only way you get a back button is if you are reusing the Nav page and not resetting it. . You probably copied the MyNavigationPage ffrom the HelloWorld which implements the INavigationPageOptions interface and sets the ClearNavigationStack property to false.  Set it to true, or don't use the MyNavigationPage at all. . Of course not, you get the hamburger menu instead.  That's how XF works.  The only way you get a back button is if you navigate within the navigation page.  Basic XF behavior.. Initial navigation does not prevent anything.  Chances are it is something in your code.  Possibly from something you copied out of HelloWorld.  Navigation in Prism really isn't that difficult, but first you must understand how standard XF navigation works.  Send you sample so I can take a look.. I checked out the sample and everything is working perfectly.  I deleted the MyNavigationPage and just used a normal navigation page.  That was the only difference.  Maybe uninstall the app from the emulator and delete your obj and bin folders to remove anything hanging around.\nAlso, the reason the master stays open on UWP is because you are telling it to with the IMasterDetailPageOptions.. A back button only appears if you have more than one page on a NavigationPage's navigation stack.  If you want this, then you must reuse the navigation page.  If you do that, then you loose the hamburger menu.  Right now, if you were to navigate to another page from one of the detail pages you would get a back button.  You need to decide how you want your navigation to work.  Either reuse the navigation page or don't, but you can't have it both ways.\n. It would help if you describe what exactly you are trying to achieve.  What is your desired end result?  And what is the current problem preventing you from getting there?. Okay, now I understand.  Thanks you for explaining it again.  That was a bug that has been fixed, but has not been released yet.  In the old code, it was always comparing the root page and checking if it was the same, and if it was it would ignore it.  That has been fixed in the latest source code.  We are still working on our automated build process and hope to have a fix out soon.\nKeep in mind though, that you will not be navigating to the same instance since you are reusing the navigation page.  Instead, you will be creating another instance and adding it to the end of the navigation stack.  This will happen each time you click on a button in the Master.  The master can be shown as any time by swiping from the left regardless if there is a hamburger menu or not.  I would recommend not trying to reuse the navigation page.. No. You would have to remove the page from the stack and insert it at the end, then when going back you couldn't actually pop the page (unless you stored a reference to it somewhere), but rather remove it from the stack and reinsert it where it originally was, while maintaining all the state that the page had prior to it being removed the first time.. No, both will create a new instance.  There is no sharing of instances when navigating back and forth.  If you need this capability, you will need to manually manage the stack (i.e.. holding references to pages, inserting and removing from the stack in proper locations).. looks like there are conflicts now.. Sorry about that :). This thing is still broken. Wassup with that  :). I'm closing this issue because this is related, and dependent on the region feature implementation.  What's most likely going to happen is that VM resolution will be part of a new feature specific to the regions use case.. You shouldn't inject the Nav Service in a page.  This is not enabled by default. If you are sing MVVM, then navigate from your VM. So either use the NavigationService from the VM via a property, or delegate the navigation to the VM directly.. Not off the top of my head.  I know Infragistics has a number of outlook inspired samples that use Prism.  \nhttps://www.infragistics.com/resources/sample-applications/infragistics-wpf-igoutlook. @artemious7 there is a workaround in this thread, so you should not be blocked.  Also, we accept PR's from the community, so if you wanted to fix it you can.. Actually, we are hoping this is solved with the upcoming Template10/Prism merge.. Template10 merged complete. This should no longer be an issue.. This is very strange.  Just so you know builder.RegisterTypeForNavigation<ViewA>(\"MyViewA\"); is the exact same as builder.RegisterType<ViewA>().Named<object>(\"MyViewA\");.  RegisterTypeForNavigation is just an extension method.  I don't use Autofac and have no understanding of how it works, but this is very weird. It works with Unity, so this tells me this has something to do with the container itself.\nThis will work: builder.RegisterType<ViewA>().Named<object>(\"ViewA\");\nThis won't work: builder.RegisterType<ViewA>().Named<object>(\"MyViewA\");\nMaybe someone more familiar with Autofac can help you out.  For now, just use the type name, because Autofac seems to prefer that.. Actually, I dug a little deeper and found that the other containers do not properly implement the necessary classes to function properly.  What Autofac is missing is the AutofacRegionNavigationContentLoader.\nYou can see Unity's here: https://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Unity.Wpf/Regions/UnityRegionNavigationContentLoader.cs\nIf you create this class and implement the GetCandidatesFromRegion method, and register it with the container in the botstrapper, it will work just fine.  You can see how Unity does it here:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Unity.Wpf/UnityBootstrapper.cs#L157. It would be great if someone from the Autofac community could implement this class using the Unity class as a guide and submit a PR.. I'm not familiar with Autofac but I think this should work\n```\n    public class AutofacRegionNavigationContentLoader : RegionNavigationContentLoader\n    {\n        private IContainer container;\n    public AutofacRegionNavigationContentLoader(IServiceLocator serviceLocator, IContainer container)\n        : base(serviceLocator)\n    {\n        this.container = container;\n    }\n\n    /// <summary>\n    /// Returns the set of candidates that may satisfiy this navigation request.\n    /// </summary>\n    /// <param name=\"region\">The region containing items that may satisfy the navigation request.</param>\n    /// <param name=\"candidateNavigationContract\">The candidate navigation target.</param>\n    /// <returns>An enumerable of candidate objects from the <see cref=\"IRegion\"/></returns>\n    protected override IEnumerable<object> GetCandidatesFromRegion(IRegion region, string candidateNavigationContract)\n    {\n        if (candidateNavigationContract == null || candidateNavigationContract.Equals(string.Empty))\n            throw new ArgumentNullException(nameof(candidateNavigationContract));\n\n        IEnumerable<object> contractCandidates = base.GetCandidatesFromRegion(region, candidateNavigationContract);\n\n        if (!contractCandidates.Any())\n        {\n            //First try friendly name registration.\n            var matchingRegistration = container.ComponentRegistry.Registrations.Where(r => r.Services.OfType<KeyedService>().Any(s => s.ServiceKey.Equals(candidateNavigationContract))).FirstOrDefault();\n\n            //If not found, try type registration\n            if (matchingRegistration == null)\n                matchingRegistration = container.ComponentRegistry.Registrations.Where(r => candidateNavigationContract.Equals(r.Activator.LimitType.Name, StringComparison.Ordinal)).FirstOrDefault();\n\n            if (matchingRegistration == null)\n                return new object[0];\n\n            string typeCandidateName = matchingRegistration.Activator.LimitType.FullName;\n\n            contractCandidates = base.GetCandidatesFromRegion(region, typeCandidateName);\n        }\n\n        return contractCandidates;\n    }\n}\n\n```\nThen register it in the bootstrapper:\nprotected override void ConfigureContainerBuilder(ContainerBuilder builder)\n    {\n        base.ConfigureContainerBuilder(builder);\n        RegisterTypeIfMissing<IRegionNavigationContentLoader, AutofacRegionNavigationContentLoader>(builder, true);\n    }\nYou'll want to have someone that actually knows Autofac to double check that.. Unfortunately, it doesn't work unless you add the custom content loader that I provided in this thread.  Also, Autofac is switching to an immutable container.  Which means you will no longer be able to update the container using Update(). fixed. It is probably related to the same issue.  Whoever implemented the Ninject support, didn't provide the necessary content loader.  Just follow the same pattern discussed in this thread and see if it works for you. . It works perfectly for me.  Double check your bindings.\n<Entry>\n            <Entry.Behaviors>\n                <b:EventToCommandBehavior EventName=\"TextChanged\"\n                                          Command=\"{Binding TextChangedCommand}\"\n                                          CommandParameter=\"Text\"/>\n            </Entry.Behaviors>\n        </Entry>\n```\nprivate DelegateCommand _textChangedCommand;\n        public DelegateCommand TextChangedCommand =>\n            _textChangedCommand ?? (_textChangedCommand = new DelegateCommand(TextChanged));\n    private void TextChanged(string p)\n    {\n\n    }\n\n``. Sorry it took so long to get to this.  It looks great. Thanks for your effort.. You shouldn't try to navigate within the service.  Your service should provide you with a response and you navigate after receiving that response in your ViewModel.. Then you have a different problem in your code.  Unfortunately, there is not enough detail or information provided to help you pin point the issue.  I suggest debugging every aspect of that view to make sure everything functions properly prior to invoking it with a message.. Can you provide a sample that reproduces the issue.. Closing since there has been no response.. This is not related to Prism.  The map is not MVVM compatible, so it will not work with the MVVM pattern in general unless you implement the feature yourself.  Possible an attached property?. Call a method to save your view before calling the navigation method.. Your method that you write.. I'm sorry but this is not a Prism issue.  Prism has no influence over the DataGrid control or the code you have written for it.  All Prism does is get you from one page to another.  You may have better luck posting your question on StackOverflow and be sure to provide a working example.  No one will be able to help based off this description of the problem.  They'll need a working repro of the issue to debug.. AndModuleCatalog.AddModule(\"ModuleA\", InitializationMode.OnDemand);`\n. This is not an issue with Prism.  This is how context actions work in Xamarin.Forms.  BY the way, you can't have two pages as a detail page.\nhttps://developer.xamarin.com/guides/xamarin-forms/user-interface/listview/interactivity/. No it won't.  Prism doesn't do anything different.  You are actually taking Prism out of the picture when you are explicitly setting the detail page in code (XAML) and not using the prism navigation service to create the detail page for you.  What you are showing is pure Xamarin.Forms code and Prism is not a factor in this issue.. The code is different. You are not using any Prism features that would have anything to do with this layout issue.  Examine the code more closely, you are missing something.. >  Note The last printscreen did not use Prism.\nThis is irrelevant, and not the source of your problem.  Like I said, you are not using any Prism features that would cause this issue.\nUse the app you are currently using to grab the screenshot of it working properly.  Compare that to your Prism version.\n. You could even create a new Xamari.Forms project without Prism and implement the same code and see what the result is.. The code is not the same.  These apps are different.  You are not comparing the same code.  For example, you have an error in your XAML here: https://github.com/RonildoSouza/POC/blob/master/POC/POC/Views/MDPage.xaml#L28\nThat was at first glance.  There may be more issues.. Chances are you need to set a setting in your android theme. \n<item name=\"windowActionModeOverlay\">true</item>. I haven't looked at any code, but my first thought is that trying to cancel navigation after the navigation process has started is the wrong approach.  You want to check to see if you are allowed to navigate first, and then proceed to navigate if you at allowed to.  Do the check first before navigating.. First off, don't put a MasterDetailPage inside a navigation page.  That's not a recommended navigation pattern.  Instead you need to have the MasterDetail set as the root, and have the Detail wrapped in a NavigationPage.  Like \"MasterDetail/NavigationPage/SomePage\".  The INavigationAware methods work as expected.. Option 4 is not a scenario that needs to be handled.. If you want to use the PopUpWindowAction, the create a custom class that derives from PopupWindowAction and override the CreateWindow method and provide your own Window class.  Then use the custom action in your XAML markup.\nYou can also provide a custom style by setting the WindowStyle property.. I'm really not feeling the addition of the AutofacModuleBase class.  I also don't like the fact the the IModule doesn't work.  IModule should work regdarless of if they are using the IAutofacModule or not.. pull out the autofac changes and submit those as a separate PR.. I moved your changes into another PR and I am closing this one.. I'm not sold on this idea, and am not convinced this should be added to the VIewModelLocator by default.. You can already add support for multiple ObservesProperty call by chaining them using the fluent API that is available.\nObservesProperty(() => PropA).ObservesProperty(() => PropB). Then that method would not called \"ObservesProperty\", instead it would be called \"ObservesProperties\" :). Because that syntax is not representative of the method name and that is not how I want to API to function.  This comes down to a personal preference, and since this API must support a very wide user base, I prefer to make the API as explicit as possible.. My guess is that you are doing this when the app first starts.  This exception occurs because there is no application MainPage.  You can easily test this by checking Application.Current.MainPage in the method.  \nI also bet that you have a deep link in your nav path such as \"NavPage/MainPage\".  Because the nav stack must be built backwards, the INavAware methods are called on MainPage prior to the NavPage being set as the application MainPage.\nYou cannot show a dialog without the existence of a MainPage.  You will need to rethink your approach to ensure a page exists prior to showing the dialog.  You may want to listen for the Appearing event and then invoke a command in your VM to show the dialog.\n. I've never seen this and cannot reproduce it.  Make sure you have added all the necessary packages to every project in your solution.  You can try deleting all the obj and bin folders and rebuilding.. Resources are embedded into an assembly.  It's not a separate DLL and you do not reference it.  This is usually a sign of another problem in your project.. You have to provide a sample application that can reproduce the issue.  There is not enough information in this issue to guess at what the issue is.\nAlso, don't use shared project, use a PCL.. I am closing since there has not been a response.. You don't.  If you are in native code, you need to use native navigation code.\nAlthough, a hack would be to use the event aggregator to send a message to a VM that will handle the navigation in response.. Thanks for the idea, but this violates the MVVM pattern as you are now passing view objects into your VM.  It is never recommended to pass event args into your VM.  For these reasons, this suggestion will not be implemented.  Thanks again.. Thanks for the suggestion.  If we were to create such interfaces in the core Prism assembly, every platform Prism supports would need to implement it.  We cannot add a class or interface to the core for just a single platform.  Another issue is that I am not convinced that validation is something Prism should be responsible for (exactly why WPF and XF do not have it built in).  There are many validation frameworks already available for various platforms, I'm not sure creating another one is beneficial or a problem space Prism should be trying to solve.\nLuckily, this is very easy to workaround.  Simply create your own ValidatableBindableBase in your .NET standard project and use that instead of Prim for UWP's implementation.  YOu can use Prism's source code to get you started.  There is a preview of Prism.Core 7.0 with .NET Standard support on our MyGet server now.  Check out the Readme for it's location.\n. This question belongs on StackOverflow where the community can support the MEF functionality.  The Prism team no longer supports MEF.  MEF is still provided as a courtesy to existing applications.. MEF is not an IoC container, hence you would need to move to an actual supported container.  You can find a list on the ReadMe page.\nBut, moving to a supported container won't solve your problem.  The syntax you are trying to use is not supported.  You would be better off using a DirectoryCatalog and specifying the relative path in code. Not in an app.config.\n. By the way, if your application allows unknown 3rd parties to add plugins into your app, then you can still use MEF because that is what it is meant for.  You just won't be using a MEF bootsrapper.. Check the NavigatioMode on the NavigationParameters. It will tell you if you are navigating back.. What is the benefit of knowing if the page was modal or not when going back.. Knowing a modal vs. a non-modal back operation is not the correct approach to your problem.  You should pass the information you need to your VM.  Check to see if the location is in the parameters, and if it's not then you don't need to do anything.. You've already asked this question on SO\nhttps://stackoverflow.com/questions/46153040/navigation-from-tabpage-in-prism-in-xamarinforms. Thanks for reporting this and the work around.  Can you by chance provide a simple repro app?. It's been a month, so I am closing this as I think this may have been related to #1161. If you still wish to follow up on this, please feel free to continue the conversation.. Thank you for your submission.  I wish you would have opened an issue to discuss your idea before submitting the PR.  Unfortunately, referencing a view type in a VM is a major \"no-no\".  Prism's API will never support referencing view types in a ViewModel.  Thanks again for your support and your desire to move Prism forward.. This seems like an easy fix.  I'll update the DryIoC version and you can test it out in our CI builds on MyGet.. Connect to this feed and test it out: https://www.myget.org/gallery/prism. It appears this is the same problem that Autofac had in #1120.  The reason this is happening is because the original author of the Ninject container support did not properly implement it.  It is missing the NinjectRegionNavigationContentLoader.  I do not use Ninject, so I am not exactly sure of how to implement the content loader.\nPlease follow the exact steps in #1120 to implement a Ninject content loader in your project.  Register it with your container and test it out.  If it works, please let me know.. Do you have an update to share?. Try this one and let me know if it works\n```\n    public class NinjectRegionNavigationContentLoader : RegionNavigationContentLoader\n    {\n        IKernel _kernel;\n    public NinjectRegionNavigationContentLoader(IServiceLocator serviceLocator, IKernel kernel) : base(serviceLocator)\n    {\n        _kernel = kernel;\n    }\n\n    protected override IEnumerable<object> GetCandidatesFromRegion(IRegion region, string candidateNavigationContract)\n    {\n        IEnumerable<object> contractCandidates = base.GetCandidatesFromRegion(region, candidateNavigationContract);\n\n        if (!contractCandidates.Any())\n        {\n            var matchingRegistration = _kernel.GetBindings(typeof(object)).Where(x => candidateNavigationContract.Equals(x.Metadata.Name, StringComparison.Ordinal)).FirstOrDefault();\n\n            if (matchingRegistration == null)\n                return contractCandidates;\n\n            var kernelTarget = matchingRegistration.ProviderCallback.Target;\n            var typeCandidateName = kernelTarget.GetType().GetField(\"prototype\").GetValue(kernelTarget).ToString();\n            contractCandidates = base.GetCandidatesFromRegion(region, typeCandidateName);\n        }\n\n        return contractCandidates;\n    }\n}\n\nIn bootstrapper\n        protected override void ConfigureKernel()\n        {\n            base.ConfigureKernel();\n            Kernel.Rebind().To().InSingletonScope();\n        }\n```. For one, you can't push any changes you would have to submit a PR.  Two, your code won't work because Metadata.GetType is not the type of the object being resolved.. > I'm going to guess it was working for me\nDon't guess. Debug and verify values.\nYou do need to create a branch off master. That is what you use to create the PR.  Does this help:\nhttps://help.github.com/articles/creating-a-pull-request/\n. This shouldn't be an issue if there is a proper RegionNavigationContentLoader for the container you are using.  If it's not working for you then make sure you are using the latest 6.3 version.  Also, we will need to know what container you are using.  A lot of these container support was added by the community and they didn't do it correctly.. Ahhh... now I see what you mean. The issue is ensuring the use of the mapper to produce reliable results.   Since there are many ways to register a view for navigation, this may be a difficult thing to enforce.  I would have to see what you are talking about exactly before really commenting on the feasibility of it. Show me the code :). Thank you for the kind words.  Just so you know... everyone's code is noteworthy. Sparking conversations is how change is made.\nRegarding this implementation.  I am concerned about if other containers will play nice with this.  Maybe if we introduced some type of NavigationRegistry (similar to what we have in XF) that when you use the container.RegisterForNavigation method, we will register your custom name with the type.  Then the content loader will look in the registry for the mapping.\nSee this as an example: https://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Ioc/IContainerRegistryExtensions.cs#L34\nThis approach should not break anyone, and will only work with using the built-in registration methods.  Otherwise, it will fall back to the current way of resolving type names.\nWhat do you think?. Keep in mind, not all containers behave the same and may not give you access to registrations and types like your approach requires.  Also, Prism is moving away from container specific features and towards our new Prism.Ioc namespace and classes.  \nSee here: https://github.com/PrismLibrary/Prism/tree/master/Source/Prism/Ioc\nSo this needs to exist agnostic to a container.. I'm not sure what you mean by \"limited to the RegionManager\". How/where else would this be used? This issue here is the IsNavigationTarget not respecting the custom registered name.  Trying to design for possible external usages is not something I am really interested in.  Anyways, using a navigation registry doesn't limit how it can be used. You would still be able to access it just like you can your approach.\nNinject is a perfect example of a container that is a pain in the ass to get registration info.  Unfortunately, every container that we currently support, and possibly potential future containers, would need to be researched in order to support your approach.\nIn order for a container to be used with Prism, it will need to implement the required interfaces.  In fact, the implementations are quite simple compared to how they must be done now.\n. RegisterForNavigation is a helper method to enforce the convention for registering a view for navigation, since it must be done in a specific way in order to function properly.  You can't just register a view type as you would any other service with the container.  RegisterForNavigation is also a standard practice for other supported platforms such as Xamarin.Forms, so we need to be careful about the library conventions when working with multiple platforms.  We can't have it work on way on one platform, and completely different on another.\nI'm not opposed to your approach, but this does rely on the container providing this information as well as the ability to update the mappings when new registrations are made at anytime during the app lifecycle.  Except in the case of immutable container which can never have new registrations during app runtime.  This in itself could be very challenging depending on the container being used.\nNot to mention this line of code here ServiceLocator.Current.GetInstance. This line of code will never be allowed to be added into Prism again.  We are actually in the process of trying to remove every instance of it from Prism.\nThe scope of this enhancement is for navigation only.  When general statements like \"Every object in Prism should have access to the registrations for cases like these\", I always pause and get defensive.  Unless other scenarios can be identified and validated as use-cases for this enhancement, there is no need trying to support unknown use-cases.. The reason XF has a registry and WPF does not is because I didn't write the WPF region code :).  XF navigation is quite complex, and we needed a registry to keep track of information about the views available for navigation.  I agree that there is improvement needed here.  Especially since IsNavigationTarget doesn't work with custom navigation keys. Seems like that should have been fixed before region navigation was ever released.  \nRegarding number 2, this code has been in the wild for a decade and used in millions of apps. Literally millions.  If there was a need for Prism to access the custom registration keys in other objects, we would know by now.  So it is very much a hypothetical.\nThe only difference between your approach and my approach is that you are relying on the container to provide the information, manage updating it whenever new registrations are made (which can happen anywhere at anytime), and the rest of baggage that may come with it.  This is brittle, creates a dependency (we are trying to eliminate these now), and can be very limiting in which container will expose the API necessary to accomplish the task.  Where-as if there was just a simple NavRegistry that was populated when pages were registered for navigation (that pattern isn't going anywhere), then not only is the reliance on a container removed, but it will be faster and much easier to maintain.  If you really wanted to access the nav keys for a view, you could just use the NavRegistry to get them.\nThe scope of this enhancement is only to work with navigation, not to provide some large directory of all registered services in an app.. I'm sorry, but this type of question belongs on SO.  This is not an issue or even really related to Prism, but rather a general programming question.. This is not an issue with Prism so much as it is with DryIoC.  If you look at the dependencies of DryIoC they rely on v4.3.0.  The NuGet packages bring in the required dependencies.  No need to upgrade.. We accept PR's :). I don't know as I am not familiar with your third party plugin or how it works.. Done. Good find.  This is related to the new ReverseNavigation method added to the NavigationService to address two other bugs.  The work around is to add the following ctor to your custom NavigationPage:\npublic TestNavigationPage(Page page) : base(page)\n        {\n            InitializeComponent();\n        }\n. This has been fixed.  You can try it out by using the latest CI build on MyGet \nhttps://www.myget.org/gallery/prism\nYou should delete that workaround code now :). This original issue does not exist anymore.  If you are talking about the requirement for having a ctor that accepts a page when using it in a TabbedPage, then that is correct.  That is required by the XAML parser to define a NavigationPage in XAML.. @bakhti346 Prism doesn't provide a default NavigationPage\n. @JoeDurand3 I cannot duplicate. Custom navigation pages are working fine for me.. Glad you got it figured out. I am actively developing Prism in VS2017.  So yeah, its working.. The test project is missing from the PrismLibrary_Wpf.sln. You're probably better off asking this question on the Xamarin forums.. This works for me.  @dansiegel do you have any issues?. Maybe a stupid question, but did you make sure you have your deployment target set to 8.0 in the info.plist?  Since you upgraded your Mac versions, you need to update your deployment target too.. Which link exactly?  Can you be more specific?. That link works perfectly for me. I clicked on it and the page loaded right up.. Not for me.  Still works perfectly. Points to  http://prismlibrary.github.io/. I would suggest adding these requests individually so they can be properly tracked.  Otherwise they will be lost once this issue is closed, which is going to be right now :)\nThere is no road map at this time.  UWP is not a focus at this time as we are currently focused on the Xamarin.Forms platform.  When XF has been stabilized and our core features are in place, with docs completed, we will begin to re-evaluate the UWP platform.  Honestly, this is not going to happen anytime soon.  This effort will easily begin in 2018.\nIf you feel this timeline is not acceptable, we would appreciate if you would help us implement these features by submitting PR's for all of these requests.  The best way to move something forward is to participate in its development.. This is a community driven project. If the community doesn't drive it or contribute, it won't get done.. Can you create an issue to tie this PR to?  This will take some research from the Prism team.  Looks like they are making a number of breaking changes that we will need to address.  Specifically in the namespaces.\nThanks.. I'm going to close this PR because this is something the maintainers will take ownership over.  There are a lot of moving pieces and issues with .NET Standard in general.  Thank you for bringing this to our attention.. As of now, there are tons of issues with .NET Standard across many platforms.  Heck, we can't even get our builds working properly with the updated dependencies.  We will be moving slow on this issue.. @ENikS I would suggest changing the Unity package to remove all assemblies and just have dependencies on your new Unity.Container and Unity.Abstractions packages.\nCurrently, this is a major issue for anyone look to upgrade.  If you are recommending those two other pages going forward, this is what I would do to make the move seamless.. You see the issue we ran into here, and this is a simple case.  Now, if we switch to using the Unity.Container package, every install of Prism for XF will have to uninstall the previous Unity package.  This is going to be a painful upgrade.. FYI, Wells Fargo and Morgan Stanley use Prism too.  So they would have this painful upgrade experience as well.. There are a lot of namespace changes that will make upgrading/using unit a real pain.  For example, the ContainerControlledLifetimeManager is now under the Unity.Lifetime namespace.  This means I have to add two namespaces just to register a singleton.  Things like this will make using unity somewhat of a pain.. Well, honestly, you would have probably been better off leaving the nested namespaces how they were.  Removing the Microsoft from them is fine, but you moved a ton of objects around and basically make upgrading undesirable.  The PR would be to put everything back where it was and just remove Microsoft from the namespace.  Unity has so many installs, making such a broad changes to objects locations and namespaces is really going to be a painful experience.\nBut, you have already move them so the best you can do is try to improve the developer experience.  Maybe creating a new API that allows using the basics of the container (such as registering) easy and not require multiple namespaces for the most basic function.\ncontainer.RegitserType().AsSingleton();\nThat would essentially hide the knowledge and required namespace of the ContainerControlledLifetimeManager from the developer.\nI fI didn't have my own very large project to manage, I would be submitting PR's :). > Most of us use ReSharper...\nYou can't rely on everyone having Resharper.  I don't use it because it's a resource hog and slows VS down to a crawl when loading solutions, and other reasons.\n\nyou are the first to complain about it\n\nI guess since I'm the first to complain there is no merit in my feedback.\n\nHaving flat Unity namespace (this is what you advocating) effectively\n\nThis is not what I am advocating.  I am advocating of keeping your API easy to use by reducing the number of required namespaces to use the most basic features.  For example to simply register a type as a singleton, I am now required to have knowledge of two namespaces just to do a basic feature of the container.  This is not a good developer experience.\nIt's great you are moving Unity forward.  Many of us appreciate it, especially me.  I have been using Unity since 2008.  It's the only container I have used.   I wish you nothing but luck as Prism has a heavy investment in Unity.. A quick update.  Prism will have to postpone supporting v5 until a critical Unity bug is fixed.  It was reported here: https://github.com/unitycontainer/abstractions/issues/17\nI will update this thread when an update with a fix is available.. Done. I have no time frame.  For now, you can use our CI builds on MyGet.. Good to know, thanks.. Prism for XF v7 will release next week. You can use the previews now if you like.. Prism for XF v7 has been released.  If you are talking about WPF, then there is no release date for v7.  We don't have released dates as we are not a company with paid employees or paying customers :). We simply release when we have time to finish what we wanted to accomplish for a version.\nWe have a few tasks we still need to complete before releasing which may take awhile.  Unfortunately, the main task that of aligning modularity is not something that anyone can help with.  I will be doing that.  Though, if you want to attempt a new IDialogService based on the discussions in #864, you could start there.\nIf you don't want to use the preview, even though we aren't changing the bootstrapper so everything will work just fine, you can always download the 6.3 source from the Tag and then upgrade Unity and use your own build for now.  That will unblock you.. No, we are not changing the DelegateCommand's implementation as that is the wrong approach.  The DelegateCommand is used on multiple platforms and not limited to Xamarin.Forms.  For now you will have to implement the workaround in your code until Xamarin can fix their bug.. You don't register the VM with the container.  You only have to register your services with the container. Container.RegisterType<IMyService, MyService>(...). Well, I can safely say you understood something wrong :).  I get the feeling you are not experienced with DI containers such as Unity. This has nothing to do with Prism, but is related to how you register your services.  If you need a custom configuration use RegisterInstaance.  I suggest reading up on the Unity container to learn how you should be registering your types properly.. With Unity, when you specify just the type in a constructor parameter the container will return the default concrete implementation of that type as defined in the registrations within the container. To specify a named registration when using constructor injection, you can add the Dependency attribute to the parameter definition, as shown below.\npublic class MyNewObject\n{\n  public MyNewObject([Dependency(\"CustomerDB\")] IDatabase customers)\n  { \n    // code to use the resolved IDatabase instance here\n  }\n}. You can if you want. Depends on your needs.  You should research the features of Unity and decide what approach is best for your app.. No changes were made to regions in WPF.  All tests are passing, and I cannot duplicate this.  By the way, there is no version 7 of Prism.WPF released to NuGet yet, so I'm not sure what exactly you have going on.. Then you didn't delete everything with Prism 7.  Do a clean, and then delete your obj and bin folders.  Make sure you don't have any of the preview stuff installed.. You must first open an issue describing the issue before submitting a PR.  Thanks.. Yes, please open an issue as this must be verified before we accept a PR for a fix.  Thanks.. thanks. I am assuming your platform is WPF and not Windows 10.  If you believe you have found a memory leak, please provide a sample that reproduces it along with a memory profiler that can identify the object rooting the views.  I don't know what \"shell control was reloaded\" means, but that can mean many things and you may have application code that is causing this behavior.\n99% of the time, a memory leak has been application code.  I am closing this until it can be reproduced and verified.. Base on the code you provided, this is a result of poor coding practices.  For one, NEVER create multiple bootstrappers.  A Prism projects has only one Bootstrapper.  You are also using an implicit data template for all tabs you are adding.  This is really slow in general and not recommended, especially since you are wanting to use scoped regions (DataTemplates don't support scoped regions).  You are registering a view as a singleton which is not recommended. Prism handles instances for you.\nThe memory profile also shows that Prism is not rooting your app.  It's your code.  You can eliminate the root simply by commenting out your code in the ExecuteTabChange method lines 40-57. \nThis is extremely overly complicated and breaks just about every best practice there is.  Please look at the WPF samples on how you should be using Prism.. This course might help you https://www.pluralsight.com/courses/prism-mastering-tabcontrol. 1. you are creating multiple instaces of the bootstrapper. A lot of initialization happens in there and should only occur once in an app domain\n2. Yes you can.  You are taking a bad approach to navigating within your scoped regions.\n3. If you would like to pay for my consulting time, I would gladly show you how to achieve the same thing without the memory leak.. WOW!  100 tabs all with scoped regions?  Fire your app architect.  There is way too many variables going on here.  Everything from the size of the view and number f elements it has, to the view that is injected into the scoped region, to any behaviors be added, to any amount of code that is running in your VM's for each view that may not be written properly, to the amount of memory and size of process your computer has.  I can easily argue that this is not a result of a issue with Prism but rather app architecture.\nA region doesn't really do anything different than you manually injecting the view yourself into the hosting control.  Anytime you start creating that many tabs with view with nested views, WPF will start to get sluggish.  You should do a full and thorough review of your application code by profiling it and identifying the various areas in your own code base that can improved.  Then we can start looking into Prism framework.\n. Although I would normally argue this is the developer responsibility to know what thread you are calling your code in and to manage it, I don't necessarily see a problem adding this to the dialog service.  I will have to research if there are any performance, or other issues, prior to adding this to the service.. > In my opinion the service is usually called from viewmodel. In viewmodel I do not want to think if I am on main or different thread when trying to display something\nThis is wrong.  As a developer, you should always know on what thread you are calling code in your ViewModel.. If you look at the code, we are returning the Task that you invoke in your ViewModel.\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Services/PageDialogService/PageDialogService.cs#L49\nHence, we cannot wrap this in the Device.BeginInvokeOnMainThread.  You must do this in your ViewModel.  I would recommend using the IDeviceService to keep your VM testable.. fixed with PR #1195 . Do not open a new duplicate issue.  Continue this discussion in the current issue you have already opened.  It may have been closed, but you can still post to it.. I wouldn't necessarily recommend IPageLifecycleAware over IActiveAware unless you need the advanced functionality to run code when changing tabs (both to and away).  IActiveAware is useful for the simple case of when you just need to know if you are the selected tab or not.. One is not better than the other.  It depends on the functionality you need.  Need to run code only when the view is rendered on screen, use IPageLifecycleAware.  Need to run code when the tab has been selected regardless of the state of the rendered view, or if you just need a simple \"selected tab\" check, then IActiveAware.. @OpticNectar your issue isn't really a Prism issue. but rather a very specific requirement for your app.  You will need to use a custom implementation to achieve this. @dansiegel and I do have an hourly rate if you would like us to create a solution for you.. It's not a prism issue because changing the selected tab is not navigation.  An no, it is not planned implement a feature that allows you to change tabs without user interaction.. That only happens when you first navigate to a TabbedPage.  I twill not support being on a tab in a TabbedPage, and then changing tabs again.  It is only for an initial tab selection to get the TabbedPage in the correct state when it is first navigated to.. Good point.  We will be sure to clarify the feature when we actually get to writing some docs :)\nOf course it's possible. You just need to find a solution that works for you. messaging might work for you.  Remember, changing tabs is not navigation.  So everything will work just fine.. The best way is on our Slack Channel.  You can direct message us privately there.. Your tab must be a navigation page in order to navigate within a tab.. Well, it doesn't make it more discoverable, but it does align better with our current naming convention.  Since it's not documented and has a very low usage, I think we can make this change.  I am wondering if we should also add OnStartup to it as well?. Nah, let's leave OnStartup off.. Done. You're going to have to reach out to TestFlight support.  Prism works on emulators, devices, and Xamarin TestCloud with no issues.  If it's problems with the container, then make sure you try link skipping DryIoC as well, and not just Prism.  Good luck and let us know what you find.. January. You can use the preview on NuGet now. Also, you'll want to use the new NavigateToRoot feature in this scenario.. I am unable to duplicate this issue.  Chances are you have an issue in your code somewhere.  Try adding some error handling to your code to capture the exception's message. Make sure you are checking for nulls in any IDestructible method, or INavAware method.  Can you replicate this issue in a blank app? Also, please do not double post to SO.  https://stackoverflow.com/questions/46705617/masterdetailpage-with-a-stack. Great! I'm glad you got it figured out.. This has nothing to do with Prism.  The OnNavigatedTo method gets fired as expected.  The functionality of hiding/unhiding controls is not something Prism is responsible for.  You can try using OnNavigatingTo as maybe API 17 requires it to be set prior to the page being visible.  You should open a bug with Xamarin if you are still having issues... Prism for WPF is the only platform that requires CommonServiceLoctor.  There is no removing it from there.  We are also not adding CSL as part of Prism.. Prism for XF doesn't use CommonServcieLocator.  That is a dependency if you are using Unity.  Since the current versin of Prism 6.3 is based on Unity 4, you cannot upgrade unity or it's dependency on CSL.  We are looking at upgrading to Unity 5 for Prism 7.. @a-einstein This isn't a bug.  Prism 6.3 is built against CSL 1.3.  You cannot upgrade the CSL to 2.0, because Prism is not built against that version.  The only way to get this to work is for Prims to upgrade it's dependency on CSL and release an update.  This will be done as part of the up coming 7.0 release.. Assembly dependencies work the same, nothing changes when using Nuget.  This is the problem with Nuget.  NuGet will always show you the newest version, even if it is a dependency of something else.  NuGet should be smart enough to know that it is a dependency and not show you an upgrade.  This will get you into trouble.. We will never allow the ability to upgrade major versions (example going from 1.3 to 2.0) as that would be a risk of breaking binary compatibility.  Going forward we will at least allow minor updates (1.4, 1.5, 1.6, etc). Done with PR #1240 . I am unable to duplicate this.  It is probably something in your code.  If you haven't figured it out yet, just provide a sample that reproduces the issue.. Yes, the latest preview of Prism supports mac.. Thank you for the translation.  I would like to inform you that we will be moving all docs to a new repo located here: https://github.com/PrismLibrary/Prism-Documentation\nThis is where you should be submitting all doc improvements.\nThank you. I'm sorry, but this is the issues page for the Prism project, not Xamarin.Forms.  You should submit this directly to Xamarin, because we do not ship that product.. Please post these types of questions to StackOverlfow.  Saving application state is not specific to a Prism app.  As you said, the subject is well known.  If you know how to save app state in a non-prism app, you can save state in a Prism app. The only difference is you need to send a message to all modules that need to save state.  . I think you have a valid point.  The issue is that we need a way to pass information about what is going on within the navigation service.  These should not be used directly which is why they start with \"__\".\nMaybe we can create an internal \"property bag\" that we can then use extension methods to expose instead of properties.  We can't add properties to the NavigationParameters class as the long term vision is to add that class to the Prism.Core which will be shared across all platforms.. I'd be interested in seeing your idea to implement this while keeping our long term goal in mind.. That would break the sharing of the NavigationParameters class in the interfaces.. Yes, the long term plan is to move as many of the navigation interfaces into a shared assembly for all platforms.  This will make code sharing across various platforms with Prism much easier.  There will also most likely be platform specific navigation settings that will need to be exposed.\nThere is no published roadmap or design document.. Vacations are the best time to work on OSS. Especially on features you want :). Don't upgrade. Prism isn't compiled against Unity 5.. Thank for the PR, but this is not something we need to do right now.  Going forward please read our contributing doc and the process for submitting a PR https://github.com/PrismLibrary/Prism/blob/master/.github/CONTRIBUTING.md. Super useful PR. Thanks. Thanks for the PR.  We also need to update the bootstrapper tests to include the new method.. I'm sorry, I should have been more specific.  We have existing tests for testing that all the methods in the bootstrapper were run.  We just need to modify the test to include the new method.  I will take care of updating those.. We don't provide support for you trying to get Prism building on your machine.  The output has given you the clues you nee to investigate why the project isn't being built. They are being skipped.. the build configuration is setup for our processes.  You can change them for your local testing.. Do you think this would work?\n```\n        internal static bool HasNavigationPageParent(Page page)\n        {\n            if (page?.Parent != null)\n            {\n                if (page.Parent is NavigationPage)\n                {\n                    return true;\n                }\n                else if (page.Parent is TabbedPage || page.Parent is CarouselPage)\n                {\n                    return page.Parent.Parent != null && page.Parent.Parent is NavigationPage;\n                }\n            }\n        return false;\n    }\n\n```. Thanks for the PR, but this type of effort is better handled by the team.  As you can see, there is more to it than just upgrading the CommonServiceLocator for WPF.  We have other platforms and tooling that must be considered.. Prism 7 introduced a workaround to a Xamarin.Forms bug when pushing multiple pages onto a navigationPage.  That is what is sounds like you are experiencing, and Prism 7 should fix it.. No, Prism does not support the selecting of tabs from within a ViewModel.  This must be done with custom code.  Also, you should upgrade to the latest Prism7 preview as we have made breaking behvairo changes to how TabbedPages work: https://github.com/PrismLibrary/Prism/releases/tag/7.0.0-pre3. I think that would help a little.  At least we would let minor package updates occur.  Any major updates would be a risk of breaking binary compatibility.. Dan makes a great point.  The new projects will not suffer form the \"upgrade everything\" issue that NuGet has.. I think I am going to close this for now as I don't see this as an immediate need. If we continue to have issues, we can bring it up again.. I don't see the WPF tests in this upgrade. I'll handle this. >  I had resolved a container incorrectly in app.cs \nSounds like this was a container exception, not a Prism exception.  Anytime an exception occurs before the MainPage is set, this is the error that is thrown.  Prism does not control this.  You need to make sure you have proper error handling in the OnInitialized for your App.cs (and everywhere else) to catch these exceptions and get more information about them.. Seems like a nice little improvement.  how about you submit a PR to implement it.\nThough, do not pass null for a message.  Please provide a message that describes the exception.. makes sense. I do not understand your scenario.  Can you provide a sample that demonstrates your issue?. You should also try updating to the latest 7.0 preview.  It has a lot of improvements around TabbedPages.  \nI am closing this as I was unable to duplicate this issue.  If you would like to submit a sample that can reproduce it, please do.. Actually, I know what it didn't work for you.  You are manually defining the NavigationPage in XAML.  Prism isn't creating it for you.\nEither upgrade to the latest 7.0 preview, or you have to manually add the NavigationPageSystemGoBackBehavior to the NavigationPage in XAML.. Have you tried changing the version of android that your project is using to compile?  I am unable to reproduce the issue.\nIt is using a pre-release version because that is the version that is .NET Standard compatible.. Also, this belongs in the extensibility repo:\nhttps://github.com/PrismLibrary/Prism-Extensibility/issues\nPlease repost there.. The issue is not the pre-release version of Prism.  You can easily test this by creating a project using the VS cross platform templates, and adding the pre-release version of Prism to it and trying to compile.  This works as there are over a 1,000 downloads of the pre-release with no reported issues.\nThe templates must use the pre-release as that is the only version that supports .NET Standard and the new dotnet templating system.  The marketplace has no concept of a \"pre-release\" VSIX, so it must be a release version.\nDo you have the DotNet Core package installed with VS?. Yeah... the entire .NET Standard thing is going to be very confusing for the next couple of years as people adjust.  I am hoping they fix VS to automatically install that when Xamarin is installed in their upcoming 15.5 release.\nLet me know if you are still having problems.. Just for fun, can you remove these lines from the Android csproj file\n<ProductVersion>8.0.30703</ProductVersion>\n    <SchemaVersion>2.0</SchemaVersion>\nAnd let me know what happens. Nah.. I was just curious.  I'm glad you're up and running.. If you aren't using the preview of Prism, then yes. Correct, because Prism for WPF 6.3.0 is being referenced (which is not .NET STandard).  When we release 7.0, then you won't get the warning.  It's not a big deal.  It will work just fine.. This is a known issue with the latest Xamairn.Forms version.I had this happen to me when I updated Prism to use the new version of XF. I did the same things you did.  Finally after restarting VS a number of times it finally worked for me.\nI have reported this to Microsoft.. This usually indicates your file path is too long. Move it to a short path like C:\\Projects and see if it works then. Well, you also have a bad namespace you need to remove.. Your error output tells you.  It says \"Practices\". Unity has made breaking changes and so has common service locator. You upgraded those packages. Which means you need to fix the namespaces now.. Because only the .Net Standard projects provide the new reference experience. The Android project is not .Net Standard.\nGlad you got it figured out.  As soon as we RTM v7.0.  I will update the templates so this won't be an issue going forward.. Can you please submit this to the correct repro?\nhttps://github.com/PrismLibrary/Prism-Extensibility/issues. Also, the recommended version of VS is 15.4.2.. Please post issues with the template pack here: https://github.com/PrismLibrary/Prism-Extensibility. You had it right the first time.  We are migrating docs over to their own repo.. Seems to work well. Thanks for the PR.. You need to override the method with the following signature\nprotected virtual void OnPropertyChanged(PropertyChangedEventArgs args). Could you provide more detail?  I have no idea what you are talking about or what you are trying to do.. This is not a collection meant to be used generically.  These methods also work as intended for its uses within Prism.. Also, I think you misunderstand what those methods are doing.  When you use the (key, value) method, you are removing values from the list with the given key, not actually removing the list.\nThis is described in the method comments:\n/// <summary>\n        /// Removes a value from the list with the given key.\n        /// </summary>\n        /// <param name=\"key\">The key of the list where the value exists.</param>\n        /// <param name=\"value\">The value to remove.</param>\nWhat you did was create an Extension method that actually removed the list from the collection, which is not the intended function of the method you are using.\n. Once you make something public for nearly 10 years, you can't just make it internal.  Also, the collection is working exactly as it should.  The OP did not understand what those methods actually did.. Possibly, but this really is a non-issue.. The methods in the current API work as expected.  The remove Key/Value will first get the collection based on key, the loop through that collection and remove the value from that collection.\nI am confused on what needs to change.. So your main complaint is that the method Remove(value) doesn't accurately represent what the method does.  Instead RemoveValueFromLists(value) would make more sense?\n. No, I am working on other, more important, things :). Ahh, now I see what you mean. It is because of the method name :)\nShould be named RemoveValue instead.  Actually looks like the easy fix is for both of the methods to be called RemoveValue.. Yeah that's what I meant.\nRemoveValue(TKey, TValue) and RemoveValue(TValue)\nThat would fix the issue.. The good news is I don't think many people are using this anyways.  In 10 years this is the first I have heard of anyone using it. It will be noted as a break, and it will result in a build error so anyone using it will know where the break is.  If it was a behavior break, those are nearly impossible to find and I try to avoid those at all costs.. Fixed. You can't use the INavigationService in a code-behind file.  You must use the native XF APIs for navigation.  Creating custom navigation bars is outside the scope of our support.. INavAware methods work with the built-in PopAsync methods.. Also, please do not double post\nhttps://stackoverflow.com/questions/47309062/custom-navigation-bar-using-xamarin-forms-with-prism-broken\n. You can create a custom navigation bar, but you can't use the Prism INavigationService in the code-behind.  You will use the built-in Xamarin.Forms navigation API.  Just like the sample in the SO post.. Correct. Well, you can but it's more of a trick.  You will need to add the parameters in the OnNavigatedFrom and they will be available in the OnNavigatedTo of the page you are going back to.. Do you mean like this:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/NavigationParameters.cs#L157-L239. Yes, no problem.  In a future release the goal is to share a single NavigationParmameters class. Actually, this is a bug in Xamarin that they have never fixed.  The issue is that when the page is first being created, the parameter being passed to the command is actually the MainPage, which causes an exception inside DelegateCommand because it does not match your T.  You can see this by adding a CanExecute to the DelegateCommand and make the parameter type of <object>, then set a break point in the method as the app starts up. You will see the parameter is actually MainPage for each list item.\nXamarin had to implement a work-around in the command to validate if the type was the same in order to get around this.\nhttps://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Core/Command.cs#L27\nWe can't implement this work-around because Prism's DelegateCommand is used on multiple platforms and not just XF.  So you have a coupe of options.\n\n\nDon't use DelegateCommand for this specific use-case\n\n\nUse DelegateCommand<object> and cast the parameter to Person if not null var p = person as Person\n\n\nCreate a custom command that derives from DelegateCommand and implement the same workaround. I'm not sure this is something that will be included in Prism as this would require an additional dependency on Json.NET to read and parse the file.  Plus, might as well be a simple text file as I'm not sure adding modules via Json will be desirable.. You could use an App.config fie and then use the Prism Extensibility Pack to add your modules via a form.\n\n\nhttps://marketplace.visualstudio.com/items?itemName=BrianLagunas.PrismExtensibilityPack. or , just write your own Json module catalog.. Not yet, I have not updated it.  I'll get to that when I have time.. Have you seen how to define a module in a file?. I'm sorry but this has nothing to do with Prism.  You should bring your concerns up with the Realm team.. I would be hesitant to accept another container, especially one I have never heard of.  The issue is that once we bring it into Prism, I have to support it.  While I try to rely on the community to support the other containers we have, no one really has stepped up tot the plate to do so.\nAlso, if we do add a container, it must be added to the other platforms as well.  I want to get away from platforms support different containers.  It also would not be added to the Prism Template pack unless it was supported on WPF and XF.  This means that it must support the features of WPF as well as XF.\nYou can submit your PR or review, but there is no guarantee of when, or if, it will be accepted as it will take time to properly review and test. If we release it without testing then it will provide a bigger support burden on me.. I would also caution you that this container seems new to GitHub, has very small number of downloads, and doesn't appear to have an active community behind it.  Adoption may be way too low for us to even consider adding it.. Sounds good. Enjoy!. We accept PR's.  Luckily for you, we already have this support in WPF so this is more likely to be accepted.  Although, there is no guarantee of when, it will be accepted as it will take time to properly review and test. StructureMap us being sun-setted so no need in adding support for it.  https://jeremydmiller.com/2018/01/29/sunsetting-structuremap/. Can you provide a sample that reproduces the issue? I am unable to reproduce it locally.. Can you wrap you navigate call in a try catch and await it and assign the result to a variable. Then check if you get an exception, or check the state of the awaited call?. Great, glad you figured it out. Exceptions are rethrown and logged in the navigation service. YO\\ou can provide a debug logger in the CreateLogger method in app.xaml.cs.. I actually like adding the BaseDirectory property and defaulting it to the current directory as to not break anyone using it.  Another great find.\nDo you have time to create a PR?. Hmmm.... actually the more I think about it the more I am agreeing with your assessment.  Maybe updating the docs to describe the current behavior would be best.\nI will think about this some more what I get some time.. I think this is just one of those \"leave it the way it is\" issues.  Not a big deal, and not a blocker. It could just be a little more clear. Thanks again for bringing it up.. You have already posted your question here:\nhttps://stackoverflow.com/questions/47423633/prism-shared-viewmodel\nPlease do not cross post.. You can't call GoBackAsync twice in succession. Once you call GoBackAsync, the page is removed from the navigation stack.  It no longer knows anything about your nav stack.\nYou would have to pass a parameter to the previous page in your GoBackAsync call to instruct it to call GoBackAsync in the OnNavigatedTo.\nOr, you could try using the new features in the latest preview to see if they fit your needs.. Try calling it in OnNavigatedTo not OnNavigatingTo, or just use the new features in the preview.. Why do you need multiple gobacks?\nThe new features might help if you know when you navigate to the third page you want to remove the previous two.\nNavigateAsync(\"../../ThirdPage\");\nThat will automatically remove the previous pages from the stack so when you click goback it will work as expected.. yes, it's in the latest pre-release.. This is a bug in VS. Simply open your properties for your project, and then go to the debug tab.  delete the \\ on the Debug out put path and then re-add it.. Thanks for the suggestion. Could you please post this in the proper repo?  Thanks>\nhttps://github.com/PrismLibrary/Prism-Extensibility. You don't have to unsubscribe form IEventAggregaotr events.  Also, there is no base class in Prism. SO there would be no where to add such a virtual method.  Also, If you need to unsubscribe, implement IDestructible. Then you are not subscribing in the right spot. Should only subscribe once.. IDestructible is use to clean up any resources when the page is popped off the stack. Implement it and see if it fits your needs.. Don't subscribe to events there as that can fire multiple times. Subscribe in the ctor. oh, yes. IDestructible is on XF not WPF.. If you aren't filtering off the payload, why not just check the value of your IsActive in the handler.\n```\nif (!IsActive)\n    return;\n//code to execute\n```. Of course not. The MainWindow is not being navigated to. Its the shell.  No navigation is occurring.  Hence, none of the INavigationAware method will fire.  The only way those methods fire is if you use the IRegionManager.RequestNavigate method.. Call it in the ctor of your ViewModel. Or call it before you even show the Shell.  Use a behavior to hook into the loaded event of the window and execute a command. Lots of ways.. If you use a behavior, you don't need code-behind. Just use an event to command behavior.. Yes, you must update the namespaces because the latest preview is using Unity v5. Unity introduced a number of breaking changes which included namespace name changes.\nThe second issue is actually a bug.  For now use the following syntax to get around that issue:\nModuleCatalog.AddModule<CoreModule>();. fixed. no they are not updated.. There ae no updated docs at t he movement. You can use the Prism Template Pack for VS to create a new project and see how to update it.  Or, if in VS, you can use the VS suggestion lightbulb to walk you through how to fix it.. In a perfect world where I didn't have a full time job and other responsibilities I would have totally have everything ready at the same time.  Unfortunately, I don't have that ability, so it is what it is.\nYou should follow @PrismLib and it's maintainers on twitter for important messages about these types of things like this blog post:\nhttp://brianlagunas.com/whats-new-in-prism-for-xamarin-forms-7-0/\nOr you can check out the release notes for the release here:\nhttps://github.com/PrismLibrary/Prism/releases/tag/7.0.0-Forms\nWe provided as much information as we could with the time we had.\nThe community also is helping with posts like this:\nhttps://xamgirl.com/updating-prism-7-0-xamarin-forms/\nNever just upgrade a Nuget package.  Always read the release notes first.  This is a bad habit that NuGet has trained people to do.. Mac is a pain in the ass, and not something I spend a lot of time on supporting.. Your build is broken. You must rebase with master and fix your implementation.. Probably a moot point anyways as the chances of this being merged is very slim :)\nPlus, similar changes are coming to WPF so you will be updating this again soon anyways.. PR merged. Don't implement the bootstrapper in WPF. That is going away.  As you can see, it is much easier to implement a new container :). Sorry, but this isn't something I am going to spend any time on.  As I said before you submitted this PR, this will most likely not even be merged. All I can tell is that you have 3 tests failing.. Actually, you should create your own GitHub project for this and then publish it to NuGet.  You don't have to be blocked by a couple of stubborn project maintainers :). This is not a Prism 7 for XF effort, so I removed the milestone.. This has nothing to do with Prism. I suggest you post your question on StackOverflow or the Xamarin.Forms forums.  I will say that you shouldn't be wrapping your MasterDetailPage in a NavigationPage.. Thanks for reporting this.  It seems iOS handles overflow tabs differently than normal tabs. I'll have to look into the cause of this and see if there is a way to fix it.. Turns out that the TabbedPage.CurrentPage is null on iOS when in the \"More\" group. I'm not sure this can be fixed as I don't see a way to access the current tab.  Let me dig around and see what I can find.  If you have any ideas on how to approach this, please feel free to throw out your ideas.. I have reported this bug to Xamarin, and will update this issue when a fix has been provided:\nhttps://github.com/xamarin/Xamarin.Forms/issues/1336. The Xamarin Live Player is very limited and does not support Prism apps.  Heck it doesn't support custom renderers.  There is a full list of limitations on the Xamarin website.. You should be setting the backing field in the ctor, not the property that invokes the INPC methods.  That, or set a default value for the backing field which would eliminate any property values being set in the ctor.. You can write a custom region behavior to accomplish this in your app. This will most likely not be included in Prism as I cannot assume that when a view is removed from a region that it will not be reused again.. I've actually decided to include this. If someone is trying to reuse VM's after they have been removed from a Region, then it is the developers responsibility not to \"clean them up\" or even implement this interface.. Done!. Thanks for pointing this out. This is actually a very common issue in WPF and I can't believe I completely missed this.. There are a number of \"leaks\" that are caused by the automation peers holding onto objects for a really long time when the app is running on a touch screen, or a screen where the automation peers is enabled.  This is a known issue with MS, and they don't have a solution yet.. Actually, this is a common issue with WPF.  If a Window binds to an object that is not a DO or implements INPC, it will leak.  You can see it in this sample: \nWpfBindingIssue.zip\n. @dvorn After sleeping on it, I actually agree with you.  This is a pretty bad, and misleading \"fix\". I also didn't see any difference in my snapshots.  I am going to revert this as it really is a bad approach to a non-issue.. It sounds to me like you have some design smell going on. A command controls the state of the IsEnabled of the button it is bound to, not the other way around. This not going to supported. . This is not a Prism issue. The Prism Template Pack project templates use the new PackageReference approach to managing NuGet.  You should reach out to NLog to determine if they will work with PackageReference.. This is not a bug.  This is expected.  You are not defining a custom page as a Tab, instead you are using a standard ContentPage element within XMAL.  This also means that you are not providing a BindingContext for the ContentPage you are defining.  This forces the ContentPage to inherit the BindingContext of the TabbedPage instead.  That is why it is being called twice in your sample.  The ContentPage is using the same ViewModel instance that the TabbedPage is using as it's BindingContext.. This is because in 6.3 the navigation pattern for tabbed pages was different. In 7.0 we changed how tabbed page nav works.  It doesn't matter how many content pages you add. OnNavigatedTo will be invoked on the TabbedPage AND the CurrentPage.  Since you are using the same ViewModel for both pages, it gets fired twice.  It will not fire on all ContentPages.\n. I could probably add a check to see if the BindingContext is the same for both the TabbedPage and CurrentPage and not invoke OnNavigatedTo if they match.  This is really an edge case as it is recommended to have a separate Page for each tab and to not define the tabs inline.. I checked in a fix. You can try it out in the latest CI build on MyGet.. You should reach out to the Xamarin forums for help with their platform. When you get an answer, you can place the answer here to help anyone else with a similar question.. This is really simple, but will require custom code.  You simply add items to your own custom stack when you navigate to a view, and remove them when you navigate away from the view.. There are many ways to do this.  The source code is available for you to study to find the appropriate approach that will work for your specific scenario.. This is not something we will be adding to Prism. Going forward please create an issue to discuss your ideas first before submitting a PR to save you the time and effort.. Because we are not in the business of supporting pay-to-play third party vendors.  If we started doing this, then every tool would want some type of support. Plus we have to take on the maintenance burden of this. BindableBase is very simple and you can use your own implementation.  You are not required to use BindableBase.. Nice little improvement.. Unfortuntaely not.  Prism 7 will continue to target the latest version of XF.. You should inherit from the PageNavigationService and override the internal methods.  Let me know if this still is a blocker for you.. I think we can fix this simply by making INavigateInternal public\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/INavigateInternal.cs. Prism has no influence on how many times this gets called.  All Prism does is create the page and adds it to the navigation stack.. The current CI builds on MyGet require Unity 5.2.1. The current Preview on NuGet requires Unity 5.2.0. Make sure you are using the correct version of Unity for the version of Prism you are using.. This has nothing to do with Prism.  I suggest asking on the Xamarin forums or using Google to help you with your build issue.. This has already been fixed and is available in the latest CI build.. When we release v7 in early Jan. By the way, the fix is already available in Nuget packages available on MyGet.. EDIT: Just re-read your issue. This should work. Make sure your pages are registered for navigation.. Provide a sample that can reproduce the issue. This is one of those issues that applies to a specific implementation.  The recommendation in this case would be to create your own region behavior and register it in the app that requires this functionality.  If in the future more people need this functionality, it can be re-evaluated for inclusion in the Prism code base.. That is a different issue.  That was not a region support request, it was for a ViewModelLocator request which also has a work-around. Even if it was the same, two requests do not constitute a wide usage requirement.. The work-around is to replace the current delayed region behavior with your own implementation to account for the required FrameworkContentElement.. Have you tried just registering your behavior in the ConfigureDefaultRegionBehaviors?. give it what ever key you want. This behavior should be specific to your RameworkContentElement and not duplicate the existing one.  You aren't replacing, you're adding.. Submit a PR with your proposed fix with supporting tests. if it's low enough impact, we will consider adding it.  . Fixed by the community! A big thank you to @JimWuerch for the PR. automatic resolution is no longer supported in v7. You should register your platform specific types in the platform initializer.. Going forward, you must first submit an issue describing your issue before submitting a PR. Your PR is also missing unit tests for the feature being added. Currently, this is not something we are going to add to Prism.. Hold on now. I wouldn't go making all those changes just yet.  This is getting way outside the scope of what I am comfortable with. Especially since there have been very few reports of this.  I would keep what you have except remove the exception.  If more work is needed it can be discussed in s separate issue with a sample the reproduces the issue.. Thanks for the PR. Its a small risk addition, and I hope it is beneficial to many more people who have not voiced their issues yet.  Thanks again.. That seems like a lot of work for little reward.  I'm not 100% sure, but you can try a few things.  You would have to have a custom navigation service in which you override the CreatePage method to resolve using your scoped container.  Then you may need to override the ConfigureViewmodelLocator in PrismApplicationBase for resolving the ViewModel and it's associated navigation service.\nAll the source is available for you to study and try to figure it out.\nGood luck.\n. Thanks for the sample.  It really helped me understand the potential issue.  Although rare, it would cause some difficult to debug issues.\nI think this is an acceptable addition.  My only feedback would be to call Track after we first checked if the DO was an FE or an FCE.  Only if those checks failed would we add it to the list.\nIf you prepare a PR for review we can get this added.. Fixed. Hmmmm.... I'm not convinced this is something that Prism should be responsible for.  Prism assumes that the developer has made sure all dependencies are in place when dynamically loading modules.  Also, it seems you do have a work-around by creating your own directory module catalog and implementing the feature specific to your scenario.\nI am open to making the DirectoryModuleCatalog more extensible (option 3). If you would like to submit a PR for review with your proposed changes, I would be willing to review it for consideration.. See my response in the PR for why this issue is being closed.. Thanks for the fix. This is great!. Great catch!  Don't worry about that test. The Xamarin.Forms tests have issues sometimes and randomly fail.  I just reran the build and it passed.  No biggie.. Debugging symbols are loaded just fine while debugging Prism source.  Can you explain the scenario with more detail?  Could you provide a sample to demonstrate you risse more clearly?. Oh wait... I had to re-read that.  I see that you are navigating from a MasterDetailPage, not from within the actual TabbedPage.  This is actually a very interesting scenario.  Can you please provide a sample app that sets up the scenario that I can use to test the behavior out?. Done. You can test it out in the latest CI builds on MyGet, or wait for the SR release.. The fix is not on Nuget, it's in our CI feed.. yeah, don't worry about that error. We have random test failure with Xamarin.Forms for some strange reason. We have never figured out why. I will rebuild it and it will work just fine.\nI'll review this when I get a chance.. After reviewing this PR and researching the use of MarshalByRefObject, I do not feel comfortable with this change.  The files should be loaded from the directory while within the context of the InnerModuleInfoLoader. This is extremely important when it comes to loading modules in directories that may exist in a shared network location.\nWhile FileInfo may also be a MarhsalByRefObject I cannot in good conscience merge this PR based on \n\nthis should not cause any problems.\n\nThis must be proven in order to validate this PR will not cause any issues for any extsing applications.  You current workaround of creating your own directory catalog is going to be the recommended approach.\nThank you for taking the time to put this together.. Honestly, I'm not sure I would be storing the DB context in the container, but rather a service that manages that stuff and register the service with the container.\nYou are more than welcome to extend Prism to meet your desired outcome.  Good luck.. I'm going to need a sample. You're doing some strange things that may be causing the problem.  As you can see, any time you navigate in Prism it adds the parameter\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/PageNavigationService.cs#L545\n. It has been a week since you submitted your issue, and I cannot reproduce this on my end (I'm not using any other the thread code you are as it's not needed).  I am closing this until a sample can be provided to help reproduce the issue.. Going forward, please follow the Issue template that you are provided when submitting issues.  This helps us in our process of providing support.\nPlease prepare a sample or PR to discuss your requested changes.  Keep in mind that you cannot remove the current moduleName signature as that would be a breaking change to anyone handling this exception.. Also, have you tried handling the IModuleManager LoadModuleCompleted event and checking the error?  It provides the actual ModuleInfo object you are requesting.. I have thought about this a little longer, and unfortunately I do not think this is a change I am ready to make.  Given the very unique circumstances and needs in your app, this is not a change that is warranted at this time.  If this issue is a reoccurring issue with other users, I will reconsider.\nThanks.. I do not understand your issue.  Please create a simple app that can reproduce your issue as that will help clarify any language barriers.  Also, if you could please try to be more specific. For example ( I don't know what \"backward date\" means.. Completed with #1348 . Great addition!. @saifxx This is not currently available in WPF.  However, you can take the code and adapt it for WPF.. Unfortunately no.  WPF has a vastly different Region Navigation that these interfaces will not work unless a new navigation service is written for WPF.. Which by the way, I have considered writing a simplified version of the INavigationService for WPF, but it would be very limited compared to the full region navigation.  So I'm not sure if it would be worth it or not.. You are using an old and unsupported version of Prism.  Also, you are using MEF which is not supported.  MEF was dropped from Prism support due to the many issues you run into while trying to use it as a container.  Also, the stack trace makes me think the issue is with your code and MEF itself.  This is not a Prism issue.\nGood luck. Yes, Prism has always supported Unity. Do not upgrade it. Take the version that Prism 6.3 depends on.. You can create your own IContainerExtension and use that instead.  Also, using the MS DI abstractions is not an option.  It is not compatible with the requirements of Prism. Our DI abstraction cannot be immutable, and requires the registration and resolution by name.  These are non-negotiables.. Its mainly for auto ViewModel registrations. Otherwise an exception would be thrown unless you manually registered the ViewModels separately.. Please provide a sample that reproduces this issue.. Verified. Thanks for submitting this.. You can get it now in the latest CI builds on MyGet.  We have some pretty large efforts going on right now regarding aligning Prism across platforms, so I don't have a timeframe for the next preview.. It works just fine. You aren't setting the useModalNavigation parameter to true.. Because you can't set the Detail of a MasterDetail to another MasterDetailPage. Therefore you must push it modally.  Looks like you have it figured out.. Are you expecting these methods to fire when you change pages within the CarouselPage?  Or, are these not firing when navigating away from the CarouselPage to another Page in the navigation stack?\nAlso, I thought CarouselPage is a dead page and Xamarin was working on a CarouselView instead :). Thanks for the clarification. Should be an easy fix.\nI don't see many people using the CarouselPage, so I was just curious :). fixed. You need to provide more information. The issue template asked a number of question that would help guide you to provide the information we need in order to properly support you.  I am assuming you are trying to use WPF.  This means you need to make use you are using version 6.3.\nSince you can't use Nuget, you can download the assemblies here: https://github.com/PrismLibrary/Prism/releases/tag/Prism.v6.3.0\nAlso, the assemblies you provided are not Prism assemblies and are not supported by Prism.. Also in Prism 7, you use the container to register your custom nav service instead of overriding a method.. You need to replace Prism's ServiceLocator with yours\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Bootstrapper.cs#L203. You need to make sure the container being used in your new service locator is the same one that is being used by Prism. Otherwise nothing will work.. Well, yes and no.  We are in the process of using an abstraction around any DI framework in our new Ioc namespace.  So the use of the actual ServiceLocator class will most likely be removed, but we will still need to use an internal class (which will be the service locator pattern) that gives us access to our abstraction API to resolve objects within the framework.. This is what we are moving to:  https://github.com/PrismLibrary/Prism/tree/master/Source/Prism/Ioc\n. It will be in v7 for WPF, which has no release date.. Your first problem is that you aren't using the navigation service when the app starts. So the INavigationAware methods will never fire.  You're doing this: \nthis. MainPage = new RegiApp.Views.GlasgowDeviceList();\nWhen you should be doing this:\nNavigationService.NavigateAsync(\"GlasgowDeviceList\");\nYour next problem is that you are throwing exceptions in all of the INavigationAware methods. You need to remove all the throw new NotImplementedException(); from your implementation. As yu know, if you throw an exception, you basically halt all other processing of your code (in this case Prism's code).. By the way, you need to remove the Prism.Unity 6.3 nuget package. That's for WPF :). This is not related to Prism.  All Prism does is create a tab and stick your content inside of it.  You are using custom tab controls with third party libraries.  There is also no telling what your code looks like that fetches ands loads data.  There are a lot of variables that go into perceived performance.  I see you're using a DataSet, those by themsleves are slow.. The NavigationMode is not a property that should be set by end-users.  It is meant for internal uses only.  However, if you must do this you can just call methods off of the NavigationParameters class. They are just hidden from intellisense\nhttps://github.com/PrismLibrary/Prism/blob/7c96c9ab89210290ac8f13686077a03a4c45dc29/Source/Xamarin/Prism.Forms/Navigation/NavigationParameters.cs#L25\nBy the way, this will be changing in an upcoming release, so your code will break and you will have to refactor to explicitly cast an interface.. Questions like this a better suited for SO.  However, you can do anything you want, it's just code.  My first thought would be to have your page implement IDestructible and then traverse your element tree and do what you need to there.. Also, you don't have to unsubscribe from the IEventAggregator. It uses weak references and manages the memory allocation for your events automatically.. Oh MessagingCenter is a peace of crap.  Yeah, that's a major source of memory leaks. You should be using the IEventAggregator instead :). INavigationSerrvice is being used across platforms, which is why there are extensions for platform specific scenarios.  You can mock it and you can test it.  For now you have to have your mock derive from the prism implementation and then override the methods you are testing.  This has been improved in the latest CI build to where this is no longer necessary and you can have your own POCO class implement the required interfaces.. We cannot remove the INavigationServiceExtensions. This is what gives us the ability to share our INavService across platforms yet still give us the ability to perform platform specific navigation.  The one thing I would be willing to do it rename INavigateInternal and make it public.. We are in the process of aligning this implementation, which is why UWP has not been released yet.. This is by design.  You cannot inject the INavService into anything other than a ViewModel that is associated with a Page.\nNo, navigation in XF is not based, and cannot be based, on a singleton.  Using singletons has nothing to do with avoiding memory leaks, and in fact can be a source of memory leaks if hooking into events.. Also, having singleton based Pages in XF is very dangerous.  For example, let's assume your navigation stack looks like this:\n\"NavigationPage/ViewA/ProductList\"\nif you registered ViewA for navigation as a singleton, and then tried to navigate from the ProductList page to \"ViewA\" again, an exception would be thrown because it already exist in the navigation stack.  If you really want to do this you can, you'll just have to implement it yourself using the existing source code as a guide.. This tells me you aren't following the namespace/naming conventions. Just register the VM with the View and you'll be fine.  RegisterForNavigation<View, VM>. I have confirmed this as a bug within Xamarin.Forms.  I have reproduced this in a non-Prism application and have submitted it to the XF GitHub issues for the Xamarin team to fix.  I will update this issue when they have fixed their bug.\nhttps://github.com/xamarin/Xamarin.Forms/issues/2562. Yeah.... this is a known issue and WPF v7.0 is still being worked on and is not stable as this time.\nIf you wated to keep playing around with the latest CI build just add this to your App.xaml.cs\nprotected override void RegisterRequiredTypes(IContainerRegistry containerRegistry)\n        {\n            containerRegistry.RegisterInstance((IContainerExtension)Container);\n            base.RegisterRequiredTypes(containerRegistry);\n        }\nThis will fix it.\n. Thank you for your effort and willingness to contribute to Prism.  Unfortunately, we do not want to start including concepts such as validation into the Prism Library at this time.  The documentation is there to help guide developers on how to start implementing validation to meet their needs, but it's not something we will be including.  Thank you. If writing production apps, you should use the current v6.3 for WPF.  If you must use the preview, you must upgrade Unity first.  You might be better off using our CI builds if you are trying to use Prism for WPF v7.  It is still being worked on and is not stable yet.. You cannot update Prism.Core packages with WPF 6.3, they are not binary compatible.  You should only be using v6.3 for all packages in WPF.  The preview will work because it is binary compatible, but it is in preview and not guaranteed to be stable.. Yes, you should wait.  As I said, you cannot use the latest Prsm.Core v7 with the existing Prism.WPF.  Stay with Prism 6.3 until we have officially released the v7 for WPF.  If you use any PRE builds, you risk having an unstable app.. Property injection is not supported with the INavigationService.. This is by design. OnNavigatingTo cannot be called when the hardware/software buttons are pressed, only when calling the GoBackAsync method can we execute the OnNavigatingTo methods.. Glad you figure it out. Not a known issue. The MainPage is set synchronously.  No new threads are created as Prism sets the MainPage directly, and the MainPage cannot be set from a different thread. Prism always uses the built-in XF navigation APIs and does nothing special when it comes to navigation.. Actually, the developer shouldn't care what happens under the covers.  All they need to know is that they asked to navigate somewhere, and they did.  As there are three different navigation patterns in XF, it wouldn't make sense to force the developer to know the difference between a Navigate and NavigateAsync or when to use them, especially when you start getting into modal and non-modal nav... You know the mainPage is set after you make the call to navigate.  You can test this by checking the MainPage property after the navigate call.. You can also await the navigation call, but it doesn't matter, it will behave the same. You can await the call in OnInitialized.. you can add the async modifier. Which is it, OnNavigatingTo or OnNavigatedTo?  You said both.  Is it firing twice on MainPage? OnNavigatingTo is fired on all children.  Also you did not provide a reproduction app which is required when trying to have us investigate an issue. . This is why the repro is required. I don't know what you are doing wrong because I don't see any of the code.  If your child tabs do not have their own ViewModels, then yes they will use the MainTabbedPage VM as their binding context and the methods will fire twice.. I'm glad you narrowed down your issue to your application code. Unfortunately, I do not have time to debug your app. The good news is that you have enough information to start working the problem to figure out what part of your code could be causing it.. We have to remove the NavigationMode class that exists in the Prism.Forms solution before this can be merged. Also, there are no /// comments.. Just because you navigate away from a page does not means it and all its resources are disposed of immediately.  Prism has zero control over when the UWP framework decides to dispose of any objects in memory. You should either filter your subscriptions, unsubscribe from them or make sure you have proper code in your event handlers to check for nulls as to not throw exceptions.  If your app crashes because of events being fired then you need to start looking into your implementation of those methods, because simply executing events multiple times will not cause your app to crash. ViewModeLocator odes nothing but create the VM and assign the DataContext.  So regardless of how you set the DataContext, you will have the same issue.. While containers can keep objects in memory, they don't control when the GC is called or even when objects will be freed from memory.. Closing because there is not enough information in this issue.. The bootstrapper isn't going away. The only way to drive people to the new PrismApplication, is to use the attribute to make the announcement.  I can clarify the  message.. primitive types are not supported as the generic. They must be nullable.\nDelegateCommand<int?>. Please provide a running sample that replicates the issue. There is not enough information here to help. I don't know what your shell looks like, what's in the shell, how the MainView gets in the shell or when.  It sounds like your MainView doesn't exist at the time you fire the event, which is why it will work if you manually resolve then object. You may have a design issue.. This question belongs on SO. GitHub issues are meant for bugs and feature requests.\nMy only hint to you would be not to try and manage regionManagers. That's the wrong approach. Instead you want to manage state. You will need to save off the state describing your user and where they are in the app, and then restore that state when they log back in.. My thought would be to save the user info, the view name they are on (not the instance), and any state in the view I might need. Using that you should be able to navigate to that view again and restore the state of that view.. You haven't provided enough information, nor a required reproduction app. I don't know what SafeNavigateSync is or what code you have modified. The error is helping you identify what the problem is.  Remove is not supported for modal pages, only pages within a NavigationPage. As I said, RemovePage is not supported for modal pages, only pages within a NavigationPage. Yes, I am aware of this.  As of now, this is how the feature was designed.  I will have to discuss with the team if we want to change how this works and support the NavigationParameters class too.. I have a couple of concerns about implementing this.  First, there would be an immediate limitation of not being able to deep link into an app that has multiple TabbedPages.  This is because both TabbedPages would read the NavParams class and create tabs based on those values.  This could be very bad, and there is no way to control it.  Another problem is the amount of code churn and logic that would need to be added to the NavigationService to support this.\nThe safest and most reliable way to do this would be to keep it in the query string.  However, if there is an overwhelming request from the community, we can add it, but will have to note the known limitation which many people won't know about until they actually run into the problem and open an issue here :)\nThoughts?. After thinking about this more, I have decided not to suppor this for the reasons I outline in my previous comment. However, you can still use the NavigationParameters class if you like, you just have to provide them inline in the URI like you outlined in your example.. You cannot change values of readonly properties so trying to listen for value changes is not neccessary.. Hmmmm... I'm not sure about this.  Have you tried modifying the Prism source to support UnaryExpressions and running the tests to see if they pass? If it's a simple as modifying our guard clause to check which expression type it is, I may be open to it. That's assuming there are no other issues that arise from trying to support it.. Why are you using RegisterViewWithRegion? You would only ever use that during initial module initializing. Just add the view to the region. Depending on what else is there you may have to activate it too. Please ask these types of questions on StackOverlfow or the slack channel. The issues page is for bugs/features.  Thanks. You're doing something wrong. It's not a bug.. MEF is no longer supported. If you want to use MEF you will have to modify the code to make it work.. By the way, the CommonServcieLocator package is up to date https://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/packages.config#L3. You're confusing the released version vs. the current master code base which is being developed but not released. What is released on NuGet is v6.3 (not updated to CSL 2.0.x). What is in the repo is v7.0.. I'm sorry, but this is not a Prism issue. You should post this on the Xamarin.Forms support channels such as their forums.. Sorry for the late response, I have been slammed at work.\nActually, this is somewhat by design.  First the detail page is navigated to and then the IsPresented property is set to false.  We could change this order, but then the navigation drawer would be closed and then the page would be navigated to which may be even more awkward.\nAs far as the back button showing and then hiding, this is the result of reusing the NavigationPage.  What happens is that the target page is navigated onto the NavigatoinPage's nav stack.  This causes the back arrow to show. Then the other page you are navigating away from is removed from the Navigationpage's stack and then the back button would disappear and then you get the hambuger menu.\nThis is a little trickier because we don't want to recreate the NavigationPage each time you navigate to it, but I can see where this back button flash can be a little annoying.\nNot really sure what to do here. Did anyone have more thoughts on this? If not, I am going to close this issue.. I'm really struggling with this one because I don't like having two ways of doing the same thing. There is already a GoBackAsync API meant for going back.  However, this would only work within a NaviationPage, so it may not be that big of a deal.. It's important to understand that the \"../\" does a RemovePage operation, and not a Pop. So this means that if you were to try and use \"../\" without pushing another page, you would not get the pop (go back)animation. This may not be the desired end-user experience.  I would almost just say that you should call GoBackAsync multiple times.. Yeah, I'm having a hard time convincing myself to implement this.. This has been implemented in the form of PR #1427. This will be merged later today and available via our CI builds on MyGet for testing.. Prism has no relation to Workflow Foundation or it's toolbox items.. Of course Prism is going to be around for the foreseeable future. Not only is it actively under development, but it's part of the .NET Foundation, which guarantees its life even after I win the lottery and move on to other things :)\nClickOnce is not a product that Prism provides.  That is a completely different product that was provided by Microsoft.  Which by the way is a dead technology, so I wouldn't recommend using it.  If you want better documentation for ClickOnce, you need to ask Microsoft to write it.\nBuilding installers for Prism is simple and there shouldn't be anything complex about it.  Actually, it's no different than creating an installer for any other app.  Just ship the required assemblies in your installer and it will work.\nGoing forward, I suggest you ask questions like these on StackOverflow as the issues page is reserved for bugs/features with the Prism Library.\nGood luck.. The part you're looking for is  startupLoaded=\"false\". You did not provide enough information about your issue. We will require a reproduction app in order to help.. I don't need a code sample, that won't help. You should create a simple app the can reproduce the issue outside the scope of your application logic. Hence, no privacy issues.. Thank you for the issue, but we are not accepting new issues for UWP.  UWP is being rewritten from the ground up and merged with Template10.. Than you for the PR, but we are not accepting new PR's or issues for UWP.  UWP is being rewritten from the ground up and merged with Template10.. Yes, it's the same as if you weren't using prism. Wrap your Master in a NavpAge and then each page should have it's own VM. You'll have to do some tricks to navigate the detail page when using this approach, but it's not too hard.\nGood luck. Sounds like Telerik made a bad decision creating a Window control that's not a Window.  At this time we are not planning to change the return type of CreateShell.  However, you can still use your RadWindow.  Just return null in CreateShell, and then override OnInitialized to show your RadWindow. Or continue to use the bootstrapper, since it's not going anywhere anytime soon.. @njsent follow the code snippet above. Return null from CreateShell, and then override OnIitialized.. So are you launching a WinForms app that contains WPF views or are you launching a WPF app that hosts WinForms views?. Ahhhhh.. in that case just keep using the bootstrapper :). Closing this issue because the reproduction link has not been provided (the issue template labels this as required).  The main thing to verify is that INPC for the BirthDate is being executed.  My recommendation would be to call INPC manually and see if the behavior changes.. Create a blank WPF app, add the minimal code to reproduce the issue, upload it to your github and provide the link to the repo.  INPC = INotifyPropertyChanged. First off, your CapturedAge property is private. This won't work, it must be public.  Secondly, your CapturedAge isn't calling INPC, so once again this won't work.  Fix your CapturedAge property:\nprivate ConfirmCustomerAge _capturedAge;\n        public ConfirmCustomerAge CapturedAge\n        {\n            get => _capturedAge;\n            set\n            {\n                _capturedAge = value;\n                RaisePropertyChanged();\n            }\n        }\nWhile you're at it fix your BirthDate property too.\nprivate DateTime? _birthDate;\n        [Required]\n        public DateTime? BirthDate\n        {\n            get\n            {\n                return _birthDate;\n            }\n            set\n            {\n                _birthDate = value;\n                RaisePropertyChanged();\n            }\n        }. It works against the latest source code in master.  Upgrade to the latest 7.1.0.123-pre and try again.  It works.\nWhen you upgrade, you'll want to uninstall the Unity package.. Have you tried Region.Add?  Also, going forward questions belong on SO or our slack channel. We reserve the Issues for bugs and feature requests.. Can't reproduce this and no repro app has been provided.. The reason is because Prism for Xamarin.Forms released first. We are in the process of aligning Prism, but not by version.  We are aligning features across WPF, UWP, and XF. So this is a much larger and riskier effort which is going to take time.. because Prism calls the INavAware methods on both the DataContext and the View. If you aren't using MVVM, then don't set the DataContext. This is not something that we will be impleemnting as it goes against the core of Prism guidance.. We have no control over the behavior of the container API. Also, you did not provide a sample that reproduces the issue.. You provided no information on your issue, or the required reproduction app, so I am closing this issue.\nYes, DelegateCommand should work on any NetStandard compatible project.. I think the next big step is to figure out how to properly cache the INavService for a page so that multiple buttons on the same page do not create different instances of the INavService.  When doing this, we must also consider how to remove that INavServce from the cache so we do not create memory leaks.. Also, we must point out that this is not supported in custom ContentViews. Really, does it work? We currently have issues getting the parent Page object from within a CustomView with the current VM based approach, but if you're saying this markup extension gets it no problem, then maybe this is a non-issue.  That would be pretty cool.. @jassmith To fully understand Xamarin's expected function, we'll need some bits to play with \ud83d\ude03.  As you know, Prism already have a very powerful navigation framework which includes deeplinking, flexible parameters, and with various options for developers to hook into the navigation process to respond to events such as CanNavigate, OnNavigatingTo, OnNavigtedTo and OnNavigatedTo.\nI'm not sure we would be able to utilize anythign that is built into Forms as we would want to make sure all of the current navigation features are kept and function as expected.  However, we would definitely take what you create and modify it to fit our needs. It may be as simple as deriving a custom markup extension from your implementation and overriding some methods that you provide to inject our navigation service that does the actual navigation.\nWhat we want to avoid having is two different ways of navigation and two different navigation behaviors.  The behavior of navigation in Prism should be the same regardless of if you are within the MaterialShell, or not.\nIt is hard for me to understand how navigation in the MaterialShell will actually behave.  There are no screenshots to accompany the code snippets, and the instructions aren't quite clear enough for me to visualize how the navigation stack is modified when navigating within the MaterialShell.\nFor example:\n<ShellItem>\n    <local:MyFirstPage x:Name=\"page1\" />\n    <local:MySecondPage x:Name=\"page2\" />\n    <local:MyThirdPage x:Name=\"page3\" />\n  </ShellItem>\nThis snippet doesn't really make sense. You have a parent object called ShellItem, but multiple items within that element. What is the context of these pages? are they within a TabbedPage/TabbedView, or something else?\nWhen you get a nightly build of your experimental branch, we wil most definitely play around with it and see if we can use what you have, derive from what you have, or create something new to support this.. When dealing with a Master in the MDP, the VM should always be the MDP VM.  When within the Detail of the MDP, the VM should always be of the Detail, and not the MDP. So based on your description of the IServiceProvider behavior, it works as expected.. We don't need to provide a Page in XAML unless the IServiceProvider can't give it to us, which seems to be the issue you ran into in your post above.. I thought it was related to your comment:\n\nI'm also looking at supporting MasterDetailPage and TabbedPage. The IServiceProvider doesn't actually send that page but rather the contentpage within. I think we need a way to supply the page via an attached Property\n\nIf this isn't an issue, then great.. http://prismlibrary.github.io/docs/xamarin-forms/navigation/xaml-navigation.html. This really has nothing to do with Prism. This is related to the async/await API and it's behavior.  Also you did not provide the required production link, so this issue will be closed.. Yes, you should always provide as sample because I did not fully understand your scenario, and now I can perfectly see your problem.  You are not awaiting the async navigation calls.  Navigation in Xamarin.Forms is async. There is no sync version of navigation in XF.. I am closing this as we do not need an issue to remind us that our docs are way out of date :)\nWe'll get there.... eventually.. At this time, we currently do not support nested navigation via a deep link URI.  For now, you will have manually handle this by sending a parameter to your Tab and then forcing another navigation based on the value.. You will have to call navigate within the nested page's (hubs page) VM in order to perform proper nested navigation.. Yes it does. Have you tried using Container.Resolve in the PrismApplication?  It's there.. MEF is no longer supported.  So anything past v6.3 will not work.. First off, you're right, this is an unusual design. Nesting navigation pages is never a good idea, and is not recommended.  Also, this is really not a scenario that we have tested against, nor are we really inclined to acually support at this time... Of course we plan on supporting it. Whenever we release 7.1, it will support XF 3.0. Thank you for the update. I hope they fix your issue soon.. @dvorn is correct. This is by design.. You have so many probelms in that sample, the most basic features would never work. First word of advice, don't register ViewModels as singletons. Heck, you don't have to even register them.  You most definitely should never be trying to inject them into another VM.  I suggest looking at the WPF samples to see how you should be sturcturing your applicatin.. This is not a pattern that is well suited for error handling.  This would also be very difficult to actually implement as the information requested may not be available depending on where the error occurred. Not to mention, most of that info is already available to you from within the VM you are calling navigate.  I could possibly see adding an OnError event to the navigation service, but this is not really necessary now that we have the async model and the result is returned directly from the task.\nI think the core of what you want to do is find a way to handle a navigation error in the new XAML markup extension, which is a separate issue that should be discussed in #1431 . I get it, but this is not a pattern that I would recommend for error handling. I'm sure we can come up with something else.. The Prism Template pack will be updated when we release the next version of Prism.. @TedMobile we have integration builds that are published to our MyGet feed on every build we do. That's about as updated as you can get :). If that's the case, then you'll just have to wait until we have time to do an official release.\nWe do not have official roadmaps. We squeeze Prism in when we have time between our demanding day jobs, family time, and sleep.  It's coming slow, but we are almost at a point where we can release 7.1. We are targeting Oct for a 7.1 release.. The Prism Template Pack has been updated with the latest preview updates and is available on the Patreon site for Platinum patrons. \nhttps://www.patreon.com/prismlibrary\nWhen Prism 7.1 is released as RTM in Oct, the Prism Template Pack will be made available on the Visual Studio Marketplace.. There are a number of reasons WPF will never make it into XF.  As @pprometey mentioned, WPF is a dead-end branch in XF. Microsoft (Xamarin) only merged it because it was a community PR and they have no plans of actually supporting it. As it sits now, the support is very basic and not worth even using for a real production app.  If you want to have a WPF app, just write one.  You can reuse all your VM's if you wish, but running a mobile app \"as-is\" on desktop is just a bad idea in general.. Thanks for the idea, but this is not a pattern that would be recommended. There are a couple issues to this approach, the big one being creating a coupling between your VM's.  You are more than welcome to create something specific to your app to support this, but we will not be adding it to Prism.. There is not enough information to in this post to help us confidently pin-point your issue, and you have not provided a reduction link.  My best guess is that you want to reset the navigation stack, so you need to use an absolute URI by prefixing your nav path with a \"/\".  So for example; /NavigationPage/LoginPage/. As I said, there is not enough information in your issue to give us a clue into what your problem is and you did not provide the required reproduction app.  This is most likely an issue with how you are structuring your app and navigating.. Great catch! Thanks for the fix.. Thanks for the PR.. You've already posted your question on SO which is the correct place to ask this question.\nhttps://stackoverflow.com/questions/50622646/xamarin-contentpage-toolbaritems-after-navigationservice-navigateasync-login. Your question is not clear and you have not provided enough information for anyone to help.  I suggest editing your SO question to include more detail and even a running sample that demonstrates the issue.. Also, I am not seeing a question here. This is exactly how it works.. No, because you are navigating from a tab within a TabbedPage.  If your Tab was nested within a NavigationPage, then it would have worked as you expected.  In this case the TabbedPage is nested within a NavigationPage, and since you are not navigating from the TabbedPage, you are not adding to the NaviagtionPage's nav stack.. Closing as you did not provide the required reproduction link.  Also , there is no navigation code specific to iOS or Android. All navigation uses the built-in XF navigation API. If there is an issue, most likely it is a bug in XF, but without a reproduction app, we won't know for sure.. Thanks for the link, we'll look into it.. Just to be clear, this was not a bug in Prism :).  Xamarin must have broken something and then fixed it in the latest release.  We haven't touched that logic for INavAware in a very long time.. You could try upgrading your version of XF to the latest, or just start using the current preview of Prism 7.1. First of all, try upgrading to the latest version and see if it works as expected. Second of all, you did not provide a sample application that reproduces you issue so this results in the automatic close of your issue.. Closing this issue as you did not provide the required application that reproduces your issue. There have been no changes in the event aggregator since v1 and all tests are continuing to pass.  It's likely something in your app, but we will not know what because you did not provide a sample.. Actually, I am leaning more towards creating a brand new EventToCommandBehavior instead of using the interactivity features.. @myermian  I am starting to look at this and I was just curious how using the PropertyPath type would be beneficial? PropertPath.Path is just a string, and reflection would still need to be done in order to get any nested values.. Since I am now a project maintainer for the Microsoft WPF Behaviors, I am working on improving the MS InvokeCommandAction and then deprecating the Prism version.. You just need to await the navigation call. No need to add the Task.Yield.. I found the problem. The issue is that Autofac is now immutable, which means that we can't create the ServiceLocator instance until after the container has been finialized, AND we can't register the ServiceLocator instance after the container has been finalized because it's immutable.\nI may be able to fix it, but that would require writing a base app class specifically for autofac.\nI think we should just drop support for Autofac.  It has proven to be a real pain in the ass.. Not to mention that Autofac does not support modules at this time since it is an immutable container. Fixed. You can test it out in the latest CI build. Though, you won't have module support.. @okadabasso Autofac support is being dropped. Since it has changed to be immutable, it can no longer support the features of Prism. If you wish to continue using autofac, you will have to write your own extension for it. You would be better off using a different container.. @topfunet See http://prismlibrary.github.io/docs/wpf/Navigation.html#navigating-to-existing-views\n\"Note: For Prism to determine the type of the target view, the view's name in the navigation URI should be the same as the actual target type's short type name. For example, if your view is implemented by the MyApp.Views.EmployeeDetailsView class, the view name specified in the navigation URI should be EmployeeDetailsView. This is the default behavior provided by Prism. You can customize this behavior by implementing a custom content loader class; you can do this by implementing the IRegionNavigationContentLoader interface or by deriving from the RegionNavigationContentLoader class.\"\nTo implement the required custom classes, just look at the code that Prism already provides to use as a guide.. Fixed. You can test it out in the latest CI build.. This has already been fixed. Try the latest CI build on MyGet\nhttps://github.com/PrismLibrary/Prism/pull/1457. Thank you for becoming a patron. Unfortunately, this is not Prism related and is not the correct forum for this type of question. It appears you are using a Syncfusion control, so I suggest reaching out to them for help with their controls.. You recieve an invite to Slack when you become a patron.  Keep in mind that Patreon charges at the beginning of each month so if you became a patron in July, you will recieve your invite on Aug 1st.\nhttps://www.patreon.com/prismlibrary\n. Closing as you have not provided a reproduction sample. Also, make sure you verify that your DataContext is being set properly.. We will not be adding the IView interface back in. It should have never been added and is not required to test mock views in integration tests.. You are doing integration testing with a UI. You should use objects that represent actual UI elements. Otherwise, your tests will not represent the actual running environment and may return invalid results.\nIn general, integration tests don't use mocks. Everyone's experience is different. The common agreed upon definitions; unit tests verify that a relatively small piece of code is doing what it is intended to do. They are narrow in scope, they should be easy to write and execute. Integration tests is done to demonstrate that different pieces of the system work together. Integration tests cover whole applications, and they require much more effort to put together.\nI personally would not be trying to write integration tests against a UI that isn't a UI object.\nHaving said that, you should test with the approach you know and are comfortable with. Prism does not have an abstraction for the UI so if you wish to test anything UI related to Prism navigation it will require the use of FrameworkElements.  Unless, you mock the various pieces of Prism that are using those object types.. I was on the P&P team when we added the IView and it wasn't for view testability reasons.  It actualy had nothing to do with that.  It was specifically for the ViewModeLocator. Once that was introduced, it caused major design time crashes inside VS and it was also not compatible with Xamarin.  It also created a barrier to productivity and feature usage.  After tons of complaints and issues, a new approach was created and IView was removed.. Correct, as I mentioned, the only use of IView was the ViewModelLocator that you just highlighted. The intent of the test you are pointing out was meant to test the ViewModelLocator which is a view related element used to locate ViewModels. So it's not the same. To introduce IView again would require changing every piece of code in Prism that checks for FrameworkElement.  Since this is the first time it has been requested, I do not consider it a candidate for implementation at this time.. Thanks for the suggestion, but this isn't going to be considered at this time.. If the list of subscribers isn't being reduced, it's because the subscriber parent is still in memory and not collected. We have tests that validate that subscribers that are collected and automatically unsubscribed.  This type of behavior normally points to an issue with the application code and object remaining in memory. Unless you can provide a memory analyzer that shows the EA being the object that roots the objects.. Have you tried having a proper class for the event public class MyEvent : PubSubEvent<string> and not using a generic in GetEvent<PubSubEvent<string>>?. I'll try to look at this when I find time. however, our unit tests are showing the EA working properly, and you have not provided a running application with memory snapshots to support your issue.  This means I will have to recreate everything and create my own snapshots which will take more time.\nIn the mean time, Prism is open source, so if you have time it would be great if you could look through the source and see what you find. Maybe even submit a fix if you find one :) . Thanks @FamularoA. In my experience the Task Manager is not a good indicator of memory leaks. I will use a proper memory analyzer.. A big thank you to @FamularoA for the sample. I now fully understand the issue.  I guess when this was first written, no one considered that there would be a scenario that would have so many constant registrations without ever publishing a message.  Like @softwaretirol said, it's \"very rare\".  I see a PR has already been submitted for this issue. Great job @softwaretirol. You're contribution is greatly appreciated. Good find!. Can you measure the difference and provide the numbers?  We may need to think of another approach.  Maybe a method that must be manually called in the rare scenario where you have constant subscriptions and no messages being publshed.. WOW! That is significant! This needs to be reverted. @softwaretirol we need an alternate approach as the current solution has introduced a massive performance issue.. I really don't like the timed approach. Honestly, having massive registrations without a publish is more of an edge-case. So I would prefer to provide a way to handle this that would have to be opt-ed into. Maybe a public method that allows you to Flush the registrations manually.. I'm actually leaning towards @adamhewitt627 suggestion. Very simple, and opt-in for specific events that have a large number of subscriptions.. I have reverted the changes and have added a Prune method that can manually be called when having multiple registrations within short periods of time without a publish.  The developer will be responsible for calling Prune in those rare scenarios to keep their application memory footprint down.. There are many interfaces that are not available in the net 4.5 folder due to incomatibility with WPF. I suggest making your test projects a .NET Core project instead.. Thank for the quick fix. You rock!. This was a concern of mine when we first made this change, but we do have to move the framework forward.  The changes to IModule really are for the better, and will result in a better developer API and experience.  Honestly, you can update your IModule with very minimal effort.  Just implement the new methods as empty, and then copy/past the code you have in the old Initialize method into the OnInitialized method.  You don't have to change anything else. You don't even need to use any of the new interfaces in the new methods.  My approach to this would be to create a simple console app that did this for all my modules and it's done in seconds.\nI will note, that you are more than welcome to stop using Prism and create your own internal framework that you can maintain and support internally.  Prism is open source, and we do not get paid when someone uses it.  So if your company stops using it, we don't lose anything. If your company would like to take on the burden on creating and maintain their own framework, they should go for it. Many companies do that now, and a lot of those frameworks are based off of Prism.\nActually, I will say this.  If your company (one of the largest in NY) would like to pay for this backwards compatibility, we can make it happen.  It would require a lot of thought and work, because it is not a simple change, but if we are paid for that time, then we can make it work.  It is probably cheaper than your company creating their own framework and maintaining it over the life of your projects, and then replacing Prism with your new framework in your current projects.  Just a thought.. Funny thing is, when those breaking changes were introduced into Unity, we had to modify Prism to help protect it's users from those types of dependency breaks in the future.  So in reality, it helped motivate us to abstract away the container altogether and ultimately lead to the change in IModule.. @istvanfarmosi \n\nThis works as long as shared components do not really change, allowing you to use assembly bindings\n\nYou should never try to use assembly redirects for a major version change as that indicates breaking changes, and almost guarantees your app will fail.\n\nHaving such a basic interface change breaks this, forcing all of these teams to update their code and release it all at the same time - the coordination involved could be quite the challenge. I can see this pushing companies towards either delaying the upgrade indefinitely (read: never) or removing Prism from their code, neither of which is optimal.\n\nThe truth is that any company that has vested into Prism and decides that Prism will not longer work for them because of an interface change in a major version release (which they have had plenty of time to prepare for since the previews have been out for a very long time) is asking for a much more time consuming and expensive task of removing Prism and trying to replace it with something else.  Essentially rewriting their entire application.  This is not likely.  What is more likely is that they will either not upgrade the version of Prism, or they will simply update the interface and perform a find/replace to have the new OnInitialized method call the old Initialize method.\nLet's say that we spent all the time to come up with a way to support the old IModule interface.  All of your arguments still fail because the Unity container broke every single Prism app anyways.  So you will still have to coordinate across all your teams to change all the namespaces and object names of Unity, and re-release.  Either way you will have to do this if you want to keep using Prism.  That or change your container, but because the old IModule creates a tightly coupled relationship to containers that would be even more code you would have to hand write.\nAs you pointed out, Prism is OSS and we have zero financial motivation. Honestly, I personally don't care if people use Prism or not.  We get nothing in return.  Nothing.  Well... we get a lot of \"thank you for making me and my company successful so that I can make money and provide for my family\" type comments which are great.  Yet, not many considers the time the Prism team spends away from their own families to maintain it.  Frankly, if everyone decided to stop using Prism, do you know what would happen?  We would actually get something in return... all our free time back.\nWe are making changes to Prism to help move it forward to make it less brittle for future change, remove the tight coupling to containers, to simplify the API, to make it easier to share your code across platforms, and to make it easier for the Prism team to maintain.\nSo to sum up, Prism for WPF v7.x is a major release with documented breaking changes (both in the library and it's dependent containers).  Only upgrade if you are willing to fix those breaks.  Otherwise, you can stay on v6.x, or create your own framework to update and maintain.. Closed for not providing the required information.. this looks good to merge. Thank you for submitting a PR, but unfortunately you did not discuss your idea with the team prior to submitting this PR.  This is not something that we will want to support.  Using the same View with two different ViewModels is a design smell.  ViewModels hold state for the View.  All you should be changing is the state, not the ViewModel.  This is not guidance that Prism will recommend nor endorse.\nNext time, please submit an issue so that we can discuss your feature request.  This way you don't waste time working on a PR that won't be accepted.. There is no such thing as an async command. DelegateCommands are invoked synchronously and act more as a \"fire and forget\".  The CompositeCommand will not await the result of a DelegateCommand that is marked as async.. You update the UI when the task returns. That's how async works. You don't pause the execution of the CompositeCommand until it finishes.  Invoke the command, whenever the task finishes, it will update the UI.. No. Like I said, you update the UI when the task returns.. This is how a MasterDetailPage works.  If you don't want the MasterDetailPage to be the root of your app, simply force a modal navigation using the useModalNavigation parmeter.. If you wish to keep the master detail page, then just set IsGestureEnabled = false so you can't swipe the Master menu.. As I said in my reply to your PR, this is not something we will support in Prism. You have a few options, two of which we have already discussed; create a unique view, or have a single VM and load the relevant data.. I'm sorry, but this not related to Prism.  Prism has no control over Process.Sart or it's behavior. As long as your app is properly compiled and runs it should work.  Does it work when you double click the exe in file explorer? If not, you have an issue with your app.. Thanks @dvorn for the quick reply.\nWe will not be changing how the DegelateCommand works with the sync context, as it is implemened as designed. plus, creating a UI based command on a background thread doen't make a lot of sense to me anyways as you will have to marshal that command back to the UI thread in ordr for the UI to bind to it.. First off, modules are short lived and prism does not maintain a collection of the module instances as this could lead to memory leaks.  Modules can also be loaded at any time in many different ways including dynamically loaded into the app domain at runtime from a module being dropped into a folder.  The new methods provide clear guidance on where to place your code and helps separate the concerns of your code (registering vs initialization code).  It also gives access to the new IContainerProvider and IContainerRegistry to ensures you are using them properly.  It also aligns the interface across platforms.  You also have to consider dependent modules and scenarios where services must be resoved in order to be used in a dependent module.  We also do not want to change the behavior of how modules load in WPF s that would be a massive behvaioral breaking change which could have very severe consequences to user's applications.\nNeedless to say, we will not be chnaging how we load modules.\n. Don't bother with UWP at this time. We are rewriting it.. Closing this as you did not provide the required reproduction link.  Keep in mind, the namespaces have to be correct, the file just can't be moved into a folder. Also, we are in the process of completely rewriting our UWP guidance, so stat tuned for that effort.. Don't navigate to nameof(MainPage). Instead try navigating to \"Main\". Tab selection is not navigation. You will have to code this up yourself as Prism doesn't do anything for you in this scenario.. We are not going to support Microsoft DI at this time, and we are considering dropping support for Autofac due to it being immutable. The thought being that if a container cannot support all features of Prism, we should not support it.. No, IRegionMemebrLifetime is a WPF only concept.. Regions are not a part of UWP or Xamarin.Forms, so there is no migration path there.. You can't update Unity to 5.8.6. Prism.Unity.Forms has a dependency on Unity 5.5.5.. I haven't looked into this yet, but this is the first thought I had when I read the issue. Looks like an easy fix.. I was able to reproduce this issue. The reason I never ran into it is because my MasterDetailPages always implemented IMasterDetailPageOptions as follows:\npublic bool IsPresentedAfterNavigation\n        {\n            get { return Device.Idiom != TargetIdiom.Phone; }\n        }\nFor now, you can use that as a workaround.\nBy the way, there is no CanChangeIsPresented property on the MasterDetailPage in XF. One more thing, do not place a MasterDetailPage in a NavigationPage. That is a navigation \"no-no\".. Actually, now I remember... You must use the IMasterDetailPageOptions to control how you want the IsPresented to work because Prism cannot determine the combination of device orientation AND the MasterMode required to make that decision for you.\nNOTE: For Phone devices the Master will ALWAYS be in Popover mode regardless of your setting.\nLook at the following table of possible scenarios:\n\nIf your setting is set to Split, then the code snippet I provided will work fine for you. However, if you have more complex behavior such as SplitOnLandscape, you'll have to change your implementation of the interface to work with your situation.. Yes, Prism.Windows is under going a major rewrite. You can follow the PR #1513.. It most likely has something to do with this line of code:\nNavigationService.NavigateAsync(nameof(MainNavigationPage) + \"/\" + nameof(LoginPage));\nYou are trying to push another NavigtionPage on the current NavigationPage which is a big \"NO-NO\". If you are in a NavPage just push the next page.\nNavigationService.NavigateAsync(nameof(LoginPage));. Thanks for reporting this. @MikelThief Prism.Forms is completely different than Prism.WPF. The main issue I see is the use of AppDomains, and I don't think that will be supported in Core 3.0.. I just ran the Core 3 analyzer tool and have confirmed that the AppDomain is not compatible and it is not something that will be supported in Core.\nhttps://blogs.msdn.microsoft.com/dotnet/2018/08/08/are-your-windows-forms-and-wpf-applications-ready-for-net-core-3-0/\nThis is required to load modules from App.config, xaml files, and directories.  Since this is a core usage of module registration, we will have to really think how this can be handled before we can support Core 3.0\n. After my conversations with the team at MS, this is not something that will happen anytime soon.  I am closing this as it's not even on our radar until this issue can be solved by people smarter than me.. @jkotas I added you to the thread. Prism uses a number of AppDomain methods to actually load assemblies form disk into the appdomain at runtime. An example of this usage can be found in the DirectoryModuleCtalog\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Modularity/DirectoryModuleCatalog.Desktop.cs\nYou can open up the Prism.WPF solution and Search for AppDomain, and you can find where it is being used, and even test any suggested updates with Core 3.. After speaking in more detail with MS, we might have a path forward.  I'll reopen this issue as it's not completely dead now.. Prism uses the built-in Xamarin.Forms navigation behavior.  Your issues is not clear to us and you did not provide a sample the reproduces the issue.  You could even supply a gif of what the expected result is and another gif of the actual result to help us see the issue.  Therefore I must close this issue as not enough information was provided.. Thank you for clarifying the issue. I'll have to look into this and see if there is anything we can do. We are using the Xamarin.Forms API to close the master when the detail is set, so I'm not sure if there is anything we can really do.. Do you have a link to the sample that works as expected?. Thank you, but I was asking for a plain XF demo that shows it working properly. Not a Prism app that has the delay yo are having an issue with.. Great, let me look into this and see if there is anything I can do to improve this behavior.. I think we figured it out. Give our latest CI on MyGet a try and see if you are still experiencing issues.. Thanks for reporting it. I can't believe we didn't notice it before. You have a great eye for detail :). I'm sorry, but that feature was removed in version 7.0.\nhttps://github.com/PrismLibrary/Prism/releases/tag/7.0.0-Forms\nAll platform registrations should be against the container directly via the IPlatformInitializer.  We just need to remove the documentation topic.. Resolved: https://github.com/PrismLibrary/Prism-Documentation/pull/12. Thank you for reporting this. unfortunately GetProperty is not available in NetStandard 1.0. We will need to determine another fix, or just recommend using a converter in NetStandard 1.0 and fix it for 2.0.\nWe could use GetRuntimeProperty, but that also gets non-public values, which may also cause issues and a possible perf hit (not tested just assumed).. We went with the GetRuntimeProperty approach. Test it out in the latest CI build on MyGet and let us know if you are still having issues.. It is not recommended that you pass around the container, instead you would just inject your IPartnerRegistrationInfoProvider into your class.  For this reason, Prism does not provide a registration for the IContainerProvider. If you want this, you must manually register this.. Do whatever works for your app :). This is by design. \"createTab\" only works with TabbedPages, and not CarouselPages.  At this time, this is not a feature we are planning as the usage of this feature is not something that is being asked for by the larger community.  For now, you will need to implement this functionality yourself.. Well, the topic is called \"Working with TabbedPages\". Although, I do see where it says \"or any MultiPage\" which is not correct. I didn't write that topic, but I should have reviewed it before it was merged.\nSelectedTab works mainly because of our suport for IActiveAware.  I can completely understand the confusion as that is not a good name for selecting a page in a CarouselPage.  It's actually a horrible name to use. I'll update the topic to remove the mention of  \"any multipage\".\nThank you for bringing this to my attention.. To pass data to your children, just have your CarouselPage implement INavigationAware, and the in the OnNavigated methods, loop through the children and pass the params to the child pages via the same interface.  Easy peasy :). Prism.Autofac for WPF will be going away. Modularity is core to Prism guidance, and there is no need for it to go into a separate project. We are not currently looking at trying to another platform such as Uno at this time. Prism is open source so if someone would like tot take on that effort, that would be great.. We accept PR's :). Fixed with #1568 . This has already been fixed. You can test it with the latest CI build on our MyGet feed.. The old version of Prism for UWP is no longer supported. We are in the process of rewriting our UWP guidance. You can start playing with the CI builds if you like, but it will be a completely different way of building UWP apps, and should be considered a major breaking change. I'm closing this for a number of reasons. First, we aren't putting any time in trying to reproduce something that happens once every 20 times when a reproduction app hasn't been provided.  Second, We are no longer working on the current version of UWP and are putting all our efforts into the rewrite.. https://github.com/PrismLibrary/Prism/blob/master/Source/Prism/Commands/DelegateCommand%7BT%7D.cs#L14. I think you might have added this to the wrong branch. I am not going to merge this PR as it contains a ton of other changes related to DI on UWP. Please rebase from Master and resubmit for review.. Thank you for the PR. Please add a unit test for your new method in the ErrorsContainerFixture located under the MVVM folder in the Prism.Tests project.. Thanks for the PR. I'm sorry, but we do not provide support for Pluralsight courses here. The error tells me you are running into a scoped region problem. So you have something wrong. I would suggest downloading the samples that come with the course and study them or modify them to meet your needs. The good news is at least you know where to start looking... scoped regions.. I have no experience with the MaterialDesign system you are trying to use. As that is a custom UI kit, I cannot officially support it.  However, I can say that I guess that DialogHost is not part of the visual tree and therefore the region will not be created automatically.  You will most likely have to attach the region manager in code-behind manually. That in addition to the fact that you didn't provide the required reproduction application, I am closing this issue.. @Jesus805 As I said in the previous post, you will have to attach the region manager in code-behind manually.  Also, don't use the ServiceLocator. I don't know where you learned to set up your application like that, but it's not the correct way.  Check out these samples: https://github.com/PrismLibrary/Prism-Samples-Wpf. It's just an attached property. It works like every attached property in WPF.  Give your element a x:Name, and the use the attached property in code-behind.. This is a known limitation of the Xamarin.Forms API.  We are not able to intercept the hardware back button before navigation occurs. We must handle two events for back button support, ModalPopped on the application class and the NavigationPopped on the NavigationPage, neither of which provide us the ability to gain access to any pages before navigation actually occurs.  In both cases, these events are fired after navigation has actually occurred.  Therefore, calling INavigatingAware would make no sense because it's not an accurate time to call it. Technically, we could call the method in the Popped events followed immediately by the INavigatedAware method, but this is not an accurate representation of the nav process and would be misleading as any code you would expect to fire before a page is navigated to would not work. This is important for data which you are trying to prepopulate the page before the binding engine updates and syncs to the UI.\nEssentially, this would be the code block\n```\nOnNavigatingFrom(previousPage, parameters);\nOnNavigatedFrom(previousPage, parameters);\nvar onNavToTarget = GetOnNavigatedToTargetFromChild(currentPage);\nOnNavigatingTo(onNavToTarget, parameters);\nOnNavigatedTo(onNavToTarget, parameters);\nIt would be similar to calling the same method twice.. You need to provide a sample as stated in the Issue template. I will re-open when a reproduction is provided. Your description doe not provide enough information.. This is actually one of those weird issues that happens in WPF. It is completely random and can happen when not using Prism. A simple web search will show tons of examples of it not working for people for various reasons.  It has to do with the complex nature of how resources are loaded and the order in which they are loaded.  You can fix this by either using a Merged dictionary\n\n\n\n\n                        <Style.Resources>\n                            <SolidColorBrush x:Key=\"{x:Static SystemColors.HighlightBrushKey}\" Color=\"Red\" />\n                            <SolidColorBrush x:Key=\"{x:Static SystemColors.ControlBrushKey}\" Color=\"Red\" />\n                        </Style.Resources>\n                    \n\n\n\nOr just by adding another resource such as a background color\n\n    <Style x:Key=\"MyListBox\" TargetType=\"{x:Type ListBoxItem}\" BasedOn=\"{StaticResource {x:Type ListBoxItem}}\">\n        <Style.Resources>\n            <SolidColorBrush x:Key=\"{x:Static SystemColors.HighlightBrushKey}\" Color=\"Red\" />\n            <SolidColorBrush x:Key=\"{x:Static SystemColors.ControlBrushKey}\" Color=\"Red\" />\n        </Style.Resources>\n    </Style>\n\n    <SolidColorBrush x:Key=\"MyBackground\" Color=\"Blue\" />\n\n</Application.Resources>\n\n``. @dansiegel It appears the code snippet is not correct and would not function properly. It needs to be updated to match what we provide in the Windows version.. In your NavigateAsync call you are supplying the value oftruefor useModalNavigation, which forces a modal nav operation.. Hard to say since you didn't provide a reproduction app. Normally it will go back automatically, unless you did something to where it can't automatically determine the previous page. In this case you were forcing a Modal, so you need to force a Modal GoBack as well.. Immutable containers do not work with modularity which is a core function in Prism.  If you want to use an immutable container, you must be aware of what functionality you are loosing, and this does the job. SO y have a choice, you can returntrueforSupportsModules` in your custom implementation and not use them, or do what you have already done and override the InitializeModules method.  Either way, you know that modularity is not supported with your container.. Docs are on our extremely long list of things to do. If you feel like you can contribute, here is the repo:\nhttps://github.com/PrismLibrary/Prism-Documentation. Since you are using source code, I would guess the workaround would be to uninstall the Microsoft.SourceLink.GitHub package from Prism.. I'm not sure this is the right approach. I almost feel like there should be an \"exclusion\" list that is passed in instead.  Then you load all assemblies except the ones you told it not to.. looks like you have to rebase off master. Lots of changes.. Closing as this has become stale and has not been rebased with master. Thank you for the PR. Unfortunately, this is not something we want to add to Prism at this time. In the future, please submit an issue describing what you would like to improve before submitting your PR.. There are no new plans to support GTK at this time. You can rebuild the Prism source code to support your requirements if this is needed.. This is not a Prism issue. The issue is that Live player doesn't work with a number of 3rd party assemblies. You should let Xamarin know that they need to update Live Player to work with Prism.. That is just a bad link. UWP does not have a dependency on WPF. The links on the readme should be correct.  https://github.com/PrismLibrary/Prism/blob/master/README.md. Unity works great and is up to date on MyGet.  I can browse it just fine without logging in:\nhttps://www.myget.org/feed/prism/package/nuget/Prism.Unity.Windows. @bartlannoeye right, but @Seikilos was talking about the links in the docs pointing to the wrong location which will need t be fixed.. You're making a recursive call, which would explain your infinite loop. You need to pass your parameters in order to call the base of the method you are overriding.\nreturn await base.NavigateAsync(pagePath, myParameters);. This is just how C# works. Calling base.MethodName does not gaurantee you are calling the base implementation of the method you are overriding.  When you first override the method, it generates the correct signature with the \"base\" method call for you. You did not use that signature, instead you used a differnt signature which caused the recursive call. Plus, your code didn't work as expected because you weren't passing you parameters so none of your bindings would have worked.\nThere are rules to how overloading methods with named/optional parameters behave. A quick search can help you find those rules.. Thank you for reporting this.  Seems this is a regression bug. This has been fixed. You can test the fix in the latest CI Build on MyGet.. No, you must add the latest nightly build that is on our MyGet feed.\nhttp://prismlibrary.github.io/docs/getting-started/NuGet-Packages.html. You cannot depend on the order of which view is navigated away from or to. It will vary depending on the navigation stack. For example, if deep linking into a NavigationPage the nav stack is built in reverse order.. Closed as there is no reproduction app provided.  Also, it really doesn't make sense to have a module as a .NET core 2.0 assembly as you cannot use WPF in a .NET Core 2.0 assembly.. Technically, you don't need to register the View/VM with the container. You just need to tell the VML how to associate your VM with the View.  To do this use\nViewModelLocationProvider.Register<View, ViewModel>();\nThis is definitely a documentation issue.. This is by design.  You should never pass event arg objects to a VM. You should always get the data you need off of the event args instead by setting the EventArgsParameterPath or EventArgsConverter. I will make a note in the documentation. We will not be providing a ctor that accepts only a single parameter. I would use @powerdude suggestion instead. It's the same thing, except it supports multiple parameters. Yeah, VS is horrible at updating/installing snippets. open up your snippet manager and I bet you will see a yellow warning triangle on the Prism snippets. Use the link to find the real location of the snipet and update the location.  Let me know if you are still having issues.. This is by design. If you do not like the current rules, you must change them by overriding the CreateContainerRules method and provide your own rules.. @andygikling you still have access to the container. So you can do whatever you want.. @andygikling The best advice I can give is to do what works for you.. Well.... you could always revert and not worry about it :). I'm sure the community would appreciate that.. What value are you getting out of Prism for WPF if you have no views/regions? Also, how do you prevent your modules from crashing since no regions exist in the app to inject any views? What exactly do these modules do?. Normally, I would say this isn't something I would allow. However, I do see that the old bootstrapper did allow for this, and the code changes are very minimal to support it.  So I will merge your PR.  Thanks for that by the way :). This has been fixed. You can test out the changes in the latest CI build on our MyGet feeed when the build has completed in about 20 minutes.. Of course the Master won't close since you aren't navigating using the MasterDetailPage.  You are navigating directly from the DetailPage which has no knowledge of the MDP.\nAlso, you just have to create a custom NavigationPage and have it implement INavigationPageOptions and set ClearNavigationStackOnNavigation to false. Then each page will be added to the stack.. If you want to continue to use your approach, you should edit your custom control to get the master and close it on Click. Or just add an event handler to your MDP code-behind and close it.. The DelegateCommand does not know when you want to click the button or not. It is your responsibility to control the state of your UI elements.. ObservesCanExecute simply uses the property you provided as the return for the CanExecute delegate and notifies the UI of state changes to that property by calling RaiseCanExecuteChanged.  If CanExecute is false, the command cannot be invoked. You must make sure you are properly controlling that logic.. Also, it needs to be a public property that calls INPC. It can't be a simple field. Relative Back ../ navigation only works when you are within a NavigationPage.. There is no built-in mechanism to switch tabs. You will have to handle this yourself.. I have created an issue to implement this behavior follow #1615 . This has been implemented and is available in the latest CI build on our MyGet feed.. We do not have or publish any release dates.\nRead how to add CI builds here:  http://prismlibrary.github.io/docs/getting-started/NuGet-Packages.html. Actually, in large WPF production app this is exactly how I do it.  However, having the templates use the distinct folder really helps with the learning curve and helps to discover the patterns being used.  I am considering adding an \"Options\" item in the VS Options dialog to control how these are created, but that is a very low priority.. I use a VS extension to do it. Right click and done.. https://marketplace.visualstudio.com/items?itemName=MadsKristensen.FileNesting. Please use Stack Overflow for questions like this.. You would be correct in that Prism 4 is not supported. No issues have been reported regarding the DelegateCommand and all of our tests for DelegateCommand have no issues with the latest version of Prism. I would suggest you try upgrading your repro project to the latest version and try your tests.. At first glance, its the way you are writing your tests.  I bet if you wrote your tests like this:\n```\n        [Fact]\n        public void DelegateCommand1Test()\n        {\n            bool delegateCommand1CanExecuteChangedFired = false;\n            var sut = new ClassWithDelegateCommand();\n        sut.delegateCommand1.CanExecuteChanged += (o, e) => { delegateCommand1CanExecuteChangedFired = true; };\n\n        sut.RaiseCanExecuteChanged();\n\n        Assert.True(delegateCommand1CanExecuteChangedFired);\n    }\n\n```\nThey would work.. You didn't upgrade Prism. It works for me.\n\n. I ran your tests as you have them written. Prism 4 is not supported.. It still works for me.. By the way, I'm not using Prism 4. I'm using Prism 7.1.. You forced a modal navigation, so you probably need to force a modal goback.\nhttp://prismlibrary.github.io/docs/xamarin-forms/navigation/navigation-basics.html#forcing-a-modal-or-non-modal-navigation. This is by design.  Read the fine print in that post:\n\"Note: At this time there is no native support for deep linking into a Tab that is a navigation page\". No we don't. This is one of those very complex navigation scenarios which can be difficult to determine the intent of a navigation deep link in a nested tab page. For now, you will have to handle it on your own.. Honestly, I don't know. I haven't looked at it yet.. It is highly discouraged to pass the container around your application. Therefore, Prism does not register the IContainerProvider with the container.  If you wish to break this DI rule then you must do exactly as you did.. I wish you would have submitted an issue describing the need for such a service before you submitted your PR.  We have not analyzed how Prism would utilize AppLinks yet, and therefore do not want to add an AppLinkService until we understand how it will integrate with the navigation service.  It is very possible that our IAppLinkService would have a different signature and implementation in order to work seamlessly with the navigation service.\nThank you for your PR, but I cannot merge it at this time.. Prism's not broken, your code is :)\nYou're trying to force an non-modal navigation from the MasterPage when it's not in a NavigationPage.\nhttps://github.com/acastr7/Bug-Prism-MasterDetailTabPage/blob/master/7.1/MasterDetailTabPageBug/MasterDetailTabPageBug/ViewModels/PrismMasterDetailPageViewModel.cs#L18\nRemove the useModalNavigation parameter, otherwise you are trying to force a navigaton from the MDP itself.\n. Oh, I see what you mean. I had to click around more. it works initially until you navigate to the navigation page and the navigate away from it.  Let me check it out.. Honestly, I'm not sure why it's working in the first place because we are not recreating the TabbedPage and the selectedTab parameter is only handled on creation, not navigating to an existing instance of the tabbedpage. Well, the good news is that I found the bug. The bad news is that I have no idea why your sample changes tabs as the navigation service code doesn't do that right now :). Ahhhhhhhh!!!!!!!!  I didn't even think to look for custom code. HAHAHA. I will actually build that into the NavService. This has been fixed. Wait about 20 minutes and try out the latest CI build on the MyGet feed.\nI also added the tab switching code into the nav service so you don't have to handle that yourself anymore.. Closing as this is not related to Prism and the required information was not provided.. We accept PRs :). Protecting you from yourself falls outside the scope of the responsibilities of Prism.  Prism does not control the how objects are resolved, that is handled by the container you chose to use.. Thanks for the PR!. Closing as you did not provide a repro link.  Also, this is most likely due to an error in your implementation. For example, you are using the wrong namespace. The module catalog is not in Prism, it's in Prism.WPF.. Anything is possible, especially if the community helps. We do accept PRs.  There really isn't much of a difference between v6 and v7, so the current topics still apply.\n. This has been fixed in the latest CI build on MyGet. Also, you didn't provide a reproduction link.. Yes, the MasterDetailPage is the issue. Never put a MDP in a NavigationPage. That's a big \"no-no\". Also, you didn't provide the required repro app.. First, you have your MDP setup wrong. You are also navigating from the MDP which updates the detail page, not adding a page to the navigation stack, so there is no going back.. The problem is that the IContainerExtension is not being registered with the container. So the IModuleManager can't be created. Just add containerRegistry.RegisterInstance(Container) and it should work. Let me know if that works.. Yeah.... sorry, you need to provide the interface containerRegistry.RegisterInstance<IContainerExtension>(Container). it will work when I do it :). fixed. FYI, autofac support is being dropped. Autofac is no longer part of the Prism solution anymore.  My suggestion would be to create your own AutofacRegionNavigationContentLoader and register it with your container, or even easier, just register the IContainer in the container.. Closed because you did not provide the required reproduction app.. Create a simple app the reproduces the issue and provide the link here. I am not accepting samples that are emailed to me personally. I get 1,000s of emails in a day.  It will get lost and/or ignored. I am also not the only person that supports Prism. It's better to add it directly to the issue.. This is because you are manually setting up the master detail page, and not relying on Prism to build it up for you using deep links.  Therefore you need to manually apply the NavigationPageSystemGoBackBehavior to your MDP's navigation page.  Also, INavigationAware methods do not fire when suspending. That is not a navigation operation. You need to utilize the IApplicationLifecycle interface instead.. Required reproduction application not provided.. fixed. It will be available in the next release.. Introducing threading is a very high risk change and is not something I am comfortable ding at the moment. Yes the docs are out dated, so feel free to jump in and help us out.  I can't wait to see a PR.\nI didn't realize 35 WPF samples was considered being a \"lack\"\nhttps://github.com/PrismLibrary/Prism-Samples-Wpf. Also, you should consider becoming a patron and help support the project. This will actually help us hire people to write docs.\nLooking forward to your support: https://www.patreon.com/prismlibrary. There are plenty of samples that show how to register modules in various ways.  Registering services is also covered in great detail in the docs: http://prismlibrary.github.io/docs/wpf/Managing-Dependencies.html. Keep in mind, registering and resolving services is an IoC concept that Prism uses, but didn't invent. So the docs link to resources to help you become more familiar with how to utilize IoC with varius DI containers.\nYou could also look at the other platform samples that do show how to register and use services: For example XF: https://github.com/PrismLibrary/Prism-Samples-Forms\nLike I said, if you feel the sample are lacking, feel free to submit your PR.. I would like to mention, that only 2 guys maintain Prism in our very limited spare time. We focus our efforts on high priority items such as bug fixes and feature work.  While we would love to update all the docs and create tons of various samples, we don't have the time.  We really rely on the community to help us and each other out.. Since you didn't provide a reproduction app, it's hard to say. However, I can guess that you are doing something wrong. Most likely trying to use a service in your shell that was registered in a module. Obviously the Shell is created first, so you can't use a service that was only registered in a module that has no been loaded yet.  Just a guess. Without a repo, I can't say for sure.. If you are trying to build from source, you'll need to install the latest .NET Core 3 SDK and runtime. The repo builds successfully as proven by our automated builds.. Sorry, works on my machine, @dansiegel's machine, and the build server (creates a new environment each build). I don't know what is causing your issue.. You also have to have .NET Core 3 installed and ENABLED\nhttps://youtu.be/gIlfHtqgKk8\nYou also ned more thn just the .NEt desktop development. You need .net core, UWP, and mobile development installed.\nI just tested this in a new virtual machine and had no issues.. @totht91 I will also add that is does not meet the most basic requirements of a DI container that Prism requires. It must be mutable and allow register/resolve using a named instance.. @totht91 A mutable container is a hard requirement. This requirement cannot be changed.. OnNavigatingTo is fired when calling the GoBackAsync method, but is not called when using the hardware/software buttons\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/PageNavigationService.cs#L93. I cannot duplicate. You'll need to provide a repro app. Closing until the app has been provided. This is not possible in Xamarin.Forms. Only hard-coded module references work in XF. You cannot load assemblies dynamically in a XF application.. Duplicate of #1652 . Questions like this should be asked on the Prism Slack channel or on StackOverflow.. @DamianSuess Actually XF is not the primary reason for thinking about this effort. I would never recommend using XF to write a WPF app. EVER!  However, you can still target XF and have a WPF app by sharing your core VM logic.  The purpose of this question is how much should be sharable.\nThe problem is, there may not be much value to WPF developers if these interfaces were brought over.  They are so vastly different and very limiting as they are missing APIs that WPF would require, I'm not sure it makes sense to try and bring them over as it will just cause a ton of confusion.. You will always need a base VM with a platform specific implementation.. I think for now, I will not implement this.. @keyse That's a great idea. I will play around with that.. I have just submitted PR #1682 . @gojanpaolo Thanks for the tip. @noufionline While technically possible, I didn't take that approach because this would result in two different API experiences.  I was trying to keep the API consistent no matter which method you used.. You can't return an IDialogResult for the Show method as that is not a thread blocking operation and is not an async method that can be awaited. The call back gives you the opportunity to respond to the dialog being closed when it occurs.  Without the call back, you would not know when the diaog has closed or be able to gain access to the IDialogResult.. 1. I just submitted PR #1721. You can now use a style to control the properties of the dialog.\n\n\nYou must register the dialog with the container so calling RegisterDialog is required.  Technically this is the EXACT same thing as RegisterForNavigation, but I wanted the API to guide devs in the right direction. I was thinking of removing the RegisterDialog methods and just sticking to RegisterForNavigation, but I didn't want to confuse anyone. Using the VML is not required. You just have to set the DataContext of the UserControl. \n\n\nNo, I am not going to change the name of the Title property on the IDialogAware interface. Just implement the interface explicitly.. Then don't provide one. This service can be used to show more than just dialogs.. Actually, the only valid argument for removing the Icon property is because by default WPF will assign an icon to a Window. It will use either the ApplicationIcon or the default icon. By forcing the use of the Icon property and not setting a value, it will override the ApplicationIcon (if set) to the default icon.. @antoinebj Have you tried it yet? Please try it, then provide feedback.. Please ask questions like this on StackOverflow or the Prism Slack channel.. This is not the intention of this feature. You register a specific property for monitoring. We will not automatically hook into the INPC event of the VM and monitor all properties for changes or an empty string. . Sorry, it appears I completely missed the point you were trying to make in your original issue.  I re-read it, and now I understand what you were trying to say.\n\n\nActually, this does already work when passing null. Your sample works for me.  We do not handle String.Empty though.\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Prism/Commands/PropertyObserverNode.cs#L64. Just waiting on the PR :). Please ask questions on the Prism Slack channel or StackOverflow. Please ask questions on the Prism Slack channel or StackOverflow. Do not upgrade the container dependencies separate from Prism.  Only use the version of the container that Prism depends on.. In WPF, you can' just update dependencies of an assembly.  You must use the version of the container that Prism is referencing or you will break binary compatibility. Do not upgrade the container separately from the Prism nugets.  ONLY upgrade Prism.Unity, and the other dependent NuGets will automatically update to the version of the container that has binary compatibility.\nWe are not ready to push any updates to WPF as we still have work in progress.  We will release updated Nugets when that work has been completed.. I'm not sure we want to introduce support for this. I am not sure what the performance impact would be to check every property to see if it is a shadow property or not.. Another aspect of this is that you can change the return type of a shadowed proeprty, so this would be another complexity to consider.. I am having a hard time understanding the proposed changes. Please provide your code snippets, or submit a PR, so I can read your code.. fixed with #1680 . I'm not sure we want to introduce a breaking change to support a fluent API that is usually a personal preference. I'll have to think about this.. Yes, you would have to change the interface method definitions. This is by design. We must create a new NavigationPage when navigating between detail pages in a MDP because of issues around this navigation pattern.. I would like to add, in this case just call GoBackAync.. I would like to mention that you could create your own Navigation service that derived from the Prism PageNavigationService and override the ProcessNavigationForMasterDetailPage and modify line 589 to fit you needs.. another option is to have your MDP code behind listen for the event and just call PopToRoot on the Detail as a NavigationPage. Probably easier. Use the previews on MyGet.  Unfort7uately, we have not had time to finalize the UWP API, but the Myget is the current working version.. This is actually much better. Sometimes it's easy to miss the most obvious approach. Have you confirmed that this works for your scenario?. Cool. Yeah, don't worry about the DirectoryModuleCatalog tests. Those are failing because of the .NET Core 3 target.  We are working on our build server right now, so as soon as we get that fixed, I'll merge.. Yeah, that was my fault because I used an old copy of the initial spec code snippets for the blog post. The final version of the feature did not have those properties in it.  This will be considered an enhancement. For now, just create your own extension, add your desired properties, and then override HandleNavigation to modify the navigation call.. We accept PRs. Thanks for the new features!. This is most likely happening because you upgraded the Unity container separate from Prism, which you cannot do.  Only use the version of Unity that Prism depends on. Otherwise you break binary compatibility.. You are more than welcome to fork Prism, and remove that limitation yourself.. How would you propose modifying the UI to set the T of the DialogResult?\nAlso, this isn't really necessary because you can get your strongly type object from the parameters list\nvar person = r.Prameters<Person>(\"person\");\n. Yes, that's what the parameters are for.  You can pass back multiple values without having to create a class to wrap everything.. Also, you would need to modify the API to allow the developer to set the T for the result.  So it might have to look something like\nShowDialog<Person>(\"DialogName\", parameters, r =>\n{\n   var person = r.Entity.\n});\nThis is not really a friendly API and really limits you to a single return parameter.. Did you try reading the docs?. The first thing that stands out to me is that your navigation path is wrong. In your master, you do not need to prefix the MasterDetailPage again, and you should not have a prceeding / as that inidcates an absolute navigation which rests the navigation stack. Just use CommandParameter=\"NavigationPage/DetailOne\"\nRegarding the changing of layout direction, Prism has no control over that logic.  All Prism does is create your pages and adds them to the navigation stack. Any issues related to rotating the device to landscape would not be a Prism issue.  Mak sure you are checking for any erros or exceptions.. YOu should check out this video for more information on relative vs absolute navigation https://youtu.be/33hYzo5cFcE. You should ask questions like these on StackOverflow. Be sure to provide as much information as possible such as which container you are using as that could change the behavior of what you are trying to achieve.. Thanks @wowfood!. Thanks for the idea, but this is not a responsibility that Prism wants to take on.  There are many ways to handle INPC, and there are many projects available that already implement them.. This has already been discussed and is not currently planned for implementation. There are a number of issues that could arise from providing async versions of those methods and result in perceived performance problems as the navigation would not occur until those methods have completed.  See #704 as an example.. Closed due to no repo link provided.. Prism.Forms will not support WPF any time soon. You are welcome to fork Prism and remove this constraint for your specific requirements.. We update containers every now and then as we work on new featuresor before a release.  However, StrutureMap is not even part of the WPF solution anymore. If I remember correctly, this container has been abandoned by its author. So we are not providing updates for that container.. This is not something that has to be done in the DialogService. You can do this yourself for your dialog if it's needed.. Keep in mind, the Window is just the host. Your dialog is the content, which may have it's own regions for navigation. That s where you will create your scoped regions.. Unfortunately, this is going into the \"no repro link provided\" / \"cannot reproduce\". If you can actually get this to throw in your app, then please help us out and debug the issue and see if you can fix it.  If you can, we would love to have the PR.. No you can't, because INavigationParameters is not included in WPF. This also means that NavigationParameters does not implement the INavigationParametrs interface.\nYou can however cast the IDialogParameters (which is actually an instance of DialogParameters) to NavigationParameters.. This is the expected behavior. Prism does not persist parameters that were passed from page to page. You are responsible for passing parameters in a GoBackAsync call. delete this row\n. delete this item group\n. wrong version of Prism.Forms.  Prism.Unity.Forms depends on Prism.Form 6.1.0-pre-3.\n. only the default dependencies should be placed in here:\n{\n  \"dependencies\": {\n    \"Microsoft.NETCore.UniversalWindowsPlatform\": \"5.0.0\"\n  },\n  \"frameworks\": {\n    \"uap10.0\": {}\n  },\n  \"runtimes\": {\n    \"win10-arm\": {},\n    \"win10-arm-aot\": {},\n    \"win10-x86\": {},\n    \"win10-x86-aot\": {},\n    \"win10-x64\": {},\n    \"win10-x64-aot\": {}\n  }\n}\n. What are the purpose of all these added template wizards?  Do you know there function and why they are needed?\n. I was up in the air about this.  I would prefer not to encourage extending the navigation service because it's logic is quite complex.  This should hardly ever be needed.  So I want to hide the name and only if someone really wants to extend it will they need to read the source code, or docs to extend it.\n. The navigation service cannot be a singleton.  We have to create a new instance each time and then override the parameters of the VM ctor to inject the correct instance.  Can this be done in DryIoc?\n. Cannot register the navigation service as a singleton\n. I don't know... this feels a little dirty to me.  What if we just created a method responsible for creating the navigation service for the page instead of doing that logic inside of the ConfigureViewModel method directly?  Maybe something like \nINavigationService CreateNavigationServiceForPage(Page page)\n{\n    var navigationService = CreateNavigationService(); \n    ((IPageAware)navigationService).Page = page; \n    return navigationService;\n}\nThoughts?\n. It's still async because it returns a Task that can be awaited\n. What if the test didn't involve testing the method directly, but rather we just test the result: creating a Page, then get the VM from the binding context (which has a public navigation service property, grab the nav service, and cast it as IPageAware, and then make the check.  Instead of trying to so tricks with methods and assembly attributes.\n. These can't be compile.  These must be added as an AddinFile\n. I didn't see the SplashActivity added as a File\n. This can't be Compile.  Should be \"None\"\n. ohhhh.. that copy and paste bug got you :)  Need to update the name\n. You're missing a using statement\nusing Android.Content.PM;\n. Not worried about that at all. Ninject is still a container. Also, this will make everything consistent with docs and samples. API will be the same no matter what container you use.\n. I don't see where the IPageAware is being set\n. We don't use this method in XF, so it can be removed\n. why does this not take IContainer like the PrismApplication calss?\n. why does this not take IContainer like the PrismApplication calss?\n. this needs to be implemented\n. need a named navigation service using the field defined on line 23\n. I understand how IoC containers work, but the reason you need to do this is to support the extensibility of the INavigationService.  We provide a name to allow us to register an INavigationService without making it globally available through ctor injection.  In order to use it, it must be use by name, which hides it from the consumers of the framework, but allows the framework to use it internally.\n. place the configuration in here, not in the CreateContainer.  CreateContiner should only return the container and nothing else.\n. This should be Name, not FullName\n. do we want to assert anything in this test?\n. do we want to assert anything in this test too?\n. Great catch!  I actually meant to do another name check using typeof(TView).Name to use as the name in this method.  This keeps the expectation of the naming convention consistent with the other registration methods.  I'll fix that.\n. I think you were going for something more like:\nthrow new NullReferenceException($\"The requested page '{name}' has not been registered.\");\n. We will need a separate Prism.Autofac.Forms package and the PS build script updated to build the packages.\n. These should be singletons. Compare with the Unity project\n. this method is no longer needed. See Unity project\n. No, not the nav service\n. Just remove the test.  That method was added by the DryIoC package author just to test that scenario.\n. is this here soley for making sure tests have a sync context? If so, this does not belong here.  You setup your sets to make sure it has a sync context.\n. That is the nature of testing async code that relies on a SyncContext, but we do not place code into production that is solely meant to support test libraries.  If the code cannot be tested as-is, it points to code smell.\n. Can you update the Commands to use Prism DelegateCommand instead?\n. Can you add the EventArgsParameterPath and a sample on how it's used?\n. don't think this needs to be virtual.\n. don't think this needs to be virtual.\n. don't think this needs to be virtual.\n. This can't go here. It must be added when the page is created, not when it is being navigated away from\n. I don't want to add any async capabilities to this feature yet.  We should remove this until it is absolutely needed.  I am concerned about impacting tab changing while running a developers code and waiting for the task to return\n. This property would probably make more sense if it were names something like AutoRegisterBehaviors\n. I'm not sold on this class naming convention, but I haven't thought f anything else yet.\n. We definitely need to rethink these method names\n. I don't like this. If passing parameters is need, we need a better way\n. Well if we wanted to get crazy, we could implement an IPageBehaviorFactory and provide a ConfigureDefaultPageBehaviors method in the application to make it easier to apply behaviors to a page type.  This would be almost exactly how WPF does it.  Thoughts?\n. I think we can keep it simple for now. I'm not sure how common it is to apply a behavior to every instance of a specific page in an app.\n. Should probably rename this to \"New\", since technically we aren't navigating forward but instead creating a new page and pushing it onto the nav stack.  Forward gives the impression that we have an existing page we are going forward to in the nav stack. This shouldn't be in the base application class if only autofac uses it.. I don't want to add to the API surface for \"just in case someone might need to do this in the future for a container we don't support\".  Especially since every other container we support does not need this method.  I would override the Initialize method, call base, and then add the method call.  If in the future it turns out this is needed we can always refactor.. All template ID's must be unique.  Please use a different GUID for each TemplateID in every .vstemplate file in all the other templates you have submitted.. should be ninject.3.2.2.nupkg. There is no trailing \"0\" in the version.. missing the autofac NuGet packages. You seem to be missing an endregion for this region declaration. This is old code. I should have done a layout update :). Why since that isn't supported now?  If RuntimePlatform is Windows it should probably return Windows and not UWP or WinRT.  When 2.3.5 is released, it can be updated to include those options.. I am just following Xamarin's API as to not cause any compatibility issues.  I'm not sure if Xamarin is leaving them in there for backwards compat or what.  Maybe we should add some API docs explaining what options is available in what version?. This is not about the actual MasterDetailPage, it's about destroying the MasterDetailPage.Master page.  I am destroying the Detail, but totally forgot about the Master.. misspelling: replaceRoot. You are not handling the scenario of when clearNavStack is false pages are pushed onto the stack.  Right now, that scenario is broken.  I should probably have a test for that :). Now when ClearNavigationStackOnNavigation is false and the current page is the same as the page being navigated to, you get a duplicate page.  You need to also check to make sure the target page is not the same type as the current page. Similar to line 223. Remove this check.  This will break anyone using this class as Prism is not released in Debug mode, so this class will now be missing from the assembly.. Actually, I need to rethink that. I changed the order of some of the snippets, and I'm not sure they'll work as expected.  I need to write more tests to confirm :). Can the PersistInHistory check be done here instead of at line 146? Seems we have all the info we need. This would remove the need to pass the savePrevious parameter around.. Not sure why you renamed this?  Now this API is not consistent with the rest.  This should be called GetContainer. Remember, this is an abstraction and not meant to represent the actual container being used.. It's just a formality. UWP as we know it is going away.. Yeah, I would leave them off for now. We can always add them later if necessary. It's always harder to remove something than it is to add later.. I am thinking this should be called SourcePage to imply which page it really is. I can see \"Page\" being a little too ambiguous. Doesn't IModuleInfo implement IModuleCatalogItem? So no need to declare them both?. you mean not supported in UWP. YOu should leave this as is. No need to return the full service. We expose platform methods via extension methods.. Developers can still call GoForward and Refresh off of the INavigationService interface. This breaks the other platforms. Remember, anytime you change something in the Prism project, it impacts WPF and Xamarin.Forms. You need to implement this in Prism.Forms and just throw a not implemented exception since Prism.Forms doesn't use the remove method.. I'm curious if we should just call this GetErrors() like the other method, except without the proeprtyName parameter. @dansiegel what do you think? I don't feel strongly either way. @simedbn Can you rename this to simply GetErrors() and then we can get it merged.  Thanks.. I don't want to introduce IPlatformNavigationService as a known interface. Its another concept that isn't necessary. I only want devs to know about INavigationService and reply on the extension methods for platform specific navigation. So ideally, they should only be mocking the INavService. It's another concept I don't want to introduce. Now instead of knowing to just mock the INavService, they will have to somehow know they need to mock the IPatformNavService interface that they have never seen or used.  The goal is to keep the API intuitive and enable the ability to mock the INavService directly and still have the extension methods work.. Not this one. why is this being made virtual?. why is this being made virtual?. I'm not 100% sure about this one as every container implements it differently. Some require the \"key\" and some don't.  What type of parameters are being passed? What is the \"Key\" exactly? Are these container specific parameters, or are they application objects?  What is the use case for this?  Also, instead of a dictionary, why not use something like\nobject Resolve(Type type, params (Type Key, object Value)[ ] parameters);. I'm not concerned with edge cases. Once you open it, you can't close it, and there is no reason to open this yet.. I know each container has some version of this, but those signatures are different. So for example, in Unity, the \"Key\" is not used which makes for a misleading API. What about my other questions? Can you provide more context around the use of this.. Are we going to have to update this every time we release? That would suck. If it can't be automated, I don't want to add it.. might as well add the UseModalNavigation property too :). I would also add, the \"don't use tuples in public API\" is more about returning a Tuple from a method which is a bad idea because there is no context to the return values. In this case a tuple is being used as a parameter which is strong typed and named to provide context. We are using Tuples here, so you aren't forced to create a dictionary object just to pass in some parameters. This will result in much cleaner code in your code base.. I feel like this should be a NavigationServiceFactory.. why do we have a secondary registration for IPLatformNavigationService? This should not be needed.. Why have a new interface for Destroy that is specific to the gesture service? Just bake it part of the IGestureServcie. should this be protected?. ",
    "Mike-EEE": "OK... great to hear about the direction.  This is where a forum will do well before it makes its way as an issue. :)\nHowever, I do have to challenge you here in that Prism does currently use Xaml definitions (which is way better than XML -- this might be the source of my confusion) as a way to define its Module Catalogs.  In fact, that is where I got the idea of configuring its other components as Xaml in the first place. :)\n(I would also like to stress that we are talking about Xaml here, not XML.  These are two completely different development experiences, especially where tooling and design support are concerned.)\nAlong those lines, it would be nice to know what you mean by Xaml not being type-safe.  As when you compile a Xaml file it checks for type-safety as part of its compilation process (if you meant XML, then disregard this).  Additionally, it would be nice to know what you mean by limitations by configuring elements in Xaml.  We define presentation elements all the time in Xaml and there aren't any problems there... so what makes the Bootstrapper (or any other class) any different?  I guess my ask here is not that I want you to overhaul Prism and make everything Xaml-based, but just to be aware that your users are following your already-prescribed guidance and are using it in other interesting ways around your product.  This is good to be aware of from a product-owner perspective.\nIf you mean XML then what you say makes perfect sense.  I would not suggest using that at all.  The .NET XML configuration system is terrible (not to mention, dated) and I have sat in P&P workshops where the team has said as much where they completely tore it apart as a terrible API.  I personally haven't used it since Xaml broke out into the System.Xaml assembly.  .NET XML Configuration is an ugly beast that deserves its due death (and actually should be removed from Prism, IMO). :P\nFinally, to be fair here, the Bootstrapper is the only Prism element that I directly define as Xaml, as it is an initialization object much like the System.Windows.Application and Xamarin.Forms.Application.  So, fundamentally, it would be nice to see going forward as a consideration that this class would be made more Xaml-friendly as an initialization object.  That's really all that I am saying here.\n(This is all really a moot point as I have already done this in my extension of the Bootstrapper, but I am just getting it out there as a concerned and passionate user of your product. :) )\n. The primary benefit/advantage of using Xaml/Configuration is that it is structured and constrained input into an application/system, and therefore is cheaper to build an maintain over the lifetime of an application.  That is, there is no custom (or \"loose\") logic that adds to the overall complexity (and consequent management/maintenance) of an application.  From a business/project management perspective, finding the required talent and resources required to maintain Xaml (after deployment) is easier (and cheaper) than finding the resources required for code.  Furthermore -- and this is debatable now that C# is so ubiquitous but this also happens to be one of the tenants/principles of XML -- Xaml is language-agnostic so anyone familiar with .NET will be able to work with it in a limited-friction capacity (in theory, of course :)).  By using Xaml/configuration, you significantly reduce the barrier to finding resources (from an organizational perspective) that can possibly work on and maintain a product.\nAfter cost, the biggest benefit is that it is designer-friendly.  It's surprising, but what a lot of developers do not understand (or know) is that any object defined in Xaml can be edited in a designer-friendly way right now in our current IDE without any extensions or installations.  \nIf you recall, the P&P group invested heavily a configuration designer for EntLib.  It was really an incredible feature of the product, IMO.  However, it was also very involved and burdensome to extend and tie into... but the concept I thought was, again, incredible (and in hindsight necessary due to how terrible .NET configuration was, but I digress).\nThankfully, through the use of Visual Studio, we get all of the designer goodness that the EntLib configuration manager was driving at for free right now with our current IDE. It is untapped and a little unknown, however, but it is nonetheless a great feature available that we can utilize without any extra installation required.  As an example, here is the Setup (Bootstrapper) right now in my IDE:\n\nGranted, this is not really all that impressive right now (see: more Xaml-friendly properties for Bootstrapper :) ), but if additional properties were added and configured, it would \"light up\" (to use the expression of the ASP.NET vNext team when they talk about editor experiences) considerably -- just like presentation elements you might be familiar with in Blend.  The point here is that the design infrastructure is already in place, ready to go, and doesn't require an install or application from EntLib (or other party) to take advantage of immediately.\nAs for your question about how objects are initialized and to instantiate a shell: now we get into why Xaml is easily the most powerful serialization mechanism in the marketplace today.  It features something no other markup language possesses and is the top reason why I love it so much (and is the reason why I am into Xamarin.Forms and avoid WinRT like the plague that it is): MarkupExtensions. :)  Indeed, in the Setup object that I define, I create a Shell by using a LocateExtension which ties into ServiceLocation... like magic! <3\nIn regards to registering types for the bootstrapper, early in my initialization process I utilize the IContainerConfigurationCommand, which is an interface that is actually based off a (for whatever reason) now defunct interface that Unity 1.0 (or 2.0?) used to have that would simply execute a command on a container.  This is where all the magic happens in my Setup (Bootstrapper object).  All of my commands are defined in Xaml and you can see them here as an example.  (For instance, I use convention-based registration which is done by the ApplyRegistrationsCommand, but I also have a UnityContianerConfiguration that can also manually register types and instances as well.)\nFinally, I unfortunately do not follow you in regards to your NavigationPage concern.  I can assure you that whatever it is, it can be achieved via a mix of Xaml and MarkupExtensions, however. :) I have done some pretty incredible things with markup extensions and again they are the reason why I am so lit-up on Xaml and consider it such a powerful language.\nTo wrap up here, I am all for a vote.  I am even more appreciative of you just hearing me out. :)  I also hope that my reasoning above resonates with you (and others).  Essentially, this approach is motivated by cost (configuration is cheaper than code over the course of an application) and designer-friendliness (which also makes applications cheaper/faster to develop/maintain).  The other consideration for me is that MSFT has worked so hard to create such a powerful object definition/serialization language but everyone still views and considers it just for presentation (even though it now has its own assembly, is standalone, and has all sorts of designer capabilities in VS).  This is a result of poor internal guidance and messaging on their part.  That's where P&P and projects like yours should pick up the slack, IMO! :)\n. LOL... and just what are those two C# words, Brian? ;)\n. I am not sure that compiles, dude. ;)\nIt sounds like I am doing a poor job of explaining my position, so I will just leave this here for now.  I appreciate the discussion and look forward to your progress and success. :+1: \n. Haha yes @JohnTasler code is \"simple\" to us coders during design and development, but after an application has been deployed nearly every organization (read: the profitable ones) that I have been in has valued configuration over code when it comes to maintenance and management of the application post-development/design.  The reason for such is that the organizational resources that are required to manage configuration/xaml/xml are cheaper than those that have to manage/maintain C#/VB.NET. That is my experience and subsequently the driving motivation here for my point of view.  \nConfiguration/Xaml works perfectly and very well for WPF (which is where I derive my \"over complicated and over architected implementation\" and concepts from, btw :stuck_out_tongue:) and my assertion here is that the same power and principles that are in it can be applied to other areas of the application (and even other applications altogether, such as on the server-side).\n(Again, Prism started this with their ModuleCatalog in 4.1... I am just keeping the party going here in a BIG way!)\nI point again to what EntLib did with their configuration manager.  Pretty awesome stuff, and it was appreciated by the management in a few of my previous engagements due the cost efficiency it provided by reducing code.  Xaml is much more powerful, expressive, and designer-friendly than the XML that EntLib dealt with, so really the opportunity (and potential) that we're dealing with here to provide the same cost savings is even greater (IMO, of course).  There is work to be done around this, obviously, but that is really my bottom line here.\nAlong such lines, please do keep in mind that intend on building my own consultancy based on Xamarin.Forms (and Prism is a part of this now, thankfully), so I have a vested interest in building applications in the most cost-efficient way possible... not just for during development process but through the entire lifetime of the application. :)\nI hope that helps explain my position a little more (even though I said I would leave this alone, LOL!  Sorry, I guess I couldn't resist.)\nFinally @brianlagunas ... Thank you for the offer.  I would love to send you a PR some time from my fork but it already includes a few changes that you have already said no to. ;)  Maybe we can work around them, though.  I need to get more experience (and better) with Git!\n. Going to close this as this is not an issue, just something to be aware of.\n. After looking through the code there are really two concepts here:\n1) Modularity: definition and organization of modules within the domain of a running application that can be used to define application components (that is, candidates for loading and processing types within assemblies for features/functionality in an application).\n2) Dynamic Modularity: loading additional modules after an application has loaded.\nI would like to suggest that the first concept is universal, and the 2nd is platform-specific.  Basically when an application is loaded, it consists of x-number of assemblies, but only y-number are really deemed specific to that application and should be considered for activities such as convention-based registration, etc.  I hope this makes sense.  My framework does something like this currently, but it is not as strong as what I feel Prism could offer in this regard.\nEssentially what modules do is say \"these are the core feature-specific assemblies of my application, and here is some additional metadata/information around them.\"  Denoting these modules (and their associated assemblies) makes it easier (and faster) to find components, as they represent the core subset of assemblies being used for application feature use.  It's like there is Domain-Specific Language... I want to say that there are application-specific assemblies as well. :)  That is what I am pawing at with this ask.\n. Well, I can't believe I did this, but I did manage to find and compile a somewhat halfway-compiling version of my framework from about 3 or 4 years ago.  It's Prism 4.1-based and is chocked full of cool functionality.\nHere is an example of a module that I was talking about earlier: Welcome\nEvery module assembly has:\n- Module Entry Class - Registered via MEF.\n- Configuration - This is defined in the entry Module class and is where all the magic happens.  It has all the commands used to register any action needed for the module to operate.  So for instance, registering a view with a region and so on.  I managed to make a cool navigation registration mechanism, which you can also see in this file.  All the views required for the module are defined here.\n- One or More Views - All the goodness you expect from Xaml.\nYou can also see that an Icon is defined in the assembly that is used to display a visual cue whenever the module is referenced throughout the application.  This obviously will have to change in a cross-platform context, but it's interesting to see here.\nI am showing this all off as this project never really went anywhere, so I guess I want to get some ROI on my work somehow. :)  Plus, it is good to see from a project perspective how your product has been used and how it can be used going forward.\n. Sounds great, Brian.  Thanks again for your excellent diligence and engagement.  I, too, am very much looking forward to build to see what MSFT and Xamarin have been up to and will propose for the next year or so.  It's 7 weeks from today, actually. :)\n. FWIW, I have been checking out a few articles, and it does indeed appear we are in store for some disruption in regards to vNext:\nhttp://blogs.windows.com/buildingapps/2015/03/02/a-first-look-at-the-windows-10-universal-app-platform/\nhttp://blogs.msdn.com/b/bethmassi/archive/2015/02/25/understanding-net-2015.aspx\nI especially like this overview:\n\nLooks like Xamarin.Forms (and other \"App models\") will fit in nicely, although exactly \"how\" remains to be seen.  It is also noteworthy that a lot of the disruption from .NET Core will be mitigated if you are already on PCLs, but this is all still good to know from a preparation/awareness standpoint. :+1: \nSo essentially (to add to what has already been said), \"Commit Carefully\" until April 29th. :)  Thought of this thread and had to share.\n. You said it.  It is indeed a holding pattern.  If you don't mind, I will update this thread with relevant bits I find.  If not just let me know a better place (or tell me to shutup all together. ;)).\nXamarin just announced Windows Store Preview support today: http://blog.xamarin.com/xamarin.forms-for-windows-store-preview-and-xamarin-for-oss/\nI will be spending some time checking that out for sure.  I also applied for their new OSS subscription.  You should too if applicable. :)\n. OK... I am looking into DirectoryModuleCatalog right now, and I just want to verify something.  This would probably be better-suited to CodePlex's forums, but it wasn't until I found the following article through some searching that I decided to post here...\nhttp://brianlagunas.com/prism-dynamically-discover-and-load-modules-at-runtime/\n:+1: :)\nMy question is simple: It appears that the DirectoryModuleCatalog only loads in IModules from assemblies that have NOT been loaded in the current domain... is this correct?  If this is the case (and running unit tests on my side confirms this), this seems sort of backwards to me, as it seems to me that with a Directory module catalog I am going to point a module catalog at a directory and it is going to pull all the IModules out of all the assemblies in that directory.  I believe this is how the DirectoryCatalog also works this way as well for MEF, which is leading to my expectation.  I guess all the \"in memory\" IModules are expected to be added via manually or via MEF.\nAs an aside, your dynamic monitoring catalog makes much more sense (read: provides much more value) and it is something we should have here in Prism 6 if possible, IMO.\nAny clarification/verification would be greatly appreciated!  Thank you in advance.\n. Thank you for your reply Brian, but it sounds like I didn't explain myself very well.  I understand the whole appdomain load/unload, and it's a good solution.  My confusion is around the fact that I am pointing a module catalog at a directory, and it is only loading IModules in assemblies that are not already loaded in the current domain.  It seems to me that it would load ALL assemblies found in that directory (whether they are already loaded or not in the current domain) and parse them for any IModules -- much like how MEF works with a DirectoryCatalog.  I hope that helps clarify what I am trying to say.\n. BTW, if there happens to be any interest around this, I now have a pretty significant change to the Modularity functionaly in my fork at the moment.  It's actually quite a bit more than just Modularity, in fact.  Unfortunately, I am afraid I am a bit of a bull in a china shop when it comes to Git, Merging, PRs and the like, so I will need some assistance with anything we do with it (assuming you are interested in my changes).  I am not sure if it is possible to PR a select portion of code.  All of my experiences with GitHub have been all-or-nothing when it comes to PRs.  I have been merging with your primary branch, so there's that.\nEssentially, I have accomplished what I wanted to do with Modularity, which is to have it as a baseline feature in Prism that is extended to different platforms based on need.  I have the base ModuleInfo in the PCL, and then also have the dynamic-loading ModuleInfo (called DynamicModuleInfo at the moment) in the WPF library.  I also spent some time really cleaning up the DirectoryModuleCatalog (ok it ended up being a straight-up massive refactor :innocent:) as it was comprised of multiple concerns that I felt were better placed in multiple, smaller classes.\nIt is a lot, and I am sure I have violated many community rules/protocols (it would be nice if you had a ReSharper code style formatting template, btw :) ), but I just wanted to see if it might be possible to review, even though you've already said no, haha.  \nIf by the remote chance you would be interested in my changes, I am definitely willing to work with you make sure it is in a state that makes sense for your project.  Otherwise, if I've already passed the point of no return, I am definitely OK with that as well.  Just let me know what the next steps are in any case.\nFWIW I am really a newb with Git and all the new world of source control/forking so this is really the only way I am going to get good quality practice and experience. :) \nThank you for any consideration and feedback!\n. Hey sounds good to me @briannoyes... I just had to get it out of my head so it wasn't rattling around there any more.  Thank you for your thoughtful explanation and your patience in dealing with my enthusiasm for your project and my naivete with Git-ness all around. :)\n. I thought so too... but this line appears to remove all assemblies that have already been loaded in the domain, leaving only the ones that have not been loaded. Do I have that completely wrong?\n. Exactly.  So my understanding is correct.  This is different than from a MEF CatalogDirectory where you point it to a directory and it processes everything in that directory, regardless of whether or not it is currently loaded in memory, correct?\nI am thinking here that it should be named differently because of this discrepancy/difference.  Just a thought.  I spent a lot of time in the code yesterday (even though it's documented!) really trying to understand this and doing a bunch of double-takes.  But, that's usually me anyways. :stuck_out_tongue:\nAlong such lines, the documentation currently states: \"The directory catalog will scan the contents of a directory, locating classes that implement IModule and add them to the catalog based on contents in their associated ModuleAttribute.\"\nIt should say: \"The directory catalog will scan the contents of a directory, locating classes that implement IModule in assemblies that have not been loaded in the current AppDomain and add them to the catalog based on contents in their associated ModuleAttribute.\"\nPerhaps additionally it should also state: \"It is assumed/preferred that IModules in assemblies already loaded in the current AppDomain will be located and added via different module catalog(s).\"\nCorrect?\n. Haha, nope not a problem at all (but thank you for mentioning that).  While we are on it, my only suggestion going forward is that you please don't ever call anyone's code over-architected/over-complicated ever again (O-U-C-H :wink:), no matter how much so it may seem... and especially when it is utilizing/extending your product. :)\nFor a little background on myself: I have yet to launch a single application or product in the current modern public/consumer space/environment (it's been all private LOB implementations, and the last \"successful\" thing I did was a gaming website network in the late 90's, sigh), nor have I ever maintained an open-source product with any sort of sizable userbase, so I am completely understanding (and appreciative) of your viewpoints and explanations.\nNow, as for the DirectoryModuleCatalog/DirectoryCatalog problem... I did some poking around and you are indeed correct, DirectoryModuleCatalog does exactly what the DirectoryCatalog does.  The reason for my confusion is that when I created the CompositionContainer, I also added AssemblyCatalogs for all assemblies already loaded in memory, as well. #doh.  That is why everything always \"just\" worked and I had an inaccurate perception of how the DirectoryCatalog operates.\nSo, sanity restored... for now. :stuck_out_tongue: \n. Haha... well alright then, since you are still with me on this... we might as well finish the discussion from #1, then, because I have a lot to say and I am really kicking myself that I gave up so easily. ;)  \nYour assessment of the \"overly-complicated\" approach that I take just so happens to be an extension of the exact same approach that is perfectly validated by years of use in an existing system (WPF), just brought over into another (non-visual) component of a client application.  It's exactly the same approach as WPF, just non-visual.  So, I am curious if you also find that approach overly-complicated/over-architected in WPF, as well.  And if not, then what the difference is?\nAnd speaking of non-visual, I would also like to remind you that the System.Windows.Application object is also defined declaratively in markup as well (and in this case, actually references the very non-visual component in our discussion).  This approach is simply an extension of that.\nWith that said, I am interested in knowing if you also consider declaratively defining System.Windows.Application overly-complicated and architected as well?  You could easily define all of its properties in a .cs file.  Why don't we do that with our applications?  For all intents and purposes the System.Windows.Application is the original Bootstrapper.\nAnd as for that Bootstrapper, one could also make the case that it itself is \"overly-complicated\" in its own right, as it has so much concern within it.  That is, it deals with so many different areas and is so tightly coupled with so many different classes, that it can be seen as breaking the the single-responsibility principle.  This is especially so when compared with my alternative, which simply uses the commanding pattern to cleanly encapsulate logic and limits execution to a particular, singular concern per command -- exactly how it is done (or supposed to be done) with WPF commands. In fact, since the ICommand (surprisingly) exists in our PCL profile, I removed the IUnityConfigurationCommand altogether and am exclusively using the ICommand now. Furthermore (as we've discussed), this is all defined declaratively via Markup, which is designer-friendly (THE reason why System.Windows.Application is defined in Xaml), putting the cherry on top (in my view)... AND making it consistently defined like every other element in a WPF client application.\nYou know, I just feel like I have to say that just because no one has ever thought to define a Bootstrapper in a declarative manner (like everything else in a WPF application), that it doesn't make it a terrible idea. ;)\nSo I guess I am curious, since you are standing by your assessment (which I obviously respect), if you still consider my design overly-complicated/architected now that I have better explained it (and simplified it with a better intention-revealing/familiar ICommand)?  \n...at least, I hope (and feel) that I have. :stuck_out_tongue:\n. Very well, then.  I accept your apology. :wink:\n. Alright.  Well, I tried. :P  It's definitely better than what I was, so I'll take 90% there over 0%.  Thanks for the explanation, Brian.\n. Actually this might make a better substitute than #3 for general links/discussion/chat leading up to //build (until there is a chat room/forum).\nXamarin.Forms Windows Store Preview announced today: http://blog.xamarin.com/xamarin.forms-for-windows-store-preview-and-xamarin-for-oss/\n. FWIW, I am really glad you guys took ownership of this, and shocked(!) to hear that they were considering abandoning this project.  Also, it does look like Windows Forms is still part of the .NET roadmap going forward, surprisingly.  But I am in agreement that it should prioritized as far as Prism goes and best relegated to external forks/contribs.\n. Yikes to a behavior-based boolean, IMO.  It is simpler/straight-forward but leads to booleanitis.  If we can get away with checking for IDisposable when !ShouldKeepAlive(), that would be my preference/vote if it is possible.\n. Yes! :)\n. Ahhhh... Team Brian has better perspective on this matter, of course. :)  I just hate seeing booleans used where something stronger can be utilized, but that's me.  If that's the best answer here, then that's the best answer. :+1: \n. Anything other than PubSubEvent would be an improvement in my book.  I like PrismEvent from a branding perspective.  Although, personally, I would try to get away with just Event<>, if possible (since Prism is already in the namespace), but PrismEvent is better than the previous version.  Prism is just a cool/good name. :+1:\n. :+1: :+1: :+1:\n. Edit: Moved this comment to #11 to keep this thread clean.\n. FWIW here's a mention today of a \"One Core OS\" (there is also a link to \"One Windows\" as well in the article):\nhttp://www.zdnet.com/article/microsoft-delivers-windows-10-tools-for-building-universal-applications/\n. I am glad to hear about xunit's adoption.  I personally feel it's the best unit-testing experience that I have encountered, particularly when paired with AutoFixture. :+1:\n. I would vote for that. :+1:  Animation should be a concern of the view, ideally.  With that said, my Xamarin.Forms navigation experience is very minimal (but, that parameter has always bugged me).  It would be great to hear from someone with a good deal of experience around this parameter to get their take on why it's being passed around like it is and not being handled by the view.\n. That is definitely better.  I myself would prefer a clever use of an attached property somewhere, in the most ideal of situations. Again, that's just my input without me sticking my nose into it too much yet.\n. And/or a ReSharper.DotSettings file we can use ensure code is compliant with this repo would be nice, too.\nYou can also vote for my feature idea so things of this nature become an antiquated, obsolete thing of the past... as they should be.:smile:  :innocent:\n. > editorconfig solves the very real problem ...\nThis is indeed a very really problem, but I would just like to emphasize that in no way does a tool truly \"solve\" it (yet).  What it does is force the preferences of an arbitrary subset of collaborators (or maybe just one) -- and their definition of \"style\" -- upon a repository.  This is a very narrow, limiting, and confining approach.  And while it is a \"solution,\" it could be greatly improved (and I yearnnnnnnnnn for the day it is.!).  Stylecop should be a file format if anything.  \"Style\" is in the eye of the beholder, after all, and no one ever agrees on what that is ... or even if Stylecop is \"right.\"\nWith all that said, this approach is currently the best way of addressing this (very real) issue (unfortunately).  The best the rest of us can do is bitch about it (I have to provide value somehow :innocent:) until some clever bunnies start working some magic w/ Roslyn.\n. Hahaha... I'm squarely in Team Tabs, so you can appreciate my desire for such a tool. :sunglasses: This is one of those things that if I had all the time in the world, I would make it myself.  Style discussions (that more times than not always end in arguments) are just the worst, and just thinking about how they could be completely unnecessary with the right tooling makes it all the more so.  But, Roslyn is here now.  Maybe there's only just a few more years of this left to endure (one can hope!). :)\n. Wow, guess I am not in as much of a minority as I thought:\nhttp://stackoverflow.com/research/developer-survey-2015#tech-tabsspaces\nGo Team Tabs. :wink:\n(But really, go \"Team .ast\" -- wherever they may be.)\n. I like it.  My vote/preference would be without the www (seems sort of old skool and not as concise).  I also like the domain in general, as it leads towards a (wicked-short) suggested candidate \"pl\" prefix. :)\n. As an aside here, (and from what I understand) linked files are being replaced with Shared Projects (.shproj) going forward.  This is something that should be considered for the main Prism solution if possible/needed/encountered.  Their support in VS2013 is a little lacking (but accounted for).   However, they are getting 1st-class support in VS2015.\nAs for SL, I personally think it would be cool to see it supported in some fashion, maybe in an unofficial fork somewhere?  If there is enough support/energy around it to bring it into the official repo, that would be cool, too.  Personally, I have said my goodbyes to SL but a part of me would like to see it continue however possible (I still think SL5 is the best tech MSFT has ever released to date!).\n. > public MyVieModel ViewModel\n\n{ get { return (MyViewModel)DataContext;} }\n\nYuck. :stuck_out_tongue_closed_eyes: (Not you, Brian, just the nature of the matter.)\n\nWhile x:Bind brings a nice performance boost, it sadly breaks the separation between view and view model that MVVM brings. Not sure if we should add code to enable this scenario.\n\nI agree.  What is going on over there in the UWP group?  I am not sure if you saw this, but they actually admitted during this Channel9 session that they were considering removing Bindings from Xaml altogether as an actual legitimate solution before landing on their \"new and improved\" x:Bind.  Even after all this time, they still don't have markup extensions (or about 80% of what makes Xaml so awesome).  As you (sort of :smile:) allude to, Bart... does anyone in that group know (or care) what MVVM is or are they just making it up as they go along?  The whole WinRT/Windows Store platform feels hijacked compared to WPF/Silverlight.  That's exactly the word it feels... hijacked, and by all the wrong engineers.  Right down to that blasted Curtain of COM that hides all the particulars so you can see what is really going on in the application.\n(Sorry.  Just had to rant a bit.  It's been a while!  Haha.)\nTerrible.  Just terrible.  And frustrating.  Is it too late to start (another) Silverlight6 petition?  Doh.\n. > Names are hard haha.\nYes they are.  Just ask PrismEvent, erm PubSubEvent. :wink: \nI don't have an easy answer here either, but I do like the paths of @apollyonbob's suggestions.  I would like to point out that at the end of the day, \"x\" is merely a prefix for a namespace.  It is entirely possible that some developers might choose to use another prefix altogether for that namespace, assuming that the fine folks in the UWP group allow their \"Xaml\" parser to account for such creative freedom (sigh).\nHow about IHaveAViewModel? I kid I kid...\n. Awesome... congratulations Team Brian and the rest of the hard-working team here!  Exciting to watch this actively develop!!\n. I believe you will find support behind this.  I know I have discussed this very problem of the Bootstrapper rigidity with @JohnTasler and he might also provide some feedback here.  \nAdditionally, in my fork you will find a Setup object that is designed to replace the Bootstrapper's tight-coupling (in a Xaml-described-friendly way) along with discrete SetupCommands (by way of implementing the ICommand interface) that perform the different activities of the bootstrapper.  This gives you a fine-grained control over the initialization process and allows you to do it in a Xaml/designer-friendly way.\nTo your suggestion, here is a command that sets up the shell in Unity and here is an example of that command described in Xaml.\n. Nice.  Voted. :+1: \n. I would agree with @briannoyes on Gitter.  It is great for smaller projects, but they have a lot of work to do before it is viable for larger projects with mass activity.  It's actually very disappointing in this regard as you would half-way expect them to have an innovative approach this problem.\nI would also add a vote to the awesome of StackOverflow. :+1: \n. ",
    "JohnTasler": "As much as I like XAML for many things, even outside of UI, I have to agree with Brian here.\nSystem.Xaml is great, but the only platform it fully works on is .NET 4.x. These days, XAML implementations are too varied. Many still don't have {x:Type} and {x:Static} markup extensions. For a bootstrapper, C# seems simple and sufficient.\n. I like ..Windows.OneCore for the UAP namespaces.\n. Sure! I'll take a look later this evening.\n-----Original Message-----\nFrom: \"Brian Noyes\" notifications@github.com\nSent: \u200e9/\u200e16/\u200e2015 1:29 PM\nTo: \"PrismLibrary/Prism\" Prism@noreply.github.com\nCc: \"JohnTasler\" taz@MysticPop.com\nSubject: Re: [Prism] Suggestion for creating the root Frame (#37)\n@JohnTasler Could you confirm whether the changes we made to add CreateShell in #102 make it so you can address the problem you were having here for UWP?\n\u2014\nReply to this email directly or view it on GitHub.\n. I was also about to send a pull request for the Windows 10 UWP changes. I did get the unit tests to work. Perhaps Brian could cherry pick both of our commits.\n. I think the only thing that mine added was that I was able to get the unit tests working.\n. That's a reasonable solution that takes care of that problem. Thank you.\n. Thanks, Bart, for implementing this!\n. This is definitely more about UWP XAML, and not really at all related to Prism. However, I may have some suggestions if you could send me a small repro project. I just coded up something last week regarding the DataContext of a Flyout for an application I'm working on.\n. ",
    "briannoyes": "This is a limitation of .NET, once an assembly is loaded there is no way to unload it unless you restart the process or load it in a separate appdomain, which opens up a whole separate can of worms we decided not to pursue back in Prism 1.\n. When it comes to the long standing, stable code of Prism that in use by thousands of companies, I don't think we would even entertain bringing something like that back in just to \"clean it up\" unless there was substantial improvements and new functionality making it worth the risk that fit within the roadmap that we have for the main code base of Prism. And for us to even review it, it will need to be submitted as a pull request with 100% unit and acceptance test coverage (like the existing Prism code base has).\nSo you may just want to consider keeping your fork out there as a public fork and document well what you think it does that we don't and get a following around that yourself. If there is a significant interest from others then we could consider bringing it in more strongly.\n. But also because we are an open source project, we would also encourage people to create value-add forks of our code base. Back when we first release Prism 1, we had compositewpfcontrib on codeplex for those kinds of additions, and I was the one who ported the code to support modularity and CompositePresentationEvents for Windows Forms because I was still doing plenty of Windows Forms work then to see the value in doing so.\nI'm there are others who would benefit from a current Prism fork making the features that make sense and are possible in Windows Forms available there, but as Brian Lagunas said, we have to draw some bounds for our roadmap based on our team and resources, and I'm afraid Windows Forms is a little too legacy to be on that roadmap.\n. I think the RegionBehavior is probably the best way with current code base because I don't think the Region/RegionManager currently track whether a contained view was provided as an instance (via  Region.Add or RegionManager.AddToRegion or RegisterViewWtihRegion (factory method version) or whether RegionManager created it (through RequestNavigate or RegisterViewWithRegion - type variant).  If we added tracking of that, then it seems it would make sense to check for IDisposable and call it if the View/ViewModel had IRegionMemberLifetime.KeepAlive=false. \nPossibly a simpler and more straightforward way would be to add another property to IRegionMemberLifetime.DisposeOnDeactivate and do it based on that?\nI do think this would be a very useful extension for us to add.\n. The problem as I mentioned is that if the view was provided to the region by the module code, then the module may still hold a reference to the view itself and is therefore the lifetime owner of that object and it would be inappropriate for the region manager to dispose it. \n. Good point @gep13 I use Sidewaffle for a lot of web templates. Have never built out templates on Sidewaffle, so not sure how much easier it really is. I think @britchdavid might jump in there and do this for us since he created some before for the p&p Prism team. Would leave that decision up to him.\nOnly thing I don't like about SideWaffle is that unless you get into customizing it you end up with the clutter of a lot of templates (project and item) that you probably don't use and just adds noise to the environment.\n. Thanks for the info @sayedihashimi . I knew that I could customize the set of templates that get installed by forking the code and tweaking things as you said and did start going down that path one time. But in the end since I didn't need to create any templates of my own, I gave up after a short while, and decided to instead just keep downloading the vsix that is on the home page for SideWaffle and then deal with mild annoyance at seeing templates I don't care about. :) \n. I'll play devil's advocate here and ask where is the added value in porting the extensive existing tests to NUnit or XUnit. What kinds of tests do we need that can't be done in MS Test? Given a green field start to the project I would not argue strongly in favor of MS Test over NUnit or XUnit, but I don't see any value in migrating. Everyone has their opinions on what the best test framework is, and most of the time it boils down to \"I like the way this one does X better than that one\" - and opinions without added value or that do not advance the capabilties of the framework are not something we have the time pursue. Come forward with concrete arguments about how MS Test is insufficient for the unit test needs of Prism and we can consider it. And then it would require someone who is a proponent of switching to do the work of migrating all the existing tests to the new framework and submitting that as a pull request once we had agreed to move to a different test framework.\n. Fair points. We'll have to discuss how far into the field of supporting development of Prism.Forms on non-Windows machines we need to go.\n. Bart could you confirm this is solved now?\n. @bartlannoeye Ping - this one still an issue?\n. Hi Bart,\nIs this one still an issue?\nThanks, BrianN\n. Since you navigate to a page based on a logical name associated with that page (done so that view models can request navigation without being coupled to the view), I would expect that we would be able to remove them by logical name as well. Logical name maps to type name based on convention that is overridable. I don't think that should be hard to add.\n. Why not use its actual new home at github.com/prismlibrary?\n. Fair point, since we own the domain and since it would make intellisense selection quicker, I vote for http://prismlibrary.com\n. Another path depending on how risk averse you are is to pull down the current Prism 6 librarys from this repo and include them in your solution. Then when the release happens and the NuGets are available, it will just be a matter of removing the projects and adding the nugets and you wont have to deal with the namespace and type name changes later. Of course it is not released yet and we have a little ways to go before we will be ready for the first Prism 6 release, so that does mean you might deal with a little bit of change volatility there, but I wouldn't expect any breaking changes to existing core features of Prism, just the namespace and project changes which are mostly done at this point.\n. Sounds like a very reasonable ask, and in line with some of the changes we are making on the WPF side to add extensibility points. We are not planning on coming up with the full plan for a new release of the Prism for Windows Runtime until after Build, but will keep this open and make sure we do something along those lines in that release.\n. @JohnTasler Could you confirm whether the changes we made to add CreateShell in https://github.com/PrismLibrary/Prism/issues/102 make it so you can address the problem you were having here for UWP?\n. I believe we have this covered now with the addition of CreateShell method to allow you to create SplitView and put Frame in the content area. If not open a new issue with more specifics of what you are blocked on. Thanks.\n. We would be fine with adding this in if someone submits as a pull request with code following the patterns of the other DI container implementations.\n. While I think it is trivial to handle this on a view by view basis with a CallMethodAction wired up in the view, I would agree that it is a common enough requirement that it would be good to have Prism just do this for you.\nThe only challenge is this: Prism can't do this for you unless Prism is in the loop on View/ViewModel construction. That means we could do it for any Region containment scenario, and we could also do it for any use of the VML. But we could not do anything if a developer news up their own V/VM and marries them with View-First or ViewModel-First patterns that don't involve Prism, which is also fairly common in a lot of Prism apps today.\nI like the interface approach since it is consistent with other contracts that Prism goes looking for on Views/ViewModels - like IActiveAware, INavigationAware and so on.\nSo my only question is - does anyone have any hesitation with us supporting this if it would only be invoked if the view were constructed by a region or uses ViewModelLocator?\n. Good point, I would say I need it less than 10% of the time, and then a quick drag and drop in Blend and declaration of the method in the ViewModel and I have it wired up with a Behavior in less than a minute, so may not be worth putting \"in the box\"\n. Sure, that would work too, but this is one of those places where commands feel a little heavyweight to me, since there is no explicit user interaction that triggers this and there is no enable/disable that would apply to this scenario. So I always use CallMethodAction instead for a direct method invocation on the VM.\n. Not sure if this is from the same person, have been having discussion about this here: http://compositewpf.codeplex.com/discussions/627396#post1418779\nAnd just asked them to post as an issue here this morning.\n. Thanks for the repro, I can run and see the problem there. This issue is in our backlog and will try to get a fix in with our next release.\n. You might want to check out my article here for a head start on that: http://blog.pluralsight.com/async-validation-wpf-prism\n. FYI - will be working on porting the validation support from Prism for Windows Runtime to Prism for UWP in the next week or so. There are a couple of changes I would like to make in that process including making the validation mechanism more pluggable, and intend to try to make it so as much of it as possible can go into the base Prism PCL so it will support all Prism platforms.\n. I've already got a specific design in mind, just need to find time to get to it. To me it would be inappropriate to put it on ViewModelBase because just as often it is the model objects that need the validation support and it would be weird to put a ViewModelBase base class on a model object. But one of the deficiencies of the original design in Prism for WinRT was that you needed the ViewModel(Base) class on your ViewModels for the navigation and state persistence support, but often wanted to have the validation support on the ViewModel properties as well, but could not achieve that with single inheritance in .NET. The other things we want to do include: put as much of the implementation in the Prism.Core PCL to avoid total duplication in the platform specific libraries, and have a pluggable mechanism for the specifics of how validation is performed so that you can either use the default strategy of Data Annotations (which are not supported in a PCL) or be able to plug in something else (i.e. the FluentValidation framework).\n. Agreed.\n. Still want to do this, but too big of a change to get in first release. Since we want to look into bringing in regions and modularity, that would be the sensible time to address this.\n. It was an intention part of the design to keep the Navigate call decoupled from the ViewType because those are often called in ViewModel code, which should not be coupled to a view type explicitly. You can always do a ToString on the Type of the view if you really want to use that as your string, but it would violate the design intent of Prism to require you to pass the View type for navigation.\n. The problem is that if we introduce [DataContract] on the base, it can break the serialization of anyone who has been using it as is as an implicit data contract. See my post here on some of the problems with doing this: http://briannoyes.net/2014/09/29/be-aware-of-differences-in-explicit-and-implicit-deserialization-with-dcs/.\nMichael, are you using explicit data contracts in your serialization instead of implicit serialization that you can do with any public type with public properties? If so, is it so you can cherry pick which properties you actually serialize? If so, possibly a better solution instead of us introducing something that could be breaking change to a much larger audience than it solves something for, you could have separate objects you use for your serialization, and use AutoMapper as a simple way to transfer the data into those objects before you serialize. Then you are in full control of the types you are serializing. \n. I don't see what us adding an interface is going to buy. If you want to use x:Bind, you have to give up some decoupling and expose a property that is your ViewModel type from your code behind. Done in one line of code. What does adding an interface help with other than adding unnecessary complexity?\n. It is on our roadmap to integrate modularity and regions into the UWP platform version of Prism. However, the first focus is on migrating the existing Prism for Windows Runtime functionality over to UWP and once that is all ready to go, that will be our first UWP release. Then we will focus on moving modularity and regions in and I would anticipate that being a second release somewhere down the road.\n. It is certainly our goal to get a first release of the UWP support ready so\nthat we can release shortly after Win 10 RTM's, but we will always need a\nlittle time beyond that to test against the newly released bits, and we are\nalso already a little behind schedule on getting the PrismRT code migrated,\nso a little hard to say for sure.\nOn Mon, Jun 15, 2015 at 4:22 AM, ChSchmidt81 notifications@github.com\nwrote:\n\nThanks for your quick answer.\nI now it is always difficult to say but do you have a rough timeframe on\nthe releases.\nWill the first release be ready for the start of Windows 10.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/60#issuecomment-111975154.\n\n\n\nBrian Noyes\nCTO and Co-founder, Solliance http://solliance.net/ & Pluralsight Author\nhttp://www.pluralsight.com/author/brian-noyes\nMicrosoft Regional Director / MVP\n. Brian L, I discussed this with him on CodePlex - believe it was just an oversight in Prism for Windows Runtime because share contacts were not in scope for our releases. Should be easy to address and make sure we cover in Prism YEP release\n. @Novan123 OK, good to know. Not surprising since the only two launch scenarios we were specifically targeting and therefore testing were launch from a primary (start screen) and secondary (deep link) live tiles.\n. @bartlannoeye I'd say updates to the Win 8/8.1 code base are our lowest priority, and as you already know we are not progressing as fast on WPF/Xamarin/UWP support as we would like (unfortunately none of us get to work on this as part of our paid work). However that being said if there are some quick fix things we can do to that code base to get a new point release out there for it, we would be open to that, especially if someone else is willing to do the leg work and submit a pull request.\n. I agree that Dictionary would have been better if that had been how it started. But many prefer a dictionary like object that just returns null if the key is not found instead of either having to deal with an exception (with associated perf concerns) or do the slightly more complicated coding pattern of always having to ContainsKey first or using TryGetValue with out variable + bool return type.\nThe more important reason for the decision is that introducing this now could break thousands of apps out there using Prism 5 if they move to 6 with key not found exceptions. That argument trumps any \"this is cleaner\" arguments by a couple orders of magnitude.\n. @jan-schubert I'm not sure I understand exactly what you are looking for. Prism has nearly 100% code coverage of the framework code. And a little history - when we first developed Prism 1.0 (aka Composite Application Guidance for WPF), we were not allowed to use a proper mocking framework because of constraints Microsoft legal put on us so we had to write manual mock classes for everything. Later in Prism 4 we got past that and could use MOQ and did. But the mock classes you see in the Stock Trader are remnants from Prism 1 - us doing something we didn't want to have to do in the first place.\nIf you have a clear idea for what kind of unit test helpers or mock helpers you need, then I would encourage you to implement them and submit as a pull request. \n. Any method invocation on an interface dependency is trivial to mock out with MOQ, especially with fairly static parameters like those, but even when the parameters vary per call. If you are not familiar with how to do that, I'd strongly suggest looking into it. It is liberating to be able to handle these kinds of scenarios with a single line of mocking code to setup expectations instead of having to code a whole class that you can parameterize.\n. Closing as core issue is same as #43 - consider moving extension methods onto interfaces to make them easier to test. We will not be pursuing adding mock classes since we consider using a mocking library a more maintainable approach.\n. We'll probably be moving a few things around into better named namespaces and such. But please do try it out and let us know of any non-naming problems :) Will be adding the validation support tomorrow and then seeing how hard it is to migrate AdventureWorks Shopper app as well. Migrating the RI is not a high priority, but going to use it to see if there are any subtle breakages I didn't catch.\n. I'm open to adding some functionality for this. If anyone wants to take it on now that there is a starting point there and submit pull request, that will help get it there sooner.\n. I'm interested to hear what kind of use cases we would be addressing with stuff like this. Even the removal of items from the back stack was something I have not encountered a need for. Sounds a little like you want to be able to use the linear back stack that the platform offers to be able to do a more hierarchical back stack with branches and stuff like that, but that implies that the code doing all this direct manipulation of the back stack has to maintain the semantics by using the back stack in \"tricky\" ways. I'm just wondering if a different kind of navigation controller service might be a better fit for those kinds of requirements?\n. I see. That makes sense. Just to throw it out there another way I could think of to address that is to have a base class on my ViewModels that raises a PubSubEvent to signal what page was just navigated to. But I agree that being to build this into a list control would be a cleaner and more reusable way to handle that. And if we put that in maybe you would be willing to contribute your list control for inclusion in Prism to nicely handle the SplitView nav.\nAnyone else have any reservations in exposing the back stack for observation like this?\n. I'll look into it. We could introduce a dependency between the DeviceGestureService and the NavigationService so that the DGS could handle the navigation events and check CanGoBack to set that appropriately.\n. I think I like that approach. My only hesitation is that Prism itself has never depended on PubSub Events for any of its logic. But I agree this would be a good place to start because of the looser coupling and because as you said it makes the event available for any other app code that needs it. Go ahead and submit a PR please.\nThanks\nBrian\n. As far as I can tell, this is addressed with @ali-hk and @jorisdebock 's PR's that were merged a long time ago. Closing, re-open with details if you are still blocked by something about back stack access.\n. Thanks for that @ElementalNex! Beat me to the punch, I love it. That was on my TODO list for tomorrow. Will review and get it checked in in the morning. Might make a few small naming tweaks to be as consistent as possible with WPF unity bootstrapper, but looks very close to what we wanted.\n. Thanks much for taking care of that Bart. I'll ping some of the platform team to see what the story is on SettingsPanel.\n. See my comments on the pull request thread.\n. I think this goes against the design guidance I heard watching the Windows UWP MVA videos. There they said that for mobile apps if you are at the root of the navigation stack, the hardware back button should take you out to the OS level to be consistent with current Windows Phone behavior. But for any non-mobile app, you should do nothing when when you get to the root of the stack. \nI think we need to modify the code provided to have a separate handler for system back button nav to not Exit() unless it came from a hardware back button, which would only exist on a mobile platform device. Additionally, i think we need to add some management of the visibility of the system back button as outlined in this post:\nhttp://www.wintellect.com/devcenter/jprosise/handling-the-back-button-in-windows-10-uwp-apps\nAnyone disagree or have other suggestions?\n. Very nice contribution @jorisdebock Thank You! Unfortunately my git merge skills are still somewhat infantile, so I ended up having to do some manual merging to get it all in there. But it is there now, so closing out this PR.\n. Whups, sorry about that @veccie, crediting the wrong person, even though @jorisdebock has been nicely engaged lately too. Thanks to both of you for that.\nIn terms of the initialize call - are any of these capabilities checks unavailable during application construction? I seem to remember that with some of the other services (navigation maybe) we could not fully initialize it during app construction and had to wait until OnInitialize to do it. So the pattern \nadopted was that it was ok to construct your service on app construction, but any initialization would be deferred until OnInitialize(Async).\n. @veccie I'm doing some code review and clean up on the DeviceGestureService and am having a hard time understanding what you intended by making DeviceGestureEventArgs cancellable. For most uses of it, it is a hardware button being pressed at a device level and the service is being notified that that has happened and is giving other code the opportunity to subscribe to know about it and do something about it without having to be direct coupled to the platform APIs. All good there in terms of putting a unit testable interface in place and allowing the handlers to be distributed in multiple places in the app in a decoupled way. Again all good. Handlers have the opportunity to set the Handled flag, which gets passed back to the system handler through its event args. \nSo what does cancel really mean? You can't unpress the button. I see that you are using it to stop invoking other subscribers, but that seems really fragile and non-deterministic - no subscriber can know whether it is first, last, or in the middle somewhere, so setting cancel will have unpredictable effects. \nI need you to give me a scenario for how this would be used.\nThanks\nBrianN\n. Just to make sure I am clear - can you cover the goback from root on mobile case using the Handled flag since the platform event itself has no notion of Cancel - only Handled?\n. Will be looking into it within the next couple weeks. If we can trim down or better yet elimination the need for a page base class, I would be all for that.\n. hah, already have the work done, just need to check it in.\n. Changes are checked in with PR #164 \n. @profjb Think you got the wrong Prism open source project - we are a framework for building XAML applications for desktop and mobile Windows. Nothing to do with Minecraft here, although my son is an addict. :)\n. We intentionally did not use EventHandler because doing so implies that the UI is passing a reference to itself (the object sender argument) to the ViewModel, which if used breaks the separation intentions of the MVVM pattern. And EventArgs is a useless argument in this case as well, so Action was a cleaner definition of what was needed - simply a poke to say the UI interaction is done. It was defined as a property because again an event requires an object reference to the thing that exposes the event - more coupling that goes counter to the MVVM pattern.\n. Agree with @feinstein here. The Style approach should cover most if not all bases. If there are specific things that cannot be set through the Style, let us know and we will consider them. But trying to add individual dependency properties for specific things is a nearly bottomless pit - we are not going to try to cover every possible thing someone might want to customize that way. Especially because the architecture of interaction requests is already fully extensible - if you want to do something different than what the Prism implementation supports, write a custom behavior that starts with the code from Prism and does whatever specific thing you need to do. If you can convince us that there is a broad enough audience for that one thing, then we can consider pulling your behavior into Prism as an alternate strategy we support. \n. Oops, didn't mean to close there - leaving open until we implement the Style property.\n. Closing as dupe to #126 \n. I took Bart's pull request that accomplished the same thing. If you think there is anything added in this one that was not included in Bart's let me know and I can pull those changes in as well.\n. Fixed\n. I agreed with @veccie 's comment, so took the ResourceLoader part out.\n. If you take a look at the ReferenceImplementation app (AdventureWorks Shopper) in the Prism for Windows Runtime releases (1.0, 1.1, and 2.0), the ViewModels and client services are in a separate UILogic library, and in OnInitialize in the app class, the type resolver is replaced with this:\nViewModelLocator.SetDefaultViewTypeToViewModelTypeResolver((viewType) =>\n            {\n                var viewModelTypeName = string.Format(CultureInfo.InvariantCulture, \"AdventureWorks.UILogic.ViewModels.{0}ViewModel, AdventureWorks.UILogic, Version=1.0.0.0, Culture=neutral, PublicKeyToken=634ac3171ee5190a\", viewType.Name);\n                var viewModelType = Type.GetType(viewModelTypeName);\n                return viewModelType;\n            });\n. Hi @vsmike, this pull request looks pretty harmless, but would like to understand your scenario a little better before pulling it in because I don't understand the tie with modules and view model base classes you mention. Your PR code would make it so you can get back the Func that is the view model type resolver, but curious how you are going to use that. Do you invoke it yourself to see what Type of VM a given view might produce and then execute some other logic based on that?\n. OK, going to close this out then. Thanks.\n. Hi,\nYou are not the only one asking for this. We definitely have it in our backlog for UWP, but have a few other things that are higher priority at the moment. As you mention, we will have to look into whether it makes sense to add some kind of support for SplitView before we add regions into Prism for UWP, or whether it just makes sense to wait until we do that so that then we can just do it as a RegionAdapter. I'll add some more info here once we get to looking into it.\n. Good catch, we will look into it. I think the solution in this case is just that when working with a dictionary you should never blindly try to add or access something by key, you need to do a ContainsKey check first. \n. Thanks @veccie, I think these changes make sense with some minor changes. I would make CreateShell virtual and have it just return the shell passed in. No need to force people to implement CreateShell if they just want to be a single root frame, and your null handling in OnLaunched covers that. I'm not aware of any scenario where OnLaunched would be called more than once, but as the comments indicate, I think if the app is launched from a secondary tile and possibly other launch types besides normal user launch (not sure what all there is in Win10 yet), OnLaunched might not be called, so would need to look into those to make sure the right things are happening on startup.\n. We also need some test code for this new functionality along with the pull requests. If it can be unit tested (i.e. not touching things like Frame), then there should be unit tests along with the pull requests. If it can't be unit tested, then add some functionality into the HelloWorld app that exercises it and shows its use cases.\n. Please do, thanks.\n. I'll try to get it in this evening, if not first priority tomorrow.\n. Not a priority for us at this time.\n. Hi @diego2k, good catch. I knew there were some other kinds of launches we did not have covered. The code is a port of the Prism for Windows Runtime release, which explicitly only supported live tile and secondary live tile launches. I'll get a fix in for this within the next few days.\n. @diego2k Could you confirm if this is still an issue with the changes that have been made in the activation pipeline in PrismApplication?\n. Since I don't have an app all ready to go that does toast messages here, could we get you to submit a PR with the changes to PrismApplication that you think will address this issue?\n. This just because of how DataContexts work in XAML in general. Anytime you set a DataContext on an element, that DataContext becomes the DataContext of all child elements that do not have another DataContext set (explicitly, or through template binding, or through ViewModelLocator). Since your pages that you are putting in the SplitView don't set a DataContext, they are part of the visual tree of that entire screen, so the DataContext of their parent cascades down to them.\nThe reason the navigation methods on the parent get called is because the way the navigation service is set up, whenever a nav happens on a frame, the service is notified and it tries to cast the DataContext of the current and next Page to INavigationAware. As long as that cast succeeds (which it will in your case because the current DataContext for the Page is the inherited one from the shell page), it will call the OnNavigateTo and OnNavigateFrom methods on that object.\nI'd recommend any page that you are going to place in a Frame and do navigation have a ViewModel, even if there is nothing meaningful to put on it at the time. It will both fix this problem and it just keeps the symmetry that all navigation pages are Views in the MVVM sense, and all MVVM Views have their corresponding ViewModel. There are sometimes special cases that you intentionally want to let a child view just inherit its parent's viewmodel, but those should be rare because they are really breaking the encapsulation of the pattern.\n. Another good one @frogger3d - would you mind submitting these as pull requests (along with your interaction request one)? \n. Same benefit an async dialog does - RequestNavigate does not complete until the current ViewModel allows it if it implements IConfirmNavigationRequest. During which time it can pop dialogs, interact with the user, etc. Having the calling code be able to say await RequestNavigate would just be a lot cleaner if the calling code does not have anything else sensible to do until navigation completes than having to provide a callback.\nAlways keep in mind that await Task does not mean \"block thread\", it means \"pause this method's execution until the async thing is done\".\n. Like it! Pull request?\n. Good idea. Have thought same thing myself at times and just never got around to pursuing it. Probably won't make it into Prism 6.0 since we are trying to wrap things up for that right now, but I'd vote for this being a candidate for our next release.\n. Done\n. Not sure what you are saying the problem is. ExtendedSplashScreen works as designed for Prism for Windows Runtime under UWP as well. I've added a sample here that shows it in use:\nhttps://github.com/PrismLibrary/Prism-Samples-Windows\n. If you can provide a small repro of the problem and point us to the guidance around how this is supposed to work, we will look into it.\n. This does not appear to be a Prism problem, more of a platform/tooling one. I can repro the problem by:\n1. New Universal app project\n2. Add DeviceFamily-Mobile folder and add a MainPage.xaml as a XAML View into that folder.\n3. Move MainPage.xaml (with code behind - created by project template) into a \\Views subfolder and change its namespace to include .Views.\n4. Change the namespace of the mobile version view to match.\nI'm a Windows Platform MVP and can get a message to the platform team so they are aware, but closing this here since it is reproducible with no Prism in the solution at all.\n. Oh, and more information - simple workaround - the DeviceFamily-Mobile directory just needs to be a subfolder of whatever folder/namespace the desktop/root view is defined in, so move that folder under the Views folder and it works fine.\n. No, not a crazy idea @tomzorz, I had the same thought as an easy workaround for now is just to inject ISessionStateService into the corresponding ViewModel and/or View to write what is needed in and out of there. The hitch with that is that I don't think you wouldn't get the persistence of the navigation stack history (forward/back state) of the outer frame. Once we get to doing regions in UWP we would make sure to cover this scenario because regions can always be nested in other regions in WPF and they each maintain their own nav stack. But I think it is a ways off until either of us Brians will have time to get to that since this is not part of our day job.\n. ok, I'm going to leave this issue open for now as a reminder that we need to do some work around making Prism for UWP play nice with SplitView, but removing it from the first release milestone\n. Because it was released as Prism 4 for WPF and Silverlight and was the only way to pass parameters until Prism 5, lots of WPF apps use it too. We would break too many apps by removing it and I think some people might actually prefer using the query string style of passing the arguments instead having to create other objects in the dictionary of parameters now supported.\nPersonally I don't think it should be deprecated, but would like to hear other opinions since we have deprecated and removed other capabilities that had replacement approaches (i.e. CompositePresentationEvent). But in those cases it was more of a 1 for 1 replacement, not an alternative  style.\n. Good point. Thanks for reminding us. Didn't bother for 6.0.0 since we would not have called that a release if we realized we left out the doc comments. :)\n6.0.1 is now tagged a release.\n. We could consider this, but would need to make sure there would not be any side effects that might break existing apps by doing do. If I understand what you are trying to do there, you want to use what is registered with the container to determine what modules load instead of just configuring them through Prism's normal mechanisms.\nThe problem with the code you showed there is that the ConfigureModuleCatalog method is intended for just what its name implies - reading in or programmatically setting the configuration of what modules are supposed to be loaded. The instancing of modules happens later, when the ModuleManager uses that catalog and creates a ModuleInitializer to load and initialize each module. \nSo if you did what you are showing here, the call to GetAllInstances would create an instance of all the modules registered with the container, just to get metadata about them to shove into the module catalog and then it would be releasing those instances, then the module manager would kick in and create new instances which would then be used to actually call Initialize... not a very efficient approach unless the modules are registered with the container as singletons, and that goes against the model of Prism that module classes are just a transient object that is created and used to initialize the module, but then goes away.\nWith the existing code the \"right\" way to do it would be to implement your own ModuleManager, which gets called after the container is initialized, and have it figure out what modules to load from the container and not even use the module catalog.\n. Yeah I spent some time staring at that one two, almost always get the race condition when running all tests but always runs green on its own and for the life of me I can't see why. Low priority as a result but will keep open until we figure out why.\n. Yeah, in fact with the current Prism.Windows.Tests project, if I try to Run All in Test Explorer, VS just kind of goes in limbo and never starts any of the tests. But if I select all tests and right click and run all, they run fine. Would love to figure out what is going on there, but for now as long as the tests run somehow I haven't had the bandwidth to try to figure out if it is a bug with VS, the platform, or something weird about our test project. I even tried creating a new Windows 10 UWP project and test project on my machine and the same happens for me for the out of the box project templates, so not thinking it is really our code that has the issue. And I've tried on all three of my machines with same results.\n. @diego2k Why is it not possible. You can definitely define ViewModels in a Windows Universal Class Library project, derive from ViewModelBase, add a Windows unit test project to the solution and test it from there, just did it.\n. You are in the right place, and we are using this for general questions for now. \nWhat you want for Win10 UWP development is the Prism for UWP part of the code base here. We don't have NuGet packages out there yet because we are pre-release, but hope to get a release out early next week. For now you can download the code and use the Prism, Prism.Windows, and Prism.Windows.Unity libraries as those have all been ported from the Prism for Windows Runtime release a couple years ago for Windows 8.1 to Windows 10 UWP.\n. I was involved with adding the async methods to the command classes but it has been a year and a half since I looked at it.  We can discuss via Skype if you like.\n. All very valid points. The reason for some of this is that the current code is just a quick port of the Prism for Windows Runtime code. When the p&p team built that, they explicitly did not want to take a dependency on having a dependency injection container because their assertion was that most Windows Store apps were not going to be that complication so shouldn't necessarily need one and the team did not want to force the idea that someone that wanted to use Prism would have to know anything about DI. \nWe have found a lot of places in the Prism code base where there was insufficient use of virtual to allow overrides of things, so totally agree that opening things up for extension through inheritance makes sense. \nI generally prefer the pattern of base class private method calls a virtual or abstract method that the derived type would override to do the extension at the right time in terms of whatever the base class implementation is doing.\nI'd say go ahead and submit a pull request with the changes you are recommending and we will pull it in.\n. @isvaljek If you were on Prism 5 that implies WPF. Prism.Windows is for Windows 10 UWP development. You would want Prism 6 for WPF. If you just search on Prism 6 in NuGet you will see Prism.Wpf and the associated libraries for whatever container you want (Unity, Autofac, etc).\n. Its now part of the http://prismlibrary.com alias, same as everything else you would use in WPF XAML - so you just need that one xmlns:prism=\"http://prismlibrary.com\" and you should be able to get to ViewModelLocator, RegionManager, InvokeCommandAction,, etc.\n. I think you have to have a trailing / on http://prismlibrary.com/\nBindableBase is still what you should be using for the base class for any ViewModel or Model objects to get the INotifyPropertyChanged implementation.\n. Use InvokeCommandAction behavior with an EventTrigger hooked up to mouse double click event and the Command property of the behavior bound to your ViewModel command property.\n. Yes, I'm afraid there are still a lot of things like this in both Windows 8 WinRT and Windows 10 UWP where the only way to get it done is with either some code in the code behind or sometimes by writing a custom behavior if you need to do it in a lot of places.\nKeep in mind that the \"no code behind\" guidance of MVVM is just that - guidance. There are always scenarios on all of the XAML platforms that you either can't do something without a little code in the code behind at all, or the alternative to a few lines of code in the code behind is a complex workaround that ultimately becomes hard to understand and maintain.\nCode that uses the exposed APIs of controls to get the job done in the code behind is View code same as XAML and there is no crime in that. As long as you don't keep sliding down the slippery slope and start putting data manipulation and logic there that is not directly coupled to the UI elements in the View.\n. EventAggregator is still in Prism 6, it has just moved into the Prism.Core PCL library. The event type is PubSubEvent instead of CompositePresentationEvent.\nJust like before, a singleton instance of EventAggregator is registered in the container by the bootstrapper, so constructor injection is the recommended way of getting a reference to it. \n. As long as the VM is being constructed through the container, which it will be if you either use Region navigation or you use ViewModelLocator. You can have as many constructor parameters as your ViewModel needs, as long as the container has registrations for the types of those parameters. \nIf you were manually constructing your VM and passing in those parameters yourself, then you would have to go with a \"poor man's\" DI approach - expose a static reference to the container somewhere - i.e. Bootstrapper which can be populated in the CreateContainer override, and then use the static ref to programmatically Resolve event aggregator.\n. You could use that. What I would recommend instead is a client service or repository that manages that shared state and that both the low level and higher level VM's inject as a dependency. That repository can raise normal .NET events when the shared data changes so that the other VM gets passed the data that way.\n. I would try to handle that by setting up a pattern in the lower view models that they inject the repository when they are constructed, immediately subscribe for state changes, and retrieve current values as part of construction. Then as long as the instance sticks around, they will get the event that tells them the state has changed, and each time they are constructed new they retrieve the current state.\nIn terms of reading or tutorials, the book we wrote on Prism 4 is still accurate for Prism 6 with respect to most things about modularity, regions, commands, and events other than the namespaces have changed. We added ViewModelLocator and BindableBase and a few other MVVM related things in Prism 5 and then enhanced some more in Prism 6. The latest official docs before they handed over the code to the community is here:\nhttps://msdn.microsoft.com/en-us/library/gg406140.aspx\nBrian Lagunas and I have some courses on Prism in the Pluralsight library as well. If you do not have a subscription shoot me a note brian.noyes at gmail.com and I can get you a 1 month pass.\n. The bootstrapper's job is to get the Prism \"environment\" initialized. That means setting up the container, getting all the services that are part of Prism registered with the container and initialized before the app and modules start loading, and then kick off those two processes as well. \nThe way RegionManager works it needs access to the visual tree so it can detect the regions that are there during the initial parsing process or those dynamically added for the RegisterViewWithRegion and navigation functionality. So the RegionManager cannot be treated as ready to go until it has access to the shell, which is why shell creation and initialization are part of the bootstrapper workflow.\nI'm not clear on what coupling you are really objecting to there though. The only coupling that is there is that the bootstrapper is aware of a UIElement that you treat as your shell. If you don't like having that construction happen in the bootstrapper itself, just make your bootstrapper have a constructor parameter and pass it in when you construct it in the App class. Then the only thing the bootstrapper has to know is that it was passed a UI element, it doesn't have to know the type, how it was constructed, etc. But it needs that UI element for the region functionality to work right, end of story. And in my experience many Shell's need to be constructed through the container so they can do DI themselves (even though most of it should be going on in the ViewModel), thus they need to wait for the Container to be ready, which is part of the workflow of the bootstrapper, thus Create/InitializeShell are there.\nIf you are not going to use region functionality, you can just return null from the CreateShell method. But if you want regions, you have to pay the tax of making the bootstrapper aware of the shell. Its been that way since the first version of Prism in 2008 and this is the first objection I've heard about that structure, and I can't think of a way to do that would not be coupled in some other way.\n. Ah, ok. Appears I was reading too much into your request. That would be an easy and harmless change and I can remember at least one app I worked on where I wished it was that way myself. I'll discuss with BrianL to make sure I am not missing something, but I think we could slip that in to the next release.\n. What do you gain by doing that. When designing APIs against objects with an inheritance hierarchy, I've always stuck to the principal of only depend on the minimum class in the hierarchy that support the API you are going to work with. So switching to Window, while it may make it more clear what kind of dependency object you are supposed to pass, introduces unnecessary coupling to a more derived type that the framework doesn't even care about. And it could block scenarios that you haven't anticipated.\nI don't think there is any technical reason that someone couldn't treat a inner view within an app the \"shell\" of a Prism app - as in they are only doing Prism from that element down. Can't think of any great reason you might want to do that, but no good reason to block it either.\nSo my vote is NO.\n. Actually don't like that either for a couple reasons:\n- People who have been with Prism since Prism 1 often don't even implement InitializeShell at all, they just construct and show their shell from CreateShell because that is all there was in Prism 1. It was introduced in Prism 2 for some obscure reason related to Silverlight that I forget, and also because there might be specialized scenarios where you need to separate construction and initialization. This would mean people doing that would have show called on their main window twice, which would be bad.\n- You don't need to explicitly set Application.Current.MainWindow, it gets set automatically in WPF to the first Window that Show is called on. One could argue that it is better to have it explicitly coded like this, but others could argue that it is an unnecessary line of code so it shouldn't be there.\n. @HansKrJensrud The conventions are just intended to be a starting point that hopefully work for a majority of users. Of course that is very hard to determine since we don't have direct contact with everyone who uses Prism. But @noufionline said, one way to make it happen is with SetDefaultViewTypeToViewModelTypeResolver. Another way that I would recommend because the former is meant to set a default that will be used for all resolutions, would be to use the Register method. This lets you set up a mapping for any given view type to provide a factory method that constructs the appropriate ViewModel (possibly through the container). This is called internally before falling back to the default conventions, so that would be the most appropriate way for what you are describing. \nAlso consider that there is nothing saying that every single V/VM pair in your app has to use VML. I'll often have some number of views in my app that get married to their ViewModel dynamically, such as by placing a ViewModel into a Region and having the View provided by a data template mapped to it with the DataType property.\nSo for example in your case you could put the view in a UserControl, have two data templates each with their DataType set to a different ViewModel type, and have the content of those two DataTemplates just be the corresponding ViewModel type.\nHope that helps.\n. See issue #140 - this is a limitation currently of the UWP platform, not specific to Prism. You'll need to put your testable assets (ViewModels, services) in a UWP class library to be able to unit test them.\n. good catch @tomzorz ! I added a little structure and one other breaking change we had made earlier.\n. I don't think people really pay attention to a version change that is 4th level deep, not sure if that would just add confusion. I think I would prefer to just have one NuGet that is platform adaptive rather than individual ones per platform, even if that means that people sometimes pull down an updated version that doesn't really change anything for them. We can make it clear in the release notes what it really affects.\n. Bart, sorry for taking so long to get to this one. Now it is showing branch conflicts. Could we ask you to update one more time and lets get this puppy merged?\n. Solutions and projects don't really matter at runtime, all that matters is that the right assemblies are found, which means they have to be in the exe directory or the GAC. The module loader support DirectoryCatalogs and can load any assemblies it finds in the exe folder or a subfolder, regardless of what project or solution they came from. You can also use configuration to tell the module loader to load modules that were not part of the same solution, as long as those assemblies are getting copied into the exe folder. \n. Great suggestion @noufionline, I've actually had my own helper method on several projects that did the same thing because it is such a common thing. I wish the common ServiceLocator used by the framework to resolve types had a container agnostic way to register types so that we could put it down in core, but I think we would have to do it against the container interfaces as you say because each container is a little different on the way you register and what parameters are needed.\nWe will look into it.\n. Do not know, sorry.\n. It will not, but all you need is a simple custom RegionBehavior to make it happen. See https://github.com/PrismLibrary/Prism/issues/7\n. I'm on Gitter a lot lately because of working on a Pluralsight course on Aurelia and they have a gitter channel. I find it to be a little too noisy/stream of conciousness. There is no de-interleaving of the separate threads of conversation, very awkward to find any given topic. The only plus is  the markdown formatting of code snippets. But I would personally prefer we don't go there. Probably works great for a moderately sized team that works together closely. But with lots of outsiders coming and going and asking questions that quickly stream off the page and probably never get answered unless they direct the question to a specific member by username... somewhat useless as a \"Help forum\"\n. Yeah, I think we should add this. I had something like this and a few other enhancements planned but haven't had the time to integrate them. Not sure what you mean about another approach like data annotations - ValidateProperty on BindableValidator does evaluate DataAnnotations.\n. Yup, makes sense to me.So let it be written,so let it be done. :)\n. This appears to be a problem with VS 2015 to me. I had the same thing two days ago but in my app I was not using Prism at all, I got the same error using a DataStateBehavior in the Interaction.Behaviors collection. In my case, some of the time, closing, reopening, cleaning, and rebuilding my project would make it go away for a while. But I was able to run just fine, just broke the designer. And since I rarely use the design surface, I didn't care a whole lot. I found a number of posts on StackOverflow with the same error but other behavior/trigger types substituted.\n. Good to know, thank you. Guess I may have to uninstall/reinstall too. But I think I'll wait until after I am done presenting at DEVIntersection Europe this week. Trying to do it now would be like sacrificing my machine on the alter of the demo gods... what could possibly go wrong? :)\n. I have two thoughts:\n1. Could break someone's code if they are cherry picking or comparing the message for logic code. If they are, shame on them they deserve to be broken :)\n2. How about adding an extension method to ILoggerFacade that lets you pass the exception instead so that you can keep the integrity of the exception chain instead of having a monster flattened string?\n. I'm trying to think through which would be more breaking to existing apps.\n@brianlagunas and I have had recent discussions on extension methods vs putting it directly on the interface, I'm thinking this would be a place where it would be better to do the extension method to not break other people's code. It was ok for us to move the RequestNavigate extension methods onto IRegionManager itself because we implement that and I doubt there is anyone out there implementing that themselves other than for unit testing. But ILoggerFacade is one that is intended for the app to implement, and so adding methods to it directly (vs extension methods) will at least temporarily break their code. So jet lagged EU time brain here, but what happens when the Prism code calls the extension method when they have plugged in their own ILoggerFacade implementation and it doesn't have the extension method?\n. Are you saying you need access to the container in your ViewModel or you just need to have your ViewModel constructed by the container so that it can DI your IMyService reference? For the latter, what you are showing in your second comment is all that should be required.\n. The normal way to handle this would be to write your custom state into the SessionStateService on suspend, then read it back out in your OnInitializeAsync override. Why won't that work here?\n. OK, I see what you mean now. sealed should never have been put on OnInitializeAsync. Will get that fixed and checked in shortly and we will push out an update to the nugets as soon as we can. \n. That sounds possible. The logging statements that were in there from Prism for Windows Runtime used a localizable template string and it is probably looking for using a ResourceLoader. It may be looking for a satellite assembly for ja-JP and not finding it and not falling back properly. I just checked in updates to the PrismApplication, PrismUnityApplication, and PrismAutofacApplication classes to get rid of the sealed on a couple of the methods. I also added some logging down at the base class level. If you could try with that latest code and see where it is throwing exactly, that would be very helpful in tracking it down. Hope to get nugets updated with a new release within a day or two.\n. Probably stating the obvious here, but have you compared your implementation of your custom RegionAdapter carefully against the ContentControlRegionAdapter, ItemsControlRegionAdapter, and SelectorRegionAdapters that are included with Prism? You could also look at the source for some of the component library ones like Infragistics and Telerik have for their docking containers. \nWhat kind of container is the adapter for?\n. I'd have to see some examples of where you need to do this and why it can't be encapsulated in the owner type of the property itself. OnPropertyChanged (and SetProperty) are protected because OO encapsulation principles would lean towards saying that external objects should not be able to tell the object when it should raise those events. If you are doing that in lots of places, it calls into question the design of your object model. If you just have a few specialized scenarios where you need to do it, why is it not better to expose a method or methods of your own on your model objects to enable outside objects to \"request\" firing property changed from inside the object?\n. The validation functionality is a straight port of what we implemented in the Prism for Windows Runtime release. Have not had time to port over all the QuickStarts or the Reference Implementation App (AdventureWorks Shopper) yet, where that code is exercised, but hope to do that sometime soon. \nI'd recommend a couple things:\n1. Check out my course on Pluralsight: http://www.pluralsight.com/courses/building-windows-store-business-applications-prism - I have a whole module covering the validation functionality in there. If you don't have a Pluralsight subscription, email me at brian.noyes AT gmail.com and I can get you a one month trial.\n2. Download the Validation QuickStart from http://prismwindowsruntime.codeplex.com/ as another sample that shows how to use it.\n3. Download the AdventureWorks Shopper from https://code.msdn.microsoft.com/windowsapps/Prism-for-the-Windows-86b8fb72 and look at the BillingAddress and ShippingAddress views and viewmodels - which use the validation functionality.\n. Will need a repro, its working fine in all the apps I have created with it so far.\n. Looks pretty good. Especially thanks for the test coverage! The only thing I will probably change as I pull it in is that I would prefer to inject the IEventAggregator as a constructor parameter and leave the Enable... flag as a property instead of a method. \nAny reason for not doing it that way I am missing? \n. I think it is worthwhile to raise the event even if they don't set that, and since this is a Prism service created by either PrismApplication, PrismApplication, there is really no reason not to. So I'll make that small change when I pull it in (tomorrow-ish).\nThanks!\n. Yes, sorry just missed that. The original PR had its own wrapping of the PubSubEvent handling with explicit weak references, which is not required since PubSubEvent has weak references to the subscriber internally be default. So while pull the code in I got rid of that but missed the member variable. I will either get it on the next PR I do or you can jump on that if you want.\n. Good idea. With Windows 8 Store Apps there was rigid guidance that you were always supposed to restore state when launching from termination, but I checked with the platform team a while back and they said for Windows 10 that guidance has been relaxed and it is up to the app (developer/requirements) to decide whether the state should be restored or not. \nWill look into this when I have time, or if you want to submit a PR with the way you think it should look that might let us get that support in there quicker.\n. I think this is a limitation of the platform - control and data templates form their own logical tree, so you can't walk the tree from a child element inside of a template to the containing XAML for that template with LogicalTreeHelper. \nI'm not sure why LogicalTreeHelper was used in this case, I would typically use VisualTreeHelper and try both GetParent, as well as FrameworkElement.Parent to try to get across that boundary between a templated child and its parent.\nYou might want to try making that change and see if it addresses the problem, and if so, submit a PR for it.\n. If you are making changes to your app to integrate the latest versions of Prism, why is it such a non-starter to recompile the libraries that depend on Unity to take Unity 4.0?\nIf that is the case, I'd saying compiling against source with the dependency switched back to whatever version of Unity you are stuck on is your best bet. \nWe are stuck between a rock and a hard place because some customers want Prism strong named because they are strong naming their assemblies, but strong names immediately lock down versioning like this in ways that are totally opposite the kind of agile approach we want to have with Prism moving forward.\n. I may be remembering wrong, but I think the command code used to do something with the Dispatcher and we got rid of that or changed it when we pulled it into a PCL. So that is probably where the comment came from, but agree it is wrong at this point.\n. Wow, didn't realize it was that far back. And this would be why some people say commenting code is a bad thing because it almost never gets updated when the code changes. :) I'm not one of those though, especially with the tooling around doc comments these days.\n. Thanks and good catch!\n. See my response to your other issue (#320) .\n. Nothing has been removed from Prism for UWP, those features were never there in the first place. The Prism for WPF and Prism for UWP are different code bases. Prism for UWP is a port of the Prism for Windows Runtime project that never had modularity or regions by design. We would like to introduce those to Prism for UWP but haven't had time for that yet.\n. Any binding failure already logs to the output window in VS - look for the System.Data.Error messages - they tell you source and target object and property type that the binding is trying to resolve. The level that these are triggered is also customizable through Tools > Options > Debugging > Output Window >WPF Trace Settings.\nSo beyond that, as @brianlagunas said, not a problem Prism would try to solve. We try to make a framework to help people structure their code in a more maintainable, extensible, flexible way. We don't focus on writing development tooling for basic platform capabilities.\n. Hi zzczzc004, \nGood catch and think this makes the InvokeCommandAction more flexible for everyone.\n. Use BindableBase as the replacement for NotificationObject.\n. When we added this I checked on the Windows Platform MVP list whether there was still explicit guidance like there was in 8.1. What I got back was similar to most of those UX guidelines that were pretty rigid in 8.1. - in UWP the answer is generally \"do what makes sense for your app and your users\". There is not a \"you should always do this\" mentality to any of the UX in UWP (because that was a lot of what turned developers off to WinRT).\nSo I think probably the right approach is leave what is there as is, but add a property somewhere that you can set to make it not exit the app if that is the desired behavior.\n. I agree with Bart.\n. I agree with @ali-hk and @bartlannoeye - think this one should be committed with the changes. I'll let one of you do that though since I have been so out of touch with Prism lately. Trying to free up some time to get back in the loop.\n. Oh no! Another Brian in the mix :) (Myself and Brian Lagunas are owners of Prism now)\nIn the future please ask this kind of thing on Stackoverflow as we would like to keep the issues here focused on bugs and feature requests.\nBut for now, here are a couple things to know:\nThe PrismApplication base class (base for PrismUnityApplication) already registers the NavigationService, SessionStateService, and EventAggregator, so your registrations in the initialize there are unnecessary and redundant.\nThe particular error you are calling out is because the default navigation service (FrameNavigationService) has a convention for naming views that it expects - that each view is named Page and that it will be placed in the folder/child namespace from the root named \"Views\". Then the ViewModelLocator has a convention that it expects the corresponding view model to be named PageViewModel and be located in a folder/child namespace named \"ViewModels\".\nIf you don't like those conventions there are several ways to override methods in the NavigationService and the ViewModelLocationProvider that establish those conventions.\nWhat I would recommend for getting started is to check out my course \"Building Windows Store Business Apps with Prism\" https://app.pluralsight.com/library/courses/building-windows-store-business-applications-prism/table-of-contents. I created it for Windows 8/8.1, but almost everything in there is applicable to Prism for Windows 10 UWP because we created the latter by doing a direct port of Prism for Windows Runtime. A few namespaces and type names have changed, but the approach and usage is 95% the same.\nYou can also grab the official docs for the previous release in book form here:\nhttps://www.microsoft.com/en-us/download/details.aspx?id=39042\nHTH, Brian\n. The ILoggerFacade was intentionally simple with the intent that people using Prism would at least want to be able to collect some logging of what the framework itself was doing, but we didn't want to force any unnecessary complexity on people using it if their logging needs were simple. There is nothing stopping you from having whatever separate logging abstraction you want as a separate logging service, and only use the ILoggerFacade implementation to keep the simple string based output of the Prism libraries going to your logging store as well. \nI am in agreement with Brian L - I think the potential for breakage, adding complexity, trying to agree on what the extra parameters should be and so on are not worth it. Log whatever you want from your own code using your own logging service. Then just provide a simple implementation of ILoggerFacade that sends it stuff into your logging store as well. But most of that is initialization debug info anyway, unlikely to be important in a production environment.\n. I'm agreeing that a single string is too simple - for the rest of your app code. But there is no reason the ILoggerFacade has to constrain you on anything other than what Prism already logs in the initialization. And we are not going to modify all of the places that the Prism code does logging - which is not very many places to begin with - to fit into any single logging framework's patterns because that would constrain anyone who uses Prism to follow those patterns. \nThat logging that Framework does is not much more than initialization code. Useful when you are getting your app up and running the first time, and also useful if you are dynamically plugging in modules at runtime if something fails. But it has zero bearing on what you choose to log and how you choose to log it from your own application code... that is completely up to you and whatever ILogXYZ you choose to inject into your own code to do that logging using whatever logging patterns you choose for your code. \nSo I'm kind of missing the point on why the Prism ILoggerFacade needs to change?\n. Hi guys, sorry I have been and continue to be too busy with other projects to engage on Prism. And I don't have time to analyze all the back and forth. But in principle I agree with @brianlagunas that the first rule needs to be \"don't break existing apps code, especially in a functional way (as opposed to a find and replace way) to introduce enhancements to the framework\". So I agree that the changes need to be \"additive\". I think what might make some of it easier is to acknowledge that there are those interfaces in Prism that users implement all the time and that changing in any way would be breaking - i.e. INavigationAware and IConfirmNavigationRequest. Those should remain as is and new async counterparts introduced. But there are interfaces like IRegionManager that no one in their right mind is going to try to implement their own on, and there are those that most users would rarely implement (i.e. INavigationService). So I think in the case of the latter ones, making it truly additive - as in adding the async methods along side the old ones - might be the right way to approach it. But I'm sure there are gotchas and I'm afraid I just can't afford to weigh in on trying to bring it all to ground right now.\n. I agree that pulling the current implementation until we have one that we are happy with is the right way to go. Also echo @dvorn comment - we should not be doing this with Dispatcher directly because it blocks testability, need to use SynchronizationContext instead because it is at least mockable (with non-trivial effort). You can take a look at the implementation of PubSubEvent event dispatching when UI thread is chosen for dispatch for an example of doing that. I rewrote that in Prism for Windows Runtime and carried it over to Prism 5 and onward because the Prism 1-4 version was using Dispatcher and should have been using SyncContext. I also have the mocking approach in the unit tests for events.\n. @noufionline I think what you are asking for is to allow ObservesProperty to be pointed at a whole object, not just an individual property on that object as the trigger for checking CanExecute?\nI don't think it was anything intentional in leaving it out. @brianlagunas will have to respond on that one. \nIn terms of the memory leak concern @joacar - I don't think there would be a problem there since the command would normally be scoped to the ViewModel, and if the ViewModel can be GC'd so can the command and what it points to. Plus monitoring the object as a whole would involve the same reference that watching a specific property does.\nWe'll look into maybe adding this.\n. @joacar in your example, yes you would leak the reference because of Current being static. But that would true with any event subscription on a static object... one of the many reasons statics (globals) are evil. I avoid them like the plague for this reason and because they also create havoc if you are trying to unit test the code.\n. I don't like the idea of blocking people from creating their own IoC Prism extension, so I think the hazards of leaving as is is the better option.\n. This was my understanding as well - that the extra ref to the command holder was taken care of in WPF 4 so that it should not be a problem anymore, making the original WeakEventManager handling by Prism redundant.\nI'll leave it to @brianlagunas to close this out since I have not been completely tied in on the conversation or what changes have been made to DelegateCommands recently.\n. Hi @senkia , thanks for bringing this to our attention. We are aware there are a number of activation scenarios we are not covering completely for UWP at this point, and want to try to get those all covered cleanly. If you could put together a small sample repro of this problem and send me a link where I can get to it I'll try to get a fix in there to cover this scenario.\nThanks\nBrian\n. @kyse Prism for XF has a completely different implementation of the nav stack based on the platform nav, so probably unrelated to this one.. These kinds of questions are better handled on StackOverflow. If you could ask again over here, would appreciate it: http://stackoverflow.com/questions/tagged/prism. Hi @dvorn, you are clearly passionate about this! :)\nI agree the original implementation left a lot to be desired, which is part of the reason I have rarely used it. I think the original intention was that the Confirmation and Notification classes would be used as a base class for the ViewModel class of a custom dialog that could add on to that for whatever other content the dialog was going to have, but again have not used enough or even focused on it in a long time to defend it as is or how it is supposed to work. I'll discuss with @brianlagunas and decide what we want to do here and get back to you.. I think the only way currently you could address that is by disabling the back button in PageB until it is willing to allow the navigation to proceed. The docs show a similar approach here:\nhttps://msdn.microsoft.com/en-us/library/windows/apps/mt465734.aspx\nWe have actually had a long standing issue to try to address this:\nhttps://github.com/PrismLibrary/Prism/issues/46\nUnfortunately none of us has had the time to dig into addressing that one, which I think would address your scenario as well. \nWe always welcome community PRs with a solution!. I must be missing something on what you are trying to accomplish here. If you have the region manager available to pass to the add method, why would you need it to return the region manager? Only reason I could see would be to set up a fluent interface so you could chain calls to the region manager, but you don't mention that as a motivation.. Could you show a snippet showing the sequence of calls that lead up to using it the way you say? With the code in your PR, it is not creating a scoped region manager, it is just taking the one you pass in and returning it, or using the one already associated with the region - which you would already be able to get back by using the existing Add method that lets you create a scoped region manager. So I'm still not making the connection on what you would be able to do with this additional method that you cannot do with the existing API. Some usage code would be helpful to clarify that.\nThanks.. OK, I'm going to wait for @brianlagunas to get back from vacation to have him take a look and see if he has any objections, but I don't see any issues adding this.. Hey @JerryNixon, @brianlagunas is on vacation for a couple more weeks and he is owner of the Prism XF stuff, so as simple as this change is, I'd prefer to wait for him to approve/merge it. If that's going to block you let me know and/or I or you can reach out to him direct to make sure he is cool with this. . They are still Attached Properties on the RegionManager class as they always have been.. Agree with @dvorn this would add too much complexity to a mechanism that is already more complex than I would like.\nIf you need to trigger showing a dialog to a user from a background thread, I would recommend firing a PubSubEvent from the background thread and subscribe with ThreadOption.UIThread and have the handler trigger the dialog.. ",
    "bartlannoeye": "Although it's nice to see the fast progress Xamarin.Forms is going through, it's still quite early to understand the effects these changes will have on creating LOB apps for WinRT as the support isn't for Universal projects yet.\nI suppose we'll have to indeed wait until \\Build to find out which direction WinRT is going and which role Xamarin.Forms will play in Windows 10 LOB apps.\n. Moving the namespace from Microsoft.Practices.Prism.PubSubEvents to Prism.Events certainly aligns it with the rest of (the new) Prism. That's a clear choice I'd say.\nChanging the class name from PubSubEvent to PrismEvent is (in my opinion) a harder nut to crack. It would fit more in the branding of the Prism product. On the other hand the PubSubEvent class hints we're using a publisher-subscriber pattern, which is also clearly stated by the Publish and Subscribe methods. But then you could bring up as argument that nobody will use Prism without reading at least some documentation (which would state the publisher-subscriber pattern).\n. @brianlagunas one of the most appealing things of Prism for WinRT was that it was much more lightweight than Prism for WPF, while still giving enough guidance. It's one of the main reasons we started using it over other Win8 MVVM frameworks, because most frameworks tend to grow larger over time increasing the learning curve for new team members. It's also feedback that we've heard quite often when mentioning we were using Prism \"wow, isn't that too bloated/heavy/complex\", as people had Prism for WPF in mind.\nSo I think for every existing Prism feature not available in WinRT (soon Win10) yet, careful consideration should be made whether to add it or not, independent to the fact that WinRT/Win10 can support it.\nBoth versions of Prims have their pros and cons and it's up to you (the owners) and us (the community) to find the best way to go forward. A roadmap per platform would be useful for this I think.\n. Prism for Windows Runtime already had a nice set of templates, we could use it as a reference for the WPF templates: https://visualstudiogallery.msdn.microsoft.com/2a6c37e4-fe9a-4a93-baae-a9bce4cf60c7. For more detail on each template check http://www.davidbritch.com/p/prism-for-windows-runtime.html.\nI like the fact that there's a project template with and without Unity, as I'm mostly using Autofac as IoC container.\n. I've plugged Autofac in Prism for Windows Runtime before, but never in WPF. I'll give it a shot, nothing to loose and lots to win if we can add it :)\nMaybe you could split up issue #15 to a separate one for each IoC container? That way a pull request can close a single issue. Feel free to assign me the Autofac one then.\n. In case somebody else is looking into adding support for Autofac, I'm having a go at it on my fork and I wouldn't want us to do double work. But don't hesitate to stop by for review or helping a hand, so we can group everything in a single pull request for Autofac.\n. Damn GitHub :) I'm more used to TFS as well. Next challenge, get this back into my autofac refactoring branch.\n. I think development of Prism on non-Windows machines will be rather limited. You're only 'allowed' to change/fix Prism.Forms libraries. You can't even touch the base Prism PCL as you don't have the required WPF (PresentationCore, ...) assemblies to run the rest of the test suite to test your changes in the base library.\n. @brianlagunas you're right on not needing PresentationCore for the base PCL. But my point was that changing the base PCL might break a test in the WPF assembly (it shouldn't, but ...) and you won't know because you can't run that part of the test suite when developing on a non-Windows machine.\n. Keep us posted!\nI was planning to do some refactoring on the tests for the different IoC containers to get some of the duplicate code out (and add tests for Ninject), but I'll wait until we have a decision on the unit test framework.\n. @Michael-DST people are already working with Roslyn on this subject: how about a test that fails if your usings aren't sorted or you're using tabs for indents. Maybe it's a first small step to the ultimate tool. Then again ... anyone using tabs instead of spaces for indents shouldn't be given a keyboard :wink: .\nI think some general coding guidelines are very useful, but forcing a code style that regulates everything might be a step to far and scare away some contributors.\n. I've checked the code for PrismApplication and the method mentioned above is still private, but some deeper research opens up an alternative solution.\nThe NavigationService property is editable, so you're able to set it to your own implementation after the base class completed InitializeFrameAsync. The only thing missing if you would set the NavigationService property is restoring state (PrismApplication line 222) which could be done by the implementer of the new service. If someone would want to set his own NavigationService, it should be done by overloading OnLaunched and setting the property after calling base.OnLaunched.\nKnowing how rare it is for someone to have to implement his own NavigationService, I think above scenario is flexible enough. Making the CreateNavigationService overridable (or provide another hook) would maybe make it too complex, making regular Prism users wonder why this is possible to override.\n. Checked with the current implementation and the result is as desired.\n. In our case it was mostly popping the current page off the stack after navigating away from it (as only then it's on the Backstack). As @briannoyes says, navigation happens based on tokens (logical names), so that can be used to remove pages. But as multiple instances can be added to the stack, we'd probably need an extra parameter (e.g. in the idea of 'first', 'last', 'all' with given token).\n. I'm up for using the domain name as the new definition.\n. This is already implemented by the AutofacServiceLocator class in the Autofac.Extras.CommonServiceLocator package: http://autofac.org/apidoc/html/CE503C57.htm. So I decided to use the package instead of re-inventing the wheel.\nWant me to add the implementation itself instead?\n. Replaced the package dependency by the actual implementation.\n. If I remember correctly, the Async nuget package changes the msbuild files. Personally I'd like to keep that out of the general Prism PCL used by all environments (and limit only to SL). Some of our team members have had issues with it in the past.\nAre there any alternative approaches we could consider?\n. For future reference, the current (pre-Prism 6) Prism.PubSubEvents NuGet package is version 1.1.2.\n. The SplitView control indeed provides a good entry point for dynamic menus. But I wonder if this should be a part of Prism, or be made available as an extension/plugin.\n. Partially discussed in #5 and #10.\nTrello could be a great tool to see what features/issues people are working on, as I don't think we can self-assign (on Github) as non-owners.\n. In Windows 8 I used to solve this with a Behavior, but only needed it on a few screens (over a span of 2 years+).\n. new issue for regions: #780 \n. I usually have a constants class called PageTokens where I group all my pages. This way I can trigger my navigation with strings and I have a reference to all places where these strings are used. Another reason why I'm using this approach is that I use custom page token patterns (and resolving) that allows me to do deep link to a certain page from outside the app.\nc#\npublic const string SplashScreen = \"myapp://SomeNamespace/Screens/General/SplashScreen\";\nOn using a Type parameter itself (if you still feel this is a needed feature): I know it's like this by default in Windows 8 as well. However as a developer, I think I would rather like to have a generic method instead, which saves me from typing typeof() every single time to get the type.\nc#\nnavigationService.Navigate<HomePage>(parameters); // shorter = faster dev\nnavigationService.Navigate((typeof)HomePage, parameters);\n. You can override how the resolving between view - viewmodel names happens with\nc#\nViewModelLocationProvider.SetDefaultViewTypeToViewModelTypeResolver((viewType) => {});\nwhich takes a delegate with your own logic on how the resolving should happen. Keeping views and view models in seperate assemblies is a simple scenario, but you can go as far as you want (see my custom page tokens above).\nYou can also override how resolving a page token to your view type happens in your app\nc#\nprotected override Type GetPageType(string pageToken)\n{\n    return _urlManager.GetView(pageToken); // custom logic to resolve pages\n}\nIn conclusion: you're totally free to use whatever strings you like for your navigation, as long as you can write the mapping code (in the method overloads), nothing limits you.\n. The code on here for Windows Store is the old Windows 8 / 8.1 / Universal code (copied over from codeplex), which are in fact 2 different code bases.\n@briannoyes is currently working on a Windows 10 UWP version from scratch, closer in line with Prism for WPF, which should have Unity support as well. So right now it's basicly waiting on a first release for Win10 UWP.\n. While x:Bind brings a nice performance boost, it sadly breaks the separation between view and view model that MVVM brings. Not sure if we should add code to enable this scenario.\nThe strongly typed property is indeed the easiest way to make it work. We could add a code snippet to the prism releases to help users create the necessary property.\n. x:Bind works perfectly with interfaces. But then we're talking off a IMyViewModel, as the properties you're binding on have to be present on the interface since this checking is done at compile time.\nIf you're using IView to get the type of the viewmodel into the backing property, there's no real need to use an interface for the viewmodel.\nIf we plan to somehow support it (and not leave the developer to think it out), then it comes down to how will we support it: provide a code snippet, provide a project item template for the view with the field, ... (alternatives?)\nOn a sidenote: @Michael-DST it's been long known that the WinRT/UWP team isn't providing us with a go-to example for decent MVVM. Just check how they implemented a 'viewmodel' in the Win8 templates :smile: .\n. Exactly, just wanted to make sure we're all on the same page here, no matter how we try to solve it, the type in the property has to be the actual view model or it's exact interface (and not a generic base type/interface).\n. Replaced and fixed by #74 for back navigation and obsolete SettingsPane in Windows 10.\n. Do we plan support for the Windows 8.1 / WP 8.1 code or do we only care about Win10 UWP? It's just that I got a few more issues/fixes on the Win8.1 that I could submit if we plan to keep that code alive. If only Win10, then there's no use in changing the 8.1 code base.\n. @Novan123 we currently use following code in the OnActivated (protocol activation) to work around this missing feature:\ncsharp\nif (args.PreviousExecutionState != ApplicationExecutionState.Running)\n{\n    await InitializeFrameAsync(args);\n    RewireViewModelLocator(); // our logic to rewrite VML\n}\n@briannoyes I'll see what I can do. Currently I'm not longer doing full time Win8/Win10 dev either, so I feel your pain with timings.\n. I've been using IDictionary as well, so you got my vote.\n. The NavigationParameters class is currently still platform-specific. The WPF-version has been reverted, but XF wasn't and UWP doesn't even have it. We'll have to look into this.\n. Agreed, so we can close this 'as-is'.\n. Adding an optional parameter to the Navigate method gives most flexibility (different providers per page), if not for the fact that you're bringing information about the View (and a reference to XF.Page) into the ViewModel and that's something I personally want to stay clear of as well. I haven't used XF enough though to make the decision if this flexibility is necessary?\nIf someone can give an example that this flexibility is required and we can remove the dependency on the view, I'd say go for it (and it is in line with some other .NET functionalities like e.g. adding an IFormatProvider to string.Format()). But for now I would stick with the attribute, it's much cleaner than using some enum.\n@odedlevy if I'm right according to the code in the PR, the attribute is placed on the view not the viewmodel.\n. Would you like to see a package providing a test dll with mocks for most of the Prism classes, or rather a package bringing in some mocked code files so you can still tweak the mocks afterwards?\nIn both cases Prism will push a mocking framework into your test project while you might be choosing to use another. Adding support for multiple frameworks is an option, but I'd rather see that effort go into Prism itself rather than somewhat facilitating testing (like Brian said, the code is already there for grabs).\n. Do you have the latest pre-release version? These methods used to be non-async (thus void) in before December. Maybe that's why you don't see it.\nSent from my Windows Phone\n. Looking forward to testdrive this one of the next days. :+1: \n. Related to #26 \n. In the past I've had the need to pop pages from the backstack, which is available now. But for more complex manipulations I would indeed opt to write your own navigation service and keep the backstack itself hidden from the frontend developer.\n. Haven't have found time yet to update the SDK on my machine, but I can cross this one of my to fix list :). Great work.\n. Haven't tested it yet (currently on my Win8 machine), but seems a valid improvement using new Win10 SDK abilities over porting from WP8. Feel free to submit a pull request. I could test and add it late tomorrow as well if necessary.\n. All tests used to run before (when they were all still MSTest tests). I haven't upped my Win10 to RTM yet to validate the latest code.\n. Check PR #90 for the code updated to the RTM SDK if you're in urgent need of a compiling version.\nI'm pretty confident @briannoyes or @brianlagunas will merge (or update the solution themselves) as soon as they find the time. I know RTM is a major release, but this is still an open source project where everybody contributes on in their spare time without any renumeration and we just happen to be in the summer holiday period.\n. I would even prefer both unit tests and a showcase in the sample app if possible to check the theory with a real sample.\nI used to have a different implementation on the Windows 8 version of Prism to cancel navigation after validation/before navigation (which I haven't found time yet to port over, so if @veccie 's one works I'm happy as well).\n. Project/Item templates are on the backlog (see #13). As things were changing a lot in the code base, it was too early to create templates, but I suppose this will gain priority once Prism 6 goes RTM.\n. Normally this is a setting to generate documentation in the project properties that has to be enabled. Once enabled, the build output will generate xml files, which have to be included in the NuGet package as well. I'm not behind my pc though to tell you where exactly under the project properties to look. I can check for it later today if you haven't found it yet.\nPS: if you check in the nuspec files, I can even test it out and submit a PR wanted (if this setting actually is the fix).\n. That's the one.\n. I usually only keep view related things in the Windows project and everything else (including converters, viewmodels ...) in a class library which is then referenced in the test project. Do you get the error with this approach as well?\n. I have already noticed before that a UWP test project is very fragile, even worse than it was on Windows 8/8.1. And being unable to run your tests with R# (9.1.3) doesn't help a lot either.\nI'm able to run the tests from the class library on my test branch, even when using Prism and Prism.Windows. I'll extract this fix to the main branch.\nI'm not able yet to reference the app itself to test it, and to be honest I'm hesitant that this was even possible in Windows 8.1 (I have never done it). How do you get the XBF error? Did you enable local crash dumps for that as that's the only message my VS test runner provides me when failing at this point.\n. I've had the XBF error before when doing Win8.1 dev because the library project was missing XAML files and therefore no .xbf file was being generated. I've tried adding a XAML file, but this doesn't make tests run. For now I'd say use a separate library for all you code and make sure the build configuration is x86 for all assemblies to make sure your tests run.\n. That's exactly what I did @diego2k in my test branch: https://github.com/bartlannoeye/Prism/tree/140_UnitTest?files=1\nBe sure your configuration is x86 for all projects as UWP doesn't have AnyCPU.\n. @brianlagunas I think the conclusion of this issue according to @TioLuiso and my tests is that you can't reference a UWP app into a unit test project. It has nothing to do with Prism. Code that you want to be tested should be in a class library.\n. The first links goes to docs for 8.1 apps, not UWP. I've used Coded UI on 8.1 in the past (iirc) so that's right. So I suppose we can conclude it's still a no-go.\n. There was a release from Patterns & Practices for Windows 8 Store apps (v1.0) and a release for 8.1 Universal apps (code for both on https://prismwindowsruntime.codeplex.com/) which is on NuGet as Prism.StoreApps and works together with Prism.Mvvm. But as you've noticed this release is indeed not compatible with those packages.\n. The test runs in VS, but fails on AppVeyor, but it's not related to C6# features as far as I can see.\n. @brianlagunas I'm questioning the correctness of the failing test, which seems to be a near duplicate of another one.\nFailing test: line 202: NonGenericDelegateCommandShouldInvokeExplicitExecuteFunc\nPassing test: line 394: DelegateCommandFromAsyncHandlerExecuteShouldInvokeExecuteFunc\nIn the second test you have a DelegateCommand with async handler and actually await the Execute, while in the first it's not awaited.\nRe-ran on my AppVeyor without this single test, all other tests pass.\n. See #139 for the test.\n. As an addition, I think the async execute should be called ExecuteAsync instead to make it's async nature clear.\n. Be careful with setting the NavigationService private as that would mean nobody is able anymore to inject his own NavigationService, which was a problem we encountered for one of our more complex projects on Windows 8.1 (and the reason I logged #24).\n. Most of the credits go to @tomzorz for the grunt work.\n. Are you using the AnyCPU build configuration? Try building the solution under x86, does that fix the errors? UWP apps are not supposed to have AnyCPU anymore.\n. Right now the UWP packages for Prism 6 are not on NuGet yet, so yes you'll have to add the source code for now. I'm expecting the team will push the packages soon as they are closing up the final blocking bugs for RTM.\n. The sample projects under this repository are for development purposes. Stable samples based on NuGet packages will be posted under the Prism-Sample-Windows repository once the packages are released.\nWe're closing up the last few issues for an UWP release and hope to have RTM NuGet packages available soon. But you're right, nothing (except time :)) keeps us from creating a pre-release package and it has been on my mind the last few days as well. I'll try to have a look at creating them this weekend and ask @brianlagunas to drop them on NuGet asap.\n. Trying to get @onovotny's tool to generate us the dependency part of the nuspec files. Trying to find out how to deal with multiple packages generated in the same solution and solving the dependencies between them.\n. I've pushed them to https://github.com/bartlannoeye/Prism/tree/Prism-NuSpec.\nWhen you open the Win10 solution, you have following projects:\n- Prism (already a package on NuGet, but nuspec isn't checked in)\n- Prism.Windows\n- Prism.Unity.Windows\nEach of those 3 projects are a single package with dependencies following the project references: Prism.Unity.Windows > Prism.Windows > Prism.\nBecause of the project references, Prism.Unity.Windows get all 3 assemblies in the project output, but I can filter that out. It would be awesome though if the dependencies would get added automatically to the nuspec, but I know that probably won't be an easy one.\n. Thanks for confirming my thoughts. The files part I got (pretty similar to 8.1), just need to add the AnyCPU configuration for the libraries again first.\n. I think UWP content is more something for @briannoyes instead, not sure if he has anything planned.\nI've got a series of posts for UWP planned myself, but I don't expect them before end of spring (swamped with work right now).\n. Thank you for your contribution @tomzorz.\nI noticed you are using tabs instead of 4 spaces (Visual Studio default setting) for indentation. Is it possible to change these tabs to spaces please, so that all code alligns correctly?\n. Feel free to log an issue for the .editorconfig file, so the team can decide on it.\n. @brianlagunas after reviewing your change on the readme which includes the links to all NuGet packages, I started thinking (it happens ...).\nIn this PR I've created a new NuGet package for Prism.Unity.Windows dll, but maybe this should be added to the existing Prism.Unity NuGet package (as we're using platform dependent paths in the package anyway). This to prevent a wild-grow of new packages, which will only get worse if we toss in Xamarin Forms and all possible containers. \nThe downside is that releases of one of the 3 platforms will increase the version of the Unity package as well. Although for minor versions this shouldn't be much of a problem.\nWhat do you think?\n. Not sure if NuGet will play well with a 4th digit, SemVer 2.0 isn't for anytime soon either. I'd say use the 3rd digit, as it's major.minor.patch so we aren't doing anything wrong in my eyes.\n@brianlagunas if you can add the existing nuspec files, I'll merge them. Or I'll just extract them from the packages when I got time later this week.\n. Merged, back on track.\n. Haha sure.\nMaybe I should put some more effort into it, add the other nuspec files as well and merge the Unity (and got Autofac for UWP here local as well) into the correct packages with their respective platforms.\n. I'll merge this as-is to prevent more conflicts and open a new PR one of the next evenings with the merged NuSpec files with their correct dependencies (and not one per platform).\n. I checked with Unity and they changed to signed assemblies, and v4 is thus a 'breaking change'. Not totally sure why they decided to do that, as there aren't any other real additions in over a year.\nGuess we'll have to push a new release if we want to support Unity 4.0.0\n. You're right that testability for UWP apps is inadequate and we certainly encourage you to place your view models in a separate library to be able to test them. What prevents you from adding Prism.Windows to that library?\n. I've quickly checked the feasability and one of the types I'm running into is Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs  which is a WinRT type, while .NET/Silverlight (WP) has System.Windows.Navigation.NavigatingCancelEventArgs. Rewriting the UWP codebase to make these 2 types (with different properties) interchangeable through compile directives just to support better testability would bring us too far in my opinion.\n. - StackOverflow is the default go-to for many developers. It already has quite some Prism questions and people answering them. Sometimes the quality of 'questions' is abominable, but guess that can happen everywhere.\n- A forum can be useful, but I'm hesitant if people will find it.\n- I don't think GitHub issues are the place for general support. There's a difference between bugs or suggestions which both improve Prism, and general questions where we help people out.\nI don't know Gitter, but it looks more like some sort of chat? What's the difference with Slack except for Markdown support?\nSo I got a slight preference for StackOverflow.\n. Tough call. If you want to move to GitHub, pages might be better than the Wiki indeed as you can't make decent PRs yet for wiki pages afaik.\n. Another option: http://www.toptensoftware.com/markdowndeep/, used by messagehandler.net for their documentation.\n. Duplicate #176\nIn short: the Unity team had to resign their assemblies with a new key, introducing a breaking change and thus upping the version to 4.0. As it doesn't bring any new functionality except for the new signing key, we're not pushing a new version of Prism right away. You should continue to use the previous version of Unity (which is the same as 4.0) until we do.\n. Is there a reason to keep them separated? Can one be used without the other?\n. Maybe something like a [AlsoValidate(...)] attribute, but to be honest I think the simple method overload is more than enough. I'll make some time to add it later today.\n. Looking into this, I see that all other Validate methods return a boolean, so maybe this one should as well?\npublic bool ValidateProperty(string propertyName)\n    {\n        return !_bindableValidator.IsValidationEnabled // don't fail if validation is disabled\n            || _bindableValidator.ValidateProperty(propertyName);\n    }\n. Duplicate #193 #176 \nUnity added a breaking change by changing the signing key.\nPlease continue to use the previous version of Unity until we push a new release referencing Unity 4.0.\nAn alternative is to compile and use the latest source code, as the dependency on Unity is upgraded to v4.0 in PR #194.\n. Don't forget to keep the breaking changes in mind while going through the conversion.\n. Started on navigation in my lunch break.\n. I think only the HOL page is left to do, the What's new page should be either removed or completed with Prism 6 changelog.\n. Thank you for proofreading.\n. I would go with an extension method as well. Our default implementation could fall back to flattening the stacktrace, but anyone is able to write his own logger and pick properties out of the exception and format them as he wants.\n. Duplicate of #70 \nHey @appel1 , we already implemented signing in PR #182 and will push new (signed) assemblies to NuGet with the next release (which will most likely be in the upcoming days).\n. Good for me as-is.\n. This method is sealed because it implements important logic about the ViewModelLocator and the IoC container. I wouldn't open it up again, but providing a new virtual Task might be a possibility. The question is, do you still want access to the IActivatedEventArgs?\n. Is it an option to do that in OnLaunchApplicationAsync ?\n. Great job, thanks !\n. Thanks again @overrorflow, great job.\n. Hey Simon\nThe code on this GitHub repository is for Prism 6, you can find the link to the different packages on the readme, e.g. the one for WPF is https://www.nuget.org/packages/Prism.Wpf/ (which clearly states it's V6). \nIf you want to continue using Prism 5 (created by Microsoft P&P team), this is the package you're looking for: https://www.nuget.org/packages/Prism/. Note that we do not longer support that version, so any bugs you find in v5 will not get fixed.\nAs Actipro Software WPF Studio provides controls, I don't think there's an issue in either using v5 or v6, but I haven't tried it myself. Maybe @brianlagunas or @briannoyes can confirm this?\n. @YipingRuan this issue is for Xamarin Forms documentation, so that would be: Documentation/Xamarin.Forms/2-ViewModelLocator.md\n. There's already an empty markdown file ready for that chapter.\nFor content structure, you can have a look at this XF documentation page or the WPF documentation.\n. Just double checking, but is it possible that this field is not used?\nprivate WeakReference<NavigationStateChangedEvent> _navigationStateChangedEventWeakRef;\n. I'll throw it out while I'm at it, currently on a code cop run :cop: \n. Go for it ! :+1: \n. Do we really need (want) to show the assembly names? If we separate the IoC packages, we could do something like this:\n| Package | WPF | Win10 UWP | Xamarin.Forms |\n| --- | :-: | :-: | :-: |\n| Prism.Unity | X | X | X |\n| Prism.Autofac | X |  |  |\n. Too bad GitHub doesn't support including sections of markdown into another file (like pandoc does), so we got some duplicate documentation. But I'm quite pleased with what I got now. I kept the detailed assembly matrix on the installing page.\n. Hey @noufionline, could you please post this question on StackOverflow under the Prism tag? We're using SO for questions and try to keep GitHub issues for issues and features requests only.\n. Prism for Store apps is an old release of Prism used for apps on Windows 8.1 / Windows Phone 8.1 RT.\nYou should use Prism 6 for UWP when creating an app for Windows 10 UWP as SettingsPane is indeed no longer supported, as you can read under the breaking changes on our readme. Take special note of following breaking changes when moving to the latest release for UWP:\n- Changed namespaces to remove Microsoft namespaces\n- Removed SettingsPane functionality from PrismApplication because it is deprecated in UWP\n- Visual State management parts of VisualStateAwarePage were removed and it is now renamed to SessionStateAwarePage.\n. Prism.StoreApps is for 8.1 only, not for 10. Can you link the session on MVA please?\n. That's an 8.1 course indeed (although you'll be able to use nearly all concepts on Win10 so the course is no lost time).\n. I'd say 95% what's said in that 8.1 course also counts for 10. If you want a specific Win10 course, you could check https://mva.microsoft.com/en-US/training-courses/a-developer-s-guide-to-windows-10-12618.\nHappy coding !\n. The OnGoBackRequested event handler is to couple the DeviceGestureService with the NavigationService. If you look at the implementation, it doesn't do much more than call NavigationService.GoBack(). So if you call GoBack yourself, you're actually using a shortcut and doing the backward navigation correctly.\n. An addition to @brianlagunas's remark:\nAs mentioned on the samples readme, use the stable samples under this repository, which are using stable NuGet packages (while the ones you mentioned use the changing code base).\n. Guess those went through the mazes of the net. You're 200% correct, bring it in!\n. Windows 10 Mobile is the same platform as Windows 10, also known as Windows 10 Universal Windows Platform. This is supported by the Prism.Windows package, and currently has Unity and Autofac as supported IoC containers.\nCode samples are available at https://github.com/PrismLibrary/Prism-Samples-Windows\nWe didn't have the time yet to write full documentation for Windows 10, but it's a port of Prism for Windows Runtime, so you can read that documentation if wanted. It's best to keep the list of breaking changes in mind.\n. It's easy to implement the IoC container of your choice with Prism, you can look at the Unity implementation as a guidance. Feel free to submit a PR.\n. So you got an extra custom handler attached to the DeviceGestureService as well? This means both handlers will trigger, and are executed in the order they are registered (if this didn't change in UWP). This means that the Prism handler will be executed before yours and that e.Handled will always be false. Am I correct?\nCan you share some more info on what you're trying to achieve, so we can see how to solve this?\n. I got a propp (aka prismprop) as well, but then as R# template.\nWe've spoken about it, but never came to releasing them. Maybe we can package them in a small vsix?\n. @nguyenthanhliemfc you can still use Visual Studio snippets when using ReSharper. They work both side by side. If you want to use ReSharper templates (that's what they are instead of snippets), you'll have to transform them a bit. I could maybe create a separate Visual Studio extension for these snippets, as I don't think we want them in the default Prism extension.. It was never supported in Prism for Windows 8.1 apps either if I remember correctly.\nBack in the early days of Windows 8 I've tried a POC with MEF (without Prism) and we were required to reference every single MEF assembly and do some hocus pocus (but it worked). Back then we concluded to create a facade per module which handled the registration of all types / navigation paths of that module, which was then cleaner than trying to use MEF. I haven't checked what changed since then.\nNot sure what @brianlagunas and @briannoyes think about supporting MEF on UWP.\n. Hey @aakansha, welcome to our repo. I haven't had time to check further into your StackOverflow question. Thanks for logging it here as well so we don't forget it, we'll update both.\nTo be checked if this is a Prism bug or some error in the app.\n. Thanks for the repro, we'll try to have a look at it as soon as possible.\n. I've built a repro in this branch to try some things out on the serialization. Looks like everything can be fixed with runtime directives and there's no need for a new SessionStateService with JSON.NET.\n<Namespace Name=\"HelloWorld.Models\" Serialize=\"Required PublicAndInternal\">\n   <Type Name=\"MyModel\" Browse=\"Required Public\" DataContractSerializer=\"Required Public\"/>\n </Namespace>\n@aakansha @Riessfelt @505aaron, could you please check if setting the DataContractSerializer attribute in the rd.xml file fixes your issues as well?\nI'll write a blog post and some documentation on this tomorrow. \n. It seems good on first sight, haven't built your project though as it has several dependencies I don't have installed. I'd suggest building a small app and try out your models one by one to find the culprit. On the other hand, since you use sqlite, I'm not sure it's necessary to store everything in the session state, I'd just retrieve it from sqlite again.\n. We're currently too flooded with other work to go through this issue history and double check everything to close it. The initial issue was fixed by adding a line to the .rd.xml file (see http://stackoverflow.com/questions/34062780/session-state-service-failed-uwp)\nI hope to have some spare time in the upcoming weeks to finally close this down.\n. Looks good on first sight, thanks for the effort!\n. No problem, I'll add it and test the signing and package right away.\n. You can get the pre-release package to test from https://www.myget.org/F/prismprerelease/api/v3/index.json while waiting for it to pop up on NuGet.\n. For some reason I only see the WPF project in the output:\nhttps://ci.appveyor.com/project/brianlagunas/prism-jy368/build/1.0.401\n. @jorisdebock it was to validate that it actually \"works\", as we don't have any tests for UWP. But the team just discussed we shouldn't add a sample for each container and thus making future updates on the test app more complex. We should move to real unit tests, see #342. The other samples will be cleaned up one of these days as well, only leaving Unity in place.\nSorry for the effort put into creating a sample app.\n. Prism.Windows only supports Windows 10 UWP apps and Windows 10 UWP class libraries as a valid profile, thus you will not be able to add it to a PCL.\nYou could add Prism.Core instead and implement ViewModelBase yourself in the PCL if you want to keep it compatible with Windows 8.1 and WP 8.1. \n. We moved this functionality to the DeviceGestureService class, you can override this class and implement your version of the OnHardwareButtonsBackPressed handler.\nDon't forget to also override the ConfigureContainer method to register your own implementation. I've linked to the Unity implementation, but same counts for other IoC containers.\n. Could you show us a sample of what you have tried? Preferably a working application on github so we can clone and test.\n. What platform are we talking about? Navigation parameters are typically passed around in the OnNavigatedTo method.\nPersonally I postpone loading any data that requires these parameters until the OnNavigatedTo method. In fact, I postpone all async data loading until that point, I never start these processes in the constructor. You typically want snappy navigation and then a loading indicator instead of waiting an extra second before navigation is done.\n. I think you got a valid point about being able to share viewmodels. One of the major reasons about this split functionality right now is that there's quite some support for navigation in these base classes and navigation is different on each platform (see #355 ).\nNevertheless it's something we should think about, certainly when it comes down to sharing code between UWP and XF (I see WPF as a distinct target from the other two).\n. @brianlagunas time to update the XF packages ! :)\n. Personally I've been using propp for Prism's property snippet for 2 years now. So I can follow @tomzorz reasoning to have prop and cmd in front.\n. Good for me.\n. Hey @eriawan \nWe got several samples for each platform on the Prism organization:\n- WPF\n- Xamarin Forms\n- Windows 10 UWP\nThere's also quite some effort done for documentation (mainly on WPF, but XF is coming along as well).\nI don't think it's necessary to duplicate this effort, but mentioning (showing) how easy it is to get started might be a good sales point indeed.\n. We don't want too much duplicate content to maintain, so I wouldn't just copy/paste our docs. Either we maintain the docs here and keep the site minimal (doc wise), or we move them all.\n. @riandesign looks great. Maybe we should add a mention to the NuGet packages as an alternative way to use Prism?. Hosting is done on GitHub pages. Simply send a PR to this repository: https://github.com/PrismLibrary/prismlibrary.github.io. @riandesign you can send a PR to https://github.com/PrismLibrary/prismlibrary.github.io. Sad to see there are so many issues with .NET Native, I hope you can fix the problem fast.\n. Thanks for the work done, it's one of the cleanup tasks I haven't come to yet.\nI totally agree with @brianlagunas with the usage of var and we use the same guidance on our own projects. I quickly scrolled through and noticed most changes are nameof, so reviewing the var assignments will go fast if they're in a separate PR. I noticed 2 assignments I'm not to happy with personally (although I might be nitpicking):\nIDelegateReference actionReference = new DelegateReference(action, keepSubscriberReferenceAlive);\nIn the first assignment, we're storing it explicitly as the interface type, this might be for a reason.\nvar viewAsT = view as T;\nThe reason I'd keep T here is to explicitly show we're working with a generic type, even though you cast is as T. For regular types being cast this way, I don't mind using var.\nHaven't looked deeper if there are more of the same.\n. Everything committed to the same branch as the PR gets added automatically, so it's best to start a new branch per fix (or wait until after the merge, but that can take some time now and then)\n. Thanks !\n. Before we go to deep into this discussing the pros and cons of this change, is this an Autofac specific issue or do the other IoC containers we're supporting have the same problem (if not, how did they fix it)?\nI'm also a bit hesitant to add that much logic to resolve an object, after all why wasn't it added to Autofac's service locator itself (on which our implementation is based) if it's such a big issue.\n. SimpleInjector was added in #335 and you can find a pre-release package on this feed: https://www.myget.org/F/prismprerelease/api/v3/index.json\nWe haven't had any positive/negative feedback on the package since then, so feel free to test it, give us feedback and then we'll promote it to nuget.\n. Aha I overlooked the WPF tag, sorry. Feel free to submit a PR :)\n. I'm certainly willing to have a look at it if you can't find the problem @jockster1000, but it won't be for the next few days either. Currently swamped with work and we got a few other urgent UWP issues waiting as well. So keep us posted on your progress.\n. Thanks @allanrsmith. Could you add your code to the samples repository for future reference?\n. Please use StackOverflow to ask regular questions and use GitHub for issues only. We watch the Prism tag on SO, and the rest of the community is at your help there to answer as well.\nAdding to that, this is a question about the samples while this repository is for Prism itself.\n. If I'm correct, only the Prism.WPF.StructureMap assembly has to be unsigned as this one is referencing the unsigned StructureMap, all libraries below (Prism.Core and Prism.WPF) can stay signed. I wouldn't bother switching between both configurations to build, but only switch the Prism.WPF.StructureMap to build its release instead of release-signed configuration in the solution configuration.\n. Don't worry, I'm already on it :+1: \n. Will have to check with @brianlagunas for that.\n. Complete samples should be submitted to https://github.com/PrismLibrary/Prism-Samples-Windows instead of the Sandbox directory which is used for testing new features only.\nIf you check the UWP samples repository, you see we already have a sample for SplitView. Does this sample bring any added value? If so, is it possible to merge both, so visitors only have to look at a single sample for SplitView?\nThanks !\n. Personally I can't remember really needing a PubSubEvent without payload. I usually pass at least the Id of the object the event is used for (e.g. DownloadCompleted for request 9). Events without a payload are usually UI events and those I always handle with behaviors.\nLet's see what the rest of the team thinks about it.\n. See #496 \n. This is not an issue of Prism, but how the localization in UWP works.\nWhat I usually do for pages that should be reloaded on changing the language, like the 'Settings' page where you change the language (or your shell), is bind the localized text instead of using x:Uid and trigger a PropertyChanged event (like you used to do on the earlier versions of Windows Phone).\n. @brianlagunas will be able to tell you more into detail how navigation on Xamarin Forms works for Android and iOS, but on Windows 10 UWP the navigation works by replaying the 'page-1' forward navigation, with the forward navigation parameters. So you'll never be able to pass 'back' parameters without manually tweaking the forward navigation string (which is very dirty).\nSince XF + UWP is a possible combination, I don't think we'll add back parameters to navigation, so you'll have to continue using the EventAggregator or another dirty trick like a singleton 'godobject' tracking parameters.\n. Hey @jingliancui we'll have to verify if this is a Prism or an EF7 issue. We'll look into this asap, but with //Build being around the corner, you should expect some delay in hearing from us.\n. Navigation in UWP is seen as forward navigation to new pages. I do understand what you'd like to see as behavior, but I'm not sure if this is something we'd like to bring in. Has to be discussed with @brianlagunas and @briannoyes.\n. I'm personally more looking into another approach to fix the session state issue, as it's giving us a lot of headaches with .net native as well. Hopefully I find the time in the upcoming weeks to test it out. If you got a repro on GitHub, feel free to share it, so I have different test cases to confirm my fix once it's implemented.\n. See #333, as both issues will be tackled together once I find the time.\n. Navigate is an async method that returns a Task (should have been called NavigateAsync imho). Testing async methods isn't as straight-forward as regular methods, certainly not when starting to mock things as well.\nI haven't tested it with NUnit myself, but please try following actions to fix your issue:\n- Your test should be a Task, not void (in general, try to avoid async void as this is fire and forget)\n- Your mock should be setup to return some Task, mocking async methods\n. @brianlagunas it should ;) but then it's probably a 'breaking' change (which isn't much of an issue, since we're going to 6.2 anyway).\n. As far as I can see, it returns a Task.\n. Thanks for the fix @galakt \n. You know my opinion, any Async method must end with Async to make this clear.\n. x:Bind with dictionaries is only available in the preview SDK of the \"Anniverary Update\" (v 14295) which was just announced at Build 2016. \n. Hey @Robzilla, we currently only support Xamarin Forms.\n. @ali-hk I'm only checking changeset https://github.com/PrismLibrary/Prism/pull/538/commits/1aee6afce09eee1b2cd9f5bae1e1383e4dd9a326 right now, as I suppose this is the only one that should be in the PR.\nIs there an actual use case for which you would need the OnResumeAppAsync method to plug in some code? Or are we just trying to get an event triggered to notify the app that creation (or on this case resuming) is complete?\n. @ali-hk your scenario does make sense indeed, I'll add it in the documentation as well.\nI'll try to do a cherry-pick merge (I know it's possible, but haven't done it yet). This PR will probably be marked as closed, but your 1 commit would be merged under your name.\n. Replaced by #590 which merges 1aee6af only.\n. Adding logic to enable skipping restore also opens up for changing the logic that it always tries to restore. This will skip both OnActivateApplicationAsync and OnLaunchApplicationAsync. I don't see this as a real issue, but we should maybe make this clear in the comments of those methods?\nDoes anyone see above methods being skipped on restore as an issue? \n. Please do so.\n. Nothing prevents you from using an own implementation of IEventAggregator. The EventAggregator is rather small and implemented to take care of locking and UI dispatching. If this doesn't fit your needs, chances are real you shouldn't be inheriting from it.\n. Duplicate of #466, this is a manual fix for now and will be fixed in the packages on the next release (after Xamarin Evolve)\n. Thanks for the update.\n. See #513 \n. Closing as this got solved on SO.\n. The documents for WPF and Xamarin Forms are part of the repository. For Windows 10, please look at those for 8.1, as we didn't have time yet to migrate those. They mostly apply to Windows 10 as well with some minor changes.\n. Please ask these types of questions on StackOverflow, we'll answer them there.\n. Looks good to me\n. I'll do my best to have a look at it, but can't promise anything as my time behind the pc is very limited (broken arm). Sadly .net native issues aren't the easiest ones\n. What I usually do is remove the intermediate page from the backstack (on UWP). For a wizard you should maybe consider a different solution than just plugging in into the general navigation (e.g a dialog frame with its own navigation)\nI'm not too keen to adding this, not sure what the rest thinks about it.\n. Hey @rinoandrejohnsen, that's quite an effort. \nSadly we won't be supporting MEF in either UWP or Xamarin Forms as we don't see any use in the 'false extensibility' MEF brings to platforms that focus on packages that are uploaded to a store. In the past people often misused MEF with WPF as an IoC container (which MEF is not, the fact you're using Unity proves this point as well), so this isn't a valid reason to add support either.\nYou can keep this implementation open on your repository if you like and we'll forward people explicitly asking for it. In the future, please open an issue first to discuss the needs of a PR, to prevent your great effort from being accepted.\n. Great work :cop: \n. If you want to navigate away directly in the OnNavigatedTo method, use the Dispatcher to execute your call. This enables the first call to be fully completed before starting the second one.\n. Thanks for the find !\n. @tomcrusader different packages/platforms have different versions. It's never been our intention to have all package versions in sync, because this would require version bumps on some packages without changes.\nSince the pre's for Prism.Forms are 6.1.0-preXX, I expect Prism.Forms to be released as 6.1.0 indeed (so the title of the issue/milestone is incorrect imho).\n. Why would you do it for XF and not the other platforms?\nIt's in the item templates and in de documentation. People using Prism should know it's necessary and keeping it explicit reminds them of this coupling. Doing this in the background will possibly make it more obscure for new users. And the opt-out is not intuitive indeed. My 2 cents.\n. I don't see a .NET Standard support coming before the release of .NETStandard 2.0 due to our limited time and different versions in .NET Standard for the different platforms. But feel free to have a go at it.. You'll write the strings once and place them in a constants file. If you really want type checking, use typeof(ViewB).FullName or something similar, but then you'll loose the flexibility that we currently have in being able to rewrite the ViewModelLocator rules to fit any implementation you want (one of my LOB applications had specific Uri's for deep linking mapped to views).\nAlso, your example isn't completely clear to me, you're trying to navigate to 4-5 views in a single call? Or is ViewA/ViewB/... a namespace?\nI'll have to check with the rest of the team, but pretty sure this won't be implemented. However feel free to fork Prism and add it in your version.\n. Hey @dvorn , is it maybe possible to apply this change on a clean fork? It seems a bit silly to drag in 8 merge commits into our history for a single line to be edited.\n. Thanks !\n. For Xamarin Forms you should use Prism.Unity.Forms instead\n. Been a while since I ran my async checker plugin indeed, great catch.\n. .. and is there only for backwards compatibility with previous Prism versions so people can upgrade without having to rewrite their whole application.\nBut nothing keeps you from forking and implementing MEF2 yourself.\n. Duplicate of #375 \n. We can not add every single IoC container (if you want to discuss that MEF is actually an IoC container) and provide support for them given our limited time and resources (we all do this in our spare time). Like mentioned before, nothing prevents people from forking and providing support themselves.\nSending a onetime PR with an implementation is only the first step. The actual work is keeping thinks up to date, fixing bugs, uploading new packages, ... There are more urgent things to cover than adding in Mef2.. The difference between Unity and Autofac is that Unity automatically tries to resolve types (even if not registered) and Autofac does not.\nAutofac solves this by using\n        // Make sure any not specifically registered concrete type can resolve.\n        builder.RegisterSource(new AnyConcreteTypeNotAlreadyRegisteredSource());\n\nSee the Windows 10 implementation. Looks like this wasn't done in XF.. Good to hear, this will be done by Prism itself in the next release.. Unity registers types as instance per request instead of singleton by default, @dvorn showed how to get a singleton. More info: https://msdn.microsoft.com/en-us/library/ff660872(v=pandp.20).aspx\nPlease use StackOverflow for questions like this and keep GitHub for Prism issues (bugs) and feature requests.\n. @brianlagunas do we need a pre-release for this?\n. @JarJarBinkz how blocking is this on your end?\n. @JarJarBinkz @wakemaster39 we got a prerelease up on MyGet. Feel free to test and give feedback.\n. Fancy arrows ! :+1: \n. @dansiegel this is what you meant right?\n. Read this article for async constructors. But I do not recommend async constructors, as Brian says load data in the OnNavigatedTo method.\n. You have to use Prism.Windows for UWP, see the packages list. Region navigation is currently not supported in Prism for UWP.\n. Hey @allanrsmith, your sample should be added to https://github.com/PrismLibrary/Prism-Samples-Windows instead of here. It should be minimal and standalone from the other samples, so people can quickly see what is needed for cortana integration.\nThanks\n. Maybe something we can discuss next month over a beer @briannoyes ?\n. Digging deeper into this, it seems that CreateNavigationService is used in the IoC specific base classes to register the instance in the container.\nThis is quite critical code and moving this to the OnCreateNavigationService might introduce bugs (calling a base class is easily forgotten). But keeping CreateNavigationService open for everyone to override is equally open for the same bugs.\nPutting this method internal and using InternalsVisibleTo fixes the problem for us, but prevents anyone else from writing their own IoC implementation.\nAny other suggestions? Or do we leave it as-is?\n. Created #783 to provide some clarity for anyone trying to override either method.\nI suppose that's the \"best\" fix for now.\n. I would say it is very logical that you get 1 page on the stack if you do\n- Clear\n- Navigate\nand none if you do\n- Navigate\n- Clear\nWhile it's rather obscure to not get a page on the stack of you do\n- Clear (using SetNavigationState)\n- Navigate\nNext to being obscure, you're also abusing your knowledge of an undocumented structure of the backstack string, which is internal logic, to achieve your goal. I've done exactly that before in Windows 8.0 to pop pages from the backstack, to only be bitten by an internal change on the release of 8.1.\nI would rather clearly document the use of ClearBackStack than change it back.. I'll have another look at it (and expand the docs) when I get back from Madrid next week.. There's no reason to bring out new releases if the curent release \"just works\". That's the stage Unity is currently in: it works.\nWe're not adding in new IoC framworks because of our limited time to spend on Prism and there are more important issues to handle. You could ping @benlaan for his version or add support yourself if for some reason you're stuck to Castle Windsor and can't use any of the supported containers.. Ah the beautiful application lifecycle. I'll have a look at your PR later tonight or tomorrow evening. Pretty sure this used to work. What version is your OS and your SDK?\n. @nolanblew can you check #801 please? I expanded your PR with OnResumeApplicationAsync and re-tested all activation paths.\n. Prerelease package up on https://www.myget.org/F/prismprerelease/api/v3/index.json\n. We're having a OnResumeApplicationAsync virtual method that should be plugged in so people can hook in their own logic as well. However we don't want this to trigger twice as the Activated event gets triggered as well when the resume is triggered by contract activation.\n. Quote from MSDN\n\nIf a suspended app is activated to participate in an app contract or extension, it receives the Resuming event first, then the Activated event.\n\nMust confess I didn't test last night as I was at a IoT presentation until 11 pm. Will be something for tonight. \nEither way, whether it's triggered or not, I think we still have to add the OnResumeApplicationAsync call to allow people to inject their own logic.\n. Merged since no objections :)\n. @ali-hk there seems to be a minor merge conflict. Can you fix it? Otherwise I'll look into it this weekend.\n. Wanted to double check if it still played well with the lifecycle changes we did last week.\nTested and approved, great job ! Thanks\n. Do you mean minor questions? We have StackOverflow for that. Or do you have anything else in mind?\n. UWP Community Toolkit moved to read the docs as well when they joined .NET Foundation.\nI haven't digged into how it works, but seems to be based on Markdown, so we shouldn't have too much work migrating.\n. We seem to have 2 doc folders in the repo now ?\n. The current links are working in readthedocs, so why is this change necessary?\n. Pleases ask general questions on StackOverflow. We will answer them there.\n. We should see what the guidance in Windows 10 is, it's not so strict anymore as it was in Windows 8/8.1.. Thanks for the info @JerryNixon. I'll try to have a look at this during the final week of the year.. One should not code in notepad++ :)\nWeird Autofac behavior, new PR on the way. We should also double check if any changes to \n- [ ] Prism UWP should be made for this.. This is a known bug, for the workaround see https://github.com/PrismLibrary/Prism/issues/742#issuecomment-263822188.\nThis should be fixed in https://github.com/PrismLibrary/Prism/pull/863. I'll ask @brianlagunas to push a new pre-release asap, but he's on holiday.. The code linked in #742 is not in the latest pre-release package yet. I hope to find some time one of the upcoming days to push a new prelease package. If you could post the code to help us reproduce the issue, I'll test that against the lat codebase as well.. Thanks, I'll look into it asap. A bit under the weather right now.. Can you try to update:\n- Prism packages to 6.3.0-pre1\n- Microsoft.NETCore.UniversalWindowsPlatform to 5.2.2\nand see if the problem still persists? It looks like 6.0.2 still depends on System.ComponentModel.Annotations 4.0.10 (probably UWP 5.1.0).. Prism for UWP is a port from 8.1, so most docs are still relevant. We haven't found time to update/rewrite them yet. So except for a few blog posts (best series is the one from Matteo's blog), you'll have to work with the 8.1 docs.. Do you mean UWP or WPF ?. @nuitsjp the issue you're mentioning is fixed and will be in the next (pre)release. See https://github.com/PrismLibrary/Prism/issues/875. Not sure MEF is something we want to promote :). This is a shortcoming in UWP instead of Prism. You can't navigate in the OnNavigatedTo eventhandler directly. You can however use the Dispatcher to work around this:\nFrome code behind:\nDispatcher.RunAsync(CoreDispatcherPriority.Low, () => Frame.GoBack();\n\nFrom viewmodel (you might want to put the dispatcher access in a helper service):\n    public override void OnNavigatedTo(NavigatedToEventArgs e, Dictionary<string, object> viewModelState)\n    {\n        base.OnNavigatedTo(e, viewModelState);\n        Window.Current.CoreWindow.Dispatcher.RunAsync(CoreDispatcherPriority.Low, () => _navigationService.GoBack());\n    }. Thanks for the repro, we'll look into it asap.. TL;DR: methods returning a Task should have the suffix Async.\n\nIt's best practice to name all async (Task based) methods Async. This not only makes the API clear to the programmer (who might just see it with IntelliSense) but also to a possible code reviewer, flagging forgotten await calls much easier.\nBut who am I? So a quote by Stephen Toub:\n\nIf a public method is Task-returning and is asynchronous in nature (as opposed to a method that is known to always execute synchronously to completion but still returns a Task for some reason), it should have an \u201cAsync\u201d suffix. That\u2019s the guideline. The primary goal here with the naming is to make it very obvious to a consumer of the functionality that the method being invoked will likely not complete all of its work synchronously; it of course also helps with the case where functionality is exposed with both synchronous and asynchronous methods such that you need a name difference to distinguish them. How the method achieves its asynchronous implementation is immaterial to the naming: whether async/await is used to garner the compiler\u2019s help, or whether types and methods from System.Threading.Tasks are used directly (e.g. TaskCompletionSource) doesn\u2019t really matter, as that doesn\u2019t affect the method\u2019s signature as far as a consumer of the method is concerned.\nOf course, there are always exceptions to a guideline. The most notable one in the case of naming would be cases where an entire type\u2019s raison d\u2019etre is to provide async-focused functionality, in which case having Async on every method would be overkill, e.g. the methods on Task itself that produce other Tasks.\nAs for void-returning asynchronous methods, it\u2019s not desirable to have those in public surface area, since the caller has no good way of knowing when the asynchronous work has completed. If you must expose a void-returning asynchronous method publicly, though, you likely do want to have a name that conveys that asynchronous work is being initiated, and you could use the \u201cAsync\u201d suffix here if it made sense. Given how rare this case should be, I\u2019d argue it\u2019s really a case-by-case kind of decision.\nI hope that helps, Steve\n. If the main scenario is to remove only the last page, we might implement it similar to Prism UWP?\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Windows10/Prism.Windows/Navigation/FrameNavigationService.cs#L125\n\nI've used it before to create custom navigation flows and wizards (so the backstack stays clean). Example on this blog post.. That's the default behavior of WPF (and any XAML language) that a control inherits the parent's DataContext if not explicitly set. What's the use of assigning DataContext=new object() ?. Did you nail the exception down to this specific subscription? I haven't seen any reports on pubsub going wrong before, so we'll need all info available to dig into this as I can't point to a specific piece of code to pay attention to.. Weird nobody mentioned this before as this is core functionality. Do you have a small repro? I'll look into it asap.. Big cheers for the Autofac implementation !\nI've been tuning down on the use of ServiceLocator (which is a 'similar anti-pattern') over the last year. Cutting out a dependency of that size is quite a challenge and the question is if it can completely be replaced by DI (preferably ctor, if needed property). You don't want to simply replace the DependenyService by the ServiceLocator pattern.. Looks like you have some spacing issues here as well.. Hey @ViktorHofer, the plan was to wait until .NETStandard 2.0 (see https://github.com/PrismLibrary/Prism/issues/683#issuecomment-263600123). I'll let @brianlagunas decide what to do, as you obviously did put quite some effort into it.\nAm I correct to notice this can only be opened in VS 2017?. Don't think Unity is still actively maintained (and accepting PRs).. Shouldn't all files from the .github folder stay where they were? Or am I missing something that allows them to be moved to the /docs tree?\nhttps://github.com/blog/2111-issue-and-pull-request-templates. That's something @brianlagunas will have to do, I'll leave the rest to him.. Haven't looked into MVVM Light recently (and currently on 3G, so browsing the code on codeplex isn't going smooth), but it used to have a IsInDesignMode property on the ViewModelBase. Not sure if it's available for XF as well and if we can do the same. I'd prefer a trick like that over having to switch build profiles.. @mfe- could you apply the comments please? If you don't have time, I'll do next weekend on the plane.. Thanks. @brianlagunas should we put this in the release notes or the obsolete comment (or both)?. Keep us informed of your progress (maybe a link to the fork where you'll be working on) in case you start before we pick it up ourselves.\nFYI: We still have to bring quite a few application lifecycle events (right now Prism is only supporting about half of them) and the session state is under work as well.. Hey @erkantaylan \nThis space isn't necessary to render correctly on readthedocs.io (which is our primary documentation platform). If you meant to fix the github md rendering, then this should be done for all md files, not only this single one.. Looks like I overlooked your work on .net standard #mailboxoverload. The broken search is something RTD has to fix (https://github.com/rtfd/readthedocs.org/issues/1487), that's not our job.. Like @dansiegel just mentioned, sandbox is our testbed not the real sample repro. And we decided against having (read maintaining) equal samples for all supported IoC containers.\nIf you really want to put time into this, please do it in the format of markdown documentation (under /docs/UWP) showing the difference between the containers. That would be much appreciated.\nThis way people can read how to do and we don't have to support a multiple of the current amount of samples (which need some effort, as I was showing the SplitView sample to a colleague just last night and noticed there's some cleaning up to do ... which will have to wait until the rewrite of some UWP fundamentals). You'll have to hit 'Create pull request' if you want the code to be reviewed and merged at some point. We can see the diff, but can't comment.. This is behavior we see a lot on UWP. We'll have to look deeper into this to see if we can provide you with more info.. Thank you for the fix.. Going with Dan's option on this.. How difficult would it be to expand it to all controls, as not every 'user control' has to derive from a ContentView? In UWP I've already used the ViewModelLocator on my user/custom controls a few times.. Thanks for reporting.\nAs mentioned in #1121, the fix is hiding the real issue (not having an initialized NavigationService). We're redoing part of the application initialization (planned for 1st week of August), so the initial problem will be tackled there.. Brian is currently occupied with family matters. I'll check with Jerry and come back to this when we have an answer.. Jerry was on vacation, he should be back one of these days so I'm trying to get a status update asap.. Got new from Jerry, he's just back out of vacation and is wrapping up some other articles first. The current state of his work can be found in the Template 10 repo. I'm leaving on vacation this weekend and plan to test the upgrade path from v6 to the new code base (and proof test it in a real LoB application) once I'm back and hope to land on something by the end of summer.. While this fixes the NullReferenceException, it doesn't fix the initial problem: not having a NavigationService. I'm a bit hesitant to bring in a fix that hides the real issue, since as soon as someone really needs navigation, they'll run into it again. What do you think @brianlagunas?\nOn a sidenote: we're redoing part of the application initialization (planned for 1st week of August), so the initial problem will be tackled there.. Thanks for posting the question on StackOverflow (where it belongs). I've seen it pass by, but haven't had time yet to look into it last week as I was on vacation. I'll come back to the question on SO asap (if it isn't answered by then). If it would require a change in Prism, I'll reopen this issue.. Please ask these questions on StackOverflow in the future, GitHub issues should only be used for issues with Prism.\nYou can test if the navigation is back, if so don't do a new call.\nYou should also consider using a caching service (like Akavache) to prevent multiple web calls in a given timespan (eg. 5 mins) no matter what your navigation is.. UWP does support .netstandard 2.0 if you work on the insider previews / latest SDK preview. However we didn't upgrade our solution yet. So we can update that later.. We'll always have Prism.Windows v 6.3 (or maybe 6.4 with some fixes) if people want to target older versions. I see .netstandard support for v 7.0, which would already have other breaking changes. If using v7 means being limited to FCU, so be it. That's something we'll decide on when the time is there.. I'm waiting on 2 in-person meetings next month before making the decision with the rest of the Prism team on how breaking 7.0 will be and which version we'll target. So for now, don't put effort into it yet.. Upgrading CommonServiceLocator would limit UWP apps to Fall Creators Update only (.netstandard 2.0).. I think we'd rather try to get it out completely, as it's an anti-pattern.. If you have the issue in a new project, please push it to github so we can investigate.. Thanks for both PRs.. Duplicate of #1211, already solved by #1240. If you use the pre-release version currently on NuGet, you will be able to use CommonServiceLocator v2. More info of the release can be found in the release notes.. Maybe start with a quick PoC to see what is possible? I haven't tried it on Windows since Windows 8.. You should ask these types of questions on StackOverflow under the Prism tag (in English). Here we only handle bugs and feature requests.. You did override the RegisterTypes without probably calling the base method as well?\nThe InnerException gives away your problem:\n\nCannot resolve parameter\n'Prism.Navigation.INavigationService navigationService' of constructor 'Void .ctor(INavigationService, IDialogService)\n\nQuestions like this should be asked on StackOverflow under the Prism tag, only log bugs/feature requests here.. There seems to be an issue indeed, while some other heroku slack invites apps are still running. @brianlagunas will have to check the logs.. 1 test fails.. Please ask this question on StackOverflow, which we monitor as well. Only use issues for bugs and feature requests.. Read the release notes both under releases for 7.x and on the wiki for v6.x and jump into it (fixing any issues that arise). We don't have an upgrade wizard.\nNote that we don't have a finished 7.0 release for WPF/UWP yet, so might be best to stick to 6.3.. Because MEF is no IoC container and we're no longer supporting it as such in Prism 7.. Questions should be asked on StackOverflow. Only bugs and feature requests can be logged here.. There was a reason we couldn't move to CSL 2.x in the past, @dansiegel do you remember which?. Nobody forces you to leave v6 and go to v7, you can limit NuGet updates by using version ranges. It's a major version bump for a reason. Some of my clients are sticking to Autofac v4 to stay away from the immutable container, or on Json.net v9 to not drag in a zillion dependencies until they move to .NET Core.. As mentioned on the readme:\n\nDocumentation site\nRepository backing the documentation. You're always free to fork Prism and implement this yourself. Autofac has been supported for years and it was either this 'fix' or being dropped completely. The time of the team is very limited (we all have full time jobs and more, plus family), so our focus is on other work than supporting extra containers. Because after the initial PR, the work typically is for us, even if we don't know the container.. If code works correctly using a ListView, then this is a problem with the SfListView from SyncFusion and not Prism. Please try on Synfusion forums or StackOverflow (where you can add the tag prism). Closed as duplicate indeed. This is a scenario we don't support, more details see linked issue and PR.. Thank you for the PR!. We're working on it, although it requires time (in our busy agenda) and thorough testing: https://github.com/PrismLibrary/Prism/pull/1513. Thanks to spot this, had to read through the first sentence twice as well.. UWP clearly says https://www.nuget.org/packages/Prism.Unity.Windows/ as\ndependency, not Prism.Unity\n\n\n. Guess GitHub issues and reply by mail made my reply arrive out of sync :) But at least it's solved now \ud83d\udc4d . Builds fine after installing the SDK \ud83d\udc4d . UWP does not have an official v7 release yet. Once that is released, we'll offer a guide how to upgrade. The deal about semver is that major releases can have breaking changes. We only make them to streamline platforms, not for fun.. What's the need for supporting 1607? According to AdDuplex's stats, only 2.8% devices worldwide still run anything older than 15063. Microsoft officially supports N and N-1 releases (so 16299 and up) for its most common used UWP NuGet packages, we're already doing our best to supporting older releases. Limiting the amount of supported SDKs also limits the amount of test work to be done. After all we moved to Windows as a Service, were devices are meant to be updated on a regular base.. Please have a look at the samples, because with Prism you don't have to declare the ViewModel explicitly in XAML. You could set a breakpoint in your ViewModel's constructor to see if it gets instantiated (which should if it's named correctly). Binding should work out of the box.\n\nXamarin.Forms\nWPF\nWindows 10. This error on launch is because of UWP being forced on 6.2.2 by MSBuild.Sdk.Extras.\nCreated PR to roll back to 6.1.9: https://github.com/onovotny/MSBuildSdkExtras/pull/152. Got removed in https://github.com/PrismLibrary/Prism/commit/4a1e14335b7abb874ee1de54a0682573f3c112db#diff-b65c4362e0a8b3ac9dfdd12b95932d85\n@brianlagunas could you check please?. As mentioned on Slack by @dansiegel, multi window/frame is something we're not supporting yet, but it's certainly something that's needed as UWP added it. If you can give us a sample project, it saves us some time to create one, that would be helpful indeed.. There's no rush, we got several points to tackle. That's why the UWP version is still beta.. Duplicate of #1632, #1648 and https://github.com/PrismLibrary/Prism-Documentation/issues/28. To stay open until build pipeline is updated.. Hey Seb, thank you for your feedback.\nThere will be breaking changes for UWP between 6.3 and 7.x, that's why it's a new major version, but we have our own large LoB apps to test the release on and will do our best to keep functionality and document all changes.\nWe also notice the difference in UWP (desktop) and XF (mobile), even though you can do UWP with XF. It's something we're currently looking into and discussing with Microsoft and some partners.. The samples and documentation will be rewritten once we land on a v7 release.. Thanks for the repro, we'll take this up with the Windows team.. Going through the issue and the linked StackOverflow question again, I noticed there was some misunderstanding/miscommunication in this thread. I've removed the discussion going down the incorrect path and off-topic replies so we can pick up this issue again for further investigation.\n\nPrism used to support storing parameters for forward navigation in v6\n\nExample: Navigating from Page1 to Page2?param=true then to Page3. Going back to Page2, you would have param=true as parameter.\n\nPrism didn't support passing parameters for back navigation, neither does UWP, as Brian correctly mentions above.\n\n@FrogsLegs seems to have an issue with the first case, which was supported in the past and might got lost when bringing in Template 10 code. We'll investigate this and discuss what future direction we want to take.. I don't spot a question in here.. Windows Template Studio uses Prism.Windows 6.3 and Prism.Unity 6.3. We don't have a stable 7.x release yet for Prism.Windows, so you have to stick with Prism.Unity 6.3 for now. The 7.1 version is not compatible with Prism.Windows 6.3.\nYou could try the prerelease packages for Prism.Windows, but since we're still changing that library, you might have to update your app twice.. As I mentioned, there are breaking changes. You could get an app working with the preview builds, but you will have to change parts of your codebase (cfr the 'does not exist'). We can't promise there won't be more breaking changes between now and the final 7.x release.. Minimum version shouldn't be changed.\n. No worries, got it covered :)\n. Might be needed for other containers we're not supporting but people want to implement as well.\nWhat alternative do you suggest? Highjacking the InitializeModules override in the Autofac implementation? Isn't very clean.. What triggered the change of this file?. I strongly dislike regions :) Also there's no reason to hide unit tests in a test class and the test method name says clearly if it's using an Action or ICommand. You seem to have an odd setting for brackets and spacing? By default there's no spacing behind ( and before ).\nprivate async Task DisplayActionSheet_PressButton_UsingAction(string text)\n{\n    var service = new PageDialogServiceMock(text, _applicationProvider);\nThis triggers a lot of 'changed code' at the bottom of the file, which isn't changed at all.. Please place all private helper methods/functionality at the bottom of the class, test methods are more important and should come first.. Currently C# doesn't support this tag, Sandcastle does.\nhttps://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/3745102-add-intellisense-support-for-the-inheritdoc-ta. @brianlagunas shouldn't we have an ActionSheetButtonFactory instead of hiding this in here?. please remove regions. braces on newline. See remark above, not supported yet in C#. Url incorrect? Must be sandbox/readme.md?. private fields should start with a _, so this won't be necessary if the fields follow the guidance.. Using xamarin studio by any chance? Tabs vs spaces ;) (codebase is using spaces). newline above comment.\nSeems like part of the sentence is missing.. newline between method and comment of next method. That sentence is perfect.. do we want abbreviations?. idem. I might not be used yet to the C# 7 syntax, but I think the old syntax is easier to read/understand than this.. Will this render correctly on RTD?. To check on RTD if sub-bullets don't break by removing these spaces. incorrect numbering?. numbering. numbering. Lot's of numbered bullet points in this file. I was using this  as reference. Question is: which is more readable as editor (as both seem to work?). @dansiegel seems like RTD stumbles on this, no longer shows subbullets. EventHandler in 1 word?. would put this line of code below the comment to improve the effect \"you have to do some work yourself, then it's initialized\".. newline before method. newline. personally I would keep these accessors on a single line.. copy paste comment?. if this is an explanation of what happens in ninject, place it behind the previous line. Otherwise it can be deleted to prevent confusion.. unity comment again. Not sure if this won't give an issue (both 1.0 and 2.0 if in the same package). I remember Laurent saying he needed to create 2 different NuGet packages for it to work because the consuming project didn't know which one to use. But I might confuse targetting and compiling vs consuming.. Is UWP 6.0.1 a required reference for Prism.Core? Isn't it enough to bring this in with Prism.Windows? Or is this for the Xamarin.Forms UWP project?. Can this be a parameter? Maybe write a \"how to release\" page and add it to the wiki/repo for things to not to forget? Like bumping this number.. bumping windows as well?. Looks like dropping the nuspec causes #1492 . this should be renamed as well?. can't we use $\"/{nameof(MainPage)}\"? I don't like suggesting magic strings. dropping netstandard1.0? Then line 19 to 21 can be removed, group starting line 23 can be merged with the group below it. my ocd fails on this extra newline ;). ",
    "mika76": "I know, but both of those project were abandoned by Microsoft years ago.\n. ",
    "Jalalx": "Thank you for suggesting RegionBehavior. Here is my DisposableRegionBehavior:\n```\n    public class DisposableRegionBehavior : RegionBehavior\n    {\n        public const string BehaviorKey = \"DisposableRegion\";\n    protected override void OnAttach()\n    {\n        this.Region.Views.CollectionChanged += OnActiveViewsChanged;\n    }\n\n    private void OnActiveViewsChanged(object sender, NotifyCollectionChangedEventArgs e)\n    {\n        if (e.Action == NotifyCollectionChangedAction.Remove)\n        {\n            DisposeViewsOrViewModels(e.OldItems);\n        }\n    }\n\n    private static void DisposeViewsOrViewModels(IList views)\n    {\n        foreach (var view in views)\n        {\n            var frameworkElement = view as FrameworkElement;\n            if (frameworkElement != null)\n            {\n                var disposableDataContext = frameworkElement.DataContext as IDisposable;\n                if (disposableDataContext != null)\n                    disposableDataContext.Dispose();\n\n                if (view is IDisposable)\n                {\n                    var disposableView = view as IDisposable;\n                    disposableView.Dispose();\n                }\n            }\n        }\n    }\n}\n\n``\n. @Michael-DST Do you mean something like this? https://compositewpf.codeplex.com/SourceControl/network/forks/jalalx/LightPrism/changeset/aa8902f73326aa3fde7b0375cefe6ce14bda3a60\n. I forget to callDispose()for view model, so here is final:\nhttps://compositewpf.codeplex.com/SourceControl/network/forks/jalalx/LightPrism/changeset/5ef43a2f6ced9ccb73d37afe02d7407842d4de3e\n. I still preferIMessageBoxServiceorIOpenFileDialog` way. Also there are very good libraries for that like  WpfTaskDialog. :) \n. So if you all agree that this is not a \"common enough requirement\", let's close this issue.\n. ",
    "keozx": "I agree! :+1: \n. I'm eager to help with the Xamarin.Forms port, hopefully next week I will have time for this! :D\n. ",
    "llewelynrex": "Sure. Out with the old and in with the new!\n. ",
    "ashokgelal": "I'm kind of torn on this. On one hand I personally don't like the name PubSubEventbut on the other hand I don't like the idea of tying it up too much with Prism. Prism is too close to be a pure Windows+WPF only library. Unless we plan to make Prism a true cross platform library, I don't want to give an impression that this awesome library has anything to do with Windows+WPF. As a matter of fact, we are using PubSubEvents package in our Xamarin.Mac apps.\n. I noticed that and if that's where we are heading then I'm all up for it. Let's do it! I like the name way better then PubSubEvent anyway.\n. ",
    "akoken": "It would be great :+1: \n. ",
    "sgrassie": ":+1: \n. There is no cross platform support for MS Test, see: Microsoft/msbuild#6, which seems to me like it would be a problem for the Xamarin.Forms support. Also, as I mentioned, all the other dotnet projects which have been open sourced by Microsoft have all (or are in the process of) migrating away from MS Test for xunit. That tells it's own story, and many other OSS .net projects all use xunit.\nOn the face of it, xunit works much the same as MS Test, and would require only the necessary dependencies for xunit itself. Replacing it would take a little bit of leg work in removing all the MS Test references/usings, adding xunit and perhaps adding a custom attribute or two.\nI think the benefits speak for themselves. The existing tests do work (except for 3 which are failing, which I assume is due to a combination of ongoing refactoring work and a lack of CI).\nIf the switch does happen I would be happy to lend a hand.\nI would also be in favour of using nunit, although I'm not sure on the cross platform support.\nInterested in see what other people's thoughts are.\n. > Come forward with concrete arguments about how MS Test is insufficient for the unit test needs of Prism and we can consider it.\nAny further comment is really dependent on knowing whether there is an intention in supporting cross-platform development/usage of Prism on Linux/Mac with Xamarin.Forms, as I don't want to waste any time repeating what so many others have already said elsewhere about this subject. \n. :+1: \n. @omares How do you qualify \"newer\"? I don't want to argue too much over this, because I like NUnit and xUnit.net in equal measure, however to avoid confusion I feel I must point out that your statement is incorrect.\nTo start with, NUnit 2.6.4 was released December 16 2014, and xunit 2.0 was released March 16 2015. Both are the latest stable versions.\nAdditionally, xUnit.net was based on lessons learned from NUnit 2.0, see Why did we build Xunit.\nI wonder if your (apparent) confusion arises from both NUnit and xUnit.net being based on the xunit family of test frameworks?\nThe reason I pushed xUnit.net in this issue was that most (if not all) of the CoreCLR/.net OSS projects that have landed on Github out of Microsoft all seem to have embraced xUnit.net as their test framework (as do many more OSS projects), and I thought that because Prism has come out Microsoft as well, that following suit with xUnit.net would be most appropriate.\n. > Consistent formatting cannot be an option because you have no way in enforcing it.\nYou've never used Stylecop or FXCop then?\neditorconfig solves the very real problem of some people preferring to use tabs and some people preferring to use spaces in the settings for their editor. This can cause an adverse effect with well intentioned contributions and patches messing up the source code because their tabs/spaces are inconsistent with the implicit defaults in the rest of the project, and nobody likes messy source code.\nExamples in other projects\n- Roslyn \n- corefx\n. As @briannoyes said using Moq to test this is fairly trivial, as this (un-tested) code shows:\n```\n[Test]\npublic void Foo_Should_CallRequestNavigate()\n{\n    var mockRm = new Mock();\n    mockRm.Setup(x => x.RequestNavigate(\"MainRegion\", new Uri(typeof(MyView).FullName, UriKind.Relative).Verifiable();\n    var sut = new ClassUnderTest(mockRm.Object);\nsut.Foo();\n\nmockRm.VerifyAll();\n\n}\n```\nThe last line of the test basically instructs Moq to assert that the RequestNavigate method was indeed called with those parameters.\nIn a real test class, you would probably want to re-create the mock IRegionManager in the test setup method, and .Setup particular methods on a per-test basis.\n. ",
    "roy-t": "I would vote against this. Including the brand name in the class name does not make it more clear what the class does and since the class is already included in a branded name space it does not convey any extra information. I would not be against changing the name, but as bartlannoeye already said the name covers the class's functionality pretty good.\nExtreme example, I don't think anybody thinks its a good idea to add \"Prism\" in front of all classes in the prism library. So why is it a good idea to add it in front of one class?\n/me is not looking forward to typing\nvar nav = new PrismRegionNavigationSerivce(new PrismServiceLocator(), new PrismRegionNavigationContentLoader(), new PrismRegionNavigationJournal());\n. I'm not sure I understand. What I mean is that in some case you would like to remove (not record) items from the navigation journal. Its not a matter of managing the life time of the underlying view models, but not showing screens that do not make sense in a GoBack() action. \nFor example, in my case, navigating back from ItemView to CreateItemView would mean the user being prompted to create another item, instead going back to the an over view of items. I cannot use   requestNavigate(\"SomeView\") from the ItemView because a user could've gotten there from multiple views.\n(Hope this makes more sense :) ).\n. Hey Brian,\nI was wondering if you already have an idea how to enable this scenario? Can you maybe give me some pointers where I could best implement this? I'll share the code of course :)\n. Although that is not a completely satisfactory work-around, due to the caveats you mentioned, it will do the job. Would be great if we have some more control over the Journal so that we do not have to use this.\nThanks for the help!\n. Hey Brian,\nSorry for getting back to you so much later.\nI've been thinking about the implication of adding these methods to the navigation journal. They might solve the issue, but I';m not sure about the order of events.\nI was thinking that a viewmodel should be able to remove itself from the journal in the OnNavigatedFrom method. But I'm not sure if the current view model is, at that moment, already present in the navigation journal.\nThe reason why I think it should be done there is because that is usually the last possible moment for something to change in the view model, so in most cases it will have all the information required to determine if it should be skipped when going back or not.\n(In this case you would only need the RemoveLast() method so you would not need to rewite the backend of the NavigationJournal).\n. Sorry for the late reply. I was under the weather.\nHow about always entering a view in the navigation journal before 'OnNavigatedTo' (I think this is roughly where it happens now). This means that GoBack() will work as expected (from C to B). Then optionally removing the view from the navigation stack after 'OnNavigatedFrom'. I like the idea of an interface for this. We already have 'INavigationAware' and 'IKeepAlive', etc... We could add 'IJournalAware' or something like that with 'bool PersistInHistory()'.\nI don't think using GoBack(2) or calling GoBack() multiple times is a good idea. It puts the responsibility of knowing if a view should be skipped at the wrong view. For example.\nA->B->C->D\nSay C is an optional 'log in' form to access a secure part (D) of the application. After having logged in once you will be logged in for the entire session. C knows this. However D is just another part of the application. Having to do GoBack(2) in D requires D to know that this time the user just logged in.\n. @dvorn the problem with creating your own journal is that you have to cast it everywhere in the application. (Since you get the journal from the OnNavigatedTo method you can't just inject IMySpecialJournal into the view model. It would have no history or the history of the entire application, not just the specified region). \nHowever, the method you describe with changing RecordNavigation seems like a good idea. That would give me the exact behavior that I want :). I've never worked with multiple active views in one region so I don't have much to say about that.\n. @dvorn ah I now understand your solution. That's actually pretty clever. Since we do not have multiple active views the issue for me is solved. Should I leave this ticket open as a general feature request to make this behavior more accessible?\n. ",
    "powerdude": "EventAggregatorEvent?\n. I would suggest leaving it has i've seen quite a number of people on forums want something like this.  It becomes necessary when you want to push/pop a number of forms on/off the stack but not make it obvious you are doing so.  I haven't run into the scenario myself, but I see it is possible.\n. I'd vote for one.  IUserInputNotificationService or something like that.\n. I'd vote for not automatically clearing the stack and add a parameter to allow someone to do so.\n. yes\nMicrosoft Visual Studio Enterprise 2015\nVersion 14.0.24720.00 Update 1\nMicrosoft .NET Framework\nVersion 4.6.01038\nInstalled Version: Enterprise\nArchitecture and Modeling Tools   00322-80000-00000-AA035\nMicrosoft Architecture and Modeling Tools\nUML\u00ae and Unified Modeling Language\u2122 are trademarks or registered trademarks of the Object Management Group, Inc. in the United States and other countries.\nLightSwitch for Visual Studio 2015   00322-80000-00000-AA035\nMicrosoft LightSwitch for Visual Studio 2015\nVisual Basic 2015   00322-80000-00000-AA035\nMicrosoft Visual Basic 2015\nVisual C# 2015   00322-80000-00000-AA035\nMicrosoft Visual C# 2015\nVisual C++ 2015   00322-80000-00000-AA035\nMicrosoft Visual C++ 2015\nVisual F# 2015   00322-80000-00000-AA035\nMicrosoft Visual F# 2015\nWindows Phone SDK 8.0 - ENU   00322-80000-00000-AA035\nWindows Phone SDK 8.0 - ENU\nApplication Insights Tools for Visual Studio Package   1.0\nApplication Insights Tools for Visual Studio\nArduino for Visual Studio   1.0\nArduino extension for Visual Studio. For more information please see docs, faq and forum at http://www.visualmicro.com\nASP.NET and Web Tools 2015 (RC1 Update 1)   14.1.11120.0\nASP.NET and Web Tools 2015 (RC1 Update 1)\nASP.NET Web Frameworks and Tools 2012.2   4.1.41102.0\nFor additional information, visit http://go.microsoft.com/fwlink/?LinkID=309563\nASP.NET Web Frameworks and Tools 2013   5.2.30624.0\nFor additional information, visit http://www.asp.net/\nAutomatic Versions   1.4.2\nProvides tools for managing assembly versions.\nAzure App Service Tools v2.8.1   14.0.11123.0\nAzure App Service Tools v2.8.1\nCommon Azure Tools   1.7\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\nDataFactoryProject   1.0\nMicrosoft Data Factory Package\nGitHub.VisualStudio   1.0\nA Visual Studio Extension that brings the GitHub Flow into Visual Studio.\nJetBrains ReSharper Ultimate 10.0.1   Build 104.0.20151114.160203\nJetBrains ReSharper Ultimate package for Microsoft Visual Studio. For more information about ReSharper Ultimate, visit http://www.jetbrains.com/resharper. Copyright \u00a9 2016 JetBrains, Inc.\nKofePackagePackage Extension   1.0\nKofePackagePackage Visual Studio Extension Detailed Info\nMicrosoft Azure Data Factory Node Node   1.0\nAzure Data Factory extension for Visual Studio Server Explorer.\nMicrosoft Azure HDInsight HQL Service   2.0.2900.0\nLanguage service for Hive query\nMicrosoft Azure HDInsight Tools for Visual Studio   2.0.2900.0\nAn integrated development environment for HDInsight application development.\nMicrosoft Azure Mobile Services Tools   1.4\nMicrosoft Azure Mobile Services Tools\nMicrosoft Azure Tools   2.8\nMicrosoft Azure Tools for Microsoft Visual Studio 2015 - v2.8.31121.1\nMicrosoft Azure Tools   2.7\nMicrosoft Azure Tools for Microsoft Visual Studio 2015 - v2.7.30818.1601\nMicrosoft MI-Based Debugger   1.0\nProvides support for connecting Visual Studio to MI compatible debuggers\nNCrunch\nContinuous Testing Tool for .NET\nCopyright \u00a9 2010-2015 Remco Software Ltd\nNinjaCoder.MvvmCross.VSPackage   1.0\nNinjaCoder for MvvmCross and Xamarin Forms\nNuGet Package Manager   3.3.0\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\nOffice Developer Tools for Visual Studio 2015 ENU   14.0.23025\nMicrosoft Office Developer Tools for Visual Studio 2015 ENU\nPreEmptive Analytics Visualizer   1.2\nMicrosoft Visual Studio extension to visualize aggregated summaries from the PreEmptive Analytics product.\nPython Tools for Visual Studio   2.2.31105.00\nPython Tools for Visual Studio provides IntelliSense, projects, templates, Interactive windows, and other support for Python developers.\nPython Tools for Visual Studio - Django Integration   2.2.31105.00\nProvides templates and integration for the Django web framework.\nPython Tools for Visual Studio - Profiling Support   2.2.31105.00\nProfiling support for Python projects.\nSQL Server Data Tools   14.0.50730.0\nMicrosoft SQL Server Data Tools\nVisual C++ for Cross Platform Mobile Development   1.0\nVisual C++ for Cross Platform Mobile Development\nVisual C++ for Cross Platform Mobile Development   1.0\nVisual C++ for Cross Platform Mobile Development\nVisual Studio Tools for Universal Windows Apps   14.0.24720.00\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\nvsFunnel   1.5.19\nDecrease solution loading and re-compilation times dramatically by filtering projects not relevant for the current task. \nFor more information about Funnel, see the website at http://www.vsfunnel.com\nCopyright \u00a9 2013-2016. All rights reserved.\nWorkflow Manager Tools 1.0   1.0\nThis package contains the necessary Visual Studio integration components for Workflow Manager.\nXamarin   3.11.1589.0 (f119127)\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\nXamarin.Android   5.1.7.12 (53fce3730830417896a42f365a5ba35f1ee58d9d)\nVisual Studio plugin to enable development for Xamarin.Android.\nXamarin.Forms Intellisense   1.0\nProvides intellisense for Xamarin.Forms in the XML editor.\nXamarin.iOS   9.1.0.0 (a49a79c0e30fc5f9acf323008a9e44be2f0c1bd2)\nVisual Studio extension to enable development for Xamarin.iOS.\nXamarin.iOS Unified Migration   1.0\nAutomated migration for Xamarin iOS Classic projects to Unified\nXamarin.TestCloud.Integration   1.0\nEarly preview of Xamarin Test Cloud integration\nXamlStylerVSPackage   1.0\nXaml Styler.\n. I don't have Xamarin 4 installed\n. Arghh!!! that's very unfortunate as i can't upgrade my license.  Oh well.\n. Xamarin.Forms.PCL.zip.zip\nthere is template info there\n. any way to support both or install a v3 version of templates?\n. I don't think i like the idea of having to provide an implementation of the page just to provide the interface.  Your example doesn't seem like it needs to be on the page class since it uses nothing from that class to provide the value.\n. you should probably add tests that checks the value from the view model too.\n. Hey, looks good.  I dont know if i missed it, but I'd suggest testing an async Task method too in addition to async void since that's really not the recommended pattern, but it is required to do sometimes.\n. i have 2 suggestions:\n  - move the if check into the PageUtilities.OnNavigatingTo.  No reason for developer to know the distinction there.\n   - provide a behavior I could add to my code to \"enable\" this feature.  No need for developer to litter their code with this code.  That way it could be enhanced later if necessary.. Wouldn't it be easier to add the code to a behavior and use the behavior on a case by case basis.  That way it is part if the library, allows developers to add the feature if they wanted it and would better than paying a code snippet everywhere.  The behavior could do the if check if you don't want to move it into page utilities.  I'd think more people would comfortable adding behaviors instead of posting code.  Just my $0.02 and it fits better into the paradigm.. any chance of renaming the parameters to camel case?\n. sorry for jumping in late here, but wouldn't it be better to add a property to NavigationParameters to control this.  It seems the caller should possibly have control, since it has the knowledge of choosing to go the page, to decide if the stack should be clear or not, just like it makes the decision to show a page as modal or not.  To have the view/viewModel make this choice would seem to limit the view/viewModel.\n. as far as discoverabilty, i wasn't suggesting adding the value as a string in the dictionary, but doing this:\n```\npublic class NavigationParameters : IDictionary\n{\n       public bool ClearStackBeforeNavigation { get;set;}\n}\n```\nthat makes it a bit more obvious, doesn't it.  \nAs far as your other statement is concerned, you're saying if I make a custom navigation page MyNav1 that I can't decide to clear the stack in one instance but leave it alone in another.  That seems restrictive, and to be honest, i haven't run into a situation yet where i'd do this anyway, but it does just seem to tie my hands needlessly.\n. but @brianlagunas, going to MyTabbedPage is an implicit request to go to MyTabbedPage/TabA.  Wouldn't you want the parameter to go to the tab? \n. i don't think you should remove the converter as i've found it useful in other implementations of this feature in another library\n. i don't think you want to set the CommandParameter property or you'll set a property the user never set and this code wouldn't fire a second time.  It should be saved to a local variable.\n. before introducing a breaking change, i'd suggest adding an IBeforeNavigationAware interface with OnNavigatingTo and OnNavigatingFrom (don't like the 'Will').\n. that works!\n. I think it would be of value if you allowed the possibility of rejecting navigation.  So OnNavigatingFrom would return a boolean that could be checked to decide to continue to leave the page\n. @tboogh , yes, but for consistency sake, and if we're introducing INavigatingAware, i'd say it kind of belongs there.\n. Also, OnNavigatingTo could also return a bool in order to reject navigation to the page.\n. I'd say think differently about the problem.  Go to MainPage -> ViewA and then present the LoginPage modally if the user is not logged in\n. agree with @joacar which was going to be my next suggestion.  Do navService.NavigateAsync(\"/LoginPage\") first and from login page do navService.NavigateAsync(\"/MainPage/ViewA\")\n. Can we also get unit tests and examples for this?  It seems like a good thing to have but I'm sure an example would help\n. hi @brianlagunas ,\nthanks.  I didn't realize that not specifying useModalNavigation would default to true.  Seems a bit counter-intuitive since nullable booleans would default to false.. why couldn't these be properties of the NavigationParameters.  It seems like we are going to far with adding new interfaces or adding parameters to methods.  Wouldn't there be value in NavigateAsyn(\"ViewA?isModal=true&isAnimated&removePreviousPage=true\") and then just adding the explict propeties to NavigationParameters?. @dansiegel , yes, it is possible there, but thought it would be more explicit to call out the functionality separately.  There's a lot going on in that class and it does more than navigation and should probably rely on other, more specialized services to help it do what it does.. @Nk54  what's wrong with doing this:\nvar param = new NavigationParameters{{\"a key\", anObject}};\nSince NavigationParameters is an enumerable, your suggestion would violate most patterns for creating an enumerable.. @brianlagunas which VS extension?. ",
    "thomashagstrom": "Working with Xamarin.Forms 1.4.2.6359 (stable) and targeting WinRT+Windows Phone with a Universal project, I can't really get this to work out of the box.\nXamarin PCL's need to target Windows Phone 8.1 with this update (i.e not Silverlight). With the new PCL profile (111) Prism.Forms can not be installed using NuGet.\n\nOnly the Windows (8/RT) project is allowed as target when installing Prism.Forms.\nSame thing for the dependency Unity (3.5.1404.0). There is however a prerelease of Unity that has updated targets.\nUnity 3.5.1405-prerelease can be added to all my projects; PCL, Windows and Windows Phone 8.1.\nWith a little help from ReSharper I can now in fact add the proper references to my Xamarin PCL projects, even if I can't add the package with NuGet!\nPrism, Prism.Forms, Prism.Forms.Unity are easily referenced from the NuGet folder\nPrism.Forms.5.6.1-pre1\\lib\\portable-win+net45+wp80+MonoAndroid10+MonoTouch10+Xamarin.iOS10\nSo why does the NuGet package don't have this target?\nNow as a Xamarin developer I'm used to hickups like this.\nBut the main issue is that even with these workarounds I can't get Navigation to work. Keeps giving me \"null reference\" errors. Really missing the navigation callback from Prism Silvelight/WPF right now.\n\nGoing to demo my architecture for other Xamarin developers on Wednesday 2015-05-20 and would really like to tell them that this will in fact work. Because Prism rocks, it is known.\nI used Brian's tutorial:\nhttp://brianlagunas.com/first-look-at-the-prism-for-xamarin-forms-preview/\n. Good idea, that should have been my next logical move. Usually it doesn't even compile when Xamarin is incompatible, but I'll try this out if you think it'll work just by updating the references.\n. Cloned Prism, built Prism.Forms and Prism.Unity.Forms and replaced my references.\nNow the viewmodel for my main view isn't resolved any more?\nIf I manually resolve the ViewModel in my Bootstrapper that works:\ncsharp\n        protected override Page CreateMainPage()\n        {\n            var view = this.Container.Resolve<HomeView>();\n            var vm = this.Container.Resolve<HomeViewViewModel>();\n            view.BindingContext = vm;\n            return view;\n        }\nHowever, getting the NavigationService is now an issue. \n- Going by the tutorial it looks like it would be magically resolved by simply putting a public property for INavigationService in your ViewModel. This property is null for me, even if i decorate it with [Dependency]\n- Trying to import INavigationService in MainViewModel gives error: \"Prism.Navigation.INavigationService, is an interface and cannot be constructed. Are you missing a type mapping?\". \n- Importing IUnityContainer and trying to Resolve<INavigationService> gives same error.\n- Looking through the UnityContainer's Registrations NavigationService is indeed missing.\nFeel free to contact me directly.\nFB: https://www.facebook.com/thomas.hagstrom\nE-mail: thomashagstrom (at) outlook.com\n. Ok, so I've been digging through this, testing on Win RT and WP 8.1. Can't see any Android output in the Prism project so I skipped that.\nMy ViewModelBase already implemented INavigationAware, so adding INavigationServiceAware doesn't do anything.\n\nWith ViewModelLocator, do you refer to the Bootstrapper implementation? \n``` csharp\nusing HLI.TimeNodes.Data;\nusing HLI.TimeNodes.Mobile.ViewModels;\nusing HLI.TimeNodes.Mobile.Views;\nusing Microsoft.Practices.Unity;\nusing Prism.Unity;\nusing Xamarin.Forms;\nnamespace HLI.TimeNodes.Mobile\n{\n    public class Bootstrapper : UnityBootstrapper\n    {\n        protected override Page CreateMainPage()\n        {\n            var view = this.Container.Resolve();\n            var vm = this.Container.Resolve();\n            if (view.BindingContext == null)\n            {\n                // This shouldn't be needed\n                // Issue: both vm.NavigationService and this.NavigationService are null??\n                view.BindingContext = vm;\n                vm.NavigationService = this.NavigationService;\n            }\n        return view;\n    }\n\n    protected override void RegisterTypes()\n    {\n        // TODO: SettingsViewModel (plugin)\n        this.Container.RegisterType(typeof(IDatabaseManager), typeof(DatabaseManager));\n        ////this.Container.RegisterType<HomeViewViewModel>();\n\n        this.Container.RegisterTypeForNavigation<SettingView>();\n        this.Container.RegisterTypeForNavigation<TimeLogListView>();\n        this.Container.RegisterTypeForNavigation<TimeLogView>();\n        this.Container.RegisterTypeForNavigation<HomeView>();\n    }\n}\n\n}\n```\nThe suspect thing is that I need Microsoft.Practices.Unity here in order of using Resolve with type arguments, i.e <HomeView> (in general I like my tutorials with full using's for clarity).\nRemoving that usage doesn't help with the issue though.\nThat's all I've done locator wise, other than adding prism:ViewModelLocator.AutowireViewModel=\"True\" to the views.\n'Course checked and double checked conventions:\n\nThanks for all your above and beyond help so far - developing is not at its best as a solo adventure.\nSincerely // Thomas\n. Well that worked like a charm, on the last night an everything - what's up with that? :+1: \nThe newly added HomePage resolves with BindingContext, which in turns has resolved NavigationService.\n\nSo what I now did was to conclude:\n1. From HomePage I can navigate to self and for example HomeView.\n   The latter will however not have a ViewModel resolved.\n2. Doing a quick rename of views + VMs to match this updated pattern... WORKS!\n   Prism with Xamarin for Windows RT, let's go, folks!\nThe only thing I can't do is resolve INavigationService in a view by taking it in the constructor, but logic belongs to ViewModel anyway so I'm moving it there.\nSo many thanks, Prism forever (using it for Silverlight with MEF at my day job) and XOXO\n. Everything Xamarin is preview. That's why we're having another meetup here in Stockholm tomorrow, to work together and learn from eachother's mistakes :)\n. Do you, by the way, mean by specifying view name when registering type for navigation?\ncsharp\nthis.Container.RegisterTypeForNavigation<SettingView>(ViewNames.SettingPage);\n. We're using Prism 4 with SL5 without issues\n. As Brian already have answered (very quickly done, Brian!):\n\"This is because Prism.Forms is in pre-release itself and is not built against Xamarin.Forms 1.4.2.6359, but rather 1.4.0.6341 which does not have the Windows Store and Phone 8.1 support\"\nhttps://github.com/PrismLibrary/Prism/issues/10#issuecomment-102642503\n. Hi @brianlagunas \nHow are we doing with this work? I'm still using my own build, updated for latest stable Xamarin.Forms and PCL profile 111, but are getting issues with the ILogger interface.\nCheers and keep up the good work :+1: (where's smiley support?)\n. Cool. Only weird thing is - and this is more Visual Studio 2013+Git - that my PrismEvent is still PubSubEvent. Can't seem to fetch/clone the latest version and been unable to google a reason.\n. Alright. Might want to update the tutorial :)\n. I was just going to ask about this. Developing not only for mobile but full desktop systems will eventually require RegionManager style navigation. But being able to design a shell with NavigationPage is an absolute minimum.\nLook forward to any progress with this.\n. So where we at, is there a branch where this can be tested yet?\nI don't see any mention of a RegionManager, but as long as we can put content around a navigation page and have Prism target all navigation to that NavigationPage control (sorry, \"view\"..) then I'm good :)\n. If it's only possible to use one NavigationPage per app, in reality, then the KISS principle should apply :)\n. Is there now a version of Prism XF with some basic implementation and if yes, how to use it?\n. So I'm on Prism.Forms 6.0.1 via NuGet now, since that works fine with my current solution - no navigation page. But eventually I would certainly like to use a NavigationPage for example with a Xamarin MasterDetailPage.\nIt looks to be supported in Prism.Forms 6.2.0-pre3. What is yours, Brian, and everyone else's opinion on that? Will that fly as sort-of described in the link you provided? :)\n. The page currently states \"maybe link to primary ViewModelLocator topic\".\nBut this is the primary topic? :smiley: \n. With Xamarin.Forms for Visual Studio ReSharper is almost a must (and very cheap by the way). So the template I made for creating View/ViewModels for R# could work, at least as a starting point.\nTarget folders can be changed by editing the template. However, most people use their own base class for ViewModels and/or Views, which then would have to be changed as well.\n. Oki doki. Only problem then is I don't think the user can edit the template easilly, once it's imported?\n. My UWP works for Release, not just x64, @Hartdrooz \nUWP is still \"preview\" though, and I know Telerik and others are waiting for a formal release.\n. Actually they do. Turns out you can override OnBackButtonPressed in the Page. I tried this and it worked:)\nAdded in 1.3\nhttps://developer.xamarin.com/api/member/Xamarin.Forms.Page.OnBackButtonPressed/\nThere's also one in navigation page\nhttps://developer.xamarin.com/api/member/Xamarin.Forms.NavigationPage.OnBackButtonPressed()/\n. What about the Android top left \"Back\" arrow when navigating with Prism; does the same limitations apply? Here I'm physically clicking in the app, but INavigationAwareseems unaware (no pun intended)?\n. So this is still an issue with 6.2.0 - have Xamarin not come up with a solution yet?\n. Could you specify those blockers, so we can decide if they prevent us from going into production with Prism using current pre?\nOne thing we've talked about is back navigation, which in my case could be worked around in the physical Page.\n. So assuming XF 2.3.1.110-pre1 works in a reasonably stable way, does it consequently fix issues with Prism (in my case master/detail hamburger menu disappearing on iOS)?\nhttps://forums.xamarin.com/discussion/70166/xamarin-forms-2-3-1-pre1#latest\n. Hi Brian\nWhen you're back from vacation, please clear the versioning up?\nWe're talking about 6.2.0 and Prism.Forms, right? Since that's the Xamarin.Forms package.\nBut the pre's for Prism.Forms are 6.1.0, while Prism.Unity and Prism.Core are 6.2.0?\nJust wondering what's up with that :)\nhttps://www.nuget.org/packages/Prism.Forms/6.1.0-pre7\n. So how are we looking guys? Does 2.3.1 \"stable\" work?\nhttp://forums.xamarin.com/discussion/70166/xamarin-forms-2-3-1-stable/p1\n. Cool, so next stable which can't be that far off. Look forward to it\n. how would this work in relation to the app lifecycle? Some kind of deep linking?\nOtherwise I would just listen to App.OnResume and navigate to the appropriate (last viewed) page?. ",
    "GreatFireWall": "I just wanted to new a issue for ask: why prism:ViewModelLocator.AutoWireViewModel=\"True\" not working while a ViewModel naming XXXViewViewModel, but I found this issue.\nIf rename it to XXXViewModel it works well.\nWhen I add an UserControl by Prism UserControl Template, it make a \"wrong\" name of ViewModel which just append ViewModel.\n\n\n. Yes, Binding is work out of the box. But no intelligence tips for member of the DataContext. \nThat means I must copy the member name from ViewModel.cs then paste to xaml while I using {Binding XXX}. @hvaring thanks, it works.. ",
    "dansiegel": "@brianlagunas I believe what is shown in the screenshot is actually a bug in the templates where we aren\u2019t handling the case where the View\u2019s name ended with View. . @dvorn I would have to disagree. Prism has an active community. I would say that Prism for WPF is stable which is why you don't see as many changes. . @uckuper again as Brian said before you're comparing apples and oranges. You cannot compare an Application Framework like Prism to xCode and iOS. It's about the same as comparing Monkey's and Rocks. Keep in mind Xamarin with millions in funding is only in the very early stages of testing any kind of live XAML previewing, particularly since they support multiple platforms which change how that XAML will render. Before anyone in the community on their own or as a coordinated effort can ensure that Prism works with a WYSIWYG type editor there has to be one first. I have no doubt that as the tools become generally available in Visual Studio and Xamarin Studio you will start to see support for graphical editors on Prism projects. Now I realize that there may be some applications right now in which Xaml previewing works until you add Prism. If that's the case by all means open a new issue. The great part of this being a community driven project is that someone else may just say that's a great idea and spend some time to take care of it.\n. That sounds great. \n. I can get you a pull request for this later today.\n. @WarBorg have you checked out the sample app? The solution contains a module library, and the HelloWorld App shows how to use the override InitializeModules and how to call it from in your code. Hope that helps.\n. @brianlagunas InitializeModules is an abstract method in ApplicationBase, so it has to be overridden. Perhaps this could be made virtual so that it's only being overridden in projects that actually use Modules. Just a thought\n. @brianlagunas just to clarify, I'm not actually deriving from ApplicationBase that's just where it originates. It looks like maybe this has been fixed now, but when I updated from 3 to 4 and got the module support I had to provide an implementation for InitializeModules. Safe travels.\n. @joacar if you need to make it internal you can add\ncs\n[assembly: InternalsVisibleTo( \"Prism.Forms.Tests\" )]\n. @ali-hk you may want to check out https://msdn.microsoft.com/en-us/library/eehb4faa.aspx. A template should include template parameters so that when it is used it references the relevant information for that developer/project.\n. @ali-hk Your PR includes 75 files you'll forgive me for not going through every one in detail. Some examples from a brief look include:\nPrismPage.UWP.csproj => lines 34-35\nAssemblyInfo.cs => lines 8, 11-13\n. @ali-hk There is no reason to be rude. I appreciate you pointing out that the file I referenced was for the template project itself not the template files. As I said I noticed that from a quick scan of the PR. The existing templates have the issue of not using template parameters in a few places and I would hate to see that missed on these additions.\n. Looks like PR #209 for Xamarin Forms which was just merged should fix this.\n. Happy to help. Besides I think we all wanted to see that change :)\n. I'm trying to think of a reason you would have more than one MasterDetailPage... I would love to hear the use case someone has where they need that. \nThe more I think about this issue, the less I think it's as simple as just exposing that property. For example, maybe I'm on a phone and IsPresented can be false. But maybe I'm on a tablet in landscape and IsPresented can be true, but then the user goes and rotates the screen to portrait and suddenly I want to change IsPresented to false; Given that scenario I'm thinking you need something like:\n``` cs\npublic interface IMasterDetailPage\n{\n    bool IsPresented { get; set; }\n}\npublic enum DeviceOrientation\n{\n    Landscape,\n    Portrait\n}\npublic interface IDeviceOrientationAware\n{\n    void OnDeviceRotation( DeviceOrientation deviceOrientation );\n}\n```\nWhich you could then implement like:\n``` cs\npublic class MyPageViewModel : IDeviceOrientationAware\n{\n    IMasterDetailPage _masterDetailPage { get; }\npublic MyPageViewModel( IMasterDetailPage masterDetailPage )\n{\n    _masterDetailPage = masterDetailPage;\n}\n\npublic void OnDeviceRotation( DeviceOrientation deviceOrientation )\n   {\n       if( Device.Idiom == TargetIdiom.Tablet && \n           deviceOrientation == DeviceOrientation.Landscape ) \n       {\n           _masterDetailPage.IsPresented = true;\n       }\n       else\n       { \n           _masterDetailPage.IsPresented = false;\n       }\n   }\n}\n```\nThis assumes two things of course. First that OnDeviceRotation gets called anytime there is a rotation event, and second it should probably get called around the time we navigate. \nIf we're talking about supporting the possibility of multiple MasterDetailPages then to be friendly I would say something like: \n``` cs\npublic interface IMasterDetailPage\n{\n    string Name { get; set; }\n    bool IsPresented { get; set; }\n}\n// Return a specific MasterDetailPage\n[IMasterDetailPage( name = \"SomePage\" )]\npublic class MyPageViewModel\n{\n     public MyPageViewModel( IMasterDetailPage masterDetailPage ) { }\n}\n// Return the last MasterDetailPage on the navigation stack\npublic class MyPageViewModel\n{\n     public MyPageViewModel( IMasterDetailPage masterDetailPage ) { }\n}\n// Return any MasterDetailPages on the navigation stack\npublic class MyPageViewModel\n{\n     public MyPageViewModel( IEnumerable masterDetailPages ) { }\n}\n```\n. If it has to be controllable from the INavigationService then I would expose it through a querystring parameter like \"MyPage?IMasterDetailPage.IsPresented=true\". The NavigationService could then just resolve the IMasterDetailPage and set the property.\n. I think that's a good name. Considering it's all about a navigation event, I would tend to think that the Prism.Navigation namespace makes a lot of sense. If we end up adding to it, to support some future scenario, we can always move it, should that make sense to do in the future.\n. @tombby11 have you thought about implementing it something like: \n``` cs\npublic abstract class MainPageViewModelBase\n{\n    // Some implementation\n}\npublic class TabletMainPageViewModel : MainPageViewModelBase\n{\n    // Don't redo any code you don't need to...\n}\npublic class PhoneMainPageViewModel : MainPageViewModelBase\n{\n   // Don't redo any code you don't need to...\n}\n```\n. After a little more digging it looks like the root cause of this is a Microsoft.Practices.Unity.ResolutionFailedException. The exception is getting completely swallowed up on iOS making it extremely difficult to debug. Android does at least expose the exception so you can see both the exception and the type being resolved. \n. I would say probably the best bet would be to just log it. I can see some scenario where someone has some custom logger and may be streaming it to an analytic's service where they want the issue logged regardless of whether or not they're debugging. \n. Any thoughts about updating ILoggerFacade to add a new log function which can directly take an Exception?\nI was thinking something like\ncs\nvoid Log( Exception e, Priority priorty = Priority.High );\nthen update the PageNavigationService to wrap the navigation call like\ncs\ntry\n{\n    await NavigateAsync(typeof(T).FullName, parameters, useModalNavigation, animated);\n}\ncatch(Exception e)\n{\n    _logger.Log( e );\n    throw;\n}\nOutput:\nSomeException: This is a message from the exception. \nPriority: High\nStackTrace: Some StackTrace\n. @briannoyes this steams from issues #576 & #587. I totally agree that if the point is to provide more robust logging features within my app, then I could just add some extension methods to suit my needs. The problem really comes down to helping developers debug exceptions. As @brianlagunas and I discussed offline, you have some instant problems with logging an exception. First of all, different applications have different requirements. Second, different developers have different ideas about what needs to be logged. \nWe could of course just catch the exceptions in Prism and do something like log \"MyException - My Error Message\" and send that as a string to the existing Log method. The problem with that though is that, is that you prevent developers from capturing that exception within the Prism modules themselves, to log them in the way that the developer requires. Speaking purely from my own experience on iOS in particular, the platform has a way of sometimes swallowing up exceptions. Without the right toolset to log issues like exceptions, it can make it very challenging to discover what's really causing the problem.\nI don't think that all of the places where the logger is being used currently will necessarily change, which is why I included a Log method with the same signature to the ILoggerFacade in my proposal above. For me the issue is really the need to be logging exceptions thrown inside the Prism modules, since ILoggerFacade cannot be altered in any way as it would be breaking for too many WPF apps, and adding an extension within Prism would really prevent a developer from overriding the behavior the only worthwhile option is to introduce a new logging interface to replace ILoggerFacade. \n. I'm assuming @cbordeman is referring to a Xamarin Forms app. I can't help but notice people requesting more access to the navigation stack as a recurring theme (#581). It would seem like some enhancements are needed/wanted. If your navigation stack looks something like MainPage/ViewA/ViewB/ViewC/Foo, I think a lot of developers want to be able to utilize that for number of navigation related tasks. \nI can certainly see some potential use cases especially for a GoBackAsync( \"ViewA\" ) which would let me not care what's between whatever my current View is and ViewA or whatever came before ViewA. All I know/care about is that either I'm going back to the last instance of ViewA or I'm dumping the Navigation Stack and starting over at ViewA as my MainPage. \nIf we're adding a GoBackAsync( string name ) then we should also add something like NavigateFromAsync( string baseName, string newPath ) as that could be useful if maybe you don't know/care what's between where you are now, and some other view, but you want to use ViewA as your base to get MainPage/ViewA/Foo/Bar, I recognize that you could just do NavigateAsync( \"app://MainPage/ViewA/Foo/Bar\" ) but that would involve both knowing and caring that MainPage came before ViewA.\n. @brianlagunas if there was any confusion, I'm not suggesting exposing the actual Page object. I don't care if someone uses the name \"foo\" to register \"ViewA\", in the context of the navigation stack I would care more about the \"foo\" name than the actual Page object created. \n@cbordeman given the example above INavigationService.NavigateFromAsync( \"ViewA\", \"Foo/Bar\" ) would be the context of what I was suggesting. Also Prism has different Navigation Services depending on the underlying platform.\n. Yeah not a problem. I can get that up in a little bit.\n. if you can merge this, I'll make the updates for the SplashActivity for all of the templates in one PR, and the logo's in another as we discussed.\n. great catches! that should take care of the issues\n. If all we're doing is registering types how does having to implement a new interface work better than passing in an action which can simply be invoked before we register types in the shared code?\n. @StanleyBroo I've typically seen this when there is a bug in your projects code. iOS is great at hiding the actual exception thrown. In my experience you have one of the following issues:\n1. You forgot to register your View for navigation\n2. You forgot to register a type with the DI container\n3. You have a Null Reference or other Exception being thrown in your View or ViewModel. Note that the Exception could be thrown due to a custom control or other extension methods you are using in your View.\nMy recommendation to you at this time would be to try launching it on Android to try to get more information on what the actual exception is that is being thrown. For some reason the actual exception seems to actually surface about 50% of the time on Android and almost never on iOS. PR #613 should help you diagnose this type of issue in the next release.\n. @JeffB1 how could it be improved for you. The ILoggerFacade was added to the navigation service for 6.2, and will log the exception anytime a View fails to be created. . Wasn't really sure whether the docs just need to be changed or a DependecyServiceKernel needs to be implemented.\n. Thanks for reporting the issue with the Xamarin Studio add-in @tbaggett. I'm seeing the same issue. I'll coordinate with @brianlagunas, and hopefully we can get that taken care of as part of #612.\n. @micah8719 the RegisterTypeForNavigation<TView,TViewModel>() function does not do what you're thinking it does. It simply uses the full name (YourProject.ViewModels.Test2ViewModel) as the name to register your view with. It does not tell the ViewModelLocator to use a different ViewModel.\nAdditional functionality was introduced in PR #578 which will let you override the default behavior with the thought of being able to have a common ViewModel which may be shared across Views possibly for different platforms. See the Xamarin Sandbox for an example of how to use it. This will be available in the next Prism.Forms release.\n. Just a thought: \nUpdate PrismApplicationBase:\ncs\nPrismApplicationBase<T> : Application\n{\n    public PrismApplicationBase( IPlatformInitializer<T> platformInitializer ) { }\n}\nThat way it's defined once and implemented with the proper container depending on whether you choose Unity, Ninject, etc\n. May also want to include IPlatformInitializer for the DI projects so you have IPlatformInitializer : IPlatformInitializer<IUnityContainer> and then the PrismApplication can just require IPlatformInitializer. Makes it a little cleaner and whatever changes are made in Prism.Forms will get inherited by Prism.Forms.Unity and Prism.Forms.Ninject.\n. @ederbond I would say that master is stable and should be safe to use in Production Apps. The prerelease status of the NuGet packages has to do with bugs that Xamarin needs to fix first. \nUltimately I would say the answer to your question, is the answer to, \"Do you feel your app can be safely deployed with a prerelease of Xamarin Forms?\" I think the answer to that, various for each of us based on both preferences, and project requirements.\n. I typically hate underscores in the middle of a name, but perhaps something like ProcessNavigationForMultiPage_Page or ProcessNavigationForMultiPage_Page_? At least it gives some separation for readability and the impression that Page is a specified type. I might also suggest a code comment referencing that it's used for TabbedPage and CarouselPage. \n. Yeah I like that better. I'm assuming that you were looking to change from TabbedPage, and CarouselPage for a custom page that used MultiPage? I think that might be better handled in a generic function like you said protected virtual Task ProcessNavigationForPage(...). Prism Forms can do something like below, and if someone needs to implement it, they can. I would probably also update all of the 'ProcessNavigationFor{Some Page Type}' to protected virtual so they can be overridden if needed.\ncs\nprotected virtual Task ProcessNavigationForPage( Page currentPage, string nextSegment, Queue<string> segments, NavigationParameters parameters, bool? useModalNavigation, bool animated ) \n{\n    _logger.Log( $\"Processing Navigation for custom Page type; '{currentPage.GetType()}', please implement an override to ProcessNavigationForPage to navigate to this page.\", Category.Warn, Priority.Medium ); \n    return Task.FromResult( 0 ); \n}\n. @FrancoisM , this sounds related to #476 which is waiting for a fix from Xamarin. If not could you provide more details like what version of Prism/XF you're using?\n. @vinidiktov the template pack for Xamarin Studio is being updated to work in Xamarin Studio 6.0\n. @thomasflad thanks for reporting the issue. I'll be looking into that today.\n. if at first it doesn't pass....\ncs\nAssert.IsTrue( true );\n. Great catch... not sure why that wasn't included when the rest got changed. \n. @tomcrusader it's in the Milestones\n. Here is the Xamarin bug to follow it's status: https://bugzilla.xamarin.com/show_bug.cgi?id=42014\n. As a work around you can implement the following.\n``` cs\npublic class MyPageDialogService : PageDialogService\n{\n    public IApplicationProvider _applicationProvider { get; }\n    public MyPageDialogService( IApplicationProvider applicationProvider ) : base( applicationProvider )\n    {\n        _applicationProvider = applicationProvider;\n    }\npublic override Task<string> DisplayActionSheetAsync( string title, string cancelButton, string destroyButton, params string[] otherButtons )\n{\n    Page page = null;\n    if( _applicationProvider.MainPage.Navigation.ModalStack.Count > 0 )\n        page = _applicationProvider.MainPage.Navigation.ModalStack.LastOrDefault();\n    else\n        page = _applicationProvider.MainPage.Navigation.NavigationStack.LastOrDefault();\n\n    if( page == null )\n        page = _applicationProvider.MainPage;\n\n    return page.DisplayActionSheet( title, cancelButton, destroyButton, otherButtons );\n}\n\n}\n```\n@brianlagunas not sure if you think we should just update the PageDialogService to try to get the current page like this?\n. I'm thinking an approach similar to the ViewModelLocator's AutoWireViewModel property might work particularly well so that we can easily attach an event handler to the TabbedPage CurrentPageChanged and PagesChanged events.\n. I would say that you want to fire when you load the initially selected tab, and again any time you change tabs. You may have an OnNavigatedFrom/To that needs to be handled at least if we're sticking with the current INavAware. Certainly how to handle things may get tricky, but that's on the developer to handle in their implementation not so much on the framework. \n. I can certainly think of a few times where you may want to react to a change on one tab and update other tabs. I suppose you could use events, but I think there's a better way.\n. @polepage this is a great approach! \n@brianlagunas I would say we should add something like the ViewModelLocator so we can simply add the property to the TabbedPage and it can attach the behavior. I can look into this more later tonight.\n. @brianlagunas any thoughts as to whether this behavior should:\n- Be added automagically by the NavigationService for CarouselPages and TabbedPages\n- Be a Bindable Property that adds the behavior similar to the ViewModelLocator\n- Force developers to explicitly add the behavior? (Keep in mind with the other two, a developer always has the ability to do this if they want)\nxml\n<TabbedPage xmlns:b=\"clr-namespace:Prism.Behaviors;assembly=Prism.Forms\"\n            xmlns:prism=\"clr-namespace:Prism.Mvvm;assembly=Prism.Forms\"\n            prism:ViewModelLocator.AutowireViewModel=\"True\"\n            prism:PrismBehaviors.AddMultiPageNavigation=\"True\">\n    <TabbedPage.Behaviors>\n        <!-- Explicitly Added -->\n        <b:MultiPageNavigationBehavior />\n    </TabbedPage.Behaviors>\n</TabbedPage>\n. Well it has to be a behavior. The question is how do you think that behavior should be added. Should it be automatically by the NavigationService, by a BindableProperty making it an opt-in feature or explicitly added like any other behavior?\n. @toadzky I have it all working. There are just some implementation details that have to be figured out. If this is holding you back I've created a Gist you can borrow from to get you through until it gets added. For now you'll need to add the behavior to your MultiPage (TabbedPage/CarouselPage). \nThat said any feedback people have on the expected behavior would be great. Specifically would the community prefer to have this behavior automatically added by the NavigationService or should it be on the Developer to add to each page? Or is there another way all together that people would like to see it work?\n. I would make two points here:\n1) If your VM does not implement the IMultiPageNavigationAware you shouldn't notice a difference.\n2) If someone prefers to use their own behavior or something... We can easily incorporate a bindable property that they can attach similar to the VML.AutoWire property. We could use either a nullable bool or just name it something like DisableBehaviorInjection. \n. If we were to do something like that, I would image we would want something that goes on the MultiPage (Tabbed/Carousel). \n``` cs\npublic interface IMultiPageNavigationOptions\n{\n    bool InjectNavigationBehavior { get; }\n}\npublic class PageNavigationService\n{\n   async Task ProcessNavigationForTabbedPage( ... )\n   {\n       var options = currentPage as IMultiPageNavigationOptions;\n   if( options == null || options.InjectNavigationBehavior )\n       currentPage.Behaviors.Add( new MultiPageNavigationBehavior() );\n\n}\n}\n``\n. @sunefred There is a distinct difference between activation and navigation whether it is done programatically such asNavigationService.NavigateAsync( \"MyTabbedPage/TabA\" )` or by \"Manual tab selection\". Given your line of thinking INavigationAware shouldn't even exist because really a page is Activating/Deactivating when you Navigate To it or away From it.\nGiven an activation scenario you are saying that we have created SomePage and the corresponding ViewModel, now go do something without any context to what is going on in the app. A Navigation scenario differs because there may be context that we want to share without explicitly knowing where it is coming from. \nBesides that the implementation of TabbedPage isn't comparable to a Tab Control that you may be familiar with on the web, where it is a child element of a page (such as the one you see when writing a comment on this thread). The TabbedPage is really closer to a Control Template that you are applying to a selection of Pages which presents a common view wrapper with a control on the bottom for abstracting the navigation between a specified set of pages.\n. If IActiveAware wasn't already a thing I would say that could be a good name. However I think a solution that provides a way to pass information in the way of NavigationParameters would be better. \nTake the case where we navigate from PageA => PageB. Now say PageA is a search page that incorporates the lookup logic for the object we want to work with. When we navigate to PageB it only makes sense that PageB would know about our object. If PageB is a TabbedPage we have no way of telling its children what object we're working with unless we allow the parent to share its navigation parameters and have a way to pass it to the children and/or their view models. \n. @brianlagunas while having an option for the NavigationService to pass the parameters to the TabbedPages children would be nice there are cases where I could see it being buggy. For instance I have TabbedPages that dynamically set which children should be added based on values either on my object or parameters passed to the TabbedPage. \nAlso I can think of some scenarios where you may change a value on the object you're working with, and rather than persisting it to a database and then reloading it on the next tab you may prefer to simply pass the updated object. \n. @pasha-o the Gist I created and the code in the PR are designed to give you the same experience as INavigationAware. As previously mentioned you would simply add parameters to the NavigationParameters collection in OnInternalNavigatedFrom and they are automatically passed to OnInternalNavigatedTo the same as INavigationAware. Both OnInternalNavigatedFrom & OnInternalNavigatedTo are called anytime the user taps on a different tab.. @brianlagunas I would say INavigationAware isn't what it was when this thread started. Namely the concept of OnNavigatingTo could allow all children to properly initialize so you could have something like: NavigateAsync(\"MyTabbedPage?tab=TabA&tab=TabB&name=Brian\") and both TabA and TabB could initialize with Brian as a parameter even though only TabA will show up. . Not really... it can certainly be done. The issue goes back to when the ViewModelLocator was extended. It would be an enhancement so that you don't need to do: \ncs\n Device.OnPlatform(\n    iOS: () =>\n    {\n        Container.RegisterTypeForNavigation<SomePage_iOS>();\n        ViewModelLocationProvider.Register<SomePage_iOS>,SomePageViewModel>();\n    },\n    Default: () =>\n    {\n        Container.RegisterTypeForNavigation<SomePage>();\n        ViewModelLocationProvider.Register<SomePage, SomePageViewModel>();\n    } );\nand instead could simply provide the platform View Type and shared ViewModel so that it can be done on one line.\n. the idea is to simplify it by allowing you to continue making the registrations in the shared code. Again the pieces are already there, it's just providing an new extension to make it cleaner when dealing with multiple views depending on the Target Platform or Idiom.\n. Well crazy scenario's should probably still be the responsibility of the developer to implement something that fits their needs. But I think the common ones can be easily added to Prism, with those being Target Platform and Device Idiom. Either of these scenarios really revolve around you have a single ViewModel but a different View that needs to be used. \nIf it helps perhaps we should remove or alter the existing RegisterTypeForNavigation<TView,TViewModel>( ... ). Currently all it's really doing is allowing you to use a bad navigational pattern. I think in most developers minds when they see that signature they are thinking what I originally thought, which was that I can have MyPage for a View and SomeRandomViewModel which the ViewModelLocator will be able to properly resolve. \n. yeah the idea is to mimic Device.OnPlatform. It does break the camel case convention, but I think given the scenario it's an acceptable break from convention.\n. I think it's safe to say that if a dev is providing a View and ViewModel that's the ViewModel they want to use for that View and it should be registered. I just don't think that the name should be the FullName of the ViewModel. I think a common scenario here is like in #664 where you might have MyPage_iOS, MyPage_Droid, MyPage which all use the MyPageViewModel and what you would expect would be NavigationService.NavigateAsync( \"MyPage\" ) and not NavigationService.NavigateAsync( \"MyProject.ViewModels.MyPageViewModel\" )\n. Well I think you know my opinion. Navigating to ViewModel's is just a bad practice. I'd rather see someone have to jump through hoops to do things poorly than to encourage it. \n. To be fair here I would say if people are really using it currently, then the appropriate thing to do is to make the extensions obsolete and remove them in a later release.\n. @brianlagunas like I said before I don't care for it and am all for it being removed... I think I've been fairly outspoken on my dislike of the pattern in general. It doesn't seem to have much traction for usage, but if it did then making it obsolete would be the way to go. Of course nothing says obsolete like it doesn't work right \ud83d\ude09 \n. Personally I like when things are elegant and leaving people wondering how you did it. That said I would rather that this be controlled by a global property so that you can choose the paradigm you feel makes more sense for your project. Explicitly opting into, or opting out of the AutowireViewModel. \nI would also say that @TWhidden makes a good point, that the whole point of Prism is to use an MVVM approach, which makes a pretty convincing argument to me that defaulting to automatically inject the AutowireViewModel=true would tend to provide an overall enhancing effect. As for the concern that @totht91 brings up about it potentially breaking existing apps, I think that having this controlled by another property so you can turn it on/off globally should make it a low impact item.\n. @udayb99 Xamarin Forms requires some sort of page be a child of the Navigation Page so you couldn't do:\nxml\n<NavigationPage>\n   <ContentView>\n      <!-- Your Content -->\n   </ContentView>\n</NavigationPage>\nThat would give you an error. As @totht91 suggested you could implement a custom NavigationPage (which actually doesn't need any Xaml), something like:\n``` cs\npublic class MyNavigationPage : NavigationPage, INavigationAware\n{\n    public void OnNavigatedFrom(NavigationParameters parameters)\n    {\n    }\npublic void OnNavigatedTo(NavigationParameters parameters)\n{\n    if( parameters.ContainsKey( \"title\" )\n        Title = (string)parameters[ \"title\" ];\n}\n\n}\n```\nYou could then have your navigation like:\ncs\nif( IsUserAuthenticated() )\n    await NavigationService.NavigateAsync( \"MyNavigationPage?title=Home%20Page/HomePage\" );\nelse\n   await NavigationService.NavigateAsync( \"MyNavigationPage?title=Login/LoginPage\" );\n. @cmjacobs This is something I have looked into contributing. Ultimately there are a few issues that would have to be addressed.\n1. Do we switch from csproj to xproj so that we can easily multi-target, otherwise we must choose which .NetStandard API level to target. Also if we decide to multi-target (based on my current understanding) then we have to do so with the understanding that xproj will ultimately be made obsolete.\n2. While this would be very easy for the Prism.Core, we quickly run into a number of issues when it comes to other projects within the Prism Library. For instance we would be limited by what each DI Container currently supports. \nI believe given time this will be well worthwhile, but it's probably still too soon to introduce .NetStandard. Also I would encourage you or anyone else who would like to see this to chip in your two cents on what API level(s) you believe Prism should target specifically (and why).\n. @cmjacobs There is one other issue I forgot to mention. IMHO the only real area where greater portability would be beneficial would be with Xamarin Forms. So unless you were making the Core Library, Forms Library and at least one of the DI libraries for Xamarin Forms .NetStandard compatible there's not much point as you would just restrict yourself down the line with the other Prism libraries.\n. @christiannagel Prism.Core certainly could be converted to .NETStandard... but I'm curious what benefit you believe that would have? Remember there are 3 packages that you need for any project.\n1) Prism.Core\n2) Prism.{Platform}\n3) Prism.{Container}\nTo the best of my knowledge the first 2 could should be convertible to the new .NETStandard particularly for Xamarin Forms. However I'm not currently aware of any of the supported containers having updated to be .NETStandard compatible so you would just be limited by the Prism.{Container} package anyway. \n. @weitzhandler we're working on getting everything converted over to NetStandard. In the mean time feel free to use the preview templates that use a NetStandard1.4 core project instead of PCL and it all works with the existing 6.3.0 release. You just need to install the nuget with dotnet new. If you need additional help hit me up on the Slack Channel.. Xamarin is targeting 1.0 https://github.com/xamarin/Xamarin.Forms/blob/master/.nuspec/Xamarin.Forms.nuspec#L106. @weitzhandler ProfileX does not compile to netstandardY... The charts are to help dev's get a better sense of API area and understand compatibility mappings between netstandard and the ever confusing profiles. . again the profiles are compatible with netstandard versions... to the best of my knowledge, they are compiled to that profile, and not a netstandard version unless Microsoft has changed the tooling behind the scenes to give us the largest bait and switch of them all ;). There hasn't been anything released. I'm still working on some changes before we do the 7.0 release. Once we have the 7.0 release you should see CI packages on our MyGet feed and official releases/previews on NuGet. . @opcodewriter @weitzhandler what is it that you want to reopen about this? Prism already supports .NET Standard. We haven't done a release to NuGet as there are some fixes we need to do to WPF & UWP for the automated builds, but Prism.Core is available on MyGet as a .NET Standard package. @weitzhandler there's nothing left to convert to .NET Standard. The MyGet packages are just as stable as any pre-release we would put on NuGet, as I mentioned it is simply the CI builds for WPF/UWP that need to be finished before we do the release. . This seems a very wrong way of exposing the functionality. I understand there are lots of use cases where there is a need to execute synchronously, however the better way of handling this is to not have a bool in an Async method and rather do something like:\ncs\npublic Task<T> RaiseAsync<T>(T context)\npublic T Raise<T>(T context)\n. @dvorn not true at all.\ncs\npublic Task<T> RaiseAsync(T context, bool executeSynchronously)\n{\n    if (executeSynchronously)\n    {\n        return CallbackHelper.AwaitCallbackResult<T>(callback => this.Raise(context, callback));\n    }\n    else\n    {\n        return this.RaiseImplAsync(context);\n    }\n}\nbecomes...\n``` cs\npublic Task RaiseAsync(T context)\n{\n    return this.RaiseImplAsync(context);\n}\npublic T Raise(T context)\n{\n    return CallbackHelper.AwaitCallbackResult(callback => this.Raise(context, callback));\n}\n```\nHaving a boolean that determines whether or not a method runs Synchronously or not is just a bad pattern, particularly when the method name indicates that it should be an Asynchronous method.\n. @dvorn if you already have a Synchronous version I simply do not understand what your problem is or why you feel you need to wrap your return type in a Task. I'm sorry but based on what I see I would agree with @brianlagunas that this shouldn't be included as part of the Prism API. \n. A SplashScreen cannot be done from a PCL so the short answer is no. As for the templates, see #663, the Android project will be getting a basic Splash Screen that you can change as you see fit. The iOS project already has one. I honestly haven't spent the time to see what or if anything needs to be done for the WinPhone, Windows, & UWP projects. \n. To be fair here you could probably get the information you're looking for by blaming the file in question. That said there is a v6.2-Preview branch which I believe @brianlagunas updates just before releasing the latest preview.\n. @toadzky Git Blame is not about Blaming and Shaming. It helps to give you the history of particular blocks of code within a specified file. If you have a block of code that you are questioning you can always blame it to see if it has been changed before or after the current Preview Release.\nThat said the v6.2-Preview branch is largely behind master because of the PRs that have been pulled into master since pre7 was released including the addition of Autofac support for Xamarin Forms.\n. @toadzky you may find it easier to pass an object id that you can retrieve from a SQLite database. If you're familiar with web development it should make a lot of sense since this follows Url based navigation. \n. I suppose we could add something like:\ncs\npublic T GetValueForKey<T>( string key )\n{\n    return (T)Convert.ChangeType( this[key], typeof(T) );\n}\n. I would say that those would be a great add as would adding PopToRootAsync. The biggest issue is that you need a way to determine what the name of a page is. I mean it's easy for apps following the convention. But if you use a custom name or use different Views depending on OS or Idiom all of that breaks. \nI think perhaps we could attach a BindableProperty to the pages as we create them and set it with the name that we used to resolve the page.\n. One issue this does not currently handle is it will not pass navigation parameters to any of the children. I'm not sure how we would like to handle this. \n1) Ignore it as a known issue for now\n2) Pass the parameters from the currentPage (TabbedPage/CarouselPage) to the first child\n3) Pass the parameters from the currentPage to all of the children.\n. Given that you have the pages MyTabbedPage, TabA, TabB you might navigate await _navigationService.NavigateAsync( \"MyTabbedPage?foo=bar\" ). If there is an expectation for the parameter 'foo' to be passed to either of the children TabA or TabB the current implementation would never pass the parameters them. \n. @brianlagunas I'm totally fine with that... just making sure that is the behavior we want and explicitly expect. As for the naming I think that it's easier to think about as a Navigation event, though I am certainly open to any naming ideas that anyone has.\n@joacar did remind me about how bad we are about logging sometimes. do we perhaps want to log that we're injecting the behavior? \n. I am wondering if we perhaps want to have an Interface that a TabbedPage could implement if you wanted to pass certain parameters to the children? I won't claim this is a great name but perhaps something like:\ncs\ninterface IInternalNavigationParent\n{\n    NavigationParameters SharedParameters { get; set; }\n}\nThis would allow the behavior to have some sort of parameters to potentially start off with.\n. Personally I would say yes it is something that should be adopted by Prism.Forms. BehaviorBase<T> was introduced specifically because I believe that over time there may be several behaviors the community would like to have included.\n. As long as you're not a waitress giving me options for sides with my meal... I am a HUGE fan of options...  I would rather see this provide you the ability to provide a converter or path. Also I would think that overriding this entirely so that you can just bind a CommandParameter and pass it directly in would be awesome...\n. thinking about this a little more here the default for the CommandParameter should be null. Given that I would maybe expect it to work as follows:\n``` cs\nif( CommandParameter == null )\n{\n    if( Converter != null )\n    {\n        CommandParameter = Converter.Convert(...);\n    }\n    else if( !string.IsNullEmptyOrWhitespace( Path ) )\n    {\n        // Set CommandParameter\n    }\n}\nif( Command?.CanExecute( CommandParameter ) )\n{\n    Command.Execute( CommandParameter );\n}\n``\n. valid point.\n. @joacar that looks good. didn't realize you had updated it since your earlier post. \n. @brianlagunas I believe the argument here is that the framework provided by Prism is heavily dependent on Commands and Prism should provide this behavior out of the box rather than requiring a dev to either implement it or include yet another library.  \n. Awesome... I'll rebase #663. I will be adding templates for all of the currently supported DI Containers. Let me know if there was anything else that needs to be done before that can get merged.\n. I don't always find the need, but if you start dealing with app extensions and wearables it quickly becomes nice to collapse things down by platform.\n. I would personally prefer to see this made in a way that leaves the static factory method intact for the next release. Make it obsolete of course, but at least make sure we all have time to update fromDelegateCommand.FromAsyncHandler( ... )to what ever the new Async Delegate Command is.\n. @Emasoft remember the Prism DelegateCommand is simply an implementation of Microsoft's ICommand which should be what your controls are referencing. Your controls are all going to be executingvoid Execute` regardless of what you do. That said even in it's less than ideal state, the DelegateCommand works quite effectively across many applications WPF, UWP, and Xamarin Forms. If you feel the DelegateCommand from Prism is not the way to go right now, then I would suggest that you simply implement ICommand in any way you see fit or that you've seen someone else implement it and use that for your project. That shouldn't actually prevent you from using Prism.\n. @adrianknight89 I'll try to take a look later but this shouldn't be a thing. I have a Prism app using Control Templates and they don't interfere with my ViewModels at all. \n. @qmatteoq while you wait for this to be fixed, you may consider either implementing a behavior you can add to your NavigationPage or implement something directly on your NavigationPage, either as an event handler or override OnBackButtonPressed.\n. @adrianknight89 As mentioned CarouselView is part of a separate package so even if it made sense to do something it couldn't be supported in any of the existing packages without creating a new dependency that most people aren't using, and it would have require Prism to be in preview since the CarouselView package is only a preview currently. \nI'm not going to try to get into good design vs bad design debates here, but note that because the CarouselView is a child element on a page, the CarouselView's children would be sharing the same BindingContext (ViewModel). Assuming you take care of any necessary design issues here, you can accomplish what you're looking for by implementing a behavior for the CarouselView similar to PR #712. Note that all of the events that you would need are specifically tied to the CarouselView and not the ItemsView that it derives from so you would have to implement the behavior for the CarouselView specifically. \n. I was hoping to make the INavigationService extensible for odd ball scenarios like I mentioned. But at the same time I can understand your point why you wouldn't want a Page object being exposed to a ViewModel. I suppose if CreatePageFromSegment( ... ) was made protected you could create a custom Navigation Service that implements another interface while still maintaining the ability to easily create a page without having to rewriting that code.\n. Yeah I'll try to get that in today\n. @JarJarBinkz remember this is open source.... Nothing stops you from either:\n1) Cloning the Prism Library, building it, packing it with a hot fix you need, and pushing the package to your own feed or a local folder.\n2) Including the Prism Library as a Git Submodule or Subtree, and referencing the projects you need so it can be compiled and included with your code.\n. @ileonidmas the Prism.Core and Prism.Forms packages are all available currently on our MyGet CI feed. We are working on some updates that are holding back UWP and WPF.. Yes that's actually the way it's designed to work. Pages that are children of a MultiPage such as a Tab in a TabbedPage are not actually getting navigated to, but rather it is the MultiPage (TabbedPage) that is navigated to. TabA as the Current Page is simply displayed. The Navigation you see with Tabs is a sideways navigation different from the normal navigation pattern. \nI'll have to double check that exact scenario but I believe PR #712 should address the OnNavigatedTo issue you're concerned about. \n. @kylewarren sorry misread your question... \nyou can see PrismApplicationBase, we are still calling the RegisterTypes before the IPlatformInitializer.RegisterTypes. It's not that clear cut, the logger is created before the container, and before registrations have been made. This prevents devs from having to explicitly reset the Logger after they have registered ILoggerFacade. \n. It's an actual issue. If you're using an instance of the ILoggerFacade that can only be created at the platform level, then you have no way of creating it in a PCL without the container. Since CreateLogger is called before CreateContainer and before the registrations the only way to properly provide the logger for the PrismApplication is to create it after the registrations have been made. \nI noticed this after going through my logs and seeing that I was missing all of my logs from my App.Logger as they were printing to the console. \n. Correct\n. Yes but I see that breaking someone who calls the Logger in say RegisterTypes.\n. Correct, a registration on the platform should override anything done before. But we would want to make sure that The App.Logger is initialized before a dev may want to have it accessible. Which means setting it twice. I'm not claiming it's ideal, but I do believe it's necessary. \n. It's a UdpLogger which annoyingly is in a shared project because there's 0 difference in the code for iOS and Android. But there's also some platform specific stuff that pulls the logging host/port from the Settings.bundle on iOS. \n. The logger I have implements ILoggerFacade, because it doesn't make sense to capture issues within my own code base but ignore critical errors being thrown within Prism such as when there is an issue that prevents the Container from initializing one of my Pages/ViewModels. Since you already have a Logger in the PrismApplication, it's easier just to use it for logging things while executing OnInitialized, OnStart, OnResume, OnSleep, or any events that are handled in the App.\nAlso we could certainly add to the IPlatformInitializer and add a breaking change, however this would keep from breaking anyone and simply fix the issue.\n. I'm not opposed to mimicking the ViewWillAppear/ViewDidAppear, but I would rather see a breaking change in which INavigationAware gets something like WillNavigateTo that could be called on line 347 with OnNavigatedTo remaining where it is.\n. Perhaps we could just swap things around to keep it an opt in feature for existing code bases. Though I agree with @joacar that if we don't make it breaking, we do get some less than ideal names. \ncs\npublic interface INavigatingAware : INavigationAware, INavigatedAware\n. @msangtarash there\u2019s no need for an OnNavigatingFrom. That event is sufficiently covered by IConfirmNavigation & IConfirmNavigationAsync. @brianlagunas I'm not seeing any open issues for DryIoc XF... can you clarify what the \"issues\" are that people are having?. Easy enough to strip something out... but the included features would make it a lot easier to use.\n. Replaced by #984 . If it's something you are setting once in the application there would be nothing to stop you from:\ncs\nprotected override void OnInitialized()\n{\n    InitializeComponent();\n    NavigationService.NavigateAsync( \"MainPage?title=Hello%20from%20Xamarin.Forms\" );\n    MainPage.On<Windows>().SetToolbarPlacement( ToolbarPlacement.Top );\n}. It's worth noting that exceptions caught by the NavigationService are logged with ILoggerFacade. If you haven't registered a custom implementation, by default it uses System.Diagnostics.Debug.WriteLine so it should be in the output in VS/XS. . @scionwest if you want to put a link up for your app I'd be happy to take a look. I know SQLite was one of the reasons that IPlatformInitializer was added since you have to register the implementation with the container on the specific platform and it is called before OnInitialized so that the first time you navigate, your dependencies are available. . I'll try to get the PR in this afternoon. I'm can't really say with 100% certainty. I would say if we want the behavior to be have automatic concrete type resolution we fix that first and if there are issues later with performance we can look at adding explicity ViewModel registration.. @AlesDo I'm aware of the rule. Unfortunately for XF we also have to try to fall back to the Xamarin Forms Dependency Service which breaks the built in WithAutoConcreteTypeResolution. . @brianlagunas yes the Dependency Service is generally used to resolve the implementation for a specified interface, and while you would think simply adding Concrete Type Resolution wouldn't interfere there is something in the implementation that caused it not to work for some reason. . @dadhi looking at the DependencyServiceResolverRule I had tried altering it as follows:\ncs\nDependencyServiceResolverRule = Rules.Default.WithUnknownServiceResolvers(...).WithAutoConcreteTypeResolution();\nand also\ncs\nDependencyServiceResolverRule = Rules.Default.WithAutoConcrteTypeResolution().WithUnknownServiceResolvers(...);\neither way resulted in exceptions being thrown.. I threw in a fix for the NavigationPage issue as well in PR #997. It just needed a single line updated in the Registration extensions... This should also help any other cases we aren't currently aware of...\nvery helpful suggestions btw @dadhi! really appreciate it.. @davidtavarez Prism works effectively the same regardless of DI containers. Extensions provided by Prism for each DI container should generally have the same signatures so the only changes you would see would have to do with the actual DI container and how you might register your unique services. Your best bet for information on any DI container will always be the docs for the DI container you want to use.. \ud83d\udc4d . Weird I wasn't getting that... I'll look into the issue.. Just thinking out loud here... \nNavigateAsync(string uri, bool useModalNaviagtion, bool animated, bool removePreviousPage) \nI would say, is probably the wrong way to go about accomplishing what we'd like to see.\nRemove(string name) & Remove(int index) I believe both present a design challenge for the NavigationService in it's current state, as it would need to maintain some concept of the navigation stack (which has been asked for periodically for a while). Also for Remove(string name) we would need to establish what the logic would be for something like MainPage/ViewA/ViewB/ViewA which instance of ViewA do you pop?\nI do however believe with relative ease we could maintain Uri based navigation with the desired effect. We certainly see this all the time with web design NavigateAsync(\"../ViewB\"). @brianlagunas I would say that anytime the Navigation Service encounters a segment \"..\", then it would pop a page. As terrible as it would be technically \"../ViewA/../ViewB\" should be ~~supported~~ allowable..... Perhaps we do need to add a Navigation stack that could help us for the crazy scenarios. We might add something like the following code, where INavigationStack is a singleton registered with the Container. \n```cs\npublic interface INavigationStack\n{\n    List NavigationStack { get; }\n}\npublic class NavigationStackPage\n{\n    public string Name { get; set; }\n    public bool IsModal { get; set; }\n    public Type Type { get; set; }\n}\n``. My general thinking is that \"../NewView\" shouldn't care if the \"..\" is a modal, wrapped in a NavigationPage, etc. If we're adding RemovePage it would be nice but I would expect something like having a stack \"NavigationPage/PageA/PageB/PageC\"RemovePage(\"PageB\")`. could this be something that we could introduce an interface to control which is more important? I see how a number of developers would agree with @snowppy but I would say there are also a number of developers and apps that would require the ability to pop Modal's even given the page flashing (at least until we can work with Xamarin to find a better alternative).\ncs\npublic interface INavigationServiceOptions\n{\n    bool PreferNavigationPageRemoval { get; }\n}\nI'm sure we could get a better name... . FYI... both PopToRoot and RemovePage are part of the Prism.Forms.Extensions (pre3) on NuGet. \ud83c\udf7b . @KSemenenko  the docs have been moved to the official Prism Library website... and the link is in the ReadMe... I also suggest you work with a better container as we are no longer supporting Autofac. @v1rtu41m4n I get the scenario you have here. I still say a Singleton is a terrible idea for a View Or ViewModel and only leads to problems. You would be far better off serializing the data you need your ViewModel to have to recreate the state. There are a few options here:\n1) You could store what you need in a SQLite table\n2) You could save the data you need to the filesystem\n3) (just thought of this one) we could add some new functionality to expose Application.Properties and Application.SavePropertiesAsync()\nUnless I've missed something, I can't think of any reason you couldn't check for previous state and restore the state using INavigatingAware, INavigatedAware ( or the combination INavigationAware), orIApplicationLifecycle. Just as a verbose sample here:\n```cs\npublic class MainPageViewModel : BindableBase, INavigationAware, IApplicationLifecycle\n{\n    private bool ShouldRestoreState = true;\nprivate void DoRestore()\n{\n    // Implement your logic here\n    ShouldRestoreState = false;\n}\n\nprivate void DoStateStore()\n{\n    // Implement your logic here\n    ShouldRestoreState = true;\n}\n\n#region INavigationAware\n\npublic void OnNavigatingTo( NavigationParameters parameters )\n{\n    DoRestore();\n}\n\npublic void OnNavigatedTo( NavigationParameters parameters )\n{\n    if( ShouldRestoreState )\n        DoRestore();\n}\n\npublic void OnNavigatedFrom( NavigationParameters parameters )\n{\n    DoStateStore();\n}\n\n#endregion INavigationAware\n\n#region IApplicationLifecycle\n\npublic void OnResume()\n{\n    DoRestore();\n}\n\npublic void OnSleep()\n{\n    DoStateStore();\n}\n\n#endregion IApplicationLifecycle\n\n}\n```\nIf you're really stuck on the concept of using a SingletonPage adding the following would at least help ensure you have a ViewModel to attach, but it wouldn't really help you if you rely on parameters being passed in for INavigationAware\ncs\nprotected override void OnAppearing()\n{\n    base.OnAppearing();\n    if( BindingContext == null )\n    {\n        Prism.Mvvm.ViewModelLocationProvider.AutoWireViewModelChanged( this, ( view, viewModel ) => BindingContext = viewModel );\n    }\n}. @ellisnet are you on the Slack Channel ?. @ellisnet not a requirement, but I usually suggest it since it's where you can quickly and easily get help if you're not sure about an implementation or want someone to take a look at something.. @tillig I believe once we've adopted NetCore support we can adopt Autofac 4.X and update the implementation then. . I might interject here that if there is demand for a container, like Autofac or SimpleInjector that has an immutability issue, that perhaps we simply make note of the limitation allowing a number of applications built without modules or dynamically loading modules to operate successfully with developers using the container of their choice. However if someone is developing an application that requires this type of dynamic loading then they will simply need to use a different container. I just see a whole can of worms being opened up that perhaps Prism shouldn't be getting into when we try making a container work in a way that goes against the way it was designed to work. . @dersia to open up OnNavigatedTo on the parent (TabbedPage, MasterDetailPage, NavigationPage) actually would create more problems for developers than it would solve. If you really have a scenario that you need to notify the parent of the updated NavigationParameters it would be best to create an event that you can publish from the child and subscribe to from the parent.. I'm sure we could come up with a laundry list, but suffice it to say that we would change a core behavior in the NavigationService that would be subtle enough that it could introduce a lot of bugs in existing apps that upgrade. Unlike when we introduced OnNavigatingTo where it was a breaking change that forced developers to implement the new method or change INavigationAware to INavigatedAware.. @hnabbasi I don't think anyone using AutoFac ever noticed. This was something that was uncovered when some of the tests were fixed to properly test for this capability. Version 7.0.0 will likely see all support for the XF.DependencyService removed. \nIt sounds like you're following a much better pattern \ud83d\udc4d . Thanks @bartlannoeye Xamarin Studio has been on the fritz lately. One file it leaves alone, the next it goes style crazy on. . @wocar Yes... it's being worked on. @ericwj Can you open a new issue fully describing the API that you're thinking of. I'm not sure if it's something that Prism will adopt, but I do believe it would be worth having a conversation about. \nThe conversion to NetStandard is mostly focused on delivering better support for Cross Platform apps (Xamarin Forms) which will also allow the updating of Autofac and Ninject to their current releases. . @wocar you can try out the preview templates I have available on MyGet. They work with dotnet new and use the NetStandard core. In order to use PCL packages in your NetStandard library your project needs to be using the new csproj format, and you need to add an override to the PackageTargetFallback which those templates do for you. If you have more questions I'm happy to help you further on the Slack Channel. @weitzhandler that nuget contains project and item templates that can be created using dotnet new. The project template has a NetStandard1.4 core project and works just fine with Prism 6.3.0. You do not new Prism to convert over to NetStandard to use it with a NetStandard project. If you need more I'd be happy to explain further on Slack.. I do like that just have to remember, people may not want to use BindableBase so the solution would need to still work when someone uses FooBindable. I think it's totally fine if the requirement then becomes make sure you have a property IsInDesignMode. The other question is how are you proposing that IsInDesignMode would get set to true/false? It could get a little annoying if you have to toggle that on every single ViewModel as you go through your project.. @ellisnet to the best of my knowledge the IntelliSense isn't picking it up for the same reason the Previewer isn't, hence the issue here that someone will need to investigate this further. . @riandesign the URL you provided is a relative URL not absolute... to be absolute it would be \"/BaseNavigationPage/..\". also adding fix so you can now directly register something like the Xamarin.Forms.NavigationPage. @ellisnet when Autofac is updated to the latest v4.5 will this PR still be relevant?. Just generally asking a question since I'm working to get Prism to support using the latest NetStandard releases. This is the wrong thread to go into details on NetStandard versioning and should we compile Prism for multiple versions. That said if Prism supported only NetStandard1.4+ you would find it impossible to use Prism unless you first converted your PCL over to NetStandard1.4+. Nope, I'm just not intimately familiar with Autofac, and wanted to be sure there weren't any breaking changes :). @ellisnet from a consumer standpoint, you are most likely to choose a DI container you are already familiar with, and understand how to work with. Wrapping the container pushes the support for the container from the Autofac community to Prism.. The scenario is:\ncs\nprotected override void OnInitialized()\n{\n    NavigationService.NavigateAsync(\"MainPage\");\n}\nI believe you are correct actually, it's more that the task swallows the exception resulting in the only exception the dev sees being no page. This is more of a thought that we could improve the logging within the framework so that it is easier for dev's to see what happened without having to throw in a try catch every 10 lines.. Actually I think your idea of adding a TaskScheduler.UnobservedTaskException handler may be the way to go there. Also yes we do have the logger in the NavigationService, we should probably use it more, especially with how critical Navigation is. . In short yes, I do think we should provide a mechanism for introducing an error page so that you don't end up with an app crash because no page was pushed onto the stack. I'm not sure though if I prefer introducing an interface specifically for failed navigation handling or if we should incorporate it as part of a larger INavigationServiceOptions that could be used to inject behaviors to pages or any other features we may think of later?\nEither way I would say we should probably introduce the page by providing a default View/ViewModel in Prism.Forms that can be registered for Navigation by PrismApplication and then updated by a dev if they provide their own View with a key like PrismErrorPage. Agreed but there is another change coming with OnPlatform which is the introduction of Default like the following:\nxml\n<OnPlatform x:TypeArguments=\"string\" Default=\"Foo\">\n    <On Platform=\"UWP, WinPhone\" Value=\"Bar\" />\n</OnPlatform>. Actually we never actually use OnPlatform in the registration extensions. We do however use the Device.OS which was also deprecated.. forgot all about that ;). @mackayn since this is abstracting away using the XF Device class, the result should vary based on the version of XF that you use. So with 2.3.4 you'll never get macOS or UWP. . Prism 6.3 did not add the ability to add tabs dynamically. The sample is how you can accomplish it on your own, but that's nothing new. That said it should hopefully be there in the next release.\nIf you look at the DynamicTabbedPage you will notice that we are creating the tabs there.. @kdawg1406 already ahead of you... before we can make Prism support MacOS we have to determine what containers even support it... currently none of the 4 containers offer the support we need.\n\nAutofac: Currently supports NetStandard1.1 which is compatible with MacOS, unfortunately this isn't compatible with Prism at the moment.\nDryIoc: I have already filed an issue with @dadhi \nNinject: I've also filed an issue with @onovotny\nUnity: Is pretty much a dead project and doesn't install on Xamarin Mac projects so I don't see this being the DI container of choice if you want to support MacOS. @dadhi released a new version this morning that is compatible with macOS and the current Prism packages. This will at least give us a path for getting out an update that supports macOS while we work on NetStandard.. @djcparker I was actually just noticing that last night. I know Oren has usually been one of the first one to convert libraries over to NetStandard.. You might go about it by adding a public getter for the NavigationService within your application:\n\ncs\npublic INavigationService GetNavigationService() => \n     CreateNavigationService();\nThen from your Push message handler you could do:\ncs\nvar navigationService = (Xamarin.Forms.Application.Current as App).GetNavigationService();\nnavigationService.NavigateAsync(\"Some/Path/You/Determine\");. @karlfl Prism is open source... if you want to get an idea of how something is done, it's always a great idea to look at the source code.. @bartlannoeye I think it may be a combination of you're not used to it, and preference. I actually think it's easier to follow with inline declarations. That said as @dvorn has pointed out the build server doesn't seem to be upgraded yet, so it wouldn't be very good to merge this until AppVeyor supports C# 7. @rdrrichards I started looking into this a while back for Xamarin Forms. Feel free to check out the branch. There were a couple of reasons why I stopped. For one we started looking at converting the library over to NetStandard which has taken precedence. Also there was some more debugging and testing I needed to do which I haven't devoted the time to yet. . @kdawg1406 I'm not sure what exactly you're doing but, I can File -> New a project add the ViewModelLocator to a View and I get no exception thrown by the Xamarin Forms Previewer. \nCan you provide some more information like which versions of Prism, Xamarin Forms and your IDE. . @kdawg1406 if you remove the ViewModelLocator does the Previewer in VS succeed?. Ok... with the Attached property removed try the following.\n```cs\npublic class ViewModelLocatorExtension : IMarkupExtension\n{\n    public object View { get; set; }\npublic object ProvideValue(IServiceProvider serviceProvider)\n{\n    object viewModel = null;\n    ViewModelLocationProvider.AutoWireViewModelChanged(View, (v, vm) => viewModel = vm);\n    return viewModel;\n}\n\n}\n```\nxml\nxmlns:xaml=\"{local import to the above class}\"\nx:Name=\"view\"\nBindingContext=\"{xaml:ViewModelLocator {x:Reference view}}\". Using a singleton ViewModel is not supported, particularly the moment you want Navigation. The Navigation Service has to have the proper context of the View since Navigation occurs from the context of the page in which you are Navigating from. When you first Navigate to a View, then Pop it off the Navigation Stack you now have orphaned the View and Navigation will not work. Notice I said orphaned and not disposed.. @osicka have you considered using the Azure Mobile Client or Realm to store your data locally that way you can reduce your network load?. @ericwj you may want to consider Unity isn't maintained. As for SimpleInjector, Prism.Windows is the only platform using SimpleInjector at the moment, and to be blunt it's a pain in the *** to make it work for Prism. In my experience if you want to use an anti-pattern or really any pattern that isn't something SimpleInjector is built for you can expect long explanations about why what you want to do is wrong from SI's author.. @dazinator bottom line is we do not directly support 1.1... Prism.Autofac.Forms does because Autofac itself only goes as low as 1.1. We support either 1.0 or 2.0 for Prism Forms. I understand your issues with wanting to register EntityFramework using the Fluent API. \n@brianlagunas and I have spent a lot of time discussing this issue, and ultimately we cannot directly rely on IServiceProvider and IServiceCollection for a variety of reasons that extend beyond whether or not they are available. That said once we have have worked out how our interfaces will work we can consider extending it to work with libraries like EntityFramework provided you are not using netstandard1.0. @brux88 you should ask how to questions on StackOverflow or Slack. Your question on the Popup library was already addressed in dansiegel/Prism.Plugin.Popups#44. That said you're trying to show a simple alert you should read the docs.. @weitzhandler We're targeting netstandard1.0 the same as Xamarin Forms. This also gives us backwards compatibility for those who aren't ready to update their projects from PCL to netstandard. \nNote:\n- Autofac targets netstandard1.1, as a result Prism.Autofac.Forms targets netstandard1.1 not 1.0\n- Ninject was migrated from Portable.Ninject to the official Ninject package. \n- Ninject targets netstandard1.3 and netstandard1.5, so Prism.Ninject.Forms has to match the container rather than target 1.0.. @weitzhandler Unity is not being maintained as far as I know either, and the existing package does not directly support NetStandard. NetStandard though is promise based which gives us a lot more flexibility than with PCL. If you take a look at the changes to Prism.Unity.Forms.csproj you'll notice a PackageTargetFallback. We're able to use that with NetStandard to say \"hey I know this package isn't theoretically compatible with my library, but I swear it really will be ok on the platform I implement it on\". This is why when the question has come up about how to use the 6.3.0 release with NetStandard I keep pointing people to the preview templates.\nAs for the Official DI Container... \n\nPick your container of choice.\nThere is no \"official\" container.\nMy samples use Unity, because that's what I like to use.\n-@brianlagunas \n\nThat said, if you look at the samples I've done, you'll notice they're using DryIoc because that's the container I like. . there are some updates I need to make to the CI scripts and then you'll start seeing updates pushed to MyGet as features get merged.  But NetStandard is here!!!. This is not needed as it is being redone. @bartlannoeye we're going to be splitting UWP and WPF into separate packages so each platform can get updates independent of one another, and I'll be updating the UWP projects to the new MSBuildSDK format. Also the nuspecs are getting moved into a centralized build folder that will have all of the build scripts so you can build locally or on AppVeyor.. @juanperezADD I suppose this could maybe make sense for the yet to arrive CarouselView, but I'm not sure how this would make sense to implement for Xamarin Forms at current. \nPointing to the fact that Xamarin Forms is \"supporting WPF\" doesn't change how Xamarin Forms is implemented or how it works. Before a discussion could really begin on should we support regions, I think it's important to define how (using the Xamarin Forms API) it would even work and be implemented. . @juanperezADD changing the target platform from Phone to Desktop doesn't change the API or how Xamarin Forms works. As @brianlagunas mentioned it requires a lot of planning and more than simply saying you want Regions, you need to define how it will would work within the given API. Also if we were to share the interface between UWP & Xamarin Forms then it would need to be done in a way that makes sense for both API's. . @dadhi if you want to join the Slack channel we can easily discuss there what improvements should be made to optimize the DryIoc implementation. The specific function you're pointing to we have a requirement for the ViewModelLocator to construct the ViewModel with an instance of the INavigationService that is aware of the page it will be used on (assuming that it is needed).. @ronnieoverby consider the title you chose or how you phrased your issue. Neither of them scream \"I want to start a discussion\". . @ronnieoverby there is plenty of humor around here. The way your issue comes across wasn't funny, and trust me I get in trouble by the P.C. police often for ~~accidentally~~ intentionally crossing the line with my jokes. \n@brinko99 I've got to be honest with you, to blame Prism for RTD being broken is a total copout, and pretty stupid. I mean seriously, if that's your basis for deciding whether or not to use Prism, then you might as well not take advantage of any of the thousands of frameworks and toolkits that use RTD, including a lot of the .NET libraries from Microsoft. Certainly if you've got some input for how the docs could be improved to better help, that would be a discussion worth having. If you're trying to learn more about the framework and need help I think you'll be pleasantly surprised at how open and willing to help the Prism community is whether you file a bug on GitHub, ask a question on StackOverflow or even on the Prism Slack channels.. @brinko99 I appreciate the feedback that it this RTD bug is posing a problem for you. Unfortunately without an alternative being suggested, I'm not sure what we could do to fix the docs experience for you. Certainly RTD even in it's current state is better than what we had previously with just a bunch of markdown files that you could view on GitHub. . At current it's not designed to. I believe to make this work we'll need to support IActiveAware across all pages.\nYou could easily make it work for the initial child page, but it becomes a bit more complex how to manage IActiveAware as you add children to the NavigationPage. If you implement a NavigationPage like the following you should get the behavior that you're looking for in the mean time. \n```cs\npublic class MyNavigationPage : NavigationPage, IActiveAware\n{\n    public bool IsActive { get; set; }\npublic event EventHandler IsActiveChanged;\n\nprivate void OnIsActiveChanged()\n{\n    PageUtilities.InvokeViewAndViewModelAction<IActiveAware>(CurrentPage, (obj) => obj.IsActive = IsActive);\n}\n\nprotected override void OnPropertyChanging(string propertyName = null)\n{\n    base.OnPropertyChanging(propertyName);\n\n    if(propertyName == nameof(CurrentPage))\n    {\n        PageUtilities.InvokeViewAndViewModelAction<IActiveAware>(CurrentPage, (obj) => obj.IsActive = false);\n    }\n}\n\nprotected override void OnPropertyChanged(string propertyName = null)\n{\n    base.OnPropertyChanged(propertyName);\n\n    if(propertyName == nameof(CurrentPage))\n    {\n        PageUtilities.InvokeViewAndViewModelAction<IActiveAware>(CurrentPage, (obj) => obj.IsActive = true);\n    }\n}\n\n}\n``. @brianlagunas if you don't manage the children of the NavigationPage then you might set the initial child page (say ViewA) toIsActive = true, then you push ViewB and the NavigationPage's CurrentPage is ViewB... ViewB doesn't know that it's the active page. Now say that you select a different tab... The Active Aware NavigationPage would haveIsActive = false`, ViewB was never active anyway, and ViewA still thinks it's active.... So three possible options I see here:\n\nWe implement an ActiveAwareNavigationPage like the one shown above and we can provide it as the registered NavigationPage in the templates.\nWe implement a Behavior that could be added to any NavigationPage that implements IActiveAware\n\nWe combine the two strategies so that we have a NavigationPage that only implements IActiveAware. If someone wants to implement it differently they could still bring their own custom NavigationPage and the Behavior would still work. . That is a valid point, though one of he goals for v7 was the creation of tabs through the Navigation Parameters. True... there are benefits and drawbacks in my opinion to all three methods. \n\n\nHaving a page we can maintain the functionality of is a huge benefit. Plus it would be easier to use as you just need to use that special NavigationPage.\n\nExplicitly adding the behavior in XAML is more verbose and less magic... \nProviding flexibility is always a nice thing IMO. @scovetta the build process is being updated and this file is going away. Thank you for pointing out the issue though.. The Sandbox is not our official Samples. There is a sample repo for each platform. That said the difference between containers should be minimal and limited to the way each container handles registrations. With only that as a difference I don't much see the value of a Hello World for each container when you simply need to look at the docs for the container you want to use (if you aren't already using that container). . @WonkiDonk just spoke with @brianlagunas about this. He is open to adding Simple Injector for Prism Forms. I would encourage you to sign up for the Slack channel so that you can discuss this and get some assistance from Brian and I. I would also encourage you to take a look at my SimpleInjector branch where I have most of the work done for you. The branch will need to be updated to NetStandard and still needs verification that it actually works :). @WonkiDonk you'll need to resolve some merge conflicts when you get a moment.. @WonkiDonk just a heads up when PR #1113 gets merged it'll simplify what you need in the csproj. So one issue right off the bat is that you cannot register the Xamarin Forms NavigationPage. Doing so throws an exception since it has more than one constructor. . @powerdude I believe the functionality that you're looking for can already be accomplished by implementing a custom PageNavigationService and overriding ApplyPageBehaviors. \n\ncs\nprotected override void ApplyPageBehaviors(Page page)\n{\n    base.ApplyPageBehaviors(page);\n    // Add any additional behaviors\n}. After thinking about this some more I believe that this would actually be a good addition. While you could override ApplyPageBehaviors as I mentioned above, this would require users to properly update the registration for INavigationService. Considering the general importance of INavigationService I think it would be better to introduce a simple factory that would allow users to apply any behaviors that they want. \n```cs\npublic interface IPageBehaviorsFactory\n{\n    void ApplyPageBehaviors(Page page);\n}\n// this then simplifies registration\nContainer.Register(Reuse.Singleton);\n```\nWith the addition of Dynamic Tab Creation, it will also be more common to generically register a TabbedPage as well as a NavigationPage. This means that there are going to be use cases where you simply want to add a PlatformSpecific. There shouldn't be a need to add a custom TabbedPage for example just to add some platform specific property. \n```cs\npublic void ApplyPageBehaviors(Page page)\n{\n    // Apply Prism Behaviors\n    base.ApplyPageBehaviors(page);\n    switch(page)\n    {\n        case TabbedPage tabbed:\n            AndroidSpecific.TabbedPage.SetIsSwipePagingEnabled(tabbed, true);\n            macOSSpecific.TabbedPage.SetTabsStyle(tabbed, TabsStyle.Icons);\n            break;\n        case NavigationPage navPage:\n            iOSSpecific.NavigationPage.SetIsNavigationBarTranslucent(navPage, true);\n            macOSSpecific.NavigationPage.SetNavigationTransitionPushStyle(navPage, NavigationTransitionStyle.SlideUp);\n}\n\n}\n```. How exactly would this make it easier to implement async functions? \n```cs\npublic class ViewAViewModel : BindableBase, IActiveAware\n{\n    private bool _isActive;\n    public bool IsActive\n    {\n        get => _isActive;\n        set => SetProperty(ref _isActive, value, () => OnIsActiveChanged);\n    }\nprivate async void OnIsActiveChanged()\n{\n     // You can do the same Async stuff as async void OnAppearing/OnDisappearing\n}\n\n}. I think perhaps the better idea would be to add the DebugLogger to the project templates. This would solve a few problems for developers... . As I recall System.Diagnostics.Debug is useless in unit tests. I believe the best thing is to remove the DebugLogger altogether. If we want output from the unit tests then we want to use ITestOutputHelper. . Prism itself has nothing to do with XamlC. That said, if you're using one of the templates, it's already added in the AssemblyInfo as it is a best practice. \nKeep in mind XamlCompilation works at either the class or assembly level, with the class level taking precedence, but it can only be added to the assembly once or a specific class once. Trying to add it multiple times is what generates the error. . Have you tried using IApplicationStore?. ```cs\npublic class ViewAViewModel : BindableBase\n{\n    private IApplicationStore _appStore { get; }\npublic ViewAViewModel(IApplicationStore appStore)\n{\n    _appStore = appStore;\n}\n\nprivate async void DoFoo()\n{\n    _appStore.Properties[\"foo\"] = \"bar\";\n    await _appStore.SavePropertiesAsync();\n}\n\nprivate void DoBar()\n{\n    var foo = _appStore.Properties[\"foo\"];\n}\n\n}\n```. As I recall it is technically possible, and I know Xamarin does include the pdb file in the Xamarin.Forms NuGet... but its one of the very few, and Xamarin doesn't even consistently do that across all of their packages. Generally speaking including symbols in a NuGet isn't something you do for releases. \nIf we did provide the pdb's for each build, I believe it would end up being hosted on MyGet and it would be up to the individual developer to add it as a Symbols Source in Visual Studio.. @sunefred I thought you were asking for this to be part of the NuGet that we ship on NuGet... that would never happen. \nAs you mentioned .pbd's are only part of it... this is something that we can certainly look more into once we stabilize the CI/CD pipeline for all of Prism. I know there are several options for how to best do this, so it may take a while before we decide how we want to handle this.. my libraries now include symbol packages on MyGet... and it's planned to be added to Prism. I'll try to sneak it in before we do the next public preview. AFAIK VS4Mac doesn't really support custom symbol sources, but VS4Windows will allow you to add the MyGet feeds as a symbols source.. Symbols are now being published to MyGet. \nBrowse the sources in this package using Visual Studio or WinDbg by configuring the following symbol server URL: https://www.myget.org/F/prism/symbols/. figured we would... no problem. Replaced by PR #1182 . Well even a Button, Label, StackLayout, Grid, etc all derive from View... As I recall the Parent property actually comes from Element so we could take it up to that level. . Just thinking on this, if we add this support, we would need to be able to determine what View/ViewModel's may exist as a child of our parent View (Xamarin Forms Page). There is no good way to recursively walk the children of an Element/Page/View, not to mention that could lead to poor performance on a complex View. We could however solve this by implementing something like the following:\nChildViewRegistry\nThis new attachable property would allow us to track any Child Views that may exist for a particular page.\n```cs\npublic static class ChildViewRegistry\n{\n    public static readonly BindableProperty ChildViewsProperty =\n        BindableProperty.CreateAttached(\"ChildViews\", typeof(IList), typeof(ChildViewRegistry), new List());\npublic static IList<Element> GetChildViews(BindableObject bindable) =>\n    (IList<Element>)bindable.GetValue(ChildViewsProperty);\n\npublic static void AddChildView(BindableObject bindable, Element element) =>\n    GetChildViews(bindable).Add(element);\n\n}\n```\nPrismApplicationBase.cs\nWe could then update PrismApplicationBase to provide a new CreateNavigationService that accepts a generic object for the View allowing all containers to simply pass this in the view directly from the ViewModelLocatorProvider and get the NavigationService for either the Page or View. When the View is a Page, the process would continue as it currently does today. If however it is some other View Element, we would try to determine the parent Page and add the View Element to the Page's Child View Registry.\n```cs\n// Currently exists\nprotected INavigationService CreateNavigationService(Page page)\n{\n    var navigationService = CreateNavigationService();\n    ((IPageAware)navigationService).Page = page;\n    return navigationService;\n}\nprotected INavigationService CreateNavigationService(object view)\n{\n    switch(view)\n    {\n        case Page page:\n            return CreateNavigationService(page);\n        case Element element:\n            var parentPage = GetPageFromElement(element);\n            if (parentPage == null)\n            {\n                Logger.Log($\"No Parent Page could be found for the View: {view.GetType().Name}\", Category.Debug, Priority.None);\n                return null;\n            }\n            ChildViewRegistry.AddChildView(parentPage, element);\n            return CreateNavigationService(parentPage);\n        default:\n            return null;\n    }\n}\nprotected Page GetPageFromElement(Element element)\n{\n    switch(element.Parent)\n    {\n        case Page page:\n            return page;\n        case null:\n            return null;\n        default:\n            return GetPageFromElement(element.Parent);\n    }\n}\n```\nPageUtiliities\nFinally we could update InvokeViewAndViewModelAction to ensure that when we call OnNavigatingTo, Destroy etc, we are also invoking the action on any child Views contained in the ChildViewRegistry.\n```cs\npublic static void InvokeViewAndViewModelAction(object view, Action action) where T : class\n{\n    if(view is T viewAsT)\n        action(viewAsT);\nif(view is BindableObject bindable)\n{\n    if(bindable.BindingContext is T viewModelAsT)\n    {\n        action(viewModelAsT);\n    }\n\n    foreach(Element child in ChildViewRegistry.GetChildViews(bindable))\n    {\n        InvokeViewAndViewModelAction(child, action);\n    }\n}\n\n}\n```. @kylewarren if I understand you correctly you're thinking something like:\nxml\n<ContentPage>\n    <CustomViewA>\n        <CustomViewB />\n    </CustomViewA>\n</ContentPage>\nWith OnNavigatingTo or whatever we invoke, hitting CustomViewB, CustomViewA, and then the ContentPage... is that correct?. @kylewarren what you're proposing would add a lot of complexity that I don't see a need for. Ultimately I see this as being quite similar to the problem we have with TabbedPages. For instance, say I have a TabbedPage for a user profile with tabs for User Details, User Photos, and Messaging the User. Each page uses a custom View that has the User's profile picture, name, and some basic stuff about the user.\nThe goal then should be to be able to reduce the XAML markup from page to page by simply having:\nxml\n<ContentPage>\n    <StackLayout>\n        <UserDetailBar />\n        <!-- Some other stuff -->\n    </StackLayout>\n</ContentPage>\nWhat is really important for our goal is that we are initializing UserDetailBar in this sample with the user's id or perhaps the actual user model that we have passed in the NavigationParameters. I don't see the need to add any overhead. If some setup is required in the Parent, then I see there being something entirely wrong with the design.. I might add that barcode scanning should be looked at as a service for better testability of your code rather than as a View you need to handle in your application. This is such a common scenario in apps I do for clients that I have open sourced this and provided it as an easy to use NuGet. . Due to the nature of Autofac, Modules cannot directly add registrations to the container since the ModuleManager must first be resolved and IContainer and IContextRegistry aren't resolvable. Meaning that you could not do:\n```cs\npublic class MyAutofacModule : IModule\n{\n    private IContainer _container { get; }\n    public MyAutofacModule(IContainer container)\n    {\n        _container = container;\n    }\npublic void Initialize()\n{\n    var builder = new Builder();\n   // do registrations\n   builder.Update(_container);\n}\n\n}\n```\nAt least for the time being the best guidance would be to handle registrations through a static method in the Module that could then be referenced in the application. \n```cs\npublic class MyAutofacModule : IModule\n{\n    public void Initialize() { }\npublic static void RegisterTypes(ContainerBuilder builder)\n{\n    builder.RegisterTypeForNavigation<ViewA>();\n}\n\n}\npublic class App : PrismApplication\n{\n    protected override void RegisterTypes()\n    {\n        MyAutofacModule.RegisterTypes(Builder);\n    }\n}\n```. You might want to check this out... The Xamarin.Forms.GoogleMaps library provides everything Xamarin.Forms.Maps does and several other features... the Bindings extension provides you the ability to use Maps with MVVM patterns. \nhttps://github.com/nuitsjp/Xamarin.Forms.GoogleMaps.Bindings. Autofac Modules in Prism Forms should also be updated to support a more traditional Module approach\n```cs\npublic interface IAutofacModule : IModule\n{\n    void Initialize(ContainerBuilder builder);\n}\npublic abstract class AutofacModuleBase : IAutofacModule\n{\n    public void Initialize() => new NotImplementedException();\npublic abstract void Initialize(ContainerBuilder builder);\n\n}\n```\nThis would allow Prism.Autofac.Forms to then provide it's own ModuleManager with the PrismApplication's ContainerBuilder so that it can pass the builder into the modules Initialize method before the Container is built.. Unless the module can access the ContainerBuilder there is no way for the module to initialize it. Based on the way the AutofacModuleInitializer works with the Activator because we can't call Builder.Build(), it really requires that the Module doesn't have any parameters in the ctor which makes the IModule.Initialize useless.. I think there are number of uses... as already mentioned it makes a lot of sense when you are using the CarouselView.\nAnother common use case is you have a TabbedPage with a Profile View for some common model that you are working with across the Tabs... This would then allow you to create a ProfileView that could have a it's own ViewModel for displaying the Profile data you want to show without having to replicate it across the ViewModels for your Tabs, as well as simplify your XAML by simply including that ProfileView without having to set anything because it's ViewModel will take care of what it needs. I would say that alone is common enough to justify it's inclusion.. I've been testing this and it would appear trying to access the View's parent Page is not something that is going to be particularly easy to do. When the ViewModelLocationProvider is called, the View's Parent is still null. I'm going to close this PR for now until we can find a way to solve this for Issue #1116 . @Giorgi you can easily add an extension method to your project to allow you to do that.. What version of Prism are you using?. Thanks for the report. I was able to duplicate the issue, and will have a fix out as soon as I can... also note that the feed was updated to https://addin.prismlibrary.com/main.mrep. this has been fixed. please update the Template Pack in VS4Mac. I still need to update the ReadMe, but you can read more on http://dansiegel.net/post/2017/08/30/prism-template-pack-in-visual-studio-for-mac. I'm closing this as we already target a newer version of DryIoc than you are asking about.. @eliasribeiro can you clarify is this the Template Pack for VS2017 or VS4Mac?. I feel like I'm missing something... but if Unity 5 doesn't have a dependency on CommonServiceLocator why do we care about it?. @ENikS was noticing that our tests break when updating to v5 unless I change the test project to net47. @ENikS yes sorry, thought maybe you might be aware of something off the top of your head. Right now I was updating Prism.Forms.Unity and the corresponding test project is a netcoreapp1.1. The error on the tests is:\nMessage: System.IO.FileNotFoundException : \nCould not load file or assembly 'Unity.Container, Version=5.0.0.0, Culture=neutral, \nPublicKeyToken=489b6accfaf20ef0'. The system cannot find the file specified.\nSince the tests should be using the netstandard version the same as an iOS or Android project this leaves me a little concerned. You can see my branch here: https://github.com/dansiegel/Prism/tree/unity. @ENikS I agree it would be far easier to just have a single package dependency. But ultimately if a package consumer cannot reference the Unity Package and have it work, it becomes useless. I also tried 5.0.2 and had the same resulting error. I'm all for the way you have it now, if you can make it work. Ultimately between having to update namespaces and then having to deal with different packages because the dll's aren't actually getting referenced correctly, as Brian said that would be very painful for a lot of developers.. @1valdis Prism already has updated to Unity 5. Please update your project to the Prism 7 preview for Unity 5 support.. can you please provide a sample that reproduces the issue. AppVeyor appears to be broken. This builds without issue locally and on VSTS.. This will only affect Prism.Ninject.Forms users. It will force those apps to use netstandard 2.0 which as I understand will mean UWP Forms apps would need to target the FCU. The alternative is to target the 4.0 alpha which hasn't been updated in 14 months. This will allow us to at least target a stable release of Ninject.. @OpticNectar yes it's still handled though I suggest using IPageLifecycleAware instead. @OpticNectar IPageLifecycleAware hooks into the Page.OnAppearing and Page.OnDisappearing events, and works across the entire app. It's ultimately better than IActiveAware because it will trigger after OnNavigatingTo which means that you will always be assured that you can execute that code after the ViewModel has initialized with OnNavigatingTo, where IActiveAware.IsActive is set to true on your initial view before OnNavigatingTo has been called.. thanks for the catch. not so sure that this will be necessary. Obviously the change in ownership in CSL and Unity has resulted in major breaking changes that I just don't see as a common occurrence. We could also be introducing problems for people consuming other packages. Lastly, with the new templates and anyone who migrates to the newer project structure they won't see dependencies listed in the NuGet Manager like the older project style. . What you\u2019re describing is vague, however I believe your issue has already been resolved in Prism 7. Please update to the latest preview.. @opcodewriter the new SDK Style project structure that was introduced with VS 2017 / .NET Standard eliminates the packages folder in your solution directory. There's actually a number of advantages to this. \n\nIt uses the NuGet cache so you don't have 100 copies of the same NuGet floating around\nIt allows non-traditional references. For example say you have C:Repos with ProjectA and ProjectB cloned in your Repos directory. You can then reference projects in ProjectA from ProjectB without having to first open ProjectA and restore the NuGet's\nThe new style allows you to reference a top level package and it will automatically bring in all of the dependencies. This eliminates having to manage 10000 packages (particularly with all of the System.Foo references in .NET Standard. Xamarin Forms is there as well so that you can manage that in addition to Prism.Unity.Forms... that said it's not actually needed. And CommonServiceLocator is no longer used by Unity.... You could simply reference System.Json. Quick update on this. I have implemented StructureMap for Prism Forms, however with initial testing I am seeing a PlatformNotSupported Exception thrown by StructureMap's dependency on System.Reflection.Emit.Lightweight. I'll have to dive into this more, however it may not be feasible at this time.. Suffice it to say, the official Prism template addin update and QuickStart templates will be available in VSMac at the same time and for the same blocking reason. . right now the goal will be to migrate what we can from Prism.WPF & Prism.Forms to Prism.Core so that it can be shared by all of the Platforms. . @naweed thanks for bringing this to our attention and for providing a sample. . @toumir thanks for reporting this. Now that you mention this I\u2019m remembering that we had to fix this issue in 6.3. I\u2019ll get this fixed shortly.. this has been fixed and is now in our MyGet feed. This is a duplicate of #1304 and has been resolved in #1305. Please use the latest CI package on MyGet.. this is a duplicate of #1304. You can use the package in the CI feed for the fix to this issue.. I would tend to imagine that if you update your Navigation calls to no longer specify useModalNavigation or animated then you wouldn't be referencing INavigationServiceExtensions and would not have a problem with Moq..... Personally I don't mock INavigationService, and I test by observation:\n\n```cs\nvar app = CreateApp();\nAssert.IsType(app.MainPage.BindingContext);\nvar vm = (MainPageViewModel)app.MainPage.BindingContext;\n// Do Stuff\nvm.NavigateCommand.Execute()\nAssert.IsType(PageUtilities.GetCurrentPage(app.MainPage));\n```\nA couple of notes here... I do tend to add a Mock App based on my actual app. As an example one of the things I typically add is a specific logger for tests so I get richer output in my tests.\n```cs\npublic class XunitLogger : ILoggerFacade\n{\n    private ITestOutputHelper _testOutputHelper { get; }\npublic XunitLogger(ITestOutputHelper testOutputHelper) =>\n    _testOutputHelper = testOutputHelper;\n\npublic void Log(string message, Category category, Priority priority) =>\n    _testOutputHelper.WriteLine($\"{category} - {priority}: {message}\");\n\n}\npublic class XunitPlatformInitializer : IPlatformInitializer\n{\n    private ITestOutputHelper _testOutputHelper { get; }\npublic XunitPlatformInitializer(ITestOutputHelper testOutputHelper) =>\n    _testOutputHelper = testOutputHelper;\n\npublic void RegisterTypes(IContainerRegistry containerRegistry) =>\n    containerRegistry.RegisterInstance(_testOutputHelper);\n\n}\npublic class AppMock : App\n{\n    public AppMock(IPlatformInitializer platformInitializer) : base(platformInitializer) { }\nprotected override void RegisterTypes(IContainerRegistry containerRegistry)\n{\n    // Call the base implementation first so all services are registered.\n    // Then new registrations can replace existing as needed.\n    base.RegisterTypes(containerRegistry);\n    containerRegistry.Register<ILoggerFacade, XunitLogger>();\n}\n\n}\n```\nPutting it all together looks something like:\n```cs\npublic class SomeFixture : IDisposable\n{\n    private ITestOutputHelper _testOutputHelper { get; }\npublic SomeFixture(ITestOutputHelper testOutputHelper)\n{\n    _testOutputHelper = testOutputHelper;\n    Xamarin.Forms.Mocks.MockForms.Init();\n}\n\nprivate AppMock CreateApp()\n{\n    var initializer = new XunitPlatformInitializer(_testOutputHelper);\n    return new AppMock(initializer);\n}\n\n[Fact]\npublic void DoesNavigateToViewA()\n{\n    var app = CreateApp();\n    Assert.IsType<MainPageViewModel>(app.MainPage.BindingContext);\n    var vm = (MainPageViewModel)app.MainPage.BindingContext;\n\n    // Do Stuff\n    vm.NavigateCommand.Execute()\n\n    Assert.IsType<ViewA>(PageUtilities.GetCurrentPage(app.MainPage));\n}\n\npublic void Dispose()\n{\n     PageNavigationRegistry.ClearRegistrationCache();\n}\n\n}\n``\n. This is not a Prism issue, PCL has been generally deprecated. Questions like this should be asked on StackOverflow.  . There is no problem. It is a free instance on Heroku, which limits how much traffic we can get each month. It resets at the beginning of each month. . Any difference between projects in the debug output is an accidental artifact from before we consolidated common properties to theDirectory.build.props. That said be sure you have added our MyGet feed to your symbols sources in Visual Studio for debugging. Our MyGet feed has the symbols packages which includes the full source that was compiled.. @dazinator theApp.Containeris actually a Prism ContainerExtension. You will need to callGetContainerto get the AutofacIContainerwhich will then allow you to callBeginLifetimeScope`. If this doesn't work for you because you cannot reset the Container instance then you would need to implement a custom IAutofacContainerExtension, you can see how the base extension is here. NavigationPages should work fine in DryIoc in Prism 7... I can only make guesses here as you haven't included a repo, but from your screenshots I don't see anywhere, where NavigationPage has been registered for Navigation.. Please ask questions on StackOverflow. @mfe- INavigationService has already been moved to Prism.Core as part of our unification efforts. At this time we are specifically excluding it from the net45 binary so it will not be available in WPF. . @Dresel remember that CarouselPage and TabbedPage are both MultiPage's which as the name would suggest are containers for other pages... the navigation from one to the other is outside of the context of the NavigationService. In Prism 7 we added support for calling OnNavigatingTo on all of the children of these Page types so that those children could receive the initialization context that would be passed in the NavigationParameters to the Parent.. Due to the way that we resolve INavigationService there should be two registrations for INavigationService, one named, and one generic.\nIt is also critical when replacing INavigationService with a custom implementation that the unnamed version be registered before the named registration. Failure to do so will wipe out named registration. @dadhi seems like this might be a bug? \n```cs\npublic void Register(Type from, Type to, string name)\n{\n    Container.Register(from, to,\n                       made: Made.Of(FactoryMethod.ConstructorWithResolvableArguments),\n                       ifAlreadyRegistered: IfAlreadyRegistered.Replace,\n                       serviceKey: name);\n}\npublic void Register(Type from, Type to)\n{\n    Container.Register(from, to,\n                       made: Made.Of(FactoryMethod.ConstructorWithResolvableArguments),\n                       ifAlreadyRegistered: IfAlreadyRegistered.Replace);\n}\n```. @ENikS we regularly do updates prior to shipping releases... . @dannypease please provide an actual repro app. Thanks for catching the Typo!. This is not a bug, nor does it have anything to do with Prism but rather how Xamarin Forms works. You can see a sample for getting the HamburgerMenu in our samples repo.. replaced by #1476 and future PR's. @ali-h2010 I believe you're thinking of Modal in a Web context which is all wrong for Xamarin Forms. Prism cannot and will not directly support 3rd part libraries like Rg.Plugins.Popup... however it is supported with Prism.Plugin.Popups. on GitHub... all you need to do is add the following to you RegisterTypes\ncs\ncontainerRegistry.RegisterPopupNavigationService();. @vhugogarcia the Prism team does this in our spare time. If you cannot provide a simple app that reproduces the error, we simply do not have the capacity to help you further with this issue. . Intellisense comes from IDE tooling that the Prism team has no control over... To be honest the best XAML intellisense in Xamarin Forms I've seen comes from MFractor in VS Mac. If you choose to go that route I also suggest installing the Prism MFractor Config via NuGet which tailors MFractor for Prism conventions.. Please ask your questions on StackOverflow. GitHub issues are meant for feature requests and bug reports. . Your sample page doesn't seem to reference the ViewModel. Yes you are correct... sorry I missed that. I would suggest you take a look at the docs for the EventToCommandBehavior. You may want to try using a converter.. This is actually the exact opposite of how the NavigationService currently works. Remember you're registering the View for Navigation, and the ViewModel is being located for a specified View. You could certainly implement this yourself as long as you have the mappings you need. \nThe PageNavigationService already has a factory method that produces the page for the segment name... i.e. ViewA/ViewB it would produce ViewA and later ViewB. I'm sure you could achieve what you're looking for by overriding CreatePage if you really had to, though I have a feeling there is probably a better way to accomplish your needs. Can you provide a little more information on why you feel this is needed?\n```cs\nnavigationService.Navigate(\"ViewA\");\n// In the NavigationService\nprotected override Page CreatePage(string segmentName)\n{\n    var vmType = SomeLookup(segmentName);\n    return pageFactory.CreatePage(vmType);\n} \n```\n. @ChaseFlorell this is a fantastic idea... @brianlagunas I already have an idea that would ensure we're using a single instance of INavigationService... actually shouldn't be terribly difficult to do with a XAML extension.. Although this is more verbose, I still think this would be good to have as an option:\nxml\n<MasterDetailPage x:Name=\"this\">\n  <MasterDetailPage.Master>\n    <ContentPage>\n      <Button Text=\"ViewA\" Command=\"{prism:NavigtateTo ViewA,Page={x:Reference this}}\" />\n    </ContentPage>\n  </MasterDetailPage.Master>\n</MasterDetailPage>\nThe behavior would be:\ncs\nvar page = GetPage(); // ContentPage from example above\nif(Page != null)\n{\n    GetNavigationService(Page);\n}\nelse if(Navigation.GetParent(page) != null)\n{\n    GetNavigationService(Navigation.GetParent(page));\n}\nelse\n{\n    GetNavigationService(page);\n}. @ChaseFlorell I was operating under the assumption that you were getting the ContentPage and not the MDP... that said, I would be curious what you get if your Master is a NavigationPage with a ContentPage.\nUltimately I would believe having a Page property on the XAML Extension would be good for the edge cases none of us are thinking of. It's a lot easier IMO to build it in from the start. You could think of it like the Binding Source property... most of the time you never set it, and it picks it up automatically, but in those scenarios where you need it you have it.. Merged. @DJKampouris this is actually related to the compiler namespace rules. You can read more about how to work around this in the Microsoft docs \nhttps://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/namespaces/how-to-use-the-global-namespace-alias. Thanks @ghuntley we\u2019ve actually been doing that for quite a while. Also was a tip and in the sample I provided in my blog about multitargeting and converting to the SDK style projects.   https://github.com/PrismLibrary/Prism/blob/master/Source/Directory.Build.props#L6. @totht91 I totally agree with you that the docs need to be updated. The good news is that they are also open source and we accept PR's. Please feel free to fish away from the release notes and send us a PR \ud83d\udc4d \nhttps://github.com/PrismLibrary/Prism-Documentation. You may have noticed that I've added the help wanted label to this issue. There is only so much time in my day. If there is an issue you feel needs updating in our docs, please send us a PR. We do have a CI/CD pipeline setup for this so all updates in our Documentation repo are reflected within a few minutes in the docs. . WPF via Xamarin Forms is not supported with Prism at this time. As part of our ongoing API Alignment efforts, INavigationService was moved from Prism.Forms to Prism.Core, but it is not something that makes sense for WPF like it does UWP and Forms. For this reason it is not available in the net45 target used for WPF apps.. Please ask questions on StackOverflow. GitHub issues are for reporting bugs and filing feature requests. . It works just fine with 3.0 and we\u2019ll have support for 3.1 soon. . @taxinvoice GitHub issues are meant for bugs and enhancement requests. Please ask questions either on StackOverflow or on the Prism Community Slack.. If you\u2019ve replicated the issue without Prism then it\u2019s a Xamarin Forms issue. . @akhileshzimozi this is a closed issue... if you have a new legitimate issue you'll need to open that appropriately. Remember if you believe you have encountered a bug you must provide an actual sample that reproduces the issue you are reporting otherwise we will close your issue. Debug Output is not acceptable. If you have a question because you aren't sure how to do something and it isn't covered in the docs, then you should ask that on StackOverflow with the tag Prism.. @AwsomeCode in your AndroidInitializer can you try adding:\ncs\ncontainerRegistry.RegisterInstance(Xamarin.Forms.Forms.Context);\nXamarin.Forms deprecated their parameterless constructor and introduced one that looks for the Context... . Good to hear... I'm going to leave this open as this actually exposes an issue with the API from Xamarin.Forms. Also since Xamarin.Forms.Forms.Context is obsolete, I would suggest passing in your MainActivity to your AndroidInitializer so you have:\n```cs\npublic class AndroidInitializer : IPlatformInitializer\n{\n    private Context Context { get; }\npublic AndroidInitializer(Context context) => Context = context;\n\npublic void RegisterTypes(IContainerRegistry containerRegistry)\n{\n    containerRegistry.RegisterInstance(Context);\n}\n\n}\n```. Finally got a chance to test this now that I got my IDE working again... It appears that there is a second ResolveUsing that was added and is only used AFAIK by Android. Long term we'll have to determine how we're going to support this, but you could also add this to your App class and remove the platform registration of the MainActivity. This will make sure that you are using the instance of the Context that Forms intended.\n```cs\nprotected override void SetDependencyResolver(IContainerProvider containerProvider)\n{\n    base.SetDependencyResolver(containerProvider);\n    DependencyResolver.ResolveUsing((t, d) => {\n        ParameterOverrides overrides = null;\n    if(dependencies.Any())\n    {\n        if(Device.RuntimePlatform == Device.Android)\n        {\n            overrides = new ParameterOverrides\n            {\n                { \"context\", dependencies.FirstOrDefault() }\n            };            \n                }\n        else\n        {\n            throw new NotSupportedException(\"Dependencies are only supported on Android\");\n        }\n    }\nreturn containerProvider.GetContainer().Resolve(type, overrides);\n});\n\n}\n```. @xalikoutis you're getting the Container Exception with FFImageLoading when you've registered the Context on Android?. @xalikoutis the issue you're running into has to do with the fact that @luberda-molinet has 4 constructors in the Renderer which only serves to confuse a DI Container. Typical resolution for a DI Container occurs with the first constructor that has the most arguments. The Default constructor thus gets ignored, and the constructor that only takes the Android.Content.Context is ignored. Since the remaining two constructors each have two arguments, the container will try to create an instance with the first of the two remaining.\nThe error you're seeing comes from the container trying to resolve your renderer with:\ncs\npublic CachedImageRenderer(IntPtr javaReference, JniHandleOwnership transfer) : this()\n{\n}\nInstead of what it would for a normal Xamarin.Forms Android Renderer:\ncs\npublic CachedImageRenderer(Context context) : base(context)\n{\n}\nFor dev's using DryIoc: \nBoth the initial issue and FFImageLoading issue should actually be fixed as of #1463. \nFor anyone using another container: \nNormal Xamarin.Forms Renderers should start working once #1469 is merged. The issue with FFImageLoading would require a either that the renderers are updated to only have a single constructor as intended by Xamarin.Forms that takes the Context, otherwise you will have to specify which constructor to use for such a renderer and essentially teach your container how to appropriately construct the Renderer. . @xalikoutis we do have a MyGet feed that already has it bundled... keep in mind you can override SetDependencyResolver in your App to prevent the DependencyResolver from being set in the first place.\ncs\nprotected override void SetDependencyResolver(IContainerProvider containerProvider)\n{\n    // Do Nothing....\n}. please ask questions on StackOverflow. any project created with the Template Pack shouldn't have an issue updating to 3.0... not sure exactly when but I'm sure we'll have an updated Template Pack out in the near future.. @scxp thanks for the feedback, I'll take some of that into consideration as I update the templates\n\nIn both files, RegisterTypes is expecting a parameter named container even though IPlatformInitializer is expecting containerRegistry. (Observe that App.xaml.cs is also using containerRegistry)\n\nRealistically it can be named anything you want. I agree it should be updated to containerRegistry, but don't mistake that for it being a requirement, it's not... it's only a requirement that the type is IContainerRegistry, otherwise you wouldn't have implemented the interface. The name containerRegistry is more of a convention.\n\nIn MainActivity.cs, Prism is setting Android icon to @mipmap/ic_launcher, but XF sets it to @mipmap/icon\n\nThat is because the icon filename is ic_launcher which is actually the correct naming (see the Android Guidelines. For both Android and iOS you'll find that the icons were generated from https://makeappicon.com/ which is correctly generating icons for iOS and Android... and Assets.xcassets is the newer way of bundling icons and the way Apple wants them bundled... AFAIK Xamarin has never updated their templates to use it. However, if you were to use Xcode this is what you're going to get rather than a Resources folder to dump images into. \n\nI see that when a new project is created, Dryloc is selected by default. Does that mean you encourage people to use it for XF instead of the other ones?\n\nOfficially we do not suggest that you use any specific container. DryIoc does however have the best performance according to the benchmarks which is one of the reasons why I personally use it as my go to container. The fact that Unity had no maintainers for about 2 years had a lot to do with us to changing the default. Really the only guidance I would officially give you is that if you are using Modules (which I suggest you do) then you do not want to use Autofac as Modularity requires a mutable container which Autofac is not.\n. The latest update is available now for Visual Studio Mac... an update for Visual Studio 2017 will likely come out some time in July... sorry I cannot be more specific.. @lewcianci I appreciate the kind words. The templates are currently closed source. There was never really any community involvement on them unfortunately and particularly with the IDE integration that we now have in VS Mac (which I will be adding to VS 2017) there is some stuff in there that we prefer to keep closed source for the foreseeable future.\nAs you pointed out it is an incredible amount of work maintaining everything about Prism + Day Jobs + Family + some pretending to have a life outside of all of that.... We really appreciate any support members of the community are able to provide whether it's a personal contribution as a Prism Patron, or if your company is willing to make a more substantial donation, it really does help us out.\nAs for your goal of generating a web app why don't you ping me on Twitter and we can set up some time to do a conference call. Technically speaking all of our Templates are the exact same on Mac and PC as we've migrated to the new dotnet templates. I used to ship the Quick Start Templates via NuGet and could start doing that again if I see some interest in people who want to use the CLI to generate projects.. @TedMobile \n\nIs there a chance of slightly more frequent update?\n\nWe generally try to get new updates out when there is something significant for us to update. This could be new features, bug fixes, or Prism GA releases. While I consider Prism 7.1 to be stable to use in Production for Xamarin.Forms apps, I still believe that targeting the Preview should be an opt-in feature. It's possible in the future that we may enable that as an option in the QuickStart templates but for now it'll have to be on the backlog\n\nAny ideas at this stage when then Windows template will be released?\n\nI assume you're referring to the QuickStart Templates and tooling we have for VS Mac. I'll actually be starting work on that this month... We'll likely have some previews starting next month for Platinum Patrons. If you're referring to UWP Templates that won't come until after we've dealt with PR #1513 \n@chrisgate I'll look at doing some refactoring to start generating a usable artifact I can publish. The problem is that in order to make the CI a bit easier I stopped versioning the NuGet, so I'll have to figure out a Versioning schema and then I think we can make all of the Prism Templates available.\n. @vulcanlee the error would seem to be related to the issue that @jbachelor mentioned. Make sure that you have Android 8.1 SDK installed.. GTK absolutely can be... WPF through Xamarin Forms is flat out not supported by Prism at this time.. 1) You haven't provided much information beyond you want to code some application and you want to use Prism. Keep in mind Ninject is only available for WPF.\n2) Questions should be asked on StackOverflow. This is not a Prism issue but rather an issue with whatever container you want to use. Please check the docs for Unity or ask your question on StackOverflow. this is a duplicate of #1443.. again questions belong on StackOverflow. Update your question there so someone can help you.. This is absolutely a huge bug in 7.0. for some reason OnNavigatedTo is being called after OnNavigatingTo and both before and after OnNavigatedFrom on iOS... while the second part with OnNavigatedFrom/To doesn't get called on Android. Good news is that it is already fixed, and works as expected in 7.1.. sorry was looking at this on my phone earlier... thought that was the WPF one... LGTM. As discussed offline. There are a number of issues here that I'm not sure we could ever resolve to make this a useful API.\n\nThe goal of the API is to reduce initialization time \nInitialization is greatly slowed by inflating the Renderer which cannot be done ahead of time\nInitialization is also greatly slowed by Binding Heavy Pages where the Binding Engine bogs down.\nInitialization requires particularly on Binding Heavy Pages tends to require an initialization context that is typically passed via NavigationParameters\n\nSince a Navigation call goes through the following flow:\n\nCanNavigate (Source)\nOnNavigatingTo (Destination)\nOnNavigatedFrom (Source)\nONNavigatedTo (Destination)\n\nThis scenario becomes further complicated as it would be expected that I may save my context such on ViewA, pass it to ViewB. This solves the initialization issue, except for the fact that when I want to invoke _navigationService.Navigate I may have changed state and will now bypass CanNavigate and may be in a state where CanNavigate returns false. \nAs another issue, I don't believe that we could really support Deep Linking or if we did it would be under limited scenarios.\nBottom line I think this is likely to introduce more issues than it solves. If I'm missing something here and you want to continue the conversation I'm happy to re-evaluate and reopen the issue if it makes sense.. As an example here say you have ViewA with a List of Monkeys. You call Prepare for ViewB which shows the details for a specific Monkey. The problem is that you can't actually prepare ViewB for the Monkey until you've selected the monkey in the list that you want to view the details of. Which means that you don' really gain anything in any way. . GitHub issues are reserved for issues. Please ask all questions on StackOverflow or any of the appropriate Slack channels.. Please try deleting the output folders (obj/bin), restore and build. Also I am closing this as this has no sample reproducing the issue. If you are able to provide a sample I will be happy to take a look and re-evaluate further.. @dgxhubbard as the Issue template specifies, you must provide information in an issue including a sample that reproduces the issue you are experiencing. You do not need to provide your entire app, just a sample that demonstrates the specific issue you are encountering.. @A71014073 please include a reproduction link. I've confirmed this problem, and it seems to be limited to Autofac, not sure why this hasn't failed in our tests....\ncc: @brianlagunas \n. Then you want DryIoc. Thanks for the PR, unfortunately we cannot merge this currently. You may notice the native UWP packages are not being published even as part of our CI/CD. We have been working with @JerryNixon on what we expect will replace our UWP implementation. I know that\u2019s still vague, and I do hope to have more information soon. . 1. Your sample doesn't even build\n1. Your sample is not using a PrismApplication\n1. Your sample has both Views & ViewModels in the root namespace without setting ViewModelLocationProvider.SetDefaultViewModelFactory which we do in PrismApplication{Base} in ConfigureViewModelLocator \n1. You can also bypass convention entirely when using the registration methods that take both the View and ViewModel. This means you could have Contoso.StuffToLookAt.ViewA with a ViewModel Foo.BarViewModel such as\ncs\ncontainerRegistry.RegisterForNavigation<ViewA, BarViewModel>();\nAlso worth noting here that the ViewModelLocator is NOT an Opt-In feature, it is specifically Opt-Out.  This means that you are not required to set the attached property on any page handled by the NavigationService, as it will set it to true if the property was not explicitly set to false. You only need to explicitly set the value to true in the event that you are bypassing Prism Navigation altogether such as in your sample.. Completely understandable that you want to be able to unit test your ViewModels with a given NavigationMode. There are times in when designing an API that certain internal methods have legitimate edge cases for being made public. The issue is that it is an edge case and not wise to make fully public. In those times you will find these sorts of methods hidden from Intellisense as you noted above.\nWhile I realize this might sound weird, Unit Testing often falls into the edge case category. I'm not just saying that because so few people actually test their code. There are a number of times such as the API you referenced in this issue, where the API is designed for Consumption only. Because it is for consumption only, it would be a terrible idea to provide a way to manipulate the given API. \nA perfect example of this issue is with an event handler. You can only invoke an event from the class that it's declared in. So what do you do in the case of say Xamarin.Forms where you have a ButtonClicked event in the Button class in the Xamarin.Forms.Core assembly but need to invoke that event from a Renderer in another class in a whole other assembly, but at the same time, it's not mean for you to go around calling some method in your code? \nThe answer is to have a method and set the EditorBrowsableState to Never. This allows edge cases to still perform the function that they need to. This means you still have a fully functional API for Unit Tests, it just requires a little more work to know that the API does actually exist and when to use it. \nYour issue is well taken though, and I would say that rather than changing the API, we do need to ensure that things like this are documented. There has certainly been a call for quite a while about testing.. Closing this as by design. We will make sure to update docs to better assist developers in understanding how to work with the API for Testing.. This is fixed in 2.2.0.199. @masgarifor2 closing this as you haven't provided adequate information or a basic app that reproduces the issue.. Closing this for now. PR's should be rebased against master at the time of the PR. This appears to have a lot of bloat beyond anything that should be needed, and frankly it doesn't appear to be address any active issue. . Love the enthusiasm. Please dm me on Slack or Twitter. . Thanks for reporting the issue. I actually just fixed this in the templates this morning and it will be in the next release. To fix the issue you can add the following to the ElementStyling XAML\nxml\n<ResourceDictionary.MergedDictionaries>\n  <theming:ColorPalette />\n</ResourceDictionary.MergedDictionaries>. @pablogupi see https://github.com/dansiegel/Mobile.BuildTools/issues/33. closing as a dup of #1488 . Closing as there is no sample app to demonstrate the issue.. This issue has been fixed and will be in the next release.. It appears the recent updates to the way we pack Prism.Wpf resulted in System.Windows.Interactivity being stripped out. This should be getting packed. I'll look into this and we should have a fix in the CI feed soon.. Nope nothing more you can do. Live Player is great for what it\u2019s really meant for which is just learning about Hello World in Xamarin. The messaging was way off as a prototyping tool which it will never be useful for. I highly suggest you check out Live Reload or LiveXaml. They are both fantastic tools for prototyping and work well with Prism. I use them both personally. . You have provided no version information, and no reproduction. On top of those two issues is the fact that we have no intent of shipping any further MEF packages as we will no longer be supporting anything that is not a real DI container. I might add for those who like Autofac and SimpleInjector we are also very leery of continuing support for non-mutable containers as they provide very bad user experiences for our community. . This issue is caused by your changing major versions. For now you'll need to roll back to 2.X, we'll be updating to DryIoc 3 soon. @ENikS I should add here, just like Unity had to make breaking changes (which broke EVERY single Prism app across all platforms using Unity) to move the framework forward, Prism also must make changes from time to time to move the framework forward. I'm sure as a the maintainer for Unity you can understand these sorts of breaking changes aren't made lightly. In fact we have often held back on changes because we feel it would be too painful for WPF developers. . > Let me make one thing clear, I am not your enemy here. I like Prism and I use it everywhere I can and because of that I opened this issue. I would like to keep using it...\n@ENikS nobody is saying you're an enemy here. But certainly there is a huge irony that the person responsible for breaking so many Prism apps using Unity, is the one complaining about an API change in Prism that was made in large part because of the breaking changes that you did. \n\nThink about economics of this change:\n- Every single module in the world needs to be manually changed (however simple it might be)\n- Every single change has to be accompanied with unit tests amended\n- Every single module has to be regression tested\n\nI would say you're really making a bigger issue of this than it ought to be. All you really need is to add two lines of code to your modules and they'll work just fine.\n```cs\npublic class LegacyModule : IModule\n{\n    public void OnInitialized(IContainerProvider containerProvider){ }\npublic void Initialize(IContainerRegistry containerRegistry) => Initialize();\n\n}\n```\n\nOriginal IModule was brilliant in its simplicity and robustness. It was completely agnostic of container, platform, etc.\n\nThe \"Original\" IModule was overly simply, and not very robust at all. IModule was hardly agnostic of a container, it was closer to a straight up Atheist denying the very existence of a Container. The resulting pattern meant that in order to register anything, the Module was explicitly tied to a container. By contrast the updated IModule with the IoC abstractions is more of an Omnist, believing it should be able to work with any container, except Autofac because they're determined to be immutable. In addition to that the new IModule helps developers enforce a pattern of Register / Do Stuff rather than putting all of the code they need into a single method (which let's be honest most people were doing). . @ENikS I am hardly focusing solely on you complaining about the change. I do not think you fully appreciate the irony though.\nThe snippet below is all you need to make your module v7 compatible. If your company requires something more, as @brianlagunas mentioned before this is an Open Source library, you are more than welcome to fork or submit a PR. If your bosses feel it would be too expensive to add two lines of code, they are also welcome to pay for the backwards compatibility to be added for them.. Check your csproj... VSMac has been adding references that screw up XAML pages. If you see ANY references to your pages and you're using a SDK style project (like the core project from the QuickStart template), remove them and it should start working. This is really on the VS Mac team to fix.. this is still TBD.... @brianlagunas and I are still determining how the feature should work and whether we should go with something simple like this, or more complex where we introduce Regions to Xamarin Forms like we have in WPF.. @baywolf-studios Sorry for the delay. Any platform specific issue is absolutely a Xamarin Forms issue not Prism. . As noted this is not a Prism issue.. @lewcianci your issue is dependency/tooling related not Prism. Thanks for the PR. This is by design. We do not support Xamarin Forms apps using the net45 targets... Or in other words we flat out do not support WPF apps using Xamarin Forms. If you want a WPF app do yourself a favor and just build a WPF app.. @paulovila it's not abandoned. As @bartlannoeye mentioned this is something we are working on in whatever spare can we can carve out. Believe me I would like to be able to get this into the next public preview. It still requires a lot of work before I can update the PR.. Closing as this is not a Prism issue but rather a Xamarin.Forms issue. . @rredoh Prism has literally 0 code that would affect appearances. I do not have the time to create a repo for you that will show you the issue comes from Xamarin.Forms. I have a feeling you'll find that a nested Tabbed Pages break virtualization and just aren't supported, but your best bet is to open an issue with the Xamarin.Forms team.. @rredoh you absolutely should not be doing that and it actually will not give you a valid instance of the NavigationService. Remember if you're navigating to \"SomeTabbedPage\", then the NavigationService knows it needs to check to see if SomeTabbedPage should autowire the ViewModel... the individual pages you're adding as tabs though will need to specifically set the Autowire property... . The Navigation namespace in Prism.Core is specifically excluded at this time from Full Framework targets i.e. WPF/GTK#. We do not currently have any plans of making this available for WPF.. Please include a sample app that demonstrates the issue. . If you're trying to install for a UWP target please pay attention to the proper packages for UWP. .Net Core 3.0 is still in early enough preview that we haven't had any serious discussions roadmap wise. I know there is still some changes the @brianlagunas is planning for WPF, but I can't say where that lands for .Net Core 3.0. I'll leave this open for now until we can speak more to this issue.. @AwsomeCode you really should look again. To be clear Microsoft does NOT support WPF for Xamarin Forms, as noted in their Wiki. The team may contribute here and there but they don\u2019t support it. There is a clear distinction between the two. . @ngvanmy you have references that do not work together. Prism.Plugin.Popups 2.1 and the last 2.0 preview are targeting Prism 7.1. The . We currently have no plan of shipping Autofac for Prism.Windows, and are considering dropping support for it altogether. It really does have a terrible API, it's not very performant, and their decision to become an immutable container makes it incompatible with Prism Modularity.. > Then why you published Prism.Autofac for WPF?\nAs you'll see from the Package Notices in the ReadMe, we have planned to drop support for Autofac following the 7.1 release. Should the maintainers of Autofac decide that they want to migrate back towards being a mutable container we will happily bring it back as a supported container.\n\nProbably Prism Modularity shouldn't be part of Core\n\nActually we feel that Prism's ability to help developers build Modular apps is a Core compentency. It is one of the reasons why developers love Prism, and why we've decided to unify the API, giving Xamarin.Forms developers the same rich features WPF developers have enjoyed, and why we've brought Modularity to the upcoming UWP preview.\n\nWould you consider in your making Prism.Core compatible with platform Uno\n\nPrism.Core is shipped with net45, uwp, netstandard1.0 and netstandard2.0 binaries. I haven't dealt with Uno, but I can't imagine why you would be prevented from using Prism.Core. this really isn't needed in the FrameFacade. If you need to debug that a ViewModel was found it's easy enough to add to the ViewModel. . It would seem this is actually likely due to the use of XamlC. Effectively what you end up with is:\ncs\nvar partialView = new PartialView();\nvar page = new Page\n{\n    Content = partialView\n};\nThe problem with this is that when the PartialView is constructed the Command is also set in your Button. This is a problem since we currently are trying to retrieve the ParentPage before there is one set. This needs to be refactored so that we grab the parent object and do no further analysis of it until we are ready to get the Parent Page when the Command is executing.. will be fixed in the next release. initialize it in the ctor. Building on Mac is plain NOT Supported. While I love VS Mac there are simply too many limitations for us to support building from source. There are a variety of reasons for this including that we are multi-targeting which the IDE does not support though building from the cli does. Also because we have UWP targets that do not exist. \nAs for the not obvious comment. This is a preferred MSBuild way of handling these issues though most developers are not used to working with these advanced concepts. \nClosing as this works as expected. . As I originally answered, we specifically exclude the Navigation namespace in Prism.Core from the net45 target framework. This means that any platform implemented with the \"full framework\" is not going to work. On the Windows side of things that means WPF, which is intentional on our part because WPF is fundamentally different in the way that you navigate and at this time we feel that you should simply build a native WPF app.\nOn the somebody wasn't thinking about what they were doing side of things is GTK#. Frankly the GTK# head is what I've used for the VS Mac extension we are shipping. Let me be the first to say that as a \"Community Supported\" Xamarin Forms backend, it's not production quality. The WPF Backend fits into the same category btw. GTK# suffers from another insane problem here as it requires Mono, and uses a full framework TFM which can lead to problems when you have dependencies which actually call into Windows API's that simply do not exist or are not implemented in Mono.\nTo clarify for @lordasgart:\n\nBut this also affects GTK projects (and macOS Cocoa apps also I assume).\n\nThe only affected Xamarin.Forms backends are WPF (intentional), and GTK. iOS, Android, UWP, macOS, Tizen, and even Ooui all work with Prism.. I don't really see any value in this. You're dropping support for 15063 and now cross compiling three versions of UWP. \nThe only reason why we are cross compiling multiple UWP versions is that we were supporting back to 15063 and we were supporting a 16299+ only feature in the StartArgs. If we're not implementing a specific version feature there is no reason to compile specifically for it as your app can target a newer version and still use what we've provided.\n. @DaveSenn consider that Prism has to register a number of base implementations such as an effectively null implementation of ILoggerFacade. If we simply added a registration rather than replacing it, you would not get your own implementation which would be a poor design choice. You do have access to the container through the GetContainer() extension method, or as @brianlagunas suggested you could create your own rules, but know you do so at your own risk.. @Umar3x as was noted in the issue template, questions should be asked on StackOverflow. That said @totht91 has answered your question, if you require further clarification please ask it on StackOverflow.. Please open questions / How To's in Stack Overflow. GitHub Issues should only be opened to report an actual bug which must contain a sample reproducing the reported bug, or to request a new feature.. This is by design in Prism 7. While Prism 6 supported this behavior, this was always an anti-pattern and very limiting as it meant all of your platform types had to use a default constructor and could not benefit from services registered with your container. \nTo use Platform Specific Implementations/Types please use IPlatformInitializer, you can see a sample in our Sandbox app.. @james1301 it had actually previously been removed from the Navigation Menu, it appears you discovered a link embedded in one of the pages, that has since been removed.. We've made the deliberate decision to only target back to 15063. While I appreciate this may not work for some people, there is only so much that a small team can commit itself to support for free, particularly when there is little to no demand. Unless/until there is a change in which we see that the community truly needs specific support for versions prior to 15063 we won't be making this change at this time.. the container abstractions is purposely kept simple. You can call GetContainer() to get the specific container you are using to perform more complex registrations such as when you need some sort of factory.. @stesvis questions should be asked on Stack Overflow. the only way that could happen is if you've somehow tried loading in a way that dismisses the Directory.build.props in the Source directory right next to all of the solution files... like if you clicked on Prism.Wpf directly (which would cause VS to generate a new solution file in the project folder). If you\u2019re trying to do something custom like that you can just add your own Directory.build.props that defines IS_PREVIEW and IS_RELEASE properties... Great catch actually... Thanks for the PR. @hnabbasi to answer your question:\n\ndoes the RegisterMany<>() register all named and unnamed registrations?\n\nYes... so given that you have something like:\n```cs\npublic interface IFoo { }\npublic interface IBar { }\npublic class A : IFoo, IBar { }\npublic class B : IBar { }\n```\nWith the current API you might do something like:\ncs\ncontainerRegistry.RegisterSingleton<IFoo, A>();\ncontainerRegistry.RegisterSingleton<IBar, A>();\ncontainerRegistry.RegisterSingleton<IBar, B>(\"foo\");\nIf we compare the instances you'll see the following:\ncs\nobject.ReferenceEquals(c.Resolve<IFoo>(), c.Resolve<IBar>()); // false\nobject.ReferenceEquals(c.Resolve<IFoo>(), c.Resolve<IFoo>()); // true\nobject.ReferenceEquals(c.Resolve<IBar>(), c.Resolve<IBar>()); // true\nobject.ReferenceEquals(c.Resolve<IBar>(), c.Resolve<IBar>(\"foo\")); // false\nWhereas the RegisterMany API (which happens to correspond to the DryIoc API) would look like:\ncs\ncontainerRegistry.RegisterMany<A>();\ncontainerRegistry.RegisterSingleton<IBar, B>(\"foo\");\nYou'll notice however that when we compare the instances this time you'll see that IFoo and IBar are the same instance.\ncs\nobject.ReferenceEquals(c.Resolve<IFoo>(), c.Resolve<IBar>()); // true\nobject.ReferenceEquals(c.Resolve<IFoo>(), c.Resolve<IFoo>()); // true\nobject.ReferenceEquals(c.Resolve<IBar>(), c.Resolve<IBar>()); // true\nobject.ReferenceEquals(c.Resolve<IBar>(), c.Resolve<IBar>(\"foo\")); // false\n@rafsanulhasan to answer your question...\nRegisterInstance already treats this as a singleton... so any time you resolve the service you will get the same exact instance... \n```cs\ncontainerRegistry.RegisterInstance(CrossConnectivity.Current);\nobject.ReferenceEquals(c.Resolve(), c.Resolve()); // true\n```\nIn fact all of the plugins you referenced use a singleton pattern in the first place, so even if you were to use a delegate to try to make it a Transient Service, it would still return the same instance since that's how the libraries were architected... Also I would say that scoped lifetimes are outside of what we want to include. . @totht91 we considered it, but it would have created an additional dependency, and the API isn't all that great to be honest, not to mention that you've got certain container authors that will tell you Microsoft introduced some very bad patterns there.. I'm unable to reproduce the problem you said you were having... all of the drop down boxes work just fine. as for the second screenshot you'll need to configure your environment with your access tokens as it says.. Thanks for catching it and the PR to fix it. . Ultimately for those brave enough to \"Share\" their ViewModel logic between a Xamarin.Forms and a real WPF application I think they'll need to follow one of two approaches:\n\nCross Compile net45/netstandard2.0 where you make use of conditional compilation to change the logic around what your Navigation dependencies are and how your implement some of that Navigation logic.\nImplement a bunch of abstract base view models that then have an implementing ViewModel in your WPF or Forms projects. \n\nthat said I'm in favor of removing the conditional compile, it may not work for real WPF applications, but it would make it available if someone needs to use full framework Unit tests instead of .NET Core, as well as the previously stated Forms WPF target (which is a terrible idea) and GTK#. . @aracurd you still can if that\u2019s what you want to do by simply calling GetContainer(). The fact is that this created variations that were very difficult for people to understand between containers and documentation. Simply put most devs are extremely unfamiliar with the DI containers they are using and report issues as Prism issues that are really they haven\u2019t invested the time to learn the container issues. Also by introducing a common API this allowed us to greatly simply what it takes to \u201csupport\u201d a new container meaning that you have the ability to use a container with very little effort even when we may not officially support that container. . Thanks for the PR. Known Issue:\nThere seems to be a tooling issue that causes an unhandled exception in the Sandbox app. When referencing the build artifacts in an external app everything works. \nCould not load type 'System.Runtime.CompilerServices.IAsyncStateMachine' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.. downgrading to 6.1.9 per @bartlannoeye's suggestion, I noticed we were targeting different versions of the UWP package between Prism and the Sandbox app... now that these are all the same the Sandbox app actually does work. . This is by design. Closing as duplicate see #1664 for more information. While I have seen some exceptions on Navigation which seem to indicate that the error occurred as a result of IDestructible the cause has always been due to a bug within my codebase. I'm sure if you create a simplified repro app you'll be able to more easily find the error. . @Devanathan2015 as is noted in the issue templates, you should only be creating issues for bugs or feature requests.... if you have a \"How To\" question or \"Where am I going wrong\" questions like this it belongs on StackOverflow. Thanks.. @huyjack178 please ask How-To questions on Stack Overflow... I also encourage you to read the docs and look at the sample apps.. This is confirmed. It appears that the current registration logic ends up registering the View twice resulting in the original default View type taking precedence. . @erikh111 thanks for the bug report and repo app! this has been fixed and will be available shortly in the CI feed. . @noufionline as was mentioned StructureMap has been \"Sunsetted\" by its maintainers. As a result of this the Prism team will no longer be shipping updates for StructureMap moving forward.. @noufionline it has indeed... however Lamar is a new container with only around 35,000 downloads. It would really need to mature and have a much larger user adoption before we could consider official support. In the mean time the IoC abstractions that we use for Prism 7 are intentionally designed to reduce the heavy lifting that are needed at the container level. You should be able to very easily add your own implementation for Lamar if that's what you prefer to do. . As indicated in the Issue Templates, Questions should be asked on StackOverflow. Obviously let's have some discussion around any proposed API changes.. but I would encourage you to join in the effort and submit PR's to help us get to something we can release.. @MikelThief there's not really a point in a \"BaseClass\". We can do this like the IPageBehaviorFactory where we simply implement GetTransitionInfo virtually so you can simply inherit from Prism's implementation and handle anything custom or that wouldn't be handled OOB... and call the base implementation for everything else... . @JerryNixon having this as part of the Navigation call from the ViewModel completely breaks MVVM.. The NavigationService isn't \"swallowing\" the Exceptions. If you look at the Navigation Result you'll see if your navigation was successful and what the Exception was.\ncs\nvar result = await NavigationService.NavigateAsync(\"ViewWithException\");\nif(!result.Success)\n{\n    Console.WriteLine(result.Exception);\n}\nAlso worth noting that it's actually a bad practice to be using nameof(SomePage) since this would directly expose the Page class within your ViewModel. It would be a far better practice to abstract that into a Keys class that exposes it as a constant string like:\ncs\npublic static class NavigationKeys\n{\n    public const string FooPage = nameof(FooPage);\n    public const string BarPage = nameof(BarPage);\n}. @tstivers1990 the NavigationService used to allow most exceptions to bubble up and while also handling a few. This forced developers to wrap every navigation call in a try/catch and generally led to a bad experience. That behavior was intentionally changed to make it easier for developers to handle situations where Navigation has failed in a graceful manner with INavigationResult. . @tstivers1990 \nOnInitialized is called from the Constructor and therefore cannot return a task. You should simply do an async void and get the result. If you haven't done something that basic then swallowing the exception is on you.\nAs to your other complaints about INavigationAware what you're asking would lock up the UI Thread and actually lead to poor performance. . @noufionline can you provide some context on how you feel this would be a \"great help\". Thanks. Thank you for the PR... unfortunately this is not something that we are looking to add at this time.. @hongyue remember we do have a much easier way for you to get the latest bits... just add the CI feed as a package source in Visual Studio and you can install the CI packages as we make changes.. @patricksegantine your repo does not seem to exist or you've created it as a private repo. I'm not sure what exactly you're doing I can say using a NavigationPage is pretty well vetted. Unless you're doing some total one off I can't see a reason why you would be having trouble. \n```cs\nprotected override void OnInitialized()\n{\n    NavigationService.NavigateAsync(\"NavigationPage/ViewA\");\n}\nprotected override void RegisterTypes(IContainerRegistry containerRegistry)\n{\n    containerRegistry.RegisterForNavigation();\n    containerRegistry.RegisterForNavigation();\n}\n```\nClosing for now as I cannot see your repo. If you're still having trouble feel free to update the thread and we can re-evaluate.. @andreinitescu do you the results of a profiler to go along with this? It should be getting cleaned up.. @andreinitescu sorry the way I read this was that you were describing a memory leak... I think I understand your issue now... you seem to be using multiple partial views on a page and have the need to add/remove these views Dynamically... does that sound about right?. You are correct... it was only architected with static Partial Views in mind... Now that I have a better understanding of your issue I do have some ideas around how we can support this.. I do want to point out here that any support we do add will simply let you add/remove them at run time... it will be on you to initialize them as we won't be able to pass in NavigationParameters after the fact... and OnAppearing which comes from the Page will have already fired.. what you're beginning to describe goes beyond the scope of Partial Views, and ventures into the depths of Regions... which is something I would like to add support for generally... but it's pretty complex subject that will mean it's several months away... in the mean time I'd suggest you perhaps use the EventAggregator to pass some context around.. We can do the \"PartialView\" support because the intent is really about it being more static. When you start getting into how do we initialize etc like I said this is really Region territory and that is the only real way we're going to be looking at to support what you're talking about. \nFor the part of your issue that has to do with allowing you to unhook a single Partial View without clearing out the rest of them I'll leave this issue open. For the other part of your issue you'll want to track #1072 . @scharada this is off topic. The repo you are referencing has absolutely ZERO to do with Xamarin Forms Shell. In its current state Shell is not something I\u2019m interested in pursuing until such time as the required changes are made by the Xamarin team. . @yanshouwang you are correct we do not provide a template that uses a Shared Project. This leads developers to make bad design decisions and write hard to maintain apps... something we have no intention of encouraging. . @bartlannoeye we understand what the issue was. As I previously mentioned this is not behavior that we want.. @jherby2k I'm sure that it is trivial to reproduce... if you could please provide a repro that would be helpful though. Our time is really quite limited so having something that demonstrates the reported issue helps us to both validate and prioritize issues.. This feature was added more recently. Please update to the latest preview of 7.2. Minor, but are we sure we don't want this public or at least protected so it can be more easily referenced?\n. If this is no longer async, is there a reason to leave the method's named NavigateAsync?\n. you found my secret text editor weapon of choice haha. fixed.\n. typo\n. Totally get this... just concerned that this could cause confusion when working with a DI container not called container like Ninject's Kernel.\n. For clarity this has been changed in Unity and Ninject to:\n``` cs\npublic static void RegisterTypeForNavigation( ... )\n    where TView : Page\npublic static void RegisterTypeForNavigation( ... )\n    where TView : Page\n    where TViewModel : BindableBase\n``\n. Prism is currently targeting Profile 259 not 111.\n. should bewhere TViewModel : BindableBase`\n. This can be simplified to just return line 17 rather than adding a new line.\n. @joacar you can look at the updated Unity version which was updated for more clarity. It's not about Pages and classes. Since Prism is about MVVM it's really about Views and ViewModels which with Xamarin Forms are fulfilled with Pages and BindableBase types. You navigate to View's not ViewModel's which is why for TView we just get the type Name, and to discourage the bad practice of navigating to a ViewModel we're taking the FullName of the TViewModel.\n. Unless I'm misreading this... this is likely to lead to issues navigating...\ncs\ncontainer.RegisterTypeForNavigationOnPlatform<ViewA,ViewAViewModel>( androidView: typeof( ViewA_Droid ) );\nThis would give me a name of \"ViewA\" everywhere but Android where it would be \"ViewA_Droid\" making navigation more challenging than it should be. I would think that what we want is to do something like:\ncs\nname = Regex.Replace( typeof(TViewModel).Name, \"ViewModel$\", \"\" );\nThat would let us have consistent naming even when dealing with different types of Views.\n. I suppose it could be called either. I do agree BehaviorBase is better. Good catch.\n. thanks for the catch\n. I do think there are certain behaviors that should absolutely be injected automatically by the NavigationService, but I also like the flexibility of something like IPageBehaviorFactory for injecting things specific to that project.\n. I had left this named as MultiPage as it works with any MultiPage... however I can update this to reflect the naming with the ActiveAware behaviors so this would become TabbedPageNavigationBehavior\n. I thought about something like having the NavigationService inject the parameters passed to the TabbedPage but I'm not sure that provides the right workflow or extensibility. Having the IInternalNavigationParent would allow for crazier scenarios where you might for some weird reason want the Parent to be able to change the parameters being sent to the children as the state of the application changes.\n. 1) I have this running right now and the Async works better for my needs than the non-async version.\n2) Ultimately it's up to the developer to make choices when working with async code that provide for the best user experience.\n. I put the regions there since we are deprecating the use of Commands, and keeping the grouping will make it easier to clean up when Commands are removed.. My normal spacing is ( someVar ), I generally try to reverse that for Prism where the standard is (someVar). The new EditorConfig settings in VS2017 will probably help a lot with that sort of thing in the future. Thanks for the catch, I'll update that. . I might suggest returning RuntimePlatform.UWP or RuntimePlatform.WinRT for now and then properly supporting both of these with 2.3.5. . True, however this would be a new feature for a dev to implement, so might as well implement in a way where it will just work when 2.3.5 is released... or if someone is using the pre-release. Based on this implementation it will only work with iOS and Android with XF 2.3.4. WinPhone and Windows are Runtime Platforms in 2.3.4, and Windows was removed in 2.3.5 and replaced with UWP and WinRT. yes. we were handling code references in the docs three different ways. the newest docs were already specifying code language, the older docs either indented like on StackOverflow or didn't specify the language type like this.. markdown ordered lists are actually supposed to all be 1., it then renders 1,2,3.... see above.... see above.... see above.... It will of course render 1, 2, 3... when that is what you have, but a markdown linter will consider it improperly formatted, or at least a potential issue :). You could get rid of the continue and just make this:\ncs\nif(child.GetType() == selectedTabType)\n    tabbedPage.CurrentPage = child;. I really like this!. yes it could... but if we want to version each project individually then it needs to be defined in the project. it ultimately has to be referenced for UWP... even if I remove the reference here, the UWP target would still show the same dependency. shouldn't create an issue at all... if anything it is better because it provides backwards compatibility for existing PCL projects that need netstandard1.0 while it removes the requirement for System.Resources.ResourceManager for projects targeting net45, uwp, or netstandard2.0 . I would change ModuleName:\ncs\nprivate string _moduleName;\npublic string ModuleName\n{\n    get => string.IsNullOrWhiteSpace(_moduleName) ? ModuleType.Name : _moduleName;\n    set => _moduleName = value;\n}. @totht91 we are currently planning on replacing our current Prism for UWP libraries with a merge of Prism and Template10. let's refactor this to:\ncs\nprotected virtual Task HandleNavigation(string uri, NavigationParameters parameters)\nthis will help make the extension more Extensible so that others could inject some custom handlers if the NavigationResult indicates it was unsuccessful.. let's also do this in a virtual Handle method to make this more extensible for custom fault handling. let's split this up to a static Navigation class with the BindableProperties and an abstract NavigationExtension class that implements IMarkupExtension and ICommand. I'm thinking the UseModalNavigation & Animated properties need to go as we've deprecated their use in favor of the querystring... @brianlagunas thoughts?. I can't think of any scenario where allowing a double tap for a navigation makes sense. I would remove this and make sure that CanExecute always returns false when IsNavigating is true. In my mind it's about is the command executing... if it is we don't want to execute again until after we've completed... and since it's a navigation away from the given page you shouldn't be able to hit it again unless you navigate back.... the csproj was updated to pack the dll... I'll take a closer look into it. . forgot to pull it off that one. We currently have ClearErrors(string) and ClearErrors() which clears all errors, so it would make more sense to stick with this convention and name this GetErrors(). if the goal of the PR is to make it easier for mocking with something like Moq... would it perhaps be better to make IPlatformNavigationService derive from INavigationService?\n```cs\npublic class ViewAViewModel\n{\n    public ViewAViewModel(INavigationService navigationService){}\n}\npublic void SomeTest()\n{\n    var navService = MockFactory.Default.CreateMock();\n    var vm = new ViewAViewModel(navService);\n}\n``. I see this as being an extension of INavigationService... it's not about being yet another interface to be keenly aware of... it's just the interface that you might actually mock and then pass in as a substitute for INavigationService if you're running tests.. after speaking with @kzu it appears this will work as implemented. this is implemented in all of our containers and is available in the rest I've looked at. DryIoc is awesome and just requires the instance... Autofac (which we dropped), Ninject, and Unity all support injecting the instance by type. btw, this would eliminate the need for us to add an Android specific target for Prism.DryIoc.Forms and Prism.Unity.Forms and will be very useful for UWP. there are some edge cases where advanced users may need to inject some custom logic in here, and you shouldn't have to implement the rest of the IContainerExtension to achieve it.. same reason as for DryIoc. the intent is only the Major.Minor need to be changed... but there is actually something wrong here... two things here... 1) usingnameof` on a View type is actually worse IMO... 2) remember this is a Sandbox app . @totht91 I'd be happy to discuss more with you via Slack... we've already added support for Tuples, you'll notice that this actually just expands on line 10 to resolve named types... ultimately this specific API isn't one that you should be using as it is really more typical for the underlying Prism framework to be resolving types with the container. . my thought is for now no... we can always open it up later. ",
    "mos8580": "Very interested in this! :+1: \n. ",
    "gep13": "Is this something that could be made \"easier\" using SideWaffle:\nhttp://sidewaffle.com/\ni.e. rather than going to the length of creating your own VSIX extension, build on the existing framework, to add the item and project templates?\nThere are YouTube videos on how this can be done here:\nhttps://www.youtube.com/watch?v=naY3jbBNNgY&feature=youtu.be\nand here:\nhttps://www.youtube.com/watch?v=NChUqnArTrI&feature=youtu.be\nJust a thought.\n. @briannoyes I think you might have got David's Twitter handle, did you mean @davidbritch\n\n@briannoyes said..\nOnly thing I don't like about SideWaffle is that unless you get into customizing it you end up with the clutter of a lot of templates (project and item) that you probably don't use and just adds noise to the environment.\n\nThat's a good point.  I wonder if there is a way to turn on/off which templates are activated.\n. Pass, that would be a question for @sayedihashimi... Sayed?\n. @arbsmith is this same public? Thanks!\n. ",
    "davidbritch": "Does SideWaffle include the ability to call into custom code when creating a solution from a template? That was required for the Prism WinRT project templates.\n. ",
    "sayedihashimi": "@briannoyes \n\nOnly thing I don't like about SideWaffle is that unless you get into customizing it you end up with the clutter of a lot of templates (project and item) that you probably don't use and just adds noise to the environment.\n\nI'm guessing you mean that's the result when you fork+add to the existing SideWaffle templates. If you are creating your own template pack instead of forking SideWaffle you can create a new VSIX Project and then add the TemplateBuilder nuget package. Using that project you can create a .vsix which contains just your templates. SideWaffle uses TemplateBuilder for the template creation process in this same way. In many cases the name SideWaffle is used to refer to TemplateBuilder as well. The best resource is https://msdn.microsoft.com/en-us/magazine/mt147242.aspx.\n@davidbritch \n\nDoes SideWaffle include the ability to call into custom code when creating a solution from a template? That was required for the Prism WinRT project templates.\n\nSideWaffle/TemplateBuilder builds on top of the existing VS template system. To call custom code during project/item creation you'd use a custom wizard. Templates with wizards is not a problem for SideWaffle/TemplateBuilder. I have some rough notes on custom wizards. If you have any issues let me know.\n. ",
    "pellea": "Is there any (partial) template available yet ? (or any sample for WPF)\n. ",
    "mtaulbee": "Just did a quick smoke test for the Window and UserControl templates, works as expected. Took me a second to realize you added a Prism node under C#, I like it, very nice touch. Testing was done using VS 2015 Update 1.\n. I didn't see the ViewModel template under wpf. I have a few ideas though...\nA module template is high on my list.\nThe other would be a wizzard for the UserControl and ViewModel though. The wizzard would allow us to inherent from a base class of some sort.\n. Nice! Just tested the VM, works as expected.\nI think VS has an interface called IWizard that can be implemented for wizards? It's been a few years since I've made project or item templates though......\nIf we can somehow add the ability to derive the UserControl and VM from a different base class, I'd use those item templates all the time. \nGood work so far though!\n. Any other snippets you would like to include?\n. @bartlannoeye \nI was thinking the same thing. It would be nice to include some templates as well, maybe include this with issue #13?\n. The command snippets are similar to MVVM light. \nI've added summaries to these snippets, but I don't use them in my personal snippets.\nprismDelCmdCanExecute.txt\nprismProp.txt\nprismVM.txt\nprismDelCmd.txt\n. I agree with your statements. I think prismProp is a much needed snippet and should be included in the next release if possible.\n. The prismprop snippet works as expected, great addition!\n. I agree with PubSub, i use CompositeCommand, but I've never really felt a snippet was needed. That just might be me though....\n. Those work for me. The only request I have is that the setters for the commands are private.\nIf they aren't then I can tell you I'll never use them.\nAs far as the pubsub, I've never considered an item template. If it's because of the payload, I can't say the payloads I create are ever that \"heavy\" IE not a lot of properties. Maybe that's just me though....\n. @boodoolak Please see attached image....\n\n. Sorry, looks like this is available.\n. ",
    "motisch": "I think it would be nice to have a complete solution template with the projects like so:\nApp.Shell;\nApp.MainModule;\nApp.ServiceInterfaces;\nApp.Services;\nApp.Graphics;(Maybe)\nApp.Api;\nAnd item templates as pairs of view and viewmodel.\n. ",
    "omares": "Would like to add https://simpleinjector.org to the list.\n. For the sake of completeness we should also consider nunit, which i would vote for :)\n. nunit is the default unit test library when creating xamarin unit tests projects. Also we have zero issues with using nunit in our xamarin project (which we develop on mac). So there should be no cross platform issues at all :)\n. MSTest is part of visual studio. Looking at xamarin there will be a user base that does not work on windows and have no access to MSTest. If this is not a subject, then dont fix something thats not broken. :) but you will lock out certain contributors. \nBesides that, there are alot of comparisons and blog posts of people migrating away from mstest. One of the main reasons would be that MSTest did not evolve with the new technologies. \n. ~~Just repeating again, i would go with nunit as its xunit based and \"newer\".~~\n~~Quote from the nunit website.~~\n\nThe current production release, version 2.6, is the seventh major release of this xUnit based unit testing tool for Microsoft .NET.\n. @sgrassie yes you are absolutely right. Sorry for my nonsense comment. :(\n. @brianlagunas could you please link the current implementation?\n\nIn general, please keep the option to control the animation, controlling it is an important part of handling the navigation stack \"behind the scene\".\n. The usage of editorconfig is very limited. Mostly there is no IDE supporting it by default, most of them need a plugin to enable it. So questioning here what advantages do we expect from that? Consistent formatting cannot be an option because you have no way in enforcing it.\nSo i would vote against it.\n. Any news on the progress front? :) Eagerly waiting to use prism in our xamarin.forms project.\n. ",
    "paulomorgado": "I think the CoreClr team has come up with a way to translate the tests.\n. ",
    "wldevries": "Not spam, just a suggestion. The dotnet/corefix team also uses it if that means anything to you.\n. I have a workaround to get the behavior you want using navigation identifiers. Every time you navigate to a view you provide a Guid to identify that request. When the journal browses back to a view that uses these ids it will pass in the same Guid of the original request. The destination view will then be able to decide whether the journal should roll back one more or not.\nExample code is listed below. There are some caveats though:\n- Every view that navigates to the view that needs to skip the journal needs to add a navigation id.\n- You need to make sure that you don't mix up the navigation id with the decision making in IsNavigationTarget.\n- Calling Journal.GoBack() directly in OnNavigatedTo will result in a StackOverflow, that is why I call in asynchronously using the Dispatcher.\nNavigation example of passing a navigation id:\nC#\n    var navParms = new NavigationParameters().AddNavigationId();        \n    navigationService.RequestNavigation(\"Page\", navParms);\nOnNavigatedTo example of a view that should be skipped when the journal browses back:\nC#\n    var navId = navigationContext.Parameters.GetNavigationId();\n    if (this.prevNavId == Guid.Empty || this.prevNavId != navId)\n    {\n        this.prevNavId = navId;\n        .. take action ..\n    }\n    else\n    {\n        Dispatcher.CurrentDispatcher.BeginInvoke(() => navigationService.Journal.GoBack());\n    }\nHelper extension methods:\n``` C#\n    public static NavigationParameters AddNavigationId(this NavigationParameters navigationParameters, Guid? navigationId = null)\n    {\n        navigationParameters.Add(SharedNavigationParameters.NavigationId, navigationId.HasValue ? navigationId : Guid.NewGuid());\n        return navigationParameters;\n    }\npublic static Guid GetNavigationId(this NavigationParameters navigationParameters)\n{\n    var id = navigationParameters[SharedNavigationParameters.NavigationId];\n    return (Guid)id;\n}\n\n```\n. Why not .net or .org, Prism is not commercial right?\n. There are differences in behavior:\nWhen the OnNavigatedTo is non-async any error will be caught and cause a NavigationFailed event.\nWhen the OnNavigatedTo is async any error will not be caught, the navigation will succeed and the Exception will be propagated to Dispatcher.UnhandledException.\nAlso if you use async void methods you cannot be sure that the actual navigation handling logic has finished when the IRegionManager.RequestNavigate has finished or when listening for the Navigated or NavigationFailed events. The reason for this is that async void methods complete immediately and are scheduled for deferred execution.\n. I completely agree @sunefred.\nIn addition to what you describe in point [1] the design also fails to meet the fail-fast principle. When your code fails you expect it to throw an exception right then and there. Instead you need to add a try/catch block or handle the NavigationFailed event. We've had an instance where half of the OnNavigatedTo on a viewmodel failed causing an extremely rare and hard to reproduce bug to pop up. Developers starting with Prism will be caught off-guard with this design. Swallowing exceptions is bad.\nAs a third point I'd like to add that when you call RequestNavigateTo you want to be able to get the NavigationResult then and there by awaiting the result. The addition of local functions makes it slightly easier to handle the callback in the current design, but it's far from nice experience to work with.. That is exactly the problem! If you don't add a try/catch block or handle the navigationfailed Prism will silently ignore any exceptions in your OnNavigatedTo, there is no other choice.. Possibly failing due to use of the C# 6.0 null conditional operator.\n. PR updated as requested.\nI noticed there is a lack of unit tests on the navigation methods on RegionNavigationService. Not sure how to handle this.\n. Please wait, I'm struggling with rebasing\n. Hm okay I guess the rebase went okay after all, it's ready.\nI'm pretty sure this works, but I'd be happier if the internals of RegionNavigationService were build using async/await. I guess this should be postponed to a next PR as it is more invasive.\n. This is the general idea.\nNote that currently RegionNavigationServiceFixture.WhenNavigatingWithNullCallback_ThenThrows fails (and is commented out because it stalls all other tests) because the exception is not caught because the method is actually an async void that completes immediately.\n. Another possibly breaking change for some people is that the navigation events are now raised before the callback is called.\n. Sorry, I had not noticed. On that note you may wish to remove the following item from the release notes:\n\nAdded RequestNavigateAsync methods to region navigation\n. Not sure why I missed it, but it's right in the quoted test. There already is an async Execute and I have no idea what is causing the race condition.\n. With regards to backwards compatibility I think async interfaces should be additive, they should not replace their synchronous counterparts.\n\nWith that said, I can't wait for having async in place everywhere in prism.\n. I would imagine having two interfaces as such:\n```\npublic interface IConfirmNavigationRequest : INavigationAware\n{\n    void ConfirmNavigationRequest(NavigationContext navigationContext, Action continuationCallback);\n}\npublic interface IConfirmNavigationRequestAsync : INavigationAware\n{\n    Task ConfirmNavigationRequestAsync(NavigationContext navigationContext);\n}\n```\nThis should also be the case for INavigateAsync and INavigationAware which is missing in your PR. I would imagine the task based method to be the main implementation with a wrapper for the callback methods.\nI had an earlier try with PR #124 which was implemented as an async wrapper around INavigateAsync.\n. I didn't look right, IConfirmNavigationRequest is indeed split into a synchronous and an asynchronous version. INavigateAsync now only has async methods, the synchronous ones have been removed.\nAs for INavigationAware I think it would add a lot. As mentioned earlier when it implemented as async void the navigation completes before the actual method is executed. It will also miss any failing code in the navigation handler, the exception will bubble to Dispatcher.UnhandledException instead of causing a navigation failed event/result in Prism.\nAlso I agree with rewriting to work with TPL instead of using callbacks, it's much cleaner.\n. double sorry for not reading the PR correctly.. it's so big!! ;)\n. Since WPF is always running on the dispatcher we could also do the following:\nvar tcs = new TaskCompletionSource<TResult>();\nvar dispatcherTask = Dispatcher.BeginInvoke(() => f(n => tcs.SetResult(n)));\nreturn Task.WhenAll(dispatcherTask, tcs);\nNote that you need to add a reference to System.Windows.Presentation for this Dispatcher extension method.\n. Okay tried to be smart to avoid the warning about not awaiting BeginInvoke with WhenAll, but this will of course not return the correct result. It should be the following with a pragma to ignore the warning.\nvar tcs = new TaskCompletionSource<TResult>();\nvar dispatcherTask = Dispatcher.BeginInvoke(() => f(n => tcs.SetResult(n)));\nreturn tcs;\n. I think you're probably right, but I haven't had a practical go at it yet.\nI don't use unit tests often and that's why I usually use the dispatcher directly which is neater code as you can see.\n. I agree, as is proven by my half baked PR ;-)\n. Looks good, but I think default parameters is something that should not be done in libraries. We should choose a default behavior and add a second method that gives the choice.\n. It would be great if this new dialog solution would also support non-Windowbased solutions. We currently have a custom implementation that adds dialog views in a separate adorner layer in our Shell to allow easier overlay effects (darkening) and clicking besides the dialog to dismiss it. I could imagine this working with a modified IRegion and IActivatable views.\n<Grid>\n        <AdornerDecorator>\n            <ContentControl prism:RegionManager.RegionName=\"{x:Static interface:RegionNames.Page}\" />\n        </AdornerDecorator>\n        <AdornerDecorator>\n            <Grid x:Name=\"dialogRoot\" />\n        </AdornerDecorator>\n        <c:ToastView />\n    </Grid>. ",
    "tiesmaster": "Althought, this is already closed, I thought it might be worth mentioning that this is still very much appreciated. At my company, we already have a custom implementation for this, but it would be very nice if it would be provided by PRISM.\nOur implementation actually uses the very same ChildWindow that Brian Lagunas mentioned. It works like this: we've created a custom control based on the ChildWindow to show a Lightbox, and to make that work with PRISM, we\u2019ve derived from PopupWindowAction, called LightboxAction to show the lightbox instead of an actual Window.\nIf you want me to share some of the code, then I'm happy to put this in a public gist, to discuss this further. Or if there are other ideas how to accomplish this, I'm willing to participate in that.\n. Yes, indeed, that's the main gist of it. Sorry for the unclear issue description, I was hoping that my sample project would clarify things, but maybe it only confused you :(\nAnyway, the problem, as I see it, is indeed that when the MainView becomes inactive, the inner active views stay active, even though they're really not. And when you go back, they don't get \"re-activated\", so you can't handle that (or handle the event that they're becoming inactive).\nMaybe the inner active views should become inactive, when a containing active view becomes inactive, however, that might bring another problem with it: when you go back to the MainView, the previously active inner views should become active again, so you need to know which ones should become active. How do you know that? Since an inner region might have different views, and you don't know which one was active previously, so you should start recording that, which you probably don't want to do. So that's how I got to the behavior in the sample project.\n. Done. I've found a couple more, I've also taken the liberty to touch that code, I hope that's ok ;)\n. Btw PR #124, and #127 will add a lot of these unneeded async methods. Just a heads-up ;)\n. @weitzhandler The style that Brian Lagunas uses in his Pluralsight course can be found in the excercise files of his course. If you have that, you can check the complete example out there, but basically, it's this:\nxaml\n<Style TargetType=\"TabItem\">\n    <Setter Property=\"Header\" Value=\"{Binding DataContext.Title}\" />\n</Style>\nSo you were almost there ;)\nI've also pasted the source for ViewModelFromViewExtractor into the gist, so that should be sufficient to reproduce the solution as I use it in my app (still today ;)). If you don't get it working, I can create an example for you, but probably the style should be sufficient to get it working for you. And is also simpler anyhow ;). Sorry, I don't have an account on that Slack workspace, and don't want one. We're moving away from WPF, in favor of a web frontend written in React. So there is no value for me to get involved more than I am now.\nHaving that said, I'm happy to answer a stackoverflow question, if you have one ;). ",
    "AngusMcIntyre": "@rot-t I'm also in favour of an IJournalAware interface that you describe. That was where I searched for this feature after discovering i needed it. However, the view is deliberately separated from the journal entry. This allow us to use IsNavigation target to change the handling view at any point. To coordinate the 'skip' flag between views I would end up crowbarring something into NavigationParameters. Is that appropriate? It feels good to me. \n. Is there any additional documentation effort required?. I'd love to. I'll need to familiarise myself with the change as I ignored this issue for a while.. Is there anything that needs words in addition to IJournalAware? I see references to some of the navigation service interfaces above but I can't imagine that most users will require that level of documentation.. I second the attached property method. Hook up the the IsVisibleChanged event and you are golden. The use cases I've has are always creating for a termporary page that behaves similar to a popup dialogue.\nAn overload for NavigateAsync would fall down when the temporary page itself is the one performing the navigation. Consider navigating to your Login page, but then pressing a 'Navigate back' button, rather than a 'Cancel' button. The handler for 'Back' would need to know about temporary pages in order to call the overload. You are going to end up having to implement an interface.\nI like the interface solution. It wouldn't the first feature that is a little hard to find but a good solid read of the docs always worked for me. IRegionMemberLifetime is very similar to what you might want.. ",
    "dvorn": "@brianlagunas @roy-t @Gusdor @wldevries \nSince I am currently deep involved in WPF region navigation, here is my take on this issue:\nDefine the interface (as suggested above)\ncsharp\npublic interface IJournalAware\n{\n    bool PersistInHistory();\n}\nwhich may be implemented by either View or View Model.\nModify the RegionNavigationJournal 's method RecordNavigation to take another parameter\ncsharp\nvoid RecordNavigation(IRegionNavigationJournalEntry entry, bool savePrevious = true);\nWhen savePrevious parameter is false, the method will set RegionNavigationJournal.CurrentEntry to entry, but will not push previous value of the CurrentEntry onto back stack. \nThe RegionNavigationService.RequestNavigate method will query the currently active view for implementation of IJournalAware (as it currently does for IConfirmNavigationRequest) and use the value obtained by PersistInHistory as a parameter to RecordNavigation.\nThe only issue here is that, generally speaking, there may be several currently active views.  How to handle this?\nIf you like it and still need it I may prepare a PR.\n. BTW, this can be done without modifications to the library: create custom implementations of IRegionNavigationService and IRegionNavigationJournal implementing the above and register them in the container instead of default ones.\n. @brianlagunas  OK let's wait for the response from topic starter and other interested parties.\nCallbacks or awaitables implementation or both?\n. @roy-t Seemingly you misunderstood what I suggested.\nRegionNavigationJournal is registered in the container by the default Prism bootstrapper: https://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Unity.Wpf/UnityBootstrapper.cs#L155-156 .   You need to grab the source code for RegionNavigationJournal and  RegionNavigationService from the Prism, rename the classes and implement the functionality.  Then you need to override the registration for IRegionNavigationJournal and IRegionNavigationService with your custom classes in your application's bootstrapper.\nIn your application code, other than bootstrapper, you do not have to deal with the journal directly other than implementing IJournalAware interface.  The Prism itself will use your custom implementations.\n. @roy-t In my previous post I was not exactly precise.  So, in order not to confuse anybody, little more details:\nGrab IRegionNavigationJournal, rename it to IMyRegionNavigationJournal , and add modified RecordNavigation method.\nGrab RegionNavigationJournal, rename it to MyRegionNavigationJournal, make it inherit from IMyRegionNavigationJournal and implement RecordNavigation.\nGrab RegionNavigationService, rename it to MyRegionNavigationService, change the constructor argument type to IMyRegionNavigationJournal and implement functionality using a call to new RecordNavigation method on a new IMyRegionNavigationJournal interface.\nIn the application bootstrapper:\nOverride registration of IRegionNavigationService by registering MyRegionNavigationService.\nLeave registration of IRegionNavigationJournal alone - it will not be used.\nAdd registration of IMyRegionNavigationJournal with implementation in MyRegionNavigationJournal.\n. As for multiple active views, it may well happen that this feature is just incompatible with them.  We need to consider use cases of multiple active views.\nGenerally speaking, there are the following approaches:\n- Query only the first active view\n- Query all views; drop the current entry if all views requested dropping.\n- Query all views; drop the current entry if any of the views requested dropping.\nFor a single active view instance those are all equivalent.\n. I created a branch with initial attempt to implement the feature: https://github.com/dvorn/Prism/tree/PersistInHistory\n@roy-t Do not expect to have this feature in Prism release very soon.  We need to agree on what to do with multiple active regions, we need to write tests for the new feature, and also, more importantly, we need to decide how to maintain backward compatibility which is broken in this commit.  I even won't create a PR.\nBut it should be sufficient for your needs if you use custom implementations as described above.\nPlease grab the source from the branch and let us know whether it works for you.\n. @brianlagunas  As I noticed above, changing the IRegionNavigationJournal's method RecordNavigation will be a breaking change.  It will not break ordinary programs, but if somebody created a custom implementation of IRegionNavigationJournal, it will break.  Is this acceptable?  If not, I suggest the following approach:\nCreate new interface IRegionNavigationJournalEx which derives from IRegionNavigationJournal and adds an overload for RecordNavigation with additional parameter.  Stock RegionNavigationJournal will implement IRegionNavigationJournalEx but it the default bootstrapper it will be registered for IRegionNavigationJournal interface.\nRegionNavigationService will query the View for IJournalAware and, if discovered that the view do not want to be present in history, the service will query its instance of IRegionNavigationJournal for implementation of IRegionNavigationJournalEx and, if present, use is to drop the view from the history.\nNow if somebody has a custom implementation of IRegionNavigationJournal it will work as expected - only the capability of dropping a view from the history will not be available.  But the user's program does not expect this capability anyway.  If they want to be able to drop the views, they will need to modify their implementation of IRegionNavigationJournal to support IRegionNavigationJournalEx (and, if they also have a custom implementation of IRegionNavigationService, modify it too).\nWhat do you think? \n. @roy-t Since there were several people with the interest in the feature I would leave it open until maintainers decide what to do.\n. Yes it is still valid.  Tests needs to be added (when I have time).. @brianlagunas It seems there is interest in scoped regions.  People do not ask because they do not know it exists and it is rather difficult to find it.  It will be nice if Prism supports it out of the box.\nMaybe re-open the issue?\n\n\nAbout the implementation in the course:  I think that RegionManagerAwareBehavior is not needed at all.  It will be sufficient to assign scoped region manager to IRegionManagerAware on the view(model) in the ScopedRegionNavigationContentLoader when the view is created.\n\n\nI am a big fan of viewmodel-first navigation.  But scoped region manager does not work with viewmodel-first, simply because in \ncsharp\n        private void InnerAdd(object view, string viewName, IRegionManager scopedRegionManager)\n        {\n            ...\n            DependencyObject dependencyObject = view as DependencyObject;\n            if (dependencyObject != null)\n            {\n                Regions.RegionManager.SetRegionManager(dependencyObject, scopedRegionManager);\n            }\nif the view is in fact a view model, it is not a DependencyObject and nothing happens.\n\n\nDoes anybody know any approach to scoped region managers with viewmodel-first?. @timrobuck  I guess the prism.composition nuget package was left in View-Switching Navigation sample by mistake.  Just remove the reference to the package.  It is not used.\n. In the perfect async world we would have\ncsharp\npublic interface IConfirmNavigationRequest : INavigationAware\n{\n    Task<bool> ConfirmNavigationRequestAsync(NavigationContext navigationContext);\n}\nand then\ncsharp\npublic interface INavigateAsync\n{\n    Task<NavigationResult> RequestNavigateAsync(Uri target);\n    Task<NavigationResult> RequestNavigateAsync(Uri target, NavigationParameters navigationParameters);\n}\nwith the corresponding changes in implementation of all classes that implement INavigateAsync.\nThis change is straightforward and can be easily done.  The major problem, however, is backward compatibility.\nFor classes that already implement IConfirmNavigationRequest we may leave it in place and give a new (Tasked) version of the interface a new name (e.g., IConfirmNavigationRequestAsync).  The implementation of navigation service will look for both interfaces and, if any of them is implemented, use it.\nFor existing programs that use old-style navigation requests we may create extension methods in the following style:\ncsharp\npublic static async void RequestNavigate(this INavigateAsync navigator, Uri target, \nAction<NavigationResult> navigationCallback)\n{\n    NavigationResult result = await navigator.RequestNavigateAsync(target);\n    navigationCallback(result);\n}\nHowever, there still be some compatibility issues for users that e.g. implemented their own IRegionNavigationService or created some mock objects for tests based on old interfaces.\n@bartlannoeye @briannoyes @brianlagunas What do you think?\n. @brianlagunas What problem do you see implementing this?  I see no one.  The only problem, as I said, is that with new interfaces it will not be backward compatible.\n. @TaviTruman What \"redesign\" are you talking about?  Navigation was designed from the very beginning to be asynchronous, this is why it supplies a callback argument.  And async/await only makes it more explicit.  That callback is exactly a continuation after the await.\n. @brianlagunas I disagree.  Region navigation in Prism IS really asynchronous.  It was not \"faked\" but used a callback technique since async/await was not available at the time.  Navigation does not block the UI thread, RequestNavigate returns before navigation is completed without blocking the UI thread.\nUse of async/await does not necessarily imply execution on a separate thread.\n. It seems you need a PR.\n. @brianlagunas This is the implementation I have in mind: https://github.com/dvorn/Prism/commits/AsyncNavigation\nNote that the work is not finished:\n- Method comments not updated\n- Tests needs to be updated\n- Need to support both (old and new) variants of IConfirmNavigationRequest\n. Take a look at how RegionNavigationService implementation was simplified/streamlined using async/await: https://github.com/dvorn/Prism/blob/AsyncNavigation/Source/Wpf/Prism.Wpf/Regions/RegionNavigationService.cs#L134  This was not possible without await support in the compiler, and the authors of the original code were really clever guys to do it using callbacks technique.\nSame types of simplification should be available to all users which use new Task-based async variants of navigation methods.\n. @brianlagunas \n\nThings to keep in mind; we can't introduce breaking changes.\n\nI would like to be explicit about that.  What do we consider a breaking change?  E.g., in release notes for Prism.Wpf 6.0 the change to the IRegionManager interface is mentioned but not marked as a breaking change.\nOrdinary user applications such as accompanying samples will continue to work.  However, if the user implemented some extension to Prism they may well implement their own version of IRegionManager, which is explicitly mentioned as a possibility in the document.  Then this extension will break since the interface has changed.\nThe same situation is here with async navigation requests: IRegionManager and INavigateAsync interfaces has changed.  Any user code that invokes methods on (old) versions of these interfaces will continue to work since the implementation of those old methods is also provided (as extension methods).  However, any direct user implementation of those interfaces will be broken.\n. @brianlagunas  Gentlemen, I need your advice on how to organize my repositories and branches.\nI already have a fork of Prism in which I have the AsyncNavigation branch where I commit my async changes.  This branch will eventually become a PR if it will be accepted.\nBeside that I would like to provide two samples of the usage of the modified library, based on View-Switching Navigation Sample.  The first one will be un-modified sample linked to modified Prism library to demonstrate that it is not broken.  The second one will be a modified version which will demonstrate the use of the modified IConfirmNavigationRequest and some async/await-related simplifications.\nMy current plan is to create two more branches in my fork of Prism - OriginalSample and ModifiedSample.  In the former I will copy the navigation sample into the Sandbox and change references to local Prism projects.  The latter will also contain a copy of navigation sample with modified references, but in this branch I will modify the sample.\nThis layout will allow everyone to easily download the source code, compile and run the samples.\nThe drawback is that when and if the original navigation sample is modified, I will need to manually copy the changes.   Also, I would like to eventually create a PR from the modified sample (provided that the PR for Prism is accepted).  This will also be difficult to do.\nBut probably there is a better approach?\n. @brianlagunas @briannoyes @bartlannoeye @wldevries See a short description of proposed changes in the description of PR #646 \n. @sunefred The INavigationAware interface cannot be async.  See discussion in #704 . Unfortunately Prism for WPF is dead.. @dansiegel I would say that Prism for WPF fell the victim of its own success.  It has too large user base for the maintainers have a courage to change anything.. Another example: user a asks for functionality on SO and the solution exists for an year https://github.com/PrismLibrary/Prism/issues/30 and there is no movement in Prims.WPF. @brianlagunas I did not meant to hurt you and I apologize if I sounded rude.  English is not my native language and to be understood I sometimes explain myself in straightforward and explicit words.  Of course I know how much you do to the Prism and respect that. . @briannoyes @brianlagunas @wldevries  Implemented this as part of transition to Task-based Asynchronous Navigation in #646.\n. One can look into Window.WindowState to determine if the window is in normal state and if not, use Window.RestoreBounds for the \"true\" position of the window.\n. In my implementation of PopupWindowAction (created for Prism 4.1 when it did not contain such an implementation) I used the following code:\n```\nsizeHandler =\n            (o, e) =>\n            {\n                wrapperWindow.SizeChanged -= sizeHandler;\n            FrameworkElement invoker = this.AssociatedObject;\n            Window parent = Window.GetWindow(invoker);\n            bool normal = parent.WindowState == WindowState.Normal;\n            double positionX = normal ? parent.Left : parent.RestoreBounds.Left;\n            double positionY = normal ? parent.Top : parent.RestoreBounds.Top;\n\n            wrapperWindow.Top = positionY + ((invoker.ActualHeight - wrapperWindow.ActualHeight) / 2);\n            wrapperWindow.Left = positionX + ((invoker.ActualWidth - wrapperWindow.ActualWidth) / 2);\n        };\n\n```\nBut this seems not quite equivalent to current implementation in Prism - it seems there is a difference in parent window bounds (outer bounds vs client area bounds) and also this does not contain latest additions for multiple monitors.\n. I am thinking of the following scenario: the user initiated some long-running task, and when the task is completed, the program notifies the user with a dialog window.  Meanwhile, the user minimized the main program window.  Possible scenarios are: \n1. The popup is displayed on desktop, leaving main window minimized (and for this case CenterScreen would be OK).\n2. Main window is activated and brought to normal state.  In this case we would rather center the dialog in the window.\n3. Main window is left minimized and the dialog is centered in the window (what we have now).\nActivation of the main window when it is needed is easily achieved with a trigger in a view model and an appropriate behavior in the view, but this is out of scope for the current PopupWindowAction implementation.\n. I agree it is a reasonable workaround.  It works well.\n. @toumir Bad idea.  View models should know about views as little as possible, if anything.  They definitely should not contain views.\n. @brianlagunas But what about my suggestion?\n. >  I would be a little concerned about the performance hit you would take when showing the dialog. When the dialog is shown, the service locator will have to resolve the content, then set the window's content to that instance. Depending on the complexity of the view, there may be a noticeable lag in showing the dialog.\nNot an issue.  Exactly that is done when navigating to a view registered with RegisterViewForNavigation.  Window's content is set to some instance anyway.  Moreover, I suspect that creating and displaying a Window in WPF has a much bigger overhead in itself.\n. @furyconcept PopupWindowAction is independent of everything else.  You can grab the source of it, modify and use in your project - in the view, just reference your variant and not the one from Prism.\nAnother approach is to use ContentTemplate property (instead of WindowContentType).  ContentTemplate was present in the original  Damian Cherubini's PopupWindowAction: using custom views instead of windows in WPF and Prism.\n. @brianlagunas I am using it for years.  No visible performance issues.. Thanks @agoodwin.  Glad that WindowContentType helped to solve your problem.  However,\n@brianlagunas Seemingly there is a room for improvement for ViewModelLocator: if CustomPopupView uses AutoWireViewModel, then the AutoWireViewModel property is not set and view model is not instantiated when CustomPopupView is being edited in XAML designer.  However, if it is included as element in another view  <views:CustomPopupView/> and that view is loaded by the designer, the property is triggering creation of view model and fails.\nViewModelLocator could check for designer mode as is being done for RegionManager.RegionName: https://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Regions/RegionManager.cs#L106\nWhat do you think? . @craigblazakis @brianlagunas Task-returning method is better.  Because in tests you will be able to await on the command and then do assertions - after the command actually completed.\n. - no new validationresults available AND no currentvalidationresults \nIn this case event is not raised.\n- new validationresults available but they match the current ones\nThis one is hard even to formulate what to expect: the new/old events are List.  How to compare objects of type T?  Does the order of elements in the List matter?\n. The configuration is incorrect: two instances of ViewA are created and each of them contains region \"ViewB\". This will not work anyway because region name must be unique (and you should have used scoped region managers for this scenario).\nThe configuration is incorrect: after\nregionManager.AddToRegion(\"ViewA\", unityContainer.Resolve<ViewA>());\nregionManager.AddToRegion(\"ViewA\", unityContainer.Resolve<ViewA>());\nadd the following\nvar region = regionManager.Regions[\"ViewA\"];\nand it will crash.\nThus the difference is only in the stage at which the error is detected.  Actually, defining RegionName in ViewA.xaml as well as RegisterViewWithRegion do not create regions; the actual work is done on an event which is triggered when RegionManager.Regions is accessed.\n. The explanation for this issue is here: DelayedRegionCreationBehavior creates regions too early\n. @rohits79 If you are using your own copy of Prism, you may try the patch.  Also, you may just remove the subscription for UpdatingRegions event from DelayedRegionCreationBehavior, leaving only the subscription to the Loaded event - that will work (I tried that).\nHowever, I second @brianlagunas that we should not change the existing official implementation.  There are probably hundreds and more various region adapters, region behaviors and such wriiten for the current implementation.  Not all of this code was written correctly (e.g., the code may not check whether the control is loaded).  Changes of this kind may easily break a lot of existing (maybe, incorrect) code - but the blame will be on Prism.\n. @brianlagunas  I maybe misunderstand something, but wouldn't it be better from perf point of view to have\nif (_synchronizationContext != null && _synchronizationContext != SynchronizationContext.Current)\nso that if we're on the same context invoke the event directly?\nOn the other hand, current implementation is closer in behavior to what we had earlier with WeakEventHandlerManager.\n. @brianlagunas This implementation differs from what we had with WeakEventHandlerManager in the following:\nIn WeakEventHandlerManager the SynchronizationContext was captured in the static constructor of the class so it was associated with the main (GUI) thread.\nIn this implementation the SynchronizationContext is captured in the constructor of DelegateCommand which will usually be called in the constructor of View Model.  Hence, View Models should be created on the GUI thread.\nThis is OK for ViewModelLocator, but probably this may be a problem for certain View Model-first scenarios.\n. @brianlagunas Does it work if you omit comparing of the contexts?  Note that with WeakEventHandlerManager it worked. If not, then we need to make this static field be initialized exactly at the time WeakEventHandlerManager was initialized.\n. @brianlagunas  I do not see your current code but note what @powerdude said above: the test methods should return Task instead of void for test system to be able to wait for the test to complete.\n. Ah, I see.\n. > With regards to backwards compatibility I think async interfaces should be additive, they should not replace their synchronous counterparts.\nThis is too broad of a statement.  Consider\ncsharp\npublic interface IConfirmNavigationRequest : INavigationAware\n{\n    void ConfirmNavigationRequest(NavigationContext navigationContext, Action<bool> continuationCallback);\n}\nAre you saying that the interface should also include Task-based method variant?\ncsharp\npublic interface IConfirmNavigationRequest : INavigationAware\n{\n    void ConfirmNavigationRequest(NavigationContext navigationContext, Action<bool> continuationCallback);\n    Task<bool> ConfirmNavigationRequestAsync(NavigationContext navigationContext);\n}\nBut then the user will have to implement the same functionality twice.  And which method should the framework use when it needs to query the view for confirmation?\nSuch decisions are engineering trade-offs between ease of future development, ease of testing, backward compatibility, discoverability, \"least of surprise\", good practices, etc. and should be taken on an interface by interface, method by method basis.\nIf you have any particular suggestion/question I am open for discussion. \n. > I can't wait for having async in place everywhere in prism.\nGrab the code off the GitHub and try it in your projects.  I will appreciate any comments/issue reports.  We may work on cutting the rough edges, if any.\n. > I would imagine having two interfaces as such:\nThis is the way it was implemented.\n\nI would imagine the task based method to be the main implementation with a wrapper for the callback methods.\n\nThis is the way it was implemented.\n. > This should also be the case for INavigateAsync and INavigationAware \nINavigationAware does not contain asynchronous methods.  No need to change it.\n. > I had an earlier try with PR #124 which was implemented as an async wrapper around INavigateAsync.\nI noticed that.  Basically, if you have methods with awaitables, you can generate methods with callbacks out of them almost automatically.  And conversely, if you have methods based on callback technique, you can generate methods with awaitables.\nYou left callback methods in place and attempted to generate awaitable methods on top of them.  I took the opposite direction: core implementation of navigation in RegionNavigationService and core APIs are based on awaitables, and callback variants are derived out of them.  I think this approach better fits future development of Prism.\n. > INavigateAsync now only has async methods, the synchronous ones have been removed.\nThey are provided as extension methods so in user programs they will work as before.\n. > As for INavigationAware I think it would add a lot.\nThis will be an extension to the current Prism algorithms.  Note that methods in the existing INavigationAware interface are synchronous - they do not accept the callback.  It is assumed that when they return the view (model) has completed its operation.\nI think this functionality goes beyond the scope of the current PR.  If you really really need this functionality think about creating a separate ticket requesting it.  Provide the description of your scenario and why you really need it.\n. > IConfirmNavigationRequest, and similar interfaces, should not be considered deprecated. Every single Prism app out there uses this interface, and it is the standard way of writing Prism apps. We are adding support for async/await, not replacing the current stable and mature implementations.\nDeprecated does not mean obsoleted.  We are not going to remove it any time soon.  We just discourage people to use it and encourage to use new APIs since they are way easier to implement.\n. > What was the motivation for changing the interfaces and moving the originals into extension methods?\nImagine that Prism is been created now.  I bet there will be no callback-based API at all.  And this is the future to which we should move.  If we are not forcing users to upgrade their implementation to use new APIs, we are stuck with old APIs forever.  Of course, some trade-offs are needed, and the process should be smooth and easy for the users.\n\nThis way when devs using custom implementations upgrade they can simply implement the new members with a NotImplementedException since they aren't using them. \n\nThis will not work.  Imagine the user supplied custom implementation of IRegionNavigationService with callback methods and throws for awaitable methods.  This means that our implementation of awaitable methods in RegionManager and Region (which delegates to IRegionNavigationService) cannot assume that IRegionNavigationService implement the awaitable portion interface and cannot call it.\nI am relatively new to Prism and do not have the experience you have.  Could you supply me a couple of good representative links to what people do in their custom implementations so I can think about how to help them?\nI am thinking of providing a kind of a wrapper classes that will take an instance implementing the older interface and provide an object implementing the new interface.  Then the users will only have to take their custom implementation with callback methods, create a wrapper around it and put into container and that will work.  This will be the only required change to make old project to run under new version of Prism. \n. > Yes, we are stuck with supporting the current WPF Prism implementation. Any feature we add must be \"additive\". We must not change current implementations.\nAren't you attempting to be a greater Catholic than the Pope?  Every new major Prism Release introduced breaking changes.\n. @brianlagunas \n\nAsync isn't always the best approach. It is only useful in scenarios where it actually makes sense to use any of the Async features. Most of the time, async/await is not needed for region navigation.\n\nThere is an area where async can greatly improve Prism experience, especially for novice users: navigation error handling.\nI often see a problem that RequestNavigate does nothing and the programmer has no clue why.  The actual problem may be that the desired view was not properly registered in container, or there was an error in a custom home-made region adapter, or whatever. Actually, the request generates an error, but to see the error the programmer should either subscribe to an event, or supply a callback to RequestNavigate.\nWith new APIs it is a lot easier and straightforward:\nNavigationResult result = await RequestNavigateAsyc(region, target);\n(Or any equivalent).  This may be the recommended way to do it.\nRandomly taken sample from Stackoverflow: http://stackoverflow.com/questions/5925327/prism-requestnavigate-does-not-work\n. @brianlagunas About tests:\nAll tests are in place and they verify the old APIs.  Thus, all old functionality covered by tests is working properly.  \nSince old functionality is implemented by calling the new APIs, those new APIs are also tested - indirectly.  \nThe changes made to tests relates to the fact that when testing a target object's old API some mock objects are supplied, and the framework calls new APIs on those mocks.  Those places have been changed. \nAnd yes, explicit direct tests for new APIs may be added.\n. @brianlagunas And again, could you give a link to an application with customizations?  The View-Switching sample works OK.\n. @brianlagunas I mentioned @briannoyes several times but seemingly he is busy with other projects and ignoring Prism.  You may need to email him or give a phone call.\n. @brianlagunas To ease migration path for existing projects with customizations I came up with the following.  \nWe will provide old interfaces and wrapper classes converting old interfaces into the new ones in a separate Migration namespace.\nNow suppose the user have\npublic class MyRegionNavigationService : IRegionNavigationService\nand its registration\ncontainer.RegisterType<IRegionNavigationService, MyRegionNavigationService>();\nAll that is needed to be done is the following change:\npublic class MyRegionNavigationService : IRegionNavigationServiceOld\ncsharp\ncontainer.RegisterType<IRegionNavigationServiceOld, MyRegionNavigationService>();\ncontainer.RegisterType<IRegionNavigationService, RegionNavigationServiceWrapper>();\nand that's it.\nExpect an update to PR shortly.\n. Note that in fact there is no changes to the functionality or the semantics of the APIs (except for GoBack/GoForward on the journal which were a bit extended by returning the result).  They just changed the form - instead of using callbacks, they are using awaitables.  And there is full semantic correspondence between those two variants.\nAlthough many files were affected, most of the changes relate to transition from one of those APIs to another, and this is pure boilerplate code which is absolutely mechanical.\nThe only non-trivial changes are in classes RegionNavigationService and RegionNavigationJournal.  Previously, those classes provided callback-based APIs, and to do that they relied on callback-based APIs in other classes.  Now they provide awaitable-based APIs, and to do that they rely on awaitable-based APIs in other classes.\n. @brianlagunas \n\nThat's ugly. We aren't going to create new interfaces postfixed with \"Old\"\n\nAbsolutely agree.  I did not put enough thought into the names and importance of them.\n. @brianlagunas \n\nThis points to issues with the feature implementation and maintaining backwards compatibility.\n\nI would say instead that this is an elegant solution to the backward compatibility.\nLook:\nIf the program does not use custom implementations of interfaces, it will work with new version of Prism out of the box.\nIf it does, it can be fixed with no more than twelve lines of code.  Namely, four lines for each of RegionNavigationService, RegionNavigationJournal, and RegionNavigationManager.  E.g.: the user has\n```\npublic class MyRegionNavigationService : IRegionNavigationService \ncontainer.RegisterType(); \n```\nChange that to\n```\nusing Prism.Regions.CallbackWrappers;\npublic class MyRegionNavigationService : IRegionNavigationServiceWithCallbacks\ncontainer.RegisterType(); \ncontainer.RegisterType(); \n```\nThe class RegionNavigationServiceWithCallbacksWrapper and interface IRegionNavigationServiceWithCallbacks are provided in Prism.Regions.CallbackWrappers namespace.\nAfter that the program runs as before.   Moreover, you immediately get all the benefits of async/await to use in your program - you can start using Task-based APIs and you do not need to modify your implementation of MyRegionNavigationService. \n. New variant will be prepared.\n. New variant will be prepared.\n. We need to compare approachs against:\nBackward compatibility for\n- Ordinary programs\n- Programs that implement custom RegionNavigationService, RegionNavigationJournal, RegionManager\n- Mock objects created by deriving from interfaces IRegionManager, etc.\n- Mocks created by Moq and other mocking libraries\nPerformance\nAmount of code to maintain\nEase of future development - adding features like #119, #30.\nEase of creation of custom implementations of IRegionNavigationService, etc.\n. About approach 1:\nAdvanced users may start using this approach immediately, no need to wait for this to become part of Prism.  Just grab the newly added files from the PR, add them to your project, register new RegionNavigationService in the container and voila, it works.\nFor novice users, however, it'd better be part of Prism with corresponding changes in the documentation.\n. @brianlagunas \n\nMy only concern is the testability of the extension methods in Prism applications. Those are a pain to test, and if the methods were added to the interface, it would be easier to mock/test.\n\nI hear you.  You and @briannoyes finally convinced me.  In fact, interfaces in Prism.Regions have different nature and should be treated differently.\n\nthere are those interfaces in Prism that users implement all the time and that changing in any way would be breaking - i.e. INavigationAware and IConfirmNavigationRequest. Those should remain as is and new async counterparts introduced. \n\nWe do not change those and add IConfirmNavigationRequestAsync.  Period.\n\nthere are interfaces like IRegionManager that no one in their right mind is going to try to implement their own on\n\nNot quite true.  In fact, users kind of implement IRegionManager all the time when they create mock classes for IRegionManager.  \nHowever, IRegionManager seems to be the interface which is most frequently mocked by the users: kind of \"when command is executed, RequestNavigate method is called\".  We simplify this as much as possible if include all possible overloads right into interface.  If the users use Moq, it become straightforward.  If they derive a class from IRegionManager, they may throw NotImplementedException on added methods which is done in one click in VS.  Note also that the library itself never calls IReqionManager.RequestNavigate.\n\nthere are those that most users would rarely implement (i.e. INavigationService)\n\nINavigateAsync and derivatives - IRegion, IRegionNavigationService are different.  They call each other.  E.g., Region calls NavigationService.  If there is a multitude of overloads for RequestNavigate on RegionNavigationService, which one should the Region call?  There is no any reasonable criteria to decide.  E.g., the Region.RequestNavigate(Uri target) may substitute null for parameters, or it may call RegionNavigationService which will substitute null for parameters.\nThus, I think those interfaces should provide only one method - full-fledged asynchronous\nTask<NavigationResult> RequestNavigateAsync(Uri target, NavigationParameters parameters)\nand everything else provided as extension methods.\nInternal implementation should be using this method without fall through to callback-based method.  This way we will be in a better position in the future when we will be thinking of unifying approaches across platforms.\nThere will be minor issues when upgrading older projects which may contain custom implementations of RegionNavigationService or some mocking for IRegion.  Those will need to be modified.  However, upgrading RegionNavigationService from callback-interface to async-interface is almost automatic (I provided the example).  Upgrading the mocks is also trivial.  Moreover, mocking Task-based API is much more simple than mocking callback-based API.  That is, we are actually simplifying the job of developers.\nI am going to prepare a new PR.\nDo we need to also include an implementation for #119?\n. @pdinnissen Actually, there is nothing special in adding async/await.  The RequestNavigate method has always been asynchronous.  \"Asynchronous\" means that the call returns before the actual job initiated by that call has been done.  \nThere are many patterns for asynchronous APIs: https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/\nIn most cases, an asynchronous API following one pattern can be easily, mechanically transformed to another API.  In particular, the form\nvoid RequestNavigate(... , Action<NavigationResult> callback);\ncan be expressed as a Task-based API\nTask<NavigationResult> RequestNavigate(...);\nIn the first form, the method returns immediately, but actual navigation is completed when the callback is called.  In the second form, the method also returns immediately, but the navigation is completed when the returned Task has run to completion.\nIf you have an API in one of the forms, you can easily switch to another, as is shown in https://github.com/PrismLibrary/Prism/pull/656.\nIn fact, you do not need to modify Prism to use Task-based asynchronous API.  It is sufficient to add extensions methods to your project.. @brianlagunas \n\nAs far as adding this feature goes, instead of trying to modify what's there and breaking existing apps, what about if we introduce an new \"opt-in\" region service called IRegionNavigationService which is async friendly?\n\nNot sure I quite understand your suggestion.  Users do not call IRegionNavigationService methods directly but rather use RegionManager and Region methods which, in turn, call to IRegionNavigationService.  Thus it is a problem mainly with RegionManager.. Now I think that probably @brianlagunas is right and real practical benefits of introducing Task-based async RequestNavigate methods not worth the backward compatibility troubles.\nRequestNavigate methods runs synchronously (that is, navigation completed when the RequestNavigate method returns) unless the current view implements IConfirmNavigationRequest and ConfirmNavigationRequest runs asynchronously, which is a rear case.  Thus, in most cases the users just run RequestNavigate overload without the callback parameter.\nEven when IConfirmNavigationRequest is implemented and ConfirmNavigationRequest is running asynchronously, the real power of async/await might be used if the user have some logic after the await RequestNavigate(...).  This also does not seem to be the case: seemingly, in most cases, RequestNavigate is the last method call.  It is symptomatic that in sample applications such as StockTrader RI and View-Switching Navigation QuickStart they do not even bother to provide a callback in RequestNavigate methods.\nThe low activity in this thread also is an indication that most users do not really want this feature.\nThus, the only practical benefit is error handling after RequestNavigate: await RequestNavigate(...) joins the asynchronous thread of execution and provides convenient access to NavigationResult.  The NavigationResult may contain two pieces of information: a Boolean value for the case when navigation was rejected by IConfirmNavigationRequest (and in most cases, nobody cares - see above), or an exception when the target view was not properly registered in the container.  The second case might be useful for novice users for troubleshooting during very initial stage of development but not really important for mature applications.. Fix it?\n. Verification: https://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Regions/RegionManager.cs#L379\ncf.\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Regions/RegionManager.cs#L322\n. The attached project uses CustomPopUpWindowAction.  This may not be a problem in Prism.\n. @brianlagunas In Prism.WPF there is a \"View Model-first\" approach to navigation.  It does not use view model locator.  I used it to great benefit in testing.  Will there be something analogous on other platforms? (I new very little about other platforms, just curious.)\n. I have a fairly successful Prism.WPF application which utilizes viewmodel-first approach.  I think some day I will need to port it to UWP and/or Xamarin.\nRemember, MVVM is about testing decoupled view models.  In my application I am able to do acceptance tests using view model without actual views (some mock views are provided, though).  No viewmodel locator, but datatemplates in the views.  The tests cover complete user scenarios: from program start to program termination.\nWhat are my options with new Prism on UWP and Xamarin?\nI do not care about a particular form of NavigateAsync with templated view model, in WPF I used strings anyway.  But seemingly the solution for navigation with view models just boils down to viewmodel locator which requires views anyway.\n. @wldevries You may be interested in this.\n. @wldevries \n1. Direct use of Dispatcher makes it very difficult to write tests.  Synchronization context is easier to control.\n2.  Actually, CallbackHelper.AwaitCallbackResult is very nice and may have usages in a lot of other places.  I would even make it public.  It works well for almost all cases except for Raise which is actually blocking.  Thus, I would prefer to leave AwaitCallbackResult without modification and implement RaiseAsync without the use of AwaitCallbackResult.\n3. Ignoring the task completely will eat up exceptions.\n. @wldevries What do you think?\n. @wldevries It's neater only because it does not handle exceptions.  If the popup window crashes the user has no chance to catch the crash.\n. @wldevries Simplified it :)\n. @wldevries \nAdded an option to execute the old variant - sometimes it is needed.  E.g.:\nA program has a method to check whether a document is modified and popup a window suggesting the user to save it.  The user may confirm or refuse.\nThis method may be called in two places: when a user closes a document to open a new one; and also we may have a hook into [x] button of the program window (Window.Closing event).  In the hook we would call the same method and return true/false, allowing/not allowing to close the window.\nBut Window.Closing callback should be executed synchronously and provide true/false value before returning.\nNow the method may be written having the executeSynchronously parameter, defaulting to false.  This allows to use the method in the program normally and to unit test it.  From the Window.Closing callback the method will be called with executeSynchronously = true.\n. Sample code.\n``` csharp\npublic async Task CheckForUnsaved(bool executeSynchronously)\n{\n    if (!HasChanges())\n    {\n        return true;\n    }\nCheckForUnsavedNotification notification = await this.InteractionRequest.RaiseAsync(new CheckForUnsavedNotification(), executeSynchronously);\n\nswitch (notification.Selection)\n{\n    case Selection.Cancelled:\n        return false;\n    case Selection.Save:\n        await SaveAsync(executeSynchronously);\n        return true;\n    case Selection.DiscardChanges:\n        return true;\n}\n\n}\n```\ncsharp\npublic async Task OnNewDocument()\n{\n    if (await CheckForUnsaved(false)) //\n    {\n        // initialize new document\n    }\n}\ncsharp\npublic void OnWindowClosing(object sender, CancelEventArgs args)\n{\n    args.Cancel = !CheckForUnsaved(true).Result;\n}\nNote that \ncsharp\npublic async void OnClosing(object sender, CancelEventArgs args)\n{\n    args.Cancel = !await CheckForUnsaved(false);\n}\nwill close the window because it returns before CheckForUnsaved completed.\nAnd\ncsharp\npublic void OnWindowClosing(object sender, CancelEventArgs args)\n{\n    args.Cancel = !CheckForUnsaved(false).Result; \n}\nwill deadlock because CheckForUnsaved will attempt to run code on the GUI thread which is blocked by accessing the Result property.\nThus, without this little trick with executeSynchronously argument you will need a separate, all-synchronous variant of CheckForUnsaved, including the Save method.\nThe behavior of CheckForUnsaved method is pretty unit testable using a mock event handler for Raise event.\n. @brianlagunas If the sample does not convince you, you decide what to do: there is already a (in fact, synchronous) version of @wldevries, and there is an asynchronous version which is called now RaiseImplAsync.\n1. Leave wldevries and remove this PR.\n2. Replace wldevries version by RaiseImplAsync\n3. Have both versions under different names (from which I will be able to construct the method I need).\n. @brianlagunas I agree that it is better to remove the current half-baked async implementation than leaving it.\nHowever, the case of RaiseAsync is one of the most difficult ones in the async world due to the nature of Dispatcher UI thread and blocking ShowDialog call with its nested message loop.  I would prefer that Prism provide some solution to this rather than leaving users on their own.\n. @wldevries Agree with what?   ;-)\n. @wldevries You're right.  FxCop always warns about that.  The reason is that other .NET languages (not C#) may not have a concept of default parameters.\n. @wldevries Overload added.\n. @joacar Thanks!\n. @brianlagunas Explained here: https://github.com/PrismLibrary/Prism/issues/678#issuecomment-234223936\nIn short, this allows to write a single piece of code that a) can be run synchronously and b) can be unit tested.\n. @dansiegel Then you end up in writing duplicated code - one code for sync version, another for async.  And the sync version is not testable.\n. @brianlagunas I already have this in my application.  The point is to have this functionality available to all developers using Prism.  If you continue your reasoning, you end up with the Prism is not needed at all - developers can write all the code by themselves.  What is the purpose of having a library?  They may invent and code it by themselves.\n. @dansiegel @brianlagunas  See sample code in related issue: https://github.com/PrismLibrary/Prism/issues/678#issuecomment-238692910\n. @dansiegel \ncsharp\npublic T Raise(T context)\n{\n    return CallbackHelper.AwaitCallbackResult<T>(callback => this.Raise(context, callback));\n}\nYou just do not understand.  \"T Raise(T context)\" already exists.  It is a base synchronous version.  AwaitCallbackResult returns not T but Task.  And you call Raise() recursively.\n. @brianlagunas @dansiegel As it turns out, I am kinda reinvented the wheel here with the executeSynchronously parameter.  This trick was suggested by Stephen Toub and elaborated on by Stephen Cleary in Async Programming - Brownfield Async Development, section The Flag Argument Hack.\ncsharp\npublic interface IDataService\n{\n  string Get(int id);\n  Task<string> GetAsync(int id);\n  Task<string> GetCoreAsync(int id, bool sync);\n}\nStephenCleary:\n\nIt\u2019s a great approach and my favorite of all these hacks.\n it\u2019s still my favorite of the hacks.\n\nNote that the code in Figure 11 in the article where the sync argument propagates up into the business logic is fully analogous to the sample I gave in https://github.com/PrismLibrary/Prism/issues/678#issuecomment-238692910\n. It should be \nthis.UpdateValue = \"Please wait...\";\n. There is no difference in behavior.  Provide the code that does not work for you.\n. @deb1bhu  You should not set the value of the underlying field before calling SetProperty.  SetProperty sees that the value did not changed and does nothing:\nupdateValue1 = value;  // <<<< remove that\nSetProperty(ref _updateValue1, value);\n. Why not set the subfolder as the ModulePath of the DirectoryModuleCatalog?\n. With the current Prism version, you can have two DirectoryModuleCatalogs, one for directory and another for subdirectory, and combine them using https://github.com/PrismLibrary/Prism-Samples-Wpf/blob/master/Modularity/ModularityWithUnity/ModularityWithUnity.Desktop/AggregateModuleCatalog.cs\n. More likely is that CanExecute is called first time when the view is initially bound to view model.  At that time the selected item is uninitialized (null).\n. I have similar setup in a _number of projects and cannot confirm that.  Could you provide a project?\n. @opcodewriter Note that the item is provided by the view as the parameter to the command.  Thus, it actually depends on your view and not view model.\n. @opcodewriter \ncsharp\nRunItemCmd = new DelegateCommand(\n                        () => { ... SelectedItem ...  }, \n                        () => SelectedItem != null)\n            .ObservesProperty(() => SelectedItem);\n. @opcodewriter Again, it depends on what is in your view.\nSelectedItem is a dependency property of the ListView.  You click in the list and the value of SelectedItem is being modified.  During modification, it triggers a two-way binding (I suppose that is in your view) which modifies SelectedItem in view model which triggers RaiseCanExecuteChange of the command which triggers a request for CanExecute with a parameter.  But a parameter (I suppose that is in your view) is again that same SelectedItem property which is still being modified...\n. @opcodewriter No.  The SelectedItem dependency property, for obtaining its value, does not query the SelectedItem in the view model.   It has its own value.  And the two-way binging attempts to synchronize the two.\n. @brianlagunas Actually he uses DelegateCommand\n. What happens is this: DelegateCommand is subscribing to PropertyChanged(SelectedItem) event of view model in the constructor of view model.  Later, when the view is attached to the view model (DataContext assignment), CommandParameter is also subscribing to the same PropertyChanged event.  Event handlers are executed in the same order.  When CanExecute is evaluated for the first handler, the second has not been executed and hence CommandParameter has the old value.\n@opcodewriter You may also bind CommandParameter to SelectedItem dependency property of your ListView and not of view model.\n. @opcodewriter CommandParameter=\"{Binding SelectedItem}\" means \"take the value from view model, pass it to view, use it as parameter to the command and execute that command in the view model.  No need to pass the value back and forth between view and view model.  Use the command without parameter.\nCommands with parameters were designed for the following:\n``` xaml\n\n\n```\n. @opcodewriter \n\nThis issue shouldn't exist, things are too complex for such a simple purpose...\n\nThe problem is not in Prism implementation, it is intrinsic to the command with parameter.  Google \"commandparameter canexecute\"\n. In my opinion, the real problem with those code snippets is the following:\nWhen RaiseCanExecuteChanged is triggered by a change of view model's SelectedItem, CanExecute is invoked, but the argument provided to CanExecute by the view corresponds to the previous value of SelectedItem.\nA workaround (already mentioned) is not to use the parameter but to use view model's SelectedItem in implementation of CanExecute.\nMaybe it is possible to arrange the view differently so that CommandParameter passed to CanExecute reflected the new state of the view's SelectedItem, but it will be counterintuitive anyways.\n. Another workaround might be the following:\nxaml\n<ListView Name=\"LV\" SelectedItem=\"{Binding SelectedItem, Delay=1}\" ItemsSource=\"{Binding Items}\" />\n. Is automatic download of NuGet packages enabled in VS?\n. Most likely it is a problem with System.Windows.Interactivity.dll.  It used to be included with Prism libraries, but now it is not (but there are plans to include it again).  Latest versions of VS include it.  But if you have previous versions of VS, try to download and install Expression Blend SDK.\n. May be this is the same as #213\n. This is needed if you do View Model-first.\n. > Only if you are relying on implicit templates to represent your View which I would never recommend.\nBut the documentation says Navigation Using the Prism Library for WPF\n\nNote: The preceding description illustrates view-first navigation, where the URI refers to the name of the view type, as it is exported or registered with the container. With view-first navigation, the dependent view model is created as a dependency of the view. An alternative approach is to use view model\u2013first navigation, where the navigation URI refers to the name of the view model type, as it is exported or registered with the container. View model\u2013first navigation is useful when the view is defined as a data template, or when you want your navigation scheme to be defined independently of the views.\n\n.\n\nThat's slow as hell \n\nPremature optimization, eeh?\n\nintroduces a number of other development pains.\n\nIt allows to run complete user scenarios with real view models in acceptance tests.\nAnd the whole point of this ticket is to remove one of the pain points.\n. To summarize:\na) this change does not affect existing code and view-first scenarios.  \nb) But it allows creation of regions in data templates which is useful in view model-first scenarios.  \nWhat are the objections to that?\n. @brianlagunas There are obvious difficulties in doing this, because the algorithm consists of traversing the visual tree.  The change is in handling not only the Parent node but also the TemplatedParent.  \nNote that currently the tests for RegionManagerRegistrationBehavior do not include any traversing of visual tree.\nNeed to think how this can be done.\n. @brianlagunas Test added.\n. The issue is deeper than just \"bad code\".  During navigation, the systems informs the current view that it is navigating from it by the call to OnNavigatedFrom, then creates a new view, activates it, and informs it that it was activated by the call to OnNavigatedTo.\nNow, if those methods were asynchronous, what the system is supposed to do: will it wait for the methods to complete or not?\nIf the system waits for the methods to complete, then what the UI will look like during the execution of OnNavigatedFrom and what the user is supposed to do during this time?  The navigation started, the old view is supposed to be non-functional, but the new view, the target of the navigation, has not been created and activated yet.  The same with the new target view during the execution of OnNavigatedTo.\nIf the system just starts those asynchronous methods and does not wait for their completion, then it is no different from implementing those methods as \"async void\".  This is the same \"fire and forget\".\nThus, actually you need to have a proper design of your views and navigation between them.  E.g., the old view may implement IConfirmNavigationRequestAsync (for which the system will wait) and during the execution of CanNavigateAsync display a window asking the user to wait while the data is being saved.  Something similar with the target view: have it displaying some \"Please wait...\" message until the data was properly initialized.\n. See http://stackoverflow.com/questions/38040922/use-asynchonous-tasks-with-inavigationaware-with-prism but you will also need to catch possible exception from \"await\".\n. Replaced by #711 \n. > Is this something that we would like in Prism or is this considered to be to application specific requirement?\nPrism for WPF already has InvokeCommandAction which is almost the same.\n. I think this is by design.  DelegateCommand is an asynchronous command, even if it was defined via a synchronous Action:\ncsharp\n       _executeMethod = (arg) => { executeMethod(arg); return Task.Delay(0); };\nCorrect method of testing the command is instead of\ncsharp\n[Test]\npublic void Test_should_fail_because_of_thrown_exception()\n{\n    new DelegateCommand(() => { throw new Exception(); }).Execute();\n}\nto use \ncsharp\n[Test]\npublic async Task Test_should_fail_because_of_thrown_exception()\n{\n    var command = new DelegateCommand(() => { throw new Exception(); })\n    await command.Execute();\n}\nThe method ICommand.Execute has nothing to do with swallowing exceptions in this case.  ICommand.Execute is calling DelegateCommand.Execute and not conversely.\nasync void ICommand.Execute is called by the WPF and is in fact an event handler, and it is OK to have async void event handlers.\nThus, if you want to test a command, test the Task DelegateCommand.Execute method.\nNote also that if a command is defined via a synchronous Action, the Action is executed synchronously before ICommand.Execute returns.  \nThus, having the asynchronous DelegateCommand provides the same behavior as a fully synchronous variant (in the previous versions of Prism) except for the slight difference in exception handling.\nI think that was the design decision to not have two separate DelegateCommands - sync and async.\n. Note also that if you define\ncsharp\nvoid ICommand.Execute(object parameter)\n{\n    Execute(parameter).Wait();\n}\nin most cases it will deadlock with truly asynchronous commands.  For instance, the command will need to retrieve some data asynchronously and then update some GUI elements.   Updating the GUI will block because the GUI thread is in Wait() waiting for the command to complete.\n. @dbeavon The DelegateCommand.Execute() returns a Task object which contains the status and result of the operation, in particular the thrown exceptions.  If you want your exceptions to propagate, you need to \"observe\" this task - e.g., await DelegateCommand.Execute().  Otherwise, the exceptions is kept in the Task until it is garbage-collected (and even then it depends...).\n. Unfortunately this won't help when WPF calls your command via some binding (and this is the main use case).\n. @brianlagunas I agree that having a separate AsyncDelegateCommand might be a better choice.  Troubles with handling exceptions are inherent for truly asynchronous operations, but users of plain old synchronous methods should not suffer from that.  And factory method FromAsyncHandler seems strange at a very least.  (Although IAsyncCommand seems pointless since WPF does not know about it.)\nBut what about backward compatibility?\n. @brianlagunas Just a quick thought:\nMake DelegateCommand.Execute() return already-completed Task.\nMake AsyncDelegateCommand inherit from DelegateCommand.\nMake DelegateCommand.FromAsyncHandler return AsyncDelegateCommand instead of DelegateCommand.\n. @brianlagunas It seems that sync and async cases are so different that DelegateCommandBase cannot have any code for Execute (except for delegating to derived classes).  But all CanExecute stuff may all be there.\n. Created a PR #746 to resolve this issue along the lines of https://github.com/PrismLibrary/Prism/issues/724#issuecomment-242157959 keeping as much backward compatibility as possible.\n. This seems to be a work in progress.  See Brian Noyes' comments in #45 \n. Extension methods of this kind can be easily added by a developer to his project.  IMHO, those particular extensions do not look universal enough to be included into the library:\nNot everybody wants to have the default value for type when the parameter is missing; some will want to throw.\nFrom performance point of view, this includes double scanning of the parameter list plus the LINQ overhead.   And if somebody writes if (HasParameter) ReadParameter, then three times scanning and twice the LINQ.\nAlso, not everybody will be happy with unconditional type conversion.  Some may prefer strict type checking.\n. @noufionline It depends on what you need for your application.  If your extensions is what you need, just use them.\n. I'm sorry, I was wrong.  Sync context is in DelegateCommand.  But the behavior changed as compared to sync context in WeakEventManager.  Now sync context is captured in the constructor of the DelegateCommand, which typically means in the constructor of the view model.  Make sure the view model is created on the UI thread.\n. @hpcsc You may try setting a breakpoint in the view model constructor and see on what thread it is executed.\n. @hpcsc Also you may add the following lines to your constructor to examine the current sync context:\ncsharp\nSynchronizationContext context = SynchronizationContext.Current;\nType contextType = context.GetType();\nThe type should be DispatcherSynchronizationContext.\n. @brianlagunas I prepared a fix, but may be that was the design?  Although I cannot imagine the purpose of such design...\n. @nickkazepis As a temporary fix you may override the method\nprotected override Execute(object parameter)\nNote the difference in the type of the parameter.\n. This is the story: http://compositewpf.codeplex.com/workitem/8101\nInitially (v4) DelegateCommand.Execute was supposed to only be called programmatically, not by WPF.\nThen (v5) they thought they made it extendable by making it virtual.  \nNow I think this is a bug.  If you should not derive from DelegateCommand, why the method was made virtual?\n. If someone override it, it will work only when the command is called programmatically.  It will not work for typical binding scenarios.  E.g., someone added logging...  What's the use of logging if it works in test but does not work in real program?\n. It was \"by design\" in v4, but in v5 they made an explicit attempt to make DelegateCommand extendable What's New in Prism Library 5.0 for WPF:\n\nCodePlex Issues Resolved\n8101: DelegateCommand is not extendable.\n. Added a fix for non-generic DelegateCommand\n. @nickkazepis There is another issue related to DelegateCommand under discussion: #724.\n@brianlagunas If you ever going to change the DelegateCommand implementation, a fix for this issue may also be included.\n. @nickkazepis Try this:\n\ncsharp\npublic MyCommand : DelegateCommand<T>, ICommand\n{\n    async void ICommand.Execute(object parameter)\n    {\n        Log(...);\n        await Execute(parameter);\n    }\n}\n. @dansiegel Cf. #704 \n. This does not seem to be a Prism-specific question.\nhttps://blogs.msdn.microsoft.com/lucian/2014/03/03/async-re-entrancy-and-the-patterns-to-deal-with-it/\n. You can use ModuleCatalog.AddModule(typeof(MyModule));\n. https://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Modularity/ModuleCatalog.cs#L239\n. @noufionline WPF or Xamarin?\n. @brianlagunas I am not aware of any problems with normal user code.\nHowever, if somebody inherited from DelegateCommand, then many things could happen.  E.g., they could override protected virtual async Task Execute(object parameter) from DelegateCommandBase to insert some functionality.  This will break, because this method is no longer called.\n. And yet I do not think this is the way to go.\n1.  This keeps user code backward compatibility for DelegateCommand*, but CompositeCommand still has all issues with exceptions.  Maybe we need a separate AsyncCompositeCommand, but that will be a breaking change.\n2.  This does not solve #732.  To resolve this would be a breaking change.  I still think that #732 is a bug.  I think they were trying to follow this pattern: https://msdn.microsoft.com/en-us/library/aa664593(v=vs.71).aspx\n\nSince explicit interface member implementations cannot be declared virtual, it is not possible to override an explicit interface member implementation. However, it is perfectly valid for an explicit interface member implementation to call another method, and that other method can be declared virtual to allow derived classes to override it. For example\n\ncsharp\ninterface IControl\n{\n   void Paint();\n}\nclass Control: IControl\n{\n   void IControl.Paint() { PaintControl(); }\n   protected virtual void PaintControl() {...}\n}\nclass TextBox: Control\n{\n   protected override void PaintControl() {...}\n}\nHowever for Execute methods in DelegateCommand* this was not implemented correctly - the following are all different methods:\ncsharp\nprotected virtual async void Execute(object parameter);\npublic virtual Task Execute(T parameter);\npublic virtual void Execute();\nChanging that in any future version of commands will be a breaking change anyway.\n. I second removing async stuff from DelegateCommand.  Since the commanding framework in XAML calls a synchronous variant of Execute, all the async stuff is just misleading.\n. You should do Container.RegisterType<ITestService, TestService>(new ContainerControlledLifetimeManager());\n. Seemingly you are using not Prism validation (UWP only) but the package Prism.Validation from Nuget which is a different beast.  Probably you should change using Prism.Windows.Validation to using Prism.Validation.\n. Navigation Using the Prism Library for WPF:\n\nNote: The navigation journal can only be used for region-based navigation operations that are coordinated by the region navigation service. If you use view discovery or view injection to implement navigation within a region, the navigation journal will not be updated during navigation and cannot be used to navigate forward or backward within that region.\n. @brianlagunas This one is different from #704.  Here the methods are synchronous and it is the developer's responsibility to implement them as fast as possible to create smooth end-user experience.  This is the same as all ing and ed events in Windows.\n\nIn #704, the framework defines the method as asynchronous and thus explicitly allowed it to be long-running, bringing the responsibility for smooth user experience to the framework.\n. https://github.com/PrismLibrary/Prism/blob/DelegateCommand-Improvements/Source/Prism/Commands/DelegateCommandBase.cs#L27:\ncsharp\nprotected readonly Func<object, Task> _executeMethod;\nTasks are not needed anymore; _executeMethod should be Action<object>.\n. This implementation does not provide good experience if someone wants to override the execute method (e.g., to add logging).  I would expect to have public virtual void Execute(); in DelegateCommand and public virtual void Execute(T parameter); in DelegateCommand<T>.   Those method should be called when a command is invoked by XAML framework via ICommand.\n. > Just so you know,  Execute(T parmater)  is only used when you call the command in code against the DelegateCommand type.\nThis is only in Prism 5 incorrect implementation.  \nOne of possible implementations:\n``` csharp\nvoid ICommand.Execute(object parameter)\n{\n    this.Execute((T)parameter);\n}\npublic virtual void Execute(T parameter)\n{\n    base.Execute(parameter);\n}\n```\n. The benefit?  It solves the problem.  You override Execute(T) in the derived class, and both XAML and developer are executing the same method.\n. Suppose you have\ncsharp\nclass MyCommand<T> : DelegateCommand<T>\n{\n    public override Execute(T parameter)\n    {\n        base.Execute(parameter);\n        // additional code\n    }\n}\nXAML framework will call DelegateCommand.ICommand.Execute and then:\nMyCommand.Execute\n    DelegateCommand.Execute(T)\n        DelegateCommandBase.Execute(object)\n            _executeMethod\n    // additional code\n. Exactly.  Or the lack of parameter.  In the present form it is doable but not obvious.  This is what I called \"not a good experience\".\n. You are right.  Moreover, there is a corner case of DelegateCommand<object>.  Also, my sample assumes that DelegateCommand and DelegateCommand<T> both explicitly implement ICommand.Execute which I do not like.\nActually, this was \"one of possible implementation\" which was shorter to type.  Real implementation could be\ncsharp\npublic class DelegateCommandBase : ICommand\n{\n    ICommand.Execute(object parameter)\n    {\n        OnExecute(parameter);\n    }\n    protected virtual void OnExecute(object parameter)\n    {\n        Doexecute(parameter);\n    }\n    protected void DoExecute(object parameter)\n    {\n        _executeMethod(parameter);\n    }\n}\npublic class DelegateCommand<T> : DelegateCommandBase\n{\n    protected override OnExecute(object parameter)\n    {\n        Execute((T) parameter);\n    }\n    public virtual Execute(T parameter)\n    {\n        DoExecute(parameter);\n    }\n}\npublic class MyCommand<T> : DelegateCommand<T>\n{\n    public override Execute(T parameter)\n    {\n        base.Execute(parameter);\n        // extra stuff\n    }\n}\n. > I pushed an update to the branch. Check it out.\nYou ended up in a variant they had in Prism 4.  These commands are not overridable in a sense that you cannot override Execute(T parameter), and overriding Execute(object parameter) (especially for parameter-less command) in not obvious (poor experience).\n. And I doubt that it will ever work: when you call base.Execute(parameter) from the DelegateCommand, will it execute the override of the Execute method in the derived class?\n. After some more thinking...\nWe already decided that async was a bad idea.\nNow I think that the entire concept of overridable Execute method is conceptually wrong.\nWhen you create a DelegateCommand you provide a delegate which contains the code that needs to be executed.  Why didn't you put all you need there?  The delegate command isn't something (a framework) that is executing its own code and providing you a hook for modifications.  DelegateCommand does just that - executes your delegate.\nIn a class derived from the DelegateCommand you do not need two extension points - one in the base constructor parameters, and the other being overridable Execute method.  If you have the two, a question arises how they should relate to each other.\nEverything you would write in the overridden Execute method you could as well write in the constructor parameter delegate.\nIf you need some extra functionality common to all your commands, you can go something like this:\ncsharp\npublic class MyCommand<T> : DelegateCommand<T>\n{\n    private bool isRunning;\n    public MyCommand(Action<T> action)\n        : base((o) =>\n            {\n                 isRunning = true;\n                 action(o);\n                 isRunning = false;\n            });\n}\nThus, I suggest to remove \"virtual\" from the Execute method in DelegateCommandBase, essentially returning to Prism 4 variant.\n. Note also that developers (@nickkazepis) ended up in exactly this approach: https://github.com/PrismLibrary/Prism/pull/746#issuecomment-245039614\n. Complete sample:\ncsharp\npublic class MyCommand<T> : DelegateCommand<T>\n{\n    private bool isRunning;\n    public MyCommand(Func<T, Task> executeMethod, Func<T, bool> canExecuteMethod)\n        : base(async (o) =>\n            {\n                 isRunning = true;\n                 await executeMethod(o);\n                 isRunning = false;\n            },\n            (o) => !isRunning && canExecuteMethod(o));\n}\n. @brianlagunas But DelegateCommandBase is not overridable now.  Having DelegateCommand sealed will make creating custom commands more difficult than it could be.\n. But then if you want to create a custom command you'll need to repeat all the stuff that already is in DelegateCommand: casting of object parameters to T in constructors and, in particular, dealing with T which is a value type.  It's doable but not a great experience.\n. @Sockenfresser As I mentioned in another thread, the notion of async command is misleading.  In fact it gives you a (false) impression that you did your code correctly, while actually it provided you no guarantees.\nWith an async command you start some asynchronous process in your application which executes independently of the main (GUI) thread of the program.  This is no different from starting a Task in a fully synchronous IComman.Execute method.  How this asynchronous process interacts with the rest of the program is fully dependent on the particular details of the methods and data structures and the async command cannot add anything to it.\nWhen you do an await MyCommand.Execute() in your test, generally speaking you are doing not the same thing as the real program does: the real program will not do an await.  The GUI will run further immediately after Execute() was called.  You may assert the correctness of the program state after the await and it may be OK, but in a real program the GUI or other threads in the program may access the program state before the async command completed.  Thus, these tests gives you a false impression that you tested it correctly.  Sometimes, yes, the tests are valid, but there may be a lot of situation where they are not or not cover all the possible cases of program behavior.\n. @pdinnissen Suppose you have a button that is called \"Update\" which retrieves some data from a web service, and it is implemented as async method.  In real program you may want to disable the Update button while the download is in progress; also there may be another \"Save\" button which also needs to be disabled while downloading.\nRunning await UpdateCommand.Execute(); in a test is not enough.\n. @Sockenfresser \n\nIn fact the implementation of the DelegateCommand does exactly this, an  await this.Execute(parameter);  so what I'm testing is exactly what the UI triggers here.\n\nNo, not the same.  await command.Execute(); in a test waits for the command to complete while ICommand.Execute in a real XAML application does not (although internally it does await Execute();, but in an async void method).\n. @Sockenfresser I am not saying that you cannot use Task Execute() in tests for good...  I am saying that there are better ways.\nAn async command starts some parallel process in your application, and the application does not actually wait for the async task to complete.  If it ever waits, it waits for something different.  In many cases this will be some other synchronization objects (and not the Task of the command) that is used to synchronize the process with the rest of the application.\nIn my example of Update command above this could be some IsUpdating property, with an event for changes of this property (INotifyPropertyChanged or other).  It will be much more straightforward and clean in a test to execute a command and then wait for the IsUpdating property to become false as an indication that the command completed.\nHaving Task Execute() and using it in tests allows you to cut the corners of the real world synchronization of your asynchronous process and the rest of the program.\nI personally do not think that Prism should encourage this.  Thus I vote against Task Execute method for tests.\n. @pdinnissen @Sockenfresser If you think you really need async commands, one of the most sophisticated implementations is this one: https://msdn.microsoft.com/magazine/dn630647.aspx\n. One more thought on why async commands (such as Cleary's) are not ready for prime time.\nAsync commands just start some asynchronous process inside an application.  What happens if the user attempts to execute the command second time while the previous invocation is still running?  In the Cleary's implementation the command is disabled while the first invocation is running.\nBut there are other perfectly valid scenarios:\n- Allow multiple invocations;  run them in parallel.  E.g., a \"Download\" button while the user selects a file name in another control.\n- Allow multiple invocations; run them sequentially.\n- Cancel previous invocation and start the command a-new.  E.g., a \"Refresh\" button.\n- Do not disable the command, but just do nothing.\nYou may even need all this patterns in a single program.\nI do not see a single implementation of async command that will allow all this scenarios.\n. @Sockenfresser It's just more difficult to override the \"default behavior\" than to implement those patterns from scratch.\n. @pdinnissen The plain old synchronous DelegateCommand does allow all this scenarios because the implementation of all this scenarios is up to you in the delegates you use to create the commands.  The UI will not block because you will either start a task (and don't wait for completion) in the delegate, or use async void as a delegate.\nDo not disable the command, but just do nothing: When the command is already running, the command (and hence the button) is not disabled and the user can click second time on it.  In this case, though, nothing happens.  (I agree this would be a rare scenario.  I just mentioned it for completeness.)\n. @Sockenfresser To ease the pain of porting your tests you can do the following:  if you have\ncsharp\nTask MyHandler() {...}\nDelegateCommand myCommand = DelegateCommand.FromAsyncHandler(MyHandler);\n/// in test:\nawait myCommand.Execute();\nchange it to\ncsharp\nDelegateCommand myCommand = new DelegateCommand(async () => await MyHandler());\n/// in test:\nawait MyHandler();\n. @feinstein It is very characteristic what Mr. Cleary ended up with in that blog post:\n\nThe new UI will change the Go button to mean \u201cstart a new asynchronous operation and add it to the list of operations.\u201d What this means is that the Go button is now actually synchronous.\n\nActually the positive value of Mr. Cleary's approach is observable (bindable) Task properties, and this is not the same as async command per se.\n. @brianlagunas You removed a check for value types.  This is going against the original design:\n/// The constructor deliberately prevents the use of value types.\n/// Because ICommand takes an object, having a value type for T would cause unexpected behavior when CanExecute(null) is called during XAML initialization for command bindings.\n/// Using default(T) was considered and rejected as a solution because the implementor would not be able to distinguish between a valid and defaulted values.\n\nMy understanding is that will not work good in the following case: suppose you use something like ListBox.SelectedIndex as a parameter to the command.  During initialization of XAML, CanExecute(null) will be issued and the view model will interpret that as CanExecute(0).  Thus, the command will be enabled although no item was selected in the listbox.  With Nullable the user would be able to distinguish between the absent value and the valid value of 0.\nHowever, I may be wrong.  I never used DelegateCommands with value types.  ListBox.SelectedItem may be a bad example; it has a value of -1 to indicate absent selection.  Maybe XAML calls CanExecute(null) anyway.  Just do not know.. @brianlagunas Oh, you removed the check for value type completely.  This will crash\ncsharp\n : base((o) => executeMethod((T)o), (o) => canExecuteMethod((T)o))\nwhen the parameter is null and T is e.g. int.. @pdinnissen XAML knows nothing about CanExecute(T parameter) and works with ICommand.CanExecute(object parameter).  Unfortunately, it calls CanExecute(null).\nWPF does not \"ignore\" anything.  All it does is calling ICommand.Execute.  Everything else is our code which may be different and work differently.. @pdinnissen I am not opposed to (_)=> and used it myself but I noticed that this notation is less readable under harsh viewing conditions.. @brianlagunas  I thought about keeping delegates separately, too.  Also, you could make implement ICommand in derived classes instead of base.  A couple comments:\nI did not tried to run this code.  Could there be a problem with overload resolution and/or Intellisense for DelegateCommand<object> ?\nNow DelegateCommandBase has nothing to do with delegates.  Its responsibility is observing \"can execute changed\" event.  Maybe a different name?. Google: \"command parameter is null first time canexecute is called\". Overall, I'm fine with it.\nYet another solution for value types might be to just return false from CanExecute(null) and do nothing in Execute(null).. @weitzhandler Just use \"async void\" delegate to initialize your commands.  If you assume more functionality, what do you want exactly from the following list: https://github.com/PrismLibrary/Prism/issues/785#issuecomment-257943922 ?. @Robzilla Also see https://github.com/PrismLibrary/Prism/issues/785#issuecomment-258134891. @brianlagunas I do not think there is a problem with RegisterViewWithRegion.  It is a misuse of it.\n@Sid-R Removing a view from a region does not assume removing the registration of the view with the region.  The idea of RegisterViewWithRegion is to populate a region before the region is even created.  The region may be created later and it will be auto-populated.  The region may then be deleted and created again, and it will be populated again.  The registration will live for the lifetime of the application.  Usually RegisterViewWithRegion is called only once, when a module is loaded, so there is no problem.\nSeemingly what you are doing is attempting to navigate to your view by calling RegisterViewWithRegion multiple times, not only in module initialization.  This is wrong, you should use the Navigate method instead.. @Sid-R It is not quite clear what you mean by \"dispose the module\".  The module is located in an assembly and once the assembly is loaded, it will remain in the current domain forever, with all its types.  Normally the modules perform some initialization, in particular register some types in the container.  The container, in turn, will be alive for the lifetime of the application.   In your code there is something _container.Dispose();.  If that is the main Prism container, all the Prism functionality (based on registration in the container) will be completely lost.\nSeemingly you are using Prism in completely unorthodox way.. @Sid-R And again, why don't you use RequestNavigate to populate your regions with views instead of RegisterViewWithRegion?  All you need to do is register your view types (DefaultTaskView) in the container for navigation and then call RequestNavigate.  The instance of the view will be created on demand when it is needed.  The view type will always be in memory, but this is unavoidable as explained above.. @Sid-R And if you have a very complicated process of initialization your module and creating the view which cannot be reduced to resolving the view via container, you can just add the view to the region without registration or navigation, e.g.\n_regionManager.Regions[RegionNames.DefaultRegion].Add(view);. @Sid-R Glad to hear you figured it out.  Prism is a great and flexible framework.\nI think everything is OK with your modules.  They are just modules in a common sense of the word, as some pieces of code.  But they are not Prism's modules: they do not implement IModule (look at your sample code above) and you do not use Prism module-related infrastructure to work with them.  But there's nothing wrong with that.. @brianlagunas @pdinnissen But probably you could just include pdbs and xmls with dlls, as, e.g., CommonServiceLocator does?  (See in your \"packages\\CommonServiceLocator.1.3\\lib\\portable-net4+sl5+netcore45+wpa81+wp8\\\").\n. @feinstein See discussion here: https://github.com/PrismLibrary/Prism/issues/785#issuecomment-257943922\n. @feinstein Thank you for raising this question.  I should admit it slightly disturbs me too.\nFYI: Prism had WeakDelegateManager in DelegateCommands since v2.0, but later it was removed in v6 because of the aggressive GC in Xamarin.\n@brianlagunas I suggest to re-open this issue and have an investigation on WPF case until we have some confidence in it.\n. To start the discussion:  this is where it all begins: https://blogs.msdn.microsoft.com/nathannesbit/2009/05/29/wpf-icommandsource-implementations-leak-memory/\n. @brianlagunas Yes, and this is a (potential) problem.  If WPF indeed has this problem, we will need different implementations for WPF and Xamarin.\n. >  As I thought, there is no issue. The WPF framework uses a WeakEventManager to hook into the CanExecuteChange notifications.\nI came to the same conclusion.  Some details:\nThe WPF ICommandSource Implementations Leak Memory! blog was written in 2009 at the time of WPF 3.5.  Here is how a ButtonBase was subscribing to events at that time:\n``` csharp\n        private void UnhookCommand(ICommand command) \n        {\n            EventHandler handler = CanExecuteChangedHandler.GetValue(this); \n            if (handler != null)\n            {\n                command.CanExecuteChanged -= handler;\n                CanExecuteChangedHandler.ClearValue(this); \n            }\n            UpdateCanExecute(); \n        } \n    private void HookCommand(ICommand command) \n    {\n        EventHandler handler = new EventHandler(OnCanExecuteChanged);\n        CanExecuteChangedHandler.SetValue(this, handler);\n        command.CanExecuteChanged += handler; \n        UpdateCanExecute();\n    }\n\n```\nHere CanExecuteChangedHandler is a \"light-weight dependency property\" UncommonField<EventHandler>.\nThis indeed will leak, and the solution in Prism 2.0 was valid.  But now the ButtonBase is implemented differently (https://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Controls/Primitives/ButtonBase.cs,300):\n``` csharp\n        private void UnhookCommand(ICommand command)\n        {\n            CanExecuteChangedEventManager.RemoveHandler(command, OnCanExecuteChanged);\n            UpdateCanExecute();\n        }\n    private void HookCommand(ICommand command)\n    {\n        CanExecuteChangedEventManager.AddHandler(command, OnCanExecuteChanged);\n        UpdateCanExecute();\n    }\n\n```\nand CanExecuteChangedEventManager is based on WeakEventManager along the lines of the mentioned blog post.\nThus, it looks like the problem of memory leaking in commands was solved by Microsoft in the framework and now it is only a historical issue.\n. What I suggest:\ncsharp\n    public interface IInteractionRequest\n    {\n        event EventHandler<InteractionRequestedEventArgs> Raised;\n    } \nbut InteractionRequestedEventArgs is different:\ncsharp\n    public class InteractionRequestedEventArgs : EventArgs\n    {\n        public string Title { get; private set; }\n        public object ViewModel { get; private set; }\n        public Action Callback { get; private set; }\n    }\nand a change in Raise method in InteractionRequest\ncsharp\n    public class InteractionRequest<T> : IInteractionRequest\n    {\n        public void Raise(string title, T viewModel, Action<T> callback) {...}\n    }\nThe viewModel parameter is allowed to be null if there is no need to pass data from view model to popup window and ViewModelLocator is used for the view.\nOther related interfaces:\ncsharp\n    public interface INotification\n    {\n        object Content { get; set; }\n    }\n    public interface IConfirmation : INotification\n    {\n        bool Confirmed { get; set; }\n    }\n    public interface IInteractionRequestAware\n    {\n        Action FinishInteraction { get; set; }\n    }\nNote there is no Title in INotification and no Notification in IInteractionRequestAware.\nHelper classes to create view models:\n```csharp\n    public class NotificationBase : BindableBase, INotification, IInteractionRequestAware\n    {\n        public object Content { get; set; }\n        public ICommand AcceptCommand { get; private set; }\n        ...\n    }\npublic class ConfirmationBase : NotificationBase, IConfirmation\n{\n    public object Content { get; set; }\n    bool Confirmed { get; set; }\n    public ICommand AcceptCommand { get; private set; }\n    public ICommand CancelCommand { get; private set; }\n    ...\n}\n\n```\nand of course the commands close the window by calling FinishInteraction.\nFinally, PopupWindowAction.  It remains mostly the same, but all stuff related to built-in notification and confirmation windows is removed.  If non-null viewModel is passed in the Raised event, it is set as DataContext to the window's Content.  When the window is closed, its DataContext is passed back via callback.\nBasically, this is all what is needed for custom popup windows.. If we need to support built-in notification and confirmation popups (e.g., in order to keep Interactivity Quickstart alive), this can be added as follows:\nAdd DefaultConfirmation and DefaultNotification UserControls (markup only, no code behind).  Those should be specified as PopupWindowAction.WindowContent in the parent view.\nAdd extension methods to be used in view models\ncsharp\npublic static void RaiseNotification(this InteractionRequest<INotification> request, string title, string message, Action callback) {...}\npublic static void RaiseConfirmation(this InteractionRequest<IConfirmation> request, string title, string message, Action<bool> callback) {...}\nThe extension methods will create an instance of NotificationBase/ConfirmationBase and pass it to ordinary Raise.. If there is interest in this approach I can create a PR (as time permits).. I created a 0.5 version along the lines described above.  It can be found in the following branch:\nhttps://github.com/dvorn/Prism/tree/ShowDialogRequest\nThe library code is in\nhttps://github.com/dvorn/Prism/tree/ShowDialogRequest/Source/Wpf/Prism.Wpf/ShowDialog\nSample application (adopted from existing demo for InteractionRequest) here:\nhttps://github.com/dvorn/Prism/tree/ShowDialogRequest/Sandbox/28-CustomRequest\nSome design work (e.g. extensibility) is pending.  Also, comments, unit tests, etc.\nI welcome reviews/discussion/suggestions/criticism.  In particular, names, namespaces, folders, etc.. @noufionline This is a question for @brianlagunas, but seemingly not.\nHowever, the ShowDialog code is independent of Prism and you can grab the source code and include it in your application.\nDecision to include this feature into Prism depends, among other things, on the users activity and their requests for the feature.  Thus, give it a try and tell us what you think.. @brianlagunas Could you elaborate on this one please:\n\nthe improved API will not require the creation of a ViewModel in order to show a dialog. This is a coupling that is not recommended by Prism guidance. \n\nView model is required for everything more complicated than a simple MessageBox.  The sample 28-CustomRequest uses ItemSelectionViewModel.  When the dialog is raised, indeed, the view model is not supplied.  Instead, the MainWindow contains ItemSelectionView using Interactivity (which should be avoided) and ItemSelectionViewModel is auto-wired to it.\nIf there is no Interactivity and no view model, what is the way to go?. Assuming that it was preceded by something like\n_dialogService.RegisterDialog(\"NameOfDialog\", DialogViewType, DialogViewModelType) ?. The DialogService may reuse some infrastructure of navigation system.  \nWhen _dialogService.Show(\"NameOfDialog\", parameters) is called, the service may create a view by instantiating a type registered for NameOfDialog, as it does for navigation.  Then create a window and set its Content to the created view.  The view may use AutoWire to create and set the view model. Then, if the view (or view model) implements INavigatipnAware, pass the parameters to the view via OnNavigatedTo.\nProperties like IsModal, WindowStartupLocation, etc. could be predefined parameters.\nDialog windows are a kind of special case of a predefined Region.. Yes, DialogResult is not needed.  When the dialog is closed, OnNavigatedFrom method is called and the dialog may provide whatever result it wants in NavigationParameters.  _dialogService.Show, as well as RequestNavigate, may return NavigationResult which contains updated parameters as well as Result property which may be reused.. @ThAlmighty This PR does not achieve your declared goal - use scoped region manager with IoC.  \nIn fact, scoped region manager and dependency injection have some impedance mismatch: there can be only one region manager registered in the container and it will be the global one, not scoped.  \nWith\ncsharp\nExplicitArguments arguments = new ExplicitArguments();\narguments.Set(scopedRegionManager);\nobject view = _container.GetInstance<ProgramView>(arguments);\nyou are not resolving the view via container.  In fact, you are practically calling the constructor directly.  Some would say that this is service locator anti-pattern.  It will be difficult to write tests for this code.  And you will not be able to navigate to those views.\nA much better approach would be to use IRegionManagerAware interface.  It was suggested long ago and an example is given by @brianlagunas in his PluralSight course \"Mastering The TabControl\".  This approach seems to be the best in resolving this impedance mismatch: views that need scoped region manager get the region manager not through the dependency injection but through the RegionManager property on this interface.\nThe change in the PR does not break anything, and if you do not use the new method you are fine.  But if you do, there is a pitfall: by the very idea, scoped region managers should be different from one another and from the global one.  With the current Prism code, this is guaranteed by the framework.  With the new method, you can easily screw things up by supplying one and the same region manager into different view.\nThus, I vote against the PR.  No need in it.. @ProH4Ck You can derive from PopupWindowAction to create your own.  It has \nprotected virtual Window CreateWindow() and protected Window CreateDefaultWindow(INotification notification) methods which you can override.\nAs a side note, interactivity has a lot of problems, see #864.\n. Questions of this kind should be asked on Stackoverflow.\nYou are missing the difference between instance methods regionManager.SetRegionManager and static methods RegionManager.SetRegionManager.. @buldo Having that incorporated into the Raise method will create problems for unit-testing.  Also, someone may want to have multiple UI threads in their applications.\nOn the other hand, it is easy to create an extension method for IInteractionRequest and Raise on whatever context you like.  (I did that in some apps.)\nAs a final note: the entire idea of raising interaction request from background thread should be taken with extreme care.  Because the background thread is not synchronized with UI thread and in general does not know what UI is doing at the moment.  For instance, you may attempt to raise a dialog while the user is having OpenFileDialog open.\nMay be a better approach would be to signal the UI thread from the background thread that something happened and then have the UI thread decide what to do depending on the UI state.. @Diaver Try #928.. If I understand it correctly, the problem is the following.\nUri constructors (and TryCreate) that takes a string argument works as follows: if the string starts with \"file://\", then the file name is assumed to be already escaped.  If not, the file name is assumed not been escaped yet.\nHowever, Assembly.CodeBase returns a string which starts with file:/// but is not escaped.\nNeed to use Assembly.EscapedCodeBase instead.. Some explanations.\nModuleInfo.Ref property is set in two places: by the ConfigurationModuleCatalog class (https://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Modularity/ConfigurationModuleCatalog.Desktop.cs#L75) and by the DirectoryModuleCatalog class (https://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Modularity/DirectoryModuleCatalog.Desktop.cs#L240).\nThe Ref property contains the URI of the module assembly file as a string.\nIt is then used by the FileModuleTypeLoader class which passes the uri string unmodified to AssemblyResolver.LoadAssemblyFrom(string) method.\nThe LoadAssemblyFrom creates an Uri from the string.  Thus, the Ref should be a valid uri string.  In particular, properly escaped.\nBoth ConfigurationModuleCatalog and DirectoryModuleCatalog classes create the uri string which starts with \"file://\".  However, DirectoryModuleCatalog does that by creating an Uri and then taking its string representation (https://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Modularity/ConfigurationModuleCatalog.Desktop.cs#L44).  This uri string will always be properly escaped.  But the DirectoryModuleCatalog does that by just taking type.Assembly.CodeBase.  This looks like an uri string (it starts with \"file://\"), but it is not properly escaped (if needed).  Thus, it does not work when there are special characters in the full path.  \nThe remedy, as suggested by Microsoft (https://connect.microsoft.com/VisualStudio/feedback/details/750678/codebase-does-not-correctly-escape-character), is to use Assembly.EscapedCodeBase.\nAnother related issue is that before FileModuleTypeLoader passes the uri string to AssemblyResolver, it attempts to determine the file size for progress reporting (https://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Modularity/FileModuleTypeLoader.Desktop.cs#L119).  It needs to access the same file as AssemblyResolver and it should have used the same approach as AssemblyResolver, but it uses a simplified approach instead: it simply trims the \"file://\" prefix from the uri string.  This will not work if the uri string is really escaped.\nThat was fixed in the PR too.. @eldhogeorge86 This is fixed in 6.3.  See http://brianlagunas.com/prism-delegatecommand-fromasynchandler-is-obsolete/. @eldhogeorge86 https://github.com/PrismLibrary/Prism/issues/650#issuecomment-274131169\n. @brianlagunas Added a test.  But please do not merge right now.  There seemingly is a problem with determining the module file size in FileModuleTypeLoader related to the same Uri.  I will look into that.. Now it's OK. Found it: https://forums.xamarin.com/discussion/85747/xamarin-forms-feature-roadmap\n2.5.0 - May 2017\nPrism-Like URI Navigation Routing - Enhancement\nNavigate to a page using Uri navigation, similar to what Prism does.\ncsharp\nNavigationService.NavigateAsync(\"ListPage/DetailPage?id=1\");\n. @ederbond My guess (without running your code):\n```\n        public DelegateCommand GoToPage2Command => new DelegateCommand(GoToPage2);\n    private void GoToPage2()\n    {\n        navigationService.NavigateAsync(\"Page2\");\n    }\n\n```\nNavigateAsync returns a Task which may be faulted and may contain the exception.  You should observe the result of NavigateAsync (by awaiting on it).. @ederbond Another potential problem is that you are using version 6.2 of Prism.  If the NavigateAsync method itself throws, the exception will be gobbled up by the DelegateCommand implementation.  You should upgrade to 6.3 where it was fixed.. @ederbond Prism 6.3 is not strictly necessary to await ;-) [pan intended]. @huoxudong125 You can use module dependencies for that.  E.g., C depends on B; B depends on L; L depends on A.. @huoxudong125 Did you tried this: https://www.pluralsight.com/courses/prism-loading-modules-user-roles ?  I did not watched it myself yet, however I would assume that in the course all problems of this kind are discussed and resolved.. Closing because of #953 and @brianlagunas may be right - there are too many possible scenarios.. Some information is here: http://compositewpf.codeplex.com/workitem/7381. To summarize what I've found in workitem 7381:\n\nIndeed, there was an intention to reuse the scoped region manager (DCherubini):\n\n\nBased on our understanding, we believe that the reason why the region manager is removed only if it\u2019s the same that the hosting region (that is, the view being removed doesn\u2019t have an scoped region manager) is that there might be an intention to support the scenario of being able to \u201cmove\u201d an already created view, with its corresponding region manager, scoped regions and views, to a different region. \n\n\n\nThe API does not allow to do that anyway.\n\n\nMoreover, attempting to reuse a view with scoped region manager leads to crash.  The root cause for the crash has not been determined, but the attached region manager is definitely participating, since removing it causes the crash to go away.\n\n\nThe aforementioned test, if it was trying to verify that the reuse without the attached region manager works, is incorrect.  The crash happens when there is a nested region in the view but the test does not contain one.. Update:\n\n\nThere is a bug in RegionManagerRegistrationBehavior.  It is re-entrant and incorrect.  As a consequence, the following does not work:\nregion1.Add(view, null, true); \nregion1.Remove(view); \nregion2.Add(view, null, true)\nHowever the view still may be reused as a workaround by\nregion1.Add(view, null, true); \nregion1.Remove(view); \nview.ClearValue(RegionManager.RegionManagerProperty);\nregion2.Add(view, null, true)\nThis will result, however, in a new instance of scoped region manager attached to the view.  Fortunately, the popular RegionManagerAwareBehavior can handle this - IRegionManagerAware.RegionManager will be updated.\n\n\nIt is possible to fix RegionManagerRegistrationBehavior by either reordering the assignments in TryRegisterRegion method, or by using an \"updating\" flag to prevent reentrancy.\nWith the fixed behavior, the first scenario above will work without clearing the region manager property.\nAlso, the fixed behavior potentially allows to re-use the scoped manager instance, but the current IRegion does not have a method to do this.  Changing the IRegion would require a new release of Prism, this cannot be done via extensions.\nGiven that there are many third-party behaviors and a lot of existing program using Prism that may rely on the current, even if erroneous, behavior of RegionManagerRegistrationBehavior, it would be better to leave it as is.. @ThAlmighty Why you include recursion on views in scoped regions and not in regular regions?  This is inconsistent.\nRecursion on views in nested regions, in general, will create more problems than solve them.  For instance, a dialog (\"Do you want to discard changes?\") may be raised multiple times.\nA proper approach would be that implementation of ConfirmNavigationRequest for a top view which contains nested regions would ask views in the nested regions for confirmation in a way appropriate for particular application.. @ThAlmighty ViewModels are definitely aware of the structure of the UI composition - regions, subviews, etc. - because the ViewModels perform regionManager.RequestNavigate(\"regionName\", \"viewName\").  So I do not understand your problem.\n\nI feel like Prism is lacking in a lot of departments for the support of sub-regions / scoped region managers, maybe I'm missing the bigger picture?\n\nIndeed, scoped regions feature is half-baked and does not work well.  See for example #953.  However, as @brianlagunas noted, attempting to fix it would be a daunting task because there are already too many prism applications out there which do all kind of things with scoped regions.. @ThAlmighty \n\nthe ViewModel should be aware of the View's implementation \n\nWhy would you need that?  The same way the top ViewModel implements ConfirmNavigationRequest, it may enquire nested ViewModels for confirmation. PR created: #964.. No chance that immutable container will work for WPF modules: they may be loaded on demand any time after the application has started and running.  Example: https://www.infragistics.com/community/blogs/blagunas/archive/2013/08/06/prism-dynamically-discover-and-load-modules-at-runtime.aspx. @ellisnet Mission: impossible.\nThe whole idea of dynamic module loading is the following: you have an app which has menu items/button which, when triggered, are causing some navigation to a new view.  The navigation system is based on resolving the new view via the container.  After we loaded new module, we get new menu items/buttons which can navigate to new views, which previously did not exist in the container, but now the newly loaded module has registered them.\nIt is true that we may change the implementation of Prism/applications to use multiple immutable containers and create a system where the navigation system operates not on a single container, but on a chain of dynamically created immutable containers.  One is created initially, another when module A is loaded, etc.\nBut then we will have in Prism/applications all kind of problems you describe in https://github.com/autofac/Autofac/issues/811.  Essentially, you avoid those problems by shifting them to Prism.  Do we want that?\nI work mostly with Prism for WPF and know little about Forms.  However, I guess that the original intention of Prism.Forms Modularity was the same - to allow module loading after the application is up and running, though currently it may not be implemented.. @ellisnet I agree with @dansiegel  - if Autofac wants to go immutable, we should not try to make it support things that it can't.  \nWhich means that Modularity functionality should be broken into two parts: modules that are available during application startup, and another part supporting modules which are not immediately available (e.g. downloaded) and modules loaded on-demand.  Autofac may be used only for the first part.\nModularity in Prism.Forms is relatively small and probably this can be done.  As for WPF...  I doubt anybody will ever want to do that.. I suggest to simplify the approach taken by @ellisnet and make it compatible with other immutable DI container technologies.  Namely,\n\n\nOn-demand loading is not supported.  All modules should be \"WhenAvailable\".\n\n\nA module defines a constructor of the form\ncsharp\npublic MyModule(ContainerBuilder builder, Container container)\nHere the exact types ContainerBuilder and Container are specific to particular DI container technology.\n\n\nThe module should perform all type registrations in constructor using the supplied builder.  The module may save the container instance for later use in the Initialize() method.  The container should not be used to resolve anything in the constructor.\nFor SimpleInjector the builder and the container will be the same and the constructor may have a single argument.\n\nThe DI container-specific ModuleManager will first use reflection to create instances of all modules and then run the Initialize() method on all instances.\n\nNote that this approach is based on convention rather than enforced by explicit interfaces, but this is true also for the approach of @ellisnet.  Traditionally instances of modules were resolved via the container.  Here the reflection is used.  But the same is true for the approach of @ellisnet.. @ellisnet You created AutofacContainer which combines Container and ContainerBuilder.  But did you considered the possibility of making ContainerBuilder a property in PrismApplication so that ConfigureContainer() works directly with ContainerBuilder?  The implementation will be streamlined and simplified.\nOf course this will be a breaking change.  But maybe the fans of Autofac container will be happy to pay the cost of upgrading to immutable container?. @ellisnet But you may change AutofacExtensions to make it work with ContainerBuilder instead of Container.\nNote that Prism.Autofac.Forms is not supported by @brianlagunas, it is supported by Autofac community.  As long as Prism.Forms is not changed, nobody cares what happens in Prism.Autofac.Forms but Autofac community.\nContainerBuilder is for registering types and Container is for resolving types.  Attempting to fooling the user to believe otherwise is a bad approach IMO.  If you use things for what they are designed for, you get a simple straightforward implementation.\nBut it is up to you and other users of Autofac with Prism.Forms.  I personally do not use them, those were just my thoughts.... @julciane InvalidOperationException is thrown in only one case - when you subscribe with ThreadOption.UIThread but the EventAggregator was not created on the UI thread.. @brianlagunas In 6.3 Release Notes these changes are listed under Prism for Xamarin.Forms while they belong to Prism.. Seemingly relates to #382.  @Haukinger Do you have a simple project that demonstrates the problem?. This is a problem with long history:\nhttp://compositewpf.codeplex.com/discussions/396304\nhttp://compositewpf.codeplex.com/discussions/322324\nhttp://compositewpf.codeplex.com/discussions/272855\nBasically, the original Prism authors do not have a solution to it: in a nutshell, their recommendation is \"if a  view implements KeepAlive=false, use Deactivate, otherwise you may use Remove\".\nWonder whether a clean solution is possible.. @brianlagunas However I think I can fix it.... This is the same issue as #382.  An attempt to fix it in #382 is essentially what original Prism authors recommended in http://compositewpf.codeplex.com/workitem/8224.  However, sometimes this does not work for the following reason.\nA region contains views as a itemMetadataCollection, and Region.Views and Region.ActiveViews are actually ViewsCollection wrappers over itemMetadataCollection which contain a cache of filtered and sorted items from itemMetadataCollection.  ViewsCollections subscribe to changes on itemMetadataCollection so that when itemMetadataCollection is updated, the cached items are also updated.\nThe problem with the code \ncsharp\nif (Region.Views.Contains(inactiveView)\n     Region.Remove(inactiveView);\nis that Region.Remove removes the view from itemMetadataCollection but Region.Views.Contains checks the presence of the view in the cached list.  So the result is dependent of the order in which cached collections are updated when itemMetadataCollection changes.\nIf ActiveViews is updated first, the RegionMemberLifetimeBehavior will be triggered and the above code executed when Views has not been updated yet which results in a crash.\nThe order in which Views and ActiveViews are updated depends on the order of first accesses them: they are lazy initialized, and when initialized, they subscribe to itemMetadataCollection and subscriptions are fired in the order of subscriptions.\nViews/ActiveViews may be first access, that is initialized, in any order.  For instance, when a region is defined in XAML for a ContentControl, the ContentControlRegionAdapter will first access ActiveViews and then Views.  In some other cases Views may be accessed first.\nNow that we understand what's happening we may think about solutions.  Many solutions are possible, including stop caching in Views or special eventing on ActiveViews to distinguish between removing a view from a region and deactivating a view.\nI think the least disruptive approach would be to fix the order in which Views and ActiveViews are initialized: Views should be initialized first.  For instance, remove lazy initialization for Views and initialize them in Region's constructor.\n. @weitzhandler Basically, you have incorrect bindings which results that wrong parameter type is passed to the command.  And instead of fixing your binding you want that Prism silently ignore that.  That would be a wrong way to go: if the errors are detected, the programmer has a chance to know about them early and fix them.  Otherwise the errors go unnoticed which may result in unstable programs.\nOtherwise, what was the purpose of using Execute(T parameter) instead of Execute(object parameter) than type checking which you suggest to remove?\nThe solution taken by Xamarin has performance implications: they insert some reflection into each and every Execute and CanExecute call.. @weitzhandler Try looking at the problem from a different angle: if you have a piece of code and it does not work as you expected, it does not necessary imply that Xamarin's binding system is wrong or Prism's Commands are wrong.  May be it is a problem with your code which does not take into account how the binding system really works and you need to accommodate your bindings for that?. And this is not the right place to discuss bindings.  Maybe StackOverflow or Xamarin forums is a better place.. @xxMUROxx https://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms.Tests/Navigation/NavigationParametersFixture.cs. Certainly, InteractionRequest was not designed for multiple event subscriptions because the callback action passed into Raise method will be called multiple times and that will break any program logic.\nI think the right way to handle this is to throw when somebody subscribes second time. \nOn the other hand, I do not think this is a big issue: just do not subscribe twice.  Do not use the same view model for multiple views, or if you do that, make sure only one of them have InteractionRequestTrigger.  And do not define multiple InteractionRequestTriggers for the same InteractionRequest.. Certainly, InteractionRequest was not designed for multiple event subscriptions because the callback action passed into Raise method will be called multiple times and that will break any program logic.\nI think the right way to handle this is to throw when somebody subscribes second time. \nOn the other hand, I do not think this is a big issue: just do not subscribe twice.  Do not use the same view model for multiple views, or if you do that, make sure only one of them have InteractionRequestTrigger.  And do not define multiple InteractionRequestTriggers for the same InteractionRequest.. First line does not compile because it uses features of C# 2017 compiler.  Obviously the build server was not upgraded yet.\nSecond line does not compile because null is not a type: parameter is null should be parameter == null.. Correct.  C# 7.0 interprets this as pattern matching.. Did not expect that container adapter (MEF) contains its own copy of FileModuleTypeLoader. \nMEF is unsupported anyway. :)\nFixed in #1014 . Problem with FileModuleTypeLoader was that it was inconsistent: to determine the module size it used module path verbatim, but to actually load the module it constructed an uri from module path.\nNow if module path is not escaped but contains special characters (e.g. #) the uri part breaks.  But if the path is escaped then the verbatim part breaks.. This is the same fix as for main FileModuleTypeLoader but for MefFileModuleTypeLoader https://github.com/PrismLibrary/Prism/pull/928/commits/f1af773c2916a7ac850e1145daa9dfaa4f1a6be5. I think nobody is interested in Modules that do not register types.  Thus on-demand (that is, late) loading of such a module makes no sense.\nA better, straightforward, approach IMO would be:\nDeclare up front that on-demand loading is not supported.\nIf any of modules define InitializationMode=OnDemand, throw NotImplementedException.\nThen load all modules during initialization.\n. @ellisnet Please take a look http://prismlibrary.readthedocs.io/en/latest/WPF/04-Modules/  It's for WPF, but ideas are the same.  \n\nDuring module initialization, the module can retrieve references to the additional components and services it requires, and/or register any components and services that it contains in order to make them available to other modules.. @ellisnet \nto add a RegisterTypes() method \n\nYou do not need this method.  This method already exists and it is called Initialize.  This is the design of Prism.. @ellisnet I was wrong stating that you don't need RegisterTypes method, sorry for that.  You are absolutely right, immutable containers need two entry points - one for registering services in this module and another one for configuring services in another modules.\nConceptually, something like\ncsharp\nRegisterServices(ContainerBuilder builder)\n{\n    // register types in container\n}\nConfigureServices(Container container)\n{\n    // use container to retrieve instances of other services and configure them\n}\nNote however that you still need to forbid on-demand modules.  The module registers its types immediately on startup, but the services provided by the module may not be functional until the module performed initialization.  Someone may use the services (registered types) before they were initialized properly.. @ellisnet As for RegisterServices/ConfigureServices - I wrote \"conceptually\" and not as some API.\nOn-demand modules: you are just creating a trap for the users to fall into for no particular purpose.  They will forget to call LoadModule and use types from the module which are readily available in the container from the very beginning.  This will be a source of (sometimes very subtle) bugs.. @ellisnet The net result is the same: the type is not usable until you load (initialize) the module, only the symptoms of the failure vary in difficulty to reveal what went wrong.. @dansiegel Seemingly the build server was not upgraded to c# 7.  Until it is you may use Roslyn compiler as NuGet package: https://www.nuget.org/packages/Microsoft.Net.Compilers/.. @brianlagunas I suggest to have in the interfaces only basic methods making other extension methods:\npublic interface IContainer\n{\n        object Instance { get; }\n        object Resolve(Type type, string name);\n}\npublic interface IContainerRegistry\n{\n        void RegisterInstance<TInterface>(TInterface instance);\n        void RegisterSingleton<TFrom, TTo>() where TTo : TFrom;\n        void RegisterType(Type from, Type to, string name);\n    }\nIn the future, in C# 8.0, extension methods will become interface default methods. @brianlagunas I think you can move more methods to extensions.  Take a look at how e.g. Unity is really implemented: http://unity.codeplex.com/SourceControl/latest#source/Unity/Src/UnityContainerExtensions.cs\nNote that if a particular extension method is not suitable for some container (other than Unity), it can be overridden as an instance method which takes precedence over extension methods.. @brianlagunas I mean you can move even more.  E.g., void RegisterType(Type type); is in fact void RegisterType(Type from, Type to); where from and to are type. . It is hard to design a meaningful test for such a simple thing.. This is about the Prism.Common.Listdictionary class in Prism.Wpf.  When TKey and TValue is the same type, the methods Remove(TKey key) and Remove(TValue value) in ListDictionary become ambiguous.. > This is not a collection meant to be used generically. \nThen we should make it internal.. > These methods also work as intended for its uses within Prism.\n\nAlso, the collection is working exactly as it should. \n\nThe API of Listdictionary class is poorly designed.  Listdictionary works in Prism.Modularity.ModuleDependencySolver only because it never attempts to remove neither key nor value.. Sure, not a big deal.  But the library provides public general-purpose collection class, it does not behave well, and the users complain.\nThis can be fixed without breaking backward compatibility by adding RemoveKey(TKey) and RemoveValue(TValue) methods which will do exactly what Remove(TKey) and Remove(TValue) do.. After the line https://github.com/PrismLibrary/Prism/blob/master/Source/Wpf/Prism.Wpf/Modularity/ModuleDependencySolver.cs#L59 add the line\ndependencyMatrix.Remove(module);\nand try compile.. Did you tried to compile?. The problem is not the meaningful name.  It does not compile.  Does not work at all.. No, method names should be different.  The problem is that there exist two methods with the same name (Remove) which differ only in argument type (TKey/TValue).  This becomes ambiguous when TKey and TValue are the same type.. But this will be a breaking change.  Easy to fix though.. I still have doubts about the best way to approach this.  If BaseDirectory defaults to the current directory, the users will have to write something like\nnew DirectoryModuleCatalog() \n{ \n    ModulePath = @\".\\Modules\",\n    BaseDirectory = AppDomain.CurrentDomain.BaseDirectory\n};\nwhich is less clear than\nnew DirectoryModuleCatalog() \n{ \n    ModulePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @\".\\Modules\")\n};\nwhich does not require any modification to the library and essentially means that relative paths are discouraged.\nMay be something like this\nnew DirectoryModuleCatalog() \n{ \n    ModulePath = @\".\\Modules\",\n    RelativeToExe = true\n};\nor there is an even better way?\n. Actually #1151 has nothing to do with MEF.  It is about ConfigurationCatalog which resolves relative paths in <module assemblyFile=... relative to the current working directory.  This is particularly nasty since a configuration file do not have naturally a process with a current directory associated with it.  It turns out the meaning of a configuration file depends on the process interpreting it.. There is no memory leak in Prism interactivity default windows.  For a leak to occur, as explained here, the source object of the binding should have a (direct or indirect) reference to the target of the binding, which of course is not the case here - view models do not contain references to views.\nYou may verify that the memory is reclaimed by running the popup window multiple times and taking memory snapshots.. @brianlagunas This sample proves nothing.  There is no memory leak. Do the following with the sample:\n\n\nAdd a big object to Foo, e.g.\ncsharp\npublic class Foo\n{\n     private byte[] buffer = new byte[1000000];\n(this is not necessary, but simplifies finding the Foo object).\n\n\nStart the program.\n\n\nIn Diagnostic Tools\\Memory Usage take a snapshot.\n\n\nOpen and close the OtherWindow several times (e.g., 10).\n\n\nTake another snapshot.\n\n\nSee the difference between snapshots.  To find the Foo objects, sort rows by the \"size\" column.\n\n\nRepeat steps 4-6, if curious.\n\n\nIf there were a memory leak in the binding, we would see 10 Foo objects.  But there are just a few, usually from 1 to 3.\nI did not investigate who's holding the Foo object.  Maybe the windowing system holds the last top-level window or something like that.  But certainly this is not a binding.\n. The \"WPF binding memory leak\" occurs when the source of the binding contains a direct or indirect reference to the target.  If you want to see it in action, change the content of the OtherWindow to the following:\nXAML\n<Grid>\n    <StackPanel Name=\"MyStackPanel\">\n        <TextBlock Text=\"{Binding Name}\" />\n        <TextBlock Text=\"{Binding ElementName=MyStackPanel, Path=Children.Count}\" />\n    </StackPanel>\n</Grid>\nand repeat the steps described above.  You will see that the number of Foo objects corresponds to how many times you pressed the \"Show Window\" button.. Of course it does not hurt to have INPC on Notification/Confirmation but this change was pointless and, I would say, it will be misleading to other developers who may believe in the false myth of \"memory leak\" in MVVM.. Another misleading issue with the proposed fix is that Notification implements INPC, but this implementation is not functional: the PropertyChanged event is never fired.\nThe developer will see from metadata that Notification implements INPC and will think that it is possible to change the Title of notification window during execution of popup by changing the Title property of the Notification object.  But that won't work.\nIMO, it is a bad fix for non-existent problem. . My explanation of what is happening here.\nWhen you bind to a CLR property of a source object, the PropertyDescriptor will keep a reference to the source object until you unbind.  \nIf the source object contains a (indirect) reference to the target object and you do not unbind explicitly, both source and target object cannot be GCed and you get a memory leak.\nIf there is no reference from source to target, then eventually the target will be garbage collected.  But this does not imply that the binding will be immediately removed (which would allow to GCed the source).  The reason is that WPF in general and DependencyProperty system in particular do not use finalizers but make extensive use of WeakReferences.  Thus the binding will be removed when the property system will notice that the target of the binding no longer exists.  The property system needs some push to do that, such as an access to involved DependencyProperties - DataContext in particular.  After that, the binding unsubscribes from the source, the PropertyDescriptor no longer contains a reference to the source, and the source can be GCed.\nThis can be demonstrated by the following modification:\n```csharp\nprivate void btnCheckIsAlive_Click(object sender, RoutedEventArgs e)\n{\n    GC.Collect();\nvar w = new Window();\nw.DataContext = new object();\nw.ShowDialog();\n\nGC.Collect();\n\nMessageBox.Show(_source.IsAlive.ToString(), \"IsAlive\");\n\n}\n``\nAfter firstGC.Collect()all OtherWindows will be GCed.  Then we access DataContext and the property system unbinds from source objects.  The finalGC.Collect()` frees the source objects.\nFrom the point of view of Prism application, this behavior is OK: the DataContext property is accessed frequently which allows to free source objects in a reasonably timely manner.\nThus, there is no memory leak, and the source objects are eventually freed, but they are freed not at the time that you may naively expected.\n. Moreover, the template pack contains code snippet for INPC which is more straightforward than that roundabout way of first defining auto property and then changing it.. It's unlikely that executing an action that does nothing could cause stack overflow.  Seemingly there's another problem in your code.  Could you provide a sample that crashes?. It seems reasonable to combine the two approaches: first try to hook into Loaded, and if that not possible, add behavior to tracking list.  Hooking into Loaded has a benefit that the region is created earlier, without waiting for UpdatingRegions event.\n@spsrbud Is sync object really necessary?  Attach and detach seem to be executed both on the dispatcher thread.. @spsrbud Then there's a lot of places in Prism.Regions where we add or remove some items to some collections (e.g., RegionManager.Regions or Region.Views).  Do you feel we need to add synchronization in there?. updatingRegionsListeners in RegionManager is static :-). UpdateRegions is triggered when the user is accessing regions collections in RegionManager. All regions stuff is designed to work from the GUI thread.  Although the user may try to call the API from another thread, in most cases this will result in InvalidOperationException when some properties of DependencyObjects are been modified.\nIf you do not have a particular scenario where the lock is needed, I think we better continue the tradition of not locking the access.. Are you sure that worked for Prism 6?\nWhen Prism is looking for a possible target view among all views already existing in the region, Prism does not know the names under which the view types were registered in container.  The only information available is the type itself - that is, its name.  Thus, if you register your view with a name different from the type name, the view will not be found.\nI think this is by design.\nhttps://github.com/PrismLibrary/Prism-Documentation/blob/master/docs/wpf/Navigation.md#navigating-to-existing-views:\n\nNote: For Prism to determine the type of the target view, the view's name in the navigation URI should be the same as the actual target type's short type name. For example, if your view is implemented by the MyApp.Views.EmployeeDetailsView class, the view name specified in the navigation URI should be EmployeeDetailsView. This is the default behavior provided by Prism. You can customize this behavior by implementing a custom content loader class; you can do this by implementing the IRegionNavigationContentLoader interface or by deriving from the RegionNavigationContentLoader class.. @jgrossrieder \ncsharp\nprivate async void DoSomeWorkAsync()\n{\n    await Task.Run(() => DoSomeLongRunningJob());\n    UpdateTheGui();\n}\nNote that UpdateTheGui will be executed at an unknown moment, and you need to do some extra work to properly synchronize it with the main execution thread.. @jgrossrieder  The approach I used in my projects is the following: every async action used in a command ends with some observable change in some object - an event or property change.  In a test I start the command and then wait for that event/property change to occur.  After that, assert the desired state.  For instance, your UpdateTheGui will set some property in a view model and that property is INPC.  Then wait for that INPC.. @jgrossrieder Yes, wait for event or several events - for \"good\" and \"bad\" case scenarios.  And yes, wait should be limited in time for the case where none of good and bad events occur - usually when an exception happens in a place where nobody thought it is even possible :-). The commands should be created on UI thread, since 6.2: https://github.com/PrismLibrary/Prism/pull/641. We can remove that, but the developers will have a lot of troubles when the method will throw in their tests, they will figure out why, then they will setup the context...\n. Sure, this can be done. I was starting the analysis early because it might be needed for some scenarios with multiple active views.. What is the purpose of string.Format here?  There is no arguments.. \n",
    "cyounes": "@dvorn I tried the solution  you suggested but i have a lot of issues of mismatch usages between MyRegionNavigationJournal and usages of RegionNavigationJournal, Do i've to create a new IMyRegionNavigationService ? because this interface has a property IRegionNavigationJournal. +1 \nI like it in this way, instead of casting the notification each time.\n. I am using all the techniques you mentioned and it works correctly, are you sure that your view models are respecting the default convention of viewmodel locator ? \nI had a similar issue because i had the view models in a separated assembly and different namespace than the views. \n. @znakeeye Could you share your sample with us please? \n. @dvorn You're right, a bug was in my code.. ",
    "iskiselev": "I'm not sure what will be better to use - file links or Universal projects. Universal projects is not yet used in Prism - but possible it is a good time to start usage of them.\nI've started my fork with example how it may looks - https://github.com/iskiselev/Prism/tree/Silverlight.\n. ",
    "davidezordan": "I agree with Brian about Silverlight support. I don't think it's worth the time and effort for supporting it at this stage.\nSilverlight projects should continue to use Prism version 4 imo.\n. @briannoyes I agree with that approach to keep consistency with the platform\n. ",
    "caioproiete": "+1 agree with @brianlagunas. Not worth the effort.\n. @brianlagunas: Yes, that's correct.\n. ",
    "juanfranblanco": "More abstract scenario could be: \n1 Menu creation static / dynamic, action enabling / disabling depending on context / state / view\n2. Example / plugin SplitView Windows10 UAP\n3. Example / plugin Xamarin..\n4. WPF etc. (Ribbon?)\n. Yes simpleinjector is awesome\n. People can pick tasks from the backlog and self assign themselves, if there is an issue (cannot complete) the task can freed up and other person can pick up the work.\n. Or we could talk to Microsoft and see how visual studio online could be used for an OS project with potentially unlimeted users\n. ",
    "ghost": "I have a Sample that derives from Jerry Nixon's SplitView example.  I modified it to fit in with Prism(WindowsStore).\n. Take a look here:\nhttps://github.com/arbsmith/Prism/tree/master/Samples/SplitView/SplitView\nI am still working on Back Navigation.  And I had an implementation of Prism with Unity that I did not include but it would make the ViewModelLocator resolving better by using DI.\n. Well, sorta? \nI have a SplitView control, where one of the menu items in the SplitView.Pane calls a command, passing in a Page type command parameter.  So it isn't a direct reference from ViewModels but more of a pass through.\nThe XAML of the control's CommandParameter could be something like this:\n<RadioButton.CommandParameter>\n   <views:Settings />\n</RadioButton.CommandParameter>\nI suppose I could pass in a string representing the view name, but this was the approach I followed first.\n. I am doing a PoC moving a WPF/Prism modular application over to UWP.  Since modules may not make much sense in UWP, but if I still want to keep my binaries separate (ex: views/viewmodels for particular features) then using the string approach won't work without some changes to current MvvmAppBase and/or FrameNavigationService.  The default navigation resolver prepends the AssemblyName + Views to get the View --> type.  If my View exists in a different assembly this will not work.\nUnless I am missing something?\n. That is great news.\nI have been confused by the Windows\\Prism.Windows.Store vs WindowsStore\\Prism.WindowsStore projects.  I wondered if there should have been a Windows Universal project.\nOn that note: the implementation I have seems to work with the current 8.1 project in a UWP app.  I will probably use this for now in my PoC until the real UWP version is checked in.  I expect if it will closely align with the WPF version then there won't be too much headache to integrate/swap.\nThanks.\n. Hi Brian,\nI had previously watched this and wasn't aware it actually showed a login prior to the shell loading?\n. Thanks for your help Brian\n. Thanks Brian, is it possible when the interaction window is re-sized the user control to resize with it?\n. @cpboyd Did you find a way around the page being set as Active even when its first loaded? I'm getting the same issue. . ",
    "Haukinger": "Not the same person, but probably the same issue.\nI'll post a sample, but not before the weekend I'm afraid.\nEDIT: this was way easier to reproduce than I thought :-)\nuse this project and put it in the prism v5 solution (and add unity via nuget):\nhttps://www.dropbox.com/s/kphigdw9psfj5jk/InteractionRequestIssue.zip?dl=0\nto see the issue, navigate to first view and trigger the popup -> works fine\nthen navigate to second view, and back to first view\ntry to trigger the popup -> won't work anymore\n. Any news on this one? Does the sample work for you?\n. I cloned the ViewModelLocationProvider and added a public GetViewModelType to be able to resolve the viewmodel in INavigationAware.OnNavigatedTo using parameters from the NavigationContext injected into the viewmodel's constructor.\nIt looks a bit weird, but I couldn't come up with a better solution. It would be great, though, if we could make the ViewModelLocationProvider itself optionally pass a NavigationContext to its viewmodel factory somehow.\n. I shortened too much, perhaps. I've got a bunch of view types, each of which has it's own viewmodel type. I can navigate to the views, and the vmlp creates the viewmodels by using the container. This works fine until I need to pass information from the navigation context to the constructor of the viewmodel.\nSo I built my own \"vmlp\" into a base class for all these views. It does pretty much the same thing as the regular vmlp, but defers the viewmodel creation until a OnNavigateTo is called on the view base class. That works fine, too, but I'm not happy with the base class approach, I'd rather prefer to attach something like the vmlp...\n. I'm on windows desktop, i.e. WPF. Delay is not a problem for me, as I pass the (rather small) model around in the navigation parameters. If the viewmodel doesn't need to handle the uninitialized state, I can keep the code simpler.\n. Ok, no problem, but give me a hint - if we want to navigate to a view, why would it be better to pass the view's name by string as opposed to the view's type (if the type is accessible at all, i.e. if we navigate to a view in the same module)?\n. There's a difference between using a type as a type, to reference an instance or reflecting or whatever - I understand that's wrong, because you make the viewmodel untestable - and using the type as a refactoring-safe and type-safe way to express a text constant, that is, the type's name. It won't interfer with tests, because using \"typeof(MyView).Name\" ist just a better way of saying \"MyView\". Anyway, as soon as you navigate to a view in a viewmodel, you're referencing the view in the viewmodel, whether by string or by type.\n. > If that's the case you are better off creating extension methods for both registering your views for navigation with your container, and for RequestNavigate to use a generic instead. Then you don't even need to pass in a name at all.\nWhy does Prism provide one of them and not both (or none of them)?\nAlso, Brian, I'm with you that one shouldn't reference assemblies just for the typeof-navigation. But the reasoning behind that is more along the lines of \"views should be internal\" than \"don't reference view types in viewmodels\". If the navigated-to assembly is in the same assembly as the navigating viewmodel, it doesn't apply.\nMany times you're navigating to a related view that resides in the same assembly (or module), and then I still think typeof-navigation has only advantages over string-navigation.\n. > There is no situation in which you should be referencing your View types from within your ViewModel.\nExcept in case where the view is known to the viewmodel anyway, because they sit side by side in the same assembly and the reference is used to avoid a string-reference (which implies that no other information besides the name is used).\nWe can move to email for this discussion if you like (because I guess, we're going beyond the scope of this issue), but I really would like to fully understand this. Why is it more important to not reference a known and accessible type for its name only than to remove the maintainability impact of using a weakly type string reference?\nPerhaps my imagination is too limited, but I cannot come up with a situation where this would impact testability. And testability after all has to be the reasoning behind \"viewmodels shouldn't reference views\", as views aren't testable and viewmodels are conceptually designed to be testable. The view's name, though, can be used in tests - as a string, if the view is not known to the test - to check that the correct navigation is performed, whether or not the viewmodel references strongly or weakly to the view.\n. Ok, got it, but it comes a bit unexpected as there's no hint about these restrictions when registering the type and there are dedicated overloads of the navigation methods that take not an uri but a string.\n. Is that a legacy from silverlight? We have hierarchical navigation in prism forms, but what's the benefit of using uris on wpf?\n. I mean, does prism for wpf make use of the path-like nature of uris and how?\nIf I can only navigate to one region, I just need an unique identifier for the thing I want to show in the region, correct?\nIf I do not have to serialize my navigation parameters into that identifier, I could just use any string, no need to reuse the query-functionality of the uri. And if I can use any identifier, in what respect is \"http://localhost/myview\" more clean, maintainable, testable or extensible than \"my view\"?\nIt's even misleading, because it pretends to use http, and that's clearly not the case.\n. Sure thing, have a look here: https://github.com/Haukinger/prism-993/tree/master. @brianlagunas if I cannot use Region.Remove to navigate away from a view without navigating to another view, is there any other way to achieve this?. ",
    "tkthatikonda": "Hello Brian,\nWe have a similar issue but the resolution [RegionMemberLifetime(KeepAlive = false)] is not helping here.\nWe have a view that opens a UserControl (UC1) as a popup using InteractionRequest. \n```\n        UC1ViewRequest.Raise(new UC1ViewModel\n        {\n            Title = \"User Control 1\"\n    });\n\n```\nUC1 has a button that opens another UserControl (UC2) as a popup using InteractionRequest. \n```\n        UC2ViewRequest.Raise(new UC2ViewModel\n        {\n            Title = \"User Control 2\"\n    });\n\n```\nOpening UC2 again and again from UC1 works fine as long as UC1 is not closed. \nBut after closing UC1, UC2 cannot be shown/opened from UC1 but UC1 can be opened again from the main view. \nThe Raised event on the UC2ViewRequest is null.\nPlease advise. I can send you a sample to reproduce.\n. Hello Brian,\nCould we know the fix for Prism 5? We can rebuild the source code with the fix.  Or is the fix only available in latest version Prism 6?\nThanks\n. Thanks Brian for your prompt response. That worked!!\n. ",
    "znakeeye": "My custom ViewModelBase has this validation stuff (actually, I think I got it from Brian's article). Do you want me to create a PR or is this feature already in the workings?\n. I'm trying to center the dialog in the parent element, which sometimes is an element located on the bottom right. More specifically:\nI have an ItemControl with an item template consisting of a button that shows a modal dialog. It makes sense to show the dialog near this button, which is why I tried to center it using the CenterOverAssociatedObject property. Then there is this problem when clicking the button in the bottom of the list...\n. How soon do you need it in order to get a possible fix in the next release?\n. In my opinion, CenterOverAssociateObject is pretty worthless in its present form. The centering algorithm fails in many cases. E.g. The associated view is 100 points wide, near the desktop edge and the interaction request then shows a view of 300 points. You're lucky if you can see the popup at all.\n. I'm expecting an exception. Or, it would be nice for it to show before the navigation is completed.\nI solved this using a navigation callback where I call \"GoBack()\" on error. However, I still think that the framework should warn when the interaction request cannot be found or executed. Invalid bindings show a \"nice\" warning in the output window, but an invalid interaction request shows nothing...\n. Problematic implementation: The Notification isn't shown because the View hasn't loaded (I guess...) when OnNavigatedTo is being called. The problem is that there is NO error. I would expect at least a warning message in the Output window.\nAlternative implementation: The error I'm referring to comes from a non-handled custom exception in the OnNavigatedTo method, which is then propageted to the callback defined in RequestNavigate. Thus, to successfully show an interaction request when navigation fails, I do the following.\nTHIS works:\n``` C#\npublic void OnNavigatedTo(NavigationContext navigationContext)\n{\n     throw new Exception(\"Booya!\");\n}\n// Caller:\nregionManager.RequestNavigate(..., OnNavigationCallback);\nprivate void OnNavigationCallback(NavigationResult navigationResult)\n{\n    if (navigationResult.Result == false)\n    {\n        ConfirmationRequest.Raise(...);\n    }\n}\n```\nSo, my first implementation is obviously wrong. Prism does not allow me to show my interaction request in OnNavigatedTo, but... I had to realize this by myself. No error! :)\n. I just realized there is an interface for this. IConfirmNavigationRequest\nAnyway, why not throw an error if the interaction request cannot be raised?\n. I believe I need to use SetDefaultViewModelFactory, but I still cannot get the container to instantiate my viewmodel unless I have it in region. Ideas?\n``` C#\nprotected override void ConfigureContainer()\n{\n    base.ConfigureContainer();\nViewModelLocationProvider.SetDefaultViewModelFactory(viewModelType =>\n   Container.GetExports(viewModelType, null, null).First());\n\n}\n``\n. The latter. Thanks for pointing that out. Now I see the error...GetExportsreturns aLazy<>so we need to add.Value`. That did the trick!\n(A good thing this code is now documented here. It was quite hard to find it on the internet.)\n. If you ask me, that makes perfect sense.\n. Maybe clamping to the desktop work area should only be done when IsModal is true?\n. Today I observed another problem with my fix. If you drag the main window to the right (or any other) screen edge, Windows 10 (and 8?) allows you to nicely split the screen. It seems the popup is then centered on the desktop instead of the new vertical work area.\nDoes your fix cover this case?\n. I discovered a problem with this (and the original) implementation. It seems the call to view.PointToScreen() can crash.\nAn exception of type 'System.InvalidOperationException' occurred in PresentationCore.dll but was not handled in user code\nAdditional information: This Visual is not connected to a PresentationSource.\nIdeas?\nUpdate: I think we need to listen for the Loaded event and perform the centering logic at that time instead.\nUpdate 2: This occurs when showing a popup as a result of an exception in OnNavigatedTo:\n```\n// In the destination viewmodel:\npublic void OnNavigatedTo(NavigationContext navigationContext)\n{\n    throw new Exception(\"Test\");\n}\n// And in the source viewmodel:\nprivate void OnNavigationCallback(NavigationResult navigationResult)\n{\n    if (navigationResult.Result == false)\n    {\n        // Raise interaction request!\n        // CenterOverAssociatedObject is true!\n        MyInteractionRequest.Raise(...);\n    }\n}\n```\n. @DJKampouris Please see my update. It seems to happen when throwing an exception in OnNavigatedTo which is then handled in a navigation callback. The crash doesn't occur if I put a breakpoint before raising the interaction request.\nAlso, your fix does not center my popups horizontally when I split the screen (using drag'n'drop in Windows 10).\nUpdate: Ok, it seems that this PresentationCore exception occurs when the interaction request is not defined in the current view - but it's parent. Hence, it is there somewhere, but not in the visual tree. I solved this by adding it to the view in question.\nUpdate 2: Aaaaah! It seems to happen anyway...\n. I have that, except that I call First():\nprotected override void ConfigureContainer()\n{\n    ViewModelLocationProvider.SetDefaultViewModelFactory(viewModelType =>\n        Container.GetExports(viewModelType, null, null).First().Value);\n}\nAlso, this is my packages.config:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<packages>\n  <package id=\"CommonServiceLocator\" version=\"1.3\" targetFramework=\"net46\" />\n  <package id=\"Prism.Core\" version=\"6.1.0\" targetFramework=\"net46\" />\n  <package id=\"Prism.Mef\" version=\"6.1.0\" targetFramework=\"net46\" />\n  <package id=\"Prism.Wpf\" version=\"6.1.0\" targetFramework=\"net46\" />\n</packages>\nShould be enough, no?\n. Ok, thanks. I thought MEF 2 could replace MEF. I'm involved in a huge project that is heavily dependent on MEF, and that has proved to be a performance bottleneck. You don't happen to know how to optimize the MEF bootstrapping?\n. Lifesaver! Thanks Brian! :)\n. The views and the viewmodels are in the same assembly, with correct namespaces. I guess I have to download the sources and try to debug the auto-wire code...\n. @brianlagunas Can you please explain the term container? You've mentioned several times that MEF is not a DI container. In what way does it's DI functionality differ from e.g. Unity? What are the benefits of a \"container\"?\n. Lol... I'm able to reproduce the problem in my sample now. Didn't change anything... strange! For \"MyView\" the auto-wiring does not work; \"MyViewModel\" is never instantiated.\n. I'd say this is fundamental construct in any MVVM application. I will try to modify the source code as soon as I get time.. ",
    "niels-abels": "+1\n. ",
    "allanrsmith": "over a year ago... any thoughts to regions or multi-frame?\n. I tested this out... Everything works fine in Prism.\nYour sample shows that you are overriding OnActivated but you are not calling base.OnActivated.  PrismApplication.OnActivated, by way of InitalizeShell() -> InitializeFrameAsync() sets up everything from the container, to sessionstate, devicegestureservice and .... navigationservice.\nYou should rather override:\nprotected override Task OnActivateApplicationAsync(IActivatedEventArgs args)\n {\n     NavigationService.Navigate(\"Main\", null);\n     return Task.CompletedTask;\n }\n@brianlagunas @bartlannoeye This can be closed in my opinion.\n. We publish events with bool because we have to.  It would be nice to not have to pass a payload.  These are not only used for UI events.  For example, a Refresh event is published that needs to go across ViewModels.  I don't care about any particular payload.\n. I'll have the PR done shortly.\n. I believe this should already work.  The provided link specifies that the developer must implement SystemNavigationManager.GetForCurrentView().BackRequested +=\n        SystemNavigationManager_BackRequested; which is already done here: https://github.com/PrismLibrary/Prism/blob/master/Source/Windows10/Prism.Windows/AppModel/DeviceGestureService.cs#L50\nCan you confirm that it does(not) work?\n. ",
    "karlfl": "Closing issue.  I believe this is redundant based on a quick review of the code Brian checked in for resolution of Issue #51.  Specifically the changes referenced by \"I want to use DI in my ViewModel constructors like I would for any other service.\" \n. Targeting WPF using MEF for DI.  I'm only experimenting with the Prism 6.0 base at this time.  I may be mistaken in the issue#, but there was code added (that I'd overlooked earlier) to the Prism.Bootstrapper main class to use ServiceLocator in the ConfigureViewModelLocator() method.  I suspect there still might be a tweak needed in the MefBootstrapper, but not sure exactly what yet.  My gut says that the MEFBootstrapper isn't using the ServiceLocator to resolve the ViewModels when using the VML. So it's defaulting back to using Reflection and causing exceptions with my test code.  I'll continue looking/testing and report back if I find anything concrete requiring a change.\n. Brian,  I've added tests to the MEF Bootstrapper test project and related Run method tests.  Please review when you get a chance.  I tried to model it after the other tests in there, but since there were so many already there I wasn't sure if there are possibly other areas I should add the VML configuration tests too also.  Let me know if I've missed any.  Thanks!\n. If it's ok, i'd like to provide a bit more discussion on this topic.  I guess the fundamental question(s) I'm asking is; Why is the bootstrapper forcing the developer to define a Shell?  Isn't this creating a tight coupling when it's not necessary?  As shown above, it can be worked around with a 'return null' method, so your right it is extensible, but, why does it force the method definition/override?  If it was truly required then the bootstrapper's run method wouldn't allow for Shell == null.  Digging into the code we see there are only two lines of code in the bootstrapper that depend on the shell reference:\ncs\n    RegionManager.SetRegionManager(shell, _container.Resolve<IRegionManager>());\n    RegionManager.UpdateRegions();\nSo RegionManager requires shell, but why does the bootstrapper require the reference?\nYou do bring up an interesting point, that I had not fully considered, when you mention the simple single-region shell approach.  That approach will work in many cases.  The only one I can think of where it gets a little more complex is when the window chrome needs to be different or changed based on other variables (i.e. admin users chrome is different than the standard user chrome). \nSo, I'm not sure of the exact implementation, but I think removing the bootstrapper dependency on shell would make the framework easier to extend.  A good start might be replacing the abstract definition of CreateShell() with a virtual method which, by default, returns null.  That would not break the model but allow simpler extensibility. \n. Not sure if this is the right way to do it, but I changed the title of issue to simplify the suggestion.  If needed we can re-introduce the 'startup module' in a separate issue/suggestion.\n. Thanks for your thoughts and feedback guys.  I enjoy the discussion.  In fact this discussion has allowed me to refine my thinking a bit and force me to ask myself, 'what am I really asking for'. I'm a little surprised that I'm the first with this thought or challenge.  But it is what it is.\nI understand the purpose of the bootstrapper and I'm not suggesting that we make major changes to it or re-design its purpose.  I agree that UIElement(s) (including a Shell) are important in application startup.  I understand the need to register the regions on the shell using the RegionManager (the 'tax' you refer to, although Prism makes that a pretty small, two line, tax :-) ).  I'm just not convinced that the average startup UI is as simple as a single component stored as a member on the Bootstrapper.  Especially when you introduce things like a splash screen or custom window chrome.  However, I realize that there may be some simple applications that do only need a single UIElement or Shell in their startup, so I was looking more for increased flexibility than re-design.  Personally, I like keeping my Prism startup project (aka shell project) fairly small and let the individual modules do the heavy lifting, including loading a splash screen, caching data, and eventually bringing up the main shell.  If I get some time I'll throw up a sample app on Github to show how I do it.\nIn regards to this specific suggestion.  I already have a work around for my needs and I know it's possible to ignore the Shell in the bootstrapper and implement my own more robust shell module.  I have done that using several versions of Prism, even in a way that still uses regions via the RegionManager with only a few lines of code (see my first comment).  I was not trying to suggest the removal of \"CreateShell\" or the UIElement reference to Shell in the bootstrapper.  Not at all.  I was only suggesting a change to allow developers to more easily  ignore the bootstrapper's shell implementation if they so choose.  If I was required to boil this suggestion down to a single line it would be this statement, which I eluded to at the end of my last comment.\nReplace the abstract definition of CreateShell() with a virtual method which, \n    by default, returns null.\nSo that was all. Prism still works great as it is and I'll continue to support it and use it on current and future applications I develop and I am delighted that it's now community developed.\n. Thanks Brian!\n. ",
    "michaelnero": "Hi @brianlagunas, yes, I'm using 5.7.0-pre1. I'm 100% certain that the value is always true even if I pass false. The reason I'm getting an error is that I have a custom renderer that's trying to access the PageRenderer.NavigationContoller property, which is null when using INavigation.PushModalAsync(). My root page is a NavigationPage, so the NavigationController property should be there if using INavigation.PushAsync().\nJust to make sure I wasn't going crazy, I copied your implementation of PageNavigationService into my codebase, and watched it always pass true no matter what.\nInterestingly, when I do this, it works like I expect it to:\ncsharp\n((Prism.Navigation.PageNavigationService)this.navigationService).Navigate (\"SignInPage\", useModalNavigation: false);\nA co-worker mentioned this blog post to me. Think it'll help?\nhttp://patrick.lioi.net/2012/08/29/a-c-feature-that-shocks-the-conscience/\n. I just got the note about sending my sample to you, but it looks like you don't need it. Thanks for taking a look at it!\n. That fixed it. Thanks again!\n. After thinking about it, you may be able to remove DelegateCommand altogether for Xamarin. Xamarin already provides an ICommand implementation Xamarin.Forms.Command. DelegateCommand does provide FromAsyncHandler() which I like, but there isn't another compelling reason to keep it around for that platform. Thoughts?\n. Ah, CompositeCommand. I hardly use it, but I'm glad it's there when I do need it!\nWorks like a charm. Thanks!\n. I have an object that I serialize to an XML column in SQL Server, so that type is of course decorated with [DataContract]. I have an API endpoint that sends down that XML content as a property on a container object, and the phone app then deserializes the XML content sometime after it receives it. This is why my phone app has a type using the [DataContract] attribute.\nI also propagate that deserialized object to various components throughout the app, and it's exposed via some view models, which is why it implements BindableBase.\nOf course, I could rethink all of this if there's no desire to add [DataContract] to BindableBase. But at some point I do have to serialize to XML because SQL Server doesn't support JSON like, say, postgres.\n. Hey guys, I'm okay with a \"no\" on this one -- although a very helpful and polite no. ;-) -- because I can certainly understand the consequences of adding an attribute to a base class where it hadn't applied before.\nI'll work around it by being a little smarter about what I send back through my API endpoint. Thanks for the time!\n. Sorry, I'm suggesting NavigationParameters : IDictionary<string, object>\n. Hi @brianlagunas and @briannoyes,\nI know you said that you reverted the change to make NavigationParameters : Dictionary<string, object>, but I have Nuget package Prism.Forms v6.0.1 (the latest AFAIK), and NavigationParameters does inherit from Dictionary<string, object>.\nI'm a bit confused. Are you expecting to revert this in the next release? Just wanted to make sure before I start using NavigationParameters like a real dictionary.\n. For what it's worth, if having NavigationParameters inherit from Dictionary<string, object> isn't causing problems anywhere else, I prefer to leave it that way. Just my two cents.\n. Yep! Feel free to reject my pull request if you don't want to carry over the Xamarin Studio formatting. I'd understand not wanting to have one file different than the rest of the code base.\nAt least the idea here is easy enough to implement. :-)\n. ",
    "Clement-Jean": "@brianlagunas I think I have this issue too, my _navigationService.GetNavigationUriPath(); always tell me: NavigationPage?useModalNavigation=true/MyPage , is that normal ? Because I'm having problem to go back to the previous view.. The is that my full path is\nMasterDetail/NavigationPage/PageA/NavigationPage?useModalNavigation=true/PageB\nBut I don't specify anywhere that I want modal navigation. Is it the default behavior ?\nI explain the problem more in detail here: https://forums.xamarin.com/discussion/149935/masterdetailview-disappears-after-pressing-back-button-prism-forms/p1?new=1\n\nFrom: Brian Lagunas notifications@github.com\nSent: Thursday, February 7, 2019 4:56 AM\nTo: PrismLibrary/Prism\nCc: clement jean; Mention\nSubject: Re: [PrismLibrary/Prism] useModalNavigation parameter on INavigationService.Navigate() is always true (#55)\n@Clement-Jeanhttps://github.com/Clement-Jean if you only have one view on your NaviagtionPage then there is nothing to go back to, unless your NavPage is being shown modal, which means you'll have to force a modal GoBackAsync(useModalNavigation = true)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/PrismLibrary/Prism/issues/55#issuecomment-461184313, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AP4skQiNQW9TbvDDh33drNJiVFbQ9dNdks5vK0GXgaJpZM4E9u2c.\n. Ok I will try for the goback.\nThe point with the stack is doing something like:\n\nClick on list entry (I can see the master page)\nShowing a new page (I can't see the master page, just back button)\nClick back button (I can see the master page)\n\nI'm totally new to prism navigation so I might do stupid stuff here \ud83e\udd15 . Yes, I meant prism functions for navigation.\nThe thing is that I don't add it, the NavigateAsync does it by itself, I just do a _navigationService.NavigateAsync(\"PageB\");\nHow can I solve this ?. ",
    "Phmager": "I saw you removed the WeakEventHandlerManager from Prism, but won't this introduce a memory leak, why it was first introduced?\nhttp://compositewpf.codeplex.com/workitem/4065?ProjectName=compositewpf\n. But I exactly mean if someone is using prism in WPF. Is that no more possible? And was this behavior fixed in Windows 10?\n. ",
    "apollyonbob": "Duck typing (i.e. current Bindings) isn't separation though - it's just obfuscation. If you change the underlying type, it still breaks if it doesn't match the implicit interface. If you bind x:Bind to an interface instead of a concrete type, you've maintained the dependency inversion principle, and removed the obfuscation. It doesn't really affect MVVM because MVVM just describes the relationship between the objects, not how they're connected. And it adheres to SOLID principles better.\nBut I definitely agree that wrapping the DataContext in the property seems like a hack because you are losing and then trying to regain type information. I mean it's true that most of the time I'm sure it's probably fine - as long as you set that DataContext prior to the Bindings being loaded. (Which, presumably, Prism will do.) But losing that type info by passing through DataContext does feel wrong.\nBut I mean, it's a wrongness I can accept for now at least haha.\n. Yeah x:Bind doesn't care what the target is, it's just strongly typed. \nYour right in that we'd have to make a property no matter what, my only concern was that losing typing through DataContext feels bad. \nLike, for proper injection, you need some place to put the properly typed object. Usually this is done through the constructor, but we can't cuz of the framework. The backup injection site is usually some kind of property. But if you're not planning on changing the ViewModel injection, I mean, I guess it's probably not worth it.\nBut yeah, IView with a IMyViewModel ViewModel {get; set;} feels a lot better than (IMyViewModel)DataContext, to me. But yeah that could be more trouble than it's worth. \n. @brianlagunas IBindable is usually used for binding targets, like ViewModels and Models, isn't it? IBindableView? IContextualView? IInjectableView? Ooh I kind of like that one. \n@bartlannoeye Well, when it comes to \"do you want the error at runtime\" vs \"do you want the error at compile time\" I vote for compile time every day of the week, and twice on Sunday. I mean, yes, you can't just assign any old object and hope it all works out, but I consider this a feature, myself haha. But I tend to only connect things via interfaces to keep dependency inversion, and to allow for better testing. Usually. With Views, yeah I getcha, there's not a lot of reason to keep it separate from the view model haha.\nBut if you just provide the interface, I mean that pretty much does the rest. If you have a IInjectableView, then when they take the interface, and implement it with the default, it should produce TViewModel ViewModel {get; set;} right?\n. The interface is about eliminating the loss of type information that happens when you inject a ViewModel into the DataContext, especially given x:Bind no longer tolerates this loss.\nAs I said earlier, it's true that a large majority of the time, this won't have adverse consequences. But for some devs like @Michael-DST above and myself, a hard cast of (ViewModel)DataContext is seen as - well distasteful is perhaps the best word - because it makes run-time assumptions.\n. @brianlagunas Just a personal preference, but I like names that describe what the thing is meant to be, rather than why it's meant to be ... hrm ... the interface describes a View that can have a ViewModel injected in it directly. IViewModelDependent? I like how this one describes the Type you're probably going to be giving to it, i.e. IViewModelDependent tells you that T is a view model. IDependentView? \nNames are hard haha.\n. Oh yeah, that was why I was thinking it might be not worth the effort. I'm using an IOC container as a ServiceLocator to get the ViewModel from just the Type, so I only need to get the TypeInfo, and it only happens 6 times in the lifetime of the app so I think the perf hit isn't too bad. But I don't know what you're doing in your framework obv, haha, or if you can even do that.\n. @TioLuiso Another alternative - the solution that I ultimately went with - was to have my views implement a generic interface, IViewModelDependent<T>.  (Having a single property, T ViewModel {get;set;})Then when my navigation service is first created, it gets the generic property from that interface from the View. Afterward, when someone navigates to that View, it can set the ViewModel to that property. So per page, I've got 1 GetTypeInfo, 1 GetRunTimeProperty and no magic strings. And when they actually navigate I'm just calling Property.SetValue. \nBut my navigation service is a set of commands, so all the View Type information is known ahead of time. Despite the little bit of reflection, I'm still not certain I'd want to do any of it during a Navigation call. Because of the way I've set it up, I can do it all during app load.\n. ",
    "TioLuiso": "I tried to use a Generic Base View so that I can pass the type (or better, interface) of the VM it has to work with, so that it can expose a typed property to be used with x:Bind.\nHowever, when trying to create an instance of the View, specifying x:TypeArguments as the VM interface, it doesn't build, and it complains that I must pass a generic parameter. And in the generated class created from the XAML, it really doesn't use the generic parameter I passed.\nHas anyone tried to create a generic view in UWP? Am I missing something?\nAwesome work, by the way. Just love Prism.\n. Wow. Really impressive. 5 answers in 2 hours!!!\nOk @brianlagunas (Regarding the generic view) Yup. Have walked that same road. And We both found out that it didn't work.\nRegarding the non-generic base page: yup. It would work. However, I was trying to find some more general solution to the problem, instead of having to update just every view code behind.\n@apollyonbob yup, I guess it would work, I'll take a look. Thanks a huge lot\nAnd after all, if it doesn't prove to be a benefit big enough, I always have dynamic bindings.\n. @apollyonbob yup. It Works. Now I'll take measurements of performance, and can take a decisi\u00f3n. Thanks again!!!\n. Cannot wait to update my solution for Prism6. Awesome!!!\n. Hmmmmm\nHello everyone.\nIf you moved your ViewModels from a Windows Universal App to a Windows Universal Class library, would it cause a lot of harm? because now the test looks like it can run without problem.\nNot exactly a solution, of course.\n. Tried to reproduce the same behavior but without Prism at all.\n1.- Created a UWP App. Named: MyAwesomeApp (of course)\n2.- Created a UWP Lib. Named: MyAwesomeLib\n3.- Inside MyAwesomeLib, created a new class. Name: AwesomeApplication. Inherits from Application. NO CODE AT ALL\n4.- Inside MyAwesomeApp, Reference MyAwesomeLib and, change the base class of App.xaml (and cs) to AwesomeApplication\n5.- Created a UWP Unit Test Project. Named: MyAwesomeApp.Test\n6.- Inside MyAwesomeApp.Test, reference both MyAwesomeApp and MyAwesomeLib\n7.- Run the test. The exception thrown is:\n\"Cannot deserialize XBF metadata type list as 'AwesomeApplication' was not found in namespace 'MyAwesomeLib'. [Line: 0 Position: 0]\"\nSo I guess there is nothing wrong with Prism.Windows itself, and it's more something about UWP Unit Tests not referencing UWP Apps.\nHave to investigate more. Anyway, there is at least a workaround\n. ",
    "ChSchmidt81": "Thanks for your quick answer.\nI now it is always difficult to say but do you have a rough timeframe on the releases. \nWill the first release be ready for the start of Windows 10.\n. Are Module/Region still on the Roadmap for UWP?\n. Hi Brian,\nwill you make a Pluralsight course for Prism 6? Maybe with UWP content?\nThanks\nChristian\n. ",
    "peter-f-s": "In the meantime, is Region Management for UWP still on the agenda?\nAnd if so, with which priority?\n. ok, thanks for your answer.\n. ",
    "Mayhem50": "Any news ?. ",
    "sathish8226": "I see this is added to 7.0 road map, when can we expect this to be released?. Is there any workaround for now? . ",
    "Novan123": "Btw: This problem is also present, if the app is started with OnFileActivated.\n. A short note how to resolve this problem:\nEasily call the same methods which were called by MVVMBase at normal app launch.\nThe important part is the if clause plus the inner stuff.\n```\n    protected async override void OnFileActivated(FileActivatedEventArgs args)\n    {\n        if (args.PreviousExecutionState != ApplicationExecutionState.Running)\n        {\n            await InitializeFrameAsync(args);\n            await OnLaunchApplicationAsync(null);\n        }\n    base.OnFileActivated(args);\n    // Do your own stuff from here on.\n}\n\nprotected override async void OnShareTargetActivated(ShareTargetActivatedEventArgs args)\n{\n    if (args.PreviousExecutionState != ApplicationExecutionState.Running)\n    {\n        await InitializeFrameAsync(args);\n        await OnLaunchApplicationAsync(null);\n    }\n\n    base.OnShareTargetActivated(args);\n    // Do your own stuff from here on.\n}\n\n```\nWith this code you can close this ticket in my optinion.\n. ",
    "YehudahA": "Oh, I've updated all of my code, and now I will have problems again. \nIn my opinion, using Dictionary is logical and understandable.\n. I added the following methods to deal with the revert. But I think the main difference is the indexer behavior. NavigationParameters[\"key\"] return null if key not found, In contrast to Dictionary that throws a KeyNotFoundException.\nI think that Dictionary behavior is better. In general, I do not understand what the hell he thought whoever wrote this code for the first time. He had not heard about Dictionary?! Why he preferred an ugly thing like IEnumerable<KeyValuePair<string, object>>?!\nAnyway, this is my helper:\n``` csharp\npublic static class NavigationParametersExtensions\n{\n    public static bool ContainsKey(this NavigationParameters navigationParameters, string key)\n    {\n        return navigationParameters.Any(parameter => string.Compare(parameter.Key, key, StringComparison.Ordinal) == 0);\n    }\npublic static bool TryGetValue<TValue>(this NavigationParameters navigationParameters, string key, out TValue value)\n{\n    value = default(TValue);\n    if (navigationParameters.ContainsKey(key))\n    {\n        object obj = navigationParameters[key];\n        value = ReflectionHelper.ChangeType<TValue>(obj);\n        return true;\n    }\n\n    return false;\n}\n\n```\n. Suggestion how to implement it:\nIDialogViewModel\ncs\npublic interface IDialogViewModel\n{\n    string Title { get; }\n    event EventHandler Closed;\n}\nIDialogService\ncs\npublic interface IDialogService\n{\n    void ShowDialog<T>() where T : IDialogViewModel;\n    void ShowDialog<T>(T context) where T : IDialogViewModel;\n    void ShowDialog<T>(T context, Action<T> callback) where T : IDialogViewModel;\n}\nDialogService\n``` cs\n[Export(typeof(IDialogService))]\npublic sealed class DialogService : IDialogService\n{\n    #region fields - ctor\nreadonly IServiceLocator serviceLocator;\n\n[ImportingConstructor]\npublic DialogService(IServiceLocator serviceLocator)\n{\n    this.serviceLocator = serviceLocator;\n}\n\n#endregion // fields - ctor\n\n#region IDialogService\n\npublic void ShowDialog<T>() where T : IDialogViewModel\n{\n    IDialogViewModel context = serviceLocator.GetInstance(typeof(T)) as IDialogViewModel;\n    ShowDialog(context);\n}\n\npublic void ShowDialog<T>(T context) where T : IDialogViewModel\n{\n    Invoke(context, null);\n}\n\npublic void ShowDialog<T>(T context, Action<T> callback) where T : IDialogViewModel\n{\n    Invoke(context, callback);\n}\n\n#endregion // IDialogService\n\n#region Invoke\n\nprivate void Invoke<T>(T dialogViewModel, Action<T> callback) where T : IDialogViewModel\n{\n    Window wrapperWindow = GetWindow(dialogViewModel);\n\n    EventHandler viewModelClosedHandler = (sender, e) => wrapperWindow.Close();\n    dialogViewModel.Closed += viewModelClosedHandler;\n\n    // We invoke the callback when the interaction's window is closed.\n    EventHandler windowClosedHandler = null;\n\n    windowClosedHandler =\n        (sender, e) =>\n        {\n            wrapperWindow.Closed -= windowClosedHandler;\n            dialogViewModel.Closed -= viewModelClosedHandler;\n\n            wrapperWindow.Content = null;\n            if (callback != null) callback(dialogViewModel);\n        };\n\n    wrapperWindow.Closed += windowClosedHandler;\n    wrapperWindow.ShowDialog();\n}\n\nprivate static Window GetWindow(IDialogViewModel dialogViewModel)\n{\n    Window wrapperWindow = new Window\n    {\n        Title = dialogViewModel.Title,\n        ShowInTaskbar = false,\n        WindowStartupLocation = WindowStartupLocation.CenterOwner,\n        WindowState = WindowState.Normal,\n        SizeToContent = SizeToContent.WidthAndHeight\n    };\n\n    Window mainWindow = System.Windows.Application.Current.MainWindow;\n\n    if (mainWindow != null)\n    {\n        wrapperWindow.Owner = mainWindow;\n        wrapperWindow.Icon = mainWindow.Icon;\n    }\n\n    FrameworkElement view = YA.Windows.ViewLocationProvider.GetViewByViewModel(dialogViewModel);\n    wrapperWindow.Content = view;\n\n    return wrapperWindow;\n}\n\n#endregion // Invoke\n\n}\n```\n. :(\n. Brian, Thank you for your response, but what about:\ncs\npublic interface IInteractionRequestAware\n{\n    event Action FinishInteraction;\n    INotification Notification { get; set; }\n}\n. q: Navigation is a UI thread task. So, what asynchronous can give us?!\n. Perhaps, but it seems a little strange and a little confusing to use async here.\nOn second thought, I agree that [for example] InteractionRequest.RaiseAsync is better than callback.\n. OK, thanks, I saw only this list https://github.com/PrismLibrary/Prism#breaking-changes\n. You're right! I was confused! In case of dialogService I need the opposite method: GetViewForViewModel.\nBut I still need GetViewModelForView for other services, and make it public can be very helpful.\n. I'm writing a navigation service that load the viewModels async:\ncsharp\n// TODO: GetViewModelForView\nvar viewModel = await Task.Run( ()=> GetViewModelForView(newViewType);\nnewView.DataContext = viewModel;\n. Thanks, but it's for UWP...\nI will try do it for WPF.\n. The main job is with RegionNavigationContentLoader.\nThe default loader resolves content by key, while as default SimpleInjector doesn't support registration by key, as descripted here.\nQ: why prism navigation is made using Uri instead of natively using of Type?\n. On the other hand, using literal string as navigation identifier is a very big complication.\nIt's not maintainable, and not testable.\n. So, Instead of constants we can use abstraction, and replace the typeof(MyView).Name with typeof(IMyView).Name.\n. Deleted.\n. I think that I have a good solution to navigation by string key.\nI created a simple service:\ncs\npublic interface ITypeLocatorService\n{\n    void Register(string key, Type type);\n    bool TryGetType(string key, out Type type);\n}\nConfiguration in the Bootstrapper:\ncs\ntypeLocator.Register(MyKnownTypes.SomeViewKey, typeof(SomeView));\nResolving in RegionNavigationContentLoader:\n``` cs\nprivate Type GetCandidateTypeByContract(string candidateTargetContract)\n{\n    Type candidateType;\n    var resolved = typeLocator.TryGetType(candidateTargetContract, out candidateType);\nif (!resolved)\n    candidateType= Type.GetType(candidateTargetContract);\n\nreturn candidateType;\n\n}\n```\nUsage:\n``` cs\n// navigation by key:\nregionManager.RequestNavigate(\"MyRegionName1\", MyKnownTypes.SomeViewKey);\n// navigation by type name:\nregionManager.RequestNavigate(\"MyRegionName2\", \"MyProject.Views.SomeView\");\n```\n. ",
    "odedlevy": "Hi Brian,\nAt first I though the same as what you recommended (Navigate(\"View\",\nuseNavigationPage: true)) the problem is that there are currently 5\ndifferent page options and in the future they may be more.\n[image: Inline image 1]\nTherefore this lead to the option of defining an IPageNavigationProvider\nlet looks something like:\npublic interface IPageNavigationProvider\n{\n       Page BeforeNavigatePeek(Page pageToBeNavigatedTo);\n}\nand when defining the RegisterTypeForNavgation there will be an overload\noption that will except the\nIPageNavigationProvider.\nBefore navigation prism will call the  BeforeNavigatePeek enabling the user\nto return the page wrapped in a NavigationPage or any other option.\nThe weak spot of this option is that it will require Prism to reference\nXamarin (assuming it is not already familiar with it) so that it will be\nable to expose the \"Page\" object.\nIf required,  the Page can be replaced with an object. Not ideal but an\noption:\npublic interface IPageNavigationProvider\n{\n       object BeforeNavigatePeek(object pageToBeNavigatedTo);\n}\nI must state that the Xamarin design does not feel right. The one that\nshould decide on the it's layout is the opened page and not\nthe opening page. In addition it is the opened page that defines the\ntoolbar items causing the NavigationPage logic to be split between 2 pages\ninstead of 1. Not the best design.\nI'll be glad to hear your opinion.\nRegards\nOded.\nOn Tue, Jun 23, 2015 at 8:36 PM, Brian Lagunas notifications@github.com\nwrote:\n\nThis is actually a good idea. How do you envision the API working to\nenable this feature? Using an attribute on the View, maybe something like a\nNavigationPageAttribute? How about an overload of the\nNavigationService.Navigate method, something like Navigate(\"View\",\nuseNavigationPage: true)? Any other ideas?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/64#issuecomment-114583092.\n\n\nOded Levy, Co-Founder and Manager\nRazor Grip Solutions\nMobile : 054-5442069\nEmail : oded@razorgrip.com\nWeb: www.razorgrip.com\n. I already tried that unfortunately that does not work in Xamarin. You\ncannot have a page of type NavigationPage. It compiles but crashes at\nruntime. I also tries creating a NavigationPage (in XAML) that contains a\nContentPage but still no luck.\nIn any case it is not the viewmodel that knows about the type of view,\nrather the IPageNavigationProvider which is part of the bootstrapper. It is\nsomething that the application level decides on which feels reasonable to\nme.\nNote that currently using Prism eliminates the option of having anything\nbesides a ContentPage which is very limiting.\nCan you think of a simple solution to overcome the problem within the\ncurrent version of Prism that does not require replacing the entire logic\nof Prism's NavigationService?\nThanks\nOn Wed, Jun 24, 2015 at 7:38 PM, Brian Lagunas notifications@github.com\nwrote:\n\nI'm curious if it would be easier to just create a class the derives from\nNavigationPage and just register that with the navigation framework.\npublic class MyNavigationPageA : NavigationPage {....}\nContainer.RegisterTypeForNavigation();\nOr something like that. I haven't really thought this through, but it's\njust an idea that popped in my head. Whatever the solution, it should not\ninvolve having the ViewModel know about a View type.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/64#issuecomment-114936417.\n\n\nOded Levy, Co-Founder and Manager\nRazor Grip Solutions\nMobile : 054-5442069\nEmail : oded@razorgrip.com\nWeb: www.razorgrip.com\n. Ok. Great talking with you. Please update if you reach any breakthrough.\nOded.\nOn Jun 25, 2015 6:02 AM, \"Brian Lagunas\" notifications@github.com wrote:\n\nI'll have to think about this one. Hopefully the community can come\ntogether to help solve this one.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/64#issuecomment-115085670.\n. Hi Brian,\n\nI see that you were quick in solving the issue which is great news.\nFrom a design point of view I prefer to avoid attributes, even though your\nsolution that includes a provider enables the user to place logic when\nrequired. The problem is that the provider will not be created by the\nUnityContainer and therefore if the container is required, will need to\nreceive it using the ServiceLocator which is sometimes not a good solution\n(in cases where there is more then one container in use). In addition the\nprovider may need access to the current state such as who navigated to the\nwindow and such. Replacing the IProvider for testing will also be\nproblematic.\nOn the other hand , since I am not familiar with how Prism implemented the\nNavigation, though I assume it relies on reflection, therefore the use of\nthe attribute one of the ways to pass out the logic required for the\nnavigation.\nRegards\nOded.\nOn Fri, Oct 9, 2015 at 5:18 AM, Brian Lagunas notifications@github.com\nwrote:\n\nOkay, so after implementing this, I think it may be better to Provide an\nattribute that accepts an IPageProvider. So something like\n[NavigationOptions(PageProviderType=typeof(ViewAPageProvider)].\nThen it could be passed the view being navigated to so that properties can\nbe set on it, then it could also return a different page to act as a\nwrapper/target page like a NavigationPage.\nWhat do you think about that?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/64#issuecomment-146738059.\n\n\nOded Levy, Co-Founder and Manager\nRazor Grip Solutions\nMobile : 054-5442069\nEmail : oded@razorgrip.com\nWeb: www.razorgrip.com\n. There are 2 options that I can think of:\n1. If we assume that there is only a single page provider for the entire\n   app - I would consider to register it on the INavigationService during the\n   app bootstrap. (e.g. add a function to INavigfationService such as\n   RegisterPageProvider(IPageProvider) or by implementing a default\n   IPageProvider and only when user registers a different one on the container\n   use his).\n2. A different option in case you prefer multiple providers is to add an\n   overload to the INavigationService.Navigate that can accept the\n   IPageProvider.\nNote that I am not familiar with the solution you implemented and if\nactually relies heavily on reflection , yet I assume that these options are\npossible.\nWhat do you think?\nOded\nOn Sun, Oct 11, 2015 at 12:14 AM, Brian Lagunas notifications@github.com\nwrote:\n\nActually @odedlevy https://github.com/odedlevy, the container is used\nto create the provider. So you would have no problem injecting dependencies\ninto your provider class. Prism navigation doesn't use reflection, but the\naddition of this attribute does require reflection to check for the\nattribute. For this reason, we cache the result so we are not incurring the\ncost everytime.\nIs it common to have a reference to the source page when navigating to\nanother taregt page in order to configure properties on the target? Testing\nthe INavigationPageProvider should not be an issue at all.\nSince you are not a fan of the attribute, how would you like to see the\nAPI?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/64#issuecomment-147126535.\n\n\nOded Levy, Co-Founder and Manager\nRazor Grip Solutions\nMobile : 054-5442069\nEmail : oded@razorgrip.com\nWeb: www.razorgrip.com\n. My first thought is to replace the 4-5 page options with an enum. I dont\nsee too many options for additional page types in the future.\nAn alternative is to  return a .net \"object\" instead of a page and you can\ntry to safely downcast it.\nOn Oct 11, 2015 9:04 PM, \"Brian Lagunas\" notifications@github.com wrote:\n\nNow I have an issue. If I do that, now the ViewModel will know about\nINavigationPageProvider (which relies on the XF.Page type in its members).\nIs this a big deal? I wanted to keep all references of XF.Page out of the\nViewModel and any class that the ViewModel needs.\nThoughts?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/64#issuecomment-147230882.\n. I reviewed the code yet I thought of something a bit different unless I am\nmissing out on something:\n1. In the bootstrapper we have already mapped our Views to a string\n   using the Container.RegisterTypeForNavigation method\n2. At some point we would like to navigate to a new page. Using plain\n   old Xamarain we would use the source page to navigate to the target page\n   using: sourePage.Navigation.PushAsync(targetPage). And when navigating to a\n   NavigationPage we would push a wrapped target inside a NavigationPage\n   (e.g. sourePage.Navigation.PushAsync(new NavigationPage(targetPage)).\n3. When using Prism I would expect something different. Since in Prism\n   in order to navigate from a viewModel we use the\n   NavigationService.Navigate(\"page name\") we would expect prism to enable us\n   at this point to supply some kind of means for informing that I currently\n   require a NavigationPage wrapper. One way would be to pass an enum\n   (e.g.NavigationService.Navigate(\"page name\", PageType.Navigaiton) leaving\n   prism the implementation of wrapping the page. ( I am not fund of this\n   option yet it is a possibility)\n4. A different option is to use the INavigaitonPageProvider meaning I\n   would do something like: NavigationService.Navigate(\"page\n   name\",MyNavigationPageProvider). The INavigaitonPageProvider  interface\n   should have a method similar to:\n   1. Page ProvidePage(Page targetPage) - internally if required the\n      user would wrap the target page with any type of page he requires.\n5. This would also give him the flexibility to send a different provider\n   per each navigation (assuming this is required)\n6. Note that it is also important to let Prims manage the initiation of\n   the Page since when using INavigationAware we can decide if  to create a\n   new instance of the page or use an existing one. Using the provider like so\n   enables Prims to manage the page lifecycle.\n\nOded\nOn Sun, Oct 11, 2015 at 9:56 PM, Brian Lagunas notifications@github.com\nwrote:\n\n@odedlevy https://github.com/odedlevy there is no need for an Enum.\nPlease see the implementation here:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/INavigationPageProvider.cs\nAnd here:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/NavigationPageProviderAttribute.cs\nYou can see the code snippet here for an example of how it would be\nimplemented with some small changes since this PR is outdated now:\n195 https://github.com/PrismLibrary/Prism/pull/195\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/64#issuecomment-147235179.\n\n\nOded Levy, Co-Founder and Manager\nRazor Grip Solutions\nMobile : 054-5442069\nEmail : oded@razorgrip.com\nWeb: www.razorgrip.com\n. Brian are you referring to passing the INavigaitonPageProvider parameter in\nthe view model as if we are passing an XF Page type?\nI understand the concern but using the attribute on the ViewModel also\nexposes the same provider.\nI totally agree that it is preferable that the target page and not the\nsource page decide on the page type, similar to the attribute solution. I\nthink that Xamarin has not done the best design for the navigation.\nThe solution I offered continues according to Xamarin design, meaning\nenabling the Source to decide on the what type of page to use.Though it id\nnot thr prefered design it is still more flexible then the attribute option\nsince the user can decide per each navigation what to provider to use.\nTherefore I think that each solution has it's pros and cons so there is no\nabsolute answer here.\nWhich path would you prefer?\nOn Sun, Oct 11, 2015 at 11:43 PM, Brian Lagunas notifications@github.com\nwrote:\n\nYes, the current code accomplishes everything you mentioned except\ncurrently to enable it you must attribute the view with the provider you\nwant to use.\nThe reason I am not in favor of adding a param to the Navigate method is\nbecause now you have introduced an interface with knowledge of the XF.Page\ntype into your ViewModel which breaks the MVVM concept. I wouldn't mind\nadding the param, but I need to find away to remove this Page type\ndependency.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/64#issuecomment-147243903.\n\n\nOded Levy, Co-Founder and Manager\nRazor Grip Solutions\nMobile : 054-5442069\nEmail : oded@razorgrip.com\nWeb: www.razorgrip.com\n. Thanks for the clearance on the location of the attribute. That does make a\npreferable design.\nHow about replacing the \"Page\" with a .Net \"object\" and that way avoiding\nthe need to reference XF on the VM?\nOn Mon, Oct 12, 2015 at 12:10 AM, Brian Lagunas notifications@github.com\nwrote:\n\nNo. To clarify, the INavigationPageProvider reference the XF.Page type in\nits members. This means that when you use it in your VM, you now have\nreference to the XF.Page type, and now you also open a hole for the VM to\ninappropriately touch both the source Page and target Page within the VM.\nThis is not good.\nThe source still decides where you are navigating.\nThe attribute goes on the target View, not the ViewModel. This keeps the\nView references and responsibilities in the View.\nI do agree on the benefit of deciding which provider to use during each\nnavigation action using the param approach. But, I have to find a way to\nremove the reference, or exposure, of the XF.Page type on the interface so\nthat I can add the param on the Navigate method.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/64#issuecomment-147246203.\n\n\nOded Levy, Co-Founder and Manager\nRazor Grip Solutions\nMobile : 054-5442069\nEmail : oded@razorgrip.com\nWeb: www.razorgrip.com\n. Which rolls us back to the attribute option.\nA bit limiting but much better then the current options.\nOn Mon, Oct 12, 2015 at 12:22 AM, Brian Lagunas notifications@github.com\nwrote:\n\nYeah, I thought about that too. The problem with that is now you have to\ndo casting from object to XF.Page in both the interface implementation and\nthe Prism code base for consumption. This not only puts a burden on writing\nthe code, but also the performance hit taken with the boxing an unboxing.\nAlso this stills leaves the ViewModel open to the inappropriate touching\nof the source and target pages via the interface.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/64#issuecomment-147246752.\n\n\nOded Levy, Co-Founder and Manager\nRazor Grip Solutions\nMobile : 054-5442069\nEmail : oded@razorgrip.com\nWeb: www.razorgrip.com\n. ",
    "joacar": "One way could be to define the navigation options as enum and then add a factory interface as well as page presenter interface.\nRought sketch\n``` c#\npublic enum class NavigationOptions { Push = 0, Modal = 1, ModalNavigationBar = 2, ... }\npublic interface IPageNavigationPresenterFactory {\n    IPageNavigationPresenter Presenter(NavigationOptions navigationOption);\n}\npublic interface IPageNavigationPresenter {\n     Page Present(Page page);\n}\npublic class CustomModalNavigationPagePresenter : IPageNavigationPresenter {\n    Page Present(Page page) {\n      return new MyCustomNavigationPage(page);\n    }\n```\nFor pages used interchangely as modal/pushed depending on the application state new issues will arise when trying to close the page. For example at application startup the MainViewModel launches and in ViewDidAppear we check if settings are valid.\nIf not the SettingsViewModel is navigated to modally and then login is pressed. When logged in the ClosePage() is called and in here the PopModal need to be called. But if navigated to from e.g a MasterDetailPage scenario then the ClosePage() should just call Pop.\nDon't know if it is clear what I mean. If i have time I can implement a sample project to illustrate the issue\n. Hi,\nEdit: I am excited about this initiative! :) Haven't used Prism in WPF but recently started developing in Xamarin.Forms and Prims.Forms might be what I'm looking for!\nHopefully I will have time to contribute and use it my self in upcoming projects.\nWith that said, I outline a rough sketch on what I have done in my current solution. This is based on work done in Xamarin.Labs.\nFirst of I would introduce the IPageResolver interface with the single method Page Resolve() or similar. This way MasterDetailPage scenarios and others can be implemented in the application since they handle CurrentPage a bit differently.\n```\npublic class DefaultPageResolver : IPageResolver {\n   public Page Resolve() { return Application.Current.MainPage; }\n}\npublic interface IDialogService {\n Task DisplayAlert(title, message,ok)\n Task DisplayAlert(title,message,ok,cancel)\n Task DisplayActionSheet(string title, string cancel, string destruction, \n  params string[] buttons); // Result will most likely be the name of the button. Havn't used this\n }\n```\nAn implementation would be\n```\npublic class DialogService : IDialogService {\n private IPageResolver _pageResolver;    \n public DialogService(IPageResolver pageResolver) { _pageResolver = pageResolver; }\nregion Implementation of IDialogService\npublic async Task DisplayAlert() { return away _pageResolver.Resolve().DisplayAlert(); }\n#endregion\n}\n```\nWrote this just here so sorry for ugly code/format. \nI would be happy to write the actual code if requested and the above pattern is considered good enough. \nLater on adding support for displaying progress and similar..\n. Haven't stumbled into that scenario so I have not thought of it to be honest. \nThe none-solution is to leave that implementation to the application and perform necessary checking to resolve the correct page depending on the type of MainPage currently active. \nIf above is needed at all. Perhaps it \"magically\" just works as long as it is a Page reference. That is the PageResolver instance don't have to be swapped at runtime when navigating.\nMade a small test in my current project and dialog shows correctly on both button presses. Will invenstigate more during weekend, a bit short on time at the moment.\n``` c#\npublic class PageResolver : IPageResolver {\n    Page Resolve() { return Application.Current.MainPage; }\n}\nvar masterDetail = new MasterDetailPage\n                {\n                    Title = \"MasterDetail\",\n                    Master = new ContentPage()\n                    {\n                        Title = \"Master in detail\",\n                        Content = new StackLayout()\n                        {\n                            Children =\n                            {\n                                new Button()\n                                {\n                                    Text = \"Hello from master\",\n                                    Command = new Command(() =>\n                                    {\n                                        var ds = App.Container.Resolve();\n                                        ds.DisplayAlert(\"Master\", \"Hello from master\", \"Cancel\");\n                                    })\n                                }\n                            }\n                        }\n                    },\n                    Detail = new NavigationPage(new ContentPage()\n                    {\n                        Title = \"Detail\",\n                        Content = new StackLayout()\n                        {\n                            Children =\n                            {\n                                new Button()\n                                {\n                                    Text = \"Hello from detail\",\n                                    Command = new Command(() =>\n                                    {\n                                        var ds = App.Container.Resolve();\n                                        ds.DisplayAlert(\"Detail\", \"Hello from detail\", \"Cancel\");\n                                    })\n                                }\n                            }\n                        }\n                    })\n                };\n                Application.Current.MainPage = masterDetail;\n```\n. In my opionion DisplaySheet doesn't fall into the \"alert\" category as well as the others.\nPerhaps we should introduce an IDialogFacade that wraps interfaces such as IAlertService, IUserInputService, IProgressDialogService or similar.\nThe contract for IDialogFacade could be (arguments left out : )\nc#\npublic interface IDialogFacade {\n Task DisplayAlertAsync();\nTask<bool> DisplayAlertAsync();\nTask<bool> DisplayAsync({Success, Alert,Warning});\nIProgressDialog DisplayProgress();\n}\nThese might be better patterna since view models doesn't have to request many interfaces for dealing with relatively common ways to interact/inform user about events.\n~~Throws what i think might be an issue when navigating modally using PageNavigationService. When navigating with modal option, the page displayed modally, in android and ios, doesn't present the navigation bar unless explicility wrapped in a new NavigationPage. I will make a pure sample project to be 100% sure this is the case (I have noticed it in my current project) and when confirmed I will probably open an issue and suggest a way to push modal pages with an option to show navigation bar.~~\nEdit: Above addressed in #64 \n. @BoeseB \nYes I thought of that as well but as @brianlagunas mentiones that would break the platform implementation and potentially/most likely confuse users. Perhaps we can provide that functionallity as extensions methods on the interfaces to allow users to call DisplayActionSheet(..., params DisplayActionButton[] buttons) and in that method resolve what action to take.\nExample\n``` c#\npublic struct DisplayActionSheetButton {\n    DelegateCommand Command {get;}\n    string Text {get;}\n...\n\n}\n```\n@brianlagunas \nNaming things \"properly\" might be hardest part of coding ;) I am open to the IPopupService altough, in my opionion, a popup is something different from both DisplayAlert and ActionSheet. But heck - lets go with it :)\nDeciding to go with IPopupService, should we keep IAlertService and IActionSheetService and just let IPopupService implement both?\nSticking to IPageAware I'll just create an implementation setting the instance variable to Application.Current.MainPage if not set upon first access.\n``` c#\nprivate Page _page;\npublic Page IPageAware.Page { \n  get { return _page ?? (_page = Application.Current.MainPage); }\n  set { _page = value}\n}\n```\n. @BoeseB \nLooks great. Since the default implementation of DisplayActionSheet(string,string,string,.. params[] string) we would like the interface to resemble the native method and then let users extend in ways the like - like you above.\nExample (not sure parameter order is correct...)\n``` c#\npublic interface IDisplayActionSheetButton {\n    bool IsDestructive {get;}\n    string Text {get;}\n    DelegateCommand Command {get;}\n}\npublic static class DisplayActionSheetExtensions {\npublic static void DisplayActionSheet(this IDisplayActionSheetService service,\n\nstring title, string message, params IDisplayActionSheetButton[] buttons)\n    {\n       // Null checks left out\n       var desctructiveButton = buttons.FirstOrDefault(b => b.IsDestructive); \n       var otherbuttonsText = buttons.Select(b => b.Text).ToList();\n       var pressedButton = service.DisplayActionSheet(title, message, destructiveButton.Text, otherbuttonsText);\n       var button = buttons.FirstOrDefault(b => b.Text.Equals(pressedButton));\n       button.Command();\n      }\n}\n\n``\n. I changed the name of services according to @brianlagunas proposal and nowIPopupServiceis just empty wrapper around bothIAlertServiceandIActionSheetService. Should we perhaps just remove the latter and move the interface methods toIPopupService`? \nAn immediate consequence of letting IPopupService implement IPageAware is that the Tests\\Prism.Forms.Tests now must reference Xamarin.Forms. Perhaps this is forced sooner or later any way..\nWill write units tests as soon as I can and push after that.\n. I can go for just using IPopupService and remove IAlertService and IDisplayActionSheetService. The need to use them independently is (probably) outweight by the simplicity of just one interface.\nIt just struck me that if I shoud not declare IPageAware.Page explicitly then that opens up to declare extension methods gaining access to the page-property of IPopupService and hence use third party libraries, like Acr.UserDialogs or others to present HUDs and Toasts, on the IPopupService instance.\nWhat do you think?\n. IPageDialogService sounds great in my ears.\n. Separate configuration class. Either the service can be injected in e.g PageNavigationService or resolved in the constructor using the ServiceLocator and utilized if present.\n. Exactly. \nFor separation of concerns it is probably best to put this in a new interface. Perhaps IPageLifeCycleAware that has two methods OnAppearingAsync and OnDisappearingAsync. \nThis way a view model has the possibility to reload data or take actions when a page is appearing without an explicit navigation action originatning from another view model\n. I am working on this and currently Brian is looking into how to test custom Xamarin application (subclassibg Xamarin.Forms.Application) without introducing compiler directives.\nThere is one thing I am trying to resolve with the creator of DryIoc and that is how to resolve a base class, when registered as derived using named service, with constructor arguments. I will inform you once it is ready\n. What do you think about using read-the-docs?Used by other Microsoft .NET projects (aspnet and EF two examples). It renders documentation from Markdown-ish code and pulls the code from repo so I suggest creating Prism.Documentation and move the docs there. Here is how EF looks and the source from which it's generated.\n. I could help with this!\nOne alternative could be to include a nuget-folder in every project that is eligable for packaging which contain the .nuspecs and the configuration details for successfully building, running tests and package it.\nIn the Source folder we could include a Tools folder which would host the generic powershell file that takes the configuration details and then\n1. Check that nuget.exe is in reachable\n2. Restore project(s) dependencies\n3. Build project(s)\n4. Run unit tests\n5. Update .nuspec file\n6. Create nugpkg\n7. Upload nupkg (the api-key could be resolved by either looking in %user% path for nuget/api.txt, checking it exists in machine config or prompt for credentials if previos attempts failed)\nTo build e.g. Prism.Unity.Forms one would execute Prism.Unity.Forms\\nuget\\build.cmd.\nAnther option would be to create powershell modules and use those when creating build.ps1. E.g. including a powershell module PrismCore to build and run tests and upon success returns the assembly path if copying of any files that is required for Prism.Unity.Forms.\nThoughts?\n. Quick sketch of how it could look like (not yet implemented uploading of nuget nor decided upon how to include release notes)\n``` powershell\n[CmdletBinding()]\nParam(\n[Parameter(Mandatory=$True, Position=1)]\n[string]$root,\n[Parameter(Mandatory=$True, Position=2)]\n[string]$projectName\n)\nDeclare variables\n$msbuild = 'C:\\Program Files (x86)\\MSBuild\\14.0\\Bin\\MSBuild.exe'\n$projectFile = \"$projectName.cssproj\"\n$testFolder = \"$projectName.Tests\"\n$configPath = Join-Path $root $projectName 'nuget'\n$projectFolder = Join-Path $root $projectName\n$testProjectPath = Join-Path $root $testFolder\n$packages = 'packages'\n$nugetFileName = 'nuget.exe'\nif(!(Test-Path $nugetFileName)) \n{\n    Write-Host 'Downloading nuget.exe ...'\n    Invoke-WebRequest 'http://nuget.org/nuget.exe' -OutFile $nugetFileName\n}\nRestore packages for projects\nInvoke-Expression \".\\$nugetFileName restore -PackagesDirectory $packages $(Join-Path $testProjectPath 'packages.config')\"\nInvoke-Expression \".\\$nugetFileName restore -PackagesDirectory $packages $(Join-Path $projectPath 'packages.config')\"\nBuild projects\nRun tests\n$xunit = Join-Path $packages 'xunit.runner.console.2.1.0\\tools\\xunit.console.exe'\n$res = Invoke-Expression \".\\$xunit $(Join-Path $testProjectPath \"bin\\Test\\$projectName.Tests.dll\")\"\nif(0) # TODO How to se that test fails. Starting from xunit2.2.0 we can check $res -gt 0\n{\n    Write-Host \"Tests failed\"\n    exit 1\n}\nPackage nuget\n$assemblyPath = Join-Path $projectFolder \"\\bin\\Release\\$($projectName).dll\"\nif(!(Test-Path $assemblyPath)) \n{\n    # Build\n}\n$releaseNotesUri = 'https://github.com/PrismLibrary/Prism/wiki/DryIoc/'\n$fileInfo = Get-Item $assemblyPath\n$productVersion = $fileInfo.VersionInfo.ProductVersion\nInvoke-Expression \".\\$($nugetFileName) pack $(Join-path $projectFolder \"nuget\\$projectname.nuspec\") -Prop version=$($productVersion) -Prop releaseNotes=$($releaseNotesUri)\" \nRead-Host 'Press any key to exit'\n``\n. @adamtoakley There is an open pull-request that I started. Unfortunately I don't have much time at the moment the finalize it. What I can recall the main thing left is to properly zip binaries for those who haven't moved to nuget-package.\n. Wasn't thinking of making theInitialize` method private instead doing this\n```\n  protected PrismApplicationBase()\n    {\n        InitializeInternal();\n    }\n/// <summary>\n/// Run the initialization process\n/// </summary>\nprivate void InitializeInternal()\n{\n    ConfigureViewModelLocator();\n    Initialize();\n    OnInitialized();\n}\n\n```\nBut I might have missed out on something.. If the method Initialize is to be called by dervied types then it should at least call OnInitialized(). Maybe I'm just tired... Will take a walk with my dog and see what I wrote tomorrow morning and perhaps wear the clown-hat.\nOver and out for tonight\n. Personally I think that kind of information is redundant since the namespace contains information about  the container used. From the users perspective there will always just be one option (well two really if you inlucde PrismApplicationBase) when creating MyApplication using any of the DI projects - PrismApplication. \nSo I think that it suffice with just PrismApplication.\n. To test the new PrismApplicationBase class in the PCL tests I needed to add a new build configuration Test and utialize compiler directives to remove the inheritance on Xamarin.Forms.Application in PrismApplicationBase to prevent InvalidOperationException : \"You MUST call Xamarin.Forms.Init()...\" during creation of the PrismApplication class. Is there any thoughts about this if it should be done differently? The project Prism.Forms.Tests has not yet been updated with the PrismApplication so no guidance from that project.\n. Thats too bad.. I'll finish up the work and submit the PR. \nAnother question regarding testing: wouldn't it be nice to have a test class that could take an instance of PrismApplicationBase and run all tests defined in the Prism.Form.Tests project. That way when creating a Prism.Xyz.Forms project when would simply reference Prism.Forms.Tests and run the test suite for the Xyz.PrismApplication to ensure everything is properly configured regarding ViewModelLocator, INavigationService, IModuleInitializer and others that rely on the Di container that is implemented\n. Wierd thought i created the patch branch directly from remote/master. \nI will redo and do it correctly and update ninject and unity application claases\n. Feel free to decide what is most convenient for you. I'm happy to do it tomorrow when I've time.\nI'll create a new branch from master and implement the Test-configuration approach there and then submit a PR. Is that OK?\nIs there an appveyor config to include the new configuration? Currently I think that the Test configuration is based on Debug, I'll change it to Release\n. Synced and merged.\n. Saw this as well yesterday and posted a question on stackoverflow since I couldn't find how to do it in the docs. \nDryIoc supports resolving overrloads using func var @override = Container.Resolve<Func<INavigationService, TypeToResolve>>(); return @override(navigationService) however this fails since TypeToResolve is not known at compile time.\nI'll dig into this!\n. Fixed. Need to update some tests as well as a new test to check the added functionality. Hopefully I will have time during the day but right now my job calls for attention.\n. One option is to use named registration Container.Register<INavigationService, DryIocNavigationService>(serviceKey: \"dryIocNavigationService\"); and resolve using Container.Resolve(serviceKey: \"dryIocNavigationService\");\nAnother option availble using DryIoc is Container.Register<INavigationService, DryIocNavigationService>(ifAlreadyRegistered: IfAlreadyRegistered.Replace); that simple replace the previos registration.\nNot sure if one has any advantage over the other (except that the last clears all previos registrations). Will ask the creator of DryIoc which is most performant\n. All tests passed (ran them again on my machine with Test configuration). Then error message is truncated so can't tell what it complains about.\nEdit: Merged master (guessed the app-veyour complained about merge conflict)\n. Introduced a new method ConfigureNavigationService(string) to make it clear that it is registered using the service key passed in as an argument. This would make it easier if one wants to register its own navigation service.\nHowever this breaks the consistency that you were after so perhaps I should revert this?\n. Oops fat fingers. Accidently pressed Close, sorry about that\n. @dansiegel Tried that first time but it didn't compile. But that was because I forget to add the internal modifier to the method.. Stupid stupid me.\nThanks\n. Yes I'm aware of the changes, just havn't hade time to fix them :) Will implement the changes later this afternoon or tomorrow!\n. Cool. Wish by boss had sent me to Evolve - seems great :)\nBtw, what files/folders should be zipped? Zip the binaries, nupkgs separately? \n. @brianlagunas Was the IApplicationProvider interface introduced to act as the adapter for Xamarin.Forms.Application? If so, I will remove it and update the places where it is used and ensure that the new \"adapter class\" works well under Test-configuration.\nYou posted a comment in in the thread #535 and I just want to make sure I didn't miss interpreted that :)\n. First idea that comes to my mind is to create an overload constructor with signature public App(Action<IContainer> register).\nUsage:\nc#\nvar formsApp = new App(container => \n{\n   container.RegisterType<IService, HockeyAppLogger>();\n});\n...\nLoadApplication(formsApp);\nThen call the action before/after registrations are done in RegisterTypes. Before/After will affect how multiple registrations of the same interface will be handled by the container. For example in DryIoc you could specify that it should replace the previous or just append it (in which it will need service key by default).\nSo perhaps a more \"sophistacted\" approch will be needed. One of them could be to create an interface IPlatformApp (perhaps abstract class is more suitable) that could define various extension points and then it will be injected into the App constructor.\nWhen implemented a bootstraper using Autofac I utilized the IModule interface which has quite few methods one of them is void Register(IContainer container) and then I passed a list of IModules to my boostraper constructor which was later called and registered my application specific services.\n. Now I'm just thinking out loud. What if there would exists something like ApplicationBuilder that allow a fluent-like registration model that later passed to the Application. The builder could perhaps utilize the Module architecture already at place and there could be something like RegisterPlatformTypesModule that does what we discuss here, i.e. has constructor expecting IContainer and a method void ConfigureServices(IContainer container).\nThis could potentially be extended for registration of services in a more concise manner, something like \nc#\nvar builder =  new ApplicationBuilder()\n     .ConfigureSqLite()\n     .ConfigureHockeyApp();\n      ...\nLoadApplication(new App(builder));\n. Example for Android. Below is using DryIoc but it works same way for any container (except that the signature reflects the container type)\n``` c#\npublic class DroidPlatformInitializer : IPlatformInitializer\n    {\n        public void RegisterTypes(IContainer container)\n        {\n            container.Register();\n        }\n    }\npublic class MainActivity : FormsApplicationActivity\n    {\n        protected override void OnCreate(Bundle bundle)\n        {\n            base.OnCreate(bundle);        \n            Forms.Init(this, bundle);\n            LoadApplication(new App(new DroidPlatformInitializer()));\n        }\n    }\n```\n. Hi,\nGood work. Some observations after a brief look\n- You should provide a service key when registering the PageDialogService implementation.  (https://github.com/joacar/Prism/blob/7a204c22989b35a1acb2ffb9206f8946c5bbc5f2/Source/Xamarin/Prism.DryIoc.Forms/PrismApplication.cs#74)\n- Also you should provide a way to utilize Xamarin.Forms.DependencyService as fallback container.\nRegarding the Page issue I will look closer at it when I have time\n. What I usually do is creating a local branch from origin/master (i.e. the branch of this repository) and perform the work in that branch and later submit a PR. This way you avoid having all the files changed like this PR.\nYou should also add tests (see #535 for details).\nI prefer if you create a new branch like above and implement your changes and then submit a new pr. @brianlagunas what do you think?\n. Not a big fan of underscore either. Another solution is to use template-method pattern.\nIn ProcessNavigation method we simply add protected virtual Task ProcessNavigationForPage(...) (with the same signature as the others) as last else-clause to allow users to handle navigation for custom pages\n. The first commit (closure) adress this where the lambda methods in ProcessNavigation{Type} capture the variables in the instance method and hence the compiler (perhaps changed) allocates a new \"state-class\".\nIntroducing the static methods DoNavigate{Type}Action will let the compiler generate a cached-delegate and will be resued and we avoid extra allocations. At least this is how I have interpreted some of the resources I've come across - so I might be completly wrong about this.\nWould be happy to measure the performance between the two approaches (both time taken and number of allocations) with some help how to set up such a test. Perhaps use GC.Count() but this is new to me so I would like to learn and investigate.\nSecond is the case when a user defines 'MyCustomCarousel : MultiPage' and since that class is not recognized in ProcessNavigation it will be ignored.\n. I think the reason for using service key is to ease overriding PageDialogService. I know AutoFac and DryIoc can handle this differntly (perhaps the service key is \u00e0 must in unity/ninject). So service key is preferred for consistency. Please correct me if I'm wrong @brianlagunas \n. Good idea. I would also like to see something similar to handle different screen sizes so it is possible to load a different view e.g. on larger tablets.\n. How should this be handled in PageNavigationService and PageNavigationRegistry? Something like\nc#\npublic static void Register(string name, Type pageType, Platform platform, Idiom idiom)\n{\n    ....\n}\nand then in public static Type GetPageType(string name) check the Device.Platform and find any appropriate overload other default to none? Or do we simply put this on the developer to handle in CreatePage(string segmentName) in PageDialogService?\n. Please provide a reproducable solution and I will take a look at it. \nAlso be sure to wrap your initial page in NavigationPage\n. Hi,\nI know that some containers (Unity) lacks a nice way to overload and instance requested from the container and in such cases the name of the parameter must be navigationService (at least when constructor injection is used).\nWhen using attributes I don't know how that will turn out but try rename NavService to navigationService and if that doesn't work try requesting it in the constructor of the view model\nEdit:\nWhen you get it to work you can use AbsoluteUri when navigating from the LoginViewModel upon successful sign in to clear the navigation stack. This will remove the page so that the user cannot \"go back\" to it (e.g. android hardware button)\n. Hi,\nI have a hunch that you don't get the right instance. In the method ViewModelLocationProvider.SetDefaultViewModelFactory(Type view, Type viewModel) the IPageAware.Page property is set on the instance of NavigationService that is created and then this instance should be the one used. Unity is limited in the sense that overloading is only possible by parameter name, hence the naming becomes crucial and should, in case of constructor parameter injection, be navigationService. \nSo basically I think that the wrong instance of INavigationService is set for the property that don't hold a reference to the page you think it does and hence the OnAppearing is not called.\n. In version 6.2 the interface IPlatformInitializerIs added to address this issue. Pass an instance to Prism Application and IT Will call registertypes with the choser container\n. I have actually never implemented a TabbedPage in any project. If the CurrentPage is not set I guess that the first children will be displayed. Hence it make sense to send any parameter to the first children if no tabbed is specified in the uri. \nMyTabbedPage?foo=bar and MyTabbedPage/TabA?foo=barwill both pass parameter to TabA given that it is the first children.\nIn the first case we can always log a warning about that the intention isn't clear if TabbedPage\u00b4 behaves differently than assumed above\n. I thought I wait and then just merge/rebase. Good idea. That is more inline withInvokeCommandAction. HmEventArgsParameterPath- I don't like that.. It is about the property/member of event args so perhapsEventArgs{Member,Property}Path`. Or should we just stick with the WPF property name TriggerParameterPath?\nI'll remove the  EventArgsConverter and  EventArgsConverterParameter and update the example and documentation.\n. :) Yes I dont mind it either. Should the CommandParameter take precedens over the others?\nOrder of evulation\n1. CommandParameter set then execute\n2. EventArgsParameterPath set then evaluate member and execute\n3.  EventArgsConverter set then evaluate converter and execute\n~~Also I will evaluate the CanExecute earlier to prevent unecessary work if the command isn't even to be executed.~~ Stupid me.. The parameter will off course be used to evaluate the CanExecute. \n. @brianlagunas When time comes to merge this I think you should consider merge-n-squash to prevent the large amount of commits to be present in history for master branch. This way only one commit wil be visible and that is the merge commit.\nI think that merge-n-squash might be a fast-forward merge and I'm not 100% sure if that has any side effects. Might make a revert more difficult to perform. \n. The way it works now is, if I'm not missing something, the way you describe it @dansiegel \n``` c#\nvar parameter = CommandParameter;\nif(parameter == null && !string.IsNullOrEmpty(Path))\n{\n    // This will only be executed if CommandParameter is not set and Path is set\n     parameter = EvaluatePathProperty();\n}\nif(parameter == null && EventArgsConverter != null)\n{\n    // This will only be executed if parameter is not set (either CommandParameter is not set or Path is not set or Path has not evaluated to any non-null property).\n    parameter = EventArgsConverter.Convert(...);\n}\n```\nDifference is that you favor the Converter before the Path. In what order the properties should be handled - I've no idea nor any preferences. As long as it is well documented I don't think it matters that much\n. Should we support changing the EventName from the view model? E.g. start with Focused and when the command is executed just listen to Unfocused event.\n@adrianknight89 posted this link  in the issue in where it is supported.\n. The implementation in the link is more comprehensive then this and more like the solution provided for WPF, I agree on that.\nThe argument \" ... instead these should be separated out into another assembly ...\" - does that say the implementation of \"EventToCommand\" in WPF should be removed from Prism and made a available as a Nuget?\nI think that \"event to command\" is a common issue that a developer meet trying to follow MVVM pattern and hence Prism, as a good MVVM framework, should provide the toolset to handle this (as it does for WPF)\n. I agree with the src and tests folder. Usually I put all projects in the src folder.\n-- src\n  -- {Your Solution}\n  -- {Your Solution}.Droid\n  -- ....\nI haven't (yet) come across the time where I've need another level.\n. Hi,\nThere is the ErrorsContainer but currently that is only for WPF. I would use a behavior for this scenarios.\n``` c#\npublic class EmailValidationBehavior : Behavior\n{\ntatic readonly BindablePropertyKey IsInvalidPropertyKey = BindableProperty.CreateReadOnly(nameof(IsInvalid), typeof(bool), typeof(EmailValidationBehavior ), false);\npublic static readonly BindableProperty IsInvalidProperty = IsInvalidPropertyKey.BindableProperty;\n\npublic override void OnAttachedTo(Entry entry) \n{\n entry.TextChanged += OnTextChanged;\n}\npublic override void OnDetachingFrom(Entry entry)\n{\n// Unsubscribe to prevent memory leaks\n entry.TextChanged -= OnTextChanged;\n}\npublic void OnTextChanged(object sender, TextChangedEventArgs e)\n{\n    // Validate the email here using e.g. regular expression\n   // sender is Entry so here you can apply a style in case it is invalid\n}\n}\n```\nAnd here is how you can use it\nc#\n...\n<Entry>\n<Entry.Behaviors>\n    <b:EmailValidationBehavior x:Name=\"emailValidator\" />\n</Entry.Behavoirs>\n</Entry>\n<Label Text=\"Email is invalid\" Visible=\"{Binding Source={x:Reference emailValidator}, Path=IsInvalid}\" />\nFurther this kind of questions should belong in Stackoverflow and tag them with Prism\n. Check this source as it is more complete\n. If you can create a stripped down project that reproduce your issue I can take a look. That strack trace doesn't make any sense to me. Are you using the latest 6.2?\n. If I remember correctly the CarouselView is available as separate NuGet and not part of Xamarin.Forms.  Check #650 where I think the CarouselView is discussed.\n. Hi,\nOff course it is possible, but I guess that the current solution prevents that for some reason. One reason might be that a potentially long-lived object is sent to the constructor of a view model and then in ObserversProperty a reference to that object might prevent the view model from beeing garbage collected. This can, however, be fixed by using WeakReference or/and a proxy class mainting a weak reference to the entity to observer as well as the view model.\nIf you have ReSharper installed it is fairly easy (think it is Alt+Insert when on the instance field of Entity) to generate delegeting members for in your view model and then observe those properties.\nThat might also be the approached recommended and why they didn't implement ObservesProperty for classes.\n@brianlagunas will tell you have it really is :)\n. @briannoyes I thought that it would create a reference loop.\n```\n// Long lived object\npublic class Settings : INotifyPropertyChanged\n{\n     public static Settings Current {get; private set;}\n}\npublic class ViewModel\n{\n    public ViewModel()\n    {\n        MyCommand = new DelegateCommand(...)\n                    .Observe(Settings.Current) // Take instance if INotifyPropertyChanged\n     }\n}\n```\nSince Observes will attach to PropertyChanged event handler - will the GC still be able to collect ViewModel even thought they reference each other since the ViewModel owns the command?\nJust happy to learn how things really works :)\n. @briannoyes Got it thanks! I have some apps where I've registered the implementation of ISettings as singleton and have it injected and I guess this as well would introduce leakage..\n. Was about to submit a PR for this friday but it slipped my mind. So thumbs up!\n. I wrote a test and cannot reproduce the issue.\n```\n[Fact]\n        public async void DeepNavigate_ToNavPage_ToTabbedPage_ToChild_ToModalContentPage_GoBack()\n        {\n            var navigationService = new PageNavigationServiceMock(_container, _applicationProvider, _loggerFacade);\n            var rootPage = new ContentPageMock();\n            ((IPageAware)navigationService).Page = rootPage;\n        await navigationService.NavigateAsync(\"NavigationPage/TabbedPage/PageMock\");\n\n        await navigationService.NavigateAsync(\"ContentModalPage\", null, animated: false);\n\n        await navigationService.GoBackAsync();\n        var navigationPage = (NavigationPageMock)rootPage.Navigation.ModalStack[0];\n        var tabbedPage = (TabbedPageMock)navigationPage.CurrentPage;\n        var tabbedPageViewModel = (TabbedPageMockViewModel)tabbedPage.BindingContext;\n        Assert.Equal(1, tabbedPageViewModel.OnNavigatedToCount);\n        var pageMock = (PageMock) tabbedPage.Children[1];\n        var pageMockViewModel = (PageMockViewModel) pageMock.BindingContext;\n        Assert.Equal(2, pageMockViewModel.OnNavigatedToCount);\n    }\n\n```\n(Note this will not just work by copy paste since I added properties to ViewModelBase)\nAdding the assertion Assert.Equal(1, pageMockViewModel.OnNavigatedFromCount); causes the test to fail though.. I guess that OnNavigatedFrom should be called on the children of the TabbedPage as well even if the navigation is modal.\nAs I side note I found that pages that doesn't have ViewModelLocator.SetAutowireViewModel(this, true) in ctor will inherit the BindingContext, at least for childs to a TabbedPage\n. My test is not accurately reflecting the issue you are having. Will have to create a small test and run this in emulator to be sure.\nWill update as soon as I have time\n. Ohh API-naming my favorite topic ;)\nINavigatingAware is a good name but introducing it makes INavigationAware a less ideal ~~bad~~ name since it all of a sudden became INavigatedAware. \nThus INavigationAware should become \npublic interface INavgationAware : INavigatingAware, INavigatedAware\n{\n}\nwhere INavigatedAware is the \"old\" INavigationAware\nBut I realize this a breaking change and that is what we want to avoid.\n. I like that idea. That opens upp for marking it obsolete in the next release and in the release after that (or two versions don't know what the usual time frame is when obsolete is \"full-filled\") implement it as public interface INavgationAware : INavigatingAware, INavigatedAware (if desired)\n. As you mentioned earlier, there will already be a breaking change due to ~~FromAsync~~ DelegateCommand.FromAsyncHandler (can't recall exact) so I vote for introducing this along with that. Probably the above will have less impact on existing Forms-project in contrast to this.\n. If you use absolute URI for navigation the navigation stack is cleared and the MainPage-property is set to the first page in the path. See here\nc#\nTask SignIn()\n{\n     // Successfully signed in\n    await navigationService.Navigate(\"app:///postListPage\");\n}\nIn the future ask these kind of questions on Stackoverflow and tag them with Prism/Prism.Forms :)\n. Why not just present LoginPage if the user is not signed in?\nThen navigate to desired view by an absolute uri (which clears the navigation stack and set Application.Current.MainPage with the first view in the path of the uri).\nThus await navService.NavigateAsync(\"https://host/MainPage/ViewA\"); after successful sign in.\n. Calling IDisposable twice should be on the applications responsibility to handle correctly - so this should pose no treat. \nIf, as you say, Forms calls it and does so on a different thread then we are in for some trouble.\nI think a unique interface is good since it can provide more clarity in naming convention and also removes the potential issue of above\n. Tricky... \nFirst thing that pops up in my head is something with lifecycle. But IView{Model}LifecycleAware doesn't  sound appealing. Beside, it would propably just have one method NoLongerBoundToView\\OnViewDestroyed\\....\nThen we have IActiveAware which, in a sense, handles lifecycle events.\n. Didn't think to use IActiveAware, just wrote it to for \"brain storming\" purpose :)\nIPopped and IDestroy  makes it to the final. \nIDestroy make me think about OnDestroy in Android so from cross-platform point of view maybe IPopped is more platform-independant name. But since it will be called on pages that aren't popped, IDestroy seem more suitable.\n. This PR #796  might be worth checking out\n. @brianlagunas I am not happy with this since it exposes a method that are just used to for unit testing. Perhaps surrond it with the TEST compilation symbol. \nProbably there is a better way to test that the instance of INavigationService injected into the view model has the correct page set to the Page-property.\nAny ideas how this should/could be done would be appreciated\n. Perhaps refactor this to protected virtual object ResolveViewModelForView(object,Type). \n. I like that - it makes it clear that the navigation service utilize the page instance. Also I was thinking refactoring ConfigureViewModel like this\n``` c#\nprotected override void ConfigureViewModelLocator()\n        {\n            ViewModelLocationProvider.SetDefaultViewModelFactory((view, type) =>\n            {\n                var page = view as Page;\n                if (page != null)\n                {\n                    return PageViewModelFactory(page, type);\n                }\n                return Container.Resolve(type);\n            });\n        }\n    /// <summary>\n    /// Resolve the view model of <paramref name=\"type\"/> associated with <paramref name=\"page\"/>\n    /// </summary>\n    /// <remarks>\n    /// The method will set the <see cref=\"IPageAware.Page\" /> property on the <see cref=\"INavigationService\"/>  \n    /// instance that will be injected into the view model.\n    /// </remarks>\n    /// <param name=\"page\">The <see cref=\"Page\"/> associated with the view model</param>\n    /// <param name=\"type\">View model type to resolve</param>\n    /// <returns>View model instance of type <paramref name=\"type\"/></returns>\n    protected virtual object PageViewModelFactory(Page page, Type type)\n    {\n        // Use CreateNavigationServiceForPage here instead\n        var navigationService = CreateNavigationService();\n        ((IPageAware)navigationService).Page = page;\n        ResolveTypeForPage(page, type, navigationService);\n        // Resolve type using the instance navigationService\n        var resolver = Container.Resolve<Func<INavigationService, object>>(type);\n        return resolver(navigationService);\n    }\n\n```\nMoving back to the original question, yes, it feels dirty. That method exists soley for the purpose of grabbing the instance injected into the view model so that it can be tested that the Page property of IPageAware is correct.\nAnother option would be to add extension methods (for test only) to INavigationService that returns the view model navigated to. E.g. Task<TViewModel> NavigateTo<TViewModel>(). Then we can check that the navigation service in the mock view model is correctly initialized.\nIf you have a better way please share\n. Perfect. Feel so stupid I didn't think of that before. Will implement the changes and adjust the tests. \nThanks\n. It is set in CreateNavigationService(Page)\n. Line 83 in PageNavigationService use typeof(ViewModel).FullName. Shouldn't this be using Name as well, otherwise it won't work\n. Thanks for pointing me in the right direction.\n. Just a minor spelling issue: retruns should be returns in the executeSynchronously comment\n. Shouldn't it be called BehaviorBase<T> (skipping the trailing s)?\n. return the resolved instance?\n. return the resolved instance?\n. If we make this virtual that will allow developers to easily add other behaviors to existing page types or handle any events for a custom page type.\n. Just making it virtual would allow those who want to get crazy to implement a more complex scenario like the one you describe. Then IPageBehaviorFactory could be injected into the derived navigation service implementation and thus leave the default implementation free from those details. \nThat is if there isn't a good reason to implement the IPageBehaviorFactory. Perhaps allows to handle more complex situations that will arise in the future without needing to change NavigationService and if so, this might be the good reason :). But what do I know\nI haven't used that feature in WPF so can't tell if it's a good match for Forms. Probably since it's a good enough for WPF :) (if not crazy large)\n. Use null conditional-syntax instead -> viewModel?.Dipose()\n. ",
    "JeffDalby": "Any temporary workarounds while you rethink so we can build pages with toolbars for now?  I've got the 6.01 version which has a CreatePageForNavigation in the INavigationPageProvider , however it wants a (Page sourcePage, Page targetPage) which doesn't match the implementation in PR #195 example. Not sure how to make the conversion between it and:\n```\npublic class ViewANavigationPageProvider : INavigationPageProvider\n{\n    Page _page = null;\npublic void Initialize(Page page)\n{\n    _page = page;\n    NavigationPage.SetHasNavigationBar(_page, true);\n    NavigationPage.SetBackButtonTitle(_page, \"Go Back Sucka\");\n    NavigationPage.SetHasBackButton(_page, true);\n}\n\npublic Page CreateNavigationPage()\n{\n    var newPage = new NavigationPage(_page);\n    newPage.BarBackgroundColor = Color.Green;\n    newPage.BarTextColor = Color.White;\n    return newPage;\n}\n\n}\n```\nI'm happy to go back and change things later once it's been decided on a \"right\" way to do it. Just currently stuck since I've got to build a page that requires a toolbar.\nHave patience is a perfectly valid answer to this question. :-)\n. Thanks for the quick response.  Somehow  missed that documentation in my searches.  I looked into creating a page that derives from NavigationPage, but it broke that code  I had done which was overriding OnInitialize in the bootstrapper so I could call OnNavigatedTo for whatever I returned as mainpage() since the context of the main page comes back as null if you set the mainpage to a derived class (which makes sense given it has no viewmodel)  Of course thinking about it, now I'm not sure that code is needed.  If I derive a page from NavigationPage, and in the constructor use Navigation.PushAsync(MyPage) will OnNavigated to be called?  I would think not, since its not using the NavigationService, but I'm no longer at a machine to test. \n. Mostly because I learned Prism from the MVA course on Windows 8.1 Universal Apps which showed you can pass stuff to a page via the Navigation Service on startup. \ud83d\ude01\nIt's a port from Windows where we used app.xaml.cs to read roaming settings  which store things like what they have set the default startup page to, then we pass the primary account name to whatever page they set as the default via the navigation service. Also in the case of Windows we'd pass Cortana's stuff to the page if launched directly from it(her?) Of course we hope eventually as Microsoft expands Cortana to other platforms eventually Xamarin forms will support it, but if that ever happens its a long way off.  \nWe then have other pages that can also navigate to whatever page was used on startup  but pass it a different user account via the navigation service at which point we use onnavigated to load that accounts' data and set it up based on the info passed to it instead of the primary user.  I could move some of the OnNavigated to stuff to the viewmodel constructor but then I loose the ability to pass a different set of parameters on startup vs when navigated to from another page, and for some pages nearly all the data that is loaded for the page is dependant on the user passed to it.\nSo I the use case is, now that I've written all that out, is we have pages that depend on a user being passed to them to determine what they show. Users can switch which account is shown on one page and we need to pass it along as they navigate,  and they have the option to set different pages as the startup page (and eventually they'll be able to store which accounts data is shown at startup instead of always starting up to the default account). Most of the code for those pages viewmodel needs to know who's data it is supposed to be loading, and its been easiest to do that by passing it when we navigate to it. Think of it as in the AdventureWorks example being able to say always launch to X products page or to my order history page instead of the main page. You've got to pass the product id so it shows the right stuff.\nI think I accidentally beat that horse to death in explaining it too many ways...sorry about that. I shouldn't post from my phone on a Friday night.\nFrom your help on the other issue I opened I'm able to launch to whatever page and get the right viewmodel's OnNavigatedTo on startup..but then one of those potential pages needs a toolbar, which messes the whole thing up since the content page has to be initiated by a navigationpage to work.\nGood times.\n. Until Xamrin makes it so you don't have to initialize a content page via a navigation page just to get access to the content page's built in toolbar I'm not sure there is another way.   \nHonestly, the more I'm getting into XF the more I'm thinking forget using some of the controls they've built which attempt to function semi-natively. The reality is a Forms app isn't ever going to look very \"native\" anyway. So I may just go with the competing trend of consistency of brand/design and usage regardless of device.  \nSeems much easier to fake the equivalent of the Windows Phone bottom app bar right in the content page, than to deal with the silliness of making an XF toolbar work.  Something I've got to think on.\nAs always thank you for your dedication to make Prism XF work.\n. K.  So from that info here's my solution that handles my use case:\nAdd the following to the Bootstrapper class:\n```\n    NavigationParameters navParameters = new NavigationParameters();\nprotected override void InitializeMainPage()\n{\n        ((INavigationAware)App.MainPage.BindingContext).OnNavigatedTo(navParameters);\n}\n\n```\nSince I'm casting to INavigationAware, which all my viewmodels implement I can use logic to set \nreturn Container.Resolve<AnyPageIWant>();\nAnd instead of passing whatever parameters I want via the navigationservice I have to add them to navParameters, which isn't all that bad.  By doing it this way I can call whatever page I want and pass any parameters from the bootstrapper.\nThanks!!!\n. Yeah that was the first thing I tried.  \nTrying to call App.InitializeComponent() from within the bootstrapper's OnInitialize won't let you compile saying that InitializeComponent() doesn't exist.\nSomehow the InitializeComponent call isn't created until you build the project.  There's a defect out on it where the compiler gives you a warning that it doesn't exist, but if you call it within the App constructor once you build it all works out. So you just ignore the errors.  Unfortunately whatever is piecing it together doesn't work if you call it from outside the page's class.\n. Intellisense error when you call InitializeComponent within App(){}, full on build error when you try calling App.InitializeComponent() from OnInitialized.  And I just took a moment to actually look at the error and it's because Xamarin was Xamarin and they marked InitializeComponent private.\n. Cool.  I'll try that. Out.\nSent from my Windows Phone\n\nFrom: Brian Lagunasmailto:notifications@github.com\nSent: \u200e12/\u200e15/\u200e2015 4:49 PM\nTo: PrismLibrary/Prismmailto:Prism@noreply.github.com\nCc: Jeff Dalbymailto:jeff@wefeel.org\nSubject: Re: [Prism] [XF] new 6.2 OnInitialized running prior to App main constructor, causing page navigation prior to initializing an app.xaml.cs (#358)\nYou don't need to prefix with \"App\". There is no bootstrapper anymore. You are dealing with a base application class now.\nSo it will be like this:\n```\n    protected override void OnInitialized()\n    {\n        InitializeComponent();\n    NavigationService.Navigate(\"MyNavigationPage/ViewA/ViewB/MainPage\");\n}\n\n```\nAt least this worked for me.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PrismLibrary/Prism/issues/358#issuecomment-164934833.\n. Yes it worked perfectly.\nSent from my Windows Phone\n\nFrom: Brian Lagunasmailto:notifications@github.com\nSent: \u200e12/\u200e24/\u200e2015 12:38 PM\nTo: PrismLibrary/Prismmailto:Prism@noreply.github.com\nCc: Jeff Dalbymailto:jeff@wefeel.org\nSubject: Re: [Prism] [XF] new 6.2 OnInitialized running prior to App main constructor, causing page navigation prior to initializing an app.xaml.cs (#358)\nCan you confirm if that worked for you? If so I will update the Prism Template pack.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PrismLibrary/Prism/issues/358#issuecomment-167152985.\n. Bill,\nI've just opened a support ticket with Xamarin for this very issue.   I can tell you that Prism doesn't stop it from happening.\nBrian,  \nQuick question (I know this is flagged as closed but the answer may help me work with Xamarin to find the source of the problem):  Should PRISM XF be creating a new viewmodel each time you navigate to the page, or should it work as a singleton, like services do with Unity?   In tracing things I'm finding that every time I navigate to a page the viewmodel constructor is being called.  That's OK if when I navigate away from the page the previous instance of the ViewModel is released, but using Xamarin's (significantly buggy) profiler I don't seem to be getting anything back when I leave the page, even if I force a garbage collection afterwards.\nI just don't want Xamarin to come back and point fingers saying it's because prism keeps instantiating VM after VM.\nI'm happy to take point on this issue as far as coordinating anything with Xamarin if needed. \nJeff\n. Just to add I created a test project using the latest Prism XF with two pages, each having a binding for a label, and single button calling a delegate command to navigate to the other page and a small image.  Just clicking the buttons to navigate back and forth between the two pages will crash the app in about two minutes as memory climbs with each click.\nI've sent a copy of the solution to Xamarin Support and will update this with what they find.\n. I understand it isn't an issue from a PRISM XF functionality standpoint, so I guess it should be a feature request.\nThat being said it is problem if one incorrectly thinks they can use PRISM XF in the exact same way they did on Windows.\nFor people coming from Windows Apps you don't have to think about it, PRISM just works by saying navigate here or there due to how the under lying system works.\nWith XF you can't use the navigation service the same,  even though (if you don't know better) it will seem like you can.  Given it is so early in the PRISM XF development cycle, there's not much out there documenting the difference. I thought it would be good to at least have something out there so people can learn from my stupidity.\nApologies for putting it in the issues section.  I'm not sure where else to post or ask this kind of info.\nAs always, thank you for your help\nJeff\nSent from my Windows Phone\n\nFrom: Brian Lagunasmailto:notifications@github.com\nSent: \u200e12/\u200e23/\u200e2015 6:09 PM\nTo: PrismLibrary/Prismmailto:Prism@noreply.github.com\nCc: Jeff Dalbymailto:jeff@wefeel.org\nSubject: Re: [Prism] PRISM XF Modal Navigation and the ever growing navigation stack (#370)\nThis is not a defect or an issue. Think about how you would accomplish this without Prism. You would have to manually remove and add your view instances around your modal stack. So you would always have to keep track of your page instances, and the iterate the stack to find it's current position, remove it, then put it back in the stack where you want based on where you are going and where you are coming from. Also, you should not be using modal as you primary navigation mechanism using XF. Modal works a lot differently on the other platforms. For Windows it uses a navigation page under the covers so its seems like it works, but try on iOS and Android and you will soon discover different behavior. You need to think hard about the flow or your application and how users get from one screen to another. You'll use a combination of Navigate and GoBack to manage your stack in Prism.\nWe are researching how to cache pages in XF for reuse, but there is a lot to be considered before we can implement something like that.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PrismLibrary/Prism/issues/370#issuecomment-167017076.\n. Cool, turns out I was overthinking this one.  Given that in our case the page is always navigated to modally, and once you click the button to go back you don't ever want the button to work again (you want the page to disappear)  It's just a matter of:\nIf (!IsNavigating)\n{\n IsNavigating = true;\nawait _navigationService.GoBack();\n}\nIsNavigating defaults to false, so it just works.\n. Just tested on JellyBean, and it's got the same issue.\n. Yeah, happy to help how I can.  Let me grab it and get setup for that.  I'll update when I've got some info.\n. Well it's dying in DoPush now, I can't get it to crash in GoBack after changing GoBack to:\nDevice.BeginInvokeOnMainThread(async () =>\n                {\n```\n                var poppedPage = await DoPop(page.Navigation, useModalForDoPop, animated);\n            if (poppedPage != null)\n                OnNavigatedTo(previousPage, segmentParameters);\n        });\n\n```\nI've got a feeling that change isn't helping and is just a coincidence, since the crash has always been random. Currently I can crash it by navigating back and forth anywhere from 2 to 10 times or so, always in DoPush \nif (useModalNavigation)\n     await currentPage.Navigation.PushModalAsync(page, animated);\nTrying to force PushModalAsync onto the main thread with BeginInvokeOnMainThread doesn't change anything.  It crashes prior OnNavigatedTo running (since DoPush is being called as navigationAction() within DoNavigateAction) so it can't be anything in there.\nSeems to me that it's Xamarin's code, but I have no idea if they'd say the cause is because it somehow is not being called on the thread that created the view in the first place. \nAnd to throw something completely beyond my ability to understand, if I put a GC.Collect() in the OnNavigatedTo on any viewmodel it will also crash the app with the exact same error.  I had that on one of our pages per Xamarin support because garbage collection cleaning things up before we had to load a bunch of data, but since then we've done some optimization and don't really need it anymore.  Still I don't get how garbage collection results in the same error. \nDo you have a good relationship with the Xamarin guys these days, or would you prefer I open a support ticket with them?\n. I've got ticket with them for an iOS defect.  They responded today asking me to send them an app that duplicates it, I'll just try to create one that does both.  Two birds, one stone and all that.  I'll post the results here when I hear back from them.\n. Close this out, as suspected a Xamarin Issue, though not what I thought it was.  You've got to love the lack of info you get from certain Android crashes with Xamarin.  While the crash was in the navigation, the issue was in a custom control, which happened to be the only thing not commented out for testing because it was an animated image button I use as the Go back button.   \nOn pre-Lollipop Android if you have a custom control that implements ICommand the CanExecuteChanged method fires on a background thread.....sometimes. This doesn't happen on 5.x or 6.x. \n. Thanks!  \nNot sure if this is related or me not understanding something but I found this because in the constructor of my viewmodel I am using Prism.Events to subscribe to an event telling the viewmodel to refresh if a datasync occurred.  \nI found that after navigating away from the view(page) the method in the viewmodel that I had subscribed to was still firing off even though I've navigated away from the page.  I thought that viewmodels weren't cached and so I shouldn't have had to unsubscribe from the event since Prism.Events handles all that stuff.  \nTo deal with it, I just put an Unsubscribe to the event in the OnNavigatedFrom to ensure it goes away, which lead to finding out in certain situations OnNavigatedFrom wasn't firing.\n. Do we have an option other than NavigateAsync in the latest Prism XF preview?  We had to update all the navigate calls to navigateasync after updating and don't see an alternative.   Back in December we had talked about caching views/viewmodels and how when you navigate to a page the viewmodel has to be recreated, which caused us to completely change how we navigated to prevent ever increasing memory usage. Part of that is in certain situations we need to clear the navigation stack by navigating to an absolute uri.  Has something changed since then that I missed?  \nI guess the big question I have is, if I have a view and I navigate away from a view using an absolute URI with NavigateAsync, that view shouldn't be in the stack and we can no longer go back to the page, how would that view ever get cleaned up from memory? If calling NavigationAsync means it's still in memory even when you use an absolute URI (and any other views that were (but are no longer) in the navigation stack for that matter), wouldn't you end up with entire views/viewmodels orphaned in memory every time you used absolute navigation? \nThanks again for your help.\n. Ok, we're on the same page, and that's how I thought it worked.  Thanks for the clarification.\nSent from my Windows Phone\n\nFrom: Brian Lagunasmailto:notifications@github.com\nSent: \u200e6/\u200e1/\u200e2016 4:21 PM\nTo: PrismLibrary/Prismmailto:Prism@noreply.github.com\nCc: Jeff Dalbymailto:jeff@wefeel.org; Authormailto:author@noreply.github.com\nSubject: Re: [PrismLibrary/Prism] [XF] OnNavigatedFrom not called when using absolute URI (#616)\nAlso, the ViewModels are only recreated if you are adding a page to the stack using NavigateAsync, not if going back to a previous page with GoBackAsync\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/PrismLibrary/Prism/issues/616#issuecomment-223142611, or mute the threadhttps://github.com/notifications/unsubscribe/APAwWJzAjlxxHZO0VYrIp8rlT5y_owbXks5qHgXXgaJpZM4Ir3eC.\n. Personally, having been using this since right after the first preview release of PRISM XF, I think it is a great idea.  Especially for people new to the whole concept of Xamarin, which I would guess there will be a lot of given it's newly open source nature.  The more PRISM becomes a plug it in and forget it, and the easier it is to use, the broader appeal it will have.   Sure for many, or even most of us early adopters, it is great to know exactly what is happening and anything that smells of \"magic\" is bad. So being able to override things, or even redundantly putting in the AutoWire lines in for those people makes sense.  But for those who just want something to work, I think the less steps to make it do so, the better.\n. ",
    "ShahriatHossain": "On my Xamarin android MainActivity class I am using this code to navigate to one of my forms page:\nvar nav = new NavigationPage(new MyPclFormPage());\nnow it is redirecting to MyPclFormPage page but I have also snippet of code inside the MyPclFormPage's constructor:\nprivate readonly INavigationService _navigationService;\npublic MyPclFormPage(INavigationService navigationService)\n{\n_navigationService = navigationService;\nthis.NavigateToDetail();\n}\nprivate async void NavigateToDetail()\n{\nawait _navigationService.Navigate(\"DetailPage\", null, false);\n}\nNow it seems that DetailPage constructor is firing but page is not navigating. Can you help me what I have done wrong?\n. Hi, Thank you very much for your such a valuable response. I have tried to integrate your code on portable project but it is getting error like below:\n08-11 18:22:54.668 E/mono    ( 5517): Unhandled Exception:\n08-11 18:22:54.668 E/mono    ( 5517): System.NullReferenceException: Object reference not set to an instance of an object.\n08-11 18:22:54.668 E/mono    ( 5517):   at (wrapper dynamic-method) System.Object:43344384-2b0a-48b6-91a1-2feb0c0ba139 (intptr,intptr,bool,int,int,int,int)\n08-11 18:22:54.668 E/mono    ( 5517):   at (wrapper native-to-managed) System.Object:43344384-2b0a-48b6-91a1-2feb0c0ba139 (intptr,intptr,int,int,int,int,int)\n08-11 18:22:54.668 E/mono-rt ( 5517): [ERROR] FATAL UNHANDLED EXCEPTION: System.NullReferenceException: Object reference not set to an instance of an object.\n08-11 18:22:54.668 E/mono-rt ( 5517):   at (wrapper dynamic-method) System.Object:43344384-2b0a-48b6-91a1-2feb0c0ba139 (intptr,intptr,bool,int,int,int,int)\n08-11 18:22:54.668 E/mono-rt ( 5517):   at (wrapper native-to-managed) System.Object:43344384-2b0a-48b6-91a1-2feb0c0ba139 (intptr,intptr,int,int,int,int,int)\n. Yes I have also implemented that blog but getting the same error but if I remove that xaml code from prism content page then error is not generating. So something configuration problem not sure though?\n. Actually I am receiving message from push notification on gcm listener on\nmy android project and redirecting to my pcl project.\nOn Nov 18, 2016 8:10 PM, \"Brian Lagunas\" notifications@github.com wrote:\n\nThe navigation service does work :)\nFirst off, you should not be adding any code to your Android MainActivity\nreleated to navigation. In a Xamarin.Forms application you handle all\nnavigation within the PCL.\nSecondly, to wrap your pages in a navigation page you simple need to\nregister the built-in NavigationPage, or a customer navigation page, for\nnavigation and then simply prefix you navigation uri with the navigation\npage.\nContainer.RegisterTypeForNavigation();\nNavigationService.NavigateAsync(\"NavigationPage/MainPage\");\nYou will never navigate in the ctor of a ViewModel.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/845#issuecomment-261539634,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AKEfaweOMHKC82F4RFXe8CHFYtbOX5TBks5q_bFhgaJpZM4K2cws\n.\n. I am not using prism navigation in my code-behind code. What I am doing I am navigating from android MainActivity using this code var nav = new NavigationPage(new MyPclFormPage()); to my  MyPclFormPage which is the page of my pcl project or viewmodel and in this viewmodel's constructor I am trying to redirecting to another view model but I can see that next viewmodel's constructor is being working but not page is moving from current MyPclFormPage viewmodel to next viewmodel and here I am using prism navigation service.. Well, I have sorted out my problem. I was creating new instance instead using App.Current.MainPage=new NavigationPage(new MyPclFormPage()); and this is working like a charm :). You can resolve it using dependency injection.\n\nOn Jan 19, 2018 4:40 PM, \"Christopher Dresel\" notifications@github.com\nwrote:\n\nI was looking for something similar, the use case I have to implement is\nthe following: User receives a notification and when clicked should be\nredirected to a specific view\nSince notifications are implemented in the platform specific project and\nwithin a service (GcmListenerService), I'm using a PendingIntent with\nextras and overriding OnNewIntent within the MainActivity. There I had to\naccess the NavigationService, which I did via\n((PrismApplicationBase)Xamarin.Forms.Application.Current).Container.Resolve();\nI know this is against\nFirst off, you should not be adding any code to your Android MainActivity\nreleated to navigation. In a Xamarin.Forms application you handle all\nnavigation within the PCL.\nbut it was the only solution I found after quite some research.\n@brianlagunas https://github.com/brianlagunas If you have some advice\nhow to do it better, I would be very grateful.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/845#issuecomment-358929540,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AKEfaxFupXLm0ikKGa3B4KeWxzHuXQlOks5tMHEEgaJpZM4K2cws\n.\n. You can use dependency service and you can follow this link to get idea:\nhttps://developer.xamarin.com/guides/xamarin-forms/application-fundamentals/dependency-service/\n\nOn Jan 19, 2018 6:16 PM, \"Christopher Dresel\" notifications@github.com\nwrote:\n\nWhere should I inject what and how does this avoid navigation related code\nin the Android MainActivity?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/845#issuecomment-358950299,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AKEfa_GiGT8DgO8JH688j5LaBeYfp5zdks5tMIeqgaJpZM4K2cws\n.\n. This also can be resolved using messaging center:\nhttps://developer.xamarin.com/guides/xamarin-forms/application-fundamentals/messaging-center/\n\nOn Jan 19, 2018 6:22 PM, \"Shahriat Hossain\" somel90@gmail.com wrote:\n\nYou can use dependency service and you can follow this link to get idea:\nhttps://developer.xamarin.com/guides/xamarin-forms/application-\nfundamentals/dependency-service/\nOn Jan 19, 2018 6:16 PM, \"Christopher Dresel\" notifications@github.com\nwrote:\n\nWhere should I inject what and how does this avoid navigation related\ncode in the Android MainActivity?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/845#issuecomment-358950299,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AKEfa_GiGT8DgO8JH688j5LaBeYfp5zdks5tMIeqgaJpZM4K2cws\n.\n\n\n. The problem I have found, I am calling a web api using await  and if api result success code 200 then navigateasync will be called like below:\n\nJsonResponse result = await _apiService.MyMethod();\nif(result != null)\n{\n  await _navigationService.NavigateAsync(\"SearchPage\", null, false, false);\n}\nin this case, api  getting time to response and by this time SearchPageViewModel constructor is hitting but instead of moving to SearchPage it always stuck on the current page. \ncan you suggest what should I do, because it seems on the latest version of prism synchronous method navigate is deprecated so I must use navigateasync method.\n. ",
    "jan-schubert": "I can't understand why this has a low priority. If I search a framework for my next project, one of my choosing criteria is testability. If I develop a big business application, it is necessary to test.\n@bartlannoeye: The region manager is very complex with a deep object hierarchy. (RegionManager->RegionCollection->Region->ViewsCollection). So, I don't know if it clever to use a mocking framework. Maybe it is clever to write own mock classes like the StockTraderRI sample.\nI thought of a package providing a test dll. But a package bringing mocked code files is a good idea, too.\n. I know prism has a high code coverage. That's great! In the current prism 6 solution there are four test classes named MockRegionManager which inherits from IRegionManager. I think it's possible to test with Moq instead of writing a own MockRegionManager class, but it is very hard to use Moq for this cases.\nE.g.: I want to write a small and simple test. My class under test gets a IRegionManager and if I call the method Foo of my class, the region manager calls the RequestNavigate method with some parameters. My unit test should verify if the region manager was called with the correct params.\n```\npublic class ClassUnderTest\n{\n    public ClassUnderTest(IRegionManager regionManager)\n    {\n        _regionManager = regionManager;\n    }\npublic void Foo()\n{\n    _regionManager.RequestNavigate(\"MainRegion\", new Uri(typeof(MyView).FullName, UriKind.Relative));\n}\n\nprivate readonly IRegionManager _regionManager;\n\n}\n```\nPerhaps there is an easy way to test this with Moq, but I think mock helper classes are a better variant.\n. @briannoyes: You are right. It is better to handle these scenarios with a single line of mocking code to setup expectations instead of having to code a whole class that can be parameterized.\n@sgrassie: I know Moq, but it is not so trivial to mock this, because the method RequestNavigate is an extension method and Moq cannot mock static classes or static methods.\nTo verify this simple test with Moq you need some mock classes. One for the region manager to get the mocked regions collection. One fake for region collection that received the region. And one mock for the region itself. So I think its better to use mock helper classes.\n. Why use prism extension methods to extend some classes? If the classes / interfaces will be extended directly, testing will be much easier, like @sgrassie shows in his last post.\n. ",
    "veccie": "Now that #78 has been merged into master, wouldn't it make sense to expose BackStack and BackStackDepth from IFrameFacade in INavigationService as well?\nIf yes then I'm unsure if we also need to create a wrapper/facade for PageStackEntry in the BackStack to hide some of its properties?\nCurrently the BackStack and BackStackDepth are not accessible from anywhere. Exposing these properties will make it possible to determine where the current page is in the navigation structure. When for example navigating to a sub-page you can then use this information and select the correct navigation head item.\n. I'm only talking about reading the BackStack, not manipulating it:) So the exposed BackStack could just be an IEnumerable<T>\nRight now I'm using a SplitView navigation which is based on Microsoft's sample, but changed to be MVVM. I like the concept of it because it automatically updates the menu according the current page when you navigate back.\nLook at OnNavigatingToPage in this code: https://github.com/Microsoft/Windows-universal-samples/blob/master/Samples/XamlNavigation/cs/AppShell.xaml.cs (2/3 down the page)\nI've made my own ListView control which then listens for navigation events through PubSubEvent. It then selects the correct navigation item automatically based on the current page, which is really nice when you for example navigate back.\nNow I don't have to think about where I'm at in the navigation structure :)\n. I would be willing to contribute my list control to Prism.\nAbout the base ViewModel class you mention. Right now I'm just forwarding the App.OnNavigated(..) to a ViewController which then publishes the PubSubEvent. But this can of course be done in other ways depending on the app.\nI've started working on a new branch with my navigation sample. Once I've cleaned it up a bit I'll upload it to my fork so you can see/try it in action.\nI'll create a new issue once it's done and we can discuss it further.\n. Thanks @ElementalNex and @runceel I'm happy you like it.\nI agree, OnNavigated should be virtual. I made a new commit where it's changed. While I was at it I also added support for the camera button events. Or place holders rather as I'm not exactly sure how the camera works. I also simplified event invoking with helper method.\nI'm also curious what @brianlagunas and @briannoyes has to say about it :smiley: \n. Added GoBack/GoForward cancelation support by invoking handlers in reverse order. Pages with a reference to DeviceGestureService can now cancel back and forward events, giving them more control in special scenarios.\nAlso added MouseMoved event and exception handling when invoking handlers.\n. That is correct @runceel but that's from the first commit. My last commit changed the event invocation to be more generic and with exception handling.\n. Hehe, are you mixing up the names @briannoyes ? Anyway, I could've saved you the work and made a new PR, based on the updated master branch ;)\n@brianlagunas Regarding the InitializeEventHandlers, the initial idea was to enabled/disable a bunch of properties/features before initializing the event handlers so that you could disable a certain handler. I ended up removing them though and only have UseTitleBarBackButton which is used in PrismApplication.CreateDeviceGestureService(). UseTitleBarBackButton isn't used in InitializeEventHandlers right now though.\nSo I guess we can ditch InitializeEventHandlers for now and move the event initialization into the constructor? We could add useTitleBarBackButton param to the constructor as well?\n. No problem @briannoyes :)\nI haven't had any issues so far, when testing on Desktop and Phone. The capabilities are available at construction.\n. The initial idea was to improve handling of the hardwarebutton and at the time there was no way to cancel navigation. So that's really the main reason I added it back then, but since it only handled the hardware back/shortcuts it was only a start.\nThe improvements I made to navigation eventargs should cover all scenarios now that you can cancel them. So I guess there's no need for DeviceGestureEventArgs.Cancel anymore.\nThe only scenario I can think of regarding hardware back cancellation is that right now it's the only way you can skip the default handling of goback from root => exit on mobile. Perhaps making OnGoBackRequested in PrismApplication virtual is better although I don't know when you actually want your app to always run.\n. Yes, you can remove Cancel and for example use Handled in OnGoBackRequested to skip the code if that's what you mean?\n. Unit Test project needs an update too though :smiley:\nEverything else looks good :+1:\n. Two more things:\nPrism.Windows: System.Xml.XDocument reference shouldn't be there\nPrism.Unity.Windows: CommonServiceLocator package is missing, although it compiles without errors\n. Ok, I'll try that. Thanks.\n. Makes sense, I'll update the PR later today.\n. Thanks @jorisdebock that's also one of the main reasons I made it :) I saw your SplitView example but ended up making my own based on Microsoft's sample, which uses a ListView instead of RadioButtons :)\nhttps://github.com/Microsoft/Windows-universal-samples/tree/master/Samples/XamlNavigation/cs\n. I can do that @brianlagunas \nI'll update the PR shortly :)\n. I don't have any knowledge of unit testing so I don't really know how this can be unit tested. But I can update the HelloWorld sample to show off it's functionality if that's ok.\n. Added a simple check-box on both pages in HelloWorld. When checked you cannot navigate away from the page. This also works when triggering events in DeviceGestureService like mouse forward/backward and the title-bar back button.\n. I can't really find any differences between the two commits when looking at PrismApplication, but while testing a few things I found out why it isn't working in certain scenarios.\nInitially I made it so that back events get fired in reverse, but if you hook on to GoBackRequested from CreateDeviceGestureService() then the default behavior will get fired first.\nThis can be avoided if you for example hook on to GoBackRequested from say OnInitializeAsync() by accessing the Property: DeviceGestureService.GoBackRequested += ...\nBottom line, if you hook on to GoBackRequested after CreateDeviceGestureService() has been called, then it works :)\nThere's also still some old code that needs to be removed which I've done here #105 and maybe the e.handled and e.cancel should be handled too in case you hook onto to events from CreateDeviceGestureService()\nI can make a PR for that too :)\nWhat do you think @briannoyes ?\n. I'm still not sure why it's acting differently in your case. I'm not able to reproduce this myself.\nCan you reproduce the same problem using the HelloWorld sample?\n. As I mentioned in my first comment I have already submitted a PR #105 to fix/remove the old code.\nI believe its leftover code from @briannoyes' manual merge, because it's not there in my original PR.\nWhen/if my PR #105 gets merged the problem should be solved :)\n. Can you confirm that it works again @diego2k now that #105 has been merged?\n. Ok, I was not aware of how XAML deals with DataContexts by default, but thanks for clarifying.\n. ",
    "eklavyamirani": "I had a scenario where I needed to manipulate the navigation stack. I had some temporary intermediate pages (Authentication pages) that didn't need to have a history in the navigation stack. I ended up writing a wrapper around the default NavigationService and added an abstraction to remove the page from the navigation stack once I navigated to the temporary page (In addition to normal linear navigation). \nI agree that scenarios like this are limited, but end up in a lot of apps anyway. We could either have an abstraction that allows us to do this (Navigate Without Storing in Stack) or as a best practice, just extend the navigation service to handle these scenarios individually. Curious what the best approach here might be.\n. ",
    "ali-hk": "The methods that were added don't update the SystemNavigationManager.AppViewBackButtonVisibility property in the scenario where DeviceGestureService.UseTitleBarBackButton is true.\nThis is currently done in PrismApplication.cs:OnNavigated, but that code has no way of knowing when NavigationService.CanGoBack() has actually changed but not triggered a navigation (such as when one of these three methods is called).\n. It seems to me that this is a case where a pub/sub event would make the most sense. Adding a hard dependency on DGS seems unnecessary.\nIn other words, have the FrameNavigationService publish a NavigationStateChanged event. One of the subscribers would be DGS which would then handle updating the back button. Publishing this event would also provide app code with an opportunity to listen for it and do any special processing needed (such as dismissing a SplitView-based menu).\nIf that sounds reasonable I can make the change and submit a pull request.\n. I thought about that, in fact I originally had it written that way (I prefer constructor-based injection myself), but I needed a way to ensure that if UseTitleBarBackButton is set an IEventAggregator is also passed in. At the same time, I didn't want to force passing in an IEventAggregator if you're not actually setting UseTitleBarBackButton = true.\n. Submitted a PR (#539) that addresses this issue.\n. @RikardoPons the HardwareButtons event and check shouldn't even be necessary.\nThis fires regardless of how the back button was pressed: SystemNavigationManager.GetForCurrentView().BackRequested += OnSystemNavigationManagerBackRequested;\nSo a more appropriate fix would be to remove the HardwareButtons.BackPressed event subscription and related code completely.\n. The app may not necessarily resume even if PreviousExecutionState says so, for example if a SessionStateServiceException is thrown when RestoreFrameState or RestoreSavedNavigation are called in InitializeFrameAsync. This is also the case if the developer chooses to opt-out of a restore via the mechanism added in PR #539.\n. @bartlannoeye Correct, that's the only change, sorry the PR got polluted with other changes.\nThere are use cases for both. At the moment there's no way for the app to know if its being resumed from a suspend, shutdown, resume. OnLaunch doesn't get called in that scenario, so if an app needs to refresh an auth token for example, it won't know to do that.\nThat's also a good example of logic that the app would only want on OnResume, as the logic for refreshing an auth token might be different to that of getting the initial token. There's also scenarios in which some initialization work happens in OnLaunch, but some other initialization work would need to happen OnResume (for example, setting up a telemetry client but not doing the initial page navigation).\n. @brianlagunas I'd be happy to, is there a way to do that? I can't seem to find a good way.\n. @bartlannoeye That's a good point, you could theoretically shoot yourself in the foot with this. Probably worth adding that as a comment. It may also be worthwhile to check the SessionStateService to determine if a restore is even possible before calling ShouldRestore.\nI can make both changes if needed.\n. @bartlannoeye Added the comment and the SessionStateService check.\nNote however that it is not possible to skip OnActivateApplicationAsync, because args will not be null in those scenarios and so it will be called. The fact that OnLaunchApplicationAsync is skipped is somewhat obvious once the fact that it's never called during a resume is made clear as well. As such I added a comment to OnLaunched and OnLaunchApplicationAsync.\nHere's the lifecycle for reference (before #590):\n- Fresh launch:\n  InitializeShell -> InitializeFrameAsync -> OnLaunchApplicationAsync\n- Resume:\n  InitializeShell -> InitializeFrameAsync\n- Alternate activation:\n  InitializeShell -> InitializeFrameAsync -> OnActivateApplicationAsync\nThe lifecycle after #590:\n- Fresh launch:\n  InitializeShell -> InitializeFrameAsync -> OnLaunchApplicationAsync\n- Resume:\n  InitializeShell -> InitializeFrameAsync -> OnResumeAppAsync \n- Alternate activation:\n  InitializeShell -> InitializeFrameAsync -> OnActivateApplicationAsync\nIt's probably worth adding the lifecycle to a wiki page or something :)\n. @brianlagunas resolved the build failure. Also, based on @bartlannoeye's comments he appeared onboard with this and this PR was just blocked on adding the comments that were requested and checking if restore is even possible. Both of those changes were made.\n. I'm sorry, I'm afraid I don't really have the time to address this at this point in time. If this is blocking anything, please feel free to close the pull request.\n. @brianlagunas Updated to replace references to UAP with UWP where possible. There are many (appxmanifest, project.json, template output path) where it actually has to be UAP.\n. @dansiegel Thanks, I'm aware of template parameters, but I used them wherever I thought it was appropriate to use. Do you have specific suggestions around where you think they'd be useful in the templates I added?\n. @dansiegel Sure, just wanted to get an idea of what you're referring to.\nNeither of those are part of the actual template, those are for the template project itself.\nAnd in the cases where the template is a project template, I've followed the lead of the other template projects and used a separate \"TemplateProperties\\AssemblyInfo.cs\" file to specify the assemblyinfo.cs for the actual template. As well as a ProjectTemplate.csproj file for the actual csproj template.\nWhile I generally appreciate feedback, it'd be more productive if you familiarized yourself with the change first rather than making general comments off-hand.\n. If the intent is to not have to do this for every page, developers can subclass the SessionStateAwarePage class (using UWP as an example) and set this in the constructor. \nIf the XF Prism project feels the need to always set this for all of its pages, can't it do the same?\nI'm personally against setting this automatically in the NavigationService because of the fact that it's an unnecessary breaking change and does make it difficult to understand what's happening.\n. I understand your argument and its arguably a reasonable one, but I'd argue that the method name should not be ClearHistory in that case, rather ClearBackStack. I'd also argue for keeping the previous behavior of ClearHistory in addition to that, as it's currently a non-obvious breaking change to all apps.. Also worth mentioning that the SetNavigationState API itself is a public facing API and therefore any change to its behavior would be considered a breaking change by the XAML team. It is expected that apps use it.\nIf necessary a call can be made to GetNavigationState upon initialization prior to any navigation to capture the baseline \"no history\" state, although that would assume that the frame in question hasn't been navigated prior to creation of the FrameNavigationService.\nFinally, note that there's already a method. RemoveAllPages that performs the behavior of clearing the back stack, so there's arguably no need for an additional ClearBackStack method.. @bartlannoeye Should be resolved now.\n. Rebased again after d2874b5.\n. ",
    "wazowsk1": "@briannoyes  ok great:P\n. I added a new pull request #77 what u think of this implementation? \n. @veccie nice I like it, its indeed a better option to have a separate service for this. Though for the OnNavigated event I would opt for making it virtual, so incase someone want some custom behavior instead of the \"default\" hide/show behavior they can override this method.\nI just tested it and its working great, also the keyboard back/forward is now even working better with my splitview implementation since i don't have to override the goback/goforward methods in the visualstateawarepage anymore to make the navigation work.\n. ok let me check that xml reference, and the reason why commonservicelocator doesnt have to be referenced is because its already referenced by another nuget package (unity i think).\nproject.json.lock\n\"Unity/3.5.1404\": {\n        \"dependencies\": {\n          \"CommonServiceLocator\": \"[1.2.0, )\"\n        },\n. The tests project is now updated, but all tests with .Navigate(..) method will fail due this error:\nException thrown at 0x586A16C2 (Windows.UI.Xaml.dll) in Prism.Windows.Tests.exe: 0xC0000005: Access violation reading location 0x00000000.\nI haven't run the tests myself before so i am not sure if this is a new error? It does not seem to be related to the project update itself. (a new test project will result in the same error). Can anyone test if they get the same error?\nOther than the test project, the navigation works just fine.\n. I also updated the helloworld example app while I was at it\n. @JohnTasler ok nice that you got the tests working\n. @diego2k with one of @veccie updates there is now a method called \"CreateShell\" and with a simple change to my example\nprotected override UIElement CreateShell(Frame rootFrame) =>\n            new ShellPage(rootFrame);\ni also updated the rest of the example to work with the latest prism changes and nuget packages\n. @veccie great pull request, \"createshell\" method is very useful when using splitview (you can check it in my example if u want https://github.com/jorisdebock/Prism/tree/master/Samples/Windows10/ExampleApp1)\n. @brianlagunas here you go :) couldn't test it though\n. @brianlagunas why did @bartlannoeye then add a sample of my other pr?\n. ok :)\n. How would you propose to test these IoC Containers? Since you can't simple do something like this in UWP:\n```\n        public void ContainerDefaultsToNull()\n        {\n            var bootstrapper = new DefaultAutofacBootstrapper();\n            var container = bootstrapper.BaseContainer;\n        Assert.IsNull(container);\n    }\n\n```\nTrying to do this will throw an Catastrophic failure exception when creating another Application in the testmethod. I think its not possible to create more than one \"Application\" in an unit test project?\n. ",
    "cmjacobs": "any further development on this?\n. Brian, \nTotally fair.\nAs to the benefit, I keep my datatypes in the shared (PCL) so that I can reference them from a variety of projects. I have a base class (similar to BindableBase) that implements INotifyDataErrorInfo and use ErrorsContainer to help with validation.\nThat said, I'm not arguing for it to be a higher priority.\nThanks for the quick response.\n-Craig\n. @dansiegel I think you are correct in that it may be too soon. .NetStandard seems to still be evolving. My hunch is that for Prism.Core, .NetStandard 1.0 could be targeted and that would provide the greatest level of compatibility but it is also the least rich in terms of API surface.\nAs @brianlagunas pointed out, Prism is geared toward XAML platforms, so perhaps the upper level libraries (WPF, XF and UAP) would not need to be retargeted, as long as Prism.Core remained compatible. I think I need to better educate myself on the ramifications of .NetStandard.\n. ",
    "llampret": "Would be great to have a signed version ye.\n. ",
    "Snickerboa": "This is a go or no-go issue for our use of Prism 6, we do not want to be forced to repack the nugets because we have to strong name the assemblies our selves.\n. ",
    "mkb137": "Agreed.\n. I have the same issue.  If I use RegisterViewWithRegion, my view will be displayed but the region will never appear in the RegionManager's list of regions and can't be navigated to with RequestNavigate.\nI traced why the region wasn't registered to RegionManagerRegistrationBehavior.TryRegisterRegion.  On my adapted region, FindRegionManager returns nothing as the RegionManagerProperty is not set on the control.  I haven't figured out how it gets set on other controls and why it's not set on mine.\nI was able to work around it by setting the property myself in my RegionAdapter's Adapt method:\n``` csharp\nprivate readonly IRegionManager _regionManager;\npublic MyRegionAdapter( IRegionBehaviorFactory regionBehaviorFactory, IRegionManager regionManager ) : base( regionBehaviorFactory ) {\n    this._regionManager = regionManager;\n}\nprotected override void Adapt( IRegion region, MyControl target ) {\n    RegionManager.SetRegionManager( target, this._regionManager );\n    // continue with Adapt\n}\n```\nWith this, the target control properly ends up in the list of regions and can be navigated to.\n. Let's say I have a Region X.  View A is registered with the region in its module's Initialize.  When the application is launched, View A is correctly shown.  \nNow when the application is up and running, on the click of a button in a different region I call RequestNavigate( \"X\", \"ViewB\" ).  At this point, even though the region is created and has a view in it, the region manager will not have \"X\" in its list of regions and the request will fail.\n. See https://github.com/mkb137/PrismRegionIssue \n. It's odd, then, that RegisterViewWithRegion works OK.  It seems to become part of the visual tree eventually, perhaps after templates are loaded.  But it's good to have a workaround.\n. ",
    "mlavigne1964": "Yes, this is a must. P5 was signed, all our projects are signed, we cannot use this if not signed. I'm so surprised and saw nothing about this breaking change in the release notes, you stopped our major update in its track because of that. Bob! Pull the backup, we're going back P5!\nStrike 1 to the non-P&P team.\n. ",
    "JRRiley2001": "Thanks Brian, yes that is exactly what I did locally, I added an \"AutoEnable\" dependency property (defaulting to true to maintain backwards compatibility) which is passed through to the CommandBehaviorBase class and checked in the UpdateEnabledState method. \n. Yes, that's just perhaps poor wording on my behalf. When I said \"passed in\", it wasn't through a method call, it was a property setter. \n. ",
    "runceel": "OK. I send pull request.\nThis method works on tablet mode's back button too.\n. Does best way remove Exit method?\nI think that management of the visibility system back button, it write individual app.\n. nice!\n. Hi. It is trivial. C# 6.0 can write as follows:\ncs\n// original\nprotected void RaiseGoBackRequested(DeviceGestureEventArgs args)\n{\n    EventHandler<DeviceGestureEventArgs> eventHandler = GoBackRequested;\n    if (eventHandler != null)\n        eventHandler(this, args);\n}\ncs\n// cs6\nprotected void RaiseGoBackRequested(DeviceGestureEventArgs args) => \n    GoBackRequested?.Invoke(this, args);\n. @veccie . Ok. I saw your latest commit. It is very nice implementation.\n. Thank you for your review.\n\nWhat is the purpose of this class? What problem does it solve? How does it fit into Prism's current feature set?\n\nI always create Model wrapper class in ViewModel.\nLike this.\nhttps://github.com/runceel/Prism/blob/master/Source/Prism.Tests/Mocks/ViewModels/MockPropertyChangedViewModel.cs\nThis ViewModel class is little modify copy of Model. I subscribe PropertyChanged event and write ViewModel logic. This case, I think frequent in MVVM.I want a helper class.\n\nI see this being a source a memory leaks. Why are you not using weak references?\n\nI was changed to WeakReference.It's ok?\nhttps://github.com/runceel/Prism/blob/master/Source/Prism/Mvvm/PropertyChangedListener.cs\n. @brianlagunas . Thank you for review.\nI do not want to write switch case statements, and WeakReference management.\nBut you tought that it's no benefit. I put into \"my pocket library\" to this class.\nThank you.\n. I can't speak English well. I'm sorry to be mislead.\nI think that this is benefit.\nlambe event listener support\nNormal case.\ncs\nmodel.PropertyChanged += (s, e) =>\n{\n   // do something\n};\nThis case's problem can't release subscribe.\nPropertyChangedListener can release subscribe.\n``` cs\n// field\nprivate PropertyChangedListener Listener {get;}\n// constructor\nListener = new PropertyChangedListener(model)\n{\n    \"PropertyName\", (s, e) => \n    {\n        // do something\n    }\n};\n// other method\nListener.Dispose(); // release subscribe\n```\nno switch case/if statements\nNormal case.\n``` cs\n// constructor\nmodel.PropertyChanged += Model_PropertyChanged;\n// method\nprivate void Model_PropertyChanged(object sender, Property...Args e)\n{\n    switch (e.PropertyName)\n    {\n        case \"PropertyA\":\n            Foo();\n            break;\n         case \"PropertyB\":\n             Bar();\n             break;\n         // etc...\n    }\n}\n```\nPropertyChangedListener can write declarative.\ncs\nListener = new PropertyChangedListener(model)\n{\n    { \"PropertyA\", (s, e) => Foo() },\n    { \"PropertyB\", (s, e) => Bar() },\n    // etc...\n};\n. @bartlannoeye. Thank you for reply.\nI don't want access to the IActivatedEventArgs. Because I want to initialize application model class(ex: connect twitter stream).\n. OnLaunchApplicationAsync doesn't call restore case.\n. @overrorflow Thank you for your suggestion.\nIt's simple solution at PrismApplication. But I use PrismUnityApplication. PrismUnityApplication sealed this method.\n. base.OnLaunched method is async void. \ncs\nprotected override void OnLaunched(LaunchActivatedEventArgs args)\n{\n    base.OnLaunched(args);\n    if (args.PreviousExecutionState == ApplicationExecutionState.Terminated)\n    {\n        // after initialized frame? after navigated mainpag? after restored sessionstate? etc...\n    }\n}\nI want a method that is called in between \"initialized frame\" and \"navigate MainPage\".\n. I use Prism.Unity.\nPrismUnityApplication class sealed this method...\nOnLaunchApplicationAsync method doesn't call restore case.\n. @briannoyes Thank you.\n. Additional Info.\nMaybe, this error has occurred in a non-English environment.\n- open Package.appxmanifest\n- edit Language ja-JP\n- change release\n- build application\n- run application\n- crush application\n. Hi.\nI tested other japanese people environment.\nThis error hasn't occurred in other people environment.\nMy environment is broken. Sorry.\n. ",
    "noufionline": "Thanks a lot Brian\n. Hi Brian,\nHow about adding a dialogue service in wpf?\nRegards,\nNoufal\n\u2014\nSent from Mailbox\nOn Tue, Jul 21, 2015 at 8:13 PM, Brian Lagunas notifications@github.com\nwrote:\n\nThanks for the suggestion @YehudahA but this issues is not for WPF, but rather Xamarin.Forms.  This is why there is a \"[XF]\" in front of the issue.\nReply to this email directly or view it on GitHub:\nhttps://github.com/PrismLibrary/Prism/issues/76#issuecomment-123388195\n. Hi HansKr Jensrud,\n\nI think by using ViewModelLocationProvider.SetDefaultViewTypeToViewModelTypeResolver((viewType) => {\n});\nyou can create your own mechanism as required.\n. Hi Brian. Thanks for the quick response. When I am setting the target type as window it's working. But to set a propery in style which is specific to a third party control I was setting the target as DXWindow\n<Style TargetType=\"dx:DXWindow\">\n     <Setter Property=\"SizeToContent\" Value=\"WidthAndHeight\"/>\n     <Setter Property=\"ResizeMode\" Value=\"NoResize\"/>\n     </Style>\n. thanks a Ton Brian \ud83d\udc4d\n. Yes Brian. You are right\ud83d\udc4d\n. Looks perfect\ud83d\udc4c\ud83d\ude0a\n. Hi Brian,\nDon't you think FullName will give uniqueness than the name property as one or more different module can have a similar view name?\n. Hmmm. Yes Brian that makes perfect sense.\n. As I was passing type name as command parameter\nCommandParameter=\"{x:Type salesOrders:SalesOrderCollectionView}\"\nI never thought about your point\n. Any possibilities of adding cancellation support? \n. most probably your code below is causing you the issue.\nprotected override IRegion CreateRegion()\n    {\n        return new Region();\n    }\nTry changing to return a region which can host multiple active views\nprotected override IRegion CreateRegion()\n{\n    return new AllActiveRegion();\n}\n. Thanks Brian :)\n. OK . Sorry :)\n. Thanks webwarrior06 and especially allanrsmith for submitting the PR.\nAnd as always Thanks Brian for your outstanding support.\n. Sounds Logical to me. Thanks dvorn.\nTo avoid lines of code required every time when we read parameter value from parameter collection can you suggest a better way?\nIt will be really helpful!\n. I searched for this overload. But could not find. I can find only one overload which accepts ModuleInfo as a parameter. Am I missing something?\n. Hi dvorn,\nThanks so much.\nYes I can see the code in GitHub, but unfortunately I am not able to find it in prism 6.2 from Nuget.\nQuite strange\n. @joacar In my viewModel I always have properties within the scope of the viewmodel itself. So like @briannoyes suggested it would be ideal to implement this features.\nIn my case I am enabling a save button based on whether an entity is valid or not. and that validation is happening every time a property changes inside the Entity.\nwith the current implementation I am forced to do like this.\npublic DeliveryNote Entity\n        {\n            get { return _entity; }\n            set\n            {\n                _entity = value;\n                OnINotifyPropertyChanged();\n                INotifyPropertyChanged propertyChanged = value as INotifyPropertyChanged;\n                if (propertyChanged != null)\n                    propertyChanged.PropertyChanged += (e, s) =>\n                    {\n                        SaveCommand.RaiseCanExecuteChanged();\n                    };\n            }\n        }\n. Great \ud83d\udc4d news Brian. Thanks a lot!\nWhen can tentatively expect the major release? Just a rough estimate will do.. Hi, @dvorn  Will this feature be part of Prism 7.0?. Is this feature really going to be part of 7.0 release?. @brianlagunas Is it possible to skip this feature for the time being and release a stable version? It will be a great help for us to move on.. @brianlagunas ever since you release the preview of PrismApplication class I am using prism in production and till date I didnt face any issues. It looks great \ud83d\udc4d. Yes.  Is it possible to provide this for WPF as well? \n. Yeah, I agree with you. having an additional dependancy is not a good idea. But was just wishing a better and simpler way to register modules. Text file is not at all a bad idea provided it has the merit . Thanks, @brianlagunas . Is PrismExtensibilityPack is compatible with Visual Studio 2017? I am not able to install!. @brianlagunas thanks,\nI never heard of IDestructible and could not find anything on google as well. Can you help me with some link where I can get more info about this interface. If I am not unsubscribing subscribed events fires multiple times. I have a customer view which notifies the collection view of every inserts and every time I open and close the customer view that many times subscribed method is firing.. I am subscribing on customer views OnNavigatedTo event and when I close the customer view and open again the subscription will happen again I tried to make the keep Alive property false but still it\u2019s firing . Oh I am working on WPF and you might be talking about Xamarin forms I guess. At the beginning I was subscribing from the constructor only but it was still firing. May be I missed something . Subscribe has an overload which has a predicate to control the subscription. Check IsActive on the predicate then it will not fire when view is not active.\ncsharp\nSubscribe(action, ThreadOption.PublisherThread, false, payload=> IsActive);. Is this applicable WPF as well? Did not find WPF label.. @jgrossrieder I use prism library extensively in my application and I also use DevExpress MVVM which has an excellent implementation of AsyncCommand.\nPlease have a look at this library\nhttps://github.com/DevExpress/DevExpress.Mvvm.Free/blob/master/DevExpress.Mvvm/Commands/DelegateCommand.cs\n. I understand. But in this case I have multiple implementations and based on\nthe condition I need to get the different instances. Can you help with a\nbetter way?\nOn Mon, Sep 24, 2018 at 6:10 PM Brian Lagunas notifications@github.com\nwrote:\n\nIt is not recommended that you pass around the container, instead you\nwould just inject your IPartnerRegistrationInfoProvider into your class.\nFor this reason, Prism does not provide a registration for the\nIContainerProvider. If you want this, you must manually register this.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/1552#issuecomment-423988233,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AMmpmoafw0f_7sCsPjWfdc476u0QreOIks5ueOfogaJpZM4W2JH-\n.\n. @brianlagunas What is the preferred way to resolve a service registered as named instance in a container. The only way I found was to inject IServiceLocator into the service class and use its overload.\n\n```csharp\npublic async Task ImportFromWebSiteAsync(string emirate)\n        {\n            var provider = _serviceLocator.GetInstance(emirate);\n            var info = provider.GetAsync();\n            var partner = await GetByTradeLicenseNoAsync(info.licenceNo);\n            if (partner != null) return partner;\n            partner=provider.BuildPartner(info.data);\n            partner.LicenseNo = info.licenceNo;\n            return partner;\n        }\n```\nIs this the correct way or am I missing something? . Hi @brianlagunas \nWouldn't it be nice if ShowDialog returns IDialogResult itself instead of void and remove callback parameter altogether?\nIf a third party Window closes naturally is there any way to fire the CloseDialogCommand ?\n. Both the links you provided are not working. It\u2019s giving a 404. Thanks for your quick reply as usual. You mean to pass back the Person entity in DialogParameter ?. Thanks @brianlagunas. I will follow your advice. You had a profound influence turning me in to a better developer.\nThanks a lot. I understand. Actually structure map was replaced by new container Lamar\nand I was expecting that would be integrated in place of Structure map.\nAnyways now I will move back to Unity.\nThanks a lot for your excellent support.\nOn Tue, Feb 19, 2019 at 4:10 AM Dan Siegel notifications@github.com wrote:\n\n@noufionline https://github.com/noufionline as was mentioned\nStructureMap has been \"Sunsetted\"\nhttps://github.com/structuremap/structuremap#structuremap-has-been-sunsetted\nby its maintainers. As a result of this the Prism team will no longer be\nshipping updates for StructureMap moving forward.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/1701#issuecomment-464928419,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AMmpmr_6bAPatePN0KePGw6locRIjqB2ks5vO0EAgaJpZM4bBkZ8\n.\n. Hi @dansiegel \n\nGood Day!\nIn my ViewModelBase class which supports both IDialogService and my custom implemented RegionAwareDialog Service. If IDialogParameters is derived from INavigationParameters then I can reuse my method. Now I am forced to create two separate methods.\nsee the code below.\n```csharp\n public override void OnDialogOpened(IDialogParameters parameters)\n        {\n            SetLookupItems();\n        var action=parameters.GetValue<string>(\"action\");\n        switch (action)\n        {\n\n        }\n    }\n\npublic override void OnNavigatedTo(NavigationContext navigationContext)\n         {\n            base.OnNavigatedTo(navigationContext);\n        SetLookupItems();\n\n        var parameters=navigationContext.Parameters;\n        var action=parameters.GetValue<string>(\"action\");\n        switch (action)\n        {\n\n        }\n    }\n\n```. ",
    "tomzorz": "Lines 17-56 (except 43) and lines 141-251 are all for visual states, those could be removed. I don't see a way around the session state and navigation parts though.\n. What about PrismApplication calling those two methods directly on suspend/resume (only if they are available of course), and than putting the state into the SessionStateService.SessionState dict? Seems like a simple solution, but please try to poke holes in my idea.\n. @diego2k Yup, that makes sense. Although I can imagine a few scenairos where the shell changes around, so we shouldn't rule it out completely.\nWhat about introducing ILifecycleAware (naming not set in stone :smile:), and checking if the shell object returned by CreateShell implements that. If it does, then wire it up inside the resuming/suspending cycle.\n. Thank you! Until then I think I'll try to look at https://github.com/PrismLibrary/Prism/issues/146 myself if I get a little time, as that was one of the issues we were experiencing as well with our project.\n. Oh yes I'm aware - saw exactly that with the Newtonsoft.Json package here https://gist.github.com/JamesNK/56b1c3b90b2a8d21c73d :)\n. @bartlannoeye Sure, fixed it up. How about a .editorconfig?\n. Check the breaking changes in the readme :) >> \"Visual State management parts of VisualStateAwarePage were removed and it is now renamed to SessionStateAwarePage.\"\n. #12 looks very nice\n. StackOverflow sounds great, just make sure to advertise preferred tags so the questions are easily found. \n. I think markup + putting them on GitHub is the way, but https://pages.github.com/ could come in handy for accessibility. There are surely plenty of things that can take markup files and render static html pages from them.\n. @brianlagunas plenty of projects do that. \n. I stumbled upon this solution - opinions?\n1) Get docs up in repo: https://github.com/reactiveui/ReactiveUI/tree/master/docs\n2) Use the service: https://readthedocs.org/\n3) ..?\n4) Profit: https://reactiveui.readthedocs.org/en/latest/dependency-injection/splat/\n. Working on https://github.com/PrismLibrary/Prism/blob/master/Documentation/WPF/AppendixC-PrismLibrary.md and https://github.com/PrismLibrary/Prism/blob/master/Documentation/WPF/AppendixE1-ExtendingPrism.md\nEdit: done w/ https://github.com/PrismLibrary/Prism/pull/218\n. It's easy to integrate your IoC solution of choice with PRISM, just look at the Prism.Unity sample :)\n. Shorten, definitely. \nI'd go even shorter - eg. mvvmlight has propinpc, but I always do propi[tab][tab]. Also I'd suggest keeping 'prop' or 'cmd' in front, because of the conventions (prop, propa, propdp, propinpc...). \nWe could have propps, cmdps and cmdgps?\n. If there's no way to do a server-side backup you could just point httrack on it and let it create a static html archive.. ",
    "feinstein": "What about moving the SizeToContent property to both the DefaultConfirmationWindow and DefaultNotificationWindow objects in XAML (as you proposed), and also crate a DefaultWindow with the SizeToContent inside it as well and CreateWindow() now creates an instance of this DefaultWindow, instead of a Window, this way all the view's customizations can be threated in xaml.\n. @ronin4net what do you mean by \"Is it an option to contribute a \"merged\" solution to the library?\" ? \nThe current PR #86 under review has a Style DP that will set the Style for the new Window, so the dependency properties you made will be redundant, since the same options can be set by providing the correct Style. \n. You are very much welcome :) . Yes, you are right, I was assuming it was a custom class, that's how I do it, with a custom UserControl, I didn't realize some people will actually inline it.\nAnd yes, I expressed myself wrongly, I didn't meant a memory leak on the true meaning of the technical term, I meant having an object in memory that might never be used. For example, if the program has a Setup Window, or any other kind of Window that the user might just not use at all, this Window will be sitting there in memory, quietly, taking memory space as long as the program lives, and the user might never even use it. That was my particular case, I have some 5 windows, that the user might never use, and they are all created when the Main View is created, since they will all popup from the Main View.\nSo I guess this is more a matter of project architecture, some projects will benefit more from a Window that has it's contents only created once, some will benefit from having them created when needed (or at least created once, but only when needed).\n. Yes it does, I am coding one myself now, but I didn't find many good examples online, most are too much for what I need, any good examples are most welcome :) .\n. No problem, take your time and enjoy your vacation! \n. Thanks Brian!\n. Yes, I agree, it's more a question for purposes of learning. I am testing both options now, and I am getting some interesting results, I will post the answer once I complete the tests.\n. So, I made some tests and CenterOverAssociatedObject will indeed center over the view, not the Window, the Associated Object is into. \nAnd setting WindowStartupLocation to CenterOwner won't work because it depends on the Window's Owner property, which in our case is always going to be null or we will have to go and find the AssociatedObject's Window, and set is as the Owner of our new Window, which is going to be too much trouble I guess.\nSo there's the reason.\n. @dvorn all the issues you raised (multiple invocations, cancellation and etc), Stephen addressees them in his MVVM Commands blog post.\nIn this image you can see the AsyncCommand can bind Error Messages, Exceptions, Results, Loading Status, simplifying, encapsulating and reusing (all the magical words we devs love to hear and repeat, don't we? haha) a lot the work we should be doing in case we need async behavior in our commands:\n\nWhat's not on that image is the testability that wasn't comprimised at all since the AsyncCommand is just an Execute calling ExecuteAsync that returns a Taks and this Task can be used for testing, making your test cases target only ExecuteAsync and forget Execute.\nI think many people in this thread have read all this already but I didn't see anyone pointing this out.\n@brianlagunas My current project deals mainly with async services. AFAIK the Prism library is knows as the \"Proven Patterns and Practices for predictable results\" which means, as I understand it, proven patterns for software development in general and not a pure MVVM library....am I wrong?\nSo as I see it, if there are patterns that make our job dealing with async code more simple and secure, why should we not use it or share it?\nI understand your points on DelegateCommand not being relevant as async...but should we just forget async entirely? Most new architectures, specially the ones dealing with HTTP services will be based on async, it provides the most responsive user experience and leverages the programmers ability to deal with concurrency.\nLast time I checked async is being pushed by Microsoft mobile as the new way to do things to provide a better UX, and MVVM is the architecture of choice of all future Microsoft related applications, so having an async command is nothing but natural to me.\nYes there are several different use case scenarios, but I think we can customize most things to work nicely as the developer wants them, a lot of them can be just a change in behavior with a simple enum flag, and most use case scenarios are pretty well known. Even Stephen Cleary said his solution isn't going to be the best thing for everyone, bust still not even Prism can achieve this.\nThis is just my 2 cents on this matter. I intent to use Stephen's AsyncCommand pattern in my project because it will simplify it a lot, specially with all the bindings I need for showing loading, errors and results in the XAML UI, but I will be glad to find something similar on Prism on the coming future.\n. @dvorn yes, precisely, and observable (bindable) Task properties is the main goal I think we could achieve here. \nI think AsyncDelegateCommand would be a fitting name for it since it is a regular synchronous command that receives a delegate to an async operation and starts it. Hence Async-Delegate Command.\n. @brianlagunas OK, I understand your reasons, thanks for listening though.\n. Out of curiosity what are the motives behind this reason? Compatibility? Testability? Lack of time?\n. I understand your point, but after reading Stephen's blog post I can't find it complicated at all, well probably I don't have the experience yet to see all the outcomes of his implementation, but thanks anyways for your views on the subject.\n. @dvorn interesting, I happened to think on this at the same moment there were one open discussion on the subject. I will share my opinion there, thank you.\n. I am sorry, I should have, this was more a technical question than an issue as a matter of fact. \n. Interesting. Brian, could you explain how DelegateCommand avoids problems with strong references? The absence of leaks goes against all the text I can find on the web.\n. I would like to volunteer but I don't think I have the knowledge of the inner WPF engine to trigger this behavior.\nCan't this be tagged with a low priority or something like \"needs investigation\" so at least we can have a answer of how this works differently than what's documented on the Internet? \n. Investigating this issue a bit I found another possible problem (a little one though and easy to fix I guess), but I would like to comment it here before opening another formal issue.\nAFAIK the CommandManager.InvalidateRequerySuggested() should trigger a CanExecute reevaluation of all the commands in the UI, and looking at the DelegateCommand code I couldn't see how this was done, and after a simple test I could confirm it's not being done. \nThomas Levesque gist code in my StackOverflow question. Shows a simple fix for this. I think it lacks an unregister from the event on destruction though.\nI think this doesn't impact most people, since probably the majority of people don't count on this (pure speculation on my part though), but it would be nice to comply with the documentation and the fix appears to be pretty straight forward to me.\n. ",
    "erbatista": "I like the  WindowStyle  approach, I think it will suffice. Glad to see that I'm not the only one after this feature.\n. ",
    "plainionist": "i also like the idea adding some DependencyProperties to the PopupWindowAction to customize the window. To solve a similar issue in my projects I created a sub-class here https://github.com/ronin4net/Plainion/blob/master/src/Foundation/Plainion.Prism/Interactivity/PopupViewAction.cs\nit supports setting windowheight, windowwith and resizemode directly in Xaml. \nIs it an option to contribute a \"merged\" solution to the library?\n. Obviously I have not read the initial proposal carefully enough - of course the style approach would support my wish perfectly fine - sorry for the inconvenience :(\n. I forgot to mention one drawback of the proposed solution. Pls refer to:\nhttps://github.com/ronin4net/Plainion/blob/master/src/Foundation/Plainion.Prism/Interactivity/KeepAliveDelayedRegionCreationBehavior.cs\n. ",
    "sharadverma810": "Thank you very much for implementing Style property, it's saved my Day!\n. ",
    "lucacicognani": "For me this would be very interesting! In my application I've a container view and I fill it with other views. This allow to take the same region subdivision in the shell window across modules and get an additional but different region sub-subdivision for every module. I'm looking for a workaround to navigate to a view added with nestedRegionManager.Add() method in a module.\n. Sorry Tavi I didn't understand what you mean, what does Pluralsight has to do with my issue? thanks\n. Don't worry, now it's more clear! Thank you. I don't know if Brian has got a solution for this because I have to see quite precisely between the courses. Now I store the nestedRegionManager after Add() method in my module class and I use eventaggregator in some viewmodels for asking to the module class which view is requested to navigate.\nthis.eventAggregator.GetEvent<RequestToNavigateEvent>().Publish(\"starterView_1\");\nthis.eventAggregator.GetEvent<RequestToNavigateEvent>().Publish(\"starterView_2\");\nObviously works but I don't like it. \ud83d\ude13\n. Hi Brian, I've just seen your Pluralsight course and I find it extremely interesting! \nI implemented \"ScopedRegionNavigationContentLoader\" and \"RegionManagerAwareBehavior\" as you described. Now when I debug the RegionManager stored in the viewmodel that implement \"IRegionManagerAware\" I can see all scoped regions. So this is correct now.\nBut now when I call:\nthis.RegionManager.RequestNavigate(SubRegionNames.LeftRegion, \"starterView_1\");\nin the main region (it hosts scoped regions with \"starterView_1\") I got the label \"System.Object\" instead my view.\nThe same issue in my module class, if I write:\npublic void Initialize()\n    {\n        var nestedRegionManager = this._regionManager.Regions[RegionNames.MainRegion].Add(this.starterContainerView, \"StarterContainerView\", true);            \n        nestedRegionManager.RequestNavigate(SubRegionNames.LeftRegion, \"starterView_1\");\n    }\nI obtain \"System.Object\" instead my view. I've seen in your multiple shell course that you obtain the same issue if you don't register the view as object.\nunityContainer.RegisterType<object, View>(\"starterView_1\");\nI register my view with an interface not an object type. So I'm confused because seems like Unity can't find my view by the name so return an object type. Thanks\n. Ok I'll see that point. I think this requirement is a limit for PRISM applications, doesn't it? I register my views with interfaces because take advantage of properties to connect view to a proper viewmodel. In particular every view inherits from IView with a viewmodel property and in the constructor of the view its datacontext is connected to the viewmodel. \n. ",
    "TaviTruman": "Brian does the technology and the solution you presented via Pluralsight address this issue?\n. Yikes \ud83d\ude13 my apologies for the lack of context; the topic of navigation to nested regions, if I'm not totally off base here, is presented by Brian in a Pluralsight educational series. I'll double check for relevance.\n. Yep, that's what I thought; we use it in our product and works beautifully.\n. I have to side with Brain w.r.t. augmenting the PRISM code base with this capability set (Asynchronous Task, Eventing & Coordination); it is not a simple change. Brain you may recall that we are using PRISM on our projects and there a lot of parallel-tasking going on the background while our WPF and UWP apps are running. It took redesign of Regions concept to get what we needed. It's not appropriate for me to go into the design and implementation details here but taking on this type of change was not a simple task at all. \n. @dvorn we have written our own async navigation framework extending it beyond the navigation services that Brian wrote in support of nested regions. We needed a faster more lightweight memory model and we heavily extended the concept of regions. Our problem was not the async nature of the navigation implementation; we require more actions to fire in relationship to navigation eventing and ui/ux workflow. We also added a global KB repository to host messaging between viewmodels and all region management metadata. The point is that what I thought was an easy extension to navigation turnout to be more complex.\n. @dvorn I did submit a PR but pull it back after talking more with Brian. We will submit our work once we have a few more demos written.\n. Looking to add extended support for WPF Multiple-Region Support with enhanced Reactive Extension-based Message and High Performance Transaction-oriented Repository engine for applications that need to address Large to Very Large Ontology Reasoning and KBs.\n. I hear you Brain - I stopped using SO last year.\n. @brianlagunas we do a lot of multiple-shell work in prism and have tabs linked via messaging and Eventing. I never navigate to a ViewModel - that just seems wrong and laden with all kinds of badness. So I have no need for it; PRISM has a long and valued legacy in providing solid guidance; I would not like to see additional work to the API w.r.t. ViewModel navigation. I do think its time to consider Design Patterns and Idioms like Reactive Extensions' Hot Observables combined with the Repository Pattern in conjunction to navigation in general.\n. I know this issue has been\u00a0closed but we have been looking around at using another IoC other\u00a0than Unity\u00a0or other existing IoC that Prism support; we like Castle Windosr IoC very much.\u00a0Brian\u00a0we would be interested in getting this to work as Unity looks to End of Life.. @marcel-Ngan we have a clean working integration of Castle Windsor through the current release; what type of problems are you having. We might be able to help. FYI we have it working with Prism 6.3.. @marcel-Ngan There aren't any WPF Prism+Castle.Windsor examples; which is interesting as Castle Windsor was one of the first IoC technologies for .NET and Prism. . @brianlagunas That's true - I was only mentioning that the Castle Windsor technology has been around for a long time, and I don't think I made or hold Prism at fault for not directly supporting the container. The fact is you won't find any examples or samples of WPF or any such technology at the Castle GitHub site either. One of the first examples I found of using Castle Windsor IoC With Prism was in MSDN issues from 2010 and 2013. Castle Windsor has been around for along time (a large, very sophisticated and powerful IoC technology) and like the others containers used by WPF/PRISM developers is alive, active and well supported. One of the beautiful things I love about Prism is that the technology is one of choice and is very flexible by design.. @marcel-Ngan We have a very sophisticated WPF app based on Prism 6.3 with Castle Windsor that makes use of Multi-Shells extension; I'd be willing to share with your some of the idioms and techniques w.r.t. Castle Windsor and bootstrapper, and related technical matters. . @marcel-Ngan Custom built. Actually there's a good number of changes that must be made integrate Castle Windsor cleanly, and they aren't Prism issues as much as it the nature of the beast. as you know Castle Windsor has a number of API surfaces and you need to find the best one for Prism and for your app needs.. @marcel-Ngan Certainly - you can reach me @ tavi@inknowworks.com; we can establish means to communicate once you send me an email.. ",
    "sunefred": "@brianlagunas I would very much like this to be part of PRISM. From a user perspektive it makes sense to have a scoped region flag on the RequestNavigation compared to other solutions.\n. @dvorn It is a shame this project died out in June. Did you guys decide to wait for a more general solution? From what I can deduct, the core of your solution is this line:\nbool canNavigate = await vetoingView.ConfirmNavigationRequestAsync(navigationContext);\nThe rest of the changes is basically domino effects of using await on that line. By being selective of your await you elegantly tip-toe around the ContentControl.Content = ... that is buried somewhere in Region.Activate()\nNow, assuming I have the gist of the suggested solution I would request that the entire INavigationAware interface is made async as well. It could be done totally analogous to your solution by having an INavigationAwareAsync interface .This is actually the route we are going in our project. The reason is that we do quite a but of view model initialization in OnNavigatedTo(). We could possibly spin up a background thread for this, but having the entire navigation chain be async is much more elegant.\n. @brianlagunas It makes me sad that cloning research is not further along then =)\n@kylewarren This is a workable solution for some scenarios, but there are some limitations directly related to async void\n\nExceptions will not be repackaged and thrown up the hierarchy. This puts a requirement to handle the exception right there in OnNavigatedTo. This is doable depending on your application design, but some applications might rely on a \"catch all\" at the top to log and show simple dialogs etc.\nSince async void is essentially a \"fire and forget\" function your navigation will no longer respect the lifecycle that PRISM otherwise provides. This means that the navigation callback and the IRegionNavigationServicenavigated event could be called before your initialization code is finished.\n\n[2] is the most severe IMO. The code late in your life-cycle could be made to wait for the \"fire and forget\" code to finish, but then waiting has to be made async. It is all around just messy. If you instead implement INavigationAwareAsync the life-cycle is naturally respected.\n@dvorn you make an excellent point that async implementation of INavigationAwareAsync requires the user of such an interface to handle (or prevent) interactions to both the old and new views as the switch happens. For long running synchronous code the developer should already be aware that something extra has to be done to inform the user of the switch, so the leap to prevent interaction should not be so big. Most importantly though async will allow your \"Loading...\" message to be responsive and animating which is an overall better user experience.. > Catch all is a horrible way ...\nYes yes, for sure, I don't think you will have disagreement there from either of us. It does seem useful to be able to do the following asynchronously however\ntry\n{\n    _regionManager.RequestNavigate();\n}\ncatch\n{\n    // Alert user of navigation failiure\n}\nThis is a practical use case where asyncwould be of direct use.\nYou did challenge us to give you the killer use case that cannot be accomplished without async. So let me take a stab at that. In our project we are looking for a fully working set of lifetime hooks where the order and behavior is sequential and predictable. Consider the lifetime hooks Angular 2 provides for different stages of a Components creation and destruction. An essential quality of such a system is that the order in which they are executed should be strictly sequential, meaning hook #1 is finished executing before #2 is called. You don't want the \"Loaded\" event before the \"Initialize\" event has finished executing.\nYou could argue that this is not what PRISM was designed for, that it is an informative system and not meant to drive things such as initialization. In that case async is probably not a good fit.\n. @brianlagunas Hey man, being new to Prism this post was actually very informative. I had no idea of extent or impact of Prism in the industry and this sheds some light on that. I have not been around when it was part of Microsoft Patterns & Practices and have not gone through any versions prior to 6.0. It is easy to cook up a feature and get it working in a controlled environment, in a local project, but as the maintainer you always have to keep the big picture in mind and preserve backwards compability. This is an order of magnitude harder and your work here is appreciated. Thank you.\nHaving said that, we are implementing features that could be useful for a framework like Prism but most likely would break backwards compability. Maybe there is room for a major (breaking) version down the line where such features could be considered? Other than async navigation, we have implemented a system for relative navigation and are working on scoped service location. (Lifetimescope in Autofac speak). I will elaborate on this in a separate topic if there is interest. Regardless, what is your view on breaking changes in major versions?\n. Would it be possible to have more general interfaces IDeactivateAware and IActivateAware that could also be called when activating and deactivating views through calls to Region.Activate etc. I wouldn't call switching tabs a navigation per say, it is more a user interaction to activate and deactivate a views.\n. @toadzky Let me elaborate a little bit then, and we will see if you agree with me.\nThere are a multitude of ways to activate and deactivate content in a TabControl.\n1. View injection\n2. View discovery\n3. Navigation\n4. Region.Activate/Deactivate\n5. Manual tab selection\nAll of these will already affect the Region.ActiveViews and if you implement the IActiveAware interface you will get notification when your tab is deactivated. To me it is odd that manual tab selection should get special treatment when it is just one of many methods to select the active tab. And by the way IActiveAware also works on ContentControl, ListBox etc.\nI see a complication if you use navigation in parts of your application to switch tabs and if you use INavigationAware to confirm switching tabs. In that case it is counter intuitive that manually clicking a tab does not require the same confirmation. Is this the use case you want to cover?\n. First of all, .pbd will only help with Call Stack info and Stack traces. In order to step into Prism code you will need both .pbd and source files. The recommended way to do this for public nuget packages is to create a separate symbol package and make that available on http://www.symbolsource.org/.\nDetails can be found here: https://www.visualstudio.com/en-us/docs/build/steps/utility/copy-and-publish-build-artifacts\nAnd here is the announcement Microsoft partnership with http://www.symbolsource.org/ in 2011. http://blog.davidebbo.com/2011/04/easy-way-to-publish-nuget-packages-with.html. ",
    "cousinanthony": "In my view, I have tab control with a named region.  The content of some of the tabs require a scoped region manager since it may contain multiple instances of the same sub-view.\nThis thread confirmed that view injection had to be used over the region navigation framework.\nWhat is the best practice for resolving the instance of the sub-view which has its own view model.  I need to pass a parameter to the view model so it initializes with the correct data.\nI was able to get this to work by overloading the constructor of the view, but another thread suggest this isn't correct.  https://github.com/PrismLibrary/Prism/issues/367\nIs there is a \"cleaner\" technique for doing this within PRISM?\nThanks in advance.\n```\ncase ModulePerson.VIEW_NAME_PERSON_PAYMENTS_TAB:\n                    int personId = Convert.ToInt32(navigationParameters[\"PersonId\"]);\n                    var viewPaymentsTab = tabRegion.Views.OfType().SingleOrDefault();\n                    if (viewPaymentsTab == null)\n                    {\n                        viewPaymentsTab = UnityContainer.Resolve(new ResolverOverride[] { new ParameterOverride(\"personId\", personId) });\n                    var scopedRegion = tabRegion.Add(viewPaymentsTab, null, true);\n                    Prism.Regions.RegionManager.SetRegionManager(viewPaymentsTab, scopedRegion);\n                    RegionManagerAware.SetRegionManagerAware(viewPaymentsTab, scopedRegion);\n                }\n                if (viewPaymentsTab != null) tabRegion.Activate(viewPaymentsTab);\n                break;\n\n```\nthe the code behind in my view I did the following:\n```\n  public MembershipView()\n        {\n            InitializeComponent();\n        }\n        public MembershipView(int membershipId) : this()\n        {\n            if (DataContext != null)\n            {\n                _vm = DataContext as ViewModels.MembershipViewModel;\n                if (_vm != null)\n                {\n                _vm.GetMembershipCommand.Execute(new ViewModels.MembershipEventParams() { MemberId = membershipId });\n            }\n        }\n    }\n\n    ViewModels.MembershipViewModel _vm = null;\n\n    public int MembershipId\n    {\n        get\n        {\n\n            if (_vm != null && _vm.MembershipModel!=null)\n            {\n                return _vm.MembershipModel.MemberId;\n            }\n            else\n            { \n                return 0;\n            }\n        }\n    }\n\n```\n. ",
    "kobush": "My collegues Kevin Stumpf and Danny Warren developed PDFx framework to address this.\nhttp://pdfx.codeplex.com/\nhttp://blogs.interknowlogy.com/2013/05/17/pdfx-property-dependency-framework-part-i-introduction-2/\n. I just run into the very same problem. After I suspend and terminate the app, and then try to reasume I get this error. \nException thrown: 'System.Runtime.Serialization.InvalidDataContractException' in System.Private.DataContractSerialization.dll\nAdditional information: SerializationCodeIsMissingForType. For more information, visit http://go.microsoft.com/fwlink/?LinkId=623485\nFrom the above conversation I'm not clear whats the current state of this issue. Is this fixed and I should get latest from GitHub? Or should I use the workaround with Json serialilzer?\nActually I don't have anything besides defaults in my session state (AppFrame and navigation). So I was hoping it will fix if I add this to Default.rd.xml \n<TypeInstantiation Name=\"System.Collections.Generic.Dictionary\" Arguments=\"System.String,System.Object\" \n                   Activate=\"Required Public\" Dynamic=\"Required All\" DataContractSerializer=\"Required All\" />\n. ",
    "Rhywden": "Okay, I apologize for that.\nStill, it would be nice if there was some kind of dates attached to the notice that you're on vacation - it's a bit vague.\n. Okay, found a workaround - basically, instead of binding, say, textboxes directly to a public Property() {get;set;} I instead wrap the textbox in a Grid or StackPanel, bind an instance of a class to it (which sports the property I want) and then change the property of the instance.\nSo, if we had \npublic class Foo {\n  private string _baz;\n  public string Baz { get { return _baz; } set { SetProperty(ref _baz, value); } }\n}\nwith the MVVM doing this:\nprivate Foo _foo;\npublic Foo { get { return _foo } }\npublic Baz {get { return _foo.Baz; } set { _foo.Baz = value; } }\nand XAML like this:\n<Grid DataContext=\"{Binding Foo}\">\n  <TextBox Text=\"{Binding Baz, Mode=TwoWay}\" />\n</Grid>\n<TextBox Text=\"{Binding Baz, Mode=TwoWay}\" />\n... then we will see that upon doing either _foo.Baz = \"Arf\" or Foo.Baz = \"Arf\" or Baz = \"Arf\" only the textbox inside the Grid will be updated.\n. Erm, the Command does execute.\n. Well, that's the thing: If I change the properties I want anywhere but in the command, the changes get picked up.\n. Seems to have done the trick. I'm not quite sure what is different this time around.\nThen again, VS 2015 still needs some wrinkles to be ironed out - the designer view keeps crashing even when I didn't change anything and sometimes namespaces simply vanish according to VS, necessitating a restart.\nThanks for your help!\n. Okay, I zipped up a solution (sorry if I put more in that than I should - I simply compressed the whole folder), which can be found here.\nHow it's supposed to work is probably more comprisingly described here (and also the alternative ways to get there). \nAs I said, you can switch between the two expected views by simply deleting the mobile-family folder (if it's there the mobile view works, if it isn't the desktop view works)\n. Thanks for the answer. I thought as much but, as I'm still learning about this, also didn't want to reinvent the wheel (badly).\n. Maybe a short follow up: I did try to pull the stuff I wanted to unit test into a class library. That approach worked for the models.\nWhen I tried the same with the ViewModels, the app silently fails. The View is constructed but the ViewModel is never instantiated. I tried to use Container.RegisterType(...) but that didn't work out as well. Simply nothing happens and I don't even get a error message so I'm not really able to figure out what is going wrong there.\nThe namespace is unchanged, my ViewModels reside in AppName.ViewModels and I can access them programmatically, independent of their location. \n. Okay, this here does work, regardless of where the VM in question resides:\nvar x = Container.Resolve(typeof(ExamplePageViewModel)) as ExamplePageViewModel;\nSo the container can find the ViewModels. Seems to be a problem with the AutoWireViewModel.\n. Here's a short video which shows the problem in detail:\nhttps://youtu.be/BDq5AggtF3A. I only used the Navigation features from Prism. I'm not seeing how I could define anything differently.\nBasically, I would definitely wind up in the same place. And I did start a new project.\nBut if you absolutely desire that I do so I can simply open a new issue and not mention HelloWorld.... Please watch my video, it should make the issue clearer. It's only 2 minutes.. I'm not sure where I would be resetting it. The Views and ViewModels for the three pages are functionally identical. I'm not doing anything special to MainPage that I'm not also doing to CourseForm and PupilForm.\nI can do this in App.cs:\nNavigationService.NavigateAsync(\"MyMasterDetail/MyNavigationPage/CourseFormPage\", animated: false);\nand then I cannot navigate to CourseForm but to MainPage instead.. If I set it to true I don't get any back button. Also, if I use a simple NavigationPage instead of MyNavigationPage I still don't get the back button.. That is very confusing. I honestly do not understand why the initial navigation in App.cs prevents any further navigation to that page from inside the Hamburger Menu when it does work for all the other pages.\nAlso: To be clear - it's not that the back button does not appear. It's that there's no navigation happening at all.. https://1drv.ms/u/s!AnaQYQYuE_OJjcBlM_lwS1Y88I8Hpw. Yes, but if I use a normal navigation page I lose the back button for the Hamburger.. It's easy to describe: My sample shows that upon clicking on the two options for CourseForm and PupilForm the app does execute a navigation to those pages while also enabling navigation back through the back button. \n<Button Text=\"CourseForm\" Command=\"{Binding NavigateCommand}\" CommandParameter=\"NavigationPage/CourseFormPage\" />\nThis works.\nI'd like for it to work also for this:\n<Button Text=\"MainPage\" Command=\"{Binding NavigateCommand}\" CommandParameter=\"NavigationPage/MainPage\" />\nBecause clicking that button does absolutely nothing - neither does it navigate to MainPage nor is a back button available (obviously).. Ah, I see. I suppose there isn't an easy way of adding a reference to a page to the stack instead of the page itself?. Okay, thank you for that explanation. So, if I understand that correctly, NavigationService.NavigateAsync(\"MyNavigationPage/CourseFormPage\"); will reuse the navigation page and create a new instance of CourseFormPage, whereas NavigationService.NavigateAsync(\"CourseFormPage\"); will not do that.\nIs there some way to prevent the first from happening, besides not using the Hamburger Menu in that way?. ",
    "PaybackMan": "Thanks Brian, I figured this out and it's nice to see that everything works.\nReally looking forward to this api. Keep it up!\n. Looks like I was derriving my App class from PrismApplication instead of PrismUnityApplication...\nI guess this is our new Bootstrap area??\n. ",
    "vsmike": "Yes, that is the intent Type of VM a given view might produce, for callback discovery.  I was also able to do this operation by Implementing a custom ModuleInitializer as well, so this request at this point could be ignored.\nBest regards,\nMichael Arnwine\nSolution Architect\n[cid:image001.jpg@01CC30FF.DAF62560]\nOffice: 281.282.0865\nDirect: 210-737-4712\nE-mail: michael.arnwine@flowcal.commailto:michael.arnwine@flowcal.com\n[cid:image002.png@01D0CA06.1487C100]https://www.facebook.com/flowcalsoftware[cid:image003.png@01D0CA06.1487C100]https://www.linkedin.com/company/flow-cal?trk=company_logo[cid:image004.png@01D0CA06.1487C100]https://twitter.com/flow_cal[cid:image005.png@01D0CA06.1487C100]https://www.youtube.com/user/FLOWCAL1\nCONFIDENTIALITY: This email (including any attachments) may contain confidential, proprietary and privileged information, and unauthorized disclosure or use is prohibited. If you received this email in error, please notify the sender and delete this email from your system. Thank you.\nFrom: Brian Noyes [mailto:notifications@github.com]\nSent: Wednesday, August 26, 2015 1:13 PM\nTo: PrismLibrary/Prism Prism@noreply.github.com\nCc: Michael Arnwine michael.arnwine@flowcal.com\nSubject: Re: [Prism] Need Access to the DefaultViewTypeToViewModelTypeResolver, to determi\u2026 (#96)\nHi @vsmikehttps://github.com/vsmike, this pull request looks pretty harmless, but would like to understand your scenario a little better before pulling it in because I don't understand the tie with modules and view model base classes you mention. Your PR code would make it so you can get back the Func that is the view model type resolver, but curious how you are going to use that. Do you invoke it yourself to see what Type of VM a given view might produce and then execute some other logic based on that?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PrismLibrary/Prism/pull/96#issuecomment-135127952.\n. ",
    "diego2k": "Works for me, thanks.\n. Thanks, \nI'm definitely hooking it after CreateDeviceGestureService() is called, actually it's in the Loaded method of a page. I have looked a little bit into the Prism code: \nFirst PrismApplication.HardwareButtonsOnBackPressed gets called and thus the _frame.GoBack();\nThen RaiseCancelableEvent(EventHandler eventHandler, object sender, T args) which calls my method; \"if (args.Cancel)\" gets true and thus the loop ends. \nBut it's not important at this point in time _frame.GoBack(); is already called ... \nCurrently I don't get how this should work, PrismApplication.InitializeFrameAsync subscribes directly to HardwareButtons.BackPressed, so there is no potability to cancel the event. \n. Sure :)\nTake the HelloWorld from the master, change the UserInputPage.xaml.cs to:\n```\npublic sealed partial class UserInputPage : VisualStateAwarePage\n{\n    public UserInputPage()\n    {\n        InitializeComponent();\n        this.Loaded += (s, e) => { App.DEV.GoBackRequested += GoBackRequested; };\n    }\nprivate void GoBackRequested(object sender, Prism.Windows.AppModel.DeviceGestureEventArgs e)\n{\n    // NOP\n    e.Handled = true;\n    e.Cancel = true;\n}\n\n}\n```\nAnd of course you have to edit  the App.xaml.cs, add this line:\npublic static IDeviceGestureService DEV { get; set; }\nand but this line in the OnLaunchApplicationAsync method:\nDEV = this.DeviceGestureService;\nStart the app with the \"Mobile Emulator 10.0.10240.0 WVGA 4 inch 512MB\", select an item and click \"Navigate To\", now press the hardware back button (bottom left). \nYou will see that the app navigates one page back. \nSo what happened? \nThe RaiseCancelableEvent will be called, but my GoBackRequested method from the top will just to a NOP, so no navigation will happen. But in the PrismApplication.cs the method HardwareButtonsOnBackPressed gets also called which triggers the GoBack event. \nIf you start the app without my modification, the back button will close the app, this is comprehensible because the GoBack event will be called twice, one time by this line: \nHardwareButtons.BackPressed += HardwareButtonsOnBackPressed;\nand one time by this: \nDeviceGestureService.GoBackRequested += OnGoBackRequested;\nI have compared the two mentioned versions and this is exactly what got changed, just remove this lines from PrismApplication.InitializeFrameAsync and the bug should be fixed: \nif (ApiInformation.IsEventPresent(\"Windows.Phone.UI.Input.HardwareButtons\", \"BackPressed\"))\n{\n    HardwareButtons.BackPressed += HardwareButtonsOnBackPressed;\n }\nYou have already subscribed the HardwareButtons.BackPressed in the DeviceGestureService.InitializeEventHandlers. I think I don't have to explain why this is a problem ;).\nThanks,\nHarald\n. Ah I'm sorry I didn't read #105 \nPerfect thanks!\n. Looks pretty good,\nthanks\n. I have only done a short test (on master), but I think the issue is still in the code. \nThe method \"protected async override void OnActivated(IActivatedEventArgs args)\" is missing in the PrismApplication, so I guess it can't work. \n. Additionally, that everything works the following code has to be added to e.g. App.xaml.cs:\n```\n    protected async override void OnActivated(IActivatedEventArgs args)\n    {\n        if (Window.Current.Content == null)\n        {\n            Frame rootFrame = await InitializeFrameAsync(args);\n        Shell = CreateShell(rootFrame);\n\n        if (Shell != null)\n            Window.Current.Content = Shell;\n        else\n            Window.Current.Content = rootFrame;\n    }\n    else\n    {\n        // If the app is already running OnInitializeAsync doesn't get called\n        ToastNotificationActivatedEventArgs toastArgs = args as ToastNotificationActivatedEventArgs;\n        if (toastArgs != null)\n        {\n            this.NavigationService.Navigate(Pages.BLA.ToString(), toastArgs.Argument);\n        }\n    }\n\n    Window.Current.Activate();\n}\n\n```\n. Sorry I overlooked this ... I will upload an example as soon as possible\n. It's already fixed, since a few days. \nThanks.\n. @tomzorz I think this would work. I implemented a workaround in a similar way. \nAdditionally, in my first post I wrote that OnNavigationFrom and OnNavigationTo should be in the shell, but now I'm not sure ... the shell does not navigate, it's the shell ... just a thing to think about. \n. The error only occurs if the Prism.Windows project must be referenced by the test project. So if you want to test ViewModels you need the Prism.Windows stuff because ViewModelBase is a part of it. So the answer is yes I get the error with this approach as well because I'm testing my ViewModels. \n. Is this a known issue or am I the only one who has this problem?\n. Sorry I'm not completely sure what's happening here. As far as I understand the exception, XBF files are binary representatives of XAML files, my example to reproduce the error includes only one XAML file which is possible to be responsible for the error: \nApp.xaml of the Blank App project. \nSo with high probability the problem is in the PrismApplication.cs ... so I guess the only solution to gather more information about this issue is to delete line after line in PrismApplication.cs until the exception disappears. \nCurrently I'm running low on time, but I think at the weekend I can take a closer look, maybe I can provide some more information.\n. If your ViewModels inherit from ViewModelBase it's not possible ;) \n. Hm that's interesting, @bartlannoeye yes your example works. So this means Prism and Prism.Windows must be referenced by a Blank App (Universal WIndows) project and die Blank App must be referenced by a Unit Test App (Universal Windows) project. If it is a Class Library (Universal Windows) instead of a Blank App everything works. \n. ",
    "grandtiger": "Thank you very much for the quick fix! I really look forward to the 6.0 RTM Release!\n. ",
    "timrobuck": "Attempting a first prism 6 wpf project, it demands composite views.  The only example i have found on github or the internet is one of your quickstarts, but it uses prism.composition nuget that is no longer supported. Do you have any example doing this with prism.wpf.   If so please send or point me to it. Thanks, Tim\n. ",
    "ValdimarThor": "Yeah I couldnt believe it myselft, had to make new solution from the default templates, make it work with PRISM, then update the XF nuget packages to see it fail. Very strange indeed\n. Good to know, hope Xamarin fixes this bug soon :)\n. Alright :) \ngood to know :+1: \n. Brilliant, thanks Brian\n. Isn't it rather that nuget doesn't know or inspects that the UWP project has a Prism.Forms reference (indirectly)?\n. Thanks for clarifying Brian, I've done that and everything builds now.\nbtw. I know this might not be the most appropriate place to ask but.....any news on your next PRISM pluralsight course :) ?\nRegards\nValdimar Thor\n. Brilliant, thanks Brian. Looking forward to it :)\n. ",
    "CarlosAdrianM": "You are right, sorry. I will wait until RTM :)\nThank you\n. ",
    "BoeseB": "How about adding an Dialog Option Type you can use to define the buttons?\nA DialogOption would have the button text as string and a callback action as Properties which define the action upon press of the button. So you dont need to switch on the returned integer or string.\nAny thoughts about this?\n. I got something similar running in winforms. In my opinon its much easier to use with the callback/command instead of interpreting an integer and have to worry about the position of the button. If i switch two buttons i have to update the following code, which evaluates the returned option. \nWith on the other hand callbacks/commands i dont need to worry about the position.\nIn my implementation i still got the option to use the return value of the Display Method which led to confusion, where my coworker casted the returnvalue to a DialogResult and used it that way.\nImplement it as some extension method is also a great idea.\nJust so you got an impression how we implemented a similar service here are the interfaces\n``` csharp\n    public interface IPromptService\n    {\n        int Send(PromptType type, IPromptMessage message, params IPromptOption[] options);\n    }\npublic interface IPromptOption\n{\n    string Name { get;  }\n    Action CallbackAction { get;  }\n}\n\npublic interface IPromptMessage\n{\n    string Title { get;  }\n    string Message { get;  }\n    string Description { get;  }\n}\n\n```\n. ",
    "martingust": "@brianlagunas Which is the bug in Xamarin.Forms? Would like to keep an eye on that one since we are also waiting on WP 8.1 support.\n. ",
    "likemike91": "Are there currently any plans to support async/await in the whole navigation process (INavigationAware, INavigateAsync, ...)?\nIn todays async/await heavy world, I think this would enhance the overall Navigation experience with the Prism Framework.\n. Okay I can imagine that it has a huge impact on the whole navigation system.\nAre there any known issues with using INavigationAware respectively INavigateAsync with async void implementations?\n. ",
    "kylewarren": "Is there anything wrong with calling your own methods? \nFor instance ...\nPublic async void onNavigatingTo(NavigationParameters params)\n{\n await OnNavigatingToTask(params)\n}\nPublic async Task OnNavigatingToTask(NavigationParameters params)\n{\n await doAsyncStuff();\n}. Does this work on windows phone 8.1? It works on android for my app, but not windows phone 8.1 hardware back button.. Haha I would prefer that too. Not my call though:(. I did two things and showed my product owner \n1) I disabled the back button in platform specific project, and said look, the only way to navigate back is via the back button in the top left corner in our nav bar so that iOS, android, and win phone 8.1 all behave the same.\nWell PO didn't like that very much,so...\n2)I used the event agrigator and published it when the back button was detected in the platform specific project. Then in my baseViewmodel I listen for it and just call navigation service.gobackAsync(). Oh I think I misunderstood, I was answering for just the winphone 8.1 scenario. This works in prism perfectly for android and iOS . In that code sample there isn't a navigation page. Just something called basenavigation page . @brianlagunas did this happen in 6.3?\n\"Though you do bring up a good point regarding the direction of dependencies. After thinking about it more, I believe the IPlatformInitializer.RegisterTypes should be moved before the PrismApplication.RegisterTypes since the PCL will be using types from the platform project heads and not the other way around. This will be an easy fix for the 6.3 release.\". I like the IDestoryAfterNavigation approach as well, but even if it was a modal page we would still have the flash or no?. Would you need to know the order of your children so that you could handle the onNavigatingTo, destroy, etc. in a particular order if the children were stacked on top of each other or within one another. \nI would think you would work from the inner most child and work your way up.\nI have a couple of views where I have embedded views where I set the binding context at each level\nDoes that make sense? . Correct. Mostly speaking to content views in particular, and just making sure that when handling all the events, attempting to do them from the inner most child and working your way up/out. \nAnd I suppose I would think that the in scenario you laid out above, that you would handle navigation methods TO first of the upper/outer most parent and work your way down. So from the content page, to view a, to view b. Why? Because I would assume some setup would probably need to happen in each of the parents before setting the context on the child.\nBut when working on methods that fire when a view is being destroyed/pushed off the stack, you would do the inverse and work from view b, to view a, to the content page. . ",
    "ekalchev": "@brianlagunas I see you removed RaiseAsync what was the reason for that?. ",
    "dnfclas": "@frogger3d, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @frogger3d, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @tomzorz, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @tomzorz, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. @brianlagunas, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @bbrandt, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @runceel, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. Hi @Mykezero, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @Mykezero, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @mintrupt, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. @mintrupt, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @overrorflow, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @overrorflow, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @chuseman, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @chuseman, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @chuseman, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @chuseman, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @grhm, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @grhm, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @runceel, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @runceel, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @overrorflow, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @overrorflow, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @overrorflow, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @znakeeye, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @overrorflow, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @overrorflow, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @Mardaneus86, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @ali-hk, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @Mardaneus86, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @arielbh, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @rprouse, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @rprouse, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @Haacked, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @tiesmaster, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @caioproiete, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @DJKampouris, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @Neccta, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @Neccta, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @jorisdebock, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @jorisdebock, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @jorisdebock, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @jorisdebock, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @webwarrior06, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @arielbh, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @Shayon, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @zzczzc004, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, DNFBOT;\n. Hi @arielbh, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. Hi @arielbh, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @dersia, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, DNFBOT;\n. Hi @pdinnissen, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @judgy, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @judgy, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @rmkrmk, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @rmkrmk, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @malylemire1, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @malylemire1, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @calebnelton, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. Hi @calebnelton, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @calebnelton, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @calebnelton, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @MartinWilkerson, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @MartinWilkerson, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @michal-ciechan, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @RikardoPons, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @umasubbu23, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. Hi @allanrsmith, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @allanrsmith, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @Adam--, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @Adam--, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @rinoandrejohnsen, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. Hi @galakt, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @joacar, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @joacar, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @joacar, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, DNFBOT;\n. Hi @joacar, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @joacar, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @JorreHolland, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @ali-hk, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @ali-hk, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @ali-hk, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @ali-hk, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @joacar, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @joacar, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @Gateswong, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @dansiegel, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @dansiegel, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @joacar, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @rinoandrejohnsen, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @rinoandrejohnsen, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @Senbakiri, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @Senbakiri, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @joacar, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @ederbond, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @ederbond, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @ederbond, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, DNFBOT;\n. Hi @ederbond, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, DNFBOT;\n. Hi @joacar, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @ederbond, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, DNFBOT;\n. Hi @artfuldev, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @dvorn, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @dvorn, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @dvorn, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @dvorn, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @dvorn, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @dvorn, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @joacar, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @dvorn, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @joacar, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @mrbiggred, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, DNFBOT;\n. Hi @flabordec, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @flabordec, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @SeletskySergey, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @SeletskySergey, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @ali-hk, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @Willjobs94, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @Willjobs94, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @nolanblew, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @ali-hk, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @AlesDo, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @nicolaiarocci, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @nicolaiarocci, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @nicolaiarocci, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @magicmonty, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @magicmonty, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @magicmonty, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @ildoc, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @micdahl, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @micdahl, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;. Hi @ThAlmighty, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @ThAlmighty, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;. Hi @JerryNixon, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. @JerryNixon, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;. Hi @JerryNixon, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @JerryNixon, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;. Hi @Vinnie1991, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @nuitsjp, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @nuitsjp, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @nuitsjp, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @nuitsjp, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @nuitsjp, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @nuitsjp, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @nuitsjp, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @hhyyg, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @nuitsjp, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @nuitsjp, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @nuitsjp, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @nuitsjp, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @hardcodet, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @BrettJaner, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @weitzhandler, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @weitzhandler, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;. Hi @nuitsjp, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @nuitsjp, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @nuitsjp, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @mfe-, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @mfe-, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;. Hi @nuitsjp, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @ThAlmighty, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. \n@VitalyKnyazev,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\n.NET Foundation Pull Request Bot. @VitalyKnyazev, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, .NET Foundation Pull Request Bot. \n@VitalyKnyazev,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@nuitsjp,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@ViktorHofer,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\nIt will cover your contributions to all .NET Foundation-managed open source projects.\nThanks,\n.NET Foundation Pull Request Bot. @ViktorHofer, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, .NET Foundation Pull Request Bot. \n@xxMUROxx,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@weitzhandler,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@ellisnet,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\nIt will cover your contributions to all .NET Foundation-managed open source projects.\nThanks,\n.NET Foundation Pull Request Bot. @ellisnet, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, .NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@matheusneder,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@rmarinho,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@WonkiDonk,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@fredrikhaglund,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@DingpingZhang,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\nIt will cover your contributions to all .NET Foundation-managed open source projects.\nThanks,\n.NET Foundation Pull Request Bot. @DingpingZhang, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, .NET Foundation Pull Request Bot. \n@JaggerJo,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\nIt will cover your contributions to all .NET Foundation-managed open source projects.\nThanks,\n.NET Foundation Pull Request Bot. @JaggerJo, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, .NET Foundation Pull Request Bot. \n@wowfood,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@dersia,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@mgj,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\nIt will cover your contributions to all .NET Foundation-managed open source projects.\nThanks,\n.NET Foundation Pull Request Bot. @mgj, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, .NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@mamta345,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\nIt will cover your contributions to all .NET Foundation-managed open source projects.\nThanks,\n.NET Foundation Pull Request Bot. @mamta345, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, .NET Foundation Pull Request Bot. \n@cointoss1973,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\nIt will cover your contributions to all .NET Foundation-managed open source projects.\nThanks,\n.NET Foundation Pull Request Bot. @cointoss1973, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, .NET Foundation Pull Request Bot. \n@cointoss1973,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot. \n@excpt,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\nIt will cover your contributions to all .NET Foundation-managed open source projects.\nThanks,\n.NET Foundation Pull Request Bot. \n@rinoandrejohnsen,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\nThanks,\n.NET Foundation Pull Request Bot.  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.:x: baskarsaji sign nowYou have signed the CLA already but the status is still pending? Let us recheck it..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.:x: sathirei sign nowYou have signed the CLA already but the status is still pending? Let us recheck it..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.:x: fierypro125 sign nowYou have signed the CLA already but the status is still pending? Let us recheck it.. ",
    "jiji2": "hi , can we change the layout in the same family device ? meaning i want to create different designs for 4\" and 5\" : i don't want them to look the same ... is that possible ?\n. ",
    "tjones0808": "hey guys, any update on this?\n. Alright no worries. Thanks for the update\n. Yes, the problem was I was subscribing to an event that created the dialog. Whenever I left I wasn't unsubscribing from the event and when navigating back it subscribed again and was giving me the error.\n. ",
    "nphmuller": "Working over here. Thanks for the fast fix!\n. ",
    "joelweiss": "Thanks @briannoyes for the detailed reply, will work around it.\n. Valid point, but when it was a Microsoft project it only supported Unity and MEF, now you support a lot of other containers which makes it not that simple.\nEither way, there is no point in having the StructureMap package signed if we wont be able to upgrade StructureMap ever.\nMight I suggest just having this package unsigned (or maybe only sign the Unity and MEF packages)\nThanks.\n. I don't see any build script. what are you using to build and create the nuget packages?\n. found it, can we just change the paths here and here?\n. Will try to send a PR soon then.\n. Thanks.\n. Thanks. When is the plan to update the nuget package?\n. This is how I do it.\ncsharp\n        protected override void ConfigureModuleCatalog()\n        {\n            // All my modules inherit from IModule\n            var moduleTypes = GetType().Assembly.GetTypes().Where(t => !t.IsAbstract && t.GetInterfaces().Any(i => i == typeof(IModule)));\n            foreach (Type moduleType in moduleTypes)\n            {\n                try\n                {\n                    // On each module I have a static property DependsOn\n                    Type[] dependsOnTypes = null;\n                    PropertyInfo dependsOn = moduleType.GetProperty(\"DependsOn\", BindingFlags.Public | BindingFlags.Static);\n                    if (dependsOn != null)\n                    {\n                        dependsOnTypes = (Type[])dependsOn.GetGetMethod().Invoke(null, null);\n                    }\n                    var moduleInfo = new ModuleInfo\n                    {\n                        ModuleName = moduleType.Name,\n                        ModuleType = moduleType.AssemblyQualifiedName,\n                        DependsOn = new System.Collections.ObjectModel.Collection<string>(dependsOnTypes == null ? new List<string>() : dependsOnTypes.Select(t => t.Name).ToList()),\n                        InitializationMode = InitializationMode.WhenAvailable\n                    };\n                    ModuleCatalog.AddModule(moduleInfo);\n                }\n                catch (Exception ex)\n                {\n                    Logger.Log(ex.Message, Prism.Logging.Category.Exception, Prism.Logging.Priority.High);\n                    throw;\n                }\n            }\n        }\n. For anyone who runs into this issue, the same is when you override CanExecute() you must override the CanExecute(object parameter)\n. There are valid scenarios even if you don't call it manually from code, for instance I have a derived ExclusiveCommand that makes sure that it can only be executed once at a time, so the button (or any bounded element) is disabled while the async command is still executing.\nSee example\n``` csharp\npublic class ExclusiveCommand : DelegateCommand\n{\n    bool _IsRunning = false;\npublic ExclusiveCommand(Func<Task> executeMethod) : this(executeMethod, () => true) { }\n\npublic ExclusiveCommand(Func<Task> executeMethod, Func<bool> canExecuteMethod) : base(executeMethod, canExecuteMethod) { }\n\n// have to override Execute(object parameter) because otherwise Execute wont get called via bindings see https://github.com/PrismLibrary/Prism/issues/732\nprotected override async Task Execute(object parameter)\n{\n    bool canExecute = CanExecute();\n    if (canExecute)\n    {\n        _IsRunning = true;\n        RaiseCanExecuteChanged();\n        try\n        {\n            await _executeMethod(null);\n        }\n        finally\n        {\n            _IsRunning = false;\n            RaiseCanExecuteChanged();\n        }\n    }\n}\npublic override Task Execute() => Execute(null);\n\n// have to override same as above comment\nprotected override bool CanExecute(object parameter) => !_IsRunning && _canExecuteMethod(parameter);\npublic override bool CanExecute() => CanExecute(null);\n\n}\n```\n. It's your call if you still want to support async, was just chiming in that there is a scenario you can make usage of the async behavior even when using binding.\nThanks for the hard work\n. ",
    "Authfix": "I had the same error so I take the same approach as bartlannoeye : only views in my store project and all other stuff in a library\nI can make unit tests of universal projects but not with Prism referenced.\n. ",
    "JerryNixon": "You cannot unit test a UWP project, only a class library (at this time).\n. This article confirms that Coded UI Testing for Windows Store is supported.\nhttps://msdn.microsoft.com/en-us/library/dn305948.aspx\nThis article infers that Coded UI Testing for UWP is still forthcoming.\nhttps://blogs.msdn.microsoft.com/visualstudioalm/2016/03/10/visual-studio-team-services-testing-tools-roadmap/\n. Just wanted to check-in with the current status. Last update was December last year.\n. @brianlagunas I could not agree with you more. It's endlessly tempting to build the abstraction infrastructure and do everything with a framework that has a very explicit purpose otherwise. Keep it simple. Keep it clean. And keep your goals as few as possible. We've been backed into a corner with some things in Template 10. You definitely don't want to be there. . Maybe I can help\nWindows Phone 8\n\nWindows.Phone.UI.Input.HardwareButtons.BackPressed\n\nThe platform assumed your application had only one frame and would auto-wire up the BackPressed button to back navigation. When the BackStack was empty, the application would terminate. Manually handling BackPressed and setting e.Handled to true would prevent this behavior, but it would also prevent an app from certification in the Windows Phone Marketplace.\nWindows Phone 8.1\n\nSystem.Windows.Navigation.NavigationService.PauseOnBack\n\nBehavior varied if you wrote a Silverlight app or a Universal app. Silverlight apps continued to behave like Windows Phone 8. Universal apps also behaved like Windows 8 apps, except for the optional PauseOnBack property that, when set to true, when the BackStack was empty, the application would suspend instead of terminate. It was opt-in and the default was false.\nWindows 10 Mobile on Phone\n\nWindows.UI.Core.SystemNavigationManager.GetForCurrentView().BackRequested\n\nUWP requires the developer to handle the back button. There is no auto-wire up for any frame, as the platform makes no assumptions about the app. If BackRequested is not handled, and e.Handled is not set to true the platform will Suspend the app and auto-navigate to the next app. In addition, apps running on the desktop are Suspended when they are minimized. \nExtendedExecutionSession\n\nWindows.ApplicationModel.ExtendedExecution.ExtendedExecutionSession\n\nWith Windows 10 1511 (November Update/Threshold 2/10586) the platform introduced extended the ExtendedExecutionSession which allowed developers to manipulate Suspension behavior. This provided for real time location apps, and extra time during suspension (using SaveData). In Windows 10 1707 (Anniversary Update/Redstone 1/14393) the platform enabled the Unspecified extended type which would prevent an application from Suspending when minimized or swapped by BackRequested's behavior. \nTemplate 10\n\nhttps://github.com/Windows-XAML/Template10/tree/master/Template10%20(Library)/Services/ExtendedSessionService\n\nIn Template 10, we automatically enter every app into an Unspecified extended session when it is launched and automatically request a SaveDate session when it is suspended. This provides a far more WPF-like life-cycle to an app. More importantly, this does not short circuit the nature of UWP since extended session still takes into account user behavior and system resources based on internal heuristics the developer cannot manipulate. \nAnd that's how it works. . Wrong branch.. K, all done.. Got it. Let's get going.. Nice and tidy.. Remember that MANY transitions have properties.. Re-casting is the first thing we have to do every single time. This method is used in one place, only: ViewModel.OnNavigatedTo where we use methods like GoForward() and Refresh() which are only visible in the Platform version of this interface. The developer doesn't have a practical need for this interface.. ",
    "briandunnington": "Just to add some additional info: Even with [Bindable], you will still get a Catastrophic Failure exception if you try to debug your unit tests. However, although the Catastrophic Failure exception is thrown, it is not fatal. In fact, if you turn off 'Break when this exception type is user-unhandled', the unit test app will continue to run and the tests can be debugged as normal (and the test runner does not hang and can be re-ran without relaunching VS). Any code in the app-under-test's constructor does not get executed due to the exception, but this at least helped me debug some tests that were self-contained. Still not sure of the root cause (I know the Prism team said that UWP testing in this manner is not supported at the moment, but VS does support it and it works for apps that dont use a custom Application class, so there must be some way to get it to work).. I know it is not super helpful to post just to say 'Thank You', but thank you! Even just the ability to create our own frame without having to copy the entire base class into our own project is a huge win for us. Great to see this all get addressed.\n. ",
    "isvaljek": "That was it, thank you.\nCan you give just one more direction, I'm trying to migrate an app from Prism 5 to 6, but can't seem to find the nuget package called Prism.Windows.\nIs it the only way to include the source project into mine?\n. @briannoyes But then where do i point the xmlns:prism namespace to get to ViewModelLocator.AutoWireViewModel?\n. To me this didn't work but this did: xmlns:prism=\"http://www.codeplex.com/prism\". But now I can't seem to find the replacement for SetProperty, \n. The SetProperty is still in BindableBase, someone told me it's not necessary any more, so i removed it.\n. Thanks, I was missing the xmlns:i=\"clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity\"\n. Does that mean I only need to define a VM constructor that accepts the EventAggregator and it will automagically be passed along (no need for literal pass)?\nAlso, I have one ViewModel that already has two parameters, how can I squeeze in this third?\nThanks.\n. Is the PubSub the right thing for the app if I have a three level hierarchy of views/viewmodels and only want to get an object property of the top level ViewModel to be shared/accessible between ViewModels?\n. But what if the 'lower' View/Viewmodels are created dynamically? When the top level viewmodel changes the state and that raises an event, the lower level viewmodels won't receive it (since they don't exist yet), right?\nI'm a bit lost here, maybe too much php/javascript lately, can you suggest some good reading on Prism 6 (that has sharing/dependency injection covered)?\n. ",
    "DashPriyabrata": "The similar kind of problem faced by me lately and I fixed by using the following workaround.\n1 - As you mentioned the Flyout always takes DataContext of the the control from where it's called which means it no more is bound to the actual ViewModel you are expecting it to attached to.\n2 - Since this behaviour of Flyout comes from Framework level, nothing much is under our control. Thus the best solution to this problem would instruct the Flyout to use the actual ViewModel we have intended it to use.\n3 - And the best way of doing this is by following this approach:\n\n\nRefer the namespace of the viewmodel in XAML header. e.g.- xmlns:vm=\"using:SampleProject.ViewModels\"\n\n\nInside the Flyout set the parent container(Grid/Panel)'s DataContext to the context(ViewModel) you are intending the Flyout to use. For example in my case under the Flyout, \"Grid\" is the parent container, thus I set DataContext of the grid to the intended ViewModel like this - DataContext=\"{Binding UI.MainPage, Source={StaticResource DataBindings}}\"\n\n\nI'm not too sure but I guess the DataContext also can be set in code behind.\n\n\nThat's it. This is how I made it work. May be someone will get benefit from this and may be soon Microsoft will approach this issue we all are facing. \n. ",
    "droyiii": "I'm seeing this issue as well.\nerror MT2001: Could not link assemblies. Reason: Can't not find the nested type '<System.Windows.Input.ICommand.Execute>d__4' in 'Prism.Commands.DelegateCommandBase\nWorks in the simulator but not when compiling for the device.\n. This is related to the latest stable release from Xamarin for iOS 9.  See link here\nhttp://forums.xamarin.com/discussion/50971/stable-release-xamarin-ios-9-0-ios-9-0-upstream-release/p1\nunder known issues 33124.  It can affect linking to any library compiled using vs2013 and async. \n. They say by the end of the week.  You can request access to it sooner if needed.\n. The release is now available as a stable update.  I've tested it and it seems to resolve the issue.  I can now compile and deploy to an iOS device without issue\n. ",
    "tstephansen": "This is just my opinion but I wouldn't like the bootstrapper to automatically call Application.Current.MainWindow.Show(). I use a separate bootstrapper that is identical to my application's bootstrapper with the exception of this method for unit testing and I don't want it to create a window. If I'm misguided here (this is probably not the best practice) please ignore my comment.\n. Works great. Thank you!\n. ",
    "onovotny": "Are the current nuspec files checked in anywhere? I took a quick look but didn't see any - might have missed them though.\nYou mentioned two packages with some overlap of what's in them - that's the part that's confusing me right now. What are the packages, what's in them and what's the potential overlap?\n. Okay, starting to make sense now. It sounds like those should be independent packages with their own nuspecs - and you're right, you'd want to filter out the others from your packaging.\nAs to having the reference generator adding Prism.Windows to Prism.Unity.Windows, it can't currently do that. It has no way to know/detect what package that reference will ultimately reside in. It should pick up the Unity and Common Service Locator packages correctly though.\nThe nuspecs in your fork seem ok. As to the files, you probably need something like this in your nuspec:\nhttps://github.com/xunit/devices.xunit/blob/master/src/xunit.runner.devices.nuspec#L78-L82\n. ",
    "Blackjack92": "thx\n. As ioc container mef is used and the problem is, that the mefExtensions are obsolete\n. I already used the MEF package and removed the Unity package but it is still crashing.\n. At the moment I did some changes, so that I don't get any error. But the binding of the different Views does not work, so all regions are empty.\nWhat I did:\n1) I removed all deprecated packages + Installed new packages\n2) I fixed all usings to the right namespaces\n3) Tests were not fixed but uncommented\n4) In the Bootstrapper and the  AutoPopulateExportedViewsBehavior were the following changes done:\n```\n  protected override Prism.Regions.IRegionBehaviorFactory ConfigureDefaultRegionBehaviors()\n        {\n            var factory = base.ConfigureDefaultRegionBehaviors();\n        factory.AddIfMissing(\"AutoPopulateExportedViewsBehavior\", typeof(AutoPopulateExportedViewsBehavior));\n\n        return factory;\n    }\n\n```\nUsed the Prism.Regions.RegionBehavior in the AutoPopulateExportedViewsBehavior instead of the Microsoft.Practices.\n. No sry that was another Project. \nI took the stock example, which used the depricated MEF package with MEFExtensions. Then I removed the depricated packages and added the prism 6 packages. \n. https://msdn.microsoft.com/en-us/library/gg430879(v=pandp.40).aspx \nThe Stock Trader Reference Implementation.\n. Have you also replaced the depricated packages with the new one? :)\nWould it be possible that you send me the example with the new packages?\n. Okay thank you very much, I will try it!\n. This one, http://prismribbonregionadapter.codeplex.com/\nIn the bootstrapper the RegionAdapterMappings should be changed like this\n```\n    protected override RegionAdapterMappings ConfigureRegionAdapterMappings()\n        {\n            var mappings = base.ConfigureRegionAdapterMappings();\n        mappings.RegisterMapping(typeof(Ribbon), ServiceLocator.Current.GetInstance<RibbonRegionAdapter>());\n        return mappings;\n    }\n\n```\nbut it does not work because the RegisterMapping expects a Prism.Regions.IRegionAdapter and the RibbonRegionAdapter does implement the old one Microsoft.Practices.Prism.Regions.IRegionAdapter.\nAh sorry so you have nothing to do with this one.\n. ",
    "HansKrJensrud": "Yes, this was the solution using Prism 5 if you wanted both the View and ViewModel in the same folder/ namespace. This will probably work regarding the issue above as well. I hoped for something even easier if possible, but I'll look into it. Thanks!\n. Thanks! It was something like the Register method I was looking for.\n. Thanks for great comments and support, and confirmation that this should work. It was a \"null\" error, and I'm no sure it is caused by something else. Back to debugging!\n. Agree, StackOverflow is great!\nFra: Bart Lannoeye [mailto:notifications@github.com] \nSendt: onsdag 7. oktober 2015 23.48\nTil: PrismLibrary/Prism Prism@noreply.github.com\nEmne: Re: [Prism] How should we provide general support? (#190)\n-   StackOverflow is the default go-to for many developers. It already has quite some Prism questions and people answering them. Sometimes the quality of 'questions' is abominable, but guess that can happen everywhere.\n-   A forum can be useful, but I'm hesitant if people will find it.\n-   I don't think GitHub issues are the place for general support. There's a difference between bugs or suggestions which both improve Prism, and general questions where we help people out.\nI don't know Gitter, but it looks more like some sort of chat? What's the difference with Slack except for Markdown support?\nSo I got a slight preference for StackOverflow.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/PrismLibrary/Prism/issues/190#issuecomment-146342825 .  https://github.com/notifications/beacon/AMDZPbuIVh80mDzGvAUVXhJX8_Gq65qEks5o5YqigaJpZM4GK5vI.gif \n. ",
    "CuteGridView": "I tried to save ScrollViewer\u2019s scroll position using code from this blog post http://www.davidbritch.com/2014/03/capturing-and-setting-scrollviewers.html . The problem is that it does not restore correctly, after restoring scroll position is around 160 effective pixels higher than it should be. Is there a recommended prism way of saving scroll position?\n. ",
    "abdullahbamusa": "Yes please add this property. CenterOverAssociatedObject doesn't work as expected, at least in my case, where controls flow direction is from right to left. Beside that StartupLocation is how Windows handle its windows and dialogs, so let is stop reinventing the wheel.\n. ",
    "hameedfs": "I do have my view models in a separate class library. The problem is this - Prism's ViewModelBase base is defined in Prism.Windows project, a Universal Windows class library. The class library containing my view models should also be Universal Windows class library for referring to Prism.Windows (this is a restriction by VS2015). Unit tests for my view models need to be created in Universal Windows unit test app project - it cannot be a regular unit test project. Universal Windows unit test app projects have limitations like we cannot use regular mocking frameworks like Microsoft Fakes or Moq, we cannot get code coverage, etc.\nThe problem can be resolved if ViewModelBase and the related components are moved out of Prism.Windows project to a portable class library targeting .Net & Windows (similar to Prism.csproj). If that is done, my project containing the view models can be a portable class library and the unit tests can be in a regular unit test project that does not have the mocking and code coverage restrictions.\n. ",
    "ruisebastiao": "+1 for StackOverflow\n. ",
    "bzuillsmith": "There are also options to use markdown in your own website. markdown-js is one of them. There are more. So you can start in GitHub and transfer files to your own site down the road. However, GitHub is an excellent place to host documentation and has the added benefit of being easy for the community to contribute.\n. Of course I find it on the very next search I make... Unity apparently needs the module to register the view like so _container.RegisterType<object, HelloWorldView>(\"HelloWorldView\");.\n. Interesting, what container class/interface is that? I've been using IUnityContainer.\n. Doh, right. Just needed the proper namespace. Found it. Looks like the default value was recently fixed and not in the published version though. Thanks!\n. This has no effect. Further, I don't want all regions to be active like they would be in an ItemsControl. Region has the ability to activate only some regions whereas AllActiveRegion assumes they will all be active all the time.\n. The Adapter is for AvalonDock. Both my CreateRegion implementation and my Adapt implementation are called. Wouldn't that mean they should appear in the RegionManager.Regions list regardless of the rest of the implementation? And yes, I've been looking at the Adapters already in Prism among other related classes.\n. Well, I can write a custom StackPanel adapter without problem so my only guess is that AvalonDock is doing something on initialization that causes problems with putting regions on some of its layout elements. It looks like I have some alternatives to the way I am doing things though. I'll close this for now and reopen if I find anything new that leads me to believe it's a Prism issue.\n. I implemented something like this for my application. I created a WindowNavigationService that would open up a new window, set a localized RegionManager to the window, and it also set a localized WindowManager to the window. This WindowManager would could be given to anything that implemented IWindowNavigationAware and allowed a view model in the window to call WindowManager.ShowDialog(parameters) and WindowManager.GoBack(optional object) ( GoBack is for closing the current window the that view model was open in).\nMy WindowNavigationService keeps track of the windows opened and their associated WindowManager so that it knows which window to close based on the WindowManager instance that called GoBack().\nFor things like the window size, I used attached properties on the injected view that I can grab during the Window.SourceIntialized event and apply sizing to the window. That helps keep view things in the XAML. I also try to set the WindowStartupLocation in SourceInitialized but I can't recall if that works properly.\nLet me know if you'd be interested in looking at some of the code, I could probably throw it in simple project\n. I don't handle that, no. All we needed was a single generic Window to throw content into so I haven't made it flexible in that way. I imagine if you need different window types, you'd have to start registering them ahead of time which my application currently doesn't do.. I'll see if I can get a cleaned up sample this evening or weekend into a repository.. Here is rough sample of what we are doing right now in our application. https://github.com/bzuillsmith/PrismWindowNavExample. Gotcha, sorry about that. I saw the other issues marked with the question labels and thought it was appropriate. Will Region.Add take a view URI or something other than the instantiated view object? The comments for the parameter are not clear. I'll take a deeper look at it though, thanks.. ",
    "trickyvail": "Thank you very much for your help. I have created a new solution and things are working as expected.\n. ",
    "Mykezero": "I'll be working on formatting chapter 4 next.\n. @brianlagunas Alright, I've updated CH3 to remove the C# tags and to include the class hierarchy image. \n. Thanks for the heads up; I'll check to see if all the content was copied over correctly. \n. ",
    "samburovkv": "Finished: 70-CommunicatingBetweenLooselyCoupledComponents.md\nFinished: 50-ComposingtheUserInterface.md\nFinished: 45-AdvancedMVVMScenarios.md\nFinished: AppendixI-PrismWPFClickOnceDeploymentHOL.md\nEDIT: completed with #237, #239, #240, #247\n. At the current time we have no plans to create new versions of the library for Silverlight or for Windows 8/8.1/WP8.1. I can help. Please send me email\n. @runceel your code similar this:\ncs\nprotected override Task OnLaunchApplicationAsync(LaunchActivatedEventArgs args)\n{\n    if(args.PreviousExecutionState == ApplicationExecutionState.Terminated)\n    {\n        ... // your behavior\n    }\n}\n. @runceel and this is\ncs\nprotected override void OnLaunched(LaunchActivatedEventArgs args)\n{\n    base.OnLaunched(args);\n    if (args.PreviousExecutionState == ApplicationExecutionState.Terminated)\n    {\n        ...\n    }\n}\n. ",
    "codemonkey1337": "I'm building against .Net Framework 4.5.2 (On Windows 8.1). Everything works fine with VS 2013. But with VS 2015, I get the design time error stated above. It's very annoying, and completely disables all design time support for my views (that uses InteractionReguestTrigger). I was able to recreate it in a simple project too, that you can download from here: http://filenurse.com/download/ed76267337b258a491159af8d43fcb40.html\nI have not tried a assembly redirect, and I'm not sure what I would redirect?\n. I took me some time, but I finally realized that something must be wrong with my VS 2015 installation. I tried my sample project on a few other computers, and it worked on those. So I dug around the references and other stuff and tried to see if I could find what was missing/broken, but I eventually gave up and reinstalled VS 2015. On voila, now it works. So, the issue must have been with some kind of plugin or other extension to VS 2015 that caused this very bizarre behavior. Sorry to have taken up your time with this, but hopefully it might help someone else having the same problem (there are more, I found a few similar cases when googling).\n. I can add that before reinstalling VS 2015, I downloaded the sources for Prism and recompiled them on my machine, and used those binaries in my project. That made no difference, so I'm quite confident that the problem is outside of the Prism library and more related to the local installation of VS 2015. \nAfter reinstalling VS 2015, I noticed that the dates on the folder \"C:\\Program Files (x86)\\Microsoft SDKs\\Expression\\Blend.NETFramework\" had changed (and sub folders), so perhaps it is those files that somehow was not working correctly before reinstalling. \nAll I know for sure is that reinstalling VS 2015 on my machine solved the problem. Good luck!\n. I agree Brian, and I can add that on my machine the problem has not reappeared a single time since reinstalling VS 2015.\n. Sam, my first inclination was to try \"repair\". But for some reason that option didn't present itself, so the choice was easy; I had to uninstall/reinstall (it took a few hours, which was a bummer. And you can't even run VS 2013 during this, it won't start as long as the installation is in progress). \n. I regretted not trying that before reinstalling! Thanks for the information, now we know what to do when/if this appears again. Or perhaps we should pinpoint the exact files that differs? :-)\n. Enhakiel's comment has a slightly miss-spelled path: The correct command is:\ngacutil -i \"C:\\Program Files (x86)\\Microsoft SDKs\\Expression\\Blend\\.NETFramework\\v4.5\\Libraries\\System.Windows.Interactivity.dll\"\nAnd that actually just worked on my current computer running the latest prism libraries and VS 2017.. ",
    "SamJongenelen": "Me and 2 out of 3 members of our team have the same issue. \nXAML\n<i:Interaction.Triggers>\n        <prism:InteractionRequestTrigger SourceObject=\"{Binding ConfirmActionRequest}\">\n            <ex:EditorPopupWindowAction IsModal=\"True\" CenterOverAssociatedObject=\"True\" Icon=\"..\\..\\Logo.png\" ResizeMode=\"NoResize\" />\n        </prism:InteractionRequestTrigger>\n        <prism:InteractionRequestTrigger SourceObject=\"{Binding MessageRequest}\">\n            <ex:EditorPopupWindowAction IsModal=\"True\" CenterOverAssociatedObject=\"True\" Icon=\"..\\..\\Logo.png\" ResizeMode=\"NoResize\" />\n        </prism:InteractionRequestTrigger>\n    </i:Interaction.Triggers>\nThe first time the XAML is opened, the designer displays correctly. Closing and re-opening the view (a usercontrol in my application) kills the designer again. \nThe following then appears in my VS2015's Error List:\nSeverity    Code    Description Project File    Line\nError       The type 'EditorPopupWindowAction' from assembly 'Comparn.Program.Editor.Common' is built with an older version of the Blend SDK, and is not supported in a Windows Presentation Framework 4 project.   Company.Program.Editor  C:\\SOURCES\\Company\\Company.Program\\Company.Program.Editor\\Views\\Editors\\TableEditor.xaml    18\nError       The local property \"Actions\" can only be applied to types that are derived from \"TriggerBase\".  Company.Program.Editor  C:\\SOURCES\\Company\\Company.Program\\Company.Program.Editor\\Views\\Editors\\TableEditor.xaml    14\nError       The type 'InteractionRequestTrigger' from assembly 'Prism.Wpf' is built with an older version of the Blend SDK, and is not supported in a Windows Presentation Framework 4 project. Company.Program.Editor  C:\\SOURCES\\Company\\Company.Program\\Company.Program.Editor\\Views\\Editors\\TableEditor.xaml    14\nError       The local property \"SourceObject\" can only be applied to types that are derived from \"EventTriggerBase\".    Company.Program.Editor  C:\\SOURCES\\Company\\Company.Program\\Company.Program.Editor\\Views\\Editors\\TableEditor.xaml    14\nError       The type 'EditorPopupWindowAction' from assembly 'Company.Program.Editor.Common' is built with an older version of the Blend SDK, and is not supported in a Windows Presentation Framework 4 project.   Company.Program.Editor  C:\\SOURCES\\Company\\Company.Program\\Company.Program.Editor\\Views\\Editors\\TableEditor.xaml    15\nError       The local property \"Actions\" can only be applied to types that are derived from \"TriggerBase\".  Company.Program.Editor  C:\\SOURCES\\Company\\Company.Program\\Company.Program.Editor\\Views\\Editors\\TableEditor.xaml    17\nError       The type 'InteractionRequestTrigger' from assembly 'Prism.Wpf' is built with an older version of the Blend SDK, and is not supported in a Windows Presentation Framework 4 project. Company.Program.Editor  C:\\SOURCES\\Company\\Company.Program\\Company.Program.Editor\\Views\\Editors\\TableEditor.xaml    17\nError       The local property \"SourceObject\" can only be applied to types that are derived from \"EventTriggerBase\".    Company.Program.Editor  C:\\SOURCES\\Company\\Company.Program\\Company.Program.Editor\\Views\\Editors\\TableEditor.xaml    17\nPerhaps this is something that can be fixed in the NuGet package?\n. question; did you fully uninstall/reinstall, or do you recon that 'repair' could work as well?\nI'm gonna try copying the VS Blend application files from my colleagues' PC to mine first. :+1: \n. I can confirm a Visual Studio 'repair' did not resolve my issue.\nHowever, copying the contents of c:\\Program Files (x86)\\Microsoft SDKs\\Expression\\Blend.NETFramework (from working colleague PC) to my PC resolved it!\n. Good find indeed! Did you ask ms support about this? I feel I might if I have the time for it \n. ",
    "dlurton": "Having the same issue--tried re-installing VS 2015...  No dice.  Tried replacing the contents of the folder mentioned by SamJongenelen with the contents from a colleage (though I can't be certain if he's having the issue or not because he's not doing any WPF dev currently).  No dice.  Googled deeply and found this:  https://connect.microsoft.com/VisualStudio/feedback/details/755407/xaml-designer-will-not-display-when-using-blend-sdk-behaviors#\nIt's \"closed\" but indicates that it's being looked at internally.  Wonder if this is the same issue?\n. ",
    "Arnie38": "Hey guys. I've been working with MS support on this one (off and on) since January '2016. It does appear that the MS installer does not properly register/update blend dll versions in the GAC. There is a workaround on that connect site link that suggests re-registering them with the gacutil tool and then everything works. It seemed to work for me. Not sure why re-installing fixes everything if it's the installer that's not doing something quite right. \nAll I know is that everything worked perfect in VS2013. When I upgraded to VS2015 Update 2 any time a xaml page had an expression blend type in it the designer would break. But re-registering the blend dlls from their latest install dir into the gac seemed to fixed everything.\nI believe Microsoft still has a bug on their hands and need to fix it.\nIf you guys don't mind going to this connect site link to up vote and comment on it that would be great.\nIn the meantime I continue to work with MS support to read their own connect site submission on this and take ownership :(\nhttps://connect.microsoft.com/VisualStudio/feedback/details/755407/xaml-designer-will-not-display-when-using-blend-sdk-behaviors#\n. +1 for Enhakiel's comment. It was something I was suggesting in my earlier post. I can confirm if you just GAC the expression dlls everything works fine. The VS designer must be looking for the GAC version of them; without it the designer gets confused. I'm still not sure why re-installing VS would fix things unless they updated the install to appropriately install/GAC the version 4.5 of Expression runtime. \n. ",
    "uckuper": "My apologies folks. This is a key component for WPF, but its implementation is a travesty. I\u2019ve had all sorts of issues as other users have in VS 2015 and in 2013 with these components causing markup errors in XAML. The ViewModelLocator works, but breaks the IDE and so do InteractionRequestTrigger, PopupWindowAction, and it\u2019s just a mess. To make things worse, all the namespaces changed drastically from the previous version and my attempt to upgrade from the limping 4.1 to version 5 wasted 2 days of development. It actually introduced more headaches and the refactoring to the new assemblies was a reminder of the old days of COM DLL Hell. I thought those days were over. But apparently they are alive and well in the Prism library. Forgive me for being so negative, but this component has been one of the greatest headaches and disappointments in my 14 years of .NET. Its only saving grace as far as I can tell is Commands and BindableBase. The rest is just one problem after the next. Even the sample code comes up with the same errors. I understand some folks have had no problems with it. But the big issue here is the lack of consideration for backward compatibility such that these problems would not happen when the assemblies are used in systems with various configurations. In version 6, please consolidate all assemblies into fewer ones. It is not nice to have to have 4 separate xmlns declarations in your XAML to make this work.\n. Brian. I sincerely thank you very much for your clarification.Please don't take it personal. I appreciate the efforts of those that contributed to this project. Obviously I am frustrated with this. I am inclined to accept that I am misinformed, but part of the issue is that it is hard to determine which is the right Prism to use. If I go to Package Manager and type in Prism, a very large list of components come up. Which is the \"right\" one? When this question comes up, I will usually go for the official Microsoft or Patterns and Practices version, which is what I did. And I will say this in my defense. I downloaded the source code to see if I could more easily navigate through the mechanisms at play, and in my environment, the project generates 33 warnings, some of which are inconsequential, but there are lots that warn about the use of obsolete classes. So this gave me a bad feeling about the state of this component. The samples provided also break the designer in my VS 2015 Update 2.\nBreaking the designer is definitely its worst offense. I have a project I started a few years back, and from the initial stage, Prism was causing problems on the designer on VS 2012 and then VS 2013. I just got an opportunity to continue on this project, which has been dormant for a while, and things just got worse.  Here we are years later and the newer versions of VS 2015 and Prism still can't play nice. \nForgive me for getting verbose, but as a point of reference for the contributors of this project, I recently for the first time had to take a peek at iOS development environment on a Mac, even though I have been strictly a Microsoft developer and defender, mostly because of the superiority of C# as a language (compared to Objective C), solid performance and .NET's powerful libraries. But I am noticing that in XCode it is stupidly easy to hook up the equivalent of Commands, Interactions, View-Model wire-up, and so forth. It is build in. You don't even have to look at a single line of XML. It's all done through dragging gestures, property pages and IDE functions that correct inconsistencies just by clicking a button. And much to my disappointment, on the MS side, Prism requires all sorts of careful cajoling to get things to work, and then again you have to trust the XAML because the designer stops working. \nIn summary, I would hope this project gets to a point where it is closer to what Apple has achieved, and you can use a more graphical approach (as in Blend or XCode) to build an MVVM architecture. Even if the graphical approach cannot be achieved 100%, I would hope this stuff would just work in the designer. I don't know what the relationship is between Microsoft and the community that has taken over this project, but I would hope there is some way to stop pointing fingers and get Microsoft to respond to the issues and work with the community to get such an important component to work harmoniously with the IDE. It is sad that Microsoft has dedicated such thin support to desktop app development. They have built a great mechanism for MVC in ASP.NET, which I have used repeatedly, but they have abandoned WPF when it comes to MVC or MVVM. \nCan you please advise as to what is the best approach for my project? Do you think I would have to spend another couple of days fixing things if I update to version 6 from this group's library?\nThank you and sorry for the negativity. WPF is a great platform, and Prism is the missing link to make it awesome. It is now somewhat broken, and therefore the frustration.\n. Hey Brian. I accept your criticism. Like I said, it comes from my frustration. You are right, the two things you mentioned are the ones I considered \"broken\". Interactivity and ViewModelLocator. \nI would only like to clarify my statements about the iOS development environment if I may because I think it does have relevance in the sense that it could be a good model for further work on Prism. The iOS IDE for generating iOS apps is based also on an MVVM model. I believe they label it MVC. All the functions that Prism brings to the table are integrated into the XCode IDE. Every view has a view-model that serves as the controller, so it's very similar. They also support dependency injection through a model binder, as well as the equivalents of commands, interactions, etc. The difference is how well integrated it is with the IDE. You connect commands by clicking and dragging from the visual control in the designer that should bind to the command, into the view-model source code page. This action automatically generates the necessary code in the view-model to support the command. To do interactions you do something similar by clicking and dragging. Data binding also works this way. You drag from the visual component into the source to create a binding to a property that supports a property_changed event like BindableBase.  I know Prism does not deal with the graphical design part, but it would be nice to aim for this in the future.\nRegarding your invitation to contribute, thank you and it will be my pleasure if I can integrate that into my current project that needs to take high priority. If I find anything wrong that I can fix, I will certainly help out. In the meantime I will try Prism 6, and I thank you very much for your prompt responses and suggestions. Sorry for the rant. I really do appreciate your support.\nCarl\n. @dansiegel We are not in disagreement. I understand that Prism is an application framework and XCode is a development environment and iOS is an OS. Apples and fruit-baskets. Oranges would be too similar.\nI am simply suggesting it wold be nice to have some integration with the Visual Studio IDE via a VS extension that would auto-generate the necessary XAML and model code for you through user interaction with the Visual Studio's WYSIWYG editor (which does work when the XAML markup does not throw errors). In the earlier days of Visual Studio there was always an attempt made to provide design-time functionality to components. This extension would use Prism as the MVVM framework and allow for automatic code generation to wire-up triggers with commands, interactions and navigation via user interaction with the VS design-time environment in a graphical way. \nThis would simplify all the knowledge required to create MVVM applications with Prism. The learning curve would be easier to overcome.\nI offered the XCode IDE as an nice example of how the extension might work. It uses its own Prism-like framework in the background while the IDE generates the XML code and model code for you as you design your views, wire up triggers and write the logic in the model/controller. All done graphically. I understand it is beyond the scope of the current project. (But it would be very nice.)\n. Hi Brian. I did the upgrade to Prism 6.1.0. It was not as painful as before. Had it done in a couple of hours. Of course this time I knew what packages to use and what to look for, and thank you for consolidating those namespaces into fewer assemblies. That made a lot of difference. Thanks again.\n. ",
    "Enhakiel": "A quicker way to solve it, rather than reinstall visual studio :\ngacutil -i \"C:\\Program Files (x86)\\Microsoft SDKs\\Expression\\Blend.NETFramework\\v4.5\\Libraries\\System.Windows.Interactivity.dll\"\n. ",
    "typescripter": "+1 for Enhakiel's comment. This worked for me also. Thank you.\n. ",
    "alewis-github": "Just thought I'd add a comment here as I came across this thread searching for solutions to the same error message, even though I'm not using Prism and I'm using VS2017.\nThe problem began after downgrading my WPF project from .Net 4.6.2 to .Net 4.6.1 (because most of the users had 4.6.1 installed and the Admin install of 4.6.2 was getting tedious).\nThe rebuild/redistribution was fine, but as soon as I came to make a change in one of the code-behind files, everything broke with these weird \"local property X can only be applied to types that are derived from Y\". Which is odd since what's happening in every case is the xaml is instantiating a Type Y, so where else is it deriving anything from?\nI'm still stuck, but the issue is certainly not confined to Prism.\nAde. ",
    "WillEllis": "Thanks, raised it here \nhttp://stackoverflow.com/questions/33084401/raising-interactionrequests-when-compositecommand-fired-wpf-prism\n. ",
    "bbrandt": "In HandleModuleTypeLoadingError we wrap an exception in a new ModuleTypeLoadingException.  When we call this.loggerFacade.Log(moduleTypeLoadingException.Message, Category.Exception, Priority.High); the message from the inner exception gets logged, but we miss out on the inner exception callstack.\nI actually don't have a specific case where I need this at the moment, so to avoid the headache for everyone I'm going to just close this pull request for now.  I apologize for not giving more specifics when opening the request.  Thanks for your time and consideration!\n. ",
    "appel1": "Thanks. Thought I had included closed issues in my search but apparently not. \n. ",
    "chuseman": "Shuffled my local branches, closing this PR.\n. Let's pretend #227 didn't happen :)\nI wasn't aware of Window.GetWindow(), so I've updated to use that in #230. I didn't want to change behavior on people so that's why I added the property to enable this behavior of setting the Owner. I can't imagine where you wouldn't want to do this though so maybe it is safe to always do it?\nI think setting WindowStartupLocation is valuable because you may want to center to the owner window or screen instead of the view of the associated object. I'd use WindowStyle to accomplish this, if it were possible.\n. The WindowStartupLocation property isn't a dependency property. There's a warning from ReSharper and and I get an exception at runtime when I've got it set.\n. To be clear, I don't have a problem with how CenterOverAssociatedObject works. I just thought it made sense to use the built-in property of a Window in conjunction with setting up its Owner. Modal windows are broken without setting up the Owner property as it is.\n. ",
    "RafaelPlantard": "I realize this right now.\nThanks @brianlagunas \nI will try out it.\n. ",
    "grhm": "NB. I didn't mark the Xarmin Forms related projects as compliant as the Xarmin Forms dlls themselves are not.\n. ",
    "ConstantinPatak": "Hi Brian,\nThank you for your response.\n. ",
    "Mardaneus86": "I've seen and read the blog post, which is indeed a good starter but fairly limited to really get going since it is a bit outdated as you said. Proper documentation will help a lot to grow the community around Prism.Forms. I'm liking the concepts that I've already discovered.\nThe example of the dependency is working properly. Right now I'm trying to combine it with the navigation example and trying to show dialogs through the INavigationService and IDialogService. I can't seem to get the DialogService working though. I am unsure if this is an issue with the DialogService or that I'm missing some core concept here. This is what I currently have in my ViewModel:\n``` C#\npublic TestPageViewModel (IPageDialogService pageDialogService)\n{\n    _pageDialogService = pageDialogService;\nShowDialogCommand = new DelegateCommand (ShowDialog);\n\n}\nprivate void ShowDialog() {\n    _pageDialogService.DisplayAlert (\"test\", \"test\", \"test\"); //not working\n}\n```\nThe ShowDialog command has been properly bound in the View (it hits the breakpoint). The alert is not shown in this case, without an error. If I make it an async/await call it throws a NullReferenceException on something within the DialogService (the Page variable is set though).\nAny idea what I'm doing wrong?\n. I've been looking into the issue a bit further. It seems that the Page property getter returns a proper object, but the class itself uses a private variable that can be null if Page isn't explicitly set. Since the IPageDialogService is injected just like the INavigationService it has to be aware of the current page it's on.\nI have created a fix in my local copy of Prism.Forms at the UnityBootstrapper class in the ConfigureViewModelLocator method, with the same drawbacks as the INavigationService regarding naming convention.\nShould I open a new issue and create a pull request for this?\n. I'm testing if it causes any issues when using this Page property. Hopefully Unity can add the support that you requested.\nI was thinking that it would be beneficial to have some platform specific Xamarin Forms test projects. This could have 2 benefits. One would be to be able to test everything in the platforms themselves, the other would be to have a showcase for every feature that's added. Because right now I have to create these test projects myself and include the Prism libraries to make sure my solution works properly.\n. Great, I have something locally as well right now (but very limited). I'd be happy to help where possible.\n. I agree that it isn't the best solution. Just tested and changing the backing field to the property works. So it uses Application.Current.MainPage when the backing field is null. My only problem is that I don't understand why the PageDialogService needs the IPageAware interface, so I can't judge which is the better solution. Only thing I can think of is that it is needed is for unit testing purposes, is that correct?\nBecause the Page property from the IPageAware interface is defined as an explicit interface implementation, it can't be used directly without a compilation error. Changing it to a normal interface implementation can fix this issue, don't know if this causes any side effects.\nI'd like to see your view on this, especially if my reasoning about why the IPageAware interface would be needed is correct?\nThanks for the feedback!\n. Okay, I'll remove the IPageAware interface from the PageDialogService implementation then and just use the application mainpage. Will push a new commit soon.\n. Nevermind, I had to use the ToolbarItems property on the Page itself.\n. I gave it a go, please review and adjust where needed.\n. I'd like to help with this. What's the format you're looking for? Markdown?\nAnd where to place it? \n. Oh, didn't notice that. I'll take a look at where I can contribute.\n. ",
    "sprengo": "I have an aggregation class combining constructional parts to an assembly. Some properties of the assembly affect calculated properties of the (sub) parts and vice versa. For example if the length of a part changes the length of the whole assembly should change too because it is calculated from the parts' length's.\n. In fact it is not just an aggregation but a bidirectional composition where the parts have a reference to the assembly, because calculated properties of the parts directly use assembly properties in their calculations.\nFor simplicity reasons in the setter of an assembly property i would just stick with:\nset\n{\n    SetProperty(ref this.assemblyPropertyBackingField, value);\n    PartX.OnPropertyChanged(() => PartX.CalculatedPropertyThatInvolvesThisAssemblyProperty);\n}\nPerhaps this scenario is too specific.\n. ",
    "YipingRuan": "I am happy to do this\n. Which chapter do you prefer?\nDocumentation/WPF/100-ViewModelLocator.md\n?\n. ",
    "Adam--": "I started working on this. For content I was thinking:\n- Overview\n- Prerequisites\n- Background\n  - Xamarin.Forms\n  - MVVM\n- Creating a new solution\n  - Installing and using the Prism Template Pack\n  - Running the app\n  - Views overview\n  - View Models overview\n- Adding a new Page (View) and ViewModel\n- Navigating to your new Page\n- IoC and dependency injection with Unity\n- Displaying a dialog\n- Using the dependency service\n. > I love starting with the Prism Template Pack, but we should also have a section on how to manually set up your project just incase you don't have the Template Pack because you are on an older version of VS.\nInitially I was thinking that it would be best to show how to do it the \"hard way\", creating a project then adding Prism, then showing the easy way with the templates. But then I realized that the \"hard way\" was relying on templates from Xamarin to create the initial solution and figured we might as well use the Prism templates. It looks like the Prism templates support VS2013 and VS2015 and Xamarin supports VS2010 and up, so the VS2010 users would be missing out with this approach.\n\nBe sure to point to the Navigation documentation for more detailed information when you show how to navigate to a new page.\nYou can drop the \"Displaying a dialog\" and \"Using the Dependency Service\" from the Getting started. These are well documented independently.\n\nI've been writing it in a walkthough style and planned on showing just enough to get started and linking to the other documentation for more information.\nhttps://github.com/Adam--/Prism/blob/XF-Documentation/Documentation/Xamarin.Forms/1-GettingStarted.md\n. > The MasterDetail toolbar functions differently between FormsApplicationActivity and FormsAppCompatActivity, but that is not the root of your navigation issue.\nSorry, thought that when navigating from the MasterDetail it was checking to see if the MasterDetail's Detail was a NavigationPage and if so maintaining it and removing the current page from its stack and adding a new one. My buddy demoed what looked to be that behavior with a FormsApplicationActivity and it appeared to be the case since the toolbar seemed to be maintained. I'll ask him to post an example.\nTo get the expected master-detail behavior described, I would expect the code would need to be:\n<MasterDetailPage.Master>\n    <ContentPage Title=\"My MatserDetailPage\">\n      <StackLayout>\n        <Button Text=\"ViewA\" Command=\"{Binding NavigateCommand}\" CommandParameter=\"MyNavigationPage/ViewA?id=A\" />\n        <Button Text=\"ViewB\" Command=\"{Binding NavigateCommand}\" CommandParameter=\"MyNavigationPage/ViewB?id=B\" />\n        <Button Text=\"ViewC\" Command=\"{Binding NavigateCommand}\" CommandParameter=\"MyNavigationPage/ViewC?id=C\" />\n      </StackLayout>\n    </ContentPage>\n  </MasterDetailPage.Master>\nI know it's not meant to be a sample, but maybe the sandbox HelloWorld should be updated or maybe a navigation sample should be provided.\n. For the first code snippet with CommandParameter=\"ViewA?id=A\". I only expected that behavior due to the example of the FormsApplicationActivity shown to me and assumed that behavior would be maintained to FormsAppCompatActivity. Thinking about it though, it doesn't make any sense to expect that behavior in either case. Although, I don't understand why the toolbar is still shown in FormsApplicationActivity when navigating to ContentPage without a NavigationPage.\nFor the second code snippet with CommandParameter=\"MyNavigationPage/ViewA?id=A\" Yes I would do this to keep the toolbar. You wouldn't want to remove visual indication that the navigation drawer is available.\n. One case is when Navigate is called from a MasterDetail VM when the detail is a NavigationPage. The ProcessNavigationForNavigationPage logic seems correct in that case. \nI can't think of any other cases where navigation would occur from the NavigationPage, unless the NavigationPage can define it's own toolbar items and those perform navigation. Even in this case the logic sounds correct.\n\nI am going to research using attached properties to control the NavigationPage scenarios for MasterDetailPages.\n\nSounds helpful.\n. ",
    "odalet": "Thanks!\n. ",
    "weitzhandler": "Any documentation or example on how to use RegisterFrameworkExceptionType and ExceptionExtensions?\nIs this some sort of global exception catcher?\nI tried unsuccessfully to look it up in the docs.. Hi guys, could you please share an example?\nI'm using a TabControl as a named region, when the views are navigated to, the title isn't loaded. Here's what I've tried:\nc#\n<TabControl \n  ...\n  prism:RegionManager.RegionName=\"{x:Static common:Constants.AdminRegion}\">\n  <TabControl.Resources>\n   <Style TargetType=\"{x:Type TabItem}\">\n    <Setter Property=\"Header\" Value=\"{Binding DataContext.Title, Source={RelativeSource Self}}\"/>\n    <!-- OR -->\n    <Setter Property=\"Header\" Value=\"{Binding Title}\"/>\n   </Style>\n </TabControl.Resources>\n</TabControl>. @tiesmaster thanks for sharing, that worked!\nMaybe you can help me with this issue too.. And BTW, maybe there is a way to include some title data in the navigation service journal, so we can show the breadcrumbs etc.\nI'll look into it, but currently tab header is enough for me now.. The issue I'm facing is I need to access a class that's registered in the portable app from the iOS/Android/UWP apps.\nIf I register the class with Container.RegisterType/Instance - it's not added to Xamarin's container.\nNote that I need to access it in the UWP's App class, meaning no constructor resolving available.. Perhaps it's against the rules, but meanwhile that's what I got:\nI'm calling this in the RegisterTypes in the portable:\nServiceLocator.SetLocatorProvider(() => new UnityServiceLocator(Container));\n\nThen in the UWP.App:\npublic IUnityContainer Container => ServiceLocator.Current.GetInstance<IUnityContainer>();\n\nNote sine UWP.App is initialized before Portable.App, one has to ensure he doen't try to resolve the container before it's set.\n. Perhaps it's against the rules, but meanwhile that's what I got:\nI'm calling this in the RegisterTypes in the portable:\nServiceLocator.SetLocatorProvider(() => new UnityServiceLocator(Container));\n\nThen in the UWP.App:\npublic IUnityContainer Container => ServiceLocator.Current.GetInstance<IUnityContainer>();\n\nNote sine UWP.App is initialized before Portable.App, one has to ensure he doen't try to resolve the container before it's set.\n. @brianlagunas Can you please confirm, what's the optimal way of doing this, how do I get the IUnityContainer from PCL in the plat-specific projects, like the above, or this (what I ended up doing):\npublic IUnityContainer Container => ((MyProject.App)Xamarin.Forms.Application.Current).Container;\n\nOr doesn't matter.. My question is how do I resolve types in the platform-specific app after they've been registered in the PCL, not how I register them.\nWhat should be the proper way to resolve the IEventAggregator for example, in the UWP app, after initialization, I'd like to get a reference to it in the UWP/App.xaml.cs App class.. Thank you.\nSince this happens in the local MainPage, how do I set it in the local App (MyProject.UWP.App)?. @brianlagunas \nIn a Xamarin.Forms Prism app I've overridden MainPage.OnDisappearing, but it always gets called when the page loads. Why is that?. @brianlagunas Thanks for your response.\nWill implementing IDestructible or IDisposable on the views and unwire the events be of any help?. I ended up doing something that I think is even better, overriding Destroy in the VM, and removing all handlers from the event:\nc#\npublic event EventHandler TimeLapsed;\npublic override void Destroy()\n{\n  TimeLapsed = null;\n  //foreach (var handler in TimeLapsed.GetInvocationList().Cast<EventHandler>())\n  //  Flash -= handler;\n}. @bartlannoeye \n\nI don't see a .NET Standard support coming before the release of .NETStandard 2.0\n\n@brianlagunas:\n\nNothing will happen until .NETStandard 2.0.\n\nI'm trying to add System.ComponentModel.Annotations but apparently it only supports .NET Standard, not portable. Is there a different solution to allow DataAnnotations in Prism Xarmain.Forms portable apps?\n. @mfe- \nRemovign WP8.1 & Silverlight changing to profile 44 solved the issue.\nBut now I want to install a different package that's on .NET standard 1.3. Can I do so with Xamarin (UWP, Droid, iOS) and Prism?. @dansiegel \n\nthat use a NetStandard1.4\n\nXamarin's released netstandard target version is 1.2, isn't it?. I was talking about profile 44/151, which complies to netstandard 1.2.. I said 'complies'.\nnetstandard 1.0 will be great.. @opcodewriter \n- You can consume the prism library from a netstandard project\n- UWP doesn't support netstandard 2.0 yet\n- Would also vote to reopen. @dansiegel \nI'm using 6.3 from netstandard, so as I said I have no urge for this. Still would be nice to know it's on the radar. And here's my chance to say thanks for the awesome work!. Hi everyone,\nHow about testing async command delegates?\npublic class ViewModel\n{\n  DelegateCommand _DoWorkCommand;\n  public DelegateCommand DoWorkCommand =>\n    _DoWorkCommand ?? (_DoWorkCommand = new DelegateCommand(DoWork));\n  async void DoWork()\n  {\n    await Task.Run(() => Thread.Sleep(5000));\n    WorkDone = true;\n  }\n\n  public bool WorkDone { get; private set; }\n\n  [Fact]\n  public void TestDoWork()\n  {\n    DoWorkCommand.Execute();\n    Assert.True(WorkDone);\n  }\n}\n\nThe assertion fails because assertion happens before the task in DoWork has completed and WorkDone has been set to true.\nAm I wrong calling an async void from my command? Any nice general way to address this?\nPosted question here.. Sorry for not updating here, I've discovered that before, but since this issue, I switched to XF Command which doesn't expose an async invoker, and now I'm eating this $hit.... I'd love to see AsyncCommand incorporated in Prism.\nI use XAML & Prism mostly for LoB apps that relies mostly on client-server data transfer and I'd love to have the commands asynchronous.. After navigating to a page (especially when using ViewModel navigation) how do I access that page the prism way (i.e. not via MainPage.Navigation.ModalStack) - or is that the right way?\nThen, how do I get the ViewModel? Getting it via the BindingContext looks too ugly to me.\nThanks.. Agree,\nSo is there a way to remove a VM from the navigation stack (and in turn removal of its page), or get the VM of type T that is currently in stack / in front?. @brianlagunas \n\nno. That's why this issue exists :)\n\nConsider adding an extension Remove<TViewModel> if implemented.\n. Thanks @brianlagunas for your response.\nI'm now to Xamarin after I haven't touched Xaml and Prism since the Silverlight death days.. Hi Brian and thanks for the detailed response. I do agree with everything you said.\nThanks for sharing that gist! Will you be incorporating it in the main repo?. I'm working on XF project and now need a nuget package that's based on standard 1.3. The only reason I keep Xamarin as PCL is because I'm tied to Prism. Are we gonna see standard support before 2.0?. @brianlagunas really appreciate your kind response, and I'm grateful for all the great effort put into this can't-live-without project!. This issue is starting to become really serious to me. I have a Xamarin PCL and I can't add some libraries that already support .NET Standard because I'm tied to Prism.\n@dansiegel I didn't really understand, is that myget package only templates? Do you have a feed that has the netstandard-supported Prism.* libraries?. @brianlagunas found a PCL version of the lib I was looking for*, thanks for this direction.\nHopefully that clusterf goes to a good end. netstandard is really what should have happen even before uwp, better later than never.. Hi @brianlagunas and thanks for your quick response.\nCert is a reference type. But I thought the problem is not when it's null but rather when it's User, no? \nI don't understand why it's even trying to pass null or User, if the ItemsList is bound to Certs (an ObservableCollection<Cert>), and the current item in the DataTemplate is Cert, when does the ListView item's {Binding} become User/null? Why is this behavior happening?\nCould it be because SelectedUser is initially null and only loaded on demand?\nI reckon the exception I get is thrown in this line when it's unable to convert User to Cert.. Until I figure out why CurrentUser is passed in as the ListView.Items[n]'s Binding , I'm using this class:\npublic class SafeDelegateCommand<T> : DelegateCommand<T>\n{\n  public SafeDelegateCommand(Action<T> executeMethod)\n    : base(executeMethod) { }\n\n  public SafeDelegateCommand(Action<T> executeMethod, Func<T, bool> canExecuteMethod)\n    : base(executeMethod, canExecuteMethod) { }\n\n  protected override bool CanExecute(object parameter) =>\n    (parameter is null || parameter is T) && CanExecute((T)parameter);\n}\n\nThat does the job for me. If it goes wrong, I should see the disabled command button (which I don't).. Just for the reference, I am suspecting it's caused for the theory I mentioned before, that is the SelectedUser is initially null and is loaded at a later stage on demand after rendering completed, so all the inner properties (i.e. SelectedUser.Certs) would be null, thus causing the bound contexts to be null, so when the parent's BindingContext changes to non-null, all the subsequent BindingContext properties are set to the upper BindingContext and only then to the subsequent property. Could be I'm right?. I am pretty certain it happens because of Xamarin updating the BindingContext gradually until it gets to the proper inner property.\nI'm unsure this is the desired design by Xamarin but this is how it works and we have to deal with it. Question is doesn't it make our InvalidCastException redundant and troublesome?. @brianlagunas \nApparently XF treats wrong parameters in a similar but a bit more efficient way to what I suggested. It calls this method to verify the argument is the proper type, and is ignore if not.\nBut I was also wrong. The InvalidCastException thrown by Prism.dll, isn't coming from this line as I initially suspected. It's an uncaught exception that occurs here, when trying to convert the argument to T, when the binding has not yet became T.. @dvorn \nNo as I have already explained, I don't have incorrect bindings. It's just the BindingContext is populated with a sub-property (e.g. BindingContext.SomeProperty) at a later stage, so until the main context is populate along its properties and children, the underlying BindingContext (i.e. the BindingContext of all the descendants in the tree) refers to the parent BindingContext, not the property path.\nI beg you to read my previous comments. I wish the problem is elsewhere easier to tackle.. > And this is not the right place to discuss bindings. Maybe StackOverflow or Xamarin forums is a better place.\nwhatever. > And this is not the right place to discuss bindings. Maybe StackOverflow or Xamarin forums is a better place.\nwhatever. Just for the reference I now debugged a custom control nested in several layers with BindingContext set to some inner properties:\n<StackLayout BindingContext=\"{Binding Person}\">\n  <StackLayout BindingContext=\"{Binding Address}\">\n    <my:CustomControl BindingContext=\"{Binding Zip}\">\n  </StackLayout>\n</StackLayout>\n\nThe custom control's OnBindingContextChanged was raised several times each having the element's BindingContext a deeper level, but first has been set with the outer BindingContext.\nWhether Xamarin should have worked this way or not, is a different question, but it does currently work this way, and Prism's DelegateCommand<T> can't deal with it.\nI already gave up with this issue and changed all the DelegateCommand in my project to Command, but I'm just saying now, after debugging and confirming this, that I thought Prism is a means to work against XF, not the other way around.\nTo remind you, that:\n1. Xamarin itself designed its Command to deal with this appropriately.\n2. We're not allowing the command to run, we're just pre-filtering before even asking the CanExecute method.\n3. Prism should swallow this exception, if it's supposed to support the way XF was designed.\n4. Maybe there is a way to determine whether the BindingContext has reached its final destination, only then should the exception be legit, but since the command doesn't have a way to check that, indeed a type filter must be applied before the CanExecute is called.\n5. If the user insists in getting lower data-level he can lower the command parameter to object or any lower type.\nIf you happen to know someone from Xamarin (which I believe you do), I'd love to hear from you. Maybe just reconsider checking this deeper.. I thought the code for XF's DelegateCommand isn't shared. Now it is you're absolutely right. I hope they fix this. This is annoying in plenty other aspects.\nAnd there is not even a way to determine if the bindable has reached its final BindingContext value!. @dansiegel \nReading your post (thank you so much for the great effort and awesome work!), I just discovered about the ObserveProperty and ObserveCanExecute, never new about these amazing functions!\nAnyway, the reason I stick to Xamarin's Command is because of this closed issue. I hate using anything Xamarin-related in my VMs but I have no choice.\nCan you please take a look at it?. @brianlagunas  (read below, please)\nOr use this patch.\nAnd I keep wondering, if Prism has put so much effort into being Xamarin friendly why this patch can't become part of the system.\nMaybe we can determine if current environment is Xamarin base using a processor directive, and only safe-checking for the argument type?\nnamespace Prism.Commands\n{\n  public class SafeDelegateCommand<T> : DelegateCommand<T>\n  {\n    public SafeDelegateCommand(Action<T> executeMethod)\n      : base(executeMethod) { }\n\n    public SafeDelegateCommand(Action<T> executeMethod, Func<T, bool> canExecuteMethod)\n      : base(executeMethod, canExecuteMethod) { }\n\n    protected override void Execute(object parameter) => base.Execute(parameter);\n\n    protected override bool CanExecute(object parameter) =>\n      parameter is T arg && CanExecute(arg);\n  }\n}\n\nBut then, it's impossible to use the observe functions smoothly because you can't declare the member and property assigned by the command as SafeDelegateCommand but only DelegateCommand, so the function returns the matching type.\nAnd even worse, the InvalidCastException provides no stack trace at all, but a single line saying it's related to a Prism command! One of the most time-consuming and frustrating exception any developer using prism is going to encounter.\nI'm begging you to please address this issue, or at least make this obsolete or include some remarks etc.. DelegateCommand is unusable with nested properties.\nPlease warn about this in the remarks, so people don't pull out their hair of frustration trying to figure out this annoying issue.. As I explained above, when you set a BindingContext to a nested property, or when nesting two controls with an inner depending BindingContext (i.e. the inner control's BindingContext is bound to a property in the parent's BindingContext), Xamarin will first set up all the children's BindingContext to the parent context, then gradually walk in and update to the appropriate context. This behavior leads to a failure in the command, and as said earlier, even XF themselves have their Command checking the parameter like that to avoid this frustrating exception.\nIf one of the target technologies in Prism's buffet is XF, Prism should respect that quirk in Xamarin in order to make its API properly useful in XF.\nI'm curious what @dansiegel has to say about this.... Even if there is a way to determine that the current environment is XF, and even nor as an solution until we find a better way?. I tried two versions for this line. I don't know why my PR is failing maybe because it's C# 7 or I'm not familiar with the Repo's restrictions. It is working on my machine.\nI tried:\nreturn parameter is T arg && CanExecute(arg);\n\nBut also:\nreturn (parameter is null || parameter is T) && CanExecute((T)parameter);\n\nBoth don't work for some reason.. @dvorn argh yep i misstyped it when changing from parameter is T. thanks!. Hi @Brian as per your comment on the issue, I actually agree with you this shouldn't be taken care by Prism.\nThanks for your time.. @dvorn\n\nSecond line does not compile because null is not a type: parameter is null should be parameter == null.\n\nIt compiles in C#7, although perhaps not the welcomed way.. Thanks @dansiegel for your effort.\nWhat netstandard version is it targeting?. That's great.\nWhat's gonna be the recommended DI container? Looks like Unity is not maintained, does it even support netstandard?. ohwow what does that mean? Can we start celebrating netstandard?. So is there a way to 'navigate' to the MainWindow?\nThe reason I want to do this is because I want to call ILoginService.EnsureLogin (provided via IoC).\nAnd I only want to call it when the Window was loaded. Any other things to consider?\nThanks!. Since I can only perform this action when the VM has already been initialized, the only option is the second one, which I don't like so much (because I prefer keeping the code-behind files clean).\nShould you have way in the VM that is post initialization, and I'd love to hear about that!\nThank you very much!. That's what I'm gonna do, thanks!. @brianlagunas \nIs there any progress with XLP for Prism apps?\nPlease see my comment and the bug report too.. Would still be nice to have IDestructible in WPF too, to give us a hint on VM tear-down.. ",
    "rprouse": "My current approach is to derive a new kernel from StandardKernel that resolves from DependencyService if the requested service is not available in the kernel. Does that sound reasonable? Is there a better way?\n. Extending the Kernel does not work. I've been reading through the Ninject source code and that of several extensions, but I don't see how I can extend Ninject to also resolve from DependencyService. I have posted to the Ninject mailing list asking for pointers, hopefully that brings a response.\nWorst case, Prism for Ninject won't support constructor injection for interfaces managed by DependencyService and we document that. It may not be the only IoC container that won't support it.\nI will circle back to this PR once I hear back from the mailing list. Whatever the outcome, I will clean up the code and get it ready to merge.\n. I figured it out. They key was the interface IMissingBindingResolver. Once I found that, everything fell into place. This code is now functionally equivalent to the Unity version and I believe it is ready to merge\nI don't think this needs much documentation. It works exactly the same as the Unity version except you derive from NinjectBootstrapper and it has a Kernel instead of a Container.\nTo test the use of DependencyService with Unity and Ninject, I added to the HelloWorld project to register platform specific classes using DependencyService and injected the interface into the constructor for the main view model and then used it in the UI.\nI will go through the changes and add comments to help with the code review if any are necessary. If you have any questions or want additional changes, just let me know.\n. Everything above this is just standard File > New > Xamarin Forms App. You can start code reviewing here :smile:\n. This bootstrapper is pretty much the same as the Unity version except it derives from NinjectBootstrapper and uses a Kernel in the Ninject fashion.\n. One of the three platform specific classes to test interop with DependencyService. On the first screen of the app, you should see the platform specific message above the button. Tested with Unity and Ninject.\n. I think this is caused by an update in Xamarin Studio. The packages file below also switched from monodroid5 to monodroid6.\n. INavigationService comes from Unity or Ninject, IMessageService comes from Xamarin.Forms.DependencyService.\n. Handles resolving from DependencyService when Ninject does not find the binding.\n. Does the actual object creation from DependencyService. Code is cribbed from the Unity version.\n. This class is a line by line conversion of the Unity version.\n. The nuspec is cribbed from the Unity version. It adds a dependency on Portable.Ninject which was ported by Oren Novotny.\n. ",
    "CoderXpert": "So we should not use Prism.StoreApps any more (as I am building  windows store app), guys from Microsoft virtual academy recommended Prism.storeApps ...?\n. Thanks, below is the link to Video Lecture\nhttps://mva.microsoft.com/en-US/training-courses/developing-universal-windows-apps-with-c-and-xaml-8363?l=aUjZ7DGz_2304984382\n. Thanks, I thought it might be specific to store apps, is there any other resoucrece for windows 10.\n. ",
    "headsphere": "The reason I can't upgrade my business logic libraries is because they are dependent on another team's framework libraries from which we then derive our Unity V2 dependency. I'm not actually planning on changing our business logic libraries at all; I was attempting to just put a GUI wrapper around existing logic. It could be quite painful forcing the other team to upgrade their framework, but that's my problem! In the meantime I'll just have to compile a custom version of Prism targeting the old Unity version. \nThanks for your quick response Brian.\nCheers\nNick\n. ",
    "federom": "How should i execute the RaiseCanExecuteChanged method from the View Model ?\nThanks!\n. Thanks Brian!\nI used to do it in that way in Prism 4. The issue is that i updated to Prism 6 using the Nuget packages and when i try to execute the RaiseCanExecuteChanged method I received the following exception:\nSystem.InvalidOperationException was unhandled by user code\n  HResult=-2146233079\n  Message=The calling thread cannot access this object because a different thread owns it.\n  Source=WindowsBase\n  StackTrace:\n       at System.Windows.Threading.Dispatcher.VerifyAccess()\n       at System.Windows.DependencyObject.GetValue(DependencyProperty dp)\n       at System.Windows.Controls.Primitives.ButtonBase.get_Command()\n       at System.Windows.Controls.Primitives.ButtonBase.UpdateCanExecute()\n       at System.Windows.Controls.Primitives.ButtonBase.OnCanExecuteChanged(Object sender, EventArgs e)\n       at System.Windows.Input.CanExecuteChangedEventManager.HandlerSink.OnCanExecuteChanged(Object sender, EventArgs e)\nAny clue how should i call it from the proper thread?\nThanks again!\n. Thanks Brian,\nFor some reason since I upgraded i started to receive those exceptions.\nNow i am using \nDispatcher.CurrentDispatcher.BeginInvoke((Action)(() =>{Command.RaiseCanExecuteChanged()  }));\nin order to avoid that exception\n. ",
    "tinyplasticgreyknight": "@brianlagunas I believe the threading behaviour changed in commit f44507fdcc38194d977971931bbfb693b3c5906f.  WeakEventHandlerManager used to run the handlers inside a SynchronizationContext, but this is no longer the case.\nEDIT: whoops, just noticed the date on this thread!  Should I start a new one?\n. I've got a fix for this, just need to twiddle things to satisfy the unit tests a bit.  Looks like maybe xUnit sets up its SynchronizationContexts a bit differently from the old framework?  Anyway I'll get it sorted out.\n. Ah, perfect timing, things finally settled down over here and I was about to start looking at getting those tests finished for this!\nI guess now I can have a relax instead B-)\n. The diff for f44507fdcc38194d977971931bbfb693b3c5906f shows WeakEventHandlerManager was using a SynchronizationContext right up until it was removed (unless there's something funky around the syncContext field that I've missed).\nLine 47 is the post call:\ncsharp\nsyncContext.Post((o) => eventHandler(sender,  EventArgs.Empty), null);\n. I'll put something together this evening.\n. ",
    "pardont": "Prism                       - 6.1\nPrism.Forms            - 6.0\nPrism.Unity.Forms   - 6.0\nI just \"downoad zip\" at 2015/11/11. and test the \"Prism-master\\Samples\\Xamarin\\HelloWorld\" sample, I modified few rows to test the navigation feature. It seems \n_navigationService.Navigate(string, useModalNavigation:false);\nhas bug.\nExcpetion:\nOn Android:  \"An unhandled exception occured.\"\nOn WP8.1:    No Response.\n. BTW, I have a version(download zip at 2015/11/09),  it works fine.\n. Hi, brianlagunas,\nSorry for my stupid mistake, I download v6.0.1, it works fine.\nThank you\n. ",
    "toumir": "thank you very much, it works!\n. I try to explain, after setting the property ShowInTaskBar=false to the window, i think there a issue of blocking (the case of the popup window when using interactions):\nsuppose I have more than one application running at the same time (ms word, visual studio,...) and our application with a popup window showed, when navigate to an other application (such ms word) and try to come back to our application via click mouse in the Task Bar icon, then main window  (or the shell) will be showed but not the popup window until we press (alt+tab) to know there is popup window that block the application, i think you must set the owner of the popup window to the main window of the application(the shell).\n. thanks Brain, i will try this :+1: \n. what about binding to a view in Viewmodel? \n<prism:PopupWindowAction WindowContentType =\"{Binding TargetView}\"/>\nwhere the views are different for each ViewModel \nis this fix some problems ?\n. yes we learned that, the ViewModel should know anything about view, sir Brian Lagunas (Prism.Library manager) always said in his videos training that referencing view in ViewModel it is not a bad idea :), \n. I got it, thank you Brian\n. @dansiegel Thanks Sir \ud83d\udc4d  . the problem came back again :( . @bill2004158  do you mean, you cannot debug project ? nice to provide us more detail. @bill2004158  Right click project, go to Build tab -> advanced...-> change debugging information from Pdb-only to Full, check if helps ?! . ",
    "Timhilly": "Thanks, Brianlagunas! \nBut waht if use MVVM? datacontext could not be set.\n. Thanks, Brian! \nI solved it adding one line, seen in attached code\nprivate void RaiseConfirmation()\n{\nStatusConfirmation = string.Empty;\n// USING THE CLASS PROVIDED BY PRISM : Confirmation\nConfirmationRequest?.Raise(new Confirmation\n{\nTitle = \"My Title\",\nContent = \"My Content\"\n},\nconfirmation =>\n{\nvar confirm = confirmation.Content; <== New line added\nif (confirm.Confirmed) \n{\nStatusConfirmation = \"Confirmed\";\n}\nelse\n{\nStatusConfirmation = \"Canceled\";\n}\n});\n}. ",
    "dhaligas": "@brianlagunas does your sample allow setting the Detail of the MasterDetail to a NavigationPage?\nI always set the root Detail Page as a navpage\n. @brianlagunas i haven't had a chance yet .. was just reading the code in github to figure out how it works.  I want to use this lib b/c of the url navigation support for deep linking\n. @brianlagunas the example is not clear on how it sets the Detail to a NavigationPage since no nav bar is shown\n. @brianlagunas \nThe NavigationService needs on NavigateTo the option to PopToRoot \nand \nNavigateToRoot() which will reset the MainPage\n. @brianlagunas so we have many cases where we navigate deep in the stack and give the users a home button to get back to the root were they started from\n. depends .. in our current case we have a MasterDetailPage where the Detail is set to a new NavigationPage when picking a menu item from the Master Page.  Then the user can nav deep and we PopToRoot on the navigation page that the Detail is set to\n. @brianlagunas as I understand it from the samples this is how I get a Nav page setup\nNavigationService.Navigate (\"MainNavigationPage/DashboardPage\");\nBut how to I set a new Nav Page to the Detail on MasterDetailPage?\n. ok .. how would I represent that if I wanted to deep link to that path using app links?\n. I am referring to deep linking from emails or sms into the app \nhttps://dev.branch.io/recipes/branch_universal_links/#configure-developerapplecom\n. sweet thanks .. the uri nav is a game changer .. keep up the good work \n. Link to the sample?\n\nOn Dec 10, 2015, at 11:48 AM, Brian Lagunas notifications@github.com wrote:\nNew packages have been published. Check out this sample for how to setup your app now. I will update the official samples soon.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks it didn't show up in my email\nOn Dec 10, 2015, at 12:12 PM, Brian Lagunas notifications@github.com wrote:\nIt's in my comment above :)\n\u2014\nReply to this email directly or view it on GitHub.\n. @brianlagunas correct my issue is that it is not pushing inside the modals stack.  It appears to be pushing to the MainPage stack\n\nDo you have an example of this?\n. right i do that and within there I want to pushAsync to a new page.  that pushAsync is pushing to the MainPage stack not the Model Page Nav Stack .. I will put together a small sample outside of my app to reproduce.  most likely it is an issue with the way I am using it\n. Simpler way to reset the stack and start with a new root essentially.  \nI am all for memory and perf boost.  So how would I do this \nNavigate(\"myNavPage/myNewDetailPage\") \nor\nNavigate(\"myNewDetailPage\")\n. Thanks.  I don't want a new nav page for every menu item just want the menu item selected to be the root page of the nav page set to the detail page.\n. @brianlagunas I am seeing this as well.  Could this be an issue with the navigation service?  perhaps a timing issue?\n. @brianlagunas nice! when does the next release drop?\n. I am using \nBaseViewModel : BindableBase, INavigationAware \nI want to know if I can inject services into my BaseViewModel that every ViewModel inherits\nI guess I could write an extension to the navigation service to handle the double tap\n. I am handling the case where the command is invoked faster than it can complete the first tap.  \nI have had issues in apps with the tap gesture and the ability to tap it fast and get multiple pages pushed to the stack \n. mostly on android but sometimes on iOS\n. ok makes sense like this question \nhttps://github.com/PrismLibrary/Prism/issues/442\n. I am trying to open the login page.  I am using the MasterDetailPageViewModel\nThe login action is on the Master Page.  Should the MasterPage have its own ViewModel?\n. @brianlagunas hmm I would like to be able to launch a modal from the MasterPage and control the IsPresented as well.  \nFor example slide up the login screen and if the user cancels the modal I want the side menu to still be presented.  \nCan I extend the navigation service to accomplish this?\n. Nice thanks \nIs this in the master branch?\n. @brianlagunas where can I find this change?\n. ",
    "DJKampouris": "I tested the Split screen scenario and the popup is centered in the middle of the new vertical area.\nFrom: znakeeye [mailto:notifications@github.com]\nSent: Sunday, November 22, 2015 6:11 PM\nTo: PrismLibrary/Prism Prism@noreply.github.com\nCc: Dimitri Hudon-Kampouris dimitri@binex.com\nSubject: Re: [Prism] Update PopupWindowAction for multiple screens (#315)\nToday I observed another problem with my fix. If you drag the main window to the right (or any other) screen edge, Windows 10 (and 8?) allows you to nicely split the screen. It seems the popup is then centered on the desktop instead of the new vertical work area.\nDoes your fix cover this case?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PrismLibrary/Prism/pull/315#issuecomment-158817294.\n. Under what circumstances would this happen ?\nFrom: znakeeye [mailto:notifications@github.com]\nSent: Tuesday, November 24, 2015 6:29 AM\nTo: PrismLibrary/Prism Prism@noreply.github.com\nCc: Dimitri Hudon-Kampouris dimitri@binex.com\nSubject: Re: [Prism] Update PopupWindowAction for multiple screens (#315)\nI discovered a problem with this (and the original) implementation. It seems the call to view.PointToScreen() can crash.\nAn exception of type 'System.InvalidOperationException' occurred in PresentationCore.dll but was not handled in user code\nAdditional information: This Visual is not connected to a PresentationSource.\nIdeas?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PrismLibrary/Prism/pull/315#issuecomment-159236735.\n. I use the InteractivityQuickstart project and the second tab buttons are working as expected.\nI can't reproduce the center over desktop issue as described.\n. @dansiegel using \ninternal partial class App  :  global::Prism.Unity.PrismApplication\nor an alias like\n```\nusing TopPrism = Prism.Unity;\nnamespace PrismBreak\n{\n    internal partial class App  : TopPrism.PrismApplication\n```\nstill breaks the build with the CS0234 error. . ",
    "suresh-s": "We want to migrate Windows phone 8 project to Windows 10 Mobile.  We are currently having Single project with MVVM architecture.    The project consist of 7 different features.   We want to segregate as 7 different modules while migration.\nI can't find out ModuleCatalog, Region, RegionManager, Shell classes in Prism.Windows library.\n1. Why are these classes been removed?\n2. Is the Shell, Region and ModuleCatalog based Architecture not suitable for Windows 10 mobile projects?\n3. Why should i use Prism 6.0 since \"Composite application from loosely coupled components\" is not supported? How can i create Composite application with different modules and components using Prism 6.0?\n4. Should i create Infrastructure libraries \"Module Catalog\", \"Module Loader\", \"Region Manager\", \"Logging\", \"Region Manager\", \"Region\" and \"Shell\"  to create Composite application?\n. ",
    "matthewethomas": "I see that the OnCanExecuteChanged method in DelegateCommandBase is virtual, it looks like I can just override it and get the functionality there?\n. What about grabbing a reference to SynchronizationContext.Current in the constructor and then Post'ing the event?\n. ",
    "zleao": "I know a way to log it to the VisualStudio output.In the XAML page declare the following namespace: xmlns:diag=\"clr-namespace:System.Diagnostics;assembly=WindowsBase\"\nafter that, you can define the trace level of each binding you have:\n<Binding Path=\"YourProp\" diag:PresentationTraceSources.TraceLevel=\"High\" />\nIs this what you need?\n. ",
    "devscott": "@zleao Thanks, but doing this for every control seems like a nightmare and I really don't want diagnositcs stuff going into release\nI know there are multiple ways to do this gloabally. \nIn the past I have used the way Josh Smith presented back in the day\n```\n// In ViewModelBase.cs \n[Conditional(\"DEBUG\")] [DebuggerStepThrough] \npublic void VerifyPropertyName(string propertyName) \n{ \n    // Verify that the property name matches a real, \n    // public, instance property on this object. \n    if (TypeDescriptor.GetProperties(this)[propertyName] == null) { \n        string msg = \"Invalid property name: \" + propertyName; \n        if (this.ThrowOnInvalidPropertyName) \n            throw new Exception(msg); \n        else Debug.Fail(msg); \n    } \n}\n```\nRecently I have moved to application wide chcecking by using System.Window.Diagnostics.PresentationTraceSources \n```\nusing System.Windows;\nusing System.Diagnostics;\nnamespace Foobar\n{\n    /// \n    /// Interaction logic for App.xaml\n    /// \n    public partial class App : Application\n    {\n        protected override void OnStartup(StartupEventArgs e)\n        {\nif DEBUG\n        PresentationTraceSources.Refresh();\n        PresentationTraceSources.DataBindingSource.Listeners.Add(new DebugTraceListener());\n        PresentationTraceSources.DataBindingSource.Switch.Level = SourceLevels.Warning | SourceLevels.Error;\n\nendif\n        FoobarBootstrapper bootstrapper = new FoobarBootstrapper();\n        bootstrapper.Run();\n    }\n}\n\npublic class DebugTraceListener : TraceListener\n{\n    public override void Write(string message)\n    {\n    }\n\n    public override void WriteLine(string message)\n    {\n        Debugger.Break();\n    }\n}\n\n}\n```\nI was just wondering if Prism had something already built in. \n. @briannoyes Thanks for pointing me to the Trace settings under Tools. \n. ",
    "Neccta": "I didn't know this, good to know. I was about to fix my PR but I'll leave it alone now.\n. ",
    "bgoldstein14": "I believe the issue is related to how the OS is painting the popup window. The problem is consistently reproducible no matter where the application starts off on the secondary monitor.\nI also wanted to confirm that this happened with the Prism version 6.1 but I discovered it in Prism 5.\n. This actually was discovered during QA of our application and on multiple computers. This happens on all of our development computers as well. I don't have a watered down example at this point. I'm not sure if I can get time away from current project work to create something from scratch. Our current work around is to use a MessageBox which is a big MVVM no-no. Below is the XAML used to represent the grid with the pop-up defined. You'll note commented out XAML for a custom cancellation pop-up that also provided the same results.\n\n```\n    \n\n\n                <Setter Property=\"Foreground\" Value=\"{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}\"/>\n                <Setter Property=\"Background\" Value=\"WhiteSmoke\" />\n            \n\n                <Setter Property=\"Foreground\" Value=\"{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}\"/>\n                <Setter Property=\"Background\" Value=\"WhiteSmoke\" />\n            \n\n                <Setter Property=\"Background\" Value=\"WhiteSmoke\" />\n                <Setter Property=\"Foreground\" Value=\"Gray\"/>\n                <Style.Triggers>\n                    <DataTrigger Binding=\"{Binding TransactionType}\" Value=\"Buy\">\n                        <Setter Property=\"Foreground\" Value=\"{StaticResource BuyOrderBrush}\" />\n                    </DataTrigger>\n                    <DataTrigger Binding=\"{Binding TransactionType}\" Value=\"Sell\">\n                        <Setter Property=\"Foreground\" Value=\"{StaticResource SellOrderBrush}\" />\n                    </DataTrigger>\n                    <DataTrigger Binding=\"{Binding TransactionType}\" Value=\"Short\">\n                        <Setter Property=\"Foreground\" Value=\"{StaticResource ShortOrderBrush}\" />\n                    </DataTrigger>\n                    <DataTrigger Binding=\"{Binding TransactionType}\" Value=\"Cover\">\n                        <Setter Property=\"Foreground\" Value=\"{StaticResource CoverOrderBrush}\" />\n                    </DataTrigger>\n                    <DataTrigger Binding=\"{Binding TransactionType}\" Value=\"File\">\n                        <Setter Property=\"Foreground\" Value=\"{StaticResource FileOrderBrush}\" />\n                    </DataTrigger>\n                </Style.Triggers>\n            \n\n\n\n\n\n\n\n\n                                    <Setter Property=\"Foreground\" Value=\"{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}\"/>\n                                \n\n                        <!-- Order Status -->\n                        <TextBlock Margin=\"2\" Tag=\"DataRow\" VerticalAlignment=\"Center\">\n                            <TextBlock.Style>\n                                <Style TargetType=\"TextBlock\">\n                                    <Setter Property=\"FontFamily\" Value=\"Wingdings\" />\n                                    <Setter Property=\"Text\" Value=\"u\" />\n                                    <Setter Property=\"ToolTip\" Value=\"{x:Null}\" />\n                                    <Style.Triggers>\n                                        <!-- active order statuses -->\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"Placed\">\n                                            <Setter Property=\"Foreground\" Value=\"#FF3232\" />\n                                            <Setter Property=\"ToolTip\" Value=\"Awaiting to be Entered into CRD\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"CRDEntry\">\n                                            <Setter Property=\"Foreground\" Value=\"IndianRed\" />\n                                            <Setter Property=\"ToolTip\" Value=\"Awaiting to be Ready in CRD\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"CRDReady\">\n                                            <Setter Property=\"Foreground\" Value=\"Yellow\" />\n                                            <Setter Property=\"ToolTip\" Value=\"Awaiting for QC\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QC\">\n                                            <Setter Property=\"Foreground\" Value=\"Purple\" />\n                                            <Setter Property=\"ToolTip\" Value=\"Awaiting for QC Completion\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QCComplete\">\n                                            <Setter Property=\"Foreground\" Value=\"DeepSkyBlue\" />\n                                            <Setter Property=\"ToolTip\" Value=\"Awaiting for 3QC\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"3QC\">\n                                            <Setter Property=\"Foreground\" Value=\"Blue\" />\n                                            <Setter Property=\"ToolTip\" Value=\"Awaiting for 3QC Completion\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"3QCComplete\">\n                                            <Setter Property=\"Foreground\" Value=\"DeepSkyBlue\" />\n                                            <Setter Property=\"ToolTip\" Value=\"Order is complete\" />\n                                        </DataTrigger>\n                                        <!-- rejected order -->\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"Rejected\">\n                                            <Setter Property=\"Foreground\" Value=\"Black\" />\n                                            <Setter Property=\"ToolTip\" Value=\"Order cancelled\" />\n                                        </DataTrigger>\n                                        <!-- precancelled order -->\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"Precancelled\">\n                                            <Setter Property=\"Foreground\" Value=\"Black\" />\n                                            <Setter Property=\"ToolTip\" Value=\"Order cancelled\" />\n                                        </DataTrigger>\n                                        <!-- cancelled order -->\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"Cancelled\">\n                                            <Setter Property=\"Foreground\" Value=\"Black\" />\n                                            <Setter Property=\"ToolTip\" Value=\"Order cancelled\" />\n                                        </DataTrigger>\n                                        <!-- inactive order -->\n                                        <DataTrigger Binding=\"{Binding IsOrderActive}\" Value=\"False\">\n                                            <Setter Property=\"Foreground\" Value=\"Transparent\" />\n                                        </DataTrigger>\n                                    </Style.Triggers>\n                                </Style>\n                            </TextBlock.Style>\n                        </TextBlock>\n\n                        <!--Age Rank-->\n                        <TextBlock Width=\"Auto\" Margin=\"2\" Tag=\"DataRow\">\n                            <TextBlock.Style>\n                                <Style TargetType=\"TextBlock\">\n                                    <Style.Triggers>\n                                        <DataTrigger Binding=\"{Binding AgeRank}\" Value=\"1\">\n                                            <Setter Property=\"Foreground\" Value=\"#FFE50006\" />\n                                            <Setter Property=\"Text\" Value=\"+0H\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding AgeRank}\" Value=\"2\">\n                                            <Setter Property=\"Foreground\" Value=\"#FFC80D1D\" />\n                                            <Setter Property=\"Text\" Value=\"+1H\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding AgeRank}\" Value=\"3\">\n                                            <Setter Property=\"Foreground\" Value=\"#FFAB1A34\" />\n                                            <Setter Property=\"Text\" Value=\"+2H\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding AgeRank}\" Value=\"4\">\n                                            <Setter Property=\"Foreground\" Value=\"#FF8F274B\" />\n                                            <Setter Property=\"Text\" Value=\"+3H\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding AgeRank}\" Value=\"5\">\n                                            <Setter Property=\"Foreground\" Value=\"#FF723562\" />\n                                            <Setter Property=\"Text\" Value=\"+6H\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding AgeRank}\" Value=\"6\">\n                                            <Setter Property=\"Foreground\" Value=\"#FF554279\" />\n                                            <Setter Property=\"Text\" Value=\"+12H\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding AgeRank}\" Value=\"7\">\n                                            <Setter Property=\"Foreground\" Value=\"#FF394F90\" />\n                                            <Setter Property=\"Text\" Value=\"+1D\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding AgeRank}\" Value=\"8\">\n                                            <Setter Property=\"Foreground\" Value=\"#FF1C5CA7\" />\n                                            <Setter Property=\"Text\" Value=\"+3D\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding AgeRank}\" Value=\"9\">\n                                            <Setter Property=\"Foreground\" Value=\"#FF006ABF\" />\n                                            <Setter Property=\"Text\" Value=\"+1W\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding AgeRank}\" Value=\"10\">\n                                            <Setter Property=\"Foreground\" Value=\"#FF006ABF\" />\n                                            <Setter Property=\"Text\" Value=\"+2W\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding AgeRank}\" Value=\"11\">\n                                            <Setter Property=\"Foreground\" Value=\"#FF006ABF\" />\n                                            <Setter Property=\"Text\" Value=\"+1M\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding AgeRank}\" Value=\"12\">\n                                            <Setter Property=\"Foreground\" Value=\"#FF006ABF\" />\n                                            <Setter Property=\"Text\" Value=\"+3M\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding AgeRank}\" Value=\"13\">\n                                            <Setter Property=\"Foreground\" Value=\"#FF006ABF\" />\n                                            <Setter Property=\"Text\" Value=\"+6M\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding AgeRank}\" Value=\"14\">\n                                            <Setter Property=\"Foreground\" Value=\"#FF006ABF\" />\n                                            <Setter Property=\"Text\" Value=\"+1Y\" />\n                                        </DataTrigger>\n                                    </Style.Triggers>\n                                </Style>\n                            </TextBlock.Style>\n                        </TextBlock>\n\n                        <!--Notification-->\n                        <TextBlock Width=\"Auto\" FontFamily=\"Wingdings\" Text=\"*\" Margin=\"2\" Foreground=\"Red\" Tag=\"DataRow\" \n                                   Visibility=\"{Binding HasNotification, Converter={StaticResource BoolVisibilityConverter}}\">\n                            <TextBlock.Style>\n                                <Style TargetType=\"TextBlock\">\n                                    <Style.Resources>\n                                        <Storyboard x:Key=\"BlinkerStoryboard\">\n                                            <DoubleAnimation Storyboard.TargetProperty=\"Opacity\" From=\"0\" To=\"1\" Duration=\"0:0:0.75\" RepeatBehavior=\"Forever\" AutoReverse=\"True\"/>\n                                        </Storyboard>\n                                    </Style.Resources>\n                                    <Style.Triggers>\n                                        <Trigger Property=\"Visibility\" Value=\"Visible\">\n                                            <Trigger.EnterActions>\n                                                <BeginStoryboard Storyboard=\"{StaticResource BlinkerStoryboard}\"/>\n                                            </Trigger.EnterActions>\n                                        </Trigger>\n                                    </Style.Triggers>\n                                </Style>\n                            </TextBlock.Style>\n                        </TextBlock>\n\n                    </DockPanel>\n                </DataTemplate>\n            </DataGridTemplateColumn.CellTemplate>\n        </DataGridTemplateColumn>\n        <!--Placed Date column-->\n        <DataGridTextColumn Header=\"Placed\" Binding=\"{Binding PlacedDate, StringFormat='{}{0:MM/dd/yy HH:mm}'}\" Width=\"Auto\" CellStyle=\"{StaticResource OrderGridCell}\"/>\n        <!--Placed By column-->\n        <DataGridTextColumn Header=\"Placed By\" Binding=\"{Binding PlacedBy}\" Width=\"*\" CellStyle=\"{StaticResource OrderGridCell}\"/>\n        <!--Transaction Type column-->\n        <DataGridTextColumn Header=\"Trade\" Binding=\"{Binding TransactionTypeDescription}\" Width=\"Auto\" CellStyle=\"{StaticResource OrderGridTransactionTypeCell}\"/>\n        <!--Quantity Type column-->\n        <DataGridTextColumn Header=\"Adj Type\" Binding=\"{Binding QuantityTypeDescription}\" Width=\"Auto\" CellStyle=\"{StaticResource OrderGridCell}\"/>\n        <!--CRD Ready Date column-->\n        <DataGridTextColumn Header=\"CRD Ready\" Binding=\"{Binding CRDReadyDate, StringFormat='{}{0:MM/dd/yy HH:mm}'}\" Width=\"Auto\" CellStyle=\"{StaticResource OrderGridCell}\">\n            <DataGridTextColumn.ElementStyle>\n                <Style TargetType=\"TextBlock\">\n                    <Setter Property=\"Visibility\" Value=\"Collapsed\"></Setter>\n                    <Style.Triggers>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"CRDReady\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QC\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QCComplete\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QC3\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QC3Complete\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                    </Style.Triggers>\n                </Style>\n            </DataGridTextColumn.ElementStyle>\n        </DataGridTextColumn>\n        <!--CRD Ready By column-->\n        <DataGridTextColumn Header=\"CRD Ready By\" Binding=\"{Binding CRDReadyBy}\" Width=\"*\" CellStyle=\"{StaticResource OrderGridCell}\">\n            <DataGridTextColumn.ElementStyle>\n                <Style TargetType=\"TextBlock\">\n                    <Setter Property=\"Visibility\" Value=\"Collapsed\"></Setter>\n                    <Style.Triggers>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"CRDReady\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QC\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QCComplete\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QC3\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QC3Complete\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                    </Style.Triggers>\n                </Style>\n            </DataGridTextColumn.ElementStyle>\n        </DataGridTextColumn>\n        <!--2QC Complete Date column-->\n        <DataGridTextColumn Header=\"2QC Complete\" Binding=\"{Binding QCdDate, StringFormat='{}{0:MM/dd/yy HH:mm}'}\" Width=\"Auto\" CellStyle=\"{StaticResource OrderGridCell}\">\n            <DataGridTextColumn.ElementStyle>\n                <Style TargetType=\"TextBlock\">\n                    <Setter Property=\"Visibility\" Value=\"Collapsed\"></Setter>\n                    <Style.Triggers>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QCComplete\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QC3\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QC3Complete\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                    </Style.Triggers>\n                </Style>\n            </DataGridTextColumn.ElementStyle>\n        </DataGridTextColumn>\n        <!--2QC Complete By column-->\n        <DataGridTextColumn Header=\"2QC By\" Binding=\"{Binding QCdBy}\" Width=\"*\" CellStyle=\"{StaticResource OrderGridCell}\">\n            <DataGridTextColumn.ElementStyle>\n                <Style TargetType=\"TextBlock\">\n                    <Setter Property=\"Visibility\" Value=\"Collapsed\"></Setter>\n                    <Style.Triggers>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QCComplete\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QC3\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QC3Complete\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                    </Style.Triggers>\n                </Style>\n            </DataGridTextColumn.ElementStyle>\n        </DataGridTextColumn>\n        <!--3QC Complete Date column-->\n        <DataGridTextColumn Header=\"3QC Complete\" Binding=\"{Binding QC3dDate, StringFormat='{}{0:MM/dd/yy HH:mm}'}\" Width=\"Auto\" CellStyle=\"{StaticResource OrderGridCell}\">\n            <DataGridTextColumn.ElementStyle>\n                <Style TargetType=\"TextBlock\">\n                    <Setter Property=\"Visibility\" Value=\"Collapsed\"></Setter>\n                    <Style.Triggers>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QC3Complete\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                    </Style.Triggers>\n                </Style>\n            </DataGridTextColumn.ElementStyle>\n        </DataGridTextColumn>\n        <!--3QC Complete By column-->\n        <DataGridTextColumn Header=\"3QC By\" Binding=\"{Binding QC3dBy}\" Width=\"*\" CellStyle=\"{StaticResource OrderGridCell}\">\n            <DataGridTextColumn.ElementStyle>\n                <Style TargetType=\"TextBlock\">\n                    <Setter Property=\"Visibility\" Value=\"Collapsed\"></Setter>\n                    <Style.Triggers>\n                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QC3Complete\">\n                            <Setter Property=\"Visibility\" Value=\"Visible\"/>\n                        </DataTrigger>\n                    </Style.Triggers>\n                </Style>\n            </DataGridTextColumn.ElementStyle>\n        </DataGridTextColumn>\n        <!--Assignee column-->\n        <DataGridTextColumn Header=\"Assignee\" Binding=\"{Binding Assignee}\" Width=\"*\" CellStyle=\"{StaticResource OrderGridCell}\"\n                             Visibility=\"{Binding DataContext.ActiveOnly, \n                                                  Source={x:Reference dummyElement}, \n                                                  Converter={StaticResource BoolVisibilityConverter}}\"/>\n    </DataGrid.Columns>\n    <DataGrid.InputBindings>\n        <KeyBinding Key=\"Enter\" Command=\"{Binding ElementName=OrderHistoryGrid,Path=SelectedItem.DataGridEnterKeyDownCommand}\"/>\n    </DataGrid.InputBindings>\n    <DataGrid.RowDetailsTemplate>\n        <DataTemplate>\n\n            <Grid Name=\"OrderHistoryItemDetail\" MaxHeight=\"550\">\n                <Grid.RowDefinitions>\n                    <RowDefinition Height=\"*\"/>\n                </Grid.RowDefinitions>\n                <Grid.ColumnDefinitions>\n                    <ColumnDefinition Width=\"500\"/>\n                    <ColumnDefinition Width=\"*\"/>\n                </Grid.ColumnDefinitions>\n\n                <i:Interaction.Triggers>\n                    <!-- Modal Cancellation Confirmation Popup -->\n                    <prism:InteractionRequestTrigger SourceObject=\"{Binding CancelInteractionRequest}\">\n                        <prism:PopupWindowAction IsModal=\"True\" CenterOverAssociatedObject=\"True\" >\n                            <!--<prism:PopupWindowAction.WindowContent>\n                                <views:CancelOrderConfirmationView/>\n                            </prism:PopupWindowAction.WindowContent>-->\n                        </prism:PopupWindowAction>\n                    </prism:InteractionRequestTrigger>\n                </i:Interaction.Triggers>\n\n                <!-- background shading matching transaction type -->\n                <Rectangle Opacity=\"0.1\" Grid.ColumnSpan=\"2\">\n                    <Rectangle.Style>\n                        <Style TargetType=\"Rectangle\">\n                            <Setter Property=\"Fill\" Value=\"WhiteSmoke\" />\n                            <Style.Triggers>\n                                <DataTrigger Binding=\"{Binding TransactionType}\" Value=\"Buy\">\n                                    <Setter Property=\"Fill\" Value=\"{StaticResource BuyOrderBrush}\" />\n                                </DataTrigger>\n                                <DataTrigger Binding=\"{Binding TransactionType}\" Value=\"Sell\">\n                                    <Setter Property=\"Fill\" Value=\"{StaticResource SellOrderBrush}\" />\n                                </DataTrigger>\n                                <DataTrigger Binding=\"{Binding TransactionType}\" Value=\"Short\">\n                                    <Setter Property=\"Fill\" Value=\"{StaticResource ShortOrderBrush}\" />\n                                </DataTrigger>\n                                <DataTrigger Binding=\"{Binding TransactionType}\" Value=\"Cover\">\n                                    <Setter Property=\"Fill\" Value=\"{StaticResource CoverOrderBrush}\" />\n                                </DataTrigger>\n                                <DataTrigger Binding=\"{Binding TransactionType}\" Value=\"File\">\n                                    <Setter Property=\"Fill\" Value=\"{StaticResource FileOrderBrush}\" />\n                                </DataTrigger>\n                            </Style.Triggers>\n                        </Style>\n                    </Rectangle.Style>\n                </Rectangle>\n\n                <!--left side-->\n                <DockPanel LastChildFill=\"True\" Margin=\"5\">\n\n                    <!-- workflow buttons -->\n                    <Grid DockPanel.Dock=\"Bottom\">\n                        <Grid.Style>\n                            <Style TargetType=\"FrameworkElement\">\n                                <Style.Triggers>\n                                    <!-- hide when workflow done -->\n                                    <MultiDataTrigger>\n                                        <MultiDataTrigger.Conditions>\n                                            <Condition Binding=\"{Binding IsOrderActive}\" Value=\"True\" />\n                                            <Condition Binding=\"{Binding Content, ElementName=ProgressWorkflowButton}\" Value=\"{x:Null}\" />\n                                        </MultiDataTrigger.Conditions>\n                                        <Setter Property=\"Visibility\" Value=\"Collapsed\" />\n                                    </MultiDataTrigger>\n                                    <DataTrigger Binding=\"{Binding IsOrderActive}\" Value=\"False\">\n                                        <Setter Property=\"Visibility\" Value=\"Collapsed\" />\n                                    </DataTrigger>\n                                    <DataTrigger Binding=\"{Binding Source={x:Static shared:QuickTradeSettings.IsFixedIncomeTradeOperations}}\" Value=\"False\">\n                                        <Setter Property=\"Visibility\" Value=\"Collapsed\" />\n                                    </DataTrigger>\n                                </Style.Triggers>\n                            </Style>\n                        </Grid.Style>\n\n                        <Grid.ColumnDefinitions>\n                            <ColumnDefinition />\n                            <ColumnDefinition />\n                            <ColumnDefinition />\n                        </Grid.ColumnDefinitions>\n\n                        <!-- reject order -->\n                        <Button Grid.Column=\"0\" Content=\"Reject Order\" Margin=\"5\" Command=\"{Binding RejectOrderCommand}\">\n                            <Button.Style>\n                                <Style TargetType=\"Button\">\n                                    <Setter Property=\"Visibility\" Value=\"Visible\"></Setter>\n                                    <Style.Triggers>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"Placed\">\n                                            <Setter Property=\"Visibility\" Value=\"Collapsed\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"Rejected\">\n                                            <Setter Property=\"Visibility\" Value=\"Collapsed\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"Precancelled\">\n                                            <Setter Property=\"Visibility\" Value=\"Collapsed\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding IsOrderActive}\" Value=\"False\">\n                                            <Setter Property=\"Visibility\" Value=\"Collapsed\" />\n                                        </DataTrigger>\n                                    </Style.Triggers>\n                                </Style>\n                            </Button.Style>\n                        </Button>\n\n                        <!-- cancel order -->\n                        <Button Grid.Column=\"1\" Content=\"Cancel Order\" Margin=\"5\" Command=\"{Binding CancelOrderCommand}\">\n                            <Button.Style>\n                                <Style TargetType=\"Button\">\n                                    <Setter Property=\"Visibility\" Value=\"Visible\"></Setter>\n                                    <Style.Triggers>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"Precancelled\">\n                                            <Setter Property=\"Visibility\" Value=\"Collapsed\" />\n                                        </DataTrigger>\n                                    </Style.Triggers>\n                                </Style>\n                            </Button.Style>\n                        </Button>\n\n                        <!-- workflow progression -->\n                        <Button x:Name=\"ProgressWorkflowButton\" Grid.Column=\"2\" Margin=\"5\" Command=\"{Binding WorkflowMoveCommand}\">\n                            <Button.Style>\n                                <Style TargetType=\"Button\">\n                                    <Setter Property=\"Content\" Value=\"{x:Null}\" />\n                                    <Style.Triggers>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"Placed\">\n                                            <Setter Property=\"Content\" Value=\"Mark as CRD Entry\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"CRDEntry\">\n                                            <Setter Property=\"Content\" Value=\"Mark as CRD Ready\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"CRDReady\">\n                                            <Setter Property=\"Content\" Value=\"Mark as 2QC\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QC\">\n                                            <Setter Property=\"Content\" Value=\"Mark as 2QC Complete\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QCComplete\">\n                                            <Setter Property=\"Content\" Value=\"Mark as 3QC\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"QC3\">\n                                            <Setter Property=\"Content\" Value=\"Mark as 3QC Complete\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"Precancelled\">\n                                            <Setter Property=\"Content\" Value=\"Ack. CRD Order Cancel\" />\n                                        </DataTrigger>\n                                        <DataTrigger Binding=\"{Binding OrderStatus}\" Value=\"Rejected\">\n                                            <Setter Property=\"Content\" Value=\"Ack. CRD Order Revert\" />\n                                        </DataTrigger>\n                                    </Style.Triggers>\n                                </Style>\n                            </Button.Style>\n                        </Button>\n\n                    </Grid>\n\n                    <!-- order summary -->\n                    <views:OrderSummaryView HorizontalAlignment=\"Stretch\" VerticalAlignment=\"Stretch\" Order=\"{Binding}\" ShowAllAccounts=\"True\">\n                        <views:OrderSummaryView.Style>\n                            <Style TargetType=\"{x:Type views:OrderSummaryView}\">\n                                <Setter Property=\"LeftButtonText\" Value=\"Print\" />\n                                <Setter Property=\"LeftButtonCommand\" Value=\"{Binding PrintCommand}\" />\n                                <Style.Triggers>\n                                    <!-- hide print for file orders -->\n                                    <DataTrigger Binding=\"{Binding TransactionType}\" Value=\"File\">\n                                        <Setter Property=\"LeftButtonText\" Value=\"{x:Null}\" />\n                                        <Setter Property=\"LeftButtonCommand\" Value=\"{x:Null}\" />\n                                    </DataTrigger>\n                                </Style.Triggers>\n                            </Style>\n                        </views:OrderSummaryView.Style>\n                    </views:OrderSummaryView>\n                </DockPanel>\n\n                <!-- right side -->\n                <DockPanel Grid.Row=\"0\" Grid.Column=\"1\" LastChildFill=\"True\" Margin=\"5\">\n\n                    <TextBlock DockPanel.Dock=\"Top\" Text=\"Notifications\" FontWeight=\"Bold\" />\n\n                    <!-- new message -->\n                    <Grid DockPanel.Dock=\"Bottom\">\n                        <Grid.RowDefinitions>\n                            <RowDefinition Height=\"Auto\"/>\n                            <RowDefinition Height=\"100\"/>\n                            <RowDefinition Height=\"Auto\"/>\n                        </Grid.RowDefinitions>\n                        <TextBlock Grid.Row=\"0\" Margin=\"10,10,0,0\" HorizontalAlignment=\"Left\" Text=\"New message: \"/>\n                        <TextBox Grid.Row=\"1\" TextAlignment=\"Left\" TextWrapping=\"Wrap\" Margin=\"10,0,10,10\" MaxLength=\"{Binding NewMessageMaxLength}\" Text=\"{Binding NewMessage, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged }\"/>\n                        <DockPanel Grid.Row=\"2\">\n                            <TextBlock DockPanel.Dock=\"Left\" Margin=\"10,0,0,0\" Text=\"{Binding CharactersRemaining, StringFormat='Characters Remaining: {0}'}\" Foreground=\"Gray\" Background=\"Transparent\"/>\n                            <Button DockPanel.Dock=\"Right\" Content=\"Add\" Margin=\"10,0,10,10\" Width=\"100\" Height=\"30\" VerticalAlignment=\"Top\" HorizontalAlignment=\"Right\" IsDefault=\"True\" Command=\"{Binding AddNoteCommand}\"/>\n                        </DockPanel>\n                    </Grid>\n\n                    <!-- notification list -->\n                    <DataGrid Margin=\"10,5,5,0\" ItemsSource=\"{Binding RequestEvents}\" AutoGenerateColumns=\"False\" RowHeaderWidth=\"0\"\n                              AlternatingRowBackground=\"WhiteSmoke\" GridLinesVisibility=\"Horizontal\" IsReadOnly=\"True\"\n                              SelectionMode=\"Single\" SelectionUnit=\"FullRow\" HorizontalAlignment=\"Stretch\"\n                              controls:Behavior.ScrollToBottom=\"True\">\n                        <DataGrid.Columns>\n                            <DataGridTextColumn Header=\"Date\" Width=\"Auto\" Binding=\"{Binding RequestEventDate, StringFormat='{}{0:MM/dd/yy HH:mm}'}\" />\n                            <DataGridTextColumn Header=\"User\" Width=\"Auto\" Binding=\"{Binding RequestEventUserName}\" />\n                            <DataGridTextColumn Header=\"Event\" Width=\"Auto\" >\n                                <DataGridTextColumn.ElementStyle>\n                                    <Style TargetType=\"TextBlock\">\n                                        <Setter Property=\"Text\" Value=\"{x:Null}\"></Setter>\n                                        <Style.Triggers>\n                                            <DataTrigger Binding=\"{Binding RequestEventType}\" Value=\"Place\">\n                                                <Setter Property=\"Text\" Value=\"Place\" />\n                                            </DataTrigger>\n                                            <DataTrigger Binding=\"{Binding RequestEventType}\" Value=\"CRDEntry\">\n                                                <Setter Property=\"Text\" Value=\"CRD Entry\" />\n                                            </DataTrigger>\n                                            <DataTrigger Binding=\"{Binding RequestEventType}\" Value=\"CRDReady\">\n                                                <Setter Property=\"Text\" Value=\"CRD Ready\" />\n                                            </DataTrigger>\n                                            <DataTrigger Binding=\"{Binding RequestEventType}\" Value=\"QC\">\n                                                <Setter Property=\"Text\" Value=\"2QC\" />\n                                            </DataTrigger>\n                                            <DataTrigger Binding=\"{Binding RequestEventType}\" Value=\"QCComplete\">\n                                                <Setter Property=\"Text\" Value=\"2QC Complete\" />\n                                            </DataTrigger>\n                                            <DataTrigger Binding=\"{Binding RequestEventType}\" Value=\"QC3\">\n                                                <Setter Property=\"Text\" Value=\"3QC\" />\n                                            </DataTrigger>\n                                            <DataTrigger Binding=\"{Binding RequestEventType}\" Value=\"QC3Complete\">\n                                                <Setter Property=\"Text\" Value=\"3QC Complete\" />\n                                            </DataTrigger>\n                                            <DataTrigger Binding=\"{Binding RequestEventType}\" Value=\"Reject\">\n                                                <Setter Property=\"Text\" Value=\"Reject\" />\n                                            </DataTrigger>\n                                            <DataTrigger Binding=\"{Binding RequestEventType}\" Value=\"CRDOrderReversion\">\n                                                <Setter Property=\"Text\" Value=\"CRD Reversion\" />\n                                            </DataTrigger>\n                                            <DataTrigger Binding=\"{Binding RequestEventType}\" Value=\"Cancel\">\n                                                <Setter Property=\"Text\" Value=\"Cancel\" />\n                                            </DataTrigger>\n                                            <DataTrigger Binding=\"{Binding RequestEventType}\" Value=\"CRDOrderCancellation\">\n                                                <Setter Property=\"Text\" Value=\"CRD Cancel\" />\n                                            </DataTrigger>\n                                            <DataTrigger Binding=\"{Binding RequestEventType}\" Value=\"Notify\">\n                                                <Setter Property=\"Text\" Value=\"Notify\" />\n                                            </DataTrigger>\n                                        </Style.Triggers>\n                                    </Style>\n                                </DataGridTextColumn.ElementStyle>\n                            </DataGridTextColumn>\n                            <DataGridTextColumn Header=\"Message\" Width=\"*\" Binding=\"{Binding Message}\">\n                                <DataGridTextColumn.ElementStyle>\n                                    <Style TargetType=\"TextBlock\">\n                                        <Setter Property=\"TextWrapping\" Value=\"Wrap\" />\n                                    </Style>\n                                </DataGridTextColumn.ElementStyle>\n                            </DataGridTextColumn>\n                        </DataGrid.Columns>\n                        <DataGrid.ColumnHeaderStyle>\n                            <Style TargetType=\"DataGridColumnHeader\">\n                                <Setter Property=\"FontWeight\" Value=\"Bold\" />\n                            </Style>\n                        </DataGrid.ColumnHeaderStyle>\n                    </DataGrid>\n                </DockPanel>\n            </Grid>\n        </DataTemplate>\n    </DataGrid.RowDetailsTemplate>\n</DataGrid>\n\n```\n. Originally the dialog was outside but then the command was unable to communicate with the pop-up to actually show it. I had to put it down into the details. Is there a particular spot you are recommending (I just know that I had to be very selective where to put it otherwise I'd get XAML errors and couldn't compile).\nAlso, please note that the DataGrid (not GridView as I was alluding to earlier) is in a DockPanel and the view is on a tab in a TabControl in our Shell.xaml.\n. There is no workaround that I'm aware of for using the Interactivity/MVVM popup method. We are forced to use MessageBox at this point which draws without issue on the secondary monitor. Once NuGet is aware of a Prism update we can try using that.\n. Unfortunately, my predicament repeated itself with a simpler view. The interactivity was defined at the top of the form (not in a grid). I have a custom confirmation view which when popped up on the secondary monitor displays fine. The moment the user tries moving the window it paints whatever is beneath the application window. If the user drags the window onto the primary window and back to the secondary window it paints correctly. It's very bizarre. We're using Windows 7 64-bit.\nOddly enough, your sample app for showing off Prism 5 features works correctly on either the primary or secondary monitor (including with VS 2015 with which our app is being developed). I'm totally befuddled. There's nothing that I'm aware of that is materially different between our applications that should cause these drawing issues other than I have a lot more libraries loaded up and a bit more functionality.\nIt looks like I will need to research using IDialogService. We'll retry this some time after an updated version of Prism goes to full (non-preview) release.\n. Yep, Prism was a red herring for us. Since the pop-ups were created by the Prism Interactivity namespace it seemed a likely culprit. And, we didn't see that bizarre transparent behavior happening anywhere else.\nWell. the blame goes to our styling of the main (shell) application window and a single property on the Window..... Background=\"Transparent\". Our window was customized to provide rounded corners and removal of the min/restore/max window buttons. Now, we'll have to figure out if/how to get around that Background setting.\nThanks for your patience and pointing us in the right direction, Brian.\n. ",
    "dmitrydvm": "I have long waited for this. Snippets are very necessary.\n. I can't find how to use ItemTemplates\nPrism ViewModel - A ViewModel that derives from BindableBase and has a default constructor.\nMenu \"Add - New Item\" not contain this template.\n. Aaah.. I have UWP project... Templates only for wpf and xamarin? I have not installed wpf and i have not this items in add menu window. \n\n. Ok, I'll be waiting :-)\n. I solve this problem. I'm beginner, therefore sorry for my code)\nI'm replace \n_sessionStateService.SessionState[\"TripsListToday\"] = TripsListToday; //TripsListToday is complex class\non \n_sessionStateService.SessionState[\"TripsListToday\"] = JsonConvert.SerializeObject(TripsListToday);\nAnd read it:\n```\n    public override void OnNavigatedTo(NavigatedToEventArgs e, Dictionary viewModelState)\n    {\n        base.OnNavigatedTo(e, viewModelState);\n    if (_sessionStateService.SessionState.ContainsKey(\"TripsListToday\"))\n    {\n        if (!string.IsNullOrEmpty(_sessionStateService.SessionState[\"TripsListToday\"] as string))\n        {\n            TripsListToday = JsonConvert.DeserializeObject<ObservableCollection<Trip>>(_sessionStateService.SessionState[\"TripsListToday\"].ToString());\n        }\n    }\n}\n\n```\nThis is workaround, but it work.\n. Add reference Windows Mobile Extensions for the UWP\n. Oh, i'm post wrong link :-(\nMy app write with Prism and my original question here http://stackoverflow.com/questions/39139336/how-to-implement-the-bread-crumbs-in-the-uwp-application?noredirect=1#comment65638098_39139336\nI'm sorry, please help me.\n. Maybe this can help you\nIn App.xaml.cs\nprotected override UIElement CreateShell(Frame rootFrame)\n    {\n        var shell = Container.Resolve<AppShell>();\n        shell.SetContentFrame(rootFrame);\n        return shell;\n    }\n\nIn AppShel.xaml.cs\n    public void SetContentFrame(Frame frame)\n    {\n        RootSplitView.Content = frame;\n    }\n\nIn AppShell.xaml\n<SplitView x:Name=\"RootSplitView\">\n    <SplitView.Content>\n        <Frame x:Name=\"ContentFrame\" />\n    </SplitView.Content>\n</SplitView>\n\n. ",
    "descite": "Please add \n<SnippetTypes>\n    <SnippetType>Expansion</SnippetType>\n</SnippetTypes>\nto snippets header. then snippets are usable directly from editor ( like prop snippet already available in vs).\nAnd we are not needed to use ctrl+k,ctl+s to use snippet. (visual studio 2015).. ",
    "nguyenthanhliemfc": "@brianlagunas Hi! How to Inport your Prism Snippet code to Resharper. Thank you!. @brianlagunas  your snippets code link die!!!. ",
    "andyfmking": "Yup, this seems like a problem with the folder path in the Tools -> Code Snippets Manager.\nWhen you choose csharp from the dropdown  selection for the programming language specific snippets, you'l find wrong folder location for the Prism folder (has an exclamation mark)\nSeems after installing the Prism Templates, wrong folder location gets added in the Snippets Manager pointing to a NON-Existing location.\nSOLUTION:\nRemove the wrong folder and \"ADD\" the folder from as described by Brian\nC:\\Users{UserName}\\AppData\\Local\\Microsoft\\VisualStudio(Version of VS)\\Extensions{Install ID}\\Snippets\\CSharp\\Prism\nBecause Extensions have some random folder names, its easier to search for \"PRISM\" folder when you are at the extensions folder, explorer will bring the Prism Snippets Folder for you.\nI had to change it manually to get the snippets to work.\nTook me a good 30 minutes of searching for this solution till I saw this reply.\nI'm not sure if installing Visual Studio 2017 in drive D:\\ instead of C:\\ could have cause this (just thinking out loud). ",
    "dbeavon": "I agree that MEF container support would be very nice to have in UWP, like we have in WPF.  As far as the arguments for not calling it a DI container (I.o.C. container, composition container, or whatever) these seem pretty unconvincing.  Other tools may work better for certain scenarios, but nobody can deny that MEF gets the job done too.\nThe discussions about semantics (whether to call MEF a DI container) are not that productive.  In the end, it gets the job done; it passes the \"duck test\" for resolving dependencies both internal and external (ie. it \"quacks like a duck\").   And, according to nuget download statistics, it is used fairly frequently in the context of Prism for WPF.\n. I'm experiencing exceptions being swallowed as well.  \nCan someone tell us, in layman's terms, how the DelegateCommand's Execute() method syntax is supposed to be used so that exceptions aren't swallowed and my app doesn't continue running after a fatal exception (like a walking dead).\nI've unwittingly used the DelegateCommand's Execute().\nBut the odd thing is that, whereas the DelegateCommand's Execute() exceptions get swallowed, I can simply cast to ICommand and call Execute(null) on the interface and then the exceptions cause the app to crash as expected.\nI'm not yet very familiar with the async/await service in C#, but in this context the stuff seems to be causing quite a bit of confusion for simple synchronous scenarios.  I agree that I shouldn't have to be digging into the source code of DelegateCommand as have been today for a couple hours.\nAs a side I should add that even the cast to ICommand and the call to ICommand.Execute(null) does not crash the app as directly as I would have liked.  The app crashes in a two-step process, first the command failure is trapped via this method here:\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task task)\nAnd subsequently crashes via the dispatcher like so:\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ThrowAsync.AnonymousMethod__6_0(object state)\n. To recap, both the call to DelegateCommand.Execute() and ICommand.Execute(null) walk out from the method call and continue on their way in the current callstack from which they were used.  \nThe only difference is that if ICommand.Execute(null) is used, the dispatcher comes right back and hits me with the following which causes the app to finally crash.\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.ThrowAsync.AnonymousMethod__6_0(object state)\nGiven that both of the \"Execute()\" method calls continue on their way after failure, is there a way to detect that a fatal error had occurred and short-circuit any other code that would otherwise follow?  No point in doing more work if the dispatcher is about to crash the app.\n. For now I'll stick with casting to ICommand and running its Execute(null).  Seems to crash as desired.  I'm assuming that my WPF bindings are working properly because they are based on the ICommand behavior as well.\n@brianlagunas  thanks for the very obvious pointer.  The point is that I have already caught and dealt with all the exceptions I care about.  The remainder of the exceptions are totally unexpected and above my pay-grade;  so those are the ones that need to crash the app.  I've learned to never trust an app that shows you a fatal error message and then doesn't crash.  The kinds of behaviors that follow from one of these apps are truly amazing.\nOf course WPF swallows exceptions in some other contexts as well.  But it doesn't seem right in DelegateCommand.Execute().  Maybe I'll add an extension method called ExecuteWithoutSwallowing.  ;)\n. Logging exceptions and/or showing them to the user is one thing.  Pushing forward and trying to keep your application running in the context of a totally unforeseeable and untested exception is another matter.\n@brianlagunas  \"An exception should never crash an app\".  Seriously?  What would your exception handling look like if you received an System.OutOfMemoryException?\nOf course I'd catch and handle all the possible exceptions I'm aware of, but its hubris to think any app can properly recover from totally unforeseeable exceptions.  In other words, if you haven't tested for a given exception, your app has a low likelihood of working properly when it is encountered.  That's why it needs to crash.\n. My main thought is probably to avoid DelegateCommand.Execute() as odd as that sounds, and only use it for async scenarios.  That method seems to be designed for the 20% usage scenarios and doesn't behave properly in the 80%.\nI'll stick with casting to ICommand and running its Execute(null).  That seems to be how WPF interacts with these DelegateCommands and the Prism API has little choice but to behave in a fairly reasonable way.\nI expect this topic will come up from time to time when others are building fairly standard line-of-business applications and discover that the apps aren't crashing when they should.  You would be amazed how end-users will send you a screenshot of some bizarre thing that is happening in the app, without mentioning another - preceeding and more significant - error message (which they think isn't relevant; but turns out to be the root cause for some form of latent viewmodel corruption).\n. ",
    "wesSE22020": "Will there be an updated developer guide for PRISM 6.0, in the same way as before with versions 4 and 5? \n. ",
    "aakansha": "Hi Bart,\nSure. According to my research there is some problem with Serialization in Prism codebase with .NET Native Compilation. Let me know what more info I can provide you with.\nThanks in advance for help.\n. @Riessfelt - I would suggest to debug your code by including Prism codebase from github. When you are debugging with the codebase, you will get the exact error with missing types. The exception will tell you which types need to be added in default.rd.xml. I initially started debugging this way and fixed my issue. In my scenario, I had several dependencies too which made it difficult to figure out where is the exact issue. You will get exception in SaveAsync() function of Prism codebase. \nI later realized that rather than adding list of all explicit list of types, we could do something like as shown below. Since we already know that we want to be able to serialize everything that gets passed into SessionStateService.RegisterKnownType, we can write a directive that looks like this:\n<Type Name=\u201dPrism.Windows.AppModel.SessionStateService\u201d>\n    <Method Name=\u201dRegisterKnownType\u201d>\n        <TypeParameter Name=\u201dtype\u201d DataContractSerializer=\u201dRequired All\u201d />\n    </Method>\n</Type>\nAny type passed as the parameter named \u201ctype\u201d to RegisterKnownType will be serialized. \n@bartlannoeye - I do have one question. Previously, we used to override OnRegisterKnownTypesForSerialization function to tell list of known types for the SuspensionManager in app.xaml.cs and add all RegisterKnownType in it.  \nMy question is what will be the effect if I don't override this function anymore in the app.xaml.cs since I already have added all the types in default.rd.xml??\n. ",
    "Riessfelt": "Hello. It looks like I am facing the same problem(Suspension does not work with .net native enabled). When I try to suspend my UWP application I get an exception:\nException name: Prism.Windows.AppModel.SessionStateServiceException\nMessage: \"Session state service failed\"\nStacktrace: \"   at Prism.Windows.AppModel.SessionStateService.d__5.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in f:\\dd\\ndp\\fxcore\\src\\System.Private.CoreLib\\System\\Runtime\\ExceptionServices\\ExceptionDispatchInfo.cs:line 66\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) in f:\\dd\\ndp\\fxcore\\src\\System.Private.Threading\\System\\Runtime\\CompilerServices\\TaskAwaiter.cs:line 186\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) in f:\\dd\\ndp\\fxcore\\src\\System.Private.Threading\\System\\Runtime\\CompilerServices\\TaskAwaiter.cs:line 155\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task) in f:\\dd\\ndp\\fxcore\\src\\System.Private.Threading\\System\\Runtime\\CompilerServices\\TaskAwaiter.cs:line 127\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult() in f:\\dd\\ndp\\fxcore\\src\\System.Private.Threading\\System\\Runtime\\CompilerServices\\TaskAwaiter.cs:line 112\\r\\n   at Prism.Windows.PrismApplication.d__61.MoveNext()\\r\\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() in f:\\dd\\ndp\\fxcore\\src\\System.Private.CoreLib\\System\\Runtime\\ExceptionServices\\ExceptionDispatchInfo.cs:line 66\\r\\n   at System.Threading.Tasks.ExceptionDispatchHelper.<>c__DisplayClass0.b__1(Object edi) in f:\\dd\\ndp\\fxcore\\src\\System.Runtime.WindowsRuntime\\System\\Threading\\Tasks\\ExceptionDispatchHelper.cs:line 28\\r\\n   at System.Threading.WinRTSynchronizationContext.Invoker.InvokeCore() in f:\\dd\\ndp\\fxcore\\src\\System.Private.Threading\\System\\Threading\\SynchronizationContext.cs:line 181\"\nInnerException: System.Runtime.Serialization.InvalidDataContractException\nMessage: \"SerializationCodeIsMissingForType. For more information, visit http://go.microsoft.com/fwlink/?LinkId=623485\"\nStacktrace: \"   at System.Runtime.Serialization.DataContract.GetDataContractFromGeneratedAssembly(Type type)\\r\\n   at System.Runtime.Serialization.DataContract.DataContractCriticalHelper.CreateDataContract(Int32 id, RuntimeTypeHandle typeHandle, Type type)\\r\\n   at System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetDataContractSkipValidation(Int32 id, RuntimeTypeHandle typeHandle, Type type)\\r\\n   at System.Runtime.Serialization.DataContract.GetDataContract(RuntimeTypeHandle typeHandle, Type type, SerializationMode mode)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerContext.GetDataContract(RuntimeTypeHandle typeHandle, Type type)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.SerializeWithXsiType(XmlWriterDelegator xmlWriter, Object obj, RuntimeTypeHandle objectTypeHandle, Type objectType, Int32 declaredTypeID, RuntimeTypeHandle declaredTypeHandle, Type declaredType)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.InternalSerialize(XmlWriterDelegator xmlWriter, Object obj, Boolean isDeclaredType, Boolean writeXsiType, Int32 declaredTypeID, RuntimeTypeHandle declaredTypeHandle)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.InternalSerializeReference(XmlWriterDelegator xmlWriter, Object obj, Boolean isDeclaredType, Boolean writeXsiType, Int32 declaredTypeID, RuntimeTypeHandle declaredTypeHandle)\\r\\n   at Type93.WriteKeyValueOfstringanyTypeToXml(XmlWriterDelegator A_0, Object A_1, XmlObjectSerializerWriteContext A_2, ClassDataContract A_3)\\r\\n   at System.Runtime.Serialization.XmlFormatCollectionWriterDelegate.InvokeOpenStaticThunk(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context, CollectionDataContract dataContract)\\r\\n   at System.Runtime.Serialization.XmlFormatClassWriterDelegate.Invoke(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context, ClassDataContract dataContract)\\r\\n   at System.Runtime.Serialization.ClassDataContract.WriteXmlValue(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context)\\r\\n   at Type90.WriteArrayOfKeyValueOfstringanyTypeToXml(XmlWriterDelegator A_0, Object A_1, XmlObjectSerializerWriteContext A_2, CollectionDataContract A_3)\\r\\n   at System.Runtime.Serialization.XmlFormatCollectionWriterDelegate.InvokeOpenStaticThunk(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context, CollectionDataContract dataContract)\\r\\n   at System.Runtime.Serialization.XmlFormatClassWriterDelegate.Invoke(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context, ClassDataContract dataContract)\\r\\n   at System.Runtime.Serialization.CollectionDataContract.WriteXmlValue(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.WriteDataContractValue(DataContract dataContract, XmlWriterDelegator xmlWriter, Object obj, RuntimeTypeHandle declaredTypeHandle)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.SerializeAndVerifyType(DataContract dataContract, XmlWriterDelegator xmlWriter, Object obj, Boolean verifyKnownType, RuntimeTypeHandle declaredTypeHandle, Type declaredType)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.SerializeWithXsiType(XmlWriterDelegator xmlWriter, Object obj, RuntimeTypeHandle objectTypeHandle, Type objectType, Int32 declaredTypeID, RuntimeTypeHandle declaredTypeHandle, Type declaredType)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.InternalSerialize(XmlWriterDelegator xmlWriter, Object obj, Boolean isDeclaredType, Boolean writeXsiType, Int32 declaredTypeID, RuntimeTypeHandle declaredTypeHandle)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.InternalSerializeReference(XmlWriterDelegator xmlWriter, Object obj, Boolean isDeclaredType, Boolean writeXsiType, Int32 declaredTypeID, RuntimeTypeHandle declaredTypeHandle)\\r\\n   at Type93.WriteKeyValueOfstringanyTypeToXml(XmlWriterDelegator A_0, Object A_1, XmlObjectSerializerWriteContext A_2, ClassDataContract A_3)\\r\\n   at System.Runtime.Serialization.XmlFormatCollectionWriterDelegate.InvokeOpenStaticThunk(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context, CollectionDataContract dataContract)\\r\\n   at System.Runtime.Serialization.XmlFormatClassWriterDelegate.Invoke(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context, ClassDataContract dataContract)\\r\\n   at System.Runtime.Serialization.ClassDataContract.WriteXmlValue(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context)\\r\\n   at Type90.WriteArrayOfKeyValueOfstringanyTypeToXml(XmlWriterDelegator A_0, Object A_1, XmlObjectSerializerWriteContext A_2, CollectionDataContract A_3)\\r\\n   at System.Runtime.Serialization.XmlFormatCollectionWriterDelegate.InvokeOpenStaticThunk(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context, CollectionDataContract dataContract)\\r\\n   at System.Runtime.Serialization.XmlFormatClassWriterDelegate.Invoke(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context, ClassDataContract dataContract)\\r\\n   at System.Runtime.Serialization.CollectionDataContract.WriteXmlValue(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.WriteDataContractValue(DataContract dataContract, XmlWriterDelegator xmlWriter, Object obj, RuntimeTypeHandle declaredTypeHandle)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.SerializeAndVerifyType(DataContract dataContract, XmlWriterDelegator xmlWriter, Object obj, Boolean verifyKnownType, RuntimeTypeHandle declaredTypeHandle, Type declaredType)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.SerializeWithXsiType(XmlWriterDelegator xmlWriter, Object obj, RuntimeTypeHandle objectTypeHandle, Type objectType, Int32 declaredTypeID, RuntimeTypeHandle declaredTypeHandle, Type declaredType)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.InternalSerialize(XmlWriterDelegator xmlWriter, Object obj, Boolean isDeclaredType, Boolean writeXsiType, Int32 declaredTypeID, RuntimeTypeHandle declaredTypeHandle)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.InternalSerializeReference(XmlWriterDelegator xmlWriter, Object obj, Boolean isDeclaredType, Boolean writeXsiType, Int32 declaredTypeID, RuntimeTypeHandle declaredTypeHandle)\\r\\n   at Type93.WriteKeyValueOfstringanyTypeToXml(XmlWriterDelegator A_0, Object A_1, XmlObjectSerializerWriteContext A_2, ClassDataContract A_3)\\r\\n   at System.Runtime.Serialization.XmlFormatCollectionWriterDelegate.InvokeOpenStaticThunk(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context, CollectionDataContract dataContract)\\r\\n   at System.Runtime.Serialization.XmlFormatClassWriterDelegate.Invoke(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context, ClassDataContract dataContract)\\r\\n   at System.Runtime.Serialization.ClassDataContract.WriteXmlValue(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context)\\r\\n   at Type90.WriteArrayOfKeyValueOfstringanyTypeToXml(XmlWriterDelegator A_0, Object A_1, XmlObjectSerializerWriteContext A_2, CollectionDataContract A_3)\\r\\n   at System.Runtime.Serialization.XmlFormatCollectionWriterDelegate.InvokeOpenStaticThunk(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context, CollectionDataContract dataContract)\\r\\n   at System.Runtime.Serialization.XmlFormatClassWriterDelegate.Invoke(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context, ClassDataContract dataContract)\\r\\n   at System.Runtime.Serialization.CollectionDataContract.WriteXmlValue(XmlWriterDelegator xmlWriter, Object obj, XmlObjectSerializerWriteContext context)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.WriteDataContractValue(DataContract dataContract, XmlWriterDelegator xmlWriter, Object obj, RuntimeTypeHandle declaredTypeHandle)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializerWriteContext.SerializeWithoutXsiType(DataContract dataContract, XmlWriterDelegator xmlWriter, Object obj, RuntimeTypeHandle declaredTypeHandle)\\r\\n   at System.Runtime.Serialization.DataContractSerializer.InternalWriteObjectContent(XmlWriterDelegator writer, Object graph, DataContractResolver dataContractResolver)\\r\\n   at System.Runtime.Serialization.DataContractSerializer.InternalWriteObject(XmlWriterDelegator writer, Object graph, DataContractResolver dataContractResolver)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializer.WriteObjectHandleExceptions(XmlWriterDelegator writer, Object graph, DataContractResolver dataContractResolver)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializer.WriteObject(XmlDictionaryWriter writer, Object graph)\\r\\n   at System.Runtime.Serialization.XmlObjectSerializer.WriteObject(Stream stream, Object graph)\\r\\n   at Prism.Windows.AppModel.SessionStateService.d__5.MoveNext()\"\nSteps to reproduce:\n1). Clone this git repo https://bitbucket.org/TocoToucan/myanimelistrt . You can remove stuff like third party Syncfusion controls because they are not related to this problem.\n2). Debug it with .net native enabled.\n3). Click \"Suspend and shutdown\" in VS.\nAdditional info:\n1). Without .net native suspension works ok.\n2). Test account for my app: MyanimelistRT/headhunterRT\n. Why did you add \"to verify\" label without doing any issue related commits?\n. I modified my Default.rd.xml and decorated types/properties using [DataContract] and [DataMember] attributes. It didn't solve my problem, still the same session state related exception.\nBtw, I am not sure that my Default.rd.xml file is correct. You can view its content here http://pastebin.com/iCZBxLp3\n. ",
    "505aaron": "I have hit the same problem and I believe it is due to the runtime definition file missing types serialized by the SessionStateService. I'll add a comment if I can determine which declarations are required for Prism to work with native compilations.\nSee here https://msdn.microsoft.com/en-us/library/dn600639%28v=vs.110%29.aspx\n. As I a workaround I created my own SessionStateService implementation that uses JSON.Net library instead of DataContractSerializer. I exposed my known serialized types in the runtime definition file. \nHere is the implementation of SaveAsync and RestoreSessionStateAsync\n``` csharp\n /// \n        /// Save the current . Any  instances\n        /// registered with  will also preserve their current\n        /// navigation stack, which in turn gives their active  an opportunity\n        /// to save its state.\n        /// \n        /// An asynchronous task that reflects when session state has been saved.\n        public async Task SaveAsync()\n        {\n            try\n            {\n                // Save the navigation state for all registered frames\n                foreach (var weakFrameReference in _registeredFrames)\n                {\n                    IFrameFacade frame;\n                    if (weakFrameReference.TryGetTarget(out frame))\n                    {\n                        SaveFrameNavigationState(frame);\n                    }\n                }\n            JsonSerializer serializer = new JsonSerializer\n            {\n                TypeNameHandling = TypeNameHandling.All,\n                DateFormatHandling = DateFormatHandling.IsoDateFormat,\n                DateTimeZoneHandling = DateTimeZoneHandling.Utc,\n            };\n\n            // Serialize the session state synchronously to avoid asynchronous access to shared\n            // state\n            using (MemoryStream sessionData = new MemoryStream())\n            using (var jsonTextWriter = new JsonTextWriter(new StreamWriter(sessionData)))\n            {\n                serializer.Serialize(jsonTextWriter, _sessionState);\n\n                // Flush to the underyling stream.\n                jsonTextWriter.Flush();\n\n                // Get an output stream for the SessionState file and write the state asynchronously\n                StorageFile file =\n                    await\n                        ApplicationData.Current.LocalFolder.CreateFileAsync(SessionStateFileName,\n                            CreationCollisionOption.ReplaceExisting);\n                using (var fileStream = await file.OpenAsync(FileAccessMode.ReadWrite))\n                {\n                    sessionData.Seek(0, SeekOrigin.Begin);\n                    var provider = new DataProtectionProvider(\"LOCAL=user\");\n\n                    // Encrypt the session data and write it to disk.\n                    await provider.ProtectStreamAsync(sessionData.AsInputStream(), fileStream);\n                    await fileStream.FlushAsync();\n                }\n            }\n        }\n        catch (Exception e)\n        {\n            throw new SessionStateServiceException(e);\n        }\n    }\n\n    /// <summary>\n    /// Restores previously saved <see cref=\"SessionState\"/>.\n    /// </summary>\n    /// <returns>An asynchronous task that reflects when session state has been read. The\n    /// content of <see cref=\"SessionState\"/> should not be relied upon until this task\n    /// completes.</returns>\n    public async Task RestoreSessionStateAsync()\n    {\n        _sessionState = new Dictionary<String, Object>();\n\n        try\n        {\n            JsonSerializer serializer = new JsonSerializer\n            {\n                TypeNameHandling = TypeNameHandling.All,\n                DateFormatHandling = DateFormatHandling.IsoDateFormat,\n                DateTimeZoneHandling = DateTimeZoneHandling.Utc,\n            };\n\n            // Get the input stream for the SessionState file\n            StorageFile file = await ApplicationData.Current.LocalFolder.GetFileAsync(SessionStateFileName);\n\n            using (IInputStream inStream = await file.OpenSequentialReadAsync())\n            using (var memoryStream = new MemoryStream())\n            {\n                var provider = new DataProtectionProvider(\"LOCAL=user\");\n\n                // Decrypt the prevously saved session data.\n                await provider.UnprotectStreamAsync(inStream, memoryStream.AsOutputStream());\n                memoryStream.Seek(0, SeekOrigin.Begin);\n\n                using (var reader = new JsonTextReader(new StreamReader(memoryStream)))\n                {\n                    // Deserialize the Session State\n                    _sessionState = serializer.Deserialize<Dictionary<string, object>>(reader);\n                }\n            }\n        }\n        catch (Exception e)\n        {\n            throw new SessionStateServiceException(e);\n        }\n    }\n\n```\nHere is a sample runtime definition file\n``` xml\n\n\n\n      An Assembly element with Name=\"*Application*\" applies to all assemblies in\n      the application package. The asterisks are not wildcards.\n    \n\n<!-- Add your application specific runtime directives here. -->\n<Namespace Name=\"Models\" Serialize=\"Required PublicAndInternal\">\n  <Type Name=\"MyModelClass\" Browse=\"Required Public\" Serialize=\"Public\"/>\n\n\n\n\n```\n. ",
    "chendu4u": "Any update on this issue \nMessage = \"Session state service failed\"\nInnerException = {\"Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\"}\nat Prism.Windows.AppModel.SessionStateService.d__5.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Prism.Windows.PrismApplication.d__56.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.<>c.b__6_0(Object state)\n   at System.Threading.WinRTSynchronizationContext.Invoker.InvokeCore()\n. ",
    "PrakashSSV": "cannot inherit from a type that is not marked with DataContractAttribute or SerializableAttribute.  Consider marking the base type 'Prism.Windows.Mvvm.ViewModelBase' with DataContractAttribute or SerializableAttribute, or removing them from the derived type.\n. ",
    "artemious7": "I added this to my Default.rd.xml and it worked.\n<Namespace Name=\"MyNamespace.PagePayloads\" \n                      Serialize=\"Required PublicAndInternal\"\n                      Browse=\"Required Public\"\n                      DataContractSerializer=\"Required Public\" />\nThe namespace \"MyNamespace.PagePayloads\" contains all the types that are serialized by Prism when Suspending. . @bartlannoeye \nYou told it was planned for 1st week of August. Last days of August - still nothing fixed? :-(. ",
    "billSpaulding": "Hi Brian, \nThank you for the response. I previously did not have android 23 installed but also was not building the android project. For the heck of it I installed 23 and re downloaded the prism repo in the provided link but unfortunately experienced the same result. It froze visual studio 2013 and 2015 on two different machines requiring me to kill the VS process with task manager.\nare you sure those projects run?\nthank you,\nbill \nDate: Mon, 7 Dec 2015 10:14:47 -0800\nFrom: notifications@github.com\nTo: Prism@noreply.github.com\nCC: billspaulding33@hotmail.com\nSubject: Re: [Prism] Can Not Compile Latest XF Sample (#339)\nThe XF samples located here are not built against the current code base:  https://github.com/PrismLibrary/Prism-Samples-Forms\nThis sample is built against the current code base and is what I use for testing all my the navigation scenarios:  https://github.com/PrismLibrary/Prism/tree/master/Samples/Xamarin/HelloWorld\nMake sure you have Android Marshmallow installed as the sample is built against that API and will not run without it.\n\u2014\nReply to this email directly or view it on GitHub.\n. couldn't agree more! problem is I can not get the sample or source to compile. I'm sure I'm missing something somewhere but when attempting to compile this source\nhttps://github.com/PrismLibrary/Prism/tree/master/Source\nI receive a number of namespace errors related to  'Unity' no longer being in the 'Microsoft' namespace. \nare there any steps that need to be taken that I'm possibly missing? or does it perhaps sound like I have the wrong build of one of the libraries either XF/PRISM.Forms/Unity\nif anything comes to mind please do let me know. Its just hard to imagine that I'm missing something in this process of simply downloading a repo and compiling it!\nThank You,Bill\nDate: Mon, 7 Dec 2015 12:04:28 -0800\nFrom: notifications@github.com\nTo: Prism@noreply.github.com\nCC: billspaulding33@hotmail.com\nSubject: Re: [Prism] Can Not Compile Latest XF Sample (#339)\nYes, it works.  I actively develop with it.  If that doesn't want to work for you then just create a new project and start from scratch.  Use the sample code to help you get started, but only use it as reference.  No reason to spend so much time trying to get a throw away sample to work anyways :)\n\u2014\nReply to this email directly or view it on GitHub.\n. if you mean properties > unblock prior to unzipping yes that is correct I am\nthen opening Prism-master\\Prism-master\\Samples\\Xamarin\\HelloWorld solution \nthen I restore the packages and rebuild. I receive about 80 exceptions here are a few\nSeverity Code Description Project File Line\nError CS0115 'App.OnInitialized()': no suitable method found to override HelloWorld C:\\Users\\bills\\Downloads\\Prism-master\\Prism-master\\Samples\\Xamarin\\HelloWorld\\HelloWorld\\HelloWorld\\App.cs 8\nSeverity Code Description Project File Line\nError CS0234 The type or namespace name 'App' does not exist in the namespace 'HelloWorld' (are you missing an assembly reference?) HelloWorld.WinPhone C:\\Users\\bills\\Downloads\\Prism-master\\Prism-master\\Samples\\Xamarin\\HelloWorld\\HelloWorld\\HelloWorld.WinPhone\\MainPage.xaml.cs 23\nError CS0115 'App.RegisterTypes()': no suitable method found to override HelloWorld C:\\Users\\bills\\Downloads\\Prism-master\\Prism-master\\Samples\\Xamarin\\HelloWorld\\HelloWorld\\HelloWorld\\App.cs 13Severity Code Description Project File Line\nSeverity Code Description Project File Line\nError CS0234 The type or namespace name 'Navigation' does not exist in the namespace 'Prism' (are you missing an assembly reference?) HelloWorld C:\\Users\\bills\\Downloads\\Prism-master\\Prism-master\\Samples\\Xamarin\\HelloWorld\\HelloWorld\\HelloWorld\\ViewModels\\ViewBViewModel.cs 1\nError CS0234 The type or namespace name 'Navigation' does not exist in the namespace 'Prism' (are you missing an assembly reference?) HelloWorld C:\\Users\\bills\\Downloads\\Prism-master\\Prism-master\\Samples\\Xamarin\\HelloWorld\\HelloWorld\\HelloWorld\\ViewModels\\MainPageViewModel.cs 5Severity Code Description Project File Line\nError CS0246 The type or namespace name 'INavigationService' could not be found (are you missing a using directive or an assembly reference?) HelloWorld C:\\Users\\bills\\Downloads\\Prism-master\\Prism-master\\Samples\\Xamarin\\HelloWorld\\HelloWorld\\HelloWorld\\ViewModels\\MainPageViewModel.cs 12Severity Code Description Project File Line\nDate: Mon, 7 Dec 2015 17:15:31 -0800\nFrom: notifications@github.com\nTo: Prism@noreply.github.com\nCC: billspaulding33@hotmail.com\nSubject: Re: [Prism] Can Not Compile Latest XF Sample (#339)\nWait... are you unblocking the zip file before you unzip it?\n\u2014\nReply to this email directly or view it on GitHub.\n. managed to get a little further. down to 7 errors. initialize component for each view throws. .... if this rings a bell and you know what it is great! if not it must be on my end and ill figure it out. thank you very much for the time you have spent looking at this.\nSeverity Code Description Project File Line\nError CS0103 The name 'InitializeComponent' does not exist in the current context HelloWorld C:\\Users\\bills\\Downloads\\Prism-master\\Prism-master\\Samples\\Xamarin\\HelloWorld\\HelloWorld\\HelloWorld\\Views\\MyNavigationPage.xaml.cs 16\nSeverity Code Description Project File Line\nError CS0103 The name 'InitializeComponent' does not exist in the current context HelloWorld C:\\Users\\bills\\Downloads\\Prism-master\\Prism-master\\Samples\\Xamarin\\HelloWorld\\HelloWorld\\HelloWorld\\Views\\MyTabbedPage.xaml.cs 17\nSeverity Code Description Project File Line\nError CS0103 The name 'InitializeComponent' does not exist in the current context HelloWorld C:\\Users\\bills\\Downloads\\Prism-master\\Prism-master\\Samples\\Xamarin\\HelloWorld\\HelloWorld\\HelloWorld\\Views\\ViewA.xaml.cs 16\nSeverity Code Description Project File Line\nError CS0103 The name 'InitializeComponent' does not exist in the current context HelloWorld C:\\Users\\bills\\Downloads\\Prism-master\\Prism-master\\Samples\\Xamarin\\HelloWorld\\HelloWorld\\HelloWorld\\Views\\MyMasterDetail.xaml.cs 15\nDate: Mon, 7 Dec 2015 17:15:31 -0800\nFrom: notifications@github.com\nTo: Prism@noreply.github.com\nCC: billspaulding33@hotmail.com\nSubject: Re: [Prism] Can Not Compile Latest XF Sample (#339)\nWait... are you unblocking the zip file before you unzip it?\n\u2014\nReply to this email directly or view it on GitHub.\n. yup that works! I assume this is all I really need. thanks again\nDate: Mon, 7 Dec 2015 17:36:26 -0800\nFrom: notifications@github.com\nTo: Prism@noreply.github.com\nCC: billspaulding33@hotmail.com\nSubject: Re: [Prism] Can Not Compile Latest XF Sample (#339)\ntry opening just the PrismLibrary_XF solution and just build that.\n\u2014\nReply to this email directly or view it on GitHub.\n. ahh yeah that was it :-) they were just intelli sense errors runs \nive used PRISM navigation in most projects over last 5 years but thought it might be a good idea to stick with the out-of-the-box navigation stack for XF. it seems to have some issues with memory leaks though and I'm wondering if you experienced the same or heard similar reports? that's the main issue I'm hoping to solve with using the new NAV scenarios. With Xamarin I can see the correct number of objects being released in the profiler when I pop a page off the stack but it still accumulates something after every push/pop even with a blank page with zero objects holding reference such as tooltip, event handler or binding context.  Also I'm thinking that the dependency service you have will help with the static invokes for the various plugins which may also be part of my issues.\nany memory leak issues in XF that you are aware of or things to be mindful of id love to hear them.\nthank you very much for your time\nBill\nDate: Mon, 7 Dec 2015 17:44:34 -0800\nFrom: notifications@github.com\nTo: Prism@noreply.github.com\nCC: billspaulding33@hotmail.com\nSubject: Re: [Prism] Can Not Compile Latest XF Sample (#339)\nBasically hit F5 and see what happens\n\u2014\nReply to this email directly or view it on GitHub.\n. yes that is what brought up the question. just wanted to make sure I wasn't somehow on a different navigation stack. thank you for that clarification. \n. Hello,\nwhat behavior should I expect here?\nif I have a navigation flow such as the following\n MyMasterDetail/MyNavigationPage/ViewA\nThen from ViewA I navigate to ViewB   by setting the use modal flag to true resulting in this flow\nMyMasterDetail/MyNavigationPage/ViewA/ViewB\nThen I navigate back to ViewA by using the GoBack() on the nav service ending in this flow\nMyMasterDetail/MyNavigationPage/ViewA/\nQuestion: Should I expect the onNavigatedTo event to fire on ViewA when ViewB calls GoBack()?\nthe scenario is essentially a user using a master detail page to navigate to a customer list which is hosted in a nav page. from there they navigate to a specific customer \"ViewA\" and from there a subset of information on the specific user \"ViewB\"\nIf the answer is YES was this a recent commit? \nThank You,\nBill\n.  the response time on this forum is incredible. thank you for that.\non the topic of navigation is there an option available to pass an instance of a page? as an example if ViewB in the above scenario has very expensive resources with potentially lengthy initialization for reasons beyond my control (3rd party api)  that I would prefer to reuse rather than create/dispose. can I reuse a page instance like is possible with XF.Navigation\n. \"but in a future version there will be a way to cache pages for use during navigation.\"\nthis would be fantastic\nthank you,\n. Earlier you said:\n\"This is correct. Since ViewA was the view you navigated to by calling GoBack, then INavigationAware is called on ViewA. It wouldn't make sense to call INavigationAware methods on any other view that was not the target of the navigation.\"\nI am not observing this behavior. (last build I grabbed from GIT was about 10 days ago) in the code below in App.cs I navigate to the UserContactListView and its OnNavigatedToEvent is fired as expected. When navigating to UserContactRequestListView from UserContactListView and calling GoBack() to return to UserContactListView its OnNavigatedTo is not fired which I did expect to happen based on your response. \nhere is the complete process. I'm guessing I either have something wrong or misinterpreted your response\nCALLED IN APP.CS\n await NavigationService.Navigate(\"RootMasterDetailView/MainNavigationView/UserContactListView\");\nCALLED IN USERCONTACTLISTVIEWMODEL.CS\n _navigationService.Navigate(\"UserContactRequestList\", useModalNavigation:true);\nCALLED IN USERCONTACTREQUESTLISTVIEWMODEL.CS\n _navigationService.GoBack();\n. no problem. ill let you know what i find or that i fixed my own issue :-) \n. I was unable to reproduce this using the sample XF solution. the implementation is straight forward enough. for whatever reason my solution has poppedPage as null. I have no idea why but this doesn't appear to be an issue with PRISM\nvar poppedPage = await DoPop(page.Navigation, useModalForDoPop, animated);\nif (poppedPage != null)\n            OnNavigatedTo(previousPage, segmentParameters);\nI'm wondering if I'm possibly using the Navigation Service in a manner that is not valid. Is the following process correct?\nthis is from App.cs and its the first time the Nav service is invoked. the intent is to load the apps main master detail view a navigation view and a content page for the navigation view\nawait NavigationService.Navigate(\"RootMasterDetailView/MainNavigationView/DashboardView\");\nNow if the user opens the menu page for the master detail view (rootMasterDetailView) and clicks a menu item to navigate to their contact list is it valid to do the following (leave off 'RootMasterDetailView/' from the uri) with the intent on NOT having to reload to master detail view. this is being called from the MainNavigationViewModel\nawait NavigationService.Navigate(\"MainNavigationView/UserContactListView\");\nand then from there if the user wants to see a detail view of a contact within the contact list they click a list item and they navigate to the UserProfileDetailView using this Navigation call originating from the above targets view model (UserContactListViewModel)\nawait NavigationService.Navigate(\"UserProfileDetailView\");\ndidn't spend a lot of time with it but on a first pass of the above implementation it does appear to allow the masterdetailview to not have to be reloaded and all works as expected aside from not having the menu icon for the masterdetailview that is used to open the menu\n. Hi Brian, hopefully they give you a day off now and then! \nOk my problem was clearly not understanding the mechanics of the navigation service. your reply makes perfect sense. Thank you very much for the continued help\n. After spending some time reviewing your response I realized I had initially misinterpreted it. I wasn't clear on exactly what you meant by navigating from MainNavigationView. \nYou wrote :\n\"So, if you want to push another page onto your MainNavigationView, then you simply call  Navigate(\"TheOtherView\");  from your MainNavigationViewModel.\"\nBased on the sample solution I am assuming you meant if I wanted to push an additional page onto the stack I would simply call navigate from the content pages viewmodel (one hosted in the navigation page) and not on MainNavigationViewModel which in my solution is the same as MyNavigationPageViewModel in the XF sample. In the sample no navigation is executed from that page only in the master detail and the actual content pages that are loaded into the navigation page.\nwhich means I still have a problem with onNavigatedTo not being called when closing a modal. I am able to reproduce the issue with the sample slightly modified \nIn the sample XF solution App.cs calls\nNavigationService.Navigate(\"MyMasterDetail/MyNavigationPage/ViewA\"); \nchange ViewAViewModel Nav method to:\n_navigationService.Navigate(\"ViewB\", useModalNavigation:true); \nchange ViewBViewModel Nav method to:\n _navigationService.GoBack(useModalNavigation: true);\nNavigate to ViewB then back to ViewA and ViewAViewModel's onNavigatedToEvent does not fire. the reason is the method below returns null for the previous page. the issue appears to be here\n--------snippet from method below-----\n   MODALSTACKCOUNT EVALUTES TO 1 AS EXPECTED\n int modalStackCount = page.Navigation.ModalStack.Count;\nTHIS LINE WILL RESULT IN PREVIOUSPAGEINDEX BEING ASSIGNED A VALUE OF -1 (modal stack count of 1 - (-2))\n                int previousPageIndex = modalStackCount - 2;\nTHIS LINE WILL ALWAYS EVALUATE TO FALSE DUE TO PREVIOUSPAGEINDEX being >0\n                if (modalStackCount > 0 && previousPageIndex >= 0)\n-------snippet from method below------\nFROM PageNavigationService.cs \n static Page GetPreviousPage(Page page, bool useModalNavigation)\n        {\n            Page previousPage = null;\n```\n        if (useModalNavigation)\n        {\n            int modalStackCount = page.Navigation.ModalStack.Count;\n            int previousPageIndex = modalStackCount - 2;\n            if (modalStackCount > 0 && previousPageIndex >= 0)\n            {\n                previousPage = page.Navigation.ModalStack[previousPageIndex];\n            }\n        }\n        else\n        {\n            int navStackCount = page.Navigation.NavigationStack.Count;\n            int previousPageIndex = navStackCount - 2;\n            if (navStackCount > 0 && previousPageIndex >= 0)\n            {\n                previousPage = page.Navigation.NavigationStack[previousPageIndex];\n            }\n        if (previousPage == null)\n            previousPage = GetPreviousPage(page, true);\n    }\n\n    return previousPage;\n}\n\n```\n. you wrote:\n\"I do find it odd that you are navigating modal from a NavigationPage\"\nI didn't think I was but its also very possible I have some concepts mixed up. Its to my understanding that in XF if I want to load a page into the detail property of a master detail page and I want to be able to navigate to other pages from that page then it must be a navigation page.\nso in my scenario I load the master detail , the navigation page and a content page\nRootMasterDetailView/MainNavigationView/UserContactListView\nonce I'm on UserContactListView there are navigation options that use both true/false for modal. if the user is looking at their contact list and they have pending contact requests a link is present. this is just a one page view that has a list of requests and an accept/decline button. it doesn't navigate to any other page so I use modal = true. and GoBack(modal = true) to return from it\nfrom the same UserContactListView the user may select a contact from the list. in this scenario I use modal = false because the page they are going to UserProfileDetailView has additional navigation options so I use non modal navigation. from the UserProfileDetailView the user may elect to see a map view, a street view or a list of notification options all accessed via modal screens. \nIn general I looked at modal like I would a flyout or popup control and non modal for actual pages. if this is not correct please let me know.\nI still wouldn't be surprised if I'm just not getting something but in the GoBackMethod() the result of the call to GetPreviousPage() is passed to  OnNavigatedTo(previousPage, segmentParameters);\nwouldn't we want to pass in the page that is the target of the navigation and not the page that was just popped off the modal stack?\n. taking a closer look at GetPreviousPage() on the PageNavigationService and I see how it works flawlessly for non modal navigation. However when using modal navigation it seems that we cant actually get a handle on the previous page regardless of the usemodal flag. When entering the method after invoking GoBack() from a modal neither the modal stack nor the nav stack contains the actual last page. The only page that appears to be accessible is the last modal that was opened. It would seem that we would need access to the page that called Navigate(modal = true) because that is the page instance that needs to be passed to OnNavigatedTo method of PageNavigationClass for its OnNavigatedToEvent to fire.\nout of curiosity why do we set the modal stack count variable to -2? To me that is implying that we think both the content page and the modal page are in the same stack but I really haven't spent much time looking at it. I know that XF treats both as individual navigation stacks. It almost seems like we are working with a different Navigation context in this method because I am unable to see the page that invoked the modal.\nstatic Page GetPreviousPage(Page page, bool useModalNavigation)\n        {\n            Page previousPage = null;\n```\n        if (useModalNavigation)\n        {\n            int modalStackCount = page.Navigation.ModalStack.Count;\n            int previousPageIndex = modalStackCount - 2;\n            if (modalStackCount > 0 && previousPageIndex >= 0)\n            {\n                previousPage = page.Navigation.ModalStack[1];\n            }\n        }\n        else\n        {\n            int navStackCount = page.Navigation.NavigationStack.Count;\n            int previousPageIndex = navStackCount - 2;\n            if (navStackCount > 0 && previousPageIndex >= 0)\n            {\n                previousPage = page.Navigation.NavigationStack[previousPageIndex];\n            }\n        if (previousPage == null)\n            previousPage = GetPreviousPage(page, true);\n    }\n\n    return previousPage;\n}\n\n```\n. the following code would appear to address the issue with not passing the correct 'previous page'. not sure its the most elegant but it does get the events to fire as expected\nif we could add this to the GoBack() method as the function that gets the previous page that is passed to OnNavigatedTo\nthe intent here is to get a reference back to the viewmodel that called navigate(modal = true) so that we can fire its on navigatedto event when the modal is closed\nvar page = GetCurrentPage();\nPrismApplicationBase  MyPRISMApp = (PrismApplicationBase)page.Parent;\n        MasterDetailPage MyDetailPage = (MasterDetailPage)MyPRISMApp.MainPage;\n        NavigationPage MyNavigationPage = (NavigationPage)MyDetailPage.Detail;\n        var canNavigate = await CanNavigateAsync(page, segmentParameters);\nOnNavigatedTo(MyNavigationPage.CurrentPage, segmentParameters);\n. agreed. I have been thinking about other scenarios that may be impacted. not sure if its a simple overload/flag for this one use case or if the permutations would get out of hand. Considering MasterDetail page is one of the most common navigation patterns I think it probably should be supported somehow especially if the nav service allows for it from a navigation standpoint. \nbut this problem I don't feel is specific to masterdetail if I'm not mistaken its going to surface any time someone uses modal navigation and then calls GoBack(). If your on ViewA and you invoke the navigation service with modal = true to get to ViewB when you call GoBack from ViewModelB OnNavigatedTo on ViewModelA will not fire because  the incorrect 'previous' page gets passed to OnNavigatedTo in the PageService class.  combine this with Xamarin not having hooks into the back button on the Nav page so we can also fire OnNavigatedTo on that click event results in having to implement a number of workarounds or rethink navigation. PRISM offers the same nav concepts across all clients that's one of the reasons I love it!\nif I come across any other use cases for GoBack ill share them\nthanks again\n. i have some time over the next few days and would be happy to help in anyway i can. if you agree with either approach below i can spend some time developing them.\n1)have the user pass in a 2nd parameter when setting modal = true. the 2nd parameter would express the page type that they navigated from. that will be needed by the PageService class to determine which processing logic to apply to get the correct page. so the method would largely stay the same aside from maybe a switch statement that evaluates the new page type parameter so that it can invoke the corresponding logic to get the needed page. haven't thought it through but I'm guessing there would be 1-3 scenarios supported by 1-3 helper methods encapsulating code like i presented above\nassumption: i have only deployed a solution using XF and PRISM to IPHONE. I am assuming that the modal = true parameter is the same on IPHONE and ANDROID in that from the users perspective the page slides in from bottom opposed to sliding in left to right beyond that there is no difference. On WINDOWS PHONE i don't think it has an impact.\n2) If the assumption is true then it may be possible to just have the modal parameter control how the page is presented to the user. slide left to right / slide in from bottom. if I'm not mistaken goback would then work in every scenario. my code above is only needed because there is no reference to the page i initiated navigation from when using modal. whether there are hooks for this or not is something i have no clue about. \n. very good points. its funny i was just thinking that you probably had a similar conversation with yourself after you started on the multiple nav scenario features! \nas for page types i was referring to a string representation that is nothing more than an indicator for the PageNavigationService to infer what the page type of the target navigation is\nfor clarity i am not navigating from one modal to another at anytime if that is what you meant by \n\" Also, just because you are going back modally doesn't mean that the target is a modal view\"\nmy scenarios are all MasterDetail>NavigationPage>TheContentPageOfTheNavigationPage> and then to a modal. when using modal it is always from a content page and directly back. one push / one pop.\nok i will give this some thought and see if i can come up with anything\n. i think this is going in the right direction. so far it has handled all cases ive tried and it does not impact the existing GoBack() method\na few assumptions\n- the only pages of interest are those that contain their own navigation stack and that is limited to tabbed/master detail and navigation\n- a tabbed page and a master detail page can only host a navigation page or a content page\n- a navigation page can only host a content page\n- * this is a big assumption here but i think it is accurate. we don't need to be concerned with the number of instances of a page type, the index of the nav stack, the depth of the nav stack. Because in this scenario we are only trying to get a handle on the page that called navigate(modal = true) so the page we need will ALWAYS be the current page.\ncould call the method below from the previousPage method replacing the logic for modal navigation\n\nstatic Page GetPreviousPage(Page page, bool useModalNavigation)\n        {\n            Page previousPage = null;\nif (useModalNavigation)\n        {\n            //int modalStackCount = page.Navigation.ModalStack.Count;\n            //int previousPageIndex = modalStackCount - 2;\n            //if (modalStackCount > 0 && previousPageIndex >= 0)\n            //{\n            //    previousPage = page.Navigation.ModalStack[1];\n            //}\n            previousPage = GetBackNavigationTargetForModalPage(page);\n        }\n        els\n\nstatic Page GetBackNavigationTargetForModalPage(Page page)\n        {\n            //create a Page variable to hold our response\n            Page previousPage = null;\n            //get an instance to the current PRISM application\n            PrismApplicationBase MyPRISMApp = (PrismApplicationBase)page.Parent;\n```\n        Type thePageType = MyPRISMApp.MainPage.GetType();\n        string test = thePageType.GetTypeInfo().BaseType.ToString();\n        //determine the page type of the current page of the current application\n        switch (thePageType.GetTypeInfo().BaseType.ToString())\n        {\n        //evaluate the case statements to find a match and execute the appropriate logic for deriving the \n        //modal navigation target\n        case \"Xamarin.Forms.ContentPage\":\n            //a content page has no other possible associated pages\n            previousPage = MyPRISMApp.MainPage;\n            break;\n        case \"Xamarin.Forms.NavigationPage\":\n            //cast to a navigation page type\n            NavigationPage TargetNavigationPage = (NavigationPage)MyPRISMApp.MainPage;\n            //set the previous page to the navigation page's current page\n            previousPage = TargetNavigationPage.CurrentPage;\n            break;\n        case \"Xamarin.Forms.TabbedPage\":\n            //cast to a tabbed page type\n            TabbedPage MyTabbedPage = (TabbedPage)MyPRISMApp.MainPage;\n            Type tabbedPagePageType = MyTabbedPage.GetType();\n            //a tabbed page may contain either a content page or a navigation page\n            //we check for both scenarios\n            if (tabbedPagePageType.GetTypeInfo().BaseType.ToString() == \"Xamarin.Forms.NavigationPage\")\n            {\n                //cast to a navigation page type\n                NavigationPage MyNavigationPage = (NavigationPage)MyTabbedPage.CurrentPage;\n                //set previous page response to the current page of the Navigation Page\n                previousPage = MyNavigationPage.CurrentPage;\n            }//in this scenario the tabbed page contains a simple content page\n            else if (tabbedPagePageType.GetTypeInfo().BaseType.ToString() == \"Xamarin.Forms.ContentPage\")\n            {\n                //set the previousPage response to the tabbed page current content page\n                previousPage = MyTabbedPage.CurrentPage;\n            }\n            break;\n        case \"Xamarin.Forms.MasterDetailPage\":\n            //cast to a MasterDetail page type\n            MasterDetailPage MyDetailPage = (MasterDetailPage)MyPRISMApp.MainPage;\n            Type masterPageDetailPageType = MyDetailPage.Detail.GetType();\n            //the MasterDetail page type can contain either a Navigation Page or a Content Page\n            //we test for both\n            if (masterPageDetailPageType.GetTypeInfo().BaseType.ToString() == \"Xamarin.Forms.NavigationPage\")\n            {\n                //cast to a navigation page\n                NavigationPage MyNavigationPage = (NavigationPage)MyDetailPage.Detail;\n                //set the previousPage response to the current page of the NavigationPage\n                previousPage = MyNavigationPage.CurrentPage;\n            }\n            else if (masterPageDetailPageType.GetTypeInfo().BaseType.ToString() ==  \"Xamarin.Forms.ContentPage\")\n            {\n                //set the previousPage response to the content page of the MasterDetailPage.Detail\n                previousPage = MyDetailPage.Detail;\n            }\n            break;\n    }\n   // return the response;\n    return previousPage;\n}\n\n```\n. this  Application.Current.MainPage;\nreturns a different object than this  PrismApplicationBase MyPRISMApp = (PrismApplicationBase)page.Parent;\nthe 2nd one returns the page you called from. the first one appears to return the nav stack of the page that was navigated to. if you navigate to ViewB from ViewA using modal=true the nav stack returned from Application.Current.MainPage shows an empty navigation stack and a modal navigation stack with 1 page. this call PrismApplicationBase MyPRISMApp = (PrismApplicationBase)page.Parent;\nwill return the nav stack that was used to navigate to the modal.\nthe question i have is who owns the nav stack that is returned from  Application.Current.MainPage? because if i naviagate to a content page and that page is passed into GoBack() that call will return a page object with both nav stack only modal will be populated. how does the content page have a nav stack\n. i get what you are saying and i would also have used that approach but what I'm seeing is that this code \nPrismApplicationBase MyPRISMApp = (PrismApplicationBase)page.Parent;\nGets the page of interest without having to iterate and look for a match and deal with index, etc.\n. you wrote:\n\"Every one of those is possible and actually should be expected.\"\nsorry for any confusion but i was suggesting that they are all indeed true.\n. ok that makes sense that the content page is essentially starting a new navigation root when navigated to from the parent. that's also what i observed with the two different sets of stacks...got it\nbut if Page.Parent doesn't work I'm wondering how you might go about getting a reference to the modals parent. \n. sorry. not parent but the page that invoked the modal navigation!\nat this point the method i shared earlier works on the scenarios below but i have seen others that it will not work on. at least not as is. Luckily i only need the below scenarios for the time being and to keep moving forward. thanks again for all the time you have given\nNavigationService.Navigate(\"ViewA/ViewB\");\n NavigationService.Navigate(\"MyTabbedPage/MyNavigationPage/ViewA\");\n NavigationService.Navigate(\"MyMasterDetail/MyNavigationPage/ViewA\");\n. you wrote:\n\"The first step should be finding the position of the current page in the proper stack. Then find the page prior to it in the stack. Then iterate over the prior pages modal and nav stack to find the proper page to call OnNavigatedTo\" \nI spent some time revisiting your suggestions. if you happen to have time to elaborate on the above statement please do. This is a low priority and you have already given plenty of time so no worries if I you have other items.\nthe part I need clairification on is \n- if by current page of the proper stack you mean the modal I navigated to I do not believe there would be a previous page since the modal starts a new navigation root\n- if by current page of the proper stack you mean the one that I navigated to the modal from then its not imediatley clear to me the value in getting the previous page to it because it is not the targer of the back navigation.\n- when you say we need to find the proper page in the proper stack are you saying that a navigation event can be initiated from a page that is in a position other than the stacks current page? this I think has been a source of real confusion for me beccuase it implies that as I move back pages are not popped off the stack. For example when calling GoBack we need to get a reference to the navigation stack that invoked the modal navigation. it will contain the page that we want to fire OnNavigatedTo. Why would we need to iterate over that stack to find a specific page? How could it be any page other than the current page? Doesn't the current page have to be the last one pushed onto the stack prior to navigating to the modal?\nBill\n. to try to bring some clarity to the above questions if you have a nav flow like\nMyMasterDetail>MyNavPage>ViewA>ModalViewB\nthe way I understand things is this will result in two different navigation stacks.\n1- ModalViewB will contain a modal stack with a count of 1 and a nav stack with a count of 0\n2- ViewA will contain a nav stack with a count of 1 and a modal count of 0\nViewA is the current page on the previous nav stack prior to navigating to ModalViewB. Now when you say we need to use the index position it would seem that would only be for an edge case in which I navigated backwards on the stack WITHOUT popping any pages and THEN called navigate(modal = true) otherwise how would the page that we need to invoke OnNavigatedTo on be any page other than the current page of the navigation stack that initiated the modal navigation\n. oh boy :-) please disregard all of these questions! I set a break point at every method in the pageNavigationClass and It didn't take long to see how drastically I underestimated the complexity. \nI think much of the complexity is due to trying to bring a unified approach to what really is two different concepts XFs nav stack and navmodal stack but if you can figure it out hats off to you!\ncouple of last thoughts. saying these with the understanding that I don't know the rest of the PRISM source to determine if they would cause issues in other directions.. just have a few diffent ways of thinking about the problem.\n- could expose the nav stacks separately\n- could have the pageNavService listen for the current page modal pushed event and store that page in a _lastPageToPushModal variable. I don't know about state or where it would be stored but if it were possible on GOBack() you would have the needed page instance without having to work through a riddle. \n- on modal nav request pass in the current page or get access to it some other way so the signature stays the same and store that page. again you would have the page without the iterative search effort and special case handling based on  page type\n- make the modal nav nothing more than a visual effect.\nI noticed you have some pluralsight courses on PRISM going to check them out. thanks again I wish I could have been of more help!\n. Thank you for that clarification. \n. ",
    "stesvis": "I am not sure this is my same case scenario, but I also have a login page (which is the root).\nAfter log in they are redirected to a dashboard page.\nHow can I set the dashboard as new root, so that NavigationService.GoBackToRootAsync() will go to that page instead of the login page?. After some digging, I managed to make it work.\nI believe the problem that I was navigating to my form page modally. After I changed it to \nNavigateAsync(\"NavigationPage/AuctionFormPage\", null, false)\nthe GoBackAsyncmethod works fine now.. Sorry guys, what namespace is prism in Command=\"{prism:GoBack}\"?\nI get this error:\n\nType GoBack not found in xmlns clr-namespace:Prism.Mvvm;assembly=Prism.Forms. Ahhh thank you!\nI got confused because i already had this in the xaml page:\nxmlns:prism=\"clr-namespace:Prism.Mvvm;assembly=Prism.Forms\". That would be awesomeee!\nThanks Brian. +1!. When will this be available in the stable NuGet package?\nI'm sorry @brianlagunas I am not sure where to get that CI build.\nI tried this but I am not able to install it:\n\n```\nPM> Install-Package Prism.Forms -Version 7.2.0.757-ci -Source https://www.myget.org/F/prism/api/v3/index.json\nThe 'Source' parameter is not respected for the transitive package management based project(s) Mobile\\LiveDispatch.Mobile. The enabled sources in your NuGet configuration will be used. \nRestoring packages for R:\\Levitica\\LiveDispatch\\LiveDispatch.Mobile\\LiveDispatch.Mobile\\LiveDispatch.Mobile.csproj...\n  GET https://api.nuget.org/v3-flatcontainer/prism.forms/index.json\n  OK https://api.nuget.org/v3-flatcontainer/prism.forms/index.json 419ms\nInstall-Package : NU1102: Unable to find package Prism.Forms with version (>= 7.2.0.757-ci)\n  - Found 34 version(s) in nuget.org [ Nearest version: 7.2.0.708-pre ]\n  - Found 0 version(s) in Microsoft Visual Studio Offline Packages\nAt line:1 char:1\n+ Install-Package Prism.Forms -Version 7.2.0.757-ci -Source https://www ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\nInstall-Package : Package restore failed. Rolling back package changes for 'LiveDispatch.Mobile'.\nAt line:1 char:1\n+ Install-Package Prism.Forms -Version 7.2.0.757-ci -Source https://www ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\nTime Elapsed: 00:00:01.8535102\n``. Thanks, if i am not mistaken, does the latest version require the pre-release of Xamarin.Forms?. I can't do that because when I receive a notification in App.Xaml i redirect them to the details page like this:await NavigationService.NavigateAsync($\"MainMasterDetail/Navigation/MainTabbedPage?selectedTab=WorkOrders/WorkOrderDetails?id={workOrderId}\"):So going back would always go back to the previous page in that stack, which isMainMasterDetail/Navigation/MainTabbedPage?selectedTab=WorkOrders`. ",
    "hetzlefetz": "Try navigating using \"../YourDashboard\". This way the login page should be\nremoved from the stack if I understood the feature correctly\nOn Tue, May 15, 2018, 20:57 stesvis notifications@github.com wrote:\n\nI am not sure this is my same case scenario, but I also have a login page\n(which is the root).\nAfter log in they are redirected to a dashboard page.\nHow can I set the dashboard as new root, so that\nNavigationService.GoBackToRootAsync() will go to that page instead of the\nlogin page?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/343#issuecomment-389275986,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AOkTfzOAZx5V3s3tUKQ-Mvp11pfrBsEfks5tyyT9gaJpZM4GyBMl\n.\n. \n",
    "adrianknight89": "I tried \"../YourDashboard\". Works like a charm.. I have a timer on a page that animates UI on page entry and stops the animation on page exit. When the user goes back to the same page, the animation should start again, but this is not possible with the current implementation of OnNavigatedTo.\nSince I'm new to MVVM, I'm also debating whether this is the job of View or ViewModel.\n. I need this functionality as well. Hope they can release an API soon.\n. +1 for android splash screen\n. No. I figured it out. Make sure your first page is a NavigationPage. Have a look at MyNavigationPage here: https://github.com/PrismLibrary/Prism/tree/master/Sandbox/Xamarin/HelloWorld/HelloWorld/HelloWorld/Views\nIn App.cs, you do NavigationService.NavigateAsync(\"MyNavigationPage/FirstView\")\nSo you need to create MyNavigationPage and FirstView in order just to navigate to FirstView.\n. Welcome. :)\n. Would really like to see this along with basic converters. As of now, I'm using event to command off of EventToCommandBehavior.\n. Thanks. That was quick. :)\n. Here's how the semaphore approach would look with each command having a separate semaphore (different commands should be able to process in parallel):\nprivate readonly SemaphoreSlim _command1SemaphoreSlim = new SemaphoreSlim(1);\nprivate readonly SemaphoreSlim _command2SemaphoreSlim = new SemaphoreSlim(1);\n```\nCommand1 = new DelegateCommand(async () =>\n{\n    await _command1SemaphoreSlim.WaitAsync();\n try\n {\n      Command1CanExecute = false;\n      // run async code\n  }\n  finally\n  {\n        _command1SemaphoreSlim.Release();\n        Command1CanExecute = true;\n   }\n\n}).ObservesCanExecute(p => Command1CanExecute);\nCommand2 = new DelegateCommand(async () =>\n{\n    await _command2SemaphoreSlim.WaitAsync();\n try\n {\n      Command2CanExecute = false;\n      // run async code\n  }\n  finally\n  {\n        _command2SemaphoreSlim.Release();\n        Command2CanExecute = true;\n   }\n\n}).ObservesCanExecute(p => Command2CanExecute);\n```\n. @dansiegel OK. Remove control template from XAML markup and uncomment code behind in Page2. Let me know if listview data is rendered or not.\n. Filed a Xamarin bug report here: https://bugzilla.xamarin.com/show_bug.cgi?id=43706\n. There were appearing / disappearing issues with XF TabbedPage which got fixed recently (post  2.3.1.114). Update to the latest pre-release and see if your scenario is the same.\nAlso, if I'm not mistaken, putting a tabbed page inside a navigation page is not recommended by Apple.\n. containerRegistry.RegisterInstance(Xamarin.Forms.Forms.Context); fixed my issue as well. Looking forward to an actual fix! Thanks @dansiegel . Thanks. Looking forward to an update.. @brianlagunas Awesome. Thanks for your work, guys!. I think this might be an issue with all custom renderers. I tried to add one for a custom Entry and got the same exception.. ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation can be left in MainActivity.\nStartActivity(typeof(MainActivity)); is a simpler form.\n. I'd probably add <item name=\"android:windowFullscreen\">true</item> in commented form in case anyone wants to hide the status bar. For beginners, finding this syntax could be a bit of work.\nAlso, the following is probably unnecessary?\n<item name=\"android:windowIsTranslucent\">false</item>\n     <item name=\"android:windowIsFloating\">false</item>\n     <item name=\"android:backgroundDimEnabled\">true</item>\n. ",
    "kodejack": "Hi Brian, \nLoving using Prism with Xamarin, we are building around 50 apps for a client using it. However we are hitting issues with the INavigationAware methods not getting called when pressing the Back Button in the Nav Bar.\n\nThe only difference is, for the moment, the INavigationAware methods don't get called when using the back button. I hope to fix that soon.\n\nAs above you mentioned you would be looking into this, is there any update on this issue?\nWe are able to work round some of the issues using OnAppearing in the Pages but not all.\nThanks Gordon  \n. Thanks for the speedy response we tested this and the view transition had already completed before INavigationAware method was called. We need to know earlier than that, looking at the notes confirm navigation maybe what we are looking for, I'll let you know if this resolves our issue.. ",
    "LucioMSP": "Hi, \nI have a issue using Prism, because I want open a ContentPage that can be see everywhere of the App, so, I tried this:\nApp.cs\npublic void OnTapGestureRecognizerTapped(object sender, EventArgs e)\n        {\n            Device.BeginInvokeOnMainThread(async () =>\n            {\n                await NavigationService.NavigateAsync(\"SystemDetailPage\", useModalNavigation: true, animated: false);\n            });\n        }\nAnd on the SystemDetailPage.cs have this:\nprivate void okClick()\n        {\n           ((DemoApp.App)App.Current).Close();\n        }\nThat return to the App.cs:\npublic async void Close()\n        { await NavigationService.GoBackAsync(useModalNavigation:true );\n       }\nAll this did not works, do you know why? I just try close the new screen (SystemDetailPage)\n. ",
    "mmalek06": "Thanks Brian. It seems that I found a solution for this problem (in my app at least) - I stopped binding directly to a ViewModel instance, and instead I'm binding CommandParameter to one of my ViewModel properties. Then I'm just going through Items collection and removing item that has a matching property value. Now VS diagnostic tools are not showing any objects which should have been GCed and therefore memory leak is gone.\n. Great! Can't wait to hearing from you.\n. ",
    "Qwin": "Yeah so what I did, I customized it to create a new Region Manager for each window. (I actually just copied there code and customized it instead of using it as is) I created an extension for the root RegionManager with a static list that has all regionmanagers with unique guid to identify it. Also I added a property where I can check (after loaded event has been fired) if I am in a popout view. Because sometimes the same view can be in the main window as well as in a popout. The differentiation seems to be very important when creating complex applications. Other then that it seems easy to customize this class to your liking's. \n. Ok thanks for the links will check it out. :)\n. I went through your videos and its a great solution, thank you for that! I couldn't find this solution online though (as you mentioned in the video). a \"How To\" section would be great indeed. \n. So is it correct for me to say that whatever I register to the Parent Region Manager all child (scoped) region managers will inherit the same registrations ? Because that is happening now for me :/ \n. Ah I see now I was searching for that code. So it was in a behavior. Would be great if it was also documented. Thanks again you saved me a million! :) :+1:\n. Will do that np, actually I am writing a \"How To\" for the people in my company on these parts.  I will do a couple of PRs. Also I always wondered but why did you never add the IRegionManagerAware (And the behaviors etc) just to the framework. I find it a key part for prism :) \n. Shorten definitely is better.\n. ",
    "TsengSR": "That seems like a design flaw though. My ViewModels require navigation properties, which is implemented in ViewModelBase and hence it would make sense to have the ViewModelBase in the core package, as navigation is applicable to WPF and Silverlight applications too. \nThe ViewModelBase contains nothing Windows 10 or Windows Phone 8.1 specific in it, forcing us to reimplement the ViewModelBase on our own, would make the ViewModelBase in Prism.Windows obsolete.\nIt would be nice if it would be moved to Prism.Core. In worst case, the INavigationAware impelemtation would do nothing (when viewModelState is null) or work equally to Windows Phone/Store Apps, as it contains no persistance logic.\nHow else should we implement navigation Logic into our ViewModel, that's not bound to a certain platform? ViewModels in MVVM have to be decoupled, so we can reuse them in WPF, Silverlight, UWP, Windows Phone/Store Apps, Console Apps and even ASP.NET MVC. Some of these platforms of course don't utilize navigation, so it won't be called. But the ViewModel still needs to implement it, otherwise we have to reimplement the ViewModel for other platforms, kind of beating the original goal of MVVM. \nAlso what's the reasoning behind this? The Prism for Windows Runtime Framework did had an \"ViewModel\" class (which seems to be more more less exact implementation of the ViewModelBase) that worked with PCL. \nI always disliked the idea, that the Prism for Runtime was a distinct framework (distinct from traditional Prism), rathern than one single framework. When I read that we have to use Prism 6 for UWP I was expecting to have one unifed framework, rather than two like before. \nAs an addition: The implementation is especially a problem when I intend to use Xamarin to have the possibility to port the App to Android & iOS it makes little sense to have the base class inside the Prism.Windows assembly. Currently I don't see how to have my ViewModels portable & reusable\n. ",
    "jingliancui": "hello,i am the person requested boback event yesterday.\n after i seen email that you tell me to overrider something here:\n357\nand then i go to see your source:\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Windows10/Prism.Windows/PrismApplication.cs\nfound that in this function:InitializeFrameAsync(IActivatedEventArgs args),\n DeviceGestureService.GoBackRequested += OnGoBackRequested;\n the OnGoBackRequested is private and so the result is what ever what i do for my backevent,\n system will excute my backevent and always excuting your private OnGoBackRequested function.\nso,I just didn't what to excute your private function that will let my app Exit.....\n please do something for me to remove the handler DeviceGestureService.GoBackRequested in your InitializeFrameAsync funtion.\nthankyou\n. hello,i solve this problem\uff0cbut i know this is still a bug in your PrismLibrary,i just use e.Cancel = true; to cancel your private function on your library.\nso ,hope you will let the prismlibrary more and more perfect.\nthank you bye\nSolve Problem Code:\n    /// \n/// Provides application-specific behavior to supplement the default Application class.\n/// </summary>\n\n\nsealed partial class App : PrismUnityApplication\n{  \n    /// <summary>\n\n\n    /// Initializes the singleton application object.  This is the first line of authored code\n    /// executed, and as such is the logical equivalent of main() or WinMain().\n    /// </summary>\n\n\n    public App()\n    {\n        this.InitializeComponent();\n\n```\n    }\nprivate void DeviceGestureService_GoBackRequested(object sender, Prism.Windows.AppModel.DeviceGestureEventArgs e)\n{ \n    e.Cancel = true;// I think that will cancel your private funcion which in your \n                    //InitializeFrameAsync(IActivatedEventArgs args)\n                    //DeviceGestureService.GoBackRequested += OnGoBackRequested;\n\n    e.Handled = false;//false to suspend\n\n\n    //await new MessageDialog(\"Press back\").ShowAsync();\n\n    //at last,success to cancel your function's executing by e.Cancel = true;.\n    //And,what i see is if you didn't use arm platform,you can't see this bug,if you deploy this app to phone,an delete e.Cancel = true; you will see this bug.\n    //you can't see this bug on pc because i know pc can not execute Exit() which in your private function OnGoBackRequested.\n    //thank you\n}\n\nprotected override Task OnLaunchApplicationAsync(LaunchActivatedEventArgs args)\n{\n    NavigationService.Navigate(\"Main\", null);\n    SystemNavigationManager.GetForCurrentView().AppViewBackButtonVisibility = AppViewBackButtonVisibility.Visible;\n    DeviceGestureService.GoBackRequested += DeviceGestureService_GoBackRequested;\n    return Task.FromResult<object>(null);\n}\n\nprotected override void ConfigureContainer()\n{\n    base.ConfigureContainer();\n\n}\n\n}\n```\n. Hello @bartlannoeye ,That ok,I expect the //build too and I will wait for the solution by seeing this thread usually.\n. Hello@bartlannoeye  :) Have you checked the issue is Prism problem or the EF7 problem?\n. Hello @bartlannoeye ,sorry to create new issue thread for you .\nThe thread you close is this problem your team not give me the answer:\n504\nRaw uwp frame work is no problem use ef7sqlite rc2 with release mode.\n But,If I use prism with these 2 think (ef7sqlite rc2 and release mode ),It crash.\n Same problem as #504 \n But now is the ef7 rc2 which updated at 2015/05/16.\n So can you check the thread #504 and the new sample code in my share onedrive?\nhttps://onedrive.live.com/redir?resid=C78B7E4A6377EC22!249164&authkey=!AN8hVlZgjwIc5Bg&ithint=file%2crar\n. Hello @bartlannoeye  @brianlagunas  Glad to hear that you can try it again.\nIf something I can help you ,please tell me , I will try my best for this library,because I love this prism framework.\n. @brianlagunas @bartlannoeye \nThat's issue is throw from .net native . \nThe ef team give me solution here:\nhttps://github.com/aspnet/EntityFramework/issues/5517\n. ",
    "DOliana": "I had the same Problem and was able to solve it as You said. Right now I have the Problem, that after each save of the App.xaml file the generated App.g.cs file inherits from Xamarin.Forms.App and not from Prism.Unity.PrismApplication.\nDo You have any idea how to correct this?\n. They are. This is my App.xaml:\n<PrismApplication xmlns=\"http://xamarin.com/schemas/2014/forms\"\n                  xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n                  x:Class=\"MyNamespace.App.App\">\n    <Application.Resources>\n        <ResourceDictionary>\n        ...\n        </ResourceDictionary>\n    </Application.Resources>\n</PrismApplication>\nAnd this is my App.xaml.xs:\npublic partial class App : PrismApplication\n    {\n        protected override void OnInitialized()\n        {\n            InitializeComponent();\n            NavigationService.Navigate<LoginPageViewModel>();\n        }\n}\nOne Thing though: Could it be because I changed to an App.xaml after Setting everything up with Prism?\n. ARGH! Thank You very much - sometimes it's the little things...\n. ",
    "kkrzysiek": "\nEach time you navigate to a page, the page is created and the VM is then created. It will not recreate the VM when going back to the page via a GoBack call. Only when navigating to the page. We do not provide page caching yet as there are a number of issues that have to be solved first. Namely, a page instance cannot exist in the stack twice. So a new page instance must be created when navigating to a page. So if caching, should we automatically remove the page from it's previous position in the stack (which stack) and the add it at the end? Maybe, maybe not. As you can see, this it just the tip of the iceberg.\n\nHi Brian, \nI'd like to ask if maybe you are aware if anything was done in this topic? . ",
    "INRIX-Eric-Hargitt": "One of the scenarios is a login page. When my app starts, I will navigate to the main view of the app, then push a login page on top of that if they aren't signed in. I don't want them to be able to navigate back without being signed in, and I wanted to control this using CanNavigate().\nAnother scenario is when a user is on the main view and they navigate to a page that will modify data of the main view. When the user is finished modifying and navigates back to the main view, I'd like to invoke OnNavigatedTo() for the main view to do some update logic. \n. From what I understand, calling GoBack() will actually navigate back to the previous view.\n. Using the preview version, I was able to make this work. I'm having a different issue, but I'll open a new thread when I have more info. Thanks for being so responsive and for your work on Prism!\n. ",
    "InquisitorJax": "That's exactly it. I started a new XP project covering UWP & XF - but immediately hit the wall of not being able to host my view models in a shared portable library - which is what I think most XPlat implementations would do.\n. my 2 cents on the topic: baking in navigation into the view models is a fundamentally flawed design - because of the point stated that different platforms handle navigation so differently.\nIn the XPlat implementations I have done thus far, view models only know how to load and save state - platform navigation implementations then call into these methods - and view models can access navigation behind a INavigationService interface.\nIt would be great if prism could support this kind of scenario.\nCan I also just add as an aside a word of thanks to the contributors - even though I can't use the full power of prism yet - the other core implementations like commands and Event Aggregators are immensely helpful.\n. Hi Brian,\n\" Even an INavigationService interface cannot be standardized across all platforms,\" - in a cross platform mvvm framework I helped build - we standardized the INavigationService to something like:\nNavigate(string destination, Dictionary parameters); The platform-specific implementations would then resolve the logical destination to the actual platform-specific implementation. Each view is treated as a type of addressable url resource - therefore only string parameters are allowed for navigation - the ViewModels are responsible for loading their state given the string key/value context.\nI realize I'm probably over-simplifying things ito the prism framework - but it would really be super-cool if the ViewModels could be shared - I hope you will re-consider this enhancement in the future.\n. ",
    "mglodack": "@brianlagunas What do you think about providing a method called Clear?\nhttps://github.com/PrismLibrary/Prism/compare/master...mglodack:clear_all_views_in_region\n. Much better name than 'Clear'. And yes I would expect to be able access the old view if needed. Thanks @brianlagunas \ud83d\udc4d\n. @brianlagunas I don't think this issue has been fully resolved yet.\nSo would I be able to remove individual items from the forward or back stack on the IRegionNavigationJournalEntry ? Or would you recommend calling Clear() if I removed a view from my region?\n. I want to call GoBack() but not record the stack change.\n. Yes that is what I would expect to see\n. Currently, the GoBack() and GoForward() methods for the RegionNavigationJournal put the old entry onto either stack. \nWhat I propose is to ignore putting that old entry on the stack and that would not conflict with the current implementations of the stack.\n. Here is why I'm facing this problem.\nIf I navigate to ViewA -> ViewB -> ViewC. I then call delete on ViewC, and navigate back to ViewB using Region.NavigationService.Journal.GoBack().\nHowever, the RegionNavigationJournal keeps ViewC in the stack (so I can still call Region.NavigationService.Journal.GoForward() whereas I want to navigate back and ignore the save to the stack.\n. Thank you @bartlannoeye \n. ",
    "SeletskySergey": "I have implementation of MEF2 bootstrapper, I use it in my current project it works really fast.\n`using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.Practices.ServiceLocation;\nusing Prism.Logging;\nusing Prism.Modularity;\nusing Prism.Regions;\nusing System.Composition.Convention;\nusing System.Composition.Hosting;\nusing System.Composition;\nusing System.Windows.Controls;\nusing System.Windows.Controls.Primitives;\nusing Prism;\nusing Prism.Events;\nusing Prism.Regions.Behaviors;\nusing Telerik.Windows.Controls;\nnamespace TelerikShell\n{\n    public abstract class Mef2Bootstrapper : Bootstrapper\n    {\n        [Export]\n        public CompositionHost Container { get; set; }\n        protected ContainerConfiguration ContainerConfig { get; set; }\n```\n    protected ConventionBuilder Builder { set; get; }\nprotected Mef2Bootstrapper()\n{\n    ContainerConfig = new ContainerConfiguration();\n    ConfigureConventions();\n    ContainerConfig.WithAssemblies(AppDomain.CurrentDomain.GetAssemblies(), Builder);\n}\n\nprotected override void InitializeModules()\n{\n    this.Container.GetExport<IModuleManager>().Run();\n}\n\nprotected virtual void ConfigureConventions()\n{\n    Builder = new ConventionBuilder();\n\n    Builder.ForType<EmptyLogger>().ExportInterfaces().Shared();\n    Builder.ForType<ModuleCatalog>().ExportInterfaces().Shared();\n    Builder.ForType<Mef2ServiceLocator>().ExportInterfaces().Shared();\n    Builder.ForType<RegionAdapterMappings>().Export().Shared();\n\n    Builder.ForType<SelectorRegionAdapter>().Export().ExportInterfaces().Shared();\n    Builder.ForType<ItemsControlRegionAdapter>().Export().ExportInterfaces().Shared();\n    Builder.ForType<ContentControlRegionAdapter>().Export().ExportInterfaces().Shared();\n\n    Builder.ForType<RegionManager>().Export().ExportInterfaces().Shared();\n    Builder.ForType<EventAggregator>().ExportInterfaces().Shared();\n    Builder.ForType<RegionNavigationJournalEntry>().ExportInterfaces().Shared();\n    Builder.ForType<RegionViewRegistry>().ExportInterfaces().Shared();\n    Builder.ForType<RegionNavigationJournal>().ExportInterfaces().Shared();\n    Builder.ForType<RegionNavigationContentLoader>().ExportInterfaces().Shared();\n    Builder.ForType<RegionBehaviorFactory>().ExportInterfaces().Shared();\n    Builder.ForType<ModuleManager>().ExportInterfaces().Shared();\n    Builder.ForType<ModuleInitializer>().ExportInterfaces().Shared();\n\n\n    Builder.ForType<AutoPopulateRegionBehavior>().Export().ExportInterfaces();\n    Builder.ForType<BindRegionContextToDependencyObjectBehavior>().Export().ExportInterfaces();\n    Builder.ForType<ClearChildViewsRegionBehavior>().Export().ExportInterfaces();\n    Builder.ForType<DelayedRegionCreationBehavior>().Export().ExportInterfaces();\n    Builder.ForType<RegionActiveAwareBehavior>().Export().ExportInterfaces();\n    Builder.ForType<RegionManagerRegistrationBehavior>().Export().ExportInterfaces();\n    Builder.ForType<RegionMemberLifetimeBehavior>().Export().ExportInterfaces();\n    Builder.ForType<SelectorItemsSourceSyncBehavior>().Export().ExportInterfaces();\n    Builder.ForType<SyncRegionContextWithHostBehavior>().Export().ExportInterfaces();\n}\n\nprotected override void ConfigureServiceLocator()\n{\n    var serviceLocator = Container.GetExport<IServiceLocator>();\n    ServiceLocator.SetLocatorProvider((() => serviceLocator));\n}\n\nprotected override RegionAdapterMappings ConfigureRegionAdapterMappings()\n{\n    var instance = Container.GetExport<RegionAdapterMappings>();\n    instance.RegisterMapping(typeof(Selector), Container.GetExport<SelectorRegionAdapter>());\n    instance.RegisterMapping(typeof(ItemsControl), Container.GetExport<ItemsControlRegionAdapter>());\n    instance.RegisterMapping(typeof(ContentControl), Container.GetExport<ContentControlRegionAdapter>());\n    instance.RegisterMapping(typeof(RadPaneGroup), Container.GetExport<RadPaneGroupRegionAdapter>());\n    return instance;\n}\n\npublic override void Run(bool runWithDefaultConfiguration)\n{\n    this.ModuleCatalog = this.CreateModuleCatalog();\n    this.ConfigureModuleCatalog();\n    this.Container = ContainerConfig.CreateContainer();\n    Mef2ServiceLocator.Host = Container;\n    this.ConfigureServiceLocator();\n    this.ConfigureViewModelLocator();\n    this.ConfigureRegionAdapterMappings();\n    this.ConfigureDefaultRegionBehaviors();\n    this.RegisterFrameworkExceptionTypes();\n\n    this.Shell = this.CreateShell();\n\n    if (this.Shell != null)\n    {\n        RegionManager.SetRegionManager(this.Shell, this.Container.GetExport<IRegionManager>());      \n        RegionManager.UpdateRegions();\n        this.InitializeShell();\n    }\n\n    var exports = Container.GetExports<IModuleManager>();\n    if (exports != null && exports.Any())\n    {\n        this.InitializeModules();\n    }\n\n    var modules = Container.GetExports<IModule>();\n    foreach (var module in modules)\n    {\n        module.Initialize();\n    }\n}\n\n}\n```\n}\n. [Prism.Mef2.Wpf.zip](https://github.com/PrismLibrary/Prism/files/432553/Prism.Mef2.Wpf.zip)\n. https://github.com/PrismLibrary/Prism/pull/741\n. I have implemented MEF2 bootstraper\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.Practices.ServiceLocation;\nusing Prism.Logging;\nusing Prism.Modularity;\nusing Prism.Regions;\nusing System.Composition.Convention;\nusing System.Composition.Hosting;\nusing System.Composition;\nusing System.Windows.Controls;\nusing System.Windows.Controls.Primitives;\nusing Prism;\nusing Prism.Events;\nusing Prism.Regions.Behaviors;\nusing Telerik.Windows.Controls;\nnamespace TelerikShell\n{\n    public abstract class Mef2Bootstrapper : Bootstrapper\n    {\n        [Export]\n        public CompositionHost Container { get; set; }\n        protected ContainerConfiguration ContainerConfig { get; set; }\n```\n    protected ConventionBuilder Builder { set; get; }\nprotected Mef2Bootstrapper()\n{\n    ContainerConfig = new ContainerConfiguration();\n    ConfigureConventions();\n    ContainerConfig.WithAssemblies(AppDomain.CurrentDomain.GetAssemblies(), Builder);\n}\n\nprotected override void InitializeModules()\n{\n    this.Container.GetExport<IModuleManager>().Run();\n}\n\nprotected virtual void ConfigureConventions()\n{\n    Builder = new ConventionBuilder();\n\n    Builder.ForType<EmptyLogger>().ExportInterfaces().Shared();\n    Builder.ForType<ModuleCatalog>().ExportInterfaces().Shared();\n    Builder.ForType<Mef2ServiceLocator>().ExportInterfaces().Shared();\n    Builder.ForType<RegionAdapterMappings>().Export().Shared();\n\n    Builder.ForType<SelectorRegionAdapter>().Export().ExportInterfaces().Shared();\n    Builder.ForType<ItemsControlRegionAdapter>().Export().ExportInterfaces().Shared();\n    Builder.ForType<ContentControlRegionAdapter>().Export().ExportInterfaces().Shared();\n\n    Builder.ForType<RegionManager>().Export().ExportInterfaces().Shared();\n    Builder.ForType<EventAggregator>().ExportInterfaces().Shared();\n    Builder.ForType<RegionNavigationJournalEntry>().ExportInterfaces().Shared();\n    Builder.ForType<RegionViewRegistry>().ExportInterfaces().Shared();\n    Builder.ForType<RegionNavigationJournal>().ExportInterfaces().Shared();\n    Builder.ForType<RegionNavigationContentLoader>().ExportInterfaces().Shared();\n    Builder.ForType<RegionBehaviorFactory>().ExportInterfaces().Shared();\n    Builder.ForType<ModuleManager>().ExportInterfaces().Shared();\n    Builder.ForType<ModuleInitializer>().ExportInterfaces().Shared();\n\n\n    Builder.ForType<AutoPopulateRegionBehavior>().Export().ExportInterfaces();\n    Builder.ForType<BindRegionContextToDependencyObjectBehavior>().Export().ExportInterfaces();\n    Builder.ForType<ClearChildViewsRegionBehavior>().Export().ExportInterfaces();\n    Builder.ForType<DelayedRegionCreationBehavior>().Export().ExportInterfaces();\n    Builder.ForType<RegionActiveAwareBehavior>().Export().ExportInterfaces();\n    Builder.ForType<RegionManagerRegistrationBehavior>().Export().ExportInterfaces();\n    Builder.ForType<RegionMemberLifetimeBehavior>().Export().ExportInterfaces();\n    Builder.ForType<SelectorItemsSourceSyncBehavior>().Export().ExportInterfaces();\n    Builder.ForType<SyncRegionContextWithHostBehavior>().Export().ExportInterfaces();\n}\n\nprotected override void ConfigureServiceLocator()\n{\n    var serviceLocator = Container.GetExport<IServiceLocator>();\n    ServiceLocator.SetLocatorProvider((() => serviceLocator));\n}\n\nprotected override RegionAdapterMappings ConfigureRegionAdapterMappings()\n{\n    var instance = Container.GetExport<RegionAdapterMappings>();\n    instance.RegisterMapping(typeof(Selector), Container.GetExport<SelectorRegionAdapter>());\n    instance.RegisterMapping(typeof(ItemsControl), Container.GetExport<ItemsControlRegionAdapter>());\n    instance.RegisterMapping(typeof(ContentControl), Container.GetExport<ContentControlRegionAdapter>());\n    instance.RegisterMapping(typeof(RadPaneGroup), Container.GetExport<RadPaneGroupRegionAdapter>());\n    return instance;\n}\n\npublic override void Run(bool runWithDefaultConfiguration)\n{\n    this.ModuleCatalog = this.CreateModuleCatalog();\n    this.ConfigureModuleCatalog();\n    this.Container = ContainerConfig.CreateContainer();\n    Mef2ServiceLocator.Host = Container;\n    this.ConfigureServiceLocator();\n    this.ConfigureViewModelLocator();\n    this.ConfigureRegionAdapterMappings();\n    this.ConfigureDefaultRegionBehaviors();\n    this.RegisterFrameworkExceptionTypes();\n\n    this.Shell = this.CreateShell();\n\n    if (this.Shell != null)\n    {\n        RegionManager.SetRegionManager(this.Shell, this.Container.GetExport<IRegionManager>());      \n        RegionManager.UpdateRegions();\n        this.InitializeShell();\n    }\n\n    var exports = Container.GetExports<IModuleManager>();\n    if (exports != null && exports.Any())\n    {\n        this.InitializeModules();\n    }\n\n    var modules = Container.GetExports<IModule>();\n    foreach (var module in modules)\n    {\n        module.Initialize();\n    }\n}\n\n}\n```\n}\n`\n. Prism.Mef2.Wpf.zip\n. https://github.com/PrismLibrary/Prism/pull/741\n. ",
    "WarBorg": "hello. is there a sample app that includes XF and UWP ? because I have followed the directions from the xamarin blog to add a UWP to to my XF project but I keep getting errors like \nReference to type 'PrismApplicationBase' claims it is defined in 'Prism.Forms', but it could not be found\nand I am not sure what I files I need to change to make everything work toghter\nthank you in advance\n. yes I already did that, seems I also needed to add the Microsoft Unity nuGet package and after a few clean and build commands it seems to work.\nthank you\n. 2) ok, the login page was besides the point the problem was how do I navigate from a normal page with navigation to a masterdetail one cause I can have like 3 normal content pages and then a master detail ? I have seen examples on the net where they would have to change the App.MainPage from the initial navigation page to the new masterdetail page, is there a easier way ?\n7) I ment, how do I communicate from the master viewmodel to the masterdetail viewmodel to send the cutton command ? should I use messanging ? or am I missing something basic on how these could coummunicate ?\n. 3) yes I got that,  but how do I get a hold of the masterdetail page view model from the master page xaml? do I need to do the command binding with something like parent data context or... ? \n. yes that was also my conclusion, thank you for your answer\nhave one question, I tried your example and it is working fine but how do I get from the MainPage to MasterDetailPage ? I tried with GoBack(null, false) from the main page model, but I get a System.InvalidOperationException: PopAsync is not supported globally on Android, please use a NavigationPage. with modal set as true in the GoBack method I also get Can't pop modal without any modals pushed\n. yes, that is what I thought but that means your workaround does not satisfy my requirements:\nwhen the app starts it should set the masterdetail page as root, then it will make a check on navigation to\nif the user is logged in it shows the modal main page which has a button that should hide it (GoBack() ) and show the root masterdetail page which shows other data\nif the user is not logged in then show login modal page, after login show modal main page with the behavior described above \n. ok, I'm sorry I did not make myself clear, I don't want the main page to be part of the master detail page it is a separate entity and when the master detail finally appears I want it to display other detail pages with a nice hamburger menu. \nso basically when the main page appears there should not be any navigation bar nor a habuger menu but then when the master detail page appers it should have the hamburger menu\nlater edit: ok I managed to make it work, I basically navigated from the MainPage to the Master Detail Page and now everything shows up like it's suppose to, thank you for your time :D \n. @bartlannoeye I have read the article but the thing with the Navigate method is that it returns void and in Moq I dont have access to a .Return method if the method I am using in the .Setup returns void\n@brianlagunas I will try to implement my own Navigation service and let you know how it goes\nthank you everyone\n. @brianlagunas @bartlannoeye ok I think I resolved it, the problem was that I was using a wrong version of Prism in my Test project, I just noticed that, I forgot that the latest prism is still in pre-release mode, thank you for all the help\n. ok, tests work now but I get a verification error on the Navigate method, I am using this setup:\nnavigationServiceMock.Setup(x => x.Navigate(It.IsAny<string>(), null, true, true)).Returns(Task.CompletedTask);\nand the assert:\nnavigationServiceMock.Verify(x => x.Navigate(It.IsAny<string>(), null, true, true), Times.Exactly(1));\nbut it says test failed, Expected invocation on the mock exactly 1 times, but was 0 times, I went ahead and debuged the test and with a breakpoint it shows clearly that the method is hit\n. @jbachelor unfortunately no, I am still having this issue as well,  it is like the method is completely bypassed in the tests, although the app works fine in debug or release ... \n. @jbachelor\nhmm, ok I see what you did there, I will change my code to minick yours and report if it is working or not \nthx a lot! \n. @brianlagunas it appears that latest Prism.Unity nuGet is not online yet as the latest package is \nUnity for Prism 6 6.2.0-pre3\nshould't this be pre4 because now I need to override InitializeModules() in the App class otherwise it won't compile.\nthank you\n. @dansiegel thank you,  but I don't need modularisation in my app at this time, from what I see on github the nuget packages for unity and ninject,  for that matter,  have not been updated, it is that or I am missing something again :) \ncheers \n. @brianlagunas thank you, the new package was what I was looking for because it has the implementation for that abstract class which was laking from the former package, you should have mentioned it somewhere that a new package should be used :D\n. @dansiegel that was my issue as well but installing the new package Brian was talking about (https://www.nuget.org/packages/Prism.Unity.Forms/6.2.0-pre4) fixes the problem because it already implements that method so you don't have to :D\n. @brianlagunas yes my details page is hardcoded, I see I hope it gets fixed soon, thank you \n. ok, so how will this change impact the modal navigation in Prism ? \n. @brianlagunas yes I know, but the VM from where I am sending the command is set on the tabbed page not on the children page, I tried with the false param but still same issue\n. to the earlier posts you wrote the answer was yes\nso if I used the navigation command from one of the children pages vm's that would work fine?  I see you have fixed it so I am waiting for a new preview release  :D\nthank you \n. ",
    "Shayon": "Good point @brianlagunas, I went ahead and did that.\n. @brianlagunas Hmm, am I perhaps misusing CompositeCommand?  In my case I have a button that binds to a composite command in my ViewModel.  In the constructor for my VM I initialize the composite command and register several delegate commands, let's say only 2 in this case.  One command would be something like doing the action that I want the button to do, and the other command is part of my analytics, telling me that that button got clicked.\n. Let's say I have 3 buttons, and each have a delegate command in the VM, then I have a fourth button that is \"Push All Buttons\", to me it seems that this would be the appropriate place to use a composite command.  Could you suggest something as an alternative @brianlagunas?\n. I see now. Thanks for the explanation.\n. Okay. So from what I understand about your question, I would do something like:\n```\npublic ctor()\n{\n     _saveCommand = new DelegateCommand(_Save);\n}\nreadonly ICommand _saveCommand;\npublic ICommand SaveCommand { get { return _saveCommand; } }\nvoid _Save()\n{\n    // Do save stuff\n    _Exit();\n}\nvoid _Exit()\n{\n}\n```\nI see a dependency here that I don't want to have. I don't want my _Exit method inside of my _Save method, but I do want one command to chain into the other.\nWhat are your thoughts on an implementation like this?https://gist.github.com/Shayon/39e4042dfa32c77831fb\n. ",
    "hvaring": "Sure thing. The main parts are the view and viewModel.\nXML\n<Window x:Class=\"PrismTestClient.Views.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:PrismTestClient\"\n        xmlns:prism=\"http://prismlibrary.com/\"\n        prism:ViewModelLocator.AutoWireViewModel=\"True\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow\" Height=\"350\" Width=\"525\" >\n    <Grid>\n        <StackPanel>\n            <Button Content=\"Add new item\" Command=\"{Binding AddNewItemCommand}\"></Button>\n            <Button Content=\"Remove last item\" Command=\"{Binding RemoveItemCommand}\"></Button>\n            <ItemsControl prism:RegionManager.RegionName=\"{x:Static local:Regions.ItemsControlRegion}\" />    \n        </StackPanel>   \n    </Grid>\n</Window>\nThe AddNewItemCommand adds a view into the ItemsControl, and the RemoveItemCommand removes the latest view. Here's the ViewModel:\n``` C#\npublic class MainWindowViewModel : BindableBase\n{\n    public MainWindowViewModel(IRegionManager regionManager)\n    {\n        AddNewItemCommand = new DelegateCommand(() =>\n        {\n            regionManager.RequestNavigate(Regions.ItemsControlRegion, Navigations.Test);\n        });\n        RemoveItemCommand = new DelegateCommand(() =>\n        {\n            var region = regionManager.Regions[Regions.ItemsControlRegion];\n            var lastView = region.Views?.LastOrDefault();\n            if (lastView != null) region.Remove(lastView);\n        });\n    }\npublic DelegateCommand RemoveItemCommand { get; set; }\npublic DelegateCommand AddNewItemCommand { get; set; }\n\n}\n```\nThe issue occurs at the line if (lastView != null) region.Remove(lastView); if the View/ViewModel associated with Navigations.Test is KeepAlive = false, and will throw an ArgumentException. The View/ViewModel is also set up as INavigationAware with IsNavigationTarget() returning false. You can also catch the exception to verify that after adding and removing a single view from the region, the region contains 0 views but still throws.\nHere's the ViewModel of the navigation target:\nC#\npublic class TestViewModel : BindableBase, IRegionMemberLifetime, INavigationAware\n{\n    public bool KeepAlive => false;\n    public void OnNavigatedTo(NavigationContext navigationContext) { }\n    public bool IsNavigationTarget(NavigationContext navigationContext) \n    {\n        return false;\n    }\n    public void OnNavigatedFrom(NavigationContext navigationContext) { }\n}\nIf you change KeepAlive to true, or remove the IRegionMemberLifetime interface, it won't throw an exception. \n. PrismTestClient.zip\nHere's the complete solution. It includes Autofac as the IoC-container.\n. Hey Brian, thank you for looking into this. \nWe are multiple developers working on this project, so we have created several base classes to make development easier. One of these is a ViewModelBase, which inherits the IRegionMemberLifetime-interface with KeepAlive set to false by default. We are handling large image data and are reliant on views being disposed of when navigating away from them to free up the used memory.\nFor the above scenario, we are displaying views as dialogs on top of the current view in an AllActiveRegion, and closing a dialog should display the previous dialog until there are no more dialogs left. Some of these dialogs are also used in a SingleActiveRegion; in this case it is important that the dialog is disposed of when navigating away from it. \nDo you have any suggestions on how to approach this problem (apart from catching and ignoring the exception)?\nFrom what I understand, the only way to remove a view from an AllActiveRegion is to explicitly remove it with Remove(). A view in an AllActiveRegion cannot be deactivated (throws exception), and it cannot be navigated away from. Is there a specific reason why the IRegionMemberLifetime value is considered in this region-type, or have I misunderstood something? \nThanks in advance, Brian!\n. I think that is a reasonable solution that allows for more flexibility.\nThanks for all your help!\n. I would rather not see support for Autofac dropped, and I think it is possible to come up with a solution. I've only ever used Prism with WPF, but I'm sure something similar can be done for other platforms. The \"Update\" functionality is still present in Autofac's BeginLifetimeScope, which has an overload that takes an Action\\. So for lazy loading modules, it should be possible to begin a new ILifetimeScope, register your types with the new lifetime scope, and update the ServiceLocator to use the new scope. AutofacServiceLocatorAdapter should be changed to use an ILifetimeScope instead of an IContainer (this change can be implemented regardless). This would also remove the need for having multiple immutable containers.\nThese new lifetime scopes need to live for the duration of the application. The Prism Autofac integration should provide a class/interface to help with the configurations above.\n@dvorn, @ellisnet, @brianlagunas thoughts?. I went ahead and implemented a suggestion for how it can be solved, here. There are breaking changes (for example, IContainer is no longer exposed nor registered).\nThere is a new interface IAutofacConfiguration which is registered in the container as a singleton:\npublic interface IAutofacConfiguration\n{\n    ILifetimeScope LifetimeScope { get; }\n    ILifetimeScope RegisterTypes(Action<ContainerBuilder> configurationAction);\n}\nModules can get it injected, register the types it needs by calling RegisterTypes, which updates the ILifetimeScope. The AutofacServiceLocatorAdapter uses the IAutofacConfiguration interface, and accesses the lifetime scope property (so it will always point to the latest child lifetime scope, so modules loaded later will have access to the registrations done in previous modules).\nThis change allows on-demand modules and will work even after Update is removed. I added some tests for completeness and updated the tests that were dependant on IContainer.. Just a heads-up, but this change will not actually work. At the time that containerRegistry.GetContainer() is called in RegisterRequiredTypes, the container has not been built and it will throw an ArgumentNullException in AutofacServiceLocatorAdapter.. You can set d:DataContext=\"{d:DesignInstance <yourviewmodel>}\" on your control to make IntelliSense work.. ",
    "zzczzc004": "I try to submit a PR, is that OK? I am a fresh man and it's my first time to use PR. I eager to contribute my effort.\n. @brianlagunas Why do you think it can't inject views from within the modules when CreateShell was last step? I can't understand it.\nI try to modify Run function's implement like this and it still can inject view in the modules.\n```\npublic override void Run(bool runWithDefaultConfiguration)\n{\n    // ....\n    if (this.Container.IsRegistered())\n    {\n        this.InitializeModules();\n    }\nthis.Shell = this.CreateShell();\nif (this.Shell != null)\n{\n    RegionManager.SetRegionManager(this.Shell, this.Container.Resolve<IRegionManager>());\n\n    RegionManager.UpdateRegions();\n\n    this.InitializeShell();\n}\n\n}\n```\nI can't move my dependency registrations to the ConfigureContainer function in my scene. Because my main program (A.exe) don't need to depend on both Module B (b.dll) and Module C (c.dll). The interface E is in Module D (D.dll). Now my program A need to use interface E, however the dependency registrations is in the Module B or Module C's Initialize. If I put the registration in the ConfigureContainer, my A.exe will depend on both b.dll and c.dll. \nNow, my deploy is (A.exe and B.dll) or (A.exe and C.dll), so that the A.exe is not depend on b.dll and c.dll explicitly.\n. @brianlagunas  OK, I got it, thank you.\n. ",
    "MattWhilden": "I work on the .NET Native compiler team. Tag me if you think this is something that warrants investigation from our side.\n. Thanks Brian. Happy to help out. Our normal workflow for these kinds of things is outlined here: https://github.com/dotnet/core/blob/master/Documentation/ilcRepro.md. \n. We have a preview build of the Update 2 version of the .NET Native toolchain that we'd be happy to share with y'all if you think there's value. It may correct some issues you're seeing or help us identify other issues before we ship. Just shoot me a mail at dotnetnative@microsoft.com to get hooked up.\n. Very interesting. I haven't seen anything like this. Can someone describe how to get this set up locally? A link to a clonable repo is perfect but I'm happy to follow a list of steps (ex: get XXX nuget package, type this code etc).\n. Thanks for pointing that out! Been juggling lots of other things and I confused this with another thing I'm tracking down. My apologies. I'll try to take a look today or tomorrow.\n. Figured I'd leave a note here that we're convinced this is a bug in the .NET Native compiler and how it handles resources. Will keep you all posted. \n. This is an issue inside of our ResourceManager. Here's the PR over on our GitHub to get this corrected: https://github.com/dotnet/corefx/pull/6525/commits. Presumably you'll be able to get this fix from our feeds in a few days but I haven't tried it personally yet.\nIs this currently blocking anyone? Do they have \"suitable\" workarounds? It helps to know these things so that we can correctly assess how quickly to get these fixes into the official feeds etc.\nReally appreciate the bug report sorry it took so long to get chased down.\n. Sadly, it's a bit more complicated than just pulling down that one package. This is because many of those packages have tight couplings to implementation dlls that ship separately with the .NET Native compiler and runtime. I'll work on getting some instructions together so that you we can properly test this.\nI have a couple other issues that will keep me busy today so I may not get to it immediately.\n. ",
    "csyszf": "It seems that\nDebugLogger.cs\nResources.DefaultDebugLoggerPattern is null.\ni found that the resourceManager return null at\nResources.Designer.cs\nset resourceCulture \"en-US\" then code goes well.\nprivate static global::System.Globalization.CultureInfo resourceCulture = new System.Globalization.CultureInfo(\"en-US\");\n. zh-CN\n. https://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/Navigation/PageNavigationService.cs#L346\nlet OnNavigatedTo before navigationAction in PageNavigationService.cs, so init action can be invoked before the real navigate.\nbut i'm not sure that would not cause other problems or bad practice\ne.g that would invoke init action before everytime navigate although vm has already inited (add a _inited field may solve this)\nor init action may block navigating if init action need httprequest or something else.\nso i prefer init the vm in its constructor and active a ActivityIndicator if it's a time-consuming action\n. ",
    "Haplois": "@MattWhilden  Repro I posted exactly demonstrates this issue. If a resource file now found for a current culture it throws on native, assumes English on debug.\n. Glad if I helped. \n. ",
    "Senbakiri": "\nPresumably you'll be able to get this fix from our feeds in a few days\n\nCould you please explain me how to consume prerelease bits and bytes?\nI tried to update Microsoft.NETCore.UniversalWindowsPlatform package from these feeds:\nhttps://www.myget.org/F/aspnetmaster/api/v2/\nhttps://www.myget.org/F/aspnetvnext/api/v2/\nI get these errors while using aspnetvnext:\nRestoring packages for 'App8'.\nRestoring packages for D:\\Visual Studio 2015\\Projects\\App8\\App8\\project.json...\nAll packages are compatible with UAP,Version=v10.0.\nSystem.AppContext 4.1.0-rc2-23819 provides a compile-time reference assembly for System.AppContext on UAP,Version=v10.0, but there is no run-time assembly compatible with win10-arm.\nSome packages are not compatible with UAP,Version=v10.0 (win10-arm).\nSystem.AppContext 4.1.0-rc2-23819 provides a compile-time reference assembly for System.AppContext on UAP,Version=v10.0, but there is no run-time assembly compatible with win10-arm-aot.\nSome packages are not compatible with UAP,Version=v10.0 (win10-arm-aot).\nSystem.AppContext 4.1.0-rc2-23819 provides a compile-time reference assembly for System.AppContext on UAP,Version=v10.0, but there is no run-time assembly compatible with win10-x86.\nSome packages are not compatible with UAP,Version=v10.0 (win10-x86).\nSystem.AppContext 4.1.0-rc2-23819 provides a compile-time reference assembly for System.AppContext on UAP,Version=v10.0, but there is no run-time assembly compatible with win10-x86-aot.\nSome packages are not compatible with UAP,Version=v10.0 (win10-x86-aot).\nSystem.AppContext 4.1.0-rc2-23819 provides a compile-time reference assembly for System.AppContext on UAP,Version=v10.0, but there is no run-time assembly compatible with win10-x64.\nSome packages are not compatible with UAP,Version=v10.0 (win10-x64).\nSystem.AppContext 4.1.0-rc2-23819 provides a compile-time reference assembly for System.AppContext on UAP,Version=v10.0, but there is no run-time assembly compatible with win10-x64-aot.\nSome packages are not compatible with UAP,Version=v10.0 (win10-x64-aot).\nPackage restore failed for 'App8'.\nPackage restore failed. Rolling back package changes for 'App8'.\n========== Finished ==========\naspnetmaster feed works ok for me, but it contains beta packages released in 2015 year.\n. Did you try to reproduce your problem using blank app(or hello world)?\n. Minimum version is now 10.0.10240.0.\n. ",
    "michelebonomelli": "Hi,\nI have the same problem with my UWP app.\nIs there a fix or a workaround?\n. ",
    "mustaphakd": "great pack!\nshortening the names is always beneficial.\ndocumentation would also be welcomed for newcomers to PRISM.\n. ",
    "galakt": "Vote for shorten\n. Same as #452 . @brianlagunas By \"same\" i mean linked to DevExpress, sorry for misleading. Honestly, i have no idea how this changes correlate with \"Navigate_ToCarouselPage_ByName_ViewModelHasINavigationAware\" test,\nAlso i dont know how test failed in \"continuous-integration/appveyor/pr\" while he passed in \"Prism.Forms\". ",
    "craigblazakis": "The following animation illustrates what I observed using code that is configured as described by Adam in his original post.  When navigating from the MasterDetail to a content page that is not wrapped in a NavigationPage, the toolbar is still displayed.\n\n. A follow-up question related to my initial post...\nIsn't it a problem that the INavigationAware methods are executed ONLY when the user navigates using the INavigationService, but NOT when they navigate using the toolbar back button?  It seems to me that users may expect those methods the be called all of the time.\n. Incidentally, using a tap count to prevent multiple taps did not work for me.  It does prevent multiple taps, but it seemed to have a side effect.  When a navigation is permitted, the _tapCount is not set back to 0 and remains set to 1.  This means that the very next tap after navigating back will not be permitted.\nInstead, I am using a time interval approach which seems to work well.\n```\n    private readonly TimeSpan minTapInterval = new TimeSpan(0, 0, 2);  // 2 seconds\n    private DateTime lastTapTimestamp;\nprotected void Navigate(string name, NavigationParameters np)\n{\n    var now = DateTime.Now;\n    try\n    {\n        if (now - this.lastTapTimestamp < this.minTapInterval)\n        {\n            return;\n        }\n\n        this.navigationService.Navigate(name, np);\n    }\n    finally\n    {\n        this.lastTapTimestamp = now;\n    }\n}\n\n```\n. Hi Brian,\nAny word on when a release that includes the features to prevent double-taps that you described above will be available?\nAlso, any word on when a release that includes INavigationAware functionality in response to navigation initiated from Android Toolbar buttons, such as the back button, might be available?  I know this is something that you were working on.\nLooking forward to the updates!\nThanks,\nCraig\n. Thanks for the update.  I wish there were a way to motivate the Xamarin team to expose that API sooner rather than later!\n. They are Microsofties now!\nThanks for the release!!  Really appreciate it.\n. Brian,\nIn the sample code that you listed above, you are using an \"async void\" method that does not return a Task.  It seems that an alternative might be to return a Task and then use the DelegateCommand.FromAsyncHandler() method.  I am inclined to use your code as is, however, because the Navigate() method is essentially acting as a UI event handler.  Any thoughts?\n. ",
    "pdinnissen": "Without a straightforward way of addressing this \"issue\", I have to agree with your 'wontfix' assessment.  I ran into this issue when I wanted to utilize the same CanExecute function for multiple commands, so I bound to the CommandParameter dependency property.\n. In my limited testing GetWindow(this) always returns null, while GetWindow(AssociatedObject) always returns my ShellWindow.  Because I hadn't tested thoroughly (my current application and another sample app), I didn't feel it would be appropriate to dismiss GetWindow(this).  I just wanted to contribute that GetWindow(AssociatedObejct) allowed me to set the Owner field.\n. Modified.  Next contribution, I'll make sure to include a sample repo.\n. I would actually prefer to have an enum to say allow the selection of centering either over the AssociatedObject, AssociatedObject's Window, or Center of Current Display.  But I believe this would be a \"breaking change\"\nAlso, I'm unsure if there should be a null check on the wrapperWindow.Owner.\n. Yes I would.  Sorry that I missed that property.\n. @dvorn I know that adding async/await to prism wpf is challenging, but I was wondering if you could post/link the latest version you have for navigation and interactivity.  I'd love to do some testing and give feedback.. Looking at the original source code, the swallowing of exceptions is due to the 'async void Execute', which is always to be avoided but can't be in this case due to ICommand interface not being modifiable (I really wish WPF had been updated to be more async friendly).  Technically exceptions are still thrown directly on the original SynchronizationContext.  https://msdn.microsoft.com/en-us/magazine/jj991977.aspx\nThat being said, I agree that the current implementation is broken and needs to be addressed.  But unless I'm mistaken, won't long running DelegateCommand.Execute functions still block the UI thread?  Which is why they implemented this way in the first place.  Would it make sense to clean up DelegateCommand, but also introduce a new DelegatCommandAsync?  Based on:\nhttps://msdn.microsoft.com/en-us/magazine/jj991977.aspx\nI know I could extend DelegeCommandBase in the future for my own projects, but I believe others would appreciate it in the Prism library as well.  I'm more than willing to put together a PR, but would like to get some feedback before wasting anyone's time reviewing it.\n. Understood.  But isn't that what async/await does without the mess of spawning threads?  I don't want to sidetrack this discussion, so I will drop this and concede that there are significant pitfalls to C#'s async/await framework when mixing it with synchronous code.  Regardless, I agree that DelegateCommand should be cleaned first and extended second.\nWould you consider a DelegateCommandAsync in a 6.4 release?\n. I just caught up on the other discussion threads.  So I see what your wrestling with.  That seems like a fair course of action.  And hey, the great thing about this framework is that there's nothing stopping me from using my own DelegateCommandAsync in my apps in the meantime.\nThanks for all the work you do on this project.  It's a lifesaver.\n. @Sockenfresser I agree, since our projects also primarily use the FromAsyncHandler feature for initializing DelegateCommands.  @brianlagunas has outlined a good path.  First have desired/expected behaviour for purely synchronous commands, then gauge community desire/requirement for an additional DelegateCommandAsync (especially since there's nothing stopping anyone from just using their own implementations of an async ICommand implementation).  In other related threads, others (including @dvorn) have already suggested certain implementations.  #746 #745 #724.  Quite a few WPF related issues and pull requests are geared towards having Prism being more fully async/await compatible, I have a feeling that the community will keep requesting this feature, but hopefully we can come up with something that provides intended behaviour.\n@dvorn could you give an example where it is bad that the GUI or other threads access the program state before the async command completes?  If important can they not check the IActiveAware.IsActive property?  At least from the Prism side of things?\nasync void is the recommended way to have Event Handlers be asynchronous and ICommand is often referred as being like an Event Handler.\n. @Sockenfresser I agree since that's what I've been doing today.  But merging it with: https://github.com/StephenCleary/Mvvm.Async/blob/master/src/Nito.Mvvm.Async/AsyncCommand.cs\n(I would just use his, but I love the ObservesProperty function too much.)\n@dvorn In that scenario, wouldn't it be easy to just have a boolean representing whether the command is active (I presume that's what the IActiveAware is for, although looking at the DelegateCommand code, I don't see where is ever changes).  And then have the CanExecute of both those Commands reference that value.  In fact, isn't that exactly what you kind of proposed earlier in this thread?\npublic class MyCommand<T> : DelegateCommand<T>\n{\n    private bool isRunning;\n    public MyCommand(Func<T, Task> executeMethod, Func<T, bool> canExecuteMethod)\n        : base(async (o) =>\n            {\n                 isRunning = true;\n                 await executeMethod(o);\n                 isRunning = false;\n            },\n            (o) => !isRunning && canExecuteMethod(o));\n}\nExcept 'isRunning' would be a MVVM property and MyCommand would implement INotifyPropertyChanged.\nAnd isn't the UI blocking on a long running command almost as bad?  And launching a separate thread is essentially the same thing as async/await?  It's not like you could catch the exception from that in the ICommand.Execute call.  Although I will concede that crashing the app through an unhandled async void execution is worse.\n. @dvorn Oh don't worry, I would not consider myself an async capable programmer without having read pretty much everything Stephen Cleary has published (his Concurrency in C# Cookbook is pound for pound the best book I have in my pile).\n@Sockenfresser I recommend that you take a look at this link I have in my previous post, it is part of Stephen Cleary newer MVVM.Async library.\nAt the end of the day, swapping implementations of PRISM objects has always been one of the reasons I prefer this platform in the first place.\n. @dvorn is the intent that DelegateCommand be able to handle all those scenarios?  Won't it block the UI thread as it stands?\nI don't disagree with your post, and plan on using as a goal for my implementation of DelegateCommandAsync and if I'm satisfied with it I could also propose it for a future release.\nCan you be more specific by what you mean by 'Do not disable the command, but just do nothing.' though?\n. @dvorn Case closed.  Perhaps this should be summarized in the docs?\n. @dvorn if T is int then the parameter should never be null and if it is then wouldn't a crash be an expected behaviour as opposed to \"hiding\" it behind a default value type?\nAlso, should DelegateCommandBase still have the following code?:\n```\n        void ICommand.Execute(object parameter)\n        {\n            Execute(parameter);\n        }\n    bool ICommand.CanExecute(object parameter)\n    {\n        return CanExecute(parameter);\n    }\n\n```\nSince @brianlagunas and @dvorn mentioned that WPF will \"ignore\" any additional overrides function that add additional code (ie: logging like @dvor said).. Oh right.  Too early in the morning to keep all this straight.  Thanks for clarifying.\nI have a small recommendation that can be ignored for the parameterless DelegateCommand's constructor:\n: base((o) => executeMethod(), (o) => canExecuteMethod())\nbe changed to:\n: base((_) => executeMethod(), (_) => canExecuteMethod())\nIt makes it more explicit that the lambda parameter is being ignored.\n. Completely understandable.  I've seen benefits for internal nuget packages, so I thought why not ask.  Downloading the source is always available.\n. Or maybe just update the pack command with '-Symbols'? that way they would already by in the .nupkg.\n. The following is one of the simplest solutions to a DialogService that I have found:\nhttps://github.com/FantasticFiasco/mvvm-dialogs\nIt is WPF & UWP and all you have to do is supply a ViewModel and it uses a locator to find the View.\n. The prospect of having such a DialogService built into Prism is very enticing.\nI think they'll still need to be some type of IDialogAware interface for the ViewModel in order to accept the parameters/payload (and use that same class to have data returned.  ShowDialog would then need to return a \"DialogResult\" composed of this type and the actual Nullable dialog result.  It would also be nice to move away from using \"object\" for the payload and use a template to be strongly typed.  However about something like this:\n```\n    public interface IDialogAware\n    {\n        void OnDialogShow(T parameters);\n        T OnDialogFinish();\n    }\npublic class DialogResult<T>\n{\n    public bool? Result { get; }\n    public T Parameters { get; }\n}\n\n```\nAnd then to be consistent, the registering of the dialog should also contain the type of the parameters and shouldn't the registering also be made on the IoC Container?:\n_container.RegisterTypeForDialog<DialogViewType, DialogViewModelType, DialogParameterType>(\"NameOfDialog\");\nA check could then be done at registration to ensure that the ViewModelType implements IDialogAware.. Is there any reason why WPF couldn't be added in the future though?. ",
    "dersia": "Well Exposing a public property wouldn't wokr, because the page is loaded in OnInitialize and the viewmodel has dependencies which are set in the droid app.\nI'll have a look into the dependencyservice.\n. You are totally right. I think it was a bit late yesterday evening... Sorry for that!\n. I agree with Brian, I would also use the ContainerControlledLifetimeManager for singletons. I often even often use a InjectionMember (Factory most of the times) to create my instance, if it is really needed.\nBut I disagree with: \n\n...since the PCL will be using types from the platform project heads and not the other way around.\n\nI think there are cases where it's the other way around. When it comes to instance-registrations, you'll never now what they're depending on. \nAs an example, you could have a register logging for ILoggingFacade and you might want to use it in the platform specific part. If this part is an instance-registration it would fail upon resolving.\nThere is no solution for all, we just have to agree to a direction and be aware when designing the architecture of the app.\nBTW: with the PlatformInitializer-contructor it happend a few times for me, that navigation in OnInitialized failed, because the InitializeComponents was called inside the contructor and the constructor is called after OnInitilized. Is there a better way then calling an OnAfterInitlized-method from within the constructor?. @mikegottlieb your architecture sounds really interesting. If you have some spare time, could you please make a sample and upload it? I'd really be interested in seeing it :). Never mind.... Hi Brian,\nI was just overseeing some PR to see what happens so far on Prism when I came across this issue.\nFrom a logical point of view, I think your initial thought was right to call OnNavigatedTo on both child an parent, since both are going to be displayed. \nBut I also see your point in having the same behavior for modal and non-modal, so I was thinking wouldn't make much more sense to change it for both scenarios to call parent and child?\nWhat do you think?. It was more of a I was thinking scenario.\nWhat I was refering to as \"being displayed\" is acutally a in case of a MultiPage-Scenario, like for MasterDetail, Tabbed etc. it really is a Navigation to both. But this would also mean, that we need to call OnNavigatedTo and OnNavigatingTo for Forward- and Backward-Navigation on both child and parent.\nSince there is no actual pressure so far to make a decision (well you made one so far) and this is more like a conpectual and logical thing to think about, I'd suggest to re-open this issue and have a discussion with the prism community.. @dansiegel I agree that Publishing an event would be the best case, but honestly I think this would be in any case the better solution (against the INavigationAware appraoch, pub-sub seems always better to me).\nBut then again this is my personal approach.\nBut I'm curious, what problem would that extra call create? As far as I understood this issue, parent was the only one being called before brian's change.. You are right that this is a change in the behavior and this cloud cause issue and since no one has an issue with this so far, maybe it's good to leave it this way. It really was just something where I was scratching my head over reading brian's comments above. His first approach to call both just made more sense then just calling the child.\nAnyhow it'll be interesting to see if this might be an issue in the future for anyone, I think if and when then this will only be an issue for a minority.. done: https://github.com/PrismLibrary/Prism/issues/1175. @bartlannoeye yes, but this also means, that Prism.Windows would only support apps targeting FCU and higher, not to say that it then also would just support Feature2 on Windows 10 Mobile.\nThis is why I would rather stay with the old CommonServiceLocator. I also looked into the possibility to submit a PR for CommonServiceLocator by simple just targeting also uap10.0, but there seems to be an issue with MSBuild right now:  https://github.com/dotnet/sdk/issues/1556\nAs soon as this is done, we could revisit UWP. Should I then create an PR with an updated version of Prism.Windows targeting FCU?. @bartlannoeye  @brianlagunas \nAny updates on this? There is also a new stable version of Xamarin.Form 2.4 released and a version 2.0 of the CommonServiceLocator. I'd really like to update all my packages to netstandard2.0.\nI think we can't avoid any breaking changes.. We are using CommonServiceLocator in the base projects lik Prism.Wpf, Prism.Windows. And then again all other containers autofac, unity, etc. Are using it too.\n. Just as an update, so I updated the win10 projects to FCU and updated all usages of CSL and unity.\nThere are some issues. \nFor UWP to work correctly with netstandard2.0 I had to update the uwp-runtime packages to version >=6.0.0. Unfortunately those packes aren't yet on nuget, I grabbed them from the dotnet myget feed. \nFor WPF everything works except the DryIoc packages. DryIoc has a hard dependency on CSL >=1.3.0 & <2.0.0\nUnless DryIoc updates (I created a ticket on their bitbucket tracker) we either have to wait or drop DryIoc. ~Since there is only DryIoc support for wpf, but not for forms or win10, I'd vote for this option. But then again, I never used DryIoc and I don't know how big the userbase is.~\nDryIoc for Forms is not using the DryIoc.CommonServiceLocator and therefor is not affected by this issue at all.\n. ",
    "NewBLife": "I think the plugin funtion for prism's Container need to be add.  If a package(like textspeech) has itself container and register the types in it.(not use the dependencyservice and xamarin.forms package) Then this contaniner's information i want to  set to prism's Container,there is no way now? I do not want to register it once again in every platform. Maybe we can take a look at mvvmcross's plugin architecture.https://github.com/MvvmCross/MvvmCross/blob/develop/MvvmCross/Platform/Platform/Plugins/MvxLoaderPluginRegistry.cs. @stonelyd Maybe it is the metadata problem? You can try to add the Person type to the Default.rd.xml.\n. I will try it.. @perssondan Thank you. I do not have a lot of time now.. Are you use the release version? Maybe you need to set the Default.rd.xml . @LukeWATC . Fixed a performance dedgration sometimes occuring in Xamairn Android apps. \nhttps://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes. ",
    "baterja": "I don't think it is possible because of interface limitations in language. It will be easier to explicitly implement interface:\n``` C#\npublic abstract class BasePopupWindowViewModel : IInteractionRequestAware {\n        public Action FinishInteraction { get; set; }\n    public INotificationImplementer IInteractionRequestAware.Notification { get; set; }\n\n}\n```\nbut it is forbidden by language.\nMaybe the other day, when some really good-but-breaking changes accumulate there will be new version of Prism incompatible with previous?\nOr maybe enabling implementing interface member as I wrote will be easier and more valuable for C# developers? I will check later.\n. So I've checked C# 7 work list of features and something I wrote one comment earlier might be possible in the future (Covariant return types: Proposal #357).\nFor now I have a workaround (not clean, but working nice with bindings):\n``` C#\npublic abstract class BasePopupWindowViewModel : IInteractionRequestAware \n    where T : INotification {\n    private T _customConfirmation;\npublic T CustomConfirmation {\n    get { return _customConfirmation; }\n    set { _customConfirmation = value; }\n}\n\npublic Action FinishInteraction { get; set; }\n\npublic INotification Notification {\n    get { return _customConfirmation; }\n    set { _customConfirmation = (T)value; }\n}\n\n}\n```\n. ",
    "therealjohn": "@brianlagunas Sorry for the confusion. I never know how to explain this scenario very well...\n\nI am not sure I understand what you mean by \"modal page wrapped in a NavigationPage\"\n\nI basically want this:\nNavigation.PushModalAsync(new NavigationPage(new MyTargetPage()))\n\nis everything working navigation wise, it's just the animation that's not working as expected?\n\nYes, it appears so. And it looks like you might have found the reason. \n\nMaybe a deep link should be considered 3 or more navigation segments?\nOr, maybe it's not smart about it at all, and if you are deep linking then you have to set the animated param manually?\n\nFor me, I don't see how you could assume any arbitrary level of deep link segments. I think somebody is always going to hit some edge case where they don't get the behavior they want. Personally, I'm OK with manually saying don't animate when I know I am deep link navigating. If you do end up with an automatic solution, I think there needs to be a way to override/customize it because 1,3,X won't work for everyone.\nDoh, I am excited for Preview 3. :) \n. I am probably confused. Consider this:\nNavigationService.Navigate(\"Root/MyPage\", null, false, false)\nIn an attempt to achieve something like:\nMainPage = new NavigationPage(new MyPage()); // NavigationPage is \"Root\"\nThere is a crash with something like:\nUnhandled Exception:\nMicrosoft.Practices.Unity.ResolutionFailedException: Resolution of the dependency failed, type = \"System.Object\", name = \"MyPage\".\nException occurred while: Calling constructor CaseProject.MyPage().\nException is: XamlParseException - Position 8:2. StaticResource not found for key MyPageColor\nWhen first launching the app, navigating to the same \"Root/MyPage\" works fine. \nApp.xaml.cs does contain the key, and everything works great if you don't try and \"reset\" the stack to this scenario.\n. Something like this produces the same issue:\nNavigationService.Navigate(new Uri(\"http://mydomain.com/Root/MyPage\", UriKind.Absolute), null, false, false)\n. @brianlagunas You're right. In this test project I have a specific use case with a library. I am not sure why it's causing an issue with navigation though. \nThe app does not crash because I changed them to DynamicResources. However, it simply does not navigate. Could you take a look at see why this scenario does not work in Prism? https://www.dropbox.com/s/lvcfzvn6ijr6ipt/CaseProjectTest.zip?dl=0\nIf you comment out lines 16-28 of MyPage.xaml, it will work fine. \n. Ok, thanks Brian. It works fine without Prism. \n. You're exactly right. I have no idea how this is working in my project. I can reproduce what you see with this test project. I'll investigate more. Thanks for looking at this. \n. Thanks for confirming, Dan! . ",
    "eriawan": "hi @brianlagunas \nI'd like to help :smile: \nDo we have a sample project? It'll be easier to have a web that describes Prism using sample codes of a small app.\n. @brianlagunas \nnow that we have prismlibrary.girhub.io, could I just copy and paste some of the MD files that we already have? we could adjust the overall look later, as we should have content soon based on existing documentation that we have now.\n. @brianlagunas \nIMHO it's better to move them all to the github.io website. What do you think?\n. @brianlagunas @bartlannoeye \nOK, so could I copy and paste the Prismlibrary documentation to the github.io site? \nI'll copy and paste all of them first, then we can safely delete the MD docs on the existing Prismlibrary, Or we should ease the migration by simply say that it's moved to the github.io website (after the copy and paste is done).\n. ok, thanks for your quick reply, @brianlagunas :)\nI am going to clone both the repo and create a new branch on the github.io page now. \n. @brianlagunas cool!\nSince you have decided that we're going to use prismlibrary.github.io, could I start a rough prototype?\n. @riandesign great! we should use this design as our starting visual design for the Prism website.. ",
    "jcktlr": "@brianlagunas Are you thinking of using a static site generator like Jekyll?\nI would like to help if I can. Though, I am not very familiar with the github workflow.\n. ",
    "ganchito55": "I have created a website for this project, I hope you like it.\nPrism helps me a lot and I wanted to help it.\n. ",
    "riandesign": "If you still need a website, please tell me.\nI have an agency in Brazil and I'd love to help!\nCheck my portfolio: www.riandesign.com.br. Ok! Would you install in a domain like prism.com or where?\nWhat would be the content of this site? Please, tell me how you'd like it, so I create a mockup to show you.. Hi @eriawan , I already created a mockup.\n@brianlagunas , please let me know what do you think about it on this link in real size mockup:\npreview.riandesign.com.br/prismlibrary\nWhere \"Learn\" page will have subpages such as Videos and Pluralsight courses. And \"Discuss\" can have subpages like Blogs, Slack channel, Report bugs (external link), Twitter etc.\nI also attached its image below.\nIf you want any changes or want something different, please tell me.\n. @brianlagunas @bartlannoeye  I'm glad you liked it!\nMaybe something like this?\n\n. @brianlagunas , please let me know what you think about this mockup in the link below.\nDid I forget something?\npreview.riandesign.com.br/prismlibrary/2.php. Nice. So, I'll develop it, ok?\nAbout the content, texts etc, when you have them, could you send them to my email, please?. @brianlagunas  , do you have a server already?\nWhere will we host it?\nPS: the website is not developed yet.. Yes, I'm still developing it. I'm doing at my free time, but I'll finish it probably in a couple weeks, ok?\nAnything you want, please tell me.. @brianlagunas sorry this huge delay! I'll finish it probably next week, ok? As soon as it's done I put it online. By the way, how can I send the files to you?. @brianlagunas , I just sent a PR to https://github.com/PrismLibrary/prismlibrary.github.io\nPlease, let me know if I did right, ok?\nNote: the homepage is done, but the internal pages (Documentation, Learn, Discuss) are under construction, because I'm not sure what is the content for those pages.\nCan you tell me or send me the content just to create a layout for them and put in there?\nAfter that, you'll be able to update the content easily, if you want it.. @brianlagunas I updated the files. Please, let me know if I did correctly.. What would be the solution for this issue?\nI need to retrieve data when user access a tab page.\nI followed the solution below, but it doesn't work for me:\nhttps://github.com/qmatteoq/XamarinForms-Prism/tree/master/DeepNavigation. @beylkhanovdamir \n\nYou can found in post by Matteo that him solution is working but it hasn\u2019t been included yet in the current Prism version\n\nBut what would be a solution for now?. I already tried it, but it doesn't work for me.\nMy code:\nhttps://codepaste.net/ejqwar\nXamarin Forms version: 2.3.3.180\nPrism version: 6.2.0. You mean attach all files of my project?\nWell, basically, I have an App.xam.cs with types registered, for instance:\nContainer.RegisterTypeForNavigation<MainTabbedPage>();\nContainer.RegisterTypeForNavigation<MainPage>();\nContainer.RegisterTypeForNavigation<UsersPage>();\nI also have the pages into a simple TabbedPage.\nAnd in the UsersPage, I have the code I showed you:\nhttps://codepaste.net/ejqwar\nThere is nothing wrong with the NuGets, the output doesn't show any error and everything works fine, except this issue.. Ok. I am uploading to link below. Please, check it:\nhttps://github.com/riandesign/IActiveAware-project. But how do I install it? I couldn't find it through Visual Studio NuGets.. @brianlagunas , thank you so much for your help!!. Actually, the problem occurs only when I use some method of the DependencyService in page's constructor, for instance:\n```\npublic DetailPageViewModel(ISocket socketService) {\n            _socketService = socketService;\n        string getNews = _socketService.SocketOn(\"get news\").ToString();\n    }\n\n```\nIf I don't use string getNews = _socketService.SocketOn(\"get news\").ToString(); in the constructor, it works fine.\nBut it's needed to use that, in this case, because I need to get data all the time socket receive news and not only the page is \"loaded\" (navigated to).. The problem occurs when user navigate from UsersPage to ConversationPage.\nPlease, check the codes:\nhttps://github.com/riandesign/Test\nNote: I didn't push all files because there are too many, but the main files are there.. Right! I just pushed the files:\nhttps://github.com/riandesign/Test. Sorry my mistakes, @brianlagunas !\nHere a new link with files:\nhttps://github.com/riandesign/RianTest/\nThe problem occurs when user navigate from UsersPage to ConversationPage, with DependencyService in the construct of the ConversationPage.\nNote: I said DetailsPage, but actually the name is ConversationPage.. The problem is in: https://github.com/riandesign/RianTest/blob/master/MessengerIntrasocial/MessengerIntrasocial/ViewModels/ConversationPageViewModel.cs (line 41)\npublic ConversationPageViewModel(ISocket socketService) {\n            _socketService = socketService;\n            string te = _socketService.SocketOn(\"get required messages\").ToString();\n}\nIf I don't use _socketService (DependencyService), it works.. I already resolved the issue with this:\nawait _navigationService.GoBackAsync(null, true);. I just cleaned the solution/projects and the pre2 now is working perfectly.. Thank you all! @dansiegel it worked like a charm.. ",
    "djcparker": "For \"getting started\" maybe \"Quick start\", because it is quick.. And you need to put \"BOOM!\"  in there as well, its the part of Brian's demos that I love :). @riandesign looks really good!. As it is a breaking change, I would add it to the current INavigationAware interface.  Add an example to the release notes, good to go.\nPersonally, I always read the release notes before updating key packages.\n. @brianlagunas  maybe it is worth adding a \"community\" packages section to the docs?\n. I have a slight variation on this that, maybe I could implement differently, but this is how I have it working right now.\nI start on a components page and the user can tap a component, then drill down through multiple levels (variable) of produt group, family, etc, etc, arriving at a final selection page where they make their choice (in my case it is a process/thickness but you can imagine it as S, M, L, XL)\nAt each level of the heirarchy I have navigated to a \"ProductPage\" so my navigation stack can look like:\nnavpage/componentspage/productpage/detailpage\nor \nnavpage/componentspage/productpage/productpage/productpage/detailpage\nwhich is really great for navigating back but once they make a final selection I don't know how far down the stack I am so I navigate absolute to navpage/componentspage\nWhich is not ideal as it rebuilds that page... What would be great is to be able to create a \"bookmark\" (or something similar) and then GoBack to the bookmark, having Prism pop the pages off the stack as required.\nHope that makes sense.. @maxal1917  it sounds like the \"../\" option would be ideal for you?\nMy understanding is that you would be able to do, from standard \"../Advanced\" and from advanced \"../Standard\"\n. Given your initial example it sounds like it will:\n\nMasterDetailPage/NavigationPage/ProjectsListPage\nNavigate to create a new project:\nMasterDetailPage/NavigationPage/ProjectsListPage/CreateProjectPage\nwhen finished with the create page navigate to a session page, and remove the create page:\nMasterDetailPage/NavigationPage/ProjectsListPage/SessionsListPage\nat the end of CreateProjectPage you'd do \"../SessionsListPage\" wouldn't you?\n\nThe second example\n\nAs user logs in, the app navigates to another page, and now the login page should be removed. Right now, an absolute URI is perfect for login, but if the login happens somewhere else in the app, and not at app startup, then this remove would be helpful.\n\nwould still work. I guess you were thinking something like, going from open to secure content?\nMasterDetailPage/NavigationPage/ViewA\nNavigate to something secure\nMasterDetailPage/NavigationPage/ViewA/LoginPage\nOn success \"../SecurePage\"\nMasterDetailPage/NavigationPage/ViewA/SecurePage\nPretty sure it works for @maxal1917 examples:\n\nit's just in my case I'm within Navigation page, my stack is MasterDetail/Navigation/Main/Standard <-> MasterDetail/Navigatoin/Main/Advanced.\nWith the caveat that instead of \"Main\" there can be something else, there can be more than one way to arrive to Standard or Advanced page, and I want to switch back and forth between them, and when Back button is pressed, go back to where I came from.\n\nMasterDetail/Navigation/Main/Standard \ngo to advanced \"../Advanced\"\n MasterDetail/Navigation/Main/Advanced\nor he says different ways to arrive so I guess:\nMasterDetail/Navigation/OtherView/ViewC/Standard \ngo to advanced \"../Advanced\"\n MasterDetail/Navigation/OtherView/ViewC/Advanced\n. Somewhere I saw a good walkthrough of when you would change the navigation flow but I can't think where.  I'm sure it was to do with Android and expected behaviour... or maybe UWP/Mobile...\nI can't think of a reason to want to remove a page from some arbitrary point in the navigation stack.\nMy only problem is as described above where I don't know how many I need to go back.. I used the suggestion you gave of executing GoBack in the OnNavigatedTo and it works but you get a flash of the pages as they \"reappear\" - animation:false made it better, with the default animation it looked cool but everyone just laughed :)  \nMy problem is different to the scenario's described above, in all of those, you want to remove the previous page and replace it.\nMy opinion, if you have a more complex flow then you are better having different absolute flows and maintaining state in a singleton object in the container (or something like that, which is what I do because the logon flow is multi-page).. Just a thought, you added some syntax for tabpages like this:\nNavigateAsync(\"TabbedPage?selectedTab=MiddleTab/ViewA/ViewB\")\nWould it be worth doing something similar for this - allow people to add an anchor/replace point \nI think one example given was this:\n\nMasterDetailPage/NavigationPage/ProjectsListPage\nNavigate to create a new project:\nMasterDetailPage/NavigationPage/ProjectsListPage/CreateProjectPage\nwhen finished with the create page navigate to a session page, and remove the create page:\nMasterDetailPage/NavigationPage/ProjectsListPage/SessionsListPage\n\nNavigateAsync(\"MasterDetailPage/NavigationPage/ProjectsListPage?navigationPoint=replaceme/CreateProjectPage\")\nthen, I don't know what syntax but something like:\nNavigateAsync(\"SessionListPage\", navigationPoint: \"replaceme\");\nI guess you could extend or have an interface that ProjectsListPage could implement that named the navigationpoint...\n. Good point! Not yet.\nFor me, I want to remove several pages at once... I guess I could do something similar like gobackto(\"xx\").  Will give it a try. I haven't seem arrays url encoded like that for a while.  Most of the encoding I've seem recently are something like ViewA?car[]=dodge&car[]=ford&car[]=gmc\nNot tried it recently though. \nI'm pretty sure jquery and  angular encode the same. \nAlso, any impact on deep links?\nIn general, if it standardises all platforms then go for it.  As long as it is documented we can decide on taking the update and adjust our code.. @brianlagunas awesome! Sounds like a win all around. \nBtw: Meant applinks,  not  \" deep linking\". Actually, this change would help me handle some if the older urls that might crop up.. We've (finally) released a companion app for the configuration of glazing units, searching the pre-configured glazing database and requesting CE marking documentation.    It took a few (long) rounds of global testing but I finally got approval to release it.  Multi-language (16 so far).\nAuthor:  Pilkington Group / NSG Group\n\n\nApple: https://itunes.apple.com/us/app/pilkington-spectrum/id1184941970?mt=8\nAndroid: next week - just waiting for sign off\nUWP/Mac: coming in a couple of months hopefully\nMore features to be released in the next month. @dansiegel might pay to file the ninject issue with the main ninject project? looks like there is activity there but not on orens?...  (I don't use ninject, was just poking around :) ). @dansiegel very true, I don't know how Oren finds time to contribute to so many projects...and keep them updated... I imagine he will get to that issue soon enough :). ",
    "garrypolley": "I was attempting to look at what's in the \"docs\" folder via github.io and was not able to see a deployed version of all the nice docs in this repository. \nHas it been setup to use the folder?  https://github.com/blog/2228-simpler-github-pages-publishing\nWould it be a bad idea to let what's in there now be seen? Minimally styled with what's already there? . ",
    "Thirukumaranskp": "On Fri, 26 May 2017 at 10:44 PM, Brian Lagunas notifications@github.com\nwrote:\n\nClosed #411 https://github.com/PrismLibrary/Prism/issues/411.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/411#event-1099270679, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AF2BewNb_yWIaif11ejm23LHapuzxMNqks5r9whxgaJpZM4HI-hf\n.\n-- \nHi,\n\nThanks & Regards\nThirukumaran\n. ",
    "adamtoakley": "Is this progressing? We heavily utilize nuget packages and we would like some of the enhancements/updates that have been made in the past 8-9 months. I can help out if needed!\n. ",
    "marcvitbr": "@brianlagunas  I want to accomplish the same thing, and have the exact same setup, but I am getting the \"no root page\" error when I call NavigateAsync from within OnNavigatedTo method of SomeNavigationPage.\nI'm doing something similar with my Main page (a NavigationPage that then immediately navigates to another page when navigated to), and didn't have to set the root page.\nWhat am I missing here?\n. Thanks a lot for the quick response!\nThe following code is taken from the scenario that works, when the app launches:\nApp.cs:\nprotected override void OnInitialized()\n{\n    NavigationService.NavigateAsync(\n                          nameof(MainNavigationPage),\n                          useModalNavigation: false);\n}\nHit the MainNavigationPageViewModel.cs, that just navigates forward:\npublic void OnNavigatedTo(NavigationParameters parameters)\n{\n    this.navigationService.NavigateAsync(\n                                 GUIConstants.LoginPageNavigationId,\n                                 useModalNavigation: false);\n}\nI stick with this NavigationPage until a certain point in the workflow, then I want to open another NavigationPage, modally:\nMealCompositionPageViewModel.cs:\npublic async Task OnFoodSearchEntryFocused()\n{\n    await this.navigationService.NavigateAsync(\n                                       name: GUIConstants.FoodSearchNavigationPageNavigationId,\n                                       parameters: null,\n                                       useModalNavigation: true,\n                                       animated: true);\n}\nI hit the new NavigationPage's view model, and immediately navigates to another page:\nFoodSearchNavigationPageViewModel.cs\npublic void OnNavigatedTo(NavigationParameters parameters)\n{\n    this.navigationService.NavigateAsync(\n                             name: GUIConstants.FoodSearchPageNavigationId,\n                             parameters: null,\n                             useModalNavigation: false);\n}\nWhen this last NavigateAsync is executed, it crashes:\nNavigationPage must have a root Page before being used. Either call PushAsync with a valid Page, or pass a Page to the constructor before usage.\n. It worked! and it makes total sense. I forget that the framework is just running on top of XF, so it has to play by its rules. :)\nThanks again and congrats on the work with Prism. I'm enjoying it a lot!\n. ",
    "beylkhanovdamir": "@brianlagunas \nplease tell me, why MainPage object does not initialized after the resetting nav stack by this way:\nawait _navigationService.NavigateAsync($\"/{nameof(LoginPage)}\");\nAnd in output window I see this message:\n\nCannot destroy MasterDetailPage. System.ArgumentException: Value was an invalid value for ItemTemplate\n\nI thought that slash before the url address allows me to clear nav stack and creates a new page, no?\nXamarin.Forms 2.5\nPrism 6.3. @brianlagunas \nwhat error I should fix? I posted my code for resetting nav stack above, nothing more\nAnd my app is works fine with this trick:\nApplication.Current.MainPage = new LoginPage();\nI think that problem in not my app and It works fine without Prism.. page has listview with itemtemplate, perhaps, it becomes null after resetting nav stack\nI'm not sure that I should redesign a page structure to fix this error, cuz, it's not core issue \nand as I said earlier, I can reset nav stack by creating a new instance of MainPage. @brianlagunas do you mean that we need to add behavior for event like Appearing for Page and then call navigation method in Prism for transfer to required page\n` \n<NavigationPage Title=\"Home\" > \n  <x:Arguments>\n    <views:MainPage>\n    </views:MainPage>\n  </x:Arguments>\n</NavigationPage>\n<NavigationPage Title=\"Catalog\">\n  <x:Arguments>\n    <views:CatalogPage>\n    </views:CatalogPage>\n  </x:Arguments>\n</NavigationPage>\n\n\n`\nHow do I handle tap events during tab click?\ncould you provide a short sample for this case, pls\n@polepage your way is working for you?. @brianlagunas waiting v. 6.3 \ud83d\udc4d . @brianlagunas \n\nWe need a solution to this, and there is one approach available in this thread, and PR #712 has been submitted which also need to be reviewed.\n\nit is will be implemented in 6.3 release after your successful review or not?. currently I'm using an approach for switching between tabs based on my custom behavior which is inherited from BehaviorBase<VisualElement> and this behavior was subscribed to TabbedPage on CurrentPageChangedevent. \nBut this way is not good, cuz, when I want to open a Tab page via NavigationService programmatically, navigation in app is activated twice (1 call by request via NavigationService, 2 call by my custom behavior which is subscribed on CurrentPageChangedevent). @riandesign \n\nI followed the solution below, but it doesn't work for me:\nhttps://github.com/qmatteoq/XamarinForms-Prism/tree/master/DeepNavigation\n\nYou can found in post by Matteo that him solution is working but it hasn\u2019t been included yet in the current Prism version. @riandesign \nI think @brianlagunas must give answer on this question =)\nFor now I'm temporarily use my custom behavior for it. @brianlagunas \ndo you have a planned date for 6.3 RTM?. @brianlagunas ok, got it. But could you say about your Preview 1 for prism 6.3.0. it's working as well for switching between tabs? cuz according with your release notes, some fixes were marked as Breaking . > This in combination with IActiveAware should address the majority of TabbedPage issues?\nIsActiveChanged handler is not firing when I'm switching between tabs in my app. @brianlagunas \nmy version of prism is 6.3 pre-2. but what profit in this way? according with your way I need anyways detect when tab was changed, but how I'll define it?. the same problem with deep linking & modal nav for me now\nBut I found temporary solution by setting useModalNavigaition flag to false for the last page\n. currently I have temporary resolved this issue with separate navigation to the middle page, then from the middle page I'm navigating to the last page inside OnNavigatedTo method for the middle page. Also need to set useModalNavigation flag to false for the transition on a last page. ",
    "judgy": "1.) The ProjectTemplate is still working without the PrismUntyApp.csproj.\nI haven't found any ProjectTemplate with a root csproj file anywhere - and no documentation for that.\n2.) I've just found the new NuGet package Prism.Unity.Forms. (The prerelease has been downloaded just 32 times..). I'll replace it.\n3.) The WinPhone8 project is still legacy, isn't it?\nEven if it is still part of the original Xamarin template, it should be removed.\n. Sorry, haven't seen the file PrismTemplatePack.sln in the folder _\\Extensibility\\TemplatePack_.\nHave also exchanged Prism.Unity.Forms.\nThis is the first time I'm sending PRs. So I hope, I've done it in the correct order.\nPlease go on doing this great job. \nI'm supporting you by watching all your Pluralsight courses..\n. Hi Brian, ok, just updated the template. Hadn't the time to test and commit the changes yet. So I'll commit it only in my prism fork. \nIf you want to do it yourself, it's fine. Thought you could need some help.\nI'm also developing some T4 templates to create complete Prism/Xamarin solutions. \n. Ok, I've commited all updates to\nhttps://github.com/judgy/Prism/tree/master/Extensibility/TemplatePack\nFeel free to take what you need.\nTo your comments above:\nYou cannot remove all items you commented above.\nFor example you need the reference to the portable class.\nYou can only remove the ApplicationInsight Wizzards.\nSomething I still don't know: How can the template be modified so that the Configuration Manager of VS has the 'build' and 'deploy' checkbox marked.\nHave fun on the Evolve16\n. ",
    "EuroEager2008": "Sure, first a little more explanation:\nI have one application \"exe project\" which performs the bootstrapping, contains the shell etc.\nThe solution also contains 3 modules (dll's) with classes implementing IModule.\nAll the 4 module projects compile and copy the project dll's to the shell project's modules folder (but not the referenced assemblies like prism.wpf) which is discovered by DirectoryModule.\nThe copy happens as a post-build-event.\nAll is well and working.\nLater I decided to remove one of the 4 modules from the solution, but forgot to remove from the modules folder so it stayed there and silently loaded without doing anything.\nLater I upgraded some nuget packages (e.g. prism.wpf, prism.core etc.) to the latest 6.1 version, but because the stale/removed module was no longer in the solution it was consequently not upgraded and kept old references.\nThe old prism.wpf which was referred to from the stale module project was thereby gone (the shell project loads all the assemblies to keep fileset low and small) and since it was not removed it was attempted loaded by the bootstrapper, but not working.\nException was thrown which didn't give me much hint of which file could not be loaded and the root cause of the loading, exception details below.\nThis is a small project and I found the problem after some thinking and tracing, but I can imagine that in a big project this could possibly be a bigger problem.\nAs far as I know there is no smart automatic solution to cleanup such kind of files, perhaps I am not doing what should be done when I just copy the project assemblies without their dependencies ?\nAnyway, a better hint when starting up the app would be welcome, exception:\nType: System.IO.FileLoadException\nMessage: Could not load file or assembly 'Prism.Wpf, Version=6.0.1.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\nFileName: Prism.Wpf, Version=6.0.1.0, Culture=neutral, PublicKeyToken=null (Note the version, only 6.1 existed in the app at this time)\nInnerException's FusionLog had some info, but nothing really useful (at least not for a newbie like me)\n. ",
    "Hartdrooz": "Seems the problem is not related to Prism but some code that was working in Windows 8.1 that doesn't work now after I did the conversion to Windows 10.  I will close this issue.\n. Is really frustrating, the application was running like a charm in Windows 8.1 now you need when you do the conversion change a lot of UI issues, fix some adaptive layout and top of it some code now is broken.... \n. Thanks Tom, like I said the problem was not Prism ;) so I closed this ticket but it was some control I used in Windows 8.1 that was not okay in release in UWP :)\n. ",
    "malylemire1": "PR Submitted.\n. ",
    "calebnelton": "Yes, will close this one and create 2 new ones.\n. Whoops, I'm still getting use to submitting pull requests ... didn't mean to sync those last commits. I intend for those to go onto a separate pull request.\n. ",
    "buldo": "@brianlagunas, in our project I created interface ICancelableConfirmation that inherits from IConfirmation an have property boolean property Canceled. Cancel button still sets the Confirmation = false, but it also sets the Canceled = true.\n. ",
    "furyconcept": "Is there any way at all to force the view to be reinitialised each time the InteractionRequest is triggered. We have some quite complex views that we absolutely cannot have using the same instance each time. \nBeing able to pass a type as the WindowContent and having our IOC resolve it each time is the ideal scenario for us, we don't care if this causes a small performance hit.\nWe would really like the InteractionRequest to work in a similar way to RequestNavigate, in which our IOC always creates us a new instance of our view each time it is called.\nAny way to achieve this? Should we even be using InteractionRequest for this??\n. ",
    "agoodwin": "Thanks so much for implementing this, it works perfectly for me. Regarding the drawbacks you originally mentioned, the second one had the follow-on effect that if <views:CustomPopupView/> had a view model with constructor arguments, you'd get an annoying designer error (as described here and here).\nIt was possible to ignore, and things would work at runtime, but having designer errors is not nice and workarounds such as trying to use a region (e.g. <ContentControl prism:RegionManager.RegionName=\"CustomPopupRegion\"/>) came with equally difficult to solve problems.. ",
    "chr1sk0n": "Great. Thanks a lot.\n. ",
    "brusMX": "Hey guys in Windows Phonw (UWP win 10) this issue is very present.\nI have noticed that you guys have a pull request to solve it on Mobile.\nCan yo merge this pull request to master so we can have it on the last version?\nhttps://github.com/PrismLibrary/Prism/pull/477/files\n. ",
    "bokmadsen": "I've just updated today and I have v4.0.1.89\n. Great thank. No hury - I dont need WP for now\n. ",
    "dude3133": "Actually it is not closed. NavigationService should handle this case. \nFor example you got 3 buttons which navigates to different views (viewA, viewB and viewC) if user will tap on second button, than in same moment on first and third it should navigate only on viewB, not on viewB->viewA->viewC. @brianlagunas Okay, another example:\nI got master details page and different viewmodels for master and details. There is button both on master and details. How should I know about clicking on button from different viewmodel? Why not create property in NavigationService like IsNavigating so I could know about navigating? Or I should create some crutch to manage this?. ",
    "hnabbasi": "@brianlagunas is correct. This is not a bug in NavigationService. If you send it 2 commands, it will execute 2 commands. You have to manage the locking/unlocking somewhere in your view model.\nUnfortunately, the CanNavigate approach only works for navigation to pages and not to pop-ups. You can double-tap a button to present a pop-up and find out that you have two pop-ups displayed, maybe more.\nTo fix this, I have a TaskRunner service (kinda like Xamarin's Sports app but not a static class), that runs all my tasks. All my commands (to navigate or show a pop-up, etc) are tasks that are run via TaskRunner service. I lock the navigation with CanNavigate in my BaseViewModel before calling the TaskRunner.RunTask() and unlock it in two places. Once in the OnNavigatedTo virtual method in my BaseViewModel, and once in the AlertService after it displays the pop-up. This takes care of double/triple taps issue.. This is something we ran into recently. Whenever we found ourselves resorting to ServiceLocator (XF.DependencyService), we refactored to be more MVVM friendly and because it introduced headaches when unit testing. We also wrap any 3rd party libraries to register with our Unity container for the same reason.\nPersonally, I think we can live without XF.DependencyService, but, I also think it might be a good idea to leave it in there as an option, for now. Prism.Forms community is growing and more developers are join in. A lot of these developers I talked to, are new to MVVM/PRISM and are coming from Xamarin-lead tutorials where they push SL heavily. Prism.Forms should be flexible to accommodate them while making them use MVVM the proper way. If you use Prism.Forms properly, you will never need XF.DependencyService, eventually we can take it out. IMO\nAre folks using AutoFac asking for this support?. @dansiegel, for Register a Singleton for all implemented interfaces, does the RegisterMany<>() register all named and unnamed registrations?\ne.g. If,\n```csharp\npublic interface IBeta { void Log(string s); }\npublic class A : IAlpha, IBeta\npublic class B : IBeta\nis registered as,csharp\ncontainerRegistery.RegisterMany();\ncontainerRegistery.Register(\"BA\");\nthen:csharp\nvar a = Container.Resolve(\"BA\");\nvar b = Container.Resolve();\nvar c = Container.Resolve();\n``\narea,b,csame? or willastill be a differnet instance? And how will this API work withRegisterSingleton<>()`?. ",
    "tbaggett": "@hnabbasi do you mind providing your implementation to solve this? I also have popups to contend with and would love to use your approach. Thanks!. Thanks, @brianlagunas, for the multiple button click fix reference. I was interested in reviewing @hnabbasi 's solution since it also takes popups into account.\nThanks to both of you for the quick response and links!. Hey Brian, sorry for the slow reply! I had already deleted my test app when you replied. I've been upgrading to a new system for the past couple of days but will reproduce the test app and provide it to you later today or over the weekend.\n. Is the Prism Template Pack available/compatible with the new Xamarin Studio v6.0? It isn't shown in the add-in manager when I search for \"prism\". I can create a test app without it, but will miss it. \ud83d\ude04 \n. I built a new test app with all the new Xamarin stuff and things are working as expected this time. I'm not sure if I was doing something wrong (likely haha) or if all the shiny new stuff took care of the issue. Sorry for the false alarm!\nPlease note though that the Prism Xamarin Studio add-in is still missing for me in the new XS. It would be great to figure out what the issue is with that. It was really helpful.\n. Apologies, I didn't state my question clearly here. How do I retrieve the current full uri, presumably from the Navigation service? I've already handled the persistence. Sorry for the confusion!\nDeep linking is awesome. Restoring the app to its previous state in the event of crashes, or after being forced to close due to memory constraints/OS updates/reboots, etc., seems like a natural use of it. Being able to fetch the complete uri for the current navigation stack would make this really easy.\nThe app I'm working on has a short, mostly fixed navigation path. It is possible to hard code all the possible uri values in this case, but this approach doesn't cut it for a larger or more dynamic app.\n```\n    public enum AppPages\n    {\n        Login,\n        ForgotPassword,\n        CreateAccountStep1,\n        CreatAccountStep2,\n        CreateAccountStep3,\n        ScanQrCode,\n        QrCodeNotWorking,\n        SetPhoneNumber,\n        ServiceAddress,\n        Payment,\n        PaymentConfirmation,\n        WirelessNetwork,\n        WirelessNetworkConfirmation,\n        Finished\n    }\nprivate readonly Dictionary<AppPages, string> _pageRestoreUris = new Dictionary<AppPages, string>\n{\n    {AppPages.Login, \"/NavigationPage/Login\"},\n    {AppPages.ForgotPassword, \"/NavigationPage/Login/ForgotPassword\"},\n    {AppPages.CreateAccountStep1, \"/NavigationPage/Login/CreateAccountStep1\"},\n    {AppPages.CreatAccountStep2, \"/NavigationPage/Login/CreateAccountStep1/CreatAccountStep2\"},\n    {AppPages.CreateAccountStep3, \"/NavigationPage/Login/CreateAccountStep1/CreatAccountStep2/CreatAccountStep3\"},\n    {AppPages.ScanQrCode, \"/NavigationPage/ScanQrCode\"},\n    {AppPages.QrCodeNotWorking, \"/NavigationPage/ScanQrCode/QrCodeNotWorking\"},\n    {AppPages.SetPhoneNumber, \"/NavigationPage/ScanQrCode/SetPhoneNumber\"},\n    {AppPages.ServiceAddress, \"/NavigationPage/ScanQrCode/SetPhoneNumber/ServiceAddress\"},\n    {AppPages.Payment, \"/NavigationPage/ScanQrCode/SetPhoneNumber/ServiceAddress/Payment\"},\n    {AppPages.PaymentConfirmation, \"/NavigationPage/ScanQrCode/SetPhoneNumber/ServiceAddress/Payment/PaymentConfirmation\"},\n    {AppPages.WirelessNetwork, \"/NavigationPage/ScanQrCode/SetPhoneNumber/ServiceAddress/Payment/PaymentConfirmation/WirelessNetwork\"},\n    {AppPages.WirelessNetworkConfirmation, \"/NavigationPage/ScanQrCode/SetPhoneNumber/ServiceAddress/Payment/PaymentConfirmation/WirelessNetwork/WirelessNetworkConfirmation\" },\n    {AppPages.Finished, \"/NavigationPage/Finished\"}\n};\n\npublic AppPages CurrentPage { get; set; }\npublic Uri CurrentPageUri => new Uri(_pageRestoreUris[CurrentPage]);\n\n```. Great, thanks so much! Any chance this can be labeled as a future enhancement?. @brianlagunas, thanks so much for getting this one taken care of! I will give it a try and report back if I run into any issues.. ",
    "chekodev": "`using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing System.Text;\nusing Xamarin.Forms;\nusing Prism.Mvvm;\nusing Prism.Navigation;\nnamespace Test.ViewModels\n{\n    public abstract class ViewModelBase : BindableBase, INavigationAware\n    {\n        #region Services\n    protected readonly INavigationService navigationService = null;\n\n    #endregion\n\n    public ViewModelBase(\n        INavigationService navigationService\n        )\n    {\n        this.navigationService = navigationService;\n    }\n\n    #region Navigation\n\n    public virtual void OnNavigatedFrom(NavigationParameters parameters) { isNavigating = false; }\n\n    public virtual void OnNavigatedTo(NavigationParameters parameters) { }\n\n    public virtual void OnNavigatingTo(NavigationParameters parameters) { }\n\n    public virtual bool OnBackButtonPressed => true;\n\n    public void BackButtonPressed()\n    {\n        if (navigationService != null)\n            if (OnBackButtonPressed)\n                navigationService.GoBackAsync();\n    }\n\n    private bool isNavigating;\n\n    protected Task SafeNavigateAsync(string name, NavigationParameters parameters = null, bool? useModalNavigation = null, bool animated = true)\n    {\n        if (isNavigating)\n            return Task.CompletedTask;\n        isNavigating = true;\n        try { return navigationService.NavigateAsync(name, parameters, useModalNavigation, animated); }\n        catch { return Task.CompletedTask; }\n    }\n\n    #endregion\n\n}\n\n}\n`. ",
    "olivertech": "Hi @brianlagunas I have implemented your suggestion with \nNavigateCommand = new DelegateCommand(Navigate).ObservesCanExecute((vm) => CanNavigate);\nAnd it is working, but I am getting a colateral effect that I would like to resolve...\nI have a menu with a lot of buttons. When I tap any one, all buttons are disabled on the same time... for me it is not all a problem, but all button textcolor turns into a dark color that I do not like. I would like to maintain the textcolor, the same one in enabled state (which is white).\nI wanna change this textcolor in disabled state, but I am not finding a way.\nI have made a custom button, as below:\n```\n    public class CustomButton : Button\n    {\n        private Style normalStyle;\n    public Style DisabledStyle\n    {\n        get { return (Style)GetValue(DisabledStyleProperty); }\n        set { SetValue(DisabledStyleProperty, value); }\n    }\n\n    public static readonly BindableProperty DisabledStyleProperty = BindableProperty.Create(\"DisabledStyle\", \n                                                                                        typeof(Style), \n                                                                                        typeof(CustomButton), \n                                                                                        null, \n                                                                                        BindingMode.TwoWay, \n                                                                                        null,\n                                                                                        (obj, oldValue, newValue) => { });\n\n    public CustomButton()\n    {\n        normalStyle = this.Style;\n        this.PropertyChanged += CustomButton_PropertyChanged;\n    }\n\n    private void CustomButton_PropertyChanged(object sender, PropertyChangedEventArgs e)\n    {\n        if (e.PropertyName == \"IsEnabled\" && this.DisabledStyle != null)\n        {\n            if (this.IsEnabled)\n                this.Style = normalStyle;\n            else\n                this.Style = DisabledStyle;\n        }\n    }\n}\n\n```\nAnd I Have this xaml code:\n<custom:CustomButton x:Name=\"btnFaleConosco\" DisabledStyle=\"{StaticResource ButtonDisabled}\" HorizontalOptions=\"Start\".... />\nAnd here I defined the disabled style, inside my masterdetail page:\n        <ContentPage.Resources>\n            <ResourceDictionary>\n                <Style x:Key=\"ButtonDisabled\" TargetType=\"Button\">\n                    <Setter Property=\"TextColor\" Value=\"White\" />\n                </Style>\n            </ResourceDictionary>\n        </ContentPage.Resources>\n\nThe custom event is called, but nothing happens.\nSo, is my code correct or is there any other way to change the disabled text color for all buttons ?\nThanks.. Using Xamarin.Forms with Prism, which are Netstandard, do not work with those packages... Both of them uses Fullframework and when you try to get each one, a message is throwed saying:\nSeverity    Code    Description Project File    Line    Suppression State\nWarning NU1701  Package 'Xamarin.Forms.GoogleMaps 2.3.0' was restored using '.NETFramework,Version=v4.6.1' instead of the project target framework '.NETStandard,Version=v2.0'. This package may not be fully compatible with your project.\nSeverity    Code    Description Project File    Line    Suppression State\nWarning NU1701  Package 'Xamarin.Forms.GoogleMaps 2.1.0' was restored using '.NETFramework,Version=v4.6.1' instead of the project target framework '.NETStandard,Version=v2.0'. This package may not be fully compatible with your project.\n. ",
    "systemsymbiosis": "Good points.I am not sure how much of an issue this is. As I understand it object lifetime management is a common issue across IoC containers. I had not hit any performance issues related to this issue. I just wired up the Whitebox profiler to my application and observed that there may be issues. I decided to see if I could write the code to resolve them.\n. During my research into this issue I came across the following Stack overflow question which I feel has some relevance to the discussion here.  \nhttp://stackoverflow.com/questions/9433983/autofac-any-way-to-resolve-the-innermost-scope \n. I raised this issue based purely on the observations that I made using the profiler. The warnings seem clear to me. Surely it would be preferable to see this integration work in line with the Autofac best practices.\nClearly some deep thought has been given to these issues in the past.\nhttp://codebetter.com/wardbell/2010/01/01/an-ioc-agnostic-prism-bootstrapper/ \nhttp://nblumhardt.com/2010/01/resolve-anything/comment-page-1/ \nMaybe @nblumhardt could be so kind to give us some additional insight? \nShould we care about the observed behavior of the current codebase?\nWhat may be a good way to resolve the problem if one does in fact exist?\nAny ideas or suggestions are most appreciated.\n. @nblumhardt thanks for the feedback. I will give this a shot and if I feel good about the solution I'll submit a PR on the Autofac repo. If I'm struggling I may raise a stack overflow question to try and get some help!\nAnd yes the profiler is a great tool. Longer term I'll be happy to contribute to that project. Maybe we could turn it into a Prism based application with Modules for each DI container that it could support? A flexible Docking Pane based layout may suit the profiler pretty well. \n. @brianlagunas OK awesome Brian. That is super kind of you!. I am going to take a look at this as soon as I have a chance. I took a look at the source and it will not be an easy undertaking but I am up for the challenge. I'll fork @nblumhardt's repo and see how I get on.\n. ",
    "nblumhardt": "Hey folks :-)\nThere's one slight catch (anything registered using InstancePerLifetimeScope() will behave differently), but I think fixing this on the Autofac Service Locator side is the way to go.\nCommon Service Locator unfortunately doesn't take lifetime management into account at all, a deficiency that makes it a bit underpowered given most containers use some form of lifetime scoping these days.\nNevertheless, using _container.BeginLifetimeScope() to get a new scope that the instance can be resolved in here: https://github.com/autofac/Autofac.Extras.CommonServiceLocator/blob/master/src/Autofac.Extras.CommonServiceLocator/AutofacServiceLocator.cs#L54 (and below in the enumerable version) and not disposing the returned ILifetimeScope would let the GC handle this. The profiler will still emit a warning about the scope not being disposed, but that's preferable to a space leak.\nI would love to PR this over at the Autofac side but I'm seriously short on time - happy to help with a review if anyone's able to get one up there.\nBTW @systemsymbiosis - really nice to see the profiler get some use here. It's a bit under-appreciated and needs some love desperately :-)\n. It'd be wonderful to see it picked up.\nI'd originally planned to support multiple containers, but I don't think profiling support is widespread. We had to do some work in Autofac to get the right data out at the right time. The existence of a supported profiler would probably motivate any necessary changes in the various containers though, so probably even more reason to take this approach :-)\n. ",
    "ahmedhasanmotiwala": "I am facing a problem, its related to above conversation,.. In my case when user login successfully I navigate like this NavigateAsync(\"MainMasterDetailPage/MainNavigationPage/HomePage\"), when click on menu button and then want to go to the profile page I just say NavigateAsync(\"ProfilePage\") or I can say NavigateAsync(new Uri(\"ProfilePage\", UriKind.Relative)... ok .. ? but in this case the navigation bar for the \"back\" button is not showing.... but if I give the uri like this NavigateAsync(\"MainMasterDetailPage/MainNavigationPage/HomePage/ProfilePage\") the navigation bar or default back button for ios is showing.... but when I click on back button it always go to the HomePage ... thats not right because I have multiple tabs on home page like Contact Page ... if I go to contact page then click on ProfilePage from menu then It goes to ProfilePage after that when click on back button I goes to \"HomePage\" but It should go to contactPage ..... Kindly help...  . Summary: If I am not wrong .. \n\n\nwhen I say NavigateAsync(\"ProfilePage\")  I am giving the relative uri and I am not getting navigation bar or back button which is needed,\n\n\nwhen I say NavigateAsync(\"MainMasterDetailPage/MainNavigationPage/HomePage/ProfilePage\") I am giving the absolute uri  and getting the back button but I always go to the home page, which is not correct.\n\n\nI have tried to place a custom button on ProfilePage and say navigationService.GoBackAsync();\nIt works perfectly with this navigation uri as mentioned above NavigateAsync(\"ProfilePage\") but I don't want my custom button I just want default back button for IOS  and same functionality like navigationService.GoBackAsync();.. Hmmm.. Thanks much Brian.... I am trying... \n\n",
    "pcastilho": "Hi Brian, how are you?\nMy name is Paulo I'm from S\u00e3o Paulo - Brazil, I'm starting to use prism with xamarin and I have a doubt, I have marterdetail in it I have a menu of pages, the photo and the username of the logged in user.\nI need to pass to masterdetail the Model that contains these data to treat it in the viewmodel, how can I perform this process, could you give me a hint how to do it?\nI'm sorry I barely confused the understanding. my English is not very good.\nThanks!. ",
    "HarmenGrosseDeters": "Well in my case, I was trying to 'autowire' viewmodels to NavBarGroups form devexpress.wpf, which are derived from FrameworkContentElement (for whatever reason). I inject those NavBarGroups vieww from different modules with a regionadapter into the navbarcontrol ( think some control like the navigation pane in Outlook at the left). Works as expected, if I have assign the viewmodel myself.\nI was surprised the autowiring wasn't working, since I could see that a NavBarGroup has a DataContext. Being naive, I assumed there is just one class with DataContext.\nI like the autowire viewmodel feature, so I am using it at every oppurtunity. Like with a view derived from Window, which I open modal. The Window class also has a DataContext Property, but it's not derived from FrameworkElement, so that is also not going well. (I guess an Interface for classes with a DataContext would have been nice.) \nI guess it's alright to just move on at this point, because it's only a minor glitch if 99% views are derived from FrameworkElement and I feel like wasting your time with something of no greater importance. I can always assign the viewmodel myself in those cases. \n. ",
    "michelbieleveld": "I am having the same issue, also with a component from DevExpress (a RibbonPage). Is there a way to use the above suggested fix without needing to recompile the library? Sorry, not well enough versed in C# to find the solution.\n. Thanks Brian, easy solution, much easier than trying to override stuff than can't be overridden. It is working perfectly now. \n. ",
    "christiannagel": "What about adding Microsoft.Extensions.DependencyInjection? This should be lightweight. https://github.com/aspnet/DependencyInjection\n. I think it would be ready for consideration of .NET Standard. Creating a portable library, you can already convert this portable library to .NET Standard. To use Prism.Core with this portable library a workaround can be done to use Prism.Core. However, it would be better not to need this workaround. I think all what would be needed with Prism.Core is to mark the NuGet package to support NetStandard.\n. In my UWP and WPF projects I'm currently just using Prism.Core, together with Microsoft.Extensions.DependencyInjection as the container.\nThe view-model is in a portable library. I'm no longer using the old portable library type, but the new one with NetStandard.\nIt also would be great to have direct support for the Microsoft.Extensions.DependencyInjection container from Prism. It's easy to use it directly if just Prism.Core is needed.\n. ",
    "CarMatt": "Yes we do,\nPrism.Core 6.1.0\nPrism.Unity 6.2.0-pre3\nPrism.Forms 6.1.0-pre3\nAnd latest stabile Xamarin.Forms\nJust realized that we only tested on the simulator for iOS, it might have something to do with it? Will test a device soon\n. Yes, NavigationService.GoBack().\n```\n        public PrismContentPage2ViewModel(INavigationService navigationService)\n        {\n            _navigationService = navigationService;\n            PopDelegateCommand = new DelegateCommand(Pop);\n    }\n\n    private void Pop()\n    {\n        NavigationParameters parameters = new NavigationParameters();\n        parameters.Add(\"key2\", \"value2\");\n        _navigationService.GoBack(parameters, true);\n\n    }\n\n```\n. Super, providing you soon\n. -->Git\nHave tested again and it works on droid but not in iOS. However, have not tested the iOS device yet (only iOS simulator)\n. Thx Brian, like your fast feedback! \n. Good news! See you at //Build next week =)\n. Aha,\nI thought in my haste I could just wait there for the Page2 to Pop and then continue. But as you describe it, await is just waiting for the navigation process(navigation to page2) is done.\n. ",
    "EugeneBuzin": "Tank you very much. I'll try to create my app with Unity DI.\n. OK.\n. Brain, I'm consonant with you. But where will I (as beginner) get help for WPF Prism application development. Please tell me about it. Because now I till have a lot of problems and need help. For now I still use Stackoverflow for help.\nEugene.\n. Now I can use free trial only because I'm (for the time being) unable to pay for courses unfortunately.\n. Thanks! It works fine!\n. So great! You help and rescue me! The application I develop is very important for me. Thank you very much. Please forgive me for the trouble.\n. I know that you are busy people, but help me, please, I really need to solve the problem of shared access to the serial port from a number of Prism Modules.\n. ",
    "jockster1000": "\n. Basically when the app is not open and you enter via cortana, the NavigationService throws a null exception. Maybe i'm doing something wrong. If you need any more details let me know. It all works fine if the Application is already open. Regards\n. Thanks @bartlannoeye  I will have a look later today.\n. I think this is to do with PCL and the Live player so maybe not a real issue for now.. ",
    "LijiElizabeth": "@jockster1000 did you manage to resolve this issue? Im having the same problem of having to get Cortana work, if the app is not open. It works fine while the app is open\n. ",
    "harpagornis": "EDIT, the popupwindow name is Confirm1View.xaml, the same as the triggeraction.\n. O.K.  I will try it.  Thank you.\n. ",
    "jeremydmiller": "Hey guys, instead of inflicting strong naming pain and punishment on folks that don't need/want the friction, have you considered recommending StrongNamer usage instead?\n. ",
    "JasonBro": "Hi Brian,\nThanks for the prompt reply. I've created a test project to show the\nproblem. iOS works as expected. Android is nearly right, but the page title\nstill says View 1 when it should be View 2. Windows 8.1 Phone and\nWindows UWP (running on a Windows 10 Phone Emulator) have two pages, but\nboth are View 1, and the Windows 8.1 version (not a phone version) also\nseems wrong.\nLet me know if you have any problems with the project (it's a VS2015 one)\nor would like any further information or help\nKind regards,\nJason\n[image: Inline images 1]\nOn 27 February 2016 at 23:04, Brian Lagunas notifications@github.com\nwrote:\n\nI can't duplicate it on my end. Make sure you aren't navigating to any\nviews in the constructor of your MainNavigationPage.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/476#issuecomment-189744489.\n. Ooops - I attached it to the email, but I think it must have been eaten by something on the way there. I'll have another go...\nNavTest.zip\n\n. Excellent! I'll carry on with my app assuming it'll be fixed by the Xamarin people before I release my app. Could you put the link to the Xamarin bug in here so that anyone else with this issue can find out what's happening then close this bug, please.\n\nThanks also for a very prompt reply: it gives me a lot of confidence in Prism and the work that you've done!\n. ",
    "rmarinho": "This should be fixed in Xamarin.Forms 2.2 stable. \n. Well here everything works in the 3 platforms..  we need a 3rd opinion . ",
    "webwarrior06": "My vote is up for this. Your point is absolutely correct. \n. ",
    "davidop": "Thanks. Do you have an example?\n. Thanks @MikaelFerland \n. ",
    "MikaelFerland": "@davidop If you really want a exemple. Feel free to watch \"Prism Problems & Solutions: Mastering TabControl\". @brianlagunas implement the interface in his demo if I remember it's the first module so you will be good with a trial of PluralSight. \n. ",
    "chrisaswain": "As a work-around, I was able to get it working by using the file generator tool at http://reswcodegen.codeplex.com/ to generate a resource file with the required static properties to access the strings in the RESW file.  Now I can use the following syntax:\n[Required(ErrorMessageResourceType = typeof(Resources.Strings), ErrorMessageResourceName = \"EmailInvalidMessage\")]\n[EmailAddress(ErrorMessageResourceType = typeof(Resources.Strings), ErrorMessageResourceName = \"EmailInvalidMessage\")]\npublic string Username { ... }\nI still think this is a bug and that there needs to be a way to use the RESW file as intended without requiring this Visual Studio plugin to generate a CS file.\n. ",
    "rinoandrejohnsen": "The code is inspired from MefContrib and a class or two are copied. That project is licensed under the MS-PL license. Is this a problem for signing the cla?\n. This turned out to actually be a problem. I will do a remodeling of it and not base it on existing code, but keep the pragmatic function this library holds as it is in current state.\n. Finally came around to rewrite this, so that everything is OK. This one adds Mef support to Windows UWP applications. It comes so as an unity extension. So both are needed, but you can use the style you like. If you add something to the Unity container it will be available in the Mef container - and vise versa!\n. Ah, that is a bit sad indeed! Thanks for you replay.\n. That sounds fair enough to me. I can understand your hesitancy towards possible getting more work on your plate. I will however create a pull request for it, so it can be reviewed and at least have a chance of getting trough. I am putting a bit of pressure on it since I have used some time to find a new go-to-ioc-container after Unity slowed down. Grace have really peaked my interest and I think sharing this great piece of software is the right thing to do.\nI will present a pull request and you and your team can deal with it according to your possibilities and whishes. I will also follow it through if you have feedback or changes you want to see down the line.. Noted, I shall embalm myself with idea that chances are pretty low for this passing during my programming, but for the time being I am finding a great joy with this, so I will try to keep some wind in my sails.. This my first take on this. All tests are good and I have tested the Xamarin - and Wpf implementation on actual apps. Feedbacks are welcome.. Hate to pull the 'works-on-my-computer' card, but so it does. Have merged in the upstream project and made the changes. Let me know if there is something else that I need to do. \n. That's ok for me :)\nI will do changes as soon as your pull request is in.. It, indeed, was much easier to implement. A 'CommonIOCContainer' in a sense - I can dig it. Especially nice for modules since they don't have to depend on a specific container implementation.\nWith that said, I want to drill a bit on this issue with AppVeyor not building. Can you take a look at it? I have looked trough the logs and from what I can see, there is nothing I can do about from here. If however there is something I can do, please let me know.. Fair enough. I could build a case for this, but I understand that you have enough on your plate as it is. Closing this pull request.. ",
    "grzegorzbojar": "I am using iOS 9.2 on iPad.\nI deleted animations (commented out onAppearing/Disappearing methods) and the problem still occurs.\nI will try to prepare a solution to reproduce a problem.\n. Here is a solution:\nhttps://onedrive.live.com/redir?resid=95445803EE63F494!3008&authkey=!AAd9ZQ9NZQQBpA0&ithint=file%2czip\nWhen I start it in horizontal (so I see links in Master Page) and start switching between View1 and 2 the Exception occurs. I was not able to reproduce it in the simulator (or I am too slow using a mouse, or it is only a problem on the real device).\nIt only happens if transition animation of pages is enabled. If navigation is used with animated: false the problem doesn't occur\n. I've tried awaiting commands - no change. The exception occurs. I will try to use XF without PRISM to reproduce it and let you know!\n. ",
    "tomaswinston": "Cheers Bart!\nI'll continue using, as you suggest, the EventAggregator. However, on further researching/reading of @brianlagunas blog here (correct me if I misunderstood Brian), it appears that passing parameters via the GoBack method call will be supported in Prism Forms 6.2.0  for Xamarin which is fantastic!\nT\n. Hi Brian. Sorry if I wasn't clear. I think I was a little confused myself. I have Prism.Forms 6.1.0-pre3 in my project. When reading your blog I understood that the GoBack with parameters was going to be available in 6.2.0 (now understanding that 6.1.0-pre3 in part of that upcoming major release).\nSo to answer your question - the GoBack with navigation parameters doesn't appear to be there in 6.1.0-pre3. Also, I am using Xamarin Forms Version 2.1.0.6529\nThe following is the contents of the Assembly Browser for version info...\n```\nusing System;\nusing System.Diagnostics;\nusing System.Reflection;\nusing System.Resources;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.Versioning;\n[assembly: AssemblyVersion (\"6.0.0.0\")]\n[assembly: Debuggable (DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]\n[assembly: AssemblyCompany (\"\")]\n[assembly: AssemblyConfiguration (\"\")]\n[assembly: AssemblyCopyright (\"Copyright \u00a9  2014\")]\n[assembly: AssemblyDescription (\"\")]\n[assembly: AssemblyFileVersion (\"6.0.1\")]\n[assembly: AssemblyInformationalVersion (\"6.1\")]\n[assembly: AssemblyProduct (\"Prism\")]\n[assembly: AssemblyTitle (\"Prism.Forms\")]\n[assembly: AssemblyTrademark (\"\")]\n[assembly: NeutralResourcesLanguage (\"en\")]\n[assembly: CompilationRelaxations (8)]\n[assembly: RuntimeCompatibility (WrapNonExceptionThrows = true)]\n[assembly: TargetFramework (\".NETPortable,Version=v4.5,Profile=Profile259\", FrameworkDisplayName = \".NET Portable Subset\")]\n```\nand the following is the INavigationService Interface...\n```\nnamespace Prism.Navigation\n{\n    public interface INavigationService\n    {\n        //\n        // Methods\n        //\n        void GoBack (bool useModalNavigation = true, bool animated = true);\n    void Navigate<T> (NavigationParameters parameters = null, bool useModalNavigation = true, bool animated = true);\n\n    void Navigate (string name, NavigationParameters parameters = null, bool useModalNavigation = true, bool animated = true);\n}\n\n}\n```\n. Ok. Solved. Although I had installed the latest 6.1.0-pre3 Prism.Forms package, the references in my Xamarin Studio Xamarin Forms project hadn't updated to reference the new package and were instead referencing the older package of 6.0.0.\nSorry for wasting ones time and thanks for guiding me to the solution.\nT\n. Hi Brian. That's right. Or at least that is all I can attest to at the moment.\n. Hi,\nI hope I am wrong but it seems that this is still not working or at least not working once again...\nI am running Xamarin Forms 2.3.1.114 and Prism.Forms 6.2.0. \nI downloaded the HelloWorld demo from the sandbox and the Menu icon just appears as \"Default\" which is the Title of the ContentPage in the MyMasterDetail.xaml View.\nTom\u00e1s\n. Pity. Oh well. Waiting game again! \nThanks Brian. Love Prism.Forms! \ud83d\udc4d\n. Does that mean it should work on iOS?\n. ",
    "MichaelPonti": "You guys are in charge :) \nIf it is not consistent with your direction, it would be very easy for me to just make a new class in my app project and add it in during app creation so I wouldn't be maintaining a fork of the prism library.\n. I didn't look in the code, but I am sure custompop doesn't use the same class as your mainwindow (MetroWindow). If I were to suggest something, I would say use the CustomDialog that is in the MahApps nuget instead. You will get the metro style popup on your main window.\nIf you look in the Mahapps demo app, you will see in the pulldown menus, different ways of calling dialogs, including from the viewmodel.\n. @iupwarrior2 \nIf you still want/require the manifestmanagerutiltiy, I have the code from when it was still on codeplex. See attached.\nManifestManagerUtility.zip\n. I am pretty sure I had this error happen to me once and it was because of the directory.build.props file. I had included the prism projects directly into my project to get a better idea of how things are working. The prism library's weren't compiling until I brought over the file into the solution.. ",
    "polepage": "There is still no back button.\n_navigationService.Navigate(new Uri(\"http://www.mycompany.com/MyNavigationPage/NewsPage\", UriKind.Absolute);\nThe state of the app should now be a navigation page with my NewsPage as a root. There is a NavigationBar, but obviously no back button.\nI navigate to another page from there, using _navigationService.Navigate(new Uri(\"NewsPostPage\"), useModalNavigation: false); The state of the app should now be a NavigationPage with a NewsPage as a root and then a NewsPostPage on the stack. The NewsPostPage has a navigation bar as expected, however, there is still no back button.\nIn fact, I think I see the navigation bar flick (from no back button, to having a back button, to no back button).\nThanks.\n. I'll try to create a simple case where the issue is reproductible.\nPlatform is Android (API 25 I think)\nThanks for the rapid feedback :)\n. I extremely simplified the app and I can still reproduce it. Platform is Android (API 23).\nLink to the simplified project: https://drive.google.com/file/d/0B769Pp5RdO60cmJ0RjNoc2c4SGc/view?usp=sharing\n. I actually use a container, I just simplified the sample as much as I can.\nSo it now works. Thanks for your support.\n. Additionally. It is the MainWindowViewModel that causes issue, if I remove the ViewModelLocator.AutoWireViewModel = true from MainWindow xaml, it stops failing.\n. I solved this particular issue with a Behavior that can be associated with a TabPage. It listens to the page change event, and calls TabNaviagatedFrom and TabNavigatedTo from the inner page ViewModels that implement ITabNavigationAware (a lot like the INavigationAware that already exist). I use a NavigationParameters object to pass parameters from one tab to the other.\n. Navigated from prompt the last view model to set the data to give to the next, Navigated to gives that data to the newly selected page. I used a different interface so a Page can also be INavigationAware. The thing works with any MultiPage,l not just TabPage.\n``` cs\npublic interface IMultiPageNavigationAware\n{\n  void OnInternalNavigatedFrom(NavigationParameters navParams);\n  void OnInternalNavigatedTo(NavigationParameters navParams);\n}\npublic class MultipageNavigationBehavior : Xamarin.Behaviors.Behavior>\n{\n  private Page _lastSelectedPage;\nprotected override void OnAttach()\n  {\n    AssociatedObject.CurrentPageChanged += CurrentPageChangedHandler;\n  }\nprotected override void OnDetach()\n  {\n    AssociatedObject.CurrentPageChanged -= CurrentPageChangedHandler;\n  }\nprivate void CurrentPageChangedHandler(object sender, EventArgs e)\n  {\n    NavigationParameters navParams = new NavigationParameters();\n    if (_lastSelectedPage != null)\n    {\n      IMultiPageNavigationAware lastPageAware = _lastSelectedPage.BindingContext as IMultiPageNavigationAware;\n      if (lastPageAware != null)\n      {\n        lastPageAware.OnInternalNavigatedFrom(navParams);\n      }\n  IMultiPageNavigationAware newPageAware = AssociatedObject.CurrentPage.BindingContext as IMultiPageNavigationAware;\n  if (newPageAware != null)\n  {\n    newPageAware.OnInternalNavigatedTo(navParams);\n  }\n}\n\n_lastSelectedPage = AssociatedObject.CurrentPage;\n\n}\n}\n```\n. I use Xamarin.Behavior.Behavior(T) instead of the built in Xamarin.Forms.Behavior(T) because I had issues with the Xamarin Forms one some times ago and I never checked if my issues were fixed.\n. ",
    "jpedretti": "I'm having the exactly same problem. I was going to report this, but I saw yours.\nI analyzed the classes that would have to be modified and it is a little more complicated than simply add the DataContractAttribute .\nI copied the code from github and made some nasty changes to make it work.\nAdded the DataContractAtributte to the BindableBase, PropertySupport and ValidatableBindableBase. So far so god.\nHere came the nasty part.\n1) At the ValidatableBindableBase, I removed the readonly modifier from the _bindableValidator field.\n2) Removed the _bindableValidator  instantiation from the ctor\n3) Changed the Errors property to:\nc#\npublic BindableValidator Errors\n {\n    get\n    {\n        if(_bindableValidator == null)\n        {\n            _bindableValidator = new BindableValidator(this);\n        }\n        return _bindableValidator;\n    }\n}\n4) Changed all references to _bindableValidator field to Errors property\nI do not recommend those changes, but it is what i managed to make work, I think it is better than having an app that can't handle termination.\nPlease Prism guys, fix this for us.\n. I will create the repro and then I'll share it here. Thanks\n. Here it is. Hope it helps...\nhttps://github.com/jpedretti/SerializationWorkaround\n. ",
    "mfe-": "@jpedretti Thanks for looking into it. I'll try a fix with [IgnoreDataMember]. Anyway, it would be great if @brianlagunas could tell us, if such a workaround would be accepted as pull request.\n. You have to deal with this by yourself. \nTry the following:\ncsharp\n        protected override Task OnLaunchApplicationAsync(LaunchActivatedEventArgs args)\n        {\n            if (args.PrelaunchActivated == true)\n            {\n                //your preloading stuff\n            }\n            return base.OnInitializeAsync(args);\n        }\nhttps://msdn.microsoft.com/en-us/windows/uwp/launch-resume/handle-app-prelaunch\n. We could use the https://www.nuget.org/packages/Portable.DataAnnotations/ and target the .NET Framework 4.5.\nSee also http://stackoverflow.com/a/20079103/740651\n. Thanks for your Feedback @brianlagunas . I totally understand your concerns also your point regarding an unofficial dependency package sounds really reasonable.\n\nHonestly, I really don't see this happening right now.\n\nI thought the best solution for this issue would be to create an independent prism extension / validation libary. \nWith this Prism.Extensions you could share your PCL model with DataAnnotaion between wpf, xamarin and uwp.\nI hope I can contribute to the prism libary this way. \n. > @christiannagel Prism.Core certainly could be converted to .NETStandard... but I'm curious what benefit you believe that would have? Remember there are 3 packages that you need for any project.\nPrism.Core\nPrism.{Platform}\nPrism.{Container}\nOn new projects I and others, try to get platform independent. If we can, we do so. We achieve this for example by moving the model and viewmodel to a PCL. Therefore we only need the Prism.Core reference. There is no need for Prism.{Platform} or Prism.{Container}. \nIt would be much better if Prism.Core targets .NetStandard so we don't have to mess around with PCL.\nAs temporary solution I would suggest to provide an additional Prism.Core NugetPackage with .NetStandard support.. @weitzhandler Maybe give Portable Data Annotations a shot. I had some issues with it, but maybe it works for you.. @bartlannoeye done.. @brianlagunas Whats the state of the Template10/Prism merge? Is it somewhere tracked?. Sry, I dont know. I modified the PrismApplication.cs and did a rebuild.. \"Invoked when the application is .\" can be removed or maybe use \"Invoked when the application is activated via ShareTarget\"?. ",
    "jbachelor": "@WarBorg Did you (or anyone else on this thread) ever find a way to get around this issue? I'm facing the same problem right now... I know the navigationService is working just fine, but since I haven't been able to find a way to await the execution of the command. If there are any resources or samples you might be able to point me too, I would greatly appreciate it.\n. @WarBorg - If your situation is like mine (and it sounds like it is), then it's probably not that the method is bypassed, but the test finishes before the asynchronous call to navigate is completed. Here's how I finally got around the issue:\nOriginally, I had a list of buttons on a page, each of which navigated to a different page via delegateCommands in the corresponding viewModel like this:\nasync void NavToRestaurantList()\n{\n    await _navigationService.NavigateAsync(\"RestaurantsPage\");\n}\nThat was changed to try to get us to a more easily awaitable call to test:\n```\nasync void NavToRestaurantList()\n{\n    await NavigateToPage(\"RestaurantsPage\");\n}\npublic Task NavigateToPage(string targetPage)\n{\n    return _navigationService.NavigateAsync(targetPage, null, false, true);\n}\n```\nNow, rather than trying to test each of 5 different navigation buttons, we're testing just that \"NavigateToPage\" method. Each of the DelegateCommands hooked up to the navigation buttons simply pass the desired page name to the NavigateToPage method:\n```\n[Test()]\npublic void TestNavigateToPageCallsNavigateAsyncOnce()\n{\n    Mock navigationSvcMock;\n    Mock pageDialogSvcMock;\n    Mock eventAggregatorMock;\n    MainPageViewModel mainPageViewModel;\nnavigationSvcMock = new Mock<INavigationService>();\npageDialogSvcMock = new Mock<IPageDialogService>();\neventAggregatorMock = new Mock<EventAggregator>();\n\nmainPageViewModel = new MainPageViewModel(pageDialogSvcMock.Object,\n                                          eventAggregatorMock.Object,\n                                          navigationSvcMock.Object);\n\nmainPageViewModel.NavigateToPage(string.Empty).Wait();\nnavigationSvcMock.Verify(ns => ns.NavigateAsync(It.IsAny<string>(), null, false, true), Times.Once);\n\n}\n```\nHope this helps!\n. First:  A HUGE thank you to Brian Lagunas and Dan Siegel for all of their help over the course of developing this app. It went live just this week! We're looking forward to moving the app to .net standard and Prism 7, but that's not done yet.\nThe app is called \"Luxor Controller\". I'm afraid it is only useful to those who have a Luxor lighting system installed around their home or business, but this is our first Xamarin app release, and we're extremely excited about it! There are some user concerns we cannot address, since they are related to what is possible given the firmware on the controllers, so you will see some pretty angry reviews. We're trying to address those on a case-by-case basis as we go.\nAuthor:  Luxor Mob at Hunter Industries\nWebsite:  https://www.fxl.com/support/luxor-using-an-ios-or-android-device-to-control-system \nApple: https://itunes.apple.com/ca/app/luxor-controller/id710090124?mt=8 \nAndroid: https://play.google.com/store/apps/details?id=com.hunter.luxor&hl=en \n\n\n\n\n. We just ran into the same issue on iOS, actually. We're working around it using the DeviceService to BeginInvokeOnMainThread for the PageDIalogService call causing the problem... But of course, it makes me nervous about all our other calls that are not wrapped like this.. @dansiegel - What if you actually want to specify that you'd like to use modal navigation?  \nI've tried creating my own class inheriting from PageNavigationService, but I'm running into errors with everything I'm trying. If anyone has a sample they could point me to of verifying a call to NavigateAsync(string, INavigationParameters, bool?, bool), I would be greatly appreciative.\n@MaikuB - Did you have a sample you could possibly share?. Thanks so much for the replies @brianlagunas, @dansiegel, and @MaikuB... I greatly appreciate it!\n@MaikuB - Did you just wind up not testing navigation calls any longer?\n@dansiegel - Thanks so much for the sample code, and for explaining your approach! With over 2000 tests, and a large number of them verifying navigation calls under various circumstances, I am concerned about the amount of time it would take to restructure them all to implement this pattern.\n@brianlagunas - You mentioned that:\n\nYou should inherit from the PageNavigationService and override the internal methods. \n\nAre there any examples of this you could point me to? I've been experimenting trying to implement your idea over last night and this morning, and I'm still coming up with failure after failure. The class I created is called \"FakePageNavigationService\" (see below), and I've overridden the GoBackInternal and NavigateInternal methods. I also made a virtual method to match the signature of the NavigateAsync. That got rid of the errors about attempting to mock an extension method, and instead produces an error saying that NavigateAsync is never called, though NavigateInternal is. I'm not quite sure if I'm on the right path, or driving into a brick wall. Any tips would be greatly appreciated... We do TDD, so we have hundreds of tests of navigation calls.\n```cs\n    public class FakePageNavigationService : PageNavigationService\n    {\n        public FakePageNavigationService(IContainerExtension container, \n            IApplicationProvider applicationProvider, \n            IPageBehaviorFactory pageBehaviorFactory, \n            ILoggerFacade logger) : base(container, applicationProvider, pageBehaviorFactory, logger)\n        { }\n    // MOQ requires a parameterless constructor:\n    public FakePageNavigationService() : base(null, null, null, null) { }\n\n    protected override Task<INavigationResult> GoBackInternal(INavigationParameters parameters, bool? useModalNavigation, bool animated)\n    {\n        return base.GoBackInternal(parameters, useModalNavigation, animated);\n    }\n\n    protected override Task<INavigationResult> NavigateInternal(string name, INavigationParameters parameters, bool? useModalNavigation, bool animated)\n    {\n        return base.NavigateInternal(name, parameters, useModalNavigation, animated);\n    }\n\n    // Attempt at 'replacing' the NavigateAsync extension method, though I suspect this is not the right thing to do.\n    public virtual Task<INavigationResult> NavigateAsync(string name, INavigationParameters parameters, bool? useModalNavigation, bool animated)\n    {\n        return null;\n    }\n}\n\n```. Ok... We finally came up with a way to workaround the testing issue. I wanted to share with all in case this helps you out. There is probably a better way to do this, but I haven't found that particular solution yet.\nStep 1:  Create public static Funcs to handle navigation. We used a simple static class we call Utilities. So far, there are 3 that we've made:\n```cs\npublic static Func> TestableNavigateAsync = \n            (navSvc, pageName, navParams, isModal, isAnimated) => navSvc.NavigateAsync(pageName, navParams, isModal, isAnimated);\npublic static Func> TestableGoBackAsync =\n            (navSvc) => navSvc.GoBackAsync();\npublic static Func> TestableGoBackAsyncWithParams =\n            (navSvc, navParams, isModal, isAnimated) => navSvc.GoBackAsync(navParams, isModal, isAnimated); \n```\nStep 2:  Change your calls to the navigation service to use your new funcs. For example:\n```cs\nprivate void OnNavigateToMyAwesomePageModal(Dictionary> veryImportantDict)\n{\n    var navigationParameters = new NavigationParameters();\nnavigationParameters.Add(\"keyToThatInfo\", \"very important info!\");\n\n//_navigationService.NavigateAsync(\"NameOfPageToNavigateTo\", navigationParameters, true, true);\nUtilities.TestableNavigateAsync(_navigationService, \"NameOfPageToNavigateTo\", navigationParameters, true, true);\n\n}\n```\nStep 3:  Test to your heart's content! Maybe kinda like this:\n```cs\n[Test]\npublic void TestNavigateToAwesomePageNavigates()\n{\n    int numberOfCalls = 0;\n    var actualPageName = string.Empty;\n    INavigationParameters actualNavParams = null;\n    Utilities.TestableNavigateAsync = (navSvc, pageName, navParams, isModal, isAnimated) => {\n        ++numberOfCalls;\n        actualPageName = pageName;\n        actualNavParams = navParams;\n        return Task.FromResult(null);\n    };\nsomeCoolPageViewModel.NavigateToAwesomePage();\n\nAssert.AreEqual(1, numberOfCalls);\nAssert.AreEqual(\"expectedPageName\", actualPageName);\nAssert.AreEqual(\"very important info!\", actualNavParams[keyToThatInfo]);\n\n}\n```. I've seen this error numerous times on different solutions and different machines, both mac and pc. I've been most successful getting around this error by checking the Android sdk manager. I cannot explain why, but things seem to start working only when I've got Android 7.1, 8.0, and 8.1 all installed.\nIf it still won't compile after that, I recommend deleting all bin & obj directories in your solution's projects. Then restore nuget packages and try to build one more time. \nI know this is not a satisfying answer, but at least it might help get you going. Perhaps someone else will be able to shed a bit more insight onto what's going on.. ",
    "FrancoisM": "It's a not an issue ith prism so I will close it.\nI found how to it anyway:\nContainer.RegisterType<IViewModelUtils, ViewModelUtils>(\"ViewModelUtilsDecoratee\");\n                Container.RegisterType<IViewModelUtils, ViewModelWithLoggerUtils>(\n                              new InjectionConstructor(\n                                  new ResolvedParameter(typeof(IViewModelUtils), \"ViewModelUtilsDecoratee\"),\n                                  new ResolvedParameter<ILogger>()));\n. @dansiegel I don't think this the same problem.\nWhen my app starts it does the follwing and there is no back button.\n_navigationService.Navigate(new Uri($\"http://myapp.com/{nameof(MyPage)}\", UriKind.Absolute), null, null, false)\nThen when I want to 'reset' the app (after a logout for example), I call the same code from a NavigationPage. However now the back button is there.\nIn the issue  #476 , they try to navigate to a navpage with an existing page stack. In my case, MyPage is not a navpage.\nMy config is:\nPrism.Core 6.1.0\nPrism.Forms 6.1.0-pre4\nPrism.Unity.Forms 6.2.0-pre4\nXF 2.2.0.45\n. Tks @brianlagunas. Will wait for a XF update then.\n. That's efficiency!\n. ",
    "azzamsaziz": "Can I get an answer from you guys regarding this please? Or is my answer correct?\n. @brianlagunas .\n. ",
    "Telejka": "Ok, I will use Binding and wait for further updates.\n. ",
    "AlexPalacio": "I found the culprit, it's the BindableBase, but I don't have any idea to fix it.\n. ",
    "Shawn1874": "I ran into this issue, which I forgot about.\nhttp://stackoverflow.com/questions/11139166/prism4-creating-catalog-from-xaml-createfromxaml-doesnt-compile/36456808#36456808\n. ",
    "ryancole": "@brianlagunas sorry to bug, but do you know which package is the go-to package for that? I seem to see quite a bit of mentions of the lib, but not sure if there's a nuget pkg just for that lib? Thanks!\n. Meh, I just went ahead and installed the whole Blend SDK. Covers that dependency.\n. ",
    "ederbond": "Congratulations @joacar \nI've never used DryIoC but after a few research I realized this is one of the fastest IoC Frameworks nowadays. Definately will use this with prism after your PR will be aceepted.\n@brianlagunas Is there a timeframe for the release of Prism.Forms 6.2.0 + Prism.DryIoC.Forms aut of pre ?\n. Ok @brianlagunas, I'll update Xamarin.Forms references and re-submit the poll request.\nTwo questions, \nI'm working on the \"Master\" branch, should I continue on this or make the changes on the \"v6.2-Preview\" ?\nIs any of these two branches (\"Master\" and \"v6.2-Preview\") production ready ?\nIf not is there a time frame to release then for people use on production enviroment XF.apps ?\n@joacar thanks for the feedback and tips. I'll look close to then and try to figure out the issues I'm facing.\n. @dansiegel I agree that XF still have several bugs that needs to be addressed, but I think that many companies will avoid using Prism if it doesn't provide a nuget package that use the stable version of Xamarin.Forms\nMany companies will argue that if prims will force them to use a version of Xamarin.Forms that is not marked as \"Stable\" by xamarin it could lead them to unkown but or things like that.\n. Hey @dansiegel, just updated to targe Profile 259 and updated the AutofacExtensions\n`public static void RegisterTypeForNavigation( ... )\n    where TView : Page\npublic static void RegisterTypeForNavigation( ... )\n    where TView : Page\n    where TViewModel : BindableBase. Working on unit tests... I'll providethem as soon as I have a break on my regular job.\n. Just Updated to XF 2.3.1.111-pre2\n. @dvorn and @brianlagunas  do you have any idea of when Prism 6.3 will be lauched as stable on nuget.org ?  Currently my company's compliance avoids me to use non stable libraries. . @dansiegel Fixed\n. He @brianlagunas tecnically speaking Autofac doesn't need resolving instances based on names, it is able to resolve instances based on the implemented interface so this implementantion is more cleaner and will work perfectly. Of course I can register AutofacPageNavigationService withing a name and resolve it by name too but it is not a must have for Autofac.\n. Hummm, ok. I'll change that. Thanks for the patient to explain the reasons... :+1: \n. Changed this to private since I use it twice on this class (Line 34 and Line 52).\nI don't think I have a way to register a type without a ContainerBuilder on Autofac so I've created this method to help me registering new types on an existing container.\n. You're right I'm gonna fix that.\n. INavigationService must be singleInstance too ?\n.protected INavigationService CreateNavigationService(Page page)removed.\n.protected override void ConfigureContainer()` changed to register types as singletons.\n. Hey Brian, After removing the method below from PrismApplication\nprotected INavigationService CreateNavigationService(Page page)\n        {\n            var navigationService = CreateNavigationService();\n            ((IPageAware)navigationService).Page = page;\n            return navigationService;\n        }\none of my tests stoped working (the test below):\n[Fact]\n        public void Navigate_ViewModelFactory_PageAware()\n        {\n            var app = new PrismApplicationMock();\n            var view = new AutowireView();\n            var viewModel = (AutowireViewModel)view.BindingContext;\n            var pageAware = (IPageAware)viewModel.NavigationService;\n            var navigationServicePage = app.CreateNavigationServiceForPage();\n            Assert.IsType<AutowireView>(pageAware.Page);\n            var navigatedPage = ((IPageAware)navigationServicePage).Page;\n            Assert.IsType<AutowireView>(navigatedPage);\n            Assert.Same(view, pageAware.Page);\n            Assert.Same(pageAware.Page, navigatedPage);\n        }\nshould I remove this test or take the method CreateNavigationService(Page page) to the PrismApplication back ?\nNote that on Prism.DryIoc.Forms this method still exists...\n. ",
    "JorreHolland": "Sure thing. See new commit: it basically copies the implementation of the extension with the same name from the Unity version.\n. ",
    "lecnierfreeman": "Wow quick answer, thank you. I'll test the code you provided there. \nSo, Wich Package I have to replace with Prism.Unity.Forms ?\n. Running this code:\n```\n    public partial class App : PrismApplication\n    {\n        public static App Instance { get; private set; }\n    public App()\n    {\n        InitializeComponent();\n        Instance = this;\n\n        // The root page of your application\n        MainPage = new TestMainPage();\n    }\n    protected override void InitializeModules()\n    {\n\n    }\n\n}\nclass TestMainPage : ContentPage\n{\n    public TestMainPage()\n    {\n        Title = \"Main Page\";\n\n        var button = new Button() { Text = \"Navigate to View A\" };\n        button.Clicked += (s, e) =>\n        {\n            Navigation.PushModalAsync(new ViewA());\n        };\n\n        Content = button;\n    }\n}\n\nclass ViewA : ContentPage\n{\n    public ViewA()\n    {\n        Title = \"View A\";\n\n        var button = new Button() { Text = \"Navigate to View B\" };\n        button.Clicked += async (s, e) =>\n        {\n            await Navigation.PushModalAsync(new ViewB());\n            System.Diagnostics.Debug.WriteLine(\"View A Modal Stack Count = {0}\", Navigation.ModalStack.Count);\n\n            System.Diagnostics.Debug.WriteLine(\"Pages on Modal Stack:\");\n            foreach (var view in Navigation.ModalStack)\n            {\n                System.Diagnostics.Debug.WriteLine(view.Title);\n            }\n        };\n\n        Content = button;\n    }\n}\n\nclass ViewB : ContentPage\n{\n    public ViewB()\n    {\n        Title = \"View B\";\n    }\n}\n\n```\nGetting (not expected) results:\nAndroid:\n04-08 15:11:56.236 I/mono-stdout( 3239): View A Modal Stack Count = 2\n04-08 15:11:56.238 I/mono-stdout( 3239): Pages on Modal Stack:\n04-08 15:11:56.242 I/mono-stdout( 3239): View A\n04-08 15:11:56.245 I/mono-stdout( 3239): View B\nIOS:\n2016-04-08 15:20:36.733 View A Modal Stack Count = 2\n2016-04-08 15:20:36.735 Pages on Modal Stack:\n2016-04-08 15:20:36.737 View A\n2016-04-08 15:20:36.743 View B\n. So as a workaround I don't want to reset the navigation stack, so I added a loading content screen as mainPage and from there I pushed using modal the MasterDetailPage.\nThank You.\n. I'm not a fan of hidden magic, and with your XAML templates you are been explicit about, hey I have this great feature that if you set to true you would get it, So I think you shouldn't change it, my current use case is that I'm trying to use a Static ViewModelLocator pattern to provide design data time to the new XAML previewer (still in beta channel) and for the XAML ReSharper auto-completion (xcc tool for conditional compilation only works on VS) so right now I'm struggling with: How can I use this great Prism library  but at the same time use this 2 features I love, so for now I'm just putting in XAML  BindingContext=\"{x:Static local:DesignViewModelLocator.MyPageViewModel}\" and not using the prism:ViewModelLocator.AutowireViewModel=\"True\", so I think we need more and option on the library for supporting this new features that are coming to Xamarin.Forms XAML, than changing what we have been using and works.\n. I couldn't find an easy way of using Static ViewModelLocator pattern with Prism to be able to satisfy the ReSharper auto-complete tool  and Xamarin XAML Previewer, \n@brianlagunas  Do you know if is possible to ignore BindingContext=\"{x:Static local:DesignViewModelLocator.MyPageViewModel}\" at runtime if prism:ViewModelLocator.AutowireViewModel=\"True\" ?\n. Oh maybe I couldn't explain well, if you check this @JamesMontemagno article: Xamarin.Forms XAML Previewer Design Time Data  in the first comment someone put it \n\nFantastic for an old SL/WPF dev to see XF get one step closer!\nHowever, since you're actually setting the BindingContext, I don't see how this would jam with Prism and other frameworks\n\nin another comment @Rasmus Christensen said he made that possible for MVVMLight article link \nAlso I fixed ReSharper for VS adding this to XAML:\nxmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\nxmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" \nmc:Ignorable=\"d\"\nxmlns:rootViewModel=\"clr-namespace:IBetU;assembly=IBetU\"\nd:DataContext=\"{d:DesignInstance rootViewModel:PawnShopPageViewModel}\"\nand using this library: XCC for pre-process and remove those xaml lines, but unfortunately that library break the build on Xamarin Studio( I think because of  this line  )\nSo my question: Is possible to ignoreBindingContext=\"\" on XAML if we set   prism:ViewModelLocator.AutowireViewModel=\"True\" ?\n. Ok, but what I want is not swap VMs, I just need to set the VM to a View in XAML without breaking Prism and doing the same things you do in your VMLocatorProvider on auto wire changed callback, so maybe a new kind of factory for vm, I really don't know just asking for your advice.\nThank You.\n. ",
    "bkaankose": "In order to resume application it has to be suspended and you can catch it with PreviousExecutionState in LaunchActivatedEventArgs param of OnLaunchApplicationAsync. I can't review the changes you make right now unfortunately because of time, do you mind telling me what's the difference between the changes you make and PreviousExecutionState usability? \nI'd like to comment my point on this asap.\n. Prelaunch test will always fail for Insider builds. Microsoft stated that. There's nothing wrong with your code or project. WACK will always fail on your Insider Build, but will be approved by the Store.\n. You can check my answer in this issue.\nhttps://github.com/PrismLibrary/Prism/issues/553\n. As a team we've been dealing this kind of an issue months ago. As a solution,we have overrided the NavigationService with a readonly SystemNavigationManager and tried to catch the BackCommand in the ViewModel.\n```\nvar viewModel = newView.DataContext as ViewModel;\n            if (viewModel?.BackCommand != null)\n            {\n                backButtonService.AppViewBackButtonVisibility = AppViewBackButtonVisibility.Visible;\n                EventHandler @event = (, args) =>\n                {\n                    args.Handled = true;\n                if (!viewModel.BackCommand.CanExecute())\n                    return;\n\n                var dispatcher = Window.Current.Dispatcher;\n\n                Func<Task> t;\n                if (dispatcher != null)\n                    t = () => dispatcher.RunAsync(CoreDispatcherPriority.High, new DispatchedHandler(async () => await viewModel.BackCommand.Execute())).AsTask();\n                else\n                    t = () => Task.Run(viewModel.BackCommand.Execute);\n\n                Task.Run(t);\n            };\n\n\n            viewModel.RegisterDeinitializer(() => _backButtonService.BackRequested -= @event);\n            _backButtonService.BackRequested += @event;\n\n        }\n        else\n        {\n            _backButtonService.AppViewBackButtonVisibility = AppViewBackButtonVisibility.Collapsed;\n        }\n\n```\n_backButtonService is our SystemNavigationManager that we initialized in ctor. All of our viewmodels inherit from ViewModel which is inherited from BindableBase and INavigationAware. ViewModel class have initializers, de-initializers and BackCommand by default. In the code above, we're simply displaying & collapsing the back button if the BackCommand is set or not.\nAnd this is the code for the initializers and stuff.\n```\nprivate readonly List initializationServices = new List();\n        private readonly List deitializationServices = new List();\n    public void RegisterInitializer(System.Action action) => initializationServices.Add(action);\n    public void RegisterDeinitializer(System.Action action) => deitializationServices.Add(action);\n\n    public void Deinitialize()\n    {\n        foreach (var item in deitializationServices)\n            item();\n    }\n    public void Initialize()\n    {\n        foreach (var item in initializationServices)\n            item();\n    }\n\n```\nThis approach saved us a lot of time, but we're not saying that this is the best at all...\n. Since it's not likely, maybe an optional parameter (false by default) can be the solution for it. Developers will not need to update their current code when updating Prism. It's kind of a discoverable comparing to the special NavigationParameter, but will change the NavigateAsync.\nUsing static won't be a bigger problem when testing but since it's static, we always hate it.\nMaybe a method that sets IsPresented value based on latest navigated page key?\nI will update the discussion when more ideas come up.\n. We must provide multiple MasterDetailPage support no matter what IMO. Using an interface seems pretty legit, I vote for that.\n. I think IMasterDetailPageOptions is more suitable for this. This interface has only 1 at the moment and it's about Navigation but we might use this interface for different future scenarios.\n. I agree on all the complexity thing, but just a single string logging method is kind of too simple for logging purposes imo. Log method should have at least an override with Exception type and even maybe overrides with Category and Priority selected by default.\nI don't say those won't increase complexity, but at the level of can be ignored.\n. In terms of abstraction, you're right. We don't need it. In the current Project I'm working on now, I seperated my views to another Universal Windows Project and my view models to a different PCL Project. I don't have any references for UWP in my view models right now and this service can be a solution for such thing. Not every developer places it's views and viewmodels to the same project or different projects with the same type. Does current Prism have solution for this kind of a situation?\nAnd most importantly, Prism makes developers life much more easier than ever. Even though we're not solving any project related problems with this service, I'd love to see some kind of a helper service for dialogs in UAP, but you guys in charge of course :) \n. ",
    "gviddy": "I see the problem.\nPageNavigationService.cs - ProcessNavigationForMasterDetailPage()\nvar nextSegmentType = PageNavigationRegistry.GetPageType(UriParsingHelper.GetSegmentName(nextSegment));\nif (detail.GetType() == nextSegmentType)\nThe above is always true so you never set Detail to the new detail page. If I comment out this entire block of code then the following code block is used and is always ok. I am unsure what the above code is supposed to be doing. :)\nI also tried your sandbox example and your master detail example is also broken on iOS.\n. I am running the sandbox example you have for Xamarin Forms. I downloaded it from github about 5 days ago along with the full prism source. So the latest is what I am using. I also notice it in pre-3 and pre-4.\nIf you run your sandbox example on iOS and change views from the master menu then you lose your back/menu button and will be stuck on whichever view you change to.\nit's a result of the code I posted above. I guess to understand it better what is the above code supposed to do? What does checking the segment type supposed to avoid?\n. Awesome. Thanks for looking into this for us.  :)\n. Hey Brian,\nYes that sounds good. As long as that fixes the disappearing hamburger/menu item on iOS. Android still works OK however iOS loses the menu item up top so you can then never recall the master menu. So if that fixes that problem then we will be very happy indeed. :)\nEasy test is to run your demo example on iOS (with latest stable XForms) and you can see you get locked onto a view with no way to change to another page.\nAgain thanks for looking into this.\n. ",
    "NickDarvey": "That solution didn't work for me, @mfe-. I'm not returning OnInitializeAsync though, should I be? (The samples don't.)\n``` C#\nprotected override Task OnLaunchApplicationAsync(LaunchActivatedEventArgs args)\n{\n            if (args.PrelaunchActivated)\n            {\n                Debug.WriteLine(\"Prelaunching\");\n                return Task.FromResult(null);\n            }\n        else\n        {\n\n            NavigationService.Navigate(\"Main\", null);\n            Window.Current.Activate();\n            return Task.FromResult<object>(null);\n        }\n\n}\n```\n@MartinZikmund, did you find a solution?\n. ",
    "MartinZikmund": "@NickDarvey , are you running a Windows 10 Insider preview build? I have found out, that the failing prelaunch happened on the build I was running even for a completely blank app, so I guess it is an issue with the Preview.\n. ",
    "sasavranic": "Ok, opened: http://stackoverflow.com/questions/36600193/how-to-bind-itemtapped-property-of-listview-in-viewmodel-for-navigating-detail-p\n. ",
    "Brian-Ding": "Thank you for your patient answer!\nAnd sorry for posting at wrong place(\uff1b\u2032\u2312`)\n. OK, I just figured out that this is from behavior SDK side, not from Prism, if I use the command property that a button originally has instead of behavior's command, the button is able to disable itself when it comes to the first item.\n. ",
    "adamhill": "So the manual fix is to use 'Prism.Unity.Forms' instead of 'Prism.Forms' or in addition to?\nWill the shown version of 6.1.x work or do I need to use the Latest 6.2.x-pre3 or -pre4 if available?\n. There is a Github project that has implemented something like this: Segues - https://github.com/chkn/Xamarin.Forms.Segues . ",
    "dankraus": "+1 on this change. Quick question because I couldn't glean it elsewhere, when things are merged into master, when do they make it into the NuGet package? For example, there's been a flurry of merges (awesome!!) But the package isn't updated quite as much. \nIf I want this change for example, I should be building from Source?\nThanks @brianlagunas ! Great talk at Evolve last week!\n. @chefhl - do you mind posting a little code snippet to show what you mean? I'm curious. I haven't needed to hook into these yet but I'm sure I eventually will and will want to have an idea for an approach. Thank you!\n. Awesome. Thanks @brianlagunas . Didn't realize there was a Xamarin Studio gallery. I'm having a hard time finding it though. Nothing we need to vote up or anything for visibility?\n. I'm pretty sure this has been mentioned elsewhere and that Xamarin.Forms\ndoesn't expose Android's back button or intercept it.\nOn Mon, Jul 4, 2016, 12:32 AM Troto notifications@github.com wrote:\n\n@brianlagunas https://github.com/brianlagunas Hey, I'm not sure if this\nshould be a new issue or on stack overflow or if it's not even included\nfunctionality but when using the back button of a XF navigation page it\nwon't trigger OnNavigatedTo. Is that built in or do we to somehow intercept\nthat to call a GoBackAsync?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/667#issuecomment-230208217,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/ABRhHZlx7D_d7ul2a3UDs1fLrOt9g8y7ks5qSJr0gaJpZM4I_3HW\n.\n\n-Dan Kraus\ndskraus@gmail.com\n631.576.7128\ndskraus.com\n. \n",
    "tmdaly": "Sorry it's taken me so long to respond. A busy day at work and internet connection problems.\nI see what you are saying but that is not what I'm experiencing. I went over my code again and didn't find the issue so I put together a test project. I'd appreciate it if you could take a look.\nVisual Studio 2015Xamarin.Forms Shared appPrism.Forms v6.1.0-pre4Prism.Unity.Forms v6.2.0-pre4\nAnd I'm testing it using the VS Emulator 5\" Marshmallow (6.0.0) XXHDPI Phone (Android 6.0 - API 23)\nFrom: Brian Lagunas <notifications@github.com>\nTo: PrismLibrary/Prism Prism@noreply.github.com \nCc: tmdaly tmdaly@rogers.com; Author author@noreply.github.com\n Sent: Tuesday, May 3, 2016 7:00 PM\n Subject: Re: [PrismLibrary/Prism] DelegateCommand isn't working with XF SearchBar (#559)\nClosed #559.\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n. This is the test project that I used  to reproduce the problem with navigating to a page that has a SearchBar bound to a delegatecommand.\nSearchTest.zip\n. ",
    "guiwaltricke": "@brianlagunas Here we are looking for some feature too.\nWe have MasterDetailPage -> NavigationPage -> TabbedPage (With 3 Children).\nWhen the ContentPage thats is a child of TabbedPage execute NavigateAsync to the next page thats need to open inside the navigation of the tab is opening like modal page.... the right way is open inside my tab navigation.\n. @brianlagunas what we want is create a TabbedPage.Children with NavigationPage to navigate inside my tab... how we do this?\n. This happens: \n\nas you can see, appears 2 navigations\n```\n\n\n\n\n\n\n<moduloMensagens:SaidaPage Title=\"Sa\u00edda\" Icon=\"{Binding Icone}\"  />\n<moduloMensagens:HistoricoPage Title=\"Hist\u00f3rico\" Icon=\"{Binding Icone}\" />\n\n\n```\n. @brianlagunas we tried yesterday but this do not work like you can see:\n```\n\n<NavigationPage Title=\"Entrada\" Icon=\"{Binding Icone}\" HasNavigationBar=\"False\">\n  <x:Arguments>\n    <entrada:EntradaPage />\n  </x:Arguments>\n</NavigationPage>\n\n<moduloMensagens:SaidaPage Title=\"Sa\u00edda\" Icon=\"{Binding Icone}\"  />\n<moduloMensagens:HistoricoPage Title=\"Hist\u00f3rico\" Icon=\"{Binding Icone}\" />\n\n\n```\n\n. ",
    "chefhl": "Thanks for clarifying this Brian. So as a workaround I think I will override OnAppearing and OnDisappearing and then cast the BindingSource to INavigationAware and route the calls through.\n. Here u go:\nCreate this:\npublic interface IPageNavigationAware\n    {\n        void OnAppearing();\n        void OnDisappearing();\n    }\nDerive your ViewModel class from this interface.\nIn the Views code behind:\n```\n        protected override void OnAppearing()\n        {\n            (BindingContext as IPageNavigationAware)?.OnAppearing();\n        }\n    protected override void OnDisappearing()\n    {\n        (BindingContext as IPageNavigationAware)?.OnDisappearing();\n    }\n\n```\nWorks like a charm. BUT code in the code behind is obviously not desired - this is clearly a workaround for now. AND if your ViewModel implements INavigationAware as well as IPageNavigationAware then also OnNavigatedTo as well as OnAppearing are called.\nThe INavigationAware methods should only be used to handle eventually passed navigation parameters.\n. ",
    "OpticNectar": "@brianlagunas Has this been resolved? I'm having issues with OnNavigatedFrom not being called when clicking the NavigationBar back button. The issue is i'm using MessagingCenter to subscribe and unsubscribe so I need it to actually be called so the events don't get called more than once.. @brianlagunas Hmm. I'll have to figure out why OnNavigatedFrom isn't being called then.. @brianlagunas I'll see if I can. I'm guessing it has to do with me using the tabs. I haven't had a chance to try out version 7, so i'll play around with that first before I bother you with another issue.. Would it not be easiest to just register a page as a TabbedPage Tab? That way when that page is in the URL Prism knows it's a tab and selects that tab.\nNavigateAsync(\"TabbedPage/FirstTabNavPage/ViewA\")\nThe only thing that it wouldn't cover is if you want to navigate a tab without selecting it. For this I think it would make sense to have a bool option for SelectTab or something like that.\n. Are there docs for the new API anywhere so I can mess around with it?. Awesome! On top of things as always. Let me know when you have them put together i'd love to tryout the new version. The hodge podge of a mess I have now getting the tabs to work is having all sorts of issues.. @brianlagunas Do you still need to handle IActiveAware for initial tab selection or is there a better way to handle it now?. @dansiegel How do I use IPageLifecycleAware? This is the first time i'm hearing of it.. @dansiegel @brianlagunas I just need to run code when the tab is selected to load data. Either works, it's just confusing how to set either up properly since i'm not sure what I add to the page's code behind, what I need in the view model, and what I need, if anything, in the tab page for it all to work.. @dansiegel @brianlagunas Quick question. I have a TabbedPage in a MasterDetail page. Each tab has a NavigationPage. How can I get from MasterDetail/TabPage/HomePage to MasterDetail/TabPage/LastPage?\nI tried doing this and it does all sorts of weird things like load everything again in the current tab etc. I can build a sample project if you would like.. @dansiegel @brianlagunas Any thoughts on this? Trying to figure out a way I can get this working so I can release the app i'm working on.. @brianlagunas I'm a bit confused why it isn't a Prism issue. I'm just trying to navigate a TabbedPage. It's just that the TabbedPage is in a MasterDetail page. Is that not ever going to be supported in Prism? It seems odd to only support some types of navigation and not others.. @brianlagunas Sorry, I guess i'm really confused now. Isn't that what this change is? It literally says If you wish to select a tab, you will now use a parameter called \"selectedTab\" to indicate which tab you would like to select above. Does that not do what it says?. @brianlagunas Oh ok. You may want to make a not of that in the docs then, since I assumed it would work across the app and not just on start up. I guess my next question would be, is there a way to navigate a specific tab without it being selected first? Even if i'm just using a messaging system, or does it need to be selected first before navigation will work?. @brianlagunas Ok awesome. Thanks! Also, since you and @dansiegel have hourly rates, what is the best way to get in touch with you guys? We have app projects that need some custom components here and there and it would be good to have some experts to help out when we need it.. ",
    "mammadkoma": "I want to return from OnNavigatedFromAsync() and not execute return base.OnNavigatedFromAsync(parameters); when a condition is true. \nHow? What should I return?.  nobody know Please help me. ```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n\n\n\n\n\n<Grid>\n    <Grid.RowDefinitions>\n        <RowDefinition Height=\"80\" />\n        <RowDefinition Height=\"*\" />\n        <RowDefinition Height=\"*\" />\n        <RowDefinition Height=\"80\" />\n        <RowDefinition Height=\"*\" />\n    </Grid.RowDefinitions>\n    <ff:SvgCachedImage Grid.Row=\"0\" Source=\"resource://Sanaap.App.Images.SosRequest.svg\"/>\n    <Button Grid.Row=\"1\" BackgroundColor=\"#ed1c24\" TextColor=\"White\" FontSize=\"Medium\" VerticalOptions=\"Center\" HorizontalOptions=\"Center\" WidthRequest=\"110\" HeightRequest=\"110\" BorderRadius=\"10\" Text=\"\u06a9\u0645\u06a9\u0645 \u06a9\u0646\u06cc\u062f\" Command=\"{Binding SubmitSosRequest}\" />\n    <ff:SvgCachedImage Grid.Row=\"3\" Source=\"resource://Sanaap.App.Images.Operator.svg\"/>\n    <Button Grid.Row=\"4\" BackgroundColor=\"#ed1c24\" TextColor=\"White\" FontSize=\"Medium\" VerticalOptions=\"Center\" HorizontalOptions=\"Center\" WidthRequest=\"110\" HeightRequest=\"110\" BorderRadius=\"10\" Text=\"\u06a9\u0645\u06a9\u0645 \u06a9\u0646\u06cc\u062f\" Command=\"{Binding SubmitSosRequestByCall}\" />\n</Grid>\n\n\n```. ",
    "SmartyP": "I made a repro here:\nhttps://www.dropbox.com/s/gsklahbxqalbvlc/PrismTestApp.zip?dl=0\nIf you run it after restoring packages you'll see a navigate button that takes you to a second page, and it only shows 1 label (because bindings are not resolving). If you change the namespace of the TestPageViewModel.cs to 'PrismTestApp' instead of 'PrismTestApp.ViewModels' and run again the bindings will resolve and you'll see 2 labels on the secondary page you nav to.\n. ",
    "dshchodro": "Hey Brian. I've faced the same issue and debugged Prism code to find an answer. Looks like the problem occurs only if you use NavigationPage for 2 or more children of MasterDetailsPage.\nFor example,\nif we navigate to \"MyMasterDetailPage/MyNavigationPage/MyMainPage\"\nand then from master details menu we navigate to \"MyNavigationPage/MyAnotherView\"\nthen there's no hamburger icon (or a menu text) \nBUT if we use different navigation pages then everything OK.\nFor example,\nif we navigate to \"MyMasterDetailPage/MyNavigationPage/MyMainPage\"\nand then from master details menu we navigate to \"MyDifferentNavigationPage/MyAnotherView\"\nThen everything works like a charm. Looks like navigation page is not removing from stack and Prism continuing to use the same and that's is why problem occurs. \nHope it helped \n. ",
    "rob8861": "Thank you very much. I missed that somehow.\ncheers,\nOn Tue, May 10, 2016 at 9:40 AM, Bart Lannoeye notifications@github.com\nwrote:\n\nThe documents for WPF and Xamarin Forms are part of the repository\nhttps://github.com/PrismLibrary/Prism/tree/master/Documentation. For\nWindows 10, please look at those for 8.1\nhttps://msdn.microsoft.com/en-us/library/windows/apps/xx130643.aspx, as\nwe didn't have time yet to migrate those. They mostly apply to Windows 10\nas well with some minor changes.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/568#issuecomment-218216906\n. \n",
    "sstorie": "Interestingly, if I update my code to swallow the NullReferenceException specifically the code continues to run and works as expected. So I don't think this is any particular issue with Prism (not that I did initially), and with this work-around I can continue to investigate the library.\n. Yep, I am seeing that now. I'm new to Xamarin and Xamarin Forms, but Prism seems to provide answers to many of the things I was finding frustrating (I've been doing client/server .NET and web development for 10+ years):\n1. Easy ViewModel based navigation\n2. Clean binding between the views and view models with IoC\nI watched your Evolve talk last night and it was like a light bulb finally went off and I could see the way forward with many of these \"issues\". I finally feel like I can use the methods I'm used to, but can also focus on using standard Xamarin Forms stuff. Thanks for the response and especially for creating and talking about this library. I'm excited about using Xamarin again :)\n. ",
    "tombby11": "I will rephrase the problem/s here \nUse case:\nAs a developer I want to use one page if I am on a phone and a different page if I am on a tablet. In any case the same viewModel should be used . \nCode Snippet \nif (Device.Idiom == TargetIdiom.Tablet)\n    //use MainPageViewModel for TabletMainPage\nelse\n    //use MainPageViewModel for PhoneMainPage\nDetails and Workaround:\nSince the ViewModelLocater uses NameConventions to locate the correct View model for the view, two views with different names cannot have the same ViewModel. \n- TabletMainPage expects to have TabletMainPageViewModel \n- PhoneMainPage expects to have PhoneMainPageViewModel \nHowever in my case both  TabletMainPage  &  PhoneMainPage   should get MainPageViewModel.\nTo overcome this problem, I could assign BindingContext of each page to an instance of MainPageViewModel, although this not so \"Prismatic\"  but it it kind of OK . \nThe problem with this workaround occurs as the constructor of the MainPageViewModel expects a NavigationService interface \n```\npublic MainPageViewModel(INavigationService navigationService)\n{\n...\n}\n```\nHaving this constructor will blow an exception with a message: \n\n\"no parameterless constructor defined for this object prism\"\n\nThis means the viewModel in my case should be instantiated using a parameterless contructor. But if so how would i pass the navigationService to it ? \n. Well now GoBackAsync throws OutOfRange Exception when going back from the first page. but sure returning False can be cleaner. \nRegarding exposes pages and current page, I can see what you mean here. But how about instead of showing the pages , you could show the current ViewModel , and the previous viewModel , would that be possible ? \n. You can download the solution with the bug from here . \nRegarding the viewmodel and navigation , my thought came from that you can make the viewmodel navigation aware , so i thought maybe it could know where was the navigation and the parameters are coming from , anyway i think this is minor for me now , so no need to implement that :) \n. Yup still throwing exception , Here you go \nHowever for me it is better that it throws an exception than just not doing anything (until you guys make it returns false) \n. Great! that would be good. \nOne more last thing about this navigation service. Is it possible to have the option to clear all the pages stack ? \nA usecase for that is if the user decided, after a series of navigation to sign-out and go back to signing-in page. then there is no need to keep the stack of pages especially since then the user might sign-in as an admin so the pages' content would be different. Is that possible or is it also challenging ? Or is there a way to do that already ?\n. ",
    "cbordeman": "I would expect the solution to work with Xamarin Forms, WPF, UWP, and any other Prism.\nIf this is going to be fixed by extending the API I don't like the idea of knowing or caring about the full navigation context.\nDan, I don't understand what NavigateFromAsync( string baseName, string newPath ) does exactly.  Do you mean OnNavigatedFrom(string baseName, string newPath)?\n. What I'm doing now is exactly what you describe, though I'm utilizing NavigationService instead of popping pages directly.  The GoBack(pageName) really isn't necessary since the app could keep track of the # of pages.  GoBack(n) would be sufficient.\n. Agreed, Brian.  Is it possible to replace the INavigationService instance globally with a subclass?\n. Very good, this should help with a lot of scenarios.  Thanks Brian.\n. ",
    "irschneider": "Sorry Brian , you're right. Prism Template does not influence the problem\n. ",
    "rohits79": "Please note Prism Issues page is only for feature request or bug reports. To ask for solutions see stackoverflow.com, mark your questions with #prsim tag\n. @dvorn\nSorry, i think you misread. I am aware of scoped regions and i know why we need scope regions.\nThe reason i call it is bug is because, writing two lines of AddToRegion works when it should be throwing exceptions.\nregionManager.AddToRegion(\"ViewA\", unityContainer.Resolve()); \nregionManager.AddToRegion(\"ViewA\", unityContainer.Resolve());\nHowever if we write three or more lines of AddToRegion, only then it throws exceptions\nregionManager.AddToRegion(\"ViewA\", unityContainer.Resolve()); \nregionManager.AddToRegion(\"ViewA\", unityContainer.Resolve());\nregionManager.AddToRegion(\"ViewA\", unityContainer.Resolve()); \nFirst, the AddToRegion API behaves inconsistently and different from Region.Add. Region.Add fails on the second attempt we try to add a duplicate Region, but not AddToRegion (Please uncomment/comment the TestModule and see it for your self)\nif Scope Region is required, why does it not crash when we add two views to the same region, but crashes when we add three views? If i understand Scope Region correctly, it should crash on the second attempt to register the same region. \nThe reason i call it a bug is because the API does not behave consistently.\n@brianlagunas - do you think we should open this as a bug?\n. So are we saying we can patch the suggested fix?\n. ",
    "dationguyen": "I am on some page and I navigate to another page using absolute URI, the OnNavigatedFrom method is not fired.\nI implemented the Timer in this ViewModel and using OnNavigatedFrom to unregistered it. \nthis issue makes the timer run background all the time which affect the app performance. is there any solution for it? \nBest Thanks!\n. Hi Guys,\nIs it possible to upgrade to CommonServiceLocator 2.0.1 in newest xamarin.form ? \n. ",
    "jtourlamain": "My first thought was also, why not just use an overload in the constructor. But changing the constructor for each extension that is wanted, will make your constructors a bit messy.\nMaybe it's a good idea to let Prism create the IoC container and then search for classes that implement an interface like IRegisterTypes. A container is build to do stuff like that. In that way your constructor stays clean.\n. @brianlagunas you're right about performance. \nWouldn't it be better to pass a PrismApplicationBuilder into your constructor (like @joacar suggested). Later on you can add more methods to that class that allow users to configure Prism without making breaking changes on the constructor. Something like:\nC#\npublic abstract class PrismApplicationBuilder\n{\n  public abstract void RegisterPlatformTypes(IUnityContainer container);\n}\nand\n``` C#\nprivate readonly PrismApplicationBuilder _prismBuilder;\npublic PrismApplication(PrismApplicationBuilder prismBuilder = null)\n{\n    _prismBuilder = prismBuilder;\n}\n```\nAs far as I investigated the code so far, the code isn't using a lot of Action delegates. Maybe an abstract class that you can override is more in line with the existing code. Maybe PrismApplicationBuilder is not a good name but you get the point.\n. ",
    "totht91": "I had the same problem, and I added a parameter with a specific interface, to the PrismApplication's ctor, and to the PrismApplicationBase.\n@brianlagunas I think your solution is not enought because, the Initialize abstract method is called before the PrismApplication's ctor (because it is called in the base ctor, and this is kind of antipattern). So the field initializer is not executed and the action will be always null, you need to pass deeper the action/interface parameter to the base.\n. I also struggled with this problem. In my opinion the expected behavior is the Details reuse the NavigationPage and keep the nav history.\n. It's a little bit hard to understand and follow the flows in the navigation service, but I don't know how to improve it.\n. Don't do it automatically, maybe it can break current codebases and generate a lot of confusions. \nWith resharper you only need to type ViewModelLocator. then ALT+Enter, Enter for the namespace inculde. This is in my little finger :)\n. Try something like this: await NavigationService.NavigateAsync(\"MyNavigationPage/LoginPage\"); where MyNavigationPage is a custom NavigationPage with an empty ContentPage content.\n. This would be really really good for line-of-business apps and supports WPF migration path more easily.. Sure thanks, one more question please: Are you using this particular line Builder.RegisterSource(new AnyConcreteTypeNotAlreadyRegisteredSource()); only for ViewModel registrations or is there any other reason?\n. If you look at the Forms.Unity.Forms nuget's dependencies at https://www.nuget.org/packages/Prism.Unity.Forms/ you can see that it also transitively references the Prism.Forms package. . Yes UWP cannot load dinamically DLLs so the ModuleManager functionality can be only for project structure purposes.\n. I don't get from the beginning why do not you use the Microsoft.Extensions Dependency Injection abstraction but create a new one. . @dansiegel @brianlagunas I don't think that the mutable requirement is so hard to leave. You could rebuild the container from the builder/registry. On the other hand the lack of named instance resolution support is so odd, but it could be done in a hacky way. Maybe I will try some experiment with Microsoft.Extensions.DependencyInjection + Prism if I had same time. If that works the generic host support would be the next step.. This property is a string, you should write the condition with IsNullOrEmpty. Is it a breaking change?. @bartlannoeye Thank you!. What does uwp is going away means? . Could you please give us some information about the merge? How can the community help you with this? . Do not use tuples on public APIs pls.. ",
    "amccorma": "Do you have an sample on how to use the IPlatformInitializer?  I try and the android app crashes when I try to inject it into the viewmodel.\n. Yes, that example the one I am using but it does not register anything.\npublic class AndroidInitializer : IPlatformInitializer\n    {\n        public void RegisterTypes(IUnityContainer container)\n        {\n // nothing is registered here?  \n        }\n    }\n. interesting find.\nif you do this works.\nForms.Init(this, bundle);\n LoadApplication(new App(new DroidPlatformInitializer()));\nif you try this, exception.  creating the app variable throws an exception.  \nForms.Init(this, bundle);\nvar app = new App(new DroidPlatformInitializer());\nLoadApplication(app);\n. ",
    "StanleyBroo": "No worries... simple mistake on my behalf ;O)\nUsed Stackpanel instead of StackLayout in ContentPage  ....took a while to figure out. No help whatsoever from debugger in \"Visual Studio\"\n. Great news, Prism for Xamarin.Forms is really a nice way of structuring and maintaining your code. \nIt should be included by default in the main Xamarin.Forms templates having a synced build on releases.\n. Totally agree. Great stuff!! .\n. ",
    "JeffB1": "@brianlagunas can the error handling for this be improved a bit? I've unfortunately spent a lot of time being subject to this error today. It's being caused by the page being 'bad' - usually malformed XAML. However, the error about why the page is being 'swallowed' and you get this error. I ended up having to get rid of the Prism navigation and manually set the application MainPage to the page I was working on. At least when it failed, I would get the actual error that occurred and I was able to immediately fix it. Prism wasn't giving me any clues at all :-(. @dansiegel if I've got something so wrong with the form that it can't be created, I'd be happy for it just to crash :-) At least the IDE will show me the error. The ILoggerFacade may provide a way for me to intercept the message, even if it's just a place to set a breakpoint for the debugger. I'm only new to Prism. I had my own framework but figured something like Prism would provide more bells and whistles than my own. However, it seems to be a fast moving framework and I'm struggling to find info on various thing, e.g. \nhttp://stackoverflow.com/questions/40901962/best-place-to-load-data-when-navigating-xamarinforms-prism-6\nhttp://stackoverflow.com/questions/40901883/how-to-navigate-master-of-masterdetailpage-in-xamarin-forms-prism-6. @brianlagunas why does the Autofac container need to register the view model type but the Unity one does not? I've spent ages stuffing around with this. I was not registering the type as @muhammetsahin  did above. Didn't even think to do that. I removed the Autofac Prism libraries and used Unity Prism instead and my app started to work.\nI'd like to use Autofac for familiarity reasons (from other projects) but having to register the VM types each time isn't as nice as using Unity and not needing to register the types.\n. Thanks @bartlannoeye. I added this to the end of the RegisterTypes method in app.xaml.cs:\n        var builder = new ContainerBuilder();\n        builder.RegisterSource(new AnyConcreteTypeNotAlreadyRegisteredSource());\n        builder.Update(Container);\n\nSeems to work fine now.\n. ",
    "HartlD": "As I wrote before, the window will not resize, if the template changes...\n. UserControlResizeWindowTest.zip\nAs you can see in the example, the popup window size will not Change...\n. And what's wrong? :+1: \n. ",
    "albertwoo": "I was talking about Xamarin.Forms for UWP and with prism. The back button should be automatically be visible or invisible when I running my Xamarin.Forms for UWP app on windows10 desktop but it`s not working.\n\nFor the CanGoBack in Xamarin.Forms,\nI registered an event in eventaggregator, and each time I was trying to Navigate I will publish this event. When I get this event I will check CanGoBack and set AppViewBackButtonVisibility.\n. ",
    "plamen-i": "Hi Brian,\nI think I also encounter this problem (missing Back button) and I'll try to explain it more precisely.\nCompare two cases:\n1. Prism Unity UWP application (no XF) - using all latest prereleases:\nPrism.Core 6.2.0-pre1\nPrism.Windows 6.0.2-pre1\nPrism.Unity 6.2.0-pre3\n```\n    sealed partial class App : PrismUnityApplication\n    {\n        public App()\n        {\n            InitializeComponent();\n        }\n    protected override async Task OnLaunchApplicationAsync(LaunchActivatedEventArgs args)\n    {\n        NavigationService.Navigate(\"Main\", null);\n    }\n}\n\npublic class MainPageViewModel : BindableBase\n{\n    protected INavigationService navigationService;\n\n    public MainPageViewModel(INavigationService navigationService)\n    {\n        this.navigationService = navigationService;\n\n        GoToView2Command = new DelegateCommand(GoToView2);\n    }\n\n    public DelegateCommand GoToView2Command { get; private set; }\n\n    private void GoToView2()\n    {\n        navigationService.Navigate(\"View2\", null);\n    }\n}\n\n```\nAll works as expected - when I go to View2 there is Back button shown on application title bar.\n1. Prism Unity Forms UWP application - using all latest prereleases:\n   Prism.Core 6.2.0-pre1\n   Prism.Forms 6.1.0-pre6\n   Prism.Unity.Forms 6.2.0-pre6\n   Xamarin.Forms 2.3.0.49\n```\n    public partial class App : PrismApplication\n    {\n        protected override async void OnInitialized()\n        {\n            InitializeComponent();\n        await NavigationService.NavigateAsync(\"MainPage?title=Hello%20from%20Xamarin.Forms\");\n    }\n\n    protected override void RegisterTypes()\n    {\n        Container.RegisterTypeForNavigation<MainPage>();\n        Container.RegisterTypeForNavigation<XFNavigationPage>();\n        Container.RegisterTypeForNavigation<View2Page>();\n    }\n}\n\npublic class MainPageViewModel : BindableBase, INavigationAware\n{\n    private string _title;\n    public string Title\n    {\n        get { return _title; }\n        set { SetProperty(ref _title, value); }\n    }\n\n    protected INavigationService navigationService;\n\n    public MainPageViewModel(INavigationService navigationService)\n    {\n        this.navigationService = navigationService;\n\n        GoToView2Command = new DelegateCommand(GoToView2);\n    }\n\n    public void OnNavigatedFrom(NavigationParameters parameters)\n    {\n    }\n\n    public void OnNavigatedTo(NavigationParameters parameters)\n    {\n        if (parameters.ContainsKey(\"title\"))\n            Title = (string)parameters[\"title\"] + \" and Prism\";\n    }\n\n    public DelegateCommand GoToView2Command { get; private set; }\n\n    private async void GoToView2()\n    {\n        await navigationService.NavigateAsync(\"XFNavigationPage/View2Page\");\n    }\n}\n\n```\nThe bug - when I go to View2 there IS NO Back button shown on application title bar.\nCan you reproduce this?\nPlamen\n. Tried this - still no back button.\n. OK, this works - thanks :-)\nHope these clarifications also help others.\n. ",
    "AwsomeCode": "@brianlagunas Hi, I am navigating form App.xaml.cs\nNavigateAsync(\"NavigationPage/MainTabPage/TabPage1\");\nAnd from TabPage1 I'm navigating to \nNavigateAsync(\"TestPage\");\nBut still I am not getting back button. And if I try\nNavigateAsync(\"NavigationPage/MainTabPage/TabPage1/TestPage\");\nBack Button is showing.\nAm I missing something? \n. Thanks Brian. But still something is not working.\nHow can i navigate from TabbedPages(ChildTabPage1, ChildTabPage2, ChildTabPage3) to ContentPage With Back Button\neg. \nFrom App.xaml.cs to <TabbedPage>\nAnd from TabPage Children to\n  <ChildTabPage1>  \n  <ChildTabPage2>  here   --> <ContentPage> with back button to --> <TabbedPage> again\n  <ChildTabPage3>\n. Ya sure, Below is the link\nhttps://github.com/KalpeshChheda/PrismTestApp\nWhen i am navigating SettingPage from tabbedpage (SimpleTabbedPage) or from MasterDetailPage(MainPage) back-button is not showing.\nI want to keep useModalNavigation to true because i don't want to see tabs when i am on SettingPage.\n. In any other way is it possible? If no I will manually create back button.\nPrism is awesome library. Thanks.\n. Ok. thanks for looking sample app. Actually WhatsApp is having same kind of navigation so wanted to give a try. Thanks again I learn a lot from you.\n. In UWP software back button is still not working.\nI am using Xamarin forms 2.3.2.127\n. Yup I tried Prism for XF 6.3.0-pre1.  In UWP and in android as well.\nNo INavigationAware Methods are getting fired (Current Page of) OnNavigatedFrom & (Next Page of)OnNavigatedTo \nXamarin forms 2.3.2.127,\nXamarin Updates 4.2.1.62\nAndroid 4.4 Emulator,\nUWP 14393\n. I got the issue \nNavigating from XAML is not working.\nUsing NavigateAsync is working fine.\n. Actually I had code like this.\nIn App.xaml.cs\nNavigateAsync(nameof(HomeMasterDetailPage))\nIn HomeMasterDetailPage.xaml\n<MasterDetailPage.Detail>\n    <NavigationPage >\n      <x:Arguments>\n        <views:HomePage/>\n      </x:Arguments>\n    </NavigationPage>\n  </MasterDetailPage.Detail>\nYa I realized NavigationPage is not same as Prism NavigationPage. \nSo I have updated code in In App.xaml.cs to\nNavigateAsync(HomeMasterDetailPage/HomeNavigationPage/HomePage);\nAnd Removed \n<MasterDetailPage.Detail>\n    <NavigationPage >\n      <x:Arguments>\n        <views:HomePage/>\n      </x:Arguments>\n    </NavigationPage>\n  </MasterDetailPage.Detail>\nThanks.\n. There is no proper uwp support available in xamarin forms. They better stop doing for MacOS and keep focus on current supported versions first. UWP, Android, iOS. Sorry but you can still use nameof and it will work\nnavigationService.Navigate(nameof(MainPage), parameter);. You can install Pre release version. https://github.com/PrismLibrary/Prism/releases/tag/7.0.0-pre5. Yes its working after adding\ncontainerRegistry.RegisterInstance(Xamarin.Forms.Forms.Context);\nThanks Dan :). This is not related to prism. And use the Stackoverflow.com for this kind of question.. Please consider adding support for Xamarin Forms WPF as well.\nThere are so many Windows 7, Windows 8 and even Windows 10 below fall creator updated machine.\nAnd Microsoft also supporting WPF as well.\n. I use my view models on multiple pages.. +1. ",
    "izefler": "+1\n. Thanks!\n2016-11-28 13:07 GMT-02:00 Brian Noyes notifications@github.com:\n\nThese kinds of questions are better handled on StackOverflow. If you could\nask again over here, would appreciate it: http://stackoverflow.com/\nquestions/tagged/prism\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/857#issuecomment-263294740,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACsUFjfLBA2MRLObm-USl8DGcF2zInwhks5rCu5IgaJpZM4K93nH\n.\n\n\n-- \nIzefler\n. ",
    "brandondsz": "I'm facing a similar issue where I'm navigating back from one view to another using the device back button or the back button on the navigation bar(top left). I need to pass parameters when this navigation happens. I tried doing this by overriding the OnNavigatedFrom(NavigationParameters parameters) method in my VM and I'm looking for the parameters in the OnNavigatedTo(NavigationParameters parameters) method on the VM of the page I'm navigating back to. However neither of the mentioned methods are hit with a break point.. ",
    "vinidiktov": "Is there a precompiled add-in for Xamarin Studio 6.0? I can't seem to find one in the XS Add-in gallery.\n. @brianlagunas  Great! \n. @brianlagunas I have successfully created a Prism Unity solution using a shared library but I can't create a Prism Unity solution using PCL in Xamarin Studio 6.0. \nI'm getting this error message at the last page of the solution creation wizard:\n\"The project could not be created. Unknown solution item type: PortableDotNet\"\n. ",
    "thomasflad": "Same Problem here\n. \ud83d\udc4d \n. I'm getting with the latest Update of XS the error:\nThe following dependencies required by this add-in are not available:\nMonoDevelop.Core v6.0, found v6.0.1\nMonoDevelop.Ide v6.0, found v6.0.1\n. ",
    "pculver": "Any possibility of a release for this?  I was trying to upgrade a large project from Prism 5 to 6 and this issue is preventing the upgrade.   There would be to many places to change this....\n. Great!  Thanks for the update.\n. ",
    "artfuldev": "No, thank you for the wonderful product that is Prism! \ud83d\udc4d :)\n. Yes, I suppose I missed that.\n. ",
    "emilianomon": "Sorry about that. I took for granted that it was a well known issue.\nThe exception is this:\n\nSystem.ArgumentException: An item with the same key has already been added.\n\nThe Views and ViewModels are as common as possible. It's not even worth to paste them here. The only \"special\" thing worth pointing out is that I'm using a MasterDetailPage. But since this problem use to happen when the app had just two simple pages, I can't think in a reason for this to have anything to do with the MasterDetailPage implementation.\nAnyway, I think it'd be helpful to post at least the navigation calls. Maybe I'm missing something I can't notice.\n- App.cs\n  NavigationService.NavigateAsync(\"iDOMasterDetailPage/iDONavigationPage/SelectRequestCategoryPage\", p, animated: false);\n- SelectRequestCategoryPageViewModel.cs\n  await NavigationService.NavigateAsync(\"CreateRequestFirstPage\", _navigationParameters, animated: false);\n- CreateRequestFirstPageViewModel.cs\n  await NavigationService.NavigateAsync(\"CreateRequestSecondPage\", _navigationParameters);\nSorry too for only posting the calls and not a sample app. I'm really in a hurry right now, but if this post does not help enough, I'll make time to create the sample.\nJust remembering that the problem occurs when I go back, for example, to the SelectRequestCategoryPage and then back to CreateRequestFirstPageViewModel.\nThanks for your time!\n. Uhhhmm. Didn't know about it. Thanks again. As I predicted, It was a foolish problem, but I could not find anything related. Sorry for that!\n. ",
    "toadzky": "I would really like to see this, is there anything I can do to help?\n. Personally, I would prefer it be added by default with a way to disable it. I think the more common use case is going to be that developers want it to have that behavior out of the box. In my case, the user selects an item from a list and it navigates to a TabbedPage where each page displays different data that has to be loaded. All of the pages need the parameters, but I can only give them to the first one.\nI'll give the gist a try and let you know if any pain points jump out at me.\n. I disagree. It's definitely navigation, it's just sideways navigation\ninstead of up and down.\nOn Mon, Sep 5, 2016 at 9:52 AM Sune Frederiksen notifications@github.com\nwrote:\n\nWould it be possible to have more general interfaces IDeactivateAware and\nIActivateAware that could also be called when manually activating and\ndeactivating views. I wouldn't call switching tabs a navigation per say, it\nis more a user interaction to activate and deactivate a views.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/650#issuecomment-244776149,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACLkWiJqMuuaAcoC6XEsAifrkX3_xxPBks5qnDqigaJpZM4I6Iai\n.\n. So I'm using Prism in Xamarin.Forms, and it sounds like basically everything you just said applies to WPF. Unless you add swiping (which isn't enabled by default IIRC), the only way to change tabs in XF is to tap the tab header. \n\n@brianlagunas if the tabs themselves aren't part of navigation, why are their names part of the navigation urls? they are part of navigation if you are building a deep link, but not for siblings. it's kind of a weird way to separate it IMO.\n. That makes sense. I agree that it shouldn't trigger the normal INavigationAware methods, but changing the name of the interface to something more generic feels weird. There is a concept of activation, but there is also the concept of explicit navigation.  I may want to do something different when a user explicitly changes tabs then when a view is injected/discovered, etc. Activated doesn't mean navigated.\n. @brianlagunas in my particular case, i have multiple tabs that load data independently, but what data they need to load is passed in as navigation parameters from the previous page. since i can't pass navigation parameters to each of the pages in the NavigateAsync call, i pass all the parameters to the first page and then forward them to other pages via IMultiPageNavigationAware. it's not the most elegant solution, i admit, but it's the best one i was able to figure out.\n. Loop through what children? Where do I get references to the view models\ninside a multipage container?\nOn Fri, Sep 30, 2016, 23:07 Brian Lagunas notifications@github.com wrote:\n\n@toadzky https://github.com/toadzky Well can't you just propagate those\nparameters in the TabbedPage to it's children? Implement INavigationAware\non the TabbedPage, capture the parameters and then loop through the\nchildren and set a property on their ViewModels that is used to load the\ndata?\nI'm just trying to think if passing parameters from tab to tab is a common\ntask, or just an exception.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/650#issuecomment-250893010,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACLkWrAk0b8O4sbu_9vzbHiRqCLYALlnks5qveqogaJpZM4I6Iai\n.\n. I'm still not following how I would have that information in the view model\nof tabbed page.\n\nTo be honest, I actually like the auto propagate flag. It's the behavior I\nexpected when I started using Prism and wasn't specifying a specific tab in\nmy navigation url. That should work nicely. Just have an interface (it\ncould be INavigationAware) that the sub-page implements to receive them\nand set the flag.\nOn Fri, Sep 30, 2016, 23:11 Brian Lagunas notifications@github.com wrote:\n\nYou get the VMs from the child Page's BindingContext. Cast them as a\ncommon interface and set the property accordingly.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/650#issuecomment-250893127,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACLkWmPzfTMbd1sYrw1hTQGZx02y6rKDks5qveuGgaJpZM4I6Iai\n.\n. it sounds about right to me. personally, i tend to lean more toward issue 1, since i would rather the parent know what all children need than for siblings to have know what each other need. but the IMultipageNavigationAware behavior that was gisted earlier has been working well enough for me to just forward everything that was passed in with whatever additions that page makes.\n. i'm not looking for blame, i'm looking to step through to figure out why behavior isn't what i expect. blame doesn't help there. and if the milestones aren't tagged, how would blame tell me which commit matches the build i'm depending on?\n\nalso, that branch is like 50 commits behind master.\n. the issue is that i have know way to know if the v6.2-Preview is the current work on the preview (which is what i would assume) or if it's the latest release on that version, etc. tags make it easy to see and look back - which is something you can't do with blame. \nalso, i know how to use git blame. what i'm looking for is the ability to checkout code at a specific point based on released milestones.\n. @brianlagunas it's somewhat problematic because there are things you can ONLY do via url parameters - like deep linking. i would prefer to use NavigationParameters objects, but you can't use them to pass data to a page in the middle.\n@dansiegel i was just passing ids. if you use url parameters, they come through as strings and if you use NavigationParameters, they come through as ints. You end up doing something like this:\nc#\nparameters[\"key\"] as int? ?? int.Parse(parameters[\"key\"] as string)\n. @joacar awesome! thanks for letting me know. \n. I would like to point out that semantic versioning means if you are going to remove something, you should bump the minor version. Removing this should change the version to 7, not 6.3.\n. ",
    "msloan": "I very much agree with @toadzky, this is behavior that I was expecting so it seems like it should be the default.\n. ",
    "SplayConsulting": "Hey Guys, I have just started with Prism and love it, well done Brian.\nI have the same issue, I have a tabbed page with three content pages, it would be really great if the OnNavigatedTo or similar was available. I wish I had enough experience to contribute.\n. ",
    "PawanJindal": "Hello,\nI am new to Prism and Xamarin forms. I am trying to implement the functionality to change the active page in a tabbed page in Xamarin Forms. Is there currently any way to support this? \n. ",
    "nuitsjp": "Hello,\nI have one suggestion.\nThis is when the contents of the tab are NavigationPage. \nIn many cases, we would like the IMultiPageNavigationAware event in CurrentPage of NavigationPage.\nNow the code looks like this:\npublic class MultiPageNavigationBehavior<T> : BehaviorBase<MultiPage<T>> where T : Page\n{\n    ...\n    protected async Task HandleNavigationToPage( Page page, bool navigatedTo, NavigationParameters parameters )\n    {\n        await NavigationAwareHandler( page, parameters, navigatedTo );\n        await NavigationAwareHandler( page?.BindingContext, parameters, navigatedTo );\n    }\nHere, I want to change this way.\n```\nprotected async Task HandleNavigationToPage( Page page, bool navigatedTo, NavigationParameters parameters )\n{\n    await NavigationAwareHandler( page, parameters, navigatedTo );\n    await NavigationAwareHandler( page?.BindingContext, parameters, navigatedTo );\nvar navigationPage = page as NavigationPage;\nif (navigationPage != null)\n{\n    await NavigationAwareHandler(navigationPage.CurrentPage, parameters, navigatedTo);\n    await NavigationAwareHandler(navigationPage.CurrentPage?.BindingContext, parameters, navigatedTo);\n}\n\n}\n```\nLet me hear your opinion.. @brianlagunas \n- It might be necessary for Customized NavigationPage.\n- No adverse effects on my way (Except for a few performance)\nIt is unnecessary in the default NavigationPage, but I think that it is better to apply it to both.\n. If ViewModel, dispatch to the UI thread using BeginInvokeOnMainThread is probably the most common scenario. \nThe others might not use very often. \nOpenUri is trouble where to use. ViewModel? Model? \nModel if StartTimer also available.\n. OpenUri and OnPlatform is not required? \nThen, is it easier to those who Brian has implemented? \nIf necessary, send PR. \nIn that case, please tell me the name space\n. I'm sorry. Tag was removed.\nGenerics OnPlatform<T> is not required?\nI saw PR. Everything else is perfect!\n. Great!\nIt's a big help. Thank you very much!\n. DeviceService wraps the Xamarin.Forms.Device class.\nIf you return false with callback, the timer stops.\nhttps://developer.xamarin.com/api/member/Xamarin.Forms.Device.StartTimer/p/System.TimeSpan/System.Func%7BSystem.Boolean%7D/. I made it with your idea.\nHowever, there are some problems.\n\n\nI have problems with Mock and I can not write test cases\nIn Xamarin.Forms ModalStacks are shared.\nPushModalAsync -> PushAsync -> PushAsync -> PushModalAsync\nIn this case Xamarin.Forms, Page.Navigation.ModalStack.Count of all Page is 2.\nBut Prism 's Mock does not work anymore.\nUnfortunately, we need to manipulate the Internal property.\nIt is necessary to rely on Reflection, this is not beautiful.\nBut if need testing, there is no other way.\n\n\nNavigationPage children are not in good order of calling\nNavigationPage> PageA> PageB\nAt this time, Destroy is now called in the following order.\nPageA> PageB> NavigationPage\nThe next one should be better.\nPageB> PageA> NavigationPage\n\n\nIn response to this problem, I would like to make the following changes\n1. Fix Mock so that NavigationStack works properly (using Reflection)\n2. Prepare a mechanism that can store the order of issue of Navigation Events\n3. Fix the Destroy problem of NavigationPage\nCan I tackle these problems?\nFor now, I will send you the RP of the code that will work with the title problem.. For the moment, I want you to look carefully about history management of Navigation Event.\nCompleted tasks:\n- Add mechanism to acquire issued Navigation Event\nhttps://github.com/nuitsjp/Prism/blob/fix-call-idestructible-when-using-an-absolute-uri/Source/Xamarin/Prism.Forms.Tests/Mocks/PageNavigationEventRecoder.cs\nUsage:\nhttps://github.com/nuitsjp/Prism/blob/fix-call-idestructible-when-using-an-absolute-uri/Source/Xamarin/Prism.Forms.Tests/Common/PageUtilitiesFixture.cs\n- Add unit tests for PageUtilities.DestroyPage\n- Fix the Destroy problem of NavigationPage and other\nRemaining task:\n- Fix Mock so that NavigationStack works properly (using Reflection). I have discussion.\nCurrently, the processing order of events.\n1. OnNavigatingTo\n2. Destroy\n3. OnNavigatedFrom\n4. OnNavigatedTo\nSetting BindingContext to null in Destory\nFor this reason, OnNavigatedFrom of ViewModel is not called.\nIs this appropriate?\nhttps://github.com/nuitsjp/Prism/blob/fix-call-idestructible-when-using-an-absolute-uri/Source/Xamarin/Prism.Forms.Tests/Navigation/PageNavigationServiceFixture.cs#L248. Fixed event order when absolute navigation.\nAnd, removed INavigation implementation class.\nI gave up emulating the behavior of NavigationStack.\nIn order to emulate without implementing INavigation, UI Test is necessary.\nBecause Xamarin.Forms uses the Platform class.\nhttps://github.com/xamarin/Xamarin.Forms/blob/master/Xamarin.Forms.Platform.Android/AppCompat/Platform.cs\nInstead, I created a method that calls all the Destories of Page contained in ModalStack this time.\nhttps://github.com/nuitsjp/Prism/blob/fix-call-idestructible-when-using-an-absolute-uri/Source/Xamarin/Prism.Forms/Common/PageUtilities.cs#L77\nFinally, it was necessary to record the execution order of the events.\nFor this reason, disabled execution on multithreading of tests.. Is this complete? PR is better to merge here?. Yes, Thank you for your hard work.. In the case of the current Autofac, an error occurs unless you register ViewModel.\nIs this something wrong with me?\n```cs\n        protected override void RegisterTypes()\n        {\n            var builder = new ContainerBuilder();\n            builder.RegisterType();\n            builder.Update(Container);\n        Container.RegisterTypeForNavigation<MainPage>();\n    }\n\n```\nIf I am correct, I should fix AutofacExtensions.\nIt becomes a problem when registering View with ItemTemplate.. Oh. I understand. Thank you.\nOkay. Based on that premise, I will also modify the template.\n. Remove ViewModel container registration from App.xaml.cs\nPlease, Review!. I'm sorry.\nDelete it once and update again.. Ok.\nRemoved unnecessary code from App.xaml.cs.. Commit log is so dirty that I withdraw it once.\nI will raise pull request again.\nI'm sorry.. Updated all project template to unique TemplateID. I thought so.\nI will unpublish.. Sorry, the branch that was based on the template may be wrong. \nI may resend the PR.. I fixed it. Please re-review.. I fixed it. Please re-review.. I'm sorry.\nDelete it once and update again.. Add unit tests.\n\nFor _absoluteUri\nFor absolute uri with out protocol (\"/MainPage?id=3&name=brian\")\nFor _deepLinkAbsoluteUri ( when custom protocol )\nFor _deepLinkRelativeUri\n\nFix Bugs.\n\nWhen custom protocol\n\nPlease, ReReview!. Remaining tasks:\n- Fixed a problem that the test did not work correctly with multi-thread. All done.\nPlease review.. ## Why Pagenavigationever is a static-based implementation\nAdditional notes:\nI succeeded in parallelization. Please read the comments after two.\nHow do I access the Recorder instantiated with Fixture from View or ViewModel?\nI had no good idea.\nDo you have any good ideas?\nIf you can parallel tests, that would be the best.\nWhy is the PageNavigationEventRecorder needed?\nI think that events are important to be issued in the correct order.\nActually, the first plan did not behave correctly.\nhttps://github.com/PrismLibrary/Prism/issues/862#issuecomment-278891941\nAnd actually, I have other concerns.\nCase A\nSource code:\ncs\nNavigationService.NavigateAsync(\"PageA\");\nNavigationService.NavigateAsync(\"PageB\");\nNavigationService.NavigateAsync(\"PageC\");\nEvent order:\nPageAViewModel#OnNavigatingTo\nPageAViewModel#OnNavigatedTo\nPageBViewModel#OnNavigatingTo\nPageAViewModel#OnNavigatedFrom\nPageBViewModel#OnNavigatedTo\nPageCViewModel#OnNavigatingTo\nPageBViewModel#OnNavigatedFrom\nPageCViewModel#OnNavigatedTo\nCase B\nSource code:\ncs\nNavigationService.NavigateAsync(\"PageA/PageB/PageC\");\nEvent order:\nPageCViewModel#OnNavigatingTo\nPageBViewModel#OnNavigatedFrom\nPageCViewModel#OnNavigatedTo\nPageBViewModel#OnNavigatingTo\nPageAViewModel#OnNavigatedFrom\nPageBViewModel#OnNavigatedTo\nPageAViewModel#OnNavigatingTo\nPageAViewModel#OnNavigatedTo\nIs this working correctly?\nI am not happy as an application developer.\nI would like to add event order confirmation to Fixture.\nShould I add a different Issue in this case?. Additional notes:\nI will withdraw this comment.\nPlease read the comments below.\nI thought overnight. . .\nI propose to divide Issue into two (or three).\n\nGive up on testing the event order with this Issue\nClose with absolute path IDestructible implementation only\nAdd a new Issue to properly test the event issue order  \nAnd if the event order of DeepLink is not appropriate, add that Issue  \n\nIt is not easy to balance event order and multithread test.\nAnd I want to test the order of events.\nHowever, I think that it is better to separate the problem from this PR.\nIf so, delete PageNavigationEventRecoder once.\nWhat do you think of this proposal?. Successfully enabled parallel execution of PageNavigationEventRecorder.\nI responded by setting an instance of PageNavigationEventRecorder to PageNavigationServiceMock.\nTherefore, please give me two advice.\n\nCan I leave the function to evaluate the order of Events?\nIf so, should I also fix other test cases?  \nIs the above Case B behavior appropriate?\nIf inappropriate, should I Fix on this Issue? Or may I add another Issue?. Sorry, it is my mistake. You are right.\nDo not change to Element.\n\nIt is difficult to choose between BindableObject and VisualElement.\nBindableObject does not have Behaviors. But Xamarin.Forms.Behavior  is BindableObject.\nBindableObject seems good.\nJust like Xamarin.Forms.Behavior .. #979 Completed.\nThank you review. . Xamarin.Forms team responds that design time BindingContext was added to feature tracking system.\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=27295#c7\nIf this is implemented, all problems will be solved.\nHowever, it is uneasy that it was a year ago...\nIt is possible to solve with tricks dependent on the current Previewer implementation.\nHowever, I think that it is better not to correspond as Prism.\nIf you do, the application should respond.\nI have an idea to safely turn on IntelliSense.\nhttps://gist.github.com/nuitsjp/7478bfc7eba0f2a25b866fa2e7e9221d\nIn addition, Project Template with this enabled is also available.\nhttps://github.com/nuitsjp/Prism-Extensibility/commits/next-gate\n. I forgot to write.\nThis idea should be handled by the application side.\nBecause it is until the design time BindableContext comes out.. Thank you @brianlagunas .\nI wrote blog entry successfully.\nhttps://blog.nuits.jp/enable-intellisense-for-viewmodel-members-with-prism-for-xamarin-forms-2f274e7c6fb6#.s2xmlvvsn\nIf this solution is added to the official documents, are very honored.\n. This Issue #989 will be helpful. \nPrism can reset the navigation stack by doing the following.\ncs\nnavigationService.NavigateAsync(\"/FooPage\");\nPlease start navigation name with slash.. When returning from Page 3 to Page 2, no Popped event has occurred.\nThat is the cause. But I do not know why.\nIt is necessary to look around that.. It works correctly with normal Navigation which is not DeepLink.\nThere may be reasons for making DeepLink.. This issue is solved in Xamarin.Forms 2.3.4.224.\nIn Xamarin.Forms 2.3.3.193, the behavior of Android and UWP was different.\nThe behavior of UWP has changed with Xamarin.Forms 2.3.4.224.\nBut there are problems. \nPage 3 is Modal Navigation.\nIn the near future I will add another Issue. After examining in detail.\n. It is okay. I will link to here.. @raV720 The problem of modal navigation is addressed here. Please check it.\nhttps://github.com/PrismLibrary/Prism/issues/1046. No problem.\nI've been repairing while understanding so far. Therefore, I did refactoring Unit Test at the same time.\nBut now I think I could fully understand it. Split the RP.\nPlease give me some time.. Split and PR again.. Completed. Please review.. Completed. Please review.. OK, I will respond during a few days.\nProbably it will be about 28 days.\nI want to fix UnitTest a little.. I tried Rebase, but I'm not sure if this is fine.\nIf there seems to be a problem, I would like you to tell me that it will be rebuilt.\nI have another consultation.\nI fixed UnitTest for ViewModelLocatorFixture#ShouldUseCustomDefaultViewTypeToViewModelTypeResolverWhenSet.\nAfter executing this UnitTest, all ViewModel becomes ViewModelLocatorFixture.\nFor this reason, other tests result in errors.\nBut maybe not a very good test code.\nCould you tell me if there is a better idea?\n. OK. I make it again.\nAnd the test code creates another Issue.. I made a new PR #1051 , so I will close it.. I was wrong.\nHere is the correct PR.. I made a new PR #1051 , so I will close it.. Completed. Please review.. I was wrong.\nHere is the correct PR.. Thanks for the review.\nIt corresponds to the weekend. Maybe.. Fixed.\nPlease review.. I understand and fixed it!\nPlease review.. The part of the problem is here.\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms.Tests/Mvvm/ViewModelLocatorFixture.cs#L67. In my environment, an error occurs in a test executed in parallel with ShouldUseCustomDefaultViewTypeToViewModelTypeResolverWhenSet.\n\nThis is because ViewModelLocatorFixture is set to ViewModel.\n\nDeleting ShouldUseCustomDefaultViewTypeToViewModelTypeResolverWhenSet will end normally\nTo run only the test failed and successful\n\nI want to modify the test that changes DefaultViewTypeToViewModelTypeResolver to set a special ViewModel only for a specific View.. OnPropertyChanged argument is name of property that you want to notify for updates.\nThat is, string.Empty is not valid.\nThis is not problem of Prism.\nI will write like this.\n```cs\n    public class Example : BindableBase\n    {\n        private ObservableCollection _selectedPhotos;\n        public ObservableCollection SelectedPhotos\n        {\n            get =>  _selectedPhotos;\n            set\n            {\n                var previous = _selectedPhotos;\n                if (SetValue(ref _selectedPhotos, value))\n                {\n                    previous.CollectionChanged -= OnSelectedPhotosChanged;\n                    _selectedPhotos.CollectionChanged += OnSelectedPhotosChanged;\n                }\n            }\n        }\n    public int PhotoCount => SelectedPhotos.Count;\n\n    private void OnSelectedPhotosChanged(object sender, EventArgs e)\n    {\n        OnPropertyChanged(nameof(PhotoCount));\n    }\n}\n\n```\n\nDelete _photoCount\nChange string.Empty to nameof(PhotoCount)\nUnsubscribe to event when _selectedPhotos is changed. I did not know that string.Empty will notify all properties for updates.\nHowever, it is better to notify only one property this time.\nOnly when you update all properties, string. Empty should be used.\n. I see. I will correspond to it after tomorrow.. \n",
    "pasha-o": "hi @brianlagunas\ndo you have an update on when to release this feature? I saw some documentation but not sure when this is going to be released? also is there any example on how to use it?. ok thanks for the update - i think in the mean time i should create my own behavior according to what's discussed here.. hi Guys, \nI implemented the approach of IMultiPageNavigationAware and attached behavior and internal navigation to and from is being raised whenever i change tabs - one question I I have is how to pass navigation parameters between tabs once i click on a tab - since i am not making a direct call to navigate in the VM in  I can't pass any parameters from code behind. \nany help is appreciated . Thanks for the input @dansiegel  and @brianlagunas\nit worked .  . ",
    "lhughey": "Is anyone having problems getting xaml bindings to work when using IActiveAware on children tabs within  a tabbedPage?\nI have a static ObservableCollection defined in the app.cs class that is being populated after the child page is created. The list view is not populated with the observable collection when I browse the page when the page is accessed via a tab bar click. Note that the OnActive event is firing. \nHowever, the observablecollection correctly binds to the list view when I browse the page via a button click which triggers the INavigationAware interface. \nIt's like the INavigation call is making a Trigger an binding event, but calls that use the IActiveAware interface calls are not. \nI apologize for grammar mistakes. I'm typing from a phone. \n. I wrote INavigationAware when I meant IActiveAware in the first sentence (my bad).\nThe binding does not trigger binding on an tab press when IActiveAware is used.  This is on my on my mac laptop running against the iOS simulator.  It works just fine on Android using my PC.  I'll sync the code between the machines when I get home and verify.. I'm having the exact same issue as you are.  It looks like we may be using different versions of the XF Prism, or using your own base class. I'm posting some code below, since we are doing slightly different things, but are having the same results.\nUpon starting the app, I'm simply loading the TabbedPage, which displays the ViewA.  I'm browsing to ViewB, via the tab, and back to ViewA.  None of the navigating methods within ViewA or ViewB are being triggered when navigating from the tabs.  However, navigating from a command (like from a button) is triggering the commands are expected.  \nApp.xaml.cs\nawait NavigationService.NavigateAsync(\"MainTabbedPage\", animated: false);\n//MainTabbedPage, ViewA and ViewB are registered for Navigation\nMainTabbedPage\n<NavigationPage Title=\"ViewA\">\n            <x:Arguments>\n                <local:ViewA Title=\"ViewA\"/>\n            </x:Arguments>\n        </NavigationPage>\n        <NavigationPage Title=\"ViewB\">\n            <x:Arguments>\n                <local:ViewB Title=\"ViewB\"/>\n            </x:Arguments>\n        </NavigationPage>\nViewA\n`\npublic class ViewAViewModel : BindableBase, INavigationAware\n    {\n public void OnNavigatedFrom(NavigationParameters parameters)\n        {\n           Debug.WriteLine(\"No Soup\");\n        }\n    public void OnNavigatedTo(NavigationParameters parameters)\n    {\n        Debug.WriteLine(\"No Soup\");\n    }\n\n    public void OnNavigatingTo(NavigationParameters parameters)\n    {\n        Debug.WriteLine(\"No Soup\");\n    }\n\n}\n. Thanks for the quick response Brian and the great work with Prism.  I'll follow issue 650.  It looks like someone posted a workaround that is said to work until you've worked the fix into a release. . As @brianlagunas referenced, this issue is triggered when you have an error before the MainPage is set. You can get around this when debugging a hard to figure out issue by simply puttingMainPage = new Page();`\ndirectly after the InitializeComponent method.  This will cause the error to be unhidden.. ",
    "kdawg1406": "Where are we on this issue?  One of the most important features of Prism Navigation is object construction.  Seems like we need a PrismTabbedPage that can handle tab navigation and object construction from the container.. Agree.  \nKarl\nFrom: Brian Lagunas [mailto:notifications@github.com] \nSent: Sunday, February 26, 2017 9:12 AM\nTo: PrismLibrary/Prism Prism@noreply.github.com\nCc: Karl Shifflett kdawg1406@gmail.com; Comment comment@noreply.github.com\nSubject: Re: [PrismLibrary/Prism] [XF] Navigating between Tabs (#650)\nStarting this thread up again. I think the best approach for tab change notifications is to use IActiveAware. Passing parameters between tab selections don't make a lot of sense. If this behavior is desired it can be achieved using either the IEventAggregator, or a class that maintains the state between the tabs. Like a singleton state manager service.\nHowever, propagating parameters passed from the TabbedPage to the CurrentPage does make sense. For example, given I navigate to directly to the TabbedPage:\nNavigatAsync(\"MyTabbedPage?name=Brian\");\nThe first child should also be passed the parameter.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub https://github.com/PrismLibrary/Prism/issues/650#issuecomment-282558552 , or mute the thread https://github.com/notifications/unsubscribe-auth/AFXQTyvsoSM47v4XlH4jb-SQNitsfhfQks5rgYhNgaJpZM4I6Iai .  https://github.com/notifications/beacon/AFXQT7-grWi41ffUSJmFBIlPjWEZEaxaks5rgYhNgaJpZM4I6Iai.gif \n. Umm...  Why remove this from the API?  What's the motivation and benefit?\nAre these developers using this pattern?\n. I recommend pinging the XAML Disciples Google Group.  I think there is a ViewModel first camp out there.\nWould this change break the ViewModel first developers?\n. API looks clean, discoverable, and lets developers author their applications they way they want.\nWin-win.\n. Much better practice to have granular interfaces.  \nIApplicationLifecycle is my vote.\nBest,\nKarl. @dansiegel thank you for the quick response.  Bummer about Unity, have always used it.  Sounds like it will just be awhile while products and API's can catch up to the ever changing world that is our environment.\nBest,\nKarl. @dansiegel does not seem like a big deal.\nFrom here:  https://blog.xamarin.com/preview-bringing-macos-to-xamarin-forms/?utm_medium=social&utm_campaign=blog&utm_source=twitter&utm_content=macos-for-xamarinforms-preview\nNot All NuGets are Ready for macOS\nIn order to work in a macOS project, packages must target xamarinmac20. You may find that some of your beloved libraries do not yet support macOS. What can you do? Kindly send a request to the project\u2019s maintainer to add it. Until they have support, you may need to look for alternatives.. Use AppMap to create the solution.\nOn May 10, 2017 9:53 PM, \"Dan\" notifications@github.com wrote:\n\n@kdawg1406 https://github.com/kdawg1406 I'm not sure what exactly\nyou're doing but, I can File -> New a project add the ViewModelLocator to a\nView and I get no exception thrown by the Xamarin Forms Previewer.\nCan you provide some more information like which versions of Prism,\nXamarin Forms and your IDE.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/1037#issuecomment-300660495,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFXQT17_p-0-mvzqkiZ1NJkuzjkq3sOOks5r4moYgaJpZM4NWmGP\n.\n. Yes. \n",
    "aateeque": "I am sure there's a good reason, but why not hook to the INPC of the property's containing type?\n. @brianlagunas a method that takes Func<object, bool> and is called ObservesCanExecute and does not say anything about these points in it's doc can be interpreted in any way by the user.\nIn my case I split my INPC ViewModel types into two separate types- one containing state (ViewModels) and the other behaviours (ViewControllers), the former is instantiated in the latter. Therefore I will always be instantiating a DelegateCommand in a ViewController type and I would want the ObserveCanExecute on a property in the ViewModel type. Would it be useful to enhance the API to provide a defining type?\n. ",
    "Nambukarthy": "We need to add a dummy page in Views folder, It resolves my issue, its nothing to do with prism. Thank you :)\n. ",
    "Troto": "Sorry, this should help. Hopefully I haven't just missed something obvious :S \nhttps://github.com/Troto/PrismJunkApp\n. It still doesn't work for me... and yes I'm using breakpoints...\nWhat am I supposed to do now then?\nCheck visual studio versions? Windows versions?\nI've tried on both emulator and phone, something isn't working...\n. OK, updating to -pre6 seemed to fix whatever the issue was. Weird.\n. @brianlagunas Hey, I'm not sure if this should be a new issue or on stack overflow or if it's not even included functionality but when using the back button of a XF navigation page it won't trigger OnNavigatedTo. Is that built in or do we need to somehow intercept that to call a GoBackAsync?\n. @brianlagunas I'm not referring to the hardware back button. I mean the back button provided at the top of the page when using a navigation page. Is there no way to intercept that either?\n. Ahh my bad. OK thanks. For a workaround there is a way to intercept hardware presses by using onbackpressed in the mainactivity.cs for droid but is there any way to intercept the software back?\n. @brianlagunas I'm in favor of the change because it would be much clearer that it's not the preferred way of navigating. I started using view model navigation just to make refactoring easier but ended up wasting heaps of time trying to figure out how to do exactly the limitations you listed above. It wasn't clear they weren't available with view model navigation.\n. ",
    "scionwest": "I like that the method is more discrete. Much clearer that its intent is for view model based navigation.\n. It looks like you actually already addessed this with #630. I've been piecing it together from the unit tests (can't find docs on autofac's flavor) and I keep hitting a runtime NullReferenceException. Is there something I'm doing wrong with my setup? The exception is happening outside of my code (looks like in platform.cs in Xamarin).\nApp.cs\n```c#\n    public class App : PrismApplication\n    {\n        public App(IPlatformInitializer initializer) : base(initializer) { }\n    protected override void OnInitialized()\n    {\n        this.NavigationService.NavigateAsync(\"MainPage\");\n    }\n\n    protected override void RegisterTypes()\n    {\n        base.Container.RegisterTypeForNavigation<MainPage>(\"MainPage\");\n    }\n}\n\n```\nMainActivity\n```c#\n    public class AndroidConfiguration : IPlatformInitializer\n    {\n        public void RegisterTypes(IContainer container)\n        {\n            var builder = new ContainerBuilder();\n            builder.RegisterType().AsImplementedInterfaces();\n            builder.Update(container);\n        }\n    }\n[Activity(Label = \"MobileApp\", Icon = \"@drawable/icon\", Theme = \"@style/MainTheme\", MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation)]\npublic class MainActivity : global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity\n{\n    protected override void OnCreate(Bundle bundle)\n    {\n        TabLayoutResource = Resource.Layout.Tabbar;\n        ToolbarResource = Resource.Layout.Toolbar;\n\n        base.OnCreate(bundle);\n\n        global::Xamarin.Forms.Forms.Init(this, bundle);\n        var app = new App(new AndroidConfiguration());\n        LoadApplication(app);\n    }\n}\n\n```\nThe exception is thrown once the OnCreate(Bundle bundle) method is completed.\nMainPage.xaml\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n\n\n\n\n\n```\nMainPageViewModel\n```c#\n    public class MainPageViewModel : BindableBase\n    {\n        private string title = \"Hello from VM\";\n        public string Title\n        {\n            get\n            {\n                return title;\n            }\n        set\n        {\n            SetProperty(ref title, value);\n        }\n    }\n}\n\n}\n```\nCallstack\n\n0x95 in Xamarin.Forms.Platform.Android.AppCompat.Platform.LayoutRootPage at C:\\BuildAgent\\work\\aad494dc9bc9783\\Xamarin.Forms.Platform.Android\\AppCompat\\Platform.cs:279,5   C#\n    0x12 in Xamarin.Forms.Platform.Android.AppCompat.Platform.Xamarin.Forms.Platform.Android.IPlatformLayout.OnLayout at C:\\BuildAgent\\work\\aad494dc9bc9783\\Xamarin.Forms.Platform.Android\\AppCompat\\Platform.cs:196,5  C#\n    0x20 in Xamarin.Forms.Platform.Android.PlatformRenderer.OnLayout at C:\\BuildAgent\\work\\aad494dc9bc9783\\Xamarin.Forms.Platform.Android\\PlatformRenderer.cs:73,4  C#\n    0x12 in Android.Views.ViewGroup.n_OnLayout_ZIIII at /Users/builder/data/lanes/3511/ce955cc0/source/monodroid/src/Mono.Android/platforms/android-23/src/generated/Android.Views.ViewGroup.cs:3427,4  C#\n\nAny ideas on what I'm doing wrong here? The MainPage and MainPageViewModel bindings were working fine until I brought in and configured the Prism.Autofac.Forms package. It's really got me confused.. Prism comes with support for it out of the box though, Prism.Autofac.Forms is your package. Couldn't you at least tell me if I was using the Prism part of it correctly? I don't expect you to support the Autofac API itself, but Prisms registration process is what I'm having issues with.\nI took a look at the issue you linked me to but it doesn't seem applicable :/ I'll try moving over to Unity to see if that solves it; I'd really rather use Autofac though since that's what I've used for years.\nThanks for replying while on vacation though \ud83d\udc4d . Yeah, i'm pretty sure it's something related to instantiating the view itself. Not sure what's happening. Debugging these mobile apps is not nearly as easy as debugging a WPF app!. @bartlannoeye I pushed a repro up this evening for you - bare bones solution for you to test against. I tested it against an Android emulator to verify it failed; my Mac wasn't available at the time so I wasn't able to test my iOS implementation. It's simple enough though that the platform specific service and dependency registration should be fine.. ",
    "TWhidden": "I personally don't know why it's needed... if you request to navigate to a view, it's because you expect it and with a view model. The whole point of the mvvm/ prism . I personally spent over an hour trying to figure out why my view didn't have a vm when I was learning it. I know now, and get it... but think in this pattern, it's assumed to auto wire, and maybe an option to disable autowire at the view attached property is a good option. Or even a global flag to require the attach property, but off by default where you don't require the attached property. \nI am still new for the framework,  so maybe there is something I don't understand yet on why it's a better practice to require the extra line in the xaml. In today's code, less is more ;). Just my .02c\n. Sorta... maybe for some. I haven't seen the previous XF Prism lib, and I am only building myself with the previews... but between versions, there are is always an expectation that something could be broken (to better library). And to keep the API clean and neat, and the usage easy, this is just one small improvement that could make developing even better. The proposed change save times and debugging for those who forget to do it.  But if you don't want it, you can easily exclude it.  I could be missing a critical fundamental, but whenever I create libraries, I try not to flood the library with lots of options that could create confusion for someone coming onto it.   I have been using PRISM since 2008 in WPF using viewmodel first - it a different animal.  View first is something I am learning here. Anything we can do to keep the library clean -- including removing un-needed code, is greatly appreciated in my view.  It might break something using an older version, but I don't think that will be a big case, and its obviously very easy to fix. \nI personally think the pros outweigh the cons in this case.\n. ",
    "leo-mck": "(sorry for my bad english) Personally, I like the idea. I am using Prism because I want it to do things for me and I think that to not want the automatic wiring of the viewmodel is an exception on a Prism app. I think it should set all the default, expected things so although I think no one should be rewarded for not reading the documentation - we do not punish who does not.\n. I can be wrong but this seems to be a problem with every library that implement a custom Renderer and not with Prism. The latest (2.3.3.152-pre2) XF exposes an abstract CreateNativeControl that needs to be implemented on the renderers and all previous UI libraries stopped working for me.\n. ",
    "alexjacostal": "I think this is worth to be set automatically, and sooner the best for the project, it has to be an opt out option, and in theory it mustn't broke any current project because in existing projects if it has been set to true that will be the default behavior anyway, and I also think that the view that is not attached to a view model is an edge case.\nMaybe the other option that is left is to use an global option to do it and do the automatically thing an opt in, with this option you have something to measure the feedback of people about this and test if there is not anything broken for anyone, and in the future maybe set to true by default.\nI think that any action about this will be more options for the project and ultimately more flexibility for the developer, and I'm sure that everyone has in some point forgotten about this and lost theirs time trying to figure out what is happening... that is my 2c\n. My vote is for the IApplicationLifecycle, it is a pattern that is needed regularly and very useful, and most probably it gonna be use in one or two sites and not in all the VM that use the inavaware. ",
    "Emasoft": "Of course it is a great idea to automatically set AutowireViewModel true! \nJust add a commented line of code to the template that sets it back to false, and write above it: \"//Uncomment this line to disable AutowireViewModel, etc\".\n. @bartlannoeye I don't understand why you think that you'll loose the flexibility of being able to rewrite the ViewModelLocator rules. You can rewrite those rules in the same way you can rewrite Linq queries. Can you make an example of some rule that you think is going to be impossible to write?\n. I need to thank  @Robot1que and @dbeavon for rising this issue. I was considering using Prism for a big Xamarin project, but luckily you discovered this fatal flaw in its design. I really hope to see this fixed in the future. After being used to Prism, getting back to the old way of doing things will be painful!\n. ",
    "hervespitz": "As a new Xamarin Forms and Prism user, I had some trouble to understand why on earth do I have to set AutowireViewModel to true since, if I use Prism, I use it to make a MVVM app. It may be usefull to be able to unwire a view and its viewmodel, but this is an alternative use, not the primary one in my opinion.\nSo go for it!\n. ",
    "udayb99": "Hi joacar, thanks for your reply. I have attached the PCL project alone (to make it a small attachment) as the Platform projects have no extra code.\nAlso how could we wrap the initial page(in my case LoginPage) into Navigation page.\nIf it is just xamarin.forms we could do like MainPage = new NavigationPage(new LoginPage());\nBut i don't know how we can do this in Prism.forms.\nI don't think the below will work.\n            var loginNavPage = new NavigationPage(new HomePage());\n            Container.RegisterInstance(loginNavPage);\nQR.POC.XF.FlightSearch.zip\n. ",
    "pedershk": "Is it possible to get NuGets for the 7.0 preview? Are they being built and put somewhere, or must I build from github source and use that?\nTrying to get Xamarin Forms with Prism to fit into a .Net Standard/Asp.Net Core world isn't easy :). ",
    "opcodewriter": "\nGreat discussion guys! I think based on the comments in this thread, Prism isn't ready for consideration of .NET Standard. I'm going to close this until .NET Standard evolves more and a benefit is more apparent for making the transition.\n\n.NETStandard 2.0 has been released, can we reopen this please?. No, I mentioned it's null on first click.\n. @dvorn Thank you for taking time to respond. \nI've been swamped, I plan to look again over this. \nIt didn't look like a problem on my side.\n. Thanks. \nActually sing SelectedItem != null in the \"can execute\" action is how I \"fixed\" it at that time.\nMy impression was that the parameter passed in \"can execute\" action is the value of CommandParameter, therefore I could check on it instead of using the property.\nI was expecting that SelectedItem gets changed before the \"can execute\" action get called . After all, it's called because SelectedItem property get changed.\nIsn't this how things work? \n. So the flow I was expecting is this:\n1. I select an item in the ListView.\n2. SelectedItem property setter gets called. \n   _selectedItem gets set to the item selected in the ListView.\n   Here, I also call OnPropertyChanged which raises the INotifyPropertyChanged event. Since ObservesProperty listens to this event too for the SelectedItem property, it calls RaiseCanExecuteChanged on the RunItemCmd command.\n3. RaiseCanExecuteChanged on the RunItemCmd command calls my Action (item) => item != null passing the CommandParameter defined in the view, which resolves to calling the SelectedItem getter. \n4. The SelectedItem getter returns _selectedItem value which is not null.\n. See step 3 and 4. At the time when CommandParameter is resolved the SelectItem property returns the selected item \n. So the button in view looks like this:\n<Button Content=\"Run\"\n             Command=\"{Binding RunItemCmd}\"\n             CommandParameter=\"{Binding SelectedItem}\" />\nI think I understand what's going. Please correct me:\nWhen button is created, WPF \"resolves\" CommandParameter value. Obviously, at this point it's null because this is the default value of SelectedItem property of the view-model.\nI was having the impression that at the moment when CanExecute action gets called (which is (item) => item != null), the CommandParameter (which is (item)) is going to have the current value of the SelectedItem property in the view-model. \nI'm a bit confused now, I need a break, too much work.\n. I think I got a bit confused :)\nThe commanding implementation so to speak, is not listening to the changes in the binding I set to CommandParameter. Therefore, it cannot know about the change on SelectedItem.\nIt only reads the binding value once, at button creation item.\nWhich I think makes sense :) \nBut it would have been nice if framework could read it again when calling the CanExecute action.\n. I'm pretty sure I'm using DelegeateCommand<T>, otherwise I won't be able to use a lambda with input parameter for the \"can execute\" action, it wouldn't compile.\n. I think I see what you mean.\nThis issue shouldn't exist, things are too complex for such a simple purpose...\nTo me it looks like ObservesProperty adds some unexpected side effects. \nWhat am I doing wrong? Is everyone else using the view-model property in the lambda there and not the lambda parameter? It doesn't look OK to me to use the view-mode property, what's the point of having parameter passed to the can execute if I can't use it for some reason...\n. That's not my snippet, it's @dvorn's: https://github.com/PrismLibrary/Prism/issues/690#issuecomment-235671017\n. > You should only be using ObsrvesProperty if you need to call RaiseCanExecuteChanged in response to the value of a VM property being changed\nThat's my scenario I think. \nView:\n```\n\n\n```\nViewModel:\n```\npublic class ItemListViewModel : BindableBase\n{\n        private Item _selectedItem;\n        public Item SelectedItem\n        {\n            get { return _selectedItem; }\n            set\n            {\n                if (_selectedItem!= value)\n                {\n                    _selectedItem= value;\n                    OnPropertyChanged(() => SelectedItem);\n                }\n            }\n        }\n    public ICommand RunItemCmd { get; private set; }\n\n    public ItemListViewModel () \n    {\n        RunItemCmd = new DelegateCommand<Item>(\n                    (item) => \n                    { \n                           // item is valid selected item here\n                    }, \n                    (item) => item != null)\n        .ObservesProperty(() => SelectedItem);\n     }\n\n}\n```\nMy understanding is that without ObservesProperty, I'd need to call RunItemCmd.RaiseCanExecuteChanged() in the SelectedItem property setter.\nI don't understand what I'm doing wrong.\n. I don't show Items property in the view-model, I don't think it matters.\n. Even with \n<Button Content=\"Run\"\n              Command=\"{Binding RunItemCmd}\"\n              CommandParameter=\"{Binding ElementName=LV, Path=SelectedItem}\" />\nWhen SelectedItem changes, the ICommand.CanExecute is not called.\nI wish WPF did that.\n. When I select an item in the LV, CanExecute gets called only if in the SelectedItem property setter I call RaiseCanExecuteChanged on the command.\nIf I don't call RaiseCanExecuteChanged, the CanExecute is not called.\nWhat I was saying was that I wish the CommandParameter property implementation called CanExecute when the CommandParameter binding value changed. \nI can see that there's no 'property changed' callback:\nhttp://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Controls/Primitives/ButtonBase.cs,202\nI wish it worked like when Command is changed, in this case it does call CanExecute:  http://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Controls/Primitives/ButtonBase.cs,288\nWhile I realize calling CanExecute on the command when parameter has changed does not always make sense, I can see it useful in some very common scenarios. If framework could do this, I wouldn't have to implement a field for the Command and call RaiseCanExecuteChanged. \nFor this, it would be nice if ButtonBase had a bool property like 'RaiseCanExecuteChangedOnParameterChangeor something which I can set when I want the CanExecute to be called when CommandParameter changed.\n. I updated my previous comment...\n. I think it's getting confusing. In my last comment I wasn't talking about Prism orObserveProperty`.\nI didn't expect you will agree that ButtonBase implementation should be changed :) I think it's been working like that for a decade or something. \nYou're saying you don't agree with my suggested behavior, can I ask why?\n. @dansiegel What's the usual practice as a library author if you want to give your users the PDBs?. @dansiegel symbol packages are of great help to debug easily issues. It would also encourage people to debug their issues themselves instead of opening up tens of questions on StackOverflow only to realize they forgot to do something their own.. @dansiegel It would be fantastic to get the PDBs working with next release. Thank you. @dansiegel \nMeanwhile, a colleague is trying to do it but no luck:\nhttps://stackoverflow.com/questions/46377573/how-to-debug-an-oss-library-added-to-my-app-project-by-nuget. Ha! It works in VS2015... but why? :. Ha! It works in VS2015... but why? :. @brianlagunas If you don't mind, why does compilation fail on VS2017? . @brianlagunas If you don't mind, why does compilation fail on VS2017? . @brianlagunas I don't think it has to do with my environment at all. The build works on VS2015 but not on VS2017. I am pretty sure it's not my setup at all.\nDoes it compile fine for you in VS2017?. I don't understand what you mean by \"It can be anything in your environment causing an issue\".\nI have latest VS2017 Enterprise installed, v15.3.5.\nWhat else should I need in my \"environment\" to compile a C# project? Clone repo and compile, should just work.. To answer your questions:\n\n\nNo, I haven't tried changing the Android version. Why should it make any difference? The error refers to the Xamarin Android version, not the Android SDK version.\n   I still don't understand why is using the pre-release version. Only the pre-release version of template packs should use pre-release versions of Prism. The template pack is released version, so it should use only the latest release Prism version.\n\n\nSure, I can repost it there, but I doubt it has to do with the template pack. Are you sure this is really needed? I am sure the issue is in the pre-release version of Prism.\n\n\n. I didn't realize until now I need .NET Core SDK 2 installed (I guess this is what you referred to when you said \"DotNet Core package installed with VS\"), I thought Visual Studio updated did that!\nThe .NET Core SDK is a bit confusing to me.\nThank you for that!. Funny, now I am confused why did compilation of my solution worked before installing .NET Core SDK. \nFew months ago I converted my PCLs to  .NET Core library and it was compiling fine.\nMaybe because I'm using <TargetFramework>netstandard1.6</TargetFramework>  in my .NET Core library, and not 'netstandard2.0' ? I don't remember having to installing any SDK for 'netstandard1.6'.... I already installed .NET Core SDK. Now everything compiles fine. Does it still make sense to change the .csproj with those changes?. Hi Brian, are you getting these warnings too?\n```\n\nD:\\Projects\\BlankApp7\\BlankApp7\\BlankApp7\\BlankApp7.csproj : warning NU1701: Package 'CommonServiceLocator 1.3.0' was restored using '.NETFramework,Version=v4.6.1' instead of the project target framework '.NETStandard,Version=v2.0'. This package may not be fully compatible with your project.\nD:\\Projects\\BlankApp7\\BlankApp7\\BlankApp7\\BlankApp7.csproj : warning NU1701: Package 'Unity 4.0.1' was restored using '.NETFramework,Version=v4.6.1' instead of the project target framework '.NETStandard,Version=v2.0'. This package may not be fully compatible with your project.\n```. These warnings are when compiling a project created by the latest Prism template pack. OK, thanks a lot.. More issues ... \nHere are the steps:\n\n\nUsing the Prism template, I create an app. It compiles and runs fine.\n\nI saw there's an update for Prism, so I updated it but it gave this error\n\n\n\nI saw there's an update for Xamarin, so I updated it too, but now I've got this error:\n\n\n\nI can't get rid of it. I tried to delete all bin\\obj dirs., restarted VS, recompiled, ... nothing\nThis can't be happening only to me.\n. OK.\nIs it normal that the only references are Xamarin.Forms and Prism.Unity.Forms and not also Unity or CommonServiceLocator packages?\nAlso, there's no packages folder in the solution folder.\n\n. After deleting bin and obj folders and restarting VS, this is what I have not:\n\n. The path is quite small \n\n. @brianlagunas  What bad namespace? This is a dummy app created by the template. I didn't add or modified any code.\n@dansiegel Thanks for explanation regarding NuGet references. Very happy local packages in the solution folder is gone. But do you have any thoughts of how to solve the compilation issues?\n. Thanks, I finally managed to make it work. I wasn't aware of all these changes, I got used with the app created by the template to just work, my brain was in monkey mode.\nWhat's weird is that VS doesn't display the reference tree for the Android project like the one for the .NET Standard project:\n\nWhich is extremely confusing. You basically don't see that the Android project is referencing Unity.dll.\nI had to manually add using Unity; in the MaiNActivity.cs. It couldn't compile and hovering over the IUnityContainer didn't suggest having to add the using statement.. > Because only the .Net Standard projects provide the new reference experience. The Android project is not .Net Standard.\nI see what you mean, but it's funny that the new  <PackageReference> exists and works for both .csproj, but the tree display in VS only works for the .NET Standard one.\n. ",
    "deb1bhu": "I got the issue. I don't know if its a bug in prism 6 or it's the design of Prism. \nHowever let me point out the core issue.\nI thought in Prism 6.0 there is no difference between OnPropertyChanged() method and Setproperty()method except using SetProperty<T> You can reduce the set method to just one line also ref parameter allows you to update its value.\nBut there is a difference between OnPropertyChanged()method and Setproperty() method. \nHowever there should not be as BindableBaseis an abstract class implements INotifyPropertyChanged().\npublic abstract class BindableBase : INotifyPropertyChanged\n{...}\nIf I have a property \"UpdateValue\" in MainViewModel with SetProperty() method.\nAnd I want to update the value through  a \"DelegateCommand\". the value gets updated but it doesn't update the UI.\nBut for the same property value if I set \"OnPropertyChanged()\" then the value gets updated in the UI through \"DelegateCommand\".\nCan anyone explain this behaviour. \n. I have attached the code here. Sorry for the late reply as I have to create a new project and then share.\nPrismDummyApp.zip\nThanks\n. Ohhh \nThanks for the help. It really works. \n. ",
    "nasheayahu": "Yes, I recompiled it with and checked to make sure I had the latest Prism version, but still get the error message.\n. I need to know what I'm missing because its not there according to this coding example:\n\nhere's my code:\n\nObject Browser has it located here:\n\nBut, no reference here:\n\n. That doesn't make since when there is no mention of this in the tutorial and the example make you assume you can obtain it from the interface.  If the example is incorrect, why is it being used?. Oh okay. had to read it again slowly this time, my bad..., thanks for helping me see the light...  :)  But, I'm lost on how the method was obtain by the interface and its not showing its available in my Object Browser when the example does?. Oh just drop it, I need to see a full code example on how this is used in this way.  Thanks for your replies...\nEdit: After further looking at the code and a nights rest I finally got it!  I didn't gaze enough at the code to realize the case difference and the recent post.\nThanks again for your help and keep up the good job!.... Thanks for the reply!\nI so happen to have found the solution on the CodePlex site over looking Prism Avalondock Extension project AppBootstrapper.cs.  Even though it was using Unity as its container, but was using a different approach in initializing the Adapter which worked for me also.\n`\n        if (regionAdapterMappings != null)\n        {\n            IRegionBehaviorFactory factory = ServiceLocator.Current.GetInstance<IRegionBehaviorFactory>();\n            regionAdapterMappings.RegisterMapping(typeof(LayoutDocument), new DocumentRegionAdapter(factory));\n        }`.\n",
    "RomaRudyak": "Hi joacar,\nInjection thought property works good. \nIssue is in that OnAppearing not fired for page when invoked GoBack();\nProbably navigation with AbsoluteUri can fix firing of  OnAppearing, but it will recreate already existing page again, and this will be overwork.\nBut thank you for pointing me on AbsoluteUri.\n. Thanks a lot!!\nThe problem was that i register PageNavigationService in my Bootstrapper class, because I need it earlier  that it initialized, and it can be that it overrides later.\n. ",
    "StefanOssendorf": "So this is the correct approach?\nif(Device.OS == TargetPlatform.Android) {\n    MainPage = new NavigationPage(new MainPage());\n} else {\n    NavigationService.NavigateAsync(\"MainPage\");\n}\n. Ah okay. Thank you very much :smiley: \n. @adrianknight89  Any way to get in touch with you? (Twitter, Mail or something else?)\n. Works like a charm :) Tried INavigationPageOptions on \"SecondPage\" not the \"NavPage\".\nThanks!\n. ",
    "los3rz": "So this means that it's not possible to load the state from the previous view model before the UI renders? If that's the case, then I would have to write my own transition animation and set the NavigateAsync animated parameter to false.\nThis is weird because on your Xamarin Evolve demo, when you're using Navigate instead of NavigateAsync, I can see that the label's text updates first before the UI renders. \n. The only way I could think of is to do a code behind navigation to its view\nperhaps. Which would essentially break the true mvvm model. I remember\nthere's one mvvm video where u mention I wouldn't go to jail if I break the\npattern. Thanks!\nOn Friday, 5 August 2016, Brian Lagunas notifications@github.com wrote:\n\nThere is no Navigate anymore. Essentially, you would have to prevent the\nview from rendering until your VM has been navigate to, which isn't\nsomething you can do off the top of my head. My sample is so simple in the\nvideo, its possible it just happens so quickly you don't notice it. You\ncan't update a UI element from a binding unless the view has been created\nand initialized.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/701#issuecomment-237752201,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AD6tBeXmnbhMzTZGhov7z-Vxj15HKuxPks5qcrt-gaJpZM4JdVXs\n.\n. \n",
    "mzhukovs": "hey Brian, this is great. Perhaps the templates could be updated to not include the 2 lines below then? Same goes for the documentation here and here (i.e. it should mention this, I didn't see it, unless I missed it).\nxmlns:prism=\"clr-namespace:Prism.Mvvm;assembly=Prism.Forms\"\nprism:ViewModelLocator.AutowireViewModel=\"True\"\nBtw new to Prism and so far this is exactly what I've been looking for to getting an XF project set up as quickly as possible, great stuff, thanks to you and the team.\np.s. when adding a new View (at least using autofac) it incorrectly adds the line below (should be Builder, not Container) to App.xaml.cs - this automation is great too though.\nContainer.RegisterTypeForNavigation<NameOfPage>();. ",
    "sschutten": "Good points and thanks for the elaborate explanation. I haven't looked at it that way. Then I guess the best way is to use an async void in combination with proper exception handling.\n. Thanks for responding this quickly and providing the options. I tried your suggestion with adding the CanExecute method and indeed see the MainPage being passed.. ",
    "DavidStrickland0": "\nIf the system waits for the methods to complete, then what the UI will look like during the execution of OnNavigatedFrom and what the user is supposed to do during this time?\n\nThe methods are currently synch... they wait and pause navigation by default out of the box. Stating they shouldnt be Asynch because they would then pause the navigation doesnt make sense. If they returned a task then the developer would have options how they want to implement, and the methods would be able to play well with the rest of the rest of the Async stack by default. \n\nyou need to have a proper design of your views and navigation between them. E.g., the old view may implement IConfirmNavigationRequestAsync\n\nIm sorry stating that your old View\\ViewModel should have deep knowledge of the new View\\ViewModel and in fact thus every \"old\" View\\ViewModel that wants to navigate to that page must likewise have deep knowledge on the new View\\ViewModel sounds a lot like spegetti code not \"proper design\" The only ViewModel That should be deciding if the LoginPage should show or cached credentials should be used and the login page be skipped is the LoginPageViewModel not every page throughout the app that might have the login link on it.. > That's why you should use async methods that don't block UI or navigation execution.\nWhere do I block the popping of the login page(or any other page for that matter) and use cached credentials instead? I dont want the login page to show.. So every page in the entire app that might want to navigate to a given page has to implement IConfirmNavigationAsync  and decide what to do with the NextViewModel they might want to navigate to? So the parent has to have deep knowledge of every child and a change in the functionality of the child thus may require me to touch every parent? \nSecondly how does one handle exceptions in non blocking Async void methods theres no way to catch the exception short of the App wide exception handler because its fired and forgotten.\n. > You handle exceptions just like you would handle any other non-blocking async operation. Nothing changes.\nYou can't catch async void OnNavigatingTo. It's fired and forgotten. I could catch it just like i catch any other non-blocking async operation IF it was like any other nonblocking async operation and returned a task.  \nAn example of attempting to catch async void OnNavigatingTo was included in the ticket #1697 you can see there it doesnt catch it blows out to the application.\n. > you asked about popping a page, which you would use the ICOnfirmNaviagtionAsync method\nSo every page in the entire app that might want to navigate to a given page has to implement IConfirmNavigationAsync and decide what to do with the NextViewModel they might want to navigate to? \nTake for example a Shopping cart with a link to the loginpage. If the user has thier info locally cached I dont want to show the login page otherwise I do. Per your example shoppingcart now needs to know to check if the user credentials are cached in the ICOnfirmNaviagtionAsync method. Later we add to the flow and now It also needs to make sure in the ICOnfirmNaviagtionAsync method that if the Login Details are cached and the Credit Card Details aren't cached then I need to go to skip the login page and go to  the creditcard details page instead of the confirmation page. I also need to go to the login page and put this logic there as well. Then of course the Product owner decides they want a change to the privacy policy of this data and they want a new page after this that pops up and requires they agree to it if they havent already.\nConfirmNavigation makes perfect sense when its concerned with whether the ViewModel has all the info it needs to leave the page. But using it to determine if the next page can\\should load, getting data for the next page or anything else that requires pre-knowledge by the parent of the construction of the child I would see as a step to far.. > The fact that you want to navigation to a page, create it, render it, and then decide if they should be immediately navigated to another page is a performance overhead I wouldn't want in my app.\nI think were missing an important piece of communication here. Async void OnNavigatingTo promotes exactly this antipattern and this is precisely why I've been saying it should never be used. Its Async void there is nothing awaiting it. Whatever is happening in the method that causes it to be async. The page will likely be created, loaded on the stack and rendered before ONavigatingTo finishes, you might as well have just put the logic (whatever it is) in OnNavigatedTo it will have the same effect and be more predicatable about when the code will be complete. \nThe only predictable implementation of OnNavigatingTo is a Blocking implementation. Either Sync or async awaited. With Async Awaited you can free up the TPL to go do something else why you wait. If theres an Exception the NavigationService is informed BEFORE the page loads and the navigation stops.\n\nFirst off, you can't make a navigation decision in OnNavigatingTo. \n\nThe 7.1 Implementation of the NavigationService added the ability to return Exceptions from Navigation. Throwing an UnAuthorizedException is a pretty clear navigation decision. \n\nYou must know your navigation path before navigating.\n\nGranted but the path is all you should know. Not the nitty gritty of how the child page loads it data or validates its contents. \n\nBy the way, in your sample you were not handling any exceptions, only throwing them.\n\nhttps://github.com/DavidStrickland0/ONavigatingTo/blob/master/PrismNavigationDemo/PrismNavigationDemo/ViewModels/MainPageViewModel.cs\n    private async Task NavigateToExistingFailedPage()\n    {\n        try\n        {\n            await NavigationService.NavigateAsync(\"ExistingFailedPage\");\n        }\n        catch (Exception e)\n        {\n            NavigateToPageCommandResult = e.Message;\n        }\n    }\n\nException Handler never gets hit OnNavigatingTo is Async Void.\n\nAs with most OSS projects, you are more than welcome to customize prism to fit your needs.\n\nLooked into it Unfortunately DoNavigation is a static so its basically going to take rewrite of the entire Navigation Stack.\n. Using async void never works the way they'll expect it to. If they are doing anything short of logging that navigation is about to occur (and likely getting that log entry afterwards) it will bite them eventually with weird errors and race conditions that only crop up on certain devices under certain conditions etc.\nAdding a try catch in the async void method wont do anything useful. Theres no way to marshell it back to the UI thread no way to inform the user the error occurred or alter the application flow short of doing it up in the Application Unhandled Exception Hook all the way at the top.\n\nI can make DoNavigation extensible. For now, you can just copy/paste the navigation service into your app to modify it. \n\nThanks appreciate that. I think that is the plan for now .\nBrian: Thanks for the time and thanks for keeping Prism going and responding to issues as quick as you do. . Looks like a coworker got time to put a solution together. Its working for our needs and thought Id throw it up in case anyone else feels the urge. https://github.com/Pavel-Sulimau/Prism.Xamarin.AsyncNavigation/\n. Unfortunately we have several apps live and getting sign off atm to use preview code in production is an uphill battle we do look forward to the release so we can do just that. Thanks for the heads up.. Forced implementations of the INavigationService calling into an Internal only Interface Im afraid is code stink. Its basically bypassing the one rule of Interface Extension that being that an Interface Extension can only access the interfaces properties and methods the interface exposes. Expose the internal Interface so it can be Mocked or implement a seperate Contract to use with Forms that inherits from the INavigationService.\nInheriting from the Prism implementation isnt a Mock. You dont \"Mock\" concretes you \"Mock\" Interfaces. Now we have to run the constructor of the base class to Overload the method that our implementation needs to call. So we are no longer just testing our code we also have to test the constructor.\nOur Method is calling one of the Extended Methods namely NavigateAsync(this INavigationService navigationService, string name, NavigationParameters parameters = null, bool? useModalNavigation = null, bool animated = true); Even if we do Inherit we cant override it because its not in the base class to be overriden its in the Interface. . ",
    "DenisZhukovski": "Sorry guys but I want to add my 2 penny here. You've created a great navigation service but I got into a situation that I can't solve. \nThe problem is:\nIn our application we want to let viewmodel to initialize itself. But we don't want to be redirected to the page before the initialization complete and if some exception occurs we want to notify parent viewmodel about it. In other words we don't want to have some user experience when user can get to a page with viewmodel error state. Maybe you have some thoughts about the solution. Thanks.. ",
    "MaxFe": "I don't really undestand why Xamarin.Forms impl. the method \"InsertPageBefore\" but it's too complicated for Prism? Why can't their approach be used for Prism? \nhttps://docs.microsoft.com/en-us/xamarin/xamarin-forms/app-fundamentals/navigation/hierarchical#manipulating-the-navigation-stack. ",
    "troyvnit": "Sorry for my mistake. I just fixed this issue. So, I close it. Thanks!\n. ",
    "terudon": "Can you elaborate on how you fixed the issue?\n(Ah... clean & rebuild showed my actual error: not building packaged_resources due to invalid resource name)\n. ",
    "Robot1que": "Sorry, but could you explain what \"PR\" means?\n. Oh, yeah, sure. I'll try to make change tomorrow.\nBut yeah, I would rather create another class for async commands.\n. @dvorn, in our design view models return instances of ICommand rather then DelegateCommand because we want to avoid changing interface of view models if we decide to change MVVM framework. If we make execute method async await then we are aware of it and know what to expect. On the other hand building it into framework without warning about it in a class description might confuse users of this library as it happened to me. It's not OK when users of a library have to read source code of a that library in order to understand it's behavior.\nAlso as far as I can see there is no way I can pass Func<Task> as executeMethod constructor parameter because that constructor is protected. Which means I cannot compile the following code to make my test to fail:\n```\n[Test]\npublic async Task This_test_should_fail_because_of_thrown_exception()\n{\n    var command = new DelegateCommand(this.Method);\n    await command.Execute();\n}\nprivate async Task Method()\n{\n    await Task.Delay(0);\n    throw new Exception();\n}\n```\nThis means that there is no benefit in using Func<Task> in internal implementation of DelegateCommandBase. If I need to execute my code asynchronously I just pass async void method as executeMethod constructor argument just like we usually do with event handlers.\nOr maybe the problem is that protected DelegateCommand(Func<Task> executeMethod) constructor is protected?\n. I think what @dvorn suggested is to put await every time you need to call DelegateCommand.Execute() just like he did in his example:\npublic async Task SomeMethod()\n{\n    var command = new DelegateCommand(() => { throw new Exception(); });\n    await command.Execute();\n}\nWhich means that:\n- we have to refactor our synchronous methods into asynchronous by adding async keyword (note that method which calls SomeMethod() should also be refactored this way),\n- we should not operate with ICommand interface but rather with DelegateCommand class instances so we can call public Task Execute() method.\n. ",
    "Willjobs94": "I want to do this, but I don't get it, how and where do I need to implement INavigationPageOptions ?\n. Yes, after applying the fix I can open the project without problem in both Xamarin Studio and Visual Studio\n. IApplicationLifeCycle +1. ",
    "xied75": "Thanks @dvorn I had a read on that issue, it seems very old and closed, so still a WIP?\n. @brianlagunas understood. But is my thinking in the correct direction?\n@briannoyes my world, you used to fly the Tomcat, got any photos with it? :)\n. ",
    "hpcsc": "It seems like something specifically in my current project that causes this issue with upgrading to 6.2. I cannot replicate it when creating a new project.\nBut it's obvious that it's the issue when upgrading Prism to 6.2 because when I downgrade it to 6.1, everything's working again.\nFor the view model, I setup AutofacBootstrapper to inject it into view code behind and code behind sets it to data context. I don't see anything really suspicious about that. Doing the same in a new project doesn't have any issue\nI'm still trying to narrow down the issue, will update again when I have some progress\nAnother strange thing is: even if I put this call to VerifyAccess() in front of the line RaiseCanExecuteChanged() in the setter, it still throws the exception at RaiseCanExecuteChanged() line, meaning VerifyAccess() is ok\nprivate string _contact;\npublic string Contact\n{\n    get { return _contact; }\n    set\n    {\n        _contact = value;\n        OnPropertyChanged(() => Contact);\n        Dispatcher.CurrentDispatcher.VerifyAccess();\n        VideoCallCommand?.RaiseCanExecuteChanged();\n    }\n}\n. thanks, I managed to fix the issue.\nIn our project, we used Microsoft Speech SpeechSynthesizer class and create an instance of it in view model constructor, so I guess it's \"owned\" by UI thread. When there's something triggering it from UI thread, it causes the exception (although I'm still not sure why it's triggered when the textbox text is changed). \nWe fixed it by creating a singleton wrapper around that synthesizer and initialise it in a background thread (Task.Run(...)). May not be the best way, but it works for now\n. ",
    "nickkazepis": "Sorry for mu absence the last few days, I didn't have access to the internet.\nThe initial idea behind deriving from delegate command was for logging.\nI wanted to create a derived class so that I could perform some reflection to acquire the caller's name for logging purposes. I overrode the \nExecute(object parameter)\nas @dvorn said (the generic Execute did not fire so I had to override the object parameter version) but I ended up at a dead-end because of the way the constructor encapsulates the argument into an anonymous lambda during base initialization\n: base((o) => executeMethod((T)o), (o) => canExecuteMethod((T)o))\nso that the caller was always the constructor. Since i didn't want to play with the StackFrames (not very safe) I ended up deriving from delegate command and doing something similar when passing the constructor arguments to the base, injecting some logging logic which in turn gets re-encapsulated by the aforementioned base constructor anonymous lambda. I just wanted to share the actual use case scenario in case it helps.\n. This is inspirational at least. I understand the trouble with breaking changes but on the other hand nothing can truly evolve without breaking backwards compatibility at some point. Sooner rather than later is my personal preference. Since I am the author of #732 do you have any fresh advice? For the time being I still go by deriving from DelegateCommand and injecting logging functionality by passing and overloaded Action to the base constructor. I don't like this approach. I would like to have access to _canExecute and _execute members from DelegateCommandBase so that I could appropriately manipulate them on demand. Ultimately I would like something more modular, for example I would like to have add-on functionality. Something like new DelegateCommand(..., ...).AttachLogger() and then maybe attach something else or detach the logger or have more freedom in selecting the BeforeExecute and AfterExecute Actions that I would like to invoke... I would love to contribute If I can do so and If somebody could point me in the right direction...\n. This might be a totally different subject but I'm going to give it a try anyway since I'm not 100% sure it goes off scope of this suggestion. I would like to be able to observe properties of the object being passed as the DelegateCommand's argument. For example, I could declare a DelegateCommand which takes a CanExecute and an Execute both with an argument of type  that they can work on, however I would like to be able to observe a property of that argument to refresh the CanExecute. For example ... new DelegateCommand(..., ...).Observes( (CustomType ct) => ct.Property );\nFinally, I have two more questions, why pressing a button which binds to a command does not refresh the CanExecute of the button? I end up pressing the button, nothing happens because the CanExecute returns false but the button does not get deactivated until I explicitly call RaiseCanExecuteChanged().\nAnd Secondly why all those anonymous lambda while passing arguments to the base constructors and why protected readonly Func<object, Task> _executeMethod; has been made readonly?\n. ",
    "txk103": "I have removed all references to MvvmHelpers and still experience the same issue, the app is killed\n. The navigation works with another blank, vanilla content page. Probably a component....\n. The is somewhat solved but navigating to pages does not work..\nIt came down to StaticResource. \nTo reproduce\nNavigating a ContentPage, with only a Label\nThe following works:\n<Label Text=\"This is text\" VerticalOptions=\"Center\"  HorizontalOptions=\"Center\" />\nAnd the following errors:\n<Label Text=\"This is text\" VerticalOptions=\"Center\" Style=\"{StaticResource NavigationBarTitleStyle}\" HorizontalOptions=\"Center\" />\nSecondly, \n<Label Text=\"This is text\" VerticalOptions=\"Center\"  HorizontalOptions=\"Center\">\n    <Label.GestureRecognizers>\n      <TapGestureRecognizer Tapped=\"OnTapped\" />\n    </Label.GestureRecognizers>\n  </Label>\nThe navigation also fails.\n. Thanks Brian, \nDidn't call InitializeComponent(); from the OnInitialized() handler in App. \nKeep up the good work!\n. ",
    "homerokzam": "Were you able to use the SlideOverKit library along with Prism?\nI can not. I have a Page that implements IMenuContainerPage, but it does not display anything.\nThanks,\nHomero\n. ",
    "ENikS": "@brianlagunas This is rather unfortunate. Could you provide any rationale for this decision?\nI think you are making a mistake not supporting IOC that is forward runner in cross platform world. If contributed code is not up to standards it could be improved but completely ignoring new platform is irresponsible.. I understand your point but considering that MEF2 is THE ONLY officially supported IOC in Xamarin and UWP it makes MEF2 special case.\nIf I want to contribute the code, assuming code above is not good, what would be my steps?. What are your plans for IOC in Windows 10 UWP, and Xamarin Forms?. One with title: \"http://prismlibrary.com/\". It points to http://prismlibrary.github.io/WKloZ/ and  shows 404 for me.. I would wait on this one. It might change significantly.. The package will have .NET 4.0, 4.5, 4.7, and Standard 1.0 so you don't have to go with the lowest denominator. I would wait with integration though because I am planning some work on the container's engine before releasing it. \nCommonServiceLocator is no longer part of the core container and assembly no longer references it. You could have your own implementation of the adapter and could use either 1.0.3 or 2.0.0 or both if you want.\n. I released beta2. I think it is stable enough for you to start integration.\nRelease notes\nIt would be nice if you could give some early feedback before I move to 5.0.0 release\n@dersia  According to MS blog UWP is now supports Netstandard 2.0 API. Please let me know if you can reference Unity from the latest UWP.. @dansiegel Is there a question? You do understand that you do not give me any info to answer intelligently? \n- What tests\n- What errors\n- Why it works in net 4.7. Sent you PR with the fix. My only concern with this approach is organizations with high security requirements. Their onboarding process for packages requires a lot of hustle and verifications. Including all dlls into package eliminates most of it. Here, in NY these are majority.\nI am not opposed to the idea of referencing packages I just don't know what is best. Can you explain your reasons why you think it is not a good idea to packaging DLLs as opposed to referencing them?. If you target individual packages as I recommended in PR you should be just fine. \nI am thinking about companies like Wells Fargo or Morgan Stanley, they all use Unity and for them reference approach might not work.\nAgain, you might be right and solution you are proposing might be better. I just need more research on the subject to make a decision.\n. Would you do a little experiment for me? Grab nuspec file in Unity repo and change it to references. See if it solves your issues?\nI have a suspicion it is MSBuild that causing the problem. It does not know what DLLs to copy to the test bin directory and changing it to REFs will not make a difference.. @brianlagunas You don't have to tell me, I have intimate knowledge of the process. Worked for them both ;).. I have a feeling this issue with referencing DLLs from composite libraries is the reason Microsoft went the same route with .NET itself. Now every DLL is separate package. . If you have an idea how to make it better please let me know. \nI put it there based on my, somewhat limited, best judgment but codebase is huge so it is a bit hard for one person to think about every scenario and type.  \n... or better yet, send a PR. I will add RegisterSingleton<,>(name) in next patch release.\n\nUnity has so many installs, making such a broad changes to objects locations and namespaces is really going to be a painful experience\n\nMost of us use ReSharper for that purpose, it makes refactoring no brainer (Visual Studio 2017 does it too). Out of about 15K new downloads of v5.1.2 you are the first to complain about it. \nMy offer still stands, if you/Prism team think experience could be improved by moving types from namespace to namespace I am willing to consider.\nHaving flat Unity namespace (this is what you advocating) effectively prevents extending any of these types without breaking compatibility with previous version. It makes LTS maintenance for packages impossible and defeats the purpose of having Abstraction assembly. . I guess we are on the same page than.. The Mock types need to be updated to pass these tests. IUnityContainer has changed.. I see you are officially on v5.  Congrats!. I though I would add this to resolve discussion about composite vs reference packages. I had this issue filed with another project for exactly the same problem. They followed reference strategy and made whole package completely unusable behind firewall.\nSo, long story short: Unity will be all inclusive package with all core DLLs packed into it.. Added lineup of extension methods for registering Singletons so you don't have to include additional namespaces. @brianlagunas @dansiegel  Any estimate on release date? \nHere, at MS we are doing major upgrade to the framework but we couldn't upgrade Unity without Prism.. Thank you, next week works for us. \n. @brianlagunas @dansiegel  Hate to be \"Are we there yet?\" person but have no choice.\nThe company's framework team moved on with preview version and now stuck with it unable to release.  Is there anything we can help you with to expedite the release? Something we could send you a PR for?. Just making sure. My office got very high hopes for the release. Any estimate on WPF 7?. Brian, it is not MY company, I just work there :)\nLet me make one thing clear, I am not your enemy here. I like Prism and I use it everywhere I can and because of that I opened this issue. I would like to keep using it...\nThe decision to use or stop using the library is not up to me or even the team I work for, it is budget thing for the whole company. Think about economics of this change:\n\nEvery single module in the world needs to be manually changed (however simple it might be)\nEvery single method has to be accompanied with unit tests\nEvery single change has to be regression tested (manually tested for a lot of projects)\n\nThis creates unreasonable burden for all users of the library. The bigger the user, the more expensive it is. We are talking about hundreds of millions spent on this change worldwide and for WHAT?\nOriginal IModule was brilliant in its simplicity and robustness. It was completely agnostic of container, platform, etc. It would easily accommodate any 'Resource Locator Pattern' you could throw at it, including new Prism one.\nI am all for change and progress and I am not criticizing you for breaking the interface, but this particular change is too expensive for the benefits it provides. \nI would like to propose a compromise: Lets have a discussion with wider audience of users on this issue, after all, we are a democracy here, and get more opinions on this matter?\n. But we do want to use the latest. We just don't want to pay so much for so little benefit.\nPrism is a business library and economical considerations should be part of the equitation as well as style.. @dansiegel You concentrating on me complaining about the change, breaking Unity, and simplicity of the change but you missing fundamental point: This change is prohibitively expensive to implement. Like in real money expensive, \nIt is not a namespace change, or rename, where Resharper or cut and paste can help you. This is required manual change for every single module with all the testing to follow...\n\nI would say you're really making a bigger issue of this than it ought to be. All you really need is to add two lines of code to your modules and they'll work just fine.\n\nThis is not how it works in real world. You have to follow the rules and established procedure.\nAs for breaking Unity, I really had no choice in all these changes. I tried as hard as I could to preserve original contracts. I could go ever every single change with you and provide justification for each and every one. I do not think Unity breaking changes could be compared with IModule.. @dansiegel The irony does escapes me, what am I missing?. ",
    "muhammetsahin": "I solved by myself.\nI forgot register viewmodel\nI added this code and work well:\n`   var builder = new ContainerBuilder();\n```\n        builder.RegisterType();\n    builder.Update(Container);`\n\n```\n. ",
    "akamud": "So how was this addressed exactly? What API do we have to handle theses cases?\nI'm on 6.3 (stable) and this still doesn't work.. @brianlagunas doesn't work for me. What I'm doing is:\nI navigated to NavigationPage/ViewA. Then, from ViewA (inside the NavigationPage) I call Navigate to ViewB. Then from ViewB I go back. ViewA.NavigatedTo does not get called.\nLooking at the source code that (should have) fixed this, my assumption is that the magic is in the NavigationPageSystemGoBackBehavior, right? \nCould this be happening because ViewA is a ContentPage calling ViewB which is also a ContentPage?\nEdit: I'm trying to work on an isolated repro. @brianlagunas I think I found the culprit... I have a BaseNavigationPage that inherits from IconNavigationPage (which is a NavigationPage after all)... \ncsharp\npublic partial class BaseNavigationPage : IconNavigationPage\n    {\n        public BaseNavigationPage(Page page) : base(page)\n        {\n            InitializeComponent();\n        }\n    }\nso the NavigationPageSystemGoBackBehavior does not get applied, because it is not a NavigationPage directly. This is the check that fails.\nMakes sense?\nIf that is the case, I could just inherit from PageNavigationService and override the ApplyPageBehaviors, right?. I was doing exactly that :)\nNow I can confirm that adding the behavior to the BaseNavigationPage ctor worked. \nDo you think the check should be changed to consider the whole inheritance? I could send a PR if you think that is a change that makes sense.. Indeed, the is should not be a problem.\nBut for some reason the Behavior was not applied. Checking it at the constructor shows the Behaviors are empty, and adding it fixed the problem.. For reference, the IconNavigationPage doesn't do much.. From my understanding this refactor would be harmless to existing codebase and will then be following Autofac best practices.\nI will write some tests and send a PR.\nOn a side note: I just cloned the repo and the XF.Autofac tests are broken because \"Xamarin.Forms Init()\" is not called. Do I have to do something else other than just cloning the repo?. Is this documented somewhere that I missed? I think it is important to somehow document this for new contributors. . After taking a closer look at the code I saw that the ConfigureContainer is an abstract method, so we can't really make Autofac register everything at startup without calling this.\nPrism would have to change this to make Autofac configuration work as suggested by the documentation. Now I'm not sure if this is really needed or worth the change... opinions?. I don't know :/\nI'm not an Autofac expert either, so I'm not sure if this actually causes an unexpected behavior or if it is just a \"best practice\" to follow.. ",
    "ruaan": "@brianlagunas For a big project whats the best to use. autofac or unity ? . @brianlagunas Killing me here. Thank you. Sorry, I took over the thread. . ",
    "jacksonveroneze": "Hello, for the problem pointed out in this issue, do you have a permanent or temporary solution?\nIn my case, when I press the back button of title bar, I need to refresh the listview of the previous page.. Sorry @brianlagunas \nMy beginner's knowledge leaves me limited still. I'm using version 7 of the prism. But behavior is the same. I did not understand what should be done.. @WebDucer \nHello, I have the same problem and have not yet found a solution for it.\n. ",
    "Nk54": "Hello,\nWhy don't Prism for XF has its own NavigationPage ?\nThis is what I came with :\n`\n    /// \n/// NavigationPageExtended allows the viewModels which implement INavigationAware to still work with native navigation (GoBack button).\n/// </summary>\n/// <remarks>\n/// Works only with Navigated methods. Navigating won't.\n/// </remarks>\npublic class NavigationPageExtended : NavigationPage\n{\n    public NavigationPageExtended(Page root) : base(root)\n    {\n        Behaviors.Add(new Prism.Behaviors.NavigationPageSystemGoBackBehavior());\n    }\n}\n\nLoving Prism a bit more each day I use it :) you did an awesome framework.. Yeah you guys are right and I thought about it too. But that's two useless bracket when 90% of the time you'll end up with only one parameter :D but I'm ok with your answer.\nIt's just I have the bad habit of writing stuff like thatnew NavigationParameter() {{\"a key\", \"an object\"}};`\nYou could argue that's 2 useless parenthesis.\nMaybe I should correct this habit instead and trying to change a framework :)\nKeep up the good work. Thanks for your fast answer to both of you.\nHave a good weekend !. ",
    "vulcanlee": "I am sorry\nI find my problem is not using absolute Uri\n_navigationService.NavigateAsync(new Uri(\"http://www.brianlagunas.com/MainPage\", UriKind.Absolute);\nSo, I close this issue.\n. Following is the .csproj\nXML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"4.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <PropertyGroup>\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\n    <Platform Condition=\" '$(Platform)' == '' \">AnyCPU</Platform>\n    <ProductVersion>8.0.30703</ProductVersion>\n    <SchemaVersion>2.0</SchemaVersion>\n    <ProjectGuid>{BE0624F1-7930-439B-A633-DE63C4A4FC8B}</ProjectGuid>\n    <ProjectTypeGuids>{EFBA0AD7-5A72-4C68-AF49-83D382785DCF};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>\n    <OutputType>Library</OutputType>\n    <AppDesignerFolder>Properties</AppDesignerFolder>\n    <RootNamespace>BlankApp1.Droid</RootNamespace>\n    <AssemblyName>BlankApp1.Android</AssemblyName>\n    <FileAlignment>512</FileAlignment>\n    <TargetFrameworkVersion>v7.1</TargetFrameworkVersion>\n    <AndroidApplication>True</AndroidApplication>\n    <AndroidResgenFile>Resources\\Resource.designer.cs</AndroidResgenFile>\n    <GenerateSerializationAssemblies>Off</GenerateSerializationAssemblies>\n    <AndroidResgenClass>Resource</AndroidResgenClass>\n    <AndroidManifest>Properties\\AndroidManifest.xml</AndroidManifest>\n    <MonoAndroidResourcePrefix>Resources</MonoAndroidResourcePrefix>\n    <MonoAndroidAssetsPrefix>Assets</MonoAndroidAssetsPrefix>\n    <AndroidUseLatestPlatformSdk>true</AndroidUseLatestPlatformSdk>\n    <AndroidStoreUncompressedFileExtensions />\n    <MandroidI18n />\n    <JavaMaximumHeapSize />\n    <JavaOptions />\n    <NuGetPackageImportStamp></NuGetPackageImportStamp>\n  </PropertyGroup>\n<PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\n    <DebugSymbols>true</DebugSymbols>\n    <DebugType>full</DebugType>\n    <Optimize>false</Optimize>\n    <OutputPath>bin\\Debug</OutputPath>\n    <DefineConstants>DEBUG;</DefineConstants>\n    <ErrorReport>prompt</ErrorReport>\n    <WarningLevel>4</WarningLevel>\n    <AndroidLinkMode>None</AndroidLinkMode>\n  </PropertyGroup>\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\n    <DebugSymbols>true</DebugSymbols>\n    <DebugType>pdbonly</DebugType>\n    <Optimize>true</Optimize>\n    <OutputPath>bin\\Release</OutputPath>\n    <ErrorReport>prompt</ErrorReport>\n    <WarningLevel>4</WarningLevel>\n    <AndroidManagedSymbols>true</AndroidManagedSymbols>\n    <AndroidUseSharedRuntime>false</AndroidUseSharedRuntime>\n  </PropertyGroup>\n  <ItemGroup>\n    <Reference Include=\"Mono.Android\" />\n    <Reference Include=\"System\" />\n    <Reference Include=\"System.Core\" />\n    <Reference Include=\"System.Xml.Linq\" />\n    <Reference Include=\"System.Xml\" />\n  </ItemGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Xamarin.Forms\" Version=\"2.5.0.122203\" />\n    <PackageReference Include=\"Xamarin.Android.Support.Design\" Version=\"25.4.0.2\" />\n    <PackageReference Include=\"Xamarin.Android.Support.v7.AppCompat\" Version=\"25.4.0.2\" />\n    <PackageReference Include=\"Xamarin.Android.Support.v4\" Version=\"25.4.0.2\" />\n    <PackageReference Include=\"Xamarin.Android.Support.v7.CardView\" Version=\"25.4.0.2\" />\n    <PackageReference Include=\"Xamarin.Android.Support.v7.MediaRouter\" Version=\"25.4.0.2\" />\n    <PackageReference Include=\"Prism.Unity.Forms\" Version=\"7.0.0.396\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Compile Include=\"MainActivity.cs\" />\n    <Compile Include=\"Resources\\Resource.Designer.cs\" />\n    <Compile Include=\"Properties\\AssemblyInfo.cs\" />\n  </ItemGroup>\n  <ItemGroup>\n    <None Include=\"Resources\\AboutResources.txt\" />\n    <None Include=\"Assets\\AboutAssets.txt\" />\n  </ItemGroup>\n  <ItemGroup>\n    <AndroidResource Include=\"Resources\\mipmap-hdpi\\ic_launcher.png\" />\n    <AndroidResource Include=\"Resources\\mipmap-mdpi\\ic_launcher.png\" />\n    <AndroidResource Include=\"Resources\\mipmap-xhdpi\\ic_launcher.png\" />\n    <AndroidResource Include=\"Resources\\mipmap-xxhdpi\\ic_launcher.png\" />\n    <AndroidResource Include=\"Resources\\mipmap-xxxhdpi\\ic_launcher.png\" />\n  </ItemGroup>\n  <ItemGroup>\n    <None Include=\"Properties\\AndroidManifest.xml\" />\n  </ItemGroup>\n  <ItemGroup>\n    <AndroidResource Include=\"Resources\\layout\\Tabbar.axml\" />\n    <AndroidResource Include=\"Resources\\layout\\Toolbar.axml\" />\n    <AndroidResource Include=\"Resources\\values\\styles.xml\">\n      <SubType>Designer</SubType>\n    </AndroidResource>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\BlankApp1\\BlankApp1.csproj\">\n      <Project>{A682884C-CB44-4A89-B752-27BB634E0ABE}</Project>\n      <Name>BlankApp1</Name>\n    </ProjectReference>\n  </ItemGroup>\n  <Import Project=\"$(MSBuildExtensionsPath)\\Xamarin\\Android\\Xamarin.Android.CSharp.targets\" />\n</Project>. @dansiegel\nYes, I have Android 8.1 SDK installed. I have removed Android 8.1 SDK and the problem is disappeared.\nThanks for your help.. ",
    "JamesPetras": "You are right. It is working. \nI didn't setup ViewModel correctly \nSorry for the false alarm\nCheers\n. ",
    "alexshikov": "I would love to use this improvement in my current project. When is it expected to make a new NuGet release?\n. That helped, thanks!\nThough removing reference was not obvious. It's specified in Directory.Build.props https://github.com/PrismLibrary/Prism/blob/9d05095de2275898711b12c73ec157a4038649db/Source/Directory.Build.props#L62-L64. @dansiegel indeed, VS Mac has limitation and sometimes the project simply can't be built at all. Though it worth to try in some cases to find a workaround and this one actually works! :)\nAs for the not obvious comment. Just decided to mention a solution if other struggle with that too.\nThanks for the support. Hope one day VS Mac be same usable as VS Win.. ",
    "JarJarBinkz": "@bartlannoeye \nIt would be nice if a prerelease would be available in 3 months, because our software will be released early next year.\n. ",
    "wakemaster39": "I ran into this problem as well and put in a work around, but a pre release to work around it is always appreciated.\n. @bartlannoeye, the second you mention this is the default behavior it all makes sense now about what was going on. Just looking over the basics. \nThe point of assigning DataContext to new object was to not have the parents context assigned, thanks for helping me find the mistake. . ",
    "ileonidmas": "Dear Brian,\nare there any news about next major release?\nLeo. Thank you! Now it works like a charm). ",
    "rhowes": "Or is this just a Xamarin problem of not having a nullable TimePicker?\n. Ok - thanks for prompt response. What would be a really good solution would be to have access to the NavigationParameters in the constructor... I tried using the EventAggregation but settled for making my own controls that don't display anything for null/default values.\n. ",
    "gsfreema": "Thanks for the quick response and the bugzilla link.  You're the man!\n. ",
    "hardcodet": "In case you were not aware: I just noticed that when I do deep navigation with a root navigation page, the order in which the Pushed event on the navigation page is firing (and thus the CurrentPage property is set) is being reverted. So if my stack is:\nHomePage -> FooPage -> FooDetailsPage\nI end up with the following event order:\n1: Pushed: FooDetailsPage (is NavigationPage.CurrentPage)\n2: Pushed: FooPage (is NavigationPage.CurrentPage)\n3: Pushed: HomePage (is NavigationPage.CurrentPage)\nIs this Xamarin, too? Let me know if I should post this onto the Bugzilla ticket you created.\n. I'm not sure DelegateCommand is broken because the synchronous execution method doesn't catch a async event. Of course it doesn't (and it shouldn't!). In the end, ICommandis trival, and DelegateCommandis supposed to make stuff easy for the developer to handle all those common cases. Just as much as I want DelegateCommand<T>(and don't care about corner cases where a cast may not be working - it's never been an issue for me in reality), I just want it to simplify the execution of async code.\nAs such, I accept the responsibility of having to handle exceptions in my command handlers - so async voidwould do. However, in case of an unexpected exception (for other developers - I like never ever write buggy code of course ;), it would be nice if the framework would support me. That may go as easily as setting up something static like this:\nDelegateCommand..BubbleAsyncErrors(failedTask => { myLogger.LogException(t.Exception));\nYou could also bake that into a command instance (with potential fallback to a global exception handler):\n```\nICommand cmd = DelegateCommand.Create(OneAsync, HandleUnexpectedError);\nICommand cmd = DelegateCommand.Create(TwoAsync, HandleUnexpectedError);\nprivate async Task OneAsync() { ... }\nprivate async Task TwoAsync() { ... }\nprivate void HandleUnexpectedError(Exception e) { / display generic error on UI or smth / }\n```\nOf course, that just helps me to avoid writing repetitive boilerplate code. But that's what DelegateCommandis IMO.\n(OTOH, one could argue that baking your custom delegate command like this should be fairly easy, too, even on top of the existing simpler model.)\nJust my 0.02$\nPhilipp\n. Well I ended up just subclassing the view model base class and supply that explicit empty string. It feels like a hack though, and I can't fire the event of the base class from a derived one. Maybe provide something explicity such a FireAllPropertiesChanged?\n. I would agree if the attribute wasn't there - R# rightfully complains about the call with an explicit value.\nAnyway, the issue will be a no-brainer for me once/if we get the new OnNavigatingToAPI that allows me to set up my view models before any bindings take place.\nKeep up the good work!\n. Yeah, an Init call should happen after everything else has been setup, but before the view model is being connected to the view (by means of setting the BindingContext). This ensures proper behavior and makes initialization very clean - and it's quite a simple pattern.\nI cannot init the VM in the constructor because I don't have the navigation parameters at this time. And the update of the bindings in OnNavigate is not time consuming (just setting a few properties), but still visible. Also, it requires me to fire a property changed event in order to refresh all bindings because I'm basically too late to the party ;)\n. That looks just perfect! Thanks for the pointer joacar :)\n. The issue is that if you navigate from page1 to page2, and page1 doesn't have a navigation header, then the navigation header of page2 is being displayed on top of the content of page1 for like half a second until page2 is loaded. As mentioned, OnNavigatingTo doesn't make a difference.\nI think it's a Xamarin issue though, there's a similar bug open for XF on iOS.. Additional observation: If I then move from Page1 to Page2 (so my navigation stack would be /WrapperNavigationPage/HomePage/Page1/Page2) and then press the back button to get back to Page1, the Title is correct.. That was quick! Thanks for the clarification Brian.\nAs for the workflow: I simplified the example. The user doesn't click anything that says \"back\", but simply saves some edits, and I don't want the editor in the navigation stack after that. The editor page can be invoked from a number of places, so the simplest thing was to just pop it so far.\nI can inject the desired navigation request (go back or go to //HomePage/DetailsPage) into the EditorPage though, that should be fine.. Yes, absolute URIs is where I went to.\nIf I think of that in terms of a generic scenario: That would be like working with relative paths in order to not reset the stack parents. So instead of going to //ROOT/NEWTARGET, I would be going to ../NEWTARGET, which would basically pop the current view and attach NEWTARGET to wherever I am in the stack, but not touch the parent pages.. I see. I don't know the prism internals, but I assume you don't have an abstraction of the current navigation stack? Otherwise, the fix might be easy and I could quickly do a PR if you point me in the right direction.. Oh, it's noteworthy that if I use an absolute URI instead of a relative one, the headers are there.\nSo this works:\n    /MasterDetailPage/NavigationPage/HomeContentPage/Foo/Bar\nThis doesn't:\n    Foo/Bar. No, that's actually another bug (which I'm also seeing):\nThis results \"only\" in the wrong title in the header (the bug you linked to):\n/MasterDetailPage/NavigationPage/HomeContentPage/Foo/Bar\nThis results in the header missing completely, so there's also no means to pop the view on iOS:\nFoo/Bar\n. I know, but there is a Nav Page in my stack. I'm starting with this stack:\n/MasterDetailPage/NavigationPage/HomeContentPage/\nIf I navigate to \"Foo\" and then from \"Foo\" to \"Bar\", I end up with the header. If I navigate directly to \"Foo/Bar\", the header is completely missing. In both case, my stack hierarchy is \n/MasterDetailPage/NavigationPage/HomeContentPage/Foo/Bar\n(which is also reflected by pressing the back button when I'm on \"Bar\". This gets me back to \"Foo\", which has a navigation header. And another back press get's me to \"Home\"). Damn, that did the trick. I would have never thought the last view in the stack would be displayed modal. Thanks!. Correction: I didn't check the UI right. Actually, this is an even worse bug: If I navigate to \"Foo/Bar\", I end up with two times Foo on the stack. The top-level Foo is initialized properly. When I pop it, I get to a non-initialized Foo (no bindings executed etc.). Popping that erroneous Foo gets me back to where I came from.\nI guess I'll stick to absolute navigation for now and simply recreate the root views every time.. Works like a charm - thanks!\nI'd second to put this in prominently, since every dev who is working with Prism currently will have to deal with that sooner or later - maybe put it in the docs, and link to the docs from the Obsolete comment?. I didn't know about CreateNavigationService - I was mostly concerned about just getting an instance through DI (since I think Prism has different instances for each view model). Ended up with a similar implementation - thanks!\n    public static INavigationService AppNavigationService => (Current as App)?.CreateNavigationService();.\n",
    "davorz": "Any ideas how to overcome this until the bug is fixed?. Deep linking is kinda mandatory for me ... I have companies that are connected to other companies, and so I have to go deep link if I do not want to fill my stack too much :-( \nAm I missing the point here, can I destroy pages until certain Uri and then build again or I have to go from root every time?\n\n. I see. Problem is it's not just title, the whole toolbar is shown from diferent page, in this case the MainPage. What do you think about poping the pages until SearchTab/SearchCompany and then pushing the new Company on the stack. This could result in pop animation for every page but still ...\n. ",
    "mrkhangtran": "Thank you everyone for your support. Sorry for cannot get back earlier.\n@dansiegel, @brianlagunas Yes I believe this is related to #712 \n@adrianknight89 I eventually changed my page structure to TabPage -> NavPage -> ContentPage and the OnNavigatedTo now works as expected\n. ",
    "Hedego": "I am working on a xamarin forms and mvvmcross project. I have a tabbed page which has two tabs. The first tab is expected to show a static list of activities which are defined in a service class that inherits the Iservice version of the class. I used  in the first tab but I am not sure How I Can Show the data in the tab.  . ",
    "mikegottlieb": "@brianlagunas I understand your comment, but I'm wondering how this ordering makes sense when registering instances rather than just types. Should I be registering instances somewhere other than in RegisterTypes?\nMy scenario is that my platform specific code creates an instance of the object that manages session/authentication information. This is because it has to interact with device specific secure storage. My PCL has my API client that utilizes my session/authentication object.\nThe same is true for my logging, telemetry, geolocation, and push notifications managers. All need platform specific implementations, but are utilized by common code in the PCL. Prior to updating to Prism 6.2 I did my own implementation for registering platform specific types before shared types in my bootstrapper. My common code was able to call Resolve to get the instance registered by the platform specific code and pass that to new singletons that it was constructing and registering.\nWhat is the intended way to handle this scenario in Prism 6.2?\n. @brianlagunas I understand that, but what about registering instances that depend on each other? It might be clearer with code.\nHere is my initializer:\n```\npublic class iOSInitializer : IPlatformInitializer\n    {\n        public void RegisterTypes(IUnityContainer container)\n        {\n            container.RegisterInstance(LogManager.Instance);\n            container.RegisterInstance(new PlatformInfo());\n            container.RegisterInstance(new SessionProvider());\n        TelemetryService telemetryService = new TelemetryService();\n        telemetryService.Configure();\n        container.RegisterInstance<ITelemetryService>(telemetryService);\n\n        LocationProvider locationProvider = new LocationProvider(telemetryService);\n        container.RegisterInstance<ILocationProvider>(locationProvider);\n\n        container.RegisterInstance<INotificationsService>(new NotificationsService());\n        container.RegisterInstance<ITripLoggingReminder>(new TripLoggingReminder());\n        container.RegisterInstance<INativePlacesApi>(new NativePlacesApi(locationProvider));\n    }\n}\n\n```\nAnd here is the RegisterTypes implementation in my PrismApplication\n```\nprotected override void RegisterTypes()\n        {\n            this.SessionProvider = this.Container.Resolve();\n            this.LocationProvider = this.Container.Resolve();\n            this.TelemetryService = this.Container.Resolve();\n            this.NotificationsService = this.Container.Resolve();\n        ILogManager logManager = this.Container.Resolve<ILogManager>();\n        IPlatformInfo platformInfo = this.Container.Resolve<IPlatformInfo>();\n\n        this.StatsProvider = new StatsProvider(logManager);\n        this.Container.RegisterInstance<StatsProvider>(this.StatsProvider);\n\n        ApiClient client = new ApiClient(platformInfo, this.SessionProvider, logManager);\n        this.Container.RegisterInstance<ApiClient>(client);\n\n        this.AuthenticationService = new AuthenticationService(client, this.SessionProvider,  this.TelemetryService, logManager);\n        this.Container.RegisterInstance<AuthenticationService>(this.AuthenticationService);\n        this.AuthenticationService.Initialize();\n\n        this.Container.RegisterTypeForNavigation<NavigationPage>();\n\n        this.Container.RegisterTypeForNavigation<HomeView, HomeViewModel>();\n        this.Container.RegisterTypeForNavigation<MasterDetailHomeView, MasterDetailHomeViewModel>();\n\n}\n```\nAs you can see the platform code needs to register a number of singletons that are used by singletons in the shared code. The singletons in the shared code cannot be constructed without retrieving the platform specific singletons first. That is not possible because the platform specific RegisterTypes method is called 2nd.\nIs there a different way to do this that is supported? I understand that the current implementation allows you to use services from the PCL in the platform specific code and how that might be useful. However, the reason I use Xamarin Forms is so that I can do minimal work in the platform specific realm. I tend to build small isolated components to use to interact with platform specific APIs and then surface those up to the common code. That means that most of my platform specific types have few dependencies to inject, but my PCL ones depend on all of those platform specific types.. I was using the RegisterTypes step to register instances simply because of the similarity in naming convention and duty of \"registering\" things. I hadn't seen any documentation that suggested a more appropriate home.\nI am setting those properties in App.cs because they are used in App.cs. For other services that I don't use in App.cs I don't hold a reference in a property and I just use DI.\nI don't think it is weird to be using RegisterInstance. I have about 20 or so singletons in my application. These are objects that communicate with different APIs whether they be on my servers or in different libraries on the phone. Since they are singletons calling RegisterInstance is how I make sure that only one instance is used through all of my ViewModels. Having multiple instances of these objects would be both expensive and dangerous. This is why the RegisterInstance method exists.\nI think what you are trying to say is that RegisterTypes should only be used to register types that are created by the container and that OnInitialized is the place to create singletons and register them. That is fair and that was what I was trying to understand about the design of Prism.\nWhen you responded to @dersia earlier you said\n\nThis is so that your platform specific services can utilize the services from the PCL.\n\nI was confused because my \"services\" are all singletons and are therefore registered via calls to RegisterInstance. When I read your response I thought you had made the decision that it was more common to implement a service in the shared code and utilize it in the platform code. That was interesting to me because my code tends to work in the opposite direction and it has felt really natural to do it that way.\nSo it seems like the right way for me to accomplish what I need is similar to what I used to do. During initialization I need my common application to tell my platform specific code to new up its singletons and register them to the container. That should be easy to whip together.\nThanks for the clarification!\n. I was not aware of the ContainerControlledLifetimeManager thanks for the tip.\nUnfortunately I think there is no perfect answer for the direction of dependencies issue and agree that it is best to pick a direction and design around the constraint. I kind of hit this not in Prism/Unity relating code, but in app startup. To use just iOS as an example my AppDelegate does some work to initialize itself and create my PrismApplication, then my PrismApplication is created and does some initialization, then it has to call back into my AppDelegate for some more platform specific work that utilizes parts of the PrismApplication.\nI do it through events and delegates to avoid hard coupling, but it still isn't pretty. I'm hoping to eventually clean it up.. lol to me it seems like it needs to be cleaned up. I'll try to put something together.. I don't have a sample ready yet, but I finally worked around the main issue I was trying to address that prompted me to upgrade to Prism 6.2 and I thought it might be worth sharing what I did because you either know a better way or want to take this case into consideration for future support.\nI develop a Xamarin Forms app that runs on iOS and Android. My app makes use of geofences which means it does background work. iOS and Android have very different takes on background execution. On iOS everything is easy because your whole application will be started if a background event takes place. Therefore I know that my services are all initialized and ready for use.\nAndroid presented problems. Xamarin Forms is designed around having a single Activity and that is meant to be the home of your initialization code, but that doesn't work for background scenarios because the activity won't be launched. I thought Prism would help and I would be able to create my PrismApplication in the background, but that failed because I wasn't calling Xamarin.Forms.Forms.Init(). That call is required and it takes both a Bundle, which I didn't have, and the Context of the current Activity, however no Activity was launched.\nSo I built a singleton that I named ServiceStack. My ServiceStack creates the IUnityContainer. Then it has a method called RegisterServiceTypes(IPlatformInitializer initializer) that registers common services and calls RegisterTypes on the IPlatformInitializer. I call this method before constructing my PrismApplication and I don't pass an IPlatformInitializer to my PrismApplication anymore. The last bit was that I overrode CreateContainer in my PrismApplication to return the container of the ServiceStack. That way when the rest of the PrismApplication code runs to register views and initialize my application it all uses the same container.\nAfter doing that I was able to construct and initialize my ServiceStack in all of my Android background entry points and call the code I needed.\nIt works, and it isn't the ugliest thing I've ever seen but it does depend on a singleton that lives outside of the UnityContainer. If you guys have any feedback I would really appreciate it. When I have a second to breathe I'll put together a sample.. I access the device OS or use OnPlatform in the view model a decent amount. Same with BeginInvokeOnMainThread. I've found that there are a lot of minor differences that I need to account for when trying to make sure iOS and Android both look and feel native and a convenient way to do it is in the logic of a bound property so they end up in my view model.\n. Sorry, I worked around the issue and moved on to meet a deadline. I just came back to take a second look and this was probably just a mixup on my end.\nI am navigating to a TabbedPage/MasterDetailPage via absolute URL. The navigation events on the TabbedPage's ViewModel are firing as expected. The navigation events on the first page inside TabbedPage are not firing. However, since I did not explicitly navigate to that first tab I suppose that is to be expected right?\n. Yeah sorry, I've been too busy to get something together especially because my environment was seriously destabilized by trying to update to Xamarin Forms 2.3.4 and VS 4 Mac. This is definitely still and issue and is easily reproducible as soon as you have 6 or more pages as a child of a TabbedPage. Hopefully I can get an example together soon.. ",
    "digitalsigi": "Unfortunately, this didn't help, as this was already checked.\nAfter some thinking I started VS 2015 with /LOG option and found the reason:\n\n2752 ERROR\nExtension will not be loaded because an extension with the same ID 'Prism.TemplatePack.138e3411-ac97-4c11-8016-c27a831cba2e' is already loaded at C:\\USERS......\\APPDATA\\LOCAL\\MICROSOFT\\VISUALSTUDIO\\14.0\\EXTENSIONS\\KU5LQPCG.M04...\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0C:\\USERS.....APPDATA\\LOCAL\\MICROSOFT\\VISUALSTUDIO\\14.0\\EXTENSIONS\\41EPVU11.FAA\\\n\nNow, because of \"Prism Templates\" are disabled, I deinstalled extension and did a new install. Maybe something has not been cleaned up. Btw I observerd a similar issue with Prism Code Snippets, they seem to appear and disappear as they like.\nMay it helps to find the source of problem.\nTo continue my work I'll deinstall, delete the directories and reinstall. I hope it helps.\n. Very special, first I renamed one of the directories in above error message, no change. Then I deinstalled extensions, both directories disapeared ..., next I did a fresh download an install, viol\u00e1, it works.\nI guess -> its VS 2015 issue.\nAnyway, thanks for careing..\nJosef\n. ",
    "tboogh": "I tested adding an interface named INavigatingAware and added OnNavigatingFrom and OnNavigatingTo at line 52 to handle going back and at 345 for forward navigation. Seems to work fine, at least with a NavigationPage as root.\n. How about adding INavigatingAware and INavigatedAware while leaving INavigationAware as is for now until a major version change? Not pretty but it introduces the interfaces and doesn't break anything for now.\n. I completely agree with the points made in the discussion in that issue, making the methods async would be a very bad idea. The problem is that currently if information that is reciding in memory is passed along in OnNavigatedTo the animation is awaited before the viewmodel is updated. So the viewmodel is created with default values, page is created, push animation plays, data is updated and then the bindings are updated.\nHere it is illustrated in our current project:\n\n. You're right. I think it's out of habit from other frameworks (UIKit mainly)\n. Isn't that already handled by IConfirmNavigation?\n. Tested it and it worked great, thanks!\n. I think you should go ahead and make this a breaking change. I've been using the updated interfaces and it adds a missing piece to the navigation in prism for XF.\n. Possibly OnParentSet could be used as a mechanism for this. Only had time to run a test on a NavigationPage but the Parent property is set to null and the method called when the page is popped\n. ",
    "msangtarash": "I see OnNavigatingTo, but I wasn't able to find OnNavigatingFrom . ",
    "PenguinPero": "@dansiegel what if we want to intercept the navigation back button? Is there anything we could do there beside custom renderers..\nFor hardware back button we can create a base ContenPage and call some method on our BaseVM inside OnBackButtonPressed and handle navigation and confirmation\nBut when pressing the navigation back button the CanNavigate or CanNavigateAsync methods are not called, only OnNavigatedFrom is called (which also might not be useful if we want to handle navigation on the page before on the stack with OnNavigatingTo, not with OnNavigatedTo). ",
    "ingamx": "Hi. Are regions there already for UWP?. ",
    "Portikus": "Hi @SyntaxThemes, \nI know this issue is closed but I got the same wired behaviour with Autofac. \nThe solution for this is to declare your ViewModel instance as the Interface type and as the ViewModel type like:\ncsharp\nbuilder.RegisterType<MenuViewModel>().SingleInstance().As<IMenuManager>().As<MenuViewModel>();\nI write this for other developer who struggle with this.. ",
    "perssondan": "Thanks to @Portikus, this worked very well.. Hi,\nI'm using prism with autofac and if you need someone to test the implementation I'm happy to help @NewBLife . ",
    "Sockenfresser": "I don't think that the Problem of the DelegateCommand is the existence of the FromAsyncHandler feature. The actual problem is that the non-async actions are wrapped in an async delegate which doesn't make much sense. \nInstead the async and the non-async handlers should be handled individually. This way the non-async actions would work as expected with proper exception behaviour. The async handlers would still \"swallow\" the exception (actually they are throwing them in the original SynchronizationContext) which is the expected behaviour for a \"async void\" call. \nWe are strongly using this async features, as most of our code is using async/await. The async behaviour of the DelegateCommand makes it much easier to test our view models.\nIn the tests we are triggering the Task Execute() methods. This way it is very simple to await the execution of the async operation before we do the assert. So there actually is a scenario where you are calling the Execute method in you code. For us this is within test code.\nFor us it would be the best to split the DelegateCommand into a DelegateCommand and a DelegateCommandAsync. This way existing users of the async features could keep their stuff running. What do you think?\n. @dvorn In fact the implementation of the DelegateCommand does exactly this, an await this.Execute(parameter); so what I'm testing is exactly what the UI triggers here.\nThe actual state of my application is altered by the command handlers or code in the layers below. So why is this different to calling it synchronously?\nYour scenario is plain obvious for all asynchronous event or command handling applications. You do this anyway if you do everything async. And you would write an additional test for this behaviour I guess.\n@pdinnissen I just wanted to raise my voice here and say \"I'm using this and it would break my code if you remove it without a replacement!\". @brianlagunas asked for feedback in his blog post. I couldn't find a post in this thread pointing out the test scenario as a use case. So I felt I had to say, that there are people using this and there is a use case for directly calling DelegateCommand.Execute.\nMy problem is, if you first remove the asnyc stuff, I will have to create my own DelegateCommandAsync implementation, because nearly all my view models and their tests are working this way.\nIf you later ask who needs this, I will probably not raise my hand, because I will have a working solution by then. And I guess anyone with the same usage of the DelegateCommand will have one too. So why not split it up into two a synchronous and an asynchronous implementation now? \nAfter reading the whole blog post and the answers to my post again, I'm not even sure what is wrong with the old behaviour. The unit test from the blog post is simply not 100% correct because what a test has to do, is to set up the environment correctly. The normal non-test environment for a DelgateCommand has a SynchronizationContext set. The test has non. \nAdditionally the test calls the Task Execute() overload. This results in the Task to be thrown away, which is just wrong in this scenario.\nIf I write the test (using AsyncContext.Run from AsyncEx to set the SynchronizationContext) as follows, it does not fail.\n```\nusing System;\nusing System.Windows.Input;\nusing Nito.AsyncEx;\nusing Prism.Commands;\nusing Xunit;\nnamespace DelegateCommandTests\n{\n    public class ViewModelTest\n    {\n        [Fact]\n        public void DelegateCommand_ActionNotAsyncWithSyncContext_ExceptionThrown()\n        {\n            var exception = Record.Exception(() =>\n            {\n                // set up the \n                AsyncContext.Run(() =>\n                {\n                    ((ICommand)(new DelegateCommand(() => { throw new Exception(); }))).Execute(null);\n                });\n            });\n        Assert.NotNull(exception);\n    }\n}\n\n}\n```\nSo I understand that the behaviour is not really obvious. But if the people using it understand the idea of async/await in UI scenarios, the existing DelegateCommand works like a charm. In my opinion there is no exception swallowed in real world scenarios.\n. @dvorn Just to summarize. I have a behaviour in my command handler. I want to test it's complete behaviour. It is an async call, so in the test I await this call to assert after the code has run.\nIn the application I obviously do not wait for the task to finish. But I want to trigger the same behaviour. Of course I build my UI in a way that reflects this asynchronism. I mean that is the whole idea behind asynchronously executing things triggered by the UI. But still the behaviour I want to test is in most cases the behaviour of the complete command handler. \nThere are some rare cases where I want to test for instance the state after a request is send but before the result is received. For obvious reasons I do not await under these circumstances. But I guess this is slightly off-topic here.\n. @dvorn OK understood, but this makes most tests a lot more complicated and does not achieve much in our use cases.\n@brianlagunas I still don't get what is so bad about the DelegateCommand it it's current state. It fits pretty well into the asynchronous pattern and the test that shows that it has a bug regarding exception handling is wrong in it's posted form, as you are lacking the SynchronizationContext and the returned Task is ignored.\nPlus the exception behaviour in a running application is the same as in a synchronous version. So the DelegateCommand is working as it is.\nAnd the async void isn't a code smell in this scenario. In my opinion the ICommand is just a bindable event replacement and async void calls are completely legal for UI event handlers.\nSo why really remove it? I understand @dvorn about having a problem with using Task Execute() for tests but I still think he is a bit to strict about this.\nBy the way, I really appreciate the work all of you are doing here. I don't want to get in the way of your work. \nBut a breaking change is a really tough decision and for me, as for many others this would just lead to implementing their own asynchronous DelegateCommand having exactly the interface the old one has.\n. @brianlagunas So it seems we just started using PRISM in exactly the time the current behavior was introduced and build up everything on it. So I hope you can see why from my point of view your test is wrong. I understand your problems with the difficult interface. A better name for the async method would have been ExecuteAsync anyway. This would have also solved your test case problem. But I see that you don't intend to make the DelegateCommand work for async and non-async scenarios. That's your decision. \nI guess we will switch over to Nito.AsyncEx's AsyncCommand because it nearly has the same features and a clearly async oriented interface.\n. @dvorn Thank you. Seems that this is an early implementation from Stephen Cleary the author of AsyncEx. \ud83d\ude04 \n. @dvorn Cleary's AsyncCommand (from the Mvvm.Async library) just implements a simple default behavior. But you can always implement your own CanExecute, cancellation or whatever behavior. What's wrong with that? It's pretty much the same Prism does all the time. Provide a default implementation and an extension point to replace/alter the default behavior. \n. ",
    "spasas": "I think I have another approach, let me know if it makes sense...\nQuick background, I am still using Prism 5, but I look from time to time what's up with the current version. I will probably migrate next year. In the meantime, I have to look into this shady DelegateCommand for our projects and doing some research I found the branch of @brianlagunas and this issue.\nI understand the flaws around the DelegateCommand and the use of the TPL to make it asynchronous. However, it occurred to me that the PubSubEvents have another way of implementing the same behavior. You can subscribe on the current thread, the UI thread or a background thread. What if we can apply the same technique for the DelegateCommand ? \nI've played around the DelegateCommand just to see if I can make it work with the PubSubEvents code, and it did. I've made a branch with the test code... It is far from being production code...It's only a proof of concept: \nhttps://github.com/spasas/Prism/tree/DelegateCommand-OldNewApproach/Source/Prism/Commands\nI'm curious to know what you think about it, and if it can be something to pursue.\nThanks,\nPatrick\n. ",
    "Robzilla": "Rather than having to sift through all 85 posts can we have a simple example of how to refactor a DelegateCommand.FromAsyncHandler call that uses the Execute and CanExecute as parameters in the constructor.\nThis is a huge breaking change and will come as quite a surprise to a lot of devs. The release notes are not very helpful regarding how to refactor existing code so if anyone does post an example it might be worth adding a link to the release notes.. Still no answer on SO, can one of the core devs (Brian?) please have a look? If this is scenario is not possible I will have to look at ditching Prism. I have been using Prism for years and would not be very keen on using another framework. But the ability to cancel navigation and have all navigation elements still in sync is pretty important.. ",
    "Majirefy": "There is no new Prism Add-in for new Xamarin Studio 6.1 yet, so wait for an update.\n. ",
    "benlaan": "That's fine. If anyone ever stumbles upon this, contact me for my version\n. ",
    "marcel-Ngan": "@benlaan Are you still using Castle.Windsor with Prism? I've just started with it and am experiencing any issue. Is there any method I can contact you to discuss them?. @TaviTruman I manage to get the issue working. Was just some dependency that I forgot to register. I was wondering if there is any examples like the WPF-examples on here for Castle.Windsor?. @brianlagunas True, I'm still looking at the WPF examples and they seem to be alright. The biggest issue I think is how to make the windsor bootstrapper work and how to properly register everything.. @TaviTruman are you using custom built bootstrapper or something that's found in the internet?. @TaviTruman any chance we can talk on Skype or some other communications method. Just some basic issues that I'm trying to sort out for now. (Mainly the difference between using Castle.Windsor and Unity from looking at the examples). ",
    "nolanblew": "Sure. I have Windows 10 1607 (OS Build 14393.222) anniversary update. SDK is 10.0.26624 and our target version is 10586... However my team has had this issue since May (it just hasn't been important to us until now)\n. @bartlannoeye Which contracts are you referring to? I have created both Windows 10 contracts and the depreciated Windows 8 contracts (file pickers, camera UI, custom app contract) and none of them seem to activate OnActivated or InitializeFrameAsync, which call OnResumeApplicationAsync. The app doesn't appear to think that it's resuming at all. I have tested on a Windows 10 PC and a Windows 10 phone. Am I not understanding correctly what you mean by contract?\n. ",
    "weases": "+1\n. ",
    "CavalornIV": "I don't want the user to see ViewA if he's not logged in\nAdditonally i think if i go from MainPage -> ViewA and present the LoginPage modally and the user cancels the login he will be redirected to ViewA again\n. ",
    "Sid-R": "Thank you all for taking a look into this issue.\nInteresting to note that\nThe registration will live for the lifetime of the application.\nActually RegisterViewWithRegion is not being called multiple times.\nIn our project we have 'heavy' modules that are being created and disposed dynamically throughout the lifetime. As intended RegisterViewWithRegion is being called only once during the Module.Initialize().\nThe problem is when the module is no longer needed we call Regions.Remove(...) and dispose the module. Our assumptions was that doing this will remove all references of this module from regionmanager and hence it will be collected by GC. But since as you mentioned this registration (string, List< delegate >) is for lifetime the disposed modules will survive the garbage collection as the delegate holds the module reference.\nWe realized the current RegionManager implementation is not meant for completely unregistering modules. Which in turn makes modules (which uses regionmanager) undisposable.\nFor now we have created a Helper class that provides a delegate to RegisterViewWithRegion instead of using lambda expression. It results in reference to helper class  surviving inside regionviewmanager's ListDictionary but at-least our hack allows us to dereference and dispose our module(s) successfully.\nThanks again for your time and comments\n. @dvorn Thanks a lot for \"_regionManager.Regions[RegionNames.DefaultRegion].Add(view)\".\nIn retrospect I concede that we are using prism in an unorthodox way in the sense that some of our modules are not loaded via catalog at startup as they are dynamically created at certain workflow events. (for such exceptional modules we manually create them and call IModule.Load()). So these modules when no longer needed are disposed as well manually by calling Dispose(). This is being done only for certain modules which are created and disposed manually inside some controller (thus unorthodox use as in prism, IModule are supposed to be created once and remain for lifetime of app). \nI believe the right options for us would be-\n- Do not register view for such temporary modules but add the view to the region directly via Regions.Add (thanks again for that!)\nAs for \n\n_container.Dispose();\n\nthe container is childcontainer with scope limited to module being disposed so no impact on rest of prism application.. ",
    "smedegaard": "I didn't expect you to monitor it. Just to be a place where the community could communicate real time. \n. Hi @brianlagunas, I played around with Gitter to make a room for Prism. I think I sent you an invite by accident. You can just ignore that\n. Hi again @bartlannoeye and @brianlagunas ,\nSo I created a Gitter channel (https://gitter.im/prism-mvvm) and invited you both. I hope you will consider linking it to the repo.\nI find myself in situations where I'd like to ask the community a question that does not belong on Stackoverflow or as an issue here on Github and I susspect there are more people like me that would benefit from a channel like this.\nI do not expect any of you guys to monitor this channel, but I feel it would be a great addition to the community with zero cost and minimal effort on your behalf. \nThanks for considering this again ,and thanks for maintaing Prism.\nRegards Anders Smedegaard\n. @brianlagunas , works like a charm! Thanks!. ",
    "iquijas": "I tried to access https://prismslack.herokuapp.com/ but I get an application error:\n\n. ",
    "amalmo": "@brianlagunas Shouldnt there be a stopTimer as well? \nedit: see below \ud83d\ude04 . We have made an app for the cyclists in Oslo, Norway that allows them to securely store their bicycles in locked rooms that are located near public transport stations.\nAuthor: Bymilj\u00f8etaten, Oslo, Norway\nGoogle: https://play.google.com/store/apps/details?id=no.oslokommune.sykkelhotellapp&hl=en\nApple: https://itunes.apple.com/us/app/id1301957407\n\n\n. BOKA is an app made for the farmers in Norway, and is a part of the digitalization process in the agriculture industry. This app replaces the old pen and paper way of documenting what happens at the farm, now you just make a note in the app and its synced to the cloud.\nAuthor: Felleskj\u00f8pet Agri, Lillestr\u00f8m, Norway\nGoogle: https://play.google.com/store/apps/details?id=no.felleskjopet.boka.droid\nApple: https://itunes.apple.com/no/app/fk-boka/id1368344418?l=nb&mt=8\n\n\n. ",
    "AlesDo": "I see. I can then contribute the WPF support. And once you decide the about the UWP we will see if it will be needed. Are you thinking of supporting UWP only via the Xamarin implementation now that it supports also UWP?\n. The author does not provide a signed version he just includes the key and a script to sign them if you need it. I just adapted the script to do it automatically. I saw all assemblies are signed so I wanted to make it the same.\nI will then remove the signing and also the Prism.DryIoc.Wpf assembly will be unsigned.\n. Yes this is what I meant I will change only the one I added.\n. I have added a fix for the RegisterForNavigation extension method and a unit test. While using the code I found that an error happened when the RegionNavigationContentLoader tried to resolve the view.. Ok will look at this have to see what is the case is in XF. DryIoc can resolve concrete classes. I think it is just a matter of proper setup it is more strict in some cases. For the issue I had with the navigation I just had to register differently for it to work.. I checked again and for me an application similar to the XF sample with navigation and automatic ViewModel resolution works ok. I have added the automatic concrete type resolution on the container. I also added a comment in the XF issue #889 so you know what to enable there for it to work.. To do auto concrete type resolution in DryIoc you just add the rule when creating the container like this:\nnew Container(Rules.Default.WithAutoConcreteTypeResolution());\n. ",
    "msglight4874": "Ok Thanks\n. ",
    "Eliasar": "I closed XS and restarted it, created a new project using the add-in pack, and got the same issue. Project creating hangs on \"Attempting to gather dependency information for package 'Prism.Unity.Forms.6.2.0-pre5'\".\n. 1.5 is missing from the Xamarin Studio Gallery, only version 1.4 is available. The page \"exists\" in Monodevelop's Repository at http://addins.monodevelop.com/Project/Index/226, but v1.5 404's when you click to download it.\nEDIT: MonoDevelop's repository no longer 404's on these and the Xamarin Studio Gallery correctly updates. \n. It works great. Thanks!\n. ",
    "nicolaiarocci": "Yes I noticed that one, but was unsure on what the fate of the other one would be. I'm following up with a few typo/fixes on the docs folder too.\n. Done.\n. IApplicationLifecycle has my vote too.. ",
    "molinch": "@ylatuya would you mind sharing your implementation for PublishAsync?. Thanks ! I took a different approach in our project, which doesn't involve touching Prism classes, but being on top of them. If I find time I can try to share it.. ",
    "ylatuya": "You can find the implementation here with the commit  adding support for Async on top of Prism. ",
    "brinko99": "I too am interested in such functionality. @molinch, might you be able to share your solution?\nI've successfully used the Deferral  solution provided by Stephen Cleary. It requires adding a Deferral to the PubSubEvent payload that can be awaited on. It works great, but the syntax is clunky for users and implementers. . @bartlannoeye It is your job to make the software usable, and that means documentation. Search on RTD has been broken for at least two years. Without search, documentation is useless. I'm currently deciding whether to use Prism on our new project; I've used it in the past and know the learning curve for new users. It's a shame to see that the already poor documentation has regressed (no/obsolete MSDN & CHM).\nThe link you point to also has a workaround that the Prism team could (apparently) easily apply and thus make RTD usable. It is suggested that Pandoc be used to convert the docs to RST which is natively supported by RTD.. @dansiegel I am saying only that it is in the interest of the Prism community to make it easy to learn. I don't mean to cast blame but indeed offer this feedback. RTD is simply the wrong tool for hosting mkdocs due to a crippling bug and lack of interest in fixing it (for most document sets RTD does work fine).  It seems that RTD is not interested in fixing the issue as they see the workaround as requiring \"at most an afternoon's worth of work\".\nAs a result of their bug, Prism and its users suffer.\nThat all said, thank you and the rest of the team for putting together a great framework and working hard to interact with the community.. @dansiegel @ronnieoverby Right... might the workaround proposed by RTD of converting the mkdocs to RST format be considered? It seems that others have had success using Pandoc for this: (rtfd/readthedocs.org#1487). ",
    "stonelyd": "I unfortunately do not know much about the rd.xml file beyond what I can search and read about. \nAdding the line \n<Type Name=\"PrismBindingIssueVB.Models.Person\" Dynamic=\"Required All\"  />\ndoes not seem help.\n. ",
    "magicmonty": "No problem, I need this anyway. So I make my own NuGet package repo. I just thought, this could be a good fit here.\n. ",
    "ChristianRiedl": "I already removed the work arround code and I solved the problem in the meanwhile. I am using SimpleInjector container, because I have good experience in high performance web apps. Result of this experience is that I always prefer singleton services and so I registered PageNavigationService as singleton. Together with my work arround it was working in previous version. It is also not very Simple to port Unity's  ResolverOverride to SimpleInjector, so I tried it as singleton. By the way in the MSDN docs Unity's ResolveOverride  functionality is termed \"outdated\" (see MSDN doc).\nNow I have a SimpleInjector solution using a custom scope associating the scope of PageNavigationService with the current page. It works when there is only one \"current page\" at any time.   \n. I was overriding the virtual OnPropertyChanged (string propertyName).\nExactly the function you renamed to non virtual RaisePropertyChanged (string propertyName).\nIt was the easiest way to let SetProperty do what I want. \nI wonder why OnPropertyChanged(PropertyChangedEventArgs args) is still valid and virtual. . OK. Thanks. ",
    "krossley": "I second that!\n. Bartlannoeye,\nAll I know is if you search for prism and go to the Prism Page if you try to look at the docs I get the 404 not found message.  \nhttps://github.com/PrismLibrary/Prism\n. ",
    "ildoc": "oh, i've found those broken links browsing docs here on github, i didn't know about a rtd docs!\nthere's absolutely no references to it in the whole project (proof)\nanyway, it's a small change, so i don't see why not to merge it...\n. ",
    "Dresel": "I was looking for something similar, the use case I have to implement is the following: User receives a notification and when clicked should be redirected to a specific view\nSince notifications are implemented in the platform specific project and within a service (GcmListenerService), I'm using a PendingIntent with extras and overriding OnNewIntent within the MainActivity. There I had to access the NavigationService, which I did via\n((PrismApplicationBase)Xamarin.Forms.Application.Current).Container.Resolve<INavigationService>();\n\nI know this is against\n\nFirst off, you should not be adding any code to your Android MainActivity releated to navigation. In a Xamarin.Forms application you handle all navigation within the PCL.\n\nbut it was the only solution I found after quite some research.\n@brianlagunas If you have some advice how to do it better, I would be very grateful.. Where should I inject what and how does this avoid navigation related code in the Android MainActivity?. Thanks for your answers, guess you are not explaining this the first time. I was really looking for documentation, but everything I found was only touching the surface but not dealing with these kind of details. Guess the best way to gather information / documentation would be reading release notes, pull requests and issue discussions?\nSo back to the issue and to sum up:\n\nOnNavigatingTo is never called when pressing hardware/software buttons\nOnNavigatingTo is called for all children of a MultiPage type, but only for the initial creation, not when navigating back to these kind of pages (wether hardware/software or executing GoBackAsync), there it would only be called for the specific child page which is currently active\nOnNavigatingTo/OnNavigatedTo is called for MultiPage types only during initial creation, not when navigating back to these kind of pages, it is only called for the specific child page which is currently active\nNavigating within a MultiPage type (e.g. swiping through the CarouselPage) is outside of the context of the NavigationService, so OnNavigatingTo/OnNavigatedTo will/can never be called\n\nRight?\nSo where would you put code that should always be called when navigating to a MultiPage or within a MultiPage type (like reloading data)? I was loading the data within OnNavigatedTo in the MultiPage type for all children, but this would not be called when navigating back to MultiPages. When loading directly within OnNavigatedTo in the child page, it would not be called when navigating (swiping) within the MultiPage.\nI ended up loading the data within the MultiPage viewmodel and throwing an event in the OnNavigatedTo of the child page ViewModel (which the parent / MultiPage ViewModel  is attached to) so that the MultiPage ViewModel can react when navigating back to an MultiPage type.\nI was also thinking of reacting to OnCurrentPageChanged for the MultiPage and manually calling INavigationAware functions to ensure almost consistent behaviour, but I don't know if that makes sense?\nWhat do you think and how would you engage this kind of use cases?. ",
    "VitalyKnyazev": "Thanks, need to think about it and review my solution. Most likely the problem is that I use INavigationService from a singleton Navigator(INavigationService) helper class. Probably in XF world it should not be singleton.\n. Unnecessary extra commit. Money Tracker - personal finance app with cash/stock accounts, cryptos and sync between devices.\n\n\n\nAuthor: K-Tech Systems Ltd\nWebsite: http://k-tech-systems.com\nUWP in prod since Mar 2016: http://www.windowsphone.com/s?appid=e48b0385-e91a-4e05-a09a-f74a750dc2a0\nAndroid in prod since Aug 2017: https://play.google.com/store/apps/details?id=com.ktechsystems.moneytrackerpro\nApple: in development, ETA later this year. ",
    "timahrentlov": "I'd like to vote for the granular approach as well.. I like the IDestroyAfterNavigation approach. Fits my use-cases. ",
    "corradocavalli": "Agree with Karl, IAppLifecycle provides better granularity. My vote goes to it.. ",
    "angelobelchior": "For me, the IAppLifecycle approach is the natural way to handle Application Life Cycle...\nIAppLifecycle +1. ",
    "mackayn": "IApplicationLifecycle gets my vote.\nKnowing the direction of navigation would be good, I haven't tested but sometimes OnAppearing fires when you pop the device dialer or mail client, it's been inconsistent in Forms since I started with Forms 1.3. I currently check  if certain parameters exist to determine who called the page.. Hi Dan,\nWasn't aware you could do that. Tested and it works fine.\nThanks for your help.. Hi,\nSorry to reopen this but found an unwanted side effect of this approach. While the code below works fine when starting up the app it doesn't work when you reset the navigation stack.\n```\n protected override void OnInitialized()\n        {\n            InitializeComponent();\n        var setting = Container.Resolve<ISettingService>();\n        var user = setting.GetSetting(SettingConstants.SettingToken);\n        if (!Equals(user, null))\n        {\n            var navigationPage = \"app:///MainNavigationPage/HomePage\";\n            NavigationService.NavigateAsync($\"{navigationPage}?startup=OnInitialized\");\n        }\n        else\n        {\n            var navigationPage = \"app:///MainNavigationPage/LoginPage\";\n            NavigationService.NavigateAsync(navigationPage);\n        }\n\n        // Force windows toolbar to top (default is bottom on Forms 2.3.3)\n        MainPage.On<Windows>().SetToolbarPlacement(ToolbarPlacement.Top);\n    }\n\n```\nThe user can sign out of the app and authenticate using different credentials, what happens in this scenario is the navigation stack is reset to the login page.\nIn the login ViewModel when you successfully authenticate the user is redirected to the main dashbaord again.\nvar navigationPage = \"app:///MainNavigationPage/HomePage\";\n                    await _navigationService.NavigateAsync($\"{navigationPage}?startup=OnInitialized\");\nThe issue if the viewmodel obviously doesn't reference the app context and there's no way to call SetToolbarPlacement, unfortunately when you reset the navigation stack this preference is not retained for toolbar placement, the toolbar goes to the bottom again. Setting it in the page doesn't work.\nThis may be a Forms bug or a feature of platform specifics (I would have though you'd set it once) but I thought I'd raise it here before maybe creating a bugzilla and raising a support ticket.\nThanks.\n. Hi,\nAs Brian recommends, to resolve this issue you can simply set the platform specific setting for toolbar placement in the main navigation page, that way you can reset the navigation stack and the toolbar won't move back to the bottom in UWP apps.\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<NavigationPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             x:Class=\"Foobar.Views.MainNavigationPage\"\n             xmlns:windows=\"clr-namespace:Xamarin.Forms.PlatformConfiguration.WindowsSpecific;assembly=Xamarin.Forms.Core\"\n             windows:Page.ToolbarPlacement=\"Top\"\n             Title=\"MainNavigationPage\">\n</NavigationPage>. Hi,\nA quick update, this only occurs in 2.3.3.193. If you upgrade to 2.3.4-pre2 Destroy is called.\nI'll close this as it's a Forms bug but I thought I'd highlight this issue anyway,. Hi Brian,\nAPI changes make sense to me. I take it UWP will return when running on Windows10 etc or Windows 10 on a mobile device?. Just curious how this will play with Forms 2.3.4 as macOS is only supported in 2.3.5-pre?\nDoes it just return unknown?. I did run into this today trying to fix unit tests, while it would be handy to override the navigation direction I completely understand why it's not allowed and to me suggests you shouldn't be unit testing navigation events anyway... Actually, was referring to the same thing, crossed wires. This PR is exactly what we're looking for.. We really really really need this in 7.1, go with what's implemented for now.....pleeeease.. ",
    "build-ninja": "Why has this not been added to desktop version of PRISM?\nFrom what I can see there is not currently any means of determining navigation direction via the NavigationParameters\\NavigationContext. . Would be WPF for my current needs. ",
    "kyse": "Not sure if this is related so forgive me if this looks like a hijack, but I noticed in my xamarin forms app, when trying out things on my android phone in debug mode, if I start up the app, and hit the back button from the main page (navigating on initiailization to masterdetailpage/navpage/mainpage), I get a message saying the app has stopped.  When opening the app again, I get the splash screen, ie the app closed instead of suspending.  In the process of trying a few things like using IConfirmNavigation CanNavigate returning false on the master and nav pages, but this probably isnt the solution.. Turns out this is related to Xamarin.Forms 2.3.3, supposedly fixed in 2.3.4-pre1 related to fragment handling with masterdetailpages.. ",
    "sanekpr": "@brianlagunas Is it possible to release a stable version? Or any planned date of release?. ",
    "steji113": "@brianlagunas did new interactivity enhancements make it into 7.1?. @brianlagunas FWIW, I really like where this is headed. I am currently embarking on refactoring a large WPF project that has tons of close coupling of opening dialogs. In the past we have had to roll our own dialog services due to the interactivity interfaces not being scalable. This would be a great addition and help.. ",
    "DanoPTT": "Is plan to implement something like lazy loading. Actual implementation loads View and its' ViewModel (Custom interaction used) when parent view is created even when no interaction is ever activated (no editing for example). It slows down parent View loading. . ",
    "Mr1Penguin": "Short-term solution is use IDeviceGestureService.GoBackRequested instead of SystemNavigationManager.GetForCurrentView().BackRequested. But PrismApplication class does not check e.Handled inside its OnGoBackRequested. I can create PR for it.. @rsvsakthi \nPR = Pull Request. And it's already merged with main branch (#1019). . ",
    "rsvsakthi": "@Mr1Penguin, Thanks a lot for your contribution. Have you created PreRelease already? if yes, can you provide me the details?\nThank you,\nSakthivel R. ",
    "Konrad4": "Thank you for very fast reaction :) \nYes, this solves the problem of the exception but because IPageAware.Page is still set to MasterPage and not to the MasterDetailPage every time when the nonmodal navigation is performed there is a new instance of MasterDetailPage created so I still need to set explicitly ((IPageAware)_navigationService).Page to prevent that.\nBut maybe there is still some other problem with my code, anyway thanks for help :). ",
    "ThAlmighty": "My situation is that I would like to have the scoped region manager available before the view is actually constructed. The main advantage is that I could use IoC to inject this scoped region manager in the constructors of the view / viewmodels. IMO this is preferable over the attached dependency property, which is set after constructing (requiring null checking and a whole lot more boilerplate). \nThe reason behind returning the region manager is quite simple: I prefered to stay consistent with the other overloads signatures (they also return region managers). The reasons why the other functions do this might very well be to support the fluent api, as you pointed out.. Sure thing, here's a code sample:\n```c#\n// Create a scoped region manager ourselves before constructing the view\nIRegionManager scopedRegionManager = _regionManager.CreateRegionManager();\n// Pass the scoped region manager to the view's constructor\nobject view = new ProgramView(scopedRegionManager);\n// - Or use IoC (StructureMap)\nExplicitArguments arguments = new ExplicitArguments();\narguments.Set(scopedRegionManager);\nobject view = _container.GetInstance(arguments);\n// Add view to region\n_regionManager.Regions[\"ApplicationContent\"].Add(view, null, scopedRegionManager);\n```\nAs you can see here in this code, I am now able to create my own region manager before construction and add it to my IoC container. In my case (not shown in example) I use a ViewFactory which is responsible for creating the view, viewmodel and setting up the mvvm pattern. In order to allow for better separation of concern I mark my views with a attribute which tells they need a scoped region manager, which the ViewFactory will configure accordingly. This way, the code creating that particular view does not need to have knowledge of whether to create a scoped or inherited region manager.\nHaving the region manager available via dependecy injection also removes the reliance of the attached dependency property, which constantely needs to be checked for null values.. @briannoyes Thank you, I already read that @brianlagunas was on vacation, so no hurry. @dvorn The current way I set up my application is by having a tight seperation between View and ViewModel, which imo is the proper way to do mvvm. Therefore the IConfirmNavigationRequest is handled in the ViewModel. \nI don't think it is acceptable to have ViewModels aware of their View, let alone their respective sub-views. Moreover, I think the View also shouldn't be aware of the specific implementations of its sub-views/view-models. \nI agree with you on the possibility of multiple IConfirmNavigationRequest's raised when navigating away, but your provided solution does not suffice in my opinion. Maybe you could help me out to find a proper-mvvm solution with seperation of concern (which seems to be the fundaments of the framework). \nAs a note: I feel like Prism is lacking in a lot of departments for the support of sub-regions / scoped region managers, maybe I'm missing the bigger picture?. @dvorn Thanks for clearing up the scoped regions code, I already felt like it was half-baked. I agree with you that ViewModels are aware of the UI composition in the way that they perform navigation. The problem is that I don't believe the ViewModel should be aware of the View's implementation it's navigating to, that seems like an awful way to mix concerns and make you application very tightly coupled. \n@brianlagunas Totally agree, I should have opened an issue first. The problem is that I'm working on a enterprise-scale application which heavily uses view-injection through RequestNavigate in conjunction with scoped regions. Every way I try always ends up - one way or another - on a deadend where the framework is limited. I feel the framework has not matured enough for enterprise-scale applications.\nI do fully agree with the fact that changing this will cause significant troubles for the current userbase, but I also feel the framework is too focussed on smaller applications. Still a big fan though! Keep up the good work and I would like to get more involved.. ",
    "gmwilhelm": "Thanks Brian, you are correct.\nBut i still have two questions about this:\n\nin OnNavigatedTo the single line works, without checking for a parameter first,\nif there is an exception, why does the app still run? Is the exception catched in the prism code?. \n",
    "ProH4Ck": "Didn't notice virtual keywork: I solved implementing my custom PopupWindowAction. Thanks! \nI saw #864 right now: after Interactivity rework I could integrate sample with this beahvior.... ",
    "ronnieoverby": "This might help someone with this issue:\n```c#\npublic static void Invoke(this IEventAggregator events, Action action, ThreadOption threadOption = ThreadOption.UIThread)\n{\n    if (action == null)\n        return;\nvar e = events?.GetEvent<InvokeMessage>() ?? throw new ArgumentNullException(nameof(events));\nExceptionDispatchInfo exception = null;\n\nusing (var waitHandle = new ManualResetEventSlim())\n{\n    Action<InvokeMessage> handleMessage = msg =>\n    {\n        try\n        {\n            msg.Action();\n        }\n        catch(Exception ex)\n        {\n            exception = ExceptionDispatchInfo.Capture(ex);\n        }\n        finally\n        {\n            waitHandle.Set();\n        }\n    };\n\n    using (e.Subscribe(handleMessage, threadOption))\n    {\n        e.Publish(new InvokeMessage { Action = action });\n        waitHandle.Wait();\n        exception?.Throw();\n    }\n}\n\n}\nprivate class InvokeMessage : PubSubEvent\n{\n    public Action Action { get; set; }\n}\n```\nIt's general purpose, but for the issue of NotificationRequests use it like:\n```c#\nprivate readonly IEventAggregator _events;\npublic InteractionRequest NotificationRequest { get; } = new InteractionRequest();\nprivate void RaiseNotification(string title, object content) =>\n    _events.Invoke(() => NotificationRequest.Raise(new Notification { Title = title, Content = content }));\n```. I realize that. I'm not raising an issue like this to troll you or to ask you to just drop what you're doing and write me a set of docs that I enjoy.\nI was hoping to start a discussion.\nFor some reason, the Caliburn Micro docs have this problem, too. Is there something in the water that makes MVVM authors want to write these tomes?\nAlso, I find the pluralsight course Intro to Prism or Prism Fundamentals or whatever it's called, to be better than the official docs. The issue with that of course is that it's behind a paywall and it's not specifically for Prism vToday, which always makes viewers feel like they might be wasting their time, though I know that the video course is largely compatible with the current version.. @dansiegel it absolutely screams that. I was probing for senses of humor, finding only sand and bones.\n@brianlagunas P&P it all becomes so clear. I'd be happy to submit PR's of concise examples of things I've gleaned. \nAlso, did you know that the Read the docs site's search is broken. I've searched for phrases that  I know are in the text, finding nothing.. Highly recommended episode of Herding Code:\nhttp://herdingcode.com/herding-code-224-jeremy-miller-on-marten-postgres-and-alba/\nOn Tue, Jun 6, 2017 at 2:06 AM, Bart Lannoeye notifications@github.com\nwrote:\n\nThe broken search is something RTD has to fix (rtfd/readthedocs.org#1487\nhttps://github.com/rtfd/readthedocs.org/issues/1487), that's not our\njob.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/1075#issuecomment-306391021,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAGKpGlBlAPr7uRe2epvSXBwz_cKnzxFks5sBOxmgaJpZM4Nwjlr\n.\n. @dansiegel I guess you're right that my humor is objectively not funny. Sorry about that.\n\nIsn't the RST conversion a suggested alternative?\nLook! A discussion ensued. Imagine that.\nAll weapons of mass sarcasm laid down, I want to say that Prism is a good and helpful project. It's hard work maintaining OSS. It's harder work fielding issues on a popular open source project. But...\nI don't like the knee jerk reaction of \"We accept PR's\"; closes issue\nThat is what decidedly doesn't \"scream, ' I want to have a discussion'. \" I think that is the total copout. Of course I want to have a discussion or I wouldn't have bothered. \nSo let's all let our defenses down. ::waits for retaliation::. ",
    "jacob-maristany": "https://gitter.im/ would be a good alternative as well.  Also, you could always create a #prism channel on xamarinchat.slack.com.  There's already #mvvmcross, #mmvmlight and #framework-authors channels on there and a lot of user base.\n. The issue seems to stem from the fact that IPageDialogService.DisplayAlertAsync(...) is invoked before AppDelegate.FinishedLaunching(...) completes.  While this does method does complete after the IPageDialogService.DisplayAlertAsync(...) invocation, the crash happens immediately after. . ",
    "listepo-alterpost": "@brianlagunas how to sign up in the http://prismlibrary.slack.com/ now? https://prismslack.herokuapp.com/ - There's nothing here, yet.. @S1r-Lanzelot thank you, I just wanted to know when there will be a stable version, I do not think that for this I need support. ",
    "S1r-Lanzelot": "@listepo-alterpost - https://github.com/PrismLibrary/Prism/blob/master/README.md#help-support-prism for access to Slack. Will need to update the AppVeyor configuration to pass -f netcoreapp2.0 for the Prism.Forms.*.Tests projects. Not sure if that config file is checked in? Had troubles finding it, let me know if it is though and I can update accordingly.. ",
    "NguyenTam": "@S1r-Lanzelot : I registered half hour ago. Should I get invitation message to slack? Should I click something in Patreon? Or should I just wait?. ",
    "rangav": "By Installing Nuget package System.ComponentModel.Annotations resolved the issue for me.\n. ",
    "SabersoftConsulting": "Thanks, I'll do that.. ",
    "dadhi": "By fallback to Dependency Service, do you mean if concrete type or any type could not be resolved, then DryIoc resolution should return null?. By quick look at source I guess that you may override PrismApplication.CreateContainerRules() and return \nDefault.Rules\n    .WithAutoConcreteTypeResolution()\n    .WithUnknownServiceResolvers(\n         UnknownServiceResolverRule.DependencyServiceResolverRule.UnknownServiceResolvers);\n\nActually it would've been easy if UnknownServiceResolverRule provided just UnknownServiceResolver delegate, and not the fully constructed Rules, making it less composable.\nAlso impl may be simplified, but I need to check.\nBtw. the fallback won't be possible if concrete type itself cannot be resolved, e.g. due missing dependency. I will play with it.. At the end AutoConcrete... rule is just a sugar. You may write your own.. @dansiegel Missed your answer. \nWhat exceptions were thrown in the 2nd case? 1st is wrong.. I would like to help, but I need to know the context more.\n\nWhat version of DryIoc is used, what platform is referenced?\nAny exceptions when it is crashing?\nDid you try source package to debug?\n\nDid you try to call container.Validate to check for possible errors?. Thank you, I have reread the whole thread and will try to adapt AutoConcreteTypeResolution for this case. Will use your attached project to check.. Wow, thanks for more info, this is much easy now. I will check from here.. The dumb solution may be something like this:\nvar resolver = Container.Resolve>(vmType, ifUnresolved: IfUnresolved.ReturnDefault);\nif (resolver == null)\n    Container.Resolve(vmType);\n...\n\n\nHope this'll work, cause I could not test it at the moment. But more sophisticated way should exist,.. thinking.\n            . ViewModels have multiple ctors?. Ok, ignore my prev suggestion with ReturnDefault. Here is how you can do it https://dotnetfiddle.net/9gIHH3\n\nSorry for formatting, written from phone.\n\nB is your INavigationService.\nA is view model\nreplace B with C in A constructor, and container will select the default one, because C is not found.\n\nFor the moment forgot about Container.WithDependencies feature, did it to match Autofac functionality, where you may pass some args into Resolve.. As I said WithDependencies was made to cover for Autofac Resolve(parameters):\n        ViewModelLocationProvider.SetDefaultViewModelFactory((view, type) =>\n        {\n            var page = view as Page;\n            if (page != null)\n            {\n                var navService = CreateNavigationService(page);\n                return Container.WithDependencies(\n                    Parameter.Of.Type<INavigationService>(_ => navService))\n                    .Resolve(type);\n            }\n            return Container.Resolve(type);\n        });\n\nMmm, regarding difference of nav services at runtime, what does it mean? how are they different. Cause I believe nav service should be just injected into vm. May be it should be registered with some condition based factory, method or with decorator... Check my answer in prev comment. Seems like we typed in parallel.. Regarding \n    var resolver = \n    Container.Resolve>(vmType);\nit is not clear why it works. It should not differ from object bazed, otherwise this is a bug.\nCan you provide complete context, how many and what ctors VM has? I need a min repro sample.. Reproduced! Will try to fix soon. \nMeanwhile you may try my suggestion with WithDependencies from couple of comments above, which is fully correspond to provided Autofac sample.. Cool!\nBtw, I have project in progress wich wraps DryIoc with Autofac API surface.. So may be, this one will rule them all.. future DryIoc integrations :-) kidding. Hey, it is a bit late but here is released DryIoc 2.10.4 with fixes for original Func issue and more: https://www.nuget.org/packages/DryIoc.dll/2.10.4. Thanks for responding!\nWhat I see in this fragment and in other places is using of Service Locator instead of Dependency Injection. Instead of injecting the required service, the container/locator itself is injected, and then the service is Resolved from it. Not so much benefits from DI, more like double work.\nIdeally, the fragment in question should look like this:\n ViewModelLocationProvider.SetDefaultViewModelFactory((view, vmType) =>\n        {\n            var page = view as Page;\n            if(page != null)\n            {\n                var getVM = Container.Resolve<Func<Page, object>(vmType);\n\n                // Page will passed to vm or its dependencies, including nav service, if any.\n                return getVM(page);\n            }\n            return Container.Resolve(type);\n        });\n\nThe problem is that current nav service accepts Page as property. DryIoc won't pass Func arguments to properties (at the moment). Then why not to add Page to nav service constructor?\nAs I understood nav service is transient and bound to page? \n. I have created the simple model here to experiment with. May be wrong though.\n\nNow, you'll probably say that to turn off WithAutoConcreteTypeResolution, but we need this in order for other concrete objects to be created when required. Such as the XF NavigationPage.\n\nIt is better to avoid such convention in framework itself.  If user wants such magic in the App services, it is his choice.. Just a heads up that I am working on DryIoc v3 which will released in upcoming weeks. May expect perf improvements and removal of some integration pain points.. Ok, I need to run it to figure out.\nBtw, the next DryIoc v3 will support (already in preview) the Resolve(blah, object[] args), so this Func mangling may be minimized.. @brianlagunas ,\nIn your sample when resolving ViewModel you need to specify navigation service key, as it is used everywhere:\n        container.Register<ViewModel>(\n            made: Parameters.Of.Type<INavigationService>(serviceKey: navigationServiceName));\n\n. I am not sure what is deal with this upgrade. If you go to DryIoc nuget page Dependecies section, you'll see that the Net Standard 1.0 is indeed dependent on >= 4.3 BCL packages. But in your case the Full .NET version is used. And anyway it is >=4.3 and not just 4.3.\nLooking at some popular packages like Json.net does not bring too much difference. The only notable thing is dependency on meta-package of NETStandard.Library instead of individual System.Blah... But this is also just for .Net Standard and not for Full .NET.. Her is the sample with solution https://dotnetfiddle.net/6eEZFr\nand here is why: https://bitbucket.org/dadhi/dryioc/wiki/UnregisterAndResolutionCache#markdown-header-make-injected-dependency-re-wireable-by-registering-it-asresolutioncall. > It is also critical when replacing INavigationService with a custom implementation that the unnamed version be registered before the named registration.\nCould you provide a simple reproduction test? I would not expect a bug here, but who knows.. Btw, returning back to the original problem. Given the Autofac as example:\n    public object ResolveViewModelForView(object view, Type viewModelType)\n    {\n        NamedParameter parameter = null;\n        if (view is Page page)\n        {\n            parameter = new NamedParameter(PrismApplicationBase.NavigationServiceParameterName, this.CreateNavigationService(page));\n        }\n\n        return Instance.Resolve(viewModelType, parameter);\n    }\n\nYou may try with the latest DryIoc v3 preview:\n    public object ResolveViewModelForView(object view, Type viewModelType)\n    {\n        if (view is Page page)\n        {\n            INavigationService ns = this.CreateNavigationService(page);\n            return Instance.Resolve(viewModelType, args: new object[] { ns });\n        }\n\n        return Instance.Resolve(viewModelType);\n    }\n\nAnd remove the decorator setup.\n. ",
    "rasmuschristensen": "This might still be an issue in latest XFPrism. I'm getting this error \nDryIoc.ContainerException: Implementation type is not specified when using automatic constructor selection: Object {ServiceKey=\"RootPage=selectedTab=ProfilePage\", ReturnDefault}\nWhen navigating in OnInitialized using tabbedpages\ndryIoc 2.12.5 and prism 7.0.0.269-pre in netstandard 2.0. Sounds great. I think the issue actually was that I forgot the \"?\" after the tabbedpage in the path. Now everything seems to work perfectly! Looking forward to RTM it's a great fx. ",
    "davidtavarez": "Some documentation about Unity vs Ninject vs Drylok?. ",
    "JaggerJo": "\nworks as described above. Thanks. ",
    "jherby2k": "Thanks, I will do some experimenting myself. BTW, thanks for all your hard work! I just watched your Channel9 on this yesterday, dropped it in to my solution, and threw out tons of my own code. Yours is much better! \ud83d\udc4d . Yeah, looking through the Xamarin.Forms code it looks like we'll need a change to OnBackButtonPressed. I think that would benefit everyone, Prism or no.. I requested an API change, we will see if it gets accepted.\n. Yes, I think that would be useful, especially if/when Xamarin.Forms ads that API. Thanks!. This is cool! I have some feedback:\n\n\nPreviously I could customize the Window somewhat like this, and now I can't. Or can I?\nxaml\n<prism:InteractionRequestTrigger SourceObject=\"{Binding EditNotificationRequest, Mode=OneWay}\">\n    <prism:PopupWindowAction IsModal=\"True\" CenterOverAssociatedObject=\"True\">\n        <prism:PopupWindowAction.WindowStyle>\n            <Style TargetType=\"Window\">\n                <Setter Property=\"ResizeMode\" Value=\"NoResize\"/>\n                <Setter Property=\"ShowInTaskbar\" Value=\"False\"/>\n                <Setter Property=\"SizeToContent\" Value=\"WidthAndHeight\"/>\n            </Style>\n        </prism:PopupWindowAction.WindowStyle>\n        <prism:PopupWindowAction.WindowContent>\n            <views:EditControl/>\n        </prism:PopupWindowAction.WindowContent>\n    </prism:PopupWindowAction>\n</prism:InteractionRequestTrigger>\n\n\nIf I'm using ViewModelLocator.AutoWireViewModel, why do I also have to explicitly call containerRegistry.RegisterDialog too? And it seems like both are required.\n\n\nThe Title property on IDialogAware\u2026 any chance you could make it something more specific like \"DialogTitle\" to avoid collisions? I already have a property named \"Title\" on several of my viewmodels (example: a book viewmodel has a title, which refers to the book's title. Not the dialog's title.). Solved 1. by using RegisterDialogWindow with a custom window, but ideally we'd be able to define multiple custom windows (some resizable, for instance), and then specify which by name, using an overload on ShowDialog. Just want to make sure there isn't loss of functionality vs the old method. Also, custom dialog windows would be a bit simpler if we could just subclass DialogWindow, but we can't because it was defined in XAML. Can you just define this class in code?\n\n\nWorked around 3. by having my custom RegisterDialogWindow bind to a different property, then \"new\"ing my existing Title property. Ugly though.. Thanks! Regarding the icon, according to https://docs.microsoft.com/en-us/windows/desktop/uxguide/win-dialog-box dialog boxes shouldn't have one.. It\u2019s called dialogservice! I just think if you\u2019re making only a handful of useful window properties available directly, the icon is an odd choice. #1721 would let people add an icon if that\u2019s their perogative. Just offering feedback on your API. I certainly won\u2019t lose sleep if you leave it as-is.. Just saw your post about stepping back from OSS. That's cool! Thanks for all your hard work. Hopefully you'll take a PR for this - i'll try to work on it once I understand what's needed.. The prism sample actually fails with this exception... just check out and run https://github.com/PrismLibrary/Prism-Samples-Wpf/tree/netcore3/07-Modules%20-%20Directory (netcore3 branch).. ",
    "vhugogarcia": "Hello @riandesign I am trying to implement the same feature you were trying, however, I'm stuck on it, due the IsActive is never changing.\nIs there way you could share some insights or samples about how you solve it, please?\nThanks in advance. This issue is happening on Android only. Let me see how I can provide the code sample, you know the privacy policy thing.. Thanks @brianlagunas I think this is related with an issue on Android more than PRISM:\n[MonoDroid] UNHANDLED EXCEPTION:\n[art] JNI RegisterNativeMethods: attempt to register 0 native methods for md54ada4fbe4a5955f6151fa282d30cfc48.SelfDisposingBitmapDrawable\n[MonoDroid] System.ArgumentException: Handle must be valid.\n[MonoDroid] Parameter name: instance\n[MonoDroid]   at Java.Interop.JniEnvironment+InstanceMethods.CallNonvirtualVoidMethod (Java.Interop.JniObjectReference instance, Java.Interop.JniObjectReference type, Java.Interop.JniMethodInfo method, Java.Interop.JniArgumentValue* args) [0x00009] in <dcbf64ae8f9943dcab345b6fa6378854>:0 \n[MonoDroid]   at Android.Runtime.JNIEnv.CallNonvirtualVoidMethod (System.IntPtr jobject, System.IntPtr jclass, System.IntPtr jmethod, Android.Runtime.JValue* parms) [0x00000] in /Users/builder/data/lanes/5809/22d97e15/source/monodroid/external/xamarin-android/src/Mono.Android/Android.Runtime/JNIEnv.g.cs:444 \n[MonoDroid]   at Android.Support.V4.Widget.DrawerLayout.RemoveDrawerListener (Android.Support.V4.Widget.DrawerLayout+IDrawerListener listener) [0x00088] in <2b37e84ec78447f09a7f666911e23ae6>:0 \n[MonoDroid]   at Xamarin.Forms.Platform.Android.AppCompat.NavigationPageRenderer.Dispose (System.Boolean disposing) [0x000e4] in D:\\agent_work\\1\\s\\Xamarin.Forms.Platform.Android\\AppCompat\\NavigationPageRenderer.cs:162 \n[MonoDroid]   at Java.Lang.Object.Dispose () [0x00000] in /Users/builder/data/lanes/5809/22d97e15/source/monodroid/external/xamarin-android/src/Mono.Android/Java.Lang/Object.cs:203 \n[MonoDroid]   at Xamarin.Forms.Platform.Android.AppCompat.Platform+<>c__DisplayClass35_0.<SetPage>b__0 () [0x00015] in D:\\agent_work\\1\\s\\Xamarin.Forms.Platform.Android\\AppCompat\\Platform.cs:256 \n[MonoDroid]   at Java.Lang.Thread+RunnableImplementor.Run () [0x00008] in /Users/builder/data/lanes/5809/22d97e15/source/monodroid/external/xamarin-android/src/Mono.Android/Java.Lang/Thread.cs:36 \n[MonoDroid]   at Java.Lang.IRunnableInvoker.n_Run (System.IntPtr jnienv, System.IntPtr native__this) [0x00008] in /Users/builder/data/lanes/5809/22d97e15/source/monodroid/external/xamarin-android/src/Mono.Android/obj/Release/android-26/mcw/Java.Lang.IRunnable.cs:81 \n[MonoDroid]   at (wrapper dynamic-method) System.Object.88dadd17-2b6c-4312-9fb5-b09f357d0560(intptr,intptr)\nWhat do you think?\nUpdate: https://forums.xamarin.com/discussion/102005/after-resume-the-app-prism-navigation-crashes-my-app-with-masterpage. ",
    "BrettJaner": "Hi @brianlagunas, I can see where you're coming from.  The more I think about the above proposed change the more I realize how much more dangerous it could be than I originally thought.  Still I'm trying not to copy and maintain a separate version of the ModuleManager.  What if we just made LoadModulesThatAreReadyForLoad() a virtual method?  With an understanding of when/where the ModuleInfos go through ModuleState changes.  I should be able to do the following in a subclass of ModuleManager:\n    protected override void LoadModulesThatAreReadyForLoad()\n    {\n        var initializationExceptions = new List<ModuleInitializeException>();\n\n        while (true)\n        {\n            try\n            {\n                base.LoadModulesThatAreReadyForLoad();\n\n                break;\n            }\n            catch (ModuleInitializeException e)\n            {\n                initializationExceptions.Add(e);\n            }\n        }\n\n        if (initializationExceptions.Any())\n            throw new AggregateException(initializationExceptions);\n    }\n\nThoughts?. Worked like a charm.  Pull Request is open.. ",
    "mmbeyrem": "Hi\nWe may rename the interface IPageDialogService to IPageDialogServiceAsync,\nif we believe all methods will be based on await async\n2017-01-27 9:08 GMT+01:00 Bart Lannoeye notifications@github.com:\n\nTL;DR: methods returning a Task should have the suffix Async.\nIt's best practice to name all async (Task based) methods Async. This not\nonly makes the API clear to the programmer (who might just see it with\nIntelliSense) but also to a possible code reviewer, flagging forgotten\nawait calls much easier.\nBut who am I? So a quote by Stephen Toub:\nIf a public method is Task-returning and is asynchronous in nature (as\nopposed to a method that is known to always execute synchronously to\ncompletion but still returns a Task for some reason), it should have an\n\u201cAsync\u201d suffix. That\u2019s the guideline. The primary goal here with the naming\nis to make it very obvious to a consumer of the functionality that the\nmethod being invoked will likely not complete all of its work\nsynchronously; it of course also helps with the case where functionality is\nexposed with both synchronous and asynchronous methods such that you need a\nname difference to distinguish them. How the method achieves its\nasynchronous implementation is immaterial to the naming: whether\nasync/await is used to garner the compiler\u2019s help, or whether types and\nmethods from System.Threading.Tasks are used directly (e.g.\nTaskCompletionSource) doesn\u2019t really matter, as that doesn\u2019t affect the\nmethod\u2019s signature as far as a consumer of the method is concerned.\nOf course, there are always exceptions to a guideline. The most notable\none in the case of naming would be cases where an entire type\u2019s raison\nd\u2019etre is to provide async-focused functionality, in which case having\nAsync on every method would be overkill, e.g. the methods on Task itself\nthat produce other Tasks.\nAs for void-returning asynchronous methods, it\u2019s not desirable to have\nthose in public surface area, since the caller has no good way of knowing\nwhen the asynchronous work has completed. If you must expose a\nvoid-returning asynchronous method publicly, though, you likely do want to\nhave a name that conveys that asynchronous work is being initiated, and you\ncould use the \u201cAsync\u201d suffix here if it made sense. Given how rare this\ncase should be, I\u2019d argue it\u2019s really a case-by-case kind of decision.\nI hope that helps, Steve\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/918#issuecomment-275610297,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ALko0dykL1YHpfMMHfEb3K2G3CBEsXHkks5rWaYXgaJpZM4LvTdR\n.\n. \n",
    "rmenezes": "I'm not quite sure if I understood correctly your question but try to use:\nNavigationService.NavigateAsync(new Uri($\"http://tempuri.org/{nameOfNewPage}\", UriKind.Absolute));\nThis will clear all the stack navigation and the user will not go back to the creating page.. ",
    "snowppy": "This is how my navigation stack looks like before the create page:\nLwdMasterDetailPage/LwdNavigationPage/ProjectsListPage\nso I navigate one level down to : \nLwdMasterDetailPage/LwdNavigationPage/ProjectsListPage/CreateProjectPage\nwhen I am finished with the create page I want to navigate to :\nLwdMasterDetailPage/LwdNavigationPage/ProjectsListPage/SessionsListPage\nWhich is essentially pop the create page and move to the SessionsListPage with the right navigation parameter.\n In the suggestion above I will loose the first part of the path so any back action will not navigate correctly.. Thanks I will try it out.  @ brianlagunas How is this handled internally, will the request for an absolute path remake all the pages or it will reuse the existing and just create the last page on the navigation?. @ brianlagunas Thank you for the explanation.  It would be nice to have the option as you suggest to be able to remove pagesINavigationService.Remove(2). It would be better not to have the flash. You can work around not using modal pages in the remove pages scenarios. . ",
    "matrostik": "@brianlagunas \n\nto answer your question, it recreates eveything\n\nSo what the right way to load data? Right now i am using NavigatedTo method for that, but if my deep link too long it will load a lot of unnecessary data.. ",
    "Depechie": "Just to be sure, is there any scenario that a direct remove will be necessary? ( leaving out the marginal uses )\nAren't we actually looking for a scenario that we want forward navigation and have the ability to remove the 'previous' page? If so, can't we indicate this with the Navigate method with a bool or something? ( not sure the navigation service knows what the previous is in the stack - but I would assume it does ). I like the interface approach for the same reason you are mentioning, not touching the current signature.\nAlthough it would make discoverability of this new feature not easy, so there is also something positive about adding an extra overload for the NavigateAsync method.\nBut adding a Remove method ( like you first suggested ), sound not ok for me :)\nNow wait what others have to say.... ",
    "guidebee": "This is like Android's FLAG_ACTIVITY_NEW_TASK and FLAG_ACTIVITY_TASK_ON_HOME. \nThe scenario I have is like\nthe current stack is   ...../ViewA/ViewB/ViewN\nWhen  form ViewN can Navigation to ViewO and ViewO can navigate back to ViewN, like a circle, \n    ViewN->ViewO->ViewN  \nViewN and ViewO also have a back button ,need to navigate back to ViewB(before ViewN is on top of stack)\nIf I use Navigate from ViewN and ViewO, the stack will became too deep.  thus this is no way for the back button to navigate back to ViewB.\nSo I just want a method to replace top page on the stack,  like\n..../ViewA/ViewB/ViewN   --> ..../ViewA/ViewB/ViewO\n. No, not in NavigationPage,  I have to custom the page header, the default navigation Page doesn't fit for our app.     all page is a regular content page. . Thanks, I did try use Goback and then Navigate ,doesn't seems work as expected, that's why I asked for a replace method,    is it OK  to call Navigate immediately after Goback?    Maybe I need to implement a FlipPage (with 2 child pages) myself :-)? . Thank you Brian, then I have to find alternative solution.. Thank you, I will give it try tomorrow. . @brianlagunas Just want to let you know, this trick works as expected, thanks a lot.. Thanks, this is not I wanted, I don't want to reset the whole stack, just want to replace the top page on the stack, everything underneath will remain.. ",
    "maxal1917": "Here is another scenario for you to think about when you design your approach.\nI have two modes to view particular content in my app, standard and advanced. I have two pages, one is StandardPage, another is AdvancedPage. I have a button that allows to switch between this two modes, basically from StandardPage I can navigate to AdvancedPage and vice versa. When such particular navigation happens, I would like it to be removed from the stack. If I navigate from any of these pages somewhere else, I would like it to be left in the stack.. @djcparker  looks like ../ option covers that. It's very similar to what @guidebee  described, it's just in my case I'm within Navigation page, my stack is MasterDetail/Navigation/Main/Standard <-> MasterDetail/Navigatoin/Main/Advanced.\nWith the caveat that instead of \"Main\" there can be something else, there can be more than one way to arrive to Standard or Advanced page, and I want to switch back and forth between them, and when Back button is pressed, go back to where I came from.. ",
    "wowfood": "I do like the idea of the IDestoryAfterNavigation,, just one question.  Will this interface be XF only?  Or will it also be available in the WPF version.  (or is there something like this already in the WPF version I can make use of).  Just wondering as it's something that's been discussed a few times now about a project I'm working on.. I've found the easiest way to get a useful error is to do the following\nIn your request navigate add the following (adapt to your own needs)\n_regionManager.RequestNavigate(\n        _regionName, pageName, nr =>\n        {\n            if ( nr.Result.HasValue && nr.Result == false )\n            {\n                var error = nr.Error;\n            }\n        } );\n}\nIf you put a breakpoint just after var error you can then view what the actual error is there.  \n\nedit to say that this works in WPF, don't know if it'll do what you want with UWP.. While this has been marked as fixed / closed.  I appear to be having the same issue in Prism.Ninject.\nWould I be correct in assuming it's down to the same root cause?  It seems navigation called OnNavigatedTo and OnNavigatedFrom fine, but never calls any of my IsNavigationTarget.  . I'll try and put something together when I get the chance.  Right now both work and weekends are being kept busy.. Sorry haven't had a chance to yet.  We're on a tight schedule with our current project so for now I'm relying on the workaround.\nWhen I get a chance I'll have a go at following the steps in the other issue.\n----edit----\nI've had a quick look, but I'm struggling to find any ninject equivalent to the container.registrations stuff.  I'll keep looking round but can't promise much.  \n---edit---\nMade some progress (i think) but still not working.  Must be doing something wrong.. Yes that all seems to work, I've got the code all implemented, but it won't allow me to put together a PR.  I'm pretty certain the only difference between my code and yours is some syntax stuff.\n```\n        protected override IEnumerable GetCandidatesFromRegion(IRegion region,\n            string candidateNavigationContract)\n        {\n            if (candidateNavigationContract == null || candidateNavigationContract.Equals(string.Empty))\n            {\n                throw new ArgumentNullException(nameof(candidateNavigationContract));\n            }\n        var contractCandidates = base.GetCandidatesFromRegion(region, candidateNavigationContract);\n\n        if (!contractCandidates.Any())\n        {\n            //First try friendly name registration. If not found, try type registration\n            var matchingRegistration = _kernel\n                .GetBindings(typeof(object)).FirstOrDefault(r => candidateNavigationContract.Equals(\n                    r.BindingConfiguration.Metadata.Name,\n                    StringComparison.Ordinal));\n\n            //   var matchingRegistration = this.container.Registrations.Where(r => candidateNavigationContract.Equals(r.Name, StringComparison.Ordinal)).FirstOrDefault();\n            if (matchingRegistration == null)\n            {\n                matchingRegistration = _kernel\n                    .GetBindings(typeof(object)).FirstOrDefault(r => candidateNavigationContract.Equals(\n                        r.BindingConfiguration.Metadata.GetType().Name,\n                        StringComparison.Ordinal));\n            }\n\n            if (matchingRegistration == null)\n            {\n                return new object[0];\n            }\n\n            var kernelTarget = matchingRegistration.ProviderCallback?.Target;\n            var typeCandidateName = kernelTarget?.GetType().GetField(\"prototype\").GetValue(kernelTarget).ToString();\n\n            contractCandidates = base.GetCandidatesFromRegion(region, typeCandidateName);\n        }\n\n        return contractCandidates;\n    }\n\n```. As a note, I keep getting the following when I attempt to push my branch in order to put together a PR.  \ngit -c diff.mnemonicprefix=false -c core.quotepath=false push -v --tags --set-upstream origin Ninject_content_loader_implementation:Ninject_content_loader_implementation\nFatal: ArgumentException encountered.\nremote: Permission to PrismLibrary/Prism.git denied to wowfood.\nfatal: unable to access 'https://github.com/PrismLibrary/Prism.git/': The requested URL returned error: 403\nPushing to https://github.com/PrismLibrary/Prism.git\nCompleted with errors, see above.. I apologise and I'll make sure to test it more thuroughly next time.  \nAs for the branch stuff.  I checked out master, and created a local branch from that called Ninject_content_loader_implementation\nIt's when I attempt to push back that local branch to the remote, so that I can create a PR that I'm getting the above issue.  Like I said, i apologize for being a bit slow in this area.\n--edit--\nFigured it out.  Had to fork the branch to create teh PR, rather than branching directly off of it.. Ok, thanks.  . You should be inheriting from PrismApplication, not PrismApplicationBase.. need to update this comment so it reflects that this is a test for ninject and not unity.. remove commented out code...  possibly write separate test for manual binding and for bindings using RegisterTypeForNavigation. Mention of unity again.. Yup, I'll remove it.. I was toying around with something else to see if I could get the type checking working through RegisterTypeForNavigation.  I'll use the commented out line for now rather than the RegisterTypeForNavigation as that's what the other tests appear to use.. Yup I'll get rid of it.  . ",
    "14skywalker": "I have read this discussion and was thinking about another solution. Would it be a solution to include a marker on the stack to go back to. I was thinking about an anchor like this:\nIf this stack looks like this  /ViewA/ViewB\u2693/ViewC/ViewD\nthan NavigateAsync(\"\u2693/ViewE\")  would result in /ViewA/ViewB\u2693/ViewE\nand NavigateAsync(\"\u2693\") would result in /ViewA/ViewB\u2693\n. ",
    "andreax64": "I have the same problem with the same platform at the same point with Prism.WPF 6.2.0.\nThe debugger screenshot:\n\n. ",
    "Diaver": "@brianlagunas @dvorn @andreax64 \n928 fixed this issue!\n. ",
    "eldhogeorge86": "Thank you for the information. Could you let me know when PRISM 6.3 will be released?. ",
    "kadamgreene": "That is totally what the problem was!!  Is there any documentation anywhere that gives us these kinds of mappings (names -> type).\nFrom: Brian Lagunas [mailto:notifications@github.com] \nSent: Tuesday, January 31, 2017 2:26 PM\nTo: PrismLibrary/Prism Prism@noreply.github.com\nCc: Adam Greene adam@cognitivex.com; Author author@noreply.github.com\nSubject: Re: [PrismLibrary/Prism] Prism.Autofac -- Cannot Resolve INavigationService (#929)\nI don't use Autofac, so I can't help you there. But, I noticed in the error message that you are asking for the INavigationService named \"navigation\" in a ctor of your VM. This is not correct. Is must be names navigationService (case sensitive) in order to work.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/PrismLibrary/Prism/issues/929#issuecomment-276448177 , or mute the thread https://github.com/notifications/unsubscribe-auth/ABOBN4dXgzL8pOPaXX6u-cXXNk_efPEfks5rX3zJgaJpZM4Ly_WG .  https://github.com/notifications/beacon/ABOBN-frd5MWGXdT2HjuYM0_Yu7IwzDCks5rX3zJgaJpZM4Ly_WG.gif \n\nNo virus found in this message.\nChecked by AVG - www.avg.com http://www.avg.com/email-signature \nVersion: 2016.0.7998 / Virus Database: 4756/13870 - Release Date: 01/31/17\n. ",
    "devperson": "I had same issue. Thanks @brianlagunas . I'm too having same issue. @leroygumede  have you able to find solution for this?. ",
    "KSemenenko": "@brianlagunas Pages from your link does not exist. And the problem is still there.\n\"Prism.Autofac.Forms\" version=\"7.1.0.431\" . @dansiegel Thanks a lot.. ",
    "tossingc": "That's great news!  Any idea when that might be decided on and implemented?  I might have some bandwidth to help with the implementation.. ",
    "huoxudong125": "If the login is separate module L need a service in another module A, I want to load service module A first then load the  login module L. then load the other module such as module B,module C.\n```\n             Yes          \nA-->L-- ---->B->C\n        | \n        |  'No'\n        |----Exit\n``\nI need load the moduleB,C` in login module as dynamically load modules?\n. @dvorn I need to modify the ModuleManager to  procees modules load steps.Yes?\nHow to gracefully exit form the progress of load modules, when invalid user login.I want to add a separate module for login and integrate the login module easily to Prism Application ,don't need to modify more code.\nSo I want to load login module first ,then check user is valid  or not when login module is loaded.if user is not valid ,exit application as soon as possible.\n. @dvorn Thanks  for your replies. ",
    "taublast": "Have solved this using a renderer:\n```\nusing System;\nusing System.Linq;\nusing Android.Content;\nusing Android.Graphics;\nusing AppoMobi.Xam.Android.Renderers;\nusing Xamarin.Forms;\nusing Xamarin.Forms.Platform.Android;\nusing Xamarin.Forms.Platform.Android.AppCompat;\n[assembly: ExportRenderer(typeof(NavigationPage), typeof(XamNaviPageRenderer))]\nnamespace AppoMobi.Xam.Android.Renderers\n{\n    //*********\n    public class XamNaviPageRenderer : NavigationPageRenderer\n    //***********\n    {\n    //-----------------------------------------------------------------------------------------------------------\n    public XamNaviPageRenderer(Context context) : base(context)\n    //-----------------------------------------------------------------------------------------------------------\n    {\n    }\n\n    //-----------------------------------------------------------------\n    private NavigationPage FormsControl { get; set; }\n    //-----------------------------------------------------------------\n\n    //-----------------------------------------------------------------------------------------------------------\n    protected override void OnElementChanged(ElementChangedEventArgs<NavigationPage> e)\n    //-----------------------------------------------------------------------------------------------------------\n    {\n        base.OnElementChanged(e);\n\n        if (e.OldElement != null || Element == null)\n        {\n            return;\n        }\n\n        try\n        {\n            //do your stuff here\n            //set manually : SetBackgroundColor(Xamarin.Forms.Color.FromHex(\"#000000\").ToAndroid());\n            //or use the contained page color\n            FormsControl = Element;\n            var pageInside = FormsControl.Pages.First();\n            SetBackgroundColor(pageInside.BackgroundColor.ToAndroid());\n        }\n        catch (Exception ex)\n        {\n            System.Diagnostics.Debug.WriteLine(@\"            ERROR: \", ex.Message);\n        }\n    }\n\n\n}\n\n}\n```\n. ",
    "tonholis": "Hi @brianlagunas !\nI'm using the latest version of Xamarin Prism (on April 14), and I get the same error. But in my case, it occurred in a custom Entry Behavior that I created and I didn't check for null on TextChangedEventArgs.NewTextValue. My fault.\nBut I noticed that on PageDestroy the BindingContext is changed and bubbled to all controls in my page. Is there any way to avoid this? Check the stack trace:\nat MyApp.Controls.Behaviors.MaskBehavior.HandleTextChanged (System.Object sender, Xamarin.Forms.TextChangedEventArgs e)\n  at (wrapper delegate-invoke) System.EventHandler`1[Xamarin.Forms.TextChangedEventArgs]:invoke_void_object_TEventArgs (object,Xamarin.Forms.TextChangedEventArgs)\n  at Xamarin.Forms.Entry.OnTextChanged (Xamarin.Forms.BindableObject bindable, System.Object oldValue, System.Object newValue)\n  at Xamarin.Forms.BindableObject.SetValueActual (Xamarin.Forms.BindableProperty property, Xamarin.Forms.BindableObject+BindablePropertyContext context, System.Object value, System.Boolean currentlyApplying, Xamarin.Forms.BindableObject+SetValueFlags attributes, System.Boolean silent)\n  at Xamarin.Forms.BindableObject.SetValueCore (Xamarin.Forms.BindableProperty property, System.Object value, Xamarin.Forms.BindableObject+SetValueFlags attributes, Xamarin.Forms.BindableObject+SetValuePrivateFlags privateAttributes)\n  at Xamarin.Forms.BindingExpression.ApplyCore (System.Object sourceObject, Xamarin.Forms.BindableObject target, Xamarin.Forms.BindableProperty property, System.Boolean fromTarget)\n  at Xamarin.Forms.BindingExpression.Apply (System.Object sourceObject, Xamarin.Forms.BindableObject target, Xamarin.Forms.BindableProperty property)\n  at Xamarin.Forms.Binding.Apply (System.Object newContext, Xamarin.Forms.BindableObject bindObj, Xamarin.Forms.BindableProperty targetProperty)\n  at Xamarin.Forms.BindableObject.ApplyBindings (System.Boolean skipBindingContext)\n  at Xamarin.Forms.BindableObject.ApplyBindings ()\n  at Xamarin.Forms.BindableObject.SetInheritedBindingContext (Xamarin.Forms.BindableObject bindable, System.Object value)\n  at Xamarin.Forms.Element.SetChildInheritedBindingContext (Xamarin.Forms.Element child, System.Object context)\n  at Xamarin.Forms.Element.OnBindingContextChanged ()\n  at Xamarin.Forms.View.OnBindingContextChanged ()\n  at Xamarin.Forms.BindableObject.SetInheritedBindingContext (Xamarin.Forms.BindableObject bindable, System.Object value)\n  at Xamarin.Forms.Element.SetChildInheritedBindingContext (Xamarin.Forms.Element child, System.Object context)\n  at Xamarin.Forms.Element.OnBindingContextChanged ()\n  at Xamarin.Forms.View.OnBindingContextChanged ()\n  at Xamarin.Forms.Grid.OnBindingContextChanged ()\n  at Xamarin.Forms.BindableObject.SetInheritedBindingContext (Xamarin.Forms.BindableObject bindable, System.Object value)\n  at Xamarin.Forms.Element.SetChildInheritedBindingContext (Xamarin.Forms.Element child, System.Object context)\n  at Xamarin.Forms.Element.OnBindingContextChanged ()\n  at Xamarin.Forms.View.OnBindingContextChanged ()\n  at Xamarin.Forms.BindableObject.SetInheritedBindingContext (Xamarin.Forms.BindableObject bindable, System.Object value)\n  at Xamarin.Forms.Element.SetChildInheritedBindingContext (Xamarin.Forms.Element child, System.Object context)\n  at Xamarin.Forms.Element.OnBindingContextChanged ()\n  at Xamarin.Forms.View.OnBindingContextChanged ()\n  at Xamarin.Forms.BindableObject.SetInheritedBindingContext (Xamarin.Forms.BindableObject bindable, System.Object value)\n  at Xamarin.Forms.Element.SetChildInheritedBindingContext (Xamarin.Forms.Element child, System.Object context)\n  at Xamarin.Forms.TemplatedPage.SetChildInheritedBindingContext (Xamarin.Forms.Element child, System.Object context)\n  at Xamarin.Forms.Element.OnBindingContextChanged ()\n  at Xamarin.Forms.Page.OnBindingContextChanged ()\n  at Xamarin.Forms.ContentPage.OnBindingContextChanged ()\n  at Xamarin.Forms.BindableObject.BindingContextPropertyChanged (Xamarin.Forms.BindableObject bindable, System.Object oldvalue, System.Object newvalue)\n  at Xamarin.Forms.BindableObject.SetValueActual (Xamarin.Forms.BindableProperty property, Xamarin.Forms.BindableObject+BindablePropertyContext context, System.Object value, System.Boolean currentlyApplying, Xamarin.Forms.BindableObject+SetValueFlags attributes, System.Boolean silent)\n  at Xamarin.Forms.BindableObject.SetValueCore (Xamarin.Forms.BindableProperty property, System.Object value, Xamarin.Forms.BindableObject+SetValueFlags attributes, Xamarin.Forms.BindableObject+SetValuePrivateFlags privateAttributes)\n  at Xamarin.Forms.BindableObject.SetValue (Xamarin.Forms.BindableProperty property, System.Object value, System.Boolean fromStyle, System.Boolean checkAccess)\n  at Xamarin.Forms.BindableObject.SetValue (Xamarin.Forms.BindableProperty property, System.Object value)\n  at Xamarin.Forms.BindableObject.set_BindingContext (System.Object value)\n  at Prism.Common.PageUtilities.DestroyPage (Xamarin.Forms.Page page)\n. Great! Makes sense now.\nThanks for the explanation and your suggestion.  I'll review it.\n. Hey @brianlagunas!\nCan I show you my project? \nDo you have a Bitbucket account to invite you?. Ok. \nI tried to reproduce in a new clean project with no success. I'm wondering if this could be caused by another package in my project...\nWhat's your email?. Yeah... I'm afraid so.\nBut as you see at stack trace above, I jumped all my code stuff to call PageDialogService directly and got that error. \nI sent the project to you.\nRight at HomePageViewModel I added a direct call to PageDialogService  to jump the rest of the code.\n. No way!!! :flushed:\nIs you machine touched by gods???\nDo you recommend some sort of cleaning in my dev environment?\nPS: Thanks! . Yeah man... I opened the project in another machine and it worked.\nI'm gonna repair my VS installation and to see if I can solve this build/deploy issue.\nThank you very much for your time!. ",
    "odahan": "I 'm just having same problem when navigating. All is ok until I play with fields in View that are bound to the viewmodel (two pickers, \"new xamarin model\" having binding). VS, Windows, Xamarin and Prism are up to date at the date of this message.\nUntil I'm not touching the pickers, all is ok I can navigate. Once a picker has been used to select a value the navigation is returning the error (cannot destroy...).\nI'm using a master/detail page for navigation and this is working (almost) well (navigating to any new location resets the history and I'm losing my hello page, can be disturbing for user, going back one more time without seeing again the hello page and he is out of the app !. But this is another story !)\nSo for the navigation error, once some binding has been activated by playing with one control, boom!, navigation fails and the menu (the master page) is staying in place. But the most funny is when you click again to navigate, the right page is coming...\nThis problem can be seen on Android, not on UWP (for iOS I dunno my Mac is shut down at this time...).\nIn all cases many thanks Brian for this very good Prism adaptation to Xamarin Forms !. @brianlagunas No problem I can understand. It was just in case you'll already have an answer (or a clue...). \nI'll try to isolate the problem. thanks.. I'm using it for the first time on a new project (the first time on\nXamarin.Forms, I used Prism for WPF and I participated a bit in Prism for\nWinRT).\nIt is a very clever library for MVVM that well fit the needs for\ncross-platform development.\nI think I'll not use Unity but DryIoc.\nAt this time I have just a few prototypes written (using Unity), and all\nseems to work correctly.\nApart a strange problem with dependency injection on the 1st screen, all\ndependencies in the constructor of the main viewmodel are null... works\nfine on other pages but not the 1st one. I'm rewriting these tests using\nDryIoc instead of Unity to see if this is making a difference (Unity is\ndead and in all cases DryIoc is faster and maintained).\nOlivier Dahan\n2017-08-04 14:36 GMT+02:00 JaccoDieleman notifications@github.com:\n\nWe're using it for all of our recent apps and are very happy with it. We\ncan't do proper MVVM without it. We are using the Unity container, but we\nare considering switching to Autofac. The way Prism has been set up makes\nthe switch easy. Which is nice as well!\nAuthor: 4PS B.V.\nWebsite: https://www.4ps.nl/\nApple: https://itunes.apple.com/nl/app/4ps-buitendienst/id1173821193\nAndroid: https://play.google.com/store/apps/details?id=com.fps.fsa\nWindows Store:https://www.microsoft.com/nl-nl/store/p/4ps-\nbuitendienst-app/9nblggh4wrt3?ocid=badge&rtc=1\nSome screenshots of our flag ship app:\n[image: home-screen]\nhttps://user-images.githubusercontent.com/15797374/28968773-f342f348-7921-11e7-80de-026ff40b4b50.png\n[image: landing-page]\nhttps://user-images.githubusercontent.com/15797374/28968774-f34e0896-7921-11e7-9fa7-a979c2d31775.png\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/1016#issuecomment-320237666,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEyLiHYCe-yOrdpuZro_eue39Qszq2NKks5sUxA_gaJpZM4M8WWF\n.\n\n\n-- \nOlivier Dahan\n. ",
    "v1rtu41m4n": "Thank you for your quick response!\nI'll take your suggestion into account\nHow can I register my page in the container as singleton?\nThe method that I was using does not expose an argument for this Container.RegisterTypeForNavigation<PageA>();\nIf I register an instance of the page as this var PageAInstance = new PageA();\n            Container.RegisterInstance(PageAInstance);\nThe the navigation occur it still creates a new instance, is there a way to register the pages keeping the navigation functionality? can you pleas give me an example?\n. Thank you very much Brian, you save me a lot of researching time . Hello Brian, me again.\nI have a new problem with the working solution when I move to version 6.3.0-pre2, now when I come back to the page, it does not have a binding context it returns null. Is there something new that I have to consider to get this working again?. The scenario is:\nI have a master detail showing a listivbiew with many items, like a fb timeline, the user interacts with it but it navigates to another page (from the master) to do anything else, when they return to this page, I want this pages in the same state that It was after I leave it. with the singleton, before I update to version 6.3 I was doing well, but after the update, when the page was loaded again it says that the binding context is null. I I don use a singleton, the the view model was recreated every time that I show this page it the described scenario.. ### Package info\n\nPlatform: Android API 23\nPrism version: 6.3.0-pre2\nXamarin version: 2.3.3.193\n\nRepro steps\n\nI have a MasterDetail Page\nFrom Master I navigate to a TabbedPage that host two pages (ViewA and ViewB) this navigation was performed invoking a navigation command from the master in this way 'await _navigationService.NavigateAsync(target);' where target equals 'NavigationPage/TabbedPage/ViewA' to keep the master detail visible\nOn ViewA I have a ListView with a collection of items, the user tap on an item selecting it and fire a ViewC to see the details await _navigationService.NavigateAsync(nameof(ViewC), navParams, false); (the useModalNavigation was set to false to show the native back button to the user)\nOn ViewC the user do an action that need to be notified to the ViewA on navigating back when it call 'var navParams = new NavigationParameters();\n                        navParams.Add(\"ParamName\", ParamObject);\n                        await _navigationService.GoBackAsync(navParams);'\nWhen ViewA is showed to the user it does not fire neither 'OnNavigatedTo' nor  'OnNavigatingTo' events\n\nIf I do not set \"useModalNavigation\" flag it works but I need to show the native back button to the user to navigate back in case that he do not do anything on ViewB\n. I am sorry but what you you mean of \"Repo app\" I don't know what to do :s . If I implement INavigationAware on the TabbedPage it was fired, is there any way to wire up this event to the ViewA???. oh OK. with the project that I currently working on is not possible because the confidentiality agreement with our client, but I will try to create a simple demo to reproduce this, in the meantime I do a workaround and implement an event to do notification between the vm's. ",
    "tillig": "Conversely, I don't use Prism, so I'm not really sure I can do much to help you. I'm one of the Autofac maintainers and figured you should at least be aware. Perhaps someone in the community who uses both products can help out.. I also noticed the Xamarin integration appears to reference Update so a complete solution should include that. (We're getting some discussion on that over in the discussion issue.). I'm not a Prism user but I have seen different ways different app types handle plugins. We try to describe some ideas - from lazy loading to assembly scanning to lambda registrations that get evaluated only at resolve in autofac/Autofac#811.\nThat said, I don't know that I can help too much in solving a problem where the issue is \"we need to drop new assemblies into the running application and have them loaded without restart,\" which is what that article earlier seems to allude to. That's actually sort of a bad thing from a DI perspective since one dependency may, for example, ask to enumerate the list of available plugins and then hold a reference to that list; followed by a new plugin getting loaded, causing the list to be stale/incorrect/inconsistent with the rest of the app. That's actually one of the primary reasons we're trying to get to the immutable container - that app inconsistency causes really challenging issues that are hard to troubleshoot.\nAgain, you can read all about that in autofac/Autofac#811 if you're interested.\nThe closest thing to the \"load plugins from assemblies\" that Autofac has is the dynamic assembly scanning feature which may help if you can at least do the location of the plugins at app startup rather than during runtime.\nYou also may be interested in implementing a custom IRegistrationSource, which is how we allow folks to dynamically provide object registrations at runtime. We don't have docs on that specifically, but there are several examples in the Autofac source - it's how we support relationships like IEnumerable<T> automatically.. We are pretty well into the point where we're planning on removing Update. The benefits far outweigh the drawbacks and we still haven't come across something where there's been a really good reason to continue supporting it. If we decide to change any decision, it'll probably be posted in that issue so I would recommend following there - it'll be hard to try and catch literally every place the discussion has spread and try to update all those places.\nI would agree that the code needs to be adapted. I don't have much insight as to exactly how that should happen, but a good starting point for folks working on that is to check out the discussion issue and actually read through it. It's long, but it has a lot of information as well as other peoples' use cases that we've tried to address as they come up.. I won't try to convince you one way or the other (though it'd be cool if Autofac support continued) but from an IoC container perspective, immutability is actually pretty common and getting more common - because of that whole \"inconsistent app behavior\" thing. SimpleInjector was already mentioned in this thread, but LightInject and the new Microsoft.Extensions.DependencyInjection container are also immutable. Containers that appear immutable are sometimes trying behind-the-scenes to rebuild the whole container for you... which actually can have even more challenging side effects, like when singletons have to be disposed and rebuilt.\nMy point is that it may be interesting to take a look at the notion of modules as they stand and consider a different design around them and how they interact with IoC containers. For example, maybe module loading doesn't happen inside the container and instead modules only support property injection or a manual constructor injection. That's kind of how ASP.NET Core middleware works - it appears stuff is going through DI, but in reality there's some reflection going on to locate the parameter types that need to be resolved and those are manually poked in by the integration.\nAgain, if you can't/won't/don't want to get it to work, I totally understand. Just figured there may be a way to change the problem being solved and, at the same time, open up wider support for other IoC containers.. ",
    "ellisnet": "@NewBLife @perssondan Hello all, for the last few days I have been working on a fix to get rid of the use of ContainerBuilder.Update() in Prism.Autofac.  If you want to monitor my progress, the branch I am working in is here.\nMy idea is that the updated version of Prism.Autofac will have two modes for the container - Mutable and Immutable:\n- Mutable is the way that Prism.Autofac works now - prior to my update.  You can register types at any time, and you use the ContainerBuilder.Update() process to update the container.  Mutable is currently the default mode, so no breaking changes will be introduced with the update that I am working on.  Existing Prism.Autofac applications will continue to work fine (for now) with no changes after this update is in the official NuGet package.\n- Immutable is the new mode that I am developing, where all types must be registered prior to the container being built.  Types cannot be registered after the container is built (i.e. the container is immutable, which is the recommendation from the designers of Autofac).\nYou set Prism to use the new mode early in your application initialization with:\nPrism.Autofac.PrismApplication.ContainerType = Prism.Autofac.AutofacContainerType.Immutable;\nAt some point in the future, there will be a breaking change where Immutable becomes the default, and you will have to set the PrismApplication.ContainerType to AutofacContainerType.Mutable to keep using ContainerBuilder.Update().\nThen at a later point in the future - probably around the time that Autofac actually eliminates the ContainerBuilder.Update() method - there will be no option for a Mutable container.\nPlease understand that my update effort is a work in progress and I am still changing things around as I run into issues related to when Prism wants to register types in the IOC container.  My only reason for adding this comment at this time is just to let people know that I am working on this, so other people don't feel like they need to (but they are welcome to come up with a better solution, of course).. @dansiegel I am not.  Should I be? Do I need a Slack subscription?. @dansiegel got me on Slack...  @brianlagunas Understood.  I am moving quickly, so at this exact moment I would like to keep implementing/testing it the way I am; it will be easy to rip out the parts that keep it backwards compatible.. I added a response to @tillig in the Autofac issue discussion - to explain that ContainerBuilder.Update() is being removed from Prism.Autofac.Forms.. All -\nI am close to wrapping up my updates to the Autofac implementation of Prism for Xamarin.Forms (Prism.Autofac.Forms) featuring an immutable container that is built once and is not (and cannot be) updated via ContainerBuilder.Update().  I have been testing it with just about every Prism.Forms sample I can get my hands on, though I still have to test some samples on some platforms.  And I will look at implementations for UWP and WPF as requested by @brianlagunas above.\nOne question:\nThe toughest thing was making the implementation of IModule work.  Because modules can be InitializationMode.WhenAvailable (initialize at app start) or InitializationMode.OnDemand (initialize when loaded) - but both of these occur after the Autofac container has been built.  So if you need to register types with the IoC container, you can't do it in the Initialize() method of your module (which is called after IoC container is built).\nI can't change the definition of IModule, and not all modules will need to register anything with the IoC container.  So I created a new IPreRegisterTypes interface which you need to implement on any modules (i.e. implementations of IModule) that must register types in the container.\nSo - this:\npublic class SampleModule : IModule\n{\n    private readonly IContainer _container;\n    public SampleModule(IContainer container)\n    {\n        _container = container;\n    }\n\n    public void Initialize()\n    {\n        _container.RegisterTypeForNavigation<SamplePage>();\n    }\n}\n\nBecomes this:\npublic class SampleModule : IModule, IPreRegisterTypes\n{\n    private readonly IContainer _container;\n    public SampleModule(IContainer container)\n    {\n        _container = container;\n    }\n\n    public void Initialize()\n    {\n        //do any initialization that doesn't involve registering types here    \n    }\n\n    public void RegisterTypes(IContainer container)\n    {\n        container.RegisterTypeForNavigation<SamplePage>();            \n    }\n}\n\n(The above SampleModule with IPreRegisterTypes has been tested and is working correctly right now.)\nImportant note: Not all modules will need to register types, so IPreRegisterTypes is only needed for those that do.  If someone was producing a \"family\" of modules, they could do all of their type registration in one module - e.g. the RegisterTypesModule - and the other modules would not need to implement IPreRegisterTypes.\nRules for modules that implement IPreRegisterTypes:\n- Only do registrations in RegisterTypes() method.  Do not try to resolve anything via the container in that method, or in the constructor - resolving via the container in constructors of modules that don't implement IPreRegisterTypes is fine.  Resolving services via the container in the Initialize() method is fine in all modules.\n- Important: For modules that implement IPreRegisterTypes, the module will be instantiated twice: once at app startup, to run RegisterTypes(); and once according to the specified InitializationMode.  So the constructors on these modules should be super light - another good reason to have a dedicated RegisterTypesModule.\n- Important: Because the module will need to be instantiated once before the IoC container has been built (to run RegisterTypes()), it must have a public parameter-less constructor OR a constructor that takes one parameter - either IContainer (as the example above has) or IAutofacContainer (a new abstraction of an Autofac ContainerBuilder + Container).\nSo, I guess my question is:  Are we okay with that? Does someone have a better suggestion for the name of the IPreRegisterTypes interface?  Would we rather see a sub-interface of IModule called ITypeRegisteringModule - that requires the RegisterTypes() method (and then your module would just implement ITypeRegisteringModule)?  Would we rather have a new concept of an IModuleRegistrar<MyModule> that does the type registering on behalf of the module, so we don't have the limitations on the module constructor?\nThoughts?. @dvorn I agree with you that a single immutable container - as is expected to be used by Prism.Autofac.Forms - doesn't look like it can work for WPF and dynamically-loading-modules scenarios.  \nI should be clear and say that I am trying to use a single dedicated Autofac IoC container for Prism.Forms' needs and for common things like INavigationService, etc.  There is nothing to stop an app that consumes Prism.Autofac.Forms from creating/using/disposing/re-creating its own Autofac containers.  \nAutofac is a flexible and powerful DI library, and by pulling in Prism.Autofac.Forms library into your app project, you already have the Autofac NuGet.  So, you could use that to create any containers that you need.  And from what I read in the blog you referenced, it sounds like WPF might need a multi-container solution - with some containers not being created at app initialization.  But [it is my understanding that] each container should be immutable, which is why they are eliminating the ContainerBuilder.Update() method.. @tillig - thank you for continuing to monitor and participate in this issue discussion. \nHere is what I understand:\n1) In creating your Autofac issue #811 back in Nov 2016, you wrote:  \"This issue is to learn from developers why they believe they need Update and see if there are better ways to handle the situations. If it turns out there is a totally unavoidable situation where Update is literally the only way to handle it, we need to determine how best to fix Update.\"  Correctly or not, I understood this to mean you were pretty set against allowing ContainerBuilder.Update() to live.  By marking it Obsolete, you are letting us know that it is going away.  If in Apr 2017 you are seriously considering retaining it, please let us know - as that changes things...\n2) Some of us want to be able to use Prism for the various platforms - UWP, WPF and Xamarin.Forms - and want to use the same IoC container for all platforms.  That way, we don't have to learn the particularities of different IoC containers when developing for different platforms. Some of us want to use the Autofac library (vs. Unity or the others) for all of those platforms.  Obviously, we don't want to write code that relies on functionality that is expected to be removed from Autofac in a version that is released in a year or so.\n3) Given (1) and (2), someone literally has to adapt the code for Prism-with-Autofac on its supported platforms to work with the forthcoming version of Autofac (that doesn't have container-update functionality).  I don't see what form of discussion changes that reality.\nSo that is where I am at.  I believe Dan S. that there could be a situation where some features of Prism are supported with Unity, but not with Autofac.  The \"load modules from a directory\" functionality might be one of those - it is not a feature that I anticipate using.\n(Since it is not possible to have a tone of voice in discussions like this, I hope it is clear that I am not angry or trying to shut down any discussion. I am just trying to acknowledge and re-state the reality that has led to the situation discussed in this issue.). And still looking for feedback on the [proposed] changes to module handling in Prism.Autofac.Forms.... For anyone still following this issue, I believe that I have completed my work. Based on important points made by @dvorn above, and after a discussion with @brianlagunas, I only worked on the implementation of Autofac for Prism for Xamarin.Forms (Prism.Autofac.Forms) - and not on anything for WPF or for UWP (without Xamarin.Forms).  I submitted Pull Request #1017 this afternoon.\n@perssondan You had offered to test the updated implementation a few weeks ago, so if you are still willing to do that, it would be helpful.  In the course of working on changes and testing them on iOS, Android and UWP - I spent quite a bit of time on several Prism.Forms app samples (from PrismLibrary/Prism-Samples-Forms and also from @dansiegel) - which you can view here.  Please note that all of the Autofac samples are duplicated in three different folders - see the readme.md file for more information about the differences between the samples in different Autofac folders.\nTo take a Prism.Autofac.Forms 6.3.0 application and convert it for use with the updated library, you would want to do the following in your Prism.Forms application code:\n\n\nReplace any references in your code to the Autofac IContainer interface with Prism.Autofac.Forms.IAutofacContainer - IAutofacContainer (and AutofacContainer which implements it) is a wrapper for an Autofac IoC container and the ContainerBuilder that is used to build it.  So, PrismApplication.Container is now an instance of IAutofacContainer instead of IContainer.\n\n\nSince IAutofacContainer wraps the ContainerBuilder, you now call type registration methods directly on the container.  Do not create a ContainerBuilder instance and then use it to update the container.\n\n\nSo this code:\nvar builder = new ContainerBuilder();\nbuilder.RegisterType<RecipeService>().As<IRecipeService>().SingleInstance();\nbuilder.Update(Container);\n\nBecomes simply:\nContainer.RegisterType<RecipeService>().As<IRecipeService>().SingleInstance();\n\nAnd type registration code like the example above MUST be placed in the overridden PrismApplication.RegisterTypes() method, or in a platform-specific IPlatformInitializer.RegisterTypes() method.  These are the correct places to do type registration in a Prism.Forms application, and ensure that the type registration occurs before the container is built (since registrations cannot be added post-container-build).\nRegistering pages and viewmodels stays the same, since you were already calling an extension method on the Container to register those.\n\nThe way that modules (i.e. instances of IModule) register their types has changed.  Any IModule that needs to register types should also implement IPreRegisterTypes and do its type registration in the IPreRegisterTypes.RegisterTypes() method as was discussed in this thread on April 4th.\n\nPlease take a look at the samples mentioned above - they demonstrate a lot of what can be done with Prism.Forms and I have tested them all quite thoroughly.\nOne additional note: At this time, it is easiest to continue using Autofac 3.5.2 with your Prism.Autofac.Forms-consuming app.  Autofac 4.x has been converted to .NetStandard - so pulling in that version from NuGet pulls all of the .NetStandard package references into your project.  It is my understanding that Prism will be updating to .NetStandard in the coming months, so at that time it may make more sense to move to Autofac 4.x.  However, the updated version of Prism.Autofac.Forms should work fine with Autofax 3.5.2 and any version 4.x.\nBut let me know if there are problems or questions.\nThank you, Jeremy\n. Hello @dvorn, thank you for your comments.\nYou asked: \"did you considered the possibility of making ContainerBuilder a property in PrismApplication so that ConfigureContainer() works directly with ContainerBuilder?\"\nYes.  My first attempt at using an immutable Autofac container was to just add a ContainerBuilder property to the PrismApplication class and expose it for type registration.  This approach was suggested by @tillig in one of the discussions that he linked to at the top of this issue.\nI eventually moved to creating the AutofacContainer class because of problems with this approach that I experienced over several days of trying to get things to work, particularly in a way that would seem logical to a consumer of Prism.Autofac.Forms.\nFor example, the RegisterTypes() methods in Prism.Forms typically work against the container; but now we would need a way for the developer to access the ContainerBuilder in a straight-forward way in those methods.\nAlso, the precedent had already been established that pages and viewmodels for navigation should be registered against the container (not a ContainerBuilder) in Prism.Autofac.Forms - here.  So that would be very confusing for developers if they have to register some types (pages/viewmodels) directly with the container; and some types with a builder.\nOver the course of dealing with these problems - and some others that are not coming to mind right now - I came to the conclusion that for Prism.Autofac.Forms' purposes, having one AutofacContainer object which handles both registration and resolution duties was a better design, easier for users of the library to consume, and more in keeping with how Prism.Forms works (e.g. with Unity).\nObviously, this design does not prevent a developer from creating and consuming their own Autofac containerbuilder and container instances for whatever they need them for (separate from the container that is used by Prism).. @dvorn Thank you again.  I think you have made points that are worthy of discussion; and maybe people who have used Autofac with Prism.Forms - or plan to use it - will have more thoughts on these points.\nI am doing this work because I have used Prism.Forms and Autofac quite a bit; and I plan to use Prism.Autofac.Forms quite a bit (now that a couple of things have been resolved in the PR I submitted).  I have been working on it (and with it) daily for several weeks now, and am currently working on a project that makes heavy use of the IModule implementation; so I feel pretty sure that I am \"shaking the bugs out\" of the Prism.Autofac.Forms' module handling.. According to Dan, he created this issue (at least partly) in response to a question I asked on Stack Overflow.\nMy question is here:\nBind ViewModel to XAML View in Prism.Forms\nMy question was a little more simple - just in relation to how to still get IntelliSense in my XAML views while editing them in Visual Studio (i.e. IntelliSense about the properties and commands on my ViewModels).  This is pretty straight-forward for Xamarin.Forms (without Prism), so just wondering if it is okay with Prism and/or if there is a technique that people use.\nI am interested in the Xamarin XAML Previewer angle, too.  But mostly just looking for IntelliSense for properties on my ViewModel at this moment.\nBrian or Bart - if you have a chance to review my question and have thoughts, I would love that.\n. I added a link to the blog from @nuitsjp to the answer to my question on StackOverflow.. @dvorn I disagree completely.  Registration of types in the IoC container is just one thing that you might want to do in your module initialization routine.  For example, if your module had something to do with interacting with a SQLite database, you might need to check to see if the database exists or not, and create it if not.  But this might never need to happen, based on whether the user uses that function of your app or not.  So it makes perfect sense that you would register any types in the IModule.RegisterTypes() method; but do other initialization in the IModule.Initialize() method (e.g. create the database as needed) - and this initialization could still happen OnDemand.\nAlso, I described a possibility in the discussion for issue #969 - that you might have a set of modules that do various things; and you might want to take all of the type registration code and put it in a single (dedicated?) module, so that all of your other modules could still have normal OnDemand or WhenAvailable initialization according to your wishes.\nI feel pretty strongly about this:  You really do not want to be forced to do all of your module initialization during app startup if you can help it; by designing things carefully, you can have that stuff happen when needed or during a time when the user expects the app to be \"busy\" - making you do it all during app initialization will hurt your ability to minimize your app's startup time.. It would probably have been easier to add a RegisterTypes() method to the IModule definition - that matches how the rest of Prism.Forms works.  Have a type to register?  Put it in the RegisterTypes() method...\nBut I didn't think that the scope of my project allowed for making changes to the definition of IModule, since that is defined outside of the Prism.Autofac.Forms library.. @dvorn Thank you.  The link that you sent was helpful; I did read through it and it is clear why you would not want to modify the definition of IModule specifically for Prism.Autofac.Forms.\nObviously there are differences between how Prism for WPF works and how Prism.Forms needs to work - mobile devices have different needs than computers, AOT compilation for iOS presents new problems (e.g. I think that loading extra app functionality on the fly via modules is restrictive), etc.\nAlso, it seems like the Autofac implementation for Prism.Forms could have some minor differences from the Unity implementation.  So, I would ask that - at least with respect to this \"feature\" of Prism.Autofac.Forms - the pull request be accepted as-is.  As it is programmed, it allows for increased flexibility for module and app developers (vs. requiring them to only do one type of module initialization).\nFinally, I believe that your suggestion could introduce a new problem:  If the Initialize() method for a module was called before the IoC container is built (as is necessary when doing type registration), then no type resolution from the container can occur in the Initialize() method.  Module developers could only do type registration or type resolution in the Initialize() method - not both.  This will be confusing for new Prism (with Autofac) developers - where telling them they have to do their type registration in a RegisterTypes() method is more straightforward (since that is where they have to do it in other places in Prism.Forms).\nThank you for your time and thoughts.. @dvorn I wanted to add one more comment:\nAt one point, I thought Brian L. wanted someone to update Prism with Autofac for (a) Xamarin.Forms, (b) UWP and (c) WPF all at the same time.  It is possible that I just read one of his comments incorrectly...  However, last week I connected with him, and we agreed that I should only worry about Prism.Autofac.Forms for now.  I do not plan to work on Prism with Autofac for UWP (without Xamarin.Forms) or WPF at this time.\nSo I am not sure if you had a concern that the changes that I made in Prism.Autofac.Forms would be replicated in those other platforms; but at this time they won't be.\nSorry for any confusion about that.. @dvorn - I addressed the issue of using a ContainerBuilder vs. an AutofacContainer in a response on issue #969 - so no need to rehash that here.\nIn your comment above, you are proposing two methods for IModules - RegisterServices() and ConfigureServices().  I believe that the \"standard\" for Prism.Forms is for types to be registered in the container in a method called RegisterTypes(). So RegisterServices() -becomes-> RegisterTypes().\nThen I don't know why you are proposing to replace Initialize() with ConfigureServices(). It seems like, when you have an immutable container where the module's types are registered separately from the module's initialization, the purpose of the Initialize() method is to \"use container to retrieve instances of other services and configure them\".\nSo, if you change your RegisterServices() method to RegisterTypes(); and your ConfigureServices() method to Initialize() (which is already defined in IModule); then what you are proposing is what I have submitted. :-)\nI still do not agree with this statement:  \"you still need to forbid on-demand modules\"\nThere is no reason at all that developers who consume Prism.Autofac.Forms shouldn't be able to decide whether they want their module's Initialize() method to run at app startup (WhenAvailable) or when the module is loaded by the app (OnDemand).\nYou wrote: \"Someone may use the services (registered types) before they were initialized properly.\"  I believe that the Prism framework itself handles the on-demand initialization via IModuleManager.LoadModule() - see example.\nDevelopers who create/consume modules will just need to know they need to load their module via IModuleManager.LoadModule() before they work with types defined in that module - or mark their modules as WhenAvailable - that shouldn't be too difficult to understand and work with; and I believe that it is consistent with how Prism.Forms modules generally work (e.g. with Unity).. @dvorn Understood.\nI think that developers who create modules will likely be some of the more savvy Prism consumers.  I think that they should be allowed to create modules which have delayed initialization - for the reasons specified above - with the understanding that they may need to guard [edit: was previously \"should guard\"] against registered types being used before the module is initialized/loaded (e.g. throw helpful exceptions).  OR they can make it clear in the documentation of their module that the module is only supported with WhenAvailable initialization.\nAutofac allows for complex registration/resolution logic, so something like this could be done - in RegisterTypes():\ncontainer.Register(ctx => isModuleInitialized ? new CustomService() : null)\n   .As<ICustomService>();\n//Or even better, throw a helpful exception\n\nThis is a much better situation than just saying that they can't create modules to be initialized OnDemand.. @dvorn I disagree. The type may not be usable until you initialize the module (in my example above, it was unusable).  There may be registered types that are fine to be used prior to the module being initialized.  It depends.\nThe best person to know (whether the registered type requires the module to be initialized or not) is the module developer. So my point was that we can let that person figure out how keep their modules from causing difficult-to-troubleshoot problems in apps that consume their modules.. I completely tested it with Autofac 4.5.0, which has been available on NuGet since the beginning of April.  The samples I tested it with are available here\nIf there is a change with Autofac 4.5.0 that might affect this PR, I am not aware of it. But I would certainly look into it, if you noticed something that made you wonder.... Apologies in advance if you know all of this already:  I tested the PR quite thoroughly with projects that had been upgraded to current .NetStandard goodness.  I spent quite a bit of time upgrading each of the various Prism for X.F samples to .NetStandard 1.4 per Oren Novotny's blog and then testing with latest Autofac.  Those samples are the ones referenced in my previous comment.\nIt is my understanding that upgrading to .NetStandard 1.4 is best, since .NetStandard 2.0 is a superset of 1.4; and that updating to 1.5 or 1.6 could allow use of APIs that will not be included in 2.0.  So I focused all of my efforts on 1.4.. Yes.  Thank you.  I intended only to offer an explanation of why my testing was with 1.4.  If someone suggested that this PR also needed to be tested against projects that had been upgraded 1.5 or 1.6, I would find time to do that.. @brianlagunas -\nThe PR - as it exists now, without your requested changes - ended up taking a lot more of my time than I expected.  A significant amount of this time was spent trying to use Autofac in a way that did not require the container to be abstracted, but also made sense to a consumer of the library.  This effort was not successful, so I created the AutofacContainer class (abstraction); and went with that.  Also a lot of time was spent testing the version that is presented in this PR; testing that would need to be repeated with a re-formulated use of Autofac.\nObviously it makes no sense for me to complain about the amount of time that I voluntarily spent on an open source project - when others have dedicated far more time to their contributions. I just wanted to mention that a significant time went into the PR as it exists today.  I will be looking at my availability for dedicating a similar amount of time to making the changes you have requested.\nThank you very much for your time, and for reviewing the PR code and sharing your thoughts.. ",
    "stevejbrother": "@ellisnet Has there been any progress on making Autofac work with Prism.Forms?. ",
    "ProDInfo": "I think that you don't understone.\nIf module does not have the supporting framweork an exception should be thrown.\nBut If in directory I have thir party libraries for other framewrok 2.0 not 4.0 and this libraries don't have modules but use in assembly, because the load can't redirect net 2.0 to 4.0, throw error.\nWith this implementation, don't throw an error when examine assemblies without IModule types inside. ",
    "LukeWATC": "I've published a repro to GitHub: https://github.com/LukeWATC/PrismIssueTest\nRun it in release mode to reproduce the issue. Any updates on this issue?. ",
    "KlockerTom": "Hi again,\nnow it\u00b4s getting more weird: i started the project with Xamarin Forms Version 2.3.3.180, and everything worked. Then i updated to 2.3.3.193, and it didn\u00b4t work anymore (no ToolbarItems visible on the TabbedPage to which i navigated).\nThen i downgraded to Xamarin Forms 2.3.3.180 -> the ToolbarItems are still not visible! Once you updated to 2.3.3.193 you have the problem \"in your project\" and downgrading the Xamarin Forms version doesn\u00b4t help anymore.\nThat\u00b4s realy curious. Hi Brian,\nhere you will find the sample: https://github.com/KlockerTom/TestApp\nAs mentioned: this sample worked as expected, but after updating to Xamarin Forms 2.3.3.193 it didn\u00b4t work. Then i downgraded to 2.3.3.180, but it still doesn\u00b4t work.\nMaybe you could have a look at it? It\u00b4s a very simple sample.\nThank you very much for your great work!!\nGreetings\nThomas. Hi Brian,\nthanks very much for your help. It works now (i\u00b4ve forgot to set a page title, that\u00b4s why the NavigationBar wasn\u00b4t showing).\nBut the problem is now that i have a \u201eback\u201c button on the top left corner. When the user taps this button i need to call some\nAsync methods to save some stuff.\nBut i can\u00b4t trigger it when the user tapped this back button (except on UWP, there the OnBackButtonPressed event is invoked).\nI\u00b4ve searched for two days now, but haven\u00b4t found any solution to solve this problem :(\nDo you have any idea for this problem?\nThank you very much!\nGreetings\nThomas\nVon: Brian Lagunas [mailto:notifications@github.com] \nGesendet: Montag, 13. M\u00e4rz 2017 15:37\nAn: PrismLibrary/Prism Prism@noreply.github.com\nCc: KlockerTom klocker.thomas@gmx.at; Author author@noreply.github.com\nBetreff: Re: [PrismLibrary/Prism] Navigating from TabbedPage to other TabbedPage shows no ToolbarItems on navigated TabbedPage (#976)\nThis happened because you are forcing a modal navigation which will replace the root of the application and you are no longer in the NavigationPage. You need to change the useModalNavigation: true line and set it to false.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/PrismLibrary/Prism/issues/976#issuecomment-286125772 , or mute the thread https://github.com/notifications/unsubscribe-auth/AYxxjeiPB51r37JCG_l9XipYjBj9nALPks5rlVR2gaJpZM4MZeJU .\n. ",
    "cpboyd": "@brianlagunas I think I have a decent reason to pass NavigationParameters to the TabbedPage itself rather than the child ContentPage.\nThe app is connecting to a separate Bluetooth device.  The tabs all correspond to data retrieved from the Bluetooth device.\nI launch a modal view from the TabbedPage to select a paired device or add a new device.\nBasically, I'd like to have the ViewModel of the TabbedPage handle device changes so that adding/selecting a device to connect to will pass along some NavigationParameters related to that device.. Ah, good point.\nI ended up refactoring the handling of device changes into the singleton I'm using to handle Bluetooth communications, reducing the dependence on the TabbedPage itself.  In effect, it's similar to the event aggregator since I'm using an Rx observable.. Just to add for anyone looking for an interim solution:\nIf using @dansiegel's MyNavigationPage in XAML, then you'll need to add the following constructor to set a Page through XAML Arguments:\nc#\n        public MyNavigationPage(Page root) : base(root) { }. One more note about the MyNavigationPage code:\nIt seems to set IsActive when the TabbedPage is first loaded, even if the MyNavigationPage isn't the initial page selected.\nAs a result, IsActive doesn't change when the tab is selected for the first time.\nThis causes an unexpected behavior, at least in my specific case, because I'm trying to ensure that a Page displaying settings is up-to-date.  . @jgtaveras What is the child view that you're referring to?\nA child of the MyNavigationPage or the MyNavigationPage itself (which is, presumably, a child of a TabbedPage or some other MultiPage)?\nHow has was the MyNavigationPage instantiated?  Through XAML?  If so, does it have a root page defined?\nLastly, how are you performing the navigation itself?  Have you registered the page for navigation (assuming it's not the root page declared through XAML)?\nI'm able to use Prism's NavigationService (as described here) to navigate from my XAML-declared root page to other pages that have been registered for navigation.  (And IsActive changes appropriately on the root page's view model.). It looks like you've basically done what I've done, so I have doubts that this is a Prism issue.\nA quick Google returns the following in the top 4 results:\nOn Xamarin forums\nOn StackOverflow\nBoth of those seem to indicate issues with UIAlertControllers.\nAre you using modal windows or a \"dialog\" library (like Acr.UserDialogs)?. ",
    "ruanpelissoli": "I'm experiencing this same issue on Android. I navigate to a modal page, and when call GoBackAsync passing parameters my parent page OnNavigatedTo don't get called. Already tryied implementing OnNavigatedTo on both parent and child.\nPlatform: Android API 25\nPrism version: 6.3.0.0\nXamarin version: 2.3.4.247\n. @brianlagunas  I have a CarouselPage, with a filter button in navigation bar, when clicked it pops a modal with filter options (ContentPage), I pass this filters as parameters at GoBackAsync of the modal page, my CarouselPage OnNavigatedTo is not fired to get this filters. My VM's inherit from a BaseViewModal that implements INavigationAware and BindableBase.\nCarouselPageVM:\n```\nprivate async void FilterCommandExecute()\n{\n      await _navigationService.NavigateAsync($\"NavigationPage/{nameof(FilterPage)}\", null, true);\n}\n//Not fired after GoBackAsync\npublic async override void OnNavigatedTo(NavigationParameters parameters)\n{\n      base.OnNavigatedTo(parameters);\n}\n```\nFilterPageVM:\n```\nprivate async void FilterCommandExecute()\n{\n      var filter = new Filter();\n  var parameters = new NavigationParameters\n  {\n       { \"filter\", filter }\n  };\n\n  await _navigationService.GoBackAsync(parameters, true);\n\n}\n```\n. ",
    "JaccoDieleman": "@brianlagunas I like the current approach by calling the OnNavigatedTo/OnNavigatingTo in the child instead of the parent. Although it meant our application broke when upgrading from 6.2 to 6.3.\nWe used to handle the navigation in the parent and then call the OnNavigatedTo of the child our selves. Now the child (a Tab in a TabbedPage) can handle that by itself. Excellent!\nOur scenario:\nWe have a tabbed page, each tab contains a list of items to which the user can add one. Adding a new item means navigating to a page which acts as a picker, We navigating back from the \"picker page\" we pass the id of the picked item in the NavigationParameters. The newly selected item must be reflected in the tab where the users wanted to add the item.. We're using it for all of our recent apps and are very happy with it. We can't do proper MVVM without it. We are using the Unity container, but we are considering switching to Autofac. The way Prism has been set up makes the switch easy. Which is nice as well!\nAuthor: 4PS B.V.\nWebsite: https://www.4ps.nl/\nApple: https://itunes.apple.com/nl/app/4ps-buitendienst/id1173821193\nAndroid: https://play.google.com/store/apps/details?id=com.fps.fsa\nWindows Store:https://www.microsoft.com/nl-nl/store/p/4ps-buitendienst-app/9nblggh4wrt3?ocid=badge&rtc=1\nSome screenshots of our flag ship app:\n\n\n. I tested it with Prism.DryIoc.Forms 7.0.0.51-ci and it worked like a charm! Thanks guys!. ",
    "l0gaw": "@brianlagunas \nI'm experiencing this same issue , but with Master Detail Page. I navigate to a popup modal page throughout my master page, and when call GoBackAsync passing parameters from my popup modal OnNavigatedTo don't get called on masterpage. How can i solve this?\n\n\n. ",
    "ViktorHofer": "Oh didn't know that and didn't find any info about that in the docs. Thanks for the link! Yeah it was some effort, especially because Xamarin.Forms had a build bug and first that issues had to be fixed: https://bugzilla.xamarin.com/show_bug.cgi?id=53060\nThe netstandard libs in my PR are all targeting version 1.0 therefore they support the most environments possible with netstandards (WP8, WP81, Win81, UWP; netcore, net45, ...).\nAs I'm also planning to put some effort into Unity (if that's welcomed), it would be best to align before I start.. Yeah your are totally right. I did that at late night and I'm not convinced at all that those changes would improve anything so I will change the files back into the .github directory and also rename the src directory back to Source. Than appveyor should also work with that PR and I won't produce any breaking changes. Changes are reverted back now. AppVeyor is still failing as its configuration needs to be adjusted (new csproj format).. Hey Brian,\nwhat do you mean with \n\nNone of the unit tests run because VS does not support testing .NET Standard.\n\nI just tested to run the unit tests and 840/880 passed and the other 40 didn't start correctly. The issue that those tests do not run does not seem to be connected to this PR.\nThe test classes are .NET Core projects which are referencing the .NET Standard libraries (Prism and Prism.Windows). So they should perfectly run\n. I did not convert the test projects to netstandard but to netcore1.1. I just pushed an update so that the netcore projects now produce executable and the vs test runner now detects the unit tests.\nRunning the tests in Prism.Tests is working for me from within Visual Studio and via dotnet test command.. It does work me\n\nVisual Studio 2017 is currently bit buggy with xunit test execution and discovery. net core tools --> \"dotnet test\" works fine.\n. cc: @bradwilson, @onovotny. Others are also seeing this error: http://stackoverflow.com/questions/42747868/vs-2017-not-discovering-tests-if-net-core. @brianlagunas I'm currently finishing up my changes and hope to be ready by the end of tomorrow. I'm setting up the appveyor yml configuration so that it supports WPF, UWP and netcore/netstandard. As I want to align with you how to proceed to accept the PR please send me an email as I wasn't able to find your contact: viktor.hofer@microsoft.com.\n. @brianlagunas @bartlannoeye @dansiegel PR should be ready for review. Xamarin Forms bug resolved and unit tests are visible in VS2017 (newest update!). 35 tests are failing but I think this is because the new Xamarin.Forms version changed something. Please review!\nUpdate: Xamarin.Forms still not building/testing/packing from dotnet-cli. Inside Visual Studio 2017 (newest update!) everything is working fine (build/test/pack). Please still review the PR and accept ASAP as the longer you wait the more I have to rebase again.... > Edit: I have tests showing in the Test Explorer in VS2017, but the test indicator is not showing in the code files.\nYeah that's a known bug in combination with netcore and should be fixed soon.\n\nI also noticed that you completely changed the folder structure of the projects, renamed solutions and folders, and essentially changed a lot of solution structure. That's like going into my garage and moving all my tools without telling me. What was your motivating factor for this?\n\nSee it more as showing you a picture how your garage could look. If you are not fine with the changes, you can just reject them. Primary reason was that I didn't got the appveyor script running with the old project structure as src and tests were in the same location. Another reason was, to bring the project structure up2date with other github dotnet projects like e.g. xunit and corefx.. > The reason the tests are failing is because it appears you removed the FormsApplication class that was used for testing and moved it into the Prism.DI.Forms.Tests project: https://github.com/PrismLibrary/Prism/blob/master/Source/Xamarin/Prism.Forms/FormsApplication.cs\n\nThis breaks all XF tests.\n\nOoh that wasn't intentional. The rebasing wasn't that easy because of 30+ new commits so I might have made mistakes.. @bradwilson: Thanks Brad! Updated to 2.3 beta 1 and CodeLenses are indeed showing up again \ud83d\udc4d \n@brianlagunas: Found the issue. By migrating to netcoreapp/netstandard projects I forgot to add the TEST condition. Reverted the change where I moved the two test files into a different project. Now all unit tests are passing and you have the green/red indicators (CodeLens) working again. Also updated other packages where new minor updates where available.\nBy the way, this is how the pre-packaging looks on myget with automatic appveyor publishing: https://www.myget.org/feed/Packages/prism-pre. This feed is my private one!\n\nYou're obviously not a car guy :)\n\nNo comment.. Fixed. ",
    "bradwilson": "\n\nEdit: I have tests showing in the Test Explorer in VS2017, but the test indicator is not showing in the code files.\n\nYeah that's a known bug in combination with netcore and should be fixed soon.\n\nThat should be fixed in 2.3 beta 1, which we just shipped today. https://xunit.github.io/release-notes/2017-04-06.html. ",
    "wocar": "Will there ever be support for netstandard \ud83e\udd47  Cheers :) . How ever you can reference Prism in your netstandard library without\ntrouble and use it in your Xamarin Forms app in android and iOS\nEl El lun, 15 de mayo de 2017 a la(s) 12:44 p.m., Shimmy \nnotifications@github.com escribi\u00f3:\n\n@brianlagunas https://github.com/brianlagunas really appreciate your\nkind response, and thanks for all the great effort put into this\ncan't-live-without project!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/pull/985#issuecomment-301549295,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AIycYWwjfUZXLx4TL8oWiGBJ5TwX1Mucks5r6I7mgaJpZM4McYgR\n.\n. Ok got you. Do you simply do it by editing the csproj or do you have a shorthand way of doing it?. \n",
    "ericwj": "Is the plan to also clean up and standardize the DI infrastructure around IServiceProvider and Microsoft.Extensions.DependencyInjection.Abstractions? This has the potential in fact to remove the strict need for any of the DI provider specific packages. App developers could add any available one on top of a reference to Prism.Windows for example by referencing e.g. 'Autofac.Extensions.DependencyInjection'. No need for overrides of any PrismApplication methods apart from the constructor - at least I think so.. Or standardize on IServiceProvider akin what Autofac.Extensions.DependencyInjection does, such that modules need not know about the implementation of the service provider. That limits them to use constructor injection only as that is the feature that every DI container supports.\nI think conditional registration isn't quite often what you want. Rather, you register an interface that your module supports. Then you move your initialization from the Initialize method to a) the factory creating your implementation or b) the constructor of the implementation or c) you follow the factory or provider model, have consumers resolve the factory or provider instead of the feature itself and define that thing to do lazy or async initialization - whatever you want - and yield a properly initialized feature. If it is async and waiting e.g. for UI to be created, but also awaited during initialization, you have a deadlock. But you can test for that and throw a timeout with a proper error message.. IServiceProvider isn't. This issue however breaks it.. Forget that last remark. IServiceProvider works fine as long as you don't ask for it from ServiceLocator.Current.\nHow is IServiceLocator not supported with XF? Is it missing from the System namespace? Or doesn't it work with CommonServiceLocator 1.3.0 just like on UWP?. Which package? IServiceProvider is defined by the framework. Literally System.Runtime or mscorlib. I'd be surprised to find it isn't in every single project you can create with any profile on any .NET. Unfortunately I opted out of 30GB XF, so I can't just File New Project XF and type System. to find out. No, not really. It does make standardizing stuff a lot easier, but it is not required to start doing DI properly. If you're serious about doing DI properly and you want to do it yesterday, it's possible to standardize on IServiceProvider with a little bit of infrastructure in the Prism core PCL - which you can then remove once Microsoft.Extensions.DependencyInjection is everywhere.\nIt is just messy to have RegisterTypeIfMissing and the like. I'm surprised the code is as is if it in any way coming from Microsoft patterns and practices. I'm sure it had the ServiceLocator anti pattern from the start. They must have been learning a great deal since... I feel sorry looking around Prism.Windows honestly.\nHave a look here https://developer.xamarin.com/api/type/System.IServiceProvider/. Bullocks, didn't mean to offend. I've looked at Prism several times in several years. The past few weeks only for the first time a bit deeper, enabled by the fact that that it is now open source. My impression is you have taken compatibility very seriously and that's great. I'm just guessing you'd like to bump a few versions and get Prism where you really want it to be. And that that would include making DI a first-class principle.\nI'm thinking about ServiceLocator, maybe it was separate, but I've come accross it using enterprise library I'm sure. I've used it. Don't recall exactly how I even got the idea, but it must've been in the docs at the very least.\nIn terms of support needed for IServiceProvider. It is already there in Autofac.Extensions.DependencyInjection and it is imho reasonable to expect Unity and SimpleInjector to implement a similar drop in DI extension - or risk being dropped. There are issues I've seen with Unity certainly in terms of how alive the project is and whether it'll remain viable in the future. About SimpleInjector I don't know.\nBut you are right, it'll certainly be a temporary fix and maybe not all that easy to try and fix this before .NET Standard is available. And after that it'll be fairly straightforward building on the infrastructure already there.. > There are also a number of DI container features that must be supported by IServiceProvider before it can be used. It's not as simple as a blanket GetService call.\nYou mean resolution with parameters and things like that? In the Win10 solution, Prism defines its own providers to resolve types from strings and viewmodels from view types. I think all that's needed is to keep it that way. There will be ActivatorUtilities in Microsoft.Extensions.DependencyInjection to replace Activator.CreateInstance and light up DI in those providers.. I guess I'd have to put 30GB on my disk and take a look...\nBut really, if say Autofac can do that, then you can ask Autofac to do it with only an IServiceProvider in hand - at worst only after importing a namespace. If Prism does it, register a service and declare an extension method to use it in Prism.. I don't care about any of them, I expect you'd want to keep them for compatibility reasons. Unless they can't follow along migrating to .NET Standard. Once that's there I'm fine not even using Autofac.\n. Sharing code between Windows and XF is only possible with Shared Projects I guess. That's probably OK today, but tomorrow it will become sort of a hack. So, new up DelegateCommand in a VM? No, give me a factory from DI... And the right place to register it is in Prism.Windows.PrismApplication.. Well there is no shared abstraction. So you must be using shared projects. Source code compatibility. Well it works. Maybe ICommand is too simple an example.. I in fact advocated for it to be removed in the original issue.. #985. What I didn't mention was that - if everything is going to be .NET Standard in the fall presumably, Prism would be able to provide common abstractions for all stuff useful in ViewModels, such that they can truly be written once for most apps across Xamarin, UWP, WPF.\nI was basically seeing where I'd end up refactoring 6.3.0 like this. I have it mostly working, except for the ViewModelLocator stuff. But in my own app I in fact use a static view model factory which fills in nulls for constructor arguments except for a pair that are commonly used in ViewModel constructors, unless an IServiceProvider is set during application initialization.\nThis is most importantly about IDesignMode and ICommandFactory. And I find it very useful to wrap those into properties of IUIServices such that ViewModels can have a short list of constructor arguments and automatically get IDispatcher, IAlertService and things like that.. Don't think the UWP label reflects the intention.\nGoing about this, it should really be about all platforms. One .NET, One Prism.. Well, this would build on .NET Standard 2.0 in the first place. To release in Prism 7.0 by fall I suppose.\nDon't mind me just poccing this for private use - though I'm happy to share my fork building on UWP 5.3.3.. It'll be at /ericwj/Prism in a branch - I'll shout something here when there is something interesting to see.. Did you consider that there is the possibility to create and use subordinate service providers? These can be created after the root service provider has been created and they can resolve from the subordinate or the root provider, overriding/replacing and/or adding to what the root provider can resolve. I can't really tell whether this will be enough for modules to work.\nI recall when I poc'ed this I needed a container specific virtual method to properly do the provider specific registration/creation and a namespace import to implement some provider specific extension methods for resolution, but I ended up with a single base Prism application class and the virtual method would be in the user application class. I did not get to look into modules, however.. ",
    "rupreetg": "Thanks Brian! . ",
    "espritm": "Any sample please ? I have same problem but I can't understand how to wrap my tab page in a navigation page.\nIf I do womething like :\nNavigationService.NavigateAsync(\"VLNavigationPage/MainPage/HomePage\", animated: true);\n```\nprivate async void ShowSearchResultPage()\n        {\n            if (!string.IsNullOrWhiteSpace(SearchText))\n            {\n                await navigationService.NavigateAsync($\"NavigationPage/SearchResultPage?searchKey={SearchText}\", useModalNavigation: false);\n            }\n        }\nI have two title bars, one for MainPage and one for SearchResultPage, one below the other, and tabbar is still hidden. Thanks a lot for your answer Brian !\nOk I understand my mistake, I should do this :\nNavigationService.NavigateAsync(\"VLNavigationPage/MainPage/NavigationPage/HomePage\", animated: true);\n\nprivate async void ShowSearchResultPage()\n        {\n            if (!string.IsNullOrWhiteSpace(SearchText))\n            {\n                await navigationService.NavigateAsync($\"SearchResultPage?searchKey={SearchText}\", useModalNavigation: false);\n            }\n        }\n```\nAnd is it possible with the Query String ?\n\"MobileApp:///NavigationPage/TabbedPage?createTab=NavigationPage/Tab1&createTab=NavigationPage/Tab2\"\nI can't find a way to do it dynamically with Prism 7 \n. > \n\nDynamic Tab Generation\nYou can now dynamically create tabs when navigating to a TabbedPage by using the KnownNavigationParameters.CreateTab constant or by using the \"createTab\" parameter name.\n_navigationService.NavigateAsync(\"MyTabbedPage?createTab=ViewA&createTab=ViewB\");\nThis will create a TabbedPage and then create two tabs, ViewA and ViewB.\nTo create a tab that wraps a page in a NavigationPage, simply denote this as a nested hierarchy using the | character.\n_navigationService.NavigateAsync(\"MyTabbedPage?createTab=NavigationPage|ViewA\");\n\n\nAgain thanks a lot for your help !!! That's what I missed ! \nThis is exactly what I was looking for and it is working perfectly\nSo the correct query string is \n\"MobileApp:///TabbedPage?createTab=NavigationPage|Tab1&createTab=NavigationPage|Tab2\"\nCheers \ud83d\udc4d . ",
    "abdulraooof": "When I call the login in bootstrapper it is always gives an error objectl reference not set to an instance of object exception.\n//Open Login Window\n            Application.Current.ShutdownMode = ShutdownMode.OnExplicitShutdown;\n            var logon = new LoginWindow();\n            logon.ShowDialog();\n            Application.Current.MainWindow = null;\n            Application.Current.ShutdownMode = ShutdownMode.OnMainWindowClose;\n            if ((bool)Application.Current.Resources[\"IsAuthenticated\"])\n            {\n                //Multiple ShellManager\n                var regionManager = RegionManager.GetRegionManager((Shell));\n                RegionManagerAware.SetRegionManagerAware(Shell, regionManager);\n                //Open Bootstrapper Shell\n                Application.Current.MainWindow.Show();. I am using prism 6.3 and I just want call login window before shell. Also my viewmodels are in a class library so that's why I changed the ViewModelLocator convention. As you said I have created another unity instance, Now I moved my code to bootstrapper but as I told now, null reference exception occured. And I also implemented multiple shell strategy as you teach in PluralSight course. I hope now you would understand the exact problem. Here is my bootstrapper code.\n-- I removed Mainwindow  = null -- But still got error.\n`    public class Bootstrapper : UnityBootstrapper\n    {\n        public Bootstrapper()\n        {\n            //Change ViewModel Locator Convention \n            ViewModelLocationProvider.SetDefaultViewTypeToViewModelTypeResolver(x =>\n            {\n                var viewName = x.FullName;\n                viewName = viewName.Replace(\"Logistics.Services.Views.\", \"Logistics.Services.ViewModels.\");\n                var viewModelAssemblyName = \"ViewModel\";\n                var suffix = viewName.EndsWith(\"View\") ? \"Model\" : \"ViewModel\";\n                var viewModelName = string.Format(CultureInfo.InvariantCulture, \"{0}{1}, {2}\", viewName,\n                    suffix, viewModelAssemblyName);\n                return Type.GetType(viewModelName);\n            });\n        }\n        protected override DependencyObject CreateShell()\n        {\n            return Container.Resolve();\n        }\n    protected override void InitializeShell()\n    {\n        //Open Login Window\n        Application.Current.ShutdownMode = ShutdownMode.OnExplicitShutdown;\n        var logon = new LoginWindow();\n        logon.ShowDialog();                   \n        if ((bool)Application.Current.Resources[\"IsAuthenticated\"])\n        {\n            Application.Current.ShutdownMode = ShutdownMode.OnMainWindowClose;\n            //Multiple ShellManager\n            var regionManager = RegionManager.GetRegionManager((Shell));\n            RegionManagerAware.SetRegionManagerAware(Shell, regionManager);\n            //Open Bootstrapper Shell\n            Application.Current.MainWindow.Show();\n        }\n    }\n    protected override void ConfigureContainer()\n    {\n        base.ConfigureContainer();\n        ViewModelLocationProvider.SetDefaultViewModelFactory(type => Container.Resolve(type));\n        //Register Services\n        Container.RegisterType<IShellService, ShellService>(new ContainerControlledLifetimeManager());\n        Container.RegisterType<IDialogService, DialogService>(new ContainerControlledLifetimeManager());\n        Container.RegisterType<IUserRepo, UserRepo>(new ContainerControlledLifetimeManager());\n        Container.RegisterType<IUserService, UserService>(new ContainerControlledLifetimeManager());\n        //--Navigation--\n        /*\n         Some Navigation Registrations\n\n*/\n        }\n    protected override IRegionBehaviorFactory ConfigureDefaultRegionBehaviors()\n    {\n        IRegionBehaviorFactory behaviors = base.ConfigureDefaultRegionBehaviors();\n        behaviors.AddIfMissing(RegionManagerAwareBehavior.BehaviorKey, typeof(RegionManagerAwareBehavior));\n        return behaviors;\n    }\n\n    protected override void ConfigureModuleCatalog()\n    {\n        base.ConfigureModuleCatalog();\n\n        Type moduleViewsType = typeof(ViewsModule);\n        ModuleCatalog.AddModule(new ModuleInfo()\n        {\n            ModuleName = moduleViewsType.Name,\n            ModuleType = moduleViewsType.AssemblyQualifiedName,\n            InitializationMode = InitializationMode.WhenAvailable\n        });\n    }\n\n`. How to clear all the registrations of view with regions\nif i have\n . _regionManager.RegisterViewWithRegion(RegionNames.AdminMainContentRegion, typeof(Views.Customers.Customers));\n            _regionManager.RegisterViewWithRegion(RegionNames.AdminMainContentRegion, typeof(Views.Employees.Employees));\n            _regionManager.RegisterViewWithRegion(RegionNames.AdminMainContentRegion, typeof(Views.Vehicles.Vehicles));\n            _regionManager.RegisterViewWithRegion(RegionNames.AdminMainContentRegion, typeof(Views.Vendors.Vendors));\nThen how to clear all these registrations?. I solved it with an alternate solution. ",
    "welberty": "Tankyou!. ",
    "mprevot": "Thank you of the pieces of advice, I'll do what you proposed. \nI'll go on SO next time.\nMany thanks.\n. ",
    "raV720": "Here is sample:\nhttps://bitbucket.org/equo/prismidestructibletest.git\nAfter downloading source from repo there are errors with xaml pages (InitializeComponent() method does not exists), but it compiles anyway.\nUse UWP project. Set UWP project to be deployed in solution settings. Set breakpoints on Destroy methods in viewmodels. Run application, click button to navigate and then click back button - Destroy does not fire for Page3. Click second time - Destroy fires for Page2.\nThere is another issue (should I report it in another thread?). When navigating like this:\nawait NavigationService.NavigateAsync(\"NavigationPage/Page1\");\nawait NavigationService.NavigateAsync(\"Page2/Page3\");\nThe second navigation causes Page1 (from first navigation) to be destroyed, but since it is relative navigation it should just navigate to new pages without destroying previous, like: NavigationPage/Page1/Page2/Page3. Am I right?\nThis problem can be tested using provided sample - just edit code in App.cs. Why this issue is closed?\nWhat Xamarin.Forms bug is it related to?\nWhat about second part of question?. Let me know when you add another issue according to this modal navigation.. In my opinion the service is usually called from viewmodel. In viewmodel I do not want to think if I am on main or different thread when trying to display something. ",
    "bytesoftly": "Right yes okay. I'm also no licensing expert but have noticed Microsoft have been incredibly receptive to re-licensing under MIT. Would it be too much trouble to ping the guys at MS who OSS'd PRISM about MIT re-licensing, it would certainly green-light the code for a large number of projects at our company and likely others too?. Super! Thanks for asking, whether or not they decide to relicense.. ",
    "michaelmairegger": "@brianlagunas I have updated the initial post. Unfortunately the <> brackets were not rendered in the final output.\nThe reflection call is not inside the commands. Should only be called when accessing NavigationParameters. @brianlagunas Ok. Where should I integrate the test. There is no Prism.Forms.Tests testing library.. @dvorn Thanks. I overlook the PrismLibrary_XF.sln solution. @brianlagunas I have added the tests.\nYou can remove the lines I have added, and you will see that the tests will fail.. Ok, thanks for the reply. @brianlagunas Thanks for the information. Should I open an issue for this PR? Or is it OK if I remind me next time to do so?. @brianlagunas Ok, done.. ",
    "pcresswell": "I've just put out a simple XF + Prism weight lifting application out called TUL - Time Under Load. Pretty simple Master Detail app using Unity container and Prism with some OxyPlot for graphing. No backend, authentication, etc. \nAuthor: Always Twirling Inc\nWebsite: timeunderload.com\nApple: https://itunes.apple.com/us/app/tul/id1219806577\nAndroid: https://play.google.com/store/apps/details?id=com.alwaystwirling.tul\nSome Screenshots:\n\nhttps://cloud.githubusercontent.com/assets/1090039/25927739/086e197c-35c6-11e7-8079-3907806865b4.png\nhttps://cloud.githubusercontent.com/assets/1090039/25927740/088bbaa4-35c6-11e7-9da0-dc0e5254370d.png\n\n. Thanks to you @brianlagunas for the great work on Prism!. ",
    "henriksen": "We've made an app for the University of Bergen that acts as a mobile front end to their Learning Management System, Canvas. \nAuthor: Capgemini Stavanger, Norway\nGoogle: https://play.google.com/store/apps/details?id=no.uib.mitt\nApple: https://itunes.apple.com/no/app/mitt-uib/id1247471771?mt=8\n\n\nSource: Not yet, but it might be open sourced. . ",
    "Predatorie": "We have been using Prism and Unity for several years with our WPF applications but this was the very first time using Xamarin Forms and my first time developing commercial mobile apps. As others have mentioned, I couldn't imagine developing a mobile app without Xamarin Forms and Prism.\nThe community app is for our customers and once logged into our system allows access to our forums, knowledge based articles, video tutorials, product information, etc.\nAuthor: CNC Software, Inc.\nGoogle: Mastercam Community for Android\nApple: Mastercam Community for iOS\nUWP: No plans to publish although we do have a feature complete working project\n\n. ",
    "naweed": "Movie Watchlist - a gorgeous way to track movies you love\nGoogle: https://play.google.com/store/apps/details?id=com.xgeno.MovieWorld&hl=en\nApple: Under review\n\n\n\n\n\n\n\n. Series Watchlist: Keep track of the shows you are watching.\nGoogle: https://play.google.com/store/apps/details?id=com.xgeno.serieswatchlist&hl=en\nApple: https://itunes.apple.com/us/app/series-watchlist/id1314148730?mt=8\n\n\n\n\n. In Prism 6.3, this was not the case. And it should only be fired once.. But this was not the issue in 6.3. \nAnother observation, if I don't add any content page to the tabbed page, the method gets fired once. But if I add one or more (say 3) content pages, still the method gets fired only twice. For three content pages, it should get fired 4 times in total as per your explanation.\nLet me know if you need any additional info.. If difficult to implement, its fine. I will handle this in my VM code itself.\nBtw, great library. Keep up the good work.\nThanks\n. Nah. Tried. Couldn't get it to work.\nThe best it to have the OnNavigatedTo on the TabbedPage fired only once, as was the case in 6.3.. Yes please, if you can do that.\nThe real use case for this is that I am showing a Movie Details screen. The VM is same for all the data, but I am segregating it into tabs for ease of viewing and categorization. See attached screenshot for reference.\nThanks\n\n. @brianlagunas , I can confirm that this has been fixed in the CI build. Attaching the updated app with new references for others benefit.\nThanks. Hoping to see it on Nuget very soon.\nBlankApp1.zip\n. Hi, any idea when Prism 7 is going to go GA?. They are registered for navigation. Here is the code in App.xaml for that:\n```\n        protected override void RegisterTypes(IContainerRegistry containerRegistry)\n        {\n            //Navigation Service\n            containerRegistry.RegisterForNavigation();\n        //Views and View Models\n        containerRegistry.RegisterForNavigation<ExplorePage, ExplorePageViewModel>();            \n        containerRegistry.RegisterForNavigation<WatchlistPage, WatchlistPageViewModel>();\n        containerRegistry.RegisterForNavigation<StartPage, StartPageViewModel>();\n    }\n\n```. Strange. I tried creating a new project to reproduce the issue, but couldn't. Will check and report back if needed. You can close the issue for now.\nThanks.\n. The issue was with my custom tabbed page renderer in Android. On iOS, it worked fine. I fixed my renderer and now all is fine. Thanks\n. ",
    "markmark028": "Prism Version: 6.3\nHAAC (Companion Distribution App)\nYou can access your apps distributed by private individuals or organizations from AppCenter (appcenter.ms). Just ask the distributors to register at https://haac.azurewebsites.net to distribute the apps from AppCenter. \nPlay Store: https://play.google.com/store/apps/details?id=com.mecodes.haac\nApp Store: https://itunes.apple.com/us/app/haac/id1377211700?ls=1&mt=8\n\n\n\n. Another App made from XF Prism (7.0)\nChronos (Diary/Journal App) - Chronos helps you privately capture your daily activities, thoughts, idea, and photos.\nPlay Store Link: https://play.google.com/store/apps/details?id=com.mecodes.chronos.droid\nApp Store Link: Not yet Available\n\n\n. ",
    "ChaseFlorell": "I built this using 100% Forms and Prism\nhttps://play.google.com/store/apps/details?id=fortis.outagemap \n\n\n\n\n\n. I just came here looking for this exact thing. I was thinking that instead of having it as another method on the Navigation Service, that maybe it could be passed into the NavigationParameters\ncsharp\npublic void OnNavigatedTo(NavigationParameters parameters)\n{\n    var currentPath = parameters.GetValue<Uri>(\"_currentPath\"); // should be the absolute path\n}\nThen you just keep track of it as you navigate around the app, continuing to update and pass the new value.. funny, I tried this today not realizing that it wasn't supported. This is more \"GoBackAsync\" related, but should totally be supported \ud83d\ude00 . I think the only way to make it go would be to have another internal method for this specific case whereby you remove to underlying Page(s) and then call GoBackAsync :man_shrugging:. :cry:. what issue are you having? Can you fill out the issue in full with reproduction steps?. > Also, we must point out that this is not supported in custom ContentViews\nDo the custom ContentViews not pass the same values in the IServiceProvider? I assumed they would. I'm accessing the page from the provided values from there.. Well now I have to test it... . You are correct, when it's nested inside a ControlTemplate you only have access to everything up-to and including the ControlTemplate, but not the page hosting the control template. \nYou have to do this to get it to work\nxaml\n<!-- Control Template -->\n  <ContentView.ControlTemplate>\n      <ControlTemplate>\n          <StackLayout>\n              <Button Text=\"{TemplateBinding Text}\" Command=\"{TemplateBinding Command}\"/>\n          </StackLayout>\n      </ControlTemplate>\n  </ContentView.ControlTemplate>\n```csharp\n// code behind\npublic static readonly BindableProperty TextProperty = BindableProperty.Create(nameof(Text),\n    typeof(string),\n    typeof(CustomControlButton),\n    default(string));\n/// \n/// Text summary. This is a bindable property.\n/// \npublic string Text\n{\n    get => (string) GetValue(TextProperty);\n    set => SetValue(TextProperty, value);\n}\npublic static readonly BindableProperty CommandProperty = BindableProperty.Create(nameof(Command),\n    typeof(ICommand),\n    typeof(CustomControlButton),\n    default(ICommand));\n/// \n/// Command summary. This is a bindable property.\n/// \npublic ICommand Command\n{\n    get => (ICommand) GetValue(CommandProperty);\n    set => SetValue(CommandProperty, value);\n}\n```\nAccess it this way\nxaml\n<customControls:CustomControlButton Text=\"First Text\" Command=\"{prism:NavigateTo 'About'}\"/>. @dansiegel I would absolutely love to hear your idea. I'm thinking of going down the attached property path, and have it pretty well sorted out, but I don't know a clean way to listen for Popped on the page in order to null out the attached property.. I really like the idea of a Segue/Transition to be defined in Xaml. I wonder if it can be isolated from the actual navigation though? IE: Go To This Page, Using This Segue?!?!\ncsharp\nawait navigationService.NavigateAsync(\"path/to/page\", segue: new StarburstSegue());\nor\nxaml\n<Button Text=\"Starburst\"\n        Command=\"{prism:NavigateTo 'path/to/page', Segue={StaticResource StarburstSegue}}\" />. @ahmad-crossplatform, are you talking about doing this within xaml? What exactly would it look like?. I'm not sure a singleton is the best approach, and although I cannot speak for @brianlagunas, I'm pretty sure he'd say the same thing.\nThe appraoch I'm looking to take is to attach the NavigationService to the page via an Attached property. As long as the IServiceProvider is supplying the same Page instance in every request, then everything should work as expected.\nEdited\nI'm also looking at supporting MasterDetailPage and TabbedPage based on some feedback from @dansiegel. The IServiceProvder provides the actual Content page as the rootObject of the Detail, and the \"MasterDetail\" page as the rootObject of the Master. Dan had asked to be able to specify it directly, however after further conversation with Brian, this might be a non-issue. We just need to use the rootObject that the IServiceProvider provides.\n/Edited\nxaml\n<MasterDetailPage x:Name=\"this\">\n    <MasterDetailPage.Master>\n        <ContentPage prism:Navigation.Parent=\"{x:Reference this}\">\n            <Button Text=\"Foo\" Command=\"{prism:NavigateTo '/MyMaster/NavigationPage/MyDetail'}\" />\n        </ContentPage>\n    </MasterDetailPage.Master>\n<MasterDetailPage>. @dansiegel is there ever a time in Prism when the navigation service is an instance of the nested page? I thought that the Prism opinion was always to use the MD page and not the nested page.. Interestingly, the IServiceProvider gives the MD page as the RootObject for elements inside the Master, but not for elements inside the Detail.. @brianlagunas  but if that's the case, why do we need to define the Page in xaml at all? Unless I'm missing something, it seems as though Prism figures this out for us already.. No, my comment was based around @dansiegel's recommendation to be able to provide a specific page instance in the Markup Extension. I never ran into an issue per-se, but Dan wanted to be able to do something like this.\nxaml\n<Button Text=\"ViewA\" Command=\"{prism:NavigtateTo ViewA,Page={x:Reference this}}\" />\nThe Markup Extension always gives me the Page that the control is in. If \"Detail\" it gives me the detail page, if \"Master\" it gives me the MasterDetail page.. Correct, not an issue, only based on feedback from @dansiegel. I also misspoke when I said it only sends back the page within the MD page. I'll correct that statement via an edit.. >  I would be curious what you get if your Master is a NavigationPage with a ContentPage.\nI still get the MasterDetailPage \ud83d\udc4d \ud83d\ude04 \nxaml\n<MasterDetailPage.Master>\n    <NavigationPage Title=\"Master\">\n        <x:Arguments>\n            <ContentPage  >\n                <StackLayout>\n                    <Button Text=\"Go to about (1)\" Command=\"{prism:NavigateTo 'About'}\" prism:Navigation.CanNavigate=\"{Binding CanNavigate}\" >\n                        <Button.CommandParameter>\n                            <prism:XamlNavigationParameters Parent=\"{x:Reference this}\">\n                                <prism:XamlNavigationParameter Key=\"MainPageViewModel\" Value=\"{Binding .}\" />\n                            </prism:XamlNavigationParameters>\n                        </Button.CommandParameter>\n                    </Button>\n                    <Button Text=\"Go to about (2)\" Command=\"{prism:NavigateTo 'About'}\" prism:Navigation.CanNavigate=\"{Binding CanNavigate}\" >\n                        <Button.CommandParameter>\n                            <prism:XamlNavigationParameters Parent=\"{x:Reference this}\">\n                                <prism:XamlNavigationParameter Key=\"MainPageViewModel\" Value=\"{Binding .}\" />\n                            </prism:XamlNavigationParameters>\n                        </Button.CommandParameter>\n                    </Button>\n                    <Button Text=\"Go to about (3)\" Command=\"{prism:NavigateTo 'About'}\" prism:Navigation.CanNavigate=\"{Binding CanNavigate}\" >\n                        <Button.CommandParameter>\n                            <prism:XamlNavigationParameters Parent=\"{x:Reference this}\">\n                                <prism:XamlNavigationParameter Key=\"MainPageViewModel\" Value=\"{Binding .}\" />\n                            </prism:XamlNavigationParameters>\n                        </Button.CommandParameter>\n                    </Button>\n                </StackLayout>\n            </ContentPage>\n        </x:Arguments>\n    </NavigationPage>\n</MasterDetailPage.Master>. >Ultimately I would believe having a Page property on the XAML Extension would be good for the edge cases none of us are thinking of. It's a lot easier IMO to build it in from the start. You could think of it like the Binding Source property... most of the time you never set it, and it picks it up automatically, but in those scenarios where you need it you have it.\nThis is perfectly valid. @dansiegel @brianlagunas just a couple of things to get the conversation rolling.\n\nHow would I implement the .Destroy() API in order to null out the NavigationService? I know there's this but I was under the impression that it required the user to implement IDestructible. I'm ass_uming that I would need to tap into a callback Action or an event and listen for when the destroy method is invoked (_see fg.1) since we have no control over what Page is being used. My initial thought was to not use IDestructable and either use the Finalizer, or subscribe to the popped event raised by X.F.\nWhat should we do about the namespace? I don't think anyone loves where it is now, but I think we have differing opinions on what it should/could be. My goal continues to be to allow tooling to fall back to default (ie: Visual Studio uses the last portion of the namespace as it's prefix).\n\nfg.1\ncsharp\nif(Page is IDestructible destructible)\n    destructible.Destroying += (s,e){ \n        Page.SetValue(NavigationServiceProperty, null);\n    }. Requested changes complete, now to find the time to write unit tests.. @brianlagunas this idea came out of a discussion with @dansiegel about how we can potentially push the errors up to the user if/when the Markup Extension fails. . yeah my thought here is that the result of the Prepare method is the only reference. Therefore it can be garbage collected in the normal cycle, or even just set to null if you're super paranoid.. I definitely understand the comments above, and upon further contemplation, this API would need the following change.\n```csharp\nNavigationItem _staged;\npublic override void OnNavigatedTo(NavigationParameters parameters)\n{\n    // get everything ready to navigate to\n    var myParameters = new NavigationParameters(); // hydrate, whatever\n    _staged = await _navigationService.Prepare(\"path/to/navigate\", myParameters); \n}\npublic void NavigateToSomePage()\n{\n    // should we allow _staged.NavigationParameters to be changed, or should it be internal?\n    await _navigationService.Navigate(_staged); // navigation parameters are already locked in\n}\n```\nSince any time a page and viewmodel is Prepared, we'd know that the user intends on navigating to that page. Therefore we can call OnNavigatingTo during the preparation, even if the act of navigating  is further down the line.\nI'm not sure how deep linking would fall into this, but I assume we can provide all of the details necessary within the NavigationItem.\nWhat this ultimately solves is the slow Binding setup from the Xamarin.Forms binding engine... essentially the page.BindingContext = viewModel;. I've measured this on binding heavy pages, and have seen it upwards of a couple of seconds. This is a terrible user experience that I'd really like to solve. this will not solve inflation time.. I was actually just talking to a peer about this one, I was at least looking for a better name. plus the user can do their own logic bound to CanNavigate. Done. Done. If a user inherits this class, they've already got access to \"Name\" so the uri parameter is probably not necessary, What I did was pass in the parameters and the actual NavigationService. That way they have access to the service within their override.. Done. Done. Done. ",
    "karlingen": "RePT is an exercise app made for lifters wanting to try out the Reverse Pyramid Training approach by Leangains.\nBacked by Prism for XF! \u2764\ufe0f \nAuthor: Karl Metum\nWebsite: https://getrept.app\nApple: https://itunes.apple.com/us/app/rept/id1421816184?ls=1&mt=8\nGoogle: https://play.google.com/store/apps/details?id=se.codehacker.RePT\n\n\n\n. The problem is not present in Xamarin Forms v4.0.0.8055-pre1. @brianlagunas that's odd. Me neither... \ud83e\udd14 . ",
    "stefffdev": "Have you tried to clean and rebuild your Android project?\nI encountered a similar problem after updating to version 6.3, a rebuild fixed it.. ",
    "MartinRobins": "I am no longer sure this issue is warranted.\nAt the time of writing, I was issuing the navigation request from within the view model of the MasterDetailPage and as a result the page that I navigated to always replaced the \"Detail\". I have found that if instead I request the navigation from within the view model of the page currently displayed as the \"Detail\" of the MasterDetailPage it works exactly as I desire and the navigation is actioned using \"PushAsync\" with action bars and back buttons etc..\nI will leave it to you as to whether or not you want to close this issue; it is no longer a problem to me but I do not know if you wish to allow for the original scenario anyway.. No problem. I actually discovered the solution by accident!. ",
    "mattman624": "@dansiegel Thanks for pointing that out. \n@brianlagunas Thank you for the quick reply.. ",
    "simonndev": "I dont know how to set the label to #WPF, please help me update the post. Thanks in advance.. ",
    "JoeDurand3": "7.1 provides a protected NavigationService property that you can expose:\npublic new INavigationService NavigationService => base.NavigationService;. I think he means the default navigation page provided by Forms:\ncontainerRegistry.RegisterForNavigation<CustomNavigationPage>(\"NavigationPage\");\n...\nnavigationService.NavigateAsync(\"NavigationPage/LoginPage\");\nI've also tried:\ncontainerRegistry.RegisterForNavigation<CustomNavigationPage>();\n...\nnavigationService.NavigateAsync(\"CustomNavigationPage/LoginPage\");. ",
    "matheusneder": "Thanks for the fast feedback. You're right about memory leak and I'm not sure if is possible to handle this. If you don't mind, I'll think a little more prior to close the pull request. If I find a way to fix the memory leak issue, I think about the API.. Hey Brian, I fixed memory leak issue and made the changes to respect the API. The nested properties types must also implements INPC in order to work properly. If it doesn't implements INPC an InvalidOperationException with a message describling the requirement will be thrown at runtime.. Hi @brianlagunas \nI did some minor improvements and I believe it's done! The basic concept is:\n All complex objects present in the expression must implements INPC in order to work proper.\n Each subscription to PropertyChanged is stored in a list in order to be unsubscribed later;\n An action that fires DelegateCommandBase.RaiseCanExecuteChanged when the property changes is subscribled in the object which target property belongs to;\n All other properties which composes the expression will be also observed, but with a different PropertyChange action that will unsubscribe all previously subscribled listeners, including itself, then rebuild subscriptions for the new scenario and fires DelegateCommandBase.RaiseCanExecuteChanged since the target property will also be changed.. ",
    "rdrrichards": "Sounds a little like a no interest scenario, at least at the moment. For some reason, it surprises me that there are not many requests for SimpleInjector. Then again, there are plenty of IoC containers to choose from!\nI may create a branch and get a good idea of the amount of work this would take. Thanks for pointing out some of the challenges ahead of time, I appreciate that. I didn't think about resolving by name, but that would add to this. SimpleInjector may be not so simple in this context.\nThanks!. @dansiegel Dan, Thanks! I am curious, what stopped you from moving forward with a PR on this? Lack of time, found that it wasn't worth the effort, not feasible, something else?. @brianlagunas Have you eased up on the idea that you were no longer going to allow a container to only support one Prism platform? If so, I am still thinking about starting a Simple Injector implementation for Prism WPF.\n. @brianlagunas I will keep that in mind, thanks. If I think that it will become, or cause issues, I will give you a heads up. Last thing I want to do is have this become a burden for the team. I just think it will be fun, and a good way for me to contribute. Thanks again.. ",
    "osicka": "Thanks for your quick reply. \nThe view model fetches a lot of data from the server so I was trying to save on redundant calls. (mobile data is expensive in Australia) I will just offload this data into a singleton child class and resolve this inside my view model.. No problem, that is what I have done and its all working fine.. It's a work roster where the data changes frequently and becomes stale quickly so I don't need to store it locally. I just didn't want it to be reloaded every time the page was entered.\nI am very happy with the way it is working now.. ",
    "CriggerMarg": "WPF code have same problems, so it isn't only UWP problem. I referenced similiar issue with RegionNavigationService class.. I found that issue is duplicating https://github.com/PrismLibrary/Prism/issues/1042. Cool. I have enterprise app that has two modules inside of one project and they using same types. So I have to add prefixes for registration names during module initialize and then manipulate with this prefixes inside of dependent types. I know it's sounds intricately but it is how it is. \nIf I would have separate container in module, I would be able to get rid of this prefixes and use pure type names for navigation. I digged into code and found that you are right - regions created directly, without DI. It makes things complicated. . Nope, it worse. I have concrete implementation that used in both modules. It's enterprise, baby. However, I think there might be solution that does not requiring changes in prism itself. I may inherit from concrete region type like SingleActiveRegion and override its NavigationService property to use injected from ctor. \nAnd inject this service with my region adapter. \nMaybe I violated terms of service that were written in issue placeholder but when I started I wasn't sure I can do it without prism source changes.. ",
    "dazinator": "\nWe need access to the actual containers to use their more advanced registration and resolution features. \n\nCould you elaborate on the features that are lacking. I know one limitation is that you can't create Child containers via IServiceProvider (You can create a \"scoped\" container - which is an immutable nested container usually used for Per Request scoping in web apps). And I know you can't mutate the registrations for an existing IServiceProvider. Is there any others?\nI was also in this kind of scenario recently with my own framework and in the end I decided to extend IServiceProvider with my own requirements:\n```\npublic interface ITenantContainerAdaptor : IServiceProvider, IDisposable\n    {\n        ITenantContainerAdaptor CreateNestedContainer();\n        ITenantContainerAdaptor CreateChildContainer();\n    /// <summary>\n    /// Used to add services to a container AFTER its initialised.\n    /// </summary>\n    /// <param name=\"configure\"></param>\n    void Configure(Action<IServiceCollection> configure);\n\n    string ContainerName { get; }\n    Guid ContainerId { get; }\n    ContainerRole Role { get; }\n}\n\n```\nSo my framework requires an ITenantContainerAdaptor implementation to be configured on startup. This allows me to create child containers, and mutate the container, in the places necessary, but it has the downside that I had to create the actual concrete container implementations as support packages  - i.e an StructureMap implementation which the user configured on startup like so:\nhttps://github.com/dazinator/Dotnettency/blob/develop/src/Sample.Mvc/Startup.cs#L50\nAnd I will need to create additional implementations for the other containers as needed, such as Ninject etc.\nBut it does have the benefit that it allows me to unify around IServiceProvider wherever I need to, and also allows me to expose an IServiceCollection  registration API experience that is agnostic of any underlying container. This is useful when you want to dynamically load a module - and the module may be a third party module and doesn't want to be tied to any specific container when it registers its services. It means the host can change the container without impacting any modules. I have also found that the IServiceCollection registration API is usually sufficient for most needs. Especially given that there are many libraries now on the netstandard stack (from asp.net core) which offer a fluent registration API for IServiceCollection - like EF Core as one minor example.. My personal preference was to have my fa\u00e7ade extend IServiceProvider to get the GetService methods for free (including the generic ones, which Microsoft expose as Extensions methods).\nFor the Register methods, I chose to do this on my fa\u00e7ade:\nvoid Configure(Action<IServiceCollection> configure);\nBecause then you get to leverage the existing / framework way for type registration including the various overloads and extensions. It means new ways to register types can be added for consumers, without breaking changes to the facade interface.\nMost containers are now providing integration with IServiceProvider - and IServiceCollection - so this means more code is actually maintained by others (IServiceProvider stuff maintained by Microsoft, and IServiceProvider / IServiceCollection integrations usually published as a support package by container authors wanting to be compatible with the asp.net core / netstandard stack.\nHowever if you really don't want to go down that approach, defining it all in your own fa\u00e7ade is another approach with different tradeoffs I guess.\nHere is what this looked like for structuremap . >  The ServiceProvider and IServiceCollection is in netstandard 2.\nFyi these abstractions are available since netstandard1.1, not sure of that makes any difference.\nhttps://www.nuget.org/packages/Microsoft.Extensions.DependencyInjection/1.0.0\n\nSuch as named instances and registrations, as well as a mutable container.\n\nYeah I understand, My own abstraction derives from IServiceProvider to add mutability support (as well as child and nested container support but at the end of the day its still an IServiceProvider which suited me for asp.net core scenario - obviously your own goals and scenarios may be different.\nNamed registrations is interesting. There are already support packages out there to provide named registration extension methods for IServiceCollection, so that shouldnt be a blocker. In fact if you adopted IServiceCollection abstraction you would get this stuff for free via the existing packages that people publish around these abstractions. That was important for me but perhaps not for you.\n. > netstandard 1.1 is not netstandard 1.0.\nMy point was these API's are available in netstandard1.1 which is notnetstandard2.0 as you had asserted. I have looked at the existing projects that are targeting netstandard1.0 as I wanted to check if incrementing them to netstandard1.1 would be viable. The only difference I can see between netstandard1.0 and netstandard1.1 is that the former supports Windows Phone Silverlight where as netstandard1.1 is not implemented by Windows Phone Silverlight. My understanding (and I am sure you can correct me if I am wrong) is that you aren't interested in supporting windows phone silverlight - in which case - incrementing from netstandard1.0 to netstandard1.1 might be a viable option for you.\n\nIt becomes dangerous to take dependencies on other packages, especially those maintained by individuals as they can abandon the project at any time.\n\nI completely agree.  The dependency we are taking about here is Microsoft.Extensions.DependencyInjection which is not maintained by an individual developer and is extremely widely used, in real world apps and is a central to the net core stack. You would also be able to drop CommonServiceLocator as a dependency.\n\nIServiceProvider is not common in desktop or Xamarin development.\n\nIServiceProvider has been in the framework since .NET 1.1 and I grant that it may not have been commonly used in desktop applications (even though System.ComponentModel makes use of it) because developers want an actual Container with decent features. IServiceProvider is an abstraction for a container, and not a replacement for one..\n\nI think the intent of this post was to create a more standardized DI API that was more plug & play without all the ceremony.\n\nRead all the bullet points, and I think the intent of the post is clearly more opinionated than that, and I agree with many of those bullet points listed! I will leave it at that.\nP.s creating your own abstraction as you have suggested would still be an improvement over what is in place today so kudos if you do go ahead with that.. > IServiceProvider is not in netstandard1.1. \nIt is:-\n\n\nthere is no benefit to using IServiceProvider over using our own fa\u00e7ade interfaces. \n\nThere is a benefit to using IServiceCollection for registration of types. There is a large ecosystem of libraries that offer fluent api's for configuring them on startup with IServiceCollection becuase thats how they operate in an asp.net core scenario, or when targeting netstandard.\nConsider Xamarin apps - you can now use EF Core (Microsofts premier data access library.). How do you configure EF Core in the container? The answer is.. EF Core comes with a fluent API for IServiceCollection so you can configure it like this:- \nservices.AddDbContext<BloggingContext>(options => options.UseSqlite(\"Data Source=blog.db\"));\nMay I ask how we would register EF Core with a new abstraction? My assumption is we would have to examine Microsoft's code, then work out what services there fluent API registers, then perform the equivalent registrations with the new prism abstraction. If Prism exposed IServiceCollection for registration then pretty much any dependency used in netcore (i,e targeting netstandard) becomes compatible.\nAnyway, I feel I have said enough on this topic, ultimately the decision is yours to make, and if you don't see any benefit that's fine.. @brianlagunas  - re: named registrations, see: https://github.com/yuriy-nelipovich/DependencyInjection.Extensions - I haven't looked at it extensively but it looked simple enough at first glance. This package consists of about 4 classes.. > Keep in mind that XF has tons of issues with Android, iOS, and UWP as it is. It's a real massive pain in the ass. Now add another platform on top of that and it's cluster fuck of problems. I really wish Xamarin would concentrate on stabilizing what they have now before trying to shove another platform into an unstable code base. \n100% this :-)\nCombine that with the general tooling instabilities that we are living through in the form of VS 2017, net.core, netstandard, msbuild sdk changes and it's amazing that any of us are managing to remain productive at all!. I just updated from 7.0.0.362 to 7.0.0.396 and wanted to confirm that it solved my problem, which was: When navigating to a tabbed page, the default content page (tab) would be displayed. however it's viewmodel was not activated by prism and so it's UI was not data bound. After the NuGet package update to latest version it worked. Thank you.. Turns out I spoke to soon, the issue was not completely resolved after upgrading. I think perhaps the fix wasn't in 7.0.0.396. I'll await the next release!\n. Ok great, I have grabbed the CI package, working as expected now, thanks. Maybe I can take advantage of the new container abstraction model: https://github.com/PrismLibrary/Prism/commits/57cb55cfdd5f718d4bfc01282730e68bd06711ec/Source/Xamarin/Prism.Autofac.Forms/AutofacContainerExtension.cs\nI am thinking If I derive my own ContainerExtension, that stores a LifeTimeScope() - and then override the resolve methods to resolve from that stored scope instead of the main IContainer - perhaps that would work... Thanks.. > then you would need to implement a custom IAutofacContainerExtension, you can see how the base extension is here\nThat sounds like exactly what I have in mind at this point. I'll derive my own, and override the resolve() methods to resolve from my lifetime scope internally. Thanks for the pointer. Yeah that's fair. I haven;t had time to put together a repro for you, so i am just using a workaround of setting the nav mode myself each time I navigate for the time being. If I get time to spend on it further I'll trace a root cause and provide a repro if necessary.. I have narrowed down the issue a bit.\n\nCalling NavigationService.NavigateAsync(\"MainPage\") in OnInitialise does set the MainPage\nIf the MainPage is a NavigationPage -  FindViewById<Android.Support.V7.Widget.Toolbar>(Resource.Id.toolbar); works. If it's not a NavigationPage then it returns null.\n\nSo it seems that in order to get the toolbar, your MainPage has to be wrapped in a NavigationPage. \nWow. Took me about a day to get to the bottom of this.\n`. It's a bit of agotchain prism in that I have to add the.Wait()(or.Result) inOnInitialisedin order to ensure thatMainPagehas been set synchronously duringLoadApplication()before I start looking for my controls immediatley after inOnCreate()`:\n```\n        protected override void OnInitialized()\n        {\n            NavigationService.NavigateAsync(\"MainPage\").Wait();\n            // throw new System.NotImplementedException();\n        }\n```\nIs this a known issue?. Ah ok, so even though it's a Task, the MainPage is always set synchronously on the same thread. If that's the case that's fine, although to be honest, you would have to be familiar with the nav code to know that, from an API perspective there is no indication that this would be the case hence my caution. I did search for a Navigate() (non async) version of the method but didn't see one!\nAnyway thanks!. > All they need to know is that they asked to navigate somewhere, and they did\nI need to know that the MainPage has been set because I can't seem to get hold of the toolbar until this has occurred. Currently this is wrapped in an Async api, and called in a method that cannot be awaited. Perhaps there is a better way for me to know this from my MainActivity?. You can't await in OnInitialised(). Hence the need for me to add that Wait() or .Result - which both turn out to be unnecessary because as you have explained the implementation of that method ensures it sets the MainPage synchronosly - but I am just saying this is not something I  would know from the API i'd have to be familiar with the internals of that method! Anyway I've said plenty - core of my issue is resolved and thanks for your response :-). >  protected override void OnInitialized()\nThere is no async modifier?\n. Blown my mind. I just found IMasterDetailPageOptions - I think this might be the solution to this problem.. Will test it out. Yep. Solution was to implement IMasterDetailPageOptions. ",
    "brux88": "i try add Wait() but freeze. hi,\nIf I click on an action, open another view, and then back with the navigation backbutton I find it open again\ni added an mp4 screencast \n2017_07_07_10_57_53.zip\n. ",
    "erkantaylan": "Hey @bartlannoeye \nOkay I will do while I am reading it :) . ",
    "rajum": "Thank you Brian. I appreciate your quick response.\nIf i try to change xmlns in my application shell to \"http://prismlibrary.com/\", i get an error:\nThe name \"RegionManager\" does not exist in the namespace \"http://prismlibrary.com/\"\nI am assuming, we have to upgrade to either 5.0 or 6.3 in order to get this namespace working, correct?\nOne more question. If we are to upgrade, what would you recommend? \nUpgrade from 4.1 to 5.0, once looks good and then upgrade to 6.3?\nOr\nUpgrade directly from 4.1 to 6.3?\nI have been watching your PluralSight videos on Prism and they are very helpful and great many tips on complicated issues in Production Application.\nThanks again.\n. ",
    "juanperezADD": "Both, @brianlagunas and @dansiegel, talk about that if the regions were added, it would be a completely different API that what exists in WPF now. But, What limitations does XF because of it's nature? Are they possible to solve?. @dansiegel We think regions are definitely needed for larger devices like a tablet or desktop, maybe even for phones when using MasterDetailPage or TabbedPage for navigation. Regions allow us to compose a view with smaller views and it has it's own region navigation service.. @brianlagunas In December this issue was added as a \"TO DO\" in the Kanban board. Are there any plans to implement it this year? This is a feature that we are looking forward to get since XF supports WPF.. ",
    "Suriman": "As I understand it, the problem is technical, or rather time and development effort to implement a suitable solution.\nRegardless of this, what seems pretty obvious is that if XF is used in a future desktop option it will have to adapt to features that other frameworks like WPF, that were originally born on desktop, have.\nLet's take another example, the development companies of controls should also include controls that are originally designed for desktop in their versions for XF, for example, the Ribbon.\nAs I see it, the future should have a single framework to develop for phone, tablet and desktop, and this framework should be XF. Both XF and PRISM as well as third party control companies will have to adapt to this new scenario if we really want to see the fulfillment of a single way of doing things.. ",
    "jgtaveras": "@cpboyd after implementing the custom navigation page suggested by @dansiegel, the navigation service won't navigate the child view and I'm seeing this in the ouput:\n\"pushViewController:animated: called on  while an existing transition or presentation is occurring; the navigation stack will not be updated.\"\nany thoughts?. This is what I'm referring:\n- TabbedPage (defined in Xaml)\n   - CustomNavigationPage\n        - Page A (Tap on list item to go to View B)\n        - Page B (this Page it's never shown)\nThe Root TabbedPage is defined in Xaml as follows\n<TabbedPage>\n   <utils:CustomNavigationPage>\n        <x:Arguments>\n            <local:ApartmentsListPage/>\n        </x:Arguments>\n    </utils:CustomNavigationPage>\n    <local:PaymentsPage/>\n    <local:SettingsPage/>\n</TabbedPage>\n*Note, namespaces, titles and icons removed for simplicity\nNavigation to View B is being done through a command in the view model using the navigation service\nprivate async Task OnGoToDetailsCommand(object obj) \n{ \nawait _navigationService.NavigateAsync(\"ApartmentDetailPage\"); \n}\nAnd yes all page had been registered correctly\nContainer.RegisterTypeForNavigation<SettingsPage>();\n     Container.RegisterTypeForNavigation<ApartmentDetailPage>();        \n     Container.RegisterTypeForNavigation<ApartmentsListPage>();\n     Container.RegisterTypeForNavigation<HomePage>();\n     Container.RegisterTypeForNavigation<PaymentsPage>();\n. thx for the support @cpboyd indeed Prism wasn't the problem, Acr.UserDialogs was the one to blame in this case. ",
    "scovetta": "Sounds good, thanks!!. ",
    "nivedano": "Shell or other core components may themselves be dep-injected from modules. I want my host app to load different shells, for example. Or to allow shell some logic to construct itself. Of course, you can make a proxy, defer some initializations or do some other tricks, but the fixed order of initializations is restrictive. Regions look like a kind of such proxies, but they address only a part of possible design situations.\nI accept that there're substantial reasons for such design, but they're not the only possible ways to go. \nIt would be good to have initialization of modules two-phased, pre-shell (after module catalog and container builder are configured) and post-shell (as now) inits.. ",
    "rubgithub": "It was missing ViewModelLocationProvider.SetDefaultViewModelFactory((viewModelType) => Container.GetInstance(viewModelType)); on OnInitializeAsync, . ",
    "WonkiDonk": "https://github.com/PrismLibrary/Prism/compare/master...WonkiDonk:features/1087-SimpleInjector?expand=1. Included some changes from a review by @dansiegel in Slack.. I had trouble running the tests, actually. Some of the tests seem to rely upon a TESTS compiler directive being defined, but I can't find that anywhere. I've added it to the Prism.SimpleInjector.Forms project to get the tests running.. Hey @dansiegel. Thanks for your patience. I think I've fixed the build issues now. When I originally added the Prism.SimpleInjector.Forms and associated test projects, Visual Studio played around with the configurations, which broke the Test build configurations (hence why I thought there'd need to be a compiler directive defined for this). I rolled back the changes to the solutions files and re-applied (paying careful attention to the changes that were made by VS).\nI've tested all solutions locally and they all work fine. Hopefully this facilitates closing the PR!!. I've resolved the merge conflict and ensured Prism.SimpleInjector.Forms has been added to PrismLibrary.sln. Should be good to go, @dansiegel \ud83d\udc4d . Oh. I'll take a look over the weekend.. ",
    "aytacasan": "@bartlannoeye,\nI follow prism documentation and do all steps like it's mentioned. But i do a mistake and override KeepAlive for wrong view model. So normally it's not worked as expected. But i fix it and now it's working. Sorry about that.\nPlus, I don't know can i deactivate or how can i deactivate an issue. So please deactivate this issue for me.\nRegards,\nAytac Asan. @brianlagunas  thank you so much!. @brianlagunas,\nThanks for your answer. Before I can not connect with each other somehow, but after read your answer, i remember that prism documentation (Part 06 Advanced MVVM) mentioning my problem and it's solution exactly and clearly. Sorry for take your time with this stupid question.\nRegards,\nAytac Asan. You are right. Even so, thanks for your understanding @brianlagunas.. @brianlagunas, EventSetter can be use only for routed events and window closing is not a routed event. Also EventSetter handler must be on code behind which is don't like and/or prefer. Am i right?\nMaybe i'll choose custom dialog solution, but i don't understand it. Could you please tell me some links from your blog (or from other source) for both solutions.\nThanks. ",
    "sebastianzolg": "We experience a startup crash of our UWP app when build in release with .net native, but only on a hosted build agent in visual studio team services. On the local machines it builds and starts without a crash. \nI used windbg to narrow it down and the error message is:\nFailed to assign to property 'Prism.Windows.Mvvm.ViewModelLocator.AutoWireViewModel'\nAny idea why this could happen on a build agent machine and not on developer machines. Same code base and same configuration from what we can see. . ",
    "dIeGoLi": "Just as a hint for other newbies like me, because there is no message. My mistake was i had not registered all types required to instantiate the view model and the the types required to instantiate the types for the view model... in the IoC Containter in the app.xaml.cs\nContainer.RegisterType...\n. ",
    "EvanHutnick": "+1 to the comment from @dIeGoLi \nMissing dependency mapping was the source of this error (using 6.3 here) from someone not checking in the updated infrastructure registrations.\n. ",
    "mjmeans": "I'm also experiencing this error. However, it is random. When running in debug mode from VS 2017 most of the time the pages load and run fine; however, rarely (perhaps 1 in 20 compiles) it will fail when navigating from a main page to another page. I'm using WTS. The only common things about the pages that fail and the pages that don't is that the failed pages ARE NOT listed as a NavigationViewItem in the Shell and the failed pages ARE being passed a string object parameter in the _navigationService.Navigate().\n. I'm using Windows Template Studio so CI builds are a non-starter.. ",
    "John-Burbidge": "In this post (but I could be mistaken in the intent) Brian mentions \"Calling OnPropertChanged(String.Empty) is the best approach. It's simple, clean, does not require creating a derived class, and does not require creating a dirty API in the Prism implementation.\"\nhttps://github.com/PrismLibrary/Prism/issues/817\nI'll give your approach a try tomorrow.\nThanks for the help!\n. ",
    "Maharba": "UPDATE: Sample project attached.. ",
    "fredrikhaglund": "You are aware that this class does not work at all unless compiled in debug mode? Debug.WriteLine is removed by the compiler when compiled in release mode. \nMy whole point is that I used this class in my project and wasted time figuring out why nothing was logged. \nAnother option that does not introduce a breaking change by removing the class would be to add an obsolete attribute with a warning when compiled in release mode. Better?. I added #define DEBUG and removed conditional compilation to DebugLogger class.\nRemoving the class or hiding it with a conditional compile would be a breaking change so this is better.. Changing so the default is always the EmptyLogger and updating unit test to use DebugLogger? \nLeaving the DebugLogger as default will cause unneeded string handling and debug logging in release builds of Apps. Not a big deal but everything that can help improve performance in mobile apps is welcome.... ",
    "james1301": "Same result if you did the same for View2 and added a region in there, it still doesn't get cleaned up. As well as removing all of my overriding classes.. Not an 100% guarantee no but has been a pretty good indicator I've used in the past with decent results. Here is the Memory graph. Do I need to enter a new issue now?\nView2 memory graph.pdf\n. Some of our testers have brought up a memory issue, and I am trying to look into it, but the view and ViewModel not clearing up straight away is clouding my search as to whether there is actually a problem or not.\nI've provided my sample application (slightly simpler version: https://1drv.ms/u/s!Av4A-OzchDGliEodmWzzkkuYh7qO). I took a snapshot between starting the application, launching my view with a region in, closing the view with region and taking another snapshot. This is the results of View2 still existing. Nothing is setup as a singleton. But after doing snapshot 2 the View and ViewModel are still there.\nIs MEF not recommended to use? This is what our fairly large enterprise application is currently using, so would be quite an effort to change container.. I see, I may have to review using this then.\nI am deactivating the view yes. They are resolved through MEF but they are set to     [PartCreationPolicy(CreationPolicy.NonShared)]. If I navigate to the View again and close it, it will clear up the first instance of the View and View Model. If I do not have a child region in the view, it will also be cleared up fine straight away.. I will mess about with that yeah, but as far as I know the region is removed, or else when I navigate to a new instance it would complain because of the duplicate region. I will look into it.\nYeah only one instance, which as I say probably isn't that bad, but is just making it more difficult when testing this kind of stuff. And the size of the view's in our actual application can get quite large, so ideally there wouldn't be one instance hanging around.\nThank you for your input.. Yeah I do use IRegionMemberLifetime and I am setting keep alive to false, which does result in it actually being removed like just manually removing it from the region. Hence, when if I comment out the child region from the View, it is cleaned up straight away. It seems to just be just when there is a child region that makes it stay in memory.. Back when I started using Prism like 5 or more years ago, MEF seemed like one of the simplest implementations. Just having to configure the export on the actual View and ViewModel, seemed more relevant that having to go somewhere else to add it to the container etc.. That's not really what I meant, I know how a command works... Basically there is a delegate command on my custom control, which has a CanExecute that relies on a couple of bound dependency properties. My Button within my custom control is disabled because it never updates it CanExecute when these properties change. To fix this at the moment I am calling the RaiseCanExecuteChanged on the command in the Dependency Property PropertyChangedCallback. But it would be much neater if the DelegateCommand's ObserveProperty would just work with Depedency Properties also. . The documentation suggests it should work with the title \"Working with TabbedPage's (or any MultiPage)\n\" : https://prismlibrary.github.io/docs/xamarin-forms/Working-With-TabbedPages.html. Unless I am missing what the MultiPage refers to. The selectedTab option does work so it is a bit confusing. \nI'm not sure how you are able to pass in any data to the children otherwise, I have had workaround it using events.. Cool thanks, I'll try that.. Cool sounds good. Any chance of updating the documentation? I think this is what confused me the most.. Yeah I had just noticed that actually!. ",
    "mustafasaaed": "In the homepage listview I have this behavior:\n<ListView.Behaviors>\n                <b:EventToCommandBehavior EventName=\"ItemTapped\"\n                                          Command=\"{Binding ItemTappedCommand}\"\n                                          EventArgsParameterPath=\"Item\"/>\n</ListView.Behaviors>\nin the home page viewmodel :\n    `public DelegateCommand<Recipe> ItemTappedCommand { get; set; }`\n\nin the Constructor :\n```\n public HomeViewModel(INavigationService navigationService)\n        {\n            RecipesCollection = new ObservableCollection(new Data().GetRecipes());\n            ItemTappedCommand = new DelegateCommand(NavigatToDetailsPage);\n            this._navService = navigationService;\n        }\n```\nprivate void NavigatToDetailsPage(Recipe recipe)\n        {\n            var navigationParams = new NavigationParameters();\n            navigationParams.Add(\"Recipe\", recipe);\n            _navService.NavigateAsync(\"RecipeDetail\", navigationParams);\n        }\nin RecipeDetailViewModel which Implement INavigationAware \npublic void OnNavigatedTo(NavigationParameters parameters)\n        {\n            _recipe = (Recipe)parameters[\"Recipe\"];\n        }\n. I found the problem, it turns out when I set the BindingContext=\"{Binding item}\" on the Details Page it prevents the call to these methods !! is that a normal behavior ?. I have created a sample demo project to reproduce the issue \nhere is the project. ",
    "abrull": "@brianlagunas Hi, I'm not getting in the uri any pages that I navigated to using modal navigation. Is this intentional or am I missing something?. ",
    "vidalkk": "Hi Dansiegel,\nThanks for the Tip. How can I use it for this purpose?. ",
    "toreaurstad": "Symbol servers are nice. \nThis is probably a strategy many know already about, I include it as a suggestion. \nIt is possible to also obtain the pdb files by cloning the Prism source code and getting the pdb files via building Prism. For example, first off cloning Prism library: \ngit clone https://github.com/PrismLibrary/Prism.git\nThen we see which remote branches are available: \ngit branch -a \nHmm, in my business case there are no branches for version 6.3. Maybe a tag perhaps: \ngit tag\nAha! There is a 6.3 version among the tags! Checking the tag out as a local branch: \ngit checkout tags/Prism.v6.3.0 -b Prism630\nSwitching to VS 2015, I build the Prism.Wpf solution and especially the Prism Autofac project to obtain Prism.pdb, Prism.Wpf.pdb and Prism.Wpf.Autofac.pdb files, which I was looking after.\n. ",
    "SunboX": "...same for SessionStateService\n\n. This will fix the issue:\n```c#\n/// \n/// Invoked when application execution is being suspended. Application state is saved\n/// without knowing whether the application will be terminated or resumed with the contents\n/// of memory still intact.\n/// \n/// The source of the suspend request.\n/// Details about the suspend request.\nprivate async void OnSuspending(object sender, SuspendingEventArgs e)\n{\n    IsSuspending = true;\n    try\n    {\n        var deferral = e.SuspendingOperation.GetDeferral();\n    //Custom calls before suspending.\n    await OnSuspendingApplicationAsync();\n\n    //Bootstrap inform navigation service that app is suspending.\n    NavigationService?.Suspending();\n\n    // Save application state\n    var saveAsync = SessionStateService?.SaveAsync();\n    if (saveAsync != null)\n    {\n        await saveAsync;\n    }\n\n    deferral.Complete();\n}\nfinally\n{\n    IsSuspending = false;\n}\n\n}\n```. Hey, no problem. I just needed a solution for my application crash. You are right, the root cause should be resolved, not the effect. \ud83d\ude04 \nThanks for your work! \ud83d\udc4d . The root cause should be resolved, not the effect. Will close this.. ",
    "rainman-63": "The root cause we've experienced is when the UWP app uses App2App Communication Services and the UWP app has previously been suspended or closed.  When the next App2App communication comes in, the UWP app is activated via OnBackgroundActivated, thus the Prism InitializeShell and InitializeFrameAsync methods are not executed, so NavigationService and SessionStateService are null.. Thanks @MikelThief. ",
    "sebfrie": "Any news or even timeline to share?. ",
    "galmond": "Thanks for investigating Brian, much appreciated.  Unfortunately the view names are already defined and I can't change them so I'll follow your fix suggestion above. I'll also raise the issue with the autofac devs. Thanks again.. Thanks Brian, I attempted it myself and it's exactly the same as yours. I raised the issue with the Autofac devs but haven't had a response yet, although I suspect the reason the Autofac content loader doesn't exist is due to this stackoverflow response...\nhttps://stackoverflow.com/a/9120836. ",
    "gitlsl": "public void Initialize()\n        {\n            _container.RegisterTypeForNavigation<ViewA>();\n            _container.RegisterTypeForNavigation<ViewB>();\n         } \nthis work in the demo  NavigationParticipation  which use IUnityContainer\nif you switch to Autofac  you should do like next\n````\n                   var containerBuilder  = new ContainerBuilder();\n                        containerBuilder.RegisterTypeForNavigation(\"ViewA\");\n                        containerBuilder.RegisterTypeForNavigation(\"ViewB\");\n                    containerBuilder.Update(container);\n\n`\n. ",
    "topfunet": "not just autofac, i'm using DryIoc, this issue still exist.. I'm sorry, my bad.\nI create a project to demonstrate the issue.\nhttps://github.com/topfunet/PrismNavigationBugDemo\nI created a TestView and TestViewModel, then in Bootstrapper i use this line register it:\nContainer.RegisterTypeForNavigation<TestView>(\"test\");\nthen when i use _regionManager.RequestNavigate(\"ContentRegion\", \"test\") found that TestViewModel's IsNavigationTarget never gets called.\n. thank you very much.\nI already solved this.. ",
    "Bigsby": "My bad.\nAlready in code. Most likely old package version.\nCommit. ",
    "DingpingZhang": "@bartlannoeye If you don't like to unsubscribe and generatenodes in the OnPropertyChanged method. I think it can be rewrite in follow form: \ncsharp\n        public PropertyObserverNode(string propertyName, Action action)\n        {\n            PropertyName = propertyName;\n            _action = () =>\n            {\n                action?.Invoke();\n                if (Next == null) return;\n                Next.UnsubscribeListener();\n                GenerateNextNode();\n            };\n        }\n        ...\n        private void OnPropertyChanged(object sender, PropertyChangedEventArgs e)\n        {\n            if (e?.PropertyName == PropertyName || e?.PropertyName == null)\n            {\n                _action?.Invoke();\n            }\n        }\n@brianlagunas \nAlso, I realized that the name of GenerateNode(inpcObject) is not good, and I think it should be called SubscribeListenerFor(inpcObject). . Edited.. Edited.. ",
    "mo-kml": "@brianlagunas  actually i am doing this. i`m using MessagingCenter of Xamarin forms to send a message to my ViewModel  that my authentication has been expired. but even when i use MessageCenter and navigate from my ViewModel it wont  navigate or even not display alert with dialogService . that didnt really help at all. actually when i register a navigationPage and try to pass all my pages through it i one of my pages when i try to Goback this exception happens. but when i dont use a navigationPage this will not happen at all.\nhow would i fix this?. ",
    "kekovespa": "Thanks, I will give it a try. If I'm successful I will come back and post about it.\n. ",
    "sa13m": "what method?. Brian, I will tell in more detail.\nUser works in the CustomersView and set the filter in DataGridColumnHeader Column.Name = 11:\n\nThen double click in first row and there is a navigation to EditCustomerView for editing. Save changes and comes back CustomersView. GoBack() method freeze for 1-2 second and the filter is clear:\n\nIf to put TextBox under DataGrid and edit property Text after navigation Text doesn't change, I expect such behavior from DataGridColumnHeader filter.\n. ",
    "RonildoSouza": "But this same procedure without using Prism works.. \nhttps://github.com/RonildoSouza/POC/tree/master/App1/App1\n. I did some research and found no examples with MasterDetail and DetailPage with ListView and ContextActions.\nDo you have any examples so that I can compare?\n. Note\nThe last printscreen did not use Prism.. I implemented.\nWith\nhttps://github.com/RonildoSouza/POC/tree/master/POC/POC/Views\nWithout\nhttps://github.com/RonildoSouza/POC/tree/master/App1/App1\nAnd the result is different\n. Sorry, this line is commented on in my local code.\nI will implement a same app with and without Prism and I will report the results.\nthank you.. ",
    "Giorgi": "Yes, you can already do it but something like this looks cleaner/less verbose to me:\nObservesProperty(() => PropA, () => PropB). Yes, I agree that it's very easy to add such extension method but why not include it in the framework itself?. Yes, I agree ObservesProperties would have been a better name. As for making the api explicit I'm not saying that we should remove the current ObservesProperty method, just add a new one which makes observing multiple properties less verbose but as you said it's a personal preference.. Found it!\nI had a file with build action set to \"EmbeddedResource\" and looks like when I ported the project from PCL to .netstandard I forgot about it and the file was not being embedded any more. This was causing null reference exception in MasterDetail page ctor and navigation was failing silently. Once I set the correct build action it worked as expected.\nBy the way I have a handler for AndroidEnvironment.UnhandledExceptionRaiser and AppDomain.CurrentDomain.UnhandledException but the exception was not being reported there. Perhaps it makes sense to rethrow the exception at least in Debug mode? Or maybe print it to the Output window of VS ?. Cool, thanks. Finally I can switch my project to .net standard!. ",
    "ysmoradi": "Hi @brianlagunas \nI think I managed to find something related to this issue.\nConsider following code in Prism library (as an example only) =>\nhttps://github.com/PrismLibrary/Prism/blob/master/Source/Prism/Commands/DelegateCommand%7BT%7D.cs#L67\ncsharp\nthrow new InvalidCastException(Resources.DelegateCommandInvalidGenericPayloadType);\nIt uses \"Resources\" which are stored in Resx file. The Prism nuget package does not contain any Resource dll and I receive the same exception \"System.IO.FileNotFoundException Prism.resources.dll\" when I reach that code I mentioned before.. @dansiegel Latest stable versions of VS 2017.4 + Xamarin.Android + Xamarin.Forms + Prism\nThere is no update indicator in nuget package manager & vs notification center.\n@brianlagunas I'm sure that it's somehow related to our project, but I can't find out how!\nI'm trying to find more info and I'll discus them here as I move forward.\nThanks in advance.\n. ",
    "juanagu": "Thanks, I implemented the event aggregator and works! :) . ",
    "Dirkster99": "Thats funny because I already asked the question on Stackoverflow\nGot NO answer\nAsked it on MSDN\nand they directed me her to be directed to StackOverflow :-(\nI was not aware that MEF is discontinued.\nIs there a replacement for MEF?. This issue describes exactly what I reported here:\nhttps://github.com/PrismLibrary/Prism/issues/1151\nI don't really understand why supporting a relativ from the executeable is an issue.\nI really wonder what the value of the current functionality is, if I can:\n1) only use a fixed path in the app.config or\n2) am forced to change to an applications folder before being able to use it?. ",
    "avinash-ramireddy": "Sure. Will keep that in mind. I just thought that it will be fast for reply if I do ask here.\nYou can test if the navigation is back, if so don't do a new call. - Should I use eventaggregator or messaging center to remember that I am navigating back or something else?\n I am not sure with the approach in Prism for this kind of things.\nOf course, I try to use Akavache but I would like to also  know about the approach to follow just in case if I can't make it work.\n. Thanks. \nIt worked.. ",
    "CMorooney": "I have a use case in my app where a page will present a modal to select a location when filling out a form. The modal will be dismissed when a location is selected and the user will be back at the form. \nOnce the form is completed the app will push a new page. In OnNavigatedTo of my view model for the form I would be checking the parameters for the selected location data, but that data would not be there when popping back from the new pushed page.\nI could make an extra check on the parameters or pass the data back from the modal view model in another way. In my case, however, I thought it would be clean to check how the page was navigated to, knowing that if it came back from a modal navigation that there would be location data to consume.. ",
    "etiennestrydom": "The viewmodels not automatically linking is caused by template pack creating the MainPage.xaml with a double reference to Views in the namespace: \nx:Class=\"MyApp.Views.Views.MainPage\"\n\nAfter fixing all the namespaces and changing my code in the App.xaml.cs to:\n    protected override void OnInitialized()\n    {\n        InitializeComponent();\n\n        //MainPage = new MainPage();\n\n        NavigationService.NavigateAsync(\"MainPage?title=Hello%20from%20Xamarin.Forms\");\n    }\n\nthe MainPage's viewmodel seems to be linked and triggering the constructor but before the page renders there is an error:\nFoundation.MonoTouchException:\nObjective-C exception thrown.  Name: NSInternalInconsistencyException Reason: Application windows are expected to have a root view controller at the end of application launch\". Cool thanx! works like a charm :). Is this documented anywhere or where can I read more about the template pack for mac?. ",
    "moe45673": "@brianlagunas Hey, my company is with v6.2 but the IsNavigationTarget issue has been annoying me to no end as my URIs cannot match the shortfilenames. So I worked up a fix, ensuring it has no effect on performance. \nBasically, it's create a class that's a glorified Dictionary called UriTypeMapper with appropriate getters and setters. It's a Singleton that's registered with Container in Bootstrapper.ConfigureContainer(). \nImplement the IRegionNavigationContentLoader.\nIn the IRegionNavigationContentLoader..GetCandidatesFromRegion() method, call UriTypeMapper.GetTypeFromString(string str). GetTypeFromString() first checks the Dictionary.Contains(str) method - if false it calls the private Refresh() method (which goes through the DIContainer.Registration collection and builds the Dictionary from scratch). Regardless, it returns the associated type or throws KeyNotFoundException. \nOnce back to the calling method, it goes through the Region and builds the collection based off view.GetType() == UriTypeMapper.Value, and not string.equals(view.GetType().Name || view.GetType().Full yawn... Fullname, uriAsString). Which it then returns. \nSo it's a mapping class  that allows the RegionManager to tap into the Registrations while preserving decoupling. That's the idea, a few improvements can be tweaked such as a better way to update the mapping Dictionary. . @brianlagunas  Thanks for the response. Using UnityContainer FYI so it shouldn't make a difference. \nThe default functionality of URIs being matched to GetType().Name is written in the Prism Documentation:\nhttp://prismlibrary.github.io/docs/wpf/Navigation.html\n\"Note: For Prism to determine the type of the target view, the view's name in the navigation URI should be the same as the actual target type's short type name. For example, if your view is implemented by the MyApp.Views.EmployeeDetailsView class, the view name specified in the navigation URI should be EmployeeDetailsView. This is the default behavior provided by Prism. You can customize this behavior by implementing a custom content loader class; you can do this by implementing the IRegionNavigationContentLoader interface or by deriving from the RegionNavigationContentLoader class.\"\nI created a custom mapper because I disagree that that's the way the default behavior should be. A Uri should not need to be tied to the typename.\n. Hey man, I've got a lot of respect for you and Prism itself so I'm glad to hear that my desire for URI-Type independence is considered noteworthy :)\nHere's a link to the code and where it's used. I'm using WPF, FWIW\nhttps://pastebin.com/uk8W2DWT\n. Hmmmm, I am a bit torn on focusing on registering a view for navigation as my design is usable with any aspect of Prism (such as IEventAggregator), not just the RegionNavigation aspect, since the Mapper holds ALL the registrations in the container. It doesn't care who calls it. It runs quickly in the GetTypeFromUri() method because it's a Dictionary (and not a List like in Unity) and when searching candidates in the ContentLoader, it only has a relative handful of views in the region to go through when comparing Types. \nThere are some aspects that need to be tightened up in my UriTypeMapper. One is if a registration is edited in the unityContainer.Registrations after launch, the GetTypeFromUri() won't trigger the Refresh method and will return the original Type. Another is the way I add a Key if Registration.Name is null; I use the MappedToType.fullname. I am unsure if that is correct but I don't want to use \"MappedToType.Name\" because different aspects of a large application can use the same classnames (with different namespaces).\nPerhaps there can be a custom IContainerRegistrationBehaviours interface that holds a Refresh() method whose concrete implementations are based on the concrete Container used. A reference to this is composed within UriTypeMapper and UriTypeMapper.Refresh() wraps IContainerRegistrationBehaviours.Refresh()? I think that's the Strategy design pattern?\nI don't want to squander this opportunity but it's late and its Valentine's Day and I've got a wife waiting at home. Additionally, I want to have a close look at the suggestions and code you sent me tomorrow when I'm more awake and when my colleagues are here to consult with. They're really supportive of my desire to get the damned IsNavigationTarget() to properly work in our application with our Uri-naming constraints. \nI really appreciate your attention and will pick this back up tomorrow. Cheers, man!\n. Wouldn't my paragraph about IContainerRegistrationBehaviours address this? The UriTypeMapper.RefreshMapping() method is the only part that relies on the concrete container and as long as there is some way to access the Uris and mapped types in the desired container, it doesn't matter how it's done. \nHopefully other containers offer events or something you can subscribe to when the Registrations are updated and the mapper can populate its dictionary that way...... Seriously, though, I want to address your points coherently but my brain works better earlier in the day and I need to study your links. We'll speak tomorrow :). Hey Brian! I have studied your points with a fresh mind. I really like what the RegisterForNavigation method is doing but my issue with it is that it is limited to the RegionManager element of Prism. I also have issue with the fact that it needs to be explicitly called by the user for the registry to be updated. I fully believe that a Prism-managed auto-updated global registry is the way to go as then the user can use their Uri's anywhere. \nI fully agree that the registry/mapper needs to be container agnostic. My main experience with Prism is with WPF and Unity, so I am unfamiliar with other DI implementations. Could you point me in the direction of a widely used container or two that makes it difficult to scan the internal Registrations?\nI checked out the IOC folder, is the idea behind this that all containers that are compatible with Prism need to implement these interfaces? Is there a way to ensure that something algorithmically similar to RegisterForNavigation() is how the Extension.Register() methods are implemented, like the Template pattern would do?\n. @brianlagunas Regarding your first point, I hope I'm not misinterpreting but if you're referring to RegisterForNavigation(), obviously that's designed and only meant to be used by the Regions. What I meant to say was that that method should be done away with and the functionality of it should be built into Ioc.IContainerRegistry.Register(). The \"NavigationRegistry\" object that the former method calls for should actually be a global registry, not one specifically made for the Region namespace.\nI respectfully disagree about what the issue is. I think the fact that IsNavigationTarget doesn't respect custom registered names is a symptom of a deeper issue. The real core of the problem is one of two things\n1) Either passing the Container's internal Registration.Name to the NavigationContentLoader is inappropriately tightly coupling the two objects, in which case another method for identifying the candidates should be used\n2) Every object in Prism should have access to the registrations for cases like these. \nThe second point is actually true in practice with containers like Unity, only it takes a large amount of time to search through the Registrations.\nNote that this is from my viewpoint down here in the weeds and if you can school me good, I'm really eager to learn more and adapt my own approach to code.\nI'm going to look at NInject and see what they provide for access so I can see about making it more agnostic. Your input is awesome, thanks!\nHaving said all that, I'm fairly confident that my mapper would work in any instance. It doesn't have to be a  dictionary (I just did it that way to whip something up quickly, back of a napkin/proof-of-concept type thing), it would more appropriately be a  type dictionary to match my concept of it.. I apologize, I was hasty in declaring that the NavigationRegistry should be done away with. I haven't looked into that specific component as it's Xamarin-focused. I did realize after I posted that the NavigationRegistry likely has specific data beyond that within the container. Cue Homer_Doh.jpg. Nonetheless, NavigationRegistry's inclusion or not should have no bearing on my proposal.\nCan I ask why Xamarin has a registry and WPF does not?\nThe reason I bring up my point 2 in my prior post is that the default comparison code feels really, really amateur to me, that hardcoded comparison, and I can't help picturing that the guy writing the code was too tired when he reached this unexpected hurdle . I'm no Alan Turing but even I see that and I can't imagine you don't. So who knows what future interfaces will be added to Prism, only for this issue to come up again? \nIn other words, It happened before, it can happen again. It's a little stronger than a hypothetical what-if. However, you're a well known software architect and I'm not even sure everyone in my office knows my name, so I defer to you :)\nAnd that bit about the ServiceLocator, I get why you wrote that. Yeah, that's bad code but it can be easily fixed by injecting the container into the constructor or by nabbing a reference from the RegionManager or by.... well, there are other ways. Yes, it's bad and I get why it bothers you, but it is not the torpedo to sink my proposal (as mentioned, this is more a Proof of Concept to ask your advice on if my department should go ahead with and if it's safe for future versions of Prism; I also bring it up with you just in case it is the solution you guys have been searching for). I do like that you mentioned how the ServiceLocator bugs you and I appreciate any further criticisms you may have because experience :). Hey, @brianlagunas I know I've been quiet but had an extremely busy week and had to put this aside. My hardcoded fix for Unity is satisfactory for my company's purposes and will be pushed into production if no changes are made. I want to keep this conversation going regardless, just for my own personal neurosis about leaving a quick-fix and missing out on a learning experience. Just finished up a milestone this week so I will dedicate more time to this next week (and will properly respond to your post and all the fun things I repeatedly say). ",
    "GioviQ": "I have the same issue with DryIoc, so I matched uris with view names to solve.. I discovered now that RegisterTypeIfMissing(typeof(IHubGateway), typeof(HubGateway), true); registers both IHubGateway and  HubGateway, but only\n Container.Resolve<IHubGateway>()\n\nreturns a singleton and\n Container.Resolve<HubGateway>()\n\ncreates new instances.. ",
    "IsmailHassani": "Thank you Brian. I will pass this to Maksim.. ",
    "ChrisJAult": "There appears to be the same issue with dynamically created tab pages.  For example my nav url is app:///MasterDetailPage/TabsPage?createTab=NavigationPage|ViewA&createTab=NavigationPage|ViewB&createTab=NavigationPage|ViewC&selectedTab=ViewA\nIActiveAware IsActive is not fired if I tap on tab ViewB when the app is first started. ",
    "roberszr": "Hi Brian,\nI'm new on using Prism (6.3), and I've got a strange behavior when using PopupWindowAction . I would try to explain; I've got a module in which there is a third party library for a softphone (VoIP library). The problem is that if i show a PopupWindowAction,  the third party library, VoIP library, gets blocked until i close the PopupWindow...Am I doing something wrong? Is the only way to do that? Is the third library wrong? I don't know what to do because i can't use PopupWindow on, for example, an incoming call...\nBest rergards. ",
    "darinclarkdev": "Maybe launch a second shell instead of using a PopupWindowAction. Check out Infragistic's reference apps that emulate word, excel and outlook. They use prism with some advanced designs. \nPS questions like this are probably better suited to prismlibrary.slack.com. ",
    "joncortez": "@brianlagunas - It seems that I still need to have the ctor above if I have a custom NavigationPage on a TabbedPage. Otherwise, I am getting the following exception System.MissingMethodException: Constructor on type 'WellRx.Forms.Views.MyNavigationPage' not found. Is this a regression of the previous bug?\nMainTabbed.xaml\nXML\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<TabbedPage\n    xmlns=\"http://xamarin.com/schemas/2014/forms\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n    xmlns:views=\"clr-namespace:MyApp.Forms.Views;assembly=MyApp.Forms\"\n    x:Class=\"MyApp.Forms.Views.MainTabbedPage\">\n    <TabbedPage.Children>\n        <views:MyNavigationPage Title=\"Tab1\">\n            <x:Arguments>\n                <views:Tab1Page />\n            </x:Arguments>\n        </views:MyNavigationPage>\n        <views:MyNavigationPage Title=\"Tab2\">\n            <x:Arguments>\n                <views:Tab2Page />\n            </x:Arguments>\n        </views:MyNavigationPage>\n    </views:TabbedPage.Children>    \n</TabbedPage>\nMyNavigationPage.cs\ncsharp\npublic class MyNavigationPage : NavigationPage\n{\n   public MyNavigationPage()\n   {\n      BarTextColor = (Color)Application.Current.Resources[\"primary-color\"];\n      BarBackgroundColor = Color.White;\n   }\n}\nPackage info\nPlatform: Visual Studio for Mac\nPrism version: Prism Form 7.0.0.396\nXamarin Forms version (if applicable): 2.5.0.280555\n. ",
    "ribas1a3": "Can confirm the issue still exists and needs the workaround.. ",
    "bakhti346": "I am having the same issue but i am not using a custom navigation page i am using the default navigation page provided by Prism.. ",
    "eliasribeiro": "Hello Brian, but this error does not occur in the pure Xamarin Forms project created in Visual Studio, but in the pure Prism Template Pack (Prism Template Pack) project occurs error. The fix is based on configuring the \".storyboard\" file, but it does not exist in the iOS Project of Prism Unity Project for Xamarin Forms.. Hi @dansiegel and @brianlagunas i use Prism Template Pack for VS2017(Windows 10), on MacOS only have XCode and VS2017 for Mac because i run on iPhone emulator.\nI create one video for you look: https://www.youtube.com/watch?v=DTVNQ8R_5mE\nThanks for help.. Thank you, this was the problem. info.plist was with minimal version 6. I did not know. \nThanks for helping me.. ",
    "HesamKashefi": "Didn't expect this :( \nSo I'll use something else for now cause I'm in deadline.\nI'll come back and try to help if UWP gets any focus in the future... =(. ",
    "Shashanka77": "@brianlagunas Can you please give a rough estimate on when the new Prism.Unity will be available? I am supporting latest unity library.. I know this is may not be the platform for this question. We had recently migrated from Unity to Autofac Prism not just because Prism's unity with latest isn't ready yet but mainly because as we are consuming .NETStandard 2.0 libraries in our WPF Prism application. We were able seamlessly convert into AutoFac prism without much hassle. But problem we are facing now is we are getting \"Could not load System.Runtime.dll\" error upon installing via ClickOnce. Please NOTE we also migrated to .NET 4.7.1 in order better solve this issue. Any insights in this respect will be greatly appreciated. Thank you. ",
    "1valdis": "So how long it's going to take to move Prism to Unity 5? I've tried to use Unity 5.3.2 and I can't even override CreateShell in my bootstrapper because there's no IUnityContainer which it wants.. @dansiegel Wow, didn't looked for pre-release version. Thanks!. ",
    "less0": "Thanks for your quick reply, Brian,\neither me or you did understand something wrong. Of course what you wrote is correct, if there is only one registration of IDependency. But, if I registered IDependency twice\nContainer.RegisterType<IDependency, DependencyImpl>(/* default config */);\nContainer.RegisterType<IDependency, DependencyImpl>(\"CustomDependencyConfiguration\", /* custom config */);\nthere is no way of telling ViewModelLocator which registration to use and it will always use the first - unnamed. To avoid this, I have to use the workaround presented above. Or did I get something wrong?. Dear Brian,\nThank you very much. This is exactly what I wanted. \nWhy shouldn't I register a custom configuration with RegisterType? With InjectionConstructor I can perfectly build up my custom configurations with RegisterType, too. . ",
    "pawanshakya": "Including \"xmlns:local=\"clr-namespace:XXX;assembly=XXX\"  \" and below lines for resources , seems to fix the issue for me. \n\n\n\n\n. ",
    "dkofoed": "Attaching zip file containing sample app and ANTS profiler results.  \nSamplePrism6.2.0.zip\n. Thanks for the response ... couple follow up questions:\n1) What are you referring to when you say \"multiple bootstrappers\"?  There's only one in the sample app we sent.\n2) We can't comment out the code in the ExecuteTabChange method as no content is loaded in that case.  That logic is performing a \"navigation\" to essentially load the content of the tab when the tab is selected since we do not want to load all content for all tabs during the initial load of the tab control (i.e. lazy loading).  We initially were using view injection but changed to the navigation approach.\n3) We've watched the majority of your Prism presentations already, including the Tab Control one that you recommended.  The tab control course is great, however doesn't showcase the same scenario, as we need all tabs to load at once - not on demand.  The sample we sent is our general approach to that (including lazy loading of the actual tab content upon selection), however if you think there's a better way to achieve all that with Prism, would it be possible to upload a sample demonstrating that?\nCheers!. ",
    "randalvance": "@brianlagunas Can I navigate to a tabbed page tab within a tabbed page (nested tabbed page)?\nLooking at the code, it looks like it terminates at the last tabbed page.\nIt would be great if we can do this:\nTabbedPage?selectedTab=AnotherTabbedPage/AnotherTabbedPageTab . ",
    "mgj": "I can definitely see some apps wanting to use OnStartup but honestly, after dealing with the insanity that is android activity and fragment lifecycle callbacks, im leaning towards keeping the lifecycle as simple as possible. ",
    "SeRgI1982": "Hi,\nWhen you plan to release this feature ?\nI have such type of scenario:\nMasterDetail/Navigation/ViewA/ViewB/ViewC \nand on ViewC when I hit special button, I would like to go back to \nMasterDetail/Navigation/ViewA\nI have achieved it by absoulte URI (/MasterDetail/Navigation/ViewB) but after this, my Login button in Hamburger Menu (modal => /MasterDetail/Navigation/Login) stopped working :(\nI hope that your feature solves my problem.. Thanks Brian. It works perfectly. New Navigation API is awsome \nOne small suggestion about bootstrap API which has changed (setup App class). \nIt would be good to document that we should call InitializeComponent() in overriden method OnInitialized(); \nWhen InitializeComponent() is called in constructor, any usage of converter, which is defined in App.xaml, cause an Exception: System.Reflection.TargetInvocationException: . Just open a HamburgerMenu Prism Sample and update to the latest version of Prism and Xamarin Forms. Override OnNavigatedFrom method in ViewAViewModel, ViewBViewModel and ViewCViewModel and put breakpoints. \nWhen you switch between pages (A, B, C):\n- OnNavigatedTo - called always, \n- OnNavigatedFrom - never called :(\nMy case:\n1. On ViewA I start counting,\n2. Go to ViewB,\n3. Go back to ViewA - counting should be continued.\nI wanted to use OnNavigatedFrom to save state of the working object on ViewA.\nI have similar cases related with going app to the background or re-launch app when you hit Android notification panel (Foreground service) and those cases works.\nInternal navigation doesn't worked as expected because of this bug.\nWorkaround is to use EventAggregator and publish an event when I hit another menu item but I don't want to complicate the app.  \nUpdated sample in the attachment\nHamburgerMenu.zip\n. Super. Big thanks for this fix.\nCan you tell me in which pre-release version it will be available ?. You surprised me with this MyGet. I used to not looking into this 'Packages source'. For most cases, nuget.org is enough. I would love to work with company where they have at least in 50% organized development process like you have for Prism. Congratulations.. ",
    "canicelebrate": "Thanks for providing us New Navigation API.\nWhereas it will fails for the following scenario,\nGiven: \"NavigationPage/ViewA/ViewB/ViewC/ViewD\"\nWant to return to:\"NavigationPage/ViewA/ViewB\"\nNavigate from ViewD with: NavigationService.NavigateAsync(\"../../\");\nResults: An Exception is raised on line 361 in PageNavigationService.cs\n`protected virtual async Task ProcessNavigationForRemovePageSegments(Page currentPage, string nextSegment, Queue segments, INavigationParameters parameters, bool? useModalNavigation, bool animated)\n{\n    if (!PageUtilities.HasDirectNavigationPageParent(currentPage))\n        throw new InvalidOperationException(\"Removing views using the relative '../' syntax while navigating is only supported within a NavigationPage\");\nList<Page> pagesToRemove = new List<Page>();\npagesToRemove.Add(currentPage);\n\nvar currentPageIndex = currentPage.Navigation.NavigationStack.Count;\nif (currentPage.Navigation.NavigationStack.Count > 0)\n    currentPageIndex = currentPage.Navigation.NavigationStack.Count - 1;\n\nwhile (segments.Peek() == RemovePageSegment)//Line 361\n{\n    currentPageIndex -= 1;\n    pagesToRemove.Add(currentPage.Navigation.NavigationStack[currentPageIndex]);\n    nextSegment = segments.Dequeue();\n}\n\nawait ProcessNavigation(currentPage, segments, parameters, useModalNavigation, animated);\n\nvar navigationPage = (NavigationPage)currentPage.Parent;\nforeach (var page in pagesToRemove)\n{\n    navigationPage.Navigation.RemovePage(page);\n    PageUtilities.DestroyPage(page);\n}\n\n}`\nHow about tweak the function as below to allow pop n depth without pushing operation?\n`protected virtual async Task ProcessNavigationForRemovePageSegments(Page currentPage, string nextSegment, Queue segments, INavigationParameters parameters, bool? useModalNavigation, bool animated)\n{\n    if (!PageUtilities.HasDirectNavigationPageParent(currentPage))\n        throw new InvalidOperationException(\"Removing views using the relative '../' syntax while navigating is only supported within a NavigationPage\");\nList<Page> pagesToRemove = new List<Page>();\npagesToRemove.Add(currentPage);\n\nvar currentPageIndex = currentPage.Navigation.NavigationStack.Count;\nif (currentPage.Navigation.NavigationStack.Count > 0)\n    currentPageIndex = currentPage.Navigation.NavigationStack.Count - 1;\n\n\nwhile (segments.Count > 0 && segments.Peek() == RemovePageSegment)\n{\n    currentPageIndex -= 1;\n    pagesToRemove.Add(currentPage.Navigation.NavigationStack[currentPageIndex]);\n    nextSegment = segments.Dequeue();\n}\n\nif(segments.Count > 0){\n    await ProcessNavigation(currentPage, segments, parameters, useModalNavigation, animated);\n}\nelse{\n    currentPageIndex -= 1;\n    if(currentPageIndex > 0){\n        Page toPage = currentPage.Navigation.NavigationStack[currentPageIndex];\n        OnNavigatedTo(toPage, parameters);\n    }\n    else{\n        throw new InvalidOperationException(\"Removed too many pages\");\n    }\n}\n\nvar navigationPage = (NavigationPage)currentPage.Parent;\nforeach (var page in pagesToRemove)\n{\n    navigationPage.Navigation.RemovePage(page);\n    PageUtilities.DestroyPage(page);\n}\n\n}`\n. ",
    "sky018": "@brianlagunas  Sorry about double posting. I have fixed the issue - if you may, you can close this, it seems like the code for a certain page still checks the value before destroying it.\nSo if I have page 1 and I have a behavior implemented on it (since I didn't have a null checking) implementing an absolute navigation before destroying the page, the method will still check the entry who implemented the behavior and gives a null ref value (which doesn't make sense) cause I didn't go back to page 1 who has it, but rather than page 4. Well, anyways, thanks!. ",
    "devdeer-alex": "I see. So how about implementing it completely inside of Prism. CSL is not very difficult to rebuild and I think it could be improved a bit also. . OK. Thanks.. ",
    "a-einstein": "This indeed seems a BREAKING change.\nWhen I try to run, I get an exception as Prism.Mef.Wpf 6.3 seems to be still referring Microsoft.Practices.ServiceLocation instead of CommonServiceLocator. Check the Fuslogvw below. Apparently this is a bug.\nIs there a way to get around this?\nOtherwise please fix this.\nThanks.\n\n` Assembly Binder Log Entry  (03/11/2017 @ 21:54:53) \nThe operation failed.\nBind result: hr = 0x80070002. The system cannot find the file specified.\nAssembly manager loaded from:  C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\clr.dll\nRunning under executable  P:\\projects\\RCS\\shopping\\clients\\WpfShop\\RCS.WpfShop\\bin\\Debug\\RCS.WpfShop.exe\n--- A detailed error log follows. \n Pre-bind state information \nLOG: DisplayName = Microsoft.Practices.ServiceLocation, Version=1.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\n (Fully-specified)\nLOG: Appbase = file:///P:/projects/RCS/shopping/clients/WpfShop/RCS.WpfShop/bin/Debug/\nLOG: Initial PrivatePath = NULL\nLOG: Dynamic Base = NULL\nLOG: Cache Base = NULL\nLOG: AppName = RCS.WpfShop.exe\nCalling assembly : Prism.Mef.Wpf, Version=6.3.0.0, Culture=neutral, PublicKeyToken=40ee6c3a2184dc59.\n__\nLOG: This bind starts in default load context.\nLOG: Using application configuration file: P:\\projects\\RCS\\shopping\\clients\\WpfShop\\RCS.WpfShop\\bin\\Debug\\RCS.WpfShop.exe.Config\nLOG: Using host configuration file: \nLOG: Using machine configuration file from C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\config\\machine.config.\nLOG: Post-policy reference: Microsoft.Practices.ServiceLocation, Version=1.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\nLOG: GAC Lookup was unsuccessful.\nLOG: Attempting download of new URL file:///P:/projects/RCS/shopping/clients/WpfShop/RCS.WpfShop/bin/Debug/Microsoft.Practices.ServiceLocation.DLL.\nLOG: Attempting download of new URL file:///P:/projects/RCS/shopping/clients/WpfShop/RCS.WpfShop/bin/Debug/Microsoft.Practices.ServiceLocation/Microsoft.Practices.ServiceLocation.DLL.\nLOG: Attempting download of new URL file:///P:/projects/RCS/shopping/clients/WpfShop/RCS.WpfShop/bin/Debug/Microsoft.Practices.ServiceLocation.EXE.\nLOG: Attempting download of new URL file:///P:/projects/RCS/shopping/clients/WpfShop/RCS.WpfShop/bin/Debug/Microsoft.Practices.ServiceLocation/Microsoft.Practices.ServiceLocation.EXE.\nLOG: All probing URLs attempted and failed.\n`. I think the same problem occurs when I tried using 1.4. So in the end I had to backtrack to 1.3.\nThanks for your clarification Brian. \nBut I wonder if there is a way of making this clear in advance. Now I was prompted by NuGet to update,  then ran into problems. It took me a lot of time to isolate that problem to CommonServiceLocator, checking everything, trying to work around the problem, get Fuslogvw working, and finally stumble upon this issue.\nSo I hope there is some other way.\n. Well, I meant if there is some way of expressing the restriction of Mef.Wpf 6.3 of CommonServiceLocator  <=1.3. That would have saved me a lot of trouble.\nI have been looking into the restrictions, but I do not think that was able to give me the needed information.. ",
    "joeizang": "Hi Brian,\nI dunno what to say but I still have this issue and I made sure I created a new project and tried this and nothing happens. I will give my code a look over again and see but I am still having this issue. I even tried to deploy to api 22 but still the same. Thank you for taking the time to help out. And God bless you for all your work on prism.. ok sir I will do that now. I will let you know what the repo is called.. ",
    "pnishimura": "Thanks for issuing this topic!\nPaul. ",
    "mamta345": "OK!\nI will continue the translation.. ",
    "fengbol": "\u52a0\u6cb9\uff0c\u6211\u6b63\u89c9\u5f97\u82f1\u6587\u7248\u770b\u7684\u96be\u53d7\u5462. ",
    "RikardoPons": "@brianlagunas  Ok Thanks!. ",
    "mrbiggred": "@brianlagunas thanks for explaining the reason you can't just add a property.  I'll post any solutions I come up with in the next couple of days.. @brianlagunas any reason we couldn't use inheritance?  For example, the long term solution might look like:\n```c#\nnamespace Prism.Core\n{\n  public class NavigationParametersBase : IEnumerable>\n  {\n    // Existing Prism.Forms.Navigation.NavigationParameters class\n  }\n}\nnamespace Prism.Forms\n{\n  public class NavigationParameters : NavigationParametersBase\n  {\n    NavigationMode PageNavigationMode { get; set; }\n  }\n}\n```\nNow each platform can extend the navigation parameters as needed.  Until the NavigationParameters is moved to Prism.Core we could leave everything in the Prism.Forms project and, hopefully, not break anything:\n```c#\nnamespace Prism.Forms\n{\n  internal class NavigationParametersBase : IEnumerable>\n  {\n    // Existing Prism.Forms.Navigation.NavigationParameters class.  Will eventually be moved\n    // to Prism.Core.\n  } \npublic class NavigationParameters : NavigationParametersBase\n  {\n    NavigationMode PageNavigationMode { get; set; }\n  }\n}\n```. Is the plan to move all or most of the navigation classes from Prism.Forms project to the Prism core?  If so is the goal to have a common navigation interfaces for each platform?  Would there be any platform specific navigation settings that need to be exposed just to that one platform?\nIs there a road map or design document for the future of Prism?\nThanks.. Thank you for the information and your patience with my questions.  I'll be on vacation for the next two weeks so feel free to assign this issue to someone else.  On the plus side I have a 10+ hour flight to think about this problem.. @brianlagunas I'm glad you found a solution to the issue.  I look forward to trying it out the fix later this week.  Sorry I couldn't be more help.. ",
    "cointoss1973": "I thought that I used xunit only in Prism.test project.\nI also understood that xunit is used in other projects.\nCreate a pull request again.. I updated this pull request. Please review it.. \n@brianlagunas I think there is a problem with the build configuration of solution file, can you tell me the policy?\nWe found that the build configuration of PrismLibrary_Wpf.sln is targeted for building all projects including test projects.\nHowever, the build configuration of Prism.sln, most test projects are out of build target.\nIs this due to shortening the build time?. @brianlagunas I understood the policy. Thank you very much.. ",
    "mrbelk": "it would appear the upgrading to Prism 7 pre-release might have solved this issue.. ",
    "leroygumede": "My point is It always throws a Foundation.MonoTouchException when there is a prism error. ",
    "malbaladejo": "When we pass null for message, FileNotFoundException adds the following message :\n\nI don't want to override the FileNotFoundException default message.. Thanks for this change.. ",
    "vladimir-shirmanov": "Thanks for quick reply. In the latest 7.0 preview version all works as expected.. ",
    "lubritto": "Sorry, i will put on the right place. ",
    "DP7891": "this is my fix\n\n. ",
    "dimonkomaron": "Ok, And how can I use INavigationAware interface if I will use on my Base Page, for example, code like Navigation.PopAsync()?. Please correct me if I wrong, Your answer means that I can't create custom navigation bar using Prism built-in navigation?\nSorry for double post. I will remove my question on stackoverflow!. Ok, thank you for your answer. Now I have created BasePage where I realize simple pop:\nif (Navigation != null)\n            {\n                await Navigation.PopAsync();\n            }\nAnd it works fine for me!\nMaybe it simple question. But if use Xamarin forms back button on navigation page - I can't set parameters for previous page. I mean NavigatedFrom is empty always when I click back button?. Great thanks for your help and feedback!!! . Sorry I forgot provide code:\npublic static async Task SafeNavigateAsync(this INavigationService navigationService, string name,NavigationParameters parameters = null, bool? useModalNavigation = null, bool animated = true)\n        {\n            var formsNav = ((Prism.Common.IPageAware)navigationService).Page.Navigation;\n            IReadOnlyCollection<Page> stack = formsNav.NavigationStack;\n            if (useModalNavigation != null && useModalNavigation.Value)\n            {\n                stack = formsNav.ModalStack;\n            }\n            var pageType = PageNavigationRegistry.GetPageType(name);\n            if (stack.LastOrDefault()?.GetType() != pageType)\n            {\n                await navigationService.NavigateAsync(name, parameters, useModalNavigation, animated);\n            }\n        }\n\n    public static void RemoveView(this INavigationService navigationService, string name)\n    {\n        var formsNav = ((Prism.Common.IPageAware)navigationService).Page.Navigation;\n        var pageType = PageNavigationRegistry.GetPageType(name);\n        var page = formsNav.NavigationStack.LastOrDefault(p => p.GetType() == pageType) ?? formsNav.ModalStack.LastOrDefault(p => p.GetType() == pageType);\n        formsNav.RemovePage(page);\n    }. Do we have a possibility to change modal page?.\n\n",
    "Allmight": "Yeah, sorry bout that. I was about to remove this issue when i realised my error.. ",
    "SirdarAPJ": "I couldnt explain my implementation right, probably 'cause of my poor English skills. I do exactly as you suggest, telling OnNavigatingTo that I need to call GoBackAsync () again. The \"sequentially\" was to try to explain that there is no user interaction or processing between one GoBack and another. This works fine on Android, but crashes on iOS.. I knew the event OnNavigatedTo but this code was already implemented before and working fine on Android. I did not even go into that detail. This will probably work without necessarily to use the new methods. But I will consider upgrading simply by considering the implementation without the multiple GoBacks more elegant. Thank you very much for your attention.. So good! This is the most elegant implementation. But is this feature (../../page) only available in the latest pre-release version? . Ok! I will do the upgrade. Thank you one more time.. ",
    "rizaanlakay": "Superstar!. ",
    "JoshuaNovak919": "Are the docs/samples not updated with this? Everywhere i've looked still seems to use the old way and i'm having trouble setting this up.. Are there any docs on setup for the iOS and Android versions? I'm getting issues with the iOSInitializer etc.. I'm on mac. I'll try that. It may help to update the docs or samples before nugets go live in the future when they have breaking changes though. Kind of sucks when I just update the nugets and the whole app breaks without anything to help me fix it.. Also, it seems the links for the Visual Studio for Mac Addin are broken so I can't get the Prism Template Pack.. Yeah I get you're busy and I really appreciate everything. Prism is amazing. I usually do check changes, but I didn't realize there were just hardly and docs and no samples on how to update. I guess i'll just try and find something in the links you sent or just roll it back until someone puts some docs or samples somewhere.. ",
    "haythamnikolaidis": "@brianlagunas Thank you for the help, I will keep my eye on the Xamarin bug report.. ",
    "apmorton": "Yep, this is definitely \"one of those things\" about WPF - investigating a memory leak in my own application is what lead me to this bug. Until a few days ago I was entirely unaware of this wonderful little \"gotcha\" about binding to objects that don't implement INotifyPropertyChanged.\nWhat follows is entirely unrelated to this issue, I just chose to shout into the wind about my current frustration :)\nUnfortunately my memory leak isn't so simple sigh. Turns out there are some internal classes in PresentationCore that keep references to controls to track mouse/keyboard input states. If your .net code is running as part of a native process through hosting and you close all your .net windows the last one to close (and all associated models/viewmodels) will remain in memory until another .net window in the process gets keyboard/mouse focus.  I guess it's not a true memory leak, since it is correctly reclaimed eventually, but it definitely looks like one.\n/rant. ",
    "vishalpachori25": "Yes On Tabbed Page it gets fired twice.. Ok Fair enough. So if we want that OnNavigatedTo will be called only One time then what approach we should follow? Should we take different ViewModel for each ContentPage and one for TabbedPage?\nSuggest . ",
    "alan-dev-olostech": "This is my basic linker config for Dryioc that I use, using all this gives to me 25mb size. But, obviously, you need to refine, add and remove things. Its a good start. ( It basic skip things ^_^' )\nThis is a NETStandard.Library, using Xamarin.forms 2.5.0.91635\n```\n\n\n\n<assembly fullname=\"SQLitePCLRaw.batteries_v2\">\n<type fullname=\"*\" />\n\n\n<assembly fullname=\"SQLitePCLRaw.core\">\n<type fullname=\"*\" />\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n  . ",
    "tiagodenoronha": "Hey, thanks for that!\nIt's working perfectly, thanks a lot! :). Yep, same issue here... :/. I checked the logs and found this line: \n\n. ",
    "19er": "I want to do this centrally, inside ShellViewModel. So I can use, this.regionManager.Regions[\"ContentRegion\"].NavigationService.Navigated\nevent to sense if any view is NavigatedTo.\nBut there is no; \nthis.regionManager.Regions[\"ContentRegion\"].NavigationService.NavigatedFrom event. So how can i sense if it is being Navigated From.. Could you please, point me some direction in single one of many ways to sense NavigatedFrom centrally.. ",
    "aelij": "Hey @brianlagunas, can you please explain the rationale behind this decision? These attributes have no runtime effect, and as I've said, they're internal so they do not affect the API.\nThey make working with INPC so much simpler.. ",
    "Bjselous": "I should have said before if I try to implement INavigationService on my own custom mock I get the following exception:\nSystem.InvalidCastException : Unable to cast object of type 'Minervex.Mocks.NewINavigationServiceMock' to type 'Prism.Navigation.INavigateInternal'.   . ",
    "MaikuB": "I'm running to the same issue where I'm using Moq and use the Verify method on the mocked INavigationService to confirm that the NavigateAsync method was called. This seems to fall over as the navigate method exists in INavigationServiceExtensions and casts the INavigationService object to an INavigateInternal object that is internal to PRISM. Do you have suggestions/solutions on this that would work with Moq?\nUpdate: think i figured out how to get around it as you suggested with deriving from the PageNavigationService that would work with Moq. I guess the question is then is if there'd be changes made to the navigation service as using a mocking framework with the INavigationService won't work due to the casting that happens.. I think my idea didn't end up working in the end (bear in mind this is a while and code belongs to client) so afraid I don't have anything to share. We also had the same problem where there was modal navigation in the app. ",
    "thomashoef": "@dansiegel yeah, your answer is exactly right . ",
    "VBPrakash": "\nI'm running to the same issue where I'm using Moq and use the Verify method on the mocked INavigationService to confirm that the NavigateAsync method was called. This seems to fall over as the navigate method exists in INavigationServiceExtensions and casts the INavigationService object to an INavigateInternal object that is internal to PRISM. Do you have suggestions/solutions on this that would work with Moq?\nUpdate: think i figured out how to get around it as you suggested with deriving from the PageNavigationService that would work with Moq. I guess the question is then is if there'd be changes made to the navigation service as using a mocking framework with the INavigationService won't work due to the casting that happens.\n\nHi MaikuB, Can you please post some sample code how you managed to mock INavigationService ?. ",
    "Corsin91": "Thanks for your quick response. \nYes i found that out too. I was just a bit confused why i need to update to Unity 5.2.1 manually when using the MyGet version.\nBut if this the intended behavior, than its ok. ",
    "alemputes": "Ok thank you for fast respond.. ",
    "spatialguy": "Great, thanks! Do you know when these fixes will be available in Nuget packages?. Just tested latest CI packages from MyGet and can confirm that both issues are resolved. Good job!!! Thank you!. ",
    "JimWuerch": "It would've saved me a lot of time if using a non-FrameworkElement never worked, instead of only working if the garbage collector hasn't run between creating the behavior and the WeakDelegateManager having Raise called.   \nFrameworkElement and FrameworkContentElement are generated from the same source, just FrameworkContentElement doesn't have layout.   It's certainly possible users are using FrameworkContentElement for regions, and they are just getting lucky.  We were fine until we added a splash screen that must have used to enough resources to trigger a GC call.  I'll ask on reddit to find out how to work around this.. Sorry, I deleted my previous comment.  I'm not sure what key I would use to register my behavior, because DelayedRegionCreationBehavior doesn't get registered there, nor does it have a BehaviorKey string member.  . At this point, I'd like to have just had it fail to create the DelayedRegionBehavior instance or thrown an exception when the WireUpTargetElement() fails to do anything.  Or heck, even log a message or something.  It'd have been obvious right away that something was up, instead of having it suddenly stop working later when we added something else (a splash screen) that caused the GC to run.\nLeaving in code in the library that has a silent failure caused us a lot of lost time.\nI worked around it by having my own copy of RegionManager and DelayedRegionCreationBehavior.  I'm unconvinced that FrameworkContentElement shouldn't be equally as valid as FrameworkElement, given they are generated from the same source.   I think if a GC.Collect() was stuck in right before the call to WeakDelegatesManager.Raise(), I'd bet a bunch of apps out there might stop working, because they are just getting lucky that the Initialize() call on their class gets called before the GC wipes out the behavior.\n. I tried to make the absolute minimum changes, but I'd be happier with a more general solution that works with DependencyObject.  I didn't feel confident enough about my knowledge of Prism to make more than the token changes I have.  \nOne of the hacks I tried when I was building a private copy of Prism to work around things was to just have the UpdatingRegions event hold a strong reference to the behavior instead of a weak one.  It solves the problem, but it's a lot messier than just having a static list of attached behaviors. \nI do really like having both approaches.  I'm new to submitting pull requests, so I'll make the changes suggested, and read up on how to update the pull request.. If I remove the exception, should there at least be some sort of debug message or something?   I wouldn't have had to spent much time debugging this if it threw an exception, because the errant behavior would've been immediately obvious.    I feel like the biggest bug here is things fail silently.. ",
    "spsrbud": "I had the exact same problem as the OP using a custom region adapter for Avalon Dock's LayoutDocumentPaneGroup. The real problem is that LayoutDocumentPaneGroup does not inherit from FrameworkElement, but it is a DependencyObject. The OP is correct about the WireUpTargetElement() method keeping the DelayedRegionCreationBehavior instance alive because the FrameworkElement's Loaded event now has a reference to the instance of DelayedRegionCreationBehavior. If the TargetElement is not a FrameworkElement then it runs the risk of the GC destroying it before WeakDelegatesManger can invoke the handler for updating the regions. This is due to the fact that an instance of DelayedRegionCreationBehavior is created locally in RegionManager's CreateRegion(DependencyObject element) method. After that method executes, the instance of DelayedRegionCreationBehavior has nothing holding onto it (except for the FrameworkElement's Loaded event) and it gets marked for deletion by the GC.\nA good fix would be to figure out a way to keep the instance of DelayedRegionCreationBehavior alive without having to use the FrameworkElement's Loaded event.\nI worked around the issue myself by creating a UserControl that wrapped Avalon Dock's LayoutDocumentPaneGroup. Then, I created a custom region adapter for my UserControl (since it's a FrameworkElement), and I haven't seen the problem since.. Adding an exception is definitely a breaking change because now you're forcing every object to be either a FrameworkElement or FrameworkContentElement. This goes against the original design which accepted any object that was a DependencyObject. A good example is Avalon Dock's LayoutDocumentPaneGroup which does not derive from FrameworkElement. This change would prevent that object from becoming a region.\nA better solution is to keep the instance of DelayedRegionCreationBehavior alive when it's attached. I made a change to DelayedRegionCreationBehavior.cs which I've attached. I added a static list to the class that will add the instance when it's attached and remove the instance when it's unattached. This static list keeps the object alive without having to depend on FrameworkElement's Loaded event. This change will work for all DependencyObject objects that host a region.\nDelayedRegionCreationBehavior.cs.zip\n. @dvorn You're right, it's probably not necessary. I just always try to lock access to a shared resource as a more defensive approach for future enhancements. If you want to take it out I don't mind, but, to play devil's advocate, does it hurt anything by leaving it in there?. @dvorn The examples you provided are instance members, so it's probably ok the way it is. I only added a lock to mine to follow best practices of locking a static variable.. Just because it might be safe today doesn't mean it will be safe tomorrow. I would use a lock to guard updatingRegionListeners. What happens if multiple threads call RegionManager.UpdateRegions()? I don't know the answer to that, but there's potential for bad things to happen. Always use a lock when accessing a shared resource. . @JimWuerch I opened another issue #1328 related to this one that will fix the issue completely. Hopefully they'll accept it and it will never fail silently again.. ",
    "UnreachableCode": "I'm getting this on Prism 6.3.0. How can I work out where the problem arises from? The error message is very vague.. ",
    "gtaylor1981": "Submitted PR https://github.com/PrismLibrary/Prism/pull/1334. Not sure why the tests didn't all pass. The error seems unrelated.. ",
    "bill2004158": "why those project using different DebugType? one is pdbonly, others are default?. when I try to debug my project, and and try to step into prism dll,\nprism.dll -> works fine.\nPrism.Forms.dll and Prism.Unity.Forms.dll  -> cannot.\nI download the source code, and added config <DebugType>pdbonly</DebugType> to file Prism.Forms.csproj, and Prism.Unity.Forms.csproj,\ncompile it, and replace the dll download from nuget.\nthen it works.\nso I guess the reason is missing those config in that two project.\nwhy used different config?. yes, exactly, if no problem, can you commit that changes to repository?. ",
    "Arbalets": "Sure, here you go: https://github.com/Arbalets/TabNavigation\nI've included 6.3 sample as well, just for comparison.. Thanks. Well in my case I have a central notification toast which calls MDP to navigate to expensive page. So if it is an expected behaviour then I just will think of something else. Thanks.. Option two works for me. Thanks again.. ",
    "foxrough": "Hi,\nThank you for your reactivity !\nYep, we also use LoadModuleCompleted event to catch exception on the module's Initializing step.\nBut, we had this need on a custom development of a IModuleTypeLoader to support packages hosted on a private nuget server.\nIn that case, we had the need to access the ModuleInfo's ref property before the LoadModuleCompleted event.\nBenjamin\n--\nBenjamin DE VUYST\nConsultant technologies Microsoft.net\nMCTS (Microsoft Certified Technology Specialist)\nMCP (Microsoft Certified Professional)\nMail : bdevuyst@outlook.com - bdv@bdevuyst.com\nhttp://www.bdevuyst.com\nMob: +33 (0)6 23 63 57 17\n\nDe : Brian Lagunas notifications@github.com\nEnvoy\u00e9 : vendredi 19 janvier 2018 21:50\n\u00c0 : PrismLibrary/Prism\nCc : foxrough; Author\nObjet : Re: [PrismLibrary/Prism] ModuleInitializeException with moduleInfo (#1337)\nAlso, have you tried handling the IModuleManager LoadModuleCompleted event and checking the error? It provides the actual ModuleInfo object you are requesting.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://nam04.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FPrismLibrary%2FPrism%2Fissues%2F1337%23issuecomment-359099012&data=02%7C01%7C%7Cc3020ebb824d4f2cfcbb08d55f86ae0f%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636519954409599990&sdata=6tvFLJLG70coJcqRf7dUjuTWwcy8MflPNdpLwi0Z7qk%3D&reserved=0, or mute the threadhttps://nam04.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAZKEfoxyxHizxfn-Yf7jprHN6cqs9RHmks5tMQ4ugaJpZM4RkQze&data=02%7C01%7C%7Cc3020ebb824d4f2cfcbb08d55f86ae0f%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636519954409599990&sdata=4TTVSD0H6rw%2FqhF33bnueD%2F9bZM3G4u1kx6ahw6gb3s%3D&reserved=0.\n. ",
    "AlonikiX": "Oh...you are right, what a stupid mistake I made. Thanks. ",
    "simon25608": "Sorry, the corrector changed the word arrow by date.\nBy creating the example project I have realized that it works as expected, I have to debug what happens in my app because I use several plugins that can alter behavior.. ",
    "saifxx": "How can I do this in Prism.WPF?. Ok Sir Brian, I will try it :)\nCurrently i'm doing it like this:\npublic ImageNameToPathConverter()\n{\n      var container = (Application.Current as PrismApplication).Container;\n      imageService = (IImageService)container.Resolve(typeof(IImageService));\n}. ",
    "WPFDev1": "Thanks for your reply Brian.  Does support for Unity with Prismv6.0 is there & is it advisable to upgrade it?. Thanks. ",
    "IngweLand": "Still does not work. Checked with 7.1.0.123-pre (it supposed to be fixed according to it's release notes). Checked on Android only. Here is the sample project.\nhttps://github.com/IngweLand/App1. Why should I set useModalNavigation parameter to true - I am not creating a modal page.\nHowever, I think my mistake was different. I was changing pages with \"absolute\" style, like this:\ninitial set:\nNavigationService.NavigateAsync($\"{nameof(PrismMasterDetailPage1)}/{nameof(NavigationPage)}/{nameof(ViewA)}\");\nand to change a page i did:\nNavigationService.NavigateAsync($\"{nameof(PrismMasterDetailPage1)}/{nameof(NavigationPage)}/{nameof(ViewB)}\");\nHowever, when I changed second line to following, OnNavigationFrom started to be called:\nNavigationService.NavigateAsync($\"{nameof(NavigationPage)}/{nameof(ViewB)}\");. ",
    "aneti9862": "I have similar problem with my app. When I'm on BasePage and I want to navigate from MasterDetailPage to some page (ViewA or ViewB), the OnNavigatedFrom method  from BasePage not called. I tried to set useModalNavigation to true, but still doesn't work.\nPrism: 7.0.0.396\nXamarin.Forms:  3.0.0.446417\nSo, I created test app. @brianlagunas , I will be grateful for your help.\nhttps://github.com/aneti9862/XamarinForms. I can't use absolute path because in this case OnNavigatedFom method from BasePage not called when click Logout from MasteDetail, so I have to use \"NavigationPage/LoginPage\". Maybe, it's a bug. Have you another idea?. Ok, I reproduced this issue for Android: https://github.com/aneti9862/XamarinForms\nNow, OnNavigatedFrom method is called properly from BasePage (I'm going to unpin event in this method, so it's necessary), but on LoginPage is shown MasterDetailPage. When I use absolute path, the navigation stack will be reset, but in this case the method OnNavigatedFrom won't be callled.\nExpected Behavior\nOnNavigatedFrom method is called from BasePage and MasterDetailPage isn't shown on LoginPage . @brianlagunas  Thanks for your fast action. How can I test it? Should I remove this package: 7.1.0.431 and add again (it still isn't working)?  There isn't any new pre-release package. . @brianlagunas  I've tested your latest build and now, navigation is working OK, thanks for your fast fix.. ",
    "bwenninger": "@SeRgI1982 I pulled down your HamburgerMenu.zip file and updated the Prism libraries to version 7.1.0.431 and tried it out on iOS.  If I switch from ViewA to ViewB the OnNavigatedFrom method is called on the MainPage but not on ViewA.  Is this how it should behave or should OnNavigatedFrom be called on ViewA?\n@brianlagunas Could you confirm what Prism should be doing?  When I navigate from ViewA to ViewB using an menu item on the MainPage, should the OnNavigatedFrom method be called on ViewA?  Or on MainPage?  Or both? Thanks!. ",
    "fms10": "I'm expecting these methods to fire on the child page at least when navigating to a CarouselPage with an Uri like, e.g. \"/LoginContainer?selectedTab=Login\" where \"LoginContainer\" is a CarouselPage and \"Login\" is a ContentPage within the CarouselPage. With version 7, the methods are called on the LoginContainer but not on the Login page.\nThere is a lot of code in Prism.Forms' navigation service to handle CarouselPages. I therefore got the impression, that CarouselPages are explicitly supported, even if they might be obsoleted eventually.\n . ",
    "vamsi27": "The consuming application is already replacing PRISM's ServiceLocator.Current with its own container, that's the reason we are missing RegionAdapterMappings and see all kinds of errors once we try to navigate to any view in the embedded component.. Unfortunately, it's not the same. The consuming app's container doesn't even implement IUnityContainer. They have their own implementation. We just wanted to know if there are any chances of PRISM moving away from using ServiceLocator in the future. . Which release would this be in?. ",
    "giorgiozoppi": "Ok Brian. I will switch all to objects and meanwhile i will use the trick of  _container.Resolve(); if i call before this in the constructor all the request navigates work smoothly.. ",
    "Andrew-Neale": "OK, Brilliant, cheers.. ",
    "JMcLauchlanSQ": "Will dig into that, then try SO, thanks Brian.. I am trying to unsub from a MessagingCenter subscribe, so I assume this does not use weak references?. Perfect, that makes a lot of sense, thanks for the help Brian.. ",
    "chrswgnr": "Same issue here. I can only agree @DavidStrickland0 this smells.  In my tests I would like to verifiy that in certain situations GoBackAsync / NavigateAsync is called on that interface, and in other situation it isn't. \nThis currently works only if the system under tests uses methods without signatures from the extension.\nUsing a concrete implementation that inherits from Prisms base class is no option, then the it would run that code as well and that \"mock\" would be a part of the system under test. And as for david, this is a no go for me.\nThe problem is that INavigationServiceExtensions make assumptions about the implementation. So it is expected that classes that implement INavigationService also implement INavigateInternal. Which is true for the prism code but not for mocks.\nIf INavigationService would extend INavigateInternal the assumption that every INavigationService also implements INavigateInternal would be correct. But that would lead to a interface change and that was probably the reason why the extension was added. \nMocks could also implement both interfaces, but due to being internal this is not possible. Still this would still be a code smell, but it would already make it testable.\nWould definitive suggest to change the INavigationService and their implementations here and the removal of the INavigationServiceExtensions. With that clean mocks of INavigationService could be created.\n. Thanks for the quick response. I checked the code again, realized your point here.\nAs mention, renaming an public access modifier would already help here.\nBut noticed another possible solution: INavigationService is used in Windows10 and Xamarin, and both have custom INavigationServiceExtensions. For Windows10 there is an specific IPlatformNavigationService that inherits from INavigationService, this one is missing on Xamarin. Having a Xamarin interface version for this as well could also help. Missed that because I'm only on Xamarin.\nEdit: anyway this would need another Viewmodel setup that only uses the IPlatformNavigstionService, so I would suggest both changes. Great, will check it again when there is a preview nuget version of those changes. For now I changed the calls in my viewmodels to only use the signature provided by INavigationService, since those are testable.. ",
    "Erave": "Thanks brian for your reply.\nOk for singleton. I understand.\nBy the way, about my INavService, I tried to create a Page/ViewModel into main App, then it works and after moved this Page/ViewModel into a module and there it fails. In both case my ViewModel is associated to a View (ContentPage). Ok I just start a new project from scratch with default view into module and add INvaigationService into constructor. No problem with that, it should be a problem with my project. I don't see anything wrong at the moment but I will find ;-)\nThank you for your help\nEric. ",
    "m5112638": "Thanks Brian. It is the official release Prism.Core.7.0.0.362&396 that is causing the issue. When I switch to use Prism.Core.7.0.0.336-pre, it compiles and works.. As I said, when I use Prism.Unity.7.0.0.336-pre, Prism.Wpf.7.0.0.336-pre with Prism.Core.7.0.0.336-pre, everything compiles and works (yes I upgraded Unity). However when I saw the prod release of Prism.Core NuGet package, I did an update, and broke the build. I believe it is something in prod release version Prism.Core.7.0.0.362&396 that is interfering with the compilation.\nAre you recommending that we wait until Prism.Unity and Prism.Wpf's \"pre\" label is gone before using Prism 7? Thanks.. Thank you.. ",
    "TBertuzzi": "sorry. in both methods the same problem occurs.\nThe problem occurs in my app. I have seen an old issue in which you replied \n\"This is not a bug.\" This is expected. a BindingContext for the ContentPage you are defining.This forces the ContentPage to inherit the BindingContext of the TabbedPage instead. That is why it is being called twice in your sample. The ContentPage is using the same ViewModel instance that the TabbedPage is using as it's BindingContext . \" ,\nso I wanted to know if I'm doing something wrong. Does forwarding the views or viewmodels help you to verify the problem?. The only place I referenced the viewmodel of my view was in the app.cs: containerRegistry.RegisterForNavigation  ();\n            containerRegistry.RegisterForNavigation  ();\nI created an example project to send but could not reproduce the error. Is it possible to send my project with error privately?\nonly in it is happening ... \nThere is also a particularity, I upgraded from prism 6 pro 7 and I'm using PCL\n. I got it right. There was a viewmodel being used twice for the same view. Thanks for the help and sorry for the time wasted :). ",
    "oliverluethi": "@brianlagunas As far as i know, the lifetime manager should handle how long instances are held in memory before they're released to garbage collector. Some lifetime managers are holding a strong reference to them ContainerControlledLifetimeManager and some lifetime managers are holding a weak reference to the classes they create ExternallyControlledLifetimeManager. Probably its more an Unity rather than a Prism topic I guess.\nBut I understand your point and for that reason I've created a behavior class for handling loaded / unloaded events from the page / usercontrol who checks for an interface. On the loaded / unloaded event this behavior calls functions form that interface. The unloaded function will unregister global events or eventhandlers from the view and / or viewmodel.\nThanks for your explanation\n. ",
    "dannypease": "I have also tried using Xamarin.Forms.Command<int> which is working fine.. ",
    "Jesse3647": "Sorry everyone.... I discovered that this is a duplicate to Issue 1353. . ",
    "CrestApps": "@brianlagunas Thank you for your help here. Next time I'll use SO for such a question. By \"Manage State\" do you mean save a copy of the IRegionCollection for each session? Then when the user logs back in add each existing view to the RegionManager?. I am going to give that approach a shot later on today. Thanks again for your help. I appreciate your time and you attention to this matter.. This is a WPF app. I am not sure how to create a reproduction link to demonstrate the issue. What is INPC and how can I verify it?. @brianlagunas I created the requested reproduction link https://github.com/CrestApps/InteractionRequestTrigger\nIn that project I did not use Fody.PropertyChanged. Instead, I manually called the RaisePropertyChanged method.\nWhen the application run, click the button on the MainWindow.\nWhen the dialog comeup, please select a any available date, I am expecting the \"Qualified\" button to become enabled but for some reason it isn't.\nI hope this makes it easy for you to troubleshoot the problem.. I tried to trace the code to see if I can help in the debug.\nThe issue seems to be in the DelegateCommandBase class specifically in the void HookInpc(MemberExpression expression) method\n    protected void HookInpc(MemberExpression expression)\n    {\n        if (expression == null)\n            return;\n\n        if (_inpc == null)\n        {\n            var constantExpression = expression.Expression as ConstantExpression;\n            if (constantExpression != null)\n            {\n                _inpc = constantExpression.Value as INotifyPropertyChanged;\n                if (_inpc != null)\n                    _inpc.PropertyChanged += Inpc_PropertyChanged;\n            }\n        }\n    }\n\nThe expression.Expression as ConstantExpression line returns null which is why the _inpc.PropertyChanged isn't called on the property.. Updated the code but still same issue. https://github.com/CrestApps/InteractionRequestTrigger/blob/master/InteractionRequestTrigger/ConfirmCustomerAge.cs \nPlease have a look at my above note regarding HookInpc(MemberExpression expression)\nWhen I am observing the following ObservesProperty(() => CapturedAge.BirthDate) the expression.Expression will not get casted to ConstantExpression\n. I see. I actually upgraded to the latest stable (i.e. 7.0.0.396) and it seems to be working fine. I also tried it on 7.1.0.123-pre and it works too.\nThank you. The class UnityBootstrapper is decorated with [Obsolete(\"It is recommended to use the new PrismApplication as the app's base class. This will require updating the App.xaml and App.xaml.cs files.\", false)]  but I can't seems to find the PrismApplication is there a document somewhere I can read on how to implement the change in my code? Where is the PrismApplication class and how should I implement it?. ",
    "JunkyXL86": "@brianlagunas What about computed properties, that need to be recomputed due to a property change?\nSomething like this:\n```\npublic int AllItemsCount\n{\n   return AcceptedItems.Count + DeclinedItems.Count;\n}\nvoid AcceptItem(Item item)\n{\n    ...\n    AcceptedItems.Add(item);\n    OnPropertyChanged(nameof(AllItemsCount));\n}\n```. Sorry, Brian. I started creating an issue. But then I thought, it would be better to show the desired changes in commits, so that it can be directly tested. It was not meant to be merged into the main branch.\nI will create an issue for that.. ",
    "Coder-Nut": "If you are sure currentView still holds the removed view then, if I am not mistaken, you still need a RequestNavigate in the content region or you could use RegionManager.Regions[KnownRegionNames.ContentRegion].Add(currentView) which will add and display the view if it is the only or first one added to the region.. ",
    "danielkaczmarek": "Thank you for your replies, the problem is that if I add the view to the region and even activate it. Then the first time I try to navigate I get an exception from RegionManager, telling me tha the region name already exists. So I don't know if I'm doing something wrong, or is it a bug? . ",
    "vknht": "Hello,\nthanks for your response.\nWhen I search for Prism.Mef or Prism.Wpf in the NuGet Package Manager, the CommonServiceLocator v1.3 ist listed as a dependency, when I download the package and Update to CommonServiceLocator v2.0.x I am getting the error, that Prism.Mef.Wpf could not find CommonServiceLocator v1.3.0.\nI wanted to check the references within the source code, but i cannot build the project. That is why i created this issue.\nThat is also, why i asked if the Prism-Nuget-Packages are outdated.\nBut if you do not support Mef anymore, can I fork this repository and Update the dependencies myself?\nSample Project here:\nClassLibrary3.zip\nsome images:\n\n\n\n. ",
    "XibrenX": "An other possible solution:\n4. Add a direct reference to the page BindingContext:\n<ContentPage\n  ...\n  x:Name=\"page\">\n  ...\n  <ContentPage.ToolbarItems>\n    <ToolbarItem ... Command=\"{Binding BindingContext.YourCommand, Source={x:Reference page}}\" />\n  </ContentPage.ToolbarItems>\n  ...\n</ContentPage>. ",
    "ali-h2010": "@dansiegel That looks like what i need exactly. \nThanks but is there any documentation on  how to use it?. Sorry to bother you but the page you shared with my is empty.\nI will try to do what you said though or find an example online \nMany thanks.. @dansiegel\ni found the Github page.\nhttps://github.com/dansiegel/Prism.Plugin.Popups\nMany Thanks again. I am facing similar interaction. I assumed it's natural behavior of iOS where the page that you will navigate to must be loaded before closing the drawer. \nThat is why i added a small loading popup since if the page is heavy, it will be very slow to navigate to. \nthe back button that appears is also typical behavior as i assumed that i am calling the 'NavigateAsync' which navigate to the page but it knows that it was called from a MD page, so it will convert the back button to the menu button. @rotsen24154 try the app with an iPad simulator. \nIt uses different interaction.\nIf it's too slow even in iPad, you will need to use async and optimize your output to appear in a better way.. Hi @brianlagunas , \nI didn't know that I needed to make reproduction link for a simple behavior issue.\n```\nAsync Father()\n{\n    Son()\n    //Flow should move to the new page and not continue from here\n}\nAsync Son()\n{\n    _naviageionService.NaviageAsync();\n}\n```\nI just need to know if Prism support non Async Navigation. Otherwise, I will need to return a task every time and check if I need to continue execution or return;\nCould you please help me with this concern?. ",
    "rotsen24154": "Thanks, you can close it \ud83d\udc4d . ",
    "shahbaaz90": "there's another trick that can be used; disable the animation for the master-detail navigation. This would remove the delay in the navigation.\ne.g:\nNavigationService.NavigateAsync($\"NavigationPage/{menuPage}\", animated: false);. ",
    "karelkral": "I agree with BadMavDev - this is unfortunate change. You can return null from CreateShell and initialize your own Shell in OnInitialized, but you must duplicate some code from PrismApplicationBase.\n```cs\nprotected override Window CreateShell()\n{\n    // because RadWindow is not Window, cannot create here.\n    // https://github.com/PrismLibrary/Prism/issues/1413\n    return null;\n}\nprotected override void OnInitialized()\n{\n    ShellWindow shellWindow = Container.Resolve();\n    shellWindow.Show();\n    MainWindow = shellWindow.ParentOfType();\n// there lines was not executed because of null Shell - so must duplicate here. Originally called from PrismApplicationBase.Initialize\nRegionManager.SetRegionManager(MainWindow, Container.Resolve<IRegionManager>());\nRegionManager.UpdateRegions();\nInitializeModules();\n\nbase.OnInitialized();\n\n}\n```. ",
    "njsent": "We have a legacy winforms app with hundreds of forms that we are attempting to slowly convert to wpf by newing up instances of wpf windows (I know, it's awful).  The app does not have a wpf 'shell' per se so we return null in the CreateShell method.  However, this bombs with a null reference exception which occurs when MainWindow.Show() is invoked (since MainWindow is null) from PrismApplicationBase.OnInitialized().  \nDo we have any recourse other than implementing Bootstrapper, or do we need to roll back to 6.3?  . I appreciate the response Brian but that won't work unfortunately.  We don't have a specific wpf window that is launched at startup since it's a winforms app.  The user may not even open a wpf window during their session since there are hundreds of winform 'forms' and only a few wpf windows.  We are in the process of replacing winforms forms with wpf windows so this is not a traditional wpf application.. It is a WinForms app that contains WPF views.  There are about 100 Windows Forms to every 1 WPF view so  it's likely a user may not even open a WPF view during their session.   We we are attempting to do is add all new content to this app as WPF views to lessen the burden of converting down the road.. Thanks Brian - great work on Prism and I appreciate your passion for it.. ",
    "supershowwei": "Isn't it just here?\n. Thanks. I'll try it.. ",
    "ahmad-crossplatform": "OK I need to test that and hopefully this works  :) \nWell I am working with a project that has many pages which do similar stuff (things like a survey ) , so I am trying to implement a mechanism that instead of having to create views and viewmodels , I create the viewmodel and let the pagefactory produce the a page based on that viewmodel , so with this as a developer I only focus on business and forget about making 10 pages doing similar things but for different parts of the survey. then i have to take care of each of thier view stuff like grid rows and columns, make sure of the bindings, styles, vertical and horizontal , etc...  with the page factory I would not have to think about that . All i need is to focus on the view-models and from the view models i can decide what to show and what not to show based on the attributes . It is pretty cool i promise and I will publish about it when it is ready and tested and proved to be good enough idea. \nAnyways, since we work with prism like many people and since prism has cool services that you can use in the view model (e.g. PageDialogService) Then I needed away to integrate the pagefactory with the prism framework . So the user can chose between predefined pages and factory produced pages. \nAfter all the navigation happens in the viewmodel . \nThe problem that I got is how would I use the navigateAsync without registering the page in the first place (i.e. RegisterForNavigation)? If i tried to register the produced page type, then It will always be ContentPage and  it will always create a contentPage for me. \n I tried to override the navigation service and when i navigate to or from a produced page , then Prism would not keep track of page stacks (Which i believe it is saved as segments) . Instead of that it destroyed all the stack and kept only the new page on top it   so I cannot go back with the back button .\nI will try to override the create page as you suggested , but my question here how do i add that segment to the segments? is it RegisterForNavigation ? . How about sending an event (e.g. NatvigateEvent) when such command is called ? and the navigation service is basically subscribes to this event and navigate according to its parameters ?  . @ChaseFlorell  I was more commenting on Brian's points regarding having new instances of NavigationService for each command. \nU suggested to have it like this \nxml\n<!-- Xaml defined parameters -->\n<Button Text=\"Go To About\" Command=\"{prism:NavigateTo 'About'}\" >\n    <Button.CommandParameter>\n        <prism:XamlNavigationParameters Parent=\"{x:Reference this}\">\n            <prism:XamlNavigationParameter Key=\"MainPageViewModel\" Value=\"{Binding .}\" />\n        </prism:XamlNavigationParameters>\n    </Button.CommandParameter>\n</Button>\nSo my suggestion of prism:NavigateTo is instead of creating a new prism service, instead the actual NavigateTo that is used by Xaml sends an event to the NavigationService that is already registered.\nMaybe NavigationService should be registered as a singleton?\nI do not know how easy or realistic implementing this. It is just an idea. \nAnother suggestion is to have NavigationService as globally accessible, static class,   or a singleton , as It does not really save any state. This way we do not have to think of memory leak or something . . Hello , I have updated my question , I did not know how to post an image with markdown . . ",
    "yarmenteros": "I have a Xamarin project with iOS and in my ViewModel I have the following code using DelegateCommand. In Android works fine but in iOS I'm getting an TargetInvocationException. I took a look into the DelegateCommand's code and I saw that uses Reflection.\nprivate DelegateCommand<string> _SideMenuTappedCommand;\n        public DelegateCommand<string> SideMenuTappedCommand\n            => _SideMenuTappedCommand ?? (_SideMenuTappedCommand = new DelegateCommand<string>(ExecuteSideMenuTappedCommand, CanExecuteSideMenuTappedCommand)\n            .ObservesProperty(() => IsBusy));\nI'm only using the commands implementation from prism.\nThanks. ",
    "DanielCauser": "Love it! Having the navigation on the xaml would make our VMs so much cleaner!. ",
    "jassmith": "Yup that is the original spike we used to test the idea. Its not getting a fuller implementation to go into Forms. We will want to get feedback from the Prism developers to make sure that it is useful to Prism as well so that Prism can hopefully take advantage of Segues.\nSegues will eventually offer more than just A to B functionality, but transition capabilities as well.. Pull out an android phone, scroll to the end of the spec where it talks about recreating the google play store and follow along with the Google Play Store on your phone :)\nSorry that really is the best I can offer at the moment. You could also build the shell branch if you want but that only supports iOS currently.. ",
    "n00bje": "I get this error in my WPF application when trying to migrate from UnityBootstrapper to PrismApplication.\nA global namespace alias or regular alias in App.cs doesn't fix this.\nAre there any other workarounds I can try?. ",
    "lewcianci": "@totht91 @dansiegel  What articles would you say are in the most dire need of updating, or adding? I'm making an app with Prism but I'm largely feeling my way through it so my information might not be best practice, but it would contribute to getting an app built.\nI might write an article about dependency injection within the context of Prism to see if my writing style is well understood etc and submit a PR.. @dansiegel @brianlagunas Is the template studio for mac open source?  If so, where is it stored? I'd like to build a web app that generates the templates that a user can download and use on their visual studio, mac or windows.\nThe VS4MAC template studio is absolutely incredible but maintaining two seperate platform wizards (mac and windows) with two seperate codebases, as well as maintaining the prism codebase, plus doing your day jobs, must be a crippling amount of work for you to do :(.\nFWIW your framework makes Xamarin programming possible, and even enjoyable. . Another issue is that hovering over variables in VS for Windows in a created project doesn't display that variables properties which makes debugging very difficult.  Trying to fix that now.\nEDIT: This was an issue with Visual Studio itself, which MS kindly patched out.. Another issue is that hovering over variables in VS for Windows in a created project doesn't display that variables properties which makes debugging very difficult.  Trying to fix that now.\nEDIT: This was an issue with Visual Studio itself, which MS kindly patched out.. @dansiegel Sorry, what I meant was, the variable hovering issue was a MS issue which was patched.  I still had the original issue of projects on VS4MAC not working on Windows visual studio.. Okay, but the prism developer toolkit generated the project - is that really unrelated?\nIf so I'll take note for next time\nGet Outlook for Androidhttps://aka.ms/ghei36\n\nFrom: Dan Siegel notifications@github.com\nSent: Saturday, October 13, 2018 8:59:21 AM\nTo: PrismLibrary/Prism\nCc: lewcianci; Mention\nSubject: Re: [PrismLibrary/Prism] Projects generated with Prism Developer Pack for macOS VS don't work on Windows VS (#1525)\n@lewciancihttps://github.com/lewcianci your issue is dependency/tooling related not Prism\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/PrismLibrary/Prism/issues/1525#issuecomment-429484567, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AIpTDaklF0-lqYPtY-z9tegTjEJPeopJks5ukR7JgaJpZM4V47Y1.\n. Using MFractor to produce a view model command yields other code, but it is still non-functional\n```\npublic DelegateCommand TestCommand { get; }\n        private void OnTestCommandExecuted()\n        {\n    }\n\n```\nEDIT: The above is in the Prism QuickStart project, which has MFractor support. @dansiegel Thanks for that. Just so I can keep coding, is there any way to get it to work?  I noticed that the Prism QuickStart has the MFractor configuration - is there anything I can do to get the MFractor command creation working to generate working ICommands? Thank you so much.. @dansiegel It's still not working correctly and I've updated the toolkit for visual studio... Any other tips?\nAlso congrats on the amazing 7.1.0 release! @brianlagunas @dansiegel You guys are the best.. ",
    "WilliamWatterson86": "Thanks @brianlagunas - so just check for the param on \"OnNavigatingTo\" and then load the child page?. ",
    "johnfurog": "It seems that this is not a Prism Issue , Tried it using the Navigation from the Code behind and still getting the same behavior.\nCreated new issue on Xamarin.Form Github : \nhttps://github.com/xamarin/Xamarin.Forms/issues/2710. Hi @brianlagunas could we re open this issue ? since replicating this scenario without using prism template pack resolves it. . ",
    "akhileshzimozi": "Output-Debug.txt\nThis is the output window and when I click a button for navigation then It is not working.Please help me.\nThanks . ",
    "mtumashenko": "@brianlagunas \nHi, Brian.\nI had an issue, related to this behavior, because I used non-generic registration method RegisterForNavigation(this IContainerRegistry containerRegistry, Type type, string name) in my abstract ModuleBase class registration method, where I can't use generic version . So I had to always specify name explicitly. \nAnd the question - if it's by design to use View name as default in generic method (..., string name = null) and then in implementation if (string.IsNullOrWhiteSpace(name)) name = viewType.Name, why non-generic signature is different and client has to write something like RegisterForNavigation(ViewTypeToDisplay, ViewTypeToDisplay.Name), or even pass null RegisterForNavigation(ViewTypeToDisplay, null) because somehow client knows implementation details?. ",
    "AmrAlSayed0": "Is this going to require updating the templates after it is fixed?. Absolute Navigation is done by navigation to \"app://www.putwhateveryouwanthere.com/NavigationPage/LoginPage\" which is effectively like Application.Current.MainPage = new NavigationPage ( new LoginPage() );You can completely ignore the domain part and do app:///NavigationPage/LoginPageBut I don't think the slash before the navigation URL is a recognized syntax by PRISM. Would it be useful to have a(n) Unprepare/Destroy/Cancel/Release method to complement the functionality of the Prepare method?\nThe scenario I have in mind is this. Say there is a page called MainPage that will either go to one of 2 pages ViewA or ViewB. When you land on MainPage, you will prepare both ViewA and ViewB and save them as fields. When the user interaction is decided you would release/destroy the page that will not be used and navigate to the other one. Another case is if the user just goes back on the current page and you will need to destroy/release the prepared pages.\n\nI have a feeling I am wrong about something here. Like is there even a need for this method? Would just dereferencing the NavigationItem be enough for it to be garbage collected?\n. I am confused about this, Prism doesn't use any platform specific code (I think) so any platform that has an implementation of Xamarin.Forms should run fine with Prism. Though after saying this I feel that the devil is in the details. \ud83d\ude05. ",
    "xalikoutis": "Fixed my issue also but i get the following from FFImageLoading\nDryIoc.ContainerException: Unable to find constructor with all resolvable parameters when resolving SerializationInfo {ReturnDefault} as parameter \"info\"\n  in IntPtr {ReturnDefault} as parameter \"javaReference\"\n  in FFImageLoading.Forms.Platform.CachedImageRenderer {ReturnDefault}.. I get the error/crash when i load a page that contains ffimages, not at the startime.\nYes i am using\npublic class AndroidInitializer : IPlatformInitializer\n     { \n         public void RegisterTypes(IContainerRegistry containerRegistry)\n         {\n             containerRegistry.RegisterInstance(Xamarin.Forms.Forms.Context);\n        }\n    }\nShould I raise an issue on FFImageLoading repo?\nStack trace\nhttps://www.dropbox.com/s/wvy3pd2ieb6qkq9/stack.txt?dl=0. Guys should i report it to FFImageLoading repo? Is it something they can do?  It is very urgent for me.. I saw that #1463 is already merged in the master branch, cloned it build it packed on my own nuget server to test, same errors both for FFImageLoading and initializing app  using Dryioc. Added a reproduction link. I am little bit confused, whats the solution? If it is a XF problem should i update in a pre-release. ",
    "scxp": "I'd like to see an updated template pack as well. Also, comparing Mobile App template to Prism Blank App template, I see some differences that can be removed. \nFor example, the prism template is adding iTunesArtwork files while I don't see them in XF template.\niTunesArtwork@1x.png\niTunesArtwork@2x.png\niTunesArtwork@3x.png\nPrism has the following in Info.plist whereas XF template does not.\n<key>CFBundleIconFiles</key>\n    <array>\n      <string>Icon-60@2x</string>\n      <string>Icon-60@3x</string>\n      <string>Icon-76</string>\n      <string>Icon-76@2x</string>\n      <string>Default</string>\n      <string>Default@2x</string>\n      <string>Default-568h@2x</string>\n      <string>Default-Portrait</string>\n      <string>Default-Portrait@2x</string>\n      <string>Icon-Small-40</string>\n      <string>Icon-Small-40@2x</string>\n      <string>Icon-Small-40@3x</string>\n      <string>Icon-Small</string>\n      <string>Icon-Small@2x</string>\n      <string>Icon-Small@3x</string>\n    </array>\nXF Info.plist has the following whereas Prism does not:\n<key>CFBundleName</key>\n    <string>App1</string>\n    <key>XSAppIconAssets</key>\n    <string>Assets.xcassets/AppIcon.appiconset</string>\nIn MainActivity.cs, RegisterTypes has the following comment, but this comment is missing in AppDelegate.cs (maybe remove it everywhere or add it to the second file for consistency?):\n// Register any platform specific implementations\nIn both files, RegisterTypes is expecting a parameter named container even though IPlatformInitializer is expecting containerRegistry. (Observe that App.xaml.cs is also using containerRegistry)\niOS Resources folder has several Default pngs but XF template has only the LaunchScreen storyboard.\nIn MainActivity.cs, Prism is setting Android icon to @mipmap/ic_launcher, but XF sets it to @mipmap/icon\nPrism is missing mipmap-anydpi-v26 folder with the two xml files.\nPrism is missing drawable folders. Not an expert on this, but I think mipmap folders are used only for icons whereas all other images still go to drawable folders.\nPrism is missing colors.xml.\nPrism is using ic_launcher images as opposed to Icon and is missing launcher_foreground.png in all mipmap folders.\nPrism has Assets.xcassets folder, but XF no longer has it for iOS.. @dansiegel Also, I have a question regarding the preferred choice of container. I see that when a new project is created, Dryloc is selected by default. Does that mean you encourage people to use it for XF instead of the other ones?. Thanks for the response! I agree about containerRegistry being a convention, and I listed it hoping that platform-specific declarations would follow the rest of the convention. :) I did not know all that about icons and Assets. Thanks for the clarification. I was simply comparing Xamarin to Prism. Also thanks for the benchmarks. Seems like Dryloc is indeed quite fast. :)\n. ",
    "TedMobile": "Hi any update on when the latest prism template pack will be released.thanks\n. @dansiegel \nHi there I am going to push the company I work for to become a Prism patron.Manager is on hols at the moment. \nSide note\nPrism made building an app easier ,however you guys might be victim of your own success with prism for xamarin as so many people use it now.\nIs there a chance of slightly more frequent update? \nAny ideas at this stage when then Windows template will be released?\nI know and I understand it's free and its own time but some sort of update will be nice.\nMany thanks for your effort. \nFirst thanks for your time and reply!\n@brianlagunas \nyou are right I could use the myget feed and I do ,but my manager is against things that are not \"proper\" releases and therefore wont let me use it for production when they are in preview.\n@dansiegel \nyes I am referring to the quick start templates and tooling you have for mac to be available for windows as well.\nI would like to say that I am an happy prism user and again I will try to make may company to be a patron.\nDo you guys have some sort of roadmap for Prism apart from bugfixes ?\nAre there any plans for new functionalities ,automation-video-samples. etc..?\nWill it be something like \"Weekly xamarin\" or may be even a monthly newsletter or something\nIs this all part of the patron concept? \nthanks again for your fantastic work\n. ",
    "chrisgate": "I am feeling jealous bcoz every-time Windows User will always wait...........especially since @dansiegel and  Visual Studio Mac are same.\nCan we always delay one for others so that we access to all inrespecitive of platform.Thanks\ncopy @brianlagunas @bartlannoeye \n. @dansiegel  \" I used to ship the Quick Start Templates via NuGet and could start doing that again if I see some interest in people who want to use the CLI to generate projects.\"\nYou know people will be so please to have the CLI.............my testimony: that CLI made me to know prism use case fast and that quickly jumpstart my career in Mobile world............i am Prism patron by the way.\nCheers. ",
    "nqbjnh": "I have the same problem. \nReason: file obj/project.assets.json target \"MonoAndroid,Version=v7.1\" when my project target android version 8.1\nI resolved it by:\n\nRight click Android project => Properties => Application => Compile\n    using Android version => Android 7.1 \nClean and Build project => build success, and restart IDE.\nRight click Android project => Properties => Application => Compile\n    using Android version => Android 8.1 \nClean and Build project => build success\n\nFile obj/project.assets.json updated to \"MonoAndroid,Version=v8.1\"\n. > @nqbjnh Could you explain me how to fix in Visual Studio for Mac?\nI don't use VS for Mac. I am not sure the same VS for Windows. You can check MonoAndroid version in project.assets.json file and project\n. ",
    "mopreni": "@nqbjnh Thank you!!!. ",
    "phamthanhtong": "@nqbjnh Could you explain me how to fix in Visual Studio for Mac?. ",
    "pprometey": "yes, WFP this is a dead-end branch of development. ",
    "kcabral817": "Hi Mapsouza,\nQuestions like these should be asked in StackOverflow as this area is for bugs dealing specifically with PRISM.  In the future, if you feel the problem is with the PRISM code base, you will be asked to provide a sample of the code so the developers can replicate the problem.. ",
    "mapsouza": "I thought the command without the parameter \"useModalNavigation\" shoulded have opened as non-modal page.. ",
    "RahulPureSoftware": "Thanks Brianlagunas. With latest prism binaries (version [7.1.0-pre1]), Popup can be centered on screen. . ",
    "Dudulle": "@dansiegel do you mean this file? (WPF did not have those parameters, which is why I mentioned the behavior was currently inconsistent)\nOr did I miss something else?. ",
    "CorsairRO": "Hello,\nJust as a question there: \nIs there any EventToCommandBehavior for PRISM.WPF?\nI saw how it works in Prism.Forms and it will be exactly what I need there, but I don't find this nice behavior in WPF version.\nI wouldn't add Prism.Forms in my app ( WPF app ) just to get this behavior...\n\nMy usage purpose is for Drag and Drop functionality in a WPF MVVM PRISM app.\nUser Drags from a View Control ( The Control sets Data to DragDrop object from System.Windows )\nIt works ok.\nBut in my VM ( agnostic of WPF ) I hook up to the Drop event of a control and call a command from VM.\nI use Blend Interactivity and Prism InvokeCommandAction\nNow, the received object using prism:InvokeCommandAction is of type DragEventArgs ( which belongs to WPF ) \nBehavior that I saw in Xamarin it works exactly as I wish, to convert data out of the DragEvetnArgs in a format that my VM understands.\nThank you very much for your answer...\n. Hello again,\nthank you for your answers if they will be ....\nI moved away from the issue by adding a Service to my VM project as an interface, where I pass an OBJECT ( my DelegateCommand )\nThe prism:InvokeCOmmandAction for evetn Drop passes a DragEventArgs to the command as an object.\nIn implementation of the service which is in WPF project, I cast the object to DragEventArgs and pull out the data that I need and return to my VM.\nThank you again for the wonderful framework that you have put into PRISM ( that I use it around 20-30% of its potential  and it is already wonderful ... ). ",
    "MaximBalaganskiy": "According to several posts by Brian it is. And \"app:///\" does not work\neither. Prefixing with slash works in a command, just not in OnNavigatedTo\nOn Thu, 14 Jun 2018 at 19:00, Amr notifications@github.com wrote:\n\nAbsolute Navigation is done by navigation to \"app://\nwww.putwhateveryouwanthere.com/NavigationPage/LoginPage\" which is\neffectively like Application.Current.MainPage = new NavigationPage ( new\nLoginPage() );\nYou can completely ignore the domain part and do\napp:///NavigationPage/LoginPage\nBut I don't think the slash before the navigation URL is a recognized\nsyntax by PRISM\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/PrismLibrary/Prism/issues/1473#issuecomment-397223865,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADimvAUKeFj4jT6MRU5Pw44UEBzgcRV5ks5t8iYwgaJpZM4UnJP_\n.\n. await Task.Yield(); before navigation solves the issue. Just await does not work in the repo above.. \n",
    "dgxhubbard": "I did a clean build by deleting everything then building. Sorry you closed the issue. Our apps are to big to put into a sample. We reverted to previous version to get around issue.. ",
    "okadabasso": "It seems to be back at 55b64c0d7f37d6361be1b2a1fefb397fcd04ccff on Sep 24, 2018. thanks @brianlagunas . ",
    "stuwelsh": "@brianlagunas So if Autofac support is being dropped for Prism, I'm thinking of using the Unity container. I'm looking for the easiest container to wire up and the one with the best performance/speed?. ",
    "clawrenceks": "@dansiegel Thanks for the very detailed reply, the nature of the edge case here is clear now. \nOne of the reasons for me raising the issue was not just because I thought it could be improved (and documentation seems the right way to do so in this case), by raising the issue I also wanted to make sure I hadn't missed some other obvious way of testing the behaviour I was interested in, and that the way I had identified is currently the appropriate way. Your response seems to confirm this is the case, along with explaining why, so thanks again for that.\nI do have another navigation related use case that I want to unit test - that a modal navigation was performed. I haven't found a way to achieve this yet and will be doing some more digging. If I do not find a way to achieve this, what is the best way to raise a query of this nature? Again as an issue on GitHub? or do you have an alternative location for handling queries? This won't just be a general question, it will be the result of perhaps having exhausted all avenues that I can think of to resolve a problem.. @mackayn I think perhaps you are referring to a different issue to the one discussed on this thread. The particular scenario that I was referring to in this thread was about the ability to successfully unit test the navigation mode, so that in the event that I wish to use the NavigationMode to drive navigation logic I can successfully unit test this logic - something that in my opinion should definitely be done.\nLooking to override the Navigation Mode that Prism sets when it performs navigation however definitely sounds like something that shouldn't be done.. Just following up on one of my previous comments regarding to the ability to test Modal Navigations. I was able to do this just fine. \nThe approach I ended up taking was to create a Navigation Service Fake that is derived from the Prism PageNavigationService. Within This Fake I add public properties that are of interest to my unit test scenarios and I override NavigateInternal - it is within here that I set the properties I have created, based on the information that is passed to the Fake when navigating. For example, within here I can easily see if the useModalNavigation bool property was passed in as true.. ",
    "cbartonnh": "I am seeing the same issue. Once you try Quickstart, you cannot select any until exiting out of VS. ",
    "pablogupi": "Thank a lot! I modify in ElementStyling.xaml like this: \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ResourceDictionary xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class=\"ProjectName.Theming.ElementStyling\" xmlns:theming=\"using:ProjectName.Theming\">\n    <Style TargetType=\"NavigationPage\" ApplyToDerivedTypes=\"true\">\n        <Setter Property=\"BarTextColor\" Value=\"{StaticResource NavigationText}\" />\n        <Setter Property=\"BarBackgroundColor\" Value=\"{StaticResource PrimaryDark}\" />\n    </Style>\n    <Style TargetType=\"TabbedPage\" ApplyToDerivedTypes=\"true\">\n        <Setter Property=\"BarTextColor\" Value=\"{StaticResource NavigationText}\" />\n        <Setter Property=\"BarBackgroundColor\" Value=\"{StaticResource PrimaryDark}\" />\n    </Style>\n    <ResourceDictionary.MergedDictionaries>\n  <theming:ColorPalette />\n</ResourceDictionary.MergedDictionaries>\n</ResourceDictionary>\nand work fine on iOS. On android still does not work. Return this error: \n/Users/user/.nuget/packages/mobile.buildtools/1.3.0.599/build/Mobile.BuildTools.targets(5,5): Error MSB4095: The item metadata %(Filename) is being referenced without an item name.  Specify the item name by using %(itemname.Filename). (MSB4095) (ProjectName.Droid)\nWhat is the problem? Thanks \n. Perfect!Change code to: \nCopy SourceFiles=\"$(__Generated_APK)\"\nDestinationFiles=\"$(BuildToolsArtifactOutputPath)%(itemname.Filename)%(Extension)\" /\nworks correctly. Thanks a lot and great job!. ",
    "sturlath": "Ok found the reason \n\nThird party MVVM frameworks are not supported (ie. Prism, Mvvm Cross, Mvvm Light, etc.).\n\nThat makes the LivePlayer useless. Is there something that can be done to make it work? Is there a dialog between you and the LivePlayer team?\n. ",
    "lihaoef": "Any answer will be appreciated.Thanks.. ",
    "torturegenitale": "Same error here. I have managed to have more details:\n\nSeverity    Code    Description Project File    Line    Suppression State\nError       The \"LinkAssemblies\" task failed unexpectedly.\nMono.Linker.MarkException: Error processing method: 'System.Void Prism.DryIoc.PrismApplication::RegisterRequiredTypes(Prism.Ioc.IContainerRegistry)' in assembly: 'Prism.DryIoc.Forms.dll' ---> Mono.Cecil.ResolutionException: Failed to resolve System.Void DryIoc.Registrator::Register(DryIoc.IRegistrator,DryIoc.IReuse,DryIoc.Made,DryIoc.Setup,DryIoc.IfAlreadyRegistered,System.Object)\n   at Mono.Linker.Steps.MarkStep.HandleUnresolvedMethod(MethodReference reference)\n   at Mono.Linker.Steps.MarkStep.MarkMethod(MethodReference reference)\n   at Mono.Linker.Steps.MarkStep.MarkInstruction(Instruction instruction)\n   at Mono.Linker.Steps.MarkStep.MarkMethodBody(MethodBody body)\n   at Mono.Linker.Steps.MarkStep.ProcessMethod(MethodDefinition method)\n   at Mono.Linker.Steps.MarkStep.ProcessQueue()\n   --- End of inner exception stack trace ---\n   at Mono.Linker.Steps.MarkStep.ProcessQueue()\n   at Mono.Linker.Steps.MarkStep.ProcessPrimaryQueue()\n   at Mono.Linker.Steps.MarkStep.Process()\n   at Mono.Linker.Steps.MarkStep.Process(LinkContext context)\n   at Mono.Linker.Pipeline.Process(LinkContext context)\n   at MonoDroid.Tuner.Linker.Process(LinkerOptions options, ILogger logger, LinkContext& context)\n   at Xamarin.Android.Tasks.LinkAssemblies.Execute(DirectoryAssemblyResolver res)\n   at Xamarin.Android.Tasks.LinkAssemblies.Execute()\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\n   at Microsoft.Build.BackEnd.TaskBuilder.d__26.MoveNext() AllyNations.Android C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets    1812    . \n",
    "kevinvella": "Cheers. From VS mac i wasn't able to view the stack trace as it's empty. Only seeing the exception\n\n. ",
    "Im-PJ": "I guess Prism supports DryIoc 3 now but I'm suddenly having this issue on shared project using Prism 7.1.0.172-pre, DryIoc 3.0.2 and XF 3.2.0.729530-pre2. Any help anyone? @dansiegel @dadhi . ",
    "taxinvoice": "ok thanks, though it would also be an issue for listview as well..but thanks anyway. ",
    "chrisagzh": "It doesn't need to be IView if there is another approach to mock Views for navigation without having to use a Dispatcher and FrameworkElements.. This is not always the case, actually almost never in my experience. I've developing WPF application for 10+ years and the usual practice is to do automated testing based on ViewModels only plus do manual testing for the Views (because you can't reach 100% View testing coverage anyway and those would be expensive to maintain plus UI tests are generally slow).\nAs a side note: Prism has always supported the View-first approach much better than the ViewModel-first approach. That's why people moved away from it, which is unfortunate because it is a good Framework. \n. I am well aware of what the difference is between a unit test and an integration test. I used the term \"automated testing\". Integration tests can cover whole applications but they don't have to. Martin fowler explains it well here: https://martinfowler.com/bliki/IntegrationTest.html\nHow you deal with your test pyramid is up to you. On the other hand I know how I deal with mine and that involves writing some integration tests against my viewmodels.\nA good framework doesn't impose a specific way how to write tests for code that uses the framework.\nMicrosoft knew that: In the old P&P Prism 5 implementatiin there was even a sample that showed this very scenario: PrismLibrary/Prism.Mvvm.Tests/Mocks/Mock.cs has an IView that is not a FrameworkElement. \nYou could have just made IView optional instead of removing it and then pattern match it in MvvmHelpers. All relevant usages of the View DataContext use MvvmHelpers already.. Great, now we're getting to the core of this!\nIn the Prism 5 sourcecode, there was a single relevant place in the code where the IView was actually used (see code below). Back then you could have used FrameworkElement instead of IView there, just like you do today. \nThat would break your own code samples though! The only implementor of the IView in Prism 5 was a automated test that had a Mock View which did implement the IView interface but at the same time didn't derive from FrameworkElement.\nThis is exactly the sort of test I would like to write too. Your own code does the very thing you've just told me in length I shouldn't do. \nThat said, I do not ask you to bring back IView the way it was. Bring it back, but make it optional. This does not break the designer but at the same time allows the type of automated tests again that you had in your sample code back in Prism 5. \nYou don't need to call it IView, call it IDataContextResolvable or introduce an overridable service in the DI container. There are many approaches to solve this.\nOriginal purpose of IView.\n```cs\npublic static void AutoWireViewModelChanged(IView view)\n        {\n            // Try mappings first\n            object viewModel = GetViewModelForView(view);\n            // Fallback to convention based\n            if (viewModel == null)\n            {\n                var viewModelType = defaultViewTypeToViewModelTypeResolver(view.GetType());\n                if (viewModelType == null) return;\n            // Really need Container or Factories here to deal with injecting dependencies on construction\n            viewModel = defaultViewModelFactory(viewModelType);\n        }\n\n        **view.DataContext = viewModel;**\n    }\n\n```. ",
    "softwaretirol": "Thanks for your answer, but i do not have any additional code as I have shown above.\nThe instances are removed from memory correctly, what remains in memory is the management object within the PubSubEvent itself.\nTo prove it is a bug, just execute the following sample code:\nhttps://gist.github.com/softwaretirol/65dd594ecd0d8e845ca33839a7aecfdc\nThe given output is constantly:\nInstances: 1\nSubscriptionlist: 420000\nInstances: 1\nSubscriptionlist: 430000\nInstances: 1\nSubscriptionlist: 440000\nInstances: 1\nSubscriptionlist: 450000\nSubscriptionList is the amount of entries within the EventBase:\nprotected ICollection<IEventSubscription> Subscriptions\n{\n  get\n  {\n    return (ICollection<IEventSubscription>) this._subscriptions;\n  }\n}\n\nSo the created instances are all deleted, but the internal subscriptionlist, is growing.. Adapted the sample code: https://gist.github.com/softwaretirol/9ba839671a4ceeb1c81fe0e7b1907dc8\nCompletly same behavior, but i was expecting that it wont change, because internally a Dictionary is hold, and it is no difference in my view of using a derived type here.. Hey folks,\nthat sounds very bad, just see https://github.com/PrismLibrary/Prism/pull/1646 for a fix.\n@brianlagunas what is your opinion to this solution? \nI really do not like any time based solution, but in this case it might be an easy solution to catch both situations? The internal behavior changed a little, it will be checked at which time the last prune was run, and if it is 1 minute ago, it will do the prune.. > I really don't like the timed approach.\n#MeToo \nPushed a better solution, for performance reasons I replaced the internal List to a LinkedList. At every publish/subscribe it will getting cleaned up if necessary (which is simply an unlink). For not creating a delegate every time the \"GetExecutionStrategy\" the IsAlive Property of the WeakReference is passed through.\nWeird the publish itself is getting faster as before because the prune is faster with that solution.. For publishing the iteration is needed at all, so it effects only the subscribing performance.\nI have just coded a rough, small test against it.\n csharp\nvar eventAggregator = new EventAggregator();\nvar watch = Stopwatch.StartNew();\nfor (int i = 0; i < 100000; i++)\n{\n    eventAggregator.GetEvent<PubSubEvent>().Subscribe(DoSomething);\n}\nfor (int i = 0; i < 100000; i++)\n{\n    eventAggregator.GetEvent<PubSubEvent>().Publish();\n}\nConsole.WriteLine(watch.Elapsed);\nConsole.ReadLine();\nNeeds 00:00:00.3489100 on my machine. Looks quite fine if you ask me.. > Correct me if I'm wrong, but #1646 is only faster because it's using WeakReference.IsAlive rather than building up execution strategies during each loop.\nYes that is crucial! In my opinion i would stick to PR #1646 , it is fast and is covering both situations very well now. But the decision is not mine \ud83d\ude04 .\n@adamhewitt627 What i would improve with your PR #1647 :\n\nThe IsAlive thing should be done also in your case because it boosts everything\nI really do not like the async void thing - fire&forget seems not legit for me at this point\n. \n",
    "TimBo93": "The EventBase class, which is inherited by PubSubEvent has a \nprivate readonly List<IEventSubscription> _subscriptions = new List<IEventSubscription>();\nThis list contains EventSubscription instances, when using the PubSubEvent implementation of EventBase.\nInstances of EventSubscription do not hold references to the subscriber.\nThat is enforced by the WeakReferencein DelegateReference.\nBut the list that is containing the EventSubscription gets only pruned when calling\nPruneAndReturnStrategies() which is called only when InternalPublishof EventBase gets invoked.\nSo @brianlagunas you are right, that the subscribers are not hold, but the EventSubscription do like @softwaretirol said. Maybe that can help you.. The reason for the tremendous loss of performance lies in the complexity of O(n\u00b2) instead of O(n) by subscribing to an event in a loop. This is because each time adding a subscriber, the whole list will be inspected for dead subscribers. \nMaybe a GC-like generation approach can help us, so that not all the entries are inspected each time and more likely alive subscribers are passed. \nI also like @softwaretirol approach but that might not be stable in some situations where many items are inserted in short time (less 1 Minute). \n. ",
    "FamularoA": "Hello @brianlagunas, \nI have create a sample WPF app which demonstrate the unexpected behaviour. \nSteps: \n\u2022   Click Start, Weak Classes with subscription will be created\n\u2022   Click Publish, you will see that the amount of subscription will be change (PruneAndReturnStrategies is called)\nWithout publishing the memory increase, you need only your Task Manager to verify my observation.\nRegard,\nAlexander\nPrismMemoryLeak\n. ",
    "adamhewitt627": "While I agree with something like this needing to happen, I just updated from 7.0 and see a significant performance degradation in subscribing. I have:\n\nA lot of objects registering for the same message in a tight loop\nPrune is now called for each registration\nProfiling suggests the primary slowdown is the GC, which makes some sense looking at this code.. Sure thing. I can work on a better benchmark test (i.e. BenchmarkDotNet) but since that runs a long time, here is a quick summary: \n```cs\nvar ea = new EventAggregator();\nvar @event = ea.GetEvent();\nvar watch = Stopwatch.StartNew();\nfor (int i = 0; i < 10000; i++)\n    @event.Subscribe(OnMessage);\n\nvar elapsed = watch.Elapsed;\n```\nCount | 7.0.0.396 | 7.1.0.431\n-------|-----------|-------\n1,000 | 00:00:00.0102406 | 00:00:01.5510316\n10,000 | 00:00:00.1025806 | 00:02:20.7220970\nEDIT: I discovered this issue in a UWP app, but those numbers are a .NETCore 2.1 Console App. Runtime on the long one also doesn't show a lot of GC activity, the GC was showing up in the UWP profiler.. That looks like an improvement to the performance, but still loops through a (potentially) large array on inserts. What about something like:\n```cs\nabstract class EventBase\n{\n    //Subscribe checks this and calls Prune()\n    protected virtual AutoPrune { get; } = false;\n}\n//User's event class that they know doesn't have many Publishes\nclass Rare : PubSubEvent\n{\n    protected override AutoPrune => true;\n}\n```. It could probably use a better name, since it would still prune automatically on Publish. I also got to wondering if the new runtime events API could be of value here. (given multi-targeting, that is)\nCorrect me if I'm wrong, but #1646 is only faster because it's using WeakReference.IsAlive rather than building up execution strategies during each loop.\nI'm picturing 3 eventual changes:\n1. A bool as described to return to 7.0 behavior, while allowing for prune-on-subscribe.\n2. Some form of a Flush API that a consumer can call on demand. (such as in response to low memory events, app lifecycle, etc)\n3. Use runtime events API to largely obsolete number 2, but would only benefit .NETCore2.2+. \n. I'm not sure how long they run, but I actually expect the new tests from #1507 to fail. I was having trouble running the tests locally, and wanted to get this opened sooner rather than later.. ",
    "rafsanulhasan": "Hi guys, as @softwaretirol explained about the fire & forget issue, you can take a look at https://github.com/brminnick/AsyncAwaitBestPractices. It might solve the issue.. Is it possible to support registering instances as singletons or regular instances? \nCurrent I'm using this\ncontainerRegistry.RegisterInstance(CrossConnectivity.Current);\ncontainerRegistry.RegisterInstance(CrossSecureStorage.Current);\ncontainerRegistry.RegisterInstance(CrossSettings.Current);\ncontainerRegistry.RegisterInstance<IRunInvoker>(new UIThreadRunInvoker());\nMy Proposal is\ncontainerRegistry.RegisterSingletonInstance(CrossConnectivity.Current);\ncontainerRegistry.RegisterSingletonInstance(CrossSecureStorage.Current);\ncontainerRegistry.RegisterSingletonInstance(CrossSettings.Current);\ncontainerRegistry.RegisterSingletonInstance<IRunInvoker>(new UIThreadRunInvoker());\nOR,\ncontainerRegistry.RegisterScopedInstance(CrossConnectivity.Current);\ncontainerRegistry.RegisterScopedInstance(CrossSecureStorage.Current);\ncontainerRegistry.RegisterScopedInstance(CrossSettings.Current);\ncontainerRegistry.RegisterScopedInstance<IRunInvoker>(new UIThreadRunInvoker());\n. What about \ncontainerRegistry.RegisterInstance<WebAuthenticator, OAuth2Authenticator>(\n     new OAuth2Authenticator(\n          _Configuration.GitHub.AppId, \n          _Configuration.GitHub.AppSecret, \n          \"user,repo\", \n          authorizeUri, \n          redirectUri, \n          accessTokenUrl, \n          null, \n          false)\n     {\n    IsLoadableRedirectUri = true,\n    ShowErrors = true,\n    //AccessTokenName = \"access_token\",\n    ShouldEncounterOnPageLoaded = false,\n    Title = \"Login to GitHub\"\n     }, \n    \"GitHubAuth\"\n);\nIs it possible?\nI'm asking this because abstract WebAuthenticator class in Xamarin.Auth has multiple implementations like OAuth2Authenticator, OAuth1Authenticator and so on.... What if I want to register my own service abstractions as singleton lifetime like the following:\ncontainerRegistry.RegisterSingletonInstance<IAuthService, AuthServcie>(new AuthService());\n@dansiegel, will they get same instances?. ",
    "GreenKn1ght": "@ENikS Do you propose to make one more breaking change? This will be painful for all Prism users who have already migrated their apps to latest version.\nIMHO with this number of modules you need to expose your own abstraction. You can implement abstract class that will inherit IModule, implement its members and provide your own abstract API. Or I believe you can override ModuleCatalog and ModuleInitializer to load and instatiate your own IModule. Both option allow you to use Find and Replace feature of any text editor to change legacy code instead of manual rewriting.. This is a duplicate for https://github.com/PrismLibrary/Prism/issues/1517?. Check this issue. Im not sure if it related to Reference or not, but I believe you can find workaround there.\nOr I propose to add PackageReference to one of NuGet packages that contains this dll (for example this one).. ",
    "istvanfarmosi": "Actually, the complexity of the upgrade isn't in the code changes required - as Brian said that's pretty much a string replace job. However, enterprise users of Prism tend to write applications using multiple teams, each releasing their own part in some form, independent of the others. This works as long as shared components do not really change, allowing you to use assembly bindings. Having such a basic interface change breaks this, forcing all of these teams to update their code and release it all at the same time - the coordination involved could be quite the challenge. I can see this pushing companies towards either delaying the upgrade indefinitely (read: never) or removing Prism from their code, neither of which is optimal.\nEven though Prism is an open source project and it doesn't have financial motivation to get people to keep using it, it needs to have a reason to exist - that is, it needs people to use it. I'm not sure if losing (some) enterprise users has a bigger impact than the gains from the standardization, but the whole issue could be avoided by offering some form of backwards compatibility (even if only maintained for a short timeframe).  I'm thinking something along the lines of keeping the old IModule as-is, marking it obsolete and adding the new interface under a new name, then in version 8 or so moving completely to the new one. Letting them coexist for a while would allow large users of the library to update their stuff piece-by-piece, which I think would be a huge benefit. Would you consider this option if someone put in the effort to write it?. ",
    "psmulovics": "It even can be the same name, just under a different namespace.. ",
    "giopellizzoni": "I've got the same behaviour here. ",
    "jgrossrieder": "@brianlagunas Yeah, I read that in the meantime. But what is then the correct way of executing long tasks that should update the GUI at the end?. But it means that you have to Wait on the Task, right?\nLike\nprivate async void DoSomeWorkAsync()\n        {\n            Task.Run(()=> DoSomeLongRunningJob()).Wait();\n            UpdateTheGui();\n        }\nI was thinking this could \"stuck\" the GUI, and that was not using the nice await-async  of .Net. What do you mean? Because you will returns directly from Task.Run, so the Update would be too soon.. @brianlagunas I would really appreciate one very small example, that would unlock me and the team. I can't really find any example on what is the best practice on this. \nAnyway, that would be nice that DelegateCommand and composite command provide expose something for our UnitTests to be informed that the tests have been executed. (or in our real code to know when we can stop the BusyIndicator. @dvorn I see, but that doesn't seems possible when I use CompositeCommand then? \nI'm not sure how I can UnitTests my code without having any callback(and worse that the CompositeCommand will not wait on their children for the execution.. @dvorn Ok, so you end up by waiting for a given amount of time on some event? Just to be sure.\n@noufionline I will check it out, but I tends to stay independant from UI library code.. ",
    "YZahringer": "Can be released with 7.1 or next preview?. The Regions would be really useful but in the meantime, this solution allows to split views. Very useful while waiting for the Regions maybe in a future version.. Reproduction link: https://github.com/MADSENSE/Madsense.XamarinForms.Sample/tree/Prism-PartialView-NavigateTo. ",
    "baywolf-studios": "Any other information needed to determine if this is a Prism issue or a deeper issue with Xamarin.Forms?. No problem, thanks! I\u2019ve gone ahead and opened an issue on Xamarin.Forms repo.. ",
    "cfneese": "Thanks for the quick response Brian.\nPrism would not need to maintain a collection of module instances beyond the time it takes to initialize the modules so there should not be an additional chance of memory leaks.  Second, I understand that modules can be discovered and loaded at different times.  This additional behavior would only apply to modules that are loaded at the same phase of the application.  So if I have an application that is dynamically discovering modules from a folder, then the proposed behavior would simply not apply, because the modules would be discovered one at a time, and would load one at a time if they have InitializationMode.WhenAvailable.\nAligning the interface across platforms is obviously great, but I'm not suggesting changing the interface.  The behavior I am describing is actually only possible because of the new interface and the fact that the new interface encourages correct use of IContainerProvider and IContainerRegistry.  \nSo here's the catch: A module that ignores the separation of concerns imposed by IContainerProvider and IContainerRegistry and resolves objects from the RegisterTypes method or registers types from the OnInitialized method might lead to different program behavior.  For WPF there shouldn't yet be many of these critters in the wild.  The fact that Xamarin has had this interface for a while may be a significant concern.  These are probably poorly written modules but it is perfectly reasonable to be averse to breaking poorly written code.  (That said, there is already a breaking change in 7)\nI'm perfectly fine with the current load module process.  If I wasn't, I would provide a pull request or a standalone module manager.  But I think it is important to point out that if I have module B that is going to resolve types registered by module A and registering and resolving are clearly separated by the IModule interface then the load sequence register A, register B, resolve A, resolve B or register B, register A, resolve B, resolve A can eliminate the explicit B -> A dependency. . ",
    "Joebu": "@brianlagunas I've updated the issue with a link . Got Thanks.. ",
    "paulovila": "Thanks @dansiegel , is there an equivalent of IRegionMemberLifetime, I'd like to mark some view models  (defined in netstandard2) to be reusable  and some others don't.. Thanks  @brianlagunas ,in my case, the view models are defined in a netstandard2 project and it is referenced from a WPF app. So I'm evaluating if there's a stable migration path over UWP and then UnoPlatform. Hi @bartlannoeye , Thanks for the reply.\n There is no commit in #1513 since July, which looks like abandoned. Even if it is in beta, I would appreciate that minimum functionality like Commands, and Event  Aggregator to be aligned with the latest version. . Then why you published Prism.Autofac for WPF?, Probably Prism Modularity shouldn't be part of Core, There are too many responsibilities grouped in the same library. Would you consider in your making Prism.Core compatible with platform Uno? It would be grate to use Prism in WASM.. ",
    "veljko-msft": "Duplicate indeed. Searched for it, but didn't find it. Sorry for spam. Thanks for a quick reply!. ",
    "AlexanderVolkovDA": "I haven't checked properly, but from the first look the root of the problem is in Prism.Navigation.PageNavigationService.ProcessNavigationForMasterDetailPage()\nIt doesn't check CanChangeIsPresented property before seting currentPage.IsPresented. Suppose adding this check could help.. ",
    "rredoh": "Well, the problem started when I'm using prism.. You can clearly see the difference on the project I shared here. Have u check it?. Adding this code after InitializeComponent() solve the problem. But there's a problem, navigateasync isn't working. Everything else is working as expected\nBindingContext = App.Current.Container.Resolve<PageViewModel>();\n. Can you suggest how to force the page in nested tabs to wire to correct viewmodel? It seems that the only thing working is the binding.. Event like OnNavigated to, OnAppearing, etc aren't working. May I ask then when to use ObserveCanExecute ?. Ok. Thanks for the explanation :). Ok @brianlagunas \nThanks for the insight :). @angelru Check your code regarding with MapRegion. In my experience, it's because an error happen but there's no error thrown. ",
    "auxua": "\nPlease include a sample app that demonstrates the issue.\n\nI'm sorry - it will take till the weekend to provide a sample.. You can find the Sample App attached.\nI commented, where I added code to the App created from template.\nTestApp1.zip\n. ",
    "jbuckmccready": "Sorry I did not clarify that I am using .NET framework 4.5 and the package is linking and working fine. \nJust by running the simple paket add command (as given as example on the nuget website itself) \n\npaket add Prism.Unity --version 7.1.0.172-pre\n\npaket displays the warning message about the 'uap10.0.15063' directory under the Prism.Core package.\nAnybody using paket will run into this - nothing breaks but you may want to fix whatever is causing it.. ",
    "Magentaize": "Thanks for you reply. I'm looking forward to Prism's next step.. ",
    "MikelThief": "It could be an interesting move. Because Prism can work for forms, maybe it is not that much work to make it avalaible for Core or Standard. For anybody who finds this issue on Google - it was fixed in version 7.2.0.690-ci.\n. You're welcome :). I made a further investigation on this issue.\nIt seems that IModuleManager could not be resolved because IModuleCatalog could not be solved in the first place.\nWorkaround:\nBy overriding RegisterRequiredTypes() i managed to find out that if one replaces RegisterSingleton<>() by Register<>() for IModuleCatalog, the module will be loaded.\nBecause I need wo work with IModuleCatalog only once (and I am not going to use its powerful features from WPF, just for cosmeting project structure splitting) this is okay, as it won't cause memory leak...\nI am still trying to understand where the bug lies, but for now I think am missing something essential while browsing code.. @totht91 could you elaborate on that?. @brianlagunas Unfortunately, registering the container in the registry at the beginning of RegisterRequiredTypes() didn't fix the issue.\nHowever, containerRegistry.RegisterInstance((IContainerExtension)Container); does fix it.. @brianlagunas this does not work as \n\nIContainerProvider is not assignable to IContainerExtension\n\nNot strange because IContainerExtension implements IContainerProvider but not the other way :). What about GoBackAsync()?. I think the only way is not to bring the new interfaces to WPF or replace existing ones. Besides new names and slightly easier learning curve (for instance - ppl coming from other versions of Prism) it will also make tutorial videos more legacy (like \"Introduction to Prism 5\" which is still pretty actual). I am agaist this change personally (and I use both UWP and WPF versions).. @bartlannoeye thanks for the reponse. Unfortunately I am currently ill and will be seeing a doctor in a couple of days. After I get better I should be able to create what you need.. What actually came to my mind so far i what I have already written. Hovewer this would add a requirement to call for IContainerExtension every time one needs more than the default NavigationService (to resolve other instances which are being registered in View's code-behind - is this even sane?). This is a good idea. How about adding a tiny base class to make things a little easier to mess with:\n```\npublic class NavigationTransitionFactoryBase : INavigationTransitionFactory\n{\n    protected Dictionary TransitionInfoDictionary\npublic NavigationTransitionFactoryBase()\n{\n    TransitionInfoDictionary = new Dictionary<string, NavigationTransitionInfo>();\n}\n\n// user adds their own pairs like {drillin, new DrillInNavigationTransitionInfo()}\n// can be overridable if we want to provide default implementation\npublic void virtual ProvideNavigationTransitionInfo()\n\npublic NavigationTransitionInfo GetTransitionInfo(string name)\n{\n    return TransitionInfoDictionary[name];\n}\n\n}\n```. Obviously the newer version won't work as Prism is built against the older version i.e. 3.X. ",
    "jkotas": "@brianlagunas I would like to work with you on figuring the plan to port AppDomain usage in Prism to .NET Core. Would you mind including me on the conversation you had with the MS folks? (I am MS as well - my email address is on my github profile.)\nDo you happen to know the reason why Prism.Wpf inspects the assemblies in separate AppDomain? Is it just a performance optimization to make sure that the app does not hold on the assemblies that it does not need, or is it needed for functionality as well?  Other similar component catalogs inspect the assemblies in the same AppDomain, e.g. this is what AspNetCore does: https://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNetCore.Mvc.Core/ApplicationParts/ApplicationPartFactory.cs. I am wondering whether Prism.Wpf can do the same for .NET Core.\ncc @jeffschwMSFT @vitek-karas. ",
    "horseyhorsey": "I just installed Core 3 and this is the first place I came too. \nMy heart sank a little whilst half way down reading the comments, but hopefully it can be resolved. . Excellent, thanks Brian.\nVS Preview worked fine and that's where I got the location from quicker.\nFilter the the language to CSharp and use the Add directory button to fix it. I already had the extension installed so I'm guessing it could've happened since updating VS.. > This is the first time in my 18 year programming career that I decided I would contribute to an open source project to give something back to the community and now I am stuck at the very beginning...\n:1st_place_medal: \nI had the same issue and ended up here. You can use the extension templates and create, which just disappears immediatley after.  I hadn't updated 3.0 for a while but soon as update it's fine.\nCheers. ",
    "yanshouwang": "\nPrism uses the built-in Xamarin.Forms navigation behavior. Your issues is not clear to us and you did not provide a sample the reproduces the issue. You could even supply a gif of what the expected result is and another gif of the actual result to help us see the issue. Therefore I must close this issue as not enough information was provided.\n\nSorry for that (='x'=) , I just used the HamburgerMenu Demo to build this issue, and upload the gifs below, the first gif is the default effect which I used the detail property, and the second gif is the demo's effect which is a mvvm pattern, it's really not good-looking with the default one used the Detail property.\nAnd I tried to set binding to the Detail but it built to an error...I finally have to use a behavior to do this\n\n. I think the best Pattern to do this is like the TabbedPage which can use the CreateTab params. \nNow I use a behavior which bind a Detail Property in the vm to control the MasterDetailPage\u2019s Detail Property\uff0cIt\u2019s ok to me temporarily\uff0cbut really hope Prism to be better and better\u263a\ufe0f. Okay, I\u2019ll write a demo tomorrow, but now it\u2019s too late in China so I have to go to sleep\ud83d\ude48. @brianlagunas I just write a demo, see MasterDetailTest\nI don't know if it will be helpful, but it's a solution at least.. Oh~I updated my Test.Forms Project right now, and it works as expected.. @brianlagunas I tried it just now and it is really what I want~ thank you!. ",
    "dvanblokland": "I had the same problems when I updated Prism.Forms to 7.1.0.279-pre and had Prism.Plugin.Popups version 2.0.0-pre6.\nWhen I updated Prism.Plugin.Popups to version 2.1.0.182-pre the error disappeared. \n. ",
    "MarisB": "I still have the same problem if I build for Generic device. For simulator everything is ok.. ",
    "ngvanmy": "I updated Prism.Plugin.Popups to 2.1.0.182-pre the error disappeared, but have error:\nError MT2002: Failed to resolve \"Prism.Navigation.INavigationService\" reference from \"Prism.Forms, Version=7.0.0.124, Culture=neutral, PublicKeyToken=null\" (MT2002).. ",
    "blombas": "Failed to resolve \"Prism.Navigation.INavigationService\" reference from \"Prism.Forms, Version=7.0.0.124, Culture=neutral, PublicKeyToken=null\" (MT2002).\nHow do I get rid of this error. Have just updated to 7.1 for both Prism.autofac.forms(7.1.0.431) and prism.plugins.popup(2.1.0.228). I still cant build to my Iphone, simulator works fine.. I figured it out. Prism.extensions created the error. It is still referencing prism 7.0\nRemove package will solve the problem. ",
    "chowarth": "Sounds good and I'll give it a whirl later today when I get chance. Didn't expect you to put a fix in so quickly haha.\nWhile GetProperty is not available in NetStandard 1.0 Xamarin.Forms has its own internal extension method, see here and here, which is what I used along with the test below to confirm that everything worked OK.\n[Fact]\npublic void Command_EventArgsParameterPath_BaseDeclaredProperty()\n{\n    var executedCommand = false;\n    var behavior = new EventToCommandBehaviorMock\n    {\n        EventName = \"Navigating\",\n        EventArgsParameterPath = \"Url\", // Url is declared in WebNavigationEventArgs, not WebNavigatingEventArgs\n        Command = new DelegateCommand<string>(o =>\n        {\n            executedCommand = true;\n            Assert.NotNull(o);\n        })\n    };\n    var webView = new WebView();\n    webView.Behaviors.Add(behavior);\n    behavior.RaiseEvent(webView, new WebNavigatingEventArgs(new WebNavigationEvent(), null, \"http://prismlibrary.github.io/\"));\n    Assert.True(executedCommand);\n}. ",
    "Jesus805": "@brianlagunas Apologies for bringing up this old issue but I am also having this problem and was hoping I can receive a pointer on how to workaround this issue. I'm unable to perform view injection because the region does not exist in IRegionManager.Regions.\nhttps://github.com/Jesus805/PrismxMaterialDesign. @brianlagunas\nI'm not sure how to do that... is there a link to an example that I can look at? I'm still a noob at prism.\nAlso, most of my setup code is from your pluralsight videos, which I moved from a bootstrapper.cs to App.cs in order to use the new PrismApplication. All of those Prism samples aren't using the new PrismApplication so I'm not sure how to properly set it up.\nI'm honestly not sure where I got that ServiceLocator line of code. \u00af\\_(\u30c4)_/\u00af but I changed it, thanks.. I was able to get this to work.\n@GioviQ Refer to this page to register the DrawerHost Contents to the RegionManager.\nhttps://github.com/steve600/PrismMahAppsSample/wiki/Part-2:-Regions-and-RegionManager\nI'll also update my github repository with this solution.\n. ",
    "pannikbutton": "Glad to help.. ",
    "IoTFier": "Hi Brian, Happy New Year ! \nThank you for helping us with this API.\nI am in the process of moving my Xamarin Form based UI changes (made with the help of Gorilla) in a separate Xamarin App (Framework) project where I am using PrismLib to set up Navigation and MVVM.\nI am experiencing similar issue in my Xamarin Forms App project [Prism Lib DryIoc.Forms v7.1.0.431 + Xamarin Forms v3.4.0.10009999] even when I have ResourceDictionary defined with the mergedwith attribute.\n    <!--  Application resource dictionary  -->\n    <ResourceDictionary MergedWith=\"themes:myTheme\">\n\n\u2026..<ResourceDictionary\nDoes this have to match exactly like the syntax in your response above ?\nThanks\n. ",
    "TonyTrupp": "Thanks for the quick reply @brianlagunas. That did indeed work for me on a non-modal page, and this other user on the stackoverflow thread appears to also be using useModalNavigation:true too. \nCould you please explain why NavigationService.GoBackAsync() doesn't work when I call it from the modal?  Shouldn't that still go back regardless, or is there another method I should be calling to close modals?. Ah ok, that's the answer then, it was also needing this parameter to navigate back from the modal: \nNavigationService.GoBackAsync(useModalNavigation:true); \nThanks again, much appreciated. . ",
    "Karnah": "Ok, thanks for reply!. ",
    "rschoenbach": "I agree adding an exclusion list provides the additional flexibility.\nAllowing the search pattern to be overridden does not break any existing implementations and allows an opt-in feature for a required string.. ",
    "lordasgart": "But this also affects GTK projects (and macOS Cocoa apps also I assume). \nNow that Xamarin 3 supports all platforms from Android, iOS, Windows, macOS and now also Linux with GTK projects.\nAre there any plans for resolving this?. ",
    "Seikilos": "@brianlagunas  Thanks for the hint. Do you have a definitive commitment to Unity as a Prism DI Container? Because the Prism.Unity.Windows on nuget is a 10 months old pre-release (myget is a black box for me because I cannot even see meta-data of packets there without signing in o_0).\nThis might be a risk using Unity at the moment, the same way Autofac would be a risk because it appears to be phased out for prism due to its design decisions.. @bartlannoeye See my pull request #1587 , typos in the README.md caused issues.. ",
    "draudrau": "it's a shame that it works like this.\nWhen the override method call the base method, it should be the real base method and not the one which is overridden. So I can execute some specific code and then call the base method.. Sorry for my code. I've done quickly this project to do an example. I've omitted to pass the parameter.\nUse the RegisterRequiredTypes fonctionality doesn't offer much flexibility. I can't override NavigateAsync method with one with additional parameters as this signature doesn't exists in the interface. So this overriden method can't be used. I can't redifine the method (with new) as I can't call base method.\nSo if I need to do some stuff in the NavigateAsync method (add some controls for example) and then call the NavigateAsync base method, it's not possible.\nI have to search another solution :-(.\nThanks for your explanation.. Thanks for these advices.\nI'll test it.. ",
    "nielsenko": "I still have the issue that OnNavigatedTo is called ahead of OnNavigatedFrom with 3.1.0.517-ci. The call is no longer missing, but the order has changed.. ",
    "andygikling": "I'd like to get some quick clarification on this.  I just upgraded my Prism framework to 7.1 with DryIoc.\nPreviously, on boot, my container gets multiple instances of, for example, \"IConnectionProvider\" which is dynamic based on the number of hardware devices that are physically connected to the system.  On boot various modules would register their own IConnectionProvider with the container.\nWith Unity I was able to easily able resolve multiple instances with:\nList< IConnectionProvider > connectionProviders = Container.ResolveAll< IConnectionProvider >().ToList();\nSo it sounds like this sort of pattern has been removed in Prism 7x?\nIf so would you instead suggest I just make a dedicated service for this?  For example, by registering a single ConnectionProviderService to interact with the collection in a structured fashion, instead of using the container directly?\nAdvice would be much appreciated here.  Thanks!\n. @brianlagunas, thanks for the followup - I'm a huge fan of you and Dan's work!  Keep killing it!\nRight understood, but would you say it's better make new DryIoc Rules as described above, or go the Service route I described?  @DaveSenn's comment:\n\nyou could create your own rules, but know you do so at your own risk.\n\nmakes me think that option is going to have consequences and pitfalls I'm not foreseeing.\nThanks for your time.\n. Well, frankly, there are many things that would work for me boss.  For example, not migrating to Prism 7 and dealing with all the breaking changes in the library would have worked fine lol...\n. hahaha right... Tell ya what, I'll write a long dissertation on the issue once I understand it better and I'll follow up here with advice for the next guy.. ",
    "dro123": "More or less only that it will load my modules.\nThe application is when run without command line parameters a normal WPF GUI application with regions and views. But I can specify command line parameters and in that case I don't need the UI part, just the module loading.\n/edit:\nForget the other part of the question:\nThe modules still use the dependency injection of Unity that is initialized with Prism. There's a global flag that the modules check during intialization to not register any regions or views but do the other initialization stuff.\nAs an example I have module that does backups and this can be used from the UI (with views etc.) or from the command line.. Just checked 7.1.0.559-ci and it works fine. \nThank you!. ",
    "explorer566": "Hi Brian,\nplease have a look at my project sample where navigation takes place within a NavigationPage.\nThe \"Navigate\"-Button works in the \"Normal Page\" but not in the \"Tabbed Page\".\nRegards\nRalf\nPrismNavigation.zip\n. ",
    "zein-makki": "@brianlagunas I can't see why moving the class members into local variables would affect this. Anyway, I have just updated and pushed code to the repo to use your suggested approach and we're still seeing the same behavior.. The interesting point mentioned in the issue is that if we remove the call to the long running method which executes before calling the Command's RaiseCanExecuteChanged inside the SUT code, then tests pass consistently.\nI can't get my head around why the handlers are being released, and we've been trying to figure that out since more than a week before posting this.. @brianlagunas Are you running the tests in parallel ? These tests never pass when ran in parallel. I didn't get the upgrade Prism part because our problem is with Prism 4 as described in the issue. . @brianlagunas Tests being ran in parallel or not has nothing to do with the way the tests are written. There is an option in the Visual Studio test runner that configures that option and I though it would be on by default. Anyway, I have added and pushed the xunit.runner.json configuration file that would force the Visual Studio test runner to run the tests in parallel. This should be the only thing that would make you see different results (since we're both referencing the same Prism and Xunit assemblies).. This makes sense now! I have been scratching my head trying to think why we're getting different results.\nSince you've experienced issues in the past testing RaiseCanExecuteChanged, do you have any idea why this might be happening ? Why the handlers are being set to IsAlive false while the SUT is still running? Maybe you can suggest some workaround, if any, on how to resolve it until we upgrade in the near future to Prism 6 or 7. \nThis is a real blocker for us and any help to resolve it would be much appreciated.. I've just upgraded that sample project locally to Prism 6.0 and I can confirm that I am not seeing that issue anymore.. ",
    "flaviup": "I navigated using: _navigationService.NavigateAsync($\"{nameof(NavigationPage)}/{nameof(ViewB)}\", \n                                             new NavigationParameters\n                                             { \n                                                { KnownNavigationParameters.UseModalNavigation, true }\n                                             }, \n                                             true); and then tried getting back with: _navigationService.GoBackToRootAsync(new NavigationParameters { { KnownNavigationParameters.UseModalNavigation, true } });. Thanks Brian, it worked after strictly following the documentation.. ",
    "mkieres": "Thanks for your prompt reply @brianlagunas, really appreciate it. I missed the fine print, sorry about that.\nI guess you're asking in your post fine print comment, if this is a needed functionality? The answer is yes :). Do you and/or other prism contributors have any plans (or potentially an estimate) on adding this into prism?. Makes sense. Thanks again for a prompt reply.\nCould I ask you where one would start to get this working? Would it be something to do with customisation the PrismNavigationService and fiddling around with the code that works with the selectedTab or rather post navigation event handling (e.g. OnNavigatedTo), once you land on the selected tab?. ",
    "aritchie": "Hey Brian.  No worries.  I had this anyways.  I felt it served better over here.  . ",
    "acastr7": "@brianlagunas Even when I remove useModalNavigation I still get the exception below so I don't believe that was the issue. All I'm trying to do is have the Master Page change the Detail from a Tabbed Page to a Navigation/Content page and then back again. Also this worked fine in 7.0 as you can see in the other project within my repo.\nat System.Collections.Generic.Queue`1[T].ThrowForEmptyQueue () [0x00000] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.2.1.10/src/Xamarin.iOS/external/corefx/src/System.Collections/src/System/Collections/Generic/Queue.cs:381 \n  at System.Collections.Generic.Queue`1[T].Peek () [0x00008] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.2.1.10/src/Xamarin.iOS/external/corefx/src/System.Collections/src/System/Collections/Generic/Queue.cs:281 \n  at Prism.Navigation.PageNavigationService+<ProcessNavigationForMasterDetailPage>d__42.MoveNext () [0x003b8] in D:\\a\\1\\s\\Source\\Xamarin\\Prism.Forms\\Navigation\\PageNavigationService.cs:585 \n--- End of stack trace from previous location where exception was thrown ---\n  at Prism.Navigation.PageNavigationService+<ProcessNavigation>d__30.MoveNext () [0x00423] in D:\\a\\1\\s\\Source\\Xamarin\\Prism.Forms\\Navigation\\PageNavigationService.cs:345 \n--- End of stack trace from previous location where exception was thrown ---\n  at Prism.Navigation.PageNavigationService+<NavigateInternal>d__28.MoveNext () [0x000f9] in D:\\a\\1\\s\\Source\\Xamarin\\Prism.Forms\\Navigation\\PageNavigationService.cs:281. My tabbed page implements INavigatingAware which lets me handle the tab switching. \nhttps://github.com/acastr7/Bug-Prism-MasterDetailTabPage/blob/master/7.1/MasterDetailTabPageBug/MasterDetailTabPageBug/Views/PrismTabbedPage.xaml.cs. ",
    "angelru": "@rredoh @brianlagunas All work good without prism, I can't find the issue...when I  click, load the viewmodel but do not load the view...\n. ",
    "Supai93": "Sorry, my bad. I've just confirmed ModuleCatalog does exist in Prism.Wpf assembly, Prism.Modularity namespace. ",
    "sathirei": "Was trying to pull instead of push.. ",
    "iskabin": "Thanks for the quick reply!\nI took out the NavigationPage, but the problem persists.\nHere is the repro: https://github.com/iskabin/PrismRepro\n. ",
    "HelenMamalaki": "Hi Brian, I'm not comfortable sharing my entire app project publicly, would I be able to send it to you privately somehow? I could share it through the form on your website if that's appropriate? http://brianlagunas.com/contact/. As requested, I have updated the issue with a link to a simple app that replicates the issues, I have updated the reproduction steps too.  Appreciate your comments above so I hope that helps. Thanks so much for your time and effort.. @brianlagunas I don't see a way of re-opening this issue now that I have provided a sample app. (See comment above). Just worried it will be over-looked otherwise. . ",
    "DallasP9124": "You would be surprised about the 35 WPF samples. None that I could find show how to register a service and a module and show how it gets resolved into a model or something. So yes, I say lack..... Understood @brianlagunas , I know the small team dev life, always stuff on the backlog \ud83d\udc4d . ",
    "Jinjinov": "Ok, even though I am not trying to build from source - I am just trying to open the solution - I did go and install the latest .NET Core 3 SDK and runtime. The situaltion did not change. Visual Studio fails to open the project:\n\n. line 21 in Prism.Wpf.csproj\n<VersionSuffix Condition=\" '$(PRISM_RELEASE)' == '' And '$(PRISM_WPF_VERSION)' == '' And '$(IS_PREVIEW)' \">pre</VersionSuffix>\nis causing the error:\nExpected \"$(IS_PREVIEW)\" to evaluate to a boolean instead of \"\", in condition \" '$(PRISM_RELEASE)' == '' And '$(PRISM_WPF_VERSION)' == '' And '$(IS_PREVIEW)' \".\nI just opened a freshly created WPF *.csproj file and it looks vastly different from Prism.Wpf.csproj. I have repeated these steps on my PC (Windows 7) and on my PC at work (Windows 10)\n\nI installed Visual Studio 2017 (in installer I choose \".NET desktop development\")\ncloned Prism from GitHub\nopened PrismLibrary.sln - all the projects load, except the WPF projects\n\nopened PrismLibrary_Wpf.sln - again the core and the test projects load, but the WPF projects don't\n\n\nthen I installed Visual Studio 2019\n\nopened PrismLibrary.sln - same result as in 2017\nopened PrismLibrary_Wpf.sln - same result as in 2017\n\nWhy would that happen on 2 different computers with 2 different OS and 2 versions of Visual Studio?\nDo I need any extra Visual Studio components?\nThis is the first time in my 18 year programming career that I decided I would contribute to an open source project to give something back to the community and now I am stuck at the very beginning.... ",
    "ZmorzynskiK": "I second that thread. Generally it was a great move to abstract IoC \ud83d\udc4f, but the lack of:\ncsharp\ncontainerRegistry.RegisterSingleton<TFrom, TTo>(\"NAME\");\nis killing me right now \ud83d\ude09 as I need to add unity directly to any project that registers some kind of singleton instance (service) and at some point I want to get all of those registered singletons (services).. ",
    "fileman": "Use OnNavigatingTo http://prismlibrary.github.io/docs/xamarin-forms/navigation/passing-parameters.html#sidetoggle. I wanted to try to solve this problem, but I can't find the extension source code, is it available somewhere?. ",
    "HobDev": "Please see this screenshot too.\n\n. ",
    "robertwharvey": "Thanks, Brian.. ",
    "AKruimink": "For the last week i have been trying to figure out how to have my view models shared between XF and WPF clearly without any result, as soon as a view model contains any kind of navigation its off the table and get duplicate inside its own project with it's own navigation (still trying to find a way, so if anyone knows how to please let me know, i am getting deperate, maybe an event aggregator that gets handled inside the wpf and xamarin project and deal with the navigation?)\nWith that being said, and to adress the question, i think it is of somewhat important that slowly but surely WPF will be worked into the Prism.Core project as well, WPF is not dead, and with WPF comming in .net core 3.0 there are more reasons then ever to have shared view models cross platforms. \nWith UWP being limited to windows 10 systems, Windows Forms mainly being around from older projects, and not every company jumping on the web based ui we still see a lot of WPF around (and new projects written with them) and allot of these projects get mobile ports, which would benefit hugely from being able to share these viewModels.\nI do understand that this will bring certain issues with it and make stuff more complicated, but i do think that in return it will offer even more flexibility, and far outweight any of the negative downsides.\nAlso nothing a decent example project would not fix?\nBut hey, that's my take on it.\nEdit: Incase it was not clear, my aswer to \n\nShould we bring INavigationService and other interfaces to WPF?\n\nWould be yes. ",
    "DamianSuess": "Frankly, the lack of support between Xamarin.Forms and WPF just put a wrench in our latest project. We didn't want to target UWP; instead, use WPF for desktop as well as Android/iOS support because of IT restrictions against the Windows Store.. @brianlagunas , thank you for taking your time to provide a detailed and useful explanation.  Since we're doing a lightweight front-end, I was hoping we'd get away with using XF.WPF w/ minimal effort. Honestly, I'd rather use your project - prism - over our previous custom efforts with TinyIoC.. ",
    "Martinn2": "WPF support for XF would be great for me as well.. ",
    "keyse": "I like this design very much and for the question: \n\nHow to create an extension point to provide custom Windows to act as the dialog host (think Infragistics, DevExpress, Telerik, etc)?\n\nSince we'll have IContainterRegistery.RegisterDialog then why not also have  IContainterRegistery.RegisterDialogHost that we allow registering a Dialog Host Window that implements IDialogWindow.\nThat way the developers can fully design and customize the Dialog Host Window as they want and not relay on Prism set the custom WindowsSettings.. ",
    "gojanpaolo": "Please add to guidelines for creating a custom window:\n- add Title binding (e.g. )\nit's not much but I hope it saves other devs a few minutes. :). What is the benefit of using callback parameter instead of returning IDialogResult (assuming we can change both methods for consistency)?. Ahh! forgot about the modal/non-modal thing. Thanks for the explanation. :). @hronlukas You can always create a wrapper/service for those dialogs.\nc#\npublic class OpenFileDialogService : IOpenFileDialogService\n{\n    private readonly OpenFileDialog _openFileDialog = new OpenFileDialog();\n    public bool? ShowDialog() => _openFileDialog.ShowDialog();\n}. ",
    "antoinebj": "Does that support multi-window? If main window is on screen 1, and the view whose view model wants to show a dialog is in a window on screen 2, will the dialog properly show up in screen 2?\nAFAIK Interaction requests solve that problem, and it would not be too difficult to make them easier to use (I've done it in my project). Sorry to reiterate the issue, but am I the only one concerned by how to specify the window owning the dialog to avoid that it shows up on a different screen?\nAre there recommendations for that? Or this solution only for single-window apps?. @brianlagunas Indeed, it gets the active window and uses it as owner of the dialog box, so it gets the job done for the vast majority of cases, where you would have a classic dialog box, with its own window. Smart and simple.\nIn the broader sense, a dialog box could be a popup that appears for user input over a specific content, using the adorner layer for example. In such more or less edge cases, there are alternatives which will be just fine to complement this dialog service.\nGood job and thanks for keeping this project alive.. ",
    "hronlukas": "Hello Brian,\nGreat job!\nWhat about Open File/Folder dialogs from Microsoft.Win32 or WinForms?\nLukas. ",
    "cytoph": "Oh sorry.\nThe question I now asked at StackOverflow can be found here.. ",
    "jmoleary": "I am not sure I understand the objection.  \nYou don't have to hook into  anything you don't hook into already.  Under the hood, DelegateCommand uses PropertyObserver, does it not?  .  Well PropertyObserver already hooks into the INPC event.  All I am saying is that it should be a tiny bit smarter about what it is monitoring and do a check for null or \"\" and consider that as also being the property changed.  \nSince (according to the docs) null or \"\" actually means that the specific property you are observing has changed.  If you do not react to it (in addition to the property name itself) then you are not truly observing the property.\nI use my own version of PropertyObserver in my own projects and the change to make this work was trivial.  If the string is null or empty, instead of invoking one handler, it invokes  the handlers for everything it monitors.. ",
    "omerfarukz": "We have a member info(given from property expression) on property observer. So, why we not use the property info(over expresssion.Member[type=PropertyInfo]) instead of property name. Is that cause a performance problem? Using property name instead of property info enforces us to make reflection twice. (GetRuntimeProperty(name)) but we have a property info already in property observer.\nI made a small changes on property observer and property observer node classes to use property info. So, there is no need to have property info on the PropertyObserverNode and as a result there is no need to GetRuntimeProperty(again) call for resolution to get property and check for is it shadow or not.\nWhat do you think about that?. Yes, it works in my scenario. All tests are passed except DirectoryModuleCatalogFixture. Consedired it is not related with this.. ",
    "aracurd": "I still don't understand why just not use IUnityContainer instead of IContainerRegistry and IContainerProvider like it's was before.. > Obviously the newer version won't work as Prism is built against the older version i.e. 3.X\nThere is why i tried to use old version. But old didn't works too. So looks like only Prism 6 works with Unity.Wcf. I find solution. Just need to do redirect reference from old version to new \n<dependentAssembly>\n        <assemblyIdentity name=\"Unity.Abstractions\" publicKeyToken=\"6d32ff45e0ccc69f\" culture=\"neutral\" />\n        <bindingRedirect oldVersion=\"2.0.0.0\" newVersion=\"3.3.1.0\" />\n      </dependentAssembly>. ",
    "noufalonline": "@brianlagunas  There is small type in Create Your Dialog View Code.\ncsharp\nCommandPrameter=\"true\"\n. ",
    "bares43": "Thanks for answer. I've already created my own extension but it would be better if this could handle Prism itself. :) . I guess I could try it. So PR #1684 is created :). Thanks . Ok I will add it. ",
    "jp-weber": "@dansiegel , @brianlagunas \nWith these changes how it is possible to create a new NavigationService within a page for the NavigationView?\nIn the old way, the implementation is like this:\nhttps://github.com/jp-weber/Template10/blob/master/Source/Template10.Extras.16299/Controls/NavViewEx.cs#L45. ",
    "jahmai": "This is silly and breaks tools like MEF that do assembly type scanning. Even if the code resides in a shared library that isn't used in WPF it will break any .net application that uses the library in a reflection scanning capacity.. I'm well aware of what can be achieved with open source applications, thanks for the tip though.. ",
    "Devanathan2015": "@brianlagunas \nYes.I have read the documents.Here is my sample code.\nI am using Prism TabbedPage with item source, Inside each tabbed page there is a Listview for which i am unable utilize \"ItemTapped\" event as an event to command Behaviour to trigger a command in viewmodel when an listview item is tapped, but there is no trigger in debug mode when i tap an list view item, Please help me understand why this is happening and is there any alternate way in which i can use command for this. Also when i checked The event is getting triggered in PrismTabbedPage1.xaml.cs but not in PrismTabbedPage1ViewModel.cs\nPrismTabbedPage1.Xaml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<TabbedPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\n            xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n            xmlns:prism=\"clr-namespace:Prism.Mvvm;assembly=Prism.Forms\"\n            xmlns:behaviors=\"clr-namespace:Prism.Behaviors;assembly=Prism.Forms\"\n            prism:ViewModelLocator.AutowireViewModel=\"True\"\n            x:Class=\"testapp.Views.PrismTabbedPage1\"\n            ItemsSource=\"{Binding countries}\">\n    <TabbedPage.ItemTemplate>\n        <DataTemplate>\n            <ContentPage Title=\"{Binding CountryName}\">\n                <ListView ItemsSource=\"{Binding Cities}\">\n                    <ListView.ItemTemplate>\n                        <DataTemplate>\n                            <ViewCell>\n                                <Label Text=\"{Binding CityName}\" TextColor=\"Black\"/>\n                            </ViewCell>\n                        </DataTemplate>\n                    </ListView.ItemTemplate>\n                    <ListView.Behaviors>\n                        <behaviors:EventToCommandBehavior EventName=\"ItemTapped\" Command=\"{Binding ListItemTapped}\" EventArgsParameterPath=\"Item\"/>\n                    </ListView.Behaviors>\n                </ListView>\n            </ContentPage>\n        </DataTemplate>\n    </TabbedPage.ItemTemplate>\n</TabbedPage>\nPrismTabbedPage1ViewModel.cs\n`using Prism.Commands;\n    using Prism.Mvvm;\n    using Prism.Navigation;\n    using System;\n    using System.Collections.Generic;\n    using System.Collections.ObjectModel;\n    using System.Linq;\n    using testapp.Models;\nnamespace testapp.ViewModels\n{\n    public class PrismTabbedPage1ViewModel : BindableBase\n    {\n        public ObservableCollection<Country> countries { get; set; }\n        public DelegateCommand<Country> ListItemTapped => new DelegateCommand<Country>(OnTapped);\n\n        private void OnTapped(Country obj)\n        {\n\n            //NavigationService.NavigateAsync(\"MainPage\");\n        }\n\n        public PrismTabbedPage1ViewModel()\n        {\n            ObservableCollection<City> Cities1 = new ObservableCollection<City>()\n            {\n                new City(){ CityName = \"City1\" },new City(){ CityName = \"City2\" },new City(){ CityName = \"City3\" },\n                new City(){ CityName = \"City4\" },new City(){ CityName = \"City5\" },new City(){ CityName = \"City6\" },\n                new City(){ CityName = \"City7\" },new City(){ CityName = \"City8\" },new City(){ CityName = \"City9\" },\n            };\n\n\n            countries = new ObservableCollection<Country>()\n            {\n                new Country(){ CountryName = \"Country 1\", Cities = Cities1 },\n                new Country(){ CountryName = \"Country 2\", Cities = Cities1 },\n                new Country(){ CountryName = \"Country 3\",  Cities = Cities1 },\n            };\n        }\n    }\n}\n\n`\nCountry.cs\n`using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Text;\nnamespace testapp.Models\n{\n    public class Country\n    {\n        public string CountryName { get; set; }\n        public ObservableCollection Cities { get; set; }\n    }\n    public class City\n    {\n        public string CityName { get; set; }\n}\n\n}\n`\nIn this code the listview command behaviour is not get triggered.. ",
    "Oleksandr-Tokmakov": "\nYou should be inheriting from PrismApplication, not PrismApplicationBase.\n\n))))) Thanks! That solved my issue.. ",
    "erikh111": "@dansiegel thanks for reviewing this issue and providing a fix so quickly!. ",
    "tstivers1990": "\nThe NavigationService isn't \"swallowing\" the Exceptions. If you look at the Navigation Result you'll see if your navigation was successful and what the Exception was.\ncs\nvar result = await NavigationService.NavigateAsync(\"ViewWithException\");\nif(!result.Success)\n{\n   Console.WriteLine(result.Exception);\n}\n\nIt's still swallowing the exception, though. Visual Studio doesn't properly break on the line. And many times, Visual Studio fails to show any information about the exception (such as a message), instead stating that a timeout occurred while getting exception details. This makes debugging about as annoying as it could be. The fact the result shows you exception details is great and all. But that doesn't do anything to resolve the point I'm bringing up.\nIs there a reason why my proposal can't be done? I don't think it's that unreasonable to have OnInitialized return Task, considering you're always going to have to call a navigation method from it, and those are only async. And I don't think it's unreasonable to add INavigationAwareAsync, IActiveAwareAsync, etc.\n\nAlso worth noting that it's actually a bad practice to be using nameof(SomePage) since this would directly expose the Page class within your ViewModel. It would be a far better practice to abstract that into a Keys class that exposes it as a constant string like:\ncs\npublic static class NavigationKeys\n{\n    public const string FooPage = nameof(FooPage);\n    public const string BarPage = nameof(BarPage);\n}\n\nI actually wrote this for my ViewModelBase. The code that uses nameof is in App.xaml.cs where this isn't available.\n```cs\npublic class ViewModelBase : BindableBase\n{\n    ...\nprotected async Task<INavigationResult> NavigateAbsolute<TViewModel>(bool useNavigationPage = false)\n    where TViewModel : ViewModelBase\n{\n    return await NavigateAbsolute<TViewModel>(null, useNavigationPage);\n}\n\nprotected async Task<INavigationResult> NavigateAbsolute<TViewModel>(INavigationParameters parameters,\n    bool useNavigationPage = false) where TViewModel : ViewModelBase\n{\n    var key = useNavigationPage ? \"/NavigationPage\" : \"\";\n\n    key += $\"/{GetViewName(typeof(TViewModel).Name)}\";\n\n    return await _navigationService.NavigateAsync(key, parameters);\n}\n\nprotected async Task<INavigationResult> NavigateRelative<TViewModel>() where TViewModel : ViewModelBase\n{\n    return await NavigateRelative<TViewModel>(null);\n}\n\nprotected async Task<INavigationResult> NavigateRelative<TViewModel>(INavigationParameters parameters)\n    where TViewModel : ViewModelBase\n{\n    return await _navigationService.NavigateAsync(GetViewName(typeof(TViewModel).Name), parameters);\n}\n\nprivate static string GetViewName(string viewModelName)\n{\n    if (!viewModelName.EndsWith(\"ViewModel\"))\n    {\n        throw new ArgumentException($\"Parameter `{nameof(viewModelName)}` must end with 'ViewModel'.\",\n            nameof(viewModelName));\n    }\n\n    var result =  viewModelName.Substring(0, viewModelName.Length - \"Model\".Length);\n    return result;\n}\n\n...\n\n}\n```. > @tstivers1990 the NavigationService used to allow most exceptions to bubble up and while also handling a few. This forced developers to wrap every navigation call in a try/catch and generally led to a bad experience. That behavior was intentionally changed to make it easier for developers to handle situations where Navigation has failed in a graceful manner with INavigationResult.\nI'm not understanding. Based on what you stated, I'd say it's user error because they haven't caught the exception in the first place. How is this any better than the previous state, where exceptions would bubble up? Now they don't bubble up, and I have no clue where the exception happened. Wrapping every navigation call in a try/catch seems like exactly the sort of thing you shouldn't do. It's akin to:\ncs\npublic class Program\n{\n    static void Main(string[] args)\n    {\n        try\n        {\n            // do something\n        }\n        catch { }\n    }\n}. @dansiegel \nMy problem also isn't with the navigation service itself. Prism could still return INavigationResult while fixing the issue. The problem is that OnInitialized has to return void, and as such will swallow every exception that gets thrown down that chain. This makes no sense, because you're supposed to call the navigation service in OnInitialized and that guarantees you're going to call a method that returns Task. There's no reason not to have OnInitialized return Task. Along with that, INavigationAware, IActiveAware, etc must return void, and so those also swallow exception information. Making OnInitialized return Task and awaiting it in any code that calls it within Prism would resolve half of it. And then making INavigationAwareAsync, etc interfaces would resolve the other half. It wouldn't require any changes to what the navigation service returns from what I can see. You could still return INavigationResult and users wouldn't have to wrap their navigation calls in a try/catch block. But exceptions would bubble up correctly, and Visual Studio etc would break on the line that threw the exception like it's supposed to.. > @tstivers1990\n\nOnInitialized is called from the Constructor and therefore cannot return a task. You should simply do an async void and get the result. If you haven't done something that basic then swallowing the exception is on you.\n\nI can understand that returning Task isn't viable for OnInitialized. I'm not following how \"simply do an async void and get the result\" will resolve my problem. I know an exception happened. Visual Studio tells me an exception happened. The problem is it just gives me the standard \"application paused\" screen with an exception dialog, rather than breaking on the line in my code that threw the exception.\nFor example: I make a call to HttpClient.GetAsync(). GetAsync() throws a HttpRequestException. Under normal circumstances, Visual Studio would break on the call to HttpClient.GetAsync() with exception details. But with my Xamarin Forms project using Prism, it gives me the pause screen with a dialog that tells me an HttpRequestException was unhandled. Obviously, I should be handling this exception and it's my fault for not handling it. But that's what debugging is for, and why it's useful having the debugger break on the line that caused the exception, so you know what needs to be fixed. How can I go about getting the desired behavior here? I've done pretty extensive googling on this topic and have come up with 0 solutions. I'm not sure if it's a Xamarin Forms thing, or if it's something to do with the way Prism works.\n\nAs to your other complaints about INavigationAware what you're asking would lock up the UI Thread and actually lead to poor performance.\n\nI'm not understanding how that would lock up the UI thread? I'm aware of the caveats of async/await and the need to use ConfigureAwait(false) in many scenarios. But I don't understand how making an alternative INavigationAwareAsync would inherently lock up the UI thread?. These aren't necessarily complaints, either. They're suggestions for solutions to an issue I'm having. If the suggestions aren't possible, then so be it. But I'm not one to just complain and demand someone fix the problem. I'm willing to submit a pull request myself if it's something that can be done.. ",
    "hongyue": "seems the issue has already been fixed after the 7.2.0.1038-pre released. I just compiled the source code and adding the assemblies to my project, the problem has gone.. @dansiegel Thank you for reminding me, next time I'll try it first.. ",
    "sb34000": "Hi Dan,\nI Wonder why on the rework of INavigationAware, the logic of the suspending bool disapeared.\nWe intensively used it in our LOB UWP app to unsubscribe to event handlers and other specific contexts to prevent memoryleaks. This bool was used to apply different logic when leaving a page on a normal navigation (in that case we clean all the handlers) but when the navigatedfrom is called by lifecycle events, we need to keep all handler subscriptions because the constructor will not be called on resume. \nWhat is the proposed logic in remplacement ?\nI'm afraid it means a lot of breaking changes if we try to migrate from Prism 6.3 to 7.x ?\nThanks for your help\nSeb. Hi Bart,\nThank you for your answers. I understand the need of breaking changes. Will the Adventure works sample updated with 7.x to help us understand how to deal with new behaviour. Do you have any doc or sample for UWP ? The sample in the sandbox are so basic...\nThanks,\nBest regards,\nSeb. ",
    "FrogsLegs": "Some further testing on this issue, if we set each pages NavigationCacheMode to Required, it appears to resolve the problem. Memory is correctly freed up by the GC. I would suggest this issue is therefore not a bug of the Prism library but within the UWP Framework itself. \n. I'm trying to clone this repo to step through the behaviour in code, having a nightmare trying to resolve some of the older SDKs (uap10.0.15063) and (uap10.0.16299). I'll update with more info if I'm able to get the PrismLibrary to compile!. @brianlagunas Thank you for looking into this, this is not the default behavior of a standard UWP app. \nThe source code of Prism also seems to attempt to pull these parameters, are you sure this is intended behavior? The concrete implementation of NavigationService for Windows 10 UWP checks the frame for any parameters:\nvar previous = frameProvider.Frame.BackStack.Last().Parameter?.ToString();\nAnd then returns those parameters in the call to the FrameFacade:\nreturn await _frameFacade.GoBackAsync(\n                    parameters: parameters,\n                    infoOverride: infoOverride);\nApologies if I'm missing something, but it seems strange Prism would remove what is a default behavior in UWP, and if so why does the source attempt to retrieve the params from the BackStack.Last entry?. ",
    "andreinitescu": "If project owners give feedback and we agree on how things need to be fixed, I could help with a pull request. I could just do a pull-request but without discussion it might end be a waste of effort.. I added a 3rd issue.\n. @dansiegel This isn't related to leaking if that's what you're referring to. Correct. And there are different issues related to having dynamically added partial views, which I tried to describe. Let me know if something is not clear. I think this feature was designed only with static partial views, meaning child views which are never removed from the Page.. I wonder, am I the only one who stumbled on this? How's everyone else doing dynamic partial views? Usually when it seems it's just you, it might be a sign you're doing something wrong :)\n\nit will be on you to initialize them as we won't be able to pass in NavigationParameters after the fact... and OnAppearing which comes from the Page will have already fired.\n\nRight. Which make sense to some extent, INavigationAware/INavigatedAware are for pages. Which is something I mentioned above. \n Buuut...  While I'm aware of IActiveAware pattern, the thing is, in practice, you need a way to pass data and initialize partial view-models. \nFor this, I wonder how about adding some new pattern/interfaces? See my IPartialViewModelAware / IPartialViewModel idea from above.\n. While regions involve quite complex scenarios, why not use this opportunity to come up with something much more simpler?\nI am thinking about simple interfaces and a custom behavior on partial views (similar to existing behaviors) which call methods when child is added/removed from a parent view.\nWe can monitor for example the \"Parent\" property on a partial view to know when view is being added/removed. This can give the opportunity to ask the \"host\" view of the partial view (the host can be any view, not just Page, it can be a value set by a custom attached property on the partial view) to call an initialization/un-initializationmethod on the view/view-model (something like IPartialAware.Initialize(initParams))\nWhat do you think?. ",
    "scharada": "@andreinitescu no you are not alone on this. there are quiet few questions out there regarding the subject .. i have a \"pseudo\" solution for classic forms project but which works fine and is very fast and clean but it is neither the wished partialview nor does it work with prism which is the framework i used in my project. \nsometimes, these limitations make me rethink about the choices i made.  i am facing that issue now with the new XF shell feature which has much of the navigation goodies that prism offers. i wonder if there is a plan to support this in prism and when. this would be a tough decision that i will have to make very soon.\n@dansiegel prism has helped a lot of people since its birth. no doubt about it. however, for people who have chosen it to build large projects, features like partialviews becomes a key element among others.  that's something that makes a whole lot of difference.\n it also becomes crucial to have a roadmap to  support major platform changes such as shell ... (unless you have that planned and i missed it, then please point me to it)\nthanks\n. probably spoke too soon about Shell support. just saw this and will give it a try.\nhttps://github.com/dansiegel/ShellAppTemplate\n. is that the link ???? why would you post such a thing ?. ",
    "thinzarhtet": "Nakita@gmail.com\n. ",
    "myokeeh": "@bartlannoeye I've tried updating to Prism.Unity to 7.2.0.1038-pre and installed Prism.Windows 7.2.0.1038-pre, too. Not Prism.Unity.Windows? You seem to imply that I should be able to get to a an app that builds even with the pre-release versions above. Is that right? I'm still getting a bunch of \"does not exist in current context/namespace\" errors that I can't seem to point in the right library/namespace. Is that expected?. @bartlannoeye. I understand there are breaking changes, and okay with that. I'm new to this and trying to understand current state and where this is heading. Thanks.. ",
    "simedbn": "It's done Thanks . Yes it's done sorry for that. "
}