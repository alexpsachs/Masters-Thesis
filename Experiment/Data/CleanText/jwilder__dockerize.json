{
    "md5": "For what it's worth, I was just able to download this without issue.\nIt looks like Github may have been in the middle of a DDOS when you reported this: https://status.github.com/messages\n. Would it make sense to also move the wg.Add(1) into runCmd?\n. Got it.\n. Looking at the docs, that seems to be recommended practice: http://golang.org/pkg/sync/#WaitGroup\n\nThe main goroutine calls Add to set the number of goroutines to wait for. Then each of the goroutines runs and calls Done when finished.\n\nI'm definitely a Go newb, but I could swear I saw some of the tools I've looked at lately doing both the wg.Add(1) and the defer wg.Done() in the goroutine. If my recollection is correct, I guess those tools likely have some undiscovered issues.\n. @oryband It sounds like you may be better off using jwilder/docker-gen instead of dockerize.\n. @md5 You're right. That was a silly suggestion on my part.\n. Why not achieve maximum silliness?\n. ",
    "jwilder": "Thanks!\n. Good point.  I'll update that.\n. Actually...  the wg.Add(1) were in main to prevent the process from exiting before the goroutines started.\n. When it doesn't exit, are you also tailing any files?\nThat behavior sounds reasonable though.\n. That's fine.  dockerize only supports linux currently.\n. Yep. Thanks!\n. Thanks!\n. This is supported via -template /tmpl/dir:/dest/dir.  If the src is a directory, each file is treated as a template and generated into the dest dir.. Thanks.  I don't think this makes sense to add to dockerize.\n. Thanks @sebest!\n. @robbertkl The timeout should be fixed in v0.0.4.  The SIGTERM/SIGKILL handling should also be fixed, but you need to make sure your Dockerfile CMD is using the exec form;\nCMD [\"dockerize\", \"-template\", ...]\nvs.\nCMD dockerize -template ....\nThe latter actually invokes /bin/sh dockerize which will not forward signals to dockerize correctly.  You can run docker exec <container> ps -ef to see if dockerize is actually pid 1 or if /bin/sh is.\n. @oryband I think some kind of a -dry-run feature would be useful.  Good idea.\n. The no command specified could be improved as well.\n. @oryband I've updated the usage as well as made command optional as well.\n@doodyparizada Command is not optional.  You can render templates to standard output for debugging by leaving off the :/dest portion.\n. Thanks @thomasleveil! \n. This supported now via 401d864.\ndocker -template foo.tmpl:/path/to/file\n. Thanks @gunnarx!\n. Thanks @sstarcher!\n. Thanks @multani!\n. Thanks @sunxiaoguang.  I'm not sure I understand why this should be added.  Couldn't you just change the ulimit in the container either in a parent image's RUN step or before dockerize is started?\n. Thanks @mefellows! Nice feature idea.\n. @mefellows I just created a new v0.1.0 release.\n. I don't see any reason why it could not support udp as well. PR would be great.\n. Thanks @metmajer! \n. Go templates have a builtin eq function?  Is this different in some way?\nhttps://golang.org/pkg/text/template/\n. Thanks @jeffenns!\n. Should be fixed via #92. Can you run go fmt on the files you've changed.  The formatting looks off.\n. Thanks @cedriessen!\n. Thanks @xizhibei!\n. Yes.  See: https://github.com/jwilder/dockerize#waiting-for-other-dependencies\n. Fixed via #39. I believe you can already do this w/ env vars as @driverpt pointed out:\nFROM dockerize\nCMD dockerize -wait $HOST echo \"foo\"\ndocker run -e HOST=http://localhost -it foo\n. Thanks!\n. I added a slightly different looping construct in #89.  See loop template helper.. This sounds like an issue with how your containers are started or something do to with docker networking.  From:\nhttps://docs.docker.com/engine/userguide/networking/#the-default-bridge-network\n\nContainers connected to the default bridge network can communicate with each other by IP address. Docker does not support automatic service discovery on the default bridge network. If you want containers to be able to resolve IP addresses by container name, you should use user-defined networks instead.\n\ndockerize doesn't do any DNS resolution itself so I don't think this issue is an issue with dockerize itself.. For backwards compatibility, I think this flag needs to be inverted since the current behavior is to overwrite always.  I'd suggest something like -no-overwrite. PRs are welcome. \n. Some questions:\n- What happens if two -wait http://... options are passed?\n- What happens if -headers is passed, but no -wait?\n. One small issue w/ the README, but looks good.\n. @w4tson I don't see the updated README.md change w/ -wait-http-header?  Did you push it up?\n. Thanks @w4tson!\n. Yes.  There is an alpine build you can install: dockerize-alpine-linux-amd64-v0.3.0.tar.gz\nhttps://github.com/jwilder/dockerize/releases/tag/v0.3.0. Thanks @adrianlzt!\n. Thanks @AndreasAugustin!\n. Not reproducible w/ v0.3.0. Fixed via #94.  This is in v0.6.0.. Did you run glock sync -n < GLOCKFILE beforehand? \n. Thanks @breml!\n. Thanks @breml!. OK w/ me.  There was suggestion to add https://github.com/Masterminds/sprig in #44 which has math and many other funcs.\n. How about adding the the math functions directly to templates.go as you had suggested in the description?. Fixed via #72. I ended up merging/refactoring this in #69. Thanks @smaftoul!. @breml While sprig looks useful and has a lot of templates, I'd rather not add the dependency on it and just add the functions directly to this project that people need.. @breml Sorry for the confusion. My comment was only pointing out that another person had mentioned it since it seemed related.  I thought it would be able to be used directly, but the parameter ordering and semantic changes make that more complicated.. I believe if the dest file already exists and the permissions are set correctly, the generated file will retain the existing permissions.  So a workaround could be add the destination file in your docker image with the correct permissions set and then have dockerize overwrite it.. #57 does something similar and was merged.. @jmahowald Sure.  Can you rebase and update the description with some details about the enhancement you've made?. This should be in v0.3.0 release.. v0.3.0 is up.. Thanks @neiljain . That should already be supported.  I think the quotes is messing up the args.  Try:\ndocker-compose run --rm myservice dockerize -wait http://otherservice:8123 /bin/mycommand --param=value. Thanks @japsu! . Thanks @cloverstd!. This is has some cpu template helper functions which seem unrelated to the root issues as well as some changes to wait that I think are addressed by #86. . dockerize doesn't do anything with DNS resolution other than rely on the system configuration of it.  Sounds like something changed in docker 1.13 or compose 1.10 that caused this.  \nI'd suggest opening an issue with those projects.. Ugh.  HTTP(s) should have a delay if it fails.  Adding flag to control how much it waits is pretty straightforward.. Not reproducible w/ v0.3.0.. Fixed via #86 . There is a jwilder/dockerize base image that you can extend from.  Did that not work?. @mstrzele Ah... that makes sense.  . Thanks!. Thanks @ArturGajowy! . Thanks @PuKoren!. I pushed up a OS X binary here: https://github.com/jwilder/dockerize/releases/tag/v0.4.0. You just need go installed and you can run 'make deps' and then 'make'.  . It's -no-overwrite.  The default behavior is to overwrite the destination file.  -no-overwrite will cause the file to not be overwritten if it already exists.. Fixed.  Thanks.. What version of dockerize are you using?  I'm not able to repro this with the latest.. If you can build from master, I pushed up a change to use an updated hpcloud/tail library that might fix this.  . Going to assume this is fixed since I cannot reproduce as well.. I'm not sure who added it initially.  I agree that it would be nice to add it directly.. @kampka Please do not.  The fork that has been created is quite different than this project.  It also has questionable contributor practices in that anyone can become a contributor if they ask.  Considering this project is very popular and it typically runs as pid 1 in a container, this would open a potentially large security risk for users unknowingly.  See https://github.com/dominictarr/event-stream/issues/116 as a recent instance of this type of risk.. Sounds good @kampka. Thanks!. Not sure what changed off-hand.  I pushed up 0.4.0 and 0.5.0 tags.  I thought docker hub was building the tags automatically, but looks like that isn't working.. I think you can do \n{{ index .Env \"FOO\" }}\nThe template docs are the standard go text/template.  There is a range keyword for iteration as well.. Is there an updated needed for hpcloud/tail still?. @masterzen Thanks.  It looks pretty harmless to merge.. No way to do this currently.  #93 might handle this though.. Dockerize tries to change the permissions on the destination file to match the permissions of the template.  In the case where this is failing, what is permission of the template?. Might be related to #62 as well.. No way to do this currently.  #31 or #70 might handle this though.. There isn't a way to do this currently.  . What version are you running?. Also, when the CPU is pegged can you send the container/dockerize process a sigquit and attach the stack trace?. Thanks @sychan!. I think this was created in the wrong repo.. Pushed.. Yes.  This project is still maintained.  It has been stable for awhile so adding new features is not done lightly as I place a high value on backwards compatibility, stability and security. \nThe fork that has been created is quite different than this project. It also has questionable contributor practices in that anyone can become a contributor if they ask. Considering this project is very popular and it typically runs as pid 1 in a container, this would open a potentially large security risk for users unknowingly. See dominictarr/event-stream#116 as a recent instance of this type of risk.\nBecause of this, I do not feel comfortable linking or referring to that fork.  I\u2019d recommend renaming that project to more strongly indicate it has different goals and that it is not the same as this project.. Seems like this should check to make sure a 200 response is returned.  What if a 404 or 500 is returned by the dependency? \nYou an also specify a timeout using a custom http.Client and/or Transport.\n. I think you can just do:\n\"atoi\": strconv.Atoi,\nand remove the func on L67.\n. strings.ToLower is not needed because ParseBool already handles 't' and 'true'.\n. Can you change bool string to s string?\n. Should probably call strings.Trim on both parts.\n. -header might not be intuitive since this option is specifically for -wait and only applies to the http waits.  \nMaybe something like -wait-http-header or -wait-header and the value as http:\"Accept-Encoding:gzip\" perhaps.  That might be easier to understand that it's specifically for wait and allow for the possibility headers for other protocols.\n. -wait-http-header\n. Why was this removed?\n. Ah, you moved it down here.\n. Could you move this whole block L241-L262 to a separate func like generateDir?. You can use filepath.Join(template, file.Name) here. Ditto: file path.Join(...) for these.. Needs a defer ticker.Stop(). This error check looks wrong.  I think you want err == nil here and then don't log an error if the err is os.IsNotExist.  Any other error, you would want to log.. ",
    "ianneub": "Yes that is correct, the tail'ing is what keeps dockerize running. Sorry I didn't mention that.\nAn issue I didn't consider though is cross platform portability. To get the exit status code requires a call to Sys, which is OS specific.\nMy golang-fu is weak in that area. Would it be ok to make this Unix only? If not, no worries.\n. Actually it seems that at least both Unix and Windows define the same ExitStatus function:\nhttp://stackoverflow.com/questions/10385551/get-exit-code-go\nSo it will support at least those two OSes.\n. @jwilder Sorry to bother.. just wanted to see if you still wanted to merge this? I've also got another change coming to deal with signals better.\n. ",
    "taybin": "I'd love to see this.\n. ",
    "powerman": "There are a lot of ways to implement this with shell, e.g. (assuming log file names doesn't contain spaces):\n$ ls *.log\n1.log  2.log  3.log\n$ echo dockerize $(ls -1 *.log | sed 'i-stdout')\ndockerize -stdout 1.log -stdout 2.log -stdout 3.log\n$ echo dockerize $(ls *.log | xargs -n 1 echo -stdout)\ndockerize -stdout 1.log -stdout 2.log -stdout 3.log\nIn any case, if this issue is still actual and proposed solution won't work for you please consider opening issue in fork https://github.com/powerman/dockerize. Already merged in https://github.com/powerman/dockerize. > I've submitted a PR that supports this functionality.\n\u2026 and that PR was merged in fork https://github.com/powerman/dockerize.\n@willseward That PR implement support for loading defaults for env variables from INI file, which isn't exactly the same what you've asked for, but it may work for you. If this won't solve your issue then please consider opening issue in fork repo, but, to be honest, I doubt adding ability to load another one type of config files is a good idea.. This is already implemented and actually a default behaviour in fork https://github.com/powerman/dockerize. Maintenance and development now happens in fork https://github.com/powerman/dockerize.\n\n\ndefaultEmpty $var $default - Returns a default value for one that does not exist or is empty in case of string. {{ default .Env.VERSION \"0.1.2\" }}\n\n\ndefault already works this way, except order of params:\nsh\n$ unset UNSET; EMPTY=\"\" SPACE=\" \" dockerize -template /dev/stdin <<'EOF'\n[{{ default \"unset\" .Env.UNSET }}]\n[{{ default \"empty\" .Env.EMPTY }}]\n[{{ default \"space\" .Env.SPACE }}] \nEOF                               \n[unset]\n[empty]\n[ ]\n\n\nrequired $val Returns a value passed as argument or error if value does not exist. {{ required .Env.VERSION }} \nrequiredEmpty $val Returns a value passed as argument or error if value does not exist or is empty in case of string. {{ requiredEmpty .Env.VERSION }} \n\n\nThese can be added, but to me it looks like right way to get error because of non-existing environment variable is to enable Option(\"missingkey=error\") - this way it'll work automatically for all environment variables used in template, and you don't have to do anything manually. I plan to add new flag -template-strict which will enable that option.\nAlso current version provides empty and fail functions which you may find useful too.\nFeel free to open PR at https://github.com/powerman/dockerize if you need something else and proposed flag and empty function doesn't do what you need (but please first review existing functions provided by Sprig).\n\n\nenvSlice - Returns the array filled with maps of environment variables passed as collection (variables that contains numeric suffix) and matched to $prefix {{ envSlice \"VARIABLE_NAME\" }}\n\n\nThis one is unique enough, but there are other functions which may do similar things:\n- splitList, split and regexSplit let you get multiple values from single env var if you can use some unique separator between values.\n- jsonQuery is much more powerful if you can store JSON inside env variable.\nIf proposed alternatives won't work for you then we can add envSlice at https://github.com/powerman/dockerize.. Already merged in https://github.com/powerman/dockerize (except set UID/GID feature).. @kampka You may like to switch Alpine package to fork https://github.com/powerman/dockerize - it's up-to-date and have tests. :smile: You can read whole story about this fork in https://github.com/jwilder/dockerize/issues/120. This is fixed in fork https://github.com/powerman/dockerize: all you need is to install curl in alpine/debian/ubuntu and use wget -O - instead of curl in busybox.\n``\n$ docker run -i -t --rm alpine\n/ # apk add curl && curl -sfL https://github.com/powerman/dockerize/releases/download/v0.9.1/dockerize-uname -s-uname -m` | install /dev/stdin /usr/local/bin/dockerize && dockerize -version\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.8/main/x86_64/APKINDEX.tar.gz\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.8/community/x86_64/APKINDEX.tar.gz\n(1/5) Installing ca-certificates (20171114-r3)\n(2/5) Installing nghttp2-libs (1.32.0-r0)\n(3/5) Installing libssh2 (1.8.0-r3)\n(4/5) Installing libcurl (7.61.1-r1)\n(5/5) Installing curl (7.61.1-r1)\nExecuting busybox-1.28.4-r1.trigger\nExecuting ca-certificates-20171114-r3.trigger\nOK: 6 MiB in 18 packages\ndockerize v0.9.1 go1.11.2\n$ docker run -i -t --rm debian\nroot@9f45fd80bef6:/# apt update && apt install -y curl && curl -sfL https://github.com/powerman/dockerize/releases/download/v0.9.1/dockerize-uname -s-uname -m | install /dev/stdin /usr/local/bin/dockerize && dockerize -version\n...\nSetting up curl (7.52.1-5+deb9u8) ...\nProcessing triggers for libc-bin (2.24-11+deb9u3) ...\nProcessing triggers for ca-certificates (20161130+nmu1+deb9u1) ...\nUpdating certificates in /etc/ssl/certs...\n0 added, 0 removed; done.\nRunning hooks in /etc/ca-certificates/update.d...\ndone.\ndockerize v0.9.1 go1.11.2\n$ docker run -i -t --rm ubuntu\nroot@e2627c7b841d:/# apt update && apt install -y curl && curl -sfL https://github.com/powerman/dockerize/releases/download/v0.9.1/dockerize-uname -s-uname -m | install /dev/stdin /usr/local/bin/dockerize && dockerize -version\n...\nSetting up curl (7.58.0-2ubuntu3.5) ...\nProcessing triggers for libc-bin (2.27-3ubuntu1) ...\nProcessing triggers for ca-certificates (20180409) ...\nUpdating certificates in /etc/ssl/certs...\n0 added, 0 removed; done.\nRunning hooks in /etc/ca-certificates/update.d...\ndone.\ndockerize v0.9.1 go1.11.2\n$ docker run -i -t --rm busybox\n/ # wget -O - https://github.com/powerman/dockerize/releases/download/v0.9.1/dockerize-uname -s-u\nname -m | install /dev/stdin /bin/dockerize && dockerize -version\nConnecting to github.com (192.30.253.113:443)\nwget: note: TLS certificate validation not implemented\nConnecting to github-production-release-asset-2e65be.s3.amazonaws.com (52.216.176.139:443)\nwget: note: TLS certificate validation not implemented\n-                    100% |**********| 9371k  0:00:00 ETA\ndockerize v0.9.1 go1.11.2\n. Already fixed in fork https://github.com/powerman/dockerize. Already merged in https://github.com/powerman/dockerize. Up-to-date version is available in fork https://github.com/powerman/dockerize and also there is docker image https://hub.docker.com/r/powerman/dockerize/:sh\n$ docker run -i -t --rm powerman/dockerize -version\ndockerize v0.9.2 go1.11.2\n```. Fork https://github.com/powerman/dockerize provides a lot of new functions, e.g. you can try to use uuidv4 or one of cryptographic functions. If these won't fit your needs please consider opening issue or PR in fork's repo.. I've just created new fork https://github.com/powerman/dockerize, designed as community replacement for original version until @jwilder will returns to work on original version.\n\nI've updated build to use Go 1.11 modules and automated binary releases using CI (automated docker releases are also available).\nI've merged @sychan fork and updated README to reflect changes (except -euid and -egid flags: there are existing tools for switching users, and it's much better to use these tools - they are more sophisticated and have well-known behaviour).\nI've merged @presslabs fork and updated README to reflect changes (cc: @calind). This adds some incompatibilities on template functions, but I've documented it and in general I think adding so many template functions worth it.\n\nVersion v0.7.0 was released with all these changes.\nI'll be glad to add @sychan, @calind and other people as collaborators if they like to continue work using this fork (also I'm ready to convert repo from my personal to org and share admin privileges, if this will makes sense).\nPlease let me know if there are other forks or PRs with important changes which you like to see merged.. * I've merged feature-related changes from @moshloop fork and updated README to reflect changes.\n Features added in @danstiner, @dcrobbins, @bahlo forks are already included.\n Features added in @jmahowald fork are probably included too, but I'm not 100% sure.\nVersion v0.8.0 was released with all these changes.. > Did you go through the currently open PRs in this repo?\nYeah, I've checked both PRs and most of forks, but handled only ones which was ready to merge as is. I'm planning to handle rest of PRs and issues in this repo after I'll finish with project cleanup and refactoring - to make it easier to maintain it and make it testable it needs to be refactored first.\nI've spend last days to replace tail -f implementation - old one had some race condition issue, few bugs and shortcomings which was really hard to fix in existing code base. I've checked other available implementations and was really surprised because they also have race condition issues and will lose lines under some conditions. So, I decide to implement reliable solution myself. This task looks deceptively trivial but in practice it's full of hidden issues. So it take more time than I expect to implement it from scratch and test. To me it looks correct, but as this task has already proved it's not easy to do right I'll be happy if someone will review it, just in case.\nI've tried to contact @jwilder at LinkedIn, but he didn't reply. Only communication channel left is https://twitter.com/jaswilder, but I don't have Twitter account - maybe you'll be able to reach him there?. I've tried hard to refrain from making incompatible changes while this refactoring, but some changes was required to fix weird behaviour.\nLet me know if you believe old behaviour was more useful/correct.\n\nflags: -wait-http-header now support file with header, to make it consistent with -env-header.\nflags: Improve help messages and use more strict validation.\ntemplate: Fix chmod/chown generated files to match template files. (This may solve @xmlking issue.)\ntemplate: Fix rendering directory with templates to stdout.\ntail: Changed to start from current file position (work as tail -n 0).\ntail: Fixed to ensure it'll open existing files before running command.\ntail: Fixed to become more reliable and don't lose lines.\ntail: Logged messages mimics tail tool.\ncommand: Add forwarding for SIGQUIT, SIGABRT, SIGUSR1, SIGUSR2, SIGALRM.\ncommand: Add forwarding for SIGKILL (Linux only).\ncommand: Don't send SIGKILL in 10s after forwarding HUP/INT/TERM.\ncommand: Minimize possible conflict with dockerize exit code by using code 123 instead of 1 when dockerize itself has failed.\nImprove logging to make it more consistent.\nHuge refactoring to make code testable, simpler and easier to maintain.\nAdd two hundred tests to check basic functionality.\nA lot of other minor cleanup and improvements.\n\nVersion v0.9.0 was released with all these changes.\nI consider code base stable now, no more large refactoring planned, so feel free to make changes you need. Next plans are:\n- review issues and PR in this repo\n- add more tests :smile: (badge in README report coverage 7% but I believe it's actually about 80% - most current tests just run executable with different flags instead of calling functions, and coverage report ignores these tests)\n- add flag -template-strict to activate Option(\"missingkey=error\") on templates\n- consider adding flag -exec to replace dockerize process with given command (if there are -stdout or -stderr flags then run tail as child process) - this should let us run command as PID1 and avoid subtle issues related to signal forwarding etc.). Probably this should be closed (for same reason as in https://github.com/powerman/dockerize/pull/3#issuecomment-440205514).. I'm not sure I understand your English. Can you please try latest version from fork https://github.com/powerman/dockerize and open new issue there if you still have this issue?. ",
    "xmlking": "@jwilder Well, this can generate translated files in a  directory,  it would be nice to rename destination files e.g., kubernetes-realm.json.tmpl to kubernetes-realm.json\nI also have usecase where I have to rename the destination filename.  would be nice to provide ability to customize generated filenames also with Env params. \nCMD [\"dockerize\", \"-template\", \"/opt/jboss/keycloak/realm-config/default-realm.json.tmpl:/opt/jboss/keycloak/realm-config/{{ .Env.REALM }}-realm.json\", ... ]. I have same issue. \nDockerize could be great  use for OpenShift users if it can check  files has permissions before trying to chmod.   we have files already have 777,  but failing due to this issue. . Created fork and build files are available @ https://github.com/xmlking/dockerize/releases\nHere is how I am  using:\nxmlking/openshift-nginx:1.13.9-alpine  is based on nginx:1.13.9-alpine with dockerize \n```Dockerfile\nFROM nginx:1.13.9-alpine\nLABEL maintainer=\"NGINX for non-root platform: OpenShift\"\nRUN set -x \\\n    && chmod go+w /var/cache/nginx \\\n    && sed -i -e '/listen/!b' -e '/80;/!b' -e 's/80;/8080;/' /etc/nginx/conf.d/default.conf \\\n    && sed -i -e '/user/!b' -e '/nginx/!b' -e '/nginx/d' /etc/nginx/nginx.conf \\\n    && sed -i 's!/var/run/nginx.pid!/var/cache/nginx/nginx.pid!g' /etc/nginx/nginx.conf\nENV DOCKERIZE_VERSION v0.6.1\nRUN wget https://github.com/xmlking/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz\nEXPOSE 8080\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n``` \nMy Angular Build :\n```Dockerfile\nSTAGE 1: Build\nWe label our stage as 'builder'\nFROM node:9 as builder\nFROM node:9-alpine as builder\nCOPY package.json package-lock.json ./\nRUN npm set progress=false && npm config set depth 0 && npm cache clean --force\nStoring node modules on a separate layer will prevent unnecessary npm installs at each build\nRUN npm i && mkdir /ng-app && cp -R ./node_modules ./ng-app\nWORKDIR /ng-app\nCOPY . .\nBuild the angular app in production mode and store the artifacts in dist folder\nRUN $(npm bin)/ng build --app=default --prod -oh=media\nSTAGE 2: Setup\nFROM xmlking/openshift-nginx:1.13.9-alpine\nCopy our nginx config template\nCOPY .docker/nginx.conf.tmpl /etc/nginx/conf.d/nginx.conf.tmpl\nRemove default nginx website, make default.conf writable by OpenShift's user\nRUN set -x \\\n    && rm -rf /usr/share/nginx/html/* \\\n    && chmod go+w /etc/nginx/conf.d/default.conf\nFrom 'builder' stage copy over the artifacts in dist folder to default nginx public folder\nCOPY --from=builder /ng-app/dist/apps/default  /usr/share/nginx/html\nEXPOSE 8080\nHEALTHCHECK --interval=5m --timeout=3s CMD curl --fail localhost:8080 -O /dev/null || exit 1\nCMD [\"dockerize\", \"-template\", \"/etc/nginx/conf.d/nginx.conf.tmpl:/etc/nginx/conf.d/default.conf\", \"nginx\", \"-g\", \"daemon off;\"]\n```\nnginx.conf.tmpl\n```conf\nmap $http_upgrade $connection_upgrade {\n  default upgrade;\n  ''      close;\n}\nserver {\n  listen {{ default .Env.NGINX_PORT \"8080\"}};\nserver_name {{ default .Env.NGINX_HOST \"localhost\"}};\nlocation / {\n    root /usr/share/nginx/html;\n    try_files $uri $uri/ /index.html =404;\n    index index.html;\n    gzip on;\n    gzip_types text/css text/javascript application/x-javascript application/json;\n  }\nlocation /auth/realms {\n    proxy_pass {{ .Env.AUTH_BASE_URL }};\n    proxy_redirect off;\n  }\n}\n```. ",
    "jsoriano": "It's useful if facter is installed (it can easilly be if puppet was used for provisioning) and the software needs information of the docker in runtime as networking data. Take into account that e.g. networking is set up when the docker is started, so the host had to somehow predict the result if it were to be configured with environment variables.\nAnd if facter is not installed in the docker, then it does nothing.\nIt also opens the gate to add other contexts provided by other provisioning tools.\n. ",
    "robbertkl": "Yes, I'm aware of the exec form (and the consequences). Awesome job on the improvements / fixes, I'll give them a spin soon!\n. ",
    "oryband": "@doodyparizada\n. i understand now that i was missing the app to be executed after the template finished processing.\nthe help line is a little misleading:\n$ dockerize -h\nUsage of dockerize:\n  -delims string\n        template tag delimiters. default \"{{\":\"}}\"\n  -stderr value\n        Tails a file to stderr. Can be passed multiple times\n  -stdout value\n        Tails a file to stdout. Can be passed multiple times\n  -template value\n        Template (/template:/dest). Can be passed multiple times\n  -version\n        show version\n- i'm missing an \"how to execute\" line at the top of the help file\n- also, i'd like to have a way to just generate a template without executing anything\n. Right now I'm bypassing this by passing true to the app part of the command, practically making dockerize execute a no-op:\n``` bash\n$ docker -template x:y true && my_app\ninstead of doing this, which is undesirable in my case:\n$ docker -template x:y my_app\n```\nHowever, this is a hack. This is sometimes necessary because letting dockerize execute the app can sometimes create problems and errors. For example when SIGTERMing.\nIt feels like dockerize is trying to achieve two things at once, instead of going the unix way: Splitting the features into two separate tools, which can be bundled together if necessary. wdyt?\n. @jwilder thanks!\nhowever, I think adding an example of the hack I did above is a good idea (providing true as a command). Some people (like myself) would only like to use the templating feature of dockerize, without the execution part. If we're keeping the command as required, we should at least provide an example how to bypass it.\n. @md5 I did at first, but it requires mounting the docker socket file in order to fetch environment variables. This is kinda overkill for the purpose of templating.\nThere is no other golang cli template tool available beside these two tools.\n. @md5 why are you talking to yourself? :)\n. ",
    "doodyparizada": "I know it's not backward compatible, but I would prefer that dockerize's default behaviour would be to not expect a command be given (i.e. default -dry-run) so it just renders the template. If you want to give a command, you would have to specify --command=\"XXX XXX\"\n. ",
    "0atman": "Do I need some kind of go standard library?\n. Could this be causing trouble?\n/var/log/nginx# ls -al\ntotal 8\ndrwxr-xr-x 2 root root 4096 Oct 28 22:01 .\ndrwxr-xr-x 9 root root 4096 Nov 10 15:06 ..\nlrwxrwxrwx 1 root root   11 Oct 28 22:01 access.log -> /dev/stdout\nlrwxrwxrwx 1 root root   11 Oct 28 22:01 error.log -> /dev/stderr\n. If I leave off -stdout /var/log/nginx/access.log -stderr /var/log/nginx/error.log it runs (though I'm not sure yet if it works)\n. Oh! the offical docker nginx repo makes these links:\nhttps://github.com/nginxinc/docker-nginx/blob/4e5332fa50a1f8f73657417c6bfe249bbb3b110d/Dockerfile#L15\nRUN ln -sf /dev/stdout /var/log/nginx/access.log\nRUN ln -sf /dev/stderr /var/log/nginx/error.log\nIs that what's causing the failure?\n. Can confirm that replacing the links with regular files fixes the stacktrace, when using -stdout /var/log/nginx/access.log -stderr /var/log/nginx/error.log\n. ### Proposed fix:\nDefensively code the part that redirects log files to stdout/error.\n. I'd do it, but I'm no go pro!\n. ",
    "sstarcher": "Could this be related to overlayfs?\nhttps://bugs.launchpad.net/ubuntu/+source/linux/+bug/882147\nhttps://github.com/docker/docker/issues/11705\n. ",
    "madyanov": "RUN ln -sf /dev/stdout /var/log/nginx/access.log\nRUN ln -sf /dev/stderr /var/log/nginx/error.log\nIt's have same effect like dockerize's -stdout /var/log/nginx/access.log -stderr /var/log/nginx/error.log, but the ln -sf way is better, because dockerzie don't cleans already forwarded lines from logs and container continues growing.\n. Fixed. Use ln -sf /dev/stderr /var/log/hhvm/error.log instead of dockerize forwarding functionality.\n. ",
    "sunxiaoguang": "Conflicts fixed. \nPlease let me know if there are other reasons that this pull request shouldn't be merged, thanks.\n. Well, setrlimit can only change resource limit of current process and all descendants. However the control group namespace under the hood of docker actually only start from entry point or whatever the process you actually run when you start container. So a ulimit setup in RUN step wouldn't last longer enough to make it work when you start container. \n. If you meant run ulimit actually at entry point, then it would be something like this, which definitely works, but looks strange and have to escape arguments carefully\nENTRYPOINT /bin/bash -c \"ulimit -c unlimited && dockerize -template abc.template:abc.conf testapp 'long arg1' 'long arg2' \"\n. @jwilder Excuse me, in case you haven't seen the reply I sent out earlier.  Any comment is welcome. \n. I see want you mean now. There is a ulimit command line flag for docker run, so I can change ulimit from there. Sorry.\n. ",
    "thaJeztah": "ping @jwilder looks like this PR has been updated; ptal :+1: \n. ",
    "mefellows": "Thanks! :tada: \n. No worries at all - do I need to do anything to get this 'released' or will you look after that in due course?\n. Awesome, thanks!\n. Good point, I originally interpreted the err to mean non-20x. This is fixed.\n. RE: timeout. I did consider this, but felt the added complexity wasn't going to give us much given we check the timeout of the entire set of dependencies anyway. Let me know if you would prefer it the other way.\n. ",
    "metmajer": "Never mind, just observed there is -timeout.\n. Resolved with PR #26.\n. Welcome @jwilder! Can you please craft a release?\n. Don't release for now, implementation is flawed: for udp-like schemes net.DialTimeout returns immediately even if the port is not open. Unfortunately, err is always nil. Going to have a look into it. Feel free to revert and I'll submit a PR again if I can make it happen.\n. ",
    "metamode": "Ah, no, this is no different. I skipped over that portion of the template documentation and didn't notice it... thanks for pointing it out.\nPlease close this PR.\n. True! Fixed this.\n. ",
    "lmesz": "Sorry It was just a PEBKAC. Everything works as it is expected.\n. ",
    "wilsonmar": "It would help if a performance benchmark study would measure the performance impact of using various Dockerize features, such as templating.\n. ",
    "atopuzov": "Not sure if mine is related so I opened a new issue https://github.com/jwilder/dockerize/issues/81. I tried touching the file, appending content to the file, deleting the file, creating new file. Still seeing high CPU utilisation. \nI guess I should be probably rising an issue with https://github.com/hpcloud/tail. @ghostsquad I'm not using dockerize anymore. Found a way to configure the app to log to stdout instead.. @ghostsquad You are right! Sorry about that.. @ghostsquad Nope, we used it only for logging.. ",
    "basz": "when I have this\n\"-stdout\",  \"/var/log/nginx/access.log\", \n        \"-stderr\", \"/var/log/nginx/error.log\",\ntwo cpu are running 100%\nremoving either one frees one cpu.\nremove both and things are normal.\nThis is on my mac (local), but also on an ubuntu production machine...\n. ",
    "jak": "I had exactly the same issue, only affecting one of two project despite having the same base image and same dockerize command running.\nThe only difference I found was one project was removing the log file before dockerize ran. Changing this, I no longer experience this problem.. ",
    "stepankuzmin": "I have the same issue. Removing lines below helps.\n\"-stdout\",  \"/var/log/nginx/access.log\", \n\"-stderr\", \"/var/log/nginx/error.log\",. ",
    "ghostsquad": "@stepankuzmin is this fixed in the newest version of Dockerize? It looks like the hpcloud/tail has been updated in the latest version.. @atopuzov is this still an issue? I'm curious if I'm going to run into this problem. I see that 0.6.0 of dockerize was released 13 days ago with an update to hpcloud/tail. @atopuzov you can probably close this issue then. :). @atopuzov just curious, do you still use dockerize for it's other (non-log) features?. ",
    "cedriessen": "This commit also makes lower and uppercase functions available as lower and upper.\n. Formatted the code.\n. I wanted the function to return true regardless of the spelling, i.e. \"TRUE\", \"tRuE\", etc. should also return true. Does that make sense?\n. Done.\n. ",
    "myniva": "What is the status on this? The changes look quite nice would help me solve some current issues.\n. ",
    "driverpt": "@ColinHebert Doesn't that work with Env Variables?\n. ",
    "NickClark": "Using the following workaround for now:\ndockerize -wait tcp://$(getent hosts db | cut -d \" \" -f 1):5432 -timeout 20s\n. ",
    "ismarslomic": "@NickClark: I have related issue, see #63 . Did you experience same thing, and do you possibly have an workaround?\n. I guess this is because links are deprecated in Docker Compose v2. https://docs.docker.com/compose/link-env-deprecated/\n. ",
    "binhnv": "I am having the same issue with any Docker version that is newer than 1.12.5. The issue was not because of default network since I am not using it.\nIt turns out it was because of the timeout. I set timeout to 2s and it has been working fine with Docker for Mac version 1.12.5 or older versions but it did not work on newer versions. For newer versions I changed timeout to 10s and it works fine again.. ",
    "Razz": "Giving the author's previous comments, he's going to ask you to go-fmt this, if he ever gets to these PRs. Also you might want to your flag to the readme.\n. ",
    "aacebedo": "done. Hope the author will integrate my PR\n. ",
    "aindlq": "Sorry, my bad. Found similar issue https://github.com/jwilder/dockerize/issues/12\n. ",
    "ludovicc": "Sprig is a library of Go template functions, it could be used here.\nhttps://github.com/Masterminds/sprig\n. Adding the sprig functions with prefix is probably the safest choice here.\n. ",
    "w4tson": "The renamed option will apply to all -wait options. If there's no -wait but a -wait-http-header is supplied then it will fail sensibly. \n. Cool. done\n. errrr, I have now.\n. ",
    "fakraemer": "Yes it can. I assume you know this already by now, just posting this here in case someone else runs over the issue:\n```\nFROM alpine:3.4\nENV DOCKERIZE_VERSION v0.2.0\nRUN apk update && \\\n    apk add --no-cache ca-certificates wget tar && \\\n    wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && \\\n    tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && \\\n    apk --purge del tar && \\\n    rm -rf /var/cache/apk/*\nENTRYPOINT [\"dockerize\"]\n```\n. ",
    "tkaria": "For those arriving here with problems running on alpine please note that the above works perfectly but the version as of today has been bumped to 0.3.0 so you'll need:\nENV DOCKERIZE_VERSION v0.3.0 . ",
    "emathias": "OK, from a mac I could successfully cross compiled it.  \nYet another newbie problem  ;)\nAnd thanks for the project. Really useful!\n. ",
    "emonterodelrio": "+1 my dns will thank you\n. ",
    "tmoreira2020": "hey @jwilder do you have any plan do release this feature? I need it hard!. ",
    "efenderbosch": "I'm not exactly sure why, but changing my ENTRYPOINT fixed this.\nENTRYPOINT [\"dockerize\", \"-template\", \"nginx.tmpl:nginx.conf\", \"/usr/local/openresty/bin/openresty\", \"-g\", \"daemon off;\"]\n. ",
    "breml": "I just updated the GLOCKFILE. As it seem, the GLOCKFILE was already outdated on master. If I update the GLOCKFILE on master, I get the following diff:\ndiff\ndiff --git a/GLOCKFILE b/GLOCKFILE\nindex ce0e0ab..2cf08ca 100644\n--- a/GLOCKFILE\n+++ b/GLOCKFILE\n@@ -1,4 +1,7 @@\n+github.com/fsnotify/fsnotify f12c6236fe7b5cf6bcf30e5935d08cb079d78334\n+github.com/go-fsnotify/fsnotify f12c6236fe7b5cf6bcf30e5935d08cb079d78334\n github.com/hpcloud/tail 05d326f7170255d4f0c2a57dd00268b9beeb6e59\n golang.org/x/net 972f0c5fbe4ae29e666c3f78c3ed42ae7a448b0a\n+golang.org/x/sys 8f0908ab3b2457e2e15403d3697c9ef5cb4b57a9\n gopkg.in/fsnotify.v0 ea925a0a47d225b2ca7f9932b01d2ed4f3ec74f6\n gopkg.in/tomb.v1 c131134a1947e9afd9cecfe11f4c6dff0732ae58\nThe remaining changes in GLOCKFILE are due to my feature.\n. And sorry I forgot to update the GLOCKFILE, I did not know this tool as I mostly use glide for vendoring.\n. Yes, I did. That is the reason why only new dependencies are added in the GLOCKFILE and no existing dependencies are changed.\n. @jwilder do you need something else for this PR to be merged?\n. @jwilder just updated the README.\n. @jwilder is there still something missing for this PR to be merged?\n. @jwilder could you please join and let us know what do you think about this PR and #64 and how you want us to precede.\n. @jwilder would love to get some feedback.\n. @jwilder I have updated the README, as you asked me to do. how do you want me to proceed?. @jwilder just implemented your suggestions.. @jwilder https://github.com/Masterminds/sprig looks like a good suggestion. My current requirements would be covered.\nThe main question for me is how handle the overlapping in the functions. There are some duplicates in the function names (e.g. contains, default, add, lower, upper), in some cases with slightly different functionality. I can think of the following options:\n1. Add the sprig functions to the template after the current functions: this breaks backwards compatibility as the sprig functions overwrite the current functions.\n2. Add the sprig functions to the template before the current functions: not all sprig functions are available, in some cases the processing would seem awkward (function add is provided by dockerize where all other arithmetic functions are provided by sprig).\n3. Add the sprig functions with a prefix (sprig function add would become sprig_add or sprigAdd)\nIn my opinion we should go for option 3 (which prefix variant should we take?).\nWhat do you think?\n. @ludovicc @dbeckham: As it would solve #44 as well, what do you think?\n. Just added a first version of a PR for the sprig functions with prefix. What do you think. If we agree on this implementation, I will also update the README accordingly.\n. @jwilder With #61 being closed, I am not sure, how to proceed with my requirement for basic arithmetic. Any suggestions?. @jwilder just resolved the merge conflicts for this PR and updated the README.md.\n. @jwilder I would appreciate to get some feedback on this PR. Thanks.\n. @jwilder would love to get some feedback.\n. @jwilder could you please give me some feedback on this PR (if you don't have any interest, this is fine too, but please tell me so). @jwilder A little bit surprising for me, because the initial suggestion to use sprig was coming from your self (https://github.com/jwilder/dockerize/issues/58#issuecomment-250194321), but I accept it, since it is your project.. ",
    "jmahowald": "doh, should have checked before I coded .\n@breml  I also created https://github.com/jwilder/dockerize/pull/64.\nMaybe we take my tests and use your implementation and readme?\n. I do think there are a couple of things that I had done that are still useful. I merged the change from @breml and made a minor enhancement to make it able to walk a whole directory tree, and added in the unit tests that I had created. \nCan we reopen/merge or would you be open to me creating a new one?\n. I made a mess of the rebase so just created a new clean pull. Can we do https://github.com/jwilder/dockerize/pull/70 instead?  Same commits, but I just manually \"rebased\" them. @jwilder can we merge this in? . @jwilder was just using and noticed that it could only go one directory deep.  Could we do this/update it to allow that?. @jwilder since it looks like the original and powerman's dockerize will split, could we addd this in/do you want me to update it?. @powerman I've been using your template changes and really like them and the changes you made to the overall health of the code base, with tests, etc.  But I agree with @jwilder .  The change of the order of operations of several functions, even while documented can easily create confusion.  I think that most of the other non template functions in this project don't need a lot of love, but you've made a a very easy to use template library. dockerize-template maybe? . ",
    "kramarz": "I am also loking for this feature simply because i have sites_enabled in my nginx, and everyone of them i need to transform into a template. Glad there is PR already.\n. ",
    "smaftoul": "Also, we might add \"unixgram\" and \"unixpacket\" schemes, but I'm not sure how it works ...\n. @jwilder thank you !. ",
    "matchatype": "Bumped into this as well. Any work around?. ",
    "robshep": "I was looking for a similar solution so the question should read \"How to read json content from file instead of .Env\"\nI can't see that it's possible in docker{-compose} to ask for file contents as an Env value.\nI also can't see how to ask GoLang templates to use a file as content instead of just referencing and Env key\nIn my use case, I want to take the acme.json file from traefik and parse it with jsonQuery to extract certs and keys for delivering to another service (pgbouncer) TLS config.\n. ",
    "sfrique": "Sub dir would be nice. ",
    "japsu": "&& is a shell feature, not that of exec. You are basically expecting dockerize to run a shell script instead of a single command.\nTry dockerize -wait tcp://db:5432 /bin/sh -c \"pg-migrator postgres://db && postgraphql --watch\".. ",
    "sychan": "I've submitted a PR that  supports this functionality.. @jwilder Any chance of merging this?. We recently needed the ability to set the effective UID and GID. This can be used to drop privileges after doing some initial setup as root, or if you need to set the group ID in a way that isn't vulnerable to changes in docker-compose file specifications.\nUse the -egid and -euid flags - both take integer values.. ",
    "tpetry": "This is really usefull if you restart a container because at the moment dockerize will print all old logging information on stdout/stderr again.. ",
    "sivabudh": "The exact same question I'm here for. \ud83d\ude38 . Actually, I dug into the source code, and I think it's \"not possible\" (at the moment anyway). 5 second was hardcoded.\nSee:\n\n. For what it's worth, I replaced dockerize completely by using docker-compose version 2.1 healthcheck feature instead.\nRef: http://stackoverflow.com/a/41854997/65313\nSomething like this:\nversion: '2.1'\nservices:\n  some_service:\n    ...\n    depends_on:\n      another_service:\n        condition: service_healthy\n  another_service:\n    ...\n    healthcheck:\n      test: curl -f http://another_service:<another_servicer_port_number>\n      interval: 1s\n      timeout: 1s\n      retries: 10\n(some_service waits for another_service to be ready (healthy)). ",
    "pjakubczyk": "@sivabudh it's only for tcp connections. http(s) option hasn't got such sleep.. ",
    "danielcompton": "Just a note that docker-compose 3 has removed support for depends_on, and they now recommend using dockerize or other similar tools.. ",
    "mstrzele": "No, unfortunately, I cannot change the base image (I'm using node:alpine and php:alpine).. ",
    "mrmachine": "@jwilder Thanks for this. Any chance you could document how to build it (for future releases)? Or maybe even add a formula to Homebrew? Or I could try that, if I knew how to build it on macOS.\nI ask about Homebrew because we run our projects and deploy with Docker, but we also run them locally for development natively and still make use of dockerize in that scenario. We install all our other dependencies when running natively via Homebrew, so having dockerize available on Homebrew would make it easier for our devs to get up and running without Docker.. ",
    "scobiej": "Well, I have tried unsetting GOPATH, setting it to the root of the project etc. etc. with no joy. This is what I get (running in native OSX and also an alpine 3.7 image) ...\n83221b80b135:~/go$ git clone https://github.com/jwilder/dockerize.git\nCloning into 'dockerize'...\nremote: Counting objects: 381, done.\nremote: Total 381 (delta 0), reused 0 (delta 0), pack-reused 381\nReceiving objects: 100% (381/381), 86.91 KiB | 556.00 KiB/s, done.\nResolving deltas: 100% (206/206), done.\n83221b80b135:~/go$ cd dockerize/\n83221b80b135:~/go/dockerize$ make deps\ngithub.com/elgs/gosplitargs                        e9cf3de21e14 [OK]\ngithub.com/hpcloud/tail                            faf842bde7ed [OK]\ngithub.com/jwilder/gojq                            81fa9a608a13 [OK]\ngolang.org/x/net                                   749a502dd1ea [OK]\n83221b80b135:~/go/dockerize$ make\nBuilding dockerize\ngo install: no install location for directory /home/scobiej/go/dockerize outside GOPATH\n    For more details see: 'go help gopath'\nmake: *** [Makefile:15: dockerize] Error 1\n83221b80b135:~/go/dockerize$ go version\ngo version go1.10.1 linux/amd64\n83221b80b135:~/go/dockerize$. ",
    "daniele-athome": "Sorry, I was misled by the README (didn't look at the inline help). Will you fix the README?. Using v0.5.0. Just tried with a simple bash script to reproduce this test case:\n```\n!/bin/bash\nsleep 3\necho \"hello\" >log\nsleep 0.5\necho \"world\" >>log\nsleep 1\necho \"!\" >>log\n```\nAnd then run it (even outside of docker) like this:\n./dockerize -stdout log ./test.sh\nOutput is not displayed at first start because the log file will be created after 3 seconds, similar to my application (which creates the file moments after start, nevertheless it's not picked up by dockerize).\nI don't know if this is expected behaviour by dockerize, I believe you could either:\n\nwait for the file to appear somehow (maybe inotify gives you that feature? I don't really know)\nadd a command line argument to tell dockerize how much time to wait before attaching to the log file\nexit with error because the file doesn't exist prior to executing the child command\n\nUsing -poll works, but it has the side effect that in the above test script the last line is not printed out (I know it's a minor drawback, I'm pointing it out anyway).\nWhat do you think?. In the meantime... I discovered that actually touching the log file before start would work for the application I'm launching, so it could be my workaround... nevertheless, I'm interested to see your thoughts about this.. I'm kind of new to go... I've installed go 1.8 and glock, cloned the repository from within ~/go/src and ran:\n~/go/bin/glock sync $PWD\nOutput was:\ngithub.com/elgs/gosplitargs                        a491c5eeb3c8 [get checkout e9cf3de21e14]\ngithub.com/hpcloud/tail                            faf842bde7ed [get OK]\ngithub.com/jwilder/gojq                            c550732d4a52 [get checkout 81fa9a608a13]\ngolang.org/x/net                                   ddf80d097059 [get checkout 749a502dd1ea]\nAnd then I ran:\nmake\nWhich completed successfully and produced ~/go/bin/dockerize.\nWeirdly, the result of the first execution was:\n$ ./dockerize -stdout log ./test.sh\nhello\n2017/06/15 23:18:29 Command finished successfully.\nFurther executions work fine.\nDid I do everything right?. ",
    "chrismccracken": "I'd love to see more utility methods in the templating, this is a place where confd really shines by comparison.. ",
    "arunvelsriram": "These functions are very useful indeed. @jwilder please merge this. This addresses some pain points.. ",
    "rall": "\ud83d\udc4d for turning off cert validation. ",
    "jhult": "It looks like @kampka added it.. @jwilder, any updates on this?. ",
    "kampka": "I have bumped the alpine package to version 0.6.1\nPlease note that issues against alpine packages should be filed on bugs.alpinelinux.org.\nIf @jhult had not mentioned my directly, I would probably never have seen this (but please don't make that workaround a habit).\nAlso note that dockerize is currently in the testing repository which is only built for Alpine edge and has to be enabled explicitly. I'd be happy to move it to the community repository if someone is willing to take care of the testing, for which I currently don't have the time.. @mwmahlberg you typically implement the check() function of the ABUILD.\nThere is not much to it, really. Usually a make check or make test or what you might call it will do.\nSince dockerize does not have an integration test suite, maybe this would be a great time to add some to upstream :). @powerman I'd rather not to be honest.\nI haven't really used dockerize ever and I haven't been an active contributor of Alpine for some time.\nSince I consider switching upstream a non-trivial change for many reasons, I don't feel comfortable to just push this through.\nIf you feel passionate about this, please feel free to address this on the Alpine dev mailing list.\nI'd also be happy to give up mainternership of this package to someone who actually cares about it.\n. @jwilder I am aware of the risk, that is why I rejected powerman's proposal in the first place.\nI am not going to object to the Alpine devs appointing a new maintainer either though, as I am currently not able to put in the work myself.\nThat being said, I am not overly concerned in this case.\nFor one, the dockerize Alpine package has never made it out of testing, which requires extra steps to explicitly enable. It also means that there is next to no feedback that the package is working correctly since I packaged it which makes me doubt that the package is very popular among Alpine users.\nIn addition, changes from new contributors will of course have to pass code review by experienced maintainers as well, which has prevented event-stream like problems in the past quite effectively.\nLastly, I believe this discussion (if there is still need to one) should be moved to the alpine-devel mailing list and this issue should be closed.. ",
    "mwmahlberg": "@kampka I\u2019d have a couple of ideas on how to do integration tests, but I assume there is an \"Alpine\" way to do it. Can you give me a few pointers?. ",
    "antipin": "Although  this way of building container works fine:\n```\nFROM nginx:1.13.6\nRUN apt-get update && apt-get install -y wget\nENV DOCKERIZE_VERSION v0.5.0\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n    && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\nCOPY ./nginx.conf /etc/nginx/nginx.conf\nENTRYPOINT [ \"dockerize\", \"-template\", \"/etc/nginx/nginx.conf:/etc/nginx/nginx.conf\" ]\nCMD nginx\n```. ",
    "mnrozhkov": "I had the same issue. @antipin thanks for the solution!  It works for me. ",
    "at15": "I think the cause might be alphine does not have glibc, I had similar issue today, after switching to a non alpine image this issues is gone.\nIn my case I compiled go binary on my local machine (w/ cgo enabled by default), then copied it to a image based from alpine (java:8-alpine). though the error message 'No such file or directory' is quite confusing (found some info on so )\nhttps://superuser.com/questions/1176200/no-such-file-when-it-exists\n\nThe shell will report an ambiguous \"No such file or directory\" for an executable when the shell cannot find a dependency for that executable\n\nbtw: might consider update the go version in dockerfile, it's still using 1.8 and 1.10 is already released. ",
    "masterzen": "In retrospect this patch is not enough to successfully tail named pipe :(\nI'm going to send also a patch to hpcloud/tail.. Hi @jwilder, \nI forgot to push the hpcloud part :(\nI just did so, it is hpcloud/tail#135\nThis patch works AFAIK, but I had some stability issues with inotify and named pipes that are not related to dockerize, so I'm not using this specific feature anymore.\nIt's up to you to decide if you want to merge the change or not.\nAnyway, thanks for dockerize, it's a very useful tool!\n. ",
    "elcolie": "It works. ",
    "rlopezro": "@jwilder It would be really helpful if #93 was merged and released. Right now I need extra code to check if certain env variables are set. This is the last thing I need to completely replace envtpl with dockerize and remove the python dependency.. ",
    "Enteee": "\nWhat version are you running?\n\nv0.6.0. sorry for not responding, will try the fix soon.\nthank you!. ",
    "MrOggy85": "I would suggest to add this to the Alpine Linux section:\nRUN apk update && \\\n  apk add ca-certificates wget && \\\n  update-ca-certificates && \\\n  apk add --no-cache openssl\nsince I needed this to be able to get the source when using the node alpine linux docker image (version 8.11.4-alpine). I cannot say if it's a general thing though...\nReference discussion: https://github.com/Yelp/dumb-init/issues/73. ",
    "moshloop": "I have added a few more http wait based options and created a generic tool called waiter based off of dockerize (Please let me know if I need to add more attribution)\nIf you still want all or some of these options included in dockerize, let me know and I will create a new PR.. ",
    "marpada": "+1. Touching the log files is not an easy workaround for us as the log folder is mapped to a VOLUME on a base image several levels up.. ",
    "apollo13": "Hi @sychan. when I run your changes from master (since this is not in a released version yet); I do get:\n2018/12/30 13:22:20 Warning: unable to stat /var/log/nginx/error.log: stat /var/log/nginx/error.log: no such file or directory\n2018/12/30 13:22:20 Warning: unable to stat /var/log/nginx/access.log: stat /var/log/nginx/access.log: no such file or directory\n2018/12/30 13:22:27 Warning: unable to tail /var/log/nginx/error.log: tomb: still alive\n2018/12/30 13:22:29 Warning: unable to tail /var/log/nginx/error.log: tomb: still alive\n2018/12/30 13:22:31 Warning: unable to tail /var/log/nginx/error.log: tomb: still alive\n2018/12/30 13:22:36 Warning: unable to tail /var/log/nginx/error.log: tomb: still alive\n2018/12/30 13:22:40 Warning: unable to tail /var/log/nginx/error.log: tomb: still alive\n2018/12/30 13:22:42 Warning: unable to tail /var/log/nginx/error.log: tomb: still alive\nThe first two lines do make sense, the logfiles are not there yet, but it looks as if it runs into another error afterwards. For reference I am using this dockerfile https://github.com/jwilder/dockerize/blob/b6062ae239adee8b2e7fa464ceaea1721fdd1ccb/examples/nginx/Dockerfile with /var/log/nginx/* cleared\u2026 do you have any ideas?. Or even another issue, I use this dockerfile:\nFROM ubuntu:18.04\nRUN apt-get update && apt-get install -y nginx\nRUN echo \"daemon off;\" >> /etc/nginx/nginx.conf\nRUN rm /var/log/nginx/*\nEXPOSE 80\nCMD [\"dockerize\", \"-stdout\", \"/var/log/nginx/access.log\", \"-stderr\", \"/var/log/nginx/error.log\", \"nginx\"]\nand run with:\ndocker run --rm -v /home/florian/go/bin/:/usr/local/bin -p 8080:80 test2\nwhere I map my go path in so I do get the local dockerize version, I get no output at all aside from:\n2018/12/30 13:29:48 Warning: unable to stat /var/log/nginx/error.log: stat /var/log/nginx/error.log: no such file or directory\n2018/12/30 13:29:48 Warning: unable to stat /var/log/nginx/access.log: stat /var/log/nginx/access.log: no such file or directory\nonce.. ",
    "sildeag": "Note: a similar script using /tmp/gaia folder on Ubuntu 18.04 works without issue.  This kind of rules out waf as source of problem. . I don't think so for the following reasons.  https://github.com/metabrainz/acousticbrainz-server.git uses your repo.  I have made modifications to improve their concept and found that certain things, like what I have describe, just don't work in one of your containers.\nIf you look at their work:\nacousticbrainz-server/docker/\nhas two files: Dockerfile.dev and Dockerfile.gaia and the top of both files\nFROM metabrainz/python:2.7\n# Dockerize\nENV DOCKERIZE_VERSION v0.2.0\nRUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \\\n && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz\nI have merely upgraded the code and run into these weird issues and needed to benefit from your understanding to make sense of them.. ",
    "timb07": "I've just been caught out by #107 when using the docker hub image, not realising it wasn't up to date.\nIn addition, when trying to see what version was in the docker image, I discovered this:\n```\n5b6645b374bd:/# /usr/local/bin/dockerize -version\n5b6645b374bd:/#\n```\nThat is, it's not outputting a version number, so I had to do extra digging to work out that it was in fact an old version.. ",
    "avindra": "Sounds good. Thanks @powerman I'll keep the issue open for visibility. ",
    "gregkeys": "this was user error, I was adding the wait and timeout in an entrypoint where there was a second usage of dockerize in a dockerfile I wasnt aware of. ",
    "mubeen": "Copied the example nginx configuration and managed to resolve my issue.. ",
    "luisdavim": "If it's not, maybe you could update the readme informing people to use https://github.com/presslabs/dockerize instead.. That's great work @powerman, thanks.\nDid you go through the currently open PRs in this repo?. It would be great if @jwilder could update his README to point to @powerman's fork.. ",
    "carljmosca": "Good to know, thank you.. ",
    "xingguang2013": "thank you. ",
    "mouchar": "Well, it's pretty racy, we can't reap children so easily. Closing.. ",
    "markriggins": "I found this confusing -- I thought it was somehow related to golang.org/x/net/context.Context and the ctx  variable.  So I renamed it to EnvContext and moved it into templates.go, which is the only place its used\n. I ran gofmt -- I guess there must have been some spaces?\n. "
}