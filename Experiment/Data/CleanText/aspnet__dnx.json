{
    "nguerrera": "Abandoning this. Thought I was in sync with upstream but wasn't and changes were already made.\n. @pranavkm I believe that it is. We still have --parallel disabled.\n. Yes, the CoreCLR will be distro-specific.\n. No. It works as-is on 4.5 desktop.\n. ",
    "davidfowl": "Will fix, these packages disappear all the time..\n. I can't seem to replicate this. Does it happen when you run build.ps1?\n. @loudej can you take a look?\n. @jhawk42 We're done here right?\n. We now build both x64 and x86 versions of K. We still need to get x64 drops of coreclr.dll to make it work end to end.\n. This is done see 6be727b478c041e09ad116b0bb4dfcc2ca4662eb\n. Done\n. The physical path is exposed to the application via IApplicationEnvironment. The virtual path is a helios concept\n. No the dnx is the layer below web starts. Virtual Paths are an IIS concept and this belongs in a much higher layer than the DNX.\n. Nope\n. @loudej Can you take a look at this? It's reintegrated based on the new DependencyImpact (now called DependencyExport) work. I put the unpacking of embedded assemblies in the host container, that might be the best place since it's so low in the stack but let me know what you think.\n. Closing this out as this is now fully declarative. The end user can specify whether the dependency should be embedded or not:\nJSON\n{\n  \"dependencies\": {\n      \"SomePackageWithEmbeddedANIS\": { \"version\": \"1.0.0\", \"type\": \"build\" }\n  }\n}\n. This is done\n. :shipit: \n. @moozzyk With the recent refactoring is it easy to add command line options in the native code?\n. Irrelevant, new CLI work\n. Fixed in 0dd2127318e004b9af226cc0d61bf1b9ea5a534b\n. By design. The project generation doesn't support shared files. We'll need to add this to make this usable inside VS at the moment. For now you can unload those projects.\n. I added support for shared files in the project generator in KoreBuild so it should work now.\n. Yes that's a bug. Needs to be fixed asap or it'll break everyone.\n. This works now.\n. This doesn't work because the contracts only depend on other contracts.\n. Ummmmmmmmmmmmmm.\n. That serializer is terrible :smile: \n. See b6d36e4084e8ad84e445d2ba7d3bbecb1fb3e9cc\n. Fixed in b6d36e4084e8ad84e445d2ba7d3bbecb1fb3e9cc\n. This was done\n. Done in 76ff21d0c081a2b53e104f696e3bdf694e9107eb\n. @loudej can you send your changes for PR?\n. Nope, we want to have different kinds of depednencies, dev is just one of them.\n. Yep, take a look at https://github.com/aspnet/KRuntime/issues/37\n. Closing this as this doesn't actually describe what needs to be done. We've added basic dependency types now we need to implement some of them.\n. Dupe of #75 \n. @pranavkm Move this to the nuget repo\n. This is done\n. This might be similar to engines property in packages.json (https://www.npmjs.org/doc/json.html)\n. That's kind of a weird one. Helios is a bootstrapper that has another way of figuring out what version of the KRE it needs to launch. This is for the runtime itself to fail/warn the user that the KRE version isn't the \"correct\" one after launching. In, npm, they have the engineStrict: true to make the runtime fail if there's an incompatiblity.\n. File this under Universe as that's where the project generation logic is.\n. Yea, this is an interesting one. Need to think about it a bit since the entire point of the project.json was to remove the need for a nuspec + csproj + packages.config. Today other projects work around this in weird ways so it's worth looking into.\n. We've decided to not support these scenarios. We'll never support the full breadth of what nuget does so for those scenarios that fall outside of single dll, per package you should use a nuspec or edit the nupkg file that came out of the k build.\n. I think what you're doing is reasonable given that it's part of the xunit project. If it wasn't I'd say restructuring would be better anyways. You can specify sources in the json file:\njson\n{\n    \"code\": \"**/*.cs;etc\"\n}\nYou can specify a semi colon separated list of file patterns. You'll need to update the project generation logic in Universe to make it work end to end with vs tooling.\n. @bricelam spec? nice one :smile: https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Net.Runtime/Project.cs.\n. This is done\n. Fixed. \n. This change looks good except for the fact that it has 11 commits. Did you do a merge or rebase?\n. It also seems like your email/user name isn't set on your local git (it says unknown in the commit)\n. Ya, don't merge always rebase and redo the commit with name yep!\n. Looks good :shipit: \n. This is no longer relevant. We use a fixed verison of roslyn\n. We're not going to support the rich graph walking from klr.host.\n. Fixed in 6f839d6c9f37948478faa89a40da1e5f7e49b1bf\n. This happens as part of restore thanks to @loudej \n. Can you provide the exact repro steps.\n. Yep, sounds great. If you want to take a stab at debugging I can give symbols and sources.\n. Regardless it shouldn't null ref. I'll try to reproduce the problem.\n. Nope, this is mostly about compiler settings. Things you're talking about are in the application layer. Today in VS Debug/Release configuration just means, \"use these compiler settings\". Right now our project.json pivots on target framework because it maps directly to nuget folders. We don't have a way (neither does nuget), to target debug/release builds within a single nuget package.\n. Yep, and that's a mistake.\n. Related to #235\n. ### Proposal 1:\nJSON\n{\n    \"frameworks\": {\n        \"net45\": {\n            \"compilationOptions\": {\n                \"define\": [ \"ALWAYS\" ]\n            },\n            \"dependencies\": {\n                \"Newtonsoft.Json\": \"5.0.8\"\n            },\n            \"configurations\": {\n                \"debug\": {\n                    \"compilationOptions\": {\n                        \"define\": [ \"DEBUG\", \"TRACE\" ],\n                        \"optimize\": false,\n                        \"debugSymbols\": \"full\"\n                    }\n                },\n                \"release\": {\n                    \"compilationOptions\": {\n                        \"define\": [ \"RELEASE\", \"TRACE\" ],\n                        \"optimize\": true,\n                        \"debugSymbols\": \"pdbOnly\"\n                    }\n                }\n            }\n        }\n    }\n}\nProposal 2:\nJSON\n{\n    \"dependencies\": { },\n    \"configurations\": {\n        \"net45\": {\n            \"compilationOptions\": {\n                \"define\": [ \"ALWAYS\" ]\n            },\n            \"dependencies\": {\n                \"Newtonsoft.Json\": \"5.0.8\"\n            }\n        },\n        \"net45|debug\": {\n            \"compilationOptions\": {\n                \"define\": [ \"DEBUG\", \"TRACE\" ],\n                \"optimize\": false,\n                \"debugSymbols\": \"full\"\n            }\n        },\n        \"net45|release\": {\n            \"compilationOptions\": {\n                \"define\": [ \"RELEASE\", \"TRACE\" ],\n                \"optimize\": true,\n                \"debugSymbols\": \"pdbOnly\"\n            }\n        }\n    }\n}\nProposal 3\n``` JSON\n{\n  \"compilationOptions\": {\n    \"define\": [ \"ALWAYS\" ]\n  },\n\"configurations\": {\n    \"debug\": {\n      \"compilationOptions\": {\n        \"define\": [ \"DEBUG\" ],\n         \"optimize\": false,\n         \"debugSymbols\": \"full\"\n      },\n      \"release\": {\n      \"compilationOptions\": {\n        \"define\": [ \"RELEASE\" ],\n         \"optimize\": true,\n         \"debugSymbols\": \"pdbOnly\"\n      }\n    }\n  },\n\"frameworks\": {\n    \"net45\": {\n      \"compilationOptions\": {\n        \"define\": [ \"NET45_ALWAYS\" ]\n      },\n  \"configurations\": {\n    \"debug\": {\n      \"compilationOptions\": {\n        \"define\": [ \"NET45_DEBUG\" ]\n      }\n    }\n  }\n}\n\n}\n}\n```\nThis proposal puts target frameworks into a separate node instead of baking it into the configurations node. \nKPM Changes\n\nkpm build with accept a -frameworks flag that allows passing in specific frameworks to be built (semicolon separated)\n\nkpm build --framework net45;k10\nkpm build --framework net45 --framework k10\n- It will also accept a -configuration flag that will allow passing multiple configurations:\nkpm build --framework net45 --configuration debug;release;foo\nkpm build --configuration debug --configuration release\n- The same goes for pack\nkpm pack --configuration release\nK Changes\n\nk will have 2 new properties like pack, framework and configuration\n\nk --framework net45 --configuration debug run\nDefaults\nThe roslyn compiler will have known defaults for the debug/release configurations:\nDebug:\nJSON\n{\n  \"compilationOptions\": {\n    \"define\": [ \"DEBUG\", \"TRACE\" ],\n    \"optimize\": false,\n    \"debugSymbols\": \"full\"\n  }\n}\nRelease\nJSON\n{\n  \"compilationOptions\": {\n    \"define\": [ \"RELEASE\", \"TRACE\" ],\n    \"optimize\": true,\n    \"debugSymbols\": \"pdbOnly\"\n  }\n}\nWhen doing a regular kpm build, it will default to debug for configurations:\nJSON\n{\n  \"configurations\": { \n    \"debug\": { },\n    \"release\": { }\n  },\n  \"frameworks\": {\n    \"net45\": { },\n    \"k10\": { }\n  }\n}\nkpm build with no arguments will build (net45, debug), (k10, debug).\nOpen questions:\n\nDo you ever change dependencies depending on debug/release/foo configuration?\n. I'm leaning towards 3\n. Proposal 3 was implemented\n. Dupe of #19\n. Add more tracing all up to this code. It'll help in the short term while we're debugging it.\n. #77\n. #138 \n. @loudej was this done?\n. @halter73 do you remember the repro steps for this? Was it project references that were case sensitive?\n. No repro\n. Add a unit test\n. I believe the replacement for this will be global commands (tools). Basically turning each of the things that were single file generators and turning them into command line tools.\n. Done\n. This became an environment variable instead of a switch\n. The project.json is the source of truth. Today we infer the name from the folder name if there's no name in the project.json. This change makes it possible to have a project name that differs from the folder name.\n. @bricelam That won't just work. Look at the framework-references branch. I'm currently validating that change to make sure we can build our existing repositories when we switch to using reference assemblies\n. :shipit: \n. @bricelam I just pushed this. Will take a look.\n\nK restore should have restored the System.Runtime nuget package for K10\n. Updated the description to be more general /cc @loudej \n. @ChengTian Giving this one to you and closing #200 \n. @migueldeicaza merged this in\n. Not a runtime bug, looks like a \"hacky project generation bug\" since this logic has been removed I'll close this out.\n. /cc @loudej @GrabYourPitchforks \n. The bug in core clr was fixed (bug on their end). The k bubbling the exception is new. We can handle that in the right layer.\n. Updated the title\n. This isn't being looked at for alpha. \n. We already support /**/. Closing this as won't fix.\n. Ok, I'll leave this in the backlog until we pick a version of JSON.NET that supports this.\n. It should already be in\n. Part 1 https://github.com/aspnet/KRuntime/commit/fa4a3bd827b54dc79c218a8413da80d24d620087\n. No way. We're not scanning your entire assembly for any class that has a main function. Make the creation wizard take that into account.\n. I thought it was specific enough? https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime.Common/Impl/EntryPointExecutor.cs\n. Irrelevant with the new CLI work\n. No longer relevant\n. This isn't a bug. The KRuntime is only packed if you specify the runtime parameter.\n. Yah, by design. It has to be called Program.Main\n. This is done\n. The runtime isn't going to do this\n. I think this bug needs to go in the testing repository. This behavior is pretty broken for an application. The test sake task should just parse the project.json and run all configurations.\n. Yep\n. This is done. We send LongFrameworkName and FrameworkName. \n. I'd like to change LongFrameworkName to FrameworkName and FrameworkName to ShortFrameworkName. But i'll leave it for now since that's breaking\n. @loudej Seems like the walker should fail if there's a cycle.\n. @loudej agreed. I think both places should fail. The walker and the roslyn compiler needs to guard against it.\n. I'll take this\n. This has the highest priority as tooling needs this yesterday\n. Yea, the bug is in here https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Net.Runtime.Roslyn/RoslynArtifactsProducer.cs#L176. We just need to add the supported framework (in theory).\n. Will take a look at this.\n. Huh? I tried installing System.Data.Common and it seems to do the right thing. Can you give me some specific repro steps? What's broken exactly\n. :smiley: \n. @loudej can you take a look? The only thing I'm unsure of is the --appbase flag though it all seems to work.\n. @loudej you mean brunch\n. I worked around it to unblock coherence but it might be a case sensitivity thing. See the diff that fixed it here:\nhttps://github.com/aspnet/WebListener/commit/21616bcde53e4aa64c38151240c073a7c0e3cb16\n. I'm not even sure this change makes sense anymore. It's a property on IApplicationEnvironment which represents the runtime.\n. Moving this to ctp3. We can do this with the other renames\n. This is fixed \n. Will do, @loudej we'll need to fix kvm as well right?\n. Covered by #598 \n. Yes!\n. Fixed\n. Hold off on this change for now. I'm in the middle of a rename.\n. Dupe of #119\n. Why shouldn't it be?\n. I'm not sure I agree, yes other things aren't case insensitive but this seems different. This ain't VB :smile: \n. Sorry I just don't agree and I think its broken\n. I think this wild ordinal ignore case we do makes sense in alot of places and it will start to hurt when we try to get things running cross platform. I can understand why we'd want to make this case insensitive but I agree with @HaoK. There's never a case where you'd want different commands with different casing. Our error messages suck right now, is that why this is causing such a big problem?\n. It'll work for most things and will fail whenever we access the file system.\n. This is fixed\n. Giving this to you @ChengTian \n. @lodejard what did we agree on for the env variable?\n. This happens when 2 projects try to install the same package (Parallel restores going on).\n. I'll take this one. The runtime should still return the library description even tho it cant find the package and it should just fail to load as a result.\n. Fixed in 07a7ba79d506744e0fd11ae808a26f464cf157f6\n. @lodejard we also have to fix the ini file creation\n. This is broken in VS, I gave it a try and got this:\n```\nConnecting to C:\\Users\\davifowl\\Documents\\Visual Studio Next\\Projects\\StarterWeb1\\StarterWeb1\\stuff...\n\"C:\\Users\\davifowl.kre\\packages\\KRE-svr50-x86.0.1-alpha-build-0442\\bin\\kpm.cmd\" \"pack\" --runtime \"C:\\Users\\davifowl.kre\\packages\\KRE-svr50-x86.0.1-alpha-build-0442\";\"C:\\Users\\davifowl.kre\\packages\\KRE-svrc50-x86.0.1-alpha-build-0442\" --out \"C:\\Users\\davifowl\\AppData\\Local\\Temp\\ProjectKPublish\\StarterWeb1--1994950520\" --overwrite\nklr.exe Information: 0 : RootHost.Load name=Microsoft.Framework.PackageManager\nklr.exe Information: 0 : RootHost Assembly.LoadFile(C:\\Users\\davifowl.kre\\packages\\KRE-svr50-x86.0.1-alpha-build-0442\\bin\\lib\\Microsoft.Framework.PackageManager\\Microsoft.Framework.PackageManager.dll)\nverbose: out:C:\\Users\\davifowl\\AppData\\Local\\Temp\\ProjectKPublish\\StarterWeb1--1994950520 zip: project:\nklr.exe Information: 0 : RootHost.Load name=Microsoft.Framework.Runtime\nklr.exe Information: 0 : RootHost Assembly.LoadFile(C:\\Users\\davifowl.kre\\packages\\KRE-svr50-x86.0.1-alpha-build-0442\\bin\\Microsoft.Framework.Runtime.dll)\nklr.exe Information: 0 : RootHost.Load name=Newtonsoft.Json\nklr.exe Information: 0 : RootHost Assembly.LoadFile(C:\\Users\\davifowl.kre\\packages\\KRE-svr50-x86.0.1-alpha-build-0442\\bin\\Newtonsoft.Json.dll)\nklr.exe Information: 0 : Walking dependency graph for 'StarterWeb1 '.\nUnhandled Exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentNullException: Value cannot be null.\nParameter name: key\n   at System.Collections.Generic.Dictionary2.FindEntry(TKey key)\n   at System.Collections.Generic.Dictionary2.TryGetValue(TKey key, TValue& value)\n   at Microsoft.Framework.Runtime.Project.GetTargetFrameworkConfiguration(FrameworkName targetFramework)\n   at Microsoft.Framework.Runtime.ProjectReferenceDependencyProvider.GetDescription(String name, SemanticVersion version, FrameworkName targetFramework)\n   at Microsoft.Framework.Runtime.WalkContext.<>c__DisplayClass16.b__18(IDependencyProvider x)\n   at System.Linq.Enumerable.WhereSelectArrayIterator2.MoveNext()\n   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable1 source, Func2 predicate)\n   at Microsoft.Framework.Runtime.WalkContext.Resolve(Dictionary2 resolvedItems, IEnumerable1 resolvers, Library packageKey, FrameworkName frameworkName)\n   at Microsoft.Framework.Runtime.WalkContext.<>c__DisplayClass3.<Walk>b__6(Node node)\n   at Microsoft.Framework.Runtime.WalkContext.<>c__DisplayClass0.<ForEach>b__2(Node node, Int32 _)\n   at Microsoft.Framework.Runtime.WalkContext.ForEach[TState](Node root, TState state, Func3 visitor)\n   at Microsoft.Framework.Runtime.WalkContext.ForEach(Node root, Action1 visitor)\n   at Microsoft.Framework.Runtime.WalkContext.Walk(IEnumerable1 dependencyResolvers, String name, SemanticVersion version, FrameworkName frameworkName)\n   at Microsoft.Framework.Runtime.DependencyWalker.Walk(String name, SemanticVersion version, FrameworkName targetFramework)\n   at Microsoft.Framework.PackageManager.Packing.PackManager.DependencyContext.Walk(String projectName, SemanticVersion projectVersion, FrameworkName frameworkName)\n   at Microsoft.Framework.PackageManager.Packing.PackManager.Package()\n   at Microsoft.Framework.PackageManager.Program.<>c__DisplayClass2.b__14()\n   at Microsoft.Framework.PackageManager.CommandLine.CommandLineApplication.Execute(String[] args)\n   at Microsoft.Framework.PackageManager.Program.Main(String[] args)\n   --- End of inner exception stack trace ---\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\n   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\n   at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   at klr.host.Bootstrapper.Main(String[] args)\n   --- End of inner exception stack trace ---\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\n   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\n   at klr.hosting.RuntimeBootstrapper.Execute(String[] args)\n   at DomainManager.Main(Int32 argc, String[] argv)\nC:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\Web\\Microsoft.ProjectK.Publishing.targets(56,5): Error MSB3073: The command \"\"C:\\Users\\davifowl.kre\\packages\\KRE-svr50-x86.0.1-alpha-build-0442\\bin\\kpm.cmd\" \"pack\" --runtime \"C:\\Users\\davifowl.kre\\packages\\KRE-svr50-x86.0.1-alpha-build-0442\";\"C:\\Users\\davifowl.kre\\packages\\KRE-svrc50-x86.0.1-alpha-build-0442\" --out \"C:\\Users\\davifowl\\AppData\\Local\\Temp\\ProjectKPublish\\StarterWeb1--1994950520\" --overwrite\" exited with code -532462766.\n```\n. That's what VS does so maybe they'll have to tweak the logic in there.\n. @mayurid you need a picture on github :smile: \n. @lodejard We need better error handling.\n. What am I doing wrong here:\nkpm pack -o ..\\something --runtime \"C:\\Users\\davifowl\\.kre\\packages\\KRE-svr50-x86.0.1-alpha-build-0442\"\nExplodes\n. Ok something strange is going on\n. Passing the Path to the KRE is busted\n. DependencyContext.GetFrameworkNameForRuntime assumes the folder doesn't already have a . in it. \n. Fixing the bug\n. Ok it's fixed. @mayurid you'll need to pick up KRE > 442 so >= 443 \n. You need 443 not 442\n. @JaneZhouQ is that a question?\n. Yep, we're working on this. We made some recent changes that broke mono (renames). In the process of updating the build scripts :smile: .\n. Great!\n. Here are things you can do\n- https://github.com/aspnet/KRuntime/pull/193/files (help review)\n- We need to port kvm to bash as well but that's a bit more complicated. Can any of you help with that? https://github.com/aspnet/KRuntime/tree/dev/setup\nOnce we get this, we're on our way to easy mono support. The next steps will be to make kpm work on mono but we can do that as it should be trivial.\n. Most of the changes are in dev, but there's no easy way to get the kre on the path on osx/nix right now\n. Doesn't make sense for it to be managed code. It's a bootstrapper. The whole idea is that you don't need .NET installed to bootstrap the KRE. Mono is a special case since we don't pack it ourselves but on Windows, you should be able to use a machine without .NET and install the KRE (that machine does need powershell though so it has some form of .NET :smile: )\n. Actually somebody is already writing it and almost has it working :smile:. OSS FTW\n. @dmportella yep, porting not done yet:\nhttps://github.com/graemechristie/Home/tree/KvmShellImplementation\n. And, we're there:\nhttps://github.com/aspnet/Home/pull/48\nKRuntime still doesn't build yet (a bunch of changes has to be made), but most of the other repositories have been updated with a build.sh that works.\n. Yep this is known, it doesn't work on that platform as yet.\n. You switch to the desktop framework and do restore. It will restore for both runtimes\n. KPM works now, but restore still doesn't work as yet.\n. Fixed again in https://github.com/aspnet/KRuntime/commit/1ac6d825c07f5343d2fe2dc8d1b917fb7e14db41\n. That's invalid JSON\n. ahhh misread\n. This is fixed\n. This is fixed\n. This shouldn't happen anymore, we've added bin/ to the list of default excludes.\n. Resolved in https://github.com/aspnet/KRuntime/commit/81629505c838963dd2557eadba7c1f6e934e6600\n. @victorhurdugaci can you verify?\n. Dupe of https://github.com/aspnet/KRuntime/issues/166\n. Dupe of #166 \n. Yes, the root is inferred to from 4 things:\n- A .sln file\n- A global.json\n- A .git folder\n- A packages folder\nIf it can't find any of those it assumes one folder up from the project.json location.\n. KoreBuild assumes k, kpm etc are on the path. \n. @steimntz I think you mean kvm.sh not kpm.sh. Replace the v with a p it's significant. KVM is responsible for getting the KRE on the machine, kpm is the pacakge manager. KoreBuild has kvm so it can download the KRE and put the bin folder on the path. From there, the other build scripts just assume k and kpm on the PATH. \nDoes that make sense?\n. @giggio  See #204 \n. That seems pretty broken.\n. @loudej why does kpm bump the version foward even if it's not a snapshot?\n. This is fixed\n. This isn't by design, it's a real bug but the hang is just an issue with Helios + Kruntime interaction.\n. I'm thinking of removing the name property. It's very much a PITA currently and things don't work well if you change it\n. /cc @DamianEdwards \n. If you can't rename the folder for some reason but I'm not sure that matters\n. Are you using the latest kvm?\n. This is by design. The alias is only set when -alias is used.\n. @ChengTian talk to me before doing this, we need to do a lot of refactoring before you can show any help.\n. Today we have 2 command line parsers:\n- https://github.com/aspnet/KRuntime/tree/dev/src/Microsoft.Framework.PackageManager/CommandLine\n- https://github.com/aspnet/KRuntime/tree/dev/src/Microsoft.Framework.CommandLineUtils\nWe need to refactor the command line logic in kpm so that it is shared across all projects that have any command line parsing (we want to use that one for everything).\n@ChengTian  We should replace the one in Common with kpm's parser and properly show help in different layers of the stack including:\n- klr.net45.managed and klr.core45.managed (these both use the RuntimeBootstrapper)\n- klr.host\n- Microsoft.Framework.ApplicationHost\n- Microsoft.Framework.Project\nEach of these program should have flags and should show help. We should look at other command line tools on mature platforms (cough *nix), and mimic that behavior closely.\nHere's node:\n```\n$ node --version\nv0.10.12\n$ node --help\nUsage: node [options] [ -e script | script.js ] [arguments] \n       node debug script.js [arguments] \nOptions:\n  -v, --version        print node's version\n  -e, --eval script    evaluate script\n  -p, --print          evaluate script and print result\n  -i, --interactive    always enter the REPL even if stdin\n                       does not appear to be a terminal\n  --no-deprecation     silence deprecation warnings\n  --trace-deprecation  show stack traces on deprecations\n  --v8-options         print v8 command line options\n  --max-stack-size=val set max v8 stack size (bytes)\nEnvironment variables:\nNODE_PATH              ':'-separated list of directories\n                       prefixed to the module search path.\nNODE_MODULE_CONTEXTS   Set to 1 to load modules in their own\n                       global contexts.\nNODE_DISABLE_COLORS    Set to 1 to disable colors in the REPL\nDocumentation can be found at http://nodejs.org/\n```\nGolang\n```\n$ go version\ngo version go1.1.2 darwin/amd64\n$ go\nGo is a tool for managing Go source code.\nUsage:\n    go command [arguments]\n\nThe commands are:\nbuild       compile packages and dependencies\nclean       remove object files\ndoc         run godoc on package sources\nenv         print Go environment information\nfix         run go tool fix on packages\nfmt         run gofmt on package sources\nget         download and install packages and dependencies\ninstall     compile and install packages and dependencies\nlist        list packages\nrun         compile and run Go program\ntest        test packages\ntool        run specified go tool\nversion     print Go version\nvet         run go tool vet on packages\n\nUse \"go help [command]\" for more information about a command.\nAdditional help topics:\ngopath      GOPATH environment variable\npackages    description of package lists\nremote      remote import path syntax\ntestflag    description of testing flags\ntestfunc    description of testing functions\n\nUse \"go help [topic]\" for more information about that topic.\n```\n. kpm install exists?\n. @suhasj you still have to walk the dependency tree, that doesn't change. It's equivalent to adding it by hand and calling restore\n. It does\n. Lol @Eilon what do you mean? Package vs project\n. Already fixed, see https://github.com/aspnet/KRuntime/pull/214\n. ENV variables I think are the way to go here. We just need good defaults that don't invovle shelling out to git :wink:. @aaronpowell Those attributes all exist but I think we want to be as DRY as possible and keep assembly info down to a minimum. The project.json is the source of truth for assembly metadata and package metadata. You can always override that with assembly attributes but we want that to be the exception.\n. We can already specify authors, the question is about defaults\n. @hanswolff I've resolved 206 so the error message is completely different now. Thanks for your contribution.\n. What errors?\n. Try using this structure:\n/root\n         /myapp \n             put your application here\n             project.json\nThen go to the root and run kpm restore\n. No, I'm not sure if you followed the instructions. Can you show me your directory structure?\n. Can you just show the directory layout? I can't decipher it from your text. an Image would be great. There's not more instructions we are in alpha.\n. Take a screenshot and paste it in the box\n. Few things about your project, I would rename the source folder to the name of the app, the application gets its name from the folder and you don't want an app called src. Can you show the project.json file?\n. You need to put versions in the ones that don't have. The reason it works in MVC is because MVC is a project reference. You can't copy the sample out of the MVC solution and expect it to just work :smile: \n. Also, what version of kre are you using?\n. You got the wrong versions of everything. Do you have the myget feed configured?\nYou also don't need those packages:\nReduce your dependencies to this:\nJSON\n{\n  \"dependencies\": {\n    \"Helios\": \"0.1-alpha-*\",\n    \"Microsoft.AspNet.Http\": \"0.1-alpha-*\",\n    \"Microsoft.AspNet.Mvc\": \"0.1-alpha-*\",\n    \"Microsoft.AspNet.Server.WebListener\" : \"0.1-alpha-*\"\n  },\n  \"commands\": { \"web\": \"Microsoft.AspNet.Hosting server=Microsoft.AspNet.Server.WebListener server.urls=http://localhost:5001\" },\n  \"configurations\": {\n    \"net45\": {},\n    \"k10\": {}\n  }\n}\nThen make sure you get the NuGet.config that exists in the Mvc repository next to the Mvc.sln. Put that repository one level up from the project folder (the project folder is where the project.json exists).\n. You're still getting all the wrong versions of things. I think it's having a hard time finding the \"root\". put a file called global.json next to your nuget.config and put this in the contents:\nJSON\n{\n}\nTry running kpm restore from that folder.\n. Yes, a nuget.config at the root of your harddrive is just a bad idea :smile: but I think we need to do some work on finding the root. It's a problem when people don't have vs\n. This got a little bit of a fix up. The logic wasn't taking a few things into account so it's a little better. \n. We're going to leave the current logic, kpm init #222 will help with these non VS scenarios.\n. Bug in the razor compilation, this should be filed on MVC\n. That's because you don;t have any dependencies. It's by design. You need to reference System.Runtime to get object, string etc.\n. This is not a runtime issue this is a tooling problem. I'd talk to the C# team about how things end up showing up in the IDE.\n. :smile: \n. Sure we'll consider both :smile: \n. CLosing this due to the new CLI work\n. Ok, need to rebase this\n. Starting from scratch. Not sure this should be converting an existing csproj based project.\n. Why not do kpm init first?\n. build.cmd is not part of this stack, that's our build system. You can use msbuild, sake, psake, nant, bau build (name your build tool here).\n. But it would be nice if projects would follow a sane convention. Once VS comes into the mix it'll get interesting\n. The problem is when you use it in a VS solution, it has to work as well. What is the definitive package root? When you're in a VS solution with a phone and store application and PCLs and class libraries and vNext class libraries and applications, the packages folder is next to the solution. \nIf you start off from the command line, where should the \"root\" of your project be? When you start with that convention and add a visual studio experience on top of it how do they play together? Does your packages folder need to move at that point? \nThese are the kinds of problems with that make it hard to pick something that works in VS and outside of VS.\n. And if it's not present?\n. So no global.json we throw?\n. The KRuntime you get is the one you have on the path.\n. I think it's time to end this thread. It's unrelated to the original issue\n. It's there now.\n. @pranavkm did you merge this in?\n. We opted for no on this. We don't want commands to be contextual.\n. You can't today, you can only reference nuget packages. We'll likely have a way to add references to  a binary in the future. The current proposal looks something like this:\nproject.json\nJSON\n{\n    \"binaries\": [\"../../lib\"]\n}\nThat will tell the compiler to add more references 2 folders up in the lib directory. Maybe this will be per target framework, not sure how it will work as yet.\n. Not sure what you mean. Can you describe the scenario? It sounds like you want to reference a project that isn't in this solution, is that correct? It might also help if you describe it in more details with the directory structures you're trying to use.\n. The binaries support is for backwards compatibility. We expect moving forward that people will build nuget packages for their dependencies and use them like normal. Given that, we don't plan to make the experience of using binaries any better than it is today. Once you have a path, you have to keep updating it to match where your binaries are coming from (just like  in a csproj today).\nAre you in a situation where you can't create nuget packages?\n. @lucamorelli The great thing about using the new project type is that it will produce nuget packages for you by default. Alternatively, we'll be proving tooling to make this easier for csproj style projects. You might also want to look at https://nuproj.codeplex.com/ and http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package\n. @lucamorelli When we add the support for binaries I'll let you know so you can give it a try. Appreciate the feedback. BTW, everybody will have this problem.\n. Those models are shared across all of your projects right?\n. Yep, we have this on the radar expect to see something soon.\n. @RobSeder this issue is almost a year old and stuff has changed. You can reference regular class libraries and you'll be able to reference dlls in the next version. Unit tests projects are different as the ones that exist today don't run on CoreCLR so there's a new way to do that but if you don't care about CoreCLR then you can party on the way you used to do things.\n. That doesn't work yet. You can reference a class library from a DNX project but not vice versa\n. Any property should be settable via and environment variable.\n. Concrete properties to add:\n- projectUrl\n- requireLicenseAcceptance\n- tags\n. Yes, you need to use mono  master. The version of mono that works with KRuntme hasn't been \"released\" as yet.\n. Where do you do bundling and minification today?\n. We're moving away from runtime minification and will likely be using OSS tools like grunt/gulp to achieve similar things. Closing this issue out. You can ask more about it on the Home repository\n. File this bug on https://github.com/aspnet/Configuration repo. The KRuntime isn't responsible for everything\n. BTW if you;re not sure where to file an issue please use the https://github.com/aspnet/Home repository.\n. Sounds like you're asking about impersonation. How do you do this today in your applications?\n. BTW this has nothing to do with the runtime so I'm not going to close it until I can figure out where this bug should go.\n. Is your question specifically about self hosting? \n. @lucamorelli File an issue on https://github.com/Hosting\n. I have no idea what you are asking or suggesting\n. What does \"correctly checked\" mean to you?\n. Sure we can make it a bit more robust for the 2 people calling this method :smile:. Thanks for the suggestion.\n. Updated the title to reflect the actual problem\n. Sure, we'll make it more robust but I'm not sure there's a security issue here.\n. @mgutz did you set it to the right path?\n. @zsea regarding libMonoPosixHelper.so see #242. As for the other issues, it looks like you can't reach the internet from that machine, or at least nuget. You might need to run:\nmozroots --import --sync\n. @zsea try asking in https://jabbr.net/#/rooms/AspNetvNext. Somebody might be able to help\n. if you go to https://jabbr.net/#/rooms/AspNetvNext, yes\n. What os?\n. Does this still happen?\n. Interesting, I haven;t seen anyone report this in a while.\n. This was a result of https://github.com/aspnet/KRuntime/commit/18dedd60d7bf5c38a00860a8afbca7e769b6059e change. Fixed.\n. @xplicit thanks. I've updated the logic to just overwrites entries. It should just work fine. KRE 471 should have it. \n. Seems like this package is the culprit:\n\"Nancy.Bootstrappers.Ninject\": \"0.20.0\"\n. Problem is this package has dependencies with no version. In nuget today that means \"get me the latest\" (I know it should be an error :smile:):\n\n. This fails because the results are paged.\n. Yep, it's pretty epic. Eventually the runtime won't be unzipping anything. We'll only ever read the nuspec on disk.\n. File the bug on codeplex \n. Yar, gonna assign this one to myself, as it's an easy fix. Will need to notify some other project owners about changes\n. We need to think about this a bit. The slashes would need to be consistent cross platform. I should be able to write an app that runs on both x-plat with the same logic for accessing resources\n. So we're going to hard code /. The default resource path is compiler/resources/**/*.*.\nExample code for accessing a resource:\nC#\nassembly.GetManifestResourceStream(\"compiler/resources/foo.jpg\")\n. We could do, resources/*/ instead, we went with compiler instead to not conflict but I'm fine reverting that decision\n. Error: unrecognized flag -45\nTry --help for options\n. Ok lets do this @lodejard do you have time to clean it up? If not @ChengTian can you look at rebasing this?\n. Don't like it, prefer there to be a clear separation between runtime and build/design time. I might be more ok with a k run --restore flag or something similar (we've spoken about that before) but nothing has been done in this area so far.\nI see the pieces we have as building blocks. The .NET ecosystem has a bunch of different build tools that could be used to coordinate \"building\" but we don't necessarily choose one for you.\n. The bug wasn't fixed...\n. When it's closed, that'll be the confirmation that is is :smile: \n. kpm crossgen hasn't been done as yet. We need to figure out where that command should live.\n. :shipit: \n. needs a rebase\n. Is this a bug in KRuntime or KoreBuild /cc @bricelam \n. @ChengTian which thing needed to be quoted? We were quoting a bunch of stuff before but now it seems like we moved where the quoting was happening so it's hard to make sense of the fix\n. It was one of the places missed.\n. :shipit: \n. This is a bug but we don't support content packages anyways. We don't copy files into your project\n. That's by design. Eventually the packages will be on the official nuget feed.\n. @bricelam what are the contents of each project?\n. Also, was this k run or k build?\n. Yep, it requires some changes before that will work.\n. You should be unblocked for now but we should discuss this more\n. Closing this as a dupe of #506\n. @BrennanConroy what is \"the wrong KRE\"?\n. Also this bug belongs on the Home repository, not on the KRuntime.\n. Sorry guys I'm going to close this issue. We've said that things keep changing and it's part of the risk you take using alpha bits.\nYou have 3 options:\n- Don't upgrade and use stable bits. This means only update when a new version of vs comes around. You'll be sure to have a working but likely out of date API set.\n- Wait until things are stable. This option means you won't have to keep up with the rapid breaking changes happening at such an early stage (Look but don't touch).\n- Roll with the punches and figure out changes by reading the repository commits. At this early stage in the project you should not expect any docs we wrote to stay updated. API are being rewritten and refactored and we certainly won't be spending time documenting while there is such a high rate of churn.\nPick your poison. If you choose 3 it means you need to figure out by asking (on the home repository) what has changed and somebody will likely reply with an update. You can also follow the commits on the appropriate repositories you have problems with \n. I'll take this one\n. I assume you mean, change the target framework and nothing else right?\nJSON\n{\n    \"dependencies\": {\n        \"Helios\": \"0.1-alpha-build-0585\",\n        \"Microsoft.AspNet.Mvc\": \"0.1-alpha-build-1268\",\n        \"Microsoft.AspNet.Identity.Entity\": \"0.1-alpha-build-1059\",\n        \"Microsoft.AspNet.Identity.Security\": \"0.1-alpha-build-1059\",\n        \"Microsoft.AspNet.Security.Cookies\": \"0.1-alpha-build-0506\",\n        \"Microsoft.AspNet.Server.WebListener\":\"0.1-alpha-build-0520\",\n        \"Microsoft.AspNet.StaticFiles\":\"0.1-alpha-build-0443\",\n        \"Microsoft.Data.Entity\": \"0.1-alpha-build-0863\",\n        \"Microsoft.Data.Entity.SqlServer\": \"0.1-alpha-build-0863\",\n        \"Microsoft.Framework.ConfigurationModel.Json\": \"0.1-alpha-build-0233\",\n        \"Microsoft.VisualStudio.Web.BrowserLink.Loader\" : \"14.0-alpha\"\n    },\n    \"commands\": {\n        /* Change the port number when you are self hosting this application */\n        \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5000\"\n    },\n    \"configurations\": {\n        \"net451\": {\n        },\n        \"k10\": {\n        }\n    }\n}\n. @PradeepKadubandi I saw no problems. Can you clarify exactly what the problem is?\n. Can't repro any problems\n. @PradeepKadubandi any ideas?\n. Ok I think I can reproduce this but it's a tooling problem. The call to Initialize seems to be passing .NET 4.5 as the target framework and it never changes:\nklr.exe Information: 0 : RootHost.Load name=Microsoft.Framework.DesignTimeHost\nklr.exe Information: 0 : RootHost Assembly.LoadFile(C:\\Users\\davifowl\\.kre\\packages\\kre-svr50-x86.0.1-alpha-build-0524\\bin\\lib\\Microsoft.Framework.DesignTimeHost\\Microsoft.Framework.DesignTimeHost.dll)\nListening on port 7162\nClient accepted [::ffff:127.0.0.1]:7162\nklr.exe Information: 0 : [ProcessingQueue]: Start()\nklr.exe Information: 0 : [ProcessingQueue]: OnReceive((18433011ec6d4a46826358b7155c92cb, Initialize, 1) -> {\n  \"TargetFramework\": \".NETFramework,Version=v4.5\",\n  \"ProjectFolder\": \"c:\\\\users\\\\davifowl\\\\documents\\\\visual studio next\\\\Projects\\\\WebApplication40\\\\WebApplication40\"\n})\nUntil you toggle the flag.\n. Is that the only place?\n. Needs more code sharing. Don't redefine the method in 2 places\n. :shipit: \n. Close this PR, we're going to go with the other one\n. This looks much better\n. I think the set of changes are good but this entire thing needs to be redone and cleaned up.\n. @shahid-pk redo it all but with less commits https://github.com/aspnet/KRuntime/pull/309/commits. Also splitting copy-bits into copy-bits-mono and copy-bits-windows so we can reduce the number of is IsMono. Also fixing the formatting to match the rest of the file.\n. You can squash but I still want it to be more refactored.\n. Yes taking everything I wrote in the comments above into account and with fewer commits \n. Thanks for the changes, I'll take it from here. A bit more refactoring is needed.\n. Ok this is finally in\n. This should be another interface:\n``` C#\ninterface IRuntimeEnvironment\n{\n     OperatingSystem OperatingSystem { get; }\n     // KRE version\n     string RuntimeVersion { get; }\n// Mono, CoreCLR, CLR\nstring CLR { get; }\n\n}\nenum OperatingSystem\n{\n    Nix,\n    Windows,\n    Darwin,\n    Other\n}\n```\n. Yay! We'll expose that information via this interface and more :smile: \n. @glennc giving this to you\n. The bugs have all moved to the other repository\n. @ChengTian what about authenticated proxies? You can set one up using fiddler (it has support for doing that). We might need to support something like http://user:password@...\n. :shipit: \n. I never finished writing up this feature but it's not tied to msbuild. I was just listing scenarios.\nIn fact we're not going to call msbuild at all but you'll be able to pick up outputs from those projects.\n. @graemechristie Congrats!\n. @ChengTian can you look at this since you're working on #272\n. @graemechristie https://github.com/aspnet/KRuntime/pull/788\n. :+1: \n. I'd prefer to reuse exclude and if we find issues with that we can change it\n. This doesn't repo for me @balaTest. \nC:\\Users\\davifowl\\Documents\\Visual Studio Next\\Projects\\WebApplication41> tree\nFolder PATH listing\nVolume serial number is 000000EA F496:8965\nC:.\n\u251c\u2500\u2500\u2500WebApplication41\n\u2502   \u251c\u2500\u2500\u2500bin\n\u2502   \u2502   \u2514\u2500\u2500\u2500Debug\n\u2502   \u251c\u2500\u2500\u2500Content\n\u2502   \u251c\u2500\u2500\u2500Controllers\n\u2502   \u251c\u2500\u2500\u2500Models\n\u2502   \u251c\u2500\u2500\u2500obj\n\u2502   \u2502   \u2514\u2500\u2500\u2500Debug\n\u2502   \u2502       \u2514\u2500\u2500\u2500ProjectRawReferences\n\u2502   \u251c\u2500\u2500\u2500Scripts\n\u2502   \u2514\u2500\u2500\u2500Views\n\u2502       \u251c\u2500\u2500\u2500Account\n\u2502       \u251c\u2500\u2500\u2500Home\n\u2502       \u2514\u2500\u2500\u2500Shared\n\u2514\u2500\u2500\u2500WebApplication41.sln.ide\ncat .\\project.json\nJSON\n{\n    \"dependencies\": {\n        \"Helios\": \"0.1-alpha-build-0749\",\n        \"Microsoft.AspNet.Mvc\": \"0.1-alpha-build-1717\",\n        \"Microsoft.AspNet.Identity.Entity\": \"0.1-alpha-build-1344\",\n        \"Microsoft.AspNet.Identity.Security\": \"0.1-alpha-build-1344\",\n        \"Microsoft.AspNet.Security.Cookies\": \"0.1-alpha-build-0726\",\n        \"Microsoft.AspNet.Server.WebListener\": \"0.1-alpha-build-0734\",\n        \"Microsoft.AspNet.StaticFiles\": \"0.1-alpha-build-0571\",\n        \"Microsoft.Data.Entity\": \"0.1-alpha-build-1131\",\n        \"Microsoft.Data.Entity.SqlServer\": \"0.1-alpha-build-1131\",\n        \"Microsoft.Framework.ConfigurationModel.Json\": \"0.1-alpha-build-0309\",\n        \"Microsoft.VisualStudio.Web.BrowserLink.Loader\": \"14.0-alpha\"\n    },\n    \"commands\": {\n        /* Change the port number when you are self hosting this application */\n        \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:50\n00\"\n    },\n    \"configurations\": {\n        \"net451\" : { }\n    }\n}\nWorks great\n. BTW I was using KRE 524 \n. I can't repoduce the problem at all. Maybe it has something to do with the nuget feeds configured?\n. I'm looking at it\n. @graemechristie this needs a rebase\n. Needs another rebase cuz it has merge conflicts\n. Looks like it might be a runtime bug. Will look into it\n. @ChengTian looks like the command line argument parsing broke this. Specifically, it looks like having a fake run command doesn't use get the right set of RemainingArguments\n. The bug is known and will be fixed. It's the weekend and the world cup is on so be patient\n. Looks good\n. You are, use the name property and load that.\n. You don't need the loaded engine at all\n. I don't know what you're talking about\n. Yes look at the f# compiler and what it does to resolve references. The problem is that not all assemblies are on disk and those have to be handled specially. Using the path won't work because well, nothing is on disk.\n. When I get news a computer I'll explain it in more detail \n. How does this even work if there's no default? Doesn't everything explode?\n. Author is required AFAIK... http://docs.nuget.org/docs/reference/nuspec-reference\n. No, you cannot not have an author. The required fields are bolded. Take a look at the doc again. Can't we just pick something?\n. lets do project name. Empty author is bad and likely tools that use NuGet core it won't even validate properly. You won't even be able to push it to the feed I believe.\n. :shipit: \n. This bug belongs in Universe not KRuntime\n. There's no string.Format support and you can't use named params. It's regular command line argument, if you want to do what you're showing you should do this:\nJSON\n\"commands\": {\n    \"web\": \"Microsoft.AspNet.Hosting server=Microsoft.AspNet.Server.WebListener\"\n}\nk web server.urls=http://localhost:5003\n. Moved to the new kvm repo\n. :shipit: \n. We're not fixing this. We don't look at the test folder for repo dependencies. I'm sure this problem exists for other repos too \n. This is done\n. @graemechristie this needs a rebase\n. watcher dead\n. :shipit: \n. Mono 3.4.0 doesn't work with ASP.NET vnext. You need at least 3.4.1. You might also want to try reading this http://graemechristie.github.io/graemechristie/blog/2014/05/26/asp-dot-net-vnext-on-osx-and-linux/ including all of the comments.\n. Also, nobody has run bug tracker or music store on mono. Just basic mvc applications like this https://github.com/davidfowl/HelloWorldVNext\n. The mono support isn't ready for big apps like that as yet. There's tons of dependencies that need to be figured on x-platform (sqlite, parts of EF etc). I'd try to get something simple running before going to a full app like music store and bug tracker\n. Who knows, we'll fix it when something breaks. There's no consistent way to do this on mono proper anyways.\n. :shipit: \n. 1. By name not path.\n2. Or we change k to understand nupkg's as well as project.json\n. kvm install {pathtoyourcustombuild}\n. I definitely think there should be a way to do this but baking it into the runtime isn't the best way to go about it. It's something you would do as a post build step. Also what Eilon said, you don't always want the PDB in the same package but it should be optional. \n. Because PDBs can be huge. Why don't all the packages on nuget today have pdbs in them? Everybody understands that its nice to be able to debug packages but I don't think people always want to bloat the package size with pdbs and potentially the source. That's why it's a separate package. \nI do think there's a scenario where you do want to put them together but like I said, it cannot and will not be the only way to work. \n. @pranavkm I think we should do this with our builds. Source link to github. Maybe we should file this in universe. It would require that we ship the pdbs in the package though.\n. Closing this out as it's been moved to universe.\n. Not that our build has warnings :). Building KRuntime shows warnings which is bad. We need to fix them\n. Keep it in the runtime and nuke the one in PackageManager\n. Works like a charm\n. preserving paths is fine but I filed #388 \n. @Eilon I 90% disagree. I think the only undiscoverable part is the compiler prefix. If all resources were for example under /resources// and you knew that we preserved the path then it would be fine I think.\n. @victorhurdugaci should this be closed?\n. :shipit: \n. Moved kvm to https://github.com/aspnet/kvm\n. This should be fixed in >= 1.0.0-alpha3-10107\n. 2 things:\n1. maybe you have an older version of kpm\n2. We don't support / for args, just - and -- because its more nix friendly. / could be the start of the path as the argument value so we removed it as it causes problems on *nix\n. What happens on osx and linux?\n. Use -p for user path. Kvm was changed to have consistent behavior. There's a few new flags, -alias -p. To get new versions use kvm upgrade which does it will kvm install latest -p -alias default\n. Lets handle this for all command line scripts\n. :shipit:\n. We're not going to support mono on windows. At least, it's not a priority.\n. Related to https://github.com/aspnet/KRuntime/issues/398\n. :shipit: \n. Data points:\nHere are some existing projects using native dependencies:\n- Kestrel\n- DataCommon.SQLite\n- Helios (today helios has a native project in the same solution as the managed project)\nKestrel has binaries committed to source control in this format:\n$/src/Microsoft.AspNet.Server.Kestrel/native/win/x86\n$/src/Microsoft.AspNet.Server.Kestrel/native/win/amd64\n$/src/Microsoft.AspNet.Server.Kestrel/native/darwin/universal\nIt also keeps the same structure in the nupkg itself:\nhttps://github.com/aspnet/KestrelHttpServer/blob/dev/build/_custom-goals.shade#L12\nThe build script above puts the native binaries at the root of the nuget package with the same layout.\nAt runtime, it loads the native library using the following method:\nhttps://github.com/aspnet/KestrelHttpServer/blob/e4b9bd265c75704529409638fd9cdfac504a93ef/src/Microsoft.AspNet.Server.Kestrel/KestrelEngine.cs#L26\nhttps://github.com/aspnet/KestrelHttpServer/blob/dev/src/Microsoft.AspNet.Server.Kestrel/Networking/Libuv.cs#L23\nIdeally, with the KRuntime, we should have conventions around what directories we automatically add for loading native binaries (we the option of specifying this in the project.json). Of course the library author can always manually load library, but that only really works if you can package all native dependencies in the nuget package. This doesn't work well on *nix, see https://github.com/aspnet/KestrelHttpServer/issues/10 for more details.\nSqlLite is a bit more interesting:\nThe build process downloads sqlite dynamically and for packaging, it uses an msbuild script on net451 so that nuget will automagically copy the binaries into the bin folder of the project.\nhttps://github.com/aspnet/DataCommon.SQLite/blob/dev/makefile.shade#L46\nhttps://github.com/aspnet/DataCommon.SQLite/blob/dev/src/Microsoft.Data.SQLite/build/net451/Microsoft.Data.SQLite.targets\nAt runtime it uses load library (similar to kestrel):\nhttps://github.com/aspnet/DataCommon.SQLite/blob/dev/src/Microsoft.Data.SQLite/Utilities/NativeLibraryLoader.cs#L16\n. @lodejard and @GrabYourPitchforks Need your POV on this. Assuming we invent a convention for determining where native assets get loaded from within a package based on OS and Bitness, we'll either modify PATH or LD_LIBRARY_PATH. \n. Another option might be to call LoadLibrary (and dlopen on *nix) on the appropriate binary. The only downside to this might be that we would load the library eagerly instead of lazily.\n. We're moving to a model where packages are declarative and client can do the right thing for the platform.\n. > I think this is the primary question for me and others - how will dnx/dnu/visual studio handle native assemblies in a nuget package?\nIn vs2015 there's a new NuGet aware msbuild task that will copy the relevant assets into the project's output directory so that should just work.\nIn the DNX, there will be no copying but the runtime will discover the appropriate assets and setup the runtime so that loading those dlls will just work (via Dll import or via an API).\n\nIn the past we could always just make up our own convention for including native dlls in a nuget package and then copy them wherever we want using a Install.ps1/init.ps1 script or a .props file.\n\nYea, we're moving away from ps1 files altogether in the next NuGet and in the dnx. However props files will still work in msbuild based projects in the next version of NuGet.\n. A simple way to think about it is, the csproj will copy the native binaries from packages to the bin folder. The dnx will load the native binaries in place without copying them.\n. Nothing in .NET Framework 4.6 is changing if that's what you're asking \n. @jbrwn The dnx hasn't implemented anything as yet (that's what this issue is for) but the current plan is to modify either the dll search paths or the PATH env variable to take into account packages that contain native code.\n. @xanather CoreCLR right? What happens if you drop the native binary in the application root? (just curious)\n. @xanather Nope, there's always an application root, when you publish it's just somewhere different. Doesn't it copy all files from your application root anyways?\n. At the very least we should probably set this https://github.com/aspnet/dnx/blob/dev/src/dnx.coreclr/dnx.coreclr.cpp#L236 to the appbase.\n. Prototype here https://github.com/aspnet/dnx/commit/afb29037e8c9aa21cdd9138cf3de74d30e39dc7f\n. @natemcmaster @bricelam what is SQLite doing for native dependencies right now?\n. That will still work in RC2.\n. No this doesn't work. You need to put it in a package. Or copy it to the output folder on build\n. This needs a rebase\n. @graemechristie I'm going to move all future work to https://github.com/aspnet/kvm\n. Moved kvm\n. This will happen eventually. Closing this for now. We're tracking it internally.\n. I think we said we'd put the name and version in the nuspec along with the sha instead of file names:\nJSON\n{\n  \"sources\": [\n    \"src\"\n  ],\n  \"dependencies\": {\n    \"Microsoft.Framework.ConfigurationModel\" : { \"version\": \".0.1-alpha-build-0233.nupkg\", \"sha\": \"wKeQHcfCxyFFbLzSvDipmsp51PqJ5n3vLr9QmNn3Nu5BdmzqO+Mr0OiG8j4U/M2tiDgNL3xLAECOuA3BJ5GFMQ==\" }\n  }\n}\n@lodejard thoughts?\n. That's by design. You can't use nuget pack to create k10 package at the moment. \n. :shipit: \n. @ChengTian didn't you fix this?\n. I'm not sure this is in the milestone. I was just trying to get ab update \n. :shipit: after that change\n. How does this work? What is warning and what constitutes as an error?\n. Get rid of the merge commits here\n. /cc @jhawk42 \n. :shipit: \n. @ChengTian this is done right?\n. :shipit: \n. This is a problem with the logging package depending on older packages\n. :shipit: \n. Things to add:\n- KRE_PACKAGES environment variable that takes precedence over everything else. It's basically another way of adding --packages\n. By design, it was never made to do so. Just use a new folder or delete it yourself.\n. That's because it's kpm pack not k pack. K is the runtime, kpm is the package manager \n. So here's the confusing part about this for me. When you do kpm pack --appfolder something are you renaming the main project or the wwwroot? /cc @lodejard and @ChengTian \n. Can we add some comments to make that clearer\n. :shipit: \n. @Praburaj @lodejard @GrabYourPitchforks @glennc These are the changes that were done to separate the application from the web server folder. Any of our test applications that work today with web listener and helios may not work as smoothly anymore once you add static files into the mix. We might need an API for the static file sever (middleware) to find the static file root for the cases where it doesn't match the app base\n. :shipit: Will look at cleaning up the AppHost API for executing commands. \n. @jeffhandley I'm not 100% opposed to being able to read that setting from nuget.config. We already read nuget.config for kpm but I don't want the runtime itself to have to understand the nuget.config hierarchy with clears and overrides.\n. Maybe can can just support a nuget.config next to the solution\n. you can do that with an environment variable, see KRE_PACKAGES. \n. it is worth looking into regardless.\n. @jeffhandley what about the folder layout?\n. @sayedihashimi In the past I've tried things like the above and it doesn't work (due to when different parts of the csproj get evaluated in VS). What you really want is a  node that will run the same logic to figure out the actual hint path at build time.\nWe're also using {name}/{version} instead of {name}.{version}\n. Shouldn't change servicing but sure\n. http://nuget.codeplex.com/SourceControl/latest#src/CommandLine/Common/PackageExtractor.cs\nTake a look at ExecuteLocked\n. New set of rules:\nDependencies can have a specific type or by \"any\". Within the specific type certain fallback orders are allowed:\nProject -> []\nPackage -> [Project]\nFramework/GAC/SDK assembly -> []\nAny means the dependency can come from Package or Project (Framework/GAC/SDK are specially declared in their own section).\nWe need a generic way of specifying the type of dependency (type is already taken to mean things like dev, build and shouldn't be confused with this).\nJSON\n{\n    \"dependencies\": {\n        \"A\": \"1.0.0\"\n    }\n}\nA is of type any. If it's not a project then it will be considered a package and search for in the configured feeds when restoring.\nJSON\n{\n    \"dependencies\": {\n         \"A\" : { \"target\": \"project\" }\n    }\n}\nJSON\n{\n    \"dependencies\": {\n         \"A\" : { \"version\": \"1.0.0-*\", \"target\": \"package\" }\n    }\n}\n. :shipit: \n. Kvm bugs should be filed on the kvm repository\n. Initial work is done.\n. In the RC we'll look at implementing syntax similar to https://github.com/npm/node-semver#semver1----the-semantic-versioner-for-npm\n. It's possible but no promises for v1. NuGet v3 supports putting * anywhere in the version and we'll adopt that logic in dnu so 1.*, 1.0.* will be possible at some point.\n. It does not work in the RC. When restore merges with nuget it'll be possible \n. DNX and DNU are being retired in favor of the dotnet CLI (github.com/dotnet/cli) and nuget. NuGet 3 supports the * syntax in more parts of the version than dnu currently does. We're working on merging the  relevant features of DNU back into nuget.\n. For what's exactly? The use of * in nuget?\n. Not sure there's anything specific about *, ask on the nuget repository. You can find other information here https://docs.nuget.org/Consume/ProjectJson-Format#project.json-usage.\nDNU https://github.com/NuGet/Home/issues/1588\nDNX has nothing to do with NuGet but here is some information on that https://github.com/dotnet/cli/issues/254#issuecomment-158124295\n. @ChengTian this needs a rebase\n. :shipit: \n. :shipit: \n. @ChengTian can you give me a demo of this tomorrow?\n. @ChengTian I'm going to push this today.\n. You should look at the spec. Kpm pack will write a global.json with the packages locally with the application bundle.\n. Looks a little chatty, maybe we should only show a few levels instead of the entire graph. 2 or so.\n. Prefer the flat list, wrapping is fine\n. Get rid of the empty parenthesis \n. With the move to nuget this will solve itself.\n. Not anymore!\n. Wrong repository\n. Thats the solution, exclude bin. We need to work on better ways to merge the defaults\n. Parsing has been improved in NuGet itself. The new runtime should take care of this\n. :shipit: \n. Master? What?\n. Nah, the versions in the project.json mean min version not exact version.It will only pick higher versions if it can't find alpha2 exactly. It favors the minimum.\n. They have the same logic AFAIK. Though I'm not sure that issue was fixed in CTP2.\n. They do, just not in CTP2. Closing this issue out\n. @ChengTian is this still the case?\n. Possible we haven't decided that we want to split the feed management into global.json right now\n. /cc @lodejard @Eilon I think we should consider this\n. /cc @yishaigalatzer \n. I'll work on this now. \n@borgdylan Maybe somebody\n. This change was made to mimic xbuild on mono https://github.com/aspnet/dnx/commit/60f381f2598ac14e0afb8ce831581ed91fbebba2. We should improve the error when frameworks aren't supported.\n. @muratg I think @ChengTian fixed this\n. Ah we didn't fix it, we only fixed unsupported frameworks\n. CLI now does this\n. I would move this to a folder called Commands instead of Adding\n. We're going to add kpm install as well. kpm add just adds the file to the project.json\n. :shipit: \n. This came up before and no, we're not going to support different project formats. We picked json and that was the decision. We have great tooling support for it in the IDE (even with intellisense) and id prefer to see a consistent ecosystem with respect to the project format.\n. @anandjp where do you see that error? Is it only for full CoreCLR?\n. @anandjp move all testing issues to the Testing repository. This is still a problem however\n. Looks like a regression @ChengTian \n. Add a test and :shipit: \n. Fixed in https://github.com/aspnet/KRuntime/commit/f11b9e04f9c8ee3a774457a64bc7f10851242d88\n. Can you provide a repro of what exactly you are running into?\n. When you kpm build it fails or when you k run does it fail? Also does it fail when you're using Roslyn or is it just your compiler?\n. Metadata references should be keyed by name so both shouldn't go into the mix. You still didn't answer my question about kpm build / k run. \n. I don't understand how you're getting the wrong metadata references. When the k10 version gets compiled, what are the list of metadata references.\n. I'm not understanding what the problem is. What list of metadata references get passed to your compiler for the k10 version? What are the physical files on disk that you get? Print them out and paste them here\n. What's still not clear to me is if you're talking about a compile time or load time issue. If you are passing the right set of contracts to the compiler, then I don't see how your compiler can mess that up\n. Contracts only depend on other contracts not type forwarded assemblies. So the references passed to the compiler must be incorrect.\n. Can you make a smaller repro without MVC? Make a simple class library that shows the issue with just the ResourceManager type. The list of reference assemblies you pasted look accurate so unless the contract itself is busted I don't know where things are going wrong.\nYou also mentioned that Roslyn \"ignores it\", I think you're wrong there but lets clarify what the actual problem is before we talk about the fixes.\n. I think I understand the problem and I think it's a bug in your compiler (or an unimplemented feature :smile:). Lets say you have this scenario\nProject -> System.ResourceManager 4.0.0 -> System.Runtime 4.0.0.0\n        -> System.Runtime 4.0.20.0\nWhen we resolve dependencies and metadata references. You should get:\n/r: packages/System.Runtime/4.0.20.0/lib/contract/System.Runtime.dll\n/r: packages/System.ResourceManager/4.0.0.0/lib/contract/System.ResourceManager.dll\nYour compiler should prefer references passed into it. It should never assumes references come from anywhere else. If System.ResourceManager relies on 4.0.0.0 and I give you 4.0.20.0, use that instead. It's essentially a compile time binding redirect.\n. Yep, closing this issue. You shouldn't use reflection instead use a metadata reader in your compiler. Try\n- Mono.Cecil\n- Microsoft.Bcl.Metadata\n. Content files are not supported and don't belong in project.json. We're currently leaning towards npm/bower for content files in vNext projects. \n. Contribute? No we don't have plans to bake anything into kpm to support this. We're trying to standardize on a client side package manager and currently the thinking is bower since that's what everyone else uses.\n. /cc @pranavkm \n. #325\n. Needs a rebase\n. Needs another rebase\n. :shipit: \n. :ship :\n. :shipit:\n. @Alxandr did you fill out a CLA?\n. This change doesn't compile. You're missing a namespace in CommandLineApplicationTests\n. Yep everything seems to be fixed :smile: \n. This was implemented in https://github.com/aspnet/KRuntime/commit/5ebbad49e1d5aa467e3d36b02aae5033176e351f\n. After fixing the build change, :shipit: \n. Wrong repository \n. :shipit: \n. This has nothing to do with generic commands. It's probably because k web is waiting for console input.\n. Seems like you're both talking about Hosting, not KRuntime. File the issue there.\n. Target frameworks have to go in the \"frameworks\" section\n. Needs a rebase\n. C#\npublic class Reporter \n{\n   public IReport Verbose { get; }\n   public IReport Information { get; }\n}\n. Gonna mark this as done. We've done the work to make in VS scenarios work via the design time host. \n. VS part is in as well.\n. That's buggy :)\n. It's a bug in the tooling closing.\n. Yep this bug is a dupe of #290 but I like your explanation better.\n. IMO, restore should never fail but there should be a runtime exception and something should show up in VS.\n. I'm not sure what this is asking for. We're not going to add a markdown dependency to the runtime for printing out logs to the console. \n. We should fix this but alpha3? We're pretty much done.\n. This was covered by #667 \n. Need to rebase\n. :shipit: \n. When running you mean not restoring right? Can you provide a repro project??\n. So this bug title is incorrect, you mean that the wrong EntityFramework is being loaded at runtime.\n. The version of the assembly should be different and we aren't passing in the full assembly identity so it might be a problem with how loading works on mono. I'll take a look.\n. :shipit: \n. We should send out an email on which ones are ok to use so people don't start going crazy\n. Closing this PR\n. Wrong repository. Please file this on the kvm repo\n. @victorhurdugaci can you set KRE_TRACE=1 and paste the stack trace in here?\n. I'm pretty sure it's using the wrong one\n. Please file this issue on the home repo.\n. No you can't customize the snapshot but we don't print it by default anymore. We're aiming to make the graph prettier but it's not on by default so it shouldn't matter at the moment.\n. /cc @ChengTian are we aggressively parsing arguments that K doesn't need to consume?\n. This also feels like a dupe of #479 \n. Whats suspicious about this?\n. Required for things like Razor specifically. There are things that could go away but we need enough for other things to reference for compilation.\n. Also I'm not sure how much effort we want to spend optimizing the development time experience, memory wise. I'll see if there's low hanging fruit here but we should assume that in process compilation will be less efficient memory wise (by design).\n. It really isn't, -s overrides all configured sources, -f appends to the list of sources.\n. @alek-sys you need to sign a CLA to contribute. I already fixed this issue in the meantime\n. This needs unit tests verifying that the behavior is fixed and that the previous throwing of invalid arguments for k still throws.\n. :shipit: \n. Punting this for beta\n. \n. It's because of these giant base64 strings making roslyn go crazy https://github.com/aspnet/Diagnostics/blob/dev/src/Microsoft.AspNet.Diagnostics/Views/WelcomePage.cs#L46\n. This doesn't repro anymore\n. It always has to try to resolve dependencies as any dependency added or removed can change the entire graph.\n. Yep, I'll close this as a dupe of #546\n. It's likely that that you need a newer version of mono since the latest roslyn seems to have regressed something with mono. What version of the KRE are you using?\n. alpha3 of the KRE + 3.6.0 (official) of mono right? Looks like that might be a busted combination. @Praburaj what build are we testing?\n. @Praburaj What is the exact commit that we've been testing?\n. @kirthik you need to update global.json to include project paths that aren't relative to the project itself. Take a look at any of our projects on github (e.g. https://github.com/aspnet/KRuntime/blob/dev/global.json#L2). The reason src is in there is to allow projects under test/ project to reference the projects under src/.\n. Tooling will of course make it easier as it can automatically update the entry when a project reference is added. The command line experience won't change though. \n. Irrelevant now ish sorta\n. This was resolved with #640 \n. We already have this. Take a look at the wiki or the EntityFramework or KRuntime itself. It shows how you can so this with either a shared project or linked file equivalent\n. If you're running the alpha3 KRE then you're probably running later versions of the application packages (maybe using -*). You can't mix and match because of a breaking change in roslyn. If you use alpha4 Mvc packages then you need the alpha4 KRE.\n. @Eilon almost did that but I think we need some caching in the runtime by default. Things like razor still rely on runtime compilation so keeping the cached compilations around is nice for that. We don;t need fully blown cache at runtime though, just something super basic (like a dictionary).\n. Sure we can go ahead and make these changes but it might make sense to sync up on the data model before moving forward.\n. It's totally a work in progress and you've caught us in-between worlds right now. I'll share the current long term vision. \nWhen you develop your application will look like this:\nwwwroot/\n  favicon.ico\n  index.html\nViews/\n  Home/\n      Index.cshtml\nControllers/\n  HomeController.cs\nStartup.cs\nproject.json\nIn visual studio IIS would point to the wwwroot folder. This folder will contain all of your static content, css, js (not typescript/less or anything that has to be transformed).\nWhen you kpm pack, we'll take your wwwroot and make it the wwwroot you see today (the content won't be duplicated):\nwwwroot/\n  favicon.ico\n  index.html\napproot/\n  src/\n    Views/\n      Home/\n        Index.cshtml\n    Controllers/\n      HomeController.cs\n    Startup.cs\n    project.json\nYou should be able to point to the wwwroot folder in both cases to make that work. That's a high level overview of the current thinking. Of course the devil is in the details:\n- https://github.com/aspnet/Hosting/issues/64 - This issue shows how we'd need to flow the path of the wwwroot folder into the application somehow (this hasn't been decided yet which is why it's tagged as \"needs design\").\n- When in development, the wwwroot folder needs to be excluded from compilation (using exclude in project.json) so that cs files in that folder aren't compiled by mistake.\n/cc @loudej @DamianEdwards \n. Is this fixed? /cc @ChengTian \n. I'll try it out but / is supposed to work (and did last time I tried). @desdesdes The correct way to work cross platform is to use / always, we're not going to automatically convert \\ to / everywhere in the stack so best it's best if the right slashes are used for relative paths.\n. I'll try it out but / is supposed to work (and did last time I tried). @desdesdes The correct way to work cross platform is to use / always, we're not going to automatically convert \\ to / everywhere in the stack so best it's best if the right slashes are used for relative paths.\n. Bye commands\n. Bye commands\n. Please file this issue on the kvm repository \n. Please file this issue on the kvm repository \n. :shipit: \n. :shipit: \n. I still think this is too spammy. We need to add a --quiet that hides the http requests or something.\n. I still think this is too spammy. We need to add a --quiet that hides the http requests or something.\n. This change also needs to stop logging Attempting to resolve \"{0}\" in information and only do it in verbose.\n. This change also needs to stop logging Attempting to resolve \"{0}\" in information and only do it in verbose.\n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. The original question isn't a runtime problem. Sounds solely related to scaffolding, try filing this issue in the Home repository. \nAs for the btw comment, see #38 \n. The original question isn't a runtime problem. Sounds solely related to scaffolding, try filing this issue in the Home repository. \nAs for the btw comment, see #38 \n. Can you provide the versions of everything in use? The caching issue was fixed and you likely have to update the appropriate bits (vs version and kre)\n. Can you provide the versions of everything in use? The caching issue was fixed and you likely have to update the appropriate bits (vs version and kre)\n. Yep I think you were hitting this #527 or #552\n. Yep I think you were hitting this #527 or #552\n. :shipit: \n/cc @pranavkm Lets change our build scripts to use this.\n. :shipit: \n/cc @pranavkm Lets change our build scripts to use this.\n. This is done as testing has been moved to the other repository\n. This is done as testing has been moved to the other repository\n. Is the file saved?\n. Is the file saved?\n. Punting this. It works in VS only for now. There are challenges with making this work well.\n. Punting this. It works in VS only for now. There are challenges with making this work well.\n. CLI mitigates this\n. CLI mitigates this\n. Rename Project in the ProjectManager so that it doesn't conflict with Runtime.Project\n. Rename Project in the ProjectManager so that it doesn't conflict with Runtime.Project\n. :shipit: \n. :shipit: \n. @ChengTian take a look \n. @ChengTian take a look \n. @ChengTian we totally need your functional test harness for this :smile: \n. @ChengTian we totally need your functional test harness for this :smile: \n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. @ChengTian can you merge this in?\n. @ChengTian can you merge this in?\n. Yes I think ignoring dot folders might be a good way to start. This isn't common anyways as your project folder is usually on le folder up \n. Yes I think ignoring dot folders might be a good way to start. This isn't common anyways as your project folder is usually on le folder up \n. How does it fail today?\nI could see this being downgraded to a warning if you had a version on disk that matches your criteria with an added flag --ignore-failed-sources\n. How does it fail today?\nI could see this being downgraded to a warning if you had a version on disk that matches your criteria with an added flag --ignore-failed-sources\n. KPM options is something that's on the list for VS. I don't think this will be on by default. Maybe if kpm restore fails with a particular exit code, VS can prompt and ask if you want to flip this flag /cc @PradeepKadubandi @sayedihashimi \n. KPM options is something that's on the list for VS. I don't think this will be on by default. Maybe if kpm restore fails with a particular exit code, VS can prompt and ask if you want to flip this flag /cc @PradeepKadubandi @sayedihashimi \n. Disable the api.nuget.org feed.\n. Disable the api.nuget.org feed.\n. You need to install node and npm\n. You need to install node and npm\n. This flag shouldn't be mono specific. It should be prefixed with KRE like the rest of the env variables for the KRE.\nIt should affect the actual application base in each of the platforms at the appropriate layers (the mono impl is fine since we can't change that with the mono executable right now)\n. This flag shouldn't be mono specific. It should be prefixed with KRE like the rest of the env variables for the KRE.\nIt should affect the actual application base in each of the platforms at the appropriate layers (the mono impl is fine since we can't change that with the mono executable right now)\n. :shipit: \n. :shipit: \n. Sweet! Thanks for the contribution. You need to sign a CLA before we can accept your contribution https://github.com/aspnet/Home/blob/master/CONTRIBUTING.md#contributing-code-and-content\nThanks!\n. Can't remove compatibility completely yet but the win8 compatibility was removed completely. When we get all of our dependencies moved, I'll remove the final check.\n. Looking at this a bit more it feels like the ILocalPackageRepository is useless and the level of abstraction and instead, we should be switching on is the IPackageFeed. There should be 3 implementations of this (or 2 for simplicity):\nNuGetPackageFolder : IPackageFeed -> Uses the LocalNuGetRepository implementation we already have (leave it as it is today). We can talk about splitting this out into 2 things later but for now it's fine.\nKpmPackageFolder : IPackageFeed -> This is the new kpm layout that can probably use the runtime code verbatim\n. This looks great! :shipit: \n. PS: We need some KPM tests\n. /cc @GrabYourPitchforks @BillHiebert @PradeepKadubandi @glennc \n. /cc @pranavkm \n. Probably something to do with how we're configuring the CLR host.\n. What does this have to do with the runtime? Who is throwing the error?\n. @ChengTian it does now right?\n. We had strings originally and added support for arrays. I'm fine removing the string support. \n. :shipit: \n. :shipit: \n. Fortunately this will never be a first class feature. It was hacked in for compatibility so the priority on this is pretty low IMO. FYI it might work if you remove the portable- and just specify the combined frameworks but this is a very untested areas so expect to find problems with it.\n. What doesn't work?\n. This actually works fine and compiles for me. I had to add a reference to System.Runtime in the aspnet50 section but adding a reference in visual studio works.\n. :shipit:\n. :shipit: \n. I'm gonna say that's not the case otherwise our own build would be broken. You'll  need to provide extremely specific repro steps \n. Seems like you're using an older version of mono\n. The steps on the Home repository say that the minimum version of mono required is 3.4.1 but mono is at 3.10 so you should install that one. If you're using home-brew then run brew update to get the latest homebrew bits then try installing again.\n. Opted to do this in the vs template itself. Will revisit this. Potentially thinking of a solution that doesn't couple the runtime:\nJSON\n{\n    \"webroot\": \"wwwroot\",\n    \"exclude\": [\"$webroot$/**/*.*\"],\n}\n. After this change goes in and passes, change the sources throughout the asp net vnext repositories to use / instead of \\. We'll get tons of coverage this way.\n. :shipit: Nope, just do it!\n. :shipit: \n. :shipit: \n. :shipit: \n. Related to #438 \n. :shipit: /cc @Praburaj @ChengTian @rynowak \n. It will be, we just haven't properly implemented the AfterCompileContext. We also need to add an extra event that happens during packaging.\n. @moozzyk yep! Closing as the CLI now has to handle this\n. :shipit: \n. /cc @troydai @vijayrkn @Praburaj \n. @pranavkm ?\n. :shipit: \n. Ohhh reusable :smile: \n. What about the extension methods on string that help write these things:\nhttps://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.PackageManager/Colors.cs\n. Feels like it's as important. Do you need to rewrite it to get the same color support?\n. No I think means current directory not project dir\n. :shipit: \n. Yah, it's a dupe\n. Don't merge this in, it'll make tooling snap. Lets sync with bill. I'm also not in love with the name\n. This happens because the latest KRE doesn't work well with CTP3. You'll need to wait until a new VS version comes out. We're still making breaking changes so expect this to continue until things settle.\n. For that particular issue you can work around it but it would require tweaking the targets file that VS uses. Doing that might make upgrading to the next VS version harder.\n. :shipit: \n. Except this is shared packages folder so it's a bit different.\n. Maybe, we're looking at this. Dupe of #613 \n. :shipit: \n. Looks like a bug somewhere. I'll take a look\n. Wrong repository. File this on hosting\n. Kpm pack without passing the runtime I'm assuming?\n. Dupe of #272\n. Feels like we need to add some color to some of these outputs. Warnings in yellow, errors in red (maybe)\n. That makes alot more sense. Can you try a windows machine\n. xunit? What?\n. Ok that's unrelated and because you're using incompatible versions of the KRE and the xunit package. Let's try to keep this bug focused on the nuget/zip issue\n. This is still a problem, the long term solution is nuget core changing to read zip and produce OPC. /cc @jeffhandley\n. Closing this as by design. The new NuGet 3 API s required to open packages now :smile: \n. :shipit: \n. Verify that all paths are normalized\n. That's by design. Lowest is always preferred. If you want to get the latest then specify the build number of -*\n. This doesn't look right \n. Why aren't we flowing the original compilation options in the Roslyn compiler?\n. Look at get syntax trees \n. It would also be nice to never hit a remote source if there's a matching local package already (in the case where no snapshot was specified)\n. :shipit: \nThere might still be some work to do here. If you're offline and the exact versions numbers are all available locally, we should never hit the internet.\n. Interesting, it looks like it's not pulling in the framework references\n. This was fixed by #640. I'll be updating the various repositories to use the new syntax but this will work now and after the changes are made.\n. :shipit: \n. I chose not to make it top level since then future of these are a transitional thing. Nuget packages are the future \n. ehh, I'm not sure how I feel about this. \n. @Praburaj what happens when that project has more project dependencies or is the intent that the dependency walk doesn't find them? \n. The fallback should be the project folder not the folder above it.\n. Closing this as dupe\n. Just to level set, ILibraryInformation is not just about packages. It represents projects as well as assemblies.\n. :shipit: \n. This is because we end up with different resource names. We'll need to consider changing it back.\n. We can look at fixing this for rc1\n. I believe the bug was introduced and fixed after alpha4\n. Obviously, this has come up more than a few times and we have a kinda crappy solution at the moment, see https://github.com/aspnet/KRuntime/issues/325. We're still trying to figure out the best way to do.\n. It's nothing to do with the solutions, it's a much more convoluted problem than that. There entire point of the project.json based project system is to be a projection of a nuget package. Assembly references don't exist. That makes some of this difficult to interop with the current csproj because we need to make it \"visible\" to KRE based projects. Making it visible basically means interpreting the dependency graph of msbuild based projects. It's even harder because we'd have to actually take a dependency on msbuild in the runtime (which doesn't currently work on CoreCLR) and evaluate the project using msbuild since it's no declarative.\nThe current solution we have makes it visible but it's a manual process that needs to be done transitively. This means you need to maintain a csproj, a packages.config (if you use nuget) and a project.json.\n. Thinking about it a bit more. It actually doesn't need to be transitive. If we just treat it like a leaf node it might be doable. \n. It wouldn't\n. Stay tuned, we might have something for this\n. When we flesh out #325 in tooling that won't be the case. Of course the library will have to be built before running the vnext project but if you choose to reference an msbuild based project thats part of it. We'll most likely add a project to project reference from the the kproj to the csproj so that f5 in vs would work and msbuilding the kproj would work.\nAt that point though, you are fully dependent on msbuild (which is the entire point I guess)\n. We think we have a good solution for this and we're prototyping it.\n. Yes there is! We added a command called kpm wrap that makes this possible. \n. Odd I wonder what tools is left over from.\n. Found it! https://github.com/aspnet/KRuntime/blob/dev/scripts/klr.cmd#L14, #legacy\n. Fixed\n. Some of that information looks suspect compared to the k.ini. Can you be explicit about what each property is used for?\n. The application base is missing. That's pretty fundamental to this all working\n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. Closing this out since we're refactoring design this host and this code will be gone as a result\n. @ChengTian looks like IReport is null is some cases\n. Fixed in 00886548ff3678351c36a31a2a5a3e959a4c935f\n. :shipit: \n. :shipit: \n. What's the issue. Can you be more specific?\n. Issue is understood. It's related to the frameworkAssemblies changes. I'm going to work on fixing up that logic and will need to update all the repositories as a result.\nThe logic put in to keep backwards compatibility while we update the project.json file is causing this problem for mono and EF. It's using the EntityFramework.SqlServer from mono's gac instead of the package.\n. Fixed in cb70ea7192432a2fc05ee642b8011e53e7e7dc30\n. There's no real bug here to fix. I'd file this same bug on the home repository to start a discussion there. There's nothing specific about the runtime itself that requires this but it is an interesting discussion.\n. I will today though. Today those servers are implemented as libraries and that's why they are dependencies. They run in the application process and as part of the app\n. Nah\n. dupe of #126 \n. Waiting for the fallout bugs.... :smile: \n. :shipit:  This feels like it's going to regress something else.\n. I don't think we should commit this without tests. We're at the point where we need them.\n. What's the status of this @ChengTian ?\n. Add a test that uses the new autoglobbing feature:\nJSON\n{\n  \"pack-exclude\": [\".git\"]\n}\n. :shipit: \n. Make partial ngen off by default and add a flag to turn it on, --partial\n. :shipit: \n. Can you use the error page middleware to get more details? \n. Ahh I see what you were saying. I'm not sure this is a bug.\n. We don't currently have plans to run powershell scripts. We also don't support copying content into the project.\n. No, it's multi core JIT\n. @borgdylan I can't reproduce this with a simple web project or hello world project. Can you add a more specific repro?\n. No repro\n. Works fine.\n. @troydai is running into the issue because he is setting the KRE_PACKAGES path to somewhere machine wide so it can't find the Application package.\n. Yes, that's a different bug that needs to be resolved. Mvc is trying to find the libraries that reference mvc and it's causing Load(\"root\") to get called.\n. https://github.com/aspnet/KRuntime/issues/339\n. /cc @ChengTian \n. Moving\n. :shipit: \n. What does too high mean? You specified a version that doesn't exist?\n. Isn't that the same as specifying a dependency that doesn't exist?\n. Contracts aren't special, so they will never be a message like that. What I'm trying to understand is how this is any different from specifying a non existent package version. Let's assume that it isn't different for a second:\n- VS will show an unresolved reference symbol\n- The runtime will explode saying it couldn't find the package\nNow if you're saying you have 4.0.10.0 on the machine and compilation works but runtime fails then that's another issue.\n. There are few things we should do to bring this experience together end to end:\n- Add support for upper bounds in the dependency walker\n- Add an implicit upper bound to the contracts shipping with that version of the KRE\n- VS should show dependency resolution errors (unresolved dependencies etc) in the error window\n- Errors that occur before the application starts need to throw an exception when f5 ing in VS (env variable maybe)\n. Dependent on how we solve #2638\n. :shipit: \n. :shipit: \n. Can you show the output with --quiet, with and without errors. It should say building {project name} for {target framework}\n. :shipit: \n. We're going to be adding 2 new properties:\njson\n{\n   \"builtinCode\": \"**/*.cs\",\n   \"builtinExclude\": [\"bin/\", \"obj\"]\n}\nThese will be combined with the default code and exclude\n. This is fixed now /cc @troydai right?\n. @muratg @Eilon I wanna change our resource format for beta3\n. https://github.com/aspnet/dnx/issues/1072\n. isn't @ChengTian working on this?\n. It can't be passed through K because of how args are passed through. Why do you need to set the appbase? Testing?\n. Doesn't work. It's like passing options to the mono exe via MONO_OPTIONS, k is a cmd file that eventually calls into KLR/mono.\n. Appbase is wired up before k even runs which is why it's difficult (before the app domain is wired up)\n. This is fixed now. We're basically obsoleting k.cmd and replacing it with a dotnet executable. \nYou can run dotnet \"c:\\dev\\foo\\bar\" test\n. Wrong repository \n. Crossgen should be using the IReport system. Follow up with @ChengTian for details\n. ?\n. Tests?\n. Needs a unit test also\n. Ah I forgot I wrote those :smile: \n:shipit: \n. out of curiosity, what's in /usr/lib/mono/4.5/?\n. What buid of mono is this? How did you install it?\n. @colemickens you shouldn't have to use your custom build of mono. What is the version you're using? I'm not familiar with checkinstall\n. :shipit: \n. What stops somebody pushing this website to nuget.org? How do we separate nuget package that are meant to be libraries and ones that add other stuff? Does that matter? When you get a nupkg do you have to know what's inside of it to understand where it applies? \nSeems like we have a bunch of uses for nuget:\n- NuGet for .NET libraries\n- NuGet for random content\n  - JS libs\n  - Websites\n  -  Anything you can think of\nHow does anyone reason about these different uses of the same packaging technology?\n. That sounds like a really bad idea. Conventions will fall over quickly. The behavior is completely different between those domains. What if you need metadata specific to the domain (deployment, development). Have you seen the amount of feature requests made on nuget for it to support adding content into a specific target folder in the project? That's not the same problems you would have when deploying a website in the nuget package. \nIt's like using apt-get to install jquery into my .NET project.\n. This pull request also requires a rebase\n. @loudej we need to do this\n. You need better repro steps than that\n. It is that! But there's still this bug #438 \n. Nope, if an argument null exception was thrown it would still be broken :smiley: \n. Not a KRuntime bug.\n. The WTE/WPT numbers don't mean much, can you specify the KRE version being used.\n. @ChengTian looks like a regression based on the new web.config generation\n. @troydai \n. Looks like a NuGet bug. Closing this out.\n. @ChengTian looks like a regression\n. :shipit: Make sure this goes into beta\n. Working on it\n. Why are we still generating k.ini files? Didn't @GrabYourPitchforks move everything to web.config?\n. :shipit: \n. Needs a rebase\n. Probably needs rebasing\n. We should consider marking the file as executable if we're on *nix\n. Yes! We so\n. :shipit: \n. Seems like a corner case. Shared packages should not exist in the nuspec. They should be build time dependencies. \n. @victorhurdugaci closing this out as resolved\n. @Eilon @ChengTian @GrabYourPitchforks seems like this might be for beta no?\n. Can we move this bug to the Helios repository?\n. 100% of the time? That's bad\n. Maybe automate with some tests this time :smile: \n. I started to test this feature out and it's super hard to read the output. We need some colors and some better spacing between target frameworks \n. Lets clean up the following things in the kpm build\\pack output as part of this change:\n- Remove the framework name from each dependency line, it's noisy, show it once for that target framework:\nUsing Project dependency HelloWorld 0.1-beta-SNAPSHOT for Asp.NetCore,Version=v5.0\n  Source: C:\\dev\\git\\ProjectK\\KRuntime\\samples\\HelloWorld\\project.json\\\nShould be:\nUsing Project dependency HelloWorld 0.1-beta-SNAPSHOT\n  Source: C:\\dev\\git\\ProjectK\\KRuntime\\samples\\HelloWorld\\project.json\nRemove the trailing slashes from Source: {thing} if {thing} is a file. Today it adds the trailing slash for project.json as well as dlls:\nUsing Assembly dependency gac/System.Threading.Tasks 4.0.10.0 for Asp.Net,Version=v5.0\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5.3\\Facades\\System.Threading.Tasks.dll\\\n- Add a space between different target frameworks, it's super hard to tell when one start and the other began (maybe we can add color as well?)\n- Maybe we should try to show files in a different color or something so that they stand out?\n. This is good for now, we can iterate later.\n. Did you test this change?\n. The world is on fire with beta1 but this looks good\n. Hold on this I think we might need it for beta. See https://github.com/aspnet/KRuntime/issues/796. Will see if we can get this approved \n. :shipit: \n. When did this regress? \n. :shipit: \n. Can we add a test for this?\n. :shipit: \n. Your KRE is too old\n. Tests;\n. There's no such thing as an unused framework. Why is it in there in the first place.\n. What's wrong with ILMerge? I'd like to hear some of the pros/cons. \n. Nope I'm wondering if there's something fundamentally wrong with it (besides the fact that it confuses mono).\n. And the assumption is that the merged components never leak into public API right?\n. That's only if those packages don't expose JSON.NET though. For example, configuring the serializer settings etc. It would be interesting to understand how many projects would use this feature (I guess the ones that use ILMergr today)\n. And you guys aren't worried about the bloat?\n. @davkean Would the rename also internalize publics?\n. Making it extensible sounds worse. I think it's time we do some case studies on other ecosystems that have these problems. This isn't unique to .NET. Does anybody have any experience with other ecosystems and internalizing dependencies?\nIncompatibilities are incompatibilities. We give you more control over dependencies in vNext but there's no silver bullet that will make everything work.\n. What happens if one of your components needs to be serviced after you've decided to merge/internalize them? Is that just a problem with your library and a user is no unable to work around the potential issue? You need to release a new version of your library?\nIn C/C++ the decision to statically/dynamically link is usually something you think about and I think it makes more sense for client apps tbh not sure about libraries.\n. @damianh Can you point to the java static linking support? Which component in the system does it?\n. We should just IL Merge .NET into a single blob called DotNet.dll :smile: \n. That sucks though, I wouldn't want all of my dependencies to do this. Everything revs when any dependency changed sounds much worse than what we have today. \n. @adamralph At least with more dependency controls and smart defaults, you can control this behavior. More importantly, consumers of your library have more strict controls over their dependencies. So if a dependency up the chain is misbehaving you can always override that as an app author. Internalizing is a giant shotgun to give people and I think only a few people really need it. I fear it will be abused.\n. I think the majority of people don't need this and those that do know how to ILMerge so why should this be first class if both ways are possible today?\n. If this conversation isn't about internalizing dependencies but dealing with dealing with conflicts then we can start over. The premise of this issue assumes that libraries are incompatible or we wouldn't be having this discussion right?\n. How about this, fast forward and imagine we have this feature. Somebody write up a document describing when you would do each of the following:\n- Take a normal dependency - Dependencies that flow transitively (in intellisesne and compilation)\n- Take a private dependency - Dependencies that don't flow transitively (like assembly references today)\n- Take an internal dependency - Linker/compiled into your program/assembly (.NET native style)\nWith specific examples of course. Preferably with your own packages or packages from NuGet.org. Something .NET devs can relate to.\nKeep the definitions to libraries, I think this totally makes sense for client applications\n. @FransBouma sure https://github.com/aspnet/KRuntime/issues/819#issuecomment-62518163. Feel free to restate why all the other existing tech do what they do and how it relates to .NET in general.\n. @FransBouma Also, to talk about what was said earlier, you can use ILMerge today.\n. @xoofx voice of reason! +1. This thread makes it seem like internalizing is a silver bullet for incompatibility and that really bugs me.\n. Just a small update on this. We're messing around with internalizing ourselves (very manually) via roslyn magic and git submodules https://github.com/aspnet/XRE/pull/1239/files\n. This was a great discussion and should be brought up again on either CoreFX or Roslyn or both.\n. This should be fixed on schema store https://github.com/madskristensen/schemastore/\n. Looks like a dupe of https://github.com/aspnet/KRuntime/issues/393\n. /cc @BrennanConroy Did you fix this?\n. @moozzyk did your changes resolve this?\n. As in, trace in the KRE log, sure.\n. Yes\n. :shipit: \n. ? Ship it again? @ChengTian we should be able to get rid of the testing in the makefile with this.\n. @nosami do you want to send a pull request to skip this on mono?\n. /cc @ChengTian \n. Confirmed this is a bug\n. Nah, not for build just generally. Likely on the klr itself so you can attach a native debugger as well.\n. ```\nDebugging with mono\nmono --debug --debugger-agent=transport=dt_socket,server=y,suspend=y,address=127.0.0.1:2345 program.exe\nexport MONODEVELOP_SDB_TEST=1 \nopen /Applications/Xamarin\\ Studio.app\n```\nThe debugging problem with mono is much deeper. We'd need to use mcs to emit the mono assembly. Which we might consider #740 \n. Remove all of the formatting changes from this commit\n. :shipit: \n. Sounds good\n. @anandjp what are the precise repro steps?\n. Can repro.\n. Wrong repository, please file this on aspnet/kvm\n. Because a version is/will be required always (except frameworkAssemblies for now). See #438\n. This seems it like a tooling issue.\n. Means you have an old KRE \n. @riande take a look and see what version of the KRE your project is using\n. @MiguelAlho That's correct.\n. When it exists and everything else makes sense around it sometime in the future\n. Make sure this isn't 0:\nhttps://github.com/aspnet/KRuntime/blob/dev/src/klr/klr.cpp#L105\n. VS is fixed but the issues exists. Just run the CoreCLR version of klr manually without an --appbase flag\n. Fix the 2 spaces 4 spaces thing all over.\n. Change all slashes to / instead of \\\n. Project.json as well not just the makefile\n. Tested on OSX doesn't work. I think we need to separate the kpm script change and push that first \n. This isn't the place to file bugs like this. KRuntime is for kpm, or k issues.\n. CLI mitigates this it's all out of proc \n. @hiiru awesome! I'm gonig to move this bug to the hosting repository (as that's where the issue is). I think you're on the right track though.\n. You mean stack traces that originate from the KRE itself obviously\n. I dunno, with the project being open source, it's kinda nice that people can see where things fail and potentially fix the bug.\n. \"the bug\" is symbolic. If there was a bug then it's kinda nice to see the stack trace. But this can be controlled with a flag. Potentially KRE_TRACE=1\n. Too hard to stop execution flow and get a message out without exceptions.\n. Calling Environment.Exit(...) from a library is just bad. Anyways, I'll look into the bug. There's been several attempts to make this better but if we can reliably detect when we're in user code vs not, we can make it better.\n. I think we'll need to go back and forth here. Hiding stack traces for load errors for example is a bad idea and we'll need to get more specific about what we hide exactly.\n. :shipit: \n. File this on the home repo\n. 2 things:\n1. Any portable class library you have isn't compatible with aspnetcore50 (it just isn't)\n2. We're making this work with https://github.com/aspnet/KRuntime/issues/827\n. I wouldn't recommend creating portable class libraries this way. We also don't make compiler directives when you use the PCL targets.\n. Agreed, kproj exists solely for visual studio. The runtime and new sdk don't require it at all. If you are using visual studio though, they are still required. We already have global.json and I don't think we need to repurpose project.json to be solution level and project level.\n. File this on the scaffolding project\n. :shipit: \n. @nosami CLA?\n. :shipit:\n. Ok I gave this thing a test drive and there are some problems:\n- If a package has multiple assemblies, it still creates project.json on disk for the assemblies that don't match the package id, that's not right. The example you can use is EntityFramework 6.1.1. \n- Project references need to be added based on the output name not the project name. If you change the name of the output assembly, it creates a new project but the project dependencies to that project aren't updated\n- The changes to project.json should be incremental (don't update things if they are already there etc). Do the minimal amount of work.\n- NuGet packages from packages.config should be added to the project.json without checking the reference type. Always ignore the package's target framework when adding it to the dependencies section. Always use the project's target framework.\n- Use / instead of \\\\ when generating relative paths\n. That should be fine for now. I was thinking of users modifying dependencies after wrapping a project. \n. Did this break the mono build?\n. @victorhurdugaci can you make sure this doesn't break the scripts we have? kpm build on each project copies it to a specific folder. We use this for incremental building and testing of the KRE\n. I'm pretty sure this breaks the incremental copy when you enable the project to produce outputs on build\n. The build is broken \n. Closing this as it could be another command line tool\n. What's about dependencies?\n. This should be a flag on the exe, not on by default\n. We need to enable this via a flag. Closing this for now.\n. Looks like #464 \n. Needs configuration too. Does it make sense making this change in this branch? Why not do it after the mono change is in?\n. After that last change, :shipit: \n. Sweet! @borgdylan, when are you going to start sending more pull requests? :smile: \n. /cc @Eilon \n. This should be better in later versions\n. @Tragetaschen this PR's been open for a while and has gotten stale (thanks to us). I'm going to close this out. Can you add an example to the Entropy repository instead? That's where we put samples like this. \n. Nice! We actually don't want to implement maximums this very moment (that's why it's in the backlog). If we did it though, we'd either use the nuget/maven syntax or ruby gems. I believe the dependency resolved needs to be updated to handle maximums for potential conflicting version ranges\n. That's not how we'd do this and we're not quite ready to support maximums as yet. We'd probably just support a syntax similar to nuget and/or npm/bower\n. I need to see a deeper graph so I know if this is usable\n. /cc @pranavkm \n. Needs spacing between those to make them more readable\n. The dependency chain should probably only show up when you specify verbose\n. @ChengTian should we close this?\n. Why is the makefile so messed up?\n. I can build without any issues, why is this required?\n. Did you run kvm upgrade?\n. This was fixed yesterday. https://github.com/aspnet/KRuntime/commit/561ed8f5ac025933fa7f781104cd0eff40396b1a\n. :shipit: \n. :shipit: \n. :shipit: \n. @Tragetaschen did you sign a CLA? /cc @Eilon \n. None of the code in kpm wrap will work on mono. Instead, if we choose to support this, we can use this logic https://github.com/OmniSharp/omnisharp-roslyn/blob/master/src/OmniSharp/MSBuild/ProjectFile/ProjectFileInfo.cs#L104\n. We're not going to do this. XBuild is a trap :smile: and this wont work in the 80% case.\n. Would be nice to add some logging to say what's going on (maybe verbose). Like the msbuild version being used.\n. :shipit: \n. Nuget package manager needs to be updated to understand the new frameworks \n. This was implemented. https://github.com/aspnet/XRE/commit/f0cb65a353922c4ea53c12ad11b6e2a38588b64b\n. We also need to be config agnostic when we generate stuff from the output path.\n. :shipit: \n. :shipit: \n. Fix all of your formatting. It's messed up.\n. :shipit: \n. Looks like a bad install of something. What version of mono are you using?\n. Never seen this one before but it looks like your version of mono is busted. Try filing this on the home repository to see if anyone else is having the same issue.\n. yep!\n. We need this for Beta5 since we removed the reference assembly emit. This should replace that. You should be able to emit without putting anything on disk. This Emit should support producing an assembly stream and a symbol stream.\n. Moved to the backlog, this isn't important right now.\n. Deprecated\n. File this on the kvm repository\n. @akoeplinger we've renamed it to projects\n. :shipit: \n. @troydai build verify should always pass\n. What does this even mean?\n. It isn't. The approot lives as a sibling to the wwwroot.\n. How did you do this before ASP.NET 5? Can you walk me through that process?\n. I'm pretty sure it can be made to work but there are differences that need to be considered. We'll take a look at this and get back to you\n. No updates on this as yet. We're still busy making the fundamentals solid. We'll need to have a discussion on the possible options here.\n. Everything here is workable btw with the platform handler. You can host N applications by swapping the layout as follows:\n/someroot/\n    /app1/web.config  <- moved to the root\n             /approot/code here\n             /wwwroot/*.*  <- static files are here\n    /app2/web.config\n    ..\n    /appN/web.config\nThe layout is changing to something more flat in the RC2 timeframe but it's the same idea:\n/someroot/\n           /app1/web.config\n                    /wwwroot/*.* <- static files\n                   *.dll\nAs part of moving web.config up one level, you also need to change the executable entry to point to the right relative path but it should be trivial to do.\n. I believe the logic in the original article will work now since the layout is much closer to what the original model had (single root folder). The major difference is that no longer have folders that are siblings to the wwwroot folder. . :shipit: \n. :shipit: \n. :shipit: \n. @victorhurdugaci did you mean with this new change?\n. It does without last I checked.\n. Looks great (if it works :wink: )\n. :shipit: \n. Not needed anymore\n. I'm not sure this is possible. The design time host project provider should be used. I think you want to implement your own project provider on top that knows how to find your dependencies instead of assuming that the built in one will just work.\nFurthermore, if your project overrides the provider in project.json, DTH should use that instead of roslyn.\n. Yes\n. When running in VS roslyn is swapped out for the out of process compiler. That shouldn't affect your custom loader. If you use the languages section it will eventually be used by the DTH provider but that doesn't work yet.\n. Closing this out\n. /cc @ChengTian \n. These bugs were never triaged and never put in a milestone. @dougbu Ping @glennc and the triage team about these issues if you want to get them into beta2.\n. Here's what I got when I ran ./build.sh dev-install: \nDavids-MacBook-Pro-2:KRuntime dfowler$ ./build.sh dev-install\ninfo: Target dev-install\ninfo: Exec\ninfo:   program: ln\ninfo:   commandline: -s /Users/dfowler/dev/git/ProjectK/KRuntime/artifacts/build/KRE-Mono /Users/dfowler/.kre/packages/KRE-Mono.1.0.0-dev\ninfo:   workingdir: /Users/dfowler/dev/git/ProjectK/KRuntime\ninfo: Exec\ninfo:   program: bash\ninfo:   commandline: -c 'source /Users/dfowler/.kre/kvm/kvm.sh && kvm alias Mono-dev KRE-Mono.1.0.0-dev'\ninfo:   workingdir: /Users/dfowler/dev/git/ProjectK/KRuntime\nKRE-Mono.KRE-Mono.1.0.0-dev is not an installed KRE version\nwarn: Exit code 1 from bash\nverbose: Stack trace: \n  at View7184b97ab7cd4a41ae11ff7ef734d61d.Exec (System.String program, System.String commandline) [0x00000] in <filename unknown>:0 \n  at View7184b97ab7cd4a41ae11ff7ef734d61d.InstallDevKRE (System.String binPath) [0x00000] in <filename unknown>:0 \n  at View7184b97ab7cd4a41ae11ff7ef734d61d+<RenderViewLevel0>c__AnonStorey2.<>m__27 () [0x00000] in <filename unknown>:0 \n  at Sake.Engine.Builder.BuilderBase`1[System.Object].CallTarget (System.String name) [0x00000] in <filename unknown>:0 \n  at Sake.Engine.SakeEngine.Execute (Sake.Engine.Options options) [0x00000] in <filename unknown>:0 \n  at Sake.Engine.SakeEngine.Execute (System.String[] args) [0x00000] in <filename unknown>:0 \n  at Sake.Program.Main (System.String[] args) [0x00000] in <filename unknown>:0 \nDavids-MacBook-Pro-2:KRuntime dfowler$\n. Wait I have to update kvm don't I\n. Installed the latest kvm.sh:\nDavids-MacBook-Pro-2:KRuntime dfowler$ ./build.sh dev-installinfo: Target dev-install\ninfo: Exec\ninfo:   program: ln\ninfo:   commandline: -s /Users/dfowler/dev/git/ProjectK/KRuntime/artifacts/build/KRE-Mono /Users/dfowler/.kre/packages/KRE-Mono.1.0.0-dev\ninfo:   workingdir: /Users/dfowler/dev/git/ProjectK/KRuntime\ninfo: Exec\ninfo:   program: bash\ninfo:   commandline: -c 'source /Users/dfowler/.kre/kvm/kvm.sh && kvm alias Mono-dev KRE-Mono.1.0.0-dev'\ninfo:   workingdir: /Users/dfowler/dev/git/ProjectK/KRuntime\nSetting alias 'Mono-dev' to 'KRE-Mono.1.0.0-dev'\nBut kvm list shows nothing:\nActive Version              Runtime Location             Alias\n------ -------              ------- --------             -----\n       1.0.0-beta1-10465    Mono    ~/.kre/packages      \n       1.0.0-beta1-10480    Mono    ~/.kre/packages      \n       1.0.0-beta1-10482    Mono    ~/.kre/packages      \n       1.0.0-beta1-10487    Mono    ~/.kre/packages      \n       1.0.0-beta1-10492    Mono    ~/.kre/packages      \n       1.0.0-beta1-10494    Mono    ~/.kre/packages      \n       1.0.0-beta1-10505    Mono    ~/.kre/packages      \n       1.0.0-beta1-10523    Mono    ~/.kre/packages      \n       1.0.0-beta1-10530    Mono    ~/.kre/packages      \n       1.0.0-beta1-10538    Mono    ~/.kre/packages      \n       1.0.0-beta1-10562    Mono    ~/.kre/packages      \n       1.0.0-beta1-10567    Mono    ~/.kre/packages      \n       1.0.0-beta1-10572    Mono    ~/.kre/packages      \n       1.0.0-beta1-10584    Mono    ~/.kre/packages      \n       1.0.0-beta2-10597    Mono    ~/.kre/packages      \n       1.0.0-beta2-10660    Mono    ~/.kre/packages      \n       1.0.0-beta2-10664    Mono    ~/.kre/packages      \n       1.0.0-beta2-10665    Mono    ~/.kre/packages      \n       1.0.0-beta2-10687    Mono    ~/.kre/packages      \n       1.0.0-beta2-10688    Mono    ~/.kre/packages      \n       1.0.0-beta2-10708    Mono    ~/.kre/packages      \n       1.0.0-beta2-10709    Mono    ~/.kre/packages      \n       1.0.0-beta2-10733    Mono    ~/.kre/packages      \n  *    1.0.0-beta2-10739    Mono    ~/.kre/packages      default\n. kvm list needs to be updated to support symbolic links (kvm.sh)\n. And somehow, there's double slashes:\nDavids-MacBook-Pro-2:KRuntime dfowler$ find ~/.kre/packages/ -name \"KRE-*\" -type l\n/Users/dfowler/.kre/packages//KRE-Mono.1.0.0-dev\n. I'd suggest trying these instructions out on somebody who has never built KRuntime. /cc @muratg \n. Incremental builds don't quite work on mono because we need to update all of the build scripts to copy these after.\n. Yes that sounds like a bug. Need to think about it a bit but at first glance it should be consistent.\n. What are the versions of everything in the stack.\n. Needs to be moved to the tooling issues.\n. Going to merge this in. Is there anything we can do to test the before and after behavior?\n. Yes\n. @gulbanana bare in mind that you cannot publish nuget packages that reference assemblies to nuget.org. This is mainly for apps.\n. Copy local assemblies for what? The nuget package? Like I said, for applications it's fine because there is an equivalent of copy local (a local file system publish) for deployment. \nFor a class library, there isn't an equivalent. The sharing mechanism is NuGet and we don't generate packages with multiple assemblies. So MyProject -> Foo.dll, you'll end up with a package that depends on a another package called Foo. You'll just have to wrap Foo in a package (which this feature gives you for free since it wraps your assembly), and assuming that you own Foo as well, then you can push the closure of packages to whatever source you need to.\n. If this is a library, just make each assembly a package. But if you're just copying dlls, around and you can somehow find the closure then sure.\n. We decided to implement a new command decoupled from build:\nkpm feed add [nupkg] [source] - Adds a nuget package to the specified feed\nkpm feed push [remote] [source]\nkpm feed pull [remote] [source]\nThe workflow will be:\nc:\\HelloWorld> kpm build\nc:\\HelloWorld> kpm feed add bin\\Debug\\HelloWorld.nupkg %userprofile%\\.kpm\\packages\nWe may have a default which means add to the default kpm cache (%userprofile.kpm\\packages)\n/cc @lodejard \n. Fixed in https://github.com/aspnet/KRuntime/commit/1eec12bf46f9a92a6fee03975501dace4710ab6f\n. The strong naming things seems unfortunate, but ya gotta do what ya gotta do. As for the msbuild stuff, I already wrote a prototype for this:\nhttps://github.com/davidfowl/MSBuild.AssemblyNeutralSupport\n. RIP\n. No \ud83d\ude03. I think you should use a csproj for this l. Combined with kpm wrap to bootstrap the package building process \n. We can do this now everywhere thanks to https://github.com/dotnet/roslyn/commit/f591db040a09b0d958b628a4183a332bea6834c1\n. Yes, it needs to work the same way.\n. :shipit: \n. To align with nuget pack :smile: \n. If you deploy source though, you might need this. \n. :shipit: \n. This is a bug in our stack and loader.\n. Embedded assembly neutral interfaces will be embedded under AssemblyNeutral/Assembly.dll. We'll look for these assemblies specifically.\n. Yea it doesn't work. Set the http://msdn.microsoft.com/en-us/library/system.appdomainsetup.appdomainmanagerassembly(v=vs.110).aspx to null or empty string and see if that works.\n. I believe this works now without having to specify the domain manager as empty string\n. Just tried it and I'm getting a new error:\nC#\nSystem.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception.\n   at DomainManager.BindApplicationMain(ApplicationMainInfo& info)\n   at DomainManager.InitializeNewDomain(AppDomainSetup appDomainInfo)\n   at System.AppDomain.CreateAppDomainManager()\n   at System.AppDomain.Setup(Object arg)\n   at System.AppDomain.nCreateDomain(String friendlyName, AppDomainSetup setup, Evidence providedSecurityInfo, Evidence creatorsSecurityInfo, IntPtr p\narentSecurityDescriptor)\n   at System.AppDomainManager.CreateDomainHelper(String friendlyName, Evidence securityInfo, AppDomainSetup appDomainInfo)\n   at System.AppDomainManager.CreateDomain(String friendlyName, Evidence securityInfo, AppDomainSetup appDomainInfo)\n   at System.AppDomain.InternalCreateDomain(String friendlyName, Evidence securityInfo, AppDomainSetup info)\n   at System.AppDomain.CreateDomain(String friendlyName, Evidence securityInfo, AppDomainSetup info)\n   at System.AppDomain.CreateDomain(String friendlyName)\n   at ConsoleApp1.Program.Main(String[] args) in C:\\Users\\davifowl\\Documents\\Visual Studio 14\\Projects\\WebApplication7\\src\\ConsoleApp1\\Program.cs:line\n 10\nWe'll have to clean up our AppDomainManager so make it handle this.\n. Fixed in https://github.com/aspnet/XRE/commit/16fd19ac4ce951ee426ee40ee887e32806663436\n. I don't know if we have a place to do this anymore.\n. What hangs? Those look like http calls to me. We're still working with the nuget team to come up with a more formal way to represent these types of packages with native dependencies.\n. What does the error list say\n. Yep, that error makes sense. Don't put the DLL there. This package won't work with ASP.NET 5 projects as yet. We need a way to determine what native dependencies are so we can wire up the runtime appropriately. \n. I'm afraid the workaround for this issue isn't trivial. You'd need to load the native dll yourself to make it work right now. There are APIs you can use to locate it though\n. Or you can try putting it in the project root.\n. This issue unfortunately won't fix itself. Anything we do will require those packages to be republished to support the new package layout. See #402 for more details.\n. It actually does...\n. @victorhurdugaci is this fixed now? /cc @troydai \n. /cc @anurse \n. You'll need to provide repo steps since nothing explicitly changed here.\n. Make a github repo, that's more convenient.\n. Do you load assemblies explicitly in your compiler? Using Assembly.Load\n. So this is what I see:\nklr Information: 0 : [DependencyWalker]: Resolved dependencies for hellotasks in 33ms\nklr Information: 0 : [ProjectExportProviderHelper]: Resolving references for 'hellotasks'\nklr Information: 0 : [ProjectLibraryExportProvider]: GetLibraryExport(hellotasks, Asp.Net,Version=v5.0, Debug, )\nklr Information: 0 : [LoaderContainer]: Load name=de6aeb0d-65bb-4c58-95ee-740624690596$dylan.NET.K\nklr Information: 0 : [LoaderContainer]: Load name=dylan.NET.K\nklr Information: 0 : [LoaderContainer]: Load name=dnu\nklr Information: 0 : [LoaderContainer]: Load name=de6aeb0d-65bb-4c58-95ee-740624690596$dnu\nklr Information: 0 : [LoaderContainer]: Load name=dnu\nklr Information: 0 : [dylan.NET.K.DNProjectReferenceProvider]: GetProjectReference(hellotasks, Asp.Net,Version=v5.0, Debug, )\nklr Information: 0 : [ProjectExportProviderHelper]: Resolving references for 'hellotasks'\nklr Information: 0 : [LoaderContainer]: Load name=System.Reflection.Metadata\nklr Information: 0 : [PathBasedAssemblyLoader]: Loaded name=System.Reflection.Metadata in 16ms\nklr Information: 0 : [LoaderContainer]: Load name=System.Collections.Immutable\nklr Information: 0 : [PathBasedAssemblyLoader]: Loaded name=System.Collections.Immutable in 8ms\nklr Information: 0 : [ProjectExportProviderHelper]: Resolved 54 references for 'hellotasks' in 131ms\nklr Information: 0 : [LoaderContainer]: Load name=dnc\nklr Information: 0 : [LoaderContainer]: Load name=de6aeb0d-65bb-4c58-95ee-740624690596$dnc\nklr Information: 0 : [LoaderContainer]: Load name=dnc\nklr Information: 0 : [LoaderContainer]: Load name=dnr\nklr Information: 0 : [LoaderContainer]: Load name=de6aeb0d-65bb-4c58-95ee-740624690596$dnr\nklr Information: 0 : [LoaderContainer]: Load name=dnr\nklr Information: 0 : [LoaderContainer]: Load name=tokenizer.CodeGen\nklr Information: 0 : [LoaderContainer]: Load name=de6aeb0d-65bb-4c58-95ee-740624690596$tokenizer.CodeGen\nklr Information: 0 : [LoaderContainer]: Load name=tokenizer.CodeGen\nklr Information: 0 : [LoaderContainer]: Load name=C5\nklr Information: 0 : [LoaderContainer]: Load name=de6aeb0d-65bb-4c58-95ee-740624690596$C5\nklr Information: 0 : [LoaderContainer]: Load name=C5\nklr Information: 0 : [LoaderContainer]: Load name=dnu\nklr Information: 0 : [LoaderContainer]: Load name=dnr\nklr Information: 0 : [LoaderContainer]: Load name=tokenizer.CodeGen\nklr Information: 0 : [LoaderContainer]: Load name=C5\nklr Information: 0 : [LoaderContainer]: Load name=IKVM.Reflection\nklr Information: 0 : [LoaderContainer]: Load name=de6aeb0d-65bb-4c58-95ee-740624690596$IKVM.Reflection\nklr Information: 0 : [LoaderContainer]: Load name=IKVM.Reflection\nklr Information: 0 : [LoaderContainer]: Load name=tokenizer.Lexer\nklr Information: 0 : [LoaderContainer]: Load name=de6aeb0d-65bb-4c58-95ee-740624690596$tokenizer.Lexer\nklr Information: 0 : [LoaderContainer]: Load name=tokenizer.Lexer\nklr Information: 0 : [LoaderContainer]: Load name=tokenizer.AST\nklr Information: 0 : [LoaderContainer]: Load name=de6aeb0d-65bb-4c58-95ee-740624690596$tokenizer.AST\nklr Information: 0 : [LoaderContainer]: Load name=tokenizer.AST\nklr Information: 0 : [LoaderContainer]: Load name=tokenizer.AST\nSystem.TypeLoadException: Abstract method with non-zero RVA.\n   at dylan.NET.Compiler.Program.main(String[] args)\n   at dylan.NET.Compiler.Program.Invoke(String[] args)\n   at dylan.NET.K.DNCompilation.CompileInMemory()\n   at dylan.NET.K.DNCompilation.GetProjectReference()\n   at dylan.NET.K.DNProjectReferenceProvider.GetProjectReference(Project project, ILibraryKey target, Func`1 getExport, IList`1 outgoingRefs)\n. I wonder if you're seeing this bug https://github.com/davidfowl/Mono-Assembly-Resolve-Issue\n. It's a bug in mono. I'm not saying we won't work around it but it's an incompatibility in behavior that might be causing the issue you're seeing.\n. Will look into it when I get back from vacation on thurs\n. This mono bug was fixed\n. Shiptit\n. This happens  in the runtime because we don't fail for circular references right now:\nhttps://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.Runtime/DependencyManagement/WalkContext.cs#L87\nCycles are broken here but this doesn't flow out of the dependency walker. We should probably just throw instead.\n. Nope, if it stack overflows it's a cycle. The only difference between the two is fallback semantics. \n. Closing this and opening a new bug about framework references being treated as packages\n. Fix the typo in your commit message\n. Lets do IsHttp the term local is overused\n. Ship it\n. Some comparisons on large graphs (these are on my mbp so with SSD):\nThis is a project with all of the same dependencies as the starter template:\njson\n{\n  \"version\": \"1.0.0-*\",\n  \"dependencies\": {\n    \"EntityFramework.SqlServer\": \"7.0.0-*\",\n    \"EntityFramework.Commands\": \"7.0.0-*\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-*\",\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Diagnostics.Entity\": \"7.0.0-*\",\n    \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-*\",\n    \"Microsoft.AspNet.Security.Cookies\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-*\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-*\",\n    \"Microsoft.Framework.ConfigurationModel.Json\": \"1.0.0-*\",\n    \"Microsoft.Framework.CodeGenerators.Mvc\": \"1.0.0-*\",\n    \"Microsoft.Framework.Logging\": \"1.0.0-*\",\n    \"Microsoft.Framework.Logging.Console\": \"1.0.0-*\",\n  },\n  \"frameworks\": {\n    \"aspnet50\": {\n    },\n    \"aspnetcore50\": {\n    }\n  }\n}\nBefore\nResolved dependencies for HelloWorld in 3065ms\nAfter\n[DependencyWalker]: Resolved dependencies for HelloWorld in 955ms\n. Doesn't conflict /cc @troydai\n. Does this still happen with the latest?\n. For this to be a proper kpm command it has to be general purpose. kpm dpa is a pretty cryptic name. Can I generally use this on any project? We need to figure out the layering here. There can be a dependency analyzer command and then maybe we use the output of that command to build the TPA list. \nPutting it all into kpm doesn't make much sense as it's only used to build the KRE.\n. Yes this is a dupe of https://github.com/aspnet/KRuntime/issues/973\n. Yes, use a specific version. There's no way to say always use the latest.\n. Don't really think it's the same for external dependencies and not realistic to just use the latest all the time. However, we do something similar with our projects (ASP.NET 5 is 30+ repositories) and for that we use snapshot versions (http://stackoverflow.com/a/5901460/45091). If you take a look at any of our projects:\nhttps://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNet.Mvc.Core/project.json#L7\nYou'll see that it references 1.0.0-* or 6.0.0-*. These are projects that are being built as packages. We reference the latest built version (it's similar to ripple in that way). I think this is a better way to achieve what you're going for.\nThat said, we will eventually support version ranges but I'd rather not conflate the 2 things. \n. How often to you float dependencies against released software not under your control? Seems like the minority case and version ranges will let you at least have some control over what versions get referenced. \nJust referencing the latest seems like a bad idea anyways. Especially if you jump across major versions. It's like saying you want the latest MVC which is a major breaking change from any previous MVC (basically a rewrite). \n. I think it's something we have to do but to be honest, I'd rather we do it as the change will be very impactful to some of the stack. I'll put this bug in the RC milestone to investigate.\n. We might also want to support the syntax that other package managers have:\nJSON\n\"dependencies\": {\n  \"Microsoft.AspNet.Mvc\": \"~6.0.0\"\n}\nWhich means that you want to float 3rd number.\n. /cc @vijayrkn \n. That's by design. Use --ignore-failed-sources to ignore sources that may not be reachable or failing etc\n. /cc @anurse we should detect errors cases like this with the new runtime if possible.\n. @ChengTian fixed this by reporting the ambiguous projects.\n. What work is left here?\n. Yah this is all sorts of busted.\n. It's time to get rid of the Project assembly and merge it into kpm.\n. @shhsu Can you file a bug for this? /cc @muratg We'll do this properly in beta6.\n. Can you show the output without the pipe?\n. /cc @ChengTian \n. Sweet! Nuke it\n. Does it help with this scenario? /cc @pranavkm \n. arrays are supported as well.\n. Since beta1 or so\n. This was fixed.\n@troydai can you mark close this bug with the right tags?\n. > 1) In default mode, it lists all the packages on the feed. \nI think this is insane :smile:. We should look at what npm and other package manages do when listing remote packages. Maybe the default list command requires a search query and we can show results by feed. \nkpm list System.AppContext\nFor --local, I think you want to treat this command like a command line version of the references node in visual studio. You use it to see what your project is referencing, and to see unresolved dependencies and other information like that. \nMaybe if --runtime is specified, then we can walk past the package graph into the implementation, otherwise we don't show it by default. \n. I would also mirror the output of pack and build when listing dependencies \n. nit:\n\nList dependencies for C:\\myk\\KRuntime\\src\\Microsoft.Framework.Runtime.Roslyn\\project.json\n\nIt should be something like:\nListing dependencies for Microsoft.Framework.Runtime.Roslyn (C:\\myk\\KRuntime\\src\\Microsoft.Framework.Runtime.Roslyn\\project.json)\n. You may also want to consider showing an actual dependency tree.\n. By default? Nope, it should be an option though. This command looks promising but I think what I said holds. Assume this is the command line equivalent of the references node. Try using it that way on some projects and see if it's actually useful.\n. There also needs to be a --framework flag so you can specify which framework (of the ones specified in your project.json file) to show\n. https://docs.npmjs.com/cli/ls\n```\nparseable\nDefault: false\nType: Boolean\nShow parseable output instead of tree view.\n```\n. :shipit: after that last change\n. KVM is the way you manage versions of the KRE. We'll have MSIs as well. One thing you do bring up here that we have plans to implement, is a app/library saying what the minimum KRE version it requires to run. \n. /cc @ChengTian we need to fix this issue all up to make sure we're flowing the proper exit codes.\n. /cc @ChengTian \nI think we should get this in for beta4 /cc @glennc @muratg \n. @Tragetaschen @ChengTian rebased your work for you :smile:.Closing out this PR\n. :shipit: \n. I guess it's fine, :shipit: \n. Can you verify something that was broken before and fixed after to make sure this is actually effective? \n. :shipit: \n. What version of mono?\n. What version of the KRuntime? k --version?\n. Did you run kpm restore like the error says?\n. Ok, file a bug on that then.\n. You need to check all of the callers (like Helios) to make sure they don't explode\n. :shipit: \n. Part of any clean up that @moozzyk does\n. @vkairys did you sign a CLA? \n. :shipit: \n. Should we assume the default packages folder if the target isn't specified? /cc @loudej\n. @ChengTian very nice\n. @MattGal This is by design.\n. Yes, it'll be fixed in the re-architecting of dnx\n. Moved to beta7\n. Closing as dupe of https://github.com/aspnet/dnx/issues/726\n. The build script requires bash\n. Email dump \n```\nWe will have following project json elements:\n Compile (+ includes files to be compiled) \n<- compileExclude (- globbing rules excluding files or folders from compilation, overrides \u201ccompile\u201d)\n<- compileFiles ( + individual files included to compilation, overrides \u201ccompileExclude\u201d)\nContent (+ includes content files) \n<- contentExclude (- globbing rules excluding files or folders from packing, overrides \u201ccontent\u201d)\n        <- contentFiles (+  individually included content files, overrides \u201ccontentExclude\u201d)\n Exclude (- has highest priority, overrides everything in \u201ccompile\u201dand \u201ccontent\u201d. If file/folder is in \u201cexclude\u201d globbing, it is treated s excluded from project completely and should not be displayed in Solution Explorer) \n<- projectFiles (+includes individual files to the project and overrides \u201cexclude\u201d)\nSo if user, right clicks in the file in Solution Explorer and excludes file, it is added as globbing rule to \u201cexclude\u201d (and removed from \u201cprojectFiles\u201d if it is there) and removed from Solution Explorer.\nThen if user wants to include file back, click on Show All Files in Solution Explorer, right click and \u201cInclude file\u201d. This will add a file to \u201cprojectFiles\u201d list.\nNow if file is a .cs file, it will be treated as compilable only if it survives the \u201ccompile\u201d/\u201dcompileExclude\u201d/\u201dcompileFiles\u201d filter (Question: if it appears excluded by old compile rules should we automatically add cs files to \u201ccompileFiles\u201d list? Or do nothing and let user to change cs file \u201cExcluded from compile\u201d setting again?\nSame for content file\n```\n. /cc @BillHiebert\n. That doesn't look good to me. The sections are just expressed in the json file, they were just supposed to be titles.\nJSON\n{\n    \"compile\": [],\n    \"compileExclude\": [],\n    \"compileFiles\": [],\n}\nThe pattern is:\nthing\nthingExclude\nthingFiles\n/cc @lodejard Chime in here, I can't remember all of the details \n. @abpiskunov no, they can't.\n. If we choose to do excludes via !foo that's actually separate from this feature. We're still going to add the extra properties because it can be used by tools to easily edit the json file via UI gestures without having to do set logic on globbing patterns.\n. Yes it looks like a regression:\n. One thing we need to do is merge the help between the lower layer and apphost,\nklr -> Shows help for the klr.exe\nklr /path/to/project.json -> Shows help for klr.exe Microsoft.Framework.ApplicationHost\nThe latter is kind of weird so we should try to make this transparent so that klr --help just shows all the options.\n. Nice!\n. /cc @jaredpar \n. We have this\n. When the tabs are fixed, then ship it :shipit: \n. @lodejard YES! Lets move logger further down the stack!\n. Can we avoid this on local builds and only do it on the CI? Its pretty annoying.\n. @anurse changed the code to only do it on the CI\n. Having files changed on disk after build sucks\n. Keep the KRE_ env vars but also support DOTNET_ as well so we can transition people over.\n. @ChengTian as part of this change lets also make the \"run\" command implicit.\nklr /path/\nklr project.json\nklr /path/project.json\nShould just execute without requiring a command called run.\n. We should also try out the new code path in the makefile:\n- Change the test execution to use dotnet /path/ etc\n. One big thing missed is the renaming of the nuspec files that actually create the KRE. Replace KRE with dotnet in the nuspec files and ids.\n. :shipit: \n. Let's separate the 2 features. One is about nuspec parity. The other is a new feature inheriting some properties from global.json. Open another issue for that.\n. @djanosik do you want to code this up and send a pull request?\n. When we're out of prerelease mode but not until then. Another thing we need to do is pin the versions of tags so that you get the right set of dependencies\n. Opinion about the feature or something else?\n. We should do it.\n. Of course it is. What do you mean?\n. GetShortframeworkname\n. Sounds like a great idea. I think we had another bug to do this.\n. We shouldn't need this for v1.\n. We decided not do do this\n/cc @muratg @moozzyk \n. This will be handled by the new globbung changes. Specifying a an exclude won't change the built in ones\n. :shipit: \n. No going back in time here. Will be fixed going forward\n. :shipit: \n. :shipit: \n. @anurse can you move those files to be changed only on the CI, it's pretty annoying\n. @ChengTian add those files to teh gitignore\n. :shipit: \n. :shipit: \n. Ummmmm what about the build script?\n. :shipit: \n. @anurse I merge this in for you\n. Yess!!! :smile: \n. Known issue https://github.com/aspnet/XRE/pull/1112\n. @ChengTian @muratg \n. This is the same bug as #547 \n. Yes\n. Why is this in dev and not release?\n. How is this a bug?\n. This bug has nothing to do with security. Look at the title. \n. @blowdart :grin: \n. Closing this issue as we cannot do this.\n. I think this fix needs to go into the release branch.\n. Yes\n. Prabu, it's the same bug. It will fix both issues \n. I feel like we should do this in beta4 since we changed the command name and changed how it's supposed to be run.\n. :shipit: \n. @jskulavik No, there'll be a way to target different full framework runtimes. Just not in beta3\n. Where is the Microsoft.IdentityModel.Protocol.Extensions package?\n. Nobody should be using kpm and k in the bundle output but it doesn't hurt I guess.\n. It's been that way for a while. We need to change the build process to add an AssemblyInfo file.\n. As part of this work we're going to need to delete the global.json dependencies logic.\n. Nope\n. :shipit: \n. :shipit: \n. We shouldn't create any packages with those monikers. They are deprecated. Consumptions of packages that have those should work fine but producing them makes no sense.\n. Turns out this has nothing to do with the TFM but instead has to do with how service bus declares its dependencies. I've contacted them and there's a workaround you can apply in project.json to make this work. I'm going to close this for now.\n. :shipit: \n. Yes\n. Why didn't you run kpm restore --no-cache so it did it all in one go?\n. kpm -?\n. kpm [command] -?\n. Yah, any null ref is bad.\n. The second scenario doesn't make any sense. When you make an ASP.NET 5.0 project you use the new project type. \n. Thats why the project contains more than one target framework by default, it cross compiles. This gives you the greatest flexibility when targeting multiple platforms. Don't conflate the project system with the target framework. \nLook at the project system like a nuget package. Today a nuget package can target multiple platforms, and depending on what project you choose (you can even target a PCL), you get a reference to the most compatible platform within that package. This is no different.\nAs for the C++/CLI comment, thats why you can still target msbuild based when running in visual studio. \n. @gulbanana  BTW if you want to have a conversation about the new project system in real time you can ask questions on https://jabbr.net/#/rooms/AspNetvNext.\n. Marking this initial set of items as done.\n. It's already here in PR https://github.com/aspnet/XRE/pull/1169.\n. No, this is way too hard, talk to @glennc  :smile: \n. Why?\n. I don't see a reason to do it. \n. :shipit: \n. :shipit: \n. :shipit: \n. @shhsu will this happen during dev as well?\n/cc @jkotas @jhawk42 \nDo you guys know why this would happen?\n. Ah hah!\n. One issue with this change is the fact that we won't be able to load roslyn from the application as an override (if we choose to support that again). We need to see if that scenario still works with this change.\n. Closing this out as I'm sure there's nothing else we can do here\n. @troydai I think you should add test cases based on what exists today in all of our repos. Paths with slash in the other direction, absolute paths, not sure what else we do. EF has some interesting ones.\n. :shipit: \n. :shipit: !\n. :shipit: \n. https://github.com/aspnet/XRE/tree/bundle-one-folder I started a prototype here. A few things that we need to consider:\n- It should probably fail when you pass multiple frameworks or runtimes\n- Copying the minimal runtime required based on what other dependencies were used in the application itself and what is minimally required by the runtime.\n- Multiple runtimes should fail as well. Basically anything that would cause it to overwrite files in the same folder should fail.\n. @ChengTian we actually can do that without Assembly.GetReferencedAssemblies() (we shouldn't be loading anything anyways). Look at what kpm list does to get the assembly closure\n. :shipit: \n. +1 maybe just --debug\n. We have a main now, it's not required.\n. That's because you're using them incorrectly :smile: .\nkpm pack --framework aspnet50 --framework aspnetcore50\n. /cc @ChengTian \n. That's by design\n. We don't read nusepcs anymore and we do a directory check so closing this\n. /cc @BillHiebert \n. /cc @BillHiebert inorder to throw exceptions on f5, we need to pass a flag on launching for console apps in VS. \n. Closing this an opening a tooling issue.\n. :shipit: \n. You need to so it for the mono host as well.\n. @victorhurdugaci can you print the process id as well? Since we have a single host, it will help identify which klr.exr we need to attach to\n. @troydai marked bugs as \"Done\" when you fix them\n. This was done by @troydai. Can you mark link the commit @troydai \n. @troydai Test out this PR first,https://github.com/aspnet/XRE/pull/953\n. @troydai Do we need this?\n. :shipit: \n. @anfomin Are you using beta4 bits? I'm asking because I'd love to know how you're using them on windows. Are you using Visual Studio?\n. You might be running an older version of kvm itself.\n. Likely because we need to lock in the LoadContextAccessor on desktop CLR\n. :shipit: \n. Do we need this for the sh scripts?\n. @ChengTian Does this affect kpm bundle? Does the lock file become invalid when you bundle?\n. /cc @ChengTian \n. That's not a bug. Type actually does not contain the member assembly anymore. For more information head over to github.com/dotnet/corefx. \nThe alternative is to use Type.GetTypeInfo().Assembly\n. Uh, this PR looks ruined.\n. +1 @jeffhandley Make the change @troydai and :shipit: \n. What is the purpose of this change?\n. Did you test this change in visual studio?\n. I think you should let the exception get thrown and handle it in the apphost just like compilation exceptions are handled\n. > Talked with @loudej and @ChengTian about potential fixes for this issue and @loudej suggested we make shared sources transitive where the nupkg for B would contain a dependency on shared source A. This way package resolution can only bring in one copy of A.cs and essentially only ever do 1 copy of all sources from shared sources.\n/ -- B -- \\\nTestApp             A\n         \\ -- C -- /\nDoes it mean that sources from A don't end up in B and C? What it does mean to bring in one copy of A.cs? Does it just dedupe based on path?\n. Yep, but this isn't a fix we can make right now. We need to get our dependency type support up to scratch.\n. irrelevant with nuget3 immutable content support\n. /cc @pranavkm @ChengTian \n. It does update on restore \n. Closing this a dupe https://github.com/aspnet/XRE/issues/1220\n. As for the schema changes, lower your expectations as we are in active development and you are using nightly bits. Errors will be better between shipped versions, not random nightly builds. We're still iterating.\n. /cc @ChengTian I ran into this too.\n. :shipit: \n. We have a new JSON parser that doesnt support comments https://github.com/aspnet/Announcements/issues/24\n. We need to keep an eye out for the number of things that break because of this appbase change\n/cc @shhsu @jhawk42 \n. 46? That's a 461 change\n. Irrelevant with CLI work\n. You can also mention that you can git clone --recursive\n. Did you look at all of the places that this class is used? This looks pretty dangerous to me...\n. :shipit: \n. I'm not sure I like it.\n. :-1: \n. This is pretty bad.\n. @muratg I think @moozzyk would be better suited to do this :smile: \n. LGTM\n. @ChengTian Lets keep the SHAs on disk for kpm restore. That'll make it easy for people to create a  packages cache and will avoid doing any crypto at runtime.\n. What is KRE_APPBASE set to?\n. Seems like no...\n. Moving this out. I'll pull in some major pieces from @lodejard 's work in beta5\n. If you override code then you need to specify the defaults, e.g. \nJSON\n{\n    \"code\": [\"**/*.cs\", \"../includespecial/*.cs\"]\n}\n/cc @troydai is working on a change to make it so that you don't have to respecify defaults, but will let you override them when needed.\n. That would be in tfs. I'm think there is one /cc @mayurid @PradeepKadubandi @BillHiebert \n. I don't see how appdata makes any sense for something that is per project.\n. We're not going to move this file. In some cases it can be checked into source control.\n. /cc @victorhurdugaci \n. @victorhurdugaci Restore for the commands needs to write a lock file.\n. What does this do?\n. It might makes sense to do this in the rewrite.\n. This is done right?\n. Where is the tag? \n. What's the bug?\n. Thats by design. Use kpm restore --ignore-failed-sources. \n. @dsplaisted What package source returns a 404 for missing packages? In the v2 protocol it usually returns an empty data set.\n. It doesn't and if it did that was a bug.\n. I believe we fixed this\n. Because we decided that it's not great behavior. You want to know when the sources you configured aren't effective. We're looking at changing nuget.config altogether though. Global config hierarchy of sources will likely go away as it causes too many issues in real scenarios. \nYour global sources should not be inherited into every project by default.\n. Dupe of https://github.com/aspnet/XRE/issues/1274\n. Wrong bug number https://github.com/aspnet/XRE/issues/1271\n. This isn't a bug in the runtime. It was a bug in MVC\n. Did you try this in VS?\n. :shipit: \n. when you run what happens exactly?\n. Can you put the exception in here.\n. So this bug report isn't very accurate. So we need to formalize a repro here. \n- Seems like it doesn't have anything to do specifically with nested folders. If it does, can you reproduce this with a simple application? I couldn't.\n- Were the MVC projects added to the solution in your case?\n. I can reproduce the issue and it looks like it's because projects aren't added to the solution. It's a tooling issue\n. Yes I did\n. This was done already \n. It's since been fixed \n. /cc @ChengTian \nWhat KRE are you using?\n. Can you give the exact version in use.\n. Can you show the project.json file\n. I don't get that exception. \n. Did you lock the lock file or something?\n. Can you reproduce the bug?\n. Yes, the lock file format changed. This bug can be closed then.\n. When we actually release a version we'll do this. You're using nightlies.\n. Yea, don't do that anymore. Instead use the snapshot feature of project.json.\n{\n    \"version\": \"0.1.0-dev-*\"\n}\nSet the env variable K_BUILD_VERSION to something, and the * will be replaced with that variable. We're going to make this more first class so you can also set that via a flag most likely. The assembly version info will come from this as well so you should never have to set it.\n. Thats how we build our projects. Everything is * in the project.json and no file on disk changes during build. The env variable is used to fill in the *\n. Can't do it for VS builds can only do it for command line builds. It only works in the pre tag at the moment:\nJSON\n{\n    \"version\": \"1.0.0-*\"\n}\n. I'll file something to make this a more first class feature.\n. We're the same team :smile: \n. It is, but the tooling for web stuff is pretty much the same team\n. The name frameworkDependencies isn't a good one. We need something like \"project.json\"\n. /cc @PradeepKadubandi \n. /cc @victorhurdugaci \n. This shouldn't break people that respecify the pattern today right?\n. Awesome! We need something for design time host \n. LGTM\n. I'll merge it in\n. :shipit: \n. This is a dupe of https://github.com/aspnet/XRE/issues/1215\n. I also couldn't repro it with those steps. Is it consistent for you?\n. Does it repro with the latest bits?\n. No that I'm aware of\n. This will probably break things in the NuGet resolver. Make sure the translation to physical paths works on all OSes\n. Is this good to go ?\n. /cc @ChengTian Also see https://github.com/aspnet/dnx/issues/1410. Will have to be updated after making this fix.  Seems like the lock file is generated with the slashes of the current OS (which makes it less portable). Right now the mono build is broken because of this.\n. /cc @BillHiebert @sayedihashimi \n. We're missing licenseUrl and copyright but the rest are available.\nhttps://github.com/aspnet/XRE/blob/dev/src/Microsoft.Framework.PackageManager/Building/BuildManager.cs#L244\nWe need to update the project.json schema.\n/cc @madskristensen @ChengTian \n. I'm not a fan of title but I understand that people do use it. \n. @conniey I also assume that by signing, you mean strong naming?\n. We currently have plans to strong name everything by default with a key that cannot be configured. This is mostly to support scenarios where people need to interop with desktop as our CoreCLR loader ignores strong naming.\n. This is all done in beta4. ReleaseNotes haven't been added because it's weird :smile: \n. We're not going to do this. We're already working on merging NuGet and kpm. You should eventually be able to use reason about dependencies using the nuget libraries. \n. If you want to figure out where a package is at runtime then there's another runtime API for that.\n. ILibraryManager: https://github.com/aspnet/KestrelHttpServer/blob/dev/src/Microsoft.AspNet.Server.Kestrel/KestrelEngine.cs#L17\n. ADFS support isn't on the top of the list at the moment. We likely also don't have the required core clr dependencies to make it work across all the stacks. \n. Isn't this a dupe of #1030?\nBTW you can pin a version of the KRE using global.json in a per solution manner.\n. We need a test \n. :shipit: \n. Why are your braces wrong for all of the test projects?\n. This is worse than I thought. Since we unify by name you can end up potentially compiling and running against the wrong thing.\n. That's the best it's going to be for a while. Closing this out.\n. Dupe of  https://github.com/aspnet/XRE/issues/583\n. :shipit:  Verify on mono\n. :shipit: !\n. @GrabYourPitchforks good point. We could, just force you to add the public key yourself.\n. Talk to Louis about this before doing anything. We had a discussion about this a while back.\n. Closing as nuget suppors this and we're moving it tonuget\n. This is done\n. Related to #1061 \n. k build hasn't worked since 0.1-alpha3, it's kpm pack now.\n. Tweaked it /cc @glennc \n. I'm hoping that core50 will be added in another PR?\n. @anurse The mono issue needs to be fixed.\nI think the other changes are good, but can you file bugs so we remember to clean this up right after?\nI was looking for the other changes we made when we went from k10 to aspnetcore50:\nhttps://github.com/aspnet/XRE/commit/b91f057e531322752bc72f9c0234ee5d7c2bfe40#diff-c4eba54c167015b27bebb155d182b953R104\n. This change has to wait on @anurse's changes\n. This will be part of @anurse refactoring work\n. Moved to https://github.com/aspnet/Universe/issues/172\n. @anurse assigned this to you and marked it as working.\n. You need to update the cpp file as well since you changed the define.\n. :shipit: \n. :shipit: \n. :shipit: \n. Wrong repo file this at aspnet/FileSystem\n. :shipit: \n. Since you changed all of the project.json files could you group the scripts? dnx451 then dnxcore50\n. :shipit: \n. Thought you might want to test it in the VS output to see how it looks\n. You need to update the lock file creation to also skip framework assemblies on dnxcore50 \n. Needs more error handling when the target framework being run that isn't in the project file:\nJSON\n{\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n    },\n    \"commands\": {\n        \"run\": \"run\"\n    },\n    \"frameworks\" : {\n        \"net45\" : {}\n    }\n}\nC:\\Users\\davifowl\\Documents\\Visual Studio 14\\Projects\\ClassLibrary29\\src\\ClassLibrary29> k run\nSystem.NullReferenceException: Object reference not set to an instance of an object.\n   at Microsoft.Framework.Runtime.NuGetDependencyResolver.<GetDependencies>d__13.MoveNext() in C:\\dev\\git\\ProjectK\\KRuntime\\src\\Microsoft.Framework.Runtime\\DependencyManagement\\NuGetDepend\ncyResolver.cs:line 85\n   at Microsoft.Framework.Runtime.WalkContext.<>c__DisplayClass1_0.<Walk>b__0(Node node) in C:\\dev\\git\\ProjectK\\KRuntime\\src\\Microsoft.Framework.Runtime\\DependencyManagement\\WalkContext.cs\nine 51\n   at Microsoft.Framework.Runtime.WalkContext.<>c__DisplayClass5_0.<ForEach>b__0(Node node, Int32 _) in C:\\dev\\git\\ProjectK\\KRuntime\\src\\Microsoft.Framework.Runtime\\DependencyManagement\\Wa\nContext.cs:line 265\n   at Microsoft.Framework.Runtime.WalkContext.ForEach[TState](Node root, TState state, Func`3 visitor) in C:\\dev\\git\\ProjectK\\KRuntime\\src\\Microsoft.Framework.Runtime\\DependencyManagement\\\nlkContext.cs:line 252\n   at Microsoft.Framework.Runtime.WalkContext.ForEach(Node root, Action`1 visitor) in C:\\dev\\git\\ProjectK\\KRuntime\\src\\Microsoft.Framework.Runtime\\DependencyManagement\\WalkContext.cs:line\n3\n   at Microsoft.Framework.Runtime.WalkContext.Walk(IEnumerable`1 dependencyResolvers, String name, SemanticVersion version, FrameworkName frameworkName) in C:\\dev\\git\\ProjectK\\KRuntime\\src\nicrosoft.Framework.Runtime\\DependencyManagement\\WalkContext.cs:line 42\n   at Microsoft.Framework.Runtime.DependencyWalker.Walk(String name, SemanticVersion version, FrameworkName targetFramework) in C:\\dev\\git\\ProjectK\\KRuntime\\src\\Microsoft.Framework.Runtime\nependencyManagement\\DependencyWalker.cs:line 45\n   at Microsoft.Framework.Runtime.DefaultHost.Initialize() in C:\\dev\\git\\ProjectK\\KRuntime\\src\\Microsoft.Framework.Runtime\\DefaultHost.cs:line 74\n   at Microsoft.Framework.Runtime.DefaultHost.GetEntryPoint(String applicationName) in C:\\dev\\git\\ProjectK\\KRuntime\\src\\Microsoft.Framework.Runtime\\DefaultHost.cs:line 59\n   at Microsoft.Framework.ApplicationHost.Program.ExecuteMain(DefaultHost host, String applicationName, String[] args) in C:\\dev\\git\\ProjectK\\KRuntime\\src\\Microsoft.Framework.ApplicationHo\n\\Program.cs:line 206\n. Another bug that is a bit more complicated:\nA -> B\nA/project.json\nJSON\n{\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"ClassLibrary1\": \"\"\n    },\n    \"commands\": {\n        \"run\": \"run\"\n    },\n    \"frameworks\" : {\n        \"dnx451\" : { }\n    }\n}\nB/project.json\nJSON\n{\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"Newtonsoft.Json\": \"6.0.6\"\n    },\n    \"frameworks\" : {\n        \"net40\": { }\n    }\n}\nAfter running restore and running:\nC:\\Users\\davifowl\\Documents\\Visual Studio 14\\Projects\\ClassLibrary29\\src\\ClassLibrary29> k run\nSystem.InvalidOperationException: Unable to load application or execute command 'ClassLibrary29'. Available commands: run. ---> System.NullReferenceException: Object reference not set to an\ninstance of an object.\n   at Microsoft.Framework.Runtime.NuGetDependencyResolver.PopulateMetadataReferences(PackageDescription description, FrameworkName targetFramework, IDictionary`2 paths) in C:\\dev\\git\\Project\nK\\KRuntime\\src\\Microsoft.Framework.Runtime\\DependencyManagement\\NuGetDependencyResolver.cs:line 309\n   at Microsoft.Framework.Runtime.NuGetDependencyResolver.GetLibraryExport(ILibraryKey target) in C:\\dev\\git\\ProjectK\\KRuntime\\src\\Microsoft.Framework.Runtime\\DependencyManagement\\NuGetDepen\ndencyResolver.cs:line 292\n   at Microsoft.Framework.Runtime.CompositeLibraryExportProvider.<>c__DisplayClass2_0.<GetLibraryExport>b__0(ILibraryExportProvider r) in C:\\dev\\git\\ProjectK\\KRuntime\\src\\Microsoft.Framework\n. Closing this as it should be part of @moozzyk's general native code clean up.\n. /cc @Eilon \n. I'm assuming this has something to do with the rename. The newer packages are targeting a new target framework that won't work with the existing kre. You need to update:\nkvm => dnvm\nkre => dnx\n. See https://github.com/aspnet/dnx/pull/1511\n. Closing this bug out. See https://github.com/aspnet/dnx/issues/1470\n. Closing this for now. @moozzyk This should be part of your native code refactoring. Can you add this to that issue? Basically a set of bullets to clean up in the native code /cc @muratg \n. We shouldn't out any more effort into making kpm work with proxies. We're just going to merge with nuget and use the code that's in there (which pretty much handles all/most cases)\n/cc @emgarten\n. Nice\n. Nooooooo\n. Whats the state of this issue?\n. It does, your project.json should have dnx451 instead of aspnet50\n. Nice\n. :shipit: \n. Agreed that's unexpected. Do you want to send a PR to fix it?\n. Here's the line of code:\nhttps://github.com/aspnet/DNX/blob/dev/src/Microsoft.Framework.PackageManager/Building/BuildManager.cs#L195\nThere's a variable called success that you can check before executing the scripts\n. @lefb766 Did you test it out?\n. /cc @ChengTian \n. :shipit: \n. See https://github.com/aspnet/Home/issues/368\n. We don't make inconsistent changes to our NuGet.config files. We use a template in aspnet/Universe and copy that to all of the repositories. That said, I don't know if this works for us. \n@pranavkm @Praburaj  Can you see if this breaks NuGet.redirect.config?\n. @dougbu good point. We shouldn't do this\n. not a cache, a local packages folder that we use by convention.\n. Ah you're right, we do kpm packages add now for build install.\n. :shipit: \n. :shipit:\n. Screenshots on another OS?\n. Nope\n. CLI uses CSC so this should be fixed.\n. /cc @troydai \n. See https://github.com/aspnet/Home/issues/368\n. I'm sure I just closed this bug and pointed you to the issue on home so I'll do that here and write the short version.\nhttps://github.com/aspnet/Home/issues/368#issuecomment-78107172\nTL;DR \nWe renamed the TFMS and kre is now broken against the latest packages. The fix is to update everything. kvm -> dnvm. k -> dnx\n. /cc @troydai @victorhurdugaci \n. :shipit: \n. Irrelevant now with the CLI move\n. Not really. DOTNET_ANY IMO isn't that valuable to have.\n. And if there's a folder called run. We can just ignore it? What about the other commands?\n. It's worth noting that changing this might break visual studio /cc @sayedihashimi @PradeepKadubandi @BillHiebert \n. @BillHiebert I dont think it will affect tooling. Can you tell us how you're launching things today? I believe you're passing in the full path including the --appbase flag which should continue to work.\n. To avoid pissijg people off we stage changes like these. If a nightly build breaks your vs then we want to line it up with a VS release \n. :shipit: \n. Nobody said we're removing support for mono. \n. What about kpm bundle and kpm bundle --no-source operations?\n. @ChengTian Yes that has to go in as well.\n. @ChengTian did you test it on mono?\n. :shipit: \n. Is this a core clr question? If so file this on dotnet/coreclr\n. There's no support for this yet but I agree that this should be a thing. For now skip symbol packages because it'll just mess things up.\n. I'm seeing the same.\n. Found the issue.\n. @ChengTian can you make sure this bug gets fixed with #1299?\n. Did you modify the shared file logic in the nuget resolver?\n. Example from stylecop:\nc:\\users\\davifowl\\documents\\visual studio 14\\Projects\\WebApplication13\\WebApplication13\\Class1.cs(8,1): warning : SA1600 : CSharp.Documentation : The class must have a documentation header.\n. :shipit: \n. nice! :shipit: \n. Dependent assemblies aren't loaded by default from the side by side location.\nYou can add a custom IAssemblyLoader that handles that.\n. See this sample https://github.com/aspnet/Entropy/tree/dev/samples/Runtime.CustomLoader\n. I took a look at your code and you can totally implement that alot more efficiently by using a custom loader implementation.\n. Thank you! :smile: \n. Much better! :shipit: \n. I want self update! \n. Move this to aspnet/dnvm\n. Don't like this fix. Handle it like appbase. Consume the argument in managed code.\n. It doesn't because app host isn't removing the flag. Look at how appbase is handled and do the same\n. Did you add this to the *nix PAL as well?\n. :shipit: \n. :shipit: \n. This isn't something we're currently aiming to make a first class API in the short term. We are working on a rewrite that will allow this https://github.com/aspnet/dnx/tree/dev/src/Microsoft.Framework.Runtime.Hosting, but the first goal is to making it efficient rather than making it a nice public API.\nWhat behaviors do you want to use exactly?\n. Microsoft.Framework.Runtime is going to be phased out in favor of the other dll I posted. Assembly neutral interfaces were also removed. As for adding the net45 target, that's possible we'll see if it makes sense.\n. @mkosieradzki We're refactoring the existing logic instead of forking and trying to rewrite.\n. @LodewijkSioen This is totally a new baseplate.\n. @mkosieradzki Are you still interested in doing any of this work? I think it would be interesting as a community experiment to produce an implementation of https://github.com/aspnet/dnx/tree/dev/src/Microsoft.Dnx.Runtime.Abstractions and https://github.com/aspnet/dnx/tree/dev/src/Microsoft.Dnx.Compilation.Abstractions on vanilla .NET.\n. I should probably have warned you before sending this PR that we're not ready to take this change yet. The API in the dnx is also no stable and we plan to internalize most of it since we don't really want people to depend on it directly. It's great that you got it working and we do want to make the APIs available more broadly but this isn't a v1 thing. We may add more targets but I recommend using your fork until we figure out exactly what set of APIs we want to support.\n. @mkosieradzki Great work! \n\nBTW. regarding your previous post: .NET 4.5 version of Microsoft.Dnx.Compilation.Abstractions is definitely not necessary to have it all up and running while Microsoft.Dnx.Runtime.Abstractions is critical (but it is binary equivalent to the DNX451 version so no that's not a blocking problem at the moment).\n\nMicrosoft.Dnx.Compilation.Abstractions is required for things like MVC to run. Razor compilation relies on this today.\n\nReally great stuff about all this things is how thin the external hosting layer is and how much is done by xplat Microsoft.Dnx.ApplicationHost - I really love this design. Even if I stick to my fork I can have it compatible with any runtime as long as they use the same version of Microsoft.Dnx.Runtime.Abstractions.\n\nYep! Thanks! :smile: \n. With the move to the new CLI we've made libraries for the brains of DNX (not the execution part as yet). See https://github.com/dotnet/cli for more information. \n. Yea, Path.Combine does a lot of crap. We can probably to a concat since we know it's windows.\n. Yep I was thinking about that too but it required more changes than I felt like doing at the moment.\n. /cc @ChengTian \n. @MattGal We're revisiting this https://github.com/aspnet/dnx/issues/1530\n. Wrong repository, file this on aspnet/dnvm.\n. Also this is fixed now\n. Screen shots on windows and on mono plz.\n. Pedantic but relevant:\n- Don't call GetVersion on the startup path. Make it lazy (it already is)\n. :shipit: \n. Can you push this to a repository somewhere so I can see the layout in the project.\n. What version of mono?\n. The latest unstable version of the dnx prints out a summary of what things were considered during restore. That includes package sources and nuget.config files. \nIf this issues still persists, look at that log and reopen the issue with those details.\n. :shipit: Tested it out and it works great!\n. What happens when there is no servicing folder? None of this code runs right? It shoud all noop in that case. \nDid you test this out on mono?\n. Where exactly does it noop?\n. /cc @NTaylorMullen \n. I'd like @anurse to also help out on this as it involves refactoring pieces of the runtime.\n. I'll take this one\n. @troydai or @BrennanConroy can you work on this? It would be great since we have all flavors working in some form.\n. @GrabYourPitchforks can you take a look at this?\n. What about cold start?\n. :shipit:\n. :shipit: \n. :shipit: \n. File this on aspnet/Home. We can move it here if we discover it to be a dnx problem.\n. No project.lock.json?\n. /cc @anurse \n. @PradeepKadubandi @abpiskunov Why is it that dependencies are unresolved after opening? I thought we had logic that does a solution level restore (or per project) on projects with unresolved dependencies.\n. @abpiskunov Can you link to an issue here. I'm gonna close this out.\n. :shipit: \n. These were all added in the latest builds\n. https://github.com/aspnet/dnx/commit/dd88a6ee46c98e1276270e887dd2eaf6ea42458d\nhttps://github.com/aspnet/dnx/commit/cdad86f30495d970ab6fb61682892662195b1c3d\n. https://github.com/aspnet/dnx/commit/dd88a6ee46c98e1276270e887dd2eaf6ea42458d\nhttps://github.com/aspnet/dnx/commit/cdad86f30495d970ab6fb61682892662195b1c3d\n. Done in \nhttps://github.com/aspnet/dnx/commit/dd88a6ee46c98e1276270e887dd2eaf6ea42458d\nhttps://github.com/aspnet/dnx/commit/cdad86f30495d970ab6fb61682892662195b1c3d\n. Thanks!\n. Did you test cases where there were dramatic changes to the dependencies? \n. :shipit: \n. This was done by @ChengTian \n. JSON\n{\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"NuGet.Core\": \"2.8.3\"\n    },\n    \"frameworks\": {\n        \"dnx451\": { },\n        \"dnxcore50\": { }\n    }\n}\nResults in\nInformation: [LoaderContainer]: Load name=Microsoft.Framework.PackageManager\nInformation: [PathBasedAssemblyLoader]: Loaded name=Microsoft.Framework.PackageManager in 61ms\nRestoring packages for C:\\Users\\davifowl\\documents\\visual studio 14\\Projects\\WebApplication25\\src\\WebApplication1\\project.json\n  CACHE https://nuget.org/api/v2/FindPackagesById()?Id='NuGet.Core'\n  CACHE https://www.myget.org/F/aspnetvolatile/api/v2/FindPackagesById()?Id='NuGet.Core'\n  CACHE https://www.nuget.org/api/v2/package/Nuget.Core/2.8.3\n  CACHE https://nuget.org/api/v2/FindPackagesById()?Id='Microsoft.Web.Xdt'\n  CACHE https://www.myget.org/F/aspnetvolatile/api/v2/FindPackagesById()?Id='Microsoft.Web.Xdt'\nUnable to locate NuGet.Core >= 2.8.3. Do you mean Nuget.Core?\nWriting lock file C:\\Users\\davifowl\\documents\\visual studio 14\\Projects\\WebApplication25\\src\\WebApplication1\\project.lock.json\nRestore complete, 241ms elapsed\nErrors in C:\\Users\\davifowl\\documents\\visual studio 14\\Projects\\WebApplication25\\src\\WebApplication1\\project.json\n    Unable to locate NuGet.Core >= 2.8.3. Do you mean Nuget.Core?\nLoaded Module: dnx.clr.dll\nFound DLL Export: CallApplicationMain\n. Seems innocent at first, but when it happens via a transitive dependency:\nJSON\n{\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"NuGet.Indexing\": \"3.0.75-r-master\"\n    },\n    \"frameworks\": {\n        \"dnx451\": { },\n        \"dnxcore50\": { }\n    }\n}\nWriting lock file C:\\Users\\davifowl\\documents\\visual studio 14\\Projects\\WebApplication25\\src\\WebApplication1\\project.lock.json\nRestore complete, 14741ms elapsed\nErrors in C:\\Users\\davifowl\\documents\\visual studio 14\\Projects\\WebApplication25\\src\\WebApplication1\\project.json\n    Unable to locate NuGet.Core >= 2.8.3-alpha0001. Do you mean Nuget.Core?\nLoaded Module: dnx.clr.dll\nFound DLL Export: CallApplicationMain\nThis is because some nuspec way down the chain says Nuget.Core and this harder to fix:\n{\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"Nuget.Core\": \"2.8.3\",\n        \"NuGet.Indexing\": \"3.0.75-r-master\"\n    },\n    \"frameworks\": {\n        \"dnx451\": { },\n        \"dnxcore50\": { }\n    }\n}\nInformation: [LoaderContainer]: Load name=Microsoft.Framework.PackageManager\nInformation: [PathBasedAssemblyLoader]: Loaded name=Microsoft.Framework.PackageManager in 56ms\nRestoring packages for C:\\Users\\davifowl\\documents\\visual studio 14\\Projects\\WebApplication25\\src\\WebApplication1\\project.json\n  CACHE https://nuget.org/api/v2/FindPackagesById()?Id='Microsoft.Web.Xdt'\n  CACHE https://www.myget.org/F/aspnetvolatile/api/v2/FindPackagesById()?Id='Microsoft.Web.Xdt'\n  CACHE https://nuget.org/api/v2/FindPackagesById()?Id='System.Spatial'\n  CACHE https://www.myget.org/F/aspnetvolatile/api/v2/FindPackagesById()?Id='System.Spatial'\n  CACHE https://www.nuget.org/api/v2/package/System.Spatial/5.2.0\n  CACHE https://nuget.org/api/v2/FindPackagesById()?Id='WindowsAzure.Storage'\n  CACHE https://www.myget.org/F/aspnetvolatile/api/v2/FindPackagesById()?Id='WindowsAzure.Storage'\n  CACHE https://www.nuget.org/api/v2/package/WindowsAzure.Storage/2.0.5.1\n  CACHE https://nuget.org/api/v2/FindPackagesById()?Id='NuGet.Core'\n  CACHE https://www.myget.org/F/aspnetvolatile/api/v2/FindPackagesById()?Id='NuGet.Core'\n  CACHE https://www.nuget.org/api/v2/package/Nuget.Core/2.8.3-alpha0001\nWriting lock file C:\\Users\\davifowl\\documents\\visual studio 14\\Projects\\WebApplication25\\src\\WebApplication1\\project.lock.json\nRestore complete, 1095ms elapsed\nLoaded Module: dnx.clr.dll\nFound DLL Export: CallApplicationMain\nNearest wins makes it work, but if packages end up having mixed casing in the same dependency tree, it might get confusing quickly.\n. Another test case:\n``` JSON\n{\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"HangFire\": \"1.3.0\"\n    },\n\"frameworks\" : {\n    \"dnx451\" : { \n        \"dependencies\": {\n        }\n    }\n}\n\n}\n```\nInformation: [LoaderContainer]: Load name=Microsoft.Framework.PackageManager\nInformation: [PathBasedAssemblyLoader]: Loaded name=Microsoft.Framework.PackageManager in 93ms\nRestoring packages for c:\\users\\davifowl\\documents\\visual studio 14\\Projects\\ClassLibrary58\\src\\ClassLibrary58\\project.json\n  CACHE https://nuget.org/api/v2/FindPackagesById()?Id='Hangfire.Core'\n  CACHE https://www.nuget.org/api/v2/package/HangFire.Core/1.3.0\n  CACHE https://nuget.org/api/v2/FindPackagesById()?Id='Hangfire.SqlServer'\n  CACHE https://www.nuget.org/api/v2/package/HangFire.SqlServer/1.3.0\n  CACHE https://nuget.org/api/v2/FindPackagesById()?Id='Newtonsoft.Json'\nUnable to locate Hangfire.SqlServer >= 1.3.0<= 1.3.0. Do you mean HangFire.SqlServer?\nUnable to locate Hangfire.Core >= 1.3.0<= 1.3.0. Do you mean HangFire.Core?\nWriting lock file c:\\users\\davifowl\\documents\\visual studio 14\\Projects\\ClassLibrary58\\src\\ClassLibrary58\\project.lock.json\nRestore complete, 732ms elapsed\nErrors in c:\\users\\davifowl\\documents\\visual studio 14\\Projects\\ClassLibrary58\\src\\ClassLibrary58\\project.json\n    Unable to locate Hangfire.SqlServer >= 1.3.0<= 1.3.0. Do you mean HangFire.SqlServer?\n    Unable to locate Hangfire.Core >= 1.3.0<= 1.3.0. Do you mean HangFire.Core?\nLoaded Module: dnx.clr.dll\nFound DLL Export: CallApplicationMain\n. :shipit: \n. +1\n. /cc @muratg \n. good god\n. Very nice changes (besides the minor comments). I don't like the ICompilationProject and I think we need to look into doing this https://github.com/aspnet/dnx/issues/1475 sooner rather than later.\nI also think you should take a look at the design time stuff next and separate that as well. https://github.com/aspnet/dnx/issues/1503\n. Thats ok. Mark that and IProjectFilesCollection as (DO NOT USE).\n. :shipit: \n. Very nice. Now I'm going to pull it down and try it.\n. This will break all of the other e repertories. Do you have a change ready for them?\n. Wow, repositories \n. If this doesn't break then we did something wrong.\n. Tried out the resource sharing scenario and that's still busted. It's a tricky one too. If you share resources with another project from a project.json based project, the resource names will be for the project.json based project instead of the project we're using. This makes the logical names wrong and it makes using those resources at runtime fail:\nClassLibrary58\n``` C#\nusing System;\nnamespace ClassLibrary58\n{\n    public class Program\n    {\n        public void Main()\n        {\n            Console.WriteLine(ClassLibrary1.Resource1.Another);\n        }\n    }\n}\n```\nJSON\n{\n    \"version\": \"1.0.0-*\",\n    \"commands\": {\n        \"ClassLibrary58\": \"ClassLibrary58\"\n    },\n    \"compile\": [ \"**/*.cs\", \"../../ClassLibrary1/**/*.cs\" ],\n    \"resource\": [ \"../../ClassLibrary1/**/*.resx\" ],\n    \"frameworks\": {\n        \"dnx451\": {\n            \"dependencies\": {\n            }\n        }\n    }\n}\nThe generated code from Resource1:\nC#\n[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Resources.ResourceManager ResourceManager {\n            get {\n                if (object.ReferenceEquals(resourceMan, null)) {\n                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"ClassLibrary1.Resource1\", typeof(Resource1).GetTypeInfo().Assembly);\n                    resourceMan = temp;\n                }\n                return resourceMan;\n            }\n        }\nThis breaks because:\n\nThis is the case where we need to be able to specify the project root for a resource name.\n``` JSON\n{\n  \"resource\": [\n        {\n            \"pattern\": \"../../ClassLibrary1/*/.resx\",\n            \"logicalName\": \"ClassLibrary1\"\n    }\n],\n\n}\n```\nWhat do you think?\n/cc @troydai @lodejard @anurse \n. Is this a regression?\n. LGTM\n. @anurse Can you make sure you didn't introduce this new dependency into the TPA list:\n- System.Diagnostics.Tracing\n. :shipit: \n. @victorhurdugaci I can't repro on windows\n. Ah hah, I was using 51\n. So these kinds of regressions are bad. We need to beef up our testing. Manual and automated.\n. Possibly unit testing more?\n. /cc @ChengTian Did we do this?\n. It never did\n. Build supports globbing but restore doesn't /cc @ChengTian \n. Omg yes!!!!\n. I did this\n. We need to have some kind of test here\n. No test?\n. Why? A simple unit test will suffice.\n. This is a dupe of a bug Louis filed\n. /cc @muratg We should put this in a milestone. The problem is that we don't put the configuration flag in the .cmd and .sh script that we generate for the published application so it always defaults to debug. A good way to test this would be to print out the IApplicationEnvironment.Configuration property in the running app to see what it says.\n. Simple fix to this would be to remove the sources/projects entry from global.json when --no-source is used.\n. /cc @muratg This is tricky. Today we don't delete before publishing, so the question is do we want to treat this like a special case. If you publish source and then --no-source to the same folder, it won't work because the project loader always wins over the package loader. Now I think it's a bug that VS doesn't use a fresh folder everytime but maybe there's a good reason for that?\n@vijayrkn @mayurid What's the reason for reusing the same folder?\n. I'm going to take a look at this.\n. We already infer that from the version in project.json\n. :shipit: \n. We don't need sharedBuiltIn\n. This should be in the release branch and no it doesn't fix anything. It's the workaround for beta4. We'll have more time to investigate for beta5\n. Nice! That simple huh? Do all of the test cases just work?\n. Why do I need to clean the packages folder?\n. Hmm so you still have to do nuspec rewriting for the package restore case? Or does this handle both cases?\n. :shipit: \n. Feels like we should do both. Instrument calls to the LoadContext so every call to LoadFile on both CLRs prints the path being loaded.\nLets also change the priority the env var and see what breaks.\n/cc @troydai \n. That one has no negative effects \n. Odd.\n. Where did this repro? The music store tests or by hand?\n. That would be great!\n. /cc @wendywei345 @troydai \n. /cc @wendywei345 @troydai \n. @muratg We need to fix this\n. @muratg We need to fix this\n. Try 2 scenarios:\n- introduce an exception in the publish code path and see what happens\n- test dnu publish --no-source\n. Try 2 scenarios:\n- introduce an exception in the publish code path and see what happens\n- test dnu publish --no-source\n. Use the dev branch\n. Use the dev branch\n. dev branch of the Home repository for samples\n. dev branch of the Home repository for samples\n. You never really have to build your own dnx ever, unless you want to work on it. \n. You never really have to build your own dnx ever, unless you want to work on it. \n. http://davidfowl.com/diagnosing-dependency-issues-with-asp-net-5/ Check out this awesome blog post (that I wrote) :smile: \n. http://davidfowl.com/diagnosing-dependency-issues-with-asp-net-5/ Check out this awesome blog post (that I wrote) :smile: \n. /cc @troydai \n. /cc @troydai \n. bah\n. bah\n. Nope, we're going to just use nuget\n. Nope, we're going to just use nuget\n. @anurse is already tracking this\n. @anurse is already tracking this\n. /cc @BillHiebert @troydai \n. /cc @BillHiebert @troydai \n. See https://github.com/aspnet/DataProtection/issues/55.\n. See https://github.com/aspnet/DataProtection/issues/55.\n. In the future, file bugs on the home repository if you aren't sure where they belong.\n. In the future, file bugs on the home repository if you aren't sure where they belong.\n. Doesn't the issue explain it? DataProtection took a dependency that doesn't exist on older versions of mono\n. Doesn't the issue explain it? DataProtection took a dependency that doesn't exist on older versions of mono\n. Moved to backlog, the perf difference is negligible \n. Moved to backlog, the perf difference is negligible \n. /cc @troydai Did this ever get fixed?\n. /cc @troydai Did this ever get fixed?\n. :shipit: \n. :shipit: \n. Beta3 packars aren incompatible with the DNX. If you're using the Home samples, use the dev branch with the dnx.\n. beta3 is incompatible with dnx (which is >= beta4). Read this http://davidfowl.com/diagnosing-dependency-issues-with-asp-net-5/. \nThe first tip is the one to be most aware of.\n. Yep it's been there for a while but we never did anything with it.\n. This flag isn't required, what you're describing sounds like a bug. --dependencies was initially going to be there just to support scenarios where other tools needed the full dependency closure in an output folder somewhere. The symbol source issue seems unrelated and we should fix it.\n. This flag isn't required, what you're describing sounds like a bug. --dependencies was initially going to be there just to support scenarios where other tools needed the full dependency closure in an output folder somewhere. The symbol source issue seems unrelated and we should fix it.\n. > Without the --dependencies option being used, dnu pack is including project dependencies in the lib folder. If that is a bug and is fixed so that they aren't there, I assume symbol source would work as expected.\nAre you saying that is the case for symbol packages? Because that doesn't happen in general. What you're describing sounds like a bug. \n\nAs I understand what you're saying about the --dependencies option (if it were to be implemented), when applied the lib folder should work as its currently working now (adding dependencies to lib). However in addition to that, source files need to be included as well. But that is work that would only need to be done if you decide not to remove the --dependencies option.\n\nI'm really saying that this option should be removed completely and if it comes back it would likely be an option on dnu build not pack and the only scenario would be to get the bits all copied to some output folder. Nothing to do with packages that at point.\n. > Without the --dependencies option being used, dnu pack is including project dependencies in the lib folder. If that is a bug and is fixed so that they aren't there, I assume symbol source would work as expected.\nAre you saying that is the case for symbol packages? Because that doesn't happen in general. What you're describing sounds like a bug. \n\nAs I understand what you're saying about the --dependencies option (if it were to be implemented), when applied the lib folder should work as its currently working now (adding dependencies to lib). However in addition to that, source files need to be included as well. But that is work that would only need to be done if you decide not to remove the --dependencies option.\n\nI'm really saying that this option should be removed completely and if it comes back it would likely be an option on dnu build not pack and the only scenario would be to get the bits all copied to some output folder. Nothing to do with packages that at point.\n. @muratg Lets remove the flag all up.\n. @muratg Lets remove the flag all up.\n. @cbeall This is not a general issue, this is an problem with your build process. Specifically this statement:\n\nWhen I run the pack, I am building in release configuration, and am using --out so that the four .nupkg files (two regular and two symbol) all end up in a single artifacts directory off the root.\n\nUse different output folders and you won't run into this issue.\nWe use dnu pack to build all of ASP.NET 5 thats sorta why I am aware that this doesn't just happen by default. We would have published packages to NuGet.org with a bunch of crap in them :smile: \n. @cbeall This is not a general issue, this is an problem with your build process. Specifically this statement:\n\nWhen I run the pack, I am building in release configuration, and am using --out so that the four .nupkg files (two regular and two symbol) all end up in a single artifacts directory off the root.\n\nUse different output folders and you won't run into this issue.\nWe use dnu pack to build all of ASP.NET 5 thats sorta why I am aware that this doesn't just happen by default. We would have published packages to NuGet.org with a bunch of crap in them :smile: \n. Dupe of https://github.com/aspnet/dnx/issues/1523?\n. The exception message is the same. I think it's fair to say it's the same bug.\n. Can you be more specific about what used to work, and what is failing now?\n. I don't understand. Are you saying you can't patch the published image anymore?\n. net40 is compatible with dnx451 so I don't quite understand why it isn't copied. If you can make a repro site that would be great. We can add it as a test case.\n. We'll make progress when you provide a sample.\n. Can you provide a minimal repro with steps on how to reproduce the problem. The goal is to put this as a test case so we don't regress it again.\n. Whatever you want, the less dependencies the better.\n. Started this on https://github.com/aspnet/dnx/tree/build-script-doover\n. Ok I'm leaning towards the global.json solution. If you override the project name in project.json you have to go to global.json and specify the mapping from name to location (relative to the global.json of course).\nroot/src/ComponentA/project.json\nJSON\n{\n    \"name\": \"CompanyName.HighLevelArea.Component.SubcomponentA\",\n    \"dependencies\": {\n        \"CompanyName.HighLevelArea.Component.SubcomponentB\"\n     }\n}\n/root/src/ComponentB/project.json\nJSON\n{\n    \"name\": \"CompanyName.HighLevelArea.Component.SubcomponentB\"\n}\nroot/global.json\nJSON\n{\n   \"projects\": [ \"src\", \"test\" ],\n   \"projectReferences\": {\n        \"CompanyName.HighLevelArea.Component.SubcomponentA\" : \"src/ComponentA\",\n        \"CompanyName.HighLevelArea.Component.SubcomponentB\" : \"src/ComponentB\"\n   }\n}\nI'm torn between reusing projects (formerly sources) or creating another node.\nMaybe it's also possible to directly specify a project location in project.json but that makes things less DRY so lets stay away from that for now.\n/cc @glennc @lodejard @muratg \n. @glennc YES we can!! Just discussed that with @DamianEdwards \n. ### Option 1\nJSON\n{\n    \"projects\": [ \"src\", \"test\" ],\n    \"projectMapping\": {\n        \"Foo\" : \"src/SomethingElse\"\n    }\n}\nOption 2\nJSON\n{\n    \"projectSearchPaths\": [ \"src\", \"test\" ],\n    \"projects\": {\n        \"Foo\": \"src/SomethingElse\"\n    }\n}\nOption 3\nJSON\n{\n    \"projects\": [ \n        \"src\", \n        \"test\", \n        { \"Foo\" : \"src/SomethingElse\" }\n    ]\n}\n. I'm leaning towards 3. In general explicit name mappings override search locations.\n. ### Option 4\nJSON\n{\n    \"projects\" : {\n        \"*\": \"src\",\n        \"*\": \"test\",\n        \"Foo\" : \"src/SomethingElse\",\n        \"Microsoft.AspNet.Mvc.Core\" : \"../../../Mvc/src/Microsoft.AspNet.Mvc.Core\"\n    }\n}\n. The idea is to change the array syntax to key value pairs instead.\n. I like that one @bradwilson \n. Yah +1\n. Names will always override * as a rule\n. Feature creep. That's not a bad suggestion but I'm going to say maybe in v5 :smile: \n. I coded this up and I don't like it. We're working on a way to make project parsing 0 cost at runtime by putting project information inside of the project.lock.json file\n. We're discussing this issue here https://github.com/aspnet/dnx/issues/2312\n. Can you make a simplified repro? Or at least show the error message?\n. /cc @troydai \n. What?\n. No test?\n. Without a test I have no idea what this actually fixes\n. Should show an error\n. merge it into dnu or make it another global command /cc @loudej \n. Ah hah! Yes lets merge it in\n. :shipit: \n. :shipit: assuming you tested it on NuGet.Packaging?\n. :shipit: \n. I want to see travis turn green\n. !!! Ship it!!! :shipit:\n. For here mono shall no longer break \n. :shipit: \n. Thinking about this some more it actually makes sense and the only reason it's running is because we also have default CLR (dnx451) compilation references. Otherwise it would fail the same way as dnu build.\n. Won't happen with the CLI\n. @troydai Can we use the new diagnostics system to warn/error when absolute paths are used in compile?\n. /cc @jkotas Is there a runtime setting to allow this? How does the bootstrapper in .NET Framework handle this?\n. Can push a repository to github with instructions on how to reproduce the problem?\n. Looks like a mono regression. Here's what I get with 3.12.1:\nDavids-MacBook-Pro:dnx-mono-resources-bug dfowler$ ./rundnx.sh \nSystem.Resources.MissingManifestResourceException: Could not find any resources appropriate for the specified culture or the neutral culture.  Make sure \"Program.resources\" was correctly embedded or linked into assembly \"dnx-mono-resources-bug\" at compile time, or that all the satellite assemblies required are loadable and fully signed.\n  at System.Resources.ResourceManager.AssemblyResourceMissing (System.String fileName) [0x00000] in <filename unknown>:0 \n  at System.Resources.ResourceManager.InternalGetResourceSet (System.Globalization.CultureInfo culture, Boolean createIfNotExists, Boolean tryParents) [0x00000] in <filename unknown>:0 \n  at System.Resources.ResourceManager.InternalGetResourceSet (System.Globalization.CultureInfo culture, Boolean createIfNotExists, Boolean tryParents) [0x00000] in <filename unknown>:0 \n  at System.Resources.ResourceManager.InternalGetResourceSet (System.Globalization.CultureInfo culture, Boolean createIfNotExists, Boolean tryParents) [0x00000] in <filename unknown>:0 \n  at System.Resources.ResourceManager.GetString (System.String name, System.Globalization.CultureInfo culture) [0x00000] in <filename unknown>:0 \n  at System.Resources.ResourceManager.GetString (System.String name) [0x00000] in <filename unknown>:0 \n  at Program.Main (System.String[] args) [0x00000] in <filename unknown>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] in <filename unknown>:0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in <filename unknown>:0 \n  at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute (System.Reflection.Assembly assembly, System.String[] args, IServiceProvider serviceProvider) [0x00000] in <filename unknown>:0 \n  at Microsoft.Framework.ApplicationHost.Program.ExecuteMain (Microsoft.Framework.Runtime.DefaultHost host, System.String applicationName, System.String[] args) [0x00000] in <filename unknown>:0 \n  at Microsoft.Framework.ApplicationHost.Program.Main (System.String[] args) [0x00000] in <filename unknown>:0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in <filename unknown>:0 \n  at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute (System.Reflection.Assembly assembly, System.String[] args, IServiceProvider serviceProvider) [0x00000] in <filename unknown>:0 \n  at dnx.host.Bootstrapper.RunAsync (System.Collections.Generic.List`1 args) [0x00000] in <filename unknown>:0\nDavids-MacBook-Pro:dnx-mono-resources-bug dfowler$ mono --version\nMono JIT compiler version 3.12.1 ((detached/0849ec7 Fri Mar 20 19:07:48 EDT 2015)\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\n        TLS:           normal\n        SIGSEGV:       altstack\n        Notification:  kqueue\n        Architecture:  x86\n        Disabled:      none\n        Misc:          softdebug \n        LLVM:          yes(3.6.0svn-mono-(detached/5486eb2)\n        GC:            sgen\nRunning the latest dnx\nDavids-MacBook-Pro:dnx-mono-resources-bug dfowler$ dnx --version\n1.0.0-beta5-11479\n/cc @migueldeicaza \n. @Garciat do me favor, run dnu build on that source and compare the IL (Program.dll from dnu build to Program.exe from mcs)\n. It's likely something to do with the fact that these are in memory assemblies. @Garciat can you file a bug on mono?\n. :shipit:\n. @pranavkm Why is the build is failing?\n. It's because you added --quiet. You might need to turn it back on.\n. Don't remove anything.\n. @muratg Can we assign somebody else to do this?\n. @moozzyk is this still relevant with all of your refactorings?\n. Can close?\n. We're not doing this anymore\n. dev? Wrong branch right?\n. This is done\n. :shipit: \n. I think you should invert it. Have a --detailed or a --verbose flag that shows more information.\n. /cc @muratg @victorhurdugaci \n@victorhurdugaci Why is the InstallBuilder doing anything with the project.json here?\n. This is a simple fix. a One liner actually.\n. I can fix it if @victorhurdugaci is working on something else. I'd suggest waiting on @troydai's change though.\n. Great!\n. https://github.com/aspnet/dnx/blob/f0a852af06282494168100a83b3b79e0cc155c15/src/Microsoft.Framework.Runtime/DependencyManagement/LockFileReader.cs#L21\nFile.OpenRead should fix it.\n. That file moved into the package manager and there should be a new one from @troydai 's change in the runtime\n. > DesignTimeHost tests aren't on CoreCLR since Assembly class is non-inheritable on CoreCLR and it is used heavily.\nWhat?\n. Make sure travis keeps working when you make this change\n. :shipit: \n. The first one is a dupe of a bug I filed.\n. Punt to backlog. I'm working on moving stuff out of the runtime so this split will be easier.\n. Clang++ doesn't like your changes\n. You should consider using a combination of ILibraryManager and System.Reflection.Metadata to read metadata. The kicker might be in memory assemblies but you can emit those and process the byte array.\n. We don't expose the assemblt paths in the library manager but we could. It would allow you to use the API to open a file stream to get the metadata\n. Tested on osx, and it works. :shipit: when other review comments are done\n. :shipit: \n. @MattGal This experience is improved in later builds.\n. This is fixed now. If the package isn't on disk it will show up as unresolved.\n. See #310 \n. Closing this as dupe\n. /cc @victorhurdugaci \n. dnu isn't using any submodules yet\n. dnu commands uninstall is broken as well:\nDavids-MacBook-Pro:RazorPageGenerator dfowler$ dnu commands uninstall RazorGenerator\nRazorGenerator command is not installed.\nDavids-MacBook-Pro:RazorPageGenerator dfowler$ dnu commands uninstall razor-generate\nSystem.Resources.MissingManifestResourceException: Could not find any resources appropriate for the specified culture or the neutral culture.  Make sure \"Microsoft.Framework.Runtime.NuGetResources.resources\" was correctly embedded or linked into assembly \"Microsoft.Framework.Runtime\" at compile time, or that all the satellite assemblies required are loadable and fully signed.\n  at System.Resources.ResourceManager.AssemblyResourceMissing (System.String fileName) [0x00000] in <filename unknown>:0\n  at System.Resources.ResourceManager.InternalGetResourceSet (System.Globalization.CultureInfo culture, Boolean createIfNotExists, Boolean tryParents) [0x00000] in <filename unknown>:0\n  at System.Resources.ResourceManager.InternalGetResourceSet (System.Globalization.CultureInfo culture, Boolean createIfNotExists, Boolean tryParents) [0x00000] in <filename unknown>:0\n  at System.Resources.ResourceManager.InternalGetResourceSet (System.Globalization.CultureInfo culture, Boolean createIfNotExists, Boolean tryParents) [0x00000] in <filename unknown>:0\n  at System.Resources.ResourceManager.GetString (System.String name, System.Globalization.CultureInfo culture) [0x00000] in <filename unknown>:0\n  at NuGet.Resources.NuGetResources.get_Debug_RemovedFileFromFolder () [0x00000] in <filename unknown>:0\n  at NuGet.PhysicalFileSystem.DeleteFile (System.String path) [0x00000] in <filename unknown>:0\n  at Microsoft.Framework.PackageManager.AppCommandsFolderRepository.Remove (System.String commandName) [0x00000] in <filename unknown>:0\n  at Microsoft.Framework.PackageManager.UninstallCommand.Execute (System.String commandName) [0x00000] in <filename unknown>:0\n  at Microsoft.Framework.PackageManager.Program+<>c__DisplayClass3_13.<Main>b__26 () [0x00000] in <filename unknown>:0\n  at Microsoft.Framework.Runtime.Common.CommandLine.CommandLineApplication.Execute (System.String[] args) [0x00000] in <filename unknown>:0\n  at Microsoft.Framework.PackageManager.Program.Main (System.String[] args) [0x00000] in <filename unknown>:0\n. This has nothing to do with restore, that fine\n. @Kukkimonsuta Can you open this on aspnet/Home?\n. We should clean it up in universe\n. File this on aspnet/dnvm\n. See https://github.com/aspnet/dnvm/issues/190\n. No tests?\n. Add it to this PR\n. :shipit: \n. Did travis fail for this change?\n. Agreed @weidazhao \n. :shipit: \n. Leave IApplicationEnvironment as is and change IRuntimeEnvironment to have Flavor.\n. @moozzyk Seems like appveyor is broken. Lets make sure this change doesn't break that in general.\n. Yes you need to add the references manually\n. The logic to produce a managed assembly is the same regardless of what framework you build against. Some frameworks have reference assemblies and some don't. The DNX takes the framework name and it computes the set of  reference assemblies to compile against. It also understands how to produce a nuget package from that profile name.\nToday PCL project types add the entire framework behind the scenes so users dont have to. DNX projects don't do it (by design) and that's the biggest difference.\n. The try catch is fine but why doesn't it work on win7?\n. Can we also change this code to be lazy? It would be great if we could avoid all first chance exceptions on the startup path.\n. :shipit: \n. /cc @moozzyk As this will affect your refactoring of the native pieces\n. Verify nothing in universe breaks.\n. :shipit: \n. I'm assuming you mean having it in the same zip is a problem?\n. Can't it just be deleted?\n. I'm not sure this even makes sense. What happens when razor views need to compile? How did you do this before with System.Web?\n. After the ci passes :shipit: /cc @pranavkm \n. @bricelam does this work yet?\n. Try with the CLI\n. I assume you have those frameworks installed? If you do, then it's likely that we just don't recognize the TFM.\n. I wonder if it has anything to do with those platforms not being understood\n. installed xamarin and I can reproduce this now.\n. Should be fixed now\n. So we're not supporting this. But we're going to fail better\n. What? https://github.com/aspnet/dnx/issues/1208\n. I'm reverting the whole change. We dont have a difference between restore and install. Thats a much bigger discussion. We can potentially warn on restore of an unlisted package.\n. @muratg reopening this and moving it to beta6. We need to prefer listed and if that results in no matches, then use unlisted.\n. @muratg reopening this and moving it to beta6. We need to prefer listed and if that results in no matches, then use unlisted.\n. /cc @victorhurdugaci \n. /cc @victorhurdugaci \n. @GuardRex nope\n. @GuardRex nope\n. Should probably ask symbol source\n. Should probably ask symbol source\n. Thanks @TripleEmcoder !\n. Thanks @TripleEmcoder !\n. @BrennanConroy no. I'm on the same page as @moozzyk and I'm also worried about regressions.\n. @BrennanConroy no. I'm on the same page as @moozzyk and I'm also worried about regressions.\n. :shipit: \n. :shipit: \n. :shipit: After those few comments. Make sure that older versions of mono don't start null reffing all over the place because of a broken call context. This change needs to work without that fix. One thing we could do is store the service provider in AppDomain.CurrentDomain.SetData(\"_serviceProvider\", sp) on mono so that we can work around the call context problems.\n. :shipit: After those few comments. Make sure that older versions of mono don't start null reffing all over the place because of a broken call context. This change needs to work without that fix. One thing we could do is store the service provider inAppDomain.CurrentDomain.SetData(\"_serviceProvider\", sp) on mono so that we can work around the call context problems.\n. @BrennanConroy I assume you know why appveyor is failing and that this change didn't actually regress anything.\nIf that's the case then :shipit: \n. When the ci machine is happy\n. When the ci machine is happy\n. Dupe of https://github.com/aspnet/dnx/issues/1467\n. Dupe of https://github.com/aspnet/dnx/issues/1467\n. :shipit: \n. :shipit: \n. Re reun the build \n. Re reun the build \n. :shipit: \n. :shipit: \n. This bug already exists\n. This bug already exists\n. VB, F#, dylan.NET (yes this is a real language) support will all be via the same mechanism. This is a generic extensibility point. The real problems come when tooling support is added (intellisense support in Visual Studio etc.)\n. VB, F#, dylan.NET (yes this is a real language) support will all be via the same mechanism. This is a generic extensibility point. The real problems come when tooling support is added (intellisense support in Visual Studio etc.)\n. Yes and just FYI this isn't new https://github.com/YoloDev/YoloDev.FSharp.AspNet. https://github.com/davidfowl/vNextLanguageSupport. Language support was refactored a while ago so that we can add more languages. That's not really the big problem, though it still needs to be cleaned up.\n. Yes and just FYI this isn't new https://github.com/YoloDev/YoloDev.FSharp.AspNet. https://github.com/davidfowl/vNextLanguageSupport. Language support was refactored a while ago so that we can add more languages. That's not really the big problem, though it still needs to be cleaned up.\n. There'll be something documented once the churn ends. Talk to @Alxandr, he's spent a considerable amount of time experimenting with F# and the dnx compilation system (even got it working with in memory assemblies).\n. There'll be something documented once the churn ends. Talk to @Alxandr, he's spent a considerable amount of time experimenting with F# and the dnx compilation system (even got it working with in memory assemblies).\n. /cc @ellismg \n. /cc @ellismg \n. We want the errors to look the same across DTH and command line. Talk to @BillHiebert and come up with a consistent scheme for showing errors like that. I like what you have there (grouping by error location). We need to see if the error list in VS supports this.\n. We want the errors to look the same across DTH and command line. Talk to @BillHiebert and come up with a consistent scheme for showing errors like that. I like what you have there (grouping by error location). We need to see if the error list in VS supports this.\n. :shipit: \n. :shipit: \n. Roslyn supporting F# really has nothing to do with the DNX. The compiler API in DNX is separate from roslyn itself. It just happens to be our default experience. \n. Roslyn supporting F# really has nothing to do with the DNX. The compiler API in DNX is separate from roslyn itself. It just happens to be our default experience. \n. Closing this because it has to be done. We're going to look at caching this in DTH. Will file a specific issue for doing that across the solution.\n. Closing this because it has to be done. We're going to look at caching this in DTH. Will file a specific issue for doing that across the solution.\n. /cc @anurse \n. /cc @anurse \n. Uhhhh this cannot be on by default.\n. Uhhhh this cannot be on by default.\n. Sweet\n. Sweet\n. @barrytang This bug isn't in a milestone and so it doesn't exist :smile: \n. @barrytang This bug isn't in a milestone and so it doesn't exist :smile: \n. /cc @muratg This needs to go through triage.\n. /cc @muratg This needs to go through triage.\n. This works now. You have 2 differenet versions of dnvm\n. This works now. You have 2 differenet versions of dnvm\n. @victorhurdugaci does this only repro with music store?\n. @victorhurdugaci does this only repro with music store?\n. I can't reproduce this with a simple application. Showing me the errors you got would be great.\n. I think this is by design\n. This is an MVC bug. See https://github.com/aspnet/Mvc/pull/2508\n. Why is the build failing?\n. :shipit: \n. Ugh, we should fix that.\n. @ChengTian a simple change would be to compare the sha's. If they differ then overwrite. Also we should print out a message that shows what action was taken (overwrite, vs already exists).\n. Can you revert the change instead of doing this?\n. :shipit: \n. Once things pass\n. @blowdart I'm not sure I understand what this is suggesting. Is REGEX_DEFAULT_MATCH_TIMEOUT a special key that is respected on full CLR? \n. https://github.com/aspnet/dnx/commit/9147693f83930f4c34a1b28cd507eb885ad3d3af\n. Do dnx as well?\n. Please file this on aspnet/Home\n. /cc @anurse Did you fix this recently?\n. We need to beef up our instructions \n. can we check for those components?\n. What is OS flavor and how can you figure it out?\n. /cc @ChengTian we need to make it so that it's not possible to corrupt the cache forever.\n. @ChengTian that's ok but we need to make sure if it ever happens that the client can handle misbehaving servers\n. Change your frameworks to dnx451 and dnxcore50 instead of aspnet50 and aspnetcore50.  See http://blogs.msdn.com/b/webdev/archive/2015/04/29/new-asp-net-features-and-fixes-in-visual-studio-2015-rc.aspx for the changes made in the latest release.\n. And you read the resolution right?\n. I thought @troydai made the error message less sucky.\n. We don't make changes like this in a single place. It needs to be made to the universe template and in all of the repositories.\n. See that tag that says cla-required :wink: yes you do\n. This is actually a VS bug.\n. /cc @victorhurdugaci \n. Yes\n. Yes\n. \n. This is actually nothing to do with the runtime. This is a tooling issue\n. It's a mono bug. Nothing we can do about this.\n. Closing this out\n. Did you run dnu restore on both projects?\n. It's a roslyn regression caused by this commit https://github.com/dotnet/roslyn/commit/f87ef57845fc4e54a6010f178df34c607345fff1#diff-638a53759ec71cb81b6f2287d85ec08b. I'll leave this open for now just to track when we get those fixes.\n. This is fixed\n. @lodejard can you make sure the CI passes?\n. I just ran into this. :shipit: \n. I ran a build and it set the header back to the wrong one.\n. Dnu isn't supported on coreclr xplat yet. Use the mono  dnu \n. Yes you almost got it working. Switch to mono run restore then switch back to coreclr to run. You'll probably run into other bugs but give it a try\n. Sometime before we ship. I don't have dates for you. We're no where near the release date as this is the first preview. I suggest you follow along with http://github.com/dotnet/coreclr and http://github.com/aspnet/dnx.\n. I missed some of your questions:\n\nDavid, I did this too. Sadly, it does not work either. It says I need to run again dnu restore which does not work.\n\nIf you get the same error you missed something. Show me the exact error you get when you ran it on coreclr.\n\nWhen in CoreClr will be RTM, do I need to dnx . run even for a console app (will I be able to call the binary directly)? How can I distribute my app without the source code and still be able to run it on another computer?\n\nRun dnu publish --no-source to get a self contained image. That will make a cmd file for windows and an executable script for *nix (this is similar to how node runs npm for example).\n\nOne of my goals would be to build a Linux daemon (headless) app running with .Net coreclr. Also, in order to be a true Linux citizen, it would have to respond to Unix signals.\n\nUnix signals are just APIs. If you want specific APIs then you should file issues on https://github.com/dotnet/corefx. \n. OK that's not what I said, try these exact commands:\ndnvm install 1.0.0-beta5-11682 -u\ndnu restore\ndnvm use 1.0.0-beta5-11682 -r coreclr\ndnx . run\n. Dupe of https://github.com/aspnet/dnx/issues/1733?\n. We jabbr over here\n. OK ok\n. I'll make one and I won't go in it :smile: \n. Closing this out.\n. +1 for gitter as well.\n. :shipit: \n. @ChengTian I fixed travis so see if the tests pass there now\n. :shipit: \n. Ohhhh hacky. We might be able to run in a compatibility mode that drops the dll and pdb on disk. This would be for existing tools to consume \n. It circumvents dependency resolution.\n. Do you know what the requirements are? Is it the pdb files and dlls Beinf on disk?\n. Hah! My change caused those problem :blush: \n. I'm wondering if we can turn of breadcrumbing for compilation purposes or move where it is done so it doesn't happen more than once?\n. Ok here's what we need to do:\n- Make the servicing classes services that are passed into the NuGetDependencyResolver instead of being a singleton (a singleton may be passed in but don't assume it is one).\n- Make it so that a bool can be passed in that will disable ball bread crumbing \n. You can absolutely call Assembly.Load or write your own loader that does something similar to what we do but that's not our problem \n. Yes we actually have this in the wrong layer. Everyone uses this api to reason about the dependency graph. We really shouldn't be bread crumbing anything that wouldn't get loaded. As much, it should only ever be true when the ApplicationHost runs\n. Whats the deal with this?\n. :shipit: \n. I agree lock and unlock being weird. As for update, it would only apply for version ranges as we don't do highest version and I don't see us doing that. So far we've stayed away from commands that modify the project.json file and instead lean towards a simple workflow where you edit the project.json file and run some command to produce the new lock file.\nGiven that, the workflow I'm leaning towards is something like this:\n1. Add/Change some dependencies to project.json\n2. Run dnu restore to produce the project.lock.json with closure of deps\n3. Edit project.json\n4. Go to 1.\nThe workflow we need to flesh out is the one that lets you lock and update that file when you make changes to the project.json file.\n. @troydai this bug is fixed right?\n. Feels like the parser needs to be trimmed down for things we don't need to care about:\n- Utf16StringValidator.cs (do we need it)\n- Json* types (why do we need them?), Dictionary<string, object>, string, int, primitive types should be enough right?\n- Depth checking (why bother)? Do we need this safety?\n. @JamesNK This parser is really for 2 things:\n1. Don't use JSON.NET before the app's dependency graph loads\n2. Performance loading 3 known file formats, project.lock.json, project.json, global.json.\nWe're going to use JSON.NET for everything else.\n. @JamesNK thanks for the input. Hopefully this will be used on those known quantities and we won't have to handle anything like that.\n. A few minor comments but :shipit: it looks great!\nI have some things to follow up on after this initial checkin to do with performance :smile: !\n. Yea dnu doesn't work on core clr. You need mono. It'll be a while before it works.\n. /cc @pranavkm @emgarten\n. I think I would change how this was done. Make the call to httpSource.GetAsync take a function that lets the caller validate the response before caching. That will stop the bad data from being cached all in one place and keep the validation logic in one place. It can also happen before anything hits the disk.\n. Please file issues like this on aspnet/Home.\n. That already works. Any files used in the compilation are watched.\n. Closing this out as it's tracked by https://github.com/aspnet/Hosting/issues/344\n. This behavior is by design. Versions specified are a minimum and it looks like your feeds are broken?\n. Specifying a version that doesn't exist in any of your feeds means you will get the lowest version greater than the specified version.\n1.0.0-beta4 is smaller than 1.0.0-beta4-somebuildnumber\n. Can you file this issue on aspnet/Tooling?\n. The stamp really only mater for non dnx targets but we should do this\n. See https://github.com/dotnet/cli/issues/398\n. /cc @ellismg @kangaroo\n. :shipit: \n. File this bug on aspnet/Hosting (btw there's already a bug on it) and a pull request https://github.com/aspnet/Hosting/pull/255\n. The CLI code uses nuget now\n. Whats your active runtime? You might be running into an issue where you're not packing the runtime and it's just using whatever happens to be on the command line to run (which may be different from what you used to pack)\n. I just tried this with https://github.com/aspnet/Home/tree/dev/samples/latest/HelloWeb and it seemed to work fine. Might be something else going on here. @borgdylan Can you try that as well.\n. @borgdylan The point of getting you to run that is to narrow the issue down. Nobody tests dylan.NET besides you so we appreciate the bugs, but trying to help us narrow things down would be great next time as we can't reproduce the issue in normal scenarios.\n. @borgdylan The bug title is missing specifics. Whenever you see something broken with dylan.NET, test it with C# to see if it's general or specific to language things. Also, provide a sample that is ready to go with your scenario so that we can reproduce it. This might not have anything to do with publish.\n. is dylan.NET.K a package or a project? Can you please provide a repro?\n. Anything at this point.\n. Way too late plus we don't have a javascript engine that we'd want to readily embed in our runtime environment.\n. I think that ship has sailed tbh. we're also going to be using project.json more generally for nuget as well.\n. it shouldn't be that big of a perf hit i guess. Verify that it doesn't \n. Are you looking at the csproj or the wrapped project.json\n. it comes down understanding what belongs in global.json and Wei already called out the problem\n. Ok lets start over:\nThe list of projects in global.json specify locations where projects can be searched for, not direct project locations. This means that:\nJSON\n{\n    \"projects\": [\n        \"src\",\n        \"test\",\n        \"wrap\",\n        \"foo\"\n    ]\n}\nProjects can be in:\nsrc/{project}/project.json\ntest/{project}/project.json\nwrap/{project}/project.json\nfoo/{project}/project.json\nIf that's fully understood, then it should never be confusing why something is shown as unresolved. \nGiven that base knowledge, repeat the steps you did and try to back track to see where it all went haywire.\n. Ok @abpiskunov showed me the issue and I think the bug is here:\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime/ProjectResolver.cs#L74\nThe simple repro should be:\nsrc/Foo/project.json\ntest/Foo/Foo.csproj\nWe map all potential projects by folder name without checking for project.json as an optimization. Unfortunately it causes this ambiguity. You could ask what we should do in general if we saw 2 projects with the same name (we should probably fail). But there is no ambiguity here.\n. > Check existence of project.json when resolving all potential projects. (Need to check performance to decide whether we want to do this.)\nThat's way too slow. I know I tested it. We'll need to do it when accessing that particular project. Store all entries up front.\n. @ChengTian You may not want to throw during the scan. Throw on access if there's more an than one potential folder with a project.json.\n. :shipit: \n. @Tratcher can you make a simple repro with no external types (just use user defined ones) and try to narrow it down?\n. I'm going to close this out. It's likely the difference between not having a reference and having a reference to the packages that bring in CancellatonToken. Other than that, it could only be a roslyn bug.\n. This big has been filed about 20 times. It's a mono but that has been fixed in the latest. There's no known release that has the fix.\n. Talk to mono people. I'm closing this out as aspnet/Home already details the issue and how to work around it.\n. Might just be a lock file issue\n. Backlog. I need to see if this thing works on desktop. It might just be some IL\n. @ChengTian shouldn't that temp file be delete on close as well?\n. we're at beta7 now and beta8 soon. Does it repro there?\n. @Tratcher would be interesting to try that as well. Apparently it does respect service point manager but then it got hung up somewhere else.\n. @akoeplinger service point manager solution is cleaner.\n. Could you move this question to aspnet/Home?\n. This has to do with my changes to publish. Does it run when you publish a simpler app?\n. Likely a DTH bug. I made a change here in beta5 that might have something to do with it.\n. Closing this as by design.\n. :shipit: \n. Will fix the CI if we think this is a good idea :smile: :\n. @loudej Yah I know, the problem is tho minimum won't help in this situation at all and we'll have 2 versions that can conflict (3 actually).\n- The SDK version in global.json that tools look at. This version also becomes the default runtime version launched by tools like VS and VS Code.\n- The minimum runtime version in project.json, which acutally does nothing for forcing that you want an exact version. We want to say that these beta4 samples require beta4 to run, not >= beta4. Do we support arbitrary ranges?\n- Does the minimum runtime version persist into built package or is it a project.json thing only\n- When you chose a specific SDK version in the tooling via the launchSettings that one wins but is it confusing that you can potentially pivot all 3?\n. It's the worst feature ever :smile: \n. It can't be punted but it needs to work the same way nuget does. So we need to change both behaviors but I believe the original intent was to let global group policy something override local decisions though I think doing that via a global config file isn't the right way to go about it.\n. > 1) What is the reason for 2 caches .dnx/packages and AppData/dnu/?\nAppData/dnu is the http response cache. It's used to avoid making http requests over and over (the TTL is configurable) between calls to dnu. The ~/.dnx/packages is not a cache. It's where packages are located.\n\n2) Why dnu caches 404 responces?! WTF?!\n\nWe don't cache 404s. You must be running a very old version of dnu or the server isn't sending back an actual 404 status code. We're fixing the issue where the response sent back from the server is 2XX but the response is invalid.\n. > Why does not download full repo index on command like dnu upgrade $gallery.\n\nThis is popular practice. For example, linux package managers.\nAnd there would be separate package and gallery caches, and guarantied way to force updates.\n\nBecause that's not how NuGet works today. Maybe one day we'll get there. If you want to suggest something like that, file it over here https://github.com/nuget/home\n. > dnx-clr-win-x86-1.0.0-beta5-11672 about 10 days old. Is it too old?\nWe haven't cached non 200 responses since beta3 and I'm pretty sure we still don't :smile: .\n\nFiddler do not show any http requests on dnu restore.\nAfter AppData/dnu was removed all packages downloaded.\nCan someone try to reproduce?\n\nMaybe you just had a corrupt cache from a bad nuget server. The latest build avoids caching any type of response and will likely fix issues like this in the future https://github.com/aspnet/dnx/commit/5b81f64409e4d4aac121a5b66fd58d787a827808\n. MyGet.org did have a bug that they fixed recently where they were returning bad status codes. Anyways, you should try again with the latest (should be out in ~45 mins or so). That should have the new fix that makes sure bad things don't end up in the http cache.\n. OK I'll get somebody to try and reproduce this bug with the latest changes we made and your repro steps.\nScenario (i use dnx-clr-win-x86-1.0.0-beta5-11672):\n\n\nclose all VS\ndelete .dnx/packages and AppData/Local/dnu\nadd package what not in any galleries in your project\ndnu restore (fiddler indicate correct 404 status)\nupload package to gallery\ndnu restore - still 'not found'\ndelete AppData/Local/dnu\ndnu restore - it works!\n\n\nI assume you made a custom myget feed and you manually uploaded packages to it, tha'ts what step 5 is right?\n@ChengTian can you try to reproduce this with your latest changes and see if it still happens?\n. Great @ChengTian will verify that this works.\n. Don't worry, @ChengTian will run through your repro steps and see if he sees the same thing. If not we'll close the bug and if you get better repro steps we'll try again.\n. :shipit: \n. :shipit: \n. > I have a project where some of my references have dependencies on 1.0.0-beta4 of Microsoft.Framework.Runtime.Interfaces and other references have dependencies on 1.0.0-beta5 of Microsoft.Framework.Runtime.Abstractions.\nThat's your mistake. Stop mixing the versions.\n. Because it got renamed. I suggest you follow https://github.com/aspnet/Announcements closely if you plan to use beta5 packages.\n. https://github.com/aspnet/Announcements/issues\n. It's supported in beta5 and it's a single string. If you want to change how it's represented in NuGet please file an issue over there. github/NuGet/Home\n. beta5 isn't released, it's in development.\n. God no if we did that then we'd never close anything. We don't keep bugs open because there's no official release. I marked it with the appropriate tags to show this was fixed in beta5.\n. Fixed in https://github.com/aspnet/dnx/commit/70010d2026de84cf4171830965d2971809eb9d0a\n. Good catch! :shipit: \n. yep\n. Wait, that actually won't work. We need to keep that one. hmmm\n. Sure, lets leave the crossgen tool for now.\n. We shoud rename PackageManager to something like Microsoft.DotNetUtility?\n. Microsoft.Dnx.Tools\n. Microsoft.Dnx.Tooling\n. @muratg Let's close on this by tomorrow so that VS can get the final names in.\n. What about Tooling instead of Tools? Microsoft.Dnx.Tooling? Application.Host and DesignTime.Host is kinda weird since those sub namespaces don't have any types in them.\n. Wait you published the windows runtime and expected it to work on Linux? Am I missing something?\n. :shipit: Assuming you tested it on all platforms. \nYou also have to revert all of those changes you made to all the other repos :smile: \n. @BrennanConroy hold off on this a second.\n. @rkeithhill The fact that searched locations doesn't have the packages folder location makes me feel like it's something to do with the lock file version. Our error handling for this scenario is quite bad (https://github.com/aspnet/dnx/issues/1469). What's the version in the project.lock.json file?\n. That's indeed the problem. You are restoring with a very very old version of dnu restore on mono. You said this:\n\nI have installed mono-complete so that I can run dnu restore which work.\n\nMake sure you use the same version, in this case dnx-mono.1.0.0-beta5-11760\n. Take a look at the samples on the home repository and copy them verbatim\n. Will be irrelevant\n. As part of this change can you make it so that we don't recurse if the current directory has a project.json?\n. :shipit: \n. This has nothing to do with the dnx. I'd suggest you file this where other vs issues are filed \n. What happened here?\n. Sure, I think we should have an API for doing this but it shouldn't be in the runtime. We're actually moving all of this type of logic to NuGet\n. Not sure what this means\n. Really, that's interesting because we use the same logic. Though I'm not surprised this as packages produced by the dnx just duplicate the dependency in each of the relevant groups. Can you just duplicate the dependencies?\n. Sure, it's a good bug.\n. do you have any proof that nuget v2 supports this? I'm using the nuget v2 code and don't see any logic that merges these.\nI believe the dependency logic matches the folder selection logic. Only one folder is chosen \n. Get the package author to update the package if possible.\n. Yea it's allowed in nuget and it gets the latest but I'd rather not support that and see how many things break because with transitive dependencies, it's ambiguous \n. There should only ever be a single instance of RuntimeEnvironment on the start path. If you need it earlier then you have to  pass it up to the higher layers.\n. :shipit:\n. I'm not sure we need a publish step anymore. Also the runtime id and framework are required and there is no runtime like there was with dnx\n. You need to use the new xunit runner on their myget to use beta8\n. I filed a bug on tooling for this. Closing here\n. /cc @ChengTian \n. Where is the dnx version in all of this? Is it beta4? What's in the global.json\n. @Eilon that's actually trickier than you think. This error message can show up in helios in the white screen of death as well.\n. @MichaelKetting Just run restore again\n. Should be filed on tooling.\n. @glen-84 does D:/Programming/Projects/ASP.NET/TempTest4/src have a global.json with a specific dnx version in it? If yes, is it the same as the main solution?\n. Yea this is bigger than including content we don't have a consumption story for content at the moment. \n. Content is never copied into the application when consuming packages that have content. It it also never included when creating nuget packages. \n. There is no way to do this and likely won't be. We won't support install.ps1 and currently don't support content.\n. Yep, we don't currently support platform but you can tweak the generated file as a workaround.\n. We're not adding anymore features to dnx at this point. We'll be revisiting the csproj integration for RC2 via nuget.\n. We work on nuget\n. I didn't test it but it looks good so :shipit: \n. We could throw specific exception types and print them out differently in the host. Exceptions that originate from the dnx vs ones that originate from user code.\n. What versions of things are you using?\n. What version of the runtime?\n. @ChengTian this is fixed now right?\n. net451 works?\n. See why travis is failing then :shipit: \n. @dougbu This is broken on *nix. Look at travis\n. Hmm\n. Ok I debugged it and figured it out. It's a behavior difference on mono with how assembly resolve works:\nThis is the minimal repro:\n``` C#\nusing System;\nusing System.Reflection;\npublic class Program\n{\n    public static void Main()\n    {\n        AppDomain.CurrentDomain.AssemblyResolve += (sender, e) =>\n        {\n            Console.WriteLine($\"AssemblyResolve({e.Name})\");\n        Assembly.Load(new AssemblyName(e.Name));\n\n        return null;\n    };\n\n    var an = new AssemblyName(\"Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed\");\n    var assembly = Assembly.Load(an);\n    Console.WriteLine(\"Hello World\");\n}\n\n}\n```\nOn windows .NET this stack overflows, on mono it just fails on the second call to load. It looks like the call is cached before a result is returned from the handler. This used to work because we only passed in the short name:\nAssembly.Load(PackageManager)\n -> AssemblyResolve (PackageManager)\n-> ImplicitLoad(Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed)\n-> AssemblyResolve(Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed)\n -> loadContext.Load(Newtonsoft.Json)\n -> Call loader chain, and it works!\nNotice the rename from Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed to Newtonsoft.Json. I'll file a mono bug but also work around this in teh codez.\n. Do we still need this?\n. I love that game\n. :shipit: \n. The case where VS doesn't make the global.json is when you add an ASP.NET 5 application or project to an existing solution. \nCan you move this bug to the aspnet/Tooling repository.\n. The biggest reason is dependency injection. The Configure method can be dependency injected and an interface would complete block that. It the same for middleware.\nTake a look at the Startup.cs in the mvc project template.\n. Closing this out as it doesn't belong on the DNX repository. If you have more questions, ask on aspnet/Home\n. There are 2 problems here. We have an issue with parsing nulls for versions in the lock file and the service bus package doesn't specify a version its dependencies.\n. @anfomin I pushed a fix for the lock file parsing, it'll take a while for the CI to pass but it won't fully resolve the issue. You should be able to work around this by doing the following in your project.json:\n``` JSON\n{\n    \"version\": \"1.0.0-*\",\n\"dependencies\": {\n  \"WindowsAzure.ServiceBus\": \"2.6.7\",\n  \"Microsoft.WindowsAzure.ConfigurationManager\": \"3.1.0\"\n},\n\n\"commands\": {\n    \"ConsoleApp2\": \"ConsoleApp2\"\n},\n\n\"frameworks\": {\n    \"net45\": { }\n}\n\n}\n```\nThis will override the broken dependency on Microsoft.WindowsAzure.ConfigurationManager\n. Ca you file this on aspnet/Home\n. /cc @glennc\n. Do you have those dependencies declared in the top level section or per framework?\n. Ah ok, its only adding those 4 assemblies. That's broken :smile: \n. I also want to see effective feeds.\n. @victorhurdugaci might be overkill.\n. Related to #2544. When you make this change, can you make it so that https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Host/Bootstrapper.cs has a richer object model that represents the things it takes as input? Basically a higher level hosting API that doesn't assume the caller is a command line application?\n. This must have the record for most commits associated with bugs\n. The 3 things that are expensive:\n- Microsoft.Framework.Runtime.ProjectFilesCollection..ctor()\n- Microsoft.Framework.Runtime.Project.BuildTargetFrameworksAndConfigurations()\n- Microsoft.Framework.Runtime.Project.PopulateDependencies()\nThe last one is a bunch of reflection that happens when we initialize LibraryDependencyType (totally unnecessary). I have a change to fix this.\n@troydai We should consider making ProjectFilesCollection more lazy. Today we calculate all of the patterns up front even though you may never use them in an application (if you're precompiled for example).\nParseFrameworkName can be sped up to have a fast path for the known framework names and versions.\n. See https://github.com/aspnet/dnx/commit/82f50f53059d0f7344b727f5dbfcd3a20b1e3daa\n. This was fixed\n. You can remove dnxcore50 from project.json if you don't need to run on core clr. Otherwise there's not much else you can do other than wait for the .net team to port the package \n. Closing\n. Can you move this bug to aspnet/dnvm\n. @muratg I'm not sure this matters anymore. This was the bug https://github.com/aspnet/dnx/commit/8ac58f641dba513e1b367c38a332adc08e2a9b63 that was causing other problems. I'll see if we still need this in beta5\n. @NTaylorMullen can you help @troydai test this out?\n. I'm not sure we should do this. We can't assume things like this. @DamianEdwards fix your configuration.\n. Seems like you have custom build of the dnx? Do you see the problem for builds coming from myget? Any specific reason you needed to build the dnx on mono?\n. Closing this out\n. :shipit: \n. @muratg This is a regression that I think should have been scheduled in beta5.\n/cc @ChengTian \n. Is it also missing in the release branch?\n. Test it then :shipit: \n. Vote on this https://github.com/dotnet/roslyn/issues/1081\n. @xanather You can just run dnx.exe foo.dll to get the same effect as CoreRun. The bigger problem is that nothing is copying the closure of assemblies to a single folder. \nJust use dnu publish --no-source and that will give you something runnable. I'm not exactly sure why you to build with dnu and run with CoreRun.\n. We added support for emitting an entrypoint https://github.com/aspnet/dnx/issues/2754\n. Look in global.json, what is the sdk version?\n. After changing it to 1.0.0-beta4, close and reopen the solution. \n. Also in the future file bugs like these on aspnet/Home\n. Sure, it is. You just need to make sure you update your packages because beta4 and beta6 are incompatible.\n. :shipit: \n. :shipit:\n. I think we need to rename this command\n. Run some tests by building some repositories in universe and consuming them with the new dnx and these changes. We need to make sure we don't regress anywhere we're reading or writing nuspecs.\n. :shipit: \n. :shipit: \n. God no, if it does that then that's how it works. We shouldn't change it.\n. Why is everything failing ci wise?\n. @pranavkm it does but the question is when is the redirect applied. It happens too late when dnu restore sees it because myget doesn't preserve the entire query string args when redirecting to https. NuGet.exe seems to apply the redirect to the base feed address. We might need to do something similar.\n. @jkotas Is there a way around this?\n. :shipit: After those minor comments. Also @troydai reverted the strong name changes so I assume this will fail until we fix it.\n. Did something change in the msbuild parsing logic? AFAIK we haven;t change this recently. Does it repro in the VS RC?\n. The new CLI fixes this\n. The unfortunate thing about this is that the msbuild based projects fail instead of noop. I would love to get that fixed instead of mimicking that behavior in the dnx\n. /cc @anurse \n. We should fix this\n. Make the timeout a parameter and force the caller to pass one. It's operation dependent.\n. :shipit: \n. Package restore does not work on linux on coreclr see https://github.com/aspnet/dnx/issues/1793\n. > Why don't console apps optionally instantiate a Startup class, if it exists, and call the ConfigureServices and Configure methods.\nThe Startup class is a web convention.\n\nThe required code is not large. Here is my first attempt which seems to work, but assumes that the Startup class exists. You could even constructor inject arbitrary dependencies into Main.\n\nIt actually is large. The dnx does not depend on any of those services you have in your application. The Program.Main is the lowest layer in the stack and has no dependencies on anything else. \nBut as you discovered, you could totally build it on top of the dnx. It's just a layering issue. We don't want dependencies in the lowest layer of the stack. Higher level things like Hosting build on top of that and provide the added functionality\n. Closing this, we can expose a library that does this.\n. :shipit: \n. Is it just suppressions? Do we want to expose this enum:\nReportDiagnostic.XX\n. :shipit: \n. @Eilon do we need this?\n. Nope\n. /cc @pranavkm \n. Sure, we can look at extending the current API to support native binaries. We just need to figure out what to do with it on full CLR\n. > maybe something like CoreCLR's solution should try to be added to .NET 4.6 before it RTM happens (might already be too late for that)?\nIt is too late. We have some other terrible ideas like modifying the path, or calling LoadLibrary/dlopen before loading the managed binary.\n. Prototype here https://github.com/aspnet/dnx/commit/afb29037e8c9aa21cdd9138cf3de74d30e39dc7f\n. Yep!\n. Added in rc1\n. We just added support for v3 \n. Please open an issue on nuget, dnx has been dead for over a year now.. @ChengTian wrong branch?\n. @PradeepKadubandi was this supposed to be for beta5?\n. Do we still need this?\n. Still it breaks travis which means it'll likely break real systems. Why is hardcoding /usr/bin/env better?\n. @jasonmalinowski nope he meant @jasonwilliams200OK \n. Looks about right. This is by design. The difference is now that VS is letting the exception bubble vs letting the console pop up and disappear. This is a recent change that @BillHiebert made\n. Yep that's by design. DNX is the host and we're letting exception bubble out of it in VS. For this particular exception could be handled by Hosting but in general exceptions are bubbling out the DNX now intentionally.\n. Move to CLI removes commanding support\n. :shipit: \n. Did you do a git clean and rebuild to see if that works?\n. Seems like travis is passing https://travis-ci.org/aspnet/dnx\n. @moozzyk We'd have to check the registry after a failure. That might help detect this type of situation.\n. That's how you check for .NET. I'm not sure it would be that complicated. \n. ?\n. It's already fixed and it's a dnvm bug.\n. https://github.com/aspnet/dnx/issues/2081\n. ```\nMicrosoft .NET Execution environment Mono-x86-1.0.0-beta6-12100\nUsage: dnx [options]\nOptions:\n  --appbase                  Application base directory path\n  --lib                 Paths used for library look-up\n  --debug                          Waits for the debugger to attach before beginning execution.\n  -?|-h|--help                     Show help information\n  --version                        Show version information\n  --watch                          Watch file changes\n  --packages          Directory containing packages\n  --configuration   The configuration to run under\n  --port                     The port to the compilation server\n```\nIt does work:\ndnx --packages <DIR> <applicationpath> <command name>\n. Why?\n. I'd actually prefer to call to web but I don't know what damage that will cause to people's brains :smile: \n. Not saying this is wrong but why are quotes needed?\n. :shipit: I wonder what other scripts we broke\n. > XRE is the only repo in aspnet that uses the scripts feature in project.json files. And @troydai's change updates all of those files. So nothing within our system.\n\nHowever now that bash is consistently involved, some who worked around the old system may need to update their project.json files too.\n\nExcept you're forgetting all of the people who ever used that feature outside of the ASP.NET team.\n. @ChengTian is doing work in this area\n. Closing this out nothing to do heee\n. Do relative paths still fail @anurse ?\n. @kichalla The no async main method doesn't apply to DNX, we always wait at the entry point if Main is async. If error aren't showing up then we might just have a bug.\n. Right\n. Why?\n. It's not currently supported no.\n. @moozzyk did you fix this?\n. > How i can search, download, unpack package in runtime?\nUsing NuGet APIs, this has nothing to do with the runtime per se. Run dnu restore.\n\nAnd how i can load dll from package in runtime?\n\nHere's an example on how to add a custom assembly loader https://github.com/aspnet/Entropy/blob/dev/samples/Runtime.CustomLoader/Program.cs\n. It's to avoid things like this https://www.nuget.org/packages/Ninject.Mono/\n. Sigh seems like these issues weren't triaged. This was punted\n. > This would be a great help, as Mono is already truly cross platform and widely supported, however coreclr isn't and a lot of great libraries simply aren't supported. So being able to target Mono would be great.\nThis bug isn't about targeting mono all up. It's about targeting either mono specific APIs that DO NOT exist in the .NET Framework itself, or targeting mono because of missing APIs. Either way, this is no longer a DNX issue and is a nuget issue.\n. I'm not I'm not sure what you mean, what config file are you trying to read? Can you give a more end to end example?\n. > Sure, I created a package from an assembly, the assembly needs needs to read from a configuration file at runtime to get the IP of the services it will consume, this was trivial with System.Configuration because it was implying there would be an App.config or a Web.config with an \"appsettings\" section.\nThat's correct, there's no static System.Configuration anymore.\n\nBut now with dnx where there is no App.config and you need to add the configuration file in the startup and my package has no clue from where to get that runtime configuration, this is the scenario:\n\nSure there is, we do it all the time. You just need to change how you did it.\n\nmy application crashes because the package has no way to retrieve the IP for the services it will consume and this is because there is no App.config now, so, the package needs to know from where to read that information, and there is no current way to do it because the package doesn't have access to the IHostingEnviromen service and It shouldn't because this package can also be used in desktop applications.\n\nSure it does. Use dependency injection to get the IApplicationEnvironment. Maybe you're saying you don't want to use it?\nWe do this in a bunch of places. Hosting has an example of that https://github.com/aspnet/Hosting/blob/dev/src/Microsoft.AspNet.Hosting/Program.cs#L31.\n. You mean you want to use a static. We pretty much have tried to remove as many statics as possible from the new framework because in general it makes things harder to test and parallelize. You just need a way to get the current application base as there is no \"current configuration file\", you need to make one up and choose a name.\n. Seems like you missed the critical part of the last comment:\n\nYou mean you want to use a static. We pretty much have tried to remove as many statics as possible from the new framework because in general it makes things harder to test and parallelize.\n\nAlso IHostingEnvironment is wrong, you need IApplicationEnvironment. Make your package take in the base path the configuration file, or have the application pass it in to your package. There really isn't a clean way to get the IApplicationEnvironment if you're not using DI.\n. IHostingEnvironment is WRONG it represents the webroot, which is for serving static files. It does NOT represent the application root, where code and configuration files are located.\n\nbut looks like you missed the part were I said I don't have the source code for some assemblies and it means those are useless now and a new version of those assemblies is needed and that is a lot of problem.\n\nThen I assume you only care about running on .NET Framework, not .NET Core because System.Configuration isn't there.\nIf this third party assembly is always reading from app.config and cannot be changed then I think you're out of luck. The AppDomain's ApplicationBase isn't even pointing to the application base path (like it does in vanilla .NET Framework) so none of those calls will just work without specifying full paths.\n. > That's what I needed to now,if vnext was an option for the Project we are going to work and looks like is not and we are going to use something else instead.\nThat's good feedback. We might be able to make some existing scenarios compatible in very narrow situations. Like a web.config on IIS (maybe), but not across the board for general App.Config files. \nDoes the library support passing in any sort of configuration or does it just assume that System.Configuration is available?\n. What does the API look like and how to you tell it where to read from?\n. Is that the code from the library itself? Or the application using the library?\n. I'm confused. You said you don't have the source code to something. What was that thing? Can you show me how the application developer uses your library to tell it what configuration file to look at? Lets say I wanted you to read configuration from \"c:\\mysharedconfig.ini\", can I make your library look there?\n. > But, other libraries that are needed for financies reporting that asume there will be an App.config file because it will read some variables from the appsetings section, there is no way to make that assembly to read the file from dnx since there is no App.config file and I don't have the source code eather, and that is the main problem.\n@ramsees Thanks for the clarification. Today things that try to read app config are broken. I'll see if there's anything we can do to make this work. The application base path is different for DNX based applications but maybe we can enable a mode where the application base path is the application folder itself. We might be able to tweak the configuration file location to be more compatible with existing libraries for DNX 4.5.1. This obviously won't work on CoreCLR (as I've stated before).\n. @RickStrahl \n\nDavid - this is a great discussion because it points at some of the difficulties in figuring out how to find stuff. How would you find out about how to manually instantiate ConfigurationBuilder for example? Is that even documented anywhere?\n\nThe docs are a version behind and don't show the new configuration builder API. Stuff shifted around a bit but the fundamentals are still the same. See http://docs.asp.net/en/latest/fundamentals/configuration.html\n\nAlso, I know I've been having a bit of trouble finding good examples and description of the process of how to hook up DI into your own components\n\nYou can do this in several ways. MVC for example is a library that chooses to expose it's registrations for the IServiceCollection. The app developer needs to call services.AddMvc before they can use MVC. You can follow this pattern for your libs. You can also just declare dependencies in the constructor of your libraries classes and have them be injection friendly, that way the application code wires your library and it just works. You could also just have your library take an IConfiguration instance.\n. Config respects relative paths now.\n. :shipit: \n. It'll be possible (probably) with tthe move to the new dotnet CLI\n. Effective feeds are the set of feeds that were actually used during a restore. If you have 10 feeds configured but packages only came from 2 of them, those would be \"effective\".\n. nuget\n. https://github.com/NuGet/Home/issues/1811\n. :shipit: \n. I haven't seen this problem happen consistently. Try updating mono. It's much rarer now.\n. I think trace is still super hard to read :smile:. The rest of the code looks good tho\n. :shipit: \n. We need to fix this\n. :shipit: Looks great! Can you add a test?\n. BTW you don't need to strong name to use InternalsVisibleTo\n. You need to check for the existence of the project.json file. Also if the file doesn't parse, don't catch the exception, just let it fail\n. Possibly with a clean error message.\n. For web.config we need to make sure we don't override the user's config section \n. You also missed .NET 4.5.2\n. :shipit: \n. This is actually a known issue see https://github.com/aspnet/Tooling-Internal/issues/291\n. You're trying to build the dnx? You'll need myget as some packages are not on nuget.org\n. We need to look at what we store in app data. I assume you still have a LocalAppData? We need to cache things somewhere (http cache).\n. I'm not sure what you're asking for is workable. It sounds like you want a way to override anywhere nuget decides to write stuff. Is that correct?\n. @ericstj Additional configuration seems similar to setting the right environment variables. Lets say we called them DNU_CACHE_LOCATION etc. You'd still need to set them. We write to some of those locations, others are easy to skip.\n. /cc @emgarten @yishaigalatzer \n. Can you show before and after since there are no tests\n. What happens if you pass multiple projects to restore?\n. Here's what @BrennanConroy and I decided, add a small RestoreMessageContext that has Errors and Info messages and pass that to each invoke call. That state is different per call to Execute()\n. @BrennanConroy What's the deal with this change?\n. @BrennanConroy Is this going to make it for beta7?\n. :shipit: After that small change\n. It's not wrong. That's the version. We rewrite the nupkg version before publish.\n. We need to improve the error message\n. We need to also test meta packages to make sure we didn't break anything.\n. I actually am not a fan of just marking it unresolved. I think we need another diagnostic to say what went wrong.\n. :shipit: \n. Why is the build failing?\n. Can you file this on aspnet/Home?\n. :shipit: Make sure there's nothing else like this.\n. /cc @troydai \n. /cc @stephentoub Can you take a look at this?\n. :shipit:\n. :shipit: \n. :shipit: : \n. :ship::it: \n. Today we do this but only with the prerelease suffix. You can make a project.json that looks like:\nJSON\n{\n   \"version\": \"1.0.0-*\"\n}\nIf you set the DNX_BUILD_VERSION environment variable, it'll replace the -* with -{DNX_BUILD_VERSION}. This is how we're producing our builds. We set DNX_BUILD_VERSION to the team city build number.\n. There are not plans currently to make this work. Is this a CI scenario or mostly just how things are controlled in general? \nThe scenario makes sense and I'm not opposed to bring back the version replacement token. I do have some questions about how that works with project references:\n- Are you versioning the entire solution with the same version?\n. I know you're asking for a feature that exists in NuGet but I still want to understand the scenario better because in practice things are usually only used in a few ways. That's not an excuse for removing features, it's a way to figure out what a better workflow would be in the common case. For example, we're  looking at a feature to enable specifying the version in global.json so that you can version projects under that global.json with a single version.\nThe reason we only supported replacement for the pretag is exactly what you said, usually on the CI is where you bump versions. Our local build scripts actually use it the same way, when you build, we generate a timespant t{current date as a long} for your package version. \nThat said it's pretty important to be able to pass any initial version as input to the build. We'd want to allow that for global.json if we did that feature as well.\n. Sounds good, care to do a pull request? The relevant code is here https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime/Project.cs#L186\n. Sure @glennc can we setup a design meeting for this?\n. The problem is that these packages have inconsistent nuspec versions. \n@muratg @ChengTian @anurse  we should fix this ASAP. A bunch of packages are running into this. We need to resolve the inconsistencies between package version in the nuspec and elsewhere.\n. This absolutely repros. I can repro it myself without a commands install.\n. It would be web.config for IIS \n. This is no different to how things work today.\n. Besides size of the deployment, what's the motivation? What's wrong with the project.json and folder hierarchy staying around? Why does it need to be flat?\n. As small as possible has nothing to do with folder hierarchy. We have the folder hierarchy for several reasons:\n- We support servicing of packages and the dnx itself. So if there's a security issue, we can patch a machine and have the dnx pick that up for particular packages. We reuse the folder hierarchy so that we don't have to have a different code base for groking flat assemblies. The CoreCLR doesn't have any servicing support.\n- dnu publish is web specific, if anything this would be an option on dnu build.\n- Today the layering of the dnx makes is such that NuGet assembly resolution and other services (dynamic compilation go away) when you use the lower layer. This is our default experience and even though we do support dnx.exe foo.dll it's not a mainline experience for us. \n- Side by side runtimes works so you can deploy a portable application that runs on multiple platforms. We do this for some of our dnx based console applications (it's a very npm install -g experience).\n- Consistency between development and publishing. The published image is just a smaller version of what you get during development (global packages folder etc). \n- The DNX provides a bunch of services that the application can use. Today the services are different depending on what layer you run at. This can be tweaked but that's how it works today and the lower layer has very little to offer (which might be fine in some cases).\nThe DNX is really a nuget aware runtime, that tries to avoid copying anything anywhere at all costs. It loads thing in place and can treat a folder full of source files as an assembly. \nNow to answer specific comments:\n\nWell, besides size being the main reason, it would just be easier to manage and simplifies deployment.\n\nSize is important all around. We actually want to support publishing a minimal set of files for web deployment as well. As or ease of management, I think people are just used to a flat list of files. It would be easier to have a single file :smile:. This also assumes single architecture/os etc. This really isn't what the DNX is about. Something like corerun is better suited for this.\n\nThis would help deploying desktop (and server) apps. The generated/copied files would be targeted towards a specific platform only (based on which DNX/DNU is being used to publish).\n\nSee the above answer. We haven't designed anything for desktop applications although people have built some windows forms things on top of the dnx and it works great!\n\nI also hit Windows NT MAX_CHAR limit far too easy with DNX's hierarchy publish which results in DNX immediately crashing and closing itself.\n\nThat's unfortunate :smile: \n\nIt really is that simple. Looking at the world through ASP-colored glasses, that may not look like it makes much sense, but when this is used as part of the CoreCLR machinery, it needs to be made friendly for deployment to desktop and mobile systems.\n\nWhat mobile systems are people using the DNX for?\n\nProject.json and all the folder hierarchy of dependencies should be considered source; the finished product should be as simple (and small) as possible!\n\nExcept it's not, it's actually used at runtime. \n\nIf this is out of scope for DNX and is is not the right place for this that's fine, maybe the CoreCLR corefxlab repos? Just let me know. DNX seems like it will be the \"official\" bootstrapper for CoreCLR, I think something like this should eventually be added.\n\nFor v1 it certainly is. The main scenario for v1 is ASP.NET and global console applications. BTW what you're asking is more a dnu option. The CoreFX team still use msbuild + dnu to produce flat folders that are architecture and os specific. That might be something to look at. I think corerun is probably the lowest level you can work at as there are no restrictions or structure imposed on your application. It's a folder full of dlls + and exe, that sounds more like what you want.\n. With the new dotnet CLI this should be possible.\n. Yep\n. @muratg I think we need to do this for beta6\n. Reopening this /cc @muratg @glennc \n. Why did appveyor fail?\n. The better fix is to show what nuget config eadh feed originates from. That will avoid this type of confusion \n. Thanks for the PR @jmloeffler !\n. /cc @victorhurdugaci \n. :shipit: \n. :shipit: \n. Why do we need this? When building with Coreclr?\n. That doesn't make any sense. If you're using dnx-clr you should be able to create signed class libs if you're on windows.\n. Ye it sounds like a broken vs install or an older build of vs opening a newer project \n. /cc @troydai looks like your manifest parsing changes \n. @troydai What's the purpose of this bug?\n. So you mean that all of the nuget packages will still work but we want to refactor our code to be more xml friendly?\n. :shipit:\n. @BrennanConroy What's the deal with this?\n. It is by design because each solution has their own global.json and each of those will have to be updated to get sources for your entire closure. See https://github.com/aspnet/dnx/issues/950 for more details\n. If you open up the Logging node under your project you should see your project reference. From Hosting's POV it's still referencing the package, but your application is seeing the project for the entire closure.\n. > For my CI system I'm using powershell to kick off some final steps before deployment. I can \"successfully\" install the latest dnx with dnvm, do a restore and a publish. However I'd like to do a DNU to check for any code or reference errors via dnu build but I'm getting build errors due to missing references from project C to B and A.\nYou can use dnu publish --no-source if you want to published compiled binaries.\n\nFrom powershell i'm doing a Start-Process with -Working-Directory set to the solution root, but this always fails, and C seems to not find project's A and B. However if I Invoke dnu build path\\to\\c\\project.json from an interactive powershell prompt this appears to work, when automated it does not. I've tracked this down to differences in the project.lock.json file, previously I had these checked into source control, and I decided to remove .gitignore them due to high churn. Without the project.lock.json coming from source control (previously \"good\") the build will fail, dnu restore will generate the lock file, but it seems incorrect.\n- Assume you always need a lock file.\n- dnu restore should make a good one. You don't need to check it in. You should restore then build.\n\nCan you share your project structure? \n\nAny ideas what I am doing wrong? I've been stumped on this pretty much all day.\n\nI'd have to see a repro to know that. A minimal one would be good.\n\nGuidance / examples on how to kick off dnu correctly from powershell (dnvm works great)\n\nThe obvious thing should just work without much changes. \n\nBetter diagnostics tools for these situations, how does dnu build resolve project references? Diagnostic dumps would be super useful.\n\nOne thing we don't show when there's build failures is the project search path. We should add that information.\n. We need to make restore do this by default.\n. No idea , try updating mono and the dnx.\n. This is already fixed in beta5\n. ok\n. :shipit: \n. Where is the change that always writes the normalized version folder? Does this code affect both reads and writes? Does it work with v2 and v3 feed formats? Local and remote?\n. Sounds great! I think this fix will work well then. Please add a basic test\n. Add a restore test.\n. :shipit:\n. > I thought that beta5 would be backward compatible with be beta4. So whatever works on beta4 should work on beta5 too.\nThis is a bad assumptions. Our betas are not backwards compatible. You need to update everything to beta5 (including packages and you should read the Announcements repo to see the changes https://github.com/aspnet/Announcements/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0.0-beta5\n. Here are my notes https://gist.github.com/davidfowl/eedd4a3ec4e49d35bef3. I have a branch with some changes where I started some of the work.\n. There are no tests. Can you add some? I actually dont understand the problem\n. :shipit:\n. I'll take this one.\n. Pretty sure this wont' make it for beta6. Can we make this an escrow bug? /cc @muratg @danroth27 @DamianEdwards \n. Back logging this. We made some attempts to fix this but it was messy so punting.\n. irrelevant with the CLI\n. Turns out we do have restore tests /cc @ChengTian \n. :shipit:\n. It's likely a casing problem. It should be all lowercase (unfortunately) nuget.redirect.config\n. Nice!\n. :shipit:\n. This is pretty important to do. Any exception that happens before the application boots up shows:\n\n. Dupe of https://github.com/aspnet/dnx/issues/1795\n. +1\n. You may as well merge this because it's too big to review :smile: \n. Was added\n. Looks like a duplicate of https://github.com/aspnet/dnx/issues/2192\n. /cc @troydai did the build pass yet?\n. Sure but that's not relevant to the bug. The goal is to help us narrow down the problem by providing us to proper repro steps. I can't even reproduce the bug right now locally. Where is that package coming from?\n. @anurse @ChengTian  Based on @troydai's changes I'm guessing that you can end up with a situation like this:\nOld DNX before @troydai 's fix:\n.dnx\\packages\\MyPackage\\1.0.0\\MyPackage.1.0.0.0.sha512\nNew DNX after @troydai's fix:\n.dnx\\packages\\MyPackage\\1.0.0\\MyPackage.1.0.0.sha512\nNotice the normalized version folder and the sha512 file. Since we changed the format, we need to make sure that we only use the folder if it is in the format we expect. This means that we need some extra logic to search for {id} + {normalized}. {extension} at dnu restore time.\n/cc @muratg This might be a large regression that we should look at ASAP. \n. This is on windows right?\n. /cc @Eilon @maartenba Looks like something bizzare going on with the myget feed. The query for finding all versions is there but it looks like the blob is missing somehow.\nMinimal repro:\n{\n    \"dependencies\" : {\n        \"System.Runtime.Extensions\": \"4.0.0-beta-23109\"\n    },\n    \"frameworks\": {\n        \"dnx451\": {}\n    }\n}\ndnu restore --no-cache -s https://www.myget.org/F/aspnetvnext/api/v2\n. Please open issues like these on aspnet/Home.\n. @moozzyk Are you planning to move more of this code to STL?\n:shipit: \n. /cc @muratg \n. Dupe of https://github.com/aspnet/dnx/issues/438\n. Dupe of https://github.com/aspnet/dnx/issues/2060\n. Can't we do this check here: https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime/NuGet/Repositories/PackageRepository.cs#L106\n. @troydai I prefer that change. It should only affect restore because PackageRepository has 2 code paths. With and without the lock file.\n. @troydai Much better! The comment needs some work\n. Can you add a test? We do have restore tests ping @ChengTian \n. :shipit: does this also fix the issue for publish? An issue we just filed on this\n. I don't think that matters, we can wrap the original one\n. /cc @victorhurdugaci \n. Looks like a mono bug. I'd suggest reporting it on their issue tracker \n. :shipit: \n. @ChengTian Can we add a test\n. Add the types in https://github.com/aspnet/dnx/tree/anurse/2225-compilation-refactoring/src/Microsoft.Framework.Runtime.Compilation.Sources into Abstractions and nuke the .Sources package.\n. Try a newer DNX version \n. dnvm upgrade -u\n. We should also add a higher level abstraction. Something that abstractions paths used in dnu/nuget itself. As an example:\n``` C#\npublic class DnuEnvironment\n{\n    public string GetFolderPath(DnuFolderPath type)\n    {\n         // Switch here on the types of folders and use the Environment wrapper to detect\n    }\n}\npublic enum DnuFolderPath\n{\n   HttpCacheDirectory,\n   MachineWideSettingsDirectory,\n   GlobalPackageConfigurationDirectory,\n   GlobalPackagesDirectory,\n   DnxHome\n}\n```\n. Where are the mono changes?\n. > I thought we weren't going to do the folder check and only support filenames (replacing the command, effectively). Selecting a different folder would only be supported by dnx -p /path/to/project run\nI thought that was the plan? VS uses the full --appbase expansion. The only thing we need to support is .\n. @anurse Wasn't that part of the suggestion? -p to replace dnx {path} {command}\n. Is there an actual conflict? What are you trying to resolve?\n. @Ph47 That's actually not how any of this works. You should take a look at this documentation https://github.com/aspnet/Home/wiki/Dependency-Resolution and after, show the project.json and the exact problems you're running into and I'll be able to show you how to fix it.\n. > I understand how it work now. But is a mistake here. Looks at figure 3 at this document. I have this situation at Remotion.Linq - low version dependency silently replaced with high version. Nobody cares about version compatibility.\nIt's not silent, it's how NuGet works. Versions are a minimum so they float when another dependency requires a higher version. That's actually how most systems work. Exact versions are terrible to use and stop things from working most of the time.\n\nBecause of this approach, I spent two hours to understand exactly where the error is. Nor DNU nor runtime displays actual error (\"Version conflict\"). Instead of this an actual execution error was displayed (\"No such method\").\n\nAgain, it's not a bug, it's absolutely by design and intentional. Seems like you have a true incompatiblity and you need to talk to the package owners about updating their package to work?\n\nHowever, if version ranges are introduced in the future the algorithm will need to choose the best version that fits within the range constraints.\n\nThat is actually incorrect and we'll need to get our document fixed /cc @glennc. Adding maximums simply makes things fail and today, we don't check them and that is a bug. But I'm not even sure that's what you're running into.\nIf you want to force your project to use a particular version of a dependency, specify it in your project.json directly. It will override anything up the dependency chain with your version. If that combination is truly incompatible then you need to figure out something else.\n\nMy project file here: https://gist.github.com/Ph47/9b50dba0adf992ed0fad but i have no ided how you can fix this with strategies described in article - none will works.\n\nCan you narrow down your project.json to a minimal one that reproduces the problem and call out which versions are used where?\n. > We need a right way to use different version of subdependencies for each dependancy.\n@Ph47 So you actually want side by side loading (which has its own problems). That doesn't work and will not work for the forseeable future. You are at an impass and need to use compatible dependencies.\n. You'd need to talk to the package owners about that. We can have a greater discussion about jumping past major versions triggering a warning.\n. This is the cause https://github.com/aspnet/dnx/blob/dev/src/dnx.host/RuntimeEnvironment.cs#L28\n. This change seems to affect everything doing compilation. Did you test:\n- runtime compilation\n- DTH compilation \n- dnu build \n- razor build\n- Helios error page\n- diagnostics error page\n. So this requires a tooling change? I wonder why? What happens in VS RC?\n. @BillHiebert Why are 2 messages showing up in the error list? Isn't that what this entire fix is about?\n. :shipit: \n. @troydai Why isn't this issue closed and tagged and put in a milestone?\n. @troydai problems here:\n- No bug or enhancement label\n- No assigned person\n- Fix not linked to commit\n/cc @muratg \n. This isn't going into beta6, it's beta7\n. @troydai Instead of this change, new up a PackageResolver with the right path and call GetPackageDirectory\n. Where is the DTH change? Also can you make GetDependencyDiagnostics internal?\n. @BrennanConroy don't tag PRs just the issues\n. There's no good way to show warnings at runtime.\n. Why is appveyor failing?\n. All of those methods have moved to Type.GetTypeInfo(). For further details file an issue on https://github.com/dotnet/corefx\n. That's because it's an extension method brought in by System.Reflection\n. See https://github.com/aspnet/Announcements/issues/44\n. DNX only supports C#. The next language we'll support will be VB and we'll have extensibility for other languages. In the mean time you can use https://github.com/YoloDev/YoloDev.Dnx.FSharp\n. Hey, at least you get an error now :smile: \n. NuGet actually supports version numbers. It's 10.0 to avoid ambiguity. 100 -> could be 1.0.0\n. @natemcmaster can you reproduce this on demand?\n. /cc @BrennanConroy this is a dupe right?\n. No tests?\n. appveyor timed out\n. It is updating you should be able to determine what package is bringing in beta4 packages by looking at the lock file. Just because your project.json states beta5 doesn't mean you'll get it. If beta5 of that package doesn't exist, or your feeds are misconfigured means you'll get errors.  Did you read the https://github.com/aspnet/Announcements/issues repository?\n. That doesn't affect package restore. The NuGet.config does. What NuGet sources do you have configured\n. Consider the impact on design time as well. He language service needs the list of analyzer assemblies \n. @giggio Nope, it's been cut. See the roadmap https://github.com/aspnet/Home/wiki/Roadmap\n. @iaingalloway That's correct. Ones from nuget packages. The VSIX based ones will likely just work (tho that needs to be confirmed)\n. Moving ASP.NET to the new dotnet CLI this will be implemented over there.\nhttps://github.com/dotnet/cli/issues/83\n. See https://github.com/aspnet/dnx/issues/1559\n. Lock file is the way to go here.\n. /cc @anurse \n. @moozzyk What's the state of this change?\n. Net portable 5.0 is what's broken. We read the tfm from he project file.\n. Are you asking about loading or compilation?\n. We removed this feature\n. Closing this, if it's still happening with rc1 update 1. Let me know\n. beta6 you'll get an error like this on build:\n\nWe could do a better job at runtime though:\n\nWe should show a different message for incompatible deps at runtime (similar to build time) /cc @ChengTian \nWe can show the resolved target framework if the dependency in incompatible or just have something like:\nClassLibrary 1.0.0 .NET Framework 4.6 (incompatible)\n. I believe we also don't show the search locations anymore.\n. We spoke about this today and are going to make a split. The current project.lock.json will be the generated file used for runtime/buildtime and there will be another file maybe nuget.lock.json (name is still up in the air) that will just preserve version information.\nThe guidance will be that nuget.lock.json should be checked in if you want to lock versions. It will not be generated by default, but you can either do dnu restore --lock or dnu lock (there will be equivalent nuget.exe commands). \nThere is still an open question about putting the current project.lock.json in an output directory (bin\\project.lock.json or obj\\project.lock.json) but this file is read by the runtime so that seems a little strange.\n. I don't want to turn this bug into a discussion about packet but the project.lock.json is basically the format that needs to be produced to make dnx apps work.\n. Because the behavior of nuget and dnu isn't changing with respect to how dependent versions are resolved. There is really no reason to lock the project in most cases and it breaks version ranges. Meaning you have to keep running commands that constant update the lock file. I agree that it is a valid workflow and there should be a way to work like that but it's not the default required flow. There are still concerns about the project.json file changing and the nuget.lock.json (or whatever we call it) being out of sync.\n. > With this split Paket could now detect i'm running from a vnext dir and write a much terser nuget.lock.json file instead of the entire project.lock.json. Command line integration with dnu might be out of the question but its no different then nuget at the moment.\nThat's inaccurate. project.lock.json is always required for the runtime to function. We're splitting responsibilities of the files, the need for those files still exist. But please, not on this issue. \n. > This ticket is to discus the merits of locking by default using dnx ootb tooling which I'm still having a hard time understanding why the aspnet team is on the fence about this.\nBecause there are certain workflows that make cause friction, like the ones we use. I guess the problem is that we don't preserve our nightly builds forever, they get deleted from myget and having versions checked into source control that update every ci build would be very chatty. We have > 50 repositories that consume builds from each other where the version number is bumped on every build. That would be super noisy. Now on projects where you aren't building all of your own dependencies then it makes more sense.\n. > All it takes for you is to update your CI build to do a dnu update explicitly before building, to make sure whatever is currently committed still works with latest everything.\neek, and flood source control with commits that say, updating versions? I'd rather not :smile: \n\nThe fact your versions are not stored forever is irrelevant even then in the case of nightlies. For the same reason these versions are probably not tagged there is no need to recommit the changed lock files.\n\nSure it is. You made a huge point about repeatable builds. Which lock files would we commit?\n. Who commits the updated lock file so to source control?\n. Is there ever a lock file in source control? \n. Developer is working on one of our repos and new versions of packages are on the feed, they update the lock file?\nCI builds needs to build against the latest of everything. Run dnu update or whatever but don't commit the lock file.\nWho updates source control after the ci passes and produces new packages against the latest dependencies?\n. > In situations where you are cutting real tag worthy releases, commiting the nuget.lock.json is a good thing.\nTotally agree!\n\nIf you are doing true continuous deployments to production, never ever would you NOT want to checkin your nuget.project.json.\n\nWe're talking about publishing libraries to myget.org (ci) or nuget.org (production). I appreciate that there are other scenarios (like publishing apps to production) but in this scenario I would never check in the lock file until there's a release, like 1.0.0-beta7 for example, which I think is what we do already today.\n. Moving to the RC\n. Yea, we need one of those\n. We don't have anything right now. Though if you run outdated on the BCL packages as they are authored right now you can end up with a version that is too new that drops compatibility for platforms you may care about.\n. Dnx has been dead for over a year now. Best to open an issue on nuget about creating a true lock file. In csproj what used to be the lock file is now the assets file and in the obj folder.. This is actually part of the intended design. You should be able to pass in the framework for quirking and compilation on the command line but we would prefer the highest in the absence of that information.\n/cc @anurse \n. Yes\n. /cc @muratg this needs to go into beta7\n. Under dnx451 add:\nJSON\n\"frameworkAssemblies\": {\n    \"System.Runtime\": \"\"\n}\n. Move these all to dnxcore50:\n\"System.Net.Http\": \"4.0.0-beta-23019\",\n\"System.Data.Common\": \"4.0.0-beta-23019\",\n\"System.Data.SqlClient\": \"4.0.0-beta-23019\",\nand remove dotnet\n. I don't know what state your project is in at this point.\n. @xPaw Please read the coding guidelines. We don't accept patches to the master branch.\n. https://github.com/aspnet/Home/wiki/Engineering-guidelines#branch-strategy\n. https://github.com/aspnet/dnx/issues/2402\n. /cc @anurse @ChengTian \n. This was fixed in beta8 with my recent refactoring. I'll add coverage for this before I close it.\n. :shipit: \n. Everything possible in the nuspec should be possible in project.json. It is indeed a replacement when dealing with dnx/xproj projects.\n. Thanks!\n. /cc @moozzyk \n. You missed dnx.mono.managed \n. Don't do that. Fix the name. It's super easy.\n. Please rename the mono assembly in this change. It's localized to the dnx repository and will take 5 minutes.\n. Lets do that and then rename again. I don't know where DomainManager comes from but only CLR has a domain manager and I don't even remember that name in the original rename list.\n. Yea no this isn't that feature. This is about getting source code that you can edit. Symbols is a whole different feature. Dnu symbols get or something\n. :shipit: I think we're going to need a unit test or something for this\n. :shipit: \n. You should update your packages to beta7 if you plan to use the beta7 dnx\n. Sounds good. Makes build for p2p deps sound like private dependencies \n. We need to figure out if this is a build time trick or if we make dnu restore aware of build time dependencies listed in project.json\n. This has tooling impact /cc @BillHiebert @barrytang . How do we choose the .NET Framework from VS?\n. @Gentlehag @YoungjaeKim Can you provide EXACT repro steps? Do they match the above? Can you reproduce the problem in a new project?\n. Does it require a change to the dnx source code? If not, then why file it here? We usually use universe for that\n. Seems like a tooling bug. Can you show your project.json? How many frameworks do you have listed?\n. Yep, it's a tooling issue. We seem to hard code this in the DNX.props file:\nXML\n<TargetFrameworkVersion>v4.5</TargetFrameworkVersion>\n<TargetFrameworkProfile>Client</TargetFrameworkProfile>\n<TargetFrameworkMoniker>.NETFramework,Version=$(TargetFrameworkVersion)</TargetFrameworkMoniker>\nIt makes msbuild complain constantly but it's just a harmless warning.\n. /cc @BillHiebert \n. Moving to the tooling repository\n. No the casing should just be correct is all.\n. My problem with the way this is implemented is that it doesn't play with any of the other diagnostics that we have today in the DNX. That means it won't show up in VS or during compilation. The fact that we don't store restore diagnostics anywhere is actually a problem. I'd like to see a solution that ties into our existing diagnostics infrastructure. These are basically dependency diagnostics.\nWhat happens when you try to run this application if the dependency doesn't provide a runtime assembly? What happens at compile time? What happens if I don't care about running and I just want to build? (class lib scenario)\n. This shouldn't be a dnu command but instead should be a standalone global command.\n. This should totally be outside of dnu. Scaffolding can get complex really quickly (just look at our yeomen templates) and we shouldn't couple this to dnu (which is already doing too much). Template management  will get complex, it will need to be updated separately from dnu itself. Dependencies in those templates will change over time. It's much more complicated than it looks like on the surface. \n. I'm against this being in dnu itself. \n. I'm not a fan of the implementation so far. It's beginning to bleed a little into the mainline compilation API. I was hoping it would be an implementation detail of the roslyn compiler. The only place where it needs to bleed is DTH where we need to return analyzer file references directly.\n. /cc @anurse This is a known issue\n. What mono version?\n. This bug is a dupe of other bugs:\n- https://github.com/aspnet/dnx/issues/452\n- https://github.com/aspnet/dnx/issues/1590\n\nAlso if you notice in the gist, some of the packages that had timed out were previously and successfully retrieved, but it attempts to retrieve it again. For instance, look at the Microsoft.AspNet.Diagnostics* packages. I think it would be more efficient to use what was already retrieved, checking a local cache of some sort for the current session?\n\nIf the versions are not wildcarded that that's the case. If you use * then it'll always try to hit your configured feeds to find the latest package.\n. @glennc When does this need design?\n. Can you make a repo project? It's hard to know what conflict means without seeing version numbers and compilation errors.\n. Dependencies are transitive by default.\n. Dangerous? It's the way nuget always worked. When you install a package today you get the full closure added to your project. It's no different with project.json. That said, there is a plan to allow for private dependencies but it's not implemented as yet and probably won't be for v1.\n. > Today a dependency's dependency will explicitly be added to a csproj's references and packages.config.\nCorrect, assemblies are non transitive but the act of installing via nuget will make it transitive. In the project.json world, this happens by default by just referencing the top level dependency.\n\nIf PayPal stops using Newtonsoft.Json in a future version, upgrading to the newer package won't remove Newtonsoft.Json from the csproj or packages.config.\n\nIt will if no other package is using Newtonsoft.Json.\n\nWith the new project.json, upgrading to the newer package will result in no reference to Newtonsoft.Json. The application will no longer compile.\n\nThat's correct. If the application didn't depend on Newtonsoft.Json directly, it will break.\n. It's by design. Private dependencies will allow you to do what you want but that's not the default and it shouldn't be. Also the fact that there are so many package dependencies to specify now, it can be helpful that some are transitive by default. Ideally, when we add the ability to make packages private dependencies, the compiler should complain if you chose to make something internal that was exposed in public API.\n. Closing this issue out as its by design. \n. It should be but we currently don't show diagnostics during restore.\n. @ChengTian says this is twice as slow. We should punt this change if that is the case.\n. Can you give repro steps \n. No bug associated with this change?\n. This is actually a bigger change than it looks like. We'd need to add a new field that determines if the dependency is resolved or not so we can preserve the original type.\n. See https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.DesignTimeHost/Models/OutgoingMessages/DependencyDescription.cs\n. Solution 1 is better \ud83d\ude01\n. Where's the bug for this change?\n. This needs tests. Lots of tests. Ping anyone on the runtime team about writing some functional tests for this.\n. @kirthik have you looked at the failing travis builds?\n. @kirthik There are some problems with this branch. I tried out this branch and it makes a causes a bunch of assemblies to be added to tpa.cpp. It ends up adding a massive set of dependencies to the lower layer of the stack. This is happening because of this https://github.com/aspnet/dnx/pull/2407/files#diff-0a17824cd4fa0b2423fa71b6ad6faa40R6. The helper to detect is an assembly is culture neutral needs to go elsewhere. Maybe either into .Sources or .Internal.\n. :shipit: \n. This is a bug but do you really need to target net40-client? Just target net40. The client profile doesn't even exist anymore in later versions of .NET Framework.\n. Was fixed\n. Feature was cut\n. This feature was cut\n. This must be a general issue with restore then? What does the lock file entry have for this package? Does it list all of the assemblies \n. I'm guessing the problems have to do with your project references. What are in those projects?\n. > Project1.Data which needs to be referenced also from .NET Framework Project so it has dotnet section:\nAvoid using the System.* packages in places where dnx451 exist and instead should prefer frameworkAssemblies. Use them in dotnet and in dnxcore50 but not in dnx4x targets. You should also introduce dnx45x targets if you don't have them in your class lib (Project1.Data as an example).\n. ``` JSON\n\"dependencies\": {\n    \"Project1.Model\": \"1.0.0-*\",\n    \"Microsoft.Framework.Configuration.Abstractions\": \"1.0.0-beta6\",\n    \"Microsoft.Framework.Configuration.Json\": \"1.0.0-beta6\",\n    \"Newtonsoft.Json\": \"7.0.1-beta3\"\n  },\n\"frameworks\": {\n    \"dnx451\": {\n        \"frameworkAssemblies\": {\n          \"System.Net.Http\": \"\",\n          \"System.Runtime\": \"\"\n        }\n    },\n    \"dotnet\": {\n      \"dependencies\": {\n        \"System.Collections\": \"4.0.10-beta-23109\",\n        \"System.Runtime\": \"4.0.20-beta-23109\",\n        \"System.Runtime.Extensions\": \"4.0.10-beta-23109\",\n        \"System.Net.Http\": \"4.0.0-beta-23109\",\n        \"System.Data.SqlClient\": \"4.0.0-beta-23109\",\n        \"System.Data.Common\": \"4.0.0-beta-23109\"\n      }\n    }\n  }\n```\n. Read this http://blogs.msdn.com/b/mvpawardprogram/archive/2015/06/18/demystifying-pcls-net-core-dnx-and-uwp-redux.aspx\n. We need to test this with a few packages to make sure the logic is sound. Some packages that use this feature:\n- LibGit2Sharp 0.21.0.176\n- Microsoft.ServiceFabric.Data 1.0.328-preview1\n. :shipit: \n. :shipit: \n. That looks good and is consistent with build. We should allow passing multiple frameworks as well.\n. What?\n. Dupe of https://github.com/aspnet/dnx/issues/438\n. :shipit: \n. Yep, we're working on better diagnostics. Sometimes it's hard to know upfront unless you know what the package supports. The errors will get better when things are incompatible. What version of System.Data.SqlClient are you using?\n. You can't reference a csproj -> xproj yet. The support isn't there.\n. Then I have no idea. Upload a minimal runnable sample to github with instructions on how to reproduce\n. This line is the problem:\nhttps://github.com/radenkozec/SampleError/blob/master/src/Tests.Integration/Tests.Integration.csproj#L38\nYou're referencing the wrong assembly from the class library. Reference the assembly from dnx451\n. There's no document explaining it but here's an attempt at trying to simplify it:\ndnx4x can consume things that net4x can consume\nWhat this means is that dnx451 is equivalent to .NET Framework 4.5.1. You can reference a .NET Framework 4.5.1 project from a .NET Framework 4.6 project. That's basically what you're doing here. DNX projects have multiple outputs (since nuget packages can have multiple outputs).\nThe dotnet output in the DNX class library has a bunch of package dependencies including System.Data.SqlClient that were missing in your Test project. That's why it was failing. \n. Sounds about right. Those packages failed to restore right?\n. It uses the exact commit not the master branch\n. :shipit: \n. Sure, if that's the suggestion then modify the exclude logic a bit.\n. @rynowak Are you going to merge this for beta7?\n. Similar to how CSC has CS1034 etc\n. Ah! We have a few: \n- Unresolved dependency\n- Incompatible dependency\n- Unexpected version resolved\n. @halter73 does it repro on cmd?\n. You should never depend on  Microsoft.Dnx.Runtime directly. You only need the abstractions.\n. Nope, just an observation\n. @yishaigalatzer Add them\n. @jasonmalinowski and @yishaigalatzer We want to change the lock file version for this. We'll make it verison 2.\n. W00p!\n. Did you try dnu list --details? This can get complicated if multiple packages are missing and there's no good way to show it on the command line. We actually went through several iterations of this before and opted to not show a dependency tree for each unresolved thing because it got too noisy.\n. We wouldn't change the working directory. I'm not sure of many tools that do that. It just seems like a bad idea.\n. @buraktamturk How are you running on IIS? Did you do a dnu publish?\n. The bug was fixed in beta8\n. We can't backlog this. It hangs on some people's machines making build unreliable.\n. Reproed from the command line when I run build.cmd on dnx\n. Can you file this bug on aspnet/Tooling?\n. Yea, nope this change can't go in without other related changes. See https://github.com/aspnet/dnx/issues/2312. The project name can't be different from the produced package id. The project.json and package need to be one in the same.\n. We've decided to delay this\n. Does it work in beta7?\n. It'll be back post RC2\n. :shipit: \n. Some of this is done already. We need to look at exports and other things of that nature.\n. /cc @ChengTian \n. So this change isn't what I would expect. I'd expect us to keep track of the last error in the World and update the remote and local world and compare them appropriately like the other things.\n. :shipit: \n. /cc @tmat\n. /cc @troydai\n. We don't support mono on windows.\n. We still don't support mono on windows even after we fix dnvm :smile: \n. Publish what exactly? \n. Maybe what is hardcoded?\n. The CLR team added RuntimeInformtion.Is{Os}\n. :shipit: \n. What version of DNX is being used? I'm pretty sure we try to validate the actual http response now /cc @ChengTian \n. Ah, looking at the exception it's doing the right thing. We used to cached these responses (200 and invalid) now we don't. The user can run --ignore-failed-sources to work around. Unfortunately you can't pass this flag within visual studio... /cc @sayedihashimi \n. Oh yes this is a myget bug I'm just saying this bug can be closed.\n. There's a more general bug to clean up the exception messages for dnu as a whole.\n. Yes we treat 404s specially\n. Yep so it would have failed anyways.\n. This feature is currently pretty buggy overall and we'll given how far we are, we're at the point where we might either cut it or reduce the scope of what it does. Hopefully beta8 works a little better.\n. @anurse Make this change in release only. I'm making changes to this in dev.\n. :shipit: \n. After the ci passes :shipit: \n. :shipit: \n. :shipit:\n. :shipit: \n. Merged to unblock the ci.\n. Works fine for me. What error are you seeing? Can you show the restore output.\n. Yep.\n. :shipit: \n. Hah! Nice catch! This is an easy one to fix\n. :shipit: \n. @ChengTian open a bug on nuget to port this code.\n. /cc @troydai \n. Just FYI the lite{branch} feeds are untested so avoid using them if possible. It's better if apps are using aspnetvnext and aspnetrelease.\n. Referenced or retained?\n. Wait until it gets to aspnetvnext. aspnetlitedev isn't for use in your apps. It's untested builds used to develop our repositories. \n. We should fix the failures in @NTaylorMullen 's branch before merging this in.\n. :shipit: \n. It's about servicing code running in the compiler of the project. It's really and edge case but I just wanted to track it. By default we're fine because our compilers come in the dnx but you could imagine us in the future shipping compilers as nuget packages which we may want to service oob?\n. Are you running from the command line?\nTry making your project.json this:\nJSON\n{\n    \"version\": \"0.1.0\",\n    \"dependencies\": {\n        \"Microsoft.Dnx.Compilation.CSharp.Abstractions\": \"1.0.0-*\"\n    },\n    \"frameworks\": {\n        \"dnxcore50\": { }\n    }\n}\nMicrosoft.Dnx.Compilation.CSharp.Abstractions should already bring in the relevant transitive dependencies.\nThis type of thing is sorta new to .NET in some ways, combined with project.json there are a bunch of new concepts to understand that aren't clearly documented today because things are in flux (we're just not done yet). \nHere's a brief overview:\nThere are 2 dependency graphs in your application, the one required to run your application and resolve compilation dependencies (e.g. you're compiling for and running on dnxcore50) . The other one is required dependencies of the compiler and ICompileModules themselves, e.g. what we call the \"build time graph\" (where the target framework of the compiler itself matters not your application). In your above project.json you only list dnxcore50 which maps to dnx-coreclr-{whatever}, but your compiler could be running under under dnx-clr-{whatever} so you need to specify the required by the compiler itself as well as your application.\nOn top of that, we currently allow you to write these ICompileModules within your project, but they cannot come as package dependencies (i.e. they won't be discovered if they are only in nuget packages). That makes it a little more complicated. They are also hard to debug since they can run in the build process or in the design time host process.\nWe're still trying to decide if we keep this feature or not (depending on how well we can make it work across the board).\n. I haven't given up yet. We're trying to see if we can salvage the feature for v1\ud83d\ude00\n. Related https://github.com/aspnet/dnx/issues/1446\n. We removed that logic for compatibility with existing msbuild projects. If you want this logic you'll have to author an ICompileModule, see an example here https://github.com/aspnet/Entropy/tree/dev/samples/Project.CompileModule\n. CoreCLR or mono?\n. File the issue here https://github.com/dotnet/coreclr\n. :shipit: \n. Closing this\n. Changes to make\n- Just cache the the original string to SemanticVersion don't use the tuple. After normalization just store a duplicate entry, that's not a big deal.\n- Don't change any of the original parsing logic\n- Add a factory method that can be delegated to,Func<string, SemanticVersion> SemanticVersion.Factory, set it in DTH only to cache the things.\n. Closing this out \n. It is! Do you want to lump this in with that work?\n. @moozzyk We should do this now\n. @moozzyk Moved to RC1\n. What's the scenario?\n. Can you file this on http://github.com/dotnet/coreclr \n. See https://github.com/aspnet/dnx/issues/1431#issuecomment-133725856\n. @LorenDorez can you provide more info \n. Looks like a bug in the CoreCLR HttpClient /cc @davidsh @CIPop @SidharthNabar\n. This is actually a bug in DNU, it should be using the global.json relevant per project but it isn't today. It resolves the root directory once and then fails to find your global.json. A work around would be to run restore from each of your project directories (annoying I know).\n. As soon as the ci passes :shipit: \n. @ChengTian do we have a test for this scenario?\n. :shipit:\n. /cc @pranavkm @victorhurdugaci \n. :shipit: \n. @moozzyk the only valid reason would be because of it being a breaking change.\n. This issue is about the roslyn compiler.\n. @Illeris what?\n. Seems like you have some invalid JSON, at least that's what travis thinks\n. Great just make sure you dont break mono in the process\n. Great just make sure you dont break mono in the process\n. My eyes aren't used to destinations being on the left, it feels still feels odd.\n. :shipit: \n. @moozzyk but it isn't marked as done\n. :shipit: after my comment.\n. /cc @muratg \n. As usual please provide a repro project.\n. I agree with that actually the red is bugging me so much :cry: . But mac osx is failing because of relative path and tmp crap. I'll fix that as soon as I get this in so we can be green again\n. @anurse promise :smile: \n. :shipit: \n. Please file this issue on kestrel\n. Also when filing bugs specify the versions of the software you are using. Which dnx which kestrel versions\n. Afaik it does. What version of he tools are you using?\n. Yep\n. Send a pic of how it looks with the commands ? Change looks good though\n. Thanks!\n. @anurse we need to figure out how to handle GAC references in general if we remove the fallback. Do we special case System* assemblies? Or ones that we know are in the redist list? What if you just want to reference something in the GAC explicitly (if you're a bad person)\n. The change looks fine but is there any real overhead?\n. Can you make the change here too https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.ApplicationHost/Program.cs#L89\n. @Maxwe11 in general, changes that claim to improve performance should have performance tests/metrics associated with change. \nStill I like this change because it simplifies the logic (assuming nothing regressed like exception behavior) but all of the tests passed :smile: \n. :shipit: once the ci passes\n. It's actually a combination of changes. @BrennanConroy Looks like  bug in the GetRelativePath logic.\n. @victorhurdugaci I assume you found this running our tests? Our tests shouldn't be using project references to the dnx. That's something we need to fix but I'm glad it found this bug\n. Yes\n. Travis is failing\n. :shipit: After making the changes @moozzyk suggests\n. Why is there no test here? I'm not sure exactly what you're fixing or if it's even fixed by this change or what other things it affects (DTH, build etc)\n. :shipit: \n. We should never crash though. That;s the bug here. Long paths are well, long.\n. It won't restore to both places, however you can change global.json to point to a location to restore packages to:\nJSON\n{\n   \"packages\": \"packages\"\n}\nThe path specified is relative to the global.json, so you can have packages appear at the solution root instead of the user profile if you wish.\n. Uh, no :smile: \n. See https://github.com/dotnet/corefx/issues/2670\n. :shipit:\n. /cc @BrennanConroy \n. Did you install libcurl?\n. Does this break helios?\n. What about mono?\n. :shipit: but as you said it's still incomplete. \n. > Does this work everywhere including OneCore (Nano)?\nWhat does \"work\" mean? Some version of CoreCLR will support it natively but I don't know which version :smile: and it will emit on nano since there's no pdb support there.\n\nOh, one more thing: how about a test for the non Windows platforms where pdb generation is not supported to check that we emit pdbs now?\n\nWill do.\n. I cant reproduce the travis failure on my linux vm. It's also just timing out so not sure whats up.\n. @muratg yes I know how to ci. Mono has been trolling me for hours now.\n. Closing this out for now until I get more time to investigate why mono is hanging.\n. When the ci passes :shipit: \n. Yes, I've heard enough complaints about this now :smile: \n. Did you dnu restore everything? \n. Try restoring the entire repository before trying to build. The sample uses project dependencies\n. :shipit: when CI passes\n. :shipit: \n. @akoeplinger want to send a PR for this? If it parses as a valid TFM we should generate a valid PP symbol or nothing if we can't generate one.\n. :shipit: When the build passes.\n. @BrennanConroy close your bugs https://github.com/aspnet/dnx/issues/2607 :smile: \n. @mozzyz updated the lock file reading test \n. It's not exposed in DTH right now.\n. Added 2 minor comments then :shipit: \n. We need to see why Travis is failing (and only one of them)\n. Forcing a rerun\n. :shipit: \n. :shipit: after fixing ifs and null RuntimeIdentifiers\n. /cc @moozzyk \n. This is merged. Feel free to keep reviewing.\n. Can you try this sample https://github.com/aspnet/Entropy/tree/dev/samples/Project.CompileModule\n. What does your project.json look like? Where is the package/project that has Fx.ModulesCompileModule defined?\n. So Fx.Common has the Fx.ModulesCompileModule?\n. Is that project/package referenced from the project that is using the ICompileModule?\n. That would be better :smile: \n. Or you could make a small sample that doesn't have that many dependencies.\n. Seems to work. I ran dnu build and got a Debugger.Launch() screen:\n\n. After that I see:\nC:\\dev\\git\\demos\\Framework-CompileModuleIssue\\samples\\SampleConsole\\project.json(15,20): error: The dependency Fx.Core  could not be resolved.\n. Can confirm that it is broken in VS.\n. Ok I know how to fix it. Add dnx451 to your projects as well as dnx46\n. The problem is that VS is running your project as dnx451 and can't find the dependencies because they are described in terms of dnx46 only. This is one of the trickier areas of making things like compile modules work. The dependencies of the compile module need to match the runtime's target framework instead of the project's target framework. They may overlap, but they are different things. \nYou can compile for dnxcore50 or dnx46 with a compiler that runs on dnx451. When running code in the compiler itself, that code and its dependencies need to also work on the target framework of the compiler.\n. /cc @moozzyk \n. Seems like a bug. The app is self contained and should just run\n. @nicolasr75 Did you set any DNX environment variables on the target machine? Can you also run with DNX_TRACE=1 and paste that?\n. This line:\nInformation: [DefaultHost]: Project root: C:\\Users\\Public\\Documents\\RSW\\Test\\MyApp\\approot\\src\\MyApp\nMakes me feel like your global.json is missing. Do you have a global.json in your published layout?\n. You have 2 global.json files? Why?\n. Travis is failing\n. Closing this, it's a breaking change but it's by design \n. /cc @moozzyk \n. The behavior of dnu rewrote actually sucks and we don't like it. Dnu build and pack support passing in a globbing pattern.\n. /cc @victorhurdugaci \n. /cc @anurse \n. Remove the .. It's just dnx run now. See https://github.com/aspnet/Announcements/issues/52\n. /cc @BrennanConroy \n. /cc @anurse I need to look at the portable thing. Seems like we need to know how to generate short names for portable profiles. I'd like to do it without hitting the disk and scanning for reference assemblies.\n. @anurse yah, I think I will. One question is how do we map xamarin? Do we assume that profiles map to the largest set of platforms? \n/cc @emgarten \n. This change needs a do-over\n. Will look once travis passes\n. When travis passes :shipit: \n. @victorhurdugaci Did you figure out the parsing issue?\n. :shipit: Once you test it with @BillHiebert 's new bits.\n. @ealsur Can you provide repro steps?\n. Found the issue, we have a bug where having the project.json and global.json in the same folder causes problems.\n. @ealsur How did you create the project?\n. Yes, it's a bug with publish but it's only happens when these websites are hand crafted manually. Customers end up with 2 global.json files in their published artifacts and one of them end up pointing to a packages folder that doesn't exist. It happens when you have a global.json and a project.json in the same folder. \nWe'll fix this in the next release but the work around is the get rid of the global.json or to restructure your project to have a different global.json root and project root.\n. You can use the other suggestion. Change the site structure to look like this:\nsrc/\n     myapp/project.json\nglobal.json\n. You don't need an xproj or solution for that. It's simply moving the project file from the root of the repository as a workaround for a bug that exists in beta7.\n. We're not going to diverge from the nuget behavior. We currently don't support 1.* but nuget does. So possible we may do something more with wild cards in the future but you should file an issue on nuget as well.\n. @giggio no promises but we do want to eventually use the nuget code base and have been slowly moving in that direction.\n. Dropped, none of these issues are being tracked. I recommend filing an issue on nuget.. We need to throw at runtime, also I'm not sure we can do anything more sensible and throw in general since if the project.json file or project.lock.json don't parse, we cant do anything else\n. We can add GetDiagnostic or something to this:\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Runtime/FileFormatException.cs#L9\n. This diff is crazy hard to review\n. We need to flow the context to the command being run. You need to add some variables to GetScriptVariable so that scripts can use project:Configuration and project:Framework when executing scripts to make decisions.\nThe tests should also be updated to print out the combinations built.\n. I think we should just pass the variables in the same time. How does this affect the performance of building a single project in our repository (since it now copies multiple times instead of once)?. I think the build:TargetFramework and build:Configuration sound better.\n. Related bug https://github.com/dotnet/roslyn/issues/5052\n. Not hard likely impossible unless you are precompiled. There's literally no way to make that work that I'm aware of.\n. Use core clr \ud83d\ude00 or yes launch another process \n. Yep, it's one of those things that are a limitation if you don't publish before running. I'm looking running in a mode where things are put on disk so that scenarios like this are possible.\n. Feels like we should have a constant for this \"Microsoft.Dnx.Host.CoreClr\" as it's used in several places in the file. Or at least something like:\nbootstrapperAssemblyName = \"Microsoft.Dnx.Host.CoreClr\";\nbootstrapperAssemblyFileName = \"Microsoft.Dnx.Host.CoreClr.dll\";\nbootstrapperAssemblyFullName = \"Microsoft.Dnx.Host.CoreClr, 1.0.0.0, ....\"\nThe rest looks good.\n. We need to look at drh\n. :shipit: \n. Did dependencies change? /cc @anurse Could this be a caching bug? Do we still have the same cache dependencies as when we were caching the ApplicationHost context?\n. We're going to need to force a restore in this case so that the lock files update \n. I have some second thoughts about this.\n. Did you try restoring the entire solution.\n. Will look into it.\n. After giving this some thought, I think this change should be here:\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.ApplicationHost/DefaultHost.cs#L172\nIt's only relevant at runtime, we're trying to protect people from themselves and since we only throw at runtime, why put it in ApplicationHostContext.\n. :shipit: \n. :shipit: \n. This is in right?\n. @borgdylan There will be soon\n. What error exactly?\n. I think you should change the scripts after this change goes in. Otherwise we won't be able to do Dev until coherence passes\n. @BrennanConroy Sure but not as part of this fix. \n. @moozzyk The PR shows both. Hard to know what you'll commit\n. :shipit: \n. This can be closed right? @moozzyk \n. @moozzyk Can you make sure we have a task tracking that. We should be using this change right now to make sure it works well.\n. This is a duplicate of https://github.com/aspnet/dnx/issues/2670\n. @rynowak let me know if you see the problem still. The changes drop the memory that is being held onto. There's another issue to just reduce allocations in general which will be submitted later.\n. @rynowak if you see more issues, please reopen again :smile: \n. No Helios will be dropped completely\n. The module needs to be installed on IIS severs that want to run ASP.NET 5\n. .NET 5 doesn't exist, you mean .NET Core? Yes. You'll install the HttpPlatformHandler and you'll be able to use it without installing .NET or ASP.NET for that matter on the server. \n. That's what I linked to \n. @marcind That's already been done in the latest dnvm. There's a global install location now and it is appended to DNX_HOME. \n. Whole system.\n. Fail! \ud83d\ude00\n. Need to put script files in approot since webdeploy can't see them.\n. @victorhurdugaci assigned to you\n. Need to do this post beta8\n. @pakrym You did this right?\n. @pakrym Well close da bug :smile: \n. :shipit: Once travis passes\n. @teamneusta We'll be unifying that in a later release, you can override it with by setting the NUGET_PACKAGES environment variable.\n. :shipit: Helios will snap harder \ud83d\ude00\n. :shipit: \n. When travis passes\n. What about application host \n. @pranavkm @victorhurdugaci @muratg We should write an announcement\n. I think leaving in the repo information is fine actually. It's harmless.\n. @pranavkm keep the discussion thread in case people want to complain\n. Yes it is!\n. > We could either require a project to declare all of it's direct dependencies (i.e. my app would fail to compile if it didn't declare its dependency on B)\nThis would be insane.\n\nOr we could provide a way for A to hide its dependency on B as it is really just an implementation detail of A and not a formal contract.\n\nhttps://github.com/aspnet/dnx/issues/2391#issuecomment-127199095\nIt should also be a compile error if you marked a dependency as private and something was exposed in public API from that dependency.\n. @danroth27 do it and tell me if you can figure out the 50 BCL package dependencies that you actually need in your application then let's talk :smile: \n. I'm looking into this assign to me\n. Looks like https://github.com/aspnet/dnx/issues/2554\n. Ignored.\n. @victorhurdugaci If there are refactorings you need to do as part of this change to make it easier to consume code shared by the runtime please make those changes in separate PRs.\n. This needs to be a protocol version change \n. Can you add a test for a package that exists but is incompatible (aka unresolved)? Like any package on the internet that doesn't support dnxcore50.\n. We have tons of tests that rely on nuget right now (heck even our build relies on nuget). Older version of a package are pretty much immutable so I'd be ok picking something like mvc 3 or something else that we shipped in the past \n. :watch: \n. When travis passes :shipit: \n. Would be nice wouldn't it.\n. @moozzyk This is merged right?\n. Use IHostingEnviornment.WebRoot. Also don't use environment variables they're all going to change anyways.\n. Travis is legit broken on linux\n. Any tests for the parsing?\n. @moozzyk As long as we have things that exercise this code path (and you tested it locally), I'm fine with it. There is some new logic (it seems like) wrt parsing the args.\n. Can you provide a sample that reproduces the problem with instructions on how to reproduce the problem? \n. What version of the DNX are you using? What are you using 1.0.0-* in your project.json? What actual versions exist in your project.lock.json\n. I have lots of feedback for this pr related to hardcore the contents of packages. We should generate that. This will be brittle with the changes we are going to make to he DNX\n. > Travis failure is because the test is running on Mono but shouldn't. I can't fix it right this second but it shouldn't block review. I'll add a framework skip condition to it.\nWhich tests should run on mono?\n. Small comments then :shipit: \n. :shipit: \n. :shipit: \n. @angelsix Can you provide some better repro steps? What did you run? What does your project layout look like?\n. 2 More questions:\n1. Are you using the beta5 dnx or the beta7 dnx?\n2. Are you running dnx kestrel from the correct folder?\n. I'm closing out this bug. If you have a specific kestrel issue please file it on that repository \n. Irrelevant with CLI work\n. :shipit: The new code is soooooo much cleaner! :+1: \n. :shipit: \n. File a mono issue?\n. Use --no-source\n. spaces between your ifs and  ( :smile: \n. Minor changes then :shipit: \n. I don't trust this change and I'm super surprised nothing failed (but that might be because we guard against stuff in other places). We need to go over all of the uses of ProjectDescription and make sure they all check for null or Unresolved first.\n. @troydai How much did you test. Did you test all the code paths that look at ProjectReference.Project?\n. :shipit: \n. This is a bug in our publish\n. We need to do a few things:\n- DiagnosticsMessage should have a Source property that's of type object\n- When we make dependency diagnostics we should set the source to be the library description.\n- DTH can cast the source and return the appropriate data. I think you only really need the name.\n. :shipit:\n. @pranavkm Did you fix this?\n. The makefile changes don't look as nice as I would have expected. Having lock files makes gathering dependencies alot easier. I get that we're trying to unblock the build but it feels like this is tacked on instead of designed with the lock file in mind.\n. @BrennanConroy can you make sure the CLI is using this build?\n. @BrennanConroy not what I meant :smile: https://github.com/dotnet/cli/blob/master/src/Microsoft.DotNet.ProjectModel/project.json#L17\n. That error has been fixed since. I assume this is beta7\n. Yes, although I'm trying to reduce the dependency on DNX itself. So maybe we look for that attribute by name instead of by type. An alternative would be to make an assembly with a real ECMA compliant entrypoint (public static void Main) and move some of our bootstrapping logic into the assembly itself:\n```\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        new DnxEntryPoint().Main(args);\n    }\n}\npublic class DnxEntryPoint\n{\n    public void Main(string[] args)\n    {\n    }\n}\n```\nThere are some issues with this like how does DI work, do we need to inject in the generated code etc.\n. @borgdylan What do you mean?\n. @akoeplinger Hah, didn't even see that.\n. @bojanrajkovic You can do what you want to really. We're not changing the .dll extension.\n. Makes me wonder if we should call it emitEntryPoint so we don't confuse people when the output isn't an exe.\n. Done, the compiler option is emitEntryPoint\n. Oops! \ud83d\ude00\n. I'm going to test it out cuz I needs it :smile: \n. :shipit: \n. Moving to RC\n. /cc @stephentoub \n. Visual studio always uses the non .NET Core dnx to restore packages and it doesn't really matter that it does. There's what you use to run and what is used by the tooling and they can be different.\n. The issue you're running into is that you need to update your tooling to beta7. See http://www.microsoft.com/en-us/download/details.aspx?id=48738&fa43d42b-25b5-4a42-fe9b-1634f450f5ee=True\n. :shipit: \n. :shipit: \n. @ericstj Yep. That sounds like a bug.\n. Just FYI, you shouldn't be checkin in lock files, in fact, we're going to be removing the locked property.\n. We'll keep supporting *. Moving to an intermediate directory came up but nobody really agrees where it should go and it would require existing tools to update. \n@ericstj What performance issue is that?\n. @moozzyk Are you done with this change?\n. :shipit:\n. Super clean :shipit: \n. :shipit: after CI passes\n. :shipit: \n. You shouldn't be using IApplicationEnvironment (which is actually correct in this case). If you want the context of the project being compiled then use the project context. The application context represents the runtime environment not the target compilation. Think of it as the information of the executable hosting the compiler.\n. Nope it's correct. IRuntimeEnvironment gives you DNX information. It's not about what you want to get it's what's correct. In this cause vs is launching design time host (that's the application), you need to use the project context to get info about the project. It's a property of the compilation context.\n. @BrennanConroy write the 3 lines of code that @ahmetabdi should do\n. This is mostly porting the nuget code right?\n. :shipit: \n. :shipit:\n. See https://github.com/aspnet/Announcements/issues/70\n. Wait until beta8 ships or downgrade your runtime \n. beta8 nightly builds will not work on IIS express anymore. There are several changes that we are working on to make it work again. If you read the link I sent you'll see we're making changes to the IIS hosting model. As a result, IIS express will be broken.\nWhen I said wait until beta8 ships, I mean is released and complete. Using ci builds will get you in a broken state sometimes, this is one of those times. You cannot use IIS express without some very manual steps at this point. By the time we're done with beta8 it will work smoothly again.\n. Yep\n. Try updating your packages.\n. What does your project.json look like?\n. and what feeds are you using.\n. Actually sounds like it would be a good pill request. Let's make this up for grabs \n. dnxw.exe\n. Ugh renames \n. Unrelated:   You shouldn't be depending on Microsoft.Dnx.Runtime. Secondly, yes it's a know problem there's no DPAPI on CoreCLR\n. @ericstj we opted to throw that exception during the initial port because we didn't want to fake it.\n\nemit an intelligible error message. As it is a regular user would have no clue that something put in their nuget.config file from nuget.exe SetApiKey was causing their DNX projects to fail to build.\n\nSure. This is just old crusty code that hasn't been touched in a long time. As we end up using more NuGet3 API this will all go away.\n. on some feed somewhere. If you ever end up in that situation it's caused by one of 2 things:\n- We messed up and pushed incomplete things\n- You're using the wrong feed\nAnyways, please file general questions on aspnet/Home\n. We do just not right now. It needs design.\n. Why is travis failing\n. This breaks things. Do over\n. Travis\n. :shipit: \n. One more thing, where does AssemblyCultureAttribute live on .NET Core? Will it always be available? If you only reference System.Runtime in dnxcore50 what happens?\n. When travis passes :shipit: \n. Few things:\n- Show some examples of what exceptions look like for the different cases (paste pictures)\n- don't write tests using the old infrastructure \n. @JunTaoLuo turn off DNX_TRACE and show the screenshots\n. I think we need to hide the stack trace for compilation errors as well:\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.ApplicationHost/Program.cs#L236\n. This actually looks like it might be kinda tricky \n. Unlikely, we'll need to see if there's another way to handle the diagnostics.\n. :shipit: \n. :shipit: \n. :shipit: \n. :shipit: \n. It's not the CoreFX code, the code is in DNX: \nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Runtime/Loader/ProjectAssemblyLoader.cs\nThe name you pass to Load is the name of the project. It's no different to compiling up front. Instead it's deferred to runtime.\n. :shipit: \n. File this bug on dotnet/corefx\n. @muratg @troydai I think we should do some of this for beta8.\n. Assigning to myself.\n. Dupe of https://github.com/aspnet/dnx/issues/2790\n. Can you clarify?\n. It's been fixed by @anurse \n. Yes. Check out the getting started docs. http://docs.asp.net/en/latest/getting-started/index.html\n. File the issue here https://github.com/aspnet/EntityFramework\n. That doesn't look like kestrel at all. Looks like you are using WebListener on mono which isn;t supported. WebListener is a windows only server. You need to use kestrel.\nShow your project file and hosting.ini (if you have one).\n. /cc @troydai \n. VS can trigger a restore based on the diagnostic messages we return from DTH. The big change from before is the fact that the lock file is the source of truth so it means that instead of things failing you'll get the older versions. It's like that horrible error you get when you f5 in vs with a build error and it asks if you want to run the old output \n. @anurse I want to give you this one. \n/cc @abpiskunov This will require a tooling change.\n. :shipit:\n. :shipit:\n. :shipit: \n. :shipit: \n. Make this fix in release\n. :shipit: \n. Travis?\n. Then force a re-run\n. @JunTaoLuo I think we have an actual bug somewhere.\n. :shipit: \n. :shipit: \n. Add some comments around the numbers.\n. @JunTaoLuo do we have to add TraceTest on every test?\n. :shipit: \n. As part of this move the follow to Common:\n- Microsoft.Dnx.Runtime.Json.Sources -> Microsoft.Extensons.JsonParser.Sources\n- Microsoft.Framework.CommandLineUtils.Sources -> Microsoft.Extensions.CommandLineUtils.Sources\n. What version of the secret manager are you using?\n. ICU!\n. We don't want this API. Instead we should just get the API back on .NET Core.\n. Why is travis sad\n. How does this happen?\n. Hah, I guess this is just being defensive then.\n. :shipit: \n. It sound like dynamic compilation to me\n. :shipit: \n. Add a test. The fact that we have no coverage doesn't inspire confidence :smile: \n. :shipit: \n. :shipit: \n. Does it work locally? Can you provide a repro project?\n. If you can provide a repro project we can investigate\n. Sure git repo is fine, and we'll test on azure too. Just give us instructions.\n. What dnx version?\n. Does this even work locally? I don't know if this has anything to do with azure... \nSome suspicious things:\nhttps://github.com/borgdylan/aspnet5-repros/blob/master/aspnetrepro/bin/output/approot/packages/aspnetrepro/1.0.1/root/project.json#L8\nhttps://github.com/borgdylan/aspnet5-repros/blob/master/NowinServerFactory/NowinServerFactory.cs#L33\nAre you even listening to the right port?\n/cc @JunTaoLuo can you take a look at this?\n. Do you have a windows machine?\n. A screenshot would have been more useful than the html...\n. @muratg We should investigate this one to see if there's a beta8 regression. I'm guessing it only happens with x64 (I've seen something similar with helios)\n. Yes. Also try 32 bit.\n. Yep\n. Not quite. The problem is that the call context is being lost by the time this method is executing. It could be caused by tons of different things but there's an easy way to make this reliable.\n. Does it happen when you use kestrel?\n. I don't think Nowin is flowing the execution context by default. Can you try configuring the ServerBuilder to flow it always and see if it works?\n. Kestrel does it by default. Nowin doesn't seem to preserve it by default.\n. Looks like a version mismatch. I'll try it locally with a simple example.\n. @borgdylan Nowin has a ServerBuilder option https://github.com/Bobris/Nowin/blob/master/Nowin/ServerBuilder.cs#L20\nTry doing builder.SetExecutionContextFlow(ExecutionContextFlow.Always)\n. Use that as a workaround for now. We'll reduce the reliance on CallContext but some things will just break in general without it. IHttpContextAccessor also relies on it.\n. @victorhurdugaci closing this out. We're going to remove this type from the DNX https://github.com/aspnet/dnx/issues/2927\n. Don't add architecture and runtime they are not read by anything \n. :shipit: \n. @kirthik why is Travis failing?\n. :shipit: \n. @EgyTechnology Do you have the latest tooling installed from here http://www.microsoft.com/en-us/download/details.aspx?id=48738&fa43d42b-25b5-4a42-fe9b-1634f450f5ee=True\n. We did this on purpose. Showing the help is an error code. I believe git and other tools do something similar.\n. @moozzyk \n1. Because other well known programs do it\n2. We had a bug once where the arguments changed and help was being output on the CI but nothing was failing\n. And the test host\n. @smbecker We're going to get rid of the runtime services and just have a static that will be usable there. It won't be an IServiceProvider either. Just a type with some properties.\n. @pakrym did this assigning to him to lcose\n. ICompilationException is something that we expose. If you use roslyn directly they won't get exceptions for errors. If you throw an exception that implements ICompilationException, you get our default suppression behavior.\n. @dagood Can you write a test for this?\n. @dagood test data comes from here https://github.com/aspnet/dnx/tree/dev/misc\n. Confirmed it is a Kestrel shutdown problem:\nServer Disposed in 2510ms\nI modified hosting to show the server shutdown time. It's taking ~2-4 seconds to shutdown the server. Can we move this issue to Kestrel?\n/cc @Tratcher \n. Seems we still have this casing issue:\n\nI wonder if this regressed somehow... On a side note @abpiskunov why doesn't this bubble up the chain of dependencies?\n. Looks good /cc @emgarten make sure nuget doesn't have the same logic \n. You should never need it. We hook assembly resolve and fix up th versions at load time. Will take a look at the sample to see where the problem is\n. Did ensure that change assembly names at some point? If you crack open reflector on EnsureThat 2.0.0 and 3.2.0 what do the assembly names say?\n. Nothing you can do there\n. It's not an MVC bug. \n. I also posted the workaround here https://github.com/aspnet/Mvc/issues/3296\n. Add a test that verifies the assembly information is written after building. It should be part of the DnuPackTests\n. prepare also runs before publish https://github.com/aspnet/dnx/blob/972b3be035c34f4599a0687623d352b4341bd03d/src/Microsoft.Dnx.Tooling/Publish/PublishManager.cs#L102\n. :shipit: \n. I don't quite understand what this is fixing. Can you show all of the cases that cause compilation errors and how this fixes each of them?\n. You mean the csproj stuff? I believe it is implemented. If you migrate from project.json to csproj it'll turn off all of the generation. AFAIK, if you clean up the csproj it does the right thing. What are you seeing and what does your project file look like?. @emgarten How does NuGet.Core deal with this? I'm assuming we need to update our PCL resolution logic to be in sync with the latest nuget.core logic in VersionUtility.\n. I can look today.\n. the .NET CLI should have this problem resolved. We're not making any non essential changes to DNX for RC2\n. Looks like a casing bug with versions. \n. @victorhurdugaci No, in beta8, @BillHiebert removed the --watch flag AFAIK\n@moozzyk No, the watcher has the logic to watch the files :smile: \n. @TomasHubelbauer Can you file this under https://github.com/aspnet/Tooling\n. No tests?\n. :shipit: \n. 1. Yes\n2. Yes\nIf you ran restore from that folder. A more typical file system layout is something like:\nNuGet.config\nsrc/Project1/project.json\nsrc/Project2/project.json\n. @per-samuelsson I know it works because we use it in our own repository layout :smile: \n. Ugh what a horrible bug /cc @yishaigalatzer \n. @Eilon yes that's fine if we can get the logic right. We removed it because it detected too much stuff and broke on a bunch of our repositories. \n. @Eilon Sounds fine if that aligns with what msbuild + resgen does today.\n. I think this is breaking me right now...\n. This combo needs to be supported in general. The combos will be:\n- strongName: true - is sign with built in key\n- ossSign + keyFile - what you have above (the default xplat form as well not just for mono)\n- keyFile + delay sign - usual \n- keyFile\n. Of course it's valid. It's what we'll do on xplat in general by just on mono\n. Real signing is only supported on Windows period.\n. We need to preserve the strong name ( public key) and oss sign\n. 2 reasons, a keyFile + plus odd sign is valid be shouldn't warn. The mono/xplat error only applies if the oss sign flag wasn't set\n. We're talking past each other. That's not what I'm suggesting. There's a missing combination here:\n- OSS sign (without our generated public key) + a provided key\nI'm suggesting that if oss sign is true and a key file is provided, then use that key file instead of generating one.\n. For console apps process exit. For web apps there's IApplicationLifetime\n. Legit failure. I'll look into it. Something strange\n. Dead in a fire\n. Please read the blog post it has the exact detsils you need to publish\n. Minor comment then :shipit: \n. https://github.com/aspnet/dnx/issues/2927\n. We want to be compatible with regular Program.Main entry points. We're working to get this in for the next version of C# https://github.com/dotnet/roslyn/issues/1695. We also want to be able to avoid scanning for the application entry point at runtime so it's better if we can just do all of the hard work at compile time instead of runtime.\n. BTW anything is possible with indirection so there could be another Program.Main that does support injection and calls into this program main, but that would be in a library.\n. the PlatformServices static. You also want to set emitEntryPoint: true in your compilation options and have a public static int/void Main.\naccessing runtime services\nhttps://github.com/aspnet/dnx-watch/blob/dev/src/Microsoft.Dnx.Watcher/Program.cs#L26\nproject.json\nhttps://github.com/aspnet/Templates/blob/dev/src/BaseTemplates/ConsoleApp/project.json#L10\n. There are also other examples in Entropy:\nhttps://github.com/aspnet/Entropy/tree/dev/samples/Runtime.ApplicationEnvironment\n. That's correct.\n. Small comment then :shipit: \n. :shipit: \n. Once ci passes\n. Why? What's special about the azure command?\n. That didn't answer my question. Can you show me your command definitions \n. There's a switch on the command line and an option in the publish profile to specify the command. You could also just change web to be kestrel and avoid the extra complexity \n. :shipit: \n. @dimsedane we're aware of this issue. Can you try removing one of the frameworks from your project.json and starting from a fresh site?\n. Looks like an NPM problem\n. that just gets dnvm after installing it you can install any dnx you want.\n. Yep, you need to keep both frameworks around.\n. :shipit: \n. nice\n. :shipit: After CI passes\n. This looks good\n. :shipit: \n. c:\\tools\\? Sounds like Path.Combine bug. The key file should be picked up as a relative path from the project file. When you copied Razor did you copy the keyfile from the relative location? One problem might be the fact that we have the key file in the solution root and publish doesn't take that into account. You should publish --no-source and just work around the whole problem.\n. @GuardRex you need to tweak this value:\nhttps://github.com/aspnet/Razor/blob/dev/src/Microsoft.AspNet.Razor/project.json#L6\n. Publish --no-source. What you're seeing is us not preserving or copying enough of the original project structure on publish when replaying source code\n. This is already fixed in the latest builds /cc @troydai\n. Fixed in https://github.com/aspnet/dnx/commit/6d132950fc2fbbead501cbd10bcb6dbfdb10ac0c.\n. This is by design as these services are being deprecated. See https://github.com/aspnet/Announcements/issues/125. You need to add those services back to the DI container if you're using rc2 bits.\n. You're using RC2 right? Just to confirm.\n. ``` C#\npublic ConfigureServices(IServiceCollection services)\n{\n    // IAssemblyLoadContextAccessor\n    services.AddSingleton(PlatformServices.Default.AssemblyLoadContextAccessor);\n// IAssemblyLoaderContainer\nservices.AddSingleton(PlatformServices.Default.AssemblyLoaderContainer);\n\n// ILibraryManager\nservices.AddSingleton(PlatformServices.Default.LibraryManager);\n\n}\n```\nThese services are going away https://github.com/aspnet/dnx/issues/3227\n. If you're expecting a specific version and you use 1.0.0-* you're going to have a bad time.\n. @chemitaxis The lock file would be better to look at.\n. /cc @ericstj \n. Something seems to be pulling in lower versions. I don't see this locally though.\n. It's failing for dnx451\n. @tmds I'll try out your solutionnow.\n. Yes, you are pointing to a super old feed:\nhttps://github.com/tmds/Tmds.SockJS/blob/master/NuGet.Config#L6\nRemove it. Delete your packages folder.\n. /cc @Eilon we need to nuke those older packages\n. Why do you need it?\n. Ah, Try using the aspnetvnext feed for that. Master needs to be cleaned up.\n. Why are you still using dnx?\n. Please file issues on aspnet/Home\n. No idea, you need to provide more details if you want to get help :smile: \n. What's in global.json\n. @NiyazShoukath push your repository to github let me take a look\n. @tmds Try removing all of these:\nhttps://github.com/tmds/Tmds.SockJS/blob/master/src/Tmds.SockJS/project.json#L23-L31\nI'm not sure you need them and depending on your nuget feed you might be pulling in busted packages.\n. Why are you accessing runtime options?\n. That's wrong, don't use it. Use IApplicationEnvironment instead\n. @xanather very old :smile: \n. :shipit:\n. > I dont get it how such a serious stuff can be around for so long time without a fix.\nIt means there's other more serious stuff to get to first. As @muratg said, DNX is being retired and we're busy working on making the dotnet CLI command line tools work for the basic flow (dev, test, debug, publish). Once the basics work, then we'll get to xproj -> csproj integration again, once that works, then we'll handle xproj -> csproj with resources.\n. Not that I'm aware of, it probably requires some horrific code. \n. This issue is specifically to do with using resource from a csproj project reference. Is that your scenario? Nobody has dug into a workaround because most if the infrastructure is changing and the issue will fix itself when we move to the cli. \nAs for a workaround, if you can provide a sample I'll see if I can figure something out. I'm assuming you're using rc1 bits right?\n. :shipit: \n. Don't we have a prepack event?\n. Nice!\n. :shipit: \n. @vijayrkn Do we rename the wwwroot folder on publish when in VS? \n@csunali What happens when you publish from the command line?\n. @csunali I think VS is just trolling you. \nFrom the command line to your project folder and type:\ndnu publish --no-source --runtime dnx-clr-x86.1.0.0-beta8\n. Well if you look closely at the error, you don't have npm installed. \n. @csunali Can you push your app to github?\n. This isn't a dnx issue. File this on aspnet/Home and possibly aspnet/Tooling for the debugging piece.\n. Please tell me the keys aren't case sensitive. Please test that \n. I think we should look for webroot in the root. Same in hosting.\n. One thing you missed that might not be important right now is then build time load context. The loaders usually have 2 overloads, one that uses the default load context and one that gets one passed in. This should follow the same pattern. If you have a child load context that's passed in, it should be used. \n. Yep!\n. No it's a bug\n. Fixed in RC2 with iis-publish. \n. @cesarbs Why is the ci red?\n. :shipit: \n. What? Why was this change made...\n. Then just use the blocking accept\n. It should just be blocking. \n. Did you test it? :smile: :shipit: once things pass that are supposed to pass\n. Once you have it working. Make sure it doesn't break on mono\n. @troydai You gonna merge this?\n. @gvx111 Did you update the dnx as well?\n. Is that the latest? Try updating it.\n. @gpeipman Don't forget the emitEntryPoint: true in the project.json file.\n. File this on aspnet/Tooling\n. Server Name? IRuntimeEnviroonment is a low level concept that has nothing to do with web whatsoever. In fact, anything that comes from this repository should not be considered for web.\nThe server name should be a specific server feature, see:\nhttps://github.com/aspnet/Hosting/tree/dev/src/Microsoft.AspNet.Hosting.Server.Abstractions\nFile an issue on hosting to expose something that servers can set.\n. LGTM\n. When will the RID madness end?\n. :shipit: \n. Probably because we're getting it from the packages folder \n. You need to run dnu restore\n. To do this right we'd need private dependencies + a compile time check to make sure you're not exposing things marked private \n. :shipit: \nRIP\n. Can't do it as it stands today. Use the one that matches the dnx version you have. We're looking into removing this restriction in the future.\n. Sure\n. Show me that package.\n. This is now irrelevant given the new standard platform https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/standard-platform.md\n. You're not checking in project.lock.json files are you?\n. This is why we shouldn't be using the shard code \n. Nope it should just have its own entry point \n. It does't need one. We look at that data and at runtime figure out how to load it relative to the project. It's not spelled out but it's not an issue.\n. I'm not sure what to do with this bug. It's a little vague.\n. Can't really change that. We don't control it.\n. We need to remove the key file etc when compiling the pre process aspect\n. It needs to happen here https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Compilation.CSharp/RoslynCompiler.cs#L123\n. We don't use this feature yet but we'd want to enable it\n. Yep\n. Doesn't matter anymore\n. Not sure this is still relevant for CLI work\n. What's special about abc? Hard to know what's wrong without more information? Can you make a sample that reproduces the problem to put on github?\n. Delete your packages folder. Older versions of dnx didn't normalize the version and newer ones do.\n. Why does travis hate you?\n. :shipit: \n. Yes it got merged \n. That's by design. Take a look at your package sources. Versions are always a minimum unless you specify an upper bound. \n1.0.0-rc1-* means, prefer the highest matching the 1.0.0-rc prefix, OR the lowest >= 1.0.0-rc. If your configured feeds doesn't have any RC1 packages then thats the ONLY case where you'll get RC2. BTW the theres tons of warnings (not on restore) on compile when this situation happens.\n. Your project.json has a mix of 1.0.0-rc1-* and 1.0.0-* that will almost never work. Be consistent and choose a single prefix. If you specify that you want rc1-* and it exists, you will get it. You have other dependencies that are likely pulling other transitive dependencies forward.\nHere's my advice:\nUntil we ship stable builds you cannot mix and match versions, it will never work. Be consistent and the success rate will go up. This is true for the dnx version, and any package version for things that we ship (aspnet).\n. I'd also urge you to read this so that you can learn how to diagnose problems like these when they arise http://davidfowl.com/diagnosing-dependency-issues-with-asp-net-5/\n. @endeffects It's hard if you mix versions. Stick to a single prefix and things will almost always work. What you cannot do is say oh that feature looks nice and update one of the ~60 packages we ship. We will get there but pre v1 that will not be possible as everything is currently interdependent. Upgrading one thing requires upgrading all things. Keep that mindset as we approach 1.0 then it'll be looser as we move on.\n. That's debatable \n. As a hater of strong naming I feel your pain. (intensely)\nThere's a few things that alleviate the pain when using our new toolchain and runtime, and changes to the process:\n- You never really have to see binding redirects (we'll handle this either at runtime or by generating the right things on your behalf). If you do however use this with vanilla .NET in existing projects. All of the old problems exist. On MSBuild based projects that do not use our new tool chain, this is available https://msdn.microsoft.com/en-us/library/2fc472t2(v=vs.110).aspx.\n- Unlike before, we're checking in the private key. There's no security feature (since strong naming isn't about security anyways). This means you can still swap packages with source on any OS and we'll do the right thing to make sure that works.\n- The binding policy on CoreCLR means binding redirects are never a problem (all the more reason to move everything there as soon as possible :smile:).\nIt's disappointing that for .NET Framework, the problems all still exist but such is life...\n. @endeffects Package restore absolutely respects dependency versions. You're hitting something else altogether. \n. If you have a dependency of type build and you do dnu pack, the package produced will not have that dependency. That's all the build flag does.\n. Nothing changed here AFAIK. Do you have a repro? \n/cc @troydai \n. Yea sounds like a tooling issue. @BillHiebert can you paste the DTH response.\n. in the new DTH it should be fixed\n. > I am using dnu publish on my continuous integration server to build .xproj projects into NuGet pacakges. It is a little tedious to have to execute the command for every project in the solution.\nPublish isn't about making packages, you're not using the right command. What you want is dnu pack.\nYou can use globbing patterns with dnu build/pack like so:\ndnu pack src/*\n. With msbuild, you can do this now \ud83d\ude04 . I'm not sure what's in update 1 /cc @sayedihashimi @barrytang \n. @AArnott The version of Update 1 that you have doesn't have the new DNX tooling.\n. Closing this out. If the issue persists, file this on aspnet/Tooling\n. :shipit:\n. You could just use assembly attributes for this. Specifically [AssemblyMetadata]\n. The error is pretty bad but it is by design. You need to have the right TFMs in order to run the compile module.\n. > It looks like all of the new packaging targets just adds more unnecessary DLLs in the publish structure.\nCan you describe the unneeded ones?\n. Closing\n. Have you spoken to @pranavkm about how Razor will resolve this?\n. :shipit: I love it!\n. Except, you do https://github.com/aspnet/Mvc/blob/737a8f3b1dd4c8067fc671a08e3cac0d7d88cd48/src/Microsoft.AspNet.Mvc.Razor/Compilation/CompilationOptionsProviderExtension.cs#L43\n. @pakrym Commit this change. I think razor needs a specific option for this on the razor view engine options.\n. This issue was moved to https://github.com/dotnet/cli/issues/312\n. -p alone already does what you want.\n. ?\n. @schotime Did you try: dnx -p {myfolder} test\n. Wait I think I get what you're asking now. That code is in the application you are testing?\n. @anurse  @moozzyk Relevant with the CLI?\n. Please file this under aspnet/Tooling\n. That dialog is never read and is ignored by all project types except the .NET Framework class libraries.\n. Also this is another aspnet/Tooling issue\n. Sure it does:\ne.g.\nhttps://github.com/aspnet/EntityFramework/blob/dev/src/EntityFramework.Sqlite/project.json#L16\nhttps://docs.asp.net/en/latest/dnx/projects.html?highlight=working%20dnx#advanced-properties\nJSON\n{\n    \"compileFiles\": [ \"../path/to/some/shared/file.cs\" ]\n}\n. Setting the working directory is always a bad idea. If you really need that, do it in your application. \n. The application base is set to the project directory when using -p. The config API uses the application base directory to find relative config files.\n. Try using AddJsonFile instead of using the provider directly https://github.com/aspnet/Configuration/blob/dev/src/Microsoft.Extensions.Configuration.Json/JsonConfigurationExtensions.cs#L60\n. I disagree with this change. Is it the default for compile too? So that things are undebuggable?\nAlso side note, changes like this should be contributed to the new dotnet cli. We're not going to be adding new features in dnu/DNX unless they are critical bug fixes.\n. I disagree with this change. Is it the default for compile too? So that things are undebuggable?\nAlso side note, changes like this should be contributed to the new dotnet cli. We're not going to be adding new features in dnu/DNX unless they are critical bug fixes.\n. -c totally doable. What is said is still the case tho. We're in the process of moving everything to the dotnet cli.\n\nBTW, @davidfowl, are you saying that dnu will be gone before RTM?\n\nYes\n. -c totally doable. What is said is still the case tho. We're in the process of moving everything to the dotnet cli.\n\nBTW, @davidfowl, are you saying that dnu will be gone before RTM?\n\nYes\n. Agree. I still disagree that it should be release by default \ud83d\ude00 (Unless we decided that we do that for everything)\n. Agree. I still disagree that it should be release by default \ud83d\ude00 (Unless we decided that we do that for everything)\n. Sorry -1 on release. I run dnu build/pack/run way more often than I produce release builds on dnu nuget. It's a developer tool. It's the reason why you have to urn on optimization when running csc (not off). Web.config is a weird comparison, it doesn't quite map to how a tool like dnu should work\n. Sorry -1 on release. I run dnu build/pack/run way more often than I produce release builds on dnu nuget. It's a developer tool. It's the reason why you have to urn on optimization when running csc (not off). Web.config is a weird comparison, it doesn't quite map to how a tool like dnu should work\n. build is the same as pack. Debug should be the default and already is everywhere. If you don't want to publish debug builds then pass the release flag. It's no different to building assemblies.\n. build is the same as pack. Debug should be the default and already is everywhere. If you don't want to publish debug builds then pass the release flag. It's no different to building assemblies.\n. By the same I mean it should act the same. I can't imagine having build and pack set different configurations (or even run for that matter). Debug is by far the most sensible default and has been for a while now. Like I said before, you build/run/pack locally more often than you publish to nuget.org. \nWe'll make it -c Release so you don't have to type out the --configuration\n. By the same I mean it should act the same. I can't imagine having build and pack set different configurations (or even run for that matter). Debug is by far the most sensible default and has been for a while now. Like I said before, you build/run/pack locally more often than you publish to nuget.org. \nWe'll make it -c Release so you don't have to type out the --configuration\n. I think it comes down to what you identify a nuget package with. It seems like everyone is assuming that nuget package means that I'm going to publish to nuget.org. But in this world, nuget packages are the unit of reference so it totally makes sense to have debuggable packages.   \nWhen you're done with a release and you produce the final bits, then you can optimize the hell out of it (like you do today with assemblies).\n. I think it comes down to what you identify a nuget package with. It seems like everyone is assuming that nuget package means that I'm going to publish to nuget.org. But in this world, nuget packages are the unit of reference so it totally makes sense to have debuggable packages.   \nWhen you're done with a release and you produce the final bits, then you can optimize the hell out of it (like you do today with assemblies).\n. @dahlbyk Go to any of the repositories under the ASP.NET org and run build install. It'll put the locally built packages into your package folder for consumption and testing. This is one of the workflows our devs use to test changes that affect multiple repositories. \n. @dahlbyk Go to any of the repositories under the ASP.NET org and run build install. It'll put the locally built packages into your package folder for consumption and testing. This is one of the workflows our devs use to test changes that affect multiple repositories. \n. > you're using this stuff more than anyone else pre-release\nI think that's the point. It's a new workflow that needed to be invented because we redefined how references work at a fundamental level. When you take that into account, more things become obvious. You basically need packages to support whatever you did when you were using assemblies. Features like this fall out of that naturally.\n\nbut IMO the focus needs to be on what \"normal\" people will do while building a web app in this new world.\n\nI disagree. This command is for framework/library authors. Publishing has nothing to do with packing. They are distinct commands and have different use cases.\n\nCould project.json allow specifying the default configuration to use per cli option, with scaffolding providing reasonable defaults? What happens if someone doesn't have a Debug target defined?\n\nPossibly. Debug and Release are always defined and always have defaults.\n. > you're using this stuff more than anyone else pre-release\nI think that's the point. It's a new workflow that needed to be invented because we redefined how references work at a fundamental level. When you take that into account, more things become obvious. You basically need packages to support whatever you did when you were using assemblies. Features like this fall out of that naturally.\n\nbut IMO the focus needs to be on what \"normal\" people will do while building a web app in this new world.\n\nI disagree. This command is for framework/library authors. Publishing has nothing to do with packing. They are distinct commands and have different use cases.\n\nCould project.json allow specifying the default configuration to use per cli option, with scaffolding providing reasonable defaults? What happens if someone doesn't have a Debug target defined?\n\nPossibly. Debug and Release are always defined and always have defaults.\n. @khellang I thought I did but I'll try again. dnu pack is used in place of compile. It's used when you want to produce a package that needs to be consumed somewhere else. I don't push the ASP.NET packages to nuget that org, our CI produces the final builds, not dev machines. After running dnu pack and getting a nupkg, I can run dnu packages add {nupkg} (that's what build install does for all things built) and that will make my locally built package visible to other projects and solutions. \nLets say I make a change to Hosting and want to consume it in MVC. You can make the change, build the hosting nupkg, run packages add, then run restore on mvc and now I'm consuming the package I just built (and it's debuggable). \nToday, developers that make nuget packages that they push to nuget.org have to do this:\nmsbuild MySolution.sln /p:Configuration=Release\nnuget pack SomeNuspec.nuspec\nIt's even easier now\ndnu pack -c Release\n. @khellang I thought I did but I'll try again. dnu pack is used in place of compile. It's used when you want to produce a package that needs to be consumed somewhere else. I don't push the ASP.NET packages to nuget that org, our CI produces the final builds, not dev machines. After running dnu pack and getting a nupkg, I can run dnu packages add {nupkg} (that's what build install does for all things built) and that will make my locally built package visible to other projects and solutions. \nLets say I make a change to Hosting and want to consume it in MVC. You can make the change, build the hosting nupkg, run packages add, then run restore on mvc and now I'm consuming the package I just built (and it's debuggable). \nToday, developers that make nuget packages that they push to nuget.org have to do this:\nmsbuild MySolution.sln /p:Configuration=Release\nnuget pack SomeNuspec.nuspec\nIt's even easier now\ndnu pack -c Release\n. I just gave a very specific examples with very specific commands (twice in this thread).\n\nGo to any of the repositories under the ASP.NET org and run build install.\n\nCMD\nbuild install\nPoweshell\n.\\build install\nIf you're not using one of our repositories then you can manually go to a project.json and type:\nMyProject/project.json\ndnu pack\ndnu packages add bin/Debug/MyProject.1.0.0.nupkg\nNow go to another project and consume MyProject.nupkg the way you normally would, by specifying a dependency on that package.\n{\n   \"dependencies\": {\n        \"MyProject\": \"1.0.0-*\" \n    },\n    \"frameworks\": { \n         \"dnxcore50\": { }\n    }\n}\nBonus points if you change the version on every build (that should be built in)\nset DNX_BUILD_VERSION={randomtimestamp}\ndnu pack\ndnu packages add bin/Debug/MyProject.1.0.0-{randomtimestamp}.nupkg\nYou can go further and use this dnu packages add command to populate another feed by specifying the location:\ndnu packages add bin/Debug/MyProject.1.0.0-{randomtimestamp}.nupkg {mylocalpackagesfeed}\nThat feed could then be configured in my nuget.config and I can start consuming these packages from other projects.\n. I just gave a very specific examples with very specific commands (twice in this thread).\n\nGo to any of the repositories under the ASP.NET org and run build install.\n\nCMD\nbuild install\nPoweshell\n.\\build install\nIf you're not using one of our repositories then you can manually go to a project.json and type:\nMyProject/project.json\ndnu pack\ndnu packages add bin/Debug/MyProject.1.0.0.nupkg\nNow go to another project and consume MyProject.nupkg the way you normally would, by specifying a dependency on that package.\n{\n   \"dependencies\": {\n        \"MyProject\": \"1.0.0-*\" \n    },\n    \"frameworks\": { \n         \"dnxcore50\": { }\n    }\n}\nBonus points if you change the version on every build (that should be built in)\nset DNX_BUILD_VERSION={randomtimestamp}\ndnu pack\ndnu packages add bin/Debug/MyProject.1.0.0-{randomtimestamp}.nupkg\nYou can go further and use this dnu packages add command to populate another feed by specifying the location:\ndnu packages add bin/Debug/MyProject.1.0.0-{randomtimestamp}.nupkg {mylocalpackagesfeed}\nThat feed could then be configured in my nuget.config and I can start consuming these packages from other projects.\n. > Having your CI server pushing to NuGet.org is one thing - I don't think it matters much in that case, since it's a machine \"typing the command\" anyway.\n@khellang Our CI does not push to nuget.org. Our CI produces packages that a human pushed to nuget.org (I wish it were more automated though).\n\nBut many smaller OSS projects don't necessarly have that infrastructure in place, or they're doing \"trunk-based\" development and don't want every commit to master resulting in a package on NuGet.org.\n\nWe auto push to myget.org not nuget.org. I think it would be crazy bad to auto publish to nuget.org but I know of some projects that do this.\n\nThey'd end up with the scenario that @mgravell mentioned above, at least the first couple of times, until you learn that you have to specify -c Release. \n\nHow is that any different from doing this today:\nmsbuild MySolution.sln\nnuget pack path/to/SomeNuspec.nuspec\nOops! That's a debug nupkg I just built. Same problem. It's just that msbuild has been around for ~15 years and dnu is a baby.\n\nAs mentioned earlier, it would be nice to output to the console what configuration your packaging with.\n\nI could merge a PR for that :wink: . You'd want to make it for the .NET CLI as well though.\n\nOK, I guess we've settled the command itself and its defaults, -c Release should be fine. That I'm lazy and don't want to type --configuration Release is not really the main issue here. \n\nYea, it should be shorter. \n\nMy main concern (which was the reason for this proposed change) hasn't been addressed yet; packages with debug binaries ending up on NuGet.org.\n\nI actually don't worry about that so much. I'd actually prefer if both were on nuget.org. Have you tried to debug a roslyified optimized dll? It's impossible.\n\nIn this new world, where packages are the unit of reference, it would make sense to have a way to identify \"debug packages\" and have the push command warn/ask you if try to push them to NuGet.org, like @haacked mentioned on Twitter yesterday. Is that something that's possible today? Or do you have to guess what kind of binaries are in a package?\n\nIt would require a change to nuget push and I'm not even sure how you would detect it other than location on disk (/debug) folder.\nIf I had my way (and it'll happen eventually), there would be a way to push both packages to any nuget feed (we actually had a prototype of this). Feeds would then support debug and release packages by default (local and remote) and all of the tooling we have for locating symbols would be aware of this. dnu pack would probably compile for all configurations by default and nuget push would push both packages to the feed by default. At consumption time, there'd be an experience for getting the right package based on restore flag or gesture in the project file. It would also play into making packages debuggable by default (symbol packages with source).\n/braindump\n. > Having your CI server pushing to NuGet.org is one thing - I don't think it matters much in that case, since it's a machine \"typing the command\" anyway.\n@khellang Our CI does not push to nuget.org. Our CI produces packages that a human pushed to nuget.org (I wish it were more automated though).\n\nBut many smaller OSS projects don't necessarly have that infrastructure in place, or they're doing \"trunk-based\" development and don't want every commit to master resulting in a package on NuGet.org.\n\nWe auto push to myget.org not nuget.org. I think it would be crazy bad to auto publish to nuget.org but I know of some projects that do this.\n\nThey'd end up with the scenario that @mgravell mentioned above, at least the first couple of times, until you learn that you have to specify -c Release. \n\nHow is that any different from doing this today:\nmsbuild MySolution.sln\nnuget pack path/to/SomeNuspec.nuspec\nOops! That's a debug nupkg I just built. Same problem. It's just that msbuild has been around for ~15 years and dnu is a baby.\n\nAs mentioned earlier, it would be nice to output to the console what configuration your packaging with.\n\nI could merge a PR for that :wink: . You'd want to make it for the .NET CLI as well though.\n\nOK, I guess we've settled the command itself and its defaults, -c Release should be fine. That I'm lazy and don't want to type --configuration Release is not really the main issue here. \n\nYea, it should be shorter. \n\nMy main concern (which was the reason for this proposed change) hasn't been addressed yet; packages with debug binaries ending up on NuGet.org.\n\nI actually don't worry about that so much. I'd actually prefer if both were on nuget.org. Have you tried to debug a roslyified optimized dll? It's impossible.\n\nIn this new world, where packages are the unit of reference, it would make sense to have a way to identify \"debug packages\" and have the push command warn/ask you if try to push them to NuGet.org, like @haacked mentioned on Twitter yesterday. Is that something that's possible today? Or do you have to guess what kind of binaries are in a package?\n\nIt would require a change to nuget push and I'm not even sure how you would detect it other than location on disk (/debug) folder.\nIf I had my way (and it'll happen eventually), there would be a way to push both packages to any nuget feed (we actually had a prototype of this). Feeds would then support debug and release packages by default (local and remote) and all of the tooling we have for locating symbols would be aware of this. dnu pack would probably compile for all configurations by default and nuget push would push both packages to the feed by default. At consumption time, there'd be an experience for getting the right package based on restore flag or gesture in the project file. It would also play into making packages debuggable by default (symbol packages with source).\n/braindump\n. Nuget pack has -build option as it exist today and the same problem exists there. These aren't excuses btw I'm just stating that the same workflow does exist today and it's well understood how to handle it. Nothing has changed per se.\nWe could add a dnu pack --no-compile option but meh.\n. Nuget pack has -build option as it exist today and the same problem exists there. These aren't excuses btw I'm just stating that the same workflow does exist today and it's well understood how to handle it. Nothing has changed per se.\nWe could add a dnu pack --no-compile option but meh.\n. > but I think this points out an issue with dnx if there is no way to override which version of a package should be used. \nYou mean framework not version. If you want to override the nuget selection logic you need to edit the package. I don't see us adding a first class feature for picking a specific framework folder.\n. > but I think this points out an issue with dnx if there is no way to override which version of a package should be used. \nYou mean framework not version. If you want to override the nuget selection logic you need to edit the package. I don't see us adding a first class feature for picking a specific framework folder.\n. That could just be a bug in the logic we have.\n@JoshClose yes. That's a great guide\n. That could just be a bug in the logic we have.\n@JoshClose yes. That's a great guide\n. Happens when you have a dependency duplicated in the same project.json\n. Happens when you have a dependency duplicated in the same project.json\n. It could be in one of your other projects. Scan all of your project.json files not just the main one\n. It could be in one of your other projects. Scan all of your project.json files not just the main one\n. Odd. Will take a look when I get a chance \n. Odd. Will take a look when I get a chance \n. Odd. Can you a simple sample that shows the problem and put it in a repository somewhere?\n. Odd. Can you a simple sample that shows the problem and put it in a repository somewhere?\n. Any more details? Can you reproduce this on any project? Are you using VS update 1? Did you install the RC1 tooling?\n. Any more details? Can you reproduce this on any project? Are you using VS update 1? Did you install the RC1 tooling?\n. Mono doesn't support .NET 4.6\n. Mono doesn't support .NET 4.6\n. Closing\n. Closing\n. Startup is too late to set the Environment name. There's a bunch of things that have already read it by that time (like the startup loader itself). That's how it knows to call configure{environment} on your startup class (if specified). You can always change the proper on IHostingEnvironment after the fact but the code that ran before that logic will see older values and might lead to inconsistent behavior.\nIn the latest RC release there's a program.main, that could be used to do the same thing since it runs early enough that you can get in between the startup logic and app for running\n. Startup is too late to set the Environment name. There's a bunch of things that have already read it by that time (like the startup loader itself). That's how it knows to call configure{environment} on your startup class (if specified). You can always change the proper on IHostingEnvironment after the fact but the code that ran before that logic will see older values and might lead to inconsistent behavior.\nIn the latest RC release there's a program.main, that could be used to do the same thing since it runs early enough that you can get in between the startup logic and app for running\n. Yes to use main you need to call dnx run. You also need a hosting.json with the default web server \n. Yes to use main you need to call dnx run. You also need a hosting.json with the default web server \n. To run through the Main code path you need to use DNX run instead of DNX web. You'll also need a hosting.json to specify the sever\n. To run through the Main code path you need to use DNX run instead of DNX web. You'll also need a hosting.json to specify the sever\n. Nope, the dnu is just a tool that will go away in favor of nuget. NuGet 3 will have these APIs available (and some already are). Restore is here https://github.com/NuGet/NuGet.Client/tree/dev/src/NuGet.Core/NuGet.Commands\n. Nope, the dnu is just a tool that will go away in favor of nuget. NuGet 3 will have these APIs available (and some already are). Restore is here https://github.com/NuGet/NuGet.Client/tree/dev/src/NuGet.Core/NuGet.Commands\n. No plans for anything but web right now. This might be a better question for corefx (https://github.com/dotnet/corefx). https://github.com/Perspex/Perspex is the only xplat UI stack that seems to have people working on it that I'm aware of.\n. No plans for anything but web right now. This might be a better question for corefx (https://github.com/dotnet/corefx). https://github.com/Perspex/Perspex is the only xplat UI stack that seems to have people working on it that I'm aware of.\n. :shipit: \n. :shipit: \n. @pakrym Where?\n. @pakrym Where?\n. :shipit: \n. :shipit: \n. Can you make a sample repro?\n. Yea that sucks by why are you packing your test project?\n. We don't want to allow slashes because it it hard to determine what's a path argument and what's a command line argument \n. Nope, see https://github.com/dotnet/corefx/issues/4027. Please add your comments there it'll help us push the feature back into the CLR. We can potentially keep exposing these interfaces as a separate library but they will need to be manually added to the container.\n. @csunali you mean loaded assemblies right? https://github.com/dotnet/corefx/issues/1784\n. /cc @JunTaoLuo Didn't we fix this?\n. net451\n. Closing this\n. > I used to use MsBuild.Community.Tasks to automate versioning. It doesn't appear to work anymore. Is this because the move to project.json?\nYes. I assume you're hooking an msbuild event that no longer exists? What does the task do and when does it run?\n\nI noticed that in new projects (since update 1) that Class Libraries now include an AssemblyInfo.cs. How does this work along side the project.json file? Is there a connection?\n\nJust like it used to work. If you use an AssemblyInfo file with attributes, those will be used instead of the project.json information. \nYou can think of the project.json as a nuspec. \n. yea bad nuget behavior\n. > However, we also need to be able to load the managed libraries and create delegates to managed library functions from native code, without ever launching any sort of Main function.\nI'm not sure what you're asking for here. You want a way to invoke managed code from native code in the running app domain?\n\nThis is entirely unsupported with DNX, yet it's a very major usage scenario.\n\nI'm not sure it's major enough to support in a first class way. How did you do this in .NET Framework?\n\nWhat makes matters worse is that, while we can re-implement the native host to not execute an assembly, we unfortunately also depend on the initialization that the DNX managed host performs, as we use the PlatformServices.Default.LibraryManager.\n\nWhat are you using it for?\n\nShort of forking and rewriting all of DNX so we can simply use managed libraries from native code, what can we do here?\n\nFork DNX.But it's going away anyways so you may not want to do that.\nWhat exactly are you trying to do.\n. > I need a way to create an app domain and invoke managed code, from a native shared library.\nNot sure how you can do this other than writing your own host.\n\nThe upstream authors (and my way with our custom CoreCLR build system) do this by owning the entire native host: initialize the CLR, create delegates, use them, then shut down the CLR. Things I'd prefer to be able to do via a library, rather than reimplementation.\n\nThis bug is better suited for dotnet/coreclr and dotnet/corefx. If you're looking for a built in way to do something outside of owning a host then thats the place to go.\n. Great! Will close this.\nPS: I'd be interested to see what you're doing (if that is ever possible)\n. dnx list isn't a thing and the first error looks correct. What command is actually causing the problem?\n. Closing this.\n. @BrennanConroy just said it dnvm update-self\n. Either way this bug should be filed on dnvm. I'll leave it open.\n. We're not adding any features to DNX since it won't be used past RC1. The good news is this will be the default when using the new CLI. Each app with get a unique process name (matching the application name).\n. > DNX won't be used anymore? As in, DNX is going away? \nYes.\n\nAlso, will the process name account for multiple instances of a running process, or will there be more of a bias to writing an application to use a configurable number of worker threads?\n\nWhat does that mean? You get an executable file in your output folder (like the old days). The hosting model for websites is still a process per site.\n. @tuespetre What are you asking about that specifically? You want to set each title of your running app? \nmywebapp.exe (1)\nmywebapp.exe (2)\n...\nmywebapp.exe (n)\nSomething like that? I'm not sure what feature you are asking for...\n. How would you do that if you could do it programmatically?\n. > \"Microsoft.Framework.Runtime\": \"1.0.0-beta6\",\nThe version of that has to match the runtime you're executing.\n. /cc @Alxandr \n. /cc @Pilchie This look familiar?\n. 1. You should never build s portable package with a dotnet or net standard moniker m. That's defeats the purpose of it.\n. RestBus.Common needs to target a dotnet platform standard (like Eric was saying dotnet5.2) in order to be consumed by a library that specifies another platform standard (dotnet5.4 in this example)\n. Are you using -*? If yes then all bets are off. The best way to shield yourself from other repositories when using floating versions is to use a per repository packages folder. You can edit global.json and set a relative path to packages. \n\nWhat seems to be needed is some sort of trace inside .dnx\\packages which allows dnu restore to skip a version if it came from a feed which isn't listed for the currently-building project...\n\nWe could choose to ignore the local disk when restoring -* versions and instead only used configured feeds (instead of trying to keep track of where things came from).\n. This belongs on dotnet/coreclr\n. @Flavien File this bug on aspnet/Hosting. \n. What services are you looking for? They need to be manually registered using the TestServer overload that specifies the service collection\n. There's no more static service provider (also the CallContextServiceLocator only ever had the runtime services which are exposed as individual statics). If you want to get at the concrete service provider constructed then you need to assign IApplicationBuilder.ApplicationServices to something and access it that way.\nCan you show your code or some pseudo code with all of the moving parts?\n. /cc @muratg we should move this out.\n. https://github.com/aspnet/Common/tree/dev/src/Microsoft.Extensions.CommandLineUtils. I need more context. What are you doing exactly? CodeGen? Runtime compilation?\n. Are you using RC1? OR Post RC1 bits? For RC1 you should be able to use the ILibraryExporter as Razor is doing today. See https://github.com/aspnet/Mvc/blob/6.0.0-rc1/src/Microsoft.AspNet.Mvc.Razor/Compilation/RoslynCompilationService.cs.\nPost RC1 we're going to be moving away from this interface, see:\n- https://github.com/aspnet/Mvc/issues/3633\n- https://github.com/dotnet/cli/issues/392\n- https://github.com/dotnet/cli/issues/376\nPS: Using AppDomain.CurrentDomain.GetAssemblies() is wrong anyways as it'll miss assemblies that aren't loaded yet. It's also not right to use the runtime assemblies for compilation. You'll get different results (but maybe you don't care?)\n. @XVincentX What solution?\n. > Let me reformulate the question: does rc1-update1 belong to postRc1 bits? \nNope.\n\nIn other words, can I inject ILibraryExporter into my Console application?\n\nNo you can't. Use the static. Post RC1 means RC2 where more things are changing.\n. You're using the wrong type. The type is Microsoft.Extensions.CompilationAbstractions.Default. LibraryExporter not Microsoft.Dnx.Compilation.CompilationServices.Default.LibraryExporter\n. You're using RC2 right? None of the RC2 packages are on nuget.org\n. @Xiaohongt have you been using RC2 all this time or something else? I'm trying to figure out what you are currently doing...\n. I dunno if you're using RC2\n. Did you figure it out?\n. I wrote this before but I'll write it again:\nYou're using the wrong type. The type is Microsoft.Extensions.CompilationAbstractions.Default. LibraryExporter not Microsoft.Dnx.Compilation.CompilationServices.Default.LibraryExporter\nIf you're still having a hard time making it work. Put a repro project on github and I'll send a PR to fix it.\n. @Xiaohongt your project has no global.json, what DNX version are you using?\n. @XVincentX Why aren't you using rc1-update1?\n. I don't see why it wouldn't. The reason you're getting a null reference is because you have a mismatch between this: https://github.com/XVincentX/dredd-hooks-dotnet/blob/master/project.json#L35 and the DNX you're running. They need to match. Downgrade your dnx to update1-rc1 and it'll start working again.\n. I asked which bits you were using. The correct answer would have been RC1. I'd recommend staying away for this kinda of stuff because things are still changing. Downgrade your application to the RC1 dnx and it will work.\nYou're not doing anything RC2 specific so that's your easy solution.\n. This is super broken and will be fixed in rc2. For now you can manually edit the project.json file in the wrap folder.\n. Mono doesn't support .NET 4.6. \n. Close? Why not just do this?\n. No but this moves the library out of DNX. Are you suggesting we just leave it in and have a copy in Common? That's fine I guess.\n. :shipit: \n. /cc @anurse \n. File this issue on aspnet/Home. This has nothing to do with DNX.\n. After compile gets called here https://github.com/aspnet/dnx/blob/7ac7929aa575e17b3c271e4a7a0c164418de0395/src/Microsoft.Dnx.Compilation.CSharp/RoslynProjectReference.cs#L112\n. > By \"private\" dependencies I mean packages that I have manually copied into local /packages folder in my project, because there is no NuGet feed for them.\nThat's not supported. If you have a dependency that's not in a nuget package, put it in a nuget package and reference it from project.json. You should make a local nuget feed with the \"private\" packages and you should change your nuget.config to add it as a feed.\n\nPerhaps I'm not supposed to run dnu restore on published packages? But in this case, why the hell does it not refuse to run? Also, unfortunately, I have to do it sometimes, because it is the only workaround for issue #3272.\n\nYou're not supposed to run restore on the published output. You're supposed to run it on the project.json \n. > If it's not supposed to be run like that, then why does it run like that? It even creates new project.json files in subfolders a\\1.2.3\\root, b\\1.0.0\\app, and b\\1.0.0\\root - this doesn't look like accidental functionality at all.\nThat's because the current model preserves the package hierarchy in the output folder. It merely copies the relevant data and files from the original projects and transforms the output.\n\nUnfortunately, due to #3272, I do have to dnu restore. At least for now. Just for the time being I have resorted to \"publishing\" by copying the whole source, but this is not acceptable long-term.\n\nStill, that happens at development time. You can only publish what you have restored for...\n. DNX has no subcommands. Run is a built in command that runs the program's main. Dnu has subcommands though.\n. @lmartinking There's 2 different tools at play and you have them confused. DNX is the runtime like python and DNU is the tool chain (no first class equivalent in python that I'm aware of). DNU has publish, DNX does not. DNX can run things, DNU cannot. Type dnu and you'll see a list of subcommands. \nWe could mention the existence of run for dnx but we're not making anymore changes as we're moving to a new toolchain post RC1\n. Thanks!\n. DNX bugs are not being fixed at this point because it is being retired in favor of the .NET CLI for RC2 (which already supports this). \n. The problem is that you're using RC2 and not following along with the announcements repository. There are breaking changes in RC2 (and looking at your project.json RC1 as well) that you haven't accounted for.\nhttps://github.com/aspnet/Announcements/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0.0-rc2\n. This is an MVC question ask on that repository.\n. Not sure I understand the question.\n. @DasJott And you're using the static files middleware right?\n. DNU restore is going away and will merge with NuGet restore. To that effect there won't be any warning for those things because packages can support old and new ways of doing thing (people do this all the time for down level support).\n. There's no tool if that's what you're asking for. \n. the /app folder is irrelevant. Files for your project get copied into the right place by default.\n. The question I have is what doesn't already work?\n. Can you make a sample that repros the issue? Push it to github and send the url.\n. That's pretty weird. I wonder if NuGet pack fails the same way. If so then I'm surprised the package was even allowed on nuget.org with that Id.\n/c @yishaigalatzer @emgarten \n. Yep, bug in dnu pack, this will be fixed in the dotnet CLI (http://github.com/dotnet/cli) as dnu and dnx are being retired.\n. Fix is here https://github.com/dotnet/cli/pull/689\n. > Socket library: SignalR 3 rc1-update1\nDoesn't exist. Did do you build it from source? Also, websockets and SignalR are not going to be RTM with ASP.NET 5 RTM. See the roadmap for more details https://github.com/aspnet/Home/wiki/Roadmap\n. Side node: It would be better if you made a repository so people don't have to download a zip to look at the code.\n. Same applies, we're not actively developing SignalR for release right now as it won't be shipping. I don't expect us to be fixing bugs like this in the short term. File this issue on the SignalR repository for later consideration.\n. You're missing the websocket middleware. Add it and call UseWebSockets before calling UseSignalR\n. closing this out as its not a dnx issue\n. We aren't really changing DNX anymore (it's being retied in favor of the .NET CLI). Can you use the CoreCLR version instead?\n. @mconnew It's also only CoreCLR, it doesn't use mono.\n. Ping @mconnew. Can you use either the CoreCLR DNX or the .NET CLI? \n. @weshaggard @ericstj Can the build tools use the CoreCLR version of DNU for restore or at least allow overriding it? I don't want to do anymore code changes to our restore because it's going away and will get lost when we switch over to nuget anyways (which is happening this week).\n. @mconnew Seems like that should resolve the problem. I'm closing this out.\n. And the packages you added are in C:\\Program Files (x86)\\Microsoft Web Tools\\DNU?\n. @wim11be See https://github.com/dotnet/corefx/issues/984\n. File this on aspnet/Tooling\n. Is this breaking something?\n. Ok\n. This has nothing to do with DNX. Looks like you want a roslyn feature? Or maybe an EntityFramework feature...\n. https://github.com/dotnet/roslyn\n. This specific issue has been fixed in the new iis publish tool\n. @pakrym You never run dotnet but there is a new TFM that will replace dnxcore50, the current working title is netstandardapp\n. We just need to add a compiler option in the new CLI https://github.com/dotnet/cli (I added the tag to move it). It'll be a trivial change to add it to the compilation options.\n. That error page sounds like the one coming from hosting. You can enable it by setting ASPNET_DETAILEDERRORS=1 in the azure portal configuration settings. That should show the error.\n. Can you show a screenshot of the error page, and can you say what versions you are using?\n. Yea, that's the one. Setting that setting should do the job... Are you sure it's set?\n. If you're in an ASP.NET application you should be using IApplicationEnvironment.ApplicationBasePath.\n. You have 2 options:\n- Use Microsoft.Extensions.PlatformAbstractions. There you can use PlatformServices.Default.Application.ApplicationBase (Application is an IApplicationEnvironment)\n- Use System.AppContext and use AppContext.BaseDirectory\n. If your lower bound doesn't exist then you're kinda guessing with your dependencies aren't you?\n. Using the 4th number is pretty non standard. It's only supported in nuget for legacy reasons. Still I don;t quite understand what you're doing so I can't comment. The warning was intended to let you know that you're aiming your dependency too low.\n. This project is the old one. You want this one https://github.com/aspnet/Common/tree/dev/src/Microsoft.Extensions.CommandLineUtils. Also the manually hand crafted JSON is hella hacky :smile: \n. Projects always win over packages, you can work around that by specifying a target on that particular dependency edge:\n{\n    \"dependencies\": {\n          \"MyApp.Persistence\": { \"target\": \"package\", \"version\": \"2.0.0\" }\n     }\n     ...\n}\nI've been seeing error reported like this for wrapped projects, is that the current situation?\n. > It's not wrapped. Thanks for the explanation, it feels like a strange decision to break SemVer over choosing a local project.\nNope! projects always win over packages. When you build a project into a package there's usually a step that sets the version to be in sync with the ci build. We don't want to deal with looking at what a project version would have been on disk to pick a package or project, it's just too brittle (we used to do this).\n\nIn this current situation it broke SemVer and therefore my referencing project over choosing the readily available nuget package.\n\nWe're not going to change this behavior, your best bet it to specify the project or package if that's what you want to target.\n. @anurse is this done?\n. :shipit: \n. Did you update all of your dependencies to rc2 as well? It looks like you didn't....\n. Almost.. We don't official ship arm builds so they are only available on our myget feeds hence there's no 1.0.0-rc1-final version. That means you have to move all of your dependencies to rc2 which means you have to either use * in your versions ({version}-rc2-*) or go to myget to pick specific versions.\n. Go to https://jabbr.net/#/rooms/AspNetCore or https://gitter.im/aspnet/Home\n. AFAIK, they work the same. Also it compiles it on the fly but after killing the process. So it likely unrelated to dynamic compilation.\n. When you save a file, the entire process dies.\n. That's a known issue. Unfortunately it won't be fixed an DNX since DNX is dead. The good news is it's fixed in the .NET CLI.\n. We're not making anymore changes to DNX since it will be replaced with the dotnet CLI.\n. https://github.com/aspnet/dnx#dnx-retired\n. > Expected Behaviour: The native library mylib.dll, mylib.dylib or mylib.so is referenced correctly in project.lock.json depending on the platform and loaded correctly by interop.\nNuGet restore does not look at the project structure it only handles packages. DNX has logic to look at those folders at runtime and do the appropriate thing per OS. As the DNX and DNU are being retired, I'll refer you to this bug on the .NET CLI https://github.com/dotnet/cli/issues/710.\nSee https://github.com/aspnet/dnx#dnx-retired\n. This issue makes more sense to file on coreclr.\n. Make sure you do some tests with this and the .NET CLI, see how those things play together.\n. We don't have an asp.net host\n. Possible? Sure, it's an interface so you can implement your own. Of course, nuget was the one doing dependency resolution so if your implementation adds things at runtime, that's your job. Or maybe it won't matter since everything uses the same versions of stuff anyways...\nIt would be better to replace an mvc specific interface rather than something as big as library manager and library exporter.\n. Can you provide a sample application on github please?\n. Why are you using rc2? Did you update all of your dependencies to some version of RC2?\n. Can you provide a sample project with repro instructions on github? I'd like to run it for myself. It's clearly a dependency mismatch somewhere.\n. How did you pick those individual versions? Why not use * for all dependencies or use the same build numbers for the things that ASP.NET produces? We have aligned build numbers now.\n. You still have a version mismatch. I suggested you spend some time reading the annoucements for breaking changes https://github.com/aspnet/Announcements/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0.0-rc2\nAll of the packages were renamed from Microsoft.AspNet to Microsoft.AspNetCore\n. It's fixed in RC2 with the .NET CLI, the builds are incremental. Assuming you're on the command line as well right?\n. This is the problem:\n\"web\": \"Microsoft.AspNet.Server.Kestrel\",\nRC2 has changed lots of things. I'd recommend sticking to rc1 since so much is in flux right now. If you want to use RC2 then you'll need to make tons of changes to your project and keep up with the announcements:\nhttps://github.com/aspnet/Announcements/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0.0-rc2\n. What happens when you run it without the debugger using just web and not IIS express?\n. So it works? I'm having a hard time debugging this without more information...\n. Can you make a new project and see if you can get hello world working without any dependencies?\n. Now, add more RC2 things until it doesn't work.\n. limp along dnx :smile: :shipit: \n. > When debugging the application by running from Visual Studio, where are the DLL files located for the compiled application?\nDNX does dynamic compilation, nothing is on disk.\n\nThere doesn't appear to be a bin folder in the project itself, and the artifacts folder at the root has no DLL files in it until I publish the application.\n\nYep.\n. Not yet, it's a little tricky\n. Naw this isn't happening\n. DNX is no longer compatible with RC2 packages. We've reached a point where the changes between the CLI and DNX are big enough that it no longer works.\n. dnx45x was on xplat was mono. Now you have to use net45x, it's really no different from dnx, just that it's vanilla mono.\n. This repository isn't that right place to file any bugs as DNX is long gone. Please file issues on aspnet/Home\n. Why did you file this on dnx? This repository is pretty much dead at this point.. Shouldn't we ifdef this?\n. Seemed easier than keeping a list since we don't unhook loaders anyways.\n. The AppDomainManager is unnecessary in core clr land.\n. This is funced out so the hosting assembly doesn't need to depend on any other assemblies. Not sure it matters since user code will never see it but this is the abstraction for adding an assembly loader at the lowest layer.\n. What does it look like?\n. Check for Project being null and return a null entry point.\n. Add braces here\n. Fix formatting and call it HostId to be consistent with ContextId\n. var\n. Environment.Exit\n. Make this thread safe.\n. Flatten the graph once during initialize\n. Do you need to EnsureInitialized?\n. Instead of this just make it lazy \n. Will change this to use Marshal.Copy.\n. It should actually all be case insensitive.\n. Split this into different files and put it into a parser directory (at least the top level classes). Also add the internal modifier :smile: \n. Did you really have to do a BNF dsl? \n. Remove the dead code\n. Why?\n. Can you really ever have a null project?\n. We should move this logic into some utils method somewhere\n. I also think you need some basic tests for this (and I need some for the other basic command line parser)\n. PathUtility class in the shared project\n. Is the only difference between these 2 methods the /CreatePDB flag?\n. Is this trying to exclude all files under bin/ and obj/\n. Why did this become an instance instead of just a static helper?\n. Move these paths to the assemblyInfo object itself.  Add NativeImageDirectory, and NativePdbPath. Make NativeImage path and NativePdbPath use NativeImageDirectory.\n. Move this logic into a helper function called ExecuteCrossgen that takes a string args and use it from both GenerateNativePdb and GenerateNativeImage\n. I think this should be called inside of GenerateNativeImage since all of the verification checks are the same. The logic in this method would solely be there to execute crossgen with a different set of args but it could reuse the existing closure computed by GenerateNativeImage.\n. You need to handle spaces in the paths by adding extra quotes. I had to do this for the regular crossgen command. \n. Include\n. Likely the order of the things it tries to delete. Files before directories. In kudu we did similar things but for other reasons (like robustness).\n. Ok so eventual state\n. I can add that but it's an edge case.\n. Make this a constant\n. This may need some tweaking...\n. I'm poisoned :trollface: \n. Yes, it should be exactly the argument passed to Load\n. It doesn't matter here since we newed up the exception and passed it as a data object.\n. Should be the exact argument passed to Load\n. ```\ntry {\n}\ncatch(Exception ex)\n{\n  Console.WriteLine(ex);\n}\n```\n. Will verify that.\n. Not available on core clr.\n. True, it means you aren't running on windows :smile: \n. I moved it around a bit when I wasn't sure if it was going to be more first class or special. It could live here to simplify the ApplicationShutdown logic.\n. No GAC on the mono's, at least not this one. The reference assemblies are equivalent here.\n. Both are\n. Why is this all public? it should be internal.\n. Why is this public?\n. Come to think of it, this library could be a standalone package because it is useful outside of the runtime.... But the runtime should use it as an internal thing.\n. How do you see this help?\n. Also, how do you see this help for subcommands?\n. If no application was specified then print the help here\n. @loudej yes it should be built in.\n@ChengTian you never run klr Microsoft.Framework.Project directly. It's all done via batch files\n. Do you have to cast?\n. Yes actually these do look wrong. Copy and paste bugs\n. Now that everything is in the same folder we don't even need a bunch of these options.\n. Annnd our tests for these were disabled when we renamed the package https://github.com/aspnet/KRuntime/blob/dev/makefile.shade#L166 :facepunch: \n. Or\ncommandsBuilder.AppendFormat(...);\ncommandsBuilder.AppendLine();\n. Delete this file\n. I don't understand that\n. Fix the formatting here, else on another line this hurts my eyes\n. ugh, that's terrible @loudej. Leave it for now.\n. Probably this doesn't matter anyways. kpm only needs to work enough for build since it was moved. The rest of it just needs to be fixed\n. Why do you need the rest of these?\n. Why did you change the case? When we download nuget.exe the output is lowercase. What OS did you test this on that you needed to change nuget to NuGet?\n. This file should be deleted.\n. Remove the extra space\n. Please fix the formatting all over. This is just hard to read.\n. I think it makes more sense to split copy-bits into 2 targets and exclude one of them on mono. This just looks messy.\ncopy-mono-bits\ncopy-bits\nSomething like that.\n. Put this back.\n. Change this back this makes no sense on mono.\n. I'm assuming there's a bug with slashes and nuget pack?\n. On mono, we only need to create the KRE-mono* package not the rest so if we have to have 2 different nuspec files it should be for that SKU of the KRE only.\n. Fix the formatting.\n. Why did you have to change any of build.sh at all?\n. Nope, everything here is lowercase:\nhttps://github.com/aspnet/KRuntime/blob/dev/build.sh#L17\nI think you made unnecessary changes because you have an old version of NuGet.exe in your cache dir.\nRevert all changes made to this file.\n. This logic might be broken on mono. I'll try to verify this\n. Isn't that why there's an else statement?\n. Try this, revert this entire file. Delete your cached nuget.exe and try re running it.\n. All of it seems unnecessary. \n. Just the mono one, not all.\n. Ah hah, that makes more sense. We should get that fixed.\n. Fix the formatting\n. You have !/bin/sh twice\n. +1\n. Can't we just flow context another way?\n. The formatting isn't fixed, it's worse than it was originally.\n. Yea, the formatting is wrong, it should look like this:\nC#\nvar ipEndPoint = new IPEndPoint(IPAddress.Loopback, port);\nvar listenSocket = new Socket(ipEndPoint.Address.AddressFamily, SocketType.Stream, ProtocolType.Tcp);\n. Formatting \n. Actually it might be better to use new UriBuilder(proxyUri). It has UserName and Password properties hanging off of it.\n. We will, we must, we just don't have it yet\n. just call the variable defaultAuthor\n. Why?\n. I see, this is specifically for the run command but it works fine for the top level k --foo right? \n. Maybe we should create the target folder on first copy instead of deleting it.\n. 1.0.0\n. I'm not sure this is required. You should just return\n. You don't need this\n. Move it to another file\n. What changed here?\n. Where did this logic move to?\n. Why does this file have any changes?\n. What replaced this?\n. Ah, cool.\n. What's this?\n. Why not just do:\nC#\nrootObject[\"dependencies\"] = new JProperty(\"dependencies\", dependenciesObj);\n. Write dependencies to global.json\n. Formatting\n. Path of the folder where restored packages go\nPath to restore packages\n. InvalidOperationException. Spelling mistake\n. Dictionary<string, string>\npackageid => sha\n. TryGetValue instead of ContainsKey\n. config file = global.json\n. Just use library.ToString()\n. need to dispose SHA512\n. This probably shouldn't warn if dependenciesNode is null\n. Expected global.json, project.json or path where project.json exists.\n. This should return non zero exit code\n. Always use Path.Combine we need to work cross platform\n. Same here\n. Framework shouldn't be a variable either. That's just legacy. This script only works for debug and net45\n. Nice, never used that.\n. Just use Path.Combine\n. This needs to use the SpecialFolder thing because of mono\n. Why don't you stop executing here?\n. This should be ExecuteCommandWithServices used from both discover and execute tests.\n. Should be *__.* or something similar. The current wildcard looks pretty weird\n. We call this for directories as well? Why is that?\n. What's the difference between these folders\n. Why is the main project\\bin relevant?\n. What goes in it?\n. Yea that's useless.\n. Why did this get removed as part of this change?\n. Fix the formatting, align the string.Equals calls. Also instead of 2 if statements, add a list of extensions to ignore at the top of this file that we will expand as necessary \n. is this the wwwroot or the main app?\n. I think this should be done on the outside.\n. This as well\n. IList<string>, cuz I think everything else is\n. This doesn't produce a warning? What if the exit code is non zero\n. Gonna change it?\n. That is good enough actually.\n. +1. This needs to be done as a ton of the code looks duplicated.\n. We need to check the behavior here on mono.\n. Use the property instead of the method.\n. Add it as an extension method.\n. Should we use a single dictionary with a structure instead? \n. Much cleaner\n. Remove this\n. Is this really excludeFiles if it contains a directory?\n. I'd flip it and do pack-exclude\n. succcess = success && configurationSuccess;\n. public fields? Make this a property\n. StopWatch.Start()\n. The static method:\nvar sw = Stopwatch.Start();\n. This isn't right. These need to be dependencies for the package manager only\n. Why is this blocking?\n. change the name variables to eval\n. fix the formatting of the lambdas\n. String.Join is less cool but you should use it\n. ? What's this? Comment here? Is this about mono?\n. Make it a property not a field\n. Property not field, private set?\n. Private set property not field\n. what about getVariable\n. Call this InstallPackages\n. Change preinstallCheck to packageFilter\n. RestoreFromGlobalJson\n. This logic isn't right. It will crossgen everything which is wrong. We need to properly design this feature and make it more robust (especially since we have the global package repository).\n. I think this should be exact not >=\n. This should look for the exact version of the package. Does it do that?\n. No script events get raised when we're restoring from the global.json /cc @lodejard \n. I think it fits the compilation cache model. I don't really care about eagerly clearing entries.\n. nameof(ProcessingQueue) C# 6 man!\n. Arg\n. I'm not sure this is a problem because we're using this to compare if a token matches or not. The bigger issues around case insensitive paths are when we're actually looking for files on disk.\n. Yes, in fact Troy filed a bug about suspicious memory use (and that was before this change). So I'd say that it will see this change. I'm also not too worried about memory optimization for in process compilation. Roslyn is aggresively caching a lot already and we keep around stuff on top. We might be able to get rid of the low hanging fruit (like getting rid of all of the compilation cache when) after we load but I think we'd be micro optimizing. \n. None of these tests seem to define arguments in the test command. Isn't that the main test case?\n. Add a test for failure\n. Yep\n. Why did this change?\n. Shouldn't this be done in parallel?\n. Add example input.\n. Extra space omg\n. lowercase s\n. Used named parameters for null.\n. lowercase s\n. Remove dead code.\n. Remove default values.\n. lowercase s\n. Bad merge, this code was removed brah\n. readonly, _roslynProjectReference\n. this._roslynProjectReference\n. You need to try catch here\n. Different files!\n. I'm not sure you need this now\n. omg\n. Do something here so we can verify that it works.\n. Don't use TryParse maybe just use Parse and let it throw.\n. This command should be async since that support was added recently\n. Shouldn't this also be in parallel?\n. This method should be on VersionUtility in the runtime.\n. Remove solution just call it rootDirectory\n. Don't use this, we have a helper in the runtime. PathUtility.GetRelativePath (https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.Runtime/NuGet/Utility/PathUtility.cs#L63)\n. I would move this to PathUtility in the runtime and add a unit test for it. It's potentially broken already if dir doesn't have a trailing slash:\nIsChildOfDir(@\"c:\\food\\x.dll\", @\"c:\\foo\")\nThe above should return false not true.\n. Do we use IReport here?\n. Not in this PR but file an issue for it.\n. Dunno if these tests will fail on osx/*nix\n. Instead of just 3 tests, I would use theories and have a bit more cases.\nC#\n[Theory]\n[InlineData(\"../basedir\", \"childfile\", false)]\npublic void VerifyChildDirectory(string baseDir, string file, bool isChild)\n{\n    Assert.Equal(isChild, PathUtility.IsChildOfDirectory(baseDir, file));\n}\n. One more change, instead of MemberData(\"ChildDirVerificationData\"), use MemberData(name of(ChildDirVerificationData))\n. Pass in a single dependency context\n. Also move this static function to the bottom of the file.\n. I'd change the name to NativeImageGenerator or something.\n. BuildNativeImages\n. I would avoid any changes to this class. It's optimized for runtime usage and I'd like to avoid supporting more than is required. Caching should just always be enabled for this thing. \n. I don't think this needs to be the base class for all 3 repositories, that seems suboptimal for the kpm repository case. I'd also take this opportunity to remove the enableCaching flag since it's only ever used in a single scenario. That flag isn't required anymore and it could simplify things.\n. Why does tho interface expose so much stuff? Who consumes these outside of the implementation itself?\n. This name doesn't mean much, add a comment that shows what layout you mean.\n. This _FunctionName thing isn't what we normally do (even though I know @lodejard wrote other code like that in kpm). Call it FindPackagesByIdCore\n. Should be all read only.\n. Instead of GetFiles and GetDirectories, you'd want EnumerateFiles and EnumerateDirectories\n. PackageFolderFactory?\n. This doesn't make sense when kpm restore fails.\n. Remove this\n. TryGetValue\n. Why not just loop over this directly instead of projecting here?\n. Feels like it should find all failed packages and then throw an aggregate exception (not the type but a message with all the failed data). Or maybe just print this out.\n. nativeImageGenerator\n. Why do you need to specify PackageManager.DependencyContext here?\n. This needs a better method name.\n. We also need to do this for the KpmFolder \n. Ah it's called from pack! My bad\n. Can we make this a method on UnresolvedDependencyProvider instead of being in a util class?\n. GetMissingDependenciesWarning\n. Use the return value here\n. Now sure why that matters here. Seems wasteful and less clear TBH\n. You lost me there. It would look like this:\nC#\nforeach(var packageAssembly in resolver.PackageAssemblyLookup.Values)\n{\n   // Do stuff here\n}\n. Remove this space\n. Instead of using the output, does it make sense using the package ids?\n. Defensive coding in general. Can they EVER be out of sync? If so, do you want to see a better error message other than a generic KeyNotFoundException?\n. We should print the nuspec path as well, in OpenNuspecStreamAsync\n. I'll file an issue for this, we should have shred code to reason about the KRE package name\n. This was change to KRE_APPBASE in a recent commit. Changing this will regresses the behavior...\n. Shouldn't this match the wwwrootout? It should be a relative path from the project.json to the new wwwroot folder.\n. targetWebRootPath\n. Why are we scanning files here?\n. I'm not sure how I feel about this since we spent a whole bunch of time making this avoid scanning in the first place. Why can't this check be done later? Or why can't restore just fix it up before the runtime sees it?\n. rename this variable to checkPackageIdCase\n. You can call if (missingItems.Add(node.Library))\n. Skip it instead of throwing\n. This is the id afaik\n. Code more defensively here. Fall back to the specified id if both of these are null.\n. Pass the build artifacts directory directly\n. Do you really need this?\n. This should be yellow. \n. Failed to retrieve information from remote source '{0}'\n. Why are these quiet?\n. Looks good, but I find the use confusing\n. Yellow?\n. Yellow?\n. Use local if available and remote sources don't have the package. Seems logical.\n. seems like we've redefined things that are already defined below.\nBASE_DIR2 is the same as ROOT\nTARGET_DIR2 is the same as ARTIFACTS_DIR\n. This should be commuted in a single place instead of twice.\n. This should only need to happen once\n. What is this for?\n. And this?\n. PackageHashes\n. Can we keep a dictionary instead?\n. This code isn't right. We should be copying a specific package not all tools folders.\n. We need to be more defensive here.\n. We need to be more defensive here.\n. When was was talking about the dictionary, I mean for dependencyContexts. It seems like we're de-dupuing here as well and instead it should just be a simple:\nC#\ncontexts[targetFramework] = CreateDependencyContext(project, frameworkName);\n. Why are we looping over all packages here? Aren't we only copying the Microsoft.AspNet.Loader.IIS.Interop package?\n. Why do you need to check if it's already there? Can't you just always overwrite it? What's the downside?\n. Check for existence? Will this always be there?\n. Not quite defensive enough. The dependency might not be there at all.\n. We never throw Exception always InvalidOperationException, though this feels like InvalidDataException\n. C#\ndependencyValue = dependencies[property.Name]\n. Ahhhh, ok. And we don't have a way to lookup the package directly by name ok.\n. private\n. What?\n. flagsToAdd, flagsToRemove\n. _flagsToAdd;\n_flagsToRemove\n. preprocess\n. Isn't this the same as the root.PackagesPath?\n. The usual pattern for this is:\nC#\nList<DependencyContext> contexts;\nif (!root.LibraryDependencyContexts.TryGetValue(libraryDescription.Identity, out contexts))\n{\n      contexts = new List<DependencyContext>();\n      root.LibraryDependencyContexts[libraryDescription.Identity] = contexts;\n}\ncontexts.Add(dependencyContext);\n. Feels like this should be readily available and no recomputed.\n. Make this more resilient, I guarantee that this will fail randomly. Add some retries in here.\n. This looks un-maintanable. We need a little DSL for describing a directory structure.\n. This code to dynamically invoke methods is repeated. We should move it to a common function and call it from both this and the CoreCLR startup path.\n. Path.Combine?\n. Yah.\n. Can we add a helper on top of this one that knows how to properly execute kpm pack both on *nix and on windows?\n. We dont have notnull anywhere in the runtime but we could start using it. It's not like this is a public api or anything.\n. Add  unit test for this\n. Was this always verbose?\n. This is used for mono as well? Program Files?\n. It needs to be whatever it was before you made the change\n. It should never be null at this point.\n. Yea but c# doesn't have a type system I can use to represent that.\n. Can we se the environment of the process we launch instead of changing the current environment?\n. Does this compile on aspnetcore50?\n. Instead of this, walk over DependencyWalker.Libraries. You can use the NuGetDependencyProvider to figure out what assemblies are used for package dependencies\n. Instead of changing this code, I would make the implementation of GetSourcePattern do the right thing:\nC#\nprivate IEnumerable<string> GetSourcePattern(Project project, JObject rawProject, string propertyName, string[] defaultPatterns)\n{\n   return GetSourcePatternCore(rawProject, propertyName, defaultPatterns).Select(p => FolderToPattern(p, project.ProjectDirectory));\n}\n. Are we using single quotes or double?\n. Remove this logic completely, it's not part of the bug.\n. We need to get rid of this boilerplate code, can we turn this into a property data or something?\n. We don't usually use this pattern for attributes:\nC#\n[Theory]\n[MemberData(\"KrePaths\")]\n. I'm not sure this is right. I believe you need logic similar to this:\nhttps://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.Runtime/MetadataProvider/ProjectMetadataProvider.cs#L26\nAnd:\nhttps://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.Runtime/MetadataProvider/ProjectMetadata.cs\nCan you verify that the assemblies used in the compilations are the same, I have a feeling it might be different.\n. Why do you need this? Library.Path is the package path\n. Does this end up causing things to build twice? Or does it work because the cache is shared across these 2 calls to GetAllExports?\n. I think you are right\n. Should we reuse the project export?\n. Make this a property\n. This too\n. Use the old logic if this is null\n. Get this service once in the ctor and just check for null here\n. readonly\n. Fix brace style\n. readonly\n. Why is this lazy?\n. Properties come after privates and ctors\n. Properties are pascal cased \n. remove this.\n. remove this.\n. Can multiple callers mutate the SourceText ever?\n. CreateTempDir() should return an object that's disposable so that it'll be cleaned up automagically:\nusing(var temp = TestUtils.CreateTempDir())\n{\n      var dir = temp.Directory;\n}\n. Sort these usings?\n. This should  probably be set in both cases? Can you neither OffsetBased nor LineBased?\n. Do you really need 2 cache entries? SourceTextWithChanges and SourceText? Can't you just always use the SourceTextWithChanges and make that have 2 cache dependencies? The path and version or am I missing something...\n. Don't need to do anything for desktop.\n. Let's make sure this works on *nix as well.\n. Hah thanks\n. Looks like 2 spaces instead of 4.\n. rename this from krePath, that looks weird.\n. We should just avoid checking output for the most part unless it's strictly controlled by the test case.\n. Instead of a temp folder can we use a folder underneath the artifacts directory?\n. Is this always safe?\n. This is right, you need to expand the actual assemblies in the NuGet package.\n. Remove the unused dependencies\n. Any reason we don't use the command line parser here?\n. Is this required?\n. http://stackoverflow.com/questions/26717713/processstartinfo-not-recognising-command-inside-sh-file\n/bin/bash\n. Why do we need this? It should just fail if the user didn't use the right slashes no? Or am I missing something?\n. Why to ToArray()?\n. Why do you do it here instead of the evaluation of supportsPdbGeneration?\n. Then you have to look at all the places this variable is consumed and print the message there.\n. Why is this still here?\n. This only shows up with KRE_TRACE=1 right?\n. This logic should use the nuget config API to resolve the repository path, then create the path where individual packages exist. NuGetPackage should have a Path property which represents where it is installed on disk. From there you just need to see if the assembly directory is under any of those folders.\n. This looks really wrong. Why can't we use just the method PathUtility.IsChildOfDirectory on all nuget package paths?\n. Why?\n. C#\nstring.equals(\"project:BuildOutputDir\", key, StringComparer.OrdinalIgnoreCase)\n. unrelated change. Lets nuke this.\n. Remove this ifdef and just use GetTypeInfo all of the time\n. Not sure we want to hardcode this. \n. Why doesn't this use Path.Combine?\n. Maybe log a warning if it did fail?\n. Why?\n. Where is this specified?\n. Why a URI? We have a version of this that does that under the covers no?\n. Maybe update the helper to allow the passing in the slash char\n. This logic isn't right. Create a ProjectResolver using the projectPath and rootPath and use TryGetProject\n. For testing?\n. We never format _anything like this. Use the default formatting (ctrl+k, ctrl+d)\n. This is a first class property now\n. You should be able to skip projects right here.\n. Move this into a sake function\n. Need to make sure this logic is solid\n. Regen in the file from scratch? do you need all of this logic? Just Generate the new file completely erase anything that was there before every time.\n. Yes we want to be using the same logic to find projects, everywhere. The root directory should also always be resolved from the project directory.\n. Calculate the rootDir from the project directory instead of assuming it's the same for all projects.\n. Not sure you want to use the for all properties. What happens when we need to update something?\n. Say I run kpm wrap after changing a dependency, this will never update it and that's bad. You don't know the difference between user edited and kpm generated.\n. Put this in a try finally so it always gets cleaned up?\n. Why would this be null? Should we log something?\n. string.format looks cleaner\n. BuildRuntime\n. SDK projects\n. Why aren't we just updating this file everytime? Why do we need the timestamp in a comment? We have source control :smile: \n. This looks way too complicated. \n. This isn't contract deps anymore right? Its everything\n. Should this be sh?\n. Should we have an overload that does the string formatting built in?\n. IProject?\n. Ewww\n. This isn't required since it's supposed to be a shared project and a build time dependency.\n. This is supposed to be a build time dependency.\n. Why aren't you using  Runtime.Project.ProjectFileName?\n. Do all of the other projects have this?\n. Shouldn't this be in the _applictionHostContext itself? Did you run build verify? Is this only a runtime thing?\n. Maybe this should be project name instead of project path.\n. Why doesn't this logic run in both cases?\n. Ah, but don't you have to ensure that the project folder is in the search paths?\n. Warning?\n. Let's revert these\n. Add a check for null here. Also put the caching back\n. Revert this\n. Revert this\n. Why do you need this?\n. This should shared code? Isn't this used by multiple projects?\n. This isn't required anymore.\n. This isn't right\n. What?\n. Express is a bad name. Order?\n. Yes, maybe IsLocal or IsHttp (and do the negation)\n. Don't need this, it's the default value.\n. I merged it in already .\n. Will do\n. Nah, this is still useful since is separates the http and non http in a clean way.\n. Do we really need this if it's only ever used in 1 place?\nif(process.ExitCode != 0) {\nIt's not like that value ever changes...\n. Why is this --coreclr? and not --runtime?\n. This doesn't look right...\n. Neither does this. We shouldn't have to special case target frameworks. Why do you need any of this?\n. It should totally be runtime. The flag in kvm is -r aka --runtime the flag in kpm pack is also --runtime. Of of the values of the -r flag on kvm is CoreCLR\n. This is going to need to change when we support v3 feeds\n. Why is this part of this change? Can somebody check this in separately?\n. Maybe IPackageFeed should have a similar property?\nC#\npublic interface IPackageFeed\n{\n     bool IsHttp { get; }\n     ...\n}\nOr possibly expose the source as a property:\nC#\npublic interface IPackageFeed\n{\n    string Source { get; }\n    ...\n}\nThen this logic becomes:\nC#\nprivate static bool IsHttpSource(IPackageFeed source)\n{\n    return source.Source.StartsWith(\"http://\", StringCompareOptions.IgnoreCase) || \n           source.Source.StartsWith(\"https://\", StringCompareOptions.IgnoreCase);\n}\n. Build is still a better verb to use.\n. Does this PR need an update then?\n. Passing in this static doesn't look right. Why not flow it properly?\n. The only problem is that hosts like helios can't decipher anything if we don't return specific exit codes. Printing to the console is useless in that scenario.\n. Sure, as long as we don't regress the existing behavior I'm fine with that. \n. I don't like this ehhhh\n. We should parallelize this. File an issue for that.\n. This file has wayy too many classes.\n. Needs more var. \n. var?\n. is this still relevant? /cc @anurse @loudej \n. Add spaces between these all over. I mean between the } and if\n``` c#\nif (...)\n{\n}\nif (...)\n{\n}\n``\n. Did we have a message before?\n. Why not make the caller do this? If you have a source file can't you just get the text? (if)\n. Maybe we should remote the unformatted messages? This means in VS right now we won't get the same nice error page in helios\n. Is there a secure equivalent here?\n. What happens when I doklr .. Do we even need this logic anymore?\n. Awesome!\n. Unit tests shouldn't touch the disk, this looks like a functional test, put it in that assembly.\n. Why is this tabbed?\n. Do you use the GAC on CoreCLR as well?\n. 3?\n. Why do you leave out projects?\n. formatting =>  });\n. Parsing project library needs different logic? Why? \n. Nuke this\n. Nuke the tree code\n. It's really just clr\n. Looks like a bug. Anything managed should be kproj. Anything else is native \n. +1,DOTNET_OPTIONS`\n. Also we should simplify this script now. It's:\ndotnet \"%~dp0lib\\Microsoft.Framework.PackageManager.dll\" %*\n. This shouldn't be an extension method.\n. Fix the formatting\n. This was supposed to go into ResolveAssemblyFilePath\n. Great!\n. library.Name? Instead of ToString()\n. For the order by\n. Is this still required?\n. Extra space\n. I'd put this on multiple lines:\n``` C#\nprivate bool VisitLibrary(IGraphNode node, \n                          IEnumerable> ancestors, \n                          ISet visitedLibraries, \n                          ISet assemblies)\n{\n}\n``\n. We shouldn't have to set this anymore\n.Exec(dotnet, helloWorld + \" run\");. assemblyWalker\n. DOTNET_TRACE\n. DOTNET_TRACE\n. DOTNET_TRACE\n. Whats the exit code in this case? non 0?\n. Did the call context thing not work?\n. I don't like it. I'm playing around with it now.\n. not yet\n. Why aren't you using the project's object model to check for the bin path?\n.RUNTIME_MONO_BINetc, we shouldn't have to rename this again.\n. This makefile needs constants for klr and kre\n. constants\n. Add something forklrin here. That shouldn't be hardcoded anywhere.\n. Also add something for.k. Too many names hardcoded in this file. We need something forklrandkre. See my comments on EnvironmentNames\n. Constants?\n. don't hard codekre`\n. don't hard code\n. RUNTIME_TARGET_OS?\n. formatting\n. I think it's possible to generate this too. You can pass name value pairs to nuget.exe with the tokens you want to replace with. Might be worth seeing if that works here.\n. feels like these scripts should be have find replace tokens __RUNTIME_NAME_ and when we build then we would replace those tokens with the name.\n. formatting is still wrong\n. I don't think any code should be depending on this. Can we remove it?\n. Do this in a more optimized way:\nC#\nvar candidate = Path.Combine(di.FullName, GlobalSettings.GlobalFileName);\nif (File.Exists(candidate))\n{\n  return di.FullName;\n}\n. Lets add an extension method, ValueAsArray:\nC#\nscript.Value.Select(s => s.Value<string>()).ToArray()\nC#\nscript.ValueAsArray<string>()\nYou can have an overload that takes a property name as well:\nC#\nfoo[\"something\"]?.ValueAsArray<string>()\n. And use it everywhere there's a ToObject<string[]>\n. This can be C# 6 ized:\nC#\ntoken?[name]?.Value<T>() ?? default(T)\nNinjaaaaa\n. When would this throw?\n. Why this change?\n. Why not type it as JObject?\n. ValueAsArray()\n. BlockedCommandNames\n. We need to do real OS checks for things like this. \n. Nix?\n. I kinda prefer the flat list as it's clearer and easier to understand. @ChengTian is there anything we can't represent this way?\n. I'm not sure why you want to optimize the tests. Is it really just doing sort and Equal?\nC#\nEnumerable.Equals(collection1.OrderBy(...), collection2.OrderBy(...))\n. We should (in another change) move away from the json format and move to the flat list.\n. More linq?\n. ? Update your VS\n. self? This isn't python, it should be matcher\n. Why do you need this as well as the extension methods?\n. Why the change in formatting?\n. Keep the namespace the same as globbing. Microsoft.Framework.FileSystemGlobbing\n. Why not make this IEnumerable<string>?\n. Call Path.GetFullPath?\n. We just need to figure out why this is needed\n. I think this can go away now as there's a new method that @Praburaj added that handles this for generic <T>\n. Revert this, @Praburaj made this change for performance reasons.\n. Exactly, more linq\n. I'm not sure we shud be caching the load context\n. RegisterPlugin\n. UnregisterPlugin\n. thats not how you spell absolute\n. Neither is this :smile: : \n. This change isn't good enough. Take a look at the performance branch. It avoids any disk IO in the most common case.\n. if versionIindex != -1\n. @lodejard We're going to.\n. Use framework, not the identifier\n. HideDependents?\n. --hide-dependents\n. That's a poor description\n. I don't think you can remove these yet.\n. Yah this kinda sucks /cc @BillHiebert \n. Feels like this belongs in the globbing package\n. Use the framework, not just the identifier\n. hideDependents\n. string.IsNullOrEmpty\n. Result libraries doesn't look nice. Sick to libraries referenced by the project\n. Undo this\n. Don't we have a place that has the other extension method ValueAsArray<T> put this there\n. Scratch that, carry on.\n. Do you still need this?\n. Not now. This is being reworked and nobody depends on the runtime anyways \n. We have PathUtility already. Add that there instead\n. Why did you have to add this? Don't get it transitively  via Microsoft.Framework.Runtime?\n. Get rid of this code and use shared code with kpm build.\n. Can you not format unrelated files :smile: ?\n. Why are you parsing this instead of just newing it up?\n. Remove the else\n. invert the logic, it makes it clearer.\n. Code defensively here. Use TryParse and verify that the value isn't null.\n. Do it in a stand alone pull request after.\n. Get the latest changes. \n. Fix your VS settings\n. Undo\n. The preprocessor makes stuff internalized.\n. We need this PR (https://github.com/aspnet/XRE/pull/1240) to accurately get project information. Right now the application base gives you information about the environment the compile was run from:\nA -> B\nIf you k run in A's directory and you end up compiling B, the IApplicationEnvironment will be for A instead of B.\n/cc @pranavkm We need to do the same in Mvc\n. No, it needs to be left out for now.\n. It wont be removed. I can add configurations \n. Yar\n. Nah. I want to give the user a chance to change it before loading. I don't see how you can avoid the double emit.\n. This variable was renamed. Nothing has changed \n. Uh...really? Ssh ftw?\n. Ah then I don't care\n. @anurse it's on codeplex..... nuff said :stuck_out_tongue_closed_eyes: \n. Can we put this code in a project so that we get an editor experience around it?\n. Nooo, this needs to read the lock file.\n. The sha files are still on disk on the packages cache.\n. Keep this.\n. Revert this. There should be no sha creation in the runtime.\n. Yep, you're right. We need to keep them on disk for the package cache. The runtime however should never read anything from disk. Instead the lock file should have the sha.\n. Why?\n. Lets bring this back.\n. Lets bring this back\n. Nuke this as well.\n. Instead of throwing this, use the https://github.com/aspnet/XRE/blob/dev/src/Microsoft.Framework.Runtime/FileFormatException.cs\n. Why do you catch the exception here? The exception text also isn't clear.\n. Is this right and OS agnostic?\n. I think we need builtins for compile as well. Possible for most of it /cc @lodejard \n. Nuke\n. We should find a way to share this\n. Some of these things are build time dependencies.\n. extra space\n. What happens when this fails?\n. It actually is.\n. This isn't that, this is a fullPath. So you need to convert both slashes to /.\n. distinct?\n. Why is this exposed? Testing?\n. PatternGroup\n. Just for this one? The others are all fine?\n. Create a type for this, this is ugly and it needs to be back ported to NuGet.ProjectModel /cc @anurse \n. Add a test that does:\nJSON\n{\n  \"compile\": [\"**/*.cs\"]\n}\n. GetPathWithForwardSlashes\n. This method is private\n. Contains takes a string\n. Check for null project, make sure there;s no null ref.\n. Add some comments.\n. Project.GetTargetFrameworks() gets called twice and we do ToDictionary for a pretty small number of frameworks.\n. Remove\n. We already added a --debug flag to klr.exe which will be the way to run this eventually.\n. I would avoid this IO completely and fail the first time you go to lookup a project. Anything preemptive is bad.\n. This isn't right.\n. This also isn't right. Nuke it.\n. I'm pretty sure this used to be on the outside. Did you change that?\n. Look at the existing FrameworkReferenceResolver, optimizations were made to avoid this in the most common cases.\n. Put this elsewhere, like a utility class.\n. This shouldn't be part of the runtime host. We need to separate the runtime from the ability to wire up the dependency providers and get information about the project closure.\n. If this class is used for wiring up loaders as well then we'll need to split out the dependency resolution pieces. Maybe it won't be that much.\n. The order is wrong:\n- Project\n- NuGet (lock file)\n- Reference\n- GAC\n. Execute sounds better\n. formatting !!!!!!!!!!\n. Ah\n. Update this file.\n. Nuke this\n. spacing\n. Ugh, noooo. We need to decoupled from the logging implementation and write our own. That's part of the Logging API review\n. What? TryResovleSpec can return true and packageSpec can be null?\n. Does this override what was specified?\n. We'll get more specific here in the future\n. formatting. That vim plugin sucks :stuck_out_tongue_closed_eyes: \n. What's the purpose of having 3 of these representations around?\n. You're right, Vim is awesome\n. Revert this\n. @victorhurdugaci you gotta fix this :smile: \n. Not sure about this. What does this affect?\n. We can do this in a not so hardcoded way since we have 1:1 mappings with desktop now. Instead of hardcoding 4.5.1.\nhttps://github.com/aspnet/XRE/blob/anurse/tfm-rename/src/Microsoft.Framework.Runtime/FrameworkReferenceResolver.cs#L236\n. You need to update mono aliases\n. Your if statements not having spaces kills kittens.\n. Not quite. This is \"DNX \"+ targetFramework.Version\n. We'll need to expand this eventually.\n. File a bug?\n. Sure, but what parts of the system get affected? What happens when you kpm build and have both frameworks? What happens if you kpm build and have aspnetcore50? Does it translate into dnxcore50?\n. These changes will break the C++ build. We need to update dnx.vcxproj. While we're at it, lets just call it what it really is:\n- coreclr\n- clr\nWe should change the property to Runtime=CLR and Runtime=CoreCLR\n. bring this back\n. Take out everything but windows. We won't be using vcxproj to build anything but windows \n. The lock file hard codes \\\n. No tabs :smile: \n. Remove this\n. BTW, we don't call the file .sh anywhere else. We should remove that. kpm bundle today makes foo.cmd and foo.\n. Usings are unsorted.\n. Nahhh\n. This is in the wrong place. It should be in the resolver.\n. This should be in the bootstrapper.\n. This class is just a nice model over the C:\\Program Files (x86)\\Reference Assemblies\\Microsoft \n. Spacing\n. Why does this get the entire lock file instead of a list of libraries?\n. You can remove the .ToString()\n. This as well.\n. Why isn't this always 5.0?\n. It might make sense to just have a single method on here to force the fact that the runtime has no dependencies on NuGet per set.\n. You can even store the group resolved during the graph walk so you don't have to do it more than once per package.\n. ?\n. ?\n. Ahh caching!\n. Instead of fixing it here. Change the thing fix it this in the project class itself.\n. Return something readonly as well. Yep, not many people call this right?\n. Hashset?\n. I was about to comment and saw this :smile: \n. agreed\n. Do you need to actually do something for all of these types of messages? That doesn't seem right. You only need to do work if there is a plugin registered.\n. I'm not worried about the verbosity of the if statement. I'm not sure this is correct. No work should happen if a plugin is never registered.\n. Get rid of this one.\n. Yep, we'll cross that bridge when we get to it. We're aware of the limitation.\n. Change these all back.\n. Hmm, this isnt right either. The GAC is the only one that only works on desktop.\n. Trim this to the minimal things needed.\n. readonly?\n. Make this look clearer. Split up the declaration a bit.\n. Why is the parameter defaultValue instead of minimumValue?\n. This name isn't good. IsPackage?\n. What is this?\n. IList\n. IList\n. This is in the wrong place\n. Can we do this somewhere else?\n. Current makes it sounds like there's more than one. Get rid of this altogether.\n. Just use a list.\n. AddBreadcrumb?\n. Just loop over the list and mark each one. The clear it.\n. Use the thread pool instead of making a dedicated thread.\n. Everything else is IList for several reasons. Mostly so that we ensure that we force evaluation.\n. TraceError\n. If we actually want the process to wait until breadcrumbs are written then we need to use a normal thread :cry: \n. Add an environment variable that makes this NOOP. I want to disable this when I'm running performance tests.\n. Leave the ThreadPool.QueueUserWorkItem it's fine.\n. Publish\n. That was one of those leading questions. Use that flag to represent both cases.\n. This looks bizarre. Can you make this Console.WriteLine\n. Import the namespace.\n. You can avoid ToList here\n. .Count\n. Why do you check protocol version twice?\n. Store this in a variable instead of doing it inline. Also pass ProtocolVersion instead of _protocolVersion\n. +1\n. Did you update helios too?\n. Check with @danroth27 on this name.\n. This part of the code shouldn't know anything about resource providers.\n. Needs more var\n. Also defer this until it's called.\n. This isn't right. There should be 2 default resource patterns. This array should have:\npublic static readonly string[] DefaultResourcesPatterns = new[] { @\"compiler/resources/**/*\", \"**/*.resx\" };\n. Wrong sort order. Re configure your VS\n. This should be a singleton, created once ever since it's stateless.\n. StreamFactory?\n. Sort usings properly across the board.\n. Yes, lets just handle .resx, wtf is restext\n. Ah missed the code below that handles this.\n. string.Equals\n. spacing!\n. uppercase? Fix this since you're changing it\n. +1\n. +1\n. Formatting :smile:, isn't this a dependency of MFR anyways? Why do you need to add it?\n. I think we'll end up nuking this interface when we expose project properties as a dictionary. This will end up being a straight POCO in .Interfaces.\n. Not sure this should be an interface.\n. What?\n. System?\n. ?\n. change the variable name\n. Needs moar ?.\nreturn Version?.ToString()\n. Path.GetFullPath?\n. I meant instead of this entire line\n. ^\n. Ye do, it never worked and it really should work somehow :smile: \n. Why is xml here?\n. ?\n. Is this going to create a path that I can't erase?\n. Nah. Just use Version.Parse and let that throw.\n. Why to ToString and new Verison right underneath? If you're defaulting to the project.Version then just assign it directly.\n. You should be able to remove this\n. spacing\n. Why not just add the syntax trees inline instead of having a bool? You can't have more than one of those attributes anyways.\n. This logic can be removed. It was an example of other diagnostics we can add.\n. Look at all of the other variables. Follow the pattern bro :small_blue_diamond: \n. Then at least fix the formatting in the file :smile: \n. I marked them in this change\n. It actually is supported\n. Dont' short circuit.\n. .Distinct(CreateAComparerForICompilationMessage)\n. Not probably :smile: \n. Why is this path?\n. We'll ifdef then\n. sounds good\n. lolz\n. Why include it?\n. Can we do this once and pass it around so we can centralize the ifdefs\n. How do these error show up in the command line?\n. function -> export\n. ? Remind me. Is this static linking?\n. @jhawk42 Can you recall why we changed this in the first place? \n. Identity can obviously never be null right?\n. Can you write a test for this?\n. So you made my beautiful 1 liner more verbose why? :smile: \n. @ellismg Can we fix this :smile: \n. Yes, fix it please, or move the logic elsewhere.\n. This isn't right. It should be flavor and it should say what CLR you're running on not what framework.\n. Bring this back.\n. Nope, this doesn't work. Copy the code from kestrel\n. Make it IList<IMetadataReference> like everything else on the context\n. Same comment as above\n. Nope, just follow the convention on the current interface for now. We're going to make other changes later.\n. Yep. Like I said, @victorhurdugaci we need to use uname instead of relying on Environment.OSVersion where possible.\n. cool like in the 90s\n. That's ok, we should revert this anyways.\n. Not sure you need both. It should just flow from the host.\n. RuntimeFlavor not framework.\n. RuntimeArchitecture\n. Yep sure.\n. Maybe explicit and call it ClrFlavor? ClrType ? \n. Lets make this a string\n. string.Equals\n. Call this NativeMethods\n. Leave it null\n. Architecture\n. RuntimeType\n. Add one more thing to this. RuntimeVersion\n. zomg \n. Do this lazily, we should never need to do reflection if nobody asks for it.\n. does this still need to be unsafe? \n. See I was looking around for examples of this and couldn't find anything consistent. Lets say you have a method that takes a type Foo as an argument:\n``` C#\n/// \n/// Makes a  from a .\n/// \n/// The  to transfrom.\n///  The transformed .\npublic Bar MakeFoo(Foo foo)\n{\n}\n```\nNot sure you need to repeat the cref in the param and returns...\n. I copy and pasted that from MSDN :smile: \n. It's the default not the current.\n. Sure.\n. Requests. \n. Nice\n. For now.\n. Nah, thats copied from msdn\n. On second thought, the msdn version sounds awful.\n. Nah, default is one thing you can access\n. Active?\n. Remove dead code?\n. Why isn;t this using get nearest?\n. This isn't right. This list is only for the invocation itself.\n. This probably also shouldn't exist but I understand why it's there.\n. This type should still exist.\n. Use theories instead and add some tests that handle windows style paths.\n. Try to avoid random formatting changes in pull requests. It distracts from the actual change.\n. Noooo, get rid of this and stop using CallContextServiceLocator everywhere :smile: \n. This check is wrong :smile: \n. Use IRuntimeEnvironment in place of PlatformHelper\n. skip mono as well.\n. Why did you remove the other conditional?\n. Change IProjectContext to be a Poco as well.\n. flag?\n. Use 2.\n. Nobody cares about your hacky change @anurse . Fix your shell :stuck_out_tongue: \n. Why?\n. What is in that package?\n. Ok we need to rename the bool. useConsoleColor\n. No this logic needs to be special for wrap.\n. Yes it handles nulls\n. Path.Combine does alot of work. I'll do this in another PR, when the Files node gets read from the lock file, it does some path resolution and that might have a ripple effect on other parts of the code. This was tested and works.\nI'll take a look at the other part later.\n. .DLL :smile: \n. Thats fine, we absolutely don't care about those. Find me a nuget package that has that :stuck_out_tongue_closed_eyes: \n. Why do this loop twice? Why not do it in the condition below.\n. Put the code in here. Change this to:\nvar unresolved = _applicationHostContext.DependencyWalker.Libraries.Where(l => !l.Resolved);\nif (unresolved.Any())\n{\n      if (unresolved.Any(l => string.Equals(l.Identity.Name, Project.Name)))\n      {\n           ... show new error ...\n      }\n      else\n      {\n            ... show error ...\n      }\n}\n. This error also isn't good enough. We need to tell people what runnable target frameworks are in their project.json and how they can potentially fix it. We can also use the IRuntimeEnvironment to show what DNX was invoked and tell the user which one should be invoked.\nSomething like:\n```\n'Project' doesn't support the current runtime target framework 'DNX Version=4.5.1 (dnx451)'.\nRuntime Target Framework: 'DNXCore Version=5.0'\nCLR: CoreCLR\nBitness: x86\nPlease run 'dnvm use {runtime version} -r clr' and try again.\n```\n/cc @Eilon @tdykstra here for help on the error message.\n. Use string interpolation.\n. Except in helios when you see this message it wont make any sense.\n. I'm ok coupling dnvm but not web.config with respect to error messages. Helios does have its own bootstrapper logic so maybe we can put that message there if things fail.\n. Why is this public?\n. SP?\n. What's up with the inconsistent casing?\n. Yes plz.\n. Lets avoid dictionaries for simple things like this\n. Do we make sure this file is always deleted?\n. I think you should move the old lock file reader writer logic as a whole to the PackageManager and create a copy of the writer (unshared) in the runtime itself. The PackageManager needs to read the lock file as well but it can use the normal JSON.NET stuff.\n. This is pretty gross, I'd get rid of it. We don't call this from multiple threads but it looks kinda messy.\n. What's up with this change? I'd make it so that this thing is never null. I know it's test for the parser but it really has nothing to do with the change.\n. :clap: \n. single quotes break?\n. Any reason this code is duplicated?\n. Also can't this fail sometimes? Can it ever fail?\n. The project name '{name}' is ambiguous between the following projects\n. This code paths runs every time somebody asks for a project. Checking the existence is why ProjectInformation.Project is lazy and only ever runs once.\n. string.IsNullOrEmpty(dependencyVersionAsString.Value)\n. This change is wrong. The path separation on non windows oses is ':' thats why we use the Path separator. Can you give an example or where things went wrong.\n. This is also pretty terrible. Try catch swallow. Better to fix things properly.\n. formatting is off here\n. Feels like this should be internal or in the common folder instead of in abstractions.\n. bizzare\n. Throwing exceptions during build is no good.\n. Why would dnu list throw an exception?\n. Get rid of the TODO\n. dnx.onecore.coreclr\ndnx.win32.coreclr\n. Does it really need to be a version instead of being a number?\n. int\n. dead code?\n. Remove everything except System.Runtime\n. Are you sure about that? Is that true on other OSes?\n. Also make sure it's uppercase.\n. I think this it will be forever, and that's a bad reason to have inconsistent casing. Please make it uppercase DNX_\n. Tuple represents the min version?\n. I think we need to test the inverse as well. Where the project is portable and the package is core50.\n. Inconsistent casing?\n. How does the exception escape to the console?\n. implicit implementation\n. tabs?\n. We should remove this and port your logic that just replaces net4x with dnx4x\n. sort usings\n. If we could avoid making the file at all in that case it would be better but not if the code gets nasty :smile: \n. It's a GetOrAdd style API, that's what the lambda is for.\n. This is fine for now. I guess we don't really need to cache the ProjectLoader and NuGetLoader because they are mostly stateless.\n. Caching didn't break it, calling Create with the wrong service provider broke it.\nThis was the old code:\nreturn GetRuntimeFactory(serviceProvider).Create(serviceProvider);\nThe new code calls create with the correct service provider.\n. Remove this\n. This doesn't look correct. The method returns a Task<int> already, why not just cast?\n. Add it to ISettings or expose Settings as Settings.\n. CapVersion?\n. That's the wrong directory. Use the project directory of the compilation context\n. This entire strong naming code path also needs to be skipped on mono.\n. You can fake sign on any platform if no key is provided and delay sign is true. We should also support that.\n. formatting\n. Why not just always set the strong name?\n. Too many short names here. Repository is ok to type :smile: \n. Some comments here about why this is trying to manipulate the path would be good.\n. GetAwaiter().GetResult() instead of Wait()\n. You're not using timeoutMilliseconds I would also just change it to be a TimeSpan\n. Why is semaphore uppercase S?\n. What does this do and what did { 0 } do before?\n. Don't test this. I don't want unit tests setting environment variables.\n. Remove this.\n. message?.\n. This should never be null. You might want to log something if it is\n. Is there a WaitAsync? or is it all blocking?\n. We're doing the real change in release and dev\n. Why is this special?\n. Meaning you don't want to fail and retry right?\n. Sure, I was confirming not pushing back.\n. We to ToLowerInvariant on both id and version twice.\n. Why is this opening the nupkg stream?\n. That's not right for the V3 feed. The Nuspec is downloadable without getting the nupkg.\n. Shouldn't this be multiple path_combine calls? \n. Yea that might be cleaner\n. Random?\n. ohh new C++ features :smile: \n. spacing\n. Why?\n. Can we unify these in this change as well?\n. back twice? I guess it doesn't really matter but you could store the result.\n. isn't pfn more idomatic?\n. Not a fan of long lines like this. I prefer to put the flags in a local.\n. Remove dead code\n. Add a TryAdd on ServiceProvider\n. Check if the file is a project before calling this.\n. string interpolaton\n. Add the comment and add an initialize method that sets it up once instead of all the lazy crazyness\n. Please measure the performance impact on the startup time with this new code before checking it in.\n. I would avoid all LINQ here and just do the obvious thing.\n. Make sure this doesn't throw if there isn't a lock file\n. Add support for all known .NET framework versions. .NET 4.5 .NET 4.5.1, .NET 4.5.2 .NET 4.6\n. spacing\n. It is and we need really good tests for this before we commit it.\n. Don't throw exceptions from command line tools. It looks bad :smile: . I'm also not sure if we should fail up front here. Maybe we can just warn about unknown frameworks during restore.\n. I'm not sure this one is corect\n. Why did you declare a variable?\n. Do we call GetModuleDirectory anywhere else? If we do can we pass it into the method?\n. You don't need to ToString() version\n. Don't use Desktop CLR, use .NET Framework or CLR\n. Don't use optional parameters.\n. Avoid random changes like these, it adds noise to the review.\n. Where are the Fact attributes?\n. Get rid of all of this code.\n. MSBuild exists on windows and since it shells out it will work with CoreCLR on windows. \n. Cleaner\n. I wouldn't do this. I think you just need to detect . as a dll and then remove it from compile items if it is . /cc @anurse \n. Do we need this?\n. This was copied from NuGet right?\n. Any reason you don't use string interpolation here?\n. Ye we should nuke this.\n. Do we really need this check at runtime?\n. Use the runtime helper for everything, not just for DNXCORE50\n. Add the mono check as well (mono on windows should fail)\n. Make this Lazy<IRuntimeEnvironment>\n. That's interesting. We should think about that.\n. Private classes always go to the bottom of the file.\n. Why do you reset it?\n. How many different places do we have this logic\n. readonly\n. readonly\n. Case sensitive or not?\n. By invalidating this\n. I don't think this is coming back. \n. This is obviously a mistake.\n. I think it's worth breaking this type apart since you're doing all of these other changes. Basically anything with LibraryExport move to another type in Microsoft.Framework.Compilation.Abstractions\n. Move this type to a shared project in the runtime. It'll come in handy\n. Since we're renaming this whole type, lets change this name as well to Assemblies. We might also want to expose the paths to the assemblies. Lets discuss this as part of this change.\n. You're not actually hardcoding a temp directory right?  Why isn't this random?\n. Is it possible that the folder can be normalized but the sha file and nupkg inside isn't or that that not possible\n. In general, we try to expose a consistent facade over whatever the runtime provides. In this case I think it's fine to use AppDomain.CurrentDomain.Get/SetData, similarly to how we use LogicalCallContext to implement certain features on .NET Framework. Last I heard, the CLR team were thinking about adding a general bag of things just like AppDomain.Get/SetData and I think if that were available, we'd use it.\n/cc @jkotas \n. c++? Since when do we use _\n. We should be avoiding array allocation where possible.\n. What is this and why isn't it a DnuFolderPath?\n. Where is this used?\n. It's overkill. This thing is rarely used. ConcurrentDictionary only makes sense in specific scenarios.\n. This doesn't look right. Why isn't it directory returning the NuGet/Config folder.\n. Make this a method\n. Why is this exposed as a property?\n. Yes please :smile: \n. Move it to a shared project in Common\n. Again. Did you file a bug to look at all of the places that do this so we can unify the logic??\n. Why are there changes here?\n. We need to cover more cases here:\n- Current directory:\ndnx run\n- Explcit --appbase:\ndnx --appbase {path} Microsoft.Framework.ApplicationHost run\n- Specified path implicit ApplicationHost\ndnx --project {path} run\n- Legacy\ndnx . run\n. string interpolation\n. You totally should though\n. Internal?\n. Why not use Uri.TryCreate instead?\n. Ugh, lets not invent new formatting. We don't do this anywhere else.\n. Formatting\n. Remove to ToString() from version. It's no needed\n. /cc @moozzyk @BrennanConroy We need to clean up the env variable thing. This is added to the cruft :smile: \n. We need to fix this. It's ugly as ... /cc @madskristensen \n. JSON\n. I think you missed the point of this thing. Andrew pretty much summed it up https://github.com/aspnet/dnx/pull/2359#discussion_r35613141\n. ?\n. Use GetNearest instead of TryGetCompatibleItems\n. Remove the restore check. We'll do an all up diagnostic change in restore.\n. Prefer the old names. The exporter is providing exports, not actually exporting anything as a verb.\n. I know the invalid path check isn;t new but why are we doing it?\n. Non build time?\n. Why?\n. Remove\n. Weird\n. Why do this every time instead of doing it once?\n. this is super ugly\n. Use a named parameter for boolean fields.\n. Can you add a comment that calls out the search paths in both cases (with and without a culture?)\n. This code needs to be heavily tested. It doesn't belong in the roslyn specific code. It's generic logic that should be tested in isolated and used by the roslyn compiler (or somehow merged into ResourceDescriptor)\n. Use named parameters when passing booleans\n. Can you describe the file patterns being searched for and the new target locations?\n. In a comment in the code :smile: \n. Why is this check only for project loading?\n. .Count not .Count()\n. Not just the name the fact that the ICompilationSession has a Load on it. I don't get the design.\n. Why not have 2 lists instead of the crazy inheritance?\n. This logic should match https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Runtime/DependencyManagement/ProjectReferenceDependencyProvider.cs#L47. \n. You don't have to add the magic references by default though. That part can be skipped.\n. Remove this?\n. We can discuss the overall parts today in person. I need some lines and boxes.\n. What?\n. Null this out in initialize so the memory is freed.\n. Why do we need both? I don't trust that this won't be misused at runtime reducing the performance.\n. Why not just make the lookup based on id and version?\n. Can this ever throw?\n. Ok lets remove it.\n. Who calls this?\n. Why do you need OfType?\n. Why is this an error? This regresses existing behavior\n. targetFrameworkInfo\nIt can't be null\n. This can't be null either\n. Does this handle framework assemblies?\n. Why are you doing this?\n. Why do we need so many dictionaries? We're going to need to do a serious review of all of our allocations because this looks like overkill.\n. We should never have cycles here. If we do then something has regressed. The cycle check happens during the graph walk\n. Remove Runtime.\n. uh why?\n. dead code\n. Remove the Runtime.\n. Everywhere Load is called?\n. Is this supposed to be a test?\n. I don't think we should check this in. We should have tests.\n. Why has this code changed at all?\n. Why is this dictionary concurrent?\n. This implementation just needs to create the dictionary up front mapping names to paths and nothing more. Do the computation in the ctor.\n. This is missing the global.json paths.\n. Concise? What about SuppressOutput?\n. SuppressOutput? We don't really want any output for restore during publish\n. _noErrorMessage\n. Not the paths to global.json, the paths declared inside of global.json\n. You  need some tests with the slashes in the opposite direction.\n. Also add file paths.\n. Add some tests that try to resolve 2 absolute paths\n. This is incorrect. This helpers is used in other places to normalize slashes in paths.\n. string.Equals?\n. !string.Equals?\n. Use Task.Run\n. Shouldn't be root.Operations.Copy\n. Change it to User-Agent anyways\n. formatting\n. This class doesn't have access to the Constants?\n. sort usings\n. VersionUtility.IsDesktop?\n. Do you have tests that verify this scenario?\n. Use this method https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Runtime/FrameworkReferenceResolver.cs#L141\n. What's the reason these are templated? It's pretty confusing\n. Remove this\n. Why are you setting DNX_TRACE=1 to get verbose output for debugging?\n. Or VersionUtility.NetFrameworkIdentifier\n. Ugh, no use the logic. We have it in other places https://github.com/aspnet/Testing/blob/f4a63f3fca870412d742b181d52aa7e52ec1d434/src/Microsoft.Dnx.TestHost.Client.Sources/TestHostWrapper.cs#L255\n. Any reason we aren't resuing the types in the DTH server itself?\n. We actually do allow that already. We should flow all the information to make sure it's possible. The only change here would be to support multiple versions of assemblies in the framework information assemblies right?\n. nuke this\n. Move this inside of the semaphore class.\n. Also, how big can this get? This for every file path touched during restore right? Have we tested MVC after deleting .dnx\\packages? We should remove the entry on dispose right?\n. Nooo, we need to move those helpers into a shared project.\n. Do we want to suppress the output here? Can this project potentially reference things that aren't in the local set of packages copied? \n. Remove System.Globalization\n. Where is this used?\n. When does this happen? Do you have a test for it?\n. So I'm thinking that we shouldn't call into ICompileModules for resource assemblies. I know it just another assembly but it feels like ICompileModules would just start to break (like ours) if we just started to call it multiple times when we have resource assemblies. Can you remove that piece?\n. I'm worried about functional failures. What happens if I never restore my project references to csproj? It actually seems like this can happen for other project.json projects as well.\n. Delete temp code?\n. Make sure this only runs on mac\n. Add a space here\n. Remove Servicing.\n. Formatting, these should be indented more.\n. Or:\n// C:\\HelloWorld\\bin\\fr-FR\\HelloWorld.resources.exe\n. Add method visibility\n. Do we have to compute this from the path again? Isn't there another indicator if we're compiling a resource assembly other than the name?\n. var\n. string.IsNullOrEmpty?\n. The formatting changed here? Add the space back\n. This method got super long. Move the resource generation part into another method.\n. +1 Maybe make a PackageSourceFactory and pass the cache in there?\n. Why is this code still using the AfterCompileContext even though, we're not calling the ICompileModule anymore\n. Why remove this?\n. version.Replace(\" \", \"\") that line isn't relevant?\n. Do all callers call an IList directly? If so change the input to list or array or something specific. This isn't a generic type that we want to expose to people is it?\n. Is there any reason to no merge this in with the existing project files collection?\n. Make 50 a constant.\n. No _ for constants\n. This should be non static and created once and passed around in the RestoreCommand\n. GetPackageFeed\n. Do you need to ifdef?\n. Add a note about mono and use string.Equals\n. Make a helper, IsNeutralResourceCulture and use it here and in the comparer. That method should have the comment about mono and the special case around neutral. Also use string.Equals.\n. Is there any reason that the result is ignored here? does that mean that errors don't show up when compiling the resource assembly? Can there be any errors?\n. Why is the formatting here off?\n. Why do you need to do this if the comparer is fixed?\n. Why is this passed in?\n. Parse all of this lazily\n. The dictionaries yes but not the default compiler options or target framework.\n. > Perhaps with the ProjectReader change we could make the amount of data loaded configurable and then only have dnu pack load this much but that seems like a larger change.\nI'll look into that. I was thinking of a runtime project but this might be a better option. Either that or make it all lazy.\n. I'd have to create the project after parsing everything. Which might be possible but I'd have to look.\n. What's the example of that?\n. That should work.\n. This is a new change\n. Move this to ProjectFilesCollection\n. Why have separate diagnostics? Why not add it to all diagnostics? Where they all get written in the same place.\n. spacing between ifs\n. There's a helper method in  PathUtility for this operation\n. Use string interpolation here\n. Remove the state parameter from the method. That'll make it clearer.\n. Use the helper here?\n. Uhhhhhh why is the cache in here at all?\n. I don't think this should be exposed and razor shouldn't be using it.\n. We shouldn't expose anything like this publicly. It's an implementation detail that shouldn't be exposed. Especially until we're sure of these values.\n. Move this to where the other sets of internal constants are.\n. You can unto the changes here :smile: \n. Only debug|win32?\n. All of the caching things. Why isn't this helper simple? Converts the metadata reference to a roslyn implementation and nothing more. That's the logic you are trying to commonize right?\n. ?\n. This will end up being wrong on certain distros right? I guess we're assuming that when @moozzyk makes the changes to flow the relevant information,  this will fix itself right?\n. Since you're changing this code, remove this.\n. Who owns the stream?\n. Why are you packing this manually? This isn't required.\n. We need to make sure we're using a specific version of the package so that this doesn't vary over time.\n. Uh nope.We should avoid deps like this for helper methods\n. File a bug for that\n. Nah it's used elsewhere.\n. We don't have verbose\n. Make this case insensitive \n. Make this internal\n. Use Contains\n. this will fail on mono\n. hardcoding / not cool, use Path.Combine\n. What's the substring(1) for?\n. Add a comment\n. Call it native libraries\n. Make sure this only happens for core clr only.\n. Did you test this @BrennanConroy ?\n. I'd rather always do it\n. Not for this PR\n. uhhh what? There's already _runtimeEnvironment\n. You may as well remove the caching. I don't think runtimeIndentifiers will be cached at all or was that the point?\n. This needs to go into the tooling project. I don't want anything from restore leaking into shared assets.\n. Why?\n. Errr can't we just set properties?\n. This is a subtle change. Why do you need it?\n. Do you still need this?\n. Do you still need this?\n. space between the IF\n. Instead of embedded, how about implicit\n. Why erase this and make the other trace verbose?\n. Instead of using linq why not just do the loop once and  exclude things in there?\n. ?\n. Is 50 enough?\n. De linq it.\n. Also one more thing, we need to not override this if people have already set it.\n. @moozzyk any clues?\n. @victorhurdugaci do we do this today?\n. By remove it you mean private right? \n. I'm just saying that because the caching will be ineffective if rids are passed in.\n. We so need this :smile: \n. What does this look like? Shouldnt it just show one? Multiple is just an artifact of fallback and shouldn't be displayed.\n. I like this change. It'll  allow us to remove the stupid skip lock file validation flag passed into here and it'll also help the caching situation in DTH.\n. There should be no changes to publish\n. Do we have a script for this?\n. Why not?\n. I don think we should do this at all. It's just a bad idea. Avoid it unless things actually start hanging.\n. if spacing\n. spaces between the ifs\n. This is default btw\n. Mistake?\n. yep\n. We can expand this as we add tests\n. yes leave it, this wil be the only one once we transition\n. clean up extra space\n. add space between methods\n. What is this for?\n. Don't we have this same filtering logic in dnu build/pack?\n. No, also this isn't new code.\n. No, FrameworkName is a .NET type.\n. dead code?\n. Fix System.Runtime.Versioning.FrameworkName that. Fix the namespace.\n. That's ok, we can make sure it holds in code reviews. This is the best way we know the get the test name.\n. Change this to Location\n. We should us IsMono for this one.\n. After it works :smile: \n. Yah, why are we calling Add\n. Yes please, add an optional bool\n. Why aren't we testing on CoreCLR?\n. This again?\n. diagnosticFrameworks? what?\n. Instead of IsWindows\n. Yes please\n. I don't think we do this elsewhere. We just run the script because it has the executable bit. We shouldn't be running bash.\n. This will also break on CoreCLR on linux/osx where we actually have a native executable.\n. This is a confusing condition. What's the deal here? Why run this test on mono at all?\n. Can we make a more first class way of getting specific message types out of the client API? This looks fragile.\n. I would split this up into different tests so the assertions are more clear. This could be a helper that takes the protocolVersion and the expectedProtocol version returned.\nDthStartup_ProtocolNegotiation(flavor, os, architecture, protocolVersion: 1, expectedProtocolVersion: 2);\n. Don't we have the logic for this in like 10 other places?\n. Do that.\n. Or just a sugar API so we can navigate the JSON object graph without all the ceremony and casting? It makes the test super hard to read and error prone.\n. Add the RuntimeVersion to the ApplicationHostContext, so we don't have to flow this thing everywhere.\n. This should be IsPackageBased. I actually made that change in my other refactoring.\n. Need more cases that show false,\ndotnet 5.1 -> net46, false Etc\n. _generationMappings\n. More defensive here. What happens if we don't map?\n. Consider using a BlockingCollection with a CancellationToken\n. Remove the timeout\n. Why are you deleting project.json?\n. for which framework? This isn't very nice. I think we should be asserting specific things. The order of the framework messages shouldnt' matter\n. Ok\n. Do you need to quote the path incase _sdkPath has spaces in it?\n. You don't need to enumerate the files. I'm not sure why we did that. The output is predictable (unless we change it..)\n. Same comment here about quoting arguments\n. Why do you have this?\n. Remove Timeout\n. don't use the ProtocolManager here. It feels weird that string literals are used in every other tests except this one.\n. Tricky test to write. Tests that rely on timeouts will slow down our build times.\n. Add an overload of SendPayload that does this empty object by default.\n. For a single project?\n. When we see the tests start failing them we can introduce timeouts.\n. Is that the best way to get the drive letter?\n. Path.GetPathRoot\n. Why are you turning this into a string and then back into a version?\n. Make this true by default.\n. We can avoid the 2 for loops and do the servicing and this in a single pass but that's not important right now.\n. maybe typeof(SomethingInThatAssembly).GetTypeInfo().Assembly.GetName().Name\n. This needs to be part of Equals\n. We need it but you can rename it if you want something like throw exceptions.\n. Yes please\n. Why do we need this?\n. Let's not use dynamic\n. We already resolve the root directory. Why not pass it in? I'd also measure the performance difference this additional file read adds. We already parse it to figure out the nuget packages folder if global.json exists.\n. Doesn't this get resolved elsewhere?\n. Does it break mono?\n. Why do we need this?\n. Let the CLR team handle this. We shouldn't be exposing this from our APIs\n. I didn't see the reply. We should remove it.\n. I believe that when travis passes :stuck_out_tongue_closed_eyes: \n. I agree with Anton. We need to have tests for everything we find. You already did all the had work getting the infrastructure setup to test dth .\n. You can delete this now.\n. Make it more realistic. The scenario is sdk version:\n{\n   \"sdk\": {\n        \"version\": \"1.0.0-beta7\"\n   }\n}\n. null instead of string.Empty\n. Blah, that kinda sucks but it's not the end of the world.\n. We shouldn't log this here if application host logs it. We should do it in Dnx.Host so it's consistent.\n. Why are we still setting this here?\n. spaces\n. Add portable-x+y+z or whatever it is we parse\n. Whut?\n. So I'm thinking we don't generate projects on the fly anymore. We can use the framework to put more projects in misc for each of the scenarios we care about but not during the test itself.\n. You need it. These packages still end up turning into dlls (unfortunately)\n. Logging. I assume? Nope, this is odd. Can you figure out why it's here @kichalla \n. @kichalla shouldn't disable anything. Lets keep this change isolated.\n. Who made it in the first place?\n. We shouldn't have it. Can you show what a log with DNX_TRACE looks like with ApplicationHost also?\n. And show mono, and desktop clr as well.\n. Wei!\n. What is this?\n. Ok\n. This code says: If you're Unresolved but Compatible then show the error:\nThe dependency x in project y does not support framework f\nThat doesn't make sense...\n. Not enough old code is removed. It's still evaluating runtime specs for each dependency and that's unnecessary.\n. omg\n. Should we just execute the batch file in the publish output? Would be a better test.\n. This looks pretty broken. How can mscorlib not be on the TPA list.\n. does this matter for the test?\n. File a todo to remove this logic because it isn't quite right. Results will end up varying between publish build and run. Basing publish on the lock file will resolve all of it.\n. @anurse you could actually use IRuntimeEnvironment to get the right runtime. You want the one currently being used as the driver for the tests.\n. We should pass this method the entire targetFramework and have it return false so we don't need to special case here.\n. What problems?\n. This should have an assert.\n. Nope, it just throws.\n. How about using the helper that already exists :smile:  https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Tooling/Utils/FileOperationUtils.cs#L20\n. clear-http-cache\n. Use dnx_dll_name here.\n. should be onecore\n. Don't check this in. I removed it in another commit. Something strange going on or we have different CoreCLR builds... Or something else is going on..\n. See https://github.com/aspnet/dnx/commit/b2445980bc5528bd066a260fccc2158d5f8406f3\n. Ugh. ok\n. https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Tooling/Utils/FileOperationUtils.cs#L15\nThere used to be logic that marked readonly files as not readonly I think.\n. You control the path but I thats fine :smile: \n. What happens here?\n. And here?\n. Edge case, this will fail if built using dnx run\n. It should only be read for mono since the actual application base can't be set to anything but the path where the entrypoint is.\n. Turn these into get only properties and remove the fields\n. Remove?\n. Remove this?\n. Remove this?\n. You're right, we parse it on the dnx command line...\n. Where do we include it?\n. I'm working on that for the httpplatformhandler so I'll remove this.\n. Remove dead code.\n. Don't hold onto this, assign to the properties once.\n. Doesn't this object need to implement equals?\n. You can get rid of this impl and do it in DTH\n. Just override equals.\n. Or set Name and version as 2 properties that aren't serialized\n. Also I'm pretty sure you don't need both FormattedMessage and Message\n. [JsonIgnore]\n. Or use LibraryIdentity?\n. Is this even required?\n. @anurse I said the same thing to @JunTaoLuo today!\n. Nuke it! :smile: \n. Don't we have an equivalent of this? @JunTaoLuo \n. Does this stop at the first unresolved package?\n. Culture is never null here right?\n. You tell me. If it's never null then maybe add a Debug.Assert\n. spaces\n. I think this is the wrong place for this code. It needs to go lower in the stack.\n. Here's where we print errors today:\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Host/RuntimeBootstrapper.cs#L27\nI think that we need to keep this as the only place that prints errors to stdout.\n. Or some extra data on exceptions that we throw\n. The using pattern is cleaner and makes it so that user code doesn't have to write try {}, finally{}\n. It could be another base class but it has to be implemented on CoreCLR and on CLR and all of the implementation is the same except for the fact that we don't track the LoadContext in the static.\n. allocte\n. Nope. This should never be called. The base class only calls this via assembly resolve. This is a pass through implementation.\n. Yep!\n. Nah, that type then has to be shared throughout the stack. Use the property bag on exception\n. Make this a hashset.\n. Why not just modify the LibraryDescription?\n. Use a different error code.\n. remove spaces\n. keep this and do a concat with the newly added diagnostic\n. Get rid of this helper and do it inline\n. Why do you need to do this?\n. These are in the wrong place.\n. Get rid of all helpers. Make all of the tests look the same.\n. Why do you need to copy the project twice?\n. Why can't you change the file in place?\n. > Because 1. Editing the json file is move complex; 2. Once we update the lock file format the test needs to be rebaseline.\nWe have checked in lock files? \nWhat are you editing?\n\nAnother reason. Once we have the replacement of fixture ready, we will still copy the project to a 3rd place and avoid editing the one copy reused across tests.\n Add a line note\n\nWhen we have that this test won't use a fixture.\n. Why don't we set the exit code anymore?\n. Hmmm where did 13 come from?\n. for loop not cool enough?\n. Why the 2 part type name?\n. formatting!\n. example?\n. Assert.Empty\n. We don't even need to overwrite arguments. I'll fix the tests.\n. Why?\n. Put it in wwwroot\n. oooooo :smile: \n. No tabs please.\n. 2 spaces not 4\n. When would you need to dive like this?\n. Ugh, not sure about this.\n. This is pretty weird...\n. That we need it. We should only be deleting things that exist in the lock file. All of this logic should be inverse.\n. What about windows 10?\n. That's pretty weird :smile: You can just check travis itself.\n. I don't see any checks for null or invalid values. What happens if the language is null or empty? same for copyright and description.\n. You can just restore the solution directory.\n. The result object has properties that allow you to find the output path without all of the Path.Combine\n. Add a comment here.\n. We should use System.Reflection.Metadata instead of using Assembly.Load. You can't load this assembly with the same name twice.\n. The result of pack has an output directory so there's no need to hard code this much path. This will also fail for other target frameworks.\n. What the hall is Handle () :smile: That's new to me \n. Yes, like all of our other tests and our source code :smile: \n. Nah, doesn't matter. If we found it then we should use it.\n. Sounds good.\n. Why this filter?\n. Maybe move this into a method.\n. use optional parameter syntax\n. This isn't right. Use the result object and the sdk object to get the appropriate output path. The target framework the test is being compiled with is irrelevant.\n. This needs a better test name\n. Nuke this\n. Unit test? make it null\n. This doesn't need to be static\n. Wtf is this :smile: \n. :smile: \n. pack not package\n. Wait what is this for? \n. Agreed. This is a simple POCO. Do it in the compilation options.\n. This looks wrong. This will fail depending on where you run the test from no?\n. any reason you're not using the xunit skip attributes we wrote\n. I assume you can do everything if not, then we suck :smile: \n. Is this actually testing the package? The reason I ask is because projects always win over packages unless you explicitly specific it's a package using the new feature @anurse worked on in beta8. (http://blogs.msdn.com/b/webdev/archive/2015/10/15/announcing-availability-of-asp-net-5-beta8.aspx)\n. Ugh can just use just the JObject API without looping over the thing...\n. casing\n. Why do you check for a null value? Why is that wrong?\n. No dice, no idea how to check\n. What value should I look for in PROCESSOR_ARCHITECTURE\n. https://github.com/aspnet/dnx/issues/3091\n. Some, some dont \n. Instead, can we parse the lock file and check locked:true?\n. nit: formatting\n. It's not like this code needs to be maintained :smile: \n. Extra set of eyes, plus following process :+1: \n. sort usings\n. fix the comments\n. these need to be true\n. bfs eh\n. ?\n. Weird that System.Buffers is in there.\n. ",
    "jhawk42": "running build.ps1 in powershell fails with :\nPS D:\\git\\KRuntime> .\\build.ps1\nDownloading NuGet.exe\nAttempting to build package from 'Microsoft.CodeAnalysis.CSharp.nuspec'.\nSuccessfully created package 'D:\\git\\KRuntime\\lib\\roslyn\\Microsoft.CodeAnalysis.CSharp.0.6.31123.2.nupkg'.\nAttempting to build package from 'Microsoft.CodeAnalysis.nuspec'.\nSuccessfully created package 'D:\\git\\KRuntime\\lib\\roslyn\\Microsoft.CodeAnalysis.0.6.31123.2.nupkg'.\nAttempting to build package from 'System.Collections.Immutable.nuspec'.\nSuccessfully created package 'D:\\git\\KRuntime\\lib\\roslyn\\System.Collections.Immutable.1.1.15.0.nupkg'.\nAttempting to build package from 'System.Reflection.Metadata.Ecma335.nuspec'.\nSuccessfully created package 'D:\\git\\KRuntime\\lib\\roslyn\\System.Reflection.Metadata.Ecma335.0.6.31123.2.nupkg'.\nAttempting to resolve dependency 'Microsoft.CodeAnalysis (\u2265 0.6.31123.2)'.\nInstalling 'Microsoft.CodeAnalysis 0.6.31123.2'.\nSuccessfully installed 'Microsoft.CodeAnalysis 0.6.31123.2'.\nInstalling 'Microsoft.CodeAnalysis.CSharp 0.6.31123.2'.\nSuccessfully installed 'Microsoft.CodeAnalysis.CSharp 0.6.31123.2'.\n'Microsoft.CodeAnalysis 0.6.31123.2' already installed.\nInstalling 'System.Collections.Immutable 1.1.15.0'.\nSuccessfully installed 'System.Collections.Immutable 1.1.15.0'.\nInstalling 'System.Reflection.Metadata.Ecma335 0.6.31123.2'.\nSuccessfully installed 'System.Reflection.Metadata.Ecma335 0.6.31123.2'.\nInstalling 'Owin 1.0'.\nSuccessfully installed 'Owin 1.0'.\nUnable to find version '2.1.0-rc1-21110-697-dev' of package 'Microsoft.Owin'.\nUnable to find version '2.1.0-rc1-21110-697-dev' of package 'Microsoft.Owin.Host.HttpListener'.\nUnable to find version '2.1.0-rc1-21110-697-dev' of package 'Microsoft.Owin.Hosting'.\nUnable to find version '2.1.0-rc1-21110-697-dev' of package 'Microsoft.Owin'.\nUnable to find version '2.1.0-rc1-21110-697-dev' of package 'Microsoft.Owin.Host.HttpListener'.\nUnable to find version '2.1.0-rc1-21110-697-dev' of package 'Microsoft.Owin.Hosting'.\nDomainManager.cs(30,23): warning CS0028: 'DomainManager.Main(char_, int, char_*)' has the wrong signature to be an entr\ny point [D:\\git\\KRuntime\\src\\klr.core45.managed\\klr.core45.managed.csproj]\nFileSystem\\FileWatcher.cs(148,29): warning CS0067: The event 'Microsoft.Net.Runtime.FileSystem.NoopWatcher.OnChanged' i\ns never used [D:\\git\\KRuntime\\src\\Microsoft.Net.Runtime\\Microsoft.Net.Runtime.csproj]\nC:\\Program Files (x86)\\MSBuild\\12.0\\bin\\Microsoft.Common.CurrentVersion.targets(1635,5): warning MSB3245: Could not res\nolve this reference. Could not locate the assembly \"Microsoft.Owin\". Check to make sure the assembly exists on disk. If\n this reference is required by your code, you may get compilation errors. [D:\\git\\KRuntime\\src\\Microsoft.Net.OwinHost\\M\nicrosoft.Net.OwinHost.csproj]\nC:\\Program Files (x86)\\MSBuild\\12.0\\bin\\Microsoft.Common.CurrentVersion.targets(1635,5): warning MSB3245: Could not res\nolve this reference. Could not locate the assembly \"Microsoft.Owin.Host.HttpListener\". Check to make sure the assembly\nexists on disk. If this reference is required by your code, you may get compilation errors. [D:\\git\\KRuntime\\src\\Micros\noft.Net.OwinHost\\Microsoft.Net.OwinHost.csproj]\nC:\\Program Files (x86)\\MSBuild\\12.0\\bin\\Microsoft.Common.CurrentVersion.targets(1635,5): warning MSB3245: Could not res\nolve this reference. Could not locate the assembly \"Microsoft.Owin.Hosting\". Check to make sure the assembly exists on\ndisk. If this reference is required by your code, you may get compilation errors. [D:\\git\\KRuntime\\src\\Microsoft.Net.Ow\ninHost\\Microsoft.Net.OwinHost.csproj]\nAppLoaderWrapper.cs(7,17): error CS0234: The type or namespace name 'Owin' does not exist in the namespace 'Microsoft'\n(are you missing an assembly reference?) [D:\\git\\KRuntime\\src\\Microsoft.Net.OwinHost\\Microsoft.Net.OwinHost.csproj]\nAppLoaderWrapper.cs(14,37): error CS0246: The type or namespace name 'IAppLoaderFactory' could not be found (are you mi\nssing a using directive or an assembly reference?) [D:\\git\\KRuntime\\src\\Microsoft.Net.OwinHost\\Microsoft.Net.OwinHost.c\nsproj]\nNoopTraceOutputFactory.cs(2,17): error CS0234: The type or namespace name 'Owin' does not exist in the namespace 'Micro\nsoft' (are you missing an assembly reference?) [D:\\git\\KRuntime\\src\\Microsoft.Net.OwinHost\\Microsoft.Net.OwinHost.cspro\nj]\nNoopTraceOutputFactory.cs(6,43): error CS0246: The type or namespace name 'ITraceOutputFactory' could not be found (are\n you missing a using directive or an assembly reference?) [D:\\git\\KRuntime\\src\\Microsoft.Net.OwinHost\\Microsoft.Net.Owi\nnHost.csproj]\nOwinHostProgram.cs(7,17): error CS0234: The type or namespace name 'Owin' does not exist in the namespace 'Microsoft' (\nare you missing an assembly reference?) [D:\\git\\KRuntime\\src\\Microsoft.Net.OwinHost\\Microsoft.Net.OwinHost.csproj]\nOwinHostProgram.cs(8,17): error CS0234: The type or namespace name 'Owin' does not exist in the namespace 'Microsoft' (\nare you missing an assembly reference?) [D:\\git\\KRuntime\\src\\Microsoft.Net.OwinHost\\Microsoft.Net.OwinHost.csproj]\nOwinHostProgram.cs(9,17): error CS0234: The type or namespace name 'Owin' does not exist in the namespace 'Microsoft' (\nare you missing an assembly reference?) [D:\\git\\KRuntime\\src\\Microsoft.Net.OwinHost\\Microsoft.Net.OwinHost.csproj]\nOwinHostProgram.cs(10,17): error CS0234: The type or namespace name 'Owin' does not exist in the namespace 'Microsoft'\n(are you missing an assembly reference?) [D:\\git\\KRuntime\\src\\Microsoft.Net.OwinHost\\Microsoft.Net.OwinHost.csproj]\nOwinHostProgram.cs(11,17): error CS0234: The type or namespace name 'Owin' does not exist in the namespace 'Microsoft'\n(are you missing an assembly reference?) [D:\\git\\KRuntime\\src\\Microsoft.Net.OwinHost\\Microsoft.Net.OwinHost.csproj]\nOwinHostProgram.cs(12,17): error CS0234: The type or namespace name 'Owin' does not exist in the namespace 'Microsoft'\n(are you missing an assembly reference?) [D:\\git\\KRuntime\\src\\Microsoft.Net.OwinHost\\Microsoft.Net.OwinHost.csproj]\nOwinHostProgram.cs(154,31): error CS0246: The type or namespace name 'StartOptions' could not be found (are you missing\n a using directive or an assembly reference?) [D:\\git\\KRuntime\\src\\Microsoft.Net.OwinHost\\Microsoft.Net.OwinHost.csproj\n]\nOwinHostProgram.cs(214,45): error CS0246: The type or namespace name 'StartOptions' could not be found (are you missing\n a using directive or an assembly reference?) [D:\\git\\KRuntime\\src\\Microsoft.Net.OwinHost\\Microsoft.Net.OwinHost.csproj\n]\nOwinHostProgram.cs(235,42): error CS0246: The type or namespace name 'StartOptions' could not be found (are you missing\n a using directive or an assembly reference?) [D:\\git\\KRuntime\\src\\Microsoft.Net.OwinHost\\Microsoft.Net.OwinHost.csproj\n]\n. Info on Windows 8 API Sets can be found at:\nhttp://msdn.microsoft.com/en-us/library/dn505783(v=vs.85).aspx\n. List of .cs files with dllimports that may need fixups\nc:\\git\\aspnet>findstr /spin /m /c:\"dllimport\" *.cs\nKRuntime\\src\\klr.net45.managed\\DomainManager.cs\nUniverse\\DataProtection\\src\\Microsoft.AspNet.Security.DataProtection\\UnsafeNativeMethods.cs\nUniverse\\Helios\\src\\AspNet.Loader\\UnsafeNativeMethods.cs\nUniverse\\Helios\\src\\Microsoft.AspNet.Loader.IIS\\UnsafeNativeMethods.cs\nUniverse\\KRuntime\\src\\klr.net45.managed\\DomainManager.cs\nUniverse\\Microsoft.Data.SQLite\\src\\Microsoft.Data.SQLite\\Interop\\NativeMethods.cs\nUniverse\\WebListener\\src\\Microsoft.AspNet.Security.Windows\\NativeInterop\\UnsafeNativeMethods.cs\nUniverse\\WebListener\\src\\Microsoft.AspNet.Server.WebListener\\fx\\System\\SafeNativeMethods.cs\nUniverse\\WebListener\\src\\Microsoft.AspNet.Server.WebListener\\NativeInterop\\UnsafeNativeMethods.cs\nUniverse\\WebListener\\src\\Microsoft.AspNet.WebSockets\\fx\\System\\SafeNativeMethods.cs\nUniverse\\WebListener\\src\\Microsoft.AspNet.WebSockets\\NativeInterop\\UnsafeNativeMethods.cs\n. Yes done.\nFrom: David Fowler [mailto:notifications@github.com]\nSent: Tuesday, October 7, 2014 3:32 AM\nTo: aspnet/KRuntime\nCc: Jonathan Hawkins\nSubject: Re: [KRuntime] Compile for new server(*) platforms (#9)\n@jhawk42https://github.com/jhawk42 We're done here right?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/KRuntime/issues/9#issuecomment-58165236.\n. Looking the history it looks like I did a merge. Should I do a rebase?\nas for email/user name, yes, saw that too. Fixed my git config --global user.* stuff.\nShould I redo with rebase, changes, and with fixed git config fixed ?\n. will do!\n. btw looks my pull request is still saying 11 commits and older stuff.\ndo you happen to know what steps may be incorrect in initial comment?\n. I think STARTUP_FLAGS dwStartupFlags needs to have STARTUP_SERVER_GC\n. No. Similar but different. The /CreatePDB takes in the .ni.dll and outputs a .ni.pdb file. You need the .ni.dll generated before you can generate the .ni.pdb ... two executions of crossgen.exe\nThe cmdline for crossgen.exe /CreatePdb is\ncrossgen.exe /CreatePDB {pdb-directory} /in {native-image-path}.dll /out {native-pdb-path} /Trusted_Platform_Assemblies \n. Updated Pull Request per our conversation\n. Per discussion with David Fowler: completed the integration: git checkout dev, git pull, git checkout native-createpdb, git rebase dev, git checkout dev, git merge native-createpdb, git push origin dev\nClosing this pull request\n. @GrabYourPitchforks included changes from your feedback\n. Lev is ok with the changes.\n. @Eilon  removed the base. prefix per your suggestion. Calls to .base were a carry over from prior factoring.\n. @Eilon \nFowler has already looked at the code :-) so I think we are good.\nBackground: This enables CLR MultiCore JIT during startup (we have and use the same capability on Desktop CLR). Enabling CLR MultiCore JIT records the IL methods that are used in the startup path. On subsequent starts the CLR will use additional CPU Cores to JIT \"ahead\" in parallel in order to reduce the overall wall cold start time.\n. build verify passes. checked in.\n. my error. I moved to alpha4\n. @davidfowl , I made the changes we discussed\n. @davidfowl , good catch! Removed the duplicates.\n. @davidfowl , hoisted the dup programFiles86 and msbuild vars. Lets chat about the \"environment var to msbuild config param\" conversion to clarify.\n. @davidfowl per your feedback I extracted the LoadLibraryExW and GetProcAddress into a helper function.\n. @Praburaj looks like kernel32 does not expose CopyFile2 on WS2008R2. We should ping Daniel from the CLR team\n. :shipit: \n. @victorhurdugaci , @davidfowl , I suspect some output needs to be added to the lines below/in the InitializeRuntime function, when it fails to load a desktop CLR:\nhttps://github.com/aspnet/KRuntime/blob/dev/src/klr.net45/KatanaManager.h\n        g_katanaManager = manager;\n        _HR(manager->InitializeRuntime(data->applicationBase));\n        g_katanaManager = NULL;\n. @davidfowl are you ok with @shhsu making this change in XKE? If so, lets move ahead with it.\n. @shhsu I spoke with @davidfowl yesterday and he is ok with the change. In the future we may need to add an opt out switch.\n. @davidfowl I seem to recall that on NanoServer and above (including full flavors) we only have c:\\windows\\system32\\msvcrt.dll (the built in CRT). I am fairly certain that we don't have a debug version preinstalled i.e. no msvcrtd.dll\n. ",
    "anpete": "Problem was that the Data project.json files had the version property set to: \"0.1-pre-*\".\n. ",
    "roydukkey": "@davidfowl Can you please rephrase your last sentence? I don't understand how virtual paths are a concept from Helios.\nAre virtual paths obsolete in the coming release?\n. ",
    "borgdylan": "This is only true for Roslyn built projects. Not all compilers will embed used ANIs.\n. Could we also have compile time dependencies so that the language service stuff does not get added to the project compilation?\n. Also could there be dependencies that you compile against, but then not get added to the nuspec? (example: packages with contracts for which runtimes have facades already)\n. please merge this as it will allow easier conversion of self-host apps to linux services\n. ping\n. Please rebase this so that it gets merged.\n. RE: requireLicenseAcceptance , also add license/licenseUrl if not already there.\n. Would it be possible to support any buildable msbuild project instead of only csproj?\n. Is this being worked on?\n. Can't the PCL reference assemblies be published as NuGet packages and used to build?\n. regarding pt.2 the bug is in: https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.PackageManager/Building/BuildContext.cs#L148\n. When using c# with ResourceManager on K10 it is mixing assemblies. I get classes inheriting object from System.Runtime (k10) and resource manager being used from the PCL facades(lead to mscorlib). Roslyn here is ignoring the fact that types are getting mixed up.\nWhen using my compiler the error is not ignored with types used directly from System.Runtime being from k10 and the ones used indirectly thru other k10 packages being from PCL facades.\nExample C# class:\n``` \ufeff\nusing System;\nusing System.Resources;\nnamespace vnextsharp\n{\n    public class MyClass\n    {\n        public MyClass (ResourceManager rm, string s) {\n            var res = rm.GetString(s);\n        }\n    }\n}\n```\nproject.json:\n\ufeff{\n  \"version\": \"0.1-alpha-*\",\n  \"dependencies\": {\n    \"Microsoft.Framework.Runtime\": \"1.0.0-*\"\n  },\n  \"commands\": {\n  },\n  \"frameworks\" : {\n    \"net45\": {\n      \"dependencies\": {\n        \"System\": \"\",\n        \"System.ComponentModel.DataAnnotations\": \"\"\n      }\n    },\n    \"k10\": {\n        \"dependencies\": {\n            \"System.Runtime\": \"4.0.20.0\", \"System.Console\": \"4.0.0.0\" , \"System.IO\": \"4.0.0.0\", \"System.Resources.ResourceManager\": \"4.0.0.0\"\n        }\n    }\n  }\n}\n. Mixed up IL supposedly compiled against K10:\n```\n.namespace vnextsharp\n{\n  .class public auto ansi beforefieldinit MyClass\n    extends [System.Runtime]System.Object\n  {\n// method line 1\n.method public hidebysig specialname rtspecialname \n       instance default void '.ctor' (class [mscorlib]System.Resources.ResourceManager rm, string s)  cil managed \n{\n    // Method begins at RVA 0x2050\n// Code size 15 (0xf)\n.maxstack 2\n.locals init (\n    string  V_0)\nIL_0000:  ldarg.0 \nIL_0001:  call instance void object::'.ctor'()\nIL_0006:  ldarg.1 \nIL_0007:  ldarg.2 \nIL_0008:  callvirt instance string class [mscorlib]System.Resources.ResourceManager::GetString(string)\nIL_000d:  stloc.0 \nIL_000e:  ret \n} // end of method MyClass::.ctor\n\n} // end of class vnextsharp.MyClass\n}\n```\n. This can be fixed by fixing System.Resources.ResourceManager package's nuspec and probably the nuspecs of other packages as well:\nCurrent Resourcemanager nuspec:\n<?xml version=\"1.0\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\n  <metadata>\n    <id>System.Resources.ResourceManager</id>\n    <version>4.0.0.0</version>\n    <authors>Microsoft</authors>\n    <owners>Microsoft</owners>\n    <licenseUrl>http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm</licenseUrl>\n    <requireLicenseAcceptance>true</requireLicenseAcceptance>\n    <description>This package provides some basic resource APIs like ResourceManager.</description>\n    <dependencies>\n      <group targetFramework=\"K1.0\">\n        <dependency id=\"System.Globalization\" version=\"4.0.0.0\" />\n        <dependency id=\"System.Reflection\" version=\"4.0.0.0\" />\n        <dependency id=\"System.Runtime\" version=\"4.0.0.0\" />\n      </group>\n    </dependencies>\n  </metadata>\n</package>\nFixed:\n<?xml version=\"1.0\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\n  <metadata>\n    <id>System.Resources.ResourceManager</id>\n    <version>4.0.0.0</version>\n    <authors>Microsoft</authors>\n    <owners>Microsoft</owners>\n    <licenseUrl>http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm</licenseUrl>\n    <requireLicenseAcceptance>true</requireLicenseAcceptance>\n    <description>This package provides some basic resource APIs like ResourceManager.</description>\n    <dependencies>\n      <group targetFramework=\"K1.0\">\n        <dependency id=\"System.Globalization\" version=\"4.10.0.0\" />\n        <dependency id=\"System.Reflection\" version=\"4.0.10.0\" />\n        <dependency id=\"System.Runtime\" version=\"4.0.20.0\" />\n      </group>\n    </dependencies>\n  </metadata>\n</package>\n. The project is just teh c# and project file i posted. i made it as a smallest possible example. Roslyn happens to ignore this mixup. My compiler did not tolerate it and exploded with an error message.\n. Both go into the mixup. Mine fails. Roslyn ignores the bad code being made and terminates with fake success.\n. The packages depending on System.Runtime did not reference eh new updating package (old version of it is no longer in the feed) forcing mono to load the pcl facade since it happened to match the version number.\n. its just kpm build on k10. With normal net45 k run nothing is affected since k10 is not used in my case.\n. sharplib 0.1-alpha-SNAPSHOT [K,Version=v1.0]\n\u251c\u2500 Microsoft.Framework.Runtime 1.0.0-alpha3-10189 (Microsoft.Bcl.Metadata 1.0.11-alpha, Microsoft.Framework.Runtime.Common 1.0.0-alpha3-10189, Microsoft.Framework.Runtime.Interfaces 1.0.0-alpha3-10189, Newtonsoft.Json 5.0.8, System.Collections 4.0.10.0, System.ComponentModel 4.0.0.0, System.Diagnostics.Debug 4.0.10.0, System.Diagnostics.Tools 4.0.0.0, System.Dynamic.Runtime 4.0.0.0, System.Globalization 4.0.10.0, System.IO.Compression 4.0.0.0, System.IO.FileSystem 4.0.10.0, System.IO.FileSystem.Watcher 4.0.0.0, System.Linq 4.0.0.0, System.ObjectModel 4.0.0.0, System.Reflection 4.0.10.0, System.Reflection.Extensions 4.0.0.0, System.Runtime.Extensions 4.0.10.0, System.Runtime.InteropServices 4.0.20.0, System.Runtime.Loader 4.0.0.0, System.Text.RegularExpressions 4.0.0.0, System.Threading 4.0.0.0, System.Threading.Tasks 4.0.10.0, System.Threading.Thread 4.0.0.0, System.Threading.Timer 4.0.0.0, System.Xml.ReaderWriter 4.0.10.0, System.Xml.XDocument 4.0.0.0, System.Xml.XmlSerializer 4.0.0.0)\n\u251c\u2500 System.Runtime 4.0.20.0\n\u251c\u2500 System.Console 4.0.0.0\n\u251c\u2500 System.IO 4.0.0.0 (System.Text.Encoding 4.0.10.0, System.Threading.Tasks 4.0.0.0)\n\u2514\u2500 System.Resources.ResourceManager 4.0.0.0 (System.Globalization 4.0.10.0, System.Reflection 4.0.10.0)\n. for my compiler i get:\n```\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.Mvc/6.0.0-alpha3-10493/lib/K10/Microsoft.AspNet.Mvc.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.FileSystems/1.0.0-alpha3-10149/lib/K10/Microsoft.AspNet.FileSystems.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.ApplicationContext/4.0.0.0/lib/contract/System.ApplicationContext.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Runtime/4.0.20.0/lib/contract/System.Runtime.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Collections/4.0.10.0/lib/contract/System.Collections.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.IO/4.0.0.0/lib/contract/System.IO.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Text.Encoding/4.0.20.0/lib/contract/System.Text.Encoding.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Threading.Tasks/4.0.10.0/lib/contract/System.Threading.Tasks.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.IO.FileSystem/4.0.10.0/lib/contract/System.IO.FileSystem.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.IO.FileSystem.Primitives/4.0.10.0/lib/contract/System.IO.FileSystem.Primitives.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Runtime.Handles/4.0.0.0/lib/contract/System.Runtime.Handles.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Reflection/4.0.10.0/lib/contract/System.Reflection.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Reflection.Primitives/4.0.0.0/lib/contract/System.Reflection.Primitives.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Reflection.Extensions/4.0.0.0/lib/contract/System.Reflection.Extensions.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Runtime.Extensions/4.0.10.0/lib/contract/System.Runtime.Extensions.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Runtime.InteropServices/4.0.20.0/lib/contract/System.Runtime.InteropServices.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.Http/1.0.0-alpha3-10172/lib/K10/Microsoft.AspNet.Http.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.Net.WebSocketAbstractions/1.0.0-alpha3-10148/lib/K10/Microsoft.Net.WebSocketAbstractions.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.ComponentModel/4.0.0.0/lib/contract/System.ComponentModel.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Diagnostics.Tools/4.0.0.0/lib/contract/System.Diagnostics.Tools.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Globalization/4.0.10.0/lib/contract/System.Globalization.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Globalization.Extensions/4.0.0.0/lib/contract/System.Globalization.Extensions.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Linq/4.0.0.0/lib/contract/System.Linq.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Security.Claims/1.0.0-alpha3-10149/lib/K10/System.Security.Claims.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Diagnostics.Contracts/4.0.0.0/lib/contract/System.Diagnostics.Contracts.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Security.Principal/4.0.0.0/lib/contract/System.Security.Principal.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Threading/4.0.0.0/lib/contract/System.Threading.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.Mvc.Common/6.0.0-alpha3-10493/lib/K10/Microsoft.AspNet.Mvc.Common.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Text.Encoding.Extensions/4.0.10.0/lib/contract/System.Text.Encoding.Extensions.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.Mvc.Core/6.0.0-alpha3-10493/lib/K10/Microsoft.AspNet.Mvc.Core.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.Mvc.HeaderValueAbstractions/1.0.0-alpha3-10493/lib/K10/Microsoft.AspNet.Mvc.HeaderValueAbstractions.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.Mvc.ModelBinding/6.0.0-alpha3-10493/lib/K10/Microsoft.AspNet.Mvc.ModelBinding.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.DataAnnotations/1.0.0-alpha3-10148/lib/K10/Microsoft.DataAnnotations.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.ComponentModel.Annotations/4.0.10.0/lib/contract/System.ComponentModel.Annotations.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.Framework.DependencyInjection/1.0.0-alpha3-10151/lib/K10/Microsoft.Framework.DependencyInjection.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.Framework.ConfigurationModel/1.0.0-alpha3-10156/lib/K10/Microsoft.Framework.ConfigurationModel.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Diagnostics.Debug/4.0.10.0/lib/contract/System.Diagnostics.Debug.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Resources.ResourceManager/4.0.0.0/lib/contract/System.Resources.ResourceManager.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Collections.Concurrent/4.0.0.0/lib/contract/System.Collections.Concurrent.dll\"\nrefasm \"/home/dylan/.kpm/packages/Newtonsoft.Json/5.0.8/lib/netcore45/Newtonsoft.Json.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Dynamic.Runtime/4.0.0.0/lib/contract/System.Dynamic.Runtime.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Linq.Expressions/4.0.0.0/lib/contract/System.Linq.Expressions.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.ObjectModel/4.0.0.0/lib/contract/System.ObjectModel.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Reflection.Emit.ILGeneration/4.0.0.0/lib/contract/System.Reflection.Emit.ILGeneration.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Reflection.Emit.Lightweight/4.0.0.0/lib/contract/System.Reflection.Emit.Lightweight.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Reflection.TypeExtensions/4.0.0.0/lib/contract/System.Reflection.TypeExtensions.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Runtime.Serialization.Primitives/4.0.0.0/lib/contract/System.Runtime.Serialization.Primitives.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.Routing/1.0.0-alpha3-10164/lib/K10/Microsoft.AspNet.Routing.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.RequestContainer/1.0.0-alpha3-10164/lib/K10/Microsoft.AspNet.RequestContainer.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.Framework.OptionsModel/1.0.0-alpha3-10138/lib/K10/Microsoft.Framework.OptionsModel.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Text.RegularExpressions/4.0.0.0/lib/contract/System.Text.RegularExpressions.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.Security/1.0.0-alpha3-10284/lib/K10/Microsoft.AspNet.Security.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.FeatureModel/1.0.0-alpha3-10172/lib/K10/Microsoft.AspNet.FeatureModel.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.HttpFeature/1.0.0-alpha3-10172/lib/K10/Microsoft.AspNet.HttpFeature.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Net.Primitives/4.0.10.0/lib/contract/System.Net.Primitives.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Security.Cryptography.X509Certificates/4.0.0.0/lib/contract/System.Security.Cryptography.X509Certificates.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Security.Cryptography/4.0.0.0/lib/contract/System.Security.Cryptography.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Security.SecureString/4.0.0.0/lib/contract/System.Security.SecureString.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Security.Cryptography.Encoding/4.0.0.0/lib/contract/System.Security.Cryptography.Encoding.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.PipelineCore/1.0.0-alpha3-10172/lib/K10/Microsoft.AspNet.PipelineCore.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.Security.DataProtection/1.0.0-alpha3-10149/lib/K10/Microsoft.AspNet.Security.DataProtection.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Security.Cryptography.Encryption/4.0.0.0/lib/contract/System.Security.Cryptography.Encryption.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.Framework.Logging/1.0.0-alpha3-10150/lib/K10/Microsoft.Framework.Logging.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Diagnostics.TraceSource/4.0.0.0/lib/contract/System.Diagnostics.TraceSource.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Console/4.0.0.0/lib/contract/System.Console.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.IO.Compression/4.0.0.0/lib/contract/System.IO.Compression.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Security.Cryptography.RandomNumberGenerator/4.0.0.0/lib/contract/System.Security.Cryptography.RandomNumberGenerator.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.CSharp/4.0.0.0/lib/contract/Microsoft.CSharp.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.Framework.Runtime.Interfaces/1.0.0-alpha3-10189/lib/K10/Microsoft.Framework.Runtime.Interfaces.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Security.Cryptography.Hashing.Algorithms/4.0.0.0/lib/contract/System.Security.Cryptography.Hashing.Algorithms.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Security.Cryptography.Hashing/4.0.0.0/lib/contract/System.Security.Cryptography.Hashing.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.Mvc.Razor/6.0.0-alpha3-10493/lib/K10/Microsoft.AspNet.Mvc.Razor.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.CodeAnalysis.Common/0.7.4060502-beta/lib/k10/Microsoft.CodeAnalysis.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.Bcl.Immutable/1.1.20-beta/lib/portable-net45+win8/System.Collections.Immutable.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.Bcl.Metadata/1.0.11-alpha/lib/portable-net45+win8/System.Reflection.Metadata.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.CodeAnalysis.CSharp/0.7.4060502-beta/lib/k10/Microsoft.CodeAnalysis.CSharp.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.Mvc.Razor.Host/6.0.0-alpha3-10493/lib/K10/Microsoft.AspNet.Mvc.Razor.Host.dll\"\nrefasm \"/home/dylan/.kpm/packages/Microsoft.AspNet.Razor/4.0.0-alpha3-10154/lib/K10/Microsoft.AspNet.Razor.dll\"\nrefasm \"/home/dylan/.kpm/packages/System.Threading.Thread/4.0.0.0/lib/contract/System.Threading.Thread.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.Security.IHttpAuthenticationFeature.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.Security.IAuthenticationHandler.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.Security.ISignOutContext.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.AssemblyNeutralAttribute.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.Security.ISignInContext.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.Security.IChallengeContext.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.Security.IAuthenticateContext.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.Security.IAuthTypeContext.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.IHttpApplicationFeature.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.IHttpBufferingFeature.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.IHttpClientCertificateFeature.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.IHttpConnectionFeature.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.IHttpRequestFeature.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.IHttpRequestLifetimeFeature.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.IHttpResponseFeature.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.IHttpSendFileFeature.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.IHttpUpgradeFeature.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.IWebSocketAcceptContext.dll\"\nrefasm \"memory:Microsoft.AspNet.HttpFeature.IHttpWebSocketFeature.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.IApplicationEnvironment.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.IApplicationShutdown.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.IAssemblyLoader.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.IAssemblyLoaderEngine.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.IFileMonitor.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.IFileWatcher.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.IHost.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.IHostContainer.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.IMetadataReference.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.ISourceReference.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.ILibraryExport.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.ILibraryExportProvider.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.ILibraryInformation.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.ILibraryManager.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.IMetadataEmbeddedReference.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.IMetadataFileReference.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.IProjectBuildResult.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.IMetadataProjectReference.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.ISourceFileReference.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.Infrastructure.IServiceProviderLocator.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.Infrastructure.CallContextServiceLocator.dll\"\nrefasm \"memory:Microsoft.Framework.Runtime.IRoslynMetadataReference.dll\"\n```\n. The problem isnt easy to see here. K is passing the right stuff. However the k10 reference assemblies are using the wrong version of some other k10 libraries (they are compiled against an old System.Runtime 4.0.0.0 which if missing gets replaced by pcl facades)\n. Its not my compiler that does it, its teh CLR...if teh contract needs System.Runtime v 4.0.0.0 and that is not available in whats passed in, the clr tries to provide it which in this case it can using a pcl facade which happens to use the same version. Note that the version of System,Runtime passed in is v 4.0.20.0 which is not teh one asked by resource manager\n. When teh compiler reads assemblies, the libraries it uses try to find teh dependencies from what has been read and from the system libraries. In this case a PCL facade is being picked as it is being incorrectly asked for by a k10 contract assembly. \n. The contracts passed ar wrong. The contents are anyway. The contracts depending on System.Runtime were not updated to the latest version. It is strange that the ci built them . maybe it has old cached contracts?\n. The problem is with the library I use for reflection in that case. It is loading not using the redirected version I give it for transitive resolutions (the ones it does internally). I will try to patch it.\n. I am using IKVM.Reflection. It is a separate library (does not use SRE).\n. +1\n. The resulting script should be:\n```\n!/bin/bash\nSOURCE=\"${BASH_SOURCE[0]}\"\nwhile [ -h \"$SOURCE\" ]; do # resolve $SOURCE until the file is no longer a symlink\n  DIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" && pwd )\"\n  SOURCE=\"$(readlink \"$SOURCE\")\"\n  [[ $SOURCE != /* ]] && SOURCE=\"$DIR/$SOURCE\" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located\ndone\nDIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" && pwd )\"\nif [ -f \"$DIR/mono\" ]; then\n  \"$DIR/mono\"  $MONO_OPTIONS \"$DIR/klr.mono.managed.dll\" \"$@\"\nelse\n  mono   $MONO_OPTIONS \"$DIR/klr.mono.managed.dll\" \"$@\"\nfi\n```\n. Has my cla been confirmed?\n. The k process happens to also stop if the console is not connected due to the wait. Ie if i start k in the background it will not serve requests until i get it back to the foreground. There should be a mode that does not wait for input so that we could write upstart/systemd scripts that start k web as a service. The script would save the PID after starting inside a file to allow killing the right process when the service needs to stop/restart. This would also help a lot who needs to start sites on server startup and be able to clean resources on server shutdown.\n. This used to happen to me as well. To work around it you must nuke the mono EF assemblies from the GAC and the lib/mono/4.5 directories.\n. In my case it happened because mono has EF 6.0 and I am using EF 6.1.1. The assemblies in both cases use the same version metadata.\n. If crossgen ever starts supporting mono, make sure to use the actual casing for folders. The retired k10 had its stuff in the \"K10\" folder.\n. I updated my KVM and KRE. When I do \"kpm restore\", the deps of deps do not get downloaded. The only workaround I found was to install each package manually foudn in the complaint report of not-found stuff issued by \"k web\".\nThis is my project.json:\n{\n  \"version\": \"0.1-alpha-*\",\n  \"code\": \"*.dyl;*/*.dyl\",\n  \"exclude\": \"msbuild.dyl\",\n  \"resources\": \"*.resources\",\n  \"language\": {\n    \"name\": \"dylan.NET\",\n    \"assembly\": \"dylan.NET.K\",\n    \"projectReferenceProviderType\": \"dylan.NET.K.DNProjectReferenceProvider\"\n  },\n  \"dependencies\": {\n    \"dylan.NET.Tasks\": \"\",\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Hosting\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Security.Cookies\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-*\",\n    \"Microsoft.AspNet.Mvc.Core\": \"6.0.0-*\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-*\",\n    \"Microsoft.Framework.ConfigurationModel\": \"1.0.0-*\",\n    \"Microsoft.Framework.ConfigurationModel.Json\": \"1.0.0-*\",\n    \"Microsoft.AspNet.SignalR.Server\": \"3.0.0-*\",\n    \"Microsoft.AspNet.Razor\": \"4.0.0-*\",\n    \"Microsoft.AspNet.Mvc.Razor.Host\": \"6.0.0-*\",\n    \"Microsoft.AspNet.FeatureModel\": \"1.0.0-*\",\n    \"Microsoft.AspNet.FileSystems\": \"1.0.0-*\",\n    \"Microsoft.AspNet.HttpFeature\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Mvc.Common\": \"6.0.0-*\",\n    \"Microsoft.AspNet.Mvc.HeaderValueAbstractions\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Mvc.ModelBinding\": \"6.0.0-*\"\n  },\n  \"compilationOptions\": {\n    \"define\": [],\n    \"optimize\": true,\n    \"warningsAsErrors\": false\n  },\n  \"commands\": {\n    \"web\": \"Microsoft.AspNet.Hosting --server NowinServerFactory --port 8086\"\n  },\n  \"frameworks\": {\n    \"net451\": {\n      \"dependencies\": {\n        \"dylan.NET.K\": \"\",\n        \"System.Core\": \"\",\n        \"System.Data\": \"\",\n        \"System.Configuration\": \"\",\n        \"System.Xml\": \"\",\n        \"System.Runtime.Serialization\": \"\",\n        \"System.Transactions\": \"\",\n        \"System.Xml.Linq\": \"\",\n        \"Microsoft.CSharp\": \"\",\n        \"System.ComponentModel.DataAnnotations\": \"\",\n        \"NowinServerFactory\": \"\",\n        \"EntityFramework\": \"6.1.1\",\n        \"Npgsql.EntityFramework\": \"2.2.0-dylan3\",\n        \"Microsoft.AspNet.Identity.EntityFramework\": \"2.1.0\",\n        \"LinqToQuerystring\": \"0.7.0.8\"\n      }\n    }\n  }\n}\n. Could it be that there was a recent KPM patch that did not take Mono into account?\n. So it was an error from my part, changing net451 to aspnet50 fixed stuff.\n. Is MCJ, Model-Controller-JSON?\n. This is because a project called root gets loaded. The compiled binary should be loaded instead.\n. The issues is not when you pack! It is when try to run the packed application!\n. Could be i have an out of date kre, will update and retry.\n. So when using dylan.NET I am getting a failure, as the runtime is invoking my language service to load a project called \"root\" which obviously does not exist (the packed project is this case has no source to compile as no-source got used). SHould I have a guard in my language service and handle loading differently?\n. this is just for roslyn?\n. It would also be neat if for Linux/OSX we could pass a flag that starts mono's debug server so that we could connect to it using MonoDevelop/Xamarin Studio and step thru code. This can be done currently but only if we hack around with the MONO_OPTIONS env var.\n. But my compiler already emits the right debug symbols...so this can be done in two steps. First allowing the kre to be started in debug mode, then maybe the switch to mcs.\n. There should be a way to just load the language support from the nupkg if the currently being built project is the language support itself. This issue is preventing me from writing the language support for dylan.NET in dylan.NET itself.\n. But you have to play around with the klr command line to do it. Plus you also have to invoke UnpaK using a path as currently kpm cannot install global commands.\n. Would be possible to support this on linux/mac as well?. Since kpm does not currently build PCLs on mono, this may be a way to get to do so by wrapping an msbuild project that does that. Do note that xbuild on mono has a mechanism to install PCL ref assemblies to its xbuild-frameworks folder just like MsBuild.\n. +1\n. :+1:\n. This is also an issue with all kpm output on Linux. It may be possible to mitigate by setting the text color from the start i.e. by executing\nConsole.ForegroundColor = ConsoleColor.White;\nThis works on my Linux box and should work the same on an OS/X box as well.\n. When someone recognizes that I have signed my CLA months ago. Also I am busy trying to find the spec of that using a static class in roslyn e.g. \"using System.Console\" so I could add it my compiler (apparently the download counts have increased most of which are paired with a download of teh ASP.NET 5 support package)\n. With Mono 4.0+ the color improves automatically i.e. it is consistent enough. This issue might  be an expired one then with no PR needed.\n\n. To make stuff work in general with the latest bits Mono 4.1 or later is needed anyway. BTW, this change is due to the fact that mono is changing a lot of libraries to be based off of the MSFT reference sources.\n. Bash scripts must be EOL'd using LF only!\n. C# files -> source files\nN.B. (the k runtime runs more than just c#)\n. Will compilers still be able to supply streams or copy to a stream?\n. :+1: \n. So I am getting this only on kpm build not on k run. Would you accept a project zip file that manifests the issue as a repro?\n. https://onedrive.live.com/redir?resid=9FFFE836BC123221!1204&authkey=!ABmJpnKqCN4lB50&ithint=file%2czip\n. https://github.com/borgdylan/hellotasks/tree/master/hellotasks\n. No I do not. All of its DLLs get loaded at once. Dynamic loading is only for reflection on the passed in references.\n. All of the assemblies making up the compiler are in the nupkg lib/net40 (soon moving to lib/net45) folder all having a \".dll\" extension.\n. None of those methods are abstract! I checked by disassembling\n. I get this:\n```\ndylan@ubuntu-server:/var/www/Code/dylannet/vnext/hellotasks$ kpm build\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/klr.host.dll Information : 0 : [LoaderContainer]: Load name=Microsoft.Framework.PackageManager\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/klr.host.dll Information : 0 : [PathBasedAssemblyLoader]: Loaded name=Microsoft.Framework.PackageManager in 41ms\nBuilding hellotasks for Asp.Net,Version=v5.0\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [DependencyWalker]: Walking dependency graph for 'hellotasks Asp.Net,Version=v5.0'.\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [ProjectReferenceDependencyProvider]: hellotasks 0.1-alpha, dylan.NET.Tasks 1.2.0.0, dylan.NET.K 1.0.8\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [ReferenceAssemblyDependencyResolver]: gac/mscorlib 4.0.0.0, gac/System 4.0.0.0, gac/System.Core 4.0.0.0, gac/Microsoft.CSharp 4.0.0.0, gac/System.Collections 4.0.0.0, gac/System.IO 4.0.0.0, gac/System.IO.Compression 4.0.0.0, gac/System.IO.Compression.FileSystem 4.0.0.0, gac/System.Runtime 4.0.0.0, gac/System.Xml 4.0.0.0, gac/System.Xml.Linq 4.0.0.0\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [NuGetDependencyResolver]: Microsoft.Framework.Runtime 1.0.0-rc1-10804, dylan.NET 11.5.3.2, System.Reflection.Metadata 1.0.17-beta, Microsoft.Framework.Runtime.Loader 1.0.0-rc1-10804, Newtonsoft.Json 6.0.6, System.Collections.Immutable 1.1.32-beta\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [ServicingIndex]: Servicing index not found at /home/dylan/KRE/Servicing/index.txt\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [DependencyWalker]: Resolved dependencies for hellotasks in 86ms\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [DependencyWalker]: Walking dependency graph for 'hellotasks Asp.Net,Version=v5.0'.\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [ProjectReferenceDependencyProvider]: hellotasks 0.1-alpha, dylan.NET.Tasks 1.2.0.0, dylan.NET.K 1.0.8\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [ReferenceAssemblyDependencyResolver]: gac/mscorlib 4.0.0.0, gac/System 4.0.0.0, gac/System.Core 4.0.0.0, gac/Microsoft.CSharp 4.0.0.0, gac/System.Collections 4.0.0.0, gac/System.IO 4.0.0.0, gac/System.IO.Compression 4.0.0.0, gac/System.IO.Compression.FileSystem 4.0.0.0, gac/System.Runtime 4.0.0.0, gac/System.Xml 4.0.0.0, gac/System.Xml.Linq 4.0.0.0\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [NuGetDependencyResolver]: Microsoft.Framework.Runtime 1.0.0-rc1-10804, dylan.NET 11.5.3.2, System.Reflection.Metadata 1.0.17-beta, Microsoft.Framework.Runtime.Loader 1.0.0-rc1-10804, Newtonsoft.Json 6.0.6, System.Collections.Immutable 1.1.32-beta\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [DependencyWalker]: Resolved dependencies for hellotasks in 8ms\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [ProjectExportProviderHelper]: Resolving references for 'hellotasks' \n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [ProjectLibraryExportProvider]: GetLibraryExport(hellotasks, Asp.Net,Version=v5.0, Debug, )\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/klr.host.dll Information : 0 : [LoaderContainer]: Load name=c55e3286-c21d-4b68-a0cb-cc2d65a2cce2$dylan.NET.K\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/klr.host.dll Information : 0 : [LoaderContainer]: Load name=dylan.NET.K\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [ProjectLibraryExportProvider]: GetLibraryExport(dylan.NET.K, Asp.Net,Version=v5.0, Debug, )\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [Microsoft.Framework.Runtime.Roslyn.RoslynProjectReferenceProvider]: GetProjectReference(dylan.NET.K, Asp.Net,Version=v5.0, Debug, )\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [ProjectExportProviderHelper]: Resolving references for 'dylan.NET.K' \n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.dll Information : 0 : [ProjectExportProviderHelper]: Resolved 52 references for 'dylan.NET.K' in 38ms\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.Roslyn.dll Information : 0 : [RoslynCompiler]: Compiling 'dylan.NET.K'\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.Roslyn.dll Information : 0 : [RoslynCompiler]: Scanning 'dylan.NET.K' for assembly neutral interfaces\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.Roslyn.dll Information : 0 : [RoslynCompiler]: Found 0 assembly neutral interfaces for 'dylan.NET.K' in 120ms\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.Roslyn.dll Information : 0 : [RoslynCompiler]: Compiled 'dylan.NET.K' in 288ms\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.Roslyn.dll Information : 0 : [CompilationContext]: Generating resources for dylan.NET.K\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.Roslyn.dll Information : 0 : [CompilationContext]: Generated resources for dylan.NET.K in 1ms\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.Roslyn.dll Information : 0 : [CompilationContext]: Resolving required assembly neutral references for dylan.NET.K\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.Roslyn.dll Information : 0 : [CompilationContext]: Resolved 10 required assembly neutral references for dylan.NET.K in 822ms\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.Roslyn.dll Information : 0 : [RoslynProjectReference]: Emitting assembly for dylan.NET.K\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.Roslyn.dll Warning : 0 : PDB generation is not supported on this platform\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/Microsoft.Framework.Runtime.Roslyn.dll Information : 0 : [RoslynProjectReference]: Emitted dylan.NET.K in 15ms\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/klr.host.dll Information : 0 : [LoaderContainer]: Load name=dnu\n/home/dylan/.kre/packages/KRE-Mono.1.0.0-rc1-10815/bin/klr.host.dll Information : 0 : [LoaderContainer]: Load name=dnu\nMissing field UseConsole in class dylan.NET.Utils.StreamUtils (type token 16777270)\nSystem.IO.FileNotFoundException: Could not load file or assembly 'dnu, Version=11.5.3.1, Culture=neutral, PublicKeyToken=null' or one of its dependencies.\nFile name: 'dnu, Version=11.5.3.1, Culture=neutral, PublicKeyToken=null'\n  at (wrapper managed-to-native) System.Reflection.MonoCMethod:InternalInvoke (System.Reflection.MonoCMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoCMethod.InternalInvoke (System.Object obj, System.Object[] parameters) [0x00000] in :0 \n```\n. Something in really wrong here since that field is 100% present. If it weren't the compiler would not have compiled in the first place!\n. What was the KRE build used when that output came out?\n. I will run that program and see what comes out. In that case some kind of platform detection based solution would need to happen since it would be a CLR implementation issue. I doubt if Mono would change that stuff.\n. I got:\ndylan@ubuntu-server:/var/www/git/Mono-Assembly-Resolve-Issue/mono$ mono Program.exe\nAppDomain base path is /var/www/git/Mono-Assembly-Resolve-Issue/mono/\nAssemblyResolve=TestLib1\nTrying to load assembly from PATH=/var/www/git/Mono-Assembly-Resolve-Issue/mono/both/TestLib1.dll\nAssemblyResolve=TestLib2\nTrying to load assembly from PATH=/var/www/git/Mono-Assembly-Resolve-Issue/mono/both/TestLib2.dll\ntestlib1.myclass2.foo()\n. I ran that on Mono 3.10 as Mono 3.12 is not out as of now.\n. Ping\n. Current 'splosion output:\n``\n* Assertion at class.c:5607, condition!mono_loader_get_last_error ()' not met\nStacktrace:\nat  <0xffffffff>\n  at Microsoft.Framework.Runtime.ProjectLibraryExportProvider/<>c__DisplayClass5_0.b__0 (Microsoft.Framework.Runtime.CacheContext) <0x00729>\n  at Microsoft.Framework.Runtime.CacheExtensions/<>c__DisplayClass0_01.<Get>b__0 (Microsoft.Framework.Runtime.CacheContext) <0x00018>\n  at Microsoft.Framework.Runtime.Cache.CreateEntry (object,System.Func2) <0x00101>\n  at Microsoft.Framework.Runtime.Cache/<>c__DisplayClass5_0.b__0 () <0x0001f>\n  at System.Lazy1.InitValue () <0x00292>\n  at System.Lazy1.get_Value () <0x0002f>\n  at Microsoft.Framework.Runtime.Cache.Get (object,System.Func2<Microsoft.Framework.Runtime.CacheContext, object>) <0x00177>\n  at Microsoft.Framework.Runtime.CacheExtensions.Get<T> (Microsoft.Framework.Runtime.ICache,object,System.Func2) <0x0010b>\n  at Microsoft.Framework.Runtime.ProjectLibraryExportProvider.GetLibraryExport (Microsoft.Framework.Runtime.ILibraryKey) <0x0045b>\n  at Microsoft.Framework.Runtime.CompositeLibraryExportProvider/<>c__DisplayClass2_0.b__0 (Microsoft.Framework.Runtime.ILibraryExportProvider) <0x0001f>\n  at System.Linq.Enumerable/c__Iterator102.MoveNext () <0x0012d>\n  at System.Linq.Enumerable.First<TSource> (System.Collections.Generic.IEnumerable1,System.Func2<TSource, bool>,System.Linq.Enumerable/Fallback) <0x000a2>\n  at System.Linq.Enumerable.FirstOrDefault<TSource> (System.Collections.Generic.IEnumerable1,System.Func2<TSource, bool>) <0x0003f>\n  at Microsoft.Framework.Runtime.CompositeLibraryExportProvider.GetLibraryExport (Microsoft.Framework.Runtime.ILibraryKey) <0x0016b>\n  at Microsoft.Framework.Runtime.ProjectExportProviderHelper.GetExportsRecursive (Microsoft.Framework.Runtime.ICache,Microsoft.Framework.Runtime.ILibraryManager,Microsoft.Framework.Runtime.ILibraryExportProvider,Microsoft.Framework.Runtime.ILibraryKey,System.Func2) <0x0033e>\n  at Microsoft.Framework.Runtime.ProjectExportProviderHelper.GetExportsRecursive (Microsoft.Framework.Runtime.ICache,Microsoft.Framework.Runtime.ILibraryManager,Microsoft.Framework.Runtime.ILibraryExportProvider,Microsoft.Framework.Runtime.ILibraryKey,bool) <0x000cf>\n  at Microsoft.Framework.Runtime.LibraryManager/<>c__DisplayClass23_0.b__0 (Microsoft.Framework.Runtime.CacheContext) <0x0010b>\n  at Microsoft.Framework.Runtime.CacheExtensions/<>c__DisplayClass0_01.<Get>b__0 (Microsoft.Framework.Runtime.CacheContext) <0x00018>\n  at Microsoft.Framework.Runtime.Cache.CreateEntry (object,System.Func2) <0x00101>\n  at Microsoft.Framework.Runtime.Cache/<>c__DisplayClass5_0.b__0 () <0x0001f>\n  at System.Lazy1.InitValue () <0x00292>\n  at System.Lazy1.get_Value () <0x0002f>\n  at Microsoft.Framework.Runtime.Cache.Get (object,System.Func2<Microsoft.Framework.Runtime.CacheContext, object>) <0x00177>\n  at Microsoft.Framework.Runtime.CacheExtensions.Get<T> (Microsoft.Framework.Runtime.ICache,object,System.Func2) <0x0010b>\n  at Microsoft.Framework.Runtime.LibraryManager.GetAllExports (string,string) <0x00163>\n  at Microsoft.Framework.Runtime.LibraryManager.GetAllExports (string) <0x00017>\n  at Microsoft.Framework.PackageManager.BuildContext.ShowDependencyInformation (Microsoft.Framework.PackageManager.IReport) <0x0003c>\n  at Microsoft.Framework.PackageManager.BuildContext.Initialize (Microsoft.Framework.PackageManager.IReport) <0x00013>\n  at Microsoft.Framework.PackageManager.BuildManager.Build () <0x008db>\n  at Microsoft.Framework.PackageManager.Program/<>c__DisplayClass3_3.b__6 () <0x001df>\n  at Microsoft.Framework.Runtime.Common.CommandLine.CommandLineApplication.Execute (string[]) <0x0073a>\n  at Microsoft.Framework.PackageManager.Program.Main (string[]) <0x00583>\n  at (wrapper runtime-invoke) .runtime_invoke_int__thisobject (object,intptr,intptr,intptr) <0xffffffff>\n  at  <0xffffffff>\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&) <0xffffffff>\n  at System.Reflection.MonoMethod.Invoke (object,System.Reflection.BindingFlags,System.Reflection.Binder,object[],System.Globalization.CultureInfo) <0x000ab>\n  at System.Reflection.MethodBase.Invoke (object,object[]) <0x00022>\n  at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute (System.Reflection.Assembly,string[],System.IServiceProvider) <0x000e7>\n  at klr.host.Bootstrapper.Main (string[]) <0x002bf>\n  at (wrapper runtime-invoke) .runtimeinvoke_objectthis___object (object,intptr,intptr,intptr) <0xffffffff>\n  at  <0xffffffff>\n  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&) <0xffffffff>\n  at System.Reflection.MonoMethod.Invoke (object,System.Reflection.BindingFlags,System.Reflection.Binder,object[],System.Globalization.CultureInfo) <0x000ab>\n  at System.Reflection.MethodBase.Invoke (object,object[]) <0x00022>\n  at klr.hosting.RuntimeBootstrapper.ExecuteAsync (string[]) <0x00d43>\n  at klr.hosting.RuntimeBootstrapper.Execute (string[]) <0x00053>\n  at EntryPoint.Main (string[]) <0x00073>\n  at (wrapper runtime-invoke) .runtime_invoke_int_object (object,intptr,intptr,intptr) <0xffffffff>\n```\n. On Mono you can implement the --native option by calling Mono with AOT flags like this:\nmono --aot MyPackage.dll\nwhich will create accompanying native image files.\n. Is this also related to loading compiler libraries during kpm operations?\n. Will bash scripts be made like it is the case with kpm bundle?\n. This makes assemblies with backticks in the name like Msft.Frmk.Runtime.ILogger`1? I need to know this so my compiler support is coherent with this\n. Ok thanks. I will release a new support package for my compiler that is coherent with roslyn's output.\n. @victorhurdugaci I do debugging on mono, since my compiler can emit debug symbols for mono\n. An issue will also occur if B or C are not shared projects themselves and depend on A's sources being compiled into them.\n. I am using the latest KRE. I could only get stuff to normal by deleting the lock file.\n. ```\ndylan@ubuntu-server:/var/www/Code/dylannet/vnext/dylan.NET.K$ k --version\n1.0.0-beta4-11138\n.\n\ufeff{  \n    \"version\": \"1.2.1\",\n    \"authors\": [\"borgdylan\"],\n    \"description\": \"dylan.NET support for ASP.NET vNext (Project K)\",\n    \"license\": \"http://www.gnu.org/copyleft/lesser.html\",\n    \"projectUrl\": \"https://github.com/borgdylan/dylandotnet\",\n    \"tags\": [\".NET4.0\" ,\".NET4.5\", \"ASP.NET5.0\", \"ASP.NETCORE5.0\", \"Mono\"], \n    \"dependencies\": {\n    },\n    \"compilationOptions\": {\n     \"define\": [],\n     \"optimize\": \"true\",\n     \"warningsAsErrors\": \"false\"\n  },\n    \"frameworks\" : {\n        \"aspnet50\" : { \n            \"dependencies\": {\n                \"Microsoft.Framework.Runtime\": \"1.0.0-*\",\n                 \"dylan.NET\" : \"11.5.6.1\"\n            }\n        }\n    }\n}\n. I did not. I had also passed---unlock\" to make sure but to no avail. Deleting the lock file made it work.\n. Yes, with every project that had a lock file produced with an older KRE. Will check with lock files made with this KRE.\n. Did the lock file format change?\n. So, ideally some message gets displayed that the format changed and that the file should be removed to regenerate a new lock file.\n. Please do not remove mono support for now. CoreCLR is not ready for 32bit on Linux and EF7 is not mature enough for database stuff as of now.\n. Thanks for the heads up\n. Before the packages for the unused framework were not copied yet still required by the dnx to let you run. Before you could copy the packages manually and manage to run. The latter is no longer the case.\n. I have a site that depends on a library. This library has a net40 only dependency. This dep is not being copied in the packages folder on a publish. However the runtime still expects that dependency to be present. Before I used to fix this issue by copying the dependency myself, but now that does not work.\n. I will try to patch the project.json in the published image and see if I can fool the runtime since I am targeting dnx451 with the site.\n. Also, why does the runtime ask for the presence of dependencies not meant for the current target framework when I run? I would expect that the runtime checks for what is needed for the chosen TFM only.\n. This library is rather special in that it provides async support for my language. It only needs this package i.e. Microsoft.Bcl.Async on net40. It supports later versions using built in types. Also both teh library and the site need my compiler to build with the library buillding the pcl parts using msbuild. The repro would need to load it from nuget,\n. The library source code is here: https://github.com/borgdylan/dylandotnet/tree/master/vnext-stuff/dylan.NET.Tasks\n. Would a c# project that does a simple app.Run using the library for async be ok? It should make the runtime behave in the same way.\n. Can it be trimmed for given frameworks? Like dnx451 only which would trim net40 specific stuff together with dncxore50 etc?\n. I have tried with another programming language and wit that I do not get such bugs so this may be a regression in roslyn.\n. Yes I am on mono. I am using dnx-mono v. 1.0.0-beta5-11735\n. The issues persists as of 1.0.0-beta6-11921\n. I do not know what the major differences are v.s publishing to source (apart from the source vs binary), but publishing to source is always working with publish to binary only failing.\n. The runtime is the same thing i.e. mono with DNX 1.0.0-beta6-11921\n. How can I pack the dnx runtime with my app?\n. dnu publish --no-source --runtime active ?\n. It still gives a 'splosion.\n```\ndylan@ubuntu-server:/var/www/Code/dylannet/vnext/mypim/bin/output$ ./web\nSystem.InvalidOperationException: Failed to resolve the following dependencies for target framework 'DNX,Version=v4.5.1':\n   dylan.NET.K \nSearched Locations:\n  /var/www/Code/dylannet/vnext/mypim/bin/output/approot/packages/mypim/2.0.0/{name}/project.json\n  /var/www/Code/dylannet/vnext/mypim/bin/output/approot/packages/{name}/{version}/{name}.nuspec\n  /usr/local/lib/mono/4.5/{name}.dll\n  /usr/local/lib/mono/4.5/Facades/{name}.dll\nTry running 'dnu restore'.\nat Microsoft.Framework.ApplicationHost.Program.Main (System.String[] args) <0xb623d6f8 + 0x00357> in :0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () <0xb41f1ca0 + 0x00035> in :0 \n  at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute (System.Reflection.Assembly assembly, System.String[] args, IServiceProvider serviceProvider) <0xb623b428 + 0x00163> in :0 \n  at dnx.host.Bootstrapper.RunAsync (System.Collections.Generic.List1 args, IRuntimeEnvironment env) <0xb6237d08 + 0x0035f> in <filename unknown>:0\n```\n. That works fine. However it does not use a language loaded from packages that do not ship with DNX.\n. The language package is precisely what is not loading and it is no longer needed once we publish to binaries. However without that dependency one cannot even compile the binaries in the first place.\n. It is why I keep testing everyday to see that no new regressions happen.\n. I may have fixed it. I had\"dylan.NET.K\": {\"type\": \"build\", \"version\": \"\"}in the dependencies section. When I changed it to\"dylan.NET.K\": {\"type\": \"build\", \"version\": \"1.3.4.0\"}` it suddenly worked. So what if the version in the published output gets rewritten to the version of the published dependency package?\n. It is loaded as a project in this case. If it gets loaded as a package one would obviously have to specify the version number avoiding the bug in the first place.\n. For a repro would the dylan.NET version of HelloWeb suffice?\n. I will include DNK as source to reproduce the scenario.\n. https://github.com/borgdylan/dylandotnet-aspnet5\n. The workaround is applied in the repo so you may need to empty the version of dylan.NET.K (in the HelloWeb project.json) to hit the bug.\n. Would this work even with non-roslyn projects just as the resx compilation does today?\n. The version this occurs in is 1.0.0-beta5-11760\n. Yes sure:\n{\n    \"version\": \"1.3.0.0\",\n    \"authors\": [\"borgdylan\"],\n    \"description\": \"Task helper library for dylan.NET (await support for Task, Task<T>, YieldAwaitable, ConfiguredTaskAwaitable, ConfiguredTaskAwaitable<T> + new IAwaiter(<T>)/IAwaitable(<T>) abstractions)\",\n    \"license\": \"http://www.gnu.org/copyleft/lesser.html\",\n    \"projectUrl\": \"https://github.com/borgdylan/dylandotnet\",\n    \"tags\": [\".NET4.0\" ,\".NET4.5\", \"DNX4.5.1\", \"DNXCORE5.0\", \"Mono\", \"PCL\"],\n    \"compile\" : \"*.dyl;*/*.dyl\",\n    \"resource\" : \"*.resources\",\n    \"exclude\": \"msbuild.dyl\",\n    \"compiler\": {\n        \"name\": \"dylan.NET\",\n        \"compilerAssembly\": \"dylan.NET.K\",\n        \"compilerType\": \"dylan.NET.K.DNProjectCompiler\"\n    },\n  \"dependencies\": {\n    },\n  \"compilationOptions\": {\n     \"define\": []\n  },\n  \"commands\": {\n  },\n  \"frameworks\": {\n    \"dnx451\": {\n      \"dependencies\": {\n        \"dylan.NET.K\" : {\"type\": \"build\"}\n     }\n    },\n    \"net45\": {\n      \"dependencies\": {\n     }\n    },\n    \"net40\": {\n      \"dependencies\": {\n        \"Microsoft.Bcl.Async\": \"1.0.168\"\n      }\n    },\n    \"dnxcore50\": {\n        \"dependencies\": {\n            \"System.Runtime\": \"4.0.20-*\",\n            \"System.Text.RegularExpressions\": \"4.0.10-*\",\n            \"System.Threading.Tasks\": \"4.0.10-*\"\n        }\n    },\n    \".NETPortable,Version=v4.5,Profile=Profile78\": {\n        \"frameworkAssemblies\": {\n            \"System.Runtime\": \"4.0.0.0\",\n            \"System.Text.RegularExpressions\": \"4.0.0.0\",\n            \"System.Threading.Tasks\": \"4.0.0.0\"\n        },\n        \"compilationOptions\": {\n            \"define\": [\"PORTABLE\"]\n        }\n    },\n    \".NETPortable,Version=v4.5,Profile=Profile259\": {\n        \"frameworkAssemblies\": {\n            \"System.Runtime\": \"4.0.0.0\",\n            \"System.Text.RegularExpressions\": \"4.0.0.0\",\n            \"System.Threading.Tasks\": \"4.0.0.0\"\n        },\n        \"compilationOptions\": {\n            \"define\": [\"PORTABLE\"]\n        }\n    },\n    \".NETPortable,Version=v4.0,Profile=Profile344\": {\n        \"frameworkAssemblies\": {\n            \"mscorlib\": \"2.0.5.0\"\n        },\n        \"compilationOptions\": {\n            \"define\": [\"PORTABLE\", \"PORTABLESHIM\"]\n        }\n    },\n    \".NETPortable,Version=v4.0,Profile=Profile328\": {\n        \"frameworkAssemblies\": {\n            \"mscorlib\": \"2.0.5.0\"\n        },\n        \"compilationOptions\": {\n            \"define\": [\"PORTABLE\", \"PORTABLESHIM\"]\n        }\n    }\n  }\n}\n. Could it be an issue with the new JSON parser?\n. All main functions of DNX work in version 1.0.0-beta5-11749\n. I do not use JSON.NET in this project at all.\n. This can be worked around by using stripAnsi from npm in the gulp task.\n. DNX console applications are DLLs not EXEs and require the DNX to run. They cannot be run like standard console application that do have an entry point at the IL level.\n. But if one does a console app meant to be run by DNX on coreclr, t would still not need an entry pint at teh IL level as that would be in the dnx loader. In other words you would still run by using dnx . run having coreclr as the active CLR.\n. @xanather you are forgetting that dnx apps are run using the dnx command, not by using CoreRun directly.\n. I set the exec bit in dnu by hand already. I will update dnvm.\n. Type gives the exact location of the binary. Whereis gives way more information and may include the version of the binary that the user compiles by hand and the one installed by the package manager for the distribution. So if you are trying to find mono type is better.\n. Also type appears to be a bash builtin i.e. its bash that provides it. So you may be able to do Process.Start on it directly.\n. If you will use whereis, you may get multiple location results for a binary. Always prefer /usr/local paths to /usr/ paths as that's what the PATH on UNIX systems ensures. I.e. it would alarm many people, me included if it is not like that.\n. Do consider that some .NET 4.6 stuff is pending for inclusion in mono under this PR: https://github.com/mono/mono/pull/1902\n. My PR to mono puts stuff in place to compile a project that uses net46 as a TFM, adds Array.Empty and the new APIs under the Task class. I am still awaiting their approval as they seem unsure on whether .NET 4.6 will be under the 4.5 folder or if it will use a separate folder altogether.\n. Them mono people told me that they would be merging .NET 4.6 changes from the reference sources. If only it was released on github.\n. The lock file is being updated, but that exception can still concern people.\n. Since that package is a compiler provider, anything that uses it is also failing to restore and failing to build since the dependency package is not building.\n. Its local source code.\n. By some magic, deleting all of the package cache and restoring, the bug is gone.\n. When publishing nupkgs are created with versions like 1.0.0.0 in yet the publish process looks for 1.0.0.\n. Yes the dnu restore is completely fixed.\n. Will the diagnostic result replacements like DIagnosticMessage be in Compilation.Abstractions?\n. @anurse OK @davidfowl had told me that my compiler support package should only reference abstractions\n. I should already be referencing the compilation abstractions package so I should just have to deal with the API breakages.\n. IC. I do not make use of DTH. I pipe compilation output from dnu build using gulp into VSCode.\n. I do hope that the DTH will be used to handle all languages with an IProjectCompiler in the future.\n. The latest DNX is broken when running on Helios.\n. I observe such hanging with beta4 while restoring omnisharp. I do not observe this with the latest beta7 bits from the unstable feed.\n. Ping\n. I am asking about both. I experienced the issue while trying to compile some C#. I replicated the issue with my compiler (that spews a file with the references) and noticed that the facade was referenced by mistake. I ended up deleting the facade from the installation directory to get stuff compiling.\n. Given this project file for a project named 'useless':\n{\n    \"version\": \"1.0.0-*\",\n    \"authors\": [\"borgdylan\"],\n    \"description\": \"Test\",\n    \"compile\" : \"*.dyl;*/*.dyl\",\n    \"resource\" : [],\n    \"exclude\": \"msbuild.dyl\",\n    \"compiler\": {\n        \"name\": \"dylan.NET\",\n        \"compilerAssembly\": \"dylan.NET.K\",\n        \"compilerType\": \"dylan.NET.K.DNProjectCompiler\"\n    },\n    \"dependencies\": {\n    },\n    \"compilationOptions\": {\n        \"define\": []\n    },\n    \"commands\": {\n    },\n    \"frameworks\": {\n        \"dnx451\": {\n            \"dependencies\": {\n                \"dylan.NET.K\" : {\"type\": \"build\", \"version\": \"\"}\n            },\n            \"frameworkAssemblies\": {\n                \"System.IO.Compression\": \"\",\n                \"System.IO.Compression.FileSystem\": \"\"\n            }\n        }\n    }\n}\nI get the following passed in (list of references are as the DNX gives them to me):\n```\nrefasm \"memory:dylan.NET.K.dll\"\nrefasm \"/usr/local/lib/mono/4.5/Facades/System.IO.Compression.dll\"\nrefasm \"/usr/local/lib/mono/4.5/System.IO.Compression.FileSystem.dll\"\nrefasm \"/usr/local/lib/mono/4.5/mscorlib.dll\"\nrefasm \"/usr/local/lib/mono/4.5/System.dll\"\nrefasm \"/usr/local/lib/mono/4.5/System.Core.dll\"\nrefasm \"/usr/local/lib/mono/4.5/Microsoft.CSharp.dll\"\nrefasm \"/home/dylan/.dnx/packages/Microsoft.Framework.Runtime.Compilation.Abstractions/1.0.0-beta7-12264/lib/dnx451/Microsoft.Framework.Runtime.Compilation.Abstractions.dll\"\nrefasm \"/home/dylan/.dnx/packages/dylan.NET/11.7.1.1/lib/net40/C5.dll\"\nrefasm \"/home/dylan/.dnx/packages/dylan.NET/11.7.1.1/lib/net40/Extra.Tasks.dll\"\nrefasm \"/home/dylan/.dnx/packages/dylan.NET/11.7.1.1/lib/net40/IKVM.Reflection.dll\"\nrefasm \"/home/dylan/.dnx/packages/dylan.NET/11.7.1.1/lib/net40/Mono.CompilerServices.SymbolWriter.dll\"\nrefasm \"/home/dylan/.dnx/packages/dylan.NET/11.7.1.1/lib/net40/System.Interactive.dll\"\nrefasm \"/home/dylan/.dnx/packages/dylan.NET/11.7.1.1/lib/net40/dnc.dll\"\nrefasm \"/home/dylan/.dnx/packages/dylan.NET/11.7.1.1/lib/net40/dnr.dll\"\nrefasm \"/home/dylan/.dnx/packages/dylan.NET/11.7.1.1/lib/net40/dnu.dll\"\nrefasm \"/home/dylan/.dnx/packages/dylan.NET/11.7.1.1/lib/net40/tokenizer.AST.dll\"\nrefasm \"/home/dylan/.dnx/packages/dylan.NET/11.7.1.1/lib/net40/tokenizer.CodeGen.dll\"\nrefasm \"/home/dylan/.dnx/packages/dylan.NET/11.7.1.1/lib/net40/tokenizer.Lexer.dll\"\nrefasm \"/home/dylan/.dnx/packages/dylan.NET/11.7.1.1/lib/net40/tokenizer.Parser.dll\"\nrefasm \"/home/dylan/.dnx/packages/Microsoft.Framework.Runtime.Abstractions/1.0.0-beta7-12264/lib/dnx451/Microsoft.Framework.Runtime.Abstractions.dll\"\ndefine DEBUG\ndefine TRACE\ndefine DNX451\ndebug on\n[assembly: System.Reflection.AssemblyTitle(\"useless\")]\n[assembly: System.Reflection.AssemblyInformationalVersion(\"1.0.0\")]\n[assembly: System.Runtime.CompilerServices.RuntimeCompatibility(), WrapNonExceptionThrows = true]\n[assembly: System.Runtime.Versioning.TargetFramework(\"DNX,Version=v4.5.1\")]\nassembly useless dll\nver 1.0.0.0\n``\n. In line 2 I expected#refasm \"/usr/local/lib/mono/4.5/System.IO.Compression.dll\"`\n. I have checked that the non-facade Sys.IO.Compression does exist on disk at that location.\n. This bug is still being a pain. It wasn't wise to make a System.IO.Compression PCL assembly as it \nis being chosen over the real assembly in the desktop profile.\n. Initially I did not reference it all. I had to reference it just to carry out a workaround. The reference I added is with the upper case 'S' and that's the actual package name according to the myget feed.\n. Publish is currently plagued by issues where I have to apply workarounds including the now 'normal' issue where  Package.1.0.0.0.nupkg is made while Package.1.0.0.nupkg is expected.\n. I think the case is that this package is needed while publishing and since the publish code was written on Windows, the spelling mistake went unnoticed. I am on Linux and the filesystem is 100% case sensitive!\n. Also, remember that the package in question, was not referenced at the beginning with the error still happening. Something in the ASP.NET 5 package ecosystem has the bad reference.\n. The violation is here https://github.com/aspnet/Mvc/blob/e96b4d7b94112fd087628544e3f9a3f1f3f3b08d/src/Microsoft.AspNet.Mvc.Razor/project.json line 18\n. This is due to the new versioning code which requires the fourth number only if it is not zero. Set it to 1.0.0 instead and you will have no problems publishing etc.\n. Currently if I do not type 1.0.0 i get many issues on publish. i ended up normalizing them by hand as it was getting too tedious to publish apps. \n. Would this be compiler agnostic. With the current state of the code, my compiler provider is getting any .resx files compiled into .resources automatically before they are passed in. I will be testing any new changes to resource compilation against my provider to make sure all of this works with more than just roslyn.\n. Add these sources to your nuget config file\n<add key=\"Roslyn\" value=\"https://www.myget.org/F/roslyn-nightly\" />\n<add key=\"DotNetFx\" value=\"https://www.myget.org/F/dotnet-corefx\" />\n. Errors in /var/www/Code/dylannet/vnext/NowinServerFactory/project.json\n    Unable to locate Nowin >= 0.17.1\nNuGet Config files used:\n    /home/dylan/.config/NuGet/NuGet.Config\nFeeds used:\n    http://www.myget.org/F/aspnetwebstacknightly/\n    /var/www/nugetfeed\n    https://nuget.org/api/v2/curated-feeds/dotnetframework/\n    https://www.myget.org/F/aspnetvnext/api/v2/\n    https://www.myget.org/F/npgsql-unstable/api/v2/\n    https://www.myget.org/F/roslyn-nightly/\n    https://www.myget.org/F/dotnet-corefx/\n. The same happens with 1.0.0-beta8-15118. I think its that package version normalization thing again.\n. Why isn't NuGet gallery listed? I certainly have it added:\n\ufeff<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageRestore>\n    <add key=\"enabled\" value=\"True\" />\n  </packageRestore>\n  <activePackageSource>\n    <add key=\"All\" value=\"(Aggregate source)\" />\n  </activePackageSource>\n  <packageSources>\n    <add key=\"ASP.NET/EF MyGet\" value=\"http://www.myget.org/F/aspnetwebstacknightly/\" />\n    <add key=\"My NuGet\" value=\"/var/www/nugetfeed\" />\n    <add key=\".NET NuGet\" value=\"https://nuget.org/api/v2/curated-feeds/dotnetframework/\" />\n    <add key=\"ASP.NET vNEXT\" value=\"https://www.myget.org/F/aspnetvnext/api/v2\" />\n    <!--<add key=\"NuGet v3\" value=\" https://api.nuget.org/v3/index.json\" />-->\n    <add key=\"Official NuGet Gallery\" value=\"https://www.nuget.org/api/v2/\" />\n    <add key=\"Npgsql\" value=\"https://www.myget.org/F/npgsql-unstable/api/v2\" />\n    <add key=\"Roslyn\" value=\"https://www.myget.org/F/roslyn-nightly\" />\n    <add key=\"DotNetFx\" value=\"https://www.myget.org/F/dotnet-corefx\" />\n  </packageSources>\n  <disabledPackageSources>\n    <!--<add key=\"NuGet v3\" value=\"true\" />-->\n    <add key=\"Official NuGet Gallery\" value=\"true\" />\n  </disabledPackageSources>\n</configuration>\n. It worked without disabledPackageSources being present in the file. This is an incompatibility with soem tools like MonoDevelop/Xamarin Studio which add the element inside teh config.\n. So we may need to move the bug to one of the nuget repos?\n. Will this be done specifically for roslyn? Compilers based on IKVM.Reflection should not have issues signing with an SNK on mono. So the decision of not supporting SNK on mono should be the compiler's decision.\n. When I tried in another project with a later DNX, the wwwroot directory was copied over. I am not sure if the dependencies are affecting this. The affected project happens to use Hangfire where two separate versions are being pulled by the actual dependencies in project.json.\n. No need, when trying to cross publish for dnx-clr-win-x64.1.0.0-beta8-15530 (the latest), the issues disappear. It might have been temporary regression due to code churn.\n. The issue is manifesting itself again. Also why is dnu trying to chmod a dnx meant for Windows? That makes the publish fail.\n. Is there some article about .NET Generations?\n. Wren the switch to the http platform handler happens, would newly published projects work on the versions of IIS that Helios runs on today?\n. My question was, would the new technique work on IIS 8.1+ even if it means that I have to make the process path absolute by hand?\n. @davidfowl so the module is available as an MSI/EXE/MSU?\n. If the assemblies will be removed consider changing some of those projects to normal ones. There are utilities like the CommandlineUtils that get used by people that are not necessarily on c#. In that case they cannot use the shared source code so they would need to reference the compiled library instead. \n. That would be the right thing to do. Do you make a non-sources build for anything that is non-internal and useful to the DNX ecosystem in general?\n. Automatic injection of an attribute would mean that specialized compiler forks would be needed just for use with DNX as specific logic would be needed just like with \"static  main\". Using an attribute from a package or using a naming convention would be best.\nAlso why would specific searching be carried out apart from looking for Program.Main in the project that dnx run gets invoked on?\n. I meant that compilers would need to apply an attribute like is done while setting the entry point. Such changes are usually done inside the compilers themselves and not externally.\n. With this option, a compiler will still have to use the \".dll\" extension when ordered to spit out files to disk?\n. @davidfowl I thought the answer was not meant for me. Thanks for clearing this. Now I can implement the right behaviour in my provider.\n. I found it easy to implement this for my own language support. Would this have any application apart from writing DNX hosts or command line tools to have no dependencies that are external to the BCL?\n. This still happens with the aspnetcidev bits.\n. It is installed just its version 1.0 so I had to use absolute paths. I expected dev builds for rc 1 to not crash with it since beta8 is expected to be rid of Helios.\n. The proxying part worked and Nowin (I use it instead of Kestrel) received requests ok. I know this as requests and responses were logged in the stdout logs of the platform handler module. So the issue is not coming from the platform handler module. Also AFAIK the platform handler has been on azure for ages to proxy over to tomcat etc.\n. Could the issue be that there is no runtime id for windows x64 that is not on helios?\n. I cant try it locally since I do not have any windows installs here. Using a similar setup with Nowin on Linux works fine however (using the same package versions).\n. I did try to patch the DNX not to throw the exception (returning a dummy IRuntimeEnvironment instead) but all was in vain. It might be that I did patch each dll that include teh RuntimeEnvironmentHelper class.\n. I am writing a repro. Would code in a git repo  and a published image suffice?\n. I am currently testing on azure.\n. I managed to reproduce this with a ridiculously simple MVC project. The repo is https://github.com/borgdylan/aspnet5-repros. The bin/output dir has an image that is deployable to azure with proper settings for the platform handler. The DNX used in for the 64bit windows CLR. Going to api/Home should yield \"Hello World\" string but the exception triggers instead. I have tested the code on Linux via mono successfully.\n. To clarify: aspnetrepro/bin/output is the directory to FTP over to azure (I did test it on azure myself)\n. Ping\n. Its published in teh repo ie. dnx-clr-win (x64) v. 1.0.0-rc1-15798 (from aspnetvnext) https://github.com/borgdylan/aspnet5-repros/tree/master/aspnetrepro/bin/output/approot\n. The bug is also present in later versions present in the aspnetcidev feed as well.\n. Is there any news on this bug?\n. It works on Linux locally. Also in a more complex example, I logged incoming requests (while on Azure). All requests came in. The exception was triggered when I called into an MVC controller. Static Files works as expected. From this I concluded that the proxying was working as needed.\nI am overriding port 5001 in web.config to use the one given by IIS: https://github.com/borgdylan/aspnet5-repros/blob/master/aspnetrepro/bin/output/wwwroot/web.config#L6\n(Look at the arguments passed to web.cmd)\n. N.B. The return code is 500. If the proxying failed a 502 would be returned by IIS instead.\n. I am at work so I can try on our WIndows Server VM.\n. I just installed the platform handler and will be testing shortly.\n. I managed to repro the issue on IIS 8 with platform handler 1.0.\n. To prove that the proxying worked again this time round, below I attach the output of the developer exception page middleware:\n```\n\ufeff\n<!DOCTYPE html>\n\n\n\nInternal Server Error\n",
    "muratg": "https://github.com/aspnet/XRE/issues/464\n@KKhurin do you have any proposals/PRs for this?\n. https://github.com/aspnet/dnx/issues/1816#issuecomment-100063615\n. https://github.com/aspnet/Announcements/issues/24\n. ANIs are dead :/\n. @davidfowl lock file?  can we close this one?\n. This issue was moved to dotnet/cli#609\n. ANI's are no more :/\n. Fixed. Thanks @ChengTian!\n. Closing per last comment\n. We need to get this in for RC\n. @moozzyk \n. @moozzyk I think you wanted to do this in beta 8, but let me know if it won't fit.\n. Move now? :)\n. @troydai closing this. If there's still an issue around bundle, please reactivate\n. @davidfowl do you want to keep this bug for the case where frameworks aren't supported? Or is it good to close?\n. @ChengTian @davidfowl closing this.... repoen if more work is needed here\n. @davidfowl Is more investigation needed here, or is this good to close?\n. Closing for now. Reopen as necessary.\n. @davidfowl is this still an issue? putting this into rc1 for now...\n. No ANIs\n. @lodejard Needed for RC1? And will you have time to do it?\n. This issue was moved to dotnet/cli#606\n. This issue was moved to dotnet/cli#608\n. This issue was moved to dotnet/cli#605\n. This issue was moved to dotnet/cli#607\n. NO ANIs anymore :/\n. Do we need to file this in CoreCLR issue tracking system?\n. @troydai Can you try this with your hacked up code to pass Culture across threads?\n/cc: @DamianEdwards \n. @troydai was this with your hack?  in other words, does it still fail to the proper comparison with your hack?\n. @GrabYourPitchforks does preprocessing feature solve this?\n. @pranavkm do we still have an issue here?\n. What do we want to do with this bug?\n. @Praburaj Do we still have this issue on CoreCLR?\n. @ChengTian @pranavkm what's the status of this issue?\n. @glennc do we need this in RC1?\n. Order is important.  Options come first in the command line.\nkpm -v restore works.\n@suhasj @Eilon If you guys think we should do be more liberal with ordering please file another bug.\n. Hi @xavierdecoster do you still have this problem?  Thanks.\n. @Praburaj Can you clarify the scenario a bit?\n. no ANIs anymore :/\n. :+1: Changing title to make this a perf. test item.\n. @davidfowl is it worth the potential perf penalty to read the files, and check if they're correct and not update them if not needed?\n. #846\n. Good to close @davidfowl ? \n. @davidfowl rc1?\n. @lodejard @davidfowl do you guys want this for RC1?  do either of you have any cycles?\n. No ANI's anymore. :/\n. Closing this.  If this is still an issue, please reopen.\n. @davidfowl/@lodejard ping.  Want to get this in RC1 or is it OK to backlog? Please assign the milestone accordingly.\n. @davidfowl should this be moved to CoreClr issue tracking system?\n. @troydai Does the work you did with carrying Culture across threads solve this one and #600? \n/cc: @DamianEdwards \n. I believe tooling and runtime changes required are still pending for this change. Based on this, moving to Beta5.\n. Tracked here: https://github.com/aspnet/Hosting/issues/272\nClosing this one.\n. @anandjp Circular dependencies are not supported.  This is actually called out in the exception message. If there are other issues, please refile. Thanks.\n. Circular dependencies are not supported right now, but additionally there are 2 other issues.\n-  KLR crash. (This is actually due to a stack overflow, and not because of the exception above)\n- KPM restore is actually installing some packages with Circular Dependencies if the second dependency is not already on disk.  (If it is on disk, it throws the error above)\nThese two issues are tracked here: #997 \n. This issue was moved to dotnet/cli#610\n. @lukewaters Does this still repro?\n. What's the error/warning output of other similar tools with \"quiet\" option? \n/cc: @lodejard @davidfowl \n. :+1: \n. Removing duplicate label since we have decided to keep this one open.\n. Not valid anymore.  https://github.com/aspnet/Announcements/issues/24\n. @davidfowl I don't think you're looking into this.  Could you move to another milestone (or in 1.0.0 backlog?)\n. Related: language support WIs\n. Also, see Chris' commit today: https://github.com/aspnet/WebListener/commit/3fdf6563532b167de10106105a03c427ee72acc5\n. Ugh templates. https://github.com/aspnet/Templates/issues/66 \n. @ChengTian Can you have a look?\n. @ianhong does the folder contain any files or is it empty?\n. This can even happen when the WebListener is killed with the Enter key if there was pending IO (for example after a request)\nWe should fix this.  In the meantime, you can use following commands to reset colors as a workaround:\n- Windows: color\n- Mac/Linux: reset\n. Let's decide what to do with this in Beta 7\n. @dougbu I share those emotions :)\n. @dougbu Beta5\n. This issue was moved to dotnet/cli#604\n. @ChengTian Can you have a look?\n. This issue was moved to dotnet/cli#603\n. @Praburaj , please send your suggestions via a PR.\n. @davidfowl moving this to backlog for now.\n. If this should go in beta 5, we need to do it today or tomorrow.\n. @troydai is this fixed?\n. @troydai can you check if k crossgen is still a command?  I hear Lou might have removed it.\n. @troydai is this fixed?  If so can you close?\n. @davidfowl can this be closed?\n. @PradeepKadubandi is this OK to close?\n. Looks like Dependencies issue is also fixed after Fowler's check-ins.  Closing this one.\n. @Xiaohongt I believe you haven't build kruntime before. :)  Can you to build from this fork with the instructions?\n. This issue was moved to dotnet/cli#602\n. @davidfowl do we want to take this in Beta2?\n. Referencing folders in cmdline makes sense to me, though maybe the name can be something like --to-folder or --target-folder?   \n@davidfowl @lodejard any thoughts?\n. :shipit:\n. This issue was moved to dotnet/cli#601\n. :+1: \n. YAY!\n. @davidfowl still Beta5?\n. Yup, @moozzyk essentially took over this while he's working on servicing.\n. @ChengTian Could you also fix MusicStore? Are there any other apps in our repos need changing because of this fix?\n. :shipit:\n. This issue was moved to dotnet/cli#600\n. This behavior changed quite a bit.  Closing\n. dup https://github.com/aspnet/dnx/issues/1890\n. @davidfowl where will this change happen?  FYI, you haven't modified the milestone (Backlog).\ncc @anurse \n. Wherever publish code will live in? \n. :shipit:\n. Closing in favor of #402\n. Looks like this is doable.  Closing this one.\n. @MattGal Thanks for reporting the issue. I was able to reproduce the problem and we'll investigate.\nLooks like System.Net.Http is being renamed to Microsoft.Net.Http, and they are using System.Net.Http as a sort of a meta package.  If you need to work around this issue, please reference Microsoft.Net.Http directly. \n. An additional bug exists in KPM.\nIn Matt's repro (where you have System.Net.Http as a dependency in your project.json):\n- If you don't have a local Microsoft.Net.Http in your .kpm folder, kpm restore happily installs it.\n- If you already have Microsoft.Net.Http there kpm throws the following error:\n```\nSystem.Exception: TODO: Circular dependency references not supported. Package 'System.Net.Http'.\n   at Microsoft.Framework.PackageManager.RestoreOperations.<>c__DisplayClass0.b__2(String name)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__1.MoveNext()\n----------\n```\n. Is this actually considered a cycle though? Shouldn't we treat framework assembly dependencies differently than package/project dependencies?\nSystem.Net.Http.nuspec\n<?xml version=\"1.0\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\">\n  <metadata>\n    <version>2.0.20710.0</version>\n    <authors>Microsoft</authors>\n    <owners>Microsoft</owners>\n    <licenseUrl>http://www.microsoft.com/web/webpi/eula/MVC_4_eula_ENU.htm</licenseUrl>\n    <projectUrl>http://www.asp.net/web-api</projectUrl>\n    <dependencies>\n      <dependency id=\"Microsoft.Net.Http\" version=\"[2.0.20710.0, 2.1)\" />\n    </dependencies>\n    <id>System.Net.Http</id>\n    <title>System.Net.Http</title>\n    <requireLicenseAcceptance>true</requireLicenseAcceptance>\n    <description>Legacy package, System.Net.Http is now included in the 'Microsoft.Net.Http' package.</description>\n    <summary />\n    <language>en-US</language>\n  </metadata>\n</package>\nMicrosoft.Net.Http.nuspec\n<?xml version=\"1.0\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd\">\n  <metadata>\n    <version>2.0.20710.0</version>\n    <authors>Microsoft</authors>\n    <owners>Microsoft</owners>\n    <licenseUrl>http://www.microsoft.com/web/webpi/eula/MVC_4_eula_ENU.htm</licenseUrl>\n    <projectUrl>http://www.asp.net/web-api</projectUrl>\n    <frameworkAssemblies>\n      <frameworkAssembly assemblyName=\"System.Net.Http\" targetFramework=\".NETFramework4.5\" />\n      <frameworkAssembly assemblyName=\"System.Net.Http.WebRequest\" targetFramework=\".NETFramework4.5\" />\n    </frameworkAssemblies>\n    <id>Microsoft.Net.Http</id>\n    <title>Microsoft .NET Framework 4 HTTP Client Libraries</title>\n    <requireLicenseAcceptance>true</requireLicenseAcceptance>\n    <description>This package provides a programming interface for modern HTTP applications. This package includes HttpClient for sending requests over HTTP, as well as HttpRequestMessage and HttpResponseMessage for processing HTTP messages.</description>\n    <language>en-US</language>\n  </metadata>\n</package>\n. @davidfowl is this good to close?\n. Do you mean all the commands in all the dependencies should be available?   What happens if there's a naming clash?\n. Should be done as part of localization/internationalization work.\n. @davidfowl actually closing this one.\n. Closing per @davidfowl comment.  @Tragetaschen please re-open if the exceptions are not easy to understand.\n. @davidfowl @lodejard What are your thoughts on this one?\n. @pranavkm is this partially implemented already?\n. Closing this one.  If there's still work to be done, feel free to reopen.\n. Actually closing now :)\n. @anurse @davidfowl is this still an issue?\n. @troydai @anurse should this be assigned to Troy?\n. @troydai is it a regression?\n. Moved to beta6 as per the discussions around pending runtime work.\n. This issue was moved to dotnet/roslyn#7467\n. @victorhurdugaci let's get this prioritized. Fundamentals team has started testing these things already. :)\n. This issue was moved to dotnet/cli#599\n. Reopened to triage for nuget.\n. (Already copied to CLI repo)\n. @ChengTian let's get this once the branching is done.\n. Question from triage: Should we even allow framework not being specified?  Should we throw instead?\n/cc: @davidfowl @loudej \n. We plan to make servicing and security related work a \"theme\" in beta6.\n. This issue was moved to dotnet/roslyn#7466\n. @victorhurdugaci please sync up with Justin from nuget team on this one.\n. @troydai please sync-up on @davidfowl if you're not up to date on the leak. We can move this to beta 7 as well.\n. This issue was moved to dotnet/cli#598\n. /cc: @davidfowl \n. @anurse please have a look as part of the current work.\n. @davidfowl you have some cycles?\n. Closing this one based on Brice's last comment.\n. :shipit:\n. Do you need to update kre.coreclr.cpp as well?  Also, could you file a bug and link here so that whatever release this goes in, it'll be tracked for the release notes.\n. :shipit:\n. :shipit:\n. Assigning to @BrennanConroy.   /cc: @ChengTian for CRs later.\n. @pranavkm do you have a repro for this issue?\n. Looks like we might need to identify packages which are already is being downloaded by someone else, and skip.  @pranavkm what do you think?  I expect more folks to hit this.\n. @pranavkm are you looking at this for beta4? (i guess there are 3 or so bugs tracking this.. we should leave only one and close the others as dups)\n. @pranavkm Were you able to look into this?\n. @pranavkm beta4 or beta5?\n. Checked with @pranavkm.  This was fixed.\n. @DamianEdwards if you're planning to do this at the same time as the CoreCLR one, please feel free to self-assign.\n. @ChengTian Would Matcher be applicable for this case?\n. Backlogging for now.  We can bring it back if there's interest and we can get resources to work on it.\n. This issue was moved to dotnet/cli#597\n. Dup: https://github.com/aspnet/dnx/issues/1298\n. @anurse Is the lock file format finalized?  And is sorting as part of that?\n. @BrennanConroy Make sure you check with tooling team, MVC and @troydai to ensure this doesn't break them.  They might need to remove this switch from their scripts.  Also check stress CI as well.\n. @barrytang is Tooling team OK with this?\n. @davidfowl @loudej are we going with Louis' suggestion?\n. @moozzyk \n. :shipit: \n. @Praburaj could you have a look? This is a blocker for MVC perf.\n. /cc: @DamianEdwards \n. Seems fixed.\n. @davidfowl does this still repro?\n. @CarlosFreire what's the dnx version that you're using? Can you try a build newer than 12265?\n. This is fixed in either Beta 4 or 5.  Assigning to @BrennanConroy to close.\n. Moving to 1.0.0 milestone for now. We'll retriage in RTM timeframe.\n. Closing per @MattGal's last comment. We can revisit later if there's more feedback.\n. @ChengTian Do you have time to look into this? It's blocking a tooling scenario as described above.\n. @Eilon\n. https://github.com/aspnet/dnx/issues/997\n. Ugh. Move to beta5?\n. @davidfowl is prepending \"fx/\" to the reference assemblies something we'll keep or do we need to find a better solution. IOW, is this one good to close?\n. Putting to 1.0 milestone for now. We can update later once Victor syncs up with Louis\n. @tugberkugurlu: @victorhurdugaci and @lodejard will talk about this and potential designs.\n. @tugberkugurlu That's under discussion currently :)\n. This issue was moved to dotnet/cli#594\n. In addition to @ChengTian's comment, please also file a bug to track the work to remove legacy names later.\n. Looks good to me, though I'd like to see @BillHiebert have a look as well.  :shipit:\n. :shipit: \n. :shipit:\n. This looks good to me.  Since @davidfowl is around, i'll let him put the shipit. :smile: \n. @anurse let me know if you are not able to spend time on this one.\n. Is there other work remaining on this?  Or is this good to close?\n. :+1:\n. Changes look good to me.  I'll get someone else with more experience on the project files to put the ship it though.\n. :shipit:\n. :shipit:\n. /cc @ChengTian \n. Looks like we're still looking for the right fix. Moving to Beta 5.\n. adding @pranavkm in case he has some ideas.. \n. @ChengTian can you look at the PR to see if we can get this in?\n. Hi @lefb766, yes adding a test case would be great.  Thanks!\n. Looks much better to me.\n. @lodejard, re: discussion this morning in the nuget standup.\n. @lodejard are we doing this for RC?   /cc @davidfowl \n. @davidfowl Recent work on Portable PDBs changed this?\n. @Praburaj were you running kpm restore while saving the file or was that kicked off by VS?\n. @BrennanConroy this will work for a single project too, right?\n. @sayedihashimi have a look at latest builds as #1376 is checked in. Closing this one.\n. Moving to backlog\n. We'll go with @anurse's suggestion. We need to ensure tooling doesn't break.  \nAlso let's keep dnx . run behavior so that we don't break people who are super used to this. We'll remove this later. \n. Based on a talk with @davidfowl early this morning, postponing this to beta 7.  We'll also start integrating with tooling on a much higher frequency soon so we'll find any breaking issues ASAP.  It's just late to check this in beta 6.\n. Putting this one in the Backlog.\n. @anurse is this still valid? \n@cc @davidfowl \n. This issue was moved to dotnet/cli#593\n. :shipit:\n. @ChengTian yup, publishExclude makes more sense than bundleExecute to me.\nAlso, /cc: @mayurid \n. :shipit:\n. :shipit:\n. @davidfowl Are there any usage patterns you'd like that's not supported with the Wei's explanation above?  To me, it seems to cover all the important cases.  \nIt's not the same syntax as build but I feel that's fine.\n. This issue was moved to dotnet/cli#592\n. Looks good to me (apart from the comments above)\n:shipit:\n. @davidfowl Feel free to update the list. We should get started with this soon.\n. This is done though we won't be releasing the cross plat DNXs in Beta 6, so closing and moving to Beta 7.\n. :+1:\n. :shipit:\n. :shipit: (first two commits)\n. Closing this one as this is by design.  Error message improvements are tracked in the Helios bug 127\n. @dg9ngf That's because that's in a currently internal project on GitHub.  However, the issue is fixed in the dev branch already, and you'll be getting a DirectoryNotFoundException in this case.  Feel free to test it with the beta5 bits.\n. @troydai it's OK to move this to beta7 if it doesn't fit \n. I couldn't reproduce with dnu publish --no-source with the current bits either. I'll be testing with the final bits and close. Assigning to myself.\n. /cc: @joeloff \n:shipit:\n. Ugh\n. This issue was moved to dotnet/cli#590\n. Fix the typos, and :shipit:\n. Are we going to do anything with this, or should we just remove the argument?\n. This is an internal implementation detail.\n. Yes, the API is for use internally and not something we would like to officially support at this point, at least for our V1. \nThat being said, the repo is OSS with Apache license, so if you'd like to use it, you can of course do that. :) \n. dnx-crossgen sounds fine to me.  Unless @davidfowl has any objections, let's go with that name.\n. :+1:\n. cc: @glennc \n. @davidfowl file a bug on CoreCLR to expose this functionality?\n. @danroth27 \n. This is horrible, but not sure if there's anything we can do about it at the moment. Putting it into Backlog for now.\n. > I do not think that the current desktop or CoreCLR hosting APIs expose an easy way to make the shutdown work like standalone desktop apps today.\n@jkotas Any plans to add this support in CoreCLR?\n. Cool, filed: https://github.com/dotnet/coreclr/issues/1648 \nTracking as External (https://github.com/aspnet/External/issues/46) and closing this one.\nThanks for the report @akoeplinger \n. Thanks everyone!  Closing this one.\n. I don't think this still repros\n. Approved for Beta4.\n. https://github.com/aspnet/dnx/issues/1601\n. https://github.com/aspnet/dnx/issues/1425 has the attribute information\n. @pranavkm @troydai should we do this now?\n. @pranavkm?\n. @davidfowl never or in beta6?\n. Is this still an issue? @PradeepKadubandi @victorhurdugaci \n. :watch:\n. @victorhurdugaci , can you have a look?\n. @cherrydev Thanks... adding discussion label to this and closing as there doesn't seem to be a need for a code change on dnx.  Feel free to continue discussing this here, or on Jabbr.\n. @borgdylan Yup.  See https://github.com/aspnet/dnx/issues/2428 where this was fixed.\n. @davidfowl What is the verdict here?\n. :watch:\n. Closing since there wasn't a lot of recent discussion on this one.\n. Brennan, can you see if this repros?  This was reported by the tooling team.\n. Do we need more TFMs? @anurse \n. This issue was moved to dotnet/cli#589\n. @anurse.\nAre we supporting this (and #1679) in V1?\n. This issue was moved to dotnet/cli#588\n. @davidfowl What was the outcome of your investigation?\n. @davidfowl we need to close on the decision here, and perhaps implement it as part of the ongoing nuget work.\n. @anurse One of the important ones we should fix.\n. @gurunathancs1991 I believe frameworkAssemblies section is for specifying .NET Framework assemblies.  Instead of using GAC, I recommend using dnu wrap to wrap the particular assembly you'd like with your project.  This would give you the option to use CoreCLR in the future, and also potentially go cross platform.\nThat being said @davidfowl do we support version info for frameworkAssemblies?  Should we just throw if there's anything specified there?\n. @tugberkugurlu Looks like push to nuget.org was successful (http://www.nuget.org/packages/k-http/0.1.0-beta-002) but symbols failed to push. Changing the title to reflect this. Please revert if I'm mistaken.\nI think @davidfowl was talking about issues with the symbol source.\n. /cc: @davidfowl @anurse \n. @ericstj Do you still need this?\n. Would this help in other repos with long running functional tests?\n. Looks good to me too, but AppVeyor seems to be failing? It seems to be passing with other branches, so I wonder if these changes is the cause of the failure.\n. Dup: https://github.com/aspnet/dnx/issues/30\n. Thanks @Jabe! \n. This issue was moved to dotnet/cli#587\n. Language support (including VB.NET) is not in scope for V1. Putting this one to Backlog as well. \n. Thanks folks, as @jskulavik pointed out, the team is overloaded with V1 so had to cut some features to make room for core features + stability. These were hard cuts to make, and we're planning to bring most of these back post V1. (That's why these issues are not closed.)  \nThat being said, I personally love F# and hope to see some community supported F# support in the meantime. \n. Closing. Reopen if it's still needed.\n. When we internalized the JSON parser (and moved away from json.net, we decided not to add comment support on json files, as they are not valid per the RFC.\n. Or do you guys mean a switch which would enable/disable XML comment generation on source code?\n. @Anderman That class is in MVC repo, please file a bug in that repo.  This bug in particular tracks ability to generate XML doc comments file for your libraries and apps.\n. This issue was moved to dotnet/cli#585\n. @victorhurdugaci is this still a problem?  If not, let's close.\n. @vijayrkn Is this still a problem?\n. /cc: @ChengTian \n. If we can't decide/agree on a reasonable fix, I propose postponing it to beta 7\ncc @mayurid \n. Didn't repro with my basic smoke level testing.  Closing.  Please reopen if you still hit this @vijayrkn \n. @salerth Thanks for the contribution!\n@ChengTian can we get this in by tomorrow?\n. Looks good to me.  :shipit:\n. @fals Can you paste the output of dnvm list?\n. The exception you shared seems like a PowerShell exception which is weird. \nCan you try %userprofile%\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta4\\bin\\dnu.cmd restore\nAlso, just to verify: Is the folder in dnvm list C:\\Users\\FilipeAugusto\\.dnx\\runtimes instead of C:\\Users\\FilipeAugusto.dnx\\runtimes?\n. What's the output of where dnu?\n. @fals Let us know if you're still hitting this issue with beta7/beta8 bits.\n. :shipit:\n. @davidfowl DNU or Tooling? :)\n. https://github.com/aspnet/dnx/issues/1494\n. Closing this one as #1494 tracks the work needed.\n. @troydai any guidance? \n. @troydai Does something like this exist currently?\n. Seems like a Roslyn issue.  Do you get this only with DNX based projects?\n. Ah, I see you filed a Roslyn bug as well: https://github.com/dotnet/roslyn/issues/2477 \n. @sawilde Looks like Roslyn folks require some more info from your side to proceed. I'm closing the bug on the DNX side since it does look like a Roslyn problem. If it turns out DNX needs investigation as well, please feel free to file a bug here. Thanks.\n. The current bug that tracks this is here: https://github.com/aspnet/dnx/issues/2332.  Closing this one.\n. Dup: https://github.com/aspnet/dnx/issues/1816\n. @BrennanConroy Can you update the checklist to reflect the current state?\n. @BrennanConroy Do we have a bug on Restore hangs with more than a couple concurrent requests (investigating) item on the CoreCLR side?  Main Beta 7 theme is cross plat so we'll need to move forward with this.\ncc @danroth27 \n. Can we file a bug to track it and add the bug number to the list?  Thanks.\n. @Tratcher \n. :watch:\n. Dup|: https://github.com/aspnet/dnx/issues/2871\n. Looks good to me.  Pawel already gave the ship it :)\n. Let's do this in Beta 6. \ncc @BrennanConroy \n. @davidfowl \n. We will be removing comment support as part of JSON internalization work.\n. Yup will do when the change is actually in.\n. @mgravell I understand the value, but based on an internal discussion, we have decided that it's not worth it to break the spec. \nTools like npm, bower etc already lack the support so there was already a bit of inconsistency between the JSON files within an ASP.NET 5 project. \nAlso, we expect 3rd party tools to interact with project.json files in the future, and we can't guarantee all their parsers will have support for comments.\nPlease see why Douglas Crockford decided to remove them from JSON here. \n. https://github.com/aspnet/dnx/issues/30\n. https://github.com/aspnet/Announcements/issues/24\n. @ChengTian \n. Feel free to send a PR.  BTW, this is now a sources package. :)\n. Feel free to send a PR.  BTW, this is now a sources package. :)\n. Feel free to send a PR.  BTW, this is now a sources package. :)\n. @bricelam Any particular design in mind for specifying argument expectations?\ncc: @victorhurdugaci \n. @glennc Could this be part of \"uber\" command line tool unification work item?\n. @ChengTian can you have a look? \n. @BrennanConroy Can we strip the codes like we do elsewhere before the checks?\n. :+1:\n. Is this a Roslyn bug? Should we file it there?\n. Closing this per the comments.  Please reopen if needed\n. .sln files are VS artifacts.  Modifying global.json file does not modify .sln files. It's OK to add your projects to the .sln file\n. :+1:\n. @davidfowl beta6?\n. This issue was moved to dotnet/cli#584\n. Need to do some profiling and finish. Moving to beta6\n. @Tratcher any ideas?\n. Assigning to @davidfowl to investigate the potential DTH issue, but to me there doesn't seem to be a functional impact. I think we can just close it.\n. @davidfowl @yishaigalatzer what's the plan?  are we changing nuget behavior or both?\n. NuGet/dnu work is currently slated to beta 6. \n. @yishaigalatzer @davidfowl we have to decide on this asap, and do the changes in either place early in beta 7.\n. Tentatively putting this in RC1. If we decide we're not going to do this, we'll just close.\n. @anurse agreed. Looks like nuget/home/1427 will be fixed \"soon\". \n. :+1:\n. :shipit: And also /cc: @joeloff for any setup changes\n. \"Microsoft.Framework.Runtime.Roslyn.Abstractions -> Microsoft.Dnx.Compilation.CSharp.Abstractions?\"\nHow about VB?  I propose we keep Roslyn in the name if we are going with these changes.\nAlso /cc @Eilon \n. Re Roslyn, I like Microsoft.Dnx.Compilation.Abstractions.\n@davidfowl \"Microsoft.Framework.PackageManager\"... did you mean Microsoft.Dnx.PackageManager?\nAlso, \"Make Microsoft.Framework.Project a separate global tool.\"  What would this global command do?\n. @victorhurdugaci reminded me that we'll need to decide on the final set of the names for the code in VS. If no one objects, we'll go with the names in @anurse's comment above.\ncc: @danroth27 @DamianEdwards @BillHiebert \n. @davidfowl sounds good to me.  let's close on this today and hand it over to @BillHiebert \n. I assume these recent changes in naming do not have any tooling impact. If there's any impact, we'll need to talk to the tooling team and sort out the schedule.\n. Cool, sounds good.\n. @victorhurdugaci \n. @ChengTian \n. First line of dnu --help seems good for this case. I don't think we need the (c), but adding @Eilon to let us know.\n. :+1:\n. Can you share your project.json?\n. Reproduced this on Mono with 1.0.0-beta5-11760.  @ChengTian any ideas?\n. I don't see anything wrong with the JSON, @troydai do you think this might be the case? \n. @ChengTian We'll need to do this in soon, so that WTE can start using it and testing with it.\n. We have a discussion today about this with @pranavkm @lodejard @troydai @Eilon \nOur CI was broken this morning as well.\n. This issue was moved to dotnet/cli#583\n. @yishaigalatzer \n. @davidfowl new publish should still support this IMO. \n. @victorhurdugaci \n. @davidfowl \n. We should raise an error in this case.\n. This issue was moved to dotnet/corefx#4971\n. Looks like a regression.\n. Closing this one. \n. Still valid?\ncc: @anurse \n. https://github.com/aspnet/dnx/issues/2332 is tracking the changes coming in for the lock file. Closing this one.\n. Looks good :shipit:\n. What version of dnx are you using?\ncc @troydai \n. @troydai Shouldn't it come transitively though?\n. Belated :shipit:\n. @moozzyk I think most of this is done, no?\n. :+1:\n. @moozzyk if this a quick fix, let's get it done with a check-in. If not, we can move this to backlog.\n. @moozzyk Let's get it in if this can be done quickly. Otherwise we can move this out since it's mostly a cosmetic change.\n. Looks good, though I wonder \"in project.json\" part is useful or not. I assume there won't be other DNX pieces which will execute scripts.   I think we can check-in like this, and revisit later.\n. @troydai \n. @TanukiSharp (6) is actually available (see @BrennanConroy's comment above).  \n(1) and (2)  -- bad idea, because based on the state of the sources, you may end up getting different versions of the packages and never know it.  \nLet us know if you have issues after using that command line switch. \n. @shaneholder Would you rather not fix your nuget.config?  Or did you mean just displaying the error, and also giving a helpful suggestion of using this option?\n. Reactivating based on @shaneholder's suggestion to give a helpful suggestion when there's a problem with one of the package sources in nuget.config, and adding it to the list of bugs that can be potentially moved to nuget.\ncc @yishaigalatzer @emgarten \n. @troydai is this finished?\n. :+1:\n. @danroth27 Are we documenting Servicing feature?\ncc @glennc \n. @BillHiebert cc: @rynowak for the test host protocol negotiation feature. I believe he's working on that. Closing this one which only tracks DTH feature.\n. This was done.\n. @moozzyk \n. @davidfowl was a decision reached on this?  \ncc @danroth27, this might need to happen in beta5.\n. Ugh.  cc @troydai \n. @davidfowl closing this for now. Reopen if there's remaining work.\n. Approved for Beta 5.\n. This issue was moved to dotnet/cli#582\n. This issue was moved to dotnet/cli#581\n. This issue was moved to dotnet/cli#580\n. This is approved for Beta 5. \n. Not sure if there's a proper solution to this. We are executing npm, bower etc through shell.  I suppose we can pipe StdErr to StdOut, though errors would then be not marked as errors, no?\n@davidfowl @lodejard \n. Should go to dnvm repo.  \ncc @glennc \n. Seems like the redirect issue. https://github.com/aspnet/dnx/issues/1907 \n. This issue was moved to dotnet/cli#579\n. This issue was moved to dotnet/cli#578\n. This issue was moved to dotnet/cli#577\n. I'm assuming this is tested, changes look good. \n:shipit:\n. This is a good idea. Let's try it in beta 6.\n. I actually like @bricelam's design and implementation.  cc: @davidfowl \nIf we decide to go with it, I'd like Brice to add some tests :)\n. This issue was moved to dotnet/cli#576\n. Is there still issues with this? @troydai \n. @ajaybhargavb is Caching pending the change?\n. @DamianEdwards is ARM in scope for V1?  \ncc @davidfowl @Eilon @danroth27 \nAlso see https://github.com/aspnet/KestrelHttpServer/issues/106\n. What's the DNX build here?\n. @victorhurdugaci \n. :shipit:\n. New link to the validation list: https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Tooling/Install/CommandNameValidator.cs#L21\n. Is it going to be just \"web\" defaulting to kestrel only from now on?  If we plan to keep \"web\" for httpplatformhandler module + kestrel, then it kinda makes sense to reserve \"kestrel\" (or some other word) for runs wihout httpplatformhandler.\n. Perhaps we can default \"web\" to kestrel only, and have an additional one \"iis\" (or something)?\n. This issue was moved to dotnet/cli#575\n. Putting this in backlog for now. \n@DamianEdwards do we plan to support WebRole's in the future at all?\n. @davidfowl Putting this in Backlog for now.\n. @danroth27 FYI, we may have to move this to RC.\n. Higher pri items in Beta 8, moving to RC1.\n. @moozzyk @victorhurdugaci \n. Do we have a nuget bug filed?  Can we link?\n. @kichalla What's the behavior when you use --overwrite with the same package?  It should work here too, no?  Perhaps we can make the help for the cmdline switch more helpful for this case too.\n. I think overwrite should just work.  Not sure why it doesn't when the package name is the same...\n. :shipit:\n. This issue was moved to dotnet/cli#573\n. https://github.com/aspnet/dnx/issues/636 \n. @ChengTian did we have a work item to create a wwwroot folder when publishing if it doesn't exist?\n. @BillHiebert @troydai \n. Looks like this issue was resolved. Closing.\n. We are considering adding analyzer support in some capacity (tentatively in Beta 7.)\n. This is tracked here: https://github.com/aspnet/dnx/issues/2311 \n. Code looks good. I assume you already tested it. :)\n:shipit:\n. @victorhurdugaci \n. @victorhurdugaci can we investigate? not necessarily fix in beta 6 (that we can move to beta 7 based on the investigation)\n. @MiguelAlho Are you talking about aspnetvnext feed? This is mainly for the dev branches.  When we cut the release feeds for a particular release (in this case beta5) we start using aspnetrelease feed instead.  You can set this as your DNX_UNSTABLE_FEED environment variable and use -Unstable  command line switch when you do a dnvm install. \n. Ugh. Does nuget.exe raise an error or warning in this case?\n. @hpaiemen you can find some examples of InternalsVisibleTo usage in our own code.  For example, see here: https://github.com/aspnet/dnx/search?utf8=%E2%9C%93&q=InternalsVisibleTo.  Like @davidfowl says, you shouldn't need to sign your assemblies to get this working.\n. Looks like a simple change to reuse the buffer and respectable improvement in GC time.\n:shipit:\n. Feel like we should add a message to the IOE. Is this the only case where that can be thrown? \n(Also should remove that comment :smile:)\n. cc @troydai \n. Recommended workaround for Visual Studio RC users is:\n- Remove \"Microsoft.Framework.CodeGenerators.Mvc\": \"1.0.0-beta5\" from project.json\n- Remove gen command from project.json\nIn the next release of Visual Studio, we do not have these dependencies in the web application template anymore.\n. Line that needs to be fixed: https://github.com/aspnet/Scaffolding/blob/dev/src/Microsoft.Framework.CodeGeneration.Core/project.json#L7 \n. The following two will need to updated to build time dependencies:\n- https://github.com/aspnet/Testing/blob/dev/src/Microsoft.Framework.TestHost/project.json#L12\n- https://github.com/aspnet/Scaffolding/blob/dev/src/Microsoft.Framework.CodeGeneration.Core/project.json#L7\n. Microsoft.Framework.CommandLineUtils.Sources.1.0.0-beta5 is pushed to nuget.org now. This should unblock folks. We will remove this dependency from the impacted packages in Beta 6.\n. Yes.\n- TestHost: https://github.com/aspnet/Testing/issues/128\n- CodeGeneration.Core: https://github.com/aspnet/Scaffolding/issues/99\n. Closing.\n. Putting the backlog for now\n. @ChengTian \n. This issue was moved to dotnet/cli#572\n. @troydai \n. What else did you change in the project?  And how does your project.json look like (are you using beta4 packages?)\n. @jpoehls is it the node_modules folder for you as well?\n. @anurse \n. /cc: @pranavkm \n. @pranavkm will you be able to have a look at this one?\n@Eilon for prioritizing with the rest of Pranav's items.\n. @anurse \n. Closing this as @anurse seems to be tracking it in #2180 \n. Closing as this is a CoreFX issue (Thanks @stephentoub for the fix!)\n. This issue was moved to dotnet/cli#571\n. :+1:\n. Modify by adding the native dll location to the path otherwise dll that depends on the other one will not be able to load it.\n. These are native dll's not managed.  Also, these will be coming in nupkgs.  @davidfowl can clarify the difference between managed assemblies and native dlls.\n. Closing this, as this is covered in https://github.com/aspnet/dnx/issues/402.\n. Putting this into beta 7 for now\n. Please feel free to continue the discussion. Moving to 1.0.0 backlog milestone until we make a decision.\n. @davidfowl is this just clean up? if so, should we do this later?\n. @victorhurdugaci has found a potential issue that we'll need to discuss. Tentatively putting in beta 6.\n. Does this have open design questions? @victorhurdugaci, can we remove the needs design label?\n. @davidfowl @troydai \n. :watch:\n. With different casing support in, closing this one. @kichalla feel free to reactivate if nuget.redirect.config doesn't work for you.\n. I believe longer term plan is to make nuget and dnu be as similar as possible for a lot of the scenarios, although dnu would have additional functionality that nuget doesn't need to support. \nGood point though, if we need to remove the redirection, we better do it in RC1 @davidfowl \n. DNX bits are installed under user profiles. Does the service account have a user profile? \nAre you able to create a proper user on the machine and run agent under that user?\n. Yup, that should work too.  Closing for now, @jochenvanwylick please reactivate if you still see issues.\n. @eugeneagafonov In Beta 8 DNVM has -g flag to install DNXs globally.\n. @anurse we can move it out if the fix turns out to be not straightforward \n. :+1:\n. @ChengTian any ideas?\n. Agreed \n. Can you paste your project.json?\n. Looks fine to me, not sure why it may be throwing.  @troydai any ideas?\n. @BrennanConroy were you already looking into this one?\n. @mayurid @PradeepKadubandi this should probably go into Tooling repo. \n. Looks like a regression, @troydai we probably try to fix it.\n. @tillig The plan is to ship beta 6 by next Monday (see https://github.com/aspnet/home/wiki/roadmap). Unfortunately I don't know a workaround for beta 5.  I think your best bet would be to ship against beta 6. \n. @pranavkm IIRC, you had a check-in related to this. Is this fixed and good to close?\n. Dup: https://github.com/aspnet/dnx/issues/1923\n. Hmm, this doesn't look very risky to me. Why are we moving it?\n. Looks good to me, but since @davidfowl wanted to push it to beta 7, I'd like to him to me to give the shipit. \n. :shipit:\n. Seems like a nice to have to me. I'm OK to do it in beta 7 though with lower pri than other items.\n. This issue was moved to dotnet/cli#570\n. @anurse \n. I've been trying to hit it with a big project (MVC) and couldn't repro it so far.  @natemcmaster did you see this with the EF project?\n. @bilal-fazlani OS? CoreCLR or Desktop CLR?\nBTW, FYI we're retiring dnx/dnu in RC2.  We'll be instead be using dotnet CLI for dev workflow.\n. Are you sure you're not running on Mono?  Because the above workaround should be for Mono, not CoreCLR.\n. Can you paste your dnvm list output?\n. @BrennanConroy Please add http://github.org/dotnet/coreclr/issues/1268  to the tracking list and close this one as dup.\n. Looks good. :shipit:\n. @anurse yes, thanks. It was to be assigned to @troydai, but I was waiting before we get a priority on Friday's design meeting.\n. I like the second option, although I'm sure @davidfowl will have some (probably reasonable) perf concerns.\n. This issue was moved to dotnet/cli#569\n. Closing per @davkean's comment.\n. Reopening per @davkean's comment.  :smile: \n@piotrpmsft I'll move this one as well.\n. This issue was moved to dotnet/cli#568\n. @davidfowl \n. @victorhurdugaci will be helping with some of the items.\n@joeloff we'll need to create an MSI to test servicing E2E in the Beta 7 milestone.\n. @victorhurdugaci E2E testing & coordination assigned to you in RC1.\n. Postponing rest of the work to RC1 for now. If CoreCLR issues are ironed out quickly, we can return back to this this week.\n. @glennc we'll need to do this manually for RC1.\n. @factormystic because we'll be moving away from DNX to dotnet CLI. \n. @TJSoftware Sure, you can get it from https://github.com/dotnet/cli\n. You're welcome guys and @factormystic we'll be updating the roadmap on Home repo with this information soon. \n. :shipit:\n. Let's do the change: dnx.mono.managed -> Microsoft.Dnx.DomainManager.Mono and :shipit: and find issues as early as possible. \n. It was discussed in the issue (https://github.com/aspnet/dnx/issues/1855) last week. Original list suggested merging those into dnx.host.  Someone (Pawel?) had a good reason why that's not a good idea.  I agree DomainManager is not exactly true in all of them.  \nAny suggestions?  \nCan you also fully review the table on the top to make sure you agree with all the names?\n. Closing this one as by design.\n. @troydai \n. This issue was moved to dotnet/cli#567\n. :+1: \n. This issue was moved to dotnet/cli#566\n. Done: https://github.com/aspnet/dnx/commit/3d0edc0914f341794a56fb8c0d927ddbd96dec31\n. This issue was moved to dotnet/cli#565\n. Closing as it looks like the root cause was identified. @radenkozec Please file another one if you have more issues with this. Thanks!\n. Thanks for the discussion, @bastianeicher.  We do not have any plans to officially support 3rd party package managers for our acquisition story.  Scenarios like above can be community driven and maintained. Closing this one.\n. This issue was moved to dotnet/cli#564\n. Yeah, nuget/dotnet tasks to improve restore time are tracked elsewhere. Closing\n. This issue was moved to dotnet/cli#563\n. This issue was moved to dotnet/cli#562\n. @davidfowl IMO, this should only go to nuget.  The restore feature in CLI is only temporary.\n. This issue was moved to dotnet/cli#561\n. Remaining work can be done in RC1.\n. This issue was moved to dotnet/cli#560\n. This issue was moved to dotnet/cli#559\n. This issue was moved to dotnet/cli#558\n. @glennc Move out of this milestone?\n. @glennc Move out of this milestone?\n. This issue was moved to dotnet/cli#557\n. Thanks Tazer!\n. This issue was moved to dotnet/cli#556\n. @davidfowl GAC?  Isn't CLI CoreCLR only?\n. This issue was moved to dotnet/cli#555\n. This issue was moved to dotnet/cli#554\n. :+1:\n. @troydai nope :)\n. @BrennanConroy Is this still needed after your change?\n. @moozzyk :musical_note: \n. @anurse @moozzyk @BrennanConroy \nAny ideas on this one guys?\n. @BrennanConroy So is this fixed now?\n. @BrennanConroy Please test this once we have Coherence.\n. @davidfowl Do not push  before Travis passes.\n. Moving this to RC1. @moozzyk feel free to bring it back if you have time at the end of the week.\ncc: @rowanmiller \n. @hkoestin That's true. We just couldn't fit it in with all the other work that needed to happen in Beta 8. We'll do this in RC1.\n. @hkoestin Unfortunately, I don't know of any workaround. You can wait for this bug to be resolved, and work with RC1 dev packages before RC1 goes out if that helps.\n. @hkoestin Please subscribe to this issue if you haven't already (click \"Subscribe\" on top right) and you should get a notification when the status changes.  We can try pinging you on GitHub but also we could forget :)    I don't have an estimation at the moment when this will be closed, but it would be more than a week (as actual RC1 coding starts next week only) and ideally less than a month. \n. See more details about OSS signing here\n. yay!\n. @victorhurdugaci Please paste the output.\n. This seems to work for me\n```\nY:\\GitHub\\muratg\\uploadr\\uploadr>dnu publish --no-source\nMicrosoft .NET Development Utility CLR-x86-1.0.0-beta8-15564\nCopying to output path Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\output\nUsing Package dependency Microsoft.Framework.Logging 1.0.0-beta8-15571\nUsing Package dependency NuGet.Core 2.8.5\n    Source C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.Logging\\1.0.0-beta8-15571\n    Source C:\\Users\\mgirgin.dnx\\packages\\NuGet.Core\\2.8.5\nUsing Package dependency Microsoft.Framework.Configuration 1.0.0-beta5\n    Source C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.Configuration\\1.0.0-beta5\n    Target Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\output\\approot\\packages\\Microsoft.Framework.Configuration\\1.0.0-beta5\n    Target Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\output\\approot\\packages\\Microsoft.Framework.Logging\\1.0.0-beta8-15571\n    Target Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\output\\approot\\packages\\NuGet.Core\\2.8.5\nUsing Package dependency Microsoft.Framework.Configuration.Abstractions 1.0.0-beta5\n    Source C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.Configuration.Abstractions\\1.0.0-beta5\n    Target Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\output\\approot\\packages\\Microsoft.Framework.Configuration.Abstractions\\1.0.0-beta5\nUsing Package dependency Microsoft.Framework.Logging.Abstractions 1.0.0-beta8-15571\n    Source C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.Logging.Abstractions\\1.0.0-beta8-15571\n    Target Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\output\\approot\\packages\\Microsoft.Framework.Logging.Abstractions\\1.0.0-beta8-15571\nUsing Package dependency Microsoft.Framework.Configuration.Json 1.0.0-beta5\n    Source C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.Configuration.Json\\1.0.0-beta5\n    Target Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\output\\approot\\packages\\Microsoft.Framework.Configuration.Json\\1.0.0-beta5\nUsing Package dependency Microsoft.Framework.Logging.Console 1.0.0-beta7\n    Source C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.Logging.Console\\1.0.0-beta7\n    Target Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\output\\approot\\packages\\Microsoft.Framework.Logging.Console\\1.0.0-beta7\nUsing Package dependency Microsoft.Framework.Configuration.EnvironmentVariables 1.0.0-beta5\n    Source C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.Configuration.EnvironmentVariables\\1.0.0-beta5\n    Target Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\output\\approot\\packages\\Microsoft.Framework.Configuration.EnvironmentVariables\\1.0.0-beta5\nUsing Package dependency Microsoft.Framework.DependencyInjection.Abstractions 1.0.0-beta8-15570\n    Source C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.DependencyInjection.Abstractions\\1.0.0-beta8-15570\n    Target Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\output\\approot\\packages\\Microsoft.Framework.DependencyInjection.Abstractions\\1.0.0-beta8-15570\nUsing Package dependency Microsoft.Web.Xdt 2.1.0\n    Source C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Web.Xdt\\2.1.0\n    Target Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\output\\approot\\packages\\Microsoft.Web.Xdt\\2.1.0\nUsing Package dependency Newtonsoft.Json 6.0.6\n    Source C:\\Users\\mgirgin.dnx\\packages\\Newtonsoft.Json\\6.0.6\n    Target Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\output\\approot\\packages\\Newtonsoft.Json\\6.0.6\nUsing Project dependency uploadr 1.0.0-alpha-01 for DNX,Version=v4.5.1\n  Packing nupkg from Project dependency uploadr\n    Source Y:\\GitHub\\muratg\\uploadr\\uploadr\\project.json\n    Target Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\output\\approot\\packages\\uploadr\\1.0.0-alpha-01\nBuilding uploadr for DNX,Version=v4.5.1\n  Using Project dependency uploadr 1.0.0-alpha-01\n    Source: Y:\\GitHub\\muratg\\uploadr\\uploadr\\project.json\nUsing Package dependency Microsoft.Framework.Configuration 1.0.0-beta5\n    Source: C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.Configuration\\1.0.0-beta5\n    File: lib\\dnx451\\Microsoft.Framework.Configuration.dll\nUsing Package dependency Microsoft.Framework.Configuration.Abstractions 1.0.0-beta5\n    Source: C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.Configuration.Abstractions\\1.0.0-beta5\n    File: lib\\dnx451\\Microsoft.Framework.Configuration.Abstractions.dll\nUsing Package dependency Microsoft.Framework.Configuration.EnvironmentVariables 1.0.0-beta5\n    Source: C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.Configuration.EnvironmentVariables\\1.0.0-beta5\n    File: lib\\dnx451\\Microsoft.Framework.Configuration.EnvironmentVariables.dll\nUsing Package dependency Microsoft.Framework.Configuration.Json 1.0.0-beta5\n    Source: C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.Configuration.Json\\1.0.0-beta5\n    File: lib\\dnx451\\Microsoft.Framework.Configuration.Json.dll\nUsing Package dependency Microsoft.Framework.DependencyInjection.Abstractions 1.0.0-beta8-15570\n    Source: C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.DependencyInjection.Abstractions\\1.0.0-beta8-15570\n    File: lib\\dnx451\\Microsoft.Framework.DependencyInjection.Abstractions.dll\nUsing Package dependency Microsoft.Framework.Logging 1.0.0-beta8-15571\n    Source: C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.Logging\\1.0.0-beta8-15571\n    File: lib\\dnx451\\Microsoft.Framework.Logging.dll\nUsing Package dependency Microsoft.Framework.Logging.Abstractions 1.0.0-beta8-15571\n    Source: C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.Logging.Abstractions\\1.0.0-beta8-15571\n    File: lib\\dnx451\\Microsoft.Framework.Logging.Abstractions.dll\nUsing Package dependency Microsoft.Framework.Logging.Console 1.0.0-beta7\n    Source: C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Framework.Logging.Console\\1.0.0-beta7\n    File: lib\\dnx451\\Microsoft.Framework.Logging.Console.dll\nUsing Package dependency Microsoft.Web.Xdt 2.1.0\n    Source: C:\\Users\\mgirgin.dnx\\packages\\Microsoft.Web.Xdt\\2.1.0\n    File: lib\\net40\\Microsoft.Web.XmlTransform.dll\nUsing Package dependency Newtonsoft.Json 6.0.6\n    Source: C:\\Users\\mgirgin.dnx\\packages\\Newtonsoft.Json\\6.0.6\n    File: lib\\net45\\Newtonsoft.Json.dll\nUsing Package dependency NuGet.Core 2.8.5\n    Source: C:\\Users\\mgirgin.dnx\\packages\\NuGet.Core\\2.8.5\n    File: lib\\net40-Client\\NuGet.Core.dll\nUsing Assembly dependency fx/Microsoft.CSharp 4.0.0\n    Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.1\\Microsoft.CSharp.dll\nUsing Assembly dependency fx/System.Collections 4.0.0\n    Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.1\\Facades\\System.Collections.dll\nUsing Assembly dependency fx/System.Linq 4.0.0\n    Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.1\\Facades\\System.Linq.dll\nUsing Assembly dependency fx/System.Threading 4.0.0\n    Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.1\\Facades\\System.Threading.dll\nUsing Assembly dependency fx/mscorlib 4.0.0\n    Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.1\\mscorlib.dll\nUsing Assembly dependency fx/System 4.0.0\n    Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.1\\System.dll\nUsing Assembly dependency fx/System.Core 4.0.0\n    Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.1\\System.Core.dll\nUsing Assembly dependency fx/System.Collections.Concurrent 4.0.0\n    Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.1\\Facades\\System.Collections.Concurrent.dll\nExported application command: uploadr\nuploadr -> Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\Debug\\uploadr.1.0.0-alpha-01.nupkg\nuploadr -> Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\Debug\\uploadr.1.0.0-alpha-01.symbols.nupkg\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\nTime elapsed 00:00:00.8054682\nTotal build time elapsed: 00:00:00.8162203\nTotal projects built: 1\nAdding NuGet package Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\Debug\\uploadr.1.0.0-alpha-01.nupkg to Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\output\\approot\\packages\nInstalling uploadr.1.0.0-alpha-01\nAdd complete, 60ms elapsed\nRemoving Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\Debug\\uploadr.1.0.0-alpha-01.nupkg\nRemoving Y:\\GitHub\\muratg\\uploadr\\uploadr\\bin\\Debug\\uploadr.1.0.0-alpha-01.symbols.nupkg\nTime elapsed 00:00:04.5911134\nY:\\GitHub\\muratg\\uploadr\\uploadr>\n```\n. Where are you getting dnx-coreclr-win-arm package from? I assume myget... \ncc @moozzyk \n. Can you do a dnvm list?  I'd like to see what version of DNX you're using.\n. @ddobric Did you try using matching runtimes with the packages that you use?  Is this resolved for you?\n. :watch: \n. What carries api-ms-win-crt-runtime-l1-1-0.dll to the machine?  I wonder if @moozzyk's VM's already had these.\n. Looks like Travis is passing. :shipit: \n. cc @anurse (as he tested this scenario) \n. :shipit:\n. What's the workaround? Launch another process and do IPC?\n. @rowanmiller OK to close this?\n. Putting this into Backlog instead of closing per @davidfowl's last comment.\n. @EGrishin Does this still repro for you? If so, can you provide the runtime information @moozzyk has asked?\n. @EGrishin do you get this error when you run a dnx or dnu? \n. https://github.com/aspnet/dnx/issues/3213 tracks this with more details.\n. Is there a class DataTables at all? Not sure why you call new with DataTables() \n. OK thanks. So build was actually failing on VS as well. Could you file a bug on the http://github.com/aspnet/tooling repo?\n. @troydai \n. @davidfowl When is the cmd file change coming in? :eyes: \n. @davidfowl this bug good to close now?\n. @davidfowl still working on this?\n. I think this was done.\n. @victorhurdugaci I really wanted to go, but decided to take a nap before going (I had like 3 hours sleep last night) and couldn't wake up. :hankey: \n. What's the DNX version you're using?  I believe we're currently raising errors instead of silently changing the target. \n. https://github.com/aspnet/dnx/issues/2302\n. @teamneusta Can you try the latest dnx (dnvm upgrade -u)?  This should work now with: https://github.com/aspnet/dnx/commit/18d404167451b6fd256700f4c903b7f43af3278f \n. Closing this one. If you still have the issue please feel free to file another bug. Thanks!\n. :shipit:\n. Looks good, :shipit: from me, but please wait for @victorhurdugaci's response as well.\nAlso, I think it would make sense to keep the feature code in some form as we intend to bring it back at some point post-V1.\n. @victorhurdugaci So another run of touching all the repos. Would this be required to be checked in as soon as this goes in or can it wait? It would tell @pranavkm when to actually merge this.\n@davidfowl agreed. @pranavkm or @victorhurdugaci should volunteer :)\n. :+1:\n. It doesn't look like we'll do this. Closing.  @danroth27 If you end up finding the right way to do it, please reopen. :) \n. @troydai Any thoughts?\n. @anurse Could you have a look please?\n. Thanks for the report. We'll investigate.\n. @JunTaoLuo Could you investigate please.\n. https://github.com/aspnet/dnx-watch/issues/2\n. @moozzyk Need to do this in Beta 8?\n. :+1: Let's do it just before the sign-offs. If it doesn't get in no big deal.\n. Moving to other Pavel\n. Where would this assembly be loaded from instead?  Is it special casing for Linux?  And for OS X too?\n. :watch: \n. Yes, I think we should do that.\n. Thanks @filipw \n. Question from triage: Is this a specific thing that only prevents EF migrations command (because it loads Hosting from a command) or can it impact any user scenario?   If former, is there a possible workaround in EF migrations implementation?\n. @moozzyk If simple to do and not risky, we can pull back to beta 8.\n. Sounds good to me. If package restore fails, we'll still see it thought right? Assuming that's the case, :shipit:\n. Are you trying to build the dev branch?\n. Beta 7 is already released, so you shouldn't need the aspnetmaster feed, everything a regular app needs is on nuget.org (beta7.) \nAre you depending on an exact version of System.Reflection.Extensions package?  \nSorry, I'm unable to look at your repo due to its license, but if you paste your project.json here, we can try to see what the problem may be.\n. LOL...  i guess AppVeyor was just being unreliable. \nYour project.json looks fine BTW.   Closing this issue, let us know if you hit other issues.\n. :+1:\n. @anuraj That could be a problem as there have been differences in Roslyn bits between beta7 and beta8 DNXs.  Could you try with a beta8 DNX as well?\n. Sounds good. Closing. :)\n. CentOS will be in RC1\n. Just checked, you're right it's not going to be in Beta 8. It'll be in early RC1.\n. Moving out of RC1 per discussion with @davidfowl \n. Have you seen this issue @BrennanConroy?\n. It looks like @bgeihsgt is seeing this consistently though.\n. @victorhurdugaci What's the repro? Did you run DNX directly or through some script or something? Perhaps something else is writing to stderr?\n. dnu publish --no-source --out ..\\artifacts should do it.  Closing as this was a question, and let us know i you hit issues. \n. Yeah, it does look like PCL is being chosen... @anurse?\n. @JamesNK Cool! \nWe should look into the error spew to see if we can make it more helpful. \n. Could you paste your project.json?  And is it copied when you test with beta7 DNX?\n. Fixed: https://github.com/aspnet/dnx/commit/3d0edc0914f341794a56fb8c0d927ddbd96dec31\n. Cool, hopefully @abpiskunov will be able to finish the tooling side as well. It'll be a nice feature!\n. Tentatively putting this in Beta8, though if it doesn't fit, we'll need to move.\n. :shipit: to unblock. @anurse please have a look at this also.\n. @davidfowl I believe that was the way CoreCLR folks described it on the board a few weeks ago.\n. You'll need to check this in to unblock CoreCLR and DNX builds or is it just for Travis?\ncc: @anurse \n. @davidfowl It's been a long time we consumed CoreCLR builds and we're one week away from escrow. If this is not the way to unblock, let's meet early on Monday to come up with a plan and heads down implement it.\ncc @anurse @Eilon \n. @dougbu I'll start a thread. Current POR with the CoreCLR was they push the current Roslyn that we are using.\n. :shipit: Unblocking this to get at least one build with the new CoreCLR.\n. Got a repro:\n```\nY:\\Src\\repro>q:\nThe system cannot find the drive specified.\nY:\\Src\\repro>subst q: y:\\Src\\repro\nY:\\Src\\repro>q:\nQ:>dir\n Volume in drive Q is Shared Folders\nDirectory of Q:\\\n09/23/2015  02:08 PM              .\n09/23/2015  10:54 AM              ..\n09/23/2015  11:08 AM               166 program.cs\n09/23/2015  11:07 AM               448 project.json\n09/23/2015  02:08 PM            81,468 project.lock.json\n               3 File(s)         82,082 bytes\n               2 Dir(s)  234,235,289,600 bytes free\nQ:>dnu restore\nMicrosoft .NET Development Utility CLR-x86-1.0.0-beta8-15618\nCACHE https://api.nuget.org/v3/index.json\nRestoring packages for Q:\\project.json\n\nSystem.NullReferenceException: Object reference not set to an instance of an object.\n   at NuGet.PathUtility.GetDirectoryName(String path)\n   at Microsoft.Dnx.Runtime.Project.TryGetProject(String path, Project& project, ICollection`1 diagnostics)\n   at Microsoft.Dnx.Tooling.RestoreCommand.d__69.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Dnx.Tooling.RestoreCommand.<>c__DisplayClass68_0.<b__2>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Dnx.Tooling.RestoreCommand.d__68.MoveNext()\n----------\nRestore failed\nObject reference not set to an instance of an object.\nNuGet Config files used:\n    C:\\Users\\mgirgin\\AppData\\Roaming\\NuGet\\NuGet.Config\nFeeds used:\n    https://az320820.vo.msecnd.net/v3-flatcontainer/\nQ:>\n``\n. Additionallydnu pack,dnu buildetc also fail with anNullReferenceExceptiononNuGet.PathUtility.GetDirectoryName. This also repro's when you have a project.json on the root of any drive. I.e. if you had ac:\\project.json, and trydnu restore` there, it would fail as well. \n@ddobric You can subst q: C:\\temp\\netcoreapp\\src\\ and try dnu restore under q:\\netcoreapp instead.\n. @davidfowl It still throws a NullReferenceException in beta 8.  See https://github.com/aspnet/dnx/issues/2752#issuecomment-142744796 \n. Moving to backlog as the workaround is simple. We'll see if we get other complaints and can consider it in the future.\n. Ugh, yeah I think we should take it.\n. After updating your repro code but I was able to repro this on: *    1.0.0-beta8-15618 coreclr x64          win\nproject.json\n{\n    \"version\": \"0.1.0\",\n    \"dependencies\": {\n        \"Microsoft.Dnx.Compilation.CSharp.Abstractions\": \"1.0.0-*\"\n    },\n    \"frameworks\": {\n        \"dnxcore50\": {\n            \"dependencies\": {\n                \"System.Runtime\": \"4.0.21-beta-*\",\n                \"System.Threading.Tasks\": \"4.0.10-beta-*\",\n                \"System.Console\": \"4.0.0-beta-*\",\n        \"System.Diagnostics.Debug\": \"4.0.0-beta-*\"\n            }\n        }\n    }\n}\nprogram.cs\n```\n// Stripped down to very minimum...\nusing System.Diagnostics;\npublic class Program {\n  public int Main(string[] args) {\n    Debug.Assert(false);\n    return 0;\n  }\n}\n``\n. If you didn't have a reference toSystem.Diagnostic.Debugwhere did yourDebugclass come from?\n. This runs fine with CLR by the way.  Fails on both X64 and X86 CoreCLRs.\n. Yeah,project.lock.jsonshould have that information.\n. BTW, thanks to transitive dependencies, you don't need to specify all the assemblies that you use. :)\n. Yup,System.Linqseems to bring it in. :)\n. Correct :) That whole chain is brought in byMicrosoft.Dnx.Compilation.CSharp.Abstractionsdependency in yourproject.json`.\n. @davidfowl I don't think this is for RC1.  Moving out.  Bring it back if necessary.\n. Looks like you already have a PR out for this.  If it looks like you'll be able to check in we'll put this in beta 8 otherwise RC1 is fine.\n. :+1:\n. This would require some architectural changes which are not straightforward. Not something we can realistically get in V1. Putting it in the backlog.\n. @davidfowl You think we should get CoreCLR to use \"Darwin\" instead?\ncc @Eilon \n. OK, let's go with Andrew's suggestions unless anyone has strong objections. Putting this in RC1.\n. Thanks @dagood.  Closing this one as this is not supported on CoreCLR as of yet.\n. Good point, though not sure if we want to have a supported API like that or not.  cc @davidfowl \nAlso, does this mean that we'll need to ship Microsoft.Dnx.Runtime for Beta 8?  cc @danroth27 \n. @angelsix Let us know if you have other questions on this. Otherwise, this should be good to close :)\n. Are you setting your default DNX to be a coreclr based one?  You should definitely be able to run with coreclr, not sure exactly what problem you're hitting.\n. Currently CoreCLR is only 64 bits on Linux and OS X.  Not sure if they plan to have 32 bit support. \n. @angelsix closing this one. Let us know if you have problems with a 64 bit linux when you try it out.\n. Can it be done now?  We should aim to branch Release very soon.\n. I think we won't be doing this. @abpiskunov please sync with @troydai and close.\n. @davidfowl Are we going to take the changes to the lock file and restore for this? \n. Sorry can you clarify \"I would expect Foo to compile\"?\n. Do you mean it's not invoking Foo\\Program.cs's Main (i.e. not displaying the \"Hello from Foo\" message) when you do dnx runBar?  If so, that's by design.\n. BTW, one of the principles in DNX design is to \"blur the lines between compilation and loading.\"  :)\n. @davidfowl after branching?  I think Troy will be busy today with the DTH bug and we should be branching pretty soon.\n. FYI @Eilon @danroth27 \n. @nehaabrol87 What's the DNX version you've installed?\n. @anurse any ideas?\n. cc @BrennanConroy \n. It would be useful to go through different error cases and decide if we need to downgrade them all.\nDo it as part of https://github.com/aspnet/dnx/issues/2831 and close this one.\n. @davidfowl Feel free to close this one if you're going to do it with the #2831's PR. \n. We'll need to get back to this one.\n. @abpiskunov I think we will do this post RC1.  With this change, you wouldn't need to do it on the tooling side.\n. :shipit: after Travis passes.\n. Not sure if we care about Mono on Windows.  Putting this in Backlog, feel free to bring it back if you disagree.\nThis should work fine on XPlat though.\n. @danroth27 @Eilon FYI\n. @divega \n. @ln613 it looks like you may want to use CoreCLR for this particular scenario when it's available (or use a workaround if that's available.)  Possibly tracking a bug on Mono repo may help, but not sure how they would prioritize it. Closing this for the DNX repo as a fix on DNX repo is not something we could do.\n. :shipit:\n. Travis failure seems like a timeout, no?\n. One of the runs seem passed.  Not sure why it' s not reflected here.\n. Thanks @anurse, sounds good!\n. Good suggestion.\n. @sayedihashimi Were you able to resolve this?  There seems to be version mismatch somewhere.\n. :watch: \n. @fubar-coder thanks, fixed.\n. The new package name for the command is Microsoft.Extensions.SecretManager.  Please use that instead.\n. Glad that it helped. I updated the wiki page to reflect the new package name as well.\nClosing this one, but if folks hit more issues, please file a new one!\n. @chekkan Like the error code suggests, you'll need to add a top level userSecretsId key in your project.json.  See an example here\n. @anurse Can you check this in ASAP?\n. @danroth27 will be adding this to the documentation and release notes for Beta 8.  However, we should make it discoverable with an informative error message as well.\n. @IRooc just tried it with 1.0.0-rc1-15779      coreclr x64 on a Mac, and dnu restore  seems to work for me. Can you try it out with a small Console app? \n. @Prehistoricoder ICU install steps will be documented by the time we release Beta 8.  cc @danroth27 @glennc \n@Flavien Could you install ICU?  sudo apt-get install libicu-dev should do it. Let us know if it continues to be an issue for you.\n@natemcmaster Exit code discrepancy seems to be due to this CoreCLR issue  Could you try it with the latest DNX? \nClosing this bug, but if there are still issues, I'll re-open.\n. @natemcmaster we haven't pulled updated CoreCLR bits on the dev branch yet. You can try the latest Beta8 build from the test feed or aspnetrelease.\n. Re-opening to keep this in the radar.  If ICU ends up being statically linked in CoreCLR platform specific binaries, this won't be a problem anymore.  Otherwise we may need to do something.\n. @jtbennett can you check if you have ICU installed with brew info icu4c?  If you haven't installed it yet, you should install it with brew install icu4c. \n. @ellismg What would be the ICU version required on Linux for the next CoreCLR?\n. @victorhurdugaci Please investigate ASAP. \n. :shipit:\n. @davidfowl would a dnu build before a dnx run remedy the issue? \n. @kirthik Any thoughts on this one?\n. From his global.json, it looks like he's using Beta 7. \n@hubuk This may have been fixed with #2802.  Can you upgrade to the latest bits and retry?\n. :watch: \n. Thanks @hubuk. I triaged #2902 for RC1. \n. I think @BrennanConroy noticed this today, if I understand it correctly.\n. Yeah, no assumptions in terms of length of codepoints :)   I remember being bitten by this before.\n:shipit:\n. If not risky, we can give it a shot RC1.  Otherwise, I'll put it in 1.0.0 backlog.\n. We'll be doing other changes in this area, so putting this in RC1 for now.\n. Perhaps you can enable error page to get more information? (app.UseErrorPage)\n. Since your connection string is under \"AppSettings\" of your configuration, you'll need to put it in \"App Settings\" on Azure Portal.  \nIf you had your configuration setup like VS Template (where your connection string is under ConnectionStrings) then setting it up under \"Connection Strings\" on Azure portal would have also worked. \nSo either set the connection string on \"App Settings\" or change the sections in your config.json and redeploy.\n. @hahmed  Your problem is due to the fact that your local config and your azure settings (i.e. env vars) do not match. If you want to keep the connection string in AppSettings in your config, that's fine, but then you can't put it in Connection Strings on Azure portal.  You'll have to put it under App Settings on the portal. \nGo to http://test-kudu-deploy.scm.azurewebsites.net/ to see your environment variables (under App Settings) and connection strings.  Any of these variables are available to your Configuration, if you AddEnvironmentVariables.\nFor the most basic test, put it on top level Configuration[\"ConnectionString\"] and then create a ConnectionString environment variable under \"App Settings\" section on Azure portal.\n@snobu that's correct.\n. Try this:\nConfig.json\n{\n  \"Data\": {\n    \"DefaultConnection\": {\n      \"ConnectionString\": \"\"\n    }\n  }\n}\ncsharp\n           services.AddEntityFramework()\n                .AddSqlServer()\n                .AddDbContext<ApplicationDbContext>(options =>\n                    options.UseSqlServer(Configuration[\"Data:DefaultConnection:ConnectionString\"]));\nAnd use \"Connection String\" section on the portal.\n. Can you provide more details?  What's the version of DNX?  CoreCLR or CLR?  What's the stack trace?\n. @borgdylan HttpPlatformHandler module is not yet installed on Azure, but should be once we release Beta 8. \n. Assuming this is the correct full path, :shipit:\nWould it be a good idea for @kichalla to test it on Azure Websites (as opposed to Ebbo's private deployment?)\n. As discussed in the Roadmap we will be moving to Dotnet CLI in ASP.NET 5 RC 2 and retire DNX, DNU and DNVM command line tools.  Closing this PR.\nThank you for your contribution! \n. @BrennanConroy please sync-up with @victorhurdugaci and @troydai.  This issue is basically putting more runtime.* packages in DNX.  One particular example they found was to do with System.Net.Http.\nThis would be a workaround, and https://github.com/aspnet/dnx/issues/2850 would solve this issue in RC1.\n. @victorhurdugaci, @troydai Brennan made this change yesterday. Can we verify the issue is resolved (or at least worked-around? :smile:)\n. We have the workaround in Beta8.  Now we'll need to fix the publish properly.  Putting in RC1.\n. :shipit:\n. @moozzyk & @halter73 Could you investigate this for Beta 8 please? Feel free to get help as needed.  We'll need to figure out what this is and if we should take a fix for Beta 8.\n@danroth27 @Eilon \n. @moozzy, @halter73 per @davidfowl's request.  Fowler thinks that this may be Kestrel.\n. :+1:   @anurse could you drive this one Beta 8 is out?  Please get help from @BrennanConroy et.al. \n. :+1:\n. @pakrym Could you investigate this on Monday?  Sync-up with @glennc if you have any questions.\n. @pakrym checked in a fix, though we do not yet have the packages on vnext feed. \n. Could you guys try this out with the current set of vnext packages (RC1-*) \n. Try dnvm upgrade -u to install unstable bits. \n. cc @anurse.  We'll be revisiting publish in RC2 and we should look into this.\n. Reopening this so that @anurse can take another look.\n. Assigned to @davidfowl \n. :shipit:\n. @moozzyk is aware of #3009, I think he'll have a look at that one.\n. Troy will be investigating this today.\n. Yeah, perhaps we could make publish report a useful error instead of \"access denied\" but not a priority for now.\n. This is a dup of https://github.com/aspnet/dnx/issues/2982\n@troydai will be investigating.\n. Some code is moving around a little bit (cc @pakrym @anurse @davidfowl) but since this is automatically done and not too much overhead I say :shipit:\n. :+1: \n. Did you deploy to a local IIS?  Or the IIS Express that comes with VS?  Did you use Beta 8 tooling? \nIf it's full IIS, did you deploy HttpPlatformHandler? \n. Where are you deploying to?  If to Azure Websites, the handler is already installed there too.  If you're deploying to a different host, you'll need to get HttpPlatformHandler installed there as well.\nAlso, I'm assuming your app works locally without issues.\n. I think this is a good suggestion.  @victorhurdugaci \nBTW, @JamesNK You get 3 internet points! :gift: :gift: :gift: \n. Based on our chat, remember to remove .travis.yml from the PR.\n. :shipit:\n. :+1:\n. :+1:\n. @joshmouch you may want to file this in https://github.com/aspnet/tooling repo. I believe @sayedihashimi has been thinking about this too.\n. @MelbourneDeveloper DNX repo is defunct. Please continue discussion on this at dotnet/cli or aspnet/tooling. Thanks.\n. @BrennanConroy please sync-up with Chris on this one.  This field is going away from project.json.\ncc @davidfowl \n. Folks, DNX is being retired in the next release i.e. we won't be releasing another version of DNX with ASP.NET Core. The new command line experience will be through dotnet CLI (https://github.com/dotnet/cli).  I recommend trying it out.\n. :+1:\n. Looks good to me. \nDoes this CoreCLR change impact other repos too?\n. Thanks @troydai. Looks like DNX (Linux and OS X) failed with Compilation test suite this time.  Also, one OSS signing test is failing.\n. cc @moozzyk \n. @anurse did we enable dnvm.sh on git bash (windows) or is that punted for now?\n. Looks like this was the problem: https://github.com/dotnet/corefx/pull/4001 \nAs soon as we get a CoreCLR successfully, this should go away.\n. :shipit:\n. Let's sit down and talk about possible options here. \n. dnu and nuget cmd line will be merged, and hence you'll be able to say nuget restore to restore for both DNX project.json, .csproj + project.json, and packages.config. \n. Hey @lszomoru The merger is happening at the nuget org. You can watch nuget/home repo for related tickets. The goal is to have nuget ready enough by RC2 that dotnet restore command would be able to use nuget instead of dnu in RC2.  @yishaigalatzer could provide more info, and I recommend filing bugs in their repo if you have specific bugs you'd like to get tracked.\n. :shipit:\n. @Kagamine How about CoreCLR?  We have multiple issues with Mono, and I suspect this is also a Mono issue.\n. @Kagamine What's the Mono version you're using?  \nAlso, what's your issues with using DNU with CoreCLR?  It should work in general, so if there's an exception or a problem, we'd like to know :) \n. Can you paste your dnvm list output? What's the DNX version you tried?\nAlso, can you try dnu -v restore (for verbose) for the same project to see what the output is? \n. @emgarten Just wanted to bring https://github.com/aspnet/dnx/issues/3149#issuecomment-169181328 to your attention, in case it's something you need to worry about in the new restore\n. :+1:\n. This issue was moved to dotnet/cli#553\n. Yes, let's decide if this is something we'll need to do in the new DTH.\n. :+1:\n. This issue was moved to dotnet/cli#595\n. @davidfowl I hear pack is moving to nuget, not CLI.  Will talk to @yishaigalatzer later.\n. This issue was moved to dotnet/cli#552\n. This was copied to CLI. Reopening to triage it for NuGet as well.\n. This issue was moved to dotnet/cli#551\n. @yishaigalatzer Will you be taking this to NuGet?  cc @anurse \nOr should we close this?\n. As discussed in the Roadmap we will be moving to Dotnet CLI in ASP.NET 5 RC 2 and retire DNX, DNU and DNVM command line tools. Closing this PR.\nThank you for your contribution!\n. This issue was moved to dotnet/cli#550\n. @ardacetinkaya what's the output of ls -al ~/.dnx?  (Especially the owner column, and the permissions column)\n@BrennanConroy Please close this one too when the internally tracked one is closed as fixed.\n. Thanks @anurse!  \n@davidfowl Could you review the PR?  We're looking into getting a build out ASAP.\n@joeloff FYI\n. @flavien Could you create a simple repro app and share with us?  We can make the error output such that it shows you where the problem is.\ncc @yishaigalatzer \n. This issue was moved to dotnet/cli#549\n. @dazinator What's the DNX version you're using?  Also, it would be helpful to paste your full directory structure (dir * /s > dir.txt) and project.json files. \ncc: @yishaigalatzer \n. @ElanHasson I recommend to moving to RC2 (and CLI Preview 1) as DNX is no more. \n. Adding @ghostkaa and @010227leo.\n@moozzyk Could you have a look?\n. This issue was moved to dotnet/cli#548\n. @Fosol did you change your app according to the announcement post?\ncc @pakrym \n. @csunali Let's continue the discussion (and questions) here: https://github.com/dotnet/corefx/issues/4027.  This is basically dotnet CLI prep. \n. This issue was moved to dotnet/cli#547\n. This issue was moved to dotnet/corefx#4970\n. Are we doing this as part of DNU -> nuget merger?\n. Feel free to merge it (or ping @emgarten first), but I think it's possibly throwaway work if it's not going to be useful in the merger.\n. @davidfowl To Common repo, or create a new repo for this (cc @Eilon)?\n. @emgarten do you need this in DNU?  Otherwise let's close this PR.\n. Where do you see this error?  Could you also try to do it from a GitHub repo too (I wonder if there's a difference with the VSO git repo)\n. This should be tested with the new dotnet CLI as well.\n. I think it's OK to close this one.  Do we have some other repo using the one from Common now (even if it's just a test)? \n. Do we care about dnx?  We plan to stop even building it hopefully soon, don't we?\n. Yeah, the one in Common is being reviewed. I think we can close this one in the DNX repo.\n. @yuezhongxin Do you still have this issue?\n. Yup, this would be throwaway work as we're moving away from dnx/dnu to dotnet CLI in RC2.  \nClosing this one.\n. What's the DNX version that you're using?  Also, what's in your nuget.config (where are your packages restored when you do dnu restore?)\n. Is this one of the \"move to CLI\" candidates @anurse?  Or should we close this as no more work is planned on DNX...\n. @anurse right, now that you remind me :)\n@snissim I'm pretty sure this would fix your issue. \n. dnu pack functionality is being moved to dotnet cli in RC2.  No more change is planned for DNU.\n. In RC2, dnx is being retired. All compilation will be done through Roslyn and our abstractions will be retired.\n. dnu publish is being moved to dotnet CLI in RC2.\n. @opletayev You're welcome. Please feel free to watch dotnet/cli repo, and try out the dotnet publish command to see if it has the same problem or not.\n. I recommend testing this with dotnet CLI we're retiring dnx (and it's \"runtime\") in RC2. You can find some samples for running asp.net 5 apps with dotnet CLI here.\n. @BrennanConroy \n. Thanks for the PR.  We're not doing any more changes to DNX since we're retiring it in RC2. Command line experience will be through dotnet CLI instead.\n. Dnx/dnvm/dnu are being retired in favor of dotnet CLI.\n. This issue was moved to aspnet/Mvc#3820\n. Not sure what the issue may be.  Could you try dnu restore -v (for verbose output) to see if you have any error logs coming out?  \nIn any case, as we're retiring dnx/dnu/dnvm toolchain and will move to dotnet CLI in RC2, this won't be fixed in dnx.\nI recommend giving dotnet CLI a try on that machine, and filing bugs in that repo if there are issues.\n. @imiuka Thanks for the PR.  We're not doing any more changes to DNX since we're retiring it in RC2. Command line experience will be through dotnet CLI instead.\n. @george-polevoy Since we're retiring DNX/DNU/DNVM in RC2, I recommend testing this with dotnet CLI.  (See http://github.com/dotnet/cli)\n. @runxc1 It might, although that's not a scenario we're currently testing.  For the current RC2 bits, @davidfowl has some samples with the CLI here: https://github.com/davidfowl/dotnetcli-aspnet5 \n. @DasJott What's the scenario that's failing? Are you trying to access some static files on disk?\n. Can you set your webroot to a subfolder instead?  HelloMVC sample already has wwwroot, so keep that and put your css file there, and let us know if that doesn't work.\n. Ugh good point. I forgot that HelloMVC sample doesn't have static files...  @DasJott, you'll need to add Microsoft.AspNet.StaticFiles to your project.json, and do app.UseStaticFiles() in your Configure method.\n. @DasJott no worries.  I recommend searching https://docs.asp.net. The documentation is not complete, but some of the stuff is actually documented.  See static files docs for example.\n. This issue was moved to aspnet/Hosting#541\n. Thank you for your report.  We're retiring DNX, DNU and DNVM in RC2 and will be moving on to use dotnet CLI (https://github.com/dotnet/cli) going forward.\n. @thiagomajesk were you able to workaround this?  \nIn RC2, we're retiring dnx/dnu and we'll be moving to use dotnet CLI.  Putting this in backlog for now.\n. @thiagomajesk Cool, good to hear!\n. @rynowak  Are they failing because we're still using DNX with full CLR to start the tests?  I was under the impression that CoreCLR would be able to deal with long paths.\n. DNU functionality is being moved to NuGet in RC2.  They have the initial support for ASP.NET 5 in their dev branch now.  No more changes in DNU is planned.\n. @anurse What's the TFM that they should be using?  Feel free to close the issue after providing them guidance.\n. dnu pack functionality will move to dotnet CLI for RC2.  No more changes are planned for DNU.\n. @jaganjan @davidfowl will look into #2967.  Though, FYI, we're moving publish command to dotnet CLI.\n. We're moving to using nuget for asp.net 5 projects instead of dnu.  NuGet team added the restore support just today in their dev branches.  We should try this scenario when dotnet restore starts using NuGet instead of dnu.  Putting this in backlog for now, because no more changes in DNU are planned.\n. @SamuelZXP Why not move to RTM? DNX is no longer supported.\n. TFMs will be changing with the move to dotnet cli.\n. DNVM/DNX/DNU are being retired in RC2, so no more work is planned. \n@moozzyk I assume the new IIS publish command doesn't have this?\n. :+1:\n. @spankr We won't be releasing another version of DNX or DNU going forward.  This functionality will be moved to dotnet CLI and nuget. \n. Right, this is about modifying web.config.. removed the tag and closing\n. dnu restore doesn't support authentication, as @yishaigalatzer just reminded me. This is not supported yet.\n. As you guys may have known, dnu (+ dnx and dnvm) will be retired in RC2.  Restore functionality will be through dotnet cli (which will internally use nuget)\n. DNX/DNU/DNVM is being retired in RC2 in favor of dotnet CLI like you said.  We don't have time to do more DNX changes unfortunately, but looks like you have found a workaround already.\n. Yup, this is in Common now.\n. Also, DNX is being retired in RC2, so closing this.\n. Starting with RC2, dnu publish is retired. The new commands are dotnet publish and dotnet-publish-iis.\n. @javafun Thanks for the report. In RC2, we're retiring DNX, DNU and DNVM. New command line experience will be through dotnet CLI. I recommend raising the question over that repo (https://github.com/dotnet/cli)\n. @russcam thanks for the report. In RC2, we're retiring DNX, DNU and DNVM. New command line experience will be through dotnet CLI.  I recommend raising the question over that repo (https://github.com/dotnet/cli) \n. Thanks for the report. In RC2, we're retiring DNX, DNU and DNVM. New command line experience will be through dotnet CLI.  I recommend experimenting with that instead.\n. Thanks for the report. In RC2, we're retiring DNX, DNU and DNVM. New command line experience will be through dotnet CLI.\n. @theonlylawislove I suppose it's possible, though things changed quite a bit too.  I recommend installing dotnet cli tooling and give it a shot! http://dotnet.github.io/getting-started/ is the place.\n. @Auxon thanks for the bug and the PR.  We're not planning any more changes to DNX/DNU or DNVM going forward, and we're retiring these tools in RC2. Going forward, command line experience will be through dotnet cli. I recommend testing that out!\n. Thanks for the report. We're retiring dnx/dnu/dnvm toools in RC2, and we'll move on to using dotnet CLI instead.\n. DNX/DNU are being retired in RC2. \n. This issue was moved to aspnet/Common#89\n. @kscott5 you can dnvm install 1.0.0-rc1-final and use it.  dnvm version doesn't impact either runtime (dnx) versions or the versions of the packages you reference in your project.json.\n. Can you share your project.json for the web app? \nI also recommend trying out the new dotnet cli (https://github.com/dotnet/cli & https://dotnet.github.io) because we'll be retiring dnx, dnu and dnvm in favor of it in RC2. \n. If you change the order of MyApp.DataAccess.Security and MyApp.DataModel (or remove the former) Do you get this type?\n. I don't have much experience with the PCLs -- @bricelam do you think that may be the reason?\n. This issue was moved to aspnet/Tooling#387\n. Thanks @booschie.  In RC2, we're retiring dnx and dnu. New command line experience will be via dotnet cli (https://github.com/dotnet/cli, download: https://dotnet.github.io)  I recommend trying that out if you need to use current RC2 builds.  If you prefer to stay on RC1 and DNX, that's fine too. Desktop CLR should be working there.\n. What does your nuget.config file look like?\n. :+1:\n. Could you try it with dotnet CLI, and if it's still an issue there, move the bug over dotnet/cli repo?\nWe're retiring DNX in RC2, and dev workflow will be through dotnet CLI.\n. Please move the issue to dotnet/cli repo, as DNX Is being retired in RC2.\n. Could you guys try to do this with the new dotnet CLI?  DNX is being retired in RC2 and the new dev workflow will be through the new CLI.\n. DNX is being retired in RC2. If you're playing with the latest bits (RC2* builds) I recommend moving to dotnet CLI.\n. Can you paste your full project.json?\n. See this:  http://stackoverflow.com/questions/30747965/what-is-the-difference-between-dependencies-and-frameworkassemblies-in-proje\nFor the assemblies that are in GAC, you'll need to reference them in frameworkAssemblies under net45*. \n. Remove Microsoft.CodeAnalysis.CSharp.Scripting from frameworkAssemblies. It's a package so a regular dependency on it should work.\n. The general rule is if you're targeting desktop CLR, you need to pay attention to framework assemblies (essentially the assemblies in GAC) vs the dependencies that are actually nuget packages. If an assembly comes inbox (in a specific desktop CLR) in GAC, it goes to frameworkAssemblies.  If the dependency is instead in a package, it can go top level in dependencies.  Note that CoreCLR doesn't have this distinction, indeed it can't use the assemblies in GAC.\n. Yup, that's correct.\n. I recommend moving the question to dotnet/cli repo with more explanation.\nDNX will be retired in RC2, and main compile/run/test workflow will be through the new dotnet CLI.\n. @adamsitnik :+1: \n. @sayedihashimi @BillHiebert \n. @barrytang \nIs this more a WTE issue?\n. This issue was moved to aspnet/Tooling#414\n. @yishaigalatzer Should this be moved to nuget/home? \n. @tugberkugurlu What Yishai said I guess :)  Closing this one.\n. Yeah, no more dnx changes are planned. We can continue the discussion on the CLI issue \n. @xatabhk Please file another one if you're still having issues.\n. @VaclavElias I think Hosting repo may be a better place to have this discussion.\n. @davidfowl Why did you reopen? \n. @ddobric Please open in CoreFX (with more details in how you repro)\n. What's the dnx version?\n. If you're already on RC2 bits, I recommend moving to use dotnet CLI instead of DNX.  In RC2, we'll be retiring DNX.\n. @endink unfortunately, this is still WIP so no great documentation. Head out to https://dotnet.github.io for CLI stuff. Proper VS tooling is also not ready, but you could get some things working with DNX based DTH in the meantime.\n. @endink Yes, you would use net45_/net46_ instead of dnx* in RC2. These changes are still in flux, so if you want good tooling support etc. for now I recommend staying in RC1. If you want to play with the bleeding edge, RC2 bits and dotnet CLI could be a good idea\n. :+1: lol\n. @PinpointTownes dnu removing nuspec on the depencies is the issue? (if so, @pakrym's last check-in should fix it) If not, can you clarify?\n. cc @anurse \n. Good catch @pranavkm \n. DNX/DNU is retired in RC2. Please do any necessary follow-up on dotnet CLI repo (https://github.com/dotnet/cli) \n. See the corresponding NuGet change here: https://github.com/NuGet/Home/issues/2299 \n. I think so, but @anurse can confirm.\n. Also cc @emgarten \n. @DamianEdwards https://github.com/NuGet/Home/issues/2299#issue-140029596 \n... a new TFM called \"netcoreapp\" currently with only one version \"netcoreapp1.0\" which maps to netstandard1.5\n. Cool! :shipit:\nWe're going to stop running these once RC2 is out right?\n. @xatabhk Do you still have the issue with newer builds of the CLI?\n. @jason-masterson DNX is being retired in RC2. Let us know if you have issues when you get to try it with dotnet CLI.\n. @codinesh DNX is being retired, and the replacement is dotnet CLI (https://github.com/dotnet/cli). Unfortunately there's no public VS tooling with support for dotnet CLI, so this is a point in time issue.\nOnce RC2 is released, you should be able to do publish from VS.  For now, I recommend other avenues for deployment.\n. We're retiring DNX in RC2 in favor of https://github.com/dotnet/cli. \n. I see the menu on the app deployed on Azure: http://marketresearchio.azurewebsites.net/index.\nDo you still have the problem?\n. Not sure if this is a problem still.  Placing in backlog for now\n. @mzaatar Thanks for the report. DNX is being retired in RC2 to be superseded by dotnet CLI (https://github.com/dotnet/cli)  Please give it a shot to see if your scenario is fixed there, and if not, feel free to file a bug there as well.\n. @davidfowl are you doing anything with this? If not, could you close?\n. Closing based on the root cause.\n. Why are you guys still using DNX? It's obsolete,\n. DNX is being retired in RC2 and no more changes planned.\n. @DormancyCypress DNX/DNU is being retired in RC2.\n. DNX is being retired in RC2 and no more changes are planned.\n. We're not planning to make any changes to dnvm/dnx/dnu as we are retiring dnx in RC2. \n. Does your app work fine otherwise (i.e. do you get the error only when you run user-secret tool)? \n. We're not planning to make any changes to dnvm/dnx/dnu as we are retiring dnx in RC2.\n. @dazinator Happy you found the workaround. The trouble with that option is you won't know where your package is coming from sometimes (i.e. you're expecting to get a package from a certain feed, but you end up getting another version from another feed.)\n. project.json? \n. DNX is no longer supported. I recommend moving to ASP.NET Core RC2 bits with dotnet CLI.\n. DNX is no longer supported. I recommend moving to ASP.NET Core RC2 bits with dotnet CLI.\n. @sudhir9p DNX is no longer supported. I recommend moving to ASP.NET Core RC2 bits with dotnet CLI.\n. @davidfowl These changes already seem to be in dev branch.  Did you perhaps make the same changes with another pull request?\n. Do we want to add verbose tracing here, indicating success?\n. Having a constant sounds a little better, but I'd be OK either way.\n. Yup, we should update the other error messages as well.  Just talked to Troy and verified that it's not an error case to not have these scripts (with known names) in your project.  This type of distinction in logs (e.g. failure to start the script vs failure from the execution of the script) would be important while doing investigations.\n. Should the file name be DepthFirstPostOrderWalker.cs instead of DFPostOrderWalker.cs ?\n. Ditto with the folder name.  That should also match the namespace.\n. Null check\n. need a null check here?\n. Can we generate this from GetPublicKey() as well?  Just in case we change this.\n. Can't we do this in the loop above?\n. Why did you need to add the comma?\n. Is his change changing anything semantically? Is it required?\n. Ditto\n. I assume this change (and others below) are based on a previous CR.\n. Do we need to rename klr.sh file?\n. Should aspnet50/aspnetcore50's in folder names reflect the new TFMs?  /cc @NTaylorMullen \n. Just chatted with @ChengTian.  The folder renames will be in another PR, as Wei wants to keep things working with this PR.\n:+1: \n. Not sure what these two lines are, but do they need changing?\n. Darwin looks good.  Though should \"unix\" be \"linux\" instead?\n. Is this comment no longer valid?  If so, do we need this override?\n. In that case, IsNullOrEmpty wouldn't change the behavior, right? I think Wei's suggestion makes sense.  In case Matcher changes in the future, that would keep this code path correct.  Alternatively, you can consider adding a test case to cover this.\n. Typo nit: \"additional\"\n. Consider using String.Format instead of concat.\n. Typo in the exception\n. Typo\n. Typo \"Publishd\"\n. Was this logic tested?\n. Does \"assembly\" make more sense than dll?\n. Just curious, do you not to do OrdinalIgnoreCase because performance?\n. :+1: \n. Unidentifiable? Though I couldn't recognize the rest of the error either.\n. Ya, consider using Convert.ToInt32(_double) instead. Range of double is much larger than int and casting would not be throwing an exception, while the ToInt32 would.\n. @DamianEdwards What should the help look like for this?\n. Remove \"any\" from \"Suppress the execution of any scripts defined in project.json\" and :shipit:\n. String interpolation.  Also, why TODO?\n. :trollface: \n. readonly?\n. Should we remove this?\n. Would it be better to have another elif for \"x86\" case? and an \"else\" as an error case (as in \"not implemented\")?\n. Should strings like \"ProgramFiles(x86)\" etc. be #define's to ensure we don't have syntax mistakes as code changes?\n. :+1:\n. Suggested names: _buffer and _codePointsBuffer \n. Could there be multiple errors? What should be the output in that case?\n. It doesn't look like we're doing anything with the diagnostics after this call. Should there be a check before we populate the dependencies below?\n. :+1:\n. Is ConcurrentDictionary concern because of the performance?  Memory overhead?\n. Don't we need this test in CLR as well?\n. Let's keep the current behavior for now. \n. Why?\n. Can't this be a property on FrameworkName?\n. Can items be null?\n. Nit: formatting looks weird.\n. null?\n. Agreed, though if we make other name changes we'll have to catch this case as well.\n. I looked into a few .Sources packages, and this seems to be true.  I filed bugs on Common and Dnx repos to fix this:\nhttps://github.com/aspnet/Common/issues/41\nhttps://github.com/aspnet/dnx/issues/2720\nOther repos also have some .Sources packages so we'll need to identify each and fix this.\n. The base Cache directory (%LocalAppData%\\Local\\dnu\\cache in Windows) is never deleted, everything in it is deleted.  So no, this won't fail on the second run.\nCurrently dnu restore creates the cache folder if it doesn't exists, so I guess we can decide to ignore and not report this at all, and return a 0 instead.\n. Retry is for transient errors so if we eventually are successful, I think we shouldn't really warn about these.  But perhaps, we want to aggregate the errors and if we don't succeed at the end, display all of the errors (after deduping.)\n. :+1:\n. I'll read the doc and fix the formatting :+1: \n. :+1:\n. :+1:\n. :+1:\n. Mainly temporary open handles (antivirus?) could raise IOException.  Much more rarely, if two dnu clearcache commands are running at the same time, we might get a DirectoryNotFoundException or FileNotFoundException. These would go away on the retry.\nWe hit similar issues with TestUtils in the past - file cleanup code there retries 3 times and it seemed to work well. I'm open to other suggestions.\nGood catch with the missing delay. Half a second or so sound good?\n. :+1:\n. OK, I'll remove the retries. We can add them back later if we hear usability issues.\n. Yup, restore creates it if it doesn't exist. I was thinking to keep it safe if we change the restore behavior in the future though.\nBut fair enough, I'll make the change to simplify the code.\n. I thought for X-Plat it was only X64 too.  Good catch.\n. I believe this is coming from what @BrennanConroy  discovered in the packages. We would need a way to keep this list up-to-date somehow if we will need to have runtimes per linux distro versions!\n. What are projectAssemblies vs projAssemblies?\n. OK, will switch to the helper. As dnu restore creates the cache directory if it doesn't exist, it is safe to do.\n. :+1:\n. :+1:\n. Do we need to have a process or automation to keep these two in sync?\n. Tpyo: Errors\n. Why remove these three?\n. If we change the \"case insensitive everywhere\" behavior in the future, we should remember to change that here as well.  How do we remember that?  Perhaps a test?\n. *mismatch -> mismatched.  Also I wonder if we should rename the option. @Eilon \n. MismatchedDependencyRenderer?\n. ",
    "moozzyk": "Yes, if they are shown in the host options. \n. Let's leave it for now. This is small so I might be able to get this in.\n. Changing milestone to RC. Still waiting for CoreClr to merge the API we would use to load dlls/so/dylibs.\n. @natemcmaster - I think the change on the CoreClr side went in last week so is no longer blocking.\n. @nathanaeljones - the support in DNX is scheduled for RC. Can you elaborate more on what your expectations are with regards to \"VS 2015 and VS Code\" ?\n. @nathanaeljones - I see. No. This bug is only about being able to consume packages containing native dlls in dnx - i.e. we need to make sure that if you have a package that depends on a package that contains native binaries you can just use the DllImportAttribute and dnx is able to find and load the native library so that you don't have to do it manually. This also should work on other platforms - Linux and Mac OS\nSide note - it is possible to create nuget packages containing native binaries even today (examples:cpprestsdk, SignalR C++ client, some documentation). I have not tried creating a NuGet package containing both native and managed dlls nor have I tried creating a package that contains a native dll that is being consumed by managed code but I think you can make it work just by adding a build step that copies the native dll to the same folder where the managed dll is copied. I believe CLR (LoadLibrary invoked by CLR) will try searching for the native dll in the folder where the managed dll with the DllImportAttributes is so things should work. This should also work in VS2013. However, the packages with native dlls we will use in dnx will have a different structure - I am not sure if it has been documented yet. As always you can create a package just be creating the right structure in a folder and runing the nuget pack command. Again, I assume that you can just add a build step to copy the native lib to the same folder as the managed lib to consume this dll by a manged assembly in non-dnx projects. \n. @natemcmaster - https://github.com/aspnet/dnx/pull/3049\n. Fixed in b9f0af9512fb87f3af89974ff277cd509552be56 and cba17e017ddc118626d7d9e7f99899d3a3782255. \nRelated issue #3073\n. @oryol - this might be useful for you (though things are changing a bit in RC2 with dnx being replaced by dotnet)\n. @paolo8417 - take a look at the post I wrote some time ago. This was written before RC1 shipped and some things no longer work the same way but it should give you the general idea. Then look at how we build the libuv package: https://github.com/aspnet/libuv-package\n. Could a prepack script work in this scenario?\n. Looks like a dupe of #1363 which is resolved - we now use stl to do concatenate paths and build TPA list.\n. The HRESULT returned by the FnCallApplicationMain does not represent the return value of the target function but the result of the operation of calling the target function (e.g. if for whatever reason we cannot start CoreClr the FnCallApplicationMain will return the HRESULT representing the failure and will not set the exitCode). \nWhat we should probably fix is actually to remove this line:\nhttps://github.com/aspnet/dnx/blob/dev/src/dnx.clr/dnx.clr.cpp#L30\n. Fixed in #2857\n. @davidfowl  @anurse - I am doing this for Helios - #81 in Helios - (and imagine redoing this as well since it should not modify the .rc file on each build) - do you remember what was the annoying part (as per the comment above)? Was it that the .rc file was always modified but could not be added to .gitignore? \n. @davidfowl - I do understand this. I don't know if I understand the \"why\". \n. OK. This is what I thought. I believe we should use auto gen include that is on the .gitignore list - like this: https://github.com/aspnet/SignalR-Client-Cpp/blob/dev/src/signalrclientdll/Build/VS2013/signalrclientdll.vcxproj#L104\n*.aps should be on in the .gitignore as well (if it is not already - I think I added it in dnx)\n. The AMD64 check has already been removed - it was pointless.  We always tried reading from disk even though the dll was never in this location - even on dev boxes (even though the logic was supposed to help debug things).\n. I think we should do just WCHAR wszAppPaths[(MAX_PATH + 1) * 2];  for now. I am starting looking at STL again but it will take some time to get there. \nWRT STL this LPWSTR lpwszModuleFileName = L\"api-ms-win-core-processthreads-l1-1-1.dll\"; scares me btw.\n. #1937\n. This is now fixed by using stl for string concatenation.\n. @davidfowl @shanselman @DamianEdwards @anurse @muratg - in my PR I kept the ability to specify a folder (including .) for backwards compatibility. If we don't want to keep this (or just special case .) this is the time to speak up (@anurse already did :)). \nNote that to keep this behavior we need to go to the disk to be able to disambiguate between a command and a folder unless it is a .. \n. @victorhurdugaci #887 has not changed how we run scripts but only when we run scripts so I assume it is not fixed.\n. @davidfowl - yes. Most of the occurrences are being fixed in https://github.com/aspnet/dnx/pull/2263 which has not been merged yet. I will need to do a final sweep after #2263 is merged since fixing this was not the main goal there.\n. Related #1603\n. This was fixed.\n. I think I had to remove dnvm* from C:\\Program Files\\Microsoft DNX\\Dnvm\\ otherwise the script would refuse to overwrite the files and dnvm would not get updated.\n. Honestly, I did miss it. On the other hand it looks like *.aps files should not even be in the repo:\nhttps://support.microsoft.com/en-us/kb/156513/\nI was even wondering if we needed resources in these projects at all but I think we have them to be able to show file details in explorer. \nI will remove the aps files from the repo and add to .gitignore. \n. Updated the PR with removing including the xplat.h in the vcxproj file.\n. That's actually good - it forces me to do the second part of refactoring... \n. I will close this PR - this is WIP I had to push it since I had to leave early today and wanted to have something to work on tomorrow.\n. Looks good to me but I don't know the code too much so have someone else review it.\n. can't use stl in dnx :facepunch: - learnt that hard way\n. FYI. Resurrecting this PR. I rebased on my latest changes and now it runs on both Win7 and Nano just by copy paste. \n. @davidfowl - this does not affect me yet - I haven't left dnx yet - fighting with nano and SignalR C++ Client\n@ellismg other than freeing pLibCoreClrPal it looks good to me. The other comments are mostly about cleanliness not functionality per se.\n. try/catch is totally unrelated to this - it was more kind of a mental note for myself. \nI don't think it's important to indent the code in the unnamed namespce - I don't think we have any guidelines about namespaces because so far there are no namespaces in the dev branch so I would just leave it as is. \n:shipit: \n. Honestly, I think we should not have this code. If the Uri class is broken then it may be good as a stopgap but ultimately this should be fixed in the Uri class... Maybe find someone who own Uri and have them confirm this is a bug and maybe they will give you a workaround?\n. I saw that but it seems that AppVeyor apparently hung on cloning the repo. The last line in the log is:\ngit clone -q --depth=1 --branch=pawelka/vcxproj git://github.com/aspnet/dnx.git C:\\projects\\dnx\nWill try to trigger the build again.\n. Agree with @davidfowl  that useAnsiCodes sounds weird but otherwise :sheep::it:\n. Maybe - honestly I was not even aware of ExecuteLocked but it probably would not help in cases where the user calls dnu restore on the same app from two different prompts or would it?\nThis is not to say we should not use it if it helps in single dnu restore scenario\n. :+1:\n. I believe it should be dnu restore and not **dnx** restore\n. Dupe of #1733\n. Isn't it actually #1793 ? CoreClr currently does not run on Mac. Use Mono. \n. @davidfowl - in what sense are my feeds broken?\n. Thanks. Will look into it. The specific version I have was returned by VS Code Intellisense... \n. This looks good to me but someone else should take a look as well. \n. :ship::it:\n. dnx.clr.managed  must not be merged with anything. It is a domain manager for full Clr which has to have a real strong name. This is the reason why it does not have any dependencies and we use reflection to call Bootsrapper methods - the dependencies would have to be strong named too.\n. Microsoft.Dnx.DomainManager does not convey the information that this is a domain manager for Clr only. Dnx.coreclr.managed contains a domain manager for CoreClr.  Note that dnx.coreclr.managed is loaded by CoreClr when bootstrapping CoreClr from native code. I don't know if what currently is in dnx.host will be available if the new host dll is being loaded when (before?) AppDomain is created and if this has any other consequences we don't realize (e.g. security?). \nI personally think that the separation we currently have makes sense whereas having dnx.host containing 1 of 2 app domain managers is weird. Names could be improved indeed. \n. I would prefer:\n-  dnx.clr.managed  ->  Microsoft.Dnx.DomainManager.Clr\n-  dnx.coreclr.managed  ->  Microsoft.Dnx.DomainManager.CoreClr\nbut don't really feel very strong about this. \n. @victorhurdugaci only the head of the unicorn we don't know about the rest of it...\n. @ChengTian - I think this is the issue you were looking for #1494\n. Isn't it just a standard integer overflow? Use a checked block to enable checking for overflows in which case you should get an OverflowException.\n. :ship::it:\n. Shouldn't it be in ProgramData\\Microsoft DNX?\n. Good to know where to read it from in the native parts of the stack then... ;)\n. :ship::it:\n. Other than the nits. :ship::it:\n. No, a hidden way of saying what will happen if did not get it right... \n. Looks good to me but I am not very familiar with this code so I don't feel comfortable to sign off on it.\n. #1761\nhttps://github.com/aspnet/Home/issues/498\n. @victorhurdugaci - can you pull and try it? Works on my box but I want to be doubleplussure.\n. Will commit as soon as I get commit permit from @Tratcher \n. :ship::it:\n. Actually - wouldn't be better also to tell that the command typed is not valid? \n. Sounds good.\n. I need to go over pal.*.cpp files to call it done\n. Probably not. Most of it was done anyways...\n. :ship::it:\n. :ship: :it:\n. :watch:\n. ACK - I will treat this as low pri for beta6\n. Fixed in d441627c59\n. Fixing AppDomainManager may be interesting\n. When doing this we should also pass OS, Architecture etc. from the native layer to managed code.\n. Fixed in commits: e87f53dd 9a75ce07 c4bb3092 e466998c f4ec7582 7168520e c68fbfb0 a8f5cd44 85f82f9d 777019b6 255999f7 ac0e8301 f3599e46 af50ad10 4904307c 5689e883 05767f40\n. :ship::it:\n. Travis failed with:\n``\nAssertion at threadpool.c:1201, conditionthreads != NULL' not met\n=================================================================\nGot a SIGABRT while executing native code. This usually indicates\na fatal error in the mono runtime or one of the native libraries \nused by your application.\n=================================================================\n```\nDoesn't seem like something that could be caused by this change.\n. @davidfowl - updated the PR. Tested manually that it is no longer throwing the InvalidCastException\n. I tested the changes manually on the dnx.clr.managed.dll (which is the target for this change)\n. Updated with:\n- changed strongNameKeyFile to keyFile\n- fixed the issue with the snk file search location - using compilationContext.Project.ProjectDirector instead of Directory.GetCurrentDirectory()\n- added a check to fail on Mono\n. :watch: \n. Closing. We will use fake strong name. \n. Add some tests for non-empty namespace - looks like attributes are not written correctly. \nYou seem to be collapsing some elements by grouping attribute values to a comma separated list. Add tests for this - the code to do that is not trivial so it would be good to have some coverage.\n. :watch:\n. AppVeyor \"build cancelled\" - I have not seen AppVeyor build passing in ages. \nTravis builds failed due to failed restore: \nError: FindPackagesById: System.Resources.ReaderWriter\n  The Task was canceled\n(and many more)\n. Also note it's mostly a no-op because we currently don't build ARM on the CI\n. :watch:\n. @davidfowl meaning it is good to go right? (It's blocking #2024)\n. :watch: \n. @davidfowl this can only go in after #2023\n. Note it depends on changes to CoreCLR which will take a while to propagate. \n. This is on my task list - we need to update CI agents to produce OneCore versions. I am trying to confirm that we can build for one core on Windows 8.1 the agents are running on. \n@hpaiemen - if you feel adventurous you can try building your own runtime with support for one core. You need to have Windows 10 SDK installed on the machine and then when you run build.cmd from the root of the dnx repo you should get dnx.onecore.dll. As pointed above - I don't know if it works on non-Windows 10 machine yet (I am currently running build 10074 and Windows 10 SDK 10069)\n. @hpaiemen - are you using beta4 to build this (dnvm list)? If you do, I think you may need to use a later (latest?) version - e.g. from our dev feed dnvm install latest -unstable\n. build.cmd should get/update submodules...\non the other hand. This path\nC:\\Users\\DaWin10.dnx\\runtimes\nLooks wrong (no \\ between DaWin10 and .dnx). @muratg - I vaguely remember someone reported a malformed .dnx folder name before - do you remember?\n. @hpaiemen - Can you share the entire build output?\n. @hpaiemen Unfortunately I don't know why you get the errors when building the dev branch. However, I upgraded the CI agents over the weekend and the next build should contain one core binaries. Stay tuned.\n. @hpaiemen - the latest build now contains onecore binaries. \n. :ship: :it:\n. And in kestrel where we use it to determine where to load libuv.dll. \n. Possibly. Might part of #1970\n. We seem to be doing this now only in one place: https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Loader/LoadContext.cs#L71\n. Possibly - depending on what happens with LoadContext and if ARM is going to be officially supported.\n. You could try loading the dnx.win32.dll and invoking this function: https://github.com/aspnet/dnx/blob/dev/src/dnx/dnx.cpp#L305 make sure to pass the parameters. More or less what we do here: https://github.com/aspnet/dnx/blob/dev/src/dnx.windows/dnx.cpp#L28\n. /cc @davidfowl @lodejard \n@jkotas - I would appreciate if you could also take a look at this \n. @blowdart - this will need security review\n. :watch: \n. Thanks @jkotas!\n. /CC: @victorhurdugaci @muratg @davidfowl \n@blowdart - this will need security review\n. @victorhurdugaci - updated the PR with:\n- added support for %DNX_SERVICING%\n- added a fallback mechanism to use %ProgramFiles% if no matching entries are found in the %DNX_SERVICING\\%index.txt file\n- we will now use the last matching entry from the index.txt file instead of using the first one\n. This might be hard. There is only a handful of common HRESULT values (https://msdn.microsoft.com/en-us/library/windows/desktop/aa378137(v=vs.85).aspx) and 0x80004001 is one of them. They are all very generic and each of them can have multiple root causes. We can add a suggestion to the message though. \nBtw. Does it have to be .NET Framework 4.5.1 (and not for instance .NET 4.5)? From what I remember the bootstrapper only passes the required version of the CLR (which is 4.0.30319 which is used for .NET Framework 4 and above)\n. @davidfowl - it does not make much sense in my opinion - it adds another layer of problems (accessing registry + potential permission issues etc.) just to optimize a message for an error scenario.\nInstead, we could just blindly add \"Is .NET Framework xxx installed?\" for E_NOIMPL to the message.\n. (It would be actually interesting to see what GetLastError() returns in this case and if displaying it can be helpful.\n. I think it should be shown here: https://github.com/aspnet/dnx/blob/32358ec9b8970070ff77cbc5beef28c13e3ab09b/src/dnx.host/RuntimeBootstrapper.cs#L31\n. I was doing some work in this area I looked at this. It appears that when debugging with VS the DNX_CONSOLE_HOST environment variable is set to 0 which results in not printing the exception details (and possibly an AV on CoreClr which is a separate issue). We only set DNX_CONSOLE_HOST to 1 and only if it is not set. @BillHiebert - does VS set DNX_CONSOLE_HOST to 0 when debugging with F5? Why?\n. @davidfowl this will be fixed in my next pr\n. Fixed in eee4029\n. /cc @davidfowl \n. /cc @davidfowl \n. :watch: \n. Looks like VCRuntime140.dll is missing from the folder. \n. Thanks for confirming. I need to check why it was not copied during build in the first place...\n. A setting on the CI had a typo. It should be fixed now and the next build will have VCRuntime.dll\n. /cc @davidfowl @BrennanConroy \n. PR updated\n. /cc @Eilon \n. FWIW - I hit this yesterday too... \n. @muratg - Yes, I debugged through different scenarios\n@davidfowl - there is no string interpolation in C++ ;) - I do have an idea which I need to try out but it will be probably after beta6...\n. With this commit 56f7dd8bc you should be able to fake strong sign assemblies on CoreClr. Just add \"strongName\" : true to your compilation options. \n. CoreClr does not support signing assemblies with private and public key pair. However it does supports \n\"signing\" with a public key only (which is what I referred to as \"fake\" signing\"). If you use \"strongName\" : true the assembly will be faked strong signed with a predefined public key (https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime.Roslyn.Common/CompilerOptionsExtensions.cs#L97-L110). You can get the key and the public key token with sn -Tp and you can use it for InternalsVisibleTo. One caveat - when I tried it with VS Intellisense reported bogus errors but compilation worked. I reported this issue to the VS team.\n. @smbecker - did you really want to comment on this issue?\n. I see. The idea is that strong naming was introduced to the stack and if it there are problems with that we need to fix them now so that workarounds are not needed. Obviously sharing sources is another way of doing this but in many cases is not preferable.\n. :+1: \n. Or from the path if the config file is missing... \n. @davidfowl - yes but at the moment if a user ends up in a limbo like this there are no hints how to get out of it. Adding a message could be a stop gap until VS can somehow handle this.\n. Should dnu patch also allow removing patches? If we want to use it Windows Update then it might need to be able to for scenarios when an update is uninstalled.\n. @victorhurdugaci @muratg \n. @glennc @davidfowl \n. Because of Greece probably... \n(the build was cancelled)\n. :watch: \n. This came from stackoverflow: http://stackoverflow.com/questions/31001880/signing-asp-net-5-class-library-assemblies/31259763?noredirect=1#comment50521697_31259763\nThe scenario is you want to build two versions of the same assembly - one for dnx451 and one for dnxcore and you want them both to be signed. It is currently not possible because you cannot set compilation options per framework. Putting all the different values does not work since Roslyn will throw saying that you cannot both fake sign and strong sign the same assembly.\n. (Assuming \"this doesn't make any sense\" relates to the way the code behaves and not to the scenario). The current behavior is a result of not having framework specific compilation options. On dnx-clr you can both fake strong name and real strong name assemblies. So if both - keyFile and strongName - are specified we don't decide for the user which one they wanted but pass them both to Roslyn and let the compiler throw (https://github.com/aspnet/dnx/blob/5569c699d8d9ebe81d301a948a55cb2ed5ba2cad/src/Microsoft.Framework.Runtime.Roslyn/RoslynCompiler.cs#L225). \nThere is also the opposite scenario - the user specifies keyFile in project.json in which case we would currently throw for CoreClr (https://github.com/aspnet/dnx/blob/5569c699d8d9ebe81d301a948a55cb2ed5ba2cad/src/Microsoft.Framework.Runtime.Roslyn/RoslynCompiler.cs#L218-L221). To fix this we could simply ignore keyFile/delaySign for CoreClr instead of erroring out but the first problem is not that easy to solve. The cleanest solution seems to be to enable specifying framework specific compilation options (in addition to comon compilation options) - e.g. under framework property in project.json.An alternative would be to give real strong naming a higher priority than fake strong naming (if both are present) which - along with ignoring keyFile/delaySign for CoreClr - would make the scenario work but introduces weird magic into the system.\n. I missed the fact that CoreClr can be signed with real strong names and it's not about what the target framework of the assembly being signed but the framework the compilers run on. Fixed!\n. This looks awful to me (from Xml point of view). :ship: :it: \n. After the conversation we had with @pranavkm I don't think we need to do anything here. What we have is quite ugly but the source of the problem is that NuGet does not really use Xml correctly. I would just leave it as is because nuspecs are not intended to be extended and hence what we have will not cause problems. What @troydai proposes is probably the most elegant solution in current situation but I don't think it has any other significant advantage over what we have now.\n. /cc @davidfowl @Tratcher \n. /cc @davidfowl @lodejard \n. Yeah, I saw that but unfortunately there is not much I can do about that. The change is limited to gtest and a test project with just one \"test\" that only passes (the test is empty). Both are plugged in to the solution and I made sure that they compile fine (from VS and command line with MSBuild). \nReal tests (i have a prototype where I have a test testing real code in a separate branch), integration with makefile, integration with CI will come later. \nI think you need to pull the branch and use diff/codeflow if you really want to review this (but I am not planning to address comments related to gtest)\n. @davidfowl - some of it. I concluded that in parameter expansion it does not make too much sense to move to stl - source is buffers, target is buffers and we don't do much operations in between. Still needs clean up though which I am gradually doing when touching this code.\n. This is not the right fix - it would break if --appbase was after a parameter with an argument (e.g. --lib).\n. /cc @anurse @davidfowl @ChengTian \n. Mono will be done separately. This is already too big... \n. Even better - I did not like going to the disk to check if the folder exists.\n. Updated the PR so that we no longer check if an argument is a folder except for . when it always is treated as a folder.\n. (Travis fails because the fix for Mono is separate - #2269 - I will push them together or can squash once reviewed)\n. :watch:\n. @anurse Can't be. If --appbase is provided we don't do any expansion (and never have) so the user would have to provide the host. We will create a new -p argument that will expand to --appbase {path} Microsoft.Framework.ApplicationHost\n. If we always expanded as you propose how would you do dnx --appbase AppFolder MyHost.dll run ?\n. Same caveat as in #2263 - for backwards compatibility it allows specifying path to a folder (or '.').\n. Removed checking if directory exists - now we only support ..\n. :watch:\n. Create a bug to fix that properly (or update #1970 with the discussion we had today)\nI assume you will send a change for Helios soon. \n. @anurse there is more than just OS to be passed around. In addition to OS we should be passing architecture and DNX_DEFAULT_LIB. We want to do this in one go and also scope this change as much as possbile because it is for beta6\n. :ship: :it:\nI suppose that because we pass OS from native code in the final change(i.e. when we remove the environment variable) we will actually pass Windows/Darwin/Linux (something you had before) instead of just \"IsWindows\". Scoping to just to \"IsWindows\" does not have any advantage over returning actual OS. We would initially only check for Windows but we could check for other OSes if we needed.\n. #1970 is kind of related - OS, Architecture etc. should be passed from the native layer.\n. :ship::it:\n. Wildcards are not expected to present. It's documented here: https://github.com/aspnet/Home/wiki/Project.json-file#rules \nIs it possible to update the project.json schema so that it shows this in the corresponding help tooltip (if it is not there already)?\n. All checks will fail since Universe has to be updated for this (https://github.com/aspnet/Universe/pull/252)\n. That was actually a good catch - even though it is a new option we should be consistent and treat it the same way as other options.\n. Rebased on latest renames. \n. @davidfowl I was waiting for a good build after all the renames and this cannot be checked in in the afternoon. Just pushed this.\n. Yes!\n. Related to #1970. We need to find a way passing arguments (this, DNX_DEFAULTLIB, OS, architecture) to the app domain manager without using environment variables. \n. #1122\n. :clap: \n. @NoralK - can you turn on tracing (set DNX_TRACE=1), run dnu and show the output? \n. This does not seem to be beta7 - can you show the output of dnvm list ? \n. Thanks. I need one more thing (hopefully the last one) - what does it show when you do where dnx from your command prompt?\n. Do you actually have .NET Framework 4.5.1 installed on your Windows 7 box?\n. You don't need to worry about missing C:\\ProgramData\\Microsoft DNX and/or breadcrumbs. It's not a problem here. I will try to create a clean Win7 OS with .NET Framework 4.5.2 to see if I can repro this. \n. Good news: I was able to reproduce this issue. \nBad news: this seems to be a bug in CLR. 0x80131522 is COR_E_TYPELOAD meaning the CLR could not load a type. To investigate this I turned on fusion logging but then suddenly everything started to work and there is no error. As soon as I turn fusion logging off dnx will fail with COR_E_TYPELOAD.\n. I installed .NET Framework 4.6 (http://www.microsoft.com/en-us/download/details.aspx?id=48130) and this fixed the issue. \n@NoralK Can you try this and let me know if it works for you?\n. Thanks for confirmation. I am glad it is now working. \nAt this point the issue seems to affect only Windows 7 x64. IIS hosted apps are not impacted by this. I guess if people hit this the workaround will be to either upgrade to .NET Framework 4.6 or run the app with the x86 runtime. \n/cc @danroth27 @davidfowl\n. @jtbennett - I suspect that the issue was introduced in this change https://github.com/aspnet/dnx/commit/05ee5b3045ede6bc8334f7bf3213d027c04f40e7 where we changed the way we load the domain manager. However in case of IIS hosted apps we don't bootstrap CLR ourselves and therefore this code is not executed. I believe that in your case this is not the app itself that fails but one of the steps in the deploy.cmd script is using dnx.exe and this causes the failure. Maybe you could try modifying the deploy.cmd script to use x86 runtime for the deployment steps to workaround the issue (you would likely want to install both x86 and x64 runtimes so that the deploy script uses x86 runtime for deployment steps but the app itself uses x64 runtime)?\n. Fixed in  31093b2 \n. No the build with the fix is not out there yet. I will fix the spelling next time I touch this code - thanks for pointing this out. \n. @NoralK - this issue is fixed in 12325 \n. Thanks for confirmation @NoralK. You are correct beta6 won't be fixed. @jtbennett - stay tuned for beta7 or use the unstable feed.\n. @jtbennett - you can find information on breaking changes in the Announcement repo:\n- Kestrel rename https://github.com/aspnet/Announcements/issues/53\n- dnx renames https://github.com/aspnet/Announcements/issues/51\n. (Thanks for confirming that the error was fixed)\n. #402?\n. :ship::it:\n. /cc @victorhurdugaci @lodejard \n. There is a bug but it's a checklist #2336\n. #2336\n. I believe that because you run tests like this - ForEach-Object { Test-Projects $_.DirectoryName } you actually don't run tests against what you build but you run tests against the project and therefore you compile the project again when the tests are being run. Therefore you try sign with a private key after switching to CoreClr. However, signing assemblies with private keys is not supported on CoreClr and hence the error (you can easily repro this with just dnu build - go to the CrossPlatform project, change your runtime to coreclr - dnvm use default -r coreclr and run dnu build). \nYou can't use both \"keyFile\" and \"strongName\" together - they are mutually exclusive. Thanks for the pointer to the announcement blog post - I already reported this issue and asked it to be fixed. \n. If you turn on tracing (set DNX_TRACE=1) and run dnx . test you will see:\nInformation: [LoaderContainer]: Load name=CrossPlatform, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\nInformation: [ProjectLibraryExportProvider]: GetLibraryExport(CrossPlatform, DNXCore,Version=v5.0, Debug, )\nInformation: [RoslynProjectReference]: Emitting assembly for CrossPlatform\nInformation: [CompilationContext]: Generating resources for CrossPlatform\nInformation: [CompilationContext]: Generated resources for CrossPlatform in 0ms\nInformation: [RoslynProjectReference]: Emitted CrossPlatform in 10ms\nOne way to avoid compilation is to publish the application with no sources and then you can run it using different runtimes, e.g. run the following command from your DnxOnly.Test folder:\ndnu publish -o c:\\temp\\app --no-source\nand then you can run it using different runtimes: \n```\nPS C:\\temp\\DnxStrongNameIssueRepro\\test> dnvm use 1.0.0-beta6 -r clr\nAdding C:\\Users\\ja.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta6\\bin to process PATH\nPS C:\\temp\\DnxStrongNameIssueRepro\\test> c:\\temp\\app\\test.cmd\nxUnit.net DNX Runner (32-bit DNX 4.5.1)\n  Discovering: DnxOnly.Test\n  Discovered:  DnxOnly.Test\n  Starting:    DnxOnly.Test\n  Finished:    DnxOnly.Test\n=== TEST EXECUTION SUMMARY ===\n   DnxOnly.Test  Total: 1, Errors: 0, Failed: 0, Skipped: 0, Time: 0.089s\nPS C:\\temp\\DnxStrongNameIssueRepro\\test> dnvm use 1.0.0-beta6 -r coreclr\nAdding C:\\Users\\ja.dnx\\runtimes\\dnx-coreclr-win-x86.1.0.0-beta6\\bin to process PATH\nPS C:\\temp\\DnxStrongNameIssueRepro\\test> c:\\temp\\app\\test.cmd\nxUnit.net DNX Runner (32-bit DNXCore 5.0)\n  Discovering: DnxOnly.Test\n  Discovered:  DnxOnly.Test\n  Starting:    DnxOnly.Test\n  Finished:    DnxOnly.Test\n=== TEST EXECUTION SUMMARY ===\n   DnxOnly.Test  Total: 1, Errors: 0, Failed: 0, Skipped: 0, Time: 0.096s\n``\n. Can this be related to https://github.com/aspnet/dnx/issues/2454?\n. /cc @jkotas \n. #2343\n. @akoeplinger I updated the post. \n. @JamesNK the sample in the announcement blog is worng. I already asked @danroth27 to fix it. You can't have bothkeyFileandstrongNamein your project.json. See these two issues #2409 #2206 for more details and if you have more questions let me know. \n. The message is technically correct but it comes directly from the compiler so does not relate to settings in the project.json and therefore may not be useful. https://github.com/aspnet/dnx/blob/219871c6063d00f8297eeafe93266f1048f59a45/src/Microsoft.Dnx.Compilation.CSharp/RoslynCompiler.cs#L224\n. We will now extract the public key from the snk and will sign the assembly with this key. We won't get the error anymore since now using both options is valid. (onlystrongNamewas renamed touseOssSigning)\n. For some reason I thought it was on CoreClr. Will remove my comment. \n. @BrennanConroy I wonder if the exit code is not lost between the app and dnvm and what dnvm returns is the exit code of script execution and not what the app returned.\n. #2336 \n. (AppVeyor failure: Build execution time has reached the maximum allowed time for your plan (40 minutes))\n. Why do we need the files in themisc/XreTestApps/ConfigTest/*when we are creating all the files in the test itself?\n. :ship: :it:\n. :ship::it: (after the changes above)\n. It's good to go.\n. @Sandman83 - looks like you hit this #2442. \n/cc @BrennanConroy \n. /cc @victorhurdugaci \n. #2336\n. Looks good to me :ship::it:\n. We should address this in #2282\n. @xanather we changed it a bit post-beta8 - you will get 6.x for pre-win10 versions of Windows (and not 7, 8, 8,1). For Windows 10 you will continue to get 10.0. Out of curiosity what do you use Windows version for?\n. Yes, but why you need to know the version?\n. Thanks @xanather \n. @davidfowl We breadcrumb to be able to service - would you want to service a project? Or there is a different scenario here?\n. LGTM\n. Shouldn't this basically be %DNX_DEFAULT_LIB%? The runtime folder might be different from the location of dnx.exe due to servicing. I wonder if this is not yet another aspect of #1970\n. Yes. My comment was to link to this issue to the other one so that I won't forget about it... \n. @tushargupta51 looks like you are hitting this https://github.com/aspnet/KestrelHttpServer/issues/180. The underlying issue is https://github.com/dotnet/corefx/issues/2155 where CoreClr is trying to load a windows .dll on non-windows OS.\n. On Mono you should be able to sign with [OSS Sigining](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/oss-signing.md) by using\"strongName\" : trueinstead of\"keyFile\" : ...\".\n. @akoeplinger - I wonder why not commit a change to the project and change the signing to OSS? If the snk is distributed with the project then I think there is not much difference between this and  OSS signing. If snk is not distributed with the project you would not be able to compile anyways.\n. @davidfowl Yeah, you're right. How about falling back to OSS signing + warning if the platform does not support snk?\n. @anurse - Pointers? In MSBuild? :trollface: \n. :ship::it:\n. Should we even allow overwriting files by default? feels scary (--force option would be useful) \n. @Eilon @muratg: Managers dreams come true : moozzyk added this to the 1.0.0-beta8 milestone just now\n. :clap:\n. We don't own System.Runtime.InteropServices.RuntimeInformation don't we? It's probably on CoreClr. We have IRuntimeEnvironment.\n. :ship::it:\n. It shouldn't - from what I checked Helios did not use DNX_DEFAULT_LIB. (The next couple of changes will most likely will though)\n. Mono is not affected by this change. The second part of this is about changing how we pass things to the bootstrapper in general and this will be where Mono will be affected.\n. :+1: \n. @natemcmaster This is a tooling issue that was fixed very recently. \n. :ship::it:\n. :ship: :it:\n. I am touching this file as we speak (https://github.com/aspnet/dnx/compare/pawelka/coreclr_unix#diff-9c69ad97a4a478903e84088c363feebaR356) so I can do this quickly.\n. @xanather - what are you running clr/coreclr and where windows10/nano etc.? Or are you trying to run Kestrel? \ndnx-clr-win-x86 should not need vcruntime140.dll at all. Forwarders (i.e. api-ms-win-crt-runtime-l1-1-0) are only needed on onecore (currently Nano and Win 10 IoT core on RaspberryPI only) and these are only x64 bit. \nSome beta6 builds from the unstable feed were broken (#2129) and did not include vcruntime140.dll. We had the same problem with some pre beta7 builds from the unstable feed but the official beta7 build was fixed.\n. Was it coreclr or desktop clr? Do you see the same thing happening if you are running beta-7?\n. Looks like https://github.com/aspnet/Announcements/issues/44\n. If you have VS Professional/Enterprise you want this: WebToolsExtensionsVS14.msi.\n. Thanks. I will have to check this. vcruntime140.dll should not be needed on non onecore system - runtime should not depend on this. The forwarder (api-ms-win-crt-runtime-l1-1-0.dll) seems to be a separate issue but needs to be looked at as well. \n. What is your active runtime? I just installed beta7 coreclr runtime on Win7 and am able to run dnx (the errors you're seeing come from native parts of the stack so running dnx should be enough):\n```\nC:\\Users\\Administrator>dnvm list\nActive Version     Runtime Architecture OperatingSystem Alias\n------ -------     ------- ------------ --------------- -----\n       1.0.0-beta7 clr     x86          win             default\n  *    1.0.0-beta7 coreclr x86          win\nC:\\Users\\Administrator>ver\nMicrosoft Windows [Version 6.1.7601]\nC:\\Users\\Administrator>dnx\nMicrosoft .NET Execution environment CoreCLR-x86-1.0.0-beta7-15532\nUsage: dnx [options]\n...\n```\nI also don't quite understand this:\ndnx-clr-win-x86.1.0.0-beta7 wants api-ms-win-crt-runtime-l1-1-0.dll at startup (VCRUNTIME140.dll came included in the bin folder for this version of the runtime).\nclr runtime never relies on forwarders - it's linked against kernel32. Can you share what you have published or provide steps to repro this issue?\n. No problem. Hint - it feels to me that the native library you are using is built for onecore (UAP?) and hence it is depending on vcruntime140.dll/api-ms-win-crt-runtime-l1-1-0.dll. If you run dumpbin {dll} /dependents from the developer command prompt you will see what a library depends on and you should be able to identify the offending one.\n. If you want to create a self contained package you need to publish your app. You can do that from VS or from command line with the dnu publish command. When you publish your app it will include the runtime. \n. @ddobric - check in the project->properties->build of the ConsoleLib that you are building for AnyCPU and that the \"Prefer 32-bit\" flag is unchecked.\n. @ddobric - you said that the problem occurrs if you reference a library called ConsoleLib. How do you build this library? How do you reference it? Is it an ASP.NET 5 library or just regular dll?\nYou can run only coreclr on arm. I am not sure if tooling supports arm at this point - last time I checked it did not. You can publish your application however from command line using dnu publish\n. @ddobric - I think the issue is that you are trying to use recent CoreClr runtime packages (i.e.:\n\"System.Collections\": \"4.0.10-beta-23019\",\n\"System.Console\": \"4.0.0-beta-23019\",\n\"System.Linq\": \"4.0.0-beta-23019\",\n\"System.Threading\": \"4.0.10-beta-23019\",\n\"Microsoft.CSharp\": \"4.0.0-beta-23019\"\nwith older runtimes - like beta5 or beta6. This won't work because you can't mix and match CoreClr packages and dnx runtimes. Unfortunately there is not a good way of telling what CoreClr versions should be used with what version of dnx runtimes - especially when you are using multiple feeds. For the latest unstable bits you could check versions here: https://www.myget.org/gallery/aspnetvnext (but in that case you could just probably just select the latest available version - as displayed by VS intellisense). Similary, if you just used the latest release version (i.e. beta7) you should use the latest version from the stable feed. You could also see the versions shipped as part of the latest stable release here https://www.myget.org/gallery/aspnetrelease\nPublish just packages your application but it does not check if the application is actually able to run. If your application doesn't/can't run locally the packaged version will behave the same way (only, in some cases - e.g. arm published on non-arm, you can't check if it runs). I was able to repro the manifest issue (was wrong about Prefer 32-bit flag) by creating a beta7 HelloWorld application and then running it on beta5 coreclr runtime. I think fixing this bug #2197 may help a little bit in cases where a newer dnx runtime is being used with older CoreClr packages. \nThe settings from the \"sdk\" section in the global.json file are currently used only by tooling. \n. I do need this for scripts.\n. :ship: :it:\n. I tried both runtimes and could not repro this. I published using the commands from @TheBlueSky on Windows 10 and then copied the published folders to Win 8.1. and ran web.cmd script. In both cases I was able to start the app and send a web request successfully.\n. On Win8.1/2K12R2 we should not depend on this forwarder at all. Only onecore versions depend on this forwarder but they should not run on Win8.x/2K12R2. In addition nothing from the clr runtime depends on forwarders so it is weird that the issue also occurs for clr runtime. Finally dnx.exe itself does not depend on this forwarder as well and we load other dlls (including onecore) dynamically. If they fail to load (e.g. due to missing dependencies) there is no popup but an error printed to the console. So, it seems like in this case somehow dnx depends on api-ms-win-crt-runtime-l1-1-0.dll only that when I checked beta7 bits it did not:\ndnx depends in the coreclr x64 beta7 runtime: \napi-ms-win-core-errorhandling-l1-1-0.dll\n    api-ms-win-core-sysinfo-l1-1-0.dll\n    api-ms-win-core-libraryloader-l1-1-0.dll\n    msvcrt.dll\n    api-ms-win-core-synch-l1-2-0.dll\n    api-ms-win-core-rtlsupport-l1-1-0.dll\n    api-ms-win-core-processthreads-l1-1-0.dll\n    api-ms-win-core-profile-l1-1-0.dll\ndnx dependents in the clr x86 beta7 runtime:\nKERNEL32.dll\n   ADVAPI32.dll\n@TheBlueSky - can you share your published app so that I can take a look what's going on? Also can you turn on tracing (set DNX_TRACE=1) and run your app (both clr and coreclr versions) from command line and provide the output if you get any? \n. I believe the issue here is the kestrel and not the dnx. If you go to either of runtime directory you published and you just run dnx.exe it runs correctly (i.e. you don't see the popup) right? With @halter73 we found that libuv used by kestrel is not built correctly and depends on things it should not (including the forwarder you mentioned):\n```\nDump of file .\\libuv.dll\nFile Type: DLL\nImage has the following dependencies:\nADVAPI32.dll\nIPHLPAPI.DLL\nPSAPI.DLL\nUSERENV.dll\nWS2_32.dll\nKERNEL32.dll\nVCRUNTIME140.dll\napi-ms-win-crt-runtime-l1-1-0.dll\napi-ms-win-crt-string-l1-1-0.dll\napi-ms-win-crt-stdio-l1-1-0.dll\napi-ms-win-crt-environment-l1-1-0.dll\napi-ms-win-crt-convert-l1-1-0.dll\napi-ms-win-crt-heap-l1-1-0.dll\napi-ms-win-crt-filesystem-l1-1-0.dll\napi-ms-win-crt-utility-l1-1-0.dll\napi-ms-win-crt-math-l1-1-0.dll\n\n```\nThis will be fixed as part of https://github.com/aspnet/KestrelHttpServer/issues/50. For now there is not a good workaround besides copying the missing files to the runtime folder.\n. :+1: Other than that it looks good to me.\n. Actually are you planning to add any tests for this?\n. @davidfowl as I said it is required to fix #887 and not that it fixes #887. The fix prototype for bug-887 is here https://github.com/aspnet/dnx/commit/69b90084c6703c03ca7edd96d784e86316f901e1. I decided to send this separately since I am waiting for #2643. Without #2643 I don't have framework moniker - only the full name of framework. Also in the prototype I used different names - let me know which ones you want.\n. The method was already like 300 lines long - I extracted a couple methods and simplified some ifs.  It's hard to review but it is now easier to read.\n. I will wait for @victorhurdugaci and update the PR after he commits #2643. \nI have not checked the performance but from what I understand currently we build only one configuration and then copy explicitly for dnx451 and dnxcore50 (btw. this is also conceptually wrong since it assumes we always build both dnx451 and dnxcore50 which does not have to be the case). After the change the scripts need to/will be changed to copy only once but to %build.Configuration%/%build.TargetFramework% folder. So instead of doing all the copying blindly without really knowing what was built each build will take care of stuff it built.\n. Replaced by #2679\n. Yay!\n. @janvorli I think loading libcoreclrpal.so was added by @ellismg sometime in spring. It has not failed since so no one was aware it is not needed. I will remove loading this lib.\n. @davidfowl - created a #define for Microsoft.Dnx.Host.CoreClr but it does not look prettier... \n. @EGrishin - what version of runtime you are using when you get this (i.e. what dnvm list shows). Do you have dnx.win32.dll in the runtime folder you are using (the folder is in %USERPROFILE%\\.dnx\\runtimes - e.g. for beta7 coreclr it will be in: %USERPROFILE%\\.dnx\\runtimes\\dnx-coreclr-win-x64.1.0.0-beta7\\bin\\)\n. (FWIW - I installed all the beta7 runtimes on my Win7 x64 machine (which does not have any dev bits) and was not able to repro this issue).\n. @EGrishin - can you share your runtime directory? I am wondering if this is related to the runtime itself or the environment/machine. Also a few more questions:\n- does this happen only on runtime 15594 or also on other runtimes you have installed (like beta7, 15548 etc.)\n- have you tried the same runtime on a different machine (ideally win7 english, non-win7 russian (I think it's russian an not ukrainian right?)) - I wonder if it might be related to OS version or language settings\n- are you sure you are running the dnx installed with the runtime (e.g. where dnx from command prompt)\n. No further details provided. Closing.\n. @EGrishin - in the other bug the issue was fixed by installing the latest updates. Make sure your system is up-to-date if you are still experiencing it (actually even if you are not experiencing it it is good to have the latest updates). \n. I was never able to reproduce the issue in my environment so I don't know exactly which KB fixes this. On the other hand dnx is going away so this would no longer be a problem in RC2 and beyond. \n. /cc @ellismg \n. Is it possible to add tests?\n. @davidfowl this was one of the reasons why scripts are updated as a separate commit - so that they can be committed separately\n. @davidfowl - I will commit scripts separately after coherence with the first two commits passes - and it can only happen if I get a ship it :)\n. Yes. I will close this. The scripts won't go in in the current state. They either need to be redone a little bit or not touched. At the moment - because we have a hardcoded Debug folder in the source path nothing is being copied on the CI which is a good thing.\n. OK. Will create one and assign to myself.\n. :ship::it:\n. @davidfowl - you are talking about console commands right? The bootstrapper already returns 1 in case of a failure: https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Host/RuntimeBootstrapper.cs#L33 (as opposed to console commands where some of them return -1)\n. Good point - I quick searched only for return -1 but the application host is async so it returns Task.FromResult(-1)\n. @muratg - this is polish. can be done as part of sign off..\n. @davidfowl  yes (forgot to force push after rebase to close the PR). And the build passed on the CI. \n. /cc @bricelam \n. This is what I am thinking - we should investigate and do the right thing if we don't it will pop up in random places.\n. it's legit fixed now (it was a missing include)\n. Yes, since --debug works just fine Desktop CLR and we can leave it as is - especially that it makes bootstrapper debugging easy - you can debug both managed and native code. For Desktop Clr there is no difference between --debug and --bootstrapper-debug. For CoreClr the --bootstrapper-debug option allows debugging the native code. The caveat is that you can only have Native Code selected as code type in VS. After Core Clr is initialized we can attach debugger that has either just Managed/Core Clr or both Native and Managed/CoreClr selected as code types. \nThis is also the reason why the code is in the native part. WIth --debug we are now able to debug the transition from native and managed. If we waited for the debugger in the managed code we would end up having a gap where --bootstrapper-debug cannot get you beyond the native code and --debug does not allow you to debug anything before - yes this is the marshaling code you looked at yesterday.\nAnother caveat is that we don't know debugging is supposed to work on non-windows. \nCurrently having internal/undocumented options is not supported. I talked to @davidfowl yesterday and we decided to just add this option as a regular dnx option. \n. If you insist I can add some tests for parsing but I don't expect this code to change often if at all. In fact the old code did not work in most cases (when you have an option with an argument that was not --appbase and --debug was after) and no one noticed that. The function that I moved to common is mostly covered by tests added when removing . from dnx . run\n. @davidfowl - updated the PR to remove the logic to parse command line. We already had the code that does it so I just moved it to dnx::common and use it. For desktop clr we will now go twice over the parameters but I don't think it is expensive here given that  in 80% case there is less than 5 parameters. \n. @danroth27 @muratg \nIs it a dup of  #2730? (They are in different milsteones though)\n. :ship::it:\n. Do we have CentOS CoreClr packages? I thought we did not...\n. Announcement is up https://github.com/aspnet/Announcements/issues/70\n. I don't see it in the code - native code writes just to:\nxout << entry << std::endl;\nwhere xout is defined like this\n```\ndefine xout std::wcout\n```\non windows \nand like this\n```\ndefine xout std::cout\n```\non other platforms.\nMaybe you need to add more context?\n. (or redirecting standard streams)\n. @davidfowl  - this is what I am proposing (not tested)\n. @davidfowl  Just tested. I am going to merge this to dev (after reverting changes to tpa)\n. Looking at Travis...\n. @davidfowl - I need to fix \"Turn these into get only properties and remove the fields\". DNX_APPBASE can be taken care of separately depending on what we agree on. If there are no other comments then that's pretty much it. \n. I will merge it as is. I fixed getters in a later review. We need to talk about DNX_APPBASE\n. /cc @anurse \n. Yes, creating a RID should be simple. For now I am just working around this issue since I don't want to make the PR any bigger.\n. /cc @dougbu \n. lsb-release may not actually exist on redhat-based distros. We kind-of to detect CentOs but we don't have this in the native code yet. If os-release always exists on Ubuntu 14.04 and (have the expected values) then we could use it instead of lsb-release but it's not beta-8\n. @jstclair https://github.com/aspnet/dnx/commit/097c7e55a6ddc6b13831949c86a9633f71714387#diff-f79c267a7f222c20dba5339e1498a6d3R231\n. @ctaggart  https://github.com/aspnet/dnx/commit/097c7e55a6ddc6b13831949c86a9633f71714387#diff-f79c267a7f222c20dba5339e1498a6d3R231 - we know should be using /etc/os-release - maybe the build is not out yet?\n. @cesarbs Should Debug.Assert call Environment.FailFast() though? I am pretty sure that on full Clr Debug.Asserts won't crash the process...\n. :ship::it:\n. I actually think tests need to be updated...\n. :+1: \n. If you want to build the dnx repo you have to use Mono. If you want just to run your app you can don't need Mono if you decide to go only with CoreClr.\n. No. If you want to build your application  (and not the dnx repo) you should be able to do this with just CoreClr. If you want to publish your app so that it can be used on a different machine you need to use the dnu publish command which allows you to provide what runtime you want to use on this machine.\n. /cc @BillHiebert @DamianEdwards \n. (travis will most likely first because the build is currently broken)\n. The thought was that until we know how to debug CoreClr on non-windows we should not do this. Currently there is no support for this at all https://github.com/aspnet/dnx/blob/dev/src/dnx/pal.linux.cpp#L27-L30\nWhenever I needed to debug anything on Linux I just started dnx directly from the debugger. \nOnce it is possible to debug CoreClr we should revisit this.\n. /cc @anurse \n. /cc @BillHiebert @DamianEdwards \n. Plans have changed - we will not be using DNX_DEBUG_PID_PATH at all... so I removed even more code\n. @muratg @davidfowl Assigned to beta8 milestone\n/cc @Tratcher \n. It's not special casing (but it still never works..)\n. https://github.com/aspnet/dnx/issues/2628\n. Fixed in 4fc3f228fa\n. Yeah. It's rebased on release. Forgot to change the branch when creating the PR.\n. @troydai - yes, ServerTests are all failing because of this.\n. @troydai - existing tests are all passing and some of them are checking that the exit code is not 0. I can probably add tests for some conditions (e.g. not sure about this: https://github.com/aspnet/dnx/pull/2865/files#diff-0b1faa794a3c5fb04d329d96e22f8391L55) if you convince me that they add value. \n. @JunTaoLuo - I can try that. \n. Testing > 0 is not much better than != 0 I think. But I will try what @JunTaoLuo proposed and see how far I can get.\n. I checked that - this value is not being used anywhere let alone returned as exit code so I left it as is. \n. @JunTaoLuo - now I see this. I missed that they are returned from the OnExecute and not from the Register function. Will fix that because as you said - they are being returned as exit code.\n. @JunTaoLuo @troydai - Updated the PR:\n- all the tests that used NotEqual(0, exitCode) are checking against the expected exit code (1 or 2)\n- all the commands now return 1 in case of errors (good catch @JunTaoLuo - I missed the } and therefore thought that we never checked/used the value)\n. @muratg @troydai  - thanks for following up and kicking off the travis build!\n. :ship::it:\n. @natemcmaster - can you see anything interesting if DNX_TRACE is set to 1? For fatal errors we always should display a message. dnx does not know about icu so it cannot fail. I guess in this case CoreClr failed to load. The thing I don't know whether there is a bug in our code and the message was not printed or there was an issue with CoreClr but they still returned the success code in which case we should report it to them.\n. Need to investigate:\n- why we don't print any error message (probably because we use a FAILED macro equivalent which only treats negative results as failed)\n- why the exit code is different when running with DNX_TRACE=1 than when running with DNX_TRACE not set\n. @kaczasty - see this thread https://github.com/aspnet/dnx/issues/3059 - looks like 55 and CoreClr are not compatible..\n. (It also wouldn't work on CoreClr)\n. :ship: :it:\n. @anurse - looks that if the DNX_RUNTIME_ID is specified GetAllRuntimeIdentifiers returns only DNX_RUNTIME_ID without any fallback/hierarchy. This does not seem to be correct - I thought the idea was that I can override my runtime id but if override to something that is in the hierarchy I get the fallback I would get if I was running a supported OS version.\n. The lack of fallback on non-Windows OSes is a bit problematic for native libs - especially on Mac OS. On Mac OS you may want to have just one .dylib that works for a number of versions (e.g. libuv in Kestrel). Currently you need to copy this .dylib x number of times (e.g. 3 if you want to support 10.9, 10.10 and 10.11) instead of just using the osx-64 folder as fallback.\n. ACK\n. :ship::it:\n. I will but I need someone who does not have Win 10 SDK installed (@victorhurdugaci ?) run ./build verify to make sure that none of the tests are failing due to an additional line in the output\n. Will rebase and commit by EOD\n. No. It may break tests that don't expect additional output. We have seen this with the original change.\n. @Tratcher - can it be somehow related to the duplicate ApplicationHost parameter?\n. @davidfowl  dnx --appbase . Microsoft.Dnx.ApplicationHost Microsoft.Dnx.ApplicationHost web (transformed from dnx -p Microsoft.Dnx.ApplicationHost web) - both hosts were on the stack and since breadcrumb writing is not blocking and happens on a background thread both were writing at the same time.\n. /cc @anurse \n. I assume that we would also return unprocessed values for other OSes\n. :+1: - I never really liked cramming distro and version to one property\n. If we put it in backlog then we will never be able to fix this as it will be a breaking change.\n. @victorhurdugaci on Linux you need the name of the distro. I think it would be good to keep it separate from the version. At the moment we concatenate both and pass as the version but it requires additional parsing. Also note that uname -a does not return the version. This is why we need to read the lsb_release. (On a separate note - maybe we should read just os-release which also exists on CentOS)\n@pakrym - when doing this don't forget about Mono\n. Do you have to configure your app to read configuration from env variables configBuilder.AddEnvironmentVariables();\n. #2900\n. 7577ab1a092047931505ab00299d53072be9cb73\n. See the PR for more details.\n. Travis failures look legit but I don't see how they could be caused by this change. Otherwise looks good to me.\n. :ship::it:\n. @davidfowl - I filed this bug after talking to you about this yesterday... Anyways - why is it useful to return non-zero exit code if no args were provided?\n. @JunTaoLuo - known issue - it has not been implemented so far - one of the issues is that CoreClr is not debuggable at the moment. \n. No. The kestrel command does not have the --packages parameter so it does not have any effect. \ndnx --packages {packages} kestrel should work though - --packages is a bootstrapper parameter.\n. Thanks!\n. Can this be this related to #2702?\n. :ship::it:\n. I think you will need to revert/fix this: https://github.com/aspnet/Testing/commit/1e9cb8ad3a83aa4cd66b579942b420315795f2f7 after you commit this change\n. :+1:\n. :ship: :it:\n. :ship::it: (after you confirm we are not wrapping application exceptions in AggregateExceptions and Travis passes)\n. does this break dnx-watch?\n. :ship::it: (once travis passes)\n. Is necessary to add a test for this or this is covered by existing tests?\nAlso - can you check why travis is failing and fix it?\n. Is necessary to add a test for this or this is covered by existing tests?\nAlso - can you check why travis is failing and fix it?\n. @pakrym - looks like this change broke the build.\n. This PR depends on https://github.com/aspnet/Universe/pull/299\n/cc @davidfowl @muratg @pranavkm \n. This requires #2977\n. 1), 2) and 4) are already supported\n3) do we really want to fallback to OSS Signing if the user specified keyFile? My thinking was that we wanted to do this on Mono because we treat Mono as dnx451 so the user has no way of saying \"use keyFile on Desktop CLR and use OSS on Mono because keyFile is not supported\" . For CoreClr \"keyFile\" is never valid and the user has the option to specify compilation options for dnxcore50 so falling back is kind of encouraging bad practices. \n. I must be missing something - if real signing (i.e. with snk) is supported/valid on CoreClr why we even need a fallback? Currently we just don't sign the assembly at all and print this warning (warning DNX1001: Strong name generation is not supported on CoreCLR. Skipping strong name generation.).\n. I guess I don't see how the behavior we currently have and this PR is different from what you are saying...\n. \"keyFile\" + \"strongName\" - we already talked about that. It results in this error from Roslyn: Compilation options 'CryptoPublicKey' and 'CryptoKeyFile' can't both be specified at the same time. and we didn't want to decide for the user which method of signing should be used on full Clr. \nFalling back to OSS signing on Mono (and the warning) only happens if strongName is not specified. If both are specified you get 1) because it's incorrect to have both.\n. :ship::it:\n. Helios is no longer supported as the host. See: https://github.com/aspnet/Announcements/issues/70. \n. Beta8 shipped today. See the details in the announcement blog post, install the latest tooling and report back if you have any questions. \n. +1 for adding the test separately - I think we need this fix ASAP\n. @dougbu  - looking...\n(btw. I just ran dnx with your change in the Universe and now my CoreClr tests are failing the build since they run with the default runtime and not the one that has changes. So, thanks for fixing this in Universe).\n. LGTM . :ship: :it:\n. @cesarbs - is this happening on CoreClr only by any chance?\n. What has changed that you can now enable the tests without any other change?\n. @victorhurdugaci - not sure what it means... was it environmental?\n. :ship::it: (github does not send updates where a PR is updated so I missed it)\n. @fmarcoux96 - fixed, thanks\n. @alexmg - I updated the announcement to include the link to the OSS signing post from the corefx repo.\n. @GuardRex - if you publish with --no-source you actually should not need the .snk at all. If it is copied it is a bug. (.snk files are needed only to build assemblies and --no-source publishes assemblies that have already been built so .snk should not be needed).\n. @GuardRex - no worries...\n. Great! Thanks for confirming!\n. @leak have you tried publishing with --no-source and --runtime (if you don't expect the runtime to be on the target machine)? This should create a self contained app.\n. Have you tried using packInclude in your project.json? See http://blogs.msdn.com/b/webdev/archive/2015/10/15/announcing-availability-of-asp-net-5-beta8.aspx for more details.\n. :ship::it:\n. libicu is missing\n. @natemcmaster - updated the PR with functional tests that work on Windows and did not see the issue you had. Take a look at the project in misc maybe you will find what the difference is?\n. @natemcmaster - this still should work - the package I tested manually had both\n. @natemcmaster - glad to hear that. Still - a very weird case... btw I updated my Kestrel branch so that DllImport can work on Mono and CoreClr - you might find it helpful...\n. Updated the PR with tests for references to packages and projects containing native dlls. Caveats:\n- preloading of .so's does not work on Mono Linux so loading an .so from a package will not work unless the user adds the path to LD_LIBRARY_PATH (Kestrel expects the .so to be in a default location on Linux so no tricks are required)\n- the RID override on Travis make a test fail so I just skip the test if the env variable is defined. It is fine since a fake IRuntimeEnvironment instance is injected and the test will run on Windows and will test non-Windows OSes\n/cc @davidfowl \n. I updated the PR with the fix for the test. I also fixed a but where OS Version would be reported incorrectly on Mono runtime on El Capitan - the assumption was that the version has always 3 numbers but it apparently can have just two numbers in which case we reported just \"10\".\n. @davidfowl - I will file a bug for this and do this separately. Otherwise is it good?\n. source ~/.dnx/dnvm/dnvm.sh\n. Sorry, I updated the command - the folder should be dnvm instead of bin. \n. Closing as per @davidfowl \n. pre-beta8 because I have not had a chance to play with that recently.\n. @npateman Add the folder where libuv.dll for ARM lives to the PATH. \n. @npateman - did you publish your application with the runtime? Does your published folder contain coreclr.dll?\n. @npateman - I finally had a few minutes to check this. Sorry for the delay. \nI was able to make things work without any hacks. This was just a basic Hello World console app. Here is what I did:\n- installed the arm runtime: dnvm install latest -arch arm -r coreclr -u\n- in my application folder (using an x64 runtime) restored packages: dnu restore -f https://www.myget.org/F/aspnetvnext/api/v3/index.json\n- made sure my application runs on x64 (dnx run)\n- published the application for arm - dnu publish -o C:\\temp\\Console --no-source --runtime dnx-coreclr-win-arm.1.0.0-rc2-16595\n- x-copied the published application to my RPi2\n- remote PS'd to my RPi2 and ran the application (for whatever reason the run.cmd was not created so I just ran the application directly):\n[my-pi2]: PS C:\\temp\\Console\\approot> .\\runtimes\\dnx-coreclr-win-arm.1.0.0-rc2-16595\\bin\\dnx.exe .\\packages\\Console\\1.0.0\\lib\\dnxcore50\\Console.dll\nHello, World!\nYou must be missing one of the steps or you may have a broken shared runtime installed which you use to run your application.\n. @npateman - the error Failed to start CLR host indicates that the runtime could not be loaded. It does not matter how simple or complicated your application is if the runtime cannot be loaded nothing works. Once you get past this error and still have problems I can take another look if you post more details.\nAnother thing is that you are trying to use an rc2 runtime with rc1-final packages. I don't think this can work in general. Either stick to rc1 or move to rc2 (although dnx is being retired in rc2 in favor of dotnet)\n. This is how we find the path for project references: https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Runtime/NativeLibPathUtils.cs#L32\n. Can it be because you have win-x86 in the path and the runtime id is win7-x86?\n. There is a simple fallback model for project references but it is not as rich as for package references. Due to the schedule it was not feasible to change the code to use the same mechanism (and the code was still in flux). Here are the fallbacks recognized in project references: \nhttps://github.com/aspnet/dnx/blob/dev/test/Microsoft.Dnx.Runtime.Tests/NativeLibPathUitlsFacts.cs#L13-L18. The value goes to the nativeSubfolder in Path.Combine(projectPath, \"runtimes\", nativeSubfolder, \"native\"); which is the path where dnx will look for the library.\n. I opened the issue to track this #3132. \n. :clap: \n. :ship::it:\n. does not seem to be related to this change - Error: FindPackagesById: Microsoft.AspNet.Testing\n. I did that too before :) @BrennanConroy  - I think you need to take a look at this....\n. The fakes where in the same file and marked as private because they are not useful outside this test class so there is no reason to pollute the solution with new files. Is there any specific reason you moved them out? If not, I would prefer to put them where they were before. \n. I see. I just glanced at the change and did not notice your tests were in a different file...\n. :ship::it: (after you add access modifiers and travis passes)\n. I was thinking about this after I saw your bug and was wondering how common it is to publish sources for projects that need to be signed - typically people keep their snk private in which case this won't work.I am also wondering if it is possible just to use scripts that run on publish to take care of copying the file in cases you want to publish sources and the snk.\n. What is the OS? Also dnx living in the Windows\\System32 does not seem right - are you sure you don't get permission issues? Have you tried setting DNX_HOME to move the runtime out of windows folder? I think if you set this machine-wise all profiles will use it so it may be easier to troubleshoot.\n. @pgrudzien12 - Have you seen my comment? There is no CoreClr for Linux ARM available as a drop currently. You could try building it from sources. Once you get the CoreClr creating a runtime shouldn't be that bad (it took me a few hours to hack the first version of the ARM dnx for Win10 IoT Core once I found the right CoreClr).\ndnvm.sh was not updated for arm since the dnx arm runtime works only on Windows so only dnvm.ps1 is aware of this architecture. \n@dlech - not being able to detect OS version or architecture will show up mostly in places where there native code needs to be used (e.g. Kestrel). In case this causes problems you could try setting the DNX_RUNTIME_ID environment variable accordingly (and obviously provide the correct versions of dependencies - e.g. in case of Kestrel you would have to build libuv). For CoreClr when creating a Linux ARM version you would have to change this line to something similar that we do for windows here to get the correct architecture.\n. @pgrudzien12 - out of curiosity what were the problems with compilation?\n. :ship::it:\n. @reliak - you may want to take a look at what we do in the Kestrel repo\n. @reliak - if you look at Kestrel you will see that libuv is a build dependency. Then the LibuvCopier operates on these package and copies the contents. So, in a sense it is similar to your scenario with one more level of indirection (the LibuvCopier). It was done mostly like this (instead of using a script) because figuring out where the packages were restored is a bit tricky. I realize that you are looking for something easier and working out of the box but I am not sure if it can be done more easily at the moment.\n. This also breaks when trying to publish for arm. Even though in my project.lock.json I have the \"DNXCore,Version=v5.0/win10-arm\": { target if I publish with --framework dnxcore50 the published project.lock.json file contains only targets for \"DNXCore,Version=v5.0/win7-x86\": { and \"DNXCore,Version=v5.0/win7-x64\":\n. -p and --appbase are mutually exclusive, because -p is expanded to --appbase. dnx -p .\\tests test expands to dnx --appbase .\\tests Microsoft.Dnx.ApplicationHost test so is what you are looking for.\n. Feels like a problem that might occurred if load happens from multiple threads and the hashset is in an inconsistent state \n. I think we need to use Concurrent in dnx. If the user is trying to use DllImport in multiple threads I don't think clr will/should try serialize it. \n. @natemcmaster - I don't know where it is going to land. @davidfowl will know. I will try to fix this soon to unblock you.\n. Fixed in 181910604.\n. @ghostkaa @010227leo @kaanoo2904 - I think the common thing is that these are non-English Win7/2008R2 OSes. Can you confirm? Also, I assume you have the latest updates/service packs installed.\n. @kaanoo2904 - try installing latest updates - this apparently helped in  @010227leo to fix the issue. If it does not let me know what language you are using an I will try to repro this on the same version setup (but with latest updates).\n. @kaanoo2904 I don't know what was missing that dnx couldn't run but it is not a DNX responsibility to provide updates - Windows Update is the mechanism of keeping your machine up to date. I also don't know why devs would prefer to turn off updates and a) be vulnerable b) miss important additions that make it impossible to run some apps (like dnx). \n. @aplex In a few cases installing all the latest updates (not only SP1) fixed the issue.\n. @andy65007 - \n1) if updating the machine fixes the issue then I don't think it's a bug per se. Why wouldn't you want to update your machine?\n2) win32 in the name refers to the version of dnx linked against win32 libs as opposed to the one linked against onecore \n3) dnx is going away and we are not making any changes to it. You may want to look at dotnet cli which will replace dnx. If you want to continue to use dnx until dotnet cli is released please update your machine with latest service packs and patches.\n. /cc @natemcmaster \n. /cc @cesarbs \nI guess it should be:\nkeyFile = Path.GetFullPath(Path.Combine(projectDirectory, keyFile));\n. That's fine\n. :ship::it:\n. new iis publish copies existing attributes. processPath is the only one that is created if it does not exists and modified if it does exist.\n. @mehmetafsinyuce  Did you include runtime when publishing?\n. I think this might belong to the https://github.com/dotnet/corefx repo\n. dnx/dnu are being replaced with dotnet. dotnet publish has a variable containing the ouptut path\n. Is it an error or just a message? The pdbs are not side-by-side with runtime dlls so you get these messages. Note that you have more messages of this kind than just for Microsoft.Dnx.Host.Clr. Another thing to note (though I am not sure if it is relevant) is that Microsoft.Dnx.Host.Clr in the output above is the only dll that does not have the full path. I don't know why - I would expect it to be loaded from the runtime folder as other dlls are (e.g. Microsoft.Dnx.Loader.dll)\n. Hmmm... I don't think this issue has anything to do with pdb. Are you able to run your application without IIS? What's the output? Did you install http platform handler? What's the error IISExpress is giving? Have you checked your event log to see if there are any interesting IISExpress related errors?\n. In RC2 tweaking the web.config is a separate post-publish action. While the tool would create a similar web.config file you can prevent it from running by removing it from the postpublish script section.\n. why not just argv[i][0] == L'-' ?\n. This is a public method on a public class - doesn't it need some argument Null checking?\n. AppendLine ?\n. same as above...\n. Doesn't the exception message have to be localizable?\n. nit: is it really supposed to be \"signle.cs\" ?\n. todo\n. Will remove. This is from a different change I stashed. \n. Why this can't just return std::string? It would save all the hassle with cleaning up etc. I have started working on cleaning LPCTSTR/LPTSTR/LPSTR mess by introducing cross platform types definitions (WIP: https://github.com/aspnet/dnx/commit/cfe5955281c87825877842f8bc21c068a2203671#diff-f83d3802c96eed0aa99ee2b81e85e9ffR9). Using stl would also make it much easier to do string operations. \n. why are we looking for the last slash from the first character and not from the last?\n. why calloc and not new?\n. see dnx.cpp ln 305\n. That's fine. I will look at it after I refactor invoking CallApplicationMain because I will have the types then,\n. cppreference is down - is cout::operator << const? I did not want to make it const because semantically this function is changing the environment. \n. (It is illegal to start writing to wcout and then write to cout)\n. Yes /MT, /MTd is static.\n. will fix (for now I just reused strings we already had)\n. most definitely. Will fix all the occurrences. \n. @davidfowl - hopefully it is not blocking? Eventually we are shipping release versions don't we?\n. I did think about moving this elsewhere but I am on the edge here because it is being used only in this one place and currently we don't have a header for constants. I decided to leave it as is for now.\n. Could not install my awesome trailing space flagger on emacs. Will fix.\n. Will fix.\n. To remove or add const you use const_cast and not reinterpret_cast (I did to have to look it up)\n. Will check - this is more or less what we had and I just moved the block.\n. Will fix.\n. hungarian?\n. What are the rules about deprecating APIs that have not officially shipped (i.e. why not just remove this property)?\n. Thanks. Jumped to the code without reading the description.\n. I remember fixing this - must have overwritten the file when moving changes between boxes. Should be std::string everywhere since this is a platform specific file and we know what types we should be using. \n. should be functionName instead of moduleName\n. (FnCallApplicationMain)GetProcAddress - should be reinterpret_cast\n. while it does not make much difference here \"the thinking goes that casting is inherently an ugly operation and it requires ugly syntax\" :smile: \n. nit: this is a path to a project.json file\n. Since the return dependencies are strings it would useful to document what these strings are (paths, assembly names etc. - I don't know what they are btw.)\n. Shouldn't be \"Gets a list..\" ?\n. \"... operating system name\"?\n. will we be doing ARM in the future?\n. \"a list\"?\n. nit: lines 150-160 should be a function - right now we basically copied the code from the above\n. I don't know what happens in the code after this function exits but since runtimeDirectory is passed by reference this line changes the runtimeDirectory that is used by upstream callers. Is it intentional?\n. (This is a general note - I wonder if we need a general try/catch(const &std:exception) at the entry point somewhere - these could potentially throw std::bad_alloc  which will lead to a crash if not handled somehow)\n. consider putting all but CallApplicationMain in the unnamed namespace to hide it from everyone else (won't be visible outside this translation unit) just for safety or maybe create a class and free things in the dtor? \n. shouldn't you unload pLibCoreClrPal here? \n. I don't know - but if writing the error to the console succeeded then it could be helpful.\n. :ok_hand: \n. Is it supposed to be a unit test (in which case I would say using the string is preferable) or a functional/end-2-end test (in which case I could see using Project)?\n. nit: var\n. nit: () not needed\n. Can't you just do Diagnostics = new List<Diagnostic>(diagnostics) in the object initializer?\n. same as above\n. StringComparison.OrdinalIgnoreCase - paths are case sensitive on non-windows\n. forgive my ignorance but how this is supposed to work when we have CoreClr running on non-windows OSes?\n. Designwise, I don't think we should cache _output and _error here. These are static field and the value depends on runtimeEnv. It will probably work fine now if runtimeEnv does not change but if for whatever reason GetOutput() was called multiple times with different runtimeEnv value the returned value for the second call would be wrong because it would use runtimeEnv from the first call. I think the GetOutput and GetError should just create and return the value and the code that invokes these methods should take care of caching the returned instance if it makes sense.\n. nit: move Quiet from the line below to the initializer and then you would be able to return reports directly (RVO :smile:)\n. It is empty by default. This allows you to override if you need for any reason (e.g. when hacking on it on your own box)\n. OrdinalIgnoreCase ?\n. (System32) :boom:\n-a---l        3/14/2015   1:54 AM           7168 KBDTAILE.DLL\n-a---l        3/14/2015   1:53 AM           6656 KBDTAJIK.DLL\n-a---l        3/14/2015   1:53 AM           7168 KBDTAT.DLL\n-a---l        3/14/2015   1:53 AM           7168 KBDTH0.DLL\n-a---l        3/14/2015   1:53 AM           7168 KBDTH1.DLL\n-a---l        3/14/2015   1:54 AM           7168 KBDTH2.DLL\n-a---l        3/14/2015   1:54 AM           7168 KBDTH3.DLL\n-a---l        3/14/2015   1:53 AM           7168 KBDTIFI.DLL\n. Wait a few minutes... need to create one ;) - \nit's just a nit - I don't really care too much (for the same reason you just said).\n. out var ?\n. Thanks! Did not know about that. \n. nit: remove whitespaces\n. any specific reason why this call needs to be async?\n. I believe this should be XNamespace (and not string)\n. should be doc.Root.Name.Namespace. Currently I believe it would return abc for the following xml  even though element is in the xyz namespace.\n. Also if _defaultNamespace is defined as XNamespace you should be just able to the Equals operator on the XNamespace rather than using string comparison.\n. Shouldn't this just be InvalidOperationException? \n. I think you can just do new ZipArchive(File.OpenRad(path), ZipArchive..., leaveOpen:false). Because you are using leaveOpen: false the file stream you are passing should be closed for you. \n. nit: use string interpolation\n. I only see that we are writing the cache file and deleting the cache file but we never read it. This tells me that there is a copy of this logic somewhere where we read the cached file. If this is the case the we should just one function that calculate this path.\n. I would go with returning Task.FromResult(0) - it does not schedule your task and will not use a separate thread. A bit expensive to get rid of a warning you can fix at compile time. \n. This is semantically not correct and can return false for a valid NuGet xml file since it relies on Xml being serialized the way you expect and when using namespaces there are at least, In most cases when an element is in a namespace it actually does not have the the default namespace since the namespace the element belongs to is either inherited from it's parent or the namespace-uri is bound to a namespace prefix. Therefore you need to get the namespace from the element name and not the default namespace that is declared along with attributes and other (non-default) namespaces.\n. As per MSDN \"The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.\" The format here is Xml and because the file could be loaded into XDocument the it is a valid Xml document so the format is correct. If we had an XSD (hopefully we don't) for this Xml file we would have thrown an XmlValidationException because the document is not valid according to the schema but this is not format exception. \nInvalidOperationException is probably general enough that you can throw it almost everywhere where you can't find a better exception and you don't want to create a specialized exception. \n. All good. I did not open the collapsed parts of the file and missed it.\n. formatting\n. nit: since the string properties are private they could be just const\n. I am wondering why we just can't overwrite the package always? For instance we always write the hash file and not only when we saved the package...\n. You may want to also verify that the SHA was updated.\n. Actually thought about ...already exists, is identical and won't be overwritten \n. :+1: \n...already exists and won't be overwritten because it is identical and we don't overwrite identical files except for the SHA files :smiley: \n. Sounds good. Thanks for the explanation.\n. :+1: \n(also use var?)\n. So now anyone can set it from outside? \n. The original code had a method that created the instance each time it was called. It was changed to a public static field. It should be a public static property with just a getter that creates a new console each time or, if we care, create private static readonly (or lazily initialized) fields that would be returned from static properties. \n. Oh, I only compared against the latest version. Please change the code so that we don't allow setting the static fields - we don't need it and it is ugly...\n. nit: use var (same below)\n. in file?\nuse string interpolation\nconsider putting the file name/path in single quotes.\n. string interpolation. Consider wrapping the literal name in single quotes.\n. Yes. Will fix.\n. Yes. They are not supported in the libs we have to link against.\n. Not sure. It is for folder name and that's why I did not want to use it. The assumption that the project name and the folder name are the same does not have to be correct.\n. Don't throw Exception. This should be either ArgumentException or InvalidOperationException\n. consider passing the name of the parameter as the second parameter to the ArgumentException ctor. (Note, I am not feeling strongly about this - this is command line so probably parameter names don't matter)\n. If we are going to localize this I believe this will have to be changed to 2 full strings anyways so not sure if using ternary just for a substring makes sense/difference...\n. I am sure @Eilon will help you word this message a bit better...\n. I just checked and it does work but I would like to understand how... You assign a WhereIterator to a reference that is a source for this same iterator. Probably Where captures the original reference somewhere but it is not obvious.\n. This is comment does not add any value in its current form. It's quite obvious from the line below that you are not adding NuGetDependencyProvider but the answer to the \"why\" is missing. Same above.\n. If you want to avoid copying this several times move it to a separate function. This way you will avoid this kind of weird pattern where you override the source for iterator with a computation. \n. I think tabs are good. This is a nested #if. VS will automatically move precompiler directives to the left and adding nesting to the actual content signals it is a nested if.\n. nit: Consider using regular cast instead of as casting. as serves a different purpose.\n. nit: var (or even do it inline?)\n. Does it matter that we now use lowercase 'dnx' for folder and environment variable names while the actual names are uppercase? Are we going to support bredcrumbs on other platforms (where it does)?\n. :+1:\n. @davidfowl I infer that in this case we also want to have dnx.onecore.dll and dnx.win32.dll instead of dnx_onecore.dll and dnx_win32.dll (the other PR)\n. are we sure packageId is not null?\n. I don't think there is a difference between string.Format and string interpolation here. string.Format would be as much localization unfriendly in this case as string interpolation. The point is that localization is broken if the parameters are localizable.\n. :clap:\n. Nit: this is still dnx_NO_BREACRUMBS and not DNX_NO_BREADCRUMBS. Consider Constants.RuntimeShortName.ToUpper() + \"_NO_BREADCRUMBS\". May require using static readonly instead of const\n. Is it possible to add a test that verifies that runtime breadcrumb is being written?\n. @victorhurdugaci - @glennc mentioned it may change.\n. :clap: - just add a comment why we are doing this - similarly to what we have before (\"We don't add NuGetDependencyProvider to DependencyWalker\n// It will leave all NuGet packages unresolved and give error message asking users to run \"dnu restore\")\n. nit: consider ternary\n. Agreed.\n. Fixed\n. Leaving as is.\n. Fixing.\n. Will this just result in showing the general help?\n. There is no exception here - CallApplicationProcessMain does not throw but it catches any exception and turns it to 1 as the exitCode.\n. Hard to tell. I am a big fan of snake_case in C/C++ but these files are using hungarian + camelCasing + Windows. I don't think spending time on just changing casing is really worth it, so I wanted to make it kind of similar to what we have. Note that this is the only class in these files so far so as far as class names go it can't be inconsistent.\n. nit: \u00e2\u20ac\u2122 - is it just how github shows this?\n. note - this flag is not supported on ARM CoreCLR\n. (the exception message is being written to the console in the exception handler in the CallApplicationProcessMain)\n. Use this: https://visualstudiogallery.msdn.microsoft.com/bcb3ef8e-a3a4-401e-9e63-fdf00b45268f\n. looks like a great place to use a regex..\n. nit: I don't know if it makes a lot of difference but why this check is inside the try/catch block?\n. I told you: https://visualstudiogallery.msdn.microsoft.com/bcb3ef8e-a3a4-401e-9e63-fdf00b45268f and you will never miss a trailing whitespace...\n. :blush: Crap. You are right. I will fix and will check if we have any tests testing async main method. This should have failed some tests. \n. OK. I was not sure whether we keep xproj in sync with project.json.\n. This does not show up since in Helios we apparently use a handshake mechanism based on a TCS. Since the application started successfully the result of the tcs was set and when the InvalidCastException was thrown afterwards trying to set the exception was a no op since the result of the tcs was already set.\n. @troydai OK. Then do this in VS Code (if you have not done this already): \n1) Ctrl + P type Settings\n2) Select - \"Preferences: Open User Settings\"\n3) Paste this:\n// Place your settings in this file to overwrite the default settings\n{\n    \"editor.renderWhitespace\": true,\n    \"editor.insertSpaces\": \"auto\"\n}\nThe result: You will see white spaces (tabs vs. spaces) as in VS. If you do tab it will insert spaces if the file uses spaces (hence auto).\n. Not sure if I get the purpose - wouldn't it be just like testing the JSON parser (which I assume is already tested)? We only allow true/false bool values in the project.json and I assume rawOptions.ValueAsNullableBoolean(\"delaySign\") will break/use default value on everything else. I left 1/true for environment variables to not break anyone who is already using it (e.g. NuGet). \n. No worries :)\n. Will do\n. do you mean we should not throw the error if delay sign is true and the file key is not provided and just skip the code? Why would it be useful?\n. Fake signing will be separate.\n. nit: the first is check seems to be not needed.\n. Why can't this loop just be foreach(var element in xElement.Elements()) ? Or can it?\n. Ln. 38 should just be:\n`manifestMetadata.MinClientVersionString = (string)xElement.Attribute(\"minClientVersion\");\nThe GetOptionalAttributeValue does not add any value - attributes don't inherit namespaces and the (string) explicit conversion operator already handle the case if the attribute is not there (i.e. returns null). \nI suggest that the GetOptionalAttributeValue() method should be removed.\n. So why are we using ElementsNoNamespace almost everywhere? It's semantically incorrect because it strips the namespace and it may capture elements that should not be captured (they were put to different namespace to not be captured). It also does not save you any typing because if you don't expect your elements to belong to a namespace referenceElement.Element(\"reference\") is shorter than referenceElement.ElementsNoNamespace(\"reference\") (if you do referenceElement.Element(ns + \"reference\") is still shorter). On top of that if you use just the Element() method you can use explicit conversion operators.\n. It does not seem that the targetFramework attribute is a coma separated list - at least it was not before. Also if you look at Microsoft.Net.Http.Server.nuspec the frameworkAssembly are repeated for different targetFrameworks.\n. This is never null so ? is not needed.\n. nit:\nlet assemblyNameAttribute = element.Attribute(\"assemblyName\")\nwhere assemblyNameAttribute != null && !string.IsNullOrEmpty(assemblyNameAttribute.Value)\ncould be just:\nlet assemblyName = (string)element.Attribute(\"assemblyName\")\nwhere !string.IsNullOrEmpty(assemblyName)\n. nit: spaces\n. Does not seem Files can be null.\n. Consider being more fluent - you should be able to create an Xml document in one go preserving visually the document structure. Something like this:\n```\nvar metadataElement = Metadata.ToXElement(schemaNamespace);\nif (metadataElement == null)\n{\n    throw new InvalidOperationException(\"Failed to serialize manifest metadata to xml.\");\n}\nnew XDocument(\n    new XElement(\n        schemaNamespace + \"package\", \n            metadataElement,\n            new XElement(\n                schemaNamespace + files, \n                    Files.Select(f => f.ToXElement)))).Save(stream);\n```\n(Yeah, not wanting empty \"files\" element breaks the pattern a little bit - note you can pass null so it still can be inline)\n. Not sure why _authors cannot be null... Anyways - use the ternary operator.\n. ternary\n. same as above\n. if (!string.IsNullOrEmpty(metadata.Version?.SpecialVersion)) ?\n. Call the other ctor. \npublic PackageDependencySet(string targetFramework, IEnumerable<PackageDependency> dependencies)\n   this(targetFramework != null ? VersionUtility.ParseFrameworkName(targetFramework) : null, dependencies) \n{}\n. Call the other ctor:\npublic PackageDependencySet(IEnumerable<PackageDependency> dependencies)\n : this(null, dependencies) \n{}\n(You may need to cast null to select the right overload)\n. Call the other ctor.\n. Should be ArgumentException because string.Empty is not null\n. Should be ArgumentException because string.Empty is not null\n. Should be ArgumentException because string.Empty is not null (everywhere)\n. nit: lowercase string in string.IsNullOrEmpty()\n. nit: casing (String)\n. Are you sure the attributes should be in the namespace?  You realize that if the namespace is not empty the attribute will have to be prefixed. If the namespace is not bound to a prefix the prefix will be auto generated and you will get this: \n<file p1:src=\"file\" xmlns:p1=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\" xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\" />\nI think you actually don't want attributes belong to any namespace here - it is quite uncommon in XML to put attributes to a namespace. Typically you would do this only if you want to extend an element that belongs to a non empty namespace and the schema does not allow putting attributes in the empty namespace on this element.\n. Consider (given that I think the attributes should be in the empty namespace):\nreturn `new XElement(ns + \"file\", new XAttribute(\"src\", manifestFile.Source), new XAttribute(\"target\", manifestFile.Target), new XAttribute(\"exclude\", manifestFile.Exclude\");\n. Does not .Owners already return Authors if there are no Owners?\n. again - I don't think you want the attribute in the namespace (review everywhere). You could also move attribute creation to the ctor of the owning element (as well as children element).\n. it's not root. It's parent.\n. This is not used.\n. collapse to single line.\n. return new XElement(ns + \"dependency\", new XAttribute(\"id\", dpendency.id), dependency.VersionSpec != null ? new XAttribute(\"version\", dependency.VersionSpec.ToString()) : null);\n. You should not need .ToArray() here.\n. you can collapse attribute creation\n. Add an assert (and remove the check).\n. I think it is a bigger discussion. We just talked with @muratg about this and it should be possible and would likely unblock some EF7 scenarios. On the other hand - shouldn't we then allow people to set their own public key? If we don't we would force people to use snk (real strong naming) if they want a different key/public key token. \nWe could also fake strong name by default and allow providing own public key. \n. Yes. Will fix.\n. \"Globals\" is just a label - it does not really matter. I will add them just for completeness.\n. wzVersion[0] = L\"v\";\nwzVersion[1] = L\"4\";\nwzVersion[2] = L\".\";\nwzVersion[3] = L\"0\";\nwzVersion[4] = L\".\";\n...\nBefore it was just wzVersion[0] = 0; indicating the empty string since the version was passed in the config file. \n. does this work on linux/mac?\n. AppDomainManagerTypeName :arrow_right: AppDomainManagerAssemblyName\n. Does it make any difference (apart from copying the string twice)?\n. I think when I talked to @glennc he said there would be only one entry for each source runtime. However if we're planning only on appending entries what you are saying makes sense. \n. Are you suggesting I should copy the code twice? (If so the answer is yes, I need a loop).\n. Must have missed (or forgotten) when reading the spec. Will fix. \n. In a few places but most notably in the app domain manager(s). It's originally set here and updated for servicing to force loading managed assemblies from the redirected runtime.\n. OK. I will confirm with @glennc and fix to take the last occurence.\n. On 32-bit windows ProgramFiles(x86) does not exist.\n. We are now always checking %ProgramFiles(x86)% and only if it does not exist we will add  %ProgramFiles% to the list\n. As per our conversation - there can be multiple entries for the same runtime. We will now take the last entry from the index.txt. \n. Added support for DNX_SERVICING. If the file does not exists or no entries are found in this file we will fall back and check the index.txt in the %ProgramFiles% if one exists.\n. Will think about that. It would have to be separate though since we are building a string literal here.\n. I did not do it since it is a bit pain for native code. They shouldn't be #defines but consts once you make them consts they should not be in .h (one definition rule) so you have to create a *.cpp file and then use extern forward declaration to be able to use it. Because we are using these names only in one place and all but one is used just once I did not bother to do that. If you feel strongly about that I can for now define the consts in this file and when it turns out we need to use them elsewhere the can be moved to a separate file.\n. Talked to Murat - we are not adding the assert. Doesn't seem like we are going to add a new runtime or platform anytime soon and even if we did it is not guaranteed that the variables won't be defined so you won't get the assert anyways and still the moniker will be incorrect.\n. Since TPA names are string literals this could just be std::vector<const dnx::xchar_t*> \n. true is successful otherwise false (0 means success)\n. Yeah. Probably BOM or something. Can revert this...\n. Hard to tell - you need to know that it only works because string literals are stored differently. Mostly it will save unneeded potential allocations std::string would do for names that not fall into the \"short name optimization\" bucket. \n. Yes. It must have been missed when we updated headers since tpa.cpp files are auto generated.\n. yes. \n. foreach ;)\n. Changed to use const dnx::char_t *\n. reverted.\n. fixed.\n. double cast - the recommended pattern is\nvar settings = Settings as Settings;\nif(settings != null)\n{\n   configFiles = settings.GetConfigFiles();\n...\n. can't - it looks for both forward and backward slashes\n. Looks like some files were not updated - will fix and review other files. \n. I was looking for this line at the very moment to add a note. Originally we allocated 64KB but I found that typically all the paths are ~8K so I removed -#define TRUSTED_PLATFORM_ASSEMBLIES_STRING_BUFFER_SIZE_CCH (63 * 1024) //32K WCHARs but realized that I did not remember setting the size here. Certainly I will fix that.\n. This is broken...\n. I used to have a return from inside the if block but I decided to treat pining as part of loading and did not change the code correctly\n. Hard to tell if the default should be true or false. The idea is that errors are always written but debugging messages are verbose\n. Maybe I should change it to write_error, write_message?\n. Should be:\nreturn GetEnvironmentVariable(L\"DNX_TRACE\", buff, 2) == 1 && buff[0] == L'1';\n. Should be:\nreturn GetEnvironmentVariable(L\"DNX_TRACE\", buff, 2) == 1 && buff[0] == L'1';\n. It does not really matter here. But since we already have two checks like this I just created the ends_with_slash function where I use a variable. One issue I have not noticed before was that calling .back() on an empty string causes UB. In the function I created I check that the string is not empty before calling .back()\n. I don't want to admit it but it is and the replacement I came up with is not even close. I will change it back to pfn...\n. I can do that but it does not really matter - it won't make some of the flags less cryptic (besides, this way it almost looks like using BindingFlags :smiley:)\n. :rant: I only wish we did not use the CommonPrefix + pattern. It is impossible to find all occurrences of an environment variable across all the projects (managed and native) in the dnx if you are not aware of this class. I have been on my quest to understanding what is the benefit of the CommonPrefix + pattern for some time now...\n. I would think 3 renames are not hard you just replace all the \"DNX_ occurrences in the EnvironmentNames.cs file with Ctrl+Shift+H. The first time I almost missed that we use DNX_DEFAULTLIB in the managed code at all because I could not find a single occurrence of this string... \n. Even better - you can just use + instead of XName.Get().\n. create:\nXNamespace astoriaNs = \"http://schemas.microsoft.com/ado/2007/08/dataservices\");\nuse inline:\n... astoriaNs + \"Published\" ...\n. nit: you don't need XNamespace.Get - just \nprivate static readonly XNamespace _odataMetadataNamespace = \"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\";\nit will know to convert the string to XNamespace \n. Will look into it.\n. Added a check:\nif (servicingRoot != null && servicingRoot.IndexOfAny(Path.GetInvalidPathChars()) == -1)\n. Done. System.Diagnostics was not actually needed anymore.\n. Yes, there is one more place where we do it. I can refactor the code to have just one call and pass the parameter around if this is a (performance/startup time?) concern. \n. Need to verify this manually.\n. Can be auto indeed because it has the static_cast<int>\n. Couldn't come up with a better name but if you have a proposal let me know... I am also still considering changing it to return two std::strings - directory and filename - these buffer operations are so fragile.\n. below \"nuget\" is all lower case - does it matter that it is not here?\n. LOL - will fix.\n. Bootstrapper.Execute takes parameters as an array of strings so we have to allocate it somewhere...\n. yes - fixed.\n. What is 128? And why we can't just use the PlatformId enum?\n. Fix formatting. (Same below)\n. Yeah - I still don't know why we could not use something that is readable... \n. I found: It means Unix under the 1.x .NET profile; - so we don't have to check against 128\n. It is related to aspnet/dnx#2235 and https://github.com/aspnet/Helios/issues/180\n. It will now work because /path/App.dll is a \"NonHostOption\" and therefore we will create appbase from this argument (you will get --appbase /path/ /path/App.dll --appbase something)\n. Yeah. I will fix this.\n. No. When BootstrapperOptionValueNum reaches the .dll argument it will return -1 and then we will break the loop in FindAppBaseOrNonoHostOption and return index to this argument. This scenario is also covered by tests - ExpandCommandLineArguments_should_ignore_appbase_after_bootstrapper_commands (except for we break the loop on . instead of the dll but it does not matter from the perspective of the BootstrapperOptionValueNum function since it breaks on anything it can't understand so . and path falls into the same category).\n. I am keeping the behavior we had before: https://github.com/aspnet/dnx/pull/2269/files#diff-71b95628dab21cdd062a2d2518c8ac05L81\n@davidfowl should the option names be case sensitive? (dnx.exe does the same case insensitive check)\n. We have these cases:\ndnx run - ln. 148\ndnx --appbase - ln. 128\ndnx . run - https://github.com/aspnet/dnx/blob/dev/test/Bootstrapper.FunctionalTests/BootstrapperTests.cs#L264\nLet me repeat after @anurse - 'What is --project?\" (and how my change is affecting it - btw. all the tests passed so I assume I did not break it)\n. nit: remove '$' \n. nit: is target needed at all?\n. formatting seems to be off\n. I think it shold be \".. to contain (a wildcard|wildcard characters).\"\n. nit: try just: new[] { valueInString }\n. the default value is a bit gross here... how many places does it affect?\n. I merely wanted this option to be displayed in help. This is because -p should not get out of dnx  since it is converted to --appbase. However there are degenerate cases where --appbase and -p is provided or -p is provided twice where -p can actually get here. I will look a bit more into this code because NoValue feels wrong indeed. Thanks for pointing this out.\n. No, this should be aligned with what we already have. I will fix this to be case insensitive.\n. Remove this comment.\n. I am thinking about a better message. This \"Failed to identify the context\" is quite cryptic.\n. @Eilon - I am wondering if it is worth specifying that the case with multiple global.json files is when the user is using source references. If this is not worth mentioning then :ship::it:\n. The problem happens if you have multiple global.json (which I understand can only happen if you are using source references) and the sdk versions in these are different. In this case VS will start multiple dnx.exe processes (one for each sdk version). When building the project VS will use the dnx.exe corresponding to the sdk version but since it is a single project building will fail because the part of the project built in one of the dnx.exe will not be able to find references to part of the project built in other dnx.exe\n. LOL given the comment just above... Should be strings_equal_ignore_case and not ends with.  Also need to add a test for this.\n. project_path + (split_idx < 0 ? 0 : split_idx + 1) could be just project_path + split_idx + 1 but requires a comment\n. nit: I changed the version to 0.0.0.0 in the windows bootstrapper. The version seems to be required even though it appears it is not being used.\n. Nit: are these usings needed? I don't see any new code that would require them...\n. It should also not be displayed on Mono. \n. Good catch! Will fix this. \n. Will do.\n. Looks like VS started using the name of vcxproj instead of $(ProjectName)... I think this is actually a good changed (if it is not breaking) since both dnx.vcxproj and dnx.coreclr.vcxproj can create win32 and onecore binary. \n. Why do we need it here? Does it work at all? Microsoft.Dnx.Host.Clr has a real strong name and cannot depend on non-signed assemblies (it may fail in the second build). This is the reason why it does not have any dependencies.\n. I know why we need it - recent changes to set .NET Framework version. I wonder if you can fake strong name Microsoft.Dnx.Runtime.Json.Sources to make it work. I believe the plan is to fake strong name all assemblies anyways.\n. Then it should work, indeed.\n. It was added to address this comment: https://github.com/aspnet/dnx/pull/2183#discussion_r33820594. However with the current changes it may no longer be necessary since dnx will fail if it can't read the index.txt file and will never actually get here. \n. Will fix\n. @blowdart - is it OK to return the path to the servicing index in the exception? (Note that I am doing a similar change in Helios and there it could potentially show on the error page)\n. The previous error is about the default servicing root which is a well known location. Here we would potentially write the contents of the %DNX_SERVICING%. I will change the code to omit this information.\n. Shouldn't it actually be app.config (lower case?)\n. :clap:\n. nit use 'auto'\n. please move lines 73-82 to a separate function that returns bool (or throws). \n. consider nesting these two conditions under single if (!servicig_root_exists) instead of comparing it twice. \n. No - I hate this thing... (and parameters are different)\n. Because it is in the exception you never know where it will be displayed. We discussed the same thing with @blowdart a few days ago and ended up removing the path. That's why I did this here too.\n. will update\n. does this function work if one of the paths (or both) is string.Empty?\n. nit: put { on the next line \n. also all the tests are using absolute paths - what if a relative path is passed? \n. This was my point. You should throw in either case. \n. The string you passed is the error message.... The second parameter is the argument name.\n. nit: do you need fully qualified type names?\n. [fxCop] Shouldn't this class implement IDisposable?\n. Got it.\n. nit: remove empty line (same below)\n. Is the comment above still applicable?\n. I think it should be moved to line 68\n. Mono?\n. shouldn't this go just to bin? (and not bin/lib/Microsoft.Dnx.Project)?\n. Same as above - shouldn't the target folder be just bin?\n. Sounds good. Didn't know about that. \n. I think it might break in case of absolute, incorrect paths - two cases that comes to my mind are:\n/Windows/ -->You will probably end up witch \\Windows\\file.txt path\n// --> you will end up with \\\n. add spaces after if and foreach instructions before you get too many comments on that (you have quite a few occurrences) also use var \n. needed?\n. remove\n. side note - this function has almost 300 lines. I saw more functions that are as big. We need to start thinking about breaking this huge functions up.\n. I think file.Stem is always relative so you are right - we should be always relative to the ZIP file and then it is on the user to make sure that targets are correct. \n. Ctrl + K, D\n. @anurse - why was this needed?\n. Would we need the manifest if we used IsWindowsXOrGreater API family?\n. At the moment we don't distinguish between arm and arm64 - I am not sure if we will in the future...\n. These usings are not needed. \nAlso, waiting for @troydai to point out that there is no license header.\n. These vcxproj files are \"carefully handcrafted artifacts\" in order to keep the same settings for all native projects (and to remove duplication included by VS) - so you typically want to fix what VS adds.\n. I actually thought would come from native code where I would use IsVersionXOrHiger API to get the version instead of passing what GetVersionEx returns...\n. What are you thoughts about other OSes not on this list. I actually thought of using uname on non-windows and pass it here otherwise we will get Linux for FreeBSD...\n. arm :)\n. - arm\n. I am planning to start working on #1970 this week. \n. Adding the manifest will change how we treat dnx on windows 10 - before it was a win32 app and now it is onecore because of this check. I think it should be fine. One caveat - people who don't have Windows10 SDK installed won't be able to run dnx they built on their boxes if they are on Windows 10 since they wont have dnx.onecore.dll.\n. Fair enough...\n. spiteful...\n. Looks like the manifest will always be needed.\n. Linux and Darwin are only x64 now. If/when we have Core CLR for Linux on arm we can support it too (I was able to compile our bootstrapper on the original Raspberry Pi but did not have a CoreClr I could use). \n. This was the simplest way I found back then and I don't know if there is a different way. On the other hand Windows 10 is onecore too. The code between onecore and win32 is the same. The only difference is what we link against. \n. Why not just blindly copy the files from httpNativeAssemblies instead of checking if the names match for each so/dylib?\n. @BrennanConroy - did you want to use sourceFile in the File.Move? - from what I can see the first arg has the same value...\n. One more (after)thought - shouldn't we fail (or at least warn) if the expected *Native.{so|dylib} - does not exist? If it does not exist it means that either CoreClr will be busted or it is no longer needed and the script should be updated accordingly.\n. any tests for reading the lock file?\n. formatting\n. nit: .ToLoweIveriant()\n. just call GetRuntimeIdentifier?\n. can this ever be null here?\n. Nam and SemanticVersion already have setters.. This ctor is weird - it is public API and gives an impression that these two properties are somehow special. I have a feeling that we are polluting public API without a good reason - without the ctor the class is as testable as it was before.\n. same as above..\n. what is 'aot'?\n. super troll - you don't need () when using initializers.\n. Should we restore for win even though target runtimes were specified in dnu restore explicitly? \n. Yeah, I saw that. The thing I was not sure about was that we are doing something else than we were asked to do (i.e. we wanted to restore for linux and darwin but got windows as well (even though we did not ask for it) just because it was in project json). but as per our conversation it should be fine. \n. nit: whitespace\n. This will throw for duplicate keys - is this the intended behavior (as oppose to ignore duplicates)?\n. remove\n. We do this for all frameworks selected but we did not do this when the active runtime is being used (in the branch above) - why?\n. = don't trust \"Extract Method\" by VS. Will do.\n. Do you still need FrameworkSkipCondition?\n. For that very reason I would say remove it - so that you are aware when suddenly for some reason tests get run on Mono on Windows...\n. (but I don't feel very strong about this...)\n. @anurse: I am thinking about passing TargetFramework in this struct instead of as a separate parameter - sounds good?\n. @davidfowl: Do we need this flag anymore - I think it was mostly for Helios?\n. This just makes Mono build.\n. OK.\n. @DamianEdwards asked for that - they wanted to use this in the perf tests I believe.\n. OK. But it will be separate - it would pollute things too much at this stage.\n. Not yet but I will need to populate the instance and I only can use reflection so dynamic will make it easier and nicer.\n. This is actually the number of cores :) I can rename it to PhysicalProcessorCount\n. won't fix :) - this is in the .h so that it can be used across the entire C++ codebase. We already have something similar in Helios etc. If both definitions are not in sync you will learn it quick (and hard). I will add a comment.\n. No. This is up to the managed code to decide what to do with this. Native code is supposed to bootstrap the runtime and give all the required data to the managed code without processing it. In other words it should not know concepts (like Runtime ID which are managed stack concepts)\n. I am all for it. This would be inline with my other comment that in native code we don't want to the logic that belongs to managed code. \nIs 8 just 8 or 8.0? \n. Possibly. My understanding this can only happen if someone runs pre-win7. My understanding is that post win10 will return win10 (or win8?) until we update the manifest.\n. OK. I will use reflection to set the properties (for Desktop CLR we will flow the by extending ApplicationMainInfo struct https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Host.Clr/DomainManager.cs#L167\n. Yes. Will fix.\n. No. At the moment I am working just on passing the struct and not on using what is passed so null is fine here.\n. Let's sync up with @DamianEdwards \n. :dragon: on linux/mac ATM:\nUnhandled Exception: System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\n   at System.String.wcslen(Char* ptr)\n   at System.String.CtorCharPtr(Char* ptr)\n   at DomainManager.Execute(Int32 argc, Char** argv, NativeBootstrapperContext context)\n. This returns \"Ubuntu 15.04\". I am not convinced that returning anything more than distro is needed or useful. Someone (@anurse) let me know.\n. This is superhelpful to see what actually was passed from native parts without attaching the debugger (and on Mac/Linux you cannnot debug managed (CoreClr)). At the moment this information does not reach the host and when it does it will be broken down to environment and appenvironment etc. I want to leave it here at least for now. \n. Because  the change is just about passing data from native to managed and not about actually using this data (this is why I could pass null in Mono). We are still using the environment variables across the stack since not all bootstrappers pass the data yet (Clr work is in progress and Mono is left). When all bootstrappers pass the struct I will set environment appenvironment properties accordingly and remove all env variables.\n. Yes. will do. I took it from here: http://stackoverflow.com/questions/11072804/how-do-i-determine-the-os-version-at-runtime-in-os-x-or-ios-without-using-gesta. This table is especially useful:\n15.x.x  OS X 10.11.x El Capitan\n14.x.x  OS X 10.10.x Yosemite\n13.x.x  OS X 10.9.x Mavericks\n12.x.x  OS X 10.8.x Mountain Lion\n11.x.x  OS X 10.7.x Lion\n10.x.x  OS X 10.6.x Snow Leopard\n 9.x.x  OS X 10.5.x Leopard\n 8.x.x  OS X 10.4.x Tiger\n 7.x.x  OS X 10.3.x Panther\n 6.x.x  OS X 10.2.x Jaguar\n 5.x    OS X 10.1.x Puma\n. Mono and CoreClr are in the works. \n. remove\n. What do you mean by \"OS Name and Version\"? OS Name has a separate property but the value returned by this function goes to OsVersion. So in this case you will get:\nInformation: Operating System: Linux\nInformation: Operating System Version: Ubuntu 15.04\n. This is how the output currently looks like: \nPS C:\\Temp\\TestProject> dnx run\nThe default servicing root does not exist.\nLoaded module: dnx.onecore.coreclr.dll\nFound export: CallApplicationMain\nInformation: [DomainManager] Using CoreCLR\nInformation: Operating System: Windows\nInformation: Operating System Version: 10.0\nInformation: Architecture: x64\nInformation: Runtime Directory: C:\\Users\\pawelka\\.dnx\\runtimes\\dnx-coreclr-win-x64.1.0.0-dev\\bin\\\nInformation: Application Base: C:\\Temp\\TestProject\nInformation: Target Framework: DNXCore,Version=v5.0\nInformation: Handle Exceptions: True\nInformation: [LoaderContainer]: Load name=Microsoft.Dnx.ApplicationHost, Culture=neutral, PublicKeyToken=null\nInformation: [PathBasedAssemblyLoader]: Loaded name=Microsoft.Dnx.ApplicationHost, Culture=neutral, PublicKeyToken=null in 29ms\nInformation: [Bootstrapper] Runtime Framework: DNXCore,Version=v5.0\nInformation: [LoaderContainer]: Load name=Microsoft.Dnx.Compilation.Abstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\n...\n. I wanted to earn the self-critic badge...\n. do we really want to/need to distinguish among versions within a linux distribution? (and we are going to have a runtime for each?\n. are we going to support non x64 versions?\n. does this mean !windows && !darwin?\n. I was asking how we (wouldl) calculate if something is \"unix\"\n. it does not matter too much - I am probably the only one who would use it... \n. as per the comment in this file: \" // Based on values from the real Microsoft.NETCore.Platforms, but without 'aot' since DNX doesn't support .NET Native\" - I was just wondering how we are going to handle this and - as you pointed out - how to keep this file in-synch \n. why don't we need these anymore?\n. This is scary... I am running Ubuntu 15.04....\n. Yes.\n. Yes. Just noticed that. (Too hasty)\n. OK.\n. Will change to (?<version>\\d+\\.\\d+)\\..+$\")\n. See the next line. Running on \"I don't know what OS is this\"\n. Nothing - on Redhat based Linux distros there might not be lsb_release so we ignore the error and try /etc/redhat-release\n. Then it was always broken - because we already use this: https://github.com/aspnet/dnx/pull/2769/files#diff-f79c267a7f222c20dba5339e1498a6d3R59. Where can we get the information from in the case you describe?\n. Should actually use just catch\n. Should actually use just catch\n. Changes in this file are workaround for #2773\n. This cannot be removed because dnu publish sets this environment variable in the scripts it generates. Anyone know why we are doing this and if it should be removed?\n. Why? I don't see any code that reads this variable... (besides the one I removed because we pass the appBase in the bootstrapper context) Also, don't we always pass the --appbase parameter from the script?\n. This is separate (I called it out in the description) - we don't even pass it around too much - it didn't have to be env var at all.\n. Need to find what it is and how this is used. It was not used/set in the native layer.\n. Yes, forgot to call it out. It will be a separate commit since it entails removing the logic that copies the loader. \n. Then I will remove it completely (including the scripts)\n. Sounds good.\n. https://github.com/aspnet/dnx/blob/ba748dbe1abbcd243b775a27eb97e085aeb58b77/src/Microsoft.Dnx.Tooling/Publish/PublishRoot.cs#L174\nThis is to pass to the script template to fill {0} here:\nexport SET {0}=\"\"$DIR/{1}\"\"\nexec \"\"{2}{3}\"\" --appbase \"\"${0}\"\" Microsoft.Dnx.ApplicationHost --configuration {4} {5} \"\"$@\"\"\";\n. Where do we get this list from?\n. Can context.RuntimeDependencies be ever null? Looks like it is always assigned and can at most be an empty dictionary.\n. #2707 \n. Talk to @BrennanConroy \n. Sounds good.\n. @anurse - \"never\" should not be the case. This could start happening after my recent changes to dnx. I wanted to file a bug on this on the tooling repo but I could not repro this. This never worked on CoreClr since CoreClr AVs if exception is not handled.\n. Yes #2707\n. Why not check the InnerException of any exception?\n. nit: this else is technically not needed...\n. Before we threw with ThrowEntryPointNotfoundException only if ex.FileName == applicationName now we will throw for any FileLoadException or FileNotFoundException - is it intentional?\n. We only return exitcode if hr is S_OK (https://github.com/aspnet/dnx/blob/dev/src/dnx/pal.win32.cpp#L146) so it is not needed here because hr is not S_OK. \n. Fixed.\n. I merged #2707 - can you try checking the actual exit code. (I think in this case you should expect 2)\n. (or maybe it will get fixed automatically when you rebase on the latest dev)\n. do we also want to add ubuntu 15.04? \n. will it be linuxmint.17.2-x64 or just mint.17.2-x64?\n. Leave it for now...\n. I saw the lsb-release output from Mint and it will be linuxmint.17.2-x64\n. Then, I think there should be a disposable test scope which would do the cleanup. The tests would use the using statement to define the scope. Otherwise you may leave leftovers behind. It is also quite easy to miss adding TestUtils.CleanUpTestDir<DnuPackTests>(sdk); or even hard to know when it is needed... (i.e. will this be cleaned up in some other (class/fixture) dispose method)\n. wouldn't the path delimiter be : on non-windows (and not ;)? \nAlso why you need the cast?\n. Can't this go into the target? If it can't, shouldn't it be with other global vars at the top of the file?\n. Does this work on non-windows? Should it?\n. this\n. PS C:\\Source\\Universe> dnx --version\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\n123\nMicrosoft .NET Execution environment\n Version:      1.0.0-t151007060838\n Type:         Clr\n Architecture: x86\n OS Name:      Windows\n OS Version:   10.0\n Runtime Id:   win10-x86\n. typo - should be qualifiers\n. nit - remove trailing space\n. nit - do you need ()?\n. I think the loop could be just: \nreturn _windowsVersionMapping.Where(p => p.Key <= parsedVersion).Select(p => $\"win{ToShortVersion(version)}-{arch}\");\nHowever AFAIR there was a concern of using LINQ in the lower layers of the host due to performance hit.. - @anurse  ?\n. make it std::wstring - the convention I followed was to use native types in code that is platform specific and x-types in code that is platform agnostic.\n. same as below (i.e. std::wstring)\n. auto (or even don't assign to a variable?)\n. nit: formatting around ?\n. nit: formatting around ?\n. use {, } even if this is just one line\n. Yes.\n. CentOs is based on Redhat - this is why we checked redhat-release before. It seems that os-release is both on CentOs and debian so we can just use os-release and do not have to special case.\n. probably as per @victorhurdugaci s comment this should be< 2and trim quotes always.\n. remove this comment it does not add value...\n. because we always expect\"you could change the qualifiers to contain the leading\"` and then just copy length-1 chars. \n. You are right: Variable assignment values must be enclosed in double or single quotes if they include spaces, semicolons or other special characters outside of A-Z, a-z, 0-9\n. Should we also check single quotes then?\n. Long time ago this test looked like this: \nhttps://github.com/aspnet/dnx/commit/91bfcb2beae37e9848988d957757f02188d38a33#diff-e55dc1e04a00ac49a7639d3a48ea217dL36\nI think we should remove the comment - it is no longer understandable\n. volkswagen!\n. :+1:\n. This is probably theoretical but now the check for empty string should go after trimming quotes... \n. I actually did check this :)\n. can this really happen? and if this does can it really be ignored?\n. don't make it async\n. this nested try-catch is gross\n. Isn't this throw still needed? I think without this we will suppress all exceptions but FileLoad/FileNotFound and compilation exceptions... \n. nice! ...but make sure that it does not convert non-compilation exceptions to AggregateExceptions.... (i.e. before if an application threw it would just report the actual exception and not the exception wrapped in AggregateException)\n. Yes, but as per MSDN Handle() does:  if any exceptions went unhandled, all unhandled exceptions will be put into a new AggregateException which will be thrown - so I just want to be sure we don't start wrapping exceptions accidently...\n. :clap: \n. @davidfowl - Do you know why I asked to check if it does not wrap the user's exception in the AggregateException? Because I had to look Handle up on msdn...\n. Is this check even needed?\n. the named parameters (especially publishProject) were useful here...\n. Again - root.Frameworks.Any() needed?\n. Does this test depend on this package being on NuGet?\n. I think other tests mostly depend on packages we kind of control, no?\n. devil's advocate - when a property has a getter and a setter you never know whether it is just for easy initialization or it actually being reset later. This can lead to wrong assumptions and bugs - where the code originally assumes it is only for initialization but then someone starts resetting the value. Also if you have many properties you probably have to rely on the IDE/Intellisense as well - only you can set them in any order... \n. Have you considered doing IgnoreCase check and printing the warning if the names still don't match? (I don't feel very strongly about about that though...)\n. Use skip\n. How about Mac?\n. Why don't you just check the version for null at the beginning and return null instead of doing this dance with nullables and checking the version twice with the .? operator?\n. What is false here?\n. Sorry for not being explicit. I want a named parameter :)\n. RuntimeOperatingSystems.Linux.ToLower() ?\n. @anurse - Should this have been checked in?\n. why do all the parsing if you won't use that if _options.WwwRoot is not null? Should the if condition be changed to: if (_options.WwwRoot == null && File.Exists(Path.Combine(project.ProjectDirectory, \"Microsoft.AspNet.Hosting.json\"))). Same below.\n. Nope. Revert any changes to .vcxproj or build/* files.\n. I thought it was not possible to skip for only Mono on Linux. If it is I will fix.\n. We suck - the skip attributes are independent so Linux and Mono will skip all Linux and all Mono and not Mono on Linux. Leaving as is. \n. Fixed using the beta8 feature.\n. Because we want to test on Mono on Mac\n. I updated #3073 with your suggestion since the code has gone in.\n. arm?\n. Yeah... If we don't find anything better we could check %PROCESSOR_ARCHITECTURE%\n. At the moment the only ARM runtime we have is Windows. Hopefully there will be an API in CoreClr that will allow to detect this.\n. Looks like this would be just \"ARM\" - https://www.raspberrypi.org/forums/viewtopic.php?f=105&t=123945&p=833274\n. Does it work if the project is using Oss signing?\n. Can you add some tests? The tests I created before might be helpful.\n. EntyPoin->EntryPoint\n. Do you need a separate test for this? You did not set useOssSigning so you can't tell if it was reset or not. On the other hand I don't think you can test keyFile and useOssSigning:true in one test because Options.CryptoKeyFile will never be set. \n. nit: remove this line\n. nit: add the modifier - I think we are adding them always even if they are the same as default. Same for the const strings in the RoslynCompilerTest\n. nit: revert\n. Maybe just let it fail? It would have saved us some time yesterday ;)\n. Can you just use StreaemReader.ReadToEnd here?\n. int: consider ternary\n. I wonder if we shouldn't do the same if the keyFile is an empty string..\n. ",
    "loudej": "attn @davidfowl \n. now attempts to deletes target folder before copying recursively\n. done, looks for any ./tools/.dll in dependencies\n. Now that you mention it. I believe the walker already has a thing where it won't follow a path when it's in the ancestry. The nearest-wins rule should already be guarding against this...\n. So yeah - walker doesn't fail, but things that recurse dependencies after walking still need to guard against cycles.\n. Doesn't need to fail, really... If both places that see a->b->c->a act skip the c->a instead of failing, it'll just work. Same amount of logic to detect the cycle, of course, just skip instead of throw because the inner one is redundant. \n. Though that might be impossible for project (Roslyn) referenced... So yeah, throwing might be better.\n. references\ndoing github from mobile is bad\n. Will do, at breakfast right now\n. We added the SDK version in the project \"debug\" settings specifically so you can hop around to test different versions. Doesn't this idea conflict with that feature?\nInstead, how about adding that \"minimum\" SDK version to project.json we talked about? That's where node does its similar thing.\nSent from my Windows Phone\n-----Original Message-----\nFrom: \"Eilon Lipton\" notifications@github.com\nSent: \u200e5/\u200e12/\u200e2015 9:36 AM\nTo: \"aspnet/dnx\" dnx@noreply.github.com\nCc: \"Louis DeJardin\" louis.dejardin@gmail.com\nSubject: Re: [dnx] [Proposal] Check global.json sdk version on startup (#1846)\nI like it.\n\u2014\nReply to this email directly or view it on GitHub.\n. :ok:\n. why?\n. I certainly didn't want to - but once you have escapes inside %'s inside quotes - regex kinda isn't your friend anymore. Also started with some char-scanning code, but that rapidly turned into a big snarl of special cases...\n. It's kind of hacky. But if a source-project and nuget-project were both available, it seemed to latch onto the nuget-project because it had a higher -* value. This makes the source-project default to -SNAPSHOT which is higher in sort order. Doesn't affect the output, or at least it shouldn't...\n. Probably no? Paranoia?\n. Yep, but I dunno where\n. :ok:\n. yes\n. Anticipating something like a --verbose flag which could be a implemented as a flag on the operations class.\n. :ok:\n. :ok:\n. :ok: \n. the recursive:true is known to throw occasional exceptions, so was avoided\nthe other call to recursive:true is cleaning up temp files, and if it fails the only effect is the temp directory won't be cleanup up fully. it could also use the code-recursive delete if we want to guard against that.\nor we could use recursive:true all the time, and wait for people to report occasional failures?\n. ",
    "pranavkm": "This change seems to have broken the KRuntime package. It no longer contains nuget.exe under the tools directory. \n. Didn't make it Lazy. It seems kinda dirty when the Lazy initializes two things (the graph and the inverse) as part of the initializer. \n. Merged in 6f839d6c9f37948478faa89a40da1e5f7e49b1bf\n. @javiercn sorry, I merged this change in independently as part of 2cca8c831e2993040cd6a5dd8fb4b2e2518a4e01\n. We'll need to copy this file over to all the repos. \n. I'll have it merged in \\ copied it to the other repos in a bit.\n. Merged in 5ec22cc6c811c696b5ec620b475583fda3559f09\n. :shipit: \n. :shipit: \n. Updated\ncc @ChengTian \n. Addressed as part of 2e44e7aa543cf3cce6403139cf714937c22363e9\n. Slightly related, the source doesn't exist in the sh. We need to simply execute kvm.sh as . packages/KoreBuild/build/kvm.sh\n. Fixed as part of https://github.com/aspnet/KRuntime/commit/5e91bff61aebdaa0d2e8decdccc69c32b135d743\n. Note: I tried switching it over but there's a bug in HttpClient which causes it throw ObjectDisposedException if you reuse it for requests. This prevents us from using it at this point. @Tratcher could you let us know when the bug might be fixed so we can start using it?\n. :shipit: \n. These are CSharpParseOptions though\n. Updated\n. Updated\n. cc @jhawk42 \n. cc @davidfowl \n. cc @Tratcher \n. Will be fixed by @ChengTian \n. The exception gets thrown when we read the results of ILibraryManager.\n. So I just tried this:\n```\n\nkvm use 1.0.0-beta1 -r CoreCLR\nkpm pack -o \\temp\\artifacts --runtime KRE-CoreCLR-x86.1.0.0-beta1\n```\n\nAnd the app works fine when I run web.cmd and hit localhost:5000.\nMvc's at version 6.0.0-beta1, although the Roslyn packages that are referenced are slightly older:\n- Microsoft.CodeAnalysis.Common: 1.0.0-beta1-20141029-05\n- Microsoft.CodeAnalysis.CSharp: 1.0.0-beta1-20141029-05\nPerhaps it's the mismatch in the version of Rolsyn that's causing this issue. \n. @filipw , could you reopen the issue if you're still seeing this? I'm going to close this as no-repro\n. cc @davidfowl. Will add tests once we settle on the design.\n. @davidfowl updated. Corresponding changeset in Mvc - https://github.com/aspnet/Mvc/commit/0c386806f24f8f412d96e354d02b60c1ebcb3212\n. Updated. Could you have a look?\n. Superseded by https://github.com/aspnet/KRuntime/issues/993\n. See https://github.com/davidfowl/vNextLanguageSupport for samples on alternate language support.\n. I tried this yesterday and it did sort the issue for me. Thanks for getting this in\n. This was running kpm restore on the Mvc solution which is quite massive. http://projectk-tc/viewLog.html?buildId=82412&buildTypeId=Mvc&tab=buildLog#_focus=103&state=103 has something that looks similar.\n. I'll give this a try and file bugs with kpm list if I run into any. Presumably we can also get FxCop using kpm list I presume?\n. I'll update the docs and such once we settle on the design.\n. :shipit: \n. Yup, this was addressed as part of https://github.com/aspnet/XRE/commit/7144ddcb0b43da44b6d18f0ed76244387b512f14\n. Updated.\n. Running this on Mvc's repo (values in ms)\n| Scenario | WIth old KRE | With new KRE |\n| --- | --- | --- |\n| With no files in packages dir | 28805.6021 | 7262.3137 |\n| With files in packages dir | 15132.2475 | 3728.227 |\n. Not as yet. I might be able to spend some time with it today - however if this is critical for beta4, we should undo this feature and revisit this in beta5.\n. We don't have parallel restores on by default as part of beta4. The fix would be for beta5.\n. :shipit: \n. @anfomin Our regular feed needs some sorting out so it'll take a bit for it to appear there. In the meanwhile, you can grab the fixed build of KRE from the volatile feed in ~10 mins.\nSH\nexport KRE_FEED=https://www.myget.org/F/aspnetvolatile/api/v2/\nkvm upgrade\n. Makes it easier to use this in Razor compilation since we have values for some of these properties.\n. I'll spend some time looking at this - if we can't find a reasonable solution for this we can consider reverting the parallel restore behavior until we have something more reliable.\n. I'll close this one and use https://github.com/aspnet/dnx/issues/1190 to track the issue.\n. Is the .nuget still used? We install to the .k directory when you do build install which was the primarily use case for it. It's probably useful for testing KoreBuild but not a great deal outside of it?\n. There's also the AssemblyInformationalVersion which might need something similar.\n. Doesn't help if I want to use build time information to set it (for instance it would be nice to set the commit shas in the binaries we produce)\n. cc @muratg \n. :frowning: yeah, guess we need to use plan B. I'll send an update.\n. cc @davidfowl based on discussion.\n. Updated.\n. :shipit: once somebody from DNX signs off.\n. cc @davidfowl @ChengTian \n@BrennanConroy, I tried this on your VM and it does look like it's resolved correctly this time around.\n. Great. Could you review the PR so we can check it in and start using it as part of the CI build script?\n. Travis seems to hung due to package restore - No output has been received in the last 10 minutes, this potentially indicates a stalled build or something wrong with the build itself. AppVeyor doesn't have any build logs. Let me try rebasing and pushing to this branch - so we'll get a new build.\n. Updated.\n. Yeah, seems like this should be safe to remove now. I'll give this a try.\n. We should be good to remove these since we're consuming the newer packages\n. Sorry, sent the PR against the wrong branch. Checked in to release - 06aada9d064a13362794d7c8eed95d14f61175bb\n. :shipit: when @BrennanConroy's happy.\n. Are you using release builds? Nevermind. Just noticed the part where you said you picked it up from the CI.\n. :shipit: !\n. Seems like a terrible choice, but we should probably make sure we're consistent in behavior with the one in the tag helpers in Mvc \\ other places that specify globbing paths. cc @DamianEdwards \n. @ericstj, do you have the stack trace for the error?\n. cc @anurse \n. :shipit: as long as this works\n. Should probably use ConcurrencyUtil.ExecuteLocked to start with.\n. It does - it locks using a Semaphore for the specified path that is shared across multiple processes.\n. Any idea why AppVeyor might be failing here?\n. :shipit: \n. :shipit: \n. It's not the same thing but any DiagnosticMessages added to the compile context should show up in VS.\n. :shipit: \n. I think NuGet did fix this behavior with priority settings - things closer to CWD do not get overwritten by things further away. @deepakaravindr \\ @zhili1208, could you confirm?\n. Slightly tangential - once we switch to using NuGet.Configuration we'll lose out on NuGet.redirect.config. \n. This was an attempt to pull in the transitive dependencies in. We could probably close this since we decided not to use this approach.\n. @ericstj could you let us know when the CoreCLR packages are updated so we re-resolve https://github.com/aspnet/CoreCLR/issues/26?\n. :watch: \n. Since the feature required runtime support (via resource discovery), it was problematic to support it on desktop (Net45). The last time this was discussed, the plan was to revive this if we figured out a a more robust way to support this across all runtimes.\n. Looks good. Would like to see more test cases before :shipit: \n. Perhaps dnu restore does not follow redirects?\n. Change looks pretty solid :shipit: \nAs a follow up, we should figure out how to make it easy to run tests against packages - since we don't build test projects, simply run them. This would avoid having to recompile src.\n. Might also want to port over federated auth support (https://github.com/NuGet/NuGet3/blob/dev/src/NuGet.Protocol.Core.v3/RemoteRepositories/STSAuthHelper.cs) that NuGet supports. The APIs to work with these don't exist in CoreCLR though.\n. NuGet ignores invalid Settings files. I think dnu's parsing code is verbatim taken from NuGet - http://nuget.codeplex.com/SourceControl/latest#src/Core/Configuration/Settings.cs\nC#\nprivate static Settings ReadSettings(IFileSystem fileSystem, string settingsPath, bool isMachineWideSettings)\n{\n    try\n    {\n        return new Settings(fileSystem, settingsPath, isMachineWideSettings);\n    }\n    catch (XmlException)\n    {\n        return null;\n    }\n}\n. Will do.\n. @nguerrera, is this still an issue?\n. @davidfowl \\ @anurse should I investigate this?\n. Should the variable be named DNX_ASSEMBLY_VERSION? DNX_VERSION sounds like something you'd use to specify the DNX version, not the application being built.\n. DNX_PROJECT_VERSION sounds good to me. \n. :shipit: \n. Is the redirect config something we plan on supporting in RTM? NuGet doesn't have this feature.\n. @jochenvanwylick, you could consider setting theDNX_HOME environment variable to change where dnx is installed.\n. @eugeneagafonov we've been using the setting on our CI of late and it works pretty well. Are you certain the build agent is actually picking up the environment variable (maybe it needs to be restarted if it's a service?)\n. Outside of DNX_HOME, I don't think there's a way to specify where DNX is installed. For one, it might be useful to get the verbose log from your dnvm install and file an issue at https://github.com/aspnet/dnvm. \nYou could try extracting the latest DNX package (nuget install dnx-clr-win-x86 -source https://www.nuget.org/api/v2) and simply running commands from it's bin directory.\n. For most parts - there's one missing piece that I'll have a look at: https://github.com/aspnet/dnx/issues/2747\n. Dup of https://github.com/aspnet/dnx/issues/2747\n. Deleting %UserProfile%/.dnx/ on Windows or ~/.dnx on OSX \\ Linux should remove the dnvm command along with any other DNX binaries that came with it. If you have old VS tooling installed, updating to the preview2 tooling should remove copies installed by VS.\n. dotnet restore has the same flags for source -s and fallback sources -f:\n. Think it might need a build.sh change. But that would apply to all repos.\n. cc @yishaigalatzer Might be something that needs to be ported to nuget.\n. I'm still seeing this. This hangs my local builds for 3+ minutes per project. \n. :shipit: \n. Unusual scenario in the Razor precompilation tests where I want have the source of the files as well as the compiled types. \n. No, I worked around it by creating a new project which included the files via ../other-project/resources/*.cs\n. cc @davidfowl \n. Seems to be working?\n. :shipit: \n. :watch: \n. :shipit: \n. :ship: :it: \n. :shipit: \n. Related: https://github.com/aspnet/dnx/issues/2260\n. :shipit: \n. cc @victorhurdugaci \n. Yeah, we could use it once this feature gets eventually revived. No point in causing random diffs. \n. @muratg hopefully all it would take is reverting this changeset to revive this feature in the future.\n. Do we need a discussion thread for the announcement or is it more of an FYI?\n. Announcement thread: https://github.com/aspnet/Announcements/issues/66\nDNX tracking thread: https://github.com/aspnet/dnx/issues/2699\n. :shipit: \n. Related: https://github.com/aspnet/dnx/issues/2455\n. > This also doesn't prevent us from doing something similar using the global.json today, correct? \nThe parsing code does not have a strict schema that it validates these files against and simply ignores keys that it doesn't know about. \n. Here's the actual work item that tracked the removal: https://github.com/aspnet/dnx/pull/2692\nThe command dnu sources and the associated code that executed when you ran dnu pack was removed.\n. Empirical evidence:\nThis PR: ran for 22 min 36 sec\n2719 (https://travis-ci.org/aspnet/dnx/builds/80871434): ran for 27 min 55 sec\n. cc @davidfowl \n. cc @deepakaravindr\n. This should be already fixed - https://github.com/aspnet/dnx/commit/9dca281a9594eec292c0bb502e31535900a23223. Similar changes need to happen on NuGet's side to ensure the casing behavior is unified.\n. Sorry about that. We had a build issue with the CI which caused half the packages to be uploaded. We're working on fixing it now.\n. To embed resources, use the resource node in project.json. See https://github.com/aspnet/dnx/blob/5bbb84bea40d8835da0c3eefd5a2343b50347084/misc/ResourcesTestProjects/testproject/project.json#L19-L26\ntypeof(SomeTypeInYourAssembly).GetTypeInfo().Assembly would be equivalent to GetExecutingAssembly and it has a GetManifestResourceStream method on it.\n. @marchy See https://github.com/aspnet/Announcements/issues/175\n. Would be useful to look at individual commits.\n. We'll need to port the multiple path support back to NuGet. Right now, they only support NuGet.config \n. @davidfowl, no idea:\n```\n=== TEST EXECUTION SUMMARY ===\n   Microsoft.Dnx.Tooling.Tests  Total: 23, Errors: 0, Failed: 0, Skipped: 0, Time: 4.799s\nNo output has been received in the last 10 minutes, this potentially indicates a stalled build or something wrong with the build itself.\nThe build has been terminated\n``\n. Updated\n. :shipit: \n. :shipit: \n. @Fosol, the repository names haven't been affected by this rename\n. :shipit: \n. :+1: \n. Do we need to make changes on the CI to light this up?\n. cc @BrennanConroy \n. Yup. I'll create a follow up once we have that package. It won't fail immediately with the rename since the old package will still exist.\n. @davidfowl  the TestHost uses Newtonsoft.Json.\n. :shipit: \n. Neat. Just trying to get rid of it : https://github.com/aspnet/Common/pull/54\n. cc @anurse \\ @davidfowl \n. @tmds that package should be located onhttps://www.myget.org/f/aspnetmaster. Looks like it -System.IO.FileSystem.Primitivesin his case. I removed a bunch of these the last time we were branching master.\n. Checking this in to keep CI going. I'll keep the PR open\n. :shipit: \n. cc @BrennanConroy \\ @anurse \\ @divega \n. Any idea why Travis is failing? Changes look :shipit: \n. Isn't that a problem? Who's still trying to pull inMicrosoft.Dnx.Compilation.Abstractions`?\n. :shipit: \n. :shipit: \n. Ok. We were seeing issues with it today so this should unblock it.\n. cc @cesarbs \nhttps://github.com/aspnet/dnx/commit/3659ba5a113307f0866303325c8caf122a8ee736 reverts the weird merge and we redo the merge so history is tracked.\n. The runtime version (16048) seems older than PlatformAbstractions (16110). Could you try updating the runtime to see if it fixes the issue?\n. cc @muratg \\ @BrennanConroy \n. Doesn't look like we use this property in Mvc. There're places where we implement IApplicationEnvironment where it shows up, but that's about it.\n. You should be able to reference System.IO: 4.0.11-beta-23516 from dnxcore50.\n. @shanselman like @BrennanConroy pointed out, it's at https://github.com/aspnet/Common/tree/dev/src/Microsoft.Extensions.CommandLineUtils. We also have a package available on nuget.org: \nhttps://www.nuget.org/packages/Microsoft.Extensions.CommandLineUtils/\n. This is a CoreCLR issue. Please file it at https://github.com/dotnet/coreclr\n. :shipit: \n. :shipit: \n. :shipit: \n. We pin after we create the packages - you want packages to reference rc1-update2 not update1. \n. :shipit: \n. Is this essentially an alias for netstandardapp1.5?\n. Would we need to rename netstandardapp1.5 -> netcoreapp1.0 in our project.jsons as a follow up to this?\n. @victorhurdugaci this moves the DNX specific test infrastructure into DNX. This could reduce cyclc dependencies between Testing and Logging \\ Common \\ PlatformAbstractions.\n. Yup. I'm going to make aspnet.xunit depend on DNX on the CI so we'll continue to get new builds of it until we hit RC2 but it won't be part of Universe-Coherence.\n. cc @BrennanConroy \n. I ran into some issues compiling DNX that I'm not super sure how to resolve. @davidfowl 's volunteered to sort it out.\n. @Eilon would like me to take a stab at this. Try using dotnet restore to build dnx.\n. @nullcat0 DNX is no longer supported. Looking at your bug report, it looks like you might already be using Dotnet CLI. You can file issues for it here - http://github.com/dotnet/cli/issues.\n. RIght now the structure looks identical to the package (it has both 32 and 64-bit binaries that get installed to ProgramFiles(x86)). We can change this over iterations. \n. The version we generate doesn't work with MSIs. Also our build numbers are too long to use as the build version (needs to be < 65535). Open to suggestions here.\n. 0.1.0228.0. Revision numbers are ignored by the installer so they're generally useless. The behavior seems to be - if you install multiple msis from the same day, you'd see multiple versions in the Add \\ Remove dialog, but they install to the same location. Installing a msi from the next day would uninstall all the old one\n. Needs to include nuget.exe? Or is this intentional?\n. string.\n. This was reverted\n. :+1: \n. In fact there's a call to Directory.Delete(..., recursive: true) further down.\n. Should be the stable one. Don't think this needs review.\n. I agree with @davidfowl. Having it be in lower case makes sense, it's less confusing that way. build.cmd also attempts to use the lower case name on disk - https://github.com/aspnet/KRuntime/blob/dev/build.cmd#L17\n. I think you should do this first. Pretty sure Directory.Exists throws if you pass it a null argument value. Also, it might be ok to throw an ArgumentException - it is an argument after all.\n. Just do string expectedSha; instead.\n. Do you need to note this to return an exit code? Or does Reporting in red do that for you?\n. Do you want to make this a condition instead - var configFileSpecified = !string.IsNullOrEmpty(GlobaJsonFile);?\n. Still, doesn't it make sense to verify it's valid before attempting to try out all combinations with it?\n. Could you make this a parameter like FRAMEWORK? \n. buildOptions.Configurations.DefaultIfEmpty(\"debug\")\n. var\n. Does this need to be assigned to null? Both paths following this assign it.\n. Align\n. private setters?\n. subDir\n. WebDeploy?\n. Should this use string.Equals?\n. Braces for cases? Why?\n. Don't have to init this.\n. Would this be an else condition to the previous if? or Without the if? The call to File.Delete should have failed if the file still exists at this point?\n. Might be worthwhile to add this as a utility method? Avoids having to specify the bufferSize and useAsync every time.\n. You could refactor this in to a T ConcurrencyUtilities.ExecuteFileOperation<T>(string fileName, Func<T> action) or something like that. The last one is different, but the other 3 cases could be refactored. Also use named params for the first two ints.\n. In this case, wouldn't the result need to point to newFile rather than the CacheFile? Essentially, isn't the CacheFile incorrect at this point?\n. :+1: Also Might want to use Path.DirectorySeparatorChar there instead of '\\'. \n. Is there a WriteError?\n. IsDifferent<TVal>(TVal a, TVal b)?\n. How is this not a policheck violation? \n. Spacing\n. Maybe make this a GetBytes(Stream stream) method?\n. Uncomment or remove\n. Seems like overkill though especially if you're deleting these directories at the end of each iteration (which you should be)\n. Nope, should I switch this to Information instead? \n. Switched to Quiet per https://github.com/aspnet/KRuntime/pull/699/files#diff-80860a72e1e89bc8fd04c30fdfbeddffL65 \n. Sure\n. According to their documentation, Emit will use Compilation.AssemblyName if it's set as the outputName. They have a thing in EmitOptions called outputNameOverride if you feel we shouldn't be doing this.\n. The idea was to share ProjectExtensions.cs and CompilationSettings.cs between KRuntime and Mvc.Razor (some sort of pre-build step that does this). Razor adds this conditional compilation setting\n. ProjectMetadataProvider was already taken. Manifest seemed like the next best option\n. Thoughts on this? Should I leave this as <string, string> or would we dumpJObjects into this if it's a complex  type? \n. Will undo.\n. I filed a bug to addAdditionalOptionsas a parameter to this type. I'll work on getting that in as a separate PR. https://github.com/aspnet/KRuntime/issues/971 \n.build verifyworked. I have functional tests in Mvc that verifies that the value gets flown during precompilation and runtime compilation and both of them pass. Is there another location where I should be adding this to instead?\n. Ok. I can useIProjectResolver` in the implementation to discover the project at that point,.\n. Seemingly not. Will trim this down.\n. We did. But it would combine the individual diagnostic messages. We were doing something similar in Mvc but this was causing the diagnostic page to  repeat the individual diagnostics twice - once at the top with the exception message and once with the individual error displays.\nWe could alternatively chose to not display the error message in Helios and change this back to old behavior.\n. For Mvc, this could be content from an embedded file system since you can set RazorViewEngineOptions.FileSystem. Helios \\ Diagnostics wouldn't be able to read it unless we pass the IFileSystem along. Consequently since Mvc already has the file content in memory, we assign the property value.\n. ok. Could we wait until we have Helios support for the exception type to start with? Would make it easier to debug\n. TNode\n. Maybe assign the previouses.Select(c... to a separate variable for readability.\n. TVal\n. Might want to specify a Comparer. Either StringComparer.Ordinal \\ OrdinalIgnoreCase\n. Undo. 2 more files that appear after this have the same issue.\n. Intentional?\n. undo?\n. If we add this, could you ensure IApplicationEnvironment is removed from precompilation? Also, this might need the equivalent of IApplicationEnvironment.Configuration. Mvc needs that value for compilation options parsing\n. License header\n. Does this need to be initialized?\n. Any chance we get an assembly here instead? If the AfterCompileContext doesn't change it, you'll no-op. I could use this for Razor precompilation - but with the current approach, we'll need to emit the result twice - once with this stream to find interesting types and again when we hydrate it with resources.\n. Ehh, it doesn't look like it needs to be initialized regardless. Just a code cleanup comment.\n. It avoids us having to do the first emit. Just a thought since its quite likely you're going to have to emit it if the resulting Assembly is interesting. Quite unlikely looking at the Stream does much.\n. Why not make this a regular method?\n. No love for DNX_ASSEMBLY_INFORMATIONAL_VERSION?\n. Should this be of type Version?\n. Did this check get removed?\n. var\n. Seems like a simple enough change - but we could do it as a separate PR.\n. Embrace the C# 6.0 Luke.\nCSharpSyntaxTree.ParseText($\"[assembly: {assemblyFileVersionName}(\\\"${project.AssemblyFileVersion}\\\")]\", parseOptions)\n. Maybe do string.Equals(attributeName, assemblyFileVersionName, StringComparison.Ordinal) here. Also is the value guaranteed to be an fully qualified name all the time? Even if the actual code didn't fully qualify it?\nC#\nusing System.Reflection;\n[assembly: AssemblyVersion(\"1.0.0\")]\n. Hungarian notation? :disappointed: \n. Sure\n. Oops, yeah. Missed that bit.\n. Oh sure I'm changing it. Doesn't mean it's not :disappointed: \n. Maybe Version.TryParse instead of try-catching?\n. Unless I'm missing something super obvious, packageFilter never did anything particularly useful.\n. Formatting.\n. I can revert this - but they're functionally identical.\n. StringComparer.Ordinal (also for the dictionaries).\n. Revert?\n. Should it be deleting the directory here? If not, why create a disposable?\n. remove\n. Could these be changed to doing Assert.Contains? As it stands all you'd see is the Assert.Equal fail with a count mismatch if the test fails which isn't very useful. \n. each -> directory \\ runtimeHomeDirectory etc\n. :cactus: \n. Environment.NewLine perhaps?\n. Instead of doing this - could you return a ProcessResult or something pretty like that?\n. Oh sure - but you could do Assert.Collection(stdOut, first => { /* Do nothing */ }, second => Assert.Contains(\"* alpha\"); third => ... ); Either that, or do an Assert.True(2 == hits.Count(), $\"Result: {stdOut}\");. The value is sort of not super important, but it would be useful to see the actual stdOut when your assertions fail.\n. Terrible variable name.\n. StringComparer.Ordinal\n. You shouldn't have to do ToArray here\n. visitNode: VisitAssembly for bonus points!\n. Shouldn't need to do the replace - just specify the version inline.\n. var packageName = $\"{name}.{version}.nupkg\";\n. Missing period.\n. Maybe drop the A class that bit.\n. > The loaded <see cref=\"Assembly\" />\n. Couple of other places with the same issue.\n. Well, that's the format we've been sticking to in Mvc.\n. Ahh this was the change you were speaking of. Could you also send a PR to NuGet with this change?\n. string.Equal(.., Ordinal)\n. Could you add an assert here saying previousLibrary is not expected to be null? Or Does CreateLockFileLibrary handle nulls?\n. Could we do this up front (in line 35)? Path.Combine should work with well with forward slashes.\n. readonly\n. I wasn't suggesting using Path.Combine. It was more along the lines of - if we store these files with transformed paths to start with, Path.Combine would continue working without issues and we'll avoid iterating over this list twice.\n. Could we have a synchronous overload for this which takes an Action? We can have it call this method and perform GetAwaiter().GetResult() in that method. @ChengTian is using this in another PR to perform synchronous operations and it would be cleaner to commonize the pattern. \n. Why not change this to a ISet<> instead? This is a bit broken since you rely on the default StringComparer's Equality behavior.\n. Can we get a couple of variants for the delaySign values (1, -1, True, \"\")?\n. Nevermind - didn't realize the place you were string comparing 1, true is the env variable. Ignore my comment \n. ?\n. 3 * 5 seconds seconds doesn't seem like a very long time to wait for a package to extract. Have you tried extracting a large sized package?\n. Should we build a dependency graph here? If a dependency fails to build, it doesn't make sense to build any of it's dependents\n. Could you pull it into a class-level constant for now? Less refactoring\n. Could this not be a local variable anymore? It only seems to be used in this method.\n. Should we follow up with the serialization team? My guess is we don't want any of these binaries in the runtime if they aren't necessary.\n. Should this be IReadOnlyList?\n. Maybe avoid doing multiple lookups for the same key?\nC#\nvar versions = json[\"versions'];\nif (versions != null && versions.Type != JTokenType.Array)\n{\n   throw new InvalidDataException(\n       $\"{message} The value of 'versions' property is not an array.\");\n}\nMaybe a future refactoring, but it would be useful to not reparse the json multiple times over (once here and once in the body of FindPackagesByIdAsyncCore). Perhaps this could stash the parsed json somewhere that flows via data?\n. Same deal with not doing multiple lookups?\n. Could we pass in the cache instead? Hard to know what the lifetime of these HttpSource instances are with statics and if it's appropriate to cache them indefinitely.\n. See - https://github.com/NuGet/NuGet2/blob/2.8.6/src/Core/SemanticVersion.cs#L295-L330\n. Could you also add a test case for 1.0-beta -> 1.0.0-beta - doesn't seem to be covered?\n. It was sort of a UI feature. It was apparently confusing when Install-Package Foo 1.0 would install Foo (1.0.0). We probably shouldn't care about it keeping it around.\n. readonly ConcurrentDictionary<string, HttpSource> _httpSources = new ConcurrentDictionary<string, HttpSource>(StringComparer.Ordinal);\n. > Check if the feed is a file path\n. Shouldn't all the code that follows be part of the GetOrAdd call?\nMaybe change it so that we have a \nConcurrentDictionary<PackageSource, HttpSource> _httpSources = new ConcurrentDictionary<PackageSource, HttpSource>(StringComparer.Ordinal);\nreturn _httpSources.GetOrAdd(source, GetPackageSource);\nwhere GetPackageSource has all the codes\n. Local repos cache results of lookups -- https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Tooling/NuGet/Core/Repository/LocalPackageRepository.cs#L19-L20\nWould be useful to reuse these instances too\n. ConcurrencyLimit\n. readonly\n. StringComparison.OrdinalIgnoreCase\n. _packageFeeds.GetOrAdd(source, _ => CreatePackageFeed(source, noCache, ignoreFailedSources, reports));\n. Spoke with @BrennanConroy offline - StringComparison.Ordinal might be more appropriate here.\n. Also license header.\n. OrdinalIgnoreCase!\n. Should we switch this to Ordinal based on your suggestion earlier?\n. Pass in the appropriate comparer: .Add(Name, StringComparer.OrdinalIgnoreCase) to all of them\n. public IEnumerable<JsonValue> Values => _array;\n. If we're doing path sanitization, would rooted paths also not be supported?\n. files[0]\n. IEnumerable \\ IReadOnlyList?\n. Could you print the stdError if the exitCode is non-zero?\n. Thoughts?\n. Alternatively we can move FileWriteTimeCacheDependency to common code and remove the need to do this. That said, in anything outside of DNX, adding a cache dependency would be pretty pointless.\n. @davidfowl, could we use CreateFromStream here? \n. The ICache or the method in general?\n. @davidfowl thoughts?\n. Also, my guess is we could set the filePath here.\n. We create it - https://github.com/aspnet/dnx/pull/2595/files#diff-6d73c10696b867e7a9c5b6a4243462d9R53\n. This line changed\n. Round 3\n. Updating file provider to origin/dev\n. runtimeStopWatch\n. Couldn't you write this as\n`` C#\ncatch (Exception ex) when (ex is FileLoadException || ex is FileNotFoundException)\n{\n    if (ex.InnerException is ICompilationException)\n    {\n        throw SuppressStackTrace(ex.InnerException);\n    }\nThrowEntryPointNotfoundException(\n    host,\n    applicationName,\n    ex.InnerException);\n\n}\n```\nWouldn't need the other throw.\n. Making it a list of values to maybe allow Roslyn gated builds.\n. It could. I was just following the pattern from https://github.com/aspnet/dnx/pull/2907#discussion-diff-41206792R642\n. I don't see why it wouldn't. That said, we're running this from a Windows build agent on the CI so it's ok it it isn't cross-plat as yet. In fact, we can remove the target=\"install\" since we specifically run this build target as opposed to relying on the install target.\n. The cast is a Spark \\ shade thing.\n. The tasks will no-op if CI_DEPENDENCIES_PATHS is not defined.\n. The title comment seems unnecessary?\n. For the newly changed Abstractions projects\n. Fixed this before pushing.\n. Trailing comma\n. Could you also throw in a warningAsErrors: true\n. Could you modify Dnx.Native.Settings instead?\n. Why?\n. Do the other tests need in this type need to be changed to do something similar?\n. I built DNX and it updated this file. \n. ",
    "ChengTian": "Just talked to @Eilon and we might want to use DataContractJsonSerializer instead of a new parser written by us. Need further discussion and mark this as blocked.\n. We should close the following issues after this is done:\nhttps://github.com/aspnet/dnx/issues/1788\nhttps://github.com/aspnet/dnx/issues/1816\n. @pranavkm fixed this in 87c5509ca0688c2be0f80e8f4291fb0a20489bca\n. I am going to do the renaming. @davidfowl @loudej , please let me know if there is any other renaming that I can do with this one.\n. @davidfowl @loudej , should I do this before next release? Is there any other renaming that I should do with this one?\n. @davidfowl , I just added the property. In all classes that implement IApplicationEnvironment, EnvironmentName simply returns string.Empty now.\nShould I initialize the value of EnvironmentName from some sources? For example, I can initialize it with a env var K_ENV that has two possible values: \"Development\" & \"Production\". The default value can be \"Development\".\n. @lodejard can I use K_ENV for it?\n. @lodejard @davidfowl  How about this:\nKRuntime reads the value of environment variable K_ENV (can be empty) into IApplicationEnvironment.EnvironmentName. Then the environment name in Microsoft.AspNet.Hosting is determined in the following order:\n1. If env is specified in command-line switch, use it's value\n2. If env is specified in Microsoft.AspNet.Hosting.ini file, use it's value\n3. If env is specified as an environment variable, use it's value\n4. If EnvironmentName of IApplicationEnvironment (injected by KRuntime) is not empty, use it\n5. If all above fails, use default value Development\nK_ENV (i.e. IApplicationEnvironment.EnvironmentName) serves as a global default value on KRuntime, and users can override it in different ways.\n. Ok, I will fix it.\n. @Eilon I walked through all open bugs in aspnet/Reporting and found no dup. I think @davidfowl has closed all dups of this issue.\nAfter doing kvm upgrade, invalid option like kpm restre doesn't result in a crash now. So I think we can safely close this thread.\n@davidfowl if there is anything I can help with the refactoring, please feel free to let me know.\n. Hi @Alxandr , for kpm add, it's true that both name and version are mandatory. kpm add is a primitive used by kpm install, which figures out the latest version if version is ignored.\n. I am going to use the following strategy to determine the default author:\nIf env var  USERNAME has a non-empty value, use the value. Otherwise, if env var USER has a non-empty value, use the value. If we can find neither USERNAME nor USER, we leave the author field blank.\nUSERNAME is a built-in env var in Windows and it contains current user's login name. USER is the counterpart in Linux.\n@Eilon @davidfowl please let me know your thoughts.\n. We can use a new env var like K_PACKAGE_AUTHOR, but we have to ask users to create this env var. If a user has to specify such a value, why not ask them to specify it directly in project.json? You may want to mention the scenario where a developer has multiple k-based projects, but I am not sure whether the trivial convenience is worthwhile, considering it adds one more item in our manual/readme.\n. I see, if a big set of information is shared, it brings a lot of convenience.\nI think the naming of all kinds of defaults should be consistent if they are all env vars. @davidfowl , do you have the name convention in your mind? Or can I use K_PACKAGE_AUTHOR env var as the source of default author?\n. @davidfowl @lodejard thank you guys for the feedbacks. Please help to review my latest changes:\n1. Merge CommandLineApplication and CommandInfo into one class to allow a more consistent recursive processing\n2. Help options are treated specially because they are different from common options (help options invoke actions)\n3. Show help information when find invalid options/subcommands\n. Just realized that recursive parsing overkills and changed back to iterative parsing. Moreover, the \"help\" command is added with a smarter way. @davidfowl @lodejard \n. @davidfowl @lodejard I'll take care of this and rebase it\n. Moving this to ctp3. We can do this with the other renames\n. It's a bug in KRuntime/scripts/*.cmd. I will do a quick fix.\n. Fixed in #296 . @davidfowl , please help to review when you have time. Thanks.\n. @davidfowl I am quoting all paths because the paths containing \"(1)\" will break our scripts if they are not quoted.\n. Will send another PR using the approach\nbatchfile\nSET \"A={PATH}\"\ninstead of\nbatchfile\nSET A=\"{PATH}\"\n. Conflicting with the changes in #274 . Will send a new one on top of #274 changes.\n. Found one more place to fix. @davidfowl , please check the updated commit.\n. @davidfowl , followed your suggestion and extracted the common code into a util class.\n. Abandon this one and use #308 \n. You can specify proxy address with http_proxy environment variable or\nkpm restore -p|--proxy <ADDRESS>\nI set up a proxy server with Azure VM and verified that when you specify a proxy, the http requests do go through the proxy. However, I couldn't find a easy way to simulate the environment where myget.org/nugt.org blocks my direct access and I can only use a proxy to do kpm restore.\n@swimtver @shaunxu could you guys please help to verify my fix in your environment?\n. @davidfowl , added support for authenticated proxies and tested with fiddler.\n. Improved based on feedbacks. @Eilon @davidfowl , please sign off if it's Ok.\n. @sleemer , thank you for reporting the problem.\nI created an issue at https://github.com/aspnet/DNX/issues/1364. Next time when you want to report any problem, please create an issue at https://github.com/aspnet/DNX/issues. Thank you for your contribution!\n. Adding more details for this issue:\nToday, when we kpm pack a project, the root of output contains batch files used to run the pack application.\nFor example, if we have run and web commands (i.e. entrypoints) defined in project.json of the project being packed, the packed output will contain run.cmd and web.cmd. Users of packed app can simply run a batch file to start the app with a specific entrypoint.\nWe want the same thing on OSX/*nix. So kpm pack should generate bash scripts (run.sh and web.sh in example above), too.\n. @glennblock @davidfowl I am working on this issue\n. @Eilon , the bug is logged in #346 . @davidfowl , modified the variable name.\n. @Eilon , thanks for the clarification. Just assigned the bug to myself.\n. I see. Just revised and we have two issues for different stages now. See #346 #347 \n. @davidfowl , it doesn't explode. If there's no default, I can successfully build a repository and the .nuspec we get looks like\nxml\n<?xml version=\"1.0\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\n  <metadata>\n    <id>Microsoft.Framework.ConfigurationModel</id>\n    <version>0.1-alpha-t140618025949</version>\n    <title>Microsoft.Framework.ConfigurationModel</title>\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\n    <description>Microsoft.Framework.ConfigurationModel</description>\n    <dependencies>\nIf there is default in K_AUTHOR, we get\nxml\n<?xml version=\"1.0\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\n  <metadata>\n    <id>Microsoft.Framework.ConfigurationModel</id>\n    <version>0.1-alpha-t140618030221</version>\n    <title>Microsoft.Framework.ConfigurationModel</title>\n    <authors>Microsoft</authors>\n    <owners>Microsoft</owners>\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\n    <description>Microsoft.Framework.ConfigurationModel</description>\n    <dependencies>\nNote that, if there's no default, we simply don't have \"authors\" and \"owners\" element in .nuspec.\n. @Eilon @davidfowl thanks for coming up with a reliable fallback. Please check the latest commit.\n. Created aspnet/Universe#85. This one is closed as a duplicate.\n. @davidfowl , thanks for the feedbacks. Please check the latest commit.\n. @davidfowl Changing k to understand nupkgs sounds better because, in this case, main packages have the same structure as common packages. Consistency is always good :smile: \n. @davidfowl , I am trying to make k understand nupkgs as we discussed above. Although I can get name, version and most other information from .nuspec file, the \"loader\" we specify in project.json is missing in .nuspec.\nSeems we have no way to preserve \"loader\" information in this approach, should I turn to the approach where we copy and paste project.json into main nupkg?\n. Had a discussion with @lodejard and @davidfowl and made the following design:\n1.  Add files pattern in project.json\n   To make sure non-source-code contents (including views, config files and etc.) are preserved in packed output, we add a new key files into project.json and the value of files specifies the pattern of files we want to preserve. Then we can get the files we want to preserve in output by subtracting all other specified files (including source files, exclude files, ignored files, shared files, preprocess files and resource files) from files that match files pattern. The default value of files is the pattern **.*.\n2. Structure of kpm pack --no-source output\n   Assume we have an app MyApp with the following dir structure and MyApp depends on a NuGet package DependencyPackage.1.0.0.0.\n   \n   After we do kpm pack --no-source in the root dir of MyApp, we will get the following output\n   \n3. How to run the packed app\n   In the output above, execute k --app-name MyApp run in output/packages/MyApp.0.1-beta-SNAPSHOT/root/\n. @davidfowl  I tested kpm build and seems it can generate correct warnings. Which specific part needs to be fixed?\n. I see: ) I will be working on them.\n. @davidfowl  , XmlUtility class defined in\nMicrosoft.Framework.PackageManager / NuGet / Core / Utility / XmlUtility.cs\nconflicts with the one defined in\nMicrosoft.Framework.Runtime / NuGet / Utility / XmlUtility.cs\nThe two files have almost identical contents. Do we want to move XmlUtility.cs to a common project which can be shared across all projects?\n. @Eilon @davidfowl thank you guys for feedbacks. Here is the latest commit.\n. @lodejard I disabled local cache for \"kpm restore\" in the latest commit. Please help to review when you have time.\n. @Eilon @davidfowl I added pagination handler back and made local cache store each page separately.\n. We decide to first observe how many packages break on nuget.org. Close this for later consideration.\n. @davidfowl , I just checked with latest kpm. kpm /? is displaying help information of CALL because we get CALL ... /? after string concatenation in kpm.cmd and /? takes over the control. I can fix it soon.\n. This change was reverted. Reopen here.\n. kpm /? should show invalid argument '/?', instead of help information of cmd.exe.\nSince kpm.cmd is called with cmd.exe /C kpm.cmd <KPM_ARGS> while /? has a super high priority in the eyes of cmd.exe, /? makes cmd.exe show help information and kpm doesn't get called. There is a PR pending for this bug and I will merge it after adding functional tests.\n. This is not true any more after we reduce scripts in this commit https://github.com/aspnet/DNX/commit/29e6e8a10f4dfff004da9510d4f634070a6d6430\n. Handled in all scripts. Tested on nix and found /? is not a special option for command line interpreter, so this bug doesn't happen on nix.\n. Changed to produce the format mentioned by @davidfowl . Please see the latest commit.\n. @davidfowl  Changed to use resolved dependencies for current project, instead of scanning nuspec files.\n. @davidfowl , kpm restore accepts global.json file as an argument now.\nNow can do  kpm restore global.json  (global.json contains expected SHA values).\n. @davidfowl , changed to handle multiple versions of the same package\n. @pranavkm @davidfowl , thank you guys for the feedbacks. I just updated this PR.\n. I only fixed issues with relative paths in kpm. I'll fix this soon.\n. I see. I just tested it and confirmed that this issue is still there.\n. I verified and this bug is gone.\n. @davidfowl , changed the flag from --package-folder to --packages\n. app is changed to approot\n. @davidfowl @Eilon , thanks for feedbacks. Please check the latest change.\n. This workaround doesn't work since wwwroot\\bin\\AspNet.Loader.dll is needed.\n. @davidfowl , if we specify --zippackages, the bundled packages $xxxxxxx.packages should only go to wwwroot\\bin, right?\n. Just confirmed with @lodejard , --zippackages option is useless now and I can safely delete it.\n. Thanks to @davidfowl , @Eilon and @lodejard . The commit is updated based on your feedbacks. I also did some tests to make sure it works as WebDeploy expects: \n1. Test this latest change against build.cmd verify of Helios/new_paths branch\n2. Manually deployed packed website to AzureWebsite\n. @davidfowl  I remember you said we want to decouple the naming of main project and public app folder. So in current implementation, it doesn't rename the main project under approot\\src, it only renames the public app folder (wwwroot in this case) to the value of --appfolder.\n. @davidfowl , please check updated commit.\n. @davidfowl , I wrote a program which starts two kpm pack simultaneously and found the following race condition:\nWhen we want to write a nukpg to global cache, we first delete the old one in cache and copy the new nupkg from a temp file to the final destination. See https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.PackageManager/Restore/NuGet/HttpSource.cs#L119.\nAfter we write the nupkg to global cache, we also want to extract its content into current project's local package dir, so we need to read it. See https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.PackageManager/Restore/NuGet/PackageFeed.cs#L204\nSo part of the logic in kpm restore can be simplified to:\n1. File.Delete(\"global_cache\\A.1.0.0.0.nukpg\");\n2. File.Copy(\"tmp.nukpg\", \"global_cache\\A.1.0.0.0.nukpg\");\n3. ZipArchive.Extract(\"global_cache\\A.1.0.0.0.nukpg\", \"MyProject\\packages\\A.1.0.0.0\");\nWhen we execute two kpm restore concurrently (p1 and p2), let's assume the two processes interleave in the following way:\np1: 1    2      3\np2:          1\nThat is, after p2 deletes the nupkg in global cache, p1 tries to read the nukpg and throws an exception because the nukpg is not there.\nWe can fix this problem by keeping the global nukpg \"locked\" before it's extracted. I'll send my proposed solution as a PR later.\n. @davidfowl , BTW, you mentioned that you have some further instructions for this issue. Please put them here at your earliest convenience. Thanks!\n. @davidfowl , thanks for the useful hints. However, because we are using a lot of async methods, I have trouble using Mutex to resolve race conditions. In the PR below I use Semaphore to eliminate contentions successfully. To learn about the problem caused by mixing Mutex and async methods, please see http://www.dzhang.com/blog/2012/08/29/synchronization-in-async-csharp-methods \n. @davidfowl , just tested and found kpm restore doesn't generate SHA files for packages that already exist. The reason is that SHA files are only generated during installation. Do we want to fix it?\n. No need to fix the issue above.\n. @pranavkm @davidfowl , thank you for the feedbacks. The latest commit contains all improvements.\n. @davidfowl @pranavkm , using cross-platform path separator now. Also tested on Mac and it works well.\n. @davidfowl , I rebased this branch on top of the latest dev and corrected the appBase in generated .cmd files. Although we have correct appBase now, the run.cmd file cannot be executed successfully. It gives error mesage:\n'root' does not contain a static 'Main' method suitable for an entry point\nThe appBase is output\\approot\\packages\\MusicStore\\1.0.0-SNAPSHOT\\root.\n. Rebased on top of the latest dev branch\n. Looks good to me :shipit: \nCentralizing reports to PackRoot is smart!\n. Merged by @davidfowl as https://github.com/aspnet/KRuntime/commit/aa643f48adfa1bd8c2f9e78a7e5b7fb9c5c1ca54\n. @lodejard , npm can make 3rd level dependencies parenthetical in 2nd because npm packages have short names. If we do the same thing, we will get a super long line if a 2nd level dependency has several dependencies:\nMicrosoft.Framework.PackageManager 1.0.0-SNAPSHOT [K,Version=v1.0]\n\u2514\u2500\u2500 Microsoft.Framework.Runtime.Roslyn 1.0.0-SNAPSHOT (K.Roslyn 1.0.0-alpha3-10032, System.Resources.ResourceWriter 4.0.0.0, System.Runtime.Handles 4.0.0.0, System.Text.Encoding 4.0.20.0)\n@lodejard @davidfowl , the latest commit prints at most 3 levels of dependencies. Please find an example output below:\n```\nMicrosoft.Framework.PackageManager 1.0.0-SNAPSHOT [.NETFramework,Version=v4.5]\n\u251c\u2500\u2500 Microsoft.Framework.CommandLineUtils 1.0.0-SNAPSHOT\n\u251c\u2500\u252c Microsoft.Framework.Runtime 1.0.0-SNAPSHOT\n\u2502 \u251c\u2500\u2500 Microsoft.Bcl.Metadata 1.0.11-alpha\n\u2502 \u2514\u2500\u2500 Newtonsoft.Json 5.0.8\n\u251c\u2500\u2500 Microsoft.Framework.Runtime.Common 1.0.0-SNAPSHOT\n\u251c\u2500\u2500 Microsoft.Framework.Runtime.Interfaces 1.0.0-SNAPSHOT\n\u2514\u2500\u252c Microsoft.Framework.Runtime.Roslyn 1.0.0-SNAPSHOT\n  \u2514\u2500\u2500 K.Roslyn 1.0.0-alpha3-10032\nMicrosoft.Framework.PackageManager 1.0.0-SNAPSHOT [K,Version=v1.0]\n\u251c\u2500\u2500 Microsoft.Framework.CommandLineUtils 1.0.0-SNAPSHOT\n\u251c\u2500\u252c Microsoft.Framework.Runtime 1.0.0-SNAPSHOT\n\u2502 \u251c\u2500\u2500 Microsoft.Bcl.Metadata 1.0.11-alpha\n\u2502 \u2514\u2500\u2500 Newtonsoft.Json 5.0.8\n\u251c\u2500\u2500 Microsoft.Framework.Runtime.Common 1.0.0-SNAPSHOT\n\u251c\u2500\u2500 Microsoft.Framework.Runtime.Interfaces 1.0.0-SNAPSHOT\n\u251c\u2500\u252c Microsoft.Framework.Runtime.Roslyn 1.0.0-SNAPSHOT\n\u2502 \u251c\u2500\u2500 K.Roslyn 1.0.0-alpha3-10032\n\u2502 \u251c\u2500\u2500 System.Resources.ResourceWriter 4.0.0.0\n\u2502 \u251c\u2500\u2500 System.Runtime.Handles 4.0.0.0\n\u2502 \u2514\u2500\u2500 System.Text.Encoding 4.0.20.0\n\u251c\u2500\u2500 System.Collections 4.0.10.0\n\u251c\u2500\u2500 System.Collections.Concurrent 4.0.0.0\n\u251c\u2500\u2500 System.ComponentModel 4.0.0.0\n\u251c\u2500\u2500 System.Console 4.0.0.0\n\u251c\u2500\u2500 System.Diagnostics.Debug 4.0.10.0\n\u251c\u2500\u2500 System.Diagnostics.Tools 4.0.0.0\n\u251c\u2500\u252c System.Dynamic.Runtime 4.0.0.0\n\u2502 \u2514\u2500\u2500 System.Linq.Expressions 4.0.0.0\n\u251c\u2500\u2500 System.Globalization 4.0.10.0\n\u251c\u2500\u252c System.IO 4.0.0.0\n\u2502 \u2514\u2500\u2500 System.Text.Encoding 4.0.10.0\n\u251c\u2500\u252c System.IO.Compression 4.0.0.0\n\u2502 \u2514\u2500\u2500 System.Text.Encoding 4.0.10.0\n\u251c\u2500\u252c System.IO.FileSystem 4.0.10.0\n\u2502 \u251c\u2500\u2500 System.IO.FileSystem.Primitives 4.0.10.0\n\u2502 \u251c\u2500\u2500 System.Runtime.Handles 4.0.0.0\n\u2502 \u2514\u2500\u2500 System.Text.Encoding 4.0.10.0\n\u251c\u2500\u2500 System.IO.FileSystem.Watcher 4.0.0.0\n\u251c\u2500\u2500 System.Linq 4.0.0.0\n\u251c\u2500\u2500 System.ObjectModel 4.0.0.0\n\u251c\u2500\u252c System.Reflection 4.0.10.0\n\u2502 \u2514\u2500\u2500 System.Reflection.Primitives 4.0.0.0\n\u251c\u2500\u2500 System.Reflection.Extensions 4.0.0.0\n\u251c\u2500\u2500 System.Reflection.TypeExtensions 4.0.0.0\n\u251c\u2500\u2500 System.Resources.ResourceManager 4.0.0.0\n\u251c\u2500\u2500 System.Runtime 4.0.20.0\n\u251c\u2500\u2500 System.Runtime.Extensions 4.0.10.0\n\u251c\u2500\u252c System.Runtime.InteropServices 4.0.20.0\n\u2502 \u251c\u2500\u2500 System.Reflection.Primitives 4.0.0.0\n\u2502 \u2514\u2500\u2500 System.Runtime.Handles 4.0.0.0\n\u251c\u2500\u2500 System.Runtime.Loader 4.0.0.0\n\u251c\u2500\u2500 System.Runtime.Serialization.Primitives 4.0.0.0\n\u251c\u2500\u2500 System.Security.Cryptography.Encryption 4.0.0.0\n\u251c\u2500\u252c System.Security.Cryptography.Hashing.Algorithms 4.0.0.0\n\u2502 \u2514\u2500\u2500 System.Security.Cryptography.Hashing 4.0.0.0\n\u251c\u2500\u2500 System.Text.RegularExpressions 4.0.0.0\n\u251c\u2500\u2500 System.Threading 4.0.0.0\n\u251c\u2500\u2500 System.Threading.Timer 4.0.0.0\n\u251c\u2500\u2500 System.Threading.Tasks 4.0.10.0\n\u251c\u2500\u2500 System.Threading.Thread 4.0.0.0\n\u251c\u2500\u252c System.Xml.ReaderWriter 4.0.10.0\n\u2502 \u2514\u2500\u2500 System.Text.Encoding 4.0.10.0\n\u251c\u2500\u2500 System.Xml.XDocument 4.0.0.0\n\u2514\u2500\u2500 System.Xml.XmlSerializer 4.0.0.0\n``\n. Moreover, do we wantkpm restore --full-graph`, which shows full graph? It can help us to determine where a package comes from even the dependency hides deeply in a dependency chain\n. @davidfowl @lodejard , thanks for the feedbacks. Here is the output of latest version:\n```\nMicrosoft.Framework.PackageManager 1.0.0-SNAPSHOT [.NETFramework,Version=v4.5]\n\u251c\u2500 Microsoft.Framework.CommandLineUtils 1.0.0-SNAPSHOT ()\n\u251c\u2500 Microsoft.Framework.Runtime 1.0.0-SNAPSHOT (Microsoft.Bcl.Metadata 1.0.11-alpha, Newtonsoft.Json 5.0.8)\n\u251c\u2500 Microsoft.Framework.Runtime.Common 1.0.0-SNAPSHOT ()\n\u251c\u2500 Microsoft.Framework.Runtime.Interfaces 1.0.0-SNAPSHOT ()\n\u2514\u2500 Microsoft.Framework.Runtime.Roslyn 1.0.0-SNAPSHOT (K.Roslyn 1.0.0-alpha3-10032)\nMicrosoft.Framework.PackageManager 1.0.0-SNAPSHOT [K,Version=v1.0]\n\u251c\u2500 Microsoft.Framework.CommandLineUtils 1.0.0-SNAPSHOT ()\n\u251c\u2500 Microsoft.Framework.Runtime 1.0.0-SNAPSHOT (Microsoft.Bcl.Metadata 1.0.11-alpha, Newtonsoft.Json 5.0.8)\n\u251c\u2500 Microsoft.Framework.Runtime.Common 1.0.0-SNAPSHOT ()\n\u251c\u2500 Microsoft.Framework.Runtime.Interfaces 1.0.0-SNAPSHOT ()\n\u251c\u2500 Microsoft.Framework.Runtime.Roslyn 1.0.0-SNAPSHOT (K.Roslyn 1.0.0-alpha3-10032, System.Resources.ResourceWriter 4.0.0\n.0, System.Runtime.Handles 4.0.0.0, System.Text.Encoding 4.0.20.0)\n\u251c\u2500 System.Collections 4.0.10.0 ()\n\u251c\u2500 System.Collections.Concurrent 4.0.0.0 ()\n\u251c\u2500 System.ComponentModel 4.0.0.0 ()\n\u251c\u2500 System.Console 4.0.0.0 ()\n\u251c\u2500 System.Diagnostics.Debug 4.0.10.0 ()\n\u251c\u2500 System.Diagnostics.Tools 4.0.0.0 ()\n\u251c\u2500 System.Dynamic.Runtime 4.0.0.0 (System.Linq.Expressions 4.0.0.0)\n\u251c\u2500 System.Globalization 4.0.10.0 ()\n\u251c\u2500 System.IO 4.0.0.0 (System.Text.Encoding 4.0.10.0)\n\u251c\u2500 System.IO.Compression 4.0.0.0 (System.Text.Encoding 4.0.10.0)\n\u251c\u2500 System.IO.FileSystem 4.0.10.0 (System.IO.FileSystem.Primitives 4.0.10.0, System.Runtime.Handles 4.0.0.0, System.Text.\nEncoding 4.0.10.0)\n\u251c\u2500 System.IO.FileSystem.Watcher 4.0.0.0 ()\n\u251c\u2500 System.Linq 4.0.0.0 ()\n\u251c\u2500 System.ObjectModel 4.0.0.0 ()\n\u251c\u2500 System.Reflection 4.0.10.0 (System.Reflection.Primitives 4.0.0.0)\n\u251c\u2500 System.Reflection.Extensions 4.0.0.0 ()\n\u251c\u2500 System.Reflection.TypeExtensions 4.0.0.0 ()\n\u251c\u2500 System.Resources.ResourceManager 4.0.0.0 ()\n\u251c\u2500 System.Runtime 4.0.20.0 ()\n\u251c\u2500 System.Runtime.Extensions 4.0.10.0 ()\n\u251c\u2500 System.Runtime.InteropServices 4.0.20.0 (System.Reflection.Primitives 4.0.0.0, System.Runtime.Handles 4.0.0.0)\n\u251c\u2500 System.Runtime.Loader 4.0.0.0 ()\n\u251c\u2500 System.Runtime.Serialization.Primitives 4.0.0.0 ()\n\u251c\u2500 System.Security.Cryptography.Encryption 4.0.0.0 ()\n\u251c\u2500 System.Security.Cryptography.Hashing.Algorithms 4.0.0.0 (System.Security.Cryptography.Hashing 4.0.0.0)\n\u251c\u2500 System.Text.RegularExpressions 4.0.0.0 ()\n\u251c\u2500 System.Threading 4.0.0.0 ()\n\u251c\u2500 System.Threading.Timer 4.0.0.0 ()\n\u251c\u2500 System.Threading.Tasks 4.0.10.0 ()\n\u251c\u2500 System.Threading.Thread 4.0.0.0 ()\n\u251c\u2500 System.Xml.ReaderWriter 4.0.10.0 (System.Text.Encoding 4.0.10.0)\n\u251c\u2500 System.Xml.XDocument 4.0.0.0 ()\n\u2514\u2500 System.Xml.XmlSerializer 4.0.0.0 ()\n``\n. @davidfowl  @Eilon thanks for feedbacks. Improved in the latest commit.\n. Fixed in https://github.com/aspnet/KRuntime/commit/b32a3016d9234d13c7568f668a1358143f0cf0a0\n. Seems we have a convention that each subcommand goes to a dir named with that subcommand:\n![kpm-pack-dir](https://cloud.githubusercontent.com/assets/1383883/3678699/dbba238e-129c-11e4-975b-c13b9521989d.png)\n Also we have aRestoreCommand.csunderRestoredirectory in this project, so I am following the same pattern. Do we really want aCommandsdir at top level? It sounds like theCommandsdir is a collection of commands and we should also moveRestoreCommandintoCommands` dir.\n. @davidfowl , thanks for the feedbacks. Please check changes in the latest commit.\n. Summary of discussion we had:\n1. \"Restore complete\" is lost when dependency graph is too tall.\n    Solution: print \"Restore complete\" after dependency graph\n2. It's too chatty. Is it necessary to print the dependency graph in VS console?\n    Solution: let's leave it for now and observe.\n3. The graph looks noisy (see image above).\n    Solution: beautify the graph\nHow to beautify the graph:\nThe root cause of a noisy graph like the one above is that we are flattening the 3rd level dependencies into a list in parenthesis.\nMainProject\n\u251c\u2500 DirectDependency1 (IndirectDependency1, IndirectDependency2, IndirectDependency3)\n\u2514\u2500 DirectDependency2\nThink about what will happen when MainProject has 10 indirect dependencies that DirectDependency1 depends on. The line wrapping totally ruins the tree structure we want to print.\nWe can make the graph cleaner by NOT flattening the 3rd level dependencies and we will get something like\nMainProject\n\u251c\u2500\u252c DirectDependency1\n\u2502 \u251c\u2500\u2500 IndirectDependency1\n\u2502 \u251c\u2500\u2500 IndirectDependency2\n\u2502 \u251c\u2500\u2500 IndirectDependency3\n\u2502 \u251c\u2500\u2500 IndirectDependency4\n\u2502 \u2514\u2500\u2500 IndirectDependency5\n\u2514\u2500 DirectDependency2\nThis approach keeps the graph clean even there are a lot of indirect dependencies but it also makes the graph much much taller/chatty.\n@davidfowl @glennc @balachir @Praburaj @lodejard , please share your thoughts. Do we want to change it to NOT flatten the 3rd level dependencies?\nOr we can have a combination of the two approaches:\nWe first check whether there is any dependency depends on more than N (N can be 5 or so) indirect dependencies. If there is no such kind of dependency, we can safely flatten the 3rd level dependencies without making the graph noisy. If there is, we do NOT flatten the 3rd level dependencies.\n. We simply added a --verbose flag that can be used by Tooling team to hide the dependency graph. So only the item 2 in my comment above is resolved.\n. @davidfowl , changed code-exclude back to exclude\n. dupe of #520 \n. @davidfowl , I rebased this stale branch. Please help to review the latest commit when you have time.\n. @davidfowl , squashed and rebased.\n. @davidfowl , rebased and tested.\n. @davidfowl @Eilon , thanks for reviewing. Changes are made in the latest commit.\n. @davidfowl @Eilon , thanks for feedbacks. Here is the latest commit.\n. The unusual characters should be branch characters like \u251c\u2500 and \u252c in dependency graph. Tooling team said it looks like an encoding problem and they are looking into this problem.\n. Yeah, kpm restore shows dependency graph only when --verbose is provided. VS doesn't use --verbose option any more, so the problem is gone.\n. @davidfowl , thanks for the feedbacks. Changed based on the review.\n. @davidfowl , fixed based on feedbacks and rebased. The latest commit restores the exact version given in global.json.\n. @davidfowl , squashed and rebased.\n. @davidfowl , just reproduced this problem, checked code and confirmed that we do aggressively parse options that K shouldn't consume. It's a bug of command-line parser.\n@desdesdes , thanks for reporting this bug. It will be fixed soon.\n. Yes, I confirmed that #479 is a dupe.\n. This is not needed anymore. We'll keep the original package layout (i.e. no configuration subfolder) for now.\n. Added unit tests.\n. Talked to @loudej and we are going to use --dth-port and KRE_DTH_SERVER\n. Had a discussion with @davidfowl , we will replace --appfolder with --wwwroot-out\n. Consulted with @Praburaj and it turns out this is caused by using alpha3 VS with alpha4 KRE. We should use tools in the same milestone. Using alpha3 VS with alpha3 KRE solves this problem.\n. @davidfowl , Attempting to resolve \"{0}\" is hidden behind --verbose option now. The issue for --quiet option is logged here #577 \n. Some background knowledge:\n1. kpm --verbose restore shows all information\n2. kpm restore hides Attempting to resolve \"{0}\" and dependency graph\n3. kpm restore --quiet hides Attempting to resolve \"{0}\", dependency graph and HTTP request/cache information\n. Changed based on @Eilon 's feedbacks. Now the Reports class has 3 properties: Information, Verbose and Quiet. If you want the WriteLine() operation to be affected by --verbose, pass in Verbose. If you want the WriteLine() operation to be affected by --quiet, pass in Quiet. The values of Verbose and Quiet are determined ahead of time, so there is no decision making logic in later methods.\n. Yeah, and the current behavior makes sense in some perspective:\nWhen ProjectA depends on ProjectB and you want to compile ProjectA, Roslyn only extracts the minimum knowledge that ProjectA needs from ProjectB. We don't need to know implementation details in ProjectB in order to build assemblies from ProjectA, so as long as interfaces in ProjectB look good, we can build ProjectA successfully.\nIf you want to check all compiler errors in ProjectB, you need to compile ProjectB. Compiling ProjectA only checks interfaces in ProjectB for you.\n. Looks good to me\n. @davidfowl , thanks for reviewing.\nPathUtility already has a helper IsSubdirectory() doing similar thing as my IsChildOfDir() and PathUtility.IsSubdirectory() was not used by any other code. So I modified IsSubdirectory() to IsChildOfDirectory() and added unit tests for it.\nActually, we didn't have any unit tests for PathUtility.cs. We should add them in some other PR later.\n. @davidfowl , fixed unit tests in the latest commit\n. @davidfowl , thank you for the hints. The latest commit is using data-driven test.\n. @jkyadav , simply do kpm restore for your project. You can check the usage of kpm restore with kpm help restore. BTW, kpm was renamed to dnu recently, so if you find kpm is unavailable, use dnu instead.\n. @davidfowl , I tested both on Windows and OSX, and kpm install Microsoft.AspNet.Mvc installed Microsoft.AspNet.Mvc.6.0.0-alpha4-10660, which is prerelease version. So please try again after this PR is merged.\n. @davidfowl , thanks for the feedbacks. I made env var KRE_APPBASE available on other platforms as well. The value of --appbase option can override the application base specified by KRE_APPBASE.\n. @davidfowl , thank you for the feedbacks. I followed the new design from you in the latest commit.\n@Eilon , I replaced hardcoded string with nameof() in classes related to my change.\n. @davidfowl , yes. One subarea not covered is kpm wrap <assembly>, which has a corresponding issue here: https://github.com/aspnet/dnx/issues/1415\n. @davidfowl @Eilon , thanks for feedbacks. Please check the latest commit.\n. Just verified. It's fixed.\n. Hi @davidfowl , I am working on #543 , which depends on this issue. Feel free to assign this one to me if you have other issues to work on :smile: \n. Sounds great! I can create an issue for it. For such an issue that affects all repositories, should I create it in Home repository?\n. @davidfowl , the change is minimal now\n. @davidfowl @Eilon , thanks for the feedbacks. I fixed them in the latest commit.\n. @davidfowl , added interaction between kpm pack and webroot property of project.json. So #541 is done in this PR, too.\n. @davidfowl , PackageRepository now has different behaviors in different contexts.\n. The definition of --wwwroot in issue #543 is:\n--wwwroot is the name of the directory in the project that will become the public folder in the packed image\nSo the value of --wwwroot is a relative path to project dir. {ProjectDir}\\. is {ProjectDir} itself, right?\n. @davidfowl , we do need this feature to be compatible with previous --appfolder feature, which packs the whole project directory as public app folder.\n. @davidfowl @lodejard , please sign off if you find it's Ok.\n. Hi @pranavkm , I am trying this change again but cannot find the class WebProxy in System.Net.Http.4.0.0.0 or System.Net.Primitives.4.0.10.0 package. When you was making this change, where did you find WebProxy, which is needed by kpm restore?\n. Buggy HttpClient from CoreCLR was preventing this from being done. I will try integrating the latest CoreCLR HttpClient to see whether it usable now.\n. @danroth27 talked to me and we should keep trying to integrate HttpClient from CoreCLR and filing bugs if we can catch any with dnu restore. Putting this to beta6.\n. Still waiting for bug fix from CoreCLR team: https://github.com/dotnet/corefx/issues/2168\nThe purpose of this task is testing HttpClient on CoreCLR and it is not an urgent issue. Moving to next milestone. @muratg \n. I tested and kpm pack MusicStore is re-writing project.json correctly. Please share your project.json and the command line you use to pack.\n. Rebased on top of the latest dev branch.\n. Thanks for the helpful feedbacks. I made improvement in the latest commit.\n. @davidfowl , changed to use single quotes in the JSON used to express dir layouts.\n. Fixed environment variable config and a bug\n. Verified. Project dir path and output dir path are normalized. The values of --runtime shouldn't be normalized because they might not be paths. That's all of paths in kpm pack.\n. Mark inaccessible remote sources as ignored and don't send any further HTTP requests to them.\n. Updated. Passing CSharpParseOptions instead of CompilationSettings.\n. @davidfowl , changed based on feedbacks. Also implemented the idea mentioned by you and @lodejard last Friday and successfully reduced the number of PackPackage instances.\n. Thanks for feedbacks. Fixed in the latest commit.\n. Thanks for comments. Fixed all problems.\n. @pranavkm , I had a look at xcopy and found that even you specify /Q, it still prints some information like\n1 File(s) copied\nSo we should keep the Reports.Information channel.\nThen what we should do here is to write all error information to Reports.Error (they were written to Reports.Information) and follow @davidfowl 's suggestion, leave all other output as is.\n. Thanks. Looks good to me :shipit: \n. @davidfowl , nice foresight. I did find some regression during more thorough tests. So here is a safer way to get rid of the troubles brought by greediness of regex match. Please check the updated commit.\n. The previous change introduced a regression that all folders containing dots (for example .git and ASP.NET) are excluded. Fixed the regression in the latest commit.\n. Good point. I will add functional tests for this after https://github.com/aspnet/KRuntime/pull/648 is checked in.\n. Just finalized the skeleton of functional tests in another PR. Tests for this PR is coming soon.\n. Functional test added\n. Added .git autoglobbing to autoglobbing test set.\n. @lukewaters , thank you for reporting this bug. I can reproduce it with your steps. @davidfowl , this bug is blocking EF team, please assign it to me if you think it's Ok.\n. Ah, I see. The rule is that we pack ALL files inside a wwwroot folder, so if the wwwroot folder is project root, we should copy all files in it to wwwroot of output.\n. No, I am still working on it. I'll let you guys know when it's ready.\n. Cannot reproduce with latest KRE.\nDo kvm upgrade and then restart your VS. Go through the steps and you can find the folders are correctly excluded from OUTPUT\\approot\\src\\PROJECT_NAME\\.\n. kpm build --quiet without errors:\n```\nPS C:\\Users\\wwa\\Documents\\ProjectK\\tmp\\KRuntime\\samples\\HelloWorld> kpm build --quiet\nBuilding HelloWorld for .NETFramework,Version=v4.5\nBuilding HelloWorld for K,Version=v1.0\nBuilding HelloWorld for Asp.Net,Version=v5.0\nBuilding HelloWorld for Asp.NetCore,Version=v5.0\nBuild succeeded.\n    0 Warnings(s)\n    0 Error(s)\nTime elapsed 00:00:02.5817524\n``\n.kpm build --quiet` with errors:\n```\nPS C:\\Users\\wwa\\Documents\\ProjectK\\tmp\\KRuntime\\samples\\HelloWorld> kpm build --quiet\nBuilding HelloWorld for .NETFramework,Version=v4.5\nC:\\Users\\wwa\\Documents\\ProjectK\\tmp\\KRuntime\\samples\\HelloWorld\\Program.cs(1,24): error CS1002: ; expected\nBuilding HelloWorld for K,Version=v1.0\nC:\\Users\\wwa\\Documents\\ProjectK\\tmp\\KRuntime\\samples\\HelloWorld\\Program.cs(1,24): error CS1002: ; expected\nBuilding HelloWorld for Asp.Net,Version=v5.0\nC:\\Users\\wwa\\Documents\\ProjectK\\tmp\\KRuntime\\samples\\HelloWorld\\Program.cs(1,24): error CS1002: ; expected\nBuilding HelloWorld for Asp.NetCore,Version=v5.0\nC:\\Users\\wwa\\Documents\\ProjectK\\tmp\\KRuntime\\samples\\HelloWorld\\Program.cs(1,24): error CS1002: ; expected\nBuild failed.\n    0 Warnings(s)\n    4 Error(s)\nTime elapsed 00:00:02.3676546\n```\n. Latest sample output:\n```\nPS C:\\Users\\wwa\\Documents\\ProjectK\\Universe\\KRuntime\\samples\\HelloWorld> kpm build\nLoaded Module: k\nFound DLL Export: CallApplicationMain\nBuilding HelloWorld for .NETFramework,Version=v4.5\nUsing Project dependency HelloWorld 0.1-beta-SNAPSHOT for .NETFramework,Version=v4.5\n  Source: C:\\Users\\wwa\\Documents\\ProjectK\\Universe\\KRuntime\\samples\\HelloWorld\\project.json\\\nUsing Project dependency HelloShared 0.1-beta-SNAPSHOT for .NETFramework,Version=v4.5\n  Source: C:\\Users\\wwa\\Documents\\ProjectK\\Universe\\KRuntime\\samples\\HelloShared\\project.json\\\nUsing Package dependency K.Roslyn 1.0.0-beta1-10133 for .NETFramework,Version=v4.5\n  Source: C:\\Users\\wwa.kpm\\packages\\K.Roslyn\\1.0.0-beta1-10133\\\nUsing Package dependency Microsoft.CodeAnalysis.Common 0.7.4101502-beta for .NETFramework,Version=v4.5\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.CodeAnalysis.Common\\0.7.4101502-beta\\\n  File: lib\\net45\\Microsoft.CodeAnalysis.Desktop.dll\n  File: lib\\net45\\Microsoft.CodeAnalysis.dll\nUsing Package dependency Microsoft.CodeAnalysis.CSharp 0.7.4101502-beta for .NETFramework,Version=v4.5\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.CodeAnalysis.CSharp\\0.7.4101502-beta\\\n  File: lib\\net45\\Microsoft.CodeAnalysis.CSharp.Desktop.dll\n  File: lib\\net45\\Microsoft.CodeAnalysis.CSharp.dll\nUsing Package dependency Microsoft.Bcl.Immutable 1.1.20-beta for .NETFramework,Version=v4.5\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.Bcl.Immutable\\1.1.20-beta\\\n  File: lib\\portable-net45+win8\\System.Collections.Immutable.dll\nUsing Package dependency Microsoft.Bcl.Metadata 1.0.12-alpha for .NETFramework,Version=v4.5\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.Bcl.Metadata\\1.0.12-alpha\\\n  File: lib\\portable-net45+win8\\System.Reflection.Metadata.dll\nUsing Assembly dependency gac/System.Collections 4.0.0.0 for .NETFramework,Version=v4.5\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5\\Facades\\System.Collections.\ndll\\\nUsing Assembly dependency gac/System.IO 4.0.0.0 for .NETFramework,Version=v4.5\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5\\Facades\\System.IO.dll\\\nUsing Assembly dependency gac/System.Runtime 4.0.0.0 for .NETFramework,Version=v4.5\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5\\Facades\\System.Runtime.dll\\\nUsing Assembly dependency gac/System.Xml 4.0.0.0 for .NETFramework,Version=v4.5\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5\\System.Xml.dll\\\nUsing Assembly dependency gac/System.Xml.Linq 4.0.0.0 for .NETFramework,Version=v4.5\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5\\System.Xml.Linq.dll\\\nUsing Assembly dependency gac/System.Threading.Tasks 4.0.0.0 for .NETFramework,Version=v4.5\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5\\Facades\\System.Threading.Ta\nsks.dll\\\nUsing Assembly dependency gac/System.Text.Encoding 4.0.0.0 for .NETFramework,Version=v4.5\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5\\Facades\\System.Text.Encodin\ng.dll\\\nUsing Assembly dependency gac/mscorlib 4.0.0.0 for .NETFramework,Version=v4.5\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5\\mscorlib.dll\\\nUsing Assembly dependency gac/System 4.0.0.0 for .NETFramework,Version=v4.5\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5\\System.dll\\\nUsing Assembly dependency gac/System.Core 4.0.0.0 for .NETFramework,Version=v4.5\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5\\System.Core.dll\\\nUsing Assembly dependency gac/Microsoft.CSharp 4.0.0.0 for .NETFramework,Version=v4.5\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5\\Microsoft.CSharp.dll\\\nBuilding HelloWorld for K,Version=v1.0\nUsing Project dependency HelloWorld 0.1-beta-SNAPSHOT for K,Version=v1.0\n  Source: C:\\Users\\wwa\\Documents\\ProjectK\\Universe\\KRuntime\\samples\\HelloWorld\\project.json\\\nUsing Project dependency HelloShared 0.1-beta-SNAPSHOT for K,Version=v1.0\n  Source: C:\\Users\\wwa\\Documents\\ProjectK\\Universe\\KRuntime\\samples\\HelloShared\\project.json\\\nUsing Package dependency K.Roslyn 1.0.0-beta1-10133 for K,Version=v1.0\n  Source: C:\\Users\\wwa.kpm\\packages\\K.Roslyn\\1.0.0-beta1-10133\\\nUsing Package dependency System.Console 4.0.0-beta-22215 for K,Version=v1.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Console\\4.0.0-beta-22215\\\n  File: lib\\contract\\System.Console.dll\nUsing Package dependency System.Linq 4.0.0-beta-22215 for K,Version=v1.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Linq\\4.0.0-beta-22215\\\n  File: lib\\contract\\System.Linq.dll\nUsing Package dependency System.Reflection 4.0.10-beta-22215 for K,Version=v1.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Reflection\\4.0.10-beta-22215\\\n  File: lib\\contract\\System.Reflection.dll\nUsing Package dependency System.Runtime 4.0.20-beta-22215 for K,Version=v1.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Runtime\\4.0.20-beta-22215\\\n  File: lib\\contract\\System.Runtime.dll\nUsing Package dependency System.Threading.Tasks 4.0.10-beta-22215 for K,Version=v1.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Threading.Tasks\\4.0.10-beta-22215\\\n  File: lib\\contract\\System.Threading.Tasks.dll\nUsing Package dependency System.ComponentModel 4.0.0-beta-22215 for K,Version=v1.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.ComponentModel\\4.0.0-beta-22215\\\n  File: lib\\contract\\System.ComponentModel.dll\nUsing Package dependency Microsoft.CodeAnalysis.Common 0.7.4101502-beta for K,Version=v1.0\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.CodeAnalysis.Common\\0.7.4101502-beta\\\n  File: lib\\portable-net45+win8\\Microsoft.CodeAnalysis.dll\nUsing Package dependency Microsoft.CodeAnalysis.CSharp 0.7.4101502-beta for K,Version=v1.0\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.CodeAnalysis.CSharp\\0.7.4101502-beta\\\n  File: lib\\portable-net45+win8\\Microsoft.CodeAnalysis.CSharp.dll\nUsing Package dependency System.IO 4.0.0.0 for K,Version=v1.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.IO\\4.0.0.0\\\n  File: lib\\contract\\System.IO.dll\nUsing Package dependency System.Collections 4.0.0.0 for K,Version=v1.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Collections\\4.0.0.0\\\n  File: lib\\contract\\System.Collections.dll\nUsing Package dependency System.Reflection.Primitives 4.0.0-beta-22215 for K,Version=v1.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Reflection.Primitives\\4.0.0-beta-22215\\\n  File: lib\\contract\\System.Reflection.Primitives.dll\nUsing Package dependency Microsoft.Bcl.Immutable 1.1.20-beta for K,Version=v1.0\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.Bcl.Immutable\\1.1.20-beta\\\n  File: lib\\portable-net45+win8\\System.Collections.Immutable.dll\nUsing Package dependency Microsoft.Bcl.Metadata 1.0.12-alpha for K,Version=v1.0\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.Bcl.Metadata\\1.0.12-alpha\\\n  File: lib\\portable-net45+win8\\System.Reflection.Metadata.dll\nUsing Package dependency System.Text.Encoding 4.0.10-beta-22210 for K,Version=v1.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Text.Encoding\\4.0.10-beta-22210\\\n  File: lib\\contract\\System.Text.Encoding.dll\nBuilding HelloWorld for Asp.Net,Version=v5.0\nUsing Project dependency HelloWorld 0.1-beta-SNAPSHOT for Asp.Net,Version=v5.0\n  Source: C:\\Users\\wwa\\Documents\\ProjectK\\Universe\\KRuntime\\samples\\HelloWorld\\project.json\\\nUsing Project dependency HelloShared 0.1-beta-SNAPSHOT for Asp.Net,Version=v5.0\n  Source: C:\\Users\\wwa\\Documents\\ProjectK\\Universe\\KRuntime\\samples\\HelloShared\\project.json\\\nUsing Package dependency K.Roslyn 1.0.0-beta1-10133 for Asp.Net,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\K.Roslyn\\1.0.0-beta1-10133\\\nUsing Package dependency Microsoft.CodeAnalysis.Common 0.7.4101502-beta for Asp.Net,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.CodeAnalysis.Common\\0.7.4101502-beta\\\n  File: lib\\net45\\Microsoft.CodeAnalysis.Desktop.dll\n  File: lib\\net45\\Microsoft.CodeAnalysis.dll\nUsing Package dependency Microsoft.CodeAnalysis.CSharp 0.7.4101502-beta for Asp.Net,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.CodeAnalysis.CSharp\\0.7.4101502-beta\\\n  File: lib\\net45\\Microsoft.CodeAnalysis.CSharp.Desktop.dll\n  File: lib\\net45\\Microsoft.CodeAnalysis.CSharp.dll\nUsing Package dependency Microsoft.Bcl.Immutable 1.1.20-beta for Asp.Net,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.Bcl.Immutable\\1.1.20-beta\\\n  File: lib\\portable-net45+win8\\System.Collections.Immutable.dll\nUsing Package dependency Microsoft.Bcl.Metadata 1.0.12-alpha for Asp.Net,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.Bcl.Metadata\\1.0.12-alpha\\\n  File: lib\\portable-net45+win8\\System.Reflection.Metadata.dll\nUsing Assembly dependency gac/System.Collections 4.0.10.0 for Asp.Net,Version=v5.0\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.3\\Facades\\System.Collection\ns.dll\\\nUsing Assembly dependency gac/System.IO 4.0.0.0 for Asp.Net,Version=v5.0\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.3\\Facades\\System.IO.dll\\\nUsing Assembly dependency gac/System.Runtime 4.0.20.0 for Asp.Net,Version=v5.0\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.3\\Facades\\System.Runtime.dl\nl\\\nUsing Assembly dependency gac/System.Xml 4.0.0.0 for Asp.Net,Version=v5.0\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.3\\System.Xml.dll\\\nUsing Assembly dependency gac/System.Xml.Linq 4.0.0.0 for Asp.Net,Version=v5.0\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.3\\System.Xml.Linq.dll\\\nUsing Assembly dependency gac/System.Threading.Tasks 4.0.10.0 for Asp.Net,Version=v5.0\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.3\\Facades\\System.Threading.\nTasks.dll\\\nUsing Assembly dependency gac/System.Text.Encoding 4.0.0.0 for Asp.Net,Version=v5.0\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.3\\Facades\\System.Text.Encod\ning.dll\\\nUsing Assembly dependency gac/mscorlib 4.0.0.0 for Asp.Net,Version=v5.0\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.3\\mscorlib.dll\\\nUsing Assembly dependency gac/System 4.0.0.0 for Asp.Net,Version=v5.0\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.3\\System.dll\\\nUsing Assembly dependency gac/System.Core 4.0.0.0 for Asp.Net,Version=v5.0\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.3\\System.Core.dll\\\nUsing Assembly dependency gac/Microsoft.CSharp 4.0.0.0 for Asp.Net,Version=v5.0\n  Source: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.3\\Microsoft.CSharp.dll\\\nBuilding HelloWorld for Asp.NetCore,Version=v5.0\nUsing Project dependency HelloWorld 0.1-beta-SNAPSHOT for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa\\Documents\\ProjectK\\Universe\\KRuntime\\samples\\HelloWorld\\project.json\\\nUsing Project dependency HelloShared 0.1-beta-SNAPSHOT for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa\\Documents\\ProjectK\\Universe\\KRuntime\\samples\\HelloShared\\project.json\\\nUsing Package dependency K.Roslyn 1.0.0-beta1-10133 for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\K.Roslyn\\1.0.0-beta1-10133\\\nUsing Package dependency System.Console 4.0.0-beta-22215 for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Console\\4.0.0-beta-22215\\\n  File: lib\\contract\\System.Console.dll\nUsing Package dependency System.Linq 4.0.0-beta-22215 for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Linq\\4.0.0-beta-22215\\\n  File: lib\\contract\\System.Linq.dll\nUsing Package dependency System.Reflection 4.0.10-beta-22215 for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Reflection\\4.0.10-beta-22215\\\n  File: lib\\contract\\System.Reflection.dll\nUsing Package dependency System.Runtime 4.0.20-beta-22215 for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Runtime\\4.0.20-beta-22215\\\n  File: lib\\contract\\System.Runtime.dll\nUsing Package dependency System.Threading.Tasks 4.0.10-beta-22215 for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Threading.Tasks\\4.0.10-beta-22215\\\n  File: lib\\contract\\System.Threading.Tasks.dll\nUsing Package dependency System.ComponentModel 4.0.0-beta-22215 for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.ComponentModel\\4.0.0-beta-22215\\\n  File: lib\\contract\\System.ComponentModel.dll\nUsing Package dependency Microsoft.CodeAnalysis.Common 0.7.4101502-beta for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.CodeAnalysis.Common\\0.7.4101502-beta\\\n  File: lib\\portable-net45+win8\\Microsoft.CodeAnalysis.dll\nUsing Package dependency Microsoft.CodeAnalysis.CSharp 0.7.4101502-beta for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.CodeAnalysis.CSharp\\0.7.4101502-beta\\\n  File: lib\\portable-net45+win8\\Microsoft.CodeAnalysis.CSharp.dll\nUsing Package dependency System.IO 4.0.0.0 for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.IO\\4.0.0.0\\\n  File: lib\\contract\\System.IO.dll\nUsing Package dependency System.Collections 4.0.0.0 for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Collections\\4.0.0.0\\\n  File: lib\\contract\\System.Collections.dll\nUsing Package dependency System.Reflection.Primitives 4.0.0-beta-22215 for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Reflection.Primitives\\4.0.0-beta-22215\\\n  File: lib\\contract\\System.Reflection.Primitives.dll\nUsing Package dependency Microsoft.Bcl.Immutable 1.1.20-beta for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.Bcl.Immutable\\1.1.20-beta\\\n  File: lib\\portable-net45+win8\\System.Collections.Immutable.dll\nUsing Package dependency Microsoft.Bcl.Metadata 1.0.12-alpha for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\Microsoft.Bcl.Metadata\\1.0.12-alpha\\\n  File: lib\\portable-net45+win8\\System.Reflection.Metadata.dll\nUsing Package dependency System.Text.Encoding 4.0.10-beta-22210 for Asp.NetCore,Version=v5.0\n  Source: C:\\Users\\wwa.kpm\\packages\\System.Text.Encoding\\4.0.10-beta-22210\\\n  File: lib\\contract\\System.Text.Encoding.dll\nHelloWorld -> C:\\Users\\wwa\\Documents\\ProjectK\\Universe\\KRuntime\\samples\\HelloWorld\\bin\\Debug\\HelloWorld.0.1-beta-SNAPSHO\nT.nupkg\nHelloWorld -> C:\\Users\\wwa\\Documents\\ProjectK\\Universe\\KRuntime\\samples\\HelloWorld\\bin\\Debug\\HelloWorld.0.1-beta-SNAPSHO\nT.symbols.nupkg\nBuild succeeded.\n    0 Warnings(s)\n    0 Error(s)\nTime elapsed 00:00:02.5292067\n``\n. Yes, I have a branch for this issue and it's exactly the same implementation as this one. However, this implementation doesn't work if you specifykpm restore --proxy {ADDRESS}. It looks like a bug in CoreCLR. I filed a bug in TFS and CoreCLR team is looking at it.\n. @davidfowl , when they use.aswwwrootand don't give value ofwwwroot-out, do we want to have a default value forwwwroot-out`?\n. I guess it's already covered by the following unit test:\nhttps://github.com/aspnet/KRuntime/blob/dev/test/Microsoft.Framework.Runtime.Tests/ProjectFacts.cs#L309\n. When I have a corrupted xml file in my HTTP cache, it shows:\nThe xml file C:\\Users\\wwa\\AppData\\Local\\kpm\\cache\\f6ef4a2a3766290586abcb06f1b2c18aac1389eb$myget.org_F_aspnetmaster_api_\nv2_\\list_System.IO_page1.dat is corrupted\nWhen I have a corrupted nupkg file in my HTTP cache, it shows:\nThe zip archive C:\\Users\\wwa\\AppData\\Local\\kpm\\cache\\f6ef4a2a3766290586abcb06f1b2c18aac1389eb$myget.org_F_aspnetmaster_a\npi_v2_\\nupkg_System.IO.4.0.0.0.dat is corrupted\n. This change was approved for Beta. I removed k.ini generation and added functional tests.\n@davidfowl  @GrabYourPitchforks , please help to review when you have time. Thanks.\n. Another pending PR #825 introduces a lot of changes conflicting with this PR. Will rebase this PR after #825 is merged to dev.\n. @davidfowl , thanks for the feedback.\n- Rebased on top of the latest dev branch\n- Mark bash scripts as executable when kpm pack on *nix\n. @davidfowl , removed .sh extension from names of generated bash files\n. @davidfowl , thanks for the feedbacks. Please check the latest commits.\n. @davidfowl , some functional test utils added in this PR can be handy when adding functional tests for kpm wrap. Please sign off at your earliest convenience.\n. @davidfowl , we should merge this in before merging #956 in.\n. @Eilon @muratg  @davidfowl @lodejard , I think we need this for beta2. Please help to review and sign off. Thanks.\n. Thanks for signing off. Will merge this when CI can pass.\n. First of all, you have a dependency Microsoft.Framework.CommandLineUtils, which is a project internally used by KRuntime. @davidfowl , users can restore Microsoft.Framework.CommandLineUtils package from myget. Do we want this?\nAnd it does hit a bug of kpm pack :+1: \n@davidfowl , remembe we trim the output packages of \"kpm pack\" to optimize publishing experience. We shouldn't cut shared folder in nuget packages. Adding shared to the special case list can fix this problem.\nhttps://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.PackageManager/Packing/PackPackage.cs#L62\n. Ok, so it's not a bug. Not sure whether we want to support this scenario. We may need some further discussion. I'll leave this issue open as a reminder.\n. bootstrapper-version has nothing to do with the KRE being packed. bootstrapper-version is the version of Microsoft.AspNet.Loader.IIS.Interop used by the project being packed.\nI checked and found Microsoft.AspNet.Loader.IIS.Interop.1.0.0-beta2-10535 does exist in package feeds.\n@victorhurdugaci, could you please reproduce the problem and open your packages folder to check whether you have Microsoft.AspNet.Loader.IIS.Interop.1.0.0-beta2-10535 there? If you have this package, the behavior of kpm pack is correct.\n. It's an expected behavior, not a bug.\n. Here are details @davidfowl wants to add:\nFor each dependency kpm fails to resolve, show a line from full dependency graph that contains the failed dependency. Also mark dependency types on the dependency line.\nExample:\nFailed to resolve dependency 'FailedDependency.1.0.0' on the following path:\nMainProject.1.0.0 (Project) -> DependencyA.6.0.0 (Project) -> DependencyB.1.0.0 (Package) -> FailedDependency.1.0.0\n(FailedDependency.1.0.0 is in red above)\n. We have kpm list as a replacement of this feature.\n. Will add tests for this based on the common functional test utils added in PR #788 , which is pending for sign off.\n. Not needed any more, discarding\n. Thank @davidfowl for the suggestions on formatting. Looks much better now. Please help to review.\n. New kpm pack format:\n(1) Packing package dependency\n\n(2) Packing project dependency\n\n. kpm -h is supposed to show help information of kpm itself. To see help info of a subcommand, you should do kpm pack -h, which follows the most common convention.\nMoreover, we have instructions in the last line of help info clearly saying\nUse \"kpm help [command]\" for more information about a command.\nSo you can also do kpm help pack for help info of this subcommand.\n. @davidfowl , this fix is for Beta1. Please help to review at your earliest convenience. Thanks.\n. This regress was introduced when making k without argument/option return non-zero exit code.\n. Adding test for this means: 1. Adding one more test project; 2. Extract common utils from functional tests for kpm and create a shared utils class library.\nThis change should be checked in soon and I will add tests in another PR.\n. Merged\n. Added comments and file matching tests with files without extensions.\n. Test for kpm pack --wwwroot . is already there: https://github.com/aspnet/KRuntime/blob/dev/test/Microsoft.Framework.PackageManager.FunctionalTests/KpmPackTests.cs#L32\nI can add tests for kpm pack --wwwroot <Absolute_Path_To_Project_Root>. The problem is whether we want to support it. Please see my last email to you and Troy.\n. dup of #807 . It's already fixed. Please make sure you are using the latest build of KRE.\n. This was fixed in some previous changes. Couldn't reproduce with latest DNX:\n\nWe might want to add --nologo, which can hide the header print by dnu:\nMicrosoft .NET Development Utility CLR-x86-1.0.0-beta6-12189\nHowever, as we currently don't find it useful, let's close this for now and reopen the issue when users ask for it explicitly.\n. Seems we should do something for NuGetPackageFolder similar to what we have done for PackageFeed: https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.PackageManager/Restore/NuGet/PackageFeed.cs#L196\n. Cannot reproduce with an ASP.NET 5 Starter Web app. I got a correct web.config with\nkpm pack --no-source --runtime KRE-CLR-x86.1.0.0-beta1\nxml\n<configuration>\n  <appSettings>\n    <add key=\"kpm-package-path\" value=\"..\\approot\\packages\" />\n    <add key=\"bootstrapper-version\" value=\"1.0.0-beta1\" />\n    <add key=\"kre-package-path\" value=\"..\\approot\\packages\" />\n    <add key=\"kre-version\" value=\"1.0.0-beta1\" />\n    <add key=\"kre-clr\" value=\"CLR\" />\n    <add key=\"kre-app-base\" value=\"..\\approot\\packages\\WebApplication1\\1.0.0-SNAPSHOT\\root\" />\n  </appSettings>\n</configuration>\n@ianhong , please share the version of KRE, the command line and the app (if possible) you used.\n. Checked with @ianhong and we think this bug doesn't exist anymore.\n. Cannot reproduce with latest version of kpm. Seems fixed in latest dev branch.\n. BTW, kpm bundle doesn't read output folder, so existence of a certain folder in output shouldn't affect behavior of kpm bundle\n. Thanks for the feedback. Most of them are fixed in the follow up commits. I have one question regarding\n- The changes to project.json should be incremental (don't update things if they are already there etc). Do the minimal amount of work.\nSo if a user\n1. Install EntityFramework version 6.1.1 NuGet package for a csproj\n2. kpm wrap the csproj\n3. Update EntityFramework package used by the csproj to version 7.0.0\n4. kpm wrap the csproj again\nI think in this case we should update the version of EntityFramework in project.json even it's already there. Can you give an example where we shouldn't update if a value already presents in project.json?\n. Which build are you looking at? I cannot find KRuntime mono build running on CI (TeamCity).\n. I tried building the latest dev branch of KRuntime on Mono and confirmed that my change doesn't break KRuntime Mono build.\n. Sample output:\n\n. Can get chains a little bit deeper by disabling nugget.org as package feed and restore for MusicStore/dev\n\n. Added spacing between dependency chains\n\n. @davidfowl , does the latest output format look good enough?\n. 1. Only show failed dependency chains when --verbose is specified\n2. Use real right arrows (see screenshot below)\n\n. @davidfowl , we should make this extremely helpful feature available to our users :smile: Please help to review the latest output at your earliest convenience.\n. @pranavkm , do you think this output is good enough to help you with diagnostics?\n. @Eilon @muratg @davidfowl , this is a simple but useful feature that we want in beta2. Please help to review and sign off.\n. Yeah, this is helpful but might not be critical for beta2. Do we want to broadcast it to our team and let people vote for it? If someone feels super strongly we should take it, he/she might stand out and say something for it :smile: \n. I see. Thank you :smiley: \n. Yes, kpm list can be the replacement.\n. It was EOL problem. Fixed.\n. @davidfowl , I couldn't build KRuntime on Lou's Mac mini with a fresh clone of KRuntime/dev. I got an Win32Exception saying: cannot find the file batchcopy.sh to execute\nI guess we have some different configurations even we are both on OSX.\n. @davidfowl is right, I was using old KRE, which doesn't understand script section. The problem is gone after kvm upgrade.\n. Verified. ResxResourceProvider.GetResources doesn't honor exclude pattern.\nhttps://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.Runtime.Roslyn/ResxResourceProvider.cs#L19\n. @troydai , do you have time to look at this issue? I guess we can fix it with your nice file globbing library :smile: \n. Rebased on top of the latest dev branch\n. Thanks to @pranavkm 's nice hint on MSBuild target injection. I found a property CustomAfterMicrosoftCommonTargets, which can be used to inject arbitrary target file into the csproj being built.\n@davidfowl @loudej , the only ugly part of this approach is gone now!\n. kpm --verbose wrap without any error:\n\n. kpm wrap with MSBuild error:\n\n. kpm --verbose wrap with MSBuild error:\n\n. Made assembly/pdb paths config-agnostic in the latest commits.\n. Here is an example of generated project.json:\njson\n{\n  \"version\": \"1.0.0-*\",\n  \"frameworks\": {\n    \"net40\": {\n      \"wrappedProject\": \"../../ClassLibrary1/ClassLibrary1.Net40.csproj\",\n      \"bin\": {\n        \"assembly\": \"../../ClassLibrary1/obj/debug/ClassLibrary1.dll\",\n        \"pdb\": \"../../ClassLibrary1/obj/debug/ClassLibrary1.pdb\"\n      }\n    },\n    \"net45+win+wpa81+wp80\": {\n      \"wrappedProject\": \"../../ClassLibrary1/ClassLibrary1.PCL.csproj\",\n      \"bin\": {\n        \"assembly\": \"../../ClassLibrary1/obj/debug/ClassLibrary1.dll\",\n        \"pdb\": \"../../ClassLibrary1/obj/debug/ClassLibrary1.pdb\"\n      }\n    }\n  }\n}\n. Looks like this is a part of #955 \n. :shipit: after adding names for path separator arguments. Thank you for your contribution.\n. I'll make the changes and merge the PR. Thanks for reminding :smile: \n. Hi @Tragetaschen , if you build this branch with build.cmd verify, you'll find that it doesn't pass functional tests for kpm pack because functional tests should also be updated. Please help to update functional tests when you make changes to KRuntime. Thanks :smile: \nI modified functional tests for your changes and sent a new PR #946 , in which your commit is still credited.\n. kpm wrap --target-json <PATH> might be a bad design. Think about the following usage:\nkpm wrap ./LibraryA.dll --target-json ./LibraryB/project.json\nWe are putting the wrapper project.json of LibraryA.dll into a folder named LibraryB. It makes the project name inconsistent with assembly name.\nOne more drawback: you can only specify the path to wrapper project.json of the csproj being wrapped. If the csproj has several csproj references, the references are still wrapped to the default location like <root_dir>/wrap. This can be confusing.\nProposal:\nWe can instead have an option named --wrap-folder. So if you type\nkpm wrap ./LibraryA.dll --wrap-folder ./LibraryB\nwe will generate ./LibraryB/LibraryA/project.json. All references are wrapped to given wrap-folder, too. And the default value of --wrap-folder is <root_dir>/wrap.\n@davidfowl @lodejard , please share your thoughts. Thanks.\n. @davidfowl @lodejard , should I go ahead with my proposal above?\n. Talked to @davidfowl and we think it needs further discussion. Leave it pending here for now.\n. We might want to use a different approach to wrap an assembly. @davidfowl 's idea is:\nkpm packages add/make <assembly>.\nWe won't have this in beta3.\n. @gulbanana , after we have this command, it's possible that VS uses it as an underlying command to implement that.\nHi @PradeepKadubandi , does Tooling team have any plan for the feature mentioned by @gulbanana above?\n. Talked to @davidfowl , we the generated wrapper project.json should be in <rootDir>/wrap/<assemblyName>. <rootDir> should be resolved using Directory.GetCurrentDirectory() as a start point.\n. Dup of https://github.com/aspnet/DNX/issues/1316\n. Merged to release branch and ported back to dev\n. Looks like the functionality of kpm build --out-packages should be put to an individual command, instead of an option.\n@lodejard , do you have any suggestion of the name of this new command?\n@davidfowl doesn't like kpm build-feed.\nMy proposal is kpm feed build because it naturally falls into the category of kpm feed. You can do kpm feed build, followed by a kpm feed push, and later kpm feed pull.\n. Talked to @lodejard . This topic needs more efforts to make sure consistent experience. We might want to move this out of beta2 milestone for further discussion.\n. Merged and updated StackOverflow answer: http://stackoverflow.com/a/27284672/1560415\n. @davidfowl , do we want to do the following thing?\nkpm pack <csproj_path> --in-place also checks whether <csproj_path> is inside sources dirs specified in global.json. If not, we add it into sources of global.json.\nSometimes it can be confusing if a user does a successful kpm wrap --in-place but he still failed to reference the wrapped project, when he forgets to add the project dir into global.json sources.\n. Maybe it's nice to have no line longer than 120 characters. I saw this requirement in old engineering guidelines but I cannot find that requirement anymore. @Eilon , do we still want to follow that convention?\nAll other parts look good to me.\n. shared folder is a build time dependency. We should cut it when packing.\n. Copy shared folder when '--no-source' is not given.\n. @davidfowl , this is for Beta3. Please sign off at your earliest convenience.\n. We need to do this in release branch. Please checkout https://github.com/aspnet/XRE/pull/1125\n. 1. Took reaction in MusicStore: https://github.com/aspnet/MusicStore/pull/303\n2. Talked to @troydai and learned that test apps under Perf are using project root as wwwroot. (kpm pack --wwwroot .). So Perf repo is not impacted.\n3. Talked to @victorhurdugaci , apps under EndToEnd repo are not kpm packed. So it's not impacted.\n4. KExpense already puts its web.config in wwwroot.\nSo this PR is ready to go.\n. Here is an example marking a dependency as dev component: https://github.com/aspnet/Signing/blob/abe67b657b1d0306976d9ddbe77136f9ab5a82a8/src/Microsoft.Framework.Signing/project.json#L4\n. I guess there is no further work needs to be done\n. Looks good to me.\nHowever, I have no idea whether we want crossgen on nix. /CC @davidfowl .\nOne hint is that, if we don't want a feature on nix, we should hide the option/command with\nc#\nif (!PlatformHelper.IsMono)\n. We have a new command, kpm list, which can show full dependency graph of a project. Upgrade your runtime and run kpm list in the project, you'll get output in the format of:\nDependencyX ->\n    ProjectA, PackageB, ... (a list of packages/projects that bring DependencyX in)\n@davidfowl , kpm list makes the kpm -v restore graph useless. I think we can remove kpm -v restore graph now: #1126\n. Closing this issue since it's not valid anymore. Any further issue will be filed under the topic kpm list\n. @davidfowl , thanks for the feedbacks. Please check the latest commits.\n. Talked to @Praburaj and here is a summary:\nIf we take the current PR, local feeds and remote feeds will have inconsistent behaviors.\nLocal feeds: if not accessible, always show warning and skip it\nRemote feeds: if not accessible, kpm restore exits with errors; if not accessible but --ignore-failed-sources is given, show warning and skip it\nI think @Praburaj is right. It's ideal if local feeds and remote feeds have consistent behaviors. However, with a nonexistent folder, we cannot determine type of the local feed (KpmPackageFolder or NuGetPackageFolder) so we cannot proceed to the next step of kpm restore. To have the same behavior as remote feeds, we can create a class NonexistentPackageFolder : IPackageFeed, in which FindPackagesByIdAsync throws exception when `--ignore-failed-sources is not given.\n. Made behaviors of local feeds more consistent with remote feeds:\n- When kpm restore from nonexistent local feed:\n  \n\n- When kpm restore --ignore-failed-sources from nonexistent local feed, we give a warning and ignore the failed feed:\n  \n. @Praburaj , the output above is using the same color code as remote feed error messages. If we want to change the color code, we should change both local and remote feeds in a separate PR. Please create an issue for it if you feel strongly. Thanks.\n. Will do all these change at once under the issue: #967 \n. Need a rebase after https://github.com/aspnet/XRE/pull/1117 is checked in.\n. We will do this in release branch. Please check the new PR: #1124 \n. Here is a sample usage of kpm packages add\n\n. For kpm packages add, default packages folder is resolved using the same rule used by kpm restore and ApplicationHost:\nhttps://github.com/aspnet/KRuntime/pull/1049/files#diff-fa82ecb769cec4e2d106d90e2c75cd79R25\n. Looks safe to use :+1: \n. Found a bug:\n\nFixed in the latest commit. After fix:\n\n. Merged the help info in the latest commit:\n\nNow running ApplicationHost without any argument doesn't give help info:\n\nNote that some options only applies to ApplicationHost case. If you are running an assembly with an incompatible option:\n\n. I would suggest that we do https://github.com/aspnet/KRuntime/issues/1071 in this PR because help info of klr on Mono now is\n```\nUsage: klr [options]\nOptions:\n  --appbase                  Application base directory path\n  --lib                 Paths used for library look-up\n  -?|-h|--help                     Show help information\n  --version                        Show version information\n  --watch                          Watch file changes\n  --packages          Directory containing packages\n  --configuration   The configuration to run under\n  --port                     The port to the compilation server\n```\n--appbase should be available on Mono, as the help info suggested.\n. Added --appbase for klr on Mono.\nTested with the following test cases, on both Windows and *nix:\nklr\nklr foo\nklr --foo\nklr --port\nklr --port 8888\nklr .\\ConsoleApp\nklr .\\ConsoleApp run\nklr --appbase .\\ConsoleApp .\\ConsoleApp run\nklr --port 8888 .\\ConsoleApp run\nklr --watch .\\ConsoleApp run\nklr --port 8888 --watch .\\ConsoleApp run\nklr .\\ConsoleApp\\bin\\Debug\\aspnet50\\ConsoleApp.dll\nklr --appbase .\\ConsoleApp .\\ConsoleApp\\bin\\Debug\\aspnet50\\ConsoleApp.dll\nklr --watch .\\ConsoleApp\\bin\\Debug\\aspnet50\\ConsoleApp.dll\n@davidfowl , please check the latest commit and sign off.\n. Rebased and fixed naming (using runtime instead of dotnet)\n. Some variables are stilling using the term dotnet instead of runtime. For exmaple, DotnetHomeDir, this variable is related to the DOTNET_HOME environment variable and I want to keep some consistency.\n. @davidfowl @muratg , please check the two new commits\n. Thanks for @anurse 's feedbacks. Fixed in the latest commit.\n. Will add support for DOTNET_APPBASE after rebase #1087 on top of this one\n. Rebased on top of @anurse 's change to get rid of annoying resource file changes. Also reverted resource files changes.\n. kpm help packages: shows help info of packages, which is a subcommand of kpm. In this case, help is a subcommand of kpm command.\nkpm packages help add shows help info of add, which is a subcommand of kpm packages. In this case, help is a subcommand of kpm packages command.\nkpm help packages add is invalid because the subcommand help of kpm only accepts one argument, which should be one of its peers (a subcommand of kpm).\nThe behavior is well-defined and consistent. But seems people don't like this consistency because it's not intuitive enough. @davidfowl , do we want to remove help subcommand and only use --help|-h option?\n. I thought I might be able to check in before beta3 branching. Sent a new PR: #1123\n. @davidfowl , this is fixing a bug in beta3 release branch.\n. @davidfowl \nThis one has a lot of conflicts with https://github.com/aspnet/XRE/issues/955. It's much easier to work on https://github.com/aspnet/XRE/issues/955 after this PR is checked in.\nPlease sign off at your earliest convenience. Thanks.\n. Rebased on the latest release branch. Fixed conflicts introduced by renaming.\n@davidfowl , do we still want this in beta3?\n. :shipit: \n. What's the runtime version and OS used? Cannot reproduce with dotnet-clr-win-x86-1.0.0-beta4-10991.\n\nBTW, just a small clarification, k wasn't renamed, klr was renamed to dotnet.\n. Checked dotnet.mono.managed.dll with reflector. Seems we forget to specify version info when building this dll:\n\n. Thanks for the feedback. Please check the updated commit.\n. @davidfowl , please check the updated commit. I verified both kpm bundle and kpm bundle --no-source with wrapped assembly\n. Wrong target branch. Will send a new PR.\n. This one is targeting release branch.\n. Thanks for the feedback. Please check the latest commits. Using constants to make future renaming much easier.\n. Microsoft.Framework.Runtime.EnvironmentNames contains names of environment variables, like KRE_TRACE.\nMicrosoft.Framework.Runtime.Constants contains all other frequently used strings, like project names (kre.clr, kre.coreclr and kre.host).\n. :shipit: \n. Thanks for the reminder. Fixed kre.coreclr.cpp and filed an issue.\n. Closing this because we will have this in next milestone. New PR targeting dev branch is at: https://github.com/aspnet/XRE/pull/1165\n. When doing kpm bundle, we want to exclude folders starting with a dot, for example .git folder.\nCheck Project._defaultBundleExcludePatterns, which contains @\"**\\.*\\**\". We need a test for this pattern.\n. :shipit: \n. @davidfowl \nAssembly.GetReferencedAssemblies() is not available in CoreCLR. So we are unable to calculate the minimal runtime assembly closure on CoreCLR.\nAs a temporary workaround, I am copying all runtime assemblies if current kpm bundle --one-folder is running on CoreCLR.\n. @BrennanConroy , you need to tag an issue as Done after you finish it. We will generate release notes based on tags :smile: \n. @davidfowl , it's better to finish this before adding new tests. Tests for kpm bundle --no-source will come after this today.\n. We chose another way to represent dir structures. Closing this.\n. Yeah, we are using this syntax to avoid ambiguity.\nThink about usage kpm pack [options] [argument]. [argument] is the path to project root. If we support kpm --framework <framework1> <framework2>, how do we know whether <framework2> is a name of framework, or path to project root?\n. :shipit: \n. :shipit: \n. Yes, we should follow the original approach and put the string in exception message.\n. One more change is needed: when this change https://github.com/aspnet/XRE/commit/4a7994d226513397196928fd708780a307c9f5f5 passes Coherence-Signed, we need to update metaprogramming to use IProjectContext\n. Thanks for using the same layout :+1: \n. Looks good to me :+1: \n. WARNING from @davidfowl : if not implemented properly, this globbing can hurt performance. Please remember to expand the pattern at most once in ProjectResolver.\n. Our FileSystemGlobbing package doesn't support globbing directories. Although we can implicitly append /*/project.json, this workaround leads to suboptimal performance that we want to avoid.\nI filed an issue for adding directory globbing: https://github.com/aspnet/FileSystem/issues/118\n. :shipit: \n. @davidfowl , reacted to feedback in the last commit. NuGetDependencyResolver is using SHAs from lockfile now.\n. Got a personal sign-off from @davidfowl \n. :shipit: \n. Done in https://github.com/aspnet/XRE/commit/682efc74c9e32dac4b9055878abef97e448a6c59\n. Added tag and PR reference\n. We added SHA values to lock file in a recent change. Old lock file doesn't have SHAs. Delete all your old lock files and restore to generate new lock files.\n. Optimized. It's so fast that dotTrace cannot capture IsValidLockFile :smile: \n\n. Will port to NuGet repo after this one gets sign-off\n. Fixed class naming\n. Made code review changes\n. Got personal sign-off from @davidfowl , pushing to dev\n. Local tests passed. Pushing to dev.\n. Convert path separators back to Path.DirectorySeparator when reading lockfile. This is the easiest way to resolve introduced bugs. Need to check startup performance impact.\n. Verified with dotTrace on MusicStore project. This change doesn't have observable impact on performance of lockfile reading. \n. Yeah, just rebased and did build verify. Please sign off.\n. Thanks for the sign-off. It's better to rebase this PR after https://github.com/aspnet/DNX/pull/1404 is merged in.\n. From @davidfowl : this is a good change to practice lock file versioning. We can push this PR after we have version check for lockfile\n. Just verified, this PR doesn't fix the issue #1410 . If using path separator of current OS can cause an issue, it will only happen when we kpm restore on one OS and move the app to another OS to run it.\nNeed further investigation in issue #1410 \n. I'll start to work on this item today.\n. @abpiskunov  @sayedihashimi  @BillHiebert  @muratg \nThis feature is checked in. Tooling team can integrate it with VS based on next build of DNX. Usage:\nkpm wrap <path_to_assembly> --framework <target_framework_name>\nThis command assumes its work dir is in the solution, in which we want to reference the wrapped assembly.\nThe command also automatically wraps dependency assemblies of the wrapped assembly if they are in the same dir.\n. Verified on Mono and it works well\n. Thanks for signing off. It's not an urgent change, so I guess it's better to check in next Monday after renaming.\n. Add TODO comments saying that legacy names should retire later. Then :shipit: \n. :shipit: \n. This was merged to dev: https://github.com/aspnet/XRE/commit/8ccf9867fc562fbc9ba8148b9f6fc0aa165bdb62 https://github.com/aspnet/XRE/commit/41c2b4f1e245739a24340ac2fbd11d25351bb1fd\n. Yeah, I tested it. Thanks.\n. :shipit: \n. Found a problem after pushing to CI.\nThe fix #1324 has a bug. When kpm restore to a remote folder, Directory.Move() the temp folder from current machine to the remote machine throws exception:\nSystem.IO.IOException: Source and destination path must have identical roots. Move will not work acr\noss volumes.\n. This can be frequently reproduced with a VM with following configuration:\nOS: Windows 7 Enterprise (EN-US)\nHardware: CPU=2, RAM=3584, Arch=AMD64\n. This needs rebasing. @lefb766 , thank you for your contribution but I have to create a new PR for this issue.\n. Dup of https://github.com/aspnet/DNX/issues/1378\n. Merged: https://github.com/aspnet/dnx/commit/9601089907efc6cba1d82b4dfb938c7abb8fbaa6\n. Sample usage:\n\nThen you get:\n(1) <RootDir>/wrap/ClassLibrary1/project.json:\njson\n{\n  \"version\": \"1.0.0-*\",\n  \"frameworks\": {\n    \"dnx451\": {\n      \"bin\": {\n        \"assembly\": \"../../../libs/ClassLibrary1.dll\",\n        \"pdb\": \"../../../libs/ClassLibrary1.PDB\"\n      },\n      \"dependencies\": {\n        \"ClassLibrary2\": \"1.0.0-*\",\n        \"CLASSLIBRARY3\": \"1.0.0-*\"\n      }\n    }\n  }\n}\n(2) <RootDir>/wrap/ClassLibrary2/project.json:\njson\n{\n  \"version\": \"1.0.0-*\",\n  \"frameworks\": {\n    \"dnx451\": {\n      \"bin\": {\n        \"assembly\": \"../../../libs/ClassLibrary2.dll\",\n        \"pdb\": \"../../../libs/CLASSLibrary2.pdb\"\n      }\n    }\n  }\n}\n(3) <RootDir>/wrap/CLASSLIBRARY3/project.json:\njson\n{\n  \"version\": \"1.0.0-*\",\n  \"frameworks\": {\n    \"dnx451\": {\n      \"bin\": {\n        \"assembly\": \"../../../libs/CLASSLIBRARY3.DLL\",\n        \"pdb\": \"../../../libs/CLASSLIBRARY3.PDB\"\n      }\n    }\n  }\n}\n. Made code review changes. Also fixed one more bug, the current behavior is:\nAssume AssemblyA.dll has a dependency AssemblyB.dll in its dll metadata.\nWhen kpm wrap AssemblyA.dll and we find a sibling assembly with name ASSEMBLYB.DLL, we treat it as a dependency and also generate a wrapper project for it. The generated wrapper project is AssemblyB instead of ASSEMBLYB. That means, we detect dependency assembly with case-insensitive string comparison but the wrapper project's name is determined by metadata in dependee.\n. The final behavior above is consistent with dll reference operation in VS2013. In VS2013, assume AssemblyA.dll has a dependency AssemblyB.dll in its metadata. When adding assembly reference to AssemblyA.dll, if VS2013 finds ASSEMBLYB.DLL in the same dir, it will also copy ASSEMBLYB.DLL to local bin dir and rename it to AssemblyB.dll. So the dependency detection is case-insensitive and final dependency name is determined by metadata of AssemblyA.dll.\n. Let's check this in if reviewers give sign-off so that Tooling team can work on this feature ASAP. Adding functional tests for this can be tracked at https://github.com/aspnet/dnx/issues/1415\n. @davidfowl , I guess you are talking about this: https://github.com/aspnet/dnx/pull/1136 (kpm bundle automatically \"no-source\" wrapper project)\n. No, because MSBuild is not available on *nix, we made kpm wrap unavailable on Mono: https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.PackageManager/Program.cs#L505\nBut, yeah, we can divide kpm wrap into two pieces, kpm wrap <csproj> is only available on Windows, while kpm wrap <assembly> is available on all platforms. I'll add that part soon.\n. @davidfowl , made kpm wrap <assembly> available on Mono. Also did verification on Mono and it works well.\n. Let's get this in if reviewers find Ok. I think Tooling team wants this feature ASAP. @davidfowl @muratg @lodejard \n. This was fixed by the PR fixing https://github.com/aspnet/dnx/issues/1726\ndnu packages add now checks SHA of the package and overwrites installed package if SHAs don't match. <PackageName>.symbols.nupkg has different SHA as <PackageName>.nupkg, so we have the desired behavior now:\n\n. I checked in #1299 , however, that PR doesn't fix this issue. Need further investigation in this issue.\n. Got personal sign-off from @davidfowl \n. Just got suggestion from @davidfowl , we will keep kpm.cmd and add dnu.cmd to have a gradual adoption of dnu.cmd. This can make the transition easier.\n. The first stage is done. We are supporting both kpm and dnu now. This should allow a non-breaking transition.\nHowever, we should force adoption of dnu and remove support of kpm at some point later.\n@muratg , moving to next milestone.\n. @muratg , @davidfowl decides that we do this now. Moving back to beta4 and working on it.\n. Hi @xtianus79 , you should be able to find official announcements for breaking changes in our https://github.com/aspnet/Announcements repo.\nFor this specific topic:\nhttps://github.com/aspnet/Announcements/issues/4\n. Very nice! :+1:  :shipit: \n. Good point. Yeah, we should always make sure we don't ruin @davidfowl 's efforts on start-up optimization :smile: \n. I just tested this branch, although it mitigates the problem by making the failure less frequent, the bug is not completely fixed. Here is the sporadic error I got:\n\n. Breadcrumbs checker was added before I did verification. Seems my force push failed so that change didn't show here. Please check the updated commit.\n. Added tests. Any additional comments?\n. Did verification with CoreCLR and Mono. Thanks for the sign-off.\n. Yes, I deleted all dependencies of a starter web app and added them back\n. Made code review changes\n. @davidfowl , you mentioned that you don't like using ICompilationMessage to surface details of an invalid lock file. Should I just throw an exception in ctor of ApplicationHostContext when lock file is invalid?\n. great, will test my fix against all of those cases\n. Cannot get this in before beta4 release branching. Will ask for check-in approval later after release branching.\n. @hishamco , thanks for the reminder, I'll add fix to them with my automation script\n. Tracking issue in Tooling repo: https://github.com/aspnet/Tooling-Internal/issues/216\n. Got reminder from @davidfowl , we can show warning for deprecated bundleExclude in Tooling now. We should remember to use this feature when renaming\n. It's introduced by this change: https://github.com/aspnet/dnx/commit/7ea973d046f07b3d0bea018f86d07a286aa43961\nI'll fix it\n. It's a trivial one, merging now to get it into beta4 release branch\n. Trivial one, already did local build verify\n. /cc @muratg \n. Yes, I remember I was able to run klr ./ run in KRE/samples/HelloWorld\n. @davidfowl , this one should be checked in after CoreBuild get updated. After this one is checked in, I can check in all related PRs in all repos.\n. Already did local verification with updated KoreBuild\n. Yes, it's gone.\n. Here is the \"globbing\" currently used by dnu restore:\nFor dnu restore <path>,\n1. If <path> is a project.json, only restore for it\n2. If <path> is a directory which contains a project.json, only restore for the project.json\n3. If <path> is a directory which doesn't contain any project.json, recursively find all project.json and restore for all of them.\nI assume we want to remove the logic above because they can be expressed with globbing patterns. Also, having two rules combined can be confusing.\n. Just a reminder: beta4 changes should be targeting release branch now\n. I should add a test case covering this case. Adding test now.\n. Added test\n. :shipit: after you test this change on MusicStore or similar project\n. @davidfowl , I didn't get rid of the nuspec casing fix here: https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.PackageManager/Utils/NuGetPackageUtils.cs#L54\nbecause this fix is still necessary. We want to make sure DefaultPackagePathResolver.GetManifestFilePath(string packageId, SemanticVersion version) gives correct path on a case-sensitive filesystem.\n. Yes. Clean you packages folder, dnu restore and then dnx . run the following test app:\nc#\n// Program.cs\nusing System;\nnamespace ConsoleApp2\n{\n    public class Program\n    {\n        public void Main(string[] args)\n        {\n            Console.WriteLine(typeof(NuGet.Constants).FullName);\n            Console.WriteLine(typeof(NuGet.Indexing.DocumentKey).FullName);\n            Console.WriteLine(typeof(Hangfire.SqlServer.SqlServerStorage).FullName);\n            Console.WriteLine(typeof(Newtonsoft.Json.JsonReader).FullName);\n            Console.ReadLine();\n        }\n    }\n}\njson\n{\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"Nuget.Core\": \"2.8.3\",\n        \"NuGet.Indexing\": \"3.0.75-r-master\",\n        \"HangFire\": \"1.3.0\",\n        \"newtonsoft.json\": \"6.0.8\"\n    },\n    \"frameworks\": {\n        \"dnx451\": { }\n    }\n}\nThis should cover all your test cases\n. On case-insensitive filesystem of Windows/OSX, if you already have Nuget.Core installed, there is no way to install NuGet.Core. So even we fix the casing of package ID to install, it will fail to install the package with correct casing.\n. @davidfowl , my bad, wrong instructions. You don't need to clean your packages folder, no matter your filesystem is case-sensitive or case-insensitive. I just verified.\n. I found a bug. Try this:\n1. Clean your packages folder\n2. dnu restore in the sample app above (then dnx . run should work)\n3. Modify project.json: NuGet.Indexing -> nuget.indexing\n4. dnu restore and then dnx . run fails\nI am fixing this bug.\n. Nice catch :+1: \nYes, DNX_PACKAGES overrides the packages path in global.json. So if you deploy a bundled app to an environment that has DNX_PACKAGES set. The bundle will be broken because it won't use approot/packages, which contains nupkgs built from dependency projects.\n@davidfowl , should we reverse the priority of DNX_PACKAGES and global.json.packages? Seems \"local wins\" rule makes more sense and it fixes this problem. Not sure whether this will introduce some regressions.\nOr, we should at least show error message like Unable to load assembly MusicStore.dll from /path/to/expected/package to make users aware that they are using the wrong packages folder.\n. @davidfowl , this just caused another issue on CI when @BrennanConroy checked in his tests for global install. Do we want to do this in beta5?\n. It also happens with CLR. I tested with dnx-clr-win-x86.1.0.0-beta4-11390 (latest release branch). web.cmd works fine, IIS Express gives:\n\n. By hand. We don't have coverage for dnu publish in MusicStore. @Praburaj just found the root cause of a blocking issue (https://github.com/aspnet/dnx/issues/1515) and he is going to add coverage for dun publish.\n. Warning for legacy name bundleExclude is added and tested:\n\n. I guess merging it into dnu is better.\ndnvm is using k-crossgen and assumes k-corssgen comes with dnx. Making k-crossgen a global command means dnvm will need to install this global command first. It's very different from the current approach.\n. So we all agree on the new name dnx-crossgen?\n. I guess optimize is a too general term and users may imagine they can do something like\ndnu optimize MyApp\nto make their apps run faster...\nIf we don't expect people to use this in most cases, crossgen can be a better choice, which means \"keep away if you don't know what it is\"\n. Moving forward with dnx-crossgen if there is no objection\n. Talked to @joeloff and confirmed that, as long as the command name is in the form of <any_prefix>-crossgen.cmd, our installer can always find it. So there is no change needed in installer part.\n. :shipit: \n. Looking at it\n. This commit (https://github.com/aspnet/dnx/commit/a3729ddb5eb85f7f5c63ba0ca37971b7b50c573f) fixes bootstrapper tests but more tests are failing because of the line ending issue.\nLooks like AppVeyor is using improper git line ending configuration on Windows. Working on a workaround.\n. Fixed: https://github.com/aspnet/dnx/commit/bd29db2bdbe8481fa5e75eb8a860d0e06dcb8732\nAlso fix the same problem in all other repos.\n. :+1: @aggieben 's workaround (setting MONO_THREADS_PER_CPU to 2000) does help me get rid of the timeout errors on our Linux CI machine.\n. I can help to verify this change on my super slow Win7 VM. Will post feedback here after that.\n. Being blocked by an issue on Win7: https://github.com/aspnet/dnx/issues/1616\nI cannot do the verification temporarily.\n. Wrote a script and ran 1000+ times of dnu restore --parallel for MusicStore on a very slow Win7 dual core VM. Couldn't reproduce the bug. Looks like it does fix the bug. (I delete .dnx/packages folder before each restore because the bug is in installation process)\n. :shipit: \n. One drawback of doing this is that we will get duplicated error messages in VS error list:\nIn the example below, ClassLibrary1 is a dependency of ConsoleApp6. The syntax error in ClassLibrary1 is reported by both ClassLibrary1 and ConsoleApp6\n\n. @davidfowl , I talked to @PradeepKadubandi and Tooling is ready to react to this change. Please sign off.\nThe deduplication of errors shared by different frameworks should be resolved in another thread: https://github.com/aspnet/dnx/issues/1710\n. @davidfowl , all external CIs passed\n. @davidfowl , we talked about the problem of doing dnu publish --no-source when we have transitive diagnostics retrieval.\nI checked the behavior of msbuild (web deploy). It builds projects in topological order and exits as soon as it sees a failed project.\nDo we want to modify dnu publish to do the same thing?\nGiven Projects A -> B -> C\nWe build the projects in the order of C B A and if C has errors, we exits immediately and B has no chance to show the duplicated transitive errors from C.\n(Today, dnu publish --no-source always build all projects even we see failed project during the process. The projects are built in an arbitrary order)\n. Just realized that dnu doesn't need submodule. We can use them as NuGet dependences directly.\n. @victorhurdugaci , I didn't test on other versions. But surprisingly it works on the Win7 used by Azure CI.\n. @pranavkm , yes, I grabbed the dnx build from Coherence-Signed/release\n. BTW, I have .NET Framework 4.5.2 installed on my Win7 VM.\n. After upgrading to Win7 SP1 and installing several important updates after upgrade, dnx works on my WIn7 VM. Closing this because users are supposed to have latest updates installed. It's not a bug.\n. /cc @muratg @glennc \n. Talked to @davidfowl and we are going to use the new dnu written by @anurse (https://github.com/NuGet/NuGet3/commits?author=anurse). I should make sure all bugs I found in NuGet core libs during my refactoring are fixed.\nAssigning this to @anurse\n. @anurse mentioned that there is a bug in DependencyWalker in NuGet core libs and he is going to send a PR for it. I'll come back to this PR after the fix is checked in.\n. We don't need this anymore\n. Great. @pranavkm , then we can pick an arbitrary flavor of dnx in LockFileUtilsFacts\n. Need rebase\n. :+1: \n. How do you initialize Services? Make RuntimeEnvironmentHelper.Services lazily initialized from CallContextServiceLocator.Locator.ServiceProvider?\n. Please address the last few comments and :shipit: \n. Each sample-app-based test should have a copy of the sample app because, when parallel testing is turned on, we don't want multiple dnu restore writing to one lock file.\n. @davidfowl , Happy CI X 3\n. :shipit: , thanks for resolving conflicts with my changes :smile: \n. I think the easiest way to do it is asking Tooling team to do a GroupBy() on error messages. Then we can have\n```\n|    Description     |                        Project                |\n| error message 1    |    ProjectA (framework1, framework2)          |\n| error message 2    |    ProjectA (framework1)                      |\n| error message 3    |    ProjectA (framework2)                      |\n\n```\n@davidfowl , do you like this approach?\n. Thanks for the feedback. Please check the updated patch.\n. Should be regression introduced in recent dnu publish changes.\n. Travis and Appveyor failed with non-relevant failure. I'll test @salerth 's PR and merge it today.\n. Merged: https://github.com/aspnet/dnx/commit/c076b0417dd998c2252d6ae88bc82a2dbf4777d8\n. Merged: https://github.com/aspnet/dnx/commit/c076b0417dd998c2252d6ae88bc82a2dbf4777d8\n. @bradwilson , could you please share the version of dnx you used yesterday when you had the issue?\n. @davidfowl , our http response caching is guarded by HttpResponseMessage.EnsureSuccessStatusCode(), so we never cache a response if http status code is not in the range of [200, 299]:\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.PackageManager/Restore/NuGet/HttpSource.cs#L120\nI suspect that myget was returning a 503 page along with a non-503 http status code. I just sent an email to myget and asked them to verify this.\n. I remember @blowdart finds that currently we are unable to add this to CoreCLR version of runtime.\nShould be a post-beta5 issue.\n@muratg , do we want a Security label for this kind of issue, or just use Bug?\n. @fals , looks like your have an incomplete runtime installed for some reasons. Please delete %userprofile%\\.dnx\\runtimes folder and run dnvm upgrade again. Then you should be able to find dnu.cmd in the location  mentioned by @muratg above.\n. For the Failed to initalize runtime (80070002) error, you should install Microsoft .NET Framework 4.5.2  before using CLR version of dnx\n. @fals , did installation of .NET Framework fix this issue for you?\n. This can be partially fixed in DNU: https://github.com/aspnet/dnx/issues/1862\nHowever, DNU doesn't have knowledge of unloaded projects. So it is still a Tooling bug and VS should do restore for each individual loaded project.\n. Thanks for the feedbacks. Please check the updated commit.\n. @davidfowl , fixed tests on Mono in the last commit. Looks like Appveyor build was cancelled for this PR because you pushed to dev. I already build verify on Windows locally.\nPlease check the latest commit. If you find it Ok, I'll merge this.\n. Tested with a simple fake NuGet service written by me: https://github.com/ChengTian/NuGetServiceForTest/blob/master/src/NuGetServiceForTest/Controllers/PackageController.cs#L59\nWhen FindPackagesById service is misbehaving, it looks like\n\nWhen package downloading service is misbehaving, it looks like\n\nAnd in both cases above, the error page is not cached in dnu restore http cache (i.e. %userprofile%/AppData/dnu/cache)\n. Will start a new PR using the approach suggested by @davidfowl . Thanks for all your feedbacks. Most feedbacks here are still useful in the new implementation.\n. Thanks for reporting this. We are removing support for comments in our JSON parser: https://github.com/aspnet/dnx/issues/1816\nand this issue will become invalid after we finish it.\n. :shipit: looks good to me\n. Thanks for all your feedbacks. Please check the updated patch.\n. Talked to @davidfowl and @BrennanConroy . This cross-plat-related issue should be moved to next milestone.\n. Yeah, I have a branch for this: https://github.com/aspnet/dnx/tree/wei/correct-local-appdata\nand the final PR needs something from https://github.com/aspnet/dnx/pull/1692\n. Hi @borgdylan , thank you for reporting this issue. Could you please share the version of dnx used here?\n. BTW, I assume this is on Mono, please correct me if I am wrong.\n. Hi @abpiskunov , each element in projects of global.json should be a parent folder of your projects.\nFor example, you have src/WebApplication5/project.json, then src should be added to projects, instead of src/WebApplication5\nYou can fix it by replacing foo with . (dot, i.e. current folder).\n. @davidfowl , it's actually quite intuitive that I should be able to add src/MyProject to projects in global.json. Is there any specific reason that we don't support it?\n. Looks like it's not easy to debug when you run into this case. So the earlier we fix it, the better (beta5?).\nTo eliminate ambiguous cases as many as possible, here are the two things we can do:\n1. Check existence of project.json when resolving all potential projects. (Need to check performance to decide whether we want to do this.)\n2. When there are two candidate project folders with exact same name, we throw error:\nAmbiguity between the following two projects:\npath/to/ProjectA\npath/to/another/ProjectA\n. Ok, we'll only do item 2 above.\n. Yeah, makes sense. If we don't use the project with that ambiguous name, it does no harm and we don't care the ambiguity.\n. Dup of https://github.com/aspnet/dnx/issues/1654 and the fix is already checked in: https://github.com/aspnet/dnx/pull/1738\nPlease use the latest version of runtime.\n. Yeah, when we should make it delete-on-close only when --no-cache is given.\n. @glen-84 , could you please give an example of the scenario you are talking about?\n. @glen-84 , thanks, I see your point. Yeah, with this change merged in, you will be able to add a specific project into global.json, without adding its peers.\n. Thanks for reporting this and pinpointing the line in code.\n@muratg , this should be beta5 bug\n. One conclusion from the design meeting is that we want to dump the output of our tests to a file on disk. @victorhurdugaci finds that we can use the convenient xunit.runner.dnx -xml myfile command to do it.\n. This is enhancement that should be done with incremental manner. Moving to next milestone.\n. The progress can be tracked at: https://github.com/davidfowl/DnxTestingPrototype/tree/wei/add-more-representative-cases\n. I am fixing and refining the branch for this: https://github.com/davidfowl/DnxTestingPrototype/tree/wei/add-more-representative-cases\nWill work with @JunTaoLuo to integrate this into DNX after sign-off tasks.\n. @davidfowl , using file stream to avoid memory explosion now.\n. Yeah, I am trying @ggrnd0 's repro steps. Will give feedback shortly.\n. Just did some experiments and myget always returns 200 status code. Even you are doing FindPackagesById with a non-existent package ID, it returns a empty result along with 200 status code.\n@ggrnd0 , could you please try accessing the your package query URI directly with your browser?\nFor my own test, it's https://www.myget.org/F/for-test/api/v2/FindPackagesById()?id='TestCacheWithMyGet'. My browser shows an XML along with 200 code in Fiddler.\nIf you are seeing 404 instead, your myget feed is probably having some issues.\n. Except for the 404 status code, all other behaviors in @ggrnd0 's repro steps are expected. We always cache a package query result for 30min, even it's an empty result (for non-existent package ID).\nIf you make changes to your feed and want to use the new packages instantly (within 30min), please use dnu restore --no-cache\n. Cannot reproduce, closing this.\n. :shipit: \n. @davidfowl , thanks for the feedback, updated.\n. Just came up with an edge case where you have the following global.json:\njson\n{\n  \"projects\": [\"src\", \"src/../src\"]\n}\nThis will make ProjectResolver throw, even you only have a single project src/ProjectA. And the error message can be very confusing:\nThe project name 'ProjectA' is ambiguous between the following projects:\n<Root>/src/ProjectA\n<Root>/src/ProjectA\nNeed to dedup. Working on it.\n. @davidfowl , added dedup of project path and added tests for the case above.\n. Yeah, thanks for pointing it out. Need to improve my skills for searching on Github :smile: \n. Good idea. We can show the first line of dnu --help at the beginning of restore/build. So you can see\nMicrosoft .NET Development Utility v1.0.0-beta5-11760\n<blank line>\n<usual output>\n. Do we want copy right info like the header xUnit always output?\n\n. Should be a easy one but can improve user experience a lot. I can finish this quickly.\n. Highly visible and frequently used feature, should be beta5. @muratg \n. @davidfowl , build passed\n. @davidfowl , our CI will be fixed today. Please sign off so that Tooling team can integrate this feature and verify it.\n. @davidebbo , rebased and build verify locally\n. Looks like regression in project.json parsing if the 1.0.0-beta5-11749 works well. BuildTargetFrameworkNode that throws this exception is parsing some part of project.json.\n. @davidfowl , just talked to NuGet team and confirmed that NuGet doesn't support having an icon inside nupkg.\nhttps://nuget.codeplex.com/wikipage?title=Packages%20Containing%20Icon%20and%20License\nThis is a proposal but it hasn't been implemented.\nIf later NuGet supports this, users can just put correct file path to project.json and it should just work. So this is not a DNX bug.\n. We can finish this quickly because @davidfowl already added an internal flag for it. I can just expose this to external users:\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.PackageManager/Publish/PublishProject.cs#L416\nI'll follow the @davidfowl 's option name and make it dnu restore --skip-restore-events\n. Hi @rkeithhill , this issue should be reported in dnvm repo. I moved it there for you: https://github.com/aspnet/dnvm/issues/268\n. Cannot reproduce with latest dnx. I believe this was fixed during @davidfowl 's dnu publish refactoring.\nFixed in beta5.\n. Hi @urigolani , to get latest runtime, you can do\ndnvm upgrade -Unstable\nwhich fetches latest beta5 runtime for you. Then change the sdk version in global.json to the version of latest runtime, for example\n\"sdk\": {\n    \"version\": \"1.0.0-beta5-11893\"\n}\n. @urigolani \n1. It is expected because your csproj only targets net451. Wrapping a csproj cannot change its target framework.\n2. Cannot reproduce. We should never create project.json for a NuGet package dependency. Can you open an new issue for this and share repro steps?\n. Thanks for the feedback. Please check the updated patch.\n. Latest output based on @davidfowl and @DamianEdwards 's feedback:\ndnx . run when dependencies in project.json were changed:\n\ndnx . run when lock file version doesn't match:\n\ndnx . build when lock file version doesn't match:\n\ndnx . run when lock file is correct but a dependency is not in packages folder:\n\n. @davidfowl , improved based on your feedback. Output is still the same as screenshots above.\n. This is replaced by https://github.com/aspnet/dnx/pull/2281\n. Turns out https://myget.org is redirecting us to http://www.myget.org. Note that, in addition to the www prefix, the redirection also changes https to http.\nTry it in your browser with https://myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='Microsoft.AspNet.Authentication.OpenIdConnect'\nOur HttpClient doesn't allow this kind of downgrading (@Tratcher , good job :+1: )\n@maartenba @xavierdecoster , I guess this is a bug introduced recently in myget.org?\n. Yeah, it is good now.\n. Looks good to me :shipit: \n. Please share the version of dnx you are using here\n. Hmm, this version of dnu restore should never cache things if you have network glitch. Unless your network glitch convinced dnu by returning 200 OK along with a valid NuGet OData XML that shows there is no Microsoft.AspNet.Razor in the feed.\nCould you please file a separate issue for the wrong caching behavior? Please paste the contents of list_Microsoft.AspNet.Razor_page1.dat in your $env:localappdata\\dnu\\cache.\n. Cannot reproduce the wrong caching behavior. We can file a bug when someone sees it again.\nOk, let's get back to the major topic in this thread:\nShould dnu restore write lock file when there is unresolved dependency during restore?\nI know that previously we didn't write lock file when dnu restore is unable to locate some dependencies. But later we changed that behavior at some point. So it should be by design.\nI talked to @anurse and he thinks current behavior is handy for integration with MSBuild projects.\nAdding @davidfowl , who can give more reasons here.\n. Talked to @balachir and he was using beta5-11749.\nThis was a regression: dnu publish was doing dnu restore in output folder without skipping restore-related events. But later it was fixed by @davidfowl .\nCouldn't reproduce with latest dnx (beta5-11854).\n. Talked to @balachir and he will get the latest dnx build from CI output directly. Some bugs should be already fixed in the latest dnx build.\n. Yeah, clean your %userprofile%\\AppData\\Local\\dnu\\cache and use latest version of dnx. The new dnu will never cache corrupted files.\n. Dup of https://github.com/aspnet/dnx/issues/1746\n. @balachir\n. Sample output:\n\n. Show the header info only when a subcommand is actually running. If you provide an invalid subcommand/argument/option, we don't show the header:\n\n. Just want to let people know that this is under investigation.\n@BrennanConroy investigated this and found the commit https://github.com/aspnet/dnx/commit/e9b81446ec1931e08cbf125a13525c679d961528 is the root cause. \n@davidfowl and @BrennanConroy will do some further investigation\n. Since we already agreed on the new name, I'll just check in when all PRs are ready\n. :shipit: \n. The Feed used section is already displaying effective feeds because it only displays feeds returned by PackageSourceUtils.GetEffectivePackageSources().\nI think an effective feed means a feed actually in use, no matter it is cached or not.\n. Thank you for the contribution, I'll do local verification build and merge it.\n. Merged: https://github.com/aspnet/dnx/commit/95b5c7ba0044065a159ffb6b865eb8955eb5879b\n. Cannot reproduce with latest DNX\n. I just found that\nResulting application can run, and build, but if you try and publish you get the error below.\nis not true.\nLooks like VS does not update wrapper project.json until you do some actions like build/publish. After adding NuGet dependency for your csproj, you should try doing build several times, after one or two successful build, you'll hit \"dependency missing\" error and you'll see Reference Error like\n\nThis is a complex bug caused by bugs in both DNX and Tooling. I filed a bug in Tooling repo https://github.com/aspnet/Tooling-Internal/issues/362\n. Fix on DNX side is checked in. I'll follow up with Tooling team and do some integration tests when the fix on their side is available.\n. Talked to @PradeepKadubandi offline and Tooling team should be able to make a simple fix on their side. I'll close this on DNX side because my fix was already checked in.\n. Talked to @loudej and he thinks we don't need to move local NuGet packages to DNX packages folder. We can just make project.json of wrapper project up-to-date and always call restore to install necessary packages. Will revert https://github.com/aspnet/dnx/commit/60de972dd41d1f4924fcb6fbc15d7e7d503c9555.\n. @Jonas82 , thanks for reporting. The issue was partially fixed and the remaining part is filed at: https://github.com/aspnet/dnx/issues/2352\nYou can manually restore for projects in wrap folder as workaround.\n. Seems not a redirect issue.\n@awec , your dnu restore output shows that all your HTTP requests hit our local HTTP cache and there was no HTTP request sent.\nWe cache the response of an HTTP request for at least 30min. So please delete your %userprofile%/AppData/Local/dnu/cache if you want to upload a package to a feed and let this new package be visible to dnu restore immediately.\nmyget.org and www.myget.org have different cache keys and that's why adding www fix the problem.\n. Thanks for the feedback. Now if you delete some necessary packages from your solution local packages folder and then do dnu wrap, you'll see something like:\n\n. Looks good :shipit: \nI'll merge this change. Thanks for your contribution.\n. Merged: https://github.com/aspnet/dnx/commit/2657db7d45f1e75b93a51508e3e2dc62e68995d9\n. Just wrong target branch, the changes should be correct. Will create a new PR with correct target branch though\n. :shipit: \n. Got sign-off from @davidfowl \n. Punting this because it actually hurts restore performance\n. :shipit: \n. Talked to @Tratcher and @yishaigalatzer , this should be an issue related to format of zip archive and NuGet team saw similar issues. Looks like Mono.3.12 cannot handle the zip archive format while Mono.4.0.1 can.\nThis PR should be able to fix the issue.\n. Yeah, we have some optimization in ProjectResolver so that it is definitely faster than globbing.\n. Dup of https://github.com/aspnet/dnx/issues/222\n. @glennc @Eilon , are you guys happy with the new warning/error message?\n. Added functional test. AppVeyor is slow so I verified it on Windows locally.\n. Fixed behavior of dnu restore, instead of throwing exceptions, we show something like:\n\n. We can hardcode some paths when APPDATA is not available.\n@BrennanConroy , one more thing depending on your PR https://github.com/aspnet/dnx/pull/1692 \n. During dnu publish, we can fix this error by removing projects entries pointing to folders outside of solution root.\n. @davidfowl , are you happy with my solution above?\n. Talked to @davidfowl , in dnu publish output bundle, we want to copy all source code to approot/src subfolder and delete all other projects entries from global.json while copying it.\n. Added unit tests\n. New message after improving diagnostics:\n\n. @davidfowl , added logic to handle placeholder packages like System.Runtime.4.0.20-beta-23104.\n. @davidfowl , please check the latest commits\nTalked to @anurse and we think it's better to simply accept _._ as assembly in lock file and filter them out before compilation. This makes the change minimal and also makes it consistent with the logic in NuGet.\n. One more advantage of current approach is that, as @anurse confirmed, this is the exactly same approach used in NuGet.\n. @davidfowl , added a commit to filter out _._ when resolving runtime loadable assemblies.\n. Ping @davidfowl @muratg\n. Yes,all package install paths should be resolved with DefaultPackagePathResolver. Looks good to me.\n. I am adding a functional test for dnu restore in this PR: https://github.com/aspnet/dnx/pull/2232/files#diff-edbeb3b05a45a6c482241e1d17d0c4d1R153\nIn new functional test infrastructure, we should add some utils for creating some fake packages and put them to a local feed.\n. We can add more functional tests for dnu restore when new test infrastructures are in use later. However, that will happen after beta 6.\nTalked to @troydai , we can still add dnu restore tests with old test infrastructures. So this is not a blocking issue, moving to beta 7.\n. This should be part of https://github.com/aspnet/dnx/issues/1844\n. Thanks for the feedback. Fixed in the latest commit.\n. :shipit: after reaction to my last comment above.\n. Use this as an example of dnu restore tests: https://github.com/aspnet/dnx/blob/dev/test/Microsoft.Framework.PackageManager.FunctionalTests/DnuRestoreTests.cs#L153\n. Looks like a regression. Investigating.\n. This regression makes dnu install unusable, should be fixed ASAP.\n. Seems we don't have any functional test for dnu install. Adding some now and I will ping again after that.\n. Added tests\n. @davidfowl , added higher level of abstraction\n. @davidfowl , using DnuEnvironment.GetFolderPath() at all possible places except one:\nI'll break some tests and there is no easy way to fix them if I use DnuEnvironment.GetFolderPath() there. I filed a bug for it: https://github.com/aspnet/dnx/issues/2279\n. @anurse , thanks for the feedback. Fixed and Travis just passed.\n. Will retarget to release branch before merging\n. Looks good to me :shipit: \n. :+1: \n. Previously, if your app doesn't need any NuGet package dependency, it can run/build without a lock file. Now we decide to enforce the existence of lock file, so it always fails if your app doesn't have a lock file.\nThat's why I am fixing some tests here by calling dnu restore to generate lock files.\n. @davidfowl , added DTH change. GetDependencyDiagnostics is in Microsoft.Framework.Runtime and Microsoft.Framework.DesignTimeHost is calling it, so we cannot make it internal.\n. Ping @davidfowl \n. @anurse , @davidfowl was talking about this PR\n. This actually stales after renaming. Will fix it and merge soon.\n. Already merged to dev branch. This didn't close automatically.\n. Simple fix and I already verified it. I am going to merge it @muratg \n. Checked into release and merged back to dev\n. @abpiskunov , could you please list all feeds you are using here? Please also attach your project.json if possible. Thanks!\n. One more thing, what's the version of DNX you are using?\n. Never mind. I can see it is beta6 DNX in the output\n. Because there is an exception thrown during access to HTTP cache, \u201cdnu restore\u201d mistakenly recognized V3 feeds as V2 feeds. The root cause is https://github.com/aspnet/dnx/issues/2291 and I already pushed fix this morning. Please wait for next build of DNX available later.\n. Dup of https://github.com/aspnet/dnx/issues/2291\n. Root cause is explained in https://github.com/aspnet/dnx/issues/2296. When dnu restore fails because of an exception, it doesn't get a chance to update lock file, so you still have leftover from previous restore and it gives DTH the illusion that all dependencies are correctly resolved.\nAll those issues should be fixed after next build of DNX is available.\n. Dup of https://github.com/aspnet/dnx/issues/2291\n. Added test for this\n. Rebased after runtime renaming.\nThis is quite straightforward change, please help to review @muratg @troydai @moozzyk @BrennanConroy \n. That test case is for the scenario where we wrap multiple csprojs with a single project.json. We have 3 frameworks in the test case, I guess removing wp8 framework and testing with 2 frameworks is still acceptable.\n. Is there any specific reason that we disallow wildcard globbing for compileFiles? How do users know when they can use wildcard and when they cannot? I remember you can use * in exclude patterns and the inconsistency here seems confusing\n. Add a test case for UNC path \\\\Server\\Volume\\File and :shipit: \n. I suggest that we restore during dnu publish instead of dnu wrap because only the publishing scenario needs a lock file.\n. Yeah, I should add it\n. Added a functional test to prevent similar regression.\n. Rebased after runtime renaming\n. @davidfowl @anurse @Eilon \nAdding more explanation before I send out PRs to fix a bunch of project.json in our repos:\nCompatibility check we are adding here\nFor some CoreCLR packages (e.g. System.Globalization.4.0.0-beta), they provide dnxcore50-compatible assemblies for compile-time in ref folder (e.g. ref/dotnet/System.Globalization.dll), but they don't provide run-time assemblies for dnxcore50 (e.g. there is no dnxcore50-compatible subfolder in lib folder). This kind of packages are broken because they are incompatible with dnxcore50. We previously silently tolerate those packages but now we want to show errors.\nHas this incompatibility issue been fixed in CoreCLR packages\nYes, later version of CoreCLR packages have fixed this issue. For example, although System.Globalization.4.0.0-beta has the compatibility issue, you can get rid of it by bumping up the version to System.Globalization.4.0.10-beta.\nWhy do we need to react in most repos\nMost of our repos actually bring in dnxcore50-incompatible packages as indirect dependencies. For example, if you have System.Console.4.0.0-beta-23123 in your project.json, there is such a dependency chain:\nSystem.Console.4.0.0-beta-23123 -> System.Resources.ResourceManager.4.0.0 -> System.Globalization.4.0.0\nand System.Globalization.4.0.0 has the compatibility issue.\nAfter the new compatibility check is merged in, we will see a bunch errors during dnu restore for our repos. So I need to go through most repos and bump up versions of CoreCLR packages.\nWhy didn't this issue break anything on dnxcore50\nBecause we are bundling most CoreCLR assemblies in dnx-coreclr runtime bin folder. So although the dependencies of your project don't provide run-time assemblies for dnxcore50, DNX can still load them. That's why our projects can run with dnxcore50 framework although they have dnxcore50-incompatible dependencies.\n. @davidfowl @anurse @Eilon \nAdding more explanation before I send out PRs to fix a bunch of project.json in our repos:\nCompatibility check we are adding here\nFor some CoreCLR packages (e.g. System.Globalization.4.0.0-beta), they provide dnxcore50-compatible assemblies for compile-time in ref folder (e.g. ref/dotnet/System.Globalization.dll), but they don't provide run-time assemblies for dnxcore50 (e.g. there is no dnxcore50-compatible subfolder in lib folder). This kind of packages are broken because they are incompatible with dnxcore50. We previously silently tolerate those packages but now we want to show errors.\nHas this incompatibility issue been fixed in CoreCLR packages\nYes, later version of CoreCLR packages have fixed this issue. For example, although System.Globalization.4.0.0-beta has the compatibility issue, you can get rid of it by bumping up the version to System.Globalization.4.0.10-beta.\nWhy do we need to react in most repos\nMost of our repos actually bring in dnxcore50-incompatible packages as indirect dependencies. For example, if you have System.Console.4.0.0-beta-23123 in your project.json, there is such a dependency chain:\nSystem.Console.4.0.0-beta-23123 -> System.Resources.ResourceManager.4.0.0 -> System.Globalization.4.0.0\nand System.Globalization.4.0.0 has the compatibility issue.\nAfter the new compatibility check is merged in, we will see a bunch errors during dnu restore for our repos. So I need to go through most repos and bump up versions of CoreCLR packages.\nWhy didn't this issue break anything on dnxcore50\nBecause we are bundling most CoreCLR assemblies in dnx-coreclr runtime bin folder. So although the dependencies of your project don't provide run-time assemblies for dnxcore50, DNX can still load them. That's why our projects can run with dnxcore50 framework although they have dnxcore50-incompatible dependencies.\n. @davidfowl hosted a discussion and they think this is too aggressive. Putting to backlog.\n. @davidfowl hosted a discussion and they think this is too aggressive. Putting to backlog.\n. This was fixed before beta6 release: https://github.com/aspnet/dnx/issues/2291\n1.0.0-beta6-12254 is not final beta6 build, please update your WTE, clear your %userprofile%\\.dnx\\runtimes folder and WTE should install 1.0.0-beta6-12256 as beta6 runtime for you\n/cc @yishaigalatzer \n. This was fixed before beta6 release: https://github.com/aspnet/dnx/issues/2291\n1.0.0-beta6-12254 is not final beta6 build, please update your WTE, clear your %userprofile%\\.dnx\\runtimes folder and WTE should install 1.0.0-beta6-12256 as beta6 runtime for you\n/cc @yishaigalatzer \n. Sample output when we find an incompatible package during restore:\n\n. Sample output when we find an incompatible package during restore:\n\n. Have a replacement PR sent. Closing this one.\n. Have a replacement PR sent. Closing this one.\n. @MisterJames , thank you, community contribution is very welcome :smile: \nPlease remember to mention me in your PR, I can help merge changes in after code review.\n. @MisterJames , thank you, community contribution is very welcome :smile: \nPlease remember to mention me in your PR, I can help merge changes in after code review.\n. This should be done as part of https://github.com/aspnet/dnx/issues/2429. Otherwise the parallelized package installation will have messed up output. I am working on it.\n. This should be done as part of https://github.com/aspnet/dnx/issues/2429. Otherwise the parallelized package installation will have messed up output. I am working on it.\n. I cannot reproduce this with\ndnx-mono.1.0.0-beta7-12290 on Mono JIT compiler version 4.0.1 (and simulating HTTP request timeout with some bandwidth throttling tools)\nAlso tried dnx-mono.1.0.0-beta6, dnu restore returns 1 after timeout error.\n@aggieben , could you please try the latest version of dnx by running dnvm upgrade -u?\n. I cannot reproduce this with\ndnx-mono.1.0.0-beta7-12290 on Mono JIT compiler version 4.0.1 (and simulating HTTP request timeout with some bandwidth throttling tools)\nAlso tried dnx-mono.1.0.0-beta6, dnu restore returns 1 after timeout error.\n@aggieben , could you please try the latest version of dnx by running dnvm upgrade -u?\n. Tried on Ubuntu with Mono JIT compiler version 4.1.0 and I can repro the issue https://github.com/aspnet/dnx/issues/1590. However, the exit code is still non-zero (which means I still cannot repro current issue):\n\nIt is very likely a sporadic Mono issue because when you get an unhandled exception like this, the exit code is controlled by runtime, instead of code in DNX.\nClosing this for now. @aggieben , if you figure out more specific conditions that can trigger this issue, please reopen issue and report it here.\n. Tried on Ubuntu with Mono JIT compiler version 4.1.0 and I can repro the issue https://github.com/aspnet/dnx/issues/1590. However, the exit code is still non-zero (which means I still cannot repro current issue):\n\nIt is very likely a sporadic Mono issue because when you get an unhandled exception like this, the exit code is controlled by runtime, instead of code in DNX.\nClosing this for now. @aggieben , if you figure out more specific conditions that can trigger this issue, please reopen issue and report it here.\n. My bad, the timeout exception is not an unhandled exception. We are handling all possible exceptions here:\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Tooling/Restore/RestoreCommand.cs#L225\nBut as you can see, if you have \n```\nRestore failed\n```\nin dnu restore output, it should be going through the code path in the catch statement and eventually return false, which leads to a non-zero exit code. So I still suspect it is an issue in Mono.\n. My bad, the timeout exception is not an unhandled exception. We are handling all possible exceptions here:\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Tooling/Restore/RestoreCommand.cs#L225\nBut as you can see, if you have \n```\nRestore failed\n```\nin dnu restore output, it should be going through the code path in the catch statement and eventually return false, which leads to a non-zero exit code. So I still suspect it is an issue in Mono.\n. Updating title. Following previous behavior, the newly created NuGet.Config should always be empty. We should fallback to v3 feed directly, without writing it to disk first.\n. Updating title. Following previous behavior, the newly created NuGet.Config should always be empty. We should fallback to v3 feed directly, without writing it to disk first.\n. We don't set any HttpClient.BaseAddress and always leave it empty. So looks like the forum thread is irrelevant.\nI also tried intentionally setting HttpClient.BaseAddress to URIs without trailing slash but still couldn't repro.\n@glennc , looks like this is a very rare issue and we don't have repro.\n. We don't set any HttpClient.BaseAddress and always leave it empty. So looks like the forum thread is irrelevant.\nI also tried intentionally setting HttpClient.BaseAddress to URIs without trailing slash but still couldn't repro.\n@glennc , looks like this is a very rare issue and we don't have repro.\n. I tested this PR by restoring for MusicStore several times and calculating average restore time. Turns out this \"improvement\" doubles the restore time.\n. I tested this PR by restoring for MusicStore several times and calculating average restore time. Turns out this \"improvement\" doubles the restore time.\n. I think you did a good job finding locations to be modified :+1: \ndnu publish is calling dnu packages add and dnu restore internally and this is the only scenario where we want to hide some output. It means that, when you use dnu restore/dnu packages add individually, the output shouldn't be changed.\nA rough idea can be adding some special internal flag/option, like this: https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Tooling/Publish/PublishProject.cs#L428\nJust my two cents\n. I think you did a good job finding locations to be modified :+1: \ndnu publish is calling dnu packages add and dnu restore internally and this is the only scenario where we want to hide some output. It means that, when you use dnu restore/dnu packages add individually, the output shouldn't be changed.\nA rough idea can be adding some special internal flag/option, like this: https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Tooling/Publish/PublishProject.cs#L428\nJust my two cents\n. And the main repo build failure should be fixed sometime later today, after we push some new packages to package feeds.\n. And the main repo build failure should be fixed sometime later today, after we push some new packages to package feeds.\n. As far as I know, this is the only place we want to use the two internal flags. One small suggestion is: SkipPackageSummaryDetail -> SkipFeedSummary. All other part looks good to me.\nWe do have some issues pushing latest packages to feeds. Yes, please hold off on sending PR until you see a green dnx/dev branch.\n. As far as I know, this is the only place we want to use the two internal flags. One small suggestion is: SkipPackageSummaryDetail -> SkipFeedSummary. All other part looks good to me.\nWe do have some issues pushing latest packages to feeds. Yes, please hold off on sending PR until you see a green dnx/dev branch.\n. DNX/dev branch build is passing now: https://github.com/aspnet/dnx/branches\n. DNX/dev branch build is passing now: https://github.com/aspnet/dnx/branches\n. @MisterJames , sorry I didn't mention that we want to have this in our beta7 release. So the PR needs to be merged before Aug. 14th (Friday).\nFeel free to let me know if you don't have time to do it before Friday. I have enough time and can work on this issue : )\n. @MisterJames , sorry I didn't mention that we want to have this in our beta7 release. So the PR needs to be merged before Aug. 14th (Friday).\nFeel free to let me know if you don't have time to do it before Friday. I have enough time and can work on this issue : )\n. @MisterJames , yeah, we find it's better to do this as part of another PR, so I'll take care of it.\nFeel free to pick another issue you can handle and let the assignee know (or reply to that thread if there is no assignee). We really appreciate your contribution :smile: \n. @MisterJames , yeah, we find it's better to do this as part of another PR, so I'll take care of it.\nFeel free to pick another issue you can handle and let the assignee know (or reply to that thread if there is no assignee). We really appreciate your contribution :smile: \n. Thanks for pinpointing the location in code. Just sent a PR for it.\n. Thanks for pinpointing the location in code. Just sent a PR for it.\n. Compatibility check during build in command-line:\n\nCompatibility check during restore in command-line:\n\nCompatibility check during build in VS:\n\n. Compatibility check during build in command-line:\n\nCompatibility check during restore in command-line:\n\nCompatibility check during build in VS:\n\n. @davidfowl , removed check during restore and reused a lookup dictionary to save memory. Please check the last commit.\n. @davidfowl , removed check during restore and reused a lookup dictionary to save memory. Please check the last commit.\n. @davidfowl , I measured performance with profiler and here is statistics (5 times of running for each branch):\nProgram under profiling:\nHelloWorld console app which has exactly same project.json as MusicStore: https://github.com/aspnet/MusicStore/blob/dev/src/MusicStore/project.json\nIt makes sure the number of dependencies is big enough to make dependency resolution time easy to observe.\nCurrent dev branch (dnx before this change):\nAverage total runtime: 2483ms\nProfiling information of key part:\n\nPR branch (dnx after this change):\nAverage total runtime: 2496.33ms\nProfiling information of key part:\n\nThe conclusion is that this compatibility check doesn't slow down dnx run significantly and the performance is acceptable.\n. @davidfowl , I measured performance with profiler and here is statistics (5 times of running for each branch):\nProgram under profiling:\nHelloWorld console app which has exactly same project.json as MusicStore: https://github.com/aspnet/MusicStore/blob/dev/src/MusicStore/project.json\nIt makes sure the number of dependencies is big enough to make dependency resolution time easy to observe.\nCurrent dev branch (dnx before this change):\nAverage total runtime: 2483ms\nProfiling information of key part:\n\nPR branch (dnx after this change):\nAverage total runtime: 2496.33ms\nProfiling information of key part:\n\nThe conclusion is that this compatibility check doesn't slow down dnx run significantly and the performance is acceptable.\n. Improved error message and added compatibility check during dnu restore\n. Stale again...\n@davidfowl , do we want to punt it?\n. Stale again...\n@davidfowl , do we want to punt it?\n. This change is too aggressive and we decide to punt it for now. Closing this PR and keeping the branch for future reference.\n. This change is too aggressive and we decide to punt it for now. Closing this PR and keeping the branch for future reference.\n. @davidfowl , can we have\ndnu publish --framework dnx451\nand report error when the following configuration is specified\ndnu publish --framework dnx451 --runtime dnx-coreclr-win-x86.1.0.0-beta6\n. @davidfowl , can we have\ndnu publish --framework dnx451\nand report error when the following configuration is specified\ndnu publish --framework dnx451 --runtime dnx-coreclr-win-x86.1.0.0-beta6\n. My changes shorten the starter app publish time from 30 sec to 13 sec.\n. My changes shorten the starter app publish time from 30 sec to 13 sec.\n. :shipit: \n. :shipit: \n. @yishaigalatzer , to fix at server side, do you want to return index.json that always contain versions property, even it is empty?\nThe current problem is that if all versions of a package are unlisted, we get index.json like\njson\n{\n  \"unlistedVersions\": [\n    \"1.0.0\"\n  ]\n}\nThe absence of versions property makes dnu think it is an invalid response.\n/cc @davidfowl @lodejard \n. @yishaigalatzer , to fix at server side, do you want to return index.json that always contain versions property, even it is empty?\nThe current problem is that if all versions of a package are unlisted, we get index.json like\njson\n{\n  \"unlistedVersions\": [\n    \"1.0.0\"\n  ]\n}\nThe absence of versions property makes dnu think it is an invalid response.\n/cc @davidfowl @lodejard \n. Talked to @davidfowl and we want to leave the current implementation for now. I filed an issue for fixing at server side: https://github.com/NuGet/NuGetGallery/issues/2617\n. Need a discussion to decide whether we still want this change. Putting to backlog.\n. The work at server side is tracked at https://github.com/NuGet/NuGetGallery/issues/2617 and NuGet team is deploying the changes now. The fix at DNX side is merged. Closing.\n. @Jetski5822 , thank you for the contribution. You commit is checked in: https://github.com/aspnet/dnx/commit/34e023b601ad8904f28f116c8e5d04622a8041f0\n. Ping @davidfowl @lodejard \n. Thanks for the comments. Just fixed.\n. Looks good to me :shipit: \n. Tried building some applications where xprojs reference csprojs but couldn't reproduce. This should only happen in some specific scenarios.\nI need to have a look at the application @glennc used in order to investigate.\n. This publish issue was in beta6 and it was fixed during @davidfowl 's refactoring (the usage of SingleOrDefault was removed during the refactoring https://github.com/aspnet/dnx/commit/307137acc3d20a1d090b6d8b00fcf997ba9b8283)\nHowever, dnu restore suffers from similar issue now and I filed a bug for it at: https://github.com/aspnet/dnx/issues/2554\n. @davidfowl , updated\n. Merged https://github.com/aspnet/dnx/commit/0cd694b54d39da2b4fbbab14e74cf3bf5e520076\n. One suggestion from @davidfowl : for the package installation part, we may want to xcopy packages, instead of extracting from nupkgs\n. Publishing a Starter Web App with command-line is about 5 seconds now.\n. We decide to make this beta7\n. Here are some statistics that may help us make decision on which alternative we should use.\nTo roughly quantify the degree of contention, I introduce a global counter ContentionCount in dnu restore: https://github.com/aspnet/dnx/commit/11920f0403c4bc6208e8f4b1861da183aa6c2c9e\nDefinition: each time a thread/process tries acquiring a named semaphore but has to wait, we do ContentionCount++.\nHere are values of ContentionCount in different scenarios:\n1 . dnu restore --parallel in root dir of Mvc repo:\nAverage ContentionCount: 4390\nAverage Restore Time: 53.2s\nContentionCount per Second: 82.5\nComments: in this scenario we only run one dnu restore process and the contentions happen between threads\n2 . Two instances of dnu restore --parallel <Mvc_Root_Dir> running simultaneously:\nAverage Total ContentionCount (Instance1.ContentionCount + Instance2.ContentionCount): 9989\nAverage Restore Time (per dnu restore instance): 65.8s\nContentionCount per Second: 151.8\n. :shipit: \n. :shipit: \n. Looks good to me :shipit: \n. Thanks for the feedback. Please check latest commits.\n. Fixed the memory consumption issue. Here are latest statistics:\ndnu restore --no-cache for MusicStore with an empty packages folder:\nOn Mono:\nTime: 300 sec\nPeak Memory Usage: 116MB\nOn Cross-plat CoreCLR:\nTime: 150 sec\nPeak Memory Usage: 137MB\nNote that restoring on cross-plat CoreCLR is twice as fast as restoring on Mono.\nI added additional log to check the global shared dictionary and confirmed that all entries get deleted after restoring for a project. So the small difference of memory usage is not introduced by this change.\n. @davidfowl , NuGet issue created here:\nhttps://github.com/NuGet/Home/issues/1230\n. Checked this change into release branch and merged back to dev: https://github.com/aspnet/dnx/commit/e336e171735cffb1def89f6458922a86729510af\n. I did some experiments and found that you always get this ArgumentNullException when there are unresolved dependencies.\nThis is a regression in DNX. /cc @muratg @davidfowl \n. Hi @nicolasr75 , it is very likely that you have some dependencies missing on your second machine.\nYou are right, the published bundle is self-contained and it should contain all required dependencies. However, the bundle's local packages folder (<bundle_root>/approot/packages) can be overridden by some environment variables. Please check whether you have the env var NUGET_PACKAGES or DNX_PACKAGES set on your second machine. If you have both/one of them, please erase the env vars before you run the app.\n. No, we don't have any test covering the scenario where you run an app with missing dependencies.\n. This will be fixed as part of @davidfowl 's dnx refactoring PR\n. Cannot reproduce with beta 6 Tooling.\nBTW, in my VS, it is only the first time you delete project.lock.json, the automatic restore is triggered. Following deletion doesn't trigger restore any more.\nTooling version:\n\n@abpiskunov , did you clear Package Manager output before you delete lock file? Maybe you just saw some leftover output from previous restore\uff1f\n. With the following configuration:\njson\n{\n    \"packageFiles\": {\n        \"tools/\": \"A.txt\",\n        \"./tools/\": \"B.txt\",\n        \"arbitrary/../tools\": \"C.txt\"\n    }\n}\nThe current implementation will copy all three .txt files into one tools folder, which looks fine.\nHowever, with\njson\n{\n    \"packageFiles\": {\n        \"tools/final.txt\": \"A.txt\",\n        \"./tools/final.txt\": \"B.txt\",\n        \"arbitrary/../tools/final.txt\": \"C.txt\"\n    }\n}\nThe behavior is undefined because we are using Dictionary, which is unsorted. So we don't know which .txt file gets copied as the last one and overwrites all previous ones.\n. To see the overall help, you can type:\nklr Microsoft.Framework.Project -h\nor klr Microsoft.Framework.Project --help\nor klr Microsoft.Framework.Project -?\nCurrently, you can only see help for subcommands by typing:\nklr Microsoft.Framework.Project help [subcommand]\nThank you for the reminder and I will add support for help options like:\nklr Microsoft.Framework.Project [subcommand] -h|--help|-?\n. Yes, it is valid. I am using double braces (\"{{\" & \"}}\") to escape \"{\" and \"}\" in a format string. Let's assume maxArgLen is 10, then the result returned by Format method above is\nc#\n\"  {0, -12}{1}\"\nThe result is a format string itself, which is dynamically generated. It is used later to make sure we always have tidy help information.\n. Oh, what was wrong with me :frowning: \n. The trivial change in this line is necessary. Otherwise, it reports \"The input line is too long\" error.\n. It's a very useful hint. Thank you for sharing :smile: \n. Oh, I see. So\nbatchfile\nSET \"A=1\"\nis a better way to go.\n. When we execute\nbatchfile\ncmd /C \"path/to/k\" crossgen --in \"path/to/target\"\nSince the text passed to cmd.exe has a leading double quote and a trailing double quote, cmd.exe strip the leading quote and remove trailing quote before doing any further processing (see cmd /? page 2).\nSo, in the example above, cmd.exe thinks we are passing\npath/to/k\" crossgen --in \"path/to/target\nas a SINGLE long argument enclosed by a pair of double quotes,\ninstead of the following four arguments\n\"path/to/k\" crossgen --in \"path/to/target\"\nWe can resolve the problem by changing the command to\nbatchfile\ncmd /C path/to/k crossgen --in \"path/to/target\"\ni.e. removing the double quotes around first argument.\nHowever, it introduces a new problem:\nif path/to/k contains spaces, it breaks the command if we don't double quote it.\n. Just tried but it didn't work.\nWe can quote all quoted arguments with an extra pair of double quotes to resolve the problem. Please check my latest commit. It executes\ncmd /C \"\"path/to/k\" crossgen --in \"path/to/target\"\"\ncmd.exe gets the correct arguments after it strips the leading quote and removes trailing quote.\n. Since we don't have a Main/Program class as an entry point in this shared project, I chose the RuntimeBootstrapper. Not sure why it might be broken on mono. Please let me know the result after you verify it.\n. @davidfowl  , will we have Environment.SetEnvironmentVariale() in CoreCLR? Passing the proxy address as an argument is not desirable, it's a long calling chain from here to the actual method that needs this address.\n. Because we don't want to report an error when executing k run arg1 arg2. Assume the app in current directory is MyProgram, k run arg1 arg2 should be translated to MyProgram arg1 arg2. Without setting this flag to false, we will get an error message \"unexpected argument arg1\" output by command-line parser.\n. Right, it doesn't break error checking in top level k:\nPS C:\\Users\\wwa\\Documents\\ProjectK\\tmp\\KRuntime> k --foo\nSpecify --help for a list of available options and commands.\nTODO: Error: unrecognized flag '--foo'\n. yes, but following @davidfowl 's suggestion above, we don't need it anymore :smile: \n. Just checked .NET reference source (http://referencesource.microsoft.com/#mscorlib/system/io/filestream.cs#567) and\nc#\nnew FileStream(\n  result.CacheFileName,\n  FileMode.Open,\n  FileAccess.Read,\n  FileShare.Read | FileShare.Delete,\n  8192 /*bufferSize*/,\n  FileOptions.Asynchronous);\nis equivalent to\nc#\nnew FileStream(\n  result.CacheFileName,\n  FileMode.Open,\n  FileAccess.Read,\n  FileShare.Read | FileShare.Delete,\n  bufferSize: 8192,\n  useAsync: true);\nI'll make them consistent.\n. It can be an internal class\n. The nested class HttpSourceResult has to be public since we have\nc#\npublic async Task<HttpSourceResult> GetAsync(string uri, string cacheKey, TimeSpan cacheAgeLimit)\nReturn type cannot be less accessible than method.\n. MS Build produces warnings \"Output directory does not end with a slash\", so I fix those warnings by the way\n. It's a duplicate of Trace.cs in Microsoft.Framework.Runtime.Common. So I add a reference to Microsoft.Framework.Runtime.Common in this project and delete the Trace.cs in this project.\n. I did experiment before writing this and found Directory.Exists(null) returns false.\n. We don't abort the restoring process, although the text in red indicates something is wrong. Think about the error in red \"Unable to locate PackageName >= 1.0.0.0\" when kpm restore cannot locate a package. They are similar.\n. No, this condition must be the last one. The logic behind this condition is: if given path is not a directory AND given path is not a project.json file AND given path is not a global.json file AND given path is not null, we throw an exception. It is totally Ok if argRoot.Value is null. What unacceptable is that argRoot.Value is neither null nor a valid file path.\n. See the contentFiles (which is constructed from project.ContentFiles) above. It only contains files because PathResolver.PerformWildcardSearch(path, pattern) doesn't return directories, even the directory contains a file which matches given pattern. So we have to explore files under a directory in order to know whether we should include this directory.\n. binFolderPath is approot\\src\\MainProject\\bin, while appFolderBinPath is wwwroot\\bin. approot and wwwroot are siblings.\n. BTW, exploring a dir doesn't mean we copy it. We only create the dir in destination when there is a file in it needs to be copied.\n. So we don't need MainProject\\bin ? I just wanted to keep the completeness of MainProject. If you don't want bin in approot\\src\\MainProject, I can delete this logic.\n. AspNet.Loader.dll\n. I think **\\* is good. Just tested and it works well.\n. Change of Helios and app layout makes bundled packages useless. So you want this change to be made in another PR?\n. It's public app folder (i.e. wwwroot if you do --appfolder wwwroot).\n. No, it cannot be an else condition to the previous if. Please read my comments above File.Delete and you will see a case where, after File.Delete executes successfully, the file still exists. The basic idea is: if process A opened a file with FileShare.Delete, process B can successfully perform File.Delete on that file even it's still open. However, the file won't be actually deleted until process A close the handle to it.\n. If CacheFile still exists after you perform deletion on the CacheFile, it means some other process just updated the CacheFile and opened it. If the CacheFile is already updated, we don't need to update it again with the same content. So we simply point the result to it.\nThe rationality behind this logic is that, because this case will only happen when you run multiple kpm restore simultaneously (i.e. they are accessing the latest package feeds at the same time), we can safely assume that all kpm restore are intending to update a specific global cache file with the same content. So if one kpm restore successfully updates a specific global cache file, all other kpm restore can safely use the updated cache file without updating it again.\n. Ah, good point!\n. One reason we have IReport interface is that we want the class implementing IReport to maintain a lock, which is used to serialize output of multiple threads. If we add parameterless WriteLine as an extension method, it cannot share the lock used by a class underneath IReport interface. So I guess we should add parameterless WriteLine into IReport interface and implement it in Program.cs with the lock here: https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.PackageManager/Program.cs#L223\n. Changed to excludeSet in the latest commit.\n. Fixed\n. It's already called : )\n. Fixed\n. Because we need the result immediately after FindLatestVersion returns. So I didn't see any benefit of making FindLatestVersion async. Do we always make async calls as much as possible?\n. Fixed\n. Currently, no. We are writing error information as common information throughout KRuntime.\n. restoreOperations.FindLibraryCached doesn't do that. I should add check for exact version.\n. This PR is aim to fix the parent issue #520 , which is only related to handling unexpected arguments. Defining an argument in test command is adding an expected argument, which is non-relevant to this issue. Moreover, handling expected argument is already tested here:\nhttps://github.com/aspnet/KRuntime/blob/allow-no-throw-on-unexpected-options/test/Microsoft.Framework.CommandLineUtils.Tests/CommandLineApplicationTests.cs#L32\n. I am moving all the argument processing/error checking from https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.PackageManager/Program.cs#L69 into the RestoreCommand to make them reusable. If we don't make this change, we have to write the same code again in InstallCommand because InstallCommand is invoking RestoreCommand.\n. Enumerable.Max() doesn't have an overload accepting a comparer. Also, I don't think making PackageInfo implement IComparable is good enough here. Comparing PackageInfo with only one of its property (Version) only works for the scenario here. Exposing this comparison to public may cause troubles later.\nCan I encapsulate the max version look-up logic into a private method like this?\nc#\nprivate static PackageInfo MaxByVersion(IEnumerable<PackageInfo> source)\n{\n  return source.Aggregate((acc, next) => next.Version > acc.Version ? next : acc);\n}\n. Please first have a look at the value assignment of Reports.Verbose here: https://github.com/aspnet/KRuntime/blob/kpm-quiet-option-hides-http-requests-during-restore/src/Microsoft.Framework.PackageManager/Program.cs#L76\nLet's assume --quiet is specified, then there are two possible cases:\n1. --verbose is not specified, then Reports.Verbose points to a NullReport object, which swallows WriteLine() operation and do nothing else. So it is quiet.\n2. --verbose is specified, then Reports.Verbose points to the same IReport object as Reports.Information, which prints to console. So --verbose wins.\n. There is no IReport passed to PackManager. Actually, only install, restore and add are using IReport. Do we want to start to use IReport in PackManager in this PR?\n. Created the issue #589 \n. You are right, subcommands should share the Reports object. Please check the latest commit.\n. Fixed it. Nice to know a new keyword :smile: \n. This is an unused local variable. I deleted it by the way.\n. Fixed. Also fixed same problem in NuGetPackageFolder.\n. This information is output only when there are missing dependencies found during kpm pack or k run. In these two scenarios, we cannot determine whether kpm restore is failed or not.\n. Good idea! Fixed in the latest commit.\n. Sorry I misunderstood the requirements. Fixed in the latest commit.\n. As my comments suggest, we want to get accurate package name (i.e. package name in correct casing) here. This accurate name will be used to do casing check before installation of the package.\n. Fixed in the latest commit.\n. Fixed and tested\n. The functional test depends on nupkgs of KRE. So we run unit/functional tests after package-runtime\n. Ah, yes, I should do the cleanup\n. I guess straightforwardly showing dir structure in code makes it easier to read and modify. You don't have to switch between files in order to learn about the test cases. Other reviewers, please feel free to share your opinions.\n. Fixed\n. Path.GetRandomFileName() cannot guarantee that the file doesn't exist. I want to avoid collisions, although they are rare.\n. Fixed in the latest commit.\n. @davidfowl , if we don't make this change, when we are offline, FindLibraryBySnapshot with remote providers returns null and then this method (FindLibraryCached) returns null, which means Unable to locate .... However, if there is a local package falling into the version range, we should return it, instead of null. So I call FindLibraryBySnapshot with local providers to retrieve local package here when remote retrieval finds nothing.\n. This behavior is correct when --ignore-failed-sources is specified. The only problem is that, do we want this behavior when we are online? That is, if all remote sources are accessible but they don't contain the desired package, do we want to show Unable to locate ..., or we want to check whether there is a local package falling into the version range and use the local one if available.\n. Make them write to quiet channel so that when you do kpm build --quiet, it shows nothing but\n```\nBuild succeeded.\n    0 Warnings(s)\n    0 Error(s)\nTime elapsed 00:00:05.7701646\n```\nSo we don't like it?\n. Fixed\n. So we want some comments here? Or we want to fundamentally change the approach for log level?\n. We don't know which version of Microsoft.AspNet.Loader.IIS.Interop we should use here. Here we are searching/looping over the dependency set to find out the version we depend on.\n. No, root.PackagesPath is destination, while this one is source.\n. Fixed\n. Agree. It's also true for PackProject and PackPackage. I'll fix them in another PR #686 \n. This lock is useful because when we do kpm restore, we will have multiple threads writing to a single IReport concurrently. The lock here prevents interleaved output.\nSo I guess we should move the locking to somewhere instead of deleting it.\n. Fixed\n. Fixed\n. Thank you for the suggestion, the code is much simpler now.\n. For JSON used to represent directory layout, we use single quotes for simplicity. For contents of project.json or global.json, we use double quotes because JSON.NET always generates JSON with double quotes.\n. Fixed\n. Fixed\n. By turning on KRE_TRACE, I find that the project is only compiled once. So I guess we only build things once here. The caching logic is not obvious and I am still looking at code.\n. ProjectLibraryExportProvider is caching build results, so this doesn't cause things to build twice.\nhttps://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.Runtime/ExportProviders/ProjectLibraryExportProvider.cs#L53\n. Added comments to describe the intention.\n. Exports reusing was added in the latest commmit\n. Need a rebase. We have ApplicationHostContext.LibraryManager now.\n. Introduced DisposableDirPath class in the latest commit.\n. There is another PR containing newly added functional tests. Let me fix this problem in a separate PR, after #825 and #788 are merged in.\n. It's only the header of help information, because verifying header of help information is enough here. The header doesn't change frequently. Moreover, help information header is not a constant that can be shared, it's dynamically generated:\nhttps://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.CommandLineUtils/CommandLine/CommandLineApplication.cs#L311\n. Extracted this method to a shared util class because I thought kpm wrap might need it. Turns out kpm wrap doesn't need to call this method. But I think sharing this method across projects is still a good thing, so I keep it here.\n. Reply to @davidfowl 's previous comments:\nTo get the entire closure, we are adding items into projectFiles while iterating it. So foreach doesn't apply here.\n. This is a csproj, it cannot add Microsoft.Framework.CommandLineUtils as its reference.\n. It's renamed in a pending PR https://github.com/aspnet/KRuntime/pull/788 . So let's leave it untouched here.\n. Fixed\n. Fixed in the latest commit\n. Fixed\n. Added --msbuild option for more flexibility.\n. Fixed\n. @lodejard , here is the ugly part of this approach: since we are calling MSBuild on ReferencesResolver.xml, instead of the original csproj file, MSBuild thinks ReferenceResolver.xml is the project file. All assembly/reference paths are generated using a ReferenceResolver.xml as base. MSBuild cannot find references using relative paths and it gives warnings and we need to correct paths before using them.\n. This batch file will always run on Windows, no matter which platform generates it. Although Windows can deal with both / and \\, I am using hard-coded \\ to make it explicit that we are generating batch file for Windows.\nThe code generating bash script is symmetric, using hard-coded /:\nhttps://github.com/aspnet/KRuntime/pull/788/files#diff-1d4ec359a00b16ff44a167b9d7df009dR124\n. This property is pointing to the standard toolset when not specified: http://msdn.microsoft.com/en-us/library/bb397428.aspx\n. Should use SetPropertyValueIfEmpty after #914 is merged in\n. You mentioned that, for assembly path, we want to always use / as separators. I am doing the same thing here.\nPathUtility.GetRelativePath() is using Path.DirectorySeparatorChar\n. Fixed\n. Ah, I see. If a project.json file is not in source path specified in global.json, we shouldn't count it as a project under this solution.\n. Thanks. Fixed.\n. Fixed\n. Fixed\n. For each KRE to be tested, we create a unique KRE home path for it. For example, for a local build of KRE version 1.0.0, the following 4 KRE homes are generated by test utils:\n<TempDir1>\\packages\\KRE-CLR-x86.1.0.0\n<TempDir2>\\packages\\KRE-CLR-amd64.1.0.0\n<TempDir3>\\packages\\KRE-CoreCLR-x86.1.0.0\n<TempDir4>\\packages\\KRE-CoreCLR-amd64.1.0.0\nThis line is used to get root path of the KRE we are currently testing against,\n. Since each KRE home only contains one KRE package, it's safe to do the First() operation.\n. I should add comments for this.\n. You mentioned that properties that we add to the existing  project.json  files should not overwrite what is already there. Here are all the cases where we don't update property values:\nFor an existing wrapper project.json\njson\n\"frameworks\": {\n  \"net45\": {\n    \"bin\": {\n      \"assembly\": \"Path/to/assembly\",\n      \"pdb\": \"Path/to/pdb\"\n    },\n    \"dependencies\": {\n      \"NuGetDependencyA\": \"1.0.0\",\n      \"ProjectDependencyB\": \"1.0.0\"\n    }\n  }\n}\n1. If net45 bin/pdb path of original csproj is changed to a new path and kpm wrap is called again, net45 bin/pdb path in project.json above is NOT updated.\n2. If net45 dependency NuGetDependencyA of original csproj is changed to a higher version and kpm wrap is called again, the version of NuGetDependencyA in project.json above is NOT updated. It's also true for project dependency versions.\nDoes it look good?\n. Ok, I will fix it soon.\nSo I guess we should always overwrite property values because I cannot come up with a property that we shouldn't overwrite after original csproj is updated. If you can think of such a property, please let me know. Thanks.\n. Ah, I see! We do have some properties that we don't update if exist:\n1. version property of project.json. If it already exists, we shouldn't overwrite it with the default version 1.0.0-*\n2. version of project dependency. If it already exists, we shouldn't overwrite it with the default version 1.0.0-*\nThe value that a property above already has, is either default value 1.0.0-* or user-edited value. So we should never update those properties.\nBut we should always update NuGet dependency versions and bin/pdb paths.\nFixed in the the latest commit. @davidfowl , thanks for patience :smile: \n. Fixed\n. Changed to\nbool TryResolveReferences(out XDocument resolutionResults, out string errorMessage)\nand always log errors when failed to resolve.\n. Thanks. Fixed.\n. I think it's better to add a name for the last argument:\nPathUtility.GetRelativePath(targetProjectJson, targetWebRootPath, separator: '/');\n. Please add a name for the argument / here, too.\n. Yeah, it does make the code cleaner. Added in the latest commit. Also rebased.\n. Thanks for the nice hint. I just realized that I shouldn't assert the exit code of MSBuild.exe because it's only used to generate artifacts that our tests depend on.\nI added assert for the output of ConsoleApp1, which will fail if any previous operation (including MSBuild and kpm wrap) fails to generate correct output.\n. Fixed\n. (Debug|Release|Custom)\nwe might want to make it something like (Debug|Release|{Custom}) to prevent users from using Custom directly as a value of configuration.\n. Fixed\n. Nice point! And I just realized that we should disable functional tests for kpm wrap on non-Windows platforms because kpm wrap can only run on Windows.\n. If there is an existing project.json for target wrapper project (i.e. LocateExistingProject returns a non-empty path), we don't need to create one under wrap folder, then there is no need to add wrap folder to global.json \n. Yeah, just pushed that part. Please check the latest commit.\n. Fixed\n. Moving initialization of IsHttp here can simplify extraction of shared code (PackageSourceUtils.CreatePackageFeed()). Moreover, the source argument already contains IsHttp information, so passing isHttp introduces duplicated info.\n. Yeah. I'll change it to return (source is NuGetv2Feed) || (source is NuGetv3Feed) when we have that change. Will add TODO comment here.\n. I didn't add any new reference in this change but tpa.cpp is modified by build script. I can put this change in a separate commit. cc @troydai to confirm there is nothing wrong with this part.\n. Nice suggestion! Followed the second approach.\n. Thanks for the clarification. The update of TPA list is checked in with a separate commit.\n. Removed the TPA list change in this PR\n. If the structure of a folder doesn't conform with NuGetPackageFolder, we always assume it is a KpmPackageFolder. So I remove NonExistentPackageFolder and move the logic to KpmPackageFolder. Do you like this approach? https://github.com/aspnet/KRuntime/commit/b34cda0ac6924c8e911133bb6198bd36fa89b855\n. Yes, it's simplification. Without it, we have to process the first line in sets as a special case.\n. The indexing system of kpm packages commit consistently uses / as path separators. So we'd better keep this replacement in case folderPredicate or artifactPredicate depends on / as path separators.\n. Filed an issue: #1062\n. Splitted in the latest commit\n. strcpy_s() works for char arrays but we need the version for wide char (WCHAR) arrays. The secure version of lstrcpy() is StringCchCopyW():\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/ms647490(v=vs.85).aspx\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/ms647527(v=vs.85).aspx\n. Nice catch! We can use _wcsnicmp(str1, str2, max_count) here.\n. Since RuntimeBootstrapper already does the following expansion:\nklr /path/to/MyApplication.dll --->  klr --lib /path/to/ MyApplication.\nSo we only need to generate --appbase /path/to/ part with C++ in this case.\nKeeping logic here helps to reduce C++ code.\n. Sorry I didn't notice the dot. Yeah, it reveals a bug and I just fixed it in the latest commit. After fix:\n\n. It was a temporary backup and that line was for testing & debugging. Please check the latest commit.\n. Thanks. Fixed.\n. Fixed. Returns 1 in this case\n. Fixed\n. Fixed\n. Nice idea. Implemented in the latest commit.\n. Fixed\n. It's a great idea which makes future renaming much more easier. However, we want to check in the renaming as soon as possible. This can be done in a separate PR.\n. Not needed anymore. We just removed this: https://github.com/aspnet/XRE/commit/65473b0a6199d9c886f358d9057cc46c35255d82\n. Feels like a fair fragment of code can be shared between RestoreForInstall and RestoreForProject. Can we have GetPackagesToInstall(IEnumerable<RestoreContext> contexts, IEnumerable<LibraryRange> seeds), which can be shared by the two methods? The result returned by GetPackagesToInstall can be consumed by InstallPackages directly.\n. Too complicated. How about the following approach:\nc#\nvar missing = expect.Except(actual);\nvar extra = actual.Except(expect);\nif (!missing.Any() && !extra.Any())\n{\n  // They are equal\n}\n. Looks like we are reinventing some functional test utils here: https://github.com/aspnet/XRE/tree/dev/test/Microsoft.Framework.FunctionalTestUtils\n@davidfowl , we need to decide the DSL used to describe directory structures. Do we want the plain list above, or we want a single JSON string like:\nc#\nvar expectedOutputDir = @\"{\n  '.': ['project.json', 'Config.json', 'Program.cs', 'build_config1.bconfig'],\n  'Views': {\n    'Home': ['index.cshtml'],\n    'Shared': ['_Layout.cshtml']\n  },\n  'Controllers': ['HomeController.cs'],\n  'Models': ['User.cs', 'build_config2.bconfig'],\n  'Build': ['build_config3.bconfig'],\n  'packages': {}\n}\";\nPlain list is straightforward but has some redundancy. JSON describes the dir tree structure in a intuitive way but might need more effort to understand.\n. Yes, please check functional tests for kpm bundle: https://github.com/aspnet/XRE/blob/dev/test/Microsoft.Framework.PackageManager.FunctionalTests/KpmBundleTests.cs#L49\n. Yeah, it's not a performance-critical part. We prefer readability over performance.\n. If we represent empty folder as\nc#\ncontext.AddFiles(\"src/empty/\")\nthen flatten list is as expressive as JSON dir tree.\n. @troydai , can you add\npublic static DirTree CreateFromList(params string[] fileRelativePaths)\nto\nMicrosoft.Framework.FunctionalTestUtils.DirTree\nand use DirTree class? DirTree already does the work you need here and it also contains some other handy utils.\n. A little bit more than that, we want to print out missing items and extra items when they are not equal. It's very helpful when you want to investigate a failed test case.\n. Filed an issue: https://github.com/aspnet/XRE/issues/1184\n. Preprocessor only flips public to internal, we still need to include the code if we want to use them.\n. Seems there is no way to add a fallback. We'll leave it for now and see whether it can lead to some inconvenience.\n. Thanks to @Praburaj 's follow-up. I just git cloned XRE via https and tried restore submodules. With git@github.com protocol, we do need to provide credentials. Using https urls for submodules is more convenient.\n. Submodules are never cloned for dev purpose. We won't change anything inside them and we won't push to repos from submodules. So I guess using https is fine and it is convenient by allowing you to fetch submodules without credentials.\n. Since Coherence-Signed didn't pass and your change didn't get in, I'll push the current implementation to unblock @anurse for now. I will change it to use more accurate info in another PR.\n. Tried both submodules/*/src and submodules/**/src but none of them works (test folder in submodule projects were not filtered out). I'll file an issue for sources supporting globbing.\n. Do we want to prevent failure caused by path with a trailing separator (e.g. %userprofile%\\.k\\runtimes\\kre-clr-win-x86.1.0.0\\bin\\)?\nI guess kvm guarantees a bin path without trailing separator. However, I think we don't want to be broken silently by kvm changes later, or runtime bin path manually added by a user.\n. \"Cannot resolve the active runtime name\"?\n. \".... Use \\\"active\\\" for current runtime in PATH\"?\n. newLevel = OffLevel?\n. @davidfowl , you mentioned that SHAs should never be written to disk in theory. However, without the precomputed SHA on disk, it may hurt the performance of this part.\n. If we are packing a project without lockfile, we don't want leftover lockfile from previous output\n. Add TODO comments?\nc#\n// TODO: use Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) when it's available on CoreCLR\n. Should be\nc#\nreturn project != null;\n_projects contains potential project dirs that can be non-project dirs.\n. Should make the lookup based on _checkPackageIdCase:\nc#\nvar stringComparer = _checkPackageIdCase ? StringComparer.Ordinal : StringComparer.OrdinalIgnoreCase;\n_lockFileLibraries = lockFile.Libraries.ToLookup(l => l.Name, stringComparer);\n. Created new type for it.\n. We do have several places using this\n\nI can add a method to NuGet.PathUtility. Does PathUtility.GetForwardSlashSeparatedPath(string path) sound good?\n. When last time we change .NET back to KRE, we decided to leave this part because it doesn't have any impact and we knew there would be another renaming.\n. Ah, yes, fixing\n. Fixed. The bootstrapper for mono is special, so I left it out. All other file names containing 'klr' should already be renamed.\n. Yes, this is the one I got after doing build verify\n. Good point, fixed\n. Talked to @muratg , we'll leave it for now for consistency with k.cmd\n. legacyName: \"resources\", same for lines below\n. path => path.StartsWith(\"shared\" + Path.DirectorySeparatorChar)\n. Use DefaultPackagePathResolver to get install path\n. Use DefaultPackagePathResolver to get package install path\n. Do we want to show warning here?\n. Some other test cases might do kpm restore in the test app and generates a lockfile there. However, this test case is testing the scenario where a project doesn't have lockfile. Adding this to make it robust.\n. Ah, you are talking about the hard-coded lockfile name. Will fix\n. It means we need to clone a TargetFrameworkInformation instance each time Project.GetTargetFramework() is called.\nTo be consistent, we even need to clone all frameworks each time Project.GetTargetFrameworks() is called.\nToo expensive. Do you still want it?\n. I mean deep clone above\n. Fixed\n. Version int.MinValue is always out-of-date. We use this way to mark a lockfile as invalid.\n. defaultValue means this value should be used when there is no version property. Here we want to use int.MinValue when version property doesn't appear in lockfile.\n. Fixed\n. Actually that's the key of metadata, not a type name:\n\n@glennc , is the metadata key and value case-sensitive? Do we accept\n[assembly: AssemblyMetadata(\"serviceable\", \"true\")]\nin addition to\n[assembly: AssemblyMetadata(\"Serviceable\", \"True\")]\n. CommandLineApplication is shared by a lot of command-line tools. We shouldn't show this string when you check help info of kpm and dnx.\nI suggest we add a FullName property, which can be set by users of CommandLineApplication\n. No, Helios is not reading this key\n. Not an issue for this thread\n. Thanks, opened an issue: https://github.com/aspnet/dnx/issues/1496\n. Fixed\n. In addition to null value check, I guess you also want to check the case where sourceFilePath is a path ending with path separator (i.e. a path to dir). In this case, fileName is string.Empty.\nSo I suggest use string.IsNullOrEmpty(fileName)\n. Bundling?\n. I am using FullName\n. Path.GetFullPath() doesn't help here.\nTo make it clear, projectPath is a directory, that may have a trailing slash. We want to get the parent dir of projectPath.\nThe current approach is the most readable one. If you think newing an object here may increase program startup time, I can do a na\u00efve trailing slash removal here (which actually is creating a new string object, so there is no too much difference).\n. Path.GetDirectoryName(\"this/is/a/path\") returns \"this/is/a\"\nPath.GetDirectoryName(\"this/is/a/path/\") returns \"this/is/a/path\"\nPath.GetFullPath() doesn't remove trailing slash for you\n. @davidfowl \nnode.Item.Match.Library.Name is the package ID used by installation and lockfile. We correct its value to ID used in runtime dependency graph. So everything is agreeing on the ID used by runtime dependency graph.\n. @davidfowl , I fixed the bug with this minimal change.\npackage.Id is read from nuspec of an installed package and its casing might be wrong. Here we use the package name from runtime dependency graph as corrected package name.\n. Should follow naming convention and make it optParallel\n. RestoreCommand.RestoreInParallel? Should we get rid of unnecessary redundancy and make it RestoreCommand.Parallel?\n. Yes, please check the screenshot above\n. Why do we skip mono?\n. I think we still need the coverage on Mono. Can we fix it by using System.Environment.UserName or something similar?\n. Yeah, I also removed this part during dnu refactoring\n. Why do we replace memStream.Seek(0, SeekOrigin.Begin); with this?\n. Yes, please revert it. I guess it's better to use the same approach consistently.\n. We'll remove it in later refactoring. Reports is still used by some utils inside RestoreCommand\n. Yeah, we can do this after we extract dnu from dnx. Filed an issue: https://github.com/aspnet/dnx/issues/1670. We might need to move this issue to dnx repo later.\n. I remember this typo was fixed by me... Seems I reintroduced it by copy-paste some old version of this file. Fixing.\n. Yes, fixing\n. Not dead code. See explanation in DNU REFACTORING TODO above\n. See DNU REFACTORING TODO above. This is the old implementation temporarily used by dnu publish for incremental refactoring. We will remove this after we refactor dnu publish later. The new implementation of this method can be found below and dnu restore is already using it. Later we'll make dnu publish use the new implementation, too.\n. @emgarten @davidfowl , I added the missing compatibility check above, please help to review. Thanks.\n. Yes, the failure will be caught by later assertion. We are not testing dnu restore here so we don't assert on the exit code of dnu restore\n. Yeah, \"assembly\" sounds more formal. Fixed\n. It is used to locate the root of current solution (the ancestor folder containing global.json). This method is used widely in our runtime and functional tests.\n. This feature was removed from C# 6\n. I discussed this with @davidfowl yesterday. There are two possible solutions when a user runs into this:\n1. Switch to another flavor of runtime\n2. Add a proper framework into frameworks section of project.json\nWe don't know which one the best suggestion because both of them are possible. So we came up with a summary that covers both case:\nPlease make sure the runtime matches a framework specified in project.json\n. @davidfowl , seems it's better to give concrete and concise suggestions instead of a short summary without any instruction. I'll go with @Eilon 's suggestion and this should save us from answering numerous questions\n. I guess it still makes sense when my project (no matter it is web app or console app) has project.json\n{\n  \"frameworks\": {\n    \"dnx451\": { }\n  }\n}\nbut run the project with dnx-coreclr (without helios)\n. An error page can be a valid XML file, so we use the default namespace to tell whether it is a valid NuGet service response\n. No, just because we need at least one await in an async block to get rid of warning. We can also remove the await here and return Task.FromResult(0) below. But there is no big difference I guess.\n. Yeah, you can say it is an invalid operation if you send HTTP requests to a server that responds with wrong contents. However, I guess using FormatException can give users more intuitive understanding of what is wrong here.\nWhat's the principle you are following when you decide to use InvalidOperationException?\n. The reading logic is in TryCache() and it is calling this method, too: https://github.com/aspnet/dnx/blob/wei/invalidate-illegal-http-cache/src/Microsoft.Framework.PackageManager/Restore/NuGet/HttpSource.cs#L215\nThere is no duplicate of this logic.\n. I see. Then I'll use InvalidOperationException instead. Thanks for the detailed explanation!\n. I am moving this method to a more common util class, which is accessible in a bigger scope.\n. I am moving existent code to a helper method. Fixing cross-platform issues should be done in a separate thread. I filed an issue for it: https://github.com/aspnet/dnx/issues/1813\n. This util is also used by some other commands like dnu restore. We don't want to install the identical package ten times during dnu restore\n. Did you forget to do that part during renaming?\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime.Abstractions/CallContextServiceLocator.cs#L4\n. Fixed\n. Fixed\n. @moozzyk , added SHA update verification here\n. Can we generate this dynamically by calling dnu restore in tests? Then we don't need to update this later when we change lock file format.\nYou can generate a lock file for HelloWorld sample project by calling this: https://github.com/aspnet/dnx/blob/dev/test/Bootstrapper.FunctionalTests/BootstrapperTestUtils.cs#L35\n. Widely spreading problem in our tests, let's fix it in a separate PR.\n. Issue opened here: https://github.com/aspnet/dnx/issues/1823\n. The first condition should be (first >= '1' && first <= '9')\njson\n{\n  \"num\": 01\n}\nis an invalid JSON\n. Wait, we should also consider\njson\n{\n  \"num\": 0\n}\nwhich is a valid JSON. Need more sophisticated logic here\n. Yeah, let's throw inside JsonNumber. It's not complicate if we do it there.\n. I see this several times. Can we encapsulate it with something like\nc#\nSomeUtils.IsMono(IServiceProvider)\n. And IsWindows as well\n. Create a constructor taking isMono as a parameter.\n. I guess it's better to have PublishRoot.IsMono instead of passing it in this way.\n. Adding re-throw here can fix https://github.com/aspnet/dnx/issues/1804\n. Yes, see FileOptions.DeleteOnClose option below :smile: \n. Let's do some cleanup by the way. Use var here.\n. I suggest we follow one consistent pattern in this file. That is, for class XYZCommand, we pass environment info/services it needs to its ctor and XYZCommand.Execute() should take no parameter.\n. Same here. Runtime info should be passed to ctor and ExecuteCommand() should take no parameter.\nPlease help do some cleanup BTW, let's rename this WrapCommand.ExecuteCommand() to WrapCommand.Execute() to remove redundancy in the name.\n. If we can do this, why do we want to pass IServiceProvider/IRuntimeEnvironment around? If we have a global instance of service provider, can we just have a property RuntimeEnvironmentHelper.IsWindows, in which the boolean is lazily evaluated with this global service provider?\n. @Eilon , I bet you have a better idea about help text of the argument here. This argument can have multiple values:\ndnu restore <path1> <path2> <path3>\nThe three paths are all values of the argument [root]\n. Yeah, roots is not a clearly defined concept. It's better to use known concept project. Will change to projects\n. I am going to make the change mentioned by @davidfowl below. So if there is no project.json in given folder, we recursively traverse all subfolders and restore for all project.json we see. So we need to revise the help info a little bit:\nList of projects and project folders to restore. The values can be: a path to project.json or global.json file, or a folder having project.json in subfolders\n. Why? Shouldn't it be\nc#\nvar useConsoleColor = RuntimeEnvironmentHelper.IsWindows\n. +1\nI guess David means string.IsNullOrEmpty(dependencyVersionAsString?.Value)\n. Yeah, this is an interesting topic. @davidfowl \nDoes this mean we should always avoid string interpolation and use string.Format() instead? Looks like string interpolation is not localization-friendly.\n. Yeah, I see your point. The problem is that, even I fix the {action} part, we still have\n$\"One or more frameworks were added to {Project.ProjectFileName}\"\nwhich is still not localizable. That's why I am asking whether we should use string.Format() instead :smile: \n. Ok, I'll remove the ternary operation to make future change easier.\n. If we run into this case, it means that the user is trying to do something like\ndnu help invalid_subcommand\nWe may want to make the message more friendly:\n$\"'{commandName}' is not a subcommand of '{cmd.Parent.Name}'\"\n. Without this, you'll see\n\n. Without this, you'll see\n\n. This file will be compiled by Mono msc compiler, which doesn't support string interpolation. So using string.Format() here\n. endIndex < text.Length? Otherwise it will throw \"index out of bounds\" in edge case where text has the value of \"\\x1b[\"\n. I mean, when text is \"\\x1b[\", endIndex is 3, while text.Length is 2\n. var\n. To make it work with RestoreCommand class, we need this public setter. RestoreCommand cannot finalize the value of Reports when it is constructing ScriptExecutor, so setting IReport with constructor is not enough.\nWe may need to redesign RestoreCommand to get rid of this but it's a separate topic.\n. Good point\n. DNX_TRACE is turned on by default in our TeamCity CI and you'll get extra info in output.\nUse Assert.Contains() or turn off DNX_TRACE in the subprocess with something like:\nhttps://github.com/aspnet/dnx/blob/dev/test/Bootstrapper.FunctionalTests/BootstrapperTests.cs#L114\n. Yeah, I wanted to avoid deeply nested using statements here. With FileOptions.DeleteOnClose option, the temporary file will always be deleted if status code is not successful or response content is invalid\n. We can keep this. In previous approach, @BrennanConroy 's changes conflict with mine so I asked him to make this change. All other XYZCommand.ExecuteCommand() has been renamed to XYZCommand.Execute() by me. This is the only one left.\n. Yeah, previously without the utils added by this PR, we have no way to tell the OS we are running on. So we assumed IsMono == non-Windows. Now we are fixing this.\n. Sounds good. This is a shared util method and putting OS check in it makes code DRYer.\n. Based on our naming convention, should be GetHeadCommitId. (We have HttpSource instead of HTTPSource)\n. What's the point of having so many lines of code here if you don't need to display the output of subprocess while it is running. Can we just use proc.StandardError.ReadToEnd()?\n. Is it guaranteed that whereis is always installed? Should we just start a subprocess and check whether it throws certain kind of exception?\n. repository section -> \"repository\" property? I guess section is not a common term we use when talking about JSON\n. We have DNX_PACKAGES instead of DNX_PACKAGES_DIR. Let's follow the same naming convention.\n. c#\nvar signaled = fileLock.WaitOne(5000);\nif (!signaled)\n{\n  // Timeout and retry\n  continue;\n}\n. Let's improve FilePathToLockName by adding some prefix to the value returned by this\nc#\nreturn $\"DNU_RESTORE_{filePath.Replace(Path.DirectorySeparatorChar, '_')}\";\nbecause if some other program is using the same naming convention as ours, it can be super difficult to debug.\n. \"lock file\" is not a correct term here.\nc#\n$\"Failed to acquire semaphore for file: {filePath}\"\n. TimeSpan.FromSeconds(20)?\n. This PR does help us capture a bug. We should use frameworkDirectory instead of version here\n. I'll append a commit after this one to fix this. @hishamco , you should run build verify locally and make sure the build succeeds before submitting PRs :smile: \n. If you see dependency issues, do dnu restore before your dnu build, or simply do ./build.cmd in root dir and it should take care of everything for you.\n. Looks like we don't compile this file on Linux/mac, which needs dnx.coreclr.unix/dnx.coreclr.cpp. This change should be exclusively for windows.\n(BTW, Travis CI passes below)\n. Use Microsoft.Framework.Runtime.Project.ProjectFileName?\n. For v3 feed, FindPackagesById() becomes constructing the URI by ourselves and check whether the URI points to a JSON. A 404 page means the packages is not on this feed.\n. For v3 feed, FindPackagesById() becomes constructing the URI by ourselves and check whether the URI points to a JSON. A 404 page means the packages is not on this feed.\n. Think about this scenario:\nYou have two feeds in NuGet.config: FeedA and FeedB\n100 packages your app needs are only available on FeedA and 1 package your app needs is only available on FeedB.\nDo we want to fail and retry the 100 packages on FeedB even they are not there?\n. Thanks. Fixed.\n. fixing\n. The method OpenNuspecStreamFromNupkgAsync will use OpenNupkgStreamAsync to open a nupkg stream and find out the nuspec entry and open a stream to that entry.\n. Sorry we didn't know that. But current approach is not incorrect, it still works. Moreover,  seeking the nuspec entry in nupkg stream is faster than sending a separate nuspec download request.\n. :+1: Or simply do not have short option for this.\n. We want to resolve the lockfile read/write conflicts in this PR. However, this will retry even when some other kinds of exceptions are thrown. Is it possible that we narrow down to a more specific exception?\n. Or follow the convention used by dnu publish, use -o | --out\n. _services?\n. Fixed\n. fixed\n. Good point! It's possible that we have more than one unknown framework. I should turn to AggregateException here, in order to represent multiple errors. Fixed in follow-up commit.\n. This diagnostics is for output purpose. The check will be done by caller of this method.\n. Why are we adding this? Seems we don't use this newly added variable\n. var bestDnxVersion = project.GetTargetFrameworks()\n    .Where(f => f.FrameworkName.Identifier.Equals(FrameworkNames.LongNames.Dnx))\n    .DefaultIfEmpty()\n    .Max(x => x?.FrameworkName.Version)\nfor shorter and clearer logic?\n. String interpolation?\n. Max() throws on empty sequence, we need to handle this case.\n. Seems this exception can be handled by the catch block below, but I guess the log there doesn't capture the empty sequence case.\n. It is in lock file on disk. However, we convert / to Path.Separator when we read a lock file into memory:\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.PackageManager/Restore/LockFileFormat.cs#L367\nI agree that we need really good tests. But the code here is correct.\n. I cannot see any benefit postponing the failure to build/publish. so let's fail fast to eliminate unnecessary confusion. Just pushed the fix.\n. Do we want something like RuntimeEnvironmentHelper.IsUnixLike (which is IsLinux || IsDarwin)?\n. Good point\n. After introducing lock file, this logic is never executed during runtime of your apps. It only happens during dnu restore.\n. We don't need string.Format here, IReport.WriteLine supports formatted output.\n. Can we fix a small bug here BTW? runtime can be a path to a runtime folder like\ndnu publish --runtime C:\\Users\\wwa\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta6-12208\\\nPay attention to the trailing slash : )\n. It is possible that some dnu commands install tests forget to redirect DNX_PACKAGES/--packages to a temporary package folder.\nFor my newly added tests, I always install to temp folders.\n. I would suggest new DirectoryInfo(runtime).Name instead of this. It is possible that we are on Windows but a user provides a path with trailing forward slash.\n. :+1: good catch. Fixed\n. Ok, removing comments here\n. auto?\n. It matters on case-sensitive filesystem. I filed a separate bug for it here: https://github.com/aspnet/dnx/issues/2270\n. Also added one more checkbox in https://github.com/aspnet/dnx/issues/1793\n. This is an environment variable DNX_GLOBAL_PATH, looks like some global DNX home set by MSI installer. Will make this a DnuFolderPath.\n. Yeah, it should be removed\n. NuGet.Settings.LoadMachineWideSettings(root) requires you pass CommonAppData as its root argument. Note that it requires CommonAppData, not CommonAppData/NuGet/Config because this method append /NuGet/Config to root by itself. I am following the same convention here.\n. But yes, I can make DnuFolderPath.UserSettingsDirectory return AppData/NuGet. Making the change now\n. It is AppData/NuGet, instead of AppData/NuGet/Config because the comments say so\n. The logic here requires that we use environment variable here (if DNX_HOME is set do ..., otherwise ...). So there is no DnuEnvironment.GetFolderPath() for this.\n. On my Windows 8.1, RuntimeEnvironment.OperatingSystemVersion returns different values on dnx451 and dnxcore50\nOn dnx451, it returns 6.2.9200.0\nOn dnxcore50, it returns 6.2\n. Because sometimes we only need diagnostics for lock file. Check the case below:\n\nIn this case, we should only include lock file diagnostics in the error message, instead of all diagnostics. Otherwise, you'll see \"unable to resolve Newtonsoft.Json\" twice\n. Here is the output when you don't have a individual property for lock file diagnostics:\n\nNote that it says\nSystem.InvalidOperationException: Failed to resolve the following dependencies for target framework 'DNX,Version=v4.5.1':\n   Newtonsoft.Json 6.0.0\nbut it also says\nC:\\AspNet\\Home\\samples\\latest\\ConsoleApp\\project.json(3,28): error: The dependency Newtonsoft.Json >= 6.0.0 could not be resolved.\nSo I am trying to get rid of the redundancy here.\n. :+1: \n. auto? Looks like we want to use auto whenever possible?\n. Do we want to log something when frameworkName is not empty but we fail to parse it?\n. We already tell users that we are retrying in error message part:\n\nMoreover, we have 3 or 4 similar retry logic in DNX, we should modify all of them if we want to change this one. That's beyond the scope of this PR. Can you file an issue and label it with suggestion?\n. Yeah, only NuGet is needed. Will delete useless ones\n. Removed\n. @davidfowl @anurse , added special case check\n. Yeah, we should mark it as incompatible with UnsupportedFramework issue type\n. We cannot null _compatibilityChecker out because it will be needed in another member method GetDescription\n. Ok, remove this and only leave the one taking OptimizedLockFile in\n. Because I wanted to save memory here by having a reusable lookup in OptimizedLockFile. If we make the lookup based on Tuple(id, version), then PackageRepository.FindPackagesById() cannot reuse this. Need to do profiling to make the tradeoff here.\n. My bad, didn't understand what you meant. Will do.\n. Yes, if you check compatibility for a framework that isn't present in lockfile. I can add check here\n. ApplicationHostContext\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Runtime/ApplicationHostContext.cs#L83\n. This case only happens when you check compatibility against a framework that is not present in your project.json. Following current logic in DNX, this should never happen. I added check with Debug.Assert, which is for impossible case.\n. You don't need to pass ProjectDirectory in because you have Project.ProjectDirectory\n. nit: follow convention and make it a one-liner\n. Why? How do you determine solution root if you don't have a global.json? I believe after you restore for HelloWorld, its dependency project HelloShared should be present in HelloWorld/project.lock.json. How does dnu restore find this dependency when you don't have a solution root?\n. I am blocking part of output here and that's why I don't name it suppress. Sounds like you are OK with blocking all output. Then I'll block all output by making packages add quiet. There is even no new option needed here. \n. Will block all output.\n. I see. Sounds good.\n. When publishing a starter web app, there are 160+ packages get published and it means that this method is going to be called many many times. That's why I create a constant to avoid allocating/deallocating numerous NullReport objects.\n. Fixed\n. DnuTestUtils.ExecDnu() is already printing out stdout and stderr to console for you:\nhttps://github.com/aspnet/dnx/blob/dev/test/Microsoft.Dnx.CommonTestUtils/TestUtils.cs#L91\nI guess it's pointless to dup the output to console here.\n. Will we get \"port already in use\" error if multiple test cases run in parallel?\n. NuGet.Constants.SettingsFileName?\n. Fixed\n. You need to be thread-safe here when you turn on parallel testing\n. Even after we make this thread-safe, it is not robust enough. What if we have both dnx/dev and dnx/release building on the same CI machine? The port conflict still exist. In worse case, TeamCity occupy the port 1774 and this test case always fails.\nWe should at least add some retry logic here. I would suggest use http://stackoverflow.com/a/150974/1560415 plus retry to make it robust enough. \n. RFC doesn't mention this is case-insensitive, let's make it User-Agent\n. My bad, it's case-insensitive. Ignore this comment\n. Looks like we don't need this anymore\n. It was generated by VS and I didn't touch it. I guess it's Ok to keep it like this.\n. We tested restoring for Mvc repo and the peak memory usage was about 500MB. Yes, we should remove entries. Working on it.\n. Yes, will do\n. Yes, this class itself has the name Semaphore but we want to use the one from standard library here.\n. yes, good point\n. This code is from NuGet codebase and DNU actually never runs this code path in multiple threads. To simplify the fix, I just use a global mutex on cross-plat CoreCLR to do the synchronization\n. The output is already suppressed in the Restore() helper method:\nhttps://github.com/aspnet/dnx/pull/2512/files#diff-e073db6edc86fb957608d9a10b4e521dR436\nAll NuGet package references of this project should be installed when you restore for the main project (i.e. the project referencing this project). So the answer is \"no\".\nBTW, the Restore() helper method has\nc#\nrestoreCommand.IgnoreMissingDependencies = true;\nso missing package dependencies shouldn't be problems.\n. Fixing\n. If you never restore your wrapper project, then obviously you cannot build the wrapper project and dnu publish will fail.\nI kind of understand your concern because previously, when you publish an app without any package installed, the publish can still be successful with warnings say that some package dependencies cannot be found. However, if we check this in, you cannot publish without restoring packages first (when you have a wrapper project reference).\n. However, do we really care the \"publish without packages installed\" scenario? If you see a publish failure, you can restore and retry.\n. Use string interpolation\n. nit:string.Empty\n. nit: can be simplified as\n'root': ['Config.json', 'project.json', 'project.lock.json']\nif you just want a folder containing a list of empty files\n. 1. Calling ToString() on one version object multiple times is common. We shouldn't repeat the work each time when ToString() is called.\n2. Also note that sometimes we create version objects just to do some comparison and we never call ToString() on them. We should avoid allocating strings in this case.\nYou may want to use lazy initialization here. \n. I guess it's Ok to make the code nicer here BTW in this PR:\n1. Use string interpolation\n2. Replace hard-coded \".nupkg\" with NuGet.Constants.PackageExtension\n. Instead of checking the contents of log, we should check the actual output files on disk. That's what we care the most in this scenario.\n. After a thread creates a feed, it may find another thread already creates the same thing and adds to the dictionary. It is nice to use packageFeeds.GetOrAdd to avoid this case.\n. Any reason not making this a private field?\n. !packDiagnostics.HasErrors()\n. ",
    "Eilon": "No ummmmmmmmmming just yet! Specifically, we should consider using DataContractJsonSerializer, if it supports what we need. I don't think it's in CoreCLR yet, but it will be (according to what I've heard). But if it doesn't support what we want (e.g. comments), then we're off to the races.\n. Does this need any future-proof-ness? E.g. how can an older Helios know about a new KRuntime setting that didn't exist when it was written? Kind of a classic bootstrapping problem.\n. Do we want to also thing about the other things that go along with build configurations? E.g. config transformations (not that we necessarily want transformations) to decide/modify/set/unset different config values? E.g. time-outs for things might be longer, or we'd set customErrors=on/off/meme, etc.. Or maybe it's problematic if we conflate a \"debug\" vs. \"release\" build with different deployment settings? Anyway I'm just spewing out some thoughts so that I'll remember this when it comes time to discuss.\n. Today in VS debug/release runs web.config.transforms too for Debug/Release, doesn't it?\n. OK good then we're in agreement :smile: \n. Log a bug for the concurrent compilation thing?\n. :shipit: \n. Seems pretty sketchy overall. If we can't find the folder then we'll just kind of look wherever and find something that looks good? Maybe it's OK, but it seems fragile.\n. Yeah I don't think the runtime supports comments in project.json yet and it won't be for alpha. We do support JSON comments in config files (e.g. config.json) but I think that's it.\n. I think it's something we'll want to enable - can you log a bug in KRuntime?\n. Reopening, this message is quite lame.\n. @MiKom thanks, we're looking at some improvements to make Program.Main() feel more familiar to existing .NET devs.\n. Were you expecting it to do something in particular? Or to just be ignored?\n. See https://github.com/aspnet/KRuntime/issues/122. I think we look for a class called Program specifically.\n. So you mean always run all available configs?\n. My gut tells me that throw is right. Is there a legitimate scenario where you'd want this kind of circular reference? It seems to be that it's most likely user error (as was the case here).\n. Awesome. But I still have no idea what this does, so someone else will have to do the actual code review :smile: \n. Then :shipit: on behalf of @davidfowl .\n. We almost never do case-sensitive for keys. Look at routing, config, controller names, file names, etc. I see no reason to have this be case sensitive.\n. I'm not sure I know of any key value that we use that's case sensitive aside from this... do we have examples where we've previously used case-sensitive dictionaries for stuff that a developer accesses?\n. I think one way to solve some of the cross-platform issues you're probably thinking of is to normalize strings - e.g. always call .ToLowerInvariant() or similar.\nThe error today definitely could use some improvement - that could very well be a temporary mitigation and we can evaluate the case sensitivity issue separately.\n. Yup I get that. We might end up having to make a distinction as to when a key is strictly \"in\" the system as opposed to a key that leaks back out to the OS/environment.\n. Hi @niemyjski the tooling that supports this is not yet ready. We did show a preview of it at TechEd North America earlier this morning but it is not yet released. Please stay tuned and we'll make sure everyone knows once it's released! A great way to stay up-to-date with the latest ASP.NET technologies is on our .NET Web Development and Tools blog.\n. Yeah unfortunately there isn't a great solution to this today - but there are some 3rd party text editors that can make it a lot easier to navigate the tree. But some people use Notepad :smile: \n. Hi @maartenba YES we can now accept PRs! Please check out the instructions on https://github.com/aspnet/Home/blob/master/CONTRIBUTING.md to see how to fill out a Contributor License Agreement and then we can get going on accepting this PR. Thanks!\n. OK now the CLA is actually confirmed, thanks!\n@davidfowl / @loudej  do you want to see if there are parts of this that are still applicable?\n. @maartenba OK - do you want close the PR for now then?\n. Oh good point, I didn't realize the other PR wasn't merged. I'll ping @lodejard.\n. Dup of https://github.com/aspnet/Universe/issues/61 - we're working on a fix as we speak.\n. :shipit: \n. Yeah this looks reasonable.\n@ChengTian can you take a look at this? I think allowing \"empty\" items between delimiters should be acceptable for stuff in project.json.\n. BTW when the fix is ready please wait to check in - this bug is post-alpha.\n. Hi @lefb766 unfortunately we cannot yet accept contributions to the code base but we're working to enable that very soon. Please stay tuned and we'll come back with info on the guidelines for contributions very soon.\n. Sounds like a vNext feature...\n. Or vNever.\n. @ChengTian this one seems like a good candidate to fix. Can you search if there might be a dup of this as well? I'm pretty sure others have run into this and perhaps logged a bug.\n. Oh I suppose it's saying that none of those dependencies can be found? Makes sense. But I wonder if it might still be able to be better, such as perhaps listing exactly where it looked and if it found any partial matches (e.g. the folder it was looking for existed, but there was no project.json or *.nuspec there or whatever). Think of the error message that MVC gives you when a view couldn't be found. That error message is like super awesome when you're trying to debug why something wasn't found.\nBut either way, there's a typo there :smile:\n. Hi @mstaessen unfortunately we can't yet accept PRs from the community but we're working on it - please stay tuned and hopefully we can accept this contribution soon!\n. I'm not sure you ever want to use a user's login name as the package author. I bet for every single person I know it would be the wrong value... even you :smile:\nI kind of feel this should be a more specific key for \"package author\". I bet quite often the \"author\" will be a company/organization and not a person.\n. Was having a separate chat with @davidfowl earlier about how to specify general defaults for all kinds of project/NuGet settings, such as license, copyright, etc. So this might be a more general discussion regarding all kinds of project settings that a developer would want to share among their projects.\n. Hi @hanswolff we're working on a process to allow community contributions but it's not yet ready. Please sit tight and we hope to be able to process this PR very soon.\nBTW this partially solves https://github.com/aspnet/KRuntime/issues/206\n. Hi @giggio we're working on a process to allow community contributions but it's not yet ready. Please sit tight and we hope to be able to process this PR very soon.\n. CLA is confirmed.\n@davidfowl FYI.\n. cc @davidfowl again.\n. :shipit: \n. Are you looking for it to generate something like js.lib.jquery.js? I think VS does something like that (though in VS it's overridable with the \"Custom Tool Namespace property).\n. js.libjquery.js?\n. It's Slash from Guns N' Roses :smile:\n. Yes I agree with this, I was just reverse-trolling :smile: The embedded FS is a reasonable scenario and I think we'll want to do things to support that.\nFor example, here's Katana's \"embedded file system\" implementation, which is one possible direction we could go in for ASP.NET vNext:\nhttps://katanaproject.codeplex.com/SourceControl/latest#src/Microsoft.Owin.FileSystems/EmbeddedResourceFileSystem.cs\n. Seems like a lot of cruft...\n. Yeah the compiler thing is a boring implementation detail of ours...\n. :shipit:\n. @ChengTian is this related to any of the command line parameter stuff you're working on?\n. @troydai I think this is all getting completely rewritten with the new command line param stuff so please hold off on a PR.\n. OK apparently @davidfowl says it's OK.\n. As @davidfowl said, not supported, but I just checked with VS2015 Preview and there's no error. It seems to basically do nothing now.\nThe only slightly weird thing is that the bootstrap package has a reference to jquery (lowercase) but the package on NuGet.org is jQuery (mixed case). Thus, you get this warning when restoring:\nUnable to locate jquery >= 1.9.0. Do you mean jQuery?\nThis is what's in the boostrap package's nuspec:\n<dependencies>\n  <dependency id=\"jquery\" version=\"1.9.0\" />\n</dependencies>\nI'll contact @DamianEdwards to see if we can get this fixed.\n. The CommandLineUtils package is published to nuget.org but it's not actually useful as a direct package. The CommandLineUtils package is always referenced as a build-only dependency so that the source code of that package is included into the referencing project. Thus, at \"runtime\" the CommandLineUtils project doesn't even exist (no DLL, no nothing).\nSee here for an example usage: https://github.com/aspnet/KRuntime/blob/bc88b0a7f187a94f21cf1e74115b2edd5fb62479/src/Microsoft.Framework.PackageManager/project.json#L5\nAnd this section in particular:\njson\n{\n    \"version\": \"1.0.0-*\",\n    \"compilationOptions\": { \"warningsAsErrors\": true },\n    \"dependencies\": {\n        \"Microsoft.Framework.CommandLineUtils\": { \"version\": \"1.0.0-*\", \"type\": \"build\" },\n        \"Microsoft.Framework.Project\": \"1.0.0-*\",\n        \"Microsoft.Framework.Runtime\": \"1.0.0-*\",\n        \"Microsoft.Framework.Runtime.Common\": { \"version\": \"1.0.0-*\", \"type\": \"build\" },\n        \"Microsoft.Framework.Runtime.Interfaces\": { \"version\": \"1.0.0-*\", \"type\": \"build\" }\n    },\nThis is why all the types are internal: the source code ends up within the target project, so being internal is correct (no need to expose the command line parsing of your app as public).\n. @jsedlak check out my comment on this other issue: https://github.com/aspnet/Home/issues/66#issuecomment-45377275\nBy default the system will only look for source projects that are siblings of the current project. You can override this by specifying additional project locations in a global.json file.\n. @jsedlak check out my comment on this other issue: https://github.com/aspnet/Home/issues/66#issuecomment-45377275\nBy default the system will only look for source projects that are siblings of the current project. You can override this by specifying additional project locations in a global.json file.\n. What's OperationSystem and why is it an int?\n. What's OperationSystem and why is it an int?\n. :shipit: \n. :shipit: \n. Very cool.\n. Very cool.\n. @ejsmith I see the CLA you submitted, just waiting for it to be verified on our side - takes a day or two usually. Thanks!\n. @ejsmith I see the CLA you submitted, just waiting for it to be verified on our side - takes a day or two usually. Thanks!\n. BTW it's still \"pending\" on our side - I'll follow up with the CLA folks to see what the delay is.\n. BTW it's still \"pending\" on our side - I'll follow up with the CLA folks to see what the delay is.\n. @ejsmith I believe that our CLA expert Vivian emailed you a follow up - can you get back to her so we can get the CLA figured out?\n. @ejsmith I believe that our CLA expert Vivian emailed you a follow up - can you get back to her so we can get the CLA figured out?\n. CLA confirmed.\n@davidfowl / @loudej can you take a look at this?\n. CLA confirmed.\n@davidfowl / @loudej can you take a look at this?\n. We expect the next PR to fix two typos! :trollface: :smile: \n. We expect the next PR to fix two typos! :trollface: :smile: \n. @davidfowl @lodejard putting this on your radar per the email thread.\n. @davidfowl @lodejard putting this on your radar per the email thread.\n. @glennc CLA confirmed.\n. @glennc CLA confirmed.\n. Change looks :shipit: overall.\n. Change looks :shipit: overall.\n. :shipit: \n. :shipit: \n. Apparently on limited memory machines (e.g. Raspberry Pi 512MB) we run out of memory quickly. I've heard of some devs experiencing this as well (@Tratcher mentioned this to me). We need to profile memory usage for both restore as well as build to see if we're holding onto data that we don't need, or if we have duplication of data, and so forth.\n. Apparently on limited memory machines (e.g. Raspberry Pi 512MB) we run out of memory quickly. I've heard of some devs experiencing this as well (@Tratcher mentioned this to me). We need to profile memory usage for both restore as well as build to see if we're holding onto data that we don't need, or if we have duplication of data, and so forth.\n. Related to this we need to make sure that for our own packages we end up producing \"Microsoft\" as the name (by setting the new var or something in our various build shade files).\n. Related to this we need to make sure that for our own packages we end up producing \"Microsoft\" as the name (by setting the new var or something in our various build shade files).\n. Thanks, please fix that one too :smile: \n. Thanks, please fix that one too :smile: \n. Well, specifically, please make sure that we have \"Microsoft\" as the name :smile: (I don't care about the variable name for now.)\n. Well, specifically, please make sure that we have \"Microsoft\" as the name :smile: (I don't care about the variable name for now.)\n. OK just want to make sure I'm very clear :smile: \nFor alpha2 we need to:\n1. Remove the default \"K\" author and instead pick it up from an env var\n2. Change our build to have the \"author\" name be \"Microsoft\"\nFor post-alpha2 we need to figure out the final name for the env var.\n. OK just want to make sure I'm very clear :smile: \nFor alpha2 we need to:\n1. Remove the default \"K\" author and instead pick it up from an env var\n2. Change our build to have the \"author\" name be \"Microsoft\"\nFor post-alpha2 we need to figure out the final name for the env var.\n. I don't see where in that NuGet doc it explicitly states that authors is required, but it's in bold so I guess that counts for something...\nSo yeah maybe we just put an empty <authors></authors> tag in there.\n. I don't see where in that NuGet doc it explicitly states that authors is required, but it's in bold so I guess that counts for something...\nSo yeah maybe we just put an empty <authors></authors> tag in there.\n. I don't see where in that doc it actually says that <author> is required. But it's fair to assume it is because it's bold. But even then it's not clear if it's the element that is required, or if the element must be non-empty.\nIf there must be a non-empty value then perhaps an innocuous value such as default or perhaps even using the project's name would be sufficient.\n. I don't see where in that doc it actually says that <author> is required. But it's fair to assume it is because it's bold. But even then it's not clear if it's the element that is required, or if the element must be non-empty.\nIf there must be a non-empty value then perhaps an innocuous value such as default or perhaps even using the project's name would be sufficient.\n. :shipit: me too\n. :shipit: me too\n. :shipit: \n. :shipit: \n. :shipit: \n. Go ahead and do it now.\n. @graemechristie thanks!\n@davidfowl / @lodejard all yours.\n. @graemechristie thanks!\n@davidfowl / @lodejard all yours.\n. We want to keep the sizes of the regular NUPKGs that users use to be as small as possible - I think that's the main benefit of the separate .symbols.nupkg. We are looking at ways of having better/cleaner mappings between the built DLLs and the original source location to make debugging easier, however.\n. We want to keep the sizes of the regular NUPKGs that users use to be as small as possible - I think that's the main benefit of the separate .symbols.nupkg. We are looking at ways of having better/cleaner mappings between the built DLLs and the original source location to make debugging easier, however.\n. @davidfowl is at the Summit all week, so feel free to corner him :smile: \n. @davidfowl is at the Summit all week, so feel free to corner him :smile: \n. @ctaggart @davidfowl did you end up discussing this? I still don't see the system putting PDBs in the main NUPKG, which can already be a bit large when you have cross-compiled assemblies in there. Add to that N number of PDBs, and you end up with super huge NUPKGs.\n. @ctaggart @davidfowl did you end up discussing this? I still don't see the system putting PDBs in the main NUPKG, which can already be a bit large when you have cross-compiled assemblies in there. Add to that N number of PDBs, and you end up with super huge NUPKGs.\n. :shipit: \n. :shipit: \n. I don't like it, but it's better than before :smile: \n. I don't like it, but it's better than before :smile: \n. Yeah all the stuff in https://github.com/aspnet/KRuntime/pull/387 looks fairly obscure and undiscoverable. Worth having a discussion on this.\n. Yeah I think I'm with you on that.\n. Running any of the command line tools (k, kpm, kvm) without any arguments prints the help. They also all support -?, -h, --help to show the help. Some also support the format kpm help <command> for detailed command information.\n@davidfowl @ChengTian @muratg @glennc do we need anything more here? We're not planning to support / as a command separator so I don't think there's anything left to do...\n. Thanks :smile: \n. @GrabYourPitchforks @blowdart because they are interested in this from a servicing perspective.\n. Servicing might want to use a similar solution. Or not. Or maybe.\n. Just use a smaller font :trollface: \n. Beautiful. :shipit: \n. Related, package restore message for non-existent packages are very subtle and hard to see. E.g. change project.json to this:\njson\n{\n    \"dependencies\": {\n        \"Does.Not.Exist\": \"1.0\"\n    }\n}\nAnd you get this log:\nklr.exe Information: 0 : RootHost.Load name=Microsoft.Framework.PackageManager\nklr.exe Information: 0 : RootHost Assembly.LoadFile(C:\\Users\\elipton\\.kre\\packages\\kre-svr50-x86.1.0.0-alpha2\\bin\\lib\\Microsoft.Framework.PackageManager\\Microsoft.Framework.PackageManager.dll)\nRestoring packages for c:\\users\\elipton\\documents\\visual studio next\\Projects\\WebApplication29\\WebApplication29\\project.json\nAttempting to resolve dependency WebApplication29 >= 1.0.0\nAttempting to resolve dependency Does.Not.Exist >= 1.0\n  GET https://www.nuget.org/api/v2/FindPackagesById()?Id='Does.Not.Exist'\nAttempting to resolve dependency mscorlib >= \nAttempting to resolve dependency System >= \nAttempting to resolve dependency System.Core >= \nAttempting to resolve dependency Microsoft.CSharp >= \n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='Does.Not.Exist' 729ms\nResolving complete, 1049ms elapsed\nUnable to locate Does.Not.Exist >= 1.0\nRestore complete, 1051ms elapsed\nLoaded Module: klr.net45.dll\nFound DLL Export: CallApplicationMain\nIt does say Unable to locate Does.Not.Exist >= 1.0 but it's super easy to miss, especially with a more realistic project.json file that has 20+ dependencies (plus their dependencies).\n. Consider showing just the list of errors as a summary at the end of the output.\n. Definitely interesting. Need to consider what schema aspects we want to have here. E.g. add/clear/remove/disable.\n. :shipit: \n. CLA is confirmed.\n@davidfowl FYI\n. CLA is confirmed, thanks!\n. Looks :shipit: to me - @davidfowl ?\n. OK, so, umm, you're merging, right? :smile: \n. This sounds super dangerous because you could end up running commands you don't expect. If someone types the wrong command they should figure out the right command and call that instead.\nThere's a lengthy discussion on npm isntall on their repo. While there are certainly two sides to this discussion, this definitely goes against our philosophy of requiring users to type the correct commands.\n. I think that given that we support only a handful of commands and options, it would be premature to add this logic.\n. @lodejard is this the feature you're working on right now?\n. @lodejard great, I put in the right milestone and assigned to you.\n. :shipit:, but also a question: I'm certainly not familiar with the depths of the design of this, but can/should the caching stuff be plumbed as a service (I see an IServiceProvider passed around). By default, no caching. But for DTH you get the appropriate implementation. Thoughts? Crazy?\n. Looks much cleaner, :shipit: \n. The logic makes sense to me (verbose vs. quiet) so I'm fine with this.\n. Sorry for the delay - looks much nicer!\n. :shipit: and #winning\n. Yeah definitely have to warn the user. A wildcard spec means \"give me the best one given the version resolve algorithm\" but that can't be known without know the full set of packages at each source.\n. :shipit: \n. @davidfowl the CLA is confirmed and approved!\n. Approved for Beta.\n. I had one unrelated comment, but otherwise :shipit: under the assumption you grep'ed everything in the repo to find the affected strings.\n. @davidfowl what's the conclusion on my NuSpec metadata question?\n. Seems pretty simple... :shipit: \n. Yes please! When we were with customers trying to diagnose package restore oddities we had no idea what was going on... this would be great!\n. Not really familiar with the feature, so I just did a grammar check :smile: Need @davidfowl for an actual review.\n. The stuff from my feedback looks good. @davidfowl will have to comment on the feature itself.\n. I think this is covered by this comment in another issue: https://github.com/aspnet/KRuntime/issues/591#issuecomment-54235234\nWe do not want to silently ignore missing feeds - that's important information to a developer. However, we will allow ignoring the failures.\n. It does look like \"death server\" to me. :skull:\n. Still repros.\n. The command line help is pretty explicit about the ordering... I don't see us changing the design (and I don't think we should).\nHowever, showing a stack trace and \"TODO\" are unacceptable, and we should fix those.\n. I think after fixing the typos this is :shipit: \n. :shipit: \n. Is this an issue in tooling? I'm not sure where these strings come from.\n. OK so please open a bug in tooling. Thanks!\n. k.ini is not supported anymore.\n. @davidfowl @jhawk42 \n. :shipit: \n. The code review updates look good. Need @davidfowl , @glennc , and @GrabYourPitchforks to confirm the behavior (I'm not sure exactly what's expected).\n. @davidfowl , keeper of the DTH.\n. @blowdart for FYI.\n. @davidfowl if it's this https://github.com/aspnet/KRuntime/pull/709/files#r18522912 then you owe me $10.\n. You owe me $10!!!!!!!!!!!!\n. Not relevant :smile: \n. You need version numbers in the dependencies. (There's still a bug, but the project.json file is still wrong too.)\n. Right, because then there are no invalid dependencies.\n. @davidfowl would have to confirm, but I'm pretty sure they do.\n. :shipit: after fixing the strings.\n. :shipit: \n. @ChengTian approved for Beta.\n. Please check CoreCLR vs. CLR and 32/64bit.\n. Approved for Beta.\n. @ChengTian \n. I'm OK taking this - @davidfowl can you review and sign off?\n. @davidfowl can you take a look for Beta?\n. @GrabYourPitchforks can you take a look for Beta?\n. Approved for Beta. Please coordinate with @BillHiebert / @mayurid / @barrytang to ensure tooling works with the change.\n. Approved for Beta.\n. Looks like a reasonable initial fix. :shipit: \n. CLA confirmed.\n. In the design meeting we need to discuss whether doing https://github.com/aspnet/dnx/issues/2450 would eliminate or at least alleviate the need for the feature in this issue.\n. @borgdylan we do have a signed CLA from you, so you should be good to go!\n. This is indeed pretty neat - not sure how urgent for beta2, though. If anyone feels super strongly we should take it, I might be able to be convinced.\nThe code looks reasonable, and the feature looks very useful, just not sure how urgent.\n. No voting, sorry :smile: But please check into dev, assuming @davidfowl / @lodejard / @muratg sign off.\n. @Tragetaschen CLA is approved, thanks!\n@davidfowl - all yours.\n. CLA is verified.\n. @ChengTian after the changes are made (or, feel free to make them yourself), can you merge the PR?\n. @RouR we were discussing this issue and were wondering what are the reasons for running tests under Local System?\nFrom my knowledge it's generally frowned upon using that account for anything because it is so powerful, and is not a regular user account in any traditional sense. For our own CI we happen to use JetBrains TeamCity, but in particular, we use a \"lab account\" that is just a regular user account with appropriate permissions to the system.\n. Cool, let us know!\n. CLA confirmed.\n@victorhurdugaci can you merge this PR?\n. @davidfowl @lodejard to review.\n@AlexGhiondea can you check out the Contributing guide and fill out a contributor license agreement (CLA)? It's required for all contributions to the repo. Thanks!\n. Nevermind about the CLA, you're good to go on that!\n. Aside from my new comment about newlines, :shipit: ! (Sorry for the delay in reviewing!)\n. @muratg @glennc can we close this bug too?\n. Need to update http://stackoverflow.com/questions/27203960/customizing-web-config-for-asp-net-5-vnext-deployments once this is resolved.\n. @glennc @davidfowl @bricelam @muratg @lodejard re-opening this based on our recent discussions.\n. :shipit: \n. @davidfowl on this one instead... And close #220 if we take this.\n. :shipit: \n. :open_mouth: nice!\n. Yeah I think this should just share common code with kpm. I agree this has no business in kpm itself because no one except for us can use it.\n. I think everyone is agreement about the functionality. I think the key suggestions are:\n1. Still have it perform the same utility as it does today. Whatever it's doing, we still need.\n2. Move this logic out of KPM. If you can articulate a reasonable scenario where a customer would want this, we can consider that.\n3. Have this share common code with KPM.\n. You need to have a version number for each non-project dependency. If the dependency is a NuGet package, it must have a version number. I think the * might be allowed only for the pre-release portion of a version. I recommend using a specific version number (e.g. 6.0.6 for Json.NET) for a released version of a package.\n. Well, not yet :smile: \n. Hmm I get the feeling that something is running kvm install latest because those look like newer builds than what you would otherwise have... not that I have any idea why that's happening.\n. Attempted translation:\n\nHow do you Chinese garbled? Do filenames with non-ASCII characters is not a good habit.\n. Also related: https://github.com/aspnet/Hosting/issues/141\n. Yeah I'm not sure what happens if you use Trace - that doesn't go anywhere useful does it? Like, if I'm running an app, where would I ever see that?\n. Ah OK... but the customer won't ever see that... I wanted this to go the customer's log file so that they see what magic stuff we're doing behind the scenes.\n. I don't want it written to the console, I want it written to the log file. Is logging not available from this call site?\n. \"After after.\" -- Mr. Miyagi to Danielsan\n. Overall looks good to me.\n. Looks good to me. After this is merged can you check that the CI really does the right thing by doing the same Explorer / Properties check on the CI's signed build output from Coherence-Signed?\n. Just to confirm, does it work if you do specify the metadata in project.json? I thought that was supposed to work. But yeah global.json support would be convenient for some of these super common properties.\n. OK cool. So is the bug about project.json at all or just about global.json?\n. @muratg \n. :shipit: \n. Dup of https://github.com/aspnet/XRE/issues/1008 and/or https://github.com/aspnet/XRE/issues/944 ?\n. Moving this to the Backlog. We decided not to support this for the initial release. Will revisit in the future.\n. @sayedihashimi how much of this do we already support? I thought we had some tooling for this no?\n. Oh so this is the feature that @glennc sent the mail out for with the assemblies on disk? I'll change the bug title to say it's assemblies on disk.\n. Can chat in person on Monday if there are any questions on headers.\n. This looks good to me. That is, every change you made looks good. But I have no way of knowing if this is all :smile: \n. :shipit: \n. Not at this time. Just wishful thinking :smile: \n. Why exactly is the version getter null?\n. :shipit: for beta4, and then add tests to beta5 I guess.\n. The codes are in here: https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime.Common/Impl/EntryPointExecutor.cs\n. While you guys debate whether it's supported or not, the code itself looks good to me :smile: \n. Very sharp eye, thanks!\n. First of all, wow, this repo seemed to have more trailing whitespace than code! :smile: \n\nOverall looks :shipit: !\nOne question though: The file Resource.aps is listed as modified - I just want to make sure it's because the resource got recompiled so there was some trivial change in there, and not because your script (or whatever you ran) made some regex change to a binary file and broke it.\n. This sounds like more of a scenario for either Roslyn or Core CLR. Not much we would do in the DNX.\nBTW I experimented with something like this a while ago by plugging in a Roslyn syntax tree rewriter. I'd scan for all places where exceptions are explicitly thrown (i.e. throw <something>) and rewrite it to inject extra data into the exception that wouldn't otherwise be there (e.g. the method parameter values, etc.).\n. Do you need to add a package reference to System.Runtime? I'm wondering if this is the issue where historically PCL projects had an implicit reference to the entire framework, but in project.json all references are explicit...\n. Running on Mono currently uses DLLs built for \"aspnet50\" and not \"aspnetcore50\" because Mono is based on the API set of .NET Framework, not .NET Core (Core CLR).\nAlso adding @ericstj to see if he knows more about the relationship between these packages and Portable111.\n. Didn't csc.exe ship in the .NET Framework?\n```\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319>dir csc.*\n Volume in drive C is OSDisk\n Volume Serial Number is E023-1895\nDirectory of C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\n04/15/2015  10:24 PM         2,044,528 csc.exe\n06/18/2013  05:28 AM               182 csc.exe.config\n06/18/2013  05:28 AM             1,329 csc.rsp\n               3 File(s)      2,046,039 bytes\n               0 Dir(s)  48,203,874,304 bytes free\n```\n. Nice catch!\n@victorhurdugaci can you merge?\n. :shipit: \n. @ErikSchierboom not currently planned but that would be a good project for the community to start up.\n. This is about generating the doc XML file. Nothing to do with comments in JSON :smile: \n. And BTW I thought we always generate it now, don't we? At most I think we'd have an option to turn it off (though, do we even need that?).\n. @danroth27 @davidfowl \n. @muratg can we get someone to take a look at this this week? This is a must-fix to ship even the next preview because we use this command on the CI and it doesn't work as we want it to.\n. Eh, it was moved from Tooling to dnu, now to dnx... should we re-open the Tooling one?\n. BTW you're the one who said it was a dnu bug to begin with :smile: \n. Make sure you run this too and update the generated CPP files as part of this commit.\n. You ran into it? It's not merged yet is it?\n. Ohhh I see. So we already updated the headers, right. Well then merge @troydai 's PR then :smile: I forgot the headers already updated.\n. @davidfowl Hmm looks similar to that but totally different callstack. The other bug is a file system locking issue, while this is just collection enumeration. The underlying cause might be the same, though.\n. @victorhurdugaci thanks! The only theoretical thing I can think of is that our builds do a lot more in parallel now. However, the parallelization we do is by process (e.g. run multiple builds at the same time), so that might explain the other bug, but wouldn't explain this bug quite so well...\n. Two things we discussed that require follow-up:\n1. Why is the dependency tree being walked twice? Is that a bug? Or on purpose? Are the results the same? Cache?\n2. Is it allowed/supported for user code to load NuGet packages while the app is running? If so, we should theoretically breadcrumb those, even though it might be technically challenging.\n. @davidfowl you owe @victorhurdugaci $10 plus a dozen donuts.\n. Should we ignore this and use #1779 instead? Or?\n. BTW several other style issues (multiple types per file, var, etc.) but I won't comment on them further because this is a prototype.\n. @victorhurdugaci BTW it's not a \"breaking change\" in the traditional change because this is all new... but it would be breaking from previous previews, of course. But I agree with @troydai that in the meantime we'll do things one at a time in terms of honing the prototype into production quality.\n. @troydai  BTW how close is this code to the stuff I sent you? Is the basic parsing logic the same, except that you added the line number support etc.? Are there any other significant differences? I ask because the old parsing code was fairly robust; it was just missing some desirable features (line numbers, comment support, etc.).\n. @victorhurdugaci I think before we take this change we'd have to support comments (assuming we want to continue to support comments, which I hope we do).\n. @troydai great!\n. :shipit: for me - I don't think that me looking at it anymore will yield anything useful :smile: \n. .Extensions :smile: \n. I like it. :shipit: \n. @yishaigalatzer \nYeah I think this has been a known issue for a while and it's quite unexpected...\n. These names are all fine by me.\n. For the Roslyn thing, we might want to not say \"Roslyn\" at all because that's more of a codename.\nSo, maybe like:\n- Microsoft.Dnx.Compilation.Abstractions\n- Microsoft.Dnx.Compilation.Compiler.Abstractions\n?\n. Just product name and version is fine.\n. @davidfowl !\n. @BrennanConroy close this then?\n. @anurse let's chat tomorrow on what this would take. We have a design mtg at noon. Let @glennc know we ought to discuss this.\n. Can we like, you know, not have stack traces for expected types of errors? This shouldn't crash dnx... it should just report an error, set the return value of the app to some non-zero value, and exit.\nThat probably ought to be a separate bug, though.\n. Do you agree the current behavior is quite lame? I logged https://github.com/aspnet/dnx/issues/1923\n. @davidfowl I think we talked about this yesterday afternoon.\n. The problem with adding code to a project is that it is impossible to know where to add it. It might work in a trivial \"default project\" scenario, but you can't make it work in any realistic scenario.\n. Wow, a seemingly legitimate use of custom exception types... I'm intrigued :trollface: \n. Hmm but is this actually correct? Isn't the reference needed? Is the package itself just broken?\n. Moving this out of backlog so we can reconsider.\n. I think just suppressions like /nowarn:X would be awesome for v1.\nCould we just take @bricelam 's code as a PR?\nBTW after doing this also need to send a PR to SchemaStore to add the new option to the project.json schema: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/project.json\n. Probably not. None of this stuff will exist, right?\n. @ajaybhargavb this is ever-so-slightly related to the Package Verifier work you're doing. These assemblies have been renamed since I logged this bug, but please make sure when you enable the package verifier in this repo that we don't miss any assemblies.\n. Resolved by https://github.com/aspnet/dnx/pull/2103\n. Yeah I think @anurse and I chatted about this yesterday when we talked about the 4.0.20 issue. I think this feature is coming to NuGet but isn't there yet.\n. File in Tooling-Internal?\n. Fixes https://github.com/aspnet/dnx/issues/2097\n. Related: https://github.com/aspnet/Announcements/issues/52\n@moozzyk thoughts on this? Anything to do here?\n. :shipit: \n. :shipit: after undoing the one file.\n. :shipit: from me.\n. I'll look into keeping more packages around... we used to keep 20 builds of every package but I lowered it to 15 builds because we kept running out of space. We're using around 5GB of storage already :smile: \n. The aspnetvnext feed is the \"nightly\" builds that get rebuilt several times a day. For stable releases, use nuget.org which has \"permanent\" copies of the official releases (beta1, beta2, etc.).\n. 4.5.1 is still the plan. Talk to Damian and Hunter if you want to set min-bar to 4.5.2.\n. @muratg are we still tracking the actual fixes for beta 6?\n. @pranavkm please have a stab at this when you have a chance.\n. :shipit: \n. Hmm yeah that might be it... I changed the setting back on the aspnetvnext feed and am working on re-uploading the packages.\nDoes MyGet do package retention based on what SemVer defines as \"oldest\" as opposed to the packages that were the oldest ones uploaded in terms of time? That might affect this. (Not saying MyGet is wrong, but it might not be exactly what we want.)\n. Ok the old packages should be uploaded again.\nI think the issue was that these packages have a mix of 4.0.0-*, 4.0.10.*, and 4.0.20-*, and we kind of want the most recent of each of these.\n. BTW --force isn't logically the same as --delete-target or whatever. Specifying --force just means \"go make a mess and I don't care\".\n. Moving to Backlog - we are not planning on doing this feature for v1. The workaround for now is to rename the folder to have the desired name.\n@troydai can you close out the PR for now? We will revisit in the future.\n. How about: Commands for managing source code of packages.\n. @dougbu Re 1. it does list a command get:\n```\nC:\\Users\\elipton>dnu sources\nUsage: dnu sources [options] [command]\nOptions:\n  -?|-h|--help  Show help information\nCommands:\n  get  Retrieves the source code for packages used by projects\nUse \"sources [command] --help\" for more information about a command.\n```\nGetting help for that command does indeed crash, and that's obviously a bug, which you mention in 2. Please log a new bug for this (unless there's a dup).\nI disagree with 3. because even if there's only one sub-command now, we need to think about adding future commands.\nAs far as the naming of feeds vs. sources that's a good point - please log a separate bug for that.\n. :shipit: \n. I'm guessing it's using the folder name and not the id. I believe there's a bug somewhere in this repro to allow the folder name to be different from the package id.\n. I think I'm thinking of https://github.com/aspnet/dnx/issues/2312, but perhaps that's a slightly different issue...\n. SLN doesn't work outside of VS.\nThis is a general purpose DNX feature. It has nothing to do with VS, SLN, ASP.NET, GitHub, or anything else.\nThe purpose of this feature is to swap a NuGet reference with source code. That's literally all this feature does, and it does exactly that.\n. No current plans to change the version strategy...\n. NuGet uses SemVer, which has only 3 segments: http://semver.org/\nHaving said that, there should be a proper error for this.\n. Should we stop our own Roslyn build at some point?\n. Ah ok. We'll need to figure out with them what to do once we need to split between dev/release - assuming they at some point have a release as well that we want to stabilize onto.\n. To use ASP.NET MVC 6 you need to use ASP.NET 5.\nTo use ASP.NET 5 you must use DNX.\nTo use ASP.NET MVC 5 you can use .NET 4.5 and newer (including .NET 4.5.1, 4.5.2, and 4.6).\nASP.NET MVC 5 does not work on ASP.NET 5 or DNX.\n. From where do we intend to start consuming this?\n. And TestHost can't use Json.NET? Remember that this is a super simple parser with minimal features. And it can only deserialize - there's no serializer (yet).\n. What kind of DNX errors/warnings is this specifically in reference to?\n. I got that; I'm wondering for which cases it's interesting.\n. :shipit: !\n. @ChengTian can you review and merge? Thanks!\n. Hmm, interesting. I think there are a couple ways (at least) to go about this:\n1. MSBuild style, where \"everything's a variable/list\" (you know, the PropertyGroup stuff)\n2. Allow some sort of $(variable) syntax for variables that are either env-vars, or command-line params\nI don't see (1) happening, but (2) is certainly interesting (to me). Might be other reasonable options as well.\n. @JamesNK ah interesting. I hope you know a good JSON parser for your transformations :smile: \nWith paths we'd have to consider how some more complex items would be persisted, e.g. dictionaries that have complex property names, or arrays. For example, even with setting compilation options, you can have that vary per framework, and the \"path name\" for those could get ugly (especially when they have weird characters in them).\nI do think this would be an interesting feature (whatever it ends up being).\n. Oh whoops, we must've misunderstood the issue then.\nSo the error message is simply wrong?\n. @moozzyk why not? I think many people are using it...\n. @blowdart to review.\nThis looks fine to me.\n. :shipit: \n. I like this.\n. :smile: \n. @moozzyk can you investigate?\n. @lodejard ur dependencies rnt transitive?!\n. :shipit: \n. Just had one question, so after that :shipit: \n. Is that the full problem, or is the problem that despite there being a DLL in the package, it shouldn't get copied to the output directory of the consuming package?\nI suppose fixing just this would likely solve the entire problem though.\nBut I'm mostly concerned about the .Sources.dll file appearing in the output of the consuming project.\n. :shipit: \n. Fascinating. Do you envision allowing a user to manually mark a method with [DnxEntryPoint]?\n. :shipit: \n. :shipit: \n. osx seems like the more user-friendly one. Not sure which is more correct though.\n. We could do it in either sequence - I'm fine either way.\n. BTW anyone is free to send a PR to https://github.com/SchemaStore/schemastore/. I've sent PRs and @madskristensen merged them quite quickly.\n. @davidfowl we currently have undesirable behavior in DNX compilation for resources. Is it worth investing in this, or does this not matter when we switch the DNX compilation stuff around?\n. @davidfowl we're currently thinking of making the logic a bit more precise than it used to be. It might still capture more than you want, e.g. a file named MyComponent.cs.resx will be interpreted as a satellite resource for the language cs for the resource type MyComponent. It's worth noting that no matter what you do, there will always be cases like this. There might today already be a real culture called cs, or even if there isn't today, Win10+++ might add that culture, and then it would be real. So even if we filter on existing cultures, that doesn't help much. And it could very well be a custom culture, which is also supported.\n@kirthik FYI\n. @davidfowl and it's worth noting that in our meeting when we discussed this, the only (and in our opinion correct) workaround is to rename the \"offending\" file.\n. Yeah in reality everything is broken, but in their own special ways, but I believe this gets us a lot closer.\n@DamianEdwards @lodejard FYI as well.\n. Sorry, what needs to be cleaned up? Some RTM-looking packages in the aspnetmaster feed?\n. @pranavkm do you know which bad packages to look for and destroy? Presumably the \"RTM-looking\" packages are never needed, right?\n. Ok, all the \"RTM-looking\" packages have been deleted from the MyGet / aspnetmaster feed. Please note that due to caching some packages might still appear to be there for several minutes.\n. BTW you also need to clear out your local NuGet caches.\n. @cmadrid86 can you log a new issue for that? Thanks!\n. @natemcmaster @divega @anurse ?\n. Putting this in RC1 for now.\n. @OlegKi the version of this package on MyGet's aspnetmaster feed was broken and I fixed it ~12 hours ago. You'll need to clear your package cache to get the fixed one to be downloaded.\n. Do we need this for RC1 or can it wait for RC2?\n. Thanks, I moved the bug to RC2.\n. @pakrym why is this closed/done? Isn't this still possibly an issue in how DNX compiles things?\n. Yeah at least for me this doesn't sound right. The compile modules should have no relationship to the project they are running on. It could be that the current design does this on purpose, but then I think the current design is lacking :smile: \nNow, perhaps none of this will matter with some of the upcoming changes, but I'd like to know that for sure.\n@davidfowl @lodejard FYI\n. Yeah at least for me this doesn't sound right. The compile modules should have no relationship to the project they are running on. It could be that the current design does this on purpose, but then I think the current design is lacking :smile: \nNow, perhaps none of this will matter with some of the upcoming changes, but I'd like to know that for sure.\n@davidfowl @lodejard FYI\n. @davidfowl so move to RC2? We currently have an issue with these DLLs but it looks like the Roslyn folks are fixing it (file signature issue), so this is less urgent for RC1.\n. You can use any version of Newtonsoft.Json 6.0.6 or higher - just specify it in your project.json file.\n. @anurse @davidfowl ?\n. @rosieks can you tell us the Unicode code points of these characters? That will help us reproduce the issue.\n. I totally need an excuse to buy the Mindstorms EV3 :smile: \n. Yeah I'll expense a few... for me :smile: \n. @pgrudzien12 we certainly look forward to anything you come up with!\n. @shanselman you can tweet the YouTube link as well: https://youtu.be/lCFWwI6eL2g (probably can't DoS YouTube as easily).\n. There are a number of reasons.\nOne reason we enabled strong naming is that we have cases where for a variety of reasons something that depends on the code here must be strong named, and so we must be strong named. (Strong naming is viral.)\nAnother reason (closely related to the first) is that in order to release critical security updates when running on .NET 4.x, we have to be able to install patches into the GAC, and the GAC requires strong naming.\n. @endeffects indeed an assembly would have to be recompiled across those versions. But with all the various renames and other changes, it is quite likely that a recompile would have to take place anyway in order to work.\n. @Tratcher ?\n. You can add the attribute to your assembly in the normal way and DNX will leave it alone. At least, that's what should happen...\n. @davidfowl I think we looked at this the other day and weren't sure why it wasn't hitting. Does VS not attach early enough?\n. @davidfowl any thoughts?\n. Common seems fine to me for now.\n. @victorhurdugaci can you compare & contrast those and we can discuss?\n. (Not necessarily in this bug, but we can discuss offline.)\n. @babelshift there are two versions of the command line utils package: one is an actual library that you reference, and the other (the .Sources one), has the same code, but it's a \"sources package\", which means that the code gets included and compiled into your library as internal APIs. Both contain the exact same functionality.. @couven92 - we didn't want to own a \"public\" command line parser - that's not the focus of ASP.NET/EF Core. So instead we have a .Sources package that is internal.. @davidfowl per @KrzysztofCwalina the old combo ReaderWriter package is going away (next week) and has already been split into separate Reader and Writer packages.\n. The src/ and test/ changes I'm 99% sure are :shipit: \nHowever the misc/ changes I'm not sure of - they might be part of tests or something. I think that either way it's ok to leave them unchanged because none of this will matter in the near future anyway.\n. @davidfowl @anurse can you comment on this?\n. @divega thoughts? Looks like something with EF?\n. @xatabhk what version of everything are you using? DNX? dotnet-cli? What's in your project.json?\n. @Elion pretty sure they meant me :smile: A common typo. If you ever see random stuff come your way, it was probably meant for me :smile: \n. @JustHereForTheBugReport the dnu command is being replaced with the new .NET CLI, so I recommend trying that out, and if there's still an issue, log it here: https://github.com/dotnet/cli/\n. Yep, please refer to the linked issues. Thanks!\n. We've seen a number of false-positives from various security products. All of DNX/ASP.NET/EF is virus scanned and Authenticode-signed.\n. Does this dictionary need a key comparer too?\n. Once again it'll rear it's ugly head...\n. Named param for the true?\n. predicate -> shouldCopyPredicate ? Otherwise I'm not sure what this param is for...\n. How is this different from this? http://msdn.microsoft.com/en-us/library/fxeahc5f(v=vs.110).aspx\n. I could sort of imagine that, but isn't the ultimate code the same either way? Premature robustification?\n. Add trailing comma please.\n. I don't recall seeing an answer to my question in the other PR: why don't we just use System.IO's recursive delete operation?\n. Seems ironic :smile: \n. Eh, I guess we leave it. So unfortunate. I think it's worth adding a comment though.\n. Should this barf if there's more than one match? That would be an ambiguity.\n. Wanna add trailing commas to these lists (including the list below)?\n. No idea what any of this code does, but is there a reason to use base. on this call (and the one on line 74)? I don't see these methods overridden in this class.\n. Why case-insensitive? :trollface: :smile:\n. String.Split() actually has an option to remove \"empty\" sections. However, I think this is one of the incredibly rare places where checking !string.IsNullOrWhiteSpace() is the correct behavior - because we're parsing something a user specified.\n. found -> Found\n. Is the casing here guaranteed to match?\n. Is the casing here guaranteed to match?\n. Should this be doing one of those ExceptionDispatchInfo or whatever things?\n. Fix or delete comment. (delete)\n. Use case insensitive comparison in case the user used a lowercase 1. Just kidding :smile: \n. Should we call http://msdn.microsoft.com/en-us/library/14tx8hby(v=vs.110).aspx instead?\n. This comment doesn't seem quite true - it's just checking program files.\n. Do these paths includes trailing slashes? If not, you'll have issues with c:\\foo\\bar being a \"parent\" of c:\\foo\\barfolomew.\n. n00b use object initializers :smile: (can't use with events yet though :frowning:)\n. What's up with these two ifs? Are these just current limitations? A comment and/or bug might be appropriate?\n. Why is the PDB stream special? Why not ensure the assembly stream is rewound as well?\n. Duh :smile: \n. Might want to rethink this because this won't be localizable. Sometimes changing the phrasing can help. For example, \"Specify --{0} for a list of available options and commands.\" That way it doesn't imply that there are any, but instead it just says it'll show whatever is available (which might be nothing).\n. Hmm is this a valid format string? It looks like it uses {0} and {1} but only one arg is passed in...\n. Should this be >= and <=?\n. Extra t at the end of Checkt.\n. Are these using the wrong values? Some of these look wrong.\n. Ohhh I see!\n. Should use Environment.NewLine instead of \\n.\n. nuget -> NuGet\n. Hmmm... ? Do I need to call Levi?\n. Might as well fix this string too, even if it's temporary.\n. Change to throw then.\n. Can we do crazy things with escaped quotes? Like something like:\nstring.Format(\"/C \\\\\"{0}\\\\\" crossgen --in \\\"{1}\\\"\", )\nWhat I'm trying to do there is put CMD-escaped quotes around the {0} param. Does that work?\n. name has the assembly name? Kind of confusing.\n. http --> HTTP\n. And used --> to use\n. Should the split specify maxParts=2 or something? Not sure what the \"standard\" is (e.g. if the password has a : in it), or if there's a possibility of having 3 or more segments.\n. Do we want to do something if it's not NET45? I guess this stuff is temporary, but might want to throw or something so someone on CoreCLR doesn't try using it and just seeing nothing happening.\n. Yeah if we can delete parsing code, let's delete parsing code...\n. BTW because this is XML you could probably do attr.Value == \"next\" because otherwise it wouldn't work anyway.\n. Can log a new bug to determine final name for this.\n. var\n. Also not sure I understand the variable name...\n. Is it like anyFilesCopied?\n. Yes that's much better.\n. Http --> HTTP (not part of this change, but might as well fix it)\n. http --> HTTP\n. Nested classes need to be private and at the end of the class (after all the methods, etc.). Does this type need to be public?\n. Looks like in some places in this file it uses named parameters for this value (good!), and also uses a slightly different parameter for the async param (in some places it passes in a bool with value true). Should these be made consistent?\n. Add private to these methods. And static if possible.\n. private\n. Hmm yeah the \"next page\" stuff is rather important. It's code from @davidfowl commit here: https://github.com/aspnet/KRuntime/commit/e8f059f69bd2a022a33d41f43213f6ae3ecfee0a\n. FirstOrDefault --> So hacky\n. public const should be used only for universal truths, such as mathematical constants. Change to public static readonly.\n. Add Oxford comma (... project.json, or a ...).\n. Just wondering, what does **.* mean? That's a wildcard I'm not familiar with. Should it be **\\* or something? Or just *.*?\n. Indent these two lines.\n. But other than that, yeah, :shipit: \n. I'd suggest having some consts for the Unicode characters and to give them some nice names (maybe look up what Unicode calls them? Though those names are probably unwieldy...).\n. This Unicode char too.\n. Does the Report not have a parameterless overload of WriteLine? If not, maybe add one?\n. If a WriteLine extension method just called Write(String.Empty) then how would that be any different? It's just making the code more readable, no? All the same stuff (including any locks) still executes, no?\n. Not finding much else to complain about, but change \"ProcessignQueue\" to typeof(ProcessingQueue).Name?\n. Mono support?\n. Put these all in consts somewhere?\n. while (true) ?\n. Interesting that this dependency thing is done passively rather than actively - any thoughts on that? That is, when a file is changed, its cache-dependent tree is not immediately expired; the logic waits until a read to determine expiration and propagation.\n. Behavior in general should of course be the same, but is there potential for memory issues? E.g. holding onto memory for longer than needed. Of course a perf test is the only thing that should directly motivate a change, but do you think we'd have this covered in any of the perf tests?\n. Log a bug?\n. Yeah I see - I guess I'm not sure where we got tokens from. Could one place get a token for C:\\FOO.CS and another place have one for c:\\foo.cs (both equivalent on Windows) and the comparison would be problematic? If you say it's fine, that's fine.\n. Can you verify that the AggregateException contains one inner exception, and that the inner exception is indeed the InvalidOperationException with the correct error message? I think this is important in order to ensure that the correct exception was ultimately thrown (as opposed to some other random exception that happened to also get wrapped in a lovely AggregateException).\n. \"{0}.{1} is added into {2}.\" --> \"{0}.{1} was added to {2}.\" ?\n. Can these be marked as readonly? (And maybe in other command classes?)\n. Should it be into or should it be to?\n. Can this just be LINQ? Like results.Max()? I think that works on any IComparable or you can maybe pass a comparer? This code isn't terribly complex, but it might be easier to read?\n. Yeah a helper method I guess is the best solution here. Maybe just call it GetMaxVersion()?\n. I recommend making the description a bit more generic (we might eventually have more information beyond HTTP stuff).\nE.g.:\nDo not show output such as HTTP request/cache information\n. OK maybe I'm missing something, but is this backwards? When it's quiet it uses the full verbose report, but if it's not quiet it shows information only?\n. Ohhhhhh, I see. If it's quiet, use the report that verbose would want to use, which might just happen to be set or not depending on whether the verbose option is set. Makes sense. Very confusing, but makes sense.\nSo, is there a way to make this somehow less confusing? Like maybe ahead of time determine the actual report to use and then just have a \"current report\" that is set to whatever it's suppose to be set? Or a helper method that can have more \"normal\" logic in it to decide whether to write some output or not? This logic seems like it's putting too much decision making logic in each method, as opposed to perhaps encapsulating that somewhere else.\n. Name: CreateReports? (We rarely use the word \"make\".)\n. Looks like MakeReports is called several times here - any reason not to just call it once and save the return value? Not so much from an optimization perspective, but from a perspective of \"shouldn't these all use the same report instances\"?\n. Not part of this change, but the other metadata in here looks wrong. Do we need to update it? (Version is wrong, requireLicenseAcceptance is wrong, and no license URL.)\n. nameof(pathResolver)!\n. Well, if we keep it the way it is, I think it'll be the first method we've ever shipped with the word Complain in its name... :smile: \n. in project --> in the project\n. Acronyms three letters or more are PascalCase, so this should be WwwRoot (kinda looks ugly either way, unfortunately, but this is the guideline).\n. can only be used when --> can be used only when the\n. name for --> name for the\n. And:\nThe folder name '{0}' is reserved. --> '{0}' is a reserved folder name.\n. option has a value --> option is specified?\n. to the -> for the\n. FYI no need to initialize fields to default values (false is the default for bool anyway).\n. Tpyo\n. Smae tpyo\n. Can call string.Equals(parts[1], \"mono\", StringComparison.OrdinalIgnoreCase).\n. Looking at the codes for PackRuntime, it seems to be that there's a more systemic problem: that class has an optional Report property, yet it will throw NullRef exceptions if it isn't set. If the Report property is truly required, it should be a constructor parameter. If it's not required, then there should be null checks throughout the code.\n. Should any of these ctor params be [NotNull] or something?\n. Well they should somehow check for null because they are required, no?\n. Need to add any null checks? Looking at the codes I don't see any guarantees about these being non-null.\n. Should? :smile: Would it make sense to enforce that requirement throughout the data structures?\n. Constructors that throw if there's a null param?\n. Just a naming thing: I would argue that all assemblies are loadable, no? So isn't this in fact Assemblies? An alternative would be something like LoadableContents because not all contents are loadable, but that's an even more awful name.\n. For some of these parsing routines, can you add a comment that gives an example of what the expected inputs and outputs are?\n. Any reason these versions are exactly 4.0.0.0 and don't have a -beta-* on them?\n. Use named param for true\n. Need an comment/example for this one too.\n. Does this need to happen on every iteration of the loop? Isn't this an at-most-one-time thing?\n. (I realize it won't do anything on subsequent iterations, but it's still \"wasteful\" and doesn't describe the intention very well.\n. xml -> XML\n. And corrupted --> corrupt\n. zip --> ZIP and also corrupt\n. Fix typo in a follow-up commit (\"application\")\n. This typo too (\"assembly\")\n. In the cleanup please give these better names... kthxbye!\n. Please specify the path to the csproj file to wrap\n. return TestUtils.GetUnpackedKrePaths().Select(path => new[] { path }); ?\n. Or maybe return TestUtils.GetUnpackedKrePaths().Select((DisposableDirPath path) => new[] { path }); if the parameter type in the lambda is required.\n. Can this assert anything more about the results of running the programs? Like assert the output or something? I just have this feeling that in some circumstances certain bugs would manifest in ways that would still cause the apps to run successfully, and thus return exit code 0. But if the apps each outputted something that proved they successfully ran, it would be good to assert that.\n. nuget --> NuGet\n. :+1: \n. Not sure if this works well on non-Windows due to newline differences. To be safe, could have a string array and use string.Join with Environment.NewLine. I think this has been discussed before (probably in one of your own PRs :smile:) but I don't recall the conclusion.\n. NuGet (capital G)\n. Tpyo\n. No problem :smile: \n. Why 3 spaces here? (And not 2 or 4?)\n. O I C it was just copy/paste... but please fix :smile: \n. IsLocal? Say what it is, not how someone will consume it.\n. Buh-bye!\n. Fix the formatting here? (Need to indent?)\n. Why a space between {0} and {1}?\n. Is this supposed to be initialized here, or outside of the foreach loop? Could this ever be overwriting an already-existing list of probed paths (e.g. on the second iteration of the foreach loop)? Or is it guaranteed never to enter here again?\n. Don't need a space before the {0} either.\n. Maybe not a template file, but this should probably be one giant string.Format(@\"blah blah blah\") with placeholders for the few dynamic sections.\n. Actually the error message is not quite correct. It totally succeeded in running the prebuild script. It's that the prebuild script failed. Change the error message to say what failed?\n. These all have typos too. Can you start using resource strings here?\n. String resources in another PR is fine.\nI think an acceptable error message for these would be \"The '{0}' script failed with status code {1}.\" Does that work for you?\n. This will end up as a string resource so it doesn't matter what it is right now.\n. There's a typo in the error message :smile: \n. Kind of a crappy error. Should it say like \"empty dependency\" or something?\n. Or say that the dependency isn't specified? Or that dependency names can't be empty?\n. T and K as generic args is not very descriptive. Normally it would be TFoo and TBar, though in this case it's not clear to me what the two args represent at all. Do you have better names for them?\n. One top-level type per file.\n. Need to make these help statements a bit clearer... \"assemblies lie in this folder\"?\n. Needs more var in several places.\n. Missing a using?\n. Try not to abbreviate. This should probably be detailLevel whereas the parameter to this method should be detailLevelOption (and the other params to this method should probably also by XyzOption because they are not the actual values, they are the option that may or may not contain a value).\n. Drawer --> Renderer?\n. In general in CS we use the term node to represent an item in a graph as opposed to vertex.\n. What is c? Use longer names.\n. Named params for the true/false.\n. In fact I see both terms used throughout this file... recommend just using node everywhere.\n. That's better than the old names, for sure :smile: \n. DF and BF are not commonly known acronyms so I recommend against using them.\n. Should reconsider this namespace. It should probably at least be plural because there are multiple algorithms here, but beyond that, just \"algorithm\" is awfully generic. What kind of algorithms are in here?\n. Is the visit param really a visitor? Not clear to me exactly what the pattern is.\n. Extra F in the name?\n. previouses?? :smile: Maybe previousNodes?\n. Don't abbreviate unnecessarily.\n. isLastSibling? Is that what this is?\n. I'll suggest some new text for these commands. If I'm way off, then please let me know :smile: \nA path to the folder containing the framework assemblies to check for <something???>. The framework projects <what framework projects???> usually <usually? when?> depend on assemblies in this folder. The command will try <try? when does it fail?> to find if there is an assembly in this folder with the same name to resolve dependencies.\nOK honestly I still don't understand what this options does. When do I specify it? How do I know what to put in here?\n. Show the local <what exactly is local about them? non-GAC? non-NuGet?> assemblies that are used by this project <project? framework?>.\n. Show the dependencies in a tree format.\n. --tree-level --> --max-tree-depth\nThe maximum depth of dependencies to show in tree format.\n. Show dependencies for only the given framework.\n. The path to the project. This path can be either a project.json file or a folder that contains one project <why support both? are these different? you can't have more than one project.json in a folder>. If omitted, the command will use the project in the current directory.\n. A project could not be found in {0}.\n. There was an error listing the dependencies.\n. s? What's s?\n. Change all Draw* to Render*\n. Should also rename related properties/types/params from treeLevel to maxTreeDepth.\n. TreeMode?\n. n?\n. l?\n. dict? Dictionary of what?\n. l? s?\n. v?\n. No IVT to functional tests, only to unit tests.\n. CreateBreadcrumb?\n. It's kind of a matter of style, but this could be a simple if() statement. If the directory doesn't exist no need to set the folder to null because it's already null. Might be easier to debug.\n. Does there need to be a bug for this? (Or is there already?)\n. Should we do any logging here? On success? On failure?\n. O. M. G.\n. Can we use [NotNull] here?\n. Show the assembly files that are depended on by <something?>.\n. Do we normally put ctors up top?\n. It's an extension method, why not call it as such?\n. Though, actually, now that I look at it a bit closer, I'm not sure I'm a fan of it being an extension method. It's effectively an extension method on object, which is a kind of code smell. I think it's unlikely for this extension method to make sense on every single type in the entire world. It has a rather specific case in which it works. Perhaps either a regular static method or some other design would be a better fit.\nhttps://github.com/aspnet/Home/wiki/Engineering-guidelines#extension-method-patterns\n. Named param for null.\n. Agreed, I arrived at the same conclusion in a comment further down.\n. It's running on a customer machine, so it's definitely not \"only for us.\" (Not that that implies we should log everything, but this strikes me as a somewhat interesting event.)\n. Was referring to the \\t :smile: \n. Change to ... because an exception was thrown: {1}. Otherwise there's no way the logged text would make sense.\n. file --> File :smile: \n. Not just formatting, tabs! @anurse turn off tabs in VS! :smile: \n. The description still says ANI... needs to change? Anywhere else it needs to change?\n. There's a simpler way to evaluate bools :smile: (The code was already there, I know.)\n. Definitely :trollface: \n. What happens with a single-line comment, like this:\n\"\"morestuff\"\": [\n        \"\"abc\"\", // comment\n        \"\"xyz\"\"],\n. BTW there are a couple of these that aren't really valid - there's an undefined last element in the array because there's a trailing comma. There's another example below in shared.\n. Kind of funny that these use @\"foo\" string literals even though there's nothing to escape here (I see it's just copied from other tests).\n. Yeah the approach looks good to me. I saw @davidfowl looking at it and he didn't seem to freak out so I think this is fine.\n. Change you can run following --> run the following (remove you can and add the). (Don't need a PR for it, just check it in)\n. Fields --> _boldRecursion.\nAlso, no need to initialize to 0 because that's the default value of an int.\n. Wrap in curly braces.\n. Tpyo\n. Don't know what this is, but how come only the right-hand side changed, and not the left-hand side?\n. We should never log an empty line - that assumes a text-based logger. Instead you could consider logging some sort of \"header\" such as \"found X diagnostic errors\" or whatever.\n. (Or just don't do it at all?)\n. OK\n. Invalid JSON\n. Invalid JSON\n. Invalid JSON (BTW these are all trailing commas)\n. BTW in Windows in Explorer you can delete long paths, but only if you can navigate to the parent folder (so the parent folder is not itself a long path), and then Explorer will warn you that the files won't go to the Recycle Bin.\n. And of course you can always navigate to the folder via UNC, i.e. \\\\localhost\\c$\\some\\long\\path\\folder and do whatever operations you want (UNC paths don't have the same short MAX_PATH limit).\n. Also, a more typical empty version is to call the parameterless ctor (so that it has no build/revision in it, as opposed to explicitly 0).\n. #elseif throw <something> or add a diagnostic or something? Or maybe put the #ifdef inside the main if()? I could imagine debugging this would be painful otherwise...\n. @anurse sounds good to me.\n. End sentence with a period.\n. Please go through all the errors here and check this (I've seen others).\n. Meh.\n. And don't initialize fields to their default values.\n. Kind of confused... isn't this now backwards?\n1. Why would we enable TWAE only if the setting is empty?\n2. Why not just force it to always be on? (That is, don't have a setting for it.)\n. Makes sense, thanks!\n. Instead of the extra newlines to make it a double newline, can you add an empty string on the next line? That way the source code formatting will be closer to the runtime output.\n. Change string to '{Project.Name}' is not supported by the current runtime target framework.\n. Should we mention using dnvm or something? How do we expect the user to know how to fix this?\n. Suggested output reformatting:\n```\nThe current runtime target framework is not compatible with '{projectName}'.\nCurrent runtime target framework:\n    Type: {type}\n    Architecture: {arch}\n    Version: {version}\nPlease use the dnvm command to select a runtime target framework compatible with '{projectName}'.\n```\n(Note that I removed the filename from the end of the error and used the project name instead... do you think having the project file + path is helpful?)\n. 0 is the default value.\n. Be careful with these char helper methods - they rarely do what you want. Please check the JSON / JavaScript specs to see exactly what they define as whitespace and use that. It's possible that they define it in the same way that Unicode does (which is what char.IsWhiteSpace uses), but that's generally unlikely.\n. var and named param.\n. Is trailing space deliberate?\n. Need a more grammatically correct message here.\n. This one too.\n. Remove the old bug number\n. OK how about:\n\nPlease use the dnvm command to select a runtime target framework compatible with '{projectName}' or change the framework specified in '{projectFileName}'.\n. @davidfowl is there any concrete suggestion we can put in there for Helios and similar scenarios?\n. OK let's stick with this for now then.\n. How about ...already exists and is identical?\n. ...already exists, is identical and won't be overwritten, try changing the package so its hash will be different and then try again? :trollface: \n. Ok fine seriously: ...already exists and won't be overwritten because it is identical\n. Don't initialize to default value.\n. char.IsDigit does not do what you think it does. It checks for any Unicode char, which is like hundreds of different chars. Just check for the valid ASCII range per the JSON spec.\n. (As a bonus, it'll be much faster to do the ASCII check.)\n. _line++; should be fine here :smile: \n. See earlier comment. Don't use char.IsDigit.\n. I think I saw a comment from @victorhurdugaci or something to just use StringBuilder directly. With the code here there are three copies of the data: 1. List<char>, 2. char[], 3. string.\n\nI recommend either using StringBuilder (which will have less copying/allocations), or find a way to use the List<char> or whatever directly (if possible).\n. Can this class just be a static class? It has no meaningful state and it doesn't seem like an instance of this type can be meaningfully reused. And, all current usage of this type is single use anyway. Recommend making it static.\n. An unexpected token '{0}' was found at position {position}.\n. C# 6 - I think you can remove the private setters.\n. trails --> after\n. json --> JSON and please check this in all resources / exceptions / doc comments in the PR\n. The format of all these strings should be Invalid {whatever} syntax. Expected '{0}'.\n. Split out into multiple files, of course.\n. should --> must\n. Fix or log a bug?\n. This does not seem safe. This will simply ignore conversion errors, such as when we read the lock file version. I think to be safe this type needs to know whether a value is an integer or not, e.g. by having a bool IsValidInt { get; } property or something. Then if the value isn't an int and an int was requested, we can throw.\n. Invalid JSON. Unexpected end of file.\n. Not sure I saw a response to my earlier question about this. This cast doesn't seem safe to me...\n. This method doesn't seem terribly useful. Why can't the caller just grab the JsonValue and do whatever it wants? A method that takes in a delegate and just calls that delegate seems very roundabout.\n. Sort 'em.\n. JSON & JSON\n. (And in other files too.)\n. Unrecognizable word Unrecoganizable :trollface: \n. What I really want is an ability for callers of this to make smart decisions about whether the number is an integer or not, and for the caller to throw the exception because that'll have the most context.\n. Ok just to be clear: I was joking about the spelling :smile: But the message overall could probably be improved as well (the phrasing is awkward and unclear).\n. I don't have a particularly strong opinion on how to fix it. The important aspect is to ensure that callers can make smart decisions. Right now that's basically impossible because some properties will simply return bad data and the caller will have no idea.\n. Can the name of the \"argument\" be [projects] instead?\nList of projects and project folders to restore. The values can be: a path to project.json or global.json file, or a folder containing a project.json or global.json.\n. Slight tweak (also fixed typo from my earlier string): List of projects and project folders to restore. Each value can be: a path to a project.json or global.json file, or a folder to recursively search for project.json files.\n. Are the this's needed?\n. Also,\\n-->Environment.NewLine?\n. Add comma beforeor the.\n.hexadecimal(lowercase), plus maybe put it in round parens()instead of mean looking square brackets[]:smile: \n. This namespace not used anymore, right?\n. How about:$\"The expected lock file version ({LockFileReader.Version}) does not match the actual version ({Version}).\"?\n. Eh, we're not localizing anything anytime soon here, so I don't care either way at this time. If it's easy to make it localizable, go ahead, but I wouldn't lose any sleep if it wasn't super localizable right now.\n. You get MAAAAAAAAAAD props for writing this! Not as cool as intern Sonja's code, but still pretty cool.\n. Skip this one for now - I need to investigate what to do here.\n.$\"The context of the project at {projectPath} could not be determined. It could be caused by multiple global.json files specifying different versions of the SDK for the same project.. I don't actually know what this error is at all - I was just making it make more sense :smile: But given what you're saying I think this is fine for now - a big improvement over no error message at all :smile: \n. How about:$\"The context of the project at {projectPath} could not be determined. This can happen if a project references other projects by source, and those projects have a global.json file specifying a different version of the SDK.. Needed?\n. Do NOT use regex! :smile: \n. Add some case-sensitivity tests here too (HTTP://...).\n. As ugly as it is, fighting the VS defaults is an uphill battle.\n. Hmm.... it's not an assembly, it's shared source...\n. Are all the .Sources DLLs really still in the NUPKG? That sounds like a build bug that needs to be fixed ASAP...\n. Fix all the formatting please :smile: Empty line above the ctor.\n. Format doc!\n. We silently ignore the first failures? Shouldn't this _at least_ warn about any errors encountered?\n. Is this really an error? I'm not sure...\n. Named param.\n. Named param.\n. I'm getting convinced this isn't an error at all. The base directory is deleted, so presumably running this command twice in a row _guarantees_ that the second run will fail. Is that odd? Imaginegit clean -xdf` failing if there was nothing to clear...\n. Do we think there are any common errors that would happen here? And why would retrying resolve those? Why 3 retries? No delay in between retries?\n. Ah sorry you're right, base directory isn't deleted. But if it isn't an error to not have it to begin with, it should be silently ignored.\n. :+1: looks like we hyphenate multi-word commands in dnu in general.\n. Actually :-1/2: because it looks like we randomly do things in random places :smile: \n-s|--source <FEED>\n -f|--fallbacksource <FEED>\n -p|--proxy <ADDRESS>\n --no-cache\n --packages\n --ignore-failed-sources\n --quiet\n --parallel\n -?|-h|--help\n--fallbacksource is one word, but --ignore-failed-sources is multi-word.\nDo whatever you want :smile: \n. Never a fan of retries because they can add up to a lot in the event of a flaky system. E.g. running 30 dnu clearcache commands (once for each repo let's say), and they might all fail for some reason. With a 0.5sec delay that's 30 repos * 0.5sec * 3 retries = 45 seconds to completely fail.\n. It's nice here :smile: \n. Properties after ctors.\n. Can remove this return. (Hard to read code with lots of different returns in lots of different places.\n. Come on, man, trailing comma!,\n. Is this tracked somewhere?\n. @BrennanConroy can you log a bug on this?\n. Yeah the option should be --mismatched, unless we can come up with a shorter, different word. E.g. --yucky.\n. ",
    "JamesNK": "Just copy and paste JsonReader + JsonTextReader out of Json.NET, then write some code to load the JSON into a simple Dictionary/List/value object model.\nExample of loading JSON into a simple object model using JsonReader: https://github.com/JamesNK/Newtonsoft.Json/blob/bcd6982419c6165ed2c606eb9994c1aa6bce3735/Src/Newtonsoft.Json/Converters/ExpandoObjectConverter.cs#L62-L138\n. Json.NET 6 supports // comments.\n. I've also encountered how difficult this is when using the output of a PCL project with vnext.\nI think ideally you should be able to point at the PCL project itself and have it rebuild itself prior to being used with the vnext application.\nOnly being able to point at the PCL dll as shown in the project.json at #325 will mean the user will to handle making sure the project recompiles prior to the vnext app running in case there are changes to it.\n. Also, OS is Win7, timezone is UTC+12 (Auckland, Wellington)\n. My experience is most issues with dependencies are either caused by strong naming + assembly binding or by people putting exact or upper limits on dependency versions in NuGet.\nAssembly binding is no longer an issue in vnext. If something is done to give users an option to override NuGet complaining about incompatible version numbers then dependencies should be much easier.\n. If you want ideas for crazy JSON to throw at your reader, there are a ton of examples here: https://github.com/JamesNK/Newtonsoft.Json/blob/master/Src/Newtonsoft.Json.Tests/JsonTextReaderTest.cs\nLots of stuff I read is not technically JSON however. Multi-line strings, date constructors, octal numbers, etc.\n. I know. Just letting you know that you either need to handle those examples or fail well. They're what I've built up over the years.\n. Not that this matters since the Json.NET dependency is being removed from the DNX, but the reason you are getting this error is the comment token with that value is still in the array.\nWhen working with arrays that could contain comments, rather than blindly converting every value to a string you should double check that a token isn't a comment first.\nNot that it matters :)\n. What's the plan here?\nI'd like to switch over to project.json. It would simplify my build scripts, reduce the likely-hood of errors such as https://github.com/JamesNK/Newtonsoft.Json/issues/618 and I could improve the features offered by Json.NET on vnext by using IL gen instead of expression trees for reflection.\nBefore you ask, I don't want to ditch net20 and net35. People do use them, and other packages depend on them. Glimpse for example is net35. Dapper also has old .NET builds and is waiting on this support - https://github.com/StackExchange/dapper-dot-net/issues/241\n. @muratg Will this make beta 7? :smile:\n. Can you point me towards instructions for getting this before beta 8?\n. Bug:\nSystem.Data.Entity (and other 3.5 references) resolves in .NET 2.0 when it should fail.\nName: fx/System.Data.Entity\nPath: C:\\Windows\\assembly\\GAC_MSIL\\System.Data.Entity\\3.5.0.0__b77a5c561934e089\\System.Data.Entity.dll\n\"net20\": {\n      \"frameworkAssemblies\": {\n        \"System.Core\": \"\",\n        \"System.Data\": \"\",\n        \"System.Runtime.Serialization\": \"\",\n        \"System.Xml\": \"\",\n        \"System.Web\": \"\",\n        \"System.Web.Extensions\": \"\",\n        \"System.Data.DataSetExtensions\": \"\",\n        \"System.Data.Entity\": \"\",\n        \"System.Drawing\": \"\",\n        \"System.ComponentModel.DataAnnotations\": \"\"\n      },\n      \"dependencies\": {\n        \"NUnit\": \"2.6.4\",\n        \"FSharp.Core\": \"4.0.0.1\"\n      }\n    }\n. It's not blocking.\n. Overall it appears to be working pretty well. Xunit is giving me an exception with the latest DNX build. Is that expected?\n. Example of this issue:\nI wanted to add a framework target of \"net40+sl5+win+wp80+wpa81\". It wasn't recognized and didn't appear. Because I had no way to figure out what the magic string is I fell back to using \".NETPortable,Version=v4.0,Profile=Profile328\"\n. What I'm seeing is types from System.Reflection.TypeExtensions being available in a project even though it is not a dependency. A new default class library references Microsoft.CSharp. System.Relfection.BindingFlags resolves even though System.Reflection.TypeExtensions is not a dependency.\n. Isn't that dangerous? If Json.NET depends on System.ComponentModel.TypeConverters and an application or library depends on Json.NET and uses TypeConverters without directly depending on it, what happens if I then remove the dependency to System.ComponentModel.TypeConverters from Json.NET? Won't the application now fail to compile and break?\n. Today a dependency's dependency will explicitly be added to a csproj's references and packages.config.\ne.g. PayPalCoreSDK uses Newtonsoft.Json. Adding the PayPal package will add both the paypal and Newtonsoft.Json dll to the csproj's references and packages.config\nIf PayPal stops using Newtonsoft.Json in a future version, upgrading to the newer package won't remove Newtonsoft.Json from the csproj or packages.config.\nWith the new project.json, upgrading to the newer package will result in no reference to Newtonsoft.Json. The application will no longer compile.\nCorrect me if I'm wrong here.\n. > It will if no other package is using Newtonsoft.Json.\nDoesn't it prompt you? I just tested uninstalling Paypal and I got a prompt asking whether to also uninstall Newtonsoft.Json.\nAnd when this happens there is an explicit change to the application's csproj and packages.config.\n\nThat's correct. If the application didn't depend on Newtonsoft.Json directly, it will break.\n\nThat seems pretty dangerous. Any app or library that uses BindingFlags out of TypeExtensions but doesn't have an explicit dependency would break if Microsoft.CSharp was refactored to no longer depend on it.\n. You could do option 1 with some kind of path (since Json isn't a flat list)\nEg compilationOptions.treatWarningsAsErrors=true\nFor now I'm going to have to transform the file myself in my build script and I'll probably use a path to insert the new value.\n. Ok. I'm not a fan of (2) because it would force those params to always be passed it. Optionally passing them in as overrides is more flexible.\nI ended up using PowerShell's JSON functionality to modify the project.json so didn't do anything with paths myself.\n. I tracked this down to keyFile and strongName being used at the same time with help from http://www.paraesthesia.com/archive/2015/08/06/sign-dnx-assemblies-with-your-key-and-test-in-dnxcore/\nThis is confusing because the sample here - http://blogs.msdn.com/b/webdev/archive/2015/07/27/announcing-availability-of-asp-net-5-beta-6.aspx - used both of them at once.\nWhatever the cause, the error message sucks and is completely unhelpful to anyone who doesn't have deep knowledge of Roslyn.\n. Why are you closing this? The error message given to the user should say you can't use keyFile and strongName at the same time. The current one doesn't help them.\n. Sure. Not sure how busy I'm going to be this week but I could look at it in the weekend.\n. That's what I did. It was just a pain in the butt getting all files working with all frameworks: https://github.com/JamesNK/Newtonsoft.Json/commit/a9ea63da59cc90b474bee5a6f351e9fad55a44bf\nAnyway, not blocking.\n. Yes, the same dnx project.\n. RIP. Should also test .NETFramework,Version=v3.5,Profile=Client\n. I reran the build for the same code on AppVeyor - dnu restore on the project.json still succeeds - but now right afterwards running the project.json with DNX fails with the message that an assembly can't be found, even though it was just successfully restored! This is without any changes.\nSucceeds: https://ci.appveyor.com/project/JamesNewtonKing/newtonsoft-json/build/1.0.410#L5147\nFails: https://ci.appveyor.com/project/JamesNewtonKing/newtonsoft-json/build/1.0.413#L5147\nAnd running the same code at the same time as the failure on AppVeyor on a third computer works! Three environments and four different results! dnu restore seems completely non-deterministic.\nComputer 1 (morning): dnu restore fails with the exception above\nAppVeyor (morning): dnu restore and dnx running tests succeeds\nAppVeyor (afternoon): dnu restore succeeds and dnx fails with assembly not found\nComputer 2 (afternoon): dnu restore and dnx running tests succeeds\n\n. I still get the original exception from my first post - https://github.com/aspnet/dnx/issues/2547#issue-102664520 - on one computer so this issue can be about that.\n. What's the plan here?\n. What's the plan here?\n. I fixed the error for me by removing the NuGet.org v3 package source from my nuget.config, which I didn't need.\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <!--To inherit the global NuGet package sources remove the <clear/> line below -->\n    <clear />\n    <add key=\"AspNet VNext (CI Builds)\" value=\"https://www.myget.org/F/aspnetvnext/\" />\n    <add key=\"xunit (CI Builds)\" value=\"https://www.myget.org/F/xunit/\" />\n    <!--<add key=\"NuGet.org (v3)\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />-->\n    <add key=\"NuGet.org (v2)\" value=\"https://www.nuget.org/api/v2/\" />\n  </packageSources>\n</configuration>\nObviously the underlying bug is still there.\n. It happens on my Win7 computer and it doesn't happen on Win8.1.\nThe only repo I have is building Newtonsoft.Json. You could clone Newtonsoft.Json and run the build/runbuild.cmd script for this commit where it still occurred: https://github.com/JamesNK/Newtonsoft.Json/commit/c45b5b90426d03b84781e27cf2fdefd2ff82d89b\n. RIP. FYI upgrading to Autofac 4.0.0 beta 7 fixed this error. It has a net45 folder.\n. The problem isn't the error message, the problem is in this particular scenario, as far as I can tell, the loader is broken. It should work with Autofac 3.5 by loading the net40 DLL.\n. There is a link in the issue.\n. RIP. Hey, issue 3000. Do I win a prize? :smile_cat: \n. RIP. You could load the JObject directly from the StreamReader and avoid allocating the string. You're already doing this on line 141.\n. ",
    "troydai": "Fixed in f0a852af06282494168100a83b3b79e0cc155c15\n. The warning may be just caused by duplicate keys in json object.\n. Addressed in ac2f43377f961292ceb195a8e06654708eb28ae9\n. I'm working on the fix. I'll send out PR after it is tested.\n. Ah, this was filed while building the performance infrastructure. When kpm bundle  (then kpm pack) it will copy the packages from .k/packages folder to the application's app root. It will be helpful to enable skip the copy and just pack the other contents because in performance testing environment all packages are concentrated under KRE_PACKAGES.\n. It is not needed by Perf automation any more. I'll close it. \n. Fixed in https://github.com/aspnet/KRuntime/commit/bb3cdbdb67ca04366fcb9a04e56d0dc05752debb\n. This issue still can be repo today.\n. Test application:\nhttps://github.com/troydai/dnx-issue600\nThe full comparison across DNX451, DNXCORE50 and Desktop .Net 4.5.1:\n```\nTrue    Original order\n        DNXCORE50:      0x49, 0x69, 0x131\n        DNX451:         0x49, 0x69, 0x131\n        Desktop:        0x49, 0x69, 0x131\nTrue    InvariantCulture\n        DNXCORE50:      0x69, 0x49, 0x131\n        DNX451:         0x69, 0x49, 0x131\n        Desktop:        0x69, 0x49, 0x131\nTrue    InvariantCultureIgnoreCase\n        DNXCORE50:      0x69, 0x49, 0x131\n        DNX451:         0x69, 0x49, 0x131\n        Desktop:        0x69, 0x49, 0x131\nTrue    CurrentCulture\n        DNXCORE50:      0x69, 0x49, 0x131\n        DNX451:         0x69, 0x49, 0x131\n        Desktop:        0x69, 0x49, 0x131\nFalse   CurrentCultureIgnoreCase\n        DNXCORE50:      0x49, 0x69, 0x131\n        DNX451:         0x69, 0x49, 0x131\n        Desktop:        0x69, 0x49, 0x131\nTrue    Ordinal\n        DNXCORE50:      0x49, 0x69, 0x131\n        DNX451:         0x49, 0x69, 0x131\n        Desktop:        0x49, 0x69, 0x131\nFalse   OrdinalIgnoreCase\n        DNXCORE50:      0x49, 0x69, 0x131\n        DNX451:         0x69, 0x49, 0x131\n        Desktop:        0x49, 0x69, 0x131\nFalse   Culture:tr-TR\n        DNXCORE50:      0x49, 0x131, 0x69\n        DNX451:         0x131, 0x49, 0x69\n        Desktop:        0x49, 0x131, 0x69\n*Desktop: A .net 4.5.1 console application not on K stack\n```\n. It's not hacking. I'm working on the results after apply #953 changes.\n. Fixed.\n. it will be nice to support kvm alias as well.\n. @davidfowl Here's a sample application:\nhttps://github.com/aspnet/Perf/tree/Omaha.Precompile/apps/BasicMvcPrecompile\npack command:\nkpm pack --out c:\\temp\\ --no-source --wwwroot . --wwwroot-out public\n. @muratg maybe we need to create some performance baseline for common scenario like this?\n. It's done.\n. It doesn't seems to be related to #600. #600 will be fixed when quirk switch for TFM is added. But this is not.\nA quick repo https://github.com/troydai/dnx-issue773\nIt is CoreCLR only.\n. @JamesNK, I'm going to close this issue as by design. Please see the coreclr team's response here:\nhttps://github.com/dotnet/corefx/issues/1181#issuecomment-85752670\n. It looks like the Roslyn doesn't generate the manifest during assembly emit based my experiment. If so, out builder needs to update the file properties on our own.\n. The root cause is because we don't set Win32 resource. Follow code snippet demonstrates a solution:\nC#\nusing (var fs = File.Create(filename))\nusing (var w32res = compilation.CreateDefaultWin32Resources(true, false, null, null))\n{\n    return compilation.Emit(peStream: fs, win32Resources: w32res);\n}\n. Done.\n. What I have found so far.\nReproduce the issue through VS\nI can repo this issue through simply disable the nuget.org source in VS's NuGet packages manager setting. It adds following section to the %AppData%\\NuGet\\NuGet.config\nxml\n  <disabledPackageSources>\n    <add key=\"nuget.org\" value=\"true\" />\n  </disabledPackageSources>\nThe kpm package source utilities will always honor the disablePackageSources list and keep the sources disable by set the PackageSource.IsEnable to false. Since kpm honors the disable package list, once a source is disabled, kpm will not try to remove it from the disablePackageSource. \nOther repo?\nSo when does kpm touch disablePackageSources?\nI found only once place where kpm tries to rewrite this section which is PackaageSourceProvider.MigrateSources. The code path won't be trigger unless there are legacy v1 or v2 sources present. I don't have an environment to reproduce this situation. Since both bug reports mentioned a clean machine, this path becomes especially suspicious.\nI'm provisioning environment to test this scenario. I'll follow up when I make any progress.\n. ### A stable repo\n1. Create a console application\n2. Drop following NuGet.config at the root of the applicaiton\nxml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <add key=\"AspNetVNext\" value=\"https://www.myget.org/F/aspnetvnext/api/v2\" />\n    <add key=\"NuGet.org\" value=\"https://nuget.org/api/v2/\" />\n  </packageSources>\n</configuration>\n1. Open the solution in VS again\n   *** Note: at this point the NuGet.Config under %AppData is still intact.\n2. Open the NuGet Package Manager Setting dialog\n    The NuGet.config is updated. NuGet.org source is added to the disable list.\n. VS + in-memory assembly + Random = Sounds like something in the DTH.\n. Got it.\n. Talked with @DamianEdwards. Told that this bug has been observed for a while. I'll close this one for now.\n. @glennc @muratg we have --debug option on klr now. This can be closed.\n. @davidfowl I force pushed ... easier to revert the formatting change.\n. Fix is verified on Ubuntu 14.04 LTS + Mono 3.8.0.\nCorrect information can be read after the generated assemblies are copied back Windows. \n. A few words before merge:\nI executed following tests on Mono:\n1. For a simple HelloWorld, k run works.\n2. kpm build passes\n3. kpm pack --no-source generated correct deployable. Copy the result to Windows, it works.\n4. After transfer the DLL generated on mono back to Windows, its file information are corrected shown in the Windows Explorer.\n. Got it.\n. @anandjp I can't repo this issue on a recent VS build.\n. This looks wrong, am I missing something?\nReturn type is bool\nhttps://github.com/aspnet/KRuntime/blob/dev/src/klr.core45/klr.core45.cpp#L321\nAssigned to HRESULT\nhttps://github.com/aspnet/KRuntime/blob/dev/src/klr/klr.cpp#L96\n. Fixed in https://github.com/aspnet/KRuntime/commit/6cfe52b659d6fb65df632a7c169a877455ef51c5\n. I'd like to make a few points regarding to build KRuntime in Mono:\n1. We need to set up a build configuration on CI for building KRE in Mono to prevent future build break.\n2. There's plenty room for us to clean up makefile.shade. Logics can be reused, workflow can be made more readable. I didn't do too much refactory in this PR so as not to distract from the goal. But I do intend to do more following up.\n3. The entire postbuild block in project.json doesn't make much sense to me. project.json to me is  the metadata of the project. It offers hint to the build system how to build, pack and deploy but itself shouldn't be a build script. Especially when it is put into the consideration of a cross-platform environment. \n. The batchcopy.sh needs further update to create target folder\n. Find a issue here: changing the \"slash\" in nuspec will impact the bin folder in package when build under Windows. We can't simply replace the \\ with /.\n. Summon @pranavkm for expert opinion.\n. Just push the last commit for main part of this PR. Waiting for comments. :watch: \n. Didn't find any other \\ used in makefile.shade\n. :watch: \n. :watch: \n. Ping @davidfowl \n. What's the errors or OSX? I tested on Ubuntu. It's a little bit trick to test it, need to revert the project.json first and build a first private build, install that build then restore the project.json change then build a second private build.\n. I'll split the PR.\n. :watch: \nUpdate and rebased on dev. Works on KRE build later than 10682. Tested on OSX and Windows.\n@davidfowl \n. Since this https://github.com/aspnet/Universe/commit/9c279164c44c6af87716c7978ba70f66e6f8862e was merged 5 hours ago, the build on Mono is broken again. Rescue PR https://github.com/aspnet/Universe/pull/129 is pending.\n. Mr. @davidfowl signed off verbally. I'm going to merge this to dev very soon.\n. :watch: \nUpdated and tested on OSX\n. Following command are tested on OSX:\n1: \"../../build/batchcopy bin/Debug/aspnet50/*.* ../../artifacts/build/KRE-CLR-x86/bin\",\n2: \"../../build/batchcopy bin/Debug/aspnetcore50/*.* ../../artifacts/build/KRE-CoreCLR-x86/bin\",\n3: \"echo yes!\",\n4: \"echo \\\"yes, it is.\\\"\",\n5: \"../../build/demo argument/list/*\",\n6: \"ls -all\",\n7: \"ls -all ./bin/Debug/aspnet50\"\nNote:\n1) For sample 1 and 2, the ../../build/batchcopy are resolved to ../../build/batchcopy.sh\n2) For sample 4 ../../build/demo must points to a executable file.\n. @dougbu is this issue fixed?\n. @victorhurdugaci the build break is just fixed. please rebase your change and use .\\build.cmd verify to verify the build.\n. @victorhurdugaci @davidfowl \n. Friendly poke :point_right: @davidfowl\n. Yes, need to rebase afterwards anyway. It depends how urgent the kproj update needs to go in.\n. Rebase on the latest dev. All the changes to project.json are excluded from this PR so as not to break the build because the project:BuildOutputDir won't take effect until the change to the ScriptExecutor is made into offical build.\nThe changes to the project.json are here: https://github.com/aspnet/KRuntime/tree/expose.outputdir.part2\n:watch: \n. @victorhurdugaci build configuration won't be exposed now. it's complicated than exposing the output directory. we deal with it next time.\n. All comments are addressed. I will rebase and squash the PR and push to dev in a few minutes.\n. I'm assigning this issue to @victorhurdugaci. The code in question will be removed eventually, and it deals with code searching incorrectly. Today the ProjectFilesCollection already returns the correct set of resources file. @victorhurdugaci will begin using it in the upcoming changes. Therefore the bug will be fixed naturally in the process.\n/cc @muratg \n. @victorhurdugaci this change should enable your kproj update.\n. @davidfowl \n. Thanks. I will push after build verified on latest KRE.\n. I'm still investigating a bug in this PR. \n. @davidfowl Updated. With changes of load context. Build verified.\n. Addressed review comments. :watch: \n. @davidfowl \n. Pushed rebase and retouch the TPA list generating codes to order the list before output.\n@davidfowl pending sign off.\n. Need to skip the TPA generating on Mono\n. Rebase on latest dev. Will squash before merge to dev.\n@davidfowl please sign off\n. Squashed.\n. :+1: Thanks!\n. I believe this won't make into beta5.\n. build.cmd verify passed.\n. Yes, sir.\n. k-crossgen.cmd is fixed, but not for k crossgen. This issue hasn't been triaged, so no one has been working on it.\n. k crossgen is not a command any more. Unless there are legacy user script depends on k crossgen instead of k-crossgen, this is not a bug any more.\n. Press wrong button! Sorry, reopen.\n. I think so.\n. k.cmd and k-crossgen.cmd will fail in the same situation as well.\n. Fixed, I'll close in seconds.\n. https://github.com/aspnet/KRuntime/pull/1029\n. kpm list is added in 72f4be7cf44d1351905ba05d2b146e63a19f04ad\n. The change introduces a few new build script blocks which will be executed asymmetrically. If there are two build configuration and two target framework. prebuild.perconfiguration will be executed twice and the prebuild.perframework will be executed four times, while others will be executed only once. This bothers me because it makes the project.json more slightly ambiguous.\nOther then this, the scope in which the variables are exposed should be controlled. For example, project:TargetFramework shouldn't be exposed to postbuild or prebuild since they're executed once per build therefore these variables are meaningless. They should be hiding to prevent incorrect usage.\nI think we should overall rethink the role of executing scripts in project script. What's the real use case of these two new introduced build script block.\n. I'll begin working on this issue now. My primary goal to to address the inconsistent behaviors between kpm pack and kpm pack --no-source. As an extended goal, I'll also look into the possibility of having a complete solution to the multiple global.json in a submodule git repository. \n. ## Notes\nThe inconsistency between pack and pack no source\nWhen a project is being packed the action to be taken are different (see here) By default the pack is just merely copying files, global.json is not participated in the procedure. While in no source the BuildManager will participate eventually. When BulidManager builds a project, an ApplicationHostContext is created to host the build context. The context is not aware of the parent packing context but extract the root directory from the project file path (see here and here).\nPivots of the fix\nThe Lord of the global.jsons\nOne global.json should rule them all. While it is easy to decide which global setting file is the primary one (the nearest file upon the root project.json), there are different options to deal with the downlevel global.json files.\nOption 1: Enable downlevel global.json\nThis is what Tragetaschen suggested, that global.json in downlevel folders are also included in the dependency walking. The solution won't require the developer to make additional changes to the primary global.json. The automated process sounds neat. However it requires the building process to deal with the contexts extremely smart because it may introduce following questions/challenges:\n1. What if the dependency in downlevel global setting conflict with the parent global setting, that they reference the project with same name but at different path which takes the priority? \n2. The build process needs to keep switching context whenever it walks into a new project, and in the mean time keep tracking upper levels global settings (there could be arbitrary levels of sub projects) to resolve conflicts. \nOption 2: Ignore downlevel global.json\nThis solution assumes that when a developer adopts submodule, she/he is fully aware of what is in the sub projects and how to reference these projects. If the sub projects requires additional attention in global.json, the change should be made to the primary global.json. \nIt requires the developer to deal with the primary global.json carefully. But the owner of the project is fully in change.\nThe implementation of this solution should be simplier as well. \nOpen up BuildManager and ApplicationHostContext\nNo matter what solution to be taken, all the build contexts should be aware of the outer packing context. That means:\n1) BuildOptions will carry more information about external context.\n2) ApplicationHostcontext should accept a indication to the root directory. \n. Thanks for the feedback @Tragetaschen .\nNow here's a dilemma we may face in option 1. Assuming this sample. An application has three external submodules. Among them, one of them referee to other external references, and one of them is the a different version of upper level dependency.\nroot\n  |-src\\\n  |-global.json\n  |-external\\\n    |-lib1.version1\\\n      |-src\\\n      |-global.json\n    |-lib2\\\n      |-src\\\n      |-external\\\n        |-lib1.version2\\\n        |-lib5\\\n      |-global.json\n    |-lib3\\\n      |-src\\\nHere's the global.json of lib2\nJSON\n{\n    \"sources\": [\n        \"src\",\n        \"external/lib1.version2\",\n        \"external/lib5\"\n    ]\n}\nNow assume using following global.json at the root and lib2's global.json is explicitly call out so that it should be 'linked' into the primary global.json. Now which version of lib1 is exposed to the outer? \nJSON\n{\n    \"sources\": [\n        \"src\",\n        \"external/lib1.version2/src\",\n        \"external/lib2/global.json\"\n    ]\n}\nI know this use case might look like a nit-picking, but it very much highlights the difficult in implement a correct logic of merging global.json files. There is a similar issue in project.json as well #819.\nOption 2 may look dumb, but by picking the referenced folders in one file, it makes the solution to similar issue clear.\n. https://github.com/aspnet/dnx/pull/1398\n712fb54\n. @bricelam can't repo this on 1.0.0-rc1-10781. On which KRE did you observe this issue? Is the AppDomain creating the only thing trigger the error?\n. This works\n```\n    // Issue 985\n    //\nvar setup = new AppDomainSetup();\nsetup.AppDomainManagerAssembly = string.Empty;\n\nAppDomain.CreateDomain(\"MyDomain\", null, setup);\n\n``\n. @davidfowl is this the schema\"FakeToolingPackage\" : {\"version\": \"0.1\", \"options\": \"dev\"},?\n. Verified in build1.0.0-rc1-10815`\n. @davidfowl wanna me to close it?\n. :hooray:\n. @davidfowl @victorhurdugaci \n. Rebased and squashed. Will merge to dev in minutes.\n. @davidfowl @pranavkm \nIt will fix the moving interface issue. Pranav, I tried on the ICache branch and it passes.\n. @davidfowl any suggestions?\n. rebase and squashed. will merge in 10 minutes.\n. @pranavkm \n. https://github.com/aspnet/KRuntime/pull/1000\n. @loudej @davidfowl \nFor following case:\nkpm restore -s C:\\localsource\\ -s https://www.myget.org/F/aspnetvnext/api/v2\nThe kpm won't hit http if all the packages are found under c:\\localsource\\\n. Yup.\n. @loudej :watch: \n. aye aye, sir.\n. Rebased.\n. @PradeepKadubandi \n. Rebased and squashed.\n. @davidfowl here's the holiday gift \n. The point here is we need to build some of the functionality, at least the dependency analyzing part, into the tooling contained in KRE. Otherwise the build process will always stay in the dilemma that the source codes of build tools are based on next version but the running framework is based on the previous version. \nWe can add a slim down version of dpa to the kpm for just print out the assembly dependency of a given project. It has its general purpose that customer can use it to analyze their own project.\n. Undergo major design change.\n. @davidfowl \n. Undergo major design change.\n. Rebased, squashed and verified. Going to merge in a few minutes.\n. @Tragetaschen we're adopting lower cases search patterns now (https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime.Hosting/ProjectFilesCollection.cs#L18) \nThis can be closed. Thanks,\n. @akoeplinger this bug is fixed. When individual file references for codes listed in compileFiles property is missing, exception will be raised. https://github.com/aspnet/Home/wiki/Project.json-file\n. Ah, it should be:\n1) In default mode, it lists all the packages the project referenced.\n. How about a reversed dependency tree: each package follows by the chain of dependencies explaining why it is introduced?\n. Rebase on the latest dev. I'll begin addressing the first round of feedbacks.\n. The command design is overhauled. The description will be updated.\n. @davidfowl :watch: \n. @davidfowl @muratg @loudej @Praburaj @ChengTian \nPlease help review this PR if we want to check it in on time.\n. Also @Eilon, I used the spelling check plugin this time. Hopefully it saved you some work.\n. @pranavkm review it.\n. @Eilon @davidfowl @pranavkm \nIteration 2, let's roll!\n. Updated\n@davidfowl \n. @Eilon thanks for the comments on names/comments/messages, all accept, I'll update.\n. My PR is trending (103 comments and growing) and more changes is coming. Discussed with @davidfowl, following changes will be made to simplified the codes.\n1. Tree mode will be removed. Doesn't bring in much value but requires a lot of code.\n2. Converting the two walkers into extension method. \nIGraphNode<Library> root = GetRoot();\nroot.PreOrderWalk(\n    visitNode => { ...  }, \n    getChildren => { ... }\n)\n. @davidfowl \n. @Eilon @davidfowl  :watch: \n. @davidfowl :watch: \n. Will push in seconds.\n. @davidfowl \n. @davidfowl sure, we should do that. can you point me to one example? I can work out a scenario of loading retargetable assembly but not sure if it covers the actual issue.\n. :watch: @davidfowl \nVerified, tested on Autofac and \"retargetable\" class library.\n. @GrabYourPitchforks \n. Like this https://github.com/aspnet/Helios/blob/21bb86ede13551c1b09074a21e5e66f97ad8c992/src/Microsoft.AspNet.Loader.IIS.Interop/helios.h#L160?\nI'll try out the Helios scenarios. Any other callers we know?\n. Helios works fine.\n. Rebase and squashed. Running last round of verification before merge to dev.\n. @glennc @muratg If we're not going to fix it, should we just close it?\n. We may need to polish this piece of code after this. \nhttps://github.com/aspnet/KRuntime/blob/dev/src/klr.net45/stdafx.h#L40\n. New look on CLR:\nC:\\Users\\trdai\\Desktop>klr\nFailed to initalize runtime (80004001)\n. :watch: @davidfowl \n. The fix looks good to me as well. But my hint will be the problem should be addressed at the place where PackOptions.Runtimes property are assigned (https://github.com/vkairys/KRuntime/blob/dev/src/Microsoft.Framework.PackageManager/Program.cs#L130)\nC#\nRuntimes = optionRuntime.HasValue() ?\n    string.Join(\";\", optionRuntime.Values).\n        Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries) :\n    new string[0],\n. After took another look, I think we better off with your solution for now since it is simpler. \nMy first instinct was that since this is about normalize the user input, it should be place close to the inputs' origin. However since the runtime value could be either a name or a path to the KRE, they cannot be normalized just simply by new DirectoryInfo(runtime).Name at Program. It will require to combine checking directory's existence and normalizing the path. To accomplish that more than a line of code are needed at the Program, which is already big. It doesn't worth it given we're tackling a minor issue. \n. I'm going to ask a question every assignees have asked ... what to improve?\n. Talked to @lodejard . This bug is duplicate with #1067 . I'll assign this to me and close as dup.\n. I'll close this bug and track the issue with #1067.\n. Is this how the project supposed to look like?\nJSON\n{\n    \"Compile\":\n    {\n        \"pattern\": \"**/*.cs;../sdk/**/*.cs\",\n        \"exclude\": \"compile/preprocess/**/*.cs;samples/**/*.cs\",\n        \"include\": \"../lib/shared/tool.cs\"\n    },\n    \"Content\":\n    {\n        \"pattern\": \"**/*.cs;../sdk/**/*.cs\",\n        \"exclude\": \"compile/preprocess/**/*.cs;samples/**/*.cs\",\n        \"include\": \"../lib/shared/tool.cs\"\n    },\n    \"Exclude\":\n    {\n        \"pattern\": \"bin/**;obj/**;*.config\",\n        \"projectFiles\": \"web.config\"\n    }\n}\nQuestions (and answer I assumed):\n1. Non-exist single file path in include, report error? Yes\n2. Support wild card in \"includeFiles\"? No\n3. Non-exist single file path in includeFiles, report error? Yes \n4. Do BundleExclude, Preprocess, Resources, and Shared adopt the same pattern? Yes\n5. Can the pattern section for each group be omitted? Yes\n6. What will happen if pattern is missing? Use the default patterns.\n7. Prevously Exclude doesn't participate in content files globbing. Do we start to do so? I assume yes?\n8. Does Exclude impact BundleExclude, Preprocess, Resources, Shared? No\n. Need better pattern for exclude, of course. So how about\nexclude\nexcludeExempt\nAlso, the compile files using name codes now, are we going to retired it?\n. @abpiskunov this change is merged. will appear in next KRE build. you can get it from volatile feed now.\n. Looks like a regression. I'll look into it and add tests to guard this scenario.\n. In both scenarios the errors are caused by the long path under node_modules folder.\n. I'm not sure, the scenario is not covered in the automation case. Base on @DamianEdwards 's experience, it sounds like a regression.\n. ~~I'm replacing all the DirectoryInfo and FileInfo instances with Directory and File static methods calling.~~ Wrong dose\nFixing BundleManager to use the globbing properly.\n. I'll close this issue. Bug is being tracked by https://github.com/aspnet/dnx/issues/1500\n. Oh, shoot me.\n. :watch: @davidfowl \n. I need to rebase it on the dev as all the projects' names were changed.\n. Close. Rebase will reshape the makefile. I'll send another PR.\n. Updated\n. In #1029 \n. 72f4be7cf44d1351905ba05d2b146e63a19f04ad\n. @davidfowl Will this be solved in recent runtime rewrite?\n. No repo. @Praburaj can you give it another try?\n. Fixed.\n. Will be addressed here https://github.com/aspnet/XRE/pull/1198\n. This is fixed.\n. Fixed.\n. @davidfowl @glennc @muratg Opinion? \n. About the feature.\n. 13549a6\n. I don't think it's doable. https://github.com/aspnet/XRE/blob/dev/src/Microsoft.Framework.Runtime/NuGet/Utility/VersionUtility.cs#L178\n. https://github.com/aspnet/XRE/blob/dev/src/Microsoft.Framework.Runtime/NuGet/Utility/VersionUtility.cs#L1140\nThe aspnet50 is mapped to Asp.Net. But the dictionary is private. When the DependencyListCommand consumes the FrameworkName the convert is already done. How do I reverse the name back to aspnet50?\n. Ah, ok.\n. https://github.com/aspnet/XRE/pull/1198\n. Fixed in e75955245d966eef5d95b8c023af9e9276415a51\n. :+1: \n. Can't repo. Need to confirm with @PradeepKadubandi if this is still an issue.\n. Confirmed. Won't repo.\n. @davidfowl \n. This is the end of KRE_TRACE hunting.\n. Rebased on dev.\n. So many things were changed. I'll update and send another PR.\n. Agree. If triage meeting approves this bug, please assign it to me.\n. @muratg @glennc shall I take a look at this?\n. Discussed with @glennc about what framework to fall back when there is no framework listed. To keep inline with other command (build bundle), the fall back framework will be the KRE on the path.\n. Fixed https://github.com/aspnet/XRE/commit/8383656344e33baaafa2f0fa561ed6756745c747\n. @muratg talked to @davidfowl just now, let's move this out of beta8 for now.\n. Hi @jrieken , it has been 9 months since this this issue was filed. Do you still repo this issue? If you haven't tried out this issue recently, can you let me know how you repo and detected this issue? \n. Thanks @jrieken. I'll look into this.\n. @davidfowl \n. rebase and verified. will merge in seconds\n. @davidfowl @ChengTian \nLooks good now?\n. Added a dozen new tests and find a bug in current runtime: https://github.com/aspnet/XRE/issues/1187\nBy searching the project.json samples in the Universe following three patterns are additionally used:\n1. **\\\\*.cs\n2. ..\\\\<upperlevel_folder>\\\\*.cs\n3. ..\\\\<upperlevel_folder>\\\\<literal_filename>\n. @davidfowl take another look?\n. @ChengTian update the test.\n. Rebased. Will merge in seconds.\n. Need more work.\n. :+1:\n. This is fixed.\n. :+1: \n. @bricelam net45+win8 is not regarded as a supported framework therefore not listed in the target frameworks of a project.\n. No. Not undoable, but the information is not directly feasible. Because the framework is filtered during project loading so the list command can't know about it (https://github.com/aspnet/XRE/blob/dev/src/Microsoft.Framework.PackageManager/List/DependencyListCommand.cs#L24)\n. Close this one as no-supported / by design. @bricelam \n. @davidfowl @loudej @Praburaj \n. Verified in University. (EF is not passed since they're in build break.)\n. Reminding: remove null checker.\n. Rebased. Ping @davidfowl \n. @davidfowl @Praburaj \n. @Praburaj @davidfowl @muratg :watch: \n. :watch: \n. @davidfowl looks good?\n. :shipit: \n. Fixed in 02d3bc9816e10b97450784ad6aa4846d678be3ec\n. Aye aye.\n. #953 works on CoreCLR.\n. Update: change target framework name to 4.6 won't fix the async culture flow issue on Desktop.\n. 3a62febd2923fa556a31c80bc574feccdb32c061\nhttps://github.com/aspnet/Helios/commit/7078090f7fc0f8288db4b1e2a881da19f2d525bd\n. @glennc @muratg need triage. I think we need this.\n. We'll know in a few minutes. I'll check in this first.\n. @victorhurdugaci could you please rebase and force push your changes again? the incident this morning disrupted all the PRs.\n. :+1: \n. :shipit: \n. @davidfowl \n. Ping\n. Ping @davidfowl \n. Ping @davidfowl \n. Ping @davidfowl \n. Bring in a few more pairs of eyes here: @victorhurdugaci @anurse @ChengTian \n. Ping @davidfowl , updates addressed your review feedbacks. Please take another look.\n. It is used for once instance in perf infrastructure, The parameter is actually quite handy when we auto-deploy a performance tool, save a delete command. It is not critical though, so I'm ok with removing it. \nReference \nhttps://github.com/aspnet/Perf/blob/751fa4aafc42fc1c03018de49dcee40966cc97d3/tools/KPerf.TestManager/deploy.ps1#L36\n. @Praburaj \n. @davidfowl looks better now.\n. @danroth27 @davidfowl @jeffhandley\n. @jeffhandley @davidfowl \nA few questions:\n1. Can d:Published missing?\n2. In the case if it is missing, can I regard this package as listed?\n. Ping @davidfowl @danroth27 @jeffhandley\n. Thanks for the advice. I'll update accordingly.\n. I have no comments beside the trace formatting and potential performance impact change. But they're not essential. Looks good to me.\n. :+1: :shipit: \n. Should we use Logger instead? https://github.com/aspnet/XRE/blob/brecon/bug735/src/Microsoft.Framework.Runtime.Common/Impl/Logger.cs#L14\n. I'm updating samples as well as test coverage.\n. @pranavkm do you need me to coordinate any tests with MVC?\n. :shipit: \n. :shipit: \n. :+1: Looks good to me.\n. @davidfowl @ChengTian @anurse @victorhurdugaci \nLooks odd to review a hash, but please do stare at it for a few seconds.\n. :ok_hand: will add.\n. Looks good to me.\n. New tricks every day. Quick question, looks like subtree doesn't manage the version of sub project, does it?\n. @davidfowl @muratg @glennc anyone investigating this now? \n. @davidfowl looks good?\n. @DamianEdwards can this issue be reproduced by this sample https://github.com/aspnet/Mvc/tree/dev/samples/TagHelperSample.Web?\n. @davidfowl @abpiskunov \n. https://github.com/aspnet/XRE/commit/8a923a154c9e8c9616d163d796135132fce9edad\n. @glennc @victorhurdugaci @lodejard @ChengTian \nPlease help to take a look.\n. @davidfowl \n. Respecify pattern won't break the application. Tested all projects in universe. And the internally the duplicate the patterns will be removed.\nBut there is possibility that it will breaks in one situation that is when user explicitly overwrite \"code\" to not include all **\\*.cs. Unless user overwrite the compileBuiltIn. We can't avoid breaking them.\nBut the chance is low.\n. @davidfowl sign off?\nPing\n. Two tests added.\n. Ping\n. Developing on this branch. https://github.com/aspnet/XRE/tree/trdai/issue1292\nFeature scope:\n1. Returns warnings on Build and Bundle command;\n2. Shows warnings in VS.\n. Change of scope: item 2 will be traced on https://github.com/aspnet/XRE/issues/1330\nPR related to this issue will only impact build and bundle command.\n. Fixed in 41ae546c87337413138ee5c75bd32255a7bf0f1d\nMoving on to #1330 \n. @davidfowl want me to merge this change?\n. :shipit: after rebase.\n. @sgtfrankieboy,  you don't need to carry kvm.ps1 with your side any more. Windows Azure Websites now carries the last kvm.ps1. Also, the parameter SCM_KRE_VERSION is retired. Kudu do not read from it anymore, instead it reads global.json's sdk property`\n{\n    \"sources\": [ \"src\", \"test\" ],\n    \"sdk\": {\n        \"version\": \"1.0.0-beta4-11181\"\n    }\n}\n. It only happens with CI when the build is run by build agent service.\n. Yup. This can be closed. It is the path too long issue. \nhttps://github.com/aspnet/DNX/pull/1363\n. extension: supporting multiple versions. VS will sends DTH the protocol version.\n. The current incoming message for initialization is not modeled to accept version: https://github.com/aspnet/DNX/blob/dev/src/Microsoft.Framework.DesignTimeHost/Models/IncomingMessages/InitializeMessage.cs\n. @BillHiebert the diagnostic message looks like this\nInformation: [ProcessingQueue]: Send((64081d907daa4bddaf76f0b1515b4b9f, Diagnostics, 9) -> {\n  \"Framework\": null,\n  \"Errors\": [],\n  \"Warnings\": [\n    {\n      \"Path\": \"C:\\\\Users\\\\trdai\\\\Documents\\\\Visual Studio 14\\\\Projects\\\\ConsoleApp1\\\\src\\\\ConsoleApp1\",\n      \"Line\": 8,\n      \"Column\": 22,\n      \"Message\": \"Property code is deprecated. It is replaced by compile\",\n      \"FormattedMessage\": \"Property code is deprecated. It is replaced by compile\"\n    }\n  ]\n})\n. Changes on runtime part has been done in ac2f43377f961292ceb195a8e06654708eb28ae9\n/cc @BillHiebert\n. Thank you @BillHiebert \n. @davidfowl @ChengTian\n. DTH will be handle in another PR since the scope is larger.\n. I reverted it. It's not related to the PR.\n. @muratg @davidfowl @anurse @victorhurdugaci\n. Add bug https://github.com/aspnet/DNX/issues/1379\n. Ping @BillHiebert @davidfowl @muratg \n. Take this off. Need more work.\n. @ChengTian @davidfowl good to go?\n. This is blocking IIS host scenarios.\n. It looks like an issue in Helios.\n. Codes look good to me. Please make sure you tested the scenarios it intents to cover.\n. /cc @BrennanConroy @moozzyk @davidfowl \nAny progress?\n. STL! Way to go!\n. No. It's not done. It's tracking bug. \nThe legacy names are still supported, but warnings are printed when they're used. They should be eventually retired by RTM, which means sending errors (fail the build) when old names are used.\n. DTH is going away. I'll close this issue for now. Moving forward, performance on large solution will always be a test pivot.\n/cc @muratg @Eilon @davidfowl \n. Ping @davidfowl \n. @davidfowl :watch: \n. @davidfowl :watch: \n. @muratg @Eilon @davidfowl @victorhurdugaci @ChengTian \n. :watch: \n. Pushed.\n. \n. I'll take a look at it today.\n. I'll try to put the full build version in the AssemblyInformationVersionAttribute\n. Fixed in 4afed2c694fa9bff7734ca9985697b1db3bb3afc\n. Further testing:\n1) Under Helios;\n2) Create child AppDomain.\n. Make it work in Helios: https://github.com/aspnet/Helios/pull/121\n. Updated :watch: \n@davidfowl @DamianEdwards @GrabYourPitchforks \n. @davidfowl did a local throughput test using ab. Doesn't observe regressing in terms of request per second.\n. No regression observed in cold start, either. Tests are done on IIS and IIS Express. Took 10 samples.\n. Yo. \n. :shipit: \n. /cc @DamianEdwards @davidfowl @ChengTian @muratg \nThis is intend for beta4. I preliminary tested on @DamianEdwards 's case. More tests need to done before it is merged.\nA few more tests will be added soon to guard the long path scenario.\n. /cc @Eilon This is for beta4\n. @ChengTian I'll soon rebase this on release.\n. Fixing https://github.com/aspnet/dnx/issues/1500\n. Working on tests now\n. :watch: @davidfowl @DamianEdwards \n. rebased to release branch. build verified.\n. Guys, Ping!\n. @DamianEdwards is testing this change. So far so good.\nGetting more people to review the code.\n/cc @muratg @Praburaj @Eilon \n. Rebased. Will be merge into release in ~~seconds.~~ 30 minutes. Need to rebase again.\n. Fixed on both release and dev branch.\n. To keep up with the progress check out branch https://github.com/aspnet/dnx/tree/trdai/1501\n. Fixed in 33eccd43e5fa250c2650744b6d28140cd42096a7\n. Yup.\n. /cc @muratg I assign it as a beta5 bug. Let me know if triage has different opinion.\n. /cc @davidfowl @ChengTian \n. I'll look into the issue and estimate the size of the fix.\n. 11400 is a very old build, the code path shown above doesn't exist. I can't repo this with either latest beta6 build or final beta5 build. In both case the exit code is indeed 1.\nPlus, VS's behavior is updated to. When VS publish it creates a temp folder instead of the artifact folder under current project folder which mitigate the long path issue.\n. @davidfowl @kirthik can you double check if you still can see this issue?\n. Assign to myself.\n. @muratg I plan to fix this in beta5\n. Fixed.\n. We may exam the 'literal' patterns more carefully while parsing project.json.\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime.Hosting/PatternGroup.cs#L80\n. No, we didn't take action. The error is expected. We can have a better error message through.\n. /cc @muratg beta6?\n. Fixed in https://github.com/aspnet/dnx/commit/a486da1669280f1f46ea3e11cf5e6f42c9a00133\n. :watch: \n. Still concern about filpping the internal to public just for the sake of tests.\n. :shipit: after fix the comments.\n. In CLR we use Ngen.exe as well. I think crossgen is a more accurate name.\n. PR: https://github.com/aspnet/dnx/pull/1580\n. /cc @davidfowl @ChengTian @Praburaj \n. With this change, build verify passes on Mac.\n. @davidfowl yo, PR is green now.\n. Go go go\n. Looks like I can repo it. I'm at the crime scene.\n. @akoeplinger thanks for the confirmation!\nHere's a brief explanation to the issue:\nEvery string listed in compile is treated as a pattern no matter whether if contains wildcard. Therefore when a big number of patterns exist the matcher will process every one at each level of the search path. It is not a infinite loop but a extremely long process. \nThere is solutions to it:\nShort-termly, for path reference single files listed them in compileFiles can reduce the load on file globbing. \nAnd in the file globbing, optimization can be done so that one directory won't be visited repeatedly even it is matched in multiple patterns.\n. /cc @lodejard @loudej \n. @davidfowl two pivots about sending warning here:\n1. The files globbing is a black box, we didn't leave API to return a non-fatal error information. Of course we can change the interface to allow that.\n2. What's the threshold of \"too many paths\" since this is not a simple black and white case, we need to find a point value beyond which we return warning. \nI'm working on one solution to prevent file globbing from repeatedly look into same folder, hopefully it can mitigate the issue.\n. Fixed.\n. @anurse will update the project files.\n. :shipit: \n. /cc @davidfowl @Praburaj @victorhurdugaci @muratg \n. Ping :watch: \n. We need to ensure the same experience between listing packages and assembly. So both by default just list the dependencies and use --detailed to show more information. How about that?\n. rebased and updated.\n/cc @davidfowl :watch: \n. /cc @davidfowl @BrennanConroy @ChengTian \nAdding functional actually testing dnu list. \n1. Each combination of dnx will be uncompressed only once throughout the same test class. It is implemented using a class fixture.\n2. The test will create package dynamically to mimic a dependencies, so that the dnu restore won't rely on an external source. The dependencies will be manageable. @BrennanConroy this can be reused in dnu restore functional tests.\n. Looks like test fails on mono. I'm looking at it.\n. :watch: /cc @davidfowl \n. Also address: https://github.com/aspnet/dnx/issues/1644\n. Your honor, I rest my case. :watch: \n. :shipit: \n. Though the build will fail, because of missing file, the time elapsed on my machine is 00:00:01.8084151 from begin to end.\n. \n. :watch: \n. I'll merge as the CI pass. This is simply update the FileSystem submodule to the latest.\n. oh, my. looking into this.\n. The file globbing is indeed case sensitive. But the second part of the issue is not a bug. It is because the compileBuiltIn is not override. \n. /cc @davidfowl @lodejard need you import. It is universal case sensitive today. If we make if case insensitive on Windows, it may cause trouble when a project is copied to *nix environment. \n. @pranavkm I've talked to multiple people including @victorhurdugaci @davidfowl @NTaylorMullen all thing case sensitive universally is better.\nGiven that, I think a better output warnings will be the best second options. Thoughts?\n. Talked with @NTaylorMullen regarding this topic. Seems to be the case.\n. Auto-detect will suffer from the incompatible search path across platform. A project compiled on Windows but fail on other OS because of missing file. I'm generally against the idea auto-detect approach because it hides the assumption from user.\nMy suggest is to offer a loosen mode, in which file searching detects current OS to decide if case-sensitive or not. The loosen mode is not the default option, but we provide warning message to notify users. The switch of the loosen mode can be placed in the project.json.\n. All right. So looks like the consensus is:\n1. Add a loosen mode, in which the file searching is case-insensitive on Windows (but always case-sensitive on other OS);\n2. loosen mode is the default mode.\n. /cc @muratg @glennc is this issue accepted? Can I begin working on it?\n. Ping @davidfowl @lodejard @glennc \n/cc @muratg \nCan we all agree on @lodejard 's solution?\n1. Change to case insensitive unconditionally for now.\n2. Find the right API to detect if the file system is case sensitive then take different approach.\n. Keep the remaining task being tracked in #2260.\nThis one is fixed.\n. :shipit: \n. we unzip to a temp folder and delete after every tests. unzipping and file copy is time consuming and tax the hard disk heavily. \n. good catch. but it doesn't work if you're not running test in batch. for example dnx . test -method <name> will still trigger a unzip. plus the logic you pointed out relies on makefile to establish the cache.\n. Fixed in https://github.com/aspnet/dnx/commit/19779308553bb18acaeeed86075595365dba9f82\n. 46fa4afc233c01ea7192beb0c182c5ea41c28cff\n. Thanks for the contribution, @gfraiteur. I just merged your change.\n. 81b7e8a5b11d5b8be313d23eef32f921e0969d90\n. :shipit: \n. @davidfowl \n. Need review\n/cc @muratg @victorhurdugaci @BrennanConroy \n. Anticipate one more sign off.\n. You're a second late. I'm running Universe now.\n. Issue #1659 \n. /cc @davidfowl \n. /cc @davidfowl \n. Ping /cc @victorhurdugaci @BrennanConroy @muratg \n. I'm updating MVC in the mean time\n. And, why is precompile code in HelloWorld sample commented?\n. /cc @davidfowl \nSo I update the PR introducing following changes:\n1. Remove the constructors from BeforeCompileContext and AfterCompileContext\n2. Introduce a LazyList to support loading resource. Comparing to its alternative, which makes the Resource property on BeforeCompileContext virtual I found this solution allow cleaner code. A POCO object without virtual member is more pure and clean. \n. Build verified, and also verified on MVC. I'll send out PR for MVC soon.\n. Added tests.\nPing @davidfowl \n. I can repo this issue. Investigating ...\n. It's a bug in GacDependencyResolver, it takes the first gac assembly which matches the reference name but doesn't compare the version.\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime/DependencyManagement/GacDependencyResolver.cs#L61\nI'm working on the fix.\n. Fixed in https://github.com/aspnet/dnx/commit/ce597a99c5af8f8069d4a99499f77fbe2f730d24\n. :watch: \n. @davidfowl @BrennanConroy @ChengTian \n. Unzip runtime is a unique issue for DNX functional test. But if functional test for other repos also have repeating process taking up a lot of time, the CollectionFixture can help.\n. rebased\n. @dougbu thank you for the suggestion, I'll amend the description in the commit.\n. /cc @BrennanConroy @ChengTian @victorhurdugaci @davidfowl @dougbu \nThe PR is rebased. I'll wait till the next DNX build pass and merge this change.\n. @davidfowl \n. /cc @gurunathancs1991\n. Please review: @davidfowl @anurse @BrennanConroy @victorhurdugaci \n. /cc @victorhurdugaci Looks like the ConditionalTheory + OSSkipCondition doesn't work on travis.\n. Ran the tests locally on Mac, they're indeed skipped.\n. No such option: https://github.com/aspnet/Testing/blob/dev/src/Microsoft.AspNet.Testing/xunit/OperatingSystems.cs\n. Ping @davidfowl  Sign off?\n. /cc @davidfowl rebased\n. I'll merge this change as soon as the CI passes.\n. I'll take a look at it.\n. /cc @muratg \n. @mikaelm12 has tested the scenario on beta5.\n. We will proceed to a beta6 test later.\n. /cc @davidfowl @muratg \n. Adding additional category information representing the framework is deemed difficult. The conversion from roslyn Diagnostic to an error message is a black box implemented in CSharpDiagnosticFormatter.\nI'm researching if I can replicate the Diagnostic and put additional information into it so that when it is converted to error message, framwork information is in it.\nAnother approach is to derive https://github.com/dotnet/roslyn/blob/master/src/Compilers/Core/Portable/Diagnostic/DiagnosticFormatter.cs\n. I have a fix now. I'm sending a private build for @BillHiebert to test.\n. :shipit: after format the code.\n. Updated.\n. Besides the questions, looks good to me. My suggestions should not block.\n. Yeah, one less submodule.\n. Need to rebase now. @anurse \n. @fals You latest description of the issue seems to be different from the original one. Hopefully I read the Portuguese right that it indicates the BasePath property is not found. The property is added lately https://github.com/aspnet/Configuration/commit/7efb7b232fb1c20c4aaad2764cbf98d457429231. Could it be your application is out of date? It's not in the beta4 release.\n. :shipit: \n. I'll take a look.\n. Hi @dtkujawski, sorry for the latest reply. I tried your scenario on latest code. I can't repo your issue. Would you let me know the DNX you tested and can you try your scenario on latest DNX. \nHere's my result:\n\n. Hi @dtkujawski,\nI'm closing this bug since I can't repo this on the latest DNX. Please give the newer build a try. If you can still observe the problem, please feel free to reopen this issue.\nRegards,\nTroy\n. @pranavkm is correct.\n. It only reproduces on beta4. \n. On another look. This issue actually repos on beta5. The difference is we swallow the build exception. I'm investigating the source. \n. The root cause of this issue is because the created load context for preprocess module contains a library manager of runtime target framework instead of application target framework. https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime.Roslyn/RoslynCompiler.cs#L234\n. Fixed!\n. /cc @davidfowl @Eilon @BrennanConroy @victorhurdugaci \n. Please use #1779 \nThanks.\n. Two features are required not to break current scenario:\n1. Comments support;\n2. Redundant trailing comma.\n. @davidfowl @Eilon @victorhurdugaci \n There are quite a few implementations I want to improve, but not until we have a evaluation on the prototype and decide whether we want to move forward with additional features.\n. I make sure the the original parsing logic is kept the same, what I added is the line information support. But adding line information support introduces extract logic to MoveNext and MovePrev, which open to potential bugs. Besides that the deserializing logic itself is intact.\n. Types are for line information. By combining the line formation and data in one class, it helps to consume the line information easily.\n. Thanks for all the comments. I'll begin a major refactorying to the deserializer now.\n. Iteration 2!\n/cc @davidfowl @victorhurdugaci @BrennanConroy @Eilon \n. I need more review to the resource / exception messages.\n. :watch: \n/c c @Eilon @victorhurdugaci @BrennanConroy @muratg @davidfowl \n. @Eilon @victorhurdugaci :watch: \n. Rebased and ready for reviews.\n. Yeah. I collected one squirrel now.\n. All right, I got a squirrel sitting on a ship now. All what I need is @davidfowl screaming at me one more time....\n. /cc @Eilon @victorhurdugaci @BrennanConroy any one sign off?\n. /cc @Eilon @BrennanConroy @victorhurdugaci \nI'll merge this shortly.\n. Fixed in https://github.com/aspnet/dnx/commit/3d20719b0a985b6960a3f87d9f5f9b6c3f71b7bc\n. The key point is to keep the error message in VS and console consistent.\n. /cc @muratg can you add the milestone? beta5 I suppose.\n. Fixed in 6b0dc2bfeb79a6490f7613c8086c2d6de13a95a6\n. Here\n\"dnx451\": {\n      \"dependencies\": {\n        \"dylan.NET.K\" : {\"type\": \"build\"}\n     }\n    },\nThe version object doesn't have version property. Triggered NullException at https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime/Project.cs#L382\nI'm working on a fix.\n. I'll merge it soon to unblock UserSecret build.\n. @BrennanConroy Yes it is.\n. :watch: \n. /cc @moozzyk @BrennanConroy @muratg \n. /cc @BrennanConroy \n. Fixed in 6b0dc2bfeb79a6490f7613c8086c2d6de13a95a6\n. @victorhurdugaci can you give a few scenarios which requires writing? And a JSON serializer doesn't necessary need the result of JSON parser to be mutable. These are two different issues.\n. /cc @davidfowl @Eilon @victorhurdugaci @BrennanConroy \n. Updating ...\n. Ping @davidfowl \n. Updated. Check the head for a snapshot. @davidfowl \n. I hate Iteration 4. Too many duplicate code. We don't have a suitable place to put the common extensions which depends on types in Microsoft.Framework.Runtime.Abstractions.\n. Ping @davidfowl \n. Move the extension to the newly built Microsoft.Framework.Runtime.Internals, which is different from Microsoft.Framework.Runtime.Source with additional dependency on Microsoft.Framework.Runtime.Abstractions.\n. /cc @davidfowl @victorhurdugaci \nRebased and squashed.\n. Ping @davidfowl \n. /cc @muratg @BrennanConroy @moozzyk \n. /cc @davidfowl I'll merge this later today.\n. Ping @anurse @davidfowl how do we deal with this in/after rc2?\n. Microsoft.Framework.PackageManager still needs Newtonsoft.Json\n. @BrennanConroy hit this issue today, too. It seems to be only repo on mono\n. /cc @davidfowl \n. @davidfowl approved. I'll merge it soon.\n. This is being reviewed in PR #2012 \n. Fixed. https://github.com/aspnet/dnx/commit/103b3a59669fa6f5932b600ed30e9ae64b5e3c00\n. # Specification\nIDE and DTH follows the workflow defined in this spec to negotiate the communication protocol version.\nThe negotiation is initialized by a message sent by IDE:\nHostID:      string\nMessageType: string  /* == ProtocolVersion */\nContextID:   int     /* always 0, avoid context collusion */\nPayLoad:     JSON token\nPayload looks like\n{\n    \"Version\": 1    /* an integer represents highest version  */\n}\nThe version represents the highest protocol version this IDE can support.\nOnce DTH receives the message and parse the prefer version, it returns the same message and payload with the highest version it supports which is below or equal to IDE's prefer version.\nIDE's behavior afterwards is undefined. It's up to the IDE to decide how to proceed should the DTH suggest version is not preferable. \nDTH will stay on the returned version of protocol afterwards until the end of its life-cycle or a new protocol negotiation. The protocol version is used across all contexts.\nProtocol negotiation is not required. If the negotiation doesn't happen, DTH will stay on the version of protocol sent in the initialization message. If it doesn't support that version, it will stays on the highest protocol version below the given version.\n. /cc @davidfowl @BillHiebert \nPlease review the specification. Follow up progress on https://github.com/aspnet/dnx/tree/trdai/1961\n. /cc @pranavkm @davidfowl \nI'll wait till the CI passes. This better go in before we switch the CoreCLR packages source.\n. :star: Important: though this PR is opened on dev, it will be merge to release.\n. I got in-person signoff from @DamianEdwards @muratg @glennc .\n. I'll close this one and send another PR base on release branch.\n. :watch: \n. :watch: \n. Looks good to me. :shipit: \n. :shipit: \n. Close, I'll send another one base on release branch.\n. /cc @davidfowl @BillHiebert \nI've tested this change locally with my own test client.(https://github.com/troydai/DesignTimeHostTestser)\n@BillHiebert please pick up the private build and test with VS. Let me know if anything's missing.\n@davidfowl please review my code.\n. Ping @davidfowl @BillHiebert \n. Ping @davidfowl \n. Ping @davidfowl \n. Just got a verbal sign off from @davidfowl . I'll merge it soon.\n. Analyzing log 2015/8/17:\nI profiled the start up time of a standard Web application created from starter template. The application is pre-restored, but not published. The time is profiled of two scenarios:\n1) Web Listener;\n2) Create an clean Program class and start as an empty command line application.\nHere's the observation:\n1) Look at the inclusive time spent on each assembly, Microsoft.CodeAnalysis.*.dll account for lion share of the time\n\n\n2) The code path of DefaultHost.ctor which comprised of the methods listed in previous comment is not heavy in these two scenarios. It only represent 5.5% (Console) and 1.64% (Web) of the time:\n\n\n3) Of the 5.5% time spent in Console app, LockFileReader.Read took up 2.47% which comprised of JSON deserialization and LockFile instance creation. It is consider one of the place can be potentially optimized. \n4) Logger.TraceInformation took up to 2.82% of time in web listener scenarios. Doesn't show up when DNX_TRACE=0.\n. Yes. That's another scenario to profile.\n. Use https://github.com/aspnet/dnx/pull/1981. Target release branch.\n. @NTaylorMullen I'll send you a private build, if you have any quick test use it. Otherwise talk to me tomorrow, let's write some tests.\n. @davidfowl review?\n. :shipit: \n. ping @dougbu \n. yeah, will update release branch and merge to dev\n. I'll close this one and open a new one based on release branch.\n. https://github.com/aspnet/dnx/pull/2000\n. Update the xproj here https://github.com/aspnet/dnx/pull/1986/files\n. /cc @dougbu @davidfowl \n. should this be in release as well?\n. :shipit: \n. I reset my case. :watch: \n. :watch: \n. :shipit: \n. /cc @davidfowl \n. Ping! @davidfowl \n. Running last round of rebase and build verify. I'll merge soon.\n. @anurse do we still need this PR?\n. Fixed.\n. I'll close this one and send another PR since it is intended for beta5.\n. Looks good to me. We need it :shipit: \n. Fixed in 1033f3103a2bb5c6af3d325f6444604ef3a54c59\n. :shipit: \n. Fixed in 7c19acde666e919a7a3aa9e4c11714c225573b33\n. /cc @davidfowl \nAnother reason that script execution shouldn't be DNX's business.\n. @ChengTian \n. :watch: \n. My concerns are addressed. :shipit: \n. @Tazer it seems to me the network just timeout. Can your try ping the https://www.myget.org/F/aspnetvnext/api/v2 from this environment?\n. @Tazer one thing I notice that the feed you used in your NuGet.config (https://gist.githubusercontent.com/Tazer/1ad0e439846ee26ef9a5/raw/12bc6b02b74af55154e456ec232ef3c01ec960e6/Nuget.config) is http://www.myget.org/F/aspnetvnext. Would you try change it to https://www.myget.org/F/aspnetvnext/api/v2? (Your DNX_FEED is set to the /api/v2 URL)\n. /cc @ChengTian\n. @Tazer Glad you got it work. Cheers!\n. +1. Confirm this issue. @moozzyk \n. /cc @muratg \nclose and move to cli or nuget?\n. @glatzert can I know what's the version of the sdk been stated in global.json if it is stated.\n. @glatzert yes.\nThe sdk version specified here is that actual version of DTH VS uses. If it is not specified, VS will fall back to the current default DNX.\n. @glatzert it's hard to tell what cause the hanging without accessing your environment. But you can try these things to self-diagnose.\n1. Try to restore it from command line (eliminating the DTH as a factor);\n2. Try to clean the cache. (under %localappdata%\\dnu\\cache);\n3. In addition to the cache, clean the packages folder (~.dnx\\packages);\n4. Check the connection to our source, either myget or nuget.\nSo you can keep reproducing the hanging, then we may have an issue in dnu restore. In that case, we'd love to look into it.\n. :watch: \n. :shipit: \n. :watch: \n. I'm sure there is other way to trick DNX to run into this situation. We should add a message.\n. Fixed in 587a4a562d8356b7f8af8a98f2247d5ba88473ba\n. :shipit: \n. Looks good to me. :shipit: \nJust make sure the old version lock file is invalidated correctly.\n. @back5576 we support two types of wildcards only today.\n- ** match multiple segments \n- * match in one segment\n. @back5576 for example:\n/src/alpha/bravo contains three segments: src, alpha and bravo.\n. Can you try\nexclude: [\"**/#*\", \"**/.#*\"]\n. @back5576 you're welcome.\n. @jpoehls @thomaslevesque is there other project.json file under your bin folder? \n. so if node_modules is the issue, the quickest solution is to include them in the exclude section so that the globbing will ignore them.\n// project.json\n  \"exclude\": [\n    \"wwwroot\",\n    \"node_modules\",\n    \"bower_components\"\n  ],\n. @jpoehls does it help?\n. @giggio Could you let us know what's version of the DNX you're using?\nI fail to repo this issue with either beta5 or beta6 latest with this command (targeting alpha3 since you work around the problem in alpha4):\ndnu commands install FluentMigrator.Runner.AspNet 1.0.0-alpha3 --no-cache\n. @giggio I can repo the issue now. Working on it.\n. Fixed in cae8aab5b38e0039f03eb87a8d994e3035179206\n. :shipit: \n. Yes. I'm working on a fix to walk back a few changes.\n. a8756813f263acd10a9ba6bc3033d45c216a1fee\n. To fix regression and unblock @danroth27 . This is a quick fix. Nevertheless there should be a more suitable logic then simply ignore namespace.\n. Follow up with https://github.com/aspnet/dnx/issues/2210\n. Ping @anurse @davidfowl @danroth27 \n. Merged a8756813f263acd10a9ba6bc3033d45c216a1fee\n. /cc @moozzyk \nThe current manifest reader doesn't care about xml namespace when searching for element. It works but it's not an ideal behavior. Completely ignore namespace could introduce ambiguous when duplicate elements present in the same manifest.\n. Yes.\n1. If an NuGet specific xml namespace present, using that namespace to search element in this subtree;\n2. Fallback to namespace ignore when there isn't namespace;\n. Where is the change that always writes the normalized version folder?\n-It is done implicitly. The NuGetPackageUtils.InstallFromStream resolve the target path using updatede code. https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.PackageManager/Utils/NuGetPackageUtils.cs#L27. \nDoes this code affect both reads and writes?\n- Base on the code I read so far, yes. Places where NuGet package paths are required, IPackagePathResolver is used to resolve the paths. I'll consult @ChengTian and @anurse tomorrow.\nDoes it work with v2 and v3 feed formats?\n- Yes, in terms of the scenarios of #2192 . There may be broader scenarios be impacted, I'll seek advices from @ChengTian and @anurse and test tomorrow.\nLocal and remote?\n- As far as I can see, DefaultPackagePathResolver is the where the paths are resolved. I'll take a deeper look tomorrow to see if there is other functions resolving the path. If so these functions should be replaced by IPackagePathResolver\n. /cc @anurse @ChengTian \n. Adding a few tests for SemanticVersion\n. We don't have test infrastructure for and actual dun restore test yet. Size of the change seems not to fit in this PR. I file this issue to track the work: https://github.com/aspnet/dnx/issues/2231.\n. Ping :watch: \n. We have a restore test in name which actually test the pre restore script execution only. But there is a install command case test, which we can borrow.\n. I try to review, but the browser just can't catch up with 200 files.\n. Latest build on vNext is 12207, which should contain the change. The normalized version in file name is expected. I tested with FluentManager the installed package. \nThe issue here seems to because the old DNX installed the package using pre-2192-change name, while after upgrading to new DNX the old package is recognized, but normalized name is used to look for name.\n. I can repo this. Here's a quick repo step:\nCreate a project:\njson\n{\n    \"dependencies\": { \"dylan.NET.K\": \"1.3.5\" }\n}\n1. Install DNX 1.0.0-beta6-12189, dnu restore.\n   Notice the packages been added is under ~/.dnx/dylan.NET.k/1.3.5.0/\n2. Install DNX 1.0.0-beta6-12207, do NOT clean the packages folder and dnu restore.\n[Error] Can't find the sha file under ~/.dnx/dylan.NET.k/1.3.5/\nI'm looking at dnu restore now to see where the existing packages is recognized. The normalized string should be used instead.\n. @borgdylan yes. Thanks for reminding. It is tracked in https://github.com/aspnet/dnx/issues/2267. I'm working on a fix.\nThanks!\n. I'll close this issue, through. The dnu restore is fixed.\n. The problem is that System.Resources.ResourceManager/4.0.0-beta-23110 dependes on System.Reflection/4.0.0 which looks for System.Reflection.Primitive/4.0.0 and it's missing.\nWe need to retired 23110 series of CoreCLR packages from vNext feed.\n. Hi @anfomin, sorry for the trouble. I'm working on this right now. Hopefully we can solve this today.\n. Cheers.\n. Yes, change in the PackageRepository was the first though. But then we agreed on Friday that we'd better limit the scope of this change to the dnu restore only. There are more things depends on PackageRepository.\n. All right.\n. Yes, tests will be added. I'll work with @ChengTian \n. @davidfowl @ChengTian \nUpdated. Test Added.\n. :watch: \n. :watch: \n. I'll try out\n. This won't fix that issue though. It needs to normalize the version in PublishCommand. It doesn't use DefaultPackagePathResolver.\nI'll merge this one first then address issue #2267 \n. Tested in Universe and on Mac as well.\n. Ping @davidfowl \nNothing to review here, i'll merge this shortly.\n. /cc @muratg @anurse @victorhurdugaci @BrennanConroy \nThis makes our globbing case insensitive.\n. /cc @muratg please triage.\n. @glennc can you point me to who on CLR team I can ask about this?\n. https://github.com/dotnet/corefx/issues/3156\nThere isn't such API at this point. But CLR team is discussing the possibility of adding one.\n. @muratg @glennc I suggest to move this issue to backlog and pending on CLR team's action.\n. Looks good to me. Mostly rename. :watch: \n. Hi @sklose. You code you point out may cause the issue, I need to take a look. In the meantime, I believe if you clean your packages folder and restore again this issue will go away. \nYou can use this script to clean all caches: https://github.com/troydai/k.toolkit/blob/master/clean-packages.py\n. /cc @muratg I think I can fix this in beta6 time frame.\n. @adamhathcock thanks for letting us know. The fix was checked in recently. Please try a build newer than 12251. Thanks.\n. Hi @tillig It is fixed a newer beta6 DNX build. \n. /cc @davidfowl @BillHiebert \n. /cc @muratg \n. /review @BillHiebert @davidfowl \n/cc @ChengTian @anurse @BrennanConroy \n. @BillHiebert says it works for him.\nPing @davidfowl \n. Need sign off @davidfowl @muratg @BrennanConroy @victorhurdugaci @anurse \nVerified by @BillHiebert \n. I'll go through these error handling again tonight. Before that I already verified a few things before sending the PR:\n- DTH compilation \n  Output window and Error list both looks fine.\n- Dnu build \n  As I showed in the description, the difference is the compilation error message contains framework full names in it now.\n. In terms of the tooling change, @BillHiebert can give a better explanation.\n. Error List looks fine:\n\n. Output Window:\n\n. Compilation error shown in diagnostic page - framework name shows up:\n\nRazor compilation error - the framework name doesn't show up. Because MVC parsing the Razor message by themselves: https://github.com/aspnet/Mvc/blob/e0b8532735997c439e11fff68dd342d5af59f05f/src/Microsoft.AspNet.Mvc.Razor/Compilation/RazorCompilationMessage.cs#L29\n\n. Working on a test now.\n/cc @davidfowl @ChengTian @muratg \n/cc customer @sklose\n. Working on a test now.\n/cc @davidfowl @ChengTian @muratg \n/cc customer @sklose\n. Ping @davidfowl \n. It's checked to release first then merged to dev. Yes.\n. :watch: \n. Looks good to me, too. \n. :shipit: \n. /review @anurse @wendywei345 @victorhurdugaci @BrennanConroy \n/cc @muratg @davidfowl \n. AppVeyor timeout:\nBuild execution time has reached the maximum allowed time for your plan (40 minutes).\nAccording to log, when it timeout the last test was running, \n. Last updated 7/27 2:21\nRecognize analyzer assemblies in library\n- Add property to LibraryExport for analyzers\n- Update ProjectExportProviderHelper.GetExportsRecursive to compile analyzers from the lock file.\n- Feed analyzers list to RoslynCompiler\nDrive the analyzing process\n- Extract DiagnsoticAnalyzer from the analyzers references\n- Update RoslynCompiler to create compilation with analyzer and get diagnostics\n- Analyzer assemblies are loaded in a separate load context\n- Replace Compilation with CompilationWithAnalyzer in CompilationContext\n- Rearrange the RoslynCompiler. Load the analyzer into precompilatiln load context first.\n- In RoslynProjectReference get diagnostics from CompilationWithAnalyer instead\nOutput\n- Mix error and warning in build result\n- Ensure DTH works well in VS\n. Open questions:\n1. Do we want to run all the analyzers in a closure to all the projects?\n[Design Meeting] It depends on a build time dependency issue in DNX => #2361\n2. A switch to the analyzing?\n[Design Meeting] 1. Ignore analyzing during runtime. 2. Otherwise analyzers are always run.\n3. Unless the reference type is \"build\", publish the reference even though it's analyzer.\n. Based on the discussion I had with @anurse\nProposal 1: Lock file based project reference map\nThe motivation behind this change is to allow referencing different projects under folders with same name. With that been said, when referenced projects are indeed identical or different version/iteration of same projects the ambiguous should still be treated as an exception.\nKey pillars:\nProject Name\nRefine the concept of project name. Add a property id to the project.json schema. The value of the property is used as project name when it presents. The folder name as project name is a fallback strategy.\nProject references map in lock file\nOne of the downside of using project.json property to determine project name is the performance hit. \nFor runtime, this can be mitigated by introduce a projects reference map in the lock file, which maps from project name to the relative path to the referenced projects' project.json files. \nScenarios:\ndnu restore\nWhen ProjectResolver is initialized it loads all project.json in the search paths, deserialize them and resolve the actual name. To optimize the performance, the deserialized json objects should be cached.\nAt this stay with the assistance of property name, if there are still ambiguous names exception will be thrown and procedure will be terminated.\nThe referenced project names and relative paths will be eventually written in the lock file.\ndnx run / dnu build\nOther than relies on ProjectResolver to resolve projects, lock file is load and projects map is used to local the referenced projects.\nIssues:\n- Further complicate the lock file;\n- Changing project name requires a dnu restore;\n- Introduce paths in the lock file\nOption:\n- Avoid touch the lock file. Load name from project.json every time. Using a performance optimized deserializer to read just enough content to determine the name.\n. I'm not absolutely sure about the path in locks file, either.\n. Working on adding test.\n. /review @ChengTian @victorhurdugaci @BrennanConroy \n/cc @davidfowl @muratg \nTested in latest VS and VS Code on Omnisharp.\n. @ChengTian compileFiles is different from other patterns. It accepts relative paths to files only. Wildcards are not expected to present. It's documented here: https://github.com/aspnet/Home/wiki/Project.json-file#rules\n. Root path exception is not new. \n. Ping @moozzyk @ChengTian @BrennanConroy :watch: \n. Test for rooted path exception was already there.\nhttps://github.com/aspnet/dnx/blob/dev/test/Microsoft.Framework.Runtime.FunctionalTests/ProjectFileGlobbing/ProjectFilesCollectionTests.cs#L389\n. Test for rooted path exception was already there.\nhttps://github.com/aspnet/dnx/blob/dev/test/Microsoft.Framework.Runtime.FunctionalTests/ProjectFileGlobbing/ProjectFilesCollectionTests.cs#L389\n. :watch: \n. Sorry for mention the case-sensitive issue of option names again. I understand we need a further discussion on how to unify the method. So it is not a blocking issue in this PR.\n. /cc @moozzyk \n. :watch: \n. Example (Message is old, snapshot was taken before the last commit.)\n\n. :watch:  /cc @Eilon @moozzyk \n\n. /cc @anurse @BrennanConroy @victorhurdugaci @muratg \n. /cc @anurse @BrennanConroy @victorhurdugaci @muratg \n. @victorhurdugaci sure I'll wait.\n. @victorhurdugaci sure I'll wait.\n. /cc @anurse @victorhurdugaci \n. /cc @anurse @victorhurdugaci \n. Got a \"shipit\" before rename. I'll merge this later if no one's against this.\n. Got a \"shipit\" before rename. I'll merge this later if no one's against this.\n. Didn't and can't possibly go through the changes. Given that runtime tests and WTE pass let's get this in as early as possible so that potential issues will surface earlier.\n:shipit: \n. Didn't and can't possibly go through the changes. Given that runtime tests and WTE pass let's get this in as early as possible so that potential issues will surface earlier.\n:shipit: \n. :shipit: \n. :shipit: \n. DTH output:\n\nCommand line output:\n\n. DTH output:\n\nCommand line output:\n\n. @davidfowl would you please be more specific about what's the compilation API you think should avoid the change? The changed interfaces are:\n- LibraryExport: Here's the analyzer references are carried. \n- CompilationContext: It's the return value of RoslynCompiler. If the analyzing happens there, it needs to carries the result. Now it carries loaded analyzer. I'll take a look if the changes to it can be removed. But it means the process of creating a separate load context and load analyzer will be pushed further later.\n- NuGetDependencyProvider: It seems unavoidable. It needs to know the runtime framework so as to filter the analyzer. Of course as of now all the analyzers are wrapped in dotnet but it doesn't seem to be guaranteed.\n. @davidfowl would you please be more specific about what's the compilation API you think should avoid the change? The changed interfaces are:\n- LibraryExport: Here's the analyzer references are carried. \n- CompilationContext: It's the return value of RoslynCompiler. If the analyzing happens there, it needs to carries the result. Now it carries loaded analyzer. I'll take a look if the changes to it can be removed. But it means the process of creating a separate load context and load analyzer will be pushed further later.\n- NuGetDependencyProvider: It seems unavoidable. It needs to know the runtime framework so as to filter the analyzer. Of course as of now all the analyzers are wrapped in dotnet but it doesn't seem to be guaranteed.\n. Proposal\nSolution 1\nAdding a new boolean property Resolved to the DependencyDescription model to indicate if the dependency resolved. And the Type property accept the LibraryDescription's Type value.\nSolution 2\nReuse the Type property but append the LibraryDescription.Type with a string indicate if it is resolved or not. So it will look like:\n- Project\n- Package\n- Project:Unresolved\n- Package:Unresolved\nReference\nIn https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.DesignTimeHost/ApplicationContext.cs#L1243\nC#\n        private static DependencyDescription CreateDependencyDescription(LibraryDescription library)\n        {\n            return new DependencyDescription\n            {\n                Name = library.Identity.Name,\n                DisplayName = library.Identity.IsGacOrFrameworkReference ? library.RequestedRange.GetReferenceAssemblyName() : library.Identity.Name,\n                Version = library.Identity.Version?.ToString(),\n                Type = library.Resolved ? library.Type : \"Unresolved\",\n                Path = library.Path,\n                Dependencies = library.Dependencies.Select(dependency => new DependencyItem\n                {\n                    Name = dependency.Name,\n                    Version = dependency.Library?.Identity?.Version?.ToString()\n                })\n            };\n        }\n. Proposal\nSolution 1\nAdding a new boolean property Resolved to the DependencyDescription model to indicate if the dependency resolved. And the Type property accept the LibraryDescription's Type value.\nSolution 2\nReuse the Type property but append the LibraryDescription.Type with a string indicate if it is resolved or not. So it will look like:\n- Project\n- Package\n- Project:Unresolved\n- Package:Unresolved\nReference\nIn https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.DesignTimeHost/ApplicationContext.cs#L1243\nC#\n        private static DependencyDescription CreateDependencyDescription(LibraryDescription library)\n        {\n            return new DependencyDescription\n            {\n                Name = library.Identity.Name,\n                DisplayName = library.Identity.IsGacOrFrameworkReference ? library.RequestedRange.GetReferenceAssemblyName() : library.Identity.Name,\n                Version = library.Identity.Version?.ToString(),\n                Type = library.Resolved ? library.Type : \"Unresolved\",\n                Path = library.Path,\n                Dependencies = library.Dependencies.Select(dependency => new DependencyItem\n                {\n                    Name = dependency.Name,\n                    Version = dependency.Library?.Identity?.Version?.ToString()\n                })\n            };\n        }\n. /cc @davidfowl @abpiskunov \n. /cc @davidfowl @abpiskunov \n. Either way it's a breaking change requires tooling coordination. Data in solution 1 will be easier to be consumed. ping @davidfowl \n. Either way it's a breaking change requires tooling coordination. Data in solution 1 will be easier to be consumed. ping @davidfowl \n. You need a trailing / to indicate it is a folder or append /**/*.* to it.\n. You need a trailing / to indicate it is a folder or append /**/*.* to it.\n. @kichalla can you still repo this issue?\n. @kichalla can you still repo this issue?\n. I'll take a look\n. I'll take a look\n. /cc @muratg I added labels. This looks like a potential regression. I'm investigating.\n. /cc @muratg I added labels. This looks like a potential regression. I'm investigating.\n. It appears to me that webroot folder doesn't participate in the globbing during the publish. It's not an regression. Should we go over the design decision? https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Tooling/Publish/PublishProject.cs#L637\n/cc @davidfowl @glennc \n. It appears to me that webroot folder doesn't participate in the globbing during the publish. It's not an regression. Should we go over the design decision? https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Tooling/Publish/PublishProject.cs#L637\n/cc @davidfowl @glennc \n. It's already stopped since Roslyn RTMed.\n. It's already stopped since Roslyn RTMed.\n. Yup.\n. Yup.\n. Waiting for comments: /cc @yishaigalatzer @anurse @davidfowl \n. Waiting for comments: /cc @yishaigalatzer @anurse @davidfowl \n. @anurse do we need to increase the lockfile version?\n. @anurse do we need to increase the lockfile version?\n. :watch: @davidfowl @anurse @yishaigalatzer \n. :watch: rebased, build verified and tested in VS. sign off?\n/cc @davidfowl @anurse @yishaigalatzer \n. I'm going to merge it soon. Fowler went through this PR last night.\n. Currently working item 2. I plan to stop dnu restore from diving into subfolder of a folder already containing a project.json\n. Currently working item 2. I plan to stop dnu restore from diving into subfolder of a folder already containing a project.json\n. Update: looks like we already did it however partially (https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Tooling/Restore/RestoreCommand.cs#L107)\nIf the given restoreDirectory doesn't contain a project.json it will still dive into deeper level.\n. Update: looks like we already did it however partially (https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Tooling/Restore/RestoreCommand.cs#L107)\nIf the given restoreDirectory doesn't contain a project.json it will still dive into deeper level.\n. /cc @muratg this one is really old. and we have work items track this work for CLI. can we close it?\n. /cc @muratg this one is really old. and we have work items track this work for CLI. can we close it?\n. Is it constant?\n. Is it constant?\n. https://github.com/aspnet/dnx/issues/2483\n. https://github.com/aspnet/dnx/issues/2483\n. Need more reviewer:\n/cc @victorhurdugaci @anurse @BrennanConroy @lodejard @loudej \n. Need more reviewer:\n/cc @victorhurdugaci @anurse @BrennanConroy @lodejard @loudej \n. :watch: \n. :watch: \n. @davidfowl \n. I'll merge once travis pass.\n. It looks good to me. :shipit: \n. :shipit: my comments shouldn't block the PR.\n. The only place we send out \"Error\" message is in the \"catch all\" in the processing loop. It is not associated or computed during update the \"World\".\n. Updated. Error is registered in remove World.\n. :watch: \n. /cc @davidfowl \n. Similar issue happens in EF as well. Our allocation is intensive.\n. I'll take a look.\n. I can confirm this issue. DependencyDiagnostics are sent twice for two frameworks. The second one suppress the first one.\nInformation: [ProcessingQueue]: Send((59db3afca7fd498ab7f75cbea9f3b944, DependencyDiagnostics, 4) -> {\n  \"Framework\": {\n    \"FrameworkName\": \"DNXCore,Version=v5.0\",\n    \"FriendlyName\": \"DNX Core 5.0\",\n    \"ShortName\": \"dnxcore50\",\n    \"RedistListPath\": null\n  },\n  \"Errors\": [\n    {\n      \"SourceFilePath\": \"c:\\\\Users\\\\Xueyuan\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\ClassLibrary3\\\\src\\\\ClassLibrary3\\\\project.json\",\n      \"Message\": \"The dependency EntityFramework 6.1.3 in project ClassLibrary3 does not support framework DNXCore,Version=v5.0.\",\n      \"Severity\": 2,\n      \"StartLine\": 15,\n      \"StartColumn\": 28,\n      \"EndLine\": 15,\n      \"EndColumn\": 28,\n      \"FormattedMessage\": \"c:\\\\Users\\\\Xueyuan\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\ClassLibrary3\\\\src\\\\ClassLibrary3\\\\project.json(15,28): error: The dependency EntityFramework 6.1.3 in project ClassLibrary3 does not support framework DNXCore,Version=v5.0.\"\n    }\n  ],\n  \"Warnings\": []\n})\nInformation: [ApplicationContext]: OnTransmit(DependencyDiagnostics)\nInformation: [ProcessingQueue]: Send((59db3afca7fd498ab7f75cbea9f3b944, DependencyDiagnostics, 4) -> {\n  \"Framework\": {\n    \"FrameworkName\": \"DNX,Version=v4.5.1\",\n    \"FriendlyName\": \"DNX 4.5.1\",\n    \"ShortName\": \"dnx451\",\n    \"RedistListPath\": \"C:\\\\Program Files (x86)\\\\Reference Assemblies\\\\Microsoft\\\\Framework\\\\.NETFramework\\\\v4.5.1\\\\RedistList\\\\FrameworkList.xml\"\n  },\n  \"Errors\": [],\n  \"Warnings\": []\n})\n. The messages looks good to me. @PradeepKadubandi will help further inspect into VS tooling's logic.\n. @abpiskunov I can repo this issue, but I think we need to work together to locate the root cause.\nThe two messages I listed above were sent after DTH got RestoreComplete and RefreshDependencies.\n. /cc @davidfowl did I set correct label for this issue?\n. /review @BrennanConroy @victorhurdugaci @davidfowl @Eilon \n. Will merge after travis pass.\n. /cc @davidfowl \n. The first test case has been checked in d4465d83c176bab267bca61b205d7ac7a13b625f.\n. Adding following tests now:\n- [x] Protocol Negotiation: https://github.com/aspnet/dnx/pull/2653\n- [x] Perform Compilation\n- [x] Refresh Dependencies\n. More work planned.\n. Not validate any more. Close.\n. :watch: @victorhurdugaci @ChengTian \n. :watch: @davidfowl \n. :watch: @davidfowl @ChengTian \n. Travis passed. Ping @davidfowl \n. Ping @davidfowl \n. Observation Note\n1. PackageDependencyProvider keeps adding breadcrumbs throughout the entire life cycle. see here\n2. Since that the PackageDependencyProvider adding breadcrumbs each time GetDescription is called, there are duplicate value in the _breadcrumbsToWrite list. It can be replaced by an HashSet. see here\n3. Set $env:DNX_NO_BREADCRUMBS=1, then the breadcrumbs memory consumption completely disappeared.\nI'll begin prototyping some fix.\n/cc @davidfowl @victorhurdugaci @rynowak \n. /cc @rynowak MVC solution DTH performance case\n. Note\nThe IPathSegments are used during file globbing. But file globbing doesn't happen all the time. We can trade-off between regenerated these IPathSegments again vs. hold on to them.\n. /cc @victorhurdugaci \nHi @mikeandersun, sorry for the inconvenience. Unfortunately the latest DNX build on aspnetvnext is broken. We're working on publishing a good build as fast as we can, if you don't mind waiting for a day or two. If you need a workable build right now, please try set DNX_FEED to https://www.myget.org/F/aspnetlitedev/api/v2 to get a unstable DNX build. It should solve your issue.\n. Thanks @per-samuelsson , you beat me by seconds. Yes the aspnetliterelease is also an option, which maps to beta7 build while aspnetlitedev hosts beta8 build. \n. @mikeandersun what's the project are you trying to run? \n. @mikeandersun we're pushing tested packages to aspnetvnext feed now. Can you that out?\n. /cc @rynowak MVC solution DTH performance case\n. Retained (or at least I think)\nApplicationContext -> World -> ProjectWorld -> DependencyDiagnostics:DiagnosticsListMessage\nThe list is used to diff the local and remote world to decide if diagnostics message should be sent again.\nhttps://github.com/aspnet/dnx/blob/fe93ce90df6e391d358437f7146103918f3e49ea/src/Microsoft.Dnx.DesignTimeHost/ApplicationContext.cs#L662\n. To achieve that goal, I wondering if there is a cheaper way.\n. Also look at this Refs-To chart\nDictionary introduces huge overhead.\nName                                                                                                        Inc %             Inc       Inc Ct\n LIB <<mscorlib!Dictionary>>                                                                                 15.8      76,075,664   1,392,170.250\n+ Microsoft.Dnx.DesignTimeHost!Microsoft.Dnx.DesignTimeHost.Models.OutgoingMessages.DependencyDescription     6.4      30,741,158   826,496.188\n. :shipit: let's save MVC team 400 MB memory in their day-to-day life.\n. However these SemanticVersion instances will be forever referred in the static dictionary. To address this problem: https://github.com/aspnet/dnx/issues/2475\n. @anurse is this bug still valid under the context of dotnet?\n. /cc @victorhurdugaci @anurse \n. Ping @davidfowl Travis passed.\n. :watch: \nPing @davidfowl \n. Updated. Ping @davidfowl \n. Adding more eyes:\n/cc @victorhurdugaci @BrennanConroy @anurse @moozzyk \n. /cc @muratg \n. Ping @davidfowl \n. Ping @davidfowl \n. Both travis failure this morning after rebase is caused by Travis itself.\n. @BrennanConroy thanks for the advice. Still pushed, because it passed on Mac as well as my local environment. I'm monitoring our CI.\n. I'll take a look\n. Hi @Anderman , I'd like to point out you're using the VS2015 RC. Can you try the same scenario with VS 2015 RTM?\n. @Anderman I found this issue is tracked by tooling team. I'll close this issue for now. Please feel free to open if there is anything more directly point the root cause to runtime. Thanks.\n. Dependencies doesn't change, just adds a search path in global.json. The expectation is that the project references will be sent back to VS can act. The scenario works for beta-6 as I just tried seconds ago. I'm trying this on beta8 now.\n. Yeah, it's a regression from beta7. I'll investigate after lunch.\n. @muratg @glennc This looks like a DTH related issue, I assign this to myself for now. Please advice otherwise.\n. /cc @davidfowl @PradeepKadubandi \nAfter recent runtime refractory the dependency resolving now purely depends on the lock file. The lock file is not updated in this case, therefore updating global.json won't update the dependencies of projects.\nThere are a few solutions.\nOne is to make VS restore every project when search paths are changed in global.json. This solution doesn't require runtime change and also align with the usage of DNX at runtime. However, design time takes performance hit when global.json is updated. It is not idea for large solution like MVC.\nThe other idea is to adding communicate message between DTH and VS. Whenever search paths are updated VS asks DTH to advise if a restore is needed. Internally DTH can scan through the project.json and map the dependencies then comparing to the lock file. This solution requires change in DTH and also add new feature to DTH protocol.\nThe last solution is to partially walk back the runtime refractory. In addition to lock file, a list of projects in search paths is listed. For every dependencies read from the lock file a quick query can be made against the list so as to know if the lock file is invalid. This logic can be triggered for design time only.\n. Ping @davidfowl \n. @PradeepKadubandi \n. Thanks @PradeepKadubandi. I'll close this issue as it doesn't need work on runtime side.\n. Per discussion with @davidfowl, we decide to reopen this issue and explore a new solution.\nWe can log the search paths (from global.json) in lock file. As a result, we can invalidate the lock file when global.json is updated. It helps tooling mitigate the performance hit. And also make the console solution more reliable.\n. /cc @muratg @PradeepKadubandi \n. New solution:\n1. At runtime, stop validating lock file, let it run as is.\n2. Validating lock file at compile time and design time (DTH). In terms of the project paths scan the disk.\n. Fixed in 5066768dd3ba6a3ef0d79504ccef7508869e4cf5\n. :shipit: \n. Well we do have work items to track the duplicate allocation of various things https://github.com/aspnet/dnx/issues/1446. And we're working on reducing the amount of string and duplicate data used in lock file reading.\nThanks @benaadams \n@muratg I link this issue to our other performance bugs.\n. /review: @davidfowl \n/cc: @muratg @BrennanConroy @victorhurdugaci @anurse \nAs expected it should break VS in unresolved dependency situation. I'll testing in VS right now.\n. @abpiskunov please comment. This change needs VS side's update as well.\n. @davidfowl do you think it is good to go?\n. If we want the test to be reliable we have to create the package on the fly.\n. So. @abpiskunov I'll add the wrap test later in the future. The work is being tracked here https://github.com/aspnet/dnx/issues/2502\nI'll add test for incompatible package and asserts references.\n. :watch: @davidfowl \n. Examining the Travis failure now.\n. Travis failure due to myget timeout. I rebase and triggered another run.\n. Travis passed. I'll merge after squash the commits.\n. We have a new solution to the issue.\n. Looks good to me.\n. @muratg @glennc for triage\n/cc @davidfowl \n. /cc @rynowak \n. @muratg I'll assign this to me for now. \n. /cc @victorhurdugaci who hits this issue today as well.\n. Fixed in 6944973dd0b2b1e2a6ca942b92180a9751d1688e\n. Need to think again.\n. It doesn't fail majorly because unresolved dependencies in lock file stop the program from further consuming the project. \n. Went through the references.\n- [x] ProjectDescription.TargetFrameworkInformation 6 references.\n- [x] ProjectDescription.Project 17 references.\n- [x] ProjectReference.Project 3 references.\n. I'm still working on integration tests.\n. :watch: @davidfowl \n. @muratg @victorhurdugaci @BrennanConroy @anurse \n. Proposed new error/warning entity (or may be reuse existing DependencyDiagnosticss)\nJSON\n{\n  \"dependency\": {\n    \"name\": \"the dependency name\",\n    \"version\": \"the requested version\",\n    \"type\": \"package / project / unresolved\",\n    \"resolved\": \"true / false\"\n  },\n  \"message\": \"NU100X: error message\"\n}\n. /cc @muratg this is a tooling team proposed beta 8 task\n. Fixed in 5db0890391be3ec34cee776c789431263055fce0\n. We will add a boolean property to the type representing the dependency to indicate if this dependency overrides other dependency.\n. /cc @muratg this is a beta-8 task suggested by tooling team. Please triage.\n. @abpiskunov it can't be determined which dependency actually wins and override others because it is possible multiple dependencies meet the requirement. In addition the current lock file doesn't provide enough information for DTH to peak into the decision making process to gain the knowledge. The best we can do is to have boolean on dependencies to clear state if it is overridden, which means the actual version is not the requested version.\n. To: @DamianEdwards @abpiskunov @davidfowl \nCC: @BillHiebert @muratg \nSubject: Change the solution\nBase on the idea that we want to have the information of what dependency overrides the other, I build this prototype to demonstrate what the response will look like in DTH. (https://github.com/aspnet/dnx/tree/trdai/dnx2744)\nSince we can't deterministically tell what exactly caused the overridden, the prototype tries to list all the \"winner\" dependencies paths. When tested in 'MVC.sln', I found that the prototype increase the size of the response dramatically and the result is extremely noisy. For example this is an extreme case (full example here: https://gist.github.com/troydai/46151f5967d138af045e)\nJSON\n    \"System.Reflection.Primitives\": {\n      \"Name\": \"System.Reflection.Primitives\",\n      \"DisplayName\": \"System.Reflection.Primitives\",\n      \"Version\": \"4.0.0\",\n      \"Path\": \"C:\\\\Users\\\\trdai\\\\.dnx\\\\packages\\\\System.Reflection.Primitives\\\\4.0.0\",\n      \"Type\": \"Package\",\n      \"Resolved\": true,\n      \"Dependencies\": [\n        {\n          \"Name\": \"System.Runtime\",\n          \"Version\": \"4.0.21-beta-23405\",\n          \"Override\": true,\n          \"OverrideBy\": [\n            \"Microsoft.AspNet.Mvc/6.0.0 => Microsoft.AspNet.Mvc.ViewFeatures/6.0.0 => Microsoft.AspNet.Diagnostics.Abstractions/1.0.0-rc1-15849 => System.Runtime/4.0.21-beta-23405 => END\",\n            \"Microsoft.AspNet.Mvc/6.0.0 => Microsoft.AspNet.Mvc.Razor/6.0.0 => Microsoft.AspNet.Mvc.ViewFeatures/6.0.0 => Microsoft.AspNet.Diagnostics.Abstractions/1.0.0-rc1-15849 => System.Runtime/4.0.21-beta-23405 => END\",\n            \"Microsoft.AspNet.Mvc/6.0.0 => Microsoft.AspNet.Mvc.Localization/6.0.0 => Microsoft.AspNet.Mvc.Razor/6.0.0 => Microsoft.AspNet.Mvc.ViewFeatures/6.0.0 => Microsoft.AspNet.Diagnostics.Abstractions/1.0.0-rc1-15849 => System.Runtime/4.0.21-beta-23405 => END\",\n            \"Microsoft.AspNet.Mvc/6.0.0 => Microsoft.AspNet.Mvc.ViewFeatures/6.0.0 => Microsoft.AspNet.Antiforgery/1.0.0-rc1-15720 => Microsoft.AspNet.Http.Abstractions/1.0.0-rc1-15796 => System.Runtime/4.0.21-beta-23405 => END\",\n            \"Microsoft.AspNet.Mvc/6.0.0 => Microsoft.AspNet.Mvc.Razor/6.0.0 => Microsoft.AspNet.Mvc.ViewFeatures/6.0.0 => Microsoft.AspNet.Antiforgery/1.0.0-rc1-15720 => Microsoft.AspNet.Http.Abstractions/1.0.0-rc1-15796 => System.Runtime/4.0.21-beta-23405 => END\",\n            \"Microsoft.AspNet.Mvc/6.0.0 => Microsoft.AspNet.Mvc.Localization/6.0.0 => Microsoft.AspNet.Mvc.Razor/6.0.0 => Microsoft.AspNet.Mvc.ViewFeatures/6.0.0 => Microsoft.AspNet.Antiforgery/1.0.0-rc1-15720 => Microsoft.AspNet.Http.Abstractions/1.0.0-rc1-15796 => System.Runtime/4.0.21-beta-23405 => END\",\n            \"Microsoft.AspNet.Mvc/6.0.0 => Microsoft.AspNet.Mvc.ApiExplorer/6.0.0 => Microsoft.AspNet.Mvc.Core/6.0.0 => Microsoft.AspNet.Hosting.Abstractions/1.0.0-rc1-15744 => Microsoft.AspNet.Http.Abstractions/1.0.0-rc1-15796 => System.Runtime/4.0.21-beta-23405 => END\",\n            // 600+ more overridden paths\n           ]\n        }\n      ]\n    }\nWhat happened? A lot of the CoreCLR packages' references are not updated precisely. The overridden becomes a normal way to resolve the right packages. Given the dozens of small packages an CoreCLR project will introduce it easily causes a dramatically big results if we walk through every path in the dependency tree which involve dependency overridden.\nAfter discuss with @DamianEdwards, we figured that changing the \"Dependnecy\" response is not the solution. Actually given that much information it may not be suitable for VS to handle the information. The idea came up is to expand the function of command dnu list.\n1. Add a subcommand to request all the dependencies which requested version is different from the final version (the losing dependnecies);\n2. Add a subcommand to dive into one specific dependency for its source. For a winning dependency, it is the full dependnecy path from root. For a losing dependency, it is the winning dependnecies who take over it. \nI'll close this issue and open new one on dnu list.\n. CC: @sayedihashimi \n. @sayedihashimi @DamianEdwards \nA simple Boolean value to indicate if a dependency is overridden is easy. If we still want to should some kind of indication in UI I can add the value to dependencies response.\n. Then I guess we close this case for now.\n. Please check my previous commit for the reason why we can't do what you proposed here. \n. :watch: \n. :shipit: \nPlease ping me on your other test code PR.\n. Travis is failing. Is it expected?\n. /cc @davidfowl \n. /review @anurse @victorhurdugaci @muratg \n. Examining the Travis failure\n. Travis pass, ping @davidfowl \n. @davidfowl signed off verbally ...\n. Ping @davidfowl \n. The Travis failure is caused by a Mono exception during restore.\n. Ping @davidfowl \n. Ping @davidfowl \n. Travis passed. I'll squash the commits and push soon.\n. Travis just hates everything today. @BrennanConroy is this known?\nFailed to locate libcoreclr with error /home/travis/build/aspnet/dnx/artifacts/test/dnx-coreclr-linux-x64/runtimes/dnx-coreclr-linux-x64.1.0.0-t150923181329/bin/libcoreclr.so: cannot open shared object file: No such file or directory\nRetry.\n. /cc @muratg @anurse @BrennanConroy @victorhurdugaci \nNeed a sign off. \n. Ping @JunTaoLuo \n. Both passed, will merge.\n. Rest my case. Looks good enough for me :shipit: when Travis pass and comments are addressed.\n. :shipit: \n. :shipit: looks good to me.\n. @troydai\n. Related https://github.com/aspnet/dnx/issues/2744\n@muratg @davidfowl I assign this to myself for now. It relats to #2744 \n. I suspect we can finish it in time before branching.\n. In short it's hard to achieve without a big change to lock file and restore process. \nReference:\nhttps://github.com/aspnet/dnx/issues/2744\n. @abpiskunov can you try this scenario again. I try to repo this issue on my own sample (https://github.com/aspnet/dnx/tree/trdai/dnx2948.1/misc/DependencyOverrideNearest) got this result:\nFor Library\nInformation: [ProcessingQueue]: Send((4e789734e4fd4515b6425eca10c7387a, DependencyDiagnostics, 3) -> {\n  \"Framework\": {\n    \"FrameworkName\": \"DNX,Version=v4.5.1\",\n    \"FriendlyName\": \"DNX 4.5.1\",\n    \"ShortName\": \"dnx451\",\n    \"RedistListPath\": \"C:\\\\Program Files (x86)\\\\Reference Assemblies\\\\Microsoft\\\\Framework\\\\.NETFramework\\\\v4.5.1\\\\RedistList\\\\FrameworkList.xml\"\n  },\n  \"Errors\": [],\n  \"Warnings\": []\n})\nFor Main Project\nInformation: [ProcessingQueue]: Send((4e789734e4fd4515b6425eca10c7387a, DependencyDiagnostics, 4) -> {\n  \"Framework\": {\n    \"FrameworkName\": \"DNX,Version=v4.5.1\",\n    \"FriendlyName\": \"DNX 4.5.1\",\n    \"ShortName\": \"dnx451\",\n    \"RedistListPath\": \"C:\\\\Program Files (x86)\\\\Reference Assemblies\\\\Microsoft\\\\Framework\\\\.NETFramework\\\\v4.5.1\\\\RedistList\\\\FrameworkList.xml\"\n  },\n  \"Errors\": [],\n  \"Warnings\": [\n    {\n      \"ErrorCode\": \"NU1007\",\n      \"SourceFilePath\": \"C:\\\\code\\\\playground\\\\DependencyOverrideNearest\\\\src\\\\Library\\\\project.json\",\n      \"Message\": \"Dependency specified was Newtonsoft.Json >= 7.0.1 but ended up with Newtonsoft.Json 6.0.8.\",\n      \"Severity\": 1,\n      \"StartLine\": 6,\n      \"StartColumn\": 24,\n      \"EndLine\": 6,\n      \"EndColumn\": 24,\n      \"FormattedMessage\": \"C:\\\\code\\\\playground\\\\DependencyOverrideNearest\\\\src\\\\Library\\\\project.json(6,24): warning NU1007: Dependency specified was Newtonsoft.Json >= 7.0.1 but ended up with Newtonsoft.Json 6.0.8.\",\n      \"Source\": {\n        \"Name\": \"Newtonsoft.Json\",\n        \"Version\": \"6.0.8\"\n      }\n    }\n  ]\n})\nThis looks correct to me because there is a dependency overriden in the Main project but not in Library. Is this your original concern?\n. So what concerns you is the warning under the Newtonsoft.Json Diagnostics. The warning is actually correct. It indicates that in the project.json of Library project there is a dependency points to Newtonsoft.Json/7.0.1 but it is overridden and resvoled as 6.0.8. There isn't a warning on project.json of Main.\nInformation: [ProcessingQueue]: Send((4e789734e4fd4515b6425eca10c7387a, Dependencies, 4) -> {\n  \"Framework\": {\n    \"FrameworkName\": \"DNX,Version=v4.5.1\",\n    \"FriendlyName\": \"DNX 4.5.1\",\n    \"ShortName\": \"dnx451\",\n    \"RedistListPath\": \"C:\\\\Program Files (x86)\\\\Reference Assemblies\\\\Microsoft\\\\Framework\\\\.NETFramework\\\\v4.5.1\\\\RedistList\\\\FrameworkList.xml\"\n  },\n  \"RootDependency\": \"Main\",\n  \"Dependencies\": {\n    \"Main\": {\n      \"Name\": \"Main\",\n      \"DisplayName\": \"Main\",\n      \"Version\": \"1.0.0\",\n      \"Path\": \"C:\\\\code\\\\playground\\\\DependencyOverrideNearest\\\\src\\\\Main\\\\project.json\",\n      \"Type\": \"Project\",\n      \"Resolved\": true,\n      \"Dependencies\": [\n        {\n          \"Name\": \"Library\",\n          \"Version\": \"1.0.0\"\n        },\n        {\n          \"Name\": \"Newtonsoft.Json\",\n          \"Version\": \"6.0.8\"\n        },\n        {\n          \"Name\": \"fx/mscorlib\",\n          \"Version\": \"4.0.0\"\n        },\n        {\n          \"Name\": \"fx/System\",\n          \"Version\": \"4.0.0\"\n        },\n        {\n          \"Name\": \"fx/System.Core\",\n          \"Version\": \"4.0.0\"\n        },\n        {\n          \"Name\": \"fx/Microsoft.CSharp\",\n          \"Version\": \"4.0.0\"\n        }\n      ],\n      \"Errors\": [],\n      \"Warnings\": []\n    },\n    \"Library\": {\n      \"Name\": \"Library\",\n      \"DisplayName\": \"Library\",\n      \"Version\": \"1.0.0\",\n      \"Path\": \"C:\\\\code\\\\playground\\\\DependencyOverrideNearest\\\\src\\\\Library\\\\project.json\",\n      \"Type\": \"Project\",\n      \"Resolved\": true,\n      \"Dependencies\": [\n        {\n          \"Name\": \"Newtonsoft.Json\",\n          \"Version\": \"6.0.8\"\n        },\n        {\n          \"Name\": \"fx/mscorlib\",\n          \"Version\": \"4.0.0\"\n        },\n        {\n          \"Name\": \"fx/System\",\n          \"Version\": \"4.0.0\"\n        },\n        {\n          \"Name\": \"fx/System.Core\",\n          \"Version\": \"4.0.0\"\n        },\n        {\n          \"Name\": \"fx/Microsoft.CSharp\",\n          \"Version\": \"4.0.0\"\n        }\n      ],\n      \"Errors\": [],\n      \"Warnings\": []\n    },\n    \"Newtonsoft.Json\": {\n      \"Name\": \"Newtonsoft.Json\",\n      \"DisplayName\": \"Newtonsoft.Json\",\n      \"Version\": \"6.0.8\",\n      \"Path\": \"C:\\\\Users\\\\trdai\\\\.dnx\\\\packages\\\\Newtonsoft.Json\\\\6.0.8\",\n      \"Type\": \"Package\",\n      \"Resolved\": true,\n      \"Dependencies\": [],\n      \"Errors\": [],\n      \"Warnings\": [\n        {\n          \"ErrorCode\": \"NU1007\",\n          \"SourceFilePath\": \"C:\\\\code\\\\playground\\\\DependencyOverrideNearest\\\\src\\\\Library\\\\project.json\",\n          \"Message\": \"Dependency specified was Newtonsoft.Json >= 7.0.1 but ended up with Newtonsoft.Json 6.0.8.\",\n          \"Severity\": 1,\n          \"StartLine\": 6,\n          \"StartColumn\": 24,\n          \"EndLine\": 6,\n          \"EndColumn\": 24,\n          \"FormattedMessage\": \"C:\\\\code\\\\playground\\\\DependencyOverrideNearest\\\\src\\\\Library\\\\project.json(6,24): warning NU1007: Dependency specified was Newtonsoft.Json >= 7.0.1 but ended up with Newtonsoft.Json 6.0.8.\",\n          \"Source\": {\n            \"Name\": \"Newtonsoft.Json\",\n            \"Version\": \"6.0.8\"\n          }\n        }\n      ]\n    },\n    \"fx/mscorlib\": {\n      \"Name\": \"fx/mscorlib\",\n      \"DisplayName\": \"mscorlib\",\n      \"Version\": \"4.0.0\",\n      \"Path\": \"C:\\\\Program Files (x86)\\\\Reference Assemblies\\\\Microsoft\\\\Framework\\\\.NETFramework\\\\v4.5.1\\\\mscorlib.dll\",\n      \"Type\": \"Assembly\",\n      \"Resolved\": true,\n      \"Dependencies\": [],\n      \"Errors\": [],\n      \"Warnings\": []\n    },\n    \"fx/System\": {\n      \"Name\": \"fx/System\",\n      \"DisplayName\": \"System\",\n      \"Version\": \"4.0.0\",\n      \"Path\": \"C:\\\\Program Files (x86)\\\\Reference Assemblies\\\\Microsoft\\\\Framework\\\\.NETFramework\\\\v4.5.1\\\\System.dll\",\n      \"Type\": \"Assembly\",\n      \"Resolved\": true,\n      \"Dependencies\": [],\n      \"Errors\": [],\n      \"Warnings\": []\n    },\n    \"fx/System.Core\": {\n      \"Name\": \"fx/System.Core\",\n      \"DisplayName\": \"System.Core\",\n      \"Version\": \"4.0.0\",\n      \"Path\": \"C:\\\\Program Files (x86)\\\\Reference Assemblies\\\\Microsoft\\\\Framework\\\\.NETFramework\\\\v4.5.1\\\\System.Core.dll\",\n      \"Type\": \"Assembly\",\n      \"Resolved\": true,\n      \"Dependencies\": [],\n      \"Errors\": [],\n      \"Warnings\": []\n    },\n    \"fx/Microsoft.CSharp\": {\n      \"Name\": \"fx/Microsoft.CSharp\",\n      \"DisplayName\": \"Microsoft.CSharp\",\n      \"Version\": \"4.0.0\",\n      \"Path\": \"C:\\\\Program Files (x86)\\\\Reference Assemblies\\\\Microsoft\\\\Framework\\\\.NETFramework\\\\v4.5.1\\\\Microsoft.CSharp.dll\",\n      \"Type\": \"Assembly\",\n      \"Resolved\": true,\n      \"Dependencies\": [],\n      \"Errors\": [],\n      \"Warnings\": []\n    }\n  }\n})\nOn the other hand there is no warning under the Dependencies message from Library project, which it because it is resolved to 7.0.1 by itself.\nInformation: [ProcessingQueue]: Send((4e789734e4fd4515b6425eca10c7387a, Dependencies, 3) -> {\n  \"Framework\": {\n    \"FrameworkName\": \"DNX,Version=v4.5.1\",\n    \"FriendlyName\": \"DNX 4.5.1\",\n    \"ShortName\": \"dnx451\",\n    \"RedistListPath\": \"C:\\\\Program Files (x86)\\\\Reference Assemblies\\\\Microsoft\\\\Framework\\\\.NETFramework\\\\v4.5.1\\\\RedistList\\\\FrameworkList.xml\"\n  },\n  \"RootDependency\": \"Library\",\n  \"Dependencies\": {\n    \"Library\": {\n      \"Name\": \"Library\",\n      \"DisplayName\": \"Library\",\n      \"Version\": \"1.0.0\",\n      \"Path\": \"C:\\\\code\\\\playground\\\\DependencyOverrideNearest\\\\src\\\\Library\\\\project.json\",\n      \"Type\": \"Project\",\n      \"Resolved\": true,\n      \"Dependencies\": [\n        {\n          \"Name\": \"Newtonsoft.Json\",\n          \"Version\": \"7.0.1\"\n        },\n        {\n          \"Name\": \"fx/mscorlib\",\n          \"Version\": \"4.0.0\"\n        },\n        {\n          \"Name\": \"fx/System\",\n          \"Version\": \"4.0.0\"\n        },\n        {\n          \"Name\": \"fx/System.Core\",\n          \"Version\": \"4.0.0\"\n        },\n        {\n          \"Name\": \"fx/Microsoft.CSharp\",\n          \"Version\": \"4.0.0\"\n        }\n      ],\n      \"Errors\": [],\n      \"Warnings\": []\n    },\n    \"Newtonsoft.Json\": {\n      \"Name\": \"Newtonsoft.Json\",\n      \"DisplayName\": \"Newtonsoft.Json\",\n      \"Version\": \"7.0.1\",\n      \"Path\": \"C:\\\\Users\\\\trdai\\\\.dnx\\\\packages\\\\Newtonsoft.Json\\\\7.0.1\",\n      \"Type\": \"Package\",\n      \"Resolved\": true,\n      \"Dependencies\": [],\n      \"Errors\": [],\n      \"Warnings\": []\n    },\n    \"fx/mscorlib\": {\n      \"Name\": \"fx/mscorlib\",\n      \"DisplayName\": \"mscorlib\",\n      \"Version\": \"4.0.0\",\n      \"Path\": \"C:\\\\Program Files (x86)\\\\Reference Assemblies\\\\Microsoft\\\\Framework\\\\.NETFramework\\\\v4.5.1\\\\mscorlib.dll\",\n      \"Type\": \"Assembly\",\n      \"Resolved\": true,\n      \"Dependencies\": [],\n      \"Errors\": [],\n      \"Warnings\": []\n    },\n    \"fx/System\": {\n      \"Name\": \"fx/System\",\n      \"DisplayName\": \"System\",\n      \"Version\": \"4.0.0\",\n      \"Path\": \"C:\\\\Program Files (x86)\\\\Reference Assemblies\\\\Microsoft\\\\Framework\\\\.NETFramework\\\\v4.5.1\\\\System.dll\",\n      \"Type\": \"Assembly\",\n      \"Resolved\": true,\n      \"Dependencies\": [],\n      \"Errors\": [],\n      \"Warnings\": []\n    },\n    \"fx/System.Core\": {\n      \"Name\": \"fx/System.Core\",\n      \"DisplayName\": \"System.Core\",\n      \"Version\": \"4.0.0\",\n      \"Path\": \"C:\\\\Program Files (x86)\\\\Reference Assemblies\\\\Microsoft\\\\Framework\\\\.NETFramework\\\\v4.5.1\\\\System.Core.dll\",\n      \"Type\": \"Assembly\",\n      \"Resolved\": true,\n      \"Dependencies\": [],\n      \"Errors\": [],\n      \"Warnings\": []\n    },\n    \"fx/Microsoft.CSharp\": {\n      \"Name\": \"fx/Microsoft.CSharp\",\n      \"DisplayName\": \"Microsoft.CSharp\",\n      \"Version\": \"4.0.0\",\n      \"Path\": \"C:\\\\Program Files (x86)\\\\Reference Assemblies\\\\Microsoft\\\\Framework\\\\.NETFramework\\\\v4.5.1\\\\Microsoft.CSharp.dll\",\n      \"Type\": \"Assembly\",\n      \"Resolved\": true,\n      \"Dependencies\": [],\n      \"Errors\": [],\n      \"Warnings\": []\n    }\n  }\n})\n. @abpiskunov it'll be nicer if we can tell the overridden source. however it is really difficult under our current dependency resolving mechanism. You may want to try to use the source file path to filter the unwanted warnings.\n. People, this is a beta-8. I want more people helping me take a look and sign off this soon.\n@abpiskunov @anurse @BrennanConroy @davidfowl @JunTaoLuo @moozzyk  @muratg\n. Wew, Wew, Wew, on my way to #2795 \n. Rebased and squashed. Waiting for Travis result\n. Travis passed. I'll merge shortly.\n. :shipit: \n. :shipit: \n. /cc @muratg \nProbably won't make into beta8\n. :shipit: \n. Oh, Dam it. Assign to my self. Please help me to place it in the right milestone @muratg \n. Fixed in e874201acc19854caff9236b420b2864152659c0\n. No, sorry. Unfortunately it doesn't make into beta8. I hope it doesn't significantly impact your project. Thanks for the patience.\n. Assign to myself, I'll take at look.\n/cc @muratg \n. Talked to @davidfowl we found this to be better addressed on the VS end.\nhttps://github.com/aspnet/Tooling/issues/206\n. :shipit: \n. I will not change the name of the DrainTillFirst for now. It's not in the scope of this change. But I will consider renaming. Besides that it looks cool. Some one sign off?\n. Any tests?\n. Test non-zero. That makes sense. I was wondering why there is no test broken. Only thing I'd like to have covered in tests is that instead of testing non-zero how about testing >0 so as to cover the essence of this change.\n. I kicked off a re-run. You're welcome.\n. Looks good to me. :shipit: if Travis passes.\n. Travis passed. Ping.\n. Travis passed, I'll merge in seconds.\n. I know it's hard but can we separate rename from updating tests?\n. So please remove all the fixtures and collection attribute.\n. Please ensure all the issues mentioned in this PR are tracked.\n:shipit: \n. Ping\n. :shipit: \n. Actually this one:\nMicrosoft.Dnx.Tooling.FunctionalTests.DnuRuntimeRestoreTests.DnuRestore_GeneratesDefaultRuntimeTargets(flavor: \"mono\", os: null, architecture: null) [FAIL]\n. @BrennanConroy said it was fixed, just need rebase. @moozzyk can you give it a try?\n. @davidfowl correct me if I'm wrong.\n@abpiskunov To find out which dependency wins is actually tricker than figure out who lost. If we purely analysis based on current lock file, it may leads into ambiguous situation. For example multiple libraries resolved to Newtonsoft.Json\\6.0.8 and they're all equally responsible under the rules then we can't deterministically choose one as the really winner. On the other hand a overridden dependency is much more clear.\nTo have absolute knowledge of which dependency is responsible of the overridden we need to go back to the restore process and really leave traces in the lock file, which to me is a bigger change in runtime and I think we need to carefully think about the trade off.\n. After examine the prototype we decide to use different approach for this problem.\n. Please check the details in #2744. And I'm writing new issues for the new solution.\n. /cc @davidfowl @JunTaoLuo rename request ...\n. :shipit: after Travis passes and format fixes.\n. Any more? Sign off? @victorhurdugaci @JunTaoLuo \n. :shipit: \n. :shipit: when Travis passes. Thanks for fixing this!\n. :shipit: \n. @davidfowl @DamianEdwards @muratg \nThis is derived from #2744, I regard it as a 1.0.0-rc1 feature. \n. /cc @davidfowl @DamianEdwards \n. Feature now includes --mismatch option only.\n/cc @davidfowl @DamianEdwards \n. /cc @davidfowl let's get over this.\n. Adding more ppl: @muratg @victorhurdugaci @moozzyk @pakrym \n. Ping. Anything stop you from signning off?\n. Ping\n. We shouldn't check in binary files. For testing nupkg we can generate it on the fly.\n. :shipit: \n. :shipit: \n. Why Travis failed?\n. Fixed in a383e20948a210eac1714f91704bd6609b6e78c9\n. There: https://github.com/aspnet/dnx/issues/3012\nI'll check in the change once my local build verify passed and then begin working on #3012 \n. I'll merge shortly.\n. Fixed in dae3f30f65f0e5cced4e25f1f06be6b4d3a57ca3\n. Seems to be failing on Travis. Investigating.\n. It's a failure only repos on Mono. Investigating...\n. Updated. Compiler doesn't generate pdb on Mono. Updated tests accordingly.\n. @btrepp this commit should have addressed this issue\u0010: https://github.com/aspnet/dnx/commit/0dda8bf86863364cc20421f1af7494f1b2a3256f. dnu restore won't walk in the subdirectory if there is a project.json already present at current folder. Would you please try your scenario on the latest build\u0010?\n. @btrepp you're missing System.Runtimes\nReference:\nhttps://github.com/aspnet/dnx/blob/dev/samples/HelloWorld/project.json#L30\n. :shipit: \n. /cc @davidfowl @JunTaoLuo @Tratcher @muratg \n. I'll scan other places. Not tested yet, I'll come back work on this after dinner.\n. Looks like the implementation is wrong, tests failed. \n. The fix is functionally verified with DTH functional test. @Tratcher I think this is good enough for a urgent fix. We can keep refining this piece of code afterwards.\n. Task<Socket> AcceptAsync() is on CoreCLR only. Use it will need different code path for CLR and CoreCLR. \n. Ran functional test and run with VS on a sample project\n. I'll merge this today.\n. I scanned through the places we created DiagnosticMessage and didn't find any obvious change. The format is still there.\nThe one place that could change the outcome without our change is here: DiagnosticExtensions. But I don't think Bill's scenario go through this.\n. The error position is indeed in the formatted message.\n. Ah, I see what you mean. The value are not set correctly.\n. /cc @muratg \n. I can't repo this on the RC1 test build. Talked with @BillHiebert , he's now narrowing down his repo scenario.\n. @BillHiebert @muratg \nDo we still need to fix this in RC2?\n. yo! merge now to unblock coreclr build.\n. Can we add underlines to make the function more readable?\n. Test like this will be fragile since the output content may subject to change frequently. Can we pull these content from a resource, or somehow share it with product code?\n. Interestedly there is no .mdb file generated in my Linux environment.\n. Thanks! Will fix. I didn't intend to hide my name in it.\n. Ok, I update it.\nHowever, I'd like to understand your concern her. There is already a folder in the artifacts containing all the files. The files copied to temp folder are just a sub set of it. Is it concerned you that the temp folder may not be available? Or overall we trying to avoid system specific API? \n. AltDirectorySeparatorChar and DirectorySeparatorChar are platform-specific. Therefore the path will be convert to the platform-compatible format. Only the first argument will be converted since it is the path to the script or command. Parameters or switchs won't be in it.\n. Aye aye\n. Yes, it is required if script name ends with .sh.\n. Actually both bash and /bin/bash works. The issue in the original post is because sh is used instead of bash. Not all the *nix has /bin/sh link to /bin/bash. \n. Needed on Windows-Platform. Path in script block is forward-slash.\n. Should we also expose the build configuration? Make it like:\n%project:BuildOutputDir%\\\\%project:BuildConfiguration%\\\\aspnet50\\\\*.*\n. Error... Fixing :wrench: \n. Yes, for testing. Similar to the script block in other project.json. Will wipe out before final push.\n. But, but, but my OCD drives me crazy ...\n... will wipe out these changes.\n. all right.\n. GetScriptVariable should not be shared among all build script blocks. Variables of configurations and target frameworks shouldn't been exposed to postbuildor prebuild.\n. Maybe we should encapsulate these private fields as well as the GetScriptVariable into a separate class for separation of the concerns.\n. It's a writer support both output to file and output to console in order to simplify the client codes here. I guess it's a overkill given that it is used in only one place. Will clean up.\n. I'll reuse AssemblyInformation\n. Help me find a better mean? Essentially it means this provider is faster so should be try first.\n. Ok, let's go with IsLocal.\n. Since FindLibraryBySnapshot is removed, the FindLibrary can be merged into FindLibraryByVersion since it is only referenced in FindLibraryByVersion.\n. The overall structure and tpa.cpp is not that complex to need a template.\n. No. The loop here allows multiple scripts to be executed. The conditional structure makes it quit only for the first non-zero exit code.\n. The benefit of extract the value to a const is to make it easier to change expected successful exit code universally. However using 0 as a successful exit code is conventional in most situation, I don't see this coming. On the other hand leave the 0 in the expression make the codes more readable.\n. Will update.\n. Maybe better to keep the output on the same line so as not to break the formatted output.\n. I think a safer approach is to always create a List<string> instance for runtimeProbPaths and here just check if the list is empty. This avoid the null-reference.\n. I'll update the the messages. How about \"The exit status of the prepare script is not zero.\"? \nIn terms of resource strings, I sample a dozen of error messages in PackageManager none of them is using resources. And we do need to start using string resource. However, can we get over this change first and scrub the PackageManager with string resources in another PR? \n. Yup.\n. No. It means user doesn't ask to run any command at this stage.\n. A few more words here. When the TryGetValue returns false it doesn't mean the script file is missing from the disk. It means user doesn't define a script block for the scriptName you ask for. For example\n{\n    \"script\" : {\n        \"prebuild\": \"../../prebuild\",\n        \"postbuild\": \"../../postbuild\"\n    }\n}\nFor above project.json, if you ask for prerestore instead of prebuild or postbuild, it returns false.\nSo this conditional block is not used to check file's existence, but script block's existence. \n. Log issue https://github.com/aspnet/KRuntime/issues/1019\n. I leave this intentionally just in case it is useful in the future since the Execute doesn't return the exit status.\n. I've considered to use out. However the downside is that it makes the client code complicated. This function is invoked multiple times in one body, it will force the consuming code to declare a string no matter what.\n. Both works. But I'll pass on this one.\n. No problem. You can leave it.\n. humm may need a better name. I'm a bit hesitated on \"runtime\". First of all it is not used in the case of CLR framework. Second, it is actually used to point the CoreCLR packages folder rather than the runtime folder. And also put \"runtime\" is a little bit ambiguous, in kvm it accepts a runtime version name.\n. @ChengTian Yes, you can check this file separately. The dpa running in the second round of the build and find these new dependencies for klr.core45.managed. It may be introduced by you but by CoreCLR.\n. This is not a switch, it accept a path to the CoreCLR assemblies folder. The usage is different from the -r and --runtime. \n. Walk through CLR and CoreCLR are different. In CoreCLR you need to take in the consideration of replacing the path to framework assemblies with the path to a latest CoreCLR package assembly.\n. Resolving local reference is based on the assembly information. If a given assembly is in GAC, there is no need to further walk down the tree. The resolver is the best way I can find to determine if the assembly is in GAC.\n. Will revert this line.\n. For question regarding why not print the return code here:\nThe message of result status will be handle by outer codes.\nFor question regarding the message:\nNot sure if we want to expose the function name in the error message here. The name may change.\n. @davidfowl @Eilon @muratg  We need some guideline in terms of how much information we disclose in the error message. \n. When the hr indicates failure here, it means the runtime initialization failed. Application is not executed at all.\n. The return value here is not an actually HRESULT, but a int returns from the application. It can't be judge by SUCCEEDED(hr). No message should be print no matter what the result is. Output should be controlled by the application itself.\n. After consult the code in klr.core45, I choose to print the message here instead of outer klr caller. For two reasons:\n1. klr.core45.cpp already prints all kind of errors messages.\n2. There is advantage to print the error message here. Since it is close to the crash site the error can contain meaningful information. Returning HRESULT to caller doesn't necessary explain everything.\n. The hr is printed in the hexadecimal format.\n. I think we should remove the Assembly.Load here.\nI can't find a case the special treatment of the Retargetable is needed. Both Autofac 3.3.0 and 3.5.2 seems to work fine. And their assemblies are not retargetable according to ILSpy and their assembly full name.\nAnd the logic here will cause stack overflow. Invoke Assembly.Load in AssemblyResolve event is not recommended according to MSDN. And in reality if a library is built to be retargetable the stack overflow will happen because there is no chance the code reaches loaderCallback in next lines.\nShould we have issue with retargetable assemblies, we need to find another way to solve.\n. @davidfowl \n. Allow me to clarify all the return values here. There are two values representing the exit codes here:\n1. Return value from the method, in the form of HRESULT. It is always the exit code of the runtime initialization.\n2. data->exitcode, in the form of int. When runtime is initialized successfully it is the return value of application main (which is defined by user code); on the other hand when runtime initialization failed it is assigned the returned HRESULT. (I do think this part is a little bit odd, maybe we should leave the data->exitcode unassigned in this situation.)\nSo any caller should do:\n1. Verify the return HRESULT first to ensure runtime is successfully initialized.\n2. If so read the data->exitcode to determine the program exit status.\nUnless Helios operate differently or I miss anything, the caller should have the chance to decipher the runtime status.\nDid I missing anything?\n. Will do.\n. T -> TNode, represents the type of the graph's node\nK -> TState, represents the type of the result of the traversal, it is a state pass down in the recursive invocation.\nAdvice?\n. Got it, will update the name as well several other places.\n. I will break down this line a little bit, because @davidfowl is not impressed.\n. Thought about that but the name appears a little bit long. So here's my thought, I'd like to have a set of common used algorithms and data structures place together. There name can follow the convention that DF stands for Depth First and BF stands for Breath First. It helps to shorten the name without hurt the readability to much.\nAdvice?\n. All right.\n. Conflict with namespace Microsoft.Framework.Project\n. Will do.\n. Will do.\n. Will do.\n. OK.\n. OK\n. TValue instead\n. Err, we really want to print three !?\n. will do.\n. Different errors have different return value.\n. That's what you suggested. We left out the projects since they aren't resolved to any local assemblies.\n. Should be skipped. Will update.\n. Newly installed VS is dumb. I'll fix it.\n. And also, parsing project library needs different logic otherwise will easily run into infinite loop.\n. https://github.com/aspnet/KRuntime/issues/1079\n. Need more investigation. But I know as fact, if the projects dependencies are parsed in the same logic will cause infinite loop.\n. Will change to support project directory only so as to align with kpm pack and build.\n. will do.\n. ok\n. ok\n. will use a regular static method\n. willl move.\n. will update.\n. No. There is no NotNull in kpm project.\n. Yup, missed.\n. For now the GAC resolving is not actually needed since we ignore all the unresolved assemblies here. I'll remove the code.\n. got it.\n. aye aye\n. File copy failure.\n. These are different. Originally it copies all files and then go delete System.*.dll if it doesn't exist in dependency list. Now it copy all files except System.*.dll which are copied in previous logic.\n. Good point ...\n. Do we have any existing code layout the base for a JSON descriptive test files generator already?\n. It is slow, O(n^2) maybe. Mind is O(n).\nBut I guess performance is not important here ...\n. Nop, should be removed.\n. Ok.\n. Yup.\n. Just to make the file more compact while working. I'll change it back.\n. Yup.\n. Will revert this.\n. ok\n. @ChengTian 's solution is enough.\n. It's not the dependencies, it's indeed dependent which introduce the underline packages.\n. Removing all these commented codes? They can be copied from the existing code base anyway.\n. ok\n. It could be helpful to be made public. Thoughts?\n. Intend to reduce the means of creating Project\n. Same set of tests in ProjectFilesCollectionFacts will be run again here but through a Project instance. Intend to test the integration of Project and ProjectFilesCollection.\n. I'll remove this interface.\n. And make it a static helper.\n. Should we have set a time limitation, when beyond the limit the program should keep running without debugger?\n. And should be trigger a DebugBreak after the debugger is present so that the user get the chance to control the process?\n. Fair. We can revisit the discussion after a few weeks' experience.\n. Ok.\n. Y.\n. Because the template list dir as node_modules instead of node_modules/. \n. You know what. Let me double check. The former pattern should work for excluding.\n. No. We can't revert this yet. Two reasons:\n1. Template\n2. The BundleCommand use BundleExecludePattern in a way like including. Doesn't look right.\nhttps://github.com/aspnet/XRE/blob/94add15fefff3484f2204bc977bd7373af5dd022/src/Microsoft.Framework.PackageManager/Bundle/BundleProject.cs#L244\n. Here the frameworks must be an empty list.\n. I ... just ... can't ... help ... doing ... that ...\n. I was thinking using one addition space to align the output.\n. Should the trace information to be [{0}]: Line .... ?\n. Can we add lines before and after if-else?\n. Just an idea. Will the entry mappings be big? If so, would it be faster if just reverse the sequence and return the first hit? \n. Understand\n. Indent line 57-68 can make it more readable.\n. will update.\n. will update to frameworkSelectionError\n. no. git and http are two transfer protocols for git. https is not considered as fall back. the url recorded here is the url used to clone the repo.\n. http://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols\n. Can we save the shouldExit by inline the ParseArgs in if?\n. Do they need to be public?\n. Fixed version?\n. Put the constructors at the beginning.\n. Simple getter like this could be put on one line to save some screen real estate. Reader would love to have more information in one screen.\n. How about append the space right after the \")\" in previous line?\n. Since the flag is used in a HashSet, should it implement IEquatable<T> interface? User can create flags arbitrarily.\n. Public field? \n. Usually it doesn't matter. However I can't help but point out that this is way to obvious ... two styles side by side. \n. How about throw an ArgumentException\n. Add an empty lien.\n. nameof(type) as well?\n. Why not keep them in one line?\n. so far we use the string in make file directly. no a good practice but I don't intent to tackle this issue in this PR so as to keep the fix coherent. #1244 is just filed to track this issue.\n. The function needs to indicate caller whether frameworks are correctly selected. Returns empty collection could mislead the caller. \n. Nice idea but I won't adopt here. The price for figure out all the issues is low: remove the string from the command line. But to collect the errors and print them in a readable format is harder doesn't seem to bring that much of value.\n. I'm not sure about changing the PackageInfo interface. The IsPublish value maybe useful, but we don't know yet. We can get back to save the value once we have a case.\n. The GetActiveRuntime() could be called multiple times. Can its result be cached?\n. At least among the loops?\n. Interesting to see this logic. Look like very general, can we pull it in a helper class?\n. Well, then in this case consumer needs to create a list to store error messages and also need to find a proper way to display the list of messages, which defeats the purpose of simplify consumer codes. \nBoth pattern works, they're generally the equivalent. Just one is already adopted and I don't see a strong case to change to another pattern. \n. nit: Can we cache the version?\n. public static field? make it either readonly or property?\n. put private members at the end.\n. Errr, public static field?\n. remove this line.\n. The inner exception doesn't have the information regarding which property is wrong. Catch and re-throw with the property name in the message.\n. Ok.\n. Yes, OS agnostics. We stick to / in file globbing all over the places.\n. For testing. Can make to internal, but doesn't hurt it they're public.\n. Got cha\n. in case there are duplicate patterns. it can save some duplicate processing in matching, though the results won't be different.\n. There is an another one on line 36 \nvar excludePatterns = PatternsCollectionHelper.GetPatternsCollection(rawProject, projectDirectory, projectFilePath, \"exclude\")\n                                              .Concat(excludeBuiltIns);\n. Will fix. Thanks.\n. nit: we have at least two places have codes to unify the separator. should be have common code?\n. Shouldn't. It's a left-over in the intermediate change. Will revert.\n. I'll add the override of equals back.\n. These will be removed.\n. The DiagnosticsMessage now also carries diagnostics information other than compilation diagnostics. The original interface doesn't distinguish two initialization approaches well enough.\n. Just to be sure the new copy of this file is still automatically generated, right?\n. :+1: \n. :+1: the tracing the error messages. Make sure it is tested.\n. Add comments explaining how the size of the buffer is chosen.\n. Hum. It's not a bad idea to set a handler. However, the implementation of the function be passed in seems not to be inline with what expected. On [MSDN(https://msdn.microsoft.com/en-us/library/a9yf33zb.aspx)] it says \n\nIt should not return control to the main function unless you are confident that the error is recoverable.\n\nMy another concern is that replace the handler will change all the behavior down the roads, will this impact any existing error handling logic we have today? (Per discussion with @BrennanConroy the default handler will fast-fail and leave no trace. In that sense this could be better.)\n. Maybe we should. But for now none of the MessageType value are given in const, but asall hard coded. \n. Yeah, I thought it's unnecessary but it's needed actually. If Equals is overridden, the GetHashCode must be overriden. [CA2218(https://msdn.microsoft.com/en-us/library/ms182358.aspx)]\n. Should have used free. I'll go update the build scripts to generate correct result.\n. @ellismg I don't think anything blocking us from doing this. One of the original reasons was trying to reuse the data between crossgened file names and original names. But end with hard coded all the codes because it helps to allow simplier build scripts.\n. I found it's convenient for testing arbitrary protocol version.\n. Add one empty line before the file warning message to separate them from compilation warnings/errors.\n. Can I know why? For Json serialization?\n. Ok. Will update.\n. Will be internal\n. These two variables will be removed. \n. Thanks for reminding.\n. Updating ...\n. Miss this one.\n. Yes.\n. ok.\n. Shouldn't all output channel through IReporter?\n. no need.\n. will update.\n. It makes senses because the logic is to construct a CompileResponse message out of information gathered during a compilation. Name-wise there is not direct correlation between left and right. What need to be ensure is the content on the right represent the same thing.\n. Fixing ...\n. Can you print the stdOut and stdErr if exit code is not zero?\n. nit: remove this empty line.\n. This comment doesn't stop you from merge this change.\n. Will check.\n. I don't want to change the existing behavior to complicate the case. The source files collection return from Matcher is always a absolute file paths collection. \n. Yeah, it's a typo. Same \"signle.cs\" is defined in previous set up. \n. But won't be fixed here for the sake of limiting the scope of changes.\n. No, AltDirectorySeparatorChar is not necessary \\\\ on *nix. \nThe value of this field is a backslash ('\\') on UNIX, and a slash ('/') on Windows and Macintosh operating systems.\n. /cc @victorhurdugaci \nIt breaks on mono because it tries to map account name. The infrastructure doesn't exist.\n. Wait. We begin sorting these as well?\n. Will update.\n. Rather than parsing the json object as raw JObject how about build a data model class to deserialize the json all together?\n. Why do we single out *. I assume all illegal characters will cause exception in following Path.GetFullPath\n. This is more like a Helper. The name Reader make it sounds like an IO Stream Reader.\n. Though our love for the var is clear, I think using the string[] us more appropriate here since the right hand express doesn't clearly indicate the return value type.\n. same as above.\n. Is there any chance of index out of range?\n. Ordinal or CaseInsensitive?\n. Long Linq, love it. It's ok if this logic is not on a hot path.\n. testFilesCollection.ResourceFiles.Keys\nhttps://msdn.microsoft.com/en-us/library/system.collections.idictionary.keys(v=vs.110).aspx\n. Fair.\n. Ok.\n. Fair.\n. Will clean up.\n. Not here. If you track down the source of the LibraryDescriptions' source, their Identities are already checked before the tree is created. If the identity is null, the failure will happen in the very beginning of dnu list.\n. Yup. But lets finish the analyzing first. The original source of all the LibraryDescriptions is ApplicaitonHostContext.DependencyWalker https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.PackageManager/List/DependencyListOperation.cs#L31. Any chance it returns any LibraryDescription with null Identity?\n. There must be two dependencies one for each framework. That's the reason why counting is important.\n. yes.\n. The _workingDir should be deleted here.\n. will revert this file. yes.\n. Good idea. But the interface is used by quite a few other tests. I'm not going to change it's signature now. I'll move for another separate PR to do this.\n. I see nothing wrong with each here. \n. Yes.\n. In other tests the output are verified. The difficult part of checking the output is to ensure the test is flexible enough that it doesn't need update for minor output format changes.\n. Dnu list's output is too big to build a stable expected string. The minimal looks like this:\n```\nListing dependencies for dnx-issue1644 (C:\\myk\\issue_repos\\dnx-issue1644\\project.json)\n[Target framework DNX,Version=v4.5.1 (dnx451)]\nframework/Microsoft.CSharp 4.0.0.0\n    -> dnx-issue1644 1.0.0\n  framework/mscorlib 4.0.0.0\n    -> dnx-issue1644 1.0.0\n  framework/System 4.0.0.0\n    -> dnx-issue1644 1.0.0\n  framework/System.Core 4.0.0.0\n    -> dnx-issue1644 1.0.0\n```\nThe dependencies may change without any change to dnu list. To my experience it's not a good idea to build a test too rigid that it fails without any changes to the code it tests.\nPlus there are tests do check the output. Checkout other test cases in the same class.\n. :+1:  will do\n. using newline.\n. Would be nice to keep these four lines in one line so as to compact the source files.\n. I'll check.\n. Environment.NewLine[0] in both situation is \\n. In the following assertions string.Contains is used to examine the content. It is safe.\n. Good idea. Next time.\n. will do.\n. score\n. yup.\n. I will skip this one. The order is for presentation only.\n. Do you need to check if index is out of range?\n. Ah, my bad just saw the i < argc - 1. good.\n. Will remove.\n. I really find this is clearer than var. With that being said, I'll change it to var. :cry: \n. I change this to get only. Because setting a compilation here shouldn't have any effect.\n. I'll remove this.\n. Ok, so for these already changed, do you suggest to change them back?\n. Remove dnxcore50 since Moq is not supported there. For unit test, the framework doesn't matter.\n. I'll replace the tab.\n. Format: space after if\n. If ProjectResolver.ResolveRootDirectory is not used anywhere else, it can be deleted. (I don't know if it is used anywhere else.)\n. This looks like common helper method. So should this actually be placed in ProjectResolver?\n. got it.\n. I copied the same code over there. It's not in the scope of this PR to bring sense to them :) Let's rename next time\n. Nop. will clear.\n. Fair, will update.\n. Got it.\n. will update.\n. Fixing LockFileWriter is not in the scope of this PR. This is merely copied from LockFileFormat to separate read and write.\n. No, the column is increased when a char is read (line 33). It doesn't matter if it s a space or not.\n. I didn't find this to be significant enough to change. Is there a scenario in which it is a bad idea to guarantee the return literal is correct?\n. No. It's not.\nhttp://tools.ietf.org/html/rfc7159#section-6\n```\n      number = [ minus ] int [ frac ] [ exp ]\n  decimal-point = %x2E       ; .\n\n  digit1-9 = %x31-39         ; 1-9\n\n  e = %x65 / %x45            ; e E\n\n  exp = e [ minus / plus ] 1*DIGIT\n\n  frac = decimal-point 1*DIGIT\n\n  int = zero / ( digit1-9 *DIGIT )\n\n  minus = %x2D               ; -\n\n  plus = %x2B                ; +\n\n  zero = %x30                ; 0\n\n``\n. Open to rename the method. Need more ideas here.\n. Yes.1` is a valid json.\nhttp://tools.ietf.org/html/rfc7159#section-2\n```\nJSON-text = ws value ws\nvalue = false / null / true / object / array / number / string\n``\n. I find this easier to consume and save allocating additional string to store the boolean value.\n. No more.\n. Why does it have to be _public_? If for test, how about useInternalsVisibleTo` attribute?\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime/Properties/AssemblyInfo.cs#L7\n. Update the license\n. Why not put them on one line to save more lines of code to show up in on your screen?\n. Put the private method at the end?\n. Yup. I was thinking it should be a static during refactorying.\nWill do.\n. Will use StringBuilder\n. Will update.\n. Will add to resource.\n. Fixed. Just forget to remove the comment.\n. Will do.\n. Will do.\n. Got it.\n. Will do.\n. Got it.\n. yes.\n. Will do.\n. Will do.\n. They serves different purpose. \nJsonToken is the value returned by JsonBuffer it's the data interface between JsonBuffer and JsonDeserializer. It's a value type.\nJsonValue is the base class of return values of JsonDeserializer, it is carries position information to form a FileFormatException. As base class it doesn't carry the value not it knows the type of the value.\n. not sure if its necessary since it is not used in any hashset or dicitionary, but yeah, why not.\n. The unit test shouldn't reference to functional test util. I prefer a hardcopy of lock file in the git so that we leave trails whenever the baseline is updated. \nThe functional test will surely cover the deserializing a real lock file once the runtime is updated.\n. It won't. The name is not project.lock.json. It's a simple text file serve as a test resource.\n. Then can you mock one?\n. Added.\n. You're right.\n. Fixed.\n. It's complicate here. 0, 0.1 are legal but 01 is illegal. The responsibility of parsing number is delegated to JsonNumber. Should we want to throw on the case of leading zero, we can throw there.\nBut I do wondering if it worth to detect this error.\n. The Read will throw. The buffer won't return EOL after first read because the we control the sample. This is a smoke test on a lock file.\n. Value type. Avoid frequent allocation.\n. Invalid end is the file finishes to early. This is file finishes to late, there are unprocessed content for example: \n{}\n{}\n. It is captured and turned into FileFormatException\n. This is informational enough. JSON syntax is easy enough to figure out. And the exception message explain exactly what's the issue it runs into.\n. I agree with @Eilon . It is simpler to keep the JsonDeserializer a static class. Plus TestReader is a disposable class. I won't want to keep a handle of it.\n. I don't get your point.\nAll the comparison are int to int.\n. @victorhurdugaci did you notice i'm avoiding allocating at all cost?\n. I'm with @victorhurdugaci. JSON's number type is basically double. Should this method be a concern I would rather remove it and expose the raw string.\n. I just find it make client code feels more ... hipster ...\n. All right, removing it.\n. This is not a deserializer for general purpose. Whoever consume it can definitely access the internal exception.\n. Should things really go wrong in the way that EOL is return in all cases all the tests will blow.\n. Remove the commented code.\n. Add space after //. Same for the four occurrences below. \n. sure, I'll revert it.\n. Yes. I remove the support. Single quote is not supported according to JSON spec. \n. All right. I'll do that.\n. It is used to throw format exception. Let me see what I can do there.\n. Need to remove.\n. got it.\n. yup.\n. will update.\n. Yeah, this is nicer.\n. a little bit ...\n. We have neither of these.\n. ah.\n. Nice to have here, so as to know what OS been identified.\n. CommandLineApplication use this Func to resolve the version string.\n. Then it's beyond the scope of this change. \n. I'll make it readonly.\n. VS send protocol version 2 today. This is the lowest we get.\n. Allows the environment variable overridden is useful when developing new protocol.\n. I think you mean 24\n. Way too many shortcut. Someday C# will be unreadable.\n. Maybe we should rename it.\n. Yeah, VS Code sucks at formatting whitespace.\n. Thanks for the advice again @moozzyk :) These days I rarely start VS.\n. highestVersion? or just version? This is the highest version this runtime supports.\n. this is so unreadable. can you rename this next?\n. Suggestion: String interpolation\n.  The change of the method name seems not to be related to this PR.\n. Put these in one line to save space.\n. This line is too long. Break it.\n. Break the line.\n. Break the line.\n. Yes. The highest allowed version is decided when the ProtocolManager is created. The consumer holds the reference to ProtocolManager to reference the version.\n. Yup. You're right.\n. Good suggestion. Let me look into it.\n. I'm sure we can. But I keep the change to barely minimal. This is part of the original code of reading manifest. I lean to not to update it since we're going to refactory NuGet anyway.\n. But yeah valid suggestion.\n. Great suggestion. This is the legacy code. I will look into this.\n. Yup.\n. Will update.\n. Will fix.\n. Yup, will update.\n. This is wrong. Attribute don't need namespace here. Will fix.\n. It could be null during unit test. I'll log some information\n. Even if we support -pa, it is not a good practice. It may confuse with -p -a. Choose another single-character name. \n. Why do you add these shortcut? You can call the on the IReport directly.\n. Has to be public?\n. Why the additional white space?\n. License.\n. Add a new line to separate the properties.\n. Remove the commented code.\n. Why not just hold on to the instance of the config?\n. Do we need the ToList()?\n. I would suggest not to format it into a table. The URL source could be long. If user execute the command on a default 80 characters width console may cause it wrap the output.\nOr maybe just print it in a list.\n. Errrr, I don't feel good about this.\n. Any action?\n. There are similar code in ScriptExecutor for unifying the directory separator. Consolidate the code?\n. It worth consider what if git changes their output format how do we patch our tools? And can customer customize the logic to get around it.\n. Could these keys be missing? Maybe use TryGet to fail gracefully?\n. Prepare for timeout\n. Why does it need to be in this form? Can the logic be completed in a simple function?\n. Action?\n. Alright, we don't prepare for the doomsday scenario then.\n. how about make verbose a default parameter\n. I don't think it's a big deal here. I'm totally fine if we keep the method as is.\n. Ping?\n. Ping?\n. add --recursive for submodules.\n. Need a meaningful error message when deleting fails.\n. Extract the string of namespace to a constant value?\n. Format.\n. Add a line before the foreach\n. Still doesn't capture the IOException if the deleting fails.\n. No, it's not a random change. The original string is consumed by external code so I expose it as a property.\n. Will add.\n. These codes are still used to decide the manifest schema. However it can be simplified. I filed following issue to track: https://github.com/aspnet/dnx/issues/2199\n. I'll try to eliminate the usage of ToString in scenarios other than debugging.\n. Yes, it is.\n. I believe we can. No particular reason not to.\n. Ah, shouldn't have it here. It's for local testing. Gonna remove it.\n. No, don't check in the sdk-version.\n. Is this not an extension function any more? Why change the form of invocation?\n. Put constructor ahead of properties.\n. Constructor in front of properties\n. Add a white line between.\n. The line is two long for review. Wrap it please.\n. Put constructor ahead of properties\n. License?\n. Do we need the dependencies here?\n. License.\n. Remove this line.\n. Remove this \n. It's actually not possible. Either both normalized or not. https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.PackageManager/Utils/NuGetPackageUtils.cs#L30\nBut the simplified model used by test is sufficient because the version of a package on disk is parsed from it's folder name: https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime/NuGet/Repositories/PackageRepository.cs#L102. \n. License\n. var instead of int? \n. make it readonly?\n. Remove empty lines.\n. Can we cache this collection instead of allocate it repeatedly?\n. I'd like to share my concerns here. It allocate a string but thrown away. It is understandable that the overload helps to reuse code, but from the perspective of performance it's not ideal.\n. :+1: \n. I usually follow StyleCop's suggestion. In terms of the order of the elements in a class: http://www.stylecop.com/docs/SA1201.html\n. It seems that in CommandUtil the options names are compared in case sensitive way. \nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.CommandLineUtils.Sources/CommandLine/CommandLineApplication.cs#L125\n. I don't want to update it in this PR so as to limit the scope of the change.\n. Do you mind if I merge this first then follow up the change to use string interpolation?\n. Will update.\n. There're a few places. Plus the parameters list is already long and in most cases it is not a literal path.\n. No. The type of valueInString is not string. It's and JsonString. Here implicit type conversion is involved.\n. It's not needed.\nThe exception comes with line and column information. When error is shown in the VS the error list will direct you to the exactly line of code. In addition, the line and column are also shown when application is running from command line.\nGiven that, I think the property name is important but not significant enough to change the signature.\n. I found the option CommandOptionType.NoValue misleading. Will change it to SingleValue make this option mandatory?\n. So we go strictly case sensitive in terms of option names?\n. But we case insensitive here ...\n. Could there be a race condition?\n. Never mind, saw the GetOrAdd extension.\n. deal. checkout the latest commit.\n. This is perfect ... copying ...\n. Saw this after the merge. Will update the message.\n. No, some of the tests using this method can't see the internal types.\n. Or we can make Microsoft.Framework.Runtime.Internal internally visible to Microsoft.Framework.Runtime.Roslyn.Tests and Microsoft.Framework.PackageManager.Tests additionally.\n. Try to keep it inline with other references.\n. I personally prefer IEnumerable\n. Yup. I'll keep it as is in this PR.\n. Not aware of performance impact, but I'll research. The reason why this method returns an ImmutableArray is because Roslyn requires this type to operate. Either it returns an ImmutableArray here or the consumer need to wrap the collection into ImmutableArray.\n. Sure thing.\n. will rename together.\n. I see. will update.\n. File this issue: https://github.com/aspnet/dnx/issues/2386\nI think we should keep the interface as-is for now.\n. will do.\n. Fowler suggestion: Ignore it.\n. Use https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Runtime/Project.cs#L491\n. No it doesn't. Should we put framework assemblies in project target library as well?\n. Shouldn't graph node be created for both project and package libraries?\n. I'll remove this check. This technically won't happen.\n. Left over. WIll remove.\n. Because project name is not determined by folder name alone. Project needs to be load in to parse the name. It can't be indexed when project.json files are collected. \n. Because ApplicationHostContext need to fall back to it in DTH. VS could open a project which is not restored. Under that situation lock file doesn't exist, project resolving will relies on path search.\n. This doesn't seem to be a common behaviour. Usually if the environment variable value doesn't fit the needs we just don't set the switch. Throw exception seems extreme.\n. will change\n. will do.\n. The tradition ProjectResolver not only look at one project but also it's sibling folder therefore HelloShare is resolved. The problem with adding a global.json here is that it's adding unnecessary paths to the DNX source code path (https://github.com/aspnet/dnx/blob/victorhu/require-servicing/test/Microsoft.Dnx.CommonTestUtils/TestUtils.cs#L246). As a result when restore the sample application dependences like Microsoft.Dnx.Compilation.Abstraction will be resolved as project instead of package.\n. Path to the global.json was not added to the _searchPaths. New? https://github.com/aspnet/dnx/blob/victorhu/require-servicing/src/Microsoft.Dnx.Runtime/ProjectResolver.cs#L71\n. It is needed in runtime as fallback, per discussion with @davidfowl \n. So that not to block and get the change to exit when timeout.\n. will update.\n. will update.\n. Yeah, I should fix this.\n. Will update.\n. We use both through out the solutions. we have any preference?\n. I don't think so: https://msdn.microsoft.com/en-us/library/system.collections.specialized.stringdictionary.item(v=vs.110).aspx\n. It's a good suggestion, but I'd like to avoid the over complicated test code here. Should this port conflict happen it is easy to detected and corrected.\n. I'll put a lock on this.\n. Remove or replace with dnxcore50?\n. should delete\n. should delete\n. Don't treat this as failure.\n. Rename to Initialize\n. should be disposable\n. This should be disposable\n. I'm with @ChengTian. It doesn't worth to fight the tool for project file's format.\n. Can we put the comments above the error code so as to shorten the line?\n. Should we throw if the errorCode is null?\n. All right.\n. Ah, will remove. Works fine so far.\n. Help me find a better and concise name here. The diagnostics messages are categorized by framework into an array here.\ndiagnosticsInFrameworks?\n. As far as I know we ran DTH with CLR in VS and VS Code today. So I limit the scope. The project is still compiled in multiple frameworks including CoreCLR. \nI can try adding CoreCLR into the matrix.\n. Because other frameworks build on Mono. I can drop the net46 framework in the sample.\n. Because it has to be a static property\n. I'll introduce a DrainTillFirst method and retire the GetResponse\n. Will split the test\n. WIll merge these two test class to get rid of the duplication here.\n. Just a reminder please sort and remove unused using statements. (Because these four using statements are always automatically added. So I'm just wondering.)\n. It would be more proper to throw new ArgumentException(\"Directory was not found\", nameof(rootPath))\n. Since it is set in constructor only, you can drop the private set;. New C# 6 feature.\n. There are plugs for VS can help organizing the using statement for all files.\n. The sample only has one framework.\n. To update the project.json. I don't want to do inline editing.\n. It may be necessary given that the first initialization could be a bit slow. I can remove this for now, but we may need to come back to revisit.\n. That's because all the literal should be represent by a constant. It's the fault of production code.\n. Hard to find an alternative. Our correct behaviour is actually not responding \n. Can we extract the string Microsoft.Dnx.Runtime.Abstractions in way rather than hard code the string. For example reflecting a type name?\n. If runtime version check is skipped here, the RuntimeEnvironment instance is not required. Do we have to set it?\n. Do we need to check min runtime version just for dnu list?\n. Same question as above.\n. +1 this one got me, too.\n. I'll add tests for reference later in the future. \n. format (whitespace after if)\n. It really confuses me why do we use a dictionary to save a pair of data which the value can be calculated from key directly?\n. Since we skip on Mono this could be safe. How about we create a quick shortcut on DnuSdkFunctionalTestBase just for this cause. I don't really think we should waste the effort of hiding this tuple.\n. You don't return here? Won't the following selectedFramework.FrameworkName cause NullReferenceException?\n. The option is way to long to type easily...\n. Do we have to put comments in the Json?\n. No problem :+1: \n. Should change the name to sdkAssemblies\n. What's the rule for us to decide what assemblies are required here? How do we know when to change?\n. remove commented code.\n. Case sensitive?\n. Today, one library has at most one error or warning. Nevertheless, I'll make it an Array.\n. also not to name parameter\n. Exactly. @JunTaoLuo and I actually discussed about this today. It's definitely doable. But not a high priority at this point. Once we wrapped up beta8 we can revisit this topic.\n. Yeah it's safer to do so. Now the private class Comparer : IEqualityComparer<DiagnosticMessageView> in DiagnosticsListMessage actually helps to compare.\n. ok.\n. One issue here. Can't compare Source property easily since the original data is discarded.\n. Need to do complex reflection to compare two objects.\n. Then it complicate the serialization. If the serialization is not treated specially, the Name and Version end up on the same level as other error property. \n{\n      \"ErrorCode\": \"NU1002\",\n      \"SourceFilePath\": \"C:\\\\Users\\\\trdai\\\\Documents\\\\Visual Studio 14\\\\Projects\\\\ConsoleApp1\\\\src\\\\ConsoleApp1\\\\project.json\",\n      \"Message\": \"The dependency Newtonsoft.Json 4.5.11 in project ConsoleApp1 does not support framework DNXCore,Version=v5.0.\",\n      \"Severity\": 2,\n      \"StartLine\": 10,\n      \"StartColumn\": 24,\n      \"EndLine\": 10,\n      \"EndColumn\": 24,\n      \"FormattedMessage\": \"C:\\\\Users\\\\trdai\\\\Documents\\\\Visual Studio 14\\\\Projects\\\\ConsoleApp1\\\\src\\\\ConsoleApp1\\\\project.json(10,24): error NU1002: The dependency Newtonsoft.Json 4.5.11 in project ConsoleApp1 does not support framework DNXCore,Version=v5.0.\",\n      \"Name\": \"Newtonsoft.Json\",\n      \"Version\": \"4.5.11\"\n    }\nIt's misleading and also prevent from us to change Source type in the future. \nIf we want to keep the two properties under Source then a simple JToken.FromObject doesn't cut.\n. Or we just have a type for simplified LibraryDescription\n. Or we just put LibraryIdentity there.\n. Track: https://github.com/aspnet/dnx/issues/2789\n. It compares lesser things than the DiagnosticMessageView (original DiagnosticMessage) equals method. Is there a reason to do so? Otherwise it is not needed.\n. I guess it's safe to be removed since it looks out dated.\n. @JunTaoLuo?\n. @davidfowl is this a blocking issue right now? I can work with @JunTaoLuo to find a better replacement later.\n. We have the very similar things in LibraryTypes. Reusable?\n. Don't hard code this since neither Project and Package is hard coded.\n. Well, on second thought. Never mind.\n. How effective it is. Will the performance sucks when the file is really really huge?\n. no particular reason, i can switch to the new one here.\n. will update.\n. Explaination: currentSearchPath is null when the project hasn't been initialized, which means it is processing the Initialization request now. There is no sense to validate the dependencies validation under changed search paths in this situation.\n. https://github.com/aspnet/dnx/issues/2793\n. License and registration please.\n. Seems that BuildLoadContext is the only user of this default constructor and it doesn't add the LoadContext itself to the _contexts. It feels like way too subtle...\n. Just use OfType<ProjectDescription> could be enough, right?\n. Do we expect anything throw here? Just wondering why do we begin to wrap this with try-catch. Is it just a general move to above abrupt exit?\n. Do we have unified plan for exit code?\n. Now here error code is 1\n. Get this on the same line?\n. Microsoft, actually?\n. Weo we support this case?\n\"target\": \"\"\n. Format\n. Format\n. Still could it be the projectDependency is null?\n. Move the packageInfo in to the else if scope where has its only usage.\n. var\n. How about just inline?\n. I like the current flow but rather than a NullReferenceException can we have a meaningful message in case it runs into the bad situation.\n. Not blocking.\n. Add new error code for library type change.\n. Exploring the possibility of moving it ahead of CreateDependencyDescription\n. good.\n. Render the project path in lock file invalid.\n. This is a extension of the Project not dnu.\n. First time restore it to generate a correct lock file. Then move it to another place but do not move its dependency so that the relative path in lock file is invalid.\n. Because 1. Editing the json file is move complex; 2. Once we update the lock file format the test needs to be rebaseline.\nHere actually only two files are copied and it mimic the real situation when the bug was found.\n. Another reason. Once we have the replacement of fixture ready, we will still copy the project to a 3rd place and avoid editing the one copy reused across tests.\n. Do we actually need this?\n. I'll add comments in code.\n. Not even close. while is the best.\n. Fixture still needed?\n. Interesting. Why do we have to cleanup the test dir afterwards? Can the coming up test clean it? If the assertion fails, this line won't run.\n. The tear down should happen in test class's dispose method.\n. This won't be run if error happens.\n. Do we still need this fixture?\n. I assume this will be eventually retired with the fixture. Am I right?\n. We got a timeline for retiring the old tests?\n. Here's the limitation of binding folder to the test class name, you can't leverage the setup-teardown mechanism of xUnit.\n. I get the point that it is suppose to clean the folder only if test failed. However it introduces another issue, it the Theory case it may clean the test folder anyway because the folder name is decided by test method name + sdk name, if there is another factor in the data set (like this case: https://github.com/aspnet/dnx/blob/dev/test/Microsoft.Dnx.DesignTimeHost.FunctionalTests/DthStartupTests.cs#L52) then even failed test's record will be erased. \nThe point I want to make here is:\n1. Function like retaining test trace should be built into the test infrastructure rather than required the test to explicitly invoke it.\n2. It's a unstable and weird implementation. \n. Cool.\n. Cool.\n. Cool.\n. I'm find with that.\n. I'll remove this. We need this eventually but I won't add it in this PR.\n. The name is ambigous though. It only restore once, instead of at every invocation.\n. Ok.\n. EnsureRestoredSolution\n. I'll gradually add more test type names to this class.\n. formatting!\n. formatting!\n. Any change to wrap this line?\n. By turning on the test trace, I'm trying to avoid the test timeout on Travis.\n. Got it.\n. It's the sake thing ...\n. Oh, year.\n. Yes. This could be a file. (it is stated in the comments a few lines below)\n. There is a name conflict here with Microsoft.Dnx.Project therefore the Runtime prefix is required.\n. Now including globbing, we compare file in case-insensitive way across platforms. It's not ideal but consistent.\n. Exactly. 21 = 7 * 3, we got seven response for each project initialization.\n21 => 2+1 => 3 Half Life 3!\n. Since we're fixing this test, how about move this to the new test infrastructure all together?\n/cc @JunTaoLuo \n. Switch to LibraryDependency from LibraryDescription because the RequestedVersion of LibraryDescription doesn't represent the actual version asked in project.json\n. Remove this empty line.\n. Suggestion: I think the problem here is we have separate restore logic in publish which is different from dnu restore. Should we consider consolidate them together.\nThis is not supposed to block this PR.\n. Name the new parameter targetFrameworks.\n. You may want to add some unicode code point here. For example U+00A9 is commonly used for copy right sign.\n. Personally I find a long constructor very discouraging to use. You need to remember the sequence of the parameter or heavily relies on the IDE to give you a clue. I suggest to make properties settable.\n. Can we retrieve the name through reflection instead of hard code the names?\n. will update.\n. Will update\n. Good point. But given the incoming refactory, I'd like to hold off for a bit longer.\n. Tuple helps a lot. To write a private class I need to further override Equals and GetHashCode this is much more simpler. The data is not further reused. It just represents three columns.\n. Why do we have two options?\n. I prefer this form that in case we need to add ComparisonOption the code change will be smaller.\n. nit: you don't need to ignore case when comparing a number\n. Either one of the change can fix this issue. But I added both.\n. No such API.\n. Yes. There suppose be one.\n. The extension is not available on full CLR.\n. ",
    "lodejard": "Implemented in #675 \n. @glennc this is one of the two features we just talked about, actual implementation may be different than what is described, but in general it's the ability for a source project in the input to kpm pack becomes a package project in the output\n. This should be clarified or closed. Pass the --runtime parameter with the kre full name?\n. Not a short answer, having it be in IApplicationEnvironment overlaps with some code here https://github.com/aspnet/Hosting/blob/dev/src/Microsoft.AspNet.Hosting/Program.cs#L56\nWe'll probably need to figure out how they relate to each other before saying?\nBecause at the moment there are three ways you can set the environment, an environment variable named \"ENV\", a command-line switch like k web --env Staging, or by putting env=Staging in your Microsoft.AspNet.Hosting.ini file...\nThe use of ENV for environment variable name is awful of course - but even if it's changed, how does the new property relate to the other mechanisms (command line or ini setting?)\n. A fix for this is pushed, but I can't test properly from hotel wifi. Will need to be verified.\n. Things to test - \n- passing zero --runtime options should assume net45\n- passing one --runtime options should walk and copy net45 for svr50 and k10 for svrc50\n- passing two or more delimited by semicolor --runtime aaa;bbb;ccc should walk and copy both sets of dependencies when svr50 and svrc50 are both presenet\n. Don't put quotes around individual paths, put \"around the;whole thing\"\n\nFrom: David Fowlermailto:notifications@github.com\nSent: \u00fd5/\u00fd15/\u00fd2014 10:52 PM\nTo: aspnet/KRuntimemailto:KRuntime@noreply.github.com\nCc: Louis DeJardinmailto:lodejard@microsoft.com\nSubject: Re: [KRuntime] kpm pack needs to walk the correct dependency graph when --runtime argument is specified (#166)\nThis is broken in VS, I gave it a try and got this:\nConnecting to C:\\Users\\davifowl\\Documents\\Visual Studio Next\\Projects\\StarterWeb1\\StarterWeb1\\stuff...\n\"C:\\Users\\davifowl.kre\\packages\\KRE-svr50-x86.0.1-alpha-build-0442\\bin\\kpm.cmd\" \"pack\" --runtime \"C:\\Users\\davifowl.kre\\packages\\KRE-svr50-x86.0.1-alpha-build-0442\";\"C:\\Users\\davifowl.kre\\packages\\KRE-svrc50-x86.0.1-alpha-build-0442\" --out \"C:\\Users\\davifowl\\AppData\\Local\\Temp\\ProjectKPublish\\StarterWeb1--1994950520\" --overwrite\nklr.exe Information: 0 : RootHost.Load name=Microsoft.Framework.PackageManager\nklr.exe Information: 0 : RootHost Assembly.LoadFile(C:\\Users\\davifowl.kre\\packages\\KRE-svr50-x86.0.1-alpha-build-0442\\bin\\lib\\Microsoft.Framework.PackageManager\\Microsoft.Framework.PackageManager.dll)\nverbose: out:C:\\Users\\davifowl\\AppData\\Local\\Temp\\ProjectKPublish\\StarterWeb1--1994950520 zip: project:\nklr.exe Information: 0 : RootHost.Load name=Microsoft.Framework.Runtime\nklr.exe Information: 0 : RootHost Assembly.LoadFile(C:\\Users\\davifowl.kre\\packages\\KRE-svr50-x86.0.1-alpha-build-0442\\bin\\Microsoft.Framework.Runtime.dll)\nklr.exe Information: 0 : RootHost.Load name=Newtonsoft.Json\nklr.exe Information: 0 : RootHost Assembly.LoadFile(C:\\Users\\davifowl.kre\\packages\\KRE-svr50-x86.0.1-alpha-build-0442\\bin\\Newtonsoft.Json.dll)\nklr.exe Information: 0 : Walking dependency graph for 'StarterWeb1 '.\nUnhandled Exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentNullException: Value cannot be null.\nParameter name: key\n   at System.Collections.Generic.Dictionary2.FindEntry(TKey key)\n   at System.Collections.Generic.Dictionary2.TryGetValue(TKey key, TValue& value)\n   at Microsoft.Framework.Runtime.Project.GetTargetFrameworkConfiguration(FrameworkName targetFramework)\n   at Microsoft.Framework.Runtime.ProjectReferenceDependencyProvider.GetDescription(String name, SemanticVersion version, FrameworkName targetFramework)\n   at Microsoft.Framework.Runtime.WalkContext.<>c__DisplayClass16.b__18(IDependencyProvider x)\n   at System.Linq.Enumerable.WhereSelectArrayIterator2.MoveNext()\n   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable1 source, Func2 predicate)\n   at Microsoft.Framework.Runtime.WalkContext.Resolve(Dictionary2 resolvedItems, IEnumerable1 resolvers, Library packageKey, FrameworkName frameworkName)\n   at Microsoft.Framework.Runtime.WalkContext.<>c__DisplayClass3.<Walk>b__6(Node node)\n   at Microsoft.Framework.Runtime.WalkContext.<>c__DisplayClass0.<ForEach>b__2(Node node, Int32 _)\n   at Microsoft.Framework.Runtime.WalkContext.ForEach[TState](Node root, TState state, Func3 visitor)\n   at Microsoft.Framework.Runtime.WalkContext.ForEach(Node root, Action1 visitor)\n   at Microsoft.Framework.Runtime.WalkContext.Walk(IEnumerable1 dependencyResolvers, String name, SemanticVersion version, FrameworkName frameworkName)\n   at Microsoft.Framework.Runtime.DependencyWalker.Walk(String name, SemanticVersion version, FrameworkName targetFramework)\n   at Microsoft.Framework.PackageManager.Packing.PackManager.DependencyContext.Walk(String projectName, SemanticVersion projectVersion, FrameworkName frameworkName)\n   at Microsoft.Framework.PackageManager.Packing.PackManager.Package()\n   at Microsoft.Framework.PackageManager.Program.<>c__DisplayClass2.b__14()\n   at Microsoft.Framework.PackageManager.CommandLine.CommandLineApplication.Execute(String[] args)\n   at Microsoft.Framework.PackageManager.Program.Main(String[] args)\n   --- End of inner exception stack trace ---\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\n   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\n   at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   at klr.host.Bootstrapper.Main(String[] args)\n   --- End of inner exception stack trace ---\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\n   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\n   at klr.hosting.RuntimeBootstrapper.Execute(String[] args)\n   at DomainManager.Main(Int32 argc, String[] argv)\nC:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\Web\\Microsoft.ProjectK.Publishing.targets(56,5): Error MSB3073: The command \"\"C:\\Users\\davifowl.kre\\packages\\KRE-svr50-x86.0.1-alpha-build-0442\\bin\\kpm.cmd\" \"pack\" --runtime \"C:\\Users\\davifowl.kre\\packages\\KRE-svr50-x86.0.1-alpha-build-0442\";\"C:\\Users\\davifowl.kre\\packages\\KRE-svrc50-x86.0.1-alpha-build-0442\" --out \"C:\\Users\\davifowl\\AppData\\Local\\Temp\\ProjectKPublish\\StarterWeb1--1994950520\" --overwrite\" exited with code -532462766.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/KRuntime/issues/166#issuecomment-43293829.\n. @victorhurdugaci no sorry, that is a confusing comment. --runtime always requires an argument, but if the --runtime switch appears zero times on the command line it assumes net45\n. Ah! It does not exist. kpm help install is an old code fragment that was used to test command line switch options, nothing more. \n. See an example of npm install for an app that references express, as an example\nfor\n\"dependencies\": {\n    \"express\": \">3.3.0\",\n    \"jade\": \"*\"\n  }\nsummary\n```\nexpress@4.6.1 node_modules\\express\n\u251c\u2500\u2500 merge-descriptors@0.0.2\n\u251c\u2500\u2500 utils-merge@1.0.0\n\u251c\u2500\u2500 parseurl@1.1.3\n\u251c\u2500\u2500 cookie@0.1.2\n\u251c\u2500\u2500 escape-html@1.0.1\n\u251c\u2500\u2500 cookie-signature@1.0.4\n\u251c\u2500\u2500 finalhandler@0.0.3\n\u251c\u2500\u2500 range-parser@1.0.0\n\u251c\u2500\u2500 fresh@0.2.2\n\u251c\u2500\u2500 vary@0.1.0\n\u251c\u2500\u2500 media-typer@0.2.0\n\u251c\u2500\u2500 qs@0.6.6\n\u251c\u2500\u2500 methods@1.1.0\n\u251c\u2500\u2500 serve-static@1.3.2\n\u251c\u2500\u2500 buffer-crc32@0.2.3\n\u251c\u2500\u2500 depd@0.3.0\n\u251c\u2500\u2500 path-to-regexp@0.1.3\n\u251c\u2500\u2500 debug@1.0.3 (ms@0.6.2)\n\u251c\u2500\u2500 proxy-addr@1.0.1 (ipaddr.js@0.1.2)\n\u251c\u2500\u2500 type-is@1.3.2 (mime-types@1.0.1)\n\u251c\u2500\u2500 send@0.6.0 (ms@0.6.2, mime@1.2.11, finished@1.2.2)\n\u2514\u2500\u2500 accepts@1.0.7 (negotiator@0.4.7, mime-types@1.0.1)\njade@1.4.2 node_modules\\jade\n\u251c\u2500\u2500 character-parser@1.2.0\n\u251c\u2500\u2500 commander@2.1.0\n\u251c\u2500\u2500 mkdirp@0.5.0 (minimist@0.0.8)\n\u251c\u2500\u2500 monocle@1.1.51 (readdirp@0.2.5)\n\u251c\u2500\u2500 transformers@2.1.0 (promise@2.0.0, css@1.0.8, uglify-js@2.2.5)\n\u251c\u2500\u2500 with@3.0.0 (uglify-js@2.4.15)\n\u2514\u2500\u2500 constantinople@2.0.1 (uglify-js@2.4.15)\n```\nso it shows 3 levels: 1st is listed, 2nd is indented under 1st, 3rd is parenthetical in 2nd\n. --overwrite was intended to indicate whether a package subfolder should be overwritten or skipped if that particular name/version already exists at the target location. It doesn't mean that the entire target location is cleaned before being recreated - the assumption being the tooling or user or ci server would be clearing out the target location if a clean pack was the goal.\n. Yep, exactly that \n. Even further refinement would be, when including --runtime KRE files, for kpm pack to reduce even further what is needed in those directories. But that should probably be files as a different issue.\n. Probably leftover layout, before kpm binaries moved to its own lib/xxx folder.\n. /cc @yishaigalatzer @davidfowl @Eilon \n. The formats would be something like this\nnupkg/My.Package.Name/2.5.1/lib/net45/My.Package.Name.dll alternate/1234/My.Package.Name.dll\nnupkg/{id}/{version}/{item-path} {serviced-path}\n. No, because the things on the left and right are not in the same space. Servicing is not implemented as a version update.\nnupkg/Hello/2.5.1/lib/net45/Hello.dll alternate/x283746/Hello.dll\nnupkg/Hello/2.5.2/lib/net45/Hello.dll alternate/x283746/Hello.dll\nnupkg/Hello/2.6.0/lib/net45/Hello.dll alternate/x573642/Hello.dll\n. I think we also talked about it being kpm packages add | push | pull\n. Does this conflict with Troy's recent change to use file-system sources before http sources?\n. I'd cc him, but I dunno his github alias, and I'm on mobile.\n. I think it was something like this...\nproject.json properties, and their defaults\n```\n\"compile\": [ \"*/.cs\" ],\n\"compileExclude\": [],\n\"compileFiles\": [],\n\"content\": [ \"*/\" ],\n\"contentExclude\": [],\n\"contentFiles\": [],\n\"preprocess\": [ \"compiler/preprocess/*/.cs\" ]\n\"preprocessExclude\": []\n\"preprocessFiles\": []\n\"resource\": [ \"compiler/resources/*/\" ]\n\"resourceExclude\": []\n\"resourceFiles\": []\n\"shared\": [ \"compiler/shared/*/.cs\" ],\n\"sharedExclude\": [],\n\"sharedFiles\": [],\n\"exclude\": [], / template adds \"wwwroot\" and other allways-excluded knock-outs here /\n\"excludeBuiltIn\": [ \"bin/\", \"obj/\", \"/.*/\", \"*.kproj\", etc ]\n```\nactual files lists, and how they're calculated\n```\nCompileList =\n  +Glob( +compile -compileExclude -exclude -excludeBuiltIn) \n  -SharedList\n  -PreprocessList\n  +Literal( +compileFiles )\nPreprocessList =\n  +Glob( +preprocess -preprocessExclude -exclude -excludeBuiltIn) \n  +Literal( +preprocessFiles )\nSharedList =\n  +Glob( +shared -sharedExclude -exclude -excludeBuiltIn) \n  +Literal( +sharedFiles )\nResourceList=\n  +Glob( +resource -resourceExclude -exclude -excludeBuiltIn) \n  +Literal( +resourceFiles )\nContentList =\n  +Glob( +content -contentExclude -exclude -excludeBuiltIn) \n  -CompileList\n  -PreprocessList\n  -SharedList\n  -ResourcesList\n  +Literal( +contentFiles )\n```\nUsage and example of file lists\nPreprocessList becomes syntax trees for preprocess temp assembly (like PrecompiledViews.cs)\nCompileList becomes syntax trees for main assembly (like Program.cs)\nResourceList becomes embedded resources for main assembly (like Resources.resx)\nSharedList are included in the nupkg during pack  (like internal class MyHelper.cs)\nContentList are included in the approot during bundle (like config.json)\n'wwwroot' is copied entirely to webroot during bundle (like web.config)\n@ChengTian can you take a look at this to see if it breaks any of the things we do today?\n. We should talk about what impact would be for moving ILoggerFactory from aspnet hosting into base program.main hosting.\nWriting to console is probably bad, if we expect people to bundle an xcopy-able program that can be run without a machine-wide install. You can run it, but you get an error message nagging you to install dotnet in order to configure the machine-wide servicing directory.\n. I guess not, after all\n. Yep, if the file is locked=true, and validation fails, then restore should exhibit the same behavior as if it has been run with \"kpm restore -lock\"\n. Yeah, was talking with @anurse about this the other day too. Specifying the project dir would probably move to a switch, because things coming after the \"command\" should be treated as string[] args. And the main use-case would still be to default to the current working directory, so you'd almost never be exposed to the project dir switch.\n. +1 and agreed such a change would need to be coordinated pretty carefully\n. Are there other things it would list? It seems a lot to type, tbh\n. It's not just the OS to detect, but the rules in effect on the hard drive in question. Mac default drive format is also case insensitive. Even worse I think if you're using a file share case sensitivity might be determined by the file server? (The last is a speculation.)\nInstead of adding a loosen mode or messing around with configuration or detection, to start with let's just change the matching to use case insensitive comparisons. Once that's done lets ask the folks doing cross-platform clrs what's the right API to tell if a folder path is on a case-sensitive drive, and if there is one add a second bug to get file globbing to use it. \n. @anurse /cc @davidfowl \n. @davidfowl here's the progress so far - you might want to rebase your uber branch onto lodejard/resources to reduce merge conflicts\none thing that's still pending is the support for DTH assembly loading, not sure how to approach that. to test this in VS i've been setting the env var \"DNX_COMPILATION_SERVER_PORT\" to \"n/a\" in the amazing new super-fantastic debug launch tab\nanother thing is the localized assemblies aren't added to the nupkg yet. they do get written to disk, but the pack command just needs to look for those subfolder names to add more dlls to the nupkg\n. Was afraid that would be the case. Downloading both nuspec and nupkg will double the round-trips per restore. The only time you'll have a net improvement is when the package graph has enough cousin-dependency version upgrades that the extra time spent downloading all the nuspecs is less than the time spent downloading unused (older versioned cousin) nupkg candidates. And those are likely less common.\n+1 for punting the change\n. Seems reasonable to treat missing property the same as an empty array\n. :+1: I also went to file this bug today\n. Did something change that made it safer to run in this case? Or is it that VS is getting better at running restore when needed, so problems happen less often when using the tooling?\n. :shipit:\n. should the debugger check and recheck be here instead of in the ApplicationShutdown class itself?\n. the \"kpm\" app supports kpm restore -h|--help|-? by having this at the start of each command's action if (showHelp()) { return app.Execute(\"help\", \"restore\"); }. You believe that could be automatic?\n. typo in comment\n. It uses \"HOME\" if \"USERPROFILE\" isn't defined... Not good enough?\n. D'oh!\n. wow, that's awful, but okay\n. :ok:\n. :ok:\n. Adding comment\n// Command-lines on Windows are executed via \"cmd /C\" in order\n            // to support batch files, &&, built-in commands like echo, etc.\n            // ComSpec is Windows-specific, and contains the full path to cmd.exe\n. :ok:\n. :ok:\n. :ok: :ok: :ok: :smile:\n. :ok:\n. i'll file a bug to add stylecop to the build\n. :ok:\n. :ok:\n. :ok:\n. :ok:\n. :ok:\n. meh... :ok:\n. :ok:\n. interesting - you might need to ask someone with more domain expertise... someone other than me will know better how to run msbuild with a new csproj base path\n. what's the strategy for not reading sha512? are we putting the base64 hash bytes in the lock.json written by restore?\n. Probably want to file a new issue to deal with paths-with-spaces on this line\n. Why is the PackageInfo used as an equatable object?\n. weren't we going to not create commands for web, test, and run?\n. Just skip run, web, test commands - don't need to throw\n. Why was this broken out into RestoreForInstall? Wasn't it part of a single RestoreForProject earlier?\n. Don't use KRE_HOME or KRE_GLOBAL_PATH for install. The install should always be to the user profile ~/.k/bin irrespective of any of the other settings\n. Change to (\"commands\") with subcommand (\"add\")\n. Change to \"commands\" with subcommand \"remove\"\n. Unrelated to this pull request, but noticed from the test data:\nIs portable-net451+win81 compatible with portable-net40+sl5+win8? I would have thought so, since the two TFMs are present-and-equal-or-lower.\nGiven that, if core50 is compatible with portable-net451+win81 and not compatible with portable-net40+sl5+win8 does that mean TFM compatibility is non-transitive? Is there even such a thing as a non-transitive compatibility scheme??\n. ",
    "Alxandr": "Isn't it cleaner to have it under a different key? Like \"devDependencies\" or something?\n. If you omit version, shouldn't it lookup the latest version, then add that? Like Install-Package does today.\n. Ah. Good. I was just commenting on the last comment that said \"Both name and version would be mandatory\".\n. It would seem I misunderstood what pack is actually supposed to do. Sorry for faulty issue -.-\n. No. As I was talking with @davidfowl over at JabbR, the most useful (and probably simplest) thing to do would simply be to shove the relative path as the name. So I'd get js/lib/jquery.js. That way, I know it's not js.lib/jquery.js for instance. The important thing is consistency though. If foreslash is used to separate directories, it should be so on all systems. Same goes for backslash. \n. Lolwut? Is that image some github markdown I don't know about, or was that on purpose?\nAnyways, what's wrong with just using paths? It allows for easy doing an Owin module that takes requests and maps them to embedded resources (should you ever want to do such a crazy thing (hint; I did it)). But as long as it's reasonable I'm ok with most formats. Just don't prepend it with default namespace as VS does, cause as far as I know there's no way to get that at runtime.\nAlso, for those wondering, there's no problem with having a / in the name of an embedded resources. I've tried this, it works just fine.\n. Oh. Right. The point was, imagine if I have this stupid setup:\n- js/lib/jquery.min.js\n- js.lib/jquery.min.js\n- js.lib.jquery/min.js\n- etc.\nHow on earth would you tell them apart if you just translate directory separator into a .?\n. Though, that's ofcause highly theoretical (and moronic thing to do). A benefit of having the actual paths is that it allows you to actually \"unpack\" the embedded resources from a .dll.\n. @Eilon As far as I can tell, if you take the function https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.Runtime/NuGet/Utility/PathUtility.cs#L63 and plug it in https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.Runtime.Roslyn/EmbeddedResourceProvider.cs#L16, you would get something that'd work with the EmbeddedResourceFileSystem you linked. And it requires 1 line of code change.\n. Then use forslashes and treat them as urls?\n. Yes. I still want this change. Parsing the error string is not pretty. I can look at implementing this and pull requesting it in a few days when I have time.\n. Here's a nice trick for getting less commits: http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html\nYou have to push with -f afterwords though.\n. Wouldn't it be better to name this install, to keep with Install-Package, npm install, bower install, etc?\n. Yes. CLA is filled out.\n. Huh. It ran just fine for me O_o\nTests and all.\n. Ah, wait, sorry. My bad. It seems the build-script doesn't run the tests. Fixed now.\n. @borgdylan I'm already writing the F# language support in F# though, so that works already.\n. Sure. But you said it couldn't be done.\n. Yes, and then, when I started looking at it again like 5 hrs ago, everything has blown up xD.\nWell, unstable APIs and all that. I'll try to get F# support working again against beta5 soon~ish.\n. I'd just like to point out that the API used to implement the F# compiler on top of DNX has been mostly stable for months. I've had to make a few, really small changes, due to refactorings in DNX, but nothing that has taken any major effort or rewrite. I'm not saying go use my YoloDev F# support in production or anything (I mean, the name should give you that hint if anything), but all in all it's just a plug for the actual F# compiler to compile your code (as opposed to Roslyn), so the output should in general be just the same as if you used the actual F# compiler. Also, if you wanted to take it to production, you'd most like produce binaries locally, (or on CI) before doing so, in which case it wouldn't much matter either way, because the YoloDev compiler plug wouldn't even be loaded.\nAlso, @spencerwi, if there's anything you don't understand about the current compiler plug implementation, I'll be happy to answer any questions :) (I just might not notice them being asked, so just scream at me a little if you don't get a reply within a day or two :P ).\n. Yeah. This is definitely a version mismatch \n. @nojaf First of all. The F# master branch is intended to run against the dev branches of DNX (and libraries), which is not hosted on nuget but on myget. You install this using dnvm upgrade -u (-u for unstable). Second, dnvm version does not really matter (as long as it's new enough to get the newest DNX), however DNX version does matter. To see which DNX versions you have installed do dnvm list, and to see the current selected DNX version in use do dnx --version. It should read something like 1.0.0-rc2-16258 (or greater). Also, if you'd like, I can be available on IM to answer questions regarding both DNX and the dnx-fsharp library.\nIf your goal is just to use F# in DNX though, you can. It's not broken. Just download it from nuget, and make sure you're using RC1 packages. This should all work without any problems. It's only the latest \"nightly\" DNX stuff that doesn't work with F# at the moment.\n. @xperiandri This discussion should probably be on that repo, and not here. But nontheless, CI still builds fsharp-dnx just fine (https://ci.appveyor.com/project/Alxandr/fsharp-dnx). This issue might be caused by the new FSharp.Compiler.Service if that's the change you did.\n. What kind of failure? Exception thrown from the async action?\n. Done\n. ",
    "glennc": "We don't think this is a direction that we want to go for now. We will create another issue if this changes in the future.\n. Tracking here: https://github.com/aspnet/Hosting/issues/45\n. This no longer happens with the new KVM\n. @davidfowl Is this fixed?\n. Done, assigned to milestone.\n. @ChengTian, rename this and fix everywhere that breaks.\n. We should at least add a warning when you have the same thing defined twice\n. Fixed\n. Not required due to design changes since this was opened\n. Fixed in tooling\n. There is a note of this on the Home repo readme.\n. I've removed the Powershell 4 requirement, we now use the shell to unzip the package.\n. This should be resolved now\n. We will implement this at some point. Changed the title to reflect that.\n. To begin with we should implement kpm add <name> <version>\nBoth name and version would be mandatory, since I am fairly certain we don't allow empty versions in project.json anymore. \nThe command would simply add the given values to the project.json.\nWe could add an install command later that calls add and then restore. But add is the primitive that we need to begin with.\n. I think this is a point in time problem. Once we have short RTM version numbers typing this will be much easier. I would rather wait and see if it proves to be a problem before introducing coupling between our components.\n. @ChengTian We will just add the three @davidfowl mentions for now.\n. We've added options to reduce the output now. The default is now quieter.\nI'll close this, but re-open it if it's still too noisy for you.\n. at the moment the pinging of request response is also giving you the side effect of showing that something is happening. So as @natemcmaster said If we remove all of that then we will just close this issue so that we can open another where people are complaining that restore appears unresponsive for large periods of time.\nAdding needs design to discuss what we want to do, at first cut it seems like collecting all the messages of the same type for a given package Id would be a good start. So instead of 5 gets for a package, since you have 5 package sources, you would get one. But we can talk about it and see.\n. KVM now downloads to a temp location and only moves to bin once complete, that should resolve this issue.\n. Closing this in favor of the more general issue of build not working on Mac or Linux: https://github.com/aspnet/KRuntime/issues/173\n. You should get this because of https://github.com/aspnet/KRuntime/issues/652\n. We added a flag for build to ignore failed sources: https://github.com/aspnet/KRuntime/issues/591\nI've created an issue in the universe repo to pass that flag in the Universe build. https://github.com/aspnet/Universe/issues/112\n. We recommend parsing the string, and that's what VS uses. But if you want this behavior then we could look at a pull request. Are you still interested in the change?\n. @Alxandr leaving this in the backlog for when you get to it.\n. See: https://github.com/aspnet/Universe/issues/121\n. I'm not clear what the scenario is here. If you update the default KRE, but leave your other packages at the burnt in defaults,  then it will break. As the KRE has had breaking changes and the versions of the packages that your app is explicitly depending on have not been updated to take those into account.\nBut updating the KRE to a new one and having all your dependencies with * in them should work, I'm doing it right now in fact. \nIt sounds like you are doing the first of these, since changing it back would mean you are going back to a runtime that your other dependencies work with. Is that the case?\n. Yeah, if you've used KVM before installing VS then you can run into this. If you don't have a default you get the right one, but if it is something else then things break. Things are just changing so fast at the moment that builds often do not work unless you get a consistent set of versions, i.e the latest on myget of everything or the ones in the box with VS.\nIf you want to start updating the packages then you are going to have to update all of them. You are opting into using builds from a CI server, which we can't guarantee are going to work with packages from a month ago. Does that make sense?\n. @ChengTian This is similar to what KPM pack does. Write out all the dependencies in the dependency graph and where we loaded them from. It should be displayed by default and turned off by passing --quiet\nWe should make pack and build the same, the output could be something like this:\nUsing {Assembly|Package|Project} dependency {id} {version} for {targetFramework}\n  Source: {source path}\n  Target: {target path} (when doing kpm pack)\n  File: {lib\\aspnet50\\x.dll} (when appropriate)\n. It does this if you install the correct version, from Home and not the KRuntime one.\n. I'm not sure that this switch should exist. kvm install latest might be a better way to do what you want.\n. We would need to implemetn kvm install latest, it doesn't work right now.\n. kvm upgrade should always set the default, so are you asking for install to also set the default if it doesn't exist?\n. I didn't realize anyone was already working on this. Aweseome :).\nI will look at the changes properly in the morning :)\n. @davidfowl I assume we would've found this in our recent profiling efforts. Did anything show up?\n. @bricelam Is this still an issue?\n. For #315 \n. We are talking about a package that has a managed assembly that needs to invoke stuff from a native assembly that it carries, right? If that's the case then the current plan, as far as I understand it, is to be able to create a package like the following:\nMyLib\n  lib\n    dotnet\n      `MyLibrary.dll`\n  runtimes\n    win-x86\n        native\n            `MyNativeLib.dll`\n    win-x64\n        native\n            `MyNativeLib.dll`\nThe build system responsible for consuming this package would need to know to copy the native assembly to your build output when building for the given runtime. You could put linux-x86, linux-64, etc as well. The key is that there is a runtimes folder with a runtime id. The runtime Id is how you pivot on things like os and architecture. The native folder is for assets that need to be copied to the applications output directory to be consumed by my library.\n@davidfowl or @anurse might have more detailed comments. There should be more docs on how it all fits together coming at some point soon.\n. We should update the project templates to have a version number in the project.json when creating a new project.\nDo it. Do it now!\n. @JaneZhouQ was trying to follow the CTP2 instructions, and use the CTP2 bits. But MusicStore has 1.0.0-alpha2 dependencies and the feed has 1.0.0-alpha2-. kpm restore restores the one with the build number, but K web explodes because it can't find the right dependency.\nI vaguely recall some sort of bug where KPM wasn't behaving the same as k. But I don't know for sure. More fundamentally it didn't look like the alpha2 packages without a build number are on the feed at all, so either the feed or the project.json are wrong. \n. Sure, but k web wasn't doing that. The problem isn't that it does one or the other, it's that KPM picks the ones with the build and K doesn't. At least that's what it looked like in the brief look I had. \n. Yeah, I don't think it's a problem now.\n. @davidfowl ping so you consider this in the stuff you are working on at the moment.\n. Did we ever come to a conclusion about this?\n. @troydai what?\n. Duplicate: https://github.com/aspnet/XRE/issues/714\n. I think this is by design. The overwrite command is designed to take overwrite any files that exist in the destination and the application being packed. It doesn't diff things and only overwrite if changes are made. Feel free to disagree and re-open. \n. Leave it open, and done, until the VS part is done as well?\n. @pranavkm Are able to make this change?\n. Duplicate: https://github.com/aspnet/KRuntime/issues/596\n. We are ok with saying this as the error message, but want to add a general message to all syntax errors telling people how to display the help.\n```\n\nkpm add\nName of dependency to add is required.\nRun 'kpm add --help' to see help.\n```\n. @ChengTian can you talk to @loudej when you look at this? He has ideas for some of the names.\n. We should show an error when this occurs, with a non-zero return code.\n\nWe should still do the same amount of work we do today.\n. Right now you need to explicitly build ctrl + shift + b in order for test discovery to work.\nSee: #582\n. We should investigate schema validation of duplicates in the tooling.\n. Closing this. If it turns out that the linked issues are not the problem here then re-open the issue.\n. The problem here is that the n in AspNet is lowercase in the project.json but not in the NuSpec. If you change the package name to Microsoft.AspNet.SignalR.Client in the project.json it will work.\nWe need to solve this problem with inconsistent casing rules. \nI'm going to update the title of this to reflect the problem.\n. We think that we should be case sensitive, and so in this case restore should've failed.\nWe should be able to give an error message that tells the user that the case of the package Id is different to what was typed in the project.json and let people fix it. or at least that it could be different and show the two strings.\n. If we have partial information (some or all of the feeds are not available) then:\n- If we know an exact minimum version (version without *) and that version is available -> done\n- If --ignore-failed-sources is specified and we have a package that satisfies the version ranges -> done\n- otherwise error\n. @ChengTian @ahmetalpbalkan Have either of you seen this before? Is it a bug that's been fixed?\n. Thanks @ahmetalpbalkan and @ChengTian \n. @Praburaj Did you see if this was still an issue?\n. See: https://github.com/aspnet/Home/wiki/DesignNote-Native-Module-Bootstrapping\nThe top section is to find the bootstrapper, the bottom section for the bootstrapper to find the KRE\n. Should be fixed by: https://github.com/aspnet/KRuntime/pull/746\n. We are removing overwrite. See: https://github.com/aspnet/XRE/issues/1227\n. We will remove --overwrite and add a --merge command that more accurately expresses what we intended with this. \nFor this scenario, where you want to remove content from the packed image, we would want you to delete the folder yourself before packing.\n. We are removing overwrite. See: https://github.com/aspnet/XRE/issues/1227\n. @balachir is this still an issue that we need to look at? It's been a while since you created it.\n. We will look at fixing this in the next milestone, there should be some more tooling work to tell you when there are problems with your dependencies. It should be obvious when problems like this occur.\nConsidering putting reference errors in the error list, perhaps showing it in project.json as well.\n. We need a few pieces to fall into place before we can solve this properly. Such as pre-processors. \n. Not having version numbers has been supported for a while, but isn't something we will continue to do.\nIIRC the only place you will be able to have empty versions in the future is inside the frameworkDependencies section when loading reference assemblies.\n. @GrabYourPitchforks do you think this is related to something similar to https://github.com/aspnet/XRE/issues/600?\n. Not sure of all the implications of this, assigning it to RC1 to find out.\n. @kirthik Can you create this in the Kestrel repo?\n. @troydai can you investigate this a bit further and see if you can identify a cause?\n. Did you actually try this out? I think the behavior is supposed to be what you described, and the text might be wrong.\nI remember bugs being created when testing for the Alpha or Beta release because overwrite left files  in the destination that were removed from the source.\n. We are removing overwrite. See: https://github.com/aspnet/XRE/issues/1227\n. Duplicate of issue in the logging repo: https://github.com/aspnet/Logging/issues/46\n. If we did that then we would have to bake some kind of semantic versioning logic into the servicing mechanism. Which would no doubt always be slightly wrong. Unless i'm missing something?\n. Will run the build pack method per configuration and pass the configuration in. \n. Assigning to 1.0 milestone. We will take it sooner if @borgdylan sends a PR for it though :)\n. Ok, I am going to close this then. We can always re-open or create a new one if it makes sense to.\n. close as duplicate\n. @davidfowl Should we still merge this given our latest discussions?\n. I think we are going to pivot on how we do breadcrumbs. Come talk to me about it.\n. @victorhurdugaci Is this still the case?\n. @troydai Did you confirm with @PradeepKadubandi?\n. @victorhurdugaci This is required for install -g right?\n. Are you talking about determining all packages that are depended on but not used? I'm not sure what you're asking for :)\n. To do the first you need to take into account all the rules of the dependency walker. EF might be pulled in by a dependency, but is it the same version that the dependency resolver would've picked if you removed it from the apps dependency list? You need to remove the app level one, and then run the dependency walker to see if it changes the result.\nThen when you try to generalize that you end up realizing that, in the MVC solution for example, no individual top level package is required. So you need to evaluate all combinations of packages and pick the smallest list. Which is expensive.\n. One thing I also tried out was running the dependency walker and drawing the nodes, showing which ones were eclipsed by packages nearer to the app. I made it so that if you highlighted a node it would show you all the packages with the same name, so you could see what was eclipsed and remove anything that was.\nDo you think this would give you what you want?\n. why not? I don't remember why I filed this, but if it's directory info then I can do things like GetFiles as well as get FullName to use the string if that's what I want. Is there a strong reason that it should be a string?\n. Duplicate: https://github.com/aspnet/XRE/issues/694\n. Users can edit the file, to set locked to true if nothing else. I'm not against some tooling support to special case the file in VS, but moving it away from the project doesn't seem to add anything and it splits up my view of the world too much. So I don't think we should move it out of the project.\n@davidfowl have we had any discussions about tooling features for lock files?\n. We can investigate making it easier to discover ignore-failed-sources with some polishing of the the error or something. Changing the title to reflect that and assigning it to a milestone.\n. Duplicate. Closing in favor of https://github.com/aspnet/XRE/issues/1316\n. @davidfowl closing this if it's filed in the tooling repo. Reopen it if you disagree.\n. @troydai Was this fixed in the recent rename pass?\n. @anurse Is this code we temporarily borrowed from NuGet? \n. Closing this, the issue is tracked in the tooling repositories.\n. @troydai Can you check on the state of our Kudu integration, and perhaps see why setting the path appears to be failing?\n. @anurse Will this be a problem once we finish all the work you guys are doing? This is an ADFS authenticated feed.\n. @shhsu is this something you know about already?\n. In general case sensitivity is by design in order to provide some level of consistency across the platforms. Case sensitivity matters in non-windows platforms, and works on Windows. So we are case sensitive.\nIf I understand this you are saying that changing the case of a folder and then building fails, that would be by design as well given that we are case sensitive. Running kpm restore would presumably download the package again with the correct case. \nDoes it break your workflow somehow? \n. @troydai Is this all done? Can this be closed?\n. So for this to occur you need to be running restore and then kick off a restore in VS and have them happen to hit the same projects lock file at the same time. Seems rare, and the error message for it doesn't seem terrible. We could perhaps catch the error and retry, but I'm not sure that's any better.\nClosing unless this hits someones main flow consistently, or commonly. I'm not against the retry in principle, but I don't think we should worry about it right now.\n. Dup? https://github.com/aspnet/DNX/issues/1376\n. Did you expect it to work or is this just for us to add a check so that it doesn't crash?\n. @bitcrazed Yeah, that's what I thought. Which is fine, and something we should do. Are you interested enough to send a pull request for the dnvm repo? It's just a powershell script. If not that's fine and we will probably fix it in one of the polish pushes we do where we cleanup issues like this.\n. Yes, that's the path we agreed on in email. :shipit: \n. @anurse Does this still need to happen?\n. @BillHiebert  if we did this can we make it so that if I ever rename a project in VS it automatically adds the right entries to global.json and project.json?\nI'm not sure I like having to change two files. Will think about it more though.\n. I like 4\n. How is this different to https://github.com/aspnet/dnx/issues/1752?\n.  Don't think I've seen this before. @ellismg have you?\n. Oh yeah, forgot about libunwind. I don't remember hitting that when I was testing out this stuff on clean Ubuntu though. I will have to add a note to the Linux instructions.\n. Apparently :). Actually. You know what. It is probably  I had built something else and pulled them down, like building kestrel and possibly Mono when I was doing the test. I don't think I actually created a new VM just to test coreclr.\n. I don't disagree. But I also don't think it will significantly cut-down people having problems. People don't generally read the manual very well before trying things. A better way of installing that either checks and gives you better errors for missing dependencies, or prompts to install them for you, would be better.\n. apt-cache policy libssl-dev\nwill tell you if a package is installed. \nwhereis libuv.so.1\nwill tell me if libuv is available. But IIRC there are some problems with whereis in certain circumstances.\nSo basically, yes we should be able to but some research into the best ways would be required.\n. @colemickens Yeah :).\n. At this point I think we are too late to change this. There are already too many things that assume project.json is the name and changing them would cost far more then the value that I have seen talked about so far.\n. Wrong repo, and dup of: https://github.com/aspnet/dnvm/issues/271\nClosing in favor of that one.\n. Are you guys hitting issue https://github.com/aspnet/dnx/issues/2954?\n. Moved to DNVM repo.\n. What?\n. Ok, got it.\n. Closing, feel free to reopen if you want to continue the discussion.\n. @anurse Is this done?\n. @troydai what? Link broken, no description. Closing.\n. We now show the location of the config files, so this shouldn't be an issue anymore.\n. Ok. I think this is the same issue as: https://github.com/aspnet/dnx/issues/1590\n. @divega where is this at now?\n. @davidfowl should either come to design meetings or stay on vacation.... ;)\n. Conclusions from the last meeting we had on this:\n- Resolve confusion around lock.json\n  - Rename file resolved.json\n  - Move file out of the solution into somewhere project local that can be safely ignored\n  - Remove locked:true from the file.\nOnce the above changes are made then this new resolved.json file is only designed to do the following:\n- Give the runtime a consistent view of globally installed packages from build to build (no changing references because a different project pulled a higher version into your user level packages folder)\n- Performance gains by caching the results of walking the dependency graph\nIt shouldn't be required to check the file in and the biggest source of confusion around this will hopefully be resolved.\nWhat we don't have is a file that is designed to provide repeatable builds of a given commit, branch, etc at any point in time (assuming the packages are able to be downloaded still). As we examined this it become obvious that there are many workflows that people use and the more opinionated we are in the runtime the less likely we are going to be able to support them.\nWe will create a new issue and look at some workflows and how you would achieve something similar to the lock file without actually baking the concept of a lockfile into the runtime. One of our examples was a global command that could pin a project.json (replace * with resolved package version) and unpin (put the project.json back the way it was). We will look at some of these in the context of some workflows and see how they fit. See what sort of composition model or extension points are required in the runtime to make some of the things we have talked about here possible without the locked:true in this file.\n. @factormystic I haven't actually looked at that myself yet. But it is definitely something we will investigate. We've mentioned it before, but not put the time into it yet. \n. @victorhurdugaci Can you close this if it doesn't actually require DNX changes?\n. Can we see your project.json?\n/cc @anurse\n. @victorhurdugaci Can this be closed?\n. Closing. Package names are case sensitive. We fixed our broken package references.\n. @sayedihashimi What do you think the right way to go about fixing something like this is? Is what we have right now as good as it gets or would a NuGet package or something make sense?\n. Closing this, @sayedihashimi can you try and remember to link this to a relevant tooling bug? That's the best we can do for now I think\n. We've talked about this a whole lot, but never actually implemented it. I wouldn't be against it, but I don't know that it fits into the roadmap for 1.0 as it stands right now. If someone wanted to grab this and work through the design of it with us we would probably accept it though :).\n. @ChengTian I am assuming this is a fairly trivial fix. Let me know if that's not the case.\n. @BrennanConroy Can you investigate this a bit more see if you can see what's going on?\n. @ChengTian can you investigate this and tell me if there is anything obvious we should be doing?\n. It is a hint that you might need to clear your cache for some categories of errors. But otherwise probably not super useful in a whole lot of circumstances.\n. @victorhurdugaci Can you see what the issue here is?\n. Assigning to beta8 for at least the clear-cache command, we will talk about clearing a specific URL but we might punt that part to beta8\n. I had assumed it would nuke the whole folder. But I am not familiar enough with the entire mechanism to say for certain. @davidfowl @anurse @lodejard What do you guys think?\n. @r2musings Is there any chance of seeing the project? Publish to GItHub maybe?\n. Looks like this is caused by this: https://github.com/aspnet/dnx/issues/2352\nDoes manually running restore on the wrapped projects help?\n. @troydai Do you have to put glob patterns in here or do we exclude folders?\n. Ok thanks, can you go and answer the SO question as well?\n. Closing as dupe of  aspnet/Home#798\n. @anurse can you investigate this and let us know what you think?\n. At this point I don't think dealing with the breaking changes of renaming project.json is something we would want to do.\nSo a rename would have to have a large amount of value. So far I haven't seen a huge number of downsides to the name, it could perhaps be better, but I haven't seen a suggestion so far that seems significantly better. Better enough to go and reset all the tooling and documentation that talks about project.json already anyway.\n. Assigning to Wei to see if there's anything that can be done to reduce it from 40 seconds.\n. Why is this a dll reference? Is your test project a csproj?\n. What sort of integration did you have in mind? I'm not familiar with Zero Install but it appears to be mostly about installing and managing applications and utilities, something like what Chocolatey is often used for. Is that assumption correct?\n. Closing, since it is an error in the post. I'll see about getting someone to update the blog post today, otherwise @danroth27 is back tomorrow.\n. When does this happen? Building anything?\n. How impact-full is it? Blocking the tests?\n. I like the idea, but don't think it fits into any of the milestones we have at the moment. So backlog for now.\n. What are you suggesting we do about this? Setting ulimit requires root does it not?\n. @BillHiebert @sayedihashimi In addition to whatever we do in the runtime this feels like something that we could provide warnings for in tooling. Right?\n. @moozzyk Would you be likely to fit this into beta8 or should we assign it to the next milestone?\n. How bad are the issues? @Tratcher when should it be disposed in this case?\n. @muratg we should put this in a milestone.\n. If we can I would like to know how we would improve this in beta8.\n. This will probably not be needed once we have a tar dnx. Moving to backlog for now, should be able to close it once we are not running chmod anymore.\n. This is known, and will be resolved when we fix the linked issues. Until then it is going to be case sensitive :).\n. Is this not the correct behavior? It is showing you the url that it downloaded from. Is it confusing because you expected to see nuget.org and didn't?\n. Are they included in beta7? I am ok with looking at adding files in a new beta, but don't want to re-ship an old beta.\n. It's unlikely that it's there then. I was asking because it sounded like you meant it was there in beta7 and wanted it in the older versions. @moozzyk should be able to talk more about it.\n. That's the way all the else statements are in this file, I was following the style already layed out. I think it's the way that Powershell is normally done as well, but could be wrong about that.\nDo you want to change that?\n. Can we add -p to this help text?\n. Read the description\n. Servicing.Breadcrumbs instead?\n. Double ;\n. Also not 100% sure that we shouldn't create it. We could still try. That would allow a tool to create the breadcrumbs folder to use this class. \n. @loudej are you ok with this path? \n. Leave it as case insensitive for now.\n. This name doesn't feel right. You are using ansiCodes either way, just processing them differently. It is more like ansiCodePassthrough, but given that nobody knows what that means and this is internal it doesn't worry me too much.\n. This changes the behaviour of this does it not? Previously everyone who called this would've gotten the same instance. Now they will all get a different one. Not sure it matters, but it is a thing. @davidfowl?\n. ",
    "bricelam": "Sounds good. As a workaround, I am injecting files into the nupkg post build. See https://github.com/aspnet/xunit/blob/k2/makefile.shade\n. Doh, looks like I should have dug a little deeper before filing. Is there a spec/wiki/code file containing the project.json file format?\n. @davidfowl I thought that branch looked relevant. :smile: I tested these changes on top of it, but I don't think it was finished when I did. Should this change be made as part of that work?\n. I was playing with this, and it seems to break when both a k10 and portable configuration are present.\njson\n{\n  \"configurations\": {\n    \"k10\": {\n      \"dependencies\": {\n        \"System.Runtime\": \"4.0.20.0\"\n      }\n    },\n    \".NETPortable,Version=v4.6,Profile=Profile32\": {\n      \"dependencies\": {\n        \"System.Runtime\": \"\"\n      }\n    }\n  }\n}\nk restore does nothing.\nk build fails with The type or namespace name 'System' could not be found.\nklr.exe Information: 0 : [RoslynCompiler]: Found project 'ProjectKConsoleApp1' framework=K,Version=v1.0\nklr.exe Information: 0 : [RoslynCompiler]: Loading dependencies for 'ProjectKConsoleApp1'\nklr.exe Information: 0 : [RoslynCompiler]: Failed to resolve dependency 'System.Runtime'\nklr.exe Information: 0 : [RoslynCompiler]: Completed loading dependencies for 'ProjectKConsoleApp1' in 8ms\nklr.exe Information: 0 : [RoslynCompiler]: Compiling 'ProjectKConsoleApp1'\nklr.exe Information: 0 : [RoslynCompiler]: Exported References 0\nMixing portable and net45 configurations works.\n. @dougbu Was also hitting this.\n. As a result of this bug, when you install the Microsoft.Data.Common package into a Windows Store App, a reference to System.Data is added. Because this is not part of the Windows Runtime, you get the following error when compiling.\nCannot find type System.ComponentModel.MarshalByValueComponent in module System.dll.\nTo workaround this, remove the reference to System.Data.\n. Now it produces...\nxml\n<frameworkAssembly assemblyName=\"System.Data\" targetFramework=\".NETFramework4.5\" />\nBut NuGet only seems to honor it if it's exactly net45,\n. False alarm. :blush: It seems to be working fine this morning.\n. The project contents were trivial:\nC#\nnamespace A\n{\n    public class Class1\n    {\n    }\n}\n``` C#\nusing A;\nnamespace B\n{\n    public class Class2 : Class1\n    {\n    }\n}\n```\nError occurs during k build. I haven't tried to repro with k run.\n. (Attaching the repro.)\n. No matter what incantation I try, adding a reference to System.Runtime in project B does not solve this issue.\n. :shipit:\n. Yep, with xunit.runner.aspnet from aspnet.xunit now. I suppose we could move XRE's tests into another repository. The CI workflow would be:\n1. Build XRE\n2. Build aspnet.xunit\n3. Test XRE\n4. Cascade, rinse & repeat\n. For SQL Server, we currently rely on sni.dll being distributed as part of the dnx-coreclr-win packages.\n. @davidfowl Should I file a bug against NuGet then? We need to fix the issue of CoreCLR assemblies getting added to class library projects.\n. Yay! I will start coding against this immediately.\n. Note, the Windows Store AppX stuff uses x64, not amd64. (Just FYI)\n. @GrabYourPitchforks Understood. I just wanted to note one place at Microsoft where we decided to fully abandon Itanium and just call 64-bit x64. Windows Server 2012 and newer also stopped supporting Itanium. (I'm not pushing back here--just adding my input.)\n. +1 for an array because it can span multiple lines.\n. I believe you need to use the beautiful format .NETPortable,Version=v4.5,Profile=Profile111.\n. @davidfowl I went, \"Oh shiny! I need that.\"\n. @davidfowl Less important to me, but I can also move them to CommandLineUtils if you want me to.\n. No, I'm just using the escape sequences inline: Program.cs\n...and it's beautiful.\n. If the net45 version is strong-named, but the aspnet50 one isn't, this won't actually buy us anything. /cc @rowanmiller\n. Closing since this will no longer help us on EF.\n. Can we implement an auto-gc feature like git? With some caching policy like \"if it hasn't been restored in a week, evict it\"\n. I found similar commands in other package managers:\n- npm prune\n- bundle clean\n. (That's why I was careful to use the word similar :wink:)\n. :trollface: Can't we just maintain a repositories.config file in there that points back to the individual projects?\n. I'm not sure this can work. We need the .NET 4.5.1 contract of System.Data.dll, but Mono only implements .NET 4.5.\n. (See https://nuget.codeplex.com/workitem/4397)\n. I suspect this has something to do with the way AnsiConsole un-bolds. (See line 33.)\n. BTW, this is a different way of asking for #45\n. Ping... our workaround depends on an external-to-DNX solution that leverages WindowsBase.dll. This means you can't build a valid Microsoft.Data.Sqlite package without Desktop .NET/Mono.\n. W00t! We have workarounds in EntityFramework and in Microsoft.Data.Sqlite for this...\n. The new core50 framework resolves this issue.\n. Possible dupe of #801\n. Re-openeing; @barrytang says it's a runtime issue.\n. To further elaborate on how each of these would work with cross-platform library development\u2026\n1. A single, maybe-strong-named net45 assembly would \"just work\" on aspnet50\n2. A single, maybe-strong-named net45 assembly could work on aspnet50 if the ANI assemblies were extracted and referenced during build on net45\n3. Two assemblies are needed: a maybe-strong-named net45 assembly, and a cannot-be-strong-named aspnet50 assembly. This would require any dependent cross-platform libraries to also cross-compile\n. @lodejard has thought through a fourth alternative that could work with things as-is:\nCreate a NuGet package that any library using ANIs cross-platform can depend on. This package would hook into MSBuild and...\n1. Extract all ANI assemblies in the project's dependency tree\n2. Copy them to obj/ and make them available as reference assemblies\n3. If the project is strong-named, use the project's key to strong-name any dependencies that aren't\n4. Use a tool like brutaldev/StrongNameSigner to rewrite the project's and any dependencies' assemblies to reference the now-strong-named assemblies with their new identities\nIn this solution, a single, cannot-be-strong-named net45 assembly could be used. It's identity, and the identity of its dependencies would change for every strong-named dependent. Ultimately, only the end application can be strong-named--never dependent class libraries. (Unless we unify the strong names of the assemblies)\n. As far as the original report is concerned, this is resolved by #2004\n. Nothing special here. I'm using 1.0.0-rc1-10781 as well. Here is my entire source code.\n``` C#\nusing System;\nnamespace Test\n{\n    public static class Program\n    {\n        public static void Main()\n        {\n            AppDomain.Create(\"Test\");\n        }\n    }\n}\n```\n...and project.json\nJSON\n{\n    \"frameworks\": {\n        \"aspnet50\": { }\n    }\n}\n...and k run output with tracing and fusion log.\n```\nLoaded Module: k\nFound DLL Export: CallApplicationMain\nklr Information: 0 : [LoaderContainer]: Load name=Microsoft.Framework.ApplicationHost\nklr Information: 0 : [PathBasedAssemblyLoader]: Loaded name=Microsoft.Framework.ApplicationHost in 11ms\nklr Information: 0 : [LoaderContainer]: Load name=Microsoft.Framework.Runtime\nklr Information: 0 : [PathBasedAssemblyLoader]: Loaded name=Microsoft.Framework.Runtime in 12ms\nklr Information: 0 : [LoaderContainer]: Load name=Newtonsoft.Json\nklr Information: 0 : [PathBasedAssemblyLoader]: Loaded name=Newtonsoft.Json in 7ms\nklr Information: 0 : [DefaultHost]: Project path: C:\\Projects\\Test\\src\\Test\nklr Information: 0 : [DefaultHost]: Project root: C:\\Projects\\Test\\src\\Test\nklr Information: 0 : [DefaultHost]: Packages path: C:\\Users\\bricelam.kpm\\packages\nklr Information: 0 : [DependencyWalker]: Walking dependency graph for 'Test Asp.Net,Version=v5.0'.\nklr Information: 0 : [ProjectReferenceDependencyProvider]: Test 1.0.0\nklr Information: 0 : [ReferenceAssemblyDependencyResolver]: gac/mscorlib 4.0.0.0, gac/System 4.0.0.0, gac/System.Core 4.0.0.0, gac/Microsoft.CSharp 4.0.0.0\nklr Information: 0 : [DependencyWalker]: Resolved dependencies for Test in 67ms\nklr Information: 0 : [LoaderContainer]: Load name=Test\nklr Information: 0 : [ProjectLibraryExportProvider]: GetLibraryExport(Test, Asp.Net,Version=v5.0, Debug, )\nklr Information: 0 : [LoaderContainer]: Load name=Microsoft.Framework.Runtime.Roslyn\nklr Information: 0 : [PathBasedAssemblyLoader]: Loaded name=Microsoft.Framework.Runtime.Roslyn in 4ms\nklr Information: 0 : [LoaderContainer]: Load name=Microsoft.CodeAnalysis\nklr Information: 0 : [PathBasedAssemblyLoader]: Loaded name=Microsoft.CodeAnalysis in 5ms\nklr Information: 0 : [Microsoft.Framework.Runtime.Roslyn.RoslynProjectReferenceProvider]: GetProjectReference(Test, Asp.Net,Version=v5.0, Debug, )\nklr Information: 0 : [LoaderContainer]: Load name=Microsoft.CodeAnalysis.CSharp\nklr Information: 0 : [PathBasedAssemblyLoader]: Loaded name=Microsoft.CodeAnalysis.CSharp in 5ms\nklr Information: 0 : [ProjectExportProviderHelper]: Resolving references for 'Test'\nklr Information: 0 : [LoaderContainer]: Load name=System.Reflection.Metadata\nklr Information: 0 : [PathBasedAssemblyLoader]: Loaded name=System.Reflection.Metadata in 7ms\nklr Information: 0 : [ProjectExportProviderHelper]: Resolved 4 references for 'Test' in 252ms\nklr Information: 0 : [RoslynCompiler]: Compiling 'Test'\nklr Information: 0 : [LoaderContainer]: Load name=Microsoft.CodeAnalysis.Desktop\nklr Information: 0 : [PathBasedAssemblyLoader]: Loaded name=Microsoft.CodeAnalysis.Desktop in 5ms\nklr Information: 0 : [RoslynCompiler]: Scanning 'Test' for assembly neutral interfaces\nklr Information: 0 : [RoslynCompiler]: Found 0 assembly neutral interfaces for 'Test' in 374ms\nklr Information: 0 : [RoslynCompiler]: Compiled 'Test' in 930ms\nklr Information: 0 : [CompilationContext]: Generating resources for Test\nklr Information: 0 : [CompilationContext]: Generated resources for Test in 4ms\nklr Information: 0 : [CompilationContext]: Resolving required assembly neutral references for Test\nklr Information: 0 : [CompilationContext]: Resolved 0 required assembly neutral references for Test in 5ms\nklr Information: 0 : [RoslynProjectReference]: Emitting assembly for Test\nklr Information: 0 : [RoslynProjectReference]: Emitted Test in 1868ms\nklr Information: 0 : [ProjectAssemblyLoader]: Loaded name=Test in 3233ms\nSystem.TypeLoadException: The domain manager specified by the host could not be instantiated. ---> System.IO.FileNotFoundException: Could not load file or assembly 'klr.net45.managed' or one of its dependencies. The system cannot find the file specified.\n   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Activator.CreateInstance(String assemblyString, String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, Evidence securityInfo, StackCrawlMark& stackMark)\n   at System.Activator.CreateInstance(String assemblyName, String typeName)\n   at System.AppDomain.CreateInstance(String assemblyName, String typeName)\n   at System.AppDomain.CreateInstanceAndUnwrap(String assemblyName, String typeName)\n   at System.AppDomain.CreateAppDomainManager()\n   --- End of inner exception stack trace ---\n   at System.AppDomain.CreateAppDomainManager()\n   at System.AppDomain.Setup(Object arg)\n   at System.AppDomain.nCreateDomain(String friendlyName, AppDomainSetup setup, Evidence providedSecurityInfo, Evidence creatorsSecurityInfo, IntPtr parentSecurityDescriptor)\n   at System.AppDomainManager.CreateDomainHelper(String friendlyName, Evidence securityInfo, AppDomainSetup appDomainInfo)\n   at System.AppDomainManager.CreateDomain(String friendlyName, Evidence securityInfo, AppDomainSetup appDomainInfo)\n   at System.AppDomain.InternalCreateDomain(String friendlyName, Evidence securityInfo, AppDomainSetup info)\n   at System.AppDomain.CreateDomain(String friendlyName, Evidence securityInfo, AppDomainSetup info)\n   at System.AppDomain.CreateDomain(String friendlyName)\n   at Test.Program.Main() in C:\\Projects\\Test\\src\\Test\\Program.cs:line 9\nSystem.IO.FileNotFoundException: Could not load file or assembly 'klr.net45.managed' or one of its dependencies. The system cannot find the file specified.\nFile name: 'klr.net45.managed'\n   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Activator.CreateInstance(String assemblyString, String typeName, Boolean ignoreCase, BindingFlags bindingAttr, Binder binder, Object[] args, CultureInfo culture, Object[] activationAttributes, Evidence securityInfo, StackCrawlMark& stackMark)\n   at System.Activator.CreateInstance(String assemblyName, String typeName)\n   at System.AppDomain.CreateInstance(String assemblyName, String typeName)\n   at System.AppDomain.CreateInstanceAndUnwrap(String assemblyName, String typeName)\n   at System.AppDomain.CreateAppDomainManager()\n=== Pre-bind state information ===\nLOG: DisplayName = klr.net45.managed\n (Partial)\nWRN: Partial binding information was supplied for an assembly:\nWRN: Assembly Name: klr.net45.managed | Domain ID: 2\nWRN: A partial bind occurs when only part of the assembly display name is provided.\nWRN: This might result in the binder loading an incorrect assembly.\nWRN: It is recommended to provide a fully specified textual identity for the assembly,\nWRN: that consists of the simple name, version, culture, and public key token.\nWRN: See whitepaper http://go.microsoft.com/fwlink/?LinkId=109270 for more information and common solutions to this issue.\nLOG: Appbase = file:///C:/Projects/Test/src/Test\nLOG: Initial PrivatePath = NULL\nCalling assembly : (Unknown).\n===\nLOG: This bind starts in default load context.\nLOG: Configuration file C:\\Users\\bricelam.kre\\packages\\KRE-CLR-x86.1.0.0-rc1-10781\\bin\\klr.exe.config does not exist.\nLOG: No application configuration file found.\nLOG: Using host configuration file: C:\\Users\\bricelam.kre\\packages\\KRE-CLR-x86.1.0.0-rc1-10781\\bin\\klr.net45.config\nLOG: Using machine configuration file from C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\config\\machine.config.\nLOG: Policy not being applied to reference at this time (private, custom, partial, or location-based assembly bind).\nLOG: Attempting download of new URL file:///C:/Projects/Test/src/Test/klr.net45.managed.DLL.\nLOG: Attempting download of new URL file:///C:/Projects/Test/src/Test/klr.net45.managed/klr.net45.managed.DLL.\nLOG: Attempting download of new URL file:///C:/Projects/Test/src/Test/klr.net45.managed.EXE.\nLOG: Attempting download of new URL file:///C:/Projects/Test/src/Test/klr.net45.managed/klr.net45.managed.EXE.\n``\n. @davidfowl So any existing libraries for net45 that don't do this will break?\n. My initial thoughts were that you could declare a command as \"inheritable\" and it would get copied into dependents' project.json on install. Unfortunately, there's not really a distinction between install and restore--maybe it only works withkpm install`. The dependent project would then own the command and could rename or remove it if they want.\nThe \"inheritance\" should probably only go one level deep, and you would have to re-declare it as \"inheritable\" if you also wanted your dependents to get it.\nJSON\n{\n    \"commands\": {\n        \"gen\": { \"package\": \"Microsoft.Framework.CodeGeneration\", \"copyOnInstall\": true }\n    }\n}\nUltimately, I'm trying to solve the problem of command discoverability. If a user installs the EntityFramework.Commands package, how are they supposed to know they need to add something to their commands section before they can use it. Also, how are they supposed to know what to add.\n. Isn't kpm list most of the way there?\n. Sorry, I'm asking for two things at once. The first is determining which explicit (listed in project.json) dependencies are already brought in by your other dependencies and are thus redundant. The second is just a pipe dream of being able to determine which explicit dependencies are never actually used.\n. Ah, I forgot NuGet had that strategy for reconciling dependency versions. I saw the feature in Paket and found it very useful, but it probably works well there because they always use the newest semantically-compatible version of dependencies.\nkpm list is probably good enough given the complexities. Drawing the dependency graph would be a great power tool to have. This feature request was just a nice-to-have in my mind. I'll let you guys decide what the best course of action is.\n. No, it didn't nullref. It just didn't show them.\n. This caught me off guard. I was calling AppContext.BaseDirectory expecting it to be the value of IApplicationEnvironment.ApplicationBasePath, but it was the runtime directory instead since it just uses the value of AppDomain.CurrentDomain.BaseDirectory internally.\n. @davidfowl per the discussion in dotnet/corefx#2670 can AppContext.BaseDirectory point to the right location on dnx46 now?\n. Ah, \"6 days ago\" :smile: definitely not on 46 then.\n. :shipit:\n. Haven't tried. @natemcmaster?\n. Yes, they're installed.\n. My suspicion was that it's failing because now it's trying to see if net45+win+monotouch+monoandroid+xamarinios is a subset of net45+win.\n| Xamarin? | Project | Package | Compatible? |\n| --- | --- | --- | --- |\n| No | net45+win | net45+win | Yes |\n| Yes | net45+win+monotouch+monoandroid+xamarinios | net45+win | No |\n. I'm on it... as soon as I find the time.\n. I'm explicitly not adding the help command to sub-commands. I've made dnx . ef migration add --help (in that exact order) work, but the overall usability of help is awkward compared to other command line tools.\n. Bonus points: make dnx . ef --help migration add work.\n. The help command (but not the help option) was removed in #2139. As far as I'm concerned, this issue can be closed.\n. @anurse Do you know if this is generally supported where we need it to be? I know bash supports it...\n. @anurse Per @BrennanConroy's PR #1724, it does pass-through outside of Windows. :wink: That's why I was wondering if sending semicolon-separated sequences would be OK.\n. Cool. I did a prototype a while ago at https://gist.github.com/bricelam/39d8cf65f3da684657c9 I also tried to fix some of the strange behavior around bolding.\n. Hence prototype :wink: \n. My initial thought was something like the following:\n``` C#\n// Required arguemnt\ncommand.Argument(\"[arg]\", \"An argument\", required: true);\n// Enum option\ncommand.Option(\n    \"-o|--option \",\n    \"An option\",\n    CommandOptionType.SingleValue,\n    validValues: new[] { \"value1\", \"value2\", \"value3\" });\n``\n. Same bug is manifest if you dodnu help blah. :shipit:\n. I was able to build this locally and get it working. Thanks, @anurse\n. Merged as 9b57562fc7f685d0399b1602318d3e8cc5d65770\n. Will the defines flag beDOTNETorDOTNET00`?\n. Cool.\n. I prototyped something in bricelam:nowarn, but it's probably not the design you're looking for...\nFormat would be\nJSON\n{    \n  \"compilationOptions\": {\n    \"noWarn\": [\"CS618\", \"CS1591\"]\n  }\n}\n. I'll add some tests and send an official PR.\n. BTW, what's with uap10.0? Wouldn't the NuGet thing to do be uwp100?\n. Native library loading doesn't appear to be implemented. Is that tracked in a separate issue? (Reopening until I hear otherwise)\n. Yep\n. Awesome, thanks. KoreBuild obviously calls pack from the repository root.\n. :+1:\n. I noticed that it was set to Production yesterday too... @HaoK?\n. Looks like we (EF) could explicitly call UseEnvironment(EnvironmentName.Development).\n. There may be a separate issue with Hosting not honoring ASPNET_ENV.\n. Oops, sorry, automatically closed by merge. Re-opening for you guys to track.\n. @kdaveid I'll be adding an environment parameter to the dnx ef commands soon\n. Interesting, I'll keep digging to figure out why it's not working...\n. So fallbacks don't apply when it's a project? I'll try updating to win7.\n. Ok, so I guess this bug is just that it doesn't fallback to \"win\", I'll switch to \"win7\" for now.\n. Closing this issue. Everything is working with win7.\n. Hmm, the wrap project.json may be getting picked up by the NuGet MSBuild integration for PCL projects.\n. Updated\n. I can't remember the specifics, but I think it's better to do something like the following with SET.\nBatchfile\nSET \"KLR_RUNTIME_PATH=%~dp0.\"\n. I remember now, if you put the quotes around the variable, the quotes don't become part of the value:\n``` Batchfile\nREM Value of \"1\"\nSET A=\"1\"\nREM Value of 1\nSET \"A=1\"\n```\n...so I guess it depends on which one you want.\n. K_APPBASE can be set externally, so we can't depend on the variable having quotes.\n. IMHO, yes. It makes it so you don't have to think about whether a variable is external or not.\n. I'm still trying to find where this package is produced...\n. Found it. aspnet/Roslyn#9\n. Should 4.5.2 be listed here as well?\n. This broke the EF build. There is a case difference between the id and title of the redis-64 package. The NuGet URL is expecting the Id to be passed, not the title.\n. This could also be exacerbated by an issue on the NuGet server where it rewrites the id to uppercase because that's what it's been historically.\n. Actually, I think NuGet was changing underneath us. Things seem to be ok if we use 'Redis-64' now.\n. I just sent out PRs to remove all these from our repos... (but we still depend on packages using them, of course)\n. ",
    "Fosol": "It's my experience that don't include a half feature unless you provide a simple way to override it.  What's the simple way to configure what is packaged from our project?\nHow do I have the project build and place files to the output folder but lets me do the actual nuget package stuff?\nI need a fully featured nuget package configuration.\n. Can you please let me know where the repository for Microsoft.Extensions.* are?\n. I'm pretty certain it's related to this announcement https://github.com/aspnet/Announcements/issues/113\nIs there some example to look at?\n. Looks related to this post too https://github.com/aspnet/dnx/issues/2990\n. Figuring it out as we speak.\nHad to change Startup constructor to\n```\n    public Startup(IHostingEnvironment env, Microsoft.Extensions.PlatformAbstractions.IApplicationEnvironment appEnv)\n\n```\nOr you can use the static implementation\n```\n        var app_environment = Microsoft.Extensions.PlatformAbstractions.PlatformServices.Default.Application;\n\n```\nI think that fixes the issue.\n. I have a number of custom tasks.\nOne of them is supposed to automate versioning prebuild, but it no longer works with the new project.json files.  \nAnother after build copies the nugget packages to a local share so our internal NuGet Package server has access to it.\nAnother aftercleanup does additional cleaning.\nAt some point I'll add DNX commands to the list.\nQuestion - If the AssemblyInfo file is used instead of project.json does this mean that NuGet package that is published will use it instead of the project.json?  I suspect it doesn't which means I would need to update version information in two places in the future.\n. Looks like there is an inconsistency in how configuration is setup and used.  If you disable something in your user profile it will disable the same named value in your local configuration copy.\n. ",
    "anurse": "You can always use dnu build to compile assemblies and then use the traditional nuget pack command.\n. I prefer putting the destination on the left, and I'd like to see if we can get globbing in there. We'll be talking about this in the design meeting today.\n. Initial design notes. We're going to iterate on it tomorrow. /cc @davidfowl \njson\n{\n    \"packageFiles\": {\n        \"dest\": \"src\"\n    }\n}\nI think that the \"source\" file specifier needs to be able to be an array. Basically, if the thing on the right ends up evaluating to multiple file names, the thing on the left is a folder. Otherwise, the thing on the left is a file and must have the full name of the file. Because the body of this property is a JSON dictionary, we are restricted to only having one entry per destination.\njson\n{\n    \"packageFiles\": {\n        \"test\": [\"a.txt\", \"b.txt\"],\n        \"README.md\": \"docs/README.md\"\n    }\n}\n. Additional design notes: \n- We want the project to be able to fully behave like a package, so any files specified in this section should be available when referencing the project. For example, if a native binary is specified using this property, that binary should be placed in the correct lock-file section.\n. It'd be good if kpm could let you use kvm aliases. For example:\n```\n\nkpm pack --runtime default\n``\n. I need some context on this. @lodejard, can you fill me in? I hear you have codez to do this more betterer.\n. This will likely be part of dev-dependencies work in the New Runtime.\n. At the moment, theKRE_SERVICING` variable is the first test, I assume we still want to keep that?\n. Also, it seems Environment.GetFolderPath is not available on CoreCLR ... :crying_cat_face: \n. Chatted with Levi. We should sync up with CoreCLR folks on getting GetFolderPath, but for beta3:\n- Check %PROGRAMFILES(X86)%\n- Then %PROGRAMFILES%\n- Then %HOME%\n. And once again, we decided it was weird to ever check %HOME% since we have %KRE_SERVICING%\n- Check %KRE_SERVICING%\n- Check %PROGRAMFILES(X86)%\n- Then %PROGRAMFILES%\n. Yep, can do.\n. Totally, good call.\n. this was merged, and includes @davidfowl 's suggestion\n. /cc @GrabYourPitchforks\n. this was merged into dev\n. Looking ok to me :shipit:\n. :shipit: \n\nI'd have signed off even faster but I wanted to sanity check it was just that simple! Nice! :sparkles: \n. It just copies \"*.sh\" and then strips the \".sh\". I checked :). Running a build locally to be sure. Won't merge until I've confirmed there.\n. Cool, thanks. I was just about to do that :)\n. I'm not seeing an exception (at least not any more), when I do the following\njson\n{\n    \"frameworks\": {\n        \"dnx451\": {\n            \"bin\": {\n                \"assembly\": \"[path/to/dll]\",\n                \"pdb\": \"[path/to/pdb]\"\n            }\n        }\n    }\n}\nNote that unlike the original example, the bin property actually has to be a peer to dependencies, not a child node.\nI'm going to close this since it looks like it has been fixed or isn't reproducible any more. Feel free to re-open if you're still encountering this issue!\n. Closing this since a fairly significant update is coming based on discussions with @davidfowl. Details in an upcoming PR\n. (But all the formatting and package version number related feedback has been integrated into that change)\n. :+1: DO WANT!\n:shipit: with mono host code. I usually use something like this when doing the same thing in Managed code: https://github.com/NuGet/NuGet.Operations/blob/master/src/NuCmd/Program.cs#L38\n. /cc @emgarten for his info. This is mostly K Runtime stuff but this is how we would represent a Package OR Project with dependencies on other Packages OR Projects, so it is a \"NuGet\" concept (basically an abstraction over top of \"versioned things that can have dependencies on ranges of other versioned things\")\n. /cc @lodejard Thoughts on the naming change?\n. I made Library and LibraryIdentity immutible. I realize we may need to be able to modify the Library (to set Resolved, etc.) but for now it's not needed. We can add it then.\n. Also made LibraryDependency kinda immutable. Guh, and apparently I can't spell immutAble :).\n. Pulling this for now. Changes to internalization make it less relevant; there will be some dramatic changes soon.\n. Or maybe put the string in the exception Message itself?\n. :shipit: with minor comments.\n. :shipit:\n. Of course :). The .gitmodules file should merge fine, but if it doesn't the conflict should be extremely easy to fix :P\n. /cc @davidfowl @ChengTian \n. As per discussion with @davidfowl, I re-merged the interfaces. The new runtime will share interfaces with the old, but eventually the old one will go away. We just have to be sure to not use old interfaces in the new runtime :). (He also gave me an in-person :shipit: after that change)\n. /cc @ChengTian @davidfowl \n. /cc @troydai @davidfowl @ChengTian \n. Fair enough, just wanted to throw it out there :). I've already had problems with forgetting git submodule update so I was concerned about others encountering the same thing.\n. /cc @davidfowl @ChengTian \n. Dupe of #848 \n. Ping. Review feedback addressed (I think :))\n. Confirmed with dotTrace that when KRE_TRACE is off, perf is unaffected. Logging methods are not visible in Sampling and when Tracing they show as taking \"0ms\" (which I interpret as: <1ms with rounding :))\n. Looks good to me. :shipit: with some tests\n. Wrote 'em in VIM not VS :P. I'll fix them\n. I'll do a separate pass to copyrightify the code in our repo after merging. I'm not going to do the NuGet ones yet, because I'm not 100% positive on the situation there.\n. Looks good aside from my minor notes. I say :shipit: ASAP and let's find out what breaks :)\n. core50 and dnx46 are coming later, since they aren't part of the renames, they are new features.\n. I think this is as close as I'm going to get it right now. We may as well start pulling it in to dev and see what breaks so we can fix it up. There are some formatting and other minor issues to adjust but nothing that should affect the build. I'll be back online this afternoon.\n. I thought I had the mono fix, but it seems I wasn't quite right :). I'll file issues for the other things now\n. #1342 - New TFMs (dnx46 and core50)\n. This will be in the new runtime. I assume @davidfowl will be too busy to implement it now :)\n. This is actually already done in the new runtime!\n. No longer relevant now that we're not using them as aliases to each other.\n. Actually this is useful for keeping the makefile.shade clean because it just scans all folders under src for bin\\*\\dnx451\\** and bin\\*\\dnxcore50\\** (excluding some files). There's no problem here really, especially since we only ever build the Windows CoreCLR variant on Windows.\nPropose wontfix /cc @muratg @moozzyk \n. Looks good :shipit:\n. Git didn't like the vcxproj changes so I added some comments calling out the changes.\n. Shelving this. There are some issues with the 'def' file and this is mostly cosmetic right now. I'm going to return to it when I do some native bootstrapper changes to support better servicing of DNX runtimes.\n. Will do, but only after @NTaylorMullen re-opens the dev branch :P\n. I've done some initial investigation. We are definitely passing the full path for the desired PDB to Roslyn. However, the generated DLL has a relative path in the Debug Directory. I verified that using Roslyn's csc.exe, the absolute path to the PDB is embedded in the Debug Directory, but I can't figure out where we're going wrong in passing the right data to Roslyn.\nThat's about all the investigation I've been able to do so far, I have to go back to some other higher-pri things right now.\n. Opening a new PR.\n. What about splitting up a bit:\n- DNX - 'dnx' TFM, regardless of CLR\n- CORECLR - CoreCLR TFM, regardless of DNX (i.e. core50 and dnxcore50)\nThen you can compose the necessary conditions yourself:\nDNX && CORECLR ==> 'dnxcore50'\nDNX && !CORECLR ==> 'dnx4x'\n!DNX && CORECLR ==> 'core50' but NOT 'dnxcore50'\nCORECLR ==> 'dnxcore50' OR 'core50'\netc...\n. My thought was that dnx.exe would have the following syntax:\ndnx <Host Options> [Command] <App Args...>\nPossible \"Host Options\" include:\n- --debug - Wait for a debugger to attach\n- --lib <path> - Add a search path for assemblies\n- --appbase|-p <path> - Change the base path for the application (defaults to .)\nThe first argument that doesn't start with - indicates the immediate end to Host Options. Everything from the first non-- argument on is passed along to AppHost.\nWhen DNX starts up, it uses the --appbase value (which defaults to .) as the base path and boots AppHost in that directory, the rest of the arguments go to that. So if you are in a project.json directory, you can just dnx run and everything is :sunny: :sparkles: :smile:.\nThere is a small exception, which is that if [Command] resolves to a real physical file on disk (a DLL or EXE, for example), that file is treated as a complete application. This lets you do dnx MyApp.exe (similar to mono MyApp.exe).\nIf you want to run commands from another project, you just do dnx -p path/to/project run. It's a few extra characters than it is today (-p) but since that's the secondary case, I think that's OK.\n. We may be OK from the tooling perspective. Last I heard the tooling was always specifying --appbase which would continue to work even if we took the break-the-world approach. /cc @BillHiebert @PradeepKadubandi \n. Of course we should verify this :)\n. I'm not actually working on the dnx native code right now, so feel free to push that change @BrennanConroy\n. /cc @davidfowl @ChengTian \n. This is separate from self-update, but we should add a catch and just do nothing. Self-update is also a good idea, but a separate feature :).\n. That makes the experience inconsistent when using batch/shell scripts like \"kpm\". If I run: kpm --debug restore, and the AppHost is the one responsible for removing the arg, it doesn't work:\n1. DNX.exe waits for the debugger\n2. AppHost gets \"dnx --appbase ... Microsoft.Framework.ApplicationHost Microsoft.Framework.PackageManager --debug restore\"\n3. AppHost doesn't see the \"--debug\" arg so it flows through to KPM, which has to know about it.\nIF we're going to support --debug anywhere (which the current code does), then the native code has to strip it. The alternative would be to only support --debug prior to the actual command (which means kpm --debug restore would NOT trigger the debug behavior unless kpm ALSO has a debug switch of it's own that does it's own wait-for-debugger logic)\n. To be completely like --appbase, we also need to change the way the --debug flag is detected and acted on in native code. Right now, if --debug appears ANYWHERE in the command line, we wait for the debugger, but we'll only strip it out if it appears BEFORE the project.json path (because AppHost strips it out).\nWe should change the native code to only support the --debug switch before the project.json path. Individual KDNX apps are responsible for setting up their own debug hook if they want it (i.e. kpm --debug would be handled in kpm)\n. Looks good now :). :shipit:\n. Dupe of https://github.com/aspnet/dnvm/issues/174\n. Well, maybe not a dupe, but I've got a fix for the other one anyway. This was a regression in dnvm from kvm, so it's probably good to fix.\n. Can't do a line level comment for this apparently:\nFrameworkDefinitions.TryPopulateFrameworkFastPath -> FrameworkDefinitions.TryPopulateKnownFramework\n. Also, should we be doing the Path.Combine during this populate or just storing the relative path and Path.Combining when we need them? That's a lot of string manipulation for a bunch of assemblies that aren't often loaded...\n. :shipit: with comments. Can't we just defer the Path.Combine? We only need it at final load time don't we?\n. :+1: totally on board here :)\n. Bit of a hack, but it should work for now. :shipit:\n. I'll update the submodules shortly. That should improve the experience a little.\n. It absolutely should be. I just hadn't gotten to integrating Servicing into the new runtime yet.\n. New runtime has been merged away :)\n. Ditto IProjectFilesCollection\n. This is covered in #2225 \n. Something I noticed: If you happen to have two DNXes on your path \"New;Old\", where Old is one with k.cmd and New is one without it and you accidentally run k, you will get the old runtime (whereas running dnx gives you the newer one). Not a bug or something technical to correct, just something to put in release notes or other docs.\n. I'd rather avoid giving arbitrary project.json data from the runtime to the application. It means the runtime has to provide some kind of interface to this arbitrary data, which means we end up with gross things like IDictionary<string, object> where the type of \"object\" is mostly arbitrary, or grosser things like IProjectConfigurationPropertyElementProvider\nHere's my personal preference, @davidfowl can comment with his thoughts.\n1. The Runtime parses what it understands out of project.json and provides it through structured POCOs/Interfaces with NO arbitrary property access.\n2. We provide a \"Project Parsing\" library that participates in Dependency Resolution like normal, and apps can take a dependency on that. This will reparse the project, but can cache it and allow more arbitrary access to the project since we can version it easier. For sake of argument call it Microsoft.ProjectModel (literally not even my proposed name, just a name for now)\nAs a result, if you want well-known project stuff, you don't reparse the project. If you want to read things like \"secretId\" or other arbitrary things, you parse the project a second time and it can be cached inside this parser component.\nIf @davidfowl is still concerned about the perf of this scenario, I can accept something more flexible in the runtime interface. I want to keep the runtime->application interface as tight as possible since it versions in a different (and less flexible) way. Adding a large surface area like extracting arbitrary project properties is kinda scary for that.\nI would be OK with exposing the entire project.json text to the application so it doesn't have to re-load it from disk...\n. I'm going to put ICompilationProject in, because I need to get compilation beyond the \"coming soon\" mark ASAP. But I agree on that and we can resolve it via #1475 \n. :+1:\n. stand by for rebased copy (which will also have PR feedback address), until then, disregard intermediate changes to this PR :)\n. ready for another iteration! @davidfowl \n. Looks pretty good so far. A few comments. I'll rebase my PR on it, it shouldn't be too bad. I expect that ResourceDescriptor will move to Runtime.Interfaces in my PR so that Roslyn can use it, or I may introduce an interface. Either way, it shouldn't be a major impact and I'll handle it in my PR.\n. Can we get this in soon? @davidfowl are you good with it now?\n. It does look like we need to adjust that. Can I ask that we try to get this PR in ASAP and maybe file a bug for immediate follow-up for that issue? Is the base functionality broken or are we just talking about fixing a specific scenario?\nThe compilation refactor is really itching to be pushed (so I can get new runtime compilation going and all that fun stuff) and it's a non-trivial rebase. \nI don't want to do that rebasing if this PR is going to be rebased (making me rerebase and thus reresad).\n. :+1: Thanks much!\n. System.Diagnostics.Tracing is ETW stuff, I don't see any reference to it in Logging, so I'm not sure how it would have arrived from that. I'll do some spelunking.\n. @davidfowl I don't see System.Diagnostics.Tracing anywhere, not sure how it would end up in the TPA in this PR. It's not appearing in the TPA in my local dev build.\n. :+1: I noticed how much was in the runtime and was a bit surprised.\n. :shipit:\n. Fixed by @pranavkm - He uploaded the correct version of HttpClient.\n. @victorhurdugaci can you verify now and close?\n. We'll need to create a dnx-release branch in the NuGet submodules and make the change there. The release branch on the NuGet repos are completely different from the code we're trying to build.\nIdeally, we should try to remove the new runtime from beta4 entirely...\n. The NuGet ones actually aren't interfering so I won't change them in this fix. I will request a separate beta4 fix to remove the new runtime build from the release branch\n. Ignore the top commit, it's just some of #1521 bleeding in, I'll reconcile that all when I merge it in.\n. I probably should have searched before creating those issues :). Thanks for catching the dupe.\n. I think it should. We should ensure we set the minClientVersion appropriately. We'll need similar code to what NuGet has to determine the appropriate version. This can happen in RC though.\n. dnu optimize ? Eventually, it could even take parameters such as allowing me to \"optimize\" specific packages/apps/runtimes/whatever.\nI, as a user, have no idea what a crossgen is... but regardless, people don't generally run this command manually so I'm not very worried either way.\n. aye, and it strong named all the things\n. I'll merge it after the fancy new PR CI builds pass\n. Not sure why the travis build failed... seems to be related to Mono build issues in globbing tests. AppVeyor seems to be stuck in a long queue so if my local build verify works I'm gonna yolo push it and babysit the internal CI :)\n. #1597 \n. Not sure why travis failed... it seems very unrelated. Trying again\n. > We should just use one alias or ideally - switch to STL and not use them at all. \n:+1: :+1: :+1:\n. AppHost(2) are part of DNX and are not serviceable via package servicing, so they don't need the serviceable attribute. I don't see why it would be a problem for them to have it though, so meh.\n. :shipit:\n. I don't think this is going to happen fully for 1.0. @davidfowl is doing some refactoring to reduce (or even remove?) the dependency on forked NuGet code in the runtime though, making it much easier for us to unify the actual code post 1.0.\nThoughts on closure @davidfowl @Eilon @DamianEdwards ?\n. Looks good but I'll let other more experience C++ folks give a squirrel :)\n. Looks pretty good to me. I'm not as confident I understand the existing code well enough to give a squirrel though :).\n. The problem is that DNX can't find the packages folder. Normally, it looks like ~/.dnx/packages, but it looks like the HOME environment variable is empty in your init.d context, so the Path.Combine call it does has a null argument.\nThe easy solution is to find a place to put your packages, and set the DNX_PACKAGES environment variable during your init script. If you want, you can just point it at /home/[username]/.dnx/packages. Wherever you put it, you need to make sure the packages have actually been installed there, by running DNX_PACKAGES=[your package dir] dnu restore in the app directory to ensure the packages are properly installed.\nEven better would be to use dnu publish to pack the entire app up in a single self-contained folder. The result will be a folder containing ALL NuGet packages needed by the app, and the application itself. You can also use the --no-source switch to precompile your app and the --runtime switch to include a runtime in the published application so it is entirely stand-alone (though it will still need Mono installed). See dnu help publish for more help there.\nHope that helps!\n. @jsinh When you did dnu publish, did you try using the --runtime argument to embed a runtime in your application package? That might help with deployment. It should be possible to build a single folder that contains everything you need to run your DNX application (including the runtime) using dnu publish. If there are issues with that, we should fix them :).\n. It shouldn't be too hard, but to do it right we'll want a CI that has the frameworks installed so we can test it\n. Yep. I'm closing this since it's pretty out of date now.\n. Is it not possible to detect what we need from Nano Server via feature detection? If not, then fair enough, this makes some sense to have, but I'm extremely wary of trying to do SKU detection :).\n. I have no idea ;). I believe it is always parsed and converted to ConsoleColor (meaning it's weirdly round-tripped on nix), but if you want to adjust AnsiConsole to pass the escape sequence through on nix, I'd be happy to see that ;)\n. Ooh, cool. I hadn't seen that PR. Yeah, we should update the Windows parsing then.\n. What's the result here? Are we changing the logic to ensure a true fallback order in both places? I'd want to sync this up with NuGet work (cc @yishaigalatzer) before we make this change. They don't have to be perfectly in sync, but they should be pretty close...\n. Ok, so is this the new desired behavior? If so, DNU needs to be updated to get in sync with it.\n. I haven't gotten a clear answer yet, we need to push this to beta7 /cc @muratg \n. This is not going to be able to happen without either a) consuming NuGet.Configuration or b) significant changes to our copy of the config code. I don't think it can make beta7 so I'm punting to beta8 (cc @Eilon) \n. This is not going to happen in beta8. It's pushing it a bit to pull it to RC1, but we're blocked on a NuGet bug (#1427) and there is debate over whether we should do it. /cc @muratg @davidfowl \n. I don't think not doing it is really a good option. Our behavior should be in sync with NuGet.\n. Suggestion:\nMicrosoft.Framework.Runtime -> Microsoft.Dnx.Runtime.Hosting\n. Microsoft.Dnx.Utility? ... We should consider creating a naming pattern for global commands. Microsoft.Dnx.Utility and Microsoft.DotNetUtility end up sounding a lot like class libraries...\n. I like those. Tools/Tooling imply something that the user runs rather than code they can reference.\n. :+1: I'm good with all the names we've seen so far. After edits in comments, I think we're at this list (not final, just updating everything based on the thread so far):\nRenames/Merges:\n- (dnx.host + dnx.clr.managed + dnx.coreclr.managed) -> Microsoft.Dnx.Host\n- dnx.mono.managed -> dnx.mono.managed (as discussed above, we need to keep that separate)\n- Microsoft.Framework.ApplicationHost -> Microsoft.Dnx.ApplicationHost\n- Microsoft.Framework.DesignTimeHost -> Microsoft.Dnx.DesignTimeHost\n- Microsoft.Framework.DesignTimeHost.Abstractions -> Microsoft.Dnx.DesignTimeHost.Abstractions\n- Microsoft.Framework.Runtime -> Microsoft.Dnx.Runtime\n- Microsoft.Framework.Runtime.Abstractions -> Microsoft.Dnx.Abstractions\n- Microsoft.Framework.Runtime.Caching -> Microsoft.Dnx.Compilation.Caching\n- Microsoft.Framework.Runtime.Loader -> Microsoft.Dnx.Loader\nCompilation:\n- Microsoft.Framework.Runtime.Roslyn -> Microsoft.Dnx.Compilation.CSharp\n- Microsoft.Framework.Runtime.Roslyn.Abstractions -> Microsoft.Dnx.Compilation.CSharp.Abstractions\n- Microsoft.Framework.Runtime.Compilation -> Microsoft.Dnx.Compilation\n- Microsoft.Framework.Runtime.Compilation.DesignTime -> Microsoft.Dnx.Compilation.DesignTime\nPackage Manager:\n- Microsoft.Framework.PackageManager -> Microsoft.Dnx.Tooling Microsoft.Framework.PackageManager??\n- Keep dnx-crossgen around as an internal tool. Make Microsoft.Framework.Project a separate global tool.\nI wonder if the following might be appropriate? Not a major thing, just a vague thought. Common names in namespaces stand out to me as options for parent namespaces :)\n- Microsoft.Framework.ApplicationHost -> Microsoft.Dnx.Hosting.Application\n- Microsoft.Framework.DesignTimeHost -> Microsoft.Dnx.Hosting.DesignTime\n- Microsoft.Framework.DesignTimeHost.Abstractions -> Microsoft.Dnx.Hosting.DesignTime.Abstractions\n. I'm fine with all that. I'll update my comment.\n. Ok, how about this:\n- dnx.clr.managed -> Microsoft.Dnx.DomainManager\n- dnx.coreclr.managed + dnx.host -> Microsoft.Dnx.Host\n/cc @victorhurdugaci \n. Ok, how about a straight name change for now then. The exact structure of this is completely uninteresting to users so we should do whatever makes it easier for us to develop/service/etc. :)\n- dnx.clr.managed -> Microsoft.Dnx.Host.Clr\n- dnx.coreclr.managed -> Microsoft.Dnx.Host.CoreClr\n- dnx.host -> Microsoft.Dnx.Host\n. Sure. I did notice that even though there is a class called DomainManager in dnx.coreclr.managed.dll, it is not actually an AppDomain Manager, it is just a static class to hold an entry point. I still kinda feel like it could be merged in to the CoreCLR version of dnx.host. CLR is a different story because, for servicing purposes, we need a separate assembly.\nRegardless, these are completely internal assemblies so renaming/refactoring them again will not break customers and we can revisit it later.\n@victorhurdugaci - are you caught up on these changes? Let's go with @moozzyk 's final suggestion for now:\n- dnx.clr.managed -> Microsoft.Dnx.DomainManager.Clr\n- dnx.coreclr.managed -> Microsoft.Dnx.DomainManager.CoreClr\n- dnx.host -> Microsoft.Dnx.Host\n- No merging of assemblies\n. The ones @moozzyk and I are discussing will have no tooling impact. I think we're all happy with the names for the assemblies that do have tooling impact.\n. Oof. We should reconcile those names. Use Caching as the name since it looks like it only contains Caching stuff.\n. I think we can do this. It's just a matter of expanding our set of known frameworks and reference assembly folders. I'll leave it to @muratg to schedule, but we can try to do it in beta7. It may not make it, but I think it'll be fairly straightforward so I'm OK trying to take it on for b7.\n. +@Eilon (as @muratg is on vacation)\n. We should be able to do this for beta8, it should just be a matter of searching the correct GAC paths. If it turns out to be more work, I'll circle back to this thread for an update.\n. It should be on the aspnetvnext feed now, just dnvm upgrade -u (make sure your NuGet.config also points to https://www.myget.org/F/aspnetvnext/api/v2 and you have the latest beta8 builds of any DNX packages, if you reference them)\n. That's a valid issue. Is it blocking your scenario? I would assume that if it is supposed to fail you can unblock yourself by just not referencing it :). Can you file an issue about it? The problem is that we're resolving out of the GAC as well as the Framework Reference Assemblies and aren't checking the GAC reference to see if it is compatible.\n. FYI, a redirect is fine, it just needs to be https -> https. Right now it's https -> http.\n. The MSBuild integration we're working on could benefit from having the unresolved dependencies called out in the lock file. I agree that we should ensure the lock file is written in a state that makes it very clear to tools that the restore has failed, but having the metadata about what failed in a persistent form can be very useful for error display in the IDE, among other things.\n. I'm going to move it up to net46 for now, since we don't have support for net451 now. We can pull it down later. This is only a temporary state until NuGet3 comes online anyway :).\n. I'll also check if dnx46 works. Thus making this PR handle all of #1342 \n. Added dnx46. @davidfowl can you sanity check my Mono stuff? As far as I can tell, Mono doesn't currently support \"4.6\" (since it's not released), but when it does come online, this should work. Alternatively I could just yank it until it's supported on Mono. (or redirect it to 4.5.1?)\n. Never mind, I'm just going to yank the Mono support since... well, it isn't supported :).\n. Waiting for squirrel :)\n. after some discussion this morning, @davidfowl, @lodejard and I decided it would probably be better if the short name was closer to the long name. Since portable is already taken up by a completely separate parsing algorithm, we're trying netportable50\n. Small unit test issues. Fixed and build verifying now. Will push when done.\n. Also the framework name selected using the --framework switch specified in #2333. Right now I'm going to be repurposing the DNX_FRAMEWORK environment variable to do this.\nThis one might be tricky since it needs to get to the DomainManager. Possibly a P/Invoke callback could be used?\n. Compilation is big when there is stuff to compile, but when publishing --no-source we need to ensure we have fast start-up time.\n. I think we'll find DefaultHost (and friends) makes up a much bigger fraction of that scenario ;)\n. Cleaned up.\n/cc @davidfowl @troydai @muratg \n. Some unit tests broke, I'm fixing those.\n. We're doing this differently.\n. It's part of the new PR. It should be in release.\n. Looks good! Small nits and one minor suggestion to use type instead of whereis. Other than that, :shipit:\n. Travis failure seems to be unrelated\n. Good question, I'll double check but it should be DOTNET since I think we take the short name nuget gives us.\n. To answer your question @bricelam , it will be whatever you typed in \"frameworks\", but uppercase. So if you typed \"dotnet00\" it would be DOTNET00. This is true for any framework.\n. Guh, I don't even remember what it was for... @davidfowl ?\n. I just remembered why we need it :). I'll rebase it and use it to implement the compatibility matrix stuff we need to do as well.\n. Actually, we already have it in release. I'm just so turned around by all this :)\n. It looks like you are correct.\nIf anyone still has this issue, feel free to continue commenting or re-open this issue.\n. win81 is the correct normalized short-form name for .NETCore, Version=v4.5.1... The tooling should be using long-form names everywhere since they are unambiguous.\n. It sounds like you didn't get all the submodules. Try running git submodule update --init from the root of your clone of the aspnet/dnx repo.\n. Ok, CIs are passing. Ping @davidfowl @troydai \n. This is in, the branch is just out of date\n. Shouldn't the native bootstrapper just pass this data in and the managed code just read it rather than trying to redetect it? The bootstrapper is unique per architecture and OS (and there's a bootstrapper for Mono too).\n. :shipit: \n. This is expected because you haven't given enough arguments to actually execute DNX. You'd need to specify a directory and command still, i.e. dnx --watch . run.\nSome of this might be better with #1403 and we should probably print an error message as well as dumping the help content.\n. 1.0.0-beta5-12101 should have the fix when it arrives in the release feed. The DNX build succeeded but our Coherence build failed so we don't have a signed build yet.\n. Closed as this should require no more specific action (fix is in, just waiting for build to clear up)\n. I think the failures are due to the purging of the release feed. Running local verify build.\n. Yeah, this will probably come easiest when we pull some of the NuGet3 code into DNU\n. Dupe of #1150 \n. This should be fixed in DNX versions higher than 1.0.0-beta7-12276 (not currently released to the aspnetvnext feed but coming soon)\n. No, they work in the upcoming fixed version.\n. :shipit:, though I do wonder if this is a place for globbing in the future. Might be too slow though, and I'd rather it be fast than be globbed :P\n. Ping @davidfowl \n. In my mind, the main motivation is to make it easier to conditionally compile code for Mono. This would allow packages to, in theory, provide a more appropriate implementation of their assembly on Mono (in case of differences between the Mono BCL and the .NET BCL, among other things).\nIf we did this, it would be compatible with the regular dnx framework applicable to the Mono version, so say dnxmono40 might be compatible with dnx451 (just spitballing, we'd need to work out the exact version mappings). This means that existing packages would work fine with a dnxmono project.\nThis is definitely and area where we want feedback from the Mono community though!\n. @davidfowl @lodejard we need to decide a) if we need/want to do this and b) how we're going to do it in beta8 or there won't be time to react to user feedback for RC.\n. That's what I thought.\n. Ping @davidfowl - Thoughts on launching this? I'm thinking it's a switch on DNX of some kind...\n. dnx --framework dnx46 . run\nIdeally we'd parse project.json, but I don't know that we have our JSON parser available at this point... Might have to wait for native JSON parsing\n. Correction, I synced up with @davidfowl : We DO want to move the JSON parser down to this level if feasible.\n. Ok, but sources aligns with nuget so we might need to consider all the options...\n. I'm not sure I like source for the command you're building, it collides with the concept of package sources. I would propose something more like dnu clone for that command. It seems clearer what it does and frees this up.\nI'm definitely open to renaming this though if people think that would be less confusing. We could do something like dnu list-sources (which does start to bring up potential collision with dnu list)\n. I'm going to rename this to list-sources for now to unblock. I'll also go through the CI failures and remaining code review feedback.\n. Ping @troydai @BrennanConroy @victorhurdugaci - Updated to resolve feedback.\n. Ping @victorhurdugaci again :)\n. I can't figure out what's wrong with the PR builds. I'm going to give a private TeamCity build a quick shot but if I can't work that out, just YOLO push and be prepared to revert :).\n. Given that NuGet does the same thing though, we need to coordinate the fix with them /cc @yishaigalatzer \nBoth should definitely be showing a warning at the very least when an invalid settings file is encountered.\n. It would be interesting to see if they could be plugins and use the dnu commands model. Definitely something to play with.\n. For this purpose, I believe we are just trying to identify if a command exists, so going for the broadest compatibility is desired over going for a broad feature set.\n. Good point, it is a shell builtin on my Mac OS X system. It is part of the POSIX spec, so any sh-derivative should have it. In theory, we could launch sh to run type but that may overcomplicating things when whereis is generally available on most systems. We should have code to handle the failure case of whereis being missing though :)\n. I wonder if, rather than checking for the command in advance, we could just optimistically invoke the command and catch the exception that occurs when it fails. I don't generally like exceptions-as-control-flow but in this case it actually seems cleaner, given that our whereis check may also cause exceptions.\n. /cc @davidfowl @ChengTian @lodejard \n. Looks like Helios creates the AppDomain, so it uses the value from the web.config to set the target framework. I'll look in to updating dnu publish to set the right values\n. But in that case I think we'd be OK with falling back to .NET 4.5.1. Thoughts @davidfowl ?\n. Are we going to make 4.5.2 the min-bar? @davidfowl @DamianEdwards @Eilon ? I don't really want to fall back to a framework that we haven't published as a minimum requirement. I'm totally game if we want to make it the minimum though. Last I heard the reason 4.5.1 was chosen is because Azure Web Sites doesn't have 4.5.2 yet.\n. Ok, until further instruction I shall use 4.5.1 as the default when we can't find a framework name in the frameworks section :)\n. Thanks @borgdylan ! We're actually considering introducing a new TFM for mono #2118 that matches up with Mono versions (i.e. dnxmono401, etc.). It would be compatible with the appropriate version of the desktop DNX TFM (dnxmono401 -> dnx451, etc.). Hopefully that system will be in place soon enough that we can use that to support Mono versions compatible with 4.6. Feel free to put any comments you have on that plan in that bug.\nUntil then, let us know when you feel Mono has reached a point where we can start reporting it as dnx46 :). We'd probably want to wait until Mono has fairly high compatibility.\n. Sounds good. When that's all settled out we'd be happy to look at adjusting how we report Mono. Would you be willing to file an issue in this repo with a proposal when things are a little more stable?\n. Builds are passing now. Ping @davidfowl for sign-off\n. There's no way to throw a good error there since we are inside InitializeNewDomain which is called by the runtime. Any exception thrown just prints Failed to initalize runtime (80131501) to the screen. Failing back to the default framework version in the case of an exception seems better because someone else will soon encounter the same error and it is displayed to the user. For example, this is the tracing when we don't throw an error here (note DNX_TRACE was on, but the last exception message would have appeared regardless)\nThe servicing index file at: C:\\Program Files (x86)\\Microsoft DNX\\Servicing\\index.txt does not exist or could not be opened.\nLoaded module: dnx.clr.dll\nFound export: CallApplicationMain\nError: [DomainManager] Error reading project.json Microsoft.Framework.Runtime.Json.JsonDeserializerException: Illegal character 'a' (Unicode hexadecimal 0061).\n   at Microsoft.Framework.Runtime.Json.JsonBuffer.Read() in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\Json\\JsonBuffer.cs:line 103\n   at Microsoft.Framework.Runtime.Json.JsonDeserializer.Deserialize(TextReader reader) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\Json\\JsonDeserializer.cs:line 21\n   at DomainManager.DetermineDnxVersion(String applicationBase) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\dnx.clr.managed\\DomainManager.cs:line 89\nInformation: [DomainManager] Using Desktop CLR v4.5.1\nInformation: [Bootstrapper] Runtime Framework: DNX,Version=v4.5.1\nC:\\Users\\anurse\\Code\\aspnet\\dnx\\misc\\XreTestApps\\project.json(1,1): Error: Microsoft.Framework.Runtime.FileFormatException: Illegal character 'a' (Unicode hexadecimal 0061). ---> Microsoft.Framework.Runtime.Json.JsonDeserializerException: Illegal character 'a' (Unicode hexadecimal 0061).\n   at Microsoft.Framework.Runtime.Json.JsonBuffer.Read() in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\Json\\JsonBuffer.cs:line 103\n   at Microsoft.Framework.Runtime.Json.JsonDeserializer.Deserialize(TextReader reader) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\Json\\JsonDeserializer.cs:line 21\n   at Microsoft.Framework.Runtime.Project.GetProjectFromStream(Stream stream, String projectName, String projectPath, ICollection`1 diagnostics) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\Project.cs:line 174\n   at Microsoft.Framework.Runtime.Project.TryGetProject(String path, Project& project, ICollection`1 diagnostics) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\Project.cs:line 149\n   --- End of inner exception stack trace ---\n   at Microsoft.Framework.Runtime.Project.TryGetProject(String path, Project& project, ICollection`1 diagnostics) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\Project.cs:line 154\n   at Microsoft.Framework.Runtime.ProjectResolver.ProjectInformation.<get_Project>b__12_0() in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\ProjectResolver.cs:line 126\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\n   at System.Threading.LazyInitializer.EnsureInitialized[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\n   at Microsoft.Framework.Runtime.ProjectResolver.ProjectInformation.get_Project() in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\ProjectResolver.cs:line 123\n   at Microsoft.Framework.Runtime.ProjectResolver.<>c.<TryResolveProject>b__6_0(ProjectInformation p) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\ProjectResolver.cs:line 47\n   at System.Linq.Enumerable.WhereEnumerableIterator`1.MoveNext()\n   at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source)\n   at Microsoft.Framework.Runtime.ProjectResolver.TryResolveProject(String name, Project& project) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\ProjectResolver.cs:line 48\n   at Microsoft.Framework.Runtime.ApplicationHostContext..ctor(IServiceProvider serviceProvider, String projectDirectory, String packagesDirectory, String configuration, FrameworkName targetFramework, ICache cache, ICacheContextAccessor cacheContextAccessor, INamedCacheDependencyProvider namedCacheDependencyProvider, IAssemblyLoadContextFactory loadContextFactory, Boolean skipLockFileValidation) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\ApplicationHostContext.cs:line 50\n   at Microsoft.Framework.Runtime.DefaultHost.Initialize(DefaultHostOptions options, IServiceProvider hostServices) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\DefaultHost.cs:line 142\n   at Microsoft.Framework.Runtime.DefaultHost..ctor(DefaultHostOptions options, IServiceProvider hostServices) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\DefaultHost.cs:line 38\n   at Microsoft.Framework.ApplicationHost.Program.Main(String[] args) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.ApplicationHost\\Program.cs:line 42\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime.Sources\\Impl\\EntryPointExecutor.cs:line 43\n   at dnx.host.Bootstrapper.RunAsync(List`1 args, IRuntimeEnvironment env, FrameworkName targetFramework) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\dnx.host\\Bootstrapper.cs:line 93\n   at dnx.host.RuntimeBootstrapper.ExecuteAsync(String[] args, FrameworkName targetFramework) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\dnx.host\\RuntimeBootstrapper.cs:line 144\n   at dnx.host.RuntimeBootstrapper.Execute(String[] args, FrameworkName targetFramework) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\dnx.host\\RuntimeBootstrapper.cs:line 26\nMicrosoft.Framework.Runtime.Json.JsonDeserializerException: Illegal character 'a' (Unicode hexadecimal 0061).\n   at Microsoft.Framework.Runtime.Json.JsonBuffer.Read() in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\Json\\JsonBuffer.cs:line 103\n   at Microsoft.Framework.Runtime.Json.JsonDeserializer.Deserialize(TextReader reader) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\Json\\JsonDeserializer.cs:line 21\n   at Microsoft.Framework.Runtime.Project.GetProjectFromStream(Stream stream, String projectName, String projectPath, ICollection`1 diagnostics) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\Project.cs:line 174\n   at Microsoft.Framework.Runtime.Project.TryGetProject(String path, Project& project, ICollection`1 diagnostics) in C:\\Users\\anurse\\Code\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\Project.cs:line 149\n. Adding 4.5.2 support, preserving web.config and fixing DNX-Linux build break.\n. :shipit:\n. This went in to dev\n. Looks good to me, but as discussed in comments, we should get some really good tests :).\nI think some unit tests for just this compatibility logic would be useful. The unit tests can just construct the Lock File objects manually and test compatibility. We should try to cover all the possible scenarios as much as possible.\n. I really don't know, it seems unrelated but it repro'd on TeamCity so I reverted. I'll be investigating today.\n. I can take a look. It is highly likely that this and #2182 are the same underlying issue.\n. I have a fix for this. The issue is in our framework matching code. We're picking the lib\\portable-net40+sl40+win8 folder from Microsoft.Bcl.Async when we should be using lib\\portable-net40+win8. PR to come shortly\n. Confirmed that the fix for #2180 fixes this issue as well.\n. I'm going to need more context on this before I can do anything. @davidfowl does this App.config file need to be different for each framework (probably...)? Do we need to put anything in it or just have it there and point the SetupInformation at it so that configuration works?\n. Ah, that helps. Thanks!\n. @jods4 To be clear, are you using IIS or one of self-hosting webservers like WebListener? As far as I can tell, IIS is setting the web.config location correctly (to wwwroot/web.config)\n(I do see that it is not set correctly when you boot DNX via dnx.exe and am fixing that)\n. I'm also going to test it out on IIS, but if you do still encounter the issue in IIS specifically, re-open this bug and let me know :)\n. (and for your reference, the fix is in DNX 1.0.0-beta7-12359 and higher; if you don't see that on the feed yet, it's because our build is delayed :P)\n. I've verified it seems to be working in IIS. Note that IIS uses the wwwroot/web.config file, not the app.config file because it is hooked in with the whole IIS pipeline :)\n. :+1: Note that after this fix, WebListener will use [project root]/app.config and not [project root]/wwwroot/web.config. This is because web.config is an IIS concept, and when using WebListener your app is behaving more like a Console App than an IIS app. It also allows your app to have IIS-specific configuration.\nIf this seems surprising to you, we can discuss it further.\n. My concern is that WebListener and Kestrel are just console apps that happen to listen on HTTP ports. At the time we're loading the configuration file, we have no idea what kind of app is in use and to have the app.config ignored just because there happened to be a wwwroot/web.config file seems surprising. It also means there is no way to have different configurations for IIS and non-IIS scenarios. Connection Strings and App Settings are handled completely differently in ASP.NET 5 (via IConfiguration), so web.config and app.config are only intended for use with legacy .NET code (in fact they do not work on CoreCLR because it does not support that configuration system). I think the minor inconvenience of having to duplicate some .NET framework settings in order to work in both WebListener and IIS is better than the potential user confusion caused by accidentally reading the wrong config file.\nThis is mostly a point-in-time problem. As more things transition to the newer system, this pain will be dramatically reduced. There is definitely value in embracing legacy support, but I think here it isn't clear how best to do it, so the safer option is to give the user the most control.\n. No, this is part of runtime refactoring\n. No, it can go in beta8\n. @davidfowl didn't you basically do this already?\n. /cc @avanderhoorn (I think this is what you were talking about ;)). Only covers one direction (packages later than runtime) though.\n. technically we keep that label but put design:done on it. /cc @glennc we still using your app?\n. This is likely related to ye olde NuGet.org getting disabled issue. Ping @davidfowl. It's the main reason we put the new \"NuGet\" entry into the list (the one that doesn't use www)\n@kichalla Now that we have dnu feeds list, can you try a few things with your local NuGet.config (the last one in your screenshot)? Try removing the clear node and the add key=NuGet node and see what changes. I haven't heard a super-clear answer of what the exact behavior we're seeing is so this will be helpful :)\n. Perhaps this is just because I added it to the list of commands last? I think the main fix here is that dnu help should sort by command name and not rely on the order of insertion into the command list.\n. Sure! Sounds good! Please feel free to send us a PR. Thanks for checking in with us beforehand.\nSounds like you're on the right track, you'd basically just be adjusting the order here: https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.CommandLineUtils.Sources/CommandLine/CommandLineApplication.cs#L387\nI don't think a comparer is needed, just a .OrderBy(c => c.Name) or something :)\n. Heh, no worries :)\n. To clarify, are you running msbuild on an .xproj file located next to a project.json? If so, I believe that should work, but I'm not 100% clear on that stuff. Adding some VS Web Tooling folks (+ @PradeepKadubandi @BillHiebert).\nIf you have the Web Development Tools installed in VS 2015, those targets files should have been dropped there properly.\n. Right now the DNX MSBuild targets are only installed with Visual Studio 2015 (specifically the Web Development Tools component).\n. Is there a reason you are specifically restricted to using MSBuild here? The MSBuild targets basically just execute dnu build, they are really just designed for Visual Studio integration. For command-line builds, we suggest you use dnu directly.\n. This is needed to unblock Templates, so I'm going to YOLO push it to dev now and watch the build.\n. I fixed the issue that was causing travis to fail as well.\n. Looks good to me, agreed a test would be good.\n. I'll roll these in to #2225, and just get it done in one big batch of renames.\n. Looks like I'll take this on in #2225 anyway. Merging with that.\n. LibraryKey ->\n\n?\n:trollface: (I'm going to use CompilationTarget for now)\n. In this, we should also split the LibraryManager implementation class\n. /cc @davidfowl @lodejard \nI'm going to do this in phases (but all still in beta7, though some phases could be bumped if necessary for time).\nPhase 1\nSplit LibraryExporter out of LibraryManager (to match the interfaces), but keep it in the runtime. Also some small renames/renamespacing. Mostly just Microsoft.Dnx.Compilation.Caching -> Microsoft.Dnx.Compilation\\Caching (i.e. rename the project, since non-caching things will be joining it)\nPhase 2\nRemove ILibraryExportProvider. Instead, we will have dependency providers create sub-classes of LibraryDescription (the internal type used to represent a library). Then, LibraryExporter will have a reference to the Runtime's LibraryManager (the concrete type) and use it to retrieve the strongly-typed LibraryDescriptions. The exporter will use the data in the LibraryDescription to export the library, using either virtual methods or down-casting. The loaders will also be factored to use this data, and thus the Project loader will move to Compilation. In theory, the project resolver could also move...\nPhase 3\nMove LibraryExporter and friends to Microsoft.Dnx.Compilation. This will mean Compilation will be coupled to Runtime, since it needs to use LibraryDescription and LibraryManager (which are in Runtime). However, this makes sense to me since Compilation is tightly coupled to Runtime. Whereas the Runtime is not tightly coupled to Compilation (i.e. the runtime could operate without the compilers). As part of this, we'll need to work out a way for ApplicationHost and DTH to stitch them back together, it might get a little ugly, but we can finesse it in Phase 4. Right now, I'm thinking that AppHostContext just gets a Func or interface that allows it to attach the compilation things (assembly loaders/exporters)\nPhase 4\nFinal finesse and clean-up. The way we stitch Runtme and Compilation will probably be pretty ugly. Something like an ICompilationAttacherThingy in Runtime that Compilation implements. This will mainly be a refactoring of ApplicationHostContext, since that's where the stitching happens.\n. Phase 2-4 were completed by #2424 (despite the title only saying phase 2)\n. This is expected. NuGet Package Explorer has not been updated to support the various new frameworks and until that happens, these kind of errors occur. NPE is an external tool, so we'll need to work with the author to update to support this.\nPing @Eilon @davidfowl \n. Yeah, I can add some tests. Those should also make it easier to explain the problem and solution :)\n. Tests added, both new cases on the GetNearest test failed before this change (and I verified that they fail without the change).\nPing @davidfowl \n. That is unfortunate given that the config is required to be NuGet.Config. Can we normalize the casing for all those files in both DNX and NuGet? We can support the old casings but in general, all lowercase is the pattern used for this kind of file.\n. Makes some sense to me. Similarly, if for some reason the app has both dnx46 and dnx451 in the project.json, this could allow the user to choose the version we will write in to web.config.\nThoughts @davidfowl ? It seems like it's basically just the same as letting you constrain dnu build by framework.\n. Can you post the project.json you are trying to build?\n. Can you try this temporary workaround: Add a direct dependency to your dependencies list on System.Runtime version 4.0.10-beta-* (note that's 10 NOT 20). This shouldn't be required, but if it fixes the issue then I have a pretty good idea where to look next :).\n. Great info, thanks! I think I have an idea what the underlying problem is, I'll try some things on my end and see what I find out.\n. Ok, the issue is System.IO.Compression.ZipFile. It is not compatible with dnx451. If it worked previously, this was a bug at that time. I would expect it depends upon new functionality in the .NET 4.6 framework, but someone from the CLR team (cc'd below) can confirm that.\nYou could try switching to the latest beta6 builds and change your app to target dnx46 which would mean you are targeting .NET 4.6.\n/cc @ericstj and @davidfowl  to confirm my interpretation is correct. System.IO.Compression.ZipFile depends on System.Runtime 4.0.20 which is not available on .NET < 4.6\nThere isn't really a DNX issue here any more, so I'm going to close this, but please do re-open it if you still have issues and keep commenting on the thread if you need more information!\n. I confirmed that upgrading to beta6-12207 or higher (which is on the aspnetvnext feed) and changing to dnx46 no longer reproduces the error in my test. I don't have your full code so if that doesn't work for you, let me know what you are seeing.\nEDIT: Of course now I see you are running 12207 :P, so just change your framework name and you should be good!\n. There was an issue in Microsoft.AspNet.Server.IIS that was exposed by recent DNX changes. That's been fixed in 1.0.0-beta6-12044 of Microsoft.AspNet.Server.IIS. Versions later than that have already been published to aspnetvnext so can you try re-restoring and see if you get a new enough version? You can find the exact version you got by running dnu list after the restore.\n. As @ericstj said you can also go back to dnx451 by changing the System.IO.Compression.ZipFile reference to a framework assembly (you still need to get the updated IIS Server package as I mentioned above)\n. Last call now that builds are passing.\n. @ChengTian will do\n. The fact that there are two IApplicationEnvironment instances in play when running an app is concerning to me and leads me to think we actually should put Get/SetData on their own interface in the service provider (IApplicationGlobalData). When DNX boots, it creates an IApplicationEnvironment for the physical DLL being executed. In most cases, this is ApplicationHost.dll, which then creates a second IApplicationEnvironment that overrides the other. If we take this change as-is, anything put into the first IApplicationEnvironment will be lost forever when the application host starts up because it's new IApplicationEnvironment will overwrite it. (Technically, on Desktop CLR they will share the same data source, but that's an implementation detail, and in fact argues strongly for Core CLR doing whatever is necessary to ensure they share a dictionary to ensure the behavior is similar). If the goal here is to have a single dictionary of global items, it should be truly global and the only way to achieve that here is to create a new interface/class\n. Ping @davidfowl @ChengTian - I've updated the code to allow an Application Environment to delegate to another for data storage. This is only used in the one created by ApplicationHostContext to ensure it shares global data storage with the host.\n. I'd like to try and get this in before the branching today if possible, so please review :). /cc @muratg \n. Looks like I won't make the branching anyway, but I'd still like a sign-off soon :)\n. Ping. I'll be merging into release but rather than start a new PR it'd be faster to just get sign-off here and then rebase and merge.\n. /cc @ChengTian @davidfowl \n. Build failures seem weirdly unrelated... I'll keep an eye on it as the review finishes.\n. Wow, AppVeyor actually finished :). The failure is a missing makefile change that was masked on my machine because I had dnu builded that assembly when I was testing. Will fix.\n. @borgdylan I believe they will be able to move up to that assembly, yes. Currently they are in Runtime.Abstractions, which Compilation.Abstractions references. The idea here is that Applications only ever take a dependency on Microsoft.Framework.Runtime.Abstractions and the things only needed by compilers are in Microsoft.Framework.Runtime.Compilation.Abstractions\n@davidfowl :+1:\n. @borgdylan I'm actually going to leave them in Microsoft.Framework.Runtime.Abstractions. They aren't just used for compilation so it's good to have them available at that level.\n. @borgdylan Correct. In this PR we are splitting the Abstractions into two pieces. Your compiler support package will need to reference the new Microsoft.Framework.Runtime.Compilation.Abstractions package, as some types will be moving there (most notably IProjectCompiler), but that will also bring in the regular runtime abstractions so you should have everything you need there. The idea here is to allow applications to reference runtime components without getting all the compilation-related stuff as well.\n. FYI: DTH seems to behave just fine after the renames\n. @borgdylan Yeah, sorry for the confusion, that was just a general comment on the PR :P.\n. @borgdylan I believe that is mostly the plan :).\n. Looks good, but I would like to consider the comment I posted about merging Environment and DnuEnvironment so we can avoid shadowing System.Environment. :watch: \n. I thought we weren't going to do the folder check and only support filenames (replacing the command, effectively). Selecting a different folder would only be supported by dnx -p /path/to/project run\n. :shipit: - I don't know what --project is, but whatever it is, it sounds new... I'd rather just get this in so we can start seeing what this does.\n. Yes but -p was just a short form for --appbase, not a new argument.\n. My original proposal was to always use Microsoft.Framework.ApplicationHost unless the first argument is a dll or exe. So dnx --appbase Foo would expand to dnx --appbase Foo Microsoft.Framework.ApplicationHost.dll. If we want to do it as a different argument, that's OK with me. I just don't see a use case for dnx --appbase Foo SomethingThatIsNotADll without using AppHost...\n. Looks related to https://github.com/aspnet/dnx/issues/2192 (cc @troydai)\nWe recently did some work to clean up the way we convert version numbers to strings (in order to make them more uniform). Can you try re-running dnu restore on your project to write the packages into the correct paths and see if you can publish after that?\n. Looks good to me, I have similar concerns as to verifying it in all contexts. Most importantly, does this play well in the VS Output Window and Error List? The Output Window in VS has a regex it uses to sniff out things to pull into the Error List and we should make sure that if these messages are going there, we are behaving correctly.\nUpdate: Given https://github.com/aspnet/dnx/issues/1722#issuecomment-122111886 I'm confident the output window is good. Would still be good to run through the other compilation scenarios though\n. This reminds me that we should try, as much as possible, to move all of our framework parsing code to use NuGet.Frameworks. Perhaps using source-inclusion. We'll have to come up with a convenient way to distribute it (and probably NuGet.Versioning for parsing SemVers as well) so that code can use it without interfering with anyone else who wants to use it.\n</off-topic>\n. Why wasn't the bug updated? Anyway, I'll move it.\n. Last call, I'm shipping it if I don't hear back soon :)\n. :shipit:\n. Looks good to me, I concur with most of David and Troy's comments :)\n. :shipit:\n. Environment variable seems really gross (though I understand the short-term fix). Why are we not planning to support a cleaner way to pass this data @davidfowl ? As @moozzyk said, we already have #1970 to cover this.\n. @moozzyk I totally agree, I was referring to @BrennanConroy 's comment that @davidfowl said to just use the environment variable. If that was just as a temporary measure until #1970 can be fixed, I'm totally :+1: to that :)\n. Looking in to why Travis is sad.\n. Travis was sad because Mono only supports one framework but I was running the multi-framework publish test on it. I disabled it and it should get happy again.\nAny further comments? I'd like to close on this and give the CI time to settle before the noon deadline for release :). :watch: @davidfowl @troydai \n. Plus, warnings are for compilation/development-time only, not runtime. That's what dnu build is for. If it can be loaded, it's good enough for the runtime :)\n. At best, this sounds like a feature that xunit could add. The runtime could help out, but it's an application level feature here.\n. In the DNX repo I believe we dnu build tests, but that is extra, somewhat wasted, work. I could maybe buy a Runtime feature that allows an application to retrieve any diagnostics related to a dependency (compilation errors/warnings, etc.) so it can render it. That could possibly be a way for xunit to get this data.\nIn short, it sounds like a useful feature for dnx . test specifically, but we need to be careful because I don't think it's useful in general runtime scenarios. I also think that changing KoreBuild to dnu build tests first could be a useful first pass and if that's sufficient for now, we can defer this work outside the overcrowed 1.0.0 milestones :)\n. /cc @muratg @glennc - This can go on the post-1.0 backlog now. We can move it back if aspnet/Universe#248 doesn't solve the immediate issue.\n. The proposal in this enhancement is basically to consider exposing compilation issues in a way that xunit can retrieve.\n. It is related, but (and I should have called this out clearer in the bug) this is more about asking for this information for a different runtime (i.e. given the name of the runtime), not for the currently executing runtime. Right now we have some string parsing code in multiple places.\n. DNX is the runtime, so if you just want to manage the runtimes yourself, you shouldn't remove it :). You can delete the ones installed by DNVM by emptying the C:\\Users\\[username]\\.dnx\\runtimes folder.\nDNVM can be removed by simply deleting the dnvm.cmd and dnvm.ps1 files from C:\\Users\\[username]\\.dnx\\bin.\nOut of curiosity, why do you want to manage the runtimes yourself? Do you have suggestions for how DNVM could be improved to better serve your needs?\n. https://github.com/aspnet/Docs/blob/master/aspnet/getting-started/installing-on-windows.rst :wink: just sayin'\nFeel free to at least log an issue on https://github.com/aspnet/Docs, but if you feel so inclined, you can send a pull request and fix it yourself! (speaking of wonderful things in this new world!)\n. Try using dnvm update-self to ensure you have the latest version of dnvm with the new command.\n. Now just waiting on Common build 10608 to pass Coherence\n. :shipit: \n. It's not even ambiguous: ). uap100 is interpreted as 1.0.0\n2677 adds support for uap10.0\n. That's #2546, which I am currently fixing\n. I believe the define symbol is UAP10_0\n. Dev dependencies are a much more complicated feature and aren't necessary to do this. We can do it with regular dependencies just fine.\n. @davidfowl @troydai and I talked and Fowler wants Troy to take a look at this. /cc @muratg \n. Fair enough, @troydai was just wondering why he hadn't been assigned :).\n. Note: make sure that the analyzer assemblies are loaded in a separate IAssemblyLoadContext\n. Thoughts (just a bit of a brain dump to facilitate discussion/design):\n- We could allow a path property under the dependency. That starts to smell a lot like HintPath though...\n- We could allow a project.json to have an optional name property to change the name of the project. This would mean someone has to scan all the project.json files in scope in order to determine the name of each project. Perhaps we could do that during dnu restore and put it in the lock file?\n. > Introduce paths in the lock file\nThis is my biggest concern but I don't see a better way if we want to support this.\nLooks like a reasonable first pass at design to me. We'll discuss in the meeting :+1: \n. Just because the rooted path exception isn't new, doesn't mean this isn't a great opportunity to improve test coverage ;P.\n. Ah, then ignore my comment :) :+1: \n. :shipit: \n. We should definitely fix the missing hashes, but we should also ensure we don't throw here and instead display a useful error message (something like The package '{ID}' does not contain valid source code repository information)\n. Yep, it shouldn't be a hard fix. Happy to take it on, but my beta7 load is probably too high right now.\n. It's definitely expected that this combination (dnu wrap and dotnet) would be a little broken. Thanks for the report though!\n. Note: We need to be extremely careful what we do here now that NuGet 3 and MSBuild for UWP apps are using project.json and project.lock.json\n. @glennc is driving the design on this. Looks like we're close to ready to call the design done, Glenn just needs to get sign offs from CLR.\n. Certainly, once we have them :). @glennc is almost finished a draft design\n. As far as I know, PowerShell's package management can integrate smoothly with MSIs. So using the MSI route will not hinder our ability to integrate there later. Good idea!\n. FYI: It's definitely going to be a very bumpy road on the dev channel for a while. We have ASP.NET apps running on dotnet but it requires a lot of in-depth knowledge right now :). We'll be updating things as we smooth them out but feel free to explore and try things out!\n. Ok, going to resolve @davidfowl 's TryCreate comment and @victorhurdugaci 's comments then merge.\n. Looks good to me! :shipit: \n. Awesome! :shipit:!\n. We should definitely make sure we work without .NET 4.6 installed, @moozzyk was just providing a possible workaround. Obviously there is a bigger issue to resolve here given than Azure only provides earlier versions of .NET\n. The current syntax for running in a different folder is dnx --appbase [path\\to\\other\\folder] Microsoft.Dnx.ApplicationHost run ....\nWe are totally aware that this sucks and is bad and terrible and no-good. See #2316 :)\n. Closing this as we basically cover the underlying issue in #2316 and the workaround above works for now. Feel free to continue discussion or re-open if you have further comments! :)\n. Break early, fix early :P. I say :shipit: with the dnx.mono.managed rename. Can't do a ton of reviewing because of the scale of the change, but the longer we wait, the more backed up things get.\n. To be fair, I meant :shipit: AFTER fixing the Mono rename. Sorry if that wasn't clear.\n. To be fair, the CoreCLR has a \"DomainManager\" but it's not an App Domain Manager :).\nI still like merging dnx.mono.managed, dnx.coreclr.managed and dnx.host into one assembly and only keeping dnx.clr.managed separate. The reason the CLR one has to be separate is that it has to have a strong-name. We want to keep it separate so that it can have a strong-name without requiring that every other assembly have a strong-name (due to virality). So the CLR entry point is an exception to the merge, but only because of that specific reason.\nMy full proposal is as follows:\ndnx.coreclr.managed + dnx.host (+ dnx.mono.managed if possible) -> Microsoft.Dnx.Host\ndnx.mono.managed (if merging is not possible) -> Microsoft.Dnx.Host.Mono\ndnx.clr.managed -> Microsoft.Dnx.Host.DomainManager\n. Agreed, do that rename and get this in (once WTE is released ;)). We can debate merging the Hosts later, it won't affect anything else.\n. We had this exact discussion and decided dnu feeds was the better way to align these. /cc @davidfowl @muratg @yishaigalatzer \nAn anecdotal survey indicates that most people already call them NuGet Feeds.\n. NuGet actually walks up from the current directory up to the root of the drive searching for NuGet.Config files, so you can place a NuGet.Config file next to your project.json or at a higher folder to affect only projects/solutions in or below that folder.\n. No problem at all!\n. @NTaylorMullen said he'd take Razor and that's the only other place this occurs.\n. The setting is only ever processed by Desktop CLR variants since they are the only DNXes that support multiple frameworks. I believe that specifying it to a CoreCLR variant is an error, but I will confirm.\n. It's expected that you would see that issue in the web application scenario. There is a Known Issue that the VS Tooling has where it doesn't set an environment variable needed to tell IIS what to launch as. @danroth27 is working on documenting it. Until that is fixed in the tooling you can use the workaround I posted in this StackOverflow question to launch IIS with the correct framework.\n\n\nI get the same message running dnx . run from the solution directory.\n\nThere are two things confusing me about this :). First, you can't run dnx from the solution directory, you have to run it from the project directory (alongside the project.json). Second, the default Web Application template doesn't define the run command, it defines web and ef so you'd have to use dnx . web to try this from the command line and WebListener.\nIt definitely should work in the command line (when you are using dnx.exe to boot the runtime). In that case, we have control over the CLR hosting and can launch the correct version.\n. Have you installed the Beta6 Tooling package? (see http://blogs.msdn.com/b/webdev/archive/2015/07/27/announcing-availability-of-asp-net-5-beta-6.aspx)\n. Ah yeah, I think there is a small issue there that beta6-* means you'll only get releases from the dev feed (because the released version is 1.0.0-beta6 which is treated as lower than 1.0.0-beta6-[anything]). We've talked about adjusting our versioning scheme to try and make that easier, but for now it's just something to be aware of.\nSo, it sounds like you've figured out what was wrong, and the original issue has been resolved. I'm going to close this but feel free to keep discussing or re-open it if the issue reoccurs!\n. Yes, you still need to use the environment variable in IIS, because IIS is the one booting DNX so it needs to provide the framework data.\n. What error do you get when you try to use net461?\n. It sounds like an issue with dnu wrap. To be clear @glatzert , the library is a standard csproj?\n. :shipit: \n. I like this. It doesn't have to be a full template, just a base project.json.\n. I disagree for simple project.json scenarios. Complex templating and scaffolding should be separate but almost all other package managers/build tools have been successful with a simple initialization system (npm init, Maven Archetypes, cargo new, etc.). Initializing a simple new project shouldn't require a completely separate set of tools.\nI like cargo's approach to this (http://doc.crates.io/index.html). The init command would have three modes:\n- dnu init - Console App targeting both dnx451 and dnxcore50. Just a simple run command\n- dnu init --lib - Class library targeting dotnet\n- (maybe) dnu init --web - Like Console App but with empty Startup.cs instead of Program.cs. It would need a web command, so it would probably need to have Hosting as a dependency, so I'm not convinced this is worth it.\nThis isn't about generating something for all scenarios, it's about generating a simple, empty, project manifest. Having to either get a new global command or read detailed docs just to figure out how to create a project.json is a barrier that we can remove.\n. Which is why this is essential that it is not scaffolding. It's why I'm not really sure a \"Web Project\" initializer is useful. In the other two cases (Console and Class Library) I envision it only creating a very simple project structure with absolutely no dependencies.\nRight now, creating a DNX project from outside Visual Studio requires a lot of extra tools and I don't like that. We should be building a simple self-contained story for the basic case. More complex templating absolutely belongs in external tools, but the actual layout of a project manifest is already coupled to DNU so a simple DNU command that knows how to produce something like the below is not scary at all to me\njson\n{\n    \"dependencies\": {\n    },\n    \"frameworks\": {\n        \"dotnet\": {}\n    }\n}\n. Well if you're going to get all tautological about it :stuck_out_tongue: ...\nIf we have the ability to produce (pack, wrap, build, etc.) and consume (restore) packages in dnu then I don't see a problem with a simple command to initialize a project (which is how we expect people to create packages anyway). We shouldn't do scaffolding here, I entirely agree, but to argue that we shouldn't do this because \"scaffolding is complicated\" is a slippery slope argument.\n. Personally I think DNU itself shouldn't be in the runtime but that's a discussion for a different thread :)\n. Going to push this now because it's so tiny and a big nuisance. Will react to comments, if any, post-commit.\n. :+1: any time we fail we should return a non-zero code\n. :shipit:\n. Looking pretty good so far, but some issues. Structurally I think it looks ok. I'm not a huge fan of using GetNearest in the runtime since we spent some time removing it, but I know there isn't really an easier way to do it unless we put them in the lock file which gets ugly.\n. We'll have to see what we can make work. Right now, in order for the load context to work we have to use Load instead of LoadFile, which means the runtime loaders need to know how to find the assembly. I'm not a fan either, and it might be possible for us to work around it.\n. We're pushing this out to the backlog. /cc @Eilon @glennc @davidfowl @lodejard \n. Going to capture some of the results of our previous design discussions on this:\n1. DNX will have a built-in \"runtime.json\" that will define DNX-specific runtime IDs. For example dnx-win8-x64, dnx-linux-x64, etc. These will inherit from base RIDs to join in the general RID ecosystem\n2. At runtime, it's pretty clear what RID we are using. OS Version detection might get a bit tricky, but at the very least we can know the OS type (win/linux/darwin) and bitness\n3. Restore time is the tricky part. In NuGet3 we require that project.json contains a runtimes section, and we will likely support that in DNX as well. However, we're not sure we want to require it. The question then becomes, what do we do when there is no runtimes section? Do we assume it contains all the dnx-* RIDs? Maybe we do have to require it, but we still need to think on that a bit.\n4. Much like we do for CLR quirking versions, we should probably provide ways for dnu and dnx to take in a runtime to force DNX to select that runtime (if it is compatible with the project).\n. After chatting with @ericstj, @davidfowl and @Eilon we decided we can move this to beta8\n. Ok, the final design I'm going with is as follows:\n1. Every DNX knows it's RID components: (Operating System Version, Architecture).\n2. At runtime, the DNX looks up the section in the targets of the lock file for it's specific RID. There must be an exact match, meaning the project must be restored for the correct operating system(s)\n3. Each DNU has a set of RIDs it will restore for by default. These consist of the combination of the currently-running OS version and all known architectures. For example, on Windows 10: win10-x86, win10-x64, win10-arm. On Windows 7, win7-x86, win7-x64. On Linux: linux-x86, linux-x64, linux-arm, etc.\n4. If a project contains a runtimes section, we will always use that to produce a set of RIDs to restore for.\n5. If a project does not contain a runtimes section, we will restore for the default set for that particular DNU (see 3 above). This would include Class Libraries, because we didn't want to force the use of runtimes on an application (since in DNX any class library can be an application as well, there is no distinction)\n6. dnu restore would have a --runtime flag that would override all other values and provide the complete set of runtimes to restore for.\n7. When embedding a runtime during dnu publish we will identify the RIDs specified by that runtime and restore for them as well. For example if you are on windows and run dnu publish --runtime dnx-coreclr-darwin-x64.1.0.0-..., we will restore for darwin-x64 as part of the publish.\n/cc @davidfowl @lodejard This sounds like the vague conversations we had, but we never landed on a concrete design here so let me know if I'm way off base.\n. We can probably do something there. We already make uname calls for other purposes.\nEven better would be if the CoreCLR can expose enough data for us to synthesize the RID :)\n. These decisions will all be happening after booting the CoreCLR/DNX, they are only for packages used by projects. DNX has to have the binaries necessary for booting itself in the DNX runtime folder. That may mean we need distro-specific DNXes if you have distro-specific assemblies for those packages. It would be good to sync up on that as quickly as possible.\nWill the CoreCLR be distro-specific as well?\n. Well, in that case how would we even ship libcoreclr.so? Would we ship all the distros together in one big package by folder? ubuntu\\libcoreclr.so, etc.?\n. /cc @moozzyk @DamianEdwards @davidfowl \n. The DNX has to be self-contained for enough to boot itself. We don't want it to be dependent upon external packages at boot time. Applications can use packages, but the runtime itself is self-contained. So, if the CoreCLR (and the packages necessary to boot DNX) are going to be distro-specific, we would likely have to be distro-specific as well.\n. Re 1, dnx452 is not supported on beta5. The version number is expected, every DNX build has a build number, regardless of the actual version number, and we keep the build number in when reporting that version so that it's clear what build is in use.\nRe 2, This is due to IIS starting up before DNX has a chance to set the framework version. We have a VS feature coming to smooth this out, but for now there is a workaround using an environment variable. See https://github.com/aspnet/Home/releases/tag/v1.0.0-beta6 and https://github.com/aspnet/dnx/issues/2367#issuecomment-125767070 for more\n. I think these issues are resolved (and related issues are tracked). Please re-open if you are still seeing issues.\n. Are you seeing packages with the timestamped versions or just the error message you showed above? The latter is not because it's \"unreleased\", the final version still has a timestamp and we leave it in those errors to ease bug reporting. If dnvm list says you're running 1.0.0-beta6 or 1.0.0-beta5, then you should be on the final release for that preview, regardless of that version number\nIf you are seeing packages with timestamps, it could be caused by our versioning and dev/release feed model. The timestamped versions are considered higher than the non-timestamped \"release\" version because the \"tag\" (the part after the -) is simply sorted lexicographically (aka \"ASCIIbetical\" :)). So if you have restored from the dev feed before and haven't cleaned your package cache (%USERPROFILE%/.dnx/packages), we'll see those and use them even if you're only restoring from the release feed now.\nIt's an unfortunate side-effect of our versioning strategy and SemVer. I agree we need a better strategy there (ping @DamianEdwards). At this point I think our best option \n. We should still be properly normalizing input. You should be able to type 1.0.0.0 in any input field (version number in project.json, dependencies, etc.) and we should normalize it to 1.0.0\n. @troydai Hey look, more normalization issues :P\n. Have you also updated your DNX to 1.0.0-beta7-12290 or higher? There were some breaking changes (announced here: https://github.com/aspnet/Announcements/issues/51) in the DNX runtime. Try running dnvm upgrade -u default to get the latest version from the dev feed.\nIf you are running a recent DNX and still having this issue, please re-open this to comment further, but upgrading the DNX should fix your issue so I'm going to close this.\n. That indicates that you have an old version of DNVM (one prior to the addition of the -u flag). Can you update to the latest DNVM using the instructions in https://www.github.com/aspnet/Home and try again?\n. What version of DNX are you using and what is the version of your ASP.NET tools (i.e. have you installed any of our tools packages since the VS 2015 RTM)?\n. :shipit: \n. :shipit:\n. Will do :+1:\n. The problem is that we use the References section to filter both runtime and compile. To mirror NuGet 2's behavior, it should only filter compile, since the purpose of filtering out these assemblies is to avoid compiling against them, but to have them present at runtime.\n. The problem is that we use the References section to filter both runtime and compile. To mirror NuGet 2's behavior, it should only filter compile, since the purpose of filtering out these assemblies is to avoid compiling against them, but to have them present at runtime.\n. see src\\microsoft.dnx.tooling\\utils\\lockfileutils.cs:174\n. see src\\microsoft.dnx.tooling\\utils\\lockfileutils.cs:174\n. :+1:\n. :+1:\n. Does this error only happen when you host via IIS? Can you try using WebListener or a console application? There is a bug currently in the IIS host that has just been fixed but is working it's way through our build system (/cc @Tratcher @troydai)\n. Does this error only happen when you host via IIS? Can you try using WebListener or a console application? There is a bug currently in the IIS host that has just been fixed but is working it's way through our build system (/cc @Tratcher @troydai)\n. The CompilationSession.OnInputFileChanged error on AppVeyor looks like you've got something from #2424 leaking in... Not sure if that's just on AppVeyor or in the code itself.\nOnce that's resolved, :shipit:\n. Closed unmerged?\n. Can you put type: project in the Lock File Target Library (and type: package for package libraries). We did that in the NuGet lock file, and it needs to be synced up anyway (nobody reads this property as yet). Example:\njson\n\"targets\": {\n    \"DNXCore,Version=v5.0\": {\n        \"Agency2/1.0.0\": {\n            \"type\": \"project\",\n            ...\n        },\n        \"System.Console/4.0.0-beta-23207\": { \n            \"type\": \"package\"\n            ...\n        }\n    }\n}\nWe should be extremely careful to ensure the MSBuild task works fine with this new data. As far as I know, as long as we don't provide a compile, runtime or frameworkAssemblies section in a project entry, we should be OK, but we need to confirm. In a future version of the MSBuild task, we should have the task filter the entries in this list to only those with type: package\n. @yishaigalatzer agree there, though the type field is not a change since it was already present in NuGet's lock file. Putting projects in the lock file here would be for DNX only, but I agree we should make sure we sync up with the necessary NuGet folks before locking down.\n@jasonmalinowski Not quite yet, since we're still locking in the details. We'll keep you in the loop through the design though so we can get the necessary bugs in place.\n. @yishaigalatzer agree there, though the type field is not a change since it was already present in NuGet's lock file. Putting projects in the lock file here would be for DNX only, but I agree we should make sure we sync up with the necessary NuGet folks before locking down.\n@jasonmalinowski Not quite yet, since we're still locking in the details. We'll keep you in the loop through the design though so we can get the necessary bugs in place.\n. It's also a useful feature for cases where you want CI builds to do something but not dev builds. Having said that, a general purpose override system is also useful for that...\n. It's also a useful feature for cases where you want CI builds to do something but not dev builds. Having said that, a general purpose override system is also useful for that...\n. :shipit:\n. :shipit:\n. :shipit: given @blowdart 's comment is resolved\n. :shipit: given @blowdart 's comment is resolved\n. It looks like this is caused by a combination of https://github.com/aspnet/Tooling/issues/193 and a real issue in publish. I was able to get a repro of the publish issue in the latest dev code by creating a new xproj and a csproj, adding a reference, restoring the wrapper proj (to work around the tooling issue), and then publishing. Both command-line and VS publish fail with is not specified in project.json because the input framework is \"dnx451\" and the wrapper project uses \"net45\"\nI'll have a fix for the publish issue soon. Until the tooling issue is fixed, you'll have to manually restore the wrapper project (it's in the wrap folder under the solution root) before you can publish a wrapped project.\n. It looks like this is caused by a combination of https://github.com/aspnet/Tooling/issues/193 and a real issue in publish. I was able to get a repro of the publish issue in the latest dev code by creating a new xproj and a csproj, adding a reference, restoring the wrapper proj (to work around the tooling issue), and then publishing. Both command-line and VS publish fail with is not specified in project.json because the input framework is \"dnx451\" and the wrapper project uses \"net45\"\nI'll have a fix for the publish issue soon. Until the tooling issue is fixed, you'll have to manually restore the wrapper project (it's in the wrap folder under the solution root) before you can publish a wrapped project.\n. Fixed in https://github.com/aspnet/dnx/pull/2486, which is chugging through the (new and fancy) CI\n. Fixed in https://github.com/aspnet/dnx/pull/2486, which is chugging through the (new and fancy) CI\n. One thing I see that looks odd: The package you referenced is HelloWorld.0.1-beta.nupkg. Is this on a local directory/network share? Also, how did you build this package? The version number isn't normalized and it looks like our code might be just trying to directly open the file to avoid scanning the directory and parsing all the versions.\nCan you confirm that this is the case? (package is on a file system, not a feed; file name is HelloWorld.0.1-beta.nupkg)\n. One thing I see that looks odd: The package you referenced is HelloWorld.0.1-beta.nupkg. Is this on a local directory/network share? Also, how did you build this package? The version number isn't normalized and it looks like our code might be just trying to directly open the file to avoid scanning the directory and parsing all the versions.\nCan you confirm that this is the case? (package is on a file system, not a feed; file name is HelloWorld.0.1-beta.nupkg)\n. Hang on, just read the full thing over and saw that this is on publish. Sounds like https://github.com/aspnet/dnx/issues/2390.\nCan you try on the latest DNX beta8 builds and see if it is fixed there? If not, can you publish your version info as you did above?\n. Hang on, just read the full thing over and saw that this is on publish. Sounds like https://github.com/aspnet/dnx/issues/2390.\nCan you try on the latest DNX beta8 builds and see if it is fixed there? If not, can you publish your version info as you did above?\n. Yeah, the last successful Coherence build was Aug 28. We're actively looking in to it though so hopefully it will appear soon.\n. Yeah, the last successful Coherence build was Aug 28. We're actively looking in to it though so hopefully it will appear soon.\n. We just got a Coherence build out that should have the change. Build 1.0.0-beta8-15548. Can you give it one last shot and let me know how it goes?\n. We just got a Coherence build out that should have the change. Build 1.0.0-beta8-15548. Can you give it one last shot and let me know how it goes?\n. Yay! Glad to hear it.\n. Yay! Glad to hear it.\n. :shipit:\n. :shipit:\n. Those are for ad-hoc testing. I can remove them though.\n. Those are for ad-hoc testing. I can remove them though.\n. (This is mostly notes for me from a convo with @davidfowl - Self-assigning in beta8 /cc @Eilon)\n. (This is mostly notes for me from a convo with @davidfowl - Self-assigning in beta8 /cc @Eilon)\n. Yep, I'm keeping this open to make sure to spend time this milestone really going through the memory usage. I expect to do a full dotMemory profile, and probably work on #1446 at about the same time\n. Yep, I'm keeping this open to make sure to spend time this milestone really going through the memory usage. I expect to do a full dotMemory profile, and probably work on #1446 at about the same time\n. Closing and NOT tagging Done as @davidfowl has been mostly working on this and should have most of it done now.\n. Closing and NOT tagging Done as @davidfowl has been mostly working on this and should have most of it done now.\n. I'm taking a look at this. I'm not sure why my change would have caused it, but it seems connected :)\n. I'm taking a look at this. I'm not sure why my change would have caused it, but it seems connected :)\n. I've identified a potential leak, once I've got a repro I should be able to do a before/after comparison and have a fix out.\n. I've identified a potential leak, once I've got a repro I should be able to do a before/after comparison and have a fix out.\n. :shipit: \n. :shipit: \n. That looks like a DNVM issue. I believe dnvm.sh may have some defaults that dnvm.ps1 doesn't have. /cc @glennc @BrennanConroy \n. That looks like a DNVM issue. I believe dnvm.sh may have some defaults that dnvm.ps1 doesn't have. /cc @glennc @BrennanConroy \n. Right, but you should be able to install it in order to publish with it.\n. Right, but you should be able to install it in order to publish with it.\n. Publish an app with --runtime\n. Publish an app with --runtime\n. It looks like we can manifest for multiple OSes, it's not a matter of building against different libraries, just a matter of writing an XML file (https://msdn.microsoft.com/en-us/library/windows/desktop/dn481241(v=vs.85).aspx)\n/cc @moozzyk @davidfowl \n. It looks like we can manifest for multiple OSes, it's not a matter of building against different libraries, just a matter of writing an XML file (https://msdn.microsoft.com/en-us/library/windows/desktop/dn481241(v=vs.85).aspx)\n/cc @moozzyk @davidfowl \n. Though Windows recommends use of the IsWindows... APIs instead, so maybe we should be looking to get managed versions of those APIs?\n. +@glennc @muratg @danroth27 @DamianEdwards\nThis should go in for beta7. It is a regression of a main scenario. I'm working on a fix now. This does not affect CI builds, so I suggest we do not block release branching on it. I can make the fix in release when we've branched. (Unless release branching is otherwise delayed until after I have a fix, in which case I'll make it on dev ;))\n. As much as it may seem ugly, it seems to me that the unix-y way would be to flock the directory into which we are installing packages.\n. just attaching myself to the thread so I get notifications under the participating section ;)\n. :+1:. Now that the release branch is done I was planning on doing exactly that.\n. merged to release\n. It'll probably be in aspnetvnext by then :). No problem, I have done tests myself and there's still plenty of time to react to bugs if you encounter problems with it.\n. :watch: @davidfowl \n. +@halter73 for review\n. This PR does not affect Xamarin frameworks. That would be a separate issue and a separate discussion if we want to support it. This is just focused on building for older .NET frameworks.\n. It's definitely a different issue IMO, if it's a minor change to add it to this PR, it shouldn't be any less minor to add it once this PR is merged, so there's no need to block this on that discussion. Feel free to open a new issue to discuss that and we can look at adding it in.\n. Sounds good! Being able to build more targets is definitely something we want to work towards\n. @onovotny When you add an issue for more general support, please @mention me. One thing I want to consider (though perhaps not for 1.0 RTM) is adding support for an arbitrary framework target (by providing paths to framework assemblies if absolutely necessary) so that even the ones we don't have direct support for can be used.\n. Looks good to me once @kouvel 's comment is resolved.\n. Nice!\n. I think this is a dupe of #2356 but we may need to investigate this specific scenario further.\n. No problem :)\n. :shipit:\n. As a workaround, and yes I know it's kinda gross, you can wrap the whole file in #if\n. To be clear, both cases are a DNX project? One in VS and one building from the command line?\n. Comparing with a traditional CSProj, dnu build is exhibiting the correct behavior. I'll look in to why this error isn't occurring in DTH.\n. Moving to RC, this is a bug and shouldn't require design changes. /cc @muratg \n. Regardless of support it shouldn't be throwing an ArgumentException :). But yes, in theory project.json should already support Client framework so this would be a bug.\n. :shipit:. I think the layering still needs some consideration and work, but that can come later\n. :+1: why is Travis half-failing?\n. Yep, invalid JSON fixed. Measuring impact now, might have a potential adjustment to make it faster\n. It's only slow because each invocation of batchcopy starts a new powershell instance. I rewrote it in CMD and now it's 3s faster than before for Microsoft.Dnx.Runtime including copying x64 bits.\n. Timing for dnu build of Microsoft.Dnx.Runtime\nBefore: 10s\nAfter (-PS1, +x64): 7s\n. That's what travis is for :). But regardless, I don't see how I could since it uses the sh variant\n. Post-build steps have already started running successfully in Travis. I'll wait for it to fully succeed before merge but any further comments on the PR @davidfowl ?\n. I have a branch I want to use this change in ASAP :P so a squirrel soon would rock :)\n. I suppose we could do destination on the right. It's a little weird to have globbing patterns as keys in a dictionary, but it's not awful.\n. I'd be ok with blocking files with duplicate final target paths.\n. I'd also be OK with banning path-traversal characters in the target paths since they are unnecessary :)\n. :watch: @davidfowl @moozzyk \n. Travis failures are unrelated\n. :watch: @pranavkm @davidfowl \n. It should be available already, though the name was changed to packInclude.\n. Correct, that's something tracked over in the dotnet/cli repo, since DNX is being retired: https://github.com/dotnet/cli/issues/66\n. AFAIK, it's not trying to chmod dnx.exe, it's trying to chmod dnx, which doesn't exist in Windows runtimes. We can probably just fix this with a simple File.Exists check\n. I think this sounds like a reasonable idea. I wonder if the dnu pack alternative will be more usable after https://github.com/aspnet/dnx/issues/848 is finished, and you can embed the wwwroot content in the package when you dnu pack\n. I've definitely heard of people doing this with Linux daemons, and it should be straightforward to do it for OS X daemons as well. DNX itself isn't designed to run as a Windows Service, but there are various tools to allow you to run an arbitrary executable as a Windows Service. You can also write a small shim Windows Service that launches DNX.\n. @DamianEdwards just pointed me to http://taskmatics.com/blog/host-asp-net-in-a-windows-service/ which should work :)\n. Travis? TRAVIS?! TRAVIS?!!\n. Someone told me not to review code unless it passes Travis sooooooo,... :trollface: \n. Suuuuuure ;)\n. I agree, but there's a bigger issue there. If you publish both a darwin and a linux runtime, we need to generate a bash script that does OS detection to pick the right runtime. That or create a [command]-darwin and [command]-linux pair of scripts, which is gross.\nIn general, I think we need to do some design evaluation of our publishing story. We also have issues with file permission flags (execute bits on Linux/Mac, etc.).\n/cc @BrennanConroy @davidfowl @glennc \n. This would also solve #2539 \n. This will still be broken after Coherence, it looks like the runtime.json for it refers to osx (version-less) but we fallback directly from osx.10.10 to unix. Instead we should fall through osx. @BrennanConroy or I can fix that fairly easily.\n. The same should probably be done for ubuntu.14.04 -> ubuntu\n. I'll take this and also ping the necessary folks about updating that package.\n. yep, on it\n. I'm going to remove the manifest after seeing @moozzyk 's comments. We will still need to be able to detect Windows 8.1 and 10 before we can call #2387 done, but we can proceed with the rest without the manifest.\n. We're seeing a few PathTooLong exceptions... /cc @pranavkm @davidfowl \n. At best this is a Tooling request. I'm not sure I'd even want to do it there though.\n. Should be a simple fix. I'll work on it ASAP.\n. Once travis is passing, :shipit:\n. :shipit:\n. This should probably be done in beta8 and I think I can take it on (after some rebalancing of other issues), but I didn't want it to block #2387 \n. This should be scheduled for rc1\n/cc @muratg @davidfowl @moozzyk \n. I think @JunTaoLuo is taking this actually. @davidfowl assigned a different version of the same bug to him :).\n. It's passing locally now. Investigating travis\n. Looks legit. I'll try to resolve it this evening. It's not major though so please start reviewing in the interim :)\n/cc @davidfowl @ericstj @halter73 @moozzyk \n. :watch: @davidfowl @moozzyk \n. NuGet3 added a bunch of embedded data, maybe just do that?\n. Xamarin has pretty well-defined mappings as well I believe.\n. Wimp. You could've resolved the conflicts \ud83d\ude1c\n. Can we centralize the error codes and message templates in one place and have a class with a bunch of static methods that create fully-formed Diagnostic Messages?\n. I have an additional suggestion that I started prototyping a bit once (unfortunately the prototype is gone but it was pretty simple).\nFirst: Rename DnxSdk to DnxTestContext and hang the GetTestFolder/GetSolution/etc. methods off of it. \nThen: Replace the use of InlineDataAttribute with a new custom DnxSdkTestAttribute (inheriting from XUnit's DataAttribute) which provides instances of DnxTestContext appropriate to the current test (you get the MethodInfo in the function which generates the test data so you can easily get the class name/method name/etc.) and the author's chosen SDKs.\nThe attribute would take a Flags enum SdkType which has the following structure:\n``` csharp\n[Flags]\npublic enum SdkType {\n    Mono = 1,\n    ClrWinX86 = 2,\n    ClrWinX64 = 4,\n    CoreClrWinX86 = 8,\n    CoreClrWinX64 = 16,\n    CoreClrMacOSX64 = 32,\n    CoreClrUbuntuX64 = 64,\n// Combinations!\nAllClr = ClrWinX86 | ClrWinX64,\nAllCoreClr = CoreClrWinX86 | CoreClrWinX64 | CoreClrMacOSX64 | CoreClrUbuntuX64,\nAllWindows = AllClr | CoreClrWinX86 | CoreClrWinX64,\n\n// These ones are primarily for future expansion, because why not\nAllMac = CoreClrMacOSX64,\nAllUbuntu = CoreClrUbuntuX64,\nAllUnix = AllMac | AllLinux,\nAllLinux = AllUbuntu,\nAllNonWindows = AllUnix\n\n}\n```\nAs a side-benefit, we could even merge in some of what ConditionalTheory currently does to add skip conditions by ensuring we never run use Windows SDKs on Non-Windows OSes, etc.\nThis also removes the need for the base-class\nA sample test with this could look like this:\ncsharp\n[Theory]\n[DnxSdkTest(SdkType.AllWindows)]\npublic void MyDnxTest(DnxTestContext test) {\n    var solution = test.GetSolution(\"FooBar\");\n    test.Dnu.Restore(solution.GetProject(\"FooBar\")).EnsureSuccess();\n    // etc...\n}\nIn theory, we could actually create our own version of TheoryAttribute to reduce it down to a single attribute, but that would mean re-implementing more xunit code which seems unnecessary.\nThoughts? /cc @davidfowl @troydai \n. Absolutely fine with me :)\n. Looking good. A few comments inline.\n. LGTM\n. I haven't done a full build verify pass yet, but I wanted to let you three see it first :)\n. I'm impressed that it actually builds in travis ;). I didn't even finish my build verify run. I guess I'm just that good :trollface: \n. Build is fixed and everything is squashed. Please review @lodejard @davidfowl \n. /cc @emgarten and @yishaigalatzer for similar NuGet changes\n. Yeah, it's in\n. It's definitely using the wrong name. Did you ever use the WEBPROJ_ENABLEBETA7RENAMES environment variable to disable the use of the rename? If so, you need to remove that setting.\n. Ah yeah, removing it from the command line actually just sets it to empty in that command prompt.\n. We don't support -Persistent at the machine level. You can install to the machine location but can't modify the global PATH in dnvm right now.\n. If you're running multiple app pools, do you really want them all to share the DNX version? We didn't find much use case for dnvm use -persistent because generally you want an app to be able to control it's DNX version, but let us know if we're wrong there.\nThere is definitely a use for a globally-defined DNX_HOME defining search paths, and I think we've got that. The batch file used to bootstrap DNX in this scenario would work by searching those paths for the requested version, so you can dnvm install -g and then it should \"Just Work\" :)\n. FYI, it does look like the DNVM install script does not set DNX_HOME globally so that might be a gap in our strategy there. I believe the MSI does set that variable though.\n. I believe it was removed because it means DNVM setup has to be run elevated (at least it does in order for this to work). We can review that decision, it's super easy to put back in.\n. Yeah, that should be fine. We're absolutely targeting that scenario. The script that is used to launch your app would search DNX_HOME to find the desired runtime, so as long as we ensure that the global install directory is on DNX_HOME we should be set. I'll file a bug on dnvm to look at this.\n. aspnet/dnvm#439\n. FYI, you'd just be installing the one MSI (the DNVM MSI), not an MSI per runtime. I agree that we should have an MSI-less option though.\n. Since at the moment we embed System.Net.Http in the DNX, we'd place it in the DNX runtime folder.\n. Is there a way for us to detect the Mono version and fail fast? Heck, we could even do it in the dnx shell script\n. Honestly it can kinda be as simple as some mono --version | grep action. Maybe I'll play with it later.\n. Can you confirm my understanding of the switches?\n--debug - Runs until the earliest point at which managed debugging can be initialized and waits for the debugger (for CoreCLR this is after CLR boot, for Desktop this is right away)\n--bootstrapper-debug - Pauses immediately after launching, regardless of CLR status.\n. If I'm right, maybe we should just move --debug to the first managed code executed. Also, in that case, I'd suggest we do not put --bootstrapper-debug in the help text since it is purely for our debugging, not for debugging user apps.\n. Travis failure is because the test is running on Mono but shouldn't. I can't fix it right this second but it shouldn't block review. I'll add a framework skip condition to it.\n. Client Profile doesn't seem to work properly on Mono.\n. Fowler said I could :shipit: when travis passed soooo ;)\n. Well, the problem with that is that the dll would be completely empty. We auto-exclude \"shared\" files from compilation. If a binary package is needed, we'd produce a separate non-Sources build.\n. We do not at the moment because those packages aren't really designed for \"official public consumption\" (which is a major reason they are Sources packages). Others have and do use them and that's OK, but they are only officially supported as Sources packages.\nWe could discuss making official binary distributions but I'm not sure we are prepared to do that for 1.0.0. In the interim, you could totally just take the source and build it into your own binary package.\n. :shipit: after addressing feedback.\n. Fixed in #2677 \n. The travis PR build failure looks unrelated. I'll restart it.\n. Well, it does look like DNX is taking the net40 DLL, from the compilation spew:\n```\nBuilding Newtonsoft.Json.Tests for .NETFramework,Version=v4.5\n  Using Project dependency Newtonsoft.Json.Tests 1.0.0\n    Source: C:\\development\\Newtonsoft.Json\\Src\\Newtonsoft.Json.Tests\\project.json\nUsing Package dependency Autofac 3.5.0\n    Source: C:\\Users\\jamesn.dnx\\packages\\Autofac\\3.5.0\n    File: lib\\net40\\Autofac.dll\n```\nCan you point us at the specific project that's failing so we can give this a look?\n. Got it\n. Will do!\n. :shipit:\n. :shipit:\n. DNX does not support projects at the root of any drive (even a subst-ed drive) because it uses the parent directory name as the project name.\n. Yeah, this is going to get a bit hairy. We can do fairly simple processing of the OS name to get it in to a RID.\nThe Travis issue is concerning. I'm not sure right now what the best option is... /cc @davidfowl \n. Ouch, this should happen for beta8. /cc @muratg @DamianEdwards @Eilon \nOSX is working, but Ubuntu is reporting a RID of linux.Ubuntu 14.04-x64 when it should be ubuntu.14.04-x64\n. We could consider taking a small fix here as well to allow Linux Mint 17.2 to behave as though it is Ubuntu 14.04 (since they share a package base). Thoughts @DamianEdwards? This would not be a formal declaration of support, just kinda like we do with Mono: \"It should work, but no formal guarantees\"\n. :+1: thanks\n. Maybe should consider using os-release for distro reporting. It's possible it's closer to what we're looking for. As far as I can tell it is fairly ubiquitous (like lsb-release)\n. Agree entirely on the timing, changing to os-release would be for RC at least.\n. As far as I could tell, os-release definitely exists on Fedora.\n. I have /etc/os-release on the Debian jessie docker image. Strange that it would have been removed. DNX does depend on this to install the correct packages. Even so, unfortunately base Debian is not supported at this time, only Ubuntu 14.04. One of the packages the CoreCLR depends on, libicu, varies it's binary interface by version and different distros run different versions so it's difficult to create a single binary that works on all distros.\nIn bleeding edge RC1 builds (and I mean really bleeding edge, it may not even be released to the feed yet ;)), you can try setting the DNX_RUNTIME_ID environment variable to ubuntu.14.04-x64 and see if it works on your Debian jessie installation. If it does, we can look at adding Debian Jessie as a compatible runtime.\n. I don't know where the officially-supported distros are published, @DamianEdwards or @danroth27 might. Debian Jessie should work in general, which is why the Docker image uses it (to reduce the size of the image), but I know that CoreCLR only provides packages for Ubuntu 14.04 at the moment (I believe they are expanding to CentOS soon) and doesn't test on raw Debian so we're somewhat limited in what we can officially support there.\nThese decisions are still very much up-in-the-air though, so the documentation is still a little rough. We'll be clarifying and fine-tuning the documentation as we move towards RTM.\n. Reopened just to track my final clean-up work.\n. Travis failure seems unrelated.\n. ping @davidfowl @dougbu @rynowak \n. Not quite. The NuGet code has a lot of dependencies (NuGet.RuntimeModel, NuGet.LibraryModel, etc.). But this is basically imitating the way the NuGet code built the list of runtime dependencies.\n. This is the last day of Beta8, can I get a squirrel from someone?\n. :+1:\n. Actually this is different, this is merging the DTH functional test tools into the common test framework. The existing PR is just for converting DTH tests to use the common framework as well as the DTH tools.\n. One side note before unleashing the world on it :). As far as I know, the only way to achieve this right now is to build a separate dnx.exe that is marked as a Windows Application instead of a Console Application. That's certainly how Java handled it (java vs javaw). If that's the case, we'd want to discuss this further before accepting a PR.\nFeel free to explore the options and get back to us though :)\n. @prasannavl If that model works everywhere, it would probably be ok. My initial concern would be Nano Server where most of the Win32 APIs are gone.\n@davidfowl If we have to... I guess :)\n. My only concern is that I've never been a big fan of javaw because it creates confusion (which do I use and why?). If it's the only way to get it to work, then maybe we'll have to go that way.\n. We picked darwin because it tends to be more common:\n- https://static.rust-lang.org/dist/rust-1.3.0-i686-apple-darwin.tar.gz\n- https://nodejs.org/dist/v4.1.1/node-v4.1.1-darwin-x64.tar.gz\n- https://storage.googleapis.com/golang/go1.5.1.darwin-amd64.pkg\nAnd it matches the value returned by uname.\nHaving said that, I'd rather just align with the CLR team, so if they have a reason for picking osx (user-friendliness, etc.), I don't really mind :)\n. Travis should be fixed, other code review feedback addressed. Ping @davidfowl @troydai @halter73\n. Fixing travis and @JunTaoLuo 's comment. I'd like to get this in today for beta8 so the sooner I get sign-off the better :)\n. See https://github.com/aspnet/dnx/issues/2799 - We had an issue on our build server, it should be resolved shortly.\n. At most we would ship a separate package for project/lock file reading and that needs design. For now, dnx-watch could copy code (though of course that is a little brittle).\n. System.Xml.XDocument 4.0.11 requires net46/dnx46 or higher. You need to reference System.Xml.XDocument 4.0.0 in your dnx451 target.\n. This is probably going to be unnecessary after my work on #1847 which is going to replace our custom code with NuGet.Configuration.\n. We've seen a few of these in random repositories at random times. Xunit issue maybe?\n. You guys beat build verify so I'll wait for that and Travis before merging :)\n. @moozzyk Should have them all updated now.\n. Looking good, just a few clean-ups and one slightly larger item to expand on our project.json parsing errors.\nI may have been a little bored on the bus and gone a little crazy with the parameter name comments ;P\n. Actually, making this a real feature (not just for debugging in VS) is extremely useful for *nix daemon management. Many daemon launchers have a command line switch you can use to write a \"PID File\" which is just a file containing the PID (https://stackoverflow.com/questions/8296170/what-is-a-pid-file-and-what-does-it-contain). For example:\ndnx --pid-file /var/run/mycoolapp_kestrel.pid kestrel\nIf people don't hate the idea, I'd be up for giving it a try as a separate PR (which could also remove this, I assume, since VS could just specify that command line argument). So no action is needed on this PR, just wanted to see what folks thought.\n. :ship: the :hankey: out of :it:\n. :shipit: - I had more ideas but decided to leave them for future PRs ;)\n. cough https://github.com/aspnet/dnx/pull/2795 cough :P\n. Looks good to me. I'm not super confident I follow all the DTH logic involved though, so maybe @davidfowl should take a scan before you merge :).\n. Compilation only occurs immediately before an assembly is loaded. So if runBar never needs to load anything out of Foo, it never compiles it. Calling Assembly.Load on Foo would force a compilation.\n. :shipit: \n. :shipit: \n. I'm going to need some more details to figure this out. @loqix can you attach:\n- The content of project.json and project.lock.json\n- The output of dnx --version\n. Yeah, I've noticed this and it's a pain. I can take it.\n. Figured I'd just bash this out. PR inbound.\n. Waiting for full sign-off on this going in to release so review, but be aware that it might change a little (we may remove the additional RID mappings)\n. Got sign-off on taking this bug. Will merge when someone gives me a squirrel :)\n. Fixes #2773 \n. Yep, I'll merge it momentarily\n. I can repro this on OS X 10.11 (it does not seem to repro on 10.10 Yosemite, only on El Capitan).\nWe don't officially support 10.11 yet, but we can start investigating why it is failing now :).\n. FYI, output with DNX_TRACE\n```\n\u203a DNX_TRACE=1 dnx\nLoaded module: dnx.coreclr.dylib\nFound export: CallApplicationMain\nUnhandled Exception:\n   Cannot print exception string because Exception.ToString() failed.\n```\n\u203a uname -a\nDarwin zuse.local 15.0.0 Darwin Kernel Version 15.0.0: Wed Aug 26 16:57:32 PDT 2015; root:xnu-3247.1.106~1/RELEASE_X86_64 x86_64\n/cc @moozzyk @BrennanConroy \n. oh GREAAAAAAAAAT\n. What version of Ubuntu? We only support 14.04 at the moment.\n. https://github.com/aspnet/Docs/blob/1.0.0-beta8/aspnet/getting-started/installing-on-mac.rst :stuck_out_tongue_winking_eye: \n. Filed https://github.com/aspnet/dnx/issues/2881 to fix this in RC...\n. I can send you a Hex diff if you want ;P\n. \n. Merged to both release and dev\n. We're going to try and detect the specific distros we support: ubuntu.14.04, centos.? (I'm not 100% sure what version it is). For other distros, we'll do our best to detect them (Linux Mint, etc.) but provide an environment variable to override it manually and globally (if needed): DNX_RUNTIME_ID\n. The fallback hierarchy was only for Windows. It is generally expected that the runtime does not perform fallback, but we needed to do it for Windows.\nSince the RID override is only intended for use with Ubuntu/OSX, this behavior is expected\n. The expectation was always that a project will be restored explicitly for the runtime it is targeting, thus all fallbacks would be performed during restore. The Windows fallback is purely an dev-time optimization to allow us to use win7 by default on Windows, regardless of the OS version (since portability between Windowses is generally expected).\n. Whats the status on this? @moozzyk ?\n. :+1: Seems like a reasonable YOLO push candidate. It's super small :)\n. You could also try publishing the test with --no-source and running the output.\n. Correct, he pinged me, which started the investigation :)\n. Travis only failed on OSX and it was because of a fix I made in dev that needs to be ported here.\n. Adding much more than a mocked-up unit test is going to take a significant effort, so it depends on when we need to get this in.\n. I'll build a unit test to start with. We can see what that looks like\n. Added a unit test.\n. ping @davidfowl \n. Merged\n. Agreed, but we should provide the distro id/release in a field as well so we can generate the correct RID.\n. Verbal approval from @Eilon @muratg . As I expected, the answer to \"Without this fix, beta 8 doesn't work. Should we take it?\" was, \"Um... Yes\". :trollface: \n. :shipit:\n. Hmm. I can't repro this...\nMy project.json\njson\n{\n    \"frameworks\": {\n        \".NETPortable,Version=v4.5,Profile=Profile111\": {\n            \"dependencies\": {\n                \"Newtonsoft.Json\": \"6.0.8\"\n            }\n        }\n    }\n}\nRestores to this project.lock.json, which is selecting the correct data\njson\n{\n  \"locked\": false,\n  \"version\": 1,\n  \"targets\": {\n    \".NETPortable,Version=v4.5,Profile=Profile111\": {\n      \"Newtonsoft.Json/6.0.8\": {\n        \"type\": \"package\",\n        \"compile\": {\n          \"lib/portable-net45+wp80+win8+wpa81+aspnetcore50/Newtonsoft.Json.dll\": {}\n        },\n        \"runtime\": {\n          \"lib/portable-net45+wp80+win8+wpa81+aspnetcore50/Newtonsoft.Json.dll\": {}\n        }\n      }\n    }\n  },\n  \"libraries\": {\n    \"Newtonsoft.Json/6.0.8\": {\n      \"type\": \"package\",\n      \"sha512\": \"7ut47NDedTW19EbL0JpFDYUP62fcuz27hJrehCDNajdCS5NtqL+E39+7Um3OkNc2wl2ym7K8Ln5eNuLus6mVGQ==\",\n      \"files\": [\n        \"lib/net20/Newtonsoft.Json.dll\",\n        \"lib/net20/Newtonsoft.Json.xml\",\n        \"lib/net35/Newtonsoft.Json.dll\",\n        \"lib/net35/Newtonsoft.Json.xml\",\n        \"lib/net40/Newtonsoft.Json.dll\",\n        \"lib/net40/Newtonsoft.Json.xml\",\n        \"lib/net45/Newtonsoft.Json.dll\",\n        \"lib/net45/Newtonsoft.Json.xml\",\n        \"lib/netcore45/Newtonsoft.Json.dll\",\n        \"lib/netcore45/Newtonsoft.Json.xml\",\n        \"lib/portable-net40+sl5+wp80+win8+wpa81/Newtonsoft.Json.dll\",\n        \"lib/portable-net40+sl5+wp80+win8+wpa81/Newtonsoft.Json.xml\",\n        \"lib/portable-net45+wp80+win8+wpa81+aspnetcore50/Newtonsoft.Json.dll\",\n        \"lib/portable-net45+wp80+win8+wpa81+aspnetcore50/Newtonsoft.Json.xml\",\n        \"Newtonsoft.Json.6.0.8.nupkg\",\n        \"Newtonsoft.Json.6.0.8.nupkg.sha512\",\n        \"Newtonsoft.Json.nuspec\",\n        \"tools/install.ps1\"\n      ]\n    }\n  },\n  \"projectFileDependencyGroups\": {\n    \"\": [],\n    \".NETPortable,Version=v4.5,Profile=Profile111\": [\n      \"Newtonsoft.Json >= 6.0.8\"\n    ]\n  }\n}\nThis is on beta7:\nC:\\Scratch\\dnx2967 (dnx-clr-win-x86.1.0.0-beta7)\nps1 # dnx --version\nMicrosoft .NET Execution environment\n Version:      1.0.0-beta7-15532\n Type:         CLR\n Architecture: x86\n OS Name:      Windows\n OS Version:   6.2.9200.0\n. Can you go to your C:\\Users\\[username]\\.dnx\\packages\\Newtonsoft.Json\\6.0.8 folder and see what's in there?\n. With some debugging we tracked down the issue. The reason I couldn't repro it was because I didn't have Xamarin installed. We need to port the OptionalFrameworks concept from NuGet 2.x. Without it, if a user has Xamarin installed, it will fail to install other Profile111 packages (unless they explicitly add Xamarin to their portable- names.\nI'll do this for RC2, probably in the next day or so.\n. /cc @muratg @davidfowl @Eilon \n. Ping @muratg. I don't really have the cycles for this with dotnet-cli work. Can we find someone to take this on?\n. Well someone said we shouldn't review code until Travis passes soooooo... :trollface: \n. Well someone said we shouldn't review code until Travis passes soooooo... :trollface: \n. Assuming Travis passes without significant changes, :shipit: \n. Assuming Travis passes without significant changes, :shipit: \n. What's the status of this @davidfowl ?\n. What's the status of this @davidfowl ?\n. It's definitely possible there's something weird there. Microsoft.Dnx.Compilation and Microsoft.Dnx.Runtime are not designed to be used by applications at all (they were published due to accidental usage in other ASP.NET 5 projects and have been removed from newer versions). I would strongly discourage you from referencing those packages as binaries. If you want to take elements of the source and use them, that's more feasible, but those APIs are extremely volatile and only designed to work in the runtime code itself.\n. It's definitely possible there's something weird there. Microsoft.Dnx.Compilation and Microsoft.Dnx.Runtime are not designed to be used by applications at all (they were published due to accidental usage in other ASP.NET 5 projects and have been removed from newer versions). I would strongly discourage you from referencing those packages as binaries. If you want to take elements of the source and use them, that's more feasible, but those APIs are extremely volatile and only designed to work in the runtime code itself.\n. Right now, that's not a supported scenario. If you want to take some code from DNX to see if you can make it work, go for it, but we don't intend to support it for v1. If it's important to you, we'll look at it in future planning!\n. Right now, that's not a supported scenario. If you want to take some code from DNX to see if you can make it work, go for it, but we don't intend to support it for v1. If it's important to you, we'll look at it in future planning!\n. It looks like your project.json file is missing the frameworks section. That section is required in beta 8 (see https://docs.asp.net/en/latest/dnx/projects.html#targeting-frameworks for more)\n. It looks like your project.json file is missing the frameworks section. That section is required in beta 8 (see https://docs.asp.net/en/latest/dnx/projects.html#targeting-frameworks for more)\n. To make sure I fully understand the plan, we just need to update https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Runtime.Sources/Impl/EntryPointExecutor.cs#L70 to check Assembly.EntryPoint and use that, correct? Do we want to fall-back to the old logic or just make a clean break?\n(also, remove type activation stuff)\n. To make sure I fully understand the plan, we just need to update https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Runtime.Sources/Impl/EntryPointExecutor.cs#L70 to check Assembly.EntryPoint and use that, correct? Do we want to fall-back to the old logic or just make a clean break?\n(also, remove type activation stuff)\n. Hack away!\n:shipit: \n. Hack away!\n:shipit: \n. Once build verify passes I'll remove dotnet-core from the NuGet.Config and merge. Private reflection is good enough for now.\n. Once build verify passes I'll remove dotnet-core from the NuGet.Config and merge. Private reflection is good enough for now.\n. Fixing travis, and resolving @moozzyk 's comment then I'll merge\n. Fixing travis, and resolving @moozzyk 's comment then I'll merge\n. I think it makes sense to allow everything up to and including postbuild to (in theory) contribute to packaging. Could you use packInclude and prebuild? Or do you have to generate the files as part of the build?\nEDIT: Just re-read your original comment. Since you need to process the PDB, it probably wouldn't quite work... Feedback noted ;)\n. I think it makes sense to allow everything up to and including postbuild to (in theory) contribute to packaging. Could you use packInclude and prebuild? Or do you have to generate the files as part of the build?\nEDIT: Just re-read your original comment. Since you need to process the PDB, it probably wouldn't quite work... Feedback noted ;)\n. @davidfowl and I discussed this. With the rough testing situation because of the CoreCLR break, we're going to punt this for RC1. It wasn't really necessary, just a nice-to-have. /cc @muratg @Eilon @DamianEdwards \n(FYI, despite Travis saying it's green, this branch is NOT good. Travis is lying because of the CoreCLR bug, which I know for sure because I have an intentionally failing test in the PR ;))\n. @davidfowl and I discussed this. With the rough testing situation because of the CoreCLR break, we're going to punt this for RC1. It wasn't really necessary, just a nice-to-have. /cc @muratg @Eilon @DamianEdwards \n(FYI, despite Travis saying it's green, this branch is NOT good. Travis is lying because of the CoreCLR bug, which I know for sure because I have an intentionally failing test in the PR ;))\n. Can you try running the following and pasting the output here?\nDNX_TRACE=1 dnx --version\nFYI: The only officially supported Linux platform for beta8 is Ubuntu 14.04. We will be adding other distros, but it may just be that Ubuntu 15.10 changes something we depend on right now. We'll still take a look and see what we can do, but our priority is Ubuntu 14.04.\n. Can you try running the following and pasting the output here?\nDNX_TRACE=1 dnx --version\nFYI: The only officially supported Linux platform for beta8 is Ubuntu 14.04. We will be adding other distros, but it may just be that Ubuntu 15.10 changes something we depend on right now. We'll still take a look and see what we can do, but our priority is Ubuntu 14.04.\n. Yeah, those instructions are out of date and need to be updated for beta8, I suggest using the more up-to-date instructions here: https://docs.asp.net/en/latest/getting-started/installing-on-linux.html\nSpecifically, you need to install icu. Running sudo apt-get install libunwind8 gettext libssl-dev libcurl3-dev zlib1g libicu-dev should get everything you need.\n. Yeah, those instructions are out of date and need to be updated for beta8, I suggest using the more up-to-date instructions here: https://docs.asp.net/en/latest/getting-started/installing-on-linux.html\nSpecifically, you need to install icu. Running sudo apt-get install libunwind8 gettext libssl-dev libcurl3-dev zlib1g libicu-dev should get everything you need.\n. I filed a PR to update those docs.\n. I filed a PR to update those docs.\n. It's possible that Ubuntu 15.10 has an incompatible version of libicu then. Unfortunately libicu does not have a stable ABI between releases, so changes to that break binary compatibility.\n. It's possible that Ubuntu 15.10 has an incompatible version of libicu then. Unfortunately libicu does not have a stable ABI between releases, so changes to that break binary compatibility.\n. Yeah, it looks like Ubuntu 15.10 uses libicu55 but Ubuntu 14.04 uses libicu52. These are not binary-compatible releases so there will need to be an updated version of the CoreCLR to support 15.04. Since 14.04 is the current Ubuntu LTS release, that is the target version for CoreCLR presently so I suggest you use that version for now.\n. Yeah, it looks like Ubuntu 15.10 uses libicu55 but Ubuntu 14.04 uses libicu52. These are not binary-compatible releases so there will need to be an updated version of the CoreCLR to support 15.04. Since 14.04 is the current Ubuntu LTS release, that is the target version for CoreCLR presently so I suggest you use that version for now.\n. (FYI, it looks like Ubuntu 15.04 does have the correct version of libicu, so you could try that)\n. (FYI, it looks like Ubuntu 15.04 does have the correct version of libicu, so you could try that)\n. Cool! Good to know :)\n. Cool! Good to know :)\n. We are not supporting dnvm on bash. There have been some PRs to help make it work, but we don't plan to run tests on that platform at this time. dnx will continue to work as it is a plain executable. You may be able to use dnu by running cmd /c dnu [args] from git bash to launch the dnu.cmd batch file inside cmd\n. We are not supporting dnvm on bash. There have been some PRs to help make it work, but we don't plan to run tests on that platform at this time. dnx will continue to work as it is a plain executable. You may be able to use dnu by running cmd /c dnu [args] from git bash to launch the dnu.cmd batch file inside cmd\n. We're looking at options to solve this by RTM. Believe me, we are well aware of how much it sucks, having to debug DNXes all day ;P\nThanks for the report though, good to keep it on our radar :D\n. We're looking at options to solve this by RTM. Believe me, we are well aware of how much it sucks, having to debug DNXes all day ;P\nThanks for the report though, good to keep it on our radar :D\n. I love the idea of using docker to share the repro! I'm working on investigating it now. Thanks!\n. I love the idea of using docker to share the repro! I'm working on investigating it now. Thanks!\n. Looks like dnu restore is not properly honouring the DNX_RUNTIME_ID environment variable that we use to override the OS detection (since DNX technically only supports Ubuntu, but we use Debian). This would be a bug in DNX (but would be fixed in NuGet for RC2 rather than here). As a workaround though, you can get your scenario working by changing your dnu restore call to dnu restore --runtime ubuntu.14.04\ni.e. change Line 7 in your Docker file (https://github.com/ChaosEngine/dockerfiles/blob/master/entityframework/Dockerfile#L7) to:\nRUN [ \"dnu\", \"restore\", \"--runtime\", \"ubuntu.14.04-x64\" ]\n. Looks like dnu restore is not properly honouring the DNX_RUNTIME_ID environment variable that we use to override the OS detection (since DNX technically only supports Ubuntu, but we use Debian). This would be a bug in DNX (but would be fixed in NuGet for RC2 rather than here). As a workaround though, you can get your scenario working by changing your dnu restore call to dnu restore --runtime ubuntu.14.04\ni.e. change Line 7 in your Docker file (https://github.com/ChaosEngine/dockerfiles/blob/master/entityframework/Dockerfile#L7) to:\nRUN [ \"dnu\", \"restore\", \"--runtime\", \"ubuntu.14.04-x64\" ]\n. Note I do still get an exception after this change, but it appears to be something more specific to your configuration:\nAn exception occurred in the database while iterating the results of a query.\n      System.PlatformNotSupportedException: Integrated Security is not supported on non-Windows platform.\n         at System.Data.ProviderBase.DbConnectionPoolGroup.GetConnectionPool(DbConnectionFactory connectionFactory)\n         at System.Data.ProviderBase.DbConnectionFactory.GetConnectionPool(DbConnection owningObject, DbConnectionPoolGroup connectionPoolGroup)\n         at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\n         at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\n         at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\n         at System.Data.SqlClient.SqlConnection.Open()\n         at Microsoft.Data.Entity.Storage.RelationalConnection.Open()\n         at Microsoft.Data.Entity.Query.Internal.QueryingEnumerable.Enumerator.MoveNext()\n         at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()\n         at Microsoft.Data.Entity.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()\n. Note I do still get an exception after this change, but it appears to be something more specific to your configuration:\nAn exception occurred in the database while iterating the results of a query.\n      System.PlatformNotSupportedException: Integrated Security is not supported on non-Windows platform.\n         at System.Data.ProviderBase.DbConnectionPoolGroup.GetConnectionPool(DbConnectionFactory connectionFactory)\n         at System.Data.ProviderBase.DbConnectionFactory.GetConnectionPool(DbConnection owningObject, DbConnectionPoolGroup connectionPoolGroup)\n         at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\n         at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\n         at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\n         at System.Data.SqlClient.SqlConnection.Open()\n         at Microsoft.Data.Entity.Storage.RelationalConnection.Open()\n         at Microsoft.Data.Entity.Query.Internal.QueryingEnumerable.Enumerator.MoveNext()\n         at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()\n         at Microsoft.Data.Entity.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()\n. Yeah, I figured it was just something in the connection string for the repro project.\n. Yeah, I figured it was just something in the connection string for the repro project.\n. Cool! If anyone is still encountering issues, please feel free to reopen!\n. Cool! If anyone is still encountering issues, please feel free to reopen!\n. :shipit: after filing a bug to handle the OS Version.\n. :shipit: after filing a bug to handle the OS Version.\n. Fixing travis now.\n. Fixing travis now.\n. Should be fixed now, there was a problem with how I was parsing the runtime names.\n. Should be fixed now, there was a problem with how I was parsing the runtime names.\n. Alright, one travis worked (and the other is just still building, should pass as well). I'm going to squash and merge, then monitor the CI\n. Alright, one travis worked (and the other is just still building, should pass as well). I'm going to squash and merge, then monitor the CI\n. :shipit: (assuming this actually fixes the EF issue)\n. I'm taking a look at this. It'll simplify RID generation in a few places.\n. Why travis sad?\n. Then lets kick it again (just did that)\n. :shipit:\n@ericstj will your changes to the RID definitions also make tomorrow's build (assuming all goes well)?\n. Can you run dnu restore for the projects that are showing the error on the command line and post the output?\n. Minor reword suggestion but otherwise looks good to me!\n. Looks good to me! Clean up the extra space added (@moozzyk 's comment) and I'll merge it!\n. Looks good! Thanks for the contribution!\n. \"failed to locate libcoreclr with error libunwind-x86_64.so.8: cannot open shared object file: No such file or directory\"\nI don't really know...\n. @BrennanConroy says Travis broke something. Despite our build explicitly asking for Ubuntu 14.04, we're now getting 12.04 again. If you give me a squirrel I'll just merge and keep a close eye on the Linux build.\n. Currently, the assembly name for a project is always the name of the immediate parent folder of the project.json file. We're looking at changing that, but for now that's the restriction. You could work around this restriction by copying the app code to a new location while preserving the parent folder path. For example:\ncp MyApp MyAppCopy/MyApp\ndnu publish ... MyAppCopy/MyApp --out ...\n. There may still be an issue there we can look at. RC1 doesn't officially support arm, so the timing is a little less rushed :)\n. We have a fix and we're working on getting it out ASAP, so you won't have to wait for RC2. As long as 23405 is either in your local cache or on one of your feeds, the direct reference shouldn't ever bump you up. That warning, in fact, is designed to tell you that it was forced to bump you up because it couldn't find the exact match.\n. Be very careful with using the aspnetrc1 feed. There's nothing terribly wrong with it, but it is purely designed for internal testing, so we often replace packages there without changing the version. Also, the released version may end up with the same version number.\nI'd suggest deleting any 1.0.0-rc1-update1 runtimes you got from there and instead use the https://www.myget.org/F/aspnetcirelease/api/v2 feed if you want the latest builds of the fix. The latest build there is identical to the one you got from aspnetrc1 but has a build number in the version and should upgrade safely to the released version when it is released.\n. For now, the workaround. There is an update to RC1 with a fix being released soon. You can also use the aspnetcirelease feed in DNVM if you want early access to the fixed DNX build.\n. Yes, it should be in the latest RC2 builds. I merged to dev last week. If not, let me know! I might have missed something :)\n. Thanks for the report, we're aware of the issue and are investigating! /cc @BrennanConroy @muratg \n. Grah! It's nearest-wins plus our weird embedded Microsoft.NETCore.Platforms version. I'm going to remove that weird version and instead manually merge in our runtime data (allowing existing runtime data to override it). We only have that package to ensure that if someone doesn't pull in a package that defines what win10-x64 (and friends) mean, we still know what they mean.\n. There are probably some issues with this in arm. Right now arm isn't formally supported, so we'll try to take a look but this issue is focused on solving the issues with the officially supported flavors of RC1.\nThanks for the report!\n. :up: :date: @JunTaoLuo @davidfowl \n. Confirmed that --no-source is fixed on Mac with this. Note that publishing for a specific runtime will still be quirky in El Capitan (since we'll publish for 10.10 if the selected runtime is darwin, but the runtime will detect 10.11)\n. This PR was to the wrong branch, but this is now merged into release, so I'm closing it.\n. Probably still relevant, but @moozzyk can confirm\n. Augh... wrong repo...\n. You want the System.IO.FileSystem package. You can use the unofficial \"reverse package lookup\" site: http://packagesearch.azurewebsites.net/ to look up which packages contain specific types.\nThat should resolve your issue, but if not please don't hesitate to reopen and let us know!\n. Minor comments. :shipit: once resolved\n. @snissim can you try removing that dependency and adding a dependency on Microsoft.NETCore.Platforms instead?\n@muratg Probably not. It may not actually be an issue. The Microsoft.NETCore.Platforms dependency fixes it and is by design.\n. You need both Microsoft.NETCore.Platforms and System.Net.Security (and/or System.Net.NetworkInformation). The \"Platforms\" package is a special NuGet package that contains additional data used to locate platform-specific implementations.\n. :shipit: \n. :shipit: \n. :shipit: Man, I can't wait until we can just wipe DNX out :)\n. :+1: thanks @victorhurdugaci !\n. If things are mostly playing well together, this looks good to me :shipit:. It's not like this has to be super clean :).\n. Looks good. Let's get it in. :shipit: \n. > The real change is in test/Microsoft.Dnx.CommonTestUtils/TestUtils.cs and src/Microsoft.Dnx.Tooling/Utils/DnuEnvironment.cs\nThank you for that :). Because when I first saw the files list...\n\n. :shipit: \n. I believe it's not an alias, it's a different thing. We want to hold netstandardapp1.5 as something we could use in different ways later. /cc @DamianEdwards \n. @pranavkm Yep\n. The app in netcoreapp is definitely important. Unfortunately netcore is already taken and is an alias for win ;). netcore45 maps to win8, netcore451 maps to win81, and netcore50 maps to uap10.0\n. \n:shipit:\n. There will be no next version of DNX. The only reason we are updating it was to allow our current builds which still used it to work. DNX is being replaced with the .NET Core CLI\n. Can we just have dotnet.coreclr.dll and dotnet.clr.dll ? core45 makes even less sense because we are trying to avoid referring to a specific version of the CoreCLR\n. Just \"for Mono\" I think. It's the same package on Linux/BSD/OSX/etc. because we don't have a native host for Mono, we boot straight to managed code. It could even run on Mono for Windows (kinda)\n. \"CoreCLR flavors\"? Sounds a bit better I think... or maybe \".NET Core\".\nIMHO \"dotnet\" is really only for cases where \".NET\" is inappropriate (package IDs, file/folder names, etc.)\n. FYI, Right now the only place this environment variable is set is in the kvm tests. It's an override, but if it isn't specified, it needs to have a default value.\nIf DOTNET_GLOBAL_PATH isn't set, this code should fall back to %ProgramFiles%\\Microsoft .NET Cross-Platform Runtime (or whatever we finalize on... maybe put it in a constant to make it easier to move around :))\n. Weird... I kinda expected VS would keep tabs/spaces consistent. I'll fix it up.\n. Ever since installing Mads' Trailing Whitespace Visualizer I can't avoid cleaning it up :)\n. Fair point :). I'll do a scan of the projects for that kind of language.\n. Hrm. @davidfowl said it was a user-level setting :). I'll turn it off again.\n. I usually do!\n. I copied these from a different project, I'll update that source project to have a * too.\n. done\n. done\n. done\n. done\n. done\n. done\n. done\n. done\n. done\n. done\n. done\n. No... VS did it :(. I'll remove.\n. What creates this?\n. Weird that it isn't the default... I don't think I changed it. Anyway, fixed settings and file.\n. aye\n. Lol. I literally made the same change at one point while working on this but was like \"Nah. I bet there's a reason it's a bool\"\n. Is there any way to glob this? \"submodules/*/src\"?\n. I wonder if we should just have a \"build/placebinaries\" script that does all three of these commands for you. Also, it would be nice if we could also put the binaries into the right place for x64 builds. That's a side-issue though.\n. Yeah, we should use https. You only ever need creds if you push from the submodule. This is a known issue with submodules, users can't customize the protocol they use. It sucks but hey, you can always use a credential helper like this fantastic specimen from some amazing developer :)\n. most of this code is copy-pasta, I'll go through and touch up the various notes you've made.\n. It is for future use. I'm trying to update with code as I go so we don't end up with one giant review, but that may be more trouble than it's worth :)\n. Note: When the runtime uses this, it will be pulling it and NuGet.Versioning in as source, so this project.json will be irrelevant.\n. Yes, good catch :), I introduced the constants after this code and forgot to put it in here.\n. Well, we call this method exactly once, so I'm not sure it's worth allocating the memory :P\n. Even when they are constructors? I think that organizing members by type (Constructor/Property/Method/etc) trumps organizing by visiblity. I think this should be right by the other (public) constructor.\n. Interfaces and Json aren't. Remember ANIs are dead? :)\n. The world ends. No biggie.\n. I'll take your word for it then and clarify later.\n. But seriously, it'll throw and we'll catch it in a top-level try...catch in Program. Said 'try...catch' will write to the console AND rethrow (so that debuggers can grab it if they want it). We can revise this later.\n. Hrm. The other projects don't make this a build dependency. I'm going to leave it for now, but we can catch up later and have a \"build dependencies reckoning\" :)\n. For the medium-term, I'm disabling this. It makes debugging a major pain and we don't need it yet. I could just disable it on my machine but eventually it's going to end up getting checked in (someone will do it) so we may as well know that we're doing it :)\n. Seriously? Are we going to just keep yanking this? Why isn't it being stored in the user file?\n. Yeah... --debug doesn't launch the debugger which is kind of annoying. Perhaps we can add \"--debug-launch\" that causes the VS JIT Debugger dialog to pop up. It's really useful to be able to just click your current VS instance and click OK rather than have to attach to process. Plus it means you always get the right klr.exe :)\nI'll remove this for now.\n. :+1:\n. What should it be? It's needed to get the Assembly Version in ReferenceAssemblyDependencyResolver:\n```\ninternal static NuGetVersion GetAssemblyVersion(string path)\n{\nif ASPNET50\nreturn new NuGetVersion(AssemblyName.GetAssemblyName(path).Version);\n\nelse\nreturn new NuGetVersion(System.Runtime.Loader.AssemblyLoadContext.GetAssemblyName(path).Version);\n\nendif\n}\n```\n. Again, used in FrameworkReferenceResolver. Sure it should be hard-coded, but it isn't now and that would be a separate work item IMHO.\n. No, this was a defensive check. I'll change it to an assert since it should never be true\n. :+1:\n. Makes sense, I'll remove it now, it's not actually needed yet :).\n. :+1: I haven't actually wired up the GAC resolver yet, but I'll put it at the end when I do\n. :+1: ExecuteApplication (since it's not executing the RuntimeHost :))\n. This might reappear in some future commits on this branch but I'll nuke it before final merging.\n. Looks like the resolver has changed since I copied it. I'll update\n. Still uses XDocument though...\n. :+1:\n. Done. I'm actually going to have the new runtime remove support for \"sources\", since that is in the plan anyway. Thoughts? (and yes, I'll also update the XRE global.json)\n. Yep, I went there. Logger Factory Factory :). I don't want to run the delegate if the KRE_TRACE variable is empty, so that's what you get!\n. Are we moving TraceSource stuff out of M.F.Logging? It's not on the queue from the API review. Unfortunately, due to source-inclusion, we have to have this package here even if we don't use it, unless the TraceSource logger is moved out of M.F.Logging and into a separate package.\n. Yeah, the current code seems to do that if a folder with the specified name exists but doesn't contain a project.json. I think I can fix that.\n. They are an artifact of an earlier bit of code I wrote to look things up. I'll remove these for now.\n. It's not the vim plugin :)\n. I realize RootNamespace is mostly irrelevant in a C++ project, but we should correct this value while we're here. \"dnx.clr\" (just like the Project Name)\n. Not yet, the runtime doesn't understand them or build them. That will happen in an upcoming PR, let's get this one in first\n. I'll kill this before merge.\n. It's the same feature that was used to rename \"sl4-wp71\" to \"wp71\". We're trying to rename a framework here, so it's the same concept.\nBasically all this affects is that BOTH frameworks that come in to IsCompatible go through this dictionary before comparison. Thus, aspnet50 is compared as identical to dnx451, etc.\n. Yes, we can clean it up once everything is working again.\n. Your PR doesn't seem to include this change, but it's only a dev-time thing. I can make a pass over the code this evening to get all of them updated. They aren't required for building though.\n. If you kpm build either of aspnetcore50 or dnxcore50, it will only build the section with that exact name. We can clean that up a bit. See #1344\n. #1343\n. Correct, but as part of #1342 right?\n. This is restoring the old test values. Eventually they can be dnxified but for now it's sufficient to add the below cases\n. As discussed in JabbR, this was a bad test. They should be swapped. I'll add that in to the final merge.\n. Whoops, this doesn't need to be here, I'll clean it up.\n. This target is the main new component of this change\n. Fixes C++ compiler warnings about casting size_t to int\n. Name for this? Darwin is commonly used, but I could do Mac instead.\n. OutDirs here (and below) now all use RuntimeType instead of TargetFramework\n. Another CopyForDebugging helper target.\n. :+1: I'll review the usage of these.\n. The default VS C/C++ Tabs setting is to use hard-tabs. This all appeared when I Ctrl-K Ctrl-D'd on the cpp file. If we want to change from the default, I'm fine with that, but it seems better to use the default.\n. @BrennanConroy fix for your size_t note.\n. Good point :)\n. If we don't exclude this, we have to pull DI Interfaces into the AppHost, which we don't really want to do.\n. No, but it is valid JSON.NET :). Still, I'll fix it. It's an artifact of my initial solution which was to add DI.Interfaces :)\n. Yeah yeah, will kill before merge\n. :+1:\n. So this class should only EVER be given .NET Framework frameworks?\n. Ok, I'll kill it here and open a new PR to add to the bootstrapper. I don't want changes that will affect old runtime in with this PR :).\n. lol, wow.\n. :+1:\n. Way ahead of you :)\n. I'll remove this before merging.\n. Ok, I'll also update the FrameworkReferenceResolver to only rewrite DNX frameworks to Net.\n. Yep, good catch.\n. Trimming\n. I know what \"Everett\" means here, but it might be good to either: a) put a comment above explaining what \"Everett\" means here or b) rename the methods to the actual VS version name.\n. Does this mean that the below code will attempt to parse a .restext or .resources file as XML? Won't that fail?\n. As in System.Version, but I don't like the name anyway, I'll find a better one.\n. Artifact, will remove\n. :+1:\n. Gotta get those C# 6 things embedded in my workflow :). Got $\"\", next up \"?.\" :)\n. Correct. When I started the refactoring, it wasn't (I was trying to see exactly where the caching was used). I'll remove this.\n. Agreed. Though see my comments on #1475. \n. What instead? Move the type?\n. The RootNamespace was still \"M.F.R.Interfaces\", meaning it's really easy for new types to end up with that namespace. This sets it to \"M.F.Runtime\" (correct me if I'm wrong, but I thought M.F.R.Interfaces was an assembly only, not a namespace). Just a VS hint.\n. Not sure why it put the assembly name it, just what VS did. Though it looks like it's Debug only, I'll fix that.\n. Path.GetDirectoryName(Path.GetFullPath(projectPath)) should do it\n. Ah, good catch. I stand (or rather sit) corrected :)\n. Didn't notice this was the makefile. I'm pretty sure it didn't copy the file without this line but I'll try removing and verify that.\n. I think we still have the issue with dnu list --assemblies not picking up project outputs...\n. Merge artifact with resx change? Anyway, I can remove it safely.\n. Do we or do we not want VS to use Microsoft.Framework.Runtime as the default base namespace for types in Microsoft.Framework.Runtime.Interfaces? As I said above, without this change it uses the folder name as the base, which means devs have to remember to change it.\n. These shared files are getting a little messy...\n. It's not just inconsistent, it's incorrect, since the delaySign value computed above is completely unused! Going to have to see why the compiler warning didn't fire for that. Anyway, cleaning this and @Eilon 's comment in an upcoming PR. This was a quick hack-job to unblock other work :).\n. I'll check in to that... last I checked (this morning) we had to implement StrongNameProvider and something wasn't working, but maybe I missed something.\n. Yeah, looks like https://github.com/dotnet/roslyn/blob/master/src/Compilers/Core/Portable/StrongNameProvider.cs still has some internal abstract properties :(.\n. The are indeed still internal abstract in Roslyn. I'm leave this as-is until we get an implementable strong name system. Not using a StrongNameProvider yields \"CS7027: Error signing ... Assembly signing not supported.\"\n. This seems like maybe it belongs as a constant in a header file somewhere.\n. Extra space before GetNativeBootstrapperDirectory\n. Extra space after result\n. Fair enough. I noticed it was only used here.\n. Spacing :)\n. :+1:\n. > Gets the version of the application, as specified in the project.json file.\n. > Gets the base directory of the application, defined as the path to the directory containing the project.json file\n. Remove \"domain\". Yes, technically AppDomains kinda exist, but mentioning them would just be confusing.\n. Does it? Or does it request that the application be terminated?\n. \"...that is signaled when...\"\n. This is something I hate about XML Doc comments. I'd err on the side of over-crefing, but that's personal opinion.\n. > Loads the assembly located at the provided file system path\n. > Loads the provided COFF (common object file format) image containing a .NET assembly, optionally including symbols for the assembly\n. > Provides access to the current IAssemblyLoadContext\nNot sure what \"created\" here means anyway :)\n. default => current\nI'd actually suggest renaming the property too... Maybe I'm misunderstanding the accessor's purpose though.\n. Yeah \"Disposing it removes the loader from the runtime\" is probably a little more accurate. Agree with \"disposable object\" as well, or possibly \"disposable token\"\n. > Common values include ...\n. :+1:\n. \"rich\"? Is there a \"poor\" graph? :)\n\"complete\" sounds a little better. Maybe even just rewrite it a bit:\n\nProvides access to the complete graph of dependencies for the application.\n. :+1:\n. > Common values include ...\n. > Common values include ...\n\nYou probably get the point by now :)\n. Putting the interface itself as a cref isn't really necessary here. In fact, don't mention it at all\n\nProvides access to the current ...\n. > Gets or sets the ACTIVE IServiceProvider\n. Let's update the docs to reflect that then :)\nRequests that the current application be terminated as soon as possible.\n\nRemarks explaining why this is a \"request\" and who actually terminates the app would be good too.\n. Doesn't make it good :P. But I'm OK keeping these identical with MSDN since the APIs mirror existing ones.\n. \"default\" here then, as per below comment\n. /// <summary>\n/// Retrieves the active @victorhurdugaci \n/// </summary>\n/// <remarks>\n/// This method retrieves the @victorhurdugaci that is currently active. Warning, @victorhurdugaci is a troll\n/// </remarks>\n/// <value>\n/// The active @victorhurdugaci\n/// </value>\n/// <returns>\n/// The @victorhurdugaci that is currently active\n/// </returns>\n. This could be tracked via a different bug, but I think it would be better if dnu used Microsoft.Framework.Logging. I think we could also start converting NuGet to use that interface as well. Or, we could just build an adaptor.\n. There should be a constant in NuGet.Frameworks.FrameworkConstants for DNX 4.5.1\n. kpm?\n. Then \"Provides access to assembly load contexts within the application\"\n. aspnet/Universe#208\n. The project parser needs it because it has to load the runtimes section as a graph. In theory the Runtime doesn't need to care about that but detaching that will take a bit.\n. Ah, but Runtime.Hosting doesn't need a direct dependency of course... duh. Anyway, it does still need to be internalized.\n. The object model for representing Runtimes, reading runtime.json and expanding a runtime to it's compatible runtimes. It's basically just Pocos and Json parsing\nhttps://github.com/NuGet/NuGet3/tree/dev/src/NuGet.RuntimeModel\n. No. No it isn't.\n. Yeah, since net40 is not convertable to core50, but net46 is\n. Good point. I'll add that case.\n. Either way, it should be cleaned up. I'll do that. Probably a smart quote getting funky.\n. Later, file a bug :)\n. I'll clean this before merge. I'd do it right now but I'm running a build :)\n. This ended up being really useful. DNU \"needs\" it's own debug helper code because it's difficult to use the dnx one since you generally run dnu through a batch file so it's hard to insert arguments between \"dnx\" and \"Microsoft.Framework.PackageManager\". It's possible, but hard. Also, I did add a few extra features to the debug helper.\nHappy to remove it if people really don't like it, but I think it's useful. Might even be a useful helper to put in a Sources package\n. No, it is still used for profile-based portable (portable-net45+win8, etc.)\n. This is turning out to be a bit weird. So I'm going to drop it. The Version Number for \"dotnet\" will be \"0.0\". We can display it as \"5.0\" in the places we want to, if we want to.\n. @emgarten came through with a clean way to do this in the new nuget code, so we can keep it! Ignore my previous comment :).\n. Indeed it should! Fixed now!\n. Something will change. Once I can get it to build I'm going to be uncommenting line 1237. I left it commented out because I want to see exactly what DTH does without it (it should start showing \"fx/System.IO\" and friends on the References node, but we want to trim it back to \"System.IO\"). I don't want to apply the fix until I see the issue though :).\nIf it ends up being unnecessary, I'll revert the whole file :)\n. I don't know what caused the exception I got here but it doesn't actually seem wrong to have a guard here. We don't want a broken DLL file causing an exception during restore.\n. This isn't needed any more, I'll remove it before merging.\n. I'm not 100% happy with this test. It's a little too brittle. I might see if I can tidy it up before pushing.\n. Nobody ever changes this value...\n. I'm mostly trying to mirror the existing nuget sources command, but I'm open to changing it. I'll remove the table formatting for now, we can always tweak it later.\n. Sure, it's just moved from the old code so I wasn't sure if it was being left in for a reason.\n. Just trying not to rock the boat too much and leave the code as it was before. I can do that though.\n. Probably not, I just need to add a counter. I copied this from nuget sources so between this and the below comment I'll probably just rework this a bit in general and I'll cover this comment there.\n. Yeah, I'm trying to find a balance between a brittle test and testing the actual functionality. I think I can put the whole of the expected output here, but from experience that can lead to a lot of tests breaking from a small change :). Here, I think it'll be fine, at least until we deal with localization :P\n. Just because everything else did it this way :). I'll fix this one\n. Same as above :)\n. Generally, yes. I do intentionally clear the machine level sources so that should make it deterministic. Changes to our package source code could adjust this order, but those should cause the tests to fail anyway.\n. nit: SourcesConsoleCommand\n. whereis is present on most distributions but is not part of the POSIX spec. The recommended approach is usually type since that is part of the POSIX spec: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/type.html\nI'm mostly OK either way for now, but it might be good to see if you can switch to that since it should be most compatible on POSIX systems. AFAIK it will be the same workflow: Run type git and if it returns non-zero exit code, there's no git.\n. There's already an EnvironmentNames static class. This should probably go there.\n. This seems like an odd pattern to me. Why not put the lambda body in the ModifyJson method (and give it a more appropriate name, like AddSourcesDirectoryToProjects or something...)? The ModifyJson method is only ever used here and given this lambda body.\n. Are there bugs filed for specific providers we're interested in? hg ? tfvc ?\nAlso, should we consider allowing users to install custom providers?\n[All these are just things to consider for the future, but we should capture them in bugs]\n. nit: I've seen ToList used in most places to do this. But I don't really care much either way :)\n. I could agree with removing CommonPrefix, especially if all the environment variable names are in one place, because then it's just a matter of updating the prefix in one place.\n. :+1:\n. I suppose... though I dislike implicit conversion operators :). I'll do it though, because you asked nicely :P\n. :+1: good catch\n. I think the LockFile path format is normalized to /, but I may be wrong.\n. Yeah, I'll throw the DefaultIfEmpty call from your suggestion above in here as well.\n. To be clear, @davidfowl means _._ (markdown formatting got in the way), but yes, I would actually just detect  the case where _._ is the sole entry in any of the lists and remove it, resulting in a zero-length array.\n. Yep. Fixing\n. Before this change, net46 would be taken. Granted, this is a totally arbitrary contrived case, but a project with a framework constrained by a profile cannot generally take profile-less content.\n. Before this change, portable-net40+sl4+win8 would be taken because the Identifier (.NETPortable) matched and portable-net40+sl4+win8 was a Portable 4.0 profile, whereas portable-net40+win8 was a Portable 0.0 profile or something (I don't remember the specific version numbers :)). As a result, the former was the best match because it was the maximum version that is less-than-or-equal-to the requested version.\n. One. Right here. But I get your point. I think it might be necessary to centralize the logic that determines the set of allowed frameworks for a specific DNX.\n. :+1:\n. I'm not sure why my change revealed this but this was conflicting with the versions used in Microsoft.Framework.PackageManager which were visible because that has InternalsVisibleTo this assembly\n. I'll mirror what Get/SetData on AppDomain do (which I don't know and will test first :))\n. :+1: \n. Get/SetData is case-sensitive\n. This is spelled correctly, but the file name isn't :)\n. Nope, copy-pasta :spaghetti: :)\n. I've mostly seen constructors after properties, maybe I'm looking at the wrong code... General C# style that I've seen in practice has constructors after properties but that's just anecdotal. Is there a specific style guide we use?\n. It's similar to aspnet/Razor#449, though in that case the class is public for some reason. If we had a shared project, Razor would still need to solve the problem that caused the type to be made public.\n. I don't even know how it got there, and i'm pretty sure I saw it and removed it at one point :P. I'll remove it now.\nAlso, I'll double-check that VS isn't re-adding it somehow and ensure it's removed before final merge if it somehow reappears :)\n. It is, I think one of the VS automated refactoring operations might have changed it somehow. I'll revert that back. I certainly didn't actually type this in :P. Good catch :+1:\n. I don't know what this is but I'll remove it\n. Seems legit to me. The goal here is to create an application-global data store, not to provide access to AppDomain.CurrentDomain.Get/SetData.\n@davidfowl ?\n. Per @dougbu I'll unrevert this (unvert? devert?). It's something VS adds to test projects to avoid having to rescan them to determine if they are test projects and the sooner we get it in, the less churn we have later :)\n. No because it's not true in Desktop CLR. All instances of ApplicationEnvironment share data.\n. Couldn't we merge this in to DnuEnvironment and just use DnuEnvironment everywhere (even to get things like Program Files which are available through System.Environment) to ensure we have one central location for these things?\n. We'll generally want the string, at least in the hot path (runtime startup). Plus, the big string isn't actually allocated until an error occurs, this is just a pointer to hold it :). So I'm not too worried about this piece of code.\n. Since the flag indicates that the OS is Windows, perhaps a better name would be DNX_IS_WINDOWS or something? I spent a few minutes trying to figure out how 1 could be the name of an OS :).\n. \n. It is unified. It's calling the same function.\n. Partly because it was how I was able to actually figure out what was wrong, since the Exception was normally being lost in the ether. I think it's a useful thing to keep in though so I left it. Without this, if an exception is thrown while booting DNX/Helios, it is lost to the ether. Now, at least, if there is a Console attached it can go there. It's not perfect, but it's something to help debugging when you're running iisexpress from the console.\n. See my comment above. It's actually just used to indicate that the OS is Windows so uname should not be called. I suggest a new name like DNX_IS_WINDOWS.\n. Filed #2285 to help unify this further though.\n. I'd rather do that in #2226 to limit churn-per-pr.\n. Can we do that in a separate issue to reduce churn?\n. Talked to @davidfowl . We'll do that and get it in Monday to break the world early.\n. What is --project?\n. I think a message like this is a little clearer: \nThe '{propertyName}' property cannot contain wildcard characters, use '{wildcardPropertyName}' to specify wildcard patterns.\nFor example:\nThe 'compileFiles' property cannot contain wildcard characters, use 'compile' to specify wildcard patterns.\nIt does mean you need to pass down propertyName and add a wildcardPropertyName parameter, but I think the clearer error message is worth it.\n. It's a private static method and you have access to the value in all the immediate callers. It seems like a small amount of effort for a much clearer error. We can drop the second part (showing the wildcard property name) since that will require a more dramatic amount of refactoring.\nRegardless of how well we illustrate where the error is, we still need to have a clear description of the problem.\n. There's no handshake emoji. That makes me sad.\nAnyway, great! :+1: \n. Nope! I started with a regex then realized that was super overkill. I'll remove it.\n. :+1:\n. Sounds good! Will do, thanks!\n. Because shut up, that's why :trollface: \n. Doing that now :)\n. VS did it to me automatically...\n. See also: https://github.com/aspnet/Razor/pull/463/files#diff-3ca14b98c54139a0defc8a35940fe07e\n. Yeah, we shouldn't reformat objects that are already on a single line. Much like C# does with properties:\ncsharp\npublic string Foo { get { ... } set { ... } }\n. Yes, see #1970 - We are aware the environment variable is bad, but until there's a better system this is the way we've got.\n. Ah, default C++ formatting in VS is tabs. That explains why it looked fine in VS :P\nFixing\n. That sounds like a good idea, will do.\n. I didn't want to change this because it was already there but I had the same thought. I can just try it and see if it works :P\n. We need to find a better solution to this than just bumping up individual packages... But that's the right thing to do for now.\n. This wasn't being used.\n. This has to go here because it is referenced from a function. The vars at the top are scoped to a specific method in the generated class and thus not available to the other methods.\n. I'll look at cleaning this up in #2226. I prefer Read Only List where it makes sense because then you can get the count without enumerating.\n. We don't use ImmutableArray anywhere but I'm vaguely interested in doing it more. Do you know anything about the performance impact?\n. I'd call this something like AnalyzerSet. The Roslyn prefix is redundant (and we should be removing it from other places) and Module is only used for ICompileModule to match up with that.\n. var analyzerSet = GetAnalyzerSet(...)\n. Can you either a) try making it async or b) file a bug to investigate this further?\n. I don't think this is right. Instead, you should be able to wrap each file starting analyzers/ in a class implementing IFrameworkTargettable and then pass the whole set of files into GetNearest. It will return to you all the files from one folder, having selected the most appropriate folder. Then you can filter the resulting files by language.\nAs far as I can tell, this will return analyzers from multiple different folders as long as they are compatible with the runtime folder, which is bad. If there is an analyzers/net451 and an analyzers/dotnet folder, compiling on dnx451 should only pick the analyzers from analyzers/net451 and not any of the analyzers from analyzers/dotnet. GetNearest should handle that for you.\nOne other way you could do this is to get the set of folder names directly under analyzers/ and pass all of them in to GetNearest. The one returned is the best match and you can scoop up all the analyzers from that folder only.\n. Regardless of how you fix it, add a unit test for this selection algorithm to ensure it selects the appropriate folders. It would also help discussion if you did that so I can point out concrete cases that might be missed :P.\n. :+1:\n. :+1:\n. Can we do the filtering of files before the Select so we can get rid of the \"Where-not-null\" check?\n. Yeah, we may need to look at the layering of this. I'd prefer to avoid having specific Roslyn knowledge in the runtime, but it might be tricky given that we really need to use the NuGet loader/dependency resolver.\n. I think this was changed by a refactoring. I've seen it before. Renaming a type somehow triggered VS to convert the extension method into static method calls\n. Name? Yeah, I thought about just LoadProject but I wanted to make it clear what it does... maybe that's overkill though\n. Old code, good catch.\n. The idea here is that all the compilation engine is needed for, in the runtime, is to actually compile and load the project's assembly.\n. ----       ----\n|  |  ---> |  |\n----       ----\n. fixed\n. fixed, but just called it GetExport and GetAllExports\n. we discussed this in person yesterday, so I'm considering this resolved :)\n. boxes and lines were drawn, I'll adjust the name to LoadProject I think, otherwise we're good here.\n. fixed\n. fixed\n. just call it Path\n. here as well, path\n. path\n. path\n. Yeah, this was actually a problem in test code that was creating a circular dependency. I can remove the check now.\n. Because Compilation needs to read it now.\n. Actually, I think we can combine these into a single dictionary storing a tuple (or a custom class). We need to be able to retrieve both the externally-used Library class and the internal LibraryDescription. I can merge the two into one dictionary though, either by putting Library on LibraryDescription or creating a tuple.\n. fixed\n. removed\n. Done. Had to rename a private nested class PackageDescription to PackageMetadata\n. removed\n. removed\n. Why is it still in the runtime? Isn't the runtime only using the LockFile table now?\n. Sounds like it should be in DTH then :)\n. :+1: though I don't actually know what it should be. Regardless, this is only used on case-insensitive file systems (because it's Windows-only). I'll change it to lower-case for consistency though.\n. The main culprit.\n. Yeah, as much as I like amusing test code, it would probably be safer to go with something standard like, y'know \"Hello, World\"\n. It's where the constants originated, just forgot to move them out :)\n. Missed it in a refactoring. I need to add some tests on attempted paths\n. prefer the latter as there is no such thing as dnx20 :)\n. done\n. added one. Microsoft.Build.Engine is present in both the 2.0 and 3.5 folders (thus the 3.5 one should override it in our logic, I'm confirming that this is the behavior for MSBuild)\n. Looks like MSBuild lets you select both. In theory we could do that by allowing a version in the frameworkAssemblies entry but that's a larger change. I suggest that if we care about supporting that, we make a new bug for it. Until then, we default to the highest version.\n. fixed, but the diff of this line hasn't changed so github isn't hiding it :)\n. Not anymore! Good catch :)\n. It actually seemed to be an error with rendering the Expected/Actual values when the assert failed. I'll take a look at nailing down a repro separately\n. Pretty much nothing :). A distinction is kinda needed because there's a bunch of pre-computed framework data but we still need to know if the framework is actually installed (via a Directory.Exists call). For those frameworks, there is a FrameworkInformation but it isn't usable.\n. spacing\n. Doesn't use this assembly AFAICT. It didn't have Mono before so I didn't want to add it\n. Nope, this is a tool, so it lives in bin/lib/[toolname] like DNU\n. Nope, see the unchanged lines. Tools like dnu, dth, and Microsoft.Dnx.Project, live in their own worlds under lib\n. It looks like it was just missed, mostly because no one works with this project :)\n. Not sure, just ported it from PowerShell. I don't see a reason why we couldn't create the directory here, but in general it's not expected that this command would ever be run without having done a build previously.\n. The source paths come from globbing which has already processed them and made them absolute. And the target paths are used relative to the ZIP file being generated so the worst they can do is mess up a user's package. In either case, if the user types an incorrect path, they will get an incorrect result, which doesn't seem bad to me :)\n. I wonder if the format-on-save extension has been updated for VS2015 now .... ;)\n. Could you put them in a constructor? If you did that I think it'd be OK for the constructor to be public and the grossness would go away.\n. I'm doing so, but it means more of the JSON is retained in memory without being parsed down to smaller data structures. I'm not sure that's actually useful. Perhaps with the ProjectReader change we could make the amount of data loaded configurable and then only have dnu pack load this much but that seems like a larger change.\nAnyway, I'll lazy it for now and we can discuss a better option later.\n. Why not? If they come from the JSON then they should be fine there. If they don't come from the JSON they don't need to be in ProjectReader :)\n. So a separate project class used by the runtime? That's not a bad idea either. Also, we should extract ProjectReader out into a package at some point (possibly just a shared source package). We'd still embed it in the runtime, but as @rynowak said it's useful in other situations.\n. Fair enough for now.\n. What? No it isn't, it was in my original PR.\n. The inline diff looks weird, split diff is clearer. Regardless, this was in the PR from early on.\n. Because if the packaging fails, the WriteDiagnostics(allDiagnostics) call is never hit. I thought about refactoring this to be clearer but wanted to limit the change.\n. See https://github.com/aspnet/dnx/pull/2561/files#diff-3ed8b70df3021a1c57d3a4aa849e8d1aR278\n. Think we can just rewrite that if though, hang on.\n. \"rooted\" paths in the target refer to the root of the package, so no. See the error message above\n. done\n. done\n. done\n. Looks like we're good. Removed the extra list\n. Had that originally, @davidfowl wanted to be consistent with everything else.\n. though it can be IEnumerable now.\n. It's already printed by the test.\n. Nope, we aren't good. The only remaining call is to WriteSummary(allDiagnostics) which is a summary view. We still need to write the individual diagnostic messages from the packaging process. Returning this code.\n. I was in a situation where I did have the Windows SDK installed but still couldn't build for OneCore because I was missing files in this folder. I'll sync up with you in person.\n. It's not the prettiest, but given that this is purely an internal helper that we expect few people to use, I'm not that afraid of it. It's cleaner than bringing FileWriteTimeCacheDependency along when we don't need it.\n. Ok, but we do already expose the values. These aren't RIDs, they are the values we expose publicly on IRuntimeEnvironment\n. That's what I get for editing in VS :). Will fix\n. This section isn't even needed, it's just because I toggled something that defaulted to true\n. I believe so, but I'm not sure. Also those are Macros, so they'd have to be added in the native code. I think that would be a viable option once we get closer to having native code pass data to managed code.\n. IF you're going to commonize this, then https://github.com/aspnet/dnx/blob/prkrishn/metadataref/src/Microsoft.Dnx.Compilation.CSharp.Common/MetadataReferenceExtensions.cs#L49 requires it. But I agree that commonizing should be discussed a bit further.\n. Small-batch locally-sourced vcxproj files?\n. I'm totally OK with adjusting it that way when you do the native->managed stuff. I didn't want to dive too far into native code right now and the manifest seemed like a quicker fix. I could remove the manifest and we just wouldn't be able to actually see win81 and win10 RIDs until your changes :). The manifest seems like a Good Thing generally though (however, I'm no expert there)\n. The non-Windows constants aren't actually used. They're left over from earlier in the PR when this was public. I'm trimming them now. We currently use the output of uname on non-Windows\n. fixing\n. yes, right now we only ship one Linux DNX. That will probably change for beta8 and when that changes we'll have to solve this part as well.\n. We don't need it here yet, the managed code doesn't support ARM yet (see https://github.com/aspnet/dnx/issues/2063). (As a reminder, these are internal constants, only used in RuntimeEnvironment)\n. I suppose we don't support iOS do we :). I'll remove that one.\n. Right, but this code is only testing that given an OS, Version and Architecture, we can synthesize a runtime ID correctly. So it doesn't have to be limited to what we support now.\n. Hmm... that's not great. Is that really the only way we have to determine if we're running on OneCore? If so, I'd be open to removing the Windows 10 entry from here for the short-term while we work out the full plan.\n. :+1:\nRemoving the manifest still allows me to proceed with the rest of the changes (since I can still use win7/win8/linux/darwin as pivots, just not win81 and win10), so I think I'll do that just to ensure we don't mess things up too much. We just need to ensure #1970 handles it :)\n. Do we do this double-check thing anywhere else? Everywhere else I've seen only accepts \"1\" as a value. I'd rather just be clear on what the true value is than try to be unnecessarily flexible :)\n. Yeah, I suppose. It just makes the tests more and more text.\n. Sure\n. Because this trace was a little too noisy, or at least it would get very noisy as more and more runtime.json packages exist. @lodejard even said that from the start it was a debugging trace.\n. I think it was necessary to allow the tests to provide a bogus project directory without exploding everything. It might not be necessary now that I'm calling a smaller surface area. I'll double check\n. Sure. I think I just put it here for convenience and because the runtime is the one that actually defines it.\n. Hush you\n. Ok, I was initially going to do that and just wanted to make sure we cached it just in case we hit a point where multiple requests were made.\n. It is a little gross because this method needs the cache context, but I think that's OK\n. See below. Just trying to make the tests a little more readable. Didn't seem harmful\n. Yeah, this was already doing Linq via the order by, plus it wasn't on the runtime path so I just left it as linq.\n. So it's technically already referenced via CommonTestUtils. I didn't mean to remove it, but I thought a hasty Ctrl-. had added it (I was a little too quick and instead of importing a namespace it seemed offer to add a reference to the package, which is odd since it should already have been referenced).\nAnyway, long story short, I'll revert it.\n. Yeah, this was left over from some other changes but is a benign refactoring that is useful for other things. I can revert it if you want.\n. Refactoring detritus\n. Looks like it isn't necessary any more, removing.\n. yep, good catch\n. Yes, it can. Sometimes AHC is created with no runtime identifier (such as when being used for compilation reference gathering, which is runtime-independent).\nIn theory, these cases could provide an empty enumerable, but most of the time people will just omit setting the property so I want to handle null.\n. \"Ahead of Time\" as in .NET Native. There are special runtime libraries to be used when building a .NET Native library, but we don't support those in DNX.\n. Yes, when the project contains \"win\". See Line 98 (\"AddRuntimeToProject\"). We merge the runtimes defined in the project.json with the command line runtimes.\n. Seems ripe for a helper method :). I expect we'll be adding another one later for runtime ID filters.\n. Unintentional?\n. I originally had more defensive code but a) it makes the generator above complicated and b) we only ever call GetGeneration with frameworks we know should have mappings. I'll make it private (should always have been so) and give defensive coding one more shot though, I have an idea that might work\n. @davidfowl is going to tell you to remove the Linq. No Linq allowed in the runtime core path :).\n. This is actually the wrong test for that but I get your idea :P\n. Better safe than sorry. I say leave it.\n. I'd avoid reflection since this is in the critical runtime path. But putting it in a constant is a good idea :)\n. Type is a string I believe. We should use string.Equals to compare it in order to be clear about case-sensitivity (it is case-sensitive :))\n. This confused me at first because I thought it was always being set to the minimum version (so I was like \"but what if it's below the current runtime version?\"). Can you change the below code to just extract the version and put the comparison here instead?\n. Woo! More AHC Unit Tests!\n. Constantify, as discussed earlier ;)\n. dynamic shouldn't be needed here, right? You aren't actually calling anything.\n. If that's the case, can we clarify the property name? PhysicalProcessorCount? (I'd also like to avoid using prefixes like Num that we don't use elsewhere, even though this is private ;))\n. So maybe I'm being paranoid, but I'd really like to try and keep these in sync. Could we put this and the matching C# file together somehow? Or at the very least put a big giant comment indicating that these two MUST be kept in sync.\nIf I had my way and the necessary tools existed, I'd have one of the two code-genned from the other ;). Maybe Roslyn could be used to generate the unmanaged struct? Anyway, that can wait.\n. As useful as this data is, and we should keep it, I think I'd prefer to have Runtime ID be a first-class member of this struct. Rather than just providing the components (OS Name, Ver, Arch, etc.), I'd like a field for the RuntimeIdentifier itself.\n. Can we reformat this into a full version number? \"8.1\", \"10.0\", etc. for example. I realize not all OSes will fit this criteria but I'd generally like the version numbers to be parsable by System.Version, etc.\nIf we need to shrink it back down to \"81\", we can do it after having parsed it.\n. Could we proceed in this case? We could simply use \"win7-x86\" (etc.) as the RID (since that is the minimum supported version).\n. A comment is good enough for now.\n. 8.0\n. That's a good point. Let's keep it this way.\n. I guess so. Runtime ID is supposed to basically be an identifier of the underlying native platform being used so I still think it's part of the native stack, but I can see it both ways.\n. Having the version number be formatted like a System.Version mostly removes my concern here though. The version number format \"81\" was a RID-specific concept so if that was leaking in I figured the whole thing should. Since it's not, I'm OK leaving this as-is\n. Are you serious? Didn't we literally just cover this in https://github.com/aspnet/dnx/pull/2705#discussion_r39565970 ?\n. That makes sense. File/link a corefx bug?\n. Well that was the gist of my question yesterday. We don't currently support portable-x+y+z in project.json.\n. I'm on board, but misc is a terrible name for a folder that contains projects required by tests...\n. See my comment about porting to the new framework. I'm rolling that back anyway and just porting the one new test. I figured that rewriting each file as we touch it would be a reasonable balance between a big-scale rewrite and only using the framework for new tests, but I'm just not sure I have the time.\n. Yeah, return DISTRIB_ID and DISTRIB_RELEASE (and OS Name and Version respectively). That should be fine.\n. Can you put a comment here explaining this? I figured it out (Mac OS 10.1 was Darwin 5.0, and so on) but it would be useful to have it recorded here for posterity :)\n. I think it first appeared for dnu wrap tests.\n. Yeah, I found a similar table on Wikipedia. In theory, we should be using the table but since it's always 10.(Darwin Version - 4), this approach seems fine in practice.\n. Woah... did you just comment on your own PR?\n\n. You tell me, it's your code :)\n. Ah, the LINQ. It's the equivalent of https://github.com/NuGet/NuGet3/blob/dev/src/NuGet.RuntimeModel/RuntimeGraph.cs#L147 (which is what the NuGet3 code called).\n. Yeah, I think my update failed to push last night ;)\n. Will remove\n. I LOVE THE NEW TEST FRAMEWORK. That is all. (good job @JunTaoLuo !)\n. clear-cache\n. I don't really know either. It looks like it is storing both the parsed framework and the original framework name from the project.json, but that's not available in this case. I think maybe @victorhurdugaci added some of that code?\n. I was planning on doing that, I'll add it to this PR.\n. Good catch, I meant to return :)\n. I prefer hyphenating. If we need to change other things to be consistent (eventually) so be it.\n. How about System.IO.Directory.Delete(string path, bool recursive)? :)\n. It should be safe to delete the base directory.\n. I actually have a few other minor changes I want to make to the test utils so I'll throw those in with that PR.\n. This data defines the fallback behavior. We aren't required to identify if an OS is unix, but a package that can be implemented the same way on OSX and Linux would mark itself as unix and via this fallback logic we would know we can use it.\n. In theory we should probably consider 32-bit versions. For example, RIDs are used even on Mono, and if  you are using a 32-bit Mono P-Invoking into a 32-bit native library, we should know that :)\n. We don't have to keep it in perfect sync. This is what we choose to use as a \"build-in\" version of the package. If the project takes a direct dependency on the real Microsoft.NETCore.Platforms, they can get the updated version.\n. Yeah, this is very short-term (like, should be fixed early next week) while the CLR team finish Cross-Plat packaging.\n. Then CoreCLR is technically unsupported on your OS :). As far as I know, they are only targeting the current LTS version: 14.04.\nIt may, of course, technically work, but it's not a production-supported distro as far as I know.\n. We should probably rename Microsoft.Dnx.Runtime.Internals to Microsoft.Dnx.Runtime.Internals.Sources to be consistent. Not something that should be done in this PR, just noting. /cc @davidfowl \n. From our testing it looks like mscorlib is already treated as a TPA, but perhaps that's wrong. It certainly works fine without it in the TPA.\n. Implicit operators caused weird behavior, like ToString and Equals not working right. This is old stuff though, not new in this PR.\n. EnsureSuccess isn't an assert?\n. No because the batch file relies on the dnx on the path. I could try fiddling with putting one on the path but instead I wrote this to do exactly the same invocation that the batch file does, but with a specific DNX.\n. Probably not, it just came with the File > New Project template.\n. :+1: \n. Is there a reason we wrote a helper to do something the BCL already does?\n. Aka, an assert. Assert just throws too.\n. It seems confusing to have this here. Can you merge the declaration with the full initialization down on line 1348?\n. Yeah, but I didn't want to futz with environment variables here.\n. I guess... That seems to be introducing more variability than I'd like though. I know for a fact I want the Windows CLR x86 DNX here, I'd rather not make it conditional on how you run the test.\n. https://github.com/aspnet/dnx/issues/2768\n. I'm going to keep it in order to maintain consistency with a real DNX solution.\n. :+1:\n. This is mostly debug spew but I'll leave it because it's verbose and I plan to go through and clean some of this up\n. This loop appears to have been the problem. This might affect NuGet since we pulled this code from there...\n. (We now run the loop once per runtime and compute the full list of dependency augmentations in advance)\n. Microsoft.NETCore.Platforms package\n. In the runtime, not dnu\n. yep, all part of the post-merge clean-up\n. Yes, my clean up addresses some of this extra stuff.\n. After comparing with the NuGet3 code, this is the correct ordering (the original fix did the reverse)\n. I don't think so. It would take more effort than it's worth since we only need to modify this when DNX adds support for a new platform.\n. Should we either add Dth as a property on DnxSdk or maybe make this an extension method? I'd rather keep using DnxSdk as the hub for all things related to a particular SDK version.\nMy personal preference would be to move DthTestServer to the Test Framework and hang it off DnxSdk just like everything else.\n. As long as it's tracked, I'm OK with that :)\n. Yes, but it did before. This is really an internal error if this happens. It could only happen if a package was explicitly deleted between the time it was downloaded and the time the lock file is written.\n. Yeah, I considered reusing them but they aren't quite the same.\n. Well, they are all hard-coded, but I'll put a constant in here\n. @davidfowl see this question. Thoughts?\n. It's Hello, World. You're missing a comma.\n:trollface: \n. File a bug to write automated tests that test the behavior of this script.\n. Using command '{command}' as the entry point for web.config IIS.\n. attributesToOverwrite requiredAttributes maybe? Overwrite makes me think they are the attributes that the user can overwrite. \n. Bash doesn't get the \"try DNX_HOME first\" logic?\n. It should be much easier ;P\n. It's because they are copied from NuGet. I think it should be OK to add them /cc @Eilon \n. Cool, just wanted to check :). Could you use a named parameter here to clarify the purpose of the parameter? Something like:\ncsharp\nAnsiConsole.GetError(whatever_the_parameter_name_is: _runtimeEnv.OperatingSystem == \"Windows\").WriteLine(ex.Message.Red().Bold());\n. Pass the parameter name to the constructor as well (there's an overload that takes it). Oh, and use nameof to do so :)\n. Parameter name -> ctor :)\n. param name -> ctor - you get the idea now :P\n. We should now have error information in the diagnostics value. Could you format that (if it's present) and display it? It's possible this could fail but diagnostics would be empty (in which case just use text like \"Invalid project.json\").\nSomething like\nErrors occurred parsing project.json:\n[full path to project.json]([Line#], [Col#]): [Message]\netc.\nAll of that should be available in diagnostics and should be pretty straightforward to add with some string.Joins and Linq :). Maybe throw it in a helper if it looks like it's going to be a bit complicated.\nWe already format the project.json errors like this somewhere, so it's possible we have some helpers already. Check for references to the DiagnosticMessage type.\n. param name -> ctor ;)\n. param name? ctor!\n. Rephrase: A circular reference to '{name}' was detected\n. param name!\n. name of parameter\n. nom du param\u00e8tre\n. Remove the \"Error:\" from the front and capitalize \"unexpected\". \"Error\" is a prefix that catcher of the exception should control.\n. As above, remove Error\n. And again ;)\n. Error\n. :bomb: Error :boom: \n. nombre del par\u00e1metro\n. il nome del parametro\n. Yeah, I think that's probably fine.\n. Lower how? Host? Isn't ApplicationHost the lowest layer that knows about Commands?\n. So we want to swallow all user exceptions? There are benefits to allowing actual exceptions from user code to bubble up to Watson, though I suppose those are most relevant when the app has been packaged separately as it's own executable and not dnx.exe. The initial thought here was to just capture exceptions caused by our code and allow exceptions caused by user code to bubble.\nOn a side note, maybe the error handling you referenced above is why I can never get unhandled exceptions to break in the debugger... I don't know if it works for users, but I can't ever get them to work.\n. I'd prefer a (non-abstract) base class, it's less brittle. Something like Microsoft.Dnx.Runtime.RuntimeException. Either way we have to go through each exception and figure out what to do, may as well do it \"right\". When we have other exceptions to throw (like InvalidOperationException) we can wrap them in the InnerException of RuntimeException\n. Hah, I'll just remove the author :)\n. Yes, it's the same as not specifying target\n. It would be an unrecoverable internal error if that happened. A library is only marked with LibraryTypes.Project if it came from the projectResolver.\nAnd it's better than the current behavior which would just silently fallback to the package if the project was deleted between dependency resolution and lock file output.\n. Sounds like that would make a good comment ;)\n. :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: \n. Then make a class in Sources that wraps up the exception and sets the property? Otherwise our throws are going to get gross...\ncsharp\nvar ex = new Exception(\"something\");\nex.Data[\"suppressStackTrace\"] = true\nthrow ex;\n. If you confirm for me that dnu restore works on CoreCLR on Ubuntu 15.04, I'm willing to add it. It would be similar to Linux Mint, just an unblocker, not formal support.\n. Just fallout from running Ctrl-K Ctrl-D :)\n. Because we only want to show the short summary message here. ToString includes the stack trace\n. For example, when DNX_TRACE is off, we want to see:\nError: Something bad happened\nBut with DNX_TRACE:\nError: Something bad happened\n[Error] Full Exception: System.SomethingBadHappenedException: Something bad happend\n at blah.blah.call.stack\n at blah.blah.call.stack\n. Better safe than sorry\n. I agree. Rather have a large constructor than accidentally-mutable objects...\n. Looks like find/replace went a little haywire ;P\n. I'll remove this before merge. Have it here so I can see if https://github.com/dotnet/corefx/pull/3999 gets to the build in time and replace the reflection with that.\n. :+1:\n. Ah shoot, no.\n. Fixing now\n. Yeah, don't know how I missed that :).\n. :+1:\n. Going to fix this in the PR or file a bug for later? Either way, we need to track this\n. That's Windows-only though.\n. Slight reword suggestion: '{0}' does not contain a 'Program' type suitable for an entry point\n. This code was actually taken from a different test which was trying to repro a bug in System.Net.Security around StreamReader.ReadToEnd :). I can trim it back since we don't care about that here.\n. Yeah, string.IsNullOrEmpty here.\n. These tests can (and will) be moved to PlatformAbstractions.\n. aspnet/PlatformAbstractions#14\n. Haha, and I totally know exactly how a typo like that happens. I've almost committed something with \"jjj\" in it from VsVim being in the wrong mode\n. ",
    "NullVoxPopuli": "nuget pack doesn't seem to work for me. \nI get the following:\n```\nWARNING: 2 issue(s) found with package 'csharp-extensions'.\nIssue: Assembly outside lib folder.\nDescription: The assembly 'bin\\Debug\\dnx46\\csharp-extensions.dll' is not inside the 'lib' folder and hence it won't be a\ndded as reference when the package is installed into a project.\nSolution: Move it into the 'lib' folder if it should be referenced.\nIssue: Assembly outside lib folder.\nDescription: The assembly 'bin\\Debug\\dnxcore50\\csharp-extensions.dll' is not inside the 'lib' folder and hence it won't\nbe added as reference when the package is installed into a project.\nSolution: Move it into the 'lib' folder if it should be referenced.\n```\nWhy doesn't it copy to the lib folder? and why, when I move those folders (dnxcore50 and dnx46) to lib, does it still not work? (still shows those warnings)\n. I was thinking it would end up being a C# feature, since it would be extension mapping.\nwhat's Roslyn?\n. ",
    "sajayantony": "Peter has been able to repro this only on our lab machines and I can't get it to repro locally.. Will send you the ip and login details if you want to take a look and. \n. Yep. Peter is on it right now. \n. Nit: Do you want to remove unused directives?\n. ",
    "shhsu": "It has something to do with the fact that File.Exists(path) returns false for a network path that clearly exist\nI.E. Say that my helio's path over network is \\\\Lab-Foo\\HeliosApp\\, then\n- File.Exists(\"\\\\Lab-Foo\\HeliosApp\\jit\\packages\\Helios.0.1-alpha-100\\Helios.0.1-alpha-100.nupkg\") returns false\n- in the IIS server's machine, running command\n         dir \\\\Lab-Foo\\HeliosApp\\jit\\packages\\Helios.0.1-alpha-100\\Helios.0.1-alpha-100.nupkg\n  will successfully yield a result\n. Brief research seem to indicate permission issue. However, the file is owned by the same lab account as the lab account I use to run IIS\n. Created a pull request\nhttps://github.com/aspnet/KRuntime/pull/418\n. A blast from the past here. After talking to Jonathan we decided that this is a worthwhile feature to go after. Let's revisit.\n. New pull request\nhttps://github.com/aspnet/KRuntime/pull/513\n. Issue is also tracked here\nhttps://github.com/aspnet/KRuntime/issues/414\n. I think the difference between Warnings and Errors is that Errors should reflect an fatal problem on the crossgen process and the crossgened dll is malformed somehow and not usable. On the other hand if the user gets an warning it means the crossgen image is sub-optimal but fully usable.\n. This pr is kind of messed up due to improper merge. Restarting a new one\n. Do we support crossgen in Linux? Not sure whether to change kpm.sh\n. Done changing the namespace to ProjectManager. Note that I also change the project name hence it's now Microsoft.Framework.ProjectManager.dll\n. As discussed offline, changed ProjectManager back to Project. Also added a line to detect aspnetcore* folders\n. IReport is in Microsoft.Framework.PackageManager. I can't really use that class as is because Microsoft.Framework.Project is PackageManager's dependee. We could either move IReport to common or merge Project with PackageManager. (I didn't want to move IReport to Project because we will eventually remove Project and I don't want to make it bigger)\nIn both cases, it seems like a broader change than I wish to cover in this PR.\n. Since https://github.com/aspnet/kvm/pull/76 is already checked in this might not be necessary.\nClosing. We should cover this issue when we merge Microsoft.Framework.Project with Microsoft.Framework.PackageManager\n. The problem is identical to what @Xiaohongt described on her vm\nhttps://github.com/aspnet/kvm/issues/84\n. This is because the fix is not approved hence not checked in yet\n. checked in\nplease verify\n. I was able to run crossgen on the vm in question\n. Just to be safe, I just launched a StandardMVC app on IIS from the VM in question as well. Everything seems fine\n. any updates?\n. Sure, let me know what is a good time to rebase and merge back\n. It may be necessary. Any updates on the approval?\n. @kirthik \nWhere you able to verify with David? I am on leave\n. This is an interesting point. I'd like to keep this PR strictly as a bug fix though.\nWe'll await @davidfowl 's response\n. Actually this solution doesn't work anymore.\nIt would cause this line to throw\n\"System.NotSupportedException: The given path's format is not supported.\"\nhttps://github.com/aspnet/KRuntime/blob/dev/src/dotnet.host/Bootstrapper.cs#L59\n. Fixed with the proper syntax.\nTested, it was able to pack the sample web app in the mvc branch\n. Project is gone\n. any updates?\n. If you don't care about startup performance you could do kvm install --nonative and that would bypass the crossgen step.\nOr do you just want crossgen to be faster?\n. related to https://github.com/aspnet/dotnetsdk/pull/152 and https://github.com/aspnet/Helios/pull/98\n. Note that the above logs contains the following warning\nWRN: Timestamp of the IL assembly does not match record in .aux file. Loading IL to compare signature.\nThese warnings would not exist in production because we would both ngen install and load from KRE_HOME.\n. Let me clarify:\nWe are seeing these warning because when I kvm install, the corrosponding ngen install is called on the Roslyn libraries in KRE_HOME. (i. e. %USERPROFILE%.k\\runtimes...)\nHowever when I am testing the feature I am using my own build of KRE. The ngen images still loads because this build of KRE (i.e. %MYAPP%\\approot\\packages...) has the same Roslyn dll as the one installed previously. However, because the timestamp is different we see these warnings.\nIn any production scenario including dev or production, we won't see these warnings because things always load from KRE_HOME\n. @davidfowl \nHow would i test the issue in concern? Or who should I contact?\n. this actually sound like a possible deal breaker. Any client uses any BCL library that takes a file path could break due to this\n. I have not seen this.\nIs this crossgen after IBC data?\nThe error message above is a symptom not the root cause.\n\"Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code.\n@troydai I assume this is not the \"path too long\" problem? (return code seems different) Is it possible to dig further like you were able to last time?\n. Will do\n. I moved IsCore45, IsAspNetCore and IsAspNet to VersionUtility\nAdded IsCore method which is used here\n. Yes, I know we talked about this. However, in retrospect I thought this approach might be cleaner. Note that if I pass single dependency context I would have to do a checking within the if (_options.Native) { ... } block in PackManager. I really rather native image generation logic be left in 1 class \n. Done\n. Done\n. Done\n. I know it seems wasteful building another map and then iterate through value of an existing map, but it seem more correct to loop over dependencies.\n. done\n. done\n. Because it is an inner class. The only thing I can do is alias this or move the class out of PackManager. Keeping this for now\n. Ah... Also forgot to mention THIS: resolver.PackageAssemblyLookup uses assembly name as key. I need package names here... I would have to build a separate map the other way round too... So, can't save any code here\n. Hmm... I could throw exception if it returns false but then the code seems would be quite bulky, it would basically perform the same operation. I know trygetvalue is faster but is it worth the bulk?\nBefore I make the change I just wanted to verify if we have a policy to use TryGetValue instead of []?\n. oh, forget it... I misspoke\nChanging it\n. Sure, changing usage\n. Done\n. Sure, libId instead\n. ",
    "monoman": "I prefer proposal 1, to avoid combinatorial explosion, which I currently\nobserve on csprojs. But 'configurations' inside 'configurations' sound a\nbit too repetitive, maybe some other word?\nRafael Teixeira\nO..:.)oooo\nOn Tue, Jul 8, 2014 at 5:46 AM, David Fowler notifications@github.com\nwrote:\n\nProposal 1:\n{\n    \"dependencies\": {\n},\n\"configurations\": {\n    \"net45\": {\n        \"compilationOptions\": {\n            \"define\": [ \"ALWAYS\" ]\n        },\n        \"dependencies\": {\n            \"Newtonsoft.Json\": \"5.0.8\"\n        },\n        \"configurations\": {\n            \"debug\": {\n                \"compilationOptions\": {\n                    \"define\": [ \"DEBUG\", \"TRACE\" ],\n                    \"optimize\": false,\n                    \"debugSymbols\": \"full\"\n                }\n            },\n            \"release\": {\n                \"compilationOptions\": {\n                    \"define\": [ \"RELEASE\", \"TRACE\" ],\n                    \"optimize\": true,\n                    \"debugSymbols\": \"pdbOnly\"\n                }\n            }\n        }\n    }\n}}\nProposal 2:\n{\n    \"dependencies\": { },\n    \"configurations\": {\n        \"net45\": {\n            \"compilationOptions\": {\n                \"define\": [ \"ALWAYS\" ]\n            },\n            \"dependencies\": {\n                \"Newtonsoft.Json\": \"5.0.8\"\n            }\n        },\n        \"net45|debug\": {\n            \"compilationOptions\": {\n                \"define\": [ \"DEBUG\", \"TRACE\" ],\n                \"optimize\": false,\n                \"debugSymbols\": \"full\"\n            }\n        },\n        \"net45|release\": {\n            \"compilationOptions\": {\n                \"define\": [ \"RELEASE\", \"TRACE\" ],\n                \"optimize\": true,\n                \"debugSymbols\": \"pdbOnly\"\n            }\n        }\n    }}\nkpm build -framework net45 -configuration debug\nkpm pack -framework net45 -configuration debug\nk run -framework net45 -configuration debug\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/73#issuecomment-48286464.\n. nitpick:\n\nrequireLicenseAcceptange => requireLicenseAcceptance\nRafael Teixeira\nO..:.)oooo\nOn Wed, Sep 17, 2014 at 6:07 AM, David Fowler notifications@github.com\nwrote:\n\nConcrete properties to add:\n- projectUrl\n- requireLicenseAcceptange\n- tags\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/235#issuecomment-55867639.\n. Yes, on the Raspberry Pi, I've needed to restore incrementally (changing\nproject.json on each iteration, to a broader subset of the initial\ndependencies), so it seems that the \"unresolved\" nodes on the dependency\ntree or the downloading processes are leaking... After most dependencies\nare up to date on the packages folder things go easy. Just to share my\nfirst-hand experience with the problem.\n\nRafael Teixeira\nO..:.)oooo\nOn Tue, Jun 17, 2014 at 1:21 AM, Eilon Lipton notifications@github.com\nwrote:\n\nApparently on limited memory machines (e.g. Raspberry Pi 512MB) we run out\nof memory quickly. I've heard of some devs experiencing this as well (\n@Tratcher https://github.com/Tratcher mentioned this to me). We need to\nprofile memory usage for both restore as well as build to see if we're\nholding onto data that we don't need, or if we have duplication of data,\nand so forth.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/343#issuecomment-46265887.\n. Finally someone echoes my 3-years old issue: see\nhttps://nuget.codeplex.com/workitem/1221\n\nRafael Teixeira\nO..:.)oooo\nOn Tue, Jul 1, 2014 at 1:32 AM, David Fowler notifications@github.com\nwrote:\n\nWe need a convention for both consuming and adding native binaries to\nnuget packages.\nWhen you're developing a project and need to take a dependency on a native\nbinary, you need to put it in a path that is loadable. This scenario needs\nto take bitness and OS into account.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/402.\n. Don't forget .svn, .hg, etc... for people using other version control\nsystems...\n\nRafael Teixeira\nO..:.)oooo\nOn Fri, Aug 29, 2014 at 12:52 AM, David Ebbo notifications@github.com\nwrote:\n\nCurrently, if project is at root of repo, the pack command includes the\n.git folder, which is clearly not good. The pack command should special\ncase .git and exclude it,\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/588.\n. +1 for this, too! \n. :+1: \n. \n",
    "thereverand": "Kpm's parser is pretty freakin nifty.\n. low priority\n. Of course those classes would need to be changed from internal to public.\n. I'm curious, why was that decision made?\nI use bower to get around it anyway, so it won't impede my workflow. :)\nBut it does seem odd to build a full stack framework and then defer to nodejs tools for this. Especially when all the content devs would want to use are NuGet packages.\nCould I contribute a tool for this?\n. ",
    "Praburaj": "This fix should also address the case when k.cmd is being run on a folder without project.json it should exit gracefully without the error message we print now. \n. Today tooling shows a squiggle when there are duplicate references within the same dependencies node. It does not show a squiggle if the same dependency is defined in both root level dependency and a specific target framework dependency. \n\n. yeah that's right - its due to the JSON schema validation. I thought of mentioning this as there is something right now rather than nothing. \n. Typing with an incorrect case is a common mistake most people do. We should avoid throwing. \n. Try opening the help.txt file in notepad or some text editor. I can see type help.txt prints it out correctly too. \n. This will also help easy switch between installed kvms. \nExample: \n``````\nkvm install 0.1-alpha-build-0446 -x86 -svrc50 -alias AlphaX86Build\nkvm install 0.1-alpha-build-0446 -x86 -svrc50 -alias AlphaX64Build\nkvm use AlphaX86Build``\n``````\n. This is going to be help if the user wants to set aliases for some specific KREs from thekvm list` by going through the list. \n. Also when doing an upgrade when there is an existing KRE and the default alias is changed to point to the newly installed KRE, can we print a clear message that default alias is overridden? \nToday we always print \nSetting alias 'default' to 'KRE-svrc50-x86.0.1-alpha-build-0509'\nInstead can we print\nReplacing alias 'default' to point to 'KRE..blah'. \nIf the user does a kvm upgrade without realizing that the default alias will be overwritten, this message can ring a bell. \n. @graemechristie makes sense. I'll file a separate issue for the second comment. \n. This need not delete the KRE corresponding to this alias, but just an alias delete. \n. yeah. First install is typically the default for many. \n. @ahmetalpbalkan do you still see this reproduce? We have been able to get apps like MusicStore and bugtracker running on mono. Do you mind retrying this? \n. Great. Thanks for confirming @ahmetalpbalkan \n. Nice. I will try things on Mono. \n. This fix seems to work. I can see the entire music store sample working fine on mono without any hacks. Except for this bug https://github.com/aspnet/mvc/issues/916 I can see the sample pretty much working on mono. \n. Looks like with beta bits, EF Sql server package is running into this issue again. Reopening the bug @suhasj \nWe used KRE# beta1-10491 and tested against both 3.6.1 and 3.8.0 of mono. \n. Opened a different bug https://github.com/aspnet/KRuntime/issues/690\nClosing this down. \n. This needs to be fixed for both k and kpm\n. Yes as long as it does not show weird stuff on typing /? it is enough. \n. I think the scope of this bug is more than what I mentioned above. The mono KRE package does not currently have windows .cmd files for k, kpm etc. We need to fix the mono KRE package as well to address the scenario. \n. I think this needs discussion. \n. There is a bug on this already : https://github.com/aspnet/Helios/issues/36\n. I think this problem does not exist any more. @balachir @ChengTian could you confirm? \n. We have been testing 3.6.1 (mono compiled from master branch of mono) not the official release. Our testing has been on mac. \n. sha1 \"ec01533746a79c68c94ccb24c47d523473dbc99d\" => :mavericks\nas pointed out here : https://github.com/aspnet/Hosting/issues/5\n. Needing a global.json looks extra work even for projects included in the VS .sln file. Is there a scope to improve this experience? \n. /CC: @suhasj \nAlternatively will it make sense if tooling adds a global.json with the necessary \"sources\" entries when we add projects in sub directories to improve the experience? \n. Dupe of https://github.com/aspnet/KRuntime/issues/393\n. schema validation will be good. Runtime also should catch this. \n. This change need to be done for Microsoft.AspNet.Security.MicrosoftAccount and Microsoft.AspNet.Security.Twitter packages as well now. \n@ChengTian \n. Cool. Thanks! \n. I used the updated bits to try this. I seem to be running into a different issue now. \nI tried setting the environment variable\nexport KRE_APPBASE=/Users/username/Documents/../<ToApplicationPath>\nThen running the below command (Expanded version of k kestrel)\n/Users/ktest/.kre/packages/KRE-mono45-x86.1.0.0-alpha4-10335/bin/mono /Users/ktest/.kre/packages/KRE-mono45-x86.1.0.0-alpha4-10335/bin/klr.mono.managed.dll /Users/ktest/.kre/packages/KRE-mono45-x86.1.0.0-alpha4-10335/bin/Microsoft.Framework.ApplicationHost kestrel\nWhen i try to run it from a folder other than the application folder I seem to be running into this below error: \nSystem.Exception: Unable to locate project.json\n  at Microsoft.Framework.Runtime.DefaultHost.Initialize (Microsoft.Framework.Runtime.DefaultHostOptions options, IServiceProvider hostServices) [0x00000] in <filename unknown>:0 \n  at Microsoft.Framework.Runtime.DefaultHost..ctor (Microsoft.Framework.Runtime.DefaultHostOptions options, IServiceProvider hostServices) [0x00000] in <filename unknown>:0 \n  at Microsoft.Framework.ApplicationHost.Program.Main (System.String[] args) [0x00000] in <filename unknown>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] in <filename unknown>:0\n. Looks like I used the wrong KRE version for validation. I will validate this with the latest KRE and update the bug. \n. /CC @madskristensen - project.json intellisense needs to be updated for this. \n. Is it possible to add a folder to the exclude list. For example I would like to exclude \"folder1\"//.\" from compilation apart from what the default excludes kruntime considers? \n. :shipit: \n. sounds good\n. @davidfowl @ChengTian I added something like this to my project.json\n\"frameworks\": {\n        \"aspnet50\": {\n            \"frameworkAssemblies\": {\n                \"System.Xml\": \"4.0.0.0\",\n                \"System.Data\": \"4.0.0.0\"\n            }\n        }\n    }\nWhile doing a kpm restore i see this error. Should the version be still \"\" or it is an actual GAC assembly version?  \nResolving complete, 7927ms elapsed\nUnable to locate System.Xml >= 4.0.0.0\nUnable to locate System.Data >= 4.0.0.0\nInstalling Microsoft.AspNet.SignalR.Client 2.1.1\nInstalling Newtonsoft.Json 5.0.1\nInstalling Xunit.KRunner 1.0.0-beta1-10371\nInstalling Microsoft.Framework.TestAdapter 1.0.0\nInstalling xunit.execution 2.0.0-aspnet-alpha4-10007\nInstalling xunit.core 2.0.0-aspnet-alpha4-10007\nInstalling xunit.abstractions 2.0.0-aspnet-alpha4-10007\nInstalling xunit.assert 2.0.0-aspnet-alpha4-10007\nRestore complete, 8526ms elapsed\n. I notice Helios is also failing for the same reason when launching from kpm pack output for Coreclr. \nJust to add a note : when I pack the KRE while doing kpm pack it seems to work. But fails when depending on KRE paths in %path% variable. \n/CC: @loudej @lodejard @GrabYourPitchforks \n. that's right. \n. I can validate and update the bug. \n. I can't validate this issue right now because basic apps are broken on coreclr. Will update as soon as that's working. \n. @pranavkm - This HttpClient bug is fixed now. Can we try this? \n. is this also applicable in the top level dependencies node? \n. /CC @davidfowl \n. You mean the project folder that we pointed to references other class libraries (folders) in its same folder level?\n. /CC @troydai @jhawk42 @BrennanConroy. This is fixed now. \n. Should this bug go into configuration repo? This is with the Environment based configuration source. \n. @suhasj - could you copy paste the compilation errors? \n. Musicstore uses Inmemory store when executed on mac. But the sample includes EntityFramework.SqlServer & InMemoryStore in project.json so that the sample executes on both windows and non windows machines. The types & extensions from the SqlServer package used to resolve (not necessary executed) on mono after https://github.com/aspnet/KRuntime/issues/374 was fixed. \nWith latest KRE and framework packages the build is broken on mono with failure to resolve types in the sql server package. Easiest repro is get the music store code and build & run on mono. \n. the description is from the project.json Intellisense. \n. Does not reproduce now. @balachir do you see this reproduce still? \n. Btw I tried kpm build from command line. \n. I can reproduce this from VS. But not from command line. I tried both kpm build and kpm pack from command for the same project and they seem to work. And I also verified that the kpm pack output contains the correct app folder name with these arabic characters as it is. Can this be a tooling issue? \n. Some more investigation details. \nAfter trying from the command line trials I , @ChengTian & @balachir created a console application and executed the same commands that VS executes. This seems to run fine on a console app as well. This makes us think this is a tooling issue. \n```\nusing System;\nusing System.Diagnostics;\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            try\n            {\n                var process = Process.Start(new ProcessStartInfo()\n                {\n                    FileName = @\"D:\\Users\\user.kre\\packages\\kre-clr-x86.1.0.0-beta2\\bin\\klr.exe\",\n                    Arguments = @\"--appbase \"\"d:\\users\\user\\documents\\visual studio 2015\\Projects\\EmptyAppWeb\u0633\u0629\u0648\u0690\u06941\u0669\\src\\EmptyAppWeb\u0633\u0629\u0648\u0690\u06941\u0669\"\" \"\"D:\\Users\\user.kre\\packages\\kre-clr-x86.1.0.0-beta2\\bin\\lib\\Microsoft.Framework.PackageManager\\Microsoft.Framework.PackageManager.dll\"\" build \"\"d:\\users\\user\\documents\\visual studio 2015\\Projects\\EmptyAppWeb\u0633\u0629\u0648\u0690\u06941\u0669\\src\\EmptyAppWeb\u0633\u0629\u0648\u0690\u06941\u0669\"\" --configuration Debug --out \"\"....\\artifacts\\bin\\EmptyAppWeb\u0633\u0629\u0648\u0690\u06941\u0669\"\"\"\n                });\n            process.WaitForExit();\n\n            Console.WriteLine(process.ExitCode);\n            Console.Read();\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex);\n        }\n    }\n}\n\n}\n```\n@balachir @PradeepKadubandi - could you take this bug for investigation from tooling perspective. If you would like to create a bug in tooling repo and close this bug feel free to do so. \n. @jhawk42 \n. Let me send out an email to Daniel. \n. Being tracked in a different place now. \n. /cc: @jhawk42 \n. Not sure if this issue will automatically go away if we use the official http client package. @Tratcher ? \n. With latest VS builds I notice bin and obj folder are created in the ../artifacts/ folder rather than in the application folder itself. So publish does not include the bin and obj folders by default. I notice if user switches between command line (kpm build on command line creates bin folder in application folder) and VS (publish) then this reproduces. \n. On Mono mac I see this exception on kpm restore. \n```\nToo many open files\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Collections.Specialized'.\nWarning: FindPackagesById: System.Security.Cryptography.RandomNumberGenerator\n  Too many open files\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Security.Cryptography.RandomNumberGenerator'.\nWarning: FindPackagesById: Microsoft.AspNet.Diagnostics.Interfaces\n  Too many open files\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='Microsoft.AspNet.Diagnostics.Interfaces'.\nWarning: FindPackagesById: System.Resources.ResourceManager\n  Too many open files\n  GET https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Resources.ResourceManager'.\nWarning: FindPackagesById: System.Security.Claims\n  Too many open files\n  GET https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Security.Claims'.\nWarning: FindPackagesById: System.Dynamic.Runtime\n  Too many open files\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Dynamic.Runtime'.\nWarning: FindPackagesById: System.Linq.Queryable\n  Too many open files\n  GET https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Linq.Queryable'.\nWarning: FindPackagesById: Microsoft.AspNet.Http.Extensions\n  Too many open files\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='Microsoft.AspNet.Http.Extensions'.\nWarning: FindPackagesById: Microsoft.AspNet.Http\n  Too many open files\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='Microsoft.AspNet.Http'.\nWarning: FindPackagesById: System.Diagnostics.Tools\n  Too many open files\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Diagnostics.Tools'.\nWarning: FindPackagesById: Microsoft.Framework.OptionsModel\n  Too many open files\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='Microsoft.Framework.OptionsModel'.\nError: FindPackagesById: System.Data.SqlClient\n  Too many open files\nWarning: FindPackagesById: Microsoft.Framework.WebEncoders\n  Too many open files\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='Microsoft.Framework.WebEncoders'.\nWarning: FindPackagesById: Microsoft.AspNet.Cors\n  Too many open files\n  GET https://www.nuget.org/api/v2/FindPackagesById()?Id='Microsoft.AspNet.Cors'.\nWarning: FindPackagesById: System.ObjectModel\n  Too many open files\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.ObjectModel'.\nWarning: FindPackagesById: Microsoft.AspNet.Identity\n  Too many open files\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='Microsoft.AspNet.Identity'.\nWarning: FindPackagesById: System.Linq.Expressions\n  Too many open files\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Linq.Expressions'.\nWarning: FindPackagesById: Microsoft.Framework.WebEncoders\n  Too many open files\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='Microsoft.Framework.WebEncoders'.\nWarning: FindPackagesById: System.ComponentModel\n  Too many open files\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.ComponentModel'.\nWarning: FindPackagesById: System.Diagnostics.Tools\n  Too many open files\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Diagnostics.Tools'.\nWarning: FindPackagesById: System.Dynamic.Runtime\n  Too many open files\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Dynamic.Runtime'.\nWarning: FindPackagesById: Microsoft.Framework.WebEncoders\n  Too many open files\n  GET https://www.nuget.org/api/v2/FindPackagesById()?Id='Microsoft.Framework.WebEncoders'.\nWarning: FindPackagesById: System.Threading.Tasks\n  Too many open files\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Threading.Tasks'.\nError: FindPackagesById: System.Collections\n  Too many open files\nWarning: FindPackagesById: System.Security.Principal\n  Too many open files\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Security.Principal'.\nWarning: FindPackagesById: Microsoft.AspNet.WebUtilities\n  Too many open files\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='Microsoft.AspNet.WebUtilities'.\nWarning: DownloadPackageAsync: https://www.myget.org/F/aspnetvnext/api/v2/package/Microsoft.Framework.CodeGenerators.Mvc/1.0.0-beta4-11918\n  Too many open files\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/Microsoft.Framework.CodeGenerators.Mvc/1.0.0-beta4-11918.\nWarning: DownloadPackageAsync: https://www.myget.org/F/aspnetvnext/api/v2/package/Microsoft.Framework.CodeGenerators.Mvc/1.0.0-beta4-11918\n  Error: ConnectFailure (Too many open files)\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/Microsoft.Framework.CodeGenerators.Mvc/1.0.0-beta4-11918.\nError: DownloadPackageAsync: https://www.myget.org/F/aspnetvnext/api/v2/package/Microsoft.Framework.CodeGenerators.Mvc/1.0.0-beta4-11918\n  Error: ConnectFailure (Too many open files)\n\nSystem.ArgumentNullException: Argument cannot be null.\nParameter name: stream\n  at System.IO.Compression.ZipArchive..ctor (System.IO.Stream stream, ZipArchiveMode mode, Boolean leaveOpen) [0x00000] in :0 \n  at Microsoft.Framework.PackageManager.PackageUtilities+d__1.MoveNext () [0x00000] in :0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in :0 \n  at System.Runtime.CompilerServices.TaskAwaiter1[System.IO.Stream].GetResult () [0x00000] in <filename unknown>:0 \n  at Microsoft.Framework.PackageManager.Restore.NuGet.NuGetv2Feed+<OpenNuspecStreamAsync>d__25.MoveNext () [0x00000] in <filename unknown>:0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in <filename unknown>:0 \n  at System.Runtime.CompilerServices.TaskAwaiter1[System.IO.Stream].GetResult () [0x00000] in :0 \n  at Microsoft.Framework.PackageManager.RemoteWalkProvider+d__7.MoveNext () [0x00000] in :0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in :0 \n  at System.Runtime.CompilerServices.TaskAwaiter1[System.Collections.Generic.IEnumerable1[Microsoft.Framework.Runtime.LibraryDependency]].GetResult () [0x00000] in :0 \n  at Microsoft.Framework.PackageManager.RestoreOperations+d__5.MoveNext () [0x00000] in :0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in :0 \n  at System.Runtime.CompilerServices.TaskAwaiter1[Microsoft.Framework.PackageManager.GraphItem].GetResult () [0x00000] in <filename unknown>:0 \n  at Microsoft.Framework.PackageManager.RestoreOperations+<CreateGraphNode>d__2.MoveNext () [0x00000] in <filename unknown>:0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in <filename unknown>:0 \n  at System.Runtime.CompilerServices.TaskAwaiter1[Microsoft.Framework.PackageManager.GraphNode].GetResult () [0x00000] in :0 \n  at Microsoft.Framework.PackageManager.RestoreOperations+d__2.MoveNext () [0x00000] in :0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in :0 \n  at System.Runtime.CompilerServices.TaskAwaiter1[Microsoft.Framework.PackageManager.GraphNode[]].GetResult () [0x00000] in <filename unknown>:0 \n  at Microsoft.Framework.PackageManager.RestoreCommand+<RestoreForProject>d__70.MoveNext () [0x00000] in <filename unknown>:0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in <filename unknown>:0 \n  at System.Runtime.CompilerServices.TaskAwaiter1[System.Boolean].GetResult () [0x00000] in :0 \n  at Microsoft.Framework.PackageManager.RestoreCommand+<>c__DisplayClass69_0+<b__0>d.MoveNext () [0x00000] in :0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x00000] in :0 \n  at System.Runtime.CompilerServices.TaskAwaiter.GetResult () [0x00000] in :0 \n  at Microsoft.Framework.PackageManager.RestoreCommand+d__69.MoveNext () [0x00000] in :0 \n----------\nRestore failed\nArgument cannot be null.\nParameter name: stream\nWarning: FindPackagesById: System.Runtime.Extensions\n  Too many open files\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Runtime.Extensions'.\nWarning: FindPackagesById: System.Linq\n  Too many open files\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Linq'.\nWarning: FindPackagesById: System.Linq\n  Error: ConnectFailure (Too many open files)\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Linq'.\nError: FindPackagesById: System.Linq\n  Error: ConnectFailure (Too many open files)\nWarning: FindPackagesById: System.Reflection\n  Too many open files\n  GET https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Reflection'.\nWarning: FindPackagesById: System.Linq.Expressions\n  Too many open files\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Linq.Expressions'.\nError: FindPackagesById: Microsoft.AspNet.FileProviders.Interfaces\n  Too many open files\nWarning: FindPackagesById: System.Text.Encoding.CodePages\n  Too many open files\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Text.Encoding.CodePages'.\nWarning: FindPackagesById: System.Security.Claims\n  Too many open files\n  GET https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Security.Claims'.\nWarning: FindPackagesById: System.Threading.Thread\n  Too many open files\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Threading.Thread'.\nWarning: FindPackagesById: Microsoft.AspNet.FeatureModel\n  Too many open files\n```\n. @pranavkm - should this bug be in MVC repo? \n. I cant seem to reproduce this issue. @ianhong are you able to reproduce this issue? \n. Cool. Thanks closing the issue. \n. @troydai Is there any more action item on this bug? Can this be closed? \n. dup of https://github.com/aspnet/KRuntime/issues/1008? \n. Dup of https://github.com/aspnet/KRuntime/issues/840\n. Keeping the bug with a repro and closing the remaining ones. \n. /CC : @davidfowl @Eilon \n. @ChengTian @Eilon PR updated. Can I get a sign off? \n. Sure. I can break the longer line into two. \n. merged.\n. Thanks. Merged. \n. I'm unable to reproduce this issue. Could you try this again? \n. Fixed https://github.com/aspnet/KRuntime/pull/1016\n. I can see this works. \n. @muratg \n. Updated PR.\n. From @Yuioup on November 27, 2014 15:2\nRunning kvm 1.0.0-beta1 on Mono 3.12.1 (Github latest version)\n. @suhasj - we have seen some issues with kpm restore on Linux. Moving the bug to Kruntime repo. \n. From @kbztval on November 18, 2014 7:8\ntry vs2015 tools options nugetPackageManager  packageSources check nugget.org\n. From @davidfowl on November 18, 2014 7:17\nThere's a bug in the beta2 KRE that cases this to happen. \n. From @tugberkugurlu on November 18, 2014 9:4\nWhen I see a PathTooLongException:\n\nWho should I harass to make this thing go away from Windows? connect report?\n. I'm moving this bug to Kruntime repo. \n. I will try this and update the bug. \n. I cannot reproduce this with the latest VS bits. \n. Here is the stack trace for this error when run from command line. \nD:\\Users\\testuser\\Documents\\Visual Studio 2015\\Projects\\ConsoleApp2\\src\\ConsoleApp\n2>d:\\Users\\testuser\\.kre\\packages\\KRE-CLR-x86.1.0.0-beta1\\bin\\k run\nSystem.InvalidOperationException: error CS0009: Metadata file '<in-memory assemb\nly>' could not be opened -- Image is either too small or contains an invalid byt\ne offset or count.\nerror CS0009: Metadata file '<in-memory assembly>' could not be opened -- Image\nis too small.\n   at Microsoft.Framework.ApplicationHost.Program.ThrowEntryPointNotfoundException(DefaultHost host, String applicationName, Exception innerException)\n   at Microsoft.Framework.ApplicationHost.Program.ExecuteMain(DefaultHost host, String applicationName, String[] args)\n   at Microsoft.Framework.ApplicationHost.Program.Main(String[] args)\n. I will try to reproduce this - just to confirm your default kre is kre-coreclr-x86.1.0.0-beta2-10761?\n. This is a dup of https://github.com/aspnet/KRuntime/issues/706.\n. Is this PR related to this bug? https://github.com/aspnet/KRuntime/issues/1018 ?\n. The issue addressed with this PR and the bug #1018 seems to be similar/same except the difference of local or remote source. If --ignore-failed-sources needs to be used for http sources to ignore on failure it will be good to have the same behavior for local sources. \n. Can we highlight the warning message with a different color code. The message looks buried a bit. \n. @ChengTian sure I filed https://github.com/aspnet/KRuntime/issues/1051\n. I'm just trying to see if the cross gen itself could be faster. \n. Just a note : https://github.com/aspnet/MusicStore/blob/dev/test/E2ETests/Common/DeploymentUtility.cs#L313 needs to change as well with this change. \n. Looks like kpm restore is throwing this error. \n. Ah.. Commented on a wrong bug. ignore the above comment. \n. Thanks @Tragetaschen and @memphisweb. \n. Change looks good to me. /CC @ChengTian \n. Will be ideal to do that. However a lot of things work on lower versions starting 3.6.1. \n. @Tragetaschen's fix to mono has gone into mono right now : https://github.com/mono/mono/commit/46b5b849ae2e6e71326030e3a6806d59cdb0eb4a\nThis issue should disappear when running on an upcoming mono release or mono built from sources. \n. @BrennanConroy is there a PR for this? \nAnd it would be good to make the word Warning: in yellow. \n. This issue was moved to aspnet/kvm#136\n. @troydai \n. Can't repro with latest bits. \n. This is an rc1 bug. So the PR is to dev branch. \n. Do you think this needs to go in beta3? \n. Nope. This has a specific scope. \nMono + kpm build + Preprocessor code referencing other class libraries.\nThis PR is going to be closed as this is a mono bug getting fixed in mono. Refer https://github.com/aspnet/XRE/issues/1048 for mono PR details. \n. I see. Good to know. \n. @Tragetaschen's fix to mono has gone into mono right now : https://github.com/mono/mono/commit/46b5b849ae2e6e71326030e3a6806d59cdb0eb4a\nThis issue should disappear when running on an upcoming mono release or mono built from sources. Closing this PR. \n. Looks good :shipit: \n. @davidfowl @brentschmaltz @Tratcher \n. Repro steps are in the bug with a simple console application. \n. I tried HttpDocumentRetriever and I ran into the same issue there as well. \n. I can't seem to reproduce this issue anymore and our Linux and Mac CI's have gone past this stage. Closing this issue for now. \n. Do we need to set the flag for all the 3 files klr, kpm and k or just klr is sufficient? Do we expect anyone to use kpm and k from the bundle output? \n. Currently k --version does return the right version on mono. Will revisit this when we rename it to something other than k. \n. yeah. right. \n/CC @suhasj \n. Sending a different PR. \n. Thanks @ChengTian I merged the change. \n. @davidfowl - good to go in this PR? \n. Merged : https://github.com/aspnet/XRE/commit/b4a87b7669baacfe840e22e7040180bd78d14cdc\n. @davidfowl Updated PR. \n. /CC @muratg \n. merged : https://github.com/aspnet/XRE/commit/f748be51c055b1b136888bb32a595b29f47fac7f\n. @fsbahman meanwhile you could set the pack output to something as small as c:\\test. \n. @muratg \n. @davidfowl - updated PR.\n. Dupe of https://github.com/aspnet/XRE/issues/1093? \n. I see. It might not be a dup then. \n. @troydai Do we have information to print an unrecognized target framework net45+win8 message in this case? \n. :shipit: after above comments. \n. :shipit: after these comments addressed. \n. @muratg sure. \n. @troydai confirmed this does not reproduce anymore. Closing this down. \n. Looks good to me :shipit: \n. I just saved project.json in VS and there was no kpm restore running from command line at that time. But as I said I can't reproduce this consistently. It just happened once. \n. I ran into this today again on a different repo. \n```\nSystem.IO.IOException: The process cannot access the file 'D:\\K\\HttpAbstractions\\src\\Microsoft.AspNet.WebUtilities\\project.lock.json' because it is being used by another process.\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\n   at Microsoft.Framework.Runtime.DependencyManagement.LockFileFormat.Write(String filePath, LockFile lockFile)\n   at Microsoft.Framework.PackageManager.RestoreCommand.WriteLockFile(String projectLockFilePath, Project project, List1 graphItems, PackageRepository repository, IEnumerable1 frameworks)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__79.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.<>c__DisplayClass77_0.<b__0>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.<>c__DisplayClass95_01.<<ForEachAsync>b__0>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.<ExecuteCommand>d__77.MoveNext()\n----------\nRestore failed\nThe process cannot access the file 'D:\\K\\HttpAbstractions\\src\\Microsoft.AspNet.WebUtilities\\project.lock.json' because it is being used by another process.\nLoaded Module: dnx.clr.dll\n```\n. I'm seeing this often now. Reopening. \n. Merged : https://github.com/aspnet/dnx/commit/70e42c539a988786327420a29c3c9a6302037038\n.user-secret` feature is also affected by this issue. \nC:\\Users\\username>user-secret\ncritical: Command failed : Object reference not set to an instance of an object.\nOn debugging more VersionGetter property of CommandLineApplication is null. \n. @rustd \n. @ChengTian @davidfowl \n. And it will also be good to review the impact of any other environment variables like DNX_PACKAGES_CACHE with bundle --no-source. \n. Looks good to me :shipit: \n. Should this be unset this after finishing the test? \n. Will it be useful to put these in files and read it at runtime. This can help improve readability? \n. Put with in a try catch and ignore if delete fails? \n. Do we need a run command? \n. Fixed. \n. Fixed with the updated PR. \n. Ah.. Missed that. I'll fix it. \n. Removed. \n. Ah.. I moved the List<string> definition inside the foreach loop. This probe happens foreach item in the foreach loop. So it has to be a new List<string> for each iteration.\n. I felt probe details on where the runtime binaries were searched will be useful mainly for the failure case. And the bug also talks about this case. But I can print the location of the KRE packed if it will be useful if feel strong about it. \n. sure. Fixed. \n. Messages to end with a period. \n. Messages to end with a period. \n. when target framework is CoreCLR => aspnetcore50? \n. Messages to end with a period. \n. Will it be helpful to put it in a template file in the project? \n. can't we just return process.ExitCode directly? \n. Can we declare a const like EXIT_SUCCESS and compare the return value with it? \n. Fail => Failed. \n. Same in all log messages. \n. Should this return a non-zero code when it fails to find the command in the Scripts dictionary? \n. I feel EXIT_SUCCESS is more readable than 0 :)\n. The probe paths are going to be multiple in number. printing each one a separate line will make it cleaner and avoid scrolling. \n. Items are added to the list only when !runtimeLocated is true. I initialized the list inside the if condition to avoid initializing when the runtime is successfully located. Just to reduce some allocation. But I can fix it if you feel strong about it. \n. Looks like this ExitCode is not being consumed by any one as you return a boolean. Can we remove this? \n. These properties ExitCode and ErrorMessage actually indicate the last encountered ExitCode and ErrorMessage. This will get overwritten when you reuse the same ScriptExecutor instance again. Should this ErrorMessage be instead an out variable for this Execute function? \n. can this be a const string instead? \n. minor : can this be var dependencies = ResolveLocalDependency(loadableAssembly.Name, assemblyName => missing.Add(assemblyName)); instead? \n. var\n. var? \n. var? \n. why not print the return code here as well? \n. And can this be Application => CallApplicationMain?\n. KRE traces print the function name any way. So it's easier to correlate than a generic error in my opinion.\n. CommitOptions => AddOptions\n. nit: Delete the white line. \n. Do we need to initialize the list here with {\"\"}\n. delete these lines? \n. Delete a white line. \n. Sort the namespaces? \n. DirectoryInfo(name).Name instead? \n. Is this necessary to do this replacement as you seem to be using all System.IO functions? \n. accessKey seems unused. okay to remove? \n. I couldn't find a better place to hack this and this looked like the simplest fix with minimal impact. This code automatically no-ops if mono fixes the bug as requestingAssembly becomes non null. \n. actually this can be \"!preprocess\"\n. sure let me know if this PR should be closed. \n. Good point. I'll fix it. \n. yeah. I'll fix that. \n. Sure. I'll update the PR with this feedback. \n. Ah.. fixed. \n. All callers handle the null here. But it wouldn't hurt adding a null check. \n. I see. I will check that out. \n. Yup. I'll fix this. \n. I had a look at the perfomance_stuff branch change on this. I probably need to understand this a bit better. It looks like you still do a disk read to read the contents of the file in for loop during the first time. Am I missing something here? \n. yeah. w+ includes _. \n. Nope. Returns false for _. \n. nah..contexts are bit different. One is url validation, other package name validation etc. \n. fixed. \n. formatting.. \n. Can we optimize this a bit by storing the OrderedKeys on a local variable and do the where check - RenderLibraries can remove OrderBy as well. \n. can we rename this to _hideDependencies? \n. alternatively _listDependencies and give a default value in the constructor. \n. dependents => dependencies. \n. formatting.\n. * on package versions?\n. for all 3 packages here. \n. nit: Delete the whitespace here and add after the using statement? \n. fixed build# to *. \n. Can we add a little description for the package? \n. formatting. \n. formatting.\n. fixed build# to *. \n. I think produce build on output option can be deleted. \n. var\n. do you need this check if frameworks is empty list? \n. string.empty instead of \" \"? \n. Alternatively avoid string concat for non-listed projects. \nvar libDisplay = _listedProjects.Contains(lib.Name) ? \n                           \"*\" + lib.ToString() : \n                           lib.ToString();\n. nit: do you need this variable. Just return true or use it everywhere. \n. nit: frameworkSelectionErrors => error or frameworkSelectionError, If you always populate a single error. \n. license header\n. May be a lame question. Is there a fallback for a https url if not git@? \n. Just wondering if this is required if the globbing code is preprocessed? \n. typo in fallbackIncludeing\n. sort namespaces. \n. Should this has an interlocked increment? \n. Use Path.AltDirectorySeparatorChar? \n. Path.AltDirectorySeparatorChar? \n. ",
    "sayedihashimi": "Are we on track to get this in for Alpha?\n. I don't have access to edit labels, do we have a bug label that should be applied here?\n. Thanks @Eilon, how about the next release? Any concerns with enabling it?\n. After chatting with Bill, we think this is a post-CTP1 bug. \nIf you think this is needed for CTP1 please let me know*\n. OK I've given it to Bill to investigate.\n. I like the idea of having a central packages folder for the local dev box. Whether it should read from KRE_PACKAGES or nuget.config, I'm not sure.\n\nMaybe can can just support a nuget.config next to the solution\n\nI would be careful relying on any files next to the solution. The solution concept is very loose in msbuild terms. Also a project can be in several solutions and in a lot of cases the .sln file is in some arbitrary location.\n\nThe effect is if you have a csproj based class library that uses nuget packages, those won't see the kpm installed nuget packages (when it's global, it'll be transparent though).\n\nFor .csproj when a nuget pkg adds a reference it is added in the following way.\nxml\n<ItemGroup>\n  <Reference Include=\"Microsoft.Web.Infrastructure, Version=1.0.0.0, ...cture=MSIL\">\n    <Private>True</Private>\n    <HintPath>..\\packages\\Microsoft.Web.Infrastructure.1.0.0.0\\lib\\net40\\Microsoft.Web.Infrastructure.dll</HintPath>\n  </Reference>\n</ItemGroup>\nI think we can make this recognize a local cache as well. We could write the elements as something more like the following.\n``` xml\n\n..\\packages\\\n\n\n\nTrue\n$(PackagesDir)Microsoft.Web.Infrastructure.1.0.0.0\\lib\\net40\\Microsoft.Web.Infrastructure.dll\n\n\n```\nWhen a build is kicked off in VS we can set the PackagesDir as a global MSBuild property. For command line builds we can either:\n- Work on getting this added to the .sln build\n- Instruct users to set PackagesDir as a env var if they want it to use the shared location\n. Ideally command definitions can opt out of the .cmd generation. We can special case this command but it would be better if this was built in.\n. I just tried it with a recent build and in Package Manager Log I'm seeing the following.\nRestoring packages for d:\\users\\sayedha\\documents\\visual studio 2015\\Projects\\WebApplication1\\src\\WebApplication1\\project.json\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Runtime'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Text.Encoding'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Threading.Tasks'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Collections'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Globalization'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Reflection'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.IO'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.ObjectModel'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Xml.ReaderWriter'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.IO.FileSystem'\nResolving complete, 1095ms elapsed\nUnable to locate System.IO.FileSystem >= 4.0.10.0\nnpm WARN package.json WebApplication1@0.0.0 No description\nnpm WARN package.json WebApplication1@0.0.0 No repository field.\nnpm WARN package.json WebApplication1@0.0.0 No README data\nFollowed by about 80 lines related to npm. So the message _Unable to locate System.IO.FileSystem >= 4.0.10.0_ is coming through.\n@BillHiebert is there a way that we can convert that to a warning in VS? One thing we can consider is to have the runtime (or whoever is printing the string now) to format the message in the format shown in the image below.\n\nMore details at http://blogs.msdn.com/b/msbuild/archive/2006/11/03/msbuild-visual-studio-aware-error-messages-and-message-formats.aspx. If the message was in that format Visual Studio/MSBuild will automatically pick it up and present that as a warning/error. Thoughts?\n. I chatted with some folks and it looks like we don't need this feature. Instead what we will do is what happens to C# projects today. When a project is excluded from the solution the following will happen. I will close this item now.\n1. References to the project are removed from other projects in the solution\n2. Project is removed from solution explorer\n@lucamorelli if you mean excluding files from a project, we are working on that feature right now. In a future release you'll be able to exclude files from compile and publish directly from solution explorer.\n. @eilon we support Add Ref to a system (gac) assembly. This is for loose assemblies.\n. @eilon correct \n. @MattGal in your case is Visual Studio being used by all users? In VS for the next release we are working on a feature that when you open a project that has SDK version specified in global.json, but it's not available we will install it. I think that will help for the cases where VS is being used.\nFor command line/CI scenarios I think we still have some gaps.\n. @glennc #1376 is specifically for multiple projects. I'd like this for a single project as well.\n. > We will be removing comment support as part of JSON internalization work\nSounds like something to add to announcements repo\n. Note: This is blocking osx\n. @davidfowl\n\nThis big has been filed about 20 times.\n\nProbably because its impacting a lot of people. What can we do to get a fix out for it?\nIf we can't get a fix out soon, can we modify the templates somehow to avoid the issue?\n. We don't have a good story for CI today when Visual Studio is not installed. For ASP.NET 5 there is some work that we can do to simplify this, but we are not likely to get to that until later on. In about a week I'll be posting a roadmap to the tooling repo, there should be an item for this feature on that when it's posted.\nWith that said even if we are able to simplify this for ASP.NET 5 projects, in a real world scenario there are a bunch of other project types used. What we are able to deliver would just cover the ASP.NET 5 parts. I think in many scenarios VS will still need to be installed :(\n. @ChengTian how long does dnu publish take with a web app from VS with your changes?\n. Ok thanks\n. I'm going to add a backlog item to determine what we want here.\n. Yes we have a feature to support excluding files in Visual Studio. We are currently working on other higher priority work but it is a feature I very much would like to deliver.\n. Update 1 should have beta8 installed minus the project templates.\ncc @balachir @barrytang\n. @aarnot what's in global.json?\n. That looks right to me\n. Adding @BillHiebert\n. ",
    "anandjp": "Eilon, I opened this bug for same ask in KRuntime.\n. Editor supports // type of comments as well. Runtime needs to support that\nSent from my Windows Phone\n\nFrom: David Fowlermailto:notifications@github.com\nSent: \u200e5/\u200e27/\u200e2014 2:22 PM\nTo: aspnet/KRuntimemailto:KRuntime@noreply.github.com\nCc: Anand Paranjapemailto:anand.paranjape@live.com\nSubject: Re: [KRuntime] ignore comments from json file while parsing json file at runtime (#120)\nWe already support /**/. Closing this as won't fix.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/aspnet/KRuntime/issues/120#issuecomment-44337205\n. Is this getting in CTP4?\n. Yes.. it is... I just verified. Thanks David!!\n. Now I am getting error \"An exception occurred while test discoverer 'KUnitTestDiscoverer' was loading tests. Exception: The operation is not allowed on non-connected sockets.\"\n. @davidfowl \nDiscovery is now working fine for desktop and coreCLR with latest fixes from Vijay...\nBelow error shows up on CoreCLR while running unit test tests. \n\n------ Run test started ------\nRunning tests in 'C:\\Users\\anandjp\\Documents\\Visual Studio 14\\Projects\\WebApplication4\\test\\WebApplication4.Tests\\project.json'\nError running tests in 'C:\\Users\\anandjp\\Documents\\Visual Studio 14\\Projects\\WebApplication4\\test\\WebApplication4.Tests\\project.json'\nSystem.AggregateException: One or more errors occurred. ---> System.InvalidOperationException: System.MethodAccessException: Attempt by security transparent method 'DynamicClass.lambda_method(System.Runtime.CompilerServices.Closure, System.Object[])' to access security critical method 'Newtonsoft.Json.Utilities.CollectionWrapper`1..ctor(System.Collections.Generic.ICollection`1)' failed.\n   at lambda_method(Closure , Object[] )\n   at Newtonsoft.Json.Serialization.JsonArrayContract.CreateWrapper(Object list)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewList(JsonReader reader, JsonArrayContract contract, Boolean& createdFromNonDefaultCreator)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue, String id)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\n   at Newtonsoft.Json.Linq.JToken.ToObject(Type objectType, JsonSerializer jsonSerializer)\n   at Newtonsoft.Json.Linq.JToken.ToObject(Type objectType)\n   at Newtonsoft.Json.Linq.JToken.ToObject[T]()\n   at Microsoft.Framework.DesignTimeHost.ApplicationContext.ProcessMessage()\n   at Microsoft.Framework.DesignTimeHost.ApplicationContext.DoProcessLoop()\n   at Microsoft.Framework.DesignTimeHost.ApplicationContext.ProcessLoop(Object state)\n   --- End of inner exception stack trace ---\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\n   at Microsoft.VisualStudio.Web.KUnit.TestAdapter.Execution.HostExtensions.ExecuteTests(IHost host, IFrameworkHandle framework, IEnumerable`1 tests, KUnitTestConfiguration testConfiguration)\n   at Microsoft.VisualStudio.Web.KUnit.TestAdapter.KUnitTestExecutor.RunTests(IEnumerable`1 tests, IRunContext runContext, IFrameworkHandle frameworkHandle)\n---> (Inner Exception #0) System.InvalidOperationException: System.MethodAccessException:  Attempt by security transparent method 'DynamicClass.lambda_method(System.Runtime.CompilerServices.Closure, System.Object[])' to access security critical method 'Newtonsoft.Json.Utilities.CollectionWrapper`1..ctor(System.Collections.Generic.ICollection`1)' failed.\n   at lambda_method(Closure , Object[] )\n   at Newtonsoft.Json.Serialization.JsonArrayContract.CreateWrapper(Object list)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewList(JsonReader reader, JsonArrayContract contract, Boolean& createdFromNonDefaultCreator)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue, String id)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\n   at Newtonsoft.Json.Linq.JToken.ToObject(Type objectType, JsonSerializer jsonSerializer)\n   at Newtonsoft.Json.Linq.JToken.ToObject(Type objectType)\n   at Newtonsoft.Json.Linq.JToken.ToObject[T]()\n   at Microsoft.Framework.DesignTimeHost.ApplicationContext.ProcessMessage()\n   at Microsoft.Framework.DesignTimeHost.ApplicationContext.DoProcessLoop()\n   at Microsoft.Framework.DesignTimeHost.ApplicationContext.ProcessLoop(Object state)<---\nAn exception occurred while invoking executor 'executor://kunittestexecutor/v1': One or more errors occurred.\nSystem.MethodAccessException: Attempt by security transparent method 'DynamicClass.lambda_method(System.Runtime.CompilerServices.Closure, System.Object[])' to access security critical method 'Newtonsoft.Json.Utilities.CollectionWrapper`1..ctor(System.Collections.Generic.ICollection`1)' failed.\n   at lambda_method(Closure , Object[] )\n   at Newtonsoft.Json.Serialization.JsonArrayContract.CreateWrapper(Object list)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewList(JsonReader reader, JsonArrayContract contract, Boolean& createdFromNonDefaultCreator)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateList(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, Object existingValue, String id)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.SetPropertyValue(JsonProperty property, JsonConverter propertyConverter, JsonContainerContract containerContract, JsonProperty containerProperty, JsonReader reader, Object target)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateObject(Object newObject, JsonReader reader, JsonObjectContract contract, JsonProperty member, String id)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObject(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateValueInternal(JsonReader reader, Type objectType, JsonContract contract, JsonProperty member, JsonContainerContract containerContract, JsonProperty containerMember, Object existingValue)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\n   at Newtonsoft.Json.Linq.JToken.ToObject(Type objectType, JsonSerializer jsonSerializer)\n   at Newtonsoft.Json.Linq.JToken.ToObject(Type objectType)\n   at Newtonsoft.Json.Linq.JToken.ToObject[T]()\n   at Microsoft.Framework.DesignTimeHost.ApplicationContext.ProcessMessage()\n   at Microsoft.Framework.DesignTimeHost.ApplicationContext.DoProcessLoop()\n   at Microsoft.Framework.DesignTimeHost.ApplicationContext.ProcessLoop(Object state)\n. thanks. Opened new issue#45 in testing repository\n. Can we hide \"Attemping to resolve dependency .. \" behind verbose switch? this will make it much cleaner in tooling.\n. @davidfowl this is not fixed in final Preview build. as per Bill, Runtime is still not sending newly added files.\n. - Create new starter template.\n- Create a folder 'foo'. Create another folder 'bar' within 'foo'\n- Now add a C# class in 'bar' \n- Observe the top left navigation bar for combined intellisense\nActual:  No navigation dropdown bar for combined intellisense.typing Microsoft. in cs file inside any function will show only 3 entries in intellisense\nExpected:  navigation dropdown bar for combined intellisense.typing Microsoft. in cs file inside any function will show MVC and more than 3 entries in intellisense with warning exclaimation icon against some entries\n. ",
    "PradeepKadubandi": "Also, it would be good to get the \"target framework\" for which the references are sent.\n. Also, it would be good to get the \"target framework\" for which the references are sent.\n. yes, change \"net451\" to \"net45\" inside configurations section.\n. yes, change \"net451\" to \"net45\" inside configurations section.\n. I logged this when we are reviewing the CTP4 work items from VS (though actual work for showing all the references may not happen in CTP4 from VS side, we thought it would be good to get the runtime changes sooner - we have to sync up how all this works though).\n. I logged this when we are reviewing the CTP4 work items from VS (though actual work for showing all the references may not happen in CTP4 from VS side, we thought it would be good to get the runtime changes sooner - we have to sync up how all this works though).\n. Looks good to me!\n. Looks good to me!\n. ## Notes from our combined session\nBreak resolution into stages\nDTH changes\nlight\n- dependency walk\n- project information (compilation options etc)\n- source files from project\n- references from all non project deps\n- project refs and depdendencies\n- ANIs from packages\nheavy\n- dependency walk\n- project information (compilation options etc)\n- source files from compilation (includes preprocessors)\n- references from all non project deps\n- project refs and depdendencies\n- ANIs from packages\n- ANIs from source\n- diagnostics (errors and warnings)\n- assembly/pdb bytes for runtime\ncaching\n- caching the dependency walk\n- caching source files\n- caching references \n  - caching ANIs from source\nadvanced\n- share syntax trees between target frameworks if there's no ifdef\ntiming?\n- delay very first set of work\n. ## Notes from our combined session\nBreak resolution into stages\nDTH changes\nlight\n- dependency walk\n- project information (compilation options etc)\n- source files from project\n- references from all non project deps\n- project refs and depdendencies\n- ANIs from packages\nheavy\n- dependency walk\n- project information (compilation options etc)\n- source files from compilation (includes preprocessors)\n- references from all non project deps\n- project refs and depdendencies\n- ANIs from packages\n- ANIs from source\n- diagnostics (errors and warnings)\n- assembly/pdb bytes for runtime\ncaching\n- caching the dependency walk\n- caching source files\n- caching references \n  - caching ANIs from source\nadvanced\n- share syntax trees between target frameworks if there's no ifdef\ntiming?\n- delay very first set of work\n. Though this is fixed in general, there is one more issue.\nFor a non-compatible framework, (Web project has aspnetcore50 whereas .csproj is only targeting net45) and if the user added the dependency to a common section, DTH should return the reference as unresolved for non-compatible framework, however right now it's returning the wrapped project.json for non-compatible framework and returning the backing .cspoj for compatible framework.\nThe above needs to be fixed, hence opening the issue again.\n. Though this is fixed in general, there is one more issue.\nFor a non-compatible framework, (Web project has aspnetcore50 whereas .csproj is only targeting net45) and if the user added the dependency to a common section, DTH should return the reference as unresolved for non-compatible framework, however right now it's returning the wrapped project.json for non-compatible framework and returning the backing .cspoj for compatible framework.\nThe above needs to be fixed, hence opening the issue again.\n. oops, wrong issue, will add the info to the right one...\n. oops, wrong issue, will add the info to the right one...\n. Though this is fixed in general, there is one more issue.\nFor a non-compatible framework, (Web project has aspnetcore50 whereas .csproj is only targeting net45) and if the user added the dependency to a common section, DTH should return the reference as unresolved for non-compatible framework, however right now it's returning the wrapped project.json for non-compatible framework and returning the backing .cspoj for compatible framework.\nAlso one more issue - Only the 'References' message is fixed to return the .csproj, the 'Dependencies' message is still returning the wrapped project.json - can you fix that too? I have an idea - I can add  a context menu 'wrap' on a csproj reference inside the references node.\nOpening the issue to fix both the above.\n. Though this is fixed in general, there is one more issue.\nFor a non-compatible framework, (Web project has aspnetcore50 whereas .csproj is only targeting net45) and if the user added the dependency to a common section, DTH should return the reference as unresolved for non-compatible framework, however right now it's returning the wrapped project.json for non-compatible framework and returning the backing .cspoj for compatible framework.\nAlso one more issue - Only the 'References' message is fixed to return the .csproj, the 'Dependencies' message is still returning the wrapped project.json - can you fix that too? I have an idea - I can add  a context menu 'wrap' on a csproj reference inside the references node.\nOpening the issue to fix both the above.\n. Here's the stack trace:\nRestoring packages for C:\\Users\\pradeek\\Documents\\Visual Studio 2015\\Projects\\TestConsoleApp\\src\\TestConsoleApp\\project.json\n  CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.IO'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.IO'\n  CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Text.Encoding'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Text.Encoding'\n  CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Threading.Tasks'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Threading.Tasks'\n  CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Runtime'\nCACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Runtime'\nSystem.UnauthorizedAccessException: Access to the path 'C:\\Users\\pradeek\\Documents\\Visual Studio 2015\\Projects\\TestConsoleApp\\src\\TestConsoleApp\\proje\nct.json' is denied.\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, Fil\neOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath\n, Boolean bFromProxy)\n   at System.IO.FileStream..ctor(String path, FileMode mode)\n   at TempRepack.Engine.Model.RuntimeFileFormatter.ReadRuntimeFile(String filePath)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__79.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.<>c__DisplayClass77_0.<b__0>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.<>c__DisplayClass95_0`1.<b__0>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.Framework.PackageManager.RestoreCommand.d__77.MoveNext()\nRestore failed\nAccess to the path 'C:\\Users\\pradeek\\Documents\\Visual Studio 2015\\Projects\\TestConsoleApp\\src\\TestConsoleApp\\project.json' is denied.\n. Here's the stack trace:\nRestoring packages for C:\\Users\\pradeek\\Documents\\Visual Studio 2015\\Projects\\TestConsoleApp\\src\\TestConsoleApp\\project.json\n  CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.IO'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.IO'\n  CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Text.Encoding'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Text.Encoding'\n  CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Threading.Tasks'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Threading.Tasks'\n  CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Runtime'\nCACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Runtime'\nSystem.UnauthorizedAccessException: Access to the path 'C:\\Users\\pradeek\\Documents\\Visual Studio 2015\\Projects\\TestConsoleApp\\src\\TestConsoleApp\\proje\nct.json' is denied.\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, Fil\neOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath\n, Boolean bFromProxy)\n   at System.IO.FileStream..ctor(String path, FileMode mode)\n   at TempRepack.Engine.Model.RuntimeFileFormatter.ReadRuntimeFile(String filePath)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__79.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.<>c__DisplayClass77_0.<b__0>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.<>c__DisplayClass95_0`1.<b__0>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.Framework.PackageManager.RestoreCommand.d__77.MoveNext()\nRestore failed\nAccess to the path 'C:\\Users\\pradeek\\Documents\\Visual Studio 2015\\Projects\\TestConsoleApp\\src\\TestConsoleApp\\project.json' is denied.\n. @ChengTian , I think the broken references you are seeing in your repro are probably because you have the csproj targeting .Net 4.5.2 whereas xproj targeting 4.5.1? \n. @ChengTian , I think the broken references you are seeing in your repro are probably because you have the csproj targeting .Net 4.5.2 whereas xproj targeting 4.5.1? \n. Hi @Jonas82,\nI want to follow up to see if you are still seeing this issue after getting Visual Studio 2015 RTM, we believe we fixed that scenario there and want to see if you are still facing any issues, can you try with Visual Studio 2015 RTM and update us?\nThanks!\n. Hi @Jonas82,\nI want to follow up to see if you are still seeing this issue after getting Visual Studio 2015 RTM, we believe we fixed that scenario there and want to see if you are still facing any issues, can you try with Visual Studio 2015 RTM and update us?\nThanks!\n. Logged a tooling issue : https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems#_a=edit&id=144563&fullScreen=false\n. Logged a tooling issue : https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems#_a=edit&id=144563&fullScreen=false\n. ",
    "jskeet": "Could we at least make the error message more specific?\n\n'ProjectName' does not contain a Program class with a Main method suitable for an entry point\n\n(And is there any restriction on namespace here?)\n. No, because it requires the type to be called Program, with no indication of that within the error message.\nTo put it another way: I was banging my head against this error for a while before I found this bug entry, at which point it was really easy to fix. If the error message had specified that it was looking for a type called Program, I'd have fixed it immediately.\n(It looks like this requires it to either be in the global namespace or with a namespace the same as the assembly name, too - am I right? If so, again, that would be worth stating in the error message.)\n. Given the answer on Stack Overflow, it seems the problem isn't that the projects property isn't being handled properly - it's that global.json isn't being read at all, because I'm calling dnu restore from a parent directory.\nSo, this may be working as intended - but it's pretty confusing :) I had expected that running dnu restore would be recursive as if I'd run dnu restore Common and then dnu restore Application (ideally working out the ordering of that itself). But if dnu restore only looks up the tree for global.json files, that's clearly not going to help. Perhaps when it's recursing down the tree it should look for global.json files as well as project.json?\nNot sure what you want to do with this issue now...\n. Thanks - I'll give that a try. (The last 4 tests that are failing in Noda Time when targeting net451 are all due to this.) Does that dependency (and the compilation module) end up in the final nuget package, or is it just a build-time thing? (Obviously I'd prefer the latter :)\n. Woot - thanks David.\n. ",
    "jcansdale": "This confused me as well. Even when my 'Main' method is static, the containing class must have a public constructor and a new object is created (when not required).\n. ",
    "MiKom": "This is a clear departure from old style C# applications where class with Main() function could be named in any way and have private default constructor. IMHO, this information is both not properly conveyed to the user at runtume and not emphasized enough in the doc: http://docs.asp.net/en/latest/dnx/console.html\nPeople will be scratching their heads about it.\n. ",
    "rynowak": "would be nice if --runtime with no-args packed up the current in-use runtime\n. would be nice if --runtime with no-args packed up the current in-use runtime\n. :+1: :+1: :+1: :+1: :+1: for the locking issues that vs causes. Can't git clean with VS open\n. :+1: :+1: :+1: :+1: :+1: for the locking issues that vs causes. Can't git clean with VS open\n. @davidfowl  any comments here?\n. @davidfowl  any comments here?\n. this has gone horribly awry\n. this has gone horribly awry\n. branch updated\n. branch updated\n. @davidfowl this works now with MVC's tests. Yeah really it's working. \nThe issue I ran into was with a redirected console causing a deadlock. \n. @davidfowl this works now with MVC's tests. Yeah really it's working. \nThe issue I ran into was with a redirected console causing a deadlock. \n. @davidfowl any other feedback here? is this gtg?\n. @davidfowl any other feedback here? is this gtg?\n. Why are we keeping it around in memory after parsing/compiling/loading? That's the suspiciousness.\n. Why are we keeping it around in memory after parsing/compiling/loading? That's the suspiciousness.\n. /cc @davidfowl  @vijayrkn \nVijay is fixing this in VS. Should we make this change here? Thinking that a default of net45 doesn't make sense for DTH regardless of test issues.\n. @roji it's an extension method in System.Reflection make sure you have the using.\n. Regardless of whose bug this is exactly this qualifies as a top-pain point for working with the MVC solution. It effectively doubles the package restore time of our solution.\n. @davidfowl Ping\n. @davidfowl Ping\n. /cc @victorhurdugaci \n. TestHost\n. /cc @troydai @davidfowl @BillHiebert \n. :heart_eyes_cat: \n. Here's part two:\n\nLookup of library descriptions is using 636mb.. on these things:\n\n. It would be really handy if this was available for TestHost to use\n. This is still happening. There's too much stuff rooted - I get into this state working with either MVC solution for about an hour.\n\nDump is available on corpnet.\n. :shipit: \n. I think we've seen this issue before with the casing of System.Xml on mono. \nEither way, xunit.runner.aspnet is our bad internal fork of xUnit that we keep up to date with the bleeding edge of DNX.  You should use xunit.runner.dnx which is the officially supported xUnit release - the matching version should be 2.1-rc1.\nBe really careful using * in package references along with packages not using * - in your case you are likely using the newest build of the beta8 test runner with your beta7 dnx and beta7 other packages. This is explicitly not supported, and newer versions of dnx would tell you so :laughing: \n. Ooops hit send too soon.\n. :shipit: after fixing minor issues\n. Dumb question but what's GC.GetTotalMemory(forceFullCollection: true); returning for desktop vs DNX. It wouldn't be surprising to see DNX using significantly more memory because of roslyn and thus taking much longer to run a GC.\nHowever if the numbers are in the 4 second range to GC that app, that feels broken.\n. Should this be called Microsoft.Dnx.Testing.Extensions?\n. > sigh... we just did a rename, but okay we'll do that another time. In terms of this PR\n:trollface: - not a real suggestion\n. See https://github.com/aspnet/Mvc/pull/3366\nThis is a compatibility break in the code to access the service provider that we use in our tests.\n. IMO testhost should just have the same semantics and limitations as DNX as a whole.\n. /cc @pranavkm \n. yeah there should be a return here. I'll fix this and the other method.\n. fix't\n. That's another thing that would be sort of defined per-command yeah? What we could do here is just return the exit code to the caller and let them deal with it.\nIn terms of a test framework, I'm not terribly sure that it's meaningful since we already provide richer reporting. Let me know what you want me to do here.\n. braces for cases are like a truck for a duck\n. you guys need stylecop\n. VS did this on its own.\n. Needs more L\n. This seems like an odd dep for this package - what's it used for?\n. I expected this to just be empty. What happens without System.Runtime?\n. I expected this to just be empty. What happens without System.Runtime?\n. :crying_cat_face: \n. He's not talking about the assembly-in-sources-package issue.\nVS will show you build errors unless you tell it not to build the project in the solution config.\n. allocate\n. Shouldn't these two do the same thing?\n. This is used in MVC for a bunch of unrelated stuff. This fix isn't close enough to what it's claims to address.\n. ",
    "victorhurdugaci": "I was expecting it to set the project name (not sure where that one is used though).\nI see here (https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Net.Runtime/Project.cs)  that the key is supported:\nC#\nproject.Name = GetValue<string>(settings, \"name\");\n. @lodejard \nThings to test - \n\u2022passing zero --runtime options should assume net45\ndoes that mean that --runtime should work without any additional arguments?\n. Update on this issue: the machine didn't have .NET 4.5.1. However, even after installing .NET 4.5 first and the .NET 4.5.1, I am still hitting the same issue\n. After updating to PowerShell 4, the installer works. \n@glennc can you add this to the requirements? \n. Validated on build 0438. Everything works fine now\n. It works fine now :thumbsup: \n. The default path is still under compiler/resource. Do you want it to be /resources/ without compiler?\n. @Tratcher @davidfowl can you please give a little more context on this issue? \n. Here you go:\nSystem.TypeLoadException: Could not find Windows Runtime type 'Windows.Data.Json.IJsonValue'. ---> System.PlatformNotSup\nportedException: Operation is not supported on this platform.\n   --- End of inner exception stack trace ---\n   at Newtonsoft.Json.Converters.JsonValueConverter.CanConvert(Type objectType)\n   at Newtonsoft.Json.JsonSerializer.GetMatchingConverter(IList`1 converters, Type objectType)\n   at Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(JsonContract contract)\n   at Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(Type objectType)\n   at Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(Type objectType)\n   at Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(Type type)\n   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean\n checkAdditionalContent)\n   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)\n   at Newtonsoft.Json.Linq.JToken.ToObject(Type objectType, JsonSerializer jsonSerializer)\n   at Newtonsoft.Json.Linq.JToken.ToObject(Type objectType)\n   at Newtonsoft.Json.Linq.JToken.ToObject[T]()\n   at Microsoft.Framework.Runtime.Project.GetProject(String json, String projectName, String projectPath)\n   at Microsoft.Framework.Runtime.Project.TryGetProject(String path, Project& project)\n   at Microsoft.Framework.Runtime.ApplicationHostContext.get_Project()\n   at Microsoft.Framework.Runtime.DefaultHost.Initialize(DefaultHostOptions options, IServiceProvider hostServices)\n   at Microsoft.Framework.Runtime.DefaultHost..ctor(DefaultHostOptions options, IServiceProvider hostServices)\n   at Microsoft.Framework.ApplicationHost.Program.Main(String[] args)\nSystem.PlatformNotSupportedException: Operation is not supported on this platform.\n. kpm restore has the same problem\n. Done https://github.com/aspnet/XRE/pull/1154\n. Use kpm commands\nSent from my phone\n\nFrom: Tugberk Ugurlumailto:notifications@github.com\nSent: \u00fd2/\u00fd20/\u00fd2015 7:32 AM\nTo: aspnet/XREmailto:XRE@noreply.github.com\nCc: Victor Hurdugacimailto:victor.hurdugaci@microsoft.com\nSubject: Re: [XRE] Investigate global packages ala npm install -g (#540)\nIs this in? I was expecting to see -g switch for install command but I cannot [:disappointed:]\nZ:>kpm help install\nUsage: kpm install [arguments] [options]\nArguments:\n[name] Name of the dependency to add\n[version] Version of the dependency to add, default is the latest version.\n[project] Path to project, default is current directory\nOptions:\n-s|--source A list of packages sources to use for this command\n-f|--fallbacksource A list of packages sources to use as a fallback\n-p|--proxy The HTTP proxy to use when retrieving packages\n--no-cache Do not use local cache\n--packages Path to restore packages\n--ignore-failed-sources Ignore failed remote sources if there are local pa\nckages meeting version requirements\n--quiet Do not show output such as HTTP request/cache info\nrmation\n-?|-h|--help Show help information\nZ:>\nI am on kpm version 1.0.0-beta4-11117.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/XRE/issues/540#issuecomment-75256835.\n. Sorry, there are no samples yet.\nWhat package are you trying to install and what are you expecting to happen?\nSent from my phone\n\nFrom: Tugberk Ugurlumailto:notifications@github.com\nSent: \u00fd2/\u00fd20/\u00fd2015 8:09 AM\nTo: aspnet/XREmailto:XRE@noreply.github.com\nCc: Victor Hurdugacimailto:victor.hurdugaci@microsoft.com\nSubject: Re: [XRE] Investigate global packages ala npm install -g (#540)\nIs there a sample for this feature somewhere or doc? I made kpm commands install  work but I am assuming it doesn't behave as I expected [:disappointed:]\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/XRE/issues/540#issuecomment-75263472.\n. If you try to install xunit.runner.kre you'll get the following error\nThe specified package is not an application. The package was added but no commands were installed.\nHere is how the commands work. In project.json you can specify commands. When you pack such an application, we are generating scripts for those commands. If you run kpm commands install on a package with commands, it will add the commands on the path.\nxunit.runner.kre cannot be globally installed because it doesn't expose any commands.\n. I create a bug against xunit to provide the commands required for global install https://github.com/xunit/aspnet.xunit/issues/14\n. I was able to repro your issue. I'm taking a look\n. Is it possible to also expose the Flavor (CLR, CoreCLR, Mono, etc)?\n. Can it show the version for everything that has a version?\n. @glennc can we do this for rc1, please? Deployment for automation is complicated without it...\n. Cool! You tamed the beast! :shipit:\n. Cool! You tamed the beast! :shipit:\n. Duplicate of https://github.com/aspnet/KRuntime/issues/778\n. Duplicate of https://github.com/aspnet/KRuntime/issues/778\n. This bug can be simply reproduced by running this code on CoreCLR on Win7:\nC#\nusing (var memory = new MemoryStream())\n{\n    GZipStream compression;\n    compression = new GZipStream(memory, CompressionLevel.Optimal);\n}\n. This bug can be simply reproduced by running this code on CoreCLR on Win7:\nC#\nusing (var memory = new MemoryStream())\n{\n    GZipStream compression;\n    compression = new GZipStream(memory, CompressionLevel.Optimal);\n}\n. A little more info.\nThere is an exception\nerror CS1748: Cannot find the interop type that matches the embedded interop type 'Microsoft.Web.Hosting.IProcessHostSupportFunctions'. Are you missing an assembly reference?\nFrom:\n```\n\nAspNet.Loader.dll!AspNet.Loader.Bootstrapper.LoadApplicationK10(string appId, string appConfigPath, Microsoft.Web.Hosting.IProcessHostSupportFunctions supportFunctions, Microsoft.Web.Hosting.LoadApplicationData pLoadAppData, int loadAppDataSize, string krePackagePath, string appBasePath) Line 257  C#\n    AspNet.Loader.dll!AspNet.Loader.Bootstrapper.LoadApplication(string appId, string appConfigPath, Microsoft.Web.Hosting.IProcessHostSupportFunctions supportFunctions, Microsoft.Web.Hosting.LoadApplicationData pLoadAppData, int loadAppDataSize) Line 64 C#\n```\n. A little more info.\n\nThere is an exception\nerror CS1748: Cannot find the interop type that matches the embedded interop type 'Microsoft.Web.Hosting.IProcessHostSupportFunctions'. Are you missing an assembly reference?\nFrom:\n```\n\nAspNet.Loader.dll!AspNet.Loader.Bootstrapper.LoadApplicationK10(string appId, string appConfigPath, Microsoft.Web.Hosting.IProcessHostSupportFunctions supportFunctions, Microsoft.Web.Hosting.LoadApplicationData pLoadAppData, int loadAppDataSize, string krePackagePath, string appBasePath) Line 257  C#\n    AspNet.Loader.dll!AspNet.Loader.Bootstrapper.LoadApplication(string appId, string appConfigPath, Microsoft.Web.Hosting.IProcessHostSupportFunctions supportFunctions, Microsoft.Web.Hosting.LoadApplicationData pLoadAppData, int loadAppDataSize) Line 64 C#\n``\n. I am seeing a different exception on IIS and IIS express today. With the latest bits, patched with newtonsoft json, I see the error here https://github.com/aspnet/KRuntime/issues/791\n. I am seeing a different exception on IIS and IIS express today. With the latest bits, patched with newtonsoft json, I see the error here https://github.com/aspnet/KRuntime/issues/791\n. Fixed in1.0.0-beta1-10655. Fixed in1.0.0-beta1-10655`\n. Yup, yup. Checking that\n. Yup, yup. Checking that\n. This should not impact the build scripts since they don't use the kprojs. We might want to change the folder where the scripts builds to be consistent with the VS build but that's a different change.\n. This should not impact the build scripts since they don't use the kprojs. We might want to change the folder where the scripts builds to be consistent with the VS build but that's a different change.\n. I'm going to merge this since build output changes are in. cc @troydai \n. I'm going to merge this since build output changes are in. cc @troydai \n. Yeah but this doesn't affect the build on the CI server\n. Yeah but this doesn't affect the build on the CI server\n. If they are in the same folder locally, install them from there. If not, go online and try do get them from there. \n. If they are in the same folder locally, install them from there. If not, go online and try do get them from there. \n. This was long fixed\n. This was long fixed\n. Looks good\n. Looks good\n. Yup, needs architecture too to be exposed. I need that for the dev incremental build and also the postbuild copy needs that\n. Yup, needs architecture too to be exposed. I need that for the dev incremental build and also the postbuild copy needs that\n. Assigning to Pawel because he needs this to unblock his other change\n. Assigning to Pawel because he needs this to unblock his other change\n. This is fixed, not sure why GitHub didn't resolve it.\n. This is fixed, not sure why GitHub didn't resolve it.\n. hey @suhasj, can KRuntime be built on Mono?\n. hey @suhasj, can KRuntime be built on Mono?\n. Nope, without\n. Nope, without\n. Cool! I am setting up a machine now and couldn't try it.\n\nAnyways, what do you think of my change?\n. Cool! I am setting up a machine now and couldn't try it.\nAnyways, what do you think of my change?\n. The command works on Linux too - pushed a new commit.\nThere is a fix in kvm to display correctly the symlink https://github.com/aspnet/kvm/pull/110\n. The command works on Linux too - pushed a new commit.\nThere is a fix in kvm to display correctly the symlink https://github.com/aspnet/kvm/pull/110\n. The symlink & alias are set, you just don't see them because of https://github.com/aspnet/kvm/pull/110\n. The symlink & alias are set, you just don't see them because of https://github.com/aspnet/kvm/pull/110\n. Oh, forgot to mention, I already asked @ajaybhargavb. He managed to set the dev symlink \n. Oh, forgot to mention, I already asked @ajaybhargavb. He managed to set the dev symlink \n. Do you have the latest kvm script? I've seen this on other machines. If you don't have the latest kvm.ps1 script, setting the alias will not work because it doesn't support package names\n. Do you have the latest kvm script? I've seen this on other machines. If you don't have the latest kvm.ps1 script, setting the alias will not work because it doesn't support package names\n. @troydai can you please check this. I'm OFF now...\n. @troydai can you please check this. I'm OFF now...\n. :shipit:\n. :shipit:\n. @muratg @davidfowl give more details about the issue. What is not working as good as expected?\n. @muratg @davidfowl give more details about the issue. What is not working as good as expected?\n. Just make it better :trollface: \n. Just make it better :trollface: \n. Done\n. Done\n. Added breadcrumbs for the KRE itself\n. Added breadcrumbs for the KRE itself\n. @Eilon updated with logging. It uses Trace because that's what kruntime does instead of ILogger\n. @Eilon updated with logging. It uses Trace because that's what kruntime does instead of ILogger\n. @Eilon when you set KRE_TRACE=1 you see the traces in the console because we are adding a console listener to Trace\n. The customer will see the message if they enable the trace. There is no information from KRuntime written in the console otherwise.\n@blowdart if that's the case, I think more information should be surfaced that just what I did in this PR. For example, even when the servicing index is malformed, you cannot service.\n. Nope. There is no logging (as in ILogger) in KRuntime\n. I don't think elevation is required to create the directory and set its permissions in %ProgramData% but it is not KRuntime's responsibility to create that directory and set the permissions.\n. How about we split this in two: the breadcrumbs as they are now and the Logger? I'll open a bug for the later one and we'll address it after. Also, part of that will be to report in a more visible place the fact that servicing doesn't work.\n. After I check this in. Basically have two different work items since they are unrelated\n. The \"after after\" is here: https://github.com/aspnet/XRE/issues/1118\n. Anymore comments for this PR? If someone signs off, then I will redo the PR against the Release branch...\n. Closing this one for now. Will send a new one for the release branch\n. @davidfowl I'm assigning this to you since you mentioned that you are going to talk to the NuGet team\n. @ChengTian please resolve this when you merge the serviceable changes\n. A few questions:\n1. Should the current process react to any change in the servicing index or only if there is an entry that affects what it has loaded?\n2. How should the process react when the servicing index notification comes? Does it just kill itself?\n. @lodejard @GrabYourPitchforks ?\n. @blowdart, Levi suggested to run this by you. He thinks that we might not need this for v1 because we do not have a safe way of stopping a running app that we know nothing about. What do you think?\n. Yes, still repros\n. Marked as bug :beetle: \n. @glennc @davidfowl  can we talk about this in the next design meeting?\n. Yup, it was fixed\n. @davidfowl @lodejard do you still want to do this?\n. @borgdylan yes but for now (as in the code checked in so far) is only cmd.\n. I said that uninstall with go in a later iteration but I have a working prototype of it and I checked in\nFixes https://github.com/aspnet/XRE/issues/1140\n. Closing for now because I have more changes to add \n. Fixed https://github.com/aspnet/XRE/pull/1154\n. Ping?\n. Updated with PR feedback but we have one problem.\n@davidfowl we disallow some names like kpm and nuget but the package manager project exports kpm :) What should we do?\n. Problem fixed. Removed kpm from the exported commands list and also added a check at install time to prevent someone from installing a command that's not allowed\n. @lodejard updated with changes to address your feedback\n. @lodejard updated command names:\nkpm commands install ...\nkpm commands uninstall ...\n. See this PR https://github.com/aspnet/XRE/pull/1154, I am purging all dependencies not used by some specific application. Something similar for simplify?\n. @davidfowl - added mono support. \nBtw, who's debugging on mono? :trollface: \n. @davidfowl updated to display the process id\n. This seems to be fixed after the CI changes.\n. Yeah, there was a bug and it was just restoring... Fixed it with #1224\n. @troydai Rebased\n. @troy is :+1: a soft :shipit: ?\n. Whoops, sorry :) Adding the correct Troy @troydai \n. @troydai pushed a change that includes your suggestion for reverse looking in the match list and 2 more tests\n. @troydai extracted the method in a helper and cached the results\n. Looks right to me (assuming it must match the commit id in the link). :shipit: \n. It is not elegant for sure but we had two options\n1. Add a special section in project.json for exported commands\n2. Use this black list\n. @davidfowl and I already talked about this. It seems that the lock file broke the global install :disappointed: \n. The bug: kpm commands install installs in  %userprofile%\\bin rather than  %userprofile%\\.k\\bin.\nThis change: fixes that and installs in the right folder\n. - If you run it complains that it cannot find the references.\n- In VS it cannot resolve the types from those packages (however VS shows that the package was resolved from sources)\n. Did you open a tooling bug?\n. Thanks!\nSent from my phone\n\nFrom: David Fowlermailto:notifications@github.com\nSent: \u00fd3/\u00fd1/\u00fd2015 9:03 PM\nTo: aspnet/XREmailto:XRE@noreply.github.com\nCc: Victor Hurdugacimailto:victor.hurdugaci@microsoft.com\nSubject: Re: [XRE] Nested folders make everything break (#1277)\nYes I did\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/XRE/issues/1277#issuecomment-76659028.\n. Looks okay to me, assuming it works now :shipit:\n. :shipit: from me too\n. We should fix this as soon as possible. The cross plat CI machines are affected by this all the time. The runs are very unstable. \n. There were changes between the moment I pushed and now. Logging had some api renames. I'll rebase tomorrow morning and update with the changes in logging\nSent from my phone\n\nFrom: Tugberk Ugurlumailto:notifications@github.com\nSent: \u00fd3/\u00fd11/\u00fd2015 6:30 PM\nTo: aspnet/DNXmailto:DNX@noreply.github.com\nCc: Victor Hurdugacimailto:victor.hurdugaci@microsoft.com\nSubject: Re: [DNX] Fix install global (#1370)\nI was not able to build the FixGlobalInstall branch. Getting this (obviously this is screenshot is not gonna be helpful):\n[image]https://cloud.githubusercontent.com/assets/328122/6610443/3507654e-c857-11e4-912d-78dcb22c4faf.png\nAre you guys interested in getting the entire build log?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/DNX/pull/1370#issuecomment-78408156.\n. @tugberkugurlu I rebased and updated to the latest code changes. Want to try now?\n. If you run the tests, there will be 4 Bundle tests that fail. It is a known issue and it is not related.\n. did you run git submodule init and git submodule update ?\n. Did the build succeed?\n. @tugberkugurlu I'm there (AspNetvNext)\n. Update project.json with the new moniker for aspnet50\n. I was able to run it on Ubuntu :shipit:\n. @anurse said he will address this as part of the work he's doing to dnx\n. Looks good :shipit:\n. It is a dupe and that's a bug in dnvm.\n. Forgot to mention, we save ~100ms at startup with the background thread\n. @davidfowl updated the PR. What do you think?\n. @davidfowl No service folder = noop. Mono = tested already (no folder there)\n. Any more comments/concerns on this?\n. You will need to edit the breadcrumbs checker to look for the IsServiceable property \n. Btw, can you add 2 tests (one with an assembly that has the attribute and one with an assembly without the attribute)?\n. Did you test the reader on coreclr? If that works, then :shipit: from me\n. PS: tested on mono and it works\n. Updated to address the comments from @anurse and @davidfowl \n. @davidfowl updated\n. Let me rebase it first\n. @davidfowl you can try now\n. Actually, I don't think it will break in too many places. All I have to do is change the resource generator in Universe.\nBut hold on because I found a bug.\n. It works with the existing code because we generate the same names. In the second iteration I changed the name of the resx files to always have the .resources extension. Otherwise, the resource manager cannot read them.\n. Yes, I will get this PR merged soon and then start another one for the project.json changes.\n. Because of bootstrapping issues, I hacked the code to generate both old and new resource names. Therefore, this change should not break anything.\nI am going to merge it\n. It happens both on mono and windows and it caused by this fix.\nParticular, this line because VersionGetter is null.\n@BrennanConroy can you please take a look?\n. \n. I agree, we should have more tests for scenarios that are not hit everyday\n. @BrennanConroy is this related to the change that you made yesterday?\n. Here is a proposal that's not for the two PRs that I sent because they go in the release branch. It is for the dev branch.\nI don't think that the Roslyn compiler should have this logic embedded in it.The file version and the commit hash should be compiler preprocess steps added by the app. But, instead of adding the preprocess step to each project, we could either add it to global.json (does that work today?) or have an environment variable that specifies extra folders to look for compiler process files. So, KoreBuild would included these preprocess steps and apps consume them.\nWhat do you think?\n. Package uploaded\n. @pranavkm updated the PR. please take a look\n. Updated\n. Updated the PR with one change: the prefix for the version is picked up from the project.json file.\n. Synced offline with @davidfowl . Closing for now\n. @moozzyk\n. I can fix it too, I have time for this :)\n. @Darkonekt , what DNX version do you use?\n. Unfortunately, the fix is only in beta5. The only solution is to update to the latest bits. Sorry for the inconvenience.\n. Nope, that didn't bring the latest dev bits. It should be beta5-number.\nDid you run dnvm upgrade -u ?\nFrom here:\n\nDNVM has the concept of a stable and unstable feed. Stable defaults to NuGet.org while unstable defaults to our dev MyGet feed. So if you add  -u  or  -unstable  to any of the install or upgrade commands you will get our latest CI build of the DNX instead of the one last released on NuGet.\n. Ok, no worries. We can fix that :)\n\nEdit the PATH environment variable and remove C:\\Program Files\\Microsoft DNX\\Dnvm from it. Then, follow the instructions in the Home repo to install Dnvm. You have to run the command below from a command prompt:\n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"&{$Branch='dev';iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.ps1'))}\"\nOnce you are done with that, you should get a new Dnvm in %userprofile%\\.dnx\\bin which supports the -u argument\n. Updated\n. Updated\n. Is it just on Enterprise or does it happen on other versions?\n. Yeah, seems to work there. I just kicked off a new build now.\n. Do you have the latest updates and services packs?\n. We should add this info in the release notes\n. From the call stack, I believe it might be a resource in the Nuget submodules that wasnot updated\nSent from my phone\n\nFrom: BrennanConroymailto:notifications@github.com\nSent: \u200e4/\u200e11/\u200e2015 11:16 AM\nTo: aspnet/dnxmailto:dnx@noreply.github.com\nCc: Victor Hurdugacimailto:victor.hurdugaci@microsoft.com\nSubject: Re: [dnx] Random issue with resource location on Ubuntu + mono (3.12.1) when running dnu restore (#1634)\nI'm getting a similar error on my Win8.1 laptop. But I get it consistently when I use dnu commands uninstall ...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/dnx/issues/1634#issuecomment-91894737.\n. Global install uses only the global NuGet.config file. Otherwise, could get different results based on where you run it from.\n. cc @troydai @BrennanConroy \n. Looks good :shipit:\n. cc @troydai @BrennanConroy \n. cc @troydai @ChengTian \n. Sent a PR with a fix\n. Because I was catching the wrong exception. On Win7 the api set DLL is there but it is missing that API. So it was throwing an entry point not found instead of DLL not found\n. @GuardRex yes, it can take a while. Now it is done\n@davidfowl sure, let me update the code\n. @GuardRex no, AppVeyor does not produce any bits. You will have to wait for this PR to be merged and then run \"dnvm upgrade\". Or, you can get my code and build dnx locally\n. I'll merge this tomorrow after I update the PR. \nMeanwhile, try an even older build like 11540 or even 11530 because we produce more than one build per day. I can't check right now which is last build before my previous change.\n. :shipit: \n. Will this break other repo? I think MVC uses ICompileModule for view precompilation\n. Done. Thanks for the contribution, @hishamco! \n. No more repro\n. Looks good overall, except the places where I commented. :shipit:\n. looks good. :shipit:\n. Looks good. :shipit: \n. :shipit:\n. Not sure if \"flavor\" is the right terminology. It is basically the type of OS in the same family. For example, the \"Home\" or \"Professional\" part in Windows 7 Home/Windows 7 Professional. It is not something that you can extract from the OS name or version.\nOn Windows you figure it out with GetProductInfo and on Linux/Darwin using uname.\nStay tuned for a PR\n. We're not going to do this. Too many SKUs to make a generic solution. We'll implement code to do the SKU check only where we need it.\n. Can you dig a little deeper in the call stack? Is it the call to uname that's slow?\n. That code is not threadsafe because it is not supposed to run on multiple threads. First we build the collection of breadcrumbs to write and only then we write them. Otherwise, we might not write all of them.\nI'll investigate on Mon what's wrong and why the writer is running before all adds are done.\nSent from my phone\n\nFrom: Eilon Liptonmailto:notifications@github.com\nSent: \u200e5/\u200e2/\u200e2015 11:50 PM\nTo: aspnet/dnxmailto:dnx@noreply.github.com\nCc: Victor Hurdugacimailto:victor.hurdugaci@microsoft.com\nSubject: [dnx] Writing breadcrumbs appears to have threading bug (#1771)\nI'm seeing a lot of errors for several different repos on the internal CI machine with call stacks in the breadcrumb code:\n[12:15:50] :         [xunit-test] System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\n[12:15:50] :         [xunit-test]    at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\n[12:15:50] :         [xunit-test]    at System.Collections.Generic.List1.Enumerator.MoveNextRare()\n[12:15:50] :         [xunit-test]    at System.Collections.Generic.List1.Enumerator.MoveNext()\n[12:15:50] :         [xunit-test]    at Microsoft.Framework.Runtime.Servicing.Breadcrumbs.WriteAllBreadcrumbsInternal()\n[12:15:50] :         [xunit-test]    at Microsoft.Framework.Runtime.Servicing.Breadcrumbs.b__13_0(Object _)\n[12:15:50] :         [xunit-test]    at System.Threading.QueueUserWorkItemCallback.WaitCallback_Context(Object state)\n[12:15:50] :         [xunit-test]    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n[12:15:50] :         [xunit-test]    at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n[12:15:50] :         [xunit-test]    at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\n[12:15:50] :         [xunit-test]    at System.Threading.ThreadPoolWorkQueue.Dispatch()\n[12:15:50] :         [xunit-test]    at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\nLooking at the code that manages the breadcrumbs and the data types (e.g. https://github.com/aspnet/dnx/blob/e937e25ab3453ea86bda13c1297c41011dfda9de/src/Microsoft.Framework.Runtime/Servicing/Breadcrumbs.cs#L21), it appears that the code needs be thread safe, but isn't.\n@victorhurdugacihttps://github.com/victorhurdugaci can you take a look?\n(Of course, I'm happy to be wrong about this, but it looks suspicious. I have no particular explanation as to why this would start failing just now.)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/dnx/issues/1771.\n. @davidfowl the two questions above are for you. @Eilon and I discussed offline \n. @davidfowl we can make than just a dozen donuts if you answer the Eilon's two questions :smile: \n. We can do that. It would be the same ignoring any breadcrumb add once writing has started. That leads to @Eilon 's second question: is it possible to load NuGet packages dynamically while the app is running?\n. > \u2022Make it so that a bool can be passed in that will disable ball bread crumbing \nAre you okay with simply ignoring adds after writing has started?\n. Updated. No more adds after write\n. So this json deserializer doesn't support comments? That's a breaking change\n. Then we need to update some project.json files like this one: https://github.com/aspnet/MusicStore/blob/dev/src/MusicStore/project.json\n. :ship: it\n. b355baa420946ee1273a0714a6e0dcc5e31fad7d\n   ^\n   +----- this is 7 instead of 5\n:trollface: \nI assume the change is okay, no easy way to validate by just looking at the code :shipit:\n. Is bash is available everywhere, then :shipit: \n. Have you tried dnx . ef migration help add ?\n. cc @ChengTian \n. Nope. For the empty web application I get:\n``\nSystem.InvalidOperationException: Unable to load application or execute command 'Microsoft.AspNet.Hosting'. Available co\nmmands: web. ---> System.IO.DirectoryNotFoundException: The system cannot find the path specified. (Exception from HRESU\nLT: 0x80070003)\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromPath(IntPtr ptrNativeAssemblyLoadContext, String ilPath, String\nniPath, ObjectHandleOnStack retAssembly)\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\n   at Microsoft.Framework.Runtime.Loader.NuGetAssemblyLoader.Load(String name, IAssemblyLoadContext loadContext)\n   at dnx.host.LoaderContainer.Load(String name)\n   at Microsoft.Framework.Runtime.Loader.AssemblyLoaderCache.GetOrAdd(String name, Func2 factory)\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName(AssemblyName assemblyName)\n   at System.Runtime.Loader.AssemblyLoadContext.Resolve(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName)\n--- End of inner exception stack trace ---\n   at Microsoft.Framework.ApplicationHost.Program.ThrowEntryPointNotfoundException(DefaultHost host, String applicationN\name, Exception innerException)\n   at Microsoft.Framework.ApplicationHost.Program.ExecuteMain(DefaultHost host, String applicationName, String[] args)\n   at Microsoft.Framework.ApplicationHost.Program.Main(String[] args)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider s\nerviceProvider)\n   at dnx.host.Bootstrapper.RunAsync(List1 args)\n   at dnx.host.RuntimeBootstrapper.ExecuteAsync(String[] args)\n   at dnx.host.RuntimeBootstrapper.Execute(String[] args)\nSystem.IO.DirectoryNotFoundException: The system cannot find the path specified. (Exception from HRESULT: 0x80070003)\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromPath(IntPtr ptrNativeAssemblyLoadContext, String ilPath, String\nniPath, ObjectHandleOnStack retAssembly)\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\n   at Microsoft.Framework.Runtime.Loader.NuGetAssemblyLoader.Load(String name, IAssemblyLoadContext loadContext)\n   at dnx.host.LoaderContainer.Load(String name)\n   at Microsoft.Framework.Runtime.Loader.AssemblyLoaderCache.GetOrAdd(String name, Func2 factory)\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName(AssemblyName assemblyName)\n   at System.Runtime.Loader.AssemblyLoadContext.Resolve(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName)\n```\n. @davidfowl is you fixed supposed to fix the publish bug? I'm still seeing the failure: https://xplat-ci.asp.net/viewLog.html?buildId=511&buildTypeId=XPlat_Windows_WinNanoServer_MusicStore&tab=buildLog\n. cc @ChengTian \n. > Make Microsoft.Framework.Project a separate global tool.\n@davidfowl , @ChengTian says that dnvm is using this tool (k-crossgen.cmd) and it probably it is not the right thing to install it globally. What do you think?\n. @davidfowl \n\nmerge:\n\u2022dnx.coreclr.managed\n\u2022dnx.clr.managed\n\nShould we also merge dnx.mono.managed ?\n. We talked about this offline and we're going to do it in beta6. \n. Just FYI, there is not such thing as Microsoft.Framework.Runtime.Compilation. There is only Microsoft.Framework.Runtime.Caching which contains Microsoft.Framework.Runtime.Compilation.xproj\n. Oh no, the unicorn null refs :smile: \n. @davidfowl , @troydai what do you think?\n. Nope, only the breadcrumbs are under Program Data\n. Looks good\n. :shipit: \n. What happened to the extension method? I have some code that was waiting for it :cry:\n. You have to rebase and do some merging because Program.cs was split in many files\n. :shipit:\n. cc @moozzyk @joeloff \n. Updated\n. @moozzyk boat Italy? :p\n. Ha!\n. Brain dump of the ideas so far:\nproject.json gets a new top level property (example below if for git):\n\"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github/blah...\"\n}\nThe only required property is \"type\". Then the source control provider handles the rest.\nFor \"git\" we embed, in the nuspec:\n1. \"git\" as the repo type\n2. The repo URL\n3. The commit hash\n4. The path to the project relative to the repo root (e.g. src)\nOther thoughts:\n- dnu source <packageName> will get the sources for <packageName>. The version is resolved from the lock file and this command can only run in the context of a project\n- By default dnu source will clone sources in ./.dnx/source/SOMETHING. That something is probably something that has to do with the repo and commit id. It cannot be a package name because you can produce multiple packages from the same repo and we don't want to clone multiple times for the same commit id. Maybe you can specify a different path\n- dnu pack will embed all the info in the nuspec\n- If there are multiple packages in the same folder, like we do in our case with the src, then all of them will be sourced when one is sourced.\n- This command will update global.json with the source info so, even though you run it a project level, the changes affect the entire solution.\n- There should be a switch to stop using sources like --no-source or something.\n- For git, I think we should clone with depth 1 so we don't fill the harddrive with history\nStill to decide:\n- Can you point to existing an source clone? If yes, what happens if there are already changes there? Do we just use it as is or switch to that commit hash? Currently, I think the best is to just the source as is, meaning that if you pass a repo manually, we assume you know what you are doing.\n- How do we store the repos on harddrive to easily find them if they were already cloned? What if they have changes we revert them or simply not care?\n- Extensibility? What if I want TFS or... SourceSafe?\n- Do we assume that git or the source control CLI must be on the path? Can you pass the path as argument instead?\ncc @davidfowl @lodejard @DamianEdwards \n. other than the comment about the error message :shipit: (you might have to rebase)\n. It works. no more errors :shipit:\n. Also, we shouldn't use exceptions to surface error messages. Use the build reports and write a human friendly, actionable message. If someone really wants call stacks, we could show them on verbose\n. Oh, whoops, I merged before seeing your second comment. I think what we do now is sufficient because the help already includes available commands\n. Looks good to me and I only had the two comments above\n. :shipit: \n. It would be nice to display how many packages were installed and how many were skipped because they were already there. Also, cached ones would be interesting.\nBut, overall, looks good\n. Oh! Oh! Can we show from which feed each downloaded package came from?\nSent from my phone\n\nFrom: David Fowlermailto:notifications@github.com\nSent: \u200e5/\u200e29/\u200e2015 9:11 AM\nTo: aspnet/dnxmailto:dnx@noreply.github.com\nCc: Victor Hurdugacimailto:victor.hurdugaci@microsoft.com\nSubject: Re: [dnx] Add some summary to dnu restore (#1964)\nI also want to see effective feeds.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/dnx/pull/1964#issuecomment-106860154.\n. Please review: @davidfowl @glennc\n. Updated\n. We've decided to keep the name as \"source\". Unless there are any more comments, I will merge this soon\n. Renamed to sources. And now the usage is dnu sources get <package>. @anurse @davidfowl \n. @pranavkm yup, that's on my list. during the lite build I'll generate all the packages (src + test) and then in the second pass run tests using the packages. There might be a few repos that don't support this, tho (MusicStore) is one of them\n. looks good\n. :shipit: \n. This will not be needed anymore once we have dnx-watch\n. Oh no! Please don't add sources. Change the name to something else. I already have a PR for dnu source which is for bringing source code :)\n. Bug confirmed. We have a repro: https://xplat-ci.asp.net/viewLog.html?buildId=1340&buildTypeId=XPlat_Windows_WinNanoServer_MusicStore&tab=buildLog\n. Yeah, make overwrite reinstall the package. Thought your build script should increment the build number (the t-<number> pattern) so it always generate a newer package.\n. The point of using whereis in this particular scenario is not to see where a particular executable is but to see if it exists at all before invoking it. The output of the command doesn't matter, only the return code.\n. The change seems to be okay but I have one scenario that I would like you to test. I'm wondering if upgrade + overwrite works. Basically have package_v1 and packave_v1.1 and upgrade from package_v1 to v1.1 with overwrite.\nI don't expect it to break but please check it. \nIf it works, then :shipit: \n. Except for my comment above, the change looks good\n. - Check for the version of Abstractions\n- If the app tries to load a newer one, stop it\n. Note: this will be interesting to see in the wild because our dev bits have a higher version than release ones (1.0.0-beta7-123 > 1.0.0-beta7)\n. There is nothing that dnu sources can do to add git to the path. That's something that the setup, or someone else, should do.\n. No, I don't think dnvm should be responsible for installing the git client. That would be pretty bad actually because today we support only git but in the future we might support other source control providers. The user should install that. \nWhen you dnu pack, if you don't have git you get a warning. I just forgot to add a similar check for dnu sources\n. it's a known limitation. Resources outside of the project folder are named using the file name. If two files have the same name, you'll get a naming conflict.\nUse named resources to solve the conflict \nhttps://github.com/aspnet/EntityFramework/blob/dev/src/EntityFramework.Commands/project.json#L12\n. @yangyang80 here's an updated link. The other one didn't work because the EF packages got renamed: https://github.com/aspnet/EntityFramework/blob/dev/src/EntityFramework7.Commands/project.json#L13-L14\n. We can probably add an environment variable to specify where global commands are installed\n. However... that is a little flaky because the folder specified in that env var must be on the path\n. Other than my comment, it looks shippable :shipit: \n. @troydai \n. E2E validated. I was able to deliver an update in a test environment. \n. Please hold this change until the dnx renames are done\n. PR updated:\ndnx.mono.managed -> Microsoft.Dnx.DomainManager.Mono for consistency.\n. Updated table:\n\n. Looking at the names in the table I'm thinking that maybe all Microsoft.Dnx.DomainManager.* should be Microsoft.Dnx.Host.* ...\n. Updated. Will have to rebase again because someone (looking at you @ChengTian ) merged a PR that conflicts with this one.\n. Okay. Rebased and ready for merge. Will update the CI drops to have the new dnx and then I'll merge everything. Expect breaks\n. We already had a zpatch-0003 on the feed. It's been uploaded earlier so I had to upload a higher version... Sorry about that. I can delete both of them, upload the version that you told me. Then we can tell people to delete the previous version, if they have it\n. @bradwilson Changed to 2.1.0-beta5-aspnet-2 and removed the other packages.\n. @egorpavlikhin \n1. Did you apply this workaround described by any chance?\n2. What VS version do you have?\n3. What tooling version do you have? (that's in the VS about page: ASP.NET and Web Tools)\n. @mdekrey you are not using the latest tooling version. Your version is 14.0.20711.0 while the latest is 14.0.20723.0.\n20711 had a bug because it was trying to load Microsoft.DNX.PackageManager which is actually Microsoft.Dnx.Tooling.\nGet the latest version: http://www.microsoft.com/en-us/download/details.aspx?id=48222\n. We'll add the required tooling version in future release notes. Hopefully, that will help avoid confusions.\n. Is your project referencing the package with a lower case s or one of our packages?\n. We should normalize the reference package names to match the original package name. cc @troydai @ChengTian \n. I'll look for it\n. thanks! will send a pr for it\n. Nope. I only fixed the casing of the package but the root problem is still there\n. Looks good :shipit: \n. :shipit:\n. @BrennanConroy \n. @ajaybhargavb isn't this PR fixing this issue? https://github.com/aspnet/dnx/pull/2399\n. I cannot reproduce this anymore\n. Does global install still work if you don't specify the packages argument?\n. Then :shipit: \n. :+1: yes, we'll add this soon. It's been requested by multiple people\n. That's correct. We had to remove it because it was not working well with source/build time references. We hope to bring it back in a future release\n. 1>  C:\\Users\\carlos.freire\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta7-12302\\bin\\dnx.exe --appbase \"C:\\Canales\\Cross2Business\\PlataformaWeb\\C2B\\src\\Cross2Business.Datos.Interfaz\" \"C:\\Users\\carlos.freire\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta7-12302\\bin\\lib\\Microsoft.DNX.PackageManager\\Microsoft.DNX.PackageManager.dll\" pack \"C:\\Canales\\Cross2Business\\PlataformaWeb\\C2B\\src\\Cross2Business.Datos.Interfaz\" --configuration Debug --out \"..\\..\\artifacts\\bin\\Cross2Business.Datos.Interfaz\"\nIs this a command that you are running or is it called by some script?\nMicrosoft.Framework.PackageManager was renamed to Microsoft.Dnx.Tooling as described in this announcement. I don't think we ever had a file name Microsoft.DNX.PackageManager (that looks like a combination of the old and new name)\n. You are not using the latest VS tooling. See this thread: https://github.com/aspnet/dnx/issues/2371\n. :shipit: after rebase\n. - Moniker: NUAAAA (A = digit)\n- Start at 1000. \n- Consecutive but not categorized (could allocate blocks if needed)\n- NU1000 - Unexpected error (unhandled)\n- Use DNX is the error is DNX specific\n. +1 for this. We need it for feature defines (like disabling the min version check on dev)\n. Related: https://github.com/aspnet/Home/issues/450#issuecomment-145644823\n. Assuming you use the latest beta7: https://github.com/aspnet/Announcements/issues/52\n. Please check that projects with ids work with dnu sources\n. Helios change coming soon\n. Updated\n. Looks good to me :shipit: \n. CLR-x86-1.0.0-beta7-12364\n. Should myget return a 404?\n. Or at least an XML with no results\n. Shouldn't dnx just give a warning instead of throwing?\nThe 200 response seems to be a myget bug: https://twitter.com/xavierdecoster/status/633137056009555968\n. Package upload is in progress. Try in like 10 min or so\n. The change looks pretty straight forward. I don't expect it to break anything even on the CI since none of our repos set the packages folder in global.json (or at least I hope no one does it),\n:shipit: \n. Yes, I ran the tests\n. Updated\n. Does this work everywhere including OneCore (Nano)?\n. Other than the minor comments, looks good :shipit:\n. Oh, one more thing: how about a test for the non Windows platforms where pdb generation is not supported to check that we emit pdbs now?\n. I need to fix this one in beta8 as part of https://github.com/aspnet/dnx/issues/2428 because it is blocking tests. cc @muratg \n. Travis is passing now. Haven't addressed any PR comments yet\n. Updated\n. Updated. Waiting for a signoff\n. This seems to cause some breaks in Entropy too:\nhttps://github.com/aspnet/Entropy/blob/5389de646e0821820df7a7659c6e774ae3396386/samples/Project.Dependencies/project.json\nError:\n23:40:16][Step 3/5]   Using Package dependency System.Runtime.InteropServices 4.0.20\n[23:40:16][Step 3/5]     Source: D:\\b\\work\\9e9b04ab779a9ae1/packages\\System.Runtime.InteropServices\\4.0.20\n[23:40:16][Step 3/5] D:\\b\\work\\9e9b04ab779a9ae1\\samples\\Project.Dependencies\\project.json(5,32): error: The dependency Project.SharedFiles 1.0.0 in project Project.Dependencies does not support framework DNXCore,Version=v5.0.\n[23:40:16][Step 3/5]     File: ref\\dotnet\\System.Runtime.InteropServices.dll\n[23:40:16][Step 3/5] \n[23:40:16][Step 3/5]   Using Package dependency System.Text.Encoding 4.0.10\n[23:40:16][Step 3/5] D:\\b\\work\\9e9b04ab779a9ae1\\samples\\Project.Dependencies\\Program.cs(8,15): DNXCore,Version=v5.0 error CS0234: The type or namespace name 'SharedFiles' does not exist in the namespace 'Project' (are you missing an assembly reference?)\n[23:40:16][Step 3/5]     Source: D:\\b\\work\\9e9b04ab779a9ae1/packages\\System.Text.Encoding\\4.0.10\n[23:40:16][Step 3/5]     File: ref\\dotnet\\System.Text.Encoding.dll\n[23:40:16][Step 3/5] D:\\b\\work\\9e9b04ab779a9ae1\\samples\\Project.Dependencies\\Program.cs(26,13): DNXCore,Version=v5.0 error CS0103: The name 'TaskAsyncHelpers' does not exist in the current context\n[23:40:16][Step 3/5] \n[23:40:16][Step 3/5]   Using Package dependency System.Text.Encoding.Extensions 4.0.10\n[23:40:16][Step 3/5] Build failed.\n. The help today says \"One or more projects build\". I guess we can be more explicit about the globbing support\n. Will fix the test failures once we figure out what is the error format that VS understands\n. @moozzyk  Testing this is pretty complicated if you want to go the DTH route. Maybe @troydai can help here.\nI've updated the tests that cover error message so we get some coverage at least for the out of proc scenario.\n. @davidfowl check your e-mail :)\n. It can throw but it should output the message in a format the VS can understand. Also, most users don't need to see the call stack. A simple \"Invalid json. Blah details about what's wrong\" would be enough.\n. Updated with tests\n. updated\n. :shipit: \n. @muratg @davidfowl you were supposed to be at the Christmas party... cc @Eilon fyi\n. Meh, not impressed that we are removing this but the change itself looks good.\nBtw, you have to update the project.json files in every repo to remove the repository information\n. :shipit: \n. @muratg the code will be in git :)\n. Looks good \n. Outside of our team it might not be very common but for us it's extremely useful for us because we can have multiple builds per day and it makes it hard to keep everything in sync on the dev box.\n. Yes, use IRuntimeEnvironment.\nHere's how to obtain an instance of it: https://github.com/aspnet/UserSecrets/blob/dev/src/Microsoft.Framework.SecretManager/Program.cs#L23\nHere's how to use it: https://github.com/aspnet/UserSecrets/blob/dev/src/Microsoft.Framework.SecretManager/CommandOutputProvider.cs#L16\n. @tstar  yes, it is possible:\nSET DNX_FEED=https://myget.org/F/aspnetcidev/api/v2\ndnvm upgrade\n. Nevermind, it was my code :)\n. Closing as resolved\n. Till -> Until \n. Or SkipWhile\n. Or SkipUntil\n. Looks good otherwise\n. Looks good otherwise\n. Microsoft.Framework.ApplicationHost was renamed to Microsoft.Dnx.ApplicationHost\nAre you running from Visual Studio? \n. Microsoft.Framework.ApplicationHost was renamed to Microsoft.Dnx.ApplicationHost\nAre you running from Visual Studio? \n. I installed the SDK. Create a VM and try on it\n. I installed the SDK. Create a VM and try on it\n. @davidfowl that can happen if write is called multiple times. And it happened because of what @moozzyk and @Tratcher said\n. @davidfowl that can happen if write is called multiple times. And it happened because of what @moozzyk and @Tratcher said\n. I think we should have the same behavior as before (before Pawel's change). OsVersion is a string reporting GetVersionEx on Windows and uname -a on *nix.\nProbably the conversion from the os reported version to what we do now (as in 6.1.0.0 -> 7.0) should be just a helper/extension method on IRuntimeEnvironment. Only DNX needs that conversion actually.\n. I think we should have the same behavior as before (before Pawel's change). OsVersion is a string reporting GetVersionEx on Windows and uname -a on *nix.\nProbably the conversion from the os reported version to what we do now (as in 6.1.0.0 -> 7.0) should be just a helper/extension method on IRuntimeEnvironment. Only DNX needs that conversion actually.\n. @borgdylan what's the simplest repro that you have? I'm not able to reproduce this with 1.0.0-rc1-15844\n. @borgdylan what's the simplest repro that you have? I'm not able to reproduce this with 1.0.0-rc1-15844\n. Since beta8 hosting sets this as a HttpContext feature instead of thread local. Components should now depend on the feature instead of thread continuity. If there are remaining place that don't work, we can address them. \nhttps://github.com/aspnet/Hosting/commit/49520a2a73251a9f718743df4a43d26514021767#diff-212af5584d052a0246bb112580efc730R54\nThis doesn't look like a dnx bug.\n. Since beta8 hosting sets this as a HttpContext feature instead of thread local. Components should now depend on the feature instead of thread continuity. If there are remaining place that don't work, we can address them. \nhttps://github.com/aspnet/Hosting/commit/49520a2a73251a9f718743df4a43d26514021767#diff-212af5584d052a0246bb112580efc730R54\nThis doesn't look like a dnx bug.\n. :shipit: \n. 1. Can you please run \"dnu restore\" in the project folder form a command prompt and paste the output?\n2. Can you share the global.json file?\n3. Does the project run if you run it from console?\n. 1. Can you please run \"dnu restore\" in the project folder form a command prompt and paste the output?\n2. Can you share the global.json file?\n3. Does the project run if you run it from console?\n. :shipit: after adding the comment\n. :shipit: after adding the comment\n. Don't forget to update the watcher too https://github.com/aspnet/dnx-watch/blob/dev/src/Microsoft.Dnx.Watcher.Core/project.json#L8\n. Don't forget to update the watcher too https://github.com/aspnet/dnx-watch/blob/dev/src/Microsoft.Dnx.Watcher.Core/project.json#L8\n. looks good. :shipit: \n. looks good. :shipit: \n. Can you please try with beta7 or newer? The bug might have been fixed.\n. Can you please try with beta7 or newer? The bug might have been fixed.\n. This looks like an MVC bug. Can you please open it there? \nI assume there's a place in MVC where they don't use the service provider on the feature collection.\n. This looks like an MVC bug. Can you please open it there? \nI assume there's a place in MVC where they don't use the service provider on the feature collection.\n. Isn't publish deleting the contents of the folder before it runs?\n. Isn't publish deleting the contents of the folder before it runs?\n. Yes\n. Yes\n. Looks good. :shipit: from me but please wait for @moozzyk to sign off too.\nAlso, don't forget to rebase & squash \n. Looks good. :shipit: from me but please wait for @moozzyk to sign off too.\nAlso, don't forget to rebase & squash \n. No tests? (sad panda)\n. No tests? (sad panda)\n. :shipit: \n. :shipit: \n. There seems to be a bug in music store that's disabled because of this issue. Is it still happening? Can we reenable or delete the test?\n. There seems to be a bug in music store that's disabled because of this issue. Is it still happening? Can we reenable or delete the test?\n. Will this break tooling?\n. Will this break tooling?\n. :shipit: after you fix Travis\n. :shipit: after you fix Travis\n. @kichalla this happens because the project in the src folder reference source files directly in the test folder and it also has a test command. The output ends up with a test folder and then it dnu tries to write a test file (no extension) in the same folder.\nThis could be an edge case in dnu publish but I think we should also fix music store to not have dependencies from src -> test\n. @kichalla this happens because the project in the src folder reference source files directly in the test folder and it also has a test command. The output ends up with a test folder and then it dnu tries to write a test file (no extension) in the same folder.\nThis could be an edge case in dnu publish but I think we should also fix music store to not have dependencies from src -> test\n. The exception is here:\n```\n    mscorlib.dll!System.IO.__Error.WinIOError(int errorCode = 367093944, string maybeFullPath = {object[1]})    Unknown\n    mscorlib.dll!System.IO.FileStream.Init(string path, System.IO.FileMode mode, System.IO.FileAccess access = Write, int rights, bool useRights = false, System.IO.FileShare share, int bufferSize = 4096, System.IO.FileOptions options, Microsoft.Win32.Win32Native.SECURITY_ATTRIBUTES secAttrs, string msgPath, bool bFromProxy, bool useLongPath, bool checkHost) Unknown\n    mscorlib.dll!System.IO.FileStream.FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options, string msgPath, bool bFromProxy, bool useLongPath, bool checkHost)    Unknown\n    mscorlib.dll!System.IO.StreamWriter.CreateFile(string path, bool append, bool checkHost)    Unknown\n    mscorlib.dll!System.IO.StreamWriter.StreamWriter(string path, bool append, System.Text.Encoding encoding = {System.Text.UTF8Encoding}, int bufferSize = 1024, bool checkHost)   Unknown\n    mscorlib.dll!System.IO.File.InternalWriteAllText(string path, string contents = \"#!/usr/bin/env bash\\n\\nSOURCE=\\\"${BASH_SOURCE[0]}\\\"\\nwhile [ -h \\\"$SOURCE\\\" ]; do # resolve $SOURCE until the file is no longer a symlink\\n  DIR=\\\"$( cd -P \\\"$( dirname \\\"$SOURCE\\\" )\\\" && pwd )\\\"\\n  SOURCE=\\\"$(readlink \\\"$SOURCE\\\")\\\"\\n  [[ $SOURCE != /* ]] && SOURCE=\\\"$DIR/$SOURCE\\\" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located\\ndone\\nDIR=\\\"$( cd -P \\\"$( dirname \\\"$SOURCE\\\" )\\\" && pwd )\\\"\\n\\nexec \\\"$DIR/runtimes/dnx-clr-win-x86.1.0.0-dev/bin/dnx\\\" --project \\\"$DIR/src/MusicStore.Test\\\" --configuration Debug test \\\"$@\\\"\", System.Text.Encoding encoding, bool checkHost) Unknown\n    mscorlib.dll!System.IO.File.WriteAllText(string path, string contents)  Unknown\n\nMicrosoft.Dnx.Tooling.dll!Microsoft.Dnx.Tooling.Publish.PublishRoot.GenerateBashScripts() Line 184  C#\n    Microsoft.Dnx.Tooling.dll!Microsoft.Dnx.Tooling.Publish.PublishRoot.Emit() Line 92  C#\n    Microsoft.Dnx.Tooling.dll!Microsoft.Dnx.Tooling.Publish.PublishManager.Publish() Line 287   C#\n    Microsoft.Dnx.Tooling.dll!Microsoft.Dnx.Tooling.PublishConsoleCommand.Register.AnonymousMethod__1() Line 79 C#\n    Microsoft.Dnx.Tooling.dll!Microsoft.Dnx.Runtime.Common.CommandLine.CommandLineApplication.Execute(string[] args = {string[3]}) Line 263 C#\n    Microsoft.Dnx.Tooling.dll!Microsoft.Dnx.Tooling.Program.Main(string[] args = {string[3]}) Line 87   C#\n    [Native to Managed Transition]\n    [Managed to Native Transition]\n    Microsoft.Dnx.Host.dll!Microsoft.Dnx.Runtime.Common.EntryPointExecutor.Execute(System.Reflection.Assembly assembly = {System.Reflection.RuntimeAssembly}, string[] args = {string[3]}, System.IServiceProvider serviceProvider = {Microsoft.Dnx.Runtime.Common.DependencyInjection.ServiceProvider}) Line 36    C#\n    Microsoft.Dnx.Host.dll!Microsoft.Dnx.Host.Bootstrapper.RunAsync(System.Collections.Generic.List args = Count = 4, Microsoft.Dnx.Runtime.IRuntimeEnvironment env = {Microsoft.Dnx.Runtime.RuntimeEnvironment}, string appBase = \"C:\\Users\\victorhu\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-dev\\bin\\lib\\Microsoft.Dnx.Tooling\\\", System.Runtime.Versioning.FrameworkName targetFramework = {System.Runtime.Versioning.FrameworkName}) Line 81    C#\n    Microsoft.Dnx.Host.dll!Microsoft.Dnx.Host.RuntimeBootstrapper.ExecuteAsync(string[] args = {string[6]}, Microsoft.Dnx.Host.BootstrapperContext bootstrapperContext = {Microsoft.Dnx.Host.BootstrapperContext}) Line 159 C#\n    Microsoft.Dnx.Host.dll!Microsoft.Dnx.Host.RuntimeBootstrapper.Execute(string[] args = {string[6]}, Microsoft.Dnx.Host.BootstrapperContext bootstrapperContext = {Microsoft.Dnx.Host.BootstrapperContext}) Line 22   C#\n    [Native to Managed Transition]\n    [Managed to Native Transition]\n    Microsoft.Dnx.Host.Clr!Microsoft.Dnx.Host.Clr.RuntimeBootstrapper.Execute(string[] argv = {string[6]}, System.Runtime.Versioning.FrameworkName targetFramework = {System.Runtime.Versioning.FrameworkName}, DomainManager.ApplicationMainInfo info = {DomainManager.ApplicationMainInfo}) Line 18   C#\n    Microsoft.Dnx.Host.Clr!DomainManager.Main(int argc = 6, string[] argv = {string[6]}) Line 98    C#\n```\n. The exception is here:\n\n```\n    mscorlib.dll!System.IO.__Error.WinIOError(int errorCode = 367093944, string maybeFullPath = {object[1]})    Unknown\n    mscorlib.dll!System.IO.FileStream.Init(string path, System.IO.FileMode mode, System.IO.FileAccess access = Write, int rights, bool useRights = false, System.IO.FileShare share, int bufferSize = 4096, System.IO.FileOptions options, Microsoft.Win32.Win32Native.SECURITY_ATTRIBUTES secAttrs, string msgPath, bool bFromProxy, bool useLongPath, bool checkHost) Unknown\n    mscorlib.dll!System.IO.FileStream.FileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options, string msgPath, bool bFromProxy, bool useLongPath, bool checkHost)    Unknown\n    mscorlib.dll!System.IO.StreamWriter.CreateFile(string path, bool append, bool checkHost)    Unknown\n    mscorlib.dll!System.IO.StreamWriter.StreamWriter(string path, bool append, System.Text.Encoding encoding = {System.Text.UTF8Encoding}, int bufferSize = 1024, bool checkHost)   Unknown\n    mscorlib.dll!System.IO.File.InternalWriteAllText(string path, string contents = \"#!/usr/bin/env bash\\n\\nSOURCE=\\\"${BASH_SOURCE[0]}\\\"\\nwhile [ -h \\\"$SOURCE\\\" ]; do # resolve $SOURCE until the file is no longer a symlink\\n  DIR=\\\"$( cd -P \\\"$( dirname \\\"$SOURCE\\\" )\\\" && pwd )\\\"\\n  SOURCE=\\\"$(readlink \\\"$SOURCE\\\")\\\"\\n  [[ $SOURCE != /* ]] && SOURCE=\\\"$DIR/$SOURCE\\\" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located\\ndone\\nDIR=\\\"$( cd -P \\\"$( dirname \\\"$SOURCE\\\" )\\\" && pwd )\\\"\\n\\nexec \\\"$DIR/runtimes/dnx-clr-win-x86.1.0.0-dev/bin/dnx\\\" --project \\\"$DIR/src/MusicStore.Test\\\" --configuration Debug test \\\"$@\\\"\", System.Text.Encoding encoding, bool checkHost) Unknown\n    mscorlib.dll!System.IO.File.WriteAllText(string path, string contents)  Unknown\n\nMicrosoft.Dnx.Tooling.dll!Microsoft.Dnx.Tooling.Publish.PublishRoot.GenerateBashScripts() Line 184  C#\n    Microsoft.Dnx.Tooling.dll!Microsoft.Dnx.Tooling.Publish.PublishRoot.Emit() Line 92  C#\n    Microsoft.Dnx.Tooling.dll!Microsoft.Dnx.Tooling.Publish.PublishManager.Publish() Line 287   C#\n    Microsoft.Dnx.Tooling.dll!Microsoft.Dnx.Tooling.PublishConsoleCommand.Register.AnonymousMethod__1() Line 79 C#\n    Microsoft.Dnx.Tooling.dll!Microsoft.Dnx.Runtime.Common.CommandLine.CommandLineApplication.Execute(string[] args = {string[3]}) Line 263 C#\n    Microsoft.Dnx.Tooling.dll!Microsoft.Dnx.Tooling.Program.Main(string[] args = {string[3]}) Line 87   C#\n    [Native to Managed Transition]\n    [Managed to Native Transition]\n    Microsoft.Dnx.Host.dll!Microsoft.Dnx.Runtime.Common.EntryPointExecutor.Execute(System.Reflection.Assembly assembly = {System.Reflection.RuntimeAssembly}, string[] args = {string[3]}, System.IServiceProvider serviceProvider = {Microsoft.Dnx.Runtime.Common.DependencyInjection.ServiceProvider}) Line 36    C#\n    Microsoft.Dnx.Host.dll!Microsoft.Dnx.Host.Bootstrapper.RunAsync(System.Collections.Generic.List args = Count = 4, Microsoft.Dnx.Runtime.IRuntimeEnvironment env = {Microsoft.Dnx.Runtime.RuntimeEnvironment}, string appBase = \"C:\\Users\\victorhu\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-dev\\bin\\lib\\Microsoft.Dnx.Tooling\\\", System.Runtime.Versioning.FrameworkName targetFramework = {System.Runtime.Versioning.FrameworkName}) Line 81    C#\n    Microsoft.Dnx.Host.dll!Microsoft.Dnx.Host.RuntimeBootstrapper.ExecuteAsync(string[] args = {string[6]}, Microsoft.Dnx.Host.BootstrapperContext bootstrapperContext = {Microsoft.Dnx.Host.BootstrapperContext}) Line 159 C#\n    Microsoft.Dnx.Host.dll!Microsoft.Dnx.Host.RuntimeBootstrapper.Execute(string[] args = {string[6]}, Microsoft.Dnx.Host.BootstrapperContext bootstrapperContext = {Microsoft.Dnx.Host.BootstrapperContext}) Line 22   C#\n    [Native to Managed Transition]\n    [Managed to Native Transition]\n    Microsoft.Dnx.Host.Clr!Microsoft.Dnx.Host.Clr.RuntimeBootstrapper.Execute(string[] argv = {string[6]}, System.Runtime.Versioning.FrameworkName targetFramework = {System.Runtime.Versioning.FrameworkName}, DomainManager.ApplicationMainInfo info = {DomainManager.ApplicationMainInfo}) Line 18   C#\n    Microsoft.Dnx.Host.Clr!DomainManager.Main(int argc = 6, string[] argv = {string[6]}) Line 98    C#\n``\n. Hosting tries to loadMicrosoft.AspNet.Hosting.json` or the json file passed as \"--config\". Your code passes a ini file :)\n\nhttps://github.com/aspnet/Hosting/blob/dev/src/Microsoft.AspNet.Hosting/Program.cs#L15-L32\n. Hosting tries to load Microsoft.AspNet.Hosting.json or the json file passed as \"--config\". Your code passes a ini file :)\nhttps://github.com/aspnet/Hosting/blob/dev/src/Microsoft.AspNet.Hosting/Program.cs#L15-L32\n. Here's how the \"web\" command should look like: https://github.com/aspnet/MusicStore/blob/dev/src/MusicStore/project.json#L44\n. Here's how the \"web\" command should look like: https://github.com/aspnet/MusicStore/blob/dev/src/MusicStore/project.json#L44\n. :shipit: \n. :shipit: \n. :shipit: after Travis passes\n. :shipit: after Travis passes\n. :shipit: \n. :shipit: \n. It was a bootstrapping issue\n. It was a bootstrapping issue\n. Looks good :shipit:\n. @Eilon can we get a few Mindstorms for the team? I mean, you know, for development and testing purposes...\n. That's awesome! \nProbably IApplicationEnvironment will give wrong results and anything relying on it (a lot!) will fail.\n. Did you use mono or coreclr?\n. There's no way to do that. Can you spin off a new process? That's what dnx-watch does\n. Do we plan to replace this with System.CommandLine?\n. You are doing the right thing. Setting DNX_HOME is the way to go.\n. I just verified and it works. Dnx understands the latest lockfile\n. Why is this change?\n. Niice! :shipit: \n. Sorry but Windows 2003 is not supported. Win 2008 R2 and Win7  are the oldest versions of Windows that we support.\n. /cc @Eilon @blowdart \n. It seemed more appropriate because SupportsPdbGeneration has nothing to do with writing messages to output. Plus you wouldn't want to print a message every time that method is invoked - I know that currently that is invoked only once.\n. Oh yeah, missed the second place. PR updated.\n. Yes, only with KRE_TRACE = 1\n. Could be but I think it makes more sense to keep it here since the rest of the script does the same\n. This needs to be BreadcrumbStore, will update soon.\n. Sure\n. I thought about that and I can definitely create it from code but I am worried about the permissions on it. If the code runs under a limited account, it cannot restrict the delete permissions to admins only. Also, in %programdata%\\Microsoft only admins can write by default so the script that creates the folder must run elevated\n. Okay\n. SpecialFolder is not available on CoreCLR\n. Sure. Moved\n. Done\n. No. This is stuff only for us\n. There will be one\n. I guess I can remove that package and let the tests run on mono even though the feature is not available on that platform. We should consider doing something that allows us to use test extensions in kruntime\n. :speak_no_evil: \n. Btw, it should be O.M.T. (t = tab)\n. DOTNET_TRACE\n. You mean it shouldn't depend on IsMono or on IsWindows?\n. OK, rebased and removed\n. Talked offline and refactoring this is too time consuming to make sense. The code is very similar but extremely different. I tried to refactor this initially and ended up with a method with 8 arguments...\n. Renamed\n. Sure\n. Yup, starting a thread with the CLR team because they don't expose the OS version on CoreCLR\n. parts cannot be null\n. IsLetterOrDigit returns true for _ ?\n. Can the last char be _?\n. This repeats quite a lot !char.IsLetterOrDigit(c) && c != '_', can you extract it to a method?\n. const?\n. const for each string here?\n. I'll just address that in this PR, no need for a new issue\n. No, it was not. Also, it makes sense to have it as a different Restore because there is no project in the context of install\n. When we talked a few ago, you mentioned that you would prefer to have distinct commands install and uninstall for these commands (https://github.com/aspnet/XRE/issues/1135). I can go either way, just let me know if which one you prefer. Btw, I think commands install is better than commands add\n. Time limitation: no. If you use the debug flag, it can be annoying if you leave it too much and then realize that the program ran. Also, it adds unnecessary complexity.\nDebug break: no again. My initial code had that but then I realized that most of the times you set a breakpoint somewhere in the code and you expect that one to be hit first. You don't want every time you run the program to get a breakpoint before the one that you set, a breakpoint that you cannot disable.\n. If (!!(Lock==false) && !!(!Unlock == true)) ? :trollface: \n. Here is the actual fix\n. This code was already there :) I only changed the log message and extracted a new method\n. I like the idea. Stay tuned for the change :)\n. aspnet50 -> constant?\n. When there are no matches, return an empty collection, not null. It makes the consumer code simpler because instead of having to write something like:\nvar result = SelectFrameworks(....);\nif (result != null)\n{\n     foreach(var fx in result) { ... }\n}\nYou can write the for loop without the null check.\n. Idea: rather than stopping at the first error, collect all possible errors and then return. Why? Because if you have 2 errors, you get only one of them, you fix it and only then you get the second one.\n. Environment.NewLine instead of \\n ?\n. Can you make IsPublished a property of the PackageInfo class? It might be useful for other purposes, not just for this check\n. If you do what I said above, then you can return the model always and then only select those that are published\n. I know it is unrelated but I think we should start addressing these TODO error messages\n. This loop executes once at most in all cases (there is no break/continue in it and return is the last statement)... Why is it a loop?\n. Why is this method returning bool when it is always returning true?\n. That's why you have the error list. >0 errors = something is wrong\n. Good point! See the updated PR\n. Updated\n. Updated\n. Done\n. Const?\n. Is this valid json?\n. Ah, I remember why I added the .sh extension. The NuGet package builder doesn't support file without extensions. I'm not sure if it is a bug or not \nSystem.ArgumentOutOfRangeException: startIndex cannot be larger than length of string.\nParameter name: startIndex\n   at System.String.Substring(Int32 startIndex, Int32 length)\n   at System.String.Substring(Int32 startIndex)\n   at NuGet.PackageBuilder.WriteFiles(ZipArchive package) in D:\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\NuGet\\Authori\nng\\PackageBuilder.cs:line 468\n   at NuGet.PackageBuilder.Save(Stream stream) in D:\\aspnet\\dnx\\src\\Microsoft.Framework.Runtime\\NuGet\\Authoring\\PackageB\nuilder.cs:line 257\n   at Microsoft.Framework.PackageManager.BuildManager.Build() in D:\\aspnet\\dnx\\src\\Microsoft.Framework.PackageManager\\Bu\nilding\\BuildManager.cs:line 184\n   at Microsoft.Framework.PackageManager.Program.<>c__DisplayClass3_3.<Main>b__6() in D:\\aspnet\\dnx\\src\\Microsoft.Framew\nork.PackageManager\\Program.cs:line 162\n   at Microsoft.Framework.Runtime.Common.CommandLine.CommandLineApplication.Execute(String[] args) in D:\\aspnet\\dnx\\src\\\nMicrosoft.Framework.CommandLineUtils\\CommandLine\\CommandLineApplication.cs:line 277\n   at Microsoft.Framework.PackageManager.Program.Main(String[] args) in D:\\aspnet\\dnx\\src\\Microsoft.Framework.PackageMan\n. @troydai you might want to set this env var for perf runs\n. Added the NOOP variable\n. IsServiceable\n. Check that the file exists\n. Empty line...\n. ServiceableAttribute and serviceableAttribute are two different types. It shouldn't be case insensitive \n. Same here (as above)?\n. @davidfowl \"Where exactly does it noop?\" Here. I could change it to use the _isEnabled field instead an really do nothing.\n. @davidfowl updated\n. Either your or me will have to rebase & merge (depending on which change goes first) :)\n. Add a bug for this so we don't forget about the hacky code\n. not needed\n. ugh... not ElementAt. just use the indexer [0]\n. Wait a second... why do you stop after appbase?\n. That's code copied from MsBuild, even the comments (I put a reference above)\n. Ugh... I hate VS\n. Less arguments :)\n. Yes. Because we already check the attributes\n. Sure, why not\n. Nope, no love for it :) That value is automatically computed \n. That value is taken from the DNX_BUILD_VERSION variable\n. > Maybe do  ... \nOk\n\nAlso is the value guaranteed to be an fully qualified name all the time? Even if the actual code didn't fully qualify it?\n\nGood question and the answer is yes, it is always the full qualified name.\n. We can change that in the dev branch\n. Nah. The error message is really bad. It just says that the string has an invalid format but doesn't tell you what the value is.\n. No strings in the runtime are localizable. I think there is an issue about that somewhere...\n. _commandsRepo.PackagesRoot I think has the same value and might be a better choice\n. Servicing is not available on *Nix. We don't need this test to run because we don't write the breadcrumbs there. Also, I'm not sure that this test will pass even if you get the user name because it tries to set access rules on folders (does that work on Mono?)\n. Sorting... \n. The class name is ProjectFilesTests (second word is plural)\n. string.Equals\n. We should get rid of this method and use PlatformHelper.IsWindows instead\n. Why is functional tests depending on the (unit) tests project?\n. Same question as below. Why this dependency?\n. Ugh... That's ugly. Those utilities should be in a test common project\n. Will change back to name, it is a left over from a previous attempt that I forgot to revert\n. :+1: \n. Good catch\n. Because it provides a better experience. It tells the user exactly what is wrong\n. Same as below, the experience is not as good and we cannot give error messages as good as these\n. Ordinal. We always check the final name, including the extension, case sensitive\n. :+1: \n. Nope, the resource always has a path\n. Yes, please\n. From the PR description:\n\nalso moved the  RuntimeFramework  from  IApplicationEnvironment  to  IRuntimeEnvironment . However, I cannot remove the old one because xunit is using it. Therefore, I'll keep both for now, send a PR to xunit and then remove the old one. If I remove the old one, our build will fail.\n. Architecture? I don't want to repeat Runtime from the class name\n. I'll go with RuntimeArchitecture because I don't want anyone to confuse it with OS architecture\n. Yes, stackalloc and fixed size buffers require an unsafe context\n. I think \"A disposable object\" sounds better\n. Removes it from the list? What list? Isn't that an implementation detail?\n. I was expecting a property of type IServiceProvider with get and set to do something else and not get or set the IServiceprovider  :stuck_out_tongue: \n. I approve that comment\n. Use the Project object and generate the json from it instead of hardcoding json here\n. https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime/Project.cs\n\nIf everyone does it, you don't have to follow them :) I really don't like these hardcoded strings.\n. I think there is overload for this constructor that takes an IEnumerable. Then, you don't need to foreach below\n. Nope. We don't want this. Internal visible to is only for unit tests\n. Indentation\n. Nit: \"inuse\" -> \"in use\"\n. Add 2 more test that does:\nFirst:\n1. Add a package that is not used by anyone\n2. Have a single application installed (that doesn't use that packge)\n3. Uninstall the app\n4. Make sure there is no package left\nSecond:\nExactly like the previous test but pass --no-purge and make sure that the orphan package is not deleted\n. It is a tricky situation because unit tests shouldn't touch the disk...\n. Do you want to continue running if this failed?\n. 1. Why don't you call rmdir directly?\n2. Why not use Directory.Delete ?\n3. Will rm -rf remove the contents of the symlink or just the symlink itself?\n. I don't think parse is the right term here. Maybe useColors or something on those lines would be more appropriate\n. visibility modifier first: private static not static private\n. Can you inject directly the IRuntimeEnvironment?\n. Use an Action<string> instead?\n. Inject it in program.cs and pass it down the stream?\n. Naming convention for fields: _camelCaseName\n. Convestion: fields are private. Use a property if you need them outside of this class\n. Not enforced but it is pretty common to structure a class like this:\n- Fields\n- Constructors\n- Properties\n- Methods\n. x? xx?\n. I think it would be easier to understand if you move the increment inside the while block\n. Because it is used by the package manager too. Please note that I moved the file in a different project\n. Yes, I'm going to do that in a PR that follows. I need to push this because it is blocking the CI\n. Make it a property?\n. nameof(RuntimeComponents)\n. Why?\n. I don't think you run pack for everytest. You can only do it once\n. What?? It was cross-plat when I first wrote it\n. Um... this is not right. The static field can be initialized at any time, maybe even before the service provider\n. Create a static property that gets the value the first time it is invoked\n. Better name: GetNextToken\n. All these if blocks can be replaced by a big if\nif (next == ... ) || (next == ... ) || (next == ...) \n{ \n    buf.Add((char)next); \n}\n. what characters is 0x75 ? use chars instead if (next == 'X')\n. Just compare to a char, no need to these constants\n. . can be the first character. .42 is a valid number\n. Don't you have to increase the column here once you skip a space?\n. This is not something that the scanner should check\n. Also, if you decide to take such an approach (you should not!), at least make sure that you do the same for numbers and strings\n. StringBuilder\n. Suggestion: instead of allocating a buffer for each token, have a class level token that has the current token\n. Just use chars  directly in code\n. resource?\n. Resource?\n. I think your parser accepts 1 as a valid json. Not sure if that's in the spec\n. Token type . boolean ?\n. Rather than having different message for each expected character, you can have a generic one like Unexpected character. Expected: {0} \n. Throw an unexpected character/token exception\n. ++_line :unamused: \n. return Line^Column\n. split in 2 files?\n. I think JsonToken and JsonValue are swapped because JsonToken has a value while JsonValue does not\n. I suggest a few more error case tests:\n1. Unbalanced }\n2. Unbalanced ]\n3. Wrong nesting like: { [ } ]\n. Will this lock file be changed if I do dnu restore in the root of the solution folder?\n. Ah, I missed the file name :smile: \n. Um... is this running for every test class in the functional tests folder? Isn't it supposed to run only for your test?\n. nit: one argument per line\n. You should check if IsWindows not for IsMono because you can have CoreCLR on linux\n. AFAIK, JSON (and Javascript) don't make the distinction between different types of numbers. Basically, if it looks like a number and parses like number, it must be a number (of some kind). Can we do the same and let the caller decide how to parse it further?\n. Length (to be consistent with array)\n. Here's an idea that I just had: create a dictionary that maps characters to tokens. If the dictionary contains that key, you take the value. It would reduce all this code to 3 lines :)\n. Can we use characters instead of these constants? It is incosistent to have chars in some places and constants in others\n. Instead of passing the buffer to every method, create a class field and make this class non static\n. This exception is not consistent with the rest. Everywhere else you tell what is expected, which is the right way to do it, but here you tell that something is not expected and not offer a solution (what's expected). why?\n. Are you sure this is supposed to be internal? How is someone going to catch this?\n. What is the diff between this and JSON_InvalidEnd ?\n. Why struct?\n. EOF?\n. Um... this test could pass even when things go wrong. If the buffer returns EOL after the first read, this test passes.\n. btw, nit: IsWhitespace already checks for CR\n. Expected , or }\n. I like this fluent api :)\n. It can fail if you don't have permissions but we should let it fail. Let the callers decide if they want to handle the exception or not. In the two cases in which we use it, we want it to fail because there is nothing we can do if we cannot remove the readonly attribute\n. Is bash guaranteed to be installed?\n. IRuntimeEnvironment already has the version info\n. While you are doing this, I don't think this code is needed anymore\n. The two GetVersion methods are very similar (identical?) can we unify them?\n. Maybe an extension method for IRuntimeEnviornment,,,\n. Btw, I need that extension method in the code that I'm writing now so it would be great if you can provide it :)\n. Resolver instead of Getter ?\n. Not now but that's a fair point. I'll change it to uppercase\n. ResolvePackageIdAndVersion returns null if the package id is null. That means that we cannot figure out from the result of that method if the package is null because the user didn't specify it or because it was not found. I suggest adding a check before we call that method. If the user passes a null package, give an appropriate error message and if the package is not found, give a different one\n. Maybe validate the args even before we get the Execute\n. Env variables are not case sensitive \n. What other OSs? This is a Windows only feature...\n. Unfortunately, that's not easy... It could mess up with the files on the user's machine plus it would require admin rights to cleanup. I did a manual verification to see that the breadcrumb is written.\n. Fixed\n. Suggested error message: \"Failed to install .... \"\n. It will show the help for the last valid command\n. Use the ReportsFactory from line 57, don't bring this method back\n. I don't think OS information should be part of this\n. Who needs this?\n. This shouldn't be in the CommandLineApplication... Same about the one above. The command line application is used for subcommands too and they have nothing to do with version\n. Yeah but it shouldn't. The version should be just like any other command/argument, not something special because it doesn't apply to subcommands\n. Open a bug then :)\n. InitializING?\n. Sounds like CSI :)\n. needResponse ?\n. That's cool, I didn't know you can use ? for indexers\n. Might as well use 0 instead of null because you know from that the value cannot be 0\n. Stay on protocol => Using protocol.\n. Write a VB GUI interface to track an IP address\n. Sure, unless the CLR team has a solution to generate PDBs on non windows\n. \"package(s)\" because \"1 packages\" is not correct :)\n. Ugh, we really need to unify this coloring and how errors are displayed. It seems that everyone does it in their own way...\n. Can you have spaces before the first quote or after the last one?\n. I don't think the path can be rooted  because of the if block above. The project directory + a rooted path will not result in a valid file name\n. Whoops. Removed\n. Fixed\n. Nope. I just want \"global.json\"\n. Nope. It gets too complicated to escape each {\n. Sure\n. Yes. AFAIK whereis is on all distributions\n. That's not a bad suggestion, it could make build even faster when there are a lot of projects but I think that's part of a much bigger change. I want to keep this change as small as possible\n. It is used in GetScriptVariable\n. :+1: \n. Do you really need a for loop here? There are just 2 elements\n. This code seems to pick the first matching entry in the index. It must always pick the latest because new patches are added at the end of the file\n. Where is this env variable used?\n. The servicing index can be located in a different folder, other than program files, if you set the DNX_SERVICING env var. https://github.com/aspnet/dnx/blob/32358ec9b8970070ff77cbc5beef28c13e3ab09b/src/Microsoft.Framework.Runtime/Servicing/ServicingTable.cs#L31\n. For nupkgs that's how it work. We always append new lines, never delete\n. Maybe outputtarget?\n. SourcesConsoleCommand\n. Nit: add empty line before comment\n. They will not change the format because they would break everyone, not just us. \n. Good point\n. This seems to be required and if it null it will fail. Why don't you pass it as a constructor arg ?\n. Same as above\n. Is the order deterministic?\n. We want to use these everywhere, not just here. Today everyone does it in their own way\n. Too much code in one single method\n. :+1: \n. If I remember well, the prefix came when we did the 3rd (?) rename because it was really hard to rename everywhere\n. https://github.com/aspnet/dnx/issues/2154\n. Um... what happens if the packages is not installed? As in running with --overwrite when there is nothing to overwrite\n. I think this should be WriteInformation. It is pretty important to know when things get deleted\n. Not because of this change but I realized that we have a bug here. If the path that you pass through the environment variable is not a valid path, the ServicingIndex throws. Here: https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime/Servicing/ServicingIndex.cs#L19\nWe should check that's a valid path. \n. Can RestoreDirectories be null?\n. nevermind, I just noticed that it is initialized\n. Ah!!!! This is the package that ends up in my packages folder. I think there is a test that leaves that package on the disk. I always have it the global packages folder\n. @BrennanConroy ?\n. From here:\n\nThe execution platform can be detected by using the System.Environment.OSVersion.Platform value. However correctly detecting Unix platforms, in every cases, requires a little more work. The first versions of the framework (1.0 and 1.1) didn\u2019t include any PlatformID value for Unix, so Mono used the value 128. The newer framework 2.0 added Unix to the PlatformID enum but, sadly, with a different value: 4 and newer versions of .NET distinguished between Unix and MacOS X, introducing yet another value 6 for MacOS X.\n. This is confusing. \"if the operating system name is '1' then ...\" . One as in \"one core?\"\n. Sorry, I should have used the troll face for the second part of my comment :)\n. Isn't this exception message supposed to be the same as the one on line 65 in PatternsCollectionHelper ?\n. Change namespace to Microsoft.Dnx.Tooling.Tests\n. copyright\n. Name?\n. don't we have a helper for this replacement? It's all over the place\n. Should this helper go in some CSharp compilation helper, in a different package? It is really c# specific\n. 4 because 3 was taken?\n. \"Analyzed\"\n. Can you please add another part to this message saying that it will retry. Or even better \"retry x of y\"\n. Wrong name. Should be Microsoft.Dnx.ApplicationHost\n. remove\n. You don't need to pass a ResourceDescriptor. The file name is enough\n. Use a macro instead?\n. I don't think that printing the folder location is a security issue. It simply makes the message more actionable\n. \"attempt x of y\". instead of \"attempt x\"\n. mmm... can you print something else?\n. while(true)\n. Thread.Join?\n. Why do you need a thread, btw?\n. Typo\n. Use timeout.TotalSeconds. Seconds is just the seconds component of the date time, not the value of the timespan in seconds\n. This can throw if the process is not running\n. remove\n. const\n. You can simply join the threads. You don't need a manual reset event\n. Private fields -> Constant; public fields or protected in public classes-> Readonly\n. TotalSeconds\n. Will this fail if the environment variables dictionary doesn't already have the \"DNX_TRACE\" exist?\n. This class should be called Readonlys not Constants :trollface: \n. Const?\n. OperatingSystems.Win7And2008R2 already includes the other two. The OSSkip condition is superfluous because of the previous one \n. Move this to a helper function? You do this replacement in a lot of places\n. Why skip on Win2008 ?\n. I think you can remove _supportsPdbGeneration completely\n. Nevermind. Keep it there, I just noticed it is still used\n. Verbose maybe?\n. I'm sure someone could use an upper case \"1\" :trollface: \n. Serious now: we should have a helper for these flag environment variables rather that doing string.Equals(... true, 1) etc\n. What's this?\n. Samples should go under the \\samples folder not \\test\n. Missing copyright. Please check the other files too\n. Ugh, public field...\n. I don't like this. We load the file content in memory for every file in that directory. That might take quite a lot of space. How about load it on demand?\n. There's a lot of duplicated code here and in Load. Can we just use Read directly in Load?\n. Lazy read this. We don't want all files in memory if they're not needed\n. I would call this method Any or NoDiff\n. Oh, don't do this. Static constructors are usually a bad idea, you have no idea when this will be invoked\n. Why is noSource special?\n. I think all the command methods in this class need extra arguments just like Publish\n. You can do some of these appends in one line. I think it more clear: sb.Append($\"restore \\\"{restoreDir}\\\")\n. I think there are at least 5 places in our dnx code base where we do this. Please try to find at least one of them and reuse it here\n. Yet another process run helper. Please reuse one of the existing ones\n. 1 class/file\n. Possible test hang if the process hangs. Always use a timeout and make it configurable.\n. What's the scenario in which you want to set the same content for multiple files? Why not use a loop when you need that?\n. Why not return IDictionary< > from there? That way you don't need the call to ToDictionary above\n. do you need to do some sort path existence check or something?\n. Cache the resolver?\n. Then why not make it a test?\n. Either make it private or make it a property\n. You can use IUseFixture<T> http://stackoverflow.com/questions/12976319/xunit-global-setup-teardown\n. I don't think we do but we should start doing it. Just pick a big timeout (3-5 minutes) and that should be enough. We just want to make sure that nothing hangs. Kill the process if the timeout expires\n. You might consider two ways to configure the timeout. There is a default one that might be configurable globally (env var?) so you can tweak it on slow machines and then this method should also take a timeout in case we know that something is taking a long time\n. See the updated code\n. nit: usually we add : this() on a new line\n. The lazy is an implementation  detail. Don't return it to the caller, just do the lazy part inside this object\n. No. VS works well without it\n. Probably you should join them with a new line no just comma. Maybe new line and a space so it has a little indentation?\n. You need quotes around the arguments representing paths for the case where paths have spaces. See that you handle this in other cases too\n. You need to do the same trick as in the dnu case with cmd /C on Windows\n. FYI, the helper is here: https://github.com/aspnet/dnx/blob/219871c6063d00f8297eeafe93266f1048f59a45/src/Microsoft.Dnx.Tooling/Utils/PathUtilities.cs#L35\n. Do we need a linux coreclr case? @BrennanConroy  ?\n. Will this fail if I already have set one of the environment variables? For example I set DNX_TRACE in my console and then I run a test that sets DNX_TRACE again. Will this conflict with the inherited variables?\n. There should be a way to disable console writing. It creates a lot of noise\n. You are making an assumption that might not hold. The caller might not be the test method but another method that the test method calls.\n. const for the environment variables\n. Because TryAddRuntime  calls add framework\n. possible index out of range exception\n. Can you add?\n1. \"C:\\\\\", \"C:\\\\folder1\\\\file\"\n2. C:\\\\folder1\\\\file\", \"C:\\\\\"\n. Is the result here correct?\n. I'm with @anurse on this one\n. Yes but it is used throughout the code as an enum... (weird, I know). We never check it with a specific case\n. Fixed\n. Sure\n. For consistency \n. whoops, forgot these. Will revert\n. will change now\n. Why don't you use / instead of \\\\?\n. This is a file that we produce\n. We produce this file\n. Here it is: https://github.com/aspnet/dnx/tree/dev/src/Microsoft.Dnx.Host.Mono\n. What will happen when the version will have more than 1 digit in each group?\n. I think we have some extension methods for Reports to write information directly.\n. Do you need this as a property?\n. Same about Reports\n. File.Exist(restoreDirectory) ?\n. Add the runtime namespace\n. Case insensitive comparison?\n. Did you just assign a constant to a constant just so you don't use the other constant? :laughing: \n. What's 21?\n. Using a type name that doesn't exist is not a syntax error. Either rename the project or add an actual syntax error\n. Dxt?\n. How about StdErr? Usually error messages end up there\n. Add a comment explaining that\n. Did we drop this completely? Is there an /etc/os-release on redhat?\n. The value could be a string. You don't need an object\n. Also, I would avoid this dictionary completely and do the if else that was before because this code is on the startup hot path\n. What if value has length 1?\n. Is that 1234 => comment still applicable?\n. Nope. They don't always have quotes. Mine doesn't:\n\nName=\"Ubuntu\"\nID=ubuntu\n...\nVERSION_ID=\"14.04\"\n. What's false? Can you use named arguments if sake supports them?\n. Ok but update the message. what is \"1234 =>\" ?\n. Why do you update the branch?\n. You're still not handling value.length() == 1. The check should be <2 instead of ==0\n. Do you still need linq?\n. nit: Trim accepts a char array as argument\n. Do you want to add that attribute even when the value is null?\n. What's a TraceTest?\n. Should you call Single() instead of First()? That will implicitly assert that you have a single attribute of that type\n. This statement will be called only if all the asserts pass (asserts throw). Is that expected?\n. You could build the attributes string right here, no need to iterate over the remaining collection one more time.\n. Also, it would eliminate the need for doing dictionary operations (remove)\n. Nit: Reports.WriteInfo\n. Make an private class for this instead of using a tuple.\n. Why not #if def the entire file?\n. Leave the empty line\n. Use the property's setter\n. I like this :+1: \n. :-1: This doesn't allow IApplicationEnvironment to be injected anymore\n. http://www.coderesx.com/roslyn/html/D316757D.htm\n\"Escapes non-printable characters.\" <- is this what you want?\n. I don't think this should happen in the project reader. The reader should contain the raw value\n. Always use brackets around if's body\n. Suggestion for message: \"Cannot create instance of {type} because the current host doesn't support dependency injection\"\n. What if none exists?\n. ",
    "tugberkugurlu": "bummer. Any reason why? It'd be great to have the following ability for console applications:\n```\npublic class Program\n{\n    private readonly ILoggerFactory _loggerFactory;\npublic Program(ILoggerFactory loggerFactory)\n{\n    _loggerFactory = loggerFactory;\n}\n\npublic void Main(params string[] args)\n{\n}\n\n}\n```\n. :thumbsup: good catch!\n. How about getting this value from the git settings? For example the git username?\n. thx!\n. :thumbsup: \nFor example, this was the bare minimum I was happy with: https://github.com/tugberkugurlu/KLoggy/tree/a0f4f96d97e4cda61dbb66f0ef9f6ec52f4e96ff I guess build.cmd, etc. will come with \"kpm init\", correct?\n. @davidfowl :thumbsup: \n. I installed RavenDB.Client manually through nuget.exe:\n\nWhen I do kpm restore after that, it worked:\n\n. :smile: when I looked at the response body through fiddler, I thought about this but assumed it's already implemented :smile: \n. I have been using kpm pack --out with a relative path for a while. It seems to be working well. I have just tried it out again with 1.0.0-beta1-10494 (CoreCLR): kpm pack --out ..\\..\\artifacts. Worked like a charm.\n\n. \n\n. Is this in? I was expecting to see -g switch for install command but I cannot :disappointed: \n\nZ:>kpm help install\nUsage: kpm install [arguments] [options]\nArguments:\n  [name]     Name of the dependency to add\n  [version]  Version of the dependency to add, default is the latest version.\n  [project]  Path to project, default is current directory\nOptions:\n  -s|--source           A list of packages sources to use for this command\n-f|--fallbacksource   A list of packages sources to use as a fallback\n  -p|--proxy         The HTTP proxy to use when retrieving packages\n  --no-cache                  Do not use local cache\n  --packages                  Path to restore packages\n  --ignore-failed-sources     Ignore failed remote sources if there are local pa\nckages meeting version requirements\n  --quiet                     Do not show output such as HTTP request/cache info\nrmation\n  -?|-h|--help                Show help information\nZ:>\n\nI am on kpm version 1.0.0-beta4-11117.\n. @victorhurdugaci Is there a sample for this feature somewhere or doc? I made kpm commands install <package-name> work but I am assuming it doesn't behave as I expected :disappointed: \n. @victorhurdugaci I am trying to install xunit.runner.kre package. It installs but I cannot use it globally from the command line buy running xunit.runner.kre.\nI am expecting for the library I installed available globally for me to use (if it's a console application). For example, when I run npm install azure -g, azure command is available for me globally in nodejs world.\nDid I understand the behavior of this feature wrong?\n. @victorhurdugaci Thanks! \nOK, I created a project with a command and packed it. It looks like this:\n\nI ran the kpm commands install as below:\n\nI still don't have k-http under my path. I tried this on kpm version 1.0.0-beta4-11117.\n. I guess I figured it out. It strangely installs the script under C:\\Users\\tugberk.ugurlu\\bin instead of C:\\Users\\tugberk.ugurlu\\.kre\\bin. I am assuming it should be C:\\Users\\tugberk.ugurlu\\.kre\\bin because it is what I have inside $env:PATH.\nTrying with version 1.0.0-beta4-11134 and it still gets it under C:\\Users\\tugberk.ugurlu\\bin.\n. yes, to be able to run the tests and other utilities that I would potentially create which I need to run during the build process such as PageGenerator here.\nDoing this for now: https://github.com/tugberkugurlu/psake-sample/blob/f27c758a0ec51d5692d9657ec1fa7f7326f92063/scripts/Core/k.ps1#L45-L60\n. I was thinking about something like k test --appbase \"c:\\dev\\foo\\bar\".\n. pass the option before the command, maybe? I'm embarrassingly :blush: asking because when I run k -?, I can see other options:\n\nUsage: k [options] [command]\nOptions:\n --watch                          Watch file changes\n --packages          Directory containing packages\n --configuration   The configuration to run under\n --port                     The port to the compilation server\n -?|-h|--help                     Show help information\n --version                        Show version information\nCommands:\n run  Run application\n\nI was just assuming that appbase would be one of these but you're the boss :smile: \n. Ah, I see. setting the environment variable is working for me (at least for now) :smile: \n. First of all, great issue description! \nBesides the fact that I don't like to use nuget for everything, I also don't like the fact that kpm pack will handle this. If it's going to, I want it to generate a web deploy package, too because why not then :)\nI think these are two seperate domains IMO. After the pack operation is completed, one can easiliy create a nuget package over the artifacts. It doesn't have to be baked into kpm pack. \n. To be clear with my idea: I'm not discussing whether NuGet has the right format for deployment or not. I am only against the idea that kpm pack would be responsible generating a specific deployment package (.nupkg file, whatever web deploy uses, etc.).\n. Doesn't this work? http://blogs.msdn.com/b/tomholl/archive/2014/09/22/deploying-multiple-virtual-directories-to-a-single-azure-website.aspx\n\nOn 25 Nov 2014, at 09:51, hfjallemark notifications@github.com wrote:\nBefore ASP.NET 5 it was done just like described in this article. This worked when everything was deployed within one directory (content files and bin folder together).\nNow they are deployed into two separate folders. The content files (wwwroot) ends up where they should (in the subfolder defined in the publish settings) but the approot ends up in the root, hence being replaced every time a new application is published.\n\u2014\nReply to this email directly or view it on GitHub.\n. Sorry, it seems that you already indicated that :smile:\nOn 25 Nov 2014, at 09:51, hfjallemark notifications@github.com wrote:\nBefore ASP.NET 5 it was done just like described in this article. This worked when everything was deployed within one directory (content files and bin folder together).\nNow they are deployed into two separate folders. The content files (wwwroot) ends up where they should (in the subfolder defined in the publish settings) but the approot ends up in the root, hence being replaced every time a new application is published.\n\u2014\nReply to this email directly or view it on GitHub.\n. :+1: for the issue.\nDisadvantage: if you remove that framework, the app will fail.\n\nIs it possible to distribute the framework stuff along with the command installation? E.g. when you install commands of the foo package, install the framework 1.0.0 in a place where only this app knows. Sounds like a bad idea but what do you guys think?\nAlso, what does nodejs do with global installs?\n. Is there a specific release date determined for this? I am looking into doing a few spikes on our command line tools to see how we would ship this way but I am pretty sure we don't want users to manage runtime dependency stuff (e.g. figure out which version do I have, do I need to switch runtime, etc.). \nWhat we would want to have:\nAs long as the user has dnvm, the command-line tool should be installed happily. Afterwards it should run even if the user has no runtime installed under ~/.dnx/runtimes, which piratically means to be able to ship the runtime along with the command-line app and scope that runtime just for this app usage, don't make it available to anyone else.\n. @muratg awesome, thanks for the update :smile: \n. @davidfowl how will global installs work in dotnet CLI world as the commands will be removed?\n. Nice, I will definitely give it a go!\n. I was not able to build the FixGlobalInstall branch. Getting this (obviously this is screenshot is not gonna be helpful):\n\nAre you guys interested in getting the entire build log?\n. @victorhurdugaci nice, will try now!\n. I am still getting build errors :disappointed: \n\nI believe I am on the right commit:\n\nI am on 1.0.0-beta4-11257, clr, x86.\n. oh, dear! I didn't even know that :smile: Should have read the readme first :smile: build is working now.\n. OK, new problem :smile: ran build dev-install, I am using the right thing:\nActive Version           Runtime Architecture Location\n------ -------           ------- ------------ --------\n       1.0.0-beta4-11249 clr     x86          C:\\Users\\tugberk.ugurlu\\.dnx\\r...\n       1.0.0-beta4-11249 coreclr x86          C:\\Users\\tugberk.ugurlu\\.dnx\\r...\n       1.0.0-beta4-11257 clr     x86          C:\\Users\\tugberk.ugurlu\\.dnx\\r...\n  *    1.0.0-dev         clr     x86          C:\\Users\\tugberk.ugurlu\\.dnx\\r...\n       1.0.0-dev         coreclr x86          C:\\Users\\tugberk.ugurlu\\.dnx\\r...\n       1.0.0-dev         mono                 C:\\Users\\tugberk.ugurlu\\.dnx\\r...\nbut I don't have kpm, dnx under my path as the build artifacts doesn't have them. Tried to copy kpm from the other runtime versions but it still need dnx.exe.\n. I believe so:\n\n\"C:\\Users\\tugberk.ugurlu.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-dev\\bin\" doesn't contain kpm and dnx.exe.\n. @victorhurdugaci Jabbr?\n. I was able to get it building (had to rename xunit.runner.kre to .aspnet) but I cannot get the project building now. Here is the version I am trying: https://github.com/tugberkugurlu/k-http/blob/92681b7bbf49c4c55a74f1b418b489cede1dddc1/src/k-http/program.cs\nGetting this:\n\nwhich is weird. Any clue? it says I am on dnx 1.0.0-t150313204748 (which is a dev build).\n. All looks fine. I don't see the issue I was seeing on #1287 and  #1267.\nAm I allowed to use :shipit:? :trollface: \n. @dougbu, @davidfowl So, does this mean that we shouldn't do this as well? :smile: \nAlso, it was able to get the packages from the cache when I cleared the local sources. Is that a different cache?\n. Unsupported,Version=v0.0 thing is there because I modified the nupkg file with NuGet Package Explorer. I generated a new package, it pushed it to nuget.org again with correct framework support but symbol sources push failed again.\n. @muratg yes, that's correct. Thx!\n. :+1: \n. I ran dnu list under C:\\Users\\Tugberk\\.dnx\\bin\\packages\\k-http\\0.1.0-beta-003\\app and got this output:\n```\nListing dependencies for app (C:\\Users\\Tugberk.dnx\\bin\\packages\\k-http\\0.1.0-be\nta-003\\app\\project.json)\n[Target framework DNX,Version=v4.5.1 (dnx451)]\nFramework references:\n  framework/Microsoft.CSharp 4.0.0.0\n  framework/mscorlib 4.0.0.0\n  framework/System 4.0.0.0\n  framework/System.Collections.Concurrent 4.0.0.0\n  framework/System.Core 4.0.0.0\nPackage references:\n* k-http 0.1.0-beta-003\n  Microsoft.AspNet.FeatureModel 1.0.0-beta6-11563\n  Microsoft.AspNet.FileProviders.Abstractions 1.0.0-beta6-11461\n  Microsoft.AspNet.FileProviders.Physical 1.0.0-beta5-11366\n  Microsoft.AspNet.Hosting 1.0.0-beta5-11785\n  Microsoft.AspNet.Hosting.Abstractions 1.0.0-beta6-11920\n  Microsoft.AspNet.Hosting.Server.Abstractions 1.0.0-beta6-11920\n  Microsoft.AspNet.Http 1.0.0-beta5-11469\n  Microsoft.AspNet.Http.Abstractions 1.0.0-beta6-11563\n  Microsoft.AspNet.Http.Extensions 1.0.0-beta6-11563\n  Microsoft.AspNet.Http.Features 1.0.0-beta6-11563\n  Microsoft.AspNet.Server.WebListener 1.0.0-beta6-12244\n  Microsoft.AspNet.StaticFiles 1.0.0-beta6-11995\n  Microsoft.AspNet.WebUtilities 1.0.0-beta5-11469\n  Microsoft.Framework.Caching.Abstractions 1.0.0-beta6-11433\n  Microsoft.Framework.Configuration 1.0.0-beta6-11405\n  Microsoft.Framework.Configuration.Abstractions 1.0.0-beta6-11405\n  Microsoft.Framework.Configuration.Binder 1.0.0-beta6-11405\n  Microsoft.Framework.ConfigurationModel 1.0.0-beta5-11240\n  Microsoft.Framework.ConfigurationModel.Interfaces 1.0.0-beta5-11240\n  Microsoft.Framework.DependencyInjection 1.0.0-beta5-11269\n  Microsoft.Framework.DependencyInjection.Abstractions 1.0.0-beta6-11434\n  Microsoft.Framework.DependencyInjection.Interfaces 1.0.0-beta5-11269\n  Microsoft.Framework.Logging 1.0.0-beta5-11335\n  Microsoft.Framework.Logging.Abstractions 1.0.0-beta6-11426\n  Microsoft.Framework.Logging.Console 1.0.0-beta6-11426\n  Microsoft.Framework.OptionsModel 1.0.0-beta6-11403\n  Microsoft.Framework.Runtime.Abstractions 1.0.0-beta5-11739\n  Microsoft.Framework.Runtime.Interfaces 1.0.0-beta5-11611\n  Microsoft.Framework.WebEncoders 1.0.0-beta6-11563\n  Microsoft.Framework.WebEncoders.Core 1.0.0-beta6-11563\n  Microsoft.Net.Http.Headers 1.0.0-beta6-11563\n  Microsoft.Net.Http.Server 1.0.0-beta6-12244\n  Microsoft.Net.WebSockets 1.0.0-beta6-12244\n  Newtonsoft.Json 6.0.6\n```\nAs you can see, some dependencies are being resolved to beta6 packages.\n. Hmm, looking inside the NuGet package, the project.lock.json file hasn't been packed. Is it possible that I am seeing this issue as the dependency I use can have a dependency with a relative version and it's being resolved on the fly?\n. OK but it is confusing a LOT :smile:\n. If that is the case, I think IApplicationEnvironment is a bad name to use here:disappointed:\nAlso, What is the IRuntimeEnvironmet is for then? And why would I ever want to get the dnx-clr-win-x86.1.0.0-beta8-15618\\bin\\lib\\Microsoft.Dnx.Tooling path (which is the assembly that runs the build I assume)?\n. I see and fair enough. However, I still think it's confusing. Just my \u00a30.02.\nSo, if I use IApplicationEnvironment inside the my project (e.g. getting it injected into Startup class), is it going to get me the path of the application? If not, what is the way to get project context injected? I wasn't able to find something like IProjectEnvironment or anything similar.\n. huh?\n. So, no DI in console applications to my Program class? maybe I am misunderstanding this. Would be good to clarify.\n. > We want to be compatible with regular Program.Main entry points.\n@davidfowl does this also mean that Main method cannot return Task or Task<int> anymore?\n. I prefer Debug as default for pack/build/publish commands. Reason is that I will type those commands through command line when I want to produce the output locally which is for dev/test reasons. I will type --configuration Release once when I am writing the script that will run on CI Server.\n. @jskeet to unblock yourself for now, you can write a compile module to add this option if I am not mistaken. I am not entirely familiar with the feature you are referring to but it should be similar to below even if it's not the correct one:\n``` csharp\nusing Microsoft.Dnx.Compilation.CSharp;\nnamespace CompileModuleSample\n{\n    public class OverflowCheckCompilationModule : ICompileModule\n    {\n        public void BeforeCompile(BeforeCompileContext context)\n        {\n            var optionsOverflowCheck = context.Compilation.Options.WithOverflowChecks(true);\n            context.Compilation = context.Compilation.WithOptions(optionsOverflowCheck);\n        }\n    public void AfterCompile(AfterCompileContext context) { }\n}\n\n}\n```\nThere are several way to activate compile module. One of them is to stick it under compiler/preprocess folder for your DNX project, like I do here and the other one is to explicitly tell the project structure to locate it.\n. I was going to ask the same :) let me know where and I can move this there.\nTugberk\nSent from my iPhone - excuse the terseness and typos\n\nOn 2 Mar 2016, at 18:28, Murat Girgin notifications@github.com wrote:\n@yishaigalatzer Should this be moved to nuget/home?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "dougbu": "Right.  Would be great for builds to work even if we leave TARGET_FRAMEWORK lying around in the environment, testing only those projects that have a k10 configuration in @AndriySvyryd's example.\n. Right.  Would be great for builds to work even if we leave TARGET_FRAMEWORK lying around in the environment, testing only those projects that have a k10 configuration in @AndriySvyryd's example.\n. @natemcmaster does dnu restore --quiet not work for you?\n. Is the Visual Studio test execution engine running?  Look for vstest.executionengine.x86.exe in Task Manager.  VS has an option (Test -> Keep Test \n. Is the Visual Studio test execution engine running?  Look for vstest.executionengine.x86.exe in Task Manager.  VS has an option (Test -> Keep Test \n. Meant to delete my comment...\n. Meant to delete my comment...\n. WFM but do we have engineering guidance on whether and how best to use these new features?\n. WFM but do we have engineering guidance on whether and how best to use these new features?\n. Any update on this issue?\nFYI my workaround was:\n1. copy .resx files into the new ASP.NET Core 5.0 project directory because nothing in project.json extends the files ResxResourceProvider processes. (copying the files is not a viable workaround except in the very short term.)\n2. execute .\\build.cmd resx to create a new .designer.cs file since one original doesn't use the resource names ResxResourceProvider produces.\n3. remove all the extra .resx files the previous step generated :frowning: \n4. update the \"code\" array in project.json to use the new .designer.cs file\n. Any update on this issue?\nFYI my workaround was:\n1. copy .resx files into the new ASP.NET Core 5.0 project directory because nothing in project.json extends the files ResxResourceProvider processes. (copying the files is not a viable workaround except in the very short term.)\n2. execute .\\build.cmd resx to create a new .designer.cs file since one original doesn't use the resource names ResxResourceProvider produces.\n3. remove all the extra .resx files the previous step generated :frowning: \n4. update the \"code\" array in project.json to use the new .designer.cs file\n. See #828 as well.  kpm restore --quiet hides everything about packages that could not be found.\n. See #828 as well.  kpm restore --quiet hides everything about packages that could not be found.\n. @muratg the normal --quiet behaviour is to display minimal information but still warnings and errors.  this makes those errors and warnings much more visible.\nmany tools support distinct --nologo, --quiet, and --silent options for different output levels.  e.g. the latest xUnit runner has two of these.\n. @muratg the normal --quiet behaviour is to display minimal information but still warnings and errors.  this makes those errors and warnings much more visible.\nmany tools support distinct --nologo, --quiet, and --silent options for different output levels.  e.g. the latest xUnit runner has two of these.\n. All sub-commands except kpm.cmd add support --quiet.  So could make --quiet a global option and reduce the add output somewhat when that option is used.  But either ignoring option placement relative to the sub-command or only supporting options after the sub-command would better match expectations.\n. All sub-commands except kpm.cmd add support --quiet.  So could make --quiet a global option and reduce the add output somewhat when that option is used.  But either ignoring option placement relative to the sub-command or only supporting options after the sub-command would better match expectations.\n. right though \"unlike say an NRE in klr.exe\"\n. right though \"unlike say an NRE in klr.exe\"\n. what bug?  I'm talking about user mistakes and compilation errors.\n. what bug?  I'm talking about user mistakes and compilation errors.\n. perhaps.  another option is to avoid throwing an Exception when a \"normal\" user / compilation / ... error is hit.  that would leave exceptions for less-symbolic bugs.\n. perhaps.  another option is to avoid throwing an Exception when a \"normal\" user / compilation / ... error is hit.  that would leave exceptions for less-symbolic bugs.\n. is Environment.Exit(int) available everywhere we care about?  if not, this is open source and I'm sure someone has a solution :smiling_imp:\n. is Environment.Exit(int) available everywhere we care about?  if not, this is open source and I'm sure someone has a solution :smiling_imp:\n. :birthday: :balloon: :tada: :dancers: ...\n. :birthday: :balloon: :tada: :dancers: ...\n. the issue is not fixed.  for example, if I add\n\"scripts\": {\n        \"prebuild\": [\n            \"\\\"C:/Program Files (x86)/Git/bin/cat\\\" project.json\"\n        ]\n    }\nto a project.json and kpm build --quiet in the containing folder, the output is\n'C:\\Program' is not recognized as an internal or external command,\noperable program or batch file.\nThe 'prebuild' script failed with status code 1.\nhas this bug been triaged and assigned to a milestone?\n. the issue is not fixed.  for example, if I add\n\"scripts\": {\n        \"prebuild\": [\n            \"\\\"C:/Program Files (x86)/Git/bin/cat\\\" project.json\"\n        ]\n    }\nto a project.json and kpm build --quiet in the containing folder, the output is\n'C:\\Program' is not recognized as an internal or external command,\noperable program or batch file.\nThe 'prebuild' script failed with status code 1.\nhas this bug been triaged and assigned to a milestone?\n. @muratg OK I'll update my old branches...\n. @muratg OK I'll update my old branches...\n. Per offline conversation with @davidfowl, postponing to Beta 6. Need to research Linux / Mac failures with fix (PR #1931) in place.\n. Per offline conversation with @davidfowl, postponing to Beta 6. Need to research Linux / Mac failures with fix (PR #1931) in place.\n. 90f1f03\n. > kpm build support[s] multiple configurations in one build run\nshould add at least a prebuild.perconfiguration (sample name) script since prebuild is executed just once and repeating it may mess up other uses.  also recommend adding prebuild.perframework which would execute once per configuration : target framework pair.\nI'll send a PR out containing this fix shortly.\n. /cc @troydai, @davidfowl \n. @davidfowl OK in general.  I didn't realized these two bugs (both without an assigned milestone) had been triaged.  Could you please let me know offline who's on the triage team?\nSeparately, any objection to leaving the bugs assigned to me?  I'll resurrect this PR or the commits it contains when the bugs get milestones.\n. - thought #547 was about placement of options, not the sub-commands themselves?\n  - are you saying we internally treat help (which looks like a sub-command) as an alias for --help?  that's not obvious even from the help\n- even the second bullet?\n. adding a lot of public interfaces, classes, and members.  why don't they have doc comments?\n. :watch:\n. @muratg easiest way to repro is to delete your packages directory, clean, and then run .\\build.cmd --quiet default or kpm restore --quiet in an MVC repo.  deleting packages directory just increases opportunities for a conflict -- doesn't cause the problem here.\n. > unable to utilize\n@NTaylorMullen what are the symptoms when C has a build-time dependency on B and B shares *.cs (i.e. the B package contains only empty assemblies) and describes a dependency on A in its .nuspec?\n. @glennc main issue is that errors don't show up when I expect; kpm restore appears to work but kpm build fails when project.json and actual folder don't exactly match.\n. whether or not this breaks NuGet.redirect.config, it will definitely break local caches e.g. $env:userprofile\\.nuget\n. well, as @pranavkm said and I made more definite\n\nIt's ~~probably~~ useful for testing KoreBuild\n\nis that no longer a valid scenario?\n. see also aspnet/DNX#1190.  it only takes one process and a large-ish repo for problems to occur at least some of the time.\n. why are errors that occur in script (e.g. prerestore) execution not included in the summary?\n. :watch: \n. :shipit: \n. fyi I've been using the following workaround, updating the target version each time\npushd .\\artifacts\\build\ndir -dir -name|% {\n  cp $_/dnx451/$_.pdb $env:userprofile/.dnx/packages/$_/6.0.0-t150318041706/lib/dnx451/ }\ndir -dir -name|% {\n  cp $_/dnxcore50/$_.pdb $env:userprofile/.dnx/packages/$_/6.0.0-t150318041706/lib/dnxcore50/ }\npopd\n. :shipit: lgtm but I didn't check if this project contains additional files missing their copyrights\n. lgtm\n. @troydai to avoid confusing people reading only commit descriptions, please refer instead to the fixtures.  collections in themselves tend to slow things down (requiring everything in the collection to run serially) but the fixture avoids repetitious setup.\n. This PR changes a couple of scripts but not the PublishRoot or ScriptExecutor classes that contain hard-coded /bin/bash strings. To enable DNX tests, would also need to change a couple of methods in DnuPublishTests and DnuRestoreTests.\n. Superceded  by #2066\n. For example, I had a temporary network glitch which convinced dnu that Microsoft.AspNet.Razor did not exist. (Fact that failure seems to have been cached is a separate issue.)  Until I deleted $env:localappdata\\dnu\\cache, dnu restore --lock consistently reported:\nRestoring packages for C:\\dd\\dnx\\Universe\\Mvc\\test\\WebSites\\RoutingWebSite\\project.json\nUnable to locate Microsoft.AspNet.Razor >= 4.0.0-beta5-11462\nWriting lock file C:\\dd\\dnx\\Universe\\Mvc\\test\\WebSites\\RoutingWebSite\\project.lock.json\nRestore complete, 730ms elapsed\n. I normally use the volatile feed. So this would have been with the latest CLR runtime as of yesterday morning.\n. Sorry, I deleted $env:localappdata\\dnu\\cache to work around this problem. Not sure how to force the problem to happen again. But, on your end, it should be possible to corrupt the cache correctly to reproduce this bug.\n. /cc @davidfowl \n~~Any suggestions on unit / integration / functional testing of scripts? I don't see anything in this repo at the moment.~~\n. @davidfowl since you like to look at individual commits, I rebased and added a couple more :smiley_cat: \nLatest version is more resilient and I've tested it numerous ways -- manually. ~~(Don't seem to have test infrastructure in place to automated anything here.)~~\n. Rebased again and added tests.\n@davidfowl ~~this bug is for Beta 5.~~\n. @davidfowl Travis builds now successful ~~because all new tests are disabled on Mac and Linux~~. AppVeyor build queued; no idea when it will start but local verify builds are fine.\n. Should have mentioned: No regressions on Mac or Linux ~~i.e. I disabled only my new tests there~~.\n. @davidfowl rebased, updated, and working on Linux. (Not sure why the Travix-ci/pr build hung but the push build succeeded.)\n. 90f1f03\n. /cc @troydai \n. 4cea4cc\n. :watch: \n. :shipit: \n. @zhmap you likely don't have node and npm installed but your project.json file says npm install is a command to execute before or after dnu restore. Either add node and npm to your Docker setup or remove the offending entry from project.json's scripts section.\n. @josteink the Travis build failed because dnu restore failed, which it sometimes does on Linux.\n@jasonwilliams200OK am I correct #1756 can be closed? Looks like this PR changes every file that one does (did).\n. @jasonmalinowski this LGTM but not to Travis. I suspect something (that I'm missing) is off with the changes in ScriptExecutor or DnuRestoreTests. Probably best to build on some Linux system and see exactly what works and what doesn't.\nRestoring packages for /tmp/5bp56xqm.dd2/Project Name/project.json\nExecuting script 'prerestore' in project.json\n/usr/bin/env: bash --restricted: No such file or directory\nThe 'prerestore' script failed with status code 127.\nErrors in prerestore\n    The 'prerestore' script failed with status code 127.\n   Microsoft.Framework.PackageManager.DnuRestoreTests.DnuRestore_ExecutesScripts(flavor: \"mono\", os: null, architecture: null) [FAIL]\n      Assert.Equal() Failure\n      Expected: 0\n      Actual:   1\n      Stack Trace:\n           at Microsoft.Framework.PackageManager.DnuRestoreTests.DnuRestore_ExecutesScripts (System.String flavor, System.String os, System.String architecture) [0x00000] in <filename unknown>:0 \n...\n. FYI this PR covers some build issues and some product issues. But even after this and changing build.sh in all aspnet repos, we will not have a product working end-to-end on FreeBSD.\nThe node.js situation looks inconsistent at best. For example a number of the modules gulp and grunt depend on (say dateformat) also use /bin/bash.\n. @jasonwilliams200OK (yup, that's the Jason I meant :smiley_cat:) Do not disable this test. It's one of the few that exercises script execution. Without it we may hit failures on the second build after your change goes in.\nI suggest removing --restricted from that embedded script. I included that for some definition of \"safety\", not because it was mandatory.\n. Oh, I'm agreeing with you. Good.\n. @jasonwilliams200OK Travis is failing for reasons completely unrelated to this PR. Wait a bit while our dev branches settle down. @davidfowl or I will let you know...\n. Yeah, that happened finally earlier today. Sorry we didn't let you know.\nI'll merge i.e. :shipit: this for you.\n. 2c3d535\n. Many thanks @jasonwilliams200OK \n. @jasonwilliams200OK @davidfowl do we have an all-up FreeBSD or bash location issue in one of the repos? Hoping we're tracking making the build.sh changes in all the Universe repos somewhere...\n. @jasonwilliams200OK great, those PRs cover the basics. The mundane part is about updating build.sh in aspnet/AntiForgery, aspnet/WebSockets, and everything in-between. And an issue might help track the four main PRs 'til they are all closed.\nNote we have scripts to update most of the repos. Still mundane but less so. Just need to apply those scripts over the next few days...\n. This is a dnvm incompatibility with latest DNX scripts. I'm working on it.\n. Latest dnvm.sh on aspnet/Home repo contains necessary fix. Execute dnvm update-self then . .dnx/dnvm/dnvm.sh. (The dnvm update-self sources the new file but that's in a separate process :frowning:) Unfortunately the DNX bits you downloaded are likely broken. Can either set all the executable bits or (simpler) rm -r .dnx/runtimes; dnvm upgrade; dnvm upgrade -u to get the latest stable and unstable bits.\n. FYI, commit that should have gone in after dnvm repo changes: 2c3d535\ndnvm repo changes:\n- aspnet/dnvm@ad8fdd9 (use /usr/bin/env)\n- aspnet/dnvm@85653d8 (fix bootstrapping issue in above)\n- aspnet/dnvm@d9713ee (another attempted fix, reverted in next commit)\n- aspnet/dnvm@4bc5e73 (pass enough characters for grep to succeed)\n. See also PRs aspnet/dnvm#295 and #2066\n. :shipit: \nGood thing at least a few special characters are shared between bash and cmd :smiley_cat: \n. > why are quotes needed?\nWere not needed before because we weren't executing scripts using a shell on Linux. Now that scripts work the same way (a vague approximation at least) on Windows and Linux, need to disable globbing of the input parameter and leave that to batchcopy.sh.\n. For example Travis logs now show expected output during build stage:\nExecuting script 'postbuild' in project.json\nCopy From: /home/travis/build/aspnet/dnx/src/Microsoft.Framework.Runtime.Loader/bin/Debug/dnx451/*.*\n       To: /home/travis/build/aspnet/dnx/src/Microsoft.Framework.Runtime.Loader/../../artifacts/build/dnx-clr-win-x86/bin\nCopy From: /home/travis/build/aspnet/dnx/src/Microsoft.Framework.Runtime.Loader/bin/Debug/dnx451/*.*\n       To: /home/travis/build/aspnet/dnx/src/Microsoft.Framework.Runtime.Loader/../../artifacts/build/dnx-mono/bin\nCopy From: /home/travis/build/aspnet/dnx/src/Microsoft.Framework.Runtime.Loader/bin/Debug/dnxcore50/*.*\n       To: /home/travis/build/aspnet/dnx/src/Microsoft.Framework.Runtime.Loader/../../artifacts/build/dnx-coreclr-win-x86/bin\nAnd AppVeyor log shows Windows script is a bit noisier than Linux but unchanged with this change:\nExecuting script 'postbuild' in project.json \nrun: xcopy /F /Y /I C:\\projects\\dnx\\src\\Microsoft.Framework.Runtime\\bin\\Debug\\dnx451\\*.* C:\\projects\\dnx\\src\\Microsoft.Framework.Runtime\\..\\..\\artifacts\\build\\dnx-clr-win-x86\\bin \nC:\\projects\\dnx\\src\\Microsoft.Framework.Runtime\\bin\\Debug\\dnx451\\Microsoft.Framework.Runtime.dll -> C:\\projects\\dnx\\artifacts\\build\\dnx-clr-win-x86\\bin\\Microsoft.Framework.Runtime.dll\nC:\\projects\\dnx\\src\\Microsoft.Framework.Runtime\\bin\\Debug\\dnx451\\Microsoft.Framework.Runtime.pdb -> C:\\projects\\dnx\\artifacts\\build\\dnx-clr-win-x86\\bin\\Microsoft.Framework.Runtime.pdb\nC:\\projects\\dnx\\src\\Microsoft.Framework.Runtime\\bin\\Debug\\dnx451\\Microsoft.Framework.Runtime.xml -> C:\\projects\\dnx\\artifacts\\build\\dnx-clr-win-x86\\bin\\Microsoft.Framework.Runtime.xml\n3 File(s) copied\nrun: xcopy /F /Y /I C:\\projects\\dnx\\src\\Microsoft.Framework.Runtime\\bin\\Debug\\dnx451\\*.* C:\\projects\\dnx\\src\\Microsoft.Framework.Runtime\\..\\..\\artifacts\\build\\dnx-mono\\bin \nC:\\projects\\dnx\\src\\Microsoft.Framework.Runtime\\bin\\Debug\\dnx451\\Microsoft.Framework.Runtime.dll -> C:\\projects\\dnx\\artifacts\\build\\dnx-mono\\bin\\Microsoft.Framework.Runtime.dll\nC:\\projects\\dnx\\src\\Microsoft.Framework.Runtime\\bin\\Debug\\dnx451\\Microsoft.Framework.Runtime.pdb -> C:\\projects\\dnx\\artifacts\\build\\dnx-mono\\bin\\Microsoft.Framework.Runtime.pdb\nC:\\projects\\dnx\\src\\Microsoft.Framework.Runtime\\bin\\Debug\\dnx451\\Microsoft.Framework.Runtime.xml -> C:\\projects\\dnx\\artifacts\\build\\dnx-mono\\bin\\Microsoft.Framework.Runtime.xml\n3 File(s) copied\nrun: xcopy /F /Y /I C:\\projects\\dnx\\src\\Microsoft.Framework.Runtime\\bin\\Debug\\dnxcore50\\*.* C:\\projects\\dnx\\src\\Microsoft.Framework.Runtime\\..\\..\\artifacts\\build\\dnx-coreclr-win-x86\\bin \nC:\\projects\\dnx\\src\\Microsoft.Framework.Runtime\\bin\\Debug\\dnxcore50\\Microsoft.Framework.Runtime.dll -> C:\\projects\\dnx\\artifacts\\build\\dnx-coreclr-win-x86\\bin\\Microsoft.Framework.Runtime.dll\nC:\\projects\\dnx\\src\\Microsoft.Framework.Runtime\\bin\\Debug\\dnxcore50\\Microsoft.Framework.Runtime.pdb -> C:\\projects\\dnx\\artifacts\\build\\dnx-coreclr-win-x86\\bin\\Microsoft.Framework.Runtime.pdb\nC:\\projects\\dnx\\src\\Microsoft.Framework.Runtime\\bin\\Debug\\dnxcore50\\Microsoft.Framework.Runtime.xml -> C:\\projects\\dnx\\artifacts\\build\\dnx-coreclr-win-x86\\bin\\Microsoft.Framework.Runtime.xml\n3 File(s) copied\n. > I wonder what other scripts we broke\nXRE is the only repo in aspnet that uses the scripts feature in project.json files. And @troydai's change updates all of those files. So nothing within our system.\nHowever now that bash is consistently involved, some who worked around the old system may need to update their project.json files too.\n. > Except you're forgetting all of the people who ever used that feature outside of the ASP.NET team.\nThat's who I meant when I said \"some who worked around ...\". The subset of those people who work only on Linux may have done something that needs a slightly different syntax in their project.json files now.\nThe good news however is that more project.json files can be written to work consistently on Windows and non-Windows machines. For example > in a \"scripts\" command now also works on Linux.\n. @borgdylan see aspnet/Home#798 for more on the Microsoft.AspNet.Server.IIS status.\n. For example,\n1. Change a test class to include something like\nc#\n        private class PrivateClass\n        {\n            public string name;\n        }\n(MVC repo has an example of this as we speak: MutableObjectModelBinderTest in test/Microsoft.AspNet.Mvc.Core.Test includes PersonWithNoProperties which looks like the above sample.)\n2. dnu build --quiet\n3. observe following (expected) warning in the output\nC:\\dd\\dnx\\MVC\\test\\Microsoft.AspNet.Mvc.Core.Test\\ModelBinding\\MutableObjectModelBinderTest.cs(1807,27): warning CS0649: Field 'MutableObjectModelBinderTest.PersonWithNoProperties.name' is never assigned to, and will always have its default value null\n1. dnx . test\nExpected: To see same warning in addition to the test run information.\nObserved: Only the test run information is displayed:\n```\nxUnit.net ASP.NET test runner (32-bit DNX 4.5.1)\nCopyright (C) 2015 Outercurve Foundation.\nDiscovering: Microsoft.AspNet.Mvc.Core.Test\nDiscovered:  Microsoft.AspNet.Mvc.Core.Test\nStarting:    Microsoft.AspNet.Mvc.Core.Test\nFinished:    Microsoft.AspNet.Mvc.Core.Test\n=== TEST EXECUTION SUMMARY ===\n   Microsoft.AspNet.Mvc.Core.Test  Total: 1910, Errors: 0, Failed: 0, Skipped: 0, Time: 3.095s\n``\n. Our build system only executes test projects, never runsdnu buildon them. But warnings in test projects show up in VS. For example the warning described in my first comment would be visible in the Error List. This is an annoying inconsistency I was hoping we could correct withindnx . test`.\nBut :ok: perhaps its better to think of this as a Universe (KoreBuild) gap... Of course we'd have to balance warning discovery against built performance.\nThoughts?\n. Filed aspnet/Universe#248. Given that work, probably fine to put this issue on the backlog.\n. This problem is more general than that one-liner. Help for dnu sources has a number of issues:\n1. Output of dnu sources --help mentions \"Use \"sources [command] --help\" for more information about a command.\" but does not list any (sub-)commands. Where should the user go from here?\n2. dnu sources get --help (should you be so lucky as to discover that sub-command) doesn't work. Instead it throws a System.Exception: TODO: Error: unrecognized argument '--help' and shows a useless stack trace. This conflicts with the general help mentioned in 1.\n3. dnu sources actually (checking source) only supports the single sub-command (get). So why all the mystery? dnu sources get should simply be dnu sources. (Maybe not. dnu sources really should do what dnu feeds does. Changing NuGet terminology while in the midst of a grand unification is counter-productive. I'd expect a command such as dnu fetch-sources to do what the current dnu sources get does.)\nSeparately dnu feeds (again, better-named as dnu sources) has all of the above issues as well. At least there, it's easier to imagine further sub-commands (beyond list) eventually coming e.g. dnu feeds disable ... or (hopefully) dnu sources disable ....\n. :ok: new issues\n- for 2.: #2347\n- for naming side issue: #2348\n. > you could have non-internal shareable code too.\nPerhaps but that only works short term. As soon as something else depends on two assemblies / packages containing the public shared code, the class names become ambiguous.\n. My example was just to show debugging working without changing the global.json file. The symbols part of it was only a detail.\n\nno this isn't that feature\n\nThe feature I expected is the one that just downloads the source matching a reference in a given project.\n\nabout getting source code that you can edit\n\nIf that's the case, why change the current solution? The downloaded repo comes with its own .sln file, at least if it's one of the aspnet repos.\n. See this has been moved to the backlog.\n@glennc still wondering why the message is output at all. Is it ever actionable?\n. Thanks @glennc In addition to being \"not super useful\", the message doesn't hint at the interpretation you just provided.\n. @anfomin see aspnet/Home#798 for more on the Microsoft.AspNet.Server.IIS status.\n. Hmm @davidfowl with the latest dnvm, dnvm install latest -os linux works fine, installing the Mono bits in case I want to publish with them. Probably won't execute but the installation went fine.\nLooks like the main issue here is -r mono versus -os linux. FYI current error for dnvm install latest -r mono is\nUnable to determine an operating system for a mono runtime. You must specify which OS to use with the OS parameter.\nAt C:\\Users\\dougbu\\.dnx\\bin\\dnvm.ps1:284 char:13\n+             throw \"Unable to determine an operating system for a $($runtimeInfo. ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : OperationStopped: (Unable to deter...e OS parameter.:String) [], RuntimeException\n    + FullyQualifiedErrorId : Unable to determine an operating system for a mono runtime. You must specify which OS to\n    use with the OS parameter.\n. Our tracking bug is aspnet/External#33. Lower-level problem of interest is now dotnet/corefx#3258.\n. /cc @muratg \n. b8fc4b2\n. > It's been a long time we consumed CoreCLR builds\n@muratg on a related note, could we pick up a Roslyn build containing the recent fix for aspnet/External#33? That fix isn't included in DNX beta8-15620.\n. FYI on my up-to-date Mint system:\n```\n\ndnu --version\nMicrosoft .NET Development Utility\n Version:      1.0.0-rc1-15775\n Type:         CoreClr\n Architecture: x64\n OS Name:      Linux\n OS Version:   LinuxMint 17.2\n Runtime Id:   linux.LinuxMint 17.2-x64\nuname -a\nLinux GarnetAv6 3.16.0-38-generic #52~14.04.1-Ubuntu SMP Fri May 8 09:43:57 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\n cat /etc/lsb-release\nDISTRIB_ID=LinuxMint\nDISTRIB_RELEASE=17.2\nDISTRIB_CODENAME=rafaela\nDISTRIB_DESCRIPTION=\"Linux Mint 17.2 Rafaela\"\ncat /etc/os-release\nNAME=\"Ubuntu\"\nVERSION=\"14.04.2 LTS, Trusty Tahr\"\nID=ubuntu\nID_LIKE=debian\nPRETTY_NAME=\"Ubuntu 14.04.2 LTS\"\nVERSION_ID=\"14.04\"\nHOME_URL=\"http://www.ubuntu.com/\"\nSUPPORT_URL=\"http://help.ubuntu.com/\"\nBUG_REPORT_URL=\"http://bugs.launchpad.net/ubuntu/\"\n```\n. :shipit: \n. Is this the fix for #2773? Comments don't make it clear.\n. :dancers: \n. Example reaction PR. Remaining Travis failure is just strange.\n\nThis repo will need an additional change to handle K() -> Dnx() rename. Bit unique.\n. /cc @muratg \n. 5b759ee\n. :watch: \n. Suggest closing this and aspnet/Universe#299. We should do #3009 instead.\n. > I am using the apnetbeta8\nActually, you're using Beta 8 packages with the most recent (unstable) RC1 runtime. After setting DNX_FEED, run dnvm upgrade without the -u parameter.\n. I missed the typo in your feed URI. Should be https://www.myget.org/F/aspnetbeta8/api/v2.\n. :ok: with the other problems out of the way, we can focus on Microsoft.Net.Http. This is an older .NET 4.5 package available from NuGet.org but it isn't part of .NET Core, DNX or MVC 6. We do however have MVC 6 Beta 8 packages such as Microsoft.Net.Http.Headers and Microsoft.Net.Http.Headers.Server. Were you looking for one of those?\nIf not please let us know which types you're looking for or use http://packagesearch.azurewebsites.net/ to find what you need.\n. Correct. http://packagesearch.azurewebsites.net/?q=HttpClient also shows that System.Net.Http is the name of the package containing HttpClient.\n. @moozzyk could you have a look? I've rebased this branch and removed the test-only commit @muratg was talking about.\n. > now my CoreClr tests are failing the build\nAlways glad to make failures visible :smiling_imp: \n. @moozzyk rebased and updated. Ready to :ship: ?\n. 1eab366\n. Strange that we can't reproduce the issue on Travis or locally but worth a try. Then we need to get to the bottom of this because real web apps don't run serially.\n. :shipit: \n. The issue here is at least somewhat specific to the DNX repo. Am able to use the same DNX Core version to restore packages for the MVC repo for example.\n. DNX Core version 1.0.0-rc1-16028 picked up System.Net.Http.dll 4.6.23426.0. That fixed the problem.\n. @muratg this can't go in prior to a #3077 fix but could be done for RC1 if you wish.\n. The choice of which dependencies to list beyond the minimum needed for correct compilation and execution is a developer's choice. In most of the ASP.NET 5 / MVC 6 / EF 7 codebase, we have chosen to list only the minimum required. We have occasionally double-checked listed dependencies and removed those referenced transitively.\n. From @OlegKi on November 2, 2015 9:28\nSorry, but \"double-checked listed dependencies\" seems to me not a strong enough rule. By examining of the current dependencies you suppose that the next version of all the dependencies will stay the same. If one follow the rule then the project can be broken after publishing one new version from direct or indirect depended package. Moreover I can imagine that the existing rules of resolving dependencies produce different results depend on the order of recursive resolving of dependencies.\nThe analyse of project.lock.json shows that System.Reflection.Metadata is included (currently) in the 4-th level of dependencies of Microsoft.AspNet.Razor.Runtime.Precompilation and Microsoft.Dnx.Compilation.CSharp.Common. To be exact one have\n```\n\"Microsoft.AspNet.Razor.Runtime.Precompilation/4.0.0-beta8\"\n  \"Microsoft.Dnx.Compilation.CSharp.Abstractions/1.0.0-beta8\"\n    \"Microsoft.CodeAnalysis.CSharp/1.1.0-beta1-20150928-02\"\n      \"Microsoft.CodeAnalysis.Common/1.1.0-beta1-20150928-02\"\n        \"System.Reflection.Metadata\": \"1.1.0-alpha-00014\"\n\"Microsoft.Dnx.Compilation.CSharp.Common/1.0.0-beta8\"\n  \"Microsoft.Dnx.Compilation.CSharp.Abstractions/1.0.0-beta8\"\n    \"Microsoft.CodeAnalysis.CSharp/1.1.0-beta1-20150928-02\"\n      \"Microsoft.CodeAnalysis.Common/1.1.0-beta1-20150928-02\"\n        \"System.Reflection.Metadata\": \"1.1.0-alpha-00014\"\n```\ntogether with direct dependency to System.Reflection.Metadata (in version >= 1.1.0-* or >= 1..-* probably). Thus publishing of any new version of Microsoft.Dnx.Compilation.CSharp.Abstractions, Microsoft.CodeAnalysis.CSharp, Microsoft.CodeAnalysis.CSharp or Microsoft.CodeAnalysis.Common can break the dependency to System.Reflection.Metadata. Isn't so?\nI formulate my question as common question about including dependencies in package.json. The project Microsoft.AspNet.Mvc.Razor.xproj is just an example. Probably placing the question to https://github.com/aspnet/Mvc was wrong and it would be better to place it in some other repository of https://github.com/aspnet (but which one)?\nSorry, but I don't understand why one not includes all modules, which will be used directly in the project. It's not really important, whether the list will contains 9 packages or 90. One can use tools, which scan source code for dependencies (like ReSharper) or which examine the final binary (like IDL, or Fuslogvw.exe, ildasm.exe, NetReflector and so on) to scan for direct dependencies. One can create the tools and include there in the SDK.\nIt seems that the state of cached packages from %userprofile%\\.dnx influence the current building process. It's very dangerous! The request to NuGet repository(s) about metadata information of all direct (or even indirect) used packages could work quick enough. The backend (NuGet service) could makes the resolution of all dependencies based on the metadata of all dependent packages published on NuGet. Why one don't make the request(s) first of all? Only after building the full list of dependencies, based on the latest information from NuGet, one can uses packages from the cache, but only if the exact versions are already cached. Such building process will be free from side effect from existing of old version of packages in the cache (on %userprofile%\\.dnx).\n. Don't mix an issue with building the MVC solution in your environment into your other points here. I can't reproduce that issue and it does not relate to whether or not we should avoid transitive dependencies.\n. @aaron-hammond looks like the -debug switch is doing exactly what's required to start the debugger. Choose the debugger you want in that dialogue and hit Yes.\n. @RehanSaeed am I correct your issue has nothing to do with the DNX_BUILD_VERSION environment variable? If so, please close this issue again and comment on or perhaps reopen NuGet/Home#1486.\n/fyi @emgarten \n. /cc @pranavkm @NTaylorMullen \nThis is just future-proofing our Travis configuration. If agreed I'll apply in all repos using Mono but without the mono key in .travis.yml (that's the majority of our repos).\n. Thx @davidfowl \n. string.Empty instead of @\"\"\n. was a nit (should have said). reason was consistency w/ engineering guidelines\n. Why not share GetScriptVariable()?  The additional variables aren't exposed in prebuild or postbuild because the corresponding fields are reset to null at the correct points.\n. ? \"Produce NuGet packages...\"\n. curious: why can't this be a .kproj anymore?\n. will we need a net45 -> net46 rename in the near future?  might be better to choose names w/o versions now\n. odd to use K_OPTIONS in the kpm script.  should this be DOTNET_OPTIONS since the env variable seems to be used for all dotnet invocations?\n. > why can't this ~~be a~~ use the .kproj anymore?\nboth exist but it's not clear why\n. (manually edited?) .kproj looks mostly fine but this line isn't needed\n. nit: remove useless parentheses\n. teensy nit: if you're wrapping, put each argument on its own line\n. if an ApplicationContext may be shared between threads, probably need a ConcurrentDictionary here\n. nit: simplify and don't go to the dictionary twice:\nc#\n  if (!_plugins.Remove(data.PluginId))\n  {\n    throw new InvalidOperationException(...);\n  }\n. throw if the plugin type doesn't exist?\n. PluginMessageBroker doesn't look expensive to create.  why Lazy?\n. nit: remove blank line\n. nit: wrap more\n. nit: PluginHandlerTest\n. // Arrange, // Act, // Assert throughout\n. nit: remove this line to avoid exceptions if framework ever cleans up IDisposable contexts\n. PluginMessageBrokerTest\n. nit: save as an object then (in // Assert) confirm the type i.e.\nc#\n  var calledWith = Assert.IsType<PluginMessageBroker.PluginMessageWrapperData>(data);\n  Assert.Equal(expectedPluginId, calledWith.PluginId);\n...\n. think // Act starts here but it's not clear\n. suggest same for other places you're doing an unconditional cast in test callbacks\n. nit: \"DoesNotThrow\" indicates an absence only.  suggest \"DoesNotAttemptToCreate\" or \"Ignores\".\n. test shows only that these two ProcessMessage() calls execute without throwing.  need to confirm something deeper.\n. interesting behaviour.  many messaging systems simply ignore messages when destination hasn't been registered.  a rare few store (some) messages in case the destination is registered (soonish).  why is PluginHandler so strict when sending messages (but ignore invalid registration attempts)?\n. they don't follow the overall engineering guidelines?\n. not sure about the half measure.  creating a ConcurrentDictionary and using it as an IDictionary won't prevent some issues e.g. registration races (need GetOrAdd() for that).  let's talk tomorrow about whether to stick with a regular Dictionary or use full breadth of protections ConcurrentDictionary can provide.\n. should \"postpack\" run if \"postbuild\" failed?\nthat is, should this if be inside a separate if (success) block?  if yes, the if nesting could go away.\n. add explicit comparer (StringComparer.Ordinal) here and on line 58 ?  (might not be as common in this repo)\n. - json -> ~~error,~~ package, or failedPackage\n- nit: space after foreach\n. nit: guess I don't really like error. suggest message or errorMessage here.\n. nit: a few long lines get longer in this PR\n. previous code would have bailed out without executing postpack scripts if postbuild scripts failed (see the removed return at old line 204).  now runs those scripts any time earlier steps (i.e. the build) succeed.\nsuggest this if should include success && in the condition or (worse) add _buildOptions.GeneratePackages = false; above line 207.\n. is PlatformHelper.IsMono special case still needed?  RestoreInParallel defaults to false\n. extractDirectory is the DirectoryInfo for targetPath.  as-is this shouldn't do anything.\n. suspect this and a couple of other targetPath references should be using extractPath.  right now the .nupkg is streamed into a file in the extractPath directory.  but files are extracted directly into the targetPath directory and the .nupkg is left around in extractPath.\n. or you can use rimraf (as part of your node installation)\n. Report can be null. Need to use Report?.WriteLine(...)\n. Curious: Why does this have a setter, let alone a public setter?\n. Because i am positive my bash-writing skills are out-of-date and don't have a Linux system to play on. We can follow-up later with additional scripts.\n. :ok: I turned off DNX_TRACE for other added tests in this PR. Will do the same here.\n. As @davidfowl and I discussed, will undo this change.\n. As @davidfowl and I discussed offline, will make restoration of surrounding quotes conditional. Won't be done when parsing commands but will be for scripts.\n. Suggest using Reports.Quiet so that the extra information goes away when --quiet is used.\n. Ick. Run one of the scripts to fix this file up e.g. \\\\GarnetA\\share\\UpdateXProjectFiles\\UpdateXProjectFiles.ps1\n. Ah. So time can run backwards.\n. Could avoid touching the .sln file by pasting 693A73B9-621A-4184-B90C-9B9FF67E8CE8 in here.\n. Fix this .xproj with one of the scripts before checking it in. Or wait for @troydai's PR to fix the same gap.\n. /cc @troydai I fixed the problems in this else block that we discussed today. E.g. code no longer checks for the script file in whatever random directory dnu was executing.\n. Didn't change escapeSequencePiece but it probably should not remove Windows ('^') or Linux ('\\\\') escapes when preserveSurroundingQuotes. Should be fine for now since double quotes are far more common than escaping a single character.\n. Also likely minor but quotedTerm will not keep a (Linux-only) single-quoted argument string together.\n. Don't remove this. It's a test service reference and helps VS load the solution faster.\n. Why attempt to execute chmod on Windows?\n. Curious: What are there rules by which you've chosen IsMono -> IsMono in some places and IsMono -> !IsWindows in others?\n. Definitely safer and results in less code duplication. I'd also have to change #1931 if this went in first :smiling_imp: \n. thx\n. That's possible in the project.json file. But CommandGrammar removes spaces between and before all arguments and ignores the (remote) possibility of an argument that contains more than a correctly-quoted string.\n. Path.Combine() returns the right-hand argument if it is rooted.\n. \"Fast compile\" what?\n. First element in array needs to be split in two. /usr/bin/env is the executable while bash is the first argument.\n. See related issue aspnet/Razor#449. Discussion there was about whether any change was needed. But if the class is useful elsewhere, a shared project makes sense.\n. @davidfowl VS also seems to compile .Sources projects by default. Does that imply we need to keep some of these dependencies? Or should @kichalla disable building the projects in the .sln files (here DNX.sln)?\n. ??\n. Thought we were avoiding Linq in DNX repo?\n. nit: icky missing spaces here and a couple of lines down\n. :ok_hand: \n. This is false because it's useless for DnuTest to do a single project in parallel. (The parameter is testParallel.)\nI'll check again on named arguments. Think that failed last I tried though I see a few named parameters elsewhere.\n. This will execute unconditionally even on machines where dev-install has never run. Should instead change test-package target to create an alias for new runtime and set this environment variable there, just before calls to DnxTest().\n. IsLinux is true on a Mac as well but I'll update the comment.\n. We don't test Mono on Windows. So what's wrong with just [FrameworkSkipCondition(RuntimeFrameworks.Mono)]?\n. Then place an [OSSkipCondition(OperatingSystems.Linux)] in an #if for full CLR.\n. ",
    "jeremymeng": "When downloading zip files it seems working regardless of the casing. However when getting the .nuspec file from the downloaded zip file, it is case-sensitive.  We should give users proper error message instead of a null ref exception.\ncsharp\n        public async Task<Stream> OpenNuspecStreamAsync(PackageInfo package)\n        {\n            using (var nupkgStream = await OpenNupkgStreamAsync(package))\n            {\n                using (var archive = new ZipArchive(nupkgStream, ZipArchiveMode.Read, leaveOpen: true))\n                {\n                    var entry = archive.GetEntry(package.Id + \".nuspec\");\n                    using (var entryStream = entry.Open())\n                    {\n. I am hitting this too, with a nullRef though\n```\n[omitted]\nUsing Package dependency System.Runtime.Loader 4.0.0-beta-23225\nStacktrace:\nNative stacktrace:\n    mono() [0x4b23ac]\n    mono() [0x5089de]\n    mono() [0x428fad]\n    /lib/x86_64-linux-gnu/libpthread.so.0(+0x10340) [0x7f6903cc9340]\n\nDebug info from gdb:\nUnhandled Exception:\nSystem.NullReferenceException: Object reference not set to an instance of an object\n[ERROR] FATAL UNHANDLED EXCEPTION: System.NullReferenceException: Object reference not set to an instance of an object\nubuntu-vm@yu-ubt:~/jeremymeng/PartsUnlimited/src/PartsUnlimitedWebsite$ warning: unable to open /proc file '/proc/36939/status'\nwarning: unable to open /proc file '/proc/36939/status'\nptrace: No such process.\nNo threads.\n``\n. Is dnu/dnx supported on Debian (jessie)? One of our customers is getting the following errors when running beta8dnu help`.\nCould not open /etc/lsb_release. OS version will default to the empty string.\nHis machine doesn't have either /etc/lsb-release or /etc/os-release.\nThere's also posts mentioning that the file /etc/lsb-release is not required by the Linux Standard Base, the command lsb_release is.\n. Circling back.  The missing /etc/lsb-release just prints out an error message, what our customer missing is the libicu dependency.  Even he already has libicu-devtools installed, somehow the libicu52 dependency was missing on his machine.  After he installed that, dnu works on his Debian Jessie machine.\nIs there a list of dependencies and compatible versions?\n. ",
    "HaoK": "why would we want to allow a bunch of Run run RuN RUN commands which all do different things?\n. ",
    "mayurid": "K Pack will also need to drop the right k.ini based on the framework being targeted.\nPublishing will pass that information as it calls K pack\n. Reaching out to Vijay with this now. VS will make the tweaks.\nthanks for looking into this guys\n. Just asked pradeep to pick 442 or newer for tooling checkin.\nsince its early I think by the time he gets in the newer coherence will have the fix... \n@davidfowl: will add a pic today.\n. @Jane: If you are referring to it still showing K it needs a new tooling build for this change.\nI assume you didn't have the latest tooling trigger build.\n. That issue is already fixed as well in a later build of tooling.\nUnfortunately CI was down so you guys didn't see the build. \n. This is the same behavior for IIS Express as well.\nBasically, I create a Starter Web in VS on Win7/Win2K8 R2, target Core CLR and running the app gives the same error as abobe\n. @muratg : this is the bug we discussed today\n. ",
    "niemyjski": "Yeah, I know :). I just wanted to pull down the source and take a look at it, but was unable to open it in Visual Studio. Really wish I could at least look at the code without going to notepad/github.\n. ",
    "JaneZhouQ": "Validate with Coherence build 0.1-alpha-build-0443 and related tooling drop this afternoon (5/16/2014); it seems that target framework is showing up for the project property page. \n. We used the tooling build Friday afternoon.  To clarify, I was able to see the target framework show up in the drop down box and validated this and double checked with Bala.  This means, the runtime issue is fixed; Tooling still need to set one of them as default though.  @davidfowl, this is not a question, but a comment that runtime bug is resolved.\n. To give more context, I am trying to play with the CTP2 bits for the UE doc update on ASPNet official site.  and notice the above. Glenn said there might be a bug about this already. \n. As Glenn mentioned, the \"kpm restore\" and \"k web\" does not do the same thing, thus when we prescribe to user how to use the sample MVCMusicStore app, it is not right when observe the behavior. \n. ",
    "mfilippov": "Ok, i following repo for fix :smile: \n. Ok I move it issue in coreclr.\n. ",
    "henriksen": "Good stuff! Thanks for creating an issue @filippovma , I had the same issue and figured it was just me not getting it. \n. ",
    "steimntz": "I had the same problem:\ninfo: Exec\ninfo:   program: kpm\ninfo:   commandline: restore\ninfo:   workingdir: /Users/steimntz/Downloads/KRuntime\nwarn: ApplicationName='kpm', CommandLine='restore', CurrentDirectory='/Users/steimntz/Downloads/KRuntime', Native error= Cannot find the specified file\nverbose: Stack trace:\n  at System.Diagnostics.Process.Start_noshell (System.Diagnostics.ProcessStartInfo startInfo, System.Diagnostics.Process process) [0x00000] in <filename unknown>:0\n  at System.Diagnostics.Process.Start_common (System.Diagnostics.ProcessStartInfo startInfo, System.Diagnostics.Process process) [0x00000] in <filename unknown>:0\n  at System.Diagnostics.Process.Start (System.Diagnostics.ProcessStartInfo startInfo) [0x00000] in <filename unknown>:0\n  at View39dc01e35b0045fc9fe0876b9c2312c1+<RenderViewLevel0>c__AnonStorey0.<>m__0 () [0x00000] in <filename unknown>:0\n  at Sake.Engine.Builder.BuilderBase`1[System.Object].CallTarget (System.String name) [0x00000] in <filename unknown>:0\n  at Sake.Engine.Builder.BuilderBase`1[System.Object].StartingTarget (System.String name) [0x00000] in <filename unknown>:0\n  at View39dc01e35b0045fc9fe0876b9c2312c1+<RenderViewLevel0>c__AnonStorey1.<>m__5 () [0x00000] in <filename unknown>:0\n  at Sake.Engine.Builder.BuilderBase`1[System.Object].CallTarget (System.String name) [0x00000] in <filename unknown>:0\n  at Sake.Engine.Builder.BuilderBase`1[System.Object].StartingTarget (System.String name) [0x00000] in <filename unknown>:0\n  at View39dc01e35b0045fc9fe0876b9c2312c1+<RenderViewLevel0>c__AnonStorey1.<>m__6 () [0x00000] in <filename unknown>:0\n  at Sake.Engine.Builder.BuilderBase`1[System.Object].CallTarget (System.String name) [0x00000] in <filename unknown>:0\n  at Sake.Engine.Builder.BuilderBase`1[System.Object].StartingTarget (System.String name) [0x00000] in <filename unknown>:0\n  at View39dc01e35b0045fc9fe0876b9c2312c1+<RenderViewLevel0>c__AnonStorey1.<>m__7 () [0x00000] in <filename unknown>:0\n  at Sake.Engine.Builder.BuilderBase`1[System.Object].CallTarget (System.String name) [0x00000] in <filename unknown>:0\n  at Sake.Engine.Builder.BuilderBase`1[System.Object].StartingTarget (System.String name) [0x00000] in <filename unknown>:0\n  at View39dc01e35b0045fc9fe0876b9c2312c1+<RenderViewLevel0>c__AnonStorey1.<>m__8 () [0x00000] in <filename unknown>:0\n  at Sake.Engine.Builder.BuilderBase`1[System.Object].CallTarget (System.String name) [0x00000] in <filename unknown>:0\n  at View39dc01e35b0045fc9fe0876b9c2312c1+<RenderViewLevel0>c__AnonStorey1.<>m__0 () [0x00000] in <filename unknown>:0\n  at Sake.Engine.Builder.BuilderBase`1[System.Object].CallTarget (System.String name) [0x00000] in <filename unknown>:0\n  at Sake.Engine.SakeEngine.Execute (Sake.Engine.Options options) [0x00000] in <filename unknown>:0\n  at Sake.Engine.SakeEngine.Execute (System.String[] args) [0x00000] in <filename unknown>:0\n  at Sake.Program.Main (System.String[] args) [0x00000] in <filename unknown>:0\n17:11:24 [~/Downloads/KRuntime]\nThanks @filippovma.\n. First all, thanks for your work @davidfowl but do you remember what commit was working for Mac OS X or what changes broke it? Perhaps I may help to fix it.\n. why isn't kpm.sh in the build folder (I mean package/KoreBuild/build) when I run the build script?\n. I saw that into packages/KoreBuild/build/ there is kpm.cmd and kpm.ps1 I can't understand why isn't kpm.sh from the script folder doesn't appear on packages/KoreBuild/build/ when I run build.sh. I want to know this to understand how it works and then I'll be able to help you with kpm.sh.\n. Oh sorry I was confusing.\n. ",
    "zdeneksejcek": "Having the same problem, would be amazing to make it work soon so people like me working on Mac can carry on with playing with this new amazing stuff.\n. As @dmportella already mentioned, what is the reason to maintain two separate implementations, PowerShell will never be ported to Mac/Unix. Wouldn't it be better to implement both in .NET and build it using simple .cmd and .sh? One code, multiple platforms.\nI would be happy too to help.\n. ",
    "lefb766": "It should be better to make another issue to discuss porting kvm. I think some operations done in kvm.ps1 are difficult to perform in Unix shell.\n. I can build DNX successfully with beta4 and mono 3.10.0. Can anyone else confirm this issue remains?\n. I see. I'm looking forward to it.\nCheers!\n. IMHO, it is relatively easy to generate script files that include hard-coded path to the assemblies at install time.\nYou can use heredoc like\n```\ncat << EOF > script.sh\n!/bin/sh\nmono $INSTALL_PATH/foo.dll \"\\$@\"\nEOF\n```\nto generate them.\n. Yes, I'd love to. I'm not familiar with the code base however, so it might take long to find where to fix.\n. Thanks.\n. Now correcting.\n. Tested by replace ~/.dnx/.../Microsoft.Framework.PackageManager.dll with new build, which I felt hard to do. It looked work fine.\nDo I need auto test for it?\n. It goes ok with beta4-11257 and fails with beta4-11268.\n. At least, \"postpack\" runs only if package generation is done successfully. If \"postpack\" needs another condition, \"postpack\" should be solely responsible for that.\n. ",
    "rmarinho": "Great work so far guys, i had the same problem and found this issue that clear me that i wasn't alone, wanted to play with it the bits and see if i could help.\nWill stay tunned for more updates.\n. ",
    "dmportella": "@davidfowl I think the easiest solution for the KVM would be to port the PS script to mono and create a small executable that can run on osx and Linux as we can be sure mono will be there. \nKeeps easily in parallel with the PS script and would run on both platforms.\nI would be happy to start porting that.\n. @davidfowl I agree on your thinking osx and linux is a different case.\nI was suggesting we used managed code only osx and linux and keep the PS scripts for windows.\nAre you saying someone has ported the PS scripts to bash already?\n. ",
    "ghost": "Re writing this as a plain old shell script looks like it could be a bit of a pain. Instead the powershell script could probably be converted to python pretty easily. \nPython is already installed on OSX and most linux distros by default, would that be an acceptable option for the bootstrapper script?\n. @davidfowl, does this mean we will have support for tilde (~) and circumflex accent (^) etc. like npm in dnx world sometime in future? Is there an issue tracking it?\nFrom npm docs - https://docs.npmjs.com/files/package.json#dependencies:\n\nSee semver(7) for more details about specifying version ranges.\n- version Must match version exactly\n- >version Must be greater than version\n- >=version etc\n- <version\n- <=version\n- ~version \"Approximately equivalent to version\" See semver(7)\n- ^version \"Compatible with version\" See semver(7)\n- 1.2.x 1.2.0, 1.2.1, etc., but not 1.3.0\n- http://... See 'URLs as Dependencies' below\n- * Matches any version\n- \"\" (just an empty string) Same as *\n- version1 - version2 Same as >=version1 <=version2.\n- range1 || range2 Passes if either range1 or range2 are satisfied.\n- git... See 'Git URLs as Dependencies' below\n- user/repo See 'GitHub URLs' below\n- tag A specific version tagged and published as tag See npm-tag(1)\n- path/path/path See Local Paths below\nFor example, these are all valid:\njson\n{ \"dependencies\" :\n  { \"foo\" : \"1.0.0 - 2.9999.9999\"\n  , \"bar\" : \">=1.0.2 <2.1.2\"\n  , \"baz\" : \">1.0.2 <=2.3.4\"\n  , \"boo\" : \"2.0.1\"\n  , \"qux\" : \"<1.0.0 || >=2.3.1 <2.4.5 || >=2.5.2 <3.0.0\"\n  , \"asd\" : \"http://asdf.com/asdf.tar.gz\"\n  , \"til\" : \"~1.2\"\n  , \"elf\" : \"~1.2.3\"\n  , \"two\" : \"2.x\"\n  , \"thr\" : \"3.3.x\"\n  , \"lat\" : \"latest\"\n  , \"dyl\" : \"file:../dyl\"\n  }\n}\nURLs as Dependencies\nYou may specify a tarball URL in place of a version range.\nThis tarball will be downloaded and installed locally to your package at install time.\nGit URLs as Dependencies\nGit urls can be of the form:\n\ngit://github.com/user/project.git#commit-ish\ngit+ssh://user@hostname:project.git#commit-ish\ngit+ssh://user@hostname/project.git#commit-ish\ngit+http://user@hostname/project/blah.git#commit-ish\ngit+https://user@hostname/project/blah.git#commit-ish\n\nThe commit-ish can be any tag, sha, or branch which can be supplied as an argument to git checkout. The default is master.\nGitHub URLs\nAs of version 1.1.65, you can refer to GitHub urls as just \"foo\": \"user/foo-project\". Just as with git URLs, a commit-ish suffix can be included. For example:\njson\n{\n  \"name\": \"foo\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"express\": \"visionmedia/express\",\n    \"mocha\": \"visionmedia/mocha#4727d357ea\"\n  }\n}\nLocal Paths\nAs of version 2.0.0 you can provide a path to a local directory that contains a package. Local paths can be saved using npm install --save, using any of these forms:\n../foo/bar\n~/foo/bar\n./foo/bar\n/foo/bar\nin which case they will be normalized to a relative path and added to your package.json. For example:\njson\n{\n  \"name\": \"baz\",\n  \"dependencies\": {\n    \"bar\": \"file:../foo/bar\"\n  }\n}\nThis feature is helpful for local offline development and creating tests that require npm installing where you don't want to hit an external server, but should not be used when publishing packages to the public registry.\n. Thanks. The npm folks added every possible option in there. If NuGet and dnx go with the same approach, it may left some corner cases little buggy (hard to test all possibilities without community feedback), but over time reliability can be assured. While going about it the most defensive way as always (hesitate adding new stuff) only slows down such enhancement opportunities IMO.. and it will take ages to get there!\n. @davidfowl, please consider merging this PR.\n. What is the formal definition of the pattern syntax?\nAnd specifically, what would be a pattern to exclude files which begin with a # character?\n. Hi @2250918808, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.msopentech.com.\n    \n\nTTYL, MSOTBOT;\n. Hi @Andorbal, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.\nTTYL, MSOTBOT;\n. Hi @Andorbal, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.\nTTYL, MSOTBOT;\n. Hi @ellismg, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Matt Ellis). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @choudeshell, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSOTBOT;\n. Hi @BrennanConroy, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brennan Conroy). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @BrennanConroy, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brennan Conroy). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @NTaylorMullen, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Taylor Mullen). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @victorhurdugaci, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Victor Hurdugaci). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @lefb766, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.\nTTYL, MSOTBOT;\n. Hi @ChengTian, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Wei Wang (ASP.NET)). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @anurse, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Andrew Stanton-Nurse). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @ChengTian, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Wei Wang (ASP.NET)). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @tugberkugurlu, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.\nTTYL, MSOTBOT;\n. Hi @tugberkugurlu, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.\nTTYL, MSOTBOT;\n. Hi @anurse, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Andrew Stanton-Nurse). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @BrennanConroy, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brennan Conroy). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @anurse, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Andrew Stanton-Nurse). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @troydai, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Troy Dai). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @BrennanConroy, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Brennan Conroy). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @ChengTian, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Wei Wang (ASP.NET)). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @ellismg, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Matt Ellis). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @ChengTian, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Wei Wang (ASP.NET)). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @troydai, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Troy Dai). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @NTaylorMullen, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Taylor Mullen). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @lefb766, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.\nTTYL, MSOTBOT;\n. Hi @NTaylorMullen, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Taylor Mullen). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @lmeyer2, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSOTBOT;\n. Hi @CGijbels, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSOTBOT;\n. Since 1.0.0-beta6 has been shipped, should the milestone of this issue be pushed to beta7 or beta8?\nAnd regarding https://github.com/aspnet/dnx/milestones, please close the ended milestones:\n\n. Hi @monoman, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. @monoman, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSOTBOT;\n. Hi @moozzyk, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Pawel Kadluczka). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. Hi @gfraiteur, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. @gfraiteur, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSOTBOT;\n. Hi @hishamco, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft Open Technologies, Inc. and real humans are currently evaluating your PR.\nTTYL, MSOTBOT;\n. Hi @salerth, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSOTBOT;\n. Hi @juanfra684, I'm your friendly neighborhood Microsoft Open Technologies, Inc. Pull Request Bot (You can call me MSOTBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.msopentech.com.\n    \nTTYL, MSOTBOT;\n. @juanfra684, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSOTBOT;\n. @dougbu, @josteink, I have opened a PR with all the required changes: https://github.com/aspnet/dnx/pull/2066. PTAL :)\n. @dougbu, yes this supersedes #1756.\n. > Still it breaks travis which means it'll likely break real systems. Why is hardcoding  /usr/bin/env  better?\n@davidfowl, yup it is only one test failing on line 8500 something. However, it passes all tests with this change:\n``` diff\ndiff --git a/test/Microsoft.Framework.PackageManager.FunctionalTests/DnuRestoreTests.cs b/test/Microsoft.Framework.PackageManager.FunctionalTests/DnuRestoreTests.cs\nindex d595847..646677a 100644\n--- a/test/Microsoft.Framework.PackageManager.FunctionalTests/DnuRestoreTests.cs\n+++ b/test/Microsoft.Framework.PackageManager.FunctionalTests/DnuRestoreTests.cs\n@@ -101,7 +101,7 @@ goto argumentStart\n   }\n }\";\n                 scriptContent =\n-@\"#!/usr/bin/env bash --restricted\n+@\"#!/usr/bin/env bash\n set -o errexit\nfor arg in \"\"$@\"\"; do\n```\nOn the flipside, it is preventing us building CoreFX against FreeBSD. Note that we have already submitted these changes to .sh scripts located in Roslyn, CoreFX and CoreCLR repositories. The remaining pieces are aspnet:dnx, aspnet:dnvm, aspnet:Universe and aspnet:Home. I have opened the ditto PRs in all of them. o_0\nShould I apply that patch and leave a TODO there? Later someone with bash expertise can figure out how to deal with this --restricted-mode glitch. :)\n. Thanks @dougbu! Its done. :metal: \n. That was some random interrupt. It built on my fork: https://travis-ci.org/jasonwilliams200OK/dnx/builds/66921589. I have re-pushed, lets see.. :)\n. @dougbu, @davidfowl, seems like you guys have fixed the issue in some dependency. :smile: \nTravisCI build succeeded! :tada: \n. @dougbu, I opened PRs in all repositories :)\naspnet/dnx#2066\naspnet/dnvm#295\naspnet/Universe#238\naspnet/Home#671\n. segment?\n. I wish to exclude files based upon a file pattern. Specifically, need to exclude files beginning with\n  .#\nand \n  #\n. Yes, that worked. Thanks.\n. I've the same problem with the latest beta8 on linux installed in a virtual machine only. the process generate 50 files in the tmp folder. The 2 others linux not virtual restore with success.\n. Same issue https://github.com/aspnet/dnx/issues/3047\n. I'll move it to aspnet/Home, this is closed then.\n. Looks like I managed to fix the problem in the DNX source.\n..\\dnx\\src\\dnx.clr\\HostAssemblyStore.cpp (https://github.com/aspnet/dnx/blob/dev/src/dnx.clr/HostAssemblyStore.cpp)\nChange:\nconst wchar_t* AppDomainManagerAssemblyName = L\"Microsoft.Dnx.Host.Clr, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, ProcessorArchitecture=MSIL\"\nto\nconst wchar_t* AppDomainManagerAssemblyName = L\"Microsoft.Dnx.Host.Clr, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60, ProcessorArchitecture=MSIL, CodeBase=.\";\nWith this fix, when Microsoft.Dnx.Host.Clr is loaded, the codebase is set to the proper runtime directory.\nI\u2019m submitting a pull request for the change.\n. I was finally able to get this working by following the instructions from @munyirik and @KoalaBear84. I am now running an asp.net MVC app on a Raspberry Pi 3. Thanks!\n. @RasberryFan is the firewall on the Pi 3 configured to allow the port? I set my firewall to allow TCP port 5000.\n. :+1: \nBTW, there is 103 commits difference between rc1-update2 tag and dev branch (and it's counting).\nIs there a plan to include those in next version of dnx, if everything is working as expected in dev branch?\n. Thanks @anurse! I am waiting for CLI release. Hope we the upgrade process from dnx->cli for existing projects will be seamless.. as I have written down the custom deployment scripts for Kudu auto-deploy.\n. ",
    "phillijw": "Here is an open source version of powershell for *nix: http://pash.sourceforge.net/\n. ",
    "coder543": "@phillijw While I'm sure there are some uses for pash, I don't think anyone wants it to be a dependency for KRuntime to work on Linux.\nI've been attempting to get it to build on my Lubuntu computer, and I'm getting an interesting error message:\nAttempting to resolve dependency System.Runtime >= 4.0.20.0\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Runtime'\n  GET https://nuget.org/api/v2/FindPackagesById()?Id='System.Runtime'\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.Linq' 5073ms\n  OK https://nuget.org/api/v2/FindPackagesById()?Id='System.Runtime' 5070ms\n  OK https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Runtime' 9160ms\n  OK https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Linq' 9248ms\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/System.Linq/4.0.0.0\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/System.Runtime/4.0.20.0\n  BadRequest https://www.myget.org/F/aspnetvnext/api/v2/package/System.Runtime/4.0.20.0 934ms\n  BadRequest https://www.myget.org/F/aspnetvnext/api/v2/package/System.Linq/4.0.0.0 937ms\nI don't know if anyone else has seen this. It seems to get along pretty well with the nuget dependency management up to this point.\n. ",
    "maartenba": "I guess with ASP.NET now acceptng pull requests this can go in? :)\n. I think #265 incorporates this change + extends it.\n. Yes If @lodejard PR gets accepted. Otherwise no :-)\n. +1 everything should be a NuGet package.\n. @davidfowl Just did a talk on this topic and I believe everything should be a package. Look at any other package manager out there: a library, framework or application are treated exactly the same. Nothing prevents users from pushing anything to NuGet. If you want to push your app, then you should be able to do that imo.\nPerhaps a convention could be made (e.g. a tag that says a ackage is an app) so NuGet repos can filter out or block these if they do not believe the use case (I could imagine NuGet.org not wanting these and responds with \"only libraries are allowed\").\nImagine nuget push myapp.nupkg -Source https://myapp.azurewebsites.net...\n. But apt-get does install MySQL (an app) as wel as all gcc libs. So apps and libs... (just being stubbon here, I see your point there)\n. @tharris29 You would search for .NET 4.0 libraries and install those. Either the repository filters out thins detected as applications, or we expect humans to be smart enough to do that :-) (implementation detail, but the idea would be to sort of make it known that the package is an app and not a lib and work from that.An extra data dimension, so to speak)\n. @tharris29 The server could filter those (just like target framework filtering does now), and it's up to the user to decide if they want to mix package types in one feed or not. Just like today you can create anet35 and net40 feed, or just create one feed containing all.\n. Woohoo!\n\n. FYI, we have identified why MyGet was returning these 503's. A fix has been deployed in the meanwhile which should improve things.\n. We have updated MyGet's behaviour here as well. A 503 is now a proper 503. (deployment with this change planned after the weekend)\n. We've been doing redirects indeed. After seeing this issue, we updated the naked domain (without www) to go directly to our cloud services. Can you give it another go and see if this fixes the behaviour you were seeing?\n. Can you give it another go and see if it's good now?\n. The www-less URL on MyGet is just a convenience and should not be used for feeds. That said, MyGet rewrite rule has been modified to also add full query string.\nPlease mention @maartenba or @xavierdecoster on anything related to MyGet.\n. We've been doing redirects indeed. After seeing this issue, we updated the naked domain (without www) to go directly to our cloud services. Can you give it another go and see if this fixes the behaviour you were seeing?\n. Think this one can be closed?\n. Seems the binary is indeed gone, may have to do with @eilon's retention policy update this morning. Any chance you can re-upload it if needed?\n. SemVer indeed\n. If we return a proper 404, can we still return html?\n. This has been fixed on MyGet side. We now return proper 404 (and empty collection on the above call)\nSide note: the request log above denotes a wrong URL. Instead of /aspnetmaster/FindPackagesById()?id='Boilerplate.Web.Mvc6' it should be /F/aspnetmaster/FindPackagesById()?id='Boilerplate.Web.Mvc6' (note the /F/)\n. ",
    "kekekeks": "Sorry, wrong repo\n. ",
    "balassy": "That's sad :( \nDavid, is there a workaround? How can we do \"kpm restore\"?\nThanks,\n   Gy\u00f6rgy\n. ",
    "xqiu": "semicolon inside string, it's valid.\n. For ease, project.json for VS2015 preview is:\n{\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n    },\n    \"commands\": { \n        \"run\" : \"run\"\n    },\n    \"frameworks\" : {\n        \"aspnet50\" : { },\n        \"aspnetcore50\" : { \n            \"dependencies\": {\n                \"System.Console\": \"4.0.0-beta-22231\",\n                \"System.Globalization\": \"4.0.10-beta-22231\",\n                \"System.Globalization.Extensions\": \"4.0.0-beta-22231\",\n                \"System.Collections\": \"4.0.10-beta-22231\",\n                \"System.Collections.Concurrent\": \"4.0.10-beta-22231\",\n                \"System.Linq\": \"4.0.0-beta-22231\"\n            }\n        }\n    }\n}\n. It's internal bug 1017568, which CoreCLR team didn't find problem and believe is our host problem.\n. I simplified the problem with the following project.json:\n{\n    \"dependencies\": {\n    },\n    \"frameworks\": {\n        \"aspnetcore50\": {\n            \"dependencies\": {\n                \"System.Console\": \"4.0.0-beta-*\"\n            }\n        },\n        \"aspnet50\": {\n            \"dependencies\": {\n                \"System.Data\": \"\",\n                \"System.Data.DataSetExtensions\": \"\",\n                \"System.Runtime\": \"\",\n                \"System.Xml\": \"\",\n                \"System.Xml.Linq\": \"\",\n                \"System.Runtime.Serialization.Xml\": \"\",\n                \"System.Net.Http\": \"\"\n            }\n        }\n    }\n}\nrepro project.zip can be downloaded from https://onedrive.live.com/?cid=4c9ccfe08b0ea8f6&id=4C9CCFE08B0EA8F6%2117254&action=Share . File: project_kruntime_769.zip\n. weird thing is if you change aspnet50 dependencies to nothing, then there won't be crash.\n. I thought we don't need versions for aspnet50 dependencies.\n. Since we're going to change to frameworkAssemblies for aspnet50, we can close this problem.  Or show a better message saying that aspnet50 not supporting dependencies element.\n. ",
    "craiggwilson": "That explain it, thanks.\n. That explain it, thanks.\n. ",
    "pdeffendol": "It may be best to use #!/bin/sh instead of bash, for greater compatibility across distributions.  I'm no expert either, but that's typically what I've seen done.  Most Linux distros just symlink that to /bin/bash\n. ",
    "giggio": "Ok, I just tested the script on Ubuntu 14.04. It has an error. Here is the output:\n./build.sh: 6: ./build.sh: x: not found\nmkdir: missing operand\nTry 'mkdir --help' for more information.\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   167  100   167    0     0    136      0  0:00:01  0:00:01 --:--:--   136\n  0 1621k    0     0    0     0      0      0 --:--:--  0:00:02 --:--:--     0Warning: Failed to create the file /nuget.exe: Permission denied\n  0 1621k    0  8330    0     0   4080      0  0:06:46  0:00:02  0:06:44 8134k\ncurl: (23) Failed writing body (0 != 8330)\ncurl: (3) <url> malformed\nThe assembly mscorlib.dll was not found or could not be loaded.\nIt should have been installed in the `/usr/lib/mono/2.0/mscorlib.dll' directory.\nThe assembly mscorlib.dll was not found or could not be loaded.\nIt should have been installed in the `/usr/lib/mono/2.0/mscorlib.dll' directory.\nThe assembly mscorlib.dll was not found or could not be loaded.\nIt should have been installed in the `/usr/lib/mono/2.0/mscorlib.dll' directory.\nIt is trying to create /nuget.exe, of course it cant. This is because the variable cachedir is not being set correctly. You can also see that in the error mkdir: missing operand and x: not found.\nTo set cachedir correctly test it with -z:\nif [ -z $XDG_DATA_HOME ]; then\nThen it will still error:\nThe assembly mscorlib.dll was not found or could not be loaded.\nIt should have been installed in the `/usr/lib/mono/2.0/mscorlib.dll' directory.\nThe assembly mscorlib.dll was not found or could not be loaded.\nIt should have been installed in the `/usr/lib/mono/2.0/mscorlib.dll' directory.\nThe assembly mscorlib.dll was not found or could not be loaded.\nIt should have been installed in the `/usr/lib/mono/2.0/mscorlib.dll' directory.\nI verified that the copy to .nuget also did not work. It should be:\ncp $cachedir/nuget.exe .nuget/nuget.exe\nIf I run:\n$ mono .nuget/nuget.exe install KoreBuild -ExcludeVersion -o packages -nocache -pre\nI get the expected error:\nThe assembly mscorlib.dll was not found or could not be loaded.\nIt should have been installed in the `/usr/lib/mono/2.0/mscorlib.dll' directory.\nI have mono installed, and usr/lib/mono/4.5/mscorlib.dll exists, but nuget.exe seems to be requiring .net 2.0. If I run mono with runtime 4.5 like so: mono --runtime=v4.5 it also fails with:\nWARNING: The runtime version supported by this application is unavailable.  \nUsing default runtime: v2.0.50727\nThe assembly mscorlib.dll was not found or could not be loaded.\nIt should have been installed in the `/usr/lib/mono/2.0/mscorlib.dll' directory.\nIs there a version of nuget.exe compiled against .NET 4.5? If there is not, then we should check for it and install on mono.\nI will make a PR with the fixes I found on the kscripts-mono branch. I will wait for the answer on nuget.exe for 4.5 to proceed on anything else.\n. Ok, I have just found out a few more problems. I will probably close PR #214 and redo it.\nI installed 2.0 on mono, but the problems seems to be the call to wget -o, which should be upper case o, like so: wget -O. The lowercase o was just saving a log to the nuget.exe file.\nThen I started getting errors when running nuget. SSL errors like that:\nWARNING: Error getting response stream (Write: The authentication or decryption has failed.): SendFailure\nAnd this:\nWARNING: Invalid certificate received from server. Error code: 0xffffffff800b010a\nI found this thread on StackOverflow, which suggested running: \nmozroots --import --sync\nIt seems that:\n\"This occurs when you haven't added the Mozilla Trusted Root Certificate Providers to the mono trusted providers store. You just need to do this action once, and mono will start trusting SSL certificates from the standard trusted sources\"\nNow I am able to nuget install:\nmono .numono .nuget/nuget.exe install Sake -version 0.2 -o packages -ExcludeVersion\nBut when Sake runs it fails:\n```\n$ mono packages/Sake/tools/Sake.exe -I packages/KoreBuild/build -f makefile.shade \"$@\"\ninfo: Target default\ninfo: Target pre-clean\ninfo: Target target-dir-clean\ninfo: Target build-clean\ninfo: Target clean\ninfo: Target post-clean\ninfo: Target validate\ninfo: Target repo-initialize\ninfo: Exec\ninfo:   program: kpm\ninfo:   commandline: restore\ninfo:   workingdir: /home/giovanni/proj/k/KRuntime\nwarn: ApplicationName='kpm', CommandLine='restore', CurrentDirectory='/home/giovanni/proj/k/KRuntime', Native error= Cannot find the specified file\nverbose: Stack trace: \n  at System.Diagnostics.Process.Start_noshell (System.Diagnostics.ProcessStartInfo startInfo, System.Diagnostics.Process process) [0x00000] in :0 \n  at System.Diagnostics.Process.Start_common (System.Diagnostics.ProcessStartInfo startInfo, System.Diagnostics.Process process) [0x00000] in :0 \n  at System.Diagnostics.Process.Start (System.Diagnostics.ProcessStartInfo startInfo) [0x00000] in :0 \n  at View00974b59c6c54080b4663b1df0550e8b+c__AnonStorey0.<>m__0 () [0x00000] in :0 \n  at Sake.Engine.Builder.BuilderBase1[System.Object].CallTarget (System.String name) [0x00000] in <filename unknown>:0 \n  at Sake.Engine.Builder.BuilderBase1[System.Object].StartingTarget (System.String name) [0x00000] in :0 \n  at View00974b59c6c54080b4663b1df0550e8b+c__AnonStorey1.<>m__5 () [0x00000] in :0 \n  at Sake.Engine.Builder.BuilderBase1[System.Object].CallTarget (System.String name) [0x00000] in <filename unknown>:0 \n  at Sake.Engine.Builder.BuilderBase1[System.Object].StartingTarget (System.String name) [0x00000] in :0 \n  at View00974b59c6c54080b4663b1df0550e8b+c__AnonStorey1.<>m__6 () [0x00000] in :0 \n  at Sake.Engine.Builder.BuilderBase1[System.Object].CallTarget (System.String name) [0x00000] in <filename unknown>:0 \n  at Sake.Engine.Builder.BuilderBase1[System.Object].StartingTarget (System.String name) [0x00000] in :0 \n  at View00974b59c6c54080b4663b1df0550e8b+c__AnonStorey1.<>m__7 () [0x00000] in :0 \n  at Sake.Engine.Builder.BuilderBase1[System.Object].CallTarget (System.String name) [0x00000] in <filename unknown>:0 \n  at Sake.Engine.Builder.BuilderBase1[System.Object].StartingTarget (System.String name) [0x00000] in :0 \n  at View00974b59c6c54080b4663b1df0550e8b+c__AnonStorey1.<>m__8 () [0x00000] in :0 \n  at Sake.Engine.Builder.BuilderBase1[System.Object].CallTarget (System.String name) [0x00000] in <filename unknown>:0 \n  at View00974b59c6c54080b4663b1df0550e8b+<RenderViewLevel0>c__AnonStorey1.<>m__0 () [0x00000] in <filename unknown>:0 \n  at Sake.Engine.Builder.BuilderBase1[System.Object].CallTarget (System.String name) [0x00000] in :0 \n  at Sake.Engine.SakeEngine.Execute (Sake.Engine.Options options) [0x00000] in :0 \n  at Sake.Engine.SakeEngine.Execute (System.String[] args) [0x00000] in :0 \n  at Sake.Program.Main (System.String[] args) [0x00000] in :0 \n```\nIt seems k restore is failing somehow. I am stuck now.\n. @davidfowl Excelent! So now we need to wait until mono-kpm is merged back into dev and then onto kscripts-mono to get k restore to work. Any idea of when is that going to happen?\nI will try to test it later then and confirm it works anyway, then post the results here.\n. @Eilon Cool. I'll be waiting. :D\n. As the kscripts-mono branch was already integrated into dev I am closing this pull request. I created #228 by cherry picking. The contents are the same.\n. This is the same as #214, but on the dev branch. I closed the older one.\n. Go ahead.\n. For anyone following this issue: I have worked on solving this specific issue with Selenium. The problem was with some Firefox dlls. I can work with Selenium without FF at this moment, so I recompiled it without those dlls, and put them on nuget:\nhttps://www.nuget.org/packages/Selenium.WebDriver.ASPNET5.Beta/2.44.0\nhttps://www.nuget.org/packages/Selenium.Support.ASPNET5.Beta/2.44.0\n. Great! What API is this?\n. The problem also happens on dnu restore for the package.\n. @troydai that is because I have forked the original FluentMigrator.Runner and uploaded a correct version to Nuget (which I plan to remove as soon as the original is fixed).\n. You also need to somehow allow users to enable and disable specific diagnostic ids. On .csprojs this is done through the Rules Editor window, I suggest this goes into project.json, on something like compilationOptions. Integration with the Rules Editor window (or a window that looks like it) is nice to have but not at all a \"must have\" IMO. Also, are you going to consider .ruleset files at all? Again, I don't think those are necessary, these could all go into project.json. But it would be nice to have a way to share those settings between projects.\n. This was expected for beta7, and is now back to the backlog. Should we expect this on beta8? If I understand correctly, features that don't make to beta8 won't make to RTM, as beta8 is supposed to be feature complete, right? So the question follows: is this expected to be present on RTM?\n. :( :( :(\n. You can still use analyzers through extensions. It is only the nuget usage that is not implemented. It is not ideal, but it works.\n. @davidfowl Opened issue on nuget: https://github.com/NuGet/Home/issues/1360\nI don't care much about the format dnu uses for informing ranges, as long I can inform, on project.json, per dependency, how I want them to be fetched, if using lowest or highest versions. If you choose to use 1.x, or ^1.0, that is fine. I would only add that ^1.0 conveys more info, as I could say \"at lest version 1.3 up to 2\" with ^1.3, while 1.x would mean \"anything from 1.0 or higher up to 2\", there is no way to specify a minimum minor version (or patch). And if it is an x or a *, it makes no difference. Just pick a format, but please support this.\n. @davidfowl Ok, per the latest comment by @emgarten on the nuget repo (https://github.com/NuGet/Home/issues/1360#issuecomment-139814966) nuget already dupports that with 1.*, which will take the highest dependency available, not the lowest. So if an app specify dependency A as 1.* and versions 1.0 and 1.1 are available, using nuget today, 1.1 would be chosen.\nIs this coming to dnu? I expect the answer to be yes, as you said you are not diverging from the nuget behavior. Can we expect that on the 1.0 release of dnx?\n. Ok, at least we know that this will be supported on dnu at some point.\n. @davidfowl I see you closed the issue. Is this planned somehow, or tracked elsewhere? Or dropped?. ",
    "rustd": "@divega can you please comment more on this\n. We met and we want to do this for Beta4. VS would set it to Development\n. @glennc @muratg can you look at this?\n. ",
    "divega": "I think this doesn't belong in this repo, so I will close and add it somewhere else.\n. I don't think there is anything actionable left here. For DI, we decided to remove the ConfigureXyz() methods and have the AddXyz() methods take Action<TOptions> more consistently. We are still working on making the usage in middleware more consistent and simple. That is tracked at https://github.com/aspnet/Options/issues/78. \ncc @HaoK \n. Neither the version of SqlClient included in Mono nor the version we plan to provide for .NET Core offer the full functionality of SqlCient on the desktop version of .NET. \nFor Mono there isn't much we can do but for .NET Core I believe @YoungGah's team is tracking feature requests and may be able to describe a workaround.\n. @anurse @pranavkm we know removing the sni.dll from the runtime folder fixes the issue but we don't know exactly why. \nCan you easily tell from the code which package exactly would we currently extract sni.dll from? Several packages contain it and I would like to double-check before I report it back to the SqlClient folks.\n. Other than that :shipit:\n. @emfluenceindia can you share your Startup.cs code? I think this could happen if EF and EF provider services are not wired up in ConfigureServices().  \nBTW,  most likely this issue is unrelated to DNX. \n. @emfluenceindia The Startup code seems correct and it should allow having the dependency injection container create instances of MyDbContext. However I went back to your original post and I found that you are creating the DbContext outside the container:\nC#\nColemanSqlHelper helper = new ColemanSqlHelper(new Model.ColemanContext()); List<string> paramNames = helper.GetOriginalParamters(ProcedureHelper.CartInsertCustomer);\nThat won't work unless you have ColemanContext setup in a way that it can configure its own connection, e.g. by overriding the OnConfiguring() method as explained in http://docs.efproject.net/en/latest/platforms/full-dotnet/new-db.html. \nI will leave it up to you to decide whether you want to change your code, but my recommendation would be to resolve ColemanContext from DI.\nI will file bugs for the exception message not being clear and for improving how EF interacts with DI.\n. ",
    "weitzhandler": "@divega where is the EF repo that belongs to DNX?\n. @davidfowl I can't find Type.GetTypeInfo. Here's a snippet from the Type metadata:\n```\nregion Assembly System.Runtime, Version=4.0.20.0,\nCulture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n\n// C:\\Users\\weitz.dnx\\packages\\System.Runtime\\4.0.20-beta-23019\\ref\\dotnet\\System.Runtime.dll\nendregion\nnamespace System\n{\n  public abstract class Type\n  {\n    public static readonly Type[] EmptyTypes;\n    public static readonly object Missing;\npublic abstract string AssemblyQualifiedName { get; }\npublic abstract Type DeclaringType { get; }\npublic abstract string FullName { get; }\npublic abstract int GenericParameterPosition { get; }\npublic abstract Type[] GenericTypeArguments { get; }\npublic bool HasElementType { get; }\npublic virtual bool IsArray { get; }\npublic virtual bool IsByRef { get; }\npublic abstract bool IsConstructedGenericType { get; }\npublic abstract bool IsGenericParameter { get; }\npublic bool IsNested { get; }\npublic virtual bool IsPointer { get; }\npublic abstract string Name { get; }\npublic abstract string Namespace { get; }\npublic virtual RuntimeTypeHandle TypeHandle { get; }\n\npublic static Type GetType(string typeName);\npublic static Type GetType(string typeName, bool throwOnError);\npublic static Type GetType(string typeName, bool throwOnError, bool ignoreCase);\npublic static Type GetTypeFromHandle(RuntimeTypeHandle handle);\npublic bool Equals(Type o);\npublic override bool Equals(object o);\npublic abstract int GetArrayRank();\npublic abstract Type GetElementType();\npublic abstract Type GetGenericTypeDefinition();\npublic override int GetHashCode();\npublic abstract Type MakeArrayType();\npublic abstract Type MakeArrayType(int rank);\npublic abstract Type MakeByRefType();\npublic abstract Type MakeGenericType(params Type[] typeArguments);\npublic abstract Type MakePointerType();\npublic override string ToString();\n\n}\n}\n```\n. @davidfowl Thank you!\n. ",
    "balaTest": "Error is coming from tooling when it tries to delete the .pubxml file from the output folder. k pack should copy the files without the read-only bit.\nSame root cause as https://github.com/aspnet/KRuntime/issues/182 ?\n. @davidfowl, I can still repro this. I'm using KRE 527.\n\n....\n\n. Ah, you're right. I didn't have MyGet feed setup, so it was pointing to Nuget.org. Once I provided a fallbacksource pointing to the local package repo, it works. I'll go ahead and close this.\n\n. Seems to be a tooling issue with multiple restores getting invoked\n. Repro project is available here : \\vwdbuild01\\temp\\balach\\BugRepros\\ProjectKTooling\\Bug982308 \n. ",
    "DamianEdwards": "Ya, is there actually a scenario where it makes sense?\n. Some attendees just ran into this during our workshop at NDC Oslo. In this case it was an underscore in the project name. Everything works fine until they try to run dnu publish --no-source and then they get the invalid character message.\n. @muratg @glennc \nThis is reproing again. See repro project at https://github.com/DamianEdwards/BundleExcludeLongPaths\nClone that and try to dnu publish --out C:\\o it from the command line.\nIf you do dnu publish without specifying an --out arg, it fails in a different way as it tries to pack the output into itself (!!!) due to \\bin not being excluded properly by default.\nException details:\nUsing Project dependency BundleExcludeLongPaths 1.0.0 for DNX,Version=v4.5.1\n  Copying source code from Project dependency BundleExcludeLongPaths\n    Source C:\\src\\GitHub\\DamianEdwards\\BundleExcludeLongPaths\\src\\BundleExcludeLongPaths\\project.json\n    Target C:\\src\\GitHub\\DamianEdwards\\BundleExcludeLongPaths\\src\\BundleExcludeLongPaths\\bin\\output\\approot\\src\\BundleEx\ncludeLongPaths\nSystem.IO.PathTooLongException: The specified path, file name, or both are too long. The fully qualified file name must\nbe less than 260 characters, and the directory name must be less than 248 characters.\n   at System.IO.Path.NormalizePath(String path, Boolean fullCheck, Int32 maxPathLength, Boolean expandShortPaths)\n   at System.IO.Path.GetDirectoryName(String path)\n   at System.IO.FileInfo.get_DirectoryName()\n   at System.IO.FileInfo.get_Directory()\n   at Microsoft.Framework.FileSystemGlobbing.Abstractions.FileInfoWrapper.get_ParentDirectory()\n   at Microsoft.Framework.FileSystemGlobbing.Internal.PatternContexts.PatternContextRagged.TestMatchingGroup(FileSystemI\nnfoBase value)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.PatternContexts.PatternContextRaggedInclude.Test(FileInfoBase file)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.<>c.<Match>b__10_1(IPatternContext pattern, FileInfoBase file)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.MatchPatternContexts[TFileInfoBase](TFileInfoBase fileinfo, Func`3 test)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String parentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String parentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String parentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String parentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String parentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String parentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String parentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String parentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String parentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String parentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String parentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String parentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String parentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Execute()\n   at Microsoft.Framework.FileSystemGlobbing.Matcher.Execute(DirectoryInfoBase directoryInfo)\n   at Microsoft.Framework.FileSystemGlobbing.MatcherExtensions.GetResultsInFullPath(Matcher matcher, String directoryPath)\n   at Microsoft.Framework.Runtime.PatternGroup.SearchFiles(String rootPath)\n   at Microsoft.Framework.PackageManager.Bundle.BundleProject.CopyProject(BundleRoot root, Project project, String targetPath, Boolean includeSource)\n   at Microsoft.Framework.PackageManager.Bundle.BundleProject.EmitSource(BundleRoot root)\n   at Microsoft.Framework.PackageManager.Bundle.BundleProject.Emit(BundleRoot root)\n   at Microsoft.Framework.PackageManager.Bundle.BundleRoot.Emit()\n   at Microsoft.Framework.PackageManager.Bundle.BundleManager.Bundle()\n   at Microsoft.Framework.PackageManager.Program.<>c__DisplayClass3_2.<Main>b__4()\n   at Microsoft.Framework.Runtime.Common.CommandLine.CommandLineApplication.Execute(String[] args)\n   at Microsoft.Framework.PackageManager.Program.Main(String[] args)\n. Agreed, just need to support consuming them\n-----Original Message-----\nFrom: \"David Fowler\" notifications@github.com\nSent: \u200e1/\u200e31/\u200e2015 10:09 AM\nTo: \"aspnet/XRE\" XRE@noreply.github.com\nCc: \"Damian Edwards\" damian@damianedwards.com\nSubject: Re: [XRE] KRE should support loading assemblies for TFMs\"net40-client\" and \"net40-full\" (#1138)\nWe shouldn't create any packages with those monikers. They are deprecated. Conceptions should work fine but producing them makes no sense.\n\u2014\nReply to this email directly or view it on GitHub.=\n. :smoking: :gun: https://github.com/aspnet/XRE/blob/dev/src/Microsoft.Framework.Runtime.Roslyn/AssemblyNeutral/TypeCompilationContext.cs#L36\n. Looks great\n. @davidfowl FYI the issue we were looking at on my machine\n. I was able to reproduce on a simple Starter Web project. As soon as you reference tag helpers and you have Razor pre compilation configured, it fails.\n. I really like the look of @anurse's proposed changes.\n. Appreciate the feedback on this item. We'll take another look at this.\n. I vote for 4a so far\n. Wow, that'll teach me for not logging the bug immediately when I found it, but I was on stage at the time :confused: \n. Yeah fair point. Perhaps we have two switches then, e.g. --delete-target\n. We believe that's caused by an issue with the JSON.NET package (https://github.com/JamesNK/Newtonsoft.Json/issues/618).\nCan you try adding System.Runtime.Serialization.Primitives to you project.json file directly?\n. @anurse nice, although we'd still want the environment variable for the VS scenario as the cmd line is actually in the web.config file in that case and we don't want it to change to include a switch to drop the PID.\n. netcoreapp1.0 is the successor to dnxcore50. netstandard1.x and netstandardapp1.x are completely new concepts that are functionally equivalent to each other for now.\n. @GuardRex netcoreapp1.0 (note the app in there) represents applications running on/via the .NET Core CLI infrastructure (which is CoreCLR and some number of libraries, just like dnxcore50 was). Libraries are free to target this TFM if they need API that only works in these app types, otherwise we'll be encouraging libraries to target netstandard1.x for the widest compatibility.\n. @GuardRex basically, yeah. There are more docs coming very soon for this stuff, some of the ones that are public might be out of date with the absolute latest bits in GH repos as we're still working through this ourselves.\n. Also note that netstandard1.5 will be supported by .NET Framework 4.6.2, it's not just about Core CLR.\n. Need to set Thread.CurrentThread.CurrentUICulture too\n. I specifically asked for number of physical processors, which you can't get from .NET (Environment.ProcessorCount gives you the logical processor count). We'd use this by default in Kestrel to set the number of threads to use to match the number of physical cores in the machine.\n. Let's make this look for just \"WebRoot\" withing the config system first, and then only if there's no value, try looking in \"Hosting:WebRoot\". Then we can just make this file:\nJSON\n{\n    \"WebRoot\": \"wwwroot\"\n}\n. ",
    "suhasj": "Nope I used the one on the Home repo given to customers\n. This repros with the latest kvm bits from https://github.com/aspnet/KRuntime/tree/dev/setup too\n. It is actually a good feature. We can install a single package instead of going through all the packages and the dependency tree for the project. \n. +1 for taking alias in kpm\n. yeah just verified that -p adds to user path. I believe docs will all the information so this should be fine. Will consider this not a regression but a known change\n. Sure. How hard is it to provide suggestions, something like Git does ? For example kpm biuld would give a suggestion saying 'Did you mean kpm build '\n. I faced instances where the experience between runtime and tooling was different. If the .sln was under the sub directory, the global.json was under the root or subdirectory couldn't resolve the project altogether. Though I could see the project being referenced correctly, intellisense was not being resolved. I'll follow this up with them\n. I don't have my Mac machine right now but the error is that the project is unable to reference EntityFramework.SqlServer package. @Praburaj mentioned that this was fixed since I am able run MusicStore using alpha4 bits of KRE and EF packages\n. Full stacktrace for FYI\nMicrosoft.Framework.Runtime.Roslyn.RoslynCompilationException: /Users/ktest/Documents/MusicStore/src/MusicStore/Models/SampleData.cs(8,29): error CS0234: The type or namespace name 'SqlServer' does not exist in the namespace 'Microsoft.Data.Entity' (are you missing an assembly reference?)\n/Users/ktest/Documents/MusicStore/src/MusicStore/Startup.cs(46,30): error CS0411: The type arguments for method 'IdentityEntityFrameworkServiceCollectionExtensions.AddSqlServer&lt;TContext, TUser, TRole&gt;(IServiceCollection)' cannot be inferred from the usage. Try specifying the type arguments explicitly.\n/Users/ktest/Documents/MusicStore/src/MusicStore/Mocks/StartupSocialTesting.cs(59,30): error CS0411: The type arguments for method 'IdentityEntityFrameworkServiceCollectionExtensions.AddSqlServer&lt;TContext, TUser, TRole&gt;(IServiceCollection)' cannot be inferred from the usage. Try specifying the type arguments explicitly.\n/Users/ktest/Documents/MusicStore/src/MusicStore/Models/SampleData.cs(22,72): error CS0246: The type or namespace name 'SqlServerDataStore' could not be found (are you missing a using directive or an assembly reference?)\n  at Microsoft.Framework.Runtime.Roslyn.RoslynProjectReference.Load (IAssemblyLoaderEngine loaderEngine) [0x00000] in &lt;filename unknown&gt;:0 \n  at Microsoft.Framework.Runtime.Loader.ProjectAssemblyLoader.Load (System.String name) [0x00000] in &lt;filename unknown&gt;:0 \n  at klr.host.LoaderContainer.Load (System.String name) [0x00000] in &lt;filename unknown&gt;:0 \n  at klr.hosting.RuntimeBootstrapper+&lt;&gt;c__DisplayClasse.&lt;ExecuteAsync&gt;b__4 (System.Reflection.AssemblyName assemblyName) [0x00000] in &lt;filename unknown&gt;:0 \n  at klr.hosting.RuntimeBootstrapper+&lt;&gt;c__DisplayClasse.&lt;ExecuteAsync&gt;b__7 (System.Object sender, System.ResolveEventArgs a) [0x00000] in &lt;filename unknown&gt;:0 \n  at System.AppDomain.DoAssemblyResolve (System.String name, Boolean refonly) [0x00000] in &lt;filename unknown&gt;:0 \n  at (wrapper managed-to-native) System.AppDomain:LoadAssembly (System.AppDomain,string,System.Security.Policy.Evidence,bool)\n  at System.AppDomain.Load (System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity) [0x00000] in &lt;filename unknown&gt;:0 \n  at (wrapper remoting-invoke-with-check) System.AppDomain:Load (System.Reflection.AssemblyName,System.Security.Policy.Evidence)\n  at System.AppDomain.Load (System.Reflection.AssemblyName assemblyRef) [0x00000] in &lt;filename unknown&gt;:0 \n  at (wrapper remoting-invoke-with-check) System.AppDomain:Load (System.Reflection.AssemblyName)\n  at System.Reflection.Assembly.Load (System.Reflection.AssemblyName assemblyRef) [0x00000] in &lt;filename unknown&gt;:0 \n  at Microsoft.AspNet.Hosting.Startup.StartupLoader.LoadStartup (System.String applicationName, System.String environmentName, IList`1 diagnosticMessages) [0x00000] in &lt;filename unknown&gt;:0 \n  at Microsoft.AspNet.Hosting.Startup.StartupManager.LoadStartup (System.String applicationName, System.String environmentName) [0x00000] in &lt;filename unknown&gt;:0 \n  at Microsoft.AspNet.Hosting.HostingEngine.EnsureApplicationStartup (Microsoft.AspNet.Hosting.HostingContext context) [0x00000] in &lt;filename unknown&gt;:0 \n  at Microsoft.AspNet.Hosting.HostingEngine.EnsureApplicationDelegate (Microsoft.AspNet.Hosting.HostingContext context) [0x00000] in &lt;filename unknown&gt;:0 \n  at Microsoft.AspNet.Hosting.HostingEngine.Start (Microsoft.AspNet.Hosting.HostingContext context) [0x00000] in &lt;filename unknown&gt;:0 \n  at Microsoft.AspNet.Hosting.Program.Main (System.String[] args) [0x00000] in &lt;filename unknown&gt;:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] in &lt;filename unknown&gt;:0\n. +1 seeing it often with beta2 builds on Mac and Linux. Restore hangs more so if there is no .kpm folder i.e. for the first time\n. Possibly an issue with then new xunit for aspnet 5.0. Ported the issue to that repo\nhttps://github.com/xunit/aspnet.xunit/issues/6 \n. Sorry I did not check if for windows. This is happening on Mono with the latest version. I'll update the title\n. it was deleted since we there were duplicates \n/cc @pranavkm who is pushing it. Pranav I still don't see the kre-mono package\n. @borgdylan it is up so you be able to use it\n. +1 can repro this with KRE 1.0.0-beta4-11128. The kre-app-base in the web.config in the package created after kpm bundle is ..\\approot\\src\\{AppName}\n. The issue does not repro for me with the latest bits. @troydai can you check if this still repros for your scenario \n. on the contrary why in the project unless it is supposed to be customized ? It is one more config file in the project displayed in VS and sometimes users might edit it by mistake. \n. @cnblogs-dudu On the shell if you run dnx --version what is the output ?\n. sure it is preferable if you use bash. From the error looks like the installation of dnx mono was not as expected. How did you install dnx ?\n. @pranavkm Updating make file to copy darwin packages in DNX folder\n. thanks. Yeah I'll test and merge it\n. My bad the dnx version I faced the issue is 11706\n. Hmm interesting. I tried clr x86. Can you confirm with that ?\n. Sorry this has to be on the release branch since we are merging it later.\n. /cc @pranavkm \n. Talked to @Eilon and I can merge this to master and then copy the same to dev. \n. merged to master\n. nope will push it sometime today\n. merged\n. ",
    "aaronpowell": "Verified on 0452 - no crash on invalid commands just a TODO message\n. Verified on 0452 - no crash on invalid commands just a TODO message\n. Sounds like a fair assumption but there'd need to be fallbacks for when there's no git repo found.\nAre the AssemblyInfo attributes (AssemblyCompany, AssemblyTitle, etc) not included in K?\n. Sounds like a fair assumption but there'd need to be fallbacks for when there's no git repo found.\nAre the AssemblyInfo attributes (AssemblyCompany, AssemblyTitle, etc) not included in K?\n. Actually, how about having another property in the project.json file, like packages.json has - http://browsenpm.org/package.json#contributors\nYou could even expand it out to grab the readme, source repo, etc from there, and since there's already some synchronisation between kproj and package.json I don't see why VS couldn't have it exposed too.\n. Actually, how about having another property in the project.json file, like packages.json has - http://browsenpm.org/package.json#contributors\nYou could even expand it out to grab the readme, source repo, etc from there, and since there's already some synchronisation between kproj and package.json I don't see why VS couldn't have it exposed too.\n. Oh right, I didn't know it could be specified (I haven't looked at the JSON schema for project.json).\nMaybe make it a mandatory node in the JSON? In packages.json for Node.js there's a bunch of mandatory fields, author is one of them IIRC.\n. Oh right, I didn't know it could be specified (I haven't looked at the JSON schema for project.json).\nMaybe make it a mandatory node in the JSON? In packages.json for Node.js there's a bunch of mandatory fields, author is one of them IIRC.\n. Been thinking that this would be a useful idea, I'm assuming you'd have some similar things as to npm?\nWould be really neat if it looked at installed NuGet packages and add them as dependencies too, or are you only really thinking it's for when you are starting from scratch?\n. Been thinking that this would be a useful idea, I'm assuming you'd have some similar things as to npm?\nWould be really neat if it looked at installed NuGet packages and add them as dependencies too, or are you only really thinking it's for when you are starting from scratch?\n. Hmm I suppose if k can't run without a project.json file then maybe full bootstrapping wouldn't make sense.\nI'm just thinking of this workflow coming from node.js (I probably should stop saying \"But... NODE! :stuck_out_tongue:\"):\n- mkdir foo\n- cd foo\n- npm install express jade ...\n- touch app.js\n- \n- npm init\nAnd at the end it works out what packages I had already installed and adds them as dependencies for me.\n. Hmm I suppose if k can't run without a project.json file then maybe full bootstrapping wouldn't make sense.\nI'm just thinking of this workflow coming from node.js (I probably should stop saying \"But... NODE! :stuck_out_tongue:\"):\n- mkdir foo\n- cd foo\n- npm install express jade ...\n- touch app.js\n- \n- npm init\nAnd at the end it works out what packages I had already installed and adds them as dependencies for me.\n. So it's completely project-less :P\n. So it's completely project-less :P\n. ",
    "hanswolff": "Thanks. BTW you guys rock! I really like where Microsoft is going.\n. ",
    "javiercn": "Fixed by @pranavkm in a different PR.\n. :+1: \n. ",
    "lucamorelli": "Unhandled Exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocat\non. ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> Sy\ntem.InvalidOperationException: Unable to resolve depedendencies Helios 0.1-alpha,Microsoft.AspNet.Http 0.1-alpha,Micros\nft.AspNet.Mvc ,Microsoft.AspNet.Mvc.Core ,Microsoft.AspNet.Mvc.ModelBinding ,Microsoft.AspNet.Mvc.Razor ,Microsoft.AspN\nt.Routing 0.1-alpha,Microsoft.AspNet.Server.WebListener 0.1-alpha,Microsoft.DataAnnotations 0.1-alpha,Microsoft.Framewo\nk.ConfigurationModel 0.1-alpha,Microsoft.Framework.DependencyInjection 0.1-alpha\n   at Microsoft.Framework.Runtime.DefaultHost.GetEntryPoint(String applicationName)\n   at Microsoft.Framework.ApplicationHost.Program.ExecuteMain(DefaultHost host, String applicationName, String[] args)\n   at Microsoft.Framework.ApplicationHost.Program.Main(String[] args)\n   --- End of inner exception stack trace ---\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\n   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameter\n, CultureInfo culture)\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\n   at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider\nerviceProvider)\n   at klr.host.Bootstrapper.Main(String[] args)\n   --- End of inner exception stack trace ---\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\n   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameter\n, CultureInfo culture)\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\n   at klr.hosting.RuntimeBootstrapper.Execute(String[] args)\n   at DomainManager.Main(Int32 argc, String[] argv)\nhmm, sorry, may be I posted in the wrong section.I'm talking about the mvcsample.web project\n. I just reopened in the mvc section. I don't understand if I'm missing something how a project must be built.\n. I create the directories D:\\GitHub\\MvcSample.Luca\\src , where src contains the sources with the project.json and the other sources.\nRunning kpm restore from both D:\\GitHub\\MvcSample.Luca and D:\\GitHub\\MvcSample.Luca\\src I have this result \nResolving complete, 29261ms elapsed\nUnable to locate Microsoft.Framework.ConfigurationModel >= 0.1-alpha\nUnable to locate Microsoft.DataAnnotations >= 0.1-alpha\nUnable to locate Microsoft.AspNet.Server.WebListener >= 0.1-alpha\nUnable to locate Microsoft.AspNet.Routing >= 0.1-alpha\nUnable to locate Microsoft.AspNet.Http >= 0.1-alpha\nUnable to locate Microsoft.Framework.DependencyInjection >= 0.1-alpha\nUnable to locate System.Runtime.InteropServices >= 4.0.20.0\nUnable to locate System.ComponentModel >= 4.0.0.0\nUnable to locate System.Diagnostics.Debug >= 4.0.10.0\nUnable to locate System.Dynamic.Runtime >= 4.0.0.0\nUnable to locate System.Runtime >= 4.0.20.0\nUnable to locate System.Threading.Tasks >= 4.0.10.0\nUnable to locate System.Console >= 4.0.0.0\nUnable to locate System.Diagnostics.Tools >= 4.0.0.0\nRestore complete, 29270ms elapsed\nLooks like is able to resolve all the dependency but not locate in the repository.\n. I have the directory D:\\GitHub\\MvcSample.Luca empty, I haven't copied any file from the mvc root directory, created a src directory that is the copy of the   Mvc / samples / MvcSample.Web , with the project.json, mvc.sample.web.kproj, startup.cs and so on.\nfrom both the directories I tried to run kpm restore and I obtain the result.\nOther test: I copy the build.cmd from the mvc repository and try to build, and obtaing this:\nUnable to find package 'KoreBuild'.\nInstalling 'Sake 0.2'.\nSuccessfully installed 'Sake 0.2'.\nThe system cannot find the path specified.\nThe system cannot find the path specified.\nThe system cannot find the path specified.\nwarn: View source file not found.\nverbose: Stack trace:\n   at Spark.FileSystem.FileSystemViewFolder.GetViewSource(String path)\n   at Spark.FileSystem.CombinedViewFolder.GetViewSource(String path)\n   at Spark.Parser.ViewLoader.BindEntry(String referencePath)\n   at Spark.Parser.ViewLoader.Load(String viewPath)\n   at Spark.SparkViewEngine.LoadTemplates(ViewLoader loader, IEnumerable1 templates, ICollection1 chunksLoaded, IColle\nction`1 templatesLoaded)\n   at Spark.SparkViewEngine.CreateEntryInternal(SparkViewDescriptor descriptor, Boolean compile)\n   at Spark.SparkViewEngine.CreateEntry(SparkViewDescriptor descriptor)\n   at Sake.Engine.Loader.DefaultLoader.Load(Options options)\n   at Sake.Engine.SakeEngine.Execute(Options options)\n   at Sake.Engine.SakeEngine.Execute(String[] args)\n   at Sake.Program.Main(String[] args)\nin the process created  the .nuget directory with nuget.exe and the packages dir with Sake inside.\nI run again the kpm restore and otain the same result, but after the unable to locate... I find \nInstalling Helios 0.1.3.0\nInstalling Newtonsoft.Json 5.0.8\nRestore complete, 10359ms elapsed\nWhere can I find more instructions? I can even work inside the repo, I would just like to know if it's an expected result.\n. how can I add images?\n. \n. \n. \n. all the files are unchanged from the repo clone, I tried to rename the src folder to MvcSample.Web but same problem\n. you mean this way?\nJSON\n{\n  \"version\": \"0.1-alpha-*\",\n  \"compilationOptions\": {\n    \"warningsAsErrors\": true\n  },\n  \"dependencies\": {\n    \"Helios\": \"0.1-alpha-*\",\n    \"Microsoft.AspNet.Http\": \"0.1-alpha-*\",\n    \"Microsoft.AspNet.Mvc\": \"0.1-alpha-*\",\n    \"Microsoft.AspNet.Mvc.Core\": \"0.1-alpha-*\",\n    \"Microsoft.AspNet.Mvc.ModelBinding\": \"0.1-alpha-*\",\n    \"Microsoft.AspNet.Mvc.Razor\": \"0.1-alpha-*\",\n    \"Microsoft.AspNet.Routing\": \"0.1-alpha-*\",\n    \"Microsoft.AspNet.Server.WebListener\": \"0.1-alpha-*\",\n    \"Microsoft.DataAnnotations\": \"0.1-alpha-*\",\n    \"Microsoft.Framework.ConfigurationModel\": \"0.1-alpha-*\",\n    \"Microsoft.Framework.DependencyInjection\": \"0.1-alpha-*\"\n  },\n  \"commands\": { \"web\": \"Microsoft.AspNet.Hosting server=Microsoft.AspNet.Server.WebListener server.urls=http://localhost:5001\" },\n  \"configurations\": {\n    \"net45\": {\n      \"dependencies\": {\n        \"System.ComponentModel.DataAnnotations\": \"\"\n      }\n    },\n    \"k10\": {\n      \"dependencies\": {\n        \"System.ComponentModel\": \"4.0.0.0\",\n        \"System.Console\": \"4.0.0.0\",\n        \"System.Diagnostics.Debug\": \"4.0.10.0\",\n        \"System.Diagnostics.Tools\": \"4.0.0.0\",\n        \"System.Dynamic.Runtime\": \"4.0.0.0\",\n        \"System.Runtime\": \"4.0.20.0\",\n        \"System.Runtime.InteropServices\": \"4.0.20.0\",\n        \"System.Threading.Tasks\": \"4.0.10.0\"\n      }\n    }\n  }\n}\n. this is the result:\n\n. changed the project.json to\nJSON\n{\n  \"version\": \"0.1-alpha-*\",\n  \"compilationOptions\": {\n    \"warningsAsErrors\": true\n  },\n  \"dependencies\": {\n    \"Helios\": \"0.1-alpha-*\",\n    \"Microsoft.AspNet.Http\": \"0.1-alpha-*\",\n    \"Microsoft.AspNet.Mvc\": \"0.1-alpha-*\",\n    \"Microsoft.AspNet.Server.WebListener\" : \"0.1-alpha-*\"\n  },\n  \"commands\": { \"web\": \"Microsoft.AspNet.Hosting server=Microsoft.AspNet.Server.WebListener server.urls=http://localhost:5001\" },\n  \"configurations\": {\n    \"net45\": {},\n    \"k10\": {}\n  }\n}\nthis is the content of the folder\n\nxml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <add key=\"AspNetVNext\" value=\"https://www.myget.org/F/aspnetvnext/api/v2\" />\n    <add key=\"NuGet.org\" value=\"https://nuget.org/api/v2/\" />\n  </packageSources>\n  <packageSourceCredentials>\n    <AspNetVNext>\n      <add key=\"Username\" value=\"aspnetreadonly\" />\n      <add key=\"ClearTextPassword\" value=\"4d8a2d9c-7b80-4162-9978-47e918c9658c\" />\n    </AspNetVNext>\n  </packageSourceCredentials>\n</configuration>\nthis is the result\n\n. \njsu to be sure, this is the content of the nuget conf file\n. \n. \nif may be of help, you can see all the requests to nuget\n. \nI don't understand: without any change, the last resolved package was newtonsoft.json, second time stopped to the wrong version of aspnet.razor, this time found 2 dependencies to razor.\n. yes, looks like the problem is to find the root: solved placing the nuget.config in d:\\\nAt this point started to work, a lot, and now is Running, but I haven't found the package directory in the project folder.\nMay be possible that placed all in the C:\\Users\\luca\\AppData\\Local\\Temp\\nuget folder? just created and containg 700 mbytes of packages\n. looks like that finally I found it. Seems the mvc.sln it's the missing point. After i copied the Mvc.sln from the repository root started to work.\nJust adding the .sln file created the packages directory, unable to locate the above packages and downloading the wrong one.\nAdding both the .sln and the nuget.config worked fine and is starting\n\nThis make sense for you?\n. Ok, now that I understand better how it works I noticed a thing copying from the samples: if I add to the project a dependecy as a project reference (     \"Microsoft.AspNet.Http\": \"\" for example I suppose ), configured the global.json and copied a few projects from the repos, if the sources of this project reference are not present in the sources directory, I don't receive any warning from tpm restore, and when run k web I obtain this error message:\nUnhandled Exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.InvalidOperationException: Unable to resolve depedendencies Microsoft.AspNet.Http ,Microsoft.AspNet.Server.WebListener\n...\nadding the version reference downloads it from nuget and all works fine.\nI understand may be not a tpm restore issue, but a warning for this this problem at the end I think may be useful\n. i like this command...\n. Personally I think that the Runtime need a clear convention to define the toor of the project for start a new project from scratch. At the moment I don't see any problem to use simple cmd files to create project templates simply copying the folders needed, and I would like to create just a project.json template with the settings required, and merge them with the project.json of the project.\n. Establishing as package root the dir where the global.json and assuming that the file must be always present?\n. assuming that the file must be always present: seems to me the empty file as told me Yesterday is not a big drama. Anyway looks like even the nuget.config, at least  now in the beta is required.\n. I suppose is an acceptable solution\n. the nuget.config at the moment is also required, but may be more a Alpha related problem. for owin Solutions at the moment the startup.cs is on the root of the solution, but is a asp.net specific solution, so at the moment I don't see any other fixed point.\n. from what I seen right now, you can do an exception only when you have reference to just nuget packages and no other project references, so the root is the dir from where you run the app, but at the moment nuget have problems to point to the repository and establish where to create the packages directory\n. by the way: in the global.json may be configured the default Runtime and architecture to be used Running the various k* commands? at the moment seems that if not explicited in the command line assumes srv50 x86, but I would like to fix once at solution level. Sorry, but I'm looking k Runtime from a few days, so I don't understand if this may be of help, especially when Solutions will grow in size and will have to handle already compiled packages.\n. \nthis is what happens, when I run kvm upgrade download Always the svr50 x86 of the package, changing the configuration. Now it's true that I can do this manually, but I suppose is reasonable that if I set a configuration, after the upgrade, if not differently sepcified, I can continue to use the same Runtime and Architecture, so I would like to ask that the upgrade command check the actual configuration.\n. another this is the solution setting: so far I think is not very important, but with the time this will be important, so I would like to be able to specify at solution level which is the configuration I want to use, if a specific configuration is required. It's true that I can I can create a .cmd with kwn use, but I was thinking that moving this information in a configuration file may be better even to share the configuration with vs, if the project is opened with vs too\n. yes, I omitted version\n. ok, thanks. The only thing I don't like very much is to allow reference that are not inside the project itself, because if you move the project inside the solution the reference will break.\nCan't be added some kind of alias at solution level? something like the direct route in mvc, so you mantain both better.\n. I suppose this solution\napp\n  -- lib\n  -- development\n       +- myDevProject1\n       +- myDevProject2\n  -- myProdProject1\n(myDevProject1 and myDevProject2 are under development folder, I don't see if this is clear)\nmay be not very usual structure, but seems that this way I have myDevProject1 project.json configured this way\nJSON\n{\n    \"binaries\": [\"../../lib\"]\n}\nNow, all it works fine.\nMy problem is if and when I have to move something:\n1. I move the project outside the development folder at the same level of MyProdProject1, and at this point I have to update the project.json of that project\n2. I have to move the lib folder in another folder, or change this folder because I have a new version and I want older projects still uses this version. At this point I have to change the folder, and update the project.json of all projects using this folder.\nI hope I explained better: I know it a quite uncommon scenario, but I was thinking to the sample you've done.\n. I don't see big problems to do this. I suppose I have to better see how to create nuget packages, because so far is a thing I never done.\n. Ok, thanks. I'll give a try. My problem is with legacy libraries, that I think I'll have to fight for a while.\n. thanks. The most common scenario I see is to use a model library with a ef 6 model inside. I have to see how to run and where to place the web.config.\n. yes, I think the best way to introduce k to existing customers, with Solutions with several projects between sites and libraries may be to let create new web projects using exising class libraries, so they continue to develop the existing procedures and start to build new ones with k.\n. ok, thanks\n. The actual template place in the App_STart\\BundleConfig class  static void RegisterBundles(BundleCollection bundles)\nand is handled  by the Microsoft.AspNet.Web.Optimization package.\n. done\n. yes, I know it's not an actual bug. Actually using IIS, I change the user associated with the Application Pool\n. yes\n. done\n. seems to me that when the klr directory is sent from the caller is not not correctly checked before the call  to the CreateAppDomainWithManager\n. if in the data->klrDirectory I have  c:\\myDir and not c:\\myDir\\,the result of the concatenation will be\nc:\\myDirklr.core45.managed.dll.\nI suppose may be better check anyway the termination of data->klrDirectory\n. yes, I know actually this is called just a couple of time. May be a bit tedious about this, but I think you know how now people is about security and validating user input: looked to me a way to send unsafe data to a component that create an app domani, and teorically everyone can use it. \n. I found that playing with project.json and changing kre version you can run in a few problems, especially because package manager seems have a few problems Handling nuget and myget feeds.\nIf you enable the output window you can find the Package Manager log that shows better the error found during the build.\nproject.json seems is not able to resolve the -* in the package version to download the latest version automatically, but I think you can use intellisense to find a more recent version.\n@davidfowl I suggest to explain that all the vs related question must be asked in home first.\n. I updated to the latest kvm (0491), added the -* to all the packages in the project.json. Checked via intellisense, seems the packages are the latest versions, but build fails with multiple errors.\nUsing f12 to go to the definition I'm able to find the symbols that compilation tell me are missing: looks like in vs you load a reference to a library compiled with an incompatible framework.\nMy actual opinion is that at the moment the latest packages in myget are not always enough consistent to let compile a sample that use a lot of components.\nHow can I solve this problem?\n. \nthose are the error messages updating to the latest version of kre and packages\n. I have a similar problem with this\nSystem.MissingMethodException: Method not found: 'Microsoft.CodeAnalysis.Emit.EmitResult Microsoft.CodeAnalysis.Compilation.Emit(System.IO.Stream, System.String, System.String, System.IO.Stream, System.IO.Stream, System.IO.Stream, System.Collections.Generic.IEnumerable1<Microsoft.CodeAnalysis.ResourceDescription>, System.Threading.CancellationToken)'.\n at Microsoft.AspNet.Mvc.Razor.Compilation.RoslynCompilationService.Compile(String content)\n at Microsoft.AspNet.Mvc.Razor.RazorCompilationService.CompileCore(IFileInfo file)\n at Microsoft.AspNet.Mvc.Razor.RazorCompilationService.<>c__DisplayClass0.<Compile>b__1()\n at Microsoft.AspNet.Mvc.Razor.CompilerCache.GetOrAdd(IFileInfo file, Func1 compile)\n at Microsoft.AspNet.Mvc.Razor.RazorCompilationService.Compile(IFileInfo file)\n at Microsoft.AspNet.Mvc.Razor.VirtualPathRazorPageFactory.CreateInstance(String path)\n at Microsoft.AspNet.Mvc.Razor.RazorViewEngine.CreateViewEngineResult(ActionContext context, String viewName, Boolean partial)\n at Microsoft.AspNet.Mvc.Razor.RazorViewEngine.FindView(ActionContext context, String viewName)\n at Microsoft.AspNet.Mvc.Rendering.CompositeViewEngine.FindView(ActionContext context, String viewName, Boolean partial)\n at Microsoft.AspNet.Mvc.Rendering.CompositeViewEngine.FindView(ActionContext context, String viewName)\n at Microsoft.AspNet.Mvc.ViewResult.FindView(IViewEngine viewEngine, ActionContext context, String viewName)\n at Microsoft.AspNet.Mvc.ViewResult.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n at Microsoft.AspNet.Mvc.ReflectedActionInvoker.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n at Microsoft.AspNet.Mvc.ReflectedActionInvoker.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n.....\nquite sure I'm Running KRE Alpha 3 (I find this in the project properties). \n. ah, ok. found it.\nthe kre version that ships with vs is 1.0.0-alpha3. I was using the 1.0.0-alpha3-10202 to use Kulture.\nchanging the alias solved the problem\nthanks\n. you can find a few examples in the picture here\nhttps://github.com/aspnet/Home/issues/334\nA few samples\nError   CS0234  The type or namespace name 'Mvc' does not exist in the namespace 'Microsoft.AspNet' (are you missing an assembly reference?)    \nError   CS0246  The type or namespace name 'Authorize' could not be found (are you missing a using directive or an assembly reference?) \nError   CS0246  The type or namespace name 'Controller' could not be found (are you missing a using directive or an assembly reference?)    \nError   CS0246  The type or namespace name 'HttpGet' could not be found (are you missing a using directive or an assembly reference?)   \nError   CS0246  The type or namespace name 'AllowAnonymous' could not be found (are you missing a using directive or an assembly reference?)    \nError   CS0246  The type or namespace name 'IActionResult' could not be found (are you missing a using directive or an assembly reference?) \nError   CS0103  The name 'ViewBag' does not exist in the current context    \nError   CS0103  The name 'View' does not exist in the current context   \nError   CS0246  The type or namespace name 'HttpPost' could not be found (are you missing a using directive or an assembly reference?)  \nError   CS0246  The type or namespace name 'AllowAnonymous' could not be found (are you missing a using directive or an assembly reference?)    \nError   CS0246  The type or namespace name 'ValidateAntiForgeryToken' could not be found (are you missing a using directive or an assembly reference?)  \nError   CS0246  The type or namespace name 'IActionResult' could not be found (are you missing a using directive or an assembly reference?) \nError   CS0103  The name 'ModelState' does not exist in the current context \nError   CS0103  The name 'ModelState' does not exist in the current context \nError   CS0103  The name 'View' does not exist in the current context   TestMvcWithSources.ASP.NET 5.0  \nError   CS0103  The name 'View' does not exist in the current context   TestMvcWithSources.ASP.NET 5.0  \nError   CS0246  The type or namespace name 'AllowAnonymous' could not be found (are you missing a using directive or an assembly reference?)    \nError   CS0246  The type or namespace name 'HttpGet' could not be found (are you missing a using directive or an assembly reference?)\nTo repro is easy:\n1. create a new solution with a web starter project.\n2. create a new folder inside the solution folder\n3. clone a repository, in this case the mvc repository, in this folder.\n. ",
    "alexsandro-xpt": "Off comment: I think, by default System.Net.WebClient should using the set proxy from Windows OS. But is not this how to work.\n. :point_up_2:\n. ",
    "lilith": "Don't forget their unmanaged assemblies and non-assembly dependencies. Only shadow-copying managed assemblies isn't a good solution.\n. Another project that uses native dependencies is Microsoft.SqlServer.Compact, which @davideboo says works pretty well. The scripting in that package is a bit hairy. \nMoving that responsibility off of package developers and onto tooling would be great - as it's all tooling specific, and if an interface changes, old packages will become unusable. \nI've been collecting thoughts on github here; hopefully I'll be able to reorganize them as a set of best practices after some more thorough testing of the various assumptions and hypothesis. \n. Is there any documentation of this model? If I submit a PR to paket that enables this workflow, I'd like to keep the nuget syntax compatible or consistent with what you guys are doing.\n. @glennc Any news on which build systems will be supporting this? Will native package support be exclusive to VS2015 and dnx-based systems? \nAlso, have there been corresponding changes in the .NET full framework to allow native libraries to be located even when the managed libraries are loaded with shadow-copying? \n. @davidfowl Hopefully more is happening than just a /bin copy for .csproj? That's not enough for .NET to locate them when you're using a test runner or other external host that uses ShadowCopyFiles=true  on the AppDomain. \n. Can someone writeup the status of native binary packages across all 2015 platforms (full .NET framework, VS 2105, VS code, DNX, etc)?\n. - [ ] Is there documentation or tooling to guide creation of valid native packages?\n- [ ] Can a VS2015 user install a native package into a classic .NET 4.6 full project, and have unit tests 'just work', I.e, test runners will locate the appropriate native binary at runtime? \n- [ ] Does install and test work under DNX environments?\n- [ ] Will native packages ever work on VS2013?\n. Build steps do not work for classic ASP.NET or projects with unit tests (which should be all of them!), as those assemblies get left behind by the shadow copier.\n. Please bring back ANI. How are OSS libraries ever going to start being compatible with one another without this? We need loose coupling in .NET, and badly. \n. ",
    "RobSeder": "@davidfowl this is very disappointing. Bob Martin teaches us that \"the application\" should exist in code; in a class library (for .NET). Then, as an afterthought, I may choose to add a web front-end to my existing application, which exists in code.\nPrimarily though, my application is a class library, and then a unit test class library to test it. If you are saying that will be an \"afterthought\" going forward, you guys are heading in the exact wrong direction! A class library and unit test project should be the first-class citizen, then, if you have time, add support for an ASP.NET 5 project too.\n. @davidfowl That's good to hear, but I'm not seeing that in VS2015 RC. I cannot create a DNX class library, and if I reference a regular .NET library, I get DNX build errors. From ASP.NET 5 project, I can only successfully add NuGet packages, everything else fails with DNX build errors.\n. Ok - thanks!\n. ",
    "jwittner": "So is it the case that I can reference DLLs from my project.json now? Is there documentation that includes how to do this?\n. ",
    "akoeplinger": "This was a problem with how I built/setup Mono. It couldn't find libMonoPosixHelper.so when unzipping the nupkg. Workaround was specifiying LD_LIBRARY_PATH=/usr/local/lib.\n. Fixed in PR https://github.com/madskristensen/SchemaStore/pull/16\n. @nosami can you share some sample code that demonstrates the different behavior on Mono? Maybe we can fix it upstream.\n. Setting DNX_HOME like shown here works for the command line, but seems to break VS. @DamianEdwards is that env var supposed to work for VS?\n. +1 to 4a, although I think it'd be clearer if the pattern was explicit like in @bradwilson modified version 3 (which also makes a future extensions like @david-driscoll proposed more consistent):\njson\n{\n    \"projects\" : {\n        \"*\": [\"src/*\", \"test/*\"],\n        \"Foo\" : \"src/SomethingElse\",\n        \"Microsoft.AspNet.Mvc.Core\" : \"../../../Mvc/src/Microsoft.AspNet.Mvc.Core\"\n    }\n}\n. In case you missed it on JabbR: moving the relative paths from compile into compileFiles fixed the \"loop\" as you suspected.\n. Yep, thanks for the explanation, sounds good!\n. For the record, the workaround of setting MONO_THREADS_PER_CPU was put directly in dnu with https://github.com/aspnet/dnx/pull/2620, so users shouldn't need to set it themselves in the future.\n. Nice! Did you try running my original repro solution? If yes, how long did it take to enumerate all paths?\n. Sweet, that takes care of every concern I had, well done!\n. Yes, it does use the limit defined in ServicePointManager (I see multiple requests being made like on .NET).\nI just tried by setting ServicePointManager.DefaultConnectionLimit=1 and it had the same result as this PR (contrary to what I suspected). Any preferences?\n. I agree, PR updated.\n. Yes, anything >1 causes contention somewhere and massively slows it down, whatever the reason may be.\n. Sure, but given that leaving off the version is allowed in the nuspec there should at least be some better error messages if DNX doesn't support this scenario. How does nuget resolve the dependency in this case?\n. Understood. Might be a good idea to run a query over the NuGet database and see how many packages are affected.\n. I just confirmed that decompiling a DNX-built console app and adding the .entrypoint IL and running it through ilasm produces an assembly that can be run with corerun.exe.\n. @xanather at least on Unix, you should be able to modify the corerun source here to point it at the type+method name of the main method and it should then run dnx built assemblies.\n. @davidfowl one problem (which you may not care about :smile:) with the prototype and similar code in Kestrel is that it doesn't work on e.g. FreeBSD, which provides dlopen() in libc instead of libdl: https://github.com/aspnet/KestrelHttpServer/issues/94\n. I very strongly agree with @Mpdreamz on this one, for all the reason he mentioned. Running update in CI is the best solution if you want to build against the very latest packages. Reproducibility is preferred in all other cases. I'd be ecstatic if we could get rid of --lock and just always generate the nuget.lock.json (which you then check in or not).\n. @anurse can you share a bit more about the plans here?\n. Thanks :)\n. This is really great :+1: \nQuestion: If I'm reading https://github.com/aspnet/dnx/pull/2263 correctly, then the old format with . was removed and will start breaking, right? I think this should be called out more prominently in the post.\n. @moozzyk Thanks!\n. https://github.com/aspnet/dnx/issues/1835\n. @moozzyk that doesn't help me for projects which I don't control :smile: \n. To be clear, I can just remove the keyFile from project.json and it builds fine, but that is annoying and means a subpar out of the box experience when working with community projects on Mono.\n. That sounds OK to me as well.\n. Semi-related: https://github.com/aspnet/dnx/issues/2497\n. Can we please just make it \"nuget.config\" and be done with all the casing shenigans :smile:\n. I presume this fixes https://github.com/aspnet/dnx/issues/1997 as well?\n. Great :clap: \n. @davidfowl I agree with the other folks here, pack should default to release. Are you concerned about people being confused when build defaults to debug and pack doesn't?\n. typo: Entroy point\n. should this skip Mono's .mdb here as well?\n. Ah yeah, the .mdb file is only generated when you pass -debug to the mcs compiler.\n. Wouldn't this crash if scriptArguments is empty?\n. @davidfowl yeah, I did it this way to avoid impacting other commands like build, but I guess it doesn't really matter. Changed it.\n. ",
    "mgutz": "I'm having same issue, setting LD_LIBRARY_PATH didn't help on OS X Mavericks. kpm restores spits out the same errors.\n. Since you phrased it that way, I had to triple check. You were right. find -iname \"linuxMono*\" was the prefix directory\nI built to ~/.local/mono-HEAD so I had to prefix all commands, I thought it needed to be set for make\nLD_LIBRARY_PATH=~/.local/mono-HEAD/lib:$LD_LIBRARY_PATH kpm restore\nLD_LIBRARY_PATH=~/.local/mono-HEAD/lib:$LD_LIBRARY_PATH k run\n. ",
    "zsea": "I run it on Cent OS 6,it can't work.\nErro:\nwaring: libMonoPosixHelper.so\nwaring: Could not connect to the feed specified at 'https://www.nuget.org/api/v2/'. Please verify that the package source (located in the Package Manager Settings) is valid and ensure your network connectivity.\n?Unable to find package 'KoreBuild'.\nwaring: libMonoPosixHelper.so\n?Unable to find version '0.2' of package 'Sake'.\n. I tried mozroots,the problem exists.\nthe other issuses,I  tried wget \"https://nuget.org/api/v2/FindPackagesById()?Id='System.Console'\",it can work.\n. thank you very much.\n. now,i have a new problem,can you help me?\nOK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Linq' 400ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.ComponentModel' 402ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Threading.ExecutionContext' 402ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Text.RegularExpressions' 402ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Diagnostics.Debug' 422ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Reflection.Extensions' 424ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Runtime.InteropServices' 427ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.IO.FileSystem' 435ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.ApplicationContext' 439ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Collections' 442ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Reflection' 439ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Console' 445ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Runtime.Extensions' 442ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Runtime' 447ms\n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Threading.Tasks' 1992ms\nResolving complete, 2222ms elapsed\nUnable to locate System.Linq >= 4.0.0.0\nUnable to locate System.ComponentModel >= 4.0.0.0\nUnable to locate System.Threading.ExecutionContext >= 4.0.0.0\nUnable to locate System.Text.RegularExpressions >= 4.0.0.0\nUnable to locate System.Diagnostics.Debug >= 4.0.10.0\nUnable to locate System.Reflection.Extensions >= 4.0.0.0\nUnable to locate System.Runtime.InteropServices >= 4.0.20.0\nUnable to locate System.IO.FileSystem >= 4.0.10.0\nUnable to locate System.ApplicationContext >= 4.0.0.0\nUnable to locate System.Collections >= 4.0.0.0\nUnable to locate System.Reflection >= 4.0.10.0\nUnable to locate System.Console >= 4.0.0.0\nUnable to locate System.Runtime.Extensions >= 4.0.10.0\nUnable to locate System.Runtime >= 4.0.20.0\nUnable to locate System.Threading.Tasks >= 4.0.10.0\n. ok,i try it\n. ",
    "nosami": "Looks like this was fixed 2 days ago https://github.com/mono/mono/pull/1364/files.\n. Will do.... as soon as I get KRuntime to build!\n. @akoeplinger Sure. Will try and get that done sometime. It definitely needs fixing upstream if possible.\n. I'm using the same version on Yosemite without Boxen on iterm2 without problems.\n. I just installed the kre beta 2 version. Now when I source ~/.kre/kvm/kvm.sh the terminal crashes.\nThis is a pretty big deal as the installer script has added this to my ~/.zshrc file - every time I open a terminal, it crashes\n. I had to comment out the last line in ~/.kre/kvm/kvm.sh to enable me to source the file.\n``` sh\nkvm list default >/dev/null && kvm use default >/dev/null || true\n```\n. @jkodroff - are you using zsh by any chance? see https://github.com/aspnet/kvm/issues/83\n. I was seeing this error in alpha4 but it's gone in beta2.\n. Fixes https://github.com/aspnet/KRuntime/issues/826\n. I electronically signed one. Do I need to do anything else?\n@nosami https://github.com/nosami CLA?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/pull/873#issuecomment-62251323.\n. I'm getting what I think is the same error when trying to invoke the Design Time Host\n/Users/jason/.kre/packages/KRE-Mono.1.0.0-beta2-10755/bin/klr /Users/jason/.kre/packages/KRE-Mono.1.0.0-beta2-10755/bin/lib/Microsoft.Framework.DesignTimeHost/Microsoft.Framework.DesignTimeHost.dll 1334 17475 36dae6ce-a6ab-4cd8-82db-b5b6c4724766\n(36dae6ce-a6ab-4cd8-82db-b5b6c4724766, Error, 0) -> {\n  \"Message\": \"Argument cannot be null.\\nParameter name: path1\"\n}\nBuilds 10755 and 10756 are broken for me.\n. @ryan1234 try using dnu from beta6 for restoring packages. It's single threaded and more reliable. \nOmniSharp does this. https://github.com/OmniSharp/omnisharp-roslyn/blob/master/build.sh#L7-L14\n. If you use bash and you install this https://github.com/nosami/dnx-bash-completion - you can get available commands via tab completion (as well as dnvm version completion etc)\n. @pdoh00 try using dnu from beta6 for restoring packages. It's single threaded and more reliable.\nOmniSharp does this. https://github.com/OmniSharp/omnisharp-roslyn/blob/master/build.sh#L7-L14\n. ",
    "benmurray": "+1 - I get the same error.\n. Mine is OSX Mavericks, using Mono JIT compiler version 3.4.1 (master/dc872d9 Mon May 26 23:16:04 CDT 2014)\n. ",
    "naotookuda": "I get the same error on OSX Mervericks.\n. ",
    "erikbra": "You could check max open files:\n\nlaunchctl limit maxfiles\n\nI had to up the soft limit, in /etc/launchd.conf, like this:\nlimit maxfiles 16384 32768\n(16k is probably plenty. Mine was 256. You could try doubling it at first, if feeling conservative ;))\n. ",
    "ymotton": "sudo echo \"limit maxfiles 16384 32768\" >> /etc/launchd.conf\n... and a reboot fixed it for me. Thank erikbra!\n. ",
    "hoetz": "I also get the same error on Mavericks with Mono 3.6.1.\nI don't see a /etc/launchd.conf file...\n. In my case, I created the project with VS2015 and VS added the global.json into my Web project, probably to select the proper dnx version. After removing the global.json on my azure web app everything started to work again.\n. @davidebbo probably because I opened the project.json directly with Visual Studio 2015.\n. ",
    "anfomin": "I've this error too:\nRestore failed\nToo many open files\nOS X 10.11 El Capitan beta 1\n. @davidfowl, I tried to restore packages one more time with latest DNX 1.0.0-beta6-12189. This problem is still there:\n...\nWarning: FindPackagesById: System.Security.Cryptography.Encoding\n  Too many open files\n  GET https://www.myget.org/F/mindfor/api/v2/FindPackagesById()?id='System.Security.Cryptography.Encoding'\nWarning: FindPackagesById: System.Security.Cryptography.Encoding\n  Too many open files\n  GET https://www.myget.org/F/mindfor/api/v2/FindPackagesById()?id='System.Security.Cryptography.Encoding'\nError: FindPackagesById: System.Security.Cryptography.Encoding\n  Too many open files\n...\n. We have solution with 5 projects and many dependencies (MVC, EF and our staff). Restore works good for 2-3 min and throws Too many open files then.\n. Any news when this bug will be resolved? I'm trying to run vNext project from Windows on OS X just now :disappointed_relieved:\n. @pranavkm I tried aspnetvolatile right now but there is no fresh version:\n\n@davidfowl Yes, we are using latest builds from https://www.myget.org/F/aspnetvnext/ for about 5-6 months on Windows. MVC6 beta4 is great! VS2015 is still very-very slow and buggy. Moreover it often crashes when many razor views are opened.\nThere are beta-version for one of our sites running public: http://ukgorizont.ru. It's working on MVC6 + EF7.\nWe've started new project a month ago and decided to develop it under ASP.NET Core 5.0. Some of our developers using OS X and we interested in running project on mono rather that using Parallels Desktop...\n. @davidfowl @pranavkm I've tried to clear .k and start from scratch:\nbash\nLast login: Sun Feb 15 11:46:18 on ttys001\nZorroMacBook:~ afomin$ mkdir .k\nZorroMacBook:~ afomin$ curl -o ~/.k/kvm.sh https://raw.githubusercontent.com/aspnet/dotnetsdk/dev/src/kvm.sh\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 16570  100 16570    0     0  21600      0 --:--:-- --:--:-- --:--:-- 21575\nZorroMacBook:~ afomin$ source ~/.k/kvm.sh\nZorroMacBook:~ afomin$ export KRE_FEED=https://www.myget.org/F/aspnetvolatile/api/v2/\nZorroMacBook:~ afomin$ kvm upgrade\nDetermining latest version\nLatest version is 1.0.0-beta3-10921\nDownloading kre-mono.1.0.0-beta3-10921 from https://www.myget.org/F/aspnetvolatile/api/v2/\nkre-mono.1.0.0-beta3-10921 was not found in repository https://www.myget.org/F/aspnetvolatile/api/v2/\nZorroMacBook:~ afomin$\nBut with latest kvm from https://github.com/aspnet/dotnetsdk I can't upgrade to right kre.\n. Updated to latest KRE today and vNext works on OS X. Thanks!\n. Package restore is still very slow on mono 4.0.1. Any plans when performance will be improved?\nIt takes more than 10 minutes to restore packages for normal MVC+EF project on OS X. However DNU on Windows restores it in 30-60 seconds.\n. Yes, Windows 10 build 10162. Yesterday it was ok, but today throws exception.\n. I was investigating why old assembly version 4.0.0-* is downloaded however newer one 4.0.10-* exist. Some other DNX Core libraries use version 4.0.0:\nhttps://github.com/dotnet/corefx/issues/2304\n. Now I'm getting restore error for each project:\nUnable to locate System.Reflection.Primitives >= 4.0.0\nHowever there are 3 versions installed after the restore:\n4.0.0-beta-23029\n4.0.0-beta-23109\n4.0.0-beta-23110\nAnd I can build & run my projects.\n. @Eilon any news when System.Reflection.Primitive/4.0.0 will be restored?\n. Thank you! Restore works without error now.\n. ",
    "tinganho": "I'm still getting this error in your MusicStore application: https://github.com/aspnet/MusicStore/issues/514\n. @smbecker thanks.\n. ",
    "halter73": "I also see this on Yosemite (mono 4.0.3) when doing dnu restore for the MusicStore application.\n. 1.0.0-beta7-15528\n. No. As I said in my above comment, this was on mono 4.0.3.\n. :shipit: \n. Why create nonportable PDBs? Just curious.\n. So if I run dnu restore and then dnu publish, the prepare script runs twice but postrestore script runs once? Since you need to restore packages before publishing, what's the point of running prepare as part of dnu publish?\n. Why not use this on the desktop CLR too? If someone actually depends on this being backed by the current AppDomain, I think they should use the AppDomain directly.\n. Really. Do you know why? Is there a bug in Version?\n. Is there a reason this is no longer static?\n. What's the difference between returning null and returning a FrameworkInformation object with Exists false?\n. Why didn't this have a postbuild step previously?\n. I notice the sh script creates the directory if it doesn't exists and carries on. Is there a reason for having different behavior between the two batchcopy scripts?\n. Is there a way to test that setting DNX_BUILD_PORTABLE_PDB creates a portable pdb when SupportsPdbGeneration returns true.\n. The filename should be DnxSdkFunctionalTestBase\n. Why ex.Message instead of ex.ToString() like you use for TraceError?\n. ",
    "BrennanConroy": "dnx version?\n. CoreCLR I'm assuming. Use a newer version\n. I changed the default KRE to 446 and left everything the same. Then the app ran without any errors.\n. I changed the project to .NET 4.5.1 updated the KRE and put all the dependencies to * and it works. But by default when you make a new web app it is set to .NET 4.5, the project.json has explicit version numbers, and unless you use 446 for the KRE it has errors.\n. dupe of #1376 even though this came first :P \n. @ZOXEXIVO DNX is not being worked on anymore, see https://github.com/aspnet/dnx/blob/dev/README.md\n. Currently we are modifying the project.json file to have the correct path for wwwroot.\nWe generate the web.config with application specific values.\nAnd we make the global.json file with relative path information.\nIt seems like there would be a lot of performance hits if we added the logic to parse these files and see if everything is correct inside them.\n@muratg \n. This should be fixed with 6b0dc2bfeb79a6490f7613c8086c2d6de13a95a6\n. I made a PR, and then we were going to use STL instead, neither of which has gone through yet.\nhttps://github.com/aspnet/dnx/pull/1363\n. 71cb0ee4c1a01efe4fdae5ef9d58e839604fe1d3\n. \n\nMade the package source yellow, and for remote made it bold\n. No PR yet. Was wanting your feedback first\nSent from my HTC\n----- Reply message -----\nFrom: \"Praburaj Thiagarajan\" notifications@github.com\nTo: \"aspnet/XRE\" XRE@noreply.github.com\nCc: \"Brennan Conroy\" brecon@microsoft.com\nSubject: [XRE] Print feed does not exist warning with a different color (like yellow) (#1051)\nDate: Fri, Feb 20, 2015 5:03 PM\n@BrennanConroyhttps://github.com/BrennanConroy is there a PR for this?\nAnd it would be good to make the word Warning: in yellow.\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/XRE/issues/1051#issuecomment-75346824.\n. If we made Warning: yellow we would probably need to do that across all repos to be consistent.\n. @victorhurdugaci Looks like this should be closed?\n. Should we nuke any pre-existing nupkg that are also in that directory? Like the ones left from a successful build.\n. Done\n. 39a75d9a2afa92a159b381f500d51ff82c9e109f\n. ping\n. Tooling team has made a fix on their side.\nWhat do we want to do in bundle now as far as overwriting files, never overwrite, or always overwrite?\n. It just started working, didn't change anything\n. Made the FileFormatException insert the path into the exception string\n. To tell the developer where the project.Json file that failed is located. The exception message doesn't contain it\nSent from my HTC\n----- Reply message -----\nFrom: \"David Fowler\" notifications@github.com\nTo: \"aspnet/XRE\" XRE@noreply.github.com\nCc: \"Brennan Conroy\" brecon@microsoft.com\nSubject: [XRE] Path to project.json now shown (#1236)\nDate: Tue, Feb 17, 2015 4:52 PM\nWhat is the purpose of this change?\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/XRE/pull/1236#issuecomment-74789290.\n. Running kpm restore/build propagates this exception to kre.host.shared where it calls PrintError(ex) so we can't handle it in apphost.\n. It is used in 1 place\n. Have you tried --ignore-failed-sources?\n. There are a lot of files missing copyright\n. What happened to fixing the misspelling of occurred\n. @Praburaj \n. VS output doesn't do color (if it does please tell me how!) so it is unaffected by this change.\n. Should be [MAX_PATH * 2 + 3] unless CreateAppDomainWithManager expects a certain sized string.\nWe should also print the value of errno in the CHECK_RETURN_VALUE_FAIL_EXIT_VIA_FINISHED macro and possibly include the line number __LINE__ and file just in case __FILE__\n. Updated\n. I can make the scope of the parameter handler only for this function and then the PR should be final. But we were wanting to use the STL which would get rid of this issue entirely @moozzyk \n. There is a nice chart near the beginning that shows all the name changes\nhttps://www.youtube.com/watch?v=-qt0POsiAF8\n. Thoughts?\n\n. @bricelam @Eilon \n. Pretty sure I tested that.\n. Updated\nThe RestoreForInstall function is going away in #1370\n. I think it's good.\n. I made a fix for this just now\n. @davidfowl @victorhurdugaci \n. Updated\n. @anurse @davidfowl \n. @ellismg rebased, could you take a quick look to see if I missed anything?\n. Change is only in dnx.cpp. No extra work needed.\n. \n@davidfowl \n. \n\n. My bad! Fixed\n. Not a big fan of adding catch and retry. But I tested it and it works, the recursive copy didn't work.\n. BootstrapperOptionValueNum() in EntryPoint.cs for Mono had incorrect string checks for -? and -h\nFixing as part of --debug flag #1426 \n. I can, using dnx v11360\n. I will write unit tests for dnu and dnx commands after fixing this issue.\n. @dougajmcdonald\nWhat dnx version are you using? I'm guessing it is older than beta5-11702\n. Get the latest dnvm, either download manually or run dnvm update-self, then run dnvm upgrade -u for the unstable (vnext myget) feed. That's all that should be needed to get the latest\n. Ok, are you wanting to use beta4 or beta5 because you can't mix them. You are using beta4 dnx with a beta5 SecretManager. If you want to get the latest dnvm follow the instructions here: https://github.com/aspnet/Home\nThen use dnvm upgrade -u to get beta5 dnx. Otherwise uninstall the SecretManager app you have and reinstall using your beta4 dnx pointing at the beta4 feed\n. Its a regression: https://github.com/aspnet/dnx/issues/1808\n. Wrote on the issue that I will write tests for the dnu/dnx commands after this fix.\nSent from my HTC\n----- Reply message -----\nFrom: \"David Fowler\" notifications@github.com\nTo: \"aspnet/dnx\" dnx@noreply.github.com\nCc: \"Brennan Conroy\" brecon@microsoft.com\nSubject: [dnx] Checking if version exists before using it (#1498)\nDate: Wed, Mar 25, 2015 3:27 PM\nNo test?\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/dnx/pull/1498#issuecomment-86236710.\n. Because I'm going to write a bunch of them and wanted this fix out asap. I can write 1 for now.\nSent from my HTC\n----- Reply message -----\nFrom: \"David Fowler\" notifications@github.com\nTo: \"aspnet/dnx\" dnx@noreply.github.com\nCc: \"Brennan Conroy\" brecon@microsoft.com\nSubject: [dnx] Checking if version exists before using it (#1498)\nDate: Wed, Mar 25, 2015 3:32 PM\nWhy? A simple unit test will suffice.\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/dnx/pull/1498#issuecomment-86238085.\n. It is only null for Microsoft.Framework.Project, we could add it, similar to Microsoft.Framework.ApplicationHost's\n. @ChengTian \nI will run this a few times on my box that was getting this issue.\n. This didn't fix the issue, got the exact same error as before but instead of from Directory.Move it says from DirectoryInfo.MoveTo\n. Does this actually fix it? Or is this just \"security through obscurity\"?\n. :+1: and even then you can usually get away with just building parts of it and replacing those parts in the version you have installed.\n. 549c7753dd6fd13a693dc66e3ef8dd1e8effecf3\n. This error only occurs when using a dnx framework that isn't supported in the application. i.e. dnx-coreclr with a project.json that only has dnx451 as a target framework.\n. e577e41302b64777fe7ff88e64a0e6d1f3a7234e\n. I'd like to add a test, but either need to make UninstallCommand a public class or make internals visible to the test project\n. @victorhurdugaci @davidfowl \nPing\n. @victorhurdugaci \nUpdated\nThe travis failure is because of a change in Universe that was fixed in: https://github.com/aspnet/Universe/commit/789544a1e80c7ef0e011b1bf9b8a3ec9fd501939\n. @troydai \n. Ping @troydai @victorhurdugaci \n. If we want to support this what should the behavior be for:\ndnu --help . <some dll>\nThe current behavior is that we just display the help and ignored all other arguments, but if we want --help and friends to take [command] that won't work\n. @kichalla \nAre you just wanting us to change the -?|-h|--help text? Something like \"Show this help page\"\n. @kichalla \nDoes this resolve the issue? https://github.com/aspnet/dnx/commit/b084dadba551fc1cb0bafb8782f215d455fbbfb4\n. This is expected behavior, other command line tools follow this convention.\nTalked with @ChengTian @Eilon \n. This only happens on beta4 dnx, beta5 works.\n. 677d6c3c45a92171cf92a68ee6eefd55d4fe91a3\n. Biggest concern with STL is if we are concerned about speed. Otherwise I'm all for it\n@davidfowl \n. :watch: comments\n. dnvm upgrade -u\n. Look at the TestAssembly class and try to make it compile for both CoreCLR and Desktop.\n. @davidfowl \nTravis passed!\n. Made a common test project\n. Done with #1627?\n. Looks good to me.\n. I'm getting a similar error on my Win8.1 laptop. But I get it consistently when I use dnu commands uninstall ...\n. Ah, I probably didn't update my submodules\n. dupe of #1637 \n. Haha, good question. I actually found this when a test I wrote failed because it didn't have the full path I was expecting. I will make a PR soon with a bunch of tests.\n. Added tests\n. @davidfowl \nPing\n. @victorhurdugaci @davidfowl \nThe travis failure is because of console colors, which will be fixed by #1860\n. Yea because of the console color showing up in stdout on crossplat.\nSent from my HTC\n----- Reply message -----\nFrom: \"David Fowler\" notifications@github.com\nTo: \"aspnet/dnx\" dnx@noreply.github.com\nCc: \"Brennan Conroy\" brecon@microsoft.com\nSubject: [dnx] Fix path for --out in dnu pack (#1646)\nDate: Fri, May 22, 2015 1:01 AM\nDid travis fail for this change?\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/dnx/pull/1646#issuecomment-104557177.\n. Looks good to me\n. ?\n. https://github.com/aspnet/dnx/blob/dev/test/Microsoft.Framework.FunctionalTestUtils/TestUtils.cs#L91\n. Oh no D: why not?\n. Version 14.0.22823.1 D14REL doesn't seem to have this issue.\n. Close as dupe: #1777 \n. :sheep: :it: \n. I like this format, makes everything a lot more visible\n. The functional tests test all the CLR versions of dnx, and they should have coverage of things like dnu pack and dnu restore, so the non-functional tests just need to grab any dnx and use it.\n. This might be related to #1568 \nIf you uninstall it uses the current directory and relative paths from current directory, that PR fixes it.\n. @tugberkugurlu \nI haven't been able to repro this yet. Can you do this consistently? Do you have multiple commands installed globally? Could you run dnu -v commands uninstall k-http?\n. @tugberkugurlu \nThis might be fixed with 7b8e7bc5e723f704e9e1950ba2ecfcd814b49b3b, since I could not reproduce your error could you verify, else I will close as fixed.\n. Fixed, also the CI's passed just before I changed it\n. @davidfowl \nShould we get this in?\nI filed an issue on CoreFX\nhttps://github.com/dotnet/corefx/issues/1745\n. @davidfowl @moozzyk \nPlease review before Monday\n. Updated\n. 046a0595d32357b7ef5c5c58fe877b2225cad8fb\n. @davidfowl @ChengTian \nPassing services everywhere\n. After talking with David, we would like to do something similar to what Platformhelper did, so my proposed solution is:\n```\ninternal static class RuntimeEnvironmentHelper\n{\n    private static Lazy _isMono = new Lazy(() => ((IRuntimeEnvironment)Services.GetService(typeof(IRuntimeEnvironment))).RuntimeType == \"Mono\");\n    private static Lazy _isWindows = new Lazy(() => ((IRuntimeEnvironment)Services.GetService(typeof(IRuntimeEnvironment))).RuntimeType == \"Mono\");\npublic static IServiceProvider Services { private get; set; }\n\npublic static bool IsWindows\n{\n    get\n    {\n        if(Services == null)\n        {\n            throw new NullReferenceException(\"Services hasn't been assigned yet\");\n        }\n\n        return _isWindows.Value;\n    }\n}\n\npublic static bool IsMono\n{\n    get\n    {\n        if (Services == null)\n        {\n            throw new NullReferenceException(\"Services hasn't been assigned yet\");\n        }\n\n        return _isMono.Value;\n    }\n}\n\n}\n```\nWe will need to initialize the Services at the beginning, and then we can use the Helper just like we did PlatformHelper before, which will keep the code a lot cleaner.\n. Oh ya, that's a good idea\n. We can't merge this until we use a version of mono that doesn't null-ref\n. Looks like Mono has fixed the Execution Context issue in the released bits, will run some more to be sure.\n. :shipit: \n. Looks good, :watch: tests\n. OSSkipCondition should probably use \"Linux\" instead of \"Unix\"\n. Ya I know, I'm talking about the internals of the class\n. Yes please!\n. Looks good\n. https://github.com/projectkudu/kudu/issues/1623 (Read architecture and runtime from global.json) [fixed]\n. @victorhurdugaci \nMade changes, take a quick look?\n. @davidfowl \nIs this more like what you want?\n. He suggested useAnsiCodes >.>\n. https://github.com/aspnet/dnx/commit/c994f49153e23e4740205f0e58f78eb526135909\n. https://github.com/aspnet/dnx/commit/c994f49153e23e4740205f0e58f78eb526135909\n. https://github.com/aspnet/dnx/commit/c994f49153e23e4740205f0e58f78eb526135909\n. Follow: #1724\n. Are you on Mono 4.0.0 or 4.0.1? This seems to be happening on those versions. 3.12.1 works last I checked.\n. :shipit: \n. Most, if not all, dnu related commands are not going to work on Non-Windows CoreCLR. This is a known issue and we are working on getting them ready.\n. Closing, this is being tracked by #1793 \n. The above error is because NuGet uses Environment Variables that don't have values on non-windows OS's. Tracked by: https://github.com/NuGet/Home/issues/472\n. I don't think so. We have an email thread with them.\n. Fixed with https://github.com/aspnet/dnx/pull/2397\n. The next version of dnx after 12302\n. Sorry, I fixed the breaking change to version 12302 but then another breaking change came in. I'll be fixing it and trying to get a build out soon.\n. If you're using beta8 use 15138 or later\n. Dnu on Xplat CoreCLR is working, we will still be tracking NuGet-related paths/files should be case-sensitively consistent (#2270)\n. :shipit: \n. Other than comment, :shipit: \n. fixed with: 7b8e7bc5e723f704e9e1950ba2ecfcd814b49b3b\n. @victorhurdugaci @troydai \n. @victorhurdugaci \n. https://github.com/aspnet/Home/issues/498\n. I believe this is waiting on #1692 which we will hopefully get in soon.\n. We'd need to update the parsing in Common Testutils too\n. That wont work Cross-Plat, you can't do a get on the console color :(\n. We could do something similar to AnsiConsole if we are ok with doing that.\n. Should be fixed by #1860 \n. 3ca17d571801e3db18cde4d017485bc2851a13cd\n. Is this in?\n. Ya, I think I only needed to change 1 other repo. But I'll make sure.\n. @davidfowl Has the second ended yet?\n. :+1:\n. :shipit: \n. VS friendly?\n. This is fixed with https://github.com/aspnet/dnx/commit/6b0dc2bfeb79a6490f7613c8086c2d6de13a95a6\nSo, the next build of dnx will have the fix.\n. Updated exception. We can't use c#6 features because when building dnx-mono we use an old .NET compiler version. @davidfowl said there might be a way around this\n. Fixed: f1b13799a4e165147827ebecb8dff00f6f48e677\n. Looks pretty nice.\n. :shipit: \n. :shipit: \n. My favorite kind of PR...\nI think it looks good.\n:ship: :it: ?\n. How bleeding edge are we talking? https://github.com/aspnet/dnx/commit/6b0dc2bfeb79a6490f7613c8086c2d6de13a95a6 which should be in >= 11781 added better errors for json\n. Actually only > 11781\n. We have --ignore-failed-sources, did you try that?\n. There is an issue with the latest CoreCLR bits on cross-plat CoreCLR, if you want a temporary solution use CoreCLR 1.0.0-beta5-10405 instead of 10407\n. @davidfowl @troydai @victorhurdugaci \n. Are effective feeds ones that installed packages came from? Or does it include ones where the package was found but it was cached?\n. Intellisense will show up if you select DNX Core 5.0 from the drop-down in the top left.\n. dupe of #1923\n. Ship it from @davidfowl \n955fc0904614f3ca70bffaa65d7f134372497857\n. @davidfowl \n. f3e22af80c7bddea28c8f24b00f175ae67b9e835\n. Here too if we run tests on arm: https://github.com/aspnet/dnx/blob/32358ec9b8970070ff77cbc5beef28c13e3ab09b/test/dnx.host.Tests/RuntimeEnvironmentTests.cs#L42\n. dupe #1553\n. Should be fixed after upgrading the mono version travis was using\n. Looks good. :ship: :it: \n. Probably just make sure you have the mono dnx runtime selected and do your normal app execution with it?\n. Fix tests!\n. You probably have an older dnvm, this issue has been fixed.\n. I don't think we have a way to upgrade right now, except brew remove, then reinstall\n. You have to wait for the next dnx version to come out.\n. Does --overwrite not work?\n. Should we change the behavior of overwrite or add a new command? If new command what should it be called.\n. 004e130e3307a7c241789bb043873b718607ae45\n. This is a mono issue: https://bugzilla.xamarin.com/show_bug.cgi?id=30018\n. I'll have to try that tomorrow, how did you find that?\n. :ship: :it:\n. Updated\n. I'm guessing you aren't on Windows then, this is a known issue, you can see https://github.com/aspnet/dnx/issues/1813\n. @ChengTian \n. Makes sense, we should add some checking for environment variable validity. @ChengTian this should probably go in the fix you're doing for correct-local-appdata\n. Before:\n\nAfter:\nSame except remove the 10 package(s) line\nEasily reproducible by installing a global command.\n. Nothing different.\n. Yes!\n. f27d11518c78009eb44e6985e343e69efbb430ee\n. Fix tests!\n. Fixed by #1692 once it goes in.\n. Can you check this? Should be fixed in latest.\n. This is a known issue, please track it at #1793\n. :ship: :it: \n. Do you have any redirect config files?\n. @anurse \n. Wait for the next dnx version.\n. Unix tests fail\n. fix hash\n. https://ci.appveyor.com/project/aspnetci/dnx/build/1.0.2252\nLooks like something is wrong in this PR.\n. 1d23ce503d5a2b305320cd1c7c607d5e5e4efc03\n. Could you remove the goto?\nSent from my HTC\n----- Reply message -----\nFrom: \"Troy Dai\" notifications@github.com\nTo: \"aspnet/dnx\" dnx@noreply.github.com\nCc: \"Brennan Conroy\" brecon@microsoft.com\nSubject: [dnx] Add framework to diagnostic from compilation (#2272)\nDate: Thu, Jul 16, 2015 6:44 PM\nNeed sign off @davidfowlhttps://github.com/davidfowl @muratghttps://github.com/muratg @BrennanConroyhttps://github.com/BrennanConroy @victorhurdugacihttps://github.com/victorhurdugaci @anursehttps://github.com/anurse\nVerified by @BillHieberthttps://github.com/BillHiebert\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/dnx/pull/2272#issuecomment-122145759.\n. @moozzyk \nTalked with Fowler, and we doing the passing Environment variable\n. :shipit: \n. We run restore many times a day on both Linux and OS X on mono and it doesn't hang. We don't use myget.org though, so maybe it is related to that.\n. Have you seen this since beta7?\n. This is being tracked by #1793\n. Add test for rooted path\n. Fixed in dbbac90b850ac5f329167e89c3a88b8e868b22f8\nUse a different dnx version for now or wait until a new build is out.\n. Move to dnvm repo please\n. Move to dnvm repo please\n. Looks good. Are you doing the same for other repos?\n. Can you provide an example of your application?\n. d7e305e3e364041d4f2312d46f61317d75564ff2\n. Works for me, do you not have permission to add .\\SomeFolder?\n. If you take an older dnx on an older dnx project and set DNX_TRACE=1 you will see that tests load the 99.99.99.0 xunit files. So something in the PR does not like those assemblies.\n. They just emailed me, and the binary has been renamed. They also suggested taking any System.*.so/dylib for the upcoming beta. Thoughts?\n. @davidfowl \n. 7fd246c0b5e9c134786f3eeac7ff6774cdc498a2\n. I could repro this before, but on dnx 1.0.0-beta7-12348 it is no longer null.\n. You have to replace System.Reflection.Metadata and System.Collections.Immutable\n. Haven't been able to repro this for quite a few builds. Closing.\n. Could you give some details please\nSent from my HTC\n----- Reply message -----\nFrom: \"Grahame Horner\" notifications@github.com\nTo: \"aspnet/dnx\" dnx@noreply.github.com\nCc: \"Brennan Conroy\" brecon@microsoft.com\nSubject: [dnx] CallContextServiceLocator.Locator is null on CoreCLR x-plat (#2442)\nDate: Fri, Sep 18, 2015 5:50 AM\nwas this fixed in the beta7 release; I'm still seeing the issue with aspnet console applications?\n\nReply to this email directly or view it on GitHubhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fissues%2f2442%23issuecomment-141443286&data=01%7c01%7cbrecon%40microsoft.com%7cfcaa1c6a7dd54d94410808d2c027b3de%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=%2biPNd%2b5%2fyNf89d6b%2fSLaSod0gk5lciQOqTGvt9tcO8c%3d.\n. Ya, latest X-Plat CoreCLR bits are not usable, sorry.\n. This should be fixed with the latest dnx's\n. beta8-15138 or beta7-15131\n. Changed it a little since Mono didn't like our new header.\n. So all the failures are because the file path we are looking for doesn't have /private/ in the front. Not sure why yet.\n. Idea:\nIn Microsoft.Dnx.CommonTestUtils the CreateTempDir function we save the current directory, then set the current directory to the created temp directory, then set the temp directory string to the value from get current directory, and reset the current directory. Tested it locally on a Mac for the Microsoft.Dnx.Tooling.FunctionTests and it worked\n. fb88afaeed702b1af730f49b49f696b3f8e8b68f\n. Oh, this is fixed by: 1f0e103a277c6774be5cdb1f665841e4c5e75fb0 and f3103122c058632007ce915a2edd0884130d427b\n. LGTM\n. Like Chris said, we should do this but it's not as bad after my change\nSent from my HTC\n----- Reply message -----\nFrom: \"Murat Girgin\" notifications@github.com\nTo: \"aspnet/dnx\" dnx@noreply.github.com\nCc: \"Brennan Conroy\" brecon@microsoft.com\nSubject: [dnx] We never dispose HttpClient in restore (#2560)\nDate: Mon, Sep 14, 2015 8:20 AM\n@BrennanConroyhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2fBrennanConroy&data=01%7c01%7cbrecon%40microsoft.com%7c799ce4c5201d428f08eb08d2bd180365%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=VgeSAY9E%2bmAoPdURxaNaOSrzMBy28%2bSN%2fxDJ%2ftOUN4w%3d Is this still needed after your change?\n\nReply to this email directly or view it on GitHubhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fissues%2f2560%23issuecomment-140113983&data=01%7c01%7cbrecon%40microsoft.com%7c799ce4c5201d428f08eb08d2bd180365%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=jTWDqTmpvJyiAebOOykw5yo18INtS1%2b7iVwHiBNA%2f6U%3d.\n. f3103122c058632007ce915a2edd0884130d427b\n. Both of these commands already support this\n. 15530 was a bad build, sorry about that. You can either go down to 15517 or wait for a newer version that works to come out.\n. Ya, this is because the dll in the nupkg was windows specific.\n. Later versions of this package have a runtime.json with osx and Linux targets defined\n. It might be once Coherence passes.\n. Should also update the NetCore.Platforms list too\n. So should it just resolve to D:/aspnet/dnx/etc...?\n. 8ec9f73835f801f7ee880e611bf45ef80688b5dd\n. Looks like we need to copy System.Net.Http.Native.so and System.Security.Cryptography.Native.so to the Microsoft.Dnx.Tooling folder in the dnx\n. fc105f626e1a04511918143644ade299d7b60b38\n. Not sure how you are seeing this, I just tested it on my Linux machine and it works fine.\n. Wrong getting started, try this http://docs.asp.net/en/latest/getting-started/installing-on-linux.html\n. System.Security.Cryptography.Native.so was already in the bin folder\n. Looks good :shipit: \n. 89176054260b6b249d0a1b7c523c9ffcad85886d\n. Troll...\n. :shipit: \n. \"The remote server returned an error: (404) Not Found.\" when trying to download dnxcoreclr\n. 2fc505893d82def50e0828b8a7030ff54ee3b637\n. Squash, copyright and :shipit: \n. Configuration too: https://github.com/aspnet/Configuration/blob/dev/test/Microsoft.Framework.Configuration.FunctionalTests/project.json\n. Looks like you don't have everything installed that you need for CoreCLR, see: http://docs.asp.net/en/latest/getting-started/installing-on-linux.html\n. That one looks old, use the one I linked\n. Then kick them off again\n. :shipit: please!\n. Tested on Mac and this gets rid of the Trace/BPT error we were seeing.\n. This looks like a CoreCLR issue not dnx\n. Can we add linux and darwin to the postbuild scripts?\n. File #2684 \n. Updated\n. 89176054260b6b249d0a1b7c523c9ffcad85886d\n. This could probably be fixed if we copy the dll to the bin folder as well as keep it in the Tooling folder\n. I haven't tried anything like this, the client may have more features now, especially since we haven't tried a new one in a couple weeks. We should try this when we grab the new bits.\n. Fixed by a few different changes, wont list them all here, but one is https://github.com/aspnet/dnx/commit/a64c8d50eab71d884cd53e432b1b64e0cf432200\n. Mono 3.12.1? Upgrade mono\n. Travis failure?\n. Cool, talk to me before pushing.\n. a64c8d50eab71d884cd53e432b1b64e0cf432200\n. Might be https://bugzilla.xamarin.com/show_bug.cgi?id=30018\n. Ya, if its the same issue then that was also consistent.\n. Travis wont pass until aspnetcidev has new dnx's\n. This is to unblock CoreCLR\n. Updated\n. Waiting for a fix from Andrew to add a couple RIDs, Travis wont pass for this PR, because it assumes we are using a newer coreclr than it will grab.\n. @davidfowl @anurse \nAll extraBinaries removed, verified on Windows and Linux, currently building on Mac. Please review\n. Only System.Net.Http is in extra binaries, should be able to remove it later today\n. Yes, read the comments\n. This was fixed by https://github.com/aspnet/FileSystem/pull/152\n. I doubt it, they use a rc1 build of dnx\n. https://github.com/dotnet/cli/blob/d461755c547f3517e083fab2fdd92a4385003851/scripts/obtain/install-dnx.ps1#L9\n. Ah, 15882 has the change so they're good\n. :shipit: \n. They are using an old version of dnvm most likely. Upgrade dnvm and reinstall the dnx\n. Run dnvm update-self then dnvm install 1.0.0-beta8-15618 -f to reinstall the \"bad\" dnx. If the update-self doesn't work its possible you got a broken build of dnvm in which case you should delete it and reinstall following the instructions at https://github.com/aspnet/Home/blob/dev/GettingStartedDeb.md#get-dnvm\n. If you rebased on my changes yes.\n. Kick travis again\n. DNVM already accepts both, we'll just have to invert the behavior of changing osx to darwin\n. This should be fixed in ~1 hour\n. Should be fixed\n. :shipit: but let Pawel look first\n. efe7ceb259a49f55da9de6456cbe54a3ed769646\n. You are using the aspnetci feed packages with a vnext feed dnx. Either read this https://github.com/aspnet/Announcements/issues/68 and work around it or use the same feed for packages and dnx\n. Look at your nuget.configs\n. Not recommended. You should be using vnext feed only for unstable bits\n. Doesn't build on Travis\n. That's because you're supposed to use dnx\n. You need to brew install icu4c now\n. @moozzyk \n. As long as the nupkg got built correctly :shipit: \n. LGTM\n. :+1: just need to add the variables to the CI\n. This is still an issue in RC1\nInformation: [LoaderContainer]: Load name=--packages, Culture=neutral, PublicKeyToken=null\nError: Unable to load application or execute command '--packages'. Available commands: web, kestrel.\n. Remove my latest commit as part of this once the publish issue is fixed :D\nSent from my HTC\n----- Reply message -----\nFrom: \"Murat Girgin\" notifications@github.com\nTo: \"aspnet/dnx\" dnx@noreply.github.com\nCc: \"Brennan Conroy\" brecon@microsoft.com\nSubject: [dnx] Review and clean-up Microsoft.Dnx dependencies (#2947)\nDate: Fri, Oct 9, 2015 3:58 PM\n[:+1:] @anursehttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2fanurse&data=01%7c01%7cbrecon%40microsoft.com%7c566e92507ab84aafc4f808d2d0e3fd07%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=ZrvTNrwb5Wau0iuvQF6jI%2fGjvP0tWorw7S3zVV3IRcA%3d could you drive this one Beta 8 is out? Please get help from @BrennanConroyhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2fBrennanConroy&data=01%7c01%7cbrecon%40microsoft.com%7c566e92507ab84aafc4f808d2d0e3fd07%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=rd3N95%2bkesd4DLHxwemZKcew3LUL1xDxbGv6kcj5Ddg%3d et.al.\n\nReply to this email directly or view it on GitHubhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fissues%2f2947%23issuecomment-146973322&data=01%7c01%7cbrecon%40microsoft.com%7c566e92507ab84aafc4f808d2d0e3fd07%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=%2fMnEkstwoVyTsNko39qyXYahOGVliQOUGHcXsabwSZY%3d.\n. 82c77a11b15821b451641e9372494e28eb7d902d\n. The keys are case sensitive, I'll look into fixing that.\n. 82c77a11b15821b451641e9372494e28eb7d902d\n. :+1: is that the only affected test?\n. I think you need to add the runtime to the front of the path instead of replacing the path\n. What was the last build you saw actually work?\n. bf1ae43c6bac2b1cdc691ec8aec58a6c154125ae\n. dotnet5.4 runs on dnxcore50 so that's fine\n. :up: :date: \n. Ooh, its green. Pushing\n. SecretManager is not the name of the command to uninstall\ndnu commands uninstall user-secret\n. :shipit: \nWhen merging to dev use git merge release -s ours\n. Failure is because Travis is using 12.04 instead of Trusty, sent them an email\n. 24aad0f395a844d13198c332c3e588212f98900f\n. And what version of dnx-watch are you using\n. You need to run dnu commands install <package> -s <feed> and use the same DNX as the package version installed\n. sudo chown -R Arda:group .dnx\n. That will recurse the folders in .dnx\n. PKG Fixed with Update1\n. run dnvm update-self\n. You'll need to manually update the dnvm then. Replace your dnvm.cmd with https://github.com/aspnet/Home/blob/dev/dnvm.cmd\n. The command line utils package has moved to https://github.com/aspnet/Common/src/Microsoft.Extensions.CommandLineUtils\nAlso it is now an actual package and no longer a source package.\n. You have to restore on the windows machine passing in the linux runtime id so that it restores the linux specific dependencies\n. dnu restore --runtime centos.7.1-x64\n. Actually, you should install the dnx you want to publish with and do dnu publish --runtime <linux dnx> and that should do everything I believe\n. dnu publish --out <path> --runtime dnx-coreclr-linux-x64\nvs.\ndnu publish --out <path> --runtime dnx-coreclr-win-x64\nunfortunately you're trying centos which will create a lot of difficulties for you since we didn't make a centos dnx\n. Closed via #3276\n. It wont be used by the CLI very soon\n. You probably grabbed that package from the aspnetcidev feed somehow. Either you cloned one of our repos which has its own local nuget.config or you did restore and passed in that feed\n. @Kinani DNX has been retired since RC2 and has been superseded by dotnet CLI (https://github.com/dotnet/cli) Please give it a shot to see if your scenario is fixed there, and if not, feel free to file a bug there as well.\n. @kscott5 Just an FYI, dnu/dnx is no longer in development. We have moved onto the dotnet cli see https://github.com/dotnet/cli\n. Verbal squirrel from @victorhurdugaci \n. I should only make packages that are built by dnx be update2\n. :up: :date: \nFixed some of the update1 references\n. I think Windows Server 2003 is too old for DNX, oldest version I've seen it on is Windows 2008 R2\n. DNX is retired\n. mush -> must\n. Move these below the publishElement checks since they aren't used until after the checks?\n. programArgs is updated in ParseArgs but not actually used anywhere. Unless this is for some future use?\n. Copyright info\n. Don't know if there is a better way to do this, but these if checks can run twice if the Equals(object) calls this\n. Elsewhere in XRE we use Path.DirectorySeparatorChar and Path.AltDirectorySeparatorChar\n. If check shouldn't be necessary\n. move this to append string.Format like the others\n. Making this size_t will cause the below if statement to always be false, and might cause other issues too.\n. :+1: \n. .clear() instead\nActually, this is the first time it is used, nothing needs to be done to it. (Remove it)\n. Seems odd to be doing a null check after the array has been used\n. I think you meant\nruntimeDirectory = coreClrEnvVar;\n. I liked the variable name pathLen you used earlier for similar code.\n. nit: Move if check to above CreateTpaBase\n. Should be argc > i + 1\nAlso, need to move the argv[i] = L\"\\0\"; to outside of the if check\n. argv[argc - 1] = L\"\\0\";\n. He wants it to be \"Microsoft .NET Development Utility\"\n. Looks like someone else added this, will remove\n. nit: space above if\n. On mono if you do --parallel it will not work, unless we just remove the option on mono\n. We used to do it the other way; Unit tests depended on functional tests. They share some Utilities. But now that the unit tests have dnxcore50 as a target framework and the functional tests \"don't\", moving the utilities to the unit tests makes it all work.\n. Probably\n. Already did property.Value.ToString() above, reuse resourcePath variable.\n. Unused variable\n. That could be taken either way D:\n. too much /r/n!\n. \"Failed\"\n. return CXX;?\n. clang++-3.5\n. i <= ret saves an array index\n. Actually just < I believe\n. Might as well make these functions const\n. const std::string &\n. const std::wstring &\n. Same as above\n. nit: Space after [NotNull]\n. So do you want a \"test common project\" or not?\n. I think you should check the actual output in these tests.\nstring expected = @\"some dnu list text\";\nAssert.Equal(expected, stdOut);\n. Another way of looking at it is, if you make a minor output format change you should be checking the tests and updating them. Also, it can catch minor output bugs, I just found one yesterday because I was checking the output in some tests.\n. This seems like it should be separate from this class, a static method somewhere so that other tests can use it. Right now this class is specific to DnuList.\n. Why are you grabbing potentially only part of the newline?\n. Couldn't this result in OutOfRange Exception?\n. Because CoreCLR only has Path.Combine(string []) and it needed Path.Combine(string, string)\n. If you do i < argc - 1 here you don't need it in the if below and keep the same behavior.\n. Why const? Should just be able to reinterpret_cast<dnx::char_t **>(argv)\n. This can also start at i = 1 I believe\n. Ya, I just noticed that data.argv is const, all good here :)\n. You use std::string() and dnx::xstring_t() randomly throughout this file.\n. Spacing\n. Don't need IApplicationEnvironment to be a parameter anymore.\n. This can be removed since we replaced it with the Logger\n. Shouldn't verbose mean we want quiet messages too?\nif(verbose || quiet)\n. ?\n. Should these stay as WriteQuiet?\n. Change name\n. This seems like a good thing to keep\n. Use $\"\" like above?\n. Change name\n. What Project object? All the other tests hardcode the json.\n. I could change this to unit tests, since it is a weird mix between unit and functional, but we need internals visible otherwise the only way to test this is to compromise the users current installs\n. What am I supposed to use instead D:<\n. Troy understands: Re-add, Linux and Darwin matter too!\n. Oh wow, I wasn't thinking D:\n. IServiceProvider unfortunately isn't easily accessible to a lot of the locations that use PlatformHelper. For the places it is, something similar to if((((IRuntimeEnvironment)_services.GetService(typeof(IRuntimeEnvironment))).RuntimeType == \"Mono\")) will need to be used. And the places it isn't available we will need to use CallContextServiceLocator.\n. How? We only create it in the static methods below\n. Oh, ya, we can do IRuntimeEnvironment instead of IServiceProvider\n. Is possibly assigning null here okay?\n. Some files have the old copyright, fix them all!\n. JsonContent\n. \"If the first line...\"\n. Do we want to say JavaScript here?\n. Space after Serializer, also JavaScript again\n. We have JsonArray\n. an object\n. same\n. Remove comment\n. Remove\n. .Abstractions now\n. I don't think this works for Cross-Plat\n. Formatting looks weird, could just be me though\n. Sorry, I misread, thought you put .Interface\n. Because install isn't cross-plat yet\n. Hmm, maybe, I was thinking the .cmd files would cause issues. Will fix\n. Copyright\n. Because we don't use InternalsVisibleTo on FunctionalTests\n. nameof()\n. This runs once at the start of the functional tests I believe.\n. No? I want the functionality to stay the same\n. This is the original code\n. The original code: https://github.com/aspnet/dnx/commit/d751821e0ae182e826f33dea3e7520a5f34a0383#diff-70f0f8d78afc1288add29e793af6cf3dR18\nWe could change it like you said though.\n. Missed one\n. Remove space\n. Missed another\n. Not sure, will remove\n. Change to private\n. Oh ya, well the AnsiConsole will be changed in another PR before this goes out, so I didn't change this.\n. Spaces\n. dnx.windows is defined above, use that for vcxproj?\n. nit: We use the predefined variable everywhere else\n. exit here?\n. Is there a reason we don't use the Version Helper functions, since this is deprecated?\n. I tried string interpolation and it wouldn't build. TODO because that's what we have everywhere else.\n. Also, tabs\n. Good catch, should we just say \"Installing failed\" instead? They should know what they are trying to install\n. Add space after comma\n. Can remove\n. Space\n. endIndex wont index if it equals the length of the string, so no 'out of bounds' happens\n. Oh, good point\n. public/private/internal?\n. Why?\n. Ya, that might be a good idea.\n. Realized I start on the second element in the list here, will change to start at the beginning.\n. EnvDthProtocol\n. negotiation\n. negotiation\n. negotiation\n. negotiation\n. negotiation\n. false is default value already\n. Should this be !IsWindows?\n. protocolManager\n. protocolManager\n. Make an issue or something then!\n. Remove comment\n. We want to write out stdErr when it succeeded?\n. Double space after period\n. Also, no need for $\n. I don't think you meant to print provider (which is null) here\n. globalFile?\n. same as above\n. Might as well do nameof here\n. $@\n. IsMono was used incorrectly in most places because we were only doing stuff on Windows and on Mono, now that we are getting cross-plat CoreCLR support in we need to fix all of these incorrect IsMono's\n. I removed this a while ago during an earlier iteration because I noticed everytime we call this function we already did the check for Windows. Would it be better to keep the check in here and remove it from the places we call it?\n. Release?\n. These were in the \"Globals\" PropertyGroup, is it okay that they aren't anymore?\n. Looks like there is a regression somewhere with redirect. You were commenting on the related issue.\n. Only WaitOne\n. Alright :)\n. revert this file? Nothing changed.\n. Wrong license\n. nit: Use char instead of string literal, looks nicer\n. What?\n. ignoreFailure is never any value except false\n. The internals of WatchProject already check if the project is being watched and if not it grabs the project path from file and adds a watcher for the project.\n. Ya... I fixed it, will update\n. Suggestions?\n. I don't think we need to catch it. If it ever happens then we shouldn't continue the global install and the exception has as much information in it as we know.\n. I should add a comment. This is my proposed temporary fix for mono null-ref. If we grab the value here it wont fail later.\n. Ok, who is the owner of Wrap?\n. Wei said this is correct because wrap calls MSBuild\n. Order\n. Ok? How is this wrong though\n. Isn't version 1?\n. Not sure, we added it because we broke some projects when we removed NewtonSoft: #1870\n. Just built UserSecrets with the Primitives removed and it failed.\n. Order\n. Check nuspec is back?\n. Not a fan of this function name\n. Environment isn't used in this file anymore\nSame for other files\n. remove newline\n. I was using the old way we did it, https://github.com/aspnet/dnx/commit/79b8ee24e8ea5a241687756a28c0be1a057ecb1b#diff-c889083e2a55b6b0e4ad6cc6e256f8c4L404\n. Only 1 --appbase right?\n. What happens if some does dnx /path/App.dll --appbase something where --appbase could be an argument to the dll\n. But the FindAppBaseOrNonoHostOption returns when it finds a --appbase anywhere in the args.\n. Oh! I didn't see that BootStrapperOptionValueNum was in the loop.\n. Newlines\n. Wouldn't this pass in the case of my_project.json?\n. Removing\n. The function needs absolute paths, what does it even mean to get a relative path from two relative paths? Its not possible without assuming they have the same base path.\nIf string.Empty is passed it should probably error too?\n. Isn't that what all the tests are doing?\n. empty lines\n. format\n. nameof\n. nameof\n. Don't use backslash, this will cause issues when we run the test on non-windows machines\n. remove writelines\n. format\n. format\n. Run Dougs script on the .xproj's\n. Add [Fact]\n. Ok, that was my next thought\n. sort\n. nit: newline between } and return\n. string.Empty\n. string.Empty\n. generation\n. Ya :/\n. Yep, there isn't a problem, just can replace some of the stuff with the variable to make it look nicer.\n. Super nit: add newline here or remove it from same code above (L813)\n. Whoops, old habits\n. Shouldn't need the targetFrameworkInfo ?? part\n. copyright\n. Nevermind\n. Not that I know of\n. We need to keep the same behavior as the old Execute for support on non-windows OS's\nhttps://github.com/aspnet/dnx/blob/dev/test/Microsoft.Dnx.CommonTestUtils/DnuTestUtils.cs#L37\n. Where is the mono runtime?\n. Sort\n. nameof\n. Use Path.DirectorySeparatorChar for file paths\n. Copyright\n. Copyright\n. Be careful with this, we were having issues with Mac Travis tests and this function. See DisposableDir\n. Probably not? @anurse \n. Yes\n. This is fallback logic, i.e. \"linux\" falls back to \"unix\" falls back to \"any\", or \"darwin\" falls back to \"unix\" falls back to \"any\"\n. The rule is we wont have any of these soon, but these are the ones we currently need because the nupkgs don't differentiate platform assemblies.\n. Just a comment in a PR I think https://github.com/aspnet/dnx/pull/2749#discussion_r39922395\n. fix\n. Then it just behaves like it used to\n. ",
    "natemcmaster": "@glennc Can we revisit this? For big projects (such as EF), dnu restore still leads to hundreds of lines (seems like thousands when it has to get all the dependencies too.)\nBy default, I don't think users care to see every HTTP request made. Instead, I think users care:\n1. that restore is making progress, and \n2. that it worked or didn't. And maybe a summary of what happened.\ndnu restore today looks a lot like npm install did in early 2014. I think it's ok to follow their lead.\n\nThe default log level has been reduced, so npm is a lot quieter. Rather than print out every HTTP request, npm now simply shows a spinner while it does stuff (so you know it hasn\u2019t completely frozen)\nFrom npm Progress - blog\n. @dougbu It works, but even if we made --quiet default, this is still not the right UX. Because of #2304, I can't tell when it has hung or is just going slow.\n\nI still believe the better experience is to be less verbose by default.  As evidence, I just ran dnu restore on EF. It produced about 8,550 lines in my terminal. see log here. Nobody needs this much information by default. \n. Just an idea:\nVideo\n\n. @davidfowl On Windows, we are redistributing sqlite3.dll with the nupkg. The makefile.shade manually downloads the dll and adds it to the nupkg. We then search for this assembly and load it into the appdomain. (see NativeLibraryLoader).\nFor OSX/Linux, we use whichever version of libsqlite3 the system has installed in LD_LIBRARY_PATH.\n. @moozzyk are their issues/PRs on the dotnet repos we can follow to track this? \n. @moozzyk awesome.\n. @moozzyk Any updates on this?\n. No.\n```\n$ dnu build --quiet\nMicrosoft .NET Development Utility Mono-x64-1.0.0-rc2-16249\nBuilding xma for DNX,Version=v4.5.1\n/private/tmp/xma/project.json(3,23): error NU1008: \"xamarinios\" is an unsupported framework.\nBuild failed.\n    0 Warning(s)\n    1 Error(s)\nTime elapsed 00:00:00.0357848\nTotal build time elapsed: 00:00:00.0489319\nTotal projects built: 1\n``\n. What's the cli incantation I need? Whatever I try forDOTNET_REFERENCE_ASSEMBLIES_PATH` I get the same error:\n```\nDOTNET_REFERENCE_ASSEMBLIES_PATH=/Library/Frameworks/Xamarin.iOS.framework/Versions/Current/lib/mono/2.1/ dotnet compile \nCompiling xma for Xamarin.iOS,Version=v0.0\n/private/tmp/xma/project.json(3,23): error DOTNET1011: Framework not installed: Xamarin.iOS,Version=v0.0 in /Library/Frameworks/Xamarin.iOS.framework/Versions/Current/lib/mono/2.1/\nCompilation failed.\n    0 Warning(s)\n    1 Error(s)\n``\n. Why not just die gracefully here? \n. nvm -- we will work around this in ef.\n. :+1: Yes the error message is misleading.dnu restoreis not the solution.\n. +1 I'm seeing this issue too on CoreCLR for OS X\n. @BrennanConroy If so, how do users upgrade dnvm?dnvm update-self` doesn't work https://github.com/aspnet/dnvm/issues/246 or it destroys itself https://github.com/aspnet/dnvm/issues/257. Can we offer dnvm updates through brew instead?\n. Upgrading dnvm fixed this.\nbrew remove dnvm\nbrew update\nbrew install dnvm\n. With #2677 \"uap10.0\" is recognized, but dnu build fails. Is this a separate issue?\nBuilding Microsoft.Data.Sqlite for UAP,Version=v10.0\nSystem.ArgumentException: preprocessorSymbols\n   at Microsoft.CodeAnalysis.CSharp.CSharpParseOptions..ctor(LanguageVersion languageVersion, DocumentationMode documentationMode, SourceCodeKind kind, IEnumerable`1 preprocessorSymbols)\n   at Microsoft.Dnx.Compilation.CSharp.RoslynCompiler.CompileProject(CompilationProjectContext projectContext, IEnumerable`1 incomingReferences, IEnumerable`1 incomingSourceReferences, Func`1 resourcesResolver)\n   at Microsoft.Dnx.Compilation.CSharp.RoslynProjectCompiler.CompileProject(CompilationProjectContext projectContext, Func`1 referenceResolver, Func`1 resourcesResolver)\n   at Microsoft.Dnx.Compilation.LibraryExporter.<>c__DisplayClass18_0.<ExportProject>b__0(CacheContext ctx)\n. @anurse Unless I'm mistaken, adding this TFM does not mean DNX will actually compile for UAP. It merely passes this along to the nuspec. Correct?\n. Update: this is not limited to Mono. It also happens on CoreCLR on OS X (latest dev branch)\n. More testing - this is not exclusive to myget.org.   Nuget.org sometimes triggers the same deadlock.\n. I've tracked this down to an issue in HttpSource.GetAsync. In projects with dozens of projects => hundreds of dependences => thousands of dependencies on dependencies, NuGetv2Feed can end up hung with over a thousand threads waiting on _httpSource.GetAsync (See line 109).\nThe culprit:  the call to ConcurrencyUtilities.ExecuteWithFileLocked\nwhich ends up waiting on\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Runtime/Internal/ConcurrencyUtilities.cs#L45\nc#\n var signaled = fileLock.WaitOne(TimeSpan.FromSeconds(5));\n\n. @BrennanConroy  https://github.com/aspnet/dnx/commit/f3e22af80c7bddea28c8f24b00f175ae67b9e835\n. @davidfowl it's somewhat nondeterministic, but the deadlock usually occurs on the first run of dnu restore on entityframework after cleaning out ~/.dnx/packages\n. @brennanconroy I haven't been testing for it. I (and others) avoid cleaning packages and running a full restore unless necessary. The deadlock doesn't occur when pointing restore to the CI file share. \n. I tried reproducing again. This appears to be fixed.\n. @Kosta-Github as you know DNX is retired, which means even if we re-opened this bug, it's unlikely to get. dotnet restore is the \"new\" dnu restore. \n. How did you verify? with 12348/Darwin, I get:\n\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\n   at Microsoft.Cci.MetadataWriter.GetRowCounts()\n   at Microsoft.Cci.MetadataWriter.PopulateTables(Int32[] methodBodyRvas, BlobBuilder mappedFieldDataWriter, BlobBuilder resourceWriter)\n. @BrennanConroy replace them with what?\n\nSo this is fixed by changing the dependency to Microsoft.Dnx.Runtime.Abstractions?\n. /cc @BrennanConroy \n. @davidfowl Update: libcurl was already installed. It's because DNX is missing System.Security.Cryptography.Native.dylib\n. @cesarbs VS Intellisense doesn't recognized InternalsVisibleTo with a strong name. Compilation still works. Anyway around this in VS? (other than just removing the public key from the attribute)\nFurthermore, this breaks the test runner we use in EF.\n. @moozzyk awesome, thank.\n. Urgency went up! This is breaking our CI now. See https://github.com/aspnet/Microsoft.Data.Sqlite/issues/153\n. Thanks @BrennanConroy. Yup that fixed it.\nInvisible errors = bad UX. Can we display errors when missing native dependencies?\n. $ export DNX_TRACE=1\n$ dnx\nLoaded module: dnx.coreclr.dylib\nFound export: CallApplicationMain\nUnhandled Exception:\n   Cannot print exception string because Exception.ToString() failed.\n. @moozzyk Nothing about missing icu4u.\n. Also, with DNX_TRACE=1, the return code is no longer 0.\n$ echo $?\n6\n. @muratg Have we pulled the coreclr fix yet? Exit code discrepancy is still broken with ~~15844~~ 15854.\n\n. @danroth27 Can we include brew install icu4u (or it's non-brew equivalent) in beta8 docs for OSX?\n. @anurse same doc I linked (just html not the rst source). icu4u is not mentioned.\n. Thanks! :+1:\n. @muratg just tested builds from the test beta8 and aspnetrelease feeds on OSX and Ubuntu 14.04. When ICU is missing, I still the same behavior. :-/ DNX_TRACE=0 has return code 0, DNX_TRACE=1 has return code 6. \n. Yeah, missing ICU is the problem. To be clear, the issue now is the error code returned when ICU is missing. Without ICU and DNX_TRACE=0, dnx fails and returns errno 0. This is very misleading for scripting (e.g. testing, which is why we probably missed this in the first place).\n. @jrr I'm using OS X 10.11.1 Beta (El Cap). I suspect your issue is you have homebrew installing to /Users/jrr/.Homebrew/ rather than /usr/local/\n. Probably been discussed before. But why not use static linking?\n. Happens on coreclr-linux too.\n. I believe this could be caused by a build error. The reference project does not build, but the build errors do not halt the process. DNX continually attempts to build the project anyways.\n. ...and yes, follow up. The problem went away when fixing build errors. I'm leaving this bug open. To recap:\nProject B depends on Project A. When building Project B, the Project A build fails and DNX repeatedly tries to build Project A without showing build errors.\n. @moozzyk One difference - the Microsoft.Data.Sqlite package contains both managed and unmanaged libraries. Your test case does not.\n. @moozzyk confirmed. I tried move native libraries into a separate package and we still get the same DllImport error. I will try again after this PR is merged.\n. @moozzyk btw, I cleaned my Sqlite project and started from scratch. It appears to work now.\n. @anurse the \"Integrated Security is not supported on non-Windows\" error just means you need to use a UserID/Password in the connection string instead of relying on Windows authentication. On the bright side, the appearance of this error indicates System.Data.SqlClient.dll is actually loaded.\n. @ChaosEngine it's a known bug in dnu restore in rc1.  See https://github.com/aspnet/EntityFramework/pull/3689#issuecomment-158201904\n. cc @moozzyk \n. So, an issue for corefx? Or should we be using System.Collections.Concurrent here instead?\n. This bug is still causing frequently CI failures for EF on Linux. https://travis-ci.org/aspnet/EntityFramework/builds/94071437\n@moozzyk Is native library loading going to be in dotnet cli?\n. :shipit:\n. This could be yet-another manifestation of RID-hell. Look in the project.lock.json and see if \"runtime.linux.System.Net.NetworkInformation\" is present in \"libraries\"\n. CI is failing: https://travis-ci.org/aspnet/EntityFramework/builds/97756973#L511\n. cc @muratg \n. GetRuntimeIdentifier() returns \"linux.ubuntu 14.04-x64\"\n. ",
    "xplicit": "Issue is closed, but just some additional info.\nI added a printing of keys and values in the Dictionary.Add method, here are part of the output. There are two libraries System.Windows.dll in the '4.5' dir and in the '4.5/Facades' dir \nkey=System.Windows value=/usr/lib/mono/4.5/System.Windows.dll\nkey=WindowsBase value=/usr/lib/mono/4.5/WindowsBase.dll\nkey=System.Runtime.InteropServices.WindowsRuntime value=/usr/lib/mono/4.5/Facades/System.Runtime.InteropServices.WindowsRuntime.dll\nkey=System.Windows value=/usr/lib/mono/4.5/Facades/System.Windows.dll\n. ",
    "christianarg": "This exactly is happening with the Nuget Server (hosted on codeplex), even with the latest version. Any chance it can be fixed over there? (worth trying)\n. I did, but I found that someone already did it about 2 months ago (https://nuget.codeplex.com/workitem/4426) and didn't even get a reply. I was posting this just in case you were sitting next to some Nuget developer :P Thanks anyway\n. ",
    "NTaylorMullen": "Note: In order to get the new behavior you may (if you don't already have new) need to reinstall kvm.\n. I've gone ahead and completed the IPlugin extensibility points to provide DesignTimeHost plugins. Next thing that is needed is to provide a way to reference the plugins in project.json without causing circular dependencies.\n. Items that added IPlugin support:\n378a9042bcf1e17c21fae4548346f00794e0bb3b\n4b07a60f981a6bcdf0aa8e2e9e429cf5f84ca9a1\n. Note: doing a ./build install in Razor and having MVC pull from the package works just fine.\n. Talked with @avanderhoorn in person. It's a tough problem. In vNext we're preaching the thought of app separation by opting in to what you want via Startup.cs (whatever you want, just add it to your Startup.cs and its yours). This is fantastic and works for the majority case but can be frustrating for package authors who are depending on third party or MS packages who aren't in their loop.\nWithout some sort of solution to this I do see us leading authors down the wrong path. Ex:\n```\nUserLib => Razor 3.0 (no tag helpers)\nGlimpse => Would like to depend on Razor 4.0 (tag helpers)\n```\nGlimpse wouldn't be able to use TagHelpers in their stack and would be forced to update their package anytime Razor went up a major version (assuming breaking changes). I don't think making a type: \"internal\" piece is the right solution but maybe making that portion of project.json easily extensible?\n. Updated.\n. Added a new Microsoft.Framework.DesignTimeHost.Interfaces assembly that holds the plugin related ANIs.\n. Updated to add tests, remove ANI's and clean up some bits in the PluginHandler. (No longer in Design)\n. Decided to also flow IAssemblyLoadContext into ctors of IPlugins\n. Changed PluginId to be a string so it can be a Guid. This way we should have a ton of flexibility for how people use plugins.\n. Will get this in today or tomorrow.\n. Rebased/Updated one last time, if no comments will push tomorrow.\n. There's no doc comments throughout in the XRE repo\n. @dougbu Updated. Sorry for not waiting for the watch, signing off a little bit early tonight so if you leave any more comments i'll be sure to address them.\n. Updated.\nGetting these bits in early so Todd can start working with the bits. Feel free to keep commenting on this PR, will do an update set of commits for any outstanding comments.\n. @dougbu C will then have the shared sources from both B & A. Therefore everything will seem to function fine. The problem occurs when C also depends on a separate library in the system that also depends on A.\n. Right now it ends up A.cs ends up in both B and C which cause a conflict. The idea @loudej suggested is not necessarily to dedup the dependencies but to rather utilize the dependency chain (what nuget does) to pick only one of them.\n. :shipit: \n. :shipit: once @davidfowl be happy.\n. si!\n. Good to go in?\n. :+1: \n. a8ad36225706eb0972f5695a3ad8fe0fef1c176f\n. /cc @davidfowl @ToddGrun \n. Updated.\n. Updated.\n. Updated. Did not make IAssemblyLoadContext dynamic per IPlugin.\n. Good?\n. Getting this in tonight unless there's an objection :smile: \n. :shipit: \n. :shipit: \n. Updated.\n. Talked with @pranavkm and I feel that if we can only choose 1 (case sensitive or case insensitive) case pattern I feel like case sensitive is the right/broader approach. \nHowever, in my opinion the 100% best approach is to auto-detect the current platforms case-sensitivity and use that. This would also involve allowing a flag to be passed in to specify one way or the other to override the default behavior. Auto-detecting would be consistent with how other things reflect cross platform ex being Environment.NewLine (it just happens to be another value when on Linux); also it would keep developers familiar with the platform they're developing on.\n. @troydai Loosen should definitely be the default. I understand your concern with copying a project on windows and moving it over to another platform causing issues but this inherently is already the case (going back to my other example of Environment.NewLine). In essence if it's already going to be a problem I'd much rather make the 90% case where users are developing on a single platform family (whether it be linux or windows etc.) be consistent with the platform they're on/what they're used to; otherwise you're setting users up for failure due to unexpected errors.\n. :+1: \n. :shipit: \n. 25feee326325ae7305181b550de83a098dfb5f85\n. 5aa77220fc983ccd69454a1f221eccddc4c70d7a\n. /cc @davidfowl \n. @davidfowl Updated.\nFYI: @ToddGrun \n. Going to push this tomorrow if no more feedback comes in.\n. /cc @davidfowl @ToddGrun \n. This all good?\n. @davidfowl will do\n. :shipit: \n. /cc @anurse \n. Just ran into this. Please don't backlog! :smile: \n. :+1: \n. :shipit: \n. @pranavkm your changes don't account for this do they? https://github.com/aspnet/dnx/blob/9dca281a9594eec292c0bb502e31535900a23223/src/Microsoft.Dnx.Tooling/NuGet/Core/Configuration/Settings.cs#L177-L178\n. :watch: \n. :shipit: \n. :+1: \n. No need, it does the same thing and this follows the format the ApplicationContext already uses.\n. same comment as above\n. Will run the tool over it :smile: \n. In the XRE repo they don't follow that format.\n. I'm pretty sure it's safe here after talks with @davidfowl but will make ConcurrentDictionary anyways to future proof.\n. That's thrown by the .Load, had a review comment about that in the initial iterations but @davidfowl seemed to think it was ok as is.\n. Probably doesn't need to be :+1: \n. XRE repo uses Facts suffix (they'll probably do one sweep over everything, so until then will follow suite).\n. ditto\n. Nope, not for now. Just following the format that the rest of the tests use.\n. Will send messages to the plugin to validate its registration\n. Would rather be vocal about non-existent plugins so we aren't failing silently from VS' perspective. \nPlugin registration is still restrictive but more reliant on things like the AssemblyLoadContext to throw for invalid attempts.\n. Will just make the _plugins a ConcurrentDictionary\n. named params, especially since CopYTo isn't use very frequently.\n. Need to be a list? would an IList sufice?\n. var\n. IList?\n. ditto.\n. Contains\n. Should remove, should try n keep eveyrthing as tiny as possible to remove places for possible errors. We can address this in a later issue/pr\n. You can undo these changes if we want to get my PR in that does all the renames (same below)\n. Why not use the FrameworkNames class?\n. Ahh, will need to run my script on this repo after its in.\n. I can expose a WorkNeeded property on the PluginHandler to short-circuit all of this. I just figured the extra checking here was pretty quick and the Process method basically no-ops if there's nothing to do.\n. update comment.\n. Doesn't have to be. Thought I'd follow the same approach we used in SignalR since that proved to work well :smile: \n. Would the alternate be a double? int? Seems kinda odd as a protocol version.\n. :+1: \n. Not too familiar with this part of the code base so forgive my ignorance... I don't see when this cache entry is ever set. It must though because you appHostContext.ServiceProvider below. \nFor more background: When does it get set, is anyone else expected to \"get\" it?\n. no need for trailing whitespace.\n. For more background: If the ApplicationHostContext is cached why did caching the AssemblyLoadContextFactory based on the still cached ApplicationHostContext break the scenario? Isn't that assuming the ServiceProvider gets updated (since it can't be set)? From my understanding of IServiceProvider that shouldn't be possible. Definitely missing something here.\n. Oh dur, of course since there's a lambda. Kinda odd API name though Get instead of GetOrAdd.\n. Ah, that makes sense. Muchas gracias :smile: \n. :+1: for having whatever VS chooses here. Less work when having to undo.\n. Nice typing bro\n. ",
    "chriseldredge": "Still happening on 1.0.0-alpha4-1304...\nkpm --version\n1.0.0-alpha4-10304\nkpm pack -o $PWD/dist --runtime KRE-mono45-x86.1.0.0-alpha4-10304 src/Klondike/Klondike.kproj\nverbose:False out:/Users/chris/codes/netfx/Klondike/dist project:src/Klondike/Klondike.kproj\nUnable to locate runtime 'KRE-mono45-x86.1.0.0-alpha4-10304'\n. I thought maybe it should be since the issue was placed in the1.0.0-alpha3 milestone so I was just adding an update :smile: \n. Thank you for the detailed response. That definitely clears things up.\nI'm working on a project that combines asp.net vNext with an Ember front-end built by ember-cli and broccoli. If you are curious to see how I'm integrating them currently, the code is at https://github.com/themotleyfool/Klondike/tree/aspnet-vnext.\n. dnu --version\nMicrosoft .NET Development Utility\n Version:      1.0.0-beta6-12256\n Type:         CLR\n Architecture: x86\n OS Name:      Windows\n OS Version:   6.2.9200.0\nThe client follows the redirect but does not base FindPackagesById() queries against the new URI. It seems to follow it for a short code path but then reverts to the entry URI instead of remembering the redirected URI.\n. Steps to reproduce:\n1. Download and unzip Klondike.zip from https://ci.appveyor.com/project/chriseldredge/klondike/build/119/artifacts\n2. Run .\\dist\\Klondike.SelfHost.exe --interactive\n3. In another shell, dnu restore -s http://localhost:8080/\nKlondike will redirect the client to http://localhost:8080/api/odata but dnu restore will still try to use http://localhost:8080/FindPackagesById()\n. I just tested 301 and 302 redirect status codes and the same bug exists for both of those too.\nHowever, my reading of the cited W3C section leads me to believe that it should only apply to \"a request other than GET or HEAD\" and since dnu restore is issuing GET requests, that the section does not apply. Furthermore, the NuGet.exe command line client follows a 307 redirect, so for best compatibility I think it makes sense for dnu restore to follow 301, 302 and 307 redirects in the same way.\n. ",
    "shahid-pk": "@davidfowl  what things should i redo?\n. @davidfowl  i should do this all over again ?\n. @davidfowl  i am doing it in two commits now the first one will contain original pull request , the second one will contain #mono-copy-bits and #windows-copy-bits\n. @davidfowl  please review this if you have time. the copy-bits-windows portion, is that what you wanted? or not even near to that?\n. @davidfowl thank u sir.\n. correct\n. ok , i looked over it\n. ok\n. this was purely un intentional , sorry for that\n. ok\n. done\n. Because the build script looks for .nuget/Nuget in windows it is fine, but Linux is case sensitive\n. because uname can never return Darwin and build.sh will fail.\n. ok will change that back\n. how would i have an old nuget , it is installed the first time you run build.sh in KRuntime directory, so yes may be it is 7 days old not more, i am sure i have a very new nuget and if i change it the build will fail, this is not because of nuget this is because Linux is case sensitive,\n. yes did that many time the only unnecessary change is Darwin to Linux the other are not \n. I thought we might be able to use it in the future on mono. so we need only two versions of .nuspec files ? \n. the build script use NuGet.exe, build.cmd and build.sh just download nuget,sake,kor and then calls build script, then the build script refers to nuget.exe as NuGet.exe which is ok on winodows but fails on Linux because Linux is case sensitive windows is not.\n. work on this one after the other changes you pointed out\n. by build script i do not mean build.cmd or build.sh i mean that makefile.shade script that build the whole thing, i think this was the confusion.\n. info:   program: .nuget/NuGet.exe\ninfo:   commandline: pack \"artifacts/build/KRE-mono45-x86.nuspec\" -OutputDirectory \"/home/shahid/AspVnext/KRuntime/artifacts/build\" -Version 0.1-alpha-t140611183427 -NoPackageAnalysis\ninfo:   workingdir: /home/shahid/AspVnext/KRuntime\nCannot open assembly '.nuget/NuGet.exe': No such file or directory.\nwarn: Exit code 2 from .nuget/NuGet.exe\nNote:\nwhen i change .nuget/NuGet to .nuget/nuget in the build.sh this happens, even after i delete cachedir and .nuget directory. actually this change is a necessity for the build to not break on Linux\n. @davidfowl  i think i made confusion and did not make things clear, by built script i do not mean build.sh or build.cmd i mean makefile.shade , makefile.shade refers to .nuget/nuget as .nuget/NuGet. I think now you will understand it.\n. nuget-install command in the makefile.shade translates into .nuget/NuGet have a look at here\nhttps://github.com/sakeproject/sake/blob/master/src/Sake.Library/Shared/_nuget-install.shade\n. because of file path differences between windows and linux nuget pack can not find the src \n. @davidfowl  removed all the others except KRE-mono* one. done\n. @davidfowl  fixed now\n. @davidfowl  i have just added two lines and changed constructor argument for Bind method.i have not touched the formatting other than that in this particular file.\n. thanks, will copy paste exactly this in next commit\n. now trust me this thing does not like this when try to edit it here or in some editor, i do not know why the } is shown misplaced here.\n. ",
    "ellismg": ".NETCore will bring back Environment.OSVersion, fwiw.  It will let you get the PlatformID of the OS.\n. @davidfowl FYI, I'm not a collaborator on this repository (maybe that's a good thing for the future for me?) so I won't be able to merge this myself.  Thanks for taking a look.\n. It would appear that I included the DNX binary itself in these commits.  That was unintentional and I will rebase to remove it.\n. Thank you @BrennanConroy and @mmdriley.  I have pushed new history which addresses the feedback.  When it was appropriate, I just rewrote the commits that had problems instead of introducing new fixup commits.  Please take another look. \n. I don't believe there are any open issues here.  Anything left for me to do before we can merge this?\n. Rebased on dev and pushed, 24dd1f8d \n. FYI: I will need to rebase my dnx changes after this goes in.\n. Please rebase on top of 24dd1f8d and fix up the merge conflicts.  You'll need to adopt the _T() macros in dnx.cpp and I think I moved some code you touched into the PAL.  Please let me know if you need help fixing things up.\n. @BrennanConroy LGTM\n. @davidfowl PTAL, this addresses the issue you told me about.\n. Per conversation with @davidfowl, I will just merge the actual dnx change and hold of on the TPA updates\n. LGTM, but you probably want another set of eyes since my sake-foo is not great.  Thanks for the rewrite.\n. Yes.\n. I did a build/dev-install on both OSX and Linux and could run stuff.  I was using the volatile feed to pick up CoreCLR.\n. @davidfowl PTAL\n. Rebased, squashed and pushed as 2c6deeca.\n. @davidfowl Here are the platform specific assemblies as of today.  More will be coming soon (Networking and some Crypto stuff).\n. rebased and pushed to dev as 73e1f99.\n. @davidfowl PTAL\n. I will add fixes metadata to 1f5d0ef to refer to #1663\n. I completed my validation.\n. Thanks @moozzyk.  Quick question, do you want me to indent the code in the default namespace? I am not sure what your guidelines are here.\n. (In f4ae2ef I responded to your feedback, except for the try/catch thing and did not indent the code in the namespace)\n. Rebased and pushed.  Thanks!\n. @Eilon @davidfowl \n. There's no way to get the current foreground or background color of the terminal in *Nix.  We are hesitant to try to lie because given the default settings for different terminals, there's no good initial value we can use.\nChanging the color and resetting both work, it's just getting the current color that throws PlatformNotSupported exception.  I do not expect this will change. \n. Please also make sure to install libssl-dev, which you will need to compile stuff\n. This clean image includes libunwind8 and libssl-dev?\n. Does that package provide libcrypto.so?\n. Glad you got it sorted out.\n. LGTM.  Thanks for fixing this.\n. FYI, The CLR team is now producing runtime packages for both Ubuntu 14.04 and Centos 7, so it should be possible to suck that into your process for building out DNX packages.\n. It depends on what RID you install.  The Ubuntu 14.04 one uses ICU-52\n. As a work around, you can build your own copy of System.Globalization.Native.so from the CoreCLR (from source) and then replace the version in DNX with the one you built.  This will link against your correct ICU and things should work.\nNote that the ABI between the runtime and this library are under active development, so this should only be done for \"well known\" releases where you can find a stable copy of the CoreCLR sources that match up with what is in your DNX.\n. I asked @davidfowl about exactly this and he said they used this pattern elsewhere in the stack as well, so there's already debt.  If we actually end up needing to detect this, I would much prefer adding an API to the BCL and reading that vs environment variables.\n. Old habits die hard :-(.\n. The code here makes more sense if you look at how dnx.coreclr works in windows.  This call normally has the side effect of probing on disk to make sure everything on the TPA list is present.  The logic matches the existing windows probing behavior for the second level loader.\n. I'll defer this feedback.  I want to unify this file with the existing generated version (but I will need to do a LPWSTR -> LPTSTR conversion first). Because of that, I don't want to make major changes.\n. I agree but this is a point in time issue.  This is needed because I wanted to share as much of tpa.[h|cpp] between windows and *nix.  I will fix this later by moving to TCHAR like elsewhere.\n. Ahh, yes.  I will remove this line.  It's vestigial code from a previous attempt at structuring this file.  Thanks!\n. The existing version of the file already does the same thing.  They assume that windows.h and friends will already be included.\n. I'll talk with the larger team about this.  I don't want to start making a bunch of changes to this file, since ideally we can unify it with the existing version.\n. DWORD is unsigned.  Did you mean uint32_t?\n. @troydai I want to edit these scripts anyway, so I can take care of it.  Do you also know why we do strdup at all?  No one ever seems to modify the strings.  Can we just use literal strings and then get out of the free game?\n. Fixed.\n. typedef unsigned int DWORD -> typedef uint32_t DWORD\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed all the places we did an explicit test against nullptr. \n. Fixed.\n. Fixed (in the case rfind returns std::string::npos we just don't continue).\n. Fixed.\n. Fixed.\n. I think the (unstated) invariant here is that if ppszTpaAssemblyNames is null, then cTpaAssemblyNames is zero.  This same weird pattern is already in dnx.coreclr.  I will add an assert.\n. Fixed.\n. Fixed now instead, since I ended up touching tpa.cpp anyway.\n. Fixed this all up and updated the generators.\n. Fixed.\n. Fixed.\n. I'm going to push back against this.  We need to remove the if (isNative) check in favor of doing the same thing for both native and the msil cases, which is looking on the file system to ensure all of the files from the TPA list are present.  For now, we just use the isNative check as a heuristic instead of actually probing the disk.  So long term the \"should we return true or false from this method\" decision is going to be made starting around L48.  If we move the code now, we'll just have to delete it later and it gets things further away from what we want, IMHO.\n. Yes.  Fixed.\n. Did you mean \"no-op\" ;-)\n. In the future I think we should just search for clang/clang++-3.5 on the PATH and use what we find instead of scoping this to travis.  The -3.5 suffix is a Ubuntu-ism and an artifact of us bringing things up on Ubuntu 14.04.\nIf you file an issue against me I can fix this.\n. Unrelated to your change, but we should not hardcode .so since it will be a .dylib on Darwin.  This is also hardcoded in LoadCoreClr\n. Duh.  Yes.\n. Fixed, thanks!\n. Will fix.\n. Fixed\n. Can do.\n. Fixed, and pushed new history.\n. When I did the work initially, I was under the impression there was a desire to not use the stl string types in the first level boot strapper.  If it's okay to use them, I'm happy to do so. \n. Actually, I would prefer to check this in as is if the cross platform string types haven't landed yet.\n. Will fix.\n. Will fix.\n. OK\n. Yes.  The caller of this function needs to know the directory the runtime was loaded from so it can use it later.\n. Is there a reasonable policy to be applied that isn't just crashing?\n. Yes.  I will restructure this (as well as the return if the tpa can't be built).\n. Good idea.\n. ",
    "graemechristie": "@Praburaj  - I'm not able to replicate this in Windows 8.1 using a cmd.exe prompt.\n\nDo you have some more info on when this issue occurs ?\n. This looks like a useful switch. If @davidfowl or one of the Core team can verify they are happy with the syntax I will go ahead and put up a PR for the ps1 and bash implementations. \n. @davidfowl this can be closed.\n. @Praburaj Your second comment  is not directly related to this issue. Can you create a separate issue for your second comment.\n. I am thinking that the command for this should be kvm unalias <alias>\n. @davidfowl Are you suggesting that we don't implement this ?\n. Yep sorry, my bad. It just clicked.\n. We can already have multiple aliases for a single version of a KRE, and you can set an alias to another alias. If we implement #319, and provide a simple way to delete an alias, would this be sufficient. i.e. for your scenario above you would simply have (changing the alias name to myalias to avoid confusion with the alias keyword)\nkvm alias myalias2 myalias\nkvm delete alias myalias\n. I will implement this as the command kvm uninstall <version or alias> [-x86][-x64] [-svr50][-svrc50] [-g|-global]\n. My wife has just had a baby, but I should have some time in a week or so.  If no one else has put anything forward by then, I'll have a look at this.\n. @ChengTian Is this still being worked on ?\n. done\n. Yep, my git fu seemed to have failed me there. \nShould be a nice clean commit now.\n. ... aaaand added the change for kvm.ps1 \n. Hey @glennc, based on your input to #318 can you merge or decline this PR, or otherwise comment.\n. @davidfowl done !\n. Thanks very much for pointing that out @Praburaj. PR to fix this is up.\n. @davidfowl sounds good\n. Note that you can also now do things like kvm alias defaultx64 default -x64 so set up an alias for the 64 bit KRE of the same version as default.\n. /cc @glennc \n. @glennc done\n. @Eilon Fixed !\n. Checks if the XML response from the feed contains a <a:Version> node, otherwise returns 1. The calling method will then print a message that it can't get the latest version and terminate. Previously it would try to install a Bogus version.\n. Unrelated whitespace fix.\n. ",
    "vibsbali": "The new command is dnvm alias -d  and it works! \n. ",
    "masaeedu": "@graemechristie Did this last into dnvm? Can't find a way to delete a runtime.\n. ",
    "sleemer": "@ChengTian in my enviroment it doesn't work.\nWhat I found out is when using UriBuilder we couldn't specify domain user name (for example 'company.com\\username:password' or 'username@company.com:password') \n. ",
    "ejsmith": "I am a major contributor now! LOL\n. Bahaha\n. What is the reasoning behind this change?\n. I thought the idea was to get rid of the GAC and strong naming with vnext?\n. ",
    "glennblock": "@ChengTian any ETA on this? I guess I can use Environment.Arguments for now?\n. I mean Environment.GetCommandLineArgs();\n. OK, that worked as a work around (see below), but please fix this.\n\n. @davidfowl @ChengTian it looks like Visual Studio actually is passing in the args that you set in the \"Command Line Arguments\" under debugging. I tested setting it to \"start.csx\" and ran in the debugger and it did get passed in via Environment.GetCommandLineArgs(). So the bug appears to relate to the invoking of Main.\n. I am not rushing....I am just giving more clarity on what I found :-)\nOn Sun, Jun 15, 2014 at 4:22 PM, David Fowler notifications@github.com\nwrote:\n\nThe bug is known and will be fixed. It's the weekend and the world cup is\non so be patient\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/336#issuecomment-46131281.\n. Roslyn CTP (which scriptcs uses) blows if I pass it the name.\n\nOn Sun, Jun 15, 2014 at 4:21 PM, David Fowler notifications@github.com\nwrote:\n\nYou don't need the loaded engine at all\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/338#issuecomment-46131257.\n. scriptcs uses Roslyn CTP under the covers. Scriptcs passes to Roslyn a list of references for binaries including those in nuget package folders (which it used to receive from NuGet.Core). For integrating with K, I tried passing it just the name and it blows. If I pass it the full path it works as long as I don't include the project.json.\n. @davidfowl That makes sense. Let me think about the implications of this.\n. I filed this bug in scriptcs to make our resolver support returning\nassemblies and not just pathnames:\nhttps://github.com/scriptcs/scriptcs/issues/766\n\nOn Sun, Jun 15, 2014 at 4:37 PM, David Fowler notifications@github.com\nwrote:\n\nWhen I get news a computer I'll explain it in more detail\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/338#issuecomment-46131614.\n. Was this fixed?\n. Got it, thanks\n\nOn Thursday, July 3, 2014, David Fowler notifications@github.com wrote:\n\nMoved to the new kvm repo\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/350#issuecomment-47876033.\n. \n",
    "ajcvickers": ":shipit:\n. ",
    "ahmetb": "@davidfowl Thanks for help, I wasn't aware of the mono-3.4.1 dependency. I guess I'll build from other branches and close the issue soon. About your second comment, is there a known limitation about those or is it just you haven't tested those with Mono?\n. @davidfowl Thanks for help, I wasn't aware of the mono-3.4.1 dependency. I guess I'll build from other branches and close the issue soon. About your second comment, is there a known limitation about those or is it just you haven't tested those with Mono?\n. So I have Mono 3.6.1 according to mono --version and I was able to run HelloKRuntime example in Graeme's blog post since that doesn't have any myget requirements. (I also ran certmgr/mozroots commands he mentioned.)\nHere's the kvm restore output (with just System.Console dependency) from HelloKRuntime example:\nsh\nroot@07effc6e9a40:/tmp/Hello# kpm restore -s https://www.myget.org/F/aspnetvnext/\nRestoring packages for /tmp/Hello/project.json\nAttempting to resolve dependency Hello >= 1.0.0\nAttempting to resolve dependency System.Console >= 4.0.0.0\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Console'\nAttempting to resolve dependency mscorlib >=\nAttempting to resolve dependency System >=\nAttempting to resolve dependency System.Core >=\nAttempting to resolve dependency Microsoft.CSharp >=\nAttempting to resolve dependency Hello >= 1.0.0\nAttempting to resolve dependency System.Console >= 4.0.0.0\n  OK https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Console' 1314ms\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/System.Console/4.0.0.0\n  OK https://www.myget.org/F/aspnetvnext/api/v2/package/System.Console/4.0.0.0 2012ms\nAttempting to resolve dependency System.IO >= 4.0.0.0\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.IO'\nAttempting to resolve dependency System.Runtime >= 4.0.0.0\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Runtime'\n  OK https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.IO' 1403ms\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/System.IO/4.0.0.0\n  OK https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Runtime' 1453ms\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/System.Runtime/4.0.20.0\n  OK https://www.myget.org/F/aspnetvnext/api/v2/package/System.IO/4.0.0.0 753ms\nAttempting to resolve dependency System.Text.Encoding >= 4.0.0.0\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Text.Encoding'\nAttempting to resolve dependency System.Threading.Tasks >= 4.0.0.0\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Threading.Tasks'\n  OK https://www.myget.org/F/aspnetvnext/api/v2/package/System.Runtime/4.0.20.0 1508ms\n  OK https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Threading.Tasks' 2106ms\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/System.Threading.Tasks/4.0.0.0\n  OK https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Text.Encoding' 2111ms\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/System.Text.Encoding/4.0.10.0\n  OK https://www.myget.org/F/aspnetvnext/api/v2/package/System.Threading.Tasks/4.0.0.0 999ms\n  OK https://www.myget.org/F/aspnetvnext/api/v2/package/System.Text.Encoding/4.0.10.0 1024ms\nResolving complete, 8883ms elapsed\nInstalling System.Console 4.0.0.0\nInstalling System.Runtime 4.0.20.0\nInstalling System.IO 4.0.0.0\nInstalling System.Threading.Tasks 4.0.0.0\nInstalling System.Text.Encoding 4.0.10.0\nRestore complete, 8953ms elapsed\nand I'm still getting errors with your davidfowl/HelloWorldVNext example:\n``` sh\nroot@07effc6e9a40:/tmp/HelloWorldVNext# kpm restore -s https://www.myget.org/F/aspnetvnext/\nRestoring packages for /tmp/HelloWorldVNext/src/Nowin.vNext/project.json\nAttempting to resolve dependency Nowin.vNext >= 1.0.0\nAttempting to resolve dependency Nowin >= 0.11.0\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='Nowin'\nAttempting to resolve dependency Microsoft.AspNet.Hosting >= 0.1-alpha\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='Microsoft.AspNet.Hosting'\nAttempting to resolve dependency Microsoft.AspNet.Owin >= 0.1-alpha\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='Microsoft.AspNet.Owin'\nAttempting to resolve dependency mscorlib >=\nAttempting to resolve dependency System >=\nAttempting to resolve dependency System.Core >=\nAttempting to resolve dependency Microsoft.CSharp >=\nERROR building certificate chain: System.NullReferenceException: Object reference not set to an instance of an object\n  at System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find (X509FindType findType, System.Object findValue, Boolean validOnly) [0x00000] in :0\n  at System.Security.Cryptography.X509Certificates.X509Chain.FindParent (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) [0x00000] in :0\n  at System.Security.Cryptography.X509Certificates.X509Chain.BuildChainFrom (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) [0x00000] in :0\n  at System.Security.Cryptography.X509Certificates.X509Chain.Build (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) [0x00000] in :0\n  at System.Net.ServicePointManager+ChainValidationHelper.ValidateChain (Mono.Security.X509.X509CertificateCollection certs) [0x00000] in :0\nPlease, report this problem to the Mono team\nStacktrace:\nNative stacktrace:\nmono() [0x4b8e68]\nmono() [0x512a63]\nmono() [0x424222]\n/lib/x86_64-linux-gnu/libpthread.so.0(+0x10340) [0x7f9fb8ee3340]\n\nDebug info from gdb:\n=================================================================\nGot a SIGSEGV while executing native code. This usually indicates\na fatal error in the mono runtime or one of the native libraries\nused by your application.\n=================================================================\n//.kre/packages/KRE-mono45-x86.1.0.0-alpha3-10041/bin/klr: line 12:  1289 Aborted                 mono $DIR/klr.mono.managed.dll \"$@\"\n```\nThe problem seems like it's about Mono unless I'm wrong. Any ideas?\n. So I have Mono 3.6.1 according to mono --version and I was able to run HelloKRuntime example in Graeme's blog post since that doesn't have any myget requirements. (I also ran certmgr/mozroots commands he mentioned.)\nHere's the kvm restore output (with just System.Console dependency) from HelloKRuntime example:\nsh\nroot@07effc6e9a40:/tmp/Hello# kpm restore -s https://www.myget.org/F/aspnetvnext/\nRestoring packages for /tmp/Hello/project.json\nAttempting to resolve dependency Hello >= 1.0.0\nAttempting to resolve dependency System.Console >= 4.0.0.0\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Console'\nAttempting to resolve dependency mscorlib >=\nAttempting to resolve dependency System >=\nAttempting to resolve dependency System.Core >=\nAttempting to resolve dependency Microsoft.CSharp >=\nAttempting to resolve dependency Hello >= 1.0.0\nAttempting to resolve dependency System.Console >= 4.0.0.0\n  OK https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Console' 1314ms\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/System.Console/4.0.0.0\n  OK https://www.myget.org/F/aspnetvnext/api/v2/package/System.Console/4.0.0.0 2012ms\nAttempting to resolve dependency System.IO >= 4.0.0.0\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.IO'\nAttempting to resolve dependency System.Runtime >= 4.0.0.0\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Runtime'\n  OK https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.IO' 1403ms\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/System.IO/4.0.0.0\n  OK https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Runtime' 1453ms\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/System.Runtime/4.0.20.0\n  OK https://www.myget.org/F/aspnetvnext/api/v2/package/System.IO/4.0.0.0 753ms\nAttempting to resolve dependency System.Text.Encoding >= 4.0.0.0\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Text.Encoding'\nAttempting to resolve dependency System.Threading.Tasks >= 4.0.0.0\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Threading.Tasks'\n  OK https://www.myget.org/F/aspnetvnext/api/v2/package/System.Runtime/4.0.20.0 1508ms\n  OK https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Threading.Tasks' 2106ms\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/System.Threading.Tasks/4.0.0.0\n  OK https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='System.Text.Encoding' 2111ms\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/System.Text.Encoding/4.0.10.0\n  OK https://www.myget.org/F/aspnetvnext/api/v2/package/System.Threading.Tasks/4.0.0.0 999ms\n  OK https://www.myget.org/F/aspnetvnext/api/v2/package/System.Text.Encoding/4.0.10.0 1024ms\nResolving complete, 8883ms elapsed\nInstalling System.Console 4.0.0.0\nInstalling System.Runtime 4.0.20.0\nInstalling System.IO 4.0.0.0\nInstalling System.Threading.Tasks 4.0.0.0\nInstalling System.Text.Encoding 4.0.10.0\nRestore complete, 8953ms elapsed\nand I'm still getting errors with your davidfowl/HelloWorldVNext example:\n``` sh\nroot@07effc6e9a40:/tmp/HelloWorldVNext# kpm restore -s https://www.myget.org/F/aspnetvnext/\nRestoring packages for /tmp/HelloWorldVNext/src/Nowin.vNext/project.json\nAttempting to resolve dependency Nowin.vNext >= 1.0.0\nAttempting to resolve dependency Nowin >= 0.11.0\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='Nowin'\nAttempting to resolve dependency Microsoft.AspNet.Hosting >= 0.1-alpha\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='Microsoft.AspNet.Hosting'\nAttempting to resolve dependency Microsoft.AspNet.Owin >= 0.1-alpha\n  GET https://www.myget.org/F/aspnetvnext/FindPackagesById()?Id='Microsoft.AspNet.Owin'\nAttempting to resolve dependency mscorlib >=\nAttempting to resolve dependency System >=\nAttempting to resolve dependency System.Core >=\nAttempting to resolve dependency Microsoft.CSharp >=\nERROR building certificate chain: System.NullReferenceException: Object reference not set to an instance of an object\n  at System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find (X509FindType findType, System.Object findValue, Boolean validOnly) [0x00000] in :0\n  at System.Security.Cryptography.X509Certificates.X509Chain.FindParent (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) [0x00000] in :0\n  at System.Security.Cryptography.X509Certificates.X509Chain.BuildChainFrom (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) [0x00000] in :0\n  at System.Security.Cryptography.X509Certificates.X509Chain.Build (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) [0x00000] in :0\n  at System.Net.ServicePointManager+ChainValidationHelper.ValidateChain (Mono.Security.X509.X509CertificateCollection certs) [0x00000] in :0\nPlease, report this problem to the Mono team\nStacktrace:\nNative stacktrace:\nmono() [0x4b8e68]\nmono() [0x512a63]\nmono() [0x424222]\n/lib/x86_64-linux-gnu/libpthread.so.0(+0x10340) [0x7f9fb8ee3340]\n\nDebug info from gdb:\n=================================================================\nGot a SIGSEGV while executing native code. This usually indicates\na fatal error in the mono runtime or one of the native libraries\nused by your application.\n=================================================================\n//.kre/packages/KRE-mono45-x86.1.0.0-alpha3-10041/bin/klr: line 12:  1289 Aborted                 mono $DIR/klr.mono.managed.dll \"$@\"\n```\nThe problem seems like it's about Mono unless I'm wrong. Any ideas?\n. @Praburaj no, this is gone for a while now.\n. @Praburaj no, this is gone for a while now.\n. (amending my previous comment) @glennc nope I'm not aware of this. @colemickens is this still the case?\n. (amending my previous comment) @glennc nope I'm not aware of this. @colemickens is this still the case?\n. ",
    "desdesdes": "Shouldn't 4.5.2 and 4.5.3 also run against the 4.5 folder in mono?\n. The new asp.net vNext automatically picks up all code files in project directory and all sub directories. This way of finding code files has a problem when you would add a project to a sub directory of a existing project directory. \nA file in Home/Samples/lib/KkClassLib/test.cs would be part of the KkClassLib project and also of the Home/Samples/ConsoleApp project.\nSo basically you should not try to put projects in sub directories of existing project folders in .net vNext.\n. I was also wondering what the proper path separator would be when you want to be able to open or build a project on both windows and linux. Should you always use / or \\ or would both be converted to the platform path separator. Personally i would prefer always using the / as the only valid path separator because in linux / is just a valid character in a file or directory name, so this would prevent some problems. It  might be a good idea to document this in the project.json and global.json documentation.\n. If names are case sensitive you might run into some .net and mono inconsistencies. System.Configuration.dll is named System.configuration.dll on windows and System.Configuration.dll on mono. So on windows the exact name should be System.configuration, but that would fail on mono. On mono the name should be System.Configuration. I currently use System.Configuration because windows is not case sensitive and mono on *nix is, but that would stop working if you decide to check casing.\n. ",
    "ctaggart": "This would definitely provide better/cleaner mapping between the built DLLs and the original source location.\nI made a little bit of progress on coming up with an example. I created an appveyor.yml to build the KRuntime. AppVeyor even creates a nuget feed for the artifacts. My question becomes, how do I install this custom build using kvm?\nhttp://stackoverflow.com/questions/24443933/how-do-i-install-a-custom-build-of-asp-net-vnext-kruntime\nOnce that is figured out, the next step would be for me to figure out how to hook into SourceLink source indexing to the build.\n. Why don't you always want the PDB in the same package? It allows debugging and access to the source if you index it.\n. I'd like to discuss this a bit while here at the summit. :)\n. I didn't get a chance to. It does make them bigger, but it makes the open source projects much more open source. It is totally worth it. I really like source servers, but not symbol servers. I think the pdb files should be distributed with the nupkg files. May be NuGet 3 can make some design changes to accommodate so many cross-compiled assemblies and their xml and pdb files.\nhttp://ctaggart.github.io/SourceLink/\nFor SourceLink, I'm currently working on an issue and a SourceLink.SymbolStore library that would help:\nEnable Go To Definition (F12) should go to source if source symbols are available\nThat would be kind of awesome right!? Packaging the pdb files would enable this.\n. Awesome! Given that not everyone is using FAKE, I worked this weekend on a SourceLink.exe https://github.com/ctaggart/SourceLink/issues/53. That should make it easier to integrate with Sake and your existing build system. It will be available and working on NuGet and Chocolatey in a day or two. Right now, the arguments are just stubbed out.\n\n. What command do I run to update all the dependencies to the latest? I was looking for something like dnu update.\n\n. So it is just a manual process? I'll start with replacing -beta-23225 with -beta-23413 and go from there.\nhttps://github.com/ctaggart/visualfsharp/blob/dnx/src/fsharp/FSharp.Core/project.json\nIs the --outdated around in some form anymore?\n. I'm using a Debian based Docker container and have the same issue as @jstclair.\n```\nroot@36924f4b977f:/opt/visualfsharp/src/fsharp/FSharp.Core# dnvm list\nActive Version              Runtime Architecture OperatingSystem Alias\n------ -------              ------- ------------ --------------- -----\n  *    1.0.0-beta7          coreclr x64          linux         \n       1.0.0-beta7          mono                 linux/osx     \n       1.0.0-rc1-15838      coreclr x64          linux           default\n       1.0.0-rc1-15838      mono                 linux/osx       \nroot@36924f4b977f:/opt/visualfsharp/src/fsharp/FSharp.Core# dnx --version\nMicrosoft .NET Execution environment\n Version:      1.0.0-beta7-15532\n Type:         CoreCLR\n Architecture: x64\n OS Name:      Linux\nroot@36924f4b977f:/opt/visualfsharp/src/fsharp/FSharp.Core# dnvm use 1.0.0-rc1-15838 -r coreclr -arch x64\nAdding /opt/dnx/runtimes/dnx-coreclr-linux-x64.1.0.0-rc1-15838/bin to process PATH\nroot@36924f4b977f:/opt/visualfsharp/src/fsharp/FSharp.Core# dnx --version\nCould not open /etc/lsb_release. OS version will default to the empty string.\n```\n. ",
    "GrabYourPitchforks": "Thou shalt not modify the environment block (including environment variables) while the application is running.  It's not yours to mess with.\n. Thanks for the reference!  To other readers, this is the \"code\" key in project.json.  EF for instance uses:\njson\n{\n  \"code\": \"**\\\\*.cs;..\\\\Shared\\\\*.cs\"\n}\n. Server components have always used the \"amd64\" terminology, not \"x64\".  It helps differentiate other 64-bit platforms like IA64.  (Take a look in a Razzle window or on the devdiv build share when you get the chance.)\n. No - none of the scenarios I listed above are covered by the preprocessing feature.\n. :shipit:\n. :shipit:\n. Does the 'kpm' utility in the current release branch do the right thing?  If so, I'd think there's nothing to do for Beta.\n. Not all InternalsVisibleTo attributes should be rewritten. For instance, the one for Moq dynamic proxy should remain as-is.\n. @anurse I like the composability offered by your proposal.\n. Paranoia: we should check the return values of all of these operations to ensure they're 0.\n. Prefer calloc(cchTrustedPlatformAssemblies, sizeof(WCHAR)).  Also guaranteed to zero-initialize its buffer.\n. return false by default until we have the correct logic hooked up here.\nedit: And open a new issue to create the logic.\n. Consider using SpecialFolder.CommonApplicationData instead so that we're not hardcoding this.\n. ",
    "jbrwn": "Is there any more information on this?   Seems like there are a few issues out there about this but no resolution. \nhttps://github.com/aspnet/dnx/issues/990\nhttps://github.com/NuGet/Home/issues/300\nAn update would be much appreciated.\n. pinging @davidfowl and @yishaigalatzer\nWould love to get a quick status report on this topic.\nMy use case is for a c++/cli project i maintain: https://github.com/jbrwn/NET-Mapnik.  My current nuget strategy is to copy all dependant native dlls to the output dir using a .props file in the build directory of my nuget package.  This model falls apart with dnx and would love to find an alternative solution.\n. @yishaigalatzer - thanks for the response and posting the sample package.  I'll be keeping my eye out for documentation.  In the mean time, is it possible for you to elaborate a little on how this all works?   I see an \"any\" TFM directory and a runtime.json file in the root of the package.  It would be great to hear about how this all comes together so i can start experimenting with it even if complete documentation is not ready.\n. @glennc Thanks for your input.  \n\nWe are talking about a package that has a managed assembly that needs to invoke stuff from a native assembly that it carries, right?\n\nThat's right.\n\nThe build system responsible for consuming this package would need to know to copy the native assembly to your build output when building for the given runtime.\n\nI think this is the primary question for me and others - how will dnx/dnu/visual studio handle native assemblies in a nuget package? \nIn the past we could always just make up our own convention for including native dlls in a nuget package and then copy them wherever we want  using a Install.ps1/init.ps1 script or a .props file.  However, the game is changing because, as far as i know, there is no \"output directory\" in dnx - everything is loaded into memory from the dependent nuget packages.\n. @davidfowl Thanks for taking the time to respond. \n\nIn vs2015 there's a new NuGet aware msbuild task that will copy the relevant assets into the project's output directory so that should just work.\n\nYour talking about a plain old .net framework project (e.g., csproj) and not an asp.net 5.0/dnx project (xproj) right?  If so, i am right there with you.  This is not an issue for me.  \n\nIn the DNX, there will be no copying but the runtime will discover the appropriate assets and setup the runtime so that loading those dlls will just work (via Dll import or via an API).\n\nThis is what i am after.  I understand that this may not be fully documented but even just some preliminary info as @yishaigalatzer suggested would be greatly appreciated and go a long way to providing some clarity on how this will all fit together for developers who support projects with a native component.  Thanks!\n. > I think you care about both scenarios. We want the new packages to work for both projects with csproj files and dnx. Infact in some of the new csproj files its going to be a requirement\nYep, you're totally right.  The csproj side just seems like less of a mystery to me.   I'm looking forward to seeing how this will all come together.  Again, any details bringing clarity to how this will all work would be greatly appreciated.  Thanks again.\n. > The dnx will load the native binaries in place without copying them.\n@davidfowl Can you provide any more details on how this works?  e.g., how do we set up a nuget package or kproj that will allow dnx to load the native binaries?   Thanks in advance.\n. @nathanaeljones Interesting question but it does seem a little off topic for this issue.  Not trying to be rude but it seems like you may get some more traction on this by creating a new issue somewhere else. \n. @davidfowl Got it.  Do you have a target date for when this feature will be implemented?  Looks like we are going on 1+ years since this issue was created.\n. ",
    "yishaigalatzer": "We should have something out within a week or so. Still working on documenting the details\n. I will try to post a sample today or tomorrow\n. https://www.myget.org/F/dotnet-core/api/v2/package/System.IO.Compression/4.0.0-beta-22927\n. The any folder is going to probably be renamed before we are done. The runtimes is about bringing implementation that are runtime target appropriate. We can probably post more preliminary info here to get you going, let me see if we have something useful\n. I think you care about both scenarios. We want the new packages to work for both projects with csproj files and dnx. Infact in some of the new csproj files its going to be a requirement\n. That's a pretty bad and unexpected design.\n. Yeah I was just going to close it, was caught up in a dicussion :)\n. We need to see how this fits e-e, lets discuss as part of nuget 3.2, we also need to talk side by side and inheritance scenarios with nuget.config.\nI also want to understand the upside, all I see is moving the file format around\n. @muratg when is this being addressed? \n. Looks fine to me, we will find fast enough if this is wrong or not :)\n. Win! This is awesome.\n@davidfowl, are we getting precompile into the templates?\n. I'm actually surprised nuget.exe succeeds here. The feature was that disabling feeds is a global machine level feature\n. unfortunately - yes it is @davidfowl\n. So this should be a bug on nuget, dnx seems to behave as expected.\n. @zhili1208 can you please double check specifically for disabled feeds?\nFrom what I understand this was a by design decision (alas bad design) because disabling feeds was a desired global behavior. We did not plan on changing the behavior, so how and when did it change?\n. :shipit:\n. Github needs a move this issue feature :)\n. Sorry can we have NuGet team members involved in changes to the lock file format? \n. This seems wrong. The plan is to fix the server, although we can revisit the discussion worth a short f2f tomorrow \n. We will fix that at some point in the near future. It definitely sucks\n. It's a mixed question.\nYes there is a nuget component, but we explicitly announced we are not supporting semver2 in the upcoming release. I'm also not sure about other things that read and understand this version in the build side of the world. So I would add this info to the semver2 issue in nuget and open a bug in the CLI as well.\nAt the end of the day servers don't support it yet either, so the value of quickly moving on this is lowish.\n. Where is the change to change the URL from v3 to v2 in the beta5 branch?\n-----Original Message-----\nFrom: \"Wei Wang\" notifications@github.com\nSent: \u200e6/\u200e12/\u200e2015 5:11 PM\nTo: \"aspnet/dnx\" dnx@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [dnx] Add NuGet v3 feed support (#2058)\nIn src/Microsoft.Framework.PackageManager/Restore/NuGet/HttpSource.cs:\n\n@@ -131,13 +139,20 @@ internal class HttpSource\nusing (var response = await _client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))\n             {\n-                    if (!throwNotFound && response.StatusCode == HttpStatusCode.NotFound)\n  For v3 feed, FindPackagesById() becomes construct the URI by ourselves and check whether the URI points to a JSON. A 404 page means the packages is not on this feed.\n  \u2014\n  Reply to this email directly or view it on GitHub.\n. Cool\n\n-----Original Message-----\nFrom: \"David Fowler\" notifications@github.com\nSent: \u200e6/\u200e13/\u200e2015 11:15 AM\nTo: \"aspnet/dnx\" dnx@noreply.github.com\nCc: \"Yishai Galatzer\" yishai_galatzer@yahoo.com\nSubject: Re: [dnx] Add NuGet v3 feed support (#2058)\nIn src/Microsoft.Framework.PackageManager/Restore/NuGet/HttpSource.cs:\n\n@@ -131,13 +139,20 @@ internal class HttpSource\nusing (var response = await _client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))\n             {\n-                    if (!throwNotFound && response.StatusCode == HttpStatusCode.NotFound)\n  We're doing the real change in release and dev\n  \u2014\n  Reply to this email directly or view it on GitHub.\n. \n",
    "xanather": "Right now using native libraries on DNX (which is packaged based) is a pain without this.\n. @davidfowl Yes I am using CoreCLR. When debugging it works fine in the app root, however last time I tried when the app was published (by using DNU) I needed to put the native library in the runtime folder.\n. Yes it copies everything, but DNX is unable to load native libraries unless I move them to the runtime folder of the published app next to dnx.exe.\nEdit: Just to clarify the native libraries are included/copied to the published application root.\n. Yes it copies everything, but DNX is unable to load native libraries unless I move them to the runtime folder of the published app next to dnx.exe.\nEdit: Just to clarify the native libraries are included/copied to the published application root.\n. Pretty sure it just has something to do with windows probing the current directory. When debugging it, it would have the correct current directory while running it from the published .cmd won't.\n. Pretty sure it just has something to do with windows probing the current directory. When debugging it, it would have the correct current directory while running it from the published .cmd won't.\n. Just tested, I can confirm it is because of the current directory.\n. Just tested, I can confirm it is because of the current directory.\n. @borgdylan I am aware of that. An entry point however can easily be applied to a .dll with no downsides. CoreRun.exe/CoreConsole.exe requires this to run .NET Core applications. If the developers don't want assemblies produced by DNX to be consumed by CoreRun then I guess that will be the case, but as I said there is no downside if there is a \"static void Main()\" existing and .entrypoint can be applied.\n. @borgdylan I am aware of that. An entry point however can easily be applied to a .dll with no downsides. CoreRun.exe/CoreConsole.exe requires this to run .NET Core applications. If the developers don't want assemblies produced by DNX to be consumed by CoreRun then I guess that will be the case, but as I said there is no downside if there is a \"static void Main()\" existing and .entrypoint can be applied.\n. @davidfowl While I think that linked issue would be beneficial in general, what does that have to do with supporting an optional command which looks for and decorates a static Main method in the Program class (if it exists)? The people who would like DNX to support such things are people who are after using CoreRun or other bootstrappers that look for a traditional .entrypoint. I feel more and more like DNX is not designed for building end-user apps and is for cloud/server only which is disappointing.\n. @davidfowl While I think that linked issue would be beneficial in general, what does that have to do with supporting an optional command which looks for and decorates a static Main method in the Program class (if it exists)? The people who would like DNX to support such things are people who are after using CoreRun or other bootstrappers that look for a traditional .entrypoint. I feel more and more like DNX is not designed for building end-user apps and is for cloud/server only which is disappointing.\n. @davidfowl That's a good point. Right now you do need to manually copy and get all the CoreFX/CoreCLR libs together. Maybe when there is a tool which does this and produces the absolute minimum to get the app working in a single directory for a single target platform (I heard on gitter someone on the .NET Core team is working on one) then I think it would be worthwhile to get DNX/DNU to produce .entrypoint's. Who knows though, such a tool may not need .entrypoint anymore and could work like DNX.\n. @davidfowl That's a good point. Right now you do need to manually copy and get all the CoreFX/CoreCLR libs together. Maybe when there is a tool which does this and produces the absolute minimum to get the app working in a single directory for a single target platform (I heard on gitter someone on the .NET Core team is working on one) then I think it would be worthwhile to get DNX/DNU to produce .entrypoint's. Who knows though, such a tool may not need .entrypoint anymore and could work like DNX.\n. Is this something that may be added in the future? It's really needed if people want to consume native libraries while using DNX and I think would be straight forward to implement.\nFor example, I cannot consume OpenAL 1.1 library (which has completely identical API's on multiple platforms) without this.\n. Is this something that may be added in the future? It's really needed if people want to consume native libraries while using DNX and I think would be straight forward to implement.\nFor example, I cannot consume OpenAL 1.1 library (which has completely identical API's on multiple platforms) without this.\n. Yeah, it doesn't seem like its possible override/extend CLR native library loading, maybe something like CoreCLR's solution should try to be added to .NET 4.6 before it RTM happens (might already be too late for that)?\n. Yeah, it doesn't seem like its possible override/extend CLR native library loading, maybe something like CoreCLR's solution should try to be added to .NET 4.6 before it RTM happens (might already be too late for that)?\n. I was thinking about LoadLibrary before too, I have used it myself for loading x86 or x64 versions of the same native library depending on what environment the runtime was running on. The problem though was that I was forced into making sure that the libraries were named the same (so they had to be in different folders) for DllImport(NAME) to map correctly to the loaded module name.\n. I was thinking about LoadLibrary before too, I have used it myself for loading x86 or x64 versions of the same native library depending on what environment the runtime was running on. The problem though was that I was forced into making sure that the libraries were named the same (so they had to be in different folders) for DllImport(NAME) to map correctly to the loaded module name.\n. I don't think this will be possible on CLR for a while, this is mainly a cross-plat (non-windows) issue however, therefore, is an implementation possible on CoreCLR and Mono only, or does that go against the design of DNX (no fragmentation between abstractions)?\nAre there any other alternative ways to override native library loading in DNX? Just an idea but DNX could just make it simple and just provide a basic single overridable method/event/delegate for the platforms in which it does support and document the platforms which would call it (could be just a string as a parameter as module name and returns an IntPtr, that's all).\nI really can't distribute this app on multiple platforms (which defeats the purpose of using DNX/.NET Core) without such a feature, I'm sure when VS2015 RTM releases there would be many more in the same boat.\n. I don't think this will be possible on CLR for a while, this is mainly a cross-plat (non-windows) issue however, therefore, is an implementation possible on CoreCLR and Mono only, or does that go against the design of DNX (no fragmentation between abstractions)?\nAre there any other alternative ways to override native library loading in DNX? Just an idea but DNX could just make it simple and just provide a basic single overridable method/event/delegate for the platforms in which it does support and document the platforms which would call it (could be just a string as a parameter as module name and returns an IntPtr, that's all).\nI really can't distribute this app on multiple platforms (which defeats the purpose of using DNX/.NET Core) without such a feature, I'm sure when VS2015 RTM releases there would be many more in the same boat.\n. This is closely related to https://github.com/aspnet/dnx/issues/402. Is there any chance this will be implemented anytime soon, how far away is 1.0.0 release? Anyway, I think for now I will create a lightweight native library loader class and retrieve function pointers as this will work on all platforms http://stackoverflow.com/questions/13461989/p-invoke-to-dynamically-loaded-library-on-mono, not 100% sure about the performance implications though over using DllImport. Any CLR implementation should theoretically support this and allows specifying specific location to load libraries. DNX could convert DllImports to use this instead to overcome CLR-implementation/loading policy issues.\nJust thought I should mention it, not sure if it applies much to what wants to be achieved on DNX.\n. No its not required anymore, but only while use DNX, when using something like CoreRun/CoreConsole as a bootstrapper it's still needed as discovered here https://github.com/aspnet/dnx/issues/1997.\nDNX reflects into the assembly and finds the entry point (there are multiple different types of entry points that can be defined with DNX).\n. No its not required anymore, but only while use DNX, when using something like CoreRun/CoreConsole as a bootstrapper it's still needed as discovered here https://github.com/aspnet/dnx/issues/1997.\nDNX reflects into the assembly and finds the entry point (there are multiple different types of entry points that can be defined with DNX).\n. Easy enough, thanks :)\n. Easy enough, thanks :)\n. I get this error too\n. I get this error too\n. Is there any chance this could get looked at @davidfowl or anyone who works on DNX?\n. Is there any chance this could get looked at @davidfowl or anyone who works on DNX?\n. Well, besides size being the main reason, it would just be easier to manage and simplifies deployment.\nIt will make it easier and straightforward to update existing/installed DNX apps with other/side-by-side DNX apps that have been published in this manner.\nI also hit Windows NT MAX_CHAR limit far too easy with DNX's hierarchy publish which results in DNX immediately crashing and closing itself.\nAre there any benefits the hierarchy serves, is it to be able to include multiple runtimes? - aren't the nuget packages platform-specific anyway? What was the decision behind it?\nThe project.json which contains configuration/entry point information could also exist in the flat folder.\nI mean if there are good reasons why the publish hierarchy exists then just having an option to trim output files/only include what is needed from the publish command sounds just as good.\nI have been copying the actual .dll's of NuGet packages, the DNX runtime, and the compiled DNX project .dll into one singular folder and invoking DNX with the name of the project .dll and its been working fine, for me I see no benefit having all those folders on deployment.\n. Well, besides size being the main reason, it would just be easier to manage and simplifies deployment.\nIt will make it easier and straightforward to update existing/installed DNX apps with other/side-by-side DNX apps that have been published in this manner.\nI also hit Windows NT MAX_CHAR limit far too easy with DNX's hierarchy publish which results in DNX immediately crashing and closing itself.\nAre there any benefits the hierarchy serves, is it to be able to include multiple runtimes? - aren't the nuget packages platform-specific anyway? What was the decision behind it?\nThe project.json which contains configuration/entry point information could also exist in the flat folder.\nI mean if there are good reasons why the publish hierarchy exists then just having an option to trim output files/only include what is needed from the publish command sounds just as good.\nI have been copying the actual .dll's of NuGet packages, the DNX runtime, and the compiled DNX project .dll into one singular folder and invoking DNX with the name of the project .dll and its been working fine, for me I see no benefit having all those folders on deployment.\n. Thanks for the detailed reply,\nGiven that for the foreseeable future DNX is targeting web mostly I think your right about me to just try use CoreRun.\nRegarding using CoreRun, I just have problems integrating it with Visual Studio (such as enabling debugging with CoreRun etc) while the DNX integration inside VS is really good, which is why I picked DNX as the bootstrapper. I think VS templates are needed to be developed for it. Is there somewhere I could voice this? I know DNX, CoreCLR and CoreFX all aren't really the places for such a request. Anyway I will look into trying to use CoreRun again.\nI will still leave this issue open as I think DNX should still support more lightweight publishings (or builds) in the future.\n. Thanks for the detailed reply,\nGiven that for the foreseeable future DNX is targeting web mostly I think your right about me to just try use CoreRun.\nRegarding using CoreRun, I just have problems integrating it with Visual Studio (such as enabling debugging with CoreRun etc) while the DNX integration inside VS is really good, which is why I picked DNX as the bootstrapper. I think VS templates are needed to be developed for it. Is there somewhere I could voice this? I know DNX, CoreCLR and CoreFX all aren't really the places for such a request. Anyway I will look into trying to use CoreRun again.\nI will still leave this issue open as I think DNX should still support more lightweight publishings (or builds) in the future.\n. @MartinJohns Your right, his wording is slightly off, but yes this is possible in CLI (which is due to replace DNX in the next RC release I think).\n. @MartinJohns Your right, his wording is slightly off, but yes this is possible in CLI (which is due to replace DNX in the next RC release I think).\n. Okay, no problem closing...\n. Okay, no problem closing...\n. The windows 10 version is Version 10.0.10240, I think 6.2 is Windows 8\n. The windows 10 version is Version 10.0.10240, I think 6.2 is Windows 8\n. Well that's abit silly, I'm sure it was for compatibility reasons though. Seems like the only way to return the correct value now is to check if GetVersion returns 6.2 and then determine if we're on windows 10 or not using some other method.\nCould also just have DNX build targeting Windows 10 - not sure how that would work for running on older OS's, I am sure Windows XP is out of the picture by now?\n. Well that's abit silly, I'm sure it was for compatibility reasons though. Seems like the only way to return the correct value now is to check if GetVersion returns 6.2 and then determine if we're on windows 10 or not using some other method.\nCould also just have DNX build targeting Windows 10 - not sure how that would work for running on older OS's, I am sure Windows XP is out of the picture by now?\n. Seems to be fixed in beta8.\n. Seems to be fixed in beta8.\n. I am using Windows 10.\n. I am using Windows 10.\n. Its more of a diagnostics/stats thing. If the end-user of my app experiences crashes they will be able to submit a Crash.log file which includes what OS version they are running.\n. Its more of a diagnostics/stats thing. If the end-user of my app experiences crashes they will be able to submit a Crash.log file which includes what OS version they are running.\n. Hmm, even after copying the vcruntime140.dll I am getting api-ms-win-crt-runtime-l1-1-0.dll not found error. Googling shows it still wants MSVC 2015 runtime installed, is there any way to avoid this?\nRegarding beta7, I am unsure I don't have the builds at the moment, I will have a look tomorrow\n. Hmm, even after copying the vcruntime140.dll I am getting api-ms-win-crt-runtime-l1-1-0.dll not found error. Googling shows it still wants MSVC 2015 runtime installed, is there any way to avoid this?\nRegarding beta7, I am unsure I don't have the builds at the moment, I will have a look tomorrow\n. Yeah sorry, its strange, dnx-clr-win-x86.1.0.0-beta6 includes it, but none of the other builds I have downloaded include it (not even dnx-clr-win-x64.1.0.0-beta6).\n. Yeah sorry, its strange, dnx-clr-win-x86.1.0.0-beta6 includes it, but none of the other builds I have downloaded include it (not even dnx-clr-win-x64.1.0.0-beta6).\n. @moozzyk No I was not trying to run Kestrel, just a normal console app. This was on a fresh install on Windows 7 64-bit SP1 (with all updates installed). First I try including vcruntime140.dll in the bin folder for the runtime, which seems to work, but then api-ms-win-crt-runtime-l1-1-0.dll error appears, note this happens on multiple Win7 computers. Unless I install MSVC 2015/2014 runtime this problem persists.\n. @moozzyk No I was not trying to run Kestrel, just a normal console app. This was on a fresh install on Windows 7 64-bit SP1 (with all updates installed). First I try including vcruntime140.dll in the bin folder for the runtime, which seems to work, but then api-ms-win-crt-runtime-l1-1-0.dll error appears, note this happens on multiple Win7 computers. Unless I install MSVC 2015/2014 runtime this problem persists.\n. This was on coreclr x86 beta6, trying out beta7 builds just now.\n. This was on coreclr x86 beta6, trying out beta7 builds just now.\n. I am unable to create builds of my app using any beta7 runtime to test. I was trying to update some packages needed to run on beta7 (namely Microsoft.Dnx.Runtime.Abstractions). Error message:\nEdit: I see its tracked, nevermind https://github.com/aspnet/dnx/issues/2426, I will try the VS 2015RTM fix http://www.microsoft.com/en-us/download/details.aspx?id=48222\n. I am unable to create builds of my app using any beta7 runtime to test. I was trying to update some packages needed to run on beta7 (namely Microsoft.Dnx.Runtime.Abstractions). Error message:\nEdit: I see its tracked, nevermind https://github.com/aspnet/dnx/issues/2426, I will try the VS 2015RTM fix http://www.microsoft.com/en-us/download/details.aspx?id=48222\n. I am slightly confused which MSI's I should download & run on http://www.microsoft.com/en-us/download/details.aspx?id=48738, it says nowhere. Should I install the beta6 tools first or go straight for beta7?\nAnyway from what i can see\n1.  DotNetVersionManager-x64.msi\n2.  DotNetVersionManager-x86.msi\n3.  WebToolsExtensionsVS14.msi\n4.  WebToolsExtensionsVWD14.msi\nShould be all?\n. I am slightly confused which MSI's I should download & run on http://www.microsoft.com/en-us/download/details.aspx?id=48738, it says nowhere. Should I install the beta6 tools first or go straight for beta7?\nAnyway from what i can see\n1.  DotNetVersionManager-x64.msi\n2.  DotNetVersionManager-x86.msi\n3.  WebToolsExtensionsVS14.msi\n4.  WebToolsExtensionsVWD14.msi\nShould be all?\n. Okay so I tested against the two beta7 CoreCLR windows runtimes:\nResults:\ndnx-coreclr-win-x86.1.0.0-beta7 still asks for VCRUNTIME140.dll. After copying the C++ runtime it also continues to ask for api-ms-win-crt-runtime-l1-1-0.dll\ndnx-coreclr-win-x64-1.0.0-beta7 doesnt seem to require VCRUNTIME140.dll, however it still asks for api-ms-win-crt-runtime-l1-1-0.dll at startup (edit: Just checked, it's because vcruntime140.dll is already in the bin folder for this version of the runtime).\nI am publishing both projects with with \"dnu publish --no-source --runtime active --configuration Release\"\nI will create another post testing with desktop clr builds soon (I need to install the whole .net 4.6 on this slow VM).\n. For the two beta7 desktop CLR windows runtimes:\ndnx-clr-win-x86.1.0.0-beta7 wants api-ms-win-crt-runtime-l1-1-0.dll at startup (VCRUNTIME140.dll came included in the bin folder for this version of the runtime).\ndnx-clr-win-x64-1.0.0-beta7 also wants api-ms-win-crt-runtime-l1-1-0.dll at startup (VCRUNTIME140.dll is also came included in the bin folder for this version of the runtime).\n. Sorry for the confusion about all this, I think your right. Running dnx.exe directly on all four dnx beta7 runtimes work fine, running a hello world project works fine. I think one of the packages for this other project I am using is dynamically linking to a separate native library which I overlooked, i'll have to figure out which one.\n. Thanks for that tip, with it I quickly found out, its a third-party package so yes I am the one at fault here :)\n. I am currently using the RuntimeOptions class to obtain the ApplicationBaseDirectory property (which is then used to load assets/content of the program). Another reason I am using it can be shown:\nLibrary programLibrary = libraryManager.GetLibrary(runtimeOptions.ApplicationName);\nWhere libraryManager is an ILibraryManager.\nSince this code is within a DNX library this is used to discover the host dnx \"console\" app making use of the library.\n. Ahh, okay, thanks for that, didn't know it existed (must be new?).\n. This is happening to me too.\nEdit: Nevermind, contract changed for System.Net.Security. Thirdparty library dev needs to update package.\n. ",
    "oryol": "Finally, I didn't understand what should I do to make it works? For example I reference Gtk# package (https://www.nuget.org/packages/GtkSharp.Win32) and target dnx46. When I run project Gtk.Application.Init complains that native library wasn't loaded. May be this package hasn't upgraded to the some new conventions for DNX (as I see it has only old plain MSBuild steps to copy native dll-s). I can update it myself but I need to understand how it can be done?\n. ",
    "rmarskell": "@davidfowl Does this still work? I'm trying to create a wrapper library (netstandard1.6) for a C++ dll from another company. I've put the dll files in the appropriate folders ({project root}/runtimes/win-x64/native/mylib.dll) and then attempted to reference methods in the library using [DllImport( \"mylib\" )] but it doesn't seem to be finding it. It works if I specify the full path instead of just \"mylib\", but that's obviously not helpful. Not sure if I'm missing something here or if it has been changed.\n. Oh, that's a shame, but at least it explains why I couldn't get it to work. Forgive my ignorance, but is there an optimal way to make a post-publish copy script that will have access to the publish architecture (x86/x64) and platform (windows/linux/etc.)?\n. ",
    "paolo8417": "\nYou need to put it in a package\n\n@davidfowl , can you explain how ?!\nThanks\n. ",
    "lkempf": "The problem was that the vs template had .net framework 4.5 as a reference and it seems that entity framework requires 4.5.1. But kpm restore should output an error in this case.\n. ",
    "jeffhandley": "I think we should use NuGet's repositoryPath and do any necessary refactoring to be able to get the setting.  nuget.exe config repositoryPath -aspath is a good way to get it from the command line today.\nI don't think we'd want to support 2 config systems.\n. I expect you'll end up with the same feature requests we got though, for instance allowing settings to be specified once on the machine.\nIt would be useful to be able to have a NuGet.config on the root drive of my server, and all apps share a repository path configured on the server without having to put the setting into the solution folder.\n. Sadly, the logic is obscure and disappointing.\nIf the Published date value is 1900-01-01T00:00:00, then the package is unlisted and it should no longer be considered in dependency resolution when versions are being selected, or during initial installs of packages where users are discovering versions.\nHowever, these \"unlisted\" versions must still be allowed when the user is restoring packages so that the version doesn't disappear out from under them and break their build.\nThis feature allows package authors to unlist packages for two reasons:\n1. The package is being staged for an upcoming release announcement and they want to list the package at the time of the announcement.\n2. The package has a very bad bug and the author doesn't want any new users to discover the version that has the bug.\nThis is implemented through the Published date field simply because it was an incremental change on top of the existing feed format that wouldn't break existing clients or servers.\nFor API v3, we've currently carried this logic forward, but between Beta and RC, we'll be putting a more intuitive solution in place on the V3 feed so that it will be easy to discern between listed and unlisted but more importantly, the resources exposed for package restore scenarios will include unlisted versions where resources exposed for search and dependency resolution simply won't include them.  Then the client won't have to always have logic for checking fields on the package to determine if it's listed or not.\n. I don't think Published can be missing, but it can't hurt to guard against it in case someone's custom NuGet feed doesn't have it.  I would interpret no Published field to Listed, as that would mean they cannot differentiate between listed and unlisted.\n. ",
    "ptrstpp950": "@davidfowl what happened with the * in RC. I am just trying to get latest version from feed with *\n. @davidfowl could you explain something more?\n. @davidfowl do you have use cases in some place written down? Or maybe an open issue with details?\n. Yes. plus issue to integrate it with DNX an DNU\n. If not yet, can I propose such feature? For example definition of dependency can look like:\n\"Newtonsoft.Json\": {\"useLatest\":\"true\"}\nor \n\"Newtonsoft.Json\": {\"useLatest\":\"true\", \"maxVersion\":\"10.2.3.4\"}\nSuch feature is extremely useful in internal large projects. In my case we have more than 100 sln, which gives us up to 700 nuget. All of them can be produced daily (they aren't, but it is possible). Now we are using https://github.com/DarthFubuMVC/ripple which allows to specify \"fixed\" and \"float\" dependency - the concept of this is described here: http://fubuworld.com/ripple/gettingstarted/concepts/\nWhat do you think about this?\n. The only problem with this solution is when we are using external nuget like quite popular Newtosoft.Json or Microsoft libraries.\nAs you probably know convention in build numbers is that last one is patch (exactly MAJOR.MINOR.PATCH), so in my opinion allowing asterisk in version number like: 6.0.* will be quite useful.\nThe real life case is last System.Web.MVC upgrade. Because of security MS release a new version of above package. Using your solution for prerelease version will not resolve this problem, and the manual change is needed in every single project which use this package (in our case most of sln).\nAllowing \"latest\" version or full-asterisk version like 6.0.* (not 6.0.0-*) is much better.\nThe support for version ranges is in my opinion quite same, until we will force download latest version which is in range. \n. To continue discussion: I forgot to mention that I use self-hosted nuget gallery, which allows me to control every version which internal developers use.\nTo your question: \"How often to you float dependencies against released software not under your control?\" - maybe sound strange but quite often. Fortunately usually it is JavaScript libs, which isn't a big problem as regular dll.\nAnyway I don't want to use latest MVC, but I want to use latest MVC 8.0.X , so you are right that supporting version range will resolve my problems.\nSo what do you think about version range support? I could try to take a look into this.\n. ",
    "adriaanp": "I'm getting this behind a proxy:\nSystem.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.WebException: The remote server returned an error: (407) Proxy Authentication Required.\n. This is a known issue with mono 4. You will need mono from master branch or wait for new release for mono.\n. Yes the assembly names changed. :-(\n. ",
    "delloncba": "A easy workaround to dnu restore behind a proxy, at least in windows, is to locate the dnx.exe file and create a dnx.exe.config file which sets the proxy:\n<configuration>\n  <system.net>\n    <defaultProxy useDefaultCredentials=\"true\" enabled=\"true\">\n      <proxy usesystemdefault=\"True\"/>\n    </defaultProxy>\n  </system.net>\n</configuration>\nTested with dnx-clr-win-x86.1.0.0-beta4 and it worked.\n. ",
    "NotMyself": "I just ran into this issue with a clean install of VS2015 RTM and @delloncba's solution got me moving again.\n. ",
    "piyey": "I try @delloncba solution and it worked for me too. Thanks!\n. ",
    "stajs": "Actually, the workaround from @delloncba no longer seems to be working in beta7 :/\n. There was a suggestion that you needed to have the config file for each installed runtime: https://github.com/aspnet/Tooling/issues/105#issuecomment-123854833\nHowever, I deleted all other runtimes except for the one I was using, and the config file doesn't seem to be used:\n\nI got it going by adding these environment variables:\nhttp_proxy=<proxy>:<port>\nhttps_proxy=<proxy>:<port>\n. ",
    "rogerkoy": "solution from @delloncba worked first time but stoped after AspNet5.ENU.RC1_Update1.\nonly complementing, the files dnx.exe generally stays in \nC:\\Users{you}.dnx\\runtimes\n. ",
    "ZOXEXIVO": "This bug is really block our team development with dnx, please fix it\n. Which KB_xxx fix this problem ?\n. ",
    "yurikoex": "So we can assume if a product relies on DNX they should switch to .NET CLI?\n. ",
    "degrim": "It seems the .NET CLI has a similar issue dotnet/cli#3065\n. ",
    "Tragetaschen": "Beta1 still throws a PathTooLongException when packing.\nSteps to reproduce:\n- Create an \"ASP.NET 5 Starter Web\"-project\n- run kpm pack on a command line in the folder\nWorkaround:\nAdd 'bin' to the packExclude array in project.json\n. Just for others finding this bug:\nAfter packing, building also does not work until you add \"bin\" to \"exclude\" as well due to file duplication.\n. Wouldn't it be more consistent to rename project.json's webroot to wwwroot instead? The situation now is that probably everybody leaves the default of \"webroot\": \"wwwroot\", so webroot is really the odd one out.\n. Sure\n. Just started the process\n. And done\n. For now, I have temporarily removed global.json and DependencyInjection.sln from my Fork of DI.\nThe main issue I think is: what happens when (in my example) DependencyInjection in turn also has a submodule of Ninject and references that from its global.json?\nWhat about the following:\nInstead of \"sources\"ing a directory, global.json also supports including other (sub-)directory's global.json files and constructs additional SourcePaths from its contents recursively. This has the added benefit, that whatever a project decides to do with its folder structure, this is automatically reflected in my build process. On the other end, the DependencyWalker/LibraryManager is shared during a full pack-compilation and thus keeps a consistent view on the environment.\nIn the initial example, I would include DI's global.json and add a path to Ninject. When pack builds M.F.D.Ninject, the SourcePaths include my local Ninject and it works.\nIn the extended example, I would include DI's global.json (which itself includes a SourcePath into its submodule) and depending on the ordering:\n- Would consistently use the DI's Ninject when including the global.json before the path to my Ninject\n- Would consistently use my local Ninject when including the global.json after the path to my Ninject\n. Yes, I'm pro-Option1. However, I wouldn't go as far as to make this automatic. When I add a submodule, already I have to change my own, primary global.json to include the submodule's (src-)path to the source-array. I think it's perfectly fine to instead \"include\" the submodule's global.json and add what sources are mentioned there. With that, I can control which of the conflicting folders takes precedence by ordering the sources accordingly.\n. I don't see a problem that doesn't exist today. Or I missed something fundamentally :)\nIncluding a global.json is a shorthand for expanding its source-array. So the problem with lib1 also exists today when I use the following, primary global.json.\n{\n    \"sources\": [\n        \"src\",\n        \"external/lib1.version2/src\",\n        \"external/lib2/src\", /* manually expanded */\n        \"external/lib2/external/lib1.version2\", /* manually expanded */\n        \"external/lib2/external/lib5\" /* manually expanded */\n    ]\n}\nWith this, the answer is as far as I understand: external/lib1.version2/src is exposed, which is perfectly legitimate. If I move external/lib1.version2/src to the bottom lib2's version is exposed.\nWhen the submodule's global.json changes at a later date and includes new dependencies that existed before in my repository, it gets interesting. But updating any dependency blindly is bound to fail\u2026\n. The new IProjectContext from 4a7994d gives the necessary context to run the example correctly.\n. Now, MVC#2277 and MusicStore#410 introduced the lower-case variant. Can this be closed then?\n. Well, what is creating the error is Mono's Console implementation.\nsetfgcolor is obviously null, so reading from one of the possible TermInfoReaders fails.\nI'd say that's either a Mono bug or a Mono/CentOS incompatibility or a missing packet.\nYou could check the TERMINFO environment variable, or set the TERM environment variable to choose a TermInfoReader explicitly.\nSetting TERM to dumb should disable the entire output and eveything should work.\n. Ok, this (or something very similar) bit me again when moving from beta4 to beta5.\nThe change to ICompileModule was to remove the 'I's from both Before- and AfterCompileContext, so my compile modules needed to change. The net effect when running dnu build on a command line was several errors because my generated classes weren't present (and also a test Console.WriteLine didn't make it).\nSo I was in the nice situation where:\n- No samples for ICompileModule were available\n- No immediate error in Visual Studio (compiler/preprocess code isn't part of IntelliSense)\n- All the usual errors in VS like in beta4, because ICompileModules are not run on the DTH\n- No immediate error on the command line\nThat was no fun.\nAs a workaround, I copied the class from the compiler/preprocess folder to the root of the project and there I was able to see the actual errors.\n. I have created another branch that mimics RazorPreCompileModule.\nDue to #1041, this gives the following output on Linux (note that the code did NOT run)\n```\n$ kpm build --quiet\nBuilding Source for Asp.Net,Version=v5.0\nBuild succeeded.\n    0 Warnings(s)\n    0 Error(s)\nTime elapsed 00:00:01.5647669\n```\nThe actual error is hidden in the KRE_TRACE=1:\n[...]/klr.host.dll Information : 0 : [LoaderContainer]: Load name=Reference\n[...]/klr.host.dll Information : 0 : [LoaderContainer]: Load name=Reference\n[...]/Microsoft.Framework.Runtime.Roslyn.dll Error : 0 : [RoslynCompiler]: Failed loading meta assembly 'Source':\n System.Reflection.ReflectionTypeLoadException: The classes in the module cannot be loaded.\n  at (wrapper managed-to-native) System.Reflection.Assembly:GetTypes (System.Reflection.Assembly,bool)\n  at System.Reflection.Assembly.GetExportedTypes () [0x00000] in <filename unknown>:0\n  at System.Reflection.Assembly.get_ExportedTypes () [0x00000] in <filename unknown>:0\n  at Microsoft.Framework.Runtime.Roslyn.RoslynCompiler.CompileProject (Microsoft.Framework.Runtime.Project project, ILibraryKey target, IEnumerable`1 incomingReferences, IEnumerable`1 incomingSourceReferences, IList`1 outgoingReferences) [0x00000] in <filename unknown>:0\n. For me, the mono PR fixes the issue.\n. Does this mean the required version of mono will be bumped to master which will become 4.0?\n. Yes, please\n. I don't like it.\n- The code in the submodules is in fact separate and the responsibility for its development lies somewhere else\n- The way submodules handle history (log) is IMHO preferable\n- Most of the friction regarding submodules being correctly checked out can be solved by the build script. Take Mono for an example. I never had to even think about it other than seeing the automatic update code during the configure step.\n- I always prefer referential integrity over a blunt copy :-)\n. Does this mean restore does not go into referenced projects? And more importantly, is this implemented already starting with beta4? And if yes, how can I prepare a project for a successful dnu publish --no-source?\n. 4a, because it's easy to describe how the ordering/overriding works.\n(and it extends nicely with upstream global.json-include)\n. I'm reminded of aspnet/Home#225 and my list of suggestions. I'm sure glad to see things improving considerably :relaxed: \nI'd like to :+1: a default of loosen mode, so possible future problems when developing with VS on Windows can surface early. As mentioned in the Home bug, things like Razor precompilation won't run when the folders don't follow the lower-case naming convention and this is really hard to notice otherwise.\nPersonally, I'd always go with strict mode, but that's definitely too much for many programmers. And those that know they will always run on a case-insesitive file system on Windows have the option to disable these kinds of warnings.\n. I really hope the solution here spans most (if not all) cases of conventional files like ViewStart.chstml or the special project folders. Currently, it's way too easy to get things wrong - event in the VS templates.\n. The problem is, that Hosting does a Console.ReadLine() and requires a valid TTY for that at the moment. There is some work underway to remove that requirement.\n. Hmm, github weirdness?\nThe changes to Hosting are merged and Console.ReadLine is gone\n. It's dnx . kestrel, not dnu.\n. I think there is one piece missing in this discussion: The file watching implementation requires the running process to cooperate to actually shutdown. It's using the IApplicationShutdown infrastructure and signals the ShutdownRequested CancellationToken, so if the running application does not set itself up to do anything with this, it will look like watching isn't working.\nMicrosoft.AspNet.Hosting uses the cancellation token as the one thing to end itself, so watching the typical web command works. The test runner on the other hand doesn't do anything with it, so tests will always run in their entirety and exit at the end, while fully ignoring any intermediate request.\n. I failed to create a repro from scratch as well, so I started taking away stuff from Hosting while keeping the error intact. The result is here in my Hosting fork (I promise, I won't PR this).\nAs the tree is setup now, you dnu restore the projects and then dnu build in Microsoft.AspNet.Hosting.\nThe important bit is, that that main project pulls in CoreCLR's System.Threading indirectly using the reference to Microsoft.Framework.Runtime.Abstractions. If you remove that (otherwise unused) dependency and add one in dnxcore50 to System.Threading, the error is \"correct\" for CoreCLR.\n. No, exactly the same problem.\n$ dnu --version\nMicrosoft .NET Development Utility\n Version:      1.0.0-beta7-12356\n Type:         Mono\n Architecture: x64\n OS Name:      Linux\n. Still no luck:\n$ dnu --version\nMicrosoft .NET Development Utility\n Version:      1.0.0-beta8-15530\n Type:         Mono\n Architecture: x64\n OS Name:      Linux\n. Hang on, that's four days old according to MyGet and so is the patch from #2390. So it's likely it hasn't made it through coherence builds yet.\n. This is fixed. There are a couple of log lines reading\nTotal projects built: 1\nAdding NuGet package /home/kai/yocto/dnx/samples/HelloWorld/bin/Debug/HelloWorld.0.1.0-beta.nupkg to /home/kai/yocto/dnx/samples/something/approot/packages\nInstalling HelloWorld.0.1.0-beta\nAdd complete, 152ms elapsed\nRemoving /home/kai/yocto/dnx/samples/HelloWorld/bin/Debug/HelloWorld.0.1.0-beta.nupkg\nRemoving /home/kai/yocto/dnx/samples/HelloWorld/bin/Debug/HelloWorld.0.1.0-beta.symbols.nupkg\nand something contains a working application.\n. Correction: Refreshing the browser doesn't yet fix this after changing the ICompileModule. I need to do a CTRL+F5 in VS to again have a working environment.\n. What can I do to make you keep it? Beer? Cake?\nAn example  how to avoid Reflection.Emit on an embedded platform?\nPretty please\u2026\n. The error was actually on my end, because an ICompileModule is constructed once and then called multiple times in VS. Since this entire feature is under the radar until after RTM, I'm going to close this.\nLooking forward for the (ideas behind) ICompileModule becoming a full thing!\n. No, only HelloWorld\n. Was already on it. BTW: Why doesn't restore recurse properly?\nUnable to locate Microsoft.CodeAnalysis.Analyzers 1.1.0-beta1-20150831-03\nand some weird stuff in the new misc folder (\"FlibbleWibbleWoozleWuzzle\").\n. But publishing works afterwards. I didn't dare to check with the restore errors before\u2026\n. That policy is too specific DNX (think \"cleanup\"). The Hosting infrastructure would be the right place and there, SIGINT is used for graceful shutdown. In addition, you can always register a signal handler that IApplicationLifetime.\n. I do it with Mono.Posix against the full framework profile. On Core, I don't know, Posix signal handlers have a couple of restrictions.\n. Double aspnet50\n. Is the exec bit in there in the first place?\n. This doesn't work on mono: https://github.com/mono/mono/blob/master/mcs/class/corlib/System/Environment.cs#L238\n. Isn't Is64BitProcess available yet?\n. In my big Kestrel PR, I'm using a variant that omits unsafe entirely.\nCoreFX uses stackalloc\n. ",
    "balachir": "Not flattening the graph does look cleaner and more readable. But the graph will be huge based on what we have seen with the References tree in VS (~18000 nodes). I like the combination approach - we can show dependencies only upto 3 levels, after that we show ellipses eg: '(...)' or something to indicate there are more dependencies.\nAlso, I'd like to see the header say 'Printing dependencies' or something similar so that it's clear what the graph means.\n. That's not entirely clear from the help content. Should tooling be using this flag?\n\n. Also I would expect the timestamp of AspNet.Loader.dll to be the same as what's in my project's bin folder. But that's not the case\n\n. Sorry @davidfowl :), what's the right repo for this?\n. Verified that this is fixed with VS CTP3 build.\n. Yeah it is\n. I've re-activated the bug on the tooling side for us to investigate\n. 1.0.0-beta5-11749. This is the version that's available in the latest tooling at the moment.\n. Yep, works fine with 1.0.0-beta5-11855\n. Does not reproduce with VS 2015 RC. Here's what we get with RC. @BillHiebert , any thoughts on whether this due to an msbuild change?\n...\n1>      Source: C:\\Users\\balach.dnx\\packages\\System.Reflection.Primitives\\4.0.0-beta-22816\n1>      File: lib\\contract\\System.Reflection.Primitives.dll\n1>    Using Package dependency System.Text.Encoding 4.0.10-beta-22816\n1>      Source: C:\\Users\\balach.dnx\\packages\\System.Text.Encoding\\4.0.10-beta-22816\n1>      File: lib\\contract\\System.Text.Encoding.dll\n1>c:\\users\\balach\\documents\\visual studio 2015\\Projects\\ClassLibrary5\\src\\ClassLibrary5\\Class1.cs(16,20): error CS0161: 'Class1.MethodA()': not all code paths return a value\n1>  Build failed.\n1>      0 Warnings(s)\n1>      2 Error(s)\n1>  Time elapsed 00:00:01.1792167\n========== Build: 0 succeeded or up-to-date, 1 failed, 0 skipped ==========\n\n. This was fixed in the tooling side. TFS #1183903\n. 1.0.0-beta5-11911, this is the one that we currently have in WTE\n. Should this crash the dnx.exe process though? If I run under the debugger, I get\n\nI can reproduce with latest tooling bits for Dev14 RTM\n. ",
    "danroth27": "@davidfowl @Eilon When is this coming?\n. https://github.com/aspnet/FileSystem/issues/71\n. Yes, did you read Jeff's comment in #1208?\n. #1733\n. In this case the error was caused by the package not being found on the configured feeds.\n. :shipit:\n. @glennc\n. @Eilon @lodejard We need to figure out what to do here for beta7\n. Blog post should be updated now.\n. :shipit:\n. Feeds used should list the URIs that I configured in NuGet.Config.\n. > This would be insane.\nWhy would this be insane? I think it's actually a good practice to be explicit in your project what you directly depend on. It makes inspecting your project dependencies easier and you get more control over the version that your project uses. If the runtime had this behavior it would help you make sure you did this correctly.\n. I'm making the doc changes now\n. ",
    "tomstreet": "Would this enable the loading of assemblies at runtime for MEF like functionality like this SO question talks about?\n. ",
    "Tratcher": "Open an assembly in ILSpy and look at the names of embedded resources.\n. Only the netcore45 (WinRT) target for Newtonsoft.Json has a reference to Windows.winmd. We shouldn't be using that version. I've asked @ChengTian to verify which binary KPM is using.\n. ```\nC:\\git\\PK-Universe\\Caching>kpm restore\nRestoring packages for C:\\git\\PK-Universe\\Caching\\samples\\MemoryCacheConcurencyS\nample\\Project.json\nAttempting to resolve dependency MemoryCacheConcurencySample >= 1.0.0\nAttempting to resolve dependency Microsoft.AspNet.MemoryCache >= 1.0.0\nAttempting to resolve dependency Microsoft.Framework.Runtime.Interfaces >= 1.0.0\nAttempting to resolve dependency mscorlib >=\nAttempting to resolve dependency System >=\nAttempting to resolve dependency System.Core >=\nAttempting to resolve dependency Microsoft.CSharp >=\n\nSystem.AggregateException: One or more errors occurred. ---> System.Net.Http.Htt\npRequestException: An error occurred while sending the request. ---> System.Net.\nWebException: The remote name could not be resolved: 'www.myget.org'\n   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)\n   at System.Net.Http.HttpClientHandler.GetResponseCallback(IAsyncResult ar)\n   --- End of inner exception stack trace ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at Microsoft.Framework.PackageManager.Restore.NuGet.HttpSource.d__1\n.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.Restore.NuGet.PackageFeed.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at Microsoft.Framework.PackageManager.RemoteWalkProvider.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__\n1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__\n1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__1\n.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__1\n.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__1\n.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__1.\nMoveNext()\n   --- End of inner exception stack trace ---\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceled\nExceptions)\n   at System.Threading.Tasks.Task1.GetResultCore(Boolean waitCompletionNotifica\ntion)\n   at System.Threading.Tasks.Task1.get_Result()\n   at Microsoft.Framework.PackageManager.RestoreCommand.ExecuteCommand()\n   at Microsoft.Framework.PackageManager.Program.<>c__DisplayClass1.b__7()\n---> (Inner Exception #0) System.Net.Http.HttpRequestException: An error occurre\nd while sending the request. ---> System.Net.WebException: The remote name could\n not be resolved: 'www.myget.org'\n   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)\n   at System.Net.Http.HttpClientHandler.GetResponseCallback(IAsyncResult ar)\n   --- End of inner exception stack trace ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at Microsoft.Framework.PackageManager.Restore.NuGet.HttpSource.d__1\n.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.Restore.NuGet.PackageFeed.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at Microsoft.Framework.PackageManager.RemoteWalkProvider.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__\n1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__\n1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__1\n.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__1\n.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__1\n.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__1.\nMoveNext()<---\n\nRestore failed\nOne or more errors occurred.\n``\n. Note that Visual Studio works fine offline. What logic do they use for package restore?\n. Yes, lets try this again in a few weeks.\n. I don't think WinHttpHandler would have this problem. @ChengTian, do you have that ready to test?\n. KVM alias has the same issue, it displays theKRE-CLR-x86.1.0.0-beta2-10752` format, but takes in the other format.\n. Can you call any other method in this assembly? Is the failure specific to this type and/or constructor?\n. @davidfowl  https://github.com/aspnet/Security/blob/dev/NuGet.Config#L6\n. @CoreyKaylor The test command is designed to exit after executing the tests once, I don't think --watch is ever going to make sense for tests.\nThe web command however is designed to run until requested to terminate.  --watch monitors for changes and kills the process.  We're still discussing who should restart it.\n. @CoreyKaylor  @mikeobrien That's a usage I've never heard of. You could probably make it work. Xunit currently exits at the end of every test run, so would your nodemon sample run the tests continuously in a loop even if there weren't changes? Our does it ignore the app self-termination and just re-run the command when it detects changes?\n. I reviewed this with the original feature designers / implementers and verified that everything is working per the original design. That said, clearly the design does not live up to user expectations and we have more work to do.\nNotes:\n- watch monitors referenced files for changes and shuts down the application \n- It does not re-launch the app by itself like on other platforms.\n- Make it behave like other platforms, or else rename it to something like ShutdownIfModified\n- Regardless, we need something that can monitor the process lifetime and restart it.\n. Recommendation: Have a separate tool (global command) to monitor the process and restart it if it dies. This may require a contract between the process and watchdog for exit codes.\nWe at least need to provide viable samples for this scenario.\n. Which version of dnx are you using? I see both errors displayed when compiling against either framework.\nVersion: 1.0.0-beta5-11706 coreclr x86\n``` c#\n    public interface IFoo\n    {\n        CancellationToken CancellationToken { get; set; }\n    }\npublic class Foo : IFoo\n{\n    public CancellatioZnToken CancellationToken { get; set; }\n}\n\n```\nC:\\temp\\ConsoleApp1\\src\\ConsoleApp1\\Program.cs(23,16): error CS0246: The type or namespace name 'CancellatioZnToken' could not be found (are you missing a using directive or an assembly reference?)\nC:\\temp\\ConsoleApp1\\src\\ConsoleApp1\\Program.cs(21,24): error CS0738: 'Foo' does not implement interface member 'IFoo.CancellationToken'. 'Foo.CancellationToken' cannot implement 'IFoo.CancellationToken' because it does not have the matching return type of 'CancellationToken'.\nIt did not appear to make a difference if I put the interface in a different project.\n. Does the Mono HttpClient use ServicePoint still? How about setting ServicePoint.ConnectionLimit = 1?\n. Nice. Did you try it with 2, 5, and 10 for reference?  1024 is a bit high even for Windows.\n. Modifying startup works. I noticed that the PID only changes if I have accessed/refreshed the page since the last change. I think this is because sites are delay started, they only initialize (and listen for file changes) if someone actually visits the site.\nModifying the project.json does not appear to trigger a process close, and it's harder to tell if you've actually changed anything in the site.\n. Nor do we support aliases. The only special keyword is active\n. :shipit: \n. Discussed offline. That stack trace indicates a regression in Zip processing, not HTTP processing.\n. :shipit: \n. It's all fixed, we're just waiting on the next build. Should be sometime today.\n. https://github.com/aspnet/dnx/blob/dev/makefile.shade#L599-L604\n. Obsolete\n. Bad enough to make restore fail on Mac. However this is primarily because we create far too many instances. We create 2 per feed, per project, resulting in 100+ instances on MVC. The actual solution is to create fewer instances, disposal is a secondary concern.\n. Is the response compressed? I wonder if the Linux client isn't auto-decompressing.\n. @BrennanConroy have you seen any issues like this? Are there any similar corefx bugs outstanding?\n. Something has definitely regressed here, this caused Universe Tests to fail four times today in both dev and release. I also saw it once in a local build (ServerTests?).\n/cc: @muratg \n. Our issue was only in the server tests, it shouldn't affect EF.\n. https://github.com/aspnet/Hosting/commit/818575c20178103a5b61a30867e68f35995bacbb\n. https://github.com/aspnet/KestrelHttpServer/issues/247\n. @csunali I deployed https://github.com/csunali/WebApplication2ForKestrel to IIS on Win10 without issue. The only thing I did that you did not mention was granting IIS_IUSRS permissions to the root app directory (one up from httpdocs).\n. This issue was moved to aspnet/Hosting#449\n. It all looks good except for the possible discrepancy between \"Hosting:WebRoot\": \"wwwroot\" and \"Hosting\" { \"WebRoot\": \"wwwroot\" }\n. Better. @davidfowl?\n. Only \"webroot\"? or \"webroot\" and \"hosting:webroot\"? Just doing \"webroot\" is much easier and less confusing.\n. :shipit: \n. Because they removed Begin/EndAccept. We were supposed to move to Task<Socket> AcceptAsync() but he couldn't find it.\n. :shipit: \n. @muratg \n. Ah, yes.\n. From @clrjunkie on January 11, 2016 10:46\nFor those notified via email: made a slight change to the example -> readonly: false\n. The tooling is not currently open source, but you can file issues for it here:\nhttps://github.com/aspnet/tooling\n.NET Core:\nhttps://github.com/dotnet/corefx\n. The FileStream using extends to the end of this method. Extending the response using around all of that would make your nesting even deeper. Just a style issue.\nBut honestly there's not much point in optimizing the failure case. Perf primarily matters in the success case.\n. nit: formatting\n. use the simpler \"Hosting:WebRoot\": \"wwwroot\" format\n. use the config APIs, don't read the json directly. There are variable layouts like \"Hosting:WebRoot\": \"wwwroot\"\n. This doesn't just apply to json config files, it could be an environment variable or a command line parameter. Do you really want WebRoot as a environment variable?\n. There should be an AcceptAsync that returns a task.\n. Hold off on merging this for a little, we need to figure out why we don't see the new API.\n. https://github.com/dotnet/corefx/pull/3655/files\n. nit: try the simple scenario first?\n. constant for wwwroot?\n. Can you use returns instead of breaks here?\n. lol\n. This only works if the key is already present.\n. webroot\n. nit: ordering\n. nit\n. ",
    "d0apga": "This used to happen to me as well.\nWhen use kpm -v restore in powershell, it resolved all dependencies, but VS14 not install the packages.\n\n. it seems that restoring correctly,but not use the restore package.\ni push the demo source to my repo: https://github.com/nidilong/aspnetvnextdemo.git,\nthanks a lot.\n. oh,I'm sorry. Thanks @davidfowl \n. try this:\nkpm restore -s https://www.myget.org/F/aspnetvnext/ -f https://nuget.org/api/v2/\n. -f means fallbacksource \n-s means main source\nI got it from https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.PackageManager/Program.cs\n. ",
    "rowanmiller": "I'm not so sure, in my mind restore is about making sure we have all the dependencies for the project. We know at the time of restore that we can't meet the dependency requirements so an error would make sense to me. Or perhaps a warning since there may be other targets that will run.\nThat said, I don't care that much and if we throw something that is clear at a later point that works too :smile: \n. Moved to the NuGet repo https://github.com/NuGet/Home/issues/634\n. @davidfowl How are we planning to do this for the shared dependencies we have (DI, Logging, etc.)? I realize they won't be strong named on the aspnet50 and aspnetcore50 platforms but the net45 versions will need to be so that EF (and other strong named things) can depend on them.\n. +1 for this. This actually seems to have got worse recently too. I used to be able to have a NuGet.config in my folder structure that had relative paths, provided I cleared the sources for the one in my dnx project. But now it errors out if any of the config files it finds have a relative path, even if those relative paths are later cleared from the source list.\n. Yeah I was just raising it as a scenario that is easy under full .NET and hard (or impossible) under DNX. If we don't care about the scenario then that's fine... just wanted to make sure we knew about it and made a conscious decision :smile:. Consider it more \"feedback from using DNX\" rather than a request to make it work.\nBTW the scenario came up as we use AppDomains as a way to run cold start benchmarks for EF (and proxies to send timing and memory info back to the main AppDomain). We just disabled these tests for DNX and only run them on Full .NET.\n. A run I just did returned 24,156 on desktop and 3,414,444 on DNX. I also got the memory number before forcing collection and the first iteration is doing more work on DNX. .NET is cleaning up just a ~900 bytes where as DNX is cleaning up ~3,300,000. It's not just the first iteration that is slower though.\nBTW note the for loop, so it's not like one call to the method takes 2-4sec. The additional time for the EF benchmarks to run (1hr on .NET Framework and 5hr on DNX CLR) is because we call this multiple times per iteration to get memory before and after the measured section of each test.\n. BTW to be clear I'm not super passionate about this scenario... I just wanted to file it so that you are aware of it (and I thought it might just be a symptom a deeper problem).\nThat said, it would be nice to trim the additional 4hrs of overhead spent in this API from our DNX benchmark runs (we currently run the .NET ones as a rolling build, but the DNX ones just nightly).\n. ",
    "makzr": "What is the meaning of -s and -f ?\nThese options are not listed in --help?\n. Looks like it attempts to download the whole .NET framework ;)\nI canceled after 5 minutes.\n. ",
    "alek-sys": "I've tried to fix it in #529 (but probably in pretty straightforward way)\n. This fixes #526 \n. ",
    "Juddling": "```\njuddling@juddling-EasyNote-TK85:~/Documents/Home/samples/HelloWeb$ kvm list\nfind: \u2018/home/juddling/.kre/alias\u2019: No such file or directory\nActive Version              Runtime Architecture Location             Alias\n------ -------              ------- ------------ --------             -----\n  *    1.0.0-alpha3         mono45  x86          ~/.kre/packages\n```\n. ",
    "atrauzzi": ":+1: \n. Is any part of this due to the fact that that project.json has no relationship (that I can see) with solutions?\nWhat if the build system was made aware of solutions and established them as another origin of external-to-project code?\n(I'm not a huge fan of solutions FWIW and I think they're somewhat redundant, especially when packaging and other code sharing mechanisms are in place)\n. Ah, so rather than make K aware of csproj, just stick to having the csproj build to the more \"common\" language of nuget packages?\n. If the csproj had dependencies of it's own, would my project.json based project still be able to pull all of them in?\n. I guess nuget it is!  Of course, really what I should be doing is creating vnext class libraries going forward.  Feel free to close unless you think there are worthwhile suggestions here :)\n. Thanks David!  Keep us posted :)\n. :tada:\n. https://github.com/aspnet/Home/issues/155\n. @davidfowl \nI've been trying to get going with postgresql and EF7, so I've been using their unstable feed here: https://www.myget.org/F/npgsql-unstable\nI think this issue is related to what I'm experiencing?  Here's my project.json for you:\n```\n{\n  \"dependencies\": {\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-beta4\",\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta4\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-beta4\",\n    \"EntityFramework\": \"7.0.0-beta4\",\n    \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-beta4\",\n    \"Npgsql.EntityFramework7\": \"3.0.0-unstable1836\"\n  },\n\"commands\": {\n    \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5000\"\n  },\n\"frameworks\": {\n    \"dnx451\": {\n    },\n    \"dnxcore50\": {\n    }\n  }\n}\n```\nWhat I'm experiencing is that there's some kind of issue with the Microsoft.Bcl.Async that npgsql's library is either bundling or requesting.  It only occurs for dnx451.  Gives me a little yellow warning in my references.  Hopefully this is helpful.\n. ",
    "StefH": "Same error occurs when using empty string or empty strings.\nc#\n{\n    \"authors\": [ \"\" ]\n}\nor\nc#\n{\n    \"authors\": [ \"\", \"\" ]\n}\n. Hi @Maumar and @davidfowl,\nCan you please share the documentation on how to define a PCL in the project.json? (e.g. \".NETPortable,Version=v4.6,Profile=Profile151\")\nAnd what's the compiler directive to use in code when dealing with PCL specific statements? Is that PORTABLE?\nAnd why is #827 related to this?\n. Is this also not planned for the future release?\n. Another question : Is defining the external code files using an array supported?\nI thought the only support was to use a ; - separator?\nc#\n{\n    \"code\": \"../path/to/somewhere.cs; ../../another/path/to/file.cs\",\n}\n. Hi David, in which version from the XRE is this support?\n. The owners property is also not supported. Currently the value from authors is copied into this field when the nuget package is created.\nOther non-supported fields are:\nsummary\nreleaseNotes\n. ",
    "MattGal": "VS: WPT 22020.0\nKRE: 1.0.0-alpha4-10280 svrc50  x86\nI was able to work around by restarting VS and deleting files after seems to work, so maybe my KVM upgrade was just stale and waiting on this.\nFrom: David Fowler [mailto:notifications@github.com]\nSent: Monday, August 25, 2014 5:00 PM\nTo: aspnet/KRuntime\nCc: Matt Galbraith\nSubject: Re: [KRuntime] Deleted files with build errors continue to cause build errors (#576)\nCan you provide the versions of everything in use? The caching issue was fixed and you likely have to update the appropriate bits (vs version and kre)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/KRuntime/issues/576#issuecomment-53354674.\n. +1\n. Yes, in this case too high means a value which is higher than any which exist.  The specific issue I hit was that a contract had been revised backwards in version and I copied a project out of a bug repro to see if it still reproduced.\nSpecifying a version that is too low will unify forward, which is a pretty good experience.  The reason I created an issue about this one is that there\u2019s no surfacing of what the specific problem was in VS (whereas there is if you go to the console and try to run your K app from there)\n-Matt\nFrom: David Fowler [mailto:notifications@github.com]\nSent: Wednesday, October 15, 2014 12:52 AM\nTo: aspnet/KRuntime\nCc: Matt Galbraith\nSubject: Re: [KRuntime] Projects referencing contract version greater than existing have very poor error experience (#726)\nWhat does too high mean? You specified a version that doesn't exist?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/KRuntime/issues/726#issuecomment-59169678.\n. Mostly.  Both the experience of non-existent contract and \u201cfuture version\u201d contract are a poor experience.  However, if I do something like this in project.json:\n```\n    \"aspnetcore50\": {\n        \"dependencies\": {\n        \"System.Console\": \"4.0.0.0\",\n        \"System.IO.FileSystem\": \"0.0.10.0\"\n\n    }\n\n```\n\u2026 I can still totally step into and use my app, provided it doesn\u2019t actually use that contract.  If I do the same with System.IO.FileSystem 4.0.10.0 including not even having usage of the reference in my app, I get zero indication why my app instantly fails with -1 from VS.\nThe issue is not that I want to be able to use references that don\u2019t exist, rather that there is no error message surfaced to the user.  In the case of an obvious typo this will be sort of easy to detect (but again, no specific message like \u201cFailed to resolve Contract reference \u201cSystem.IO.Firesystem\u201d \u201c to guide the user back onto the path.\n-Matt\nFrom: David Fowler [mailto:notifications@github.com]\nSent: Wednesday, October 15, 2014 9:49 AM\nTo: aspnet/KRuntime\nCc: Matt Galbraith\nSubject: Re: [KRuntime] Projects referencing contract version greater than existing have very poor error experience (#726)\nIsn't that the same as specifying a dependency that doesn't exist?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/KRuntime/issues/726#issuecomment-59237272.\n. (Edit: I actually am saying that from a user perspective compilation works and runtime fails.  There are no warnings or errors when this happens.    This is what is described in the two scenarios under Behavior 2.)\nThere are definitely two different behaviors.  Both represent a poor experience from a customer standpoint.  \nBehavior 1:  Silently ignore failure to resolve the package, run the app anyways:\n            \"dependencies\": {\n                \"System.Console\": \"4.0.0.0\",\n                \"System.IO.FileSystem\" :  \"1.0.0.0\"\n            }\nBehavior 2:  Fail to resolve package, immediately exit from runtime, but give absolutely no warning or error to help resolve the problem\n1) Specify non-existent package, debug into project:\n            \"dependencies\": {\n...\n                \"ThisDoesntExist\" :  \"1.0.0.0\"\n            }\n2) Specify a future version of any existing package, debug into product:\n            \"dependencies\": {\n...\n                \"System.IO.FileSystem\" :  \"5.0.0.0\"\n            }\nBubbling up ANY warning or error to VS would be sufficient to help the user figure out what is happening.\n. You're welcome to track it that way.  I view them as different as this is another user on the same identical machine where I was using it, versus someone trying to restore a solution from source control.  As long as it gets easier for the user experiencing the situation to know it has happened, I don't mind if you close this as dupe.\n. It definitely fails much more nicely now.\n. Maybe it died updating in KPM restore, not sure.  Ping me offline if you'd like to see my repro setup.  I tried both KPM restore from cmd line and from VS UI.\n. Another issue I've seen with stale project.lock.json comes from upgrading KRE.  I've seen this on several machines due to changes in format:\nC:\\GIT\\DataPoint\\Source\\DataPoint.Web>kpm restore\nRestoring packages for C:\\GIT\\DataPoint\\Source\\DataPoint.Web\\project.json\nSystem.ArgumentNullException: Value cannot be null.\nParameter name: source\n   at Newtonsoft.Json.Linq.Extensions.ValueT,U\n   at Microsoft.Framework.Runtime.DependencyManagement.LockFileFormat.ReadLockFile(JObject cursor)\n   at Microsoft.Framework.Runtime.DependencyManagement.LockFileFormat.Read(Stream stream)\n   at Microsoft.Framework.Runtime.DependencyManagement.LockFileFormat.Read(String filePath)\n   at Microsoft.Framework.PackageManager.RestoreCommand.ReadLockFile(String projectLockFilePath)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__79.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.<>c__DisplayClass77_0.<b__0>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.<>c__DisplayClass89_0`1.<b__0>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.Framework.PackageManager.RestoreCommand.d__77.MoveNext()\nRestore failed\nValue cannot be null.\nParameter name: source\n... which can only be fixed by deleting / renaming project.lock.json.  It'd be much better to just blow away the file and re-write it if this happens versus crashing.\n. Cool.  Is there also an issue to list all the files found after traversing the paths found in the code property (like in Solution Explorer)?\n. @sayedihashimi  Yes.  Back when I created the issue, I was specifically setting up machines for partners to use for co-development of porting their apps to ASP.NET 5.  Back then things were a bit more finicky so I would make sure the environment and Web Tools bits were good before handing it over to the partner team.\nI imagine the main reason folks would hit this is when adding other users to their machine to connect and help debug / fix build issues.    For the purposes of what I was doing, and likely a majority of actual users, what you describe is sufficient to make their scenario work.\n. Closing.  My snippet should have been:\n    var loadContext = (IAssemblyLoadContextAccessor)CallContextServiceLocator.Locator.ServiceProvider.GetService(typeof(IAssemblyLoadContextAccessor));\n    var asm = loadContext.Default.LoadFile(path);\n. I'd vote for #1 or #3, as I am skeptical that the * naming system will add much value to users, and doesn't exactly match the \"wildcard\" interpretation that asterisk has carried for some years.   #1 makes it slightly more obvious that it's a mapping, but may be confusing because it's a mapping and not a project name-wise... so it might not be obvious whether one puts the project name in both places AND the mapping if they want a different name, or only the mapping.\nThis feature is definitely needed.  However, since users will be making the transition from  the traditional SLN / proj way of doing things, we need to think about how users will react.  There needs to be some kind of assurance that if I build a particular project.json that VS or the command line tools will show the assembly / package name when I do. Imagine someone not super familiar with the project system trying to contribute.  With any of these approaches, if they were in a subfolder building various projects from the solution as they touched them, they'd see some projects that just matched their folder names, others that didnt\n. Yup, upgrading to 11855 definitely solves my line-number-related issues.   It'd be nicer to have a better error msg, but taking me directly to the offending comment is good enough.  (Except in packages.json, bower.json, etc, but that's a separate issue )\n. I don't declare them at all actually.   For the other frameworks, the first snippet is literally it.  All dependencies specified exist purely under the dnxcore50 node.\n. OK, will discuss with them.   There are quite a few challenges with trying to make this work currently.\n. OK, will discuss with them.   There are quite a few challenges with trying to make this work currently.\n. Any workarounds?\n. Glad there's a workaround, but can you clarify why I see beta5/beta6 versions with timestamps attached when hitting either issue?  Seems as if a non-final package were being used when doing this despite trying to keep my machine clean with \"final\" beta5 + 6 bits.\n. ",
    "colemickens": "I've definitely run into this issue as well. It doesn't error at any of the times I'd expect it to.\n. root@497b15746bea:~/AgoraSolution/Agora.Api# kpm pack\nverbose:False out: project:\nCopying to output path /root/AgoraSolution/Agora.Api/bin/output\nPacking nupkg dependency Microsoft.AspNet.Mvc 6.0.0-alpha3-10424\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.Mvc/6.0.0-alpha3-10424\nPacking nupkg dependency Microsoft.AspNet.Routing 1.0.0-alpha3-10145\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.Routing/1.0.0-alpha3-10145\nPacking nupkg dependency Microsoft.Framework.ConfigurationModel.Json 1.0.0-alpha4-10254\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.Framework.ConfigurationModel.Json/1.0.0-alpha4-10254\nPacking nupkg dependency System.Diagnostics.Debug 4.0.10.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.Diagnostics.Debug/4.0.10.0\nPacking nupkg dependency System.Diagnostics.Tools 4.0.0.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.Diagnostics.Tools/4.0.0.0\nPacking nupkg dependency System.Globalization 4.0.10.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.Globalization/4.0.10.0\nPacking nupkg dependency Microsoft.CSharp 4.0.0.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.CSharp/4.0.0.0\nPacking nupkg dependency Microsoft.AspNet.FileSystems 1.0.0-alpha3-10132\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.FileSystems/1.0.0-alpha3-10132\nPacking nupkg dependency Microsoft.AspNet.Http 1.0.0-alpha3-10154\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.Http/1.0.0-alpha3-10154\nPacking nupkg dependency Microsoft.AspNet.Mvc.Common 6.0.0-alpha3-10424\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.Mvc.Common/6.0.0-alpha3-10424\nPacking nupkg dependency Microsoft.AspNet.Mvc.Core 6.0.0-alpha3-10424\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.Mvc.Core/6.0.0-alpha3-10424\nPacking nupkg dependency Microsoft.AspNet.Mvc.ModelBinding 6.0.0-alpha3-10424\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.Mvc.ModelBinding/6.0.0-alpha3-10424\nPacking nupkg dependency Microsoft.AspNet.Mvc.Razor 6.0.0-alpha3-10424\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.Mvc.Razor/6.0.0-alpha3-10424\nPacking nupkg dependency Microsoft.AspNet.Mvc.Razor.Host 6.0.0-alpha3-10424\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.Mvc.Razor.Host/6.0.0-alpha3-10424\nPacking nupkg dependency Microsoft.AspNet.Razor 4.0.0-alpha3-10137\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.Razor/4.0.0-alpha3-10137\nPacking nupkg dependency Microsoft.AspNet.RequestContainer 1.0.0-alpha3-10147\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.RequestContainer/1.0.0-alpha3-10147\nPacking nupkg dependency Microsoft.Framework.DependencyInjection 1.0.0-alpha3-10135\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.Framework.DependencyInjection/1.0.0-alpha3-10135\nPacking nupkg dependency Microsoft.Framework.OptionsModel 1.0.0-alpha3-10122\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.Framework.OptionsModel/1.0.0-alpha3-10122\nPacking nupkg dependency Microsoft.Framework.ConfigurationModel 1.0.0-alpha4-10254\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.Framework.ConfigurationModel/1.0.0-alpha4-10254\nPacking nupkg dependency Newtonsoft.Json 5.0.8\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Newtonsoft.Json/5.0.8\nPacking nupkg dependency etcetera 0.5.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/etcetera/0.5.0\nPacking nupkg dependency Nowin 0.11.0.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Nowin/0.11.0.0\nPacking nupkg dependency Microsoft.AspNet.Hosting 1.0.0-alpha3-10147\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.Hosting/1.0.0-alpha3-10147\nPacking nupkg dependency Microsoft.AspNet.Owin 1.0.0-alpha3-10154\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.Owin/1.0.0-alpha3-10154\nPacking nupkg dependency System.Linq 4.0.0.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.Linq/4.0.0.0\nPacking nupkg dependency System.Reflection 4.0.10.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.Reflection/4.0.10.0\nPacking nupkg dependency System.Reflection.Extensions 4.0.0.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.Reflection.Extensions/4.0.0.0\nPacking nupkg dependency System.Runtime 4.0.20.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.Runtime/4.0.20.0\nPacking nupkg dependency Microsoft.AspNet.Security 1.0.0-alpha3-10250\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.Security/1.0.0-alpha3-10250\nPacking nupkg dependency Microsoft.AspNet.Security.DataProtection 1.0.0-alpha3-10132\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.Security.DataProtection/1.0.0-alpha3-10132\nPacking nupkg dependency Microsoft.Framework.Runtime.Interfaces 1.0.0-alpha3-10165\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.Framework.Runtime.Interfaces/1.0.0-alpha3-10165\nPacking nupkg dependency Microsoft.DataAnnotations 1.0.0-alpha3-10131\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.DataAnnotations/1.0.0-alpha3-10131\nPacking nupkg dependency K.Roslyn 1.0.0-alpha3-10037\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/K.Roslyn/1.0.0-alpha3-10037\nPacking nupkg dependency System.Collections 4.0.0.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.Collections/4.0.0.0\nPacking nupkg dependency System.IO.FileSystem 4.0.10.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.IO.FileSystem/4.0.10.0\nPacking nupkg dependency System.Threading.Thread 4.0.0.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.Threading.Thread/4.0.0.0\nPacking nupkg dependency System.IO 4.0.0.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.IO/4.0.0.0\nPacking nupkg dependency System.Resources.ResourceManager 4.0.0.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.Resources.ResourceManager/4.0.0.0\nPacking nupkg dependency System.Runtime.Extensions 4.0.10.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.Runtime.Extensions/4.0.10.0\nPacking nupkg dependency System.Runtime.InteropServices 4.0.20.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.Runtime.InteropServices/4.0.20.0\nPacking nupkg dependency System.Threading 4.0.0.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.Threading/4.0.0.0\nPacking nupkg dependency System.Threading.Tasks 4.0.0.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/System.Threading.Tasks/4.0.0.0\nPacking nupkg dependency RestSharp 104.4.0\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/RestSharp/104.4.0\nPacking nupkg dependency Microsoft.AspNet.FeatureModel 1.0.0-alpha3-10154\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.FeatureModel/1.0.0-alpha3-10154\nPacking nupkg dependency Microsoft.AspNet.PipelineCore 1.0.0-alpha3-10154\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.PipelineCore/1.0.0-alpha3-10154\nPacking nupkg dependency Microsoft.Framework.Logging 1.0.0-alpha3-10133\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.Framework.Logging/1.0.0-alpha3-10133\nPacking nupkg dependency Microsoft.AspNet.HttpFeature 1.0.0-alpha3-10154\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.AspNet.HttpFeature/1.0.0-alpha3-10154\nPacking nupkg dependency Microsoft.CodeAnalysis.Common 0.7.4060502-beta\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.CodeAnalysis.Common/0.7.4060502-beta\nPacking nupkg dependency Microsoft.CodeAnalysis.CSharp 0.7.4060502-beta\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.CodeAnalysis.CSharp/0.7.4060502-beta\nPacking nupkg dependency Microsoft.Bcl.Immutable 1.1.20-beta\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.Bcl.Immutable/1.1.20-beta\nPacking nupkg dependency Microsoft.Bcl.Metadata 1.0.11-alpha\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/packages/Microsoft.Bcl.Metadata/1.0.11-alpha\nPacking project dependency Agora.Api\n  Source /root/AgoraSolution/Agora.Api\n  Target /root/AgoraSolution/Agora.Api/bin/output/approot/src/Agora.Api\nPath is too long. Path: /root/AgoraSolution/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/ExampleController.cs\" or \"/root/AgoraSolution/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/bin/output/approot/src/Agora.Api/ExampleController.cs\n. I've restructured my project a bit, but it still seems to hit this same problem. Be sure to scroll at the bottom to see the long path...\nYou can clone this repo, type make dev-vnextapi and then inside the container type kpm pack to repro this exact case:\n```\n$ cole@chimera \ue0b0 ~/Code/polykube \ue0b0 \ue0a0 master \ue0b0 make dev-vnextapi \ndocker run                                     \\\n        -p 20020:8000                                \\\n        -v /home/cole/Code/polykube:/root/polykube-dev              \\\n        -it                                          \\\n        -w /root/polykube-dev/src/Polykube.vNextApi  \\\n        polykube/vnextapi                            \\\n        /bin/bash\n[[root@47b611742f2a:~/polykube-dev/src/Polykube.vNextApi#]] ls\nExampleController.cs  Startup.cs  config.json  k_daemon.sh  project.json  start_k_daemon.sh\n[[root@47b611742f2a:~/polykube-dev/src/Polykube.vNextApi#]] kpm pack\nverbose:False out: project:\nCopying to output path /root/polykube-dev/src/Polykube.vNextApi/bin/output\nPacking nupkg dependency Microsoft.AspNet.Mvc 6.0.0-alpha3-10424\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.Mvc/6.0.0-alpha3-10424\nPacking nupkg dependency Microsoft.AspNet.Routing 1.0.0-alpha3-10145\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.Routing/1.0.0-alpha3-10145\nPacking nupkg dependency Microsoft.Framework.ConfigurationModel.Json 1.0.0-alpha4-10266\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.Framework.ConfigurationModel.Json/1.0.0-alpha4-10266\nPacking nupkg dependency System.Diagnostics.Debug 4.0.10.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.Diagnostics.Debug/4.0.10.0\nPacking nupkg dependency System.Diagnostics.Tools 4.0.0.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.Diagnostics.Tools/4.0.0.0\nPacking nupkg dependency System.Globalization 4.0.10.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.Globalization/4.0.10.0\nPacking nupkg dependency RestSharp 104.4.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/RestSharp/104.4.0\nPacking nupkg dependency Microsoft.CSharp 4.0.0.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.CSharp/4.0.0.0\nPacking nupkg dependency Microsoft.AspNet.FileSystems 1.0.0-alpha3-10132\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.FileSystems/1.0.0-alpha3-10132\nPacking nupkg dependency Microsoft.AspNet.Http 1.0.0-alpha3-10154\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.Http/1.0.0-alpha3-10154\nPacking nupkg dependency Microsoft.AspNet.Mvc.Common 6.0.0-alpha3-10424\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.Mvc.Common/6.0.0-alpha3-10424\nPacking nupkg dependency Microsoft.AspNet.Mvc.Core 6.0.0-alpha3-10424\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.Mvc.Core/6.0.0-alpha3-10424\nPacking nupkg dependency Microsoft.AspNet.Mvc.ModelBinding 6.0.0-alpha3-10424\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.Mvc.ModelBinding/6.0.0-alpha3-10424\nPacking nupkg dependency Microsoft.AspNet.Mvc.Razor 6.0.0-alpha3-10424\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.Mvc.Razor/6.0.0-alpha3-10424\nPacking nupkg dependency Microsoft.AspNet.Mvc.Razor.Host 6.0.0-alpha3-10424\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.Mvc.Razor.Host/6.0.0-alpha3-10424\nPacking nupkg dependency Microsoft.AspNet.Razor 4.0.0-alpha3-10137\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.Razor/4.0.0-alpha3-10137\nPacking nupkg dependency Microsoft.AspNet.RequestContainer 1.0.0-alpha3-10147\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.RequestContainer/1.0.0-alpha3-10147\nPacking nupkg dependency Microsoft.Framework.DependencyInjection 1.0.0-alpha3-10135\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.Framework.DependencyInjection/1.0.0-alpha3-10135\nPacking nupkg dependency Microsoft.Framework.OptionsModel 1.0.0-alpha3-10122\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.Framework.OptionsModel/1.0.0-alpha3-10122\nPacking nupkg dependency Microsoft.Framework.ConfigurationModel 1.0.0-alpha4-10266\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.Framework.ConfigurationModel/1.0.0-alpha4-10266\nPacking nupkg dependency Newtonsoft.Json 5.0.8\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Newtonsoft.Json/5.0.8\nPacking nupkg dependency Nowin 0.11.0.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Nowin/0.11.0.0\nPacking nupkg dependency Microsoft.AspNet.Hosting 1.0.0-alpha3-10147\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.Hosting/1.0.0-alpha3-10147\nPacking nupkg dependency Microsoft.AspNet.Owin 1.0.0-alpha3-10154\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.Owin/1.0.0-alpha3-10154\nPacking nupkg dependency System.Linq 4.0.0.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.Linq/4.0.0.0\nPacking nupkg dependency System.Reflection 4.0.10.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.Reflection/4.0.10.0\nPacking nupkg dependency System.Reflection.Extensions 4.0.0.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.Reflection.Extensions/4.0.0.0\nPacking nupkg dependency System.Runtime 4.0.20.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.Runtime/4.0.20.0\nPacking nupkg dependency Microsoft.AspNet.Security 1.0.0-alpha3-10250\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.Security/1.0.0-alpha3-10250\nPacking nupkg dependency Microsoft.AspNet.Security.DataProtection 1.0.0-alpha3-10132\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.Security.DataProtection/1.0.0-alpha3-10132\nPacking nupkg dependency Microsoft.Framework.Runtime.Interfaces 1.0.0-alpha3-10165\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.Framework.Runtime.Interfaces/1.0.0-alpha3-10165\nPacking nupkg dependency Microsoft.DataAnnotations 1.0.0-alpha3-10131\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.DataAnnotations/1.0.0-alpha3-10131\nPacking nupkg dependency K.Roslyn 1.0.0-alpha3-10037\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/K.Roslyn/1.0.0-alpha3-10037\nPacking nupkg dependency System.Collections 4.0.0.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.Collections/4.0.0.0\nPacking nupkg dependency System.IO.FileSystem 4.0.10.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.IO.FileSystem/4.0.10.0\nPacking nupkg dependency System.Threading.Thread 4.0.0.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.Threading.Thread/4.0.0.0\nPacking nupkg dependency System.IO 4.0.0.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.IO/4.0.0.0\nPacking nupkg dependency System.Resources.ResourceManager 4.0.0.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.Resources.ResourceManager/4.0.0.0\nPacking nupkg dependency System.Runtime.Extensions 4.0.10.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.Runtime.Extensions/4.0.10.0\nPacking nupkg dependency System.Runtime.InteropServices 4.0.20.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.Runtime.InteropServices/4.0.20.0\nPacking nupkg dependency System.Threading 4.0.0.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.Threading/4.0.0.0\nPacking nupkg dependency System.Threading.Tasks 4.0.0.0\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/System.Threading.Tasks/4.0.0.0\nPacking nupkg dependency Microsoft.AspNet.FeatureModel 1.0.0-alpha3-10154\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.FeatureModel/1.0.0-alpha3-10154\nPacking nupkg dependency Microsoft.AspNet.PipelineCore 1.0.0-alpha3-10154\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.PipelineCore/1.0.0-alpha3-10154\nPacking nupkg dependency Microsoft.Framework.Logging 1.0.0-alpha3-10133\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.Framework.Logging/1.0.0-alpha3-10133\nPacking nupkg dependency Microsoft.AspNet.HttpFeature 1.0.0-alpha3-10154\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.AspNet.HttpFeature/1.0.0-alpha3-10154\nPacking nupkg dependency Microsoft.CodeAnalysis.Common 0.7.4060502-beta\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.CodeAnalysis.Common/0.7.4060502-beta\nPacking nupkg dependency Microsoft.CodeAnalysis.CSharp 0.7.4060502-beta\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.CodeAnalysis.CSharp/0.7.4060502-beta\nPacking nupkg dependency Microsoft.Bcl.Immutable 1.1.20-beta\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.Bcl.Immutable/1.1.20-beta\nPacking nupkg dependency Microsoft.Bcl.Metadata 1.0.11-alpha\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/packages/Microsoft.Bcl.Metadata/1.0.11-alpha\nPacking project dependency Polykube.vNextApi\n  Source /root/polykube-dev/src/Polykube.vNextApi\n  Target /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi\nPath is too long. Path: /root/polykube-dev/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/\nbin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/\nbin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi/bin/output/approot/src/Polykube.vNextApi\n. Was this fixed before or after the alpha4 release?\n.\nroot@dad9c5bec306:~/polykube/vnextapi# ls /usr/lib/mono/4.5/\nFacades                         chktrust.exe       ikdasm.exe.mdb       mkbundle.exe.mdb           nunit-console.exe               signcode.exe.mdb\nMSBuild                         chktrust.exe.mdb   ilasm.exe            mod.exe                    nunit-console.exe.config        sn.exe\nMicrosoft.Build.xsd             crlupdate.exe      ilasm.exe.mdb        mod.exe.mdb                nunit-console.exe.mdb           sn.exe.mdb\nMicrosoft.CSharp.targets        crlupdate.exe.mdb  installutil.exe      mono-api-info.exe          nunit.core.dll                  soapsuds.exe\nMicrosoft.Common.targets        csharp.exe         installutil.exe.mdb  mono-cil-strip.exe         nunit.core.extensions.dll       soapsuds.exe.mdb\nMicrosoft.Common.tasks          csharp.exe.mdb     installvst.exe       mono-cil-strip.exe.mdb     nunit.core.interfaces.dll       sqlmetal.exe\nMicrosoft.VisualBasic.targets   culevel.exe        installvst.exe.mdb   mono-service.exe           nunit.framework.dll             sqlmetal.exe.config\nRabbitMQ.Client.Apigen.exe      culevel.exe.mdb    lc.exe               mono-service.exe.mdb       nunit.framework.extensions.dll  sqlmetal.exe.mdb\nRabbitMQ.Client.Apigen.exe.mdb  disco.exe          lc.exe.mdb           mono-shlib-cop.exe         nunit.mocks.dll                 sqlsharp.exe\nal.exe                          disco.exe.mdb      macpack.exe          mono-shlib-cop.exe.config  nunit.util.dll                  sqlsharp.exe.mdb\nal.exe.mdb                      dtd2rng.exe        macpack.exe.mdb      mono-shlib-cop.exe.mdb     pdb2mdb.exe                     svcutil.exe\nbrowsercaps-updater.exe         dtd2rng.exe.mdb    makecert.exe         mono-xmltool.exe           pdb2mdb.exe.mdb                 svcutil.exe.mdb\nbrowsercaps-updater.exe.mdb     dtd2xsd.exe        makecert.exe.mdb     mono-xmltool.exe.mdb       permview.exe                    wsdl.exe\ncaspol.exe                      dtd2xsd.exe.mdb    mconfig.exe          monolinker.exe             permview.exe.mdb                wsdl.exe.mdb\ncaspol.exe.mdb                  gacutil.exe        mconfig.exe.mdb      monolinker.exe.mdb         resgen.exe                      xbuild.exe\ncccheck.exe                     gacutil.exe.mdb    mcs.exe              monop.exe                  resgen.exe.mdb                  xbuild.exe.config\ncccheck.exe.mdb                 genxs.exe          mcs.exe.mdb          monop.exe.mdb              secutil.exe                     xbuild.exe.mdb\nccrewrite.exe                   genxs.exe.mdb      mcs.exe.so           mozroots.exe               secutil.exe.mdb                 xbuild.rsp\nccrewrite.exe.mdb               httpcfg.exe        mdbrebase.exe        mozroots.exe.mdb           setreg.exe                      xsd.exe\ncert2spc.exe                    httpcfg.exe.mdb    mdbrebase.exe.mdb    mscorlib.dll               setreg.exe.mdb                  xsd.exe.mdb\ncert2spc.exe.mdb                ictool.exe         mdoc.exe             mscorlib.dll.mdb           sgen.exe\ncertmgr.exe                     ictool.exe.mdb     mdoc.exe.mdb         mscorlib.dll.so            sgen.exe.mdb\ncertmgr.exe.mdb                 ikdasm.exe         mkbundle.exe         nunit-console-runner.dll   signcode.exe\n```\nroot@dad9c5bec306:~/polykube/vnextapi# ls /usr/lib/mono/4.5/Facades/\nSystem.Collections.Concurrent.dll          System.Net.Primitives.dll                          System.Runtime.dll\nSystem.Collections.dll                     System.Net.Requests.dll                            System.Security.Principal.dll\nSystem.ComponentModel.Annotations.dll      System.ObjectModel.dll                             System.ServiceModel.Http.dll\nSystem.ComponentModel.EventBasedAsync.dll  System.Reflection.Emit.ILGeneration.dll            System.ServiceModel.Primitives.dll\nSystem.ComponentModel.dll                  System.Reflection.Emit.Lightweight.dll             System.ServiceModel.Security.dll\nSystem.Diagnostics.Contracts.dll           System.Reflection.Emit.dll                         System.Text.Encoding.Extensions.dll\nSystem.Diagnostics.Debug.dll               System.Reflection.Extensions.dll                   System.Text.Encoding.dll\nSystem.Diagnostics.Tools.dll               System.Reflection.Primitives.dll                   System.Text.RegularExpressions.dll\nSystem.Diagnostics.Tracing.dll             System.Reflection.dll                              System.Threading.Tasks.Parallel.dll\nSystem.Dynamic.Runtime.dll                 System.Resources.ResourceManager.dll               System.Threading.Tasks.dll\nSystem.Globalization.dll                   System.Runtime.Extensions.dll                      System.Threading.Timer.dll\nSystem.IO.dll                              System.Runtime.InteropServices.WindowsRuntime.dll  System.Threading.dll\nSystem.Linq.Expressions.dll                System.Runtime.InteropServices.dll                 System.Xml.ReaderWriter.dll\nSystem.Linq.Parallel.dll                   System.Runtime.Numerics.dll                        System.Xml.XDocument.dll\nSystem.Linq.Queryable.dll                  System.Runtime.Serialization.Json.dll              System.Xml.XmlSerializer.dll\nSystem.Linq.dll                            System.Runtime.Serialization.Primitives.dll\nSystem.Net.NetworkInformation.dll          System.Runtime.Serialization.Xml.dll\nroot@dad9c5bec306:~/polykube/vnextapi# ls /usr/lib/mono/gac/\nDisplay all 146 possibilities? (y or n)\nroot@dad9c5bec306:~/polykube/vnextapi# ls /usr/lib/mono/gac/System/4.0.0.0__b77a5c561934e089/           \nSystem.dll  System.dll.mdb\n. Thanks for the hint David. I was building mono myself, which wasn't a problem, but I attempted to use checkinstall to build a deb package and then install it (checkinstall missed a bunch of files). I've changed to simply using the xamarin builds from download.mono-project.com debian repo instead.\nClosing, not a bug, at least for KRuntime.\n. Indeed, this was carry-over from when building mono-3.6 was required. I'm on the official mono 3.10 packages now.\n(checkinstall watches the output of make install and captures it into a debian package. But apparently it doesn't capture the output of static binaries and missed all of the binaries that you were expecting to have seen in /usr/lib/mono/4.5/)\n. I had the same behavior running in a docker container under Arch, as well as a standard Ubuntu server image in Azure.\n. @davidfowl is right. sudo apt-get update; sudo apt-get install libunwind8 resolved this issue for me.\n. I created this VM this morning, just tried it again.\nAzure > New > Compute > \"Ubuntu Server 14.04 LTS\"\nJust now, on this \"clean\" ubuntu install:\n```\ncolemickens@cm-vnext-test:~$ dnvm update-self\nDownloading dnvm.sh from https://raw.githubusercontent.com/aspnet/Home/dev/dnvm.sh \n################################################################## 100.0%\ncolemickens@cm-vnext-test:~$ dnvm install latest -r coreclr -u\nDetermining latest version\nLatest version is 1.0.0-beta5-11657 \nDownloading dnx-coreclr-linux-x64.1.0.0-beta5-11657 from https://www.myget.org/F/aspnetvnext/api/v2\nDownload: https://www.myget.org/F/aspnetvnext/api/v2/package/dnx-coreclr-linux-x64/1.0.0-beta5-11657\n################################################################## 100.0%\nInstalling to /home/colemickens/.dnx/runtimes/dnx-coreclr-linux-x64.1.0.0-beta5-11657\nAdding /home/colemickens/.dnx/runtimes/dnx-coreclr-linux-x64.1.0.0-beta5-11657/bin to process PATH\ncolemickens@cm-vnext-test:~$ dnx\nfailed to locate libcoreclr with error libcoreclrpal.so: cannot open shared object file: No such file or directory\ncolemickens@cm-vnext-test:~$ uname -a\nLinux cm-vnext-test 3.16.0-36-generic #48~14.04.1-Ubuntu SMP Wed Apr 15 13:11:28 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\ncolemickens@cm-vnext-test:~$ hostname\ncm-vnext-test\n```\n. dpkg can help here too.\n. Closing this.\nSince clearing my package cache, I can't repro this even with the same runtimes, and I'd been having a constant repro. The only thing I can think of is that I was out of free space at some point during the day and that packages may have been incompletely restored. Either way, on my end, as far as I can tell.\nI'm also now restoring everywhere... (separate from my ability to repro, I can't repro even just restoring in my \"top level\" project)\n. When will this appear in dnx-coreclr? I'm still seeing this in the build from a couple hours ago.\n. Looks like exact error is different. Log of me running an app that runs under mono, under 11722: https://gist.github.com/anonymous/cd061625d8827f08e6e4\n. 1.0.0-beta5-11722 status for dnu restore under Ubuntu:\n```\nSystem.ArgumentNullException: Value cannot be null.\nParameter name: path1\n   at System.IO.Path.Combine(String path1, String path2, String path3)\n   at NuGet.Settings.LoadDefaultSettings(IFileSystem fileSystem, String configFileName, IMachineWideSettings machineWideSettings)\n   at Microsoft.Framework.PackageManager.SettingsUtils.ReadSettings(String solutionDir, String nugetConfigFile, IFileSystem fileSystem, IMachineWideSettings machineWideSettings)\n   at Microsoft.Framework.PackageManager.RestoreCommand.ReadSettings(String solutionDirectory)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__68.MoveNext()\n\nRestore failed\nValue cannot be null.\nParameter name: path1\n```\n. Those instructions seem to guide the user into use dnx-mono to restore packages and then switch back to dnx-coreclr for actual execution (which has worked empirically for me)... but it doesn't include the instructions to actually install dnx-mono latest, only instructions for install dnx-coreclr latest.\n. 15509 was working for me, but 15545 is having issues:\nSystem.TypeInitializationException: The type initializer for 'System.Net.Http.CurlHandler' threw an exception.\n ---> System.TypeInitializationException: The type initializer for 'libcurl' threw an exception.\n ---> System.TypeInitializationException: The type initializer for 'HttpInitializer' threw an exception.\n ---> System.TypeInitializationException: The type initializer for 'CryptoInitializer' threw an exception.\n ---> System.DllNotFoundException: Unable to load DLL 'System.Security.Cryptography.Native': The specified module could not be found.\n (Exception from HRESULT: 0x8007007E)\n. I lost a couple commits, including the one that added libssl-dev to my dev docker container. Looks like that was the missing piece.\n. ",
    "LarsKemmann": "And don't forget the many other commonly .-prefixed folders on Linux that contain various settings and other things that are hidden by default. I'd be curious to see a query across public GitHub repositories to determine how many .* directories actually contain valid source code. If that's rare, then it might make more sense to by default exclude all directories beginning with '.' and require opting in on a per-project basis.\n. ",
    "jkyadav": "How to install all the necessary packages by kpm if necessary packages are not install on the machine and nor  present in \\User\\userName.kpm\\packages folder.\n. Hi @ChengTian  I have kpm I tried to restore packages with kpm restore but it throws exception.\n. See this even this failing for System.IO as well..\n```\n CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Collections.Immutable'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections.Immutable'.\n  CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Collections.Immutable'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Reflection.Metadata'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Reflection.Metadata'.\n  CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Reflection.Metadata'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='Microsoft.AspNet.Mvc.TagHelpers'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='Microsoft.AspNet.Mvc.TagHelpers'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='Microsoft.AspNet.Mvc.TagHelpers'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Runtime'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Runtime'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.IO'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.IO'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.IO'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Text.Encoding'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Text.Encoding'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Text.Encoding'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Threading.Tasks'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Threading.Tasks'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Threading.Tasks'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Globalization'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Globalization'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Globalization'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Reflection'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Reflection'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Reflection'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Collections'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Collections'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.ObjectModel'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.ObjectModel'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.ObjectModel'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Xml.ReaderWriter'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Xml.ReaderWriter'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Xml.ReaderWriter'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Runtime.Extensions'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime.Extensions'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Runtime.Extensions'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Runtime.InteropServices'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime.InteropServices'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Runtime.InteropServices'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Collections.Concurrent'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections.Concurrent'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Collections.Concurrent'.\nWarning: FindPackagesById: System.IO\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\nWarning: FindPackagesById: System.Collections.Immutable\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.IO'.\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections.Immutable'.\nWarning: FindPackagesById: System.Text.Encoding\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Text.Encoding'.\nWarning: FindPackagesById: System.Runtime\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime'.\nWarning: FindPackagesById: System.Reflection.Metadata\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Reflection.Metadata'.\nWarning: FindPackagesById: System.ObjectModel\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.ObjectModel'.\nWarning: FindPackagesById: System.Runtime.InteropServices\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime.InteropServices'.\nWarning: FindPackagesById: System.Collections\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections'.\nWarning: FindPackagesById: System.Threading.Tasks\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Threading.Tasks'.\nWarning: FindPackagesById: System.Text.Encoding\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Text.Encoding'.\nWarning: FindPackagesById: System.IO\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.IO'.\nWarning: FindPackagesById: System.Reflection.Metadata\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Reflection.Metadata'.\nWarning: FindPackagesById: System.Collections.Concurrent\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections.Concurrent'.\nWarning: FindPackagesById: System.Collections.Immutable\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections.Immutable'.\nWarning: FindPackagesById: System.Runtime.Extensions\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime.Extensions'.\nWarning: FindPackagesById: System.Xml.ReaderWriter\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Xml.ReaderWriter'.\nWarning: FindPackagesById: System.Globalization\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Globalization'.\nWarning: FindPackagesById: System.Runtime.InteropServices\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime.InteropServices'.\nWarning: FindPackagesById: System.Threading.Tasks\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Threading.Tasks'.\nWarning: FindPackagesById: System.Runtime\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime'.\nWarning: FindPackagesById: Microsoft.AspNet.Mvc.TagHelpers\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='Microsoft.AspNet.Mvc.TagHelpers'.\nWarning: FindPackagesById: System.Collections\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections'.\nError: FindPackagesById: System.Collections.Immutable\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n\nSystem.Net.Http.HttpRequestException: Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()\n   at Microsoft.Framework.PackageManager.Restore.NuGet.HttpSource.d__6.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.Restore.NuGet.NuGetv2Feed.d__21.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RemoteWalkProvider.d__6.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__9.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__8.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__6.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__5.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__62.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__61.MoveNext()\n----------\nRestore failed\nResponse status code does not indicate success: 400 (One of the request inputs is out of range.).\n```\n. See this even this failing for System.IO as well..\n```\n CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Collections.Immutable'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections.Immutable'.\n  CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Collections.Immutable'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Reflection.Metadata'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Reflection.Metadata'.\n  CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Reflection.Metadata'\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='Microsoft.AspNet.Mvc.TagHelpers'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='Microsoft.AspNet.Mvc.TagHelpers'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='Microsoft.AspNet.Mvc.TagHelpers'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Runtime'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Runtime'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.IO'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.IO'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.IO'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Text.Encoding'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Text.Encoding'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Text.Encoding'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Threading.Tasks'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Threading.Tasks'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Threading.Tasks'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Globalization'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Globalization'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Globalization'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Reflection'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Reflection'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Reflection'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Collections'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Collections'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.ObjectModel'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.ObjectModel'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.ObjectModel'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Xml.ReaderWriter'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Xml.ReaderWriter'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Xml.ReaderWriter'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Runtime.Extensions'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime.Extensions'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Runtime.Extensions'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Runtime.InteropServices'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime.InteropServices'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Runtime.InteropServices'.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Collections.Concurrent'\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections.Concurrent'.\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?Id='System.Collections.Concurrent'.\nWarning: FindPackagesById: System.IO\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\nWarning: FindPackagesById: System.Collections.Immutable\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.IO'.\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections.Immutable'.\nWarning: FindPackagesById: System.Text.Encoding\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Text.Encoding'.\nWarning: FindPackagesById: System.Runtime\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime'.\nWarning: FindPackagesById: System.Reflection.Metadata\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Reflection.Metadata'.\nWarning: FindPackagesById: System.ObjectModel\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.ObjectModel'.\nWarning: FindPackagesById: System.Runtime.InteropServices\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime.InteropServices'.\nWarning: FindPackagesById: System.Collections\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections'.\nWarning: FindPackagesById: System.Threading.Tasks\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Threading.Tasks'.\nWarning: FindPackagesById: System.Text.Encoding\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Text.Encoding'.\nWarning: FindPackagesById: System.IO\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.IO'.\nWarning: FindPackagesById: System.Reflection.Metadata\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Reflection.Metadata'.\nWarning: FindPackagesById: System.Collections.Concurrent\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections.Concurrent'.\nWarning: FindPackagesById: System.Collections.Immutable\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections.Immutable'.\nWarning: FindPackagesById: System.Runtime.Extensions\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime.Extensions'.\nWarning: FindPackagesById: System.Xml.ReaderWriter\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Xml.ReaderWriter'.\nWarning: FindPackagesById: System.Globalization\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Globalization'.\nWarning: FindPackagesById: System.Runtime.InteropServices\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime.InteropServices'.\nWarning: FindPackagesById: System.Threading.Tasks\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Threading.Tasks'.\nWarning: FindPackagesById: System.Runtime\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Runtime'.\nWarning: FindPackagesById: Microsoft.AspNet.Mvc.TagHelpers\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='Microsoft.AspNet.Mvc.TagHelpers'.\nWarning: FindPackagesById: System.Collections\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n  GET https://api.nuget.org/v3/index.json/FindPackagesById()?Id='System.Collections'.\nError: FindPackagesById: System.Collections.Immutable\n  Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n\nSystem.Net.Http.HttpRequestException: Response status code does not indicate success: 400 (One of the request inputs is out of range.).\n   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()\n   at Microsoft.Framework.PackageManager.Restore.NuGet.HttpSource.d__6.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.Restore.NuGet.NuGetv2Feed.d__21.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RemoteWalkProvider.d__6.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__9.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__8.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__6.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__5.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__62.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__61.MoveNext()\n----------\nRestore failed\nResponse status code does not indicate success: 400 (One of the request inputs is out of range.).\n```\n. Thanks @davidfowl , its worked but failing now for this ..\nkpm : 'npm' is not recognized as an internal or external command,\nAt line:1 char:1\n- kpm restore\n- ~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: ('npm' is not re...ternal command,:String) [], RemoteException\n  - FullyQualifiedErrorId : NativeCommandError\noperable program or batch file.\nWhat is wrong with this..\n. Thanks @davidfowl , its worked but failing now for this ..\nkpm : 'npm' is not recognized as an internal or external command,\nAt line:1 char:1\n- kpm restore\n- ~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: ('npm' is not re...ternal command,:String) [], RemoteException\n  - FullyQualifiedErrorId : NativeCommandError\noperable program or batch file.\nWhat is wrong with this..\n. Thanks @davidfowl  kpm restore worked, but still I am getting npm related error, trying to fix it.\n. Thanks @davidfowl  kpm restore worked, but still I am getting npm related error, trying to fix it.\n. ",
    "atsushieno": "Sent (from my part) !\n. ",
    "dsplaisted": "I would expect to be able to use the same shortened framework names as NuGet does.  After all you use net45 in the project.json instead of .NETFramework, Version=v4.5.\nPlus, we really don't want people to have to specify the profile number.  It's arbitrary and doesn't have any meaning in and of itself.  The list of platforms in something like portable-net45+win8+wp8+k10 describes the intent and is easier to understand.\n. I would expect to be able to use the same shortened framework names as NuGet does.  After all you use net45 in the project.json instead of .NETFramework, Version=v4.5.\nPlus, we really don't want people to have to specify the profile number.  It's arbitrary and doesn't have any meaning in and of itself.  The list of platforms in something like portable-net45+win8+wp8+k10 describes the intent and is easier to understand.\n. This failure also occurs if the package source is available but it returns a 404 for any of the packages.  That means if I were to set up a private feed I would have to re-host all of the packages that I depend on from the public feed, instead of just putting the private packages I've built on that feed.\nIs this the intended behavior?  This is quite a big change from how multiple feeds have worked in NuGet until now.\n. This failure also occurs if the package source is available but it returns a 404 for any of the packages.  That means if I were to set up a private feed I would have to re-host all of the packages that I depend on from the public feed, instead of just putting the private packages I've built on that feed.\nIs this the intended behavior?  This is quite a big change from how multiple feeds have worked in NuGet until now.\n. @davidfowl I think MyGet was returning 404 for missing packages when we ran into this.\n. @davidfowl I think MyGet was returning 404 for missing packages when we ran into this.\n. Is there a chance of revisiting the decision not to support comments, or opening it up for some community discussion?\nA simple, human-readable and editable project file format is one of the big features of DNX.  It becomes a lot less readable if you can't add comments to explain what's going on, and a lot less editable if you can't quickly disable and re-enable portions of the project.json to figure out what works.\nI don't think people want to use comments to add parsing directives to project.json, so Douglas Crockford's reasoning doesn't seem to apply here.  Indeed, if you want comments in your source, he suggests including them there but stripping them out before the json is processed.\n. Is there a chance of revisiting the decision not to support comments, or opening it up for some community discussion?\nA simple, human-readable and editable project file format is one of the big features of DNX.  It becomes a lot less readable if you can't add comments to explain what's going on, and a lot less editable if you can't quickly disable and re-enable portions of the project.json to figure out what works.\nI don't think people want to use comments to add parsing directives to project.json, so Douglas Crockford's reasoning doesn't seem to apply here.  Indeed, if you want comments in your source, he suggests including them there but stripping them out before the json is processed.\n. ",
    "gulbanana": "If this is not going to be a first class feature, then what is the supported way to build a system like this:\n- common vbproj or csproj containing code that can run on .NET 4.6 or Core CLR\n- frontend project.json containing an asp.net 5 library/app\n- frontend vbproj or csproj containing a desktop, store, or phone library/app\nThe obvious way would be to make the common project a PCL, but is there a different preferred means?\n. Here's a minimal solution demonstrating the scenario:\nhttp://thomascastiglione.com/MultipleFrontends.zip\nThere are a couple of projects designed for different verticals, each referencing a common library which uses the Debug.WriteLine() api (available on all iterations of .NET). You'll see there's one compile error, from the ASP.NET 5 frontend - it isn't able to reference the project CommonLibrary. Trying to add it as a reference using visual studio fails, and this issue seems to be about doing the same thing via project.json.\n. Interesting. I'm using VS2015 ctp 5, and the Add Reference dialog brings up an error reading \"The following projects are not supported as reference: CommonLibrary\". I tried adding it by hand, producing this project.json file:\nhttp://pastebin.com/tShnddcA\nThe error in that case is CS0103    The name 'CommonLibrary' does not exist in the current context\nBut if this is going to be supported by whatever means, that's fine- bugs in the moment don't matter.\n. could something like this be used by VS to support 'referencing' non-C# projects from asp.net 5 projects?\n. Nice, this will definitely meet a use case for my project\n. No equivalent of 'copy local' for the assemblies, then? Presumably we can just use a manual build script and the old nuget.exe to create the package as a workaround.\n. I mean that once the dlls are built, having referenced them via this mechanism, we'll just manually combine them into a single package rather than using kpm pack. (Though it is indeed for internal distribution).\n. If the second scenario is not going to be supported, does that mean that the transitive closure of aspnet50 dependencies must all themselves be vnext/k projects?\n. Doesn't having a net45 dependency prevent you from running on the core clr?\nI'm trying to write code that can be consumed either from an aspnetcore5 application running on .net core, as well as from a desktop application running on .net 4.5 or 4.6. In particular, I'm trying to understand the restrictions I'll have to follow in doing so. If the transitive dependencies must all use new project types, for example, then that would mean that I can't use C++/CLI or VB in those dependencies.\n. I think my conflation stems from not knowing whether the new project system is the only way to target certain frameworks. In particular, msbuild based projects do not seem to offer a way to build for core CLR. Therefore, building for core CLR requires using the new project system (and eschewing other languages, etc).\nHave I just missed a way to have a csproj target .NET Core?\n. Oh, thanks for the jabbr suggestion - I'll join it some time soon and ask there instead.\n. ",
    "flq": "I have the very same issue, I followed the exact steps as outlined in the Home repository (getting things via home brew). Is there some step missing that is not documented?\nMono -V reports 3.4.0 ...\n. Cool! That was it. I know it it is not the job of the samples project as those are homebrew semantics, but a small section a la\n\"If you have previously installed mono via homebrew and it is outdated, you should perform the following steps:\n1. upgrade home brew : brew upgrade\n2. uninstall your current mono version: brew uninstall mono\n3. reinstall mono: brew install mono\n4. link it: brew link mono\nthe second step was necessary as it would just link back to the older mono even though the newer one was downloaded.\"\nwould help the uninitiated :smile:  Thanks again.\n. ",
    "Tasteful": "Any progress on this?\n. @davidfowl @roji Any news about this request?\nIn my situation I have about 20 projects in the solution that all should have the same version number when it is built so any progress regarding this will be lovely.\n. I'm using the ActivatorUtilities.CreateInstance<T>(CallContextServiceLocator.ServiceProvider) in a entity that is mapped from an EF with AutoMapper. So the service I'm looking for is the IServiceProvider that is registered in the TestServer. \nThe testserver is configured with an startup-class that has the ConfigureServices(IServiceCollection):IServiceProvider method. In the startup-class and from that one I can get the IServiceProvider out, is that correct way to do or can I got the IServiceProvider injected in my EF entity on some way without the static accessor?\n. I will see if I can refactor away my static usage. I will close this issue for the time and if I need more help I will setup a POC and reopen this issue.\n. @davidfowl Sample application is found here https://github.com/Tasteful/bugs/tree/DnuPack-3294\n. I have added an nuspec that will work with nuget pack and that seams to work.\n. ",
    "aggieben": "I was afraid that would be the answer - but better to have the answer than to beat my head on a wall ;-)\n. Is there such a thing as !DNX && CORECLR?\n. There's still an app-hosting model that differs from .NET 4.6 and before, right?  Wouldn't the move to CLI just mean that instead of DNX_ANY, it would need to be DOTNET_ANY or something?\n. I like option 3 better, and I agree with @MattGal: the additional syntax introduced by option 4 seems confusing and inconsistent to me.\n. I tried looking into this somewhat and haven't really been able to reproduce any obvious issues like observed by the OP.  On Gentoo hardware with mono 4.3 + dnx 1.0.0-beta6-12256, I'm seeing total restore times typically around 1 minute.  On a Ubuntu VM with mono 4.0.3 + dnx-1.0.0-beta6-12256, I'm seeing much the same thing.\nOne problem I had on the Gentoo box was a lack of CA trust which caused restore to completely break altogether and never finish.  I had to manually run Mono's sync-cert command to set it right; on Ubuntu this wasn't an issue because the package-installed mono takes care of this for you.  Also, trimming our NuGet feed list helped.\n. Are any of you running in a docker container?\n. I feel inclined to think this is a problem with Mono's ThreadPool implementation.  Setting MONO_THREADS_PER_CPU to a high number (say, 2000) allows previously problematic restores to succeed.  Here are the ThreadPool defaults in my docker container: ThreadPool, Min/Max Threads: {worker: 2, io: 4}/{worker: 200, io: 8}.  With MONO_THREADS_PER_CPU=2000: ThreadPool, Min/Max Threads: {worker: 200, io: 4}/{worker: 200, io: 8}.\nIt's worth investigating more to be sure, but it appears to me that this is a Mono problem, rather than a dnx problem.\n. You can do this in %AppData%\\NuGet\\NuGet.config.  Here's mine:\n<packageSources>\n    <add key=\"ASP.NET 5 Dev\" value=\"https://www.myget.org/F/aspnetvnext\" />\n    <add key=\"xunit-dnvm\" value=\"https://www.myget.org/F/xunit-dnvm/api/v2/\" />\n    <add key=\"api.nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n    <add key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" />\n  </packageSources>\n. ~/.config/NuGet/NuGet.Config, I think.\n. What's the motivation behind this?\n. Without a TFM for mono in DNX, how would one use Mono as the desktop runtime in Windows?\n. Uh...right.  Duh ;-)\n. Hmm, I also can't reproduce this when simulating timeouts.  \n```\n\nRestore failed\nA task was canceled.\nNuGet Config files used:\n    /root/.config/NuGet/NuGet.Config\n    /var/lib/dnx/cm-core/NuGet.Config\nFeeds used:\n    https://www.myget.org/F/aspnetrelease/api/v2/\n    https://nuget.org/api/v2/\nroot@2eda69d39191:/var/lib/dnx/cm-core/src/Cm.Core#\nroot@2eda69d39191:/var/lib/dnx/cm-core/src/Cm.Core#\nroot@2eda69d39191:/var/lib/dnx/cm-core/src/Cm.Core#\nroot@2eda69d39191:/var/lib/dnx/cm-core/src/Cm.Core#\nroot@2eda69d39191:/var/lib/dnx/cm-core/src/Cm.Core#\nroot@2eda69d39191:/var/lib/dnx/cm-core/src/Cm.Core# echo $?\n1\n```\nHowever, whenever the restore fails as in #1590, the exit code is 0.  Unfortunately, reproducing that one isn't as deterministic as I might like :-\\\n. Yeah, no problem.  I'll resurrect if I can narrow a repro, but realistically speaking I don't think I'll have time for all that.\n. Same here.  Not 100% of the time, but enough to be concerning.\n. I have found experimentally that this goes away if you unset MONO_THREADS_PER_CPU.  Just cross your fingers and hope you don't experience #1590 as a result.  Update: caveat: I am experiencing this issue quite a lot, and adjusting MONO_THREADS_PER_CPU doesn't always seem to help.\n. ",
    "vijayantkatyal": "@aggieben try to use 32 bit (x86)  version, instead of 64 bit (x64). add web commands (to start project using powershell / cli). update all dependencies to *-alpha4 and run kpm restore.that worked for me, after i updated my project to alpha4 and can run it using powershell.\n. ",
    "chmontgomery": ":+1: \n. didn't know that was an option! Is there any documentation on the command's args of kpm anywhere?\n. ohhhh. sorry, didn't realize that was an option. My fault\n. ",
    "AlexArchive": ":+1: \n. ",
    "troyschneringer": "+1\n. ",
    "TerribleDev": ":+1: \n. I don't have that file....\n. ",
    "viniciuschiele": "Complementing, I've built this package using KRE 1.0.0-alpha4-10353 and Mono 3.8 on OSX\nBelow project.json\n``` json\n{\n  \"version\": \"1.0.0.0\",\n  \"dependencies\": {\n    \"NLog\": \"3.1.0\"\n  },\n\"frameworks\": {\n    \"net45\": {\n      \"dependencies\": { }\n    }\n  }\n}\n```\n. Ok, on Windows it worked well.\nJust so you know, Xunit also not worked on OSX.\nThanks David!\n. When I run my unit tests using Xunit (Xunit.KRunner) it gives me that error:\nMissing method Microsoft.Framework.Runtime.IApplicationEnvironment::get_RuntimeFramework() in assembly data-0x7ff52b049000, referenced in assembly /Users/vinicius/.kpm/packages/Xunit.KRunner/1.0.0-alpha4-10314/lib/net45/Xunit.KRunner.dll\nSystem.MissingMethodException: Method not found: 'Microsoft.Framework.Runtime.IApplicationEnvironment.get_RuntimeFramework'.\n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] in :0 \n. ",
    "xavierdecoster": "@muratg I can verify and run it through a test setup if @viniciuschiele can send us a new package built on Mono using the latest kpm beta\n. If all we need is a release/deployment vehicle and some manifest exposing metadata, then I don't see why there would be a reason against the NuGet packaging format?\nThere's a NuGet.Core library and NuGet.exe is extensible (one can add commands to it), which is quite convenient to leverage client-side.\nThe feed API exposed by NuGet is sufficient to query repositories, so there's that.\nAnd why wouldn't the nuspec format itself not be extensible? Target framework filtering is a great approach to this imho. something both client and server can implement for themselves, something the nuspec format could easily support, and something that could be validated server-side (if nuget.org wants to reject certain packages for instance).\nWhat am I missing?\n. Awesome! :thumbsup:\n. @bradwilson  Can I get a trace of the request (e.g. Fiddler) to fix the issue in MyGet, or minimal steps to reproduce? /cc @maartenba \n. @bradwilson not asking to reproduce the 503 obviously :) was just trying to find out if there's a certain type of request that could have played a role in last night's bulk load of traffic that eventually led to the 503.. Anyway, want to keep this thread focused on the client-issue, feel free to reach out to MyGet support if there's anything that could help.\n. ",
    "viboux": "I got this exception while using this option of self-hosting in Visual Studio 2015 Preview (14.0.22310.1)\n\"commands\": {\n    \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5000\"\n}\nThe error fixed itself by restarting Visual Studio but displaying the InnerException on the Console Output may help the developer diagnose more efficiently the underlying cause.\n. ",
    "ivabz": "Potential dupe. I think @davidfowl is already tracking this at #310\n. +1. \ud83d\ude4c\n. ",
    "kanchanm": "@davidfowl \n. Ok, Done. Thought this was something they were picking up from us.\n. Just to confirm, you changed your Azure website to be 64-bit right? You can do this in the configuration of the website on Azure portal.\n. ",
    "kichalla": ":+1: \n. :+1: ...this happens to me every time i try the command kvm install latest -x86 -r CoreCLR...my machine is a Windows 8.1 Enterprise 64-bit OS...\n. @davidfowl : I tried this again now but I do not see this issue happening now, but it reproed everytime at the time when i logged the issue though...seems a temporary issue...I tried this again on a Windows 2012 R2 64-bit OS and could not repro the issue...\n. @BrennanConroy yes, currently its misleading...something like -?|-h|--help becomes help Show help information about a command and remove the last statement that I highlighted as it feels redundant?...also not sure if we again need to specify help in the Commands list...\n. @BrennanConroy No, it does not...following is the current behavior...we should remove --help from options completely as it currently does nothing(the 2nd section here)\n```\nC:> dnu commands\nUsage: dnu commands [options] [command]\nOptions:\n  -?|-h|--help  Show help information\nCommands:\n  install    Installs application commands\n  uninstall  Uninstalls application commands\nUse \"commands [command] --help\" for more information about a command.\n```\n\n```\nC:> dnu commands --help install\nUsage: dnu commands [options] [command]\nOptions:\n  -?|-h|--help  Show help information\nCommands:\n  install    Installs application commands\n  uninstall  Uninstalls application commands\nUse \"commands [command] --help\" for more information about a command.\n```\n\n```\nC:> dnu commands install --help\nUsage: dnu commands install [arguments] [options]\nArguments:\n  [package]  The name of the application package\n  [version]  The version of the application package\nOptions:\n  -o|--overwrite              Overwrites conflicting commands\n  -s|--source           A list of packages sources to use for this command\n  -f|--fallbacksource   A list of packages sources to use as a fallback\n  -p|--proxy         The HTTP proxy to use when retrieving packages\n  --no-cache                  Do not use local cache\n  --packages                  Path to restore packages\n  --ignore-failed-sources     Ignore failed remote sources if there are local packages meeting version requirements\n  --quiet                     Do not show output such as HTTP request/cache information\n  --parallel                  Restores in parallel when more than one project.json is discovered.\n  -?|-h|--help                Show help information\n``\n. :shipit: \n. :+1:  for this support\n. @BrennanConroy : --overrwrite is for conflicting commands...like you could have multiple packages with the same command name\n. @muratg I verified and the--overwrite` switch is not overriding in this case.\n. @BrennanConroy No, I did not have any redirect files when I ran into this\n. Thanks @davidfowl \n. :shipit: \n. Some other packages are also missing this info...probably we can do a search of all the packages we ship and verify this:\n\n. Sounds good to me.\n. Can we ship all the sources as part of a package like Microsoft.Framework.Internal or something? (was the original motivation of Common repo that we avoid creating such public packages?)\n. yeah ignore my previous comment...you could have non-internal shareable code too..\n. @troydai yes, I am able to repro(with the suggested pattterns) it with beta6\n. Modify your dnx451 to like below and try again\n\"dnx451\": {\n            \"frameworkAssemblies\": {\n                \"System.Data\": \"4.0.0.0\"\n            }\n        }\n. @rynowak @davidfowl any more comments?\n. 1728b3aa4281aac968310e846ca8fe94034869cc\n. @davidfowl I see that these values are being used during kudu git based deployments and also @BrennanConroy  mentioned about these values being used during runtime of the application.\n. https://github.com/projectkudu/kudu/blob/master/Kudu.Core/Infrastructure/AspNet5Helper.cs#L68\n. @abpiskunov BTW I am using Beta8 WTE \n\n. I see now that this issue repros even on Windows and CoreClr..so changing issue title...\nIt works on the 15879 version but not the later 15888 one.\n\n. You seem to be missing specifying the server\nExample from a working app:\n``` c#\nvar host = new WebHostBuilder()\n                .UseKestrel()\n                .UseContentRoot(Directory.GetCurrentDirectory())\n                .UseIISIntegration()\n                .UseStartup()\n                .Build();\n        host.Run();\n\n``\n. we seem to be creating a file even when the status code is not successful...not sure if its intentional...\n. if I am not wrong, following should work without the need for deep nesting ofusing`:\n1. make request with responseheadersread, ensure success status code...AFAIK we need not dispose the response here as its the response stream in step 3. that needs to be disposed.\n2. create a file stream\n3. using(response's stream) { copy to the file stream }\n@Tratcher is the expert here so he can validate :smile: \n. probably we should change the help text too? currently it says Overwrites conflicting commands\n. Yes, it for Logger which is part of Dnx.Runtime.Sources(which this project references)\n. I get a build error saying error CS8021: No value for RuntimeMetadataVersion found. No assembly containing System.Object was found nor was a value for RuntimeMetadataVersion specified through options.\n. change this too?\n. ",
    "brianrob": "Partial NGEN is by default on for any assembly that specifies it.  For K, it should be off by default, which is the change that Peter is making.  I would expect the preference to be decreased start-up time over decreased virtual address space usage.\nFrom: David Fowler [mailto:notifications@github.com]\nSent: Monday, October 6, 2014 10:53 AM\nTo: aspnet/KRuntime\nCc: Brian Robbins\nSubject: Re: [KRuntime] Allow for partial ngen (#701)\nMake partial ngen off by default and add a flag to turn it on, --partial\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/KRuntime/pull/701#issuecomment-58058798.\n. Looks good to me.\n. ",
    "naianacampos": "Do you mean to add a dependency to Microsoft.AspNet.Dioagnostics and set app.UseErrorPage() in startup.cs?\nIF yes, I get the same result when I do that.  IF no, what do you mean? :)\n. files being updated\n  global.json\n  k.ini\n  project.json\n  web.config\n. removed publish dependency on OutputType property; changeset 1353489\n. I mean to comment; not close and comment\n. KRE 10572\nIt works if change the Azure Website to x64. Thanks Kanchan\n. tfs 1076619\n. ",
    "lukewaters": "+1 for getting this fixed in an expedited fashion as it is a blocking issue\n. :shipit: \n. ",
    "damianh": "Well that's a good start :)\n. +1e9 \nSeriously one of the major pain points in .NET. As we enter the world of lots and lots of packages and, consequently, composable web applications (think RavenDB.Database, IdSrv3, Glimpse, all of my own middleware) who may use different versions of various frameworks entirely internally, we need a way to encapsulate these dependencies such that neither consumers nor the various components impact each other (intellisense, references, version conflicts, runtime exceptions, etc).\nThe current solution is to either use ILMerge, ILRepack, Fody Costura or similar. These are sub-optimal workarounds for numerous reasons. The real solution is platform / runtime / compilation support.\n. Couple of things to start:\n1. It's hard to use, hard to get right.\n2. Prone to errors & mistakes (i.e. /internalize should fail if one of the merged types is available via target asms)\n3. Usually done as a post build step, I dislike that my tests cover the pre-merged asm, and not the one that is shipped.\n4. Is it even officially supported?\n5. Friction friction friction.\n. As an example of a commercial use case, we're composing our applications via a suite of components that expose a MidFunc. These component may be considered as middleware, they may be \"big\", they may be \"small\" (it doesn't matter). I am predicting that we're going to see a lot more of this sort of thing:\ncsharp\napp.UseGlimpse();\napp.UseIdentityServer();\napp.Map(\"blog\", blogApp => blogApp.UseBlogEngineDotNet());\napp.Map(\"cms\", cmsApp => cmsApp.UseDotNetAge());\napp.UseSomethingHefty();\napp.UseMyOtherThing();\napp.UseCompanyPortal();\n... if BlogEngineDotNet uses WebApi 2.x and DotNetAge use WebApi 3.x (or whatever) this app must still work. It must be easy for developers to create such components safely. ILMerge is not easy (enough).\n. Yes, we (I am anyway) am specifically talking about internalizing, not just bundling.\n. Yep. For example, NEventStore is such a package that uses an internalized Json.Net and doesn't expose the settings. If the user wants to customize that, they can implement their own ISerializer.\nhttps://github.com/search?utf8=%E2%9C%93&q=ilmerge&type=Code&ref=searchresults\nhttps://github.com/search?p=100&q=ilmerge+internalize&ref=searchresults&type=Code&utf8=%E2%9C%93\nIMHO, more projects should be doing it.\nFor example, Hangfire before http://www.nuget.org/packages/HangFire.Core/1.0.2 and after I suggested ILMerging the internal dep stuff: http://www.nuget.org/packages/HangFire.Core/1.1.0\nThe point is, Hangfire didn't do the ILMerge initially up front. Why not?\n. As in bytes on disk? No. Bigger assemblies held in-memory? Not particularly.\n. @avanderhoorn +1 on that approach.\n. @distantcam Hi, can you clarify something for me? Two components, A & B, both using Costura, both have embedded different and non-compatible visions of another component, say JSON.NET v5 and v6. Then we have an app C that references A & B. At runtime, which version of JSON.NET is loaded into the appdomain? \n. @distantcam I suspected such, thanks for the response. Pinging @ayende, you'll need to re-evaluate using Fody Costura for RavenDB.Database and embedded scenarios. Someone using it with a different version of WebAPI (or the other embedded dlls) are going to run into interesting (and probably non-deterministic) runtime issues.\n. Yep, need to ship an updated version of my lib. People \"servicing\" one of your dependencies on your behalf causes problems too - you've shipped have tested with version x but people start using it with version y. Even with semver and the best intention in the world, version y can break my lib, I won't even know it and I get in-the-wild-runtime issues.\nJava has static linking.\n. Solution to having to service stuff quickly is continuous integration + nuget + CI feeds etc. When .NET was originally designed ~2000/2001 these facilities weren't wildly available (or were complicated / hard).\nAlso from a \"bloat\" perspective, typical computer memory & hard drive sizes were ~128MB & ~60GB respectively. Times have changed.\n. lol\nEdit: don't we already have one, mscorelib.dll?\n. This is what I could find on java linking http://njbartlett.name/2014/05/26/static-linking.html Seems they have similar problems. (I've very little knowledge of Java, so .... pinch o'salt)\n. What's the versioning story for assembly neutral interfaces? Shouldn't we just have structural typing and be done with it :trollface: \n. @davidfowl I don't want that either, but I want the option for when it makes sense.\n. Consumers of my library still have strict controls of their dependencies, just not (in this case) my library's dependencies. How would the even know its my lib or my lib's dependency that is misbehaving? If they did figure that out, they'd have to go to me anyway - I may not even support scenarios where different versions of dependencies are used from the ones I've tested against.\nIt's no different to object oriented encapsulation really (which is abused too oc).\n. > I think the majority of people don't need this\nHow many unique package authors are there on nuget.org? Of what percentage do these represent from the number of estimated .net developers globally? Would you reckon it's less that 1%? In the new vNext world do yo see that percentage increasing? If so, guesstimate to what?\nThe problems with ILMerge have already been detailed: https://github.com/aspnet/KRuntime/issues/819#issuecomment-61686533\nIf the metric about whether this should be done or not is 'majority of people' then may as well close this issue now, because that will never be the case. If the metric is \"does it help the library and component authors who bring value to our ecosystem and platform\" then we might move forward. Where in the food (value) chain do we sit?\n(Side observation: a linker has been requested for years and all of sudden we get one for windows store apps ... hmm why is that).\n. +1 @avanderhoorn The impending explosion of fine grained nuget packages, and versions thereof, are going to make this a much bigger problem.\n. @obiwanjacobi DLL as embedded resource is not viable for libraries https://github.com/aspnet/KRuntime/issues/819#issuecomment-61915478\n@ryanbnl That's called .NET Native and is also not viable for libraries.\n. Yes, as stated by @adamralph, @thefringeninja  and @phillip-haydon, there are going to be assemblies that are problematic statically linked because of funking appdomain reflection stuff, magic strings, code gen and whatnot (Castle Dynamic Proxy, Razor , Rx Platform Services etc). There are a low number of these type of libs and if static linking / internalizing / whatever are were a first class concern, I'm sure the authors of these assemblies could be encouraged to make them linkable / internalizable. \n. @ryanbnl Ah ok. That's Fody Costura then.\n. Yep nice points @avanderhoorn !\nSource packages are my current strategy for my own stuff (LibLog, LibOwin). But as @avanderhoorn mentions, large libs are going to get hairy fairly quickly. Throw in a few platform compilation symbols / preprocessor directives, a dependency on MS.Bcl.Build etc and we're rapidly heading face first off a cliff. Projects would also have to be specifically designed to source packages, for example, lumping everything into a single file: https://github.com/damianh/LibOwin/blob/master/src/LibOwin/LibOwin.cs , https://github.com/grumpydev/TinyIoC/blob/master/src/TinyIoC/TinyIoC.cs so as not to add lots of noise to consuming project . Then these things are going to probably non-conforming to the target project's style; mess up code coverage stats etc etc.\nAnyone remember the horn project / hornget? :smile: \n. Yeah nobody is asserting silver bullet-ness. We're already aware of the\nlimitations (leaked types, size increase, etc). The fact is many of us that\nare using ILMerge today know these limitations well. We need a better story\nthough :(\n. I'd prefer static linking over a node like dependency story.\nOn 14 January 2015 at 13:08, Jonathan Channon notifications@github.com\nwrote:\n\nIf we could have a node like dependency story for .Net that'd be [image:\n:+1:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/819#issuecomment-69907376.\n. Had a wonderful argument with TinyIoC with someone because of style cop\nrules, source analysis and generally not being consistent with the rest of\nthe code base :(\n\nOn 14 January 2015 at 14:56, Adam Ralph notifications@github.com wrote:\n\n@jchannon https://github.com/jchannon #819 (comment)\nhttps://github.com/aspnet/KRuntime/issues/819#issuecomment-62609808 and #819\n(comment)\nhttps://github.com/aspnet/KRuntime/issues/819#issuecomment-62709041.\nTake it to the extreme by having source only. I still think it could work,\nbut it's a radical departure from where things are now.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/819#issuecomment-69918740.\n. Lads, see the recent C# Design Notes https://github.com/dotnet/roslyn/issues/98 , under Componentization - \"static linking instead of IL merge\"\n\nI think we're getting somewhere, I'm holding my breath :D\n. @davkean Correct me if I'm wrong, but this is more for end apps (.exes) and not libs, right?\n(For exes I'm looking forward to this too).\n. https://github.com/dotnet/roslyn/issues/162\n. ",
    "adamralph": "Indeed :-) Thanks @davidfowl - I raised off the back off this https://twitter.com/shanselman/status/519406452008833024\n. Seems there is no need.\n. Note that internalization doesn't always 'just work'. E.g. in FakeItEasy we have to exclude the following types from internalization otherwise Castle.Core blows up at runtime https://github.com/FakeItEasy/FakeItEasy/blob/master/Source/ILMerge.Internalize.Exclude.txt. Of course, Castle.Core is doing some pretty funky stuff with its DynamicProxy but it's worth being aware that internalization isn't a silver bullet for the general case.\n. I really don't mind servicing my packages when new versions of dependencies are released. I see the usage of a new version of a dependency as an enhancement to my package so I'm quite happy to bump the version number accordingly.\nThe problem of passing types between libs is an issue in the current runtime, but I expect assembly neutral interfaces to be the path out of that problem in vnext.\n. @davidfowl true, but if you don't internalise, then effectively everything may rev when a dependency is changed since that change may affect those consuming libs. It's just implicit and opaque rather than explicit and transparent. Anyhow, updating to new revs should be made easy. If you do internalise, however, then each dependency can rev independently, and that's a valuable capability.\nI'm not saying all deps should do this and I'm still not 100% convinced of internalisation as the solution, but as @damianh says, I think it's important to have some kind of static linking as an option.\n. Nice points and well put @avanderhoorn.\nMy trail of thought also took a brief turn in another direction. Given the increasing number of source code packages springing up on NuGet lately, it seems the community is already voting with its bits regarding dynamic binary dependencies.\nI'm going to stick my neck out for a moment (perhaps I'm not the first) and imagine a world where this trend continues to the extreme where the majority of NuGet packages become source code packages. Would we even need binary dependencies? Could a source-only ecosystem work? It already does for nodejs, Ruby and others but yes, these are very different beasts to .NET.\nWith this form of static linking some, or even most, of the burden of dependency isolation could be brought forward into the package manager, away from the compiler and/or runtime by e.g. installation time namespace transforms and nested folders for dependency chains, etc. [AssemblyNeutral] could be sprinkled around appropriately by package authors for passing around types. Compilation time may be a pain point, but I'd hope there are still avenues for optimisation there.\nPerhaps crazy, but interesting to think about.\n. No, they just have poor run time performance instead :trollface: \nBut yes, that's a valid point and I did mention it above.\n. @CraigStuntz thanks, will do. I started reading but then had to stuff them in Pocket for later. I'm sure it does indeed come with problems of it's own and it feels a bit too radical to take seriously as a general solution for .NET.\n. @damianh \n\nSource packages are my current strategy for my own stuff (LibLog, LibOwin). But as @avanderhoorn mentions, large libs are going to get hairy fairly quickly. Throw in a few platform compilation symbols / preprocessor directives, a dependency on MS.Bcl.Build etc and we're rapidly heading face first off a cliff. Projects would also have to be specifically designed to source packages, for example, lumping everything into a single file: https://github.com/damianh/LibOwin/blob/master/src/LibOwin/LibOwin.cs , https://github.com/grumpydev/TinyIoC/blob/master/src/TinyIoC/TinyIoC.cs so as not to add lots of noise to consuming project . Then these things are going to probably non-conforming to the target project's style; mess up code coverage stats etc etc.\n\nPlatform compilation symbols and preprocessor directives are indeed a problem for vNow source packages, but in vNext, package source could be treated in a different way, e.g. it stays in the package folder where the source is already transformed according to platform etc. In that way, preprocessor directives would become prepackaging directives, with the package manager exploding source out into platform specific versions. Packaging as single files wouldn't be necessary because the source would never become part of the consuming project, the compiler would just grab it from the package folders. Target project coding style and coverage stats etc. would also not be affected since the package source would not be part of the consuming project's source.\n. @forki Nice! How does it handle namespaces? And does it internalise?\n. @damianh see https://github.com/aspnet/KRuntime/issues/819#issuecomment-62709041\nUnder my proposal, the packaged source files would not be considered part of the codebase for things like static analysis. Of course, they would have to be compiled, but in most, of not all, other contexts they would be treated as being something external.\n. :+1: :boom: \n. ",
    "forki": "Shouldn't this be raised on nuget?\n. at the moment this feature is \"just\" downloading and adding source files to the project and it retrieves indirect dependencies as well.\nbut it's already useful in some projects like RProvider, Deedle, ... \n. So is this a way to open up for other tools like paket? \n. @Mpdreamz yes currently paket plays the role of a global dependency manager which helps you understand dependencies in the whole solution. We currently see no way to do the same with vnext projects. \n- We could generate the dependencies block from our lock file knowledge in project.json but then you have to commit this to version control - which will give nasty merge conflicts.\n- there seems to be no (obvious) way to switch the resolver/restore process that gets invoked when you save project.json \n- if you really want to have reproducible builds there needs to be a chance to commit the packages folder (I don't really recommend this, but some users do have good reasons). \n- there are now runtime dependencies, which are not in the package meta data. So you need to download the package to do this (which would break resolution perf)\n. > I don't want to turn this bug into a discussion about packet but the project.lock.json is basically the format that needs to be produced to make dnx apps work.\nis it possible to just create that file and leave dependencies block in project.json empty? we could gitignore *.lock.json then\n. Closed? What's the resolution? . ",
    "bojanrajkovic": "This also breaks trying to use EF6 migrations, as the embedded filenames for generated .resx files don't match what EF is looking for.\n. project.json file is very vanilla:\n{\n    \"webroot\": \"wwwroot\",\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta4-*\",\n        \"Microsoft.AspNet.Mvc\": \"6.0.0-beta4-*\",\n        \"Microsoft.AspNet.Mvc.Razor\": \"6.0.0-beta4-*\",\n        \"Microsoft.AspNet.Diagnostics\": \"1.0.0-beta4-*\",\n        \"Microsoft.Framework.Logging.Console\": \"1.0.0-beta4-*\",\n        \"Microsoft.AspNet.Mvc.TagHelpers\": \"6.0.0-beta4-*\",\n        \"Microsoft.AspNet.RequestContainer\": \"1.0.0-beta4-*\",\n        \"Microsoft.AspNet.Session\": \"1.0.0-beta4-*\",\n        \"Microsoft.Framework.Cache.Memory\": \"1.0.0-beta4-*\",\n        \"Microsoft.Framework.ConfigurationModel.Json\": \"1.0.0-beta4-*\",\n        \"Microsoft.Framework.Cache.Redis\": \"1.0.0-beta4-*\",\n        \"Microsoft.Framework.Logging\": \"1.0.0-beta4-*\",\n    },\n    \"compilationOptions\": {\n        \"languageVersion\": \"csharp6\"\n    },\n    \"frameworks\": {\n        \"aspnet50\": { }\n    },\n    \"packExclude\": [\n        \"node_modules\",\n        \"bower_components\",\n        \"**.kproj\",\n        \"**.user\",\n        \"**.vspscc\"\n    ],\n    \"exclude\": [\n        \"wwwroot\",\n        \"node_modules\",\n        \"bower_components\"\n    ],\n    \"scripts\": {\n        \"postrestore\": [\n            \"npm install\"\n        ],\n        \"prepare\": [ ]\n    },\n    \"commands\": {\n        \"gen\": \"Microsoft.Framework.CodeGeneration\"\n    }\n}\n. @davidfowl Heh, I think you meant @borgdylan. Was wondering what I'd gotten myself into this time. \n. ",
    "Starcounter-Jack": "Should probably say ICompileModule in the title\n. ",
    "danj-ca": "Has anyone found an effective workaround? I've hit this bug as well.\n. ",
    "PaulStovell": "Also, I understand that the KPM build command produces NuGet packages, but from what I can tell this is really designed for building libraries, not applications. Specifically, the packages produced by it contain a lib folder with DLL's, but none of the views, CSS files, etc., that exist in my project are included in the built package. \n. @davidfowl it's a good question and I'm happy to admit that NuGet might not be perfect for app packaging: https://octopusdeploy.com/blog/wanted-universal-packaging-format\nNuGet in Octopus is opportunistic: for a deployment tool, it's great to be able to query a repository to ask about new package versions, and to have that rich metadata. It's great that tools like TeamCity have NuGet publishing and feed hosting built in. It's great that MyGet.org provide hosted feeds. If we invented a new format, we'd also need to invent that whole ecosystem with it. Unless Microsoft drove it (i.e., supported making those package for all project types out of the box) I'm not sure it would go very far. \nThat said, I think in practice the desire to demarcate between apps and libraries is less of a problem than in theory. The same argument could be made for Chocolatey - and in fact, OneGet. What stops you installing a Chocolatey/OneGet NuGet package in your ASP.NET project? \nIn fact, what stops you installing jQuery in your WPF project right now? We don't have a parallel NuGet for WPF vs ASP.NET, so perhaps apps don't need to be kept separate from libraries. \nPeople won't publish apps to NuGet.org for the same reason they don't publish their Chocolatey packages to NuGet org. And people won't install apps into their ASP.NET projects for the same reason they don't install jQuery into their WPF projects. You could argue that an ASP.NET user searching for 'data grids' might try to install an Xceed WPF data grid in their ASP.NET app, and yet it doesn't seem to be a problem in practice. \nNuGet may not be a perfect fit for apps, but it seems better than all the alternatives (including folder syncing over FTP). \n. IIRC, NuGet already does target framework filtering - if I'm building a .NET 4.0 app I shouldn't see NuGet packages that don't support .NET 4.0. As I understand it this is just based on the folders under lib in the package. \nLet's say we create a convention where all application content lives in a app folder off the root. Like target framework filtering, these packages would then be marked as application packages and excluded from search results when searching from libraries. \n. @tharris29 ideally NuGet would understand there are different 'types' of packages; VS would be querying for \"library\" packages, or perhaps even, \"web\" packages since you're in an ASP.NET app, or \"wpf\" for WPF packages, and only show what is relevant. \n. If we park the issue of \"is NuGet the right file format\", it seems most people agree with the idea of creating some kind of single-file package, with rich metadata describing the contents. \nTo get a sense of what the NuGet team think, I've cross posted a discussion to the NuGet discussion list:\nhttps://nuget.codeplex.com/discussions/569934\n. @tugberkugurlu thanks, I understand. Whether KPM pack should be the command, or whether something else should read the output of KPM pack and then, well, actually package it, isn't so important, as long as that something else is part of KPM or otherwise officially embraced. At the moment, there's just no consistency. \nThat said, KPM pack has access to a lot of metadata from the project JSON file which could be used in the NuGet package; metadata which is lost in the folder structure created. And it might be faster to stream the source files directly into the .nupkg when packing than to first write them to a folder, then read them again and write them to the package. kpm pack --format:nupkg|folder|msdeploy would be my preference, but I don't mind either way. \n. @shanselman - good question! \nThe difference is that there's a ZIP, but no repository concept. There's no version number, no release notes, no metadata, and no way of querying them. No formal way to push them from one repository to another, no way to know which is the \"latest\". \nNuGet on the other hand provides that and a whole lot more. People can store their packages on MyGet. TeamCity exposes a NuGet feed so I can query for packages produced during a build. It's great to have a repository protocol that can be queried. \nIn the same way NuGet is more valuable than downloading ZIP's from CodePlex for development, it's also more valuable for application deployment. Octopus wouldn't be half the product it is today without it. \nThe files included in that particular package format are also very tightly coupled to IIS (in vNext, do we assume everyone will still use IIS?). It embeds a whole bunch of settings around the web site name, application pool name, and so on. It even embeds the name of my dev workstation! :) To me, the package shouldn't be so tightly coupled to operations concerns like this - rebuilding a package just because you want to change the name of an application pool in production doesn't seem right. \n. ",
    "Mpdreamz": "I cannot +1 this enough. Pushing apps to private nuget feeds and deploying them with octopus is an awesome workflow that should be encouraged. @davidebbo  kudu should be able to do this too ;)!\nI don't see a need for a new extension tbh chocolatey doesn't need it, octopus does not need it, one get won't need it vnext shouldn't need it. \n. I would love if we could change it to dnx run [folder | file] with it defaulting to pwd. Feels more posixy this way.\nIf you have a folder named run it'll be dnx run run :)\n. I'm over the moon that the split will happen. \nWhats the reason for not always generating the file? I see no reason not to always generate the file and losing dnu restore --lock or dnu lock all together? The choice then becomes whether to checkin the nuget.lock.json file or not.\n. > Because the behavior of nuget and dnu isn't changing with respect to how dependent versions are\n\nresolved. There is really no reason to lock the project in most cases and it breaks version ranges. \n\nThis has absolutely nothing to do with how versions are resolved and that won't need changing either. \nWhen I run dnu restore and commit my working version and come back 2 years later to that commit and run dnu restore it should be repeatable even with wildcard deps in place. This should totally be the default workflow that we promote. \nThe fact that the project file has dependency version ranges will mean that a dnu update finds updates when I ask for it explicitly. In the current state we are conflating these two responsibilities.\ndnu restore \n- no lock file in place? resolve all dependencies.\n- lock file in place? resolve only dependencies changed in project file. \ndnu update|install <id> <version>\n- update  or  dependency to  or latest\ndnu outdated <id>\n- return information on all or  package\nI'm still happy that I can now choose to atleast --lock and checkin without having to commit all of dnx's cache but I really feel conflating these two responsibilities will bite us in the long run.\n. @haf as much as I love Paket and hope to see it being integrated with DNX in the future, your comment sets the wrong tone for the active discussion in my opinion. This ticket is to discus the merits of locking by default using dnx ootb tooling which I'm still having a hard time understanding why the aspnet team is on the fence about this.\n<brainfart>With this split Paket could now detect i'm running from a vnext dir and write a much terser nuget.lock.json file instead of the entire project.lock.json. Command line integration with dnu might be out of the question but its no different then nuget at the moment. \nA \"restore-command\" : \"paket install\" would be enough in global.json for tooling such as @omnisharp to attempt paket install instead of dnu restore. </brainfart>\n. All it takes for you is to update your CI build to do a dnu update explicitly before building, to make sure whatever is currently committed still works with latest everything. The fact your versions are not stored forever is irrelevant even then in the case of nightlies. For the same reason these versions are probably not tagged there is no need to recommit the changed lock files. \n. what commits? I do releases on every commit on myget using paket and they don't trigger commits just as they don't get tagged.\n. Why would you need to do that? If the CI explicitly updates to latest?\n. In my hypothetical situation yes you commit one. \nWhen you check it out and run dnu restore it will  use that *repeatable builds AWESOME. \nWhen you run on CI you call dnu update before dnu restore commit version is build using latest and pushed to myget, who cares about the updated project.lock.json? Its not a commit or a proper release tag. You could even flip the default and add a --no-lock to make sure the local checkout stays unaltered.\nIf you want CI to only build known states (also VERY common) it can just do dnu restore and build the exact same thing that i just pushed. \n. > Developer is working on one of our repos and new versions of packages are on the feed, they update \n\nthe lock file?\n\nIf they update the version in project.json and run dnu restore or upgrade on the command line directly then  yes. Never by modifying the lock file directly though.\n\nCI builds needs to build against the latest of everything. Run dnu update or whatever but don't commit > the lock file.\nWho updates source control after the ci passes and produces new packages against the latest > dependencies?\n\nWho said this is even necessary? these nightly/daily/continuous CI builds do they get git tagged? If its not tag worthy its not commit worthy. \nIn situations where you are cutting real tag worthy releases, commiting the nuget.lock.json is a good thing.  \nIf you are doing true continuous deployments to production, never ever would you NOT want to checkin your nuget.project.json.\n. Should have been more exact on that last comment when I meant true continuous deployments I mean deploy chains that just deploy directly to production (machines, not production nuget feed) after each successful builds on ci (or you know yolo deploy :)). \nIn more staged environments or longer deploy chains (using e.g octopus deploy) you generally still cut releases that have to be pushed to a production nuget feed and then make there way across machines. \nMy point being that there are many ways to setup up integration and production feed publishes combined with many ways to combine those feeds to publish to staged application environments. I can pretty confidently say that the one thing they all have in common is that repeatable builds is of utmost importance. The flows where this is not, such as bleeding edge builds are the exception but our tooling is treating it as the norm.\n\nbut in this scenario I would never check in the lock file until there's a release, like 1.0.0-beta7 for example, which I think is what we do already today.\n\nI think here lies our crux, I'm arguing the lock.json file is always a good thing why do you feel its only useful on releases? Is it not useful on branches, or commits from 2 years ago on master? \nAgain, I agree on bleeding edge CI feeds committing it back is not needed and genuine noise, just as tagging those releases would be. However the presence of the lock file in the repos does not prevent you from doing what you want, you just have to be explicit about your desire to update all dependencies and that is a good thing. \n. While I am glad the pseudo lock concept is gone, i still feel this statement is going to hurt us in the long run:\n\nWhat we don't have is a file that is designed to provide repeatable builds of a given commit, branch,\netc at any point in time (assuming the packages are able to be downloaded still).\n\nThis thing needs to be designed for repeatable builds from the get go, repeatable builds are of paramount importance. If packages become unavailable then this is the risk of the developers workflow not because the defaults of the framework err on the side of failure.\nBesides this decoupling the act of specifying what dependencies I want from their actual resolved version number is pure developer joy.\nConsider a greenfield project and i want to use JSON.NET. Now I need to care about the version number. look up what is the lastest and write it down explicitly. If dnx will start to allow * for minor and major versions i bet you a beer or two that most devs will just put \"NewtonSoft.Json\" : \"*\" and not care until its too late. \nAgain the Paket workflow gives me both.\nAnother issue is that dependencies versions are now strongly tied to projects not as a repos as a whole. How do I make sure all my project.json's reference the same Json.NET ? \nI would love to hear which scenario's you feel are not servicable using the Paket workflow? Then hopefully someone other then me can refute that better than I have been doing so far :)\n. Huge +1 to this, would reduce the number of needed ifdefs.\n. I think so too deleting this line:\nhttps://github.com/elastic/elasticsearch-net/blob/vnext/dnx-support/src/Elasticsearch.Net/project.json#L7\nFixes the dnu restore.\n. ",
    "fredrikn": "I use NuGet as a solution for my Artifact repositories. The reason I do so is because it was so easy to set up a NuGet server and just publish my artifact to that server.The infrastructure for a simple artifact repository is there! Today in my build script I always pack my deployable units into a NuGet package. Would be nice so skip that packing part and get it out of the box!\n. It doens't have to be a NuGet package. But it has the basics today to be a \"good enough\" artifact repository. The infrastructure is there! No need to build our own, just set up a NuGet Server and there we have a basic Artifact repository, where we can also with simple API download packages for deployment and have versions of our artifacts :)\nThe best thing is that NuGet also have information about the artifact's dependencies :)\n. ",
    "johnkattenhorn": "I don't normally comment on this stuff but I'm in strong agreement so +1 from me too, anyone who works in a team small enough to have both development and deployment responsibilities would find having a common packaging technology a very welcome prospect.\n. ",
    "robertmuehsig": "Really like the idea - currently we use WebDeploy, but the package format is really really weird.\n. ",
    "lehmamic": "+1\n. ",
    "tharris29": "I'm a bit on the fence here as I love the idea of the flow with octopus. But I sit on the  side with caution. I totally agree with @davidfowl with regards to the domain aspects. I can see the  two needs of website deployments and libraries growing different fast. \n@PaulStovell what would be the target version? It would have to be something entirely new? Otherwise I would be able to add a .NET 4.0 application to a .NET 4.0 application.\nI totally agree we need something like this but not sure it is NuGet :-1: but I could be swayed.\nBut seems I'm in the minority here in my concerns :).\n. @PaulStovell, @maartenba If there was a clear separation like this then I can see the benefit. In this way the two package types could grow in time, into totally different things which would be ok.\nWith the precondition that these are seperated in NuGet server I have to go :+1: . \n. ",
    "runxc1": "So put me down for a +1.   I think that this is a great idea.   There seems to be some concern over using the Nuget format but I think that the current tooling that already exists around Nuget and the fact that chocolatey, OneGet and Octipus Deploy chose Nuget as a format demonstrates how useful the format. \n. @muratg Does dotnetcli work with RC1 bits?\n. ",
    "shanselman": "How is this different from the \"Export Website as Package\" feature that IIS has had for 5(?) years? This is the zip file format that is used with Websites in the WebMatrix and Azure galleries.\nI'm not against your idea, but I want to make sure that we remember history, and features that not only already work, but are literally built into IIS and Windows Server itself.\nhttp://www.hanselman.com/blog/MicrosoftWebPlatformWebApplicationGalleryWebPlatformInstallerAndDasBlog.aspx\n\n. This seems to have regressed? @muratg \n. My bad. It's that console logger is \"Warning\" by default in the templates.\n@rustd let's change that to Info.\n. Ya, this all started with the whole \"dnx .\" thing and I came here to open another bug but found this.\nWhen I went \"dnx web\" I get a lousy error \"Please specify the command to run\" and I just stared. \nI agree with @Mpdreamz we should do \"dnx command [directory]\" so the default is .\n@glennc @danroth27 @DamianEdwards \n(or at the absolute minimum, change the error to tell folks about the . )\n. I like this also. The 90% case has to be as easy as possible. \"mono foo,\"\n\"java foo, \"dnx foo\"\nOn Wed, May 20, 2015 at 1:08 PM, Louis DeJardin notifications@github.com\nwrote:\n\n+1 and agreed such a change would need to be coordinated pretty carefully\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/dnx/issues/1403#issuecomment-104020295.\n\n\nScott Hanselman\nDonate to fight diabetes: http://hnsl.mn/fightdiabetes\n. Why do we need to support older versions? It hasn't been released and there\nis no go-live. This is the time to break things and fix this.\nOn Tue, Jul 7, 2015 at 10:31 AM, BillHiebert notifications@github.com\nwrote:\n\nTooling will need to be updated to handle the changes. We should be able\nto do it in a compatible way that continues to support the old syntax for\nolder versions of DNX.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/dnx/issues/1403#issuecomment-119276764.\n\n\nScott Hanselman\nDonate to fight diabetes: http://hnsl.mn/fightdiabetes\n. Sure, but we aren't even releasing yet. We have some time, no? I say break\nstuff. Not to mention we could have fixed this in May.\nOn Tue, Jul 7, 2015 at 11:36 AM, David Fowler notifications@github.com\nwrote:\n\nTo avoid pissijg people off we stage changes like these. If a nightly\nbuild breaks your vs then we want to line it up with a VS release\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/dnx/issues/1403#issuecomment-119295943.\n\n\nScott Hanselman\nDonate to fight diabetes: http://hnsl.mn/fightdiabetes\n. Since we can't break tooling, I think we need to keep it.\nOn Wed, Jul 15, 2015 at 11:11 AM, Pawel Kadluczka notifications@github.com\nwrote:\n\n@davidfowl https://github.com/davidfowl @shanselman\nhttps://github.com/shanselman @DamianEdwards\nhttps://github.com/DamianEdwards @anurse https://github.com/anurse\n@muratg https://github.com/muratg - in my PR I kept the ability to\nspecify a folder (including .)\nhttps://github.com/aspnet/dnx/pull/2263/files?diff=unified#diff-c6b566f7546118bf1810a8069541a006R151\nfor backwards compatibility. If we don't want to keep this (or just special\ncase .) this is the time to speak up (@anurse https://github.com/anurse\nalready did :)).\nNote that to keep this behavior we need to go to the disk to be able to\ndisambiguate between a command and a folder unless it is a ..\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/dnx/issues/1403#issuecomment-121698700.\n\n\nScott Hanselman\nDonate to fight diabetes: http://hnsl.mn/fightdiabetes\n. HOLY CRAP.\nhttps://twitter.com/shanselman/status/667144339353526272\nOn Mon, Nov 16, 2015 at 11:11 AM, Eilon Lipton notifications@github.com\nwrote:\n\n@DamianEdwards https://github.com/DamianEdwards FYI too.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/dnx/issues/3145#issuecomment-157102539.\n\n\nScott Hanselman\nDonate to fight diabetes: http://hnsl.mn/fightdiabetes\n. Where is this code now? \n. ",
    "schotime": "It would be pretty cool to have to have your whole website inside a nuget package and be able to run it from the nuget package. eg. k run website.nupkeg, but still then have the ability to extract it and modify a file for a quick fix.\n. This line in my tests \ncsharp\nvar configuration = new Microsoft.Framework.Configuration.ConfigurationBuilder()\n    .Add(new JsonConfigurationProvider(\"config.json\"))\n    .Build();\ndoes not find the config.json file when running not in the directory itself. \neg. I need to set the running path.\n. That code is in the test project and yes I did try it.\n. https://github.com/schotime/NPoco/blob/dnx/test/NPoco.Tests/Common/BaseDBDecoratedTest.cs#L27\n. Thanks to @davidfowl.\nYou must use the Extension Method AddJsonFile like so as it will set the path correctly.\ncsharp\nvar configuration = new Microsoft.Extensions.Configuration.ConfigurationBuilder()\n    .AddJsonFile(\"config.json\")\n    .Build();\nhttps://github.com/aspnet/Configuration/blob/dev/src/Microsoft.Extensions.Configuration.Json/JsonConfigurationExtensions.cs#L60\n. So how is #3196 fixed then? Surely is should work the same way whether I run it from the directory where project.json is vs a parent directory specifying the project directory (-p).\n. Victory!!!\nThanks. Will update issue with it.\n. ",
    "caioproiete": "+1. The NuGet format is just perfect for that given all the metadata it supports. Perhaps just change the extension to something different so people to get confused between libraries and apps (e.g. keep .nupkg for libraries and introduce .appkg for applications)\n. > What we don't have is a file that is designed to provide repeatable builds of a given commit, branch, etc at any point in time\nJust adding myself to the group that thinks this is crucial before RTM's - and this file should be created by default (!).\n\n(assuming the packages are able to be downloaded still)\n\nA lot of companies host their own local/private NuGet feed exactly to make sure old versions of packages will be available at any point in the future. Also a number of devs will actually commit the NuGet package to source control, for the same reason (which could make a lot of sense for folks using Git LFS).\nI'll just leave this here in the hope that we learn from the Rails devs ;)\n\n. I totally need an excuse to buy the Mindstorms EV3 :smile: [2]\n. ",
    "ggrnd0": "Good idea, but existed nuget package cannot implement it.\nWhat we need? now (in future) is just package any builded artifact. and it can be deployed without matching what is it. \nThe next step is launch app directly from package!\njust:\n\nlaunch package.nupkg\n//i typo java first =)\n\nAnd...\nwhy we need nuget? Why it was created? Why not used existed and more grown maven (2002 vs 2010)?\nAnd now u ask how to deploy apps with nuget?\nNo way! You must find any existed system and use it!\nBower? good\nNpm? also good\nApt? yum? (package manager from archlinux)? emerge? any another distyributing system? Yes!\nU must do it. U must not create new system!\nWhat we need? \n- Powerfull CVS. We have git, and any another systems.\n- Powerfull build system with plugin system to package any artifact we need. Is it exists? i know maven, is msbuild can all what can maven? \n- Powerfull build server which will can got code from anywhere: tarballs from ftp or smtp, from vcs, another sources with another plugins.\n- Powerfull packages for any artifacts. It must not be nuget. there is must not be powershell. \n  It must be pure distributing system which will control what u want to do on installation. \n  (I hate NewtonSoft, they doing web request on package installation)\nIf i install package it must only install package.\n  Where must be AddCodeFile AddResourceFile and another actions, but there must not be anyshell.\n  Are u want another action? - Create plugin and distribute it.\nWe donot need anoher systems. \nWe need to enhance existed systems.\nIs it writen on not your favorite language?\nYou must create bridge to application and mustnot create another system.\nPInvoke and ikvm will help you with it.\nso, your homework is to research good package format which can any you need. \nI like write tons of code? \nWell... Do it! You can port good programms from another good languages.\nBut, please... Do not touch formates. Do not create another architectural systems. Use what you have now. \nOriginal has troubles - solve it in mainstream.\nOriginal has not required functions - implement it with plugin!\nAll in your hands, do not lose it.\nTL;DR\n\npackages is cool\nNuGet sucks\nUse what already exists, do not create new bullshit\nUse .zip extention with package.json(pom.json XD) inside and forget for .nupkg extention\n. # developing the idea\n\nWhy kproj and sln still exists?\nWey Must Die!\nproject.json\nI thought about project.json like nuget package manifest... \nI think its only one good resolution.\n- it contains full set of dependencies.\n- it does not contains full fileset information any more. only info about directories (src, webroot) what can be trimed or not if you contribute source-code (zipballs) or webapp like package...\n- there is not exists information like version, name, description and other info that setting up by assembly-wide attributes.\nbut i think it`s possible to move information from attributes to project.json. \nI think if K is so new it can implement some good practics from other languages and platforms.\nI have already expressed my opinion about the benefits of Maven at the moment of creating nuget.\nMaven was adult enough and stable that you could safely use it in .net\nAnd now, when KRE:pom.json so close to MVN:project.xml the time has come to recognize it.\nThere is now any reasons to contains project metadata in source code.\nThis attributes can be generated easily at compile time. And i think any project can be safely converted to new model.\nproject.json can be the only one faile that will define application and substitute next:\n- buld configuration what now is project.json (but somethink still in .kproj file)\n- kproj is poor (example https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.Project/Microsoft.Framework.Project.kproj)\nit containse a few bulid properties that must be placed in project.json by default. i do not know why kproj still exists...\n- AssemblyInfo.cs since all metadata will be place in project.json\n- SolutionFile - has 2 tasks\n  - First is containing build configuration of all project in one place. It is too bad... Each project can spec it separatelly...\n  - And second solution task is to contain projects list.\nBut do we need soltion file?\nOnly one task that i see for solution is containing list of all references with version specified. and projects contsins only dependensy name with out version.\nIt will best task of all - synchronisation of dependencies of projects!\nAnd it can has name project.json... \nOk, it can has name solution.json... \nBut I vote for project.json !!!\nsomething more, still small to create separate issue.\n\nI think projectGuid is abuse. it must be removed. we have full poject info in project.json and only we need to reference it is path.\n\nThere is example\n. there is example for frameworks and platforms\n. Oh=)\nIt worked good with adding Autofac, but did not with some other projects.\nThanks\n. dnx-clr-win-x86-1.0.0-beta5-11672 about 10 days old. Is it too old?\nFiddler do not show any http requests on dnu restore.\nAfter AppData/dnu was removed all packages downloaded.\nCan someone try to reproduce?\n. > AppData/dnu is the http response cache\nWhy does not download full repo index on command like dnu upgrade $gallery.\nThis is popular practice. For example, linux package managers.\nAnd there would be separate package and gallery caches, and guarantied way to force updates.\nI do not think index will take to mush disk space.\n. > Maybe you just had a corrupt cache from a bad nuget server.\nmyget.com\nScenario (i use dnx-clr-win-x86-1.0.0-beta5-11672):\n- close all VS\n- delete .dnx/packages and AppData/Local/dnu\n- add package what not in any galleries in your project\n- dnu restore (fiddler indicate correct 404 status)\n- upload package to gallery\n- dnu restore - still 'not found'\n- delete AppData/Local/dnu\n- dnu restore - it works!\n. > MyGet.org did have a bug that they fixed recently where they were returning bad status codes.\nfiddler indicate correct 404 status\n. Seriously?\nWhy one-second-action-delete-AppData/Local/dnu repair ~45minute bug?\nIs it normal, what bug in myget.com hides any time i delete AppData/Local/dnu?\n. Can github move this issue to nuget/home/issues? Or i must copy it to?\n. yes, my private feed. upload from cmd. simplest way.\n. > 4 dnu restore\nThere mistake. Fiddler do not catch dnu requests. That was got from VS2015RC. But result in VS and dnu is same.\n. Somethink strange.\nAppData/Local/dnu look good - correct data is cached. \nBut dnu and VS still said package not found.\n. I have some result on latest dnx-coreclr-win-x64.1.0.0-beta5-11756\n. ",
    "luisrudge": ":+1: \n. :+1:\n. ",
    "jrieken": "@davidfowl - I got a comment notification for this PR but somehow it got lost. I am sorry, but can you comment again?\n. @davidfowl - incorporated your feedback into d311164f9b1e87590789bfa72176b69a80793213\n. it's not smart to have 'Close and comment' and 'Comment' buttons so close to each other...\n. @davidfowl - Thanks for the feedback. More changes in here: 4aa8e1665663a3d67c40322adcd32acdf47863cd\n. @davidfowl - pong bc0e485c4656be383a46cfa06b4cddc5b8ce53e7\n. @davidfowl - rebased and sorted usings\n. You can reproduce this when using OmniSharp and DTH. There is code in OmniSharp that tries to connect to DTH in short intervals such that this message is printed twice.\n\n. :dancers: \n. didn't know the default capacity of List is zero and wanted to save some space\n. Good point. It will happen whenever there are multiple connections to the dth as each gets a dedicated thread reading from the socket connection. Will wrap things into a lock-block because Version and _value must be kept in sync.\n. SourceTextWithChanges is the baseline (as loaded from disk) and it's value (SourceText) the baseline + changes. The latter invalidates with every new change and the former with changes on disk.\n. ",
    "blowdart": "Security win!\n. Why do you need versions to be replaced by? Aren't we just doing \"latest and greatest\"?\nYou'd need to parse the file completely if X gets replaced by Y which in turn had another bug which is replaced by Z\n. No, you're right, your code is always slight wrong :)\nIn which case as long as your parse it in its entirety to ensure update chaining I'm happy. Ish.\n. Would you ever compress it? For example, if\na -> b\nb -> c\nwould be squished into\na->c\nb->c\n. As this is a potential security issue it needs to be up front and centre. If you can't breadcrumb you can't service.\n. Yea, I think this needs surfacing if it's the case, without a user having to add trace listeners or anything fancy. @GrabYourPitchforks @davidfowl \n. I'd like it in the console, and in the event log if on Windows. Because seriously no servicing directory is a bad bad thing.\n. We could, of course, provide a util that elevates so it can create and set the ACLs correctly on the servicing directory.\n. Define \"after\". After what? :alarm_clock: \n. If the patches trigger a reboot we have parity with the existing poor behaviour. Improvements can come later.\n. I have to consider not raising serviceability problems front and centre a bug, rather than an enhancement,\n. Thanks\n. Hiding a huge gaping security problem in such a way that a user won't discover it unless it's a full moon, they're standing on one leg and have mistletoe tucked behind their left ear is, to my mind, not an enhancement but a gaping bug.\n. Then move the bug component to a bug, rather than rewriting history ya muppet.\n. There. #1122. Are we a happy camper now @davidfowl ?\n. Yes. Having a compiler present anywhere is a problem.\n. You tell me. If it can be deleted why ship it in the first place? :p\n. You precompiled views. Just like you precompiled WCF serialization proxies too.\nThis makes perfect sense. You don't want compilers willy nilly in case of exploit. There's no sense in making it easier for an attacker, and it's a requirement in a lot of secure environments.\n. @Eilon yes, but with precompilation and some PITA work you could remove it. It wasn't very stable.\nThis is a chance to help improve that story for properly secured environments.\n. 1752 was about specific instances of regexs in the framework. This is about choosing a default timeout for all regexs, framework or otherwise. Doesn't work in coreclr though, or didn't when I proposed this.\n. I have no idea what work you have done sometimes. And yes, it's a special CLR key that is respected on desktop, as you can see by following the MSDN link above. \n. I'd stick with bug.\nAs for CoreCLR this is not true. CoreCLR does not provide a global default. You can, and should, in both desktop and core use the regex constructor which takes the Timeout everywhere.\n. Bonus potential security issues here as well :)\n. Can you get me some test results, and set up a meeting next week to go through the code once I get back? Thanks\n. Please fall back to 4.5.2 if possible, to get some opt-in security protections.\n. 4.5.2 came out in may last year :) But if Antares still isn't on it, fair enough.\n. Modify how? What's so special about native to native that they aren't in the same path?\n. How did it get loaded in the first place if it wasn't in the search path already? \nWhere does this stop? If the file was in system32 and you now start searching there we have problems\n. Are we expecting the nupkgs to drop them in random directories then?\n@davidfowl can you set up some time tomorrow to explain this to me please\n. Well that's fun. Unknown is rather helpful. This is obviously a false positive.\n. AVG have updated their detection, and this should be fixed in an update available today,\n. It'd be an interesting debug point if you can't log a breadcrumb. That would indicate something rather problematic as servicing would no be impossible. I'm not even sure a simple log is enough on failure.\n. You're not giving it away in the previous error, I'd rather you didn't do it here, just so Helios doesn't give it away.\n. ",
    "kirthik": "Tried it with latest runtime 587 and I see the same error \n. I am still seeing it using the latest from release feed\n. @davidfowl , @shhsu - This is checked in to dev. Shouldn't this go in release branch too for beta? \n. merged bfc4776207bc08c3b2787fd04ae5c66960c7ed6a\n. I could not repro this issue on latest bits. This scenario works for me.\n. Yes instructions don't talk about including run or . options so its confusing when you type the command according to instructions and you get back the help content. As @anurse mentioned, instructions and error message should be improved.\n. closing this one. I will open another PR with some more changes\n. cc @lodejard, @davidfowl \n. Yes I will add tests in the next iteration.\n. @davidfowl: added tests and updated code.\n. @davidfowl: added tests and updated code.\n. Not sure why travis is failing. Failure is because it cannot find xunitrunner. Will check with someone on why this could be happening.\n. Travis is still failing. I will follow up on the issue tomorrow\n. @BrennanConroy - I rebased against latest code and still see the error on travis.  What causes the xunit 99.99.99.0 load error?\n. merged bfc4776207bc08c3b2787fd04ae5c66960c7ed6a\n. It looks like we already have an issue logged for this - https://github.com/aspnet/dnx/issues/1263. So closing this one.\n. fixed 5bbb84bea40d8835da0c3eefd5a2343b50347084\n. cc @davidfowl - Added null check for culturename\n. Yes, it is in System.Runtime assembly. \n. merged 21cd6896974759bf8a1d48790d9515b56d8ef3d0\n. Could you please tell me what build of dnx you are using?\n. Thank you for reporting this issue. Your issue is fixed with #2802 but I found another related issue - https://github.com/aspnet/dnx/issues/2902. I will send a fix for this soon.\n. merged 87a241624c0efb80b5e34e8fff185ec7d7e3148a\n. @JunTaoLuo added new test. cc @davidfowl \n. @davidfowl : rebased with latest DNX code and it works now.\n. merged 87a241624c0efb80b5e34e8fff185ec7d7e3148a\n. Yes this is a bug. Its a dupe of - https://github.com/aspnet/dnx/issues/3047\n. Target location and file patterns are same as before. The only pattern that is added is searching for assembly names that end with .resources which is searched in all folders under the _outputPath\n. Ok\n. What are places in code should this check be at?\n. Yep. Working on adding tests \n. Yes. It is to verify we can read resources from class library too.\n. In line 301 for CompilationContext.Compilation.Emit call. resourceGrouping.Key is empty if you have a resx that is not locale specific like test.resx\n. This happens when user calls ResourceManager for a culture that does not have a corresponding resx file. ReadResourcesFromProjectNugetPackageAndClassLibrary test covers this case.\n. Ok. Will do that.\n. No. Everything is scoped inside the if-else loop above\n. Moved resource generation to another method.\n. CultureInfo does not exist in dnxcore50. So I need it.\n. will remove. Its not needed\n. will fix it.\n. No. its a mistake. Will fix it.\n. Even if i pass the assemblyName as is and fix the comparer, the entries are not being matched. I had to create a new assemblyName without neutral culture for comparer to compare.\n. assemblyName is -\nxunit.runner.utility.AspNet, Version=99.99.99.0, Culture=neutral, PublicKeyToken=xxx\nentry in _assemblies is xunit.runner.utility.AspNet\n. project.json has specific version(5.6.3) for this package\n. Yes. Will remove it.\n. Ok. I will remove it and add the code directly.\n. GetExtension gives the . too so SubString(1) removes it \n. Yes since I am using assemblyName.CultureName that should never be null. If no value is specified it defaults to neutral. Should I add that check still just in case?\n. I will add a check to AddSyntaxtree only if cultureName is not null or empty. \n. ",
    "PinpointTownes": "@victorhurdugaci the generic OAuth2 handler is also impacted by this missing DLL:\n\nYou should maybe get in touch with the team in charge of the HttpClient to make sure they find an alternative to api-ms-win-downlevel-kernel32-l1-1-0 for CoreCLR/Windows 7.\n@Tratcher \n. +1 for a Mono TFM! :tada: \n. I opened a ticket at NuGet/Home to track that: https://github.com/NuGet/Home/issues/2320.\n. IRuntimeEnvironment's default implementation relies on Environment.OSVersion (at least for the DNX451 bits), which internally calls GetVersion/GetVersionEx, whose behavior has changed with Windows 8.1:\n\nWith the release of Windows 8.1, the behavior of the GetVersionEx API has changed in the value it will return for the operating system version. The value returned by the GetVersionEx function now depends on how the application is manifested.\nApplications not manifested for Windows 8.1 or Windows 10 will return the Windows 8 OS version value (6.2). Once an application is manifested for a given operating system version, GetVersionEx will always return the version that the application is manifested for in future releases. To manifest your applications for Windows 8.1 or Windows 10, refer to Targeting your application for Windows.\n\nhttps://msdn.microsoft.com/en-us/library/windows/desktop/ms724451(v=vs.85).aspx\n. I'd bet there's a bug in the restore stack, because dnu restore is unable to resolve transitive dependencies when using netstandard or netstandardapp. With dotnet restore, they are correctly resolved.\nA likely related symptom is that the .nuspec file stored in each \"dependency folder\" contains <group targetFramework=\"Unsupported0.0\"> instead of <group targetFramework=\".NETStandard1.3\">.\n. @muratg yep, looks like @pakrym's last commit fixed the issue :clap: \n. ",
    "shiftkey": "cc @davkean \n. :thumbsup: to this change. Here's the MSDN reference about %USERPROFILE% (well, it's alias %CSIDL_PROFILE%)\n\n. Thanks @DamianEdwards!\n. ",
    "avanderhoorn": "Do you mean why do we want it in the box?\n. Yep. Hence why I think internalizing the types works.\n. Another example of this really helping is for all the packages in the ecosystem that will popup that will depend on different versions of json.net. Internalization here will really help!\n. We do the same thing in glimpse. We depend on several different packages that we internalize and if we need to let people config things, we provide abstractions for that (because we can't let the types leak out) \n. Ok so I'm wondering, @davidfowl mentioned that he thought there was some ways that could do this given the new vNext world. @davidfowl what do you think might be possible here?\n. I imagine it would have to be or at the very easy the default option. When\nwe take on a dependency like that we are internalizing it not only because\nwe don't want it to cause conflicts but also because we don't want people\nplaying with those types and we want the freedom to version/replace those\ndependencies without fear of breaking people. If we want people to be able\nto configure or work with elements of the dependent library, if up to us\n(the author) to provide the right abstractions.\nOn Saturday, November 8, 2014, David Fowler notifications@github.com\nwrote:\n\n@davkean https://github.com/davkean Would the rename also internalize\npublics?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/819#issuecomment-62251614.\n. Totally agree, we have the same exact thing for Castle.Core in Glimpse. I think the point here is that if we can come up with something that works for everything great! But if Castle.Core needs to be handled manually and we get out of the box support for everything else, I can live with that. With powerful tools comes responsibility and its up for the dev in the end to use the right tool for the right job.\n. NPM is the first one that comes to mind, but its not relevant given the way it handles dependencies.\n. I think the point is that given the new world we have an opportunity to deal with these type of dependency issues. Also in this new world, as more packages are versioning more rapidly and as people are creating packages that are cross cutting, versioning conflicts are only going to become more prevalent. This issue to me isn't necessarily about building in ILMerge support, but addressing how people will handle the increasing versioning conflicts that are most likely going to happen.\n. To answer your question about public vs internal vs private @davidfowl, I think in the end, the rules themselves might be quite simple. How it might be implemented might be more difficult, but if we agree on what the base expectations are, we can work on implementation details later.\n\nNot leaking types\nIf for the sake of argument we agree that leaking types is bad, then I think the problem becomes a little simpler. I think that most people here that are using ILMerge type methods today, live with this limitation and understand why that limitation exists and is probably a good thing. When types can't be leaked it means that we need to build abstractions to let users toggle given configurations or proxy given given providers, but that \"limitation\" also acts as a point of clear separation between the my code and the package that I (as a package author ) take a dependency on (like JSON.net or log4net, etc).\nPackage author controlling the version\nI've seen it said that \"what if the package user wants to change the version of log4net that we are using in Glimpse\". I struggle to understand what the requirement is here. If we use version 1.1 of log4net and a user try's to change it to 1.2, things will most likely not work correctly. When we currently ILMerge something in, that is us (the package author) taking responsibility for that dependent package. How can we make an guarantees about our code running correctly, if people have the ability to change the version of one of our dependencies without us having tested that. If a bug is found in a package that we depend on, it is up to us to rerelease our package or the user to get the source and rebuild it. Again trying to make simple rules.\nDependent packages operate in their own memory space\nDepending on how the feature is implemented, this might come as a result, but if a package that I depend on has a static variable, I don't want this to conflict with the same package that the user may be depending on directly. This might come as a side effect of not leaking types (if that is implemented by changing things to internal) or might have to be done by changing namespaces or some other method, but dependent packages operate in their own memory space is what I would expect.\nSupport in the platform\nHaving support in the platform for this problem means that instead of everyone on this thread going off and trying to solve it in different ways, we are combining our collective intelligence to have a process that is provided out of the box. It also means that consumer of package who use this, have a common expectation of how things will work.\nDon't have to support every use case\nI think that its ok if support for this feature doesn't work in absolutely every use case. For instance, Castle requires that some types must be public and hence can't, that is ok. If we end up supporting the use case where we can change namespaces and log4net is doing string comparison on its types, pressure will soon come from the community to change it. In the end, with power like this also comes great responsibility. Its up to the author to make sure things work. \nHope this makes sense and helps define the requirements/feature set.\n. A reliance on source packages will depend on whether source packages are continued to be supported in the future - I'm not sure what the Nuget teams thinking is in this regard. Additionally, a source packages for something like json.net would be rather large and might not be straight forward to build.\nPutting aside the later issues for a moment, one idea I had previously discussed with @davidfowl was what if for private dependencies you could point to a Git repository. At build time this would pull down the source (from the banch/tag you want), internalize and/or rename namespaces, and build it in. This is interesting, but could run into issues with more complex builds.\n. @xoofx Thanks for adding your input! \nHere are some thoughts based on what you said.\nWhen a author is internalizing it now owns that \"code\"\nIf my package depends on JSON.Net and I used this proposed new feature or I manually use ILMerge I am now taking responsibility for that code. For consumers of my package, they should no longer think of my package as depending on JSON.Net, but just my package. They probably won't even know that have a dependency on JSON.Net. As far as they are concerned, I might as well built my own JSON seralizer.\nVersion conflicts will be a problem\nI think we all agree that the amount of times that users are going to run into package conflicts is only going to increase. If for my app I use 5 - 7 different packages for middleware functionality, its highly unlikely that all these will use the same version of JSON.Net and its most likely that they will want to use 5 - 7 different versions of JSON.Net. Expecting the user to resolve these conflicts is a high expectation and they mightn't even be able to resolve those conflicts (as they might all be using different incomparable versions). And asking package authors to change there versions wont really work either, as no change will work for everyone.\nPrivatising dependencies and having packages decide what they want to depend on and have tested seems like the only option. This might lead to slight more JIT but I think this is a cost we have to live in this world.\n. @davidfowl Nothing is ever a silver bullet (I think we can all agree on that :smiley:) but I just don't see how this issue will solve itself either.\n. By way of an update, I've talking through this more with @davidfowl and we have come up with some more concise thoughts for this issue and I'm putting together more of a spec to describe this. Once its done I'll update the root issue comment.\n. Ok I've updated the root issue comment to reflect the spec for Internal Dependencies. Again, exact implementation details can be worked out later.\n. @davidfowl O-O... WOW, talk about force of will. Kinda cool that the XRE \"lets\" you do things like this. Assuming its proved out a little more, this could totally be made into something a little more supported. At the very least it could be a package that acts as a helper in doing things like this... save everyone writing the same code. \n. @anurse thanks, better than nothing!\n. Thanks!\n. I've just done the Beta6 VS update in my RC version of VS and now I'm getting a whole bunch of the following when I try and open my solution:\n```\nC:\\Users...\\Glimpse\\src\\Glimpse.Agent.AspNet.Mvc\\Glimpse.Agent.AspNet.Mvc.xproj : error  : The project file 'C:\\Users...\\Glimpse\\src\\Glimpse.Agent.AspNet.Mvc\\Glimpse.Agent.AspNet.Mvc.xproj' cannot be opened.\nThe project type is not supported by this installation.\nC:\\Users...\\Glimpse\\src\\Glimpse.Client.Web.Simple\\Glimpse.Client.Web.Simple.xproj : error  : The project file 'C:\\Users...\\Glimpse\\src\\Glimpse.Client.Web.Simple\\Glimpse.Client.Web.Simple.xproj' cannot be opened.\nThe project type is not supported by this installation.\n```\nI'm running DNX 12290 and if I use dnx from the command line using weblistener the app still runs.\n. This is blocking debugging from VS :( I'm on dnx 1.0.0-rc1-15904 from the CI feed.\n``\nApplication startup exception: System.IO.FileLoadException: Could not load file or assembly 'Glimpse.AgentServer.Mvc.Sample' or one of its dependencies. General Exception (Exception from HRESULT: 0x80131500)\nFile name: 'Glimpse.AgentServer.Mvc.Sample' ---> System.AggregateException: One or more errors occurred. ---> System.Threading.Tasks.TaskCanceledException: A task was canceled.\n   --- End of inner exception stack trace ---\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\n   at System.Threading.Tasks.Task1.GetResultCore(Boolean waitCompletionNotification)\n   at System.Threading.Tasks.Task1.get_Result()\n   at Microsoft.Dnx.Compilation.DesignTime.DesignTimeHostProjectCompiler.CompileProject(CompilationProjectContext projectContext, Func1 referenceResolver, Func1 resourcesResolver)\n   at Microsoft.Dnx.Compilation.LibraryExporter.<>c__DisplayClass17_0.<ExportProject>b__0(CacheContext ctx)\n   at Microsoft.Dnx.Compilation.Caching.CacheExtensions.<>c__DisplayClass0_01.b__0(CacheContext ctx)\n   at Microsoft.Dnx.Compilation.Caching.Cache.CreateEntry(Object k, Func2 acquire)\n   at Microsoft.Dnx.Compilation.Caching.Cache.<>c__DisplayClass5_0.<AddEntry>b__0()\n   at System.Lazy1.CreateValue()\n   at System.Lazy1.LazyInitValue()\n   at System.Lazy1.get_Value()\n   at Microsoft.Dnx.Compilation.Caching.Cache.Get(Object key, Func2 factory)\n   at Microsoft.Dnx.Compilation.Caching.CacheExtensions.Get[T](ICache cache, Object key, Func2 factory)\n   at Microsoft.Dnx.Compilation.LibraryExporter.ExportProject(ProjectDescription project, String aspect)\n   at Microsoft.Dnx.Compilation.LibraryExporter.GetExport(LibraryDescription library, String aspect)\n   at Microsoft.Dnx.Compilation.LibraryExporter.GetExport(String name, String aspect)\n   at Microsoft.Dnx.Compilation.CompilationEngine.LoadProject(Project project, FrameworkName targetFramework, String aspect, IAssemblyLoadContext loadContext, AssemblyName assemblyName)\n   at Microsoft.Dnx.Runtime.Loader.ProjectAssemblyLoader.Load(AssemblyName assemblyName, IAssemblyLoadContext loadContext)\n   at Microsoft.Dnx.Runtime.Loader.ProjectAssemblyLoader.Load(AssemblyName assemblyName)\n   at Microsoft.Dnx.Host.LoaderContainer.Load(AssemblyName assemblyName)\n   at Microsoft.Dnx.Host.DefaultLoadContext.LoadAssembly(AssemblyName assemblyName)\n   at Microsoft.Dnx.Runtime.Loader.AssemblyLoaderCache.GetOrAdd(AssemblyName name, Func`2 factory)\n   at Microsoft.Dnx.Runtime.Loader.LoadContext.LoadAssemblyImpl(AssemblyName assemblyName)\n   at Microsoft.Dnx.Runtime.Loader.LoadContext.ResolveAssembly(Object sender, ResolveEventArgs args)\n   at System.AppDomain.OnAssemblyResolveEvent(RuntimeAssembly assembly, String assemblyFullName)\n---> (Inner Exception #0) System.Threading.Tasks.TaskCanceledException: A task was canceled.<---\nat System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.Assembly.Load(AssemblyName assemblyRef)\n   at Microsoft.AspNet.Hosting.Startup.StartupLoader.FindStartupType(String startupAssemblyName, IList`1 diagnosticMessages)\n   at Microsoft.AspNet.Hosting.Internal.HostingEngine.EnsureStartup()\n   at Microsoft.AspNet.Hosting.Internal.HostingEngine.EnsureApplicationServices()\n   at Microsoft.AspNet.Hosting.Internal.HostingEngine.BuildApplication()\nHosting environment: Production\nNow listening on: http://localhost:5000\nApplication started. Press Ctrl+C to shut down.\n```\n. I just tested this again and I'm still getting the issue after just getting latest of everything... currently running 1.0.0-rc1-15961.\n. Makes sense. As a side note though, maybe Server Name was a bad choice of\nwords... That actual property would probably be Machine Name or something\nsimilarly abstract. In that case it would work in a device context just as\nwell as a web context.\nOn Saturday, October 24, 2015, David Fowler notifications@github.com\nwrote:\n\nClosed #3069 https://github.com/aspnet/dnx/issues/3069.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/dnx/issues/3069#event-444776993.\n. \n",
    "leastprivilege": "We also use internalizing in IdentityServer to handle the dependencies. It would be nice to have that feature in the box.\n. Same here - we have our own CookieOptions, DataProtector etc abstractions that we translate to the internalized ones.\n. Well C/C++ \nIt is really nice that IdentityServer is only a single nuget and we can encapsulate all our dependencies. And I hear this feedback all the time from customers as well.\nhttps://github.com/thinktecture/Thinktecture.IdentityServer.v3.Samples/blob/master/source/SelfHost%20(Minimal)/SelfHost/packages.config\n. If a library needs to be serviced we have to update the whole package - that is true. But in most cases even just a service releases of a library you depend on requires you to revisit/test your own code.\n. But yeah - there are certainly two angles to it - the dependencies (and their conflicts) and internalizing.\nFor us the main motivation was to simplify dependencies (see the JWT handler v3 vs v4 debacle) - the single nuget was a side effect of that - but it is handy.\n. ",
    "distantcam": "Fody Costura uses a different approach to internalizing. Instead it bundles the assemblies as embedded resources, and then hooks the appdomain when it tries to resolve an assembly and provides the correct assembly.\nIf you're already controlling the appdomain as part of vNext, this might be a viable option.\nThe pros of this approach is that the embedded assemblies keep their own identity, including strong naming. Also you can include assemblies that are obfusctated, or otherwise difficult to ILMerge. Costura also has handles for native and mixed mode assemblies.\nAnd lastly, using ILMerge is problematic when dealing with licenses like the GPL, as you're effectively merging all the source together. And there are licenses that restrict decompilation, which also could not use ILMerge.\n. @damianh Well, using Costura for libraries is not technically supported, precisely for this reason. :/ But I know people use it that way anyway.\nThe AppDomain assembly resolution is a first answer is the winner approach. So in the case you describe, which ever Costura hook from A & B that finishes first will be the one that's provided.\nCostura was designed originally to bundle everything into a single exe to ease deployment. It was not designed for libraries.\n. @ayende Unfortunately not. AssemblyResolve is only used when the AppDomain cannot already find the assembly. So once the assembly is in the AppDomain that's the one that's used.\n. ",
    "ayende": "I think that being able to hide what we depend on is important, especially incompatible stuff.\nIIRC, you can provide multiple versions of the same assembly if it is different version via AssemblyResolve\n. I like the idea of renaming dependecies.\n*Hibernating Rhinos Ltd  *\nOren Eini* l CEO l *Mobile: + 972-52-548-6969\nOffice: +972-4-622-7811 l Fax: +972-153-4-622-7811\nOn Fri, Nov 7, 2014 at 8:49 PM, David Kean notifications@github.com wrote:\n\nFirst thing, I think really thing we should be working with and filing\nbugs/shaming projects that are breaking compatibility left, right and\ncenter. If you're popular enough, whether you like it not, you have to\nbe in the compat business. Internalizing/ilmerging also doesn't help when\nyou need to pass types across libraries and agree on their location (thing\ntypes like Stream, IServiceLocator, etc). Internally, we call these\n\"exchange types\" - any assembly that contains these, must be be\ncompatible across versions.\nWith the new changes coming with NuGet, I'm wondering if you really need\nto internalize/ilmerge. NuGet's considering introducing a concept of\nprivate dependencies in v3, where these are not automatically passed to the\ncompiler but are still deployed. After of which, you just need to figure\nout how to side-by-side load them. There's a couple of options:\n1.\nMake use of LoadFile[1]. This gives every assembly it's own universe\n   (AssemblyResolve is called back for every reference), and doesn't require\n   you to put things in the GAC to enable side-by-side loading. However, it\n   would be complex to figure out if a reference is needed just for\n   implementation details or is actually something that needs to be unified\n   and shared across libraries.\n   2.\nIn ASP.NET vNext on top of CoreCLR, we have introduced a new concept\n   called AssemblyLoadContext. This gives a similar result to LoadFile, where\n   you can give each assembly it's own universe.\nUnfortunately, neither 1 or 2 will work anywhere other than the server or\nfull .NET Framework. Certain environments (ClickOnce, Silverlight, Phone,\nStore, .NET Native and probably Android/iOS) have restrictions where there\ncannot be duplicate assemblies in an app package and you are unable to\nside-by-side load.\nThe third option could be to simply renamed automatically (using a\nmetadata reader/writer) any private dependencies and then rewrote\ncallers to pick up the new name.\nFor example given the following simple graph\nLibrary1 -> System.Runtime (4.0) [Public]\n         -> Newtonsoft.Json (3.0) [Private]\nLibrary2 -> System.Runtime (4.0) [Public]\n         -> Newtonsoft.Json (2.0) [Private]\nWe (ecosystem) introduce something that rewrites just before deployment to:\nLibrary1 -> System.Runtime (4.0) [Public]\n         -> Newtonsoft.Json_Library1 (3.0) [Private]\nLibrary2 -> System.Runtime (4.0) [Public]\n         -> Newtonsoft.Json_Library2 (2.0) [Private]\nWe make this general purpose so that it runs and works everywhere on all\nproject types.\nWe should note however, that this doesn't fix the situation where\nNewtonsoft.Json is exchanged between Library1 and Library2. There's no\nway to make that work other than push on these popular libraries to be\ncompatible between versions (not picking on James here, just using him as\ntheoretical example).\nWe could also look at using a combination of options, 1 & 2 for the server\nand 3 for the client.\n[1] If you use LoadFile, please call AppDomain.ApplyPolicy on the\nresulting name in AssemblyResolve, otherwise, policy (binding redirects,\npublisher policy unification, portable) will not be applied.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/819#issuecomment-62201571.\n. That would be great for libs, if we can do that.\n\n*Hibernating Rhinos Ltd  *\nOren Eini* l CEO l *Mobile: + 972-52-548-6969\nOffice: +972-4-622-7811 l Fax: +972-153-4-622-7811\nOn Wed, Jan 28, 2015 at 7:33 PM, Damian Hickey notifications@github.com\nwrote:\n\n@davkean https://github.com/davkean Correct me if I'm wrong, but this\nis more for end apps (.exes) and not libs, right?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/XRE/issues/819#issuecomment-71878074.\n. \n",
    "dennisdoomen": "@ayende, @damianh, that's exactly what we ran into this week. Using RavenDB 3.0 in an ASP.NET web site that uses WebAPI 1 causes all kinds of really weird and annoying assembly loading conflicts. \n. ",
    "davkean": "First thing, I think really thing we should be working with and filing bugs/shaming projects that are breaking compatibility left, right and center. If you're popular enough, whether you like it not, you have to be in the compat business.  Internalizing/ilmerging also doesn't help when you need to pass types across libraries and agree on their location (thing types like Stream, IServiceLocator, etc). Internally, we call these \"exchange types\" - any assembly that contains these, must be be compatible across versions.\nWith the new changes coming with NuGet, I'm wondering if you really need to internalize/ilmerge. NuGet's considering introducing a concept of private dependencies in v3, where these are not automatically passed to the compiler but are still deployed. After of which, you just need to figure out how to side-by-side load them. There's a couple of options:\n1. Make use of LoadFile[1]. This gives every assembly it's own universe (AssemblyResolve is called back for every reference), and doesn't require you to put things in the GAC to enable side-by-side loading. However, it would be complex to figure out if a reference is needed just for implementation details or is actually something that needs to be unified and shared across libraries.\n2. In ASP.NET vNext on top of CoreCLR, we have introduced a new concept called AssemblyLoadContext. This gives a similar result to LoadFile, where you can give each assembly it's own universe.\nUnfortunately, neither 1 or 2 will work anywhere other than the server or full .NET Framework. Certain environments (ClickOnce, Silverlight, Phone, Store, .NET Native and probably Android/iOS) have restrictions where there cannot be duplicate assemblies in an app package and you are unable to side-by-side load.\nThe third option could be to simply rename automatically (using a metadata reader/writer) any private dependencies and then rewrote callers to pick up the new name.\nFor example given the following simple graph\n```\nLibrary1 -> System.Runtime (4.0) [Public]\n         -> Newtonsoft.Json (3.0) [Private]\nLibrary2 -> System.Runtime (4.0) [Public]\n         -> Newtonsoft.Json (2.0) [Private]\n```\nWe (ecosystem) introduce something that rewrites just before deployment to:\n```\nLibrary1 -> System.Runtime (4.0) [Public]\n         -> Newtonsoft.Json_Library1 (3.0) [Private]\nLibrary2 -> System.Runtime (4.0) [Public]\n         -> Newtonsoft.Json_Library2 (2.0) [Private]\n```\nWe make this general purpose so that it runs and works everywhere on all project types. \nWe should note however, that this doesn't fix the situation where Newtonsoft.Json is exchanged between Library1 and Library2. There's no way to make that work other than push on these popular libraries to be compatible between versions (not picking on James here, just using him as theoretical example).\nWe could also look at using a combination of options, 1 & 2 for the server and 3 for the client.\n[1] If you use LoadFile, please call AppDomain.ApplyPolicy on the resulting name in AssemblyResolve, otherwise, policy (binding redirects, publisher policy unification, portable) will not be applied.\n. Taking a step back. If NuGet hide private dependencies so that consumers of your package couldn't see them or build against them, do you still need to internalize/ILMerge? \nDo you still need this because you are using other dev delivery mechanisms other than NuGet? ie Copying raw binaries around?\n. @thefringeninja Go look at my first proposal above. Assume we solved the side-by-side loading.\n@ryanbnl  Libraries would know have to understand that they can be loaded twice (which they can already), and not use global locations for configuration. ie They would either need to scope configuration in app.config per version/per unique version or have a configuration API that would be implicitly scoped because we wouldn't share statics, etc.\n. @damianh http://blogs.msdn.com/b/dotnet/archive/2014/04/02/announcing-net-native-preview.aspx\n. This is by design; we no longer have profiles in the \"dotnet\" world.\n. No, it's by design that portable doesn't have profiles - it's not by design that you crash when you encounter that.\n. ",
    "FransBouma": "Perhaps I'm daft but isn't this a discussion about whether static linking is something worth having or not? And if so, every C/C++ compiler out there has that feature and for reasons we all don't have to rehash here, I think? \n. @davidfowl \n\nInternalizing is a giant shotgun to give people and I think only a few people really need it. I fear it will be abused.\n\nWhy do you fear that? Is it so widely abused in C/C++ compilers that using a dll / .o / lib file is useless because of all the abuse? No, not at all. Give people features so they can decide for themselves how to solve problems instead of you deciding for them whether they can solve the problem at all or not. This whole debate is like the one C compiler writes had back in the 70-ies. Yes a feature will be abused, so what: you can't avoid that. Same goes with the fine-grained assembly structure which has downsides and will cause problems if not used in a certain way. All of this isn't new, dependency linking (C compilers), a central system for obtaining dependencies (java/maven, ruby, node etc.)... all examples of systems which are already there and already have solved (especially maven which is around for a long time) or were unable to solve because , so re-doing everything from scratch as if you all run into these problems for the first time is a waste of time. \n. @davidfowl \n\nFeel free to restate why all the other existing tech do what they do and how it relates to .NET in general.\n\nerm, why do I have to do your job? Why don't you make a case where you state why .NET is unique and has to re-invent the same wheel that's been invented several times now by others and, e.g. in this case with static / dynamic linking, why .NET is unique and all the other static/dynamic link examples out there released in the last decades don't apply? \n(hint: .NET isn't unique and therefore doesn't need new solutions to an old problem)\nBtw, referring to ILMerge is not really the same as a static/dynamic link flag on the compiler like with C/C++. Referring to ILMerge is the same as doing your manual linking with lc.exe in obscure makefiles. \n. > That's unnecessarily confrontational.\nIt might, but @davidfowl clearly asked whether I could come up with a reason to add a feature, which is not my job, it's his job, i.e. to justify a feature being added or not. I'm not a Microsoft employee who has to justify to his PM whether there's budget for feature X. His post (IMHO!) clearly asked me to just that. \nSemantics aside, I still fail to understand why it's such a hard problem to add a feature which might help people who want to use it and is totally ignored by the masses who don't even know what static linking is. I.o.w.: it's there when you need it, it's otherwise ignored as most people will go the default route, i.e. reference an external dependency. \nThere's no reason to panic over whether this will be abused, it will, but that's not MS' problem: the problem will solely be for the persons who ship a library which statically links libraries which cause havok e.g. due to type leaking through the interface. That's not different from embedding the source(!) of a random library into your own library and ship that. \n. > @FransBouma https://github.com/FransBouma , I don't have a strong opinion on what the best solution\n\nis -- I use many languages which approach this problem in radically different ways, and, to be honest,\nI'm not satisfied with any of them -- but I have to disagree with \"that's not MS' problem.\" I think\nthe fact that we're having this conversation at all is evidence that delivering a solution which\npushes people into the \"pit of success\" is very much Microsoft's problem.\n\n```\nTrue, though the problem I was referring to was the problem resulting from the fact that the owner of a library L had statically linked a library X with L which conflicted with a library Y referenced by the user of L. \nTo my knowledge there's no true solution to this though: offering static link options won't make some problems go away, it just makes things easier to do, but for a price: C libraries all to well have taught us that statically linking code can also lead to problems and we shouldn't close our eyes for those. \n```\n. ",
    "thefringeninja": "Some assemblies load types with hardcoded assembly names, assuming that they will never be ilmerged. This is more of an RX problem than an ilmerge problem, but still quite annoying.\n. @davkean How would nuget accomplish this exactly? \nConsider this: My library takes a dependency on log4net 1.2.10. Someone else's app takes a dependency on my library and log4net 1.2.11. It blows up in production because even though the semantic version says it is backwards compatible, it is not because they changed the snk between those two versions.\nThat's not the only way it can break. Maybe the public API changed or maybe one of its dependencies changed. There is no way that I'm aware of to actually enforce semver, you just have to trust that the package maintainers know what they are doing.\nIf I internalized log4net this wouldn't be an issue.\n. yes\nOn Tue, Nov 11, 2014 at 11:06 PM, Damian Hickey notifications@github.com\nwrote:\n\nYep nice points @avanderhoorn https://github.com/avanderhoorn !\nSource packages are my current strategy for my own stuff (LibLog,\nLibOwin). But as @avanderhoorn https://github.com/avanderhoorn\nmentions, large libs are going to get hairy fairly quickly. Throw in a few\nplatform compilation symbols / preprocessor directives, a dependency on\nMS.Bcl.Build etc and we're rapidly heading face first off a cliff. Projects\nwould also have to be specifically designed to source packages, for\nexample, lumping everything into a single file:\nhttps://github.com/damianh/LibOwin/blob/master/src/LibOwin/LibOwin.cs ,\nhttps://github.com/grumpydev/TinyIoC/blob/master/src/TinyIoC/TinyIoC.cs .\nThen these things are going to probably non-conforming to the target\nprojects style; mess up code coverage stats etc etc.\nAnyone remember the horn project / hornget? [image: :smile:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/819#issuecomment-62630678.\n\n\nSent from my regular computer\nhttp://twitter.com/thefringeninja\nhttp://www.thefringeninja.com/\n. It's not a silver bullet of course, but that doesn't mean it shouldn't be\neasy! :) Ilmerge works but it clearly needs some love. Even using github\ninstead of a .doc for documentation would be a big help.\nOn Wed, Nov 12, 2014 at 4:12 AM, David Fowler notifications@github.com\nwrote:\n\n@xoofx https://github.com/xoofx voice of reason! +1. This thread makes\nit seem like internalizing is a silver bullet for incompatibility and that\nreally bugs me.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/819#issuecomment-62663078.\n\n\nSent from my regular computer\nhttp://twitter.com/thefringeninja\nhttp://www.thefringeninja.com/\n. ",
    "obiwanjacobi": "To be honest, I have not read everything. But here is my trick for static linking in .NET.\nInclude all dependent assemblies as \"Embedded Resource\" in your application. Handle the ResolveAssembly event and try to load the assemblies from your resource streams. \nI have worked with ILMerge, but find this method easier.\n[2c]\nMarc\n. ",
    "SimonCropp": "i would like to see OOTB support for internalising dlls+optional pruning\n. ",
    "ryanbnl": "@davidfowl internalising means the dependency conceptually becomes part of the library. As a library user, if a library is misbehaving I don't care if the bug is in the library or the dependency. As far as I'm concerned the library is the problem.\n. @davidfowl internalising means the dependency conceptually becomes part of the library. As a library user, if a library is misbehaving I don't care if the bug is in the library or the dependency. As far as I'm concerned the library is the problem.\n. Taking a step back for a minute, it would be rather cool if you could easily make single-file executables using the \"out of the box\" .Net experience.\n. @damianh no, I mean a .net exe, so not inlining the CLR, just the libraries you use. you can do it with ILMERGE, but it's nicer if it's part of the platform..\n. How would the configuration work? If you want to configure both separately?\n. Interesting idea @adamralph, although one disadvantage of this model is the compile time - a problem the interpreted languages will not have.\n. ",
    "phillip-haydon": "\nInternalizing is a giant shotgun to give people and I think only a few people really need it. I fear it will be abused.\n\nWe gave people MVC -> They abused it...\nWe gave people WCF -> They abused it...\nWe gave people EF -> They abused it...\nWe gave people MEF -> They abused it...\nWe gave people async -> They abused it...\nRegardless of what decisions are made, people will abuse them.\n. @ryanbnl that's exactly what I wish I could do except the Razor assembly is such a pile of crap I can't merge my project into a single .exe :(\n. @xoofx wish I knew what we had to do to get MS to fix Razor so it can be merged.\n. Sigh. Fail Naming.\n. ",
    "CraigStuntz": "@davidfowl asked for examples of how other ecosystems deal with dependencies. It is interesting to look at Haskell, which has exactly the opposite problem. Internal dependencies are the default; externalizing them is difficult. Here are some overviews from Ed Yang, of Microsoft Research:\nhttp://blog.ezyang.com/2014/08/whats-a-module-system-good-for-anyway/\nhttp://blog.ezyang.com/2014/08/the-fundamental-problem-of-programming-language-package-management/\n. @FransBouma, I don't have a strong opinion on what the best solution is -- I use many languages which approach this problem in radically different ways, and, to be honest, I'm not satisfied with any of them -- but I have to disagree with \"that's not MS' problem.\" I think the fact that we're having this conversation at all is evidence that delivering a solution which pushes people into the \"pit of success\" is very much Microsoft's problem. \nI cringe a bit when I read comments here which seem to me to say \"Don't overthink this; just ship ILMerge.\" Is that really the best we can hope for? \nI found @obiwanjacobi's solution intriguing, although I don't think it solves the \"[package manager] hell\" problem shared by essentially every technical ecosystem ever invented. Some combination of automating his technique coupled with package manager dependency resolution smarts might be really interesting, though? \n. @adamralph, that's essentially where Haskell is today. Maybe instructive to read the Ed Yang posts I linked above to consider some of the problems you get with that sort of solution and how the Haskell community is trying to solve them. \n. ",
    "pebezo": "@FransBouma \"erm, why do I have to do your job?\"... That's unnecessarily confrontational.\n. ",
    "jen20": "@davidfowl ILMerge would be a much more convincing story if it worked for all types of assemblies and it actually shipped with the framework, and MS came out and said they won't break it in future.\n. ",
    "xoofx": "Having an option to internalize assemblies would be great in some cases and I would probably prefer the option where assemblies are automatically ILMerged and IL renamed (options 3 described by @davkean)\nThat being said, I'm not really enthusiastic of seeing lots of packages deciding on their own that they want their dependencies to be internalized. I would not find great to have dozens of JSON implems floating around, polluting the JIT with the same code being JITed over and over. I would not find great either if the same logging infrastructure is used in different versions, defeating the whole purpose of a common logging infrastructure (files log and config would have to be duplicated, there would not be any way to cross plug a log listener to different versions....etc...)\nIf this internalized thing is decided only at end-user application building time in order to deal with some very specific assembly versions discrepancies, that's fine, but I would not recommend it as the genuine way to deal with versions mismatch. The general rule should still be that we want the same package being used only just once in our application, and if there is a mismatch, try first to get the all packages in line using the same versions, even if it requires to fork and patch a package ourselves if really there is no way the original author cannot update its package.\nI don't like much the idea of @adamralph about deploying package with their sources and recompiling them. I have too many cases where the build process is more complex than just a \"CsCompile\" (I don't do much ASP stuff myself but mainly apps, and I have many cases where we ship native compiled DLLs or managed DLLs which depends on lots of other 3rd parties SDK installed....etc.)\nOn the other hand, what is missing today is a tool to help check if a particular nuget package (or set of assemblies) is API compatible with its (potentially newer) dependencies. It would not solve every compatibility issue cases, but It would help a lot to manage versions in application and package authoring.\n. > Privatising dependencies and having packages decide what they want to depend on and have tested seems like the only option\nNot the only! :stuck_out_tongue: One option I'm also in favor is at first providing better tooling that can help to verify API compatibility between packages and decide if we want to override a particular version, because it is fine to use a newer. Specifically, If I develop a package A that depends on B, and I setup a version dependency >=, It would be nice to detect quickly that a newer version of B is no more compatible, but we can stick with an older version of A, without having to redeploy a new version of A that would narrow the version dependency to the older B.\nStill, I would prefer seeing privatising dependencies as an exception rather than a rule. But as you said, it is then just a private matter, that can already be done today relatively easily with ILMerge and Mono.Cecil (and Mono Linker if you really want to reduce the usage of the embedded dependency). Thought having something in .NET build pipeline (and not only asp) that would help to streamline this particular case would be nice.\n. Note that ILRepack has an option /internalize (never tried) so there is probably not so much work to do to add it to a build pipeline (at least doing this in msbuild is straightforward)\nNot sure about the asp.vnext build. I thought that It was mainly targeting for developing \"end-user\" asp.vnext application, but is a kproj intended also to be used to develop redistributable nuget components? If yes, well sure asp.vnext needs a way to specify this kind of post process build step on assemblies (ILRepack is just one use case)\n. @phillip-haydon sure, having an assembly ready for merge/internalize is a different problem! (and sometimes unsolvable!)\n. Oh! good to hear that it will be part of the .NET CLI! I'm not using the command line, only building from VS. Will follow more closely .NET CLI. Thanks!\n. ",
    "adamvoss": "+1 I like what is being proposed in the spec.  There are some grammatical issues, perfectly acceptable online, but I am not sure if those would need to cleaned up for MS's sake.  I can help with that if needed.\nI very much want to abuse this.  Well, I consider it a situationally appropriate use.  It is the same sort of use as above but a but a bit different use case than discussed.  I agree there is a lot of value here for library designers.  I also throw this out to show there are other real-world applications.\nSome organizations (or parts thereof) _really_ distrust dependency updates.  Even the ASP.NET updates Microsoft pushes out over Windows Update are considered a problem.  Any dependency update could break something, so effectively packages should not be touched after their initial inclusion.\nAlong with the obvious downsides, this also ends up freezing other dependencies at older versions (because of shared dependencies) or even precluding some dependencies entirely (unresolvable dependency conflicts).\nTo overcome these limitations I am now turning to ILMerge to internalize dependencies.  Yes, it cannot overcome all issues because there are certain dependencies must be shared externally; but, for all dependencies that can be internalized this allows for more freedom in using libraries.  If you consider, for example, something that can be represented as independent OWIN middleware, it becomes fairly easy to internalize most things.\n. I think this may need to be reopened.  It was closed for the move to NuGet, but the NuGet item is closed with guidance to talk to DNX.\nNB. I have not encountered the need for this issue yet, just reporting the issue with the Issues.\n. ",
    "quintonn": "Would it not be a good idea to treat different versions of the same library as completely different libraries? I think this is what @ayende was referring to?\nI.E, if using log4net v 1.2.10, then it would add a reference to a dll called log4net.1.2.10.dll, which will not be the same as log4net.1.2.11.dll. Or perhaps better would be to prefix the dll's with the name of the package it came with. \nEg. My produc ABC requires log4net, so when i compile and package my product there will be a dll called \"abc_log4net.dll\". But i think the first option is better.\nThis would mean, however, that passing objects from one version of a library to another would require recreating objects or remapping properties, but at least that is something that can be done in code and checked at compile time instead of at run time.\nI have used ILMerge a bit and it's not easy. Last time i checked it couldn't merge a WPF application and all it's dll's (at all).\n. ",
    "ianhong": "I think this might be related to https://github.com/aspnet/Tooling/issues/131; They shows the same exception message. \n. Sorry, the generated web.config with no-option has the following key. Again, it has no value.. \n<add key=\"kre-app-base\" /> \n. @ChengTian tried to repro this issue, but he coudln't. I think this issue has been fixed after I reported the problem. \n. ",
    "jkodroff": "Yes, as a matter of fact.\nSent from my iPhone\n\nOn Oct 31, 2014, at 3:46 PM, Jason Imison notifications@github.com wrote:\n@jkodroff - are you using zsh by any chance? see aspnet/kvm#83\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes, as a matter of fact.\n\nSent from my iPhone\n\nOn Oct 31, 2014, at 3:46 PM, Jason Imison notifications@github.com wrote:\n@jkodroff - are you using zsh by any chance? see aspnet/kvm#83\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "davidbitton": "Same issue here w/ Terminal and iTerm2, and yes, I'm using zsh.\n. ",
    "MiguelAlho": "This is just about how to add files to the generated nupkg, but not about how they will be consumed, right?\n. I agree with @smbecker, especially because I've been through some projects that suffered from not having a way to manage packages globally, for the entire solution. Because packages were added per project, and as the project grew, there tended to be multiple versions of the same package being referenced (like castle, log4net, automapper...) which meant problems we would find in staging/production, only. Many times it would require some type of binding redirects to be applied. This is one of the thing where dev / team discipline is required, but because it is possible to miss, some one WILL miss it. If there were a way to avoid this from happening, like defining common dependency versions in the global.json, then this pain could be reduced (though not completely eliminated).\nAnother place where this could help and where I've felt the pain (heavily), is when one solution references packages created from another solution. My teams case - we had a service solution with about 100 projects. A lot of those projects referenced libraries (from packages) from another solution (about have a dozen packages) and pretty much all the projects consumed a common, utilities package (used across a few solutions). When ever we tried to update these in the main project, chaos ensued. Initially it could take a half-hour to update (using the nuget package manager), but through a few tweeks, shortcuts and some custom tools, we were able to reduce this to a few seconds. One thing we did to help reduce this is too define an alternative folder (we called it a proxy) to copy the package content (without the version numbers) and switch path hints in csproj to that new location (and only for packages that were defined in a specific packages.config). This also reduced merge conflicts from having version numbers in the reference paths. All this just to add some context to a personal experience that concluded that a solution level reference for packages can be very helpful. I don't think everyone will need it, but large projects can benefit from it and leverage nuget for modularity.\nFinally, another useful aspect for the dependencies in the global.json would be to enable tooling packages (the type that usually includes target=\"tools\"). This would aid in making packages with build tools or dev tools available at the solution level and to the build server, and specified / contained by the solution. \n. Just finished reading https://github.com/aspnet/dnx/issues/819 . Internalizing libraries in each solution project will help avoid the first problem mentioned (multiple versions of the same package conflicting). Not sure it solves it completely - for instance, if in the same solution project A refs library Bv1.1, project B refs project A AND library Bv1.2 and you export project B as a package, what version(s) of lib B get(s) used? Still, having a single version of the dependency (and easily controlling it) across all the projects in the solution would be useful.\n. @muratg I was using the -Unstable switch but couldn't get any Beta5 runtimes; I've been working with my colleagues on some prototypes, and syncing became a problem. I upgraded to beta5 some time ago, but every one else on the team got locked out because they couldn't pull the same version. It's more of a syncing thing at the moment, when more than one person is working on a project.\n@Eilon - would it possible (or even worth the effort) to keep at least the last version of a specific beta around? Or add something to dnu that could list the available versions of a specific package (might help debug why a specific version of a package is missing)?\n. Something that comes to my mind when considering this situation:\nI'm a fan of the global version for the solution - normally changes are done in the context of a solution, builds in CI are in the solution's context, etc. So versioning at the solution makes it easy to relate changes to the set of projects as a cohesive unit. Cognitive load is reduced when managing the dependencies. Nonetheless, by changing at the solution level, we are breaking the version changes' meaning at specific projects. If a specific project has no changes, should the output assembly / package have a new version? If it is acceptable, and I can comprehend that a dev or team may accept this, then some packages simply will have version changes without having any internal change (possibly not even dependency changes). The benefit (and option) of having this may outweigh the loss of coherent semantics in the version number alterations.\nAlso, as somewhat mentioned in @roji 's original post, the version number in the global.json should establish the minimum version number for package dependencies that is generated within the solution. This would be so that nuget version resolution can correctly update all the dependencies (especially all those generated in the same solution) when any package update is performed in other solutions. I've had multiple problems of this sort in projects (generate stuff from one solution, then update packages in another, but guaranteeing that all have consistent dependencies), and i believe should be taken into consideration.\n. You may want to add a case for paths starting in or containing ..\\ (no idea what the name for this is), as it is related to issue i opened (https://github.com/aspnet/dnx/issues/2107) and unfortunately did not exemplify. An example would be ....\\LocalNugetRepo , which works well in previous versions.\n. ",
    "jayharris": ":+1: (I prefer --clean)\n. ",
    "ardalis": "I did not test the actual behavior; this issue is with the mismatch between the command name and its description. Obviously the behavior should follow suit...\n. So, if we are getting this error on the latest beta7 with the latest VS tools for beta7, what should we do?\n. On project load:\n\"error occurred attempting to run the DNX design time process (dnx-clr-win-x86.1.0.0-beta7). Unable to start the process. System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Framework.DesignTimeHost' or one of its dependencies. ...\"\nAt build time:\n1>------ Build started: Project: TodoApi, Configuration: Debug Any CPU ------\n1>  C:\\Users\\Steve.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta7\\bin\\dnx.exe --appbase \"C:\\dev\\github\\aspnet-docs\\aspnet\\fundamentals\\logging\\sample\\src\\TodoApi\" \"C:\\Users\\Steve.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta7\\bin\\lib\\Microsoft.Framework.PackageManager\\Microsoft.Framework.PackageManager.dll\" pack \"C:\\dev\\github\\aspnet-docs\\aspnet\\fundamentals\\logging\\sample\\src\\TodoApi\" --configuration Debug --out \"....\\artifacts\\bin\\TodoApi\"\n1>C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.targets(152,5): error : System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Framework.PackageManager' or one of its dependencies. The system cannot find the file specified.\n1>C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.targets(152,5): error : File name: 'Microsoft.Framework.PackageManager'\n1>C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.targets(152,5): error :    at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n1>C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.targets(152,5): error :    at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n1>C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.targets(152,5): error :    at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n1>C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.targets(152,5): error :    at System.Reflection.Assembly.Load(AssemblyName assemblyRef)\n1>C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.targets(152,5): error :    at Microsoft.Dnx.Runtime.Loader.LoadContext.Load(AssemblyName assemblyName)\n1>C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.targets(152,5): error :    at Microsoft.Dnx.Host.Bootstrapper.RunAsync(List`1 args, IRuntimeEnvironment env, FrameworkName targetFramework)\n1>C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.targets(152,5): error :    at Microsoft.Dnx.Host.RuntimeBootstrapper.ExecuteAsync(String[] args, FrameworkName targetFramework)\n1>C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.targets(152,5): error :    at Microsoft.Dnx.Host.RuntimeBootstrapper.Execute(String[] args, FrameworkName targetFramework)\n1>C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.targets(152,5): error : WRN: Assembly binding logging is turned OFF.\n1>C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.targets(152,5): error : To enable assembly bind failure logging, set the registry value HKLM\\Software\\Microsoft\\Fusion!EnableLog to 1.\n1>C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.targets(152,5): error : Note: There is some performance penalty associated with assembly bind failure logging.\n1>C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.targets(152,5): error : To turn this feature off, remove the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog].\n========== Build: 0 succeeded or up-to-date, 1 failed, 0 skipped ==========\n. I had had it set. I had removed it, multiple times, at the command prompt, but it wasn't being removed from my user profile. I finally figured that out and removed it via the GUI under This PC > Properties > Advanced System Settings and that deleted it permanently and sufficiently for VS to stop seeing it.\n. ",
    "hiiru": "I took a quick look at it, in case you only care about the URL of web Projects, then I think the best place to solve this would be in the aspnet/hosting Project.\nI prepared a possible solution here:\nhttps://github.com/hiiru/Hosting/blob/Issue-KRuntime-857/src/Microsoft.AspNet.Hosting/Program.cs#L86-L94\nThat way it's not dependent on generated scripts and would also show up when using \"k run web\"\nHowever my code snippet would only show the value of the specified argument server.urls, I don't know enough of the internals of Hosting and the servers (WebListener/Kestrel) itself to say for sure if that argument always represents the TCP bindings\n. Even though it's currently not planned to add max version, i updated my code to support NuGet's VersionSpec format for specify min/max. mostly to learn more about KRuntime :)\nHowever to do this, I had to add the VersionSpec class as base class to Library, that way it should work the same for existing code, however makes it simpler to re-use nuget version code.\nI think this would work nicely and with using the nuget version syntax, it should be easier for .NET devs (using the same versioning format in nuspec and project.json)\n. ",
    "djanosik": "I believe this bug still exists. I have an application called WebSite and I use the following command to bundle / publish it.\nkpm bundle --out \"C:\\Bundles\\WebSite\" --configuration Release --no-source --runtime kre-clr-win-x86.1.0.0-beta3 --quiet\nFirst time it works as expected and the kre-app-base setting has a correct value. But second time, the value is empty. It seems it is because the C:\\Bundles\\WebSite\\approot\\packages\\WebSite\\1.0.0 folder already exists.\nWhen I delete this folder, the package is rebuilt and the kre-app-base value is correct.\n. Yes... authors, tags, projectUrl and other metadata work as expected.\n. It is about owners and iconUrl in project.json and other metadata in global.json.\n. No I don't ;)\n. @smbecker I think it shouldn't, it feels wrong to me. I have some large solutions and I can't imagine this to be an issue.\n. ",
    "Krizzzn": "The kre-app-base is set as expected when using the --overwrite switch. Without --overwrite the key is empty when the target directory exists.\n. The kre-app-base is set as expected when using the --overwrite switch. Without --overwrite the key is empty when the target directory exists.\n. ",
    "JunTaoLuo": "reopening to hide stack trace for compilation errors as well.\n. Merged to dev\n. completed as #2617. Ongoing improvements are tracked via #2825.\n. cc @davidfowl @anurse \n. The current approach to resolve version normalization is to force the toString method of SemanticVersion to normalize the version number. This will force normalization whenever serialization is required. \nThe functionality of determining whether normalization has occurred is now removed since normalization occurs in every case. A DNU pack test for this scenario is removed.\nDNU pack and publish tests have been added to test version normalization.\nI will squash the two commits on this branch whenever the changes are approved.\n. cc @ChengTian \n. The Bootstrapper test should not be caused by the changes in this PR.\n. This is fixed by @davidfowl in 9b710db84a917260eac368f7f5c272e4d26e984f\n. cc @anurse @davidfowl @Tratcher @victorhurdugaci @BrennanConroy @halter73 @moozzyk @troydai \n. Note that with the new infrastructure, keep the test names short or else tests may fail on windows due to long path names. Also, before running tests, delete the TestOutput/ folder. In the future, I may change it so that all tests clear their old outputs before running.\nPlease review.\n@anurse @davidfowl @Tratcher @victorhurdugaci @BrennanConroy @halter73 @moozzyk @troydai \n. @anurse yup.\n. This feature will no longer be implemented\n. See if https://github.com/aspnet/dnx/pull/2823 helps in terms of logging.\n. I'll open a PR once the features listed here are completed (or marked as deferred). In the meantime, the related changes will be tracked by https://github.com/aspnet/dnx/tree/johluo/2664-testing-infra-improvements\n. There are quite a few good ideas here that I cannot finish implementing for beta8, I have marked them as deferred and will open another issue later to track them. See issue #2825. \n. merged to dev\n. @leak this issue should be temporarily fixed by #2861.\n. @leak my previous comment was to let you know there was a workaround in case you were blocked. The issue has been resolved for rc1 in #2850.\n. Duplicate of #2628\n. Just two minor comments otherwise looks good to me.\n. :shipit: when travis passes\n. Need signoff @davidfowl @anurse @moozzyk Thanks.\n. @anurse mais oui monsieur\n. Anything else before signoff? @anurse @troydai @davidfowl @moozzyk \n. travis passed, merged to dev\n. @davidfowl The tests were written using the new infrastructure.\n. dnx:\nnon-existent project\n\nnon-existent command\n\ndnu:\n\nunrecognized or missing arguments/options display a similar message.\nAny ideas about the missing dnx.onecore.dll @moozzyk?\n. 1 Folder Comparison\nWrap items you do not want to compare with a DirItem. When SkipComparison is set to true, the item will only be checked for existence. The property is recursive so if the item is a Dir, all items under that dir will be checked for existence only. DirItem should generally be used only for InMemory representations and can be used to wrap anything (Dirs, files, objects) except the top level Dir. If there is a demand for it, in the future, the files under a Dir can be marked to skip existence check with a separate flag. \n2 File Retention\nThe file retention behaviour is controlled by the EV DNX_TEST_SAVE_FILES. There are three modes, All, None and Default. \nWhen all is specified, all files during testing are saved to the test output directory regardless of whether the test passed. This is the space consuming but will retain all the files used during testing. When None is specified, the test output directory is deleted after each collection has run regardless if they pass. This will not use space but will not retain information for analysis. The default behaviour, when unspecified, saves the files used during tests that failed. This is achieved by calling TestUtils.CleanupTestDir as the last line in your test. This still allows the debugging of failed tests but prevents over-usage of space.\n3 Runtime specification\nInstead of using the runtimes specified contained in DnxSdks or the like, override the runtime used for testing the the EV DNX_TEST_RUNTIMES. Runtimes are specified by the format flavour-os-arch and are delimited by ;. For example clr-win-x86;coreclr-win-x64;mono is a valid setting. Note that mono does not require os and arch specifications. This is mostly used for selecting a specific runtime during debugging to reduce the total runtime and Debugger.Launch() triggers.\n4 Tracing @dougbu \nAll outputs from tests should be written via the TestLogger. The verbosity will be controlled by DNX_TEST_TRACE (and DNX_TRACE for all the outputs in dnx itself). When the variable is set to \"1\", the TestLogger will output to console otherwise all test outputs will be suppressed. \nExample output:\n1  Test Information: Begin test: Microsoft.Dnx.Testing.SampleTests.DnuCommonUtilTestsFailTest\n2  \n3  Test Information: Running: cmd /C \"\"C:\\Users\\johluo\\.dnx\\runtimes\\dnx-coreclr-win-x64.1.0.0-dev\\bin\\dnu.cmd\" restore \"pathToNowhere\" \"\n4  Test Information: Command Output:\n5  \n6  {DNX stdout}\n7  \n8  Test Error: Command Error:\n9  \n10 {DNX error}\n11 \n12 Test Information: Completed test: Microsoft.Dnx.Testing.SampleTests.DnuCommonUtilTests.FailTest\n13 \n14   Finished:    Microsoft.Dnx.Testing.SampleTests\n15 === TEST EXECUTION SUMMARY ===\n16    Microsoft.Dnx.Testing.SampleTests  Total: 8, Errors: 0, Failed: 0, Skipped: 0, Time: 0.937s\nLines 4 - 10 will not be displayed if the dnx command succeeded. Lines 1 - 14 will not be displayed if DNX_TEST_TRACE is not set. Line 1 and 12 help indicate which tests are running and when they begin or end.\n5 Test Folder structure\nDummy projects/solutions for testing should be placed in {Root}/misc/. The test output directory is {Root}/artifacts/TestOut/. Under the test output, each test method run will store its files in {test class}.{test method}/{runtime}.\n6 Constants\nCommonly used constants are located in TestConstants.cs and EVs for used by the testing infrastructure are prefixed by DNX_TEST_ and are stored in TestEnvironmentNames.cs.\n. merged to dev\n. moved to first comment\n. merged to dev\n. cc @troydai @anurse @davidfowl @moozzyk \n. merged to dev\n. Looks good to me\n. Open a new issue to track the renaming? It's a minor issue so other than that :shipit: \n. For the current tests that assert exit code is not 0, can we make it more specific and assert that they are equal to 1 where appropriate? I was trying to do this previously but we had a mix of -1 and 1 then.\n. Also, should we just go ahead and make dnu consistent as well? \nE.g. https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Tooling/ConsoleCommands/BuildConsoleCommand.cs#L49\nSame with PackConsoleCommand and PublishConsoleCommand\n. I think they are being returned as exit codes:\n\nIt's mostly for consistency, we don't consume these error codes anywhere.\n. Not sure what has happened with travis but the Linux run seem to error due to timeout very frequently. It usually takes 2-3 tries to get a success.\n. Not sure what has happened with travis but the Linux run seem to error due to timeout very frequently. It usually takes 2-3 tries to get a success.\n. cc @anurse\n. cc @anurse\n. Travis is passing, pinging. @troydai @anurse @moozzyk . \n. Travis is passing, pinging. @troydai @anurse @moozzyk . \n. Note that this probably conflicts with #2865 since I renamed a few files. I'll fix that in another commit after that PR is merged.\n. Note that this probably conflicts with #2865 since I renamed a few files. I'll fix that in another commit after that PR is merged.\n. @davidfowl unfortunately yes. Unless we want to do something during test discovery.\n. @davidfowl unfortunately yes. Unless we want to do something during test discovery.\n. pinging again @troydai @moozzyk @anurse @davidfowl \n. pinging again @troydai @moozzyk @anurse @davidfowl \n. merged to dev\n. merged to dev\n. looks good :shipit: \n. looks good :shipit: \n. Related to #2853 \nThe issue is Microsoft.Dnx.ApplicationHost/Program.cs#L234 where we only suppress ICompilationExceptions if they are wrapped by FileLoadException or FileNotFoundException. In this case when the assembly was not found, the outer exception was the ICompilationExceptions.\nWhat we need is something like\n```\ncatch (Exception ex)\n{\n    if (ex is ICompilationException)\n    {\n        throw SuppressStackTrace(ex);\n    }\nif (ex.InnerException is ICompilationException)\n{\n    throw SuppressStackTrace(ex.InnerException);\n}\n\nif (ex is FileLoadException || ex is FileNotFoundException)\n{\n    ThrowEntryPointNotfoundException(\n        host,\n        applicationName,\n        ex.InnerException);\n}\n\nthrow;\n\n}\n```\n. Related to #2853 \nThe issue is Microsoft.Dnx.ApplicationHost/Program.cs#L234 where we only suppress ICompilationExceptions if they are wrapped by FileLoadException or FileNotFoundException. In this case when the assembly was not found, the outer exception was the ICompilationExceptions.\nWhat we need is something like\n```\ncatch (Exception ex)\n{\n    if (ex is ICompilationException)\n    {\n        throw SuppressStackTrace(ex);\n    }\nif (ex.InnerException is ICompilationException)\n{\n    throw SuppressStackTrace(ex.InnerException);\n}\n\nif (ex is FileLoadException || ex is FileNotFoundException)\n{\n    ThrowEntryPointNotfoundException(\n        host,\n        applicationName,\n        ex.InnerException);\n}\n\nthrow;\n\n}\n``\n. sigh... we just did a rename, but okay we'll do that another time. In terms of this PR, :shipit:\n. sigh... we just did a rename, but okay we'll do that another time. In terms of this PR, :shipit:\n. One small content but otherwise LGTM\n. I'm going to assume the test cases are appropriate though I'm not an expert. Other than that :shipit: \n. This also occurs for other restore failures such as when ambiguous projects are created. For example after creating the wrap project in #2917, restoring the original project will cause the following output\n![image](https://cloud.githubusercontent.com/assets/2030323/10318406/163d2f70-6c1e-11e5-9b6f-fa1b6cacce15.png)\n...\n![image](https://cloud.githubusercontent.com/assets/2030323/10318417/33479402-6c1e-11e5-98d5-d0873f065a35.png)\n. Note that maybe this is because there is no defaultglobal.json` for project generated by yeoman?\n. In fact it seems as if those options are not even forwarded properly:\n\nI moved one of required packages to a local directory packages and it was not picked up even if I specified the --packages option.\n. In fact it seems as if those options are not even forwarded properly:\n\nI moved one of required packages to a local directory packages and it was not picked up even if I specified the --packages option.\n. It seems like only the folders of the packages required by dnx451 are being cleared by publish. Publish does not nuke the entire packages folder.\n. It seems like only the folders of the packages required by dnx451 are being cleared by publish. Publish does not nuke the entire packages folder.\n. I'm not sure if checking in *.nupkg* into misc for use in tests is a good idea and if not, I can just create test package on the fly. I didn't since it took extra steps in terms of pack, package add, which are not really relevant to the what the test is for.\n. I'm not sure if checking in *.nupkg* into misc for use in tests is a good idea and if not, I can just create test package on the fly. I didn't since it took extra steps in terms of pack, package add, which are not really relevant to the what the test is for.\n. I have the fix in #2932 but the test hanged on linux again :astonished: :trollface: \nlooks like the DTH tests didn't even get a chance to start.\n@troydai @pakrym \n. I have the fix in #2932 but the test hanged on linux again :astonished: :trollface: \nlooks like the DTH tests didn't even get a chance to start.\n@troydai @pakrym \n. Note that if you publish without restoring, no lock file will be generated for the main project and no pruning will occur.\n. Note that if you publish without restoring, no lock file will be generated for the main project and no pruning will occur.\n. ping @davidfowl @moozzyk  @troydai \n. ping @davidfowl @moozzyk  @troydai \n. ping @moozzyk @anurse @troydai @davidfowl \n. ping @moozzyk @anurse @troydai @davidfowl \n. Why is this needed? The standard output and standard error should be logged by the TestLogger at https://github.com/aspnet/dnx/blob/dev/test/Microsoft.Dnx.Testing.Framework/Exec.cs#L98-L99\n. Why is this needed? The standard output and standard error should be logged by the TestLogger at https://github.com/aspnet/dnx/blob/dev/test/Microsoft.Dnx.Testing.Framework/Exec.cs#L98-L99\n. :shipit: when travis passes. Though this is going to create duplicated output on local runs when DNX_TEST_TRACE is set I guess the benefits we get on TeamCity is worth it.\n. :shipit: when travis passes. Though this is going to create duplicated output on local runs when DNX_TEST_TRACE is set I guess the benefits we get on TeamCity is worth it.\n. looks good :shipit: \n. looks good :shipit: \n. I agree, this is a minor change that can wait for rc2. Can you create another pull request for dev instead?\n. I agree, this is a minor change that can wait for rc2. Can you create another pull request for dev instead?\n. Probably some issues with the feeds previously. Whatever the reason, it seems to be fixed now.\n. Probably some issues with the feeds previously. Whatever the reason, it seems to be fixed now.\n. :shipit: \n. :shipit: \n. Should have been fixed in #2656 I'll take a look why this is happening.\n. Should have been fixed in #2656 I'll take a look why this is happening.\n. @GuardRex what is in your project.json? \nWe ignore global.json by default if it's in your project directory. However, if your project.json has a non-empty section for publishExclude it will overwrite our defaults and publish any existing global.json. If you don't have a section for publishExclude, please attach your project so I can debug further.\nIf you did have a non-empty section for publishExclude, either add global.json to it or remove it completely so the file is ignored by default.\n. @GuardRex what is in your project.json? \nWe ignore global.json by default if it's in your project directory. However, if your project.json has a non-empty section for publishExclude it will overwrite our defaults and publish any existing global.json. If you don't have a section for publishExclude, please attach your project so I can debug further.\nIf you did have a non-empty section for publishExclude, either add global.json to it or remove it completely so the file is ignored by default.\n. I believe the OriginalString is only used for storing the unnormalized version number and was only used for determining whether normalization occurred. From our previous conversation, this functionality will no longer be needed so isn't this field now redundant?\n. version.Replace(\" \", \"\") was originally passed in to be stored as OriginalString, which I think is redundant? I removed the constructor that required the OriginalString and removed this argument here. version is not used in the function after this point so it should be safe.\n. Not sure why but whenever I open VS, it automatically makes this change. I will revert this by hand.\n. @davidfowl prefers keeping it under \\test.\n. Right... oops\n. Good idea. Done.\n. Yup, that's better.\n. Which ones are you referring to? The only similar helper I found was in the current CommonTestUtils project but I believe the idea is to replace the current test infrastructure so we can't use that one.\n. Yup. \n. Right. I was thinking of adding this in another PR. I was going to take a look at whether to implement this using environment variables, method arguments or some other method. Also what would be a good default value?\n. My guess is that Wei had this to allow for flexibility in terms of file read behaviour. However, I haven't seen any scenarios where this is required yet. For now I'll remove it and maybe if there is a need for it in the future I'll add it back in.\n. I'm not sure why Wei implemented it this way but if I were to guess, I would say that this just ensures that the constructor is only called once. An alternative would be to use a private static flag and checking it inside a non-static constructor. Is that better?\n. I don't think these tests should be official for now. Instead these should serve as a template for porting over the existing set of tests. These should be removed once the old tests are ported over.\n. Are there any important ones that I should look into right now specifically? I'm not too familiar with all the options and arguments for every command so I was thinking that I will make changes whenever the need arises when porting new tests?\n. Yup I fixed this in an upcoming commit.\n. I didn't find a suitable helper in the current code base. There is something in DnuEnvironment.cs but that seems to be ifdef'ed out for only DNXCORE50 so I'm not sure if that's a good idea.\n. I think it's cleaner to do [\"Scripts/bootstrap.js\", \"Scripts/jquery.js\"] = Dir.EmptyFile for example to create multiple empty files.\n. It makes sense especially since nodes are represented as Dictionaries anyways. Not sure why the conversion to IEnumerable<> would ever make sense.\n. It's not, especially since noSource is defaulted to false. I can imagine requiring this default argument for options we want to default true but this is not the case here.\n. I certainly can. In fact I think the check would also be good to have in Dir. Note that usually a test should not need to create a Solution object itself and should use GetSolution() to grab a pre-constructed solution instead. Though I suppose a test could theoretically construct a solution using Dir (like in DnxPublishTests) and then create a Solution object to represent it, it is sort of redundant in that scenario.\n. Got it.\n. Ok\n. I'm going to add this as a lazy type.\n. Done using ICollectionFixture\n. I think my vim auto added a new line at the end of the file which was missing. What's the best practice here, new line or no? I will scan the other files for this later.\n. VS CodeLens is really throwing off my spacing...\n. Yup, missed this one when cleaning up.\n. The current implementation requires two copies of the solution. One is used to build the packages and created a feed. The other copy then uses this feed when restoring the SimpleChain project. It might be possible to simplify this though, I'll look into it.\n. Just to check. I see other files have all Microsoft.Dnx.* after System.* is this the convention?\n. oops, forgot to add these in after relocating tests from the samples directory\n. yup\n. done\n. added\n. For now, just add the argument for additionalArguments for each method so the caller can specify additional arguments. I think this is what Victor meant.\n. The util is marked as internal so I don't think tests have access to them? Seems like tests are treated as \"different\" programs.\n. Got it\n. Good idea\n. I'll open another issue for this to deal with the options required. It will include this, how files are saved and possibly more. See issue #2664.\n. Yup\n. Done.\n. Yup\n. This will be done when I deal with all the environment variables in another Issue\n. Do you mean in the else block?\n. I'm a little confused. Is the expected behavior \n1 use mono runtime for mono environment\n2 use clr x86/x64 for all other environments\n?\n. There shouldn't be an issue since env is a dictionary itself and cannot contain duplicate keys. But to make it more consistent would processStartInfo.Environment[pair.Key] = pair.Value; be better?\n. These temporary folders are created under the dnx root so they should not get into trouble with var - private/var on Mac\n. Yup good idea. I just checked all the files again and all usings are sorted and none of them are redundant.\n. Will do. I'll also check for other occurances of exceptions.\n. Cool\n. I see. Just to make sure, dnx is an executable whereas dnu is a script so this fix should only be made here. Also, should IsMono be used instead of IsWindows as was the case for grabbing runtime sdks? Isn't mono unsupported on Windows so why did we bother with that?\n. DNX_HOME does not exist on non-Windows platforms so we need to use HOME instead.\n. @davidfowl The only issue with internalizing Project resolver like this is that in case these files changes inside Tooling in the future, we'll need to duplicate it here as well. This may become a headache later?\n. I'm checking for file content here instead of just existence to make sure that the values inside the original global.json is copied over. Unfortunately this makes the test very long since the contents of all files must be defined.\n. add using Runtime and simplify name, same with ProjectResolver.\n@davidfowl should I change the version inside Tooling as well?\n. Nevermind, Tooling requires this to differentiate against the namespace Microsoft.Dnx.Project.\n. will remove\n. I should remove this random spacing change\n. It seems like all the files under Tooling/Nuget/ContentModel don't have copyright. Is this intentional? If not, I can just add them here. cc @davidfowl @anurse \n. I've seen some discrepancies with error codes. In the application host I see we return -1 on errors. Elsewhere I've seen 1. Is there a reason to use one or the other? @davidfowl @anurse \n. @anurse This was done to mimic ReportFactory.cs in tooling where ansiconsole was used. I thought that maybe color options were only available for windows environments?\n. Why are you using the copy folder from CommonTestUtils instead of the new infrastructure?\n. This also exist in the new infrastructure.\n. Talked to @BrennanConroy and this should be fine.\n. I'm going to leave the -1 return codes for now just for consistency. The -1 should probably be all changed in one batch.\n. tracking in #2822 \n. This is a copy of Logger from Runtime. I'm creating a new one here so that the logging from tests can be controlled by a separate environment variable DNX_TEST_TRACE. We can also potentially choose to use Debug or Trace instead of Console.\n. I've added these tests for testing what I'm working on in the testing infrastructure. Some of these will eventually be removed or moved to something like Testing.Framework.Tests to prevent regression in the test infrastructure.\n. setter might not be necessary\n. of course!\n. yup\n. Actually I think I should probably not use an argument exception here since _token is technically not passed in to that method but is instead a member variable, would InvalidOperationException be better?\n. This is very similar to what TestUtils.CreateLocalFeed is doing in the new infrastructure. See if you can use it. I believe the only missing capability is specifying a dnu pack configuration.\n. use string interpolation?\n. I can potentially create a new exception type and handle it in the catch of Main instead of ExecuteMain. That's a lot of code to handle one scenario and seems a little heavy handed though.\n. I believe the RuntimeBootstrapper currently prints out the exceptions AND their stack traces. We want to hide the stack trace for non-user code and therefore will need to differentiate between our exceptions and user exceptions. This will probably require our own subclasses of Exception.\n. something like ex.Data[\"suppressStacktrace\"] = true? And check for this in the RuntimeBootstrapper?\n. Do you mean the CleanUpTestDir() function? If so, that was intentional since cleanup should, by default, only occur when the test passed. Failed tests should retain the files used during the test. I know it's kind of hacky but the only way I have right now of telling whether the test passed is if the last statement is reached. Unless I want to  extend the xUnit test runner class that is.\n. This is the correct exit code, we'll change all other instances to 1 in #2707.\n. Going to change this since @davidfowl didn't like this. We'll throw here and catch/handle exception suppression in RuntimeBootstrapper.cs instead.\n. We could for compilation exceptions, but historically I've seen us only catching these two types of exceptions. e.g. 196e111cc8e42cd79f616a962b86425b558512a6.\nAlternatively, we can catch FileNotFoundExceptions for ICompilationException and EntryPointNotFoundException then catch generic Exception only for ICompilationExceptions.\n. Noted.\n. Yes, I checked with @davidfowl about it.\n. Missed the Assert.NotEqual(0, exitCode); on line 487\n. DeleteFolder is not in the new framework, so the one from the old one is used. I'll probably add it in a future change.\n. I will need to make a new commit to port over the changes from AppHostTests.cs to AppHostTests.Old.cs\n. Do we need to delete it from old tests?\n. Can't use the dispose method since I need to name of the test method in the clean up. This is run at the end of each test to delete any files copied from misc during the test. The coming up test can clean it but this cleans it eagerly.\n. The default behaviour is to keep the files for reference if the test failed. See my comment on file retention in #2823 \n. As soon as possible?\n. I believe it is required for the DnxRuntimeFixture. Which is required for the old tests.\n. Right\n. We want to only call this clean up when the test passed. The issue with the using pattern is that dispose is called at the end of the test regardless of whether the test passed or failed. In fact, there isn't a good way of detecting this as part of xUnit. Hence the not so ideal way of cleaning up.\n. This makes sense, I'll make a point for it in #2825 . We should revisit this implementation of this feature in the future but not in this PR.\n. Since this utility actually restores the solutions I would name it something like RestoreSharedSolution\n. Instead of TestSolutions maybe SharedSolutions?\n. use Assert.NotEmpty for this?\n. Limits the number of messages to be collected/drained. This speeds up the tests.\n. Right, Please add a new test in DnuPackTests.cs and remove this one.\n. nit: use var instead of string\n. Instead of collecting files to keep, this collects TFMs. An alternative is to compare the lock files of the original project and the published output. Or some kind of fuzzy best match to figure it out from the TFM of the published lockfile.\n. May want to consider pruning unused runtimes, especially after #2628.\n. maybe .pdbs as well?\n. Currently the only recognized but potentially indirectly referenced TFM. Note that currently xamarinmac20 and xamarinios10 are common unrecognized TMFs and will not be pruned.\n. Which part is strange?\n. So we should compare the lockfile from the publish output to the lockfile from the original project? And find the difference between the restored packages and packages that are required for publish?\n. I'm probably missing something here but I couldn't figure a way of using the lock file contents.\n1. The lock file in the publish output only lists the files required by the frameworks specified during publish in the targets section. There is a libraries section which lists all the files in the package. However, there are files there that are used but not listed in targets like runtimes/* so I can't just prune the difference between the two sections.\n2. I can check the difference between the targets section of the lockfiles in the project directory and the publish output. This has two problems. One, if you publish for the same frameworks you stored with, which I assume is the most common usage, nothing will be pruned. Two, even if you publish for one of the many frameworks you restored with. Pruning will miss such a large number of files, it'll almost become unnecessary. \nFor example, say you restored the System.Text.Encoding package for dnx451 and dnxcore50 and you publish for dnx451 only. The difference between the lockfiles' targets section will be only lib/dnxcore50/*.dll. Not only will this miss tons of unused frameworks like lib/(MonoAndroid10|xamarinios10|net45|...)/*.dll, it will also miss files that never appear in the targets section like xml, sha512, nupkg.\nHence I tried a compromise where instead of white listing a set of files and delete the rest, we black list a smaller set of files to prune that we are confident that won't be used.\nBut I'm assuming you still prefer option 2?\n. Use string interpolation\n. The class passed to CleanUpTestDir must match with the test class.\n. Generic must match test class.\n. That's something I added previously. If you enable DNX_TEST_TRACE it will print out Test Information: Begin test/End test: <test>. This is sort of redundant now given we use the -verbose flag for xunit which prints out the beginning of the test\n. will remove spacing\n. Maybe we should remove the return value for PrunePackages. There are no cases for which we want to report a non-successful pruning that stops further publishing progress. If there are problems, such as no lock file in the main project, just don't prune anything.\n. I'm assuming all package dependencies have a hash and package file. If this is not a fair assumption I'll check for existence of these files before adding them to filesToRemove\n. why not just use == instead of string.Equals?\n. Only pruning by TFM. Maybe we should prune by RID if one is specified as well?\n. You could have project dependencies which do not have any hash/package files. I'm assuming all package dependencies have these.\nThe main project when published with --no-source is considered a package and in this case the package files should be preserved no?\n. Difficult to do lockfile based RID filtering for now since the published project is not restored with the runtimes specified by publish. Could potentially revisit this once publish is refactored to be based on lock file.\n. nit: generally we use string interpolation in the style of https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.ApplicationHost/DefaultHost.cs#L73 since it avoids creating a new StringBuilder object.\n. two nits:\n1. Use string interpolation\n2. specify the name of the option parameters like at https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Dnx.Compilation.CSharp/RoslynCompiler.cs#L343\n. Should we use something like InvalidOperationException instead of the generic Exception? \n. nit: sort usings\n. same nit: formatting\n. ",
    "apawsey": "Hi guys,\nCan we actually run a different script depending on build configuration or architecture now then?  If so how?\nThanks.\n. ",
    "dnfclas": "@Tragetaschen, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @BrennanConroy, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @BrennanConroy, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @BrennanConroy, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @ChengTian, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @BrennanConroy, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @moozzyk, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @ChengTian, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @BrennanConroy, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @BrennanConroy, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @troydai, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @troydai, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @ChengTian, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @anurse, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @juanfra684, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @juanfra684, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @ChengTian, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @victorhurdugaci, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. @troydai, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @rossipedia, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. @ChengTian, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @akoeplinger, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. @davidfowl, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @henkmollema, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @jasonwilliams200OK, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @xPaw, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @xPaw, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @kirthik, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @ajaybhargavb, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @kirthik, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @MisterJames, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @Jetski5822, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @mkosieradzki, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @JunTaoLuo, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @JunTaoLuo, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @jmloeffler, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @Maxwe11, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @Maxwe11, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @kirthik, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @kirthik, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @JunTaoLuo, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @muratg, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @anurse, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @anurse, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @anurse, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @moozzyk, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @troydai, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @grahamehorner, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @Kagamine, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @pakrym, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @pakrym, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @dagood, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. @dagood, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @pakrym, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @pgrudzien12, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @dagood, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @pakrym, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @cesarbs, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @cesarbs, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @cesarbs, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @cesarbs, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @cesarbs, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @cesarbs, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @cesarbs, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @vlesierse, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @cesarbs, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @cesarbs, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @pgrudzien12, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @PMoneda, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @schotime, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @khellang, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @couven92, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @couven92, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @jamesqo, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @imiuka, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @mconnew, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @ryanbrandenburg, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @stuartleeks, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. Hi @Auxon, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @joakimskoog, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. \n@chuckbeasley,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla2.dotnetfoundation.org.\nIt will cover your contributions to all .NET Foundation-managed open source projects.\nThanks,\n.NET Foundation Pull Request Bot. ",
    "koistya": "First I tried it with mono v3.2.8 then installed the latest mono v3.10.0 but still having the same issue.\n. sh\n$ gacutil -l\nThe following assemblies are installed into the GAC:\nI18N, Version=4.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756\nI18N.West, Version=4.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756\nMono.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756\nSystem, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\nSystem.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\nSystem.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\nSystem.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\nNumber of items = 7\nI'm wondering, why there is no System.Core in the list...\n. ",
    "selimserdengecti": "Hi @koistya ,\nit seems like you install mono runtime. You have to install mono-devel package version 3.4.1 or later.\nYour linux distribution may not serve apropriate version so you can install from mono project website.\n. ",
    "hfjallemark": "That the directory layout (approot and wwwroot) seems to be incompatible with the way Azure Web Sites works with multiple applications.\nMore info here:\n- https://github.com/aspnet/Home/wiki/Deploy-an-AspNet-vNext-application-to-Microsoft-Azure-websites\n- http://blogs.msdn.com/b/tomholl/archive/2014/09/22/deploying-multiple-virtual-directories-to-a-single-azure-website.aspx\n. So what directory structure should be published? When publishing using Visual Studio 2015 it replaces the approot of the first published application when publishing the second application.\nIs this a problem with VS or MSBuild?\n. Before ASP.NET 5 it was done just like described in this article. This worked when everything was deployed within one directory (content files and bin folder together).\nNow they are deployed into two separate folders. The content files (wwwroot) ends up where they should (in the subfolder defined in the publish settings) but the approot ends up in the root, hence being replaced every time a new application is published.\n. Thanks. Let me know if I can assist in any way.\n. Any updates on this?\n. ",
    "rubenprins": "@davidfowl, Any updates on this? Not being able to publish multiple applications to a single website by default (IIS or Azure) is pretty much a deal breaker for us.\nThere are undoubtedly many possible workarounds/hacks for this, but when you've got to manage 200+ applications under just a couple of websites -- like we do (mostly small-ish applications) -- this will get annoying really soon. And a dedicated website for each application is a no-go area. (Not that we're going to \"upgrade\" these applications to v5 any time soon (or at all) -- that would be a Herculaneum effort indeed.)\n(This has never been a problem for ASP.NET v1-4 because it bundles the application from the WEB application's root folder, rather than insisting on creating a hierarchy next to it. I understand the basic reasoning behind it, but it simply doesn't work for subapplications.)\n. @crokusek, Resources.Designer.cs will be rewritten by Visual Studio the moment you edit any resource item. So this workaround will only work when you stop maintaining your resources, or when you constantly roll back any change VS makes to that particular line.\nIt's a highly brittle workaround until the CLI team fixes the assembly resolution problems for the venerable ResourceManager class.\n@davidfowl, you mentioned \n\nthe issue will fix itself when we move to the cli. \n\nThere are several issues open on this bug, and they all point back to this one, but no indication whatsoever whether this is even being investigated. And since this showstopper is labelled as Backlog (as is https://github.com/dotnet/cli/issues/550), I can only assume it will not be fixed for v1; but I'd love to be corrected.\n. ",
    "pksorensen": "Just found this issue after creating my SO question: http://stackoverflow.com/questions/34784391/deploying-aspnet5-apps-to-virtual-directories-on-azure-websites\n. Ye. the hardest thing about it now is the tooling. The default tooling in vs15 currently generates the output I showed. I assume these will align over time. \nI will give your layout a try manual and confirm that it works with two apps. \nMight actually be able to get default tooling to work also now that I think about it. I will give a update with a few more experiments when off the clock.\n. I actually believed I got it working.\nhttps://twitter.com/pksorensen/status/687675626690625536\nbut then I could not reproduce it and found out that the only reason app1 and app2 worked was because app0 failed.  \n```\n       \n3005\nAn unhandled exception has occurred.\n1/14/2016 4:28:22 PM\n1/14/2016 4:28:22 PM\n9e154d9858c44a6181df56b015846c1c\n1\n1\n0\n/LM/W3SVC/1711399963/ROOT-4-130972614840190318\n\n/\nD:\\home\\site\\wwwroot\\app0\\\nRD0003FF1A2328\n\n1488\nw3wp.exe\nIIS APPPOOL\\wildlifedemo\nHttpException\nServer cannot access application directory 'D:\\home\\site\\wwwroot\\app0\\'. The directory does not exist or is not accessible because of security settings.\n   at System.Web.HttpRuntime.EnsureAccessToApplicationDirectory()\n   at System.Web.HttpRuntime.HostingInit(HostingEnvironmentFlags hostingFlags, PolicyLevel policyLevel, Exception appDomainCreationException)\n\nhttp://wildlifedemo.azurewebsites.net/\n/\n77.75.160.102\n\nFalse\n\nIIS APPPOOL\\wildlifedemo\n15\nIIS APPPOOL\\wildlifedemo\nFalse\n   at System.Web.HttpRuntime.EnsureAccessToApplicationDirectory()\n   at System.Web.HttpRuntime.HostingInit(HostingEnvironmentFlags hostingFlags, PolicyLevel policyLevel, Exception appDomainCreationException)\n\n\n```\nI killed the w3wp process and app0 started working but then app1 and app2 keeps saying The page cannot be displayed because an internal server error has occurred. and I havent been able to get it out in the logs why.\nSo, i followed your folder setup and could not get it working with a simple hello world app.\n. detailed logging indicated dublicate of platformhandler registration.\nGot things working with\n<handlers>\n      <remove name=\"httpplatformhandler\" />\n      <add name=\"httpplatformhandler\" path=\"*\" verb=\"*\" modules=\"httpPlatformHandler\" resourceType=\"Unspecified\" />\n    </handlers>\n. I tried to include most information at the answers here:\nhttp://stackoverflow.com/questions/34781561/run-two-different-asp-net-5-applications-under-the-same-azure-web-app/34791708#34791708\nand here:\nhttp://stackoverflow.com/questions/34784391/deploying-aspnet5-apps-to-virtual-directories-on-azure-websites\nCould you read those first and then ask again if its still unclear - and theres nothing wrong with asking again, just want to make sure that you seen the content there first.\n. I have not checked if anything new or better is around, what I did back then still works for me and i still virtual applications by dropping dotnet core apps in separate folders.. ",
    "iberodev": "Poul, did you get it working? what web.conf is that where you remove the httpplatformhandler?\nSay I have 2 projects that want to host under the same website. \nIn Azure Virtual Applications and directories\n/            site\\wwwroot                Application\n/app2    site\\wwwroot\\app2       Application\nAs you mentioned the hierarchy created by default when deployed in Azure is:\nwwwroot\n  |--web.conf (this is the web.conf for the main project, the root one)\n  |--approot\n  |--app2\n       |--web.conf (this is the web.conf for the app2, the virtual directory one)\nWhere do I have to remove the httpplatformhandler (if needed)?\nDo I have to create another virtual directory for the main project app1?\nI am a bit confused with this :-)\nUPDATE: I actually found your answer at http://stackoverflow.com/a/34799414/2948212\nThank you\n. ",
    "ttugates": "I understand this is closed..  But as of Nov 17', is the only way too accomplish publishing multiple .Net Core apps to Azure Virtual Directories entail using the solution @pksorensen and @davidfowl give.  And not using VS20017's Publish tooling?. Thanks for super fast responses to both of you..  I started by trying the original article and received an error on publish.  Don't recall details..  But found this..  After work tonight I will try again and let you know.. ",
    "Jetski5822": "Using the languages section?\n. Yeah that's what I am talking about, if you specify a Roslyn one to be used, both the Roslyn and DTH one are registered. in the order Roslyn, DTH. When they come to be resolved, the last one is taken effectively rendering the languages one mute.\n. yeah, I kind of agree, you have packages.config all lowercase for example.\n. What would you suggest using instead to load a project on the fly that is not referenced?\n. Darn, I need it to support module loading in Orchard :( - but thank's for the heads up.\n. One thing I didnt mention is that when I run this through Kestrel from the command line, the code works fine. It only fails when F5ed through Visual Studio.\n. Hmmm not sure I like that change\n. ",
    "RouR": "It is default Jenkins installation. I will try to run it from regular user account\n. ",
    "Xiaohongt": "@victorhurdugaci , in this branch I just re-run \"build.cmd dev-install\" couple times, but didn't change anything, every time I see klr.core45.managed.dll, klr.host.dll, Microsoft.Framework.Runtime.dll, Microsoft.Framework.Runtime.Loader.dll are still re-compiled.\n. It is not clear that here incremental compile is for project K app.\n. ",
    "filipw": "This is using 1.0.0-beta1\n. all those things are defaults from VS2015 MVC template\nkpm is 1.0.0-beta1-10611\nkvm is also 1.0.0-beta1, fresh from kvm upgrade.\nThe same error happens for both KRE-CoreCLR-x86.1.0.0-beta1 and KRE-CoreCLR-amd64.1.0.0-beta1\nIs there anything else?\n{\n    /* Click to learn more about project.json  http://go.microsoft.com/fwlink/?LinkID=517074 */\n    \"webroot\": \"wwwroot\",\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"EntityFramework.SqlServer\": \"7.0.0-beta1\",\n        \"EntityFramework.Commands\": \"7.0.0-beta1\",\n        \"Microsoft.AspNet.Mvc\": \"6.0.0-beta1\",\n        //\"Microsoft.AspNet.Mvc.WebApiCompatShim\": \"6.0.0-beta1\",\n        \"Microsoft.AspNet.Diagnostics\": \"1.0.0-beta1\",\n        \"Microsoft.AspNet.Diagnostics.Entity\": \"7.0.0-beta1\",\n        \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-beta1\",\n        \"Microsoft.AspNet.Security.Cookies\": \"1.0.0-beta1\",\n        \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta1\",\n        \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta1\",\n        \"Microsoft.AspNet.StaticFiles\": \"1.0.0-beta1\",\n        \"Microsoft.Framework.ConfigurationModel.Json\": \"1.0.0-beta1\",\n        \"Microsoft.Framework.CodeGenerators.Mvc\": \"1.0.0-beta1\",\n        \"Microsoft.Framework.Logging\": \"1.0.0-beta1\",\n        \"Microsoft.Framework.Logging.Console\": \"1.0.0-beta1\",\n        \"Microsoft.VisualStudio.Web.BrowserLink.Loader\": \"14.0.0-beta1\"\n    },\n    \"commands\": {\n        /* Change the port number when you are self hosting this application */\n        \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5000\",\n        \"gen\": \"Microsoft.Framework.CodeGeneration\",\n        \"ef\":  \"EntityFramework.Commands\"\n    },\n    \"frameworks\": {\n        \"aspnet50\": { },\n        \"aspnetcore50\": { }\n    },\n    \"exclude\": [\n        \"wwwroot\",\n        \"node_modules\",\n        \"bower_components\"\n    ],\n    \"packExclude\": [\n        \"node_modules\",\n        \"bower_components\",\n        \"**.kproj\",\n        \"**.user\",\n        \"**.vspscc\"\n    ],\n    \"scripts\": {\n        \"postrestore\": [ \"npm install\" ],\n        \"prepare\": [ \"grunt bower:install\" ]\n    }\n}\n. oh and Roslyn packages, which seem to be the offending ones, are:\nMicrosoft.CodeAnalysis.CSharp (1.0.0-beta1-20141031-01)\nMicrosoft.CodeAnalysis.Common (1.0.0-beta1-20141031-01)\nSystem.Collections.Immutable (1.1.32-beta)\nSystem.Reflection.Metadata (1.0.17-beta)\n. Yeah it works now, no worries\nOn Dec 21, 2014 5:26 PM, \"Pranav K\" notifications@github.com wrote:\n\n@filipw https://github.com/filipw , could you reopen the issue if\nyou're still seeing this? I'm going to close this as no-repro\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/KRuntime/issues/951#issuecomment-67775548.\n. thanks, Mono upgrade indeed fixed it. Feel free to close it \n. \n",
    "ToddThomson": ":+1: This would be a convenience and a time saver for me. I very much would like to make the move to EF7, but all the pieces I need are not all there and from all indications ( the backlog ) it will be sometime before EF7 is ready to take over from EF6.\n. I also would like to know how to include content into a Nuget package built with dnu pack.\nSpecifically, I would like to include cshtml files. I have a asp.net 5 class library which contains MVC6 controllers and views ( the .cshtml file ).\n. MVC6 modules/components. The class library contains the controllers and services; the packaged content contains the area views. I've been breaking down large projects like this since the beginning of MVC ( although I had to copy the module views manually to ./areas ).\nThis may be doable right now by using the \"content\" property in project.json ( \"content\": [ ./areas/area-name// ). \nShould also be doable if dvu pack allowed for a .nuspec file.\n. @davidfowl What do you mean by \"This is bigger than including content...\"?\nIf I have a \"content\" property defined in my project.json and I perform a dnu pack or dnu publish --no-source then what is stopping the generation of a content folder being created in the nuget package? \n. With nuget 2 you can obviously add scripts, css ( and I assume most anything ) to an application by adding to \"Content\" in the nuget package. @davidfowl R U saying that in Nuget 3 that this is no longer the case?\nIf content ( from a nuget package ) is never going to copied into an ASP.NET 5 application then I would ask for the following: Have nuget add \"content\" into an application specific directory in the application, for example: \"nuget_components\". The folder in \"nuget_components\" would be a component name + a  unique package identifier. The package contents layout would be whatever the provider conceived of ( no restrictions ).\nWith this structure I could at have MVC6 controllers AND views ( layouts, etc ) added to the application in a no harm way. An addition to the gulp build pipeline or a view locator added to have the application use the new cshtml.\n. Coming back to this at Beta 8: I will use the precompiled view provider in MVC6 to package the views in modular MVC nuget packages. \n. ",
    "AlexGhiondea": "Ping.\n. We can test the before/after behavior for a compat path (one that is guarded by BinaryCompatibility). I don't have one in mind right now, but I will look into it.\n. Here is a repro you can use to test this change:\nhttps://gist.github.com/AlexGhiondea/8c87590d93616c8b26de\nThe expected behavior is that we throw an exception.\n. LGTM.\n. @davidfowl I guess #953 is now obsolete.\n. ",
    "gibeondev": "It hangs as the website can't be started anymore, those message the only error messages i got, I will provide screenshot later today to make the issue more clear once i have access to my pc where vs 2015 preview installed\n. ",
    "gibeon-andrew": "To reproduce:\n1. Put the dll like screenshot below (make sure you close vs 2015 preview after this step)\n\n1. Once you open vs 2015 preview, you will see error on references\n   \nWhen you press right click, add references, you will get this\n\n1. Now the website just hang with never ending waiting for localhost\n   \n2. For projects which doesn't use System.Data.SQLite.Core, no strange message \n   \n. good question, where can I find the error list ? it just say see error list\n. found it\n\n. Any workaround for this issue? where to put the native dll ?\n. hmm ok...\n. DllNotFoundException\n\n. ",
    "gusennan": "@gibeon-andrew 6 months later and I'm running into this same issue.  Were you ever able to resolve it?\n. ",
    "timothyclifford": "Similar issue here https://github.com/aspnet/Home/issues/327\n. ",
    "miyconst": "Same exception. :anger: \n. ",
    "ajinkya12": "Same Exception occurs(Visual Studio 2015). Where should I track the work around?\n. ",
    "RickStrahl": "@Praburaj - No the default KRE is a newer RC build. But in the VS project dialog I specifically pick the beta 2 runtime as I do for the Publish dialog. Nowhere do I specify that I want to run the RC builds and certainly not two different ones :-).\nTo be clear: This only happens if I do it from Visual Studio 2015 Preview. If I run kpm pack from the command prompt I get the version I specify only which is the correct behavior. It's only from within VS that the multiple runtimes show up. What I don't get is that the command line doesn't look much different other than it's explicitly running the older kpm out of the KRE folder where on the command line I'm running the latest kpm which would be from an RC build.\nI have newer versions of the KRE installed (RC builds), but I specifically wanted to install that version as it's the last one I have for Beta2. This version is set in all three projects that are part of the solution - nothing that I have in my projects (that I know of) points at the newer builds, so it's a bit of a mystery where those extra versions are coming from.\nI do have a lot of problems with kpm pack --override not clearing out old packages from the output folder either. At first I thought that maybe those versions are left overs, but even after explicitly deleting I see this behavior. \nFWIW, I noticed this when I was trying to publish an app to Azure. I noticed that it seemed to be taking FOREVER to get the files up to the server. Makes sense - it was sending three sets of KRE runtimes up which greatly increased the upload size.\nSide question: How does VS actually chose which runtime gets used if the versions between the publish dialog and the actual project targets don't match? ie. say I point at beta2 for the Publish dialog and have my project(s) point at RC1 builds? What is the expected behavior then? \nNote for the issue above this is not the case - I explicitly made sure all the versions match!\n. So, I'm looking at the temp.pubxml.user file and there's a bunch of funky stuff in there. Tons of different runtime versions for almost every file etc. etc:\n<File Include=\"approot/global.json\">\n      <publishTime>12/28/2014 23:33:22</publishTime>\n    </File>\n    <File Include=\"approot/packages/EntityFramework.Commands/7.0.0-beta2-11766/EntityFramework.Commands.nuspec\">\n      <publishTime>12/10/2014 11:39:36</publishTime>\n    </File>\n    <File Include=\"approot/packages/EntityFramework.Commands/7.0.0-beta2-11766/lib/aspnetcore50/EntityFramework.Commands.dll\">\n      <publishTime>12/10/2014 11:39:36</publishTime>\n    </File>\n    <File Include=\"approot/packages/EntityFramework.Commands/7.0.0-beta2-11803/EntityFramework.Commands.nuspec\">\n      <publishTime>12/14/2014 21:52:38</publishTime>\n    </File>\n    <File Include=\"approot/packages/EntityFramework.Commands/7.0.0-beta2-11803/lib/aspnetcore50/EntityFramework.Commands.dll\">\n      <publishTime>12/14/2014 21:52:38</publishTime>\n    </File>\n    <File Include=\"approot/packages/EntityFramework.Commands/7.0.0-rc1-11794/EntityFramework.Commands.nuspec\">\n      <publishTime>12/14/2014 21:52:13</publishTime>\n    </File>\n    <File Include=\"approot/packages/EntityFramework.Commands/7.0.0-rc1-11794/lib/aspnetcore50/EntityFramework.Commands.dll\">\n      <publishTime>12/14/2014 21:52:13</publishTime>\n    </File>\n    <File Include=\"approot/packages/EntityFramework.Commands/7.0.0-rc1-11854/EntityFramework.Commands.nuspec\">\n      <publishTime>12/18/2014 21:39:41</publishTime>\n    </File>\n    <File Include=\"approot/packages/EntityFramework.Commands/7.0.0-rc1-11854/lib/aspnetcore50/EntityFramework.Commands.dll\">\n      <publishTime>12/18/2014 21:39:41</publishTime>\n    </File>\n    <File Include=\"approot/packages/EntityFramework.Commands/7.0.0-rc1-11879/EntityFramework.Commands.nuspec\">\n      <publishTime>12/28/2014 11:34:10</publishTime>\n    </File>\n    <File Include=\"approot/packages/EntityFramework.Commands/7.0.0-rc1-11879/lib/aspnetcore50/EntityFramework.Commands.dll\">\n      <publishTime>12/28/2014 11:34:10</publishTime>\n    </File>\nI suspect this is what's pulling in the runtime versions - pulling anything that matches and is actually still installed on my machine. \nLooks like VS bug and more like kpm on its own is doing the right thing.\n. David - this is a great discussion because it points at some of the difficulties in figuring out how to find stuff.  How would you find out about how to manually instantiate ConfigurationBuilder for example? Is that even documented anywhere?\nAlso, I know I've been having a bit of trouble finding good examples and description of the process of how to hook up DI into your own components. If I create a component that I want to have participate in DI how do you set that app effectively? At the moment it looks the only way to figure this out is to look at examples in the source code, which is useful, but I think this could really use some formal documentation somewhere. Apologies if this exists somewhere - but I haven't been able to find it.\n. Updating to post-beta 7 DNX worked for me, but man that sucks.With the beta 7 release builds I had no luck.\n. ",
    "wenhx": "@Eilon yes, I think @anhp can read chinese, and I am trying test that is comment not supported chinese.\n. ",
    "anhp": "@wenhx,\nI can't read Chinese!\n. ",
    "TheDarkTrumpet": "That link isn't working for me...not sure it's going to work for anyone else either.  I tried projectk-tc.com and the rest as you had it and it still was a 404.\n. I actually checked out the source code for dnx, and am on the dev branch.  I followed the directions on https://github.com/aspnet/dnx, including the command to create the symlinks, and switched the environment to the dev environment.  I verified the same problem occurs.  I went into the build directory (where the symlinking was done to) and verified dnx was in there.  \nMacBookPro:HelloMvc dthole$ dnvm list\n'''\nActive Version              Runtime Location             Alias\n\n1.0.0-beta5-11400    mono    ~/.dnx/runtimes      default\n-    1.0.0-dev            mono    ~/.dnx/runtimes      mono-dev\n  '''\n  MacBookPro:HelloMvc dthole$ dnx . kestrel\n  System.InvalidOperationException: Failed to resolve the following dependencies for target framework 'DNX,Version=v4.5.1':\n  Kestrel 1.0.0-beta3\n  Microsoft.AspNet.Diagnostics 1.0.0-beta3\n  Microsoft.AspNet.Hosting 1.0.0-beta3\n  Microsoft.AspNet.Mvc 6.0.0-beta3\n  Microsoft.AspNet.Server.WebListener 1.0.0-beta3\nSearched Locations:\n  /Users/dthole/Programming/Home/samples/{name}/project.json\n  /Users/dthole/.dnx/packages/{name}/{version}/{name}.nuspec\n  /Library/Frameworks/Mono.framework/Versions/3.12.1/lib/mono/4.5/{name}.dll\n  /Library/Frameworks/Mono.framework/Versions/3.12.1/lib/mono/4.5/Facades/{name}.dll\nTry running 'dnu restore'.\nat Microsoft.Framework.ApplicationHost.Program.Main (System.String[] args) [0x00000] in :0 \nMacBookPro:HelloMvc dthole$\nOn a side note, can you please not close the issue until it's resolved?  At the very least this is a documentation problem, and that needs to be fixed.  I wouldn't mind helping with that, but getting it working is a first step.\n. Yeah, I've been at this for something like 7 hours now, so that's why I started building my own dnx.  At least I got back to the original difficulty I was at (server starts, but no connections, and little information posted) is was the same as I was having with k, so it looks like switching to dev worked.  I think I'll fork the Home documentation, and try to add something to the beginning that if using the dnx version, you should probably use the dev branch.\nThanks for the help, I'll continue banging my head on why it's not working on connecting, but that's better than I was at.\n. That is a useful post.  I think it was one of your posts, I came across, that originally got me setup some months ago using this.  I recall being to your website a few times so far.  I'll definitely read through this post to see if I can get \"dnx . web\" and \"dnx . kestrel\" actually working\n. and I got it working.  I really hope I can document this in a way that others won't have to battle quite as much as I did for getting this to work.\n. k, I'll be sure to do that, and thanks for the link.\nDo you know of a possible reason why it would work one day, but not the next?  Seems odd since I didn't modify Mono at all between yesterday and today.\n. It does, but considering this happened a few weeks ago, and was working for me yesterday, that's what kinda confused me.  Like, it fixed the dependency issue, then took it again over night.  Building the github version of mono will be a fine fix..\n. ",
    "raywomack": "The latest RPM package is 3.10 and I also tried from the latest git trunk 3.12. Same result.  I installed mono-complete from http://download.mono-project.com/repo/centos/\n. 1.0.0-beta1-10662\n. @Praburaj  kpm restore does create the error.\n. @Tragetaschen  thanks!  export TERM=dumb did the trick, I'd never figured that out.\nRestore complete, 87322ms elapsed  Joy!  \nWant to answer it at SO for the points? \n. ",
    "brporter": "Of course. \nTook a second look, and I think the Yeoman ASP.NET generator must be out of date; the generated project.json referenced the wrong dependencies. Updated that, and it's working properly now.\n. ",
    "vkairys": "@davidfowl  yes\n. Should I rewrite my code and move runtime name parsing to the Program class? \n. Should I just close this PR or create a new one with the same change in https://github.com/aspnet/XRE/blob/dev/src/Microsoft.Framework.PackageManager/Bundle/BundleManager.cs#L112  ?\n. ",
    "georgesimms": "line 31 of build.sh\n. Ok. It now  has a proper shebang\n. ",
    "abpiskunov": "Looks good to me. One question: could folders be added to \"include\" elements along with individual files?\n. Ah yes, if so then thingFiles explicitly has only files and my question is irrelevant. One exclusion from pattern will be the exclude section:\n  \"exclude\":[],\n  \"projectFiles\":[]\nIt does not follow the pattern.\n. Great! thanks\n. There no tooling for this. That's why it came up. How would you do it at runtime side?\n. I was trying to find a good repro for a while, and with those steps it worked 2 times in a raw ...\n. My machines were updated on last Monday and Tuesday, I will try it again when update my machines next time on next week\n. Does not repro any more, we can close it\n. @ChengTian fyi\n. I just debugged that and this issue should be resolved along with starting restore when project load completed. I will check it on Monday.\n. Tracked now with this issue: https://github.com/aspnet/Tooling-Internal/issues/241\n. @ChengTian isn't \"foo\" has same hierarchy level as \"src\" in your sample: foo\\ClassLibrary1*.csproj and in your sample src\\WebApplication5\\project.json. Both of them are parent folders for projects, isn't it?\n. csproj, also notice that I did not create this structure on purpose. I first created a csproj in foo folder, then added a reference to it (it was wrapped). After that I added an xproj to folder foo and added a reference to it. After that csproj became unresolved... Valid user actions leading to not some strange state...\n. Well that is true :), if we assume an ideal user who keeps in the head all little things, he would figure it out and fix it. But the fact that we have a workflow where user does very valid things and ends up with something broken that was working a minute ago - does not really feels good.. From tooling side we also can not do anything since we don't restrict or anticipate relative project's position to each other ... \n. How do we get this correct-long-form name for each framework moniker ? We take monikers that runtime sends us and don't have our own name resolution logic. \n. In any case , runtime should be consistent with the info it sends us.\n. by someone else you mean dnvm? It would be nice if there would be less small things users would need to do manually ... \n. ok, sounds good.\n. Here is the full dnu output:\nPATH=.\\node_modules.bin;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\Web Tools\\External;%PATH%;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\Web Tools\\External\\git\nC:\\Users\\antonpis.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta6\\bin\\dnx.exe \"C:\\Users\\antonpis.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta6\\bin\\lib\\Microsoft.Framework.PackageManager\\Microsoft.Framework.PackageManager.dll\" restore \"c:\\users\\antonpis\\documents\\visual studio 2015\\Projects\\ConsoleApp6\\src\\ConsoleApp6\" -f \"C:\\Program Files (x86)\\Microsoft Web Tools\\DNU\"\nMicrosoft .NET Development Utility CLR-x86-1.0.0-beta6-12254\nRestoring packages for c:\\users\\antonpis\\documents\\visual studio 2015\\Projects\\ConsoleApp6\\src\\ConsoleApp6\\project.json\n  GET https://api.nuget.org/v3/index.json\n  GET https://api.nuget.org/v3/index.jsonFindPackagesById()?id='System.Reflection'\nWarning: FindPackagesById: System.Reflection\n  Response status code does not indicate success: 404 (The specified blob does not exist.).\n  GET https://api.nuget.org/v3/index.jsonFindPackagesById()?id='System.Reflection'\nWarning: FindPackagesById: System.Reflection\n  Response status code does not indicate success: 404 (The specified blob does not exist.).\n  GET https://api.nuget.org/v3/index.jsonFindPackagesById()?id='System.Reflection'\nError: FindPackagesById: System.Reflection\nResponse status code does not indicate success: 404 (The specified blob does not exist.).\nSystem.Net.Http.HttpRequestException: Response status code does not indicate success: 404 (The specified blob does not exist.).\n   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()\n   at Microsoft.Framework.PackageManager.Restore.NuGet.HttpSource.d__8.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.Restore.NuGet.NuGetv2Feed.d__25.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RemoteWalkProvider.d__6.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__9.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__8.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__6.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__5.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__71.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__70.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.<>c__DisplayClass69_0.<b__1>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat Microsoft.Framework.PackageManager.RestoreCommand.d__69.MoveNext()\nRestore failed\nResponse status code does not indicate success: 404 (The specified blob does not exist.).\nNuGet Config files used:\n    C:\\Users\\antonpis\\AppData\\Roaming\\NuGet\\NuGet.Config\n    c:\\users\\antonpis\\documents\\visual studio 2015\\Projects\\ConsoleApp6\\NuGet.Config\nFeeds used:\n    https://api.nuget.org/v3/index.json\n    C:\\Program Files (x86)\\Microsoft Web Tools\\DNU\n. Here is project.json:\n{\n  \"version\": \"1.0.0-*\",\n  \"description\": \"ConsoleApp8 Console Application\",\n  \"authors\": [ \"antonpis\" ],\n  \"tags\": [ \"\" ],\n  \"projectUrl\": \"\",\n  \"licenseUrl\": \"\",\n\"dependencies\": {\n  },\n\"commands\": {\n    \"ConsoleApp8\": \"ConsoleApp8\"\n  },\n\"frameworks\": {\n    \"dnx451\": { },\n    \"dnxcore50\": {\n      \"dependencies\": {\n        \"System.Collections\": \"4.0.10-beta-23109\",\n        \"System.Console\": \"4.0.0-beta-23109\",\n        \"System.Linq\": \"4.0.0-beta-23109\",\n        \"System.Threading\": \"4.0.10-beta-23109\",\n        \"Microsoft.CSharp\": \"4.0.0-beta-23109\"\n      }\n    }\n  }\n}\n. Latest checked in to WTE Beta6 (dnx-clr-win-x86.1.0.0-beta6)\n. It still should be unresolved in Dependencies message though.\n. It would be nice if it could be beta7 issue.\n. Please let me know when fix is checked in and I will verify that tooling works with it as expected.\n. Both of the would require tooling changes in parsing messages we receive from DTH, but Solution1 looks more neat. \n. Troy you showed snapshot with only 2 messages when I had at least 4 messages received and for the last one I took a screen snapshot - it removes error diagnostic\n. Could you try repro again? \n. Figured it out. Diagnostics sent per framework and our code for dependency diagnostics specifically did not take into account frameworks and grouped them all together, which resulted in last diagnostic for dnx451 clear diagnostic for dnxcore. Reopened tooling bug.\n. Hm yes , I did not clear the output. \n. Chatted with David - we have FileReferences  thatDTH sends and can use that info. Closing.\n. Yes, I will add corresponding changes in WTE. Where could I get your privates to tests ? Or it is already in dev builds?\n. Awesome, thanks for quick change!\n. Does it mean that we don't want to display a package with star icon now in VS? dnu list would work, but it would require user to switch to console and run this command which is too many steps ..., anyway if there no better way for now , lets go with dnu list ...\n. there not much value to show that version is overridden for a dependency, since user see it by the version itself. \n. You can send us info we need based on your own proposal: 1. create a first tree, 2. traverse the tree and see which package has other packages with same version but has Override = false, 3. send us final tree with info we need.  (we also could do it on tooling side, but it would be harder..)\nOr if we don't want to do that , we need to close Tooling feature also and suggest users dnu list  (my question above)\n. We are not doing it for beta8 or at all? If for beta8 its ok, but if we are not fixing it for RC it is not OK. It might be hard , but it looks not very good since our diagnostics are ambiguous..\n. I tried and result is the same as in the picture above. If you check the issue description , it does not complain about diagnostics sent for the whole project (Main in your case), but about the fact that diagnostics sent and to the dependency that is overridden, and to the dependency that DOES that override (check actual DependencyDiagnostics for Newtonsofts sent to Main). \nIn your sample, open \nMain project references tree and you should see Netwonsoft dependency of main project itself - this is the dependency that does the override - why it has a warning sent for it? Then open Library dependency under Main project's references tree and find Newtonsoft referenced by library - that one should have warning, since its version is overridden..\nIn all places here I talk about diagnostics sent to dependencies in the Main project.\n. I see actually what the problem is.. It is again related to the fact that its not possible to see what package overrides other packages .. (kind of) and the way DTH Dependencies message sends data.\nDependencies message contains a flat list of all dependencies with all properties including diagnostics. However dependencies of each dependency are provided only by name and version, and their other properties are assumed to be the same Dependency with the same name in the big flat list. That's why wen in the tree I look for Main -> Library -> Newtonsoft.Json I still get same dependency metadata that Main -> Newtonsoft.Json has, which does have diagnostics. That's why for you diagnostics are sent once, but for us in the tree they are displayed for all instances of that dependency: the one that actually does the override and the one that being overridden.\nSo with current design we can not do anything and you can close the issue (but reference it somewhere where you track related future DTH/dnu updates)\nNote: this is a second issue when we need some metadata updates: who override version and diagnostics for relevant dependencies only. \n. Let me know when there are privates to try. At this point tooling does detect all project dependencies and sends them all to dnu. With this change - should we continue to do so or do nothing since dnu is expected to do the same? \n. Troy, ask was to get override=true if package does override other packages, not when its version is overriden... How do i know who's version does override?\nThanks,\nAnton\nOn Oct 1, 2015, at 8:15 PM, Troy Dai notifications@github.com<mailto:notifications@github.com> wrote:\nIssue: #2744https://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fissues%2f2744&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=ryaUhV%2bcqNMzb79sEN5HHwYWkEaWGIL1BUHEDX1Qeqk%3d\nReviewer: @davidfowlhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2fdavidfowl&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=lE6yn9RF%2fWw0VbYzLOIpNF6Ug0WXrEXvuR3Y4Gx0Pg0%3d @abpiskunovhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2fabpiskunov&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=vj9Svtc4bweKUFw2hNnr%2bWJqRvYi7t91pHbhE02Ox7s%3d\nCC: @victorhurdugacihttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2fvictorhurdugaci&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=YgqKJXj0220F2chEP8BXJJ0151Ol9mgTu0%2be3qUBl8M%3d @muratghttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2fmuratg&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=4OdQ7IGybWILkYZIuC5%2b2AL9p9ibBGEnGYcVvCiIEyM%3d @moozzykhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2fmoozzyk&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=M9Oj1lMSAiRrau8B3q%2bnJbF1A9ic%2fnRMkb026ylJMyE%3d @BrennanConroyhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2fBrennanConroy&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=J2cCW7k1S4lVDSZtVK6gbHcjDZDXjpAELGBkJR3cKkM%3d\nThis change add a new information to the Dependencies message about if one dependency is overridden by different version of the same package from different source.\nHere's a sample in which the Library1's Newstonsoft.Json dependencies is overridden.\n{{\n  \"Framework\": {\n    \"FrameworkName\": \"DNX,Version=v4.5.1\",\n    \"FriendlyName\": \"DNX 4.5.1\",\n    \"ShortName\": \"dnx451\",\n    \"RedistListPath\": \"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.1\\RedistList\\FrameworkList.xml\"\n  },\n  \"RootDependency\": \"Main\",\n  \"Dependencies\": {\n    \"Main\": {\n      \"Name\": \"Main\",\n      \"DisplayName\": \"Main\",\n      \"Version\": \"1.0.0\",\n      \"Path\": \"C:\\code\\DNX\\artifacts\\TestOut\\DthTestServer.DthDependencies_HighestOverride\\dnx-clr-win-x86.1.0.0-dev\\src\\Main\\project.json\",\n      \"Type\": \"Project\",\n      \"Resolved\": true,\n      \"Dependencies\": [\n        {\n          \"Name\": \"Library1\",\n          \"Version\": \"1.0.0\",\n          \"Override\": false\n        },\n        {\n          \"Name\": \"Library2\",\n          \"Version\": \"1.0.0\",\n          \"Override\": false\n        },\n        {\n          \"Name\": \"fx/mscorlib\",\n          \"Version\": \"4.0.0\",\n          \"Override\": false\n        },\n        {\n          \"Name\": \"fx/System\",\n          \"Version\": \"4.0.0\",\n          \"Override\": false\n        },\n        {\n          \"Name\": \"fx/System.Core\",\n          \"Version\": \"4.0.0\",\n          \"Override\": false\n        },\n        {\n          \"Name\": \"fx/Microsoft.CSharp\",\n          \"Version\": \"4.0.0\",\n          \"Override\": false\n        }\n      ],\n      \"Errors\": [],\n      \"Warnings\": []\n    },\n    \"Library1\": {\n      \"Name\": \"Library1\",\n      \"DisplayName\": \"Library1\",\n      \"Version\": \"1.0.0\",\n      \"Path\": \"C:\\code\\DNX\\artifacts\\TestOut\\DthTestServer.DthDependencies_HighestOverride\\dnx-clr-win-x86.1.0.0-dev\\src\\Library1\\project.json\",\n      \"Type\": \"Project\",\n      \"Resolved\": true,\n      \"Dependencies\": [\n        {\n          \"Name\": \"Newtonsoft.Json\",\n          \"Version\": \"6.0.8\",\n          \"Override\": true\n        },\n        {\n          \"Name\": \"fx/mscorlib\",\n          \"Version\": \"4.0.0\",\n          \"Override\": false\n        },\n        {\n          \"Name\": \"fx/System\",\n          \"Version\": \"4.0.0\",\n          \"Override\": false\n        },\n        {\n          \"Name\": \"fx/System.Core\",\n          \"Version\": \"4.0.0\",\n          \"Override\": false\n        },\n        {\n          \"Name\": \"fx/Microsoft.CSharp\",\n          \"Version\": \"4.0.0\",\n          \"Override\": false\n        }\n      ],\n      \"Errors\": [],\n      \"Warnings\": []\n    },\n    \"Library2\": {\n      \"Name\": \"Library2\",\n      \"DisplayName\": \"Library2\",\n      \"Version\": \"1.0.0\",\n      \"Path\": \"C:\\code\\DNX\\artifacts\\TestOut\\DthTestServer.DthDependencies_HighestOverride\\dnx-clr-win-x86.1.0.0-dev\\src\\Library2\\project.json\",\n      \"Type\": \"Project\",\n      \"Resolved\": true,\n      \"Dependencies\": [\n        {\n          \"Name\": \"Newtonsoft.Json\",\n          \"Version\": \"6.0.8\",\n          \"Override\": false\n        },\n        {\n          \"Name\": \"fx/mscorlib\",\n          \"Version\": \"4.0.0\",\n          \"Override\": false\n        },\n        {\n          \"Name\": \"fx/System\",\n          \"Version\": \"4.0.0\",\n          \"Override\": false\n        },\n        {\n          \"Name\": \"fx/System.Core\",\n          \"Version\": \"4.0.0\",\n          \"Override\": false\n        },\n        {\n          \"Name\": \"fx/Microsoft.CSharp\",\n          \"Version\": \"4.0.0\",\n          \"Override\": false\n        }\n      ],\n      \"Errors\": [],\n      \"Warnings\": []\n    },\n// Remaining part of the message are omitted.\n\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/aspnet/dnx/pull/2888https://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=OjOiSx5ysqYjiRBDGcKmcKYvVR2NLsCtT%2f1zIHXjTlc%3d\nCommit Summary\n-   Add a Override property to each DependencyItem\nFile Changes\n-   A misc/DependencyOverrideNearest/global.jsonhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888%2ffiles%23diff-0&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=KE6C6z%2fyzc53EqUBZiRN7NstMK5oKw3vLG1%2fqVbqU50%3d (3)\n-   A misc/DependencyOverrideNearest/src/Library/project.jsonhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888%2ffiles%23diff-1&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=6L6MNH7uJ9fCqEuBZvj4RiVxA3zUvsba9K%2bvNL1jqUs%3d (8)\n-   A misc/DependencyOverrideNearest/src/Main/project.jsonhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888%2ffiles%23diff-2&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=FbS901l3B0aXZWpV11EVsLDaa8BsU2FU0zlyFY9Wh2A%3d (9)\n-   A misc/DependencyOverrideSibling/global.jsonhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888%2ffiles%23diff-3&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=IITEPOdMRRJYUB2hEpHlBD76ll60C0%2b1eiKzMXH2rIk%3d (3)\n-   A misc/DependencyOverrideSibling/src/Library1/project.jsonhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888%2ffiles%23diff-4&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=9yTqW7Jy3ksnoeuUe0kH85BoM%2bRRgrJJpQ8loLwM4eA%3d (8)\n-   A misc/DependencyOverrideSibling/src/Library2/project.jsonhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888%2ffiles%23diff-5&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=2BnO35gDFT%2fpTCWho3z1OvVdd%2bTefyb9pbtYyoE5CjI%3d (8)\n-   A misc/DependencyOverrideSibling/src/Main/project.jsonhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888%2ffiles%23diff-6&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=OqAmEyMBC8PKZuarWu0YglrxfZuDV9pjgS0JcBHTSl0%3d (9)\n-   M src/Microsoft.Dnx.DesignTimeHost/Models/OutgoingMessages/DependencyItem.cshttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888%2ffiles%23diff-7&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=qC1qnRZafvcmLy0BpjKe%2f9DKfAD51NQ%2bN3qnbNfIzTU%3d (2)\n-   M src/Microsoft.Dnx.DesignTimeHost/ProjectStateResolver.cshttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888%2ffiles%23diff-8&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=xEBiS2PjsrbMxAsn7muzhPlPEjO92%2bM0DCckJwRip%2fQ%3d (34)\n-   M test/Microsoft.Dnx.DesignTimeHost.FunctionalTests/DthStartupTests.cshttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888%2ffiles%23diff-9&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=7ZG6yLk8B%2f25nSnEaFiF4x4%2bF4foKCoTGO%2fu2IFAUyM%3d (92)\n-   M test/Microsoft.Dnx.DesignTimeHost.FunctionalTests/Infrastructure/DthTestClient.cshttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888%2ffiles%23diff-10&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=Nc89jlww8ya5sQmKwpn%2flMfR6Jrxqtznrc7NrM7CGqc%3d (32)\n-   M test/Microsoft.Dnx.DesignTimeHost.FunctionalTests/Util/DthMessageCollectionExtension.cshttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888%2ffiles%23diff-11&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=aBsgIobs3reoSqxkBF2j1qFhJe482b5wW2H9pTdftEA%3d (24)\n-   A test/Microsoft.Dnx.DesignTimeHost.FunctionalTests/Util/DthMessageTypes.cshttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888%2ffiles%23diff-12&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=9bcddXD8clWIvZ6isf7OtI9E6xB9qqk5GNuFjHyL%2fZs%3d (14)\nPatch Links:\n-   https://github.com/aspnet/dnx/pull/2888.patchhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888.patch&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=uRxpxvXf2M%2f6anpyURQgMBK2eknuBmjVjwaIuzaL4Do%3d\n-   https://github.com/aspnet/dnx/pull/2888.diffhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888.diff&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=KUIhp9Ssr25wgoscpW9jWr8i1beReKni0%2fPnk7SkUeY%3d\n\nReply to this email directly or view it on GitHubhttps://na01.safelinks.protection.outlook.com/?url=https%3a%2f%2fgithub.com%2faspnet%2fdnx%2fpull%2f2888&data=01%7c01%7canton.piskunov%40microsoft.com%7c9ccc3e98d70f434fbd1908d2cabe925c%7c72f988bf86f141af91ab2d7cd011db47%7c1&sdata=OjOiSx5ysqYjiRBDGcKmcKYvVR2NLsCtT%2f1zIHXjTlc%3d.\n. what is the new issue tracking it?\n. diagnostics bubble up issue is fixed in beta8, thanks for pointing it out.\n. it was just fixed , build is not ready yet, should be available later today\n. This reproes when I have:\n\"sdk\": {\n    \"version\": \"1.0.0-rc1-16070\"\n  }\nand then add a symbol 1 after last }, then remove 1 and error is still there\n. Bala opened this issue in TFS and mentioned that after he removed remote feed from Nuget settings and added local one (same as we send to dnu), packages installed. So I believe yes packages were in local feed.\nSeems like dnu just crashed at remote feed and did not even look at local one..\n. Any scenario for wrapped project?\n. What about References message? Could you add a test for that too?\n. Do you have an issue to track it? :) Its easier to do it now, but its up to you of course (btw it would caught another issue with wrapped project path that I sent you earlier)\n. Why Error and warning are not collections? It is not possible in the future to have several errors r warnings for one dependency?  Or we will change it later if needed?\n. Tests for warnings?\n. ",
    "cambirch": "Chiming in because I was just dealing with this today in my project.\nSince I have done quite a bit of work in the past with grunt.js my first instinct was to use the globbing patterns that are typical in a simple gruntfile.  It would be nice to see the ability to use the negation globbing pattern in the project.json file rather than being forced to have a separate property.\nsomething like:\n{\n    \"resources\": [\n        \"**/*.js\",\n        \"!node_modules\"\n    ]\n}\nWhile I do like the option to have a more generic exclude pattern that can be applied, sometimes it is rather nice to apply step by step globbing and exclude filtering so that you can include everything in a directory and then exclude just 1 known file without having to jump around to a different property with a different context feel.  It just helps keep everything that matters about 1 specific subject in 1 place.\n. ",
    "MelbourneDeveloper": "Is there actually a way to exclude files using the project.json file now?\n. It doesn't work.\n. Why is this not the highest priority?\nWith the new xproj format, you cannot link a file in from another project. And, at the same time, you can't exclude files from the folder structure. This means you literally cannot share code files (.cs files) between two platforms because you need to make physical copies of the files and then delete the files that you don't want, or use conditional compilation symbols which is currently broken in .NET Core. \nI have documented issues with .NET Core (xproj) projects, including this one, here:\nhttps://github.com/dotnet/cli/issues/4022#issuecomment-238777946\n. I have logged the problem here:\nhttps://github.com/aspnet/Tooling/issues/723\n. The aspnet/tooling team snuck this functionality in to the project.json at some point. It seems you can't do it through the VS front end, but you can do it by manually editing the project.json. Here is a sample app that shows you how to exclude files:\nhttps://dl.dropboxusercontent.com/u/79781769/Sample%20Apps/ExcludeFileSample2.zip\n. ",
    "smbecker": "https://github.com/aspnet/Announcements/issues/175\n. Should dependency versions be apart of this? In a large system with a lot of projects, updating a reference to the latest version and ensuring that all projects are using the same version can become tedious and error prone. This would be a lot simpler if the dependency version was declared in global.json and then in the project.json, the version was left empty.\n. I think the pattern has been to use a *.Sources package with \"shared\": \"**/*.cs\". Something like https://github.com/aspnet/dnx/tree/dev/src/Microsoft.Framework.CommandLineUtils.Sources. This effectively copies the internal code to all referenced projects. Not a perfect solution but that seems to be the pattern based on looking at other projects.\n. Yes, I did. I was trying to provide an alternate method to getting similar behavior to InternalVisibleTo. \n. Why are you running dnu and not dnx?\n. Looks like that is a low level issue in mono due to it not recognizing the OSX version...\nhttps://github.com/mono/mono/blob/master/mono/utils/mach-support-amd64.c\n. dup of #2217\n. I think that's the point of these two pull requests\nhttps://github.com/aspnet/dnx/pull/2263\nhttps://github.com/aspnet/dnx/pull/2316\n. The directives are in all caps. So it should be DNX451\n. Duplicate of #2042?\n. How would you access runtime services from tests? That is main place I use it today.I remember seeing an issue before (although couldn't find it) where someone was requesting changes in the DNX runner for xunit to provide access to the runtime IServiceProvider and it was closed as won't fix.\n. Is there a replacement for RequestShutdown?\n. It already is available for DNX 5...\nhttps://www.nuget.org/packages/System.Security.Cryptography.RandomNumberGenerator\n. Will there be a replacement or some other way to access? I also use it quite a bit.\n. Your question would be better served on dotnet/corefx repository, specifically in dotnet/corefx#5782\n. ",
    "barrytang": "Adding @Eilon and @DamianEdwards. Can we fix this?\n. @vijayrkn?\n. Happening in beta5? \n. @Eilon, @davidfowl ?\n. Moved to U1.\n@BillHiebert's comment:\nI put in a small change to enable document comments in the language service since the runtime is generating the xml file anyway. However, Roslyn does a lot of validation (kind of like fxcop) when doc comments are enabled and I see 260 warnings in the error list for a new Web Application. \n. \n. @davidfowl, where are we at with the runtime change?\n. @BillHiebert, can you update it? I don't seem to have permission to.\n. @davidfowl, what kind of tool is this? :)\nCan you set the milestone?\n. Adding @davidfowl and @balachir.\n. \n. ",
    "alfkonee": "Yes yes I think this should be a very top priority cus new nuget sources for aspvext are popping up in the project causing some dependencies to fail installation\nIt would be nice to be able to edit the list of sources for kpm\n. ",
    "jskulavik": "Is this permanent?  Will there be additional mappings for 4.6+ or will aspnet50 be remapped to forthcoming framework releases?\n. Is this permanent?  Will there be additional mappings for 4.6+ or will aspnet50 be remapped to forthcoming framework releases?\n. @davidfowl pointed out how this could be achieved long ago, @Alxandr already gave it a go, and we've now got beta 7+ to work with possibly using this as a spring board.  Given that ASPNET5 is an OSS project, why shouldn't the 'community,' in this case the outstanding F# community, contribute?  The new MSFT is give and take folks, no longer just give, and we shouldn't just take, but give.  I'm personally +100 for the support of F#, but let's make it happen as a community rather than demand this already overloaded team just provide it like they did in the MSFT of old.\n. @spencerwi Great point!  My only real point was that the community could help out and ideally shorten the development time associated making the official support come to life.  Pull requests are a beautiful thing, and I'm sure the ASPNET5 team would love to exercise the out-of-band development approach.\n. ",
    "brentschmaltz": "What do I have to do to repro this?\n. Is this key respected on fxCore?\n. ",
    "conniey": "I expect it to at least behave like the official (NuGet config file)[http://docs.nuget.org/consume/nuget-config-file] when it fails by ignoring the invalid NuGet.config file and then moving onwards.\nInstead, this one doesn't bother restoring packages if the NuGet.config settings in the current directory is correct but the ones further up are not.\n. @davidfowl Authenticode and strong name signing. Issue #621 seems to cover the authenticode scenario. Do you have any plans on adding StrongName signing?\n. Is the wiki going to be updated? https://github.com/aspnet/Home/wiki/Command-Line#k-command says that it should\n. Here is a minimal repro: https://github.com/conniey/webrepo\n. Any updates on this? Were you able to reproduce it?\n. Mono JIT compiler version 3.12.1 (tarball Fri Mar  6 19:12:47 UTC 2015)\n. @davidfowl: This issue still persists, even with the latest dnx (1.0.0-beta5-11624).\nI followed the instructions from Getting Started Debian.\nIs it by design to only use the NuGet.config from ~/.config/NuGet?\n. I was wondering if there was an ETA on when this issue would be fixed? \nWe were working with a customer who had shared libraries in multiple solutions and it was painful to coordinate the right location to find all the locally built packages in the program. (There was code churn in multiple solutions, so we wanted to update the references easily to see the changes.)\nAt some point, we had a NuGet.config in every project referencing that local repository.. but that only worked if you restored packages by right-clicking on each project and not the solution. And eventually, had copies of the shared library (.xproj) in each solution referencing the same code so we didn't have to deal with it.\nI feel like this is a scenario many other developers are going to face if they have their shared components in different solutions and want to work on features that touch different components. \n. ",
    "BillHiebert": "Callstack:\n\nMicrosoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.UnresolvedDependencyProvider.GetDescription(Microsoft.Framework.Runtime.LibraryRange libraryRange, System.Runtime.Versioning.FrameworkName targetFramework) Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.WalkContext.Resolve(System.Collections.Generic.Dictionary resolvedItems, System.Collections.Generic.IEnumerable providers, Microsoft.Framework.Runtime.LibraryRange packageKey, System.Runtime.Versioning.FrameworkName frameworkName)  Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.WalkContext.Walk.AnonymousMethod__0(Microsoft.Framework.Runtime.WalkContext.Node node)  Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.WalkContext.ForEach.AnonymousMethod__0(Microsoft.Framework.Runtime.WalkContext.Node node, int _)    Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.WalkContext.ForEach(Microsoft.Framework.Runtime.WalkContext.Node root, int state, System.Func visitor)   Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.WalkContext.ForEach(Microsoft.Framework.Runtime.WalkContext.Node root, System.Action visitor) Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.WalkContext.Walk(System.Collections.Generic.IEnumerable dependencyResolvers, string name, NuGet.SemanticVersion version, System.Runtime.Versioning.FrameworkName frameworkName)    Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.DependencyWalker.Walk(string name, NuGet.SemanticVersion version, System.Runtime.Versioning.FrameworkName targetFramework)  Unknown\n    Microsoft.Framework.DesignTimeHost.dll!Microsoft.Framework.DesignTimeHost.ApplicationContext.GetApplicationHostContext.AnonymousMethod__0(Microsoft.Framework.Runtime.CacheContext ctx) Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.CacheExtensions.Get.AnonymousMethod__0(Microsoft.Framework.Runtime.CacheContext ctx)    Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.Cache.CreateEntry(object k, System.Func acquire)   Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.Cache.AddEntry.AnonymousMethod__0() Unknown\n    mscorlib.dll!System.Lazy.CreateValue()    Unknown\n    mscorlib.dll!System.Lazy.LazyInitValue()  Unknown\n    mscorlib.dll!System.Lazy.Value.get()  Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.Cache.Get(object key, System.Func factory) Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.CacheExtensions.Get(Microsoft.Framework.Runtime.ICache cache, object key, System.Func factory) Unknown\n    Microsoft.Framework.DesignTimeHost.dll!Microsoft.Framework.DesignTimeHost.ApplicationContext.GetApplicationHostContext(Microsoft.Framework.Runtime.Project project, string configuration, System.Runtime.Versioning.FrameworkName frameworkName, bool useRuntimeLoadContextFactory) Unknown\n    Microsoft.Framework.DesignTimeHost.dll!Microsoft.Framework.DesignTimeHost.ApplicationContext.ResolveProjectDepencies.AnonymousMethod__0(Microsoft.Framework.Runtime.CacheContext ctx)   Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.CacheExtensions.Get.AnonymousMethod__0(Microsoft.Framework.Runtime.CacheContext ctx)    Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.Cache.CreateEntry(object k, System.Func acquire)   Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.Cache.AddEntry.AnonymousMethod__0() Unknown\n    mscorlib.dll!System.Lazy.CreateValue()    Unknown\n    mscorlib.dll!System.Lazy.LazyInitValue()  Unknown\n    mscorlib.dll!System.Lazy.Value.get()  Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.Cache.Get(object key, System.Func factory) Unknown\n    Microsoft.Framework.Runtime.dll!Microsoft.Framework.Runtime.CacheExtensions.Get(Microsoft.Framework.Runtime.ICache cache, object key, System.Func factory) Unknown\n    Microsoft.Framework.DesignTimeHost.dll!Microsoft.Framework.DesignTimeHost.ApplicationContext.ResolveProjectDepencies(Microsoft.Framework.Runtime.Project project, string configuration, System.Runtime.Versioning.FrameworkName frameworkName)  Unknown\n    Microsoft.Framework.DesignTimeHost.dll!Microsoft.Framework.DesignTimeHost.ApplicationContext.DoInitialWork(string appPath, string configuration, bool triggerBuildOutputs, bool triggerRestoreComplete) Unknown\n    Microsoft.Framework.DesignTimeHost.dll!Microsoft.Framework.DesignTimeHost.ApplicationContext.DoStageOne()   Unknown\n    Microsoft.Framework.DesignTimeHost.dll!Microsoft.Framework.DesignTimeHost.ApplicationContext.DoProcessLoop()    Unknown\n    Microsoft.Framework.DesignTimeHost.dll!Microsoft.Framework.DesignTimeHost.ApplicationContext.ProcessLoop(object state)  Unknown\n    mscorlib.dll!System.Threading.QueueUserWorkItemCallback.WaitCallback_Context(object state)  Unknown\n    mscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)   Unknown\n    mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx)   Unknown\n    mscorlib.dll!System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()  Unknown\n    mscorlib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()    Unknown\n    mscorlib.dll!System.Threading._ThreadPoolWaitCallback.PerformWaitCallback() Unknown\n. We currently don't have a clean target at all. There is an item on the backlog to fix this.\n. I opened TFS bug 1144827 to get the VS side completed\n. This has been fixed.\n. Tooling will need to be updated to handle the changes.  We should be able to do it in a compatible way that continues to support the old syntax for older versions of DNX.\n. I think you are right. We would continue to pass in the -appbase and --lib like we do today. \n. @davidfowl\nLooks like that is the case. So I should just enable it by default instead of having it disabled by default.\n. Nope. I punted the bug to update1 until there is a way to enable\\disable the feature in project.json\n. How do I do that?\n. Looks like I don't have permission either. I assume it is because this is in the Dnx project \n. @davidfowl \nAre you guys planning on addressing this for beta6?\n. I verified Troy's changes along with a small tooling change fixes this issue.\n. @davidfowl @muratg \n\nNote that the unit test host needs a similar feature. We talked about it but I don't think an official work item was created. I have the VS work done (same algorithm as for DTH).\n. Tracked in TFS by bug 1183897\n. Previous tooling (RC and before my change), looked for the friendly framework name when matching the error to a language service project. RC will continue to work as before and route the error to the error list rather than combine it will intellisense errors. My tooling change was to expand the framework match to also check for a matching moniker.\n. @davidfowl  - the change ensures that VS knows which framework the error is associated with and we can push it to the correct language service which will de-dupe it with existing intellisense errors.\n. Yes we will need tooling support for this. Opened 1206194\nWhat happens if the user specifies the core clr framework but is running on desktop (or vice versa)? I guess the tooling needs to restrict the framework choices to current DNX being run.\n@sayedihashimi \n. This is actually a tooling bug which has been fixed. \n.   \"Errors\": [\n    {\n      \"ErrorCode\": \"NU1001\",\n      \"SourceFilePath\": \"C:\\Users\\billhie\\documents\\visual studio 2015\\Projects\\WebApplication1\\src\\WebApplication1\\project.json\",\n      \"Message\": \"The dependency Microsoft.Extensions.Configuration.Json >= 1.0.0-rc1-final could not be resolved.\",\n      \"Severity\": 2,\n      \"StartLine\": 0,\n      \"StartColumn\": 0,\n      \"EndLine\": 0,\n      \"EndColumn\": 0,\n      \"FormattedMessage\": \"C:\\Users\\billhie\\documents\\visual studio 2015\\Projects\\WebApplication1\\src\\WebApplication1\\project.json(0,0): error NU1001: The dependency Microsoft.Extensions.Configuration.Json >= 1.0.0-rc1-final could not be resolved.\",\n      \"Source\": {\n        \"Name\": \"Microsoft.Extensions.Configuration.Json\",\n        \"Version\": \"1.0.0-rc2-final\"\n      }\n    }\n  ],\n  \"Warnings\": []\n})\n. Very unfortunate that the squiggle feature is broken in RC1. Obviously we need better test coverage to catch this sooner.\n. Update1 should have beta8 tooling so unless you have RC of Update1 one you shouldn't see the failure about  not finding Microsoft.Dnx.PackageManager.  A number or renames occurred after beta5 so tooling which shipped in beta5 doesn't work with Beta8. However, with beta8 tooling installed, it should work correctly with beta5, beta6, beta7 and beta8 as we handle the differences internally.\nTo do a manual restore, you don't have to drop to the command line. You can r-click on the project node and select Restore Packages. \nI don't like the stack dump\\exception that comes from the command line tools either. Hopefully going forward this will be improved so the errors are more clear as to the problem..\nWe should be handling changes to the framework version global.json (or via the application property page) and from the messages I see, we are. VS looks at this version when determining which version of DNX will be used for restore, build,  and project data from DesignTimeHost. \n. We pushed beta8 tooling in fairly late so most likely the version you have doesn't include it. \n. ",
    "fsbahman": "@Eilon root cause is same but it occurs when using \"kpm pack\" \n@Praburaj indeed it will be a temporary solution, but I willl have even longer path.\n. ",
    "stimms": "Incidentally the command for this is \nkpm bundle --out c:\\test --runtime  dnx-clr-win-x86.1.0.0-beta3\nObviously replace the runtime with whatever you're using. \n. ",
    "codespare": "Happens trying to build MusicStore with build.cmd during dnu restore as well. It gets lost recursing down node_modules directories I think:\n```\nPS [dev] C:\\User\\Dev\\ext\\Universe\\MusicStore>.\\build.cmd\nAttempting to gather dependencies information for package 'KoreBuild.0.2.1-rc1-15542' with respect to project 'packages', targeting 'Any,Version=v0.0'\nAttempting to resolve dependencies for package 'KoreBuild.0.2.1-rc1-15542' with DependencyBehavior 'Lowest'\nResolving actions to install package 'KoreBuild.0.2.1-rc1-15542'\nResolved actions to install package 'KoreBuild.0.2.1-rc1-15542'\nAdding package 'KoreBuild.0.2.1-rc1-15542' to folder 'packages'\nAdded package 'KoreBuild.0.2.1-rc1-15542' to folder 'packages'\nSuccessfully installed 'KoreBuild 0.2.1-rc1-15542' to packages\nAttempting to gather dependencies information for package 'Sake.0.2.2' with respect to project 'packages', targeting 'Any,Version=v0.0'\nAttempting to resolve dependencies for package 'Sake.0.2.2' with DependencyBehavior 'Lowest'\nResolving actions to install package 'Sake.0.2.2'\nResolved actions to install package 'Sake.0.2.2'\nAdding package 'Sake.0.2.2' to folder 'packages'\nAdded package 'Sake.0.2.2' to folder 'packages'\nSuccessfully installed 'Sake 0.2.2' to packages\nDetermining latest version\n'dnx-clr-win-x86.1.0.0-rc1-15844' is already installed in c:\\Users\\User.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-rc1-15844.\nAdding c:\\Users\\User.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-rc1-15844\\bin to process PATH\nAdding c:\\Users\\User.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-rc1-15844\\bin to user PATH\nUpdating alias 'default' to 'dnx-clr-win-x86.1.0.0-rc1-15844'\n'dnx-coreclr-win-x86.1.0.0-rc1-15844' is already installed in c:\\Users\\User.dnx\\runtimes\\dnx-coreclr-win-x86.1.0.0-rc1-15844.\nAdding c:\\Users\\User.dnx\\runtimes\\dnx-coreclr-win-x86.1.0.0-rc1-15844\\bin to process PATH\n'dnx-clr-win-x64.1.0.0-rc1-15844' is already installed in c:\\Users\\User.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc1-15844.\nAdding c:\\Users\\User.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc1-15844\\bin to process PATH\n'dnx-coreclr-win-x64.1.0.0-rc1-15844' is already installed in c:\\Users\\User.dnx\\runtimes\\dnx-coreclr-win-x64.1.0.0-rc1-15844.\nAdding c:\\Users\\User.dnx\\runtimes\\dnx-coreclr-win-x64.1.0.0-rc1-15844\\bin to process PATH\nAdding c:\\Users\\User.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-rc1-15844\\bin to process PATH\ninfo: Build v2: False\ninfo: Exec\ninfo:   program: cmd\ninfo:   commandline: /C dnu restore --parallel\ninfo:   workingdir: C:\\User\\Dev\\ext\\Universe\\MusicStore\nMicrosoft .NET Development Utility Clr-x86-1.0.0-rc1-15844\n\nSystem.IO.PathTooLongException: The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.\n   at System.IO.Path.NormalizePath(String path, Boolean fullCheck, Int32 maxPathLength, Boolean expandShortPaths)\n   at System.IO.Path.GetDirectoryName(String path)\n   at System.IO.FileSystemEnumerableIterator1..ctor(String path, String originalUserPath, String searchPattern, SearchOption searchOption, SearchResultHandler1 resultHandler, Boolean checkHost)\n   at System.IO.Directory.EnumerateDirectories(String path)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.CollectProjectFiles(String directory, List1 results)\n   at Microsoft.Dnx.Tooling.RestoreProjectsCollector.Find(String restoreDirectory, IEnumerable1& projectJsonFiles)\n   at Microsoft.Dnx.Tooling.RestoreCommand.d__68.MoveNext()\n\nRestore failed\nThe specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.\nfail: Exit code 1 from cmd\nfail: Stack trace:\n   at Viewf4002438f8ae4f6f8b7eb68e18e9a133.b__9f() in c:\\Users\\User\\AppData\\Local\\Temp\\218894c96a1e4b568904f1a85e0e8e47-1.cs:line 8837\n   at Sake.Engine.Builder.BuilderBase1.CallTarget(String name)\n   at Sake.Engine.Builder.BuilderBase1.StartingTarget(String name)\n   at Viewf4002438f8ae4f6f8b7eb68e18e9a133.StartingTarget(String name) in c:\\Users\\User\\AppData\\Local\\Temp\\218894c96a1e4b568904f1a85e0e8e47-1.cs:line 1937\n   at Viewf4002438f8ae4f6f8b7eb68e18e9a133.b__5e() in c:\\Users\\User\\AppData\\Local\\Temp\\218894c96a1e4b568904f1a85e0e8e47-1.cs:line 3112\n   at Sake.Engine.Builder.BuilderBase1.CallTarget(String name)\n   at Sake.Engine.Builder.BuilderBase1.StartingTarget(String name)\n   at Viewf4002438f8ae4f6f8b7eb68e18e9a133.StartingTarget(String name) in c:\\Users\\User\\AppData\\Local\\Temp\\218894c96a1e4b568904f1a85e0e8e47-1.cs:line 1937\n   at Viewf4002438f8ae4f6f8b7eb68e18e9a133.b__5f() in c:\\Users\\User\\AppData\\Local\\Temp\\218894c96a1e4b568904f1a85e0e8e47-1.cs:line 3129\n   at Sake.Engine.Builder.BuilderBase1.CallTarget(String name)\n   at Sake.Engine.Builder.BuilderBase1.StartingTarget(String name)\n   at Viewf4002438f8ae4f6f8b7eb68e18e9a133.StartingTarget(String name) in c:\\Users\\User\\AppData\\Local\\Temp\\218894c96a1e4b568904f1a85e0e8e47-1.cs:line 1937\n   at Viewf4002438f8ae4f6f8b7eb68e18e9a133.b__60() in c:\\Users\\User\\AppData\\Local\\Temp\\218894c96a1e4b568904f1a85e0e8e47-1.cs:line 3146\n   at Sake.Engine.Builder.BuilderBase1.CallTarget(String name)\n   at Sake.Engine.Builder.BuilderBase1.StartingTarget(String name)\n   at Viewf4002438f8ae4f6f8b7eb68e18e9a133.StartingTarget(String name) in c:\\Users\\User\\AppData\\Local\\Temp\\218894c96a1e4b568904f1a85e0e8e47-1.cs:line 1937\n   at Viewf4002438f8ae4f6f8b7eb68e18e9a133.b__61() in c:\\Users\\User\\AppData\\Local\\Temp\\218894c96a1e4b568904f1a85e0e8e47-1.cs:line 3163\n   at Sake.Engine.Builder.BuilderBase1.CallTarget(String name)\n   at Viewf4002438f8ae4f6f8b7eb68e18e9a133.<RenderViewLevel0>b__59() in c:\\Users\\User\\AppData\\Local\\Temp\\218894c96a1e4b568904f1a85e0e8e47-1.cs:line 3019\n   at Sake.Engine.Builder.BuilderBase1.CallTarget(String name)\n   at Sake.Engine.SakeEngine.Execute(Options options)\n   at Sake.Engine.SakeEngine.Execute(String[] args)\n   at Sake.Program.Main(String[] args)\n```\n. ",
    "keichinger": "Nevermind, kvm is no longer part of this repo. Opening a new ticket in aspnet/dotnetsdk.\n. Nevermind, kvm is no longer part of this repo. Opening a new ticket in aspnet/dotnetsdk.\n. ",
    "troy": "Wrong @troy :)\n. ",
    "vijayrkn": "Bundle should always overwrite files. \n. We have made the change in VS to delete the temp folder every time before publish. This should take care of this issue.\n. @ChengTian \n. @ChengTian \n. /cc @ChengTian  @davidfowl  @sayedihashimi\n. /cc @ChengTian  @davidfowl  @sayedihashimi\n. For publishing from VS with a different webroot folder - please change the below 2 properties in pubxml(Properties\\PublishProfiles.pubxml)\n<WebRoot> httpdocs</WebRoot>\n    <WwwRootOut> httpdocs</WwwRootOut>\nwebroot denotes the input folder in project and wwwrootout denotes the output folder generated during publish.\n. pubxml properties to set - WebRoot and WwwRootOut\nxml\n    <WebRoot> httpdocs</WebRoot>\n    <WwwRootOut> httpdocs</WwwRootOut>\n. ",
    "roji": "Sorry if I'm misunderstanding something, but Type doesn't have the GetTypeInfo() either in my setup. This happens both in VS CTP6 and building cmdline (CLR 1.0.0-beta5-11446 x86). Am I missing something?\n. Thanks @rynowak!\n. Thanks for the quick answer.\nAny plans to make this work with the version itself and not just the prerelease? My current situation is that I can bump patch, minor and even major versions simply by performing git operations (and not modifying a single nuspec or AssemblyInfo.cs). I think it's important not to lose this capability in DNX...\n. Well, it's how things are controlled in general, although the logic is important mainly for the CI (versions don't matter much for local developer builds, at least in my setup).\nNormally when you go with an automated GitFlow-based versioning scheme (\u00e0 la GitVersion) yes, you're constrained to the entire solution being versioned with the same version; this is a simple consequence of the version being derived from your git branch (develop, master).\nOf course other scenarios exist out there for deriving versions; some people store the version in some arbitrary text file and read that as part of the build. This allows you to manage different versions for individual projects within the same solution. IMHO the important thing is to make any versioning scheme possible by allowing a full environment variable plus replacement token.\nI'd be happy to provide any other details you're interested in.\n. The global.json-specified feature sounds like a good idea (regardless of allowing an external version from an environment variable). All the rest sounds good too.\nMy basic need in life is to be able to never touch (and commit) any file as part of a version bump operation, any scheme allowing that would probably be OK. I imagine that the easiest way to support this is probably via an environment variable that gets set by a tool such as GitVersion...\n. Sure, I'll be happy to contribute on this, but here are some design questions:\n- Should the DNX_BUILD_VERSION envvar now simply contain an entire version (e.g. 2.2.0-rc1) rather than just the prerelease component now? Or should we have two schemes (i.e. one envvar for the prelease component only, like now, plus a new envvar for the entire version which would take precedence if defined)? Two schemes sounds like too much to me but anything currently using 1.0.0-* would break otherwise.\n- Maybe consider renaming DNX_BUILD_VERSION to DNX_VERSION (the other envvar, DNX_ASSEMBLY_FILE_VERSION, doesn't have a BUILD prefix in it).\n- Regarding the version substitution token: should it be $version$ like in today's nuspec?\n- Should it be possible to place the version substitution token anywhere in the project.json or only in dependency version fields?\n- In addition to the envvar, should we also make available a command-line switch to dnu pack, like nuget pack?\n. Any ideas on the questions above?\n. @davidfowl, @glennc or others, can we have a quick discussion on the design questions I asked above? After that I can work on a PR.\n. If you guys need any more input on usage scenarios etc. let me know!\n. Here are some input thoughts on what is needed and how to achieve it. Some common versioning scenarios (bumping refers to all version bumps, not just prerelease tags):\n- Manual version bumping per project: update each project.json's version by hand (currently supported)\n- Manual version bumping for all projects in a solution: update global.json by hand once\n- Solution-wide automated versioning (e.g. GitVersion): external program determines the version (from git branch or other). Should be able to pass a cmdline switch to dnu pack for this (and also possibly an environment variable). Note that GitVersion also takes care of automatically setting the value of the AssemblyVersion attribute (and related).\nHere's a proposal for supporting the above requirements, ordered by descending priority:\n- If a -Version cmdline switch is passed to dnu pack, use it\n- If a DNX_VERSION environment variable exists, use it\n- If a version is defined in the global.json, use it\n- If none of the above was satisfied, use the version in the project.json (or emit an error if one was not defined)\ndnu currently supports a half-half model, where the base version is manually-defined in the project.json, and the prerelease is passed externally through the DNX_BUILD_VERSION environment variable. This can be maintained via a DNX_PRERELEASE_VERSION environment variable (and possibly command-line switch), although it may be sufficient to simply allow the entire version to be externally-determined as proposed above (discarding the half-half mode).\nNote that there should also ideally be a way to refer to the global.json version when specifying versions of dependencies. This is important for creating same-version dependencies between projects of the same solution (as mentioned above).\n. @pranavkm good point. DNX_ASSEMBLY_VERSION sounds a bit misleading to me since it seems to imply that the AssemblyVersion attribute is affected, which I don't think is the case (that could be a feature on its own). Maybe DNX_PROJECT_VERSION...\n. @glennc @davidfowl any progress on this?\n. @RehanSaeed, don't forget the version in your project.json must contain \"1.0.0-*\" for the DNX_BUILD_VERSION to be taken into account.\n. If I'm understanding things correctly, build dependencies could create problems in addition to the transitive dependency issue described above.\nSay my project A has a build-type dependency on project B. B may support only some frameworks (e.g. dnx451), but my project A needs to support additional frameworks (e.g. dnxcore50). This shouldn't be a problem in principle, but unless I'm mistaken I won't be able to build A for dnxcore50 because its dependency B doesn't support it.\nHope this makes sense.\n. Can you guys describe how a DNX command is supposed to be written after this change? What's the right way to access, say, the IApplicationEnvironment from a program?\n. Thanks @davidfowl\n. @per-samuelsson thanks for indicating the right issue, am closing this and will continue the discussion there.\n. OK, will try that for now. Am leaving open for future resolution...\n. You're right. So if I understand correctly, in the new standard platform package maintainers decide at publishing time whether they target/support netstandard1.2 or netstandard1.3? In other words it's no longer the package consumer which checks compatibility for dependency packages?\n. I'm indeed using -* (I guess otherwise this problem can't occur in the first place).\nSpecifying a package path in global.json is definitely a workaround, although it's less than ideal in a single project where sometimes you need to switch between stable and unstable branches - you need to switch back and forth both your NuGet.config and your global.json.\nWouldn't ignoring the local disk for -* make things very slow for no good reason? I mean, dropping a simple metadata file inside the package's directory under .dnx\\packages seems pretty simple, you could even include other information such as download date just for fun.\n. Apologies, opened this too quickly. Opened https://github.com/dotnet/coreclr/issues/2374 instead.\n. ",
    "chlowell": "An error retrieving packages from one source causes restore to fail despite successful communication with other sources offering the required packages.\n. Ah, I see. kpm restore --ignore-failed-sources does work here. Is the plan to change the messaging in future, replacing stack trace with usage instructions?\n. ",
    "colotiline": "No. Thanks. Will try in this evening (GMT+3). \nWhy is --ignore-failed-sources not default?\n. Using kpm restore --ignore-failed-sources didn't help.\nI've got the same exception for my job's repository. Its uri is  \\\\192.168.1.35\\Packages. VPN connection state doesn't matter.\nSo it looks like kpm doesn't support shared folders as NuGet packages source. Am I right? If yes, will it support them in the future?\nFull exception:\n``` c#\nRestoring packages for c:\\Repositories\\VisualStudio\\Test\\Solution\\Client\\Web\\Client\\project.json\n\nSystem.IO.IOException: The network path was not found.\nat System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\n   at System.IO.FileSystemEnumerableIterator1.CommonInit()\n   at System.IO.FileSystemEnumerableIterator1..ctor(String path, String originalUserPath, String searchPattern, SearchOption searchOption, SearchResultHandler1 resultHandler, Boolean checkHost)\n   at System.IO.Directory.EnumerateFiles(String path, String searchPattern)\n   at Microsoft.Framework.PackageManager.PackageFolderFactory.<>c__DisplayClass1.<CreatePackageFolderFromPath>b__2(String dir)\n   at Microsoft.Framework.PackageManager.PackageFolderFactory.CreatePackageFolderFromPath(String path, IReport report)\n   at Microsoft.Framework.PackageManager.RestoreCommand.AddRemoteProvidersFromSources(List1 remoteProviders, List1 effectiveSources)\n   at Microsoft.Framework.PackageManager.RestoreCommand.<RestoreForProject>d__1.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.<ExecuteCommand>d__1.MoveNext()\n----------\nRestore failed\nThe network path was not found.\n```\n. I cloned the repository.kpmshould support shared folders (class 'PackageSourceUtils, methodCreatePackageFeed). But I always get the exception above. I will setup an environment for the XRE and try to debug later.\n. @davidfowl, English is not my main language. What does \"dupe\" mean? I can't understand the reason for closing this issue.\n. @davidfowl, sorry for being annoying. If dupe means duplicate I suppose you should change related issue number. Because now issue #1274 was closed as duplicate of issue #1274.\n. ",
    "ninety7": "Never mind. Did not see that project.json changed packExclude to bundleExclude\n. ",
    "abedon": "thx ninety7 for your sharing.\n. ",
    "OliDow": "Thanks for sharing also\n. ",
    "Daniel15": "Great, thanks for all your help @davidfowl! The K_BUILD_VERSION is the missing piece I was looking for :+1: \nWith my current .NET projects I like putting the AssemblyVersion in a shared C# file since I can set it in one place and all projects use that version, which is handy when there's quite a few assemblies and also to ensure I don't forget to update any of them. With ASP.NET 5 Is there a way to set one version number in a central spot across a number of projects, or do I need to update it in all the package.json files every time it changes? Theoretically could the version number in package.json just be * and the entire version number set via K_BUILD_VERSION?\n. Awesome, thank you so much :D\n. @davidfowl  I get \"'*' is not a valid version string\" and \"The design time host build failed with the following error: '*' is not a valid version string\" in Visual Studio if I try setting \"version\": \"*\" in my project.json. Any ideas? I'm on beta3 now. Do I need to set the environment variable in Visual Studio somehow in addition to using it for command-line builds?\n. Thanks, do you know if the Visual Studio team have plans for allowing just * and setting the version number globally for a solution somehow?\n. Oh cool, good to know. I thought the ASP.NET team was separate from Visual Studio :+1: :+1: \n. Thanks! Is there a public issue I can watch or is it only in an internal tracker?\n. Icon appears to be missing as well.\nIt would be nice to have a way to set the title too. Currently it just sets it to the \"raw\" name but I usually set a friendly name in my NuGet packages (eg. ID = \"React.Web.Mvc4\", Name = \"ReactJS.NET (MVC 4 and 5)\")\n. Seems okay now\n. Ideally this should pull the exact version of the source code used to build the module, rather than just pulling the master branch. This could be done through tags (for projects that always tag their releases) or by embedding the commit hash when packaging. Pulling master means the source code you get is most likely not the source code used to build the package, which limits its usefulness.\nOr does it actually embed the hash? That wasn't clarified in the announcement.\n. Oh awesome, thanks! It might be worth clarifying that in the announcement? It wasn't mentioned anywhere.\n. ",
    "Costo": "In case you arrived here after some Googling like me, be aware that K_BUILD_VERSION is now DNX_BUILD_VERSION in Asp.Net Core 1.0 RC1\nhttps://github.com/dotnet/cli/issues/571\n. ",
    "danielwertheim": "@davidfowl  What is the preferred way now to accomplish something like having one shared assemblyinfo having the version information when sharing that between many projects in one solution?\nA pre-compile script that looks at single resource and patches the version in project.json or?\n. ",
    "nathan-alden": "@danielwertheim I'm wondering the same thing. Now that I can't create a link to a single GlobalAssemblyInfo.cs, I'm not sure what the best way is to version the assemblies. It would've been nice if project.json handled that automatically, versioning all assemblies to whatever the NuGet package version is.\n. I ended up writing a PowerShell script that my CI process calls to set all the project.json \"version\" properties and a GlobalAssemblyInfo.cs file's version attributes. Then I include GlobalAssemblyInfo.cs in each project.json as a compile include.\n. ",
    "nicbourgoin": "Needed to change packExclude to bundleExclude.\n. ",
    "yhax": "@abpiskunov any update?\n. ",
    "CarlosFreire": "Please Help, error in VS 2015 RTM, MVC 6 beta 7\nSystem.IO.FileLoadException\nCould not load file or assembly 'Cross2Business.Administrador' or one of its dependencies. Invalid pointer (Exception from HRESULT: 0x80004003 (E_POINTER))\nat System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\nat System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\nat System.Reflection.Assembly.Load(AssemblyName assemblyRef) \nat Microsoft.AspNet.Hosting.Startup.StartupLoader.FindStartupType(String startupAssemblyName, IList diagnosticMessages) \nat Microsoft.AspNet.Hosting.Internal.HostingEngine.EnsureStartup() \nat Microsoft.AspNet.Hosting.Internal.HostingEngine.EnsureApplicationServices() \nat Microsoft.AspNet.Hosting.Internal.HostingEngine.get_ApplicationServices() \nat Microsoft.AspNet.Loader.IIS.RuntimeHttpApplication.ApplicationStart(IHttpApplication application) \nat Microsoft.AspNet.Loader.IIS.HttpApplicationBase.InvokeApplicationStart(IHttpApplication application)\n. Please How I can publish on IIS\n. dnx 1.0.0-Beta8 publish in IIS \nshow resource not found\nFailed to load resource: the server responded with a status of 404 (Not Found)\nonly when publish in IIS\n. It's full IIS and is installed HttpPlatformHandler in the pc\nHow to deploy HttpPlatformHandler?\n. The app works locally without issues, but when deploy in different host the app doesnt run and is installed HttpPlatformHandler in the host, some additional configuration is required?\n. ",
    "sgtfrankieboy": "I found out what the issue is. The deployment script uses the default kvm.ps1 script which means it only fetches from nuget.org (beta1, beta2).\nUploading the dev version of kvm.ps1 manually and setting SCM_KVM_PS_PATH to point to the file did manage to download the runtime, but is now telling that kpm is not recognized as an internal or external command.\nCommand: \"D:\\home\\site\\deployments\\tools\\deploy.cmd\"\nUsing custom deployment setting for SCM_KRE_VERSION custom value is '1.0.0-beta4-11158'.\nUsing custom deployment setting for SCM_KVM_PS_PATH custom value is 'D:\\home\\site\\kvm.ps1'.\nHandling ASP.NET 5 Web Application deployment.\nkre-clr-win-x86.1.0.0-beta4-11158 already installed.\nAdding D:\\local\\UserProfile\\.k\\runtimes\\kre-clr-win-x86.1.0.0-beta4-11158\\bin to process PATH\n'kpm' is not recognized as an internal or external command,\nAn error has occurred during web site deployment.\noperable program or batch file.\nhowever when looking into the bin directory of the runtime, it clearly shows a file called kpm.cmd.\n. ",
    "MFFoX": "Having this problem as well with a nuget-hosted package.  It fails with:\n\n'doctype' is an unexpected token. The expected token is 'DOCTYPE'. Line 2, position 3.\n\nFull log output:\n```\nRestoring packages for C:\\Users\\caps\\Source\\Repos\\ALTS\\src\\Web\\Alts.Web\\project.json\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?Id='BootstrapNotifications'\n  CACHE https://www.myget.org/gallery/aspnetvnext/FindPackagesById()?Id='BootstrapNotifications'\nThe XML file C:\\Users\\caps\\AppData\\Local\\kpm\\cache\\83d1908867bed2779f34a95b060df026aee2255e$w.myget.org_gallery_aspnetvnext_\\list_BootstrapNotifications_page1.dat is corrupt\nWarning: FindPackagesById: BootstrapNotifications\n  'doctype' is an unexpected token. The expected token is 'DOCTYPE'. Line 2, position 3.\n  GET https://www.myget.org/gallery/aspnetvnext/FindPackagesById()?Id='BootstrapNotifications'.\n  OK https://www.myget.org/gallery/aspnetvnext/FindPackagesById()?Id='BootstrapNotifications' 845ms\nThe XML file C:\\Users\\caps\\AppData\\Local\\Temp\\tmpAC18.tmp is corrupt\nWarning: FindPackagesById: BootstrapNotifications\n  'doctype' is an unexpected token. The expected token is 'DOCTYPE'. Line 2, position 3.\n  GET https://www.myget.org/gallery/aspnetvnext/FindPackagesById()?Id='BootstrapNotifications'.\n  OK https://www.myget.org/gallery/aspnetvnext/FindPackagesById()?Id='BootstrapNotifications' 251ms\nThe XML file C:\\Users\\caps\\AppData\\Local\\Temp\\tmpAD23.tmp is corrupt\nError: FindPackagesById: BootstrapNotifications\n  'doctype' is an unexpected token. The expected token is 'DOCTYPE'. Line 2, position 3.\n\nSystem.Xml.XmlException: 'doctype' is an unexpected token. The expected token is 'DOCTYPE'. Line 2, position 3.\n   at System.Xml.XmlTextReaderImpl.Throw(Exception e)\n   at System.Xml.XmlTextReaderImpl.Throw(String res, String[] args)\n   at System.Xml.XmlTextReaderImpl.ThrowUnexpectedToken(String expectedToken1, String expectedToken2)\n   at System.Xml.XmlTextReaderImpl.ParseDoctypeDecl()\n   at System.Xml.XmlTextReaderImpl.ParseDocumentContent()\n   at System.Xml.XmlTextReaderImpl.Read()\n   at System.Xml.Linq.XDocument.Load(XmlReader reader, LoadOptions options)\n   at System.Xml.Linq.XDocument.Load(Stream stream, LoadOptions options)\n   at System.Xml.Linq.XDocument.Load(Stream stream)\n   at Microsoft.Framework.PackageManager.Restore.NuGet.NuGetv2Feed.d__21.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RemoteWalkProvider.d__6.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__9.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__8.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__6.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__5.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreOperations.d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__62.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__61.MoveNext()\n----------\nRestore failed\n'doctype' is an unexpected token. The expected token is 'DOCTYPE'. Line 2, position 3.\n```\n. ",
    "pbgodwin": "Is there any estimate for when a fix for this is going to land? It's been over three months now.\n. ",
    "aguacongas": "oups, wrong repo !\n. ",
    "cherrydev": "Thanks.  It would be fantastic if there was some sort of article or document somewhere that explained everything that we need to do to move from k/kpm/kvm to dnx/dnvm.\n. That doesn't answer the question.  Are you saying that the API is internal and shouldn't be used publicly by developers?  Are you saying that the choice of \"internal and source-shared\" or \"public\" is an implementation detail and therefore therefore not relevant to developers?\n. System.Reflection.Metadata, the package whose documentation appears to consist entirely of a title and a short list of release notes on an MSDN blog page?  http://blogs.msdn.com/b/bclteam/p/metadata.aspx\nYes, since it appears that I can, for example, call GetCustomAttributes() on a TypeDefinition, it seems exactly what I'm looking for, but while LibraryManager provides ILibraryExport objects which have a \"MetadataReferences\" property on them, that metadata doesn't appear related to System.Reflection.Metadata.\nHow would I go about, for example, getting System.Reflection.Metadata objects out of ILibraryManager?  From a source code search, nothing in the DNX project references System.Reflection.Metadata (except LogFileUtils).\nThe only examples I've seen of System.Reflection.Metadata need to read a PE file (or bytes of) and nothing I can see related to LibraryManager exposes that.\nPlease let me know if you think I've missed anything obvious, thanks.\n. A discussion sort of needs more than one participant and I feel like my questions have been pretty clear (or at least no clarification has been asked of me).  I'd be happy to continue the conversation if someone will step up and participate in it, thanks!\n. I think that was exactly what I was originally trying to accomplish and is cleaner than the solution that I ultimately came up with.\n. @dpnevmatikos if you read the rest of the above thread, you'll see that killing the process is the currently expected behaviour.\n. Ahh, found this before making my own bug report.  I guess this barely missed the mark for making into beta5 actual?  That's a shame, I had automatically re-running unit tests all set up and working in beta4!\n. ",
    "cnblogs-dudu": "@suhasj If use #!/bin/sh, get the following output.\n./build.sh: 31: ./build.sh: source: not found\n./build.sh: 35: ./build.sh: dnvm: not found\n. @suhasj \ndnx --version gets No command 'dnx' found. I follow these steps: \n- git clone DNX repo\n- install mono\n- run ./build.sh\nmono --version gets Mono JIT compiler version 3.2.8 (Debian 3.2.8+dfsg-4ubuntu1)\n. From stackoverflow answer: \n\n/bin/sh is usually some other shell trying to mimic The Shell. Many distributions use /bin/bash for sh, it supports source. On Ubuntu, though, /bin/dash is used which does not support source. If you cannot edit the script, try to change the shell which runs it.\n. yum install -y openssl-devel on CentOS.\n. @davidfowl same issue when  git clean -df and ./build.sh\n. @davidfowl, mono version on travis is 3.12.1.0. I'm going to try this version.\n. Same issue when Mono 3.12.0.\n. Fixes it by removing and recloning dnx.\n\nrm -rf dnx/\ngit clone --recursive https://github.com/aspnet/dnx.git\n. Still get A task was canceled.\n\n. Sorry. I made a mistake.\n. @ciznx \nIt's a natural problem. Up to now, restoring packages from myget.org is always timeout in China.\n. Fixes it by running service nscd restart.\n. Every time I encounter this issue, it disappears after some time. I guess it may be related to dns client cache. Then I try service nscd restart command and immediately fix it.\nThis issue can be reproduced by removing ~/.dnx/packages directory and rebuilding dnx. Once it apppears, running service nscd restart will fix it.\n. @ciznx \nIf service nscd restart does not work, try service nscd stop.\n. Get the following error when removing ~/.dnx/packages and rebuilding.\nUnable to locate Microsoft.Framework.NotNullAttribute.Sources >= 1.0.0-*\n. Yes. I have to try.\n. Try the following commands from here.\nwget http://security.ubuntu.com/ubuntu/pool/main/i/icu/libicu52_52.1-8ubuntu0.2_amd64.deb\ndpkg -i libicu52_52.1-8ubuntu0.2_amd64.deb\n. ",
    "justkao": "Thanks for pointing me into the right direction. I basically used the code from your example and it's working fine. I will deal with performance later, currently I am just experimenting with the new runtime ... i like it quite a lot, good job ;) \n. ",
    "jsacapdev": "UPDATE:\nFYI - the following are installed:\nMicrosoft Visual C 2015 CTP Redistributable (x64) - 14.0.22609\nMicrosoft Visual C 2015 CTP Redistributable (x86) - 14.0.22609\n. apologies, that's my mistake. is it possible (on a windows machine) to pull in the linux runtime as part of the publish? or would the linux runtime need to be installed on the target for the published app to work?\n. i have downloaded the linux runtime, installed it using dnvm, used the publish as follows:\ndnu publish --no-source --out .\\deploy --runtime dnx-coreclr-linux-x64.1.0.0-beta5-11760\nbut when I attempt to run it, i get the following error:\nroot@f292fdbe1c7f:/app# ./SimpSamp\nLoaded Module: dnx.coreclr.so\nFound DLL Export: CallApplicationMain\nfailed to locate libcoreclr with error libcoreclrpal.so: cannot open shared object file: No such file or directory\n. ",
    "bitcrazed": "Thanks for moving @davidfowl - didn't realize DNVM was in its own repo! :flushed: \n. @glennc \n\n\"Did you expect it to work or is this just for us to add a check so that it doesn't crash?\"\n\nErm ... well, I kinda expected that if I ran dnvm setup that it'd do so without :rage: shouting :rage: at me in big red, unhelpful text that make me wonder whether something went wrong in the setup and maybe I should expect the setup to have failed in some way.\nA gentle, polite message saying \"DNVM is already installed and ready for use. Setting up your paths...\" would have more than sufficed :grinning: \n. Yep, happy to do so \ud83d\ude09 Will send tonight.\nSent from my Windows Phone\n\nFrom: Glenn Condronmailto:notifications@github.com\nSent: \u200e3/\u200e19/\u200e2015 17:02\nTo: aspnet/dnxmailto:dnx@noreply.github.com\nCc: Rich Turnermailto:rich@bitcrazed.com\nSubject: Re: [dnx] 'dnvm setup' results in 'Cannot overwrite the item ... with itself' error (#1424)\n@bitcrazed Yeah, that's what I thought. Which is fine, and something we should do. Are you interested enough to send a pull request for the dnvm repo? It's just a powershell script. If not that's fine and we will probably fix it in one of the polish pushes we do where we cleanup issues like this.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/aspnet/dnx/issues/1424#issuecomment-83814615\n. Hey Glenn. \nJust submitted DNVM PR #187 for your review: https://github.com/aspnet/dnvm/pull/187\nLet me know if you need additional changes.\nRich.\nFrom: Glenn Condron\nSent: \u200eThursday\u200e, \u200eMarch\u200e \u200e19\u200e, \u200e2015 \u200e17\u200e:\u200e02\nTo: aspnet/dnx\nCc: Richard Turner\n@bitcrazed Yeah, that's what I thought. Which is fine, and something we should do. Are you interested enough to send a pull request for the dnvm repo? It's just a powershell script. If not that's fine and we will probably fix it in one of the polish pushes we do where we cleanup issues like this.\n\u2014\nReply to this email directly or view it on GitHub.\n. If only GitHub issues had a voting mechanism. I'd give this 100 thumbs up.\n. ",
    "xtianus79": "is there any official documentation to this?  where is this coming from? \n. how do you remove kre... you guys and documentation...\n. ",
    "mkosieradzki": "Thank you very much so quick answer.\nI wanted to use automatic Roslyn Loaders, Nuget Loaders and proper assembly neutral types support and project.json. But it looks like I have it up and running even without separate AppDomain (a lot of source code reading behind me). \nThe problem I faced was that assemblies for neutral types must be extracted to a directory where fusion can find them, while I was trying to load them from their in-mem binary images from Resources - kinda dumb of me.\nTo sum up - got it running using Microsoft.Framework.Runtime.DefaultHost - but this is a simple prototype. I need to do a lot of testing now in more complicated scenarios. I hope this is a supported (or will be supported scenario) and I am not doing things completely against the design.\nbtw. any chance Microsoft.Framework.Runtime will be added back to .NET Framework v4.5 nuget package like it was in beta-1 version? It's currently marked as ASP.NET 5/ASP .NET CORE only.\n. I think I understand why :) - they are kinda nightmarish to use while bridging .net 4.5 with asp net 5 (from the .NET side). But they sounded like a great idea in asp.net 5 alone. OK. So if there are so important changes in-progress/ahead I will limit my development against those assemblies and try to keep up with the latest developments including the assembly you have mentioned.\nThank you very much for all the priceless informations.\n. After clarifications in:\nhttps://github.com/aspnet/HttpAbstractions/issues/301 and https://github.com/aspnet/Home/issues/532\nPlease expose Microsoft.Framework.Runtime.Hosting to .NET 4.5.\n. @davidfowl What has happened to  https://github.com/aspnet/dnx/tree/dev/src/Microsoft.Framework.Runtime.Hosting you had mentioned before? It has dissapeared from the dev branch some time ago.\n. @davidfowl Thanks. So just to sum up. Microsoft.Framework.Runtime.Hosting is going to stay or will be provided in another way. It's not working yet and that's why it is not exposed in nightly feed: https://www.myget.org/gallery/aspnetvnext. It is planned to be exposed to .NET 4.5 and it is going to be the main bridge between .NET 4.5 and ASP.NET5 allowing to pass data in-process.\nIf I want to host ASP.NET 5 web application inside my .NET 4.5 application at RTM/RTW time, am I rather supposed to wait for this hosting facilities? Or should I \"steal\" building blocks from DNX451 (as they are not marked for net45) and build my own Microsoft.Framework.Runtime.Hosting-like implementation using Loaders and Microsoft.Framework.Runtime.Interfaces. Both are perfectly OK, but don't want to reinvent the wheel.\nMy plan was quite similiar to what you have suggested in aspnet/Hosting#291 (you have clarified a lot of plans there!): to create OWIN adapter for ASP.NET 5 and marshal OwinContext to ASP.NET5 request context.\nBTW: For me it's quite convenient as I don't intend to use the default HTTP OwinContext but own OwinContext so I don't need any of facilities mentioned in aspnet/Hosting#291.\n. I am dropping this requirement and moving from cross-appdomain in-process hosting to separate process. It is less efficient but much more scalable.\n. @davidfowl From my point of view it is still worth consideration as I haven't implemented the separate process hosting stuff yet. It's in the design phase and I can still reconsider going back to in-process runtime rehosting approach. I can see performance benefits coming from hosting DNX in vanilla .NET as well as I can see benefits allowing people to integrate ASP.NET 5 and ASP.NET 4.6 application in single process what can be huge in terms in step-by-step porting of existing ASP.NET 4.6 applications to the new leaner runtime.\nI can see of course a lot of benefits in scenarios like mine: multiple small .NET 5 sub-apps hosted inside ASP.NET 4.6 app.\nI am currently a bit swamped at my main projects, but I can try to find some time later this month, as long as it is not UNSUPPORTED by design. I mean: I don't want to invest time and effort into creating something that is not feasible by design. Also it would be great to know that if project succeeds, it would be integrated and maintained along with DNX. Implementation is one thing, maintenance completely different.\nI went through code and see you guys did serious refactoring in the hosting area. I think this is still a great idea and now I understand why it was too early to do it before.\n. @MJGraf If you want to work on this together it would be great to have you onboard.\nMy proposition is as follows: \n1. Let me create a prototype upcoming week (I really hope I can find some time for this project) in a forked/new repository on github. I had some attempts on this and even half-working prototypes in earlier DNX builds.\n2. Let's then implement all the interfaces/services required to run:\na) Simple console application\nb) Simple IApplicationBuilder-based hello world http server (from source code and pre-built app)\nc) Example MVC6 applications\nd) Other middlewares: which ones?\ne) Larger MVC6 projects\nf)  ... whatever else we may need to consider implementation complete.\n3. Let's figure out how many changes in core repositories we need to achieve appropriate (efficient) code reuse and investigate whether our implementation can be co-maintained with DNX or not.\nTo be honest I cannot predict point 3 at this moment, but I have some ideas how to handle it.\n. I found couple of hours today to do some research.\n@davidfowl From my short research it makes no sense to reimplement vanilla host as you propose (I might be very wrong).\nI started from adding additional target: net45 to all hosting projects in DNX and ended up in completely reproducing dnx451. I have created pure vanilla host that uses three assemblies from DNX: Microsoft.Dnx.Host, Microsoft.Dnx.Loader, Microsoft.Dnx.Runtime.Abstraction (dnx451 target is absolutely good enough for net45 prototype).\nAfter some experiments (reverse engineering the way command line arguments are handled throughout multiple layers of DNX), I have succeeded to run hello world, and to find how to pass and configure core parameters to the hosting app domain. There are well documented Environment variables and so on. I expect to have this working.\nRunning precompiled Hello World is not much. But next step is to run Microsoft.Dnx.ApplicationHost which can do all the magic: Loading shared assemblies from many locations, compiling sources etc. I predict it highly feasible task.\nFurther steps can include cross-app-domain remoting which shouldn't be difficult to add, although it might require some alteration in startup sequence.\n@MJGraf Have a look at: https://github.com/mkosieradzki/dnx . It's not very impressive, but works with precompiled console application. I assume that approach I am using will allow to reuse nearly all DNX so code it should be highly compatible.\n. Small update: I have successfully managed to run HelloWorld sample from source code / nuget using standard .NET 4.5 application using all the magic of Microsoft.Dnx.ApplicationHost. I have uploaded updated code.\n@MJGraf I will have yet another extremely busy week and will have no time to work on this project. Assuming I have console applications up and running, I see no reasons now to have any problems running even most complex ASP.NET MVC6 apps. There might be some work to be done in integrating HttpListener (or something :) - I don't remember current name of this component). But it should be quite easy from where I ended.\n. I had some really great progress with my research so I decided to complete this today.\n@davidfowl I will need to add net45 targets to three projects generating outputs:\nMicrosoft.Dnx.Runtime.Abstractions - you probably wanted to do this anyway.\nMicrosoft.Dnx.Loader - it's actually a small assembly (3 files) - so alternatively we can just reuse source code, but I see no good reason to not add net45\nMicrosoft.Dnx.Host - together with it's source dependencies: (Microsoft.Framework.CommandLineUtils.Sources, Microsoft.Dnx.Runtime.Internals, Microsoft.Dnx.Runtime.Sources. -if you think it's better to reuse source code... But in my opinion this is so small shared surface it can be safely exposed to net45.\nI will also need to alter all ifdefs in those files (DNX451 -> DNX451 || NET45) for obvious reasons.\nAfter those modifications running DNX apps, Microsoft.Dnx.ApplicationHost is quite easy and does not require any retargeting.\nVanilla host creation will look as follows: include nugget packages for the following three components: 1) Use Microsoft.Dnx.Host.RuntimeBootstrapper (after settings environment)\nOR\n2) Use Microsoft.Dnx.Host.Bootstrapper - just by passing appropriate arguments\nOR\n3) Implement own bootstrapper using code copied from Microsoft.Dnx.Host + Microsoft.Dnx.Runtime.*\nI have created my own bootstrapper to allow passing services to the hosted application.\nI will create a pull request with net45 targets.\nAnd later I will create a second pull request with conditional NET45 feature allowing to pass services to the bootstrapper.\nThis approach will allow to achieve best maintainability.\n. @davidfowl Don't worry David. The most effort went to the research and I can build up a fully function working host just by \"stealing\" 3 assemblies from DNX451 build. The only part of code that would be really helpful to have inside DNX codebase is an alternative bootstrapper that allows passing services from host. (I will create a feature request and can also create a PR if you like, but that's definitely not a rocket science).\nBTW. regarding your previous post: .NET 4.5 version of Microsoft.Dnx.Compilation.Abstractions is definitely not necessary to have it all up and running while Microsoft.Dnx.Runtime.Abstractions is critical (but it is binary equivalent to the DNX451 version so no that's not a blocking problem at the moment).\nReally great stuff about all this things is how thin the external hosting layer is and how much is done by xplat Microsoft.Dnx.ApplicationHost - I really love this design. Even if I stick to my fork I can have it compatible with any runtime as long as they use the same version of Microsoft.Dnx.Runtime.Abstractions.\n. @davidfowl It seems that build has failed for unknown reason (Some problems with travis configuration?)\n. ",
    "LodewijkSioen": "+1\nI help run a large business application that is mostly Webforms. We were planning to start using MVC alongside Webforms (like we already do with SignalR), but it would be painful if we had to stay in MVC5 land indefinitely.\nThere was all this brouhaha around 'One Asp.net' and 'lego pieces that fit together', but this seems to be an entirely new baseplate (to keep the Lego analogy).\n. ",
    "MJGraf": "It would really be great if someone could provide a possibility to host ASP.Net 5 in vanilla .Net.\nI fully understand and appreciate that DNX has many advantages over vanilla .Net, but in particular for already existing applications it may be hard to switch the whole solution to DNX at once. I could well imagine that many people (like me) would first want to try ASP.NET 5 as a \"future-proof Katana replacement\" without having to deal with DNX and maybe later on make the switch to DNX.\nSo having a possibility to host ASP.NET 5 in a vanilla .Net project may materially increase the user base of ASP.NET 5 (even if it was considered a non-first-class way of hosting).\nI would love to help in making this happen, but after having a  look at the two ...Abstractions directories above, I am completely lost and it seems this task is far beyond my skill level. I suppose that the entry point should be WebHostBuilder, which requires particularly an IServiceProvider. But which interfaces need to be implemented apart from that is not clear to me...\n. @mkosieradzki I'm happy to lend a hand to the extent I can understand it.\nMy primary usecase currently is that I implemented a very simple Owin/Katana based webserver for MediaPortal 2 (https://github.com/MediaPortal/MediaPortal-2/commits/FEAT_MP2-437_OwinServer) some time ago. It was more a proof of concept and was meant to replace the very old (and no longer maintained) HttpServer we currently use for streaming media files via http and our implementation of a UPnP server. I would therefore in particular need the StaticFiles Middleware, but WebAPI will be needed as well later on. Unfortunately I have no knowledge at all about MVC.\nMediaPortal 2 has its own quite sophisticated plugin system, where every plugin (in a standard installation maybe 20 or so) consists of a separate dll in its own directory (together with a descriptive plugin.xml file). Every such plugin is therefore an own .csproj. The server application can currently be run as a Windows Service (and for debugging purposes also as console application). Switching all these projects to dnx would be quite a challenge (apart from the fact that I haven't found out, yet, how DNX plays together with WiX, which we use for deployment purposes).\nI was planning to research whether I can just switch our \"main\" projects to DNX and let most of the plugin projects (except for the web server plugin) vanilla .net 451 projects. It seems that running a dnx project as Windows Service is possible (http://taskmatics.com/blog/run-dnx-applications-windows-service/), but what seems to be difficult for me is that dnx projects may reference vanilla .net projects, but not (yet) vice versa.\nThat's where I am now... And the easiest solution for me would be (at least for now) to just host ASP.NET 5 in a vanilla .net project.\nJust let me know when you have your prototype pushed and I will have a look at it!\nThanks!\n. ",
    "0xdeafcafe": "Upon further investigation, this is only thrown on CLR, if I use CoreCLR, it executes perfectly. Could this be to do with corrupted runtimes? My .k folder looks like this:\n\n. Good idea. Re-posted in Home.\n. ",
    "eestein": "Any news on this error? I'm getting the same issue...\nThese are the versions I'm running for dnx and dnu:\n```\nSteinMac:BlackBeard eestein$ dnx --version\nMicrosoft .NET Execution environment\n Version:      1.0.0-rc1-16231\n Type:         CoreClr\n Architecture: x64\n OS Name:      Darwin\n OS Version:   10.11\n Runtime Id:   osx.10.11-x64\nSteinMac:BlackBeard eestein$ dnu --version\nMicrosoft .NET Development Utility\n Version:      1.0.0-rc1-16231\n Type:         CoreClr\n Architecture: x64\n OS Name:      Darwin\n OS Version:   10.11\n Runtime Id:   osx.10.11-x64\n```\nI get a project.lock.json file but I still get unresolved dependencies:\n```\nSteinMac:BlackBeard eestein$ dnu list\nMicrosoft .NET Development Utility CoreClr-x64-1.0.0-rc1-16231\nListing dependencies for BlackBeard (/Users/eestein/Documents/dev/tutos/blackbeard/BlackBeard/project.json)\n[Target framework DNXCore,Version=v5.0 (dnxcore50)]\nUnresolved references:\n Microsoft.AspNet.IISPlatformHandler 1.0.0-rc1-final - Unresolved\n Microsoft.AspNet.Mvc 6.0.0-rc1-final - Unresolved\n Microsoft.AspNet.Server.Kestrel 1.0.0-rc1-final - Unresolved\n Microsoft.AspNet.StaticFiles 1.0.0-rc1-final - Unresolved\n Microsoft.Extensions.Configuration.FileProviderExtensions 1.0.0-rc1-final - Unresolved\n Microsoft.Extensions.Logging 1.0.0-rc1-final - Unresolved\n Microsoft.Extensions.Logging.Console 1.0.0-rc1-final - Unresolved\n Microsoft.Extensions.Logging.Debug 1.0.0-rc1-final - Unresolved\n```\nI can't build =/\nThanks.\n. ",
    "hishamco": "@ChengTian can we add the fix into SignalR-ServiceBus, Signing, DataCommon.SQLite\n repos\n. @ChengTian all the best\n. You are welcome @victorhurdugaci\n. \\cc @ChengTian\n. @ChengTian Done!!\n. @ChengTian also this https://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.Runtime/NuGet/NETPortable/NetPortableProfile.cs#L153 needs to be fix, I will update the PR right now. BTW I tried to build using dnu build but I faced an error in some of the dependencies, any idea to fix it\nthanks ..\n. ",
    "regisbsb": "The problem is that the projects added via global.json do not load their Nuget.config\nAdd the https://www.myget.org/F/aspnetmaster/api/v2 that is on the Nuget.config of the dnx project to your nuget.config or to the visual studio package sources.\nIt's a bit bad that visualstudio does not use the nuget package configuration for the project's you add via source.\n. @shanselman was showing how to add MVC as a source in a video but MVC uses only the public nuget feed. It would be nice to feedback to visual studio the team that you cannot add for example the Options project to your source without getting the @kichalla described error.\n. ",
    "dougajmcdonald": "I'm seeing this on user-secret too. \n\nuser-secret -h\nSystem.NullReferenceException: Object reference not set to an instance of an obj\nect.\n   at SecretManager.CommandOutputProvider..ctor(IRuntimeEnvironment runtimeEnv)\n   at SecretManager.Program..ctor(IRuntimeEnvironment runtimeEnv)\n. I'm on beta4-11566 I can't seem to find a newer one, if I dnvm upgrade from the vnext myget feed that's all I get. Do I need to download something manually?\n. @BrennanConroy I think I must be doing something wrong! dnvm update-self tells me:\n 'Unknown command: 'update-self''.\n\ndnvm upgrade tells me I already have the latest:\nDetermining latest version\n'dnx-clr-win-x86.1.0.0-beta4-11566' is already installed.\nUpdating alias 'default' to 'dnx-clr-win-x86.1.0.0-beta4-11566'\n'dnvm install latest' tells me the same.\nI can't see a release on github for dnvm > beta 4 : https://github.com/aspnet/dnvm/releases\nWill I need to build it myself? was hoping to avoid that if possible.\n. I'm happy to use either, but not 100% clear on how best to ensure they are both in sync!\nI've just run the PS script from the link you sent and confirm I'm now on beta5-11722.\nNow trying to install SecretManager I get:\n\ndnu commands install SecretManager\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='SecretManager'\n  CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='Secret\nManager'\n  CACHE https://www.myget.org/F/aspnetmaster/api/v2/FindPackagesById()?id='Secre\ntManager'\nSystem.ArgumentNullException: Value cannot be null.\nParameter name: path1\n   at System.IO.Path.Combine(String path1, String path2)\n   at Microsoft.Framework.PackageManager.InstallGlobalCommand.CreateTemporaryPro\nject(String installFolder, String packageName, String packageVersion)\n   at Microsoft.Framework.PackageManager.InstallGlobalCommand.d__17.Mov\neNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNot\nification(Task task)\n   at Microsoft.Framework.PackageManager.Program.<>c__DisplayClass4_12.<b_\n_24>d.MoveNext()\n\nAny thoughts? \n. ",
    "IRLeif": "I'm not sure if this is related, or if it's a separate issue.\nMy company limits the Windows profile storage space to 30 MB, and my .dnx directory currently takes up 120 MB in my user directory.\nIt would be very nice if it were possible to somehow move this folder to another location. Is there a config option to change the location of this folder?\nI have also posted this question to StackOverflow, here: http://stackoverflow.com/questions/30613404/how-to-move-dnx-directory-out-of-userprofile\n. ",
    "Suchiman": "This also bugs me, but not only for the reasons already mentioned.\nDNX behaves like a badly ported unix application on windows:\n- being cmd focused (ok, it's still far away from release, expecting more complete tooling later)\n- prefixing folders with . which is totally useless on windows, cheats on alphabetical sorting and is ugly\n- being in the %USERPROFILE% folder where programs don't belong into\nSo i strongly agree on moving it into one of the %AppData% folders and having the . removed, e.g. %AppData%\\dnx\n. I've asked this in a ASP.NET Community Standup and this is unlikely to happen http://blogs.msdn.com/b/webdev/archive/2015/07/07/asp-net-community-standup-july-7-2015.aspx see Q&A or the video\n. So what's the status on this?\nCommunity clearly expressed their idea in the same direction.\n3 months looking at this is some serious work :smile:\n. ",
    "ghuntley": "See also https://twitter.com/davkean/status/628456517205823492\n. ",
    "RichiCoder1": "Agree with all the above. I'm all for cross uniformity, but this is explicitly AppData.\n. Bump! I have a similar issue now. \n. ",
    "onovotny": "This also applies to NuGet v3. Has anyone filed a bug there?\n. This also applies to NuGet v3. Has anyone filed a bug there?\n. During the design of this, please keep Xamarin support (MonoTouch, Xamarin.iOS and MonoAndroid) in mind whatever the solution winds up being. \nThanks\n. During the design of this, please keep Xamarin support (MonoTouch, Xamarin.iOS and MonoAndroid) in mind whatever the solution winds up being. \nThanks\n. Does this PR support building Xamarin library projects too? That's essential to cover \"the world.\" It needs to support MonoTouch, MonoAndroid and Xamarin.iOS if building on Windows (not sure if you can build MonoMac from Windows).\nXamarin support in this case should just be additional reference directories in the Reference Assemblies dir. That's where Xamarin installs their references.\n. Does this PR support building Xamarin library projects too? That's essential to cover \"the world.\" It needs to support MonoTouch, MonoAndroid and Xamarin.iOS if building on Windows (not sure if you can build MonoMac from Windows).\nXamarin support in this case should just be additional reference directories in the Reference Assemblies dir. That's where Xamarin installs their references.\n. I'm not sure it should be seen as a separate issue. It's really about DNX being able to build \"the world\" and Xamarin is part of that now.\nIt appears to be minor changes to this PR to add that support -- at least for Library projects that don't create IPA/IPK files.\n. I'm not sure it should be seen as a separate issue. It's really about DNX being able to build \"the world\" and Xamarin is part of that now.\nIt appears to be minor changes to this PR to add that support -- at least for Library projects that don't create IPA/IPK files.\n. I agree that there's no need to block this, I'll open a new issue.\n. I agree that there's no need to block this, I'll open a new issue.\n. So I can confirm that when I switch to a NuGet reference to the same version of the Humanizer package, the tests execute correctly. This appears to be a local P2P issue.\n. So I can confirm that when I switch to a NuGet reference to the same version of the Humanizer package, the tests execute correctly. This appears to be a local P2P issue.\n. ",
    "vbfox": ":+1: If it is a cache it should be in local-appdata and if it is settings it should in in roaming-appdata.\nIf the same things was done the other way (Applying windows folder conventions on unix) it would have been patched by the person doing the port / package.\nThey often maintain patches to adapt software to their OS/Distribution when the maintainer doesn't want to conform to their platform conventions.\n. ",
    "ygoe": "The other project/issue you referenced is gone. Where can I find it? Just stumbled across this error and this page helped me to fix it.\n. ",
    "fekberg": "I had the same issue and as per @ChengTian instructions, changing Enable 32-Bit Applications to true solved it.\n. ",
    "stodolos": "I have come across this issue and tried to switch to x64, however, if I launch with IIS Express, it is stuck on the x86 version of beta8.  I've tried many things suggested on the web, but not matter what it seems to be stuck on x86.  If I launch the web command, it launches DNX in x64 mode and everything works fine, but then I am not sure how to set the same routing rules that I have in my web.config that IIS uses.  I would prefer IIS Express to do what I'm asking either way :)\n. I take that back... it might be running the DNX in x64 (as I didn't see the *32 next to the task in the task manager), but it still says the following in the error:\n\"LOG: Appbase = file:///C:/Users/CSpanellis/.dnx/runtimes/dnx-clr-win-x86.1.0.0-beta8/bin\nLOG: Initial PrivatePath = NULL\"\n. I actually figured out my issue...  I had set this config setting a while back when I was first configuring my Angular set up:\nmodules runAllManagedModulesForAllRequests=\"true\"\nI narrowed it down to that after seeing as how launching it outside of IIS Express worked fine (aside from my routing settings in my config file), so I then looked at my config file as a possible culprit.  I then started commenting out sections that were different than the standard config, and by process of elimination eventually narrowed it down to this line.\nAll is good now for my set up.\n. ",
    "edmccaffrey": "I'm seeing this error on an Azure standard size instance. The Azure instance is set to 32-bit in application settings, and the publish settings is dnx-clr-win-x86.\n. ",
    "rene-poulsen": "Did you ever get to that documentation part? :-)\nI'm having the same problems as you mention - so before I start using hours on it I hope that you might be able to point me in the right direction.\n. ",
    "stephenrjohnson": "Has there been any movement on this, as I'm having to use nuget for this at the moment. \n. ",
    "adamhathcock": ":+1: +1\n. I updated to beta6-12234 which fixes the dnu restore issue (https://github.com/aspnet/dnx/issues/2240) which is similar to this.  However, I still seem to have dnu publish problems.  Just FYI.\n\"System.IO.FileNotFoundException: Could not find file 'C:\\Users\\hathcoa.dnx\\packages\\Unity\\3.5.1404\\Unity.3.5.1404.0.nupkg'.\n. I've seen this as well in beta8 and the workaround fixes it.  Just tagging to see if there's going to be a fix or just more info about the issue.\nThanks.\n. For example: a lot of the Extensions are targeting a dotnet version and net451 while I'm specifying dnx451 on the base application I'm publishing.  I would expect only to have dotnet (I think) in the published package dependency tree.  Not both targets for those Extension packages.\n. ",
    "humblelistener": ":+1: \n. ",
    "ppumkin": "@TheDarkTrumpet  You solved this issue by compiling Mono from source? I see that bug on Mono was closed 2 months ago but still not in the main repo. Don't really feel like compiling Mono from source, again...\n. ",
    "cbeall": "I\u2019m confused on how dnu pack is supposed to work with dependencies and think the --dependencies option is going to be needed. As it stands now (unless I'm missing something), the lib folder pdb's and the source are not in sync, and the .symbol.nupkg for a project with a dependency cannot be published to symbolsource.\nI\u2019m using 1.0.0-beta5-12103 and have two projects in my src folder. Project A is a dependency of Project B. When I run dnu list on Project B, Project A shows up in the \"Project References.\" \nI'm seeing inconsistencies when I run dnu pack on Project B. When I open up the .nupkg, the nuspec file lists Project A as a dependency which seems right. However the dll for Project A is also appearing in the lib folder. My expectation there is that it either should not be there or that should configurable.\nAside from the extra size of the .nupkg, this is causing a bigger problem specifically with the .symbols.nupkg file. Inside there, the Project A dll  and pdb are again being copied to the lib folder, but the source code from Project A is not. This causes an error when I attempt to publish Project B to symbolsource. I'm getting a \"Pack submission failed\" with a reason that it can't find a particular source file in Project A's pdb.\nI would think the  --dependencies option in dnu pack would control this, where if it is not there, there would be no dependency files added (smaller .nupkg) and that if the option is applied it should add the Project A assemblies as well as the source (in effect merging two projects into one .nupkg).\n. I think they are related. Without the --dependencies option being used, dnu pack is including project dependencies in the lib folder. If that is a bug and is fixed so that they aren't there, I assume symbol source would work as expected.\nAs I understand what you're saying about the --dependencies option (if it were to be implemented), when applied the lib folder should work as its currently working now (adding dependencies to lib). However in addition to that, source files need to be included as well. But that is work that would only need to be done if you decide not to remove the --dependencies option.\n. The issue I'm seeing applies to both regular and symbols .nupkg files.\nI have an application that is made up of two class libraries in the src folder which I'll refer to as mainProj and addOnProj.  addOnProj depends on mainProj\nroot\n- artifacts\n- global.json\n- src\n - mainProj\n - addOnProj\nAfter I pack both projects, mainProj works fine. If I look inside the lib, each framework contains mainProj.dll.\nHowever, when I open either nupkg for addOnProj, each framework folder in the lib contains both mainProj.dll and addOnProj.dll. My understanding is that only addOnProj.dll should be there.\nAnd if it helps, my steps to build the nupkg's are as follows. I'm running dnu restore on the root of those directories, then running dnu pack on each project individually. When I run the pack, I am building in release configuration, and am using --out so that the four .nupkg files (two regular and two symbol) all end up in a single artifacts directory off the root. At no point in the process am I running dnu build as I don't think its necessary (please correct me if I'm wrong).\n. As I was writing that my last comment, I was sort of thinking \"there is no way this could be happening and nobody has noticed.\"  \nThat being the case, the symbol problem is probably not important as that likely only happens when you do what I was doing. I appreciate you taking the time to help me out. Thanks.\n. ",
    "andyalm": "I think it makes sense for them to be in sync. That said, the two that are most important are the name of the generated package and assembly. We have to preserve them for backwards compatibility for downstream consumers.\n. ",
    "david-driscoll": "I think the global.json solution makes sense, it places the responsibility in a single file.\nI think the question comes in, what happens when I as a library consumer try to reference this as source code.  I believe referencing the global.json is how things currently work today in beta3.\nSomething like... projects: [\"src\", \"test\", \"../path/to/source\"] which I references the global.json in the folder which would have the mapping.\n. Will 4 still allow the array syntax by default?\n. Then 3 might make more sense if the idea is to use the same property.\n. What we had a common prefix such as Microsoft.Framework?\n{\n    \"projects\" : {\n        \"*\": [\"src\", \"test\"],\n        \"Microsoft.AspNet.Framework.*\" : \"src/*\",\n        \"Microsoft.AspNet.Framework.*.Tests\" : \"test/*\"\n    }\n}\n. This also doesn't prevent us from doing something similar using the global.json today, correct?  It's just we won't have a way using dnu to do it automatically.\n. ",
    "kijanawoodard": "4 seems like it could be a problem with standard json libraries because of the relevant RFCs.\nhttp://stackoverflow.com/a/23195243/214073\n. 4 seems like it could be a problem with standard json libraries because of the relevant RFCs.\nhttp://stackoverflow.com/a/23195243/214073\n. ",
    "bradwilson": "I like a slightly modified version of 3 (let's call this 3a) to make it clearer that the strings are patterns, not project names:\njson\n{\n    \"projects\": [ \n        \"src/*\", \n        \"test/*\", \n        { \"Foo\" : \"src/SomethingElse\" }\n    ]\n}\n. Or, an alternative 4 that is legal JSON (let's call this 4a):\njson\n{\n    \"projects\" : {\n        \"*\": [\"src\", \"test\"],\n        \"Foo\" : \"src/SomethingElse\",\n        \"Microsoft.AspNet.Mvc.Core\" : \"../../../Mvc/src/Microsoft.AspNet.Mvc.Core\"\n    }\n}\nNote that the array is only necessary if you want more than one path; a simple \"*\": \"src\" would be sufficient if everything is in that one folder.\n. If ordering is an issue, you should be drawn and quartered. :stuck_out_tongue_winking_eye: \n. :+1: It feels indistinguishable from restore on Windows now. Thanks!\n. It's not possible to get an exact repro without asking MyGet to forcefully crash their servers. :-p\nHowever, I would assume an enterprising developer would be able to ensure that 503s and incorrect content types are handled correctly without requiring a Fiddler trace...\n. The DNX version was 1.0.0-beta4.\n. That package name is pretty much the exact opposite of what I asked you to do. :angry: \n. Thanks. :+1: \n. This is the wrong place to open issues for the xUnit.net DNX runner. Please use https://github.com/xunit/xunit instead.\nWe've identified several issues with xUnit.net 2.1 Beta 4 and DNX (especially on Mono). Our recommendations:\n- Using DNX beta 6 or earlier? Use xunit and xunit.runner.dnx 2.1 Beta 3 (on NuGet)\n- Using DNX beta 7 or later? Use xunit 2.1 RC 1 and xunit.runner.dnx 2.1 Beta 5 (on MyGet)\n. Example: https://github.com/xunit/dnx.xunit/commit/bbafa29c1ef39d1c8d7174613c4cf2163b7b30dd\n. ",
    "Bartmax": "4a is pretty clever!\n. On references (dependencies), should/can use foo or somethingelse or both?\nThis would also work as an alias for External nugets? Like \"mvc\" : \"Microsoft.AspNet....\" ??\nAre there any difference when dealing with local projects or Nuget ? \n. maybe we can make it more bright ?\nin this screen, #3 [bart] is perfectly readable, no executable found  is not.\n\n. @hahmed in azure the Name should be DefaultConnection instead of ConnectionString\n. ",
    "congiuluc": "Me too 1vote for 4a\n. ",
    "ErikSchierboom": "+1 for 4a. Seems easy to grasp.\n. Any chance for F# support too?\n. @davidfowl So the VB support will be like a template for how to do F# integration? \n. That looks promising! Will there be any kind of documentation on how new languages can be added, or will we be able to infer that from the added VB support?\n. ",
    "jkotas": "The shutdown sequence for standalone desktop apps is different from shutdown sequence of hosted apps. DNX on Windows is always hosted that explains the behavior you are seeing. Once main method exits, the DNX hosts tells CoreCLR to shutdown the appdomain and then exits the process.\nI do not think that the current desktop or CoreCLR hosting APIs expose an easy way to make the shutdown work like standalone desktop apps today.\ncc @janvorli\n. Not on https://github.com/dotnet/coreclr/issues -> no plans\n. I doubt that there is a way around it.\n. The implementation looks fine to me.\nYou should watch out for unexpected issues ... HostAssemblyManager is a corner case feature that was build and tested for very specific scenario. It is used it a new mode here that it was not used before.\n. LGTM\n. Maybe initialize *pContext as well just in case it suffers from the same problem?\n. ",
    "ryan1234": "This is killing me too. I have a build process that wants to restore packages on Mono and it takes 15 minutes to restore packages. =(\nI think for the time being I'll archive them and unpack them manually from an earlier build. \nWould love for creative solutions/hacks outside of tar'ing up dependencies. \n. ",
    "adamreeve": "I'm still seeing this issue with Mono 4.0.1 and the latest beta6 (1.0.0-beta6-12226). It definitely looks like it's still trying to download packages in parallel.\n. ",
    "Aveline67": "You can copy paste packages from a windows computer to a linux, it works fine\n. ",
    "ganeshran": "facing same issue on Arch Linux. Finally got all packages to install after running dnu restore at least 5 times.\nVersion : beta7-12264\n. I tried both on a natively installed Linux and a VM. Same issue on both. \n. @kplett i am using Mono 4.0.2.\n. ",
    "rkorsun": "same here. Debian 7.8\n. ",
    "SamuelFisher": "I'm having this problem using the microsoft/aspnet:1.0.0-beta5 Docker container\n. ",
    "kplett": "@ganeshran Are you using Mono 4.3? I've experienced similar issues until I switched to Mono JIT compiler version 4.0.1 (tarball Mon Apr 27 01:00:48 PDT 2015). (Currently I'm on beta6)\n. ",
    "mpseidel": "having the same issue when trying to run inside docker on digitalocean (german datacenter) following this tutorial http://blogs.msdn.com/b/webdev/archive/2015/01/14/running-asp-net-5-applications-in-linux-containers-with-docker.aspx using aspnet-Home\\samples\\latest\\HelloWeb\nbuilding and running a node container with an express app only takes a few seconds in the same environment\n. ",
    "migueldeicaza": "Addendum: we could figure out whether the source is the threadpool, or the BeginInvoke support if you try Mono/master which now uses the CLR's thread pool implementation.\n. ",
    "sunsided": "Indeed, I added ENV MONO_THREADS_PER_CPU 2000 to my Dockerfile and now the image build is insanely fast. What kind of black magic is this? :grin: \n. ",
    "Garciat": "@davidfowl of course. Here it is https://github.com/Garciat/dnx-mono-resources-bug\n. Mono changed resource resolution behavior here: mono/mono@52003dc6f73976aa422804ea4a3761bb2bfb5e9a\n. @davidfowl here's the IL from both dnx and mcs: https://gist.github.com/Garciat/b8b364234d89d8079a4a\n. It seems so. I reduced the test case over at Garciat/dnx-mono-resources-bug to reflect this.\ndnx is not the cause.\nFiled a bug on mono: https://bugzilla.xamarin.com/show_bug.cgi?id=28876\n. ",
    "Darkonekt": "Hi, I am getting the exact same error and  stack trace. My problem is trying to run an automated build on a TFS build agent. It copies the file to ...\\Release\\app\\project.json and sets it to read-only. After that the build fails with the same stack trace you are showing at the top of this thread.  I have not been able to run a build. TFS 2013 update 4 build controller and agent. Please update.\n. when I look in the .dnx folder for my user I see 1.0.0-beta-4 for all four folders under runtime.\nI have tried both CORECLR and the the other one 'clr' both X86.  If I compile the solution from the BuildAgent using visual studio it works. But the Automated Build fails everytime. In my stack trace I can see the DNX.targets file is from visual studio 2015 because I can see in the path v14.0.\n. How can I do that? I don't see the beta5 available as a nuget. Please advice how to do the update. This is the only thing preventing me from running an automated build. Thank you.\n. I am probably abusing your time. But let me know or point me in the right direction on how to update my DNX installation to latest beta. This is very urgent to me.\n. nice thanks I will try it\n. ok I upgraded to version using dnvm install and passing \"latest\". which installed version beta4-11566\nI modified the default.txt to use that version. Tried both clr and coreclr as default. but I get the same error message.  Is this the latest version where the fix for this is supposed to be?\n. My dnvm power shell script under C:\\Program Files\\Microsoft DNX\\Dnvm DOES NOT contain a -u or -unstable switch.  This is the function function dnvm-upgrade {\n    param(\n        [Alias(\"a\")]\n        [Parameter(Mandatory=$false, Position=0)]\n        [string]$Alias = \"default\",\n```\n    [Alias(\"arch\")]\n    [ValidateSet(\"\", \"x86\",\"x64\")]\n    [Parameter(Mandatory=$false)]\n    [string]$Architecture = \"\",\n[Alias(\"r\")]\n[ValidateSet(\"\", \"clr\",\"coreclr\")]\n[Parameter(Mandatory=$false)]\n[string]$Runtime = \"\",\n\n[Alias(\"f\")]\n[Parameter(Mandatory=$false)]\n[switch]$Force,\n\n[Parameter(Mandatory=$false)]\n[string]$Proxy,\n\n[Parameter(Mandatory=$false)]\n[switch]$NoNative,\n\n[Parameter(Mandatory=$false)]\n[switch]$Ngen)\n\ndnvm-install \"latest\" -Alias:$Alias -Architecture:$Architecture -Runtime:$Runtime -Force:$Force -Proxy:$Proxy -NoNative:$NoNative -Ngen:$Ngen -Persistent:$true\n```\n}\nAs you can see there is no such switch any ides?\n. ",
    "guardrex": "Yes, I posted in the wrong place. I'll move this.\n. Queued at AppVeyor for over an hour. Is that normal?\n... and after the AppVeyor build, will dnvm update-self get me back to work?\n. ok, thanks\n. @victorhurdugaci My attempts to dnvm install 1.0.0-beta5-11561 -r coreclr -arch x64 (and -11560) failed to get me a dnu restore that works. What's the ETA on a merge like this (I see a bunch of PR's have been around for days)? If it's going to be a while, then I will need to build locally ... or do you know what I'm doing wrong in trying to get an older, working runtime installed?\n. ah ... that explains it then ... I simply didn't go back far enough. Thanks.\n. It might be related to my issues with config.json described at https://github.com/aspnet/Home/issues/474. I'll run a test tomorrow removing the config file from the project to see if that is the source of my issue ... unless anyone else has a tip.\n. Confirmed the issue is related to the path to a config file. See https://github.com/aspnet/Home/issues/474\n. @muratg \n\noption to use CoreCLR in the future\n\nDoes this mean that dnu wrap could be used to roll System.Net.Mail into a dnxcore50 project?\n. @BillHiebert If you mean comments in the project.json file, it was discussed here ...\nhttps://github.com/aspnet/Announcements/issues/24\nhttps://github.com/aspnet/dnx/issues/1816\n. I can't repro your issue with dnu publish for dnx-coreclr-win-x64.1.0.0-beta5-11706 with --runtime active and --no-source. My publish was :+1:\n. It failed; however, these apps I'm working with are coreclr only. I changed the framework to dnx451 and did receive exceptions for ...\nType or namespace name 'Http' does not exist in System.Net.\nType or namespace name 'HttpClient' could not be found.\nType or namespace name 'HttpRequestException' could not be found.\n... but I think that's just because my dependencies are messed up for dnx451. I do see a strange mention of ...\nSystem.InvalidOperationExecption: The given root is invalid at \nMicrosoft.Framework.PackageManager.RestoreCommand.\n<ExecuteCommand>d__68.MoveNext()\nWhen I go back to dnxcore50 and dnx-coreclr-win-x64.1.0.0-beta5-11706, the dnu publish --runtime active --no-source goes fine ... compiles with no warnings, no errors, and no mention of an invalid root.\n. @mgravell Can I confirm with you from your testing that ...\n\"_comment\": \"comment here\",\nwill be fine anywhere in project.json? This is going to be something I would like to use (sparingly, of course) when I need to note something.\n. \"_comment\": \"comment here\",\n... not going to work. Chokes dnu if placed in dependencies.\nNo comments in project.json then? It wasn't discussed that even one comment element could be allowed in each section of project.json? E.g. ...\n{\n    \"comment\": \"Top-level comment\",\n    \"webroot\": \"wwwroot\",\n    \"version\": \"1.0.0\",\n    \"authors\": [ \"Luke Latham\" ],\n    \"description\": \"Beer pong online\",\n    \"copyright\": \"Copyright 2015 Liquored Devs, Inc.. All Rights Reserved.\",\n    \"dependencies\": {\n        \"comment\": \"Dependency section comment\",\n        \"Microsoft.AspNet.Diagnostics\": \"1.0.0-beta5-*\",\n        \"Microsoft.AspNet.Mvc\": \"6.0.0-beta5-*\"\n    },\n    \"commands\": {\n        \"comment\": \"Commands section comment\",\n        \"test\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5001\"\n    },\n    \"frameworks\": {\n        \"comment\": \"Frameworks section comment\"\n        \"dnxcore50\": { }\n    }\n}\n. Don't know if this is exactly related but it looks suspiciously similar: dnu publish when compiler-generated project.json and project.lock.json files get dependencies on the project itself: https://github.com/aspnet/Home/issues/494\n. It's not available yet. See: https://github.com/dotnet/corefx/issues/1006\n. > Otherwise there's not much else you can do other than wait for the .net team to port the package\nOr use my nasty code guides to whip up something to tide you over. The code samples I posted at https://github.com/dotnet/corefx/issues/1006 work on core clr.\n. @davidfowl ... so the bottom line is that dnx451 is required to use the RazorPreCompileModule at this time?\n. @Asshiah Thanks. I had the same result when I was playing with it, and I think that's what @davidfowl was saying. However, I don't want dnx451 in my clean and beautiful dnxcore50-only project.\nI was looking at this in order to possibly use it for Razor view minification, but I think I have something that will work now for that aspnet/Razor #444.\n. Will these changes lead to being able to run .NET 5 without a .NET 4.x framework on the server?\n. Rats! .NET 4.x is so woven into WS2012/WS2012R2 that it's impossible to live without it (especially in an Azure VM situation). The Core Team Blog says, 'Don't even think about it!'\nhttp://blogs.technet.com/b/askcore/archive/2014/04/24/removing-net-framework-4-5-4-5-1-removes-windows-2012-2012r2-ui-and-other-features.aspx\n. @CarlosFreire Check my notes and see if anything there helps: https://github.com/aspnet/Hosting/issues/364#issuecomment-148567294\n. @artemgrygor You're not on the Free tier, correct?\n. That's cool ... then it's not simply a footprint size (i.e., https://github.com/aspnet/dnx/issues/3192).\nI have the mostly known Azure issues with Azure Apps in my comment. It's mostly updated, but I'll update all of the issue links within a week or two. https://github.com/aspnet/Hosting/issues/364#issuecomment-148567294\n. @moozzyk May I ask about a signing scenario ... I just dropped Microsoft.Aspnet.Razor into my app as a project add-in so that I could make some mods to it. Locally when I went to compile and execute, it complained about not having the Key.snk file at C:\\tools. I created that folder and dropped the Key.snk file in ... worked great locally. When I published the app, it threw on the server, requesting the Key.snk file at \\approot\\tools\\. I manually created that folder on the server and gave it the file, and it was cool with that. Two questions:\n1. If I'm only supposed to provide the file such as I am in these cases, how do I get dnx/VS to publish the Key.snk file to approot\\tools (or look for it where it ends up), when what VS really wants to do is take any folder in the project root (e.g., if I put the tools folder in project root) and publish it to C:\\PROJ_FOLDER\\src\\PROJECT\\bin\\output\\approot\\packages\\MY_PROJECT\\1.0.0\\root\\tools so it ends up on the server in F:\\WEBSITE_FOLDER\\approot\\src\\MY_PROJECT\\tools ... but on the server, the file is sought at F:\\WEBSITE_FOLDER\\approot\\tools (which is where I had to manually put it)?\n2. If that's all wrong and I'm not supposed to be using/placing the Key.snk file like this, what should I be doing or can you point me to a good online resource to explain the basics of assembly signing keys for an IIS environment app?\n. @davidfowl ... Regarding it being on the relative path (as it's found in the Razor repo download), no, and that's probably what I screwed up not knowing any better. I just took the Microsoft.AspNet.Razor folder out of the Razor-release\\src folder and just dropped it right into my app (into my src folder). It was quick to just drop in in that way and add it to project.json and global.json and it :sparkles: just works, but that might be a totally wrong way to do it.\n. @davidfowl BRILLIANT! Perfect. Thanks! ... again!!!!\n. @davidfowl Still not working for me. If I setup the project key location like this in project.json ...\n\"keyFile\": \"tools/Key.snk\"\n... and I have a tools folder in the solution (at the same level as the project.json file), then it finds the file locally and VS doesn't choke.\nWhen I VS publish and move the bits, the tools folder ends up here on the server ...\nF:\\PROJECT_FOLDER\\approot\\src\\PROJECT_NAME\\tools\n... but it chokes to a 500. When I click web.cmd to see what's what in the console window, it states ...\nCould not find part of the path 'F:\\PROJECT_FOLDER\\approot\\tools\\Key.snk'\nI can invoke a PS script to move the file to that spot in the output folder, but is that really the way that you want this to work?\nHere's more of the spew in case it helps ...\n\n. Workaround ...\nPublishing to ...\nC:\\PROJECT_FOLDER\\src\\PROJECT\\bin\\output2\n... create a PS script (copy-key-file.ps1) ...\nNew-Item C:\\PROJECT_FOLDER\\src\\PROJECT\\bin\\output2\\approot\\tools -type directory -Force | Out-Null\nCopy-Item -Path tools\\Key.snk -Destination C:\\PROJECT_FOLDER\\src\\PROJECT\\bin\\output2\\approot\\tools -Force\n... and hook it in project.json on ...\njson\n\"scripts\":  {\n    \"prepare\": \"powershell.exe -ExecutionPolicy ByPass -file %project:Directory%/copy-key-file.ps1\"\n},\n... have this in project.json ...\njson\n\"compilationOptions\":  {\n    \"keyFile\": \"tools/Key.snk\"\n},\n... and put the Key.snk key file in a tools folder in the solution (at the same level as the project.json file).\n... but I'm guessing you will say this is not so good jumping through all of these hoops. Is there a better way to go?\n. Is there a --no-source option for using VS's publish command?\n[EDIT] Toolbar \"Build\" > Publish X\n[EDIT] Can I mod the VS publish PS script with the --no-source option somewhere?\n. Found out that the VS setting for Compile source files into NuGet packages adds the --no-source flag to the dnu publish command. Key.snk present in tools folder and found in the right spot. I'm good.\n. Ah ... I see. I'll be back in the office this afternoon to confirm as u say\nthat there is no copy, thus no bug with --no-source. All I know this far is\nthat --no-source did prevent the exception.\nOn Nov 30, 2015 10:33 AM, \"Pawel Kadluczka\" notifications@github.com\nwrote:\n\n@GuardRex https://github.com/GuardRex - if you publish with --no-source\nyou actually should not need the .snk at all. If it is copied it is a\nbug. (.snk files are needed only to build assemblies and --no-source\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/dnx/issues/3029#issuecomment-160716351.\n. @moozzyk I returned to the office too late today to take a second look. I do want to re-trace my steps to confirm the expected behavior. I should have time tomorrow evening. I'll get back you --\n. @moozzyk Ok ... back ... finally. Crazy week.\n\nGood ... behavior confirmed. When VS publish has the File Publish Option \"Compile source files into NuGet packages\" checked, --no-sources is added to the underlying dnu publish command and the Key.snk file is not requested/required. I'm good. Thanks.\nbtw- Tooling is going to add something like \"(--no-sources)\" to that VS publish option text so everyone will know that's what the option is going to do. https://github.com/aspnet/Tooling/issues/318\n. @csunali Are you absolutely certain on the version of HttpPlatformHandler? Several people thought they had v1.2 but actually had v1.0. Double-check just to make sure: Control Panel > Programs > Programs and Features just to be sure. Also note if you never had Application Development role on the server, you'll need to unlock the system.webServer > handlers section at the server level in IIS with Configuration Editor.\nDouble-check the things you've done against my notes: https://github.com/aspnet/Hosting/issues/364#issuecomment-148567294\n. @csunali Yes, it seems like everything is ok on the basics. You changed your project.json setting for webroot to reflect the folder httpdocs (I guess) or else it wouldn't be browseable at all. Can you reach a static file at that web address ... like an html file or a CSS file in wwwroot?\n. @csunali I just meant the webroot entry in project.json ... I mean since you had httpdocs instead of wwwroot ... normally we have ...\n... file contents ...\n    \"fonts\",\n    \"Properties\",\n    \"**.user\",\n    \"msdeploy.bat\"\n  ],\n  \"version\": \"1.0.0\",\n  \"webroot\": \"wwwroot\"\n}\n... so I was just wondering if you changed it to ...\n... file contents ...\n    \"fonts\",\n    \"Properties\",\n    \"**.user\",\n    \"msdeploy.bat\"\n  ],\n  \"version\": \"1.0.0\",\n  \"webroot\": \"httpdocs\"\n}\n... but I believe you probably did do that since its browseable at localhost. I was just checking. Even if it is creating a wwwroot, as long as you have webroot set in project.json, that wwwroot shouldn't be used or be an issue AFAIK.\nCan you browse a static file in the app at  http://dev.suna.li/some_file.txt with some_file.txt in the httpdocs folder and app.UseStaticFiles() below app.UseIISPlatformHandler()? That's a pretty good indication that the IIS-HttpPlatformHandler bits are working ok.\n. @csunali No, I think you are correct on the position of app.UseIISPlatformHandler(); ... that should come first, so I think you're fine there.\n\nwwwroot value within the development environment\n\nI mean you kind'a have to change it to httpdocs in the webroot element of project.json if that's actually where you're serving from. IIS will be pointed to httpdocs.\n\nThe website template that comes with tooling beta 8, out of the box.\n\nYeah ... that sounds good. It will confirm the basics, since we know that template works.\n. @csunali \n\nthe publish output folder does not publish the folder as httpdocs but as wwwroot no matter you changed it prior to publishing.\n\nYeah, that one is definitely above my pay grade here. I would have thought that if you have the httpdocs folder in the project with the files (web.config, static files, etc.), set webroot to httpdocs in project.json, and delete the project.lock.json file at that point to make sure it takes the changes ... I would have thought it would publish to the correct folder structure; then, I would have thought that you only need to move it to the server and point the website to the httpdocs folder on the server ... and that it should \"just work\" :sparkles:. If it's not doing that, then I don't know why it wouldn't and one of the MS pros will step in and tell us what's what.\nWRT looking at it: If you can put up repo, I'll see how you have it structured. I'll shoot it up to my VM and see if I can get it to work here.\n. @davidfowl Confirmed here, too. It publishes a wwwroot folder regardless of the webroot setting in project.json. It doesn't move anything you placed in your webroot-defined folder into the VS-created wwwroot folder. It does correctly take the web.config file from your webroot-defined folder and moves that file into the VS-created wwwroot folder.\n. @vijayrkn Is there an open Github issue on that for public tracking?\n. @AArnott You can script your way to a new version for each publish operation. You can run a PS script on \"prepare\" and provide whatever versioning logic you want. I needed a new patch version for each publish, so I whipped this up: https://github.com/GuardRex/net5-autoupdate-version\n. @anurse I just lost my access to System.Net.Security -23405 ...\n\nThe -23405 package was working for me (RC1) while you're working on a perm fix (for RC2?). Is there any way I can get access to that -23405 package back? \n. @anurse Nevermind ... I found it in one of my project's VS publish output folders, moved a copy of it back to .dnx\\packages, and was able to reference it again. Whew! ... that was close. I'm going to put that -23405 package on CraigsList ... I'll split the take with you.\n. @anurse Rats! :rat: :rat: :rat:\n\n... can I force acceptance of that package?\n. @anurse Strange ... I have the package (the -23405 one) in .dnx\\packages. It's still pulling -23409 on a manual package restore. Is there something else I need to do besides just dropping it into the folder?\n\n. @benadams I put it here (and hoping not to violate any licenses by doing so!): https://github.com/GuardRex/System-Net-Security-23405\n. I'm good ... \"System.Net.Security\": \"4.0.0-beta-23225\", works in place of -23405 ... at least insofar as SslStream is concerned. However, I sent a request to the NuGet owners asking to put -23405 back up.\n. @ericstj states ...\n\n23409 won\u2019t work for Luke since that has our cross-platform split which is specifically hitting the bug in DNU publish.\n23405 is still available there: https://www.myget.org/F/dotnet-core-rel/api/v3/index.json\nSpecifically: https://www.myget.org/F/dotnet-core-rel/api/v2/package/System.Net.Security/4.0.0-beta-23405\nAlso, for Andrew\u2019s fix you can get the latest DNX with the fix here: https://www.myget.org/F/aspnetrc1/api/v2\nYou should be able to upgrade by doing\nset DNX_FEED=https://www.myget.org/F/aspnetrc1/api/v2\ndnvm upgrade\n\n... and thanks to @joshfree for letting me know that -23405 isn't available on the NuGet feed but at the feed shown above. That explains why I lost it for a sec.\n. @anurse @ericstj After mulling things over a bit and trying to settle on something simple but effective to get me to RC2, I think I'll just give -23225 a go. It's on the NuGet release feed, and dnx isn't trying to upgrade it to anything else (e.g., -23409). I only need SslStream, and it seems to be working well out of -23225. Unless you guys think I'm going to break, I'll go forward this way.\n. ~~Confirmed fixed with runtime rc1-update1~~. Thanks @anurse and @ericstj :beers:\n. In case anyone is looking for it, my (crappy) version updater is here ... https://github.com/GuardRex/net5-autoupdate-version ... just don't get your hopes up too much. It's a bit of a stinker. :poop:\n. @jincod Post back if it fails to set the environment per https://github.com/aspnet/Mvc/issues/3254 ... It fails for me, but there was no answer at https://github.com/aspnet/Configuration/issues/342, so I assumed I was doing something wrong myself.\n. @jincod I was hoping to keep my Startup.cs logic along the lines of ...\nc#\nif(machineName.StartsWith(\"STABLE_SERVER_PREFIX_1\", StringComparison.OrdinalIgnoreCase))\n{\n    Configuration[\"ASPNET_ENV\"] = \"Production\";\n    // Other settings here for running on Server environment #1\n}\nelse if (machineName.StartsWith(\"STABLE_SERVER_PREFIX_2\", StringComparison.OrdinalIgnoreCase))\n{\n    Configuration[\"ASPNET_ENV\"] = \"Production\";\n    // Other settings here for running on Server environment #2\n}\nelse\n{\n    // Will be the result of using a local dev box or server\n    Configuration[\"ASPNET_ENV\"] = \"Development\";\n    // Other settings here for running on local box or server\n}\n... the reason being that I like auto-detection of the physical environment to determine if the app should run in dev or prod. I don't like config files all over the place.\nThis logic started to fail in RC1, so I had to move over to checking the environment directly later in the app (i.e., not using the \"ASPNET_ENV\" var but instead looking at the server name everywhere. I don't use .IsDevelopment() or .IsProduction() any longer ... unfortunately).\n. @davidfowl Thanks for telling me about that. I wondered what changed.\nLike this in Startup.cs? ... in a web app?\nc#\ninternal class Program\n{\n    private static void Main(string[] args)\n    {\n        // Test COMPUTERNAME and set ASPNET_ENV here\n    }\n}\n. @davidfowl This isn't getting executed (or the env var isn't getting set) (dnxcore50, x64, IIS Express, standard web app pattern, RC1). I tried it inside and outside of the Startup class.\nc#\ninternal class Program\n{\n    private static void Main(string[] args)\n    {\n        string machineName = Environment.GetEnvironmentVariable(\"COMPUTERNAME\");\n        if (machineName.StartsWith(\"~~~~~~~\", StringComparison.OrdinalIgnoreCase))\n        {\n            Environment.SetEnvironmentVariable(\"ASPNET_ENV\", \"Production\");\n        }\n        else\n        {\n            Environment.SetEnvironmentVariable(\"ASPNET_ENV\", \"Development\");\n        }\n    }\n}\n. I think I'll stick with a direct machine name check in the Startup ctor and save my \"environment\" in configuration/options. It's not for BCL stuff ... just my own app settings. With the official environment default to Production, I'm fine with that.\nI still think there is a slight loss here that the environment is set so early and out of reach of the dev, but I hear you on the startup loader ... makes perfect sense.\nGiven this situation, it would have still have been nice to at least be able to dictate the setting of the env var that would be used for the :sparkles: convenience magic of .IsDevelopment() and .IsProduction(). It's cool ... I might create my own extension .IsAppDevelopmentMode.\n. So just for completeness ...\nCreate an ExtensionMethods.cs file with something like ...\n``` c#\nusing System;\nusing Microsoft.AspNet.Hosting;\nnamespace MyApp.Misc\n{\n    public static class CustomExtensions\n    {\n        public static bool IsAppDevelopmentMode(this IHostingEnvironment myInterface)\n        {\n            if (Environment.GetEnvironmentVariable(\"ASPNET_APP_ENV\") != null && \n                Environment.GetEnvironmentVariable(\"ASPNET_APP_ENV\") == \"Development\")\n            {\n                return true;\n            }\n            return false;\n        }\n    }\n}\n```\nIn Startup.cs ctor, I have my own env var setup based on the environment (my server environment in this case) ...\nc#\nstring machineName = Environment.GetEnvironmentVariable(\"COMPUTERNAME\");\nif (machineName.StartsWith(\"VM_PREFIX_1\", StringComparison.OrdinalIgnoreCase) ||\n    machineName.StartsWith(\"VM_PREFIX_2\", StringComparison.OrdinalIgnoreCase))\n{\n    Environment.SetEnvironmentVariable(\"ASPNET_APP_ENV\", \"Production\");\n}\nelse\n{\n    Environment.SetEnvironmentVariable(\"ASPNET_APP_ENV\", \"Development\");\n}\nThen, I can do this elsewhere in the app ... I can bring in the namespace of my extension (using MyApp.Misc;) and using Microsoft.AspNet.Hosting;, inject IHostingEnvironment env, and ...\nc#\nif (env.IsAppDevelopmentMode())\n{\n    // Do something for the local box or local server\n}\nelse\n{\n    // Do something for the production servers\n}\n... and before a posse forms with pitchforks and torches for extending that interface (namely, not creating a new type from IHostingEnvironment) :facepunch: ... I locked the door to the office ... nobody can get in here! :no_entry_sign: ... a collision of method names is unlikely and nothing is changed by the method.\n. cc: @ardalis @danroth27 Vaguely relevant to https://docs.asp.net/en/latest/fundamentals/configuration.html?highlight=extension%20method#writing-custom-providers ... falls under your \"extreme flexibility\" in the closing paragraph of your excellent doc on the subject.\nYou may prefer to do what I did with IOptions, and that's entirely understandable, but I just wanted to mention that the concept of setting configuration based on the physical environment (not config files named like the environment or config files physcially in the environment), especially as it pertains to development vs. production, isn't part of the article ... and some may wonder about how it might be done.\n. I haven't checked with RC2. If u want me to check with RC2, I'll be back in\nthe office in a few hours and will check.\nOn Dec 7, 2015 11:00 AM, \"John Luo\" notifications@github.com wrote:\n\nShould have been fixed in #2656\nhttps://github.com/aspnet/dnx/issues/2656 I'll take a look why this is\nhappening.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/dnx/issues/3229#issuecomment-162624305.\n. Yes, all of my projects' project.json files have a non-empty publishExclude sections. I use them to keep stuff like node_modules, gulpfile.js, etc. out of my output folders.\n\nI see, so this is \"by design\" in that you would want someone to add global.json to the publishExclude if they happen to have global.json at that folder level in their project. Cool. I get you on that.\nThe reason this happened to me was merely by mistake ... I was doing something ... copying something ... dragging something ... I made a mistake, and my global.json ended up in along with the project files (in src > PlatformIssue), and it broke after deployment. I just wanted to make sure this wasn't an issue.\nI'm closing ... we're good here.\n. @jchannon If you look at https://www.nuget.org/ you can find out manually. In VS, you can check out Tools > NuGet Package Manager > Manage NuGet Packages for Solution ....\n. Yeah, I missed the point of your question. My bad.\n. Don't mix rc1-final, beta8, and rc2 all together like this. Bound to cause issues.\n. ... also, you can drop the \"webroot\": \"wwwroot\" and update for the new hosting: https://github.com/aspnet/Hosting/issues/525#issuecomment-166487480\n[EDIT] Here's the sample: https://github.com/aspnet/IISIntegration/tree/dev/samples/IISSample\n. Dnvm doesn't have a version like the packages do. When you run dnvm update-self, you will get the most recent version.\nFor Kestrel, try 1.0.1-\n. Actually it should be 1.0.0-rc2-16196\n. Make sure you have a package source for \nhttps://www.myget.org/F/aspnetvnext/api/v3/index.json\n... and you should be able to use 1.0.0-rc2-*\n. Four small informational website apps under netstandardapp1.5 & dotnet cli running latest bits:\nIIS Worker Processes: ~4 MB each\nApplication Executables: ~40-60 MB each\nConsole Window Hosts: ~200-400 KB each\n. @VaclavElias It's the current guidance https://docs.asp.net/en/latest/hosting/apppool.html, but there are some significant changes coming in the dotnet cli world in terms of how the runtime/packages are hosted. There will be a standalone/fully-isolated approach and a shared/un-isolated approach, so there might be changes in regard to the usual advice about having one AppPool per app under the un-isolated approach.\nThose are great questions that you asked :+1: You might want to move this issue over to Hosting repo issues. @Elion will know where this goes.\nAlthough the footprint seems a little lighter with these apps I have running compared to what you show there, they really are small apps that I have here, so I have the same concern you do.\n. You can do it ... just open a new issue elsewhere ... close this one ... put the link to this one in the new one. The only question is ... which repo is the best spot? Maybe a team member will jump in and say where the best place for this is.\n. Will netcore1.0 be for packages?\nSide note ... plz let us know when these latest updates are on the CI feed & dotnet cli-ready. I froze packages to ride out the changes, but I'd like to unfreeze and get in on this action asap.\n. Gotcha ...\nnetcoreapp1.0 for Core CLR apps\n~~netstandard1.5~~ netcoreapp1.0 for Core CLR packages\n. I'll go back and re-read the latest wiki docs on the plan. Note ... it's a bit confusing! ... but I'll get it.\n. @pakrym @anurse @ericstj I'm still working with standalone apps (win8-x64 RID). It looks like netcoreapp1.0 with -rc2-* packages and with NETStandard.Library 1.0.0-* runs ok. With either NETStandard.Library 1.5.0-* or adding in one of my NuGet packages, it breaks (that's open at https://github.com/aspnet/Razor/issues/718).\nMay I ask for a few clarifications at this point? No rush ... \"wait\" is fine ... \"idk\" is fine ... just asking ...\n1. Should I stay on NETStandard.Library 1.0.0-* or move to 1.5.0-* at some point? Seems like I should use the latest; but thus far, it breaks with netcoreapp1.0. If I will move to 1.5.0-*, how will I know when to do that?\n2. What's the current status of imports on the TFM? When \"imports\": [ \"dnxcore50\", \"portable-net45+win8\" ] is removed from netcoreapp1.0, I get a lot of packages not ready for it ... e.g., error: System.Diagnostics.TraceSource 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.. We'll have imports around for a while, correct? Is the best way to get a \"poor man's progress report\" to just remove it and see how many packages choke? ... eventually that should dwindle down to a fully restoring app without the imports on the TFM, correct?\n3. I'm still having difficulty getting a straight answer on which RID's to use with which Windows Server platforms. I thought that win8-x64 would be a WS 2012/R2-ish sort of RID, while win10-x64 would be a WS 2016/Nano-ish sort of RID; but apparently from what I've gathered on JabbR that isn't true. They produce different outputs, but there is no guidance on what to use for the standalone app situation with WS. Can you shed any light on that?\n. Thank you so much for this info. Very helpful.\nOn Mar 22, 2016 1:22 PM, \"Eric StJohn\" notifications@github.com wrote:\n\nit breaks (that's open at aspnet/Razor#718\nhttps://github.com/aspnet/Razor/issues/718).\nI put a workaround in today's build to address that problem until the\nwhole stack can get on the latest packages: dotnet/corefx@0f268ed\nhttps://github.com/dotnet/corefx/commit/0f268ed1079c182d71cdf49cde3f339a01d67863\nShould I stay on NETStandard.Library 1.0.0-* or move to 1.5.0-*\n/cc @weshaggard https://github.com/weshaggard You should be able to\nmove now. All that was done was change the major.minor version of this\npackage. We're only building one version, so using 1.0.0 means you are on\nold builds.\nWhat's the current status of imports on the TFM?\nIt should work without import.\nerror: System.Diagnostics.TraceSource 4.0.0-rc2-23826 is not compatible\nwith .NETCoreApp,Version=v1.0\nThat's an old package\nwhich RID's to use with which Windows Server platforms\nWe haven't created separate RIDs for Server. The main differences between\nthe Windows version RIDs as used by the CoreFx packages are as follows;\nwin7 - contains the most API set dlls since none were inbox\nwin8/win81 - contains fewer API set dlls since some were inbox, also\nenables a couple WindowsRuntime packages that are only supported on Win8\nand later\nwin10 - contains API set dlls since almost all are inbox. Right now this\nRID should only be used by UWP apps since there is a case with\nCLRCompression where we package the appx DLL under this RID.\nThe intent is that apps will be compatible with future versions, so if you\ndid a standalone app for Win7 it will still work when upgraded to Win8, and\nso-forth. However, do to the size of the app (number of DLLs for all those\nAPI sets) you might want to use the RID for your minimally supported\nplatform.\nServer 2012 > Win8\nServer 2012 R2 > Win81\nI'd avoid using the Win10 RID for now.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/dnx/issues/3378#issuecomment-200004525\n. @ericstj Regarding dropping the imports from netcoreapp1.0. For my package ...\n\njson\n{\n\"dependencies\": {\n    \"NETStandard.Library\": \"1.5.0-*\",\n    \"System.Net.Http\": \"4.0.1-*\"\n},\n\"frameworks\": {\n    \"netcoreapp1.0\": {}\n},\n\"runtimes\": {\n    \"win81-x64\": {}\n}\n... I do not need the imports. The package restores and dotnet pack's-up fine. For app that consumes the package ...\njson\n\"dependencies\": {\n    \"Microsoft.AspNetCore.Diagnostics\": \"1.0.0-*\",\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0-*\",\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.0-*\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0-*\",\n    \"NETStandard.Library\": \"1.5.0-*\",\n    \"razor_issue_pkg\": \"1.0.0\"\n},\n\"frameworks\": {\n    \"netcoreapp1.0\": {}\n},\n\"runtimes\": {\n    \"win81-x64\": {}\n},\nI'm still getting many errors when I attempt to drop \"imports\": [ \"dnxcore50\", \"portable-net45+win8\" ]. With the imports all is well ... full restore and it compiles fine.\nErrors without imports ...\nErrors in c:\\_APPLICATIONS\\razor_issue_app\\project.json\n    System.Diagnostics.TraceSource 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Threading.ThreadPool 4.0.10-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Numerics.Vectors 4.1.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Reflection.TypeExtensions 4.1.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Text.Encodings.Web 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.ComponentModel 4.0.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Linq.Expressions 4.0.11-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Diagnostics.StackTrace 4.0.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.ComponentModel.Annotations 4.1.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Threading.Tasks.Parallel 4.0.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Runtime.Loader 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    Microsoft.CodeAnalysis.CSharp 1.1.0-rc1-20151109-01 is not compatible with .NETCoreApp,Version=v1.0.\n    Newtonsoft.Json 8.0.3 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Net.WebSockets 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Diagnostics.Contracts 4.0.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Dynamic.Runtime 4.0.11-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Resources.Reader 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    Microsoft.CSharp 4.0.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.ComponentModel.TypeConverter 4.0.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Runtime.Serialization.Primitives 4.1.0 is not compatible with .NETCoreApp,Version=v1.0.\n    Microsoft.CodeAnalysis.Common 1.1.0-rc1-20151109-01 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Security.Claims 4.0.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Security.Principal 4.0.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Collections.Immutable 1.1.37 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Reflection.Metadata 1.1.0 is not compatible with .NETCoreApp,Version=v1.0.\n    Microsoft.Win32.Registry 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    System.Security.Principal.Windows 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0.\n    Some packages are not compatible with .NETCoreApp,Version=v1.0.\n    System.Diagnostics.TraceSource 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.Threading.ThreadPool 4.0.10-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.Numerics.Vectors 4.1.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.Text.Encodings.Web 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.ComponentModel 4.0.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.Linq.Expressions 4.0.11-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.Reflection.TypeExtensions 4.1.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.ComponentModel.Annotations 4.1.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.Threading.Tasks.Parallel 4.0.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.Runtime.Loader 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    Microsoft.CodeAnalysis.CSharp 1.1.0-rc1-20151109-01 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    Newtonsoft.Json 8.0.3 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    runtime.win7.System.Diagnostics.TraceSource 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.Diagnostics.StackTrace 4.0.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.Net.WebSockets 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.Diagnostics.Contracts 4.0.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    runtime.any.System.Linq.Expressions 4.0.11-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    runtime.any.System.Reflection.TypeExtensions 4.1.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.Resources.Reader 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    Microsoft.CSharp 4.0.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.ComponentModel.TypeConverter 4.0.1-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.Runtime.Serialization.Primitives 4.1.0 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    Microsoft.CodeAnalysis.Common 1.1.0-rc1-20151109-01 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.Dynamic.Runtime 4.0.11-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.Collections.Immutable 1.1.37 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    System.Reflection.Metadata 1.1.0 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    Microsoft.Win32.Registry 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n    Some packages are not compatible with .NETCoreApp,Version=v1.0 (win81-x64).\n.NET Command Line Tools (1.0.0-beta-001937)\nProduct Information:\n Version:     1.0.0-beta-001937\n Commit Sha:  3616378130\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.10586\n OS Platform: Windows\n Runtime Id:  win10-x64\nNuGet.config ...\nxml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear />\n    <add key=\"AspNetCI\" value=\"https://www.myget.org/F/aspnetcidev/api/v3/index.json\" />\n    <add key=\"NuGet.org\" value=\"https://api.nuget.org/v3/index.json\" />\n    <add key=\"dotnet-core\" value=\"https://www.myget.org/F/dotnet-core/api/v3/index.json\" />\n    <add key=\"dotnet-cli\" value=\"https://www.myget.org/F/dotnet-cli/api/v3/index.json\" />\n    <add key=\"AspNetvNext\" value=\"https://www.myget.org/F/aspnetvnext/api/v3/index.json\" />\n    <add key=\"LocalPkg\" value=\"C:\\_APPLICATIONS\\razor_issue_pkg\\bin\\Release\" />\n  </packageSources>\n</configuration>\n. @ericstj nuke the cache and try restore again?\n[EDIT] A little confused here, b/c what's wrong with the project.json files and dotnet cli that it can't get the correct packages? ... Is it just a work in progress/in-design to a certain extent? :smile: I'm always (probably) jumping the gun around here a little bit. I might need to slow this :horse: down a bit.\n[EDIT^2] sry ... cross-discussing the same prob in two issues. The packages I'm using with the package and project are in the last issue comment ... all * packages.\n. @ericstj I see. This has turned out after all (and along with the package downgrade issue) to be just a work-in-progress situation.\nI'll do as you suggest and work more directly with matching latest packages. Regarding the imports, I'll perform a \"poor man's import test\" by just keeping the imports while I'm still getting \"not compatible\" mentions. It looks like those will just melt away eventually, leaving me with packages/apps that restore just fine.\n. \n. ",
    "wangkanai": "Does this solve #1642 The system cannot find the path specified\n. How to install DNX Can't seem to find any solution anywhere.\nThanks\n. ",
    "atheken": "I think this is related and may help people getting going with dnx:\nOn OS X, I need to call dnu restore with the following sources in order to get the nightly bits, YMMV.\ndnu restore -s https://www.myget.org/F/aspnetvnext/ -f https://www.nuget.org/api/v2/\n. @davidfowl Is it possible to set default feeds for dnu?\n. @aggieben Hmm, on OS X here, do you happen to know the default location for OS X?\n. ",
    "weidazhao": "I suggest add a new flag such as 'includeSymbols' instead of replying on debug|release.  People should be able to debug release bits as well.\n. ",
    "pemari-msft": "Yep, agreed -- hence my confusion as to why it would require all the aspnetcore50 dependencies. Thanks! Hopefully @ericstj can help. \n. I've read through it. It provides some details but I'm not sure how it particularly answers my questions, particularly about the net451 and net40 issue. Thanks! \n. > I'm not sure I understand... If you have a package with net451 and net40, why would \"our new 'preview dnx451' dll\" be picked? Does the package also contain a dnx451 target? Besides, I don't think there should be any difference in surface area for net451 and dnx451?\nLet me try to clarify. We have a net40 and dnx451 dll today. When customers make a new Console Application targeting .NET 4.5.1 in VS 2015 (a regular one, not a (Package) one), and take a dependency on our library, they currently pull in the dll that exists in the net40 folder as a reference.\nNow, we're retargeting the dnx451 dll to be -> net451. Now the package will have net451 and net40 dlls. In the exact same scenario as above, (A regular Console App targeting .NET 4.5.1) which dll will be pulled in? My understanding is it is the net451 dll. Is this the case? \n. ",
    "ericstj": "Profile111 is Net45 + NetCore45 + WinPhone.  It's effectively a subset of aspnetcore50.\nNormally PCL will add-ref everything in the profile, however I don't think DNX does this.  That's why you have to add all the packages.  Some of those packages you are adding are not even in Profile111 so you're library would fail if it happened to use types from them. Have a look at \"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETPortable\\v4.5\\Profile\\Profile111\\RedistList\\FrameworkList.xml\" to see the assemblies that are part of profile111.\nI can't say I condone using DNX to build a PCL.  DNX might make it look kinda-like a PCL but it doesn't go through all of the build targets and doesn't have the guarantees in place that the library will indeed run there.\n. Here you go.  I forced it by dropping 6 projects in the same directory with different csproj's and same project.json.\nSystem.IO.IOException: The process cannot access the file 'd:\\corefx\\src\\Microsoft.CSharp\\src\\project.lock.json' because it is being used by another process. (TaskId:14)\n   at System.IO.Win32FileStream.Init(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs) (TaskId:14)\n   at System.IO.Win32FileSystem.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, FileStream parent) (TaskId:14)\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) (TaskId:14)\n   at Microsoft.Framework.Runtime.DependencyManagement.LockFileFormat.Write(String filePath, LockFile lockFile) (TaskId:14)\n   at Microsoft.Framework.PackageManager.RestoreCommand.WriteLockFile(String projectLockFilePath, Project project, List`1 graphItems, PackageRepository repository, IEnumerable`1 frameworks) (TaskId:14)\n   at Microsoft.Framework.PackageManager.RestoreCommand.<RestoreForProject>d__75.MoveNext() (TaskId:14)\n--- End of stack trace from previous location where exception was thrown --- (TaskId:14)\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) (TaskId:14)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) (TaskId:14)\n   at Microsoft.Framework.PackageManager.RestoreCommand.<>c__DisplayClass74_0.<<ExecuteCommand>b__0>d.MoveNext() (TaskId:14)\n--- End of stack trace from previous location where exception was thrown --- (TaskId:14)\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) (TaskId:14)\n   at Microsoft.Framework.PackageManager.RestoreCommand.<ExecuteCommand>d__74.MoveNext() (TaskId:14)\n---------- (TaskId:14)\nRestore failed (TaskId:14)\nThe process cannot access the file 'd:\\corefx\\src\\Microsoft.CSharp\\src\\project.lock.json' because it is being used by another process. (TaskId:14)\n. We've worked around it by explicitly specifying all sources.  It might be nice to have for folks migrating from a nuget based system to DNX but it isn't a must have for us.\n. I was surprised as well.  At first I thought we were just hitting this because we didn't have -ConfigFile, but I found that even without configfile nuget will honor the user-wide disable.  I can put together a repro if you like.\n. I think nuget.exe established this behavior and its used by folks to create an isolated build environment.  I don't think you can punt from dnx if there is some suitable replacement for the isolated environment scenario.  If -configfile is added to DNX and it takes precedence over  %AppData%\\NuGet\\nuget.config  we'd be OK with punting, though I do imagine that other folks might trip on this.\n. Just wanted to refcount this issue again.  I've seen a 5 more reports of folks hitting this since last week.\n. For the following I'd expect all dependencies to apply for DNXCore5.0, including System.Runtime and System.Security.Cryptography.Hashing.  That is what will happen when nuget installs the package.  That is not what happens when DNX resolves the package.  DNX omits System.Runtime and System.Security.Cryptography.Hashing\n<group>\n        <dependency id=\"System.Runtime\" version=\"4.0.0-beta-22915\" />\n        <dependency id=\"System.Security.Cryptography.Hashing\" version=\"4.0.0-beta-22915\" />\n      </group>\n      <group targetFramework=\"DNXCore5.0\">\n        <dependency id=\"System.Resources.ResourceManager\" version=\"4.0.0-beta-22915\" />\n        <dependency id=\"System.Security.Cryptography.Encryption\" version=\"4.0.0-beta-22915\" />\n        <dependency id=\"System.Runtime.InteropServices\" version=\"4.0.0-beta-22915\" />\n        <dependency id=\"System.Security.Cryptography.RandomNumberGenerator\" version=\"4.0.0-beta-22915\" />\n      </group>\n. I can, but I thought you'd want to make sure you were compatible with existing packages.  This is a breaking change.\n. Maybe not.  I could have sworn that it behaves this way.  I just explicitly tested it and confirmed it does not. :frowning: Perhaps it was with multiple PCLs that apply?  Anyhow since I can't repro I will close this and update the packages.\n. I checked in the fix over the weekend so the next build you see should have the fix.\n. I'll try to have a look today.\n/cc @Pilchie @rchande @jasonmalinowski\n. works for me :+1: \n. I just noticed that we still hit this bug in beta5, however it is fixed in beta6.  Was that intentional?\n. /cc @anurse \nPlease let us know when there is an official build with this fix.  It's currently blocking our move to the latest DNX.\n. This is Windows.  It's happening on DevDiv's internal team build servers that are used for official Dev14 builds.\n. Simple repro is the following, with no nuget.config in scope.\nset APPDATA=\ndnu restore\n. I presume, I'll know tomorrow :smile:   The build rerun process didn't exhibit the issue so I couldn't get any more data.\n. Build is now hitting this on ProgramData: https://github.com/aspnet/dnx/blob/32358ec9b8970070ff77cbc5beef28c13e3ab09b/src/Microsoft.Framework.PackageManager/NuGet/CommandLine/CommandLineMachineWideSettings.cs#L23.\n```\nSystem.ArgumentNullException: Value cannot be null.\n  Parameter name: root\n     at NuGet.PhysicalFileSystem..ctor(String root)\n     at NuGet.CommandLineMachineWideSettings.<>c__DisplayClass1_0.<.ctor>b__0()\n     at System.Lazy1.CreateValue()\n     at System.Lazy1.LazyInitValue()\n     at System.Lazy`1.get_Value()\n     at NuGet.CommandLineMachineWideSettings.get_Settings()\n     at NuGet.Settings.LoadDefaultSettings(IFileSystem fileSystem, String configFileName, IMachineWideSettings machineWideSettings)\n     at Microsoft.Framework.PackageManager.SettingsUtils.ReadSettings(String solutionDir, String nugetConfigFile, IFileSystem fileSystem, IMachineWideSettings machineWideSettings)\n     at Microsoft.Framework.PackageManager.RestoreCommand.ReadSettings(String solutionDirectory)\n     at Microsoft.Framework.PackageManager.RestoreCommand.d__76.MoveNext()\n```\n. The only two it hit were ProgramData and APPDATA.  I ended up reproing by starting with an environment completely empty of variables except for PATH, WINDIR, SYSTEM and a few others.  These were the only two that caused a crash and I was able to workaround it by setting them to point to an empty temp directory.\n. Also, the places that were crashing seemed to only be reading from these paths and already handled missing content.\n. Don't hardcode.  Since you are just using this to try and find some additional configuration and that configuration is optional just ignore it if you can't resolve the environment variable.\n. So I ran a test where I cleared out the entire environment and then ran dnx with appdata and programdata pointing to some temporary folders, specifying the --packages folder explicitly.\nI saw it wrote an empty xml file to %APPDATA%\\NuGet\\NuGet.Config and wrote some .db files to %ProgramData%\\Microsoft\\Windows\\Caches.  The latter seems to be a side-effect of shellexecute.  The former seems under your control and pretty useless.\n. Feel free to treat this as a suggestion.  I have a workaround and this is just cleanup since the scenario is rather unusual.\n. Net46 is where all the new contracts light up, on net451 you can use a framework assembly ref to System.IO.Compression.Filesystem. \n. /cc @nguerrera @ellismg @stephentoub \nOur packages will need at least distro, version, and arch components in our RID.  Based on this and 1& 2 above it looks to me like you're going to have to produce separate DNXs per distro:version:arch, even if nothing else in DNX is distro specific.  Perhaps you should consider some sort of OS query to determine this instead of tying it to the package?\n. Not sure that'd help, it's a chicken/egg how do you know which CoreCLR implementation assemblies to use until you have the RID to evaluate the package?\n. Just a thought here: why can't you pre-resolve a lock file for the DNX runtime when building DNX?  I imagine your native piece that bootstraps DNX has enough smarts to look at a JSON file to determine paths to dependencies instead of assuming they'll all be in a single folder.  The native piece can then make some calls into native APIs to determine the RID and thus the target section in the lock file to use.\nIt seems pretty heavy handed to fork DNX per distro when the only thing that's likely to be different are some native shims on the bottom of stack.\n. Yeah, let it be a dupe.  For some reason github couldn't find that when searching for compat.\n. Just to be clear, I'd only expect regeneration of the 'invalid' lock files, not the entire repo.\n. Are you dropping * versions too and moving the file to intermediate directory? \n. Also, I suspect this will make our perf problem worse.  If restore always writes the lock we are back to the perf issue that made us notice this bug in the first place.\n. Roughly, perf for our repo when we DNU re-writes lock files compared to when it does not is at least 20x.  We have 884 project.json files, 396 of them use * versioning and check in a lock file for predictable results.\nWe like the * because we can just run dnu restore --lock to update all dependencies to latest.  If we don't have that we'd probably list explicit versions in the project.json and write a tool that updates them all.\nPerhaps we should just try this and see what the perf is to understand if the huge perf hit was from DNU hitting the feed over and over to evaluate *'s or if it is from lock-file generation itself.  I was assuming that * evaluation wouldn't be the dominant factor since most projects use the same set of packages and DNU caches the result across the operation.  Perhaps that was a poor assumption.\n. AFAIK we aren't going to be adding support for that API on CoreCLR /cc @bartonjs.  Even so, the source of this exception is a stub in your own code that throws the NotImplementedException, it isn't coming from any crypto package.\nYou shouldn't be crashing due to something valid in someone's nuget.config which is ambient state on the user's machine.  If you can't handle it you need to either ignore it or emit an intelligible error message.  As it is a regular user would have no clue that something put in their nuget.config file from nuget.exe SetApiKey was causing their DNX projects to fail to build.\n. /cc @rahku\n. Indeed all of these are supported on the platforms being called out.  Looks to me like some sort of DNX or NuGet issue.  The lock file and/or the restore spew may point to the problem.\n. All the versions listed in this thread contain both ref and implementation, so even if a lower version was brought in it doesn't explain why it would trip up the compat check.\n. /cc @chcosta  LGTM\n. To be clear, restore wasn't choosing 4.0.0 of System.IO.Compression, it was using the latest (4.1.0-beta-), however it was consuming the runtime.json from both 4.0.0 and 4.1.0-beta-.\nI looked at this with Ian and found that the compile graph had 4.1.0-beta-23419 but it was still pulling in System.IO.Compression.clrcompression-x86 which is only referenced from the runtime.json in 4.0.0 which should have been completely trimmed.\nWe saw this using a recent RC of DNX so it looks like this NuGet but made it into the DNX codebase as well.\n/cc @davidfowl \n. LGTM, the serialization update shouldn't be needed after tomorrows build.\n. Sure, but one could argue that the Nuget repo behavior is definitely a bug.  So is the recommendation to always use a local packages folder?  That seems to defeat the purpose of the cache.\n. If you're looking for net45 + dnxcore50 that'd be dotnet5.2 (5.4 is for net46 and later).  You can create a nuspec that constructs the portable- moniker including dnxcore50, but that portable- syntax isn't something that's recommended going forward since it's a closed/fixed set of frameworks (as opposed to dotnet* which is open).\nI think your concern here is that nuget.exe pack no longer does the right thing when run on the solution.  I think you'll have to write a nuspec if that is the case.\n. >  it breaks (that's open at aspnet/Razor#718).\nI put a workaround in today's build to address that problem until the whole stack can get on the latest packages: https://github.com/dotnet/corefx/commit/0f268ed1079c182d71cdf49cde3f339a01d67863\n\nShould I stay on NETStandard.Library 1.0.0-* or move to 1.5.0-*\n\n/cc @weshaggard You should be able to move now.  All that was done was change the major.minor version of this package.  We're only building one version, so using 1.0.0 means you are on old builds.\n\nWhat's the current status of imports on the TFM?\n\nIt should work without import.  \n\nerror: System.Diagnostics.TraceSource 4.0.0-rc2-23826 is not compatible with .NETCoreApp,Version=v1.0\n\nThat's an old package\n\nwhich RID's to use with which Windows Server platforms\n\nWe haven't created separate RIDs for Server.  The main differences between the Windows version RIDs as used by the CoreFx packages are as follows;\nwin7 - contains the most API set dlls since none were inbox\nwin8/win81 - contains fewer API set dlls since some were inbox, also enables a couple WindowsRuntime packages that are only supported on Win8 and later\nwin10 - contains API set dlls since almost all are inbox.  Right now this RID should only be used by UWP apps since there is a case with CLRCompression where we package the appx DLL under this RID.\nThe intent is that apps will be compatible with future versions, so if you did a standalone app for Win7 it will still work when upgraded to Win8, and so-forth.  However, do to the size of the app (number of DLLs for all those API sets) you might want to use the RID for your minimally supported platform.\nServer 2012 > Win8\nServer 2012 R2 > Win81\nI'd avoid using the Win10 RID for now.\n. @GuardRex looks like you're picking up old packages rc2-23826.  The latest on dotnet-core feed is rc3-23923 or rc2-23923.\n. Looks like the ASP.NET packages are still bringing in old packages that don't support 'netstandard' moniker.  When you use * it only chooses latest direct references, indirect are still whatever was referenced by direct referenced packages.  You need a newer build of ASP.NET that references the latest packages.\nPreviously CoreFx would try to unify all the packages to a single version/build with entries in the runtime.json, however this caused issues like https://github.com/dotnet/corefx/issues/6603 as well as upset folks who wanted more control of getting exactly the version referenced by their packages.  As a result we stopped doing this.   What that means during pre-release is that you have to be more careful about mixing/matching builds.\nOne thing you could try is directly referencing the latest build of all packages with something like https://gist.github.com/ericstj/2cda9163e22016893733.  When doing this I see that only the following errors:\nMicrosoft.CodeAnalysis.CSharp 1.1.0-rc1-20151109-01 is not compatible with .NETCoreApp,Version=v1.0.\n    Newtonsoft.Json 8.0.3 is not compatible with .NETCoreApp,Version=v1.0.\n    Microsoft.CodeAnalysis.Common 1.1.0-rc1-20151109-01 is not compatible with .NETCoreApp,Version=v1.0.\nThat leaves us with Roslyn and JSon.NET as the only packages still requiring an import.  I believe Roslyn is working on this now: https://github.com/dotnet/roslyn/issues/9891.\n. It looks like the subsequent if (imports != null) line 566 check will always be false.  Are you sure that the fix isn't instead just to close the foreach statement before the following if (imports != null) line 574 check?\n. ",
    "jsinh": "@anurse That makes sense and seems to be the reason of the error. I will try setting up DNX_PACKAGES to see if that helps.\ndnu publish should be the stage where there would be more need of running app as a service.\nThanks for that clue\n. @anurse So the idea works - setting up DNX_PACKAGES with correct path of dnu restored packages folder. One extra thing I had to do is to also provide actual path to the dnx runtime e.g: /home/[username]/.dnx/runtimes/dnx-mono.1.0.0-beta4/bin/dnx\nSo if I do not dnu publish I am almost static while creating init.d script (sorry if I am not thinking in the correct direction) in context of packages folder path and dnx runtime path.\nNext thing I tried is dnu publish and see if that makes things any better, but situation remained same.\nSo now with paths and env. var. in place I get \"Started\" as log output but after that the application stops automatically and returns. Expect it to keep running in background but it doesn't\nsample command I used for reference:\nDNX_PACKAGES=$DNX_PACKAGES_PATH $DNX_COMMAND $APP_DIR kestrel 1>\"$APP_SERVICE_LOG_FILE\" 2>&1 &\n$DNX_PACKAGES_PATH - Path to packages (common in .dnx folder)\n$DNX_COMMAND - Full path to dnx executable\n$APP_DIR - Full path to application base directory\n$APP_SERVICE_LOG_FILE - Application log file name with full path\nOriginal in-development script for reference\nSo what am I missing?\nThanks in advance to everyone who helps.\n. Hello @anurse, yes I did tried dnu publish with --runtime and that helps - No need to refer the DNX statically in init.d script.\nYes that would be ideal in situations when you deploy and try setting up DNX app to run as service with init.d except for the \"Hosting does a Console.ReadLine() and requires a valid TTY`.\nBut I was ALSO trying to configure DNX / ASP.NET application as service so any developer / devops can develop with any XYZ editor, make changes and run the app with single / common / simple and easy to use command - script in place. (This is what I see and have played with while working / fiddling with NodeJS apps, help me if I am thinking it wrong)\nAlso I was asked the same thing as question by one of my blog reader in response to what I have written about few aspects of new ASP.NET stack.\nSo in current situation, the best thing would be to wait until Hosting adopts different pattern than Console.ReadLine() and then I can make some progress on this.\nBTW @Tragetaschen - The three links you refer are all 404 at the moment. Sorry but haven't checked it earlier. \nSide note: Now that VS Code is out for Linux this seems to be less important as such. But would helps in case there is not GUI on linux on cloud VMs / docker containers.\n. @Tragetaschen I guess but not sure.\nThanks for the change :). It is currently floating in in dev / beta-5 i guess. Will try it out when I have a setup to play with nightlies / bleeding edge.\n. ",
    "SergeyKanzhelev": "Do you know the root cause of this issue? We have the same problem for our package.\n. @TripleEmcoder - please find the example on google groups discussion\n. ",
    "kentcb": "Same problem for me today.\n. ",
    "TripleEmcoder": "Could someone attach a sample package that is failing submission to SymbolSource?\n. @SergKanz - thank you for the repro package.\nThe issue has been resolved. Please try to push again and sorry for the trouble!\n. ",
    "Jabe": "Successfully deployed beta6 app to Azure after adding a global.json.\n. ",
    "KodrAus": "+1 for F# support\n. I'm wondering what 'F# support in DNX' should look like idealy. Is a plug to the F# compiler sufficient, or should support for F# go down to Roslyn?\n. @davidfowl I get that, I'm trying to be philosophical\n. ",
    "spencerwi": "Another +1; F# is the whole reason that I'd try to do .NET work (as a Linux/OSX dev)\n. @jskulavik As you pointed out, @Alxandr did already give it a go. This issue is, as I understand it, about official support for F# (a Microsoft language) on Microsoft's own .NET language runtime, using stabilized APIs, rather than unofficial support against beta APIs.\nTrust me, I've tried quite a bit using and digging into Alxandr's YoloDev work, but the problem right now is that aspnet/vNext are in such a \"move fast and break everything\" phase right now that community support is far from stable.\n. ",
    "itajaja": "yay! +1\n. ",
    "Anderman": "@muratg  I found a incorrect xml documetation. Is this something that will be fixed later or do must I make a new issue of this\n/// <summary>\n        /// Initalizes a new instance of the <see cref=\"RoslynCompilationService\"/> class.\n        /// </summary>\n        /// <param name=\"environment\">The environment for the executing application.</param>\n        /// <param name=\"loaderAccessor\">\n        /// The accessor for the <see cref=\"IAssemblyLoadContext\"/> used to load compiled assemblies.\n        /// </param>\n        /// <param name=\"libraryManager\">The library manager that provides export and reference information.</param>\n        /// <param name=\"compilerOptionsProvider\">\n        /// The <see cref=\"ICompilerOptionsProvider\"/> that provides Roslyn compilation settings.\n        /// </param>\n        /// <param name=\"host\">The <see cref=\"IMvcRazorHost\"/> that was used to generate the code.</param>\n        public RoslynCompilationService(\n            IApplicationEnvironment environment,\n            IAssemblyLoadContextAccessor loaderAccessor,\n            ILibraryExporter libraryExporter,\n            ICompilerOptionsProvider compilerOptionsProvider,\n            IMvcRazorHost host,\n            IOptions<RazorViewEngineOptions> optionsAccessor)\n. I have the same problem from VS2015 using F5. But the from the command prompt I can start the application.\nfrom cmd prompt I use\nMicrosoft .NET Execution environment CLR-x86-1.0.0-beta7-15532\nMy global.json is\n{\n    \"projects\": [ \"src\", \"test\", \"../TagHelpers/src\", \"Sample\" ],\n    \"sdk\": {\n        \"version\": \"1.0.0-beta7\"\n    }\n}\nMy Dnvm list say\nActive Version           Runtime Architecture OperatingSystem Alias\n------ -------           ------- ------------ --------------- -----\n       1.0.0-beta5       clr     x64          win\n       1.0.0-beta5       clr     x86          win             b5\n       1.0.0-beta5       coreclr x64          win\n       1.0.0-beta5       coreclr x86          win\n       1.0.0-beta6       clr     x64          win\n       1.0.0-beta6       clr     x86          win             b6\n       1.0.0-beta6       coreclr x64          win\n       1.0.0-beta6       coreclr x86          win\n  *    1.0.0-beta7       clr     x86          win             b7, default\n       1.0.0-beta7-12290 clr     x86          win\n       1.0.0-beta7-12290 coreclr x86          win\n       1.0.0-beta8-15120 clr     x86          win\n       1.0.0-beta8-15120 coreclr x86          win\nFound it.\nForgot to set solution properties\n\n. I seems that this command dnu sources get is not available anymore????\n. Yes there is. I use a different project for datatables. See Datatables\nDo you have problems with the source?\n```\nusing System.Linq.Dynamic;\nusing System.Linq;\nusing Microsoft.AspNet.Mvc;\nusing Microsoft.Data.Entity;\nusing Mvc.JQuery.Datatables;\nusing UserManagement.Models;\nusing System.Linq.Expressions;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Microsoft.AspNet.Identity;\nusing System.Threading.Tasks;\n// For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860\nnamespace UserManagement.Controllers\n{\npublic class role\n{\n    public string Name { get; set; }\n}\npublic class roles : List<Microsoft.AspNet.Identity.EntityFramework.IdentityRole>\n{\n}\n\npublic class UserController : Controller\n{\n    private readonly UserManager<ApplicationUser> _userManager;\n    public UserController(ApplicationDbContext context, UserManager<ApplicationUser> userManager)\n    {\n        DbContext = context;\n        _userManager = userManager;\n\n    }\n\n    public ApplicationDbContext DbContext { get; }\n    [HttpGet]\n    [AllowAnonymous]\n    public ViewResult Index()\n    {\n        //var x = DbContext.Users.Include(u => u.Logins).Select(l => l.Logins).ToArray();\n        return View();\n    }\n    [HttpPost]\n    [AllowAnonymous]\n    public JsonResult Index([FromBody]DataTablesRequest dTRequest)\n    {\n        var q = DbContext.Users.Include(u => u.Logins).ToArray();\n        var yy = DbContext.UserRoles.Join(DbContext.Roles, ur => ur.RoleId, r => r.Id, (ur, r) => new { r.Name, ur.UserId });\n        var z = (from u in DbContext.Users//.Include(l => l.Logins).Include(r => r.Roles)\n                 select new\n                 {\n                     u.Id,\n                     u.Email,\n                     u.EmailConfirmed,\n                     u.UserName,\n                     u.TwoFactorEnabled,\n                     u.LockoutEnd,\n                     Logins = u.Logins.Select(l => new { LoginProvider = l.LoginProvider }),\n                     Roles = yy.Where(ur => ur.UserId == u.Id),\n                     //Roles = u.Roles.Join(DbContext.Roles, ur => ur.RoleId, rr => rr.Id, (ur, role2) => role2).Select(rr => rr),\n                 });\n        var zz = z.ToArray();\n        return new Mvc.JQuery.Datatables.DataTables().GetJSonResult(\n            z\n            , dTRequest);\n    }\n    [HttpGet]\n    [AllowAnonymous]\n    public PartialViewResult Create()\n    {\n        return PartialView();\n    }\n    [HttpPost]\n    [AllowAnonymous]\n    public async Task<IActionResult> Create(ApplicationUser model)\n    {\n        if (ModelState.IsValid)\n        {\n            await _userManager.CreateAsync(model);\n\n            return new EmptyResult();\n        }\n        return PartialView(model);\n    }\n\n\n    [HttpGet]\n    [AllowAnonymous]\n    public PartialViewResult Edit(string Id)\n    {\n        //var dummy = DbContext.Users.Include(u => u.Logins).ToArray();\n        var user = DbContext.Users.Include(u => u.Logins).Include(u => u.Claims).Include(u => u.Roles).FirstOrDefault(u => u.Id == Id);\n        return PartialView(user);\n    }\n    [HttpPost]\n    [AllowAnonymous]\n    public async Task<IActionResult> Edit(ApplicationUser model)\n    {\n        if (ModelState.IsValid)\n        {\n            var user = await _userManager.FindByIdAsync(model.Id);\n            user.AccessFailedCount = model.AccessFailedCount;\n            user.Email = model.Email;\n            user.EmailConfirmed = model.EmailConfirmed;\n            user.LockoutEnabled = model.LockoutEnabled;\n            user.LockoutEnd = model.LockoutEnd;\n            user.PhoneNumber = model.PhoneNumber;\n            user.PhoneNumberConfirmed = model.PhoneNumberConfirmed;\n            user.TwoFactorEnabled = model.TwoFactorEnabled;\n            user.UserName = model.UserName;\n            await _userManager.UpdateAsync(user);\n\n            DbContext.SaveChanges();\n            return new EmptyResult();\n        }\n        return PartialView(model);\n    }\n\n    [HttpGet]\n    [AllowAnonymous]\n    public PartialViewResult Delete(string Id)\n    {\n        var user = DbContext.Users.Single(u => u.Id == Id);\n        return PartialView(user);\n    }\n\n    [HttpPost]\n    [AllowAnonymous]\n    public async Task<IActionResult> Delete(ApplicationUser model)\n    {\n        var user = await _userManager.FindByIdAsync(model.Id);\n        await _userManager.DeleteAsync(user);\n        return new EmptyResult();\n    }\n}\n\n}\n```\n. The problem is a little different. VS2015 'Error list' window doesn't give any errors when rebuild te solution. But the VS2015 'output' window give the same error. So I think it is more VS2015 related.\n\n\n. Ok, I already made a new issue on tooling\n. Thanks you can also use dnx-watch \n[DnxWatcher] info: dnx process id: 3580\nHosting environment: Production\nNow listening on: http://localhost:5000\nApplication started. Press Ctrl+C to shut down.\n. I don't see how static main is related to debugging. Just attach the debugger to the right dnx process. If you don't know then attach to all dnx. You can also add code to start the debugger\nSystem.Diagnostics.Debugger.Launch();\n. @jln1989  Aha, Okee, I have never seen this message. Is the debugger working if launched from code by System.Diagnostics.Debugger.Launch(); or can you debug the starterweb template?\n. ",
    "salerth": "Just starting with .net on OSX, but after this fix I managed to run dnu restore and then dnx . kestrel just fine.\n. I set my DNX_UNSTABLE_FEED var to https://www.myget.org/F/aspnetlitedev/, downloaded 1.0.0-beta8-15542 and these utils now work.\n. ",
    "sgentile": "ok, I see now, my project.json has this\n\"frameworks\": {\n        \"aspnet50\": {},\n        \"aspnetcore50\": {}\n    },\nso I need to make it\n\"frameworks\": {\n        \"dnx451\": {},\n        \"dnxcore50\": {}\n    },\nthis was from a yeoman generator, it must be out of data already.\nso then I ran dnu restore again, and then \ndnx . kestrel\nand I get this:\nSystem.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Framework.ConfigurationModel.IConfiguration' or one of its dependencies. The system cannot find the file specified.\nFile name: 'Microsoft.Framework.ConfigurationModel.IConfiguration'\n  at System.AppDomain.Load (System.String assemblyString, System.Security.Policy.Evidence assemblySecurity, Boolean refonly) [0x00000] in <filename unknown>:0 \n  at System.AppDomain.Load (System.String assemblyString) [0x00000] in <filename unknown>:0 \n  at (wrapper remoting-invoke-with-check) System.AppDomain:Load (string)\n  at System.Reflection.Assembly.Load (System.String assemblyString) [0x00000] in <filename unknown>:0 \n  at Microsoft.Framework.Runtime.Loader.LoadContext.Load (System.String name) [0x00000] in <filename unknown>:0 \n  at Microsoft.Framework.Runtime.Loader.LoadContext.ResolveAssembly (System.Object sender, System.ResolveEventArgs args) [0x00000] in <filename unknown>:0 \n  at System.AppDomain.DoAssemblyResolve (System.String name, System.Reflection.Assembly requestingAssembly, Boolean refonly) [0x00000] in <filename unknown>:0 \n  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)\n  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] in <filename unknown>:0 \nShutting down finalizer thread timed out.\nthis project was from yeoman generator installed yesterday - seems like something is still just not right.\n. sorry, should have specified further - this is on OSX\n. ",
    "npehrsson": "I am getting the exact same error on Azure, it works fine locally but in azure I get this error.\nOnly one thing is the difference and it is not searching for the packages in the packages directory, and I cannot set it to do so either. Any clues?\n. We realised the the way we deployed to azure before just referencing the console app that would be a web job does not work anymore. We need to publish them separatly.\nIt makes it much more complex to publish a web site with a job to azure but that is how it is.\n. ",
    "SPEMoorthy": "I  am also getting the same error.\nD:\\Easwar_DotNetWorkspace\\GSalesWeb\\GSalesWeb>dnx . web\nSystem.InvalidOperationException: Failed to resolve the following dependencies f\nor target framework 'DNX,Version=v4.5.1':\n   EntityFramework.Commands 7.0.0\n   EntityFramework.SqlServer 7.0.0\n   Microsoft.AspNet.Authentication.Cookies 1.0.0\n   Microsoft.AspNet.Authentication.Facebook 1.0.0\n   Microsoft.AspNet.Authentication.Google 1.0.0\n   Microsoft.AspNet.Authentication.MicrosoftAccount 1.0.0\n   Microsoft.AspNet.Authentication.Twitter 1.0.0\n   Microsoft.AspNet.Diagnostics 1.0.0\n   Microsoft.AspNet.Diagnostics.Entity 7.0.0\n   Microsoft.AspNet.Identity.EntityFramework 3.0.0\n   Microsoft.AspNet.Mvc 6.0.0\n   Microsoft.AspNet.Mvc.TagHelpers 6.0.0\n   Microsoft.AspNet.Server.IIS 1.0.0\n   Microsoft.AspNet.Server.WebListener 1.0.0\n   Microsoft.AspNet.StaticFiles 1.0.0\n   Microsoft.AspNet.Tooling.Razor 1.0.0\n   Microsoft.Framework.CodeGenerators.Mvc 1.0.0\n   Microsoft.Framework.ConfigurationModel.Json 1.0.0\n   Microsoft.Framework.ConfigurationModel.UserSecrets 1.0.0\n   Microsoft.Framework.Logging 1.0.0\n   Microsoft.Framework.Logging.Console 1.0.0\n   Microsoft.VisualStudio.Web.BrowserLink.Loader 14.0.0\nSearched Locations:\n  D:\\Easwar_DotNetWorkspace\\GSalesWeb{name}\\project.json\n  D:\\Easwar_DotNetWorkspace\\GSalesWeb\\GSalesWeb\\src{name}\\project.json\n  D:\\Easwar_DotNetWorkspace\\GSalesWeb\\GSalesWeb\\test{name}\\project.json\n  C:\\Program Files\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.1\n{name}.dll\n  C:\\Program Files\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.5.1\n\\Facades{name}.dll\n  C:\\Windows\\Microsoft.NET\\assembly\\GAC_32{name}{version}{name}.dll\n  C:\\Windows\\Microsoft.NET\\assembly\\GAC_64{name}{version}{name}.dll\n  C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL{name}{version}{name}.dll\nTry running 'dnu restore'.\nat Microsoft.Framework.Runtime.DefaultHost.GetEntryPoint(String applicationNa\nme)\n   at Microsoft.Framework.ApplicationHost.Program.ExecuteMain(DefaultHost host,\nString applicationName, String[] args)\n   at Microsoft.Framework.ApplicationHost.Program.Main(String[] args)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly ass\nembly, String[] args, IServiceProvider serviceProvider)\n   at dnx.host.Bootstrapper.RunAsync(List`1 args)\n   at dnx.host.RuntimeBootstrapper.ExecuteAsync(String[] args)\n   at dnx.host.RuntimeBootstrapper.Execute(String[] args)\nD:\\Easwar_DotNetWorkspace\\GSalesWeb\\GSalesWeb>\n. ",
    "jj09": "I have the same error like @SPEmoorthy.\nTried dnu restore and upgrading dnx, but it didn't help.\nEverything works with Visual Studio, but I wanted to try VSCode+console.\n. ",
    "lcostea": "If you run from Visual Studio with IISExpress there are no binaries created in the bin/dnx451 folder.\nAnd the same happened when I Build/Rebuild from Visual Studio.\nBut then I ran dnu rebuild where the project.json is located and the binaries are created.\nAnd at that moment I was able to run dnx . web and the server started.\n. ",
    "iamthemovie": "Looks like this has already been reported and closed and there are conversations in the CoreCLR repo discussing the issue. https://github.com/dotnet/coreclr/issues/882 \n. Yes 4.0.1. \nI tapped into the new DNX homebrew repo yesterday and I believe it's a dependency and upgraded my mono from 3.12 to 4.0.1.\nI will double check on 3.12 :smile: \nThanks!\n. ",
    "fals": "I got as output when dnu restore:\n_ObjectNotFound: (dnu:String) [], CommandNotFoundException_\n. Active Version     Runtime Architecture Location                             Alias\n\n\n1.0.0-beta4 clr     x86          C:\\Users\\FilipeAugusto.dnx\\runtimes default\n. There's no dnu.cmd at directory.\n. @ChengTian I deleted the folder and did the full reinstall for the dnvm. @davidfowl  and @troydai  I already have the most recent version of the .NET Framework, given that this machine has the Visual Studio 2013 Update 4 and the last version of Visual Studio 2015 RC.\nConsoleApp demo working\nHelloWeb demo working\nHelloMVC not working yet due:\n   System.TypeLoadException: M\u00e9todo get_BasePath no tipo Microsoft.Framework.ConfigurationModel.Configuration do assembly M\n   icrosoft.Framework.ConfigurationModel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null nao tem uma implementa\u00e7ao.\n\nThe message laguage is written in PT-BR my current system machine language.\n. ",
    "juanfra684": "OK :) . I could modify first build/dnvm.sh in aspnet/Universe to check only if bash is in the shebang and progressively the occurrences of /bin/bash in each repository. Better?\nIf so, do I need sign the CLA? because I don't want.\n. ",
    "josteink": "I can confirm this is currently an issue for the FreeBSD port-team trying to get corefx building on FreeBSD.\nWould be nice to have this fixed :)\n. I can confirm this is currently an issue for the FreeBSD port-team trying to get corefx building on FreeBSD.\nWould be nice to have this fixed :)\n. Not sure why CI fails. Looks much more complete and I have no objections.\nLGTM\n. Not sure why CI fails. Looks much more complete and I have no objections.\nLGTM\n. I don't have an issue with that. Right now dnu is the one stopping corefx from building. Getting full support is probably a bigger endeavour and needs to be taken one step at a time.\n. I don't have an issue with that. Right now dnu is the one stopping corefx from building. Getting full support is probably a bigger endeavour and needs to be taken one step at a time.\n. ",
    "gregbair": "It's apparently fixed in Mono master, but was repro'd by them in 4.0.1 - https://bugzilla.xamarin.com/show_bug.cgi?id=29499\n. ",
    "akamud": "I think this PR is related to this issue\n. Are you sure it is the exact same error? I had this error before (build 11682) but it didn't happen on the build from yesterday (build 11706).\n. I see, I just realized the coreclr documentation says you should switch to mono before running restore.\nMaybe we could put some more information or emphasis on this info?\n. Any update on this?\n. We are discussing this here aspnet/Hosting#45, it looks like it does watch for changes (as it is killed if you change a .cs file), but it doesn't restart the process.\n. Sorry @CoreyKaylor, I think what I said was misleading. This is my scenario right now (on Windows):\ndnx . --watch web\nChange a .cs file, the process is stopped.\nThis is confirmed here\nThe problem is that it doesn't start up again.\nTo illustrate the difference, if I just run dnx . web and I change a .cs file, it doesn't kill the process, it is still running. So --watch is indeed watching for changes, it just isn't doing the work completely as we expect.\n. I agree that --watch is very confusing right now. We expect the same behavior from all the other tools we are used to work with every day.\nYou can see by the number of issues and Jabbr questions regarding this, if watch the way it is today is the intended goal, we must somehow address this common misunderstanding.\n. ",
    "robertmircea": "When I switched to mono, dnu restore did its job, but when I ran the app:\n``` bash\ndnx . run\nSystem.InvalidOperationException: Failed to resolve the following dependencies for target framework 'DNX,Version=v4.5.1':\n   test 1.0.0\nSearched Locations:\n  /Users/robert/dev/{name}/project.json\n  /Users/robert/.dnx/packages/{name}/{version}/{name}.nuspec\n  /usr/local/Cellar/mono/4.0.1/lib/mono/4.5/{name}.dll\n  /usr/local/Cellar/mono/4.0.1/lib/mono/4.5/Facades/{name}.dll\nTry running 'dnu restore'.\nat Microsoft.Framework.ApplicationHost.Program.Main (System.String[] args) [0x00000] in :0\n```\nMy project.json looks like this:\n``` bash\n{\n    \"version\": \"1.0.0-\",\n    \"code\": [\"/.cs\"],\n\"frameworks\" : {\n    \"dnxcore50\": {\n        \"dependencies\": {\n            \"System.Console\": \"4.0.0-beta-22716\"\n        }\n    }\n}\n\n}\n```\nI just want to demo a simple app using coreclr on a Mac. Is this an option for the moment?\nRegards,\nRobert\n. David, I did this too. Sadly, it does not work either. It says I need to run again dnu restore which does not work.\nWhen in CoreClr will be RTM, do I need to dnx . run even for a console app (will I be able to call the binary directly)? How can I distribute my app without the source code and still be able to run it on another computer?\nOne of my goals would be to build a Linux daemon (headless) app running with .Net coreclr. Also, in order to be a true Linux citizen, it would have to respond to Unix signals.\nIs this type of apps subject to first .net coreclr version release? \n. Regarding dnu restore issue on coreclr, here is the full output:\n``` bash\n\u2500robert at octo in ~/dev/test using\n\u2570\u2500\u25cb dnvm list\nActive Version              Runtime Arch Location             Alias\n------ -------              ------- ---- --------             -----\n  *    1.0.0-beta5-11682    coreclr x64  ~/.dnx/runtimes\n       1.0.0-beta4          mono         ~/.dnx/runtimes      default\n\u256d\u2500robert at octo in ~/dev/test using\n\u2570\u2500\u25cb dnu restore\nSystem.TypeInitializationException: The type initializer for 'Microsoft.Framework.Runtime.Common.CommandLine.AnsiConsole' threw an exception. ---> System.PlatformNotSupportedException: This platform does not support getting the current color.\n   at System.ConsolePal.get_ForegroundColor()\n   at Microsoft.Framework.Runtime.Common.CommandLine.AnsiConsole..ctor(TextWriter writer)\n   at Microsoft.Framework.Runtime.Common.CommandLine.AnsiConsole..cctor()\n   --- End of inner exception stack trace ---\n   at Microsoft.Framework.PackageManager.Program.CreateReports(Boolean verbose, Boolean quiet)\n   at Microsoft.Framework.PackageManager.Program.<>c__DisplayClass3_1.<b__2>d.MoveNext()\nSystem.PlatformNotSupportedException: This platform does not support getting the current color.\n   at System.ConsolePal.get_ForegroundColor()\n   at Microsoft.Framework.Runtime.Common.CommandLine.AnsiConsole..ctor(TextWriter writer)\n   at Microsoft.Framework.Runtime.Common.CommandLine.AnsiConsole..cctor()\n\u256d\u2500robert at octo in ~/dev/test using\n\u2570\u2500\u25cb dnx . run\nSystem.InvalidOperationException: Failed to resolve the following dependencies for target framework 'DNXCore,Version=v5.0':\n   System.Console 4.0.0-beta-22716\nSearched Locations:\n  /Users/robert/dev/{name}/project.json\nTry running 'dnu restore'.\nat Microsoft.Framework.Runtime.DefaultHost.GetEntryPoint(String applicationName)\n   at Microsoft.Framework.ApplicationHost.Program.ExecuteMain(DefaultHost host, String applicationName, String[] args)\n   at Microsoft.Framework.ApplicationHost.Program.Main(String[] args)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   at dnx.host.Bootstrapper.RunAsync(List`1 args)\n   at dnx.host.RuntimeBootstrapper.ExecuteAsync(String[] args)\n   at dnx.host.RuntimeBootstrapper.Execute(String[] args)\n```\nproject.json content is already on this thread above.\n. ``` bash\n\u256d\u2500robert at octo in ~/dev/test using\n\u2570\u2500\u25cb dnvm install 1.0.0-beta5-11682 -u\nDownloading dnx-mono.1.0.0-beta5-11682 from https://www.myget.org/F/aspnetvnext/api/v2\nDownload: https://www.myget.org/F/aspnetvnext/api/v2/package/dnx-mono/1.0.0-beta5-11682\n################################################################## 100.0%\nInstalling to /Users/robert/.dnx/runtimes/dnx-mono.1.0.0-beta5-11682\nAdding /Users/robert/.dnx/runtimes/dnx-mono.1.0.0-beta5-11682/bin to process PATH\n\u2500robert at octo in ~/dev/test using\n\u2570\u2500\u25cb dnu restore\nRestoring packages for /Users/robert/dev/test/project.json\n  GET https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Console'.\n  OK https://www.nuget.org/api/v2/FindPackagesById()?Id='System.Console' 1057ms\nWriting lock file /Users/robert/dev/test/project.lock.json\nRestore complete, 1285ms elapsed\n\u256d\u2500robert at octo in ~/dev/test using\n\u2570\u2500\u25cb dnvm use 1.0.0-beta5-11682 -r coreclr\nAdding /Users/robert/.dnx/runtimes/dnx-coreclr-darwin-x64.1.0.0-beta5-11682/bin to process PATH\n\u256d\u2500robert at octo in ~/dev/test using\n\u2570\u2500\u25cb dnx . run\nSystem.IO.FileLoadException: Resource string id=0x1A88\nFile name: 'test, Culture=neutral, PublicKeyToken=null' ---> System.TypeInitializationException: The type initializer for 'Roslyn.Utilities.SHA1CryptoServiceProvider' threw an exception. ---> System.TypeInitializationException: The type initializer for 'Roslyn.Utilities.HashAlgorithm' threw an exception. ---> System.InvalidOperationException: Sequence contains no elements\n   at System.Linq.Enumerable.SingleTSource\n   at Microsoft.Framework.Runtime.Caching.Cache.<>c__DisplayClass5_0.b__0()\n   at System.Lazy1.CreateValue()\n   at System.Lazy1.LazyInitValue()\n   at Microsoft.Framework.Runtime.Caching.Cache.Get(Object key, Func2 factory)\n   at Microsoft.Framework.Runtime.Caching.CacheExtensions.Get[T](ICache cache, Object key, Func2 factory)\n   at Microsoft.Framework.Runtime.ProjectLibraryExportProvider.GetLibraryExport(ILibraryKey target)\n   at Microsoft.Framework.Runtime.CompositeLibraryExportProvider.<>c__DisplayClass2_0.b__0(ILibraryExportProvider r)\n   at System.Linq.Enumerable.WhereSelectArrayIterator2.MoveNext()\n   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable1 source, Func2 predicate)\n   at Microsoft.Framework.Runtime.CompositeLibraryExportProvider.GetLibraryExport(ILibraryKey target)\n   at Microsoft.Framework.Runtime.LibraryManager.GetLibraryExport(String name, String aspect)\n   at Microsoft.Framework.Runtime.Loader.ProjectAssemblyLoader.Load(String name, IAssemblyLoadContext loadContext)\n   at Microsoft.Framework.Runtime.Loader.ProjectAssemblyLoader.Load(String name)\n   at dnx.host.LoaderContainer.Load(String name)\n   at dnx.host.DefaultLoadContext.LoadAssembly(String name)\n   at Microsoft.Framework.Runtime.Loader.AssemblyLoaderCache.GetOrAdd(String name, Func2 factory)\n   at Microsoft.Framework.Runtime.Loader.LoadContext.Load(AssemblyName assemblyName)\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName(AssemblyName assemblyName)\n   at System.Runtime.Loader.AssemblyLoadContext.Resolve(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName)\n   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.Assembly.Load(AssemblyName assemblyRef)\n   at Microsoft.Framework.Runtime.DefaultHost.GetEntryPoint(String applicationName)\n   at Microsoft.Framework.ApplicationHost.Program.ExecuteMain(DefaultHost host, String applicationName, String[] args)\n   at Microsoft.Framework.ApplicationHost.Program.Main(String[] args)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   at dnx.host.Bootstrapper.RunAsync(List1 args)\n   at dnx.host.RuntimeBootstrapper.ExecuteAsync(String[] args)\n   at dnx.host.RuntimeBootstrapper.Execute(String[] args)\nSystem.TypeInitializationException: The type initializer for 'Roslyn.Utilities.SHA1CryptoServiceProvider' threw an exception. ---> System.TypeInitializationException: The type initializer for 'Roslyn.Utilities.HashAlgorithm' threw an exception. ---> System.InvalidOperationException: Sequence contains no elements\n   at System.Linq.Enumerable.Single[TSource](IEnumerable1 source)\n   at Roslyn.Utilities.HashAlgorithm..cctor()\n   --- End of inner exception stack trace ---\n   at Roslyn.Utilities.HashAlgorithm.LoadAlgorithmCreate(String name)\n   at Roslyn.Utilities.SHA1CryptoServiceProvider..cctor()\n   --- End of inner exception stack trace ---\n   at Roslyn.Utilities.SHA1CryptoServiceProvider..ctor()\n   at Microsoft.CodeAnalysis.CryptographicHashProvider.TryGetAlgorithm(SourceHashAlgorithm algorithmId)\n   at Microsoft.CodeAnalysis.Text.SourceText.CalculateChecksum(Stream stream, SourceHashAlgorithm algorithmId)\n   at Microsoft.CodeAnalysis.Text.SourceText.From(Stream stream, Encoding encoding, SourceHashAlgorithm checksumAlgorithm, Boolean throwIfBinaryDetected)\n   at Microsoft.Framework.Runtime.Roslyn.RoslynCompiler.<>c__DisplayClass14_0.b__0(CacheContext ctx)\n   at Microsoft.Framework.Runtime.Caching.CacheExtensions.<>c__DisplayClass0_01.<Get>b__0(CacheContext ctx)\n   at Microsoft.Framework.Runtime.Caching.Cache.CreateEntry(Object k, Func2 acquire)\n   at Microsoft.Framework.Runtime.Caching.Cache.<>c__DisplayClass5_0.b__0()\n   at System.Lazy1.CreateValue()\n   at System.Lazy1.LazyInitValue()\n   at Microsoft.Framework.Runtime.Caching.Cache.Get(Object key, Func2 factory)\n   at Microsoft.Framework.Runtime.Caching.CacheExtensions.Get[T](ICache cache, Object key, Func2 factory)\n   at Microsoft.Framework.Runtime.Roslyn.RoslynCompiler.CreateSyntaxTree(String sourcePath, CSharpParseOptions parseOptions)\n   at Microsoft.Framework.Runtime.Roslyn.RoslynCompiler.GetSyntaxTrees(ICompilationProject project, IEnumerable1 sourceFiles, IEnumerable1 sourceReferences, CSharpParseOptions parseOptions, Boolean isMainAspect)\n   at Microsoft.Framework.Runtime.Roslyn.RoslynCompiler.CompileProject(ICompilationProject project, ILibraryKey target, IEnumerable1 incomingReferences, IEnumerable1 incomingSourceReferences, Func1 resourcesResolver)\n   at Microsoft.Framework.Runtime.Roslyn.RoslynProjectCompiler.CompileProject(ICompilationProject project, ILibraryKey target, Func1 referenceResolver, Func1 resourcesResolver)\n   at Microsoft.Framework.Runtime.ProjectLibraryExportProvider.<>c__DisplayClass5_0.<GetLibraryExport>b__0(CacheContext ctx)\n   at Microsoft.Framework.Runtime.Caching.CacheExtensions.<>c__DisplayClass0_01.b__0(CacheContext ctx)\n   at Microsoft.Framework.Runtime.Caching.Cache.CreateEntry(Object k, Func2 acquire)\n   at Microsoft.Framework.Runtime.Caching.Cache.<>c__DisplayClass5_0.<AddEntry>b__0()\n   at System.Lazy1.CreateValue()\n   at System.Lazy1.LazyInitValue()\n   at Microsoft.Framework.Runtime.Caching.Cache.Get(Object key, Func2 factory)\n   at Microsoft.Framework.Runtime.Caching.CacheExtensions.Get[T](ICache cache, Object key, Func2 factory)\n   at Microsoft.Framework.Runtime.ProjectLibraryExportProvider.GetLibraryExport(ILibraryKey target)\n   at Microsoft.Framework.Runtime.CompositeLibraryExportProvider.<>c__DisplayClass2_0.<GetLibraryExport>b__0(ILibraryExportProvider r)\n   at System.Linq.Enumerable.WhereSelectArrayIterator2.MoveNext()\n   at System.Linq.Enumerable.FirstOrDefaultTSource\n   at Microsoft.Framework.Runtime.CompositeLibraryExportProvider.GetLibraryExport(ILibraryKey target)\n   at Microsoft.Framework.Runtime.LibraryManager.GetLibraryExport(String name, String aspect)\n   at Microsoft.Framework.Runtime.Loader.ProjectAssemblyLoader.Load(String name, IAssemblyLoadContext loadContext)\n   at Microsoft.Framework.Runtime.Loader.ProjectAssemblyLoader.Load(String name)\n   at dnx.host.LoaderContainer.Load(String name)\n   at dnx.host.DefaultLoadContext.LoadAssembly(String name)\n   at Microsoft.Framework.Runtime.Loader.AssemblyLoaderCache.GetOrAdd(String name, Func2 factory)\n   at Microsoft.Framework.Runtime.Loader.LoadContext.Load(AssemblyName assemblyName)\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName(AssemblyName assemblyName)\n   at System.Runtime.Loader.AssemblyLoadContext.Resolve(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName)\nSystem.TypeInitializationException: The type initializer for 'Roslyn.Utilities.HashAlgorithm' threw an exception. ---> System.InvalidOperationException: Sequence contains no elements\n   at System.Linq.Enumerable.Single[TSource](IEnumerable1 source)\n   at Roslyn.Utilities.HashAlgorithm..cctor()\n   --- End of inner exception stack trace ---\n   at Roslyn.Utilities.HashAlgorithm.LoadAlgorithmCreate(String name)\n   at Roslyn.Utilities.SHA1CryptoServiceProvider..cctor()\nSystem.InvalidOperationException: Sequence contains no elements\n   at System.Linq.Enumerable.SingleTSource\n   at Roslyn.Utilities.HashAlgorithm..cctor()\n\u256d\u2500robert at octo in ~/dev/test using\n\u2570\u2500\u25cb dnvm list\nActive Version              Runtime Arch Location             Alias\n------ -------              ------- ---- --------             -----\n  *    1.0.0-beta5-11682    coreclr x64  ~/.dnx/runtimes\n       1.0.0-beta4          mono         ~/.dnx/runtimes      default\n       1.0.0-beta5-11682    mono         ~/.dnx/runtimes\n``\n. I've upgraded to the latest version (on OSX), the message fordnu restore` has changed into this:\n``` bash\ndnvm install latest -r coreclr -u\nDetermining latest version\nLatest version is 1.0.0-beta5-11744\ndnx-coreclr-darwin-x64.1.0.0-beta5-11744 already installed.\nAdding /Users/robert/.dnx/runtimes/dnx-coreclr-darwin-x64.1.0.0-beta5-11744/bin to process PATH\n\u256d\u2500robert at octo in ~/dev/test using\n\u2570\u2500\u25cb dnu restore\n\nSystem.ArgumentNullException: Value cannot be null.\nParameter name: path1\n   at System.IO.Path.Combine(String path1, String path2, String path3)\n   at NuGet.Settings.LoadDefaultSettings(IFileSystem fileSystem, String configFileName, IMachineWideSettings machineWideSettings)\n   at Microsoft.Framework.PackageManager.SettingsUtils.ReadSettings(String solutionDir, String nugetConfigFile, IFileSystem fileSystem, IMachineWideSettings machineWideSettings)\n   at Microsoft.Framework.PackageManager.RestoreCommand.ReadSettings(String solutionDirectory)\n   at Microsoft.Framework.PackageManager.RestoreCommand.d__68.MoveNext()\n\nRestore failed\nValue cannot be null.\nParameter name: path1\n```\n. ",
    "rkeithhill": "I'm running into a similar issue on Ubuntu trying to get a three line hello world console app to run on dnxcore50.  Except my stack trace complains that the \"type initializer for 'libcrypto' threw an exception.\".  But there are a number of references to SHA1 methods in the stack.\n. I'm on 11744 on Ubuntu and I still had to use mono to do the package restore.  That should work though.  However, running my console app under coreclr beta5 11744 did not work. \n. Here's the entire project.lock.json file:\njson\n{\n  \"locked\": false,\n  \"version\": -9998,\n  \"projectFileDependencyGroups\": {\n    \"\": [],\n    \"DNXCore,Version=v5.0\": [\n      \"System.Console >= 4.0.0-*\"\n    ]\n  },\n  \"libraries\": {\n    \"System.Console/4.0.0-beta-22911\": {\n      \"serviceable\": false,\n      \"sha\": \"aIc52VdBLL/iFsrMoVCnWHTi6aFHidNA5yvuczfd1GEP2GcPIXUUY0gL9g5DKPceKCjDbIx8Mklcs+JR/GhJzg==\",\n      \"frameworks\": {\n        \"DNXCore,Version=v5.0\": {\n          \"dependencies\": {\n            \"System.IO\": \"4.0.0-beta-22911\",\n            \"System.Runtime\": \"4.0.0-beta-22911\"\n          },\n          \"frameworkAssemblies\": [],\n          \"runtimeAssemblies\": [\n            \"lib/aspnetcore50/System.Console.dll\"\n          ],\n          \"compileAssemblies\": [\n            \"lib/contract/System.Console.dll\"\n          ]\n        }\n      },\n      \"files\": [\n        \"License.rtf\",\n        \"System.Console.4.0.0-beta-22911.nupkg\",\n        \"System.Console.4.0.0-beta-22911.nupkg.sha512\",\n        \"System.Console.nuspec\",\n        \"lib/aspnetcore50/System.Console.dll\",\n        \"lib/contract/System.Console.dll\",\n        \"lib/net45/System.Console.dll\",\n        \"lib/portable-wpa81+wp80+win80+net45+aspnetcore50/System.Console.dll\"\n      ]\n    },\n    \"System.IO/4.0.10-beta-22516\": {\n      \"serviceable\": false,\n      \"sha\": \"MUI4VYWN15a1P4/3TS8IWZL5sJFHtZtegpQqWIXFn7mYIwAE+G5yR4Zi8wNeHU6f2yniX/SVm3+s5Is5ro2C6Q==\",\n      \"frameworks\": {\n        \"DNXCore,Version=v5.0\": {\n          \"dependencies\": {\n            \"System.Runtime\": \"4.0.20-beta-22516\",\n            \"System.Text.Encoding\": \"4.0.0-beta-22516\",\n            \"System.Threading.Tasks\": \"4.0.0-beta-22516\"\n          },\n          \"frameworkAssemblies\": [],\n          \"runtimeAssemblies\": [\n            \"lib/aspnetcore50/System.IO.dll\"\n          ],\n          \"compileAssemblies\": [\n            \"lib/contract/System.IO.dll\"\n          ]\n        }\n      },\n      \"files\": [\n        \"License.rtf\",\n        \"System.IO.4.0.10-beta-22516.nupkg\",\n        \"System.IO.4.0.10-beta-22516.nupkg.sha512\",\n        \"System.IO.nuspec\",\n        \"lib/aspnetcore50/System.IO.dll\",\n        \"lib/contract/System.IO.dll\",\n        \"lib/net45/System.IO.dll\",\n        \"lib/portable-wpa81+wp80+win80+net45+aspnetcore50/System.IO.dll\"\n      ]\n    },\n    \"System.Runtime/4.0.20-beta-22516\": {\n      \"serviceable\": false,\n      \"sha\": \"hcvKEB39EXyVhx9U6F2+FdOmca1OtOcmadLJmqWoUWbF8ltOVNR252GXxTKY2TICNAxwFJT2JW3EfvICgOHJ7w==\",\n      \"frameworks\": {\n        \"DNXCore,Version=v5.0\": {\n          \"dependencies\": {},\n          \"frameworkAssemblies\": [],\n          \"runtimeAssemblies\": [\n            \"lib/aspnetcore50/System.Runtime.dll\"\n          ],\n          \"compileAssemblies\": [\n            \"lib/contract/System.Runtime.dll\"\n          ]\n        }\n      },\n      \"files\": [\n        \"License.rtf\",\n        \"System.Runtime.4.0.20-beta-22516.nupkg\",\n        \"System.Runtime.4.0.20-beta-22516.nupkg.sha512\",\n        \"System.Runtime.nuspec\",\n        \"lib/aspnetcore50/System.Runtime.dll\",\n        \"lib/contract/System.Runtime.dll\",\n        \"lib/net45/System.Runtime.dll\",\n        \"lib/portable-wpa81+wp80+win80+net45+aspnetcore50/System.Runtime.dll\"\n      ]\n    },\n    \"System.Text.Encoding/4.0.10-beta-22516\": {\n      \"serviceable\": false,\n      \"sha\": \"7f3KissSbO9xM1gwSdwMDmG53TYgHG9dNG4zFrkLrRP3ioQe7c+t7wkwPVA1ihiEvEVTLeKW9JnDS+L5PQ144Q==\",\n      \"frameworks\": {\n        \"DNXCore,Version=v5.0\": {\n          \"dependencies\": {\n            \"System.Runtime\": \"4.0.0-beta-22516\"\n          },\n          \"frameworkAssemblies\": [],\n          \"runtimeAssemblies\": [\n            \"lib/aspnetcore50/System.Text.Encoding.dll\"\n          ],\n          \"compileAssemblies\": [\n            \"lib/contract/System.Text.Encoding.dll\"\n          ]\n        }\n      },\n      \"files\": [\n        \"License.rtf\",\n        \"System.Text.Encoding.4.0.10-beta-22516.nupkg\",\n        \"System.Text.Encoding.4.0.10-beta-22516.nupkg.sha512\",\n        \"System.Text.Encoding.nuspec\",\n        \"lib/aspnetcore50/System.Text.Encoding.dll\",\n        \"lib/contract/System.Text.Encoding.dll\",\n        \"lib/net45/System.Text.Encoding.dll\",\n        \"lib/portable-wpa81+wp80+win80+net45+aspnetcore50/System.Text.Encoding.dll\"\n      ]\n    },\n    \"System.Threading.Tasks/4.0.10-beta-22516\": {\n      \"serviceable\": false,\n      \"sha\": \"y+sIpjPvqOODL6fmU8ABrQAvcvc8z6Itt59DrKAdxRtndz7rCaYyReri9IpueQoxkovfxe/tbBQA/lGr2yPlpg==\",\n      \"frameworks\": {\n        \"DNXCore,Version=v5.0\": {\n          \"dependencies\": {\n            \"System.Runtime\": \"4.0.0-beta-22516\"\n          },\n          \"frameworkAssemblies\": [],\n          \"runtimeAssemblies\": [\n            \"lib/aspnetcore50/System.Threading.Tasks.dll\"\n          ],\n          \"compileAssemblies\": [\n            \"lib/contract/System.Threading.Tasks.dll\"\n          ]\n        }\n      },\n      \"files\": [\n        \"License.rtf\",\n        \"System.Threading.Tasks.4.0.10-beta-22516.nupkg\",\n        \"System.Threading.Tasks.4.0.10-beta-22516.nupkg.sha512\",\n        \"System.Threading.Tasks.nuspec\",\n        \"lib/aspnetcore50/System.Threading.Tasks.dll\",\n        \"lib/contract/System.Threading.Tasks.dll\",\n        \"lib/net45/System.Threading.Tasks.dll\",\n        \"lib/portable-wpa81+wp80+win80+net45+aspnetcore50/System.Threading.Tasks.dll\"\n      ]\n    }\n  }\n}\n. Well, now I get a different error.  I guess that is progress. :-)\nhillr@hillr1-vm-ubu64:~/src/hello$ dnx . run\nSystem.IO.FileLoadException: 1A88\nFile name: 'hello, Culture=neutral, PublicKeyToken=null' ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.TypeInitializationException: The type initializer for 'libcrypto' threw an exception. ---> System.Security.Cryptography.CryptographicException: Error occurred during a cryptographic operation.\n   at Interop.libcrypto..cctor()\n...\n. Hmm, seems I need to into libssl-dev.  Off to figure out how to do that.\n. OK got libssl-dev installed and I no longer get the libcrpto errors.  However now I get:\n'hello' does not contain a static 'Main' method suitable for an entry point\nI suspect my program.cs file is not being found and consequently not compiled.  Do I need to specify cs files in the project.json file?  I tried \"code\": \"**/*.cs\", but that didnt' help.\n. OK, that does work - finally!  Thanks. Now I need to figure out what it was about my original project.json file that was a bit off.\n. ",
    "nickmccurdy": "Try running it through the artifacts generated by dnu publish.\n. ",
    "dbettin": "Great discussion.. Great way to build a community.\n. ",
    "Romoku": "Is there a way to have both?\n. ",
    "goblinfactory": "+1 for gitter ( I googled \"DNX jabber\" and can't find anything) If you google \"gitter coreclr\" for example,   you immediately find the exact link of how to take part in live discussions. I'm currently stuck with a DNX problem that I can't find any reference to online, and it would be super helpful to have a very quick chat with someone to find out if the problem is repeatable and an issue I should report, or just on my configuration? (I couldn't tell if @davidfowl was hinting it wouldn't work? We don't need access to the actual developers, although seeing them pop into a gitter chat from time to time would be great, instead gitter allows users to connect with each other and support each other. \n. ",
    "sawilde": "\nSeems like a Roslyn issue. Do you get this only with DNX based projects?\n\nFrom my current sample of 1 - yes. It's not actually my code but a user of OpenCover\n\nAh, I see you filed a Roslyn bug as well: dotnet/roslyn#2477\n\n@muratg - I did as I don't know the cause\n. It seems that some people got it working by using the --lib option from dnx (https://github.com/OpenCover/opencover/issues/327)\ne.g.\nOpenCover.Console.exe \n  -target:C:\\users\\jbruun.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta6\\bin\\dnx.exe \n  -targetargs:\"--lib c:\\projects\\cpip\\src\\website\\bin\\debug\\dnx451 c:\\projects\\cpip\\test\\Website.Tests test\" \n  -output:coverage.xml \n  -filter:+[Website]*\n. @davidfowl perhaps you could expand - I haven't really had the time recently to get up to date with dnx et al (I work with fat clients mainly) - why would this be consider hacky?\n. Okay - so is there another way this can be done currently or would something else have to be done - have other profiler tools experienced the same/similar issues?\n. what we found was that the dll being loaded had been modified from the original dll supplied and no longer aligned with the PDB as such the instrumentation that was using the PDB to align IL with source code no longer worked.\n. ",
    "overeemm": "Because of this, the whole getting started on macosx (http://dotnet.github.io/core/getting-started/) is broken, right?\n. @colemickens thanks, that worked :)\n. ",
    "IRooc": "Seems like since 1.0.0-beta7-12290 the dnx . kestrel on a coreclr target does nothing anymore on a Mac and linux. \nsame for dnu restore (which ofcourse calls dnx internally)\n. @BrennanConroy thanks, any idea how I can see on which version the issue #2397 will be available?\n. Tried dnx . kestrel on coreclr version beta7-12321 on a mac but still it returns to the prompt immediately without any output. \ndnx --h says Trace/BPT trap: 5\n. No problem. Thanks for this all!\n. Just a bump but running either dnu restore or dnx kestrel on 1.0.0-beta8-15120 coreclr x64 on mac still just outputs Trace/BPT trap: 5 at the commandline when tried with the aspnet/Home samples\n. @Grochni according to a comment here https://github.com/aspnet/dnx/issues/2580 the 15530 was a bad build. We'll have to wait for a newer one.\n. still fails on CoreCLR-x64-1.0.0-beta6-12232 is this the latest?\ndnu build output:\n```\nMicrosoft .NET Development Utility CoreCLR-x64-1.0.0-beta6-12232\nBuilding Proj2 for DNX,Version=v4.5.1\n  Using Project dependency Proj2 1.0.0\n    Source: /home/rooc/Documents/Projects/Test1/Proj2/project.json\nUsing Package dependency Microsoft.AspNet.FileProviders.Embedded 1.0.0-beta6-11634\n    Source: /home/rooc/.dnx/packages/Microsoft.AspNet.FileProviders.Embedded/1.0.0-beta6-11634\nSystem.UriFormatException: Invalid URI: The format of the URI could not be determined.\n   at System.Uri.CreateThis(String uri, Boolean dontEscape, UriKind uriKind)\n   at NuGet.PathUtility.GetRelativeUri(String path1, String path2)\n   at NuGet.PathUtility.GetRelativePath(String path1, String path2, Char separator)\n   at NuGet.PathUtility.GetRelativePath(String path1, String path2)\n   at Microsoft.Framework.PackageManager.BuildContext.ShowDependencyInformation(IReport report)\n   at Microsoft.Framework.PackageManager.BuildContext.Initialize(IReport report)\n   at Microsoft.Framework.PackageManager.BuildManager.BuildInternal(String projectPath)\n   at Microsoft.Framework.PackageManager.BuildManager.Build()\n   at Microsoft.Framework.PackageManager.BuildConsoleCommand.<>c__DisplayClass0_0.b__1()\n   at Microsoft.Framework.Runtime.Common.CommandLine.CommandLineApplication.Execute(String[] args)\n   at Microsoft.Framework.PackageManager.Program.Main(String[] args)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   at dnx.host.Bootstrapper.RunAsync(List`1 args, IRuntimeEnvironment env, FrameworkName targetFramework)\n   at dnx.host.RuntimeBootstrapper.ExecuteAsync(String[] args, FrameworkName targetFramework)\n   at dnx.host.RuntimeBootstrapper.Execute(String[] args, FrameworkName targetFramework)\n```\n. Just to make sure, this is the dnx . run output: Seems the same but different callstack\n``\nSystem.UriFormatException: Invalid URI: The format of the URI could not be determined.\n   at System.Uri.CreateThis(String uri, Boolean dontEscape, UriKind uriKind)\n   at NuGet.PathUtility.GetRelativeUri(String path1, String path2)\n   at NuGet.PathUtility.GetRelativePath(String path1, String path2, Char separator)\n   at NuGet.PathUtility.GetRelativePath(String path1, String path2)\n   at Microsoft.Framework.Runtime.ResourcePathUtility.GetResourceName(String projectFolder, String resourcePath)\n   at Microsoft.Framework.Runtime.EmbeddedResourceProvider.<>c__DisplayClass0_0.<GetResources>b__1(KeyValuePair2 resourceFile)\n   at System.Linq.Enumerable.WhereSelectEnumerableIterator2.MoveNext()\n   at System.Collections.Generic.List1..ctor(IEnumerable1 collection)\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable1 source)\n   at Microsoft.Framework.Runtime.EmbeddedResourceProvider.GetResources(ICompilationProject project)\n   at Microsoft.Framework.Runtime.CompositeResourceProvider.<>c__DisplayClass3_0.b__0(IResourceProvider provider)\n   at System.Linq.Enumerable.d__12.MoveNext()\n   at System.Collections.Generic.List1..ctor(IEnumerable1 collection)\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable1 source)\n   at Microsoft.Framework.Runtime.CompositeResourceProvider.GetResources(ICompilationProject project)\n   at Microsoft.Framework.Runtime.ProjectLibraryExportProvider.<>c__DisplayClass5_0.b__4()\n   at Microsoft.Framework.Runtime.Roslyn.RoslynCompiler.<>c__DisplayClass8_0.b__1()\n   at Microsoft.Framework.Runtime.Roslyn.CompilationContext.ResolveResources()\n   at System.Lazy1.CreateValue()\n   at System.Lazy1.LazyInitValue()\n   at Microsoft.Framework.Runtime.Roslyn.CompilationContext.LazyList1.GetEnumerator()\n   at System.Linq.Enumerable.Any[TSource](IEnumerable1 source)\n   at Microsoft.CodeAnalysis.Compilation.ReportManifestResourceDuplicates(IEnumerable1 manifestResources, IEnumerable1 addedModuleNames, IEnumerable1 addedModuleResourceNames, DiagnosticBag diagnostics)\n   at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.CompileImpl(CommonPEModuleBuilder moduleBuilder, Stream win32Resources, Stream xmlDocStream, Boolean emittingPdb, DiagnosticBag diagnostics, Predicate1 filterOpt, CancellationToken cancellationToken)\n   at Microsoft.CodeAnalysis.Compilation.Compile(CommonPEModuleBuilder moduleBuilder, Stream win32Resources, Stream xmlDocStream, Boolean emittingPdb, DiagnosticBag diagnostics, Predicate1 filterOpt, CancellationToken cancellationToken)\n   at Microsoft.CodeAnalysis.Compilation.Emit(EmitStreamProvider peStreamProvider, EmitStreamProvider pdbStreamProvider, EmitStreamProvider xmlDocumentationStreamProvider, EmitStreamProvider win32ResourcesStreamProvider, IEnumerable1 manifestResources, EmitOptions options, CompilationTestData testData, Func1 getHostDiagnostics, CancellationToken cancellationToken)\n   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable1 manifestResources, EmitOptions options, CancellationToken cancellationToken)\n   at Microsoft.Framework.Runtime.Roslyn.RoslynProjectReference.Load(IAssemblyLoadContext loadContext)\n   at Microsoft.Framework.Runtime.Loader.ProjectAssemblyLoader.Load(AssemblyName assemblyName, IAssemblyLoadContext loadContext)\n   at Microsoft.Framework.Runtime.Loader.ProjectAssemblyLoader.Load(AssemblyName assemblyName)\n   at dnx.host.LoaderContainer.Load(AssemblyName assemblyName)\n   at dnx.host.DefaultLoadContext.LoadAssembly(AssemblyName assemblyName)\n   at Microsoft.Framework.Runtime.Loader.AssemblyLoaderCache.GetOrAdd(AssemblyName name, Func2 factory)\n   at Microsoft.Framework.Runtime.Loader.LoadContext.Load(AssemblyName assemblyName)\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName(AssemblyName assemblyName)\n   at Microsoft.Framework.Runtime.Loader.LoadContext.Microsoft.Framework.Runtime.IAssemblyLoadContext.Load(AssemblyName assemblyName)\n   at Microsoft.Framework.Runtime.AssemblyLoadContextExtensions.Load(IAssemblyLoadContext loadContext, String name)\n   at Microsoft.Framework.Runtime.DefaultHost.GetEntryPoint(String applicationName)\n   at Microsoft.Framework.ApplicationHost.Program.ExecuteMain(DefaultHost host, String applicationName, String[] args)\n   at Microsoft.Framework.ApplicationHost.Program.Main(String[] args)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   at dnx.host.Bootstrapper.RunAsync(List1 args, IRuntimeEnvironment env, FrameworkName targetFramework)\n   at dnx.host.RuntimeBootstrapper.ExecuteAsync(String[] args, FrameworkName targetFramework)\n   at dnx.host.RuntimeBootstrapper.Execute(String[] args, FrameworkName targetFramework)\n``\n. Hi onrc1-15779` on dnu restore and dnx kestrel I get the following output and it doesn't run with DNX_TRACE=1\n```\ntestpc1:testproject testuser$ dnu restore\nLoaded module: dnx.coreclr.dylib\nFound export: CallApplicationMain\nInformation: [DomainManager] Using CoreCLR\ntestpc1:testproject testuser$\ntestpc1:testproject testuser$ dnx -p test/TestWeb/ kestrel\nLoaded module: dnx.coreclr.dylib\nFound export: CallApplicationMain\nInformation: [DomainManager] Using CoreCLR\ntestpc1:testproject testuser$\n```\n. It is on a mac, I'll try a small project later AFK currently.  The mono dnu restore works fine though. \n. On mac installed icu and no issues anymore. \n. ",
    "Grochni": "@BrennanConroy  I'm using 1.0.0-beta8-15530 and I'm still only seeing Trace/BPT trap: 5 when running dnu restore\n. ",
    "shaneprice": "ok done\n. ",
    "CoreyKaylor": "In my case that isn't true. There is no process left running that's monitoring for changes. It runs the tests once and that's it.\n. It's hard to hear such an absolute statement like \"I don't think --watch is ever going to make sense for tests\" without responding in a snarky fashion so forgive me. The statement alone implies that --watch shouldn't belong on dnx in that case. Without it there, it may have to require config changes? This would be less than ideal for most users looking for this behavior.\nI can see that when implementing a --watch capability with a very narrow minded view to support live reload capabilities for web application development that you could have that opinion. It absolutely is useful for tests to provide auto test capabilities. Almost every community in existence can do this today so I would say that alone validates whether or not it makes sense, but I'm not sure why I should need to defend that point. Good news is that regardless of the outcome nodemon works fine to achieve the behavior I'm looking for.\nTo the statment about terminate after test run, or terminate after requested to do so. What difference does that make? The same behavior is possible regardless. To a user executing dnx and seeing the list of options, one of which is --watch the expectation is the same. The process will restart after a change is made automatically giving a fast feedback cycle that doesn't require me ever leaving my editor.\n. Yeah, it's a bit naive to incorporate watch from the perspective of a single project as well. Doesn't really account for dependent project references without deeper analysis that's probably overkill anyways. Watch should almost always be from the root of the repository in my opinion.\n. For anyone else looking for similar behavior this works great. From the root of your repository you can run the following.\nnodemon --ext \"cs,json\" --exec \"dnx ./tests/pathtotestprojectdir test\"\n. No it doesn't run them in a continuous loop even when there are no changes. It's the equivalent of saying every time you detect changes, run this Process.Start that I hand you in --exec option and to your point the test project exits and nodemon reports in the first run the output from the test execution as well as the exit status of the test process. You make a change and it re-runs the process again. If there are failed tests, failed compile, etc. I never leave my editor and get feedback typically in under a second including the time for it to detect that a file changed.\nTo bring it back to the current supported use-case. Most other ways I've seen the implementation for  --watch in web applications is a proxy server is started and proxies requests to the application. In the case of a file change, the proxy application ensures that the real application process has been restarted, but the user's request from the browser never dies because it's interacting with the proxy and not the application itself. This also makes it easier in most cases to show more contextual startup problems because the proxy can report those errors in a web response as well. To your earlier comment about the process exit, the --watch option if selected should deal with process crashes as well. So once the code responsible for the crash is fixed it can begin serving requests again without restarting your command that technically should have continued to watch and restart.\n. Still also think the watch needs to expand beyond the view of the project only. It's very common to change a file in a referenced project within the same solution. It would be ideal to not require re-running the command in that case.\n. That's good to hear. That part was an assumption on my part, and as assumptions go...\n. ",
    "mikeobrien": "@Tratcher \"I don't think --watch is ever going to make sense for tests.\" This is the kind of comment that makes us look bad to other communities. Everybody else has this and it rocks.\n. ",
    "dpnevmatikos": "\nThe file watcher on mono is sorta busted.\n\n@davidfowl  I also can't get it to work properly (Linux mint) using:\ndnx --watch . kestrel\nIt kills the process completely...\n. ",
    "johnpapa": "I liked this so I put this together for OSX as a bash script\nhttps://github.com/johnpapa/aspnet5-starter-demo#dnxmon \n. @davidfowl  Are you in talks with them on when this will be released? \nI might suggest adding some notes to your aspnet pages to give people a heads up on the friction like this, so they know you have a handle on it.\n. where is the workaround documented in https://github.com/aspnet/Home ?\n. ",
    "Buildstarted": "Here's a simple way to restart dnx with a batch file on windows\nfor /l %%x in (1, 1, 1000000) do (\n    dnx --watch . web\n)\n. ",
    "vestimir": "Thanks! \n. ",
    "mgravell": "@muratg well, I expect there's nothing I can do to change your mind on that, but: that's a major disappointment. It was really, and I mean really nice to be able to comment in there. I've heard lots of positive things about this, and removing it is going to be unpopular. Not perhaps revolution-worthy, but enough to take the shine off something that was really sweet.\nIf you can reconsider, I urge you to.\n. Yes, I understand the dilemma. Quite the bind. Oh well. I guess I'm just\ngoing to have \"_note0\": \"blah blah blah\" scattered in.\nOn 7 May 2015 10:13 pm, \"Murat Girgin\" notifications@github.com wrote:\n\n@mgravell https://github.com/mgravell I understand the value, but based\non an internal discussion, we have decided that it's not worth it to break\nthe spec http://www.ietf.org/rfc/rfc4627.txt.\nTools like npm, bower etc already lack the support so there was\nalready a bit of inconsistency between the JSON files within an ASP.NET 5\nproject.\nAlso, we expect 3rd party tools to interact with project.json files in\nthe future, and we can't guarantee all their parsers will have support for\ncomments.\nPlease see why Douglas Crockford decided to remove them from JSON here\nhttps://plus.google.com/+DouglasCrockfordEsq/posts/RK8qyGVaGSr.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/dnx/issues/1816#issuecomment-100020899.\n. Just to opine as an independent party: when it comes to a tool that is packaging things in a deployment container, defaulting to \"Release\" absolutely (to me) feels the natural and most expected behavior, and the one that you will almost always want. I said so much here. The one saving grace of the current process is that it does at least end up in a /debug/ folder. But I can imagine virtually everyone doing:\n- dnu pack\n- start .\n- looks in explorer\n- \"wtf? why did that build debug? why would I want a debug nupkg?\"\n- dnu pack --help\n- dnu pack --configuration Release\n\nThis also fortunately gets saved by the fact that there isn't currently a dnu push (to nuget), because if that also defaulted to debug, a lot of packages would be uploaded to nuget in debug mode without the author either intending it, or knowing it.\n. If nothing else, could we perhaps have a -c === --configuration abbreviation?\n. Looking forward to the new tools - another excuse to blog! but ultimately, the specific tool isn't the issue here; presumably (at least in the discussion, if not the pull request) we're implicitly also talking about the equivalent functionality in the new cli.\nIf you're on the verge of nuking the existing tool: agree it makes absolutely no sense to worry about the PR; but the discussion ... possibly does have some life left in it.\n. @davidfowl would that actually be a terrible default? Most people debugging will be using multiple projects in an IDE, just stepping through. The IDE already specifies this explicitly and obviously...\n. ",
    "glen-84": "@dsplaisted,\n\nMicrosoft should push for comments to be included in the JSON spec. The reasons for it not being included are weak.\n\nAnd ...\n\nThe moment a parser expands the feature set, the document can no longer be parsed by other parsers. It's not at all intuitive that you can comment in project.json but not in bower.json or package.json. This is why it should be part of the spec once again, and why I thought it would be interesting to see how the spec writers would respond to such a request from a large corporation.\n\nSee https://github.com/aspnet/Tooling/issues/13#issuecomment-98988817.\n. I think that NPM made the assumption that if your project depends on NPM packages, the project itself was an NPM package (an issue, FWIW). Obviously, this is not always true \u2013 ASP.NET 5 projects, for example, are dependent on NPM packages, but are not themselves NPM packages. The same is true for Bower and any other package managers.\nSo I guess the question is, are there scenarios where this project.json file would be included in a non-DNX project? Are you able to use NuGet (v3?) without a project.json file?\nIt might be too late now, but something like dnx-solution.json, dnx-project.json, and nuget.json might have made sense.\n. :+1: How else would you reference a single project if src contains multiple projects?\n. @ChengTian,\nIf src contains multiple projects, then all[*] of those projects are included, when I may just want to include one.\n[*] For some reason, right now, it's including three of my projects and excluding MyProj.Tests.\n. @muratg Will this not be fixed in beta5?\n. The parent folder has a global.json, yes, and the SDK versions are the same (last tested with 1.0.0-beta5-11781).\n. You can set the SDK version in your global.json file.\n. > So, everytime I create a project I have to do this?\nCurrently, when you use a VS project template, it will use the default SDK. This is an issue since the default SDK might not be compatible with the dependencies referenced in the project template. For this reason, it is most-likely going to change so that a specific template is \"pinned\" to a specific version of the SDK. So, a template created for beta4 will use the beta4 SDK by default.\n\nBut I've created a project called ASPNETvnext (empty) that does not have a global.json.\n\nAn empty ASP.NET 5 web application does have a global.json file (it's under solution items). Which project template did you use?\n. ",
    "NeelBhatt": "I tried to combine few points from https://github.com/aspnet/Announcements/issues/24 here in blog : https://neelbhatt40.wordpress.com/2015/08/21/new-json-parser-in-vnext-no-comments-yet/ for people who are not on Github. Hope it helps!\n. :+1:  for this! And I guess this should be announced!\n. I like this :+1: \n. may be related to https://github.com/aspnet/dnx/issues/2802\n. Are you running from VS or from command line? Because currently there is no support for loading resources from VS. \n. Try running from command line. For VS it is currently not supported.\nSee : https://github.com/aspnet/dnx/issues/2727\n. I guess It is more like a VS tooling issue. May be it is related to this:\nhttps://github.com/aspnet/Tooling/issues/206\n. ",
    "ashic": "It's probably way too late now, but any reason to focus on json instead of js? There's precedence for using a language to specify a project - sbt does this successfully. This allows for comments, variables, custom stuff and leads to a lot of optional flexibility. Specifying the config as project.js could result in something like:\nproject = {\n   //existing content goes here\n}\nThoughts?\n. ",
    "timmydo": "I think it would be nice to see this changed also. Might make it easier for things like kudu to distinguish between nodejs and asp.net apps.\n. Yeah, looks like the lock file uses forward slashes\n. ",
    "tlk": "It is interesting to observe the different naming strategies for TypeScript, Azure Webjobs and ASP.NET on http://schemastore.org/json/\nTypeScript: uses project related naming\n\nhttp://json.schemastore.org/tsconfig\nhttp://json.schemastore.org/tsdrc\nhttp://json.schemastore.org/tslint\n\nAzure Webjobs: uses project related naming\n\nhttp://json.schemastore.org/settings.job (outlier)\nhttp://json.schemastore.org/webjobs-list\nhttp://json.schemastore.org/webjob-publish-settings\n\nASP.NET: lives in its own world\n\nhttp://json.schemastore.org/config\nhttp://json.schemastore.org/global\nhttp://json.schemastore.org/launchsettings\nhttp://json.schemastore.org/project\n\nWarning: bikeshedding alert!\n. ",
    "henkmollema": "This can be closed :smile_cat: \n. Will also add a commit with using nameof in src.\n. Just rebased. Could someone take a look at this? :smile:\n/cc @davidfowl @ChengTian \n. That makes sense, thanks!\n. https://github.com/aspnet/Home/issues/679\n. Works, thanks! :+1: \n. Looks like the MyGet API has troubles. Will probably be fixed in time.\n. You can access the application environment and other runtime services via the PlatformServices class in the Microsoft.Extensions.PlatformAbstractions namespace:\ncsharp\npublic Program()\n{\n    var env = PlatformServices.Default.Application;\n}\n. :+1:, --configuration Release is too verbose.\n. Doesn't VS tooling publishes using Release by default too?\n. ",
    "miguellira": "@johnpapa Ran into this immediately after the BUILD announcements. Mono 4.1.0 (complied from git master) fixes this but introduces other bugs and that's only if you happen to grab a stable build. My thread here (https://github.com/aspnet/Home/issues/508#issuecomment-100231894) summarizes my current state, but honestly it's probably too much trouble for most people to bother setting up.\n+1 on a note on the docs though.\n. ",
    "kalluri-nb": "This still exists in Beta6. After few iterations dnu restore with --no-cache stops working and hangs without any error or failure. We have to cleanup our build servers on schedule to handle this. \n. Yes it does in  1.0.0-rc1-15838  build too.\n. I'm trying to create and cspkg file using cspack using the command \ncspack.exe c:\\tmp\\azure\\ServiceDefinition.csdef /role:Empty;c:\\tmp\\azure\\cs1;wwwroot\\bin\\aspnet.loader.dll /out:c:\\tmp\\azure\\api.cspkg\nwhich copies only the wwwroot folder to the site root and the reference to approot is lost when deployed. \nThe application throws the below error\nUnable to find the runtime directory 'F:\\sitesroot\\0..\\approot\\runtimes\\dnx-clr-win-x64.1.0.0-beta6-12114'.\nPossible causes:\n1. The runtime was not packaged with the application.\n2. The packaged runtime architecture is different from the application pool architecture.\nWould be easy to package the application if the relativity between the folders can be made more configurable. Or may be I'm missing something, \n. @davidfowl I understand currently there is no support for deploying a ASPNET5  application directly to the webrole . Is there is recommended way to do this. \n. ",
    "zhili1208": "Yes, I checked latest version. things closer to CWD do not get overwritten via things further away. @\n. @yishaigalatzer I think this is changed by this commit https://github.com/NuGet/NuGet3/commit/50443eb4cb0aa53f28d547bba96ed7c504373d66 \n. ",
    "emgarten": ":shipit:\n. :shipit:\n. I've ported this to NuGet3 also. It helped perf since 17 packages hit this scenario while restoring a UWP project.\n. I've ported this to NuGet3 also. It helped perf since 17 packages hit this scenario while restoring a UWP project.\n. Xamarin frameworks map to the most common portable profiles, some of the rare profiles don't have them.\n. Xamarin frameworks map to the most common portable profiles, some of the rare profiles don't have them.\n. @davidfowl the old PCL logic should be able to find compatibility in this scenario. This could be a simple bug with how the project TxM is passed in for the check.\nThe issue repros for me also. Lock file output:\njson\n  \"targets\": {\n    \".NETPortable,Version=v4.5,Profile=Profile111\": {\n      \"Newtonsoft.Json/6.0.8\": {\n        \"type\": \"package\"\n      }\n    }\n. @davidfowl the old PCL logic should be able to find compatibility in this scenario. This could be a simple bug with how the project TxM is passed in for the check.\nThe issue repros for me also. Lock file output:\njson\n  \"targets\": {\n    \".NETPortable,Version=v4.5,Profile=Profile111\": {\n      \"Newtonsoft.Json/6.0.8\": {\n        \"type\": \"package\"\n      }\n    }\n. @muratg  thanks for the heads up, this should be fixed in nuget already.\nhttps://github.com/NuGet/Home/issues/1355\n. @muratg  thanks for the heads up, this should be fixed in nuget already.\nhttps://github.com/NuGet/Home/issues/1355\n. This isn't part of DNU it changes how the key is applied during compilation. I would expect this to be needed for CLI also. \nThe scenario here is: NuGet has a private key that is used by the CI. It's not public so we can't check it into source control. The current alternative to this env var is to set the path in the project.json file, however the path is only needed on the CI. There's no way to dynamically define this in project.json today.\n. This isn't part of DNU it changes how the key is applied during compilation. I would expect this to be needed for CLI also. \nThe scenario here is: NuGet has a private key that is used by the CI. It's not public so we can't check it into source control. The current alternative to this env var is to set the path in the project.json file, however the path is only needed on the CI. There's no way to dynamically define this in project.json today.\n. :shipit:\n. :shipit:\n. ",
    "rajajhansi": "@davidfowl, it is easier said than done.Why isn't there a 1.0.0-beta5 version of Microsoft.AspNet.Security.DataProtection?? Because of that, it downloads the dependent Microsoft.Framework.Runtime.Interfaces v1.0.0-beta4. \n. @davidfowl, I do follow the announcements. At times, the changes are really overwhelming. For e.g., today there was a long thread about JSON comments, which is good but can't follow that full thread. I know the framework is still in beta. Would it be possible for you tell me when can we expect an RC version of the framework (just like Visual Studio RC)?\n. I got the thread relevant to my issue: https://github.com/aspnet/Announcements/issues/15 \n. ",
    "karldodd": "Great. Thanks for the updates!\nBtw, where can I see the release notes for dnx beta5?\n. I misunderstood 'It's supported in beta5' and the closing of the issue. So acutally it 'will be' supported in beta5. Right?\nIn that case, probably this issue should still be open with a tag 'beta5' until beta5 is released. Just my two cents.\n. Well understood. Thank you for your sub-second reponse!  :-)\n. ",
    "tsvetomir": "Can we get an updated schema for project.json?\nThe one on schemastore.org does not list the new properties.\n. Right, that's what I figured as well. Even if you add content to the archive it is still ignored. This is evident with older packages, e.g. EntityFramework that contains a README file I think.\nI suppose one can do with Bower for the client-side resources. That's what it does best anyway.\nThis leaves the question open for editor templates, localization resources and other odds and ends.\n. Right, makes sense. Adding the registration code would've been a gross hack at best.\nBetter solve this through documentation :) Thank you!\n. +1\n. Please note that, at least for me, the application runs fine with dnx web. It's only in Visual Studio where it throws an error on build.\n. ",
    "davidebbo": "@ChengTian wrong David I think ;)\n. Can you please provide a repo that repros this issue? Please see https://github.com/projectkudu/kudu/wiki/Using-a-git-repo-to-report-an-issue. Thanks!\n. Thanks, I can repro with your repo, though I don't know what's wrong. The packages are all there under D:\\home\\site\\approot\\packages.\nHere is the full error. @davidfowl, any idea why it's failing to find packages?\n```\n[InvalidOperationException: Failed to resolve the following dependencies for target framework 'DNX,Version=v4.5.1':\n   Microsoft.AspNet.Antiforgery 1.0.0-beta7\n   Microsoft.AspNet.Authorization 1.0.0-beta7\n   Microsoft.AspNet.Cors.Core 1.0.0-beta7\n   // many more here\nCurrent runtime target framework: 'DNX,Version=v4.5.1 (dnx451)'\n Version:      1.0.0-beta7-15532\n Type:         CLR\n Architecture: x86\n OS Name:      Windows\n OS Version:   6.2.9200.0\n]\n[TargetInvocationException: Exception has been thrown by the target of an invocation.]\n   System.Web.HttpRuntime.HostingInit(HostingEnvironmentFlags hostingFlags, PolicyLevel policyLevel, Exception appDomainCreationException) +506\n[HttpException (0x80004005): Exception has been thrown by the target of an invocation.]\n   System.Web.HttpRuntime.FirstRequestInit(HttpContext context) +4531288\n   System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context) +94\n   System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context) +191\n```\n. What I found in VS is:\n- if I check Create directory for solution, I get a global.json at the root (so not same folder as project.json).\n- if I don't check it, project.json is at the root, but I don't get a global.json at all!\nThe second case looks broken. @hoetz it's strange that it works differently for you. I have Azure tools v2.7 for VS 2015.\n. @ealsur correct, it does not have to be at the root. See https://github.com/davidebbo-test/AspNet5Beta7, which is an unmodified VS-create project, with Create directory for solution checked. It works fine in Kudu.\n. Instead of relying on a new env variable which requires a Kudu change, I suggest using an existing one to detect if you're running in Azure Web App. e.g. just check if WEBSITE_SITE_NAME is defined.\n. ",
    "urigolani": "beta4\nglobal.json:\n{\n  \"projects\": [\n    \"src\",\n    \"test\",\n    \"wrap\"\n  ],\n  \"sdk\": {\n    \"version\": \"1.0.0-beta4\"\n  }\n}\n. When is beta5 due?\n. Hi @ChengTian,\nI've updated to 1.0.0-beta5-11976 and besides other issues with this version which are for a different thread, I still see the wrapping of referenced csproj files remains the same as it was with beta4\nThis means:\n1. only net451 shows in the project.json of the wrapped project (in the wrap folder) missing dnx451.\n2. If the csproj depends on nuget packages, then the following happens:\na. the project.json of the wrapped cs projhas a 'dependencies' property with the nuget package it depends on with the correct version.\nb. the dependent package has a project.json in the 'wrap' folder, with a version of: 1.0.0.*\nThis means that If my csproj depends on Newtonsoft.json v6.0.8 then when the dnx tries build the project, it tries to resolve Newtonsoft.json to version 1.0.0\nCan you try to repro and if this fails, contact me for further steps?\n. ",
    "MichaelKetting": "Very much looking forward to this getting fixed. Right now, switching between feature branches with different dependency version or simply updating to a version with a higher dependency is really involved, i.e. I usually have to delete the bin, obj, project.json.locked and \\users.dnx\\packages folder before performing a dnu restore. And then, it usually works.\n. Thanks for the update!\n. Thanks for the tip! :smile:\n. ",
    "causer": "+1\n. Thank you for answer.\n. ",
    "Quantumplation": "Would you accept a pull request which added a --platform command line argument to the dnu wrap command?\n. ",
    "leosbrf": "Thanks for the answer. So, everytime I create a project I have to do this? That is not a problem, though. But I've created a project called ASPNETvnext (empty) that does not have a global.json. I would like to know where I can config this property in this specific case, because when I open it the error above is thrown.\n. Ok, I've moved this issue to:\nhttps://github.com/aspnet/Tooling/issues/84\n. ",
    "MaximRouiller": "Yep. Will copy/paste.\n. Done.\nhttps://github.com/aspnet/Home/issues/632\n. It was my impression that we were moving away from strong named assemblies. Or maybe I'm just mistaken. The fact that you have to validate an assembly while somebody already has access to your file system seemed a bit redundant. \nAre those assemblies for backward compatibility only?\n. There you go. I knew it must have been simple. \nThanks!\n. ",
    "TanukiSharp": "Yes --ignore-failed-sources works perfectly, and I actually found it out after through dnu help restore.\nThank you guys very much, and sorry for the troubles.\n. ",
    "shaneholder": "I just ran into this also.  It might be nice if dnu printed that option on this error.  I have a work repository configured in my Nuget.config file and was just starting to work with dnx and ran into this issue on a hello world project which would never have pulled any assemblies from that repo.\n. The nuget.config I was looking at is scoped to my user, not the project (I set  it in VS2015) %AppData%\\Roaming\\Nuget.config.  So, IMHO there is nothing to \"fix\" but I meant to display the error and give a helpful suggestion.\n. ",
    "calwi": "Hi David, originally I was trying to build everything from MSFT, coreclr, corefx, etc but ran into too many problems, because I just wanted to try and get VSCode working. In the end, I just went with all the defaults, and so ran into this problem with EF7/SqlClient.\nSo I figured, maybe as Mono was a little more mature, especially on OS X, I'd stick with it, so I was talking to one of them on IRC about this problem, and he suggested trying to recompile Mono nightly build, and then I thought well I would also need to recompile DNX to run on that, rather than the using brew , which always wants to do it's own thing. (I was trying avoid using brew entirely at the beginning, but was forced to succumb)\nI havn't tried build from myget because the version of mono is wrong. I'm trying to test 4.3. The original problem is with EF7.\nSo, I suppose, I'm only just getting started with this and it's early days. My main aim at the moment is trying to get a working EF7 to SQL 2014 going on OSX, rather than anything else.\n. ",
    "serialseb": "one of the issues we had with system-wide packages on openwrap back in the old days was that one. We tried solving it by caching packages per feed and always having the original source feed persisted alongside the current version of the package. Not sure if it helps but thougth i'd share.\n. ",
    "am11": ":+1: to be able to execute binary via CoreRun.\n. ",
    "regionbbs": "I had to use a Web Site template to create new application, it's global.json is:\n{\n    \"projects\": [ \"src\", \"test\" ],\n    \"sdk\": {\n        \"version\": \"1.0.0-beta6-11941\"\n    }\n}\nI changed it to 1.0.0-beta4 (I have another question at 1.0.0-beta6-11941 with next issue), this issue still exists.\n. This issue is also exists if no global.json.\n. OK, I tried, it works. Thank you.\n. ",
    "zhmap": "Thanks! Let me try now.\n. @dougbu Thanks! Your way does works.\n. ",
    "nguyenquyhy": "Do we have any workaround for the moment?\n. ",
    "Jonas82": "Running beta5 I get the same issue when publishing.\n. Hi @PradeepKadubandi \nIssue is still the same in RTM also with beta6. Workaround is still good.\nJonas\n. ",
    "jtdunlop": "I have VS 2015 Professional REL with beta5 and am getting this issue. There are no errors reported in my references. I've also seen this issue mentioned with beta6, unknown version of VS: http://stackoverflow.com/questions/31750350/vnext-beta6-deployment-error-the-dependency-entityframework-6-1-2-could-not. The generated wrap project.json has the failing dependencies listed.\n. A better workaround is to get involved in the wrap process in project.json. This fixes pretty much all downstream issues from dev all the way through deploy.\n\"scripts\": {\n        \"prerestore\": [\n            \"dnu wrap ../epm.dal/epm.dal.csproj\",\n            \"dnu wrap ../epm.logic/epm.logic.csproj\",\n            \"dnu wrap ../epm.ui/epm.ui.csproj\"\n        ]\n    },\n. ",
    "BrewDawg": "I have this exact same problem with beta 7, none of my references under the DNX 4.5.1 or DNX Core 5.0 can be found. I just installed tonight, have power shell 3.0, did all the DMVM update stuff, it all works, I can see the files in C:\\Users\\Mike Griffin.dnx but Visual studio cannot find any of them. I've tried everything, nothing works. Running Windows 7, VS 2015 Community Version. My PATH variable is C:\\Users\\Mike Griffin.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta7\\bin;C:\\Users\\Mike Griffin.dnx\\bin and the files are there, I also have DNX_HOME pointing to C:\\Users\\Mike Griffin.dnx. All references in the entire project are yellow except for mscorlib, System, System.Core and they are all version 4.0.0.0\n. ",
    "arankun": "can you generate the \"dnu wrap...\" statements in the project.json without typing it?\n. ",
    "mrcaron": "I'm hitting this with 1.0.0-RC1-update2\n. ",
    "abdullah2993": "Run the Power Shell as Administrator, the error will go away\n. ",
    "andrewcoll": "It seems this is caused by the lack of the www. in the myget feed URL that I added (thanks @davidfowl ).\nNot sure exactly why that is a problem though, nor how it manages to work in vs2013 with the same URL (no www). \n. ",
    "gavdraper": "Getting this same issue both locally and when deploying to Azure although in my case the project I'm publishing has no dependancies to other projects in the global.json paths but other projects that I'm not publishing do.\n. Actually on beta6 this issue seems to solve itself if I rename the src folder and entry in global.json to source like this...\n\"projects\" : [\"Src\",\"Test\"],\nto\n\"projects\" : [\"Source\",\"Test\"],\nI guess there must be some stuff going on internally with a src folder which was conflicting with my source folder? \n. ",
    "herecydev": "May be related to what I raised just hours ago.\n. It's not wrapped. Thanks for the explanation, it feels like a strange decision to break SemVer over choosing a local project.\nDo we have a way of restricting versioning? I've seen a few ideas like 2.* to indicate only version 2, e.g. 2.1, 2.2, etc.\nIn this current situation it broke SemVer and therefore my referencing project over choosing the readily available nuget package.\n. ",
    "kasthack": "```\nkasthack@kashack-desktop:~/Home/samples/ConsoleApp$ dnvm use 1.0.0-beta6-12005 -r mono\nAdding /root/.dnx/runtimes/dnx-mono.1.0.0-beta6-12005/bin to process PATH\nkasthack@kashack-desktop:~/Home/samples/ConsoleApp$ dnu restore\nMicrosoft .NET Development Utility Mono-x64-1.0.0-beta6-12005\nRestoring packages for /root/Home/samples/ConsoleApp/project.json\n  GET https://www.nuget.org/api/v2/FindPackagesById()?id='System.Console'.\n  OK https://www.nuget.org/api/v2/FindPackagesById()?id='System.Console' 1923ms\n  GET https://www.nuget.org/api/v2/package/System.Console/4.0.0-beta-22816.\n  OK https://www.nuget.org/api/v2/package/System.Console/4.0.0-beta-22816 1279ms\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='System.IO'\n  GET https://www.nuget.org/api/v2/package/System.IO/4.0.10-beta-22816.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='System.Runtime'\n  GET https://www.nuget.org/api/v2/package/System.Runtime/4.0.20-beta-22816.\n  OK https://www.nuget.org/api/v2/package/System.IO/4.0.10-beta-22816 329ms\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='System.Text.Encoding'\n  GET https://www.nuget.org/api/v2/package/System.Text.Encoding/4.0.10-beta-22816.\n  CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='System.Threading.Tasks'\n  GET https://www.nuget.org/api/v2/package/System.Threading.Tasks/4.0.10-beta-22816.\n  OK https://www.nuget.org/api/v2/package/System.Runtime/4.0.20-beta-22816 586ms\n  OK https://www.nuget.org/api/v2/package/System.Text.Encoding/4.0.10-beta-22816 377ms\n  OK https://www.nuget.org/api/v2/package/System.Threading.Tasks/4.0.10-beta-22816 590ms\nInstalling System.Console.4.0.0-beta-22816\nInstalling System.Runtime.4.0.20-beta-22816\nInstalling System.IO.4.0.10-beta-22816\nInstalling System.Text.Encoding.4.0.10-beta-22816\nInstalling System.Threading.Tasks.4.0.10-beta-22816\nWriting lock file /root/Home/samples/ConsoleApp/project.lock.json\nRestore complete, 6003ms elapsed\nkasthack@kashack-desktop:~/Home/samples/ConsoleApp$ dnvm use 1.0.0-beta6-12005 -r coreclr\nAdding /root/.dnx/runtimes/dnx-coreclr-linux-x64.1.0.0-beta6-12005/bin to process PATH\nroot@morg-linux-hosting:~/Home/samples/ConsoleApp# dnx . run\nSystem.InvalidOperationException: Failed to resolve the following dependencies for target framework 'DNXCore,Version=v5.0':\n   System.Console 4.0.0-beta-22816\nSearched Locations:\n  /root/Home/samples/{name}/project.json\n  /root/.dnx/packages/{name}/{version}/{name}.nuspec\nTry running 'dnu restore'.\nat Microsoft.Framework.Runtime.DefaultHost.GetEntryPoint(String applicationName)\n   at Microsoft.Framework.ApplicationHost.Program.ExecuteMain(DefaultHost host, String applicationName, String[] args)\n   at Microsoft.Framework.ApplicationHost.Program.Main(String[] args)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   at dnx.host.Bootstrapper.RunAsync(List`1 args, IRuntimeEnvironment env)\n   at dnx.host.RuntimeBootstrapper.ExecuteAsync(String[] args)\n   at dnx.host.RuntimeBootstrapper.Execute(String[] args)\n```\n. ",
    "matthewDDennis": "\nThe Startup class is a web convention.\n\nWhy should this be a Web Convention.  It is a powerful pattern that makes DI, and a lot of other great features, available to the programmer. When I created 'vNext' Console app, my default expectation was that I would easily be able to use the vNext features.  There is no reason other than a Web mindset that makes this Web Only.  Its a Pattern or Convention that promotes good programming practices and reduces the boiler-plate code a developer needs to write.\n\nIt actually is large. The dnx does not depend on any of those services you have in your application. The Program.Main is the lowest layer in the stack and has no dependencies on anything else. \n\nMy implementation probably pulls in more stuff than is required.  I'm sure with a little thought, most or all of the extra dependencies could be removed.\nIMHO, I think this would be a powerful addition.\n. ",
    "smudge202": "I agree with both points. I don't think DNX should grow in order to support conventions such as the Startup class, but it is a very nice pattern. It's why we made Compose and why I'm sure many other such frameworks will appear. It simply doesn't belong in DNX itself, but it doesn't mean you can't use it.\n. Just suppressions as @bricelam implemented looks ideal. Can always improve the model with fanciness later. Suppression is much closer to need.\n. ",
    "leus": "A web application consisting of different class libraries may greatly benefit from this (for example, having dnx commands in a different class library that runs every night loading data, etc. using the same context and configuration than the web application would be a big help)\n. ",
    "ajaybhargavb": "No. That package no longer exists. It was merged into something else.\n. https://github.com/aspnet/Tooling-Internal/issues/392\n. Spoke offline. The error shows up when running the command that was installed from the package. Not when running the install command.\n. No. That only fixes the issue mentioned here https://github.com/aspnet/dnx/pull/2399#issue-98851638.  After that fix you still need to pass in full path for it to work. Otherwise it creates a bad cmd file.\n. Yes. It works.\n. Updated. @Eilon @pranavkm \n. @BrennanConroy fixed. There was a problem with a comment in makefile.shade. Travis should build now.\n. We might need this to be done before enabling NuGetPackageVerifier in dnx. cc' @Eilon \n. The exclusions are printed here https://github.com/aspnet/DnxTools/blob/dev/src/NuGetPackageVerifier/Program.cs#L230. It prints it out that way and it is easier to copy as is.\n. :+1: There is an issue for this https://github.com/aspnet/dnx/issues/2045. Will update the  justification.\n. https://github.com/aspnet/dnx/pull/2717#discussion_r39696368\n. Not sure. I couldn't find one. @BrennanConroy?\n. ",
    "hpaiemen": "@moozzyk - I tried to build my own runtime like you suggest on Windows 10 Insider preview build 10074 with Win 10 SDK 10069 installed but I get an error while building (actually it looks like a single missing assembly) : \n[...]\\dnx-dev\\src\\Microsoft.Framework.Runtime\\PatternGroup.cs(8,27): error CS0234: The type or namespace name 'FileSystemGlobbing' does not exist in the namespace 'Microsoft.Framework' (are you missing an assembly reference?)\n. @moozzyk - I use clr x86 1.0.0-beta6-12005 already, but I'm not sure to understand well : I must use a runtime to build a runtime ? This is the output of \"dnvm list\":\nActive Version           Runtime Architecture Location                       Alias\n\n1.0.0-beta4       clr     x64          C:\\Users\\DaWin10\\.dnx\\runtimes\n   1.0.0-beta4       clr     x86          C:\\Users\\DaWin10\\.dnx\\runtimes\n   1.0.0-beta4       coreclr x64          C:\\Users\\DaWin10\\.dnx\\runtimes\n   1.0.0-beta4       coreclr x86          C:\\Users\\DaWin10\\.dnx\\runtimes\n-    1.0.0-beta6-12005 clr     x86          C:\\Users\\DaWin10.dnx\\runtimes default\nI installed beta6 a couple days ago, but the beta4 versions, I think, were install while running build.cmd...\n. Sorry for that, there really is a \\ between DaWin10 and .dnx I just checked it out (probably a bad copy-paste). I tried git submodule update --init like @anurse suggested but I got the same error as before.\nI even tried getting Microsoft.Framework.FileSystemGlobbing nuget package manually. With dnu restore it put it in the .dnx\\packages directory, but somehow the build doesn't recognize it. \n. https://www.dropbox.com/s/0mf4cj4q490hkry/buildOutput.zip?dl=0 : a link on a zip file containing piped output of the console while executing build.cmd and a paste of the actual console output (in which the error showed up).\n. \"fake\" ? does that mean that [assembly: InternalsVisibleTo(\"MyAssembly, PublicKey='myKey'\")] won't work ? Because I tried with the \"strongName\" option set to true and it still can't give friend access to another assembly. However, I don't get the compilation error anymore.\nDo you have any idea how I can get InternalVisibleTo to work, with or without strong name signature ?\nThx.\n. Thx for all answers, it works now without strong naming.\n. CoreCLR\n. Done\nhttps://github.com/dotnet/coreclr/issues/1420\n. ",
    "bencyoung": "Effects us too:\nResponse status code does not indicate success: 401 (Unauthorized).\n  GET http://adpbuildsrv:81/nuget/Internal/FindPackagesById()?id=...\nSystem.Net.Http.HttpRequestException: Response status code does not indicate success: 401 (Unauthorized).\nInterestingly the package manager view works fine in VS 2015, as does NuGet 2.8 in VS 2013\n. ",
    "Kieranties": "Any news on when this issue may move forward?  It's not assigned to a milestone at the moment.\n. @davidfowl It's still to do then?\n. Super!\n. Just hit this issue with beta7-12290.  dnx . test works fine, dnx .\\test\\Project.Tests test fails when running from project root folder.\nLast working dnx I have locally is beta6-12256\n. Ah!  Of course, I've been using packages from the aspnetrelease feed, but hadn't updated dnvm to use the same.\nSetting env:DNX_UNSTABLE_FEED to the correct feed and updated to runtime 1.0.0-rc1-16110 fixed the issue.  Many thanks\n. Happy days!  Will be moving over to that soon.\n. ",
    "nuevoalex": "This is more or less blocking adoption of DNX for the project I'm currently working on so some response to this would be great.\nUPDATE: It appears specifying a username and password for a feed works, but using an apikey does not. So for now that's a workaround.\n. ",
    "slaneyrw": "We use an authenticated ProGet feed ( against our domain accounts )\nI don't believe this is a NuGet bug, the problem appears to be in your HttpSource class, as seen in the stack trace below - captured from my Package Manager output window in VS2015\n- not handling the 401 response exception\n- not appearing to supply default credentials\nI'm only having an issue running a package restore using dnx.  Normal NuGet package manager is able to query our ProGet feed without any issues.\nAt least, stop it throwing an unhandled exception and ignore this particular feed.  At the moment I have remove our ProGet feed when I use DNX, which also means I can't push any .NET Core libraries to this feed as well\n```\nSystem.Net.Http.HttpRequestException: Response status code does not indicate success: 401 (Unauthorized).\n   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()\n   at Microsoft.Dnx.Tooling.Restore.NuGet.HttpSource.d__11.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Dnx.Tooling.Restore.NuGet.NuGetv2Feed.d__25.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.Dnx.Tooling.RemoteWalkProvider.d__6.MoveNext()\n\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\n   at Microsoft.Dnx.Tooling.RestoreCommand.d__68.MoveNext()\n```\n. ",
    "StenPetrov": "Why is this still open 2 years later? What's the advised work-around?. ",
    "glennsills2": "Thanks for the explanation and pointer to the other thread.\n. ",
    "jasonmalinowski": "@dougbu, did you mean to mention me? I was recently added to the ASP.NET org and thus I might have hijacked your previous Jason-auto-complete.\n. @anurse: we get analyzer assets by directly looking through the file list, so that's one more place we get inputs in addition to the sections you mentioned. But I suspect we should be good there. Do you need a bug tracking the MSBuild task change?\n. @davidfowl: we don't look at the lock file version, so fine by me.\n. ",
    "jbatte47": "I've noticed the same thing; I think if you run dnu install Microsoft.AspNet.Diagnostics.Elm, you'll notice that the install process managed to modify project.json before crashing. That means running dnu restore immediately after that will finish the job successfully. So at least there's a quick-ish workaround in the meantime.\n. ",
    "ramtinkermani": "The \"dot\" refers to the current directory. You can replace it with the target projects directory path if you are not running dnx from current directoy.\nHere is the documentation:\nhttps://github.com/aspnet/Home/wiki/DNX-structure#dnx-usage\n. ",
    "NickCraver": "Confirm here as well, I'm seeing this in dnu 1.0.0-beta7-15532.\n. Confirm here as well, I'm seeing this in dnu 1.0.0-beta7-15532.\n. The response code here in the example is a 307, so dnu restore is behaving correctly. Unlike a 302, a 307 shouldn't automatically be followed without user content. The relevant W3C section is here:\n\nIf the 307 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.\n\nThat being said, if this happens with a 302, it would indeed be a bug.\n. The response code here in the example is a 307, so dnu restore is behaving correctly. Unlike a 302, a 307 shouldn't automatically be followed without user content. The relevant W3C section is here:\n\nIf the 307 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.\n\nThat being said, if this happens with a 302, it would indeed be a bug.\n. Ah I see your issue now, it's not that it doesn't follow the redirect (the HttpClient does this just fine). It's that it doesn't have the special nuget.exe behaviour of updating the base URL on redirect. \n@davidfowl  the functionality he's talking about is here in NuGet. I agree this should happen - though ideally without the extra HTTP hit that the current NuGet approach takes just to ultimately read a Location header when it comes down to it.\n. Ah I see your issue now, it's not that it doesn't follow the redirect (the HttpClient does this just fine). It's that it doesn't have the special nuget.exe behaviour of updating the base URL on redirect. \n@davidfowl  the functionality he's talking about is here in NuGet. I agree this should happen - though ideally without the extra HTTP hit that the current NuGet approach takes just to ultimately read a Location header when it comes down to it.\n. Can you post your project.json file?\n. Can you post your project.json file?\n. +1 on this - you have to go to task manager and grab the PID via command line differentiation at the moment - can DNX set a title? This would be a marked improvement over w3wp.exe as a bonus. \nRelated: the description for dnx.exe itself is also missing, so you'll see only \"dnx\" as the fallback description anywhere else, e.g. Task Manager.\n. +1 on this - you have to go to task manager and grab the PID via command line differentiation at the moment - can DNX set a title? This would be a marked improvement over w3wp.exe as a bonus. \nRelated: the description for dnx.exe itself is also missing, so you'll see only \"dnx\" as the fallback description anywhere else, e.g. Task Manager.\n. +1 on release here - the majority use case will certainly be shipping things, which is rarely in debug. Why not default to what is, unless I'm missing something crazy, the 99% case? I'm all for including PDBs, etc. but a release build makes so much more sense here.\nTake a look at how web.config behaves today on the runtime-compiled bits, debug attribute not present? Not debug. There are places where this makes sense and precedence for doing so. I think not doing this will end up with a lot of debug packages running in production and people questioning performance. The tooling is lightweight and that's awesome, but to keep the tooling and options concise they should be paired with vast majority defaults, or demand the option be specified.\n. +1 on release here - the majority use case will certainly be shipping things, which is rarely in debug. Why not default to what is, unless I'm missing something crazy, the 99% case? I'm all for including PDBs, etc. but a release build makes so much more sense here.\nTake a look at how web.config behaves today on the runtime-compiled bits, debug attribute not present? Not debug. There are places where this makes sense and precedence for doing so. I think not doing this will end up with a lot of debug packages running in production and people questioning performance. The tooling is lightweight and that's awesome, but to keep the tooling and options concise they should be paired with vast majority defaults, or demand the option be specified.\n. I'm not indifferent to the odd case (e.g. @davidfowl and many times myself) that wants debug by default (I consider few of us to fall in that category), but does that outweigh many not-optimized packages out in the wild that this will surely cause?\nI think if there's a hard line and the .Net team isn't willing to make release the default, then there should be no default.  Simply make it a required parameter. My concerns aren't with the default directly, it's the unknown number of unintentional debug builds in production it will cause.\n. I'm not indifferent to the odd case (e.g. @davidfowl and many times myself) that wants debug by default (I consider few of us to fall in that category), but does that outweigh many not-optimized packages out in the wild that this will surely cause?\nI think if there's a hard line and the .Net team isn't willing to make release the default, then there should be no default.  Simply make it a required parameter. My concerns aren't with the default directly, it's the unknown number of unintentional debug builds in production it will cause.\n. @davidfowl I think it'd be helpful to illustrate how this happens, in commands:\n\nLets say I make a change to Hosting and want to consume it in MVC. You can make the change, build the hosting nupkg, run packages add, then run restore on mvc and now I'm consuming the package I just built (and it's debuggable).\n\nThe most pervasive problem with this movement for many (including myself) has been the lack of examples, only explanations in abstract concepts or short english exist. Most of the examples that exist for many things are so trivially short as to have very limited usefulness. IMO, that's what needs to change to get more people onboard and clear on how to do things. \n. @davidfowl I think it'd be helpful to illustrate how this happens, in commands:\n\nLets say I make a change to Hosting and want to consume it in MVC. You can make the change, build the hosting nupkg, run packages add, then run restore on mvc and now I'm consuming the package I just built (and it's debuggable).\n\nThe most pervasive problem with this movement for many (including myself) has been the lack of examples, only explanations in abstract concepts or short english exist. Most of the examples that exist for many things are so trivially short as to have very limited usefulness. IMO, that's what needs to change to get more people onboard and clear on how to do things. \n. @davidfowl Now that's a good example to illustrate how debug a good default for local dev, thank you. \nI think we have differing opinions on \"very specific\". As a specified example, earlier you had dnu packages add {nupkg}, where {nupkg} is \"path to build .nupkg\", not \"nupkg name\", as would be the case many are familiar from using nuget.org today. That's where a very concrete example helps. I mean this as constructive criticism as points that are not clear without exact examples for those new to the new tooling. the followup and concrete commands are much appreciated and I think will help clarify things.\n. @davidfowl Now that's a good example to illustrate how debug a good default for local dev, thank you. \nI think we have differing opinions on \"very specific\". As a specified example, earlier you had dnu packages add {nupkg}, where {nupkg} is \"path to build .nupkg\", not \"nupkg name\", as would be the case many are familiar from using nuget.org today. That's where a very concrete example helps. I mean this as constructive criticism as points that are not clear without exact examples for those new to the new tooling. the followup and concrete commands are much appreciated and I think will help clarify things.\n. ",
    "pakrym": "NullReferenceExecption when pointing to bin does not reproduce.\nMicrosoft.Dnx.Project is placed correctly, but because of #2937 there is another error. After manually rearranging assemblies it's running correctly. \nI will recheck this after #2937 fix.\n. @davidfowl yes, there is not IApplicationShutdown anymore\n. https://github.com/aspnet/Mvc/pull/3632\n. We also need to suppress exceptions coming from ExecuteMain (see comments from https://github.com/aspnet/dnx/pull/2928).\n. So what we have right now in the IRuntimeEnvironment:\nOperatingSystem = Windows/Linux/Darvin\nOperatingSystemVersion = \n   On Win: Windows release number \n       7.0 for Windows 7, 8.1 for Windows 8.1 and Windows 2012 Server etc.\n   On Linux: Release number (DISTRIB_NUMBER from /etc/lsb_release)  \n       14.04 for Ubuntu 14.04, etc.\n       Note: right now we always report Ubuntu.14.04 runtime identifier for dnu purposes\n   On OSX: We are translating release number returned by uname to OSX version\n       15.x.x -> 10.11.x El Capitan\n       14.x.x -> 10.10.x Yosemite\n       13.x.x -> 10.9.x  Mavericks\n       etc.\nI propose adding field to contain processed version number (OperatingSystemReleaseVersion?)  from above and keep actual kernel version (GetVersionEx on Windows, uname -r on Linux and OSX) in OperatingSystemVersion.\nAlso maybe we want to store Linux distributive name separately?\n. ping @troydai @victorhurdugaci @davidfowl\n. @JunTaoLuo  @davidfowl  What if user writes console application using Roslyn and he has roslyn exception inside of it. We would suppress it's stack trace if we put try/catch around ExecuteMain.\n. Reopened the issue https://github.com/aspnet/dnx/issues/2887\n. Yes, looks similar.\n. This issue is caused by hardcoding \"dnxcore50\" in https://github.com/aspnet/dnx/blob/dev/makefile.shade#L1252\n. @moozzyk  @victorhurdugaci I drop dictionary completely and revert to ifs?\n. Added checking for single quotes, reverted to ifs. Anything else?\n/cc @moozzyk @victorhurdugaci\n. @muratg Sure, will do.\n. @davidfowl \nThere are two source of compilation errors:\n1. When we are searching for EntryPoint method and compiling application code on the way (host.GetEntryPoint)\n2. Some code in application EntryPoint is doing compilation and throws compilation exception (AspNet hosting is searching for Startup type which causes related projects to compile). That was the case that didn't work for you here: https://github.com/aspnet/dnx/pull/2928#commitcomment-13703368\nI moved EntryPointExecutor.Execute into try/catch that handles ICompilationException stack suppressing, so stack traces from entry point execution would be also hidden.\n. ping @anurse @davidfowl @JunTaoLuo @troydai @moozzyk  @cesarbs \n. re @davidfowl\n. Please add path to CSharpSyntaxTree.ParseText(newAttributes, parseOptions) call so we can see where syntax errors are from, if there would be any in the future\n. Like \"GeneratedAssemblyAttributes.cs\"\n. Possibly use this method to escape http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/SymbolDisplay/SymbolDisplay.cs,3636bc2a8304d9eb\n. :shipit: from me\n. @JunTaoLuo To show details it in TeamCity failed tests section\n. :shipit:, dont push it now, waiting for coherences\n. yes\n. Its fixed, rolled back the workaround.\n. @rynowak, I can change error message to something like \"Requesting code does not provide dependency injection services\". It would be semantically correct for all use-cases\n. :up: :date:, any conclusion?\n. I guess we don't care anymore about this.\n. @pranavkm, Looks like a dependency on other library that uses Dnx.Compilation, so we get two versions of classes\n. It looks like test host, we'll need disable test to pull dnx build through\n. You put it into rc1 (https://github.com/aspnet/dnx/issues/3104) but it definitely can got to rc2 \n. @Eilon, I looked trough the code and it looks like by design. Maybe there is and issue with my understanding of how it should work.\n. @davidfowl https://github.com/aspnet/dnx/pull/3134\n. I used them in my tests\n. :up: :date:\n. @davidfowl  if (environment.IsDevelopment()) { ... } ?\n. https://github.com/aspnet/Mvc/pull/3632\n. Removed IApplicationShutdown\n. @davidfowl In secret not commited changes\n. You got dependency on old Microsoft.Dnx.Runtime.Abstractions somehow, i guess because of beta-4 security packages. Thats why you have Microsoft.Dnx.Runtime.Abstractions.IApplicationEnvironment and Microsoft.Extensions.PlatformAbstractions.IApplicationEnvironment\n. Usages of IAssemblyLoadContextAccessor\nMvc\\test\\Microsoft.AspNet.Mvc.Test\\MvcOptionsSetupTest.cs \nScaffolding\\src\\Microsoft.Extensions.CodeGeneration\\Program.cs \nScaffolding\\src\\Microsoft.Extensions.CodeGeneration.EntityFramework\\EntityFrameworkServices.cs \nScaffolding\\src\\Microsoft.Extensions.CodeGeneration.Templating\\Compilation\\RoslynCompilationService.cs \nBrowserLink\\src\\Microsoft.VisualStudio.Web.BrowserLink.Loader\\RegisteredBrowserLinkModule.cs \nRazorTooling\\src\\Microsoft.AspNet.Tooling.Razor\\Program.cs\n. What about dotnet*? \n. :shipit:\n. :up: :date: added transitive fallbacks\n. Hopefully fixed runtime.json issue\n. This was done but support if far from full, dnx run, restore, test are not working correctly for portable apps.\n. The way dnx loads assembly when running on clr\\coreclr differs so we get ICompilationException  either wrapped into FileLoadException or first level. So its either loop trough inner exceptions searching for ICompilationException or two if's like:\n```\nif (ex is ICompilationException)\n{\n    throw SuppressStackTrace(ex);\n}\nif (ex.InnerException is ICompilationException)\n{\n    throw SuppressStackTrace(ex.InnerException);\n}\n``\n. Do we support Redhat? There is on on CentOS and it's consistent with how we find version in dnx.coreclr.unix\n. Not sure about this, we still care only about major, minor so i kept it\n. I do checking for quote removal in next if. <2 wont work for VERSION_ID=5\n. Didn't change, it reports 10\n. Fixed.\n. We lock usingGetAwaiter().GetResult()` which doesn't wrap exception into AggregateException\n. I checked, exception thrown from user code is output correctly\n. Maybe extract table rendering code to helper class and make it more generic, so somebody else can use it?\n. Add PlatformServices parameter and another overload to call it with PlatformServices.Default?\n. Make internal and expose Create method through PlatformServices?\n. We did it it in another method because its temporary and internally used API which would be removed, just not to confuse future users of API \n. What else should it address? \n. More info if it fails, EnsureSuccess dumps stderr\n. It looks like it's not only used in hosts, anyway there is no conclusion if we need this at all.\n. Dictionary? \n. Then why review? :) \n. Yep, looks less cool than goto )\n. ",
    "Joe4evr": "Dupe of dotnet/roslyn#1695.\n. ",
    "rsbavaresco": "Hello,\nNowadays, is there any API to load a NuGet Package Reference (already in ./dnx/packages), or just with custom assembly loader like answered above? Maybe something new in Microsoft.Dnx.Runtime.Nuget or Microsoft.Dnx.Runtime.Loader?\nAnd, how about automatically load dependencies (these are another Packages) of a NuGet Package?Using custom assembly loader to load direct from dll file will not load dependencies. (In these scenario, analyzing at debug, e.g. _graph field of LibraryManager does not contains my dynamic loaded assemblies. Should have it? Maybe something I made wrong...)\nThanks\n. @skoenigpi It works if you compile with .Net Core Cli\n. ",
    "GeorgeBushRekt": "This would be a great help, as Mono is already truly cross platform and widely supported, however coreclr isn't and a lot of great libraries simply aren't supported. So being able to target Mono would be great.\n. ",
    "ramsees": "Sure, I created a package from an assembly, the assembly needs needs to read from a configuration file at runtime to get the IP of the services it will consume, this was trivial with System.Configuration because it was implying there would be an App.config or a Web.config with an \"appsettings\" section.\nBut now with dnx where there is no App.config and you need to add the configuration file in the startup and my package has no clue from where to get that runtime configuration, this is the scenario:\nI create an ASP.5 application, I add the package to the dependencies to Project.json, I use dnu restore to retrive the package, I run the application with \"dnx .web\", my application crashes because the package has no way to retrieve the IP for the services it will consume and this is because there is no App.config now, so, the package needs to know from where to read that information, and there is no current way to do it because the package doesn't have access to the IHostingEnviromen service and It shouldn't because this package can also be used in desktop applications.\nSo, my package needs a way to access to a configuration file ala App.config and with dnx is not possible,\n. > Use dependency injection to get the IApplicationEnvironment\nThat's what I woulnd't like to do, It would need a lot of changes and I dont't even have the source from some assemblies.\nSo, a method for a package to read from a configuration file w/o using dependency injection is what is needed.\n. > you need to make one up and choose a name.\nI would gladly do that, the problem is that there is no way in the package to know the path of the application w/o IHostingEnviroment, and my package doesn't have access to it.\n. I use IHostingEnviroment because it gives me the webroot path, now, I see that by desing everything now must be used with nuget and dependency injection, but looks like you missed the part were I said I don't have the source code for some assemblies and it means those are useless now and a new version of those assemblies is needed and that is a lot of problem.\nI understand that the prefered way for asp.net vnext is to use dependency injection, but what I see is not he prefered but the only way leaving lot of legacy assemblies int the cold.\n. > IHostingEnvironment is WRONG \nAnd that's not the point of this disccussion, asume I said IApplciationEnviroment.\n\nThen I assume you only care about running on full .NET, not .NET Core because System.Configuration isn't there.\n\nThat's right, not interested in cross platforming for the moment, so no core clr is needed.\n\nI think you're out of luck\n\nThat's what I needed to now,if vnext was an option for the Project we are going to work or not and looks like is not and we are going to use something else instead.\nThank you.\n. It doesn't asume System.Configuratin available, it just needs the path of the configuration file, it can be a ini file or an XML file or even json.\n. It is like this:\nvar pConfigs = GetConfigurations(System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"configs.ini\"));\nvar pIp = pConfigs[\"ServicesIP\"];\n. It is my code, when third party libraries need configurations from runtime I read them from the ini file (or App.config) and then pass them to the library.\nOther llibraries from a third party vendor need the path to a ini file to read configurations.\n. There are two escenarios, I have the source to the libraries I use, this is a very extensive library lets call it BussinessLogic.dll, this library depends of another library that has the persistence since I use n tier architecture lets call it Persistence.dll, the Persistence.dll needs to read from a configuration file at runtime to get the ip of services ip and databases connection strings, I do this reading from App.config or web.config depending of the case, not problem so far.\nNow, my BussinessLogic.dll also depends from third party libraries from SAP B1 to be specific developed specially for us year ago, these libraries need the path to a ini file or to the directory it is the ini file, I don't have the source of this but I guess I could pass them via dependency injection using my BussinessLogic.dll as a proxy, so far is plausible, the library is big and to pass the dependency injection in the constructor is possible but implies a lot of changes in our architecture that we would need to evaluate if it is worthy.\nBut, other libraries that are needed for financies reporting that asume there will be an App.config file because it will read some variables from the appsetings section, there is no way to make that assembly to read the file from dnx since there is no App.config file and I don't have the source code eather, and that is the main problem.\nI hope I've explained my self a litle better this time.\n. ",
    "Tazer": "Hello @troydai. Not sure how to do the ping inside an docker image build.\nBut anyway, that shouldn't be the cause\n- I'm getting dnx from the same source without problems.\n- If I change to dnx beta 4 and do dnu restore it works (against same source) but still use beta 6 in my project.json. It works but a get an dnx error when trying to run the application instead. cause the internals have changed I guess. \n\"dependencies\": {\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta6-*\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta6-*\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-beta6-*\",\n    \"Kestrel\": \"1.0.0-beta6-*\",\n    \"Microsoft.AspNet.SignalR.Server\": \"3.0.0-beta6-*\"\n  },\nOnly package I'm using that isn't that common is the Microsoft.AspNet.SignalR.Server\n. @troydai  That did it! Sorry about that.\n. Solved it,\nBut the problem was that I had a command in my project.json that looked like this:\n\"migrate:down\": \"FluentMigrator.Runner.DNX --provider sqlserver2012  --task migrate:down\",\ndnu publish didnt like that. So when renaming it to migratedown it worked. \n. ",
    "jijiechen": "@cnblogs-dudu  What mistake did you make? I suffered the same problem when restoring my project...why didn't you write more detail about your solution?\n. @cnblogs-dudu Thank you for your reply.\nYes, I found it too that restoring packages on a Linux from China will always timeout. (But how a Windows PC works perfectly...)\nIt's such a pity.\n. I also get this problem today. I am working on a Ubuntu 14 server, with mono 4.0.2 installed. I am working on an Azure VM located in \"east Asia\".\nUnfortunately, the nscd restarting solution doesn't help with my case.\nBut from a post writen by @cnblogs-dudu, I found a v3 nuget entry point, and after this source added to NuGet.Config, the DNU starts to get packages from some external storage sources hosted by Windows Azure.\nThe error disappers this time (but many packages can not be downloaded, maybe I can get a sccuess finally by keeping retries...).\nIt's so wired.\nThis server is only for development use, so if you guys want to test and debug it by yourself on my server, please leave me a message, and I'll be glad to help.\nThanks for your efforts to make it a better experience.\n. ",
    "leo9223": "@davidfowl, Any updates on consuming mixed mode DLL in ASP.net 5 ? I am trying to use an old mixed mode assembly but no success yet, using RC1 Update1\n. repetitive !  closing this issue.\n. ",
    "gazzyt": "@moozzyk good catch! I copied VCRuntime140.dll into the folder containing dnx on the nanoserver and dnx now launches successfully. So your diagnosis is spot on.\nThanks for the quick response.\nGary\n. I found it in artifacts\\bin{ProjectName}\\Release\\Publish\\approot\\runtimes\\dnx-coreclr-win-x64.1.0.0-beta6-12120\\bin under my project folder.\n. ",
    "dmetzgar": "@gazzyt I'm having the same problem. Where did you get a version of vcruntime140.dll that is built for onecore?\n. ",
    "friism": "Thanks guys! :dancer: \n. @muratg haven't checked nuget.exe behavior.\n. Adding \"runtime.linux.System.Net.NetworkInformation\": \"4.1.0-beta-*\" in project.json fixes this for me\n. Here's a repo with full repro: https://github.com/friism/dnx-3262-repro\n. @anurse adding those dependencies doesn't solve the problem for me: https://github.com/friism/dnx-3262-repro/tree/try-fix\n. ",
    "simra": "Like @ciznx I'm on an Azure ubuntu instance and running into substantially the same issue restoring packages from NuGet.  I don't think ncsd is configured as a service on the stock VM images, so I'm not sure what my options are for resolving the issue.  Is it possible the error occurs when the IP address returned by the lookup is IPV6?  Maybe there's a way to configure DNS to prefer IPV4?\nEDIT: If service ncsd stop doesn't work, try service unscd stop.  As documented here:\nhttp://dave.ninja/2015/07/30/asp-net-on-linux-part-2-installing-the-net-framework/\n. ",
    "sebastianbk": "I also have this issue. Is there any update on a solution?\n. Got it. Thanks @davidfowl \n. Hey @davidfowl. Just wanted to let you know that I am stilling experiencing this issue on fresh Ubuntu box running in Azure with the latest version of Mono. Killing unscd resolves the issue. I'm thinking it's a Mono thing but anyway it's still there.\n. ",
    "glatzert": "@troydai \nI was not aware, that there is such entry:\n\"sdk\": {\n    \"version\": \"1.0.0-beta4\"\n}\nI assume i have to Change it?\n. @troydai \nOkay - I removed it from the global.json - the error vanished.\nThanks so far :+1: \nAfter changing that, it won won't finish restoring.\nIt hangs with \"CACHE \" - do I have to do something else?\n. Okay - that did it.\nI appreciate your help :+1: \nPrehaps you guys think about adding a timeout for the Cache Operation - since it tried all night ;)\nOr a kill all Caches button..\nNevertheless: good work - Keep it up\n. ",
    "dergroncki": "I have the same problem...\n. ",
    "terryt2000": "+1\n. ",
    "betimd": "+1\n. ",
    "mxpv": "+1\n. ",
    "dgee2": "@Eilon @davidfowl @DamianEdwards Are any of you able to enlighten us?\n. ",
    "joergjo": "+1\n. Thanks, that did the trick!\n. ",
    "premkumar-gg": "+1\nFor me it is a dependency in \"xunit.runner.dnx\"\n. ",
    "henriqueprj": "Me too. => \"xunit.runner.dnx\"\n. ",
    "RehanSaeed": "+1\n. +1 for @roji's latest list of requirements. Would really like to build projects in a CI scenario and it's not currently as easy as it should be.\n. Has anyone been able to get the DNX_BUILD_VERSION environment variable to work from @davidfowl's comment? Here is my PowerShell script:\n```\nContinuous Integration server passes version into the PowerShell script.\n$version = $args[0]\ndnu restore Source\\MyProject\\project.json\ndnu publish Source\\MyProject\\project.json --configuration Release --include-symbols --no-source --out artifacts\n```\nI'm still getting my .nupkg files output with a 1.0.0 version on Beta 8.\n. Was this never re-implemented for .NET Core 1.1.1? Only AssemblyTitle seems to be driven by the title propery of project.json.. Cool, that solves that problem.\n. I'm using the latest version of nuget.exe from https://dist.nuget.org/win-x86-commandline/latest/nuget.exe and am getting the following error complaining about the version number when using the nuget publish command:\n\n'1.0.0-1' is not a valid version string.\n\nnuget.exe does not like the dash in the version number. There is a related issue on the NuGet GitHub repository here. I'm publishing to an internal NuGet server. How do you get around this internally?\n. Would it be possible to allow \"version\": \"1.0.0.* versions with a . instead of a -? I had a look at the source code and it's specifically looking for a dash.\n. Thanks @ankitbko.\n. ",
    "milutinovici": "What's the workaround for xunit runner?\n. ",
    "mehtkab": "same question as milutinovici. Can't install the xunit.runner.dnx, because it can't resolve the commandlineutils (beta5).\n. ",
    "ielcoro": "The problematic package seems to be Microsoft.Framework.TestHost as is published in nuget still carries dependecies with Microsoft.Framework.CommandLineUtils.Sources.\nI get around it by changing my nuget package source settings to the master builds feed from nuget: https://www.myget.org/F/aspnetmaster/ The Microsoft.Framework.TestHost hosted there has the correct dependencies.\nThat change makes xunit runner to work.\n. Glad to help!\n. ",
    "jpoehls": "I'm not aware of any changes, that's the annoying thing. I basically switched branches, came back and did a git clean and tried to build and it flopped. I'm sure something must have changed but I don't have a clue what.\nHere's my project.json file.\n{\n    \"version\": \"0.1.1\",\n    \"dependencies\": {\n        \"EntityFramework.Core\": \"7.0.0-beta4\",\n        \"EntityFramework.InMemory\": \"7.0.0-beta4\",\n  ... some internal stuff\n        \"Microsoft.AspNet.Mvc\": \"6.0.0-beta4\",\n        \"Microsoft.Composition\": \"1.0.30\",\n        \"Microsoft.Framework.ConfigurationModel\": \"1.0.0-beta4\"\n    },\n    \"frameworks\": {\n        \"dnx451\": {\n            \"frameworkAssemblies\": {\n                \"System.ComponentModel.Composition\": \"4.0.0.0\"\n            }\n        }\n    },\n    \"publishExclude\": [\n        \"**.xproj\",\n        \"**.user\"\n    ]\n}\n. @troydai no, no project.json anywhere beneath my bin folder.\n. I'd bet so. Even doing ls -recurse -include node_modules in PowerShell errors out with a PathTooLongException.\nWhat's the workaround for that? Like I said, I've already got my project at c:\\pts -- so I can't shorten that end of it.\n. ",
    "thomaslevesque": "I have a similar issue with dnu build. Here's the output:\n```\ndnu : System.IO.PathTooLongException: The specified path, file name, or both are too long. The fully qualified file \nname must be less than 260 characters, and the directory name must be less than 248 characters.\nAt line:1 char:1\n+ dnu build 2> D:\\tmp\\output.txt\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (System.IO.PathT...248 characters.:String) [], RemoteException\n    + FullyQualifiedErrorId : NativeCommandError\nat System.IO.PathHelper.GetFullPathName()\nat System.IO.Path.NormalizePath(String path, Boolean fullCheck, Int32 maxPathLength, Boolean expandShortPaths)\n   at System.IO.Path.GetFullPathInternal(String path)\n   at System.IO.FileSystemEnumerableIterator1..ctor(String path, String originalUserPath, String searchPattern, \nSearchOption searchOption, SearchResultHandler1 resultHandler, Boolean checkHost)\n   at System.IO.DirectoryInfo.EnumerateFileSystemInfos(String searchPattern, SearchOption searchOption)\n   at \nMicrosoft.Framework.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.d__3.MoveNext()\n   at System.Collections.Generic.List1.InsertRange(Int32 index, IEnumerable1 collection)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String \nparentRelativePath)\n   at Microsoft.Framework.FileSystemGlobbing.Internal.MatcherContext.Execute()\n   at Microsoft.Framework.FileSystemGlobbing.Matcher.Execute(DirectoryInfoBase directoryInfo)\n   at Microsoft.Framework.FileSystemGlobbing.MatcherExtensions.GetResultsInFullPath(Matcher matcher, String \ndirectoryPath)\n   at Microsoft.Framework.Runtime.PatternGroup.SearchFiles(String rootPath)\n   at Microsoft.Framework.Runtime.ProjectFilesCollection.get_SourceFiles()\n   at Microsoft.Framework.Runtime.Roslyn.RoslynCompiler.CompileProject(ICompilationProject project, ILibraryKey \ntarget, IEnumerable1 incomingReferences, IEnumerable1 incomingSourceReferences, Func1 resourcesResolver)\n   at Microsoft.Framework.Runtime.Roslyn.RoslynProjectCompiler.CompileProject(ICompilationProject pr\noject, ILibraryKey target, Func1 referenceResolver, Func1 resourcesResolver)\n   at \nMicrosoft.Framework.Runtime.ProjectLibraryExportProvider.<>c__DisplayClass5_0.<GetLibraryExport>b__0(CacheContext ctx)\n   at Microsoft.Framework.Runtime.Caching.CacheExt\nensions.<>c__DisplayClass0_01.b__0(CacheContext ctx)\n   at Microsoft.Framework.Runtime.Caching.Cache.CreateEntry(Object k, Func2 acquire)\n   at Microsoft.Framework.Runtime.Caching.Cache.<>c__DisplayClass5_0.<AddEntry>b__0()\n   at System.Lazy1.Cr\neateValue()\n   at System.Lazy1.LazyInitValue()\n   at System.Lazy1.get_Value()\n   at Microsoft.Framework.Runtime.Caching.Cache.Get(Object key, Func2 factory)\n   at Microsoft.Framework.Runtime.Caching.CacheExtensions.Get[T](ICache cache, Object key, Func2 factory)\n   at Microsoft.Framework.Runtime.ProjectLibraryExportProvider.GetLibraryExport(ILibraryKey target)\n   at Microsoft.Framework.Runtime.CompositeLibraryExportProvider.<>c__DisplayClass2_0.b__0(ILibraryEx\nportProvider r)\n   at System.Linq.Enumerable.WhereSelectArrayIterator2.MoveNext()\n   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable1 source, Func2 predicate)\n   at Microsoft.Framework.Runtime.CompositeLibraryExportProvider.GetLibraryExport(ILibraryKey target)\n   at Microsoft.Framework.Runtime.ProjectExportProviderHelper.GetExportsRecursive(ICache cache, ILibraryManager \nmanager, ILibraryExportProvider libraryExportProvider, ILibraryKey target, Func2 include)\n   at Microsoft.Framework.Runtime.ProjectExportProviderHelper.GetExportsRecursive(ICache cache, ILibraryManager \nmanager, ILibraryExportProvider libraryExportProvider, ILibraryKey target, Boolean dependenciesOnly)\n   at Microsoft.Framework.Runtime.LibraryManager.<>c__DisplayClass23_0.b__0(CacheContext ctx)\n   at Microsoft.Framework.Runtime.Caching.CacheExtensions.<>c__DisplayClass0_01.<Get>b__0(CacheContext ctx)\n   at Microsoft.Framework.Runtime.Caching.Cache.CreateEntry(Object k, Func2 acquire)\n   at Microsoft.Framework.Runtime.Caching.Cache.<>c__DisplayClass5_0.b__0()\n   at System.Lazy1.CreateValue()\n   at System.Lazy1.LazyInitValue()\n   at System.Lazy1.get_Value()\n   at Microsoft.Framework.Runtime.Caching.Cache.Get(Object key, Func2 factory)\n   at Microsoft.Framework.Runtime.Caching.CacheExtensions.GetT\n   at dnx.host.RuntimeBootstrapper.ExecuteAsync(String[] args)\n   at dnx.host.RuntimeBootstrapper.Execute(String[] args)\n```\nIf I try to build in VS2015, I don't get any error, but the build never completes\n. @troydai, I don't think so, but I no longer have the project that was failing. I think it was caused by the node_modules folder which has a very deep folder hierarchy.\n. ",
    "skorunka": "Problem solved. Thank you.\n. ",
    "atillatan": "@troydai Thank you.\n. ",
    "stephentoub": "Will do, thanks.\n. Thanks for the details, @MartinJohns.  I have a hunch what the issue is and that it's manifesting due to how node is redirecting the standard descriptors. I'll try to repro what you're seeing and get back to you.\n. This should be fixed with https://github.com/dotnet/corefx/pull/3352\n. ",
    "IEvangelist": ":+1: \n. ",
    "jods4": "App.config or web.config? Both would work of course, but given that people running under IIS will probably have a web.config inside wwwroot anyway, it may make sense to reuse it.\n. I can speak for my use-case, which was what prompted @davidfowl to create this issue (but he didn't include the context).\nI run ASP.NET 5 on top of IIS and .NET 4.6 (Core is not a target). In this context I use some libraries that rely on things found in web.config and can't be configured otherwise.\nExample right from Microsoft: EF6 + Oracle. It needs the Oracle provider to be configured in the DbProviderFactories. No luck though, because in .NET 4.6 there is no way to configure the DbProviderFactories outside of System.Configuration.ConfigurationManager (i.e. web.config). \nNow the drama is that System.Configuration uses APP_CONFIG_FILE from AppDomain data to find its config file. But it is set wrong by ASP.NET 5 running on its own web server and when I get a chance to set it it's too late.\nFor me, this issue is about making sure that when ASP.NET 5 runs on .NET 4.6, System.Configuration works properly to maintain compatibility with non-Core libraries (i.e. picking up web.config or app.config at the right place if they exist). It's clear that in Core, this doesn't matter and Core libraries should use the new Configuration APIs.\n. @anurse I would need to redo some tests to be sure of that. We started with dnx . web but then when VS 2015 RTM came we switched to that (and hence IIS Express -- this reflects our deployment environment better).\nIf I trust my old self I wrote this: \n\nBut it is set wrong by ASP.NET 5 running on its own web server \n\nSo that would be consistent with your findings.\nI will perform a quick test tomorrow and let you know.\n. @anurse I removed my dirty hack and tested my app in IIS: it seems to work on beta-6 indeed. So I think my report above was accurate: this is only a problem with WebListener.\nUsing wwwroot/web.config is exactly what I would have expected in that context. That makes perfect sense I think.\n. @anurse Oh, now I see why you made that comment. It seemed obvious but now it's not!\nIt is a bit surprising / inconsistent I guess. Ideally, the same app should be able to run on IIS and WebListener interchangeably.\nweb.config is indeed an IIS concept -- especially <system.webServer> -- but not just that. I started with ASP.NET 1.1 and at that time we learned to configure ASP.NET with <connectionStrings>, <appSettings> and friends; and I don't even think <system.webServer> existed (those were the IIS 5 / 6 days).\nTo me and probably a lot of other people, I think of web.config (also) as the .NET configuration file for ASP.NET websites. While -- of course -- app.config is the .NET configuration file for standalone applications.\nIf it doesn't have far reaching implications, I would consider poking for wwwroot/web.config first and then fallback to app.config. I think that would make sense for a lot of people and enable hosting the same project on both IIS and WebListener. I did not think this through, though.\n. First, let me say that I don't feel strongly about this issue as at this point we are only running on IIS and being able to dnx web is a bonus but I don't really care if it doesn't work.\nDon't be too quick to dismiss \"legacy .NET\". I know a lot of enterprises are going to run ASP.NET 5 on top of the full .NET framework (4.5+). If only just because lots of 3rd party libraries that are important are not compatible with .NET Core (we do). Maybe I am wrong but I don't get the impression that the message communicated by MS is that full framework has become \"legacy\".\nAssuming that running on full .NET is still a mainstream scenario (is it?), there are lots of libs out there that are not .NET Core aware and may not be before long (if ever...). And in fact this is a key motivation to run on full .NET. Some of those may be dependent of \"old\" System.Configuration. Ideally libs would accept other way to get their configuration (via APIs, etc.) so that we could feed them from IConfiguration, but it's not always possible. Case in point: MS' own core framework. What I want to say here is that making System.Configuration work on full .NET is certainly more than a \"legacy\", nice-to-have, thing.\nFrom the same line of thought: \"As more things transition to the newer system [...]\". Maybe you should clarify MS thinking regarding the full framework, but I don't think everything is going to be ASP.NET 5 / Core -ready soon. Don't get me wrong, I get the benefits of Core even when running on Windows only. But yet I believe .NET Core will mostly interest the cross-platform developpers, at least at first.\nNow back to the issue. Who is affected? \n- Only people who use web.config --> Full framework target / Windows only.\n- Only people who want to run on both IIS and dnx web --> certainly few, except...\n- ... People who develop on VS Code and deploy on IIS.\nIs that a lot of people? I have no idea.\nIs it acceptable that they have to essentially duplicate their config so that it works in both environment? It's very annoying (risk of forgetting to copy the config when making changes); but at least it \nworks and could be automated during the build/publish.\nAs I said I don't care too much about dnx web, this is just my feedback about this issue.\n. I have exactly the same problem. \nRunning from the command line and dnx . web works.\nRunning in IISExpress from VS 2015 does not (with the exact error message above).\nI tried to set the environment variable DNX_IIS_RUNTIME_FRAMEWORK to dnx46 but it makes no difference at all. I checked that the env. variable is set properly using Process Explorer:\n\n. @anurse Yes I did.\n. @anurse My project was created in VS Code before VS 2015 RTM, so I figured that maybe there was \nsome default value somewhere in the official template that I hadn't gotten right.\nAnd with a brand new ASP.NET project created from VS it worked. \nSo I spent a lot of time trying to figure out what was different... not much! In the end, inside project.json I changed all my references from X.0.0-beta6-*  to X.0.0-beta6 and after the packages were restored it worked.\n. Reading this in the beta7 announcement:\n\nWhen running on the full .NET Framework you can now use the new --framework switch with DNX to specify which .NET Framework version to use (ex. dnx451, dnx452, dnx46).\n\nmade me wonder if anything has changed in the tooling / IIS regarding running asp.net 5 on .NET 4.6.\nDo we still need to set DNX_IIS_RUNTIME_FRAMEWORK?\n. OK. Thanks for the info.\n. ",
    "masonwheeler": "Besides size of the deployment, what's the motivation?\nDeployment.\nIt really is that simple.  Looking at the world through ASP-colored glasses, that may not look like it makes much sense,  but when this is used as part of the CoreCLR machinery, it needs to be made friendly for deployment to desktop and mobile systems.\nProject.json and all the folder hierarchy of dependencies should be considered source; the finished product should be as simple (and small) as possible!\n. ",
    "MartinJohns": "@davidfowl Please don't close tickets because something should be possible. Close it when it either is possible, or it was decided that this is not supported.\n. @stephentoub Great to hear, thanks!\nIn the meanwhile, if anyone runs across this issue, this is my temporary workaround:\n```\nvar exec = require('child_process').exec;\nvar spawn = require('child_process').spawn;\nvar fs = require('fs');\nvar tmp = require('tmp');\nvar myExec = function (command, params, callback) {\n    var isWin = /win/.test(process.platform);\n    if (isWin) {\n        var cmd = command + ' ' + params.join(' ');\n        exec(cmd, callback);\n    } else {\n        var stdoutFile = tmp.fileSync();\n        var stderrFile = tmp.fileSync();\n    var child = spawn(command, params, { stdio: [null, stdoutFile, stderrFile] });\n    child.on('close', function (errCode) {\n        var stdout = fs.readFileSync(stdoutFile.name, 'utf8');\n        var stderr = fs.readFileSync(stderrFile.name, 'utf8');\n        var err = errCode ? { code: errCode, cmd: command + ' ' + params.join(' ') } : null;\n\n        stdoutFile.removeCallback();\n        stderrFile.removeCallback();\n\n        callback(err, stdout, stderr);\n    });\n}\n\n};\n```\nThis needs the tmp package from NPM. I need two different calls for Windows and Linux, because exec fails on Linux but works on Windows, and spawn fails on Windows but works on Linux.\n. ",
    "jmloeffler": "This seems like a good issue for someone like me, who is new to the project, to pick up and be productive while learning how everything fits together.  I was thinking of implementing a IComparer and using it to sort the list prior to adding the commands to the StringBuilder in ShowHelp().  Does this seem reasonable?  It's a bit side-affect-y since it would sort the list in place but structural solutions felt a little heavy for something that would only be used when ShowHelp() is called.  I'd be happy to gist or pull-request what I'm proposing but figured it would be good to introduce myself and ask for guidance first, since this is my starter into the project.\n. This seems like a good issue for someone like me, who is new to the project, to pick up and be productive while learning how everything fits together.  I was thinking of implementing a IComparer and using it to sort the list prior to adding the commands to the StringBuilder in ShowHelp().  Does this seem reasonable?  It's a bit side-affect-y since it would sort the list in place but structural solutions felt a little heavy for something that would only be used when ShowHelp() is called.  I'd be happy to gist or pull-request what I'm proposing but figured it would be good to introduce myself and ask for guidance first, since this is my starter into the project.\n. Great suggestion.  I was way overthinking it.  :-)\n. Great suggestion.  I was way overthinking it.  :-)\n. From cmd and ps, respectively...\n\n\n. From cmd and ps, respectively...\n\n\n. ",
    "flyandi": "Yes, that's correct.\nRunning msbuild on an .xproj file with project.json.\nI installed dnvm and installed the dnx runtime environment which was placed into my user profile. So the question is now. The project is marked with:\n\"frameworks\": {\n \"dnx451\": { }\n},\nand most dependencies are marked to 1.0.0-beta4 which is installed (via dnvm).\nHowever msbuild doesn't have any of the VisualStudio files installed. Are they suppose to be installed automatically with \"msbuild 14.0\" or do I need to install another package?\n. ",
    "sulhome": "@flyandi are you using TFS 2013 or 2015?\n. @ivanbuhov using dnvm uninstall is giving \"Unknown command: 'uninstall'\"\n. @anurse 100%. thank you\n. ",
    "dazinator": "I know this is a little old now, but I think it's still relevant.\n\nIs there a reason you are specifically restricted to using MSBuild here? The MSBuild targets basically just execute dnu build\n\nFor projects that contain Typescript, the project has a setting \"Compile TypeScript on build\". This is run by MSBuild, but not by Dnu (or presumably, the new dotnet cli either).\nSo for this reason (and potentially other actions that are only actioned by MSBuild) it's useful to be able to do an MSBuild of the solution. As a side issue, unfortunately, if setting up a build server, installing the MSBuild tools is not enough, you also have to install Visual Studio to get the required targets. It would be much better if there was a seperate install to install the necessary build targets, without having to install VS in my opinion!\n. +1 Need this! :)\n. Also, \"packExclude\": [ \"**/**.cs\" ], doesn't seem to stop the source code from being placed in the nuget package either..\n. Ok, I have figured out the issue, the problem was I was looking in the \"symbols\" package by mistake :(\nMy BAD!\n. I do understand that, but that's not very helpful :) given VS has not switched to dotnet cli yet, and our RC1 application is going to production, we are stuck with the dnx tool chain at present, so I really need to find some solution.\nI eventually found this: http://stackoverflow.com/questions/32033532/asp-net-5-failing-to-install-asp-net-5-nuget-package which lead me to the actual solution to this problem:\nYou need to use dnu restore --ignore-failed-sources. \n. ",
    "DanielVF": "I'm running into this issue as well. \nI'm new to the ASP.net ecosystem. To get your fixes, I just need to run dnvm upgrade?  Anything else? Do I need to wait a day or so?\n. ",
    "pprice": "Thanks for the quick response @davidfowl. I'll get a repro to you offline.\nI played around a little more and I found that If I call restore on ALL project's before attempting the build of the target project, this seems to work. This was non-obvious to me, I would have expected restore to talk the dependency graph, or be presented with potentially missing package errors. Instead I got build errors for types from \"Project A\", as I guess it's dependencies couldn't be fulfilled. \n``` powershell\nWrite-Host \"Remove exiting project.lock.json files\";\nGet-ChildItem *.lock.json -Recurse | Remove-Item;\nWrite-Host \"Restoring packages...\";\nGet-ChildItem project.json -Recurse | % {\n    $FullPath = $_.FullName;\n    $dnuRestoreCommand = \"restore \"$FullPath\"\";\n   Write-Host \"Executing dnu with '$dnuRestoreCommand'\";\n   _Execute -Command \"dnu\" -Args $dnuRestoreCommand -ExitOnFailure | Out-Null; \n};\n```\n_Execute is a wrapper around Start-Process \n. ",
    "fishg": "Wait for new mono version.\n. Wait for new mono version.\n. ",
    "mbharodia": "Ok. Good to know. I have looked into announcements and could not find a fix to the following error or any other relevant information that may help\nSystem.InvalidOperationException: No service for type 'Microsoft.Framework.Runtime.IApplicationEnvironment' has been registered.\nThe application does not hit even StartUp metod in webApplication project. I have just created a project using VS 2015 template. Nothing has changes in it except added a global.json file and pinned beta5 runtime. I am using CLR (no core version) version and x64 runtime (1.0.0-beta5). I am running my VS 2015 on Windows 10 (insider preview)\nWould you have any idea? Thanks in advance for your help.\n. Hi David,\nOk. In that case how do I resolve this error?\nI have looked into announcements but was not able find anything relevant to this error.\nActually this error has been thrown even before hitting the StratUp method in Web Application project. As said before I have created a project using VS 2015 web application template and nothing has been modified in it except adding global.json and pinned the version of 1.0.0-beta5 (x64 CLR).\nSystem.InvalidOperationException: No service for type 'Microsoft.Framework.Runtime.IApplicationEnvironment' has been registered.\nIs there any idea?\nThanks in advance for your help.\nFrom: David Fowler [mailto:notifications@github.com]\nSent: Thursday, July 09, 2015 10:31 AM\nTo: aspnet/dnx\nCc: Mayur Bharodia\nSubject: Re: [dnx] Question: Changing runtime to 1.0.0 Beta 5 results in error (#2221)\nI thought that beta5 would be backward compatible with be beta4. So whatever works on beta4 should work on beta5 too.\nThis is a bad assumptions. Our betas are not backwards compatible. You need to update everything to beta5 (including packages and you should read the Announcements repo to see the changes https://github.com/aspnet/Announcements/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0.0-beta5\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/dnx/issues/2221#issuecomment-120059641.\n. Hi Josh,\nThanks a lot for reply. I will double check that.\nHowever, earlier, as soon as I looked into error code suggested by VS, I was all into that. I did not think about modifying anything else. Good suggestion. I will update the codebase and let you know.\nFrom: Josh Dovishaw [mailto:notifications@github.com]\nSent: Friday, July 10, 2015 8:43 AM\nTo: aspnet/dnx\nCc: Mayur Bharodia\nSubject: Re: [dnx] Cannot build web application project after upgrading to beta 5 (#2242)\nThe last parameter doesn't take shouldLockout anymore. I got it working by changing it to:\nSignInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, false);\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/dnx/issues/2242#issuecomment-120425870.\n. Here it is. Thanks a lot for looking into this.\n{\n  \"webroot\": \"wwwroot\",\n  \"userSecretsId\": \"aspnet5-CCClientWeb-8bbc0c70-ab78-4053-a5bf-492342d52f2a\",\n  \"version\": \"1.0.0-*\",\n\"dependencies\": {\n    \"EntityFramework.SqlServer\": \"7.0.0-beta5\",\n    \"EntityFramework.Commands\": \"7.0.0-beta5\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-beta5\",\n    \"Microsoft.AspNet.Mvc.TagHelpers\": \"6.0.0-beta5\",\n    \"Microsoft.AspNet.Authentication.Cookies\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Authentication.Facebook\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Authentication.Google\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Authentication.MicrosoftAccount\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Authentication.Twitter\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Diagnostics.Entity\": \"7.0.0-beta5\",\n    \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-beta5\",\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Tooling.Razor\": \"1.0.0-beta5\",\n    \"Microsoft.Framework.Configuration\": \"1.0.0-beta5\",\n    \"Microsoft.Framework.Configuration.Json\": \"1.0.0-*\",\n    \"Microsoft.Framework.CodeGenerators.Mvc\": \"1.0.0-beta5\",\n    \"Microsoft.Framework.Logging\": \"1.0.0-beta5\",\n    \"Microsoft.Framework.Logging.Console\": \"1.0.0-beta5\",\n    \"Microsoft.VisualStudio.Web.BrowserLink.Loader\": \"14.0.0-beta5\",\n    \"Microsoft.AspNet.Identity\": \"3.0.0-beta5\"\n  },\n\"commands\": {\n    \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5000\",\n    \"gen\": \"Microsoft.Framework.CodeGeneration\",\n    \"ef\": \"EntityFramework.Commands\"\n  },\n\"frameworks\": {\n    \"dnx451\": {\n      \"dependencies\": {\n        \"Microsoft.AspNet.Http.Core\": \"1.0.0-beta4\",\n        \"CCClients.Interfaces\": \"1.0.0-*\"\n      }\n    },\n    \"dnxcore50\": { }\n  },\n\"exclude\": [\n    \"wwwroot\",\n    \"node_modules\",\n    \"bower_components\"\n  ],\n  \"publishExclude\": [\n    \"node_modules\",\n    \"bower_components\",\n    \".xproj\",\n    \".user\",\n    \"**.vspscc\"\n  ],\n  \"scripts\": {\n    \"postrestore\": [ \"npm install\", \"bower install\" ],\n    \"prepare\": [ \"gulp copy\" ]\n  }\n}\n. ",
    "philcleveland": "I agree Glenn. It looks pretty much the same.  Feel free to close. Thanks\n. Thanks @nosami. I actually went with beta5 and it did work.  I am unblocked from learning :)\n. ",
    "jochenvanwylick": "Hi - sure I can do that. I think the service account which the agent defaulted to - doesn't. But in a CI server scenario, is that desirable?\n. @AntonLosev You may have to run dnu restore - seems you're just missing the DLLs.\n. ",
    "eugeneagafonov": "Setting the DNX_HOME environment variable does not work for me. My setup is TFS 2015 build agent on windows 2012R2, VS 2015 Pro installed, I run the build agent under domain account. The build agent keeps looking dnx under default path.\n. @pranavkm Yes I'm sure, I've restarted the server, checked env variables for the build agent account, and it still does not work.\nIs there any option to install dnvm/dnx globally on server, not in every user profile?\n. ",
    "AntonLosev": "I had this error. \nError : The Dnx Runtime package needs to be installed. See output window for more details.\nI added steps for build - \nInstall NuGet with command -source \"https://www.nuget.org/api/v2/;https://api.nuget.org/v3/\"\nand I added powerShell command for install DNX\nNow i have error:\n```\n2015-08-26T07:31:44.4260967Z ##[error]src\\Volga\\Startup.cs(1,17): Error CS0234: The type or namespace name 'AspNet' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)\n2015-08-26T07:31:44.4270974Z      2>H:\\TfsData\\Build_work\\960b9b9c\\Volga\\src\\Volga\\Startup.cs(1,17): DNX,Version=v4.6 error CS0234: The type or namespace name 'AspNet' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?) [H:\\TfsData\\Build_work\\960b9b9c\\Volga\\src\\Volga\\Volga.xproj]\n```\nWaiting betta7 :(\n. @jochenvanwylick \n```\nC:>dnu restore\nMicrosoft .NET Development Utility CLR-x86-1.0.0-beta6-12256\n\nSystem.UnauthorizedAccessException: \u041e\u0442\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0435 \u043f\u043e \u043f\u0443\u0442\u0438 \"C:\\Docum\n Settings\\All Users\\Application Data\\Application Data\\Application Data\\A\non Data\\Application Data\\Application Data\\Application Data\\Application D\nication Data\\Application Data\\Application Data\\Documents\\My Videos\".\n```\n. I changed my permissions and now have error\n```\nC:>dnu restore\nMicrosoft .NET Development Utility CLR-x86-1.0.0-beta6-12256\n\nSystem.UnauthorizedAccessException: \u041e\u0442\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0435 \u043f\u043e \u043f\u0443\u0442\u0438 \"C:\\Documents and\n Settings\\All Users\\Application Data\\Application Data\\Application Data\\Applicati\non Data\\Application Data\\Application Data\\Application Data\\Application Data\\Appl\nication Data\\Application Data\\Application Data\\Microsoft\\Windows\\SystemData\".\n   \u0432 System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\n   \u0432 System.IO.FileSystemEnumerableIterator1.AddSearchableDirsToStack(SearchDat\na localSearchData)\n   \u0432 System.IO.FileSystemEnumerableIterator1.MoveNext()\n   \u0432 System.Collections.Generic.List1.InsertRange(Int32 index, IEnumerable1 co\nllection)\n   \u0432 Microsoft.Framework.PackageManager.RestoreCommand.d__69.MoveNext()\n\nRestore failed\n\u041e\u0442\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0435 \u043f\u043e \u043f\u0443\u0442\u0438 \"C:\\Documents and Settings\\All Users\\Application Data\n\\Application Data\\Application Data\\Application Data\\Application Data\\Application\n Data\\Application Data\\Application Data\\Application Data\\Application Data\\Applic\nation Data\\Microsoft\\Windows\\SystemData\".\nSystem.NullReferenceException: \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043e\u0431\u044a\u0435\u043a\u0442 \u043d\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043e\u0431\u044a\u0435\u043a\u0442\n\u0430.\n   \u0432 Microsoft.Framework.PackageManager.RestoreCommand.d__68.MoveNext()\n--- \u041a\u043e\u043d\u0435\u0446 \u0442\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u0442\u0435\u043a\u0430 \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0433\u0434\u0435 \u0432\u043e\u0437\u043d\u0438\u043a\u043b\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\n ---\n   \u0432 System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   \u0432 System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNoti\nfication(Task task)\n   \u0432 Microsoft.Framework.PackageManager.RestoreConsoleCommand.<>c__DisplayClass0\n_0.<b__1>d.MoveNext()\nC:>\n```\nI can't change permissions for SystemData\nWhat for DNU have access in myVideo and in others folders?\n. ",
    "ABrehm264": "What are the instructions for setting DNX_HOME? I haven't been able to find them.\n. ",
    "dearprudence": "What a total debacle. \n. ",
    "CuddleBunny": "The last parameter is no longer named shouldLockout. I got it working by changing it to:\nSignInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, false);\nI imagine that this would also work:\nSignInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, lockoutOnFailure: false);\n. Sure, I have a Shared Project:\n```\n{\n    \"version\": \"1.0.0-*\",\n    \"description\": \"\",\n    \"authors\": [ \"Josh Dovishaw\" ],\n\"dependencies\": {\n    \"AutoMapper\": \"3.3.1\",\n    \"EntityFramework\": \"7.0.0-beta6-*\",\n    \"EntityFramework.Commands\": \"7.0.0-beta6-*\",\n    \"EntityFramework.Core\": \"7.0.0-beta6-*\",\n    \"EntityFramework.SqlServer\": \"7.0.0-beta6-*\",\n    \"Microsoft.AspNet.Hosting.Abstractions\": \"1.0.0-beta6-*\",\n    \"Microsoft.AspNet.Http\": \"1.0.0-beta6-*\",\n    \"Microsoft.AspNet.Http.Extensions\": \"1.0.0-beta6-*\",\n    \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-beta6-*\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-beta6-*\",\n    \"Microsoft.AspNet.Providers.Core\": \"2.0.0\",\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta6-*\",\n    \"Microsoft.AspNet.Session\": \"1.0.0-beta6-*\",\n    \"Microsoft.Framework.CodeGenerators.Mvc\": \"1.0.0-beta6-*\",\n    \"Microsoft.Framework.Configuration.Json\": \"1.0.0-beta6-*\",\n    \"Microsoft.Framework.OptionsModel\": \"1.0.0-beta6-*\",\n    \"Microsoft.Net.Http\": \"2.2.29\",\n    \"RavenDB.Embedded\": \"3.0.3685-Unstable\",\n    \"System.IO.Compression.ZipFile\": \"4.0.0-beta-*\",\n        \"System.Xml.XmlDocument\": \"4.0.0-beta-*\"\n},\n\n\"commands\": {\n    \"gen\": \"Microsoft.Framework.CodeGeneration\",\n    \"ef\": \"EntityFramework.Commands\"\n},\n\n\"frameworks\": {\n    \"dnx451\": {\n        \"frameworkAssemblies\": { \"System.ComponentModel.DataAnnotations\": \"\" }\n    }\n}\n\n}\n```\nand my main project:\n```\n{\n    \"webroot\": \"wwwroot\",\n    \"version\": \"1.0.0-*\",\n    \"authors\": [ \"Josh Dovishaw\" ],\n\"dependencies\": {\n    \"AutoMapper\": \"3.3.1\",\n    \"EntityFramework\": \"7.0.0-beta6-*\",\n    \"EntityFramework.Core\": \"7.0.0-beta6-*\",\n    \"EntityFramework.SqlServer\": \"7.0.0-beta6-*\",\n    \"jQuery\": \"2.1.3\",\n    \"LMS.Shared\": \"\",\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-beta6-*\",\n    \"Microsoft.AspNet.Diagnostics.Entity\": \"7.0.0-beta6-*\",\n    \"Microsoft.AspNet.Identity\": \"3.0.0-beta6-*\",\n    \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-beta6-*\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-beta6-*\",\n    \"Microsoft.AspNet.Mvc.TagHelpers\": \"6.0.0-beta6-*\",\n    \"Microsoft.AspNet.Razor\": \"4.0.0-beta6-*\",\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta6-*\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta6-*\",\n    \"Microsoft.AspNet.Session\": \"1.0.0-beta6-*\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-beta6-*\",\n    \"Microsoft.Framework.CodeGenerators.Mvc\": \"1.0.0-beta6-*\",\n    \"Microsoft.Framework.Configuration\": \"1.0.0-beta6-*\",\n    \"Microsoft.Framework.Configuration.Json\": \"1.0.0-beta6-*\",\n    \"Microsoft.Framework.DependencyInjection\": \"1.0.0-beta6-*\",\n    \"Microsoft.Framework.DependencyInjection.Abstractions\": \"1.0.0-beta6-*\",\n    \"Microsoft.Net.Http\": \"2.2.29\",\n    \"RavenDB.Embedded\": \"3.0.3685-Unstable\",\n    \"System.IO.Compression.ZipFile\": \"4.0.0-beta-*\",\n        \"System.Xml.XmlDocument\": \"4.0.0-beta-*\"\n},\n\n\"commands\": {\n    \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5000\",\n    \"gen\": \"Microsoft.Framework.CodeGeneration\",\n    \"ef\": \"EntityFramework.Commands\"\n},\n\n\"frameworks\": {\n    \"dnx451\": {\n\n    }\n},\n\n\"publishExclude\": [\n    \"node_modules\",\n    \"bower_components\",\n    \"**.xproj\",\n    \"**.user\",\n    \"**.vspscc\"\n],\n\"exclude\": [\n    \"wwwroot\",\n    \"node_modules\",\n    \"bower_components\"\n]\n\n}\n```\n. Now I only get 100 errors instead of 1,500 but I have a feeling that is just because it stopped earlier in the build process. Newer seemingly related errors are like:\n```\nThe dependency System.Collections 4.0.10-beta-22231 in project LMS.Shared does not support framework DNX,Version=v4.5.1.\nThe predefined type 'Task' is defined in multiple assemblies in the global alias; using definition from 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'\n```\nI am now also getting an error from Nuget:\nCould not find a part of the path 'C:\\Users\\jdovishaw\\.dnx\\packages\\System.Threading\\4.0.0\\System.Threading.4.0.0.nupkg.sha512'.\nIf I try \"System.Runtime\": \"4.0.0-beta-*\" instead, I get the same errors because:\nDependency specified was System.Runtime >= 4.0.0-beta-* but ended up with System.Runtime 4.0.10-beta-23019.\n. Interesting. I've been using ZipFile in 451 since like April, it only just broke this week I think. I tried changing targets to 452 and 46 earlier this week because I saw them in some of the commit notes and it seems to build error free. I could not however, figure out how to get a dnx46 compatible version of the runtime, running the app gives me the following runtime error:\n```\nServer Error in '/' Application.\nThe current runtime target framework is not compatible with 'LMS.Web'.\nCurrent runtime Target Framework: 'DNX,Version=v4.5 (dnx45)'\n Type: CLR\n Architecture: x86\n Version: 1.0.0-beta6-12207\nPlease make sure the runtime matches a framework specified in project.json\nDescription: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code.\nException Details: System.InvalidOperationException: The current runtime target framework is not compatible with 'LMS.Web'.\nCurrent runtime Target Framework: 'DNX,Version=v4.5 (dnx45)'\n Type: CLR\n Architecture: x86\n Version: 1.0.0-beta6-12207\nPlease make sure the runtime matches a framework specified in project.json\n```\nBoth project.json files have \n\"frameworks\": {\n    \"dnx46\": { ...\nIs there something else I have to do to target the newer framework?\n. Alright, I would definitely prefer to be on 4.6. My project currently has Microsoft.AspNet.Server.IIS (1.0.0-beta6-12057) so I don't think that is the problem. I don't see any target framework settings in the project properties or if I open the xproj in a text editor. \nWhen I went back to 4.5.1, I also had to remove System.Xml.XmlDocument in addition to System.IO.Compression.ZipFile to get it to build.\n. ",
    "yangyang80": "@victorhurdugaci  thanks for your reply. When I open the link you provided, it reported the page is not found. Please confirm whether the link is correct.\n. Thanks a lot. It works.\n. ",
    "IonRobu": "Hello,\nI ran into beta7-12302, installed new tooling and got error: \nMethod not found: 'Microsoft.Dnx.Runtime.Library Microsoft.Dnx.Runtime.ILibraryManager.GetLibraryInformation(System.String)'.\nAny solutions?\nThanks,\nIon\n. @davidfowl Do you mean a newer DNX tool version? How to achieve it?\nLater edit: the error appears only under IIS, not under WebListener\n. ",
    "ph1ll": "@IonRobu @davidfowl This may not be the best place for this issue but as it has already been mentioned, I am also receiving this error after updating to the latest DNX (beta7-12302) last night. Prior to this I was using beta7-12290 with no problems. The issue affect IIS only. Stacktrace is:\n```\n[MissingMethodException: Method not found: 'Microsoft.Dnx.Runtime.Library Microsoft.Dnx.Runtime.ILibraryManager.GetLibraryInformation(System.String)'.]\n   System.Web.HttpRuntime.HostingInit(HostingEnvironmentFlags hostingFlags, PolicyLevel policyLevel, Exception appDomainCreationException) +303\n[HttpException (0x80004005): Method not found: 'Microsoft.Dnx.Runtime.Library Microsoft.Dnx.Runtime.ILibraryManager.GetLibraryInformation(System.String)'.]\n   System.Web.HttpRuntime.FirstRequestInit(HttpContext context) +9920756\n   System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context) +101\n   System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context) +261\n```\n. beta7-12302 is the most recent DNX version on https://www.myget.org/gallery/aspnetvnext\n. ",
    "Ph47": "I am trying to allow EntityFramework use version 2.0.0-alpha-002 of Remotion.Linq and Lucene.Net.Linq - 1.13.183.0. But i cant find a way to make this move. \nDNU compile silently my project with one version of this package if i add direct dependency to project.config. Without direct dependency DNX silently substitutes version for Lucene.Net.Linq with newer one from EntityFramework.\nThis is not good behavior. DNU must at least make a warring or use different versions at once.\nI can upload sample if you need it.\n. I understand how it work now. But is a mistake here. Looks at figure 3 at this document. I have this situation at Remotion.Linq - low version dependency silently replaced with high version. Nobody cares about version compatibility. \nBecause of this approach, I spent two hours to understand exactly where the error is. Nor DNU nor runtime displays actual error (\"Version conflict\"). Instead of this an actual execution error was displayed (\"No such method\").\nBack to figure 3: we need a solution where package A use package B version 1.0 and SAME TIME package C use package B version 2.0. It can be a problem if classes flows from package, but if usage is internal for package it is possible to implement.\nAt article we have a text: \n\nToday, because the resolver treats versions as minimums, that generally means the highest version wins. However, if version ranges are introduced in the future the algorithm will need to choose the best version that fits within the range constraints. This could mean that the highest version is not chosen or that the runtime throws an exception due to irreconcilable range differences.\n\nI mean what we need at least \"...the runtime throws an exception...\" but we have nothing.\nMy project file here: https://gist.github.com/Ph47/9b50dba0adf992ed0fad but i have no ided how you can fix this with strategies described in article - none will works.\n. So make at least an error or warring message about conflicts at build time. It is quiet now.\n. At Least major version conflict needs a warring. It is really hard to find problem if you don't think about versions of subdependencies. I know none of developers who investigate entire tree of dependencies before installing package. May be level 1 or 2 no more. \nPackage owner already notified: https://github.com/themotleyfool/Lucene.Net.Linq/issues/86\nNo more discussion from me because as you heard me and understood.\n. GuardRex thanks for direction! I have nuget links for rc2. But where to find link to dnvm rc2? And VS do not suggest kestrel higher what 1.0.0-rc1-final. I tried WebListener rc2, same exception.\nI ll try Main solution, thx for link.\n. davidfowl thx! i am watching this repo now.\n. ",
    "sklose": "This actually happens in a clean docker container I use for builds on my CI system. All packages are restored from scratch on each build. Restoring, compiling, running unit tests works fine, just the publish step is failing.\n. I might have found the issue:\nhttps://github.com/aspnet/dnx/blob/dev/src/Microsoft.Framework.PackageManager/Publish/PublishPackage.cs line 28 ... there is no call to GetNormalizedVersionString() like in https://github.com/aspnet/dnx/commit/cae8aab5b38e0039f03eb87a8d994e3035179206\n. Is this on the road map to be fixed for v1? I am using Sake/KoreBuild as my build system, I think doing your workaround requires some significant changes in there to make it run dnu restore for each project instead of once on the root. I might just flatten my folder structure if this is a rather long term change for dnu.\n. ",
    "tillig": "Happens with Moq, too - version 4.2.1502.911 gets an extra 0 added to the last part of the version and it fails to find C:\\Users\\appveyor\\.dnx\\packages\\Moq\\4.2.1502.0911\\Moq.4.2.1502.0911.nupkg.sha512 when using DNX 1.0.0-beta5 as released with VS 2015. Would love to know of a workaround.\n. @troydai Yeah, but if I want to ship something that works against beta 5 (shipped with VS) then I'm stuck. Is there a workaround? Or do I just not get to support beta 5?\n. @muratg OK. I'll hold off until beta 6. Thanks for letting me know - I do appreciate it!\n. Potentially related: the code gist on the release announcement blog entry shows specifying both strongName and keyFile like this:\njson\n\"compilationOptions\": {  \n   \"delaySign\": true, \n   \"keyFile\": \"myApp.snk\", \n   \"strongName\": true  \n}\nI wasn't able to do that - I can only specify strongName or keyFile, but not both. You get a compilation error when specifying both.\n. Basically that test logic is:\ndnvm use 1.0.0-beta6 -r CoreCLR\ndnx test/DnxOnly.Test test\nI don't see it rebuild, it just goes right into testing. How would I change my script to run tests successfully in both runtimes?\n. :smiley_cat: YES YES YES This works perfectly. Somewhat unintuitive, but it works like a charm. Thanks!\n. For posterity, I updated the posted reproduction solution to include both an incorrect build script and a fixed one illustrating the updated process. Folks interested in seeing it in action can check it out.\n. Sweet. I just didn't see an issue or anywhere else to track it, so... I figured this was as good as any. Thanks!\n. Will the removal cause warnings during build if the repo information is left in project.json or will it just be ignored?\n. ",
    "lleraromero": "Thank you very much for you answer. \nI'm actually building an application on top of .NET Core, but right now there are no plans to include DNX as a dependency in my deployment. So basically, I wanted to be sure that my environment is not aware of CoreCLR unless I explicitly specify it.\nSo far, you have being doing a great job :).\n. ",
    "per-samuelsson": "@anurse \n\nDNX is the runtime, so if you just want to manage the runtimes yourself, you shouldn't remove it :). You can delete the ones installed by DNVM by emptying the C:\\Users[username].dnx\\runtimes folder.\nDNVM can be removed by simply deleting the dnvm.cmd and dnvm.ps1 files from C:\\Users[username].dnx\\bin.\n\nYou guys should consider putting those lines somewhere in the basic docs, like in the overview or (possibly better) in some Getting Started context. It's the kind of stuff that is trivial to you, and once you get to know it, but probably in the heads of quite a few developers learning dnx.\nFurthermore, it is also good in a marketing kind of way, since it really shows this great new stuff you do really is about getting away from global locations, GAC, registry and what not (i.e. going towards xcopy like approach). And thats one of the things that really excite a lot of people IMO.\n. > [...] in some Getting Started context\nMaybe here (for Windows), or just some hint / link to a section about it at least.\n. > thanks god i found it here that the folder name is the problem.\n+1.\nI've struggled this for hours today. I thought it was a joke when I found an issue with this title :smiley: \nThis issue looks like that kind of thing that, on the surface, I'd just put into the backlog and count on that I'd never see it again. But seeing that in fact a few of us over a rather short time period hits the same thing, it might be an idea to put it higher up the queue. Especially if it should be a low hanging fruit.\n. > dnx . run\nThink the sugar syntax has changed. Try dnx run, or expand it to the full (type dnx for help).\n. > dnx run gives System.IndexOutOfRangeException\nYeah, thats another story. The latest bits are obv shaky from day to day, but with dnx run you are at least past the initial, reported problem (which was caused by the errornous command-line).\nSorry I can't help you with this next one too. \n. @mikeandersun \nI had the same this morning, and I started looking around the different feeds. Looks like there are now a bunch of feeds on myget and it's rather time-consuming to figure out how to set things up.\nHere's a few now published:\naspnetlitedev\naspnetliterelease\naspnetvnext\naspnetrelease\ndotnet-core\nroslyn-nightly\nCan't really help you to a \"right\" path to go unfortunatelly, since I haven't found any guidelines of what to use and what not. But for me, I managed to resolve this issue by changing my feed like this:\n<!-- <add key=\"AspNetVNext\" value=\"https://www.myget.org/F/aspnetvnext/api/v2/\" /> -->\n<add key=\"AspNetVNext\" value=\"https://www.myget.org/F/aspnetliterelease/api/v2\" />\nHow I got there? Well, I basically just skimmed through the recent DNX commits and found this one from a few days back. Took a shoot at it and it worked out it seems. :sunglasses: \n. > Just FYI the lite{branch} feeds are untested so avoid using them if possible. It's better if apps are using aspnetvnext and aspnetrelease.\nOK, got it. Thanks for sharing that @davidfowl.\nFWIW, I tested to change from aspnetliterelease as suggested in this https://github.com/aspnet/dnx/issues/2517#issuecomment-132913634 to aspnetrelease, ran dnu restore --no-cache and it seems to work fine as well.\n. > dnu restore --no-cache use aspnetvnext rather that aspnetrelease.\nNuGet.config is one way to set things up. The DNX_FEED env variable is the other I know of, but I haven't tried that one myself. \nIf someone has a pointer to when/where DNX_FEED was introduced, and what tools consume it, I'd like to read about it also.\n. > Do we want to potentially breadcrumb all p2p build time graphs as well (aka any assembly loaded during compilation)?\nSorry if I'm not really understanding this, but would it mean e.g. compile module dependencies being loaded where tracked too? \nKind of funny if so, b/c I'm just in the middle trying to diagnose a kind of weird case in a compile module, and I might need to ask for help on it. I might have been better of if this was in place.\n. > Kind of funny if so, b/c I'm just in the middle trying to diagnose a kind of weird case in a compile module, and I might need to ask for help on it.\n2523\n. Addition to OP:\n1. I have tested moving the reference to Microsoft.Dnx.Compilation.CSharp.Abstractions to the framework specific dependencies, hoping that it might bind to the assembly there. Same thing happens.\n2. If I change the framework dependency from System.Runtime\": \"4.0.20-beta-* to System.Runtime\": \"4.0.21-beta-*, I get another error:\nError: [RoslynCompiler]: Failed loading meta assembly 'app1':\n System.IO.FileLoadException: Could not load file or assembly 'System.Runtime, Version=4.0.21.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\nFile name: 'System.Runtime, Version=4.0.21.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\n   at System.Reflection.RuntimeAssembly.GetExportedTypes(RuntimeAssembly assembly, ObjectHandleOnStack retTypes)\n   at System.Reflection.RuntimeAssembly.GetExportedTypes()\n   at Microsoft.Dnx.Compilation.CSharp.RoslynCompiler.<>c__DisplayClass10_0.<GetCompileModules>b__0(CacheContext _)\n   at Microsoft.Dnx.Compilation.Caching.CacheExtensions.<>c__DisplayClass0_0`1.<Get>b__0(CacheContext ctx)\n   at Microsoft.Dnx.Compilation.Caching.Cache.CreateEntry(Object k, Func`2 acquire)\n   at Microsoft.Dnx.Compilation.Caching.Cache.<>c__DisplayClass5_0.<AddEntry>b__0()\n   at System.Lazy`1.CreateValue()\n   at System.Lazy`1.LazyInitValue()\n   at Microsoft.Dnx.Compilation.Caching.Cache.Get(Object key, Func`2 factory)\n   at Microsoft.Dnx.Compilation.Caching.CacheExtensions.Get[T](ICache cache, Object key, Func`2 factory)\n   at Microsoft.Dnx.Compilation.CSharp.RoslynCompiler.CompileProject(CompilationProjectContext projectContext, IEnumerable`1 incomingReferences, IEnumerable`1 incomingSourceReferences, Func`1 resourcesResolver)\n. On a more general level, I'd really like to see some kind of text that outlines the important differences and nuances of specifying dependencies in general.\nFirst, there is the top level project.json dependencies hive. Than another one scoped in target frameworks. Then an additional one in frameworks, dubbed frameworkAssemblies, as can be seen here.\n{\n  \"dependencies\": {\n    \"Foo\": \"\"\n  },\n  \"frameworks\": {\n    \"dnx451\": {\n      \"frameworkAssemblies\": {\n        \"Bar\": \"\"\n      }\n    },\n    \"dnxcore50\": {\n      \"dependencies\": {\n        \"Baz\": \"\"\n      }\n    }\n  }\n}\nOn top of that, theres an SDK-thingy you can specify in the global.json.\nI guess the main difference between top-level and framework-specific dependencies are that the ones you scope to a framework only... well, relates to builds that target it? Are they also resolved from some other kind of feed/source?\nI did notice that if I skipped project-level dependencies as a whole, and scoped my single Microsoft.Dnx.Compilation.CSharp.Abstractions reference to the framework (after all, there is an assembly with that name inside the runtime folder), doing dnu restore on an empty packages folder still brought down a lot of packages.\n. @davidfowl, thanks for the extended feedback!\n\nAre you running from the command line?\n\nYes, I am. Trying to avoid VS at any cost initially while learning your new stack. Those kind of tools tend to get in the way when doing so IMO. :smile: \n\n[...] there are a bunch of new concepts to understand that aren't clearly documented today because things are in flux (we're just not done yet).\n\nI do know that, and I totally respect that. I love what you are doing, and when I ask for something, I consider it a \"shoutout\", you know, just sharing what I think should be adressed at some point. I don't expect it to be there, as I might have in a mature product.\n\nHere's a brief overview:\n\nThanks. I'll think this through a little. I might come back if there's something in it I dont fully understand.\n\nTry making your project.json this:\n\nI'll try that, and consider what it means too, given the info you provided above.\n\nOn top of that, we currently allow you to write these ICompileModules within your project, but they cannot come as package dependencies.\n\nSo thas why there was not response in #1072 then. :smile: \n\nWe're still trying to decide if we keep this feature or not (depending on how well we can make it work across the board).\n\nOuch. This feature is really a main attractor for us and the product I work on (we are switching from a PostSharp-based binary IL weaver to this new approach, modifying the syntax trees) . If you decide to drop it, would there be some other means modifying trees before they are consumed by the compiler do you think?\n. Oh, and I don't have VS 2015 installed, all work done from CLI and the standard tools.\n. Sorry my Program.cs was a bit sloppy, a bit of pseudo-code-ish. Yours is spot on.\nI don't have the System.Diagnostics.Debug\": \"4.0.0-beta-* reference in my project.json though. The posted project.json is authentic. But never mind I guess, \"good\" that you've been able to repro it. \nLet me know if I can be of any help.\n. > If you didn't have a reference to System.Diagnostic.Debug where did your Debug class come from?\nBeats me - I just have no idea. But since you asked, I had to double-check my project.json, and here's the exact copy:\n{\n    \"version\": \"0.1.0\",\n    \"dependencies\": {\n        \"Starcounter\" : \"0.1.0\",\n        \"Microsoft.Dnx.Compilation.CSharp.Abstractions\": \"1.0.0-*\"\n    },\n    \"commands\": {\n        \"run\": \"app1\"\n    },\n    \"frameworks\": {\n        \"dnxcore50\": {\n            \"dependencies\": {\n                \"System.Runtime\": \"4.0.21-beta-*\",\n                \"System.Threading.Tasks\": \"4.0.10-beta-*\",\n                \"System.Console\": \"4.0.0-beta-*\"\n            }\n        }\n    }\n}\nMaybe some transitive dependency thing going on? But then again, I was under the impression that I really must specify all the bits I was to use.\nSome way I can see how it was made available? project.json.lock maybe?\n. What about dnu list --details? That give any clues?\n```\nMicrosoft .NET Development Utility CoreCLR-x64-1.0.0-beta8-15618\nListing dependencies for app1 (C:\\Users\\Per\\Git\\Starcounter\\dnxweave\\src\\app1\\project.json)\n[Target framework DNXCore,Version=v5.0 (dnxcore50)]\nPackage references:\n  Microsoft.CodeAnalysis.Analyzers 1.1.0-beta1-20150812-01\n    by Package: Microsoft.CodeAnalysis.Common 1.1.0-beta1-20150812-01\nMicrosoft.CodeAnalysis.Common 1.1.0-beta1-20150812-01\n    by Package: Microsoft.CodeAnalysis.CSharp 1.1.0-beta1-20150812-01\nMicrosoft.CodeAnalysis.CSharp 1.1.0-beta1-20150812-01\n    by Package: Microsoft.Dnx.Compilation.CSharp.Abstractions 1.0.0-beta7-15532\nMicrosoft.Dnx.Compilation.Abstractions 1.0.0-beta7-15532\n    by Package: Microsoft.Dnx.Compilation.CSharp.Abstractions 1.0.0-beta7-15532\n\nMicrosoft.Dnx.Compilation.CSharp.Abstractions 1.0.0-beta7-15532\n    by Project: app1 0.1.0, Starcounter 0.1.0\n\nMicrosoft.Dnx.Runtime.Abstractions 1.0.0-beta7-15532\n    by Package: Microsoft.Dnx.Compilation.Abstractions 1.0.0-beta7-15532\nSystem.Collections 4.0.11-beta-23225\n    by Package: Microsoft.Dnx.Runtime.Abstractions 1.0.0-beta7-15532, System.IO.FileSystem 4.0.1-beta-23225, System.Linq 4.0.1-beta-23225\nSystem.Collections.Immutable 1.1.36\n    by Package: Microsoft.CodeAnalysis.Common 1.1.0-beta1-20150812-01, System.Reflection.Metadata 1.1.0-alpha-00009\nSystem.ComponentModel 4.0.1-beta-23225\n    by Package: Microsoft.Dnx.Runtime.Abstractions 1.0.0-beta7-15532\nSystem.Console 4.0.0-beta-23225\n    by Project: app1 0.1.0, Starcounter 0.1.0\nSystem.Diagnostics.Debug 4.0.10\n    by Package: System.Linq 4.0.1-beta-23225\nSystem.Globalization 4.0.0\n    by Package: System.Resources.ResourceManager 4.0.0\nSystem.IO 4.0.11-beta-23225\n    by Package: Microsoft.Dnx.Runtime.Abstractions 1.0.0-beta7-15532, System.Console 4.0.0-beta-23225, System.IO.FileSystem 4.0.1-beta-23225, System.Reflection 4.1.0-beta-23225\nSystem.IO.FileSystem 4.0.1-beta-23225\n    by Package: Microsoft.Dnx.Compilation.Abstractions 1.0.0-beta7-15532\nSystem.IO.FileSystem.Primitives 4.0.0\n    by Package: System.Console 4.0.0-beta-23225, System.IO.FileSystem 4.0.1-beta-23225\nSystem.Linq 4.0.1-beta-23225\n    by Package: Microsoft.Dnx.Runtime.Abstractions 1.0.0-beta7-15532\nSystem.Private.Uri 4.0.1-beta-23225\n    by Package: System.Runtime 4.0.21-beta-23225\nSystem.Reflection 4.1.0-beta-23225\n    by Package: Microsoft.Dnx.Runtime.Abstractions 1.0.0-beta7-15532, System.Resources.ResourceManager 4.0.0, System.Runtime.InteropServices 4.0.20\nSystem.Reflection.Metadata 1.1.0-alpha-00009\n    by Package: Microsoft.CodeAnalysis.Common 1.1.0-beta1-20150812-01\nSystem.Reflection.Primitives 4.0.0\n    by Package: System.Reflection 4.1.0-beta-23225, System.Runtime.InteropServices 4.0.20\nSystem.Resources.ResourceManager 4.0.0\n    by Package: System.Console 4.0.0-beta-23225, System.IO.FileSystem 4.0.1-beta-23225, System.Linq 4.0.1-beta-23225\nSystem.Runtime 4.0.21-beta-23225\n    by Package: Microsoft.Dnx.Compilation.CSharp.Abstractions 1.0.0-beta7-15532, Microsoft.Dnx.Runtime.Abstractions 1.0.0-beta7-15532, System.Collections 4.0.11-beta-23225, System.ComponentModel 4.0.1-beta-23225, System.Console 4.0.0-beta-23225, System.Diagnostics.Debug 4.0.10, System.Globalization 4.0.0, System.IO 4.0.11-beta-23225, System.IO.FileSystem 4.0.1-beta-23225, System.IO.FileSystem.Primitives 4.0.0, System.Linq 4.0.1-beta-23225, System.Reflection 4.1.0-beta-23225, System.Reflection.Primitives 4.0.0, System.Resources.ResourceManager 4.0.0, System.Runtime.Extensions 4.0.11-beta-23225, System.Runtime.Handles 4.0.0, System.Runtime.InteropServices 4.0.20, System.Text.Encoding 4.0.10, System.Text.Encoding.Extensions 4.0.10, System.Threading 4.0.10, System.Threading.Overlapped 4.0.0, System.Threading.Tasks 4.0.10-beta-23109\n    by Project: app1 0.1.0, Starcounter 0.1.0\nSystem.Runtime.Extensions 4.0.11-beta-23225\n    by Package: Microsoft.Dnx.Runtime.Abstractions 1.0.0-beta7-15532, System.IO.FileSystem 4.0.1-beta-23225, System.Linq 4.0.1-beta-23225\nSystem.Runtime.Handles 4.0.0\n    by Package: System.IO.FileSystem 4.0.1-beta-23225, System.Runtime.InteropServices 4.0.20, System.Threading.Overlapped 4.0.0\nSystem.Runtime.InteropServices 4.0.20\n    by Package: System.Console 4.0.0-beta-23225, System.IO.FileSystem 4.0.1-beta-23225\nSystem.Text.Encoding 4.0.10\n    by Package: System.Console 4.0.0-beta-23225, System.IO 4.0.11-beta-23225, System.IO.FileSystem 4.0.1-beta-23225, System.Text.Encoding.Extensions 4.0.10\nSystem.Text.Encoding.Extensions 4.0.10\n    by Package: System.Console 4.0.0-beta-23225, System.IO.FileSystem 4.0.1-beta-23225\nSystem.Threading 4.0.10\n    by Package: System.Console 4.0.0-beta-23225, System.IO.FileSystem 4.0.1-beta-23225\nSystem.Threading.Overlapped 4.0.0\n    by Package: System.IO.FileSystem 4.0.1-beta-23225\nSystem.Threading.Tasks 4.0.10-beta-23109\n    by Package: Microsoft.Dnx.Runtime.Abstractions 1.0.0-beta7-15532, System.Console 4.0.0-beta-23225, System.IO 4.0.11-beta-23225, System.IO.FileSystem 4.0.1-beta-23225, System.Threading 4.0.10\n    by Project: app1 0.1.0, Starcounter 0.1.0\nProject references:\n* Starcounter 0.1.0\n    by Project: app1 0.1.0\n```\n. > BTW, thanks to transitive dependencies, you don't need to specify all the assemblies that you use. :)\nAh, so it works like that by design? Yeah, now I remember, thats one of the changes in package management > DNX. So then this dependency \"subissue\" is demystified and resolved, right? :+1: \n. > Sorry can you clarify \"I would expect Foo to compile\"?\nSure. I can expand to a full sample:\nsrc\\Foo\\project.json\njson\n{\n    \"version\": \"0.1.0\",\n    \"dependencies\": {\n      \"Bar\": \"1.0.0\"\n    },\n    \"commands\": {\n      \"run\": \"Foo\",\n      \"runBar\": \"Bar\"\n    },\n    \"frameworks\": {\n        \"dnxcore50\": {\n            \"dependencies\": {  }\n        }\n    }\n}\nsrc\\Foo\\Program.cs\nC#\nstatic class Program {\n  static void Main() {\n    Console.WriteLine(\"Hello from Foo\");\n  }\n}\nDoing src\\Foo\\dnx run will compile Program.cs and invoke the entrypoint. The output is \"Hello from Foo\". Doing src\\Foo\\dnx runBar invokes the entrypoint of the referenced Bar project, which is what it should do. But it doesnt compile Foo\\Program.cs first.\n. > Do you mean it's not invoking Foo\\Program.cs's Main (i.e. not displaying the \"Hello from Foo\" message) when you do dnx runBar? If so, that's by design.\nNo, I didn't mean that. That I totally understand.\n\nCompilation only occurs before the first time an assembly is loaded. So if runBar never needs to load anything out of Foo, it never compiles it. Calling Assembly.Load on Foo would force a compilation.\n\nOK, thanks. I kind of suspected that, but I wish it wasn't like that, for our case, hence I asked. We have to figure something out then. I need to consider a bit more our options. Thanks for the feedback!\n. > Calling Assembly.Load on Foo would force a compilation.\n@anurse \nSorry if I'm bringing pain, but that statement got me thinking and I can't really let it go. Can you expand a bit on that at some time? \nBasically, what I'm wondering is how a case would look where doing a Assembly.Load could target a project (i.e. one that will be compiled)? What kind of AssemblyName would I pass for that?\nI tried studying code in corefx to find out myself, but I just can't get it... :cry:\n. > The name you pass to Load is the name of the project. It's no different to compiling up front. Instead it's deferred to runtime.\nAh, ok, that makes sense. I did look at that code some time ago, but the reference to Assembly.Load got me thinking it was the good old reflection thingy. I'll give the project assembly loader some more time to try figuring it all out. Thanks for all the help!\n. > The name you pass to Load is the name of the project. It's no different to compiling up front. Instead it's deferred to runtime.\nJust got the chance to test this some more. It works like a charm, and wow, that feature is just totally super! Using this really fills me up with love (even more) of what you're doing here. Just thought I'd share that, being friday and all. :dancer: :+1: :wine_glass: Keep it up!\n. This https://github.com/aspnet/dnx/issues/1635#issuecomment-92464398 indicates its only doable in local/personal nuget.config, not a \"closer\" one. Anyone can confirm this? Because this is basically my experience.\nWhy I'm after is the kind of chaining / overriding supported natively by NuGet, as described in Chaining multiple configuration files. \nWhen reading Configuring the feed used by dnu to restore packages, and in particular the section:\n\nIn addition, the samples on the Home repo and MusicStore as well as Bug Tracker have NuGet.config in their root folders. These have the vnext feed in them and hence \u2018dnu restore\u2019 on these applications pulls in the right set of packages.\n\nits hard not to get the impression this stuff should work as I'm trying to use it.\n. > Yes\n\nYes\n\nThanks, @davidfowl. Then never mind my last comment (wrote it while you answered :smile:). Then it's something that just don't work on my env then. Now I know it should work like that, I'll try some more. It might be the dreaded stuff with bad XML-format, for example.\n\nA more typical file system layout is something like [...]\n\nThats exactly the kind of thing I tried set up first. Just simplified it more for describing the issue.\n. Wow. Turned out to be one of those really freaky little things you luckily dont hit to often.\nTL;DR: a UTF-8 encoded NuGet.config with some hidden byte was not correctly parsed, and hence just ignored (which is an old, known NuGet story, e.g #2152).\nIf someone is masochistic enough to recreate the issue, for whatever reason, here's how:\n1. Create a new empty file in some editor supporting UTF-8. I used Notepad++. Name the file NuGet.config and make sure you set Encoding -> Encode in UTF-8.\n2. CTRL+C the MusicStore config and paste it into your new file. Save it.\n3. Run dnx feeds list in a setup as described in the OP. See it being ignored.\nThe funny (or rather: not so funny) thing is that you can't see the wrong format with the eye. It's an extra, non visible byte in line 1, column 1, just before the XML prolog <?xml version=\"1.0\" encoding=\"UTF-8\"?>. You can see it if you use the arrow keys - it takes two strokes to get to the inital <. \nHow sick is that? :dizzy_face: \nSeems not even the recommendation to always use an editor that report parsing errors will always help you away from that mess.\n\nNuGet will silently ignore the entire configuration file if it encounters any XML parsing issues (such as mismatched begin/end nodes, invalid quotation, etc.); therefore an editor that reports parsing issues is recommended.\n\nConclusion: +1 for #2152.\n. Oh, and with the above being said, feel free to close this issue. Thanks for the help once again, @davidfowl!\n. I noticed this was done and merged. So now we have both PlatformServices and CallContextServiceLocator? Anyone can share a line or two on the semantic differences?\n. > #2927\nThanks! Sloppy searching by me obv. Sorry. :bouquet: \n. Doesn't sound very compatible with whats out now. This something you plan on? Care to share a couple of lines of insight?\n. Title \"dnx pack\" -> \"dnu pack\", right?\n. FWIW, running dnx --debug [command] will show you the PID and wait for you to attach.\n```\ndnx --debug run\nProcess Id: 5376\nWaiting for the debugger to attach...\n```\n. > Has there been some sort of change or is this a bug?\n2990\n. ",
    "ivanbuhov": "dnvm uninstall command was added recently, so you can use it to remove unused dnx versions.\nExample:\ndnvm uninstall 1.0.0-beta8 -r clr -arch x86\n. @sulhome, dnvm uninstall was added in 1.0.0-beta8, so I guess you have an older version. Try running dnvm update-self to update to the latest version of dnvm tool and dnvm uninstall command should appear.You can also run\ndnvm\nand a list with all existing commands will appear. The uninstall command should be there.\n. ",
    "ElanHasson": "How can you actually remove dnvm? My understanding is that it is no longer needed.\n. Was there any update on this issue? I am encountering the same thing with 1.0.0-rc1-update2\n. ",
    "Maxwe11": "What state of this?\nWhat #define symbol will be used for uap10.0 ?\n. @davidfowl why this closed?\n. @andriysavin dnx4* TFM considered obsolete now so we won't see dnx46 TFM. Instead you should use net46 for targeting .NET 4.6.\nReferences:\nhttps://github.com/aspnet/Announcements/issues/98\nhttps://github.com/dotnet/corefx/issues/4529\n. @davidfowl \n- .Unwrap() allocates TaskCompletionSource\n- compiler generate a lot of code for async methods which is unnecessary in this case because we awaiting on completed task.\n. > sure but have you measured anything?\nIt's hard to measure it but in general we avoid TaskCompletionSource allocation :smile:  (which if I understand the code correctly will be in memory while user's Main executed)\n\nCan you make the change here too\n\ndone\n. condition could be simplified:\na) as cast and check on null\nor\nb) remove null check because if value is null is will return false\n. ditto\n. done\n. ",
    "bilal-fazlani": "I still see this problem in RC1\n. linux, coreclr.\nI put ENV variable\nMONO_THREADS_PER_CPU=2000\nand it fixed the issue.\n. @muratg  I thought it fixed the issue. But it didn't :( \nThis problem still exists\n. Ok. \n. interesting.\nI am using docker image microsoft/aspnet:1.0.0-rc1-update1-coreclr\nI don't seem to have dnvm in it\n[04:21:31][Step 1/2] Step 2 : RUN dnvm list\n[04:21:31][Step 1/2]  ---> Running in 56fd7dc32116\n[04:21:31][Step 1/2] /bin/sh: 1: dnvm: not found\n[04:21:32][Step 1/2] The command '/bin/sh -c dnvm list' returned a non-zero code: 127\n. I tried switching to dotnet restore but I couldn't. Not sure how the -s\nand -f swiches work. I have multiple nuget sources a -s and -f dint work\nfor me.\nOn Thu 7 Apr, 2016 9:13 pm Carlos Fernandez, notifications@github.com\nwrote:\n\nYou can switch to dotnet restore. In my case that didn't work because I'm\nbehind a corporate proxy and there's an issue with the nuget client in\nlinux and proxy authentication... So I'm kind of stuck now with this whole\ndocker thing\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/dnx/issues/2304#issuecomment-206961510\n. \n",
    "ddikman": "I'm also getting this freeze (although I can break it using Ctrl+C when attached to docker container).\nI'm using a copy of the debian:jessie 1.0.0-rc1-final docker file on aspnet github. \ndnvm list output shows:\nActive Version              Runtime Architecture OperatingSystem Alias\n------ -------              ------- ------------ --------------- -----\n       1.0.0-rc1-final      coreclr x64          linux           default\nSeems to hang on different packages, sometimes not at all. I'm not too comfortable with Linux so I'm not sure how I could track the issue but I'm happy to help if you've got any tips?\n. This is getting a bit annoying since it breaks our CI when I have to manually go in and restart the container every time. It works about every 5-10th time. Any ideas for troubleshooting or workaround? How are other people doing the restore step? Can I use dotnet restore?\n. Thanks for the suggestion however there seems to be a few too many issues involved in getting the CLI to work on the debian:jessie docker machine so I think we'll just have to wait until RC2 with the full CLI support is released and migrate to using dotnet restore at that time.\n. ",
    "carlosrfernandez": "Same issue here, using latest Dockerfile from 1.0.0-rc. It doesn't happen with the Mono container, at least as far as I can tell.\n. You can switch to dotnet restore. In my case that didn't work because I'm behind a corporate proxy and there's an issue with the nuget client in linux and proxy authentication... So I'm kind of stuck now with this whole docker thing \n. ",
    "Kosta-Github": "@natemcmaster: can this be reopened, since a lot of people still have this issue (me included)...\n. ",
    "radenkozec": "@davidfowl Take a look at http://stackoverflow.com/questions/31563564/upgrading-from-asp-net-5-beta-4-to-beta-5-project-lock-json-has-old-values\nThere is a screenshot my issue.\nI am getting all packages in project as beta4 and not beta5 like is in project.json.\nI already run PowerShell run: $env:DNX_FEED=\"https://www.nuget.org/api/v2\" \nto set-up URL of feeds.\nNot sure how to resolve this?\n. Here is NuGet.config from  %AppData%/NuGet/NuGet.Config:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageRestore>\n    <add key=\"enabled\" value=\"True\" />\n    <add key=\"automatic\" value=\"True\" />\n  </packageRestore>\n  <activePackageSource>\n    <add key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" />\n  </activePackageSource>\n  <packageSources>\n    <add key=\"nuget.org\" value=\"https://www.nuget.org/api/v2/\" />\n    <add key=\"AspNetVNext\" value=\"https://www.myget.org/F/aspnetvnext/api/v2\" />\n    <add key=\"NuGet\" value=\"https://nuget.org/api/v2/\" />\n    <add key=\"NightlyBuilds\" value=\"https://www.myget.org/F/aspnetvnext/\" />\n  </packageSources>\n</configuration>\nI am getting this error in powershell when I run DNU Restore:\nWarning: DownloadPackageAsync: https://www.myget.org/F/aspnetvnext/api/v2/package/System.Runtime.Extensions/4.0.10-beta-\n22828\n  Response status code does not indicate success: 404 (Not Found).\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/System.Runtime.Extensions/4.0.10-beta-22828\nWarning: DownloadPackageAsync: https://www.myget.org/F/aspnetvnext/api/v2/package/System.Runtime.Extensions/4.0.10-beta-\n22828\n  Response status code does not indicate success: 404 (Not Found).\n  GET https://www.myget.org/F/aspnetvnext/api/v2/package/System.Runtime.Extensions/4.0.10-beta-22828\nError: DownloadPackageAsync: https://www.myget.org/F/aspnetvnext/api/v2/package/System.Runtime.Extensions/4.0.10-beta-22\n828\n  Response status code does not indicate success: 404 (Not Found).\n. Managed to fix issue. Problem was Microsoft.Framework.ConfigurationModel.UserSecrets. This package and few others don't exists anymore.\nThis cause my issues with package restore with no smart error info.\nAfter I removed these packages I managed to restore beta5 packages.\nI will close this issue now.\n. @davidfowl Thanks. It seams that helps but now I am receiving another issue:\n\nThe type 'DBNull' exists in both 'System.Data.Common, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' \n\nI have tried to move \"System.Data.Common\": \"4.0.0-beta-23019\" to dnxcore50 with no success...\n. @davidfowl I cannot remove dotnet because I need to consume this class library from both classic .net framework project and ASP.NET 5 project.\nEven If I remove dotnet section and move these all to dnxcore50 I am getting exception:\n\nThe type or namespace name 'SqlParameter' could not be found (are you missing a using directive or an assembly reference?) \n\nI am working with ASP.NET 5 from CTP6 and always have problems with resolving these kind of issues.\n. @davidfowl Managed to fix issue by removing entire section :  \"dnx451\" from project.json.\nSimilar issues happens after upgrading to Beta6.\nI am getting lot of errors like this:   Predefined type 'System.Object' is not defined or imported\nTried add Under dnx451 :\n\"frameworkAssemblies\": {\n    \"System.Runtime\": \"\"\n}\nno help.\nAfter I remove entire section \"dnx451\" all error are fixed.\nAny tips about this?\n. I will close this issue and open a new related to this issue. I was thinking this is a known issue because 2 other of my colleges told me they resolved their errors also by removing dnx451 section.\n@davidfowl I opened a new issue https://github.com/aspnet/dnx/issues/2422\n. My ASP.NET 5 project is referencing 3 smaller .NET Core class library projects:\n\"Project1.Data\": \"1.0.0-\",\n\"Project1.Model\": \"1.0.0-\",\n\"Mandrill.Client\": \"1.0.0-*\"\nProject1.Data which needs to be referenced also from .NET Framework Project so it has dotnet section:\n```\n\"dependencies\": {\n    \"Project1.Model\": \"1.0.0-*\",\n     \"Microsoft.Framework.Configuration.Abstractions\": \"1.0.0-beta6\",\n    \"Microsoft.Framework.Configuration.Json\": \"1.0.0-beta6\",\n    \"Newtonsoft.Json\": \"7.0.1-beta3\",\n    \"System.Net.Http\": \"4.0.0-beta-23109\",\n    \"System.Data.SqlClient\": \"4.0.0-beta-23109\",\n    \"System.Data.Common\": \"4.0.0-beta-23109\"\n  },\n\"frameworks\": {\n    \"dotnet\": { },\n\"dnxcore50\": {\n  \"dependencies\": {\n    \"System.Collections\": \"4.0.10-beta-23109\",\n    \"System.Runtime\": \"4.0.20-beta-23109\",\n    \"System.Runtime.Extensions\": \"4.0.10-beta-23109\"\n  }\n}\n\n}\n```\nProject1.Model\n```\n \"dependencies\": {\n    \"System.Linq\": \"4.0.0-beta-23109\",\n    \"System.Threading\": \"4.0.10-beta-23109\",\n    \"Microsoft.CSharp\": \"4.0.0-beta-23109\"\n  },\n\"frameworks\": {\n    \"dotnet\": { },\n    \"dnx451\": { },\n    \"dnxcore50\": {\n      \"dependencies\": {\n        \"System.Collections\": \"4.0.10-beta-23109\",\n        \"System.Runtime\": \"4.0.20-beta-23109\",\n        \"System.Runtime.Extensions\":\"4.0.10-beta-23109\"\n      }\n    }\n  }\n```\nAnd Mandrill.Client which also need to be used from .NET Framework project\n```\n\"dependencies\": {\n    \"Newtonsoft.Json\": \"7.0.1-beta3\",\n    \"System.Net.Http\": \"4.0.0-beta-23109\",\n    \"System.Linq\": \"4.0.0-beta-23109\",\n    \"System.Threading\": \"4.0.10-beta-23109\",\n    \"Microsoft.CSharp\": \"4.0.0-beta-23109\"\n  },\n\"frameworks\": {\n    \"dotnet\": { },\n    \"dnx451\": {\n},\n\"dnxcore50\": {\n  \"dependencies\": {\n    \"System.Collections\": \"4.0.10-beta-23109\"\n  }\n}\n\n}\n```\n. I had dnx45x targets in Project1.Data but removed them because compilation errors received above.\nSo you are saying for Project1.Data I should:\n1) Add dnx451 section\n2) Inside that section add frameworkAssemblies\n3) Leave everything else as it is.\nCan you please give me the example how to refactor only Project1.Data project.json?\n. I will try this and post update later. I don't understand why I don't need dnxcore50 section? Does this mean that my project will not support .NET Core?\n. @davidfowl \nManaged to make it work.\nMy ASP.NET 5 project project.json now looks like this:\n\"frameworks\": {\n    \"dnx451\": {\n      \"frameworkAssemblies\": {\n        \"System.Runtime\": \"\"\n      }\n    },\n    \"dnxcore50\": {\n      \"dependencies\": {\n        \"System.IO.FileSystem.Primitives\": \"4.0.0-beta-23109\",\n        \"System.IO.FileSystem\": \"4.0.0-beta-23109\"\n      }\n    }\nAnd in Project1.Data used your project.json just added  \"System.Data\": \"\"  in dnx451 section.\nThank you very much.\nBut I still do not understand how can I have project without dnxcore50 section in Project1.Data?\nDoes it mean that my project will not support .NET Core?\n. @glennc Yes my test project is csproj. There are few reasons and explanation is complicated. One reason is that I need to run some tests in STAThread environment which was not supported in .NET Core projects and there are few more reasons.\nSo test project is csproj with xUnit and I reference .NET Core Class Library project from dotnet folder.\n. As you can see from my project.json my xproj class library reference and use System.Data.SqlClient.\nIn my test project (csproj) I have referenced System.Data from Framework 4.5.\n. @davidfowl You have minimal runnable sample on my github repository.\nhttps://github.com/radenkozec/SampleError\nInstructions to reproduce are in readme file.\nThanks for help David.\n. @glennc @davidfowl Any news about my issue?\nThanks.\n. @davidfowl That resolved issue on this test project thanks. I still don't understand anymore logic there. I have read your suggested article about dnx451, dotnet but now I don't understand how can I reference dnx451 dll from csproj. If I can do that I don't see the point having dotnet section.\nHowever when I changed my production project SQL Issue has been resolved but now I am getting another exception when I run my tests:\nSystem.IO.FileNotFoundException : Could not load file or assembly 'Microsoft.Framework.Configuration.Abstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.\nAs one person written this is becoming dependency hell. \n. ",
    "iaingalloway": "Just to make sure I'm understanding correctly:- This means we won't be able to use Roslyn analyzers in asp.net 5 RTM projects?\n. ",
    "dmccaffery": "This makes me very, very sad.\n-.-\n::sniffles::\n. I am in agreement; developers are OCD about these types of things.\nAs a side note to @thomas-darling: I was able to work around the IDE001-003 analyzer issues through some R# magic. It still darkens the this keyword, but it no longer squiggles it or light bulbs it. Same for the fully-qualified namespaces in using statements.\n. ",
    "thomas-darling": "@davidfowl I understand you're busy trying to get the RTM done, but this is really a quite critical feature, and one we expected would be in RTM. In the roadmap you linked to, there's no mentioning of this feature being cut.\nWe're about to begin a major rewrite of a very large codebase, and not having support for StyleCop analyzers makes it quite hard for us to enforce our coding conventions. And not only that, but some of the default analyzers do appear to be running, and they are actively working AGAINST our coding guidelines, even though they are based on your own StyleCop rules.\nCase in point:\nOne of the default analyzers suggests removing \"this.\" when it is not strictly nessesary, but we happen to strongly disagree with that suggestion - an opinion supported by StyleCop rule SA1101:\nhttps://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/StyleCop.Analyzers/StyleCop.Analyzers/ReadabilityRules/SA1101PrefixLocalCallsWithThis.cs\nBecause we cannot disable this analyzer, Visual Studio now actively encurages our developers to break our coding guidelines, and even going as far as to suggest \"fixing\" this in the entire solution, and thus turning our entire codebase into a mess.\nSupport for analyzers, and especially for configuring the default ones, should really be among your top priorities, and something you should work very hard to get into the RTM release.\n. @davidfowl I understand you're busy trying to get the RTM done, but this is really a quite critical feature, and one we expected would be in RTM. In the roadmap you linked to, there's no mentioning of this feature being cut.\nWe're about to begin a major rewrite of a very large codebase, and not having support for StyleCop analyzers makes it quite hard for us to enforce our coding conventions. And not only that, but some of the default analyzers do appear to be running, and they are actively working AGAINST our coding guidelines, even though they are based on your own StyleCop rules.\nCase in point:\nOne of the default analyzers suggests removing \"this.\" when it is not strictly nessesary, but we happen to strongly disagree with that suggestion - an opinion supported by StyleCop rule SA1101:\nhttps://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/StyleCop.Analyzers/StyleCop.Analyzers/ReadabilityRules/SA1101PrefixLocalCallsWithThis.cs\nBecause we cannot disable this analyzer, Visual Studio now actively encurages our developers to break our coding guidelines, and even going as far as to suggest \"fixing\" this in the entire solution, and thus turning our entire codebase into a mess.\nSupport for analyzers, and especially for configuring the default ones, should really be among your top priorities, and something you should work very hard to get into the RTM release.\n. ",
    "Grinderofl": "I'm experiencing a similar issue. Visual Studio refuses to launch any projects, console or web, while using beta7-12264. I started experiencing it yesterday, but seeing as there was a lot of renames going on, I decided to wait a little while until the other packages got updated. I've cleared out my package cache as well.\n```\n{\"Exception has been thrown by the target of an invocation.\"}\nTrace\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\n   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\n   at dnx.clr.managed.RuntimeBootstrapper.Execute(String[] argv, FrameworkName targetFramework)\n   at DomainManager.Main(Int32 argc, String[] argv)\n```\n=> InnerException:\n```\n{\"Could not load file or assembly 'ConsoleSample' or one of its dependencies. Invalid pointer (Exception from HRESULT: 0x80004003 (E_POINTER))\":\"ConsoleSample\"}\nTrace\n   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.Assembly.Load(AssemblyName assemblyRef)\n   at Microsoft.Framework.Runtime.Loader.LoadContext.Load(AssemblyName assemblyName)\n   at Microsoft.Framework.Runtime.AssemblyLoadContextExtensions.Load(IAssemblyLoadContext loadContext, String name)\n   at Microsoft.Framework.Runtime.DefaultHost.GetEntryPoint(String applicationName)\n   at Microsoft.Framework.ApplicationHost.Program.ExecuteMain(DefaultHost host, String applicationName, String[] args)\n   at Microsoft.Framework.ApplicationHost.Program.Main(String[] args)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   at dnx.host.Bootstrapper.RunAsync(List`1 args, IRuntimeEnvironment env, FrameworkName targetFramework)\n   at dnx.host.RuntimeBootstrapper.ExecuteAsync(String[] args, FrameworkName targetFramework)\n   at dnx.host.RuntimeBootstrapper.Execute(String[] args, FrameworkName targetFramework)\n```\n=> InnerException\n```\n{\"Value cannot be null.\\r\\nParameter name: type\"}\nTrace\nat Microsoft.Framework.Runtime.Common.DependencyInjection.ActivatorUtilities.CreateFactory(Type type)\n   at Microsoft.Framework.Runtime.Common.DependencyInjection.ActivatorUtilities.CreateInstance(IServiceProvider services, Type type)\n   at Microsoft.Framework.Runtime.CompilerServices.CreateServiceT\n   at Microsoft.Framework.Runtime.ProjectLibraryExportProvider.b__5_1(TypeInformation typeInfo)\n   at System.Collections.Generic.DictionaryExtensions.GetOrAddTKey,TValue\n   at Microsoft.Framework.Runtime.ProjectLibraryExportProvider.<>c__DisplayClass5_0.b__0(CacheContext ctx)\n   at Microsoft.Framework.Runtime.Caching.CacheExtensions.<>c__DisplayClass0_01.<Get>b__0(CacheContext ctx)\n   at Microsoft.Framework.Runtime.Caching.Cache.CreateEntry(Object k, Func2 acquire)\n   at Microsoft.Framework.Runtime.Caching.Cache.<>c__DisplayClass5_0.b__0()\n   at System.Lazy1.CreateValue()\n   at System.Lazy1.LazyInitValue()\n   at System.Lazy1.get_Value()\n   at Microsoft.Framework.Runtime.Caching.Cache.Get(Object key, Func2 factory)\n   at Microsoft.Framework.Runtime.Caching.CacheExtensions.Get[T](ICache cache, Object key, Func2 factory)\n   at Microsoft.Framework.Runtime.ProjectLibraryExportProvider.GetLibraryExport(CompilationTarget target)\n   at Microsoft.Framework.Runtime.CompositeLibraryExportProvider.<>c__DisplayClass2_0.<GetLibraryExport>b__0(ILibraryExportProvider r)\n   at System.Linq.Enumerable.WhereSelectArrayIterator2.MoveNext()\n   at System.Linq.Enumerable.FirstOrDefaultTSource\n   at Microsoft.Framework.Runtime.CompositeLibraryExportProvider.GetLibraryExport(CompilationTarget target)\n   at Microsoft.Framework.Runtime.LibraryManager.GetLibraryExport(String name, String aspect)\n   at Microsoft.Framework.Runtime.Loader.ProjectAssemblyLoader.Load(AssemblyName assemblyName, IAssemblyLoadContext loadContext)\n   at Microsoft.Framework.Runtime.Loader.ProjectAssemblyLoader.Load(AssemblyName assemblyName)\n   at dnx.host.LoaderContainer.Load(AssemblyName assemblyName)\n   at dnx.host.DefaultLoadContext.LoadAssembly(AssemblyName assemblyName)\n   at Microsoft.Framework.Runtime.Loader.AssemblyLoaderCache.GetOrAdd(AssemblyName name, Func`2 factory)\n   at Microsoft.Framework.Runtime.Loader.LoadContext.LoadAssemblyImpl(AssemblyName assemblyName)\n   at Microsoft.Framework.Runtime.Loader.LoadContext.ResolveAssembly(Object sender, ResolveEventArgs args)\n   at System.AppDomain.OnAssemblyResolveEvent(RuntimeAssembly assembly, String assemblyFullName)\n```\n. I'm battling the same bug right now with beta8 so it's very much still in play.\n. ",
    "ydogus": "I have the same problem here.\nMaybe this is related with https://github.com/aspnet/Announcements/issues/45.\n. Visual Studio was using beta7 version. So dnu restore was unable to run successfully for a beta8+ version.\nTried dnvm use 1.0.0-beta8 and it worked.\n. ",
    "MisterJames": "@halter73 Agreed, this was a bit of a rabbit hole to figure out.\nAlso, what about for class libraries on 4.6? And how does one source a list of compatible frameworks?\nAnd for 4.5.2 assemblies to work under dnx, the answer is to downgrade them to 4.5.1, instead of moving to 4.6?\n. Looks like the wrap was correctly generated:\n{\n  \"version\": \"1.0.0-*\",\n  \"frameworks\": {\n    \"net46\": {\n      \"wrappedProject\": \"../../src/ClassLibrary1/ClassLibrary1.csproj\",\n      \"bin\": {\n        \"assembly\": \"../../src/ClassLibrary1/obj/{configuration}/ClassLibrary1.dll\",\n        \"pdb\": \"../../src/ClassLibrary1/obj/{configuration}/ClassLibrary1.pdb\"\n      }\n    }\n  }\n}\nSolution layout looks like the following:\n\nAnd here's the relevant bits from the project.json:\n```\n  \"version\": \"1.0.0-\",\n  ...\n  \"frameworks\": {\n    \"dnx46\": {\n      \"dependencies\": {\n        \"ClassLibrary1\": \"1.0.0-\"\n      }\n    }\n  },\n```\nAnd global.json looks like the following:\n{\n  \"projects\": [\n    \"src\",\n    \"test\",\n    \"wrap\"\n  ],\n  \"sdk\": {\n    \"version\": \"1.0.0-beta6\"\n  }\n}\nFinally - and not sure if this helps - when I remove the DLL from the project, remove the dependency from project.json, and move back to dnx451, I noticed this warning:\nWarning        The primary reference \"C:\\Users\\James\\Documents\\Visual Studio 2015\\Projects\\WebApplication6\\src\\ClassLibrary1\\bin\\Debug\\ClassLibrary1.dll\" could not be resolved because it was built against the \".NETFramework,Version=v4.6\" framework. This is a higher version than the currently targeted framework \".NETFramework,Version=v4.5\".  WebApplication6 C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets 1819\n. Closing because I have a way easier repro.\n. @anurse Thanks for looking into this. \nWhen I run dnx . web from the command line work, not sure why I had used run (other than habit from console apps).\nBut, dnx . run does give the error above :) It's the same error message I get in the browser when I run without debugging.\nI'm going to try your workaround now. Thanks again.\n. @anurse Setting the environment variable DNX_IIS_RUNTIME_FRAMEWORK to dnx46 worked here as well.\nI knew that there was something along these lines (being related to the way VS was launching my app was actually my suspicion), because everything else seemed to align. Thanks for these tips.\n. @ChengTian I could take this one if you're open to it.\n. Great, I'll get started on this tomorrow. Thanks @ChengTian, cheers.\n. @glennc I could take this one on if you like.\n1. Can I assume that a raw dnu --clear-cache would clear out the DnuFolderPath.HttpCacheDirectory folder entirely?  Or should it clear the list_ and nupkg_ but preserve the dir structure and leave the index_json.dat?\n2. When clearing for a specific feed, would https://www.myget.org match all entries in the cache with the start of that domain? Or would it be only on direct matches such as https://www.myget.org/F/aspnetvnext/api/v2/ or https://www.myget.org/F/roslyn-nightly/?\n. @glennc Whole folder for the base scenario, yes. But @DamianEdwards had said:\n\nMight be nice to support clearing it only for specified feeds too, e.g. dnu --clear-cache https://www.myget.org\n. Just as an FYI, the dev branch fails locally and appears to be failing on the main repo as well. I haven't introduced any changes yet.\n. Thanks @ChengTian. Okay, so after reading your comments above and reviewing the code in a little more detail, I think I understand what you're suggesting.\n1. Add a flag similar to SkipRestoreEvents as part of the restore and package add commands (restore is already hosting the SkipRestoreEvents)\n2. Test for this flag being set; if it's off, don't log out those details during invocation\n\nPlease let me know if that's not on track.\nMy other question would be then if this is along the lines of \"SkipPackageSummaryDetail\" and/or \"SkipPerformanceDetail\" as flags - it is basically logging out info about config, feeds and some minor perf details. If there's more context to this scenario, it may help with an appropriate name, or perhaps let me know if there are other places such a flag might be used.\nAlso, looks like I'm still hurting for restoring packages/building, so I'm going to hold off again here. I want to have a build running cleanly so I can isolate & execute the appropriate tests (and know they are passing). \n. Great, thanks @ChengTian, I'll pull and get to work this weekend. Cheers!\n. @ChengTian You'd just noted on #2376 that you were working on this, did you want me to put this one down then? I can pick up another if you prefer. I got the build working locally and was just starting...only created a test and have the props stubbed in, so no big deal.  I'm also comfortable continuing, so just let me know. \n. ",
    "Xorcist77": "this also pertains to the current path as specified in your PowerShell session.\nIf the actual path is:\nC:\\Users\\UserName\\Projects\\HelloWorld\nbut in Powershell you cd to:\nC:\\users\\username\\projects\\helloworld\nand then execute \"dnx run\" in that directory, you will get a similar error.\nHowever if to cd to the path with the proper case, \"dnx run\" will work just fine.\n. ",
    "haf": "Wouldn't it be a time-saver if you replaced this with two things?\n- a JSON adapter for Paket to read/write your file format\n- a --nuget-versions flag in paket that means to avoid using semver and do it the nuget way instead?\nAn up-side of doing it this way is that @forki would single-handedly carry half of vnext on his back with bugfixes in 7 minutes. ;)\n. I'm completely with @Mpdreamz on this one; the lock file should be generated by default just like it is with npm install --save and bundler install.\n- auto gen lock file\n- if you want rolling versions, do update on CI, don't commit results, log dependency tree in CI\n- if you want locked project, which is basically what all end-user projects want, i.e. those which are not infrastructure/library-oriented like the ASPNET team's are, then just don't run update on the CI server\nYou should really peruse the discussion we had in paket because it's really oriented towards building for production on .net. \n. ",
    "enricosada": "i strongly agree with @Mpdreamz on repeteable builds, the .lock file is a sane default.\n- download repo\n- restore\n- run\nthe build should be ok, a new package version released to nuget should not create problems (compile time or runtime)\nIf you dont need it, you dont commit it on repo, but is a good idea to have it.\nBtw the others package manager do the same. \nI see usage of tools from other framework (node, yeoman etc), is good to check history of these tools ( see gems vs bundler ). \nFor example i used rake to build .net projects years ago, no problem to clone and build today because there is a lockfile.\nBower like nuget doesnt use a lock file, but is scheduled for next version. \nIn .net, Paket has a really good workflow, but for example lack groups ( devs dependencies vs runtime dependencies ) but i think that's scheduled for next version.\nIf you need to have latest version (constrained or not to major/minor/fix) of a package, you add update in build script or create an integration build to check compatibility.\n. i strongly agree with @Mpdreamz on repeteable builds, the .lock file is a sane default.\n- download repo\n- restore\n- run\nthe build should be ok, a new package version released to nuget should not create problems (compile time or runtime)\nIf you dont need it, you dont commit it on repo, but is a good idea to have it.\nBtw the others package manager do the same. \nI see usage of tools from other framework (node, yeoman etc), is good to check history of these tools ( see gems vs bundler ). \nFor example i used rake to build .net projects years ago, no problem to clone and build today because there is a lockfile.\nBower like nuget doesnt use a lock file, but is scheduled for next version. \nIn .net, Paket has a really good workflow, but for example lack groups ( devs dependencies vs runtime dependencies ) but i think that's scheduled for next version.\nIf you need to have latest version (constrained or not to major/minor/fix) of a package, you add update in build script or create an integration build to check compatibility.\n. ",
    "xPaw": "@davidfowl I must be blind, but I can't see anything about branches in the contributing guide.\n. Recreated as #2345\n. ",
    "factormystic": "At least for Windows, could dnx be delivered via powershell package management? I'm sure someone somewhere enjoys manually downloading and double clicking msi's, but I sure don't. I'd much rather set up your package source once and then do install-package aspnet.dnx\n. Why'd this get closed @davidfowl? I assume dnx will be packaged with more than just \"DMG/PKG for OSX\", and yet, no updates......\n. @muratg ok thx, following up over there. might want to add that to this projects readme or something though\n. ",
    "TJSoftware": "@factormystic https://channel9.msdn.com/events/ASPNET-Events/ASPNET-Fall-Sessions/Introducing-the-dotnet-CLI\n@muratg I was able to download an exe that got me going with the DOTNET commands, I am unable to find that site now.  Can you provide a link on how to get this going or is this supposed to wait for RC2?\n\n. @muratg Ahh, thank you, that makes sense that it is under dotnet and not under aspnet repo.  :smile: \n. @anurse Certainly understandable, I am sure everyone looks forward to things being smoothed out by Junber :wink: \n. ",
    "wholroyd": "I'll submit a PR over in SchemaStore to fix the beta5 and beta6 file because they're missing.\n. I'll submit a PR over in SchemaStore to fix the beta5 and beta6 file because they're missing.\n. Why is the Id property from the NuSpec not used? Should it be?\nOne of the issues I'm having is trying to get the DNX packaging to produce a NuSpec with the proper ID set in it. It's supposed to take it from project.Name, but if the name is dotted, it somehow only uses the last octect. For example, if the project is something like Company.Group.Library it comes out as Library in the NuSpec.\nSo how do I keep library name continuity from *.nuspec to the newer project.json method?\n. Why is the Id property from the NuSpec not used? Should it be?\nOne of the issues I'm having is trying to get the DNX packaging to produce a NuSpec with the proper ID set in it. It's supposed to take it from project.Name, but if the name is dotted, it somehow only uses the last octect. For example, if the project is something like Company.Group.Library it comes out as Library in the NuSpec.\nSo how do I keep library name continuity from *.nuspec to the newer project.json method?\n. You're right on the folder name, quick search and found this comment not matching up with following code.\nhttps://github.com/aspnet/dnx/blob/master/src/Microsoft.Framework.Runtime/Project.cs#L139-L140\nBut then we'd have the project name to set by id or name property by line 147.\n. You're right on the folder name, quick search and found this comment not matching up with following code.\nhttps://github.com/aspnet/dnx/blob/master/src/Microsoft.Framework.Runtime/Project.cs#L139-L140\nBut then we'd have the project name to set by id or name property by line 147.\n. I think the original issues I wanted to cover are now complete, closing issue. Thank you @Eilon and @davidfowl \n. I think the original issues I wanted to cover are now complete, closing issue. Thank you @Eilon and @davidfowl \n. Thanks!\n. Thanks!\n. The one defined in the microsoft/aspnet docker image tagged latest for beta6 - appears to be based on mono:4.0.1.\nAlso if you notice in the gist, some of the packages that had timed out were previously and successfully retrieved, but it attempts to retrieve it again. For instance, look at the Microsoft.AspNet.Diagnostics* packages. I think it would be more efficient to use what was already retrieved, checking a local cache of some sort for the current session?\n. The one defined in the microsoft/aspnet docker image tagged latest for beta6 - appears to be based on mono:4.0.1.\nAlso if you notice in the gist, some of the packages that had timed out were previously and successfully retrieved, but it attempts to retrieve it again. For instance, look at the Microsoft.AspNet.Diagnostics* packages. I think it would be more efficient to use what was already retrieved, checking a local cache of some sort for the current session?\n. I did not see those, sorry and thanks!\n. I did not see those, sorry and thanks!\n. ",
    "NoralK": "I think this might be related.  I build a simple MVC project, compiles fine for Beta5, and I get this error:\n```\nE:\\Projects\\HelloMvc>dnu build --quiet\nMicrosoft .NET Development Utility CLR-x86-1.0.0-beta7-12274\nBuilding HelloMvc for DNX,Version=v4.5.1\nSystem.TypeLoadException: Could not load type 'Microsoft.Framework.Runtime.ICompilerOptionsProvider' from assembly 'Microsoft.Framework.Runtime.Abstra\nctions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.\n   at Microsoft.AspNet.Mvc.RazorPreCompileModule.BeforeCompile(BeforeCompileContext context)\n   at Microsoft.Framework.Runtime.Roslyn.RoslynCompiler.CompileProject(CompilationProjectContext projectContext, IEnumerable1 incomingReferences, IEn\numerable1 incomingSourceReferences, Func1 resourcesResolver)\n   at Microsoft.Framework.Runtime.Roslyn.RoslynProjectCompiler.CompileProject(CompilationProjectContext projectContext, Func1 referenceResolver, Func\n1 resourcesResolver)\n   at Microsoft.Framework.Runtime.ProjectLibraryExportProvider.<>c__DisplayClass5_0.<GetLibraryExport>b__0(CacheContext ctx)\n   at Microsoft.Framework.Runtime.Caching.CacheExtensions.<>c__DisplayClass0_01.b__0(CacheContext ctx)\n   at Microsoft.Framework.Runtime.Caching.Cache.CreateEntry(Object k, Func2 acquire)\n   at Microsoft.Framework.Runtime.Caching.Cache.<>c__DisplayClass5_0.<AddEntry>b__0()\n   at System.Lazy1.CreateValue()\n   at System.Lazy1.LazyInitValue()\n   at System.Lazy1.get_Value()\n   at Microsoft.Framework.Runtime.Caching.Cache.Get(Object key, Func2 factory)\n   at Microsoft.Framework.Runtime.Caching.CacheExtensions.Get[T](ICache cache, Object key, Func2 factory)\n   at Microsoft.Framework.Runtime.ProjectLibraryExportProvider.GetLibraryExport(CompilationTarget target)\n   at Microsoft.Framework.Runtime.CompositeLibraryExportProvider.<>c__DisplayClass2_0.b__0(ILibraryExportProvider r)\n   at System.Linq.Enumerable.WhereSelectArrayIterator2.MoveNext()\n   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable1 source, Func2 predicate)\n   at Microsoft.Framework.Runtime.CompositeLibraryExportProvider.GetLibraryExport(CompilationTarget target)\n   at Microsoft.Framework.Runtime.ProjectExportProviderHelper.GetExportsRecursive(ILibraryManager manager, ILibraryExportProvider libraryExportProvide\nr, CompilationTarget target, Func2 include)\n   at Microsoft.Framework.Runtime.ProjectExportProviderHelper.GetExportsRecursive(ILibraryManager manager, ILibraryExportProvider libraryExportProvide\nr, CompilationTarget target, Boolean dependenciesOnly)\n   at Microsoft.Framework.Runtime.LibraryManager.<>c__DisplayClass21_0.b__0(CacheContext ctx)\n   at Microsoft.Framework.Runtime.Caching.CacheExtensions.<>c__DisplayClass0_01.<Get>b__0(CacheContext ctx)\n   at Microsoft.Framework.Runtime.Caching.Cache.CreateEntry(Object k, Func2 acquire)\n   at Microsoft.Framework.Runtime.Caching.Cache.<>c__DisplayClass5_0.b__0()\n   at System.Lazy1.CreateValue()\n   at System.Lazy1.LazyInitValue()\n   at System.Lazy1.get_Value()\n   at Microsoft.Framework.Runtime.Caching.Cache.Get(Object key, Func2 factory)\n   at Microsoft.Framework.Runtime.Caching.CacheExtensions.GetT\n   at dnx.host.RuntimeBootstrapper.ExecuteAsync(String[] args, FrameworkName targetFramework)\n   at dnx.host.RuntimeBootstrapper.Execute(String[] args, FrameworkName targetFramework)\n```\nNoral\n. Some more information:\nOn clean installation of:\n Windows 8.1 Enterprise with Update x64 VM with UAC turned off (NO PATCHES)\n .Net v4.5.2\n Node.js v0.12.7 x64\n VS Code v0.5.0\nI am able to compile both Beta6 and Beta7.\n. @danroth27 do you have any insights/thoughts to why this is happening?\n. Sorry @danroth27 - I initially thought about sending this to you since you are on MVC but you were not a contributor on dnx.  I had already copied your name to the clipboard when I thought I had copied @davidfowl since he is on both projects.  Guess I needs better proofreaders.\nDavid - do you have any insights/thoughts to why this is happening?\n. Hello ... anyone?\n. Installed beta7-12302 clr x64 on the Windows 7 Enterprise machine and I am still getting:\nE:\\Projects\\HelloMvc>dnu\nFailed to initalize runtime (80131522)\nThoughts?\n. Here you go:\n```\nE:\\Projects\\HelloMvc>set DNX_TRACE=1\nE:\\Projects\\HelloMvc>dnu\nThe servicing index file at: C:\\Program Files (x86)\\Microsoft DNX\\Servicing\\index.txt does not exist or could not be opened.\nLoaded module: dnx.clr.dll\nFound export: CallApplicationMain\nFailed to initalize runtime (80131522)\n```\nThese directories Microsoft DNX on down and the file index.txt are not in C:\\Program Files (x86) nor in C:\\Program Files.\nIt should be noted that on Windows 8.1, where it does work, these are also not present.\n. It is beta7.  Here is the output:\n```\nE:\\Projects\\HelloMvc>dnvm list\nActive Version           Runtime Architecture Location                     Alias\n------ -------           ------- ------------ --------                     -----\n       1.0.0-beta6       clr     x64          C:\\Users\\Noral.dnx\\runtimes\n       1.0.0-beta7-12274 clr     x64          C:\\Users\\Noral.dnx\\runtimes\n       1.0.0-beta7-12274 clr     x86          C:\\Users\\Noral.dnx\\runtimes\n       1.0.0-beta7-12275 clr     x64          C:\\Users\\Noral.dnx\\runtimes\n       1.0.0-beta7-12290 clr     x64          C:\\Users\\Noral.dnx\\runtimes\n  *    1.0.0-beta7-12302 clr     x64          C:\\Users\\Noral.dnx\\runtimes default\n```\nI have tried cleaning out all runtime, on another machine, and get the same output with just 1.0.0-beta7-12302.\n. Here you go:\nE:\\Projects\\HelloMvc>where dnx\nC:\\Users\\Noral\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-beta7-12302\\bin\\dnx.exe\nThank you for the help.\n. Take a look at this separate issue - https://github.com/aspnet/Scaffolding/issues/106  at the dump from setting DNX_TRACE=1.\nDnx also has the issue, but on Windows 8.1 (where issue #106 occurs) I can run dnu and dnx without \"Failed to initalize runtime (80131522)\".\n. From the #106 error I found this reference:\nC:\\ProgramData\\Microsoft DNX\\BreadcrumbStore but in reality it is located here C:\\ProgramData\\Microsoft\\NetFramework\\BreadcrumbStore on Windows 8.1 and Windows 7.  There is no folder called Microsoft DNX\n. I have .Net Framework v4.5.2 installed on both Windows 7 (having issue) and Windows 8.1.\n. From my initial post I listed all of my steps - Window 7 Enterprise x64 has no patches, except what IE 11 installed.\n. I installed .Net 4.6 and I can launch dnu and dnx.  Does this mean the requirements will change or will this be investigated further?\n. If that is the case then I would suggest that the Readme.md in all the projects should reflect the minimum .Net version as 4.6.\nMaybe the root of the problem can be fixed eventually.\n. @moozzyk As of beta7-12321 the problem still persists with .Net Framework v4.5.2:\n```\nC:\\Users\\Noral>dnvm list\nActive Version           Runtime Architecture Location                     Alias\n------ -------           ------- ------------ --------                     -----\n       1.0.0-beta6       clr     x64          C:\\Users\\Noral.dnx\\runtimes\n       1.0.0-beta7-12274 clr     x64          C:\\Users\\Noral.dnx\\runtimes\n       1.0.0-beta7-12275 clr     x64          C:\\Users\\Noral.dnx\\runtimes\n       1.0.0-beta7-12290 clr     x64          C:\\Users\\Noral.dnx\\runtimes\n       1.0.0-beta7-12302 clr     x64          C:\\Users\\Noral.dnx\\runtimes\n  *    1.0.0-beta7-12321 clr     x64          C:\\Users\\Noral.dnx\\runtimes default\nC:\\Users\\Noral>dnu\nFailed to initalize runtime (80131522)\nC:\\Users\\Noral>dnx\nFailed to initalize runtime (80131522)\n```\nWas your commit in this build?  Can we keep the ticket open until both of us have resolution.\nI also just noticed this - can the spelling of \"initalize\" be changed to \"initialize\".\n. I can confirm that beta7-12325 does solve the issue - obviously it will not be solved on beta6.   @jtbennett  - I am not using Azure Web Apps so I cannot comment on that.\nThank you @moozzyk and @anurse\n. ",
    "jtbennett": "I get the same error when deploying to an Azure web site via GitHub.  It's a one-page MVC app that works and deploys to Azure just fine using beta 5.  I changed all instances of \"1.0.0-beta5\" to \"1.0.0-beta6\" in global.json and project.json.  Global.json specifies \"clr\" and \"x64\". Azure website is set to x64. Project builds and runs fine locally (on OS X). \nHere's the log file from the Azure deploy:\nCommand: \"D:\\home\\site\\deployments\\tools\\deploy.cmd\"\nHandling ASP.NET 5 Web Application deployment.\nDownloading dnx-clr-win-x64.1.0.0-beta6 from https://www.nuget.org/api/v2\nInstalling to D:\\local\\UserProfile\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-beta6\nAdding D:\\local\\UserProfile\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-beta6\\bin to process PATH\nNative image generation (ngen) is skipped. Include -Ngen switch to turn on native image generation to improve application startup time.\nFailed to initalize runtime (80131522)An error has occurred during web site deployment.\nHandling ASP.NET 5 Web Application deployment.\nDownloading dnx-clr-win-x64.1.0.0-beta6 from https://www.nuget.org/api/v2\nInstalling to D:\\local\\UserProfile\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-beta6\nAdding D:\\local\\UserProfile\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-beta6\\bin to process PATH\nNative image generation (ngen) is skipped. Include -Ngen switch to turn on native image generation to improve application startup time.\nFailed to initalize runtime (80131522)An error has occurred during web site deployment.\nC:\\Program Files (x86)\\SiteExtensions\\Kudu\\47.40727.1709\\bin\\scripts\\starter.cmd \"D:\\home\\site\\deployments\\tools\\deploy.cmd\"\n. I'm getting this error deploying a beta 6 asp.net site to Azure Web Apps (details earlier in this thread).  That's IIS-hosted and (presumably) not Win 7. \nDoes this mean I need to wait for Azure to put .net 4.6 on those machines?\n. Thanks! Will give beta 7 a try when it's released.\n-JB\nOn Aug 7, 2015 7:09 PM, \"Pawel Kadluczka\" notifications@github.com wrote:\n\nThanks for confirmation @NoralK https://github.com/NoralK. You are\ncorrect beta6 won't be fixed. @jtbennett https://github.com/jtbennett -\nstay tuned for beta7 or use the unstable feed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/dnx/issues/2343#issuecomment-128855569.\n. Just confirming that beta 7 works on Azure web apps.  It got hung up deleting a DLL that was in use (Microsoft.AspNet.FeatureModel -- one of those that was renamed/removed, I think).  Stopping the app, deploying, and restarting worked.\n\nI'll use this comment inappropriately to complain about the undocumented steps upgrading to beta7 -- having to remove the Kestrel dependency in project.json and to rename Microsoft.AspNet.Runtime namespace to Microsoft.Dnx.Runtime in my Startup.cs. :)  \nThanks for the great work -- can't wait for it to ship!\n. Aha! Thanks for the pointer. Didn't know about the announcement repo. :)\n-JB\nOn Sep 3, 2015 7:56 PM, \"Pawel Kadluczka\" notifications@github.com wrote:\n\n(Thanks for confirming that the error was fixed)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/dnx/issues/2343#issuecomment-137604308.\n. Not sure whether this is the same problem, but after upgrading to beta8, dnx and dnu silently fail for me.\n\n```\nmbp-jtb:MyApp john$ dnvm list\nActive Version              Runtime Architecture OperatingSystem Alias\n------ -------              ------- ------------ --------------- -----\n  *    1.0.0-beta8          coreclr x64          darwin          coreclr\n       1.0.0-beta8          mono                 linux/osx       default\nmbp-jtb:MyApp john$ dnu restore\nmbp-jtb:MyApp john$ dnx kestrel\nmbp-jtb:MyApp john$ export DNX_TRACE=1\nmbp-jtb:MyApp john$ dnu restore\nLoaded module: dnx.coreclr.dylib\nFound export: CallApplicationMain\nUnhandled Exception: \n   Cannot print exception string because Exception.ToString() failed.\nmbp-jtb:MyApp john$ dnx kestrel\nLoaded module: dnx.coreclr.dylib\nFound export: CallApplicationMain\nUnhandled Exception: \n   Cannot print exception string because Exception.ToString() failed.\n```\n. Thanks!  That was it.  After install, both dnu and dnx work as expected.  Sorry I missed the instructions.\nIs there an issue open for the Exception.ToString() problem?\n. ",
    "darrenhull": "My app works locally, and I had this issue on the server after publishing the app but after installing 4.6 i get CS1703: multiple assemblies with equivalent identity have been imported. However it works fine locally. Any Ideas?\n. ",
    "sandeepbassi": "Hi David, \nCould you please refer me to the package for Microsoft.Net.Http.Client that is compliant to beta7 \nThanx\nSandeep\n. ",
    "simonech": "Same error happening also on  1.0.0-beta5       coreclr x86\n. Found the problem: my folder was named coreclr... renamed to coreclrsamples and now it works :)\n. This error is not happening anymore, maybe should be closed?\n. ",
    "matra774": "I had the same problem. Renaming folder helps.\n```\nc:\\Users\\user1\\Research\\coreclrTest>dnvm list\nActive Version           Runtime Architecture OperatingSystem Alias\n------ -------           ------- ------------ --------------- -----\n  *    1.0.0-beta7-12290 coreclr x64          win\n```\n. ",
    "GramozKrasniqi": "thanks god i found it here that the folder name is the problem. \n. ",
    "caleteeter": "+1.\nThis is also the case when the root folder is dnx.  :)\n. ",
    "AlekseyMartynov": "@DamianEdwards yes adding this helps:\n\"dependencies\": {\n    \"System.Runtime.Serialization.Primitives\":  \"4.0.10-*\"\n  }\n. ",
    "NiyazShoukath": "i am also same problem in beta 8 ?\nplease give  any idea\n. i have also same issue?\n. \n. @kagamine i have check your solution. but,stil same error \ni am using VS 2015 : beta8 version\nDNX : 1.0.0-beta8-15858\nOS windows 10 \n. @ davidfowl  @tmds  it cant solve\n. \n. @ericstj  how can solve this \n. how can solve this ?\n. ",
    "YoungjaeKim": "I got same problem with dnx46 and .net framework 4.6 libraries in rc1-update1\n. ",
    "BoasE": "Yes I was able to reproduce it with a plain new project and just changing the framework version in the project.json . 4.6 does work 4.6.1 not\n. Tried it again, Final 1 Update 1. Create a new project by normal project template, just changed project.json to 461 , doesn't start anymore\nso any news on this?\n. ",
    "valeravorobjev": "ASP.NET 5 app doesn't work if change DNX to 461!!!! \n. ",
    "andriysavin": "Hi, I have similar issue on 1.0.0-rc1-update1/VS2015 Update1. Here are STR:\n1. Create a ASP.NET 5 empty project\n2. Remove dnxcore50 from project.json\n3. Change dnx451 to dnx46\n4. Add a \"classic\" class library which targets 4.6\n5. Build the solution.\nI get this warning:\n\"Warning    MSB3274 The primary reference \"<....>\\Dnx46BugRepro\\ClassLibrary1\\bin\\Debug\\ClassLibrary1.dll\" could not be resolved because it was built against the \".NETFramework,Version=v4.6\" framework. This is a higher version than the currently targeted framework \".NETFramework,Version=v4.5.1\".    Dnx46BugRepro   C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets 1819\"\nand this error:\n\"Error  NU1002  The dependency ClassLibrary1 1.0.0 in project Dnx46BugRepro does not support framework DNX,Version=v4.6.    Dnx46BugRepro   <...>\\Dnx46BugRepro\\src\\Dnx46BugRepro\\project.json  19\"\n. @Maxwe11 \nIf you read the first line of the first reference you provided, you will notice that:\n\"For RC1 applications and test projects should still target  dnx4x  and  dnxcore50  and don't need to change at all....Only class libraries should change to target  net4x  and  dotnet5.x .\" As my case is exactly NOT one which requires renaming TxFs (my DNX project is an app, and the library is a classic library, which doesn't use any of these TxF at all), this won't give me anything.\nHowever, I've tried that, and got similar warning:\n\"Warning    MSB3274 The primary reference \"<...>\\Net46BugRepro\\ClassLibrary1\\bin\\Debug\\ClassLibrary1.dll\" could not be resolved because it was built against the \".NETFramework,Version=v4.6\" framework. This is a higher version than the currently targeted framework \".NETFramework,Version=v4.5.1\". Net46BugRepro   C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets 1819\"\nThis, again, looks pretty confusing, because I'm obviously targeting 4.6 in my DNX project, NOT 4.5.1 as the warning states. \nThe things gets worse if I check in the solution to a source control and then download it in a clean directory. In this case the solutions just doesn't build wit the error:\n\"<...>\\Net46BugRepro\\src\\Net46BugRepro\\project.json(19,26,19,26): .NET Framework 4.6 error NU1001: The dependency ClassLibrary1 >= 1.0.0-* could not be resolved.\"\n. ",
    "msmolcic": "Any idea when it will be fixed to work with 4.6.1 also?\n. @anurse Application launches, but fails few seconds after with the same output this guy described in his question on SO: http://stackoverflow.com/questions/34817523/asp-net-5-project-not-properly-targeting-net-4-6-1-and-cannot-be-debugged\n\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_32\\mscorlib\\v4.0_4.0.0.0__b77a5c561934e089\\mscorlib.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'Microsoft.Dnx.Host.Clr'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System\\v4.0_4.0.0.0__b77a5c561934e089\\System.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\msmolcic.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-rc1-final\\bin\\Microsoft.Dnx.Host.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\msmolcic.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-rc1-final\\bin\\Microsoft.Extensions.PlatformAbstractions.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Configuration\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Configuration.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Core\\v4.0_4.0.0.0__b77a5c561934e089\\System.Core.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Xml\\v4.0_4.0.0.0__b77a5c561934e089\\System.Xml.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\msmolcic.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-rc1-final\\bin\\Microsoft.Dnx.Loader.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\msmolcic.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-rc1-final\\bin\\Microsoft.Dnx.ApplicationHost.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\msmolcic.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-rc1-final\\bin\\Microsoft.Dnx.Runtime.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\msmolcic.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-rc1-final\\bin\\Microsoft.Dnx.Compilation.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\msmolcic.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-rc1-final\\bin\\Microsoft.Dnx.Compilation.Abstractions.dll'. Cannot find or open the PDB file.\nThe program '[7256] dnx.exe: Program Trace' has exited with code 0 (0x0).\nThe program '[7256] dnx.exe' has exited with code 1 (0x1).\nThe program '[13548] iisexpress.exe: Program Trace' has exited with code 0 (0x0).\nThe program '[13548] iisexpress.exe' has exited with code -1 (0xffffffff).\n. \n",
    "jakejscott": "Any ideas how to get this running?\n. This is still an issue even though it's not related to DNX, the issue needs to moved to the Tooling repo or TypeScript\n. Actually npm 3 is finally out which doesn't use really long paths... so that fixed it for me\n. ",
    "egorpavlikhin": "VS 2015 Community Edition has a reference to the old names even after installing updated tooling.\n1>  C:\\Users\\Egor\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta7-12302\\bin\\dnx.exe --appbase \"G:\\Projects\\New\\Bestla.Website\\src\\Bestla.Website\" \"C:\\Users\\Egor\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta7-12302\\bin\\lib\\Microsoft.Framework.PackageManager\\Microsoft.Framework.PackageManager.dll\" pack \"G:\\Projects\\New\\Bestla.Website\\src\\Bestla.Website\" --configuration Debug --out \"..\\..\\artifacts\\bin\\Bestla.Website\"\n1>  System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Framework.PackageManager' or one of its dependencies. The system cannot find the file specified.\n. @victorhurdugaci well turned out I had WEBPROJ_ENABLEBETA7RENAMES set up, although I never did it manually. Everything working now, so the updated tooling does work.\n. ",
    "mdekrey": "Seems that a couple of others and I are having this issue inside Visual Studio with the latest versions, while it works fine (at least for me) from the command line (using dnu restore). \nLet's see, quick dump from the questions @victorhurdugaci asked:\nFor the workaround link... I installed the Microsoft ASP.NET and Web Tools 2015 (Beta6) \u2013 Visual Studio 2015 package. I don't have an environment variable named WEBPROJ_ENABLEBETA7RENAMES. My projects are referencing \"beta8-*\" from the dailies feed and the Azure nightly feed, and my global.json has the sdk version specified as 1.0.0-beta8-15548. I don't think I'm to the point where I can check to see if the PR specified in the workaround has been applied to the NuGet xunit package.\nHere's the information copied from my about dialog:\n```\nMicrosoft Visual Studio Professional 2015\nVersion 14.0.23107.0 D14REL\nMicrosoft .NET Framework\nVersion 4.6.00079\nInstalled Version: Professional\nVisual Basic 2015   00322-40000-00000-AA556\nMicrosoft Visual Basic 2015\nVisual C# 2015   00322-40000-00000-AA556\nMicrosoft Visual C# 2015\nVisual C++ 2015   00322-40000-00000-AA556\nMicrosoft Visual C++ 2015\nApplication Insights Tools for Visual Studio Package   1.0\nApplication Insights Tools for Visual Studio\nASP.NET and Web Tools   14.0.20711.0\nASP.NET and Web Tools\nASP.NET Web Frameworks and Tools 2013   5.2.30624.0\nFor additional information, visit http://www.asp.net/\nCommon Azure Tools   1.6\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\nGenerateUnitTest   1.0\nGenerates unit test code for methods in classes under test.\nGitHub.VisualStudio   1.0\nA Visual Studio Extension that brings the GitHub Flow into Visual Studio.\nMicrosoft Azure HDInsight HQL Service   2.0.2600.0\nLanguage service for Hive query\nMicrosoft Azure HDInsight Tools for Visual Studio   2.0.2600.0\nAn integrated development environment for HDInsight application development.\nMicrosoft Azure Mobile Services Tools   1.4\nMicrosoft Azure Mobile Services Tools\nMicrosoft Azure Tools   2.5\nMicrosoft Azure Tools for Microsoft Visual Studio 2015 Preview - v2.5.21104.1601\nMicrosoft Azure Tools   2.7\nMicrosoft Azure Tools for Microsoft Visual Studio 2015 - v2.7.30818.1601\nNuGet Package Manager   3.0.0\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\nPreEmptive Analytics Visualizer   1.2\nMicrosoft Visual Studio extension to visualize aggregated summaries from the PreEmptive Analytics product.\nSQL Server Data Tools   14.0.50616.0\nMicrosoft SQL Server Data Tools\n```\nThis is my error message from Visual Studio's output window, redacted only slightly:\nPATH=.\\node_modules\\.bin;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\Web Tools\\External;%PATH%;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\Web Tools\\External\\git\nC:\\Users\\<User>\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta8-15548\\bin\\dnx.exe \"C:\\Users\\<User>\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta8-15548\\bin\\lib\\Microsoft.DNX.PackageManager\\Microsoft.DNX.PackageManager.dll\" restore \"C:\\Users\\<User>\\Source\\<Solution>\\src\\<Project>\" -f \"C:\\Program Files (x86)\\Microsoft Web Tools\\DNU\"\nSystem.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.DNX.PackageManager' or one of its dependencies. The system cannot find the file specified.\nFile name: 'Microsoft.DNX.PackageManager'\nat System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\nat System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\nat System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\nat System.Reflection.Assembly.Load(AssemblyName assemblyRef)\nat Microsoft.Dnx.Runtime.Loader.LoadContext.Load(AssemblyName assemblyName)\nat Microsoft.Dnx.Host.Bootstrapper.RunAsync(List`1 args, IRuntimeEnvironment env, FrameworkName targetFramework)\nat Microsoft.Dnx.Host.RuntimeBootstrapper.ExecuteAsync(String[] args, FrameworkName targetFramework)\nat Microsoft.Dnx.Host.RuntimeBootstrapper.Execute(String[] args, FrameworkName targetFramework)\nWRN: Assembly binding logging is turned OFF.\nTo enable assembly bind failure logging, set the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog] (DWORD) to 1.\nNote: There is some performance penalty associated with assembly bind failure logging.\nTo turn this feature off, remove the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog].\nI'm still working on solving it myself, but my knowledge of the VS2015 ecosystem is unfortunately a bit less than I'd like! Thanks in advance!\n. Seems that a couple of others and I are having this issue inside Visual Studio with the latest versions, while it works fine (at least for me) from the command line (using dnu restore). \nLet's see, quick dump from the questions @victorhurdugaci asked:\nFor the workaround link... I installed the Microsoft ASP.NET and Web Tools 2015 (Beta6) \u2013 Visual Studio 2015 package. I don't have an environment variable named WEBPROJ_ENABLEBETA7RENAMES. My projects are referencing \"beta8-*\" from the dailies feed and the Azure nightly feed, and my global.json has the sdk version specified as 1.0.0-beta8-15548. I don't think I'm to the point where I can check to see if the PR specified in the workaround has been applied to the NuGet xunit package.\nHere's the information copied from my about dialog:\n```\nMicrosoft Visual Studio Professional 2015\nVersion 14.0.23107.0 D14REL\nMicrosoft .NET Framework\nVersion 4.6.00079\nInstalled Version: Professional\nVisual Basic 2015   00322-40000-00000-AA556\nMicrosoft Visual Basic 2015\nVisual C# 2015   00322-40000-00000-AA556\nMicrosoft Visual C# 2015\nVisual C++ 2015   00322-40000-00000-AA556\nMicrosoft Visual C++ 2015\nApplication Insights Tools for Visual Studio Package   1.0\nApplication Insights Tools for Visual Studio\nASP.NET and Web Tools   14.0.20711.0\nASP.NET and Web Tools\nASP.NET Web Frameworks and Tools 2013   5.2.30624.0\nFor additional information, visit http://www.asp.net/\nCommon Azure Tools   1.6\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\nGenerateUnitTest   1.0\nGenerates unit test code for methods in classes under test.\nGitHub.VisualStudio   1.0\nA Visual Studio Extension that brings the GitHub Flow into Visual Studio.\nMicrosoft Azure HDInsight HQL Service   2.0.2600.0\nLanguage service for Hive query\nMicrosoft Azure HDInsight Tools for Visual Studio   2.0.2600.0\nAn integrated development environment for HDInsight application development.\nMicrosoft Azure Mobile Services Tools   1.4\nMicrosoft Azure Mobile Services Tools\nMicrosoft Azure Tools   2.5\nMicrosoft Azure Tools for Microsoft Visual Studio 2015 Preview - v2.5.21104.1601\nMicrosoft Azure Tools   2.7\nMicrosoft Azure Tools for Microsoft Visual Studio 2015 - v2.7.30818.1601\nNuGet Package Manager   3.0.0\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\nPreEmptive Analytics Visualizer   1.2\nMicrosoft Visual Studio extension to visualize aggregated summaries from the PreEmptive Analytics product.\nSQL Server Data Tools   14.0.50616.0\nMicrosoft SQL Server Data Tools\n```\nThis is my error message from Visual Studio's output window, redacted only slightly:\nPATH=.\\node_modules\\.bin;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\Web Tools\\External;%PATH%;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\Extensions\\Microsoft\\Web Tools\\External\\git\nC:\\Users\\<User>\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta8-15548\\bin\\dnx.exe \"C:\\Users\\<User>\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta8-15548\\bin\\lib\\Microsoft.DNX.PackageManager\\Microsoft.DNX.PackageManager.dll\" restore \"C:\\Users\\<User>\\Source\\<Solution>\\src\\<Project>\" -f \"C:\\Program Files (x86)\\Microsoft Web Tools\\DNU\"\nSystem.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.DNX.PackageManager' or one of its dependencies. The system cannot find the file specified.\nFile name: 'Microsoft.DNX.PackageManager'\nat System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\nat System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\nat System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\nat System.Reflection.Assembly.Load(AssemblyName assemblyRef)\nat Microsoft.Dnx.Runtime.Loader.LoadContext.Load(AssemblyName assemblyName)\nat Microsoft.Dnx.Host.Bootstrapper.RunAsync(List`1 args, IRuntimeEnvironment env, FrameworkName targetFramework)\nat Microsoft.Dnx.Host.RuntimeBootstrapper.ExecuteAsync(String[] args, FrameworkName targetFramework)\nat Microsoft.Dnx.Host.RuntimeBootstrapper.Execute(String[] args, FrameworkName targetFramework)\nWRN: Assembly binding logging is turned OFF.\nTo enable assembly bind failure logging, set the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog] (DWORD) to 1.\nNote: There is some performance penalty associated with assembly bind failure logging.\nTo turn this feature off, remove the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog].\nI'm still working on solving it myself, but my knowledge of the VS2015 ecosystem is unfortunately a bit less than I'd like! Thanks in advance!\n. Ah, looks like I forgot to install the WebToolsExtensionsVS14.msi - thanks for your time @victorhurdugaci! (Hopefully other people who see the version numbers here will find the solution, too!)\n. Ah, looks like I forgot to install the WebToolsExtensionsVS14.msi - thanks for your time @victorhurdugaci! (Hopefully other people who see the version numbers here will find the solution, too!)\n. ",
    "chandrasekarkesavan": "Thanks victor and mdekrey. I helps me to solve the problem. \n. ",
    "ryanvgates": "I'm experiencing a similar issue to what @MiguelAlho has pointed out. The only way that worked for me was to follow the directions from this post.\nAs an aside, it's always been really frustrating when VS and msbuild did things differently (e.g. working in one and not the other) like with the way that nuget packages are handled. I'm disappointed to see that this paradigm is moving forward with DNX as well.\n. ",
    "mholo65": "What should be supported? How should it work?\n1. Should it be interactive, should it accept params? Or both? (-i / --interactive)\n2. Should it also support generation of global.json file? (-g / --global)\n3. Should it support modifying an existing project.json/global.json? I.e. try to load if exist in dir?\n4. What should be modified? Version, Authors, Description?\n5. Default frameworks? dnxcore50 on Win/Linux/Mac and dnx451 on Win?\n6. Other stuff? Commands, Dependencies, Webroot, Exclude, etc...\nA minimal simple project.json could be as following:\n``` json\n{\n  \"version\": \"0.1-alpha\",\n  \"authors\": [\"John Doe\"],\n  \"description\": \"A wonderful library that does nice stuff\",\n\"code\": [\"*/.cs\"],\n  \"frameworks\": {\n    \"dnx451\": { },\n    \"dnxcore50\": { }\n  }\n}\n```\n. Fixed tests.\nI will look into ConsoleCommands and test on Windows tomorrow.\nWhat about Microsoft.Dnx.ApplicationHost?\n. ",
    "ghithub": "I am also getting the same error. I forked the aspnet/mvc branch yesterday. Build succeeds, but when I try to launch the BasicWebSite via F5, I got the same error as MikeAndersun reported. \nWhen I ran dvm upgrade -u default, I get the following error:\nC:\\Program Files\\Microsoft DNX\\Dnvm\\dnvm.ps1 : A parameter cannot be found that\n matches parameter name 'u'.\nAt line:1 char:182\n- ... t-envvars.cmd';& 'C:\\Program Files\\Microsoft DNX\\Dnvm\\dnvm.ps1' upgrade -\n  u defau ...\n-                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+ CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorExcep\n   tion\n    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorExceptio\n   n,dnvm.ps1\n. Thanks for letting me know. I will try it now and see how it goes.\n. So, I tried the following command provided at https://github.com/aspnet/Home#cmd\n@powershell -NoProfile -ExecutionPolicy unrestricted -Command \"&{$Branch='dev';iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.ps1'))}\"\nI removed my old dnvm.ps1 and dnvm.cmd before I issued the command. Everything seems to have gone well with no errors. But I am still getting the exact same error when trying to launch BasicWebSite via F5.\n. I didn't realize that I needed to run dnvm upgrade. I have done that, rebuilt the solution and now when I tried to launch BasicWebSite via F5, I get a Microsoft Visual Studio error popup which says Project Microsoft.AspNet.Mvc.Core does not contain any commands in project.json and cannot be started directly. In order to debug this project, add a new command in project.json and try again. Alternatively, add an executable project to this solution which references this project and set that as the default project.\n. Apparently I am getting tons of build errors after the dnvm upgrade.\n. C:\\Program Files (x86)\\Microsoft Visual Studio 14.0>dnx --version\nMicrosoft .NET Execution environment\nVersion:      1.0.0-beta7-15524\n Type:         CLR\n Architecture: x86\n OS Name:      Windows\n OS Version:   6.1.7601.65536\nI am not sure what tools packages you are referring to.\n. ",
    "renaldas": "try to open global.json file and change \"version\": \"1.0.0-beta6\", to \"version\": \"1.0.0-beta7\",\n. ",
    "MarcoGaribaldi": "I had the same issue. @renaldas' suggestion resolved it.\n. ",
    "DannyVarod": "I am getting this exact error with VS2015 RTM - all the packages I've updated are not restored and direct run of the restore packages outputs \"All packages are already installed and there is nothing to restore.\".\nThe project.json is updated, however, the project.lock.json still has the older versions in it.\nNote that I used the solution's manage NuGet packages, not the project's one - in case this makes a difference in reproducing this scenario.\n. Using Visual Studio 2015 RTM Community edition (Version 14.0.23107.0 D14REL with .NET Version 4.6.0081 and NuGet Package Manager Version 3.2.60914.10516):\n1. Create new ASP.NET Web Application, .NET version = 4.5.2, with a new solution, select ASP.NET 5 Preview Templates, Web Application, authentication = Individual User Accounts, do not check Host in the cloud.\n2. Build solution, build succeeds.\n3. Right click on solution, Manage NuGet Packages, filter by Upgrade available, Include prerelease.\n4. Update a NuGet e.g. EntityFramework.SqlServer from 7.0.0-beta5 to 7.0.0-beta7 (same effect if you update them all).\n5. Build solution, build fails with loads of errors and one warning per updated package which explains the errors e.g.:\nSeverity    Code    Description Project File    Line\nWarning     Dependency specified was EntityFramework.SqlServer >= 7.0.0-beta7 but ended up with EntityFramework.SqlServer 7.0.0-beta5.  WebApplication1 C:\\DEV\\Examples\\Web2\\src\\WebApplication1\\project.json   7\n. Another issue I've found: uninstalling a NuGet doesn't remove it from project.lock.json, this breaks the build with unrelated errors.\n. ",
    "r2musings": "Hi Glenn, we already have this in a VSOnline repo.  I'll get you access.\n. Gave you access, @glennc.  Let me know if you have any problems getting to it.\n. ",
    "cscleison": "@troydai same problem here. tried different patterns but doesn't work\n. ",
    "andrewflierman": "Tried the same as @kichalla, and taking this SO answer into account it would be nice to be able to exclude some folder inside wwwroot. \n. ",
    "schuettecarsten": "Feel free to contact me at c.schuette (at) neusta.de, I can send you the sample project/solution, additional logs etc. if you need.\n. Well, I'm trying to create multi-target nuget packages. I have a project that uses net40-client profile. If this is removed in newer versions of .net, I will check if I can remove it from the application.\n. ",
    "jchannon": "I see the same issue with Microsoft.AspNet.Authentication.Twitter but had no clue why it threw that error\n. So you're saying I use dnu install Blah but have to do nuget update? Good UX!\nActually that won't work because nuget update expects a packages.config which a dnx app does not contain\n. ",
    "mikeandersun": "I only use IIS. \nIf it is a bug I can wait for next build.\n. I Have the issue too. :(\n. yes. Unable to locate them!\n. dnu restore --no-cache use aspnetvnext rather that aspnetrelease.\nHow to I force it to use aspnetrelease. Or may may be install dnx-* from aspnetrelease\nThanks to clarify me\n. The compilation errors go away but afer run i get this error:\nMethod not found: 'Microsoft.CodeAnalysis.CSharp.CSharpCompilationOptions Microsoft.Dnx.Compilation.CSharp.CompilationSettings.get_CompilationOptions()'.\n. @davidfowl  I use beta8 nightly builds,why can't run? What you means \"wait until beta8 ships\"?\n. I can use web OR Kestrel command to run my web application for now. Am I correct?\n. I have this code in my startup.cs file :\nservices.Configure<OpenIdConnectOptions>(options =>\n            {\n                  options.SignInScheme = \"Cookies\";\n             });\nwith web or Kestrel  commands i get an method ... . But by commenting the code it run fine with web command and with Kestrel Can't load libuv\n. Here is the same issue \n. I have the same issue and here is my project.json :\n{\n  \"authors\": [\n        \"me\"\n    ],\n    \"commands\": {\n        \"web\": \"Microsoft.AspNet.Hosting --ASPNET_ENV development --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:49102\",\n        \"WebListener\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:49102\",\n        \"Kestrel\": \"Microsoft.AspNet.Server.Kestrel --server Microsoft.AspNet.Server.Kestrel --server.urls http://localhost:49102\",\n        \"run\": \"run server.urls=http://localhost:49102\"\n```\n},\n\"dependencies\": {\n    \"Controllers\": \"1.0.0-\",\n    \"EntityFramework\": \"1.0.0-\",\n    \"Services\": \"1.0.0-*\",\n\"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-*\",\n\"Microsoft.Net.Http.Server\": \"1.0.0-*\",\n\"Microsoft.AspNet.Server.WebListener\": \"1.0.0-*\",\n\"EntityFramework.Commands\": \"7.0.0-*\",\n\"Microsoft.AspNet.Mvc.Razor\": \"6.0.0-*\",\n\"Microsoft.AspNet.Tooling.Razor\": \"1.0.0-*\",\n\"Microsoft.AspNet.Diagnostics\": \"1.0.0-*\",\n\"Microsoft.AspNet.Diagnostics.Entity\": \"7.0.0-*\",\n\"Microsoft.Framework.Logging\": \"1.0.0-*\",\n\"Microsoft.Framework.Logging.Console\": \"1.0.0-*\",\n\"Microsoft.AspNet.Authentication.OpenIdConnect\": \"1.0.0-*\",\n\"Microsoft.IdentityModel.Protocols.OpenIdConnect\": \"2.0.0-*\",\n\"Microsoft.IdentityModel.Protocols\": \"2.0.0-*\",\n\"System.IdentityModel.Tokens\": \"5.0.0-*\",\n\"System.IdentityModel.Tokens.Jwt\": \"5.0.0-*\",\n\"System.Net.Http\": \"4.0.1-beta-23302\",\n\"Microsoft.Framework.OptionsModel\": \"1.0.0-*\"\n\n},\n\"exclude\": [\n    \"wwwroot\",\n    \"node_modules\",\n    \"bower_components\",\n    \"grunt\"\n],\n\"frameworks\": {\n    \"dnx451\": { },\n    \"dnxcore50\": {\n        \"dependencies\": {\n            \"System.Security.Cryptography.X509Certificates\": \"4.0.0-beta-*\"\n        }\n    }\n},\n\"publishExclude\": [\n    \"bower.json\",\n    \"package.json\",\n    \"gruntfile.js\",\n    \"grunt\",\n    \"node_modules\",\n    \"bower_components\",\n    \".xproj\",\n    \".user\",\n    \"*.vspscc\"\n],\n\"version\": \"1.0.0-\",\n\"webroot\": \"wwwroot\"\n```\n}\n. These are the feeds . these feeds work for previous builds(v1.0.0-beta8-15653) \nI think you messed up and pushed incomplete things or some feeds has been changed.\nFeeds used:\n    https://www.nuget.org/api/v2/\n    https://www.myget.org/F/aspnetvnext/api/v3/flatcontainer/\n    https://www.myget.org/F/azureadwebstacknightly/api/v2/\n    https://nuget.org/api/v2/\n. For example :\nMicrosoft.Dnx.Loader v1.0.0-beta8-15654 not exits on (https://www.myget.org/gallery/aspnetvnext)\n. Where is  aspnetci feed?!\nAnd how to i can use next feed only?\n. @tstar  I did tried  https://myget.org/F/aspnetcidev/api/v2 feed. But there was many issues. \nI recommended to wait for next builds come from anpnetvnext  feed. See this \n. ",
    "jasoncavett": "I'm seeing this same issue on Beta 7 as well. I'm in Windows, running VS2015 and it's happening when I attempt to restore packages. This is the output from the Output panel. All my packages and DNX are the same version (beta7).\nC:\\Users\\JC\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta7\\bin\\dnx.exe \"C:\\Users\\JC\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta7\\bin\\lib\\Microsoft.DNX.PackageManager\\Microsoft.DNX.PackageManager.dll\" restore \"Z:\\Projects\\web-cemeteries\\obituaries\" -f \"C:\\Program Files (x86)\\Microsoft Web Tools\\DNU\"\nSystem.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.DNX.PackageManager' or one of its dependencies. The system cannot find the file specified.\nFile name: 'Microsoft.DNX.PackageManager'\n   at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\n   at System.Reflection.Assembly.Load(AssemblyName assemblyRef)\n   at Microsoft.Dnx.Runtime.Loader.LoadContext.Load(AssemblyName assemblyName)\n   at Microsoft.Dnx.Host.Bootstrapper.RunAsync(List`1 args, IRuntimeEnvironment env, FrameworkName targetFramework)\n   at Microsoft.Dnx.Host.RuntimeBootstrapper.ExecuteAsync(String[] args, FrameworkName targetFramework)\n   at Microsoft.Dnx.Host.RuntimeBootstrapper.Execute(String[] args, FrameworkName targetFramework)\n. Thanks @victorhurdugaci. I actually fixed it just a bit ago, but I didn't need to get new tooling. Instead, I had to delete out project.lock.json and then I had to manually run dnu restore from the command window. Once that was done, everything worked beautifully.\nI'll look to update my tooling, though, as that is obviously a better way to do it. Thanks again!\n. ",
    "Shuliyey": "Hi \nthis bug still exists in the beta8. \ndnu restore works. But visual studio 2015 still tries to call the below command\nC:\\Users\\dye.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta8\\bin\\dnx.exe \"C:\\Users\\dye.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta8\\bin\\lib\\Microsoft.DNX.PackageManager\\Microsoft.DNX.PackageManager.dll\" restore \"d:\\visual studio 2015\\Projects\\Auto\\src\\Auto\" -s \"C:\\Program Files (x86)\\Microsoft Web Tools\\DNU\"\n. Hi\nSorry I found out the problem, and the solution is here\nhttp://stackoverflow.com/questions/32330004/dnx-beta8-15530-could-not-load-file-or-assembly-microsoft-dnx-packagemanager\nand\nhttps://github.com/aspnet/dnx/issues/2371\nBasicly @mdekrey mentioned you have to install WebToolsExtension VS14\nJust gave it a try, worked like a breeze :)\n. ",
    "aliveli186": "json\n  \"frameworks\": {\n    \"dnx451\": { },\n    \"dnxcore50\": {\n      \"dependencies\": {\n        \"System.Data.SqlClient\": \"4.0.0-beta-23019\"\n      }\n    }\n  }\n. ",
    "shipitfaster": "I had the same issue on Beta5, though the reference was already under the \"dnx451\" node as @kichalla points out above. What I did find, though, was that I had an empty dnxcore50 node.\nThis works\njavascript\n\"frameworks\": {\n    \"dnx451\": {\n      \"frameworkAssemblies\": {\n        \"System.Data\": \"4.0.0.0\"\n      }\n    }        \n  },\nThis doesn't work\n``` javascript\n\"frameworks\": {\n    \"dnx451\": {\n      \"frameworkAssemblies\": {\n        \"System.Data\": \"4.0.0.0\"\n      }\n    },\n    \"dnxcore50\": {\n      \"dependencies\": {\n  }\n}\n\n},\n```\n. ",
    "psulek": "@radenkozec You help me a lot with those lines:\n\"System.Runtime\": \"\",\n\"System.Data\": \"\"\nThanks a lot!\n. ",
    "mykebates": "Love this update!\n. ",
    "damccull": "Woo! About time :D Good job.\n. Woo! About time :D Good job.\n. ",
    "lwinch2006": "It seems that Visual Studio Code 0.7.0 and 0.8.0-preview use the old format of the command namely \"dnx . kestrel\" for example and fail to start application. Is it some way to fix it according to the new format or it is just to wait until new release of Visual Studio Code will be available.\n. ",
    "grahamehorner": "was this fixed in the beta7 release; I'm still seeing the issue with aspnet console applications?\n. ",
    "bastianeicher": "You're right, Zero Install is a package manager like Chocolatey. However, there a lot of design differences that make Zero Install, imho, better suited for isolated apps and Chocolatey better for stuff that integrates more deeply with the OS. Zero Install also runs on Linux and OS X.\nI was thinking about using Zero Install for deploying DNX console applications. If someone were, for example, to implement a .NET Core version of Scala (let's call it CoreScala) a Zero Install feed for it might look something like this:\n``` xml\n\nCoreScala\na .NET Core version of Scala\n\n Get the binaries from a NuGet package \n \n<!-- Pull in a dependency from another feed (which is probably also backed by a NuGet package) -->\n<requires interface=\"http://somserver.org/awesome-lib.xml\"/>\n\n<!-- Define main command for launching the app (named \"run\" by convention) -->\n<command name=\"run\" path=\"app\">\n  <!-- Special kind of dependency that is used as a launcher for this application (other examples: JRE, Python, ...) -->\n  <runner interface=\"http://asp.net/dnx.xml\">\n    <!-- Command-line arguments passed to the launcher; the fully expanded path to the \"app\" directory is appended at the end -->\n    <arg>Microsoft.Framework.ApplicationHost</arg><arg>scala</arg><arg>--appbase</arg>\n  </runner>\n</command>\n\n<!-- Define secondary command -->\n<command name=\"scaladoc\" path=\"app\">\n  <runner interface=\"http://asp.net/dnx.xml\">\n    <arg>Microsoft.Framework.ApplicationHost</arg><arg>scaladoc</arg><arg>--appbase</arg>\n  </runner>\n</command>\n\n\n Offer \"desktop integration\" of app capabilities (e.g. file associations) to user \n\n\nScala Code File\n\n\n\n\n```\nThe user could then run Scala without an explicit install step:\n0install run http://scala.org/core-scala.xml\nOr show a GUI for creating command-line aliases, start menu entries, file type associations, etc.:\n0install integrate http://scala.org/core-scala.xml\nAll of this already works in principle, but manually creating Zero Install feeds for everything is quite a time-hog. If you guys think using Zero Install as a deployment option for DNX apps makes sense, working on a web-service that transparently maps NuGet packages to Zero Install feeds could be the next step.\n. You're right, Zero Install is a package manager like Chocolatey. However, there a lot of design differences that make Zero Install, imho, better suited for isolated apps and Chocolatey better for stuff that integrates more deeply with the OS. Zero Install also runs on Linux and OS X.\nI was thinking about using Zero Install for deploying DNX console applications. If someone were, for example, to implement a .NET Core version of Scala (let's call it CoreScala) a Zero Install feed for it might look something like this:\n``` xml\n\nCoreScala\na .NET Core version of Scala\n\n Get the binaries from a NuGet package \n \n<!-- Pull in a dependency from another feed (which is probably also backed by a NuGet package) -->\n<requires interface=\"http://somserver.org/awesome-lib.xml\"/>\n\n<!-- Define main command for launching the app (named \"run\" by convention) -->\n<command name=\"run\" path=\"app\">\n  <!-- Special kind of dependency that is used as a launcher for this application (other examples: JRE, Python, ...) -->\n  <runner interface=\"http://asp.net/dnx.xml\">\n    <!-- Command-line arguments passed to the launcher; the fully expanded path to the \"app\" directory is appended at the end -->\n    <arg>Microsoft.Framework.ApplicationHost</arg><arg>scala</arg><arg>--appbase</arg>\n  </runner>\n</command>\n\n<!-- Define secondary command -->\n<command name=\"scaladoc\" path=\"app\">\n  <runner interface=\"http://asp.net/dnx.xml\">\n    <arg>Microsoft.Framework.ApplicationHost</arg><arg>scaladoc</arg><arg>--appbase</arg>\n  </runner>\n</command>\n\n\n Offer \"desktop integration\" of app capabilities (e.g. file associations) to user \n\n\nScala Code File\n\n\n\n\n```\nThe user could then run Scala without an explicit install step:\n0install run http://scala.org/core-scala.xml\nOr show a GUI for creating command-line aliases, start menu entries, file type associations, etc.:\n0install integrate http://scala.org/core-scala.xml\nAll of this already works in principle, but manually creating Zero Install feeds for everything is quite a time-hog. If you guys think using Zero Install as a deployment option for DNX apps makes sense, working on a web-service that transparently maps NuGet packages to Zero Install feeds could be the next step.\n. One more thought: The recently introduced dnu sources (aspnet/Announcements#46) command requires git to be in the PATH. Zero Install can be used to download such dependencies transparently on-demand.\n. ",
    "tuespetre": "dnx-watch has this option for some reason?\nhttps://github.com/aspnet/dnx-watch/blob/dev/src/Microsoft.Dnx.Watcher/Program.cs#L86\n. All of my refs are beta7. Your comment makes me wonder if there's something about the version of the Roslyn compiler itself? Is that going off of the runtime version of DNX or is it separate? \nAlso I am targeting 'dnx451'.\n- Derek Gray\n\nOn Sep 7, 2015, at 10:21 AM, Matthew Abbott notifications@github.com wrote:\nI'm also finding this issue, both times I last performed an updated, my compile modules seems to have stopped. Can't remember how I resolved it the first time either.\nThrough testing, I generally place a Debugger.Launch() in my BeforeCompileContext method, and this usually causes the Debugger Selector to launch on build, but this not even being fired :-/\n\u2014\nReply to this email directly or view it on GitHub.\n. I checked out Entropy and built/ran that project. It seems to work (Hello from generated code.) After seeing that I tried some more things in my project -- overriding BeforeCompile to throw an exception in my class that derives from RazorPreCompileModule -- and the exception is thrown on build. Seems this must be an issue with RazorPreCompileModule in beta 7 then, as it seems to have no effect.\n. After cloning/building/debugging dnx's 1.0.0-beta7 tag, I think I found where the issue lies, and it looks like @davidfowl had already corrected it, though it did not make it into beta7:\n\nhttps://github.com/aspnet/dnx/blob/7c6e557fc821f9f10d7ef2f72f6437c840fc18a9/src/Microsoft.Dnx.Compilation.CSharp/RoslynProjectReference.cs#L98\nI have confirmed it's working as expected now (local dev build of dnx and changing my project to target 1.0.0-* and the nightly feed)\n. Correct, I did mean \"target framework version.\"\nI do have to wonder though -- is there an issue with the mentioned 'nuget selection logic' if it selects net20 instead of net40 for a dnx46 project?\n. DNX won't be used anymore? As in, DNX is going away? Also, will the process name account for multiple instances of a running process, or will there be more of a bias to writing an application to use a configurable number of worker threads?\n. Ah, the CLI is something I missed entirely. It looks wonderful!\n@davidfowl: I am talking about deployment and scalability, like managing multiple instances of the same process on a server. Think queue processors, etc.\n. That is correct. \n. I would pass the desired process name as a command line argument when instantiating each process.\nAs I said, this doesn't take much at all to implement within each application that would even need this, so it may just fall under the category of 'other' and not really belong with the 'dnx' or 'dotnet run' commands.\n. Note: I also have to add the version (1.0.0-*) to each of the references in the project.json and NOT lock the project.lock.json file for it to work.\n. Since dnx is umm... dead... I'm going to close this for my own book keeping\n. ",
    "buraktamturk": "@moozzyk There are downsides but I am currently using it as it fits perfectly for my needs. I don't use CoreCLR, and I wrote the models manually instead of using edmx\n. I use \"Publish\" button on VS 2015, and deploy to server using Web Deploy 3.6. I also don't tick \"deploy using powershell script\" option, if I do I get SSL errors and I can't make it to accept the self-signed certificate. \n. I was using same technique when I was targeting beta-5 or beta-4, everything was great.\n. I decided to go with beta-5 until this issue gets fixed, however I get same problem when I back to beta5 and I didn't have any problems before I upgrade the project to beta6.\nWhen I switch the project beta-5 to beta-6 using Properties window in Visual Studio, VS has generated global.json using this content:\njavascript\n{\n  \"sdk\": {\n    \"version\": \"1.0.0-beta6\",\n    \"runtime\": \"clr\",\n    \"architecture\": \"x64\"\n  }\n}\nWhen I switch to beta5, the \"version\" in this json indeed changed (previously I didn't had global.json while using beta5, it is auto generated when I switch beta6). But there was same problem again.\nSo looked an example of global.json (from the internet) and modified the contents accordingly.\njavascript\n{\n  \"projects\": [\".\"],\n  \"packages\": \"packages\",\n  \"sdk\": {\n    \"version\": \"1.0.0-beta5\",\n    \"runtime\": \"clr\",\n    \"architecture\": \"x64\"\n  }\n}\nAnd boom! It works beta5, so I had to test with beta6:\njavascript\n{\n  \"projects\": [\".\"],\n  \"packages\": \"packages\",\n  \"sdk\": {\n    \"version\": \"1.0.0-beta6\",\n    \"runtime\": \"clr\",\n    \"architecture\": \"x64\"\n  }\n}\nEverything works great again. I am so happy!\nthe problem was lack of \"packages\": \"packages\", in global.json\nI am sorry that I kept nice programmers busy with this issue, I think it's still an issue (at least we know the root cause) from my point of view but clearly not on the DNX part. (maybe at VS part?) \n. ",
    "galexandrov": "simple workaround is just to rename .git folder where git status is executed. :smile: \n. ",
    "khalidabuhakmeh": ":+1: \n. ",
    "petrsvihlik": "I'm having the exact same issue. I've created a testing repo to help reproduce it: \nhttps://github.com/petrsvihlik/aspnet5_deploytest\nIt's an ASP.NET5 web app referencing a good old class library. When I remove the reference to the library, publishing works just fine. Otherwise i get the error above.\n@gabrielvdk You can try creating nuget packages out of your old libs as a workaround.\n. ",
    "gabrielvdk": "Hi, \nJust tried your suggestion by adding a 'normal' NuGet package to the project, same issue. I would build and work fine on my Dev machine, but wouldn't publish to Azure.\nHere are the publish logs, the first is the failure, the second the succcess.\nThe NuGet package that I used: SD.LLBLGen.Pro.ORMSupportClasses\nFail:\nProject \"ExampleProj.Kitchen.xproj\" (MSDeployPublish target(s)):\n    Building with tools version \"14.0\".\n    Task \"Error\" skipped, due to false condition; ( '$(_InvalidConfigurationError)' == 'true' ) was evaluated as ( '' == 'true' ).\n    Task \"Warning\" skipped, due to false condition; ( '$(_InvalidConfigurationWarning)' == 'true' ) was evaluated as ( '' == 'true' ).\n    Configuration=Debug\n    Platform=AnyCPU\n    Task \"Error\" skipped, due to false condition; ('$(OutDir)' != '' and !HasTrailingSlash('$(OutDir)')) was evaluated as ('..\\artifacts\\bin\\ExampleProj.Kitchen\\' != '' and !HasTrailingSlash('..\\artifacts\\bin\\ExampleProj.Kitchen\\')).\n    Task \"Error\" skipped, due to false condition; ('$(BaseIntermediateOutputPath)' != '' and !HasTrailingSlash('$(BaseIntermediateOutputPath)')) was evaluated as ('..\\artifacts\\obj\\ExampleProj.Kitchen\\' != '' and !HasTrailingSlash('..\\artifacts\\obj\\ExampleProj.Kitchen\\')).\n    Task \"Error\" skipped, due to false condition; ('$(IntermediateOutputPath)' != '' and !HasTrailingSlash('$(IntermediateOutputPath)')) was evaluated as ('..\\artifacts\\obj\\ExampleProj.Kitchen\\Debug\\' != '' and !HasTrailingSlash('..\\artifacts\\obj\\ExampleProj.Kitchen\\Debug\\')).\n    Using \"GetRuntimeToolingPath\" task from assembly \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.Tasks.dll\".\n    Task \"Error\" skipped, due to false condition; (!Exists('$(RuntimeToolingExe)')) was evaluated as (!Exists('C:\\Users\\Gabriel\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta6\\bin\\dnx.exe')).\n    Using \"DefaultExternalToolsPath\" task from assembly \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.Tasks.dll\".\n    Using \"GetRuntimeVersion\" task from assembly \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.Tasks.dll\".\n    rmdir /S /Q \"C:\\Users\\Gabriel\\AppData\\Local\\Temp\\PublishTemp\\\"\n    Using \"Dnu\" task from assembly \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\Web\\..\\DNX\\Microsoft.DNX.Tasks.dll\".\n    Environment variables:\n    Path=D:\\Development\\dotnet\\ExampleProj\\ExampleProj.Kitchen\\node_modules\\.bin;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\extensions\\microsoft\\web tools\\external;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\CommonExtensions\\Microsoft\\TeamFoundation\\Team Explorer\\NativeBinaries\\x86;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\1.0\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files (x86)\\Git\\cmd;C:\\Program Files (x86)\\GtkSharp\\2.12\\bin;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\ManagementStudio\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Skype\\Phone\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files (x86)\\Microsoft Emulator Manager\\1.0\\;C:\\Program Files (x86)\\nodejs\\;C:\\Program Files\\Microsoft\\Web Platform Installer\\;C:\\Users\\Gabriel\\.dnx\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\1.0\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files (x86)\\Git\\cmd;C:\\Program Files\\nodejs\\;C:\\Python27\\;C:\\Python27\\Scripts;C:\\Users\\Gabriel\\AppData\\Roaming\\npm\";C:\\Users\\Gabriel\\AppData\\Roaming\\npm;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\extensions\\microsoft\\web tools\\external\\.git\n    C:\\Users\\Gabriel\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta6\\bin\\dnu.cmd publish \"D:\\Development\\dotnet\\ExampleProj\\ExampleProj.Kitchen\" --out \"C:\\Users\\Gabriel\\AppData\\Local\\Temp\\PublishTemp\" --configuration Debug --runtime dnx-clr-win-x86.1.0.0-beta6 --wwwroot-out \"wwwroot\" --quiet\n    Microsoft .NET Development Utility CLR-x86-1.0.0-beta6-12256\n    Copying to output path C:\\Users\\Gabriel\\AppData\\Local\\Temp\\PublishTemp\n    Time elapsed 00:00:03.1951602\nDone building project \"ExampleProj.Kitchen.xproj\" -- FAILED.\nSuccess:\n`Project \"ExampleProj.Kitchen.xproj\" (MSDeployPublish target(s)):\n    Building with tools version \"14.0\".\n    Task \"Error\" skipped, due to false condition; ( '$(_InvalidConfigurationError)' == 'true' ) was evaluated as ( '' == 'true' ).\n    Task \"Warning\" skipped, due to false condition; ( '$(_InvalidConfigurationWarning)' == 'true' ) was evaluated as ( '' == 'true' ).\n    Configuration=Debug\n    Platform=AnyCPU\n    Task \"Error\" skipped, due to false condition; ('$(OutDir)' != '' and !HasTrailingSlash('$(OutDir)')) was evaluated as ('..\\artifacts\\bin\\ExampleProj.Kitchen\\' != '' and !HasTrailingSlash('..\\artifacts\\bin\\ExampleProj.Kitchen\\')).\n    Task \"Error\" skipped, due to false condition; ('$(BaseIntermediateOutputPath)' != '' and !HasTrailingSlash('$(BaseIntermediateOutputPath)')) was evaluated as ('..\\artifacts\\obj\\ExampleProj.Kitchen\\' != '' and !HasTrailingSlash('..\\artifacts\\obj\\ExampleProj.Kitchen\\')).\n    Task \"Error\" skipped, due to false condition; ('$(IntermediateOutputPath)' != '' and !HasTrailingSlash('$(IntermediateOutputPath)')) was evaluated as ('..\\artifacts\\obj\\ExampleProj.Kitchen\\Debug\\' != '' and !HasTrailingSlash('..\\artifacts\\obj\\ExampleProj.Kitchen\\Debug\\')).\n    Using \"GetRuntimeToolingPath\" task from assembly \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.Tasks.dll\".\n    Task \"Error\" skipped, due to false condition; (!Exists('$(RuntimeToolingExe)')) was evaluated as (!Exists('C:\\Users\\Gabriel.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta6\\bin\\dnx.exe')).\n    Using \"DefaultExternalToolsPath\" task from assembly \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.Tasks.dll\".\n    Using \"GetRuntimeVersion\" task from assembly \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.Tasks.dll\".\n    rmdir /S /Q \"C:\\Users\\Gabriel\\AppData\\Local\\Temp\\PublishTemp\\\"\n    Using \"Dnu\" task from assembly \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\Web..\\DNX\\Microsoft.DNX.Tasks.dll\".\n    Environment variables:\n    Path=D:\\Development\\dotnet\\ExampleProj\\ExampleProj.Kitchen\\node_modules.bin;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\extensions\\microsoft\\web tools\\external;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\CommonExtensions\\Microsoft\\TeamFoundation\\Team Explorer\\NativeBinaries\\x86;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\1.0\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files (x86)\\Git\\cmd;C:\\Program Files (x86)\\GtkSharp\\2.12\\bin;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\ManagementStudio\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Skype\\Phone\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files (x86)\\Microsoft Emulator Manager\\1.0\\;C:\\Program Files (x86)\\nodejs\\;C:\\Program Files\\Microsoft\\Web Platform Installer\\;C:\\Users\\Gabriel.dnx\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\1.0\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files (x86)\\Git\\cmd;C:\\Program Files\\nodejs\\;C:\\Python27\\;C:\\Python27\\Scripts;C:\\Users\\Gabriel\\AppData\\Roaming\\npm\";C:\\Users\\Gabriel\\AppData\\Roaming\\npm;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\extensions\\microsoft\\web tools\\external.git\n    C:\\Users\\Gabriel.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta6\\bin\\dnu.cmd publish \"D:\\Development\\dotnet\\ExampleProj\\ExampleProj.Kitchen\" --out \"C:\\Users\\Gabriel\\AppData\\Local\\Temp\\PublishTemp\" --configuration Debug --runtime dnx-clr-win-x86.1.0.0-beta6 --wwwroot-out \"wwwroot\" --quiet\n    Microsoft .NET Development Utility CLR-x86-1.0.0-beta6-12256\n    Copying to output path C:\\Users\\Gabriel\\AppData\\Local\\Temp\\PublishTemp\n    Time elapsed 00:00:03.6036367\n    Target \"GenerateSkipRuleForAppData\" skipped, due to false condition; ($(ExcludeApp_Data) == 'true') was evaluated as (False == 'true').\n    Project \"ExampleProj.Kitchen.xproj\" (VSMSDeployPublish target(s)):\n        Building with tools version \"14.0\".\n        Target \"_CheckForInvalidConfigurationAndPlatform\" skipped. Previously built successfully.\n        Target \"VSMSDeployPublish\" skipped, due to false condition; ( '$(FilePreview)' == 'true' Or '$(UsePowerShell)' != 'true') was evaluated as ( '' == 'true' Or 'True' != 'true').\n    Done building project \"ExampleProj.Kitchen.xproj\".\n    Project \"ExampleProj.Kitchen.xproj\" (PowerShellPublish target(s)):\n        Building with tools version \"14.0\".\n        Target \"_CheckForInvalidConfigurationAndPlatform\" skipped. Previously built successfully.\n        Using \"GetAllPublishProperties\" task from assembly \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\Web\\Microsoft.Web.Publishing.Tasks.dll\".\n        Using \"InvokePowerShell\" task from assembly \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\Web\\Microsoft.Web.Publishing.Tasks.dll\".\n        Publishing with publish method [MSDeploy]\n        Executing command [\"C:\\Program Files (x86)\\IIS\\Microsoft Web Deploy V3\\msdeploy.exe\" -source:IisApp='C:\\Users\\Gabriel\\AppData\\Local\\Temp\\PublishTemp\\wwwroot' -dest:IisApp='ExampleProjKitchenDev',ComputerName='https://ExampleProjkitchendev.scm.azurewebsites.net/msdeploy.axd',UserName='$ExampleProjKitchenDev',Password='{PASSWORD-REMOVED-FROM-LOG}',IncludeAcls='False',AuthType='Basic' -verb:sync -enableLink:contentLibExtension  -enableRule:DoNotDeleteRule -retryAttempts:2]\n        Info: Using ID '2b815b5a-de70-43aa-93c8-d2ac459beb26' for connections to the remote server.\nInfo: Using ID 'd6474275-87fd-4552-b0ce-71f69e8c81a3' for connections to the remote server.\nInfo: Updating file (ExampleProjKitchenDev\\web.config).\nInfo: Updating file (ExampleProjKitchenDev\\global.json).\nInfo: Updating file (ExampleProjKitchenDev\\src\\ExampleProj.Kitchen\\project.json).\nInfo: Updating file (ExampleProjKitchenDev\\src\\ExampleProj.Kitchen\\project.lock.json).\nTotal changes: 4 (0 added, 0 deleted, 4 updated, 0 parameters changed, 119388 bytes copied)\nDone building project \"ExampleProj.Kitchen.xproj\".\nDone building project \"ExampleProj.Kitchen.xproj\".`\n. ",
    "janpieterz": "I have replicated this using a normal file system publish as well, so it seems like it's not purely an Azure publish.\n. ",
    "Sandman83": "dnx run\ngives\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\n   at Microsoft.Cci.MetadataWriter.GetRowCounts()\n   at Microsoft.Cci.MetadataWriter.PopulateTables(Int32[] methodBodyRvas, BlobBuilder mappedFieldDataWriter, BlobBuilder resourceWriter)\n   at Microsoft.Cci.MetadataWriter.SerializeMetadataAndIL(BlobBuilder metadataWriter, BlobBuilder debugMetadataWriterOpt, PdbWriter nativePdbWriterOpt, BlobBuilder ilWriter, BlobBuilder mappedFieldDataWriter, BlobBuilder managedResourceDataWriter, Int32 methodBodyStreamRva, Func`2 calculateMappedFieldDataStreamRva, Int32& moduleVersionIdOffsetInMetadataStream, Int32& entryPointToken, MetadataSizes& metadataSizes)\n   at Microsoft.Cci.PeWriter.WritePeToStream(MetadataWriter mdWriter, Func`1 getPeStream, Func`1 getPortablePdbStreamOpt, PdbWriter nativePdbWriterOpt)\n   at Microsoft.CodeAnalysis.Compilation.SerializeToPeStream(CommonPEModuleBuilder moduleBeingBuilt, EmitStreamProvider peStreamProvider, EmitStreamProvider pdbStreamProvider, Func`1 testSymWriterFactory, DiagnosticBag diagnostics, Boolean metadataOnly, CancellationToken cancellationToken)\n   at Microsoft.CodeAnalysis.Compilation.Emit(EmitStreamProvider peStreamProvider, EmitStreamProvider pdbStreamProvider, EmitStreamProvider xmlDocumentationStreamProvider, EmitStreamProvider win32ResourcesStreamProvider, IEnumerable`1 manifestResources, EmitOptions options, CompilationTestData testData, Func`1 getHostDiagnostics, CancellationToken cancellationToken)\n   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, CancellationToken cancellationToken)\n   at Microsoft.Dnx.Compilation.CSharp.RoslynProjectReference.Load(IAssemblyLoadContext loadContext)\n   at Microsoft.Dnx.Compilation.CompilationEngine.LoadProject(Project project, String aspect, IAssemblyLoadContext loadContext)\n   at Microsoft.Dnx.Runtime.Loader.ProjectAssemblyLoader.Load(AssemblyName assemblyName, IAssemblyLoadContext loadContext)\n   at Microsoft.Dnx.Runtime.Loader.ProjectAssemblyLoader.Load(AssemblyName assemblyName)\n   at Microsoft.Dnx.Host.LoaderContainer.Load(AssemblyName assemblyName)\n   at Microsoft.Dnx.Host.DefaultLoadContext.LoadAssembly(AssemblyName assemblyName)\n   at Microsoft.Dnx.Runtime.Loader.AssemblyLoaderCache.GetOrAdd(AssemblyName name, Func`2 factory)\n   at Microsoft.Dnx.Runtime.Loader.LoadContext.Load(AssemblyName assemblyName)\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName(AssemblyName assemblyName)\n   at Microsoft.Dnx.Runtime.Loader.LoadContext.Microsoft.Dnx.Runtime.IAssemblyLoadContext.Load(AssemblyName assemblyName)\n   at Microsoft.Dnx.Runtime.AssemblyLoadContextExtensions.Load(IAssemblyLoadContext loadContext, String name)\n   at Microsoft.Dnx.Runtime.DefaultHost.GetEntryPoint(String applicationName)\n   at Microsoft.Dnx.ApplicationHost.Program.ExecuteMain(DefaultHost host, String applicationName, String[] args)\n   at Microsoft.Dnx.ApplicationHost.Program.Main(String[] args)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Dnx.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   at Microsoft.Dnx.Host.Bootstrapper.RunAsync(List`1 args, IRuntimeEnvironment env, FrameworkName targetFramework)\n   at Microsoft.Dnx.Host.RuntimeBootstrapper.ExecuteAsync(String[] args, FrameworkName targetFramework)\n   at Microsoft.Dnx.Host.RuntimeBootstrapper.Execute(String[] args, FrameworkName targetFramework)\n. ",
    "trotyl": "The same System.IndexOutOfRangeException: Index was outside the bounds of the array. problem as above with the exact procedure in https://github.com/dotnet/coreclr/blob/master/Documentation/install/get-dotnetcore-dnx-osx.md\nWith dnvm 1.0.0-beta7-10410, dnx coreclr 1.0.0-beta7-12364.\n. ",
    "jbogard": "Heyoo I'm going to give this one a shot, people keep asking for .NET 3.5 support for AutoMapper\nproject.json all the things!\n. ",
    "4nonym0us": "I'm having the same issue: the error message Unable to locate Microsoft.CSharp >= 4.0.1-beta-23225 occurs when i try to run dnu restore with following feeds:\n<add key=\"AspNetVNext\" value=\"https://www.myget.org/F/aspnetvnext/api/v2\" />\n<add key=\"NuGet\" value=\"https://nuget.org/api/v2/\" />\n<add key=\"Roslyn\" value=\"https://www.myget.org/F/roslyn-nightly/\" />\n<add key=\"DotNet\" value=\"https://www.myget.org/F/dotnet-corefx/\" />\nMy dependencies are:\n```\n  \"dependencies\": {\n    \"AutoMapper\": \"4.0.0-\",\n    \"EntityFramework.Commands\": \"7.0.0-beta7-\",\n    \"EntityFramework.Core\": \"7.0.0-beta7-\",\n    \"EntityFramework.Relational\": \"7.0.0-beta7-\",\n    \"EntityFramework.SqlServer\": \"7.0.0-beta7-\",\n    \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-beta7-\",\n    \"Microsoft.AspNet.Authentication.Cookies\": \"1.0.0-beta7-\",\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-beta7-\",\n    \"Microsoft.AspNet.Diagnostics.Entity\": \"7.0.0-beta7-\",\n    \"Microsoft.AspNet.Hosting\": \"1.0.0-beta7-\",\n    \"Microsoft.AspNet.Identity\": \"3.0.0-beta7-\",\n    \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-beta7-\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-beta7-\",\n    \"Microsoft.AspNet.Mvc.Core\": \"6.0.0-beta7-\",\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta7-\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta7-\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-beta7-\",\n    \"Microsoft.AspNet.WebApi.Client\": \"5.2.3\",\n    \"Microsoft.Dnx.Runtime.Abstractions\": \"1.0.0-beta7-\",\n    \"Microsoft.Framework.CodeGenerators.Mvc\": \"1.0.0-beta7-\",\n    \"Microsoft.Framework.Configuration\": \"1.0.0-beta7-\",\n    \"Microsoft.Framework.Configuration.Json\": \"1.0.0-beta7-\",\n    \"Microsoft.Framework.Logging.Console\": \"1.0.0-beta7-\"\n  },\n  \"frameworks\": {\n    \"dnx451\": { },\n    \"dnxcore50\": {\n      \"dependencies\": {\n        \"System.Collections\": \"4.0.11-\",\n        \"System.Linq\": \"4.0.1-\",\n        \"System.Reflection\": \"4.1.0-\",\n        \"System.Runtime\": \"4.0.21-\",\n        \"System.Threading\": \"4.0.11-*\"\n      }\n}\n\n}\n```\ndnu restore --no-cache works fine if i use the following feeds:\n<add key=\"AspNetLiteRelease\" value=\"https://www.myget.org/F/aspnetliterelease/api/v2/\" />\n<add key=\"NuGet\" value=\"https://nuget.org/api/v2/\" />\n<add key=\"Roslyn\" value=\"https://www.myget.org/F/roslyn-nightly/\" />\n<add key=\"DotNet\" value=\"https://www.myget.org/F/dotnet-corefx/\" />\nbut I receive the following error when I try to run the application:\n\nIt looks like some dependencies are still missing or they have incorrect version number.\nAm I using the wrong feeds?\n. ",
    "Antaris": "@davidfowl If this makes V1, it would be epic. the way in which ICompileModule opens up new scenarios is amazing - it's a hidden gem but a real killer feature of the DNX platform. Couple of the scenarios I am hoping to use it with:\n- Build-time discovery of extensibility modules in for a CMS framework - no more System.Reflection runtime discovery - find them, generate some wire-up code and you're done :-)\n- Build-time generation of database script migration classes - per module assembly, taking versioning into consideration\n- Build-time discovery of a entity type configurations to compose per module EF database contexts with shared types.\nI've been prototyping the first two and am very happy with the results - the latter I haven't look at yet, but it's all thanks to ICompileModule!\nNow if only we could deploy them as NuGet packages, it would make it even simpler for consumers :-)\n. I'm also finding this issue, both times I last performed an update (beta5 -> beta6, beta6 -> beta7), my compile modules seems to have stopped. Can't remember how I resolved it the first time either.\nThrough testing, I generally place a Debugger.Launch() in my BeforeCompileContext method, and this usually causes the Debugger Selector to launch on build, but this not even being fired :-/\nThis mechanism is enormously powerful, but seemingly very fragile to get working consistently too\n. @davidfowl The Entropy sample works fine, so it's likely just a references issue. In my instance, I am targeting only dnx46 and am using the \"Microsoft.Dnx.Compilation.CSharp.Abstractions\": \"1.0.0-beta7\" package in my samples console app. My sample references another project in the same solution that contains the abstract compile module (akin to how the RazorPreCompileModule is packaged).\nI had just discovered a package change that I needed, from:\n\"dependencies\": {\n  \"Microsoft.Framework.Runtime.Roslyn\": \"1.0.0-beta6\"\n}\nto\n\"dependencies\": {\n  \"Microsoft.Dnx.Compilation.CSharp.Abstractions\": \"1.0.0-beta7\"\n}\nBut now the compilation fails (progress :-)). Here is my example compile module:\n```\nnamespace SampleConsole.compiler.preprocess\n{\n    using Microsoft.Dnx.Compilation.CSharp;\npublic class DiscoverModulesCompileModule : Fx.ModulesCompileModule\n{\n    public override void BeforeCompile(BeforeCompileContext context)\n    {\n        System.Diagnostics.Debugger.Launch();\n\n        base.BeforeCompile(context);\n    }\n}\n\n}\n```\nAnd gives the following set of compile errors:\nSeverity    Code    Description Project File    Line    Source\nError   CS0246  The type or namespace name 'Fx' could not be found (are you missing a using directive or an assembly reference?)    SampleConsole   C:\\vnext\\projects\\Framework\\samples\\SampleConsole\\compiler\\preprocess\\DiscoverModulesCompileModule.cs   5   Build\nSeverity    Code    Description Project File    Line    Source\nError   CS0234  The type or namespace name 'Dnx' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)   SampleConsole   C:\\vnext\\projects\\Framework\\samples\\SampleConsole\\compiler\\preprocess\\DiscoverModulesCompileModule.cs   3   Build\nSeverity    Code    Description Project File    Line    Source\nError   CS0246  The type or namespace name 'BeforeCompileContext' could not be found (are you missing a using directive or an assembly reference?)  SampleConsole   C:\\vnext\\projects\\Framework\\samples\\SampleConsole\\compiler\\preprocess\\DiscoverModulesCompileModule.cs   7   Build\nSeverity    Code    Description Project File    Line    Source\nError   CS0115  'DiscoverModulesCompileModule.BeforeCompile(BeforeCompileContext)': no suitable method found to override    SampleConsole   C:\\vnext\\projects\\Framework\\samples\\SampleConsole\\compiler\\preprocess\\DiscoverModulesCompileModule.cs   7   Build\nWhich suggests the compiler is not picking up the required references?\nThe reference project (that contains the actual implementation) in the same solution does compile fine.\nHappy to share my repo with you if have any time to look into it.\n. @davidfowl My project structure is as follows:\n/samples/SampleConsole/project.json\n/samples/...other samples\n/src/Fx.Core.Contracts/project.json\n/src/...other modules\n/test/...other tests\n/global.json\nMy sample project.json is:\n{\n    \"authors\": [ \"\" ],\n    \"commands\": {\n        \"SampleConsole\": \"SampleConsole\"\n    },\n    \"dependencies\": {\n        \"EntityFramework.InMemory\": \"7.0.0-beta7\",\n        \"Microsoft.Dnx.Compilation.CSharp\": \"1.0.0-beta7\",\n        \"Microsoft.Dnx.Compilation.CSharp.Abstractions\": \"1.0.0-beta7\",\n        \"Microsoft.Framework.Configuration\": \"1.0.0-beta7\",\n        \"Microsoft.Framework.Configuration.Json\": \"1.0.0-beta7\",\n        \"Microsoft.Framework.Configuration.EnvironmentVariables\": \"1.0.0-beta7\",\n        \"Fx.Common\": \"\",\n        \"Fx.Core.Contracts\": \"\",\n        \"Fx.Core\": \"\",\n        \"Fx.Data.Contracts\": \"\",\n        \"Fx.Data\": \"\",\n        \"Fx.Hosting\":  \"\",\n        \"Fx.Logging.Contracts\": \"\",\n        \"Fx.Logging\": \"\",\n        \"Fx.Security.Contracts\": \"\",\n        \"Fx.Security\": \"\",\n        \"Fx.Web.Contracts\": \"\"\n    },\n    \"description\": \"\",\n    \"frameworks\": {\n        \"dnx46\": {\n            \"frameworkAssemblies\": {\n                \"System.Runtime\": \"\",\n                \"System.Threading.Tasks\": \"\",\n                \"System.Text.Encoding\": \"\"\n            }\n        }\n    },\n    \"licenseUrl\": \"\",\n    \"projectUrl\": \"\",\n    \"tags\": [ \"\" ],\n    \"version\": \"1.0.0-*\"\n}\nAnd my Fx.Core.Contracts module project.json is:\n{\n    \"authors\": [ \"Fresh Egg\" ],\n    \"dependencies\": {\n      \"Microsoft.Dnx.Compilation.CSharp.Abstractions\": \"1.0.0-beta7\",\n      \"Microsoft.Framework.DependencyInjection.Abstractions\": \"1.0.0-beta7\",\n      \"Fx.Common\": \"\"\n    },\n    \"description\": \"Provides core interfaces, abstractions and types consumed by the Framework\",\n    \"frameworks\": {\n        \"dnx46\": {\n            \"frameworkAssemblies\": {\n                \"System.Runtime\": \"\",\n                \"System.Threading.Tasks\": \"\",\n                \"System.Text.Encoding\": \"\"\n            }\n        }\n    },\n    \"licenseUrl\": \"\",\n    \"projectUrl\": \"\",\n    \"tags\": [ \"core\" ],\n    \"version\": \"1.0.0-*\"\n}\nMy global.json is:\n{\n  \"projects\": [ \"src\", \"samples\", \"test\" ],\n  \"sdk\": {\n    \"version\":  \"1.0.0-beta7\"\n  }\n}\nMy active DNX is 1.0.0-beta7-clr and I have no defaults overridden in either the Project properties.\n@tuespetre One thing to check, in pre 1.0.0-beta7, I was using references to Microsoft.Framework.Runtime.Roslyn, but this is now been moved/renamed as Micorosft.Dnx.Compilation.CSharp.Abstractions for the ICompileModule, I guess that would be important, as the newer DNX version won't be using the older package, but your code will still compile against that older package - hence no ICompileModule execution, as technically, you're now using a different interface contract.\n. @davidfowl No, Fx.Core.Contracts has the Fx.ModulesCompileModule code in.\n. @davidfowl Sure is, Fx.ModulesCompileModule belongs to Fx.Core.Contracts, and is abstract. The SampleConsole.compiler.preprocess.DiscoverModulesCompileModule which inherits from Fx.ModulesCompileModule, belongs to SampleConsole, which references it.\nI am happy to push my code to GitHub if that makes it easier to describe?\n. @davidfowl  I'll try and make a reduced example :-)\n. @davidfowl  Minimal repo is here, I've stripped out a lot of my core framework code. Cheers for looking into this by the way, much appreciated!\nI'm expecting it's just a really silly issue of mine!\n. @davidfowl Yeah, I accidentally left that in the project.json, I've since removed it from the example. Interestingly, when I run dnu build, it appears to work for me also, but when I build from  VS, it doesn't.\n. @davidfowl Cheers for looking at it, glad it's not related to my machine config. Hopefully not anything major, will keep an eye on this thread. I owe you a beer.\n. @davidfowl Confirm fixed my issue, thanks for that :-). Is there anything that can be done to make it a little more obvious for devs, or have I missed something obvious in VS? \n. What is a use case for disabling this check as I can't really think of any myself?\n. This can probably be closed as when RC2 drops compile modules may not exist until Roslyn supports then directly.\n. ",
    "LorenDorez": "I am still having issues with it picking up net40-client. Im using a nuget Package for CsvHelper by John Close and Project.json keeps referencing the net20 and not the net40-client\n. I am working on a new MVC6 Project and when i add the nuget package \"CsvHelper\": \nIf i look at the porject.lock.json file it appears DNX is referencing the net20 assemblies for CsvHelper rather than the net40-client one. If i manually edit the project.lock.json file the things work but only until the project.lock.json needs to rebuild\nBelow is an example of the project.lock.json file for CsvHelper\n```\n \"CsvHelper/2.13.2\": {\n    \"type\": \"package\",\n    \"compile\": {\n      \"lib/net20/CsvHelper.dll\": {}\n    },\n    \"runtime\": {\n      \"lib/net20/CsvHelper.dll\": {}\n    }\n\"CsvHelper/2.13.2\": {\n  \"type\": \"package\",\n  \"sha512\":      \"Onpo2LIa3vRTCdsgotgMj9+8VzcCwv0vLPpLf72qbJKsHJFnvW+TkgB5hfcO0l3eqG34U+yDpwgs1WHLTKp3HA==\",\n  \"files\": [\n    \"CsvHelper.2.13.2.nupkg\",\n    \"CsvHelper.2.13.2.nupkg.sha512\",\n    \"CsvHelper.nuspec\",\n    \"lib/net20/CsvHelper.dll\",\n    \"lib/net20/CsvHelper.pdb\",\n    \"lib/net20/CsvHelper.xml\",\n    \"lib/net35-client/CsvHelper.dll\",\n    \"lib/net35-client/CsvHelper.pdb\",\n    \"lib/net35-client/CsvHelper.xml\",\n    \"lib/net40-client/CsvHelper.dll\",\n    \"lib/net40-client/CsvHelper.pdb\",\n    \"lib/net40-client/CsvHelper.xml\",\n    \"lib/portable-net40+sl5+win8+wpa+wp8/CsvHelper.dll\",\n    \"lib/portable-net40+sl5+win8+wpa+wp8/CsvHelper.pdb\",\n    \"lib/portable-net40+sl5+win8+wpa+wp8/CsvHelper.xml\"\n  ]\n},\n```\n. @davidfowl Any update?\n. ",
    "cda-1": "@davidfowl I have a little more info that might help.\nMy asp.net 5 rc1 project.json has:\njson\n  \"frameworks\": {\n    \"dnx451\": { }\n  }\nIf I copy the \"C:\\Users[your username].dnx\\packages\\CsvHelper\\2.13.5\\lib\\net40-client\" folder to\n\"C:\\Users[your username].dnx\\packages\\CsvHelper\\2.13.5\\lib\\dnx451\"\n...then the project.lock.json file is generated correctly. It's a dirty hack and I am wondering what the root of the problem is.\nI guess maybe it goes into the package folder looking for a folder than matches the framework I declared? Because if I copy the files I want into a folder called \"dnx451\" then these lines\njson\n\"compile\": {\n      \"lib/net20/CsvHelper.dll\": {}\n    },\n    \"runtime\": {\n      \"lib/net20/CsvHelper.dll\": {}\n    }\nchange to\njson\n\"compile\": {\n      \"lib/dnx451/CsvHelper.dll\": {}\n    },\n    \"runtime\": {\n      \"lib/dnx451/CsvHelper.dll\": {}\n    }\nand everything works!\n. This issue is closed and labeled as \"done\". We probably need to open a new one to get it looked at.\n. ",
    "kspearrin": "Having the same problem with the CsvHelper library.\n. Any update on how to fix this?\n. ",
    "neutmute": "Same issue, CsvHelper, rc1-final. project.lock.json below\n\"CsvHelper/2.13.5\": {\n        \"type\": \"package\",\n        \"compile\": {\n          \"lib/net20/CsvHelper.dll\": {}\n        },\n        \"runtime\": {\n          \"lib/net20/CsvHelper.dll\": {}\n        }\nWorkaround\nI worked around this by hacking the CsvHelper package to remove everything except the net40 libs and publishing it on myget\nFeed: https://www.myget.org/F/csvhelperdnx/api/v2\nPackage name: CsvHelper-dnx\n. ",
    "davidsh": "@JamesNK Does this exception only happen on Windows 7?  I looked at the WinHttpHandler code and I did discover one place where the requestHandle could be null and could throw this particular exception. The code path is such that it would be processing a previous exception.  I would like to repro the original problem to find out why/where the original exception is coming from.\n. ",
    "ShaneCourtrille": "I started running into this on Windows 7 as well.  It occurred after I did a dnvm upgrade -r coreclr.  Oddly enough I was able to resolve by doing a dnvm upgrade -r clr.  I then did a 2nd dnvm upgrade -r coreclr and now everything is good again...\n. ",
    "tushargupta51": "Can this be related? I am running a coreclr web application on mac using coreclr runtime. It builds fine using \"dnu build\" but when I start the application using \"dnx kestrel\" and loads the url (localhost:5002), it gives this exception:\n    Tushars-MacBook-Pro:WebApplication6 tushargupta$ dnx kestrel\nApplication started. Press Ctrl+C to shut down.\nUnhandled Exception: System.DllNotFoundException: Unable to load DLL 'winhttp.dll': The specified module could not be found.\n (Exception from HRESULT: 0x8007007E)\n   at Interop.WinHttp.WinHttpSetStatusCallback(SafeWinHttpHandle handle, WINHTTP_STATUS_CALLBACK callback, UInt32 notificationFlags, IntPtr reserved)\n   at System.Net.Http.WinHttpHandler.SetStatusCallback(SafeWinHttpHandle requestHandle, WINHTTP_STATUS_CALLBACK callback)\n   at System.Net.Http.WinHttpHandler.d__120.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.b__4(Object state)\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\n   at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\nlibc++abi.dylib: terminating with uncaught exception of type PAL_SEHException\nAbort trap: 6\nSame behavior is seen on linux too. I am using beta7 bits.\n. Thanks @moozzyk. Thats the exact issue I am hitting.\n. ",
    "benjamin-hodgson": "I'm experiencing this. @glennc Surely the fix is for dnu to not open so many files, rather than fiddle with environmental settings?\n. Oh, excellent :sweat_smile: I'll update to the dev version then. Thanks!\n. ",
    "nicolasr75": "Thanks for the quick help. I checked the environment variables but did not find the once you mention. Meanwhile I used the VS2015 Web Application template, updated it to beta 8 and tested that: it works, at least with 'web' on both computers. Kestrel gives me issues with libuv but that is a different topic...\nI had created my own test application at around beta 2. I had tried to update everything according to the announcements but something must now be different in comparison to the VS template.\nSo, I started with a fresh VS template, updated to beta 8, included all my files and now it works.\n. Yes, that is what I did: published the project with VS and selected as target DNX version: dnx-coreclr-win-x64.1.0.0-beta8-15564. Then I copied the published bundle to another Win10 test system and tried to run it with either kestrel/web, result:\nSystem.IO.DirectoryNotFoundException\nThen I copied all my {userhome}.dnx\\packages\\\nto the test systems user directory and suddenly it works. Why does the self-contained bundle try to access packages in the users dnx installation and not use the packages that it already contains?\nThe runtime is not the problem. The generated kestrel.cmd references the correct path:\n@\"%~dp0approot\\runtimes\\dnx-coreclr-win-x64.1.0.0-beta8-15564\\bin\\dnx.exe\"\n. C:\\Users\\Public\\Documents\\RSW\\Test\\MyApp>kestrel\nThe default servicing root does not exist.\nLoaded module: dnx.win32.coreclr.dll\nFound export: CallApplicationMain\nInformation: [DomainManager] Using CoreCLR\nInformation: [LoaderContainer]: Load name=Microsoft.Dnx.ApplicationHost, Culture=neutral, PublicKeyToken=null\nInformation: [PathBasedAssemblyLoader]: Loaded name=Microsoft.Dnx.ApplicationHost, Culture=neutral, PublicKeyToken=null in 2ms\nInformation: [Bootstrapper] Runtime Framework: DNXCore,Version=v5.0\nInformation: [LoaderContainer]: Load name=Microsoft.Dnx.Compilation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\nInformation: [PathBasedAssemblyLoader]: Loaded name=Microsoft.Dnx.Compilation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null in 0ms\nInformation: [LoaderContainer]: Load name=Microsoft.Dnx.Compilation.Abstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\nInformation: [PathBasedAssemblyLoader]: Loaded name=Microsoft.Dnx.Compilation.Abstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null in 0ms\nInformation: [LoaderContainer]: Load name=Microsoft.Dnx.Runtime, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\nInformation: [PathBasedAssemblyLoader]: Loaded name=Microsoft.Dnx.Runtime, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null in 1ms\nInformation: [DefaultHost]: Project path: C:\\Users\\Public\\Documents\\RSW\\Test\\MyApp\\approot\\src\\MyApp\nInformation: [DefaultHost]: Project root: C:\\Users\\Public\\Documents\\RSW\\Test\\MyApp\\approot\\src\\MyApp\nInformation: [DefaultHost]: Project configuration: Release\nInformation: [DefaultHost]: Packages path: C:\\Users\\Public\\Documents\\RSW\\Test\\MyApp\\approot\\src\\MyApp\\packages\nInformation: [ServicingIndex]: Servicing index not found at C:\\Program Files (x86)\\Microsoft DNX\\Servicing\\index.txt\nInformation: [Breadcrumbs] Breadcrumbs for servicing will not be written because the breadcrumbs folder (C:\\ProgramData\\Microsoft DNX\\BreadcrumbStore) does not\nexist.\nInformation: [LoaderContainer]: Load name=Microsoft.AspNet.Hosting, Culture=neutral, PublicKeyToken=null\nSystem.IO.DirectoryNotFoundException: The system cannot find the path specified. (Exception from HRESULT: 0x80070003)\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromPath(IntPtr ptrNativeAssemblyLoadContext, String ilPath, String niPath, ObjectHandleOnStack retAssembly)\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\n   at Microsoft.Dnx.Runtime.Loader.PackageAssemblyLoader.Load(AssemblyName assemblyName, IAssemblyLoadContext loadContext)\n   at Microsoft.Dnx.Host.LoaderContainer.Load(AssemblyName assemblyName)\n   at Microsoft.Dnx.Runtime.Loader.AssemblyLoaderCache.GetOrAdd(AssemblyName name, Func`2 factory)\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName(AssemblyName assemblyName)\n   at Microsoft.Dnx.ApplicationHost.DefaultHost.GetEntryPoint(String applicationName)\n   at Microsoft.Dnx.ApplicationHost.Program.ExecuteMain(DefaultHost host, String applicationName, String[] args)\n   at Microsoft.Dnx.ApplicationHost.Program.Main(String[] args)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Dnx.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   at Microsoft.Dnx.Host.Bootstrapper.RunAsync(List`1 args, IRuntimeEnvironmentenv, FrameworkName targetFramework)\n   at Microsoft.Dnx.Host.RuntimeBootstrapper.ExecuteAsync(String[] args, FrameworkName targetFramework)\n   at Microsoft.Dnx.Host.RuntimeBootstrapper.Execute(String[] args, FrameworkName targetFramework)\n. There is one in MyApp/approot\n{\n  \"sdk\": {\n    \"version\": \"1.0.0-beta8-15564\"\n  },\n  \"projects\": [\n    \"src\"\n  ],\n  \"packages\": \"packages\"\n}\nand one in MyApp\\approot\\src\\MyApp\n{\n    \"sdk\": {\n        \"version\": \"1.0.0-beta8-15564\"\n    },\n    \"packages\": \"packages\"\n}\nWhen I change the latter one to\n{\n    \"sdk\": {\n        \"version\": \"1.0.0-beta8-15564\"\n    },\n    \"packages\": \"C:\\\\Users\\\\Public\\\\Documents\\\\RSW\\\\Test\\\\MyApp\\\\approot\\\\packages\"\n}\nthe error is gone, although it then dies because of missing libuv but that's a different topic...\n. The second global.json came from playing with project groups/solutions in VS. Removing it solved the problem. Sorry for wasting your time, I should have tested this with a blank project...\n. ",
    "Illeris": "Same issue on Windows, providing a \".snk\" file in WithCryptoKeyFile:\nCSharpCompilationOptions compilationOptions = new CSharpCompilationOptions(Microsoft.CodeAnalysis.OutputKind.DynamicallyLinkedLibrary).WithCryptoKeyFile(String.IsNullOrEmpty(ca.AssemblySigningFile) ? null : ca.AssemblySigningFile);\n. ",
    "andreasandreou": "any idea when this will be available?\n. @anurse thank you, indeed you can include content using packInclude but there is still no way to get to import the content from package into the project which makes this pretty much useless.\n. thank you very much for the follow up @anurse, this is very good news, will track referenced issue.\n. ",
    "anuchandy": "+1\n. ",
    "marcind": "The dnu pack changes make sense but I think my proposal still has value because it gives me the ability to have a single command build process that gathers all the essential files I need to deploy an application into a single location. dnu pack only packages up the project itself, whereas dnu publish also packages up all the local libraries I might have referenced.\nI'll give a shot figuring out the scope of the required code changes. But it looks like @davidfowl has been making some significant refactorings in that area lately so I just want to make sure I don't conflict with whatever you guys might be planning.\n. Closing, since dnu is dead. Thanks for the consideration.. To round out the story of loading the runtime from the cache, it would be great to make it easier to use dnvm to install dnx runtimes into a machine-wide location.\nThe reason for this is when the app runs in IIS it will run in the context of a specific identity (tied to the app pool) which might not have the dnx installed (i.e. DNX_HOME and PATH set properly).\n. @davidfowl will using -Global and -Persistent apply to the whole system or just the user running the command?\n. Hmm, can't see [EnvironmentVariableTarget]::Machine being used anywhere in the dnvm.ps1 source. Only [EnvironmentVariableTarget]::User.\n. So I havn't thought about the new process model when hosting in IIS, but assuming you're running multiple app pools with different identities, setting the machine location would be necessary to make the global dnx location work.\n. I don't want all the app pools to share the DNX version. I want all the app pools to share the DNX runtime cache location. If I happen to have multiple apps targeting the same DNX version, then those binaries should be loaded from the same place.\nI agree that dnvm use wouldn't be of much use when configuring a deployment target, because I want the application to explicitly define which runtime it's targeting. The host machine should have no say in that. dnvm install -g is much useful in that regard.\nHere's how I want to script the deployment process for my apps\n1. My CI packages up just the application binaries and artifacts (no runtime, no library packages, but those references are explicitly declared in project.json or web.config or whatever) using dnu publish\n2. I get that package onto the target deployment box.\n3. I run dnvm install -g [app target runtime], which noops if the global cache already has the runtime\n4. I run dnu restore on the app to suck up missing library packags. These use a global package cache so I don't have to download the same packages over and over again.\n5. I point IIS at the app and run it, which might be using a different Identity, but I want it to still be able to resolve the runtime from the global runtime cache.\nIn general I want a model where a script driver pulls all the application artifacts onto the deployment host, based on what the application needs. I don't want to have to upload MSIs or whatever. If you want to wrap that script in an MSI, I guess that might be fine, but seems unnecessary. (do you get an ARP entry for every runtime? I don't care about that).\nI'm fine running dnvm elevated to get things bootstrapped.\n. It would also be great if you could allow a hook to customize what goes into a nuget package (i.e. during the pack command enable hooking the moment after the build finishes but before the package contents gets specified).\nSpecific scenario: I want to customize my primary package (i.e. not the sources package) so that it includes the pdb file, which I want to customize using https://github.com/GitTools/GitLink.\nIt looks like the biggest impediment at the moment is the fact that the \"postbuild\" script runs after the package contents has been set (see. https://github.com/aspnet/dnx/blob/1bb5a1d24fcd7d21d2278528c243e2b9f181c43d/src/Microsoft.Dnx.Tooling/Building/BuildManager.cs#L231). I would expected it to run immediately after the build/compile step, so that I can mangle the build output once \nSome alternatives would be to have specific hooks for building the \"source\" package (and maybe even disabling that source package builds - I don't need both if I've customized the primary one).\n. You do, but the sequence is:\n- prepack\n- prebuild\n- Compilation\n- Assembling list of things to go into package <- not really customizable, at least not based on files in the output directory.\n- postbuild\n- Generating package\n- postpack\nI could hook postpack, do a bunch of unzipping, munging, and rezipping. I guess this is where having the build process implemented in code makes it less flexible (vs something like a well-designed set of msbuild targets). But then again, my scenarios is not something people typically do.\n. I guess there's 2 scenarios here:\n1. Customize the build process - the postbuild step is probably sufficient, esp. with the project:BuildOutputDir context var.\n2. Customize package contents - this is hard, esp. if it's supposed to be based on dynamic content (i.e. the result of the build).\nI'll probably stick to an external step that happens after dnu pack, since that way I can share the logic among a number different projects more easily.\n. ",
    "lukemurray": "Hmm having not changed xunit I though it might be something dnx broke, but I'll see if using those versions fix it and post of xunit if not. Thanks.\n. Hmm having not changed xunit I though it might be something dnx broke, but I'll see if using those versions fix it and post of xunit if not. Thanks.\n. ",
    "daviatorstorm": "I have the same problem.\nVS 2015 Community\nNuGet 3.2.0\nCurrent package source https://nuget.org/api/v2\n. ",
    "GeXiaoguo": "in my case changing the package source to https://www.nuget.org/api/v2/ fixed the problem\nthe wrong config files look like below\n    \n\n. ",
    "lstratman": "Just saw these packages show up in NuGet.\n. ",
    "Netshroud": "I can't find 1.0.0-beta7-15517 or 1.0.0-beta8-15517. How can I go down to 15517?\n. ",
    "JerryBian": "@davidfowl alright, I have created issue in kestrel page.\n. ",
    "CoskunSunali": "(Deleted my previous comments which were not related to this issue, it was rather related to DNX Tooling https://github.com/aspnet/Tooling/issues/94#issuecomment-172149317)\n. Would be great to see this feature implemented, since it also is supported by NuGet.\n. Well, it seems that this one actually works at the moment. It was my bad trying with a wrong path.\nIt takes paths relative to the nuget.config file.\n. @gotvino, it does not work when VS tries to update your packages automatically. E.g.: you make a change to projects.json and save the file. You get plenty of exceptions.\nHowever, if you run dnu restore from the Package Manager Console, things work.\nI think that is because dnu restore command is run in the solution directory so it is able to find a relative path but when VS tries to restore the packages, it actually runs the process in VS directory. E.g.: C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\n. @davidfowl, I previously asked you if it was a good idea to use PlatformServices.Default static for ASP.NET apps and you said \"no\" in your comment at https://github.com/aspnet/dnx/issues/2990#issuecomment-152046852\nNow we all end up being have to use PlatformServices.Default if we need to access ILibraryManager and IAssemblyLoadContextAccessor.\nDo I get it wrong that we have to use PlatformServices.Default static (at least once during registration as you stated at https://github.com/aspnet/dnx/issues/3032#issuecomment-163691530) or if I am not wrong with what I understand, what has actually changed the teams opinion?\n. Sorry for posting my previous comment here by mistake. Just re-posting it at https://github.com/aspnet/Hosting/issues/514\n. Have you tried https://github.com/aspnet/dnx/issues/3032#issuecomment-163691530\n. What about setting the interface type explicitly?\n    services.AddSingleton(PlatformServices.Default.AssemblyLoadContextAccessor);\nDon't know if that would make a difference. Not in front of my computer so cannot really test it.\n. Sorry, nothing else comes to my mind. That is how I fixed the issue when I had it. Currently running on RC 2 without any issues.\n. Hi @GuardRex. Yes, I have double checked the version of the platform handler. It reads \"Microsoft HTTP Platform Handler 1.2\" on the Programs and Features screen.\nI have some of the Application Development roles enabled. Enabled items: .NET Extensibility 3.5, 4.5, ASP, ASP.NET 3.5, 4.5, CGI, ISAP Extensions, ISAPI filters. I certainly need some of these for hosting other websites on the same server.\nI came across to your well-written post yesterday and followed all the steps. With no luck unfortunately. The sections already seem to be unlocked.\n. @GuardRex Actually I have already stated it above - I have not made any changes to the path anywhere. I assumed pointing the website to the new path would be sufficient. Aint it?\nBTW, I just realized that an empty wwwroot folder keeps getting created automatically. I guess the first request creates that. \nOkay, so, if I need to change that path somewhere, is it the one I found in my website project's root, which is the one below? Do I need to change it somewhere else do you think?\nC:\\inetpub\\vhosts\\dev.suna.li\\approot\\packages\\My.Web.Application\\1.0.0\\root\\project.json\nI just updated that one to use httpdocs instead of wwwroot.\nAnd I got an error in the event viewer this time:\n```\nThe description for Event ID 1000 from source HttpPlatformHandler cannot be found. Either the component that raises this event is not installed on your local computer or the installation is corrupted. You can install or repair the component on the local computer.\nIf the event originated on another computer, the display information had to be saved with the event.\nThe following information was included with the event: \nProcess '4180' failed to start. Port = 30206, Error Code = '-2147023436'.\n``\n. Quite interesting because I have not changed anywwwrootvalue tohttpdocs` prior to you warning me and I was able to see the website via http://localhost:5000 :) \nI can see CSS and all other static files via http://localhost:5000 , no issues there. However, I cannot see any of those static files via http://dev.suna.li\nFor instance: http://dev.managinq.com/images/Banner-02-VS.png that just does not load.\nCurrently, the UseIISPlatformHandler line is above all others. It is the first middleware ever to be used.\nDo you think that might be a problem? I am asking cause I developed kind of a pluggable system where the modules are loaded based on if the user wants them to be enabled or not.\nThe reason having UseIISPlatformHandler above all was that it was always required, in my opinion.\n. BTW, no, I have no changed the wwwroot value within the development environment. Tooling usually has problems when you change the things from the default VS templates :) So not bothering with that.\nI have just changed the project.json file from the publish output folder, manually.\n. I am just trying everything with an empty project. The website template that comes with tooling beta 8, out of the box. I will just let you know so that I don't waste your time if the issue is specific to my pluggable system.\n. No luck with the beta 8 website template. I get the same issue.\nI have just tried changing the wwwroot folder to httpdocs within the development environment (in VS) and as I guessed, the tooling still has issues with that. For instance, the publish output folder does not publish the folder as httpdocs but as wwwroot no matter you changed it prior to publishing.\nJust to clarify, I changed the project.json NOT before publishing the website but after publishing the website. I published the website, went to the publish output, opened approot and found the website's folder, changed the project.json manually.\nIf you would like to see it for yourself via Team Viewer or something, please feel welcome.\n. Thank you for all the comments @GuardRex.\nHaving 15+ years of experience with ASP.NET and being awarded the ASP.NET MVP award for four times, I would also expect it to work but hey, it is still beta :+1: \nI don't have anything to provide you so that you can repro. I just created a new empty website, not the empty one but the one with that basic template. I have beta 8 tooling installed on top of VS 2015 Enterprise. I just rename the wwwroot folder to httpdocs. I change the wwwroot folder setting in project.json to httpdocs. I see that the VS updates the folder's icon accordingly. Then I just publish and the publish output still has wwwroot folder, which has only lib folder and web.config file inside it - all others are missing. E.g.: images.\nThe httpdocs folder itself is missing as well. That is probably an issue with task runner tasks. I don't know though.\nOnce again, I really appreciate your comments and doing your best to help me.\nLet's hope someone from MS jumps in. May be @Tratcher ?\n. @davidfowl I have not mastered the command line publishing yet :) Any assistance you may provide on what command I should execute in order to publish a project named WebApplication2?\nPlease note that I picked the \"Compile source files into NuGet packages\" when publishing, can that be an issue?\nhttpdocs displaying correctly: (please see the auto generated wwwroot folder also)\n\nproject.json file:\n\nPublish output root folder: (missing httpdocs)\n\nPublish output wwwroot folder:\n\n. @davidfowl That ended up with an error:\n```\nC:\\Users\\Coskun\\Documents\\Visual Studio 2015\\Projects\\WebApplication2\\src\\WebApplication2>dnu publish --no-source --runtime dnx-clr-x86.1.0.0-beta8\nMicrosoft .NET Development Utility CoreClr-x64-1.0.0-rc1-15838\nExecuting script 'prepublish' in project.json\n'npm' is not recognized as an internal or external command,\noperable program or batch file.\nThe 'prepublish' script failed with status code 1.\nC:\\Users\\Coskun\\Documents\\Visual Studio 2015\\Projects\\WebApplication2\\src\\WebApplication2>\n```\nI am having the RC1 versions of DNVM and runtime as default. Might that be an issue?\n```\nC:\\Users\\Coskun\\Documents\\Visual Studio 2015\\Projects\\WebApplication2\\src\\WebApplication2>dnvm alias\nAlias   Name                                Orphan\n-----   ----                                ------\ndefault dnx-coreclr-win-x64.1.0.0-rc1-15838  False\n```\nC:\\Users\\Coskun\\Documents\\Visual Studio 2015\\Projects\\WebApplication2\\src\\WebApplication2>dnvm\n   ___  _  ___   ____  ___\n  / _ \\/ |/ / | / /  |/  /\n / // /    /| |/ / /|_/ /\n/____/_/|_/ |___/_/  /_/\n.NET Version Manager v1.0.0-rc1-15528\n. Oops, I thought it was something to come with VS out of the box. Just installed npm, bower and gulp.\nDeploying now and will update you in a second.\n. Still no luck.\nThe publish worked this time. I can see httpdocs folder correctly being placed in the output folder. Command line publishing seems to handle the wwwroot folder change.\nHowever, the story with the localhost:5000 working after executing the web.cmd but the hosting via IIS not working remains. IIS does not even serve the static files.\nThat is me, my server or Kestrel, I have no clue :/\nFeel free to see the publish output for yourself: http://suna.li/webapplication2.zip\nI am also willing to allow RDP or Team Viewer to my server if you are willing to take a look.\n. Sure thing, even though it is a brand new project from the out of the box template that I have not touched at all (except the httpdocs change), please find it at https://github.com/csunali/WebApplication2ForKestrel \n. @vijayrkn \n\nFor publishing from VS with a different webroot folder - please change the below 2 properties in >pubxml(Properties\\PublishProfiles.pubxml)\n\nChanging those 2 properties helped getting the VS publish output have correct httpdocs content. Thank you for the feedback. :+1: \nThat, expectedly, does not fix the issue I am having with IIS but @davidfowl is having a look at it I guess.\nCheers guys.\n. Hi @Tratcher,\nThank you for your response. I just made sure that I have the necessary permissions (including modify and write permissions even though not sure if we need them there)\n\n\nThese two permissions inherit from the parent folder as you stated - the one containing httpdocs, approot and logs folders.\nI am totally out of ideas. Please feel welcome if you wish to RDP to my VPS and have a look for yourself.\nP.S.: It is relatively a very clean setup I have there. The server is about 2 weeks old and there are no software installed that could potentially conflict.\n. Are we not going to be able to access those anymore?\nI was using the IAssemblyLoadContextAccessor to load libraries from custom paths.\nSorry if I got the title wrong.\n. @davidfowl What I understand is that, you are getting rid of these interfaces in favor of providing consistent methods that we can do this on Core CLR? E.g.: Assembly.LoadFile?\nIf this is what you meant, I don't think I have any reason to ask for those interfaces being pushed back into the CLR.\n. I am not sure if it is related to these bits you are discussing here but I am curious as to how may I access referenced assemblies of an Assembly object in Core CLR.\nFull CLR provides the assembly.GetReferencedAssemblies method but I have no luck finding one for Core CLR.\nAny help would be highly appreciated.\nCheers\n. And unfortunately using ILibraryManager is not an option since the assembly is loaded manually using IAssemblyLoadContextAccessor.Default.LoadFile.\n. @davidfowl, yes. The issue you shared seems to be the right place to subscribe for notifications :)\nThank you!\n. ",
    "xasx": "I am seeing similar exceptions on Linux when trying out the HelloWorld sample.\n```\n$ dnu build --framework dnxcore50\nMicrosoft .NET Development Utility CoreCLR-x64-1.0.0-beta8-15585\nBuilding helloworld-dnxcore for DNXCore,Version=v5.0\nSystem.TypeInitializationException: The type initializer for 'libcrypto' threw an exception. ---> System.TypeInitializationException: The type initializer for 'CryptoInitializer' threw an exception. ---> System.DllNotFoundException: Unable to load DLL 'System.Security.Cryptography.Native': The specified module could not be found.\n (Exception from HRESULT: 0x8007007E)\n   at Interop.CryptoInitializer.EnsureOpenSslInitialized()\n   at Interop.CryptoInitializer..cctor()\n   --- End of inner exception stack trace ---\n   at Interop.CryptoInitializer.Initialize()\n   at Interop.libcrypto..cctor()\n   --- End of inner exception stack trace ---\n   at Interop.libcrypto.EVP_sha1()\n   at Internal.Cryptography.HashProviderDispenser.CreateHashProvider(String hashAlgorithmId)\n   at System.Security.Cryptography.SHA1.Implementation..ctor()\n   at System.Security.Cryptography.SHA1.Create()\n   at Roslyn.Utilities.SHA1CryptoServiceProvider..ctor()\n   at Microsoft.CodeAnalysis.CryptographicHashProvider.TryGetAlgorithm(SourceHashAlgorithm algorithmId)\n   at Microsoft.CodeAnalysis.Text.SourceText.CalculateChecksum(Stream stream, SourceHashAlgorithm algorithmId)\n   at Microsoft.CodeAnalysis.Text.SourceText.From(Stream stream, Encoding encoding, SourceHashAlgorithm checksumAlgorithm, Boolean throwIfBinaryDetected)\n   at Microsoft.Dnx.Compilation.CSharp.RoslynCompiler.<>c__DisplayClass15_0.b__0(CacheContext ctx)\n   at Microsoft.Dnx.Compilation.Caching.CacheExtensions.<>c__DisplayClass0_01.<Get>b__0(CacheContext ctx)\n   at Microsoft.Dnx.Compilation.Caching.Cache.CreateEntry(Object k, Func2 acquire)\n   at Microsoft.Dnx.Compilation.Caching.Cache.<>c__DisplayClass5_0.b__0()\n   at System.Lazy1.CreateValue()\n   at System.Lazy1.LazyInitValue()\n   at Microsoft.Dnx.Compilation.Caching.Cache.Get(Object key, Func2 factory)\n   at Microsoft.Dnx.Compilation.Caching.CacheExtensions.Get[T](ICache cache, Object key, Func2 factory)\n   at Microsoft.Dnx.Compilation.CSharp.RoslynCompiler.CreateSyntaxTree(String sourcePath, CSharpParseOptions parseOptions)\n   at Microsoft.Dnx.Compilation.CSharp.RoslynCompiler.GetSyntaxTrees(CompilationProjectContext project, IEnumerable1 sourceFiles, IEnumerable1 sourceReferences, CSharpParseOptions parseOptions, Boolean isMainAspect)\n   at Microsoft.Dnx.Compilation.CSharp.RoslynCompiler.CompileProject(CompilationProjectContext projectContext, IEnumerable1 incomingReferences, IEnumerable1 incomingSourceReferences, Func1 resourcesResolver)\n   at Microsoft.Dnx.Compilation.CSharp.RoslynProjectCompiler.CompileProject(CompilationProjectContext projectContext, Func1 referenceResolver, Func1 resourcesResolver)\n   at Microsoft.Dnx.Compilation.LibraryExporter.<>c__DisplayClass18_0.<ExportProject>b__0(CacheContext ctx)\n   at Microsoft.Dnx.Compilation.Caching.CacheExtensions.<>c__DisplayClass0_01.b__0(CacheContext ctx)\n   at Microsoft.Dnx.Compilation.Caching.Cache.CreateEntry(Object k, Func2 acquire)\n   at Microsoft.Dnx.Compilation.Caching.Cache.<>c__DisplayClass5_0.<AddEntry>b__0()\n   at System.Lazy1.CreateValue()\n   at System.Lazy1.LazyInitValue()\n   at Microsoft.Dnx.Compilation.Caching.Cache.Get(Object key, Func2 factory)\n   at Microsoft.Dnx.Compilation.Caching.CacheExtensions.GetT\n   at Microsoft.Dnx.Compilation.LibraryExporter.GetAllExports(String name, String aspect, Func2 libraryFilter)\n   at Microsoft.Dnx.Compilation.LibraryExporter.GetAllExports(String name, String aspect)\n   at Microsoft.Dnx.Compilation.LibraryExporter.GetAllExports(String name)\n   at Microsoft.Dnx.Tooling.BuildContext.ShowDependencyInformation(IReport report)\n   at Microsoft.Dnx.Tooling.BuildContext.Initialize(IReport report)\n   at Microsoft.Dnx.Tooling.BuildManager.BuildInternal(String projectPath)\n   at Microsoft.Dnx.Tooling.BuildManager.Build()\n   at Microsoft.Dnx.Tooling.BuildConsoleCommand.<>c__DisplayClass0_0.<Register>b__1()\n   at Microsoft.Dnx.Runtime.Common.CommandLine.CommandLineApplication.Execute(String[] args)\n   at Microsoft.Dnx.Tooling.Program.Main(String[] args)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Dnx.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   at Microsoft.Dnx.Host.Bootstrapper.RunAsync(List1 args, IRuntimeEnvironment env, FrameworkName targetFramework)\n   at Microsoft.Dnx.Host.RuntimeBootstrapper.ExecuteAsync(String[] args, FrameworkName targetFramework)\n   at Microsoft.Dnx.Host.RuntimeBootstrapper.Execute(String[] args, FrameworkName targetFramework)\nSystem.TypeInitializationException: The type initializer for 'CryptoInitializer' threw an exception. ---> System.DllNotFoundException: Unable to load DLL 'System.Security.Cryptography.Native': The specified module could not be found.\n (Exception from HRESULT: 0x8007007E)\n   at Interop.CryptoInitializer.EnsureOpenSslInitialized()\n   at Interop.CryptoInitializer..cctor()\n   --- End of inner exception stack trace ---\n   at Interop.CryptoInitializer.Initialize()\n   at Interop.libcrypto..cctor()\nSystem.DllNotFoundException: Unable to load DLL 'System.Security.Cryptography.Native': The specified module could not be found.\n (Exception from HRESULT: 0x8007007E)\n   at Interop.CryptoInitializer.EnsureOpenSslInitialized()\n   at Interop.CryptoInitializer..cctor()\n```\nSimilarly, dnx run prints pretty the same.\nHowever, the required files seem to be present:\n$ ls -1 ~/.dnx/runtimes/dnx-coreclr-linux-x64.1.0.0-beta8-15585/bin/lib/Microsoft.Dnx.Tooling\nMicrosoft.CSharp.dll\nMicrosoft.Dnx.Tooling.dll\nMicrosoft.Framework.NotNullAttribute.Sources.dll\nMicrosoft.Win32.Registry.dll\nNewtonsoft.Json.dll\nSystem.Diagnostics.Process.dll\nSystem.IO.UnmanagedMemoryStream.dll\nSystem.Linq.Parallel.dll\nSystem.Net.Http.dll\nSystem.Net.Http.Native.so\nSystem.Security.Cryptography.Native.so\nAny hint on how to get it working?\n. Removed ~/.dnx, started over with Getting started again.\nStill seeing the same error with 1.0.0-beta8-15586.\nI appreciate any help, especially for debugging this issue. BTW: I am running Fedora.\n. Okay, after following this guide it turns out that this Getting started: http://dotnet.github.io/core/getting-started/ is actually working with 1.0.0-beta7 but not with any 1.0.0-beta8-* build (just tested 15591).\n. Just verified that the guide actually works as written in a ubuntu:latest Docker container.\nMaybe mono or other libs' installation differs slightly on platforms?\nAt first sight I cannot see any difference in ~/.dnx/runtimes/dnx-coreclr-linux-x64.1.0.0-beta8-15618/bin/lib/Microsoft.Dnx.Tooling at least.\n. ",
    "Rwing": "me too, but I am running Centos 7\n. yum install openssl-devel libcurl libcurl-devel\non Centos\n. ",
    "sig9": "apt-get install libcurl4-openssl-dev\non ubuntu 14.10\n. ",
    "jonesnc": "Also seeing this error on Fedora 22 with version 1.0.0-beta8-15616 after following this guide and installing the dependencies listed above.\n. I was able to get it working by following this.\n. ",
    "tmat": ":)\n. Leave outputNameOverride unset. This property is only to support a backward compat quirk in csc.exe.\n. ",
    "MJomaa": "Like making dnu build --quiet standard?\n. ",
    "hkoestin": "@moozzyk & @muratg does this mean, that we do not get strong named assemblies of EntityFramework with beta 8?\nI am asking, because I would need to come up with a huge workaround otherwise :-1: \n. @muratg Thanks for the information. This is really unfortunate news for me now, as I would need signed assemblies :disappointed: You see any workaround for this? The problem is not the actual signing of the assembly, that I can do myself. It is more about the used [InternalsVisibleTo] attributes in the assemblies.\nSee https://github.com/aspnet/EntityFramework/issues/999#issuecomment-143674933\n. @muratg would be great if someone could ping me, if this is fixed. Then I would get a nightly build asap. When can I expect it to be fixed? A week? Two weeks? A month?\n. ",
    "xtmq": "Can I write plugin to get active projects and extract resource files from them?\nOr do you have plans to expose this?\n. Any updates here? Can I write plugin for that?\n. ",
    "tmds": "StackOverflow and the asp.net docs have taught me I can 'solve' the issue by setting:\nexport MONO_THREADS_PER_CPU=2000\nInput on how to use the v3 API and Azure CDN is still welcome.\n. I am building a project of my own: https://github.com/tmds/Tmds.SockJS\nThe master branch should work in a beta7 enviroment. It works fine on my machine, but for some reason the tests don't run on AppVeyor.\nThe error message is talking about missing dependencies (4.0.0.0), but I don't know what to do about it. Any pointers on what I should change or how I can debug are welcome.\n. I updated the license of my project to MIT, so you can have look now.\nI am not depending on an exact version of the Extensions package. I think there is an issue resolving 'any' 4.0.0.0 package.\nThe project.json of the Tests looks like this:\n{\n    \"description\": \"Tests for Tmds.SockJS\",\n    \"authors\": [ \"Tom Deseyn\" ],\n    \"dependencies\": {\n        \"xunit.runner.aspnet\": \"2.0.0-aspnet-beta7\",\n        \"Microsoft.AspNet.TestHost\": \"1.0.0-beta7\",\n        \"TestWebSite\": \"1.0.0-*\",\n        \"Microsoft.AspNet.WebSockets.Protocol\": \"1.0.0-beta7\"\n    },\n    \"commands\": {\n        \"test\": \"xunit.runner.aspnet\"\n    },\n    \"frameworks\": {\n        \"dnx451\": { }\n    }\n}\nFeel free to point out improvements to the project.json files in the solution.\n. LOL, AppVeyor seems to prefer an MIT License, now the project is building fine.\nThis build wasn't okay: https://ci.appveyor.com/project/tmds/tmds-sockjs/build/1.0.0-beta7-73\nThis build is: https://ci.appveyor.com/project/tmds/tmds-sockjs/build/1.0.0-beta7-74\n. @muratg FYI, I've had the problem again and created an AppVeyor issue.\n. @muratg looking a bit closer at the error message, I am wondering... System.Reflection.Extensions does that exist for DNX,Version=v4.5.1?\n. I cleared my .dnx/packages folder to see whether that would fix the problem. Now the NU1002 error has moved to another package.\n\n. @ericstj @davidfowl Can you reproduce this on your machines using this project:  https://github.com/tmds/Tmds.SockJS ?\n. @davidfowl \nDo you get NU1002 in dnx451?\nDoes the Core 5.0 part build?\nCan you investigate the problem further on your machine?\nBtw, I was in the middle of changing to beta8 when I encountered this issue, so there might be some loose ends.\n. @davidfowl are you able to reproduce the issue?\n. For me, even my AppVeyor build fails with these errors: https://ci.appveyor.com/project/tmds/tmds-sockjs/branch/master\n. I had a closer look at project.json.lock.and it seemed empty for the problematic package\n\"System.IO.FileSystem.Primitives/4.0.0\": {\n        \"type\": \"package\"\n      },\nSo I opened up the nuget package file under.dnx\\packages\\System.IO.FileSystem.Primitives\\4.0.0\\System.IO.FileSystem.Primitives.4.0.0:\n\nThis doesn't seem right ...\n@davidfowl @ericstj any thoughts?\n. @davidfowl ok thanks, the reason I chose this feed is because it is used on the beta8 tags: e.g. Mvc, WebSockets\nWhich feed should I use?\n. AppVeyor doesn't seem to find KoreBuild without it: https://ci.appveyor.com/project/tmds/tmds-sockjs/build/1.0.0-beta8-86\n. That doesn't seem to work: https://ci.appveyor.com/project/tmds/tmds-sockjs/build/1.0.0-beta8-88\nhttps://github.com/tmds/Tmds.SockJS/commit/8cec5dd5345bde2a9fbba3b1ab90a3df77b0aee7\n. @davidfowl what feed should I use to get KoreBuild 0.2.1-beta8?\n. @pranavkm this is the feed I shouldn't use to avoid the issue at the top of this thread (see @davidfowl's  https://github.com/aspnet/dnx/issues/3034#issuecomment-151696986)\nLooks like I am stuck in an issue-loop :)\nWhat feed should I use if I want to shop form the latest release (beta8)?\n. @pranavkm @Eilon restoring System.IO.FileSystem.Primitives from nuget got rid of the error for me. Please remove it from the aspnetmaster.\nNext issue: I have about 100 errors like this:\nError   CS1705  Assembly 'x' with identity 'xxx' uses 'System.Runtime, Version=4.0.21.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' which has a higher version than referenced assembly 'System.Runtime' with identity 'System.Runtime, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\nI searched 4.0.10.0 in the project.lock.json file but it was no where to be found. It did contain references to \"4.0.21-beta-23409\", \"4.0.20\" and \"4.0.0\".\nMy project.json has an explicit System.Runtime dependency: \"System.Runtime\": \"4.0.21-beta-*\".\nWhy do I get this error? And what can I do about it?\n. Thanks @Eilon @pranavkm @davidfowl, my project is building fine now!\n. Is this also NU1002 like https://github.com/aspnet/dnx/issues/3034 and https://github.com/aspnet/dnx/issues/3055? Or is it a different error code?\n. @davidfowl I have similar issues (see https://github.com/aspnet/dnx/issues/3034). My repo is at https://github.com/tmds/Tmds.SockJS. Can you have a look?\n. @davidfowl Removing the dependencies doesn't fix the issue. It gives me extra errors 'are you missing an assembly reference'.\nMy AppVeyor build is also suffering from these issues. For example it says:\nC:\\projects\\tmds-sockjs\\src\\Tmds.SockJS\\project.json(0,0): error NU1002: The dependency System.IO.FileSystem.Primitives 4.0.0 in project Tmds.SockJS does not support framework DNXCore,Version=v5.0.\nNuget tells me this package IS supported on DotNet 5.0.\n. Looks similar to my issue.\n. ",
    "Asshiah": "I think so.\nI had to add the dnx451 target to my project.json file in order for the ICompileModule to be processed.\nBefore that I was only targeting dnx46 and nothing occured.\nI could not even compile my project anymore as the ICompileModule complained about missing assemblies (Error message like Dnx namespace is not defined in Microsoft namespace, etc.) even though the assemblies where registered just fined in the project dependencies (nuget packages).\nSo yes it seems that at the moment we have to keep targeting dnx451 (other targets can be specified at the same time) for ICompileModules to work in Visual Studio (not in dnu build via command line).\n. ",
    "ddobric": "Here is how I get runtimes: dnvm install latest -r coreclr -arch ARM -u\n. When I take a look in global.json, which is produced in packaging process of X64, the architecture 'x86'. \n{\n  \"sdk\": {\n    \"version\": \"1.0.0-beta8-15120\",\n    \"runtime\": \"coreclr\",\n    \"architecture\": \"x86\"\n  },\n  \"projects\": [\n    \"src\"\n  ],\n  \"packages\": \"packages\"\n}\nVS build props indicates .NETCore arch: x86. I cannot change it on anything else. Use DNX SDK beta8-*. But, for build I do not use VS at all. Where is this value set internally? I would expect it in project.Json.\nThis dependency story is a night mare, guys :)\nFull packaging process should never produce output with missing references.\nIn general, I started with very trivial application which has a single line of code like: int a = 123;\nTo be able to compile this I added a reference to System.Runtime with some specific version.\nAll works fine, but on Pi2 doesn't work, because ARM runtime cannot resolve that runtime.\nThe I added reference with System.Runtime: \"\". This one does not build at all? Why?\nThen I used System.Console as reference instead of System.Runtime. That worked well. It obviously resolved implicitly correct reference to System.Runtime.\nBut there is a still question: What is the way to setup and resolve references manually and correctly?\nResolving process must be much more transparent as we have it in .NET SDK. There are still many, many cases ,when assemblies are not resolved and there is no way to find out why.\nThis issue should not be integrated in .netcore :) \n. 1.0.0-beta5       clr     x64          win\n       1.0.0-beta5       clr     x86          win\n       1.0.0-beta5       coreclr x64          win\n       1.0.0-beta5       coreclr x86          win\n       1.0.0-beta7-12364 coreclr arm          win\n       1.0.0-beta8-15120 clr     x64          win\n  *    1.0.0-beta8-15120 clr     x86          win             default\n       1.0.0-beta8-15120 coreclr x86          win\n. Pawel, ConsoleLib is just corenetlib created by VS template \"class library (package)\". \nMy issue is related to correct references in project.json. I add there reference (dependency) to some assembly and  then package the application. When packaging for ARM and executing it on PI2, the application fails with \"FileLoadException: Could not load file or assembly 'System.Runtime\"..\nThis is probably nothing about PI2. It is more about adding dependencies and packaging.\n1. How this error can happen after packaging process? Packing prepares all the app need. \n2.Why DNX crashes when starting on x64 (after packaging)? It is probably bug caused by build for x86 and executing on x64. But again, packaging should make things correct way or throw an error.\n3.What is the correct (best practices) way to peek right assemblies? (Using project.Json)\n. All worked fine, after I used following references:\n\"System.Collections\": \"4.0.10-beta-23019\",\n\"System.Console\": \"4.0.0-beta-23019\",\n\"System.Linq\": \"4.0.0-beta-23019\",\n\"System.Threading\": \"4.0.10-beta-23019\",\n\"Microsoft.CSharp\": \"4.0.0-beta-23019\"\nI obviously have used some libraries, which are right now not supported at ARM: dnx-coreclr-win-arm.1.0.0-beta7-12364\nBut after all, it still remain few questions/suggestions:\n1. How to find in which assembly (package) is which feature?\n   This is important when we know what feature we need, but do not know the package. For example: Where is implemented Console.WriteLine()?\n2. We need a more transparent way to enlist/document features implemented in the assembly(package).\n   This is important when we don't know features and looking for them in various assemblies (packages).\n   For example: I'm looking for output functionality in all packages and don't know that is implemented in Console.WriteLine().\n3. How find out which runtime does provide required functionalities?\n   This is the case which lead me to start this post. I solved 1 and 2, but failed after deployment, by trying to start application.\n   For example: dnu publish MUST check that all references CAN BE resolved. \nThanks for your help and hope these few suggestions summarize tooling and organizational gaps.\n:)\n. It works fine if I don't subst the root .thanks for hint.\n. ",
    "TheBlueSky": "@moozzyk, I have what you asked for ready on OneDrive... but, where do cool kids upload their 24MB stuff to these days? :)\nThe 7-zip file contains (1) dnu publish output in \"01.output\" folder, (2) a screen-shot, \"dnx.png\", is the error dialog when I ran \"kestrel.clr.cmd\" on Server 2012 R2, (3) dnx output after enabling the trace, SET DNX_TRACE=1, in \"1.dnx.trace.log\", and (4) dnx exception in \"2.dnx.exception.log\".\nNote that (1) I haven't touched the output in anyway except to create 2 batch files to run the application against the 2 runtimes, and (2) I'm developing and running the application on virtual machines.\n. ",
    "hoyanf": "Another possible solution\nProbable cause :-\n\nMicrosoft Visual Studio 2015 creates a dependency on the Universal CRT when applications are built by using the Windows 10 Software Development Kit (SDK). You can install this update on earlier Windows operating systems to enable these applications to run correctly.. \n",
    "yufeih": "Thanks @davidfowl , the globbing pattern works really nice. It might be better to update dnu build --help to give people a hint that it actually accepts a globbing pattern. dnu restore --help has a slightly more detailed explaination.\n. ",
    "hkesharia": "Thanks davidfowl, it is working Windows now. But still it's not working in Ubuntu 15.04. In Ubuntu 'dvn restore' throws error as shown in attached image.\n\n. I have followed as mentioned here \nhttp://dotnet.readthedocs.org/en/latest/getting-started/installing-core-linux.html\n. ",
    "ealsur": "@davidfowl  @davidebbo  Sure, here is the link of the repo I'm using to test: https://github.com/ealsur/meetup\nHere is a site that has Continuous Integration on Azure Web Apps pointed to that repo: http://gitgit.azurewebsites.net/\nI can run it locally with no problems, it blows up if I use the Continuous Integration through Kudu.\n. @davidfowl Glad you found it :) Is there anything I can do to help with it?\n. @davidfowl manually using VS Code, originally I had the problem that Kudu was detecting beta6 (https://github.com/projectkudu/kudu/issues/1663) when pulling the deployment script, @DamianEdwards recommended me to use the global.json, which worked (Kudu pulled beta7) but generated this other problem.\n. @davidebbo project.json can be on other folder other than the root and Kudu/VS will parse it? All the examples I've seen on the MVC repo (https://github.com/aspnet/Mvc/tree/dev/samples/MvcSample.Web) use it on the root.\n. @davidebbo Problem is that it works when using a Solution, if you create the web app using VS Code or pulling from Yeoman or the MVC sample repo there's no SLN file to specify that the project is on another folder, so your project.json ends up in the same folder than the global.json :(\n. @davidfowl If I get rid of global.json I end up with Kudu not detecting Beta7 and thinking it's Beta6.\n\n\nIn the meantime, I rollbacked the whole web app to Beta6 (no global.json) and it's working :)\n. @davidfowl Wouldn't I need an SLN / Xproj file for that? Thinking on the no-VisualStudio scenario and going on VS Code, does Kudu / DNX realize that my structure is different?\n. @davidfowl Did it (https://github.com/ealsur/meetup) and it works locally and deploying it to Azure, I didn't know that the project.json file got detected even if it was on a subfolder, learning something new everyday :) You rock.\n. Thanks for clarifying @muratg this was a beta5 app migrated to beta8.\n. ",
    "janvorli": "LGTM\n@moozzyk Please ignore the comment on the ExecuteAssembly, I have missed the fact that there were two commits.\n. ",
    "EGrishin": "@moozzyk, i have dnx.win32.dll in runtime folder.\n\n. @muratg 'dnx' and 'dnu' get one error: dnx.win32.dll could not be loaded. Last error: 87\n. ",
    "ghostkaa": "Hi. I have same problem. How did you solve it?\n. ",
    "010227leo": "same problem..Windows Server 2008 R2 x64\n\n. @moozzyk I install the latest updates(Windows Server 2008 R2), solve the problem. Thank you!\n. ",
    "otakusid": "To reproduce this issue you should install dnvm using powershell script how to install on the clean system from one user. And then try to use dnu from another user. When you recognize that dnu even not in PATH and try to run it by specifying full path, from dir with sources of your project - you reproduce the issue :)\n. ",
    "ericwj": "Which version is 1.0.0-beta7? >=12290? I switched to rc1-15838 to see if it fixed this, but I still get FileNotFoundException. It might be the tooling still, if I download beta6 from the link provided, it'll complain there is a newer version already. Should I remove that Microsoft ASP.NET and Web Tools 2015 - Visual Studio 2015 dd 28-09-2015 v14.0.60814.0 listed under Programs and Features manually and try installing (beta6) of that? Isn't my version newer though?\nOr what else to get rid of this error? SET WEB produces a not defined error, so that shouldn't be it.\n%UP%\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-rc1-15838\\bin\\dnx.exe \"%UP%\\.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-rc1-15838\\bin\\lib\\Microsoft.DNX.PackageManager\\Microsoft.DNX.PackageManager.dll\" restore \"C:\\Project\" -f \"C:\\Program Files (x86)\\Microsoft Web Tools\\DNU\"\nSystem.IO.FileNotFoundException\nFile name: Microsoft.DNX.PackageManager\n. Oops, sorry for the delay. It's doing that on File New Project Class Library (Package), as soon as I add Microsoft.CodeAnalysis.Common and add a LINQ extension method to the code. Without that reference, the code compiles for both targets. With that reference, net451 breaks.\nSee ericwj/AspnetDnxIssue3357. I copied in the global.json and NuGet.Config from the solution where I ran into this, but they hardly contain anything different than the defaults.\n. Mmm, never thought of the GAC or frameworkAssemblies for one second for this specific assembly.\nHowever\nClassLibrary1\\project.json(17,38,17,38): .NET Framework 4.5.1 error NU1001: The dependency fx/Microsoft.CodeAnalysis.Common  could not be resolved.\nIt should be there at least for net45 according to the NuGet Gallery - or won't this work today?\n. Oh indeed I must have misunderstood. Its beyond me why its required but yes it works with System.Runtime in frameworkAssemblies. I don't think anytime else I need to do add anything there - for dnx yes they're there always, but not for net45, whatever other dependencies I would have, correct? That's probably why I didn't even try but instead tried to move Microsoft.CodeAnalysis.* around. Sorry for that.\nWhat are the Microsoft.CodeAnalysis.* packages doing differently to require this reference explicitly? Certainly IEnumerable<> would be there without the explicit reference to System.Runtime as a frameworkAssembly.\n. Clear Murat, thanks. Am I correct if I say adding the reference is required because it might be possible to pick a different version of System.Runtime as long as it's in the GAC on the machine?\n. Thanks again!\n. ",
    "teamneusta": "dnvm/dnx commands work now, but msbuild still fails on our build server. Problem now is that packages are restore in .dnx\\packages\\, but msbuild searches for packages in .nuget\\packages directory.\n. ",
    "benaadams": "Note this was running from source; running packaged --no-source didn't exhibit these issues\n. Closing this as stuff is moving to dotnet cli\n. @GuardRex where's your CraigsList item? Though I can probably hold out on a week :)\n. @anurse its this resolved; or do we need to use the work around used by @GuardRex ?\n. Ah, if I'm using the unstable RC2 should it be in that also?\n. Excellent, thank you!\n. Is working great, thank you :+1: \n. @dahlbyk you probably want to take this to https://github.com/dotnet/cli\n. > That feed could then be configured in my nuget.config and I can start consuming these packages from other projects.\nThis is so much easier than what I've been doing; thank you for persisting with your explanations.\n. w00p! :+1: \n. @tuespetre is moving to .NET Command Line Interface it was announced at Connect(); // 2015 and should be the way for RTM (as I understand)\n. dotnet cli issue now, add comments there, you can override with environment var https://github.com/dotnet/cli/issues/889#issuecomment-172975280\n. Yeah, just mean dnx is being discontinued and dotnet cli is replacing it; so you would want to give feedback on issue I linked rather than here\n. ",
    "pgrudzien12": "I've gome through announcement and this thread and still do not understand what was removed. Dnu script is still there and tooling source haven't been changed so what am I missing? Commit link would be useful.\n. Shame :D\n. I think that plans are to move precompilation from dnu to roslyn. @davidfowl am I right that precompilation modules will not be avaliable for RTM?\n@mattfraley1 above exception is not available normally - you have to compile your own debug version of dnx.\n. Travis errors seems unrelated to this PR\n. Now I think that it should also list globally installed commands not only those from project.json. What do you think? I could add this but I'd like to know if it has any chance to make it to rc1 or rc2.\n. +1\nI'm sure it will be \u0142 letter. \nUnicode U+hex notation: U+0142\nhttps://r12a.github.io/uniview/?charlist=%C5%82\n. It seems that mono-brick and lejos does not need flashing so they work more like (or exactly the same as) ev3dev.\n. I need a second set :) - you know someone has to test communication between bricks.\n. With a lot of struggles I finally managed to fire up Hello World example on the brick. Compilation still does not work but with publish --no-source program runs.\nDoes anyone knows if \"Could not determine OS\" has any repercussions and I should be worry?\nroot@ev3dev:~/code/home/samples/1.0.0-beta8/ConsoleApp/bin/output/approot# ./ConsoleApp\nCould not determine OS version information. Defaulting to the empty string.\nHello World\n. I used mono\n. @dlech indeed it is. In every command I run there is this :\nroot@ev3dev:~/code/home/samples/1.0.0-beta8/ConsoleApp/bin/output/approot# dnu restore\nCould not determine OS version information. Defaulting to the empty string.\nMicrosoft .NET Development Utility Mono-x86-1.0.0-beta8-15858\n. @victorhurdugaci I thought CoreCLR is not supported at all at ARM architecture. When I try to install DNX with dnvm upgrade -arch ARM -r coreclr dnvm prints this Architecture must be x86 or x64.\nI do not know what is behind that restrictions. Do you think that running CoreCLR is possible?\n. @moozzyk Thanks for information. I'll keep that in mind for next time. This seems very advanced as I have no experience with compiling CoreCLR yet. Moreover it would need cross compiling because taking into account size of this machine (in terms of speed and ram) it would take ages to compile on the device. Needless to say that this is not my field of expertise.\nFor now I think that I'll focus on stabilizing dnx+mono architecture.\n1. Compilation does not work (but this is not main concern as compilation on brick would be slow and I wouldn't use it either way)\n2. I haven't tried anything more complex than hello World (yet)\n3. I'd like to port ev3dev Lego API (at least some part of it) in order to be able to do something more useful.\n. @moozzyk You asked for it :D. I tried to be as concise as possible. I am trying to compile almost vanilla version of ConsoleApp from Home repo (with CoreCLR removed):\nOut of the box after installation of mono 4.0.4 rolsyn compiler from dnu build throws error CS0009: Metadata file '/usr/lib/mono/4.5/mscorlib.dll' could not be opened -- Invalid public key. This was my initial problem I ended up at my blog. There are of course other errors later with loading assemblies. Most probably resulting from this one.\nI've managed to replace compiler with my own version that gives more information and it seems that as far as compiler is aware the public key of mscorlib.dll is too long. It's string representation (publicKeyOrToken variable at the point where it throws exception)  is /ws/2005/05/identity/claims/streetaddresszhttp://sch. It expects 8 bytes but gets far more from this string. I assume that string (hexadecimal) representation of this key should be \"b77a5c561934e089\" - the 8 bytes compiler expects. Even if it should be some kind of other token (this looks like claim) it still does not look good considering:\n1. http:// at the end of this string, \n2. missing http at the beginning (if it suppose to be a claim)\n3. the fact that code explicitly says that this publicKeyOrToken should be length of 8.\nMy conclusions: either mscorlib I have is corrupted or roslyn has a bug. \nSo I loaded this mscorlib with ILSpy. Public key is \"PublicKeyToken=b77a5c561934e089\", architecture is AnyCPU and all other decompiled code looks ok. The assembly come from xamarin repo \"http://origin-download.mono-project.com/repo/debian/dists/wheezy/main/binary-armel/\" so I suppose it should be ok.\nOn the other hand I thought that if arch is AnyCPU then it should be the same assembly as in windows mono. So I installed Mono, replaced mscorlib file on the brick with windows version. I think that this step is safe enough but on the other hand I can't rule out that following errors come from this step.\nThe invalid key error is gone but now I got stuck with this message:\n(1,29): DNX,Version=v4.5.1 error CS0648: '' is a type not supported by the language\n(2,29): DNX,Version=v4.5.1 error CS0234: The type or namespace name 'AssemblyVersionAttribute' does not exist in the namespace 'System.Reflection' (are you missing an assembly reference?)\n(3,29): DNX,Version=v4.5.1 error CS0648: '' is a type not supported by the language\n/root/code/home/samples/1.0.0-beta8/ConsoleApp/Program.cs(7,9): DNX,Version=v4.5.1 error CS0518: Predefined type 'System.UInt64' is not defined or imported\nIf I copy compiled ConsoleApp without source directly to the device it runs ok with both versions of mscorlib.\nI am not sure if I should file a bug to mono or roslyn. I saw that there is mono version of roslyn but I assume also that if \"normal\" roslyn if incompatible with mono then it should not work on Raspberry PI 2 as well. But obviously it works ok. \nBtw thanks for your support your aid and kind words. Every advice I get from you and ev3dev (@dlech) is very informative and helpful. I think I would not get this far without your support.\nAnd one other thing remains - restoring packages on mono is very painful. Around 60% of times I get HTTP request timed out. Exiting.. I tried setting export MONO_THREADS_PER_CPU=2000 but it doesn't help at all. Am I doing something wrong here (a typo maybe or I should set this variable differently)?\n. ",
    "zhangxin511": "Hey gentles,\nWith helps from @Tratcher and our architecture, I am able to get some response using HttpClient in Linux:\nWe upgraded dnvm to coreclr beta8-15618, and copied System.Net.Http.dll and System.Net.Http.Native.so from ~/.dnx/runtimes/dnx-coreclr-linux-x64.1.0.0-beta8-15618/bin/lib/Microsoft.Dnx.Tooling/ to ~/.dnx/runtimes/dnx-coreclr-linux-x64.1.0.0-beta8-15618/bin/, and use HttpClient methods to get content from web servers. However, I am not able to read the Content of response Linux, while the header information seems fine. The same code works fine in windows.\nIs there anything I am missing?\nThank you!\n. Yes, the response is compressed. The header returns when GetAsync to google.com:\n  Content-Type: text/html; charset=ISO-8859-1\n  Content-Encoding: gzip\n  Content-Length: 50309\nBut even I tried removing the compression or decompress after getting the content I still not getting anything. You can find the source code at https://www.dropbox.com/sh/iukr2l4elcqp77k/AACXrYXo2rrcc4PCn9taJGhaa?dl=0\nThank you for your continue helps!\n. ",
    "kdaveid": "Hi there! \nYes, default fallback is production environment. It would be nice to specify different \"ef\" commands in project.json to trigger migrations to different targets. Or do I miss something?\n. ",
    "anuraj": "I just created a Basic Web Application with Yeoman generator.\nHere is my dependencies in project.json\n```\n\"dependencies\": {\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-\",\n    \"Microsoft.AspNet.Mvc.TagHelpers\": \"6.0.0-\",\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-\",\n    \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-\",\n    \"Microsoft.AspNet.Tooling.Razor\": \"1.0.0-\",\n    \"Microsoft.Framework.Configuration.Json\": \"1.0.0-\",\n    \"Microsoft.Framework.Logging\": \"1.0.0-\",\n    \"Microsoft.Framework.Logging.Console\": \"1.0.0-\",\n    \"Kestrel\": \"1.0.0-\"\n  },\n\"commands\": {\n    \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --config hosting.json\"\n  },\n```\nAnd here is the Startup.cs file\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNet.Builder;\nusing Microsoft.AspNet.Diagnostics;\nusing Microsoft.AspNet.Hosting;\nusing Microsoft.AspNet.Http;\nusing Microsoft.AspNet.Routing;\nusing Microsoft.Framework.Configuration;\nusing Microsoft.Framework.DependencyInjection;\nusing Microsoft.Framework.Logging;\nusing Microsoft.Framework.Logging.Console;\nusing Microsoft.Dnx.Runtime;\nnamespace MyProject\n{\n    public class Startup\n    {\n        public Startup(IHostingEnvironment env, IApplicationEnvironment appEnv)\n        {\n            var builder = new ConfigurationBuilder(appEnv.ApplicationBasePath)\n                .AddJsonFile(\"config.json\")\n                .AddEnvironmentVariables();\n            Configuration = builder.Build();\n        }\n    public IConfiguration Configuration { get; set; }\n\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc();\n    }\n\n    // Configure is called after ConfigureServices is called.\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n    {\n        loggerFactory.MinimumLevel = LogLevel.Information;\n        loggerFactory.AddConsole();\n\n        app.UseStaticFiles();\n\n        // Add MVC to the request pipeline.\n        app.UseMvc(routes =>\n        {\n            routes.MapRoute(\n                name: \"default\",\n                template: \"{controller=Home}/{action=Index}/{id?}\");\n\n            // Uncomment the following line to add a route for porting Web API 2 controllers.\n            // routes.MapWebApiRoute(\"DefaultApi\", \"api/{controller}/{id?}\");\n        });\n    }\n}\n\n}\n```\nError occurs when you try to browse the page using web browser.\n. DNX Beta 7\n\nProject.lock.json - contains Beta 8 references. (Microsoft.AspNet.Mvc/6.0.0-beta8-15793)\nIs that creating problem?\n. I tried dnx beta 8 and it started working. I deleted all the existing ones and reinstalled Beta 7 and Beta 8. \n. ",
    "angelsix": "\nInstalled a fresh ubuntu ARM 15.04. \nInstalled all packages required and everything from here like dnvm, the runtimes and libuv etc... http://docs.asp.net/en/latest/getting-started/installing-on-linux.html\nBuilt mono from tar file here 4.1.0.1738 http://download.mono-project.com/sources/mono/nightly/ \nInstalled pre-reqs sudo apt-get install git autoconf libtool automake build-essential mono-devel get text libtool-bin\nExtracted tar tar xvc mono-4.1.0.1738.tar.bz2\ncd mono-4.1.0\n./configure --prefix=/mono\nmake\nsudo make install\nThis placed mono into /mono folder\nUpdated path in /etc/environment to start search in /mono/bin so it finds mono 4.1\nCheck with: mono -V gives \n     Mono JIT compiler version 4.1.0 (tarball Wed Sep 16 21:41:09 UTC 2015)\n     Copyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\n     TLS:           __thread\n     SIGSEGV:       normal\n     Notifications: epoll\n     Architecture:  armel,vfp+hard\n     Disabled:      none\n     Misc:          softdebug \n     LLVM:          supported, not enabled.\n     GC:            sgen\nSetup dnvm \ndnvm upgrade \ndnvm install 1.0.0-beta7\ndnvm use 1.0.0-beta7\ndnvm list\n     Active Version              Runtime Architecture OperatingSystem Alias\n     ------ -------              ------- ------------ --------------- -----\n     1.0.0-beta4          mono                 linux/osx\n     1.0.0-beta5          mono                 linux/osx\n     1.0.0-beta7          coreclr x64          linux  \n1.0.0-beta7          mono                 linux/osx       default\nTried to build and run project\nWent into project folder\ndnu restore\n     Microsoft .NET Development Utility Mono-x86-1.0.0-beta7-15532\n\nCACHE https://www.myget.org/F/aspnetvnext/api/v2/\n   CACHE https://www.nuget.org/api/v2/\n   Restoring packages for /home/user/profilefolder/project.json\n   CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='Kestrel'\n   CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='Kestrel'\n   CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='Microsoft.AspNet.Mvc'\n   CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='Microsoft.AspNet.Mvc'\n   CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='Microsoft.AspNet.Diagnostics'\n   CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='Microsoft.AspNet.Diagnostics'\n   CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='Microsoft.AspNet.StaticFiles'\n   CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='Microsoft.AspNet.StaticFiles'\n   CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='Microsoft.Framework.ConfigurationModel.Json'\n   CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='Microsoft.Framework.ConfigurationModel.Json'\n   CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='Microsoft.Framework.Logging.Console'\n   CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='Microsoft.Framework.Logging.Console'\n   CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='System.Linq'\n   CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='System.Linq'\n   CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='System.Collections'\n   CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='System.Collections'\n   CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='System.Diagnostics.Debug'\n   CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='System.Diagnostics.Debug'\n   CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='System.IO'\n   CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='System.IO'\n   CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='System.IO.FileSystem'\n   CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='System.IO.FileSystem'\n   CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='System.Resources.ResourceManager'\n   CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='System.Resources.ResourceManager'\n   CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='System.Runtime.Extensions'\n   CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='System.Runtime.Extensions'\n   CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='System.Runtime.InteropServices'\n   CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='System.Runtime.InteropServices'\n   CACHE https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='System.Dynamic.Runtime'\n   CACHE https://www.nuget.org/api/v2/FindPackagesById()?id='System.Dynamic.Runtime'\n   Writing lock file /home/user/projectfolder/Project/project.lock.json\n   Restore complete, 9253ms elapsed\nNuGet Config files used:\n    /home/user/.config/NuGet/NuGet.Config\nFeeds used:\n    https://www.myget.org/F/aspnetvnext/api/v2/\n    https://www.nuget.org/api/v2/\n- Tried to run using: dnx kestrel. Gives the error mentioned.\n. Just created a new fresh project on Windows in Visual Studio 2015, an ASP.Net Web Application. Built and run ok on windows.\nRun on the ARM linux board:\n- dnu restore gives the following errors sometimes (did it on the above project too). But re-running dnu restore a few times it runs fine and completes ok. Seems like its an random bug.\nMicrosoft .NET Development Utility Mono-x86-1.0.0-beta7-15532\nCACHE https://www.myget.org/F/aspnetvnext/api/v2/\n  CACHE https://www.nuget.org/api/v2/\nRestoring packages for /home/user/TestWeb/project.json\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='EntityFramework.SqlServer'\n  GET https://www.nuget.org/api/v2/FindPackagesById()?id='EntityFramework.SqlServer'\n  GET https://www.myget.org/F/aspnetvnext/api/v2/FindPackagesById()?id='EntityFramework.Commands'\n  GET https://www.nuget.org/api/v2/FindPackagesById()?id='EntityFramework.Commands'\nthunk failed 0xb2b5dbf0->0xb4d2667c, thunk space=84 method Mono.Security.Protocol.Tls.CipherSuite:EncryptRecord (byte[],byte[])* Assertion: should not be reached at mini-arm.c:3770\nStacktrace:\nat  <0xffffffff>\n  at Mono.Security.Protocol.Tls.CipherSuite.EncryptRecord (byte[],byte[]) <0x000d3>\n  at Mono.Security.Protocol.Tls.RecordProtocol.encryptRecordFragment (Mono.Security.Protocol.Tls.ContentType,byte[]) <0x000fb>\n  at Mono.Security.Protocol.Tls.RecordProtocol.EncodeRecord (Mono.Security.Protocol.Tls.ContentType,byte[],int,int) <0x0012f>\n  at Mono.Security.Protocol.Tls.RecordProtocol.EncodeRecord (Mono.Security.Protocol.Tls.ContentType,byte[]) <0x00033>\n  at Mono.Security.Protocol.Tls.RecordProtocol.EncodeHandshakeRecord (Mono.Security.Protocol.Tls.Handshake.HandshakeType) <0x00073>\n  at Mono.Security.Protocol.Tls.SslClientStream.NegotiateAsyncWorker (System.IAsyncResult) <0x005f7>\n  at (wrapper runtime-invoke) .runtime_invoke_void__this___object (object,intptr,intptr,intptr) <0xffffffff>\nNative stacktrace:\nDebug info from gdb:\n\nGot a SIGABRT while executing native code. This usually indicates\na fatal error in the mono runtime or one of the native libraries \nused by your application.\nAborted\n- Another run and it finishes ok\n  Writing lock file /home/user/TestWeb/src/TestWeb/project.lock.json\n  Restore complete, 22493ms elapsed\nNuGet Config files used:\n    /home/user/.config/NuGet/NuGet.Config\nFeeds used:\n    https://www.myget.org/F/aspnetvnext/api/v2/\n    https://www.nuget.org/api/v2/\n- Once dnu restore runs successfully, run dnx . kestrel\n  System.InvalidOperationException: Failed to resolve the following dependencies for target framework 'DNX,Version=v4.5.1':\n  EntityFramework.Commands 7.0.0-beta5\n  EntityFramework.SqlServer 7.0.0-beta5\n  Microsoft.AspNet.Authentication.Cookies 1.0.0-beta5\n  Microsoft.AspNet.Authentication.Facebook 1.0.0-beta5\n  Microsoft.AspNet.Authentication.Google 1.0.0-beta5\n  Microsoft.AspNet.Authentication.MicrosoftAccount 1.0.0-beta5\n  Microsoft.AspNet.Authentication.Twitter 1.0.0-beta5\n  Microsoft.AspNet.Diagnostics 1.0.0-beta5\n  Microsoft.AspNet.Diagnostics.Entity 7.0.0-beta5\n  Microsoft.AspNet.Identity.EntityFramework 3.0.0-beta5\n  Microsoft.AspNet.Mvc 6.0.0-beta5\n  Microsoft.AspNet.Mvc.TagHelpers 6.0.0-beta5\n  Microsoft.AspNet.Server.IIS 1.0.0-beta5\n  Microsoft.AspNet.Server.WebListener 1.0.0-beta5\n  Microsoft.AspNet.StaticFiles 1.0.0-beta5\n  Microsoft.AspNet.Tooling.Razor 1.0.0-beta5\n  Microsoft.Framework.Configuration.Abstractions 1.0.0-beta5\n  Microsoft.Framework.Configuration.Json 1.0.0-beta5\n  Microsoft.Framework.Configuration.UserSecrets 1.0.0-beta5\n  Microsoft.Framework.Logging 1.0.0-beta5\n  Microsoft.Framework.Logging.Console 1.0.0-beta5\n  Microsoft.VisualStudio.Web.BrowserLink.Loader 14.0.0-beta5\n/home/user/TestWeb/src/TestWeb/project.lock.json(1,0): error: The expected lock file doesn't exist. Please run \"dnu restore\" to generate a new lock file.\nCurrent runtime target framework: 'DNX,Version=v4.5.1 (dnx451)'\n Version:      1.0.0-beta7-15532\n Type:         Mono\n Architecture: x86\n OS Name:      Linux\nat Microsoft.Dnx.ApplicationHost.Program.Main (System.String[] args) <0xb48142b8 + 0x0044f> in :0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () <0xb4e27ea8 + 0x00024> in :0 \n  at Microsoft.Dnx.Runtime.Common.EntryPointExecutor.Execute (System.Reflection.Assembly assembly, System.String[] args, IServiceProvider serviceProvider) <0xb4811000 + 0x0018f> in :0 \n  at Microsoft.Dnx.Host.Bootstrapper.RunAsync (System.Collections.Generic.List`1 args, IRuntimeEnvironment env, System.Runtime.Versioning.FrameworkName targetFramework) <0xb6d2e850 + 0x00353> in :0 \n- Change to the beta5: dnvm use 1.0.0-beta5\n- dnu restore\n- dnx . kestrel\n  System.InvalidOperationException: Failed to resolve the following dependencies for target framework 'DNX,Version=v4.5.1':\n  EntityFramework.Commands 7.0.0-beta5\n  EntityFramework.SqlServer 7.0.0-beta5\n  Microsoft.AspNet.Authentication.Cookies 1.0.0-beta5\n  Microsoft.AspNet.Authentication.Facebook 1.0.0-beta5\n  Microsoft.AspNet.Authentication.Google 1.0.0-beta5\n  Microsoft.AspNet.Authentication.MicrosoftAccount 1.0.0-beta5\n  Microsoft.AspNet.Authentication.Twitter 1.0.0-beta5\n  Microsoft.AspNet.Diagnostics 1.0.0-beta5\n  Microsoft.AspNet.Diagnostics.Entity 7.0.0-beta5\n  Microsoft.AspNet.Identity.EntityFramework 3.0.0-beta5\n  Microsoft.AspNet.Mvc 6.0.0-beta5\n  Microsoft.AspNet.Mvc.TagHelpers 6.0.0-beta5\n  Microsoft.AspNet.Server.IIS 1.0.0-beta5\n  Microsoft.AspNet.Server.WebListener 1.0.0-beta5\n  Microsoft.AspNet.StaticFiles 1.0.0-beta5\n  Microsoft.AspNet.Tooling.Razor 1.0.0-beta5\n  Microsoft.Framework.Configuration.Abstractions 1.0.0-beta5\n  Microsoft.Framework.Configuration.Json 1.0.0-beta5\n  Microsoft.Framework.Configuration.UserSecrets 1.0.0-beta5\n  Microsoft.Framework.Logging 1.0.0-beta5\n  Microsoft.Framework.Logging.Console 1.0.0-beta5\n  Microsoft.VisualStudio.Web.BrowserLink.Loader 14.0.0-beta5\nSearched Locations:\n  /home/user/{name}/project.json\n  /home/user/TestWeb/src/{name}/project.json\n  /home/user/TestWeb/test/{name}/project.json\n  /mono/lib/mono/4.5/{name}.dll\n  /mono/lib/mono/4.5/Facades/{name}.dll\nTry running 'dnu restore'.\nat Microsoft.Framework.ApplicationHost.Program.Main (System.String[] args) <0xb47a1f58 + 0x0037f> in :0 \n--- End of stack trace from previous location where exception was thrown ---\n  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () <0xb4e27ea8 + 0x00024> in :0 \n  at Microsoft.Framework.Runtime.Common.EntryPointExecutor.Execute (System.Reflection.Assembly assembly, System.String[] args, IServiceProvider serviceProvider) <0xb6cc7cf0 + 0x0018f> in :0 \n  at dnx.host.Bootstrapper.RunAsync (System.Collections.Generic.List`1 args, IRuntimeEnvironment env) <0xb6cc3228 + 0x00347> in :0 \nI checked in the mono folder and those files dont exist. For example this is ls output of /mono/lib/mono/4.5/Microsoft.\nMicrosoft.Build.Engine.dll          Microsoft.Build.Utilities.v4.0.dll  Microsoft.VisualC.dll\nMicrosoft.Build.Framework.dll       Microsoft.Build.dll                 Microsoft.Web.Infrastructure.dll\nMicrosoft.Build.Tasks.v4.0.dll      Microsoft.CSharp.dll                \nHere is the project.json from the fresh new ASP.Net Web Application project:\n{\n  \"webroot\": \"wwwroot\",\n  \"userSecretsId\": \"aspnet5-TestWeb-47e0c361-853f-4ace-b735-22e71f264504\",\n  \"version\": \"1.0.0-*\",\n\"dependencies\": {\n    \"EntityFramework.SqlServer\": \"7.0.0-beta5\",\n    \"EntityFramework.Commands\": \"7.0.0-beta5\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-beta5\",\n    \"Microsoft.AspNet.Mvc.TagHelpers\": \"6.0.0-beta5\",\n    \"Microsoft.AspNet.Authentication.Cookies\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Authentication.Facebook\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Authentication.Google\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Authentication.MicrosoftAccount\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Authentication.Twitter\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Diagnostics\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Diagnostics.Entity\": \"7.0.0-beta5\",\n    \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-beta5\",\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-beta5\",\n    \"Microsoft.AspNet.Tooling.Razor\": \"1.0.0-beta5\",\n    \"Microsoft.Framework.Configuration.Abstractions\": \"1.0.0-beta5\",\n    \"Microsoft.Framework.Configuration.Json\": \"1.0.0-beta5\",\n    \"Microsoft.Framework.Configuration.UserSecrets\": \"1.0.0-beta5\",\n    \"Microsoft.Framework.Logging\": \"1.0.0-beta5\",\n    \"Microsoft.Framework.Logging.Console\": \"1.0.0-beta5\",\n    \"Microsoft.VisualStudio.Web.BrowserLink.Loader\": \"14.0.0-beta5\"\n  },\n\"commands\": {\n    \"web\": \"Microsoft.AspNet.Hosting --config hosting.ini\",\n    \"ef\": \"EntityFramework.Commands\"\n  },\n\"frameworks\": {\n    \"dnx451\": { },\n    \"dnxcore50\": { }\n  },\n\"exclude\": [\n    \"wwwroot\",\n    \"node_modules\",\n    \"bower_components\"\n  ],\n  \"publishExclude\": [\n    \"node_modules\",\n    \"bower_components\",\n    \".xproj\",\n    \".user\",\n    \"**.vspscc\"\n  ],\n  \"scripts\": {\n    \"prepublish\": [ \"npm install\", \"bower install\", \"gulp clean\", \"gulp min\" ]\n  }\n}\n. Exact same output for both beta5 and beta7\nOoops. Yep went into the sub-folder where the json files are and run dnu restore and dnx . kestrel.\nNow I get for the main project the following error:\nSystem.Exception: Error -13 EACCES permission denied\n  at Microsoft.AspNet.Server.Kestrel.Networking.Libuv.Check (Int32 statusCode) <0xb1fabbf8 + 0x00044> in :0 \n  at Microsoft.AspNet.Server.Kestrel.Networking.Libuv.tcp_bind (Microsoft.AspNet.Server.Kestrel.Networking.UvTcpHandle handle, Microsoft.AspNet.Server.Kestrel.Networking.sockaddr& addr, Int32 flags) <0xb1fb1680 + 0x0005b> in :0 \n  at Microsoft.AspNet.Server.Kestrel.Networking.UvTcpHandle.Bind (System.Net.IPEndPoint endpoint) <0xb1fb0d38 + 0x00113> in :0 \n  at Microsoft.AspNet.Server.Kestrel.Http.Listener+<>c__DisplayClass7_0.b__0 (System.Object _) <0xb1fb05b8 + 0x000ff> in :0 \nI suspect its because I'm spinning up on port 80 and just need to install nginx and configure that. I'll do that and report back. If you think the error above is something else let me know thanks.\n. {\n  \"version\": \"1.0.0-beta7\",\n  \"description\": \"Class Library\",\n  \"authors\": [ \"\" ],\n  \"tags\": [ \"\" ],\n  \"projectUrl\": \"\",\n  \"licenseUrl\": \"\",\n\"dependencies\": {\n    \"Microsoft.Framework.DependencyInjection\": \"1.0.0-beta7\",\n    \"Microsoft.Dnx.Runtime.Abstractions\": \"1.0.0-beta7\",\n    \"System.Xml.XDocument\": \"4.0.11-beta-*\"\n  },\n\"frameworks\": {\n    \"dnx451\": {\n    },\n    \"dnxcore50\": {\n    }\n  }\n}\n. I reference 4.0.0 and I get the exclamation stating System.Xml is Not Availabel in 451, but only in core 5.0\n. Found fix here: http://stackoverflow.com/questions/32004649/asp-net-vnext-and-xdocument\n\"frameworks\": {\n    \"dnx451\": {\n      \"frameworkAssemblies\": {\n        \"System.Xml\": \"4.0.0.0\",\n        \"System.Xml.Linq\": \"4.0.0.0\"\n```\n  }\n},\n\"dnxcore50\": {\n  \"dependencies\": {\n    \"System.Xml.XDocument\": \"4.0.10\"\n}\n}\n```\n},\n. Thanks thats done it :+1: \n. That did the trick thanks\n. Ok so I have to run the dnu restore on another machine, move the compiled program over (which folders would that be? I have a web and a class library).\nThen presumably run dnx kestrel on the linux side to start the server.\nAs when I run dnu restore on the linux side with coreclr runtime selected in dnvm I get:\n-    1.0.0-beta7          coreclr x64          linux\n  /home/user/.dnx/runtimes/dnx-coreclr-linux-x64.1.0.0-beta7/bin/dnu: line 12: /home/user/.dnx/runtimes/dnx-coreclr-linux-x64.1.0.0-beta7/bin/dnx: cannot execute binary file: Exec format error\n. Ok so on linux, with dnx50 as the framework, and coreclr selected as shown above. I get this error when running dnu restore. Tried it on 4 linux machines, ARM, x86, 32bit, 64bit, all the same.\n/home/user/.dnx/runtimes/dnx-coreclr-linux-x64.1.0.0-beta7/bin/dnu: line 12: /home/user/.dnx/runtimes/dnx-coreclr-linux-x64.1.0.0-beta7/bin/dnx: cannot execute binary file: Exec format error\n. Oops turns out all machines I was testing on (even 64bit ones) I installed 32bit linux. \nLooks like the issue is coreCLR isnt on 32bit. Is it planned to be? If so any ideas when? I would love to drop mono if possible\n. Great thanks. I had to add an explicit reference and its fine now.\n. ",
    "joshfree": "@Eilon @coolcsh @danroth27 we need this for rc1\n. ",
    "bgeihsgt": "I don't think that is the issue.  We aren't caching any DNS on this box.  And that error message in the bug is different than ours.  Our error message has no stack trace and is a SIGSEGV instead of a SIGABRT\n. ",
    "quentez": "Also seeing the same error on Ubuntu with Beta 7.\n. ",
    "kcraft": "For what it's worth, I've found that restarting my computer (Mac) seems to at least temporarily alleviate this issue. Maybe mono isn't releasing resources and eventually uses up all of its available threads.\n. I have the same problem with \"dnu restore\", BTW. Restarting my computer fixes the \"dnu restore\" problem 100% of the time. Definitely seems like resources not being released. This could be a serious issue in a production environment since I doubt it only affects these \"dnu\" commands. There is probably some underlying issue with mono's resource allocation. Makes me nervous to run ASPNET 5 in production.\n. Thanks for the quick response.\nI know my situation doesn't apply to everyone, but I don't actually care what the assembly name ends up being. I just don't want that duplicate .dll to be created which results in ambiguous routes. They seem like separate issues to me. That being said, more control over the assembly name would definitely be a plus.\n. ",
    "deepakaravindr": "Looks good to me :shipit:\n. ",
    "leak": "@muratg You can simply create an empty project, add Microsoft.Data.Sqlite and publish to see the effect. This is also the case on beta-7.\n. It seems to be working on 1.0.0-beta8.\nD:\\testing>find . -iname *sqlite*\n./approot/packages/EntityFramework.Sqlite\n./approot/packages/EntityFramework.Sqlite/7.0.0-beta8/EntityFramework.Sqlite.nuspec\n./approot/packages/EntityFramework.Sqlite/7.0.0-beta8/lib/dnxcore50/EntityFramework.Sqlite.dll\n./approot/packages/EntityFramework.Sqlite/7.0.0-beta8/lib/net45/EntityFramework.Sqlite.dll\n./approot/packages/Microsoft.Data.Sqlite\n./approot/packages/Microsoft.Data.Sqlite/1.0.0-beta8/lib/dnx451/Microsoft.Data.Sqlite.dll\n./approot/packages/Microsoft.Data.Sqlite/1.0.0-beta8/lib/dnxcore50/Microsoft.Data.Sqlite.dll\n./approot/packages/Microsoft.Data.Sqlite/1.0.0-beta8/Microsoft.Data.Sqlite.nuspec\n./approot/packages/Microsoft.Data.Sqlite/1.0.0-beta8/runtimes/win/native/x86/sqlite3.dll\n./approot/packages/Microsoft.Data.Sqlite/1.0.0-beta8/runtimes/win-x86/native/sqlite3.dll\n./approot/packages/Microsoft.Data.Sqlite/1.0.0-beta8/runtimes/win10-arm/native/sqlite3.dll\n./approot/packages/Microsoft.Data.Sqlite/1.0.0-beta8/runtimes/win10-x64/native/sqlite3.dll\n./approot/packages/Microsoft.Data.Sqlite/1.0.0-beta8/runtimes/win10-x86/native/sqlite3.dll\n@JunTaoLuo I leave you to close the ticket since I'm not sure if your \"temporarily\" means that there is still a todo left.\n. Just stumbled across the same issue. It looks like the path is taken relative to the dnu / VS dnx working directory rather than the solution directory\n. VS is not involved in my build process. I' building on a server running TeamCity (no VS) and publish to another server (no VS either).\n. @moozzyk Trying to publish with --no-source causes tons of dependency errors already during the publish process. It seems like these errors are only appearing on my build machine where no VS is installed, on my regular dev machine i can't reproduce them.\n. I cannot reproduce the issue on RC1 anymore, seems to be resolved.\n. This issue is still unresolved on RC1.\nThis problem basically prevents you from using Microsoft.AspNet.Localization because as soon as you reference a 3rd library and the processing thread's culture is not Invariant you will get a FileNotFoundException for non-existing resources.\nAny chance this issue could get a higher priority?\n. ",
    "KoKuToru": "We had the same problem, using the Dockerfile from github worked (Dockerfile from dockerhub didn't).\nThe github-version does not include -r coreclr. Removing the parameter worked for us.\n. ",
    "Flavien": "I believe that if you don't use -r coreclr, you get the mono version, don't you? I'm trying to use specifically the CoreCLR version.\n. Thanks! So that will be shipped as part of beta8?\n. I got the same issue on Ubuntu when executing CoreCLR dnx from an unprivileged user: https://github.com/aspnet/dnx/issues/2748\nIt exits without any error message. And I also haven't figured out why it doesn't work.\n. This is 14.04 on Docker.\n. To give an update on my issue, I used export DNX_TRACE=1, and the issue was that the access to /dev/stdout was denied. I looked this up more, and it turns out to be a docker issue: https://github.com/opencontainers/runc/pull/280\n. Disregard, I found the problem. I needed the package libcurl3-gnutls instead of libcurl3-dev.\n. I noticed the same, dnu restore --lock fails:\nSystem.IO.DirectoryNotFoundException: Could not find a part of the path '/opt/dnx/approot/packages/System.Diagnostics.Tracing/4.0.0'.\n   at System.IO.UnixFileSystem.FileSystemEnumerable1.OpenDirectory(String fullPath)\n   at System.IO.UnixFileSystem.FileSystemEnumerable1.Enumerate()\n   at System.IO.UnixFileSystem.FileSystemEnumerable1..ctor(String userPath, String searchPattern, SearchOption searchOption, SearchTarget searchTarget, Func3 translateResult)\n   at System.IO.UnixFileSystem.EnumeratePaths(String path, String searchPattern, SearchOption searchOption, SearchTarget searchTarget)\n   at System.IO.Directory.EnumerateFiles(String path, String searchPattern, SearchOption searchOption)\n   at Microsoft.Dnx.Tooling.Publish.PublishProject.PrunePackages(PublishRoot root)\n   at Microsoft.Dnx.Tooling.Publish.PublishProject.PostProcess(PublishRoot root)\n   at Microsoft.Dnx.Tooling.Publish.PublishRoot.Emit()\n   at Microsoft.Dnx.Tooling.Publish.PublishManager.Publish()\n   at Microsoft.Dnx.Tooling.PublishConsoleCommand.<>c__DisplayClass0_0.<Register>b__1()\n   at Microsoft.Dnx.Runtime.Common.CommandLine.CommandLineApplication.Execute(String[] args)\n   at Microsoft.Dnx.Tooling.Program.Main(String[] args)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Dnx.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   at Microsoft.Dnx.Host.Bootstrapper.RunAsync(List1 args, IRuntimeEnvironment env, String appBase, FrameworkName targetFramework)\n   at Microsoft.Dnx.Host.RuntimeBootstrapper.ExecuteAsync(String[] args, BootstrapperContext bootstrapperContext)\n   at Microsoft.Dnx.Host.RuntimeBootstrapper.Execute(String[] args, BootstrapperContext bootstrapperContext)\n`\n. Except I don't, at least not directly. I might be referencing a package that is already referenced by a dependency, but that should be ok, shouldn't it?\nHere is the project.json:\n```\n{\n  \"version\": \"0.4.4-rc1-*\",\n\"dependencies\": {\n    \"System.Net.WebSockets.Client\": \"4.0.0-beta-23516\",\n    \"System.Text.Encoding\": \"4.0.11-beta-23516\",\n    \"Microsoft.AspNet.Cors\": \"6.0.0-rc1-final\",\n    \"Microsoft.AspNet.IISPlatformHandler\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Mvc.Core\": \"6.0.0-rc1-final\",\n    \"Microsoft.AspNet.Mvc.ViewFeatures\": \"6.0.0-rc1-final\",\n    \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.WebSockets.Server\": \"1.0.0-rc1-final\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0-rc1-final\",\n    \"Microsoft.Extensions.Configuration.Json\": \"1.0.0-rc1-final\",\n    \"Microsoft.Extensions.Configuration.UserSecrets\": \"1.0.0-rc1-final\",\n    \"Newtonsoft.Json\": \"7.0.1\",\n    \"Openchain.Abstractions\": \"0.4.4-rc1-\",\n    \"Openchain.Ledger\": \"0.4.4-rc1-\",\n    \"Openchain.Ledger.Blockchain\": \"0.4.4-rc1-\",\n    \"Openchain.Sqlite\": \"0.4.4-rc1-\"\n},\n\"commands\": {\n    \"start\": \"Microsoft.AspNet.Hosting --webroot \\\"Webroot\\\" --server Microsoft.AspNet.Server.Kestrel --server.urls http://localhost:8080\"\n  },\n\"frameworks\": {\n\"dnxcore50\": {\n  \"dependencies\": {\n    \"System.Runtime.Serialization.Primitives\": \"4.0.11-beta-23516\",\n  }\n},\n\n\"dnx46\": { }\n\n},\n\"exclude\": [\n  ],\n\"publishExclude\": [\n    \".xproj\",\n    \".user\",\n    \"**.vspscc\"\n  ]\n}\n```\n. It seems to be coming from this, but it has no duplicates, and no dependency other than .NET Core itself:\n```\n{\n  \"version\": \"0.4.4-rc1-*\",\n\"dependencies\": {\n    \"Microsoft.Data.SQLite\": \"1.0.0-rc1-final\",\n  },\n\"frameworks\": {\n    \"dotnet5.4\": { },\n  }\n}\n```\nCalling dnu restore on this throws the same exception.\n. Something I noticed: if I remove the global.json file two levels up, dnu restore works fine. That's strange since there is no reference other than Microsoft.Data.SQLite in the project.json.\nThis reproduces even if there is no other project in the src folder (as long as global.json exists).\nFor reference, global.json is:\n{\n  \"projects\": [\n    \"src\"\n  ],\n  \"packages\": \"packages\"\n}\nEdit: I just found that the problem comes from \"packages\": \"packages\", removing that from the global.json file fixes the issue.\nIt looks like a bug in the tooling.\n. I just tried to reproduce the issue from an empty project, but the issue doesn't repro in that situation.\n. How do you register a signal handler?\nI didn't quite understand your response, but I don't think SIGTERM should be ignored by default.\n. ",
    "iSynaptic": "I can reproduce (Ubuntu 14.04.03, coreclr beta 7).\n. Even if that is the case, I think it should probably provide a better error/exception than NullReferenceException.\n. Even if that is the case, I think it should probably provide a better error/exception than NullReferenceException.\n. Yes, beta 7 (for my repro).\n. Yes, beta 7 (for my repro).\n. ",
    "weshaggard": "We keep hitting this issue in our corefx repo which is causing folks some grief. Any thoughts on how to work around this or ETA on a fix?\n. For us it is critical to have the lock file for * versioning scenarios otherwise we cannot use it. We need our builds to be reliable and repeatable. \nAs for the performance issue we try and restore all our packages up front and we cannot do that in parallel by launching multiple nuget/dnu restore commands because of all the races. That is why we started using this approach. So the only way for us to avoid that race problem would be to serialize all these restores and that is much slower.\n. To add to this we want to switch to nuget.exe v3 at some point which doesn't currently support this restore all under a directory so we need to figure out how to support this scenario there as well. \n. cc @ericstj \n. We just make a change recently to switch to dotnet restore for BuildTools so this should already be handled. \n. I didn't look deeply but I suspect this is the key line that fixes the problem? It is expected that this Lock property should only ever be set by the command line and not by other invalid lock files. \n. ",
    "dagood": "I have a temporary fix where I store Lock in a local variable (relock) in RestoreForProject and use that local variable going on. I then passed relock into another method that previously used Lock. It worked for my scenario but I don't know if there's a broader impact.\nThis is part of a larger set of changes right now, but I could cherry-pick and submit a pull request.\n. Didn't know that, thanks. I just trimmed a (possibly old) random project.json for the sake of an example.\n. @davidfowl I can try, but this would be the first time I looked at the DNX tests. It seems like the best place for it would be here but I don't follow where the test data comes from yet.\n. @davidfowl I'm getting ramped up on this, but I think I'm having trouble running the tests on my machine. How is this typically done? I'm trying to copy what Travis is doing (changing to the test directory and running dnx test -parallel none with the built dnx, so in my case dnvm run clr-win-x86-dev test -parallel none) but it takes ~30 minutes to run and of 360 tests, 4 fail and 5 are skipped.\nMaybe related to this: is the project supposed to build correctly in VS2015? I haven't been able to get that to work and I've been using build.cmd instead.\n. @davidfowl I added a test and with the current version of code I was able to get it to run on OSX in build 4963. I resubmitted since the Linux error looked transient, but I got some new errors that don't seem to be related to the test. I pulled dev and resubmitted with no apparent change. (I still can't run locally, so I've been relying on CI on this pull request to run this. This also means that it would be very difficult for me to make sure the test fails on the old version of DNX.) Any ideas?\n. @davidfowl I got the test running on my dev machine with some fiddling and it worked. I ran two test validation runs with the current version of the code: the first run succeeded for OSX and failed for Linux, and the second run succeeded for Linux and failed for OSX. Between the two runs I merged with dev again, but I'm not sure what to make of those errors. Any ideas?\n. I think you're right, if someone needs to know why titleElement?.Value isn't there anymore they can use git blame. Removing.\n. Yes, the rest of the changes are following from this, using the local variable instead of the property and adding tests.\n. I don't understand what that check would validate. As far as I can tell, if an invalid lock file is locked, it's recreated with --lock, but if it's unlocked, it's recreated without locking. I did notice that my test Project2 lock file wasn't locked, though, so I fixed that.\n. ",
    "jstclair": "/etc/lsb-release also does not exist on recent debian releases (which are the base for most Docker images). Found this out when updating my Docker image - dnx no longer runs.\n. Great! Do we need to use a custom DNX_UNSTABLE_FEED for that? Otherwise, when I try the default feed, I get \"1.0.0-rc1-15838\" for coreclr/linux, which I had tested previously.\n. @jeremymeng \nI believe the /etc/os-release is contained in the package base-files; can you check if that's installed?\nAs far as the fix for the missing lsb_release - I think that's in a post-beta8 release.\n. @anurse I understand, but I think that decision is a bit at-odds with the ASPNET Docker group, and the existing documentation about running CoreClr/DNX on Linux. Are there any issues or announcements on  Ubuntu-only platform support? \n. There is a list of required packages here but it's a bit unclear which particular versions are required. \n. ",
    "cesarbs": "This is by design - Debug.Assert() calls Environment.FailFast(), which will cause this dialog to show up. I think the source of confusion here is that the dialog says \"dnx.exe\" instead of @per-samuelsson's assembly name, however that is also expected since the actual process running the code is dnx.exe.\n. Logged https://github.com/dotnet/corefx/issues/3708.\n. @victorhurdugaci \n. Not flowing \"language\" from project.json as AssemblyCulture into the assembly since it looks like that has already been handled by #2802.\n. I will close this pr and open a new one, since this one got messed up with unrelated changes.\n. @victorhurdugaci @davidfowl @JunTaoLuo @troydai @phenning @rustd\n. Opened #3014 to track this.\n. @victorhurdugaci \n. No.\n. @victorhurdugaci @davidfowl @moozzyk @JunTaoLuo \n. @pakrym @davidfowl @victorhurdugaci @JunTaoLuo \n. Which path would that be?\n. Ping.\n. @davidfowl It's green now, fixed the test you pointed out was what was wrong.\n. Closing in favor of #3105.\n. :shipit:\n. I need a decision on whether to merge or close https://github.com/aspnet/dnx/pull/3247\n. @anurse @moozzyk Went with string.IsNullOrWhitespace instead of string.IsNullOrEmpty.\n. To see the thingy going green in the repo page :)\n. I have no idea what happened here.\n. Still pending on using System.Reflection.Metadata.\n. Oops.\n. We might want to add new tests which are not restricted to dnx451. The only reason this is #ifdef'd is that it uses Moq, which doesn't work with CoreCLR.\n. Renamed to ProjectPropertiesFlowIntoAssembly.\n. It is already :) I made that change because the first time I ran my test, it blew up there with a NullReferenceException.\n. @victorhurdugaci Yes.\n. Check for report == null since this is now public.\n. I thought that would sign the native dlls.\n. Oops.\n. ",
    "ahmetabdi": "I fixed by chmod 777 the dnu bin\n. ",
    "tstar": "And how to run the project in IIS Express now? Any ideas?\n. I can not run the project with web command. If I run the project from the studio, I only see a black window, which immediately closes. If I run the project from the command line in root project folder, then I get an exception: System.InvalidOperationException: Unable to resolve project from C:\\Test. If I publish project to the folder and run web.cmd, then I get an exception: System.InvalidOperationException: This application requires DNX version 1.0.0-beta8-15665 or newer to run. But now latest DNX version only is 1.0.0-beta8-15654. What's happening?\n. .NET Version Manager v1.0.0-beta8-15518\nCurrent feed settings:\nDefault Stable: https://www.nuget.org/api/v2\nDefault Unstable: https://www.myget.org/F/aspnetvnext/api/v2\n. My project.json file is very large. Can I publish it here entirely?\n. I find this line in the file that refer to the version 15665:\n      \"Microsoft.AspNet.DataProtection.Abstractions/1.0.0-beta8-15617\": {\n        \"type\": \"package\",\n        \"dependencies\": {\n          \"Microsoft.Dnx.Runtime.Abstractions\": \"1.0.0-beta8-15665\"\n        },\n. I solved this problem. At first, I manually set all of the packages in project.json file as \"-beta7\" and restore packages. Then switched nuget feed to \"https://www.myget.org/F/aspnetvnext/api/v2/\" and update all packages to the latest version in this feed. Now I can run my project with the latest DNX version 1.0.0-beta8-15654 on WebListener or Kestrel servers.\n. Is it posible to get latest DNX version 1.0.0-beta 8-15665 or newer to be in trend?\n. ",
    "prasannavl": "@anurse - just thinking out loud here - would having dnx.exe as a Win32 application attaching itself to a console with AttachConsole manually for console applications be completely crazy? I'm a little unsure on the consequences of the internal dynamics to figure out it if its a clean way to do it.\n. On second thought it does seem like dnxw would make life easier in all aspects. Intent would be much clearer, straight forward and well, less typing for quick invocations! :)\n. ",
    "jruckert": "Getting the same issue here. Looks like only a few packages got updated on the myget feed (some 4 hrs ago, the dependencies 16 hrs ago)\n. @BrennanConroy Many thanks.\n. ",
    "btrepp": "Ah okay cool. Using the proper DNX runner fixed it for me :).\nThanks for your help :)\n. Upgrading to the latest unstable (rc1-15838) seems to have fixed the issue.\nThanks.\n. Going to a previous commit, and adding it again seemed to have fixed it.\nI think somehow in the process of adding it the first time, my project.lock.json must've gotten strange and not specifed the runtimes correctly. It doesn't appear to be necessary to explicitly pull them in when you reference the mvc et libraries.\n. ",
    "DamianReeves": "It should be noted that at least in rc1 to get this to work properly with resource manager I also had to add a namedResource section:\njson\n \"resource\": [\n        \"*.resx\",\n        \"Resources/*.resx\"\n    ],\n    \"namedResource\": {\n        \"MyLib.Resources.ExceptionMessages\": \"Resources/ExceptionMessages.resx\"\n    }\n. ",
    "marchy": "Any ideas how to do this on RC2? It seems the various \"resource\" declarations are all marked as depracated.\n. Great thanks @pranavkm \n. ",
    "JimmyBoh": "For the time being I must stick with dnx instead of moving on to dotnet. I have english working fine with the resource manager but other cultures are not loading. I have .resx files for english, spanish, and chinese.\nFiles (in project root):\n- UiStrings.resx\n- UiStrings.es.resx\n- UiStrings.zh-tw.resx\nHere is a sample of my project.json:\njson\n\"resource\": [ \"*.resx\" ],\n\"namedResource\": {\n  \"My.App.UiStrings\": \"UiStrings.resx\"\n}\nAm I referencing them correctly? Do I need to generate .resources files for each language? If I create a build step that generates .resources files how would my configuration change?\n. ",
    "xblader": "some solution to this? I am facing same error.\n. ",
    "jl32": "Yes.\nI installed WebToolsExtensionsVS14  and this resolved the problem.\nYou have to select version of dnx.\nhttps://www.microsoft.com/en-us/search/result.aspx?q=WebToolsExtensionsVS14++&form=dlc\ngood lucky\n. ",
    "sahilbabbar": "I didn't install mono so it is the probable reason?\n. ",
    "promontis": "Oh, I forgot... I also tried using the whole reference as a nuget package. So, creating a nuget package using nuget.exe from the PCL and adding a local nuget feed to the PCL project. However, the solution keeps resolving the PCL reference via the project instead the local nuget feed. Makes sense, because this way you can debug nuget references (by adding its source to the src folder)\n. #2352 and #2467 seems to be related\n. I have resolved this (using beta8, don't know if beta7 will work too) by doing:\n- in the wrapped project.json alter the framework to \"dnx451\". You might need to dnu restore the wrapped project again\n- it seems the vNext project cannot be dnxcore5, so I removed that from the project.json (vNext project)\nNow deploying seems to work!\n. I have this problem as well: https://github.com/aspnet/dnx/issues/2842\nI also managed it to publish by updating it from net451 to dnx451, and it also shows a lot of errors. \n. Is this already pushed to the dev branch myget feed? Would love to try it out!\n. @davidfowl Sorry to 'reopen' this issue again, but I was wondering the same thing but for DNX452. Does Mono support .NET 4.5.2? Wondering because Microsoft announced that it is dropped technical support for .Net 4.5.1 this month.\n. ",
    "nehaabrol87": "1.0.0-beta7 \n. @muratg  I created a new user C:/Users/neha_000 and installed and it is working fine with the same version so I think it is an issue with the space only.Not sure.Let me know if you need anything else.\n. ",
    "amirv92": "same problem. running rc1.\n. ",
    "loqix": "The latest version has no problem\n. ",
    "yukozh": "\n. The problem has been solved by using System.Xml instead o f System.XML\n. @NiyazShoukath You can have a try to open the project.json, and type Ctrl+S many times quickly & frequently. It will be solved. If not, you can right click the references. After restored, type Ctrl+S in project.json. If still not, you can close your visual studio, and reopen the solution, it may be solved.\n@davidfowl This problem is same to me, and started with beta7. beta6 is ok.\n. @davidfowl src only.\nIn other hand, use the vs template generated global.json. the problem still exists. Not only me but also my friends, employees have this problem too.\nI said the full installation beta6(WebDevelopmentToolsForVS14 msi). not runtime.\nI think this is a tooling problem.\n. ~~It can be restored successfully in Windows, but failed with OSX.~~\n. /cc @JunTaoLuo @davidfowl \n. I don't know which step I made mistakes, the following simple code works ok, but it cannot work with above code.\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Diagnostics;\nnamespace ConsoleApp4\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Process p = new Process();\n            p.StartInfo = new ProcessStartInfo();\n            p.StartInfo.FileName = \"cmd.exe\";\n            p.StartInfo.Arguments = \"/c build.cmd\";\n            p.StartInfo.RedirectStandardError = true;\n            p.StartInfo.RedirectStandardOutput = true;\n            p.StartInfo.UseShellExecute = false;\n            p.StartInfo.WorkingDirectory = @\"c:\\github\\EntityFramework\";\n            p.OutputDataReceived += P_OutputDataReceived;\n            p.ErrorDataReceived += P_ErrorDataReceived;\n            p.Start();\n            p.BeginErrorReadLine();\n            p.BeginOutputReadLine();\n            p.WaitForExit();\n            Console.WriteLine(\"Exit with \" + p.ExitCode);\n            Console.ReadKey();\n        }\n    private static void P_ErrorDataReceived(object sender, DataReceivedEventArgs e)\n    {\n        Console.WriteLine(e.Data);\n    }\n\n    private static void P_OutputDataReceived(object sender, DataReceivedEventArgs e)\n    {\n        Console.WriteLine(e.Data);\n    }\n}\n\n}\n``\n. Confirmed this issue only occurred with web environment like ASP.net 5 or earlier(ASP.net 4.5). ConsoleApp is ok.\n. Confirmed a bug with MVC: https://github.com/aspnet/Mvc/issues/3457\n. I don't know why I cannot use dnu with coreclr.\n. In coreclr, I have executeddnu restore, but it cannot restore anything, and it outputed nothing. It just exited when I typeddnu restore` & enter.\nI'm using OSX 10.11.2 Mono 4.2.0(brew install mono)\n. It still timeout when active the coreclr\n. ",
    "phenombox": "Gosh right after I posted that I realised that, thats my bad been sitting with this for too long but thanks for the quick response.\n. ",
    "Gutek": "+1\n. ",
    "fubar-coder": "The Wiki is outdated. The correct install command is:\ndnu commands install Microsoft.Framework.SecretManager\n. ",
    "CallMeLaNN": "I got the same here with beta8. Initially I got the same issue like OP. I can't uninstall it. Then I force install the new one #3138 like:\ndnu commands install Microsoft.Framework.SecretManager --overwrite\nHowever still receive this:\nSystem.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Dnx.ApplicationHost' or one of its dependencies.\nNote that it already renamed to Dnx instead of Framework.\n. This steps works for me:\ndnvm use 1.0.0-beta8\ndnu commands install Microsoft.Framework.SecretManager -o\ndnu restore\nuser-secret -h\nThe Microsoft.Framework.SecretManager package or user-secret command should be used in 1.0.0-beta8. I forgot to switch back to 1.0.0-beta8 after using SecretManager for 1.0.0-beta5.\n. ",
    "dontbesorry80": "Can Anyone help me with this. I can't get the secret-manager to work. \nMy DNX version is 1.0.0-rc1-final.\nThe SecretManager seems to install correctly using the commands above.\nThe dnu restore also works.\nI've ensured my global.json has the same dnx version.\nHowever when I run user-secret -h I get the following error:\nSystem.NullReferenceException: Object reference not set to an instance of an object.\n   at Microsoft.Framework.SecretManager.CommandOutputProvider..ctor(IRuntimeEnvironment runtimeEnv)\n   at Microsoft.Framework.SecretManager.Program..ctor(IRuntimeEnvironment runtimeEnv)\n. Inside the package folder it says 1.0.0-beta8. I just ran the command above, I didn't specify a version anywhere. Am I supposed to?\n. Bingo! Thank you SO much for the help.\n. ",
    "chekkan": "I've followed the instructions above and installed the Microsoft.Extensions.SecretManager. However getting the error critical: Command failed : Missing 'userSecretsId' in 'project.json' when i run user-secret list command.\n\nPlease find by project.json file attached.\nproject.json\n. ",
    "Prehistoricoder": "I am getting the same behavior on Ubuntu 14.04.3.  Followed the instructions on the \"Getting Started with CoreCLR\" page on the CoreCLR project's GitHub site, substituting the correct version numbers in for rc1.  When I run either dnx or dnu, I get no output whatsoever.  It just returns to the console as though it didn't do anything.\nFinally, after finding this conversation, I tried \"export DNX_TRACE=1\" and ran dnx again.  This time I got the \"Cannot print exception string because Exception.ToString() failed.\" message.  I really think this sort of message should be printed to the console by default if there is a fatal error in dnx.\nWith that error message in hand, I did:\nsudo apt-get install icu-devtools\nand now everything is working (as an unprivileged user).  Is the need to install icu-devtools documented anywhere?  The silent failing has been driving me nuts for a few days now, lol.\n. ",
    "jrr": "brew install icu4c seems insufficient to resolve this on my El Capitan system:\n```\n] dnvm list\nActive Version              Runtime Architecture OperatingSystem Alias\n------ -------              ------- ------------ --------------- -----\n  *    1.0.0-beta8          coreclr x64          darwin          default\njrr@jrrs-MacBook-Pro:~\n] brew info icu4c\nicu4c: stable 55.1, HEAD\nC/C++ and Java libraries for Unicode and globalization\nhttp://site.icu-project.org/\nThis formula is keg-only.\nOS X provides libicucore.dylib (but nothing else).\n/Users/jrr/.Homebrew/Cellar/icu4c/55.1 (244 files, 65M) *\n  Built from source\nFrom: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/icu4c.rb\n==> Options\n--c++11\n    Build using C++11 mode\n--universal\n    Build a universal binary\n--HEAD\n    Install HEAD version\n==> Caveats\nThis formula is keg-only, which means it was not symlinked into /Users/jrr/.Homebrew.\nOS X provides libicucore.dylib (but nothing else).\nGenerally there are no consequences of this for you. If you build your\nown software and it requires this formula, you'll need to add to your\nbuild variables:\nLDFLAGS:  -L/Users/jrr/.Homebrew/opt/icu4c/lib\nCPPFLAGS: -I/Users/jrr/.Homebrew/opt/icu4c/include\n\njrr@jrrs-MacBook-Pro:~\n] uname -a\nDarwin jrrs-MacBook-Pro.local 15.0.0 Darwin Kernel Version 15.0.0: Wed Aug 26 16:57:32 PDT 2015; root:xnu-3247.1.106~1/RELEASE_X86_64 x86_64\njrr@jrrs-MacBook-Pro:~\n] DNX_TRACE=1 dnx\nLoaded module: dnx.coreclr.dylib\nFound export: CallApplicationMain\nUnhandled Exception:\n   Cannot print exception string because Exception.ToString() failed.\njrr@jrrs-MacBook-Pro:~\n```\nI suspect this may relate to 1) my installation of Homebrew into ~/.homebrew instead of /usr/local, and/or 2) changes to dynamic loader behavior in OSX 10.11\nCan anyone confirm that they have a working 1.0.0-beta8 on El Cap?\n. brew install icu4c seems insufficient to resolve this on my El Capitan system:\n```\n] dnvm list\nActive Version              Runtime Architecture OperatingSystem Alias\n------ -------              ------- ------------ --------------- -----\n  *    1.0.0-beta8          coreclr x64          darwin          default\njrr@jrrs-MacBook-Pro:~\n] brew info icu4c\nicu4c: stable 55.1, HEAD\nC/C++ and Java libraries for Unicode and globalization\nhttp://site.icu-project.org/\nThis formula is keg-only.\nOS X provides libicucore.dylib (but nothing else).\n/Users/jrr/.Homebrew/Cellar/icu4c/55.1 (244 files, 65M) *\n  Built from source\nFrom: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/icu4c.rb\n==> Options\n--c++11\n    Build using C++11 mode\n--universal\n    Build a universal binary\n--HEAD\n    Install HEAD version\n==> Caveats\nThis formula is keg-only, which means it was not symlinked into /Users/jrr/.Homebrew.\nOS X provides libicucore.dylib (but nothing else).\nGenerally there are no consequences of this for you. If you build your\nown software and it requires this formula, you'll need to add to your\nbuild variables:\nLDFLAGS:  -L/Users/jrr/.Homebrew/opt/icu4c/lib\nCPPFLAGS: -I/Users/jrr/.Homebrew/opt/icu4c/include\n\njrr@jrrs-MacBook-Pro:~\n] uname -a\nDarwin jrrs-MacBook-Pro.local 15.0.0 Darwin Kernel Version 15.0.0: Wed Aug 26 16:57:32 PDT 2015; root:xnu-3247.1.106~1/RELEASE_X86_64 x86_64\njrr@jrrs-MacBook-Pro:~\n] DNX_TRACE=1 dnx\nLoaded module: dnx.coreclr.dylib\nFound export: CallApplicationMain\nUnhandled Exception:\n   Cannot print exception string because Exception.ToString() failed.\njrr@jrrs-MacBook-Pro:~\n```\nI suspect this may relate to 1) my installation of Homebrew into ~/.homebrew instead of /usr/local, and/or 2) changes to dynamic loader behavior in OSX 10.11\nCan anyone confirm that they have a working 1.0.0-beta8 on El Cap?\n. @natemcmaster yep, that was it! Thanks.\n. @natemcmaster yep, that was it! Thanks.\n. ",
    "kaczasty": "I'm getting the same error on Arch Linux even after installing ICU. \n```\n\u21d2  pacman -Qi icu\nName           : icu\nVersion        : 55.1-1\nDescription    : International Components for Unicode library\nArchitecture   : x86_64\nURL            : http://www.icu-project.org/\n(...)\n\u21d2  dnx\nLoaded module: dnx.coreclr.so\nFound export: CallApplicationMain\nUnhandled Exception: \n   Cannot print exception string because Exception.ToString() failed.\n```\n. After downgrading icu to ver 52 dnx works fine. Thanks!\n. @jiggak Yes, I'm aware of that. I wouldn't recommend anyone doing this unless you just want to play around with core clr.\n. ",
    "jiggak": "@kaczasty After downgrading to icu 52 you'll find that several other packages in Arch will fail to work (chromium and nautilus to name two).\n. ",
    "LauriListak": "This is also a problem on Ubuntu 15.10 with libicu-dev and icu-devtools installed, had to manually install libicu52 and then CoreCLR works.\n. ",
    "lnu": "Same issue on OpenSuse tumbleweed(libicu 55).\n. Should do the trick :+1: \ni'll give it a try\nthanks\n. ",
    "brendanjbaker": "Just ran into this on Debian Stretch (\"testing\"). It uses libicu-dev version 55.1-7, which causes the behavior described above:\n```\nbaker@wardenclyffe:~$ dnx\nbaker@wardenclyffe:~$ echo $?\n0\nbaker@wardenclyffe:~$ export DNX_TRACE=1\nbaker@wardenclyffe:~$ dnx\nLoaded module: dnx.coreclr.so\nFound export: CallApplicationMain\nUnhandled Exception: \n   Cannot print exception string because Exception.ToString() failed.\nAborted\n```\nI was able to hack things together into a working state by forcing the installation of libicu-dev version 52.1-8+deb8u3. I did this by adding Debian stable's security updates repository and manually selecting that version to install. Not a viable solution long-term, but if you want to get up and running today on the testing distribution, try this...\nAdd the following to /etc/apt/sources.list:\ndeb http://security.debian.org/ jessie/updates main\ndeb-src http://security.debian.org/ jessie/updates main\nThen, manually select the old package to install:\napt-get install icu-devtools=52.1-8+deb8u3\nBingo, now things are working:\n```\nbaker@wardenclyffe:~$ dnu\nMicrosoft .NET Development Utility CoreClr-x64-1.0.0-rc2-16357\nUsage: dnu [options] [command]\nOptions:\n  -v|--verbose  Show verbose output\n  -?|-h|--help  Show help information\n  --version     Show version information\nCommands:\n  build             Produce assemblies for the project in given directory\n  clear-http-cache  Clears the package cache.\n  commands          Commands related to managing application commands (install, uninstall)\n  feeds             Commands related to managing package feeds currently in use\n  install           Install the given dependency\n  list              Print the dependencies of a given project\n  pack              Build NuGet packages for the project in given directory\n  packages          Commands related to managing local and remote packages folders\n  publish           Publish application for deployment\n  restore           Restore packages\n  wrap              Wrap a csproj/assembly into a project.json, which can be referenced by project.json files\nUse \"dnu [command] --help\" for more information about a command.\n```\nI'm not certain what the consequences are, if any, for engaging in this sort of package sorcery, so coder beware. Running apt-get update && apt-get upgrade unpacked the newer 55 version, but dnu and dnx kept working. Running dpkg-query -l seemed to indicate version 52 was living harmoniously alongside version 55:\nbaker@wardenclyffe:~$ dpkg-query -l | grep -i icu\nii  icu-devtools                          55.1-7                                 amd64        Development utilities for International Components for Unicode\nii  libharfbuzz-icu0:amd64                1.0.1-1+b1                             amd64        OpenType text shaping engine ICU backend\nii  libicu-dev:amd64                      55.1-7                                 amd64        Development files for International Components for Unicode\nii  libicu52:amd64                        52.1-8+deb8u3                          amd64        International Components for Unicode\nii  libicu55:amd64                        55.1-7                                 amd64        International Components for Unicode\nIf you run apt-get upgrade, it will suggest running apt autoremove to remove your libicu52. I'm not certain if there's a way to keep your version pegged at 52, or to instruct apt that you really do need version 52, etc.\n. ",
    "hacksdumb": "@natemcmaster \"Probably been discussed before. But why not use static linking?\" \nWould solve most of the issues. Also that dnx don't run out of the box on other Linux distributions than Ubuntu and I did not talk to anybody so far using Ubuntu on production.\nYou can try \"ldd dnx\" btw. to find which dependencies are missing.\n. ",
    "hubuk": "Yes, it may be related but in this case there is only one assembly named Application. There are no satellites.\n. Sorry for late response and thank you all for the comments.\nI have checked all the coreclr runtimes for x86 and x64 from 1.0.0-beta7 to 1.0.0-rc1-15798\nStarting from beta8-15616 a new exception is thrown instead of the old one:\nConsole\nPS ...\\Repro\\test\\Application.Tests> dnx test\nxUnit.net DNX Runner (64-bit DNXCore 5.0)\n  Discovering: Application.Tests\n  Discovered:  Application.Tests\n  Starting:    Application.Tests\n    Application.Tests.TestClass.Get [FAIL]\n      System.IO.FileNotFoundException : Could not load file or assembly 'Application, Version=1.0.0.0, Culture=en-US, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.\n      ---- System.IO.FileNotFoundException : Could not load the specified file.\n      Stack Trace:\n           at Application.Tests.TestClass..ctor()\n        ----- Inner Stack Trace -----\n           at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName(AssemblyName assemblyName)\n           at System.Runtime.Loader.AssemblyLoadContext.Resolve(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName)\n  Finished:    Application.Tests\n=== TEST EXECUTION SUMMARY ===\n   Application.Tests  Total: 1, Errors: 0, Failed: 1, Skipped: 0, Time: 0,199s\nBut I think this is exactly what @kirthik has already reported in #2902.\n. I am closing this issue as #2902 is probably a root cause for this problem. Will reopen if it turns out otherwise.\n. ",
    "dalpert-korewireless": "I have not played much with the new dnx bits yet, but found this post after running into a very similar behavior with an ASP.NET WebForms app running on .NET 4\n. ",
    "hahmed": "It looks like this is a connection string error after all... strange as I am defo setting this in my app, as that is working, in production (azure) I am setting the overrides too. It is not reading the connection string.\nThe error that I am getting is:\nLine 36:                .AddDbContext<ApplicationDbContext>(options =>\nLine 37:                {\nLine 38:                    options.UseSqlServer(config[\"ConnectionString\"]);\nLine 39:                });\nat Microsoft.Data.Entity.Utilities.Check.NotEmpty(String value, String parameterName)\nat Microsoft.Data.Entity.SqlServerDbContextOptionsExtensions.UseSqlServer(DbContextOptionsBuilder optionsBuilder, String connectionString)\nat Team.Startup.<>c__DisplayClass5_0.<ConfigureServices>b__0(DbContextOptionsBuilder options) in D:\\home\\site\\approot\\src\\repository\\Startup.cs:line 38\nHow can I ensure my connection string is being pulled out correctly from azure into my app/startup.cs\n. @snobu Thanks, looks like your code works, but only in production. That code will fail in the dev environment, i.e. locally.\nConfiguration[\"ConnectionString\"])\nThe code above will pull out the environment variable as set in azure as you have commented above however in development environment where I am using the connection string too, it is not found. As I am setting it in AppSettings.ConnectionString\nI was assuming portal simply overrides the settings/connection strings, looks like that is not happening yet (I appreciate this is being actively developed on) as we are trying to pull them out from the environment.\nI hope that makes sense... Looking for a solution that will work both in development and production hopefully.\n. Yes that did, thanks. Looks to me as though this is still a bug in azure, azure is not overriding the config settings - if that is the default behaviour. \nIf I moved my connection string out from app settings to connection strings (azure), how can I pull that out from the environment?\nConfiguration[\"Data:ConnectionString\"] does not work...?\n. @muratg \nIf I use Configuration[\"ConnectionString\"] as you mentioned, this will work in azure portal with the App Settings correctly giving me the connection string as you mentioned above. \nHowever the problem is, it does not work in development, it throws a connection string is null exception, below is the code with comments.\n```\nConfiguration = builder.Build(); // https://github.com/hahmed/TeamKudu/blob/master/Startup.cs#L27\nvar config = Configuration.GetSection(\"AppSettings\");\n services.AddEntityFramework()\n              .AddSqlServer()\n              .AddDbContext(options =>\n              {\n                  // config[\"ConnectionString\"] works for development env - we are getting this value from -> Configuration.GetSection(\"AppSettings\")\n                  // Configuration[\"ConnectionString\"] works for production - we are pulling this value out directly from -> IConfigurationRoot\n                  options.UseSqlServer(Configuration[\"ConnectionString\"]); \n              });\n```\nTo make this work for me, I basically did the below:\n```\nvar config = Configuration.GetSection(\"AppSettings\");\n            services.Configure(config, optionsName: null);\n        // Setup options with DI\n        services.AddOptions();\n\n        string connectionString = Configuration[\"ConnectionString\"];\n\n        // pull from host...\n        if(!IsDevelopment)\n        {\n            connectionString = config[\"ConnectionString\"];\n        }\n\n        services.AddEntityFramework()\n          .AddSqlServer()\n          .AddDbContext<ApplicationDbContext>(options =>\n          {\n              options.UseSqlServer(connectionString);\n          });\n\n```\nIn short for some reason azure portal is not correctly overriding the settings, unless I am pulling out the variables from the environment incorrectly for development. I have it working now with the code above.\nI now want to move the connection string from app settings on azure portal into connection string, how can I pull out that value from the environment. Configuration[\"What_do_I_put_here?\"]\n. Configuration[\"Data:DefaultConnection:ConnectionString\"] does not seem to work for me.\nI have checked the portal and I am correctly setting the value, also the scm is telling me the same thing, see attached screenshots.\n\n\n. @moozzyk Looking at this line, I am already adding the environment variables, just chaining the call...\nhttps://github.com/hahmed/TeamKudu/blob/master/Startup.cs#L24\nEdit - just updated my code to reflect what you mentioned and it made no difference.\n. ",
    "snobu": "You can have a look on this too https://github.com/aspnet/EntityFramework/wiki/Configuring-a-DbContext#dependency-injection-scenarios\n. This shoud work. It works on the test repo.\nc#\n        services.AddEntityFramework()\n          .AddSqlServer()\n          .AddDbContext<ApplicationDbContext>(options =>\n          {\n              options.UseSqlServer(Configuration[\"ConnectionString\"]);\n          });\nConnectionString is defined in the Azure Portal under your Web App -> App Settings\n\n. Maybe this helps?\nWorking with Multiple Environments\nhttp://docs.asp.net/en/theming/fundamentals/environments.html\n. According to this bit of information here, yes, app settings should override your config.json.\nhttps://github.com/aspnet/Home/wiki/Deploy-an-AspNet-vNext-application-to-Microsoft-Azure-websites#deploy-to-azure\nat least that's how I read it.\n\nIf your app has any general settings, create app settings from the portal with the same name. Value of this will override the one in your local config. \n\nDNX guys, is this still true with beta7?\n. ",
    "iamjasonp": "@mconnew identified this particular issue; I happened to be the one to shout loudly about it at the right time :smile: thanks!\n. ",
    "EgyTechnology": "Excuse me for stupid question. Because I'm new in vNext and this is my first step on working with.\nThis application it's going to be SPA application so I need to work with Entity Framework, Angular.js.\nHow I could setup this project to create application like this.\nAny way. The 'project.json'\n``` json\n{\n  \"webroot\": \"wwwroot\",\n  \"version\": \"1.0.0-*\",\n\"dependencies\": {\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-beta7\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-beta7\"\n  },\n\"commands\": {\n    \"web\": \"Microsoft.AspNet.Hosting --config hosting.ini\"\n  },\n\"frameworks\": {\n    \"dnx451\": { },\n    \"dnxcore50\": { }\n  },\n\"publishExclude\": [\n    \"node_modules\",\n    \"bower_components\",\n    \".xproj\",\n    \".user\",\n    \"**.vspscc\"\n  ],\n  \"exclude\": [\n    \"wwwroot\",\n    \"node_modules\",\n    \"bower_components\"\n  ]\n}\n```\n. When I change the DNX from beta 7 to beta 5 it's work after restoring all packages.\nbut when I using beta 7 it's did not work and gave me error.\n. ",
    "kpfaulkner": "Tried firing up the benchmarks project and I'm getting the same thing. Swear this was working fine a few days ago (before I pulled the latest)\n. ",
    "ashelley": "@JunTaoLuo \nDo you know what causes the changed value of these files to update the project? If I manually modify the assembly path visual studio still wants to use the old path and I'm not sure how to make it take into account my manually fixed values.\nEDIT: I found that closing then reopening visual studio 2015 RC1 made it take into account the new file contents\n. ",
    "rhires": "I had a similar issue with dnx ef just being broken when my code wasn't perfectly compilable, but that's how EF6 works now - you can't do a migration if your code has errors. I think the rationale is correct, even if it's a pain. I can imagine the work required to make sure that your models/entities/dbcontext(s) are correct, but ignore other stuff that isn't...\n. ",
    "khellang": ":shipit:\n. Ah, the good old BOM. Lovely! :heart:\n. I get the following when I do source ~/.dnx/dnvm/dnvm.sh in git bash on Windows :confused: \n\nsh.exe\": /c/Users/Kristian/.dnx/dnvm/dnvm.sh: line 177: conditional binary operator expected\nsh.exe\": /c/Users/Kristian/.dnx/dnvm/dnvm.sh: line 177: syntax error near =~'\nsh.exe\": /c/Users/Kristian/.dnx/dnvm/dnvm.sh: line 177:    if [[ \"$runtimeFullName\" =~ $DNVM_RUNTIME_PACKAGE_NAME-[^-.]-[^-.]-[^-.].._ ]];'\n\nhelp gives me GNU bash, version 3.1.23(6)-release (i686-pc-msys)\n. OK, I have no idea how to run the tests locally, and using the CI build to run them makes the feedback loop extremely painful. Anyone seen this error before?\n\nSystem.MissingMethodException : Constructor on type 'Microsoft.Dnx.Tooling.FunctionalTests.Old.DnuRestoreTests' not found.\n\nAll tests fail with the same error:\n\nMicrosoft.Dnx.Tooling.FunctionalTests  Total: 320, Errors: 0, Failed: 318, Skipped: 2, Time: 0,105s\n. Nevermind, hadn't set up the dev runtimes. Found a tiny message buried in a load of test failure stuff. I'll fix the tests ASAP.\n. @davidfowl The BuildManager picks Debug if no explicit configurations has been specified (see here). This commit passes Release to BuildManager for the dnu pack command if no configuration has been specified.\nIs it the default for compile too? So that things are undebuggable?\n\nI'm not sure what you mean? This only affects dnu pack. \nAre you usually packing NuGet packages so you can debug them? Or ship debug builds in your packages? Wouldn't you consider that being the exception, rather than the rule?\nYou can still package debug builds, if you want - you just have to be explicit; dnu pack --configuration Debug.\nAnyway, I guess this is moot, since you're killing off dnu. Let's hope the dotnet equivalent has better defaults.\n. BTW, @davidfowl, are you saying that dnu will be gone before RTM?\n. @davidfowl We're not talking about dnu build and dnu run, those are fine as-is - we're talking about dnu pack and possibly dnu publish; how often do you run dnu pack a day and why would you want the assemblies to be non-optimized?\n. Hey, I'm all for consistency, but I don't think we should be consistent just for consistency's sake, when it makes no sense.\n99% of devs will expect their package to be built using Release. It could also be a good idea to explicitly state which configuration is used when doing the actual packing (not sure if that's the case currently)?\nI've been bitten by the exact scenario @mgravell described above more than once.\n. > build is the same as pack\nThen why is there a separate command!? :confused: This is getting ridiculous sigh :disappointed: \n\nDebug should be the default and already is everywhere\n\nWhy? Can you give one good reason why? I hear you saying this, but you've yet to come up with a reason, other than \"I don't like it\".\n\nIf you don't want to publish debug builds then pass the release flag.\n\nBut when you expect it to build release in the first place, why would you even think about passing a flag?\n. Alright. I give up :cry: \n. > They are distinct commands and have different use cases.\nI think this is the whole point of this thread; they're different and should behave different. There's no need for consistency here.\n. @davidfowl Would you mind explaining what you use dnu pack for on a daily basis, and what it's supposed to be used for by library/framework authors? Is it not to create packages to push to NuGet etc.?\n. Having your CI server pushing to NuGet.org is one thing - I don't think it matters much in that case, since it's a machine \"typing the command\" anyway. But many smaller OSS projects don't necessarly have that infrastructure in place, or they're doing \"trunk-based\" development and don't want every commit to master resulting in a package on NuGet.org. They'd end up with the scenario that @mgravell mentioned above, at least the first couple of times, until you learn that you have to specify -c Release. As mentioned earlier, it would be nice to output to the console what configuration your packaging with.\nI guess we've settled the command itself and its defaults, -c Release should be fine. That I'm lazy and don't want to type --configuration Release is not really the main issue here. My main concern (which was the reason for this proposed change) hasn't been addressed yet; packages with debug binaries ending up on NuGet.org.\nIn this new world, where packages are the unit of reference, it would make sense to have a way to identify \"debug packages\" and have the push command warn/ask you if try to push them to NuGet.org, like @haacked mentioned on Twitter yesterday. Is that something that's possible today? Or do you have to guess what kind of binaries are in a package?\n. > Oops! That's a debug nupkg I just built. Same problem. It's just that msbuild has been around for ~15 years and dnu is a baby.\nThe difference is, as you mentioned, that msbuild already existed, and that NuGet had no control over building the binaries - it just had to accept what it received. Now these commands have been merged for specific use cases; making a single tool own the entire workflow. This means that you have more knowledge and could be \"smarter\" about building, packaging and publishing, IMO :smile:\n\nI could merge a PR for that  . You'd want to make it for the .NET CLI as well though.\n\nIs there any point? If you're saying it'll be removed by RTM, there won't be many releases left before it's gone. I'll definitely have it in mind for dotnet.\n\nIf I had my way (and it'll happen eventually)...\n\nSounds really nice :grin:\n. > Ideally, dnu pack would embed that information into the nupkg when packing.\nYes, that's what I meant. I see zip files supports an \"extra\" field in both local file, as well as central directory headers (see https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers). This could be utilized to add extra metadata that could be read without unzipping the manifest file. Don't know if the .NET APIs support these, though.\nUpdate: These fields are definitely read, but not exposed anywhere: https://github.com/dotnet/corefx/blob/c02d33b18398199f6acc17d375dab154e9a1df66/src/System.IO.Compression/src/System/IO/Compression/ZipArchiveEntry.cs#L40-L41\n. You should read through https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/standard-platform.md. It should answer some questions :smile:\n. > My understanding of nuget is that our preview package, which would have a net40 and a  net451 dll, will cause any customers using regular Windows Desktop .NET 4.5.1 (which should be most of them, I think) to now get our new 'preview dnx451' dll that has different signatures for APIs and will cause a massive break.\nI'm not sure I understand... If you have a package with net451 and net40, why would \"our new 'preview dnx451' dll\" be picked? Does the package also contain a dnx451 target? Besides, I don't think there should be any difference in surface area for net451 and dnx451?\n\nFurther, how does dotnet5.4 relate to our PCL Profile 111 dll that works with Xamarin?\n\nIt doesn't, but dotnet5.2 does. If you look at the document I linked, you'll see that profile 111 corresponds to netstandard1.1, which is the new name of dotnet5.2 (there's an off-by-one error in there :wink:)\n. This should've been fixed with https://github.com/dotnet/corefx/pull/1886 and/or https://github.com/dotnet/corefx/pull/3885, no? dnu might be writing some escape codes separately, though.\nEDIT: Yes, looks like AnsiConsole should be changed to just use regular Console now. Though a change might be throwaway, because dotnet is taking over.\n. @davidfowl https://github-issue-mover.appspot.com/? :stuck_out_tongue_closed_eyes: \n. If only C# had immutable object initializers :smile:\n. ",
    "latvalam": "Unfortunately looks like making the whole setup work with beta7 is a bit more of an undertaking I currently have time for. We are planning to upgrade to beta8 soon-ish, but not right now.\n. Works fine in rc1\n. ",
    "IDisposable": "I would vastly prefer #3740 getting implemented. Hash collisions are so hard to detect and mixing them with transient things like locks an semaphores makes it even harder.\n. ",
    "poizan42": "Well the current implementation has trivial collisions such as c:\\a\\b\\c and c:\\a_b\\c giving the same name.\nCompare that to Sha256 where (assuming it's not broken) you would have to generate a different hash every nanosecond for about 3.4*1020 years just to have 0.1% chance of getting a collision.\n. ",
    "dcbroad3": "Uploaded to: https://github.com/dcbroad3/TestWebService\nFrom administrative command prompt at src\\publish-output\\, running run.cmd allows opening http://localhost:5000 with no issues. \nHowever, running \"sc create TestWebService binPath= \"\\\"....src\\publish-output\\run.cmd\\\" --windows-service\", starting the service, and opening http://localhost:5000, yields a blank page, and the original above error is logged to the Event Log. \n. Thanks David. \nWhen you say it's not an MVC bug, are you saying it's a bug in something else, or are you saying that additional line is required by design? \n. ",
    "JasonRowe": "Even when the wrapped project doesn't have a nuget reference the publish is failing for me silently. The only reason I can tell it fails is the exit code and the wwwroot folder and the contents are not published.\n. ",
    "feldskov": "Just a note. I am experiencing the same problem (with csprojects not using nuget-packages).\nManually changing the framework in project.json in the wrap-folder from net451 to dnx451 will allow me to publish (after running \"dnu restore\"), but my error list in VS2015 will show a lot of errors (\"The type or namespace name \u2018abc\u2019 does not exist in the namespace\"). The solution builds fine, but shows a lot errors.\nLooking forward to a fix :)\n. ",
    "miragejb": "I have this exact same problem with Beta8.  Is this problem corrected?  If so, where can I find the fixes?\nThanks.\n. I would love to test it out for you.  Do you have any instructions on how to get and use the latest rc1 version of vnext?\nFrom: Murat Girgin [mailto:notifications@github.com] \nSent: Monday, November 9, 2015 1:45 PM\nTo: aspnet/dnx dnx@noreply.github.com\nCc: ICSharp joel.barber@gmail.com\nSubject: Re: [dnx] dnu publish on xproj referencing a csproj fails (#2954)\nCould you guys try this out with the current set of vnext packages (RC1-*) \n\u2014\nReply to this email directly or view it on GitHub https://github.com/aspnet/dnx/issues/2954#issuecomment-155151875 .  https://github.com/notifications/beacon/AJwJcPpZ_ncfbvl79YhRH3LLa9LEUhSCks5pEOE6gaJpZM4GMd02.gif \n. ",
    "Lakerfield": "@muratg dnu publish is working with beta8 with the following workaround\nUse a beta8 project with publish problem from above\ndnvm upgrade -u installs: dnx-clr-win-x86.1.0.0-rc2-16128 (tried to get rc1-* but not succeeded)\ndnu publish --out ... --runtime dnx-clr-win-x86.1.0.0-rc2-16128\nAfter publish copy dnx-clr-win-x64.1.0.0-beta8 runtime to approot/runtimes\nEdit run files to use dnx-clr-win-x64.1.0.0-beta8\nResult a working published version running on beta8\n. @muratg I found a bug in the workaround publish process with the rc2 bits. If the project wrap a console app instead of a class library. The publish doesn't copy the .exe file to the packages location. The .nuspec and project.json are there, but the lib/net45 directory doesn't exists\n. ",
    "gotvino": "@csunali How did you get it to work? Path relative to nuget.config does not seem to work for me. It adds the relative path twice.\n. ",
    "stankovski": "By the way, I've tried manually changing the the folder name inside nuget package from \"portable-net45+wp80+win8+wpa81\" to the one generated by dnx, but it didn't help...\n. @anurse \nUsing your project file I get the following lock file:\n{\n  \"locked\": false,\n  \"version\": 1,\n  \"targets\": {\n    \".NETPortable,Version=v4.5,Profile=Profile111\": {\n      \"Newtonsoft.Json/6.0.8\": {\n        \"type\": \"package\"\n      }\n    }\n  },\n  \"libraries\": {\n    \"Newtonsoft.Json/6.0.8\": {\n      \"type\": \"package\",\n      \"sha512\": \"7ut47NDedTW19EbL0JpFDYUP62fcuz27hJrehCDNajdCS5NtqL+E39+7Um3OkNc2wl2ym7K8Ln5eNuLus6mVGQ==\",\n      \"files\": [\n        \"lib/net20/Newtonsoft.Json.dll\",\n        \"lib/net20/Newtonsoft.Json.xml\",\n        \"lib/net35/Newtonsoft.Json.dll\",\n        \"lib/net35/Newtonsoft.Json.xml\",\n        \"lib/net40/Newtonsoft.Json.dll\",\n        \"lib/net40/Newtonsoft.Json.xml\",\n        \"lib/net45/Newtonsoft.Json.dll\",\n        \"lib/net45/Newtonsoft.Json.xml\",\n        \"lib/netcore45/Newtonsoft.Json.dll\",\n        \"lib/netcore45/Newtonsoft.Json.xml\",\n        \"lib/portable-net40+sl5+wp80+win8+wpa81/Newtonsoft.Json.dll\",\n        \"lib/portable-net40+sl5+wp80+win8+wpa81/Newtonsoft.Json.xml\",\n        \"lib/portable-net45+wp80+win8+wpa81+aspnetcore50/Newtonsoft.Json.dll\",\n        \"lib/portable-net45+wp80+win8+wpa81+aspnetcore50/Newtonsoft.Json.xml\",\n        \"Newtonsoft.Json.6.0.8.nupkg\",\n        \"Newtonsoft.Json.6.0.8.nupkg.sha512\",\n        \"Newtonsoft.Json.nuspec\",\n        \"tools/install.ps1\"\n      ]\n    }\n  },\n  \"projectFileDependencyGroups\": {\n    \"\": [],\n    \".NETPortable,Version=v4.5,Profile=Profile111\": [\n      \"Newtonsoft.Json >= 6.0.8\"\n    ]\n  }\n}\nI'm also on beta7:\ndnx --version\nMicrosoft .NET Execution environment\n Version:      1.0.0-beta7-15532\n Type:         CLR\n Architecture: x86\n OS Name:      Windows\n OS Version:   6.2.9200.0\n. I'm still seeing a similar issue with 1.0.0-rc2-16177 build.\nThe issue happens with Portable111 target that attempts to reference a nuget with the following lib folder \u201cportable-net45+win8+wpa81\u201d. If I manually change the folder to \u201cportable-net45+wp80+win8+wpa81+dnxcore50\u201d, dnu happily restores and builds. \nHere is a snippet of project.json:\n\"frameworks\": {\n  \".NETPortable,Version=v4.5,Profile=Profile111\": {\n    \"dependencies\": {\n      \"Microsoft.Rest.ClientRuntime.Azure\": \"2.1.0\"\n    },\n  }\n}\nHere is a content of C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETPortable\\v4.5\\Profile\\Profile111\\SupportedFrameworks:\n- .NET Framework 4.5.xml\n- ASP.NET Core 5.0.xml\n- Windows 8.xml\n- Windows Phone 8.1.xml\n. @anurse thanks!\n. @anurse what happened to this PR? Did the fix ever get into RC2 nightlies?\n. I'm still seeing the issue in 1.0.0-rc2-16177\n. ",
    "jaganjan": "any workaround for this issue? stack overflow \n. ",
    "rytmis": "Renaming the package directory from 0.0.5-alpha to 0.0.5-Alpha got me past the error.\n. ",
    "jordimontana82": "Jaysus ! I was going mad with the exact same issue.... thx a mill @yishaigalatzer !\n. If helps, the BOM can be removed easily using this command \nsed -i '1 s/^\\xef\\xbb\\xbf//' NuGet.config\nI've experienced the same issue while moving shell scripts edited in Windows to docker containers in linux and the command is really handy.\n. ",
    "naveensrinivasan": "Here is the output from the run\n```\nc:\\code\\coreclr>set DNX_FEED=https://www.myget.org/f/aspnebeta8\nc:\\code\\coreclr>dnvm upgrade\nDefault stable feed (https://www.nuget.org/api/v2) is being overridden by the va\nlue of the DNX_FEED environment variable (https://www.myget.org/f/aspnebeta8)\nDetermining latest version\nUnable to find any runtime packages on the feed!\nAt C:\\Program Files\\Microsoft DNX\\Dnvm\\dnvm.ps1:483 char:9\n+         throw \"Unable to find any runtime packages on the feed!\"\n+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : OperationStopped: (Unable to find ...es on the f\n   eed!:String) [], RuntimeException\n    + FullyQualifiedErrorId : Unable to find any runtime packages on the feed!\nc:\\code\\coreclr>\n```\n. Here is the output from the run\n```\nc:\\code\\coreclr>set DNX_FEED=https://www.myget.org/f/aspnebeta8\nc:\\code\\coreclr>dnvm upgrade\nDefault stable feed (https://www.nuget.org/api/v2) is being overridden by the va\nlue of the DNX_FEED environment variable (https://www.myget.org/f/aspnebeta8)\nDetermining latest version\nUnable to find any runtime packages on the feed!\nAt C:\\Program Files\\Microsoft DNX\\Dnvm\\dnvm.ps1:483 char:9\n+         throw \"Unable to find any runtime packages on the feed!\"\n+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : OperationStopped: (Unable to find ...es on the f\n   eed!:String) [], RuntimeException\n    + FullyQualifiedErrorId : Unable to find any runtime packages on the feed!\nc:\\code\\coreclr>\n```\n. Still having issues.\n```\nc:\\code\\coreclr>set DNX_FEED=https://www.myget.org/F/aspnetbeta8/api/v2\nc:\\code\\coreclr>dnvm upgrade\nDefault stable feed (https://www.nuget.org/api/v2) is being overridden by the va\nlue of the DNX_FEED environment variable (https://www.myget.org/F/aspnetbeta8/ap\ni/v2)\nDetermining latest version\nDownloading dnx-clr-win-x86.1.0.0-beta8 from https://www.myget.org/F/aspnetbeta8\n/api/v2\nInstalling to C:\\Users\\nsrinivasan.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta8\nAdding C:\\Users\\nsrinivasan.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta8\\bin to pro\ncess PATH\nAdding C:\\Users\\nsrinivasan.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta8\\bin to use\nr PATH\nUpdating alias 'default' to 'dnx-clr-win-x86.1.0.0-beta8'\nc:\\code\\coreclr>dnvm list\nActive Version         Runtime Architecture Location\n------ -------         ------- ------------ --------\n       1.0.0-beta5     clr     x64          C:\\Users\\nsrinivasan.dnx\\runtimes\n       1.0.0-beta5     clr     x86          C:\\Users\\nsrinivasan.dnx\\runtimes\n       1.0.0-beta5     coreclr x64          C:\\Users\\nsrinivasan.dnx\\runtimes\n       1.0.0-beta5     coreclr x86          C:\\Users\\nsrinivasan.dnx\\runtimes\n  *    1.0.0-beta8     clr     x86          C:\\Users\\nsrinivasan.dnx\\runtimes\n       1.0.0-rc1-15838 clr     x86          C:\\Users\\nsrinivasan.dnx\\runtimes\n       1.0.0-rc1-15838 coreclr x64          C:\\Users\\nsrinivasan.dnx\\runtimes\n       1.0.0-rc1-15838 coreclr x86          C:\\Users\\nsrinivasan.dnx\\runtimes\nc:\\code\\coreclr>dnu restore\nMicrosoft .NET Development Utility Clr-x86-1.0.0-beta8-15858\nCACHE https://www.nuget.org/api/v2/\n  CACHE https://api.nuget.org/v3/index.json\n  CACHE https://www.myget.org/F/aspnetbeta8/api/v3/index.json\nRestoring packages for c:\\code\\coreclr\\project.json\n  GET https://www.nuget.org/api/v2/FindPackagesById()?id='System.Console'\n  GET https://api.nuget.org/v3-flatcontainer/system.console/index.json\n  GET https://www.myget.org/F/aspnetbeta8/api/v3/flatcontainer/system.console/in\ndex.json\n  OK https://www.nuget.org/api/v2/FindPackagesById()?id='System.Console' 2885ms\n  OK https://api.nuget.org/v3-flatcontainer/system.console/index.json 2809ms\n  OK https://www.myget.org/F/aspnetbeta8/api/v3/flatcontainer/system.console/ind\nex.json 2917ms\nUnable to locate Dependency Microsoft.Net.Http\nWriting lock file c:\\code\\coreclr\\project.lock.json\nRestore complete, 3892ms elapsed\nErrors in c:\\code\\coreclr\\project.json\n    Unable to locate Dependency Microsoft.Net.Http\nNuGet Config files used:\n    C:\\Users\\nsrinivasan\\AppData\\Roaming\\NuGet\\nuget.config\nFeeds used:\n    https://www.nuget.org/api/v2/\n    https://api.nuget.org/v3-flatcontainer/\n    https://www.myget.org/F/aspnetbeta8/api/v3/flatcontainer/\nc:\\code\\coreclr>\n```\n. Ok. Here is my project.json\n{\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"Octokit\": \"0.16.0\"\n    },\n    \"frameworks\": {\n        \"dnx451\": { },\n        \"dnxcore50\": {\n            \"dependencies\": {\n                \"System.Console\": \"4.0.0-beta-*\"\n            }\n        }\n    }\n}\nIt is Octokit that in turn references Microsoft.Net.Http. I guess the library uses it for Http Client communication. \nWhich package should I use to run this?\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Net.Http;\nnamespace ConsoleApp2\n{\n    public class Program\n    {\n        public void Main(string[] args)\n        {\n            using (HttpClient client = new HttpClient())\n            {\n                Task task = client.GetStringAsync(\"https://github.com/\");\n                task.Wait();\n                Console.WriteLine(task.Result);\n            }\n            Console.WriteLine(\"exit!!\");\n        }\n    }\n}\n```\n. :ok: Got the basic sample working.\nHere is my project.json \n{\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"System.Net.Http\": \"4.0.1-beta-23409\"\n    },\n    \"frameworks\": {\n        \"dnx451\": { },\n        \"dnxcore50\": {\n            \"dependencies\": {\n                \"System.Console\": \"4.0.0-beta-*\"\n            }\n        }\n    }\n}\nHere is the code \n```\nusing System;\nusing System.Threading.Tasks;\nusing System.Net.Http;\nnamespace ConsoleApp2\n{\n    public class Program\n    {\n        public void Main(string[] args)\n        {\n            using (HttpClient client = new HttpClient())\n            {\n                Task task = client.GetStringAsync(\"https://github.com/\");\n                task.Wait();\n                Console.WriteLine(task.Result);\n            }\n            Console.WriteLine(\"exit!!\");\n        }\n    }\n}\n```\nI guess any library that uses Microsoft.Net.Http would have to move to System.Net.Http right?\n. :+1: \n. ",
    "jschwarty": "So the config should now contain JSON then? I had a hosting.ini file that looked like:\nserver=Microsoft.AspNet.Server.WebListener\nserver.urls=http://localhost:5000\nWhen I updated this to be:\njson\n{\n    \"server\" : \"Microsoft.AspNet.Server.WebListener\",\n    \"server.urls\" : \"http://localhost:5000\"\n}\nit worked. Is there updated documentation yet for beta8 that shows an example of this?\nThank you for the fast response!\n. ",
    "chrilith": "@jschwarty same for me. Had to convert it to JSON. Thanks!\n. ",
    "dcinzona": "From VS - that's the issue.\n. Here's a repository with the code: https://github.com/dcinzona/DNXBug\n. I can run from VS without debugging (ctrl+F5).  So these two packages prevent any debugging in VS (other than attaching? )\n. Actually, running without debugging also creates an error: \nError: This application requires DNX version 1.0.0-rc1-15904 or newer to run.\nNot sure why though (other than the obvious) but I have no reference to that DNX version within the project...\ndnvm upgrade -u -r clr only updates to rc1-15838\nOverriding the feed source to https://www.myget.org/F/aspnetcidev/api/v2/ and running dnvm upgrade -u -r clr\n. Heh, myget has the wrong feed url listed for dnvm.  Needs to be: https://www.myget.org/F/aspnetcidev/api/v2/\n. ",
    "linquize": "Yes, libcurl3-gnutls\n. ",
    "JohnGalt1717": "How does one specify which command get's run by Azure? I'd rather have web bet the hosting and kestral/azure be named \"azure\" or something if possible.\n. The site gets run locally on iis, etc. for unit testing and I want web to default to those configurations and azure be the deploy scenario.\nOn Dec 16, 2015 10:17 PM, David Fowler notifications@github.com wrote:\nWhy? What's special about the azure command?\n\nReply to this email directly or view it on GitHubhttps://github.com/aspnet/dnx/issues/2996#issuecomment-165325891.\n. If I have it this way:\n\"commands\": {\n    \"kestrel\": \"Microsoft.AspNet.Hosting --server Kestrel --server.urls http://localhost:45576\",\n    \"run\": \"run server.urls=http://localhost:45577\",\n    \"web\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:45578\"\n  },\nIt blows up in Azure and just hangs because it's assuming it should run \"web\" which isn't setup for kestrel.\nThis of course works:\n\"commands\": {\n    \"web\": \"Microsoft.AspNet.Server.Kestrel\",\n    \"kestrel\": \"Microsoft.AspNet.Hosting --server Kestrel --server.urls http://localhost:45576\",\n    \"run\": \"run server.urls=http://localhost:45577\",\n    \"Host\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:45578\"\n  }, \nBut there should be a way during publish to specify which command is used to launch on Azure. (or anywhere else)\n. What's the option in the publish profile? (It's not in the UI and I can't find any documentation.)\n. this is the closest to working that I've found: https://msdn.microsoft.com/en-us/library/vs/alm/build/azure/deploy-aspnet5\nBut it errors on the deploy to azure step and I have yet to figure out how to get release management do the deploy instead of the build step which for obvious reasons isn't the way you want it to work.\n. ",
    "AndreiGorlov": "If you publish your app as virutal app check these comments:\nhttps://github.com/aspnet/Hosting/issues/364#issuecomment-148752376\nhttps://github.com/aspnet/Hosting/issues/364#issuecomment-148755010\n. ",
    "dimsedane": "I removed the dnx451 framework since I am on a mac and it is my understanding i need the core framework to build locally.\nI also create a new free azure website, updated the git remote and now I get a new error:\nremote: .....\nremote: bower jquery-validation#1.11.1       not-cached git://github.com/jzaefferer/jquery-validation.git#1.11.1\nremote: bower jquery-validation#1.11.1          resolve git://github.com/jzaefferer/jquery-validation.git#1.11.1\nremote: bower hammer.js#2.0.4                not-cached git://github.com/hammerjs/hammer.js.git#2.0.4\nremote: bower hammer.js#2.0.4                   resolve git://github.com/hammerjs/hammer.js.git#2.0.4\nremote: bower jquery-validation-unobtrusive#3.2.2       not-cached git://github.com/aspnet/jquery-validation-unobtrusive.git#3.2.2\nremote: bower jquery-validation-unobtrusive#3.2.2          resolve git://github.com/aspnet/jquery-validation-unobtrusive.git#3.2.2\nremote: bower bootstrap#3.0.0                           not-cached git://github.com/twbs/bootstrap.git#3.0.0\nremote: bower bootstrap#3.0.0                              resolve git://github.com/twbs/bootstrap.git#3.0.0\nremote: bower bootstrap-touch-carousel#0.8.0            not-cached git://github.com/ixisio/bootstrap-touch-carousel.git#0.8.0\nremote: bower bootstrap-touch-carousel#0.8.0               resolve git://github.com/ixisio/bootstrap-touch-carousel.git#0.8.0\nremote: bower jquery-validation-unobtrusive#3.2.2         download https://github.com/aspnet/jquery-validation-unobtrusive/archive/v3.2.2.tar.gz\nremote: bower hammer.js#2.0.4                             download https://github.com/hammerjs/hammer.js/archive/2.0.4.tar.gz\nremote: bower jquery-validation#1.11.1                    download https://github.com/jzaefferer/jquery-validation/archive/1.11.1.tar.gz\nremote: bower bootstrap-touch-carousel#0.8.0              download https://github.com/ixisio/bootstrap-touch-carousel/archive/v0.8.0.tar.gz\nremote: bower bootstrap#3.0.0                             download https://github.com/twbs/bootstrap/archive/v3.0.0.tar.gz\nremote: bower jquery-validation-unobtrusive#3.2.2          extract archive.tar.gz\nremote: bower jquery-validation-unobtrusive#3.2.2     invalid-meta jquery-validation-unobtrusive is missing \"ignore\" entry in bower.json\nremote: bower jquery-validation-unobtrusive#3.2.2         resolved git://github.com/aspnet/jquery-validation-unobtrusive.git#3.2.2\nremote: bower hammer.js#2.0.4                              extract archive.tar.gz\nremote: bower bootstrap-touch-carousel#0.8.0               extract archive.tar.gz\nremote: bower hammer.js#2.0.4                                retry Decompression of archive.tar.gz failed with ENOSPC, trying with git..\nremote: bower jquery-validation#1.11.1                     extract archive.tar.gz\nremote: bower hammer.js#2.0.4                             checkout 2.0.4\nremote: bower bootstrap-touch-carousel#0.8.0              resolved git://github.com/ixisio/bootstrap-touch-carousel.git#0.8.0\nremote: bower jquery-validation#1.11.1                       retry Decompression of archive.tar.gz failed with ENOSPC, trying with git..\nremote: bower bootstrap#3.0.0                                retry Download of https://github.com/twbs/bootstrap/archive/v3.0.0.tar.gz failed with ENOSPC, trying with git..\nremote: bower bootstrap#3.0.0                             checkout v3.0.0\nremote: bower jquery#2.1.4                              not-cached git://github.com/jquery/jquery.git#2.1.4\nremote: bower jquery#2.1.4                                 resolve git://github.com/jquery/jquery.git#2.1.4\nremote: bower jquery#2.1.4                                download https://github.com/jquery/jquery/archive/2.1.4.tar.gz\nremote: bower jquery#2.1.4                                 extract archive.tar.gz\nremote: bower jquery#2.1.4                                   retry Decompression of archive.tar.gz failed with ENOSPC, trying with git..\nremote: bower jquery-validation#1.11.1                       EPERM EPERM, unlink 'D:\\local\\Temp\\WORKGROUP-RD00155D562DDD$\\bower\\jquery-validation-12848-iilsgU\\archive.tar.gz'\nremote: The 'prepublish' script failed with status code 1.\nremote: An error has occurred during web site deployment.\nremote: \nremote: Error - Changes committed to remote repository but deployment to website failed.\n. Okay, turned out that was a bower issue, which has since been fixed. \nHowever, I still had problems where requests would time out. I have just fixed that by removing the dnxcore50 framework from project.json and creating a global.json file with the following contents:\n{\n    \"sdk\": {\n        \"version\": \"1.0.0-beta8\",\n        \"runtime\": \"clr\"\n    },\n    \"packages\": \"packages\"\n}\nDeploying the application to azure using git now results in a working site. That you for your help!\n. ",
    "tdekoekkoek": "I'm getting this.  Pushing to Azure has been a nightmare.  Constant errors.  I can't even republish from within Visual Studio.\n. ",
    "artemgrygor": "Any updates here? Still have the same issue.\n. @GuardRex I was on Shared tier. On Basic it's fine, so I'm going with Basic one. Thanks\n. ",
    "mattfraley1": "I have run into the same problem with dnx46. However with dnx46, I received almost no information from the compiler, so tracking down the cause was a pain. This is easily reproducible:\n1. Create an empty asp.net 5 app\n2. Change dnx451 to dnx46 (Note I also removed core)\n3. Create folder Compiler\\PreProcess\n4. Create file RazorPreCompilation.cs\nAfter this, you would typically create a class that inherits from RazorPreCompileModule, however I have found that even an empty file will cause dnx to throw \"The design time host build failed with the following error: Object reference not set to an instance of an object.\"\n. Holy fast response batman! Thanks, adding dnx451 back in fixed it. Is this temporary? Will dnx46 support the precompilation module at some point, or do we just need to leave dnx451 in there?\n. ",
    "joelday": "I was seeing this after upgrading a project, but forgot to update global.json, too.\n. ",
    "dotboris": "This issue is super old and I've given up on the project I was playing with. Since this was probably me mis-configuring things I'm just going to close this. ",
    "theplastictoy": "On 14.04 LTS I get the same error. Looking at the ouptut when export DNX_TRACE=1, I get:\n```\nSemaphore: ~ $ dnu\nLoaded module: dnx.coreclr.so\nFound export: CallApplicationMain\nUnhandled Exception: System.ArgumentException: 'utf8' is not a supported encoding name. For information on defining a custom encoding, see the documentation for the Encoding.RegisterProvider method.\nParameter name: name\n   at System.Globalization.EncodingTable.GetCodePageFromName(String name)\n   at System.Text.Encoding.GetEncoding(String name)\n   at System.ConsolePal.GetConsoleEncoding()\n   at System.Console.CreateOutputWriter(Stream outputStream)\n   at System.Console.EnsureInitializedT\n   at System.Console.WriteLine(String format, Object[] arg)\n   at Microsoft.Dnx.Runtime.Logger.TraceInformation(String message, Object[] args)\n   at DomainManager.Execute(Int32 argc, Char* argv, NativeBootstrapperContext context)\n```\n. ",
    "luchen1021": "Based on sample code https://github.com/aspnet/dnx/blob/dev/misc/ResourcesTestProjects/ReadFromResources/src/ReadFromResources/Program.cs, I have to change the following line of code in generated Resources.Designer.cs by Visual Studio from\nglobal::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"AspNet5Beta8LegacyLibrary.LegacyLibrary.Ext.Properties.Resources\", typeof(Resources).Assembly);\nTo\nglobal::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"AspNet5Beta8LegacyLibrary.LegacyLibrary.Ext.Properties.Resources\", System.Reflection.Assembly.Load(typeof(Resources).Assembly.GetName()));\nEven the System.Reflection.Assembly.Load(typeof(Resources).FullName) does not work, has to be System.Reflection.Assembly.Load(typeof(Resources).Assembly.GetName()).\nIs this by design?  If so, how do we work around the issue with existing satallite resource assembly, which always use typeof(Resources).Assembly instead of System.Reflection.Assembly.Load(typeof(Resources).Assembly.GetName())?\nThank you.\n. Is there any update on this issue?  Will there be a fix for this issue in RC1?\nThank you!\n. ",
    "strohhut": "Problem also exists in RC 1.\n. ",
    "crokusek": "An improved workaround has been posted under https://github.com/aspnet/dnx/issues/3047 by crokusek.\n. There is a workaround posted in \n    3023 by\n    luchen1021 commented on Oct 20, 2015\nBut it does require access/modification to the Resources.Designer.cs \n. A better workaround--its reflection man to the rescue!!.  \nUsage (e.g. place in Startup.cs):\n```\n    PatchResourcesForDnx(typeof(YourNamespace.LocalizableResources.Resource));\nprivate void PatchResourcesForDnx(Type resourceType)\n{\n    // The resources are not retrievable by the standard compiled name in Resource.Designer.cs\n    // https://github.com/aspnet/dnx/issues/3023    // workaround by luchen1021 commented on Oct 20, 2015\n    // https://github.com/aspnet/dnx/issues/3047    // resource bug, this improvement, crokusek\n    // http://stackoverflow.com/questions/2330026   // overwrite static member\n\n    // Overwrite the private static member \"resourceMan\" using reflection\n    //\n    FieldInfo fieldInfo = resourceType.GetField(\"resourceMan\", BindingFlags.Static | BindingFlags.NonPublic);\n    fieldInfo.SetValue(null, new ResourceManager(resourceType.FullName, Assembly.Load(resourceType.Assembly.GetName())));            \n}\n\n```\n\n. ",
    "buuminh": "Has anyone managed to repro this issue?\n. Not having this issue in RC1 anymore.\n. ",
    "fmarcoux96": "Little typo: [...] that ships with the {?} to sign the assembly.\n. ",
    "alexmg": "It would be good if you defined what OSS signing is. The announcement doesn't describe how that is different to regular signing or why you would use one over the other.\n. Here is a link to the Open Source Signing documentation page for those who are interested.\nhttps://github.com/dotnet/corefx/blob/master/Documentation/project-docs/oss-signing.md\nIt might be worthwhile adding the link to the announcement for context.\n.  :thumbsup: \n. ",
    "andrejg": "Same happens on OSX on 1.0.0-rc2-16128. I was just poking around a controller, changing mappings for a viewmodel, when I this started to happen. And it happens on ALL projecs, so it must be a global issue. Restart does not help...\n. I managed to get around this. Check your project.json and update ALL the dependecies, that fixed it for me.\n. I'm on the latest rc2, and everything is fine now...\n. @TimMurphy  Well, you change the dependencies from\n\"dependencies\": {\n    \"EntityFramework.Commands\": \"7.0.0-rc1-*\",\nto\n\"dependencies\": {\n    \"EntityFramework.Commands\": \"7.0.0-rc2-*\",\nor whatever your target version is.\nThen type:\ndnu restore\nin the terminal and hit enter.\n. type 'dnvm list' into the terminal to check what runtime you are using \n. You have to consolidate the versions of your project and the runtime. Also, samples change from version to version. Check here https://github.com/aspnet/Home/tree/dev/samples\n. Sorry, my best bet was that you'd be using the wrong runtime. Would you paste the output of dnvm list?\n. Well, there is your problem. :) You see that 1.0.0-rc1-final coreclr x64 darwin is indicated as default? Now, when you run \"dnx run\" or however you run your app, it will use tthat instead of 1.0.0-rc1-update1 coreclr x64 darwin. So you need to set the default dot net version using the \"dnvm use\" command.\nGuessing that\ndnvm use 1.0.0-rc1-update1\nwould do it for you. Let me know.\n. But now you have switched to mono instead of coreclr? \n. Hmm, I have it set like that:\n    \"EntityFramework.MicrosoftSqlServer\": \"7.0.0-rc1-\",\n    \"Microsoft.AspNet.Authentication.Cookies\": \"1.0.0-rc1-\",\n    \"Microsoft.AspNet.Authentication.Facebook\": \"1.0.0-rc1-\",\n    \"Microsoft.AspNet.Authentication.Google\": \"1.0.0-rc1-\" ...\nYou might be getting rc2 versions if you are on the nightlies?\nAlso, if you don't care, I'd switch to mono version for now, there seems to be more supported stuff ATM.\n. So what does dnu restore produce?\n. Yeah, but could you paste the output, of dnu restore, so I can have a look at the versions?\n. :) Indeed...\n. Yep, that's it. You're on rc2.\nFor now, I'd change -* in all the references to -rc1-update1 and see if that works.\n. Oh, good, this was really starting to bug me ;)\n. Changing the lock file won't get you far. Having rc2 just means that you have some rc2 dependancies in your project file and they get run against the rc1 runtime... Look at project.json or post it here...\n. That was the problem. The project file is referring to \"1.0.0-\" of everything. This means that restore will get the latest version of the \"1.0.0-\", which used to be \"1.0.0-rc1-xxxxx\", but is now \"1.0.0-rc2-yyyyy\". So if you put \"1.0.0-rc1\" in your project file, that would fix the problem for you... \n. ",
    "ArlenFeldman": "Just installed 1.0.0-rc1-final and created the Web Application Basic (via yo aspnet), running on Windows. I have the same exception. I've not installed any previous versions of ASP.NET 5.0. Any idea on how to get around this?\n. Turned out that my active runtime was 1.0.0-rc2-16177. I switched it to 1.0.0-rc1-final and that seemed to fix my problem.\n. ",
    "thatzacdavis": "I also just downloaded and installed rc1 via yo and am getting the same error.\n. Thanks to @andrejg -- I am able to run now after doing the famous export MONO_MANAGED_WATCHER=false fix as well.\n. I got this with 1.0.0-rc1-final as well.\n. ",
    "TimMurphy": "@andrejg \n\nI managed to get around this. Check your project.json and update ALL the dependecies, that fixed it for me.\n\nFor a ASP.NET 5 n00b. How do you update ALL dependencies in project.json?\n. @andrejg \n\nI managed to get around this. Check your project.json and update ALL the dependecies, that fixed it for me.\n\nFor a ASP.NET 5 n00b. How do you update ALL dependencies in project.json?\n. ",
    "chemitaxis": "I have the same problem using the last version, 1.0.0-rc1-update1\n. I'm using last version... 1.0.0-rc1-update, Core...\nIt happens when I am executing MusicStore official example ASP.NET 5...\nAny ideas? Thanks!\n. Ok, thanks... I will check... but all dependencies are updated, revised code, frameworks, etc. Any tips? Thanks again!\n. Active Version              Runtime Architecture OperatingSystem Alias\n\n\n1.0.0-rc1-final      coreclr x64          darwin          default\n\n1.0.0-rc1-final      mono                 linux/osx\n       1.0.0-rc1-update1    coreclr x64          darwin\n       1.0.0-rc1-update1    mono                 linux/osx       \nHere you have ;)\n. Hi, thanks... I have changed it, I add captures... But the same error, changing it for all options... no way... I have tested with update1 in core and mono... The build command just works with mono update1 selected.\n\n\n\n\nThe error, on executing...\n\n. I have switched just for test... Actual environment:\n\nSame error:\n\n```\nproject.json file:\n{\n    \"authors\": [\n        \"Microsoft\"\n    ],\n    \"description\": \"Music store application on ASP.NET 5\",\n    \"version\": \"1.0.0-\",\n    \"compilationOptions\": { \"warningsAsErrors\": true, \"define\": [ \"DEMO\", \"TESTING\" ] },\n    \"compile\": [\n        \"../../shared//.cs\"\n    ],\n    \"publishExclude\": \".cmd\",\n    \"webroot\": \"wwwroot\",\n    \"dependencies\": {\n        \"EntityFramework.InMemory\": \"7.0.0-\",\n        \"EntityFramework.MicrosoftSqlServer\": \"7.0.0-\",\n        \"Microsoft.AspNet.Antiforgery\": \"1.0.0-\",\n        \"Microsoft.AspNet.Authentication.Cookies\": \"1.0.0-\",\n        \"Microsoft.AspNet.Authentication.Facebook\": \"1.0.0-\",\n        \"Microsoft.AspNet.Authentication.Google\": \"1.0.0-\",\n        \"Microsoft.AspNet.Authentication.MicrosoftAccount\": \"1.0.0-\",\n        \"Microsoft.AspNet.Authentication.OpenIdConnect\": \"1.0.0-\",\n        \"Microsoft.AspNet.Authentication.Twitter\": \"1.0.0-\",\n        \"Microsoft.AspNet.Diagnostics.Entity\": \"7.0.0-\",\n        \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-\",\n        \"Microsoft.AspNet.Mvc\": \"6.0.0-\",\n        \"Microsoft.AspNet.Mvc.TagHelpers\": \"6.0.0-\",\n        \"Microsoft.AspNet.Server.IIS\": \"1.0.0-\",\n        \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-\",\n        \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-\",\n        \"Microsoft.AspNet.Session\": \"1.0.0-\",\n        \"Microsoft.AspNet.StaticFiles\": \"1.0.0-\",\n        \"Microsoft.AspNet.Tooling.Razor\": \"1.0.0-\",\n        \"Microsoft.Extensions.CodeGenerators.Mvc\": \"1.0.0-\",\n        \"Microsoft.Extensions.Configuration.CommandLine\": \"1.0.0-\",\n        \"Microsoft.Extensions.Configuration.EnvironmentVariables\": \"1.0.0-\",\n        \"Microsoft.Extensions.Configuration.Json\": \"1.0.0-\",\n        \"Microsoft.Extensions.Logging.Console\": \"1.0.0-\"\n    },\n    \"commands\": {\n        \"gen\": \"Microsoft.Extensions.CodeGeneration\",\n        \"run\": \"run server.urls=http://localhost:5003\",\n        \"web\": \"Microsoft.AspNet.Server.Kestrel\",\n        \"kestrel\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.Kestrel --server.urls http://localhost:5004\",\n        \"weblistener\": \"Microsoft.AspNet.Hosting --server Microsoft.AspNet.Server.WebListener --server.urls http://localhost:5002\"\n    },\n    \"frameworks\": {\n      \"dnx451\": { },\n      \"dnxcore50\": {\n          \"dependencies\": {\n              \"System.Runtime.Serialization.Primitives\": \"4.0.10-\"\n          }\n      }\n    }\n}\n```\n. Hi @davidfowl thanks for your response... how can I add these services again? \n. Nop, same error...\nfail: Microsoft.AspNet.Diagnostics.ExceptionHandlerMiddleware[0]\n      An unhandled exception has occurred: Unable to resolve service for type 'Microsoft.Extensions.CompilationAbstractions.ILibraryExporter' while attempting to activate 'Microsoft.AspNet.Mvc.Razor.Compilation.RoslynCompilationService'.\n. dnu restore works fine... all OK, cache and OK... all green... this is crazy :(\n. With dnvm list:\n-    1.0.0-rc1-update1    mono                 linux/osx       default\n. Hi @davidfowl I will change manually it... to use rc1\nHi @andrejg, here you have DNU restore ouput:\n```\nMicrosoft .NET Development Utility Mono-x64-1.0.0-rc1-16231\nCACHE https://www.myget.org/F/aspnetcidev/api/v3/index.json\n  CACHE https://api.nuget.org/v3/index.json\nRestoring packages for /Users/chemitaxis/Downloads/MusicStore-dev/src/MusicStore/project.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/entityframework.inmemory/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/entityframework.inmemory/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/entityframework.microsoftsqlserver/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/entityframework.microsoftsqlserver/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.antiforgery/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.antiforgery/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.authentication.cookies/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.authentication.cookies/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.authentication.facebook/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.authentication.facebook/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.authentication.google/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.authentication.google/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.authentication.microsoftaccount/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.authentication.microsoftaccount/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.authentication.openidconnect/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.authentication.openidconnect/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.authentication.twitter/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.authentication.twitter/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.diagnostics.entity/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.diagnostics.entity/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.identity.entityframework/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.identity.entityframework/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.mvc/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.mvc/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.mvc.taghelpers/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.mvc.taghelpers/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.server.iis/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.server.iis/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.dataprotection.abstractions/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.dataprotection.abstractions/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.hosting/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.hosting/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.framework.configuration.environmentvariables/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.framework.configuration.environmentvariables/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.framework.configuration.ini/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.framework.configuration.ini/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.dnx.compilation.abstractions/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.dnx.compilation.abstractions/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.extensions.platformabstractions/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.extensions.platformabstractions/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.framework.webencoders.core/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.framework.webencoders.core/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.server.kestrel/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.server.kestrel/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.server.weblistener/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.server.weblistener/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.session/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.session/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.staticfiles/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.staticfiles/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.aspnet.tooling.razor/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.aspnet.tooling.razor/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.extensions.codegenerators.mvc/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.extensions.codegenerators.mvc/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.extensions.configuration.commandline/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.extensions.configuration.commandline/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.extensions.configuration.environmentvariables/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.extensions.configuration.environmentvariables/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.extensions.configuration.json/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.extensions.configuration.json/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.extensions.logging.console/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.extensions.logging.console/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.linq/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.linq/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.collections/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.collections/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.diagnostics.debug/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.diagnostics.debug/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.io/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.io/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.io.filesystem/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.io.filesystem/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.resources.resourcemanager/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.resources.resourcemanager/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.runtime.extensions/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.runtime.extensions/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.runtime.interopservices/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.runtime.interopservices/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.componentmodel/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.componentmodel/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/microsoft.win32.registry/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/microsoft.win32.registry/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.diagnostics.process/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.diagnostics.process/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.reflection.extensions/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.reflection.extensions/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.security.principal.windows/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.security.principal.windows/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.text.encoding/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.text.encoding/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.text.encoding.extensions/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.text.encoding.extensions/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.threading/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.threading/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.threading.threadpool/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.threading.threadpool/index.json\n  CACHE https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/system.runtime.serialization.primitives/index.json\n  CACHE https://api.nuget.org/v3-flatcontainer/system.runtime.serialization.primitives/index.json\nWriting lock file /Users/chemitaxis/Downloads/MusicStore-dev/src/MusicStore/project.lock.json\nRestore complete, 21911ms elapsed\nNuGet Config files used:\n    /Users/chemitaxis/.config/NuGet/nuget.config\n    /Users/chemitaxis/Downloads/MusicStore-dev/nuget.config\nFeeds used:\n    https://www.myget.org/F/aspnetcidev/api/v3/flatcontainer/\n    https://api.nuget.org/v3-flatcontainer/\n```\n. dnu build output:\n```\nMicrosoft .NET Development Utility Mono-x64-1.0.0-rc1-16231\nBuilding MusicStore for DNX,Version=v4.5.1\n  Using Project dependency MusicStore 1.0.0\n    Source: /Users/chemitaxis/Downloads/MusicStore-dev/src/MusicStore/project.json\nUsing Package dependency EntityFramework.Core 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.Core/7.0.0-rc2-16514\n    File: lib/dnx451/EntityFramework.Core.dll\nUsing Package dependency EntityFramework.InMemory 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.InMemory/7.0.0-rc2-16514\n    File: lib/net451/EntityFramework.InMemory.dll\nUsing Package dependency EntityFramework.MicrosoftSqlServer 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.MicrosoftSqlServer/7.0.0-rc2-16514\n    File: lib/net451/EntityFramework.MicrosoftSqlServer.dll\nUsing Package dependency EntityFramework.Relational 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.Relational/7.0.0-rc2-16514\n    File: lib/net451/EntityFramework.Relational.dll\nUsing Package dependency Ix-Async 1.2.5\n    Source: /Users/chemitaxis/.dnx/packages/Ix-Async/1.2.5\n    File: lib/net45/System.Interactive.Async.dll\nUsing Package dependency Microsoft.AspNet.Antiforgery 1.0.0-rc2-16030\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Antiforgery/1.0.0-rc2-16030\n    File: lib/net451/Microsoft.AspNet.Antiforgery.dll\nUsing Package dependency Microsoft.AspNet.Authentication 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Cookies 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Cookies/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.Cookies.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Facebook 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Facebook/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.Facebook.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Google 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Google/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.Google.dll\nUsing Package dependency Microsoft.AspNet.Authentication.MicrosoftAccount 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.MicrosoftAccount/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.MicrosoftAccount.dll\nUsing Package dependency Microsoft.AspNet.Authentication.OAuth 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.OAuth/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.OAuth.dll\nUsing Package dependency Microsoft.AspNet.Authentication.OpenIdConnect 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.OpenIdConnect/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.OpenIdConnect.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Twitter 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Twitter/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.Twitter.dll\nUsing Package dependency Microsoft.AspNet.Authorization 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authorization/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authorization.dll\nUsing Package dependency Microsoft.AspNet.Cors 6.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Cors/6.0.0-rc2-16027\n    File: lib/net451/Microsoft.AspNet.Cors.dll\nUsing Package dependency Microsoft.AspNet.Cryptography.Internal 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Cryptography.Internal/1.0.0-rc2-15907\n    File: lib/net451/Microsoft.AspNet.Cryptography.Internal.dll\nUsing Package dependency Microsoft.AspNet.Cryptography.KeyDerivation 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Cryptography.KeyDerivation/1.0.0-rc2-15907\n    File: lib/net451/Microsoft.AspNet.Cryptography.KeyDerivation.dll\nUsing Package dependency Microsoft.AspNet.DataProtection 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.DataProtection/1.0.0-rc2-15907\n    File: lib/net451/Microsoft.AspNet.DataProtection.dll\nUsing Package dependency Microsoft.AspNet.DataProtection.Abstractions 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.DataProtection.Abstractions/1.0.0-rc2-15907\n    File: lib/net451/Microsoft.AspNet.DataProtection.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Diagnostics 1.0.0-rc2-16290\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Diagnostics/1.0.0-rc2-16290\n    File: lib/net451/Microsoft.AspNet.Diagnostics.dll\nUsing Package dependency Microsoft.AspNet.Diagnostics.Abstractions 1.0.0-rc2-16290\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Diagnostics.Abstractions/1.0.0-rc2-16290\n    File: lib/net451/Microsoft.AspNet.Diagnostics.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Diagnostics.Entity 7.0.0-rc2-16290\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Diagnostics.Entity/7.0.0-rc2-16290\n    File: lib/net451/Microsoft.AspNet.Diagnostics.Entity.dll\nUsing Package dependency Microsoft.AspNet.FileProviders.Abstractions 1.0.0-rc2-15868\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.FileProviders.Abstractions/1.0.0-rc2-15868\n    File: lib/net451/Microsoft.AspNet.FileProviders.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.FileProviders.Physical 1.0.0-rc2-15868\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.FileProviders.Physical/1.0.0-rc2-15868\n    File: lib/net451/Microsoft.AspNet.FileProviders.Physical.dll\nUsing Package dependency Microsoft.AspNet.Hosting 1.0.0-rc2-16080\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Hosting/1.0.0-rc2-16080\n    File: lib/dnx451/Microsoft.AspNet.Hosting.dll\nUsing Package dependency Microsoft.AspNet.Hosting.Abstractions 1.0.0-rc2-16080\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Hosting.Abstractions/1.0.0-rc2-16080\n    File: lib/net451/Microsoft.AspNet.Hosting.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Hosting.Server.Abstractions 1.0.0-rc2-16080\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Hosting.Server.Abstractions/1.0.0-rc2-16080\n    File: lib/net451/Microsoft.AspNet.Hosting.Server.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Html.Abstractions 1.0.0-rc2-16035\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Html.Abstractions/1.0.0-rc2-16035\n    File: lib/net451/Microsoft.AspNet.Html.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Http 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http/1.0.0-rc2-16042\n    File: lib/net451/Microsoft.AspNet.Http.dll\nUsing Package dependency Microsoft.AspNet.Http.Abstractions 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http.Abstractions/1.0.0-rc2-16042\n    File: lib/net451/Microsoft.AspNet.Http.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Http.Extensions 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http.Extensions/1.0.0-rc2-16042\n    File: lib/net451/Microsoft.AspNet.Http.Extensions.dll\nUsing Package dependency Microsoft.AspNet.Http.Features 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http.Features/1.0.0-rc2-16042\n    File: lib/net451/Microsoft.AspNet.Http.Features.dll\nUsing Package dependency Microsoft.AspNet.Identity 3.0.0-rc2-16195\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Identity/3.0.0-rc2-16195\n    File: lib/net451/Microsoft.AspNet.Identity.dll\nUsing Package dependency Microsoft.AspNet.Identity.EntityFramework 3.0.0-rc2-16195\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Identity.EntityFramework/3.0.0-rc2-16195\n    File: lib/net451/Microsoft.AspNet.Identity.EntityFramework.dll\nUsing Package dependency Microsoft.AspNet.JsonPatch 1.0.0-rc2-16100\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.JsonPatch/1.0.0-rc2-16100\n    File: lib/net451/Microsoft.AspNet.JsonPatch.dll\nUsing Package dependency Microsoft.AspNet.Loader.IIS 1.0.0-beta8-15621\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Loader.IIS/1.0.0-beta8-15621\n    File: lib/dnx451/Microsoft.AspNet.Loader.IIS.dll\nUsing Package dependency Microsoft.AspNet.Loader.IIS.Interop 1.0.0-beta8-15621\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Loader.IIS.Interop/1.0.0-beta8-15621\nUsing Package dependency Microsoft.AspNet.Localization 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Localization/1.0.0-rc2-16059\n    File: lib/net451/Microsoft.AspNet.Localization.dll\nUsing Package dependency Microsoft.AspNet.Mvc 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Abstractions 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Abstractions/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Mvc.ApiExplorer 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.ApiExplorer/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.ApiExplorer.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Core 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Core/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.Core.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Cors 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Cors/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.Cors.dll\nUsing Package dependency Microsoft.AspNet.Mvc.DataAnnotations 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.DataAnnotations/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.DataAnnotations.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Formatters.Json 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Formatters.Json/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.Formatters.Json.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Localization 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Localization/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.Localization.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Razor 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Razor/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.Razor.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Razor.Host 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Razor.Host/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.Razor.Host.dll\nUsing Package dependency Microsoft.AspNet.Mvc.TagHelpers 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.TagHelpers/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.TagHelpers.dll\nUsing Package dependency Microsoft.AspNet.Mvc.ViewFeatures 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.ViewFeatures/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.ViewFeatures.dll\nUsing Package dependency Microsoft.AspNet.Razor 4.0.0-rc2-16032\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Razor/4.0.0-rc2-16032\n    File: lib/net451/Microsoft.AspNet.Razor.dll\nUsing Package dependency Microsoft.AspNet.Razor.Runtime 4.0.0-rc2-16032\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Razor.Runtime/4.0.0-rc2-16032\n    File: lib/net451/Microsoft.AspNet.Razor.Runtime.dll\nUsing Package dependency Microsoft.AspNet.Razor.Runtime.Precompilation 4.0.0-rc2-16032\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Razor.Runtime.Precompilation/4.0.0-rc2-16032\n    File: lib/net451/Microsoft.AspNet.Razor.Runtime.Precompilation.dll\nUsing Package dependency Microsoft.AspNet.Routing 1.0.0-rc2-16046\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Routing/1.0.0-rc2-16046\n    File: lib/net451/Microsoft.AspNet.Routing.dll\nUsing Package dependency Microsoft.AspNet.Routing.Abstractions 1.0.0-rc2-16046\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Routing.Abstractions/1.0.0-rc2-16046\n    File: lib/net451/Microsoft.AspNet.Routing.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Server.IIS 1.0.0-beta8-15621\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Server.IIS/1.0.0-beta8-15621\nUsing Package dependency Microsoft.AspNet.Server.Kestrel 1.0.0-rc2-16144\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Server.Kestrel/1.0.0-rc2-16144\n    File: lib/dnx451/Microsoft.AspNet.Server.Kestrel.dll\nUsing Package dependency Microsoft.AspNet.Server.WebListener 1.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Server.WebListener/1.0.0-rc2-16027\n    File: lib/dnx451/Microsoft.AspNet.Server.WebListener.dll\nUsing Package dependency Microsoft.AspNet.Session 1.0.0-rc2-16038\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Session/1.0.0-rc2-16038\n    File: lib/net451/Microsoft.AspNet.Session.dll\nUsing Package dependency Microsoft.AspNet.StaticFiles 1.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.StaticFiles/1.0.0-rc2-16027\n    File: lib/net451/Microsoft.AspNet.StaticFiles.dll\nUsing Package dependency Microsoft.AspNet.Tooling.Razor 1.0.0-rc2-15987\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Tooling.Razor/1.0.0-rc2-15987\n    File: lib/net451/Microsoft.AspNet.Tooling.Razor.dll\nUsing Package dependency Microsoft.AspNet.WebUtilities 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.WebUtilities/1.0.0-rc2-16042\n    File: lib/net451/Microsoft.AspNet.WebUtilities.dll\nUsing Package dependency Microsoft.CodeAnalysis.Analyzers 1.0.0\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.CodeAnalysis.Analyzers/1.0.0\nUsing Package dependency Microsoft.CodeAnalysis.Common 1.1.0-rc1-20151109-01\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.CodeAnalysis.Common/1.1.0-rc1-20151109-01\n    File: lib/net45/Microsoft.CodeAnalysis.dll\nUsing Package dependency Microsoft.CodeAnalysis.CSharp 1.1.0-rc1-20151109-01\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.CodeAnalysis.CSharp/1.1.0-rc1-20151109-01\n    File: lib/net45/Microsoft.CodeAnalysis.CSharp.dll\nUsing Package dependency Microsoft.Dnx.Compilation.Abstractions 1.0.0-rc1-16048\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Dnx.Compilation.Abstractions/1.0.0-rc1-16048\n    File: lib/net451/Microsoft.Dnx.Compilation.Abstractions.dll\nUsing Package dependency Microsoft.Dnx.Compilation.CSharp.Abstractions 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Dnx.Compilation.CSharp.Abstractions/1.0.0-rc2-16278\n    File: lib/net451/Microsoft.Dnx.Compilation.CSharp.Abstractions.dll\nUsing Package dependency Microsoft.Dnx.Compilation.CSharp.Common 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Dnx.Compilation.CSharp.Common/1.0.0-rc2-16278\n    File: lib/net451/Microsoft.Dnx.Compilation.CSharp.Common.dll\nUsing Package dependency Microsoft.Extensions.Caching.Abstractions 1.0.0-rc2-15921\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Caching.Abstractions/1.0.0-rc2-15921\n    File: lib/net451/Microsoft.Extensions.Caching.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Caching.Memory 1.0.0-rc2-15921\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Caching.Memory/1.0.0-rc2-15921\n    File: lib/net451/Microsoft.Extensions.Caching.Memory.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration/1.0.0-rc2-16141\n    File: lib/dnx451/Microsoft.Extensions.CodeGeneration.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration.Core 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration.Core/1.0.0-rc2-16141\n    File: lib/dnx451/Microsoft.Extensions.CodeGeneration.Core.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration.EntityFramework 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration.EntityFramework/1.0.0-rc2-16141\n    File: lib/dnx451/Microsoft.Extensions.CodeGeneration.EntityFramework.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration.Templating 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration.Templating/1.0.0-rc2-16141\n    File: lib/dnx451/Microsoft.Extensions.CodeGeneration.Templating.dll\nUsing Package dependency Microsoft.Extensions.CodeGenerators.Mvc 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGenerators.Mvc/1.0.0-rc2-16141\n    File: lib/dnx451/Microsoft.Extensions.CodeGenerators.Mvc.dll\nUsing Package dependency Microsoft.Extensions.CompilationAbstractions 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CompilationAbstractions/1.0.0-rc2-16278\n    File: lib/net451/Microsoft.Extensions.CompilationAbstractions.dll\nUsing Package dependency Microsoft.Extensions.Configuration 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration/1.0.0-rc2-15897\n    File: lib/net451/Microsoft.Extensions.Configuration.dll\nUsing Package dependency Microsoft.Extensions.Configuration.Abstractions 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.Abstractions/1.0.0-rc2-15897\n    File: lib/net451/Microsoft.Extensions.Configuration.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Configuration.Binder 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.Binder/1.0.0-rc2-15897\n    File: lib/net451/Microsoft.Extensions.Configuration.Binder.dll\nUsing Package dependency Microsoft.Extensions.Configuration.CommandLine 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.CommandLine/1.0.0-rc2-15897\n    File: lib/net451/Microsoft.Extensions.Configuration.CommandLine.dll\nUsing Package dependency Microsoft.Extensions.Configuration.EnvironmentVariables 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.EnvironmentVariables/1.0.0-rc2-15897\n    File: lib/net451/Microsoft.Extensions.Configuration.EnvironmentVariables.dll\nUsing Package dependency Microsoft.Extensions.Configuration.FileExtensions 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.FileExtensions/1.0.0-rc2-15897\n    File: lib/net451/Microsoft.Extensions.Configuration.FileExtensions.dll\nUsing Package dependency Microsoft.Extensions.Configuration.Json 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.Json/1.0.0-rc2-15897\n    File: lib/net451/Microsoft.Extensions.Configuration.Json.dll\nUsing Package dependency Microsoft.Extensions.DependencyInjection 1.0.0-rc2-15864\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.DependencyInjection/1.0.0-rc2-15864\n    File: lib/net451/Microsoft.Extensions.DependencyInjection.dll\nUsing Package dependency Microsoft.Extensions.DependencyInjection.Abstractions 1.0.0-rc2-15864\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.DependencyInjection.Abstractions/1.0.0-rc2-15864\n    File: lib/net451/Microsoft.Extensions.DependencyInjection.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.FileSystemGlobbing 1.0.0-rc2-15868\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.FileSystemGlobbing/1.0.0-rc2-15868\n    File: lib/net451/Microsoft.Extensions.FileSystemGlobbing.dll\nUsing Package dependency Microsoft.Extensions.Globalization.CultureInfoCache 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Globalization.CultureInfoCache/1.0.0-rc2-16059\n    File: lib/net451/Microsoft.Extensions.Globalization.CultureInfoCache.dll\nUsing Package dependency Microsoft.Extensions.Localization 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Localization/1.0.0-rc2-16059\n    File: lib/net451/Microsoft.Extensions.Localization.dll\nUsing Package dependency Microsoft.Extensions.Localization.Abstractions 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Localization.Abstractions/1.0.0-rc2-16059\n    File: lib/net451/Microsoft.Extensions.Localization.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Logging 1.0.0-rc2-15900\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Logging/1.0.0-rc2-15900\n    File: lib/net451/Microsoft.Extensions.Logging.dll\nUsing Package dependency Microsoft.Extensions.Logging.Abstractions 1.0.0-rc2-15900\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Logging.Abstractions/1.0.0-rc2-15900\n    File: lib/net451/Microsoft.Extensions.Logging.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Logging.Console 1.0.0-rc2-15900\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Logging.Console/1.0.0-rc2-15900\n    File: lib/net451/Microsoft.Extensions.Logging.Console.dll\nUsing Package dependency Microsoft.Extensions.MemoryPool 1.0.0-rc2-15913\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.MemoryPool/1.0.0-rc2-15913\n    File: lib/net451/Microsoft.Extensions.MemoryPool.dll\nUsing Package dependency Microsoft.Extensions.OptionsModel 1.0.0-rc2-15878\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.OptionsModel/1.0.0-rc2-15878\n    File: lib/net451/Microsoft.Extensions.OptionsModel.dll\nUsing Package dependency Microsoft.Extensions.PlatformAbstractions 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.PlatformAbstractions/1.0.0-rc2-16278\n    File: lib/net451/Microsoft.Extensions.PlatformAbstractions.dll\nUsing Package dependency Microsoft.Extensions.Primitives 1.0.0-rc2-15913\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Primitives/1.0.0-rc2-15913\n    File: lib/net451/Microsoft.Extensions.Primitives.dll\nUsing Package dependency Microsoft.Extensions.WebEncoders 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.WebEncoders/1.0.0-rc2-16042\n    File: lib/net451/Microsoft.Extensions.WebEncoders.dll\nUsing Package dependency Microsoft.Framework.Configuration 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration/1.0.0-rc1-15669\n    File: lib/dnx451/Microsoft.Framework.Configuration.dll\nUsing Package dependency Microsoft.Framework.Configuration.Abstractions 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.Abstractions/1.0.0-rc1-15669\n    File: lib/dnx451/Microsoft.Framework.Configuration.Abstractions.dll\nUsing Package dependency Microsoft.Framework.Configuration.EnvironmentVariables 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.EnvironmentVariables/1.0.0-rc1-15669\n    File: lib/dnx451/Microsoft.Framework.Configuration.EnvironmentVariables.dll\nUsing Package dependency Microsoft.Framework.Configuration.FileExtensions 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.FileExtensions/1.0.0-rc1-15669\n    File: lib/dnx451/Microsoft.Framework.Configuration.FileExtensions.dll\nUsing Package dependency Microsoft.Framework.Configuration.Ini 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.Ini/1.0.0-rc1-15669\n    File: lib/dnx451/Microsoft.Framework.Configuration.Ini.dll\nUsing Package dependency Microsoft.Framework.WebEncoders.Core 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.WebEncoders.Core/1.0.0-rc1-15669\n    File: lib/dnx451/Microsoft.Framework.WebEncoders.Core.dll\nUsing Package dependency Microsoft.IdentityModel.Logging 1.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.IdentityModel.Logging/1.0.0-rc2-212080021\n    File: lib/net451/Microsoft.IdentityModel.Logging.dll\nUsing Package dependency Microsoft.IdentityModel.Protocols 2.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.IdentityModel.Protocols/2.0.0-rc2-212080021\n    File: lib/net451/Microsoft.IdentityModel.Protocols.dll\nUsing Package dependency Microsoft.IdentityModel.Protocols.OpenIdConnect 2.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.IdentityModel.Protocols.OpenIdConnect/2.0.0-rc2-212080021\n    File: lib/net451/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll\nUsing Package dependency Microsoft.Net.Http.Headers 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Net.Http.Headers/1.0.0-rc2-16042\n    File: lib/net451/Microsoft.Net.Http.Headers.dll\nUsing Package dependency Microsoft.Net.Http.Server 1.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Net.Http.Server/1.0.0-rc2-16027\n    File: lib/net451/Microsoft.Net.Http.Server.dll\nUsing Package dependency Newtonsoft.Json 6.0.6\n    Source: /Users/chemitaxis/.dnx/packages/Newtonsoft.Json/6.0.6\n    File: lib/net45/Newtonsoft.Json.dll\nUsing Package dependency Remotion.Linq 2.0.1\n    Source: /Users/chemitaxis/.dnx/packages/Remotion.Linq/2.0.1\n    File: lib/net45/Remotion.Linq.dll\nUsing Package dependency System.Collections 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Collections/4.0.0\nUsing Package dependency System.Collections.Immutable 1.1.37\n    Source: /Users/chemitaxis/.dnx/packages/System.Collections.Immutable/1.1.37\n    File: lib/dotnet/System.Collections.Immutable.dll\nUsing Package dependency System.Diagnostics.Debug 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.Debug/4.0.0\nUsing Package dependency System.Diagnostics.DiagnosticSource 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.DiagnosticSource/4.0.0-rc2-23608\n    File: lib/dotnet5.2/System.Diagnostics.DiagnosticSource.dll\nUsing Package dependency System.Globalization 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Globalization/4.0.0\nUsing Package dependency System.IdentityModel.Tokens 5.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/System.IdentityModel.Tokens/5.0.0-rc2-212080021\n    File: lib/net451/System.IdentityModel.Tokens.dll\nUsing Package dependency System.IdentityModel.Tokens.Jwt 5.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/System.IdentityModel.Tokens.Jwt/5.0.0-rc2-212080021\n    File: lib/net451/System.IdentityModel.Tokens.Jwt.dll\nUsing Package dependency System.IO 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.IO/4.0.0\nUsing Package dependency System.Linq 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Linq/4.0.0\nUsing Package dependency System.Numerics.Vectors 4.1.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Numerics.Vectors/4.1.1-rc2-23608\n    File: lib/portable-net45+win8/System.Numerics.Vectors.dll\nUsing Package dependency System.Reflection 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection/4.0.0\nUsing Package dependency System.Reflection.Extensions 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Extensions/4.0.0\nUsing Package dependency System.Reflection.Metadata 1.1.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Metadata/1.1.0\n    File: lib/dotnet5.2/System.Reflection.Metadata.dll\nUsing Package dependency System.Reflection.Primitives 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Primitives/4.0.0\nUsing Package dependency System.Resources.ResourceManager 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Resources.ResourceManager/4.0.0\nUsing Package dependency System.Runtime 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime/4.0.0\nUsing Package dependency System.Runtime.Extensions 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.Extensions/4.0.0\nUsing Package dependency System.Runtime.InteropServices 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.InteropServices/4.0.0\nUsing Package dependency System.Runtime.InteropServices.RuntimeInformation 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.InteropServices.RuntimeInformation/4.0.0-rc2-23608\n    File: ref/dotnet5.1/System.Runtime.InteropServices.RuntimeInformation.dll\nUsing Package dependency System.Text.Encoding 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.Encoding/4.0.0\nUsing Package dependency System.Text.Encoding.Extensions 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.Encoding.Extensions/4.0.0\nUsing Package dependency System.Text.Encodings.Web 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.Encodings.Web/4.0.0-rc2-23608\n    File: lib/dotnet5.1/System.Text.Encodings.Web.dll\nUsing Package dependency System.Threading 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading/4.0.0\nUsing Assembly dependency fx/mscorlib 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/mscorlib.dll\nUsing Assembly dependency fx/System 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.dll\nUsing Assembly dependency fx/System.Core 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Core.dll\nUsing Assembly dependency fx/Microsoft.CSharp 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Microsoft.CSharp.dll\nUsing Assembly dependency fx/System.Collections 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Collections.dll\nUsing Assembly dependency fx/System.ComponentModel.DataAnnotations 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.ComponentModel.DataAnnotations.dll\nUsing Assembly dependency fx/System.Diagnostics.Debug 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Diagnostics.Debug.dll\nUsing Assembly dependency fx/System.Diagnostics.Tools 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Diagnostics.Tools.dll\nUsing Assembly dependency fx/System.Globalization 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Globalization.dll\nUsing Assembly dependency fx/System.Linq 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Linq.dll\nUsing Assembly dependency fx/System.Linq.Expressions 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Linq.Expressions.dll\nUsing Assembly dependency fx/System.Linq.Queryable 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Linq.Queryable.dll\nUsing Assembly dependency fx/System.ObjectModel 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.ObjectModel.dll\nUsing Assembly dependency fx/System.Reflection 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Reflection.dll\nUsing Assembly dependency fx/System.Reflection.Extensions 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Reflection.Extensions.dll\nUsing Assembly dependency fx/System.Resources.ResourceManager 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Resources.ResourceManager.dll\nUsing Assembly dependency fx/System.Runtime 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Runtime.dll\nUsing Assembly dependency fx/System.Runtime.Extensions 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Runtime.Extensions.dll\nUsing Assembly dependency fx/System.Threading 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Threading.dll\nUsing Assembly dependency fx/System.Data 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Data.dll\nUsing Assembly dependency fx/System.Transactions 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Transactions.dll\nUsing Assembly dependency fx/System.Net.Http 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Net.Http.dll\nUsing Assembly dependency fx/System.IO 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.IO.dll\nUsing Assembly dependency fx/System.Security 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Security.dll\nUsing Assembly dependency fx/System.Xml 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Xml.dll\nUsing Assembly dependency fx/System.Xml.Linq 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Xml.Linq.dll\nUsing Assembly dependency fx/System.Configuration 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Configuration.dll\nUsing Assembly dependency fx/System.Threading.Tasks 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Threading.Tasks.dll\nUsing Assembly dependency fx/System.Text.Encoding 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Text.Encoding.dll\nUsing Assembly dependency fx/System.Collections.Concurrent 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Collections.Concurrent.dll\nBuilding MusicStore for DNXCore,Version=v5.0\n  Using Project dependency MusicStore 1.0.0\n    Source: /Users/chemitaxis/Downloads/MusicStore-dev/src/MusicStore/project.json\nUsing Package dependency EntityFramework.Core 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.Core/7.0.0-rc2-16514\n    File: lib/dotnet5.4/EntityFramework.Core.dll\nUsing Package dependency EntityFramework.InMemory 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.InMemory/7.0.0-rc2-16514\n    File: lib/dotnet5.4/EntityFramework.InMemory.dll\nUsing Package dependency EntityFramework.MicrosoftSqlServer 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.MicrosoftSqlServer/7.0.0-rc2-16514\n    File: lib/dotnet5.4/EntityFramework.MicrosoftSqlServer.dll\nUsing Package dependency EntityFramework.Relational 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.Relational/7.0.0-rc2-16514\n    File: lib/dotnet5.4/EntityFramework.Relational.dll\nUsing Package dependency Ix-Async 1.2.5\n    Source: /Users/chemitaxis/.dnx/packages/Ix-Async/1.2.5\n    File: lib/portable-windows8+net45+wp8/System.Interactive.Async.dll\nUsing Package dependency Microsoft.AspNet.Antiforgery 1.0.0-rc2-16030\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Antiforgery/1.0.0-rc2-16030\n    File: lib/dotnet5.4/Microsoft.AspNet.Antiforgery.dll\nUsing Package dependency Microsoft.AspNet.Authentication 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Cookies 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Cookies/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.Cookies.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Facebook 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Facebook/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.Facebook.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Google 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Google/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.Google.dll\nUsing Package dependency Microsoft.AspNet.Authentication.MicrosoftAccount 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.MicrosoftAccount/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.MicrosoftAccount.dll\nUsing Package dependency Microsoft.AspNet.Authentication.OAuth 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.OAuth/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.OAuth.dll\nUsing Package dependency Microsoft.AspNet.Authentication.OpenIdConnect 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.OpenIdConnect/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.OpenIdConnect.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Twitter 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Twitter/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.Twitter.dll\nUsing Package dependency Microsoft.AspNet.Authorization 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authorization/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authorization.dll\nUsing Package dependency Microsoft.AspNet.Cors 6.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Cors/6.0.0-rc2-16027\n    File: lib/dotnet5.4/Microsoft.AspNet.Cors.dll\nUsing Package dependency Microsoft.AspNet.Cryptography.Internal 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Cryptography.Internal/1.0.0-rc2-15907\n    File: lib/dotnet5.4/Microsoft.AspNet.Cryptography.Internal.dll\nUsing Package dependency Microsoft.AspNet.Cryptography.KeyDerivation 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Cryptography.KeyDerivation/1.0.0-rc2-15907\n    File: lib/dotnet5.4/Microsoft.AspNet.Cryptography.KeyDerivation.dll\nUsing Package dependency Microsoft.AspNet.DataProtection 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.DataProtection/1.0.0-rc2-15907\n    File: lib/dotnet5.4/Microsoft.AspNet.DataProtection.dll\nUsing Package dependency Microsoft.AspNet.DataProtection.Abstractions 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.DataProtection.Abstractions/1.0.0-rc2-15907\n    File: lib/dotnet5.4/Microsoft.AspNet.DataProtection.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Diagnostics 1.0.0-rc2-16290\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Diagnostics/1.0.0-rc2-16290\n    File: lib/dotnet5.4/Microsoft.AspNet.Diagnostics.dll\nUsing Package dependency Microsoft.AspNet.Diagnostics.Abstractions 1.0.0-rc2-16290\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Diagnostics.Abstractions/1.0.0-rc2-16290\n    File: lib/dotnet5.4/Microsoft.AspNet.Diagnostics.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Diagnostics.Entity 7.0.0-rc2-16290\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Diagnostics.Entity/7.0.0-rc2-16290\n    File: lib/dotnet5.4/Microsoft.AspNet.Diagnostics.Entity.dll\nUsing Package dependency Microsoft.AspNet.FileProviders.Abstractions 1.0.0-rc2-15868\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.FileProviders.Abstractions/1.0.0-rc2-15868\n    File: lib/dotnet5.4/Microsoft.AspNet.FileProviders.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.FileProviders.Physical 1.0.0-rc2-15868\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.FileProviders.Physical/1.0.0-rc2-15868\n    File: lib/dotnet5.4/Microsoft.AspNet.FileProviders.Physical.dll\nUsing Package dependency Microsoft.AspNet.Hosting 1.0.0-rc2-16080\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Hosting/1.0.0-rc2-16080\n    File: lib/dnxcore50/Microsoft.AspNet.Hosting.dll\nUsing Package dependency Microsoft.AspNet.Hosting.Abstractions 1.0.0-rc2-16080\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Hosting.Abstractions/1.0.0-rc2-16080\n    File: lib/dotnet5.4/Microsoft.AspNet.Hosting.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Hosting.Server.Abstractions 1.0.0-rc2-16080\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Hosting.Server.Abstractions/1.0.0-rc2-16080\n    File: lib/dotnet5.4/Microsoft.AspNet.Hosting.Server.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Html.Abstractions 1.0.0-rc2-16035\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Html.Abstractions/1.0.0-rc2-16035\n    File: lib/dotnet5.4/Microsoft.AspNet.Html.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Http 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http/1.0.0-rc2-16042\n    File: lib/dotnet5.4/Microsoft.AspNet.Http.dll\nUsing Package dependency Microsoft.AspNet.Http.Abstractions 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http.Abstractions/1.0.0-rc2-16042\n    File: lib/dotnet5.4/Microsoft.AspNet.Http.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Http.Extensions 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http.Extensions/1.0.0-rc2-16042\n    File: lib/dotnet5.4/Microsoft.AspNet.Http.Extensions.dll\nUsing Package dependency Microsoft.AspNet.Http.Features 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http.Features/1.0.0-rc2-16042\n    File: lib/dotnet5.4/Microsoft.AspNet.Http.Features.dll\nUsing Package dependency Microsoft.AspNet.Identity 3.0.0-rc2-16195\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Identity/3.0.0-rc2-16195\n    File: lib/dotnet5.4/Microsoft.AspNet.Identity.dll\nUsing Package dependency Microsoft.AspNet.Identity.EntityFramework 3.0.0-rc2-16195\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Identity.EntityFramework/3.0.0-rc2-16195\n    File: lib/dotnet5.4/Microsoft.AspNet.Identity.EntityFramework.dll\nUsing Package dependency Microsoft.AspNet.JsonPatch 1.0.0-rc2-16100\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.JsonPatch/1.0.0-rc2-16100\n    File: lib/dotnet5.4/Microsoft.AspNet.JsonPatch.dll\nUsing Package dependency Microsoft.AspNet.Loader.IIS 1.0.0-beta8-15621\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Loader.IIS/1.0.0-beta8-15621\n    File: lib/dnxcore50/Microsoft.AspNet.Loader.IIS.dll\nUsing Package dependency Microsoft.AspNet.Loader.IIS.Interop 1.0.0-beta8-15621\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Loader.IIS.Interop/1.0.0-beta8-15621\nUsing Package dependency Microsoft.AspNet.Localization 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Localization/1.0.0-rc2-16059\n    File: lib/dotnet5.4/Microsoft.AspNet.Localization.dll\nUsing Package dependency Microsoft.AspNet.Mvc 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc/6.0.0-rc2-16600\n    File: lib/dotnet5.5/Microsoft.AspNet.Mvc.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Abstractions 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Abstractions/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Mvc.ApiExplorer 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.ApiExplorer/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.ApiExplorer.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Core 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Core/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.Core.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Cors 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Cors/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.Cors.dll\nUsing Package dependency Microsoft.AspNet.Mvc.DataAnnotations 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.DataAnnotations/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.DataAnnotations.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Formatters.Json 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Formatters.Json/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.Formatters.Json.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Localization 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Localization/6.0.0-rc2-16600\n    File: lib/dotnet5.5/Microsoft.AspNet.Mvc.Localization.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Razor 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Razor/6.0.0-rc2-16600\n    File: lib/dotnet5.5/Microsoft.AspNet.Mvc.Razor.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Razor.Host 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Razor.Host/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.Razor.Host.dll\nUsing Package dependency Microsoft.AspNet.Mvc.TagHelpers 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.TagHelpers/6.0.0-rc2-16600\n    File: lib/dotnet5.5/Microsoft.AspNet.Mvc.TagHelpers.dll\nUsing Package dependency Microsoft.AspNet.Mvc.ViewFeatures 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.ViewFeatures/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.ViewFeatures.dll\nUsing Package dependency Microsoft.AspNet.Razor 4.0.0-rc2-16032\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Razor/4.0.0-rc2-16032\n    File: lib/dotnet5.4/Microsoft.AspNet.Razor.dll\nUsing Package dependency Microsoft.AspNet.Razor.Runtime 4.0.0-rc2-16032\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Razor.Runtime/4.0.0-rc2-16032\n    File: lib/dotnet5.4/Microsoft.AspNet.Razor.Runtime.dll\nUsing Package dependency Microsoft.AspNet.Razor.Runtime.Precompilation 4.0.0-rc2-16032\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Razor.Runtime.Precompilation/4.0.0-rc2-16032\n    File: lib/dotnet5.4/Microsoft.AspNet.Razor.Runtime.Precompilation.dll\nUsing Package dependency Microsoft.AspNet.Routing 1.0.0-rc2-16046\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Routing/1.0.0-rc2-16046\n    File: lib/dotnet5.4/Microsoft.AspNet.Routing.dll\nUsing Package dependency Microsoft.AspNet.Routing.Abstractions 1.0.0-rc2-16046\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Routing.Abstractions/1.0.0-rc2-16046\n    File: lib/dotnet5.4/Microsoft.AspNet.Routing.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Server.IIS 1.0.0-beta8-15621\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Server.IIS/1.0.0-beta8-15621\nUsing Package dependency Microsoft.AspNet.Server.Kestrel 1.0.0-rc2-16144\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Server.Kestrel/1.0.0-rc2-16144\n    File: lib/dnxcore50/Microsoft.AspNet.Server.Kestrel.dll\nUsing Package dependency Microsoft.AspNet.Server.WebListener 1.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Server.WebListener/1.0.0-rc2-16027\n    File: lib/dnxcore50/Microsoft.AspNet.Server.WebListener.dll\nUsing Package dependency Microsoft.AspNet.Session 1.0.0-rc2-16038\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Session/1.0.0-rc2-16038\n    File: lib/dotnet5.4/Microsoft.AspNet.Session.dll\nUsing Package dependency Microsoft.AspNet.StaticFiles 1.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.StaticFiles/1.0.0-rc2-16027\n    File: lib/dotnet5.4/Microsoft.AspNet.StaticFiles.dll\nUsing Package dependency Microsoft.AspNet.Tooling.Razor 1.0.0-rc2-15987\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Tooling.Razor/1.0.0-rc2-15987\n    File: lib/dotnet5.4/Microsoft.AspNet.Tooling.Razor.dll\nUsing Package dependency Microsoft.AspNet.WebUtilities 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.WebUtilities/1.0.0-rc2-16042\n    File: lib/dotnet5.4/Microsoft.AspNet.WebUtilities.dll\nUsing Package dependency Microsoft.CodeAnalysis.Analyzers 1.0.0\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.CodeAnalysis.Analyzers/1.0.0\nUsing Package dependency Microsoft.CodeAnalysis.Common 1.1.0-rc1-20151109-01\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.CodeAnalysis.Common/1.1.0-rc1-20151109-01\n    File: lib/portable-net45+win8/Microsoft.CodeAnalysis.dll\nUsing Package dependency Microsoft.CodeAnalysis.CSharp 1.1.0-rc1-20151109-01\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.CodeAnalysis.CSharp/1.1.0-rc1-20151109-01\n    File: lib/portable-net45+win8/Microsoft.CodeAnalysis.CSharp.dll\nUsing Package dependency Microsoft.CSharp 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.CSharp/4.0.1-rc2-23608\n    File: ref/dotnet5.1/Microsoft.CSharp.dll\nUsing Package dependency Microsoft.Dnx.Compilation.Abstractions 1.0.0-rc1-16048\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Dnx.Compilation.Abstractions/1.0.0-rc1-16048\n    File: lib/dotnet5.4/Microsoft.Dnx.Compilation.Abstractions.dll\nUsing Package dependency Microsoft.Dnx.Compilation.CSharp.Abstractions 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Dnx.Compilation.CSharp.Abstractions/1.0.0-rc2-16278\n    File: lib/dotnet5.4/Microsoft.Dnx.Compilation.CSharp.Abstractions.dll\nUsing Package dependency Microsoft.Dnx.Compilation.CSharp.Common 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Dnx.Compilation.CSharp.Common/1.0.0-rc2-16278\n    File: lib/dotnet5.4/Microsoft.Dnx.Compilation.CSharp.Common.dll\nUsing Package dependency Microsoft.Extensions.Caching.Abstractions 1.0.0-rc2-15921\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Caching.Abstractions/1.0.0-rc2-15921\n    File: lib/dotnet5.4/Microsoft.Extensions.Caching.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Caching.Memory 1.0.0-rc2-15921\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Caching.Memory/1.0.0-rc2-15921\n    File: lib/dotnet5.4/Microsoft.Extensions.Caching.Memory.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration/1.0.0-rc2-16141\n    File: lib/dnxcore50/Microsoft.Extensions.CodeGeneration.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration.Core 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration.Core/1.0.0-rc2-16141\n    File: lib/dnxcore50/Microsoft.Extensions.CodeGeneration.Core.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration.EntityFramework 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration.EntityFramework/1.0.0-rc2-16141\n    File: lib/dnxcore50/Microsoft.Extensions.CodeGeneration.EntityFramework.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration.Templating 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration.Templating/1.0.0-rc2-16141\n    File: lib/dnxcore50/Microsoft.Extensions.CodeGeneration.Templating.dll\nUsing Package dependency Microsoft.Extensions.CodeGenerators.Mvc 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGenerators.Mvc/1.0.0-rc2-16141\n    File: lib/dnxcore50/Microsoft.Extensions.CodeGenerators.Mvc.dll\nUsing Package dependency Microsoft.Extensions.CompilationAbstractions 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CompilationAbstractions/1.0.0-rc2-16278\n    File: lib/dotnet5.4/Microsoft.Extensions.CompilationAbstractions.dll\nUsing Package dependency Microsoft.Extensions.Configuration 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration/1.0.0-rc2-15897\n    File: lib/dotnet5.4/Microsoft.Extensions.Configuration.dll\nUsing Package dependency Microsoft.Extensions.Configuration.Abstractions 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.Abstractions/1.0.0-rc2-15897\n    File: lib/dotnet5.4/Microsoft.Extensions.Configuration.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Configuration.Binder 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.Binder/1.0.0-rc2-15897\n    File: lib/dotnet5.4/Microsoft.Extensions.Configuration.Binder.dll\nUsing Package dependency Microsoft.Extensions.Configuration.CommandLine 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.CommandLine/1.0.0-rc2-15897\n    File: lib/dotnet5.4/Microsoft.Extensions.Configuration.CommandLine.dll\nUsing Package dependency Microsoft.Extensions.Configuration.EnvironmentVariables 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.EnvironmentVariables/1.0.0-rc2-15897\n    File: lib/dotnet5.4/Microsoft.Extensions.Configuration.EnvironmentVariables.dll\nUsing Package dependency Microsoft.Extensions.Configuration.FileExtensions 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.FileExtensions/1.0.0-rc2-15897\n    File: lib/dotnet5.4/Microsoft.Extensions.Configuration.FileExtensions.dll\nUsing Package dependency Microsoft.Extensions.Configuration.Json 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.Json/1.0.0-rc2-15897\n    File: lib/dotnet5.4/Microsoft.Extensions.Configuration.Json.dll\nUsing Package dependency Microsoft.Extensions.DependencyInjection 1.0.0-rc2-15864\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.DependencyInjection/1.0.0-rc2-15864\n    File: lib/dotnet5.4/Microsoft.Extensions.DependencyInjection.dll\nUsing Package dependency Microsoft.Extensions.DependencyInjection.Abstractions 1.0.0-rc2-15864\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.DependencyInjection.Abstractions/1.0.0-rc2-15864\n    File: lib/dotnet5.4/Microsoft.Extensions.DependencyInjection.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.FileSystemGlobbing 1.0.0-rc2-15868\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.FileSystemGlobbing/1.0.0-rc2-15868\n    File: lib/dotnet5.4/Microsoft.Extensions.FileSystemGlobbing.dll\nUsing Package dependency Microsoft.Extensions.Globalization.CultureInfoCache 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Globalization.CultureInfoCache/1.0.0-rc2-16059\n    File: lib/dotnet5.4/Microsoft.Extensions.Globalization.CultureInfoCache.dll\nUsing Package dependency Microsoft.Extensions.Localization 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Localization/1.0.0-rc2-16059\n    File: lib/dotnet5.4/Microsoft.Extensions.Localization.dll\nUsing Package dependency Microsoft.Extensions.Localization.Abstractions 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Localization.Abstractions/1.0.0-rc2-16059\n    File: lib/dotnet5.4/Microsoft.Extensions.Localization.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Logging 1.0.0-rc2-15900\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Logging/1.0.0-rc2-15900\n    File: lib/dotnet5.4/Microsoft.Extensions.Logging.dll\nUsing Package dependency Microsoft.Extensions.Logging.Abstractions 1.0.0-rc2-15900\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Logging.Abstractions/1.0.0-rc2-15900\n    File: lib/dotnet5.4/Microsoft.Extensions.Logging.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Logging.Console 1.0.0-rc2-15900\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Logging.Console/1.0.0-rc2-15900\n    File: lib/dotnet5.4/Microsoft.Extensions.Logging.Console.dll\nUsing Package dependency Microsoft.Extensions.MemoryPool 1.0.0-rc2-15913\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.MemoryPool/1.0.0-rc2-15913\n    File: lib/dotnet5.4/Microsoft.Extensions.MemoryPool.dll\nUsing Package dependency Microsoft.Extensions.OptionsModel 1.0.0-rc2-15878\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.OptionsModel/1.0.0-rc2-15878\n    File: lib/dotnet5.4/Microsoft.Extensions.OptionsModel.dll\nUsing Package dependency Microsoft.Extensions.PlatformAbstractions 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.PlatformAbstractions/1.0.0-rc2-16278\n    File: lib/dotnet5.4/Microsoft.Extensions.PlatformAbstractions.dll\nUsing Package dependency Microsoft.Extensions.Primitives 1.0.0-rc2-15913\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Primitives/1.0.0-rc2-15913\n    File: lib/dotnet5.4/Microsoft.Extensions.Primitives.dll\nUsing Package dependency Microsoft.Extensions.WebEncoders 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.WebEncoders/1.0.0-rc2-16042\n    File: lib/dotnet5.4/Microsoft.Extensions.WebEncoders.dll\nUsing Package dependency Microsoft.Framework.Configuration 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration/1.0.0-rc1-15669\n    File: lib/dnxcore50/Microsoft.Framework.Configuration.dll\nUsing Package dependency Microsoft.Framework.Configuration.Abstractions 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.Abstractions/1.0.0-rc1-15669\n    File: lib/dnxcore50/Microsoft.Framework.Configuration.Abstractions.dll\nUsing Package dependency Microsoft.Framework.Configuration.EnvironmentVariables 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.EnvironmentVariables/1.0.0-rc1-15669\n    File: lib/dotnet/Microsoft.Framework.Configuration.EnvironmentVariables.dll\nUsing Package dependency Microsoft.Framework.Configuration.FileExtensions 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.FileExtensions/1.0.0-rc1-15669\n    File: lib/dotnet/Microsoft.Framework.Configuration.FileExtensions.dll\nUsing Package dependency Microsoft.Framework.Configuration.Ini 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.Ini/1.0.0-rc1-15669\n    File: lib/dnxcore50/Microsoft.Framework.Configuration.Ini.dll\nUsing Package dependency Microsoft.Framework.WebEncoders.Core 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.WebEncoders.Core/1.0.0-rc1-15669\n    File: lib/dnxcore50/Microsoft.Framework.WebEncoders.Core.dll\nUsing Package dependency Microsoft.IdentityModel.Logging 1.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.IdentityModel.Logging/1.0.0-rc2-212080021\n    File: lib/dotnet5.4/Microsoft.IdentityModel.Logging.dll\nUsing Package dependency Microsoft.IdentityModel.Protocols 2.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.IdentityModel.Protocols/2.0.0-rc2-212080021\n    File: lib/dotnet5.4/Microsoft.IdentityModel.Protocols.dll\nUsing Package dependency Microsoft.IdentityModel.Protocols.OpenIdConnect 2.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.IdentityModel.Protocols.OpenIdConnect/2.0.0-rc2-212080021\n    File: lib/dotnet5.4/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll\nUsing Package dependency Microsoft.Net.Http.Headers 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Net.Http.Headers/1.0.0-rc2-16042\n    File: lib/dotnet5.4/Microsoft.Net.Http.Headers.dll\nUsing Package dependency Microsoft.Net.Http.Server 1.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Net.Http.Server/1.0.0-rc2-16027\n    File: lib/dotnet5.4/Microsoft.Net.Http.Server.dll\nUsing Package dependency Microsoft.Win32.Primitives 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Win32.Primitives/4.0.1-rc2-23608\n    File: ref/dotnet5.4/Microsoft.Win32.Primitives.dll\nUsing Package dependency Microsoft.Win32.Registry 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Win32.Registry/4.0.0-rc2-23608\n    File: ref/dotnet5.4/Microsoft.Win32.Registry.dll\nUsing Package dependency Newtonsoft.Json 6.0.6\n    Source: /Users/chemitaxis/.dnx/packages/Newtonsoft.Json/6.0.6\n    File: lib/portable-net45+wp80+win8+wpa81+aspnetcore50/Newtonsoft.Json.dll\nUsing Package dependency Remotion.Linq 2.0.1\n    Source: /Users/chemitaxis/.dnx/packages/Remotion.Linq/2.0.1\n    File: lib/portable-net45+win+wpa81+wp80/Remotion.Linq.dll\nUsing Package dependency System.AppContext 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.AppContext/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.AppContext.dll\nUsing Package dependency System.Collections 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Collections/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Collections.dll\nUsing Package dependency System.Collections.Concurrent 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Collections.Concurrent/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Collections.Concurrent.dll\nUsing Package dependency System.Collections.Immutable 1.1.37\n    Source: /Users/chemitaxis/.dnx/packages/System.Collections.Immutable/1.1.37\n    File: lib/dotnet/System.Collections.Immutable.dll\nUsing Package dependency System.Collections.NonGeneric 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Collections.NonGeneric/4.0.0\n    File: ref/dotnet/System.Collections.NonGeneric.dll\nUsing Package dependency System.Collections.Specialized 4.0.1-beta-23516\n    Source: /Users/chemitaxis/.dnx/packages/System.Collections.Specialized/4.0.1-beta-23516\n    File: ref/dotnet5.1/System.Collections.Specialized.dll\nUsing Package dependency System.ComponentModel 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.ComponentModel/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.ComponentModel.dll\nUsing Package dependency System.ComponentModel.Annotations 4.1.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.ComponentModel.Annotations/4.1.0-rc2-23608\n    File: ref/dotnet5.4/System.ComponentModel.Annotations.dll\nUsing Package dependency System.ComponentModel.EventBasedAsync 4.0.10\n    Source: /Users/chemitaxis/.dnx/packages/System.ComponentModel.EventBasedAsync/4.0.10\n    File: ref/dotnet/System.ComponentModel.EventBasedAsync.dll\nUsing Package dependency System.ComponentModel.Primitives 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.ComponentModel.Primitives/4.0.0\n    File: ref/dotnet/System.ComponentModel.Primitives.dll\nUsing Package dependency System.ComponentModel.TypeConverter 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.ComponentModel.TypeConverter/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.ComponentModel.TypeConverter.dll\nUsing Package dependency System.Console 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Console/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Console.dll\nUsing Package dependency System.Data.Common 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Data.Common/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.Data.Common.dll\nUsing Package dependency System.Data.SqlClient 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Data.SqlClient/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Data.SqlClient.dll\nUsing Package dependency System.Diagnostics.Contracts 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.Contracts/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.Diagnostics.Contracts.dll\nUsing Package dependency System.Diagnostics.Debug 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.Debug/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Diagnostics.Debug.dll\nUsing Package dependency System.Diagnostics.DiagnosticSource 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.DiagnosticSource/4.0.0-rc2-23608\n    File: lib/dotnet5.2/System.Diagnostics.DiagnosticSource.dll\nUsing Package dependency System.Diagnostics.Process 4.1.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.Process/4.1.0-rc2-23608\n    File: ref/dotnet5.5/System.Diagnostics.Process.dll\nUsing Package dependency System.Diagnostics.StackTrace 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.StackTrace/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.Diagnostics.StackTrace.dll\nUsing Package dependency System.Diagnostics.Tools 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.Tools/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.Diagnostics.Tools.dll\nUsing Package dependency System.Diagnostics.TraceSource 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.TraceSource/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Diagnostics.TraceSource.dll\nUsing Package dependency System.Diagnostics.Tracing 4.0.21-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.Tracing/4.0.21-rc2-23608\n    File: ref/dotnet5.4/System.Diagnostics.Tracing.dll\nUsing Package dependency System.Dynamic.Runtime 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Dynamic.Runtime/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Dynamic.Runtime.dll\nUsing Package dependency System.Globalization 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Globalization/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Globalization.dll\nUsing Package dependency System.Globalization.Extensions 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Globalization.Extensions/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.Globalization.Extensions.dll\nUsing Package dependency System.IdentityModel.Tokens 5.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/System.IdentityModel.Tokens/5.0.0-rc2-212080021\n    File: lib/dotnet5.4/System.IdentityModel.Tokens.dll\nUsing Package dependency System.IdentityModel.Tokens.Jwt 5.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/System.IdentityModel.Tokens.Jwt/5.0.0-rc2-212080021\n    File: lib/dotnet5.4/System.IdentityModel.Tokens.Jwt.dll\nUsing Package dependency System.IO 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.IO/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.IO.dll\nUsing Package dependency System.IO.FileSystem 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.IO.FileSystem/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.IO.FileSystem.dll\nUsing Package dependency System.IO.FileSystem.Primitives 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.IO.FileSystem.Primitives/4.0.0\n    File: ref/dotnet/System.IO.FileSystem.Primitives.dll\nUsing Package dependency System.IO.FileSystem.Watcher 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.IO.FileSystem.Watcher/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.IO.FileSystem.Watcher.dll\nUsing Package dependency System.Linq 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Linq/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.Linq.dll\nUsing Package dependency System.Linq.Expressions 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Linq.Expressions/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Linq.Expressions.dll\nUsing Package dependency System.Linq.Queryable 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Linq.Queryable/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.Linq.Queryable.dll\nUsing Package dependency System.Net.Http 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Net.Http/4.0.1-rc2-23608\n    File: ref/dotnet5.2/System.Net.Http.dll\nUsing Package dependency System.Net.NetworkInformation 4.0.10-beta-23123\n    Source: /Users/chemitaxis/.dnx/packages/System.Net.NetworkInformation/4.0.10-beta-23123\n    File: ref/dotnet/System.Net.NetworkInformation.dll\nUsing Package dependency System.Net.Primitives 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Net.Primitives/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Net.Primitives.dll\nUsing Package dependency System.Net.Security 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Net.Security/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Net.Security.dll\nUsing Package dependency System.Net.WebSockets 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Net.WebSockets/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Net.WebSockets.dll\nUsing Package dependency System.Numerics.Vectors 4.1.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Numerics.Vectors/4.1.1-rc2-23608\n    File: ref/dotnet5.4/System.Numerics.Vectors.dll\nUsing Package dependency System.ObjectModel 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.ObjectModel/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.ObjectModel.dll\nUsing Package dependency System.Private.Networking 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Private.Networking/4.0.0\nUsing Package dependency System.Private.Uri 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Private.Uri/4.0.1-rc2-23608\nUsing Package dependency System.Reflection 4.1.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection/4.1.0-rc2-23608\n    File: ref/dotnet5.4/System.Reflection.dll\nUsing Package dependency System.Reflection.Emit 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Emit/4.0.0\n    File: ref/dotnet/System.Reflection.Emit.dll\nUsing Package dependency System.Reflection.Emit.ILGeneration 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Emit.ILGeneration/4.0.0\n    File: ref/dotnet/System.Reflection.Emit.ILGeneration.dll\nUsing Package dependency System.Reflection.Extensions 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Extensions/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.Reflection.Extensions.dll\nUsing Package dependency System.Reflection.Metadata 1.1.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Metadata/1.1.0\n    File: lib/dotnet5.2/System.Reflection.Metadata.dll\nUsing Package dependency System.Reflection.Primitives 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Primitives/4.0.0\n    File: ref/dotnet/System.Reflection.Primitives.dll\nUsing Package dependency System.Reflection.TypeExtensions 4.1.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.TypeExtensions/4.1.0-rc2-23608\n    File: ref/dotnet5.4/System.Reflection.TypeExtensions.dll\nUsing Package dependency System.Resources.ReaderWriter 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Resources.ReaderWriter/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Resources.ReaderWriter.dll\nUsing Package dependency System.Resources.ResourceManager 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Resources.ResourceManager/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.Resources.ResourceManager.dll\nUsing Package dependency System.Runtime 4.0.21-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime/4.0.21-rc2-23608\n    File: ref/dotnet5.4/System.Runtime.dll\nUsing Package dependency System.Runtime.Extensions 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.Extensions/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Runtime.Extensions.dll\nUsing Package dependency System.Runtime.Handles 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.Handles/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.Runtime.Handles.dll\nUsing Package dependency System.Runtime.InteropServices 4.0.21-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.InteropServices/4.0.21-rc2-23608\n    File: ref/dotnet5.4/System.Runtime.InteropServices.dll\nUsing Package dependency System.Runtime.InteropServices.RuntimeInformation 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.InteropServices.RuntimeInformation/4.0.0-rc2-23608\n    File: ref/dotnet5.1/System.Runtime.InteropServices.RuntimeInformation.dll\nUsing Package dependency System.Runtime.Loader 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.Loader/4.0.0-rc2-23608\n    File: ref/dotnet5.5/System.Runtime.Loader.dll\nUsing Package dependency System.Runtime.Serialization.Primitives 4.0.10\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.Serialization.Primitives/4.0.10\n    File: ref/dotnet/System.Runtime.Serialization.Primitives.dll\nUsing Package dependency System.Security.Claims 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Claims/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.Security.Claims.dll\nUsing Package dependency System.Security.Cryptography.Algorithms 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Cryptography.Algorithms/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Security.Cryptography.Algorithms.dll\nUsing Package dependency System.Security.Cryptography.Cng 4.0.0-beta-23516\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Cryptography.Cng/4.0.0-beta-23516\n    File: ref/dotnet5.2/System.Security.Cryptography.Cng.dll\nUsing Package dependency System.Security.Cryptography.Csp 4.0.0-beta-23516\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Cryptography.Csp/4.0.0-beta-23516\n    File: ref/dotnet5.1/System.Security.Cryptography.Csp.dll\nUsing Package dependency System.Security.Cryptography.Encoding 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Cryptography.Encoding/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Security.Cryptography.Encoding.dll\nUsing Package dependency System.Security.Cryptography.Primitives 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Cryptography.Primitives/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Security.Cryptography.Primitives.dll\nUsing Package dependency System.Security.Cryptography.X509Certificates 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Cryptography.X509Certificates/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Security.Cryptography.X509Certificates.dll\nUsing Package dependency System.Security.Principal 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Principal/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.Security.Principal.dll\nUsing Package dependency System.Security.Principal.Windows 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Principal.Windows/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Security.Principal.Windows.dll\nUsing Package dependency System.Text.Encoding 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.Encoding/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Text.Encoding.dll\nUsing Package dependency System.Text.Encoding.CodePages 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.Encoding.CodePages/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.Text.Encoding.CodePages.dll\nUsing Package dependency System.Text.Encoding.Extensions 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.Encoding.Extensions/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Text.Encoding.Extensions.dll\nUsing Package dependency System.Text.Encodings.Web 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.Encodings.Web/4.0.0-rc2-23608\n    File: lib/dotnet5.1/System.Text.Encodings.Web.dll\nUsing Package dependency System.Text.RegularExpressions 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.RegularExpressions/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Text.RegularExpressions.dll\nUsing Package dependency System.Threading 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Threading.dll\nUsing Package dependency System.Threading.Overlapped 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading.Overlapped/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.Threading.Overlapped.dll\nUsing Package dependency System.Threading.Tasks 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading.Tasks/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Threading.Tasks.dll\nUsing Package dependency System.Threading.Tasks.Parallel 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading.Tasks.Parallel/4.0.1-rc2-23608\n    File: ref/dotnet5.2/System.Threading.Tasks.Parallel.dll\nUsing Package dependency System.Threading.Thread 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading.Thread/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Threading.Thread.dll\nUsing Package dependency System.Threading.ThreadPool 4.0.10-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading.ThreadPool/4.0.10-rc2-23608\n    File: ref/dotnet5.4/System.Threading.ThreadPool.dll\nUsing Package dependency System.Threading.Timer 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading.Timer/4.0.1-rc2-23608\n    File: ref/dotnet5.3/System.Threading.Timer.dll\nUsing Package dependency System.Xml.ReaderWriter 4.0.11-beta-23516\n    Source: /Users/chemitaxis/.dnx/packages/System.Xml.ReaderWriter/4.0.11-beta-23516\n    File: ref/dotnet5.4/System.Xml.ReaderWriter.dll\nUsing Package dependency System.Xml.XDocument 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Xml.XDocument/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Xml.XDocument.dll\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\nTime elapsed 00:00:04.2514801\nTotal build time elapsed: 00:00:04.2687232\nTotal projects built: 1\n```\n. dnu build output:\n```\nMicrosoft .NET Development Utility Mono-x64-1.0.0-rc1-16231\nBuilding MusicStore for DNX,Version=v4.5.1\n  Using Project dependency MusicStore 1.0.0\n    Source: /Users/chemitaxis/Downloads/MusicStore-dev/src/MusicStore/project.json\nUsing Package dependency EntityFramework.Core 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.Core/7.0.0-rc2-16514\n    File: lib/dnx451/EntityFramework.Core.dll\nUsing Package dependency EntityFramework.InMemory 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.InMemory/7.0.0-rc2-16514\n    File: lib/net451/EntityFramework.InMemory.dll\nUsing Package dependency EntityFramework.MicrosoftSqlServer 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.MicrosoftSqlServer/7.0.0-rc2-16514\n    File: lib/net451/EntityFramework.MicrosoftSqlServer.dll\nUsing Package dependency EntityFramework.Relational 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.Relational/7.0.0-rc2-16514\n    File: lib/net451/EntityFramework.Relational.dll\nUsing Package dependency Ix-Async 1.2.5\n    Source: /Users/chemitaxis/.dnx/packages/Ix-Async/1.2.5\n    File: lib/net45/System.Interactive.Async.dll\nUsing Package dependency Microsoft.AspNet.Antiforgery 1.0.0-rc2-16030\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Antiforgery/1.0.0-rc2-16030\n    File: lib/net451/Microsoft.AspNet.Antiforgery.dll\nUsing Package dependency Microsoft.AspNet.Authentication 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Cookies 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Cookies/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.Cookies.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Facebook 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Facebook/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.Facebook.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Google 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Google/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.Google.dll\nUsing Package dependency Microsoft.AspNet.Authentication.MicrosoftAccount 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.MicrosoftAccount/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.MicrosoftAccount.dll\nUsing Package dependency Microsoft.AspNet.Authentication.OAuth 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.OAuth/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.OAuth.dll\nUsing Package dependency Microsoft.AspNet.Authentication.OpenIdConnect 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.OpenIdConnect/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.OpenIdConnect.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Twitter 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Twitter/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authentication.Twitter.dll\nUsing Package dependency Microsoft.AspNet.Authorization 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authorization/1.0.0-rc2-16126\n    File: lib/net451/Microsoft.AspNet.Authorization.dll\nUsing Package dependency Microsoft.AspNet.Cors 6.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Cors/6.0.0-rc2-16027\n    File: lib/net451/Microsoft.AspNet.Cors.dll\nUsing Package dependency Microsoft.AspNet.Cryptography.Internal 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Cryptography.Internal/1.0.0-rc2-15907\n    File: lib/net451/Microsoft.AspNet.Cryptography.Internal.dll\nUsing Package dependency Microsoft.AspNet.Cryptography.KeyDerivation 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Cryptography.KeyDerivation/1.0.0-rc2-15907\n    File: lib/net451/Microsoft.AspNet.Cryptography.KeyDerivation.dll\nUsing Package dependency Microsoft.AspNet.DataProtection 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.DataProtection/1.0.0-rc2-15907\n    File: lib/net451/Microsoft.AspNet.DataProtection.dll\nUsing Package dependency Microsoft.AspNet.DataProtection.Abstractions 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.DataProtection.Abstractions/1.0.0-rc2-15907\n    File: lib/net451/Microsoft.AspNet.DataProtection.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Diagnostics 1.0.0-rc2-16290\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Diagnostics/1.0.0-rc2-16290\n    File: lib/net451/Microsoft.AspNet.Diagnostics.dll\nUsing Package dependency Microsoft.AspNet.Diagnostics.Abstractions 1.0.0-rc2-16290\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Diagnostics.Abstractions/1.0.0-rc2-16290\n    File: lib/net451/Microsoft.AspNet.Diagnostics.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Diagnostics.Entity 7.0.0-rc2-16290\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Diagnostics.Entity/7.0.0-rc2-16290\n    File: lib/net451/Microsoft.AspNet.Diagnostics.Entity.dll\nUsing Package dependency Microsoft.AspNet.FileProviders.Abstractions 1.0.0-rc2-15868\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.FileProviders.Abstractions/1.0.0-rc2-15868\n    File: lib/net451/Microsoft.AspNet.FileProviders.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.FileProviders.Physical 1.0.0-rc2-15868\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.FileProviders.Physical/1.0.0-rc2-15868\n    File: lib/net451/Microsoft.AspNet.FileProviders.Physical.dll\nUsing Package dependency Microsoft.AspNet.Hosting 1.0.0-rc2-16080\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Hosting/1.0.0-rc2-16080\n    File: lib/dnx451/Microsoft.AspNet.Hosting.dll\nUsing Package dependency Microsoft.AspNet.Hosting.Abstractions 1.0.0-rc2-16080\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Hosting.Abstractions/1.0.0-rc2-16080\n    File: lib/net451/Microsoft.AspNet.Hosting.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Hosting.Server.Abstractions 1.0.0-rc2-16080\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Hosting.Server.Abstractions/1.0.0-rc2-16080\n    File: lib/net451/Microsoft.AspNet.Hosting.Server.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Html.Abstractions 1.0.0-rc2-16035\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Html.Abstractions/1.0.0-rc2-16035\n    File: lib/net451/Microsoft.AspNet.Html.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Http 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http/1.0.0-rc2-16042\n    File: lib/net451/Microsoft.AspNet.Http.dll\nUsing Package dependency Microsoft.AspNet.Http.Abstractions 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http.Abstractions/1.0.0-rc2-16042\n    File: lib/net451/Microsoft.AspNet.Http.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Http.Extensions 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http.Extensions/1.0.0-rc2-16042\n    File: lib/net451/Microsoft.AspNet.Http.Extensions.dll\nUsing Package dependency Microsoft.AspNet.Http.Features 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http.Features/1.0.0-rc2-16042\n    File: lib/net451/Microsoft.AspNet.Http.Features.dll\nUsing Package dependency Microsoft.AspNet.Identity 3.0.0-rc2-16195\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Identity/3.0.0-rc2-16195\n    File: lib/net451/Microsoft.AspNet.Identity.dll\nUsing Package dependency Microsoft.AspNet.Identity.EntityFramework 3.0.0-rc2-16195\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Identity.EntityFramework/3.0.0-rc2-16195\n    File: lib/net451/Microsoft.AspNet.Identity.EntityFramework.dll\nUsing Package dependency Microsoft.AspNet.JsonPatch 1.0.0-rc2-16100\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.JsonPatch/1.0.0-rc2-16100\n    File: lib/net451/Microsoft.AspNet.JsonPatch.dll\nUsing Package dependency Microsoft.AspNet.Loader.IIS 1.0.0-beta8-15621\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Loader.IIS/1.0.0-beta8-15621\n    File: lib/dnx451/Microsoft.AspNet.Loader.IIS.dll\nUsing Package dependency Microsoft.AspNet.Loader.IIS.Interop 1.0.0-beta8-15621\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Loader.IIS.Interop/1.0.0-beta8-15621\nUsing Package dependency Microsoft.AspNet.Localization 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Localization/1.0.0-rc2-16059\n    File: lib/net451/Microsoft.AspNet.Localization.dll\nUsing Package dependency Microsoft.AspNet.Mvc 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Abstractions 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Abstractions/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Mvc.ApiExplorer 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.ApiExplorer/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.ApiExplorer.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Core 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Core/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.Core.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Cors 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Cors/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.Cors.dll\nUsing Package dependency Microsoft.AspNet.Mvc.DataAnnotations 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.DataAnnotations/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.DataAnnotations.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Formatters.Json 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Formatters.Json/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.Formatters.Json.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Localization 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Localization/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.Localization.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Razor 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Razor/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.Razor.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Razor.Host 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Razor.Host/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.Razor.Host.dll\nUsing Package dependency Microsoft.AspNet.Mvc.TagHelpers 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.TagHelpers/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.TagHelpers.dll\nUsing Package dependency Microsoft.AspNet.Mvc.ViewFeatures 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.ViewFeatures/6.0.0-rc2-16600\n    File: lib/net451/Microsoft.AspNet.Mvc.ViewFeatures.dll\nUsing Package dependency Microsoft.AspNet.Razor 4.0.0-rc2-16032\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Razor/4.0.0-rc2-16032\n    File: lib/net451/Microsoft.AspNet.Razor.dll\nUsing Package dependency Microsoft.AspNet.Razor.Runtime 4.0.0-rc2-16032\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Razor.Runtime/4.0.0-rc2-16032\n    File: lib/net451/Microsoft.AspNet.Razor.Runtime.dll\nUsing Package dependency Microsoft.AspNet.Razor.Runtime.Precompilation 4.0.0-rc2-16032\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Razor.Runtime.Precompilation/4.0.0-rc2-16032\n    File: lib/net451/Microsoft.AspNet.Razor.Runtime.Precompilation.dll\nUsing Package dependency Microsoft.AspNet.Routing 1.0.0-rc2-16046\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Routing/1.0.0-rc2-16046\n    File: lib/net451/Microsoft.AspNet.Routing.dll\nUsing Package dependency Microsoft.AspNet.Routing.Abstractions 1.0.0-rc2-16046\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Routing.Abstractions/1.0.0-rc2-16046\n    File: lib/net451/Microsoft.AspNet.Routing.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Server.IIS 1.0.0-beta8-15621\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Server.IIS/1.0.0-beta8-15621\nUsing Package dependency Microsoft.AspNet.Server.Kestrel 1.0.0-rc2-16144\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Server.Kestrel/1.0.0-rc2-16144\n    File: lib/dnx451/Microsoft.AspNet.Server.Kestrel.dll\nUsing Package dependency Microsoft.AspNet.Server.WebListener 1.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Server.WebListener/1.0.0-rc2-16027\n    File: lib/dnx451/Microsoft.AspNet.Server.WebListener.dll\nUsing Package dependency Microsoft.AspNet.Session 1.0.0-rc2-16038\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Session/1.0.0-rc2-16038\n    File: lib/net451/Microsoft.AspNet.Session.dll\nUsing Package dependency Microsoft.AspNet.StaticFiles 1.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.StaticFiles/1.0.0-rc2-16027\n    File: lib/net451/Microsoft.AspNet.StaticFiles.dll\nUsing Package dependency Microsoft.AspNet.Tooling.Razor 1.0.0-rc2-15987\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Tooling.Razor/1.0.0-rc2-15987\n    File: lib/net451/Microsoft.AspNet.Tooling.Razor.dll\nUsing Package dependency Microsoft.AspNet.WebUtilities 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.WebUtilities/1.0.0-rc2-16042\n    File: lib/net451/Microsoft.AspNet.WebUtilities.dll\nUsing Package dependency Microsoft.CodeAnalysis.Analyzers 1.0.0\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.CodeAnalysis.Analyzers/1.0.0\nUsing Package dependency Microsoft.CodeAnalysis.Common 1.1.0-rc1-20151109-01\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.CodeAnalysis.Common/1.1.0-rc1-20151109-01\n    File: lib/net45/Microsoft.CodeAnalysis.dll\nUsing Package dependency Microsoft.CodeAnalysis.CSharp 1.1.0-rc1-20151109-01\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.CodeAnalysis.CSharp/1.1.0-rc1-20151109-01\n    File: lib/net45/Microsoft.CodeAnalysis.CSharp.dll\nUsing Package dependency Microsoft.Dnx.Compilation.Abstractions 1.0.0-rc1-16048\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Dnx.Compilation.Abstractions/1.0.0-rc1-16048\n    File: lib/net451/Microsoft.Dnx.Compilation.Abstractions.dll\nUsing Package dependency Microsoft.Dnx.Compilation.CSharp.Abstractions 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Dnx.Compilation.CSharp.Abstractions/1.0.0-rc2-16278\n    File: lib/net451/Microsoft.Dnx.Compilation.CSharp.Abstractions.dll\nUsing Package dependency Microsoft.Dnx.Compilation.CSharp.Common 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Dnx.Compilation.CSharp.Common/1.0.0-rc2-16278\n    File: lib/net451/Microsoft.Dnx.Compilation.CSharp.Common.dll\nUsing Package dependency Microsoft.Extensions.Caching.Abstractions 1.0.0-rc2-15921\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Caching.Abstractions/1.0.0-rc2-15921\n    File: lib/net451/Microsoft.Extensions.Caching.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Caching.Memory 1.0.0-rc2-15921\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Caching.Memory/1.0.0-rc2-15921\n    File: lib/net451/Microsoft.Extensions.Caching.Memory.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration/1.0.0-rc2-16141\n    File: lib/dnx451/Microsoft.Extensions.CodeGeneration.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration.Core 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration.Core/1.0.0-rc2-16141\n    File: lib/dnx451/Microsoft.Extensions.CodeGeneration.Core.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration.EntityFramework 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration.EntityFramework/1.0.0-rc2-16141\n    File: lib/dnx451/Microsoft.Extensions.CodeGeneration.EntityFramework.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration.Templating 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration.Templating/1.0.0-rc2-16141\n    File: lib/dnx451/Microsoft.Extensions.CodeGeneration.Templating.dll\nUsing Package dependency Microsoft.Extensions.CodeGenerators.Mvc 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGenerators.Mvc/1.0.0-rc2-16141\n    File: lib/dnx451/Microsoft.Extensions.CodeGenerators.Mvc.dll\nUsing Package dependency Microsoft.Extensions.CompilationAbstractions 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CompilationAbstractions/1.0.0-rc2-16278\n    File: lib/net451/Microsoft.Extensions.CompilationAbstractions.dll\nUsing Package dependency Microsoft.Extensions.Configuration 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration/1.0.0-rc2-15897\n    File: lib/net451/Microsoft.Extensions.Configuration.dll\nUsing Package dependency Microsoft.Extensions.Configuration.Abstractions 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.Abstractions/1.0.0-rc2-15897\n    File: lib/net451/Microsoft.Extensions.Configuration.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Configuration.Binder 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.Binder/1.0.0-rc2-15897\n    File: lib/net451/Microsoft.Extensions.Configuration.Binder.dll\nUsing Package dependency Microsoft.Extensions.Configuration.CommandLine 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.CommandLine/1.0.0-rc2-15897\n    File: lib/net451/Microsoft.Extensions.Configuration.CommandLine.dll\nUsing Package dependency Microsoft.Extensions.Configuration.EnvironmentVariables 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.EnvironmentVariables/1.0.0-rc2-15897\n    File: lib/net451/Microsoft.Extensions.Configuration.EnvironmentVariables.dll\nUsing Package dependency Microsoft.Extensions.Configuration.FileExtensions 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.FileExtensions/1.0.0-rc2-15897\n    File: lib/net451/Microsoft.Extensions.Configuration.FileExtensions.dll\nUsing Package dependency Microsoft.Extensions.Configuration.Json 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.Json/1.0.0-rc2-15897\n    File: lib/net451/Microsoft.Extensions.Configuration.Json.dll\nUsing Package dependency Microsoft.Extensions.DependencyInjection 1.0.0-rc2-15864\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.DependencyInjection/1.0.0-rc2-15864\n    File: lib/net451/Microsoft.Extensions.DependencyInjection.dll\nUsing Package dependency Microsoft.Extensions.DependencyInjection.Abstractions 1.0.0-rc2-15864\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.DependencyInjection.Abstractions/1.0.0-rc2-15864\n    File: lib/net451/Microsoft.Extensions.DependencyInjection.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.FileSystemGlobbing 1.0.0-rc2-15868\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.FileSystemGlobbing/1.0.0-rc2-15868\n    File: lib/net451/Microsoft.Extensions.FileSystemGlobbing.dll\nUsing Package dependency Microsoft.Extensions.Globalization.CultureInfoCache 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Globalization.CultureInfoCache/1.0.0-rc2-16059\n    File: lib/net451/Microsoft.Extensions.Globalization.CultureInfoCache.dll\nUsing Package dependency Microsoft.Extensions.Localization 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Localization/1.0.0-rc2-16059\n    File: lib/net451/Microsoft.Extensions.Localization.dll\nUsing Package dependency Microsoft.Extensions.Localization.Abstractions 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Localization.Abstractions/1.0.0-rc2-16059\n    File: lib/net451/Microsoft.Extensions.Localization.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Logging 1.0.0-rc2-15900\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Logging/1.0.0-rc2-15900\n    File: lib/net451/Microsoft.Extensions.Logging.dll\nUsing Package dependency Microsoft.Extensions.Logging.Abstractions 1.0.0-rc2-15900\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Logging.Abstractions/1.0.0-rc2-15900\n    File: lib/net451/Microsoft.Extensions.Logging.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Logging.Console 1.0.0-rc2-15900\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Logging.Console/1.0.0-rc2-15900\n    File: lib/net451/Microsoft.Extensions.Logging.Console.dll\nUsing Package dependency Microsoft.Extensions.MemoryPool 1.0.0-rc2-15913\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.MemoryPool/1.0.0-rc2-15913\n    File: lib/net451/Microsoft.Extensions.MemoryPool.dll\nUsing Package dependency Microsoft.Extensions.OptionsModel 1.0.0-rc2-15878\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.OptionsModel/1.0.0-rc2-15878\n    File: lib/net451/Microsoft.Extensions.OptionsModel.dll\nUsing Package dependency Microsoft.Extensions.PlatformAbstractions 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.PlatformAbstractions/1.0.0-rc2-16278\n    File: lib/net451/Microsoft.Extensions.PlatformAbstractions.dll\nUsing Package dependency Microsoft.Extensions.Primitives 1.0.0-rc2-15913\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Primitives/1.0.0-rc2-15913\n    File: lib/net451/Microsoft.Extensions.Primitives.dll\nUsing Package dependency Microsoft.Extensions.WebEncoders 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.WebEncoders/1.0.0-rc2-16042\n    File: lib/net451/Microsoft.Extensions.WebEncoders.dll\nUsing Package dependency Microsoft.Framework.Configuration 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration/1.0.0-rc1-15669\n    File: lib/dnx451/Microsoft.Framework.Configuration.dll\nUsing Package dependency Microsoft.Framework.Configuration.Abstractions 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.Abstractions/1.0.0-rc1-15669\n    File: lib/dnx451/Microsoft.Framework.Configuration.Abstractions.dll\nUsing Package dependency Microsoft.Framework.Configuration.EnvironmentVariables 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.EnvironmentVariables/1.0.0-rc1-15669\n    File: lib/dnx451/Microsoft.Framework.Configuration.EnvironmentVariables.dll\nUsing Package dependency Microsoft.Framework.Configuration.FileExtensions 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.FileExtensions/1.0.0-rc1-15669\n    File: lib/dnx451/Microsoft.Framework.Configuration.FileExtensions.dll\nUsing Package dependency Microsoft.Framework.Configuration.Ini 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.Ini/1.0.0-rc1-15669\n    File: lib/dnx451/Microsoft.Framework.Configuration.Ini.dll\nUsing Package dependency Microsoft.Framework.WebEncoders.Core 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.WebEncoders.Core/1.0.0-rc1-15669\n    File: lib/dnx451/Microsoft.Framework.WebEncoders.Core.dll\nUsing Package dependency Microsoft.IdentityModel.Logging 1.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.IdentityModel.Logging/1.0.0-rc2-212080021\n    File: lib/net451/Microsoft.IdentityModel.Logging.dll\nUsing Package dependency Microsoft.IdentityModel.Protocols 2.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.IdentityModel.Protocols/2.0.0-rc2-212080021\n    File: lib/net451/Microsoft.IdentityModel.Protocols.dll\nUsing Package dependency Microsoft.IdentityModel.Protocols.OpenIdConnect 2.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.IdentityModel.Protocols.OpenIdConnect/2.0.0-rc2-212080021\n    File: lib/net451/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll\nUsing Package dependency Microsoft.Net.Http.Headers 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Net.Http.Headers/1.0.0-rc2-16042\n    File: lib/net451/Microsoft.Net.Http.Headers.dll\nUsing Package dependency Microsoft.Net.Http.Server 1.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Net.Http.Server/1.0.0-rc2-16027\n    File: lib/net451/Microsoft.Net.Http.Server.dll\nUsing Package dependency Newtonsoft.Json 6.0.6\n    Source: /Users/chemitaxis/.dnx/packages/Newtonsoft.Json/6.0.6\n    File: lib/net45/Newtonsoft.Json.dll\nUsing Package dependency Remotion.Linq 2.0.1\n    Source: /Users/chemitaxis/.dnx/packages/Remotion.Linq/2.0.1\n    File: lib/net45/Remotion.Linq.dll\nUsing Package dependency System.Collections 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Collections/4.0.0\nUsing Package dependency System.Collections.Immutable 1.1.37\n    Source: /Users/chemitaxis/.dnx/packages/System.Collections.Immutable/1.1.37\n    File: lib/dotnet/System.Collections.Immutable.dll\nUsing Package dependency System.Diagnostics.Debug 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.Debug/4.0.0\nUsing Package dependency System.Diagnostics.DiagnosticSource 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.DiagnosticSource/4.0.0-rc2-23608\n    File: lib/dotnet5.2/System.Diagnostics.DiagnosticSource.dll\nUsing Package dependency System.Globalization 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Globalization/4.0.0\nUsing Package dependency System.IdentityModel.Tokens 5.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/System.IdentityModel.Tokens/5.0.0-rc2-212080021\n    File: lib/net451/System.IdentityModel.Tokens.dll\nUsing Package dependency System.IdentityModel.Tokens.Jwt 5.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/System.IdentityModel.Tokens.Jwt/5.0.0-rc2-212080021\n    File: lib/net451/System.IdentityModel.Tokens.Jwt.dll\nUsing Package dependency System.IO 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.IO/4.0.0\nUsing Package dependency System.Linq 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Linq/4.0.0\nUsing Package dependency System.Numerics.Vectors 4.1.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Numerics.Vectors/4.1.1-rc2-23608\n    File: lib/portable-net45+win8/System.Numerics.Vectors.dll\nUsing Package dependency System.Reflection 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection/4.0.0\nUsing Package dependency System.Reflection.Extensions 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Extensions/4.0.0\nUsing Package dependency System.Reflection.Metadata 1.1.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Metadata/1.1.0\n    File: lib/dotnet5.2/System.Reflection.Metadata.dll\nUsing Package dependency System.Reflection.Primitives 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Primitives/4.0.0\nUsing Package dependency System.Resources.ResourceManager 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Resources.ResourceManager/4.0.0\nUsing Package dependency System.Runtime 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime/4.0.0\nUsing Package dependency System.Runtime.Extensions 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.Extensions/4.0.0\nUsing Package dependency System.Runtime.InteropServices 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.InteropServices/4.0.0\nUsing Package dependency System.Runtime.InteropServices.RuntimeInformation 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.InteropServices.RuntimeInformation/4.0.0-rc2-23608\n    File: ref/dotnet5.1/System.Runtime.InteropServices.RuntimeInformation.dll\nUsing Package dependency System.Text.Encoding 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.Encoding/4.0.0\nUsing Package dependency System.Text.Encoding.Extensions 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.Encoding.Extensions/4.0.0\nUsing Package dependency System.Text.Encodings.Web 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.Encodings.Web/4.0.0-rc2-23608\n    File: lib/dotnet5.1/System.Text.Encodings.Web.dll\nUsing Package dependency System.Threading 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading/4.0.0\nUsing Assembly dependency fx/mscorlib 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/mscorlib.dll\nUsing Assembly dependency fx/System 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.dll\nUsing Assembly dependency fx/System.Core 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Core.dll\nUsing Assembly dependency fx/Microsoft.CSharp 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Microsoft.CSharp.dll\nUsing Assembly dependency fx/System.Collections 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Collections.dll\nUsing Assembly dependency fx/System.ComponentModel.DataAnnotations 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.ComponentModel.DataAnnotations.dll\nUsing Assembly dependency fx/System.Diagnostics.Debug 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Diagnostics.Debug.dll\nUsing Assembly dependency fx/System.Diagnostics.Tools 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Diagnostics.Tools.dll\nUsing Assembly dependency fx/System.Globalization 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Globalization.dll\nUsing Assembly dependency fx/System.Linq 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Linq.dll\nUsing Assembly dependency fx/System.Linq.Expressions 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Linq.Expressions.dll\nUsing Assembly dependency fx/System.Linq.Queryable 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Linq.Queryable.dll\nUsing Assembly dependency fx/System.ObjectModel 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.ObjectModel.dll\nUsing Assembly dependency fx/System.Reflection 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Reflection.dll\nUsing Assembly dependency fx/System.Reflection.Extensions 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Reflection.Extensions.dll\nUsing Assembly dependency fx/System.Resources.ResourceManager 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Resources.ResourceManager.dll\nUsing Assembly dependency fx/System.Runtime 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Runtime.dll\nUsing Assembly dependency fx/System.Runtime.Extensions 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Runtime.Extensions.dll\nUsing Assembly dependency fx/System.Threading 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Threading.dll\nUsing Assembly dependency fx/System.Data 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Data.dll\nUsing Assembly dependency fx/System.Transactions 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Transactions.dll\nUsing Assembly dependency fx/System.Net.Http 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Net.Http.dll\nUsing Assembly dependency fx/System.IO 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.IO.dll\nUsing Assembly dependency fx/System.Security 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Security.dll\nUsing Assembly dependency fx/System.Xml 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Xml.dll\nUsing Assembly dependency fx/System.Xml.Linq 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Xml.Linq.dll\nUsing Assembly dependency fx/System.Configuration 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/System.Configuration.dll\nUsing Assembly dependency fx/System.Threading.Tasks 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Threading.Tasks.dll\nUsing Assembly dependency fx/System.Text.Encoding 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Text.Encoding.dll\nUsing Assembly dependency fx/System.Collections.Concurrent 4.0.0\n    Source: /Library/Frameworks/Mono.framework/Versions/4.2.1/lib/mono/4.5/Facades/System.Collections.Concurrent.dll\nBuilding MusicStore for DNXCore,Version=v5.0\n  Using Project dependency MusicStore 1.0.0\n    Source: /Users/chemitaxis/Downloads/MusicStore-dev/src/MusicStore/project.json\nUsing Package dependency EntityFramework.Core 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.Core/7.0.0-rc2-16514\n    File: lib/dotnet5.4/EntityFramework.Core.dll\nUsing Package dependency EntityFramework.InMemory 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.InMemory/7.0.0-rc2-16514\n    File: lib/dotnet5.4/EntityFramework.InMemory.dll\nUsing Package dependency EntityFramework.MicrosoftSqlServer 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.MicrosoftSqlServer/7.0.0-rc2-16514\n    File: lib/dotnet5.4/EntityFramework.MicrosoftSqlServer.dll\nUsing Package dependency EntityFramework.Relational 7.0.0-rc2-16514\n    Source: /Users/chemitaxis/.dnx/packages/EntityFramework.Relational/7.0.0-rc2-16514\n    File: lib/dotnet5.4/EntityFramework.Relational.dll\nUsing Package dependency Ix-Async 1.2.5\n    Source: /Users/chemitaxis/.dnx/packages/Ix-Async/1.2.5\n    File: lib/portable-windows8+net45+wp8/System.Interactive.Async.dll\nUsing Package dependency Microsoft.AspNet.Antiforgery 1.0.0-rc2-16030\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Antiforgery/1.0.0-rc2-16030\n    File: lib/dotnet5.4/Microsoft.AspNet.Antiforgery.dll\nUsing Package dependency Microsoft.AspNet.Authentication 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Cookies 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Cookies/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.Cookies.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Facebook 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Facebook/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.Facebook.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Google 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Google/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.Google.dll\nUsing Package dependency Microsoft.AspNet.Authentication.MicrosoftAccount 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.MicrosoftAccount/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.MicrosoftAccount.dll\nUsing Package dependency Microsoft.AspNet.Authentication.OAuth 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.OAuth/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.OAuth.dll\nUsing Package dependency Microsoft.AspNet.Authentication.OpenIdConnect 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.OpenIdConnect/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.OpenIdConnect.dll\nUsing Package dependency Microsoft.AspNet.Authentication.Twitter 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authentication.Twitter/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authentication.Twitter.dll\nUsing Package dependency Microsoft.AspNet.Authorization 1.0.0-rc2-16126\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Authorization/1.0.0-rc2-16126\n    File: lib/dotnet5.4/Microsoft.AspNet.Authorization.dll\nUsing Package dependency Microsoft.AspNet.Cors 6.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Cors/6.0.0-rc2-16027\n    File: lib/dotnet5.4/Microsoft.AspNet.Cors.dll\nUsing Package dependency Microsoft.AspNet.Cryptography.Internal 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Cryptography.Internal/1.0.0-rc2-15907\n    File: lib/dotnet5.4/Microsoft.AspNet.Cryptography.Internal.dll\nUsing Package dependency Microsoft.AspNet.Cryptography.KeyDerivation 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Cryptography.KeyDerivation/1.0.0-rc2-15907\n    File: lib/dotnet5.4/Microsoft.AspNet.Cryptography.KeyDerivation.dll\nUsing Package dependency Microsoft.AspNet.DataProtection 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.DataProtection/1.0.0-rc2-15907\n    File: lib/dotnet5.4/Microsoft.AspNet.DataProtection.dll\nUsing Package dependency Microsoft.AspNet.DataProtection.Abstractions 1.0.0-rc2-15907\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.DataProtection.Abstractions/1.0.0-rc2-15907\n    File: lib/dotnet5.4/Microsoft.AspNet.DataProtection.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Diagnostics 1.0.0-rc2-16290\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Diagnostics/1.0.0-rc2-16290\n    File: lib/dotnet5.4/Microsoft.AspNet.Diagnostics.dll\nUsing Package dependency Microsoft.AspNet.Diagnostics.Abstractions 1.0.0-rc2-16290\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Diagnostics.Abstractions/1.0.0-rc2-16290\n    File: lib/dotnet5.4/Microsoft.AspNet.Diagnostics.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Diagnostics.Entity 7.0.0-rc2-16290\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Diagnostics.Entity/7.0.0-rc2-16290\n    File: lib/dotnet5.4/Microsoft.AspNet.Diagnostics.Entity.dll\nUsing Package dependency Microsoft.AspNet.FileProviders.Abstractions 1.0.0-rc2-15868\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.FileProviders.Abstractions/1.0.0-rc2-15868\n    File: lib/dotnet5.4/Microsoft.AspNet.FileProviders.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.FileProviders.Physical 1.0.0-rc2-15868\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.FileProviders.Physical/1.0.0-rc2-15868\n    File: lib/dotnet5.4/Microsoft.AspNet.FileProviders.Physical.dll\nUsing Package dependency Microsoft.AspNet.Hosting 1.0.0-rc2-16080\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Hosting/1.0.0-rc2-16080\n    File: lib/dnxcore50/Microsoft.AspNet.Hosting.dll\nUsing Package dependency Microsoft.AspNet.Hosting.Abstractions 1.0.0-rc2-16080\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Hosting.Abstractions/1.0.0-rc2-16080\n    File: lib/dotnet5.4/Microsoft.AspNet.Hosting.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Hosting.Server.Abstractions 1.0.0-rc2-16080\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Hosting.Server.Abstractions/1.0.0-rc2-16080\n    File: lib/dotnet5.4/Microsoft.AspNet.Hosting.Server.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Html.Abstractions 1.0.0-rc2-16035\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Html.Abstractions/1.0.0-rc2-16035\n    File: lib/dotnet5.4/Microsoft.AspNet.Html.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Http 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http/1.0.0-rc2-16042\n    File: lib/dotnet5.4/Microsoft.AspNet.Http.dll\nUsing Package dependency Microsoft.AspNet.Http.Abstractions 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http.Abstractions/1.0.0-rc2-16042\n    File: lib/dotnet5.4/Microsoft.AspNet.Http.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Http.Extensions 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http.Extensions/1.0.0-rc2-16042\n    File: lib/dotnet5.4/Microsoft.AspNet.Http.Extensions.dll\nUsing Package dependency Microsoft.AspNet.Http.Features 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Http.Features/1.0.0-rc2-16042\n    File: lib/dotnet5.4/Microsoft.AspNet.Http.Features.dll\nUsing Package dependency Microsoft.AspNet.Identity 3.0.0-rc2-16195\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Identity/3.0.0-rc2-16195\n    File: lib/dotnet5.4/Microsoft.AspNet.Identity.dll\nUsing Package dependency Microsoft.AspNet.Identity.EntityFramework 3.0.0-rc2-16195\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Identity.EntityFramework/3.0.0-rc2-16195\n    File: lib/dotnet5.4/Microsoft.AspNet.Identity.EntityFramework.dll\nUsing Package dependency Microsoft.AspNet.JsonPatch 1.0.0-rc2-16100\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.JsonPatch/1.0.0-rc2-16100\n    File: lib/dotnet5.4/Microsoft.AspNet.JsonPatch.dll\nUsing Package dependency Microsoft.AspNet.Loader.IIS 1.0.0-beta8-15621\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Loader.IIS/1.0.0-beta8-15621\n    File: lib/dnxcore50/Microsoft.AspNet.Loader.IIS.dll\nUsing Package dependency Microsoft.AspNet.Loader.IIS.Interop 1.0.0-beta8-15621\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Loader.IIS.Interop/1.0.0-beta8-15621\nUsing Package dependency Microsoft.AspNet.Localization 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Localization/1.0.0-rc2-16059\n    File: lib/dotnet5.4/Microsoft.AspNet.Localization.dll\nUsing Package dependency Microsoft.AspNet.Mvc 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc/6.0.0-rc2-16600\n    File: lib/dotnet5.5/Microsoft.AspNet.Mvc.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Abstractions 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Abstractions/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Mvc.ApiExplorer 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.ApiExplorer/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.ApiExplorer.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Core 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Core/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.Core.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Cors 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Cors/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.Cors.dll\nUsing Package dependency Microsoft.AspNet.Mvc.DataAnnotations 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.DataAnnotations/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.DataAnnotations.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Formatters.Json 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Formatters.Json/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.Formatters.Json.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Localization 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Localization/6.0.0-rc2-16600\n    File: lib/dotnet5.5/Microsoft.AspNet.Mvc.Localization.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Razor 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Razor/6.0.0-rc2-16600\n    File: lib/dotnet5.5/Microsoft.AspNet.Mvc.Razor.dll\nUsing Package dependency Microsoft.AspNet.Mvc.Razor.Host 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.Razor.Host/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.Razor.Host.dll\nUsing Package dependency Microsoft.AspNet.Mvc.TagHelpers 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.TagHelpers/6.0.0-rc2-16600\n    File: lib/dotnet5.5/Microsoft.AspNet.Mvc.TagHelpers.dll\nUsing Package dependency Microsoft.AspNet.Mvc.ViewFeatures 6.0.0-rc2-16600\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Mvc.ViewFeatures/6.0.0-rc2-16600\n    File: lib/dotnet5.4/Microsoft.AspNet.Mvc.ViewFeatures.dll\nUsing Package dependency Microsoft.AspNet.Razor 4.0.0-rc2-16032\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Razor/4.0.0-rc2-16032\n    File: lib/dotnet5.4/Microsoft.AspNet.Razor.dll\nUsing Package dependency Microsoft.AspNet.Razor.Runtime 4.0.0-rc2-16032\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Razor.Runtime/4.0.0-rc2-16032\n    File: lib/dotnet5.4/Microsoft.AspNet.Razor.Runtime.dll\nUsing Package dependency Microsoft.AspNet.Razor.Runtime.Precompilation 4.0.0-rc2-16032\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Razor.Runtime.Precompilation/4.0.0-rc2-16032\n    File: lib/dotnet5.4/Microsoft.AspNet.Razor.Runtime.Precompilation.dll\nUsing Package dependency Microsoft.AspNet.Routing 1.0.0-rc2-16046\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Routing/1.0.0-rc2-16046\n    File: lib/dotnet5.4/Microsoft.AspNet.Routing.dll\nUsing Package dependency Microsoft.AspNet.Routing.Abstractions 1.0.0-rc2-16046\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Routing.Abstractions/1.0.0-rc2-16046\n    File: lib/dotnet5.4/Microsoft.AspNet.Routing.Abstractions.dll\nUsing Package dependency Microsoft.AspNet.Server.IIS 1.0.0-beta8-15621\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Server.IIS/1.0.0-beta8-15621\nUsing Package dependency Microsoft.AspNet.Server.Kestrel 1.0.0-rc2-16144\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Server.Kestrel/1.0.0-rc2-16144\n    File: lib/dnxcore50/Microsoft.AspNet.Server.Kestrel.dll\nUsing Package dependency Microsoft.AspNet.Server.WebListener 1.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Server.WebListener/1.0.0-rc2-16027\n    File: lib/dnxcore50/Microsoft.AspNet.Server.WebListener.dll\nUsing Package dependency Microsoft.AspNet.Session 1.0.0-rc2-16038\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Session/1.0.0-rc2-16038\n    File: lib/dotnet5.4/Microsoft.AspNet.Session.dll\nUsing Package dependency Microsoft.AspNet.StaticFiles 1.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.StaticFiles/1.0.0-rc2-16027\n    File: lib/dotnet5.4/Microsoft.AspNet.StaticFiles.dll\nUsing Package dependency Microsoft.AspNet.Tooling.Razor 1.0.0-rc2-15987\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.Tooling.Razor/1.0.0-rc2-15987\n    File: lib/dotnet5.4/Microsoft.AspNet.Tooling.Razor.dll\nUsing Package dependency Microsoft.AspNet.WebUtilities 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.AspNet.WebUtilities/1.0.0-rc2-16042\n    File: lib/dotnet5.4/Microsoft.AspNet.WebUtilities.dll\nUsing Package dependency Microsoft.CodeAnalysis.Analyzers 1.0.0\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.CodeAnalysis.Analyzers/1.0.0\nUsing Package dependency Microsoft.CodeAnalysis.Common 1.1.0-rc1-20151109-01\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.CodeAnalysis.Common/1.1.0-rc1-20151109-01\n    File: lib/portable-net45+win8/Microsoft.CodeAnalysis.dll\nUsing Package dependency Microsoft.CodeAnalysis.CSharp 1.1.0-rc1-20151109-01\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.CodeAnalysis.CSharp/1.1.0-rc1-20151109-01\n    File: lib/portable-net45+win8/Microsoft.CodeAnalysis.CSharp.dll\nUsing Package dependency Microsoft.CSharp 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.CSharp/4.0.1-rc2-23608\n    File: ref/dotnet5.1/Microsoft.CSharp.dll\nUsing Package dependency Microsoft.Dnx.Compilation.Abstractions 1.0.0-rc1-16048\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Dnx.Compilation.Abstractions/1.0.0-rc1-16048\n    File: lib/dotnet5.4/Microsoft.Dnx.Compilation.Abstractions.dll\nUsing Package dependency Microsoft.Dnx.Compilation.CSharp.Abstractions 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Dnx.Compilation.CSharp.Abstractions/1.0.0-rc2-16278\n    File: lib/dotnet5.4/Microsoft.Dnx.Compilation.CSharp.Abstractions.dll\nUsing Package dependency Microsoft.Dnx.Compilation.CSharp.Common 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Dnx.Compilation.CSharp.Common/1.0.0-rc2-16278\n    File: lib/dotnet5.4/Microsoft.Dnx.Compilation.CSharp.Common.dll\nUsing Package dependency Microsoft.Extensions.Caching.Abstractions 1.0.0-rc2-15921\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Caching.Abstractions/1.0.0-rc2-15921\n    File: lib/dotnet5.4/Microsoft.Extensions.Caching.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Caching.Memory 1.0.0-rc2-15921\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Caching.Memory/1.0.0-rc2-15921\n    File: lib/dotnet5.4/Microsoft.Extensions.Caching.Memory.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration/1.0.0-rc2-16141\n    File: lib/dnxcore50/Microsoft.Extensions.CodeGeneration.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration.Core 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration.Core/1.0.0-rc2-16141\n    File: lib/dnxcore50/Microsoft.Extensions.CodeGeneration.Core.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration.EntityFramework 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration.EntityFramework/1.0.0-rc2-16141\n    File: lib/dnxcore50/Microsoft.Extensions.CodeGeneration.EntityFramework.dll\nUsing Package dependency Microsoft.Extensions.CodeGeneration.Templating 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGeneration.Templating/1.0.0-rc2-16141\n    File: lib/dnxcore50/Microsoft.Extensions.CodeGeneration.Templating.dll\nUsing Package dependency Microsoft.Extensions.CodeGenerators.Mvc 1.0.0-rc2-16141\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CodeGenerators.Mvc/1.0.0-rc2-16141\n    File: lib/dnxcore50/Microsoft.Extensions.CodeGenerators.Mvc.dll\nUsing Package dependency Microsoft.Extensions.CompilationAbstractions 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.CompilationAbstractions/1.0.0-rc2-16278\n    File: lib/dotnet5.4/Microsoft.Extensions.CompilationAbstractions.dll\nUsing Package dependency Microsoft.Extensions.Configuration 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration/1.0.0-rc2-15897\n    File: lib/dotnet5.4/Microsoft.Extensions.Configuration.dll\nUsing Package dependency Microsoft.Extensions.Configuration.Abstractions 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.Abstractions/1.0.0-rc2-15897\n    File: lib/dotnet5.4/Microsoft.Extensions.Configuration.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Configuration.Binder 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.Binder/1.0.0-rc2-15897\n    File: lib/dotnet5.4/Microsoft.Extensions.Configuration.Binder.dll\nUsing Package dependency Microsoft.Extensions.Configuration.CommandLine 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.CommandLine/1.0.0-rc2-15897\n    File: lib/dotnet5.4/Microsoft.Extensions.Configuration.CommandLine.dll\nUsing Package dependency Microsoft.Extensions.Configuration.EnvironmentVariables 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.EnvironmentVariables/1.0.0-rc2-15897\n    File: lib/dotnet5.4/Microsoft.Extensions.Configuration.EnvironmentVariables.dll\nUsing Package dependency Microsoft.Extensions.Configuration.FileExtensions 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.FileExtensions/1.0.0-rc2-15897\n    File: lib/dotnet5.4/Microsoft.Extensions.Configuration.FileExtensions.dll\nUsing Package dependency Microsoft.Extensions.Configuration.Json 1.0.0-rc2-15897\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Configuration.Json/1.0.0-rc2-15897\n    File: lib/dotnet5.4/Microsoft.Extensions.Configuration.Json.dll\nUsing Package dependency Microsoft.Extensions.DependencyInjection 1.0.0-rc2-15864\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.DependencyInjection/1.0.0-rc2-15864\n    File: lib/dotnet5.4/Microsoft.Extensions.DependencyInjection.dll\nUsing Package dependency Microsoft.Extensions.DependencyInjection.Abstractions 1.0.0-rc2-15864\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.DependencyInjection.Abstractions/1.0.0-rc2-15864\n    File: lib/dotnet5.4/Microsoft.Extensions.DependencyInjection.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.FileSystemGlobbing 1.0.0-rc2-15868\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.FileSystemGlobbing/1.0.0-rc2-15868\n    File: lib/dotnet5.4/Microsoft.Extensions.FileSystemGlobbing.dll\nUsing Package dependency Microsoft.Extensions.Globalization.CultureInfoCache 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Globalization.CultureInfoCache/1.0.0-rc2-16059\n    File: lib/dotnet5.4/Microsoft.Extensions.Globalization.CultureInfoCache.dll\nUsing Package dependency Microsoft.Extensions.Localization 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Localization/1.0.0-rc2-16059\n    File: lib/dotnet5.4/Microsoft.Extensions.Localization.dll\nUsing Package dependency Microsoft.Extensions.Localization.Abstractions 1.0.0-rc2-16059\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Localization.Abstractions/1.0.0-rc2-16059\n    File: lib/dotnet5.4/Microsoft.Extensions.Localization.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Logging 1.0.0-rc2-15900\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Logging/1.0.0-rc2-15900\n    File: lib/dotnet5.4/Microsoft.Extensions.Logging.dll\nUsing Package dependency Microsoft.Extensions.Logging.Abstractions 1.0.0-rc2-15900\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Logging.Abstractions/1.0.0-rc2-15900\n    File: lib/dotnet5.4/Microsoft.Extensions.Logging.Abstractions.dll\nUsing Package dependency Microsoft.Extensions.Logging.Console 1.0.0-rc2-15900\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Logging.Console/1.0.0-rc2-15900\n    File: lib/dotnet5.4/Microsoft.Extensions.Logging.Console.dll\nUsing Package dependency Microsoft.Extensions.MemoryPool 1.0.0-rc2-15913\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.MemoryPool/1.0.0-rc2-15913\n    File: lib/dotnet5.4/Microsoft.Extensions.MemoryPool.dll\nUsing Package dependency Microsoft.Extensions.OptionsModel 1.0.0-rc2-15878\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.OptionsModel/1.0.0-rc2-15878\n    File: lib/dotnet5.4/Microsoft.Extensions.OptionsModel.dll\nUsing Package dependency Microsoft.Extensions.PlatformAbstractions 1.0.0-rc2-16278\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.PlatformAbstractions/1.0.0-rc2-16278\n    File: lib/dotnet5.4/Microsoft.Extensions.PlatformAbstractions.dll\nUsing Package dependency Microsoft.Extensions.Primitives 1.0.0-rc2-15913\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.Primitives/1.0.0-rc2-15913\n    File: lib/dotnet5.4/Microsoft.Extensions.Primitives.dll\nUsing Package dependency Microsoft.Extensions.WebEncoders 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Extensions.WebEncoders/1.0.0-rc2-16042\n    File: lib/dotnet5.4/Microsoft.Extensions.WebEncoders.dll\nUsing Package dependency Microsoft.Framework.Configuration 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration/1.0.0-rc1-15669\n    File: lib/dnxcore50/Microsoft.Framework.Configuration.dll\nUsing Package dependency Microsoft.Framework.Configuration.Abstractions 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.Abstractions/1.0.0-rc1-15669\n    File: lib/dnxcore50/Microsoft.Framework.Configuration.Abstractions.dll\nUsing Package dependency Microsoft.Framework.Configuration.EnvironmentVariables 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.EnvironmentVariables/1.0.0-rc1-15669\n    File: lib/dotnet/Microsoft.Framework.Configuration.EnvironmentVariables.dll\nUsing Package dependency Microsoft.Framework.Configuration.FileExtensions 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.FileExtensions/1.0.0-rc1-15669\n    File: lib/dotnet/Microsoft.Framework.Configuration.FileExtensions.dll\nUsing Package dependency Microsoft.Framework.Configuration.Ini 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.Configuration.Ini/1.0.0-rc1-15669\n    File: lib/dnxcore50/Microsoft.Framework.Configuration.Ini.dll\nUsing Package dependency Microsoft.Framework.WebEncoders.Core 1.0.0-rc1-15669\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Framework.WebEncoders.Core/1.0.0-rc1-15669\n    File: lib/dnxcore50/Microsoft.Framework.WebEncoders.Core.dll\nUsing Package dependency Microsoft.IdentityModel.Logging 1.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.IdentityModel.Logging/1.0.0-rc2-212080021\n    File: lib/dotnet5.4/Microsoft.IdentityModel.Logging.dll\nUsing Package dependency Microsoft.IdentityModel.Protocols 2.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.IdentityModel.Protocols/2.0.0-rc2-212080021\n    File: lib/dotnet5.4/Microsoft.IdentityModel.Protocols.dll\nUsing Package dependency Microsoft.IdentityModel.Protocols.OpenIdConnect 2.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.IdentityModel.Protocols.OpenIdConnect/2.0.0-rc2-212080021\n    File: lib/dotnet5.4/Microsoft.IdentityModel.Protocols.OpenIdConnect.dll\nUsing Package dependency Microsoft.Net.Http.Headers 1.0.0-rc2-16042\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Net.Http.Headers/1.0.0-rc2-16042\n    File: lib/dotnet5.4/Microsoft.Net.Http.Headers.dll\nUsing Package dependency Microsoft.Net.Http.Server 1.0.0-rc2-16027\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Net.Http.Server/1.0.0-rc2-16027\n    File: lib/dotnet5.4/Microsoft.Net.Http.Server.dll\nUsing Package dependency Microsoft.Win32.Primitives 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Win32.Primitives/4.0.1-rc2-23608\n    File: ref/dotnet5.4/Microsoft.Win32.Primitives.dll\nUsing Package dependency Microsoft.Win32.Registry 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/Microsoft.Win32.Registry/4.0.0-rc2-23608\n    File: ref/dotnet5.4/Microsoft.Win32.Registry.dll\nUsing Package dependency Newtonsoft.Json 6.0.6\n    Source: /Users/chemitaxis/.dnx/packages/Newtonsoft.Json/6.0.6\n    File: lib/portable-net45+wp80+win8+wpa81+aspnetcore50/Newtonsoft.Json.dll\nUsing Package dependency Remotion.Linq 2.0.1\n    Source: /Users/chemitaxis/.dnx/packages/Remotion.Linq/2.0.1\n    File: lib/portable-net45+win+wpa81+wp80/Remotion.Linq.dll\nUsing Package dependency System.AppContext 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.AppContext/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.AppContext.dll\nUsing Package dependency System.Collections 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Collections/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Collections.dll\nUsing Package dependency System.Collections.Concurrent 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Collections.Concurrent/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Collections.Concurrent.dll\nUsing Package dependency System.Collections.Immutable 1.1.37\n    Source: /Users/chemitaxis/.dnx/packages/System.Collections.Immutable/1.1.37\n    File: lib/dotnet/System.Collections.Immutable.dll\nUsing Package dependency System.Collections.NonGeneric 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Collections.NonGeneric/4.0.0\n    File: ref/dotnet/System.Collections.NonGeneric.dll\nUsing Package dependency System.Collections.Specialized 4.0.1-beta-23516\n    Source: /Users/chemitaxis/.dnx/packages/System.Collections.Specialized/4.0.1-beta-23516\n    File: ref/dotnet5.1/System.Collections.Specialized.dll\nUsing Package dependency System.ComponentModel 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.ComponentModel/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.ComponentModel.dll\nUsing Package dependency System.ComponentModel.Annotations 4.1.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.ComponentModel.Annotations/4.1.0-rc2-23608\n    File: ref/dotnet5.4/System.ComponentModel.Annotations.dll\nUsing Package dependency System.ComponentModel.EventBasedAsync 4.0.10\n    Source: /Users/chemitaxis/.dnx/packages/System.ComponentModel.EventBasedAsync/4.0.10\n    File: ref/dotnet/System.ComponentModel.EventBasedAsync.dll\nUsing Package dependency System.ComponentModel.Primitives 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.ComponentModel.Primitives/4.0.0\n    File: ref/dotnet/System.ComponentModel.Primitives.dll\nUsing Package dependency System.ComponentModel.TypeConverter 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.ComponentModel.TypeConverter/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.ComponentModel.TypeConverter.dll\nUsing Package dependency System.Console 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Console/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Console.dll\nUsing Package dependency System.Data.Common 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Data.Common/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.Data.Common.dll\nUsing Package dependency System.Data.SqlClient 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Data.SqlClient/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Data.SqlClient.dll\nUsing Package dependency System.Diagnostics.Contracts 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.Contracts/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.Diagnostics.Contracts.dll\nUsing Package dependency System.Diagnostics.Debug 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.Debug/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Diagnostics.Debug.dll\nUsing Package dependency System.Diagnostics.DiagnosticSource 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.DiagnosticSource/4.0.0-rc2-23608\n    File: lib/dotnet5.2/System.Diagnostics.DiagnosticSource.dll\nUsing Package dependency System.Diagnostics.Process 4.1.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.Process/4.1.0-rc2-23608\n    File: ref/dotnet5.5/System.Diagnostics.Process.dll\nUsing Package dependency System.Diagnostics.StackTrace 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.StackTrace/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.Diagnostics.StackTrace.dll\nUsing Package dependency System.Diagnostics.Tools 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.Tools/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.Diagnostics.Tools.dll\nUsing Package dependency System.Diagnostics.TraceSource 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.TraceSource/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Diagnostics.TraceSource.dll\nUsing Package dependency System.Diagnostics.Tracing 4.0.21-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Diagnostics.Tracing/4.0.21-rc2-23608\n    File: ref/dotnet5.4/System.Diagnostics.Tracing.dll\nUsing Package dependency System.Dynamic.Runtime 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Dynamic.Runtime/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Dynamic.Runtime.dll\nUsing Package dependency System.Globalization 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Globalization/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Globalization.dll\nUsing Package dependency System.Globalization.Extensions 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Globalization.Extensions/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.Globalization.Extensions.dll\nUsing Package dependency System.IdentityModel.Tokens 5.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/System.IdentityModel.Tokens/5.0.0-rc2-212080021\n    File: lib/dotnet5.4/System.IdentityModel.Tokens.dll\nUsing Package dependency System.IdentityModel.Tokens.Jwt 5.0.0-rc2-212080021\n    Source: /Users/chemitaxis/.dnx/packages/System.IdentityModel.Tokens.Jwt/5.0.0-rc2-212080021\n    File: lib/dotnet5.4/System.IdentityModel.Tokens.Jwt.dll\nUsing Package dependency System.IO 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.IO/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.IO.dll\nUsing Package dependency System.IO.FileSystem 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.IO.FileSystem/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.IO.FileSystem.dll\nUsing Package dependency System.IO.FileSystem.Primitives 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.IO.FileSystem.Primitives/4.0.0\n    File: ref/dotnet/System.IO.FileSystem.Primitives.dll\nUsing Package dependency System.IO.FileSystem.Watcher 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.IO.FileSystem.Watcher/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.IO.FileSystem.Watcher.dll\nUsing Package dependency System.Linq 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Linq/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.Linq.dll\nUsing Package dependency System.Linq.Expressions 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Linq.Expressions/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Linq.Expressions.dll\nUsing Package dependency System.Linq.Queryable 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Linq.Queryable/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.Linq.Queryable.dll\nUsing Package dependency System.Net.Http 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Net.Http/4.0.1-rc2-23608\n    File: ref/dotnet5.2/System.Net.Http.dll\nUsing Package dependency System.Net.NetworkInformation 4.0.10-beta-23123\n    Source: /Users/chemitaxis/.dnx/packages/System.Net.NetworkInformation/4.0.10-beta-23123\n    File: ref/dotnet/System.Net.NetworkInformation.dll\nUsing Package dependency System.Net.Primitives 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Net.Primitives/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Net.Primitives.dll\nUsing Package dependency System.Net.Security 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Net.Security/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Net.Security.dll\nUsing Package dependency System.Net.WebSockets 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Net.WebSockets/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Net.WebSockets.dll\nUsing Package dependency System.Numerics.Vectors 4.1.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Numerics.Vectors/4.1.1-rc2-23608\n    File: ref/dotnet5.4/System.Numerics.Vectors.dll\nUsing Package dependency System.ObjectModel 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.ObjectModel/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.ObjectModel.dll\nUsing Package dependency System.Private.Networking 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Private.Networking/4.0.0\nUsing Package dependency System.Private.Uri 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Private.Uri/4.0.1-rc2-23608\nUsing Package dependency System.Reflection 4.1.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection/4.1.0-rc2-23608\n    File: ref/dotnet5.4/System.Reflection.dll\nUsing Package dependency System.Reflection.Emit 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Emit/4.0.0\n    File: ref/dotnet/System.Reflection.Emit.dll\nUsing Package dependency System.Reflection.Emit.ILGeneration 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Emit.ILGeneration/4.0.0\n    File: ref/dotnet/System.Reflection.Emit.ILGeneration.dll\nUsing Package dependency System.Reflection.Extensions 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Extensions/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.Reflection.Extensions.dll\nUsing Package dependency System.Reflection.Metadata 1.1.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Metadata/1.1.0\n    File: lib/dotnet5.2/System.Reflection.Metadata.dll\nUsing Package dependency System.Reflection.Primitives 4.0.0\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.Primitives/4.0.0\n    File: ref/dotnet/System.Reflection.Primitives.dll\nUsing Package dependency System.Reflection.TypeExtensions 4.1.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Reflection.TypeExtensions/4.1.0-rc2-23608\n    File: ref/dotnet5.4/System.Reflection.TypeExtensions.dll\nUsing Package dependency System.Resources.ReaderWriter 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Resources.ReaderWriter/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Resources.ReaderWriter.dll\nUsing Package dependency System.Resources.ResourceManager 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Resources.ResourceManager/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.Resources.ResourceManager.dll\nUsing Package dependency System.Runtime 4.0.21-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime/4.0.21-rc2-23608\n    File: ref/dotnet5.4/System.Runtime.dll\nUsing Package dependency System.Runtime.Extensions 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.Extensions/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Runtime.Extensions.dll\nUsing Package dependency System.Runtime.Handles 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.Handles/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.Runtime.Handles.dll\nUsing Package dependency System.Runtime.InteropServices 4.0.21-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.InteropServices/4.0.21-rc2-23608\n    File: ref/dotnet5.4/System.Runtime.InteropServices.dll\nUsing Package dependency System.Runtime.InteropServices.RuntimeInformation 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.InteropServices.RuntimeInformation/4.0.0-rc2-23608\n    File: ref/dotnet5.1/System.Runtime.InteropServices.RuntimeInformation.dll\nUsing Package dependency System.Runtime.Loader 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.Loader/4.0.0-rc2-23608\n    File: ref/dotnet5.5/System.Runtime.Loader.dll\nUsing Package dependency System.Runtime.Serialization.Primitives 4.0.10\n    Source: /Users/chemitaxis/.dnx/packages/System.Runtime.Serialization.Primitives/4.0.10\n    File: ref/dotnet/System.Runtime.Serialization.Primitives.dll\nUsing Package dependency System.Security.Claims 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Claims/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.Security.Claims.dll\nUsing Package dependency System.Security.Cryptography.Algorithms 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Cryptography.Algorithms/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Security.Cryptography.Algorithms.dll\nUsing Package dependency System.Security.Cryptography.Cng 4.0.0-beta-23516\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Cryptography.Cng/4.0.0-beta-23516\n    File: ref/dotnet5.2/System.Security.Cryptography.Cng.dll\nUsing Package dependency System.Security.Cryptography.Csp 4.0.0-beta-23516\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Cryptography.Csp/4.0.0-beta-23516\n    File: ref/dotnet5.1/System.Security.Cryptography.Csp.dll\nUsing Package dependency System.Security.Cryptography.Encoding 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Cryptography.Encoding/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Security.Cryptography.Encoding.dll\nUsing Package dependency System.Security.Cryptography.Primitives 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Cryptography.Primitives/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Security.Cryptography.Primitives.dll\nUsing Package dependency System.Security.Cryptography.X509Certificates 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Cryptography.X509Certificates/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Security.Cryptography.X509Certificates.dll\nUsing Package dependency System.Security.Principal 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Principal/4.0.1-rc2-23608\n    File: ref/dotnet5.1/System.Security.Principal.dll\nUsing Package dependency System.Security.Principal.Windows 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Security.Principal.Windows/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Security.Principal.Windows.dll\nUsing Package dependency System.Text.Encoding 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.Encoding/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Text.Encoding.dll\nUsing Package dependency System.Text.Encoding.CodePages 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.Encoding.CodePages/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.Text.Encoding.CodePages.dll\nUsing Package dependency System.Text.Encoding.Extensions 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.Encoding.Extensions/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Text.Encoding.Extensions.dll\nUsing Package dependency System.Text.Encodings.Web 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.Encodings.Web/4.0.0-rc2-23608\n    File: lib/dotnet5.1/System.Text.Encodings.Web.dll\nUsing Package dependency System.Text.RegularExpressions 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Text.RegularExpressions/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Text.RegularExpressions.dll\nUsing Package dependency System.Threading 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Threading.dll\nUsing Package dependency System.Threading.Overlapped 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading.Overlapped/4.0.1-rc2-23608\n    File: ref/dotnet5.4/System.Threading.Overlapped.dll\nUsing Package dependency System.Threading.Tasks 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading.Tasks/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Threading.Tasks.dll\nUsing Package dependency System.Threading.Tasks.Parallel 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading.Tasks.Parallel/4.0.1-rc2-23608\n    File: ref/dotnet5.2/System.Threading.Tasks.Parallel.dll\nUsing Package dependency System.Threading.Thread 4.0.0-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading.Thread/4.0.0-rc2-23608\n    File: ref/dotnet5.4/System.Threading.Thread.dll\nUsing Package dependency System.Threading.ThreadPool 4.0.10-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading.ThreadPool/4.0.10-rc2-23608\n    File: ref/dotnet5.4/System.Threading.ThreadPool.dll\nUsing Package dependency System.Threading.Timer 4.0.1-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Threading.Timer/4.0.1-rc2-23608\n    File: ref/dotnet5.3/System.Threading.Timer.dll\nUsing Package dependency System.Xml.ReaderWriter 4.0.11-beta-23516\n    Source: /Users/chemitaxis/.dnx/packages/System.Xml.ReaderWriter/4.0.11-beta-23516\n    File: ref/dotnet5.4/System.Xml.ReaderWriter.dll\nUsing Package dependency System.Xml.XDocument 4.0.11-rc2-23608\n    Source: /Users/chemitaxis/.dnx/packages/System.Xml.XDocument/4.0.11-rc2-23608\n    File: ref/dotnet5.4/System.Xml.XDocument.dll\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\nTime elapsed 00:00:04.2514801\nTotal build time elapsed: 00:00:04.2687232\nTotal projects built: 1\n```\n. Yes! Thanks! Changed to that solved my problem...\n\"dependencies\": {\n    \"EntityFramework.InMemory\": \"7.0.0-rc1-final\",\n    \"EntityFramework.MicrosoftSqlServer\": \"7.0.0-rc1-final\",\n    \"Microsoft.AspNet.Antiforgery\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Authentication.Cookies\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Authentication.Facebook\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Authentication.Google\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Authentication.MicrosoftAccount\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Authentication.OpenIdConnect\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Authentication.Twitter\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Diagnostics.Entity\": \"7.0.0-rc1-final\",\n    \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-rc1-final\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-rc1-final\",\n    \"Microsoft.AspNet.Mvc.TagHelpers\": \"6.0.0-rc1-final\",\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Session\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Tooling.Razor\": \"1.0.0-rc1-final\",\n    \"Microsoft.Extensions.CodeGenerators.Mvc\": \"1.0.0-rc1-final\",\n    \"Microsoft.Extensions.Configuration.CommandLine\": \"1.0.0-rc1-final\",\n    \"Microsoft.Extensions.Configuration.EnvironmentVariables\": \"1.0.0-rc1-final\",\n    \"Microsoft.Extensions.Configuration.Json\": \"1.0.0-rc1-final\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0-rc1-final\"\n  },\n. Yes! Thanks! Changed to that solved my problem...\n\"dependencies\": {\n    \"EntityFramework.InMemory\": \"7.0.0-rc1-final\",\n    \"EntityFramework.MicrosoftSqlServer\": \"7.0.0-rc1-final\",\n    \"Microsoft.AspNet.Antiforgery\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Authentication.Cookies\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Authentication.Facebook\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Authentication.Google\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Authentication.MicrosoftAccount\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Authentication.OpenIdConnect\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Authentication.Twitter\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Diagnostics.Entity\": \"7.0.0-rc1-final\",\n    \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-rc1-final\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-rc1-final\",\n    \"Microsoft.AspNet.Mvc.TagHelpers\": \"6.0.0-rc1-final\",\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Session\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-rc1-final\",\n    \"Microsoft.AspNet.Tooling.Razor\": \"1.0.0-rc1-final\",\n    \"Microsoft.Extensions.CodeGenerators.Mvc\": \"1.0.0-rc1-final\",\n    \"Microsoft.Extensions.Configuration.CommandLine\": \"1.0.0-rc1-final\",\n    \"Microsoft.Extensions.Configuration.EnvironmentVariables\": \"1.0.0-rc1-final\",\n    \"Microsoft.Extensions.Configuration.Json\": \"1.0.0-rc1-final\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0-rc1-final\"\n  },\n. Thanks to @all for your time... I love ASP.NET 5... ;)\n. Thanks to @all for your time... I love ASP.NET 5... ;)\n. ",
    "Dheerajkumar01": "i am getting same error , and yes my lock file shows \"rc2\" \nbelow is my \"dnvm list\"  output\n\ni tried changing lock file -rc2* to -rc1-update1 , but as i save my file visual studio runs restore and its again back to previous state having all -rc2 \nplease help me how can i solve .. i have some urgency to solve it \nthanks in advance\n. @csunali , thank you for reply , yes i did but no luck\n. {\n  \"authors\": [\n    \"Microsoft\"\n  ],\n  \"description\": \"Music store application on ASP.NET 5\",\n  \"version\": \"1.0.0-\",\n  \"compilationOptions\": {\n    \"emitEntryPoint\": true,\n    \"warningsAsErrors\": true,\n    \"define\": [ \"DEMO\", \"TESTING\" ]\n  },\n  \"compile\": [\n    \"../../shared/__/.cs\"\n  ],\n  \"publishExclude\": \".cmd\",\n  \"dependencies\": {\n    \"EntityFramework.InMemory\": \"7.0.0-\",\n    \"EntityFramework.MicrosoftSqlServer\": \"7.0.0-\",\n    \"Microsoft.AspNet.Authentication.Cookies\": \"1.0.0-\",\n    \"Microsoft.AspNet.Authentication.Facebook\": \"1.0.0-\",\n    \"Microsoft.AspNet.Authentication.Google\": \"1.0.0-\",\n    \"Microsoft.AspNet.Authentication.MicrosoftAccount\": \"1.0.0-\",\n    \"Microsoft.AspNet.Authentication.OpenIdConnect\": \"1.0.0-\",\n    \"Microsoft.AspNet.Authentication.Twitter\": \"1.0.0-\",\n    \"Microsoft.AspNet.Diagnostics.Entity\": \"7.0.0-\",\n    \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-\",\n    \"Microsoft.AspNet.Mvc.TagHelpers\": \"6.0.0-\",\n    \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-\",\n    \"Microsoft.AspNet.Session\": \"1.0.0-\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-\",\n    \"Microsoft.AspNet.Tooling.Razor\": \"1.0.0-\",\n    \"Microsoft.Extensions.CodeGenerators.Mvc\": \"1.0.0-\",\n    \"Microsoft.Extensions.Configuration.CommandLine\": \"1.0.0-\",\n    \"Microsoft.Extensions.Configuration.EnvironmentVariables\": \"1.0.0-\",\n    \"Microsoft.Extensions.Configuration.Json\": \"1.0.0-\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0-\",\n    \"Microsoft.Extensions.Options.ConfigurationExtensions\": \"1.0.0-\"\n  },\n  \"commands\": {\n    \"web\": \"MusicStore\"\n  },\n  \"frameworks\": {\n    \"dnx451\": { },\n    \"dnxcore50\": {}\n  }\n}\n. @csunali : i did but same result :-(\n. @csunali : Thank you \n. @csunali : i will let you if i solve this problem\n. @csunali : can you please share your machine's output for \n\"dnvm list\"\n. What i have observed that MusicStore code is referring to RC2 package and my runtime environment is rc1-update1 .. and that is causing the problem.\ncan anyone tell me either \n1) how can i find MusicStore code working with RC1 \nor \n2) how can i install RC2 runtime\n. Please anyone help me solve this issue.\n. Finally got it working.. i downloaded the correct release of MusicStore and its worked in single try\n. ",
    "cmadrid86": "Hi, I have a similar issue with my project. Currently I am getting the following error:\nNU1002 The dependency AA.Core 2.0.41 in project AA.Web.Core does not support framework DNX,Version=v4.5.1.\nMy project AA.Core 2.0.41 is not a vnext project, but since I created my own nuget server, I started to get this issue. Also, previously I had a local folder as a nuget feed and the AA.Core package was created based on a nuspec file, but to have the dependencies automatically, I changed the nuget pack command to generate the package from the project file.\nI hope you have an idea about the error.\nThank you!\n. ",
    "barriestewart": "I know this is closed but I had the same error publishing an rc2 (using unstable sources) MVC project to a remote server. That was building in VSTS and pushing out to a Windows machine. Running web.cmd would throw this same error. It turns out the setting in VSTS to clean out the working copy folder on the build agent hadn't been ticked so we had some leftover files in there which caused the issue. Once we were making sure the working copy folder was clean, everything worked as expected.\n. ",
    "yan-li": "Thanks Per, you're right. Fixed. \n. Thanks @moozzyk, it works as a charm.\nIt appears that the wiki page is out of date. https://github.com/aspnet/Home/wiki/Project.json-file\n. ",
    "Codenator81": "Have the same problem. It is came from change in namespace Microsoft.Dnx.Runtime to Microsoft.Extensions.PlatformAbstractions. Try change it in your code and do dnu restore.\nSame changes came late not sinhronized that way work on unstable little tricky. Just have patient and do \nconsole\ndnvm upgrade -u\ndnu restore\nIf it not help wait 3-4 hour and try again. For now I don`t know different method.  \nDon`t forget all way check https://github.com/aspnet/Announcements/issues\n. Latest is dnx-clr-win-x86.1.0.0-rc1-15996\nTo get latest unstable in console write:\nconsole\nset DNX_UNSTABLE_FEED=https://www.myget.org/F/aspnetcidev\ndnvm upgrade -u\n. @endeffects Try to remove sdk section in global.json\nand redo \ndnu restore\n. And there wrong runtimes:\njson\n\"compile\": {\n          \"lib/dotnet5.4/EntityFramework.Sqlite.dll\": {}\n        },\n        \"runtime\": {\n          \"lib/dotnet5.4/EntityFramework.Sqlite.dll\": {}\n        }\nSupport to be netcore50 or dnxcore50\n. @BrennanConroy Thanks good news)\n. @BrennanConroy is that new name for dnxcore50 or just alias? When I need point coreclr50 on linux wich name better for now?\n. ",
    "GVX111": "@Codenator81 thank you it works :)\n. 1.0.0-rc1-15838 @davidfowl \n. @davidfowl \n1.0.0-rc1-15921   clr     x86 \n1.0.0-rc1-15921   coreclr x86\nI have updated but another error\n\nSystem.MissingMethodException: Method not found: 'Void Microsoft.Extensions.Configuration.ConfigurationBuilder..ctor(Microsoft.Extensions.Configuration.IConfigurationProvider[])'.\n   at Microsoft.AspNet.Hosting.Program.Main(String[] args)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Dnx.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   at Microsoft.Dnx.ApplicationHost.Program.<>c__DisplayClass8_0.b__0()\n   at System.Threading.Tasks.Task`1.InnerInvoke()\n   at System.Threading.Tasks.Task.Execute()\n. Thank you. \n. ",
    "hantleman": "execute mozroots --import --sync should solve problem for linux\n. ",
    "joplaal": "This is a very important issue, since it prevents to use very popular libraries, like Entity Framework 6 from DNX projects, when current thread culture is other than invariant culture.\n. ",
    "mightyzot": "This is an extremely important issue for us as it prevents us from using non-dnx libraries that we've spent several years creating. Please don't let this one go unfixed.\n. @davidfowl, this issue appears to be caused by referencing assemblies created from csproj projects. We need to be able to reference those assemblies, of course, because they represent years of research and development and they do and will support both future asp.net projects as well as console apps, windows apps, etc. If you're saying that this will be resolved prior to release of asp.net 5 mvc 6, then I think that's fine. If not, then it needs to be addressed prior to release.\n@chosenek, there is a workaround, but it requires you to rebuild the older project with a slight modification to the auto-generated resource files. I don't have that on-hand right at the moment. I'll look it up tomorrow and post here, referencing the author of that workaround.\nEssentially, the workaround is to load the assembly and pass GetName() for the assembly name containing the resources. By default, I believe the auto-generated code passes the name of the currently executing assembly, which is what fails.\nAmended: @davidfowl - those are not project references, of course, they are direct references to the assemblies.\n. The problem was with consuming resources in libraries that were built for other projects, libraries that have been in production and likely couldn\u2019t be recompiled. Adding resources directly to the project was not an issue (in case that is how you tested this.)\nFrom: patrikwlund [mailto:notifications@github.com] \nSent: Thursday, June 2, 2016 4:40 AM\nTo: aspnet/dnx dnx@noreply.github.com\nCc: mightyzot markus.pope@softwareforsimon.com; Mention mention@noreply.github.com\nSubject: Re: [aspnet/dnx] Accessing resources from non-DNX assembly Cause Exception System.IO.FileNotFoundException (#3047)\n@musabsudan https://github.com/musabsudan  We upgraded from Beta7 to RC2 (since Beta8+ didn't work), and it works just fine with EF6 migrations in a csproj-project. I also tried adding a custom resource file to the csproj-project, and that is also accessible from the .Net Core project.\nSo we're not seeing any problems with this right now. What's the use-case that doesn't work for you?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/aspnet/dnx/issues/3047#issuecomment-223243747 , or mute the thread https://github.com/notifications/unsubscribe/AGCKHGMpzktjASoQy1p0B_-hsX3wnc-eks5qHqTdgaJpZM4GT9gz .  https://github.com/notifications/beacon/AGCKHLU0oWI9GxaOdd13R5qUdK1YqKtQks5qHqTdgaJpZM4GT9gz.gif \n. ",
    "joerglang": "Thought that RC means Release Candidate, meaning it is considered to be soon released and that developer can start implementing solutions.\nBut something \"Standard\" as this still does not work is a major obstacle and needs to be fixed, or is Microsoft believing that everyone is creating everything from scratch?\n. @davidfowl I am on the same line as chosenek regarding the \"GoLive\" license. I mean it is labled as \"Release Candidate\" which means according to Wikipedia that the product has the potential to be the final product if no serious bugs emerge. This does not really fit together with removing dnx and replacing it with cli which is kind of a huge design change late in the cycle...\nI'm sure there are a ton of good reasons for all this. But having started to use RC1 for two weeks now, I ran into several problems that hinder to see it as a \"Go Live\" product.\n. ",
    "chosenek": "Any plans on fixing this? It is not fixed in latest RC2 too.\nI dont get it how such a serious stuff can be around for so long time without a fix.\n. Ok, that I understand. What I don't understand is that MS gave ASP.NET 5 a \"Go Live\" license for a production deployment even with such a drawbacks? Very strange.\nAny possible workarounds?\n. Is this related only to some specific function, which can be removed/avoided? \"Leak\" mentioned above that it prevent from using Localization. I have removed any localization from our code and still having the same error while calling 3rd party library function.\nIn other words - is there ANYTHING I can do to get rid of this error while still using the 3rd party library, which is essential for our project?\nPlease, do not answer that there is nothing I can do.\n. @davidfowl I am not sure if the example will help here, but we are using an Interactive Inteligence (call center stuff) and I am stuck at the very beginning while establishing connection with server.\nExample can be found here: https://developer.inin.com/documentation/documents/icelib/40/webhelp/html/61196512-59bd-fb1e-20f0-96a5dddb6bc0.htm\nThe error is thrown on the last line there, using session.Connect(\nI can even provide the Dlls, if you think it might help.\nDavid, let me ask differently. We have been planning on using ASP.NET 5 for upcoming, bigger,  project. I have convinced everyone that this is a way to go. Now with these changes planned - do you think its better idea to avoid ASP.NET 5 until final version is out? We are still at the stage where change is possible.\n@mightyzot An example would definitely help. But if you mean by the 'older project', the assembly which causing this issue, then I am afraid we don't have a access to the source code. Its 3rd party application.\nWhat I have also noticed is that while referencing required assemblies in non asp.net 5 projects, all assemblies which are dependency to the referenced ones are copied to the project output automatically. In asp.net 5, I have to add all of them one by one as a direct reference in the project.\nEveryone: Isn't there a way to use a reflection to instantiate the assembly or just call the method of the assembly that causing the problem, with some reflection-like tweaks?\n. ",
    "jelster": "@davidfowl \n\nThis issue is specifically to do with using resource from a csproj project reference. Is that your scenario? \n\nThis issue is not limited to surfacing when attempting to load/use resources in an embedded assembly from a csproj project reference. I have a solid repro for this when referencing an already-built DLL containing an embedded resource.\n\nNobody has dug into a workaround because most if the infrastructure is changing and the issue will fix itself when we move to the cli. \n\nSo is it the case that all ISV's and 3rd party vendors will need to change the way their products get built simply in order for their customers to be able to reference their assemblies? I'm almost certainly misunderstanding something here, any clarification would be appreciated.\nI've confirmed the issue on CRL RC1 Update 1 and on 1.0.0-rc2-16357 in a simple console app referencing the assemblies, which were built against .NET 4.5 using the \"traditional\" project/build system\n. ",
    "musabsudan": "We have made a mistake and adopted Asp.Net Core earlier than we should, the go live license deceived us.\nThe go live seems to be for a Hello World apps only. You've promised us the moon guys and here we are.\n. @patrikwlund  I have been redirected to here from other places, my main issue was in the localization and the use of resource files. \nGlobalization and localization\n\nCurrently, resource files are not read when the project is run from Visual Studio. See this issue for more information. Until the issue with Visual Studio is addressed, you can test the project by running it from the command line.\n\nNo worries I already decided to stop any serious development with Asp.Net Core till you guys figure the basic workflow and decide on something. But today one of my team members asked for help.\n. ",
    "patrikwlund": "@musabsudan We upgraded from Beta7 to RC2 (since Beta8+ didn't work), and it works just fine with EF6 migrations in a csproj-project. I also tried adding a custom resource file to the csproj-project, and that is also accessible from the .Net Core project.\nSo we're not seeing any problems with this right now. What's the use-case that doesn't work for you?\n. ",
    "Gekctek": "I have a very similar issue to this. When I setup IIS to have an application point to the wwwroot folder of my deployed code it just gives a 404. I have been through all the guides online for this (including this one) and no luck so far. Also I have tried on multiple machines to be sure (same result). \nSome clarifications:\n1. I am using the default wwwroot name\n2. I have been using the web app for months with the other betas and so the code is good\n3. I have made sure on v1.2 HttpPlatformHandler\n4. Using IIS 8\n5. I can see from the logs from the httpplatformhandler that it starts up on localhost:{portnumber} everytime I hit the app for the first time, so something is working. I can go directly to that localhost:{portnumber} and it works perfectly\n6. Have restarted multiple times\n7. Have messed with all the app pool settings and user security issues that I possibly can\n8. Have tried many different urls to try to get static content in my wwwroot with no luck\n9. If I uninstall HttpPlatformHandler it will change from a 404 to a 500 error\nLong story short it seems like everything is working but the connection between the IIS Application and the localhost:{portnumber} seems to be broken\nI get the following message in the event logs after each attempt to load the page:\n\nThe description for Event ID 1001 from source HttpPlatformHandler cannot be found. Either the component that raises this event is not installed on your local computer or the installation is corrupted. You can install or repair the component on the local computer.\nIf the event originated on another computer, the display information had to be saved with the event.\nThe following information was included with the event: \nProcess '18772' started successfully and is listening on port '31574'.`\n. \n",
    "kosmakoff": "Indeed it looks like it.\nStill, can't find a solution to this problem.\n. I figured out that it was outdated nuget packages config that caused problems. Issue was solved when I simply copied aspnet repo nuget.config to my project directory.\n. It clearly says that you need to remove the environment variable called KRE_HOME.\nStart -> Control Panel -> Search Box : Environment Variables\n. ",
    "gach87": "I had a similar problem in beta7, needed to add the proper paths to the folders where projects are stored in global. json\n. in my experience package naming in aspnet 5 comes from the name of the folder the project. JSON is in. \n. ",
    "rbarbe": "Same result for beta8 and rc1-15838\nLoaded module: dnx.coreclr.so\nFound export: CallApplicationMain\nUnhandled Exception: \n   Cannot print exception string because Exception.ToString() failed.\n. I have followed those too, same result. libicu-dev and libicu55 are installed\n. Yes, It's working on 15.04\n. I just installed libicu52 manually from http://packages.ubuntu.com/vivid/amd64/libicu52/download and now it's working on 15.10\n. wget http://security.ubuntu.com/ubuntu/pool/main/i/icu/libicu52_52.1-8ubuntu0.2_amd64.deb\ndpkg -i libicu52_52.1-8ubuntu0.2_amd64.deb \n. Thank you for your help !\n. ",
    "DiegoZoracKy": "+1\n. ",
    "endeffects": "Hi Guys,\ni have the same problem and was not able to fix this with upgrade above.\ndnvm list\n-    1.0.0-rc2-16138   clr     x86          win             default\nproject.json\n```\n\"dependencies\": {\n    \"Microsoft.CSharp\": \"4.0.1-\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-\",\n    \"Microsoft.AspNet.IISPlatformHandler\": \"1.0.0-\",\n    \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-\",\n    \"Microsoft.ApplicationInsights.AspNet\": \"1.0.0-\",\n    \"Microsoft.Extensions.PlatformAbstractions\": \"1.0.0-\",\n    \"Microsoft.Extensions.Configuration.Json\": \"1.0.0-\",\n    \"Microsoft.Extensions.Configuration.EnvironmentVariables\": \"1.0.0-*\",\n},\n\"commands\": {\n    \"web\": \"Microsoft.AspNet.Server.Kestrel\"\n},\n\"frameworks\": {\n    \"dnx451\": { },\n    \"dnxcore50\": { }\n},\n```\nglobal.json\n{\n    \"sdk\": {\n        \"version\": \"1.0.0-rc2-16128\"\n    }\n}\ndnu restore\ndnx web\nSystem.InvalidOperationException: No service for type 'Microsoft.Dnx.Runtime.IApplicationEnvironment' has been registered.\n   at Microsoft.Framework.DependencyInjection.ServiceProviderExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\n   at Microsoft.Framework.DependencyInjection.ServiceProviderExtensions.GetRequiredServiceT\n   at Microsoft.AspNet.Hosting.Program.Main(String[] args)\n   at Microsoft.AspNet.Server.Kestrel.Program.Main(String[] args)\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Dnx.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, IServiceProvider serviceProvider)\n   at Microsoft.Dnx.ApplicationHost.Program.<>c__DisplayClass3_0.b__0()\n   at System.Threading.Tasks.Task`1.InnerInvoke()\n   at System.Threading.Tasks.Task.Execute()\n. Thanks, i've tried this in the past too without luck. I've cleared my whole library and runtime cache and it seems to work now.\n1) Deleting content of following folders\n    %USERPROFILE%.dnx\\bin\\packages\n    %USERPROFILE%.dnx\\packages\n    %USERPROFILE%.dnx\\runtimes\n2) set DNX_UNSTABLE_FEED=https://www.myget.org/F/aspnetcidev\n4) dnvm upgrade \n5) dnvm upgrade -u \n6) updating NuGet.Config\n7) dnu restore\n. Well, i thought the prefix is \"1.0.0-rc1-\" and not \"1.0.0-rc\"?\nAlso, your daily feed has both versions, but i was not able to limit the version to rc1.\nproject.json of Class Library:\n\"dependencies\": {\n    \"Microsoft.CSharp\": \"4.0.0-beta-23109\",\n    \"Microsoft.Extensions.DependencyInjection.Abstractions\": \"1.0.0-rc1-*\" \n  },\nproject.json of Web Application\n\"dependencies\": {\n    \"Microsoft.CSharp\": \"4.0.1-*\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-rc1-*\",\n    \"Microsoft.AspNet.IISPlatformHandler\": \"1.0.0-rc1-*\",\n    \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-rc1-*\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-rc1-*\",\n    \"Microsoft.ApplicationInsights.AspNet\": \"1.0.0-rc1-*\",\n    \"Microsoft.Extensions.PlatformAbstractions\": \"1.0.0-rc1-*\",\n    \"Microsoft.Extensions.Configuration.Json\": \"1.0.0-rc1-*\",\n    \"Microsoft.Extensions.Configuration.EnvironmentVariables\": \"1.0.0-rc1-*\",\n    \"Microsoft.AspNet.Server.IIS\": \"1.0.0-*\",\n    \"Microsoft.AspNet.Server.WebListener\": \"1.0.0-*\"\n},\nBut the project.lock.json of Web Application contains both version for most of the dependencies. Which ends up in a version conflict.\n. Well, i got your point and thanks for your help. But this is hard to handle with beta8, rc1 and rc2 versions out there. And the new strong naming makes it currently impossible to handle this on complex prototypes.\n. I totally agree with you and i'm going to downgrade my dependencies as adviced. Thanks :)\n. Hm, It looks like that the rc2 assemblies become incompatible to the rc1 assemblies because of the stronge naming. Which makes it hard to keep things working. Especially because the package restore seems not to respect the dependency versions: https://github.com/aspnet/dnx/issues/3152\n. ",
    "gpeipman": "I get this error when I publish my web application to Azure websites. Any idea what to do on Azure to get rid of this error?\n. I get this error when I publish my web application to Azure websites. Any idea what to do on Azure to get rid of this error?\n. If you are upgrading your web application from previous version then add the following line to startup class:\npublic static void Main(string[] args) => WebApplication.Run(args);\n. If you are upgrading your web application from previous version then add the following line to startup class:\npublic static void Main(string[] args) => WebApplication.Run(args);\n. ",
    "slofurno": "@khellang i think upgrading to a newer version of git for windows will fix that\n. ",
    "jln1989": "If my project does not have a static main method is there a way to attach and debug when running via dnx?\n. @Anderman  : In my project I tried attaching to the right dnx process and it gave me an error saying cannot attach to a program which does not have entry point which was the reasoning behind my query.\nLet me know if am missing something here.\n. ",
    "AStoker": "Any movement on this? I'm currently in the same situation.\n. ",
    "ChaosEngine": "The bug still holds true even after 1.0.0-rc1-update1. I'm testing it on latest microsoft/aspnet:1.0.0-rc1-update1-coreclr image. My docker environment: https://gist.github.com/ChaosEngine/a0018ab5b9232f03857f\nStacktrace:\n```\n\ninfo: Microsoft.AspNet.StaticFiles.StaticFileMiddleware[2]\n     Sending file. Request path: '/js/site.min.js'. Physical path: '/root/EntityFramework.Docs/docs/getting-started/aspnet5/sample/src/EFGetStarted.AspNet5.ExistingDb/wwwroot/js/site.min.js'\ninfo: Microsoft.AspNet.Hosting.Internal.HostingEngine[2]\n     Request finished in 0.0011ms 200 application/javascript\ninfo: Microsoft.AspNet.Hosting.Internal.HostingEngine[2]\n     Request finished in 0.001ms 200 application/javascript\nwarn: Microsoft.AspNet.Server.Kestrel[0]\n     Connection processing ended abnormally\n     System.IO.IOException: Error -104 ECONNRESET connection reset by peer ---> Microsoft.AspNet.Server.Kestrel.Networking.UvException: Error -104 ECONNRESET connection reset by peer\n        --- End of inner exception stack trace ---\n        at Microsoft.AspNet.Server.Kestrel.Http.SocketInput.GetResult()\n        at Microsoft.AspNet.Server.Kestrel.Http.Frame.d__79.MoveNext()\nwarn: Microsoft.AspNet.Server.Kestrel[0]\n     Connection shutdown abnormally\n     System.IO.IOException: Error -104 ECONNRESET connection reset by peer ---> Microsoft.AspNet.Server.Kestrel.Networking.UvException: Error -104 ECONNRESET connection reset by peer\n        --- End of inner exception stack trace ---\n        at Microsoft.AspNet.Server.Kestrel.Http.SocketInput.GetResult()\n        at Microsoft.AspNet.Server.Kestrel.Http.Frame.d__79.MoveNext()\ninfo: Microsoft.AspNet.Hosting.Internal.HostingEngine[1]\n     Request starting HTTP/1.1 GET http://172.17.0.1:5004/Blogs\ninfo: Microsoft.AspNet.Mvc.Controllers.ControllerActionInvoker[1]\n     Executing action method EFGetStarted.AspNet5.ExistingDb.Controllers.BlogsController.Index with arguments () - ModelState is Valid'\nfail: Microsoft.Data.Entity.Query.Internal.SqlServerQueryCompilationContextFactory[1]\n     An exception occurred in the database while iterating the results of a query.\n     System.IO.FileNotFoundException: Could not load file or assembly 'System.Data.SqlClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\n File name: 'System.Data.SqlClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' ---> System.IO.FileNotFoundException: Could not load the specified file.\n File name: 'System.Data.SqlClient'\n    at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName(AssemblyName assemblyName)\n    at System.Runtime.Loader.AssemblyLoadContext.Resolve(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName)\n    at Microsoft.Data.Entity.Storage.Internal.SqlServerConnection.CreateDbConnection()\n    at Microsoft.Data.Entity.Internal.LazyRef`1.get_Value()\n    at Microsoft.Data.Entity.Storage.RelationalConnection.Open()\n    at Microsoft.Data.Entity.Query.Internal.QueryingEnumerable.Enumerator.MoveNext()\n    at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()\n    at Microsoft.Data.Entity.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()\n\nfail: Microsoft.AspNet.Diagnostics.ExceptionHandlerMiddleware[0]\n     An unhandled exception has occurred: Could not load the specified file.\n     System.IO.FileNotFoundException: Could not load the specified file.\n     File name: 'EntityFramework.Core.resources'\n        at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName(AssemblyName assemblyName)\n        at Microsoft.Data.Entity.Query.Internal.LinqOperatorProvider.ExceptionInterceptor1.EnumeratorExceptionInterceptor.MoveNext()\n        at Microsoft.Data.Entity.Storage.Internal.SqlServerConnection.CreateDbConnection()\n        at System.Collections.Generic.List1..ctor(IEnumerable1 collection)\n        at System.Linq.Enumerable.ToList[TSource](IEnumerable1 source)\n        at EFGetStarted.AspNet5.ExistingDb.Controllers.BlogsController.Index()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n        at Microsoft.AspNet.Mvc.Controllers.ControllerActionExecutor.ExecuteAsync(MethodInfo actionMethodInfo, Object instance, Object[] orderedActionArguments)\n        at Microsoft.AspNet.Mvc.Controllers.ControllerActionInvoker.d__6.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n        at Microsoft.AspNet.Mvc.Controllers.FilterActionInvoker.d__53.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at Microsoft.AspNet.Mvc.Controllers.FilterActionInvoker.d__44.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n        at Microsoft.AspNet.Mvc.Infrastructure.MvcRouteHandler.d__6.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n        at Microsoft.AspNet.Routing.Template.TemplateRoute.d__27.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n        at Microsoft.AspNet.Routing.RouteCollection.d__9.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n        at Microsoft.AspNet.Builder.RouterMiddleware.d__4.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n        at Microsoft.AspNet.IISPlatformHandler.IISPlatformHandlerMiddleware.d__8.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n        at Microsoft.AspNet.Diagnostics.ExceptionHandlerMiddleware.d__6.MoveNext()\ninfo: Microsoft.AspNet.Mvc.Controllers.ControllerActionInvoker[1]\n     Executing action method EFGetStarted.AspNet5.ExistingDb.Controllers.HomeController.Error with arguments () - ModelState is Valid'\n```\n. I've created Dockerfile for exposing this bug. Hope it will help: https://github.com/ChaosEngine/dockerfiles/blob/master/entityframework/Dockerfile\n\nOne can buld it:\n$ docker build -t ef-bug .\nand test it with:\n$ docker run -it --rm ef-bug\n$ docker exec $(docker ps -q -f {ancestor=ef-bug}) curl http://localhost:5000/Blogs/\nErrors appear in curl-ed response and backround log console of container\n. @anurse Great, it behaves exactly as you predicted, thanks!\nHowever now, after changing connection to something more sane:\nvar connection = @\"Server=192.168.0.55;Database=testDB;User Id=user;Password=P@ssw0rd;\"\nI still get FileNot found for System.Net.Security. Stack trace:\n\nroot@655cbbd3df7d:~/EntityFramework.Docs/docs/getting-started/aspnet5/sample/src/EFGetStarted.AspNet5.ExistingDb# dnu restore --runtime ubuntu.14.04-x64\nMicrosoft .NET Development Utility CoreClr-x64-1.0.0-rc1-16231\nCACHE https://api.nuget.org/v3/index.json\nRestoring packages for /root/EntityFramework.Docs/docs/getting-started/aspnet5/sample/src/EFGetStarted.AspNet5.ExistingDb/project.json\nWriting lock file /root/EntityFramework.Docs/docs/getting-started/aspnet5/sample/src/EFGetStarted.AspNet5.ExistingDb/project.lock.json\nRestore complete, 4746ms elapsed\nFeeds used:\n   https://api.nuget.org/v3-flatcontainer/\nroot@655cbbd3df7d:~/EntityFramework.Docs/docs/getting-started/aspnet5/sample/src/EFGetStarted.AspNet5.ExistingDb# dnx web\nHosting environment: Production\nNow listening on: http://*:5004\nApplication started. Press Ctrl+C to shut down.\ninfo: Microsoft.AspNet.Hosting.Internal.HostingEngine[1]\n     Request starting HTTP/1.1 GET http://172.17.0.2:5004/Blogs\ninfo: Microsoft.AspNet.Mvc.Controllers.ControllerActionInvoker[1]\n     Executing action method EFGetStarted.AspNet5.ExistingDb.Controllers.BlogsController.Index with arguments () - ModelState is Valid'\nfail: Microsoft.Data.Entity.Query.Internal.SqlServerQueryCompilationContextFactory[1]\n     An exception occurred in the database while iterating the results of a query.\n     System.IO.FileNotFoundException: Could not load file or assembly 'System.Net.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\nFile name: 'System.Net.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' ---> System.IO.FileNotFoundException: Could not load the specified file.\n File name: 'System.Net.Security'\n    at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName(AssemblyName assemblyName)\n    at System.Runtime.Loader.AssemblyLoadContext.Resolve(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName)\n    at System.Data.SqlClient.SNI.SNITCPHandle..ctor(String serverName, Int32 port, Int64 timerExpire, Object callbackObject, Boolean parallel)\n    at System.Data.SqlClient.SNI.SNIProxy.ConstructTcpHandle(String fullServerName, Int64 timerExpire, Object callbackObject, Boolean parallel)\n    at System.Data.SqlClient.TdsParser.Connect(ServerInfo serverInfo, SqlInternalConnectionTds connHandler, Boolean ignoreSniOpenTimeout, Int64 timerExpire, Boolean encrypt, Boolean trustServerCert, Boolean integratedSecurity, Boolean withFailover)\n    at System.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin(ServerInfo serverInfo, Boolean ignoreSniOpenTimeout, TimeoutTimer timeout, Boolean withFailover)\n    at System.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover(ServerInfo serverInfo, Boolean redirectedUserInstance, SqlConnectionString connectionOptions, TimeoutTimer timeout)\n    at System.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist(TimeoutTimer timeout, SqlConnectionString connectionOptions, Boolean redirectedUserInstance)\n    at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, Object providerInfo, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData)\n    at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)\n    at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)\n    at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\n    at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\n    at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)\n    at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)\n    at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\n    at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\n    at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\n    at System.Data.SqlClient.SqlConnection.Open()\n    at Microsoft.Data.Entity.Storage.RelationalConnection.Open()\n    at Microsoft.Data.Entity.Query.Internal.QueryingEnumerable.Enumerator.MoveNext()\n    at System.Linq.Enumerable.SelectEnumerableIterator`2.MoveNext()\n    at Microsoft.Data.Entity.Query.Internal.LinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext()\nfail: Microsoft.AspNet.Diagnostics.ExceptionHandlerMiddleware[0]\n     An unhandled exception has occurred: Could not load the specified file.\n     System.IO.FileNotFoundException: Could not load the specified file.\n     File name: 'EntityFramework.Core.resources'\n        at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName(AssemblyName assemblyName)\n        at Microsoft.Data.Entity.Query.Internal.LinqOperatorProvider.ExceptionInterceptor1.EnumeratorExceptionInterceptor.MoveNext()\n        at System.Data.SqlClient.SNI.SNITCPHandle..ctor(String serverName, Int32 port, Int64 timerExpire, Object callbackObject, Boolean parallel)\n        at System.Collections.Generic.List1..ctor(IEnumerable1 collection)\n        at System.Linq.Enumerable.ToList[TSource](IEnumerable1 source)\n        at EFGetStarted.AspNet5.ExistingDb.Controllers.BlogsController.Index()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n        at Microsoft.AspNet.Mvc.Controllers.ControllerActionExecutor.ExecuteAsync(MethodInfo actionMethodInfo, Object instance, Object[] orderedActionArguments)\n        at Microsoft.AspNet.Mvc.Controllers.ControllerActionInvoker.d__6.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n        at Microsoft.AspNet.Mvc.Controllers.FilterActionInvoker.d__53.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at Microsoft.AspNet.Mvc.Controllers.FilterActionInvoker.d__44.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n        at Microsoft.AspNet.Mvc.Infrastructure.MvcRouteHandler.d__6.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n        at Microsoft.AspNet.Routing.Template.TemplateRoute.d__27.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n        at Microsoft.AspNet.Routing.RouteCollection.d__9.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n        at Microsoft.AspNet.Builder.RouterMiddleware.d__4.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n        at Microsoft.AspNet.IISPlatformHandler.IISPlatformHandlerMiddleware.d__8.MoveNext()\n     --- End of stack trace from previous location where exception was thrown ---\n        at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n        at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n        at Microsoft.AspNet.Diagnostics.ExceptionHandlerMiddleware.d__6.MoveNext()\ninfo: Microsoft.AspNet.Mvc.Controllers.ControllerActionInvoker[1]\n     Executing action method EFGetStarted.AspNet5.ExistingDb.Controllers.HomeController.Error with arguments () - ModelState is Valid'\ninfo: Microsoft.AspNet.Mvc.ViewFeatures.ViewResultExecutor[1]\n     Executing ViewResult, running view at path /Views/Shared/Error.cshtml.\ninfo: Microsoft.Extensions.DependencyInjection.DataProtectionServices[0]\n     User profile is available. Using '/root/.aspnet/DataProtection-Keys' as key repository; keys will not be encrypted at rest.\ninfo: Microsoft.AspNet.Mvc.Infrastructure.MvcRouteHandler[2]\n     Executed action EFGetStarted.AspNet5.ExistingDb.Controllers.HomeController.Error in 0.1998ms\n. @natemcmaster Thanks, it worked; have to harden my github search skills\nLGTM for the moment, suggesting closing the issue\n. \n",
    "henningst": "After looking a bit closer on this, it looks like this is a problem with Sake trying to install the npm module Gulp which has loads and loads of nested directories with dependent npm modules.\n. ",
    "npateman": "I understand this is an issue in rc1-final?  Is there a quick fix I can implement locally to get it working?\n. Okay this didn't work for me, so I assume it's not the same issue?\nI have all my files on a USB key, I put the ARM version of libuv.dll into a folder,\ne:\\extralibs\\libuv.dll\nthen added that to the PATH,\n$env:PATH+='e:\\extralibs\\'\nThen ran Kestrel again, same error,\nFailed to locate or load coreclr.dll\nI'm not getting any more errors, just that single line.\n. The location of the libuv.dll that I used was,\nC:\\myapp\\arm\\approot\\packages\\Microsoft.AspNet.Server.Kestrel\\1.0.0-rc1-final\\runtimes\\win10-arm\\native\nOddly enough, which is the published folder.\n. I published it using a powershell command, but you're right, there's no coreclr.dll file in the published folder.  Do I have to add this to the project.json to get it to include it? Or has it just omitted it due to a bug?\ndnu publish --out C:\\myapp\\arm\\ --no-source --runtime dnx-coreclr-win-arm.1.0.0-rc1-final\nThe coreclr.dll doesn't actually appear to be in the runtime folder in my user.dnx folder either.  i.e.\nC:\\Users\\nickp\\.dnx\\runtimes\\dnx-coreclr-win-arm.1.0.0-rc1-final\\bin\n. Just been reading this issue,\nhttps://github.com/aspnet/dnx/issues/3358\nIt suggests installing an rc2 build and using coreclr.dll from that... but I can't find it, apparently rc1-final is the latest,\n$env:DNX_UNSTABLE_FEED=\"https://www.myget.org/F/aspnetmaster/api/v2\" \ndnvm install latest -unstable -r CoreClr -arch arm\n. Installing now using this feed,\n$env:DNX_UNSTABLE_FEED=\"https://www.myget.org/F/aspnetvnext/api/v2/\"\n. That didn't work, just got\nFailed to start CLR host\nHaven't had any luck building for rc2 yet but I'll try again just incase.\n. No luck building for RC2, can't find rc2-16595 versions for all of my dependencies.\n. Hi @moozzyk, yeah I'm sure it works for something simple, but certainly doesn't work for my app which has the following dependencies (not all of which can be resolved to the latest version),\n\"Microsoft.Extensions.Configuration\": \"1.0.0-rc1-final\",\n\"Microsoft.Extensions.Configuration.Json\": \"1.0.0-rc1-final\",\n\"Microsoft.AspNet.Mvc\": \"6.0.0-rc1-final\",\n\"Microsoft.AspNet.Mvc.TagHelpers\": \"6.0.0-rc1-final\",\n\"Microsoft.AspNet.StaticFiles\": \"1.0.0-rc1-final\",\n\"Microsoft.AspNet.Tooling.Razor\": \"1.0.0-rc1-final\",\n\"Microsoft.Extensions.Logging\": \"1.0.0-rc1-final\",\n\"Microsoft.Extensions.Logging.Console\": \"1.0.0-rc1-final\",\n\"Microsoft.VisualStudio.Web.BrowserLink.Loader\": \"14.0.0-rc1-final\",\n\"Microsoft.AspNet.Mvc.WebApiCompatShim\": \"6.0.0-rc1-final\",\n\"System.Security.Cryptography.DeriveBytes\": \"4.0.0-beta-23311\",\n\"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-rc1-final\",\n\"System.Runtime.Serialization.Json\": \"4.0.0-beta-23109\",\n\"System.Runtime.Extensions\": \"4.0.11-beta-23516\",\n\"System.Collections\": \"4.0.11-beta-23516\",\n\"System.Runtime\": \"4.0.21-beta-23516\",\n\"Microsoft.CSharp\": \"4.0.1-beta-23516\",\n\"System.Private.Networking\": \"4.0.1-beta-23516\",\n\"System.Net.Security\": \"4.0.0-rc2-23623\",\n\"System.Reflection.TypeExtensions\": \"4.1.0-beta-23516\"\n. ",
    "MaximBalaganskiy": "Seems like this is fixed, at least under dotnet x86 the licence is picked up now\n. ",
    "Mertsch": "@davidfowl Absolutely not, just made sure.\n. ",
    "OlegKi": "One additional information, which I found out. There are an important difference in the usage of direct dependence \"System.Reflection.Metadata\":  \"1.1.0-*\" included in \"dependencies\" part of project.json. After adding the rule one can examin project.lock.json and see:\njson\n{\n...\n      \"Microsoft.AspNet.Mvc.Razor/6.0.0-beta8\": {\n          ...\n          \"System.Reflection.Metadata\": \"1.1.0-alpha-00014\"\n      },\n      \"Microsoft.CodeAnalysis.Common/1.1.0-beta1-20150928-02\": {\n          ...\n          \"System.Reflection.Metadata\": \"1.1.0-alpha-00014\"\n      },\n      \"System.Reflection.Metadata/1.1.0\": {\n        \"type\": \"package\",\n        \"dependencies\": {\n          \"System.Collections\": \"4.0.0\",\n          \"System.Collections.Immutable\": \"1.1.37\",\n          \"System.Diagnostics.Debug\": \"4.0.0\",\n          \"System.IO\": \"4.0.0\",\n          \"System.Reflection\": \"4.0.0\",\n          \"System.Reflection.Extensions\": \"4.0.0\",\n          \"System.Reflection.Primitives\": \"4.0.0\",\n          \"System.Resources.ResourceManager\": \"4.0.0\",\n          \"System.Runtime\": \"4.0.0\",\n          \"System.Runtime.Extensions\": \"4.0.0\",\n          \"System.Runtime.InteropServices\": \"4.0.0\",\n          \"System.Text.Encoding\": \"4.0.0\",\n          \"System.Text.Encoding.Extensions\": \"4.0.0\",\n          \"System.Threading\": \"4.0.0\"\n        },\n        \"compile\": {\n          \"lib/dotnet5.2/System.Reflection.Metadata.dll\": {}\n        },\n        \"runtime\": {\n          \"lib/dotnet5.2/System.Reflection.Metadata.dll\": {}\n        }\n      },\n...\n}\nI interpret the results as following: the project use the newest version 1.1.0 of System.Reflection.Metadata even if other dependencies like Microsoft.AspNet.Mvc.Razor required 1.1.0-alpha-00014 (or higher). Without the usage direct dependency it seems be used old 1.1.0-alpha-00014 version.\n. After moving the issue I'm not sure that all required information will be easy found by other users. Thus I repeat the following, which I find inportant result of my analyse:\nLike I wrote in the comment to the pull request, the building process of many projects faild with the error: \"System.Reflection.Metadata.dll\" will be not found in dnx\\packages\\System.Reflection.Metadata\\1.1.0-alpha-00014\\lib\\dotnet folder. The folder 1.1.0-alpha-00014\\lib really contains only portable-net45+win8 subdirectory and no dotnet folder. After including of direct dependency \"System.Reflection.Metadata\": \"1.1.0-*\" in all projects, which build failed, one can see that the new 1.1.0 version of System.Reflection.Metadata.dll be used and the folder .dnx\\packages\\System.Reflection.Metadata\\1.1.0\\lib contains now two subdirectories: portable-net45+win8 and dotnet5.2. It seems solves the probelm with building MVC projects.\nThus including of direct dipendency seems to produce another results in the building process.\n. How you can comment the existence of folders dotnet5.2and portable-net45+win8 in System.Reflection.Metadata\\1.1.0\\lib and the existence of only one portable-net45+win8 folder in `1.1.0-alpha-00014\\lib``?\nWhich version in your opinion would be correct in building MVC project today: 1.1.0-alpha-00014 or the latest currently existing on NuGet 1.1.0?\nDo you tried to add direct dependency \"System.Reflection.Metadata\": \"1.1.0-*\" in some project and verify project.lock.json that the resulting assemble will use version 1.1.0 instead of the usage 1.1.0-alpha-00014 before? The test is independent from the problem of reproducing the error\n25>C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\DNX\\Microsoft.DNX.targets(166,5): error : The design time host build failed with the following error: Ein Teil des Pfades \"C:\\Users\\Oleg\\.dnx\\packages\\System.Reflection.Metadata\\1.1.0-alpha-00014\\lib\\dotnet\\System.Reflection.Metadata.dll\" konnte nicht gefunden werden.\nwhich I reported before.\nI believe you of cause, that you can't reproduce the problem, but I'm sure that I will be not the only person, who will have the same problems in the future. Thus I suggest to analyse the problem exactly. What you need to know about my environment? I can provide you any information, and I can do any tests. I can send you any log files, traces of Process Explorer and so on. In any way the issue exist and I can help you to locale the reason of the problem.\n. One more additional information, which seems to me important for localizing of error during building of MVC project: I downloaded 1.1.0-alpha-00014 version of System.Reflection.Metadata from NuGet and examined the metadata. I can see that it contains both subfolders dotnet and portable-net45+win8. I exmined the metadara of System.Reflection.Metadata.1.1.0-alpha-00014.nupkg from C:\\Users\\Oleg\\.dnx\\packages\\System.Reflection.Metadata\\1.1.0-alpha-00014 and I see another package which don't have dotnet folder. I will try to analyse which NuGet repository contains wrong package and will write you the information later.\n. @Eilon : Thank you for the information. I reset my copy of local .dnx aproximately in the same time when you fixed the package System.Reflection.Metadata.1.1.0-alpha-00014.nupkg. If you would inform me directly I could save some hours. Nevertherless I can confirm that I get now new System.Reflection.Metadata.1.1.0-alpha-00014.nupkg package (with both dotnet and portable-net45+win8 folders). Now the building of MVC beta8 is successfuly.\n@Eilon and @dougbu :\nNow we can come back to my question in the issue: which version should be used during building of MVC project after publishing of final 1.1.0 version of System.Reflection.Metadata: old 1.1.0-alpha-00014 or new 1.1.0-alpha-00014?\nWhy one have different results if one would include direct dependency \"System.Reflection.Metadata\": \"1.1.0-*\" to Microsoft.AspNet.Mvc.Razor project for example? I made just now the test and compared the changes in project.lock.json. I can see that after including direct dependency Microsoft.AspNet.Mvc.Razor uses\n- System.Reflection.Metadata version 1.1.0 instead of 1.1.0-alpha-00014 before\n- System.Collections.Immutable version 1.1.37 instead of 1.1.36 before\n- new System.Globalization version 4.0.0 are added because of usage 1.1.37 instead of 1.1.36 version of System.Collections.Immutable\n- new System.Link version 4.0.0 are added because of usage 1.1.37 instead of 1.1.36 version of System.Collections.Immutable\nIt shows that removing of dependences (\"to list beyond the minimum needed for correct compilation\" see comment of dougbu) produces another results. If we speak about \"correct compilation\" then it's interesting to aks what version 1.1.0 or 1.1.0-alpha-00014 would be correct (or better) to use? One can see that optimization of dependencies produce side effects. One can see that 1.1.0-alpha-00014 will be used even if the final 1.1.0 exist in local cache if we don't include System.Reflection.Metadata as the direct dependency.\n. ",
    "yanickv": "The .NET Core and ASP.NET 5 RC announcement mentions that CrossGen is currently broken under Linux and will be fixed: http://blogs.msdn.com/b/dotnet/archive/2015/11/18/announcing-net-core-and-asp-net-5-rc.aspx \nDoes this mean that dnu publish --native will be fixed for RC2?\n. ",
    "olivier-spinelli": "After having looked at the Microsoft.Dnx.Tooling source code, this seems to be quite complicated. Palying with project.json versions and dependencies should be done outside.\n. ",
    "aaron-hammond": "@davidfowl ok, sorry, let me try and be a little more concise.\nI've created a test application: https://github.com/aaron-hammond/dnx.foo\nits a basic project with one unit test.\nWhen i run the following command in powershell:\ndnx test -method \"dnx.foo.tests.AddNumbersSpecs.AddSomeNumbersTests.TheResultIs20\" -debug\nI get the following exception:\n\nIf you run it without the -debug flag then the test runs fine, if i append a non-existent flag i get a more graceful \"unknown option\" provided as the error.\n. @dougbu if that's the case then so be it, but, i would suggest that: \"An unhandled Microsoft .Net Framework exception occurred in dnx.exe\" isn't a very good explanation of whats going on IMO.\nIt looks like, to me, that the command has failed in what i'm expecting it to do and it wants me to debug dnx.exe and not my code. \nI don't know how easy it is to change something like this but; \"Please choose an environment for debugging:\" would cause less confusion.\nI'm not sure if there is anything in the pipeline, but, it would be much better if it just opened visual studio or a pre-defined application? \nI can set my git command \"git mergetool\" to open the visual studio vsdiffmerge tool, not sure if i can do anything similar here?\nThanks for the info.\n. @davidfowl OK, no worries, thanks for the feedback. \n. ",
    "woutertenbosch": "Having the same issue here :(, you can use the beta7 runtime as workaround\n. ",
    "hjgraca": "I had the same issue on linux and docker and I fixed it by adding more nuget feeds to NuGet.config. \n<add key=\"api.nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n<add key=\"api.nuget.b8\" value=\" https://www.myget.org/F/aspnetbeta8/api/v2\" />\n<add key=\"AspNetVNext\" value=\"https://www.myget.org/F/aspnetvnext/api/v2\" />\n<add key=\"NuGet\" value=\"https://nuget.org/api/v2/\" />\n<add key=\"Roslyn\" value=\"https://www.myget.org/F/roslyn-nightly/\" />\n<add key=\"DotNet\" value=\"https://www.myget.org/F/dotnet-corefx/\" />\nStill can't make coreclr run dnu restore on travis builds though...\n. @benriordan glad it worked. I also made it work in travis ci, just needed to select Ubuntu OS.\n. @sirentek I'm using coreclr beta 8. I also got exactly that error System.Net.NameResolution not found.\nTo fix it I added more feeds to nuget, check my reply above. That worked. Also check my repo https://github.com/hjgraca/AspNet5-Awesome, that is building in travis ci you can clone it and see if you can find what is the problem with your implementation. hope it helps\n. @sirentek sorry no I haven't. but from the error you are getting it seems like npgsql does not support coreclr yet. so you can't build it. try remove \"dnx451\": { }, from your frameworks. it will probably complain in visual studio dependencies. if that is the case you need to ask to npgsql devs in their repo when is a coreclr version available.\n. ",
    "sirentek": "I had the same issue... I use linux mint mate x64. \nI use mono runtime.\nAfter I add the dependency EntityFramework7.Npgsql 3.1.0-beta8-2, I cannot restore it.\nIf I add the feed:  to my Nugget.config file, it restores.\nBut this time it cannot build: System.Console is not compatible with dnx core 50\nNow I will try with using CoreClr-beta7 runtime.\nHas anybody found a way to solve it ?\n. @hjgraca I would like to know which runtime you used to make it run.\nI used coreclr-beta7 runtime and built it.\nThis time there is an exception:\nSystem.IO.FileNotFoundException: Could not load file or assembly 'System.Net.NameResolution,...\"\nHere is my project.json:\n{\n    \"dependencies\": {\n        \"EntityFramework7.Npgsql\": \"3.1.0-beta8-2\",\n        \"EntityFramework.Commands\": \"7.0.0-beta8\",\n        \"Microsoft.Dnx.Runtime.Abstractions\": \"1.0.0-beta8\"\n    },\n    \"commands\": {\n        \"run\": \"SirenTek\",\n        \"ef\": \"EntityFramework.Commands\"\n    },\n    \"frameworks\": {\n        \"dnx451\": { },\n        \"dnxcore50\": {\n            \"dependencies\": {\n                \"System.Console\": \"4.0.0-beta-*\",\n            }\n        }\n    }\n}\nMint is based on Ubuntu so it should work on Linux mint. Please advise me where am I wrong ?\n. @hjgraca I used coreclr beta 8, added feeds to Nuget.Config file. I restored with success.\nBut I cannot build it: \nThe dependency System.Net.NameResolution 4.0.0-rc2-23513 in project SirenTek does not support framework DNXCore,Version=v5.0.\nI checked your repo and in project.json file, I couldn't see Ngpsql related dependency. Sqlite was used instead. Do you have a repo which includes both ef7 and npgsql which targets clr-core runtime ?\n. If I remove dnx451, it will create an other error. (Tried before) It will try building it while targeting dnx451 although it doesn't have any dependency. Thanks anyway!\n. ",
    "btskyy": "@hjgraca Excellent advice thanks. Running my own build server so this solved it for me by updating my ~/.config/NuGet.Config file on the ubuntu build server. I suppose this wouldn't be a solution yet for a hosted build server as you mentioned. \n. ",
    "gthuruv": "Thanks!\n. ",
    "tebeco": "I'm not sure how to do that because this is what VS2015 looks like when I try with RC1-Final :\nIt shows error for all aspnet packages that depends on Newtonsoft 6.0.x (Almost 90%)\nWebSite (xproj A : bottom project) reference a class library (xproj B : dnx package type) and this one reference a third project (xproj C : dnx package type)\nA > B > C\n- A is a Web site template for MVC6 (aspnet Preview)\n- 'C' depends on Newtonsoft.Json : \"NewtonSoft.Json\": \"8.0.1-beta3\",\n- 'B' depends on 'C' : \"MyProduct.C\": \"1.0.0-*\",\n- 'B' have the package \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-rc1-final\" (that depends on NewtonSoft 6.0.x\n- 'A' depends on B\n- 'A' also depends on about 10 packages that depends directly or not on Newtonsoft 6.0.x\nIt completly breaks Packages restoration for both \".NetFramework 4.5.1\" and \"Dnx 5.4\"\nHow should I handle this issue ?\nFYI : I've added the reference manually from the project.json, not the \"Manage Nugget\" Menu or so\n\n. I will in about 10 hours ;)\n. Hi again,\nFYI : I'm trying to migrate libraries from .net 2/4 to Dnx Compliant package.\nHere is here I am :\n- I've removed Newtonsoft.Json from all three project.json\n- I've still found evidence of it inside Lock file\n- I've cleaned project.lock.json (it was corrupted because of the error, i'm guessing there's a bug un VS2015 when you add/remove dependencies sometimes it does NOT CLEAN the lock files, it happens more that 5 times already on different occasions)\n- I've removed ALL the code that was requiring Newtonsoft from project 'C'\n- I've Added again Newtonsoft.Json inside Project 'C'\n- I've added Code that depends on newtonsoft (just a POC) in project 'C'\nSo far i can't managed to reproduce the issues I had.\nBelieve it or not i really think the is indirectly caused by Corporate Proxy i'm using here.\nI was using a \"Guest\" Wifi (no proxy), I thought it as working until this specific issue.\nI had to go back to the Proxy Network so I edited the \"Machine.Config\" for v4.xxx framwork/framework64 with the common block : \n      \nAnd it seems that this AND the clean up fixed few issues\nSorry about that :(\nQuestion aside :\nIs there any extension planned inside Visual Studio to have a more user friendly UI ou Test connectivy, dnvm version, dnx ... like the Cloud Explorer for example that gives a side view but could be managed aside from the Dev of VS2015 it self \n. ",
    "manastalukdar": "abc: https://github.com/manastalukdar/QiTwitterDemo/tree/master/src/QiTwitterDemo.Contract\nxyz: https://github.com/manastalukdar/QiTwitterDemo/tree/master/src/QiTwitterDemo.Helper\nFor some reason, this problem now does not appear to occur from my work machine (has same software as other machine where it was not working earlier).\nGoing to close this issue for now.\n. ",
    "brent-russell": "OS is Windows Server 2012 R2 x64\nIt's under system32 because the build process runs as the system user, so .net versions get installed under the \"systemprofile\" user profile, which lives in system32.\nI can't rule out permissions issues, but again the process is running as the system user and using its profile, and dnx was working under beta7.\nI currently have DNX_HOME set to C:\\Windows\\system32\\config\\systemprofile.dnx because this is where dnx was installed by default when the process first ran. I'll try setting it to a different location and forcing the script to install dnx elsewhere.\nThanks, and I'll let you know if it that changes anything.\n. I set the build/script's DNX_HOME environment variable to a path inside the build working directory, and that solved it. I like this location much better.\nThanks.\n. ",
    "lszomoru": "@muratg, could you please provide more details on the dnu and nuget merger? Will the merge happen in the dnx or nuget.client repos? Is there an issue that one could track to know when the merge completes? I am asking as I am currently blocked due to several bugs in dnu that should be fixed with the merger. Thanks! \n. @muratg, thanks for the quick turnaround. I will make sure to keep an eye on the nuget/home repo. The good news is that the issues that I ran into with dnu restore are supported by nuget restore so the merger should unblock me. Really looking forward to the RC2 release!\n. ",
    "rosieks": "Exactly, it's U+0142 (\u0142)\n. I just notice that I don't have such directory. DNX is looking for path:\nC:\\Users\\S\u0142awek\\.dnx\\packages\\System.IO\\4.0.0\\System.IO.4.0.0.nupkg.sha512\nand I have only such path:\nC:\\Users\\S\u0142awek\\.dnx\\packages\\System.IO\\4.0.0.0\\System.IO.4.0.0.0.nupkg.sha512\nSo in that case I think that the only issue with \u0142 letter is about displaying it in VS output\n. Thanks @davidfowl \nThat helps.\n. ",
    "PMoneda": "@anurse I changed the message to \"'{0}' does not contains a 'Program' type suitable for an entry point\"\n. @anurse, @moozzyk 's comment it's done! \n. ",
    "dlech": "MonoBrick and leJOS are based on the official firmware for the EV3 from the LEGO Group and are a generic Linux with no type of packaging system and a rather old kernel (2.6.32). ev3dev is Debian Linux (jessie) and has totally different hardware drivers and a contemporary kernel.\nIt looks to me like getting dnx setup takes massive amounts of RAM. I read on Hanselman's blog that one component takes 400MB while installing. The EV3 only has 64MB. I suggest looking at the ev3dev brickstrap tool. It provides an environment similar to Linux Containers that allows you to build and install software on a host computer and then create a bootable SD card image that can be used on the EV3. \n. I played around with this a bit as well. I noticed this. The EV3 is armv5tejl, so it will be detected as x86.\n. ",
    "mconnew": "WCF has been hitting this issue with building on Linux and I have a fix I'm going to create a PR for. It's caused by the fact that on mono, ServicePointManager is set to only allow one current request per remote host. When you have a large number of packages to download, you can have up to 50 packages per source being attempted to download at once. You end up with 50 tasks all awaiting on HttpClient.SendAsync. The first request in will begin downloading, and all subsequent requests will queue up. The issue is the request timeout timer (defaults to 100 seconds) will begin pretty much straight away when entering SendAsync. With enough packages needing to be downloaded, you will eventually have a call into SendAsync waiting longer than 100 seconds which causes it to timeout.\n. Is there a way to re-run the ci build? It looks like the build stalled downloading packages required to even build my code change on OSX. It hadn't even got to compiling the code. The CI build ran fine on Linux.\n. I think I might be missing something but it looks like this is the code that .NET CLI uses. When using .NET CLI tool to restore packages, it executes a script (dotnet-dnx.cmd) which simply does the following:\n\"%~dp0dnx\\dnx\" \"%~dp0dnx\\lib\\Microsoft.Dnx.Tooling\\Microsoft.Dnx.Tooling.dll\" %*\nThere's a bash script too which does the equivalent on unix. This uses the implementation in Microsoft.Dnx.Tooling.dll which has a bug on Mono, and is fixed by the PR I submitted. Unless I've missed something, isn't this still the active code base being used by .NET CLI?\n. We don't have direct control over our build tools, we use the same infrastructure is the dotnet/corefx repo. At the moment we're using a mono based version of dnx. There are plans in place to move to running dnx restore on coreclr (presumably .NET CLI), but it's not ready yet. This bug means at the moment we can't do our own CI tests building on Linux directly but instead need to cross compile on windows and copy our build to unix with a convoluted test script. Otherwise we sometimes need to rerun our build repeatedly until we have everything downloaded before we even compile. I've seen it take up to 5 times.\n. ",
    "thecodejunkie": "\"simple\"\n:)\n. ",
    "SamB": "@davidfowl:\n\n\nUnlike before, we're checking in the private key.\n\n\nWell, that certainly eliminates what could have been the main pain point going forwards!\n. ",
    "voltagex": "Oops, it's dnu restore. \nDNX_TRACE=1 makes it a little more obvious.\n. Oops, it's dnu restore. \nDNX_TRACE=1 makes it a little more obvious.\n. ",
    "reliak": "Ok, thanks. But what if I want to use a dependency just for preprocessing as part of the build process?\nIf it is specified in project.json, it will also be published. Is there a way to use a dependency only in development and ignore it otherwise?\nI elaborate my use case a bit. Lets say I have a package that I want to call before every build. Then I would define a command like:\n\"commands\": {\n    \"mypackagecommand\": \"SomePackageName\"\n}\nIn the prebuild I then want to execute that command:\n\"scripts\": {\n    \"prebuild\": [\n        \"dnx project.json mypackagecommand\"\n    ]\n}\nSo the dependency to SomePackageName is only for build purposes.\n. @moozzyk Thanks for the link to the repo.\nHowever, as far as I can tell, the code does not use any dependencies within the scripts block. It only calls dnx to a relative project path.\nMaybe there is another way for what I'm trying to do, but again, this is my problem:\n1. I want to execute some code from a library (e.g. a package from NuGet) in pre- or post-build\n2. For that, I need to put this package in the dependencies section in project.json\n3. I don't want this dependency treated as a \"normal\" dependency, but as a dependency that is only required in development/build stage\nAs I said in my initial comment, this is similar to devDependencies in Node package manager (https://docs.npmjs.com/files/package.json#devdependencies).\n. @moozzyk The build dependency type works as @davidfowl mentioned when using dnu pack.\nThe only think that bothers me, is that dnu publish creates a package in the output's packages folder.\nAccording to https://github.com/aspnet/Home/wiki/DNX-utility#publish-dnu-publish:\n\nThe packages directory contains all the packages your application needs to run.\n\na dependency of type build should not be in the packages folder, because it is not required by the application.\nThe additonal (but unnecessary) package in the packages folder is not a big deal, but it would be nice if build dependencies would be excluded when publishing.\n. ",
    "JorritSalverda": "+1  I would expect dnu build and dnu publish to behave similarly as dnu restore which can use a global.json file to scan multiple subdirs for project.json files.\n. ",
    "peterblazejewicz": "Hm, I've tried to re-install, and it looks it still beta8?\n```\ndnu commands install Microsoft.Dnx.Watcher --no-cache\nMicrosoft .NET Development Utility Mono-x64-1.0.0-rc1-16147\nGET https://api.nuget.org/v3/index.json\n  OK https://api.nuget.org/v3/index.json 397ms\n  GET https://api.nuget.org/v3-flatcontainer/microsoft.dnx.watcher/index.json\n  OK https://api.nuget.org/v3-flatcontainer/microsoft.dnx.watcher/index.json 1152ms\n  GET https://api.nuget.org/v3/index.json\n  OK https://api.nuget.org/v3/index.json 260ms\nRestoring packages for /Users/piotrblazejewicz/.dnx/bin/packages/fe16379c14a44cf09e1a4c87e208a970/project.json\nWriting lock file /Users/piotrblazejewicz/.dnx/bin/packages/fe16379c14a44cf09e1a4c87e208a970/project.lock.json\nRestore complete, 216ms elapsed\nNuGet Config files used:\n    /Users/piotrblazejewicz/.config/NuGet/nuget.config\nFeeds used:\n    https://api.nuget.org/v3-flatcontainer/\n  GET https://api.nuget.org/v3/index.json\n  OK https://api.nuget.org/v3/index.json 232ms\nRestoring packages for /Users/piotrblazejewicz/.dnx/bin/packages/Microsoft.Dnx.Watcher/1.0.0-beta8/app/project.json\nWriting lock file /Users/piotrblazejewicz/.dnx/bin/packages/Microsoft.Dnx.Watcher/1.0.0-beta8/app/project.lock.json\n```\ndnu feeds list\nFeeds in use:\n    https://myget.org/f/aspnetrc1/api/v2\n      Origin: /Users/piotrblazejewicz/development/WebAPIApplication/./nuget.config\n    https://api.nuget.org/v3/index.json [Disabled]\n      Offical NuGet Source, enabled by default\nDoes it mean I should simply force install to rc1 somehow?\n. @BrennanConroy \nYes, this is it. Sorry for a false flag post.\nThe command I used:\ndnu install Microsoft.Dnx.Watcher --no-cache --source https://myget.org/f/aspnetrc1/api/v2\nThanks!\n. ",
    "neilyoung": "Still the same exception.\ndnu list\n- Microsoft.Dnx.Watcher 1.0.0-rc1-final\n  Microsoft.Dnx.Watcher.Core 1.0.0-rc1-final\nNevertheless\ndnx-watch web\nSystem.NullReferenceException: Object reference not set to an instance of an object.\n   at Microsoft.Dnx.Watcher.CommandOutputProvider..ctor(IRuntimeEnvironment runtimeEnv)\n   at Microsoft.Dnx.Watcher.Program..ctor(IRuntimeEnvironment runtimeEnvironment)\n. After some back and forth my dnx now has a --watch option, which works...\nMicrosoft .NET Execution environment Mono-x64-1.0.0-rc1-16202\nUsage: dnx [options]\nOptions:\n  --project|-p               Path to the project.json file or the application folder. Defaults to the current folder if not provided.\n  --appbase                  Application base directory path\n  --lib                 Paths used for library look-up\n  --debug                          Waits for the debugger to attach before beginning execution.\n  --framework        Set the framework version to use when running (i.e. dnx451, dnx452, dnx46, ...)\n  -?|-h|--help                     Show help information\n  --version                        Show version information\n  --watch                          Watch file changes\n  --packages          Directory containing packages\n  --configuration   The configuration to run under\n  --port                     The port to the compilation server\n. ",
    "trentbullard": "when i use dnx --watch test, it simply runs my test suite and exits instead of showing this: dnx-watch. When i use dnx-watch (with or without any options) i get \n\ni'm using \n\nany help would be great although i suppose i can just click run tests in VS each time since its not that annoying\n. when i use dnx --watch test, it simply runs my test suite and exits instead of showing this: dnx-watch. When i use dnx-watch (with or without any options) i get \n\ni'm using \n\nany help would be great although i suppose i can just click run tests in VS each time since its not that annoying\n. ",
    "AArnott": "I see. Thanks. I'll give that a try. I would have expected that Update 1 would have included this though. Is that a bad assumption?\n. @sayedihashimi I never modify global.json myself. But it seems to follow the settings changes made from VS. For instance, after the step to use beta8, the contents of global.json are:\njson\n{\n  \"projects\": [ \"src\", \"test\" ],\n  \"sdk\": {\n    \"version\": \"1.0.0-beta8\",\n    \"runtime\": \"clr\",\n    \"architecture\": \"x86\"\n  }\n}\n. I see. Is there a story for improved errors in VS or at the command line when the user is in this mismatched world?\nMy very limited understanding on this is I can use dnvm use 1.0.0-beta8 followed by dnu build to build with beta8. If I can do this, why doesn't it also work in VS? And how is the customer expected to recognize and recover from the situation?\n. Thanks, @BillHiebert. \nThe repro machine is an Update 1 RC (newer than customers have, but older than RTM). The exact version is in my repro steps (first line).\n. I don't think that resolves the issue. The values for these assembly metadata need to be computed at build time, and DNX (AFAIK) doesn't offer me a way to hook into that pipeline. \nAlso, that doesn't address the NuGet package version.\n. Thanks, @GuardRex. But that requires a source code change to impact the build. Then to ensure the number keeps incrementing you have to check in the change. What I'm looking for is automation that can control the version without changing source code every time I build or publish.\nAnd I want build and publish to be effectively the same thing. Every time I build a commit, the result should be the same, regardless whether it's a CI build, a local build, or a release build.\n. I don't need to. But since tests and product are intermingled in the source tree, and DNU's story for building everything requires that I either build or pack everything, and I do need to pack the product, that leaves me with just two options:\n1. dnu pack ** (easy, but has this bug)\n2. Enumerate every product project somehow and dnu pack it individually. Then also enumerate every test project and dnu build it. Because these are each individual top-level build invocations, and DNU builds p2p refs, that sounds like a lot of work, for a really slow build.\n. ",
    "wburgers": "Was this issue solved yet?\nI would like to speed up our build, but this is the reason it fails to work in parallel.\n. ",
    "Mparaiso": "I was doing a search about this very subject, and I landed on that page, which didn't really help. This answer on stackoverflow explains precisely how to set the correct PORT and IP for a web application launched with dnx web : \nhttp://stackoverflow.com/questions/34212765/how-do-i-get-the-kestrel-web-server-to-listen-to-non-localhost-requests\nAs for 2016-05-08 , that solution works.\nit involves creating a hosting.json file . A hosting.development.json can also be created and the correct manifest will be picked by Kestrel thanks to an environment variable, it is all detailed in the link above. No need to modify project.json or use HTTP_PLATFORM_PORT environment variable.\n. ",
    "ardacetinkaya": "Even if I changed the owner for .dnx, I got the same error\n. @muratg you may find the output. packages do not have permissions I guess.\n\nAnd this is the upper folder\n\nWhen I installed from installer, this was also owned by root. \n. Thanks a lot, this workaround fixes it.\n. ",
    "rdarioduarte": "Hi @BrennanConroy I'm experiencing the same issue but didn't get resolved with the workaround. Still Permission denied after changing the owner to myself. You said that it's fixed under Update1, how should I proceed? thanks\n. Hi again, seems like running chmod solved my issue, this was the command I run:\nchmod 777 /Users/dario/.dnx/runtimes/dnx-mono.1.0.0-rc1-update1/bin/dnu\nThanks\n. ",
    "matizk144": "Additionaly I observed situation, that dnx publish command publish app with depedencies (packages), but finally, when we want to run app (from published folder) published runtime (dnx) still use packages from C:\\Users[user].dnx\\packages, instead from published packages.\nTested in runtime dnx-coreclr-win-arm.1.0.0-rc2-16177, during publish asp.net webapi.\n. ",
    "mjeanrichard": "Thanks, after some testing I can see that the Problem is a different one. If the attribute is defined in a 'normal' code file then it works indeed as you say.\nBUT if the attributes are defined in a liked code file (Visual Studio: \"Add as Link\") they are not picked up. In order to use the same attributes in every project we create one code file with the attribute in the solution root folder and link them into every project. But that does not seem to work (yet?).\n. Ok, thank you. That works fine!\nI think it has to do with the way I add linked files. I usually add the linked file for the first project in my solution (which happened to be a conventional class library) and the just copy the links to the other project (which is faster the using the add dialog for every project). This works fine with conventional (old style) projects, but it does not update the project.json file with vNext projects. Everything looks fine in the solution explorer but the files are not compiled. I noticed that the \"Add as Link\" option is disabled when i try to add the file directly to the vNext project.\nSo, this is only an issue if you copy linked files from one project to another...\n. ",
    "dahlbyk": "\nBut in this world, nuget packages are the unit of reference so it totally makes sense to have debuggable packages.\n\nI think I'm missing something here... What part of a standard local web dev workflow would use pack or publish? I wonder if the sensibility of this default depends on a framework/library lens vs actual web app work?\n. Right - as framework devs your team has specific needs that seem like they might not align with what makes sense for devs building web apps with your framework. That's not to diminish your team's (and OSS contributors') needs\u2014you're using this stuff more than anyone else pre-release\u2014but IMO the focus needs to be on what \"normal\" people will do while building a web app in this new world.\nI can't think of a \"normal\" use case to debug packed or published assets, but I may be overlooking something.\nCould project.json allow specifying the default configuration to use per cli option, with scaffolding providing reasonable defaults? What happens if someone doesn't have a Debug target defined?\n. ",
    "Haacked": "\nI'm not even sure how you would detect it other than location on disk (/debug) folder\n\nIdeally, dnu pack would embed that information into the nupkg when packing.\nUntil then, a heuristic you could look at is to check if any assembly in the lib folder has the  System.Diagnostics.DebuggableAttribute set.\n. ",
    "JoshClose": "@davidfowl Is there a reason it's choosing net20 over one of the client profiles?\nIf I wanted to add DNX support to CsvHelper, should I follow Marc Gravell's posts? http://blog.marcgravell.com/2015/11/the-road-to-dnxpart-3.html\n. @davidfowl Would you be able to confirm if this is a bug in your logic? I've had a few people reporting this. If it's an issue with with package structure or something, that should be a quick fix for me. I won't be able to do the dnx work for a while still.\nThis same thing happened in VS/NuGet previously too. Here is the ticket for the NuGet issue from before. http://nuget.codeplex.com/workitem/2502\n. ",
    "danludwig": "I do have vs update1 rc installed, and still creating a new class library project uses net451 instead of dnx451.\n. ",
    "redowl3": "I also have this issue and have vs update1 rc installed - very annoying.\n. ",
    "glennsills": "I am seeing the same error. Below is my system info.\nMicrosoft Visual Studio Community 2015\nVersion 14.0.23107.0 D14REL\nMicrosoft .NET Framework\nVersion 4.6.01038\nInstalled Version: Community\nVisual Basic 2015   00322-20000-00000-AA669\nMicrosoft Visual Basic 2015\nVisual C# 2015   00322-20000-00000-AA669\nMicrosoft Visual C# 2015\nVisual C++ 2015   00322-20000-00000-AA669\nMicrosoft Visual C++ 2015\nWindows Phone SDK 8.0 - ENU   00322-20000-00000-AA669\nWindows Phone SDK 8.0 - ENU\nApplication Insights Tools for Visual Studio Package   1.0\nApplication Insights Tools for Visual Studio\nASP.NET and Web Tools 2015 (RC1 Update 1)   14.1.11120.0\nASP.NET and Web Tools 2015 (RC1 Update 1)\nASP.NET Web Frameworks and Tools 2013   5.2.30624.0\nFor additional information, visit http://www.asp.net/\nAzure App Service Tools v2.7.1   14.0.11112.0\nAzure App Service Tools v2.7.1\nCommon Azure Tools   1.5\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\nFile Nesting   1.0\nAutomatically nest files based on file name and enables developers to nest and unnest any file manually\nGenerateUnitTest   1.0\nGenerates unit test code for methods in classes under test.\nGitHub.VisualStudio   1.0\nA Visual Studio Extension that brings the GitHub Flow into Visual Studio.\nMicrosoft Azure HDInsight HQL Service   2.0.2200.0\nLanguage service for Hive query\nMicrosoft Azure HDInsight Tools for Visual Studio   2.0.2200.0\nAn integrated development environment for HDInsight application development.\nMicrosoft Azure Mobile Services Tools   1.4\nMicrosoft Azure Mobile Services Tools\nMicrosoft Azure Tools   2.7\nMicrosoft Azure Tools for Microsoft Visual Studio 2015 - v2.7.30728.1602\nNuGet Package Manager   3.3.0\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\nOpen Command Line   2.0.159\nOpens a command line at the root of the project. Support for all consoles such as CMD, PowerShell, Bash etc.\nPreEmptive Analytics Visualizer   1.2\nMicrosoft Visual Studio extension to visualize aggregated summaries from the PreEmptive Analytics product.\nSQL Server Data Tools   14.0.50616.0\nMicrosoft SQL Server Data Tools\nVisual Studio Tools for Universal Windows Apps   14.0.23309.00 d14oob\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\n. Rebooting solved the problem. \n. ",
    "kpocza": "Meanwhile I've switched back to 4.5.1 and it's working.\n. Meanwhile I've switched back to 4.5.1 and it's working.\n. ",
    "kaanoo2904": "@moozzyk I use the Windows 7 Professional SP1 64Bit version, ( X17-59186.iso, I downloaded years ago , not remember where)  . I turn off windows update, but have .net 4.5 installed.\n. @moozzyk Ok, it's work now . But I think you should include everything needed in dnx installer ? I ( and I believe many other dev also) prefer to turn off this windows update feature.\n. ",
    "aplex": "I have this problem reliably reproduced on clean 32-bit English version of Windows 7 with SP1 and empty console application built on dnx-clr-win-x86.1.0.0-rc1-update1.\nIt would be great if this can be fixed somehow, or at least minimum system requirements should be updated to demand latest updates.\n. ",
    "andy65007": "@moozzyk I think someone should fix this problem.first, it is a bug obviously, second, developer should dig in to the real problem to improve software quality\u3002 \nPS: I'm not sure is this correct: my pc's arch is win 7 x86_64, but the library \"dnx.win32.dll\" in error message include 32? \n. ",
    "Nero0909": "KB2533623(https://support.microsoft.com/en-us/kb/2533623) fix this problem. As I understand, the problem occurs when call LoadLibraryEx WinAPI function, where flag LOAD_LIBRARY_SEARCH_DEFAULT_DIRS requires this KB(see https://msdn.microsoft.com/en-us/library/windows/desktop/ms684179(v=vs.85).aspx). At least it helped me.\n. ",
    "jincod": "Answer: https://github.com/aspnet/Mvc/issues/3254\n. Solution for me:\n\"commands\": {\n  \"web\": \"Microsoft.AspNet.Server.Kestrel\",\n  \"dev\": \"Microsoft.AspNet.Server.Kestrel ASPNET_ENV=development\"\n}\nFor dev dnx dev, for production dnx web\n. ",
    "picakciali": "help me plz :). ",
    "dls314": "I've seen a similar error output. In my case it happens when I have an empty dnxcore50 property. I worked around it by adding back minimal content there. For me, it's:\n\"frameworks\": {\n    \"dnx451\": { },\n    \"dnxcore50\": {\n      \"dependencies\": {\n        \"Microsoft.CSharp\": \"4.0.1-beta-23409\"\n      }\n    }\n  }\n. Do you have any thoughts about how to figure out if a package will be broken today? Other than my mental list (liblog, mono.options, ...), I've started searching my packages folder for *.ps1 after the fact.\n. ",
    "couven92": "Ah, that makes sense, of course, I actually had not thought about that.\n. @Eilon iirc it was a source package back in the old DNX days, but then it was changed to a usual library package... Any idea why it is a Source Package again? And why it is moving around so much? It is really hard to find, and therefore also hard to create issues and submit PRs!. ",
    "a11smiles": "Intellisense keeps telling me that System.IO.File is not available in System.IO.\nAnd compiler tells me that \"The type or namespace name 'File' does not exist in the namespace 'System.IO' (are you missing an assembly reference?)\"\n. @anurse Thanks so much for the tip.  Additionally, thanks for the website.  Man, it always takes me a bit of time to \"hunt and peck\" for those types in the new packages and that site will save me a ton of hours.\n. ",
    "andschwa": "For what it's worth, dotnet-cli has the same issues, and more (they don't even support the ILibraryManager yet).\n. > I'm not sure what you're asking for here. You want a way to invoke managed code from native code in the running app domain?\nI need a way to create an app domain and invoke managed code, from a native shared library.\n\nI'm not sure it's major enough to support in a first class way. How did you do this in .NET Framework?\n\nThe upstream authors (and my way with our custom CoreCLR build system) do this by owning the entire native host: initialize the CLR, create delegates, use them, then shut down the CLR. Things I'd prefer to be able to do via a library, rather than reimplementation.\n\nWhat are you using it for?\n\nWe are (unfortunately) using it to get a list of the loaded .NET libraries so that we can build a type catalog cache, because the upstream project requires this.\n\nFork DNX.But it's going away anyways so you may not want to do that.\n\nExactly. Unfortunately dotnet-cli has its own host of issues (it doesn't work out-of-the-box yet).\n\nWhat exactly are you trying to do.\n\nMy mouth is forced shut on this by our company's choice of secrets. I'll ping you on Monday and explain.\n. What I'd like is a hosting library from DNX or dotnet-cli or CoreFX, so I don't have to redo all the setup work, and just call some functions. The CLR, DNX, dotnet-cli, and my internal project all have individual forks of what amounts to the same native host code.\nMore than that, however, is that to use PlatformServices.Default.LibraryManager, DNX does preliminary work in managed code that, again, I'd have to redo to use.\n. Just FYI @davidfowl we got what we needed with respect to this issue using dotnet-cli. We still have to own the host, but the result of a dotnet publish was much easier to work with, especially without DNX's managed shim host.\n. I've talked a bit to @anurse of dotnet-cli, and if/when I get the time, I'd like to port the work I've done internally over to their native host, and just consume it from there. Will keep you updated.\n. ",
    "plitwin": "Sorry I mistyped. I meant dnvm list! It still produces the error!\nPaul Litwin\nFrom:  David Fowler notifications@github.com\nReply-To:  aspnet/dnx\nreply+00117bf3b83c91a1ac76de2b97d2f5a13038e0267adb548592cf000000011279dda59\n2a169ce072e8792@reply.github.com\nDate:  Friday, December 4, 2015 at 3:03 PM\nTo:  aspnet/dnx dnx@noreply.github.com\nCc:  Paul Litwin paul@litwinconsulting.com\nSubject:  Re: [dnx] Dnx error with space in path (RC1) (#3234)\ndnx list isn't a thing.\n\u008b\nReply to this email directly or view it on GitHub\nhttps://github.com/aspnet/dnx/issues/3234#issuecomment-162105666 .\n. Sorry but I missed the resolution?\nRegards,\nPaul\n\nOn Dec 5, 2015, at 9:40 AM, David Fowler notifications@github.com wrote:\nClosing this.\n\u2014\nReply to this email directly or view it on GitHub.\n. David, \n\nI think it would make sense first to check with the bug reporter whether or not the supposed fix actually fixed the bug before closing the issue. It did NOT fix the issue.\n\n. And if you want more details: This is VMWare fusion VM on a macbook pro. The O/S is Windows 7 in the VM.\n. ",
    "GZidar": "The issue is fixed with the latest dnvm.cmd file but the package cannot update itself to correct the issue. I manually edited the dnvm.cmd file using notepad to add the quotes around the path update:\nchange\ndo set DNVM_CMD_PATH_FILE=%%i.cmd\nto \ndo set DNVM_CMD_PATH_FILE=\"%%i.cmd\"\nthen run the dnvm update-self command as has previously been suggested to get anything else that might have been changed and now this error has gone away.\n. ",
    "nojaf": "Ok, not sure how to proceed to be honest. How would I know which runtime I'm executing?\nIs it the thing in my dnvm or not?\nIf so why is there no 1.0.0 rc 1  packages of Microsoft.Framework.Runtime on https://www.nuget.org/packages/Microsoft.Framework.Runtime/\n. Hi @Alxandr, thanks for the info.\nI'll look at my dnx version when I can, if I have follow-up questions I'll reach out on IM.\nMy goal is indeed to use F# in DNX.\n. ",
    "xperiandri": "Cloned https://github.com/fsprojects/fsharp-dnx\nUpdated to \"FSharp.Compiler.Service\": \"2.0.0.2\"\nHave the same error\nDon't understand how to fix\n. It actually works with RC2. I had to reload solution after dnvm upgrade -u\n. ",
    "Pilchie": "Plus @rchande and @ericstj\n@tenor how are you building the nuget package/nuspec file. \nWe changed the registration of ASP.Net Core 5.0, because the old registration was breaking installation of packages into PCLs, but I wouldn't have expected any changes to package generation. \n@yishaigalatzer: does nuget pack of a .csproj generate a portable folder based on what the profile is registered as targeting?\n. ",
    "tenor": "@Pilchie I dug around some more and found what's causing the problem:\nJSON.Net targets profile259. My project targets Profile75.\nThe \\v4.5\\Profile\\ folder listings for those targets are:\n```\n[C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETPortable\\v4.5\\Profile\\Profile75\\SupportedFrameworks]\n.NET Framework 4.5.xml\nASP.NET Core 5.0.frameworkxml\n\n[C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETPortable\\v4.5\\Profile\\Profile259\\SupportedFrameworks]\n.NET Framework 4.5.xml\nASP.NET Core 5.0.frameworkxml\nWindows 8.xml\nWindows Phone 8.1.xml\nWindows Phone Silverlight 8.xml\n\n```\nIf I rename ASP.NET Core 5.0.frameworkxml to just have a .xml extension and run nuget pack Newtonsoft.Json.Portable.csproj, Nuget builds a nuget package with a lib\\portable-net45+dnxcore50+win+wpa81+wp80 folder for JSON.Net (Profile 259).\nI'm guessing VS 2015 Update 1 renamed ASP.NET Core 5.0.xml during the upgrade from  Update 1 RC1.\nNow, I have new questions:\n1. Is there another installer I need, to properly install the ASP.NET Core 5.0 target?\n2. Shouldn't the folder name be portable-net45+netcore50+win+wpa81+wp80 or portable-net45+dotnet5.4+win+wpa81+wp80 or netstandard1.x?\n. @davidfowl I'm confused, how about Announcement/98?\nAren't we supposed to target dotnet5.4 in project.json for DNX class libraries?\n. @ericstj I don't think I'm describing the bigger picture properly.\nThe project I'm working on is RestBus and it consists of a bunch of class libraries, as illustrated below:\n------------------                           ------------------\n| RestBus.Others |                           | RestBus.AspNet | -- project.json frameworks: \n------------------                           ------------------    net451, dotnet5.4\n           \\                                      /\n             \\                                   /\n               \\                                /\n                 \\      ------------------     /\n                   \\--> | RestBus.Common | <--/\n                        ------------------\n                   (portable assembly targeting \n                   .Net 4.5 and ASP.NET Core 5.0)\nRestBus.Others are other regular (non-portable) .NET 4.5 class libraries in the project that depend on RestBus.Common.\nRestBus.AspNet is a DNX class library that depends on RestBus.Common.\nRestBus.Common is a .NET 4.5 portable class library that targets ASP.NET Core 5.0\nThe frameworks in RestBus.AspNet's project.json file are net451 and dotnet5.4 which I'm interpreting to mean:\nI want this DNX class library to be consumable by DNX 451 projects\nand\nI also want this DNX class library to be consumable by DNX Core 5.0 projects.\nThis setup worked fine until I upgraded to VS 2015 Update 1 (from Update 1 RC), after which new nuget builds of RestBus.Common were rejected by the dotnet5.4 target of RestBus.AspNet because the +dnxcore50 folder was missing.\nI can construct a .nuspec file that includes a +dnxcore50 folder but that feels like I'm forcing DNX to consume the library.\nIs it by design that +dnxcore50 is no longer included in Nuget packages of PCLs that target ASP.NET Core 5.0 or is something not properly set up on my computer?\nIf it's by design, shouldn't DNX applications and class libraries no longer look for the +dnxcore50 folder and walk the dependency graph instead?\n. @davidfowl That worked! :smile: I added a project.json file that targets dotnet5.2 in RestBus.Common and RestBus.AspNet didn't complain anymore.\nThanks to everyone that looked into the issue.\nShould I close this issue? Is the +dnxcore50 folder issue something that needs to be reported? or is it a good thing, since it will lead anyone in the same boat to this thread so they can fix their project the recommended way.\n. ",
    "PaybackMan": "This platform is way out of control. Way too much confusion here\n. ",
    "jumpinjackie": "Moved to: https://github.com/dotnet/coreclr/issues/2263\n. ",
    "babelshift": "@pranavkm, as of today, there's nothing interesting at the github link you've provided. Has the source moved?. @davidfowl There's nothing there. Everything was removed in a commit last December.. Looks like it's actually here now?\nhttps://github.com/aspnet/Common/tree/dev/shared/Microsoft.Extensions.CommandLineUtils.Sources/CommandLine. ",
    "GeroL": "Orleans generates and compiles code at runtime. For detecting references to this code it uses AppDomain.Current.GetAssemblies() and filters out every Assembly without Location because Roslyn loads the Metadata from physical or in-memory files only.\nUnfortunatlely I need these dnx assemblies without location as references. \nSo I get the metadata using the ILibraryExporter. Call EmitReferenceAssembly() and write the assembly into a MemoryStream and load the MetadataReference for Roslyn. I pass them as explicit to use references to orleans.\nThat works on the host side with DNX ConsoleApp where I have CompilerServices.Default.LibraryExporter \nbut in the WebApplication this CompilationServices are not set. So I try to setup one with the code listed above but it just does not work.\nMVC builder also just uses CompilationServices.Default.LibraryExporter (which is not set):\nhttps://github.com/aspnet/Mvc/blob/master/src/Microsoft.AspNet.Mvc.Razor/DependencyInjection/MvcRazorMvcCoreBuilderExtensions.cs#L123 \nWhat I need is one of the following 3 possibilities:\n- The physical file path of the dnx assembly (Location)\n- The metada from that assembly\n- Functional LibraryExporter like in the console app. (The DefaultHost class creates one)\nThere is a sample in the orleans repo showing a asp.net client.\n. I use nightly builds for the web part. The console app uses RC1\nAfter reading the links you provided it seems to me that there is a huge construction site. Did not expect that from a RC2. \nI can't just switch back to RC1 because there are other issues then. I will have to create some sort of proxy.\nThanks for your help and the infos!\n. ",
    "XVincentX": "@davidfowl Is this solution actually working with rc1-update1?\n. @davidfowl \nLet me reformulate the question: does rc1-update1 belong to postRc1 bits? In other words, can I inject ILibraryExporter into my Console application?\n. @davidfowl  \nI can't, it's null\nMicrosoft.Dnx.Compilation.CompilationServices.Default.LibraryExporter is null.\nAm I missing something?\n. @davidfowl Sorry to ping you again, but I still do not understand how to move.\n. I can't find the assembly -> https://www.nuget.org/packages?q=Microsoft.Extensions.CompilationAbstractions\n. @davidfowl \nWhere do I find them then?\n. I still do not get what should I do here :-1: \n. Amazing.\n. Unfortunately not, and I have no idea how to proceed unless waiting for a newer release.\n. @davidfowl \nThanks! Current state of the things is here: https://github.com/XVincentX/dredd-hooks-dotnet\n. @davidfowl I guess you're referring to me (XVincentX)...so\n``` bash\n$ dnvm list\nActive Version              Runtime Architecture OperatingSystem Alias\n------ -------              ------- ------------ --------------- -----\n       1.0.0-rc2-16357      coreclr x64          darwin        \n  *    1.0.0-rc2-16357      mono                 linux/osx       default\n``\n. Because if I understand that correctly, that code is not going to work anymore in following versions, right?\n. @davidfowl Didn't you stated it here?  https://github.com/aspnet/dnx/issues/3248#issuecomment-164276955\n. Thanks! Using rc1 andMicrosoft.Dnx.Compilation.CompilationServices.Default.LibraryExporter` made it work. Looks like I can finally going forward wit this.\n. ",
    "twsouthwick": "This is blocking us from using ASP.NET 5 - is this not a supported scenario?\n. ",
    "tim-cools": "Ok, thanks for the feedback\n. Will dnx451 work?\nEdit: nevermind, dnx tells me current framework is dnx451. So I suspect it will\n. ",
    "endink": "fixed with this:\nhttps://github.com/aspnet/Security/issues/615\n. @muratg DNX VERSION: 1.0.0-rc2-16551\nwhen i remove dependency :\"\"Microsoft.Extensions.CompilationAbstractions\": \"1.0.0-*\" and some codes need it, restore package will be ok! but unit test project has the same problem and i cant remove the dependency, unit test project.json is:\n```\n{\n  \"version\": \"1.0.0-*\",\n  \"description\": \"\",\n  \"authors\": [ \"\" ],\n  \"tags\": [ \"\" ],\n  \"projectUrl\": \"\",\n  \"licenseUrl\": \"\",\n\"dependencies\": {\n    \"Schubert.Framework\": \"\",\n  },\n\"commands\": {\n    \"test\": \"xunit.runner.aspnet\"\n  },\n\"frameworks\": {\n    \"dnx451\": {\n      \"dependencies\": {\n        \"xunit.runner.aspnet\": \"2.0.0-aspnet-rc2-*\",\n        \"moq\": \"4.2.1507.118\"\n      },\n      \"frameworkAssemblies\": {\n        \"System.Runtime\": { \"version\": \"4.0.0\", \"type\": \"build\"}\n      }\n    }\n  }\n}\n```\nSystem.ArgumentException: More than one runtime.json file has declared imports for 'win7-x86',\nremove \"xunit.runner.aspnet\": \"2.0.0-aspnet-rc2-*\" will be ok, why? Maybe because the refrence version is diffrent?\n. @muratg ok, thanks, is there a document for migrate from dnx to dotnet cli? and how to upgrade rc2 design time hosting (Visual studio 2015 razor view Editor), thanks again !\n. @muratg if i wat to use some libraries in full framework , like \"System.Drawing\", Azure SDK, etc, instead of \"dnx451\", i can only use \"net451\" in project.json in RC2 ? BTW, when I upgrade to asp.net core,  DTH was lost in VS2015, mybe because the namespace \"Micrsoft.Asp.XXXX\" still be used in  DTH, but new namespace is \"Microsoft.AspNetCore.XXX\", is there any update fix this issue?\n. @muratg thanks, we will play with the bleeding edge, haha!\n. ",
    "AlexChesser": "Hey @muratg the issue has been posted on the MSDN forums where there are a few more details. \nSpecifically, it seems that there are specific powershell scripts required to \"prepare\" an Azure WebApp to be able to compile DNX\nThere are two blog posts that detail the configurations required. \nhttps://blogs.msdn.microsoft.com/jamiedalton/2015/10/26/aspnet-5-and-vso-hosted-build-agents-walkthrough/\nhttps://msdn.microsoft.com/Library/vs/alm/Build/azure/deploy-aspnet5?f=255&MSPPError=-2147217396\nI have detailed my experiences with this issue (a little) here:\nhttps://social.msdn.microsoft.com/Forums/en-US/75711594-0c39-4597-a90c-737487806383/build-dies-on-deploy-err-cannot-find-path?forum=windowsazurewebsitespreview\nUnfortunately, it seems that even through those two posts there are still errors. Likely related to paths or something that can't really be debugged without deeper knowledge of azure or a budget to pay for a large number of tests (each test uses \"build minutes\" in VSO, so there is a cost associated with fixing this) \nSo, the steps to replicate would be:\n- create new webproject\n- create azure web-app\n- link web-app to continuous integration / revision control (any revision control service supported by azure)\n- push to revision control\nThe error occurs in the Azure build.\nSpecifically, targets have to be installed (sorted via the scripts I've linked) and paths have to be correct to enable the deploy to work properly.\n. ",
    "dotnetjalps": "Any update on this issue? I think its because of latest dnx runtime package is not available on visual studio team service! correct me if I am wrong!.\n. ",
    "shirhatti": "Isn't that just a dupe of https://github.com/aspnet/dnx/issues/3062 ?\n. ",
    "yuezhongxin": "@muratg No, it seems the problem is the version of the package.\n. ",
    "thmulvany": "I am running rc1-update1 on ubuntu (AWS) connecting to AWS RDS PG using npgsql pkg.\nAlso, friism et al, I don't see why anyone should have to rely on anything \"runtime.linux.*\". The whole purpose of .NET Core cross platform is to not rely on anything Mono or \"linux\" specific. These are simple IL assemblies that get JITtered on the target OS by that compiler. \nAlso, why is anything still beta-23516? Shouldn't everything be 1.0.0-rc1? If you look here \nhttps://github.com/dotnet/corefx/tree/v1.0.0-rc1/src/System.Net.NetworkInformation\nYou see for instance that System.Net.NetworkInformation is in fact on tag 1.0.0-rc1. Why then does DNX/DNU create project.json.lock files with 23516 everywhere?\nThis is very frustrating guys. This is a RC1 Update 1 and in fact has a \"go-live\" license with full support from MS. I would throw dedicated engs at these critical issues (ones that literally are show-stoppers where you can't run a one-line console app on Linux, which in turn translates to not being able to do a simple read from a Postgres DB on Linux due to these core lib deps). You will start to alienate the very people you're trying to attract through this whole effort. RC2 pails in comparison to getting RC1 working for what should be \"happy path\". Do you have unit tests for these? How can something like this slip through?\nBTW frissm, after adding your runtime.linux thingy, I get\nfail: Microsoft.Data.Entity.Query.Internal.NpgsqlQueryCompilationContextFactory[1]\n      An exception occurred in the database while iterating the results of a query.\n      System.AggregateException: One or more errors occurred. ---> System.AggregateException: One or more errors occurred. ---> System.AggregateException: One or more errors occurred. ---> System.IO.FileNotFoundException: Could not load file or assembly 'System.Net.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\nSo this was what was supposed to be fixed in DNX/DNU via update 1 for cross plat publishing things like System.Net.Security.\n. @anurse , @muratg so are you saying that nothing (no dependency tree) should ever use Sysetm.Net.NetworkInformation or System.Net.Security? Because that is the problem here. @friism was able to repro with a one-line app on Linux but the problem is that other nuget pkgs (e.g. NpgSql for EF7 provider for PostgreSQL) clearly add this dependency to their project.json files. Are you saying they (and everyone) should just add dep for Microsoft.NETCore.Platforms instead and stop using the others? This seems odd since those others are in fact nuget packages and part of base class libraries for .NET Core right?\n. ",
    "snissim": "I was able to get it working by explicitly adding this dependency to dnxcore50:\n\"runtime.unix.System.Net.Security\": \"4.0.0-beta-23516\"\nNote that it's the unix runtime. I know nothing about how these JIT runtime-specific dependencies are resolved, but I assume that runtime.linux.System.Net.Information is looking for the equivalent runtime.linux.System.Net.Security, which doesn't exist.\n. ",
    "DanWahlin": "I'm seeing the same issue as @friism (running 1.0.0-rc2-16357). Everything runs fine on my Mac but breaks going to Linux. I added the Microsoft.NETCore.Platform,  System.Net.NetworkInformation and System.Net.Security references mentioned above in project.json and still get an error about loading NetworkInformation on Linux:\nSystem.IO.FileNotFoundException: Could not load file or assembly 'System.Net.NetworkInformation, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies.\nAdded \"runtime.linux.System.Net.NetworkInformation\": \"4.1.0-beta-*\"and then I get this error:\nFile name: 'System.Net.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' ---> System.IO.FileNotFoundException: Could not load the specified file.\nFile name: 'System.Net.Security'\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName(AssemblyName assemblyName)\n   at System.Runtime.Loader.AssemblyLoadContext.Resolve(IntPtr gchManagedAssemblyLoadContext, AssemblyName assemblyName)\n   at Npgsql.NpgsqlConnector.RawOpen(NpgsqlTimeout timeout)\n   at Npgsql.NpgsqlConnector.Open(NpgsqlTimeout timeout)\n   at Npgsql.NpgsqlConnector.Open()\n   ....\nTried adding all of these into project.json but still get the System.Net.Security error above.\n\"runtime.linux.System.Net.NetworkInformation\": \"4.1.0-beta-*\",\n\"Microsoft.NETCore.Platforms\": \"1.0.1-beta-*\",\n\"System.Net.Security\": \"4.0.0-beta-*\",\n\"System.Net.NetworkInformation\": \"4.1.0-beta-*\"\nAny ideas on how to get this going (hoping I need to do something simple or that I'm just missing something simple)? Appreciate it...been hitting wall after wall on this one. App can be found here:\nhttps://github.com/DanWahlin/AspNetCorePostgreSQLDockerApp\n. Right after posting I realized I missed @snissim's comment about adding runtime.unix.System.Net.Security. Had to add that plus runtime.linux.System.Net.NetworkInformation. That fixes it for me. None of the other stuff added above (such as Microsoft.NETCore.Platforms) worked though.\nHoping this gets a lot easier in the near future - burned a bunch of time trying to it going on Linux. But, happy I now have that option. :-)\n. ",
    "opletayev": "Thanks for the note. For now, we patched our build scripts to manually delete some of the extra files, but I hope that future versions will resolve this issue.\n. ",
    "fsoikin": "Update: still happening on rc2-16319.\n. Do you mean to do that before I publish?\n. I don't quite understand how to identify \"linux dnx\" vs \"windows dnx\", as they have same moniker. Can you give me an example of full command?\n. I have the linux one installed on CentOS, so that should be ok, I'll try it out.\nBut now, this raises next question: since I have to know target platform in advance, this is not \"cross-platform\" anymore, is it?\nIs there a way to package my app so it would run anywhere?\n. Ok, tried that out.\n```\nC:\\i\\c> dnu publish --no-source --out C:\\work\\CentOS\\c --runtime dnx-coreclr-linux-x64\nMicrosoft .NET Development Utility CoreClr-x64-1.0.0-rc1-16231\nThe project being published does not support the runtime 'dnx-coreclr-linux-x64'\n``\n. Ok, after reading docs fordnu publish`, I decided to try with full path to the runtime, and publish went through fine.\ndnu publish --no-source --out C:\\work\\CentOS\\c --runtime C:\\Users\\Fyodor\\.dnx\\runtimes\\dnx-coreclr-linux-x64.1.0.0-rc1-update1\nBut then I switched to CentOS and tried to run it, and guess what? Same result!\n```\n[Fyodor@CentOS CentOS] $ c/approot/c\n\n^C\nBut if I run \"dnu restore\" on Linux now, it starts working\n[Fyodor@CentOS CentOS] $ cd c/approot\n[Fyodor@CentOS CentOS] $ dnu restore\n\n[Fyodor@CentOS CentOS] $ ./c\nSslStream\n[Fyodor@CentOS CentOS] $ \n```\n. > You should make a local nuget feed with the \"private\" packages and you should change your nuget.config to add it as a feed.\nI assume you mean a repo-local nuget.config pointing to a repo-local folder with packages? Got it, works. Somehow didn't occur to me before.\n\nYou're not supposed to run restore on the published output\n\nThis raises two questions:\n1. If it's not supposed to be run like that, then why does it run like that? It even creates new project.json files in subfolders a\\1.2.3\\root, b\\1.0.0\\app, and b\\1.0.0\\root - this doesn't look like accidental functionality at all.\n2. Unfortunately, due to #3272, I do have to dnu restore. At least for now. Just for the time being I have resorted to \"publishing\" by copying the whole source, but this is not acceptable long-term.\n. Sooo.. I still don't see why dnu restore would write a project.json inside packages/a/1.2.3/root and others. When I do dnu restore on a non-published (i.e. source) project, it doesn't go into the packages folder.\n. ",
    "lmartinking": "Sorry, my terminology is taken from Python's argparse which I am more used to :-)\nWould you mind mentioning the existance of run, publish, etc via --help ?\n. Ahhh that makes more sense now.\nI was poking at OmniSharp in Atom on Mac today, so that led me down the path to here.\nI'm very excited about dotnet on Mac & Linux -- keep up the good work!\n. ",
    "richardwindle": "Found a missing permission.\n. ",
    "TotzkePaul": "Thank you @davidfowl. I've been trying to get an MVC website to run on a Linux VM and your comment on RC2 breaking changes helped me figure out the problem.\n. ",
    "proftom": "I had this issue after following the tutorial: https://docs.asp.net/en/latest/tutorials/your-first-mac-aspnet.html#developing-asp-net-applications-on-a-mac-with-visual-studio-code\nNote that I installed everything using the installer (rather than the CLI or homebrew) - https://docs.asp.net/en/latest/getting-started/installing-on-mac.html#install-asp-net-5-with-visual-studio-code\nAfter getting the error after trying to run dnx web, I then tried running\n\ndnvm update-self\n\nand got:\n~/.dnx/dnvm/dnvm.sh doesn't exist. This command assumes you have installed dnvm in the usual location and are trying to update it. If you want to use update-self then dnvm.sh should be sourced from ~/.dnx/dnvm. dnvm is currently sourced from /usr/local/lib/dnx/bin/dnvm.sh\nAt this point I decided that maybe the installers put dnvm not in the usual place and I'd try running the command line installations to see if they'd fix that (3 lines in total):\nhttps://docs.asp.net/en/latest/getting-started/installing-on-mac.html#install-asp-net-5-from-the-command-line\nI then was able to run \n\ndnvm update-self\n\nAnd it appears to be working. Not quite sure what I did, but figured I'd post it here as this post gave me the motivation to fix dnvm update-self.\nAlso that tutorial talks about some blank project with \"Hello World\" in the startup.cs. Where was this. The blank project I created as per the yeoman tutorial has a totally different looking startup.cs? Where was this project? Further, vscode didn't have syntax highlighting/colourising for c# files (.cs) and the DNX commands didn't appear. To install these I had to run Extension: Install Extension from within the vscode command line (command shift p) then search for CS (took a while to install) and dnx. \nHope this information helps someone in the future.\n. ",
    "DasJott": "Exactly, @muratg .\nI experiment with the HelloMVC project in Ubuntu 14.04 using VSCode.\nThere is a css file I created but the browser can't find. The developer console says 404 while trying to get the file. If I browse the path to the file directly I also get nothing.\nIt doesn't matter where I put the file within the projects folder, the DNX seems to not provide any folder structure.\nIn the project.json I have an entry \"webroot\" which points to \"wwwroot\" in the root of the project. I can put files directly into this wwwroot folder and still can't access them by browsing to http://localhost/example.css\nI am wondering this for days now (but paused while christmas ;) ) and I don't know anymore.\nWhere do I have to put static files to be accessible by a browser?\n. @muratg @davidfowl That was it, thanks a lot! And I am sorry, but I didn't know that and obviously didn't find the correct information in the last days of intense googling...\nSo you need a package to be able to access static files? How odd is that... ;)\nGuess, this can be closed then...\n. @muratg thank you very much! \nI guess I will study that documentation a bit deeper. \n. ",
    "thiagomajesk": "@davidfowl Howcome? Where can I see the copied files then? This doesn't make sense to me\n. @davidfowl Ok, maybe I should make myself more clear...\nNancyFx expects that the view files (*.html) to be copied to the output directory to make them avaible when returning views; you can see the explanation here: https://github.com/NancyFx/Nancy/issues/1528. So I'm defining which files I want as content in my project.json and they are not being copied to the output folder. \n. @muratg I think we could remove this issue because the problem is not relevant anymore. \nThe guys from nancyfx team cracked the case for me... \nEven though the framework behaves differently with dnx, it seems that is not a dnx issue, I had to use just a different approach.\n. ",
    "jakakonda": "SignalR is rc1-final (my mistake, copy and paste is sometime hell, I update the original post). Taken from aspnetmaster myget repo.\nGithub repository with the demo solution source code\n. I am aware that the official release is planed for Q3 this year. \nAs it works when ran without IIS I assumed this is an issue related to the bridge between IIS and dnx not to SignalR or websockets in general.\nIf there won't be any fixes in near future, is there any quick and dirty way to run on Azure as an App Service (a regular Web Site)?\n. Just tested it and works. My mistake after all.\nThanks you for your help and time, have a very nice day! \n. ",
    "DongdongFu": "sir\uff0ccould you please help me to fixed a problem which dnx restore in ubuntu development,now the problem not solute three days .......http request timed out....\n. ",
    "noeljiangcc": "I have solved this issue by setting \"GenerateProjectSpecificOutputFolder\" to \"true\", according to:\nhttps://blog.stangroome.com/2012/05/10/override-the-tfs-team-build-outdir-property-net-4-5/\nThe property makes to generate the artifacts in a separated sub-folder of $(BinariesRoot)\\$(Configuration).\n. ",
    "mikes-gh": "Would it be possible for dnu restore to delete packages in .dnx/packages that disappear from myget or is it just a case of deleting the contents of .dnx/packages before dnu restore while things are in flux.\nrelated to\nhttps://github.com/aspnet/dnx/issues/3238\n. Ah yes I downloaded the Identity repo to check out a google sign in issue I was having.\nThat had the aspnetcidev  and I must have restored off that.\nThanks for working that out.\n. ",
    "SamuelZXP": "I get similar problem with abpiskunov  when I use Visual Studio 2015 to open a downloaded project.\nHow can fix it?\n. I get similar problem when I use Visual Studio 2015 to open a downloaded project. How can I fix it?\n. ",
    "j2ghz": "There was a mistake on my part, sorry\n. ",
    "clrjunkie": "@muratg \nIs the VS integration open source? \nWhere would be the appropriate repo to file other issues about .NET Core and VS Integration?\n. @Tratcher Thanks.\n. ",
    "wim11be": "All of those are not built for DNX Core 5.0 so this really didn't help. Is USB support something that is going to be added or is this not possible?\n. ",
    "davenewza": "Sorry for that.  Issue filed here.\n. ",
    "ryanbrandenburg": "This is a part of https://github.com/aspnet/Localization/issues/199 @Eilon updated me in person and said we'd need to fix DNX too because they want to remove the old package.\n. ",
    "spankr": "@muratg Could clarify what you mean about those tools being retired in RC2?\nEdit: I just found this: #3296. I assume they're being rolled into NuGet?\n. Thank for the quick response!\n. ",
    "neilhuiz": "It works fine as long as you use the \"ClearTextPassword\" option. Am I just getting lucky?\nIf this really isn't supported, can someone suggest a workaround?\n. ",
    "ankitbko": "I am also currently using ClearTextPassword option as workaround. It would be great if authentication is supported by dnu restore\n. @SrivatsaMarichi You will need to run a powershell script to install dnx and run dnu restore before you can build the solution. \n. @pherbel You will need to use ClearTextPassword option in Nuget.config for dnu restore to work properly.\n. ",
    "srivatsamarichi": "How can i get rid of the DNX runtime error in VSTS? Can anyone help me out here?\n\n. ",
    "pherbel": "Is there any workaround to use VSTS Package feeds with dnu or with dnx projects?\n. ",
    "narmontas": "Duplicate #2804 \n. ",
    "joshmouch": "Hmm... no luck with that.  I tried both \"1\" and \"true\".\n\n\n\n. If it helps, here's the relevant line from the FREB log:\n1. MODULE_SET_RESPONSE_ERROR_STATUS\n   Warning\n   ModuleName=\"httpPlatformHandler\", Notification=\"EXECUTE_REQUEST_HANDLER\", HttpStatus=\"500\", HttpReason=\"Internal Server Error\", HttpSubStatus=\"0\", ErrorCode=\"The operation completed successfully.\n   (0x0)\", ConfigExceptionInfo=\"\" 17:06:43.925 \n. I tried a million other things with no success.  Finally, I created a new deployment slot and deployed there instead.\nThat worked perfectly.\nThen I swapped the two deployment slots.  Now my main slot works and the new slot doesn't (which makes sense because they were swapped).\nSo... seems like something got corrupted on that one slot.  This seems like a bug to me.  I'm going to delete the broken slot and recreate it.  But if you want to give me some guidance, I can get you some specifics next time this occurs.\nAlso, I should note that I think this same thing happened to me a couple months ago... I ended up blowing away the Azure WebSite and recreating it to finally fix it.  It seems like it has something to do with Visual Studio Online (TFS) getting stuck in the middle of an MSDEPLOY.\n. @davidfowl I'm using the latest DNX (v 1.0.0-rc1-final)\nHere's a screenshot:\n\n. Yeah, it was set.  I have it in the screenshot, above.  Save was pressed.  I even redeployed and restarted a couple times, so the setting definitely kicked in.\n. @jhentsch \nThat's the first time on the entire interweb I've seen those two settings.. @davidfowl It sure does seem like it's related to dynamic compilation.\nI can \n1) Save a file (should force dynamic compilation). 2) Run some code by clicking a button on my page 3) Problem exists.\nThen:\n1) Hit Ctrl-f5 2) Run the exact same code by clicking the exact same button in the previous browser window (i.e. same state) 3) Problem is gone.\n. I'm going to recreate this issue now that I've been able to create a test case.  It's not related to recompiling at all.  It's a general static class issue.  I'll call it: Static constructors not called when accessing nested static type.\n. ",
    "joakimfischer": "I got the same problem. Recreating the deployment slot worked for me as well.\n. ",
    "jhentsch-ford": "I was able to get a more detailed error message by adding the following to my WebHostBuilder:\nvar host = new WebHostBuilder()\n    .CaptureStartupErrors(true)\n    .UseSetting(\"detailedErrors\", \"true\")\nI found this information on this stackoverflow answer.\nDocumentation link: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/hosting\n. ",
    "BenjaminAbt": "Hi David,\nI'm in a Preview Class Library Package Template (DNX). \nIt will be consumed by an ASP.NET Core 1 application but should also be consumable from other applications.\nSo IApplicationEnvironment.ApplicationBasePath wont work if this is only available in hosting environments.\n. Thanks!\nPlatformServices.Default.Application.ApplicationBasePath works great.\n. ",
    "StrangeWill": "1.0.0 would be the lower bound, is it not? This is a supporting library in a solution (specifically the tests for a web application), 4th build number is auto-incremented on every build for nuget package compatibility for Octopus deployment.\n. OK, I was worried that the 4th number was only sort-of kept around... I'll explain my use case but I can probably change what we do and only use the 4th number for Octopus.\nOctoplus deploy uses nuget packages to deploy software, these are generated from our continuous integration server, if I build the same project with the same nuget package agents will have trouble determining that they need to pull a new package (in general modifying a nuget package in-place is a big no-no).\nSo typically we increment minor for scheduled releases, revision for hot fixes and use the 4th number as our build number from TeamCity so all builds have unique versions.\nHowever, I can make Octopack use a different version than what the library reports, so I'll go ahead and see about telling Octopack to build the 4 number version (being as that is ONLY for Octopack) and the issue should go away and I can easily be more strict about versions with no wiggle room.\nThanks! Feel free to close this if you think this is a non-issue.\n. ",
    "rorymurphyza": "Hi. Thanks for the quick response. I tried updating the dependencies from \"EntityFramework.Commands\": \"7.0.0-rc1-final\", to \"EntityFramework.Commands\": \"7.0.0-rc2-16357\",, etc., This then generates the error:\ndnu : Unable to locate Dependency EntityFramework.Commands >= 7.0.0-rc2-16357\nAt line:1 char:1\n- dnu restore\n- ~~~~~~~~~~~\n  - CategoryInfo          : NotSpecified: (Unable to locat...7.0.0-rc2-16357:String) [], RemoteException\n  - FullyQualifiedErrorId : NativeCommandError\nwhen running dnu restore from Visual Studio. I then tried to NuGet Package Manager to get these updated versions, but it will not show me anything other the the current \"v1.0.0-rc1-final\" that I already have and there is no newer version shown here. I am assuming that the problem I am seeing is because Visual Studio thinks I need \"1.0.0-rc1-final\" and I have \"1.0.0-rc2-16357\" installed on my machine?\nAdditionally, trying to download the 1.0.0-rc1-final from the stream gives me this:\n\nAm I doing this incorrectly?\n. Great. I'm going to try the \"*\" that you suggested and see if that helps. Unfortunately it takes a while to build the project, but I'll let you know what happens. Thanks for the advise.\n. Hi again. I am sorry to have to come back to this, but I am really struggling here still. I think that something is just not fitting in place in my head. I tried changing my dependencies as you suggested in my project.json:\n\"dependencies\": {\n    \"EntityFramework.Commands\": \"7.0.0-rc2-*\",\n    \"EntityFramework.MicrosoftSqlServer\": \"7.0.0-rc2-*\",\n    \"Microsoft.AspNet.Authentication.Cookies\": \"1.0.0-rc2-*\",\n    \"Microsoft.AspNet.Diagnostics.Entity\": \"7.0.0-rc2-*\",\n    \"Microsoft.AspNet.Identity.EntityFramework\": \"3.0.0-rc2-*\",\n    \"Microsoft.AspNet.IISPlatformHandler\": \"1.0.0-rc2-*\",\n    \"Microsoft.AspNet.Mvc\": \"6.0.0-rc2-*\",\n    \"Microsoft.AspNet.Mvc.TagHelpers\": \"6.0.0-rc2-*\",\n    \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-rc2-*\",\n    \"Microsoft.AspNet.StaticFiles\": \"1.0.0-rc2-*\",\n    \"Microsoft.AspNet.Tooling.Razor\": \"1.0.0-rc2-*\",\n    \"Microsoft.Extensions.CodeGenerators.Mvc\": \"1.0.0-rc2-*\",\n    \"Microsoft.Extensions.Configuration.FileProviderExtensions\" : \"1.0.0-rc2-*\",\n    \"Microsoft.Extensions.Configuration.Json\": \"1.0.0-rc2-*\",\n    \"Microsoft.Extensions.Configuration.UserSecrets\": \"1.0.0-rc2-*\",\n    \"Microsoft.Extensions.Logging\": \"1.0.0-rc2-*\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0-rc2-*\",\n    \"Microsoft.Extensions.Logging.Debug\": \"1.0.0-rc2-*\",\n    \"Microsoft.VisualStudio.Web.BrowserLink.Loader\": \"14.0.0-rc2-*\"\n  },\nbut I suspect that this is not what you meant by your previous comment. \nWhen I do a dnu restore, I get the expected \"Unable to locate Dependency\" errors that show that I am slightly out of my depth here.\nI also have no idea how to use myget to download other packages, I thought that is what I was previously doing? \n. ",
    "samualjacksonau": "I could install exact same version using following commands.\nset DNX_UNSTABLE_FEED=https://www.myget.org/F/aspnetvnext\ndnvm install 1.0.0-rc2-16319 -r coreclr -arch arm -u\ndnvm install 1.0.0-rc2-16319 -r coreclr -arch x86 -u\ndnvm install 1.0.0-rc2-16319 -r coreclr -arch x64 -u\ndnvm install 1.0.0-rc2-16319 -r clr -arch x86 -u\ndnvm install 1.0.0-rc2-16319 -r clr -arch x64 -u\nI will update if rest of the process worked...\n. ",
    "Kinani": "Anything on this? because right now, I'm not able to install any ARM build to my machine.\n. @BrennanConroy Okay, Thank you for your quick response.\n. ",
    "javafun": "In addition, I have already tried the followings solutions, none of them could fix the issue\n1. Repair the ASP.NET 5 RC1 \n2. Run the dnvm update-self\nMy current OS is Windows 8.1, on another computer with Windows 10, there is no such problem.\n. ",
    "pauldotknopf": "Are you sure this won't happen in the new dotnet cli?\n. ",
    "shederman": "My bad, not even -Version works. I have to manually edit the project.json and hand -enter the build number. I guess I could use gulp for this, but why should I need to?\n. And nothing is going to take their place?\n. ",
    "kscott5": "@muratg It would be nice if the dnu command could uninstall/cleanup older dependencies such as beta-*.\nThanks again for the info.\n. @BrennanConroy Right! That's my frustration! \nI guess I'll eventually need to wipe my dev box clean. Disk space issue!\nThanks again!\n. This is no longer an issue. Currently using .NET Core 1.0.1\n. ",
    "davidpsaylor": "Thank you!  Below are (in order) the project.json, the global.json, the \"wrap\" project.json of the project where the class I want lives, and the \"wrap\" of that project's only dependency.\n/src/MyApp.Hub.Net/project.json\n\n{\n \"version\": \"1.0.0-*\",\n \"compilationOptions\": {\n   \"emitEntryPoint\": true\n },\n\"dependencies\": {\n   \"Microsoft.AspNet.Identity\": \"3.0.0-rc1-final\",\n   \"Microsoft.AspNet.IISPlatformHandler\": \"1.0.0-rc1-final\",\n   \"Microsoft.AspNet.Mvc\": \"6.0.0-rc1-final\",\n   \"Microsoft.AspNet.Mvc.Core\": \"6.0.0-rc1-final\",\n   \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-rc1-final\",\n   \"Microsoft.AspNet.StaticFiles\": \"1.0.0-rc1-final\",\n   \"NHibernate\": \"4.0.4.4000\",\n },\n\"commands\": {\n   \"web\": \"Microsoft.AspNet.Server.Kestrel --server.urls http://*:5404\"\n },\n\"frameworks\": {\n   \"dnx451\": {\n     \"dependencies\": {\n       \"MyApp.DataAccess\": \"1.0.0-\",\n       \"MyApp.DataAccess.Security\": \"1.0.0-\",\n       \"MyApp.DataModel\": \"1.0.0-\",\n       \"MyApp.DataModel.Licensing\": \"1.0.0-\",\n       \"MyApp.GeoResource\": \"1.0.0-\",\n       \"MyApp.PickLists\": \"1.0.0-\"\n     }\n   }\n },\n\"exclude\": [\n   \"wwwroot\",\n   \"node_modules\"\n ],\n \"publishExclude\": [\n   \".user\",\n   \".vspscc\"\n ]\n}\n\n/global.json\n\n{\n  \"projects\": [ \"src\", \"test\", \"wrap\" ],\n  \"sdk\": {\n    \"version\": \"1.0.0-rc1-update1\"\n  }\n}\n\n\\wrap\\MyApp.DataModel\\project.json\n\n{\n  \"version\": \"1.0.0-\",\n  \"frameworks\": {\n    \"net45\": {\n      \"wrappedProject\": \"../../../MyApp.DataModel/MyApp.DataModel.csproj\",\n      \"bin\": {\n        \"assembly\": \"../../../MyApp.DataModel/obj/{configuration}/MyApp.DataModel.dll\",\n        \"pdb\": \"../../../MyApp.DataModel/obj/{configuration}/MyApp.DataModel.pdb\"\n      },\n      \"dependencies\": {\n        \"MyApp.PickLists\": \"1.0.0-\"\n      }\n    }\n  }\n}\n\n\\wrap\\MyApp.PickLists\\project.json\n\n{\n  \"version\": \"1.0.0-*\",\n  \"frameworks\": {\n    \"net45\": {\n      \"wrappedProject\": \"../../../MyApp.PickLists/MyApp.PickLists.csproj\",\n      \"bin\": {\n        \"assembly\": \"../../../MyApp.PickLists/obj/{configuration}/MyApp.PickLists.dll\",\n        \"pdb\": \"../../../MyApp.PickLists/obj/{configuration}/MyApp.PickLists.pdb\"\n      }\n    }\n  }\n}\n. Re-ordering and removing both did not resolve the issue.  Even after closing and restarting Visual Studio.  So I guess the DataModel is not being imported correctly somehow.\n\nIt is a portable class library with the following targets:\n.NET Framework 4.5\nSilverlight 5\nWindows 8\nXamarin.Android\nXamarin.iOS\nXamarin.iOS (Classic)\nInside the csproj file I have:\n\nTargetFrameworkVersion>v4.0 \n  TargetFrameworkProfile>Profile47 \n. Is there anything I can do to check?\n. \n",
    "notlkk": "I solved the problem with the following steps:\n1. dnvm install latest\n2. Go to where the project folder is and do \"dnu restore\"\nIt's weird and I don't really understand why it happened.\n. ",
    "SamVanhoutte": "I was able to reproduce this one on my PI as well.\n. ",
    "KoalaBear84": "I'm also trying to run things on RPi2, and having the same problem. It looks like the current dnx runtimes are some sort of broken. But also locally it won't work on RC2.\nIt only works if I do dnvm use 1.0.0-rc1-final, and then indeed use RC1. But that will not work on the Pi because RC2 is the first one with ARM support I guess.\nIt looks like we need to wait for the RC2 final / dnx -> dotnet rename. Also Entity Framework RC2 branch is currently broken, unable to use EntityFramework.Commands.\n. Good to hear!\nThat's strange, I get this when running:\nC:\\Users\\User>dnvm install 1.0.0-rc1-final -r coreclr -arch arm -u\nDefault unstable feed (https://www.myget.org/F/aspnetvnext/api/v2) is being overridden by the value of the DNX_UNSTABLE_FEED environment variable (https://www.myget.org/F/aspnetmaster/api/v3)\nUnable to find any runtime packages on the feed!\nAt C:\\Program Files\\Microsoft DNX\\Dnvm\\dnvm.ps1:610 char:9\n+         throw \"Unable to find any runtime packages on the feed!\"\n+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : OperationStopped: (Unable to find ...es on the feed!:String) [], RuntimeException\n    + FullyQualifiedErrorId : Unable to find any runtime packages on the feed!\nIt doesn't find 'any' runtime packages on the feed. It does see that I overriden the default unstable branch, which is good.\n. Ahh. Looks like my (?) dnvm does not work with \"v3\" API level or so.\nThis works:\nset DNX_UNSTABLE_FEED=https://www.myget.org/F/aspnetmaster/api/v2\n. I had some progress. After publishing I copied everything to the Pi and got the following error when running the website cmd /c web.cmd:\nFailed to locate or load coreclr.dll\nAnd indeed, coreclr.dll is not a file on disk:\nC:\\Users\\User\\.dnx\\runtimes\\dnx-coreclr-win-arm.1.0.0-rc1-final\nBut the file coreclr.dll is part of dnx-coreclr-win-arm.1.0.0-rc2-16357\nCould you check if you do have this?\nI'm also curious if we could auto start a website when the Pi starts.. Hopefully there will be more information when RC2 comes out.\n. Ahh. I already tried that, but if I really copy ALL missing files only, it works. It starts. Cannot yet access it, even after netsh advfirewall firewall add rule name=\u201dDNX Web Server port\u201d dir=in action=allow protocol=TCP localport=5000, but that is not the problem anymore.\nIt's really 'hard' to get all this running, and getting to know all the tools and steps needed. I guess it will all get much better when RC2 and the \"dotnet\" tool is released, and the current unstable things get a little more stable.\nThanks!\n. Problem was that I had run it on http://localhost:5000 and it should be http://*:5000. It is running now. :)\n. I didn't have this problem. Unfortunately also have no clue. Please look into the web.cmd file and see what it all 'does' and try to do that step-by-step if you see any warnings or errors. I agree, it should at least give any hint, warning or error.\n. ",
    "munyirik": "Thanks @KoalaBear84. I actually got it working yesterday on my RPi2 after using 1.0.0-rc1-final. If you give it a try it should work. Here's what I did to publish:\n- Run: set DNX_UNSTABLE_FEED=https://www.myget.org/F/aspnetmaster/api/v3 <- This will tell dnvm where to get arm rc1-final.\n- Run: dnvm install 1.0.0-rc1-final -r coreclr -arch arm -u\n- Publish with: dnu publish --out [your publish path] --no-source --runtime dnx-coreclr-win-arm.1.0.0-rc1-final\n- After copying the published files to your device you also need to copy libuv to avoid another error.\n. Also check that your project.json file is using rc1-final version of Kestrel.\n. Ah yes. I forgot to add that step. I copied the missing files (including coreclr.dll) in the bin directory from rc2-16357. Only the missing files. Can you try that?\n. and this is the bin directory I mean -> \\approot\\runtimes\\dnx-coreclr-win-arm.1.0.0-rc1-final\\bin\n. Yup, I was just about to type that. I agree, it's really hard to get this running:-). \n. ",
    "mehmetafsinyuce": "Hello I installed 1.0.0.0-rc1-final arm when I deploy solution to raspberry pi2, I faced with this error \"Failed to locate or load coreclr.dll\" when I look at the \"C:\\Users\\Afsin.dnx\\runtimes\\dnx-coreclr-win-x86.1.0.0-rc1-final\\bin\" this file is missing too. It is also not working with newer versions of coreclr.dll (win-arm.1.0.0-rc2-16319,16357,16551) \"Failed to start CLR Host\"\nPlease help ...\n. ",
    "adwaitasolutions": "This work for me.\nRight click on project and select \"Use specific Runtime\" and then select 1.0.0-rc1-final(make sure you have mentioned same on project.json file too). After this change everything worked\n. ",
    "RasberryFan": "Hello together,\ni also tried to setup a ASP.NET project on my new rasberry pi 3. I am running Windows Iot build 14262.\nI used dnx 1.0.0-rc1-final and added the missing files as described above. But when i navigate to my project folder on the rasberry Pi,  dnx returns without a message.\n\nHas anyone an idea to solve this?\n. During the last days i spent some time to double check my configuration and i get the results shown in the table below. I used dnx 1.0.0-rc1-final and the procedures described above by KoalaBear and M\u0169ny\u0129r\u0129k.\n\n. ",
    "Fisherijus": "Did anyone managed to run asp.net on pi3 with rc2? cause I am not able to install rc1-final as it says:\nThere are no runtimes matching the name dnx-coreclr-win-arm on feed\nhttps://www.myget.org/F/aspnetvnext/api/v2.\n. ",
    "bogdandanielb": "I'm getting the same problem with 1.0.0-rc1-final for ARM   \"Failed to locate or load coreclr.dll\" and \"Failed to start CLR Host\" if I copy coreclr.dll from other DNX ARM builds.  I've tried the latest too with dotnet CLI (RC2 or preview1) but facing this issue: \"host executable not available in dependencies, using host for current platform\"  https://github.com/dotnet/cli/issues/317 .\nIs there any complete DNX ARM build out there that works ?\n@RasberryFan did you find a complete version of dnx arm 1.0.0-rc1-final ?\nThank you\n. I've managed to create a working solution with dnx-coreclr-win-arm.1.0.0-rc1-final by copying all missing files from the newer dnx-coreclr-win-arm.1.0.0-rc2-16357  as per @munyirik suggestions. Note that all missing files are required not just coreclr.dll. Also in the same bin folder I suggest copying libuv.dll from \\approot\\packages\\Microsoft.AspNet.Server.Kestrel\\1.0.0-rc1-final\\runtimes\\win10-arm\\native usually located in your published location. \n I hope it helps\n. ",
    "adamsitnik": "It seems like you added the dependencies for dnx451 which compiles, but the bulild failed for dnxcore50 (no dependencies defined)\n. It depends on which platforms the library that you would like use  supports. \n- If it supports both dnx451 and dnxcore50 then you just need to move the dependencies to common dependencies (same level as frameworks, same thing applies to frameworkAssemblies).\n\"frameworks\": {\n    \"dnx451\": { },\n    \"dnxcore50\": { }\n  },\n  \"dependencies\": {\n    \"someCommonDependency\": \"it's version\"\n  }\n- If there are two different packages/version then you need to specify both dependencies in explicit way:\n\"frameworks\": {\n    \"dnx451\": { \n        \"dependencies\": {\n            \"someCommonDependency\": \"exact version that supports dnx451\"\n      }\n    },\n    \"dnxcore50\": { \n        \"dependencies\": {\n            \"someCommonDependency\": \"exact version that supports dnxcore50\"\n      }\n    }\n  }\nOne of ways of checking which platforms are supported is visiting nuget package website. Sample\nSorry for not giving you exact answer, but I am not familiar with these MVC packages to tell.\n. ",
    "emfluenceindia": "Exactly! I have removed \"dnxcore50\" reference and project builds without any error now. But what should be the work around if I want to keep the reference in the project?\n. Thank you so much for your nice and elaborate reply Adam. I should be able to move on from here. :)\n. Hi divega,\nHere is my code:\n``` c#\npublic void ConfigureServices(IServiceCollection services)\n{\nservices.AddEntityFramework()\n                .AddSqlServer()\n                .AddDbContext(options =>\n                    options.UseSqlServer(Configuration[\"Data:DefaultConnection:ConnectionString\"])\n                );\n        // Add framework services.\n        services.AddApplicationInsightsTelemetry(Configuration);\n\n        services.AddMvc();\n        services.AddCaching();\n\n        //CORS\n        services.AddCors(options => options.AddPolicy(\"AllowAll\",\n            p => p.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader()));\n\n        //Try to get stored proce parameter information here\n        //MyDbContext context = new MyDbContext();\n\n        /*\n            Runtime error at Line # 71:\n            An exception of type 'System.InvalidOperationException' occurred in Microsoft.Extensions.DependencyInjection.Abstractions.dll but was not handled in user code\n            Additional information: No service for type 'Microsoft.Data.Entity.Storage.IRelationalConnection' has been registered.\n        */\n\n        //using (var cmd = _ctx.Database.GetDbConnection().CreateCommand())\n        //{\n        //    cmd.CommandText = StaticObjects.ProcedureHelper.CustomerAddressInsert;\n        //    cmd.CommandType = System.Data.CommandType.StoredProcedure;\n\n        //    foreach (SqlParameter p in cmd.Parameters)\n        //    {\n        //        Console.WriteLine(p.ParameterName);\n        //        Console.WriteLine(p.DbType);\n        //        Console.WriteLine(p.SqlDbType);\n        //    }\n        //}\n\n}\n```\n. ",
    "KKhurin": "Yes, but I don't want every possible asp.net customer on planet to have to override the defaults themselves. I'd like the asp.net host to set the new defaults suitable for server loads.\n. Is it possible to find out the scope of _set_invalid_parameter_handler call and if it affects the thread or the whole process (as opposed to just current execution frame), restore the previous handler? We don't want to always print and swallow errors. \n. ",
    "xs2sachin": "Thanks a lot for your timely response, I just want to leverage the core MVC as must possible. As Library Manager is being used in many interfaces, I was looking to option through which we can add new LibraryDescription values in the LibraryManager's collection. \n. ",
    "VaclavElias": "Thanks for sharing @GuardRex. I have added additional information to the screen shot. I use only one IIS Worker Process. Should I use a separate worker for each website? That will be even more memory used? :)\n. Thanks again @GuardRex for the additional information. \nNot a problem at all. I will test and implement new coming bits accordingly. \nI don't know how to move things around so I shall leave it for the guys here in asp.net to do it or I should do it manually, as a new issue?\n. Moved as suggested to https://github.com/aspnet/Hosting/issues/623.\nThanks.\n. ",
    "Elion-zz": "Why do I have to talk about your PowerShell 3 ? \nDnia 1 marca 2016 18:36 Vaclav Elias <notifications@github.com> napisa\u0142(a):\nThanks again @GuardRex for the additional information.Not a problem at all. I will test and implement new coming bitsaccordingly.I don't know how to move things around so I shall leave it forthe guys here in asp.net to do it or I should do it manually, as anew issue?\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "mariuszjamro": "Awesome, thanks!\n. ",
    "xatabhk": "Here is the sample.\n\ndnx --version\n Microsoft .NET Execution environment\n Version: 1.0.0-rc2-16595\n Type: Clr\n Architecture: x86\n OS Name: Windows\n OS Version: 10.0.10586\n Runtime Id: win10-x86\ndotnet --version\n .NET Command Line Tools (1.0.0-beta-001747)\n\nProduct Information:\n Version: 1.0.0-beta-001747\n Commit Sha: 58a8a10d41\nRuntime Environment:\n OS Name: Windows\n OS Version: 10.0.10586\n OS Platform: Windows\n Runtime Id: win10-x64\nSteps:\n\ndotnet restore\ndotnet run or dnx web\nAn item with the same key has already been added. Key: System.IO Unspecified\nzaxitech_core_demo.zip\n. \n",
    "Challagolla": "@davidfowl  We started building a project on rc2. all my dependencies are of rc2 version.\n. @davidfowl  please find the sample project which is giving the same error as mentioned about at the repository https://github.com/Challagolla/TestDnxWeb\nplease let me know if you think that i am missing anything.\n. @davidfowl We are using OpenIddict.Core  package to generate JWT tokens. This package has dependencies of rc2. So, we are using rc2.\n. @davidfowl  I have used the individual versions to avoid the build issues due to change of dependencies from the Nugets at the time this project creation. Now,  I changed the versions to * and  i am getting the following error when running the dnx web command. This is coming from the main method. we are currently using WebApplicationBuilder class in the main method. Is this correct?  could you please suggest the best way for the entry point of the application when we use the rc2.\nC:\\Users\\Suneel\\Documents\\Visual Studio 2015\\Projects\\TestPublish\\src\\TestPublish>dnx web\nSystem.TypeLoadException: Method 'Log' in type 'Microsoft.Extensions.Logging.Logger' from assembly '\nMicrosoft.Extensions.Logging, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' doe\ns not have an implementation.\n   at Microsoft.Extensions.Logging.LoggerFactory..ctor()\n   at Microsoft.AspNet.Hosting.WebApplicationBuilder..ctor()\n   at TestPublish.Startup.Main(String[] args) in C:\\Users\\Suneel\\Documents\\Visual Studio 2015\\Projec\nts\\TestPublish\\src\\TestPublish\\Startup.cs:line 108\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Dnx.Runtime.Common.EntryPointExecutor.Execute(Assembly assembly, String[] args, ISer\nviceProvider serviceProvider)\n   at Microsoft.Dnx.ApplicationHost.Program.<>c__DisplayClass3_0.b__0()\n   at System.Threading.Tasks.Task`1.InnerInvoke()\n   at System.Threading.Tasks.Task.Execute()\n. @davidfowl Now, i understand this and moved all the packages to latest RC2 version and successfully build this. Thanks for the information \n. ",
    "dodyg": "IIS Express quits with error.\n. public static void Main(string[] args)\n        {\n            var webHost = new WebHostBuilder()\n                  .UseStartup<Startup>()\n                  .UseIISPlatformHandlerUrl()\n                  .UseConfiguration(WebHostConfiguration.GetDefault(args))\n                  .UseServer(\"Microsoft.AspNetCore.Server.Kestrel\")\n                  .Build();\n        }\nA dnx run from the command line just runs and quits. No error message.\nThis is a \"web\" run from visual studio 2015.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_64\\mscorlib\\v4.0_4.0.0.0__b77a5c561934e089\\mscorlib.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'Microsoft.Dnx.Host.Clr'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System\\v4.0_4.0.0.0__b77a5c561934e089\\System.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Dnx.Host.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Configuration\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Configuration.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Extensions.PlatformAbstractions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Core\\v4.0_4.0.0.0__b77a5c561934e089\\System.Core.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Xml\\v4.0_4.0.0.0__b77a5c561934e089\\System.Xml.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Dnx.Loader.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Extensions.PlatformAbstractions.Dnx.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Dnx.ApplicationHost.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Dnx.Runtime.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Dnx.Compilation.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Extensions.CompilationAbstractions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Dnx.Compilation.DesignTime.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'Crucible.Web'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Hosting\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Hosting.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Hosting.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Hosting.Abstractions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Hosting.Server.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.DependencyInjection.Abstractions\\1.0.0-rc2-20254\\lib\\netstandard1.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Http.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Http.Abstractions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.IISPlatformHandler\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.IISPlatformHandler.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Configuration.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Configuration.Abstractions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Configuration\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Configuration.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.FileProviders.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.FileProviders.Abstractions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Logging\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Logging.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Logging.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Logging.Abstractions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Primitives\\1.0.0-rc2-20254\\lib\\netstandard1.0\\Microsoft.Extensions.Primitives.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Runtime\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Runtime.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Configuration.Json\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Configuration.Json.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Configuration.EnvironmentVariables\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Configuration.EnvironmentVariables.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Configuration.CommandLine\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Configuration.CommandLine.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Configuration.FileExtensions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Configuration.FileExtensions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Newtonsoft.Json\\8.0.2\\lib\\net45\\Newtonsoft.Json.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Numerics\\v4.0_4.0.0.0__b77a5c561934e089\\System.Numerics.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.DependencyInjection\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.DependencyInjection.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.ComponentModel\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.ComponentModel.dll'. Module was built without symbols.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Http.Features\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Http.Features.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Http\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Http.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Options\\1.0.0-rc2-20254\\lib\\netstandard1.0\\Microsoft.Extensions.Options.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\System.Diagnostics.DiagnosticSource\\4.0.0-rc2-23826\\lib\\dotnet5.2\\System.Diagnostics.DiagnosticSource.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Linq\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Linq.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Threading\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Threading.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Diagnostics.Tracing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Diagnostics.Tracing.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.FileProviders.Physical\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.FileProviders.Physical.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Reflection\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Reflection.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'Anonymously Hosted DynamicMethods Assembly'. \n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Antiforgery\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Antiforgery.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Caching.Memory\\1.0.0-rc2-20254\\lib\\net451\\Microsoft.Extensions.Caching.Memory.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Session\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Session.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.EntityFrameworkCore\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.EntityFrameworkCore.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.EntityFrameworkCore.SqlServer\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.EntityFrameworkCore.SqlServer.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'Crucible.Models'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'SK.Framework'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'Crucible.Core'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.Core\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.Core.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.Dnx\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.Dnx.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.DataProtection\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.DataProtection.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.ObjectPool\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.ObjectPool.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Cryptography.Internal\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Cryptography.Internal.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.DataProtection.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.DataProtection.Abstractions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Caching.Abstractions\\1.0.0-rc2-20254\\lib\\netstandard1.0\\Microsoft.Extensions.Caching.Abstractions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Threading.Tasks\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Threading.Tasks.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Remotion.Linq\\2.0.2\\lib\\net45\\Remotion.Linq.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Ix-Async\\1.2.5\\lib\\net45\\System.Interactive.Async.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.EntityFrameworkCore.Relational\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.EntityFrameworkCore.Relational.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.Abstractions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.ApiExplorer\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.ApiExplorer.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.ViewFeatures\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.ViewFeatures.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.Razor\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.Razor.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Razor.Runtime\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Razor.Runtime.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.DataAnnotations\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.DataAnnotations.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.Formatters.Json\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.Formatters.Json.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.Cors\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.Cors.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Routing\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Routing.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\System.Text.Encodings.Web\\4.0.0-rc2-23826\\lib\\dotnet5.1\\System.Text.Encodings.Web.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.IO\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.IO.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Runtime.Extensions\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Runtime.Extensions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\System.Buffers\\4.0.0-rc2-23826\\lib\\dotnet5.2\\System.Buffers.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Diagnostics.Debug\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Diagnostics.Debug.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Authorization\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Authorization.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.WebEncoders\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.WebEncoders.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.Razor.Host\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.Razor.Host.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Razor\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Razor.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Cors\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Cors.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Server.Kestrel\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Server.Kestrel.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\System.Numerics.Vectors\\4.1.1-rc2-23826\\lib\\portable-net45+win8\\System.Numerics.Vectors.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\System.Threading.Tasks.Extensions\\4.0.0-rc2-23826\\lib\\dotnet5.1\\System.Threading.Tasks.Extensions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Logging.Console\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Logging.Console.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.StaticFiles\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.StaticFiles.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Diagnostics\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Diagnostics.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Routing.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Routing.Abstractions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\nThe program '[12468] dnx.exe' has exited with code 0 (0x0).\n. This is from an IIS express run\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_64\\mscorlib\\v4.0_4.0.0.0__b77a5c561934e089\\mscorlib.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'Microsoft.Dnx.Host.Clr'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System\\v4.0_4.0.0.0__b77a5c561934e089\\System.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Dnx.Host.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Configuration\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Configuration.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Core\\v4.0_4.0.0.0__b77a5c561934e089\\System.Core.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Xml\\v4.0_4.0.0.0__b77a5c561934e089\\System.Xml.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Extensions.PlatformAbstractions.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Dnx.Loader.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Extensions.PlatformAbstractions.Dnx.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Dnx.ApplicationHost.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Dnx.Runtime.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Dnx.Compilation.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Extensions.CompilationAbstractions.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.dnx\\runtimes\\dnx-clr-win-x64.1.0.0-rc2-16595\\bin\\Microsoft.Dnx.Compilation.DesignTime.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'Crucible.Web'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Hosting\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Hosting.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Hosting.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Hosting.Abstractions.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Hosting.Server.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.DependencyInjection.Abstractions\\1.0.0-rc2-20254\\lib\\netstandard1.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Http.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Http.Abstractions.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.IISPlatformHandler\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.IISPlatformHandler.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Configuration.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Configuration.Abstractions.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Configuration\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Configuration.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.FileProviders.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.FileProviders.Abstractions.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Logging\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Logging.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Logging.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Logging.Abstractions.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Primitives\\1.0.0-rc2-20254\\lib\\netstandard1.0\\Microsoft.Extensions.Primitives.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Runtime\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Runtime.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Configuration.Json\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Configuration.Json.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Configuration.EnvironmentVariables\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Configuration.EnvironmentVariables.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Configuration.CommandLine\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Configuration.CommandLine.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Configuration.FileExtensions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Configuration.FileExtensions.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Newtonsoft.Json\\8.0.2\\lib\\net45\\Newtonsoft.Json.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Numerics\\v4.0_4.0.0.0__b77a5c561934e089\\System.Numerics.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.DependencyInjection\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.DependencyInjection.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.ComponentModel\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.ComponentModel.dll'. Module was built without symbols.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Http.Features\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Http.Features.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Http\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Http.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Options\\1.0.0-rc2-20254\\lib\\netstandard1.0\\Microsoft.Extensions.Options.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\System.Diagnostics.DiagnosticSource\\4.0.0-rc2-23826\\lib\\dotnet5.2\\System.Diagnostics.DiagnosticSource.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Linq\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Linq.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Threading\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Threading.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Diagnostics.Tracing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Diagnostics.Tracing.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.FileProviders.Physical\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.FileProviders.Physical.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Reflection\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Reflection.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'Anonymously Hosted DynamicMethods Assembly'. \n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Antiforgery\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Antiforgery.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Caching.Memory\\1.0.0-rc2-20254\\lib\\net451\\Microsoft.Extensions.Caching.Memory.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Session\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Session.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.EntityFrameworkCore\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.EntityFrameworkCore.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.EntityFrameworkCore.SqlServer\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.EntityFrameworkCore.SqlServer.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'Crucible.Models'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'SK.Framework'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'Crucible.Core'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.Core\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.Core.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.Dnx\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.Dnx.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.DataProtection\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.DataProtection.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.ObjectPool\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.ObjectPool.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Cryptography.Internal\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Cryptography.Internal.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.DataProtection.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.DataProtection.Abstractions.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Caching.Abstractions\\1.0.0-rc2-20254\\lib\\netstandard1.0\\Microsoft.Extensions.Caching.Abstractions.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Threading.Tasks\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Threading.Tasks.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Remotion.Linq\\2.0.2\\lib\\net45\\Remotion.Linq.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Ix-Async\\1.2.5\\lib\\net45\\System.Interactive.Async.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.EntityFrameworkCore.Relational\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.EntityFrameworkCore.Relational.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.Abstractions.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.ApiExplorer\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.ApiExplorer.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.ViewFeatures\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.ViewFeatures.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.Razor\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.Razor.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Razor.Runtime\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Razor.Runtime.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.DataAnnotations\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.DataAnnotations.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.Formatters.Json\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.Formatters.Json.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.Cors\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.Cors.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Routing\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Routing.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\System.Text.Encodings.Web\\4.0.0-rc2-23826\\lib\\dotnet5.1\\System.Text.Encodings.Web.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.IO\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.IO.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Runtime.Extensions\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Runtime.Extensions.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\System.Buffers\\4.0.0-rc2-23826\\lib\\dotnet5.2\\System.Buffers.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\System.Diagnostics.Debug\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Diagnostics.Debug.dll'. Skipped loading symbols. Module is optimized and the debugger option 'Just My Code' is enabled.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Authorization\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Authorization.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.WebEncoders\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.WebEncoders.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Mvc.Razor.Host\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Mvc.Razor.Host.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Razor\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Razor.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Cors\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Cors.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Server.Kestrel\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Server.Kestrel.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\System.Numerics.Vectors\\4.1.1-rc2-23826\\lib\\portable-net45+win8\\System.Numerics.Vectors.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\System.Threading.Tasks.Extensions\\4.0.0-rc2-23826\\lib\\dotnet5.1\\System.Threading.Tasks.Extensions.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.Extensions.Logging.Console\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.Extensions.Logging.Console.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.StaticFiles\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.StaticFiles.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Diagnostics\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Diagnostics.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.dll'. Cannot find or open the PDB file.\n'dnx.exe' (CLR v4.0.30319: DefaultDomain): Loaded 'C:\\Users\\Atom\\.nuget\\packages\\Microsoft.AspNetCore.Routing.Abstractions\\1.0.0-rc2-20100\\lib\\net451\\Microsoft.AspNetCore.Routing.Abstractions.dll'. Cannot find or open the PDB file.\nThe program '[10808] dnx.exe' has exited with code 0 (0x0).\nThe program '[10392] iisexpress.exe' has exited with code -1 (0xffffffff).\n. I changed that to the web assembly already. \nYeah, normally I wouldn't waste time try to upgrade to RC2 but I need a bug fix in EF7 (\"EF throws exception on string matching condition\"). \nI did all the modifications in announcements. Everything compiles. I can follow  the debugger through Startup.ConfigureServices and Startup.Configure. After it steps out Startups.Configure there's nothing.\n```\n{\n    \"version\": \"1.0.0-*\",\n    \"compilationOptions\": {\n        \"emitEntryPoint\": true\n    },\n\"dependencies\": {\n    \"Crucible.Models\": \"1.0.0-*\",\n    \"Crucible.Core\": \"1.0.0-*\",\n    \"CommonMark.NET\": \"0.11.0\",\n    \"SK.Framework\": \"1.0.0-*\",\n    \"Microsoft.AspNetCore.Http\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Http.Abstractions\": \"1.0.0-rc2-20100\",\n    \"Microsoft.Extensions.Configuration.Json\": \"1.0.0-rc2-20100\",\n    \"Microsoft.Extensions.Configuration.FileProviderExtensions\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Authentication\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Authentication.Cookies\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Hosting\": \"1.0.0-rc2-20100\",\n    \"Microsoft.Extensions.Logging\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNet.Tooling.Razor\": \"1.0.0-rc2-16051\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Hosting.Abstractions\": \"1.0.0-rc2-20100\",\n    \"Microsoft.EntityFrameworkCore.SqlServer\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Diagnostics\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Mvc.Dnx\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.StaticFiles\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.IISPlatformHandler\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Session\": \"1.0.0-rc2-20100\",\n    \"Microsoft.Extensions.Caching.Memory\": \"1.0.0-rc2-20254\",\n    \"Microsoft.Extensions.Caching.Abstractions\": \"1.0.0-rc2-20254\"\n},\n\n\n\"commands\": {\n    \"gen\": \"Microsoft.Extensions.CodeGeneration\",\n    \"web\": \"Crucible.Web\"\n},\n\n\"frameworks\": {\n    \"dnx451\": {\n        \"frameworkAssemblies\": {\n            \"System.ComponentModel\": \"4.0.0.0\"\n        }\n    }\n},\n\"content\": [\n    \"hosting.json\"\n],\n\"exclude\": [\n    \"wwwroot\",\n    \"node_modules\"\n],\n\"publishExclude\": [\n    \"**.user\",\n    \"**.vspscc\"\n]\n\n}\n```\n. It just opens a command (system32\\cmd.exe) window with a message 'press any key to continue'\n. Unfortunately not. \nI use staticfiles and mvc and none are working.\napp.UseStaticFiles();\n   app.UseIISPlatformHandler();\nSo localhost:5000/css/site.css located under wwwroot/css/site.css for example returns nothing\nThis is my hosting.json\n{\n    \"server\": \"Microsoft.AspNetCore.Server.Kestrel\",\n    \"server.urls\": \"http://localhost:5000;https://localhost:5001\"\n}\n. This works\n```\n{\n    \"version\": \"1.0.0-*\",\n    \"description\": \"ConsoleApp1 Console Application\",\n    \"authors\": [ \"Atom\" ],\n    \"tags\": [ \"\" ],\n    \"projectUrl\": \"\",\n    \"licenseUrl\": \"\",\n\"compilationOptions\": {\n    \"emitEntryPoint\": true\n},\n\n\"dependencies\": {\n},\n\n\"commands\": {\n    \"ConsoleApp1\": \"ConsoleApp1\"\n},\n\n\"frameworks\": {\n    \"dnx451\": {\n        \"frameworkAssemblies\": {\n            \"System\": \"4.0.0.0\"\n        }\n    }\n}\n\n}\n```\n```\nusing System;\nnamespace ConsoleApp1\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello world\");\n        }\n    }\n}\n```\n. This works. Next I am going to set up a web app with the same config.\n```\n{\n    \"version\": \"1.0.0-*\",\n    \"description\": \"ConsoleApp1 Console Application\",\n    \"authors\": [ \"Atom\" ],\n    \"tags\": [ \"\" ],\n    \"projectUrl\": \"\",\n    \"licenseUrl\": \"\",\n\"compilationOptions\": {\n    \"emitEntryPoint\": true\n},\n\n\"dependencies\": {\n    \"Microsoft.AspNetCore.Http\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Http.Abstractions\": \"1.0.0-rc2-20100\",\n    \"Microsoft.Extensions.Configuration.Json\": \"1.0.0-rc2-20100\",\n    \"Microsoft.Extensions.Configuration.FileProviderExtensions\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Authentication\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Authentication.Cookies\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Hosting\": \"1.0.0-rc2-20100\",\n    \"Microsoft.Extensions.Logging\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNet.Tooling.Razor\": \"1.0.0-rc2-16051\",\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Hosting.Abstractions\": \"1.0.0-rc2-20100\",\n    \"Microsoft.EntityFrameworkCore.SqlServer\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Diagnostics\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Mvc.Dnx\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.StaticFiles\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.IISPlatformHandler\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.0-rc2-20100\",\n    \"Microsoft.AspNetCore.Session\": \"1.0.0-rc2-20100\",\n    \"Microsoft.Extensions.Caching.Memory\": \"1.0.0-rc2-20254\",\n    \"Microsoft.Extensions.Caching.Abstractions\": \"1.0.0-rc2-20254\"\n},\n\n\"commands\": {\n    \"ConsoleApp1\": \"ConsoleApp1\"\n},\n\n\"frameworks\": {\n    \"dnx451\": {\n        \"frameworkAssemblies\": {\n            \"System\": \"4.0.0.0\"\n        }\n    }\n}\n\n}\n```\n```\nusing System;\nnamespace ConsoleApp1\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello world\");\n        }\n    }\n}\n```\n. https://github.com/dodyg/aspnet-core1-rc2-minimum-web-test/tree/master/Crucible.Web\nThis is the reduced web project that exhibit the same behavior. http://imgur.com/z7xmUwU is my active dnvm. \n. ",
    "WillRay": "Ahh, thanks so much @davidfowl!\n. ",
    "NickAb": "Invoking msbuild does compile typescript, but require typings to be restored before invoking msbuild even if prebuild step to restore typings is included in project.json.\nprebuild step from project.json does get executed, but only after msbuild invokes CompileTypeScriptWithTSConfig. So prebuild does not have any chance to restore typings to make typescript compilation successful.\nWhat is preferred way to go about preparing asp net core project for deployment:\n1. use msbuild: install npm packages and restore typings before invoking msbuild. Invoke msbuild with deploy on build\n2. use msbuild: add custom step to xproj to run before CompileTypeScriptWithTSConfig and use msbuild\n3. use dnu: add typescript compilation step to project.json scripts section and use dnu publish\n. ",
    "Abdelkrim": "the answer is finally the following: some niminifed js files break the code. \nI had to deploy the un-minified versions of the code and the app worked!\n. ",
    "sepplK": "is there a workarround yet? unable to return a view in rc2-20466 or later.\n. ",
    "ibrmohammed": "what should be the next step to get the test project running.\nshould we stop using rc2 packages.\n. ",
    "sethreidnz": "To add to this I have figured out the root problem I think. I am deploying WebJobs as well. My deployment will turn off the web app slot but that does not kill the process that the webjobs are running under. Therefore the files are locked. \nI think that means its not really a DNX issue..\n. @philmh-isams what @muratg said. However to answer your question more fully. What I did was just put the webjobs into the correct file location (in my web project output) as part of my build process and then published the whole website as a package. This seemed to work.\n. ",
    "philmh-isams": "@justsayno How do you kill the process the WebJobs are running under - we have the same issue trying to remove some WebJobs; we had to turn on DoNotDelete flag in the interim to get our releases working.\nIf you redeploy a failed deployment, it works.\n. @justsayno and @muratg\nI am using .NET Core not DNX - sorry for the confusion.\nThanks for the response.\n. @steve-warwick We have not found one, but DoNotDelete is a suitable workaround for us at present. I would be interested if anyone else has a solution too ;o). ",
    "PrashanthReddyAnnedla": "If we set the DoNotDelete flag then unnecessary files are not being removed, this is causing reference issues for one of my website. Hope there is some solution for this.\n. ",
    "steve-warwick": "I'm experiencing the same issue. We are .Net Core. Also, we deploy our web jobs separately from the primary app service they are hosted in. Our VSTS release management deployment attempts to stop the web jobs, stops the app service, deploys the app service, deploys the web jobs, starts the app service and web jobs. During the app service deploy we get this error. I verified the app service isn't running and the web jobs are not running when it attempts the deploy. Has anyone found a solution or workaround for this issue? . ",
    "ghingyi": "It's not fixed yet.\n. ",
    "DormancyCypress": "@muratg  Thank you for response, I've download packages via Nuget in Windows \n. ",
    "palves78": "Hi,\nWell, in my pc at home it works, but in another pc at work it doesn't, when I try to register in the web app, I get an error caused by SendGrid because user-secrets isn't found.  I'm unable to use user-secrets.\n. ",
    "yizhang82": "Following is my preliminary investigation:\nI'm pretty sure this is a DNX specific issue. \nThis is the code in question:\nAssert.Equal(0x34, entry.Bytes[0]);\nIf I use csc (from VS) manually to compile FixedIssue.dll - I get the correct code in IL:\nIL_0018: ldc.i4.s 52\nIL_001a: ldloca.s V_0\nIL_001c: ldflda valuetype [ClassLibrary1]ClassLibrary1.RuntimeIssue/'e__FixedBuffer' [ClassLibrary1]ClassLibrary1.RuntimeIssue::Bytes\nIL_0021: ldflda uint8 [ClassLibrary1]ClassLibrary1.RuntimeIssue/'e__FixedBuffer'::FixedElementField\nIL_0026: conv.u\nIL_0027: ldind.u1\nIL_0028: call void [xunit.assert]Xunit.Assert::Equal(!!0,\n!!0)\nHowever, with DNX, it generates the following code:\nIL_0018: ldc.i4.s 52\nIL_001a: ldloc.0\nIL_001b: ldfld uint8* [ClassLibrary1]ClassLibrary1.RuntimeIssue::Bytes\nIL_0020: ldind.u1\nIL_0021: call void [xunit.assert]Xunit.Assert::Equal(!!0,\n!!0)\nSince the Bytes field is a opaque value type, ldfld uint8* is failing with MissingFieldException.\nMy best guess is that DNX is using an old version of Roslyn compiler or something along those lines. \n. ",
    "kcd83": "Yes correct, so I guess it is a question of tooling not the underlying framework. Feel free to label this \"discussion\"\n. ",
    "vassilvk": "@davidfowl - I am porting an ASP.NET 5 RC1 application which used to run on Docker image 1.0.0-rc1-update1:latest from here to the new microsoft/dotnet Docker image.\nI'm trying to understand what you mean by \"Now you have to use net45x, it's really no different from dnx, just that it's vanilla mono.\"\nDo you mean that a project which referred to framework dnx451 and used to run in an aspnet-docker container, will run with no issues in a microsoft/dotnet container by simply changing the target framework to net451?\nI know my question skews things towards Docker, but I think this is relevant to the discussion as dnx451 was a popular option for running stuff in the official RC1 Docker image.\n. ",
    "sudhir9p": "This issue got resolved??? I'm facing same issue ,\n. ",
    "max-favilli": "@superlogical upgrading to npm 3 fixed that for me too. Just for anyone else having the same issue and ending up reading us here, a reboot was needed.\n. ",
    "lokinfey": "@kichalla  I repair that but new problem is \nplication startup exception: System.IO.FileNotFoundException: The configuration file 'config.json' was not found and is not optional.\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.Load(Boolean reload)\n   at Microsoft.Extensions.Configuration.ConfigurationRoot..ctor(IList`1 providers)\n   at Microsoft.Extensions.Configuration.ConfigurationBuilder.Build()\n   at Gdou.App.Startup..ctor(IHostingEnvironment env) in C:\\inetpub\\wwwroot\\gdouwechatapp\\Gdou.Web\\Startup.cs:line 28\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at Microsoft.Extensions.Internal.ActivatorUtilities.ConstructorMatcher.CreateInstance(IServiceProvider provider)\n   at Microsoft.AspNetCore.Hosting.Internal.StartupLoader.LoadMethods(IServiceProvider services, Type startupType, String environmentName)\n   at Microsoft.AspNetCore.Hosting.WebHostBuilderExtensions.<>c__DisplayClass1_0.b__1(IServiceProvider sp)\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.ScopedCallSite.Invoke(ServiceProvider provider)\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredServiceT\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureStartup()\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureApplicationServices()\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\nHosting environment: Production\nContent root path: C:\\gdouwechat\nNow listening on: http://localhost:25801\nApplication started. Press Ctrl+C to shut down.\n. ok I reparir now thx @kichalla\n. ",
    "Romanx": "That would give the impression that your config.json isn't in the same directory as the exe and it's not optional\n. ",
    "pjbazin": "I'm using runtime RC1 coreclr x64 on linux. The same project on Windows does not have the issue.\n. ",
    "colhountech": "Go to http://dot.net and download the new dotnet core bits. \nDNX\nThis repository is obsolete and no longer used or maintained.\nDNX and DNVM have been replaced by the new .NET CLI. See:\nhttp://dotnet.github.io/getting-started/\nhttp://github.com/dotnet/cli\nAs a result, we're not accepting anymore changes to this project. Please file any new issues on http://github.com/dotnet/cli.\n. ",
    "nullcat0": "Migrating issue.\n. ",
    "AhmedHemdan21": "Problem has been solved by compressing the dll files to zip file and upload it as a zip file not using the ftp transfer. . ",
    "Andorbal": "Thanks for the feedback!  I can address the issues you've brought up.  Does the general concept look good, though or should I take a different approach?\nSent from my Windows Phone\n-----Original Message-----\nFrom: \"Eilon Lipton\" notifications@github.com\nSent: \u200e2/\u200e19/\u200e2015 3:37 PM\nTo: \"aspnet/XRE\" XRE@noreply.github.com\nCc: \"Andrew Benz\" andorbal@gmail.com\nSubject: Re: [XRE] Exclude comments when getting JToken values as an array(#1247)\nIn test/Microsoft.Framework.Runtime.Tests/ProjectFilesCollectionFacts.cs:\n\n@@ -59,6 +59,30 @@ public void FilePatternsWorkForArraysAreSet()\n             Assert.Equal(new[] { \"a.cs\", @\"foo.js\" }, target.ResourcesPatterns);\n         }\n+\n-        [Fact]\n-        public void FilePatternsDoNotIncludeComments()\n-        {\n-            var rawProject = Deserialize(@\"\n  +{\n-    \"\"code\"\": [\"\".cs\"\", / FOO / \"\"../.cs\"\"],\n-    \"\"exclude\"\": [\"\"buggy/.\"\", /* FOO */],\n  BTW there are a couple of these that aren't really valid - there's an undefined last element in the array because there's a trailing comma. There's another example below in shared.\n  \u2014\n  Reply to this email directly or view it on GitHub.\n. \n",
    "rpetrich": "Should perhaps use free instead of delete[]\n. ",
    "erkinalp": "rpetrich: malloc goes with free, new goes with delete and delete[]. They have different free lists and you will get a double free if you mix on the same object.\n. Yes, typedef int32_t DWORD; will be more appropriate\n. ",
    "mmdriley": "What about ARM?\n. 'APPLICATION'\n. more appropriately uint32_t\n. danger! semicolon in macro definition\nlet's just use const\n. seems like we should skip the Hungarian for szDirectory, at least. Maybe bNative too since it's a C++ bool.\n. can just assign the string literal.\nruntimeDirectory = \"CORECLR_DIR\";\n. if (!ret)\n. consistency, NULL vs. nullptr. Prefer the latter.\n. What if no slash is found?\n. just assignment is fine here\n. ?\n. seems wrong?\n. this may be a job for vector and std::initializer_list.\ne.g.\nstd::vector< string > names = {\n  \"a!\",\n  \"b!\",\n  // ...\n};\n. Each of these values was allocated with strdup(), which is spec'd as allocating memory that must be deleted with free().\nhttp://pubs.opengroup.org/onlinepubs/009695399/functions/strdup.html\nProbably best we just get rid of the naked pointers altogether and use std::strings.\nBest thing here is probably to use real strings and avoid the \n. More curious about the 'goto' to a nonexistent label.\n. this header file uses types it doesn't include, e.g. LPWSTR, BOOL\n. The use of MAX_PATH seems really odd here. There's nothing in the function name to suggest this is dealing with paths.\n. Likewise on the use of MAX_PATH. Is this supposed to be \"PathsEqual\"?\n. erm, agreed with which part? the current code is incorrect, so it should not be checked in.\n. This no longer needs a \"count\" parameter.\n. ",
    "nil4": "A few lines above the delaySign variable is computed, allowing either true or 1 as values to enable delay signing. Why not reuse that variable in the call to WithDelaySign instead of recomputing from delaySignString and only checking for a true value? I assume this is an oversight, but it's inconsistent and unnecessary.\n. ",
    "gfraiteur": "Do you want it immutable like in Roslyn? Not sure of what's your convention in this project.\n. ",
    "metadings": "You're right... I'm going to remove this PR :)\n. ",
    "madskristensen": "@davidfowl What needs to be fixed? VS auto-formats C# or JSON?\n. I suggest you take a look at using .editorconfig files to control tab vs. spaces and indent size\n. ",
    "kouvel": "Don't you need a lookup mechanism by name here too, like for the Semaphore case? Otherwise it looks like it would create a new Mutex every time and no two calls would share a mutex to synchronize file access.\n. "
}