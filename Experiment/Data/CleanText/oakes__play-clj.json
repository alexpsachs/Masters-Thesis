{
    "oakes": "Thanks!\n. I haven't tried it in Light Table, but are you sure you are in the right namespace and are re-evaluating the entire defscreen call? Keep in mind that in the desktop project, the main function and the defscreen call are in separate namespaces.\n. Right, the main function is within src, while the game code itself is within src-common. The reason for this is that Android and iOS projects don't have main functions, so that needed to be kept out of src-common.\n. There should be a second jar file in the target directory called \"super-koalio-0.0.1-SNAPSHOT-standalone.jar\". You'll need to run that one, because the non-standalone jar doesn't contain all the dependencies. Let me know if you still have problems.\n. Yeah I intentionally had tiled-map* return the argument if it wasn't a string, so you could pass your own TiledMap object that you create with java interop. I haven't documented it, but there's nothing wrong with doing it that way. If there's a way I can make it easier in play-clj, let me know.\n. I just added the ability to create new tiled maps, layers, and cells like this:\n(tiled-map*)\n(tiled-map-layer* width height tile-width tile-height)\n(tiled-map-cell*)\nYou can run methods on them with the relevant functions like tiled-map!. I'll close the issue, but let me know if there's anything else that is missing for making tiled maps programmatically.\n. Actually, this is indeed a problem with the way defscreen is written. I chose to use defonce because I didn't want the state to be wiped out when reloading the namespace. After giving it some thought, I think I found a way to do this without defonce. I just pushed the change in 0.2.3-SNAPSHOT, so if you could try it out and let me know if it works I would appreciate it.\n. I think I know what may be going on. Although my recent fix allows newly-defined functions to be in the namespace, your screen still can't see them because it was created before they were defined. If I am right, you should be able to get this to work by running set-screen! again. In a REPL, you must run it like this so it runs on the render thread:\n(app! :post-runnable #(set-screen! apples main-screen))\n. I haven't tested Java 8 yet, but I'll do so when I get the chance. Regarding the reflection warnings, they are showing up because I put (set! *warn-on-reflection* true) at the top of all the core.clj files. I did this to help me spot possible performance problems, but you can safely remove the line.\n. Yep, they should show up any time you are building code, so they aren't related to the link error.\n. I just noticed you said JRE 8. That may be the source of the problem; you need the full JDK 8 in order for this to work. On Windows, you also have to manually add the JDK 8 \"bin\" folder to the PATH. Let me know if you still have issues with this.\n. I see. I'll re-open until we it is resolved.\n. Haven't heard about this from anyone lately so I'll close. I'm happy to re-open if it is still a problem for anyone.\n. Can you try doing a lein clean first? I think this error might occur after upgrading play-clj without cleaning the project.\n. I don't know specifically, but I think it may have been using older compiled class files, which didn't work with the changes I made to defscreen.\n. I don't think it'll be a regular thing, but I'll write something in the release announcement that mentions it. I forgot it happened so thank you for bringing it up.\n. Unfortunately I'm not always able to mark them as private, because it would prevent me from using them in macros.\n. I completely rewrote the doc site and hid all functions that weren't meant to be public, so I hope that helps.\n. Well, I do mention changes for releases, but I think SNAPSHOT builds may be too volatile to get changelogs. Were you by any chance trying out 0.3.0-SNAPSHOT and had issues? It won't work with the current play-clj template because it is targeting LibGDX 1.0, which is due to come out this weekend.\n. I'll close this issue since the enhancement was merged.\n. Thanks a lot, it looks great! I agree that it could be a bit more flexible, though, so I made a few modifications. Firstly, I merged the functions together, so screenshot! returns a Pixmap if no argument is given, or saves it to the disk if a path is specified. Please let me know if you see any potential problems with these changes.\n. Good idea; just added it.\n. You are correct that functions in defscreen are run on the GL thread; their execution is determined by LibGDX, so this is guaranteed. Running commands in a REPL is certainly a major reason for having on-gl, but it is also useful when running code in a separate thread using, for example, future or pmap. I don't think there is a documented way to know which functions must be run on the GL thread, but you can usually tell just by thinking about whether it would need to interact with OpenGL in some way.\n. Sure, I think it makes sense to add the warning whenever it's necessary. However, it isn't needed for texture because it uses TextureRegion underneath, not Texture. Also, I believe Screen implements Disposable in case you instantiate things in it that need to be disposed, so it isn't necessary for play-clj.\nFor the rest, please feel free to copy/edit the warning I wrote into their docstrings. I don't think there is a need for a separate dispose! function, because they should each have a macro for calling java interop. I just added bitmap-font! so that one should be covered as well. The advantage of having separate interop macros is that I can add the proper type hint to avoid the performance cost of reflection.\n. No, nothing is disposed automatically. I don't think the warnings need to be more than the sentence I've already written. That exception seems to be pretty self-explanatory, and also my doc generator should include descriptions from the LibGDX docs so I don't think it's a big issue.\n. I am not sure. Actually, I think it would be better if I modified the doc generator to automatically add a warning if something implements Disposable. I'll remove the docstring warnings for now and hopefully get to that soon.\n. Hello again. I wanted to let you know that the next version of play-clj will have a better solution to the Disposable problem. It will allow you to set a global asset manager via set-asset-manager!, which will keep track of all disposable assets that are loaded so you can dispose all of them in one go by calling the asset manager's \"clear\" method. Just thought you would be interested to know that.\n. Yep, this is definitely a limitation of these functions, because they are designed to work on tile layers. I just added basic-map-layer and basic-map-layer!, which work on MayLayer objects instead of TiledMapTileLayer objects, so they can be used for object and image layers. Thanks for pointing this out! If you notice any other problems related to this, please let me know.\n. I renamed the macros to map-layer and map-layer! to keep the names closer to their LibGDX equivalents.\n. I tried the above and .getRectangle worked fine for me. What error did you receive? If any of the objects returned by the map-layer! call aren't RectangleMapObject instances, it will fail.\nI had some free time so I just added a wrapper for MapObject to the latest SNAPSHOT if you'd like to try it. It looks like this:\n(doseq [object (map-objects (map-layer screen \"test\"))]\n  (println (map-object! object :get-rectangle)))\nI also renamed tiled-map-layers to map-layers, to make it clear that it returns all layers rather than only tile layers.\n. I forgot to mention, I also renamed tiled-map-layer-names to map-layer-names.\n. Yeah that's bitten me a few times. If enemy-images is a vector, it will be added to the end, and if it's a list, it will be added to the beginning. I believe conj does whatever is most efficient for the given data structure.\n. I have been thinking about ways to help you recover from errors better. One thing that is already available in the current version of play-clj.core is a function called wrapper, which wraps around all screen functions. The purpose of it is to let you redefine it so you can control how these functions are run.\nFor example, try doing something like the following, which redefines wrapper to catch any errors and switch to a blank screen. Once the error is corrected, you can switch back to the main screen. Note that you can just do (on-gl (set-screen! mental-math fight-screen)) if you're on the latest version.\n```\n(defscreen blank-screen\n  :on-render\n  (fn [screen entities]\n    (clear!)))\n(intern 'play-clj.core\n        'wrapper\n        (fn [screen f]\n          (try (f)\n            (catch Exception e (.printStackTrace e)\n              (on-gl (set-screen! my-game blank-screen))))))\n``\n. Great, I'm glad it helped. I've been thinking about adding it to the library as a standard feature. I could enable it by default, or perhaps provide a something like(catch-screen-errors! true).\n. You probably don't needon-glat all in the catch statement, now that I think about it, because it should already be on the GL thread.\n. I decided I don't want to hard-code this behavior into the library, but I also don't want it to remain a hidden feature. So, I'm adding this:(set-screen-wrapper! wrapper-fn). It doesn't really save you from writing much code, because it does the equivalent of(intern 'play-clj.core 'wrapper wrapper-fn). However, it will be an explicit part of the documentation, so more people will be aware of it.\n. Actually yes, Gdx.graphics.getY() uses [the top left corner](http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/Input.html#getY%28%29) as its origin. This is indeed an inconsistency in LibGDX. I have been idly thinking about fixing this, but obviously it would mean breaking existing play-clj games. Then again, version 0.3.0 would be a good time to do so, since it's bringing a lot of changes anyway.\n. By the way, you may not need to do any converting now that I think about it. The camera has an \"unproject\" method that allows you to convert screen to map coordinates. See the [get-entity-at-cursor](https://github.com/oakes/play-clj-examples/blob/master/dungeon-crawler/desktop/src-common/dungeon_crawler/utils.clj#L160) function I wrote for dungeon-crawler. This is actually one reason that trying to change the origin of(game :y)may not be a good idea, since this method wouldn't work any longer.\n. I just addedwindow->screenandscreen->windowand updatedget-entity-at-cursorto use the former. Hopefully that makes this simpler to deal with.\n. That's a good idea; I just made the change. Renaming the screen vars will break existing games, but I'll mentioned it when I do the release.\n. Yeah, right now it's using the camera to do the conversion, but now that you mention it I think it would make sense to make it work without one. I suppose that would simply mean flipping the y-axis, so I'll add that pretty soon.\n. Fixed in the latest 0.3.1-SNAPSHOT.\n. I thinkfloat-arrayshould work, have you tried that?\n. It appears that LibGDX requires polygons to be lines, not filled, so you'll need to pass :line as the first arg. To achieve a filled shape you may need to make your desired shape out of simpler shapes like rects and triangles.\n. No problem! Keep in mind there is currently a bug I didn't catch, preventing you from displaying shapes and textures in the same screen. It will be fixed in the next release, maybe this week.\n. You'll need to make separateshapeentities, but you can combine them together using the newbundleentity, so you can essentially treat them as one entity.\n. This is great, thanks!\n. Thanks, it looks good. I assume you didn't mean to makecontainer*call(ActorEntity. (Table. child))` right?\n. No problem, I merged and fixed it. Thanks!\n. After some thought, I know why this is happening. The stage treats UI elements differently, see drawing them all at the same time before it draws the rest of the entities. I'll look into it and see if we can change that.\n. Actually, I just tried it and I can't seem to reproduce the problem. The following seems to correctly display the label above the shape. Is there anything different about your code?\nclojure\n(defscreen main-screen\n  :on-show\n  (fn [screen entities]\n    (update! screen :renderer (stage))\n    [(shape :filled\n            :set-color (color :green)\n            :rect 0 0 50 50)\n     (label \"Hello world!\" (color :white))])\n  :on-render\n  (fn [screen entities]\n    (clear!)\n    (render! screen entities)))\n. Are you by any chance using play-clj 0.3.0? I think that could be the problem. This should be fixed in 0.3.1.\n. Sometimes I find that the old version sticks around after I change it in project.clj, so try running lein clean.\n. Can you try calling shape! on an existing shape entity to set the rotation?\n. Try using doto instead of ->. The latter will cause the return value to be whatever is returned by the rotate method, which is nil.\n. Thanks. I'll merge once the next release comes out, to avoid confusing people using the current version.\n. Interesting. I think we could benefit from a load function, but instead of multiple functions it may make more sense to write a single macro that converts a supplied keyword into the appropriate class name. Also, I am worried that this may be doing too much for a library. We already have an asset-manager macro, and it seems like it would make more sense for the library user to manage the resulting object themselves, rather than creating a global copy for them. What are your thoughts?\n. This looks useful but I think it's better off staying in end-user projects rather than being a library feature. I'll look into a possible load macro when I have the time; thanks for the idea.\n. I'm reopening this issue because I think you are right that there must at least be a minimal amount of integration in the library, so it can be used with the entity macros like texture. I'll try to think of a way to implement this in an optional way; right now, I'm thinking of perhaps adding a function called set-asset-manager! that lets you set it as a global object.\n. I just pushed the change, so if you have the time, please test it out and let me know how it works for you. It should be in the latest 0.3.2-SNAPSHOT. It should work with sound, pixmap, bitmap-font, texture, nine-patch, particle-effect, texture-atlas, model, and all tiled-map related macros.\n. I guess I should note, an easy way to test it would be to put the following in your game:\n(def manager (asset-manager))\n(set-asset-manager! manager)\nAnd then in a REPL, you can see what assets have been loaded by the manager with (.getAssetNames manager).\n. The move command isn't part of play-clj; it's a function defined in the beginning of the Movement section of the tutorial. Sorry for the confusion.\n. In the current version, I'm storing the listeners stored at the key :input-listeners in the top-level screen map. However, that's a fairly poor way of surfacing them to the user.\nI just made a change that stores all listeners in the screen map that is handed to the screen functions, in the keys :input-listeners and :ui-listeners. Also, I added macros for modifying each of them, including gesture-detector!.\nTherefore, it should allow you to call the method you mentioned with (gesture-detector! screen :set-long-press-seconds 1). You can see the other macros by looking through core_listeners.clj, as they won't be in the docs until the next release.\nAs for the event handling issue, the current release always returns false because I was being naive. I just changed it so the gesture detector methods return true if you implemented them in your defscreen, and false if not.\nI pushed 0.3.4-SNAPSHOT so try that out and let me know if either of these solutions is problematic. Your input is really helpful because I've barely used some of these listeners so I haven't run into these problems yet.\n. Also FYI I just moved the ui listener macros, such as actor-gesture-listener!, to ui.clj, as it seems like a more logical place. The input-processor! and gesture-detector! macros remain in the play-clj.core namespace.\n. Yep, my code was creating the input listeners every time the screen was redefined, so it was trying to created them on the REPL thread. I added a conditional so it only creates the listeners once (when the screen is first initialized). I pushed a new snapshot so hopefully that fixes it.\n. Did you see any message saying it was downloading anything? You can force it to get the latest one by doing something like rm -r ~/.m2/repository/play-clj/play-clj/0.3.4-SNAPSHOT/.\n. I think you could use filter and map like this:\n(->> (:entities rotated-element)\n     (filter shape?)\n     (map #(shape! % :rotate 0 0 1 rotation))\n     doall)\nI haven't looking into anti-aliasing yet, though I found someone on StackOverflow asking how to enable this for filled shapes. If you find anything that could be implemented in the library I would definitely be willing to add it.\n. Technically dorun is probably more appropriate here, now that I think about it. It does the same thing as doall except it always returns nil, so you tend to use that if you don't care about the return values (which we don't in this case).\n. Come to think of it, it's probably even more idiomatic to use doseq and avoid map completely:\n(doseq [s (filter shape? (:entities rotated-element))]\n  (shape! s :rotate 0 0 1 rotation))\n. FYI, I just pushed a new 0.3.4-SNAPSHOT that adds support for :angle, :origin-x, and :origin-y to shapes. I tried to make it work the same way that it currently does in texture entities.\n. Not having the full game set up could be problematic, but the error here doesn't necessarily indicate that. How are you initializing the shape? Normally if it wanted to be in an OpenGL context, it would explicitly say that in the error.\n. Can you try wrapping your def statements (starting with simple-board) with the on-gl macro? It won't necessarily be pretty, but that should get them to run on the GL thread. The last line calling expect will also need to be in it.\n. You could probably monkey patch play-clj directly rather than making test-specific versions of your entities. For example, if you put the following in the beginning of your test, it should cause anything using shape to use a plain hash map instead:\n(intern 'play-clj.core 'shape* (fn [& args] {}))\n. The previous idea will interfere with your game if you're running your tests in the same process, though. To keep the monkey patching local, you might be able to do it with binding instead:\n(binding [play-clj.core/shape* (fn [& args] {})]\n  ; test code here\n  )\n. Yeah I forgot about that limitation of binding. Can you try with-redefs? I think it works similarly:\n(with-redefs [play-clj.core/shape* (fn [& args] {})]\n  ; test code here\n  )\n. Looks like we just need to get more creative with the mock function. Instead of returning {}, try returning something like {:object (Object.)}. That should at least get shape working, though calls to shape! may fail.\n. Sure! I hope it works.\n. Darn, I guess it doesn't like it because it's trying to run Label methods on the object. I suppose shape works because the method calls don't actually run immediately; they're deferred until it's time to render. I think it's the only entity that works that way. I'll have to keep thinking about this.\n. Do you think it might be possible to start a separate game instance just for your game code? Maybe your test code could import your desktop_launcher.clj and manually run (-main). It will throw an exception if the game is already running, but if you catch errors it shouldn't be a problem: (try (-main) (catch Exception _)). Just a thought.\n. This is actually a recent change in the library. You can still get the value from :keycode, but :key is the preferred way now because it's more consistently named.\n. When did you create the template? Does your project.clj say you're using\n0.3.4?\nOn May 17, 2014 4:09 PM, \"John Conti\" notifications@github.com wrote:\n\nHmmm, maybe the template is pulling the last released version. I couldn't\nget keyboard handling to work until I made the change on my MacOS box.\nThank you for the library. I am enjoying giving it a spin! Looks like very\nnice work.\n\nReply to this email directly or view it on GitHubhttps://github.com/oakes/play-clj/pull/31#issuecomment-43422857\n.\n. Yep, that's the reason. I released 0.3.4 last night and changed the tutorial immediately; sorry for the confusion. I would recommend increasing the play-clj version to 0.3.4 in all three project.clj files so you can get the latest version.\n. Can you explain this further? I did a quick test and my :on-timer function gives me the latest copy of my entity.\n. I've tried setting a timer from a button click and it also worked for me. I cloned the repo and tried it out, but I'm not sure how to determine whether or not it is the initial entities vector. How are you determining that?\n. Also, does the behavior change if you revert to 0.3.4?\n. One thing you can do is check the return value of the remove-timer! function. It should return the timer object when it succeeds, and nil if it fails to find a timer with that id.\n. Can you try running 0.3.6 and let me know if you still experience this?\nOn May 26, 2014 9:48 AM, \"Patrick McElwee\" notifications@github.com wrote:\nI have tried this in Java 6, 7 and 8. I am running play-clj 0.3.5 on Mac\nOS 10.9. Each time I run lein run in desktop, I get an error. In Java 8\nit looks like this:\ndesktop pmm21$ lein run\nCompiling our-first-game.core.desktop-launcher\n\nA fatal error has been detected by the Java Runtime Environment:\n\nSIGSEGV (0xb) at pc=0x00007fff92023acf, pid=26865, tid=39427\n\nJRE version: Java(TM) SE Runtime Environment (8.0_05-b13) (build 1.8.0_05-b13)\nJava VM: Java HotSpot(TM) 64-Bit Server VM (25.5-b02 mixed mode bsd-amd64 compressed oops)\nProblematic frame:\nC  [CoreFoundation+0x12acf]  CFStringGetLength+0xf\n\nFailed to write core dump. Core dumps have been disabled. To enable core dumping, try \"ulimit -c unlimited\" before starting Java again\n\nAn error report file with more information is saved as:\n/Users/pmm21/my_apps/our-first-game/desktop/hs_err_pid26865.log\n\nIf you would like to submit a bug report, please visit:\nhttp://bugreport.sun.com/bugreport/crash.jsp\nThe crash happened outside the Java Virtual Machine in native code.\nSee problematic frame for where to report the bug.\nIn Java 6, the error displays a little differently, as invalid memory\naccess.\nSorry if this is not enough information; I am not experienced debugging\nthis kind of issue with Java.\n\nReply to this email directly or view it on GitHubhttps://github.com/oakes/play-clj/issues/33\n.\n. Does the log file say anything useful? This is not a normal Java error; I've only received these errors when dealing with the native parts of LibGDX like the physics engines. Are you saying this is happening in a project you just created?\n. Yeah the LibGDX versions change along with play-clj versions. If you haven't already, try creating a new project with lein new play-clj hello-world so you are sure you're using the latest LibGDX as well. I'm guessing there is something more fundamentally wrong, though. I've run the latest play-clj on Mac OS 10.9 without problems. The PrivilegedActionException may be a clue.\n. Does this happen when you create and run an uberjar as well? Anything that might narrow it down would be good.\n. If the problem you're referring to is the slight delay that exists after the initial key press, that is just how those events work. They have to include a delay because they need to distinguish between a single key press and a continuous key press.\n\nIf you want to avoid this, don't use any of the :on-key-* events. What you should do is use key-pressed? in your main game logic running on the :on-render function. This is not quite as simple, since you can't just move your ball n number of pixels, since framerate will affect how far it goes.\nWhat you'll need to do is base how far you move it on the delta time, which is passed to the :on-render function as :delta-time. To see an example of this, check out the play-clj-examples repo. I believe super-koalio and dungeon-crawler both work this way.\n. By the way, if you're really using Nightcode 0.1.1, you should update! It's at 0.3.6 now.\nhttps://nightcode.info/\n. Thanks, glad to hear it's being used. Nightmod is at 0.1.2 now, though it\njust has a few tiny fixes.\nOn Jun 17, 2014 2:17 AM, \"Chuckler\" notifications@github.com wrote:\n\nThank you! And Nigthcode was a typo. I'm using nightmod 0.1.1. Great work\nyou're doing there!\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/issues/34#issuecomment-46271080.\n. I made it a macro so it would create the appropriate static field at compile time instead of constantly at runtime. Here are function versions of key-code and key-pressed? you can use instead (you'll need to bring in the play-clj.utils namespace):\n\n```\n(defn key-code*\n  [k]\n  (eval (gdx-field \"Input$Keys\" (key->upper k))))\n(defn key-pressed?\n  [k]\n  (input! :is-key-pressed (key-code k)))\n``\n. Use the input->screen function to convert to screen coordinates.\n. Sure I'll do that.\n. You would have to change the:angle` of the entity inside the bundle. I imagine it would look something like this:\n(assoc-in my-bundle [:entities 0 :angle] 45)\n. Yeah you're right, I should be coercing it into a vector. I just pushed 0.3.8-SNAPSHOT that should do this. Thanks for pointing this out.\n. At the moment, any key in the bundle will override a key in an a bundle's entity. I could change this behavior, but I'm not sure which matches expectations more.\n. I just pushed a new 0.3.8-SNAPSHOT that reverses the precedence, so an internal entity's keys will override its bundle's keys. I think you are right that this is more logical, and seems to be more consistent with things like CSS precedence rules.\n. Yeah I must've not tested correctly before, because I get the same thing. It turns out that my merging was eliminating the entity type, so it didn't know how to draw them. I just pushed a new snapshot that adjusts this, so please let me know how that goes.\n. Either method they describe would require using interop at the moment. Are you currently using an asset manager?\n. Yes, using an asset manager really only requires (set-asset-manager! (asset-manager)). The loading/getting is done automatically in each function that loads an asset. You don't actually need to use it in order to set the filter, but it has other advantages like automatically preventing you from loading the same texture twice.\nAs for the filter, I think you can do this on an individual texture like this:\n(.setFilter (texture! t :get-texture) Texture$TextureFilter/Linear)\n. Strange error message, but one mistake I made is that setFilter has two arguments, not one. So try this out:\n(.setFilter (texture! puck-texture :get-texture) Texture$TextureFilter/Linear Texture$TextureFilter/Linear)\n. Someone asked me a similar question and I posted some code showing how you can store entities in a map. Let me know if that works well for you.\n. I will close this for now but let me know if the solution I linked to doesn't work for you.\n. Yes, texture wraps TextureRegion because that is it must be in order to be drawn. However, you can get the underlying Texture object like this: (texture! (texture \"player.png\") :get-texture)\n. Technically it's an internal function but you can use it if you need to. Why do you need to make a custom rendering function?\n. Is there a reason you don't just use the built-in tiled map functionality? It allows you to change cells at runtime.\n. I think it would be faster, but I don't know by how much. I don't know where the performance issue is with your current code. You should definitely make sure you have your sprites in a single sprite sheet, if you aren't doing that already.\n. Try :set-v-sync. Looks like the docs are wrong.\nOn Jun 30, 2014 11:49 AM, \"Yury Smolsky\" notifications@github.com wrote:\n\n(graphics! :set-vsync false)\ncauses this:\nException in thread \"LWJGL Application\"\njava.lang.IllegalArgumentException: No matching method found: setVsync for\nclass com.badlogic.gdx.backends.lwjgl.LwjglGraphics\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/issues/40.\n. Thanks for pointing this out. I fixed it and other incorrect keywords on the doc site.\n. Not at the moment, no. LibGDX uses a Java->JavaScript source code converter to accomplish this, so it won't work with Clojure. I am still highly interested in finding a way to do it, but it won't be easy.\n. My ideal scenario would be to convert JVM bytecode to JavaScript, so it would work with any JVM language. I plan on exploring this more in the near future.\n. Interesting, I'll look into this!\n. @PeggsDev I think at this point it would be better to use clojure.spec than Schema, since it will be built into the next release of Clojure. You are very welcome to work on that if you're interested. I will absolutely accept PRs for adding specs.\n. Out of curiosity, what made you decide the built-in entity system wasn't enough? I always felt like a vector of maps was the simplest way to do it, and was really approachable for beginners. However, I know that some people want to use third-party entity systems; I'm just aiming to keep the default system as simple as possible.\n. One aspect of the current design is that you can separate different parts of your game into their own screens using defscreen. For an inventory UI, I would definitely put it on a separate screen and display it on top of the main screen. This would also cleanly separate the entities in the UI from the entities in the game itself.\n\nI would say a simple \"out of the box\" experience is the primary design goal, because I'm actually using play-clj to teach programming. If there are ways I could implement some of these features without compromising that, I'm open to it. I plan on releasing 0.3.9 pretty soon though, so changes like this would have to wait for the next release.\n. Yeah if you have a more concrete suggestion please let me know.\n. Can you show me exactly what your core.clj looks like? I made a new project and modified it to look like this without any problems:\n``` clojure\n(ns hello-world.core\n  (:require [play-clj.core :refer :all]\n            [play-clj.g2d :refer :all]))\n(set-asset-manager! (asset-manager))\n(defscreen main-screen\n  :on-show\n  (fn [screen entities]\n    (update! screen :renderer (stage))\n    (texture \"Clojure-icon.gif\"))\n:on-render\n  (fn [screen entities]\n    (clear!)\n    (render! screen entities)))\n(defgame hello-world\n  :on-create\n  (fn [this]\n    (set-screen! this main-screen)))\n```\n. Yep that's right, you need to run the game to initialize the framework.\n. Yeah, I'm not the greatest at web design. I think the best solution would be to use an iframe for the sidebar, even though they are kinda frowned upon.\n. Fixed via https://github.com/oakes/play-clj/pull/65\n. What OS are you on? I made a timer and the timer resumed as expected. Regarding the docs, it looks like you are right, the libGDX docs lied!\n. I tried the project, and it looks like it consistently takes 4 seconds (the interval time you set) for the timer to fire after bringing the window back in focus. I don't see any indication that it is based on how long the screen was paused.\nIt is great to hear you are looking to use it for Ludum Dare! I hope it works well for you, as I have been hoping to see it used in competitions like that. I'll be busy teaching Clojure games to a classroom this weekend so unfortunately I probably won't have time to participate myself.\nI don't see any major issues with your code. I've never used memoize to load an asset, but that should work. One thing I haven't yet added to the tutorial is that you can set a global asset manager by doing (set-asset-manager! (asset-manager)) at the top level. It prevents assets like the lion image from being loaded multiple times, no matter how many times you call (texture \"lion.png\").\n. I think it is normal, though I don't see it documented anywhere. How would you prefer it work? If you want it to fire right when it resumes, you could always manually call it in the :on-resume function like this: (run! main-screen :on-timer :id :spawn-lion)\n. I'll close this for now since it seems to be how libGDX designed it, but if you notice any irregularities then please let me know.\n. What OS are you on? I noticed a problem on Windows and I believe it is a libGDX bug.\n. Yep, this is the same bug I ran into with Nightmod. I eventually solved it by bringing the Timer.java file into my project and commenting out two lines. The issue was reported to libGDX, but it was closed because there wasn't a reproduce-able test case. I will have to try creating one in Java so we can get this resolved.\nThe reason I am using reflection to create the timer is that the class contains static initializers that prevent it from being directly imported into Clojure. This is because Clojure currently initializes classes right when you import them, causing those static initializers to run at compile time. If this patch is merged, it will be fixed in Clojure 1.7.\n. Did you experience this with your LD game, or something else? I have only experienced this with Nightmod, so it would be useful to see another example to help me write a Java test case.\n. I have successfully created a test case and reported it to the libGDX project.\n. My fix was just merged into libGDX so this bug should be fixed in the next version.\n. Right, :on-pause is called on desktops as well. I was incorrect about it only being on mobile.\n. Calling :on-pause when the window is unfocused is intended behavior, I believe. If the libGDX docs say it's mobile only, then I think that's a doc issue.\n. Yeah definitely, if there is a mistake in their JavaDoc.\nOn Oct 29, 2014 9:31 AM, \"edesdan\" notifications@github.com wrote:\n\nAh ok , do you think I can open an issue on libgdx project for that?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/issues/46#issuecomment-60923591.\n. Were you planning on calling setColor for one entity, and then immediately change it back before the next entity is drawn? If so, wouldn't that require two hooks (before and after the entity is drawn)?\n. I'll try to think of a good way of doing this, but in the meantime you should be able to make your own multimethod like this:\n\nclojure\n(defmethod play-clj.core/draw! Stage\n  [{:keys [^Stage renderer] :as screen} entities]\n  (let [^Batch batch (.getBatch renderer)]\n    (.begin batch)\n    (doseq [entity entities]\n      (some-> (:before-draw entity) (apply [batch]))\n      (e/draw-entity! entity screen batch)\n      (some-> (:after-draw entity) (apply [batch])))\n    (.end batch))\n  entities)\nI haven't tried it, but I assume this would let you add the hooks to a given entity by assoc'ing functions to an entity, like this:\nclojure\n(assoc entity :before-draw #(.setColor % (color 1 1 1 0.5)))\n. Correct; let me know if it doesn't work for you.\n. The screen map is immutable, so when you call update! it returns a new map with the added values. Try catching the return value like this:\nclojure\n(let [screen (update! screen ...)]\n  (cell/create-cell-entity! screen))\n. Sorry about that, I just added them to the docstring so they will appear in the generated docs next time I update them. I did actually have :on-end-contact documented here, but the other two aren't. Let me know if you have other issues. Thanks!\n. Thanks!\n. I deployed a new 0.4.0-SNAPSHOT with this fix, FYI.\n. Sounds good; how about we add another arity to pixmap*? We can't really work it into the pixmap macro in the current design, but it would be easy to support (pixmap* width height format).\n. I added the new arity along with pixmap-format and pushed it as 0.4.1-SNAPSHOT. I haven't used pixmaps much so I don't have any examples. Is there a reason you can't just create a texture from it and render that?\n. No problem!\n. We could, though technically that would make it side-effecting. The texture macro creates a TextureRegion object from the Texture object, so it's a bit different. You should be able to do it like this:\nclojure\n(doto (pixmap* 100 100 (pixmap-format :RGBA8888))\n  (pixmap! :set-color (color :red))\n  (pixmap! :fill-circle 50 50 50))\nRegarding the keyword issue, that will be documented when the next release happens. My documentation generator should display the case correctly; see, for example, the page for shape-type.\n. This is not a bug, but I understand why it is confusing. In libGDX, input coordinates are y-down, while screen coordinates are y-up. You can simply use (game :point-x) and (game :point-y) instead of using the coordinates passed to the mouse function. Also, you can use screen->input and input->screen to convert between input and screen coordinates.\n. Thanks!\n. Thanks. I'll keep this open for a little while in case others run into it.\n. Depending on what you're trying to reload, you may need to restart the game. You can do this by typing the following:\n(on-gl (set-screen! hello-world main-screen))\nCurrently, due to how it is implemented, screen functions like :on-key-down that you add after starting your game will not be recognized until it is restarted using that command. Modifications to existing screen functions don't require this, however. Let me know if there are any other issues.\n. Before calling set-screen!, did you reload your namespace?\n. Well in-ns is just switching to the namespace, not reloading it. I'm not sure how you reload a namespace with emacs, but in Nightcode there is a \"Reload\" button that does this.\n. Looks really good, thanks. The only thing I hesitate on is some of the text coloring. It seems like option names should be blue, since that's how keywords are normally displayed in text editors. Perhaps headers and links should both remain white so they can be neutral and less imposing. What do you think?\nAlso, can the background for items like :cpy in the screenshot be fixed? It seems to not fill the line if there isn't a description.\n. Thanks, it looks really great. I also updated highlight.js and hightlight.css so the keywords are blue in the code blocks as well. The style is now live on the docs site.\n. Looks like you have an extra set of brackets. Try this:\nclojure\n(table [(label \"HI\" (color :red))]\n  :align (align :center))\n. If you want it to fill the screen, try adding :set-fill-parent true after the align stuff.\n. Great, no problem.\n. Hey, thanks for tracking that down. I noticed the problem but was too lazy to do anything about it. I will see if I can add this somewhere logical in play-clj.\n. I finally got around to trying it out. The code you posted looks like this if you use play-clj's macros:\nclojure\n(gl! :gl-tex-parameterf (gl :gl-texture-2d) (gl :gl-texture-min-filter) (gl :gl-nearest))\n(gl! :gl-tex-parameterf (gl :gl-texture-2d) (gl :gl-texture-mag-filter) (gl :gl-nearest))\nSo far I haven't noticed any difference, but maybe I'm calling it in the wrong place. Do you know where exactly it is supposed to be called? Should it be called once, or every frame?\n. The :on-ui-changed event is the correct one to use; it is based on ChangeListener's \"changed\" method. The :on-ui-clicked event comes from ClickListener's \"clicked\" method. I wrapped it for the sake of completeness, but I'm not sure what its behavior is supposed to be.\n. Thanks very much. At some point I'll just point it somewhere else because this isn't the first time Wikipedia has broken that link...\n. Yeah it isn't really meant to be used directly. However, you can see the source for it.\n. I think the main reason for those spaces is because Nightcode automatically adds them. I think it's probably best to keep it that way unless we can change the behavior in it as well.\n. Thanks!\n. Sorry for taking so long to check this out. Looks like an interesting solution to #45. The downside is that existing links will be broken, and the new links will now depend on JavaScript (I use NoScript sometimes). Not sure if that is worth the upside of fixing the scroll position problem, since that can be solved by opening doc pages in separate tabs.\n. I made a few touch-ups and now I'm happy with it. Instead of a separate \"Frames\" link, I just linkified the header. I also improved the sidebar scroller. Thanks for your work.\n. Can you try updating Leiningen? I think there was a problem with Leiningen 2.5.0 that occurred when lein-ancient was in your profile. Just my first guess.\n. Thanks! I added up! as well.\n. How about we add a new arity to direction!? We could allow passing a single argument, which is interpreted as a vector-3.\n. Does the lookAt function that takes a vector not work for you?\n. I'm not sure why I chose to use lookAt there. I think we could just change it to modify the direction vector directly.\n. Ah, I just tried it on my 3d examples and it does seem to break them, so I'd rather avoid that. Have you tried calling (.normalizeUp (:camera screen)) before calling direction!? The docs seem to indicate you may need to.\n. I added a new arity to direction!, but in a different way. It takes an optional fourth arg, a boolean value that I called look-at? for lack of a better term. If you set it to false, it will just set the direction vector as you were looking for. Hopefully that works for you. I pushed 0.4.5-SNAPSHOT so you can try it.\n. That is a good idea. This is now fixed via f74c5d7820f5ddd214a8894b724580bba8a12837.\n. Fixed in eabdaa3339ca3da7d715f9bd37d354be0feacfa7. I pushed 0.4.5-SNAPSHOT so you can try the fix for yourself.\n. No problem, there's nothing else to do on a Saturday night, hah.\n. This is because (label \"Test Label\" (skin \"uiskin.json\")) doesn't actually return a Label, it returns as LabelEntity. You can fix this by pulling the underlying Java object out of the entity like this:\nclojure\n(dialog! popup :text (:object content))\n. I don't currently use the camera built into the stage, so you must create it explicitly. As for the issue regarding table contents disappearing, I am confused. I cloned your project and ran it, and I see the word \"Title\". I do not see anything appear and then disappear. Perhaps if you can narrow it down to a smaller amount of code, it would help. Right now, there is a lot of stuff going on.\n. Thanks for the follow up.\n. Thanks!\n. Wow! I was actually aware about dispose being manual, but I thought it didn't actually do anything unless you implemented the method yourself. Anyway, thanks.\n. Ah darn, I'll revert then. I wonder if the memory leak is caused by my use\nof intern. I heard that it can lead to leaks.\nOn Mar 7, 2015 11:59 AM, \"Bryce\" notifications@github.com wrote:\n\nYou know what, I actually take that back. I don't think that's actually\nfreeing up memory like I thought it was. I think maybe top wasn't\nupdating. :(\n\nZach Oakes mailto:notifications@github.com\nMarch 7, 2015 at 8:54 AM\nWow! I was actually aware about |dispose| being manual, but I thought\nit didn't actually do anything unless you implemented the method\nyourself. Anyway, thanks.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/pull/74#issuecomment-77697873.\n\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/pull/74#issuecomment-77698154.\n. If you aren't using an asset manager, that could cause a leak. However, the\nleak is even happening in Nightmod, which uses an asset manager and clears\nall assets when you restart a game.\n\nOn Sat, Mar 7, 2015 at 12:06 PM, Bryce notifications@github.com wrote:\n\nLooking at this further, it seems like you are still in charge of\ndisposing of textures and the like that are not in use (not just the\nscreen). Wouldn't this cause leaks?\nI'm thinking that the dispose implementation should delegate to each\nscreen, to allow each to discard of any textures such.\n\nZach Oakes mailto:notifications@github.com\nMarch 7, 2015 at 9:02 AM\nAh darn, I'll revert then. I wonder if the memory leak is caused by my\nuse\nof intern. I heard that it can lead to leaks.\nOn Mar 7, 2015 11:59 AM, \"Bryce\" notifications@github.com wrote:\n\nYou know what, I actually take that back. I don't think that's actually\nfreeing up memory like I thought it was. I think maybe top wasn't\nupdating. :(\n\nZach Oakes mailto:notifications@github.com\nMarch 7, 2015 at 8:54 AM\nWow! I was actually aware about |dispose| being manual, but I thought\nit didn't actually do anything unless you implemented the method\nyourself. Anyway, thanks.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/pull/74#issuecomment-77697873.\n\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/pull/74#issuecomment-77698154.\n\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/pull/74#issuecomment-77698321.\n\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/pull/74#issuecomment-77698498.\n. Hi, I'll look into this soon. By the way, there is an error that initially appears in your game because the update! call doesn't directly mutate the screen map; it just returns a new one. So, in the :on-show function for status-screen and spider-screen, you need to do this:\n\nclojure\n(let [screen (update! screen :camera (orthographic) :renderer (stage))]\n  ; rest of code here\n  )\n. Correct me if I'm wrong, but it looks like this problem is solved by your PR.\n. Hi, I just pushed a new version of play-clj. I updated the Nightmod repo to use it, and I noticed your game has an error now. In the create-entity-from-object-layer function, the getRectangle call is failing because it thinks it's a TextureMapObject instead of a RectangleMapObject. I haven't had time to look into it, but I wanted to alert you to see if it's something in your code or in play-clj. It uses a new version of libGDX so perhaps something changed.\n. Please try the latest commit. It attempts to fix the issue by checking if the screen exists already in the input multiplexer. Your version looked fine but I wanted to minimize the changes to prevent unintentional breakages.\n. Does this problem exist in your change?\nOn Thu, Mar 12, 2015 at 10:34 AM, Felix Andrews notifications@github.com\nwrote:\n\nI just noticed that, while this commit fixed the ui actors which is great,\nit did something to on-touch-down. Specifically (at least in my game) it\nnow only fires in the outermost 1 or 2 pixels around the stage. Which\nsuggests that it may be masked by the ui touch down listener - though i\nhaven't looked into it.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/pull/76#issuecomment-78491177.\n. On second thought, your version seems pretty safe, and doesn't do any unnecessary removals of actors. So, I'll use it instead.\n. Thanks! I don't think we can assume that tiled-map-layer accepts a string, because people may be passing an index to it. Other than that it looks great.\n. OK that sounds good, can you send a PR?\nOn Mar 16, 2015 9:41 AM, \"Felix Andrews\" notifications@github.com wrote:\nThat reflection on .get is a major hit to performance because it is\ncalled so often - on every render cycle many times to check valid movement\nof entities.\nThe following could avoid the reflection:\n(let [layers (-> ^BatchTiledMapRenderer (u/get-obj screen :renderer)\n                     .getMap\n                     .getLayers)]\n      (if (number? layer)\n        (.get layers (int layer))\n        (.get layers (str layer)))))))\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/pull/77#issuecomment-81669388.\n. Thanks!\n. Thanks!\n. Yeah I knew this might be an issue, but I was hoping it wasn't a common thing. The workaround is to use (render! screen) (draw! screen entities) separately instead of (render! screen entities). I will try to find a better solution in the next version, so the second method works as well.\n\nI tried skipping Stage's .draw but found that it causes problems. You can see this by making that change and testing the ui-gallery example app.\n. I have released 0.4.6 which reverts the change in question.\n. Thanks.\n. Are you sure? In a REPL, I get this:\nclojure\n=> (rectangle! (rectangle 0 0 10 10) :contains (rectangle 5 5 10 10))\nfalse\n. Oh yeah that won't work. The rectangle macro will always return the rectangle object you are creating, so the return value of any methods you embed in it will be ignored.\n. Looks like it's just a typo. It should be \"play-clj\", not \"paly-clj\" =)\n. Let me know if you have other problems.\n. I've updated the template to work with the latest version of lein-droid.\n. Fixed, thanks!\n. Yeah that is known behavior. I think it has to do with the fact that there are multiple threads running and the REPL thread is destroyed when the window is closed.\n. @noffle Try (app! :exit)\n. Oh, I didn't realize you were trying to keep the REPL alive. I have not found a way to do that. Is there a reason you want to? There is a way to restart the game if you want to start with fresh state.\n. What version of play-clj are you using? Are how are you restarting the REPL?\n. Don't run the main function more than once in the REPL. Unfortunately libGDX doesn't allow this to work.\n. Let me know if you have other questions about this.\n. Hello. My library definitely has more macros than most. The reason is that I wanted to provide a convenient syntax for using libGDX classes. For example, the following code...\nclojure\n(texture \"clojure.png\"\n  :flip true false\n  :set-region 0 0 100 100)\n...is transformed at compile-time to this:\nclojure\n(let [entity (texture* \"clojure.png\")]\n  (doto ^TextureRegion (:object entity)\n    (.flip true false)\n    (.setRegion 0 0 100 100))\n  entity)\nIt makes it a lot more terse and readable. I wanted to provide this functionality for more than just the TextureRegion class, so I made a separate macro for each class that I wanted this functionality for.\n. Thanks!\n. Yeah there's a pretty long history of timer-related issues in libGDX. The particular issue you mentioned about its behavior when calling set-screen! is new to me, though. I'll look into it and see if we can do some kind of workaround, but since libGDX is a Java framework I imagine their design doesn't account for calling methods from a REPL =)\n. Yeah that was definitely an oversight. I just fixed it and pushed 1.1.0-SNAPSHOT so you can try it out.\n. Labels and other play-clj.ui entities need to be added to the stage in order to be rendered. This is done automatically after any screen function is run, but only if you actually return the entities. Since you are not returning the label entity, it never has a chance to get added to the stage. The reason this doesn't happen with texture entities is that they use a completely different part of libGDX and doesn't require being added to the stage. Is there a reason you don't want to return your entities at the end of the function? That's what the return value is designed for.\n. The entities vector is only really meant to hold entities. If you just want to store arbitrary data, I would suggest putting it in the screen map using update!. It's not just for your renderer or camera; for example, in dungeon crawler, I store a custom cursor there.\nThere are certainly times when you may want to temporarily remove entities. You can do that by simply removing them from the entities vector. You can always temporarily store them in the screen map so you can add them back to the entities vector later. If this system proves inflexible, you can also avoid the render! function entirely and create your own loop in which you draw the entities yourself.\n. Correct, it requires compile-time manipulation to turn it into the right static field. Could you do something like (def white-color (color :white)) instead?\n. It may be possible to do what we did with key-code and turn it into a function by using eval. I'll look into it when I have the time.. Color is now a function: d4ff20ef086e4533d1d147fba885cf448bc3c1fa. Merged, thanks! I Added a glDisable call in case it matters -- not user if it does.\n. I don't think I can merge this because it breaks many existing projects, like this one.\n. Thanks so much! And I apologize for taking so long to merge. I've been very distracted lately.\n. Hi, sorry for the delayed response. Do you still recommend this change, or would you prefer keeping it out since you closed the PR?\n. Just fixed in version 1.1.1. Please update your project.clj and let me know if you still see this issue. Thanks!\n. Fixed, thanks.\n. The key-code macro is just meant to be a convenient way to get the static fields in com.badlogic.gdx.Input$Keys. This is important since those numerical values are what you get from the :on-key-down event. See, for example, right here.\nThis change would break that code and others like it. I'm not clear on what the purpose would be of getting an unevaluated symbol from key-code. What would you do with it?\n. Perhaps it would work if you ran the result through eval. That would evaluate the symbol into a number. I'll try it out.\n. I added eval so it continues to behave the same way. I also made key-pressed? and button-pressed? into functions as well. Thanks for your help!\n. Looks pretty good! Thanks for working on this. Are you planning on adding more?. You may also use the key-pressed function, which you would normally call inside the :on-render event.. Is there anything you need to do to make sure that namespace is AOT compiled? That's the only thing I can think of, as I am not a Cider user.. Thank you!. ",
    "shaharz": "I just tried re-evaluating a defscreen after changing the on-key-down handler (in the minicraft example, not that it should matter) and that seemed to work ok.\nInterestingly, evaluating any of the project's clj files didn't open a window. I had to evaluate a call to minicraft.core.desktop-launcher/-main for the game to start.\n. ",
    "Misophistful": "Thanks, it's working. In fact, I think that REPL development was working all along - the problem was actually me not using my brain. I was following along with the tutorial, but instead of changing :on-key-down I thought I'd be \"smart\" and try changing something visible instead; the size of the image. The problem was that the image is defined in :on-show and not re-evaluated every frame. D'oh!\n. Thanks for your lightning quick response.\nI tried 0.2.3-SNAPSHOT, but I'm seeing the same behaviour as before: i.e. adding a new function to defscreen requires a game restart to take effect.\nI'm trying to add this :on-timer function (with the associated add-timer! in :on-show) whilst in a REPL session:\nclojure\n  :on-timer\n  (fn [screen entities]\n    (case (:id screen)\n      (conj entities (spawn-an-apple)))))\nI thought there might be something special with timers stopping this working, so I also tried adding a plain old :on-resize function, but got the same result - a restart was required.\nHere's my project.clj for you to double-check that I'm pulling the SNAPSHOT in correctly:\n``` clojure\n(defproject apples \"0.0.1-SNAPSHOT\"\n  :description \"FIXME: write description\"\n:dependencies [[com.badlogicgames.gdx/gdx \"0.9.9\"]\n                 [com.badlogicgames.gdx/gdx-backend-lwjgl \"0.9.9\"]\n                 [com.badlogicgames.gdx/gdx-platform \"0.9.9\"\n                  :classifier \"natives-desktop\"]\n                 [org.clojure/clojure \"1.5.1\"]\n                 [play-clj \"0.2.3-SNAPSHOT\"]]\n  :repositories [[\"sonatype\"\n                  \"https://oss.sonatype.org/content/repositories/snapshots/\"]]\n:source-paths [\"src\" \"src-common\"]\n  :javac-options [\"-target\" \"1.6\" \"-source\" \"1.6\" \"-Xlint:-options\"]\n  :aot [apples.core.desktop-launcher]\n  :main apples.core.desktop-launcher)\n```\n. Thanks Zach, that works like a charm!\n. I like the idea of helper conversion functions, but I'm a little confused by the names.\nIn dungeon-crawler you're getting x and y from screen (destructuring them in :on-mouse-moved), but then renaming them to window-x and window-y in get-entity-at-cursor and then passing them to window->screen. I guess that my confusion comes from getting the values from screen but them being in \"window-space\", and then converting them to \"screen\",  which I guess means \"screen-space\"?\nHow about renaming the screen vars to something like input-x and input-y, to clarify that they're in \"input-space\"? Then you could rename the conversion functions to input->screen and screen->input, which has a few benefits; it matches the libGDX naming more closely, it hopefully won't confuse mobile developers (who don't really have a \"window\"), and perhaps makes the distinction between the two clearer.\nWhat do you think?\n. I'm really looking forward to 0.3.0 - thanks Zach!\n. float-array works, I don't know why I didn't think to try it. Thanks!\nThough, now I'm getting a GdxRuntimeException:\njava\n\"com.badlogic.gdx.utils.GdxRuntimeException: Must call begin(ShapeType.Line)\"\n\"\\tat com.badlogic.gdx.graphics.glutils.ShapeRenderer.polygon(ShapeRenderer.java:1030)\"\n\"\\tat com.badlogic.gdx.graphics.glutils.ShapeRenderer.polygon(ShapeRenderer.java:1023)\"\n\"\\tat elemental.hexagon$create_hexagon$fn__8103.invoke(/Users/jamtru/Projects/clojure/elemental/desktop/src-common/elemental/hexagon.clj:16)\"\n\"\\tat play_clj.entities.ShapeEntity.draw_entity_BANG_(entities.clj:79)\"\n\"\\tat play_clj.core$fn__535.invoke(core_graphics.clj:458)\"\n\"\\tat clojure.lang.MultiFn.invoke(MultiFn.java:231)\"\n\"\\tat play_clj.core$render_BANG_.invoke(core_graphics.clj:518)\"\n\"\\tat elemental.core$eval133$fn__158.invoke(core.clj:20)\"\n\"\\tat clojure.lang.Var.invoke(Var.java:383)\"\n\"\\tat play_clj.core$defscreen_STAR_$execute_fn_BANG___827$G__829__830.invoke(core.clj:57)\"\n\"\\tat elemental.core$eval222$fn__223.invoke(core.clj:54)\"\n\"\\tat play_clj.core$defscreen_STAR_$execute_fn_BANG___827.doInvoke(core.clj:58)\"\n\"\\tat clojure.lang.RestFn.invoke(RestFn.java:439)\"\n\"\\tat play_clj.core$defscreen_STAR_$fn__841.invoke(core.clj:85)\"\n\"\\tat clojure.lang.AFn.applyToHelper(AFn.java:154)\"\n\"\\tat clojure.lang.AFn.applyTo(AFn.java:144)\"\n\"\\tat clojure.core$apply.invoke(core.clj:624)\"\n\"\\tat play_clj.core$set_screen_BANG_$run_fn_BANG___894.doInvoke(core.clj:135)\"\n\"\\tat clojure.lang.RestFn.invoke(RestFn.java:423)\"\n\"\\tat play_clj.core$set_screen_BANG_$reify__902.render(core.clj:138)\"\n\"\\tat com.badlogic.gdx.Game.render(Game.java:46)\"\n\"\\tat play_clj.core.proxy$com.badlogic.gdx.Game$ff19274a.render(Unknown Source)\"\n\"\\tat com.badlogic.gdx.backends.lwjgl.LwjglApplication.mainLoop(LwjglApplication.java:206)\"\n\"\\tat com.badlogic.gdx.backends.lwjgl.LwjglApplication$1.run(LwjglApplication.java:114)\"\nHere's my code, if it helps:\nclojure\n(defn create-hexagon [coords]\n  (let [[x y] (c/coords->xy coords (game :width) (game :height))]\n    (-> (shape :filled\n               :set-color (color :dark-gray)\n               :polygon (float-array (flatten (for [vertex-index (range 6)]\n                                               (calculate-vertex x y 100 vertex-index)))))\n        (assoc :hexagon? true))))\n. Switching to :line works, and they'll do for now until I figure out how to create filled ones using triangles.\nThanks again for your help.\n. bundle is exactly what I need, thanks!\n. If I create a new project using lein new play-clj label-test then it works perfectly, with the label above the shape.\nIf I edit my existing project to use your main-screen code, then the shape obscures the label. I agree with you that it seems like a version issue, but my project.clj is correctly pointing to [play-clj \"0.3.1\"]. Plus, I also tried 0.3.2-SNAPSHOT, but with the same result.\nI'm developing in Light Table, do you think could it be keeping an old version around somehow?\n. lein clean did the trick. You're a scholar and a gentleman!\n. clojure\n(-> (shape :filled\n               :set-color colour\n               :circle 0 0 radius\n               :triangle tri-x1 tri-y1 tri-x2 tri-y2 tri-x3 tri-y3)\n        (shape! :rotate 0 0 1 180))\nCauses the shape to disappear. Did you mean something else?\n. doto works perfectly.\nThank you so much for your fantastically speedy responses to my questions. You really go above and beyond.\n. Both fixes work perfectly, thanks!\nAlthough now I get the following exception when I re-evaluate core.clj:\njava\njava.lang.RuntimeException: No OpenGL context found in the current thread.\n          GLContext.java:124 org.lwjgl.opengl.GLContext.getCapabilities\n              GL11.java:3261 org.lwjgl.opengl.GL11.glViewport\n          LwjglGL20.java:728 com.badlogic.gdx.backends.lwjgl.LwjglGL20.glViewport\n            Viewport.java:67 com.badlogic.gdx.utils.viewport.Viewport.update\n     ScalingViewport.java:62 com.badlogic.gdx.utils.viewport.ScalingViewport.update\n      core_listeners.clj:246 play-clj.core/update-stage!\n      core_listeners.clj:267 play-clj.core/update-screen!\n                 core.clj:76 play-clj.core/defscreen*[fn]\n                ARef.java:81 clojure.lang.ARef.notifyWatches\n                Atom.java:69 clojure.lang.Atom.swap\n               core.clj:2234 clojure.core/swap!\n                 core.clj:73 play-clj.core/defscreen*\n/Users/jamtru/Projects/clojure/elemental/desktop/src-common/elemental/core.clj:10 elemental.core/eval6878\n          Compiler.java:6703 clojure.lang.Compiler.eval\n          Compiler.java:6666 clojure.lang.Compiler.eval\n               core.clj:2927 clojure.core/eval\n                 eval.clj:77 lighttable.nrepl.eval/->result\n                AFn.java:156 clojure.lang.AFn.applyToHelper\n                AFn.java:144 clojure.lang.AFn.applyTo\n                core.clj:626 clojure.core/apply\n               core.clj:2468 clojure.core/partial[fn]\n             RestFn.java:408 clojure.lang.RestFn.invoke\n               core.clj:2557 clojure.core/map[fn]\n             LazySeq.java:40 clojure.lang.LazySeq.sval\n             LazySeq.java:49 clojure.lang.LazySeq.seq\n                 RT.java:484 clojure.lang.RT.seq\n                core.clj:133 clojure.core/seq\n               core.clj:2595 clojure.core/filter[fn]\n             LazySeq.java:40 clojure.lang.LazySeq.sval\n             LazySeq.java:49 clojure.lang.LazySeq.seq\n                 RT.java:484 clojure.lang.RT.seq\n                core.clj:133 clojure.core/seq\n               core.clj:2855 clojure.core/dorun\n               core.clj:2871 clojure.core/doall\n                eval.clj:126 lighttable.nrepl.eval/eval-clj\n             RestFn.java:442 clojure.lang.RestFn.invoke\n                eval.clj:192 lighttable.nrepl.eval/eval2580[fn]\n                AFn.java:152 clojure.lang.AFn.applyToHelper\n                AFn.java:144 clojure.lang.AFn.applyTo\n                core.clj:624 clojure.core/apply\n               core.clj:1862 clojure.core/with-bindings*\n             RestFn.java:425 clojure.lang.RestFn.invoke\n                eval.clj:177 lighttable.nrepl.eval/eval2580[fn]\n                eval.clj:176 lighttable.nrepl.eval/eval2580[fn]\n            MultiFn.java:227 clojure.lang.MultiFn.invoke\n                 core.clj:98 lighttable.nrepl.core/queued[fn]\n               core.clj:2402 clojure.core/comp[fn]\n  interruptible_eval.clj:138 clojure.tools.nrepl.middleware.interruptible-eval/run-next[fn]\n                 AFn.java:22 clojure.lang.AFn.run\n ThreadPoolExecutor.java:895 java.util.concurrent.ThreadPoolExecutor$Worker.runTask\n ThreadPoolExecutor.java:918 java.util.concurrent.ThreadPoolExecutor$Worker.run\n             Thread.java:695 java.lang.Thread.run\nCould it be something to do with your recent changes?\n. I'm still getting the same exception, even after a lein clean. Is there something else I need to do to make sure I'm downloading the latest snapshot?\n. Yep, that worked. Thanks for the fix.\n. I hadn't come across doall before, and your code works perfectly. Thanks!\nAlso, thanks for the AA link - maybe I'll need to switch away from shapes to using textures or shaders if they're the best way to get the edges looking nice.\n. I'm not used to all these side-effect handling functions, but they're very useful when you need them. Thank you so much for helping me improve my code, and my understanding of Clojure.\n. :angle has simplified my rotation code significantly, thanks!\n. Interestingly, I just noticed that when I evaluate the test without having the game launched I get the exception I posted above, and when I evaluate the test with the game launched I get the following No OpenGL context found exception.\njava\nclojure.lang.Compiler$CompilerException: java.lang.RuntimeException: No OpenGL context found in the current thread., compiling:(/Users/jamtru/Projects/clojure/elemental/desktop/test/elemental/movement_test.clj:17:35)\n               Compiler.java:3558 clojure.lang.Compiler$InvokeExpr.eval\n               Compiler.java:3552 clojure.lang.Compiler$InvokeExpr.eval\n                Compiler.java:417 clojure.lang.Compiler$DefExpr.eval\n               Compiler.java:6708 clojure.lang.Compiler.eval\n               Compiler.java:6666 clojure.lang.Compiler.eval\n                    core.clj:2927 clojure.core/eval\n                      eval.clj:77 lighttable.nrepl.eval/->result\n                     AFn.java:156 clojure.lang.AFn.applyToHelper\n                     AFn.java:144 clojure.lang.AFn.applyTo\n                     core.clj:626 clojure.core/apply\n                    core.clj:2468 clojure.core/partial[fn]\n                  RestFn.java:408 clojure.lang.RestFn.invoke\n                    core.clj:2559 clojure.core/map[fn]\n                  LazySeq.java:40 clojure.lang.LazySeq.sval\n                  LazySeq.java:49 clojure.lang.LazySeq.seq\n                      RT.java:484 clojure.lang.RT.seq\n                     core.clj:133 clojure.core/seq\n                    core.clj:2595 clojure.core/filter[fn]\n                  LazySeq.java:40 clojure.lang.LazySeq.sval\n                  LazySeq.java:49 clojure.lang.LazySeq.seq\n                     Cons.java:39 clojure.lang.Cons.next\n                      RT.java:598 clojure.lang.RT.next\n                      core.clj:64 clojure.core/next\n                    core.clj:2856 clojure.core/dorun\n                    core.clj:2871 clojure.core/doall\n                     eval.clj:126 lighttable.nrepl.eval/eval-clj\n                  RestFn.java:442 clojure.lang.RestFn.invoke\n                     eval.clj:192 lighttable.nrepl.eval/eval2800[fn]\n                     AFn.java:152 clojure.lang.AFn.applyToHelper\n                     AFn.java:144 clojure.lang.AFn.applyTo\n                     core.clj:624 clojure.core/apply\n                    core.clj:1862 clojure.core/with-bindings*\n                  RestFn.java:425 clojure.lang.RestFn.invoke\n                     eval.clj:177 lighttable.nrepl.eval/eval2800[fn]\n                     eval.clj:176 lighttable.nrepl.eval/eval2800[fn]\n                 MultiFn.java:227 clojure.lang.MultiFn.invoke\n                      core.clj:98 lighttable.nrepl.core/queued[fn]\n                    core.clj:2402 clojure.core/comp[fn]\n       interruptible_eval.clj:138 clojure.tools.nrepl.middleware.interruptible-eval/run-next[fn]\n                      AFn.java:22 clojure.lang.AFn.run\n      ThreadPoolExecutor.java:895 java.util.concurrent.ThreadPoolExecutor$Worker.runTask\n      ThreadPoolExecutor.java:918 java.util.concurrent.ThreadPoolExecutor$Worker.run\n                  Thread.java:695 java.lang.Thread.run\nCaused by: java.lang.RuntimeException: No OpenGL context found in the current thread.\n               GLContext.java:124 org.lwjgl.opengl.GLContext.getCapabilities\n                    GL20.java:219 org.lwjgl.opengl.GL20.glCreateShader\n               LwjglGL20.java:176 com.badlogic.gdx.backends.lwjgl.LwjglGL20.glCreateShader\n           ShaderProgram.java:199 com.badlogic.gdx.graphics.glutils.ShaderProgram.loadShader\n           ShaderProgram.java:178 com.badlogic.gdx.graphics.glutils.ShaderProgram.compileShaders\n           ShaderProgram.java:161 com.badlogic.gdx.graphics.glutils.ShaderProgram.<init>\n ImmediateModeRenderer20.java:219 com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20.createDefaultShader\n  ImmediateModeRenderer20.java:55 com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20.<init>\n           ShapeRenderer.java:114 com.badlogic.gdx.graphics.glutils.ShapeRenderer.<init>\n           ShapeRenderer.java:110 com.badlogic.gdx.graphics.glutils.ShapeRenderer.<init>\n             core_graphics.clj:34 play-clj.core/shape*\n                  elements.clj:14 elemental.elements/create-element-shape\n                  elements.clj:25 elemental.elements/create-element\n                     AFn.java:160 clojure.lang.AFn.applyToHelper\n                     AFn.java:144 clojure.lang.AFn.applyTo\n               Compiler.java:3553 clojure.lang.Compiler$InvokeExpr.eval\nIf it helps, here's my test code, which is calling my game's standard initialisation functions h/create-hexagon and e/create-element, both of which create shapes:\n``` clojure\n(ns elemental.movement-test\n  (:require [play-clj.core :refer :all]\n            [elemental.movement :refer :all]\n            [elemental.elements :as e]\n            [elemental.hexagon :as h]\n            [expectations :refer [expect]]))\n(def game-width 300)\n(def game-height 300)\n(def simple-board-config [   [-1 1] [1 0]\n                          [-2 1] [0 0] [2 -1]\n                             [-1 0] [1 -1]   ])\n(def element-config {:player 1, :element :air, :coords [0 0]})\n(def simple-board (map #(h/create-hexagon % game-width game-height) simple-board-config))\n(def element-with-no-moves (assoc (e/create-element element-config game-width game-height)\n                             :selected? true\n                             :moves-remaining 0))\n(def entities [simple-board element-with-no-moves])\n;;; An element with 0 moves remaining shouldn't be moved\n(expect entities (move-selected-element (first simple-board) entities))\n``\n. Wrapping the GL dependentdefstatements withon-gl` allows the test to evaluate and run, but only while the game is launched. If the game isn't launched I get the following exception:\njava\njava.lang.NullPointerException: null\n/Users/jamtru/Projects/clojure/elemental/desktop/test/elemental/movement_test.clj:40 elemental.movement-test/eval7703\n       Compiler.java:6703 clojure.lang.Compiler.eval\n       Compiler.java:6666 clojure.lang.Compiler.eval\n            core.clj:2927 clojure.core/eval\n              eval.clj:77 lighttable.nrepl.eval/->result\n             AFn.java:156 clojure.lang.AFn.applyToHelper\n             AFn.java:144 clojure.lang.AFn.applyTo\n             core.clj:626 clojure.core/apply\n            core.clj:2468 clojure.core/partial[fn]\n          RestFn.java:408 clojure.lang.RestFn.invoke\n            core.clj:2559 clojure.core/map[fn]\n          LazySeq.java:40 clojure.lang.LazySeq.sval\n          LazySeq.java:49 clojure.lang.LazySeq.seq\n              RT.java:484 clojure.lang.RT.seq\n             core.clj:133 clojure.core/seq\n            core.clj:2595 clojure.core/filter[fn]\n          LazySeq.java:40 clojure.lang.LazySeq.sval\n          LazySeq.java:49 clojure.lang.LazySeq.seq\n             Cons.java:39 clojure.lang.Cons.next\n              RT.java:598 clojure.lang.RT.next\n              core.clj:64 clojure.core/next\n            core.clj:2856 clojure.core/dorun\n            core.clj:2871 clojure.core/doall\n             eval.clj:126 lighttable.nrepl.eval/eval-clj\n          RestFn.java:442 clojure.lang.RestFn.invoke\n             eval.clj:192 lighttable.nrepl.eval/eval2800[fn]\n             AFn.java:152 clojure.lang.AFn.applyToHelper\n             AFn.java:144 clojure.lang.AFn.applyTo\n             core.clj:624 clojure.core/apply\n            core.clj:1862 clojure.core/with-bindings*\n          RestFn.java:425 clojure.lang.RestFn.invoke\n             eval.clj:177 lighttable.nrepl.eval/eval2800[fn]\n             eval.clj:176 lighttable.nrepl.eval/eval2800[fn]\n         MultiFn.java:227 clojure.lang.MultiFn.invoke\n              core.clj:98 lighttable.nrepl.core/queued[fn]\n            core.clj:2402 clojure.core/comp[fn]\ninterruptible_eval.clj:138 clojure.tools.nrepl.middleware.interruptible-eval/run-next[fn]\n              AFn.java:22 clojure.lang.AFn.run\nThreadPoolExecutor.java:895 java.util.concurrent.ThreadPoolExecutor$Worker.runTask\nThreadPoolExecutor.java:918 java.util.concurrent.ThreadPoolExecutor$Worker.run\n          Thread.java:695 java.lang.Thread.run\nUnfortunately, even when the test runs I can't see the results using Light Table's Expectations plugin (I'm guessing this might be due to the on-gl wrapping confusing the plugin, but I haven't looked into it yet). I also can't run my tests from the command line using lein autoexpect as I get the same NullPointerException as when running the test without the game launched.\nIs there a way to get the test compiling without the game running? If not, I fear that this current approach might not be a good match for the type of testing that I'd like to do. Perhaps in that case I should switch to creating test-specific versions of the board and element, which don't have shapes or labels in them? There are a few downsides to doing that: firstly, I'll have to maintain two creation functions for each game entity; one real and one test, secondly I'd be testing the game functions with faked entities, and finally I won't be able to test the real creation code at all. All of which seems like a high price to pay.\n. binding the shapes to hash-maps sounds like it might be a decent compromise, but it gives me the following exception:\njava\njava.lang.IllegalStateException: Can't dynamically bind non-dynamic var: play-clj.core/shape*\n             Var.java:320 clojure.lang.Var.pushThreadBindings\n            core.clj:1809 clojure.core/push-thread-bindings\n/Users/jamtru/Projects/clojure/elemental/desktop/test/elemental/movement_test.clj:16 elemental.movement-test/eval7894\n       Compiler.java:6703 clojure.lang.Compiler.eval\n       Compiler.java:6666 clojure.lang.Compiler.eval\n            core.clj:2927 clojure.core/eval\n              eval.clj:77 lighttable.nrepl.eval/->result\n             AFn.java:156 clojure.lang.AFn.applyToHelper\n             AFn.java:144 clojure.lang.AFn.applyTo\n             core.clj:626 clojure.core/apply\n            core.clj:2468 clojure.core/partial[fn]\n           <snip>\n. with-redefs works better, but still falls over at the point my code is calling the shape macro:\njava\njava.lang.Exception: The keyword :object is not found.\n             utils.clj:19 play-clj.utils/throw-key-not-found\n             utils.clj:25 play-clj.utils/get-obj\n          elements.clj:14 elemental.elements/create-element-shape\n          elements.clj:25 elemental.elements/create-element\n/Users/jamtru/Projects/clojure/elemental/desktop/test/elemental/movement_test.clj:20 elemental.movement-test/eval8099[fn]\n            core.clj:6861 clojure.core/with-redefs-fn\n/Users/jamtru/Projects/clojure/elemental/desktop/test/elemental/movement_test.clj:18 elemental.movement-test/eval8099\n       Compiler.java:6703 clojure.lang.Compiler.eval\n       Compiler.java:6666 clojure.lang.Compiler.eval\n            core.clj:2927 clojure.core/eval\n              eval.clj:77 lighttable.nrepl.eval/->result\n             AFn.java:156 clojure.lang.AFn.applyToHelper\n             AFn.java:144 clojure.lang.AFn.applyTo\n             core.clj:626 clojure.core/apply\n<snip>\nHere's the code that failing:\nclojure\n(defn create-element-shape [radius colour angle]\n  (let [[tri-x1 tri-y1] [0 (+ radius (/ radius 4))]\n        [tri-x2 tri-y2] (cir/calculate-point-on-circle radius 125)\n        [tri-x3 tri-y3] (cir/calculate-point-on-circle radius 55)]\n    (shape :filled\n           :set-color colour\n           :circle 0 0 radius\n           :triangle tri-x1 tri-y1 tri-x2 tri-y2 tri-x3 tri-y3)))\n. That works, though it looks like I also need to redef label* too. I'll play with this some more later when I have some time. Thank you so much for your help so far.\n. When I try:\n``` clojure\n(with-redefs [play-clj.core/shape (fn [& args] {:object (Object.)})\n              play-clj.ui/label (fn [& args] {:object (Object.)})]\n(def simple-board (map #(h/create-hexagon % game-width game-height) simple-board-config))\n\n```\nI get:\njava\nFailed trying to require elemental.movement-test with: java.lang.ClassCastException: java.lang.Object cannot be cast to com.badlogic.gdx.scenes.scene2d.ui.Label\n             elements.clj:27 elemental.elements/create-element\n        movement_test.clj:22 elemental.movement-test/eval7673[fn]\n               core.clj:6861 clojure.core/with-redefs-fn\n        movement_test.clj:18 elemental.movement-test/eval7673\n          Compiler.java:6703 clojure.lang.Compiler.eval\n          Compiler.java:7130 clojure.lang.Compiler.load\n<snip>\nDo I need to construct an actual Label. and assign it to :object? If that's the case, why does just Object. work for shape*?\n. For anyone who is following along with this issue, I thought I'd post the work-around that Zach came up with:\n``` clojure\n(def finished? (promise))\n(defn tests []\n  ;; \n(deliver finished? true)))\n(defame your-game-name\n  :on-create\n  (fn [this]\n    (tests)))\n(try\n  (let [config (LwjglApplicationConfiguration.)]\n    (set! (. config width) 1)\n    (set! (. config height) 1)\n    (set! (. config x) 0)\n    (set! (. config y) 0)\n    (LwjglApplication. your-game-name config))\n  (catch Exception _ (on-gl (tests))))\n@finished?\n```\nThis approach works for both lein autoexpect and the Light Table Expectations plugin.\n. The only thing I can think that I'm doing differently is adding the timer when a button is pushed, as opposed to :on-show.\nI've pushed the code to my BitBucket project, if you want to take a look. The timer is added in turn-button-pushed in the turn-button namespace, and you can see the initial entities being passed into the next-battle-step function in the battles namespace.\nI think it's probably something that I'm doing wrong, but I just can't see what it is.\n. Light Table has live watches, so I'm using one to see the value of entities in the next-battle-step function.\nHowever, now I think the problem might be that I'm not clearing the timer properly when reseting the screen, which might be causing the :on-timer to trigger based on the initial game state.\nI'm going to look into it further. Sorry if this turns out to be a wild goose chase.\n. :on-timer is receiving an up-to-date entities vector, it was me who was misreading the watch output, due to the timer not being cleared when I restarted the game.\nWhich leads me to a follow-up question... here's my :on-key-down function in my an-exception-has-happened blank-screen:\nclojure\n:on-key-down\n  (fn [screen entities]\n    (cond\n     (key-pressed? :r) (do\n                         (remove-timer! screen :battle-step)\n                         (on-gl (set-screen! elemental main-screen)))))\nWhen I press R the game restarts, but triggers an :on-timer event immediately. I'm pretty sure the timer id is correct, so what else might I be doing wrong that the timer isn't getting removed?\n. It's nil, but I see why now, I'm trying to remove it from the wrong screen, i.e. I add the timer to the main-screen, but I'm trying to remove it from blank-screen. D'oh!\nI've taken up too much of your time with this non-issue, so I'm closing it now. Thanks for your help.\n. I haven't been able to get your assoc-in approach to work. I think it's because :entities contain a list, rather than a vector. Should I be converting it to a vector each time? Or is this something that perhaps play-clj should be handling?\n. You're welcome, and thanks for fixing it!\n. assoc-in works perfectly to add :angle to an inner entity with 0.3.8-SNAPSHOT, but the inner entity still seems to be inheriting its angle from the parent, and ignoring its own :angle.\nHere's one of my entities:\n``` clojure\nplay_clj.entities.BundleEntity\n{:entities [#play_clj.entities.BundleEntity\n{:entities [#play_clj.entities.TextureEntity\n{:object #, :angle 0}\nplay_clj.entities.TextureEntity\n{:object #}]}\nplay_clj.entities.TextureEntity\n{:object #}],\n:y 713, :coords [-1 3], :angle 180, :id :2-water, :piece? true, :player 2, :element-type :water, :x 224, :hit-box #, :selected? false, :moves-remaining 3}\n```\nYou can see :angle 0 in the first TextureEntity, but that texture is still being rendered with an angle of 180. (I also tried moving :angle 0 to the inner bundle instead of the texture, but that didn't work either.)\nWhat might I be doing wrong?\n. After updating to the latest 0.3.8-SNAPSHOT all of my piece entities (the nested bundle entity I posted earlier) have disappeared from the screen. Could the reversed precedence have caused this? Do I need to have :x and :y in all of the sub-elements now?\n. The new update fixed it, and the independent rotation is working perfectly. Thank you so much!\n. I'm not currently using an asset manager, but loading each texture with texture. However, switching to an asset manager is on my todo list, so if it will help with this problem too then I can bump it up in priority.\n. I've been looking at the example projects to try to figure out how asset-manager works, and I haven't been able to wrap my head around it.\nIt looks like you are just defining one, calling set-asset-manager!, and then not referring to it again. I was expecting to see use of :load and :get to manage the assets, but didn't find any. Am I misunderstanding what an asset-manager is for, and how it works?\n. It's great that asset-manager handles everything automatically. I've added one to my project.\nDoes it matter where I do .setFilter? I tried doing it before returning the texture, but got a cryptic exception:\n``` clojure\n(ns elemental.entities.puck\n  (:require [elemental.settings :refer :all]\n            [play-clj.core :refer :all]\n            [play-clj.g2d :refer :all]\n            [play-clj.math :refer :all])\n  (:import [com.badlogic.gdx.graphics Texture$TextureFilter]))\n(defn create-puck [player]\n  (let [puck-texture (texture (str \"player-\" player \".png\"))]\n    (.setFilter (texture! puck-texture :get-texture) Texture$TextureFilter/Linear)\n    puck-texture))\n```\njava\n\"\\tat elemental.entities.puck$create_puck.invoke(/Users/jamtru/Projects/clojure/elemental/desktop/src-common/elemental/entities/puck.clj:12)\"\n\"\\tat elemental.entities.piece$create_piece.invoke(piece.clj:32)\"\n\"\\tat clojure.core$map$fn__4245.invoke(core.clj:2557)\"\n\"\\tat clojure.lang.LazySeq.sval(LazySeq.java:40)\"\n\"\\tat clojure.lang.LazySeq.seq(LazySeq.java:49)\"\n\"\\tat clojure.lang.RT.seq(RT.java:484)\"\n\"\\tat clojure.core$seq.invoke(core.clj:133)\"\n\"\\tat clojure.core$concat$cat__3957$fn__3958.invoke(core.clj:694)\"\n\"\\tat clojure.lang.LazySeq.sval(LazySeq.java:40)\"\n\"\\tat clojure.lang.LazySeq.seq(LazySeq.java:56)\"\n\"\\tat clojure.lang.ChunkedCons.chunkedNext(ChunkedCons.java:59)\"\n\"\\tat clojure.lang.ChunkedCons.next(ChunkedCons.java:43)\"\n\"\\tat clojure.lang.RT.next(RT.java:598)\"\n\"\\tat clojure.core$next.invoke(core.clj:64)\"\n\"\\tat clojure.core$some.invoke(core.clj:2515)\"\n\"\\tat elemental.pieces$piece_with_id.invoke(pieces.clj:21)\"\n\"\\tat elemental.replays$replay_event.invoke(replays.clj:10)\"\n\"\\tat clojure.core.protocols$fn__6086.invoke(protocols.clj:143)\"\n\"\\tat clojure.core.protocols$fn__6057$G__6052__6066.invoke(protocols.clj:19)\"\n\"\\tat clojure.core.protocols$seq_reduce.invoke(protocols.clj:31)\"\n\"\\tat clojure.core.protocols$fn__6078.invoke(protocols.clj:54)\"\n\"\\tat clojure.core.protocols$fn__6031$G__6026__6044.invoke(protocols.clj:13)\"\n\"\\tat clojure.core$reduce.invoke(core.clj:6289)\"\n\"\\tat elemental.replays$replay_to_turn.invoke(replays.clj:25)\"\n\"\\tat elemental.core$eval6544$fn__6564.invoke(/Users/jamtru/Projects/clojure/elemental/desktop/src-common/elemental/core.clj:30)\"\n\"\\tat clojure.lang.Var.invoke(Var.java:383)\"\n\"\\tat play_clj.core$defscreen_STAR_$execute_fn_BANG___884$fn__887.invoke(core.clj:73)\"\n\"\\tat clojure.lang.AFn.applyToHelper(AFn.java:152)\"\n\"\\tat clojure.lang.AFn.applyTo(AFn.java:144)\"\n\"\\tat clojure.lang.AFunction$1.doInvoke(AFunction.java:29)\"\n\"\\tat clojure.lang.RestFn.invoke(RestFn.java:397)\"\n\"\\tat elemental.utilities.exceptions$fn__1655.invoke(exceptions.clj:18)\"\n\"\\tat play_clj.core$defscreen_STAR_$execute_fn_BANG___884.doInvoke(core.clj:75)\"\n\"\\tat clojure.lang.RestFn.invoke(RestFn.java:410)\"\n\"\\tat play_clj.core$defscreen_STAR_$fn__905.invoke(core.clj:97)\"\n\"\\tat clojure.lang.AFn.applyToHelper(AFn.java:152)\"\n\"\\tat clojure.lang.AFn.applyTo(AFn.java:144)\"\n\"\\tat clojure.core$apply.invoke(core.clj:624)\"\n\"\\tat play_clj.core$set_screen_BANG_$run_fn_BANG___928.doInvoke(core.clj:452)\"\n\"\\tat clojure.lang.RestFn.invoke(RestFn.java:410)\"\n\"\\tat play_clj.core$set_screen_BANG_$reify__936.show(core.clj:457)\"\n\"\\tat com.badlogic.gdx.Game.setScreen(Game.java:61)\"\n\"\\tat play_clj.core.proxy$com.badlogic.gdx.Game$ff19274a.setScreen(Unknown Source)\"\n\"\\tat play_clj.core$set_screen_BANG_.doInvoke(core.clj:453)\"\n\"\\tat clojure.lang.RestFn.invoke(RestFn.java:423)\"\n\"\\tat elemental.core$eval6544$fn__6580$fn__6581.invoke(/Users/jamtru/Projects/clojure/elemental/desktop/src-common/elemental/core.clj:46)\"\n\"\\tat clojure.lang.AFn.run(AFn.java:22)\"\n\"\\tat com.badlogic.gdx.backends.lwjgl.LwjglApplication.executeRunnables(LwjglApplication.java:237)\"\n\"\\tat com.badlogic.gdx.backends.lwjgl.LwjglApplication.mainLoop(LwjglApplication.java:192)\"\n\"\\tat com.badlogic.gdx.backends.lwjgl.LwjglApplication$1.run(LwjglApplication.java:114)\"\n. The extra argument fixed the error, and the linear filter makes the rotated texture look superb - thanks!\n. ",
    "greggaree": "I was using the auto-complete feature to type out the rest of the jar path, Windows completed with the regular version of the jar. D'oh! I didn't realize lein uberjar creates two jars.\nMany Thanks!\n. ",
    "lvh": "(The other reason I don't want to load from a file is because I'm hoping to procedurally generate the maps :))\n. Thanks! Are they supposed to happen when building an uberjar too? (I figured they may be symptoms of the real problem.)\n. FWIW this appears to be a stupid file name issue; renaming the .jnilib to .dylib works :)\n. Now I'm doubting which one installed previously, but I'm pretty sure I would've only installed the JDK. Now I've re-downloaded the JDK8 (jdk-8-macosx-x64.dmg), re-installed, did lein clean and lein uberjar in super-koalio, and get the same error. (lein run fails the same way as running the jar does, modulo lein/clj showing up in the stack trace of course) Same workaround still works.\nIt appears there's plenty of issues with Java 8 and (apparently mostly game-related) dylibs/jnilibs:\n- http://code.google.com/p/tectonicus/issues/detail?id=40\n- http://forums.technicpack.net/tracker/issue-1030-no-modpacks-will-run/\nMaybe liblwjgl needs updating :)\n. Wow, yes, that fixed it :) Thanks! Why is this necessary?\n. Okay cool, thanks :) If you'd like, I can document this in the README; but I don't know if you expect this to be a one-off or a common thing worth documenting.\n(Closing since the issue is fixed for me)\n. ",
    "jroblak": "Fair enough!\n. So, building on this, I think wrappers would now be useful for: MapObject, CircleMapObject, EllipseMapObject, PolygonMapObject, PolylineMapObject, RectangleMapObject, and TextureMapObject\nAlthough for now I guess these can just be manipulated via\nclojure\n(.x (.getRectangle object)))\nI can look into potentially being able to implement these as they seem simple. \nHowever I need to understand into whats going on under the hood a little more, though, as:\nclojure\n(flatten (pvalues\n                (apply e/create-player player-images)\n                (for [object (map-layer! (map-layer screen \"entities\") :get-objects)]\n                  (apply e/create-baddy enemy-images))))))\nworks, while\nclojure\n(flatten (pvalues\n                (apply e/create-player player-images)\n                (for [object (map-layer! (map-layer screen \"entities\") :get-objects)]\n                  (apply e/create-baddy (conj enemy-images (.getRectangle object))))))))\ndoes not (this is keeping in mind that the e/create-baddy function has to change between the two)\n. Awesome!\nNot sure on the error. Still getting the hang of debugging Clojure. I'm assuming it's something related to what you said, but the object layer only has one rectangle object on it in Tiled. Will have to look into it more, but pasting your code does print the one Rectangle object. So it must be how I'm passing it to the create function or something.\n. The issue was that I assumed\nclojure\n(conj enemy-images (map-object! object :get-rectangle))\nadded the map object to the end of the vector, not the beginning. I've now got it working!\n. ",
    "anthgur": "I've updated the PoC gist because there were some things in it that didn't make sense. It appears screenshots will require a performance hit (especially on mobile devices), because they have to be captured/written from the gl context.\nI'm attempting to implement a screenshot capture mechanism because I'm looking to use play-clj for a data visualization project. My idea was to be able to run the simulation freely, and capture a series of screenshots by stepping through the data points/physics simulation. The second approach would allow me to render a video using the screenshots (so performance isn't key in that use case).\n. I played around more with trying to dispose the Pixmap and I got it to work. I updated the PoC gist with the code that writes to disk and frees the native heap space.\nWhat that says to me is that freeing the memory is not causing it to freeze, which is good. I already knew that writing to disk worked, so the only obstacle remaining is the fact that the images come out upside-down.\nIn terms of performance, I created 5 screenshots in quick succession on my laptop and only dropped 3 fps for a half second. I know that's not a great benchmark, but it's promising nonetheless. \n. Yeah that looks a lot better! The only potential problem I see is that Pixmaps can leak memory on the native heap if you don't dispose them. May be there should be a warning in the docs to let people know they need to dispose the returned Pixmap when they are done if they don't let screenshot! do it for them?\nhttp://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/Pixmap.html\n. Another possible memory leak is with Screens\nThe Screen interface is reified when a new screen is set, but the dispose method currently doesn't do anything:\nhttps://github.com/oakes/play-clj/blob/master/src/play_clj/core.clj#L138\nWould that cause memory leaks too?\nThe documentation for Screen also mentions that dispose is not called on it automatically, so I'm not sure where it should be called.\nWhat about some mechanism to register Disposables with a Screen, giving a way to opt into memory management when screens are disposed or changed?\n. Ok, all of that makes sense. So for example when you create a Pixmap via something like (pixmap \"foo.png\"), will it automatically get disposed somehow?\nAnother obstacle that I see is exceptions from multiple calls to Pixmap/dispose. How detailed should the warnings in the docs be? I could see another issue being opened later on because of exceptions like this.\n. Fair enough. So is Pixmap the only class that needs to be manually disposed? I'm not too familiar with LibGDX internals.\n. ",
    "ghost": "Thanks, that works perfectly! A debug screen that displays the stack trace and resets to the original screen on  seems like the natural progression\n. oh except I had to change on-gl to 'on-gl\n. ey I made this piece of js for you. Its a little overkill atm, but its due to the html structure of the page. Since theres no structure like a list for example, for the links, i had to write a script that knows where all the links and the ns sections are (couldnt just go and access parents / children of specific section). So far the script just scrolls the sidebar to that section you just opened a page from. Theres an interval func which looks for the \"sidebar\" class and checks if theres all them goodies, if its not found after few secs, it cancels the interval and nothing happens. I cant figure why it wouldnt work, i wrote it in browser while on the docs page, so adding it to just about anywhere should be ok. In theory if you add new ns sections it should know how to include them. about 2 class names are hard coded in it.\nhttps://gist.github.com/jaakkoj/db2c6e6e2b97df03b40b\nedit: About iframes , i dont know, not sure if ive ever used one tbh....\n. ",
    "mk12": "Not sure why I did that \u2014 yes, should be (ActorEntity. (Container. child)).\n. ",
    "compmstr": "I did not see that there was an existing asset manager macro. (Is there a way to alphabetize the docs?)\nHaving the user manage the object would work, unless you wanted the asset manager to be the default way to load textures/bitmaps/etc.\nWe could have it be used via a dynamic var if it's there, and just load without the manager if it's not.  That way the user could do:\n(binding [*asset-manager* ...] <load resources>)\nThe keywords instead of the alternate load functions makes sense as well.\n. One thing I do like about my version is that you can load the asset synchronously, so you can put it in as you're creating the object.  We could set up the load functions to still support that, even optionally.\n. That makes sense.\n. Looks like it works great :) Just need to make sure to call the loading on the gl thread in the user code.\nFor most projects it will end up being done in a loading screen or something anyways, I would think.\n. The bookmarks should still work, it will take them to the content-only page, where they can click the 'Frames' link to go back to the page with the menu.\nHmm, the main thing that wouldn't work with noscript is the main index page auto-loading content for you.  The menu would still work fine.\n. Sorry, the existing links should still work, all of the same pages are generated, just as content-only pages.\n. ",
    "s-marshall": "Thanks. After I wrote the issue and looked at the file again, I saw it. Cut and paste and now it works.\nThanks again.\n. ",
    "jconti": "Hmmm, maybe the template is pulling the last released version.  I couldn't get keyboard handling to work until I made the change on my MacOS box.\nThank you for the library.  I am enjoying giving it a spin!  Looks like very nice work.\n. Mine shows 0.3.3:\n``` Clojure\n(defproject play-clj-hello \"0.0.1-SNAPSHOT\"\n  :description \"FIXME: write description\"\n:dependencies [[com.badlogicgames.gdx/gdx \"1.0.1\"]\n                 [com.badlogicgames.gdx/gdx-backend-lwjgl \"1.0.1\"]\n                 [com.badlogicgames.gdx/gdx-box2d \"1.0.1\"]\n                 [com.badlogicgames.gdx/gdx-box2d-platform \"1.0.1\"\n                  :classifier \"natives-desktop\"]\n                 [com.badlogicgames.gdx/gdx-bullet \"1.0.1\"]\n                 [com.badlogicgames.gdx/gdx-bullet-platform \"1.0.1\"\n                  :classifier \"natives-desktop\"]\n                 [com.badlogicgames.gdx/gdx-platform \"1.0.1\"\n                  :classifier \"natives-desktop\"]\n                 [org.clojure/clojure \"1.6.0\"]\n                 [play-clj \"0.3.3\"]]\n:source-paths [\"src\" \"src-common\"]\n  :javac-options [\"-target\" \"1.6\" \"-source\" \"1.6\" \"-Xlint:-options\"]\n  :aot [play-clj-hello.core.desktop-launcher]\n  :main play-clj-hello.core.desktop-launcher)\n```\n. Ah, that explains it.  Thanks much, I will update now.\n. ",
    "patrickmcelwee": "Yes, the same error happens on 0.3.6. Thanks\nFrom: Zach Oakes notifications@github.com<mailto:notifications@github.com>\nReply-To: oakes/play-clj reply@reply.github.com<mailto:reply@reply.github.com>\nDate: Monday, May 26, 2014 at 12:05 PM\nTo: oakes/play-clj play-clj@noreply.github.com<mailto:play-clj@noreply.github.com>\nCc: Patrick McElwee patrick.mcelwee@duke.edu<mailto:patrick.mcelwee@duke.edu>\nSubject: Re: [play-clj] Persistent SIGSEGV error (#33)\nCan you try running 0.3.6 and let me know if you still experience this?\nOn May 26, 2014 9:48 AM, \"Patrick McElwee\" notifications@github.com<mailto:notifications@github.com> wrote:\n\nI have tried this in Java 6, 7 and 8. I am running play-clj 0.3.5 on Mac\nOS 10.9. Each time I run lein run in desktop, I get an error. In Java 8\nit looks like this:\ndesktop pmm21$ lein run\nCompiling our-first-game.core.desktop-launcher\n\nA fatal error has been detected by the Java Runtime Environment:\n\nSIGSEGV (0xb) at pc=0x00007fff92023acf, pid=26865, tid=39427\n\nJRE version: Java(TM) SE Runtime Environment (8.0_05-b13) (build 1.8.0_05-b13)\nJava VM: Java HotSpot(TM) 64-Bit Server VM (25.5-b02 mixed mode bsd-amd64 compressed oops)\nProblematic frame:\nC [CoreFoundation+0x12acf] CFStringGetLength+0xf\n\nFailed to write core dump. Core dumps have been disabled. To enable core dumping, try \"ulimit -c unlimited\" before starting Java again\n\nAn error report file with more information is saved as:\n/Users/pmm21/my_apps/our-first-game/desktop/hs_err_pid26865.log\n\nIf you would like to submit a bug report, please visit:\nhttp://bugreport.sun.com/bugreport/crash.jsp\nThe crash happened outside the Java Virtual Machine in native code.\nSee problematic frame for where to report the bug.\nIn Java 6, the error displays a little differently, as invalid memory\naccess.\nSorry if this is not enough information; I am not experienced debugging\nthis kind of issue with Java.\n\nReply to this email directly or view it on GitHubhttps://github.com/oakes/play-clj/issues/33\n.\n\n\nReply to this email directly or view it on GitHubhttps://github.com/oakes/play-clj/issues/33#issuecomment-44201059.\n. Yes, it is a brand-new project. I am trying to get the 'Hello World' example to come up as in the tutorial.\nHere is my effort at extracting the potentially useful bits of the log file:\n```\nCurrent thread (0x00007fcd4e8dc000):  JavaThread \"LWJGL Application\" [_thread_in_native, id=39427, stack(0x000000011c384000,0x000000011c484000)]\n...\nRegister to memory mapping:\nRAX=0x0000000000000000 is an unknown value\nRBX=0x0000000000000000 is an unknown value\nRCX=0x0000000000000000 is an unknown value\nRDX=0x0000000000000001 is an unknown value\nRSP=0x000000011c482da0 is pointing into the stack for thread: 0x00007fcd4e8dc000\nRBP=0x000000011c482db0 is pointing into the stack for thread: 0x00007fcd4e8dc000\nRSI=0x000000011bfa6af0: C.75.5339+0x770 in /private/var/folders/6t/1q83g20138vfws1zfvj_3ljhv86x0d/T/libgdxpmm21/45614fc1/liblwjgl.dylib at 0x000000011bf69000\nRDI=0x0000000000000000 is an unknown value\nR8 =0x0000000000000040 is an unknown value\nR9 =0x000000011c482d00 is pointing into the stack for thread: 0x00007fcd4e8dc000\nR10=0x00007fff99499f51: CocoaVersionNumber+0x6620f59 in /System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa at 0x00007fff92e78000\nR11=0x00007fff92036cb0: CFStringCompare+0 in /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation at 0x00007fff92011000\nR12=0x0000000000000000 is an unknown value\nR13=0x0000000000000000 is an unknown value\nR14=0x0000000000000001 is an unknown value\nR15=0x000000011bfa6af0: C.75.5339+0x770 in /private/var/folders/6t/1q83g20138vfws1zfvj_3ljhv86x0d/T/libgdxpmm21/45614fc1/liblwjgl.dylib at 0x000000011bf69000\nStack: [0x000000011c384000,0x000000011c484000],  sp=0x000000011c482da0,  free space=1019k\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\nC  [CoreFoundation+0x12acf]  CFStringGetLength+0xf\nC  [CoreFoundation+0x25cc8]  CFStringCompare+0x18\nC  [liblwjgl.dylib+0xc058]  Java_org_lwjgl_opengl_MacOSXDisplay_nGetCurrentDisplayMode+0xb8\nj  org.lwjgl.opengl.MacOSXDisplay.nGetCurrentDisplayMode()Ljava/lang/Object;+0\nj  org.lwjgl.opengl.MacOSXDisplay.init()Lorg/lwjgl/opengl/DisplayMode;+1\nj  org.lwjgl.opengl.Display.()V+53\nv  ~StubRoutines::call_stub\nV  [libjvm.dylib+0x2c5186]  JavaCalls::call_helper(JavaValue, methodHandle, JavaCallArguments, Thread)+0x6ae\nV  [libjvm.dylib+0x298bcd]  InstanceKlass::call_class_initializer_impl(instanceKlassHandle, Thread)+0xbf\nV  [libjvm.dylib+0x29a02d]  InstanceKlass::initialize_impl(instanceKlassHandle, Thread)+0x5c7\nV  [libjvm.dylib+0x29a2af]  InstanceKlass::initialize(Thread)+0x3d\nV  [libjvm.dylib+0x39566a]  LinkResolver::resolve_static_call(CallInfo&, KlassHandle&, Symbol, Symbol, KlassHandle, bool, bool, Thread)+0x9c\nV  [libjvm.dylib+0x39587e]  LinkResolver::resolve_invokestatic(CallInfo&, constantPoolHandle, int, Thread)+0x102\nV  [libjvm.dylib+0x39593f]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle, int, Bytecodes::Code, Thread)+0xb3\nV  [libjvm.dylib+0x2bf655]  InterpreterRuntime::resolve_invoke(JavaThread, Bytecodes::Code)+0x371\nj  com.badlogic.gdx.backends.lwjgl.LwjglGraphics.setVSync(Z)V+6\nj  com.badlogic.gdx.backends.lwjgl.LwjglApplication$1.run()V+20\nv  ~StubRoutines::call_stub\nV  [libjvm.dylib+0x2c5186]  JavaCalls::call_helper(JavaValue, methodHandle, JavaCallArguments, Thread)+0x6ae\nV  [libjvm.dylib+0x2c5914]  JavaCalls::call_virtual(JavaValue, KlassHandle, Symbol, Symbol, JavaCallArguments, Thread)+0x164\nV  [libjvm.dylib+0x2c5ac0]  JavaCalls::call_virtual(JavaValue, Handle, KlassHandle, Symbol, Symbol, Thread)+0x4a\nV  [libjvm.dylib+0x3152a7]  thread_entry(JavaThread, Thread)+0x7c\nV  [libjvm.dylib+0x51ccf5]  JavaThread::thread_main_inner()+0x9b\nV  [libjvm.dylib+0x51e432]  JavaThread::run()+0x1c2\nV  [libjvm.dylib+0x445426]  java_start(Thread*)+0xf6\nC  [libsystem_pthread.dylib+0x1899]  _pthread_body+0x8a\nC  [libsystem_pthread.dylib+0x172a]  _pthread_struct_init+0x0\nC  [libsystem_pthread.dylib+0x5fc9]  thread_start+0xd\nJava frames: (J=compiled Java code, j=interpreted, Vv=VM code)\nj  org.lwjgl.opengl.MacOSXDisplay.nGetCurrentDisplayMode()Ljava/lang/Object;+0\nj  org.lwjgl.opengl.MacOSXDisplay.init()Lorg/lwjgl/opengl/DisplayMode;+1\nj  org.lwjgl.opengl.Display.()V+53\nv  ~StubRoutines::call_stub\nj  com.badlogic.gdx.backends.lwjgl.LwjglGraphics.setVSync(Z)V+6\nj  com.badlogic.gdx.backends.lwjgl.LwjglApplication$1.run()V+20\nv  ~StubRoutines::call_stub\n---------------  P R O C E S S  ---------------\nJava Threads: ( => current thread )\n  0x00007fcd4f07b800 JavaThread \"DestroyJavaVM\" [_thread_blocked, id=2571, stack(0x0000000101656000,0x0000000101756000)]\n=>0x00007fcd4e8dc000 JavaThread \"LWJGL Application\" [_thread_in_native, id=39427, stack(0x000000011c384000,0x000000011c484000)]\n  0x00007fcd4c248000 JavaThread \"AWT-AppKit\" daemon [_thread_in_native, id=8203, stack(0x00007fff5debf000,0x00007fff5e6bf000)]\n  0x00007fcd4e80b000 JavaThread \"Service Thread\" daemon [_thread_blocked, id=21507, stack(0x000000011adcc000,0x000000011aecc000)]\n  0x00007fcd4c038800 JavaThread \"C1 CompilerThread3\" daemon [_thread_blocked, id=20995, stack(0x000000011acc9000,0x000000011adc9000)]\n  0x00007fcd4c021000 JavaThread \"C2 CompilerThread2\" daemon [_thread_in_native, id=20483, stack(0x000000011abc6000,0x000000011acc6000)]\n  0x00007fcd4e801000 JavaThread \"C2 CompilerThread1\" daemon [_thread_in_native, id=19971, stack(0x000000011aac3000,0x000000011abc3000)]\n  0x00007fcd4c86a800 JavaThread \"C2 CompilerThread0\" daemon [_thread_in_native, id=19459, stack(0x000000011a9c0000,0x000000011aac0000)]\n  0x00007fcd4c82c000 JavaThread \"Signal Dispatcher\" daemon [_thread_blocked, id=18947, stack(0x000000011a8bd000,0x000000011a9bd000)]\n  0x00007fcd4c852800 JavaThread \"Finalizer\" daemon [_thread_blocked, id=14595, stack(0x000000011a66e000,0x000000011a76e000)]\n  0x00007fcd4c017000 JavaThread \"Reference Handler\" daemon [_thread_blocked, id=14083, stack(0x000000011a56b000,0x000000011a66b000)]\nOther Threads:\n  0x00007fcd4c851800 VMThread [stack: 0x000000011a468000,0x000000011a568000] [id=13571]\n  0x00007fcd4e80b800 WatcherThread [stack: 0x000000011aecf000,0x000000011afcf000] [id=22019]\nVM state:not at safepoint (normal execution)\nVM Mutex/Monitor currently owned by a thread: None\n...\nDeoptimization events (10 events):\nEvent: 0.966 Thread 0x00007fcd4e000000 Uncommon trap: reason=class_check action=maybe_recompile pc=0x00000001039c86e0 method=clojure.lang.Util.hasheq(Ljava/lang/Object;)I @ 29\nEvent: 0.966 Thread 0x00007fcd4e000000 Uncommon trap: reason=class_check action=maybe_recompile pc=0x00000001039c86e0 method=clojure.lang.Util.hasheq(Ljava/lang/Object;)I @ 29\nEvent: 0.981 Thread 0x00007fcd4e000000 Uncommon trap: reason=unreached action=reinterpret pc=0x00000001038b5824 method=java.lang.AbstractStringBuilder.append(Ljava/lang/String;\n)Ljava/lang/AbstractStringBuilder; @ 1\nEvent: 0.981 Thread 0x00007fcd4e000000 Uncommon trap: reason=unreached action=reinterpret pc=0x0000000103863aa0 method=java.lang.AbstractStringBuilder.append(Ljava/lang/String;\n)Ljava/lang/AbstractStringBuilder; @ 1\nEvent: 1.355 Thread 0x00007fcd4e000000 Uncommon trap: reason=bimorphic action=maybe_recompile pc=0x00000001039a9f20 method=java.lang.ThreadLocal.get()Ljava/lang/Object; @ 6\nEvent: 1.355 Thread 0x00007fcd4e000000 Uncommon trap: reason=unreached action=reinterpret pc=0x00000001039ac138 method=java.lang.ThreadLocal$ThreadLocalMap.getEntry(Ljava/lang/\nThreadLocal;)Ljava/lang/ThreadLocal$ThreadLocalMap$Entry; @ 29\nEvent: 1.359 Thread 0x00007fcd4e000000 Uncommon trap: reason=bimorphic action=maybe_recompile pc=0x00000001039a9f20 method=java.lang.ThreadLocal.get()Ljava/lang/Object; @ 6\nEvent: 1.362 Thread 0x00007fcd4e000000 Uncommon trap: reason=class_check action=maybe_recompile pc=0x00000001038c7160 method=java.util.HashMap.getNode(ILjava/lang/Object;)Ljava\n/util/HashMap$Node; @ 126\nEvent: 1.428 Thread 0x00007fcd4e000000 Uncommon trap: reason=unloaded action=reinterpret pc=0x00000001038ac638 method=java.lang.CharacterData.of(I)Ljava/lang/CharacterData; @ 1\n16\nEvent: 1.428 Thread 0x00007fcd4e8dc000 Uncommon trap: reason=unreached action=reinterpret pc=0x00000001039aa004 method=java.lang.ThreadLocal.get()Ljava/lang/Object; @ 11\nInternal exceptions (10 events):\nEvent: 1.433 Thread 0x00007fcd4e8dc000 Exception  (0x0000000795b0f558) thrown at [/HUDSON/workspace/8-2-build-macosx-x86_64/jdk8u5/\n2488/hotspot/src/share/vm/prims/jvm.cpp, line 1248]\nEvent: 1.434 Thread 0x00007fcd4e8dc000 Exception  (0x0000000795b1a1e8) thrown at [/HUDSON/workspace/8-2-build-macosx-x86_64/jdk8u5/\n2488/hotspot/src/share/vm/prims/jvm.cpp, line 1248]\nEvent: 1.434 Thread 0x00007fcd4e8dc000 Exception  (0x0000000795b21498) thrown at [/HUDSON/workspace/8-2-build-macosx-x86_64/jdk8u5/\n2488/hotspot/src/share/vm/prims/jvm.cpp, line 1248]\nEvent: 1.435 Thread 0x00007fcd4e8dc000 Exception  (0x0000000795b281f0) thrown at [/HUDSON/workspace/8-2-build-macosx-x86_64/jdk8u5/\n2488/hotspot/src/share/vm/prims/jvm.cpp, line 1248]\nEvent: 1.435 Thread 0x00007fcd4e8dc000 Exception  (0x0000000795b2ef40) thrown at [/HUDSON/workspace/8-2-build-macosx-x86_64/jdk8u5/\n2488/hotspot/src/share/vm/prims/jvm.cpp, line 1248]\nEvent: 1.438 Thread 0x00007fcd4e8dc000 Exception  (0x0000000795b401e0) thrown at [/HUDSON/workspace/8-2-build-macosx-x86_64/jdk8u5/\n2488/hotspot/src/share/vm/prims/jvm.cpp, line 1248]\nEvent: 1.438 Thread 0x00007fcd4e8dc000 Exception  (0x0000000795b47d30) thrown at [/HUDSON/workspace/8-2-build-macosx-x86_64/jdk8u5/\n2488/hotspot/src/share/vm/prims/jvm.cpp, line 1248]\nEvent: 1.438 Thread 0x00007fcd4e8dc000 Exception  (0x0000000795b4fad0) thrown at [/HUDSON/workspace/8-2-build-macosx-x86_64/jdk8u5/\n2488/hotspot/src/share/vm/prims/jvm.cpp, line 1248]\nEvent: 1.438 Thread 0x00007fcd4e8dc000 Exception  (0x0000000795b57968) thrown at [/HUDSON/workspace/8-2-build-macosx-x86_64/jdk8u5/\n2488/hotspot/src/share/vm/prims/jvm.cpp, line 1248]\nEvent: 1.439 Thread 0x00007fcd4e8dc000 Exception  (0x0000000795b5fa30) thrown at [/HUDSON/workspace/8-2-build-macosx-x86_64/jdk8u5/\n2488/hotspot/src/share/vm/prims/jvm.cpp, line 1248]\nEvents (10 events):                                                                                                                                                   [207/2159]\nEvent: 1.438 loading class org/lwjgl/opengl/PeerInfo\nEvent: 1.438 loading class org/lwjgl/opengl/PeerInfo done\nEvent: 1.438 loading class org/lwjgl/opengl/MacOSXPbufferPeerInfo\nEvent: 1.438 loading class org/lwjgl/opengl/MacOSXPbufferPeerInfo done\nEvent: 1.438 loading class org/lwjgl/opengl/MacOSXPeerInfo\nEvent: 1.438 loading class org/lwjgl/opengl/MacOSXPeerInfo done\nEvent: 1.438 loading class org/lwjgl/opengl/MacOSXDisplayPeerInfo\nEvent: 1.438 loading class org/lwjgl/opengl/MacOSXDisplayPeerInfo done\nEvent: 1.439 loading class org/lwjgl/opengl/MacOSXCanvasPeerInfo\nEvent: 1.439 loading class org/lwjgl/opengl/MacOSXCanvasPeerInfo done\n...\n``\n. I should mention that I tried play-clj 0.2.4 too, with the same result (but I didn't change the versions of any other dependencies - maybe I should do that?)\n. The new hello-world project has same problem on my machine. I may try firing up a Vagrant instance and developing in Linux when I get a chance.\n. great question ... The Hello World app runs fine for me as a standalone jar. I am running Leiningen 2.3.4, straight from the terminal.\n. tried other versions of leiningen back to 2.0 ... no difference\n. That makes perfect sense. A graphical game shouldn't work in headless mode. I can confirm that removing-Djava.awt.headless=true` from JVM_OPTS and JAVA_OPTS fixes this error. Thanks @stianeikeland \n. Would you like me to submit some documentation of this gotcha in the README?\n. ",
    "stianeikeland": "I had the same error, in my case it was caused by: JAVA_TOOL_OPTIONS='-Djava.awt.headless=true'\n. ",
    "Chuckler": "Thank you! And Nigthcode was a typo. I'm using nightmod 0.1.1. Great work you're doing there!\n. ",
    "Crazy-Owl": "Thanks, that helped. I was a bit confused by defscreen help section in generated docs - it doesn't mention the need to convert the input coordinates. Maybe defscreen doc need to mention it explicitly?\n. I use the default core.clj from generated project, just open up a REPL to play around.\nOK, it seems like I've found what the problem is: when I fire up the REPL I don't start the game itself. If I try to load the textures after I launch the game via -main function in desktop-launcher, I'm able to load any texture I need.\n. ",
    "ysmolsky": "Thank you very much! That gave me idea to implement my own renderer function quite easily using libgdx objects directly. Also I like how you wrapped some of object like BitmapFont or TextureAlias into handy wrappers (though for Texture class I would have to use (import) it directly b/c play-clj \"texture\" wrapper is for TextureRegion. Correct me if I am wrong.\n. Ah... Seems I understood TextureRegion incorrectly. It's used for speeding up rendering because only one image is used instead of many and small regions are selected out from it. \nAnother question: is it okay to use draw-entity! from my own rendering function or it should be avoided as some internal function which might change in future?\n. Okay, here is the situation.\nThink of Dwarf Fortress. I have a tiled map which is dynamic and can be changed during the game. Cells are stored in the vector of vector and each cell has some \"content\". Also I have many entities representing \"dwarves\".  \"dwarves\" are stored in EntityComponentSystem as hashes in some other hashes with some components. My plan is to make rendering function which:\n- displays visible cells of map traversing my vec of vec structure\n- displays assigned jobs, pathes, other layers of information taken from ECS\n- displays \"dwarves\" with their state.\nOrdering of drawing is determined by game's logic and I might have up to 150 dwarves :)\nAll images will be placed on one big image and draw smaller regions of it. The most troubling part is that I have small cells (16x16 px) and thus many cells should be displayed on the screen. I do it via SpriteBatch as LibGDX manual recommends and I display two kinds of textures and layer with text on top of it for 1920x1080px screen. But FPS is about 45 on modern hardware. \nI was thinking about storing all my state in my ECS structure, while rendering function will be reading it and iterating over specific sets of data, making calls to SpriteBatch, rendering stuff on the screen.\nSo the most expensive operation is to draw all those 5000k cells each frame. And I am not sure where is the bottleneck.\nSorry for so many words :)\n. Haven't considered it yet. :smile: \nOne cons against it that my world logic is fully functional and all data is in the persistent structures. Tiled maps might require me to rethink my world or make mechanism to sync tiled maps with the world. \nDo you think performance of tiled maps would be much better that just rendering tiles one by one? If so I might give it a try.\n. It works! \u200bTHanks! \u200b\nOn 30 June 2014 18:53, Zach Oakes notifications@github.com wrote:\n\nTry :set-v-sync. Looks like the docs are wrong.\nOn Jun 30, 2014 11:49 AM, \"Yury Smolsky\" notifications@github.com wrote:\n\n(graphics! :set-vsync false)\ncauses this:\nException in thread \"LWJGL Application\"\njava.lang.IllegalArgumentException: No matching method found: setVsync\nfor\nclass com.badlogic.gdx.backends.lwjgl.LwjglGraphics\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/issues/40.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/issues/40#issuecomment-47549160.\n. \n",
    "donbonifacio": "Kay, thanks @oakes :)\nMaybe somewhere down the line someone will build a Clojure -> ClojureScript -> Javascript that will work with LibGDX.\nI'll close this.\n. ",
    "AlexGoico": "Something like this? http://teavm.org/\n. ",
    "CaptainLexington": "+1 - Targeting the web is super important, but I would like to use a robust, production-ready library rather than roll my own if at all possible - and targeting other platforms natively rather than through JavaScript VMs is attractive.\n. ",
    "PeggsDev": "Hi Guys, Im quite new to clj and would like to get involved in open source projects, applying schema could be quite a nice way to enter into it. I wouldn't mind having a go at this if it helps out. Whats the best way to get started in contributing changes?\n. cool, i will try to make some time at the weekend and give it a start, cheers for the prompt reply\n. ",
    "dparis": "I can't say I found the existing system immediately insufficient, just that the CES pattern has a lot going for it. It's fairly well established at this point, with much written about it. The entity systems wiki has some nice information and tutorials, and it gets a thorough write-up in Bob Nystrom's Game Programming Patterns book, for example.\nOne thing I like about it is that it allows for a natural mechanism to query for subsets of entities. Not all entities need to (or should) be rendered, certain screens may only care about inventory entities, and so on. An example might be a weapon entity: it has a spite to be rendered/animated when wielded, an icon to be rendered when viewing the inventory, maybe even some model data to be rendered when the player does an close inspection. \nUnless I misunderstand it, the current entity system would have a hard time with an \"entity\" like this since it essentially equates a single entity map with a single drawable thing. All of these different drawable entities would get put into the same vector and you'd have to manually filter the entity vector looking only for entities that you wanted to draw in a given context (inventory UI, play field, etc). Given that you'd probably also want to then implement some housekeeping functions to keep track of all the different entity types, you'd likely end up implementing a partial CES system anyways.\nFrom the opposite perspective, by making something like brute the default you could render just inventory items with icons, for example, by querying for the set of entities which have InventoryItem and IconTexture components. The IconTexture component could just be an instance of a TextureEntity record, so by getting that component for each entity you queried for, you'd have a vector of records you could pass to existing play-clj drawing functions.\ntl;dr - Existing system's not necessarily bad. CES seems a superset of it, though, with better separation of concerns and documented resources for design patterns.\nIf simplicity by default is a primary design goal, I can understand not wanting the additional complexity. I personally don't think it's that much more complex, though I may be an outlier, and I think the added complexity brings some nice benefits.\n. Wow, I bet this would be an awesome teaching tool! That's certainly a good reason to keep things straightforward.\nI'll move ahead on my own fork for a bit then, see how it goes. If I get anywhere with this idea, and the implementation doesn't invalidate the KISS principle, I'll check back in and see if it's worth moving upstream.\nCheers!\n. ",
    "DjebbZ": "I experienced this behavior on both OSX Mountain Lion and Linux Arch. On both, it's been developed with IntelliJ with the CursiveClojure plugin, with the tiled window manager i3 (not sure it's related, just saying in case of). Maybe it's related to setting (or not) the screen on GL thread with (on-gl (set-screen! ...)). The code where this behavior is here, maybe you can look at it or even test it. https://github.com/DjebbZ/whack-a-lion\n(A code review will be much much appreciated by the way, we intend to use play-clj this week-end for Ludum Dare).\n. Is this timer interval behavior normal ?\nHappy to hear that the code looks ok to you :) I will report on reddit after the event, surely next week. \n. The bug happened again. During this week-end we had to implement a custom timer function in the render based on :total-time. We've just switched back to the normal timer functions and we noticed that the (2) timers stop as soon as I press some key.\n. OSX. We narrowed the bug, it's not on key press, it happens when the game window gains focus. It stops all timers.\nWe read the code of add-timer!, it basically creates a libGDX Timer and schedule it. So we came to the same conclusion than you, it must be a libGDX bug.\nOn a side note, why aren't you simply doing (Timer.) when creating a timer here ?\n. The bug happened in the LD game. Nice to hear that you were able to reproduce it, it's making progress. \nThanks for the explanation about Clojure, I learned something. \n. We're not sure how to use setColor anyway, never did this kind of programming with OpenGL before. But yeah, maybe 2 hooks would be necessary. Or the ability to pass a function that manipulate the Batch directly. Not sure how to architecture it to make it fit play-clj the best.\n. I didn't think of using multimethods, great idea ! Will try tomorrow and report. \n. Didn't have time to try today, but if I understand the technique, it's basically reimplementing the draw! multimethod by overriding the original one, right ?\n. It appears that we need to get back the return value of (update! screen ... :world (box-2d 0 0)) in a let binding then work with the returned screen. This is what you did in the breakout example.\nMutability is making us crazy...\n. We wrote the message at the same time. Thanks for the answer !\nThe update! is confusing since it ends with a bang. But we got it now. It's also because we're not comfortable enough with Clojure. Learning the hard way :)\nClosing.\n. No prob, it's a pleasure to contribute.\n. ",
    "edesdan": "Hi, I'm having the same issue regarding call to :pause() on Desktops. It was supposed to be called just on Android, right? \nIt seems to be called every time the window lost focus. ????\n. So, what does it means? It's a libGDX bug? Documentation issue?  \nThanks,\nDaniele.\n. Ah ok , do you think I can open an issue on libgdx project for that?\n. https://github.com/libgdx/libgdx/issues/2518#issuecomment-60926674\n. ",
    "joshuafcole": "I was actually just taking a crack at it and realized the same thing. I\nthink that makes a lot of sense. My implementation currently looks like:\nclojure\n(defn pixmap*\n  ([arg]\n    (cond\n     (isa? (type arg) Pixmap) arg\n     :else\n     (let [^FileHandle fh (if (string? arg)\n                            (files! :internal arg)\n                            arg)]\n       (or (u/load-asset (.path fh) Pixmap)\n           (Pixmap. fh)))))\n  ([width height fmt]\n   (Pixmap. width height fmt)))\nI think adding a pixmap-format function (akin to the shape-type)\nfunction for the formats would also be nice.\nIn addition (newb question time!) Do you have any examples of pixmaps in\naction in play-clj? The render loop is a little opaque to me (it looks like\nthings self-register as entities into a global system... sometimes?) and\nwhile I can get e.g. labels to render, I'm having trouble getting pixmaps\nto. I've done a bit of hackery with libgdx interop for shape rendering\nwhich worked well enough, and tried to apply that here, but there doesn't\nseem to be a direct analog for sprites in play-clj that I can access (since\nusually I've seen pixmaps used as pixmap > manipulation > texture > sprite\n\nrender), so I'm a bit stuck.\n\nAny advice would be much appreciated. Otherwise, thanks for the speedy\nresponse and I'm looking forward to seeing the more flexible pixmap*\nfunction.\nCheers\nOn Fri, Sep 26, 2014 at 8:17 PM, Zach Oakes notifications@github.com\nwrote:\n\nSounds good; how about we add another arity to pixmap_? We can't really\nwork it into the pixmap macro in the current design, but it would be easy\nto support (pixmap_ width height format).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/issues/51#issuecomment-57040700.\n\n\nScrew the environment. Please print this email immediately. And then burn\nit.\n. Well, it certainly was a newb question. I had already tried making a\ntexture of it and draw!ing it to the screen, but at some point I'd jacked\nup the radius of the sample circle I was drawing to large values without\nsimilarly enlarging the pixmap. Since I was using :draw-circle instead of\n:fill-circle, the actual drawn pixels were just outside of the texture, so\nvisually it looked like nothing was drawn.\nThanks for the advice, and thanks again for the speedy responses! play-clj\ndefinitely looks like an awesome framework, and I can't wait to share it\nwith friends looking to learn game design once I'm a little more familiar.\nCheers\nOn Fri, Sep 26, 2014 at 9:02 PM, Zach Oakes notifications@github.com\nwrote:\n\nI added the new arity along with pixmap-format and pushed it as\n0.4.1-SNAPSHOT. I haven't used pixmaps much so I don't have any examples.\nIs there a reason you can't just create a texture from it and render that?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/issues/51#issuecomment-57041552.\n\n\nScrew the environment. Please print this email immediately. And then burn\nit.\n. Hmm, since we're unable to support the width/height/format ctor through the pixmap macro, is it possible to add a passthrough condition to the pixmap* function? E.g. \n``` clojure\n(pixmap \n  (pixmap* 100 100 (pixmap-format :RGBA8888))\n  :set-color (color :red)\n  :fill-circle 50 50 50)\n;; This would be analagous to the existing behavior with texture.\n(texture my-existing-texture\n  :flip true false\n  :set-region 0 0 100 100)\n```\nThere is the possible gotcha that the Pixmap constructor from pixmaps seems to take Gdx2DPixmaps [1] rather than regular Pixmaps, so I'm not sure how you'd clone it. Even so, a straight passthrough would be useful and preferable to individual pixmap! calls.\nAlternatively, is there an existing pattern I don't know about yet that I should prefer for this case? E.g., should I import play-clj.utils and manually invoke u/calls!?\nThanks\n[1] http://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/g2d/Gdx2DPixmap.html\n. An alternate approach that would accomplish the same and potentially be more clear is to add a check in the pixmap macro itself to test whether the argument (currently path) is a Pixmap already, and if so just use it without invoking pixmap*\n. Not sure if I ought to open a new bug for this, but in making a test case to determine the difference between using -> + pixmap! vs pixmap + options I discovered that the RGB* formats don't work with pixmap-format.  It disregards the keyword casing, doing its own conversion, but the RGB* formats are acronyms where all the letters are uppercased. naively, removing the u/key->pascal call would fix that, but I expect you had it there so that beginners could just use the normal clojure casing conventions in the first place. Writing the keyword out as :r-g-b-a8888 works, but I think that's an even bigger gotcha.\nhttp://libgdx.badlogicgames.com/nightlies/docs/api/com/badlogic/gdx/graphics/g2d/Gdx2DPixmap.html\nSorry for the trouble!\n. And as a final addendum about the utility of a pixmap passthrough\nclojure\n    (let [pm (pixmap* 200 200 (pixmap-format :r-g-b-a8888))\n          _ (doto pm\n                 (pixmap! :set-color (color :white))\n                 (pixmap! :fill)\n                 (pixmap! :set-color (color :red))\n                 (pixmap! :fill-circle 100 100 100))\n          tex (texture pm)]\n      (draw! screen [tex])\n      (pixmap! pm :dispose))\nVS.\nclojure\n    (let [pm (pixmap (pixmap* 200 200 (pixmap-format :RGBA8888))\n                     :set-color (color :white)\n                     :fill\n                     :set-color (color :red)\n                     :fill-circle 100 100 100)\n          tex (texture pm)]\n      (draw! screen [tex])\n      (pixmap! pm :dispose))\nIt's definitely not the end of the world without it, but I do find the second form more attractive and less cluttered. Please forgive any typos, I just scratched them out into the github editor.\nEDIT: Looks like you beat me to the doto example. :)\n. ",
    "VincentToups": "Seems I've made a mistake on my end.   I'm closing this issue in favor of a smaller one.\n. Weird, but ok, I guess. \n. ",
    "bobbywilson0": "Correct me if I am wrong. I have some code from the tutorial like so:\nclojure\n(defscreen main-screen\n  :on-show\n  (fn [screen entities]\n    (update! screen :renderer (stage))\n    (assoc (texture \"Clojure-icon.gif\")\n      :x 150 :y 50 :width 100 :height 200))\n...\n)\nif I change :width to 200, and run eval the following in cider: (on-gl (set-screen! hello-world main-screen)) it doesn't update. However, if I do something like (e! identity main-screen :width 200) it works exactly as I want. The trouble is that ideally I can update my application code and re-eval to get updates, without having to do an update via e! and then change my code, and eventually restart it.  Any thoughts on other things to try? Thanks for the help!\n. hello-world.core> (in-ns 'hello-world.core)\nNamespace hello-world.core\nhello-world.core> (on-gl (set-screen! hello-world main-screen))\nnil\nI am doing this, but yeah I don't see an update. Is there another way to reload the namespace that would be more appropriate?\n. Ok, I think I have enough to consider this closed and be useful to someone else. In emacs, to update the code that is currently running, you need to run C-c C-k in the buffer that you are changing code, and then in your cider repl, (on-gl (set-screen! hello-world main-screen)) where \"hello-world\" is your namespace.\n. ",
    "BorisKourt": "I can tone down the colours to just off white in the sidebar, generally it is better if there is at least some differentiation otherwise its hard to focus on any one item. \nIll change the background & colour in the main area. The background is missing because I wanted to de-emphasize areas without a full description but I can see how it could be annoying. \n. Decided to go with simpler vertical spacing. As with the previous one, args brighten on hover. Toned down the colours in the sidebar and added a clean fade to push it back a bit when reading the main area.\n\n. Awesome! :) Give me a shout if there are any issues down the line I can do a patch.\n. ",
    "zackp30": "Aha! Thanks! Now it launches! :smile: However, it is now on the far bottom left (i.e: barely visible), what exactly would I do to prevent this?\n. Works! Thanks, and sorry to bother you. :smile:\n. Aha! I see, thanks!\n. ",
    "RabidArts": "Hmm, so after thinking over this some more... this isn't a play-clj issue is it? :/\nStill, I'm not sure - so will await feedback :)\n. Cool, thanks for the response.\nNot sure if I'll get time, but I'll try to set up java and have a look too :)\n. Thanks for looking... I'd have thought it's to be called once off, but my opengl is very rusty.\nI can try take a look tomorrow again, just very busy between family dos. \n. I tried finding the right spot to put those lines of code (that you posted) into the play-clj repository, but I'm failing dismally - probably cos I'm being a noob about it.\nThe short answer is that those lines you posted should be used just after the call to glEnable(GL_TEXTURE_2D)\nThat's called once per texture unit - which should mean only once for us I think.\nSo I tried grabbing the latest code for play-clj, nightcode and nightmod, and searched for the setup calls to opengl - specifically looking for a gl-enable or glEnable to e.g. GL_TEXTURE_2D.\nBut couldn't find where that code lies in your repositories ..  me fails :S\n. ",
    "briancain": "@oakes - Thanks!\nI'm not sure if imgur.com ever takes down images, but it might be worth it to just upload it to imgur and use that to host the image.\n. Cool, thanks anyway! :)\n. ",
    "marco-fiset": "Thanks, it worked! Should have checked this out before posting here...\n. ",
    "kamn": "That could work to but I can forsee someone posting a bug about how there is a different in functionality between the arities.\n. I was having some issues with it. It seemed to be causing a jittering and would constatly look near the center 0, 0, 0. I assume it is because of the extra calculations it performs. Once I got around it looking worked fine. I can make a simple test case if you want to try it out yourself.\n. That works! I was worried it might change some functionality of existing projects but code search is down so I can't check. We could also change the current direction! to lookAt! since I think that might be valuable. I can do that tomorrow if you like.\n. Thanks for responding so quickly. I have used the new arity direction! and it works! I have not pushed it because now that everything is working I am trying to figure out how to reorganize and clean up the code. \n. ",
    "Yoshiyuka": "Thank you for the incredibly fast response. I've pulled 0.4.5-SNAPSHOT and can confirm that this has resolved the NullPointerException on closing a dialog.\n. I've resolved the \"missing :camera\" error by doing the following\n(update! screen :camera (orthographic) :renderer (stage))\nI'm not sure if this should be necessary though as from what I'm reading in the libgdx docs about Stage, shouldn't it have a camera associated with it already that could be used?\nThanks!\n. That's the confusing thing for me as well. It might happen or it might not. There's nothing that indicates when or why its going to happen. \nThis is what it looks like when the labels disappear from the table with :debug-all set for the table:\n\nI've removed :on-resize completely and this still happens. Puzzling.\n. Further investigation reveals that the GC is having a heart attack. It's probably not the smartest thing to create a new object every render frame. My guess is that the labels disappear when there's limited-to-no memory left.\n. ",
    "brycecovert": "You know what, I actually take that back. I don't think that's actually \nfreeing up memory like I thought it was. I think maybe top wasn't \nupdating. :(\n\nZach Oakes mailto:notifications@github.com\nMarch 7, 2015 at 8:54 AM\nWow! I was actually aware about |dispose| being manual, but I thought \nit didn't actually do anything unless you implemented the method \nyourself. Anyway, thanks.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/oakes/play-clj/pull/74#issuecomment-77697873.\n. Looking at this further, it seems like you are still in charge of \ndisposing of textures and the like that are not in use (not just the \nscreen). Wouldn't this cause leaks?\n\nI'm thinking that the dispose implementation should delegate to each \nscreen, to allow each to discard of any textures such.\n\nZach Oakes mailto:notifications@github.com\nMarch 7, 2015 at 9:02 AM\nAh darn, I'll revert then. I wonder if the memory leak is caused by my use\nof intern. I heard that it can lead to leaks.\nOn Mar 7, 2015 11:59 AM, \"Bryce\" notifications@github.com wrote:\n\nYou know what, I actually take that back. I don't think that's actually\nfreeing up memory like I thought it was. I think maybe top wasn't\nupdating. :(\n\nZach Oakes mailto:notifications@github.com\nMarch 7, 2015 at 8:54 AM\nWow! I was actually aware about |dispose| being manual, but I thought\nit didn't actually do anything unless you implemented the method\nyourself. Anyway, thanks.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/pull/74#issuecomment-77697873.\n\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/pull/74#issuecomment-77698154.\n\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/oakes/play-clj/pull/74#issuecomment-77698321.\n. Got it. Thanks!\nZach Oakes mailto:notifications@github.com\nMarch 7, 2015 at 9:10 AM\nIf you aren't using an asset manager, that could cause a leak. \nHowever, the\nleak is even happening in Nightmod, which uses an asset manager and clears\nall assets when you restart a game.\nOn Sat, Mar 7, 2015 at 12:06 PM, Bryce notifications@github.com wrote:\n\nLooking at this further, it seems like you are still in charge of\ndisposing of textures and the like that are not in use (not just the\nscreen). Wouldn't this cause leaks?\nI'm thinking that the dispose implementation should delegate to each\nscreen, to allow each to discard of any textures such.\n\nZach Oakes mailto:notifications@github.com\nMarch 7, 2015 at 9:02 AM\nAh darn, I'll revert then. I wonder if the memory leak is caused by my\nuse\nof intern. I heard that it can lead to leaks.\nOn Mar 7, 2015 11:59 AM, \"Bryce\" notifications@github.com wrote:\n\nYou know what, I actually take that back. I don't think that's \nactually\nfreeing up memory like I thought it was. I think maybe top wasn't\nupdating. :(\n\nZach Oakes mailto:notifications@github.com\nMarch 7, 2015 at 8:54 AM\nWow! I was actually aware about |dispose| being manual, but I \nthought\nit didn't actually do anything unless you implemented the method\nyourself. Anyway, thanks.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/pull/74#issuecomment-77697873.\n\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/pull/74#issuecomment-77698154.\n\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/pull/74#issuecomment-77698321.\n\n\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/pull/74#issuecomment-77698498.\n\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/oakes/play-clj/pull/74#issuecomment-77698684.\n. \n",
    "floybix": "The plot thickens... even within one screen (an overlay screen status-screen) I can reliably produce non-responsiveness in a text-button: if I change the position of a label entity (i.e. assoc :x) then suddenly the text-button is non-responsive. Until I manually resize the window.\nI guess this is about how event listeners are instantiated, but I'm quite lost...\n. Just saw your comment, thanks. Might be worth doing that same (let) in the example in README.md.\nBTW if you are running my game on latest commit you can see the text-button non-responsiveness once you pick up the sword and try to click on \"Use\".\nMuch and many appreciations.\n. Yes that's right, thanks.\n. I see, it is a change in libGDX, a good change that makes it simpler to\ncreate an entity from a map object layer.\nOn 19 March 2015 at 22:56, Zach Oakes notifications@github.com wrote:\n\nHi, I just pushed a new version of play-clj. I updated the Nightmod repo\nto use it, and I noticed your game has an error now. In the\ncreate-entity-from-object-layer function, the getRectangle call is\nfailing because it thinks it's a TextureMapObject instead of a\nRectangleMapObject. I haven't had time to look into it, but I wanted to\nalert you to see if it's something in your code or in play-clj. It uses a\nnew version of libGDX so perhaps something changed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/oakes/play-clj/issues/75#issuecomment-83615541.\n\n\nFelix Andrews / \u5b89\u798f\u7acb\nhttp://www.neurofractal.org/felix/\n. OK, that seems to work as well as my patch.  I do still see unresponsiveness sometimes -- if I add the actors to the stage later rather than creating them in the show function perhaps but haven't narrowed it down properly...\n. I just noticed that, while this commit fixed the ui actors which is great, it did something to on-touch-down.  Specifically (at least in my game) it now only fires in the outermost 1 or 2 pixels around the stage. Which suggests that it may be masked by the ui touch down listener - though i haven't looked into it.\n. Actually, no. But I don't know why.\n. That reflection on .get is a major hit to performance because it is called so often - on every render cycle many times to check valid movement of entities.\nThe following could avoid the reflection:\n(let [layers (-> ^BatchTiledMapRenderer (u/get-obj screen :renderer)\n                         .getMap\n                         .getLayers)]\n          (if (number? layer)\n            (.get layers (int layer))\n            (.get layers (str layer)))))))\n. I see, thanks.\n. ",
    "Antender": "I tried to use it like this:\nclojure\n(rectangle \n  card-x card-y \n  card-width card-height \n  :contains (game :x) (game :y))\n. ",
    "sagehan": "Hi, if you had spent time on play-clj for android development, this blog and title deserve some attention.\nThe play-clj leiningen template seems has been outdated for a while as the lein-droid development \nprocesses.\nIn a word ,you can try the newest lein-droid plugins and add  :multi-dex true  and :multi-dex-proguard-conf-path \"build/proguard-multi-dex.cfg\"  to :android map   of the project.clj file, and don't forget to add this file to android's project directory!\n. ",
    "noffle": "Is there a clean way to terminate the program from within the game? It looks like \"easy\" solutions like (System/exit 1) don't work either.\n. Hey Zach. I gave that a shot, but I'm still seeing the repl crash:\n```\nclojure-gdx-hello.core.desktop-launcher=> (-main)\nnil\nclojure-gdx-hello.core.desktop-launcher=> Exception in thread \"Thread-3\" clojure.lang.ExceptionInfo: Subprocess failed {:exit-code 255}\n    at clojure.core$ex_info.invoke(core.clj:4403)\n    at leiningen.core.eval$fn__6725.invoke(eval.clj:236)\n    at clojure.lang.MultiFn.invoke(MultiFn.java:231)\n    at leiningen.core.eval$eval_in_project.invoke(eval.clj:337)\n    at leiningen.repl$server$fn__10717.invoke(repl.clj:241)\n    at clojure.lang.AFn.applyToHelper(AFn.java:152)\n    at clojure.lang.AFn.applyTo(AFn.java:144)\n    at clojure.core$apply.invoke(core.clj:624)\n    at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1862)\n    at clojure.lang.RestFn.invoke(RestFn.java:425)\n    at clojure.lang.AFn.applyToHelper(AFn.java:156)\n    at clojure.lang.RestFn.applyTo(RestFn.java:132)\n    at clojure.core$apply.invoke(core.clj:628)\n    at clojure.core$bound_fn_STAR_$fn__4140.doInvoke(core.clj:1884)\n    at clojure.lang.RestFn.invoke(RestFn.java:397)\n    at clojure.lang.AFn.run(AFn.java:22)\n    at java.lang.Thread.run(Thread.java:745)\nSocketException The transport's socket appears to have lost its connection to the nREPL server\n    clojure.tools.nrepl.transport/bencode/fn--7491/fn--7492 (transport.clj:95)\n    clojure.tools.nrepl.transport/bencode/fn--7491 (transport.clj:95)\n    clojure.tools.nrepl.transport/fn-transport/fn--7463 (transport.clj:42)\n    clojure.core/binding-conveyor-fn/fn--4145 (core.clj:1910)\n    java.util.concurrent.FutureTask.run (FutureTask.java:262)\n    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1145)\n    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:615)\n    java.lang.Thread.run (Thread.java:745)\nBye for now!\n```\n. ",
    "rqndom": "This is a old question but I am currently facing the same problem.\nI have found the issue to be caused by lwjgl backend: by default its mainloop thread calls System.exit(-1) on close, which terminates the mainloop but also others threads including the repl one.\n(for more details see method LwjglApplication.mainLoop() in https://github.com/libgdx/libgdx/blob/master/backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglApplication.java)\nThis behaviour can be changed by passing a custom configuration object to the application, disabling the System.exit call by setting forceExit attribute to false.\nI have attached next the patch that works on my environment (patch on desktop-launcher.clj file). As I'm new to clojure I may not write good code, so feel free to refactor it if needed. :)\n``` diff\n--- desktop-launcher.clj    2016-11-09 09:12:04.283550194 +0100\n+++ desktop-launcher-patch.clj  2016-11-09 09:09:08.000000000 +0100\n@@ -1,10 +1,16 @@\n (ns {{desktop-namespace}}\n   (:require [{{namespace}} :refer :all])\n-  (:import [com.badlogic.gdx.backends.lwjgl LwjglApplication]\n+  (:import [com.badlogic.gdx.backends.lwjgl LwjglApplication LwjglApplicationConfiguration]\n            [org.lwjgl.input Keyboard])\n   (:gen-class))\n(defn -main\n   []\n-  (LwjglApplication. {{game-name}} \"{{app-name}}\" 800 600)\n+  (let [config (LwjglApplicationConfiguration.)]\n+    (set! (.-title config) \"{{app-name}}\")\n+    (set! (.-width config) 800)\n+    (set! (.-height config) 600)\n+    (set! (.-vSyncEnabled config) true)\n+    (set! (.-forceExit config) false)\n+    (LwjglApplication. {{game-name}} config))\n   (Keyboard/enableRepeatEvents true))\n```\n. ",
    "darker0n": "I'm only restarted REPL =)\n. ok, thanks\n. ",
    "jbeja": "Oh I see, make sense now. Thanks for answering.\n. ",
    "arrdem": ":+1: A trivial style cleanup but worthwhile now that everyone should have update.\n. ",
    "nblumoe": "Here is the project I am encountering this issue.\nadding timer: https://github.com/nblumoe/viking-village-vandalism/blob/7da07fd81c3aa566a799c03b7a6812069529324b//desktop/src-common/viking_village_vandalism/core.clj#L109\n(this gets trigger on-show https://github.com/nblumoe/viking-village-vandalism/blob/7da07fd81c3aa566a799c03b7a6812069529324b//desktop/src-common/viking_village_vandalism/core.clj#L83)\non-timer handler: https://github.com/nblumoe/viking-village-vandalism/blob/7da07fd81c3aa566a799c03b7a6812069529324b//desktop/src-common/viking_village_vandalism/core.clj#L163\nfunction call to reset the screens: https://github.com/nblumoe/viking-village-vandalism/blob/7da07fd81c3aa566a799c03b7a6812069529324b//desktop/src-common/viking_village_vandalism/core.clj#L265\n. ",
    "ul": "Probably you can suggest any workaround? Just hit this issue too.\n. ",
    "newhook": "I hit this problem as well... after I click on the game window the timer stops firing :( I think its probably simplest just not to use the timer and count down from delta times.. This was an AOT problem.  Once I lein clean and re-ran it worked.. ",
    "scheibenkaes": "Tried it and the issue is now gone. Thanks for fixing and for this great project in general!\n. ",
    "MasterMastic": "Thank you @oakes , I'll give it a shot as soon as possible and update. If I understand you correctly I could just conj any UI entity I make to the entities vector and according to my example above I could ignore it completely as-well, right?\nTo answer your question: I had in mind that the entities vector are for passing any state I would need, so I really don't see why would I want to pass a label object when a label object isn't part of my state.\nAnd by state, I mean my actual game data, and not any rendering objects such as UI entities or even anything \"technical\" (if that makes sense). So e.g. if I have a string I get by (let [state (first entities)] (-> state :player :name)), and I may wanna draw it and may not, having this kind of design unnecessarily complicates my logic, quite severely imo, especially if the number of labels aren't fixed.\nCompare simply drawing the label on the frame, to, as you say: cue it up (insert to stage), possibly & probably create a mapping from the game data it originates from to it, and draw it at.. well I'm not even sure if I ever would because I might not call it on the next frame (contrived example: make a text blink, and with multiple label objects, a fixed amount -- especially one -- is certainly common but an unfixed amount is also very very common).\nIf this is by design (well, I assume this is an accepted limitation imposed by libgdx), could I workaround this somehow? I don't know libgdx but maybe could I mutate the stage in-place with an insertion? I'd even go that far (I really don't want to complicate my logic just because I want to render text).\nAnd maybe this could be abstracted by play-clj in the future into a text rendering function (that would work like textures and other non-UI entities)?\nThanks again!\n. Okay, it seems the methodology is different than the one I know so I'll really dive into the examples. I'd love to see a guide of how the entities are idiomatically managed and related to game data, by the way.\nThank you!\n. ",
    "renl": "i suppose, I intended to have a create entity helper function where i can specific the color, so in this case the argument for the color in the helper function is kinda a function instead of a keyword.\n. ",
    "boogie666": "quick (slightly late) question. Does color have to be a macro? why not just a function?. Yey :) much nicer. Thx. ",
    "the2bears": "Hi Zach,\nLet me split the changes and submit another PR.  The one change, re: not\nusing origin-x and origin-y, has worked with a few different tests and I do\nstill recommend it.  The other change, re: the origin of a circle shape and\nhow to get that to align with a texture requires some more thought.\nRegards,\nBill\nOn Sun, Jul 10, 2016 at 7:27 PM, Zach Oakes notifications@github.com\nwrote:\n\nHi, sorry for the delayed response. Do you still recommend this change, or\nwould you prefer keeping it out since you closed the PR?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/oakes/play-clj/pull/98#issuecomment-231629158, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AGOaORqr8PM-7hU6cgWSYpWMJxwaCty8ks5qUaongaJpZM4JEoiB\n.\n. \n",
    "bcbradle": "Pull request for fix: #106 \n. It is critical that key-code does not parse symbols, otherwise it is impossible to wrap it in a function for use with maps, filters, reductions or other clojure functions.\nChanging defmacro to defn is the simplest way to ensure that a symbol as an argument gets evaluated instead of parsed, but its not the only way.\nIt is nice but it isn't vital that the return value be an unevaluated symbol. It could be a number.\nGiven your reply, I suggest a more involved fix that uses defn instead of defmacro and which returns a number rather than an unevaluated symbol. \n. ",
    "LeonmanRolls": "np, thanks for play-clj :) Sure I'll finish off the public methods in core for this PR and then hopefully go namespace by namespace. . Okay think this is ready to merge! Tested the tutorial game with instrumentation on and had no problems. . ",
    "enragedginger": "Great! Thank you!. ",
    "sound2gd": "here is my leining profile:\nclojure\n{:user {:plugins [[cider/cider-nrepl \"0.15.0-SNAPSHOT\" ]]}}\nif I remove cider-nrepl,then I can have my game running,\nI am a emacs user, nothing could be done with clojure if cider can not be used  :(\nplease give me some advice. "
}