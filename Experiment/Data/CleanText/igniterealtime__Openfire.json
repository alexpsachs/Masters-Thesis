{
    "tevans": "Hi Sven -\nThanks for sending this in ... looks good to me. Let's give the other devs a chance to look it over, and then we should be able to get it merged back into the master soon.\nRegards,\nTom\n. I can merge this in ... thanks for the link to the community page. I also opened a ticket to track this change : http://issues.igniterealtime.org/browse/OF-780\n. Refer to http://issues.igniterealtime.org/browse/OF-780 for more info.\n. This looks like the right thing to do, although I have not heard reports of cluster serialization issues. Curious whether there were any specific case(s) that this patch addresses? \n. OK - thanks for the additional info. Will run a few tests and expect to merge shortly.\n. I am a little conflicted on this one - agree it's good to remove unused dependencies, but in this case I know there are at least a few of us using JMock for testing plugins and extension components (discussion here).\nI suggest that we keep JMock for now, at least until we come up with a more formal strategy around unit testing (including mocks) for Openfire.\n. This looks good to me, not sure if there is a convenient way to test prior to merging.\n. Regarding the version numbers, OF maintains a separate file (build/lib/versions.txt) to keep track of the version for each dependent library. I'd recommend staying with this approach for now, at least until we switch over to a new dependency management system (e.g. Maven).\n. Thank you for your efforts with this update. Please also remove the old Mina 1.1.x sources from the build/lib/src/ folder (to avoid any confusion). Those jar files contain the sources that were used to make a few Openfire-specific tweaks to the original Mina snapshots. I assume they will no longer be needed with the upgrade to the 2.0.x version.\nAlso, how much testing have you been able to do on this build? We want to ensure all the network pathways (C2S, S2S, Components, etc.) are working properly after the upgrade. Assuming we are pretty confident it's working, I think we can merge this into the master for an upcoming 3.10.x release. My sense is that we would want to run this change through a Beta release process to solicit testing and feedback from the community.\n. I will attempt to address the merge conflicts in this PR to prep this helpful contribution for approval prior to releasing 3.10.x.\n. @dwd Do we still want to do this? Might be good to remove the Pack200 stuff prior to the 3.10.0 release if this is still part of the plan.\nI think both pending PRs are applicable, plus there should be an additional change to remove the following JAR file:\nbuild\\lib\\ant\\pack200task.jar\n. FYI - I have updated this PR with the merged results of PR #16 (MINA upgrade), including a small additional fix for the xmldebugger plugin to use the new MINA 2.0.x filtering API.\n. Yes, good call. This method is not used often, but it's good practice anyway. I'll make the change.\n. This is implemented based on 2.3.1 of RFC 1035, also informed by RFC 952.\nI did not attempt to implement support for IDNA (per RFC 5891) at this point. Is this what you had in mind?\n. OK - looking at java.net.IDN.toASCII() ... not sure what the implications are for the actual blacklist/whitelist logic though. The initial scope of this change was simply to protect against XSS in the S2S setup page within the admin console.\nMaybe we should just roll back the original XSS change?\n. Looks like the repo did not properly encode my test domain strings. I will fix.\nBased on the implications of this related memo, it seems reasonable to simply validate for an IDN-parseable value in the user input form, and then store the un-encoded (raw) input value in the DB. This assumes that any downstream usage of this value can be properly encoded as needed (for example, in the ServerDialback class). I am not attempting to address those potential downstream concerns here.\n. Note that this PR now also includes a fix for OF-670 to detect unrecoverable error conditions in the MUC component and cleanup the corresponding user/roles. (I haven't figured out how to submit two independent PRs from the same fork.)\n. Seems benign to me. This magical new behavior should probably be documented somewhere also, perhaps in the plugin developer guide?\n. Looks good to me also.\n. Note there are individual commits in this PR to fix OF-460 and OF-830. The additional commit was just a housekepping merge into my fork from the upstream Ignite master repo.\n. I noticed that there is a binary (Config.class) included in this PR. Is that intentional?\n. Perhaps we should cherry-pick just the one commit actually making changes?\nc102452052bad21ce10b1319d1445aa6db756a33\n. I've done enough testing locally to be fairly confident that this solution is working for the main MUC and Group interactions. It seems pretty stable, responsive to both group membership and MUC affiliation changes in multiple clients (Pidgin and Psi). Please review and let me know if you have any questions or concerns.\n. Additional areas in need of testing for this feature:\n- LDAP-based groups\n- Clustered deployments\n- Group/MUC APIs (e.g. mucservice plugin, etc.)\n. Looks good to me, build is clean.\n. This patch looks fine to me.\n. Looks good to me ... thanks for helping clean this up.\n. This should fix the dependency issue, but will require some additional testing to ensure everything is still working properly.\n. I'm not confident that this patch represents a good fix. Please see my comments in the community link. Perhaps you have another copy of the Hazelcast jar(s) somewhere in your Openfire classpath?\n. We have not been able to reproduce this issue in our cluster plugin testing. Closing the PR for now, pending further research.\n. Based on this issue, I believe the problem is actually in the MINA library - async handling for longer-running I/O filter chains (e.g. with compression, TLS, etc) appears to be buggy. The recommended approach (in that post) was to use a Semaphore to lock the IoSession during I/O operations. My goal with the PR was to provide a testable quick fix, pending additional research into the MINA codebase.\nRegardless, I believe a ReentrantLock would accomplish essentially the same result if that is preferable.\n. The session-level isClosed check was redundant (also checked in the conn.deliver() method). Based on the submitted bug report, this was creating a trap door that would allow packets to be silently dropped in certain exception scenarios.\n. Per the cluster SPI change, our testing showed that under high load the cluster members may time out for synchronous task operations, leaving the properties for the corresponding remote session proxy in an uninitialized (null) state. Merely changing from NPE to ISE does not actually fix this problem, but it does allow a more consistent treatment throughout the codebase as we begin applying the required exception handling logic.\nSpecifically as it relates to RemoteSession, the clustering code needs to be updated anyway to better utilize caching rather than remote task execution to access a session's properties. More to come on this issue ... stay tuned.\n. Looks good to me also. Thanks Dele!\n. Not seeing any conflicts, so I will merge it for you. Thanks for your excellent work!\n. I'm ok with these recommendations, agree it's better to ensure a valid connection rather than trying to chase various exception conditions around elsewhere. Note that the real issue seems to be related to MINA's async handling for long-running I/O filters. More to come on that ... under separate cover.\nPer Flow's comment, we will need to run this through some regression cycles before releasing.\n. I've got additional changes to make here, so will merge and keep moving forward.\n. Ok, I was able to reproduce (and fix) the stack overflow locally. We now have a backup deliverer that will attempt to write Message packets into the offline store, and will drop IQ and Presence packets.\nThis PR is now ready for review / merge.\n. FYI - I believe this one is ready to go now. Further comments/concerns?\n. It would be good to merge this change in prior to releasing 3.10.0. The versions.txt is just documentation; the other change ensures that we use the C2S compression setting for BOSH rather than using the S2S compression setting.\n. FYI - we have been running this update for a while now under significant load and have observed noticeably fewer Jetty errors in the BOSH endpoint (particularly related to https://bugs.eclipse.org/bugs/show_bug.cgi?id=425422).\nAny chance we could get this pulled in?\n. We have been running with this build for a couple weeks now and everything seems stable. Any chance we could get this PR merged in?\n. Hi Dele - \nWith this proposed change, will we still able to use the admin console to stop/start and reconfigure the HTTP connector? For example, will I be able to change the HTTP port from 7070 to 5280 without restarting Openfire? That's what the initial patch was intended to fix.\nThanks,\nTom\n. Ok - thanks Dele.\n. Strange build failure (was working fine locally) ... but I am looking into it. The offending class (org.xmpp.packet.PacketExtension) is located in the lib/merge/tinder.jar file, which is presumably in the build classpath.\n...\nFollow-up ... this was caused by operator error (copy/paste) - should be good to go now.\n. This looks good to me. If we can get the merge conflicts cleaned up, let's merge this one into the pending 3.11 master.\n. This patch approximates the behavior that was observed in the pre-3.10 builds (before the async request/response was introduced). Although I agree that the spec recommends leaving the 'ack' attribute out of the response body when it is equal with the 'rid' from the corresponding request (an implied acknowledgement), I took the liberty of overriding this recommendation (in the spirit of the RFC-2119 definition of 'SHOULD NOT') in retaining the pre-existing behavior of returning an explicit ack in all cases.\nHappy to discuss further as needed.\n. Looks good to me. Thanks for the helpful summary of your analysis.\n. I agree this approach should work to resolve the deadlock. Let's give it a whirl.\n. Good stuff!\n. Additional random thoughts:\nI've wondered about the merits of providing a configurable means for sending unsolicited acks from the server to the client (S2C) to save the client from sending <r /> potentially for every request, depending on the client's tolerance for unacknowledged stanzas. For example:\n- We could add a server-side setting (global) to indicate the frequency of unsolicited S2C acks, default zero/disabled\n- Perhaps \"bend\" the spec to borrow/reuse the max='n' on the <enable /> element attribute to negotiate a count/time limit for unsolicited S2C acks on a per-stream basis (since we do not support the resume capabilities)\nNote that none of this is intended to hold up or presume upon this PR, just providing some input in context.\n. Nice improvements ... I think this PR is fine as-is; additional incremental work can follow as needed. \nFor example, I would suggest that we implement an optional/configurable timer task to send ack requests for sessions that have gone idle. This would minimize the number of duplicate stanzas that will accumulate (as many as (requestFrequency-1) per session) using only the counter-based ack approach. Perhaps three minutes would be an appropriate default?\nAlso, I recommend that the admin console be extended to provide access to the stream management configuration options (enable/disable, stanza count, timer duration, etc.).\nIf these suggestions are acceptable, I would be happy to add these capabilities after the PR is merged.\n. More FYI - to enable stream management via BOSH we will also need to update the following classes:\n- HttpSession (to advertise the <sm/> feature)\n- SessionPacketRouter (to handle the sm stanzas)\nI will add this to my list of follow-on work after the PR is merged.\n. Does it make sense to have StreamManager be an interface, with a configurable DefaultStreamManager behind it? This would be more in keeping with the other pluggable managers within Openfire.\nFor example, this would allow an installation to configure Openfire for ack only vs ack+resume stream managers. It would also enable plugin developers to provide their own stream manager implementations as appropriate.\n. WRT the BOSH handler, I was more inclined to use stream management for the websocket upgrade stream (which will reuse SessionPacketRouter) rather than BOSH proper, but the capability would be configurable in either case.\n. Looks like I need to rebase/squash this PR ... stay tuned.\n. @akrherz Excellent question ... I added the bits to make the SM feature optional so we can enable this plugin for 3.10.x. Thanks for the feedback.\n. @deleolajide Thanks for the feedback. Note that you will want to pull the latest websocket.js from the Strophe project (pre-release) to get a RFC-compliant implementation.\n. Makes sense to me, thanks for the contribution. We will take a look at updating the plugin to the latest upstream release (HZ 3.5.1), also including this patch.\n. This patch looks good to me, thanks for submitting. I will follow up with an update for the plugin metadata files to prepare a bugfix release for the Hazelcast plugin.\n. @akrherz At your convenience (not urgent), could you please review and merge this PR? \nAfter it has been merged, if you wouldn't mind, please also rebuild/publish the Hazelcast plugin to pickup the bug fix provided earlier today.\nThanks!\n. I know it's a little late in the process (since this one is already merged), but I have some concerns with this PR (and others related to the PluginclassLoader). There are many existing plugins that rely upon certain dependencies between the core Openfire class loader and the plugin class loader(s). I would not be comfortable making this type of significant change without extensive testing of existing plugins to ensure they continue to operate correctly.\nI will mention in the group chat as well.\n. I noticed there were a handful of functional changes here and there in several of the plugins and the admin console. Hopefully we can enlist a few testing volunteers to give these components a shakedown after the merge.\nOtherwise looks good. Thanks Guus!\n. The original intent of the secondary cache was to reduce the overhead associated with resolving groups from the list/map contents. However, it is a fair question as to whether the associated maintenance of this additional cache (via GroupEventListener) is really worth this perceived benefit.\nI will take a closer look at PR #315 before proceeding.\n. [FYI only - copied from PR #315 for context]\nI am comparing this approach with PR #311 and believe there might be a middle ground.\nIn this case, every item in the list (or map) must be evaluated with every pass (or call to \"includes\") to determine whether it is a group. This can get pretty expensive for large groups consisting primarily of user JIDs. Unfortunately as we have seen, caching the groups themselves creates a secondary group cache that cannot be easily maintained.\nI propose that instead we continue to use the secondary cache to track the \"known groups\" within the list/map, reducing the number of times the non-group (or ambiguous) JIDs must be evaluated and de-referenced. However, the cache will retain only the group name corresponding to the resolved group, not the group instance itself. In this way the group can be fetched from the primary cache when needed to search for implicit JIDs.\nI will submit the proposed additional changes here shortly.\n. I am comparing this approach with PR #311 and believe there might be a middle ground. \nIn this case, every item in the list (or map) must be evaluated with every pass (or call to \"includes\") to determine whether it is a group. This can get pretty expensive for large groups consisting primarily of user JIDs. Unfortunately as we have seen, caching the groups themselves creates a secondary group cache that cannot be easily maintained.\nI propose that instead we continue to use the secondary cache to track the \"known groups\" within the list/map, reducing the number of times the non-group (or ambiguous) JIDs must be evaluated and de-referenced. However, the cache will retain only the group name corresponding to the resolved group, not the group instance itself. In this way the group can be fetched from the primary cache when needed to search for implicit JIDs.\nI will make these changes under PR #311 and welcome further review and comments there.\n. I would like (somewhat selfishly, I admit) to see code coverage capabilities added to the new build, assuming this is something that can be easily integrated via Maven. I currently run a modified Ant build that uses Emma to measure test coverage with a suite of JMock test fixtures against our custom plugins.\nI realize that core Openfire does not have much by the way of test fixtures at this point, but perhaps we can begin work toward improving this as well.\nAgree this is a great start ... nice work!\n. Looks good to me. I've got a few custom plugins I can test this with, will merge and verify.\n. Looks like I hosed this one up attempting to rebase. Will retry under separate cover.\n. @sco0ter Thanks for the feedback ... in this case, the desired result of the operation is actually a string rather than an element. It ought to be more efficient to manipulate the string directly.\n. Agree this type of global routing change is not desirable. Perhaps this would be better solved via an explicit list of invitation JIDs generated in the MUC component.\nFeel free to open a thread in the community site for further discussion and feedback.\n. Thanks @wmz7year for your ongoing contributions! Definitely want to encourage you to continue supporting Openfire.\nThis proposed patch appears to be a temporary workaround that has been coded into the plugin. The HZ team indicated that this issue will be resolved in their next release (3.6). I would prefer to wait for that fix rather than apply this patch. My concerns are twofold:\n1) The package for the TransformerFactory is in a private namespace (com.sun.*)\n2) There may be other components within Openfire that depend upon the default setting\nPer the HZ team, for a temporary fix you can set the corresponding system property via the command line (using the -D option): \nSystem.setProperty(\"javax.xml.transform.TransformerFactory\",\n                \"com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl\");\nWhen HZ 3.6 goes final (currently EA) we will update the Hazelcast plugin to pick up the upstream fix.\n. Note that the binary versions of these sources are in this jar file:\nhttps://github.com/igniterealtime/Openfire/blob/master/build/lib/ant/ant-jive-edition.jar\nPresumably there are no licensing issues with these com.jivesoftware.* sources? \nDo they need any sort of preamble before committing them to Github?\n. Looks good to me. Nice to have some unit tests for a change!\n@sco0ter FYI I seem to recall there is a corresponding JSP or class somewhere in the Ignite community website also, although I forget exactly where. I believe it is called by the admin console to determine whether there is a newer version of Openfire available for download. Maybe @akrherz can remember if this component still exists?\n. See more information here: https://igniterealtime.org/issues/browse/OF-796 including a reference to the corresponding website JSP.\n. Would like a review of this from @guusdk @sco0ter @dwd @akrherz before merge please.\n. Ok - thanks all. I think we are agreed on the basic concept here, but I will make another update to incorporate some of this helpful feedback.\n. Review feedback applied. Note that we have done some initial testing to validate basic connection cases, but further testing (especially under load/concurrency scenarios) would be appreciated.\n. Looks good to me.\n. +1\n. +1\n. Incorporated review feedback.\n. I like this approach - the expected task result is now immediately visible. Let's go ahead and merge it in. I will also try to run it through a quick test cycle with the HZ plugin.\n. Thanks for the helpful documentation and your community post. Please see my earlier comment about reusing the BC implementation, but overall I think this is a fine approach.\n. Please also update build/lib/versions.txt for the new BC version.\n. I think this class has the methods you will need to generate a bcrypt hash and to check a password against a hash: org.bouncycastle.crypto.generators.OpenBSDBCrypt\nIdeally you would not need to include the class copied from the mindrot package.\n. +1 - thanks for hanging in there with us on this one, @trumpetx \n. Bad PR ... will close.\n. +1\n. Ok by me.\n. +1\n. +1\n. FYI - I believe @guusdk was recently doing some work around SSLJiveTrustManager.java. Otherwise +1 from me.\n. +1\n. +1\n. +1 - thanks for including the plugins :)\n. +1 ... are we planning to release a 3.10.4 at some point?\n. Agree we should give some consideration to the legacy deployments, perhaps setting the IANA default for new installations only (via setup)? Also, what are we doing about the SSL-enabled BOSH port (currently 7443)?\n. So I've been thinking more on this ... the IANA registry of just a single BOSH port implies the installation must choose between HTTP or HTTPS, rather than supporting both. This is also supported by the guidance in the spec.\nPerhaps we can modify the post-4.0 setup to set a new property (httpbind.secure) and use this as an indicator of a post-4.0 deployment. I think we could reasonably support default legacy configuration (7070/7443) if this new property is not defined.\n. +1\n. Hmm - hard to tell what was changed here. Is it possible to clean up the diff?\n. OK by me, +1\n. @sco0ter Good question ... the specific case I've seen occurs during the resend of unacknowledged stanzas from the new stream manager. Likely this condition is caused by a system-generated packet. I'll dig a little deeper to see if I can figure out which packets are causing the issue.\n. Following up on this - the specific packets we are seeing are server-generated Roster broadcasts, e.g. https://github.com/igniterealtime/Openfire/blob/master/src/java/org/jivesoftware/openfire/roster/Roster.java#L712\nI suspect there are other type of packets sent from the server. Perhaps we should take a pass through the server code to find them and set the 'from' attribute to the local domain, but this PR would act as an NPE guard in the meantime.\n. +1\n. +1\n. ok by me +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. Agree I'd like to see some of these very large plugin code bases in their own Ignite repositories in github if possible. Perhaps some of our \"plugin emeritus\" components (kraken, fastpath, etc.) could be dealt with in this manner also?\n. +1 - lots happening here, but looks benign ... will need testing, including xss/sanitization for new http parameters.\n. FYI for context: https://community.igniterealtime.org/message/248249\n. +1 - also updated the community post\n. ok by me +1\n. +1\n. ok by me +1\n. +1\n. +1\n. This feels like two unrelated patches/PRs. They should probably be separated as such. \nAlso, I did not see an implementation of the new abstract method declared in the MUCEventDelegate class.\n. You should create a separate branch in your cloned repository for each patch you would like to submit via PR. Please do not use your \"master\" branch for upstream pull requests. \nI will close this PR for now, but invite you to resubmit each of your proposed changes again.\n. One concern I have is the large size of the UUID creating a tax on overall network load and memory footprint, since the stream ID is used as the resource component of many JIDs.\nI would prefer to see this change implemented as a new StreamIDFactory (UUIDStreamIDFactory) that could be swapped in at runtime based on a configuration parameter, and perhaps also for C2S streams only. Please see the SessionManager class for an example of this approach (AuditStreamIDFactory).\n. +1 for the shorter stream id proposed by @guusdk \nI am still open to a UUID-based stream id if implemented via a separate StreamIDFactory.\n. +1\nLooks benign, but note that this will be a breaking change for any existing MUCEventDelegate extensions.\n. +1\n. +1\n. Agree in principle ... however in this case enforcing the strict behavior (in the server) effectively allows non-conforming clients to change the room subject without permission. This is because groupchat messages having both a subject and a body are (incorrectly) treated as subject change requests by these clients.\nI think the proposed implementation is correct given the problems with the specification.\n. OK - I actually have made the same assertions in the comments of OF-922. I will adjust this patch to conform to the spec by default, allowing strict=false via a configuration override.\n. ok by me +1\n. +1\n. +1 (again, for good measure)\n. Truth be told, I don't recall exactly what I was attempting to fix with my earlier commit. Likely it has been obviated by the recent move to NIO anyway. Let's go with this, +1.\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1 for tenacity\n. +1\n. +1 looks good to me\n. +1 in spirit, although I'm not sure 500 ms will be sufficient in all cases\n. :+1: \n. Thanks for your contribution.\nI believe you will also need to update the get() method to provide the additional parameter for the LOAD_PRIVATE sql statement.\n. OK - looks good to me. :+1: \n. That's a fair point ... actually upon closer inspection it seems element can't actually be null (under normal circumstances), since there is no default constructor. I'll just drop the null check instead.\n. :+1: \n. Looks ok to me :+1: \n. :+1: \n. Agree with @sco0ter here - I think you can instead remove the conditional statement that excludes the current session from the broadcast: if (!originatingResource.equals(address)) { ... }\nNot as sure about the initial presence broadcast referred to at line 626 - seems like that takes a different path, although that code also mentions the same section of the RFC.\n. This might be ok as-is, seeing that the recipientJID is used in local scope for subsequent routing requests. However, it also might not cover all the IQ cases ... not sure if that is intended here.\nTentative +1\n. :+1: \n. +1 Ok by me, much has changed with the 4.0 launch.\n. +1, but might need a tweak to sync minServerVersion\n. +1\n. +1\n. Given the latest changes, is this PR now in sync with PR #518?\nIf so, I agree we should try to encapsulate the room lifecycle like this. \n+1\n. :+1: \n. Seems safe enough to me, +1\n. Thanks for the feedback ... let me know if you agree this is acceptable as-is.\n. Hmm ... yes I have seen intermittent failures of the trusted chain test. I will trigger the build again, see if it clears itself up.\n. @guusdk - Appreciate the thoughtful feedback, agree that in some cases a failed task execution might be preferable to a potential delay or lack of stability. However, it is difficult to determine which tasks would be suitable for failure vs. delay. This approach effectively tells the server to make \"best effort\" by allowing the caller's thread to handle the requested work, which has the added benefit of slowing down the caller when resources become constrained.\nMy primary concern is that the Timer thread does not exit, as this creates an error condition that is unrecoverable. In our stress testing with this fix applied, we do see that the server will slow down under extreme loads, but it will now also recover after the load diminishes. At peak loads we observed that new connections were refused (usually via timeout), while the existing connections continued to operate, albeit with somewhat diminished responsiveness.\n. +1\n. I'm OK with this proposed change. +1\nThere are a handful of other small changes pending for this plugin that will be rolled up in the next minor release. At that point we will also bump the plugin's version number and update the corresponding changelog file to document the changes.\n. This is OK by me also. +1\n. This looks good to me also. Thanks for the contribution!. +1 - no tears will be shed  :)\nOn Nov 14, 2017, at 3:36 AM, Guus der Kinderen notifications@github.com<mailto:notifications@github.com> wrote:\nAh, yes, I'd not be sorry to see this one go. Just to cover our bases, let's get some feedback from others. @akrherzhttps://github.com/akrherz, @speedy01https://github.com/speedy01, @tevanshttps://github.com/tevans @wrooothttps://github.com/wrooot - thoughts?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/igniterealtime/Openfire/pull/921#issuecomment-344232025, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AAycN9ojvSovMwZpJkdUU4Oi8Heril8pks5s2Xs9gaJpZM4QdIV5.\n. I don't know if there is a formal coding convention for Openfire, but I am not a fan of wildcard imports. Let's be explicit about our dependency management and try to avoid pitfalls like this one. Most IDEs can take care of this automatically.\n. Does it make sense to refer to an authoritative source for this list? We could include it as a static file in the release build and load it during runtime. We could then also update it occassionally, as it does not change frequently.\n. For the sake of consistency, you might consider making another static constant for this string.\n. FYI - for details on configuring MINA for JMX, refer to: \nhttp://mina.apache.org/mina-project/apidocs/index.html?org/apache/mina/integration/jmx/package-summary.html\nIdeally we would like to register both the IoService as well as each IoSession. This provides helpful MINA-related counters that are then visible via the JConsole application (which can be enabled via the admin console).\n. It might make sense to reverse the semantics for this local boolean throughout this section:\njava\n    boolean isCertificateTrusted = false;\nthen only set the condition to true if the certificate passes all trust validations (not null, properly signed, not expired, etc.).\n. Do we want to to validate the expiration date of the trusted certificate also? To check if the certificate is valid, you could use something like this instead:\njava\n    try {\n        if (trusted != null) {\n            trusted.checkValidity();\n            usingSelfSigned = false;\n        }\n    } catch (CertificateException ce) {\n        // certificate is expired or not yet valid, wrap exception for outer catch\n        throw new IOException(ce);\n    }\nNote that if you do this, it would make sense to swap the boolean condition as suggested above.\n. Note: I added this \"belt and suspenders\" code to prevent recursion because the ComponentConnectionHandler still uses the standard PacketDeliverer as a backup.\n. Yes, good catch. I will update the PR for this.\n. Makes sense ... I will add.\n. I would prefer to see configuration properties for things like public network addresses.\n. Should we reset the counter(s) on subsequent <enable />? Spec seems a little ambiguous on this point.\n. Alternatively could use:\nnew PacketError(PacketError.Condition.unexpected_request).toXML()\n... initialized perhaps as a static for the sake of efficiency\n. Are there any XEP-0203 (delayed delivery) implications here? There's no way (currently) to know how long the unacknowledged stanza(s) have been retained. Might we also provide configurable support for a time-based acknowledgement request (<r />)?\n. Should probably also return a <failed><not-implemented/></failed> (sic) response here for the <resume /> tag, although admittedly a properly implemented client should not send it since we haven't advertised the capability.\n. Recommend providing a default here (\"Hazelcast Clustering Plugin\"), but note that plugin names may also be localized.\n. I would also recommend that the clusteredCacheFactoryClass be resolved via local scope at runtime, rather than defined as a static variable. The following can be removed from static scope and used here instead:\nString clusteredCacheFactoryClass = JiveGlobals.getProperty(CLUSTERED_CACHE_PROPERTY_NAME, \n                    \"org.jivesoftware.openfire.plugin.util.cache.ClusteredCacheFactory\");\nA corresponding change can be made for the localCacheFactoryClass in the initialize() method.\n. For an English locale, perhaps something like this:\nsystem.clustering.select-support-plugin=Select an item from the list of installed plugins that provide clustering support.\n. If we update to the latest bouncybastle (BC), we could use either of their implementations of this bcrypt generator (bcrypt, or its OpenBSD variant). I believe we build and distribute with 1.51 currently, and the latest is 1.53. The bcrypt implementation was added in 1.52. I would prefer to reuse the existing library implementation rather than adding this class, if possible.\n. Might prefer \"session\" here rather than \"connection\" (also below), but not a blocker.\n. I know it's beyond the scope of this PR, but it's worth noting that S2S connections are shared by all nodes in a cluster configuration. This should really be constrained using a shared cache lock rather than a local synchronized block. There has been some recent chatter related to this in the community forum.\n. Agree, let's set this back to trace (or debug).\n. Maybe we should consider using SessionEventDispatcher/Listener for stream management? That way we could clean up any unacknowledged stanzas regardless of what caused the session to end.\n. These strings should eventually find their way into the i18n properties.\n. More i18n needed (at some point) at various places in this page.\n. Are we dropping support for S2S compression?\n. Should this value be configurable?\n. Note this version conflicts with the changes proposed in #506 \n. I think each room needs its own instance, at least for the cached room subject property. Additional refactoring will likely be needed to make the history instance shareable across rooms within the MUC service.\n. I think that the CommonsLogFactory class still depends on this library. If we remove this, will we break the build?\n. ",
    "sventantau": "Hi Tom.\nI would like to discuss a csrf (cross site request forgery) protection for the web interface.\nWhere would be the best place to do that? Should I open another issue here in github? Or do you guys discuss that kind of stuff at igniterealtime.org?\n. Hi Florian.\nI started a discussion in the mentioned forum.\nWithout knowing the details of the 705 exploit: my patch only fixes parts of the problem since csrf is still possible. \nhttp://issues.igniterealtime.org/browse/OF-686\nhttp://issues.igniterealtime.org/browse/OF-687\nhttp://issues.igniterealtime.org/browse/OF-705\nare roughly about the same thing.. so you might want to merge them somehow..\nSince the mentioned exploit is non-free here my version for reference:\nhttps://dev.beastiebytes.com/root/sandbox/wikis/openfire-3.8.2-exploit\nThe problem with csrf protections is that they are useless once there is a xss vector present and you usually don't need xss to perform csrf. \nRegards,\nSven\n. ",
    "Flowdalic": "Please use http://community.igniterealtime.org/community/developers/openfire_dev for discussing openfire development.\n@sventantau darly asked if your commit will fix http://issues.igniterealtime.org/browse/OF-705, if it does, the issue key should be mentioned in your commit message so that the issue is linked to the commit.\n. We didn't agree on a common policy regarding pull requests yet. Usually it depends how big the commit is. Changes to small commits can usually appended and force pushed. Bigger commits should usually be reviewed, and the changes in-cooperated into a new commit. Once the pull request is ready for inclusion it should get squash merged so that they appear as single commit again in the 'master' branch. Also note that the sum of changes of a pull request an be easily viewed with git by diffing the pull request branches or via github (https://github.com/igniterealtime/Openfire/pull/16/files).\nI would say this commit is in between, both options are more or less good choices.\n. @tevans Is there any advantage keeping the current approach regarding versionless .jar files?\n. Doesn't build.xml simply merge all *.jars of build/lib/merge?\n. @deleolajide Doesn't this show that we could go with versioned jar's without modifying build.xml? The wildcard will match, no matter if we have the version in the filename or not.\n. Rebase needed.\n. Usually you rebase your changes on top of HEAD of the official master branch. Then update the pull request.\n. Hmm, they work fine for me. Which dependency is missing?\n. Ahh right, that file is created by ant build and only required for the ant build. It therefore can be removed from the eclipse config so that ecipse users don't have to run ant build. But I don't think that the other changes are required to build openfire with eclipse. I am also not sure if I think that it's a good idea to change the output dir.\n. Could you squash the commits into one?\n. Your commit contains many whitespace only changes, ie lines where the newline '\\n' was replaced with windows newline '\\r\\n'. Could you please fix this, so that it's easier to spot the actual code changes?\n. Github and git diff visualizer do handle indentation changes well, the problem is that you also changed the newlines to windows newlines:\n-            else if (\"update\".equals(type)) {\n-                plugin.updateUser(username, password,name,email, groupNames);\n-                replyMessage(\"ok\",response,out);\n-                //xmlProvider.sendInfo(request, response, presence);\n-            }\n\u2026\n+                else if (\"update\".equals(type)) {^M\n+                    plugin.updateUser(username, password,name,email, groupNames);^M\n+                    replyMessage(\"ok\",response,out);^M\n+                    //xmlProvider.sendInfo(request, response, presence);^M\n+                }^M\n. Strange, in that case we'll go with 29a52deac010290f9f59723cf883888aba1c966b\nSimply use\nbash\ngit checkout master\ngit reset --hard 29a52deac010290f9f59723cf883888aba1c966b\ngit push --force <yourRemote> master\n. Thanks for you contribution.\n+1\n. +1\nHow easy it is to remove XMPP session from openfire is a good demonstration how unnecessary that part of the old RFC 3920 spec was.\n. @xnyhps Can you comment on the the situation regarding xmpp session binding required by Adium to connect? Would be great if the client (and client libraries) wouldn't require session binding any more, so that we can drop the feature in the servers in 10 years or so. :)\n. Yep, openfire likely won't work on lower then 7 JVMs since 8e6f0ba, so we already dropped support for Java 5, 6 since then.\n+1 from me, and since it's a one liner going to merge right away.\n. Please squash the commits into one.\n. +1\n. Please squash them into one\n. perfect! thank you and +1 from me\n. I've updated this PR with a commit that only includes the semantic changes but leaves out the whitespace/non-semantic ones (compare to https://github.com/Flowdalic/Openfire/commit/cfd6a7909486a35a05d61a1bd43aafa5be34b312).\n. github is very restrictive when it comes down to displaying diffs.\ngit log -p -w 2d3623d shows the actual changes, but reveals that there are also some formatting related ones. A good commit does not change formatting of lines that aren't changed otherwise, to make it easy for the reviewer to spot the actual semantic changes. A commit should always change only what's absolutely necessary and keep the formatting including the line endings (which should be unix style). Please keep that in mind when submitting further pull requests. Or even better, update this PR with a commit that follows these guidelines.\n. Would be great if the text you have written for this PR would be part of the commit message.\n. Thanks. FYI closing this PR was not necessary, you could have simply force pushed a new version of the branch, then this PR would automatically become updated by github. Also it's best practice to have a branch that is not 'master' as origin.\n. Thanks for your contribution! Could you squash the commits into one and update the PR?\n. No need to close PRs, you can just update then to a new version with a force push.\n. Thanks for you contribution. However these are an awful lot of commits for a simple 2 LOC change. Could you update the PR so that it's a single commit? Also there is a typo in the commit message I believe: s/shane/shared/\n. @wmz7year please use the forums for support requests, github pull request are not the right tool for that.\n. I had prefered a solution like\njava\nfinal String[] protocolsToDisable = \u2026 // \"SSL SSLv1 SSLv2 SSLv3\";\nString[] enabledProtocols = sslFilter.getEnabledProtocols();\n// filter protocolsToDisable from enabledProtocols\nsslFilter.setEnabledProtocols(enabledProtocols);\nso that we don't end up disabling upcoming TLS versions for no reason.\n. > With my fork, I have to do that manually.\nThat's also not true. You would still get the \"delete branch\" button.\n. Another thought: If we need to synchronize the ioSession.write(), then how did we previously guarantee the stability of the stanza order?\n. If I'm not mistaken, shouldStoreMessage() is only invoked when the the offline message strategy type is 'store'. If type is e.g. 'bounce' then we would send a error message response back. And while I don't have the spec in front of me, I don't think that should be the case for carbons. So IMHO it makes sense to have two phases to decide what to store.\n. I wonder if Openfire has a boolean isSubscribedTo(Jid myJid, Jid otherJid). If not, then I think we should add such an method, because in XMPP there are just so many places where need to make decisions based on if an entity is subscribed (i.e. from and both) to anthers entity presence.\n. Thanks for your contribution. Unfortunately it's hard to spot the actual changes in your commit since it contains a lot of whitespace non-semantic changes. Ideally your commit should only contain semantic changes.\n. Should make CreateNodeResponse immutable, s/for/while/, and maybe a space between if and ( (like it's done everywhere else in the codebase). Other then that UACK from me. +1\n. I have pushed a new version, which, if it works as intended, hopefully makes all of us happy :). > Why do shallow checkouts not consistently work?\nMost likely a limitation by the service hosting the git (github in your case).. Shouldn't we also take carbons into consideration? I think we should check here if it's an carbon and not store the message then.\n. I guess @wmz7year meant that !equals() should be used instead of a comparison of the object references.\n. Good point, checking if the message is a carbon should go into https://github.com/igniterealtime/Openfire/blob/877c20eb2e3b54a702307190ac2bb99bc30c3013/src/java/org/jivesoftware/openfire/OfflineMessageStrategy.java#L82\n. I just want to point out that if we ever want openfire to get into debian or redhat/fedora, then we need to have a license header for every source file.\n. I guess it's intentional that you spelled out the increment instead of active++?\n. I would remove the following indentation level by adding a return at the end of the if's body, so you could remove the else clause.\n. I guess it's guaranteed that the stanza has a from and to attribute set, i.e. it's not null.\n. Don't we want to log e, at least with a debug log level?\n. Hmm, Code and comment in the same line is at least controversial in the Java community.\n. So the intention is to try at most every 5 seconds? This value may be a good candidate for a openfire property setting.\n. I'm a fan of defensive programming, and would put an else clause throwing an AssertionError here.\n. Appears that  while already enabled doesn't seem to be covered in xep198. I think the spec should state that sending a  after the SM has already been enabled is either a no-op (like it's implemented here), or result in a stream-error and subsequent stream termination (which I would prefer).\n. Sure, but I deliberately did put it into the runIntegrationTests script, so that one could git clone openfire && ./openfire/runIntegrationTests (Which does not work currently because of various reasons). Isn't \"mvn verify\" a no-op if the tests where already run and the source didn't change (it's the case with gradle but I am not sure about mvn).. ",
    "sco0ter": "Makes sense of course!\n. yeah, I know about this issue. We probably should clean up all the JavaDoc code at some point...\n. These eclipse configuration files should probably be removed completely anyway. IMO, IDE config files don't belong in a source repo, but should be ignored in gitignore.\n. Oh well ok. I am happy with it. Didn't see 8e6f0ba. Thought there was still a pending decision.\n. Looks fine for me, too\n. As one can read on wikipedia, the EPL is just the replacement for the CPL and is very permissive, so I think it's ok.\n+1\n. Sounds reasonable.\n+1\nTime to get the Maven migration done, which would make this change a one-liner.\nI don't think we need a Jira issue for this.\n. Note that this logic also removes the unpack logic from the Java code, which means old pack200 packed plugins won't load anymore. But I am not sure, if there are any pack200 compressed plugins out there, which would be affected.\nOtherwise I think, removing pack200 is a good idea.\n. +1, looks better to me than the previous fix.\n. Is a property really needed? Reading from this site: https://en.wikipedia.org/wiki/Transport_Layer_Security#Web_browsers all of today's browsers support TLS and I can't imagine someone is using Internet Explorer 3-6 even in a private network. And even if, it would be a private network which is secured against attackers by other means.\n. Yes, I thought about that too. But I couldn't get the enabled protocols, because the getter returned me null. I am not familiar with Apache Mina's SSLFilter though... maybe somebody has a better idea.\n. Not sure, what you mean with presence. It should behave like Example 15. in XEP-0030: Return all resources of the requesting user.\nI saw this in ejabberd, too.\n. I now see what you mean. You are right, this probably needs some security check. (as per XEP-0030 \u00a7 8 2.2)\n. I've found the canProbePresence method for that. Unfortunately I don't know where and if Openfire has a \"canSeeSession\" for directed presence. Anybody an idea?\n. I did exactly this (to fix OF-872 and OF-462) and then I encounterd the misbehavior in IQRosterHandler. So this should be fixed before.\n. I tried to build the old JSP pages with Maven and I got this error:\nFailed to execute goal org.apache.sling:maven-jspc-plugin:2.0.8:jspc (compile-jsp) on project xmppserver: The absolute uri: http://java.sun.com/jstl/fmt_rt cannot be resolved in either web.xml or the jar files deployed with this application\nI think the fixed taglibs should solve this issue. This PR is generally a good idea, although there are a lot of changes.\n. Please note, that I rebased this branch on master, resolved the conflicts and pushed it to the upstream branch guusdk-OF-953.\n. I don't know either...\n. @tevans: There's an Maven EMMA plugin\n. I've updated (rebased) the branch.\nThe Maven structure is:\n-/\n--dbutil (used by xmppserver)\n--i18n (used by starter and xmppserver)\n--starter (launcher and starter package, startup.jar)\n--xmppserver (nearly everything in the src dir, openfire.jar)\n--webadmin (admin plugin)\n--plugins\n---broadcast\n---...\nWhat it can do:\n- Run tests successfully\n- Generate JavaDoc\n- Assemble most plugin jars (without JSP)\n- Assemble admin plugin (without JSP)\n- Generate a source zip/tar.gz for distribution (as the download page offers it currently)\n- Build the startup.jar and openfire.jar, copy it in the right directory, so that Openfire can be run with java -jar startup.jar\nWhat it can't do:\n- Build executables for every platform (e.g. install4j, *.dmg, ...)\n- Compile JSP pages (waiting for PR #305)\n- Build some plugins (e.g. ofmeet) due to non-Maven dependencies.\nTodos:\n- Fix these issues\n- Move source code to the correct paths, e.g. /src to xmppserver/src/main/java\n. The problem with Tinder is, that there's only an old version (1.2.3), but Openfire uses 1.3.0-SNAPSHOT. which has a different API. (asBareJid()).\nAbout the i4jruntime.jar: I've asked here: https://community.igniterealtime.org/thread/57447\n(I don't think this class is used by anything)\nBut even if we can solve these two dependency problems, there are like 10-20 jars waiting in the plugins (especially ofmeet, kraken, stun), which uses jars, which are not in Maven Central and are also otherwise hard to find elsewhere. :-(\nNot sure how to best approach this problem (that's why I've excluded those plugins).\nI guess we can go the evil system scope way, but in my experience it only causes other problems (like the maven-assembly-plugin doesn't pick them up in the dependencySet).\nAnother alternative is to install them in the local repository first, as described here:\nhttp://eureka.ykyuen.info/2014/06/10/maven-include-system-scope-dependency-in-maven-assembly-plugin/\n. @lewie I haven't worked on the migration lately. The main showstopper currently are the native installer builds for Mac, Windows, Linux. These are currently configured for some non-public igniterealtime servers. I can't really test it.\nIt also uses install4j, which requires a license. i thought about migrating the Windows installer to Inno Setup, which is free. All in all, a lot of work for different platforms, which is not easy to develop/test on local dev machines.\nOther issues:\n- some plugins don't build, because they use proprietary or non-official artifacts, which aren't on Maven Central.\n- tinder.jar is not on Maven Central either (ignite's Tinder project).\n. But only old versions and not the one Openfire is using (1.3).\n. @lewie I know. Importing Maven projects is done with a few clicks and everything just works. Setting up Openfire manually now is usually a pain and you still need documentation to make sure, you don't forget something. I wish we could move forward with the migration, but the native installers are big hurdles.\n. No, the main issue is indeed the native installers from my point of view. Jars not being on Central is annoying but can somehow be worked around, like local file repo or installing them in the local repo with maven-install-plugin (I read it's the better solution, because artifacts are better found then, if you use them in maven-dependency-plugin).\n. I've expressed the current state of the migration and some thoughts here:\nhttps://community.igniterealtime.org/message/257043\nBetter move on to this discussion.\n. Nice to see some movement for Maven. I have nothing to add for the Spark project, looks pretty good!. @akrherz Yes I hope so. The hard part with this branch was building the distributables for the different OS. That's where this branch is primarily stuck.. No sorry, I am busy at work at that time. @guusdk You can start a thread in the forums for discussion.. I actually started with the default layout structure and moved the code into different modules and the correct folders (e.g. src/main/java). However, after some rebases I quickly realized, that it won't be sustainable in the long term. Therefore I decided to start with only the pom.xmls without moving .java files. Good to hear, it worked out.\nThe only issue with the non-default layout structure is that my IDE (IntelliJ) can't deal with it very well, i.e. you still have to setup your IDE manually.\nI agree, that merging to master is probably harmless and like your approach to maintain both Ant and Maven at least short term.. There's already the openfire-plugin-assembly-descriptor module which is shared by all plugins. Can't this be used somehow for common stuff?\nIn my company we have multiple Openfire plugins (all without any JSP) which eventually all derive from the company's parent pom and I'd prefer it this way as Greg said. However the plugin descriptor for assembling the plugins into the Openfire structure is nearly identically to Openfire's one.\nAll plugins share a relatively simple \"plugins\" parent pom, which only configures the maven-assembly-plugin for the jar file.\nI think ideally the openfire-plugin-assembly-descriptor and the xmppserver module (or interface of it) will be provided by Maven Central at some point with some, so that people only need to reference both, together with a snippet of the maven-assembly-plugin and the jetty-jspc-maven-plugin, which they can use.\nMaybe people don't even use JSP (like we) or they prefer another compiler/plugin or they prefer maven-shade-plugin instead of the assembly plugin. But most likely they want to derive from  their parent pom.. Some random thoughts on this:\n- I wonder if we could use a AtomicReference<State> state to get rid of the synchronized blocks, something like:\njava\n                if (!state.compareAndSet(State.RUNNING, State.CLOSING)) {\n                    return;\n                }\n- Having both Session.STATUS_CLOSED and State.CLOSED is confusing, isn't it?\n- We should consider implementing java.lang.AutoCloseable... just because.\n- The implemented behavior is called idempotent (closing a closed resource has no effect). Maybe it should be clear in the JavaDoc.\n- It looks well otherwise. I think it works, close() should only run once, therfore no recursion, no deadlocks.\n. @fowlerp I think you are right. state = State.CLOSED; is called outside the synchronization block as well. Read/Write access to class variables should always be synchronized on the same monitor, otherwise thread visibility issues may occur. Although it's surely hard to reproduce and proof here.\nAlternatively the mentioned AtomicReference would help as well.\n. Generally the new API is more performant, but I doubt it would make a significant difference in this case with just three property files.\n. +1\n. +1\n. rootNode.attributeValue(\"xml:lang\") returned null, even if this attribute was set.\n. Can you squash the two commits into one?\n. Thanks! +1\n. Thanks, I've fixed the JavaDoc and also increased the WebSocket plugin minVersion because it requires the new createClientSession(Connection, Locale); API.\n. I didn't test this with old installations, but I think it doesn't harm. We have set the port to 80 since at least version 3.8.2 and I can't remember somebody complained about the port being resetted to 7070 after installing a new Openfire version. But maybe this behaves different if the port hasn't been changed at all.\nThe issue was scheduled for 4.0.\nSSL port: I've checked the IANA registration and there was no registered port for BOSH over https, so I don't know what to do with it and left it as is.\n. +1\n. How could this happen? AFAIK Openfire overwrites the 'from' attribute on every inbound stanza.\n. Ok, just read the spec. These are indeed ok to have no from attribute.\nhttp://xmpp.org/rfcs/rfc6120.html#stanzas-attributes-from-c2s\n. +1\n. Change log level back to trace.\n. +1\n. +1\n. +1\n. Not sure, if the loss of ConcurrentHashMap does any harm (TreeMap is not thread-safe).\nThis is also somewhat related to OF-952, which suggests to have the plugin directories not lower-cased. But I think these two issues don't interfere with each other.\n. +1\n. +1\nI only wonder if there's a special reason behind the upgrade.\n. The only reason against the \"because we can\" is that I don't like binaries (jars) in the repository because it only crams it and cloning it will take longer and longer with every new binary (I hope I understood git correctly here). One of my motivation to move to Maven.\n. Don't ask, there are strange users... (I didn't create the user manually, the name was creates by another system)\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. Good find, I've changed them.\n. To be honest, I don't like to violate the spec and let buggy clients think they are doing it right. This surely won't encourage them to fix their bugs.\nI think XEP-0045 is clear enough on the subject change, not vague.\nAt least make the spec-conform behavior the default one.\n. But this is still a client issue. Why should we care about some non-conforming clients displaying a subject change, which isn't a real subject change as per the spec.\nIt sounds as if these clients treat \"subject + body\" in messages as subject change, but I fail to see, why this is Openfire's concern.\n. Commit messages and code changes are reasonable, looks good to me.\nI have only commented some questionable lines.\n1a1efa27 seems to invalidate the previous work of 422e7ff, so these could be squashed theoretically.\n+1\n. +1\n. This looks like everybody can now retrieve all the private data of all users, if they use the same name/namespace (usually if they use the same client). Certainly not what we want.\nI think it should ask for \"username\", \"name\" and \"namespace.\n. I don't know, if it's a good idea to return null from the toString() method. Maybe better return super.toString()?\nOtherwise +1\n. There are two very similar sections in RFC 6121: 4.2.2 and 4.4.2.\nOpenfire follows 4.2.2 (I think line 624 should actually refer to 4.2.2), but not 4.4.2.\nInitial presence logic first traverses broadcastPresenceToOtherResources() and later sessionAvailable(), making the initial presence being reflected twice.\n. +1, squash if you want.\n. On the other side, there are issues, which should not appear in the changelog, because they only reflect issues, which have occurred during work on 4.0.0, but not with any previous release. It will clutter the changelog and confuse users (e.g. if there are 3-4 bugs for XEP-0198, which is actually a new feature).\nSome of theses issues are (among others): OF-1002, OF-1003, OF-1005, OF-1009, OF-1025, OF-1028, OF-1036.\nIIRC, most PRs have an issue associated, unless they were either some internal code cleanup, refactoring or rework of other unreleased work.\n. I am still in favor of removing these other issues as well, which refer to \"work-in-progress\" of 4.0.0-only work.\n. Is that an admin UI for XEP-0048?\n. sure, why not.\n. Sorry folks, I have no time currently for this. We could as well close this one.. +1\n. +1\n. Yes, of course, that's fine.\n. +1\n. It's not critical, but as it's only a minor bug fix, we can put it in there.\n. I really dislike(d) the old and new XML string manipulation. It's fragile and ugly (as can be now be seen with these fixes). Isn't there a clever way to do that in a clean way by working with dom4j elements?\nThe same logic applied to the BOSH implementation should also be fixed in the WebSocket implementation.\nI also think there are more occurrences of addNamespace, which might cause trouble then.\n. Why the new SaslMechanism interface? I am pretty sure we can use the Java standard javax.security.sasl.SaslServer for that.\nWe have implemented custom SASL mechanisms in the past using a custom implementation of SaslServer and then using SASLAuthentication.addSupportedMechanism.\nIt worked fine, but doesn't seem to work any longer.\nI also suggest to deprecate the old method (addSupportedMechanism(String)) instead of removing it.\nBut my main concern is that I'd rather use javax.security.sasl.SaslServer instead. It's the standard interface for SASL and has served well.\nThere are already separate implementations, e.g. SaslServerPlainImpl, which implement SaslServer.\nWhy introduce a new abstraction/wrapper for them (SaslProviderBasedMechanism)? At the first glance it adds more complexity and forces developers to use a non-standard interface for SASL.\n. Thanks for taking care! I think it looks much better now (and even more so after squashing).\nOne last thing I've missed in my custom SASL implementation, is that any Exception thrown by evaluateResponse is treated as \"not-authorized\". There was no way to tell Openfire that it actually should be \"account-disabled\" (as an example), nor to pass a custom failure text to the client.\nMy idea back then, was to have an exception which derives from SaslException and which Openfire can understand.\nYou now introduced such an exception (SaslFailureException), which is a great idea, it only should derive from SaslException so that custom SaslServer#evaluateResponse can throw it and return a specific failure type + text to the client.\n. Yes, looks fine. Maybe consider squashing the commits.\n. A bit awkward to review, but looks well I think. Maybe in a future commit we can also pass a failure string (SaslFailureException#getMessage()??) to authenticationFailed() and to the the client.\n. Improved logic by updating the presence from within setRole and setAffiliation\n. Related issue: https://issues.igniterealtime.org/projects/OF/issues/OF-1146\n. I am skeptical, quote from the official Dom4j site:\n\nWarning: dom4j 2.0 is in pre-alpha stage. It is likely it can't be compiled. In case it can be compiled at random it is likely it can't run. In case it runs occasionally it can explode suddenly. If you want to use dom4j, you want version 1.6.1. Really.. Never mind, it seems the site is outdated.. My initial intent was to actually move the plugins' source code to plugins/xyz/src/main/javaeventually, in order to have a good Maven module structure and to follow the default Maven layout.\n\nYou know, I'd like to have it module/src/main/java, but as is, it's rather src/java (core) and src/plugins/pluginname/src, which is pretty messy.\nI'd rather see the source code move to the default Maven directory layout instead of moving the poms back a poor structure.. +1 I have seen this too, but it never really bothered me.. I can't imagine a system which depends on an UnsupportedOperationException being thrown (the existing functionality), so I don't understand Guus' reasoning here.. +1\nIf the JID's compareTo method is properly implemented, it should check for null resources anyway.\nComparing JIDs directly should be the preferred way instead of comparing string values.. Just as note: Now the caller of this method has no idea whether the delivery was successful or not, in both cases the method returns normally. I'd generally be careful about such design, but maybe it's appropriate here.\nFurthermore a race condition could happen here. If setDetached() is called after the null check, the conn will be null. The conn variable lacks some proper synchronization.. Instead of writing at least 22x duplicate code: booleanValue = ((value != null ? value : \"1\")); \"1\".equals(booleanValue) || \"true\".equalsIgnoreCase(booleanValue), can you put that code in FormField, please?\nIt's a central piece of code which is not only used by PubSub, but also by MUC and other code, therefore it should be handled centrally by DataForms/FormField.\nI suggest having a method FormField#getValueAsBoolean(variable) or some static utility method FormField#parseBoolean(String). I agree.\n. Just a very minor remark: Personally I like a while loop here better for readability. But eventually it doesn't really matter.\n. Yes, it is. There's no Channels.newWriter(Channel, Charset). The -1 is correct as well (taken from Channels.newWriter(Channel, String).\nThanks for reviewing!\n. I don't think this is required. Cache operations are thread-safe (as per JavaDoc).\n. Alternatively it seems that this class is in:\nhttp://mvnrepository.com/artifact/org.mindrot/jbcrypt/0.3m\n. I don't think it does make sense to deprecate a method, but at the same remove all the logic from it. Otherwise users of the method think it still works, but it doesn't.\nEither keep the logic or remove the method.\n. If it was me, I'd remove it. It should have been private anyway.\n. Yes, I think you are absolutely right. I've overlooked that. HistoryStrategy stores the messages as well. I think to solve it, roomSubject and the messages should be attached to LocalMUCRoom (or rather MUCRoomHistory), and HistoryStrategy should only hold information about the actual strategy.\n. Yes probably better. I can see if I can improve it.\n. Yes, I even did this before and it worked, but I was unsure about possible hidden side effects, although I couldn't see any.\nBut I thought the original author surely had its reason to create a copy every time.\n. @guusdk Seems reasonable. I've seen this IllegalAddException before when not creating a copy.\n. I'd prefer to change the type of the local variable implicitFrom to Map. It's cleaner imo (see http://stackoverflow.com/q/147468) and should fix the problem as well, according to https://gist.github.com/AlainODea/1375759b8720a3f9f094\nWe also don't need to revert anything.\n. It wouldn't make a difference here. But if we don't need its methods (like putIfAbsent), I'd always prefer the most generic interface, i.e. Map.\n. In Java 8, I don't see a difference anyway, because all the ConcurrentMap methods are default methods on Map now.\n. ",
    "zzglitch": "Sorry, I'm new to making pull requests.  I'll move the one line change into a separate branch and submit a new pull request.\n. We're using Openfire in a non-standard way where our application is hosting the XMPPServer.  Our application also uses Hazelcast so it is already in the main class loader which resulted in the hazelcast plugin instance getting associated with the wrong class loader.  We were hitting serialization errors where a hazelcast worker thread could not load some of the plugin classes.  Explicitly setting the class loader solved the problem for us.\n. ",
    "SvenBunge": "(Testet with Java7 on Ubuntu and Java8 on MacOS X)\n. Good idea. Then we should create a jira-ticket for this. Could you please raise a feature-request and I'll close this pull-request?\n. Sorry, I didn't saw the discussion. \n. I tested it with a full dpkg-build but it would be nice if someone review my changes who is involved with the current build process. Thanks.\n. LGFM: :+1: \nI've tested the connectivity with Adium to the server and it works without any issue.\nMaybe this update raises some new issues but I think it's really necessary. We should merge it to the master to test it with the nightly builds.\n. Sorry guys but the patch prevents clients like Adium to connect. I've cherry-picked the commit of sco0ter into the current master-branch and compiled the OF locally. With the patch the currect version of Adium is unable to connect. I've removed the patch and all works fine. (repeated the procedure two times to be sure!)\nThe code LGFM but I think we should wait until the most of the client software have removed the session handling.\n. Ohh I thought. Please see 8e6f0baca44ad1ef294f74a0707a19b4dbc985bc . It changes the ant build file to build with java 7.\n. I agree to you but at debian wheezy (current stable version) the default-jre-headless is an alias for openjdk-6-headless.\nSee https://packages.debian.org/wheezy/default-jre-headless\n. I've added all suggested changes as single commits. If necessary I could rebase first. But then all line-comments get lost.\n. Rebased with upstream and squashed\n. Looks good for me. Let's merge it?! :+1: \n(You could add my refactoring from my new notes but I think we could also skip them and merge the PR into the master.)\n. rebased\n. Hi @akrherz ,\ncommit 09c9dcb looks really good. But I think you could also delete some empty javadoc comments. I've added some inline comments to the commit.\nBut regarding commit 77c8b94: Merge-commits are bad. Your previous commit is applicable to the current HEAD of the master branch. You could easily rebase the branch (and the PR). When we'll meet us in the chat I could support you if you wish.\nSven\n. rebased\n. Hi @sco0ter ,\nI'm not sure, how we deal with properties in the best way. The current approach is based on java.util.Properties - see JiveGlobals.getProperty(..). And in my opinion the current code contains four deficiencies:\n- Propertykeys are not hold by a constant - and aren't aggregated in some property classes\n- Type of the property is not defined\n- The default value is not stored at one single point per property\n- Every codepoint that interacts with properties deals with error handling when reading/writing/transforming properties\nMy suggested solution sticks all together: Property-Name, Default-Value, Type and the logic to read, write and transform the values. It's a small layer in front of the old Property-mechanism - no full replacement.\nYour approach to write getter/setter method in a single class is also ok. But you have to write 4 methods for every property:\n- getter/is\n- setter\n- reset to default\n- delete\n  If one method doesn't exist, the programmer must add it to the the class. So we need strict discipline to write a method instead of an inline and direct property-deletion for example.\n  With my small wrapper you could also write such methods to clarify the context and the use of the property better. That's why I haven't deleted the property method in classes like ServerDialback.\nIf you want we could discuss such PR in the chat as well.\n. I've removed the typo. Thanks @sco0ter to find it. \n. What should we do? Merge this PR oder \"split it\": Remove pack200 from the build for 3.10 and later on we'll remove the decompression on startup?\n. That's no problem, but I thought there are some issues at the release builds that could be avoided with the patch. \n. I've splitted the PR into two parts. This part contains the decompression part. See #69 as well.\n. Added a linebreak at the end. I'm not sure that the old one got one but now the github warning is gone.\n. (This should help to prevent packaging issues like we had with 3.9.0 - see https://igniterealtime.jiveon.com/blogs/ignite/2014/02/05/openfire-390-has-been-released)\n. Quickfix: Install Openfire with this command: \napt-get install openjdk-7-jre-headless\ndpkg -i --ignore-depends=openjdk-7-jre openfire_3.10.0_all.deb\nTo avoid problems upon apt-get upgrade command you should edit the file /var/lib/dpkg/status: Search for Openfire and edit the Pre-Depends section. Replace both entries with openjdk-7-jre-headless.\n. Related to https://community.igniterealtime.org/message/247772\n. ",
    "akrherz": "Thanks, filed as http://issues.igniterealtime.org/browse/OF-781\n. @SvenBunge http://issues.igniterealtime.org/browse/OF-790\n. Filed as https://igniterealtime.org/issues/browse/OF-797\n. Thanks for the PR!  Please kindly add documentation to the readme.html for this.\n. @sco0ter I piggy backed it on OF-810\n. @sco0ter I investigated the plugins distributed by the igniterealtime website and found that only the clustering.jar file contained files that were pack'd.\n. Asked original patch author to review the PR, (I did some modifications to it)\n. Merging as Tom wants to get more testers and actively supports his code.  Thanks for this major contribution!\n. Filed https://igniterealtime.org/issues/browse/OF-849 for this change\n. @wmz7year we are extremely close to a beta release.  A fix just went in, which was the last big problem needing addressed before a beta.\n. @wmz7year https://igniterealtime.org/issues/browse/OF-857\nI have updated this PR with a current changelog.\n. awesome, thanks.\n. Hi @deleolajide , it would be nice if you could squash this PR down and get rid of the master merges.  I asked Flow for help with how to suggest doing this and he provided the following series of commands\ngit checkout -b myCleanBranch master && git merge --squash myNotSoCleanBranch && git commit -a\nAlso, he suggested reviewing the difference between merge and rebasing when working on a feature branch.  Thanks.\n. Howdy, I think the only nitpick left is to point out that you should create branches on your forked repo and not branches on the openfire project repo.  Then submit the PR from your branch.  Regardless, will merge this and update the website, thanks.\n. Dele, instead of approaching this from the position that you are forced to do it this way due to how you have your fork setup, why not ask for help on how to do this properly.  There is no reason why your workflow would not work with branches against your fork.\n. Dele, bamboo failed to build this\ntext\nbuild   29-Jan-2015 12:40:59         [copy] Copying 19 files to /home/j2ee-bamboo/bamboo-agent-home/xml-data/build-dir/OPENFIRE-NIGHTLYPLUGINS-JOB1/work/plugins-dev/jmxweb/target/web\nbuild   29-Jan-2015 12:40:59     [trycatch] Caught exception: java.lang.NoClassDefFoundError: org/apache/xpath/XPathAPI\nbuild   29-Jan-2015 12:40:59         [echo] Error building plugin: jmxweb. Exception:\nbuild   29-Jan-2015 12:40:59         [echo] /home/j2ee-bamboo/bamboo-agent-home/xml-data/build-dir/OPENFIRE-NIGHTLYPLUGINS-JOB1/build/build.xml:1496: java.lang.NoClassDefFoundError: org/apache/xpath/XPathAPI\n. @deleolajide thanks for the response. travis-CI actually failed, but was not reported due to how we were invoking ant.  sure, adding another PR and then testing travis-CI with it would be great\n. went against 3.10 instead\n. @sco0ter could you kindly review this, so we can merge it and get the RC out the door, thanks\n. @aultuser  awesome job to get signed up for github and submit an immediate PR :)  One item of note, it is best to submit PRs from branches and not your master.  When you submit a PR from your master, it will cause some troubles as upstream master move along without first taking this PR.\n. @aultuser I don't think that is necessary, but perhaps others have a more educated opinion.  Hopefully one of the devs can evaluate this one line patch quickly.\n. https://igniterealtime.org/issues/browse/OF-886 was filed for this.\n. Thanks Dele, woud you like to bump the release date in plugin.xml prior to merging this or just send it in :)\n. @Guenther93 great job with submitting your PR :)  One thing you'll want to consider in the future is to commit your changes against a local branch and not master, this will make things easier for you to maintain as master may not immediately take this PR.\n. Thanks @randylayman , this looks interesting.  We would need additional changes to make sure this new conf file is bundled with the various install artifacts generated by the build system.\n. @randylayman , check out the build/ folder.  In general, it may be best to wait for further feedback from folks like @dwd to make sure this type of change would be accepted so you don't waste any time with further improvements.\n. I wish this PR at least referenced OF-916 and OF-889 :)\n. Would be nice if this commit mentioned OF-889\n. Speedy verified that the md5sum of the jtds.jar file included in this PR works for him, merging.\n. @deleolajide Do you have any comments on doing this?  Is there anything specific your plugins needed with MINA 2.0.9 that does not properly work in 2.0.7?\n. @deleolajide Do you have any comments on this?\n@tevans I assume you mean by 'supports Openfire's new stream management' that it does not require it, so it can run cleanly on 3.10 ?\n. @speedy01 you have thoughts on this?\n. @deleolajide Do you have a comment on this change? It touches Ofmeet.\n. committed to master, thanks to @sco0ter rebase\n. @sengels thanks for the PR.  Would this change also need to set plugin.xml minServerVersion to 3.10.0 as well?\n. @sco0ter I have licenses of install4j to share with ignite developers for the purposes of local dev and testing\n. So that Openfire 4.1 is out the door and his its own 4.1 git branch, what's everybodies thoughts on this PR?  I know it is likely poor to do, but my preference would be to break master branch now and guilt any sympathetic devs into whack-a-mole fixing issues that come up.  I think this guilt would work for me at least, to attempt to learn more and help with the artifact building procedure...\nIf this goes into a dedicated branch, it seems like the eventual merge back to master would be extremely painful, but perhaps I am wrong.... @sco0ter I think there is some appetite to make maven migration happen for the next major Openfire release of 4.2.  Are you able to commit some time to help with this effort in the coming weeks/ few months? Thanks for the consideration!. @sco0ter Great, thank you!  I have licenses of install4j to share, if you want to work on things there.  I think @guusdk did a bunch of stuff with Smack to get it working well with install4j to generate builds there.  Otherwise, we have weekly Google Hangouts at 1430 UTC on Fridays, if you'd like to stop by and we could discuss a plan of action with this?. @sco0ter , this PR was discussed again at today's Hangout meeting and @guusdk expressed a desire to review this PR prior to the next Hangout (17 Mar 1430UTC) and merge it!  You think you can join us at the Hangout on Friday to discuss the plan of attack for resolving any outstanding issues found?. The button was green, so green means good and I pushed it. This patch was tested on Ignite and appears to be working, thanks @tevans \n. Great, thank you.\n. @tevans would you kindly review this PR?\n. I have email correspondence that I think covers our usage, we'd want to delete these after the maven migration anyway\n. Filed https://igniterealtime.org/issues/browse/OF-973\n. https://igniterealtime.org/issues/browse/OF-972 filed\n. https://igniterealtime.org/issues/browse/OF-969  created\n. Thanks for your contribution, but you are mixing a number of code changes into one PR.  Please isolate this property listener change into one commit.\n. @trumpetx Your first commit has an unrelated change to build.xml\n. cherry-picked as https://github.com/igniterealtime/Openfire/commit/3c89a459d6d59043f50b3be76e6f476bc3be0bcf\n. Great, thank you.\n. https://igniterealtime.org/issues/browse/OF-971 filed\n. https://igniterealtime.org/issues/browse/OF-970 created\n. How is the .gitignore change related?  Yeah, it is no big deal to do it.\n. thanks, filed as https://igniterealtime.org/issues/browse/OF-975\n. So as I look at my deployments, I don't see httpbind.port.plain nor httpbind.port.secure persisted to the database.  So for an upgrade situation, it would be difficult to account for this situation.  I'd think clearly denoting to people that they need to set the system properties prior to upgrading, if they wish to keep these ports would be sufficient?\n. Is the minVersion of 3.10.0 you have set correct?\n. @Rajeshwar90  try this: http://bamboo.igniterealtime.org/browse/OPENFIRE-PB3-23/artifact/shared/Project-Plugins/\n. @Rajeshwar90 This pull request is not a support forum for your problems.  Please use the Community Forums.  https://community.igniterealtime.org\n. I asked travis to attempt to rebuild and it failed again in the same matter, strange.\n. bzzzz, did not make green, so we shall close as not necesary.\n. reopening to see what travis thinks about my PR now :)\n. closing, PR#457 was a better route\n. PR#424 has effectively the same patch, will take the liberty of closing this one :)\n. To note, when we first moved Openfire to github, I rewrote the history to strip out the JRE artifacts found in the repo, so the current situation could have been much worse :)  I dunno if stripping out old JARs is a good idea as it would mean older tags would not build properly.  Stripping JREs only impacted ant build artifacts and not building openfire itself.\n. @matt-tucker Do  you, by chance you are listening on github, have thoughts on this?\n. @dwd, yes, I can do that prior to the final merge of this\n. Hi @deleolajide , do you think these changes could be picked back onto the 3.10 branch of ofmeet? Otherwise, we can't really place this version on the website for download at the moment :(\n. @deleolajide , yeah, I should have looked more closely at it.  Thanks for your patience.\n. +1, when travis is happy, I am happy\n. Testing this PR on Igniterealtime now, thanks @guusdk \n. Testing this PR on Igniterealtime now, thanks @guusdk\n. Testing this PR on Igniterealtime now, thanks @guusdk\n. +1 for it working :)\n. Okay, updated PR:\n1. Changed release date to today\n2. Removed OF-872 from changelog\n. @sco0ter you think you can update this PR prior to us doing a 4.2 release?  We don't have a date in mind, but hopefully sooner than later!. closing as per last comment, can reopen if there is a desire to make it happen.. +1\n. Hi @mikesol  , thanks so much for your contribution to Openfire!  We are always looking for new volunteers to help out with the code base and would love to hear how Openfire is working out for you. Please feel free to stop by our developers MUC (open_chat@conference.igniterealtime.org) or here to say hello.\nI have filed OF-1085 to track this change.  Thanks again!\n. Hi @dchinmay  , thanks so much for your contribution to Openfire!  We are always looking for new volunteers to help out with the code base and would love to hear how Openfire is working out for you. Please feel free to stop by our developers MUC (open_chat@conference.igniterealtime.org) or here to say hello.\nI have filed OF-1084 to track this change.  Thanks again!\n. Filed as https://igniterealtime.org/issues/browse/OF-1082\n. Hi @derekmcl , thanks so much for your contribution to Openfire!  We are always looking for new volunteers to help out with the code base and would love to hear how Openfire is working out for you. Please feel free to stop by our developers MUC (open_chat@conference.igniterealtime.org) or here to say hello.\nI have filed OF-1083 to track this change.  Thanks again!\n. @dchinmay Thanks, but please check out the commits in this PR and correct please\n. Thanks, I filed OF-1091 to track this PR.\n. I filed OF-1090 on this, thanks for reporting\n. We have a SSL test that sometimes fails\n. Hi @aberenguel , we are sorry that this PR got missed prior to 4.1 Release :(  Do you have any updates for it prior for consideration into 4.2 ?. @dwd, You have thoughts on this PR?. @dwd we really need a verdict / plan for this PR prior to getting close on 4.2 release, any ideas?. @guusdk do you have thoughts on what to do with this PR?. @aberenguel we are rapidly approaching a beta for 4.2 release.  Are you able to address Guus's feedback?  Sorry again about the delays with looking at this.... obsoleted by #923, thanks @aberenguel for getting this going, if you can test current master, that would be great. OF-1093\n. Not to be picky, but I would have preferred to see the log4j update handled in its own ticket, so to help the changelog.\n. @guusdk thank you!\n. This patch was not sufficient to stop the ghosts now on ignite, will try this again with deliver() check commented out too :(\n. So, no ghosts on igniterealtime's Openfire with this most recent commit applied.  So decision time!  Sacrifice OF-464 in favour of OF-829?\n. @dwd, could I get a verdict on this?  I'd like to follow up with a PR for better systemd support\n. My experience with bumping the Epoch is that it should be avoided at all costs.  It is an absolute desperate measure when all else fails.  The reason being that every other downstream RPM builder would need to bump too, to prevent our RPMs from trumping theirs.  I may be incorrect about this.\n. For RPM users, one item to note...  Since the current openfire is distributed as i386 and this new one is either noarch or x86_64, you need to provide rpm a flag to get it to cleanly upgrade.  It appears rpm -Uvh --ignorearch will cleanly upgrade your pre 4.1 version to 4.1\n. Greetings.  Thanks for your attempted contribution to Openfire.  Unfortunately, this commit is not sufficient.  Please address the following.\n- database changes are made via the upgrade scripts, check out the numbered folders within src/database/upgrade\n- Your text editor should understand files that use CRLF and not attempt to modify them.  It is a long standing issue of the Openfire code base that such files are mixed together.\n- Database changes should be made in a consistent matter to all supported databases, so we have consistent behaviour with each.  You'll need to add these same indexes to the other databases with your commit.\nHopefully this all is not discouraging to your efforts.  Thanks again for your offer to help!\n. cherry picked as https://github.com/igniterealtime/Openfire/commit/279a998fd8727c49eecb8037d590de4ae672d8cc\nI am unsure what happened with your second commit of changes\n. Thanks for your contribution, I have filed OF-1127 to track this.\n. @danielhams no worries, we can also squash with the merge action as well.\n. Hi @godly , I agree with you, but this does match what is found in openfire.xml\n<network>\n        <interface></interface>\n    </network>\n. I have adjusted the bamboo debian host to build JRE 1.7 (openjdk) now as well.  @Guusdk this is what we 'agreed' on, right?\n. paging @tevans on this discussion :)\n. I've filed https://issues.igniterealtime.org/browse/OF-1157\n. PR updated, awaiting Travis blessing...\n. Thanks, I have filed OF-1168\n. OK, thanks to @dwd hint, I think I have this PR straightened out\n. @Whissi Thanks for your feedback.  Can't you install default-jre-headless to satisfy the requirement and just edit /etc/default/openfire or use alternatives to set your default java?\n. can you describe how the package oracle-java7-jre is standardized within Ubuntu / Debian?\n. This truststore is now being dogfooded on igniterealtime's Openfire\n. @guusdk my understanding is that when you install Oracle JRE 8, this also provides the java7-runtime-headless as well. See https://github.com/igniterealtime/Openfire/pull/624#issuecomment-241257187\n. Thanks.  My thought on this was to replace it with the latest Openfire Forum discussion threads RSS.  What do you think of that?\n. Appears to be a misfire.\n. @guusdk ah yes, you can mouse over and get the full text as a tooltip\n. @GregDThomas Please consider bumping plugin.xml so that we can release this change\n. Do we need to bump plugin.xml, so that this change actually goes out to folks using it?\n. If this script always failed from the beginning, then it would have never been applied to current installs?  Am I correct?\n. @guusdk , but the point here was that Oracle never supported two LONGs in the same table, right?\n. @Hammington Does this addres https://issues.igniterealtime.org/browse/OF-817 ?\n. cherry-picked patch onto master. So PR #668 got merged, so how does this code fit in with that code?  Can they coexist?. This PR will need refreshed once approved as more Jira issues have been resolved in the interim.. Uh oh, I don't think this is Jira issue OF-1123, or is it?. Yeah, #698 is right, my bad :(. great, will merge once green. I think this PR is right, both capabilities need to be supported for SCRAM to be supported by the Provider.. This is targeted for Openfire 4.2.0 release, which does not have an ETA at the moment.. I was worried that this change would fail if the admin account does not exist, but it appears that the AuthProvider#authenticate will trap the UserNotFoundException and instead return the UnauthorizedException, so should be OK. @guusdk hopefully I have now done just that.. @guusdk sure, I did igniterealtime/Smack#99 , igniterealtime/Spark#283, and igniterealtime/IgniteRealtime-Website#58. I did some looking around and it appears to be that IBM, Oracle, and OpenJDK all support TLSv1.2 in Java 7+.  Setting this to TLSv1.2 should gracefully degrade back to TLSv1 if necessary.  I think this change is fine without adding a property, but am not against it.  Just want this in for the 4.1.2 release :). Please ask questions in the Community Forums. @Gugli sorry there has been no review, will set this against 4.2 release in hopes of getting one.. @aberenguel thank you so much for looking into this, shall I merge this revert for your new PR to then come in new overtop this or would you rather simply correct what's currently in master?  Also, what do you think of the additional change @guusdk made with your original change?. I've pulled your changes into this PR, thanks!. pulled that change too. @aberenguel , the development team discussed this today and here's what we wish to do.\n\nRevert the previous changes and make an Openfire 4.1.3 release\nKindly ask that you resubmit your subsequent changes as a new PR and we'll consider for 4.2.0, I can certainly do this for you, if you would like.\n\nThanks again for your efforts on this.  I just want to get a 4.1.2 fix out the door and our main coding devs need more time to consider your additional changes.\n. @aberenguel I've elevated your Jira account privs to allow creation of issues.  So please create issues as you see fit and associate your PRs with them, thanks!. The current travis build failure seems to be\n/home/travis/build/igniterealtime/Openfire/src/java/org/jivesoftware/openfire/group/GroupManager.java:[21,31] package org.apache.commons.lang does not exist. thanks @GregDThomas , I updated and rebased. @guusdk we good to go now on this?. rebased, will see what CI says. As per weekly discussion, going to take this.  Thanks for the patience @aberenguel . This PR need an update for maven? :). @dwd I think I addressed your feedback, PR ready to go now?. Tested and verified on forums. @guusdk and I discussed this patch today on our weekly hangout and are going to run with it and see what fun we have this time :)  The patch should be good, but it seems we were hitting side-effects within MINA that was causing this type of approach to fail.  Will gen up a 4.2 build for igniterealtime and run with it!. @dwd, is this one of the pubsub fixes you mentioned having also fixed?. @dwd Is this still targeted for Openfire 4.2 release?. Closing this as I think it is diverged greatly from master and can always reopen if I am wrong :). @GregDThomas yes, or a web interface. An alternative here may be to set a different session cookie variable name than JSESSIONID and perhaps have it be custom for both HTTP and HTTPS connections.  I could only figure this out globally by modifying src/web/WEB-INF/web.xml\n<session-config>\n    <cookie-config>\n        <name>of_jsessionid</name>\n    </cookie-config>\n</session-config>\nSo I'll have to punt on any more elegant solution. @guusdk I agree about your style suggestion and have modified the PR. Thanks for doing this!  The diff seems straight forward to me. cherry-picked  819eb2e. Thanks @guusdk !  I pulled this in, built it successfully and played with the interface\n\nThe concept of Group admins remains, is this even used anywhere?\nI like the disabled UI for shared group\n\nI tried various things and didn't find any bugs.. LGTM, other than the release date being 2 days in the future! Maybe this PR is from the future (mind-blown). Hi @deleolajide Your PR mentions \"fixed jmxweb for openfire 4.1.5\", but the maven changes were never made to 4.1 branch, but 4.2.  Is this a typo or does this fix need to be made to make jmxweb work for 4.1.5 openfire?\n. @GregDThomas Thanks for the patch, your git commit history is rather garbled though.  In general, it is best to make changes on an isolated git branch created from master and then submit the PR from that branch.  . Should OF-1302 appear in this commit?. @GregDThomas Sorry about the confusion, our debian bamboo build agent is fouled up at the moment and I can't seem to figure out how to fix it :(. @Fank  https://github.com/surevine/openfire-docker maybe. @guusdk I think the other tabs are good as they are effectively filters on the all.log information.  Especially when the server is in debug mode. @Fank thanks, please bump the plugin's plugin.xml so that this change can be immediately released as well.. @Fank thanks, but you need to bump the date in plugin.xml and update the changelog.html. hopefully, you can easily rebase this to current master too now, if not, I can push this over the finish line for you, if you like.. OK, I attempted to rebase this and update the changelog, did I get it right?. bamboo was failing with, so this should fix it\nbuild   07-Oct-2017 07:31:36    [install4j] Loading config file /var/atlassian/bamboo-home/xml-data/build-dir/OPENFIRE-NIGHTLYWINDOWS-JOB1/build/installer/openfire.install4j\nerror   07-Oct-2017 07:31:38    [install4j] install4j: compilation failed. Reason: The Java minimum version for the project must be 1.7 or higher.\nerror   07-Oct-2017 07:31:38    \nerror   07-Oct-2017 07:31:38    BUILD FAILED. @GregDThomas Thanks, please consider opening Jira issues ahead of the PR so that your code change can be associated with an issue.  Currently, the issue workflow is how we generate the changelog :/. Thank you very much.  Please consider including a commit that bumps the version in plugin.xml and updates the changelog.html, such that we could release an updated plugin once/if merged.. I attempted to grok this, but failed.  It seems like the occupant check should be against the nickname and not the full JID as what happens if I attempt to join the room twice and pick a nickname already used by another user.  It seems this change would let me in.. attempted to dogfood and got this NPE\n2017.10.27 16:55:57 org.jivesoftware.openfire.session.LocalOutgoingServerSession[Authenticate local domain: 'igniterealtime.org' to remote domain: 'conversations.im'] - An exception occurred while authenticating remote domain!\njava.lang.NullPointerException\n    at org.jivesoftware.openfire.session.LocalOutgoingServerSession.authenticateDomain(LocalOutgoingServerSession.java:132)\n    at org.jivesoftware.openfire.server.OutgoingSessionPromise$PacketsProcessor.sendPacket(OutgoingSessionPromise.java:259)\n    at org.jivesoftware.openfire.server.OutgoingSessionPromise$PacketsProcessor.run(OutgoingSessionPromise.java:237)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n    at java.lang.Thread.run(Thread.java:748). sorry, I misfired the commit to fix the NPE with 9b5f7f47b66942c0de2146f055d60a6ced2bdf00. My only comment here is that XMLLightweightParser.java implements a property listener to change this \"on the fly\", it would be nice if this code did it as well, or is that possible?. Oh, this is created for each new websocket connection?  If so, no worries then about a listener.... @dwd What typo are you referencing?. Where's the subsequent \"I hate CRLF\" commit? :). Seems reasonable to me, interesting that the MUC ignore error packets has been around for 10 years, it seems.  I thought this was a more recent change than that.. Sorry for the arbitrary comment on this PR, trying to get our Jira synced on the status of this PR :(. wasn't a clean cherry-pick to 4.1 branch, so did not do it.. @dwd won't kraken's release and minimum openfire version need bumped as well?. Files not hit by this\n$ find . -not -type d -exec file \"{}\" \";\" | grep CRLF\n./build/installer/openfire.install4j: XML 1.0 document, ASCII text, with very long lines, with CRLF line terminators\n./build/projects/Openfire.ipr: XML 1.0 document, ASCII text, with CRLF line terminators\n./build/wildfireHome/embedded-db/wildfire.script: ASCII text, with very long lines, with CRLF line terminators\n./src/bin/extra/embedded-db.rc: ASCII text, with CRLF line terminators\n./src/bin/openfire-dev.bat: DOS batch file, ASCII text, with very long lines, with CRLF line terminators\n./src/bin/openfire.bat: DOS batch file, ASCII text, with CRLF line terminators\n./src/plugins/kraken/lib/patches/smack.sasl.patch: unified diff output, ASCII text, with CRLF, LF line terminators\n./src/plugins/rayo/src/demo/confphone.mxml: XML 1.0 document, ASCII text, with CRLF line terminators\n./src/plugins/rayo/src/demo/make_confphone.cmd: ASCII text, with CRLF line terminators\n./src/plugins/inverse/classes/inverse/css/images/arrow.svg: ASCII text, with CRLF line terminators\n./src/plugins/inverse/classes/inverse/css/images/bgbl.svg: HTML document, ASCII text, with CRLF line terminators\n./src/plugins/inverse/classes/inverse/css/images/bgtr.svg: HTML document, ASCII text, with CRLF line terminators\n./src/plugins/inverse/classes/inverse/css/images/dark-arrow.svg: ASCII text, with CRLF line terminators\n./src/resources/jar/META-INF/mime.types: ASCII text, with CRLF line terminators\n./src/test/throttletest/build/ThrottleTest.ipr: XML 1.0 document, ASCII text, with CRLF line terminators\n./xmppserver/target/classes/META-INF/mime.types: ASCII text, with CRLF line terminators. OK, gonna piggyback now a change to replace all tabs in those same files with four spaces. So the last commit should be the only code change.  I assume it is necessary as the trailing line feed is now interpreted by the JSP compiler as the need to print an extra empty space?. cherry-picked as 56ac5211782bcbf5feb3853e64b1698bcea550fb. Tested this and was not able to reproduce, great!\nRegarding the admin console addition, looks good to me.. Thank you!  I have filed OF-1431 , if you want to update your commit message to use that issue, please feel free.  No biggie though.. I restarted the travis-ci failures to see if this PR was good now, but it may need some work yet?. Note, maven builds are currently busted due to unrelated issues to this change.. I modified the mysql change and actually tested it on mariadb, so maybe it is good?. Needs updated, don't merge yet :). rebased and updated, watching CI now. @wrooot Is this something you can glance over?. Thank you very much for doing this, let us see if @srt is good with this.... I've directly emailed @srt now about this.  This forum post regarding the plugin mentions a GPL license.. I needed to update the plugin versioning as we still support ant builds :/. Thanks, I was able to build this with ant and it appeared to run just fine on Postgresql and Mariadb.  Can you elaborate some on what will change with the database stats / jmxweb plugin?. Tagging @deleolajide here since it touches jmxweb, but this seems ready to go.. Thanks! Perhaps @PGoski can review this change?. @k-misztal my guess without digging further is that plugins are built on ignite with ant, so any lib additions need to be manually included for now.  hopefully this changes in the near future. @k-misztal I suspect so, adding that jar to the plugin's lib/ should suffice. thanks @k-misztal , newly build plugin available on website now.. This PR was discussed today at the weekly meeting and was decided to merge and continued to test and iterate forward on this task.. Thanks @wrooot . @deleolajide I think what we are striving for here is to generally remove plugins from the Openfire github source tree and start placing these plugins within their own dedicated igniterealtime organization repositories.  The recent migration to maven certainly makes this much easier and the recent example plugin I think is the goal in mind here.\nCI and our bamboo can handle the auto-build failure stuff.. @deleolajide \n\nIf I did not know any better, I might think it was personal.\n\nDrop the drama.  You know as well as anybody that we are desperately short on developers.  . Great, if you got a plugin jar file to distribute, please let me know where it is and I'll add to the website!. Eh, I tried and it ended up crashing our JSP page, will investigate more later\n```\norg.apache.jasper.JasperException: java.lang.IllegalArgumentException: Comparison method violates its general contract!\n    org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:565)\n    org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:481)\n    org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)\n    org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)\n    javax.servlet.http.HttpServlet.service(HttpServlet.java:742)\n    org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n    com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:129)\n    com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:77)\nRoot Cause\njava.lang.IllegalArgumentException: Comparison method violates its general contract!\n    java.util.TimSort.mergeHi(TimSort.java:899)\n    java.util.TimSort.mergeAt(TimSort.java:516)\n    java.util.TimSort.mergeForceCollapse(TimSort.java:457)\n    java.util.TimSort.sort(TimSort.java:254)\n    java.util.Arrays.sort(Arrays.java:1438)\n    org.apache.jsp.projects.openfire.plugins_jsp._jspService(plugins_jsp.java:317)\n    org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)\n    javax.servlet.http.HttpServlet.service(HttpServlet.java:742)\n    org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:443)\n    org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)\n    org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)\n    javax.servlet.http.HttpServlet.service(HttpServlet.java:742)\n    org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n    com.opensymphony.sitemesh.webapp.SiteMeshFilter.obtainContent(SiteMeshFilter.java:129)\n    com.opensymphony.sitemesh.webapp.SiteMeshFilter.doFilter(SiteMeshFilter.java:77)\n``. I spent a while attempting to resolve this and can't.  the common suggestion is to set a JVM propertyjava.util.Arrays.useLegacyMergeSortto workaround this, but alas, that feels odd to me.  Even worse, I can't reproduce this on my development laptop and the jar file is used just fine by the website.  sigh. I implemented thejava.util.Arrays.useLegacyMergeSortworkaround for ignite's tomcat and the plugin is now available for download from there.. @GregDThomas your comment is duly noted!. rebased and updated, anybody with thoughts other than the ongoing maven versioning :). updated PR now and am smoke testing current 4.2 branch build on Ignite.  @dwd may we proceed?. Anybody with thoughts on what to do with this PR prior to a potential 4.3 beta release?. ping @guusdk on this one, probably good to have it go in before all the maven/install4j work gets done :). @GregDThomas  done. I'm a day late and multiple dollars short here, but why are there now new jar oflog4j-api-2.11.0.jarandlog4j-core-2.11.0.jarfiles inbuild/lib/merge?. @flipflapslap the code has not been merged yet. Getting LDAP testing for Openfire is tasked for @speedy01  :)  Will merge this and ping him prior to release of 4.3.0 for testing. @speedy01 from where did you get the current nightly of openfire?. @speedy01 my bad, I have now fixed the [website nightlies](http://www.igniterealtime.org/downloads/nightly_openfire.jsp). @Redor thanks, is there an actual code change here associated with OF-1535 ?. Just to verify that last commit is the change you wanted? Looks like a massive whitespace change. Can we please get a verdict on this PR prior to our beta release?. @guusdk @GregDThomas Do we have a verdict on this PR? . I had trouble cherry-picking this change back to the 4.2 branch, but haven't allocated much time into resolving why.. Hi @GregDThomas what's the status of this PR?  Attempting to get things triaged . @guusdk thanks for your bamboo hint, this is done.. @GregDThomas Does this mean white-space pings would not be logged?. @GregDThomas some XMPP clients do not do IQ-ping, so they do whitespace pings.  I am unsure if it is important to check those in the generated logs or not.. @GregDThomas done.  FYI, the size of the plugin went from 15,855 bytes to 1,675,349 bytes.. whoa, I did something bad here with git.  Sorry Boggling.. whew, awaiting CI before merging. I rebased this, but alas it moves the requirement to Openfire 4.3.0, so perhaps should wait for merging as we have no plugins updated in 4.2 branch.. Thank you @guusdk . Taking the PR to move things along, more is coming.. Thanks @dbh , please also bump theplugin.xmlandchangelog.htmlso that this change could be released.. @dbh sorry to be a pain, but did you bumpplugin.xml` as well?  note it uses US datestyle\n... erm.... or wait, I am unsure what magic is now happening there with tbc. Some TODO items here before merging\n\n[x] remove RPM stuff from install4j config\n[x] more fully test that one can easily upgrade from 4.2 to 4.3.\n~~could Travis test the noarch build?~~ (would need docker containers, punting). The result of rpm Uvh on ignite's XMPP server\n```\nrpm -Uvh  openfire-4.3.0-0.1.20180813alpha.noarch.rpm \nPreparing...                          ################################# [100%]\nUpdating / installing...\n   1:openfire-4.3.0-0.1.20180813alpha warning: /etc/sysconfig/openfire created as /etc/sysconfig/openfire.rpmnew\nwarning: /opt/openfire/conf/openfire.xml created as /opt/openfire/conf/openfire.xml.rpmnew\nwarning: /opt/openfire/conf/security.xml created as /opt/openfire/conf/security.xml.rpmnew\n\n########################### [ 50%]\nwarning: /opt/openfire/resources/security/keystore created as /opt/openfire/resources/security/keystore.rpmnew\nwarning: /opt/openfire/resources/security/truststore created as /opt/openfire/resources/security/truststore.rpmnew\nCleaning up / removing...\n   2:openfire-4.2.3-1                 warning: /opt/openfire/lib/log4j.xml saved as /opt/openfire/lib/log4j.xml.rpmsave\n########################### [100%]\n```. OK, I think this WIP is good enough for merging.  Here's a status on progress\n\nRPM generation seems to work well and has has some testing\n.deb generation seems to work and has had little testing\nMac dmg building is not working yet and needs some dev love as the current codebase relies on a very old xcode.  Also, our old bamboo mac agent is no longer functioning.  I bugged @bsherman about this situation and he will try to allocate some time next week to dig into our xcode mac stuff.\n\nWith this merged, I'll get our bamboo updated and start getting nightlies generated from all these.\nThe path forward here is likely to build these on Travis-CI and use docker there to build the RPMs.. @GregDThomas LDAP shouldn't be at play for ignite.  I see that groupchat is hanging on the second bosh request.  Erm. @GregDThomas the cpu spinning starts with the first BOSH connection. didn't come up with any more changes, will take as is for now.. rebased and awaiting CI. I am lukewarm on the idea of changing the name of a property, but I don't write any code, so :). @GregDThomas doesn't it change the property name from xmpp.fqdn to fqdn ?. @GregDThomas Sorry, will need your help rebasing this.. Thanks, this code is above my head though to review, hopefully @guusdk can do it.. rebased and awaiting CI. rebased and awaiting CI. worked on my local dev build with install4j.. Sorry, this is above my pay grade for review :(  Maybe I'll see if @sco0ter has an opinion here!. sorry @aberenguel #1171 was a big change, can you kindly rebase this or I can take a swing at it. thanks @GregDThomas , with regards to the changelog, we only update it on the 4.2 branch and then once 4.3 is released, we copy over the entries to it.\nWill look this all over. Sweet, verified that RPM and Install4j both successfully built.. I tried rebasing this and it did not work, you'll want to do a new PR.  Or I have force pushed to your repo with this patch, up to you which you want to do :)\n. @vincentwlau If you want to try it, go for it, otherwise, the lone commit currently on this pull request should be ready?. I attempted to rebase this.. @deleolajide you OK with this?. This one will need @guusdk to push the green button.. @guusdk done. This seems harmless to me, but perhaps @guusdk has an opinion on it.. thanks @GregDThomas I need to review this some more to make sure the file gets marked as a config file in the distribution artifacts.. It is not install4j for the debian, mac, and rpm files. those each have specific changes needed. Ok, I think we are good to go here as I reviewed the installers.. thanks @ychaouche . Well, Travis is green, who wants to be a hero and merge this?. @deleolajide your PR is plugin-only, so we can async release it.. obsoleted by igniterealtime/openfire-certificateManager-plugin#8. more boggling needed here :(. Woohoo!  Awesome work, do you think this could get documented within the documentation found in our git repo?. How does this change impact the \"persistence\" of rooms?  Will any created room now be auto persisted to the database?. > The persistence of a room is something that can be toggled itself,\nHow is that toggled? :). > Could you rebase this to include 34a206b please?\ndone.. Hi @GregDThomas , thanks for undertaking this effort.  My main concern is how this change supports the auto-generation of documentation of all properties?  Or is the thought that the admin console would house the complete listing?\nOn the admin console, I would love UI that showed which settings are different than the default and which settings require a restart for application.. @GregDThomas I certainly think it is a good thing.  Could there be an option to filter the listing to only show values that differ from their default?  The usage case is then an admin could know which options they have changed during the configuration of Openfire.. > The \u2018Default Value\u2019 drop down actually does this\nFancy, but my US two cents would be that this functionality should be for the 'Property Value' column, as you want to know if the property value differs from the default.. @GregDThomas Ah, I don't think I know much with regards to UI, so as long as the functionality is there, that works for me.. @GregDThomas What happens in the case of a single property being defined twice with different settings?  I am thinking of a property set in one class and then set again in another.. Thanks, I think I have exhausted my questions on this.  Is there a Jira issue associated for this change?. @GregDThomas I lied, I have another question.  What about i18n support for property descriptions?. Thanks @GregDThomas , I think what you did for i18n is what I had in mind.. There's this guy https://github.com/igniterealtime/openfire-exampleplugin. Thank you @JihoonNa !  . consider adding an arbitrary cat of openfire's all.log ?. I think we need to close and reopen to get Travis back onboard. sorry, gonna try close and open again now.. #1293 is the path forward here.. Awesome @Flowdalic , could we iterate on this to get travis green before merging?  Looks like another test needs disabled.. @ma1uta this change is not meant to discourage your MINA rewrite work, but as a stop-gap to get us to support Java 11.  We'd still love to see MINA replaced :). hey @tevans , you remember all the fun in this space when we last touched MINA? :)  . this patch is currently running at igniterealtime's Openfire.  So far so good.  Awesome work @GregDThomas . OK thanks, I have force pushed an updated changed with that removed.\n. Sadly, our date stamps are month/day/year.\n. this is extraneous, but not a deal breaker. addressed, thanks. Yes, incorrect, method doesn't throw UnsupportedOperationException, nor is isPlainSupported() a method.. Would logging the actual domain here be useful? :). ~~This SQL doesn't look right to me, the COUNT(*) needs to be in an aggregate function, right?~~  I guess I am surprised that this type of statement works over all supported DBs... can't we use a SERIAL type?. Yeah, but I worry the count(*) approach will be very resource expensive for the DB to run.  Not all DBs are optimized for this query to be fast and requires a full table sequence scan.  I'll investigate this some more now.. I'd prefer to see a better INFO log here, this message does not provide the Openfire admin with any helpful info, like who the stanza is from or how it is making the spoof test.. Sadly, we use US date style, please adjust to mm/dd/YYYY , sorry. updated PR to use contains. Wouldn't this cause outbound packets from non-anonymous sessions to not be routed in the case of this setting being enabled?. Also, the default here is false, I thought from your PR message that it was defaulted to be true?  Sorry, maybe I am not awake yet this fine morning!. Thanks, I agree!. The only concern here would be that the JRE supports LetsEncrypt signed certs that igniterealtime uses.. could the server being sent to please be denoted in the log message, if not already via some magic I am unaware of :). Isn't the password != null check already done on line 235?. if the user does not get created, it would seem to not made sense to add roster items to a user that does not exist?  I am unsure though. Is this correct? :). valid date please :). 2018 please :). Is this change fixing an unrelated BUG in Openfire?. please bump the release date too, thanks!. @GregDThomas should the version here then be 1.3.5 so that we can release this plugin or ?. @GregDThomas did I do this right then?. date need bumped here too?. This new code was written by Gato and copywrite to Jive 2007?. Do we really want to ignore this exception? Can it at least go to debug level?. ",
    "aberenguel": "I also think the jar files should have the version too. But I noticed that the other libraries (jetty, bouncy-castle) don't have it.\n. About the \"threadPool\" I agree. Even more, I think the other filter names deserve a  static constant string.\n. I have a doubt in the openfire/github process. Should I do a hard reset in order to push (--force) a single commit or can I add commit in this pull request? Which is the best practice?\n. Now the Mina JMX is working. It was missing some dependencies and the Mina 2 was breaking the loadStats plugin code.\n. @tevans The sources were removed. Regarding the tests, I'm using this upgrade without any problem. However I tested only with both c2s paths (ports 5222 and 5223). The s2s path is not using the Mina library. I didn't tested with component and multiplexer listener. Since theses latter are being created in the same way as the former, I think they are correct. Anyway I agree with you regarding the beta release for feedbacks from the community.\n@Flowdalic In which commit do you think it is better to do a rebase?\n. @tevans Yes, it is synced with #518 now.\n. You can reproduce the leak creating some MUC rooms via admin console. \nFor example, if you create 3 rooms, 6 rooms will be registered in GroupEventDispatcher. after destroying these 3 rooms, 3 rooms objects still stay in GroupEventDispatcher listeners.\n. Yes it is duplicated issue. \nHowever I think that the solution does not solve the problem when MUC rooms are added via admin console.\nThe LocalMUCRoom is added into GroupEventDispatcher listeners in its constructor.\nThe #512 solution will be OK if the LocalMUCRoom is added in GroupEventDispatcher in the LocalMUCRoomManager.addRoom()\n. The commit ae0ffbfd9dd7f347464eb11b9111770a29d95c01 in the #512 fixed this issue. \n. A fix was necessary in the RosterManager, so that the broadcast method is always called when there should be a roster push. (commit b058d77)\nIt also solves another problem:\nWhen the roster is updated via group renaming, group user adding or removing, the roster pushes only happen if there is a cache hit. If there is a cache miss (what can happen if the cache is full or if the admin cleaned up the cache) the user is not properly notified about the roster update. Thus only update rosters in memory can lead to this undesired behavior.\nThis commit avoids the use of the cache directly (where there can be a cache miss or a cache hit). It is using the method getRoster(username) that instantiante a new Roster in the case of a cache miss.\n. The PR #512 also fixed it, but it has not been merged yet.\n. After some analysis, I saw that the commit ffe14c90b18 exchanged all groupMetaCache keys by the user node (username).\nThe key = userJID was used by getGroups(JID user) and the key = username was used by getSharedGroups(String username).\nMaking the same key (username) be used in both places was a mistake of mine. The getSharedGroups is wider than getGroups. Take a look in https://github.com/igniterealtime/Openfire/blob/master/src/java/org/jivesoftware/openfire/group/AbstractGroupProvider.java#L181\nThe right thing to do when the user is removed from the group is to remove both keys: username and userJID.\nI'll make a fix for it.. @akrherz I've just fixed it in my of1263 branch https://github.com/aberenguel/Openfire/commit/7a31c5c115a4798044980202d251994824a6b0aa\nJust reverting the OF-867, leads the cache becoming invalid when we call getSharedGroups(username) after update users/groups.. About the change @guusdk made is valid. BTW, I forgot to revert it in my commit.. Just one thing. The getClass() in evictCachedUserForGroup was returning the GroupEventListener class. \nI changed a little to make it less error prone.\nhttps://github.com/aberenguel/Openfire/commit/3585ed7372a671995c365746d5e0bed38272d7da. Thanks @akrherz !\nWhat do you think about this commit? https://github.com/aberenguel/Openfire/commit/8b93ca7f92246ed520b166fdf51386a977f8f3b1\nThis groupMetaCache is a lot confusing. I thought it is better make all keys prefixed with a constant. So we can understand for what a key is used.. @akrherz  I totally agree, since the need for fixed 4.1.3 is urgent.\nI found another bugs related to group chache that were not fixed in these commits.\nSo, what is the better approach? \n\nDescribe how to reproduce each bug in the https://community.igniterealtime.org/community/developers/openfire_dev and wait for new Jira issues to be created; or\nDirectly create a PR for each bug, describing how to reproduce in each PR; or\nCreate a big PR fixing all bugs . @guusdk , could you take a look?. Just rebased!. I did not test with ClusteredCache. Maybe is changing DefaultCache.keySet() an alternative? I tracked this new HashSet<>(map.keySet()). The synchronization was introduced in 8455c7f767e2 and the code in a4521729323e5756 (14 years ago).. I just commented in OF-867. This issue causes an inconsistent cache after a group is created.. I think this package-summary page is out-of-date. The classes IoServiceManager and IoSessionManager does not exists in the MINA 2 libraries. Anyway, I have to test whether I'm using the IoServiceMBean correctly.\n. In #518 I mentioned a case when the room is added in GroupEventDispatcher and is not removed.\n\nThat's why the GroupEventDispatcher is called inside the LocalMUCRoom constructor. \nSo, I think the GroupEventDispatcher.addListener(room) should be called here, not in https://github.com/VicoWu/Openfire/blob/master/src/java/org/jivesoftware/openfire/muc/spi/LocalMUCRoom.java#L385\n. I could fix it just changing this line by\nElement exi = extendedInformation;.\n. In this case, any update in extendedInformation will be reflected in the mucRoom presence.\n. It seems there is a very low probability to occur a race condition here (with the line 489 - put x remove). Is the groupMetaCache thread-safe?. What are the keys of groupMetaCache? Node (\"usename\") or BareJID (\"username@domain\")?. If the key value is the JID node, shouldn't the synchronization be with \"(getClass().getSimpleName() + userName).intern()\" in both lines 593 and 215?. ",
    "deleolajide": "I can think of one. The Ant build script references them without version numbers. If we introduce version numbers, then the script has to be edited manually every time. That will be error prone\n. ```\n     ======================================================================================= \n PATHs / PATTERNSETs / FILTERSETs                                                        \n ======================================================================================= \n<path id=\"javadoc.dependencies\">\n    <fileset dir=\"${lib.build.dir}\" includes=\"*.jar\" excludes=\"junit.jar\"/>\n    <fileset dir=\"${lib.merge.dir}\" includes=\"*.jar\"/>\n    <fileset dir=\"${lib.dist.dir}\"\n             includes=\"servlet.jar, mail.jar, activation.jar, jdic.jar, bcpg-jdk15on.jar bcpkix-jdk15on.jar bcprov-jdk15on.jar\"/>\n</path>\n\n```\n. maybe for lib/merge. how about lib/dist and other places like this\n```\n         Pack200 processing on JAR files in lib dir \n    <for param=\"jar\">\n        <path>\n            <fileset dir=\"${release.out.dir}/lib\" includes=\"*.jar\"\n                     excludes=\"startup.jar,jdic.jar,mail.jar,activation.jar,bcpg-jdk15on.jar,bcpkix-jdk15on.jar,bcprov-jdk15on.jar\"/>\n        </path>\n        <sequential>\n            <delete file=\"@{jar}.pack\"/>\n            <pack200 src=\"@{jar}\"\n                     destfile=\"@{jar}.pack\"\n                     gzipoutput=\"false\"\n                    />\n            <delete file=\"@{jar}\"/>\n        </sequential>\n    </for\n\n```\nI think we should go with @tevans suggestion until we are ready to upgrade to maven/gradle\n. Somewhere between my initial commit and Flow's squashing, the 3 jar files for lib/dist were dropped. They included the existing servlet api 2.5 (servlet.jar) and servlet api 3.1 (servlet.31.jar) from jetty 9.1.5.  Openfire and all plugins compile fine with servlet.31.jar, but the websockets plugin does not. It requires servlet api 2.5. I have now included it in the websockets plugin, but it does mean that any other plugin that wants to implement jetty websockets must include this file, creating duplication.\n. Section 8.5.1 of  RFC 6121 cannot be enforced strictly for openfire because it allows IQ handlers to process packets for custom namespaces like rayo (http://xmpp.org/extensions/xep-0327.html#addressing). In my implementation, I am using an IQ handler instead of a component for two reasons.\n1. Reduce the overhead of an openfire component for each rayo component.\n2. Make federation easier. \nI am changing this check to exclude IQ handlers and check for anonymous users\n. Can you provide a link to where this has been discussed on igniterealtime.org. If not, please create a discussion topic for it. We need the reference to create a Jira for it before merging. Thanks, I think this a very good feature.\n. Yes. Needed in the WEB folder for the web service. The standard ANT script does not build a jar file there and required manual intervention.\n. Yes. Needed in the WEB folder for the web service. The standard ANT script does not build a jar file there and required manual intervention.\n. It  is really a single change to jitsi videobridge plugin for release 3.10. The other stuff is two private plugins that were mistakingly added and removed and can be ignored.\n. Jira - https://igniterealtime.org/issues/browse/OF-847\ndiscussion - https://community.igniterealtime.org/message/243629#243629\n. Now added Candy and Fastpath web applications from old jitsi-videobridge plugin.\n. APOLOGIES. This pull request was unintentionally merged/committed by me. I clicked on the wrong button and ended up performing a merge. I was updating my pull request for the Open Meeting plugin\n. A big thank you to daryl who explained how to do this the simple way\n. +1 from me. We need this fix for Jitsi Meet\nhttps://community.igniterealtime.org/thread/53997\n. I know :-)  I am at work and will be too busy tonight to learn how to squash and rebase with TortoiseGit when I get home. I appreciate the way we have decided to use GitHub at igniterealtime. However, it sometimes makes the whole process more painful than it needs to be especially if you use your clone as an offsite backup of your local development. Something I have done for years with SVN and do not want to give up just right now.\nI also can't see the need for the temporary branch always being on the clone and not origin especially if it is deleted and tidied up after merge.\n. Sorry, this change is on a branch of igniterealtime instead of my fork. My fork is tied up with latest code from jitsi.org and it is much easier to make this maint fix on a branch here instead of there. The plus of this approach is that github can remove the branch after a successful merge. With my fork, I have to do that manually.\n. > That's also not true. You would still get the \"delete branch\" button.\nThanks for correcting that, but in the past, I have not seen it as I see it right now\n. @daryl,  I appreciate the offer to help me do this properly, but \"properly\" is subjective and a matter of taste. No one so far, has convinced me of why temporary branches on the origin repository are bad for posting urgent quick fixes on production code while active development is in progress on a clone with several branches.\nI appreciate that you want me to create/switch to a local branch on my clone to make changes and then create the pull request off that. My personal preference is to separate development from production by repository and not branches. That is what we do on the private commercial github projects I work on.\n. Well spotted :-) thanks. yes indeed it should be 0.0.1\n. Looks like I have to merge this myself. If there are no objections, I will  do it over the weekend\n. I have seen this problem before in an openfire build. Sometime it wants xalan.jar in the build/lib/ant folder and sometimes it doesn't. Travis builds ok without it.\nI have xalan-2.7.1.jar on mine just in case. Should I commit it to my pull request?\n. @akrherz, done on same PR. It was still open \n@tevans, thanks for merging\n. This has been covered by https://github.com/igniterealtime/Openfire/commit/9cc37be2783a213995e54319f176d9b5be2afd7e\n. I think this discussion may have been overtaken by events. I just need to check and confirm. I recently accepted a PR for jinglenodes plugin that has implemented this and other things. I also replaced the outdated library jar file with the most current source code and tested it ok from the openfire meetings plugin.\n. The pull request is https://github.com/igniterealtime/Openfire/commit/9cc37be2783a213995e54319f176d9b5be2afd7e\nand only deals with items 1 & 2 of this pull request. I think items 3 and 4 are for OF-856 and are probably outstanding\n. Hi Tom :-)\nIt is interesting you ask that question, cos I don't recollect ever having a problem changing HTTP-BIND ports to restart jetty web service on the new ports  without restarting openfire. That works fine for me. The only exception is when ports under 1024 are specified on linux and then it fails, disabling http-bind service. \nJust moved my ports from 7070/7443 to 8080/8443 and ofmeet and hawtio worked fine without a restart with this fix.\nThe only restart issue I experience and may require some effort to fix is the situation when installing a plugin that creates a webservice without restarting openfire. Not sure if it is the responsibility of the plugin or the HttpBindManager. Probably both.\n. I have bumped the release date. Thanks\n. I need this PR.\n. Why is this PR referencing files in the ofmeet plugin?\n. Thanks. Exce\u013clent Contribution to Openfire. \n+1 from me\n. This is a good change. I am curious about why a new xml file instead of a module node in openfire.xml \n. Thanks for the reply. I am just curious and wanted to appreciate your decision. It is for @dwd to decide\n. Thanks for the heads up. I am immune to Mina. I am mostly web-based using Websockets from Jetty\n. @akrherz , thanks for the heads up. I was going to do a quick check to make sure I could replace the non standard \"Openfire.Connection\" in Strophe with the original \"Strophe.Connection\" in most of my web applications, but that can now happen later when I am free.\nIn any case, @tevans, I am expecting this to be up your usual high standard of excellent work and thanks for this long overdue contribution.\n. @tevans, thanks for the tip. Cheers!!\n. @akrherz , thanks for the heads up. +1 for the change and I will have to resolve any issues that crop up.\n. I think you will have to exclude ofmeet. It is a fork of Jitsi Videobridge modified for Openfire and enterprise useage as Jitsi Videobridge is biased towards being an external xmpp component to Prosody and depends on a few external services like etherpad, prezzo and callstat.io. The head Jitsi Videobridge source code or jar files will currently not run as an internal XMPP component with Openfire. The implementation is broken somewhere. \nUnless someone else takes on this task, this is low priority for me right now.\n. I have removed ofmeet plugin. It is no more a blocker to this PR\n. This PR is responsible for multiple\njava.lang.LinkageError: loader constraint violation: when resolving method \"xxxxxxxxxxxx\"\nin the ofmeet plugin\n.  ComponentManager componentManager = ComponentManagerFactory.getComponentManager();\nis no longer working in any of my plugins even after applying this PR\n. This has been tested against OF 3.10.2 on windows and linux and works fine. However,recent PRs that changed behavior of Plugin Manager have caused it to fail with OF 3.11 Alpha. When those PRs are sorted out, I will revisit it.\n. +1\n. YES, there are few instances that we have of Openfire embedded in a customer portal. Please put this behaviour behind JiveGlobal property for backward compatibility.\n. +1 Excellent. many thanks :-)\n. These changes were to fix a combination of issues from OF 4.0 changes and Chrome browser changes. I can back port the Chrome browser changes to 3.10 branch and create a pull request against it.\n. @akrherz , the 3.10 branch has a very old version (0.1.4). I had limited time to fix the issues against the head of code tree. I am happy to wait for a general release on the web site with ofmeet 0.3.x when OF 4.0 is released.\n. With Clearspace officially removed from Openfire, I thought now was the time to bring an old favourite plugin into igniterealtime.org. See https://code.google.com/p/inspired-social/\n. Good question :-)\nI don't have permissions to create a new repository \nIt does make sense to put all external integration plugins in a half-way house repository that allows them to remain synced up with OF changes and delivery and at the same time remove the bloat on the increasing number of plugins. Unfortunately we don't have that in place\nThis plugin does have a fair bit of Java code integrating Openfire with PHP/WordPress and I would prefer to fix issues as they happen being a part of the main repository rather than having to tackle a load of OF changes that break the plugins with no historical perspective much later.\n. I agree. There are pros and cons to same or different repositories.\n@guusdk , git modules looks the way forward and moving openfire to maven might be a better first step.\n@dwd , yes, but it would be nice to still have current binary versions of both plugins built as part of the Openfire delivery and appear in the plugin list at igniterealtime.org in order to build a community around them. I am not sure on how to do that. Maybe @akrherz would know :-)\n. ok. I will work on a community plugins repository as the new home for ofmeet, ofsocial and other large integration plugins\n. +1 I use the overlay feature to customise openfire as the traderlynk.com server\n. +1\n. Thank you :-)\n. Sure thing!. Thanks, I will remove them.\n. :-)\nI think it should be in the core repo simply because we use it at igniterealtime.org for open_chat. I am assuming that we can make PRs to add Candy plugins like the one we use for Openfire Meetings at work.. Please don't pull out the group admins feature. We use it in telecoms. Groups are used for user roles and entitlement provisioning. Very effective  when Openfire is connected to Active Directory.  . We are not doing anything generic that can be pushed upstream, we just get the group admin users of a group like this\n````\n            JSONArray adminsJSON = new JSONArray();\n            int i = 0;\n        for (JID memberJID : group.getAdmins())\n        {\n            JSONObject adminJSON = new JSONObject();\n            adminJSON.put(\"jid\", memberJID.toString());\n            adminJSON.put(\"name\", memberJID.getNode());\n            adminsJSON.put(i++, adminJSON);\n        }\n        groupJSON.put(\"admins\", adminsJSON);\n\n````. > The question: this appears to relate to changes introduced in Openfire 4.0.0 (OF-946), but you mentioned that this only started to be a problem with Openfire 4.1.4 - even explicitly mentioned that it was not a problem with Openfire 4.0.2. That does not compute for me\nI can confirm that the highest version of OF that runs the websocket plugin for me is 4.1.3.  That is because I always use Openfire meetings plugin or a derived version which adds the OFMEET external SASL mechansim which causes websockets plugin to generate a NPE.. > Instead of lazy-loading the connection configuration, it might be better to not store the value in a field, but simply re-generate it every time.\nAgreed, but I simply replicated the behaviour of the http-bind socket connection. You might want to revise that as well.\nhttps://github.com/igniterealtime/Openfire/blob/a469be3e7a04cedc35551d776cd2a58e5d7a8550/src/java/org/jivesoftware/openfire/http/HttpSession.java. > Perhaps ofmeet should be moved there too?\nI was thinking the same thing.  The UI settings menu . I have used the wrong words to describe my peculiar situation. Let me see if I can break it down:\n\nThe plugin does not work in OF 4.1.5 because of a 4.2 change that was back ported to 4.1.  This PR was mainly to fix an error from the change. \nI am working with 4.2 source code and had to fix the issue and rebuild the plugin. In the process, I had to fix other issues that were caused by the maven restructuring in 4.2 \n\nIn other words, this fix makes the plugin work in 4.1.5+ and the source has to be applied to OF master which is based on 4.2.. I am planning to add push notification on the plugin and may refactor the code.. First of all,  thank you @ian-green for doing this. It is most appreciated.\nWe are heavy users of xmpp pub sub and will prefer it to be a top level menu item. This gives us a lot of scope to add more features. These features are currently buried inside a few commercial plugins, but with this pubsub place holder available, you can expect a few more PRs over the coming months to fill up the menu structure :-). >We can always re-arrange the menu, when new features pop up that warrant more Admin Console space.\nI disagree :-) Nothing more confusing to a sysadmin is a menu that disappears and re-appears elsewhere. \nThe addition of pubsub admin features in Openfire is not additional complexity, but a glaring omission in the first place. Pubsub is an approved and widely used XEP with full support from Smack.\nI have not looked into the detail of what @ian-green has done, but we could add the management of subscriptions including presence tracking of subscribers among other things.\n. Thank you all for making this happen \ud83d\ude00. molto bene. Thanks for the heads up :-). > I'm really not convinced this ought to be in the main Openfire repository. Entirely happy, of course, for it to be elsewhere and available via the website etc.\nThat exactly what you said last time I submitted a plugin to the internal plugins folder in openfire.\nI think very carefully before I decide where my plugins go. Sometimes it is my personal repo, sometimes it is standalone repo on ignite and sometimes it is the plugins folder of openfire repo. This one belongs with openfire. I suspect that the ipfs binaries could be causing concern, but there are other plugins with embedded binaries.\nWhat exactly are the guidelines for internal vs external openfire plugins? XEPs only?\nThe problem with external plugins that are tightly coupled with Openfire is that they break when architectural changes are made to Openfire. You have to deal with a fair bit of changes at once with no context unlike an internal plugin that triggers a build failure and immediate action with context.\n. >The recent migration to maven certainly makes this much easier and the recent example plugin I think is the goal in mind here.\nI appreciate that and that is why the solo plugin has its own repo. However, I have seen other plugins land in Openfire as internal plugins since Openfire Meetings was pushed out for this same reason. If I did not know any better, I might think it was personal.\n\nCI and our bamboo can handle the auto-build failure stuff.\n\nOne of the privileges of being an internal plugin is that when Openfire changes and breaks your plugin, you get to know immediately via auto-build. You get the context of the change and can apply a fix asap with no fuss.\nWhen you are a second class external plugin, the exercise of applying several changes to your plugin to keep it in sync with Openfire months after is just painful especially when it becomes an unplanned exercise with a live customer.\nThis plugin will be tightly coupled to Openfire APIs. I could do with some help here. >Drop the drama. You know as well as anybody that we are desperately short on developers.\nAgreed. Repeated rejection and painful experiences does make one become emotive and induce drama. In any case, I am sorry.. >Let me guarantee you though that there's not any personal motive at play (if anything, I value our interaction, even if I've been not as much on top of things in the last few weeks).\nThank you for the kind words.\nI agree that this ipfs plugin does tick box 3 and I am willing to mavenise the ipfs binaries to reduce the size. Apart from that, creating a swarm of federated openfire servers in a trust-less decentralised network is a very useful addition to Openfire's features and won't work if the ipfs plugin is considered an application and not a optional server feature. It needs to get as close as possible to the httpfileupload plugin and openfire server APIs that it will depend on.\nI already have application plugins like Solo (that already lives in dedicated repository) queuing up to use its features.. Moving this plugin to a stand-alone repository on ignite realtime. https://github.com/igniterealtime/IPFS/releases\nthank you . The actual link is https://github.com/igniterealtime/IPFS/releases/download/v0.0.1/ipfs.jar. The media proxy implemented by Jive in the core openfire code, is very dated and was done even before the Jingle specs were finalised. I am of the opinion that it should be replaced with an up-to-date TURN server which would be very useful for simple peer2peer webrtc calls using jingle. Making this part of core gets my vote.. >can you check it out?\nSure. I will run it on my dev server.\n\nI've no real idea of what it does\n\n\nIt manages the mapping between JIDs and SIP URIs. I use it for client SIP endpoints as well as server trunk based SIP endpoints. Thanks. I will revert the namespace change.. I would like my PR to be included in this please . ok. Thanks. I will fix that. Probably not, but the IQ.createResultIQ(packet) works as expected providing the correct from from the provided to. I will change the logic.. ",
    "kayahr": "The missing dependency is work/tools/ant-subdirtask.jar.I don't have this file and obviously Eclipse doesn't need it because it compiles fine now without it.\n. Without the changes in org.eclipse.jdt.core.prefs Eclipse wasn't able to compile any class because it tried to compile everything with Java 1.4 compatibility. I would have expected that Eclipse uses Java 8 (Because that's the default in my Eclipse) but it decided to use Java 1.4. In your build.xml you configured Java 7 as source/target so it is a good idea to do the same for Eclipse. That's what the three lines in org.eclipse.jdt.core.prefs are for. Maybe it works on your machine without this change when you only have Java 7 installed but on other machines it may not work depending on the configured JDKs.\nRegarding the output directories: Yes, it builds without changing the output dirs but then Eclipse puts all the compiled classes into a newly created bin folder which is then automatically added to the .gitignore file which is then marked as modified. That's pretty annoying. Could be fixed by commiting this simple change once but in my opinion it is much cleaner when Eclipse uses the same output directories as Ant because then the Ant build can benefit from the classes already compiled by Eclipse.\n. ",
    "pkonecki": "Silly me! I will! \n. Changelog and readme updated!\n. Done.\n. I don't see any whitespace change on github. Maybe you're referring to the indentation change.\nI changed the indentation to introduce a new control path because the new request \"grouplist\" doesn't need the username argument, therefore all other request processing is done in a new \"else\".\n. Weird, I used sublime text on a Mac. I'll fix that ASAP.\nLe 1 juin 2014 13:53, \"Florian Schmaus\" notifications@github.com a \u00e9crit :\n\nGithub and git diff visualizer do handle indentation changes well, the\nproblem is that you also changed the newlines to windows newlines:\n-            else if (\"update\".equals(type)) {\n-                plugin.updateUser(username, password,name,email, groupNames);\n-                replyMessage(\"ok\",response,out);\n-                //xmlProvider.sendInfo(request, response, presence);\n-            }\n-                else if (\"update\".equals(type)) {^M\n-                    plugin.updateUser(username, password,name,email, groupNames);^M\n-                    replyMessage(\"ok\",response,out);^M\n-                    //xmlProvider.sendInfo(request, response, presence);^M\n-                }^M\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/21#issuecomment-44775864\n.\n. Well that must be wrong, now all is marked as changed! It seems that it was \\r\\n in the first place!\n. Done.\n. \n",
    "dwd": "I'm going to close this, I don't think session support can be removed for the forseeable future. A comment in the session handler class to indicate that we should never make it anything but a no-op would seem sensible, and possibly putting an \"optional\" tag inside the feature might be worthwhile.\n. Will you be annoyed if I spin out a release first before thinking about\nthis one?\nOn 17 Jun 2014 19:55, \"Sven Bunge\" notifications@github.com wrote:\n\nWhat should we do? Merge this PR oder \"split it\": Remove pack200 from the\nbuild for 3.10 and later on we'll remove the decompression on startup?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/44#issuecomment-46349784\n.\n. Resgitration is, of course, evil. That aside...\n. This seems to be replacing the entire file - whitespace/formatting changes?\n. (Rewritten into #57 - closing this)\n. Reading this through, you've written it as an override, where I think it ought to be a last resort.\n\nSpecifically, if someone's running carbon-capable clients, this disables carbons entirely - I think we probably want to run it only on clients which do not support carbons; therefore we'd do it within the carbon loop just below your added loop.\nThere's an if statement there - adding an else-if clause that'll handle your option seems the best choice here.\nWhile you're there, could you move the highestPrioritySessions set below the carbon loop, since it might not be needed now?\nThanks for the contribution, it really is appreciated, and sorry for the push-back.\n. Also, will this allow internationalized domain names? Try tron\u00e7on.be for example.\n. Yeah - XMPP uses those natively. We must have code for doing nameprep() - can we not call that for validation?\n. Oh, I was going to pull those out, but they're in different commits anyway so it'll show right in the history. Great stuff, thanks.\n. Pushed manually (outside of the PR)\n. Merge this when Travis says it's OK.\n. Is it easy to rebase this onto master? If not, I'll just cherry-pick the single commit.\n. Finally cherry-picked. Sorry for the delay.\n. Can you rebase/squash these? Otherwise looks good, thanks!\n. Thanks!\n. Thanks! (Also thanks for the very clear comment)\n. Hmm. Sending an error back should be okay, as well, and not doing so might break things a bit. So I think there's probably more work to do here.\n. Thanks, this looks good.\n. I think we add a global if this actually gets raised. I know there are closed private networks where IE4 still lurks; but I'm hoping those aren't likely to upgrade Openfire either.\n. This looks perfect. Merge if Travis agrees.\n. Right, I'll close this one and we can resurrect it if needs be later.\n. Shouldn't this only list resources for which the requester already has presence? Also, I'm interested as to what needs this, and which other servers implement it.\n. It's more complicated than that. If I send directed presence to you, you should probably see that one even if you're not subscribed. It's basically the same logic, and function, as a probe, and probably dates from when probes weren't sent from end clients at all.\nSo there's a \"canSeeSession\" or something needed.\n. canProbePresence is enough, though it should also handle directed presence.\n. I think the right fix might involve stamping missing \"to\" with the user's bare jid... But I suspect doing so might have knock-on effects.\n. This looks great. The master branch thing for pull requests really only affects you, not us, so I'll just merge this in a few minutes.\n. Thanks!\n. Can you squash (and rebase) these changes into a single commit, and update the PR? The following should do it:\ngit remote add upstream git@github.com:igniterealtime/Openfire.git\ngit fetch upstream\ngit rebase upstream/master\ngit rebase -i upstream/master  # Change second patch's command to 'f'\ngit push origin +PresencePatch\nOtherwise it looks great.\n. Rebased; merged.\n. Rebased.\n. I merged this manually, actually, after clarifying the comment, but \"server\" in this case is referring to the passive connection side, not the question of whether it's a C2S or S2S session - anything connecting to Openfire can (with this patch) use an SSLv2 Hello message to initiate TLS.\nSecondly, this doesn't re-enable support for Poodle, or indeed SSLv2 - it just allows the first message of the handshake, the Hello message, to use the SSLv2 syntax. The server will respond (using SSLv2's protocol) that it supports SSLv3.1, v3.2, and v3.3 (which are TLSv1, v1.1, v1.2 in fact).\n. Sorry, I'm being rubbish and distracted. I have reviewed, agree that the\ndriver config file should be separated. I'll merge when I'm at a desktop.\nOn 26 May 2015 12:43, \"randylayman\" notifications@github.com wrote:\n\n@dwd https://github.com/dwd Is there anything else I need to do to have\nthis PR reviewed and given a thumbs up/thumbs down/needs changes decision?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/217#issuecomment-105496464\n.\n. Sorry for not having reviewed this sooner. I think this is essentially correct, but:\n-  it really requires there to be two lists of user-defined classes, one for peer server authentication, and one for client authentication. Clients might reasonably be authenticated by treating the mailbox as a Jid, for example, whereas servers need sRVName considering, etc.\n- I need to test this considerably, since it's security code, and I'm short on time currently.\n. I'd point out this is basically all down to @akrherz and @AndiHeusser - I just typed it in.\n. Looks good to me. Happy if someone merges when Travis completes.\n. Pushed independently after fixing the description a bit.\n. Needs the merges removed. Try git pull --rebase (or a proper rebase). If this seems like it'll be too tricky, I'll do it later.\n. I don't understand how this is only affecting LDAP connections, and not any certificate validation. Obviously if it's affecting XMPP connections, this is a no-go.\n. Sorry, this took me ages to get around to testing.\n. I've finally given this the review it deserves, and it's mostly positive. However I notice that this code is not conformant to RFC 6125, in particular, CommonName mapping are used even if there are existing SANs present. The old code used CommonNames as a fallback in the absence of matching SANs (still not right), but this uses both at all times.\n\nThis is problematic, because the presence of any SAN in the certificate implies the CommonName matching rules should not be used.\nWe could have the CommonName mapping return nothing if it finds matching SAN types?\n. Thanks!\n. Sounds great! The other big task is to make the stream manager objects have a longer lifetime, and move the session state there, so we can do full resumption.\n. I don't think SM over BOSH makes sense - BOSH does much of the same thing anyway.\n. That's in the current trunk; line 1272 of SessionManager.java\n. OK; we may have addressed that within the fixes for OF-1002 and OF-1003; you might want to check. Otherwise, test cases and patches are always welcome, but we'll see if we can add this to a testing cycle.\n. It's not totally clear to me where it ensures the default namespace is applied to stanzas, but otherwise it looks great. Obviously if it works with stanza.io it should be OK, and I might just merge this in a bit anyway.\n. Checked the stanza.io code, and I'm pretty sure it requires stanzas to be explicitly namespaced (as the spec does) so I'm merging this.\n. This is a mess; I've rebased and created a new PR #414\n. I think this is in error.\n. Not sure if we can remove these in all cases, yet. I've asked on jdev@ for opinions.\n. This is awesome.\nMaybe we can host our own Maven repository for the missing/custom jars?\nI'd like to see this work complete before we merge, but this is an awesome start.\n. So to hint at where I'm coming from on this, we're doing some internal work on Openfire at Surevine currently that will eventually be released into the Open Source builds. I've advised that people use this Maven branch to simplify development patterns.\nOur security guy would prefer it, as it makes dependency tracking and updates easier.\nEvery one of my customers wants Maven, too - again, it just hugely simplifies development.\nI'm going to play around with this branch over the New Year, and we'll try and make 4.2 a Maven build ASAP.. Well... It looks right, but we went down a long path to get to the code @guus wrote that you're now removing. I wonder if later changes have removed the need for that as well?\nAlso, does it work (ie, have yo run a non-trivial deployment of this)?\n. I've commented in the forums, but basically the \"use the hash as a password\" bit scares me a lot. The rest looks OK.\n. I think this PR still includes the hash-as-password solution; removing that and I think the rest can be committed. (Or tell me it's already gone).\n. Thanks, totally missed this.\n. +1\n. +1\n. +1\n. Sounds reasonable to me.\n. I'm thinking these are things that if plugin developers are using, they're probably doing something wrong if Openfire isn't using them at all. So I'm merging and seeing what breaks...\n. I think this is effectively a no-op; the XML namespace is bound to the prefix \"xml\" by standards action and cannot be rebound. I'm happy for this to go in, though:\n+1\n(Just not sure it makes any difference).\n. Ah, so I'd misunderstood. Thanks for the clarification.\n. Looks good to me.\n. Merged manually and pushed as 43e3c5f5be7d26d8906613762bb9ebc923d742ae\n. Looks good to me.\n. Backported fix.\n. What would this do for installations already deploying BOSH in the default port? I really don't want to break existing deployments in a weird way (although possibly 4.0 is a good time to do this).\n. +1, I'm going to merge this straight away because it's just reverting back.\n. @tevans reviewed a copy of this ages ago, and I'd clean forgotten I'd never tidied it up.\n. +1\n. This isn't my work of course; if anyone else agrees it's fine to merge.\n. One for @deleolajide \n. Oh, this looks really ugly now. I'll rebase this first...\n. OK, better now.\n. No idea how this could possibly fail. Looks good to me.\n. Not really ready. I think this catch must be being hit, but I don't understand why.\n. +1\n. +1\n. +1\n. Looks good to me.\n. +1\n. That looks embarrassingly familiar. I think I may have seen that in a merge I did recently. +1\n. I'm not convinced this is entirely right, but it's certainly a massive improvement - let's merge.\n. Is there any special reason? Can it be documented? If it's just an upgrade because we can, that's fine too.\n. Yeah. When we move to Maven I might consider cloning the repository for\nhistory, and then stripping the binaries out of it completely.\nCloning takes long enough as it is, and it'll be really annoying if it's\nmostly stuff that's been removed.\nOn 10 December 2015 at 14:14, Christian Schudt notifications@github.com\nwrote:\n\nThe only reason against the \"because we can\" is that I don't like binaries\n(jars) in the repository because it only crams it and cloning it will take\nlonger and longer with every new binary (I hope I understood git correctly\nhere). One of my motivation to move to Maven.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/441#issuecomment-163631264\n.\n. Yes, we'd need to maintain an old-style repository for building older\nbuilds. So I'm thinking it'd be best to do this when we drop support for\n3.10, and Maven is in place (so old-school builds would be a rarity).\n\nOn 10 December 2015 at 14:36, daryl herzmann notifications@github.com\nwrote:\n\nTo note, when we first moved Openfire to github, I rewrote the history to\nstrip out the JRE artifacts found in the repo, so the current situation\ncould have been much worse :) I dunno if stripping out old JARs is a good\nidea as it would mean older tags would not build properly. Stripping JREs\nonly impacted ant build artifacts and not building openfire itself.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/441#issuecomment-163638874\n.\n. Perhaps it's most sensible to make it an option.\n\nOn 10 December 2015 at 14:36, Guus der Kinderen notifications@github.com\nwrote:\n\nPerhaps SAMEORIGIN instead of DENY is more suitable here? I bet that there\nare instances out there that are embedded in some kind of larger management\nconsole.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/442#issuecomment-163638795\n.\n. That better?\n. I suppose we can take @matt-tucker as a reviewer, even if I know @sco0ter hates bending the rules. ;-)\n. I won't ask what possessed you to make a username in excess of 100 characters, but +1 to the patch. :-)\n. Running this locally and tested.\n. I'm expecting this to need to be updated as we merge in the last of the outstanding PRs, is that right?\n. Why do this work in the main openfire repository? Would it be easier to do this in a new git repository?\n. Would you put this in a different repository if we set one up for you? I'd like to move ofmeet as well, if that's a good solution.\n. +1\n. +1\n. +1\n. +1\n. Looks good to me.\n. +1\n. +1, though I think we need to check if this is sending an SSLv2 Hello and fix it if it is.\n. Exactly that. Accepting an SSLv2 Hello is not ideal, since it restricts the\npossible negotiation options (though it still allows TLSv1.2 with the usual\ncipher suites). Sending one can cause us not to be allowed to connect.\n\nOn 17 December 2015 at 15:34, Guus der Kinderen notifications@github.com\nwrote:\n\nSo you want to accept (for inbound connections, where we are in a\nserver-role), but not transmit (when we're a client, ie outbound\nserver-to-server connections)?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/467#issuecomment-165485412\n.\n. I'm not against this in principle, but:\n- Please update comments along with code.\n- Please detail what the bug you're fixing is - what the effects are, how one might identify that they're affected.\n. Gone with #480, but thanks for raising this issue.\n. +1\n. +1\n. +1\n. Well, obviously it should be en-GB, but I'll forgive you that one.\n\n+1\n. +1\n. +1\n. Sounds good. +1\n. This partially solves the bug by removing/suppressing duplicate disco#item entries, but it leaves the number of occupants reported by Disco as including any nick shares. I'm happy that this is useful, but I'm just checking how easy it'd be to fix the count reported, too.\n. It's not clear whether getOccupantsCount() would be safe to update, so I'm going to leave this for another time.\n. +1\n. @tevans I can't remove the conditional because there's an early exit based around an option; so I need to do it in two steps - however, it looks like @sco0ter is again right, there's already reflection for initial presence.\n. Anyone else?\n. I think it should be this simple. Only iq:last has this odd behaviour in the specifications, and that's a historical wart that's crept in. That said, @sco0ter (correctly) has me worried that it's possible that existing IQHandlers might treat the bare jid and empty cases differently.\nGiven that this is currently not causing any interop issues, as far as I know, let's park this and review the existing cases before the next release.\n. Not on trunk anymore, we're post-release. Just one other contributor -\nrelease branch remains two. I should note that somewhere.\nOn 12 January 2016 at 10:15, Guus der Kinderen notifications@github.com\nwrote:\n\n+1\nThanks for taking the time to look into this. We're accepting pull\nrequests using a policy that requires two regular contributors to sign off\non it, before it gets merged. You've got my vote. One to go.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/508#issuecomment-170863762\n.\n. Although, having merged this, I realise we should probably make a Jira ticket before it goes on the release branch at least.\n. My reading of the last comment is that this can be closed.. +1\n. This looks good - has it failed to build due to a Travis bug?\n. Looks good to me. 4.0 branch as well?\n. This needed a manual merge, done so as #699 - sorry it took so long to get to this.. To reiterate what I said in the chatroom:\n\nOF-464 is obviated by XEP-0198, and exists as a result of the Two Generals problem - some kind of gap where messages can be lost is inherent and unavoidable, without something like XEP-0198 working to explicitly find out what traffic got across before the connection was lost.\nThe original patch would have reduced the possibility of loss, but it couldn't have eliminated it.\n. I did briefly wonder if it was worth bumping the Epoch number, but decided it's not (and if I'm wrong, it's easy to sort out later)\n. Also, legacy data wouldn't have the default anyway.\n. Why should this be in the core? I can entirely understand a plugin - Openfire is specifically designed to allow plugin auth providers. But I don't think we could commit to maintaining this.\n. I'm going to close this unmerged.\n- I don't think adding an application-specific password hashing method makes good sense in general, unless it's either extremely well-deployed, or a best of breed method - this is neither.\n- In this particular case, I think hMailServer would benefit enormously from implementing a SCRAM compatible hash method, which we already support.\n@godly  - The SCRAM method is actually based on PBKDF2, with some additions to allow it to be used within the SCRAM challenge-response SASL mechanism. It's basically as secure as @defuse's method at rest, plus it allows for some better on-the-wire security.\n. #512 is now merged, so I think this one can be closed.. This looks great - I've added http://issues.igniterealtime.org/browse/OF-1153 to track this, can you update to include the ticket ref at the front?\n. Nobody has ever complained about this before, as far as I can tell.\nI would want this left consistent with network.interface.\n. I wonder if @tevans could comment on this - looks fine to me, with the caveat that it also looks like a breaking change.\n. Turns out that null LockOutFlags are stored against users (including the admin user during setup). This breaks setup... We can fix it case-by-case, of course, but we might need to revisit this.\n. I don't know - but we need to be very careful before we release with this patch in, since breaking everything and finding out later isn't really an option. You get a null LockOutFlags object stored with pretty well every authentication, I think, so in theory I think the admin console would have broken and no users would be able to log into a cluster if what you're saying is literally true. Hence the suggestion that we might need to revisit this and see exactly what's going to break - maybe log for now and review later?\n. It's causing the current trunk to be unusable.\nThat's not desirable.\n. I'm assuming this is an error.\n. Please stop doing these.\n. Looks good to me.\n. That sounds plausible. This is the only case I ran into where the exception-on-null patch you did caused a user-visible error, so I patched it. There's probably others.\n. I don't think this is right - it's handling service-level IQ stanzas in the MucLocalUser - shouldn't this be handled in MultiUserChatServiceImpl instead?\n. Opened OF-1237 to track making this configurable.. I'm reasonably confident that if the  and  part of the spec doesn't talk about the use of '=' for the zero-length string, it's an error in the spec and not our code. (success and auth both do, rightly, mention it)\n. Closing in favour of #692, which includes this commit.. This looks good - update copyright and merge?\n. ... as well. If it's a derived work, at least.\n. Seems I forgot the upgrade scripts, despite writing them.. Yes; this one hits the main Openfire tables instead of the Monitoring plugin's, and provides MUC history with full stanza replay. I'll also hit it in a future PR for MAM/MUC.. Removed extraneous import (thanks Daryl).. Should have been OF-1233 - sorry!. I don't think this is right. this.iqHandlers can be null, but namespace can't be (at least, perhaps it can, but only theoretically - I think it'd be causing trouble way before this).. Thanks!. It's even confusing to Simon. Let me see what I can do there.. Flattery will get you everywhere.. I'm not so much \"requesting changes\" as wanting to know some rationale, BTW.. Fixed the patches, rebased to make them (considerably) cleaner.. Anything else to do here?. Actually, scrap this. I'm not convinced it's this simple when I look deeper, and without properly testing it I'd rather put this aside for now.. For future reference, can you make patches against master? Easy to cherry-pick things backward onto release branches.. Found another issue; I'll fix this in the same PR.. Happy with this change, although:\n I'd be quite happy with this particular case (UPN) being supported in the core.\n I've a vague preference for downloadable plugins, rather than subclassing which would - I think - require more from administrators.. Should this be in the core repo? And do we intend (eventually) shipping this by default?. Nope. ANd this one looks good, so.... So the entire framework has no effect unless an AccessControlDecisionFunction is loaded - so that's the on/off switch. It could really use some clearance loading stuff, but the problem there is that it's just opaque strings at this level.. Sorry it's taken so long to get to this.\nMy concern with this would be that there is no obvious way we can test the work, nor easily evaluate it for security. Overall I'm leaning toward rejecting it - not because of anything to do with the code, but due to logistics.. That sounds like a fine idea.\nFWIW, if you do want more discussion, the chatroom is the best place to engage with other developers.. Sorry this took so long. Been trying to find the time to really understand the code.. \"DefaultUserPRoeprtyProvider\" looks a bit Dutch. ;-). Hence \"for the future\". I think it's a logical, later, addition - absolutely not something essential for this PR.. Haven't done any testing beyond \"Does it still build?\", but I could use the reviews.... Tested this, now can't find a behaviour difference for simple cases. I haven't figured out how to consistently trigger OF-1309 yet, but I'm confident it won't affect this design.. I think this is failing to build due to the Ant build not having the jars. Do we care?. Should this delete the .part file if an exception is generated?. Similar commit, different code.. I think this should work, but it looks like lgtm had a misbuild - it's only picked up the changes to the plugin.xml. Argh. CRLF.. Thanks for the review, @ganeshbms \nThe reasoning behind the deliberate NPE is that I'm trying to ensure that use of getConnection() on a detached session (that is, one that contains this.conn == null) is logged very explicitly. It shouldn't be occurring at all, since the caller can check isDetached() first.\nLeft to its own devices, it'd generate an NPE anyway, and there's an outside chance it might do the check for null on the return (though I don't think so, I checked each caller), so I don't want to generate an exception without catching it.\nSo basically it's a mild hack to generate logging and a stack trace.. We do need to worry about side-effects, of course, but we'll see what we can do in testing to locate these.. I think this is fine, and I don't think it'll have any ill effect on anything else, so I'm just merging as-is and we can go from there.. #902 is way better than this. And has Tests. TESTS!!!. Looks good to me.. Pushing as is, because while I think this could go further it is doing quite a bit and doesn't appear to do any harm.. This looks much better than #883. Tests and everything!. So, somewhere, this isn't working. Candy sessions to open_chat are passing stanzas through to S2S sessions under the jabber:client namespace, which is problematic as many servers won't handle that.\nC2S session seem fine, S2S sessions seem fine. So it's possibly Websocket only that's affected?. Oh, except I see a stupid typo.. Oh, for the ache of Fux. I'll sort that in a minute.. I'm still testing this (ie, I haven't even run it yet), so don't merge - but I'd welcome any early comments.. I can't break this, now. But some of the older (non-Mavenized) plugins don't build, like Kraken. I'll work on fixing those now.. Kraken was the only one (now fixed).. You're quite right. I'll sort that now.. Totally in favour of this.. I'm confused - why would adding a line feed at the end cause the return statement to be unneeded? And what's the harm in leaving them in?. Thanks for this. This is really early code, so it's great to see people are testing it (and finding bugs!). What needs to happen to this on the Maven front?. This patch looks great, but suggests an underlying issue that Openfire shouldn't be accepting such stanzas. IQ stanzas MUST have a type, so we can, and should,  reject them earlier. . Pinko-subversive branch name, though.. This looks about right. Also the title uses the C++ scope operator, so wins.. C++ got there first, so it wins. ;-). Wrong upstream branch. Having a bad day, obviously.. This looks fine, although:\n Are the Javadoc corrections in the User Import/Export plugin code intentional?\n Do we know the original license? It seems unclear if the original code were licensed under Apache 2 or compatible?. I'm fine with this - any reason not to merge?. I'm really not convinced this ought to be in the main Openfire repository. Entirely happy, of course, for it to be elsewhere and available via the website etc.. Is this something that's better off in its own repository, or is this a possibility we'd want to ship this by default?. That was more or less why I didn't do this guard originally - I decided a hard fail was preferable, and tried to audit the code instead.\nFWIW, I still think auditing the code is the \"right\" solution, and I think you're right in both cases, but this is thought to make the sessions markedly more stable.. Looks good to me.. This seems to have a lot of OF-1496 commits in... Should it?. What @sco0ter said - can we refactor the boolean checks to the form object? (\"we\" - heh). Oh, Kay.. I'm not sure the models of XEP-0049 will support this. I need to review this in more detail, but loosely, I'm aware that <iq><query xmlns='..'><elementone xmlns='1'/><elementtwo xmlns='1'/></query></iq> is legal, but it's never been completely clear what that actually means, and what a corresponding get of <elementone xmlns='1'/> would then return. I'll try to review our current behaviour and the new code within a few days.. Right, so here's my concern with this - and note, this might not be a concern in practise.\nXEP-0049 allows multiple elements within a particular namespace to be stored. So it'll allow multiple <storage xmlns='a'/> elements, for example, or a <storage xmlns='a'/> and a <configuration xmlns='a'/> to both be stored. Asking for either gets you both, which is remarkably odd behaviour - but does, thankfully, mean that Private XML can be keyed exclusively on namespace. The way XEP-0049 is written is, however, at odds with how it is used.\nXEP-0048, for instance, says explicitly to use only one element. I have no idea if any server supports using more than one. If everything only uses one element, then this PR will probably work in this case.\nSecond problem: this patch assumes that all existing XEP-0049 cases can be recast, verbatim, as XEP-0223 cases. This is true for XEP-0048, but there is no certainty that this would always be the case, despite the fact it is likely.\nThird problem: @inputmice pointed out on the standards list that clients which attempt to synchronize XEP-0049 and XEP-0223 stored might get thoroughly confused if this is done automatically.\nI don't think any of these problems are definitely showstoppers, but I'm aware that as things stand, there is no way to undo this action if there does turn out to be problems. If we hit operational problems with this patch, what would we do?. What @GregDThomas says. But we could put in a group with a null name, or some other kind of marker.. I'm possibly old fashioned, but running new SecureRandom().nextBytes(...) every update/insert of properties isn't going to use up all the entropy or anything nasty, is it? ISTR such things are now well-protected, but I thought I'd best ask. Meanwhile I think it's fine, and I'll just merge on the assumption this is safe - if it isn't, we should probably review all cases anyway.. Yikes: http://javabreaks.blogspot.com/2015/12/java-ssl-handshake-with-server-name.html\nYeah, this looks surprisingly complicated.. OK - so skip SNI for now, but do get the TLS disabled mode working (or at least checked).. So we have stuff like this:\nhttps://github.com/igniterealtime/Openfire/blob/master/src/java/org/jivesoftware/openfire/session/LocalOutgoingServerSession.java#L294\nWhere is TLS is disabled it won't try to negotiate it on outbound connections.. Yeah... That'll do. I think we might want to ensure you can't disable TLS but still listen at some point, but that can be done in the future.. I also think this should be merged as-is and ASAP.. Merge failure, but otherwise the code looks good. I believe I see how to fix the merge.\n. I re-checked this, and yes it's fine. (I was a little confused by the second hunk, but it makes sense to me this morning).\nThanks!. We've switched from Ant to Openfire? I can't keep track of what these plugins can do, you know.. Well, what could possibly go wrong?. Yes! Actually that flag isn't even saying whether it's self-signed anyway, so it's outright confusing.\n. Now... I thought that CertPathBuilder would check the expiry dates, etc - and I'm running the path through CertPathValidator as well. However, self-signed certs both in the trust store and used as end-entity certs aren't checked - so I think I'll add in a check in getEndEntityCertificate() to do this.\n. \"If the current address is not that of the originator, send the presence.\" - this matches the comment, in as much as it's sending the presence of the session to this user's other sessions. The interesting question is whether the presence is sent to the session that generated it somewhere else, since (I think) it's meant to be.\n. You're right in that it needs checking for; but I think we can best check in OfflineMessageStrategy.storeOffline can't we?\n. Oh, see, this is why I shouldn't be allowed to get near Java. :-)\n. I think these should be set within a constructor, and possibly should be final. I don't think these should have setter methods.\n. My previous comment would mean this would be:\nreturn new CreateNodeResponse(PacketError.Condition.forbidden);\n. Wouldn't this need to be done in the same transaction?\n. Should this be info level logging?\n. Does this matter? Previous behaviour was to call init() once, then start() multiple times. This call pattern still works, but the init() call isn't actually needed anymore. I'm not sure I care either way, mind.\n. I was expecting this to get called during any session ending, anyway - and yes, there are quite possibly better ways to hook into the cleanup state. Ideally, I think we'll need to move more of the Session state either into StreamManager or something else, so resumption will have a change of working.\n. I see this works because setPresence() rebuilds LocalMUCRole.presence with the new extendedInformation - is it worth causing this to happen within setRole()/setAffiliation() instead?\n. I think we shouldn't be handling these when they refer to an occupant, only to a room or service. Otherwise a user can't reliably ping another occupant.\n. Ah, never mind, you've already told me I'm being daft in the chatroom.\n. Yeah, so just add your own copyright statement. But don't put \"All Rights Reserved\" - just \"Copyright 2012-2016 Robert Marcano\" (in this example, I'm assuming you wrote it originally around 2012).\n. Isn't this unused now?\n. Oh, so legacy functionality moves to IQHandlers? Yes, that would be sane, but I'd prefer to do that incrementally. Although I appreciate that may never happen as a result - but I don't have the cycles to do the move right now.\nA similar notion might be to allow IQHandlers to be queried for the Disco#Info features they provide - in fact I think we might have to do this in order to handle the above idea.\n. Ah, yes. It's the default error we should generally return, I think, since it's equivalent to an unknown namespace. A bunch of XEPs specify to return this in Unauthorized cases, too - not least because a private, unlisted room might otherwise unwittingly reveal its presence, for example.\n. Should this be a configuration option? I can see it being useful to override for some closed-environment cases.. ... and likewise here, an option might be useful? Obviously this works as a default.. I think these will need escaping to avoid an XSS.. You could probably escape the parameters set above, actually.. If we validate the xmppDomain and hostname elsewhere then we're OK.. Yes... I just copied the existing error message, but I think that must have the domain in the logger. I'll fix this.. I'm not crazy about synchronizing on an interned string. Was the lack of a lock a problem before?. No, not really. Thanks.. Yes, entirely - it's within a single transaction.. It can't be called - it's part of the '136 support I'm not attempting to handle for MUC (and not even sure it's possible to handle).. OK. Do we push or hold?. Those are all really database-specific, and often really hard to add to an existing table. I'd have had to do the upgrade by creating a new table and populating it from the old one (which I can do, but getting it right in every database we support....?). You think? A COUNT(*) should be fast everywhere; it's a COUNT(something) that might introduce a table scan. FWIW, I believe we're already doing similar for 1:1 messages in support of MAM.. Yeah, you're right. No idea what I was(n't) thinking.. Because continue just there isn't enough, and I decided I'd rather have a single \"continue\". Nothing more than a stylistic choice really.. That's entirely possible - I'll look into how to construct that.. I don't think so - it's explicitly only removing the org.jivesoftware.openfire.labelling.MessageInterceptor class objects, isn't it?. null would imply a default. An empty string would (or might) mean something to the ACDF.. Good call.. I think this isn't even used, actually. I originally intended making a wrapper construct much like the SecurityLabel, to contain clearances within a syntax-marked XML wrapper. I'll ditch this.. It's possible I was thinking in C++ at this point. :-). Again, good catch.. Seems like it, sorry.. Assuming Java does shortcuts, you'll want this as the first condition:\nif (!isComponent(subscriberJID) && ...)\nisRegisteredUser() will do a disco#info query (rather surprisingly) in order to find out whether a remote user is anonymous or not. Not sure this is right, but it's what's done.. Is this right? I think this would result in a non-interned String, which would be a temporary object here, and so not syncrhonize properly. Appreciate this is existing code, but might be nice to fix if needed.. Not a very obvious property name. But I can't think of a better one.. Not quite right - SELECT_MESSAGES_ORACLE has no WHERE clause, but SELECT_MESSAGES always does. I think the right fix is therefore to add a dummy WHERE clause to the Oracle statement (WHERE 1=1 or something).. True. We could (possibly) use a specific truststore for this that explicitly (and maybe only) included the LetsEncrypt CA.. Done.. Yes, you're right - I've removed both getAuthenticatedDomains and getHostnames and so on, and replaced them purely with DomainPairs throughout.. I have written nice documentation now.. Absolutely prefer to push as-is, but it might be worth checking the content namespace is consistent and correct, given that otherwise we won't detect when someone sends jabber:server over S2S, for example.. So I think this won't catch:\n<message xmlns='jabber:client'><body xmlns='jabber:client'>Blah</body></message>\nThis probably doesn't matter for now.. Really? :-). We probably want to talk about \"Direct TLS\" rather than \"Legacy-mode\".. Pretty sure that because of XEP-0368 mandating SNI, you'll need to be able to pass in a remote domain here, too.. This looks generally good, but if the server has TLS disabled we should probably not perform the \"_xmpps-server\" lookup.. You'd want to pass in the remote domain here for SNI.. Set SNI here?. Storing a null here won't work for clustered cases.. ",
    "imaginator": "@dwd agreed it's evil if exposed to 0.0.0.0/0. But having it on 127.0.0.0 and ::1 is very useful! \n. ",
    "Redor": "Yes, that could be the problem. I don't know why it happened.\nI changed the follow code block:\n```\n<%\n    if (showReadme) {\n        String pluginName = ParamUtils.getParameter(request, \"plugin\");\n        Plugin plugin = pluginManager.getPlugin(pluginName);\n        StringBuilder readmeString = new StringBuilder();\n        if (plugin != null) {\n            File readme = new File(pluginManager.getPluginDirectory(plugin), \"readme.html\");\n            if (readme.exists()) {\n            BufferedReader in = null;\n            try {\n                in = new BufferedReader(new InputStreamReader(new FileInputStream(readme), \"UTF8\"));\n                String line;\n                while ((line = in.readLine()) != null) {\n                    readmeString.append(line);\n                    readmeString.append(System.getProperty(\"line.separator\"));\n                }\n            } catch (IOException ioe) {\n                ioe.printStackTrace();\n            } finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (Exception e) {\n                    }\n                }\n            }\n        }\n    }\n\n%>\n<%=readmeString%>\n<%\n    return;\n    }\n%>\n<% if (showChangelog) {\n    String pluginName = ParamUtils.getParameter(request, \"plugin\");\n    Plugin plugin = pluginManager.getPlugin(pluginName);\n    StringBuilder changelogString = new StringBuilder();\n    if (plugin != null) {\n        File changelog = new File(pluginManager.getPluginDirectory(plugin), \"changelog.html\");\n        if (changelog.exists()) {\n            BufferedReader in = null;\n            try {\n                in = new BufferedReader(new InputStreamReader(new FileInputStream(changelog), \"UTF8\"));\n                String line;\n                while ((line = in.readLine()) != null) {\n                    changelogString.append(line);\n                    changelogString.append(System.getProperty(\"line.separator\"));\n                }\n            }\n            catch (IOException ioe) {}\n            finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    }\n                    catch (Exception e) {\n                    }\n                }\n            }\n        }\n    }\n%>\n<%=changelogString%>\n<%\n    return;\n}\n%>\n```\n. I'm sorry, but I'm not familiar with git enough to update the PR. I try to avoid that next time.\n. looks good!\n. Looks fine to me. \n. Hi, thy for your contribution. Your PR looks good and I will merge it, but I would recommend you to take the REST API plugin, which contains all the userservice features. The only thing you need to change is the path of the URL (from userservice to restapi). The REST API plugin contains already the support of JSON (consuming and response). \nREST API documentation: https://www.igniterealtime.org/projects/openfire/plugins/restapi/readme.html\n. REST API support already fully JSON.\n. +1, nice work\n. +1\n. +1\n. @sco0ter Could you please review/comment that?\n. The PR looks good for me.\n. +1\n. What should that be?\n. +1 I saw that also many times\n. Could you please add the JERSEY_LOGGER back?\n. Great work. Thy !\n. Would it also increase the Performance?\n. +1\n. +1\n. Done\n. Yes, that is correct.\n. Sry I could not manage that to clean up the diff :/\nFollow line are added by creating a new chat Channel:\n// Fire RoomUpdateEvent if cluster is started\nif (ClusterManager.isClusteringStarted()) {\n  CacheFactory.doClusterTask(new RoomUpdatedEvent((LocalMUCRoom) room));\n}\n. It seems to be a compatibility problem in the REST API v. 1.2.1 . Please use the latest working version REST API 1.1.7\n. +1\n. +1\n. +1\n. Thy dbh for the hint, I updated the documentation in the pullrequest: https://github.com/igniterealtime/Openfire/pull/1068. Good catch :) added it. @akrherz yes it looks right. (Formatter kicked in and did a big whitespace change) . Thy dbh for the pull request. It looks good for me, but I'm unsure about the the logging in each function. \nI would see them more on the debug level rather instead of info. \nOr even better: that it would be possible to disable/enable logging on the rest api plugin page. \nWhat do you think?. Thy @dbh . Thank you for the pull request. It would be great if you could adjust the date and increase the version, so that we could build a new version.\nIn the plugins.xml from:\n<date>08/30/2018</date>\nto:\n<date>11/28/2018</date>\nand the version in pom.xml\nfrom:  <version>1.3.7</version>\nto:  <version>1.3.8</version>\n. Should that not be 0.0.1?\n. Is that right?\nShould it not be just: StandardCharsets.UTF_8\n. It is required to avoid Logging on startup\n. It is required to avoid logging on startup\n. Good catch!. maybe better \"plugin.restapi.serviceLoggingEnabled\" ?. ",
    "sdebnath": "Hi there - I did indeed create a community discussion for it, just forgot to link it here. Here you go: \nhttps://community.igniterealtime.org/message/241603#241603\n. Closing this request to fix up git branching. Created new pull request: https://github.com/igniterealtime/Openfire/pull/64\n. Closing this request to fix up git branching. Created new pull request: #65 \n. ",
    "ArchyInf": "Created a new one with the full message included in the commit. Thanks!\n. ",
    "kost": "Done as requested\n. Just pushed the last change, let me know if that's okay now.\n. ",
    "koledas": "Yes, that's right.\n. ",
    "DanielMaier-BSI": "I would appreciate if you can cherry-pick it. I will do rebasing with my next pull request :).\n. ",
    "wmz7year": "Hope this is right, I'm just learning to use git, thanks guys\n    https://github.com/igniterealtime/Openfire/pull/108\n. Hi. When it will be released version 3.10.0?\n. @akrherz Good work!  What is the big problem\uff1f\n. Hello, I try to startup cluster with hazelcast plugin .With hazelcast 3.3.3 version I got this exception,\nAnd I have no idea to fix this.\njava.lang.IllegalArgumentException: PortableFactory[-21] is already registered! com.hazelcast.concurrent.atomicreference.client.AtomicReferencePortableHook$1@52289875 -> com.hazelcast.concurrent.atomicreference.client.AtomicReferencePortableHook$1@67315376\n.  \nLike this\n. Hi @tevans , if the PluginClassloader not guaranteed isolation between plugins,this change will not work.\nCause if one plugin has ClusteredCacheFactory then all plugin's PluginClassloader can  be load ClusteredCacheFactory .\n. I'm sorry for this.But my PluginClassloader idea is right? I'm testing all plugin and find issue.Then I'll create new pr.\n. I know the why some plugins not work. No need to restore.\nMy PR put up isolation between plugins, including openfire.\nWhen the plugin active use Openfire plugin resource,When you need to call Openfire not visible resulting in can not find, I will solve this problem in a new PR\n. @akrherz @tevans  I have tested all plugins.\nJust justmarried and ofmeet plugin not fine.\n1. justmarried has own log4j.jar.\n2. ofmeet has own slf4j.jar.\n3. ofmeet System.getProperty(\"whack.componentManagerClass\"); return null  throw NullPointerException.\nOther plugins are work fine!\n. @akrherz I have already fix code style.\n. Here should use equals?\n. @Flowdalic Year, That's my mean.\n. I create getClusteredCacheFactoryClass and getLocalCacheFactoryClass method to dynamic get clusteredCacheFactoryClass  and localCacheFactoryClass.\n. ",
    "damencho": "Fixed routing the iq error packets, does it look ok now?\nThanks\n. Hey, about ofmeet, I haven't checked it lately, but I know it is jitsi based. In the late months we tried to mavenize all of our projects, currently only jigasi is not finished yet, but I'm in a process of doing it. Currently we are using github for our maven repo, but if there is a contribution in our community we can start pushing them to some official repos. Currently github is working fine, as we needed a quick solution to speed up development. But anyway at some point we will hit the size limit of the repo and will need to move :)\n. ",
    "guusdk": "Using org.jivesoftware.util.JiveGlobals#getProperties it is easy to get a list of property values. I suggest you use that to replace the hard coded properties. To simplify things, I suggest you put one host and one port in one property, separated by a colon: example.org:1234\n. https://github.com/igniterealtime/Openfire/pull/161 is pretty similar. Perhaps efforts can be combined?\n. The commits in this pull request appear to have applied an automatic formatter. As a result, pretty much the entire plugin has been modified. This obscures your changes. Can you please rectify this?\nAlso, are you aware that a similar change is proposed in https://github.com/igniterealtime/Openfire/pull/157 ? Perhaps your efforts can be combined?\n. (I never argued we should have hardcoded addresses?)\n. Oh, that'd be good. That same merge would then also obsolete #157, I think? it would be great if you can verify and close both pull requests!\n. I have cherry-picked and merged @linuschien fixes for 3 and 4, and created a new PR https://github.com/igniterealtime/Openfire/pull/458\n. Thanks for your contribution!\n. Note that there's a small issue being introduced here. See https://igniterealtime.org/issues/browse/OF-957\nFix: https://github.com/igniterealtime/Openfire/pull/322\n. We've been using the new modules.xml file for a while now, and to be honest, it's not working out for me. The implementation itself appears to be fine - things work as intended. I am, however, repeatedly running into issues that relate to builds / instances that have 'out-of-date' versions of the modules.xml. That's likely caused by one or more issues in the build or upgrade process, but when I was thinking about it - what does modules.xml solve what cannot be done with an overlay? Yes, the solution presented here is a cleaner solution compared to overriding XMPPServer in an overlay, but perhaps I'm starting to think that the added complexity outweighs the benefits of this change. By far most user (or even developers) won't ever need this functionality - for those that do need, I think we have a fitting workaround: https://www.igniterealtime.org/builds/openfire/docs/latest/documentation/overlay.html\n. https://igniterealtime.org/issues/browse/OF-1005\n. PR for rollback: https://github.com/igniterealtime/Openfire/pull/455\nI'd welcome some feedback!\n. Ok, the commit above should address those concerns.\n. Closed the pull request, as it doesn't actually change anything.\n. Thanks for your contribution!\n. Auch! There's an issue with this commit. Setting up a fresh Openfire instance now throws a StackOverFlow exception while setting up the database. This is called recursively:\nat org.jivesoftware.util.XMLProperties.parsePropertyName(XMLProperties.java:805)\n    at org.jivesoftware.util.XMLProperties.getProperty(XMLProperties.java:185)\n    at org.jivesoftware.util.XMLProperties.getProperty(XMLProperties.java:169)\n    at org.jivesoftware.util.JiveGlobals.getXMLProperty(JiveGlobals.java:321)\n    at org.jivesoftware.util.JiveGlobals.isSetupMode(JiveGlobals.java:970)\n    at org.jivesoftware.util.JiveGlobals.getProperty(JiveGlobals.java:536)\n    at org.jivesoftware.util.JiveGlobals.getIntProperty(JiveGlobals.java:578)\n    at org.jivesoftware.database.DbConnectionManager.getConnection(DbConnectionManager.java:124)\n    at org.jivesoftware.util.JiveGlobals.isSetupMode(JiveGlobals.java:981)\n    at org.jivesoftware.util.JiveGlobals.getProperty(JiveGlobals.java:536)\n    at org.jivesoftware.util.JiveGlobals.getIntProperty(JiveGlobals.java:578)\n    at org.jivesoftware.database.DbConnectionManager.getConnection(DbConnectionManager.java:124)\nThe issue at hand: to set up the database, we (now) use a property. To read a property, we determine if we're in setup mode. To determine if we're in setup mode, we see if there's a database configured. Lather, rinse, repeat.\n. I've raised https://igniterealtime.org/issues/browse/OF-958 to track this issue.\n. Retrieving configuration from a database that is used to connect to a database does not make sense. The XML route sounds more sensible.\n. Installing our own instead of Jitsi's makes sense. Thanks!\n. That looks innocent enough. Thanks for the contribution!\n. pushing it one level down should work. Not sure if there's a \"better\" place, but this sounds good enough. If you push the change (and do a quick test, you never know), I'll merge it.\n. No problem. I just did the same test, everything appears to be fine. I'll merge the PR.\n. Thanks for picking this up again! Turning the project into Maven will give many benefits!\nLet's try to avoid having our own Maven repository. Not only is it a hassle to maintain, it will also prevent us from submitting Openfire to a central repository (where it ideally should go, I think).\nTinder already is in a central repository, by the way: http://mvnrepository.com/artifact/org.igniterealtime/tinder Not sure what problem you're having there?\nas for the other library - is that to generate Windows-based installation artifacts? Perhaps we can find a Maven-friendly alternative, or keep that part out of Maven completely.\n. At the very least, someone should shout at and be generally very unfriendly towards the Tinder project lead. That guy has definitely dropped the ball.\nAs for Kraken - I wonder if any of the transports in there are still functional. It has support for IM-networks that do not exist any longer. Perhaps we should simply drop the entire plugin.\nI've looked as stun myself - either there was an alternative, or the code is relatively easy to port / replace. We can create our own alternative.\nOFMeet is the only one that's worrying me. That should definitely be taken care of one way or the other. Might be good to involve @deleolajide ...\n. Tinder actually is on Maven Central:\nhttp://mvnrepository.com/artifact/org.igniterealtime/tinder\nOn 21 April 2016 at 11:52, Christian Schudt notifications@github.com\nwrote:\n\n@lewie https://github.com/lewie I haven't worked on the migration\nlately. The main showstopper currently are the native installer builds for\nMac, Windows, Linux. These are currently configured for some non-public\nigniterealtime servers. I can't really test it.\nIt also uses install4j, which requires a license. i thought about\nmigrating the Windows installer to Inno Setup, which is free. All in all, a\nlot of work for different platforms, which is not easy to develop/test on\nlocal dev machines.\nOther issues:\n- some plugins don't build, because they use proprietary or\n  non-official artifacts, which aren't on Maven Central.\n- tinder.jar is not on Maven Central either (ignite's Tinder project).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/347#issuecomment-212837708\n. Please do not hijack this pull request for a Gradle-vs-Maven discussion. Feel free to contribute a Gradle-based approach, but please do so by creating a dedicated pull request. \n. A move from Ant to Maven is being prepared for the Spark project. The work done so far is in this branch: https://github.com/igniterealtime/Spark/tree/SPARK-1791_Maven\n\nIf there is knowledge that we have learned from Mavenizing either project, it would be good to apply that to the other one.\nI'd love for the people involved in the Openfire Maven process to have a look at what we did so far in the Spark project. Comments? Suggestions?. Ah, my biggest concern was the move to the standard directory layout - which only now I see was not done, only suggested. I've just rebased the code, and with some additional dependencies, was able to build the project again. Better yet, the Ant script still worked too - which makes a merge of this PR a non-breaking change, I believe.\nI'm in favor of merging the PR, and start finalizing the Maven work on the master branch. I think that in the immediate future, we should retain both the Ant as well as the Maven build structure (have continuous integration for both), until we have brought Maven up to a \"production-ready\" quality. After that, we can drop Ant, if it gets in our way (as long as we can keep both, there's some value in that. Given that this PR still \"works\" after all these months is a good indication that we can actually keep both systems side-by-side for some time, if we would want to).\nGiven that this still is a very useful PR, even after all these months of inactivity, goes to show what an excellent job @sco0ter did! Kudos!. I like your reasoning.. So, now that we merged, I've been trying to use the structure, and ran into the first issue. I tried to create a plugin that is not part of the Openfire source code. To do that, I copied the pom.xml file of one of the other plugins. This made org.igniterealtime.openfire:plugins be me parent. Things failed, because the build was trying to retrieve the xmppserver artifact with a version number that matched my plugin version number.\nI dug a little deeper: by having the inheritance structure that we have now, all plugins that would define 'plugins' as its parent would inherit everything from the project. This adds a lot of useful stuff (it makes things work), but you also inherit the things that are not applicable to you. Even stuff like our license, project members etc, are inherited. What's worse: when you invoke maven from within the directory of your plugin, it populates the various ${project.xyz} properties with values that apply to your plugin project. Part of the Openfire maven structure expcects these properties to be filled with the values of the Openfire project (this is why my plugin build tried to look up the org.igniterealtime.openfire.xmppserver dependency with the version number of my plugin (1.0-SNAPSHOT), rather than Openfire's 4.2.0-SNAPSHOT).\nI've tried to decouple the plugins artifact from the parent artifact (by not defining a parent for the plugins artifact), but that introduces a lot of challenges (as a lot of what is being inherited is needed). I'm not sure if this is the best way to go either.\nThoughts?. I tend to agree with you, but the cut/pasting of poms would involve a lot of boilerplate config. I'd prefer to avoid that. A Maven plugin for Openfire isn't something I'd really would like to maintain, but it beats answering user questions five times a day, needing to decipher what's wrong in their plugin pom.xml. I'm interested in the 'better ways' too. :). I've tried to decouple the plugins from the parent project here: https://github.com/igniterealtime/Openfire/pull/775 (please continue discussing that specific subject there).. Reduced complexity is good. I cannot see anything wrong with the change either (although I did not run tests - do we know how to get in touch with Andi? He used to be able to shake things down thoroughly). As for my original fix: It was the result of a trial-and-error session more than a solution that was well designed and executed. A good part of the problems that my changes tried to fix related to the issues that we had after upgrading MINA - which has since been rolled back.\n. Although I'm deleting stuff myself, shouldn't we mark things as \"deprecated\" instead? That will give third party developers some leeway\n. I agree with Tom and dwd here. To me, it's more important to not break existing deployments than conforming to IANA. \nI like Toms reasoning of applying this as part of the setup, although I'd like to find a way to turn that around: upgraded installations should re-configure the new default back to 7070 (instead of having new installations use a different setting than the old 7070 default). \nPerhaps we could employ the incremental database upgrade scripts for this. Those are only executed when there is an update (fresh installations use the 'bulk' script instead). This arguably is not the nicest way of doing this, as it would create differences between the 'bulk' and the incremental database installation scripts. I'd welcome an alternative.\n. When they're not in the database, you never changed the default. Actually, when they are in the database, we shouldn't modify a thing in the first place!\nNot having them in the database shouldn't prevent this from working. We don't need to explicitly check for their value. Rather: when we're executing an incremental database upgrade, we know that this installation is an older installation being upgraded. In that case, we could check for the value, and if it's not there, set a value that configures 7070 to be used. As long as we're not doing that in the database script that's executed by a fresh install, this should work. As I said, not the cleanest solution, so if we can find a better way, I'm all for that - but I think this works and it beats keeping 7070 as the default which is overridden by every fresh setup with a property.\n. Yeah, I can't figure that out either. The test runs fine locally. Maybe a fluke?\n. Ther's no need for this any longer, as the code that is fixed by this PR was reverted by https://github.com/igniterealtime/Openfire/pull/423\n. I concur that rolling back to stop the existing issues is preferable.\n. Looks good to me.\n. I reviewed the code without running it - can't argue with anything.\n. ConcurrentHashMap was there only because at one point, I used that as a drop-in replacement. The class itself was never thread safe, so we're not loosing anything there.\nI had not noticed OF-952, but I agree with you, that's likely unrelated (although using the case insensitive mapping will help there as well, I think).\n. This PR is likely a duplicate of PR #435.\n. Yes, Tom beat me to the punch. That explains why I couldn't figure out why my changes were effective: Toms changes kicked in when I recompiled my sources.\n. Ah, that's where I messed up. Thanks Tom. :)\n. We've been running this on igniterealtime.org for a couple of days now. So far, things look ok.\n. Ant Contrib was updated because locally, we had a fix for a build process that got rolled back right after I created this pull request. \nXmlTasks was updated because its changelog says it offers better support / logging for XmlCatalogs, which relates to OF-998\nBoth libraries are used by the build process, not by Openfire itself.\n. Perhaps SAMEORIGIN instead of DENY is more suitable here? I bet that there are instances out there that are embedded in some kind of larger management console.\n. seems good to me. +1\n. Ugh. That is a lot of files. I'd prefer finding a solution where we don't need to include all of WordPress' sources in our repository.\nThe repository is bloated as it is. I get that including the sources makes it easy to integrate stuff, but from a development point of view, I think it's not ideal: It introduces lots of duplication, and loading things in an IDE is bound to kick of all kind of 'automatic language support' triggers. My IDE is already having trouble doing basic indexing/searching as it is - we shouldn't add to that.\nPerhaps Git Modules offer a suitable approach for us to reference sources in other repositories? \n. Indeed, i18n is still needed. I am explicitly putting that off until we're done refactoring those pages. Applying i18n has proven to be very time consuming - I want to do that at the last possible moment to avoid me going back and forth.\n. csh gave his blessing (under conditions) in open_chat ;)\n. So you want to accept (for inbound connections, where we are in a server-role), but not transmit (when we're a client, ie outbound server-to-server connections)?\n. Perhaps we can find middle ground in switching to an implementation that generates IDs of equal length, but using the full alphabet (+digits) instead of just hexadecimals.\nPerhaps we should switch to SecureRandom while we're at it.\n. Quick stab at a full-alphanumeric solution using SecureRandom:\njava\nfinal SecureRandom random = new SecureRandom();\nfinal int maxStringSize = 8; // maximum amount of characters in the generated string.\nfinal String id = new BigInteger( maxStringSize * 5, random ).toString( 36 );\nThis still used eight characters (easily changed on the second line), but is a lot less likely to generate duplicates (which, obviously, will eventually start to occur even with this implementation).\nI have executed an iterative generation a couple of times after increasing the max length from eight to ten. After about 14 to 15 million generations, my JVM begins to run out of memory. I've done that a couple of times - only once I ran into a collision (at around 13 million generations). That appears to be a vast improvement over the original test (which had multiple collisions for only 200,000 iterations), with just a small increase in ID length (nothing near the length of an UUID).\n. I've created https://github.com/igniterealtime/Openfire/pull/480 that includes the change that I suggested earlier (but not the pluggable StreamIDFactory, which can still be added as a complementary feature).\n. +1. @tevans you've been playing with the MUC implementation a lot lately. What's your take?\n. I don't see how this PR breaks the unit test (as Travis reported).\nOtherwise, +1. \n@speedy01 care to review?\n. Re-fired Travis, now all green.\n. Hmm. In hindsight: would a better solution to the problem that this PR tries to solve be: make sure that the manager.getUsernameField() method returns a value that uniquely identifies a user? The value for that method is configurable through the ldap.usernameField property. Would the PR be unneeded if @anuko had set ldap.usernameField to \"distinguishedName\" for their setup?\n. I've created a PR to revert the change here: https://github.com/igniterealtime/Openfire/pull/509\n. Reading up on the subject a bit more, I don't believe that my suggested workaround would work. Nonetheless, what's in place now is not portable to other LDAP providers than Active Directory, and should be reverted.\n. I'm not to happy with the fact that we don't require a password for new installations, but that's out of scope for this PR. This PR improves the existing situation. +1\n. +1\nWhen doing a search for \"xml:lang\" in all java files, I'm finding a couple of others (StanzaHandler.java, SocketReadingMode.java) that are also populated with a Locale. Can you fix those as well?\n. Seems to be inline with what happens with an add (line 861 onwards). +1\n. Thanks for taking the time to fix this!\nYour change makes sense. Can it be improved by having the calls to GroupEventDispatcher's addListener() and removeListener() in the same class somehow? If we can, we should keep those together. That will cause less problems with maintaining the code later.\n. I'd prefer if this PR makes it in the upcoming release, even if the suggested improvement has not been provided. Fixing the memory leak is a significant improvement.\n. The interesting bit is that we used to have the code in this state. It got changed by @tevans in commit 3032cc8484ff2d322a380cf9a05669c5a9527083 which mentions OF-857 (I believe that this is a typo - that issue seems unrelated). Tom, could you do a review please?\n. Some minor tweaks:\n- It would be best to preserve the order of the set (not use HashSet)\n- To make sure that we're not missing some default / edge case, check the actual content of the enabled protocols (not the content of the configuration) for the existence of SSLv2Hello\nI think this alternative would do the trick:\njava\nfinal Set<String> protocols = new LinkedHashSet<>( Arrays.asList( sslEngine.getEnabledProtocols() ) );\nprotocols.remove( \"SSLv2Hello\" );\nsslEngine.setEnabledProtocols( protocols.toArray( new String[ protocols.size() ] ) );\nLastly, we should also update the text in connection-settings-advanced.jsp (it should no longer mention the outgoing SSLv2Hello option).\n. +1\n. +1\n. By special request...\n. +1\n. +1\n. +1\nOn a side-note: Perhaps we should rethink our issue logging / code modification strategy. Currently, we keep issues in JIRA (from which the changelog is generated). Since we moved from SVN to Github, more and more pull requests got accepted that don't relate to any JIRA issue. That causes us to miss changes in the release notes. \nI'm not advocating for any particular change. I don't dislike JIRA, I don't dislike Github, and I certainly don't want to enforce \"paperwork\" - however as things are now, we're presenting a changelog as if it were a complete overview, while it isn't.\n. Yup - to the extend that it was already supported by ClientControl. I did not even look at the implementation, I simply splitted the existing plugin in two. See the JIRA issue for background / context.\n. I merged #506 and rebased.\n. +1\nThanks for taking the time to look into this. We're accepting pull requests using a policy that requires two regular contributors to sign off on it, before it gets merged. You've got my vote. One to go.\n. I was actually busy creating a JIRA ticket :) https://igniterealtime.org/issues/browse/OF-1040\n. This undoes https://github.com/igniterealtime/Openfire/pull/474\n. A alternative is provided in #511\n. Closing. Merging #511 instead.\n. Is this an improvement of #482 or a completely new change?\n. +1\nShould his go in 4.0.1?\n. I've created https://igniterealtime.org/issues/browse/OF-1048 to track this change in the changelogs (which we generate from JIRA).\n. Associated to https://igniterealtime.org/issues/browse/OF-1049\n. Thanks for your contribution. This should improve things a lot. I've added some comments inline.\n. I'm merging this to master, cherry-picking all but the SHA-1 to SHA-2 commit to 4.0 branch. Will follow up to restore the 5-year validity for self-signed certificates.\n. I have created new pull requests that, combined, contain all of the commits from this pull request.\nhttps://github.com/igniterealtime/Openfire/pull/526 contains most commits, with an additional commit that restores the 5-year-validity for self-signed certificates.\nhttps://github.com/igniterealtime/Openfire/pull/527 contains the commit that replaces SHA-1 with SHA-2. Although desirable, we shouldn't have such a change in a patch release.\n. @sco0ter Am I right to conclude that this PR still needs work?\n. Is this a duplicate of https://github.com/igniterealtime/Openfire/pull/512 ?\n. @tevans this change having proved itself as a fix for the problems that you had is a powerful argument in its favor. I can see how gracefully slowing down the submission of task is a nice auto-throttle, that can be very useful. Still, you haven't won me over on the way the change is implemented.\nTaskEngine is a general-purpose implementation. Although the change works for the problem at hand, I am worried that it introduces problems elsewhere.\nConcurrency is a complex beast. Changing the asynchronous implementation to an implementation that is asynchronous-expect-for-when-it-isn't is introducing another layer of complexity. Again, something that I fear will sooner or later introduce new issues.\nMost of the thread pools in Openfire are size-limited. When it is such a thread that suddenly interacts in a blocking way with the TaskEngine, I fear that the risk of thread starvation or livelock is introduced.\n. +1\n. Is generating default values in such case wise? If something is off, it's not unreasonable that exceptions are raised. Perhaps we should improve exception handling instead of generating default values?\n. @tevans You know the hazelcast stuff inside out. What's your take?\n. When you're right, you're right. It's a lot cleaner without the additional layer. I originally had that in place, as I am working on a custom SaslServer that needs configuration before being used - something I cannot do in the SASLAuthentication as it's very Provider-specific, but also wouldn't fit in the provider itself. The \"middle layer\" was born that way. Revisiting that solution, it seemed over-generic and over-configurable. I ripped it out.\nI've added a new commit that transforms my earlier changes into standard SaslServer implementations (I can squash later - for the sake of this discussion, I thought it would be useful to keep the history). \nOne thing to note: Some SaslServer implementations need a LocalSession instance. I'm passing that through the configuration argument of org.jivesoftware.openfire.sasl.SaslServerFactoryImpl#createSaslServer I'm not particularly fond of this solution, but I'm not seeing a better way of going about.\nI also rebased, which introduced commit 5ec02ac.\n. Like so?\n. @sco0ter I'm somewhat anxious to get this merged (I'm juggling with some branches that depend on each-other). Any last remarks?\n. Squashed.\n. Yes. In a future commit. ;)\nThanks for your thorough reviewing!\n. I've created OF-1096 and reworded the relevant commit message.\n. @victorqhong-bah As the original author of the code I modified, I'd welcome your feedback on this.\n. Thanks, @victorqhong-bah . For client-based certificates, we should have the EXTERNAL SASL mechanism kick in. I would not be surprised if that needs work, but if needed, I prefer to address that in another issue / pull request.\n. 11 years. Must be some kind of record!\nPerhaps we should have a property that allows you to override the default behavior. People that have had an email for the past 11 years, will probably still want one now :)\nAlso, @sco0ter will make you squash the three commits into one, or kill a kitten. ;) Use git rebase -i which will give you a nice help text. It's easy.\n. Oh, no worries. To use a property, simply replace that line in which the\nmessage is composed with these lines:\nif ( JiveGlobals.getBooleanProperty( \"plugin.emailonaway.exposeemail\", false ) ) {\n   message.setBody( \"I'm currently away. Your message has been forwarded to my service email address (\" + emailTo + \").\" );\n} else {\n   message.setBody( \"I'm currently away. Your message has been forwarded to my service email address.\" );\n}\nThat will by default use the 'else' block, but allow you to override the\nfunctionality with that property. Feel free to rename as you see fit.\nAs for the squashing: I don't use Eclipse myself, but from what I find in\nGoogle, you can simply select all commits in your history, open the context\nmenu and select 'squash'.\n. I'd rather have the fix for the ghost sessions, as that problem is a lot more visible. On top of that: are we sure that the original problem was fixed in the first place?\n. I'm not knowledgeable enough to evaluate of the changes have the desired effect, but I'm in favor of the intended change.\n. @jcalderonzumba Thank you for your modifications. This looks a lot better. I noticed that the index names are pretty long. Did you verify that they're within bounds of what is permissible (I ran into issues with that years ago, which makes me ask :P ). \nAlso, could you perhaps squash your commits into one? That would simply look a little nicer. If you're unfamiliar with the procedure, have a look here: https://ariejan.net/2011/07/05/git-squash-your-latests-commits-into-one/ It's pretty easy to do.\n. This looks great, thanks! I only now notice that you're updating a plugin, and not Openfire itself. It would be good to update the changelog file to write down what you've changed (and perhaps include a warning for uses that already have a huge table - adding the index will probably take some time).\nAlso, you should increase the version number of the plugin in the plugin.xml file. I'd go for a very minor update.\nI have created the following JIRA issue for this change: https://igniterealtime.org/issues/browse/OF-1117 You can refer to it in the changelog.\n. Ah, sorry, missed your last commit. yeah, this looks good!\n. This probably helps to prevent OF-1116.\n. @jcalderonzumba I'm not worried by the users that are provided by our own database. However, Openfire can be configured to retrieve its users from an external source (such as LDAP, Crowd, etc). That framework is pluggable: you can write your own provider. When using that to extract existing users from some external repository, the creationdate might simply not be available. In such case, simply not displaying the date is better than making up a value.\n. When merged, please cherry-pick for inclusion in 4.0.3.\n. Tests with speedy appear to be unsuccessful. I'll debug and recreate this PR.\n. Hey, thanks for putting in the effort to contribute. Some questions:\n1. Is that particular way of generating a password specific to hMailServer, or can we give it a more generic name?\n2. Wouldn't it be more user-friendly to create a HMailServerAuthProvider?\n. Thanks for your contribution. Although I dislike having these files in our source in the first place, this change is likely to be an improvement.\n. Good enough for me, indeed. :)\nAlthough I don't think it relates to rayo/jingle, it helps to be aware of the 'parent-plugin' structure that plugins optionally have. When you define a parent for a plugin, the 'child' uses the classloader from the parent (which would allow you to circumvent duplicate libraries and such).\nAlso, generally, I don't like to have the plugin classpath enabled in my IDE by default. As the IDE typically does not limit the usage of libraries to the plugin, you run the risk of using a class provided by a plugin library in another plugin (or even the core). Also, having all plugins loaded can slow down the IDE considerably, as it needs to index a lot more things. But hey, to each his own, and, as I'm not using Eclipse anyway, I'm happy to accept this PR :)\n. Hi, thanks for your contribution. Openfire typically ships with pre-compiled JSP pages (when not in development mode :P ) Will your change affect that?\nAlso: that JettyJasperInitializer class is used on other places as well. Should those now be modified too?\n. I have raised https://igniterealtime.org/issues/browse/OF-1133 to track this change.\n. I think we can take a calculated risk here. We'll know where to find you. ;-)\n. let's not change \"network.interface\" - at least not without a bulletproof, fully automatic upgrade. I fully agree that \"interface\" isn't the semantically correct word here, but I feel that we shouldn't introduce a problem for any existing installations, just to rectify this.\n. Thanks for this! It would be good to have that plugin fixed. Two questions:\n1. Does 'addFirst' work when the stream is encrypted (both StartTLS on port 5222 as well as traditional TLS on port 5223)? Logging encrypted data isn't going to be very useful.\n2. Why wait for the plugins to be loaded upon start? Plugins can be removed, added, or reloaded at any time after the initial boot anyway. Do we need to wait for something, or is that an optimization of sorts only?\n. Fair enough. I'd be happy to merge this as-is. I'll leave the PR open for a bit to give others a chance to review. By-the-by: You're still at 3.6.4? Wowza. \n. > Well, if it ain't broke ... :)\nWell...\n. I know we're slow to merge, but I'd still value the change. Can you reopen? :)\n. log4j, and both slf4j libraries are supplied by openfire. No need to add\nthem to the plugin.\n- Guus\nOn 20 June 2016 at 21:59, Dele Olajide notifications@github.com wrote:\n\n\u2026ts via email\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/igniterealtime/Openfire/pull/604\nCommit Summary\n- jmxweb plugin - add support for automated and scheduled monitor\n  reports via email\nFile Changes\n- M src/plugins/jmxweb/changelog.html\n  https://github.com/igniterealtime/Openfire/pull/604/files#diff-0 (6)\n- A src/plugins/jmxweb/lib/genson-1.4.jar\n  https://github.com/igniterealtime/Openfire/pull/604/files#diff-1 (0)\n- A src/plugins/jmxweb/lib/itextpdf-5.4.1.jar\n  https://github.com/igniterealtime/Openfire/pull/604/files#diff-2 (0)\n- A src/plugins/jmxweb/lib/javax.mail.jar\n  https://github.com/igniterealtime/Openfire/pull/604/files#diff-3 (0)\n- A src/plugins/jmxweb/lib/log4j-1.2.17.jar\n  https://github.com/igniterealtime/Openfire/pull/604/files#diff-4 (0)\n- A src/plugins/jmxweb/lib/quartz-2.2.2.jar\n  https://github.com/igniterealtime/Openfire/pull/604/files#diff-5 (0)\n- A src/plugins/jmxweb/lib/slf4j-api-1.7.7.jar\n  https://github.com/igniterealtime/Openfire/pull/604/files#diff-6 (0)\n- A src/plugins/jmxweb/lib/slf4j-log4j12-1.7.7.jar\n  https://github.com/igniterealtime/Openfire/pull/604/files#diff-7 (0)\n- M src/plugins/jmxweb/plugin.xml\n  https://github.com/igniterealtime/Openfire/pull/604/files#diff-8 (4)\n- M src/plugins/jmxweb/readme.html\n  https://github.com/igniterealtime/Openfire/pull/604/files#diff-9 (6)\n- A\n  src/plugins/jmxweb/src/java/com/ifsoft/jmxweb/plugin/EmailScheduler.java\n  https://github.com/igniterealtime/Openfire/pull/604/files#diff-10\n  (59)\n- A\n  src/plugins/jmxweb/src/java/com/ifsoft/jmxweb/plugin/EmailSenderUtility.java\n  https://github.com/igniterealtime/Openfire/pull/604/files#diff-11\n  (170)\n- A\n  src/plugins/jmxweb/src/java/com/ifsoft/jmxweb/plugin/HttpClient.java\n  https://github.com/igniterealtime/Openfire/pull/604/files#diff-12\n  (49)\n- M\n  src/plugins/jmxweb/src/java/com/ifsoft/jmxweb/plugin/JmxWebPlugin.java\n  https://github.com/igniterealtime/Openfire/pull/604/files#diff-13\n  (17)\nPatch Links:\n- https://github.com/igniterealtime/Openfire/pull/604.patch\n- https://github.com/igniterealtime/Openfire/pull/604.diff\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/604, or mute the thread\nhttps://github.com/notifications/unsubscribe/AEDoymxccObO3xrRUMn4Cp71uOnFlPswks5qNvETgaJpZM4I6EJq\n.\n. This appears to include mostly configuration and code changes that are private. Comments are not in English. THIS PR CONTAINS YOUR PASSWORDS, WHICH ARE NOW PUBLIC. You should change them immediately!\n. Thanks!\n. Java 7, yes. I don't think we've agreed on the specific make/model of the JRE. So far, we've pushed the Oracle one. As a good chunk of our users will go with OpenJDK, it's not a bad idea to use that too, though.\n\nPerhaps we should even consider testing with both OpenJDK as well as Oracle's - but that's another story.\n. Thanks! I've talked this over with Dave - he agreed that this seems to be a sensible improvement, even though it might break code that depends on null-keys for some reason (which would be third party code, and an edge-case at best, as far as I can tell now).\n. Let's indeed take a step back, and retry a solution. For now, I've created a PR (#625) to revert this change, and re-opened OF-1156.\n. Note that OF-1167 is caused by the original solution. #625 prevents it from occurring.\n. Dave did #631 - does that prevent the issue that caused me to revert?\n. Note, this PR is based on the 4.0 branch. If accepted, this needs to go in master too.\n. Yes. I'm preparing a new fix.\n. Is there such a thing as java8-runtime-headless ? If so, it should probably be added.\n. So, to my understanding, JavaX-runtime-headless are virtual packages, which is defined (here) as:\n\nSometimes, there are several packages which offer more-or-less the same functionality. In this case, it's useful to define a virtual package whose name describes that common functionality. (The virtual packages only exist logically, not physically; that's why they are called virtual.) The packages with this particular function will then provide the virtual package. Thus, any other package requiring that function can simply depend on the virtual package without having to specify all possible packages individually.\n\nIn the example of Oracle JRE 8, which is a physical package, both java7-runtime-headless as well as java8-runtime-headless apparently are provided by it (if the comment you referred to is correct - I didn't verify this). That's not to say that all physical packages that provide a Java 8 do this. To make sure that you allow for any physical package that provides Java 8, I think you should explicitly define that dependency.\nThe Authoritative List Of Virtual Package Names lists these Java packages:\n-  java5-runtime           (a Java runtime environment, Java version 5)\n-  java6-runtime           (a Java runtime environment, Java version 6)\n-  java7-runtime           (a Java runtime environment, Java version 7)\n-  java8-runtime           (a Java runtime environment, Java version 8)\n-  java9-runtime           (a Java runtime environment, Java version 9)\n-  java5-runtime-headless  (a non-graphical Java runtime environment, Java ver. 5)\n-  java6-runtime-headless  (a non-graphical Java runtime environment, Java ver. 6)\n-  java7-runtime-headless  (a non-graphical Java runtime environment, Java ver. 7)\n-  java8-runtime-headless  (a non-graphical Java runtime environment, Java ver. 8)\n-  java9-runtime-headless  (a non-graphical Java runtime environment, Java ver. 9)\nGiven this list, I'd say Openfire should depend on any of these (both headless and non-headless), that are Java 7 or higher.\n. Yeah, that's what I'd expect to work well.\n. I wonder if this relates to https://issues.igniterealtime.org/browse/OF-1191\n. Thanks for these fixes. I'm somewhat concerned by the latter part: this makes (this implementation of) SASL work only for (or with) the S2C keystores. Although obviously an improvement over \"not working at all\", it will break a feature that allows every type of connection to use it's own set of keystores.\nAlso, could you rebase the commit to get rid of that merge?\n. Apologies for the duplicate texts - I'm playing with the new reviewing functionality that was recently added to Github.\n. No, Openfire does not allow for different keystores to be configured for different C2S connections (but does allow for different keystores for C2S and S2S, for example). The SASLAuthentication class is re-used in other parts (I'm seeing references to server dialback, for example), and ideally, should remain re-usable for any type of connection that need to do SASL. \nYou mentioned that the 4.0.x branch is different from the master - did you happen to check if there are similar problems on master?\n. Can't we simply re-instate that RSS feed, instead of remove it? I think it's kind of nice to have that 'latest release' thingy in the admin panel. Restoring the feed surely isn't that hard?\n. Travis currently fails, as this PR depends on https://github.com/igniterealtime/Openfire/pull/641\n. I'm assuming it was added to create a tooltip.\n. I think we can do without, especially as this PR will make more of the text visible (assuming that most people use a near-fullscreen browser to look at the page.\n. Thanks for contributing this! Looks like quite a nice addition. I do think this warrants a bigger version-number update than the patch number though. Make it a 2.6 or 3.0 even. :)\n. Thanks for this! I don't know why this wasn't added last time, but I see no reason why not to. Seems like a usable addition. I've created OF-1199 to track this new feature in our issue tracker.\n. You're now listing Jive Software as the copyright holder of your code. I'd put in your name instead.\n. Additionally, we don't seem to need a 'count' at all. Perhaps you could modify that to be an AtomicBoolean, while you're at it?\n. Oh, that's quite easy: To turn it into a singleton, add a static private field to hold the instance, make the constructor private, and have a static synchronized method return the instance, lazy initializing it when first called.\n. No worries, we can squash this all later. :)\n. I suspect that at least some of the values that are affected are ASCII-encoding - but that certainly need not be the case for the password value in ScramUtils#createSaltedPassword.\n@dwd, is there a risk in processing everything in UTF-8?\n. Thanks!\n. Thanks!\n. I think that the line ending used in the changelog was changed, causing all lines of the file to be modified. Could you change that back to what it was?\n. For future reference: this PR was replaced by #665, #666, #667 and #668.\n. This PR replaces LONG with CLOB. LONG is  supported by Oracle, but its support has been deprecated.\n. Ah - that, I don't know. if that is the case, I'd consider to merge this PR as-is.\n. It's unlikely that we'll find any problems with this by looking at the patch. Lets merge, and see if we run into more issues.. Thanks!. I like how you pragmatically continued the typo in the constant name. :) XML might not be the neatest way of providing a default list, but, as it's pretty flexible and optional, it's good enough for now. If at some point someone wants to improve on this, we can do that in a new PR.. Also: the 'host name' is now retrieved from InetAddress's \"CanonicalHostname\", which I expect gives better results.. My only concern is that in places, the CSRF failure is hidden: an update is silently ignored, without any kind of error message. I've already encountered this in the wild before, which is terribly confusing. Some kind of error message would improve things a lot.. Note that I did not test this with a domain that had DNS SRV records set up. Let's do that on ignite. :). @dwd I am uncertain if I evaluated the problem correctly. As you are an expert of many things, including this, could you have a look? Is the problem indeed in the generation of the certificate, or should I have modified the parsing  of certificates instead?. With Daryl's change, this looks good to me.. Thanks!. Doesn't look to bad to me, but time will tell, i guess ;)\nPerhaps we should do a couple of follow up changes:\nOne that removes these two lines (followed by any whitespace-only or blank lines):\n<!--\n-->\n\nAlso it would be good to replace:\n/**\n *\n\nwith:\n/**\n\n(basically, remove any line following /** that only has a star and whitespace in it). Excellent. Can you do this for other repositories too?. Much obliged. I've reviewed the website's and Smack's, which looked fine (@wrooot beat me to Spark's, which is already merged). I merged the website one, but will leave Smack's to @Flowdalic. @tevans My change applies to your changes for group management. As such, I'd love your feedback!. Thanks for your contribution! I've changed the release date a bit, to reflect the time it took us to process the PR.. Would it make sense to make this configurable?. Not if you don't bother with a nice UI. You can simply use something like: JiveGlobals.getProperty( \"property.name\", \"default value\" ); (from memory, might be slightly different. It is used all over the place, should be easy to find an example.. As inspired by @deleolajide \ud83d\ude09. I would say: yes, respectively, no. But I shall be easily persuaded otherwise on both items.. Adding common plugins would obviously be possible, but perhaps we should find a way in which administrators can add (proprietary) Candy plugins in their version of Openfire.\nIt'd be interesting to see how that would be managed (would it survive a re-install of the Openfire plugin?) I don't know if there is any part of the Admin Console where we have custom content like this. If we do, we could perhaps borrow from the mechanism that's used there.. I am not to sure about this one. The approach that I took was a naive one: \"this takes a lot of time and repeats itself, let's cache it.\" I have not looked if we can reorganize the code in a more efficient pattern, nor did I look for similar improvements. Finally, I've added a default cache. I'm not sure what it's capacity is, nor what its eviction policy is (or should be).. @speedy01 reported that the change was effective: things speed up.. OF-1312 adds a section to the \"Registration & Login\" admin console page, which will look like this:\n\nIt will auto-detect available SASL mechanisms.. I have worked with Fabio to construct this plugin. It adds a proprietary SASL mechanism that authenticates a user, using a bearer token, against a Tiki-provided web API.\n@fabiomontefuscolo apart from the minor change that @akrherz mentioned, you might want to add some Javadoc comments and copyright notices?. Although I'm obviously biased (as I wrote most of it), I feel that the current code layout has some benefits. Granted, none of these are major benefits, and there's a good deal of style preference involved:\n\nIt will allow for additional implementations to be added.\nIt separates concerns.\nIt's in-line with the other implementations, making it somewhat more straight-forward to maintain.\n\nA refactoring will make the code different, but I'm not sure if it'll be better (maintainable, performant, etc). For my taste, the downside of being somewhat convoluted does not warrant a refactoring, with the added nuisance of retesting the integration et al - but that's me :). This PR is intended to improve on the issues as described in the bottom part of the discussion in #347.. There are likely further improvements possible, but with the changes in this PR, I intend to make it possible to create an Openfire plugin project with a POM like this:\n```\n\n4.0.0\n\nplugins\norg.igniterealtime.openfire\n4.2.0-SNAPSHOT\n\n\n<groupId>org.example</groupId>\n<artifactId>my-openfire-plugin</artifactId>\n<version>1.0-SNAPSHOT</version>\n\n<build>\n    <sourceDirectory>src/java</sourceDirectory>\n    <plugins>\n        <plugin>\n            <artifactId>maven-assembly-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n\n\n`.slf4j.version`` isn't even used, so that can definitely be removed. I don't think we can remove the jetty version though, as properties defined in dependencies are not accessible in the project as far as I know (unless it's defined in a parent project, which it now is not).. I'm not sure if it's worth the trouble. They only relevant property remaining is the jetty one, which is used for compilation of the JSPs. There's no real harm in doing that with a compiler provided by the Jetty project from a version that's different from the Jetty instance that's running the admin console. Even if the compiler version number changes, the compiled bytecode (from the JSPs) should be interchangeable. Write once, run anywhere, right? ;). I like the BOM idea in principle, but I don't think we need it just yet. I've removed the jetty property, by in-lining it with the JSPC plugin. How does this look to you?\n~Another thing that I noticed is that the JSPC plugin very specifically targets a particular java package. I wonder why @sco0ter specified it like this. I'd guess that simply compiling any JSP would be fine?~ That's likely the package in which the generated java files are defined, right?. Yup yup - I mistakenly thought it was put in to select/limit the source JSPs, which is silly, as they don't have a package definition. My bad.. @GregDThomas @sco0ter is this right? Should we always exclude them (and if so, shouldn't we also exclude them from the compilation scope? Is there a scenario in which we'd not want to exclude them? Forcing a different version, something like that?. Hmm, it was not working for me, but only now I see this warning in my build output:\n\nThe POM for org.igniterealtime.openfire:xmppserver:jar:4.2.0-SNAPSHOT is invalid, transitive dependencies (if any) will not be available, enable debug logging for more details\n\nBack to the drawing board...\nby-the-by: feel free to pop in the open_chat group chat - that makes for easier discussions. :). I yesterday fixed that POM (here: ef80834641a0dadef80c97533da225d3d798747f ). I'm closing this, as I'm doubtful if the explicit solution is needed, or even desired. Most of the problems that I set out to fix were caused by something else.. @sco0ter , @GregDThomas - thoughts?. Although caution is wise, that notice seems to be outdated. A proper, non-alpha, 2.0.0 release was made last year: https://github.com/dom4j/dom4j/commit/a4d39926ff08656e4cf86c37f3246029c4e9122b. Note, this introduces a null reference when there are no client certs. Fixed here: #789. I missed any Admin Console integration, I think. A simple switch on/switch off perhaps?. Thank's for your contribution!. This change replaces one property (history.enabled) with two others (historysettings.enabled and historytranscripts.enabled). Perhaps, both new properties should default to the value of the old property, if it was set?. Looks good to me! Thanks for taking the time to look into these details!. I've had a look at setting different cookie names, but that's not a trivial change either, from what I can tell. For now, let's at the very least warn the users, as you implemented. Thanks!. I (nowadays) agree that we should move to a standard Maven directory structure - but we should not do that now. We will, for at least one release, support both the Maven as well as Ant-based build. This makes it impractical to move the source folders.\nAdditionally, some have voiced that the plugins should move to their own repository - taken out of the Openfire repository completely. I don't necessarily have an opinion on that, but it illustrates that the structure that we will end up with is still subject to debate.\nHaving an in-between solution, separating the Maven metadata from the source, has proven to be confusing (at least to me), while it does not add much apart from a glimpse of what the future structure could look like. That is why this PR removes that structure. This in no means is intended to be the end result though.. My favorite is UserTypeBasedUserPropertyProviderMapper\nedit: which I now realize did not make it into this PR :) Maybe I should call it a day.. I agree on the LDAP side of things, but that's to complicated for me to want to spend time on that now. Note that many LDAP-based properties can already be exposed via the VCard. Not ideal, but at least, somewhat accessible.. Thanks! Have you tested how this affects upgrading an previous version?. I've looked at porting some of the documentation, but a lack of a proper place to put it, as well as most of the text describing what I think are settings that relate to SM, not websockets, I thought it was OK to give up my attempt.. ... why not merge now?. Note that there's a bug in the 'mapper' implementations, that's fixed by OF-1327 / https://github.com/igniterealtime/Openfire/pull/800. http://htmlpreview.github.io will let you look at rendered HTML from commits. For example: http://htmlpreview.github.io/?https://raw.githubusercontent.com/guusdk/Openfire/86d92a64325c0ecece673c419fbc4e0dcd44ce7c/documentation/docs/separating-admin-users-guide.html. I'm merging this, as it's a documentation-only change, which Sean tried out, and was able to make work.. Thanks for checking! I honestly don't know if the purpose of admins serves any purpose. I assumed so, and retained the functionality (there's quite a bit of code involved, actually). If they indeed serve no purpose, we might want to remove them - but lets do that in a dedicated issue/PR.. Good to see someone is using it after all. :) The current code in Openfire does not make use of this feature at all, I think. Is there any generic bit from your application that you can/want to push upstream, @deleolajide ?. \n(note that the DB Access plugin in reality does not have this restriction - I modified it locally to be able to generate the screenshot). Here's a plugin that can't run, because it's \"prior to\" condition is not met. However, there's an update available that can run in this version of Openfire.\n \n(again, the actual data is faked for the purpose of creating a screenshot)\n. Nah, we're just that much ahead of you guys nowadays.. This should fix the problem with the Ant build that I introduced in 93f818483a2bd7fe4dd8ab263ecdb8189f99bff0. Can't think of a reason why we should not do this. Perhaps ofmeet should be moved there too?. I've merged this PR (thanks, by the way :P) and am following up with another commit that mentions this in the changelog.. Thanks!. First, untested stab at solving this. I'm not sure if the default error is appropriate. The code will ignore data sent from entities that have cannot be resolved to a client session - so there still might be an open vector there.. Please squash when merging. :). Hi! Thanks for your contribution! Why is this change desirable?. Where you say \"field number\", you are referencing to the enum values, right?\nThose are defined in a specification, and will never change.\nAlthough I'm happy to improve code to resolve issues, I am reluctant to apply changes for the sake of change. I'd like to avoid over-optimization.. Thanks!. Thanks!. Should we have JIRA issues for these changes?. Yes, we should care if that's the case. 4.2 should be buildable using both Ant as well as Maven (after 4.2, we can drop the Ant build).. This looks like a sensible fix. Thanks!. Could you rebase to the current master? I've just added a fix there that hopefully prevents the continuous Travis failures.. I'm looking forward to having this in the admin console!\nCould I bother you to do the JSP bit in JSTL? We're (well, me), are trying to move away from scriptlets. There are a couple of custom taglibs that reduce some of the boilerplate HTML as well. You'll see plenty examples by looking at those JSPs that have been edited most recently: \n https://github.com/igniterealtime/Openfire/blob/master/src/web/group-edit.jsp for example. Thanks for doing that. This pleases my compulsive scriptlet removal urge. :)\nThis PR adds a new \"Pubsub\" tab, on the highest level (next to Server, Users/Groups, Sessions, Group Chat, and Plugins). My concern is that this confuses users that aren't well versed in XMPP (but just want to admin a chat server). Pubsub as a term is not something that many people will recognize.\nI've noticed that the Pubsub tab has but one sub-tab: node administration. That in itself has, now, one menu item: node summary. All in, it's pretty empty, for a complete menu structure.\nPerhaps we could move the \"node administration\" sub-tab to the Server tab, renaming it \"Pubsub\"? That'd both condense things a little, and keep the top menu clean-ish.\nThis again is not a hill I'm willing to die on (or even do battle on), but I think it'd make for a nice improvement, that takes little effort. Thoughts?. I'm very interested in what kind of things you might be providing, @deleolajide  :)\nStill, I'm concerned with the increased complexity of the Admin Console. One of the bigger plusses of Openfire used to be that it was super easy to setup and maintain. We've slowly started to drift away from that in the past few years. I'd like to prevent us from making things more complex.\nI'd still prefer to move the new Pubsub menu down a notch, and have it be part of the Server tab. We can always re-arrange the menu, when new features pop up that warrant more Admin Console space.. Merged with #875 . I don't think that @dwd's change fixes OF-1302 - but it's probably fixed with a very similar change. Dave, want to have a look?. This doesn't fix anything. :/. @dwd The last commit in #824 made changes that were not applied to the Hazelcast plugin. As we had plugin build failures in CI because of other reasons, I've missed that, and merged. That leaves Master in a state of utter brokenness. \nThis PR is an attempt to rectification. Although it now compiles, I've not ran this code.. @dwd, could you have a look at the OF-1379 fix? Do we need to worry about side-effects?. Good idea. I think you should add a javadoc comment in the code, mentioning this, to prevent people from reverting this change by \"cleaning up\" the code.. Thanks!. Thanks!\nI would not mind this replacing all other tabs (which add nothing but confusion, in my opinion).. The pubsub admin pages are starting to look really good! Thanks!\nA couple of observations:\n\npubsub-node-items.jsp has a summary table, that displays counts for items, affiliates and subscribers, just like other pages. On pubsub-node-items.jsp, the user cannot click on those numbers.\nSome pubsub items contain base64 encoded binary data. That currently breaks the display a bit.\nListing on the node summary can be lengthy. The pagination is great, but it'd be nice to be able to toggle the sort by clicking on the column headers.\nThe page that displays the published items could probably also use pagination (I've got a couple of nodes that have thousands of items).. Where subscribers and affiliates are users of the local domain, it'd be neat to link to their userpage ( /user-properties.jsp?username=<username> ). We've explicitly chosen not to do this. I'd like to invite you to https://discourse.igniterealtime.org/ to discuss issues.. Is this what it intends to look like? Beauty is in the eye of the beholder, but perhaps you could push the \"Allowed to create\" and \"System Administrators\" in their own blocks (with the text that's now to the right, on top)?\n\n\n. Slightly better - can't you stack the components at all?. Ah yes!. @yuan24zz Please do not comment on PRs with unrelated questions. Please ask your questions in https://discourse.igniterealtime.org/. This is a nice addition. I agree that adding a new library is overkill, but we might have something for this. Is something like this re-usable? https://github.com/igniterealtime/Openfire/blob/master/src/web/index.jsp#L211. Whatever suits you - I'd not invest to much time though :). Nice! For extra glitter, perhaps format the hit and miss numbers with the locale-appropriate thousands separator? Those numbers are likely to grow very fast and 16,253,353,233 is more readable than 16253353233.. Thanks!. This is an alternative to https://github.com/igniterealtime/Openfire/pull/883. Thanks!. Oh, as a plus, this commit will also allow other connection configuration changes to be applied without a restart.. Ah, yes, I'd not be sorry to see this one go. Just to cover our bases, let's get some feedback from others. @akrherz, @speedy01, @tevans @wrooot - thoughts?. Thanks for your contribution!\nThis change will break the API, that is likely in use by third-party developers. I don't like doing that for a non-functional change.\nPerhaps you could restore the old methods, and mark them 'deprecated'?. Background: https://stackoverflow.com/questions/11802507/use-mina-jar-dependencies-instead-of-bundles. Thanks!. Thanks!. Odd that it was deliberately added as a filtered resource. Someone had a very specific thought there. I'd be interested in knowing what that was.\nInstead of toggling it to 'false', we might as well remove the line. Filtering is sufficiently uncommon that no-one will wonder about the missing filtering statement (keeping it in, using the default, might even confuse some).. I'd prefer to have #953 be applied, before doing this release.. Note that mvn -P release clean verify on this state of the code will result in an error for the very last module (\"Web-based Administration Interface\"), when it appears to gpg-sign an artifact that does not exist.\nHowever, before the error, all artifacts required for uploading to Sonatype have been generated.. This requires #955 (or encoding).. I've deliberately left the Russian file out, as there's an ongoing PR for that.. This relates to #985 . Please note that we should properly re-test both the 'base distribution' as well as the install4j generated artifacts.. @deleolajide, for what it's worth: I'd prefer at least some of your plugins to be in a dedicated repository, rather than be part of the Openfire source code, for one of these reasons:\n\nthe functionality added by the plugin is very feature-rich, to an extend that it's hardly a plugin anymore, but almost a stand-alone application.\nSome plugins appeal most to very specific groups of users but not offer a 'simple addition' to the Openfire-server features (like, say, a plugin that resizes an avatar).\nSome of the plugins are really big (in byte size), making their inclusion in the (already very big) Openfire source undesirable.\n\nMost of the plugins that you produce tend to tick at least one of these boxes, but often a combination. That is perhaps why you observe that many of 'your' plugins get treated somewhat differently to other, mostly much smaller (in many senses of the word) plugins. Let me guarantee you though that there's not any personal motive at play (if anything, I value our interaction, even if I've been not as much on top of things in the last few weeks). . I'd not be opposed merging this into core, to combine this with the socks5 / stun / media and possibly jingle code that we have, at some point.. Thanks for your contribution!. I'm not a big fan of changing the functionality of the existing provider. I fear that it introduces issues in systems that somehow depend on the existing functionality.\nAs an alternative, would using the newly introduced https://github.com/igniterealtime/Openfire/blob/master/src/java/org/jivesoftware/openfire/user/PropertyBasedUserProviderMapper.java (and friends) be usable for your purpose? It allows you to define from which provider certain data originates, which will also give you all functionality from that provider, for that user.. @dwd Is this a symptom fix, or a proper one?. I feel that I've now addressed the OF-1200 issue that I described earlier.\n@GregDThomas I've taken a different approach for your a and b concerns, but it should address your concerns, I think? As for c and d: those would be nice, but if we go down that road, I'd rather apply that structurally throughout the code, instead of just here. Finally, the clustering issue: I'm worried that polling all of the cluster nodes here introduces a lot of overhead. I do expect that most to-be-stored-data will live on the local node (where the user is connected) anyways, so can we get away with not querying the cluster?. I think you're right about the clustering bit. I've now added a cluster-aware check. Thoughts?. That's an improvement, but not one that I have the energy for to put in right now. If what we have now is good enough, I'm tempted to push this as-is, and let others take improve upon what we have here.. Thank you for your contribution!. One more step towards foolproofness! Thanks man.. Yup, this depends on a change in OF-1496. As I added another commit to #1029, I needed to rebase this one (which I just did).. This now needs rebasing.. Hurgh. I'm somewhat tempted to revert https://github.com/igniterealtime/Openfire/pull/1017 - which was a hackish fix that does not appear to solve the issue that it was attempting to solve - but reverting that would require additional fixes. I don't think it'd hurt to do a release with that change in it. I'm cautiously in favor of doing a release based on the code as-is.. I think you're missing a library used by the Ant build. Probably one of the transitive dependencies that you're pulling in with Maven? . This was caused by me going back and forth on using a different trust store for client certs. I now feel we should, as that's what we've been doing historically.. \n. Something like this? I've copied the utility method that aught to go in Tinder to one of the classes here, marking it deprecated. That saves me from having to do a Tinder release just for this PR. I'll do that later, obviously.. @dwd As far as I can see, that does not apply to this PR. We're having <iq><query xmlns='..'><something><elementone/><elementtwo/></something</query></iq>, not <iq><query xmlns='..'><elementone/><elementtwo/></query></iq>\nFor what it's worth, I believe that the corresponding 'get' would not be of a child element of another child element, but for the 'outer' child element, thus returning all.. (note that @sco0ter's concerns were addressed in #1049, after which this branch was rebased on that. It makes the code changes he's referring disappear from this PR, which could cause confusion).. The implementation of XEP-0049 stores only one element (and disregards others). For example, in this example, only the 'dave' element would be stored, and not the 'guus' element. That's probably a bug (I particularly dislike the silent ignore), but given that I'm only finding out about this now, I don't think it affects to many people.\nI'd be fine by modifying the XEP-0049 implementation to explicitly return errors if more than one element is added. This should retain compatibility with XEP-0048. This should tackle your #1 and #2 concerns, I believe.\n<iq type=\"set\">\n  <query xmlns=\"jabber:iq:private\">\n    <foo xmlns=\"bar\">\n      <dave/>\n    </foo>\n    <foo xmlns=\"bar\">\n      <guus/\n    </foo>\n  </query>\n</iq>\nMy Google foo isn't strong enough to find the issue raised by Daniel. Could you kindly provide a pointer?. The build breaks for the Ant build only. This is caused by a change that's required in the Hazelcast plugin. The Maven builds are fixed on a version of Openfire that does not have this change, which is why they succeed.\n@GregDThomas how would you like to proceed? Merge this PR (assuming that nothing else is wrong) and take the required changes for Hazelcast as a separate PR, or make the changes in this PR? Also, before releasing a version of Hazelcast with the changes required, would you like to have an earlier release that does nothing but to set a 'max server version', allowing users to gracefully upgrade to a certain version of the hazelcast plugin when they use older versions of Openfire?. Would that be safe?. And interop wise, between cluster nodes? Wouldn't you need different class\nsignatures to detect properly that they'd not be able to exchange data?\nOn 22 March 2018 at 13:13, GregDThomas notifications@github.com wrote:\n\nI don't see why not. The @override https://github.com/override tag is\nadvisory only.\nOn older versions of OF, the methods will never be used.\nOn newer versions of OF, the methods will happily be called.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1052#issuecomment-375283162,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEDoyow9DR90mmUC3fMd7B1uU4yDbll_ks5tg5WHgaJpZM4SvU6z\n.\n.  I've rebased the PR, and updated the Hazelcast plugin to work with the new API. @GregDThomas I've been unable to update the Hazelcast plugin without pushing the version of the Openfire dependency to 4.3.0 (SNAPSHOT). A new cluster task needs a bit of the API changes that are in this PR.\n\nBest not to release this plugin while it has a SNAPSHOT dependency to Openfire. I've left the release date in the changelog as 'to be determined' to reflect this.. Although I didn't know that, I'm not terribly against updating the implementation itself to match the new API. As we were using the SLF4J api, changes were light (with the exception of some plugins, that still used Log4j directly - I now moved those to SLF4J too).. I've rebased the PR to the current master, and started to work on adding that dependency that you asked, @GregDThomas only to find that it was already in.\nNext, I started a clean build of Openfire, and loaded the Hazelcast plugin from the website (which obviously doesn't have any log4j2 changes.\nThis was logged:\n```\n2018.07.16 13:56:55 INFO  [pool-61-thread-1]: org.jivesoftware.openfire.plugin.HazelcastPlugin - Waiting for other plugins to initialize before initializing clu\n2018.07.16 13:56:55 INFO  [pool-61-thread-1]: org.jivesoftware.openfire.plugin.HazelcastPlugin - All plugins have initialized; initializing clustering\n```\nSeems to be OK to me.. Hargh. I think I started this before we ditched Ant. I'll remove them.. This appears to be a PR made as a mistake.. Hi @704nate  - thanks for this! Your last commit seems to have broken the build. Care to give it another go? :). This should not end up on the 4.2 branch!. Thanks Marc!. Thanks for the fix! Could you undo the reformatting please? This way, it is impossible to tell what changed.. Thanks for this! Why do you exclude artifacts from the newly added dependencies? I would not expect that to be needed.. > I was just about to merge this when I realised that plugins could not take advantage of Java 8 - so I updated the parent pom.xml for the plugins, too.  As far as I can tell, there's no way to inherit the same jetty version from the core xmppserver pom.xml, though happy to be corrected. \nI think you're right\n\nAlso, does this mean we should bump the minJavaVersion to 1.8 for all the plugin.xml files, now?\n\nUnsure - that's property defines a runtime restriction. Does the compiled JSP run on java 7? If not, I guess we need minJavaVersion on all plugins that have admin console pages (I'm no sure if all plugins do).. Maybe this discussion can be short-circuited. I just remembered that on master, we already dropped Java 7 support: https://github.com/igniterealtime/Openfire/pull/1028. ... do we need to bump the version number for all plugins?. It probably has a good reason, but why are you tying this to the Log4j API directly, instead of through SLF4j?. I'd prefer to go with one API, unless there are strong reasons to deviate. Not being able to copy/paste is not one of them in my book. :) \nAs for log4j2: https://issues.igniterealtime.org/browse/OF-1491 I did some work on that, but I don't appear to have pushed that for some reason. I'll check to figure out why I didn't.. @GregDThomas The log4j to log4j2 migration is in this branch: https://github.com/guusdk/Openfire/tree/OF-1491_log4j-to-log4j2\nCurrently, it compiles, and Openfire starts and appears to do logging - but I also see exceptions in std-out. I've not spent the time yet to look into that.. I've grudgingly have to admit that this doesn't sound barking mad. Can we, however, follow up with a second release for the plugin, that does have the log4j2 API bridge, and defines a minServerVersion? . This is not behaving in the way I intended. I'll retry this later.. Thanks Greg!. Thanks for this! Could you update the release date please? Otherwise, the changes look good to me.. @akrherz would you mind pushing a new plugin version to the website?. Thank you for your contribution. We're aware of the problem, but prefer to solve it in another way. Details can be found here: https://issues.igniterealtime.org/browse/OF-1517. Note to self: Read \"IV\" as \"Initialization Vector\", not \"four.\" This PR makes a lot more sense that way.\nI don't see anything wrong with this. As it feels a bit like a point of no return, I though I'd be nitpicky on some details that I think you've already covered.\nProperties can be read from XML as well as from the database. Reading from the database is only possible after some properties have been read from XML (notably: the database connection details). Does this PR introduce the possibility of a race situation, where reading the same property has different results depending on how fast after initial boot-up the property is being read?\nAlso, although I assume that as the IV is stored in the same table as the property value, there are no issues with restoring backups - but have you given that any thought?\nSomething similar for upgrading from older versions (as opposed to using a fresh install of Openfire). I think I see that upon load, the IV is used only when it's there, and being added/changed upon store. That ought to be fine, but just to check: have you explicitly considered both scenarios (fresh installs / upgrades)?\n. @dwd do yo care to have a look at this?. Maybe make it configurable?\nOn Thu, 12 Jul 2018 at 14:42, daryl herzmann notifications@github.com\nwrote:\n\n@GregDThomas https://github.com/GregDThomas some XMPP clients do not do\nIQ-ping, so they do whitespace pings. I am unsure if it is important to\ncheck those in the generated logs or not.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1108#issuecomment-404498692,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEDoygiJK-q_AKCNL9lTUj0Awblk00nUks5uF0QwgaJpZM4VLdOD\n.\n. Given that the build started failing, I guess we don't need to modify the build for this to become active? :). Ah, that bugged me! Thanks for finding this! Could I tempt you to update the changelog et al?. There is now: https://issues.igniterealtime.org/browse/OF-1578\n\nOn Thu, 19 Jul 2018 at 14:52, Anno van Vliet notifications@github.com\nwrote:\n\nIs there a issue-nr to which could refer? There is a topic in discource\nhttps://discourse.igniterealtime.org/t/monitoring-small-graphs-not-being-generated/82194\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1111#issuecomment-406265496,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEDoyouNRDDf8rfFPI_OLi6i6Gejd7UAks5uIIEUgaJpZM4VNTlu\n.\n. I've done some interop testing with another instance of Openfire, as well as with a number of other server implementations (ejabberd, metre). I didn't find any issues.. Ah, yes, I ment to check up on SNI, but forgot. \n\nWhen I read that Java 8 adds support for SNI, I had hoped that the SNI extension would be set automatically. It does not (I checked with tcpdump just now). I'm now trying to find how this is done in Java in the first place. Although I can find references that tell me to set this in an instance of SSLParameters, I fail to see how that's actually used. From what I can tell, only protocol versions and cipher suites are read from those parameters. Thoughts?. I've seen that, but it appears to be http specific. Our TLS wrapping does\nnot make use of SSLSockets either, which would be an alternative approach.\nI'll try to set the parameters in the TLSEngine that we use, bit the\ndecompiled version shown by intellij suggests that the SNI part is not used\nthere at all.\nOn Mon, 23 Jul 2018, 19:39 Dave Cridland, notifications@github.com wrote:\n\nYikes:\nhttp://javabreaks.blogspot.com/2015/12/java-ssl-handshake-with-server-name.html\nYeah, this looks surprisingly complicated.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1115#issuecomment-407140791,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEDoyn-RRytk16_GA4BsHt9V5-pq-vADks5uJgpcgaJpZM4VbBTC\n.\n. What 'tls disabled mode' are you referring to, exactly?\n\nWe've got a setting that will shut down our ports on which we listen for TLS, but that doesn't necessarily prevent us from making TLS connections ourselves, right?\nThere's an \"SSL enabled\" setting buried in http://localhost:9090/server-props.jsp somewhere, but that affects client listening ports only (and should arguably be renamed).. Like so?\nI think it'll be pretty confusing if we make the same property also modify the state of the listening port for the acceptor - that means that two different settings affect its availability.. Yup, I was meaning to do this after we dropped Ant support (but forgot). We can do something very similar for the name and description, by the way!. Did you check if the pom.xml defined name matches the plugin name? We might get some surprises otherwise.. I have the same concern, but I'm not quite sure if it's valid. If memory\nserves, it's the directory/jar file me that's used. I'm not completely sure\nthough. Perhaps it's better to retain the original names, just to be sure.\nOn Tue, 24 Jul 2018, 09:55 GregDThomas, notifications@github.com wrote:\n\nI did check; they are different. Which didn't concern me in the least, as\nthe pom.xml names seemed more consistent with each other (.e.g Callback\non Offline Plugin vs CallbackOnOffline).\nHowever, now you've raised it, I wonder if that's not such a good idea. I\nthink the plugin names are used as keys, in the code, etc., so changing it\nis probably a big mistake. I suspect I should probably back that last\nchange out.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1118#issuecomment-407315900,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEDoylkGcTOSpdpOrZg8BdO0vDuByPCzks5uJtL6gaJpZM4VbPAn\n.\n. I'm not sure if I agree with this being an issue. The javadoc for the listener defines: \nEvent indicating that the PluginManager has finished an attemp (sic) to load new plugins and unload old plugins.\n\nThat's exactly what it appears to be doing prior to the change. \nI have written in the past logic that depended on this (\"do something when new plugins are available\"), which I think would be broken by this change.. Aaah, no, I get it now. Disregard my last comment please.. Thanks for all of your contributions lately, Greg!\nThis looks good to me. Could you add a changelog item to the plugins that were changed that notes that the plugin now requires Openfire 4.1.1 please?. I honestly don't know. Maybe, but I'm unsure if that has side effects. I\nlogged the occurrence on warn level, to see if someone reports this\nactually happening. If it does, I'd like to investigate the cause.\nOn Thu, 26 Jul 2018, 14:46 GregDThomas, notifications@github.com wrote:\n\n@GregDThomas commented on this pull request.\nIn src/java/org/jivesoftware/openfire/nio/ClientConnectionHandler.java\nhttps://github.com/igniterealtime/Openfire/pull/1124#discussion_r205441438\n:\n\n@@ -105,7 +108,14 @@ public void sessionIdle(IoSession session, IdleStatus status) throws Exception {\n                     Log.debug(\"ConnectionHandler: Pinging connection that has been idle: \" + connection);\n                 }\n\n\nconnection.deliver(pingRequest);\n// OF-1497: Ensure that data sent to the client is processed through LocalClientSession, to avoid\n// synchronisation issues with stanza counts related to Stream Management (XEP-0198)!\nLocalClientSession ofSession = (LocalClientSession) SessionManager.getInstance().getSession( entity );\nif (ofSession == null) {\nLog.warn( \"Trying to ping a MINA connection that's idle, but has no corresponding Openfire session. MINA Connection: \" + connection );\n\nIs it worth attempting to close the connection that's not paired to\nprevent it handing around indefinitely?\nI'm not fussed either way, but just throwing it out as an idea.\nOther than that, looks fine to me.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1124#pullrequestreview-140709896,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEDoyhleDKAg0GW0oa1zs4fIacy6R_jnks5uKbo4gaJpZM4Vg44F\n.\n. Woah. I'm surprised that it's even in there.. I don't think that we'd want this, even if we do want to have stream management enabled by default again, right?. @GregDThomas do you see another solution to this? I'd love to retain the functionality, if possible.\n\nIf all else fails, maybe have some kind of hard-coded limit under which the filtering is applied, but above which it is not?. CPU's on Ignite are still burning, even with this revert. Something else must be up.. @GregDThomas All true, and we should improve on the architecture if we can - but for now, this fix appears to prevent deadlocks that Gugli is suffering from almost daily. I'd be in favor of merging a fix like this instead of holding out for a better fix.. @Gugli could you rebase / reword the commit to include the JIRA issue number please?. This change fixed the mutex that's used, but does not change the fact that the database is being queried while a mutex is locked. I don't think OF-1337 can be closed by merging this PR alone.. After this is merged, and a release is done, we should update the version in the pom.xml file to be a SNAPSHOT release again (eg: 1.0.2-SNAPSHOT). > Aside: I'm not actually sure why this needs to be a separate module. Why not just bundle the whole lot in to xmppserver?\nIf memory serves, this prevented some kind of issue when re-using the taglib in plugins. I'm not sure if that's still needed though.. Thanks Greg!. I've updated my existing Intellij project to this. That didn't introduce any problems (after the Intellij auto-magic occurred. I was still able to build and run the sources from the command line. Debugging also worked. I later removed all Intellij project files, and re-imported the sources as a new project (based on the Maven model). Worked like a charm! \nPerhaps we could add some more changes eventually (from a Maven point of view, I dislike having the 'src' folder in the root) but those can come later.\nI do have a concern regarding all of the installation scripts that we have (although I think those are primarily based on the 'distribution' module, which should be safe. The proof of the pudding is in the eating. I suggest we merge, and see if Bamboo copes.. That's what you get from hiding in London!\nOn Mon, 15 Oct 2018 at 22:23, Dave Cridland notifications@github.com\nwrote:\n\nWe've switched from Ant to Openfire? I can't keep track of what these\nplugins can do, you know.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1173#issuecomment-429999828,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEDoyo9-jTOYzgnI-IYUJrxX-3URZStAks5ulO7SgaJpZM4Xc-FR\n.\n. What remains to be done is to encode all i18n files from the plugins into UTF-8, replacing the unicode notation \\u with a human readable character. I've done this before as part of OF-1448, but I've forgotten how I did that.... Insta-update:\n\n$ find src/plugins/ -name \"*.properties\" -exec native2ascii -reverse '{}' '{}' \\;. Well, I don't need 4.3.0 runtime, only during building.. Is that strictly needed if the plugin code doesn't use any 1.8 API?. Ah, I see your point. I didn't think of that.. Added in #1181. Errr... did I mess this one up by attempting to resolve a conflict?. Ah, no. Github UI confused me (refused to rebase, but allows to merge). Eek! Something went wrong here! I suggest you try to rebase the change you intended to provide (or simply start over in a new PR, and close this one).. Yes, please.\nOp di 23 okt. 2018 18:48 schreef Vincent notifications@github.com:\n\nVery sorry about this mess. I forked the repo, checked out a branch with\n\"tags/v4.2.3\" (which I did my tests), created a local branch for the fix,\npushed my local branch to my forked repo, then I did a PR. Should I create\nmy local branch based on \"master\"?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1179#issuecomment-432326564,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEDoyo-MrTe_Qw1g6mKyDbqJSV1tyshHks5un0hygaJpZM4X0REw\n.\n. Note that we should not release this plugin until after it has been build with Openfire 4.3.0.. Replaced by #1198 . Thanks @wrooot !. I am sorry about this, @jadestorm ;). For posterity: Both plugins deleted by this PR have gone without maintenance, and are not functional. The Ignite Realtime Community opts to remove them from the Openfire code base for that reason.. It was removed, but not after another bit of code added another entry: https://github.com/igniterealtime/Openfire/blob/3b9b8d1bd63de116c28d39a39724103e2f98c68b/xmppserver/src/main/java/org/jivesoftware/openfire/SessionManager.java#L705. That's how one gets left in the List, while working with Sets does give the proper end result.. Thanks!. Maybe URL encode it for good measure?\n\nOp di 13 nov. 2018 21:03 schreef daryl herzmann <notifications@github.com:\n\n\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/igniterealtime/Openfire/pull/1216\nCommit Summary\n\nOF-1488 add csrf to fix removal of MUC Service admins\n\nFile Changes\n\nM xmppserver/src/main/webapp/muc-sysadmins.jsp\n   https://github.com/igniterealtime/Openfire/pull/1216/files#diff-0\n   (2)\n\nPatch Links:\n\nhttps://github.com/igniterealtime/Openfire/pull/1216.patch\nhttps://github.com/igniterealtime/Openfire/pull/1216.diff\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1216, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEDoygxa0f0tGYZGPgPZ-7qfXSK49vDTks5uuyWCgaJpZM4YcaXk\n.\n. I shall formulate my opinion as follows: \"thank you.\". log4j2.xml was never supposed to be embedded in any jar in the first place. Instead, it was supposed to go in the library folder, which is where it was, last time I looked. Am I missing something?. Ah.. Hmm, I was probably tricked by the one in startup.jar then. But, regardless, log4j (1) found it in lib because all files in there are supposed to be on the classpath. Did that change?. Weird. I wonder how log4j (1) was able to find its configuration then.\n\nOn Thu, 15 Nov 2018 at 16:46, GregDThomas notifications@github.com wrote:\n\nall files in there are supposed to be on the classpath\nI don't believe that is true. I think only starter.jar is on the\nclasspath, and that adds all the other JAR files on to the classpath in a\nwell defined order.\nhttps://github.com/igniterealtime/Openfire/blob/master/starter/src/main/java/org/jivesoftware/openfire/starter/ServerStarter.java#L87\nopenfire.bat for example doesn't define a classpath and simply specifies\nstartup.jar -\nhttps://github.com/igniterealtime/Openfire/blob/master/distribution/src/bin/openfire.bat#L19\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1221#issuecomment-439086277,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEDoyhINf5j7j8AlUFTFa4V0jWzeibxSks5uvYxYgaJpZM4Yf1Ii\n.\n. The stanza that causes this appears to be invalid (missing a child element).. Apart for allowing non-local users to query MAM, this PR also adds support for v0.6 of the MAM XEP, identified by the urn:xmpp:mam:2 namespace.\n\nOne of the additions to this version of the XEP is described in https://xmpp.org/extensions/xep-0313.html#archives_id. Here, a new requirement (\"MUST\") is defined that relates to XEP-0359. I don't believe that the current code has support for XEP-0359-defined \"Unique and Stable Stanza IDs\" at all (I don't even think it's in Openfire, as I can't find an implementation for the <stanza-id> element anywhere). It would therefor be incorrect to advertise support.\n. I like living on the edge.. As the inVerse plugin now lives in a different Git repository, this pull request has been replaced by https://github.com/igniterealtime/openfire-inverse-plugin/pull/3. I'm not a big fan to attaching this to a Maven phase where this action is unexpected. Can't we instead use either a profile, or an explicit additional argument in the maven command?. The CI does whatever is configured in the .travis.yml file. In the current state, the command that's executed is on line 13: script: mvn verify\nIt's deceptively easy to modify to whatever you want. :). Thank you! Moving the artifact to the right place will first require us to move it into the Maven repository. If you have time left, maybe look at line 17?. It's probably a good thing that Travis does not deploy anything to our Maven repo based on an unmerged PR. :). This looks great! Can we do it without a username, and just a token? A\nusername implies that a particular user is used, but that's not the case.\nIf we internally do require a username (for the AuthToken perhaps), then\nI'd prefer to use a randomly generated username that is not shown to the\nend user, and deleted immediately after use, if that's possible.\nOp vr 11 jan. 2019 19:37 schreef daryl herzmann <notifications@github.com:\n\nWoohoo! Awesome work, do you think this could get documented within the\ndocumentation found in your git repo?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1249#issuecomment-453614893,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEDoymPvwhGKw7VD5XMOKlWqVTWVkcUwks5vCNn6gaJpZM4Z76G3\n.\n. I'd prefer if this is explicitly not tied to an Openfire username. It is\nuncertain, or even unlikely that the natural person performing the recovery\nis the same person represented by the username. By using a particular\nusername, it is implied that the corresponding natural person performed the\naction of recovery, which is undesirable.\n\nOp vr 11 jan. 2019 23:52 schreef GregDThomas <notifications@github.com:\n\nA couple of questions, I would test but I\u2019m offline ATM.\n\nIs an audit entry created when someone logs in using this\n   mechanism? It should.\nIf you create an entry with a token for a user that doesn\u2019t exist,\n   does it work?\nIf it does, do subsequent audit actions get correctly logged? Not\n   sure if that requires a user, or just something that looks like a user id.\n\nOne suggestion; Pre-populate the initial openfire.xml config file with\nempty values (and a comment as to their purpose), and rather than delete\nthe XML values, set them to empty strings. That way it\u2019s far easier to set\nthis up.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1249#issuecomment-453682631,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEDoys4R1I3Nye1S5TCtg4Faz3sJyLYUks5vCRXDgaJpZM4Z76G3\n.\n. @SimonRWaters, would you mind reviewing this change, given that you have a strong background in security? This change attempts to introduce a feature where one can gain access to the Openfire admin console, by making a modification to the configuration file (that's on disc). The idea is to use this for password recovery purposes.. I played with this just now. It is great, thanks again! I have a couple of small suggestions for improvement:\n\n\n\"Please supply the time login token\" needs a 'dot' in the end: \"Please supply the time login token.\"\nthe logintoken.jsp should have a very clear warning that Openfire is running in password recovery mode. Maybe put exactly that text on top of the input field, in bright orange letters: \"Openfire is running in password recover mode!\"\nAlthough it is good to have an example in openfire.xml, I prefer that this example is put inside XML comment tags. This prevents the element from being up completely, which seems safer. . That makes sense, thank you!. Agreed :). This is a backport of #1255.. This is a backport of #1255.. oops - wrong branch. Right you are. Fixed.. This does not affect persistence of rooms, but it's something I should have given more thought. Storing logs for non-persisted rooms can lead to issues (the room could be removed, recreated with different settings/members, which likely isn't reflected in the stored log files). \n\nThe persistence of a room is something that can be toggled itself, which can add challenges to coming up with a proper way to handle archiving.\nThis is, however, not a completely new issue (non-persistent rooms today can already enable logging).\nMaybe it's good to delete the message archive when a room (persisted or not) is being deleted?. I've looked a bit further. I can think of two types of 'history' that we store:\n\nThe \"historystrategy\" cache that is in Openfire itself. Messages in here are not persisted (only kept in memory). I can't tell without further testing if the history survives a room - maybe it'd be good to explicitly delete it when a room is destroyed.\nThe monitoring-plugin provided archive. This appears to add a 'tombstone' to the archive, when a room is deleted (that's from reading the code - I've not verified if it actually works). That suggests that when serving up the history of a room, we could serve up everything up until the last tombstone.. When a MUC owner, through a client, requests the configuration of an\nexisting room, there's an option to specify \"room is persistent\". The same\noption is present when you create a new room, via XMPP.\n\nOn Fri, 18 Jan 2019 at 14:22, daryl herzmann notifications@github.com\nwrote:\n\nThe persistence of a room is something that can be toggled itself,\nHow is that toggled? :)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1266#issuecomment-455544135,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEDoypOzHUiwUBdatdwukyUwsD-lfqZ_ks5vEcqGgaJpZM4aG-Ki\n.\n. Thank you!\n. That's a sensible addition, thanks!. Although I really appreciate the effort you're putting into this, I believe that the risk of introducing an issue with a beta release is greater than using an older version that has a known issue that does not affect our code.\n\nLet's upgrade to version 1.8.0 whenever it is released.. The fact that other projects use a beta version of some library (that Openfire does not even use) is not relevant for this discussion.\nI can imagine that there are times where we would prefer to use a beta instead of waiting for a proper release, for instance when it has a solution for a specific problem that we are suffering from. This will always be evaluated on a case-by-case base. For the issue at hand, the evaluation is that updating slf4j to the latest beta is not worth the risk.. Could you rebase this to include 34a206b4f03842ad9c4edeea29dc37140d9e5f17 please?. This is awesome, thanks @GregDThomas !\nAs discussed, we'll merge this in Master (to be included in 4.4.0), but not in the 4.3 branch.. The only way that I can see that happen, is when the code is processing an IQ response (result) where the child element could be absent. I've now added a check for this.. I'm not sure if this, as-is, is sufficient for a new developer to start working on a (new) plugin. I had hoped for a tutorial that created a very basic plugin in Maven, that people could follow.. I'm unsure exactly what you're basing the manual on. I'd suggest to create a manual that creates a stand-alone maven project that has only the plugin (as opposed to add a plugin to the openfire source project). We have recently moved all of the plugins to distinct source repositories. You could look at any of them as an example.. Not sure if I understand what you mean. For now, I'd be happy if this thing started to work in the first place.... The build is failing with an error that I don't get locally. I wonder if this is because we skip the Openfire setup. @GregDThomas just pointed me at how we can setup things: https://github.com/igniterealtime/Openfire/commit/8bf8d5cbb1589361266c9783d95ea9f38fb2a909\nI'll try to add that (but later, time is slipping away from me today), to see if we can improve things.\nOne other improvement that I'd love to have is to get a clearer output of what tests are failing and succeeding. Do you have suggestions for that?. Thanks for this. The Travis check that was triggered by this PR actually ran through the newly added IF statement, so that provided a good self-verification.\nWhy do shallow checkouts not consistently work?. Sleep deprivation averted. Thank you!. Thanks for your contribution! The test failure is probably unrelated to your change, as I've seen it fail in different PRs too. I've restarted the tests.. (let the record show that I was a minute faster in restarting that test! :-) ). That'll require more changes, I think, and might still upset third-party code. Someone gave me sad faces last week for breaking API :)\nDoesn't mean we can't also do that, by the way, to prepare for a later -letsmakethisimmutable- type of change.. I did not want to remove init() because it is declared public. That's just me being cautious, perhaps overly so. Doesn't hurt to keep it around for a release or so.\n. I agree with you that it was probably best to have it private from the start, but it wasn't. For reasons that I don't know, people might be using this now. \nAs long as it doesn't hurt us in any significant way, I feel that we should prefer backwards compatibility over cleanliness - at least for one release. We should prefer keeping our existing users happy over ourselves being happy. \n. It was never used in the first place. A couple of lines down, it reads: if\n(zlibSupported) { zlibSupported = false; }\nOn 4 January 2016 at 23:14, Tom Evans notifications@github.com wrote:\n\nIn\nsrc/java/org/jivesoftware/openfire/session/LocalOutgoingServerSession.java\nhttps://github.com/igniterealtime/Openfire/pull/479#discussion_r48789078\n:\n\n@@ -449,77 +433,15 @@ private static LocalOutgoingServerSession secureAndAuthenticate(String hostname,\n             // Get new stream features\n             features = reader.parseDocument().getRootElement();\n             if (features != null) {\n-                // Check if we can use stream compression\n-                final Connection.CompressionPolicy compressionPolicy = connection.getConfiguration().getCompressionPolicy();\n-                if (Connection.CompressionPolicy.optional == compressionPolicy) {\n\nAre we dropping support for S2S compression?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/479/files#r48789078.\n. No, it will not (Travis successfully builds the build, which is a good indication that the build isn't broken ;) ).  The API signature provided by jcl-over-slf4j.jar is similar to commons-logging 1.1.1.\n. @dwd appears to have added that a few months ago, to fix OF-928.\n. Agreed. Shouldn't we go with the ConcurrentMap interface, rather than the Map interface?\n. That'd lock you out of the concurrent goodness, for any future usage. Seems a waste to hide it.\n. It boils down to a matter of preference, I believe. Dave introduced me to the term 'bikeshedding' yesterday. I'll go ahead and merge, since the fix itself is desirable now.\n. Typo: should by \"dynamically\"\n. You don't work for Jive, do you? :)\n. Yeah, and there's more redundant code. I'll squash an update.\n. :: is not valid in Java. Static methods can be called like any other: PrivacyListProvider.getInstance() should do it.\n. Again, replace :: wit a single dot.\n. Holy double negation, Batman! It's probably easier to name this \"databaseContainsPrivacyLists\", which is what we check for. Also, the comment above this line refers to a 'number', which is no longer the case.\n. If you instantiate a new Map here, you can remove a couple of null checks.\n. service_unavailable, not not_authorized'? \n. Would it be an improvement if we'd add all functionality in handlers? That way, we fall back to one implementation, which could be used by plugins to override default behaviour, when desired.\n. Instead of removing this, \"@role\" could be replaced by \"@param role\". Was this removed because a technical javadoc issue (that I can't see), or because the statement itself is incorrect?. Shouldn't be necessary, as this page takes no user input whatsoever?. twitch. You're not creating the new index in any of the upgrade scripts, but you did add them to the initial installation scripts - is that intended?. Is that thread safe, in any SQL server?. If anything, this exception should be logged.. Perhaps return an empty collection instead?. In that case, perhaps throw an UnsupportedOperationException?. The code appears to lock, always, based on the cache-key that is accessed. The same lock is used when data is added for a particular username in getSharedGroups(), so in that sense it is \"correct\" to do that here too.\n\nI do share @dwd's concern of using an interned string - more so when the interned string is a very generic one, such as a username. If any other code (unrelated to this functionality), applies the same technique of locking on a username, we're in trouble. A quick and dirty improvement would be to apply some kind of namespace. Instead of locking on \"username\", we could lock on \"classname+username\" - or something similar.. let's replace synchronized (username.intern()) with synchronized ( (getClass().getSimpleName() + username).intern()) throughout this class.. I'm not sure if this is correct. Message stanzas that have a carbon should always be from the intended recipients bare JID, and to a full JID of the intended recipient, correct? (Maybe checking that is enough for spoof prevention?) There are two types of carbons: 'received' carbons, and 'sent' carbons. The 'from' of the forwarded message in a 'received' carbon can be another entity address (\"one of your full jids received a message from another user, all of your other full jids receive a carbon).. Why not 'continue' here? Perhaps some debug logging - but otherwise, looks good to me.. I think it is enough, there? regardless, style, indeed.. Could this go in a Module, instead of straight into XmppServer? It'd be good to separate concerns, where possible.. This would also unload third party / plugin implementations, I think. Is that intended?. No hard-coded defaults? Without properties, this results in null values. Do null imply some kind of default?. When debug logging, it is often useful to provide the context of the log: in this instance, the argument passed in the argument.. This is an odd wrapper class. Shouldn't the class state be more standard Java types (String, int, boolean)? Perhaps also add hashCode and equals implementations?. Underscore characters in variable names? How very not Java of you!. Also log a reference to the item that's dropped.. Is this just a whitespace change?. Ah, good catch.. Even though it is probably alright, the implementation of hashCode and equals aught to be consistent. By far the easiest way to guarantee this is to let your IDE generate these methods for you. In Intellij: ALT-INSERT (select \"generate equals() and hashCode()\"). Generated code also lets you stop worry about null references and the like.\nThis is of particular importance here, as you're storing instances of DomainPair in a HashSet (in LocalOutgoingServerSession). Is there any point - or is it even safe - to let #getAuthenticatedDomains() exist? Isn't usage of that method inherently unsafe, in context of the issue that we're trying to fix? If so, #addAuthenticatedDomain can probably also go.. Tsk. All other definitions in this interface definition got nice documentation. :). larger than -1, technically - but people starting a username with '@' have other issues :). I think I was the one not being awake. My intend was to default to a scenario where anonymous users cannot initiate s2s. I'll negate the condition in that if-statement.... ressource <--> resource?. Oh, let's not go down the road of maintaining more certs, keeping it in sync with whatever we use on the website.\nWhat exactly are we trying to achieve here? Is doing HTTPS with certificate-checks disabled acceptable?. ooh! aah!. Openfire accepts not only .jar, but also .war files.\nThe FileItem instance is a representation of data in a HTTP request, right? I'm not sure if checking the content type will bring any benefit. A malicious user can easily forge that.. Ah, perhaps not so much with the CSRF checks that we now have. Does this make it fully safe? If not, I'm worried that this might introduce more issues than solve any.. Does this pick up .jar as well as .war in the relevant browsers? I'm worried that we're excluding the latter.. I'm wondering if using a hash of the roster would be a suitable, less complex, less error prone alternative to maintaining manual bookkeeping of roster versions. By re-calculating a hash (implementing hashCode and equals for the Roster class, perhaps), the 'version' of the roster becomes a natural property of the roster. The chances of hash collisions are surely negligible, while the overhead of (re)calculation can probably be solved by a lazy-loaded field.. Why not have a default value of true? It'll only be used by clients that understand the protocol anyways, right?. Please don't catch exceptions without doing anything with them. Even if these exceptions cannot happen, chances are that some future code change might (by accident) cause them to trigger. At the very least log an exception, but if the exception really is \"impossible\", apply the fail-fast strategy: rethrow it, or wrap it in a runtime exception that's thrown.. Please don't catch exceptions without doing anything with them. Even if these exceptions cannot happen, chances are that some future code change might (by accident) cause them to trigger. At the very least log an exception, but if the exception really is \"impossible\", apply the fail-fast strategy: rethrow it, or wrap it in a runtime exception that's thrown.. Please don't catch exceptions without doing anything with them. Even if these exceptions cannot happen, chances are that some future code change might (by accident) cause them to trigger. At the very least log an exception, but if the exception really is \"impossible\", apply the fail-fast strategy: rethrow it, or wrap it in a runtime exception that's thrown.. Please don't catch exceptions without doing anything with them. Even if these exceptions cannot happen, chances are that some future code change might (by accident) cause them to trigger. At the very least log an exception, but if the exception really is \"impossible\", apply the fail-fast strategy: rethrow it, or wrap it in a runtime exception that's thrown.. As Dave (an author of the original specification) mentions: \n\nXEP-0237 details exactly that as a sane implementation strategy: https://xmpp.org/extensions/xep-0237.html#impl-exactmatch. Something is off with the indentation in this file. Could you make it consistent please?. At least you consistently mistype 'delete' :). Should we even try to normalize XML that passes through?. (aren't you supposed to send jabber:server over s2s? You ment jabber:client, right?)\n\nI'm not sure what you mean here. Yes, we might want to check, inbound, that the namespace matches the connection type (although I think that RFC6120 doesn't require that and even allows for other namespaces to be used - which would all be terribly confusing). On the outbound stream, we define the default namespace in our code. As all stanzas are stripped of their default namespace on the stanza level (not in their child elements), things should be OK?. How will this behave in clusters that are being upgraded? Would it be safer to not re-number the indexes?. Install Editor Config and don't have weird indentation like this any more! :). This return statement indicates that the IQ stanza was handled, which, now that things are asynchronous, is no longer the case. I'm not sure how this will hold up in a larger chain of handlers. Even when there are no issues here, I'm not comfortable by setting a precedent here. Perhaps we could make things more explicit, and return a Future-like promise instead?. The last character is missing. Should be: (\u041f\u0440\u043e\u0447\u0438\u0435 \u0438\u043c\u0435\u043d\u0430). Mu\\<tab> & commit, obviously.. Plugin XML says 3/15, not 3/3.. Please note that I already had approved the PR before spotting it myself. :). This comment is no longer valid now, is it?. Probably should change the date here.. I must admit I did not test this. I am under the impression that, although the class is not exposed by the module, it's still available. Assuming that the instantiation (and usage) occurs within the same module, I don't expect problems.. I'm sure that @speedy01, the current holder of that brand, would welcome your attempt. :). Without looking into it further, I wonder if we might be lucking out on this. It's true that the com.sun.jndi.ldap.LdapCtxFactory implementation is proprietary, but from Oracle's perspective, isn't that more or less 'solved' by wrapping that in a module and not expose it? The fact that the rest of the module is still being available suggests that support might be continued (even if something that's now internal to the module might be deprecated over time).. Definitely. We got a an issue in jira to change all that. Until then, I thought to keep things consistent.. Oh, I'm not against migrating at all. Go for it, by all means. I just ment to say that there's a chance that we won't be forced to migrated. This, sadly, won't work on a server with lots of users. Getting them all from database (and keeping them in memory) is simply to much of a resource hog. Ignite Realtime (250,000 users, last I checked) has been running with 100% CPU since it started, 40 minutes ago. I believe this to be the culprit.. It's probably unwise to remove items from the collection while iterating over it.. That's what I thought - but it caused a big red line around the plugin in the admin console page.. This doesn't appear to be a one-on-one conversion from Predicate to Lambda. Is that intentional?. will this work if username is null (this JSP is re-used for non PEP, generic Pubsub, where no username is in play)?. Good catch. Should now be fixed.. Now, if a PEP service isn't found for the JID, the corresponding database lookup will be done over and over again. I'm concerned that this might introduce a lot of overhead.. Is this correct if the user is querying a MUC?. Instead of 'one time user', I'd use \"Recovery via One Time Auth Token\". I like the cleanliness of this solution. Can we do this without moving the actual build (mvn verify -P ci) into the runIntegrationTests script?. mvn verify is shorthand for \"run all Maven phases up to and including 'verify'.\" This is the command that does the build (I don't believe we actually have anything bound to the 'verify' phase currently, so we might as well have used mvn package). In any case, this command is responsible to do the actual building of the project. Your comment suggests that you think that by that stage, the project is already built - that's not the case.\nWe could experiment with duplicating the command, which generally should result in no-ops (as you describe) - but as the build process is quite elaborated, some plugins might not play nice here. I'm unsure if it's worth trying.. ",
    "linuschien": "\nSorry about auto-format. After I fixed, it could diff more clearly.\nSorry, I don't think hard code STUN server address and port would be a good idea. Giving a default value and open configuration would be mush better.\n. \n",
    "aultuser": "@akrherz Thanks for the information.  Would you like this PR closed, and a new PR opened from a branch?\n. ",
    "Sentient07": "hi, @Flowdalic sorry about that. I've now changed the commit to contain only semantic changes. \n. ",
    "nobelium": "Hi, I have updated the PR. Please take a look.\n. I have updated the PR with new method for creating nodes. Please take a look.\n. Thanks for reviewing. Working on it!!\n. I have updated the PR. Please take a look!!\n. Closing this request as discussed on the thread.\n. ",
    "GeoffMaciolek": "There are a number of workarounds people have posted regarding this until there's a newly packaged version, but they're all really messy.  Here's my suggestion, which actually edits the .deb file to fix the dependency:\n```\ndownload openfire_3.10.0_all.deb, ie\nwget --content-disposition http://www.igniterealtime.org/downloadServlet?filename=openfire/openfire_3.10.0_all.deb\nmkdir tmp\ndpkg-deb -R openfire_3.10.0_all.deb tmp\nsed -i \"s/openjdk-7-jre/openjdk-7-jre-headless/\" tmp/DEBIAN/control\ndpkg-deb -b tmp openfire_3.10.0_all-fixed.deb\nsudo dpkg -i openfire_3.10.0_all-fixed.deb\n```\n. ",
    "godly": "Is this the right fix? If I got it right some Psi clients have problems to connect while the server connections are fine. So this fix wouldn't help as \"clientmode\" still does not support SSLv2.\nI'd prefer system properties to modify the supported protocols if needed and keep the current default as is (\"TLSv1\", \"TLSv1.1\", \"TLSv1.2\") as it makes no sense to re-enable support for Poodle. Anyhow if one wants to support old clients setting a system property is usually fine.\nSorry for the late update and reopening the issue.\n. From my point of view the development of the JDBCAuthProvider goes into the wrong direction. We have hash function in StringUtils & ScramUtils and now we add other salted hash functions (started with bcrypt) to this class. Currently this is the most easy option to extend the functionality of the JDBCAuthProvider.\nI would prefer a separate class for hash functions and one for formatting and encoding of the hash and the salt. Hash functions should be added to Openfire core while the formatting and encoding should be plugable similar to the AuthProvider. Any thoughts on this?\nPS: https://github.com/defuse/password-hashing has some secure methods we may want to add to Openfire.\n. I'm sorry for commenting late but the name \"adminConsole.interface\" is misleading. It should be renamed to \"adminConsole.address\" as the code does not use \"NetworkInterface.getByName(adminConsole.interface).getInetAddresses();\" but \"InetAddress.getByName(adminConsole.interface)\".\nSpecifying the IP address to use is fine. But with this property name one will assume that 'adminConsole.interface=eth2' works which is not the case.\n. I agree @ network.interface=\"An ip address to bind to. Generally only useful on multi-homed systems.\" (according to https://community.igniterealtime.org/docs/DOC-1061 )\nIt was/is already confusing and will not become better with this change. I prefer self-explaining property names. For most users/admins an interface is not an IP address and vice versa.\nHere we have the chance to use better names before releasing the next version.\nMigrating from 'network.interface' to 'network.address' may be a small challenge if this property is stored in the database.\n. Here I'd make sure that \"adminConsole.address\" is used so we can finish this one.\nModifying \"network.address\" may have an impact. Personally I'd schedule this change for 5.0 (or 4.1) to keep the minor updates easy.\n. ",
    "alexproca": "Hello,\nI know there is another api for all services but right now I need only acces to users. Maybe I\u2019il look into REST API plugin to enable json too with another PR.\nBest regards,\nAlex Proca \n\nOn 30 Apr 2015, at 19:34, Roman S. notifications@github.com wrote:\nHi, thy for your contribution. Your PR looks good and I will merge it, but I would recommend you to take the REST API plugin, which contains all the userservice features. The only thing you need to change is the path of the URL (from userservice to restapi). The REST API plugin contains already the support of JSON (consuming and response).\nREST API documentation: https://www.igniterealtime.org/projects/openfire/plugins/restapi/readme.html https://www.igniterealtime.org/projects/openfire/plugins/restapi/readme.html\n\u2014\nReply to this email directly or view it on GitHub https://github.com/igniterealtime/Openfire/pull/211#issuecomment-97871063.\n. I did not look into it at all. Thanks for pointing that.\nOn 30 Apr 2015, at 19:39, Roman S. notifications@github.com wrote:\nREST API support already fully JSON.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/igniterealtime/Openfire/pull/211#issuecomment-97873043.\n. \n",
    "JonnyHeavey": "They were accidentally included, I have now reverted (removed) the changes from the PR\n. ",
    "mrunalpittalia": "Hi,\nI am using Openfire 3.10.2 latest release (using MySQL database type) with installed \"Monitoring Service v 1.4.6 plugin\" having support for MAM.\nHowever, openfire sends \"feature-not-implemented\" in response of getting mam pref call.\n- Here below is stanza used to get he mam pref. from openfire server:\n  <body rid=\"550948740\" xmlns=\"http://jabber.org/protocol/httpbind\" sid=\"9c644adb\">  \n   <iq id=\"1:sendIQ\" type=\"get\" xmlns=\"jabber:client\">  \n        <prefs xmlns=\"urn:xmpp:mam:0\"></prefs>  \n   </iq>  \n  </body>\n- and this is what i got in response from openfire:\n  <body xmlns=\"http://jabber.org/protocol/httpbind\" ack=\"550948740\">  \n   <iq id=\"1:sendIQ\" xmlns=\"jabber:client\" type=\"error\" to=\"796@192.168.5.43/null\">  \n        <error code=\"501\" type=\"cancel\">  \n             <feature-not-implemented xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"></feature-not-implemented>  \n        </error>  \n   </iq>  \n  </body>\nI have created discussion of this but its not getting approved: https://community.igniterealtime.org/thread/57111\n. ",
    "randylayman": "Can you provide some guidance on where I'd need to make changes?\n. I'm not sure how to test the installer changes but made the changes that I believe are necessary.\n. Any change in the modules file will affect the inner workings of Openfire and will possibly (probably?) lead to things not working as expected.  To me, changing a module is something that should be done with care and very intentional forethought.  Putting it in the openfire.xml file seems to make it too easy for installations to make changes without understanding the ramifications.\nWith that said, if you think its better in the openfire.xml file I will gladly move it.\n. @dwd Is there anything else I need to do to have this PR reviewed and given a thumbs up/thumbs down/needs changes decision?\n. Not a rush, just wanted to make sure I hadn't missed a step in a process that was keeping this from being seen.\n. ",
    "ghost": "Thanks for reviewing. Since you're short on time, let me know what I can do to help. I can add another property for server mappings, is there anything I can do to help the testing process?\n. Thanks for the feedback. I knew about the difference in functionality but didn't know the original behavior was from RFC 6125. I'll make a change that addresses this.\n. @guusdk For the purpose of closing OF-1100, this looks good to me.\nThough, I know there are other OtherNames used as identities (e.g. UserPrincipalName for client certificate authentication) and the code now doesn't look like it would easily support arbitrary OtherNames. That might not be an issue since users can register their own identity mappings but it might be nice to have.\n. ",
    "AndiHeusser": "Yes, ah I see. I thought that because my branch is named of889, that'd be good enough but it should be in the commit comment too. Let me see if I can amend the commit comment.\n. Ah, didn't do as nicely as I wanted. I'll recreate the branch and submit a new PR with a cleaner commit history. Sorry.\n. ",
    "speedy01": "I'm unsure how to do this, and I'm afraid I might mess things up even more.\n. ok. I think I figured it out!\n. this is only being called by LdapManager.java \nhttps://github.com/speedy01/Openfire/commit/3fd44c51d6328f649e4fa9b1ec6801c50f5c2cfa\nThis doesn't affect xmpp.  It returns the behavior that was used prior to PR #239, without using SimpleSSLSocketFactory (custom ssl factory). Since a custom ssl factory is not being used, connection pooling with ssl still works.   Ive also added a system properties which lets the user disable this, allowing for only valid ssl certs when connecting to ldap.\n. submitted pr 364 to replace this one. \n. It looks like it adds the option to the advance menu in the setup wizard.  PR is 3,241 additions and 3,215 deletions? might want to resubmit  openfire_i18n_en.properties to check the changes.\n. oops..mistake\n. yep..still around..just busy with new gig! :). I thought about that as well. I could see the benefits of it being configurable, and allowing an admin to guaranty the protocols used.  Would something like that be difficult to implement?. I don't think it would need a UI. It looks like SimpleSSLSocketFactory is also used with the email service. I might have to defer to you since I'm still learning.  Adding a specific ldaps property here probably wouldn't be a good idea!. I have not, but I will shortly. I'm good with it.  The upcoming 4.2 release would probably be the perfect time to do it. I'll run through a fresh install tomorrow and let you know. side note: it looks like my ldap creds are already encrypted... I just tested the currently nightly, and it did not encrypt the ldap admin username or password.  tested against mssql. likely unrelated, but the database username is no longer hidden/encrypted either.. I'm installing from the nightly build and against a fresh DB.  I'll try again! . @GregDThomas sorry to report that it did not encrypt again on a ms sql db.  I haven't tested against anything else though.... that might be my problem.  it looks like I have grabbed an old version without realizing it.  I'll grab from bamboo shortly and try again!. sorry @GregDThomas !. @GregDThomas Id very much welcome any attempt to make the ldap stuff better! I've held the brand long enough, its time to pass the torch! :). I vote for the migration.  Although things are working as is, it seems that things are a bit messy, and could  be improved on. 2 birds, 1 stone....of course all of this is coming from a non developer that has no idea how much work would be involved!  . ",
    "ishmakov": "It's need to review by author or somebody, that it does not break other feature in Monitoring plugin.\nAt my first rewiew all are ok, but to be shure, better check it.\n. @leonroy Unfortunately I do not have a client, I write an extension of gloox library.\nBut I spend testing via QIP client (http://snag.gy/RfRqL.jpg) allows you to connect via the XMPP protocol and having a console (http://snag.gy/TLEIG.jpg), where you can send your XML request and read the response.\n. 1. Fix twice sending of messages (invite/decline) on route.really-all-resources=true\n2. Extend MUCEventDelegate by sendingInvitationRejection method similarly as sendingInvitation\n. 1. I agree. I don't understand how last changes has been added to this one comit that has been made early. I try to make separate commit, but this two files added in to last one. I'm new in github.\n   If you help me how to split it to separate commit, it's can be wonderfull. \n2. Own Implimentation create developer that impliment MUCEventDelegate for thrid-party providers and etc.\nI have add handler to reject, because i need notify thrid-party system when user decline invitation, i already notify it in invite.\n. ",
    "leonroy": "I'll take a look.\n. The SQL fu is strong with this one...that's one heckuva select and nice usage of GROUP BY. I don't think anyone's ever used GROUP BY in a single SELECT in the Openfire code base.\nGoing to fire up my test data and see if all the other monitoring queries still work ok fine,\nthanks!\n. Just looking at writing some integration tests to make verification of the monitoring plugin MUCH easier.\nDo you know if there's a decent XMPP client which supports XEP-0136?\n. Appreciate it if someone could peer review this before I merge it, thanks!\n. ",
    "yigubigu": "HI, I download package night build of openfire_2015-12-06, and verify whether message will be lost during receiver offline short period of time, the message will be lost, same as before. \nAlso I do some code comparison, seems SessionManager is not merged correctly. In the pull request, there are following code sniff, but they are not in current trunk, \n// Re-deliver unacknowledged stanzas from broken stream (XEP-0198)\n-                    if(session.getStreamManager().isEnabled()) {\n-                            session.getStreamManager().setEnabled(false); // Avoid concurrent usage.\n-                       Deque unacknowledgedStanzas = session.getStreamManager().getUnacknowledgedServerStanzas();\n-                       if(!unacknowledgedStanzas.isEmpty()) {\n-                           for(StreamManager.UnackedPacket unacked : unacknowledgedStanzas) {\n-                               if (unacked.packet instanceof Message) {\n-                                   Message m = (Message)unacked.packet;\n-                                   Element delayInformation = m.addChildElement(\"delay\", \"urn:xmpp:delay\");\n-                                   Element delayInformationOld = m.addChildElement(\"x\", \"jabber:x:delay\");\n-                                        delayInformation.addAttribute(\"stamp\", XMPPDateTimeFormat.format(unacked.timestamp));\n-                                        delayInformationOld.addAttribute(\"stamp\", XMPPDateTimeFormat.formatOld(unacked.timestamp));\n-                                        delayInformation.addAttribute(\"from\", serverAddress.toBareJID());\n-                                        delayInformationOld.addAttribute(\"from\", serverAddress.toBareJID());\n-                               }\n-                                   router.route(unacked.packet);\n-                           }\n-                       }\n-                    }\n               }\n. oh, sorry, I read the code from compiled, so didn't find this. After I review from eclipse, I found it. \nStill there are 1 or 2 messages lost during receiver is offline, but someone is sending message to him/her at same time. The offline message store has 4 records (first one is active, second one is in-active, third one is active, fourth one is inactive) for the missed messages. \nFor normal offline message, there are 5 records, which has composite message and request body message. \n. thanks, I will take a try and update you again. \n. the test is failed. System has detected that client is offline, but sessionManager/StreamManager could not add the missed message back to offline message store.\n. ",
    "PGoski": "I've fixed message id generation in 1f68e1b. Should work correctly now, because ArchivingTask is a singleton and run() method is synchronized -> can be executed once a time\n. ",
    "wrooot": "I believe you don't have to add new i18n strings to every file (in English). If there is no such string in the corresponding language i18n file, it will use the English one for those strings automatically. At least Spark works that way.\n. I have tested only the resulting jar provided by the patch author. Looks very simple.\n. Filed as https://igniterealtime.org/issues/browse/OF-1041\n. I think this change is causing troubles with offline messages in Spark (maybe other clients (not in Pidgin, Exodus)). Any ideas? https://community.igniterealtime.org/message/254361\n. I don't think many are using this plugin. If it's internal company's server, there are probably other ways to find out the email. If it's a public one, then in my opinion it is a breach on privacy. Property would be nice, but i have no experience with coding that.\nI'm sorry for 3 commits, but it is not like 3 completely different changes squashed together. Also, i'm not in cmd, so unless someone gives a step by step guide how to rebase in Eclipse and not break my setup completely so i wouldn't have to clone it again..\n. Anyone? This is a very simple fix. Essentially fixing my previous PR :)\n. I have synced my fork with the master and it had added another commit to this PR after i have pushed changes back to fork after merging with upstream. Not sure if this is bad or not, but honestly, such a simple PR hanging for 2 weeks? It can be squashed while doing merge.\n. Thanks. Well, will have to clone new fork then.\n. Personally i have RSS disabled on my servers, as i have other means to keep up with the news and releases, but i think this Box is the main way for Openfire admins to find out about releases. Granted, Openfire will notify about a new version anyway, but here you have a quick link to the release blog post. You can also see info about Spark's releases and other news (like moving servers, attending conferences, etc.). I don't think general forum discussions feed will bring much value. One day it maybe flooded with Spark 2.8.0 login issue threads, another day it will be Ofmeet questions or in Portuguese :)\n. So, anything else or anyone else want to discuss this?\n. What do you mean by restoring? To start cross-post in both blog and releases sub forum? Sounds like superfluous to me. I'm ok with just one source for the news. Sure sometimes we post something else in the blog, but often it will show same thing. Or do you suggest posting new versions only in that sub forum? Well, i kind of prefer blog and some folks may also watch it as the main source for the news. Anyway. Some solution should be applied to not show obsolete information in that box. It may be that sub forum if majority prefers it. \n. Ping ;) I wonder if forums post would get picked up by planetjabber (with a tag) the same way as blog post does.. Alexander says this should fix login issue with unicode usernames in Spark 2.8.x (probably some related change in Smack 4). Can this be merged? I don't think it was logged already, so i have filed https://issues.igniterealtime.org/browse/OF-1220 but i'm not sure about the name and the type (bug or not).\n. Well, lucky guess (and some google translate):\nCZ - Povoluje vys\\u00edl\\u00e1n\\u00ed zpr\\u00e1v.\nES - Permitir difundir mensajes.\nFR - Permet d'envoyer un message.\nPT_BR - Permitir transmiss\\u00e3o de mensagens.\nzh_CN - no clue :D\nI think it is safe to fix at least 4. I doubt anyone else will do this anyway.\n. No, you can just add to this PR (same as you did when fixing 1827 and then adding 1822 fixes into same PR).\n. @akrherz ? :)\n. It's a trivial change, but i think we should still bump the version (2.0.1 is fine).\nI wonder why the whole changelog file is replaced in the last commit though. It should be only new lines inserted. Also we usually list a JIRA ticket (as seen for 1.3.1 version in changelog).\n. Do you mean Windows Notepad? For me it opens in HTML Editor, though i think i have added it somehow recently, but before that i was opening it with its built-in Text Editor (with Open with).\n. Well, probably nothing critical for a changelog file which only updates from top to bottom.\n. It's 7 AM here, heading to work actually :) good rest ;) \n. If running as a service it most probably will be SYSTEM on Windows, but will show a user if running via launcher.\n. maybe @speedy01 can take a look (if he is still around). @akrherz can you merge this? Also, should it be 4.0.4 or 4.1.0 for the fix version?. I have already tested these changes with a new compiled clientcontrol.jar and updated Spark version. Everything works fine and this PR can be merged (i have already merged the Spark PR for this). @akrherz . Probably will fix https://issues.igniterealtime.org/browse/OF-1230 as well.. Spark builds fine, so everything is fine (i suppose) :). Maybe the issue originated from the older change in 3.8.0 but it was intensified by some other change in 4.1.0. I think applying this fix and letting affected users try it out is better than nothing. Maybe it will also help with OF-1269. Not sure if this PR is right. Using GitHub via web and that's how it works (puts everything into one PR).. @akrherz @guusdk can somebody of you review and merge this? Spark's part has been already merged to work with this changes.. Yes, this change might affect current users once they update the plugin. If it is possible and easy, we can probably set both these settings to Disabled, if the old one was Disabled. Although, based on a number of threads in the forums complaining about missing menus once they update Spark i see that rarely somebody updates the plugins in Openfire (it is easy not to ever go into Plugins menu and not see any updates). So the effect could be minimal and easy to fix, just disable the setting.\nAlso, the setting was actually called History Settings (history.enabled), but it was disabling the history itself and it was a confusing and not intended behavior. We are actually fixing the behavior here, so maybe it should reset actually? And then admins should choose whether they want to disable just settings or the history completely. Everything is explained in the changelog.. I think that Guus was talking about the scenario where admin has old setting in Disabled mode. Once he updates the plugin, the old setting is gone and the clients will show the history and the history settings again. Unless admin goes to the settings menu and disables one of the two new settings. There can be a few annoyed admins who don't read changelogs and update on the whim. But i'm not sure if we can somehow read what the value was for the old setting and then if it was Disabled put both new settings to Disabled mode.. So, Michael tried to find a way to set new settings with the value of an old setting and he couldn't find one. I say we go with the current version of this patch (maybe adding a warning into changelog, just not in red color, this will look bad :) ). It will affect a small number of installations, i believe. And some admins might be even glad about it as maybe they only wanted to disable the settings and not the history, but didn't had choice. Now, once it stops working, they will find two separate settings, which may be more convenient.. This PR only renames one setting and updates the changelog (actual changes were done on the Spark's side). So i'm going to merge it without waiting for another review.. I guess there is not much difference. But could look weird for someone reading it online before 4.1.5 is released :) although we are probably very close to release. . Wait! I want it back!\nJoking ;). On site it reports 4.0.0 as the Min version.. Have quickly glanced over. This is good to merge.\nAlthough, i would use \u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c for Job Title ;). Should be 2018.. Created https://issues.igniterealtime.org/browse/OF-1468 to track this. . I haven't asked if this is just a conversion or something has changed. Looks like conversion. I have checked how Registration plugin's page looks in Openfire and it shows garbled text when Russian language is in use.\nAt least in the past there was no other way to make it look fine in Spark (and Openfire) other than use \\u for non latin symbols. Not sure if something has changed recently.. For main translation files for Openfire and Spark you have already get rid of  the need to encode them. But plugins have their own i18n files that still have to be encoded. I have created tickets for this.\nhttps://issues.igniterealtime.org/browse/OF-1517\nhttps://issues.igniterealtime.org/browse/SPARK-2054\nSuch change will make this PR unneeded.. OF-1517 is the preferable fix than this PR. Or at least to do something about Monitoring plugin's Russian translations. There are a dozen or so reports in the forums from Russian users. https://issues.igniterealtime.org/browse/OF-1500. Closed in favor of https://github.com/igniterealtime/Openfire/pull/1174. Updated my PR. Btw, don't forget about https://issues.igniterealtime.org/browse/OF-1572 when building this version, so it won't end up broken like 1.3.3 was.. Yeah, this comment was more meant to @akrherz as plugin will be build by Bamboo to put it on the website.. In this case it doesn't matter as only one line has changed in the readme. So everyone having the latest version won't get an update. They will get readme updated once version changes. New installs will have updated readme. And most importantly new readme will be shown on the web. I can bump the version of course. Or maybe we can wait for more changes before releasing this fix.. There is also a mention in the launcher splash screen. https://issues.igniterealtime.org/browse/OF-1523. https://github.com/igniterealtime/openfire-inverse-plugin/issues/1. Don't forget the Jira ticket ;). I'm not a dev, so it was the fastest thing to change :) One can add an option here.. Same as above.. ",
    "AlphaGit": "My pleasure. :)\n. Hi @guusdk! I just understood the problem. Yes, I see the problem introduced: we cannot use the database to read these configuration values until we actually have the database connections setup.\nWould it be acceptable to move these configuration values to JiveGlobals.getXMLProperty? I wonder if there's a place where we can have a configuration that's available without DB or with DB if it happens to be open.\n. That's a very good point. Would it make sense for it to be at the database level?\nxml\n<database>\n  <maxRetries>2</maxRetries>\n  <retryDelay>200</retryDelay>\n  <defaultProvider>\n    <!-- more stuff in here -->  \n  </defaultProvider>\n</database>\nWould you prefer to have another particular section created for it? I'm open to suggestions.\n. I hope it's not too much to ask, but would you mind to test it out for me? I happen to have a messed up environment right now and I won't be able to test in a while.\n. ",
    "sengels": "I don't really know enough about that code, so I would certainly do that... I'll update the PR in a minute...\n. wait, please also see https://github.com/igniterealtime/Openfire/pull/315\nWhy do you add a second non-modifiable group cache?\n. First of all sorry, if my reply sounded a bit harsh; our setup currently uses LDAP to provide user and group information to openfire - this means you won't get any change trigger which could trigger your listeners... So the other solution is using a self-deprecating cache, which basically means you could use the group cache anyway... I especially like the idea about group-aware lists/maps though, so I tried to keep it as simple as possible.\n. works as expected, thanks for your work.\nPlease, if possible, also let this patch go into the 3.10 branch.\n. If you accept this patch, would it be possible to merge this patch into the 3.10 branch too?\n. sounds like a plan, thanks...\n. ",
    "marclaporte": "wow, that was fast!  Thanks!\n. ",
    "lkraav": "It looks like a bad merge result.\n. ",
    "trumpetx": "@tevans @sco0ter - I'm a big fan of cobertura for code coverage in maven.\nexample usage:\nxml\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>cobertura-maven-plugin</artifactId>\n        <version>${cobertura-maven-plugin.version}</version>\n        <configuration>\n          <check>\n            <haltOnFailure>true</haltOnFailure>\n            <branchRate>90</branchRate>\n            <lineRate>90</lineRate>\n            <packageLineRate>90</packageLineRate>\n            <packageBranchRate>90</packageBranchRate>\n            <totalBranchRate>90</totalBranchRate>\n            <totalLineRate>90</totalLineRate>\n          </check>\n        </configuration>\n        <executions>\n          <execution>\n            <goals>\n              <goal>clean</goal>\n              <goal>check</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\nIt integrates well with Jenkins and I'm sure TravisCI digs it too.\n. Is the main issue that you don't want to check in jar files and convert\neverything to maven?  There's sort of a workaround for that:\n\n    Maven way of dealing with checked in lib/ jars\n    Example way of adding a jar to the checked in maven repo:\n    mvn install:install-file -Dfile=fasthash.jar -DgroupId=com.twmacinta\n-DgeneratePom=true -DlocalRepositoryPath=. -DartifactId=fasthash\n-Dpackaging=jar -Dversion=1\n  \n\n\nlib\nlib\n\ntrue\nignore\n\n\nfalse\n\nfile://${project.basedir}/lib\n\n\nThis creates a filesystem repo for stuff that isn't on an accessible remote\nmaven repository (with much irony) in the lib/ folder.  This way you can\nkeep with the old way of things temporarily while migrating to maven.\nSure, it isn't ideal, but if that's what's holding up the migration....\nOn Thu, Apr 21, 2016 at 4:53 AM, Christian Schudt notifications@github.com\nwrote:\n\n@lewie https://github.com/lewie I haven't worked on the migration\nlately. The main showstopper currently are the native installer builds for\nMac, Windows, Linux. These are currently configured for some non-public\nigniterealtime servers. I can't really test it.\nIt also uses install4j, which requires a license. i thought about\nmigrating the Windows installer to Inno Setup, which is free. All in all, a\nlot of work for different platforms, which is not easy to develop/test on\nlocal dev machines.\nOther issues:\n- some plugins don't build, because they use proprietary or\n  non-official artifacts, which aren't on Maven Central.\n- tinder.jar is not on Maven Central either (ignite's Tinder project).\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/347#issuecomment-212837708\n\n\nDavid Greene\ndavid@trumpetx.com\nhttp://trumpetx.com\n(512) 630-2285 - mobile\n. Also, it would seem that open source projects can apply to get install4j\nlicenses free of charge for a link-back:\nhttps://www.ej-technologies.com/buy/install4j/openSource\nOn Thu, Apr 21, 2016 at 7:45 AM, daryl herzmann notifications@github.com\nwrote:\n\n@sco0ter https://github.com/sco0ter I have licenses of install4j to\nshare with ignite developers for the purposes of local dev and testing\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/347#issuecomment-212902260\n\n\nDavid Greene\ndavid@trumpetx.com\nhttp://trumpetx.com\n(512) 630-2285 - mobile\n. One commit has changes, the other is all formatting.  I'll rebase and resubmit per your request.\n. Oh, I though you were referring to the multiple commits.  The informational addition to the build.xml script didn't seem enough to warrant a separate pull request.  I'll just pull it out.  You guys can add in the extra information if you deem necessary.\n. I would like to test one more thing before I resubmit (I just remembered I left work before confirming something).  I'll resubmit in the morning.  Thanks.\n. Resubmitted: https://github.com/igniterealtime/Openfire/pull/382\n. appreciated, thanks.\n. I realize you guys like 1 change per pull request; however, these changes are all related to each other and it would be weird to pull them apart, but I can do it if that's the only way you will accept them.\n. @akrherz - I'm on the road for a few minutes, but when I get into the office I'll make a post on the dev forum detailing this PR per the workflow.\n. Post created:\nhttps://community.igniterealtime.org/thread/57551\nI've also tested this on my dev system against 3.10 codebase (minimal code changes from there to 3.11).\n. @dwd I'd be concerned with the non-offcial release from \"some random guy at github\" (though, very minor concerns).  But then again, why trust me to copy it into the project!  I think it's probably best to trust BC as a provider (since you're already trusting them with all the other crypto stuff) or jBCrypt directly.  What is submitted here is char for char directly from the jbcrypt distribution: http://www.mindrot.org/projects/jBCrypt/.\n. @tevans - I bumped up the BC jars and don't see equivalent methods:gensalt / chekpw in BC's BCrypt implementation.  Are you aware of utility methods that mock the jbcrypt BCrypt API, but use BC instead?  I'd hesitate to write my own since I'm sure someone, somewhere has done this already (and probably better than I would whip up).\n. @tevans Done re: Bouncycastle > jBCrypt\n. @dwd it does.  I was looking into the alternative that you were discussing on the chat thread before removing it.\nIn short, if there's a viable Openfire configurable alternative to my problem, I'll gladly use it, but if not I'd argue that the hash comparison solution is just a configuration to do what is already configurable via the existing implementation.  It's just adding the ability to compare hashes to hashes OR passwords to hashes.\nIf I take more than a day or so I'll pull that specific change and resubmit it if I feel like arguing the point any further.\n. @dwd @tevans - the offending feature has been removed.  This should be ready for a merge.\n. /bump - this is ready.\nI looked at changing the label to bring visibility, but I don't think I have permissions.\n. Explanation of the new acceptPreHashedPassword configuration\n. Explanation of bcrypt configuration\n. Explanation of passwordType configuration (new, allowing comma separated - backwards compatible)\n. I was unable to write as many tests as I would like because I had a difficult time bootstrapping the JiveGlobals stuff.  I also didn't feel like making changes to include PowerMock.\n. @tevans I agree completely.  I didn't know that BC provided a BCrypt implementation.  I'll take a peek and update this PR accordingly.\n. ",
    "lewie": "Hello @guusdk,\nDec 2015, any news about to migrate to Maven?\nThanks\n. @sco0ter, thank you very much.\nOh yes indeed, this are real showstoppers!\nIt would be such an interesting project for many contributors.\nBut Eclipse and Maven or similar are the basic requirement.\nThanks for the clarification.\n. ",
    "netmikey": "May I suggest having a look at Gradle as a build system? \nHaving used all major Java build systems (Ant, Maven and Gradle), I couldn't recommend it more. At our company, we switched all projects to Gradle years ago and would never go back.\n. @nelbrecht I think the article you linked to might be a bit anti-Gradle tainted, isn't it? \nThis is, in fact, the first time I hear someone arguing against Gradle, and frankly, I'm surprised. I think his argumentation is shaky though and he's wrong putting the theoretical halting problem above practical usefulness of the build system itself.\nWell, long story short (let's not start a build system war here): give it a try and compare your required effort-to-success to the other build systems, oh and rather use this as a starting point ;-)\n. Using it for years on enterprise-scale projects, this has never happened to me.\nIn fact, for our own Openfire Plugins, I even wrap the whole OF Ant-Build into a Gradle build without the slightest problem.\n. ",
    "nelbrecht": "If looking at Gradle, please be aware of major differences to maven. A good starting point (and at the end with useful links) is http://wiki.apidesign.org/wiki/Gradle\n. @netmikey Had to give it a try already. And, yes, I sat in front of that thing asking myself \"kill the process or wait even more\". Long and repeatedly. That was the practical side.\nBut then again, I will probably just download a binary, not build it myself. Whoever wants to use gradle can do then. Just shared my experience with words of someone who is usually not wrong and quite eloquent.\n. ",
    "GregDThomas": "\nmy preference would be to break master branch now and guilt any sympathetic devs into whack-a-mole fixing issues that come up.\n\nI totally agree (though as I'm not able to commit or even submit any PRs in the near future, I don't expect my opinion to carry much weight). IMHO the longer you wait, the longer it will take. Bite the bullet!. It strikes me that if developing a plugin that's no part of the Openfire Source then that plugin shouldn't have  org.igniterealtime.openfire:plugin as a parent. I think the Maven way to do it would be to simply have a provided dependency on org.igniterealtime.openfire:xmppserver:4.2.0-SNAPSHOT\nIt probably does mean a but of cut'n'paste between the plugins/pom.xml and the /pom.xml with regards to compiling the JSPs and assembling the WAR file. One way around that would be to have a custom Openfire Maven plugin that does all the common work, but that's probably overkill. Perhaps there is a better way.. In fact, now I've slept on it, I can't help but think that the Openfire bundled plugins should also be moved to a separate source tree. That means that compiling Openfire means that each and every plugin does not have to be compiled, instead the packaging process simply bundles the previously required plugin, fetched as a dependency.\nA plugin only needs to be be compiled/released when that plugin changes, not every time the core XMPP server changes.\nThat said, I recognised that it's difficult to do whilst maintaining the dual Ant/Maven process. . It should be sufficient to drop your .jar file in to openfire/lib - just make sure your classname is sufficiently unique. Then just ensure it's used by by setting provider.auth.className to your class.. > Does 'addFirst' work when the stream is encrypted (both StartTLS on port 5222 as well as traditional TLS on port 5223)? Logging encrypted data isn't going to be very useful.\nSorry, I'm not too sure. However, previously it was \"addBefore(\"xmpp\" ...\"\nwhich was OK for received data, but sent data received an empty buffer. I\ncan only assume that a previous interceptor was doing that (not sure which\none), so the XML debugger had to get in there first.\n\nWhy wait for the plugins to be loaded upon start?\n\nconnManager.getSocketAcceptor() returns null if the plugin manager hasn't\nfinished loading (in ConnectionManagerImpl the method startListeners()\nwon't run until the plugin manager completes).\nGreg\nOn 20 June 2016 at 14:28, Guus der Kinderen notifications@github.com\nwrote:\n\nThanks for this! It would be good to have that plugin fixed. Two questions:\n1. Does 'addFirst' work when the stream is encrypted (both StartTLS on\n   port 5222 as well as traditional TLS on port 5223)? Logging encrypted data\n   isn't going to be very useful.\n2. Why wait for the plugins to be loaded upon start? Plugins can be\n   removed, added, or reloaded at any time after the initial boot anyway. Do\n   we need to wait for something, or is that an optimization of sorts\n   only?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/603#issuecomment-227141771,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAamZcAnnN-ADWSdS1W7s4HL-xlIjnurks5qNpWGgaJpZM4I5r-t\n.\n. > Does 'addFirst' work when the stream is encrypted\n\nI checked; no, we get encrypted data being logged. And probably the compressed data if enabled, too.\n. NB. a previous version running against OF 3.6.4, probably 1.1.0 or 1.2.0, also logged the compressed data so I suspect functionality hasn't changed in this regard.\n. > By-the-by: You're still at 3.6.4? Wowza\nWell, if it ain't broke ... :)\n. Apologies, that was my fault, I somehow managed to delete the branch when I created one for OF-1156. Unfortunately, the \"Reopen\" button is disabled for me :(\n. (Of course, I can't re-open the pull-request as the branch is deleted; I've created a new one at https://github.com/igniterealtime/Openfire/pull/610 - and linked back to this one)\n. Sounds to me like this re-enforces the case for consistency. If an attempt is made to store null LockOutFlags in a clustered setup the this will fail, and should be fixed. It's just being spotted quicker now, as the same result happens in a non-clustered environment.\nAnd a further scenario that just occurred to me; what happens if a null value is stored before clustering has started; when clustering kicks in and there's an attempt to convert to the DefaultCache to a clustered Cache. This will fail. Does it prevent clustering from starting? Is whatever the null value supported to represent simply thrown away?\n. > You get a null LockOutFlags object stored with pretty well every authentication\nReally? There may be an attempt to store them, but in a HZ cluster it will fail with a NPE. This is documented behaviour; http://docs.hazelcast.org/docs/latest/javadoc/com/hazelcast/core/IMap.html \n\nThis class does not allow null to be used as a key or value.\n\nI'd say that the patch has had the desired effect by highlighting where a Cache is used inappropriately.\n. HI wonder if this problem (in a non-clustered environment) is the same problem as that seen by https://community.igniterealtime.org/message/259162 - i.e. a null entry in a DefaultCache is preventing if from being updated to a ClusteredCache. How do you reproduce the problem you're seeing? I'll see if I can fix the one you're seeing.\n. Just clearing up my backlog; now that Openfire is no longer attempting to store null in the Cache, can this be re-applied, or is the opinion now that it should be restricted to just a log message? My fear with that it won't ever be noticed until too late - at least with a NPE issues such as that in #631 are picked up pretty quickly.\n. NB. A second pull request as the original at https://github.com/igniterealtime/Openfire/pull/603 was deleted due to a PICNIC problem. \n. I suspect that this may be the cause of the problem highlighted at https://community.igniterealtime.org/message/259162\nI've not yet had time to prove it, but my theory is that the following sequence of events occur\n1. The node restarts\n2. User refreshes their browser; the cookie offered by the browser is no longer valid, so this is essentially a failed login attempt.\n3. A null LockOutFlag is stored in the DefaultCache, user is redirected to the login screen\n4. Clustering starts, and attempts to migrate the DefaultCache -> ClusteredCache\n5. Because DefaultCache contains null, it can't be converted to a ClusteredCache, so is left as a DefaultCache\n6. There's a class cast exception where the code retrieves a Cache that is expected to be a ClusteredCache, but is in fact a DefaultCache\n. Have done - sorry for the delay. If I get time, I'll also look to see if it's possible to honour the programmatical setMaxCacheSize() / setMaxLifetime() which currently do nothing more then set a JiveProps. \n. Is there any chance of getting this PR in the next release? Is there anything else that needs to be done to get it merged? TIA . I recently updated all the Apache-commons libraries, so it probably needs updating to org.apache.commons.lang3. It looks to me that TikiTokenSaslServerFactory is based on SaslServerFactoryImpl - which is fine, except that I think it introduces additional unnecessary complications, as the latter supports multiple SaslServer's, the former only one. Could/should createSaslServer() and getMechanismNames() be simplified to the following, which IMHO simpler to work out what's happening ...\n```\n    public SaslServer createSaslServer(final String mechanism, final String protocol, final String serverName, final Map props, final CallbackHandler cbh) throws SaslException {\n        final boolean plainTextDisallowed = props.containsKey( Sasl.POLICY_NOPLAINTEXT ) && Boolean.parseBoolean( (String) props.get( Sasl.POLICY_NOPLAINTEXT ) );\n        if( !plainTextDisallowed && TikiTokenSaslServer.MECHANISM_NAME.equals(mechanism) ) {\n            return new TikiTokenSaslServer();\n        } else {\n            Log.info(\"Unable to instantiate {} Sasl Server; plainTextDisallowed={}\", mechanism, plainTextDisallowed);\n            return null;\n        }\n    }\npublic String[] getMechanismNames(final Map<String, ?> props) {\n    return new String[] { TikiTokenSaslServer.MECHANISM_NAME };\n}\n\n```. You define both jetty.version and slf4j.version in the plugins pom.xml; given you've got xmppserver as a provided dependency, won't the plugins inherit the appropriate versions of these from the xmppserver ?\ni.e. what I'm saying is - can/should these definitions be removed?. I'm worried that each plugin must define both the version of Openfire (4.2.0-SNAPSHOT) and the version of Jetty (9.2.14.v20151106) - and these must match (or there is a risk of undefined and obscure bugs). \nIt it worth having a incredibly simply parent pom that /only/ defines the versions of all these dependencies. Anything Openfire related could use this as a parent POM, and for any given version of Openfire you can be sure of getting the correct versions. i.e. reference\n...\n<parent>\n    <artifactId>properties</artifactId>\n    <groupId>org.igniterealtime.openfire</groupId>\n    <version>4.2.0-SNAPSHOT</version>\n</parent>\n\n...\nwhilst the properties artifact contains just ...\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <openfire.version>4.2.0-SNAPSHOT</openfire.version>\n    <jetty.version>9.2.14.v20151106</jetty.version>\n    <slf4j.version>....</slf4j.version>\n    .... etc ..,\n</properties>\n\nThat way you can simply reference the Openfire properties for version x, and be confident all the correct versions are used. . (actually, having written that I realise the canonical way to do this is of course with a Maven BOM - e.g. http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#overview-maven-bom. The package thing makes sense to me; at the simplest level as each JSP page (e.g. settings.jsp) is compiled to a unique class (org.jivesoftware.openfire.plugin.my-plugin-name.settings_jsp.java) it means it's easy to identify the file at fault in a stack trace - better than leaving it to the default.. Is it necessary to explicitly exclude them now? As xmppserver is a provided dependency I would expect it and it's transitive dependencies to be automaticaly excluded from the bundle. e.g. when developing a traditional web app, tomcat (or jetty) is typically a provided dependency and hence not included in the built WAR file. . Not from behind the corporate firewall where I am :(. Ah yes, Fixing the POM for org.igniterealtime.openfire:xmppserver:jar:4.2.0-SNAPSHOT is probably the first thing; once that's done the transitives should automatically be dealt with, so no need to specify them in the plugins. I /may/ get a chance to look today .... Wrong files added. > Sorry it's taken so long to get to this.\nNo problem; apologies for firing off a whole bunch of PRs over the last few months with little discussion about it - the forums don't always seem like the right place.\n\nMy concern with this would be that there is no obvious way we can test the work, nor easily evaluate it for security. \n\nUnderstood - it does leave a bit of a bad taste in my mouth, too. FWIW, the way we tested it was using a Chrome plugin that allowed you to set an arbitrary header (https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj) and use it to set the header that the SM reverse proxy would otherwise do. \nFor other similar uses, we've managed to implement interfaces (e.g. org.jivesoftware.openfire.auth.AuthProvider) but that doesn't work for the admin UI. As an alternative to this PR, do you think a PR which modifies AuthCheckFilter to call an optional interface, ServletRequestAuthenticator that can authenticate based on an an HTTP request would be more suitable? We can then implement our own ServletRequestAuthenticator that does the SiteMinder authentication without \"polluting\" the core Openfire code.. Is that open_chat@conference.igniterealtime.org ?. Closing this, in preference to https://github.com/igniterealtime/Openfire/pull/879 as it's sufficiently different.. No problem; it wasn't the cleanest of patches - but I'll blame the original code, it can't be my fault ;). Yes, apologies for that. It's a poor excuse, but I use Subversion from day-to-day. and it's fair to say I don't properly grok git as a result.. PS. Meant to say, if it's easier I'll happily try again!. Replace with https://github.com/igniterealtime/Openfire/pull/847 without the superfluous commits.. I don't know if it's worth raising & closing a JIRA for this, so the changelog can be updated?. Closeing/re-opening to ensure the CI job works OK. A good point; I've added the comment as you suggest.. Hmm, the merge seems to have broken the bamboo build (https://bamboo.igniterealtime.org/browse/OPENFIRE-NIGHTLYDEB-JOB1-2406/log) - I don't think it's as a result of these changes  is it just one of those things, or should I be worried?. Actually, I just noticed that all the bamboo builds are failing - so I'll just ignore it!. Why not place the Add in each table? So you'll end up with (excuse the ASCII)\nUser       Action\n------     -------\nalice      [Remove]\nbob        [Remove]\ncharlie    [Remove]\n[        ] [Add]. Looks much better to me.. This is an existing \"feature\", but can't help wonder if lines 445+, currently\nif (JiveGlobals.getProperty(propName) == null) {\n    JiveGlobals.setProperty(propName, JiveGlobals.getXMLProperty(propName));\n}\nshouldn't be\nfinal String xmlPropertyValue = JiveGlobals.getXMLProperty(propName);\nif (!xmlPropertyValue.equals(JiveGlobals.getProperty(propName))) {\n    JiveGlobals.setProperty(propName, xmlPropertyValue);\n}\ni.e. ensure the database property matches the XML property, not just there is a property.\nEDIT: On reflection I'm not sure about that. It's clearly bad for the XML and database to be out of sync, but I'm not 100% sure of which one should be considered the master - is updating the database based on the XML correct, given it's more likely someone has edited the database via the admin UI? Either way it's not an issue with your PR as you haven't changed behaviour in this respect, just something I spotted as a result of it. . Also, line 450;\nJiveGlobals.setProperty(\"sasl.scram-sha-1.iteration-count\", Integer.toString(ScramUtils.DEFAULT_ITERATION_COUNT));\nshould perhaps be \nif(JiveGlobals.getIntProperty(\"sasl.scram-sha-1.iteration-count\", -1) < ScramUtils.DEFAULT_ITERATION_COUNT) {\n    JiveGlobals.setProperty(\"sasl.scram-sha-1.iteration-count\", Integer.toString(ScramUtils.DEFAULT_ITERATION_COUNT));\n}\nOr indeed, just remove it altogether. The only place it is used it defaults to ScramUtils.DEFAULT_ITERATION_COUNT anyway. . A couple of things \na) joda-time has a nice PeriodFormat class which will prettily format a duration (e.g.  21600000 -> \"6 hours\", but it seems overkill to add yet another dependency just for this one page.\nb) I've added an english entry to all the i18n files for the new column header - I'm not sure if that's strictly necessary - does it default to english if a country specific version is not present?. Thanks - I hadn't realised I had JIRA creation rights. Now i do - raised at https://issues.igniterealtime.org/browse/OF-1408. StringUtils.getElapsedTime(long) is certainly a good starting point; I think I might need to create a new version, say StringUtils.getFullElapsedTime(long) , to make it more useful in this case as \"Less than 1 minute\" is perhaps less than ideal.. Here you go - a definite improvement, IMHO.\n\n. Noted; I've added a NumberFormatter to the output; I'm hoping it's correct, it will take a while before it's ticked over!. Certainly OK in the UK; \n\n. Apologies for this, entirely my fault - a problem I introduced with https://github.com/igniterealtime/Openfire/commit/57944fa8af506ad2bcbfdf37ae34227fe787c05e. At a guess, edit the  in xmppserver\\pom.xml - though it's currently set to 4.2.0-SNAPSHOT, so perhaps nothing needs to be done.. (or Java 8 method reference). A general note; I've checked everywhere that UserManager::isRegisteredUser(JID) is called, and I think that the only place that this can cause grief is in the PubSubEngine - other uses appear to be mainly from the UI.. A fair point. I'm too often guilty of trying to the minimum required :( \nAnyway, I've updated the PR. Note; I'd appreciate others trying this out too, as the DB connection is a fairly fundamental part of Openfire!. Closing, replaced with https://github.com/igniterealtime/Openfire/pull/980. On the admin screen:\nThe following information on active/idle connections were removed, as they are not exposed by commons-dbcp:\n\nserver.db.connection_details.id - the connection id\nserver.db.connection_details.when_created - the time the connection was created\nserver.db.connection_details.last_used - the time the connection was last used\nserver.db.connection_details.thread - The name of the thread that last used the connection\n\nThe following were added, as they could potentially be useful:\n- server.db.connection_idle_time - how long before an idle connection is evicted from the pool\n- server.db.connection_max_wait_time - the maximum time a client should wait for a connection before failing\n- server.db.test_timeout - how long to wait before the connection test fails\n- server.db.connection_mean_borrow_time - the average time a client waited for a connection\n- server.db.connection_max_borrow_time - the maximum time a client waited for a connection\nOn the JMXWEB plugin, the following were removed as again they were no longer available;\n\ngetMaximumActiveTime()\ngetOfflineConnectionCount(). To confirm, the distributed artefact is built with Ant, but the CI build is done with both Ant and Maven. And yes, that still trips me up sometimes :(. This works well for me, but I'd be grateful if any other SQL Server users could check it too. This works fine for me. However, other people need to to try it (Note; I've deliberately left it as a SNAPSHOT version as there are other changes I want to make to the clustering plugin before it gets released).. This does mean the same room on different nodes of the cluster will have different modificationDates, which seems wrong. Instead, could you you do something like ...\n\nExternalizableUtil.getInstance().writeLong(out, modificationDate == null ? null : modificationDate.getTime());\nand\nLong modificationDateLong = ExternalizableUtil.getInstance().readLong(in);\nmodificationDate = modificationDateLong == null ? null : new Date(modificationDateLong);. (or even, on reflection, extend ExternalisableUtil to take a java.util.Date and do the right thing in there.. (Yes, this PR still needs to be merged, though I did tweak it to ensure a null modificationDate was preserved). Guus - I think you introduced this with OF-1306 - I'm unable to test this locally, are you able to take a look?. I  worry that the plugins parent version is changed with no other changes. It does mean that there (for example) multiple versions of candy plugin v. 2.2.0 Release 2. One built on Openfire 4.2.2, one built on Openfire 4.2.1 etc..\nI think the parent versions all be frozen, and only changed when necessary, at the same time as the plugin version. \n[Given this is regular practice, probably too late at this point, but going forward ...]. re a) & b), yes, I think that's a good step. I'm still not sure about clustering, though. Doesn't the plugin return archived messages from all users?\nSo if userA is connected to nodeA and sends a message, and userB connects to nodeB and asks for the recent messages, ideally it should wait until nodeA has written userAs message before continuing?\nI should highlight that I'm not familiar with the plugin, so it's quite possible I've missed something .... It looks like what you've got will work - but now you're polling across the network.\nWould it be better to encapsulate the polling inside ConversationManager, with a \npublic void waitUntilLocalNodeHasWrittenAllData(final Date targetEndDate) throws InterruptedException, TimeoutException {\n\n    while ( System.currentTimeMillis() < targetEndDate.getTime() + 2000 ) // TODO Use the value in org.jivesoftware.openfire.archive.ConversationManager.ArchivingRunnable.maxPurgeInterval but also add time to allow for query execution time.\n        if (conversationManager.hasWrittenAllDataBefore(targetEndDate)) {\n            break;\n        }\n        Log.debug(\"Not all data that is being requested has been written to the database yet. Delaying request processing. \");\n        Thread.sleep(100);\n        if (!conversationManager.hasWrittenAllDataBefore(targetEndDate)) {\n            Log.warn(\"Retrieving data from the database to formulate a response to a MAM query, while data is still waiting to be written there. The response might be incomplete.\");\n            throw new TimeoutException();\n        }\n    }\n\n}\n\nMy thinking is that you'll only ever need to call across the network once per node - and that call will block until complete/times out. \n. +1. Looks Ok to me . Although - and I can\u2019t check this right now- would hostname instead of host-name be better (similar for database-name) as it would be easier to select using the mouse. A double click may well select the whole string \u201chostname\u201d which it won\u2019t for host-name. . Have done!. (again, the parents of otherwise unchanged plugins have changed ...). a) To keep things simple, I'd suggest fixing the HZ plugin with this PR. \nb) It is probably possible to keep this in a backward compatible way. So long as the new version of HZ implements the has/setHasRequestedBlocklist(boolean) methods, but does not tag it with @Override, I don't see why the min server version/parent POM of HZ needs to change. \n. I don't see why not. The @Override tag is advisory only. \nOn older versions of OF, the methods will never be used. \nOn newer versions of OF, the methods will happily be called.. If you're running different versions of OF in the cluster with the same version of the HZ plugin, there won't be a problem, as the right methods will be called, as all plugins have the same signature of RemoteClientSession\nIf you're running different versions of the HZ plugin, then a 2.3.1 calling a 2.3.0 will probably fail with some sort of run time introspection exception, but you've got that problem. anyway. . No comment on the XEP work itself (my knowledge of the details of XMPP are scarily limited!) but the HZ plugin changes seem fine; I'm glad you left it as a SNAPSHOT as that allows me to make a couple of other API changes that should be done (i.e. making sure that the Cache only contains serialisable and non-null objects.. Possibly a candidate for the 2.2 branch, too?. +1 on the migration to log4j2.\nHowever, next time it's worth highlighting that log4j-api is just a facade over log4j-core. There's also a log4j-1.2-api facade (and log4j-slf4j-impl and log4j-jcl and log4j-jul) that maps the legacy APIs to the new  log4j core keeping code changes to the minimum.. As a late thought, I'd like to see the log4j2 / slf4j bridge in the dependencies so that any older plugins that haven't yet been rebuilt still have a chance of working on Openfire 4.3\n<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-slf4j-impl</artifactId>\n    <version>{log4j2.version}</version>\n  </dependency>\n</dependencies>. Yup, looks good to me. OK, clearly this needs more work. I'll revisit it today.. That's weird. Just did a clean install against a fresh PostgreSQL database.  Both database.defaultProvider.username and database.defaultProvider.password are encrypted. Was your install against an empty DB? I'm not sure what the behaviour would be for an existing DB.. I also dug out some LDAP settings and configured Openfire against our local LDAP DB. Both ldap.adminDN and ldap.adminPassword are also encrypted - again, a fresh DB, not an update to an existing one. . OK, thanks. I'll have to run up a MySQL DB to see how that changes things.. This will fail if clustering is enabled; a ClusteredCache is backed by an IMap, which does not allow null keys or values. \nA while ago, I did submit a PR that added similar non-null checks to the non-clustered DefaultCache, but it got backed out after it uncovered a case where a null was added. I may look at trying again, now that that (hopefully only) case has been fixed.\nComing back to your immediate problem, I think you'll need to introduce a new object, CachedGroup, which has two fields, boolean isPresent and Group group - the latter only populated if isPresent is set to true.. [Aside; I've just raised https://issues.igniterealtime.org/browse/OF-1589 with the aim of preventing this in the future. I'll try and get a PR in for the 4.3 release]. As it stands, the PR should not be merged (once rebased). It places null values in to a cache, which will fail when clustered. One way to resolve this is to update it to make use of the CacheableOptional class introduced for just this sort of reason.. I was just about to merge this when I realised that plugins could not take advantage of Java 8 - so I updated the parent pom.xml for the plugins, too.  As far as I can tell, there's no way to inherit the same jetty version from the core xmppserver pom.xml, though happy to be corrected. \nAlso, does this mean we should bump the minJavaVersion to 1.8 for all the plugin.xml files, now?. A JSP compiled with a target of 1.8 will not run on Java 7.\nOn reflection, I think the correct route is\na) Remove the <source>/<target> blocks from the parent pom.xml - so by default plugins will compile to Java 7\nb) If a plugin requires Java 8 JSP, then can set the <source> / <target> appropriately along with their minJavaVersion. . Good point, well made. I'll leave it as it is.. Another good point, yes. I'll bump them to SNAPSHOT versions, though - the existing released versions (compiled with Java 7) will continue to work on Openfire 4.3 with Java 8 so there's no need to update them, but next time they are released they will be Java 8 only.. (but the good news is it's not all plugins; only those that depend on Openfire 4.3.0-SNAPSHOT). Right, so anything using Openfire 4.3.0 as a parent was bumped to \"next-minor-version\".SNAPSHOT. Let's hope that's end end of it!. I'll see if I can get it re-based tomorrow. Closed in favour of https://github.com/igniterealtime/Openfire/pull/1133. No sure it's a good reason, but Log4J2 is my default for two reasons;\na) The ability to cut'n'paste Logger LOGGER = LogManager.getLogger(); between classes without having to try and remember to change the class in Logger LOGGER = LoggerFactory.getLogger(TheClassIJustCopiedFrom.class);\nb) I'm a big fan of the log4j2 CloseableTheadContext (https://logging.apache.org/log4j/2.x/manual/thread-context.html#CloseableThreadContext) which I find very useful in multithreaded applications. Our code will generally add the Stanza ID, and possible the requesting user, to a CloseableTheadContext during the start of processing, so making it much easier to work out which log message applies to which processing thread.\nThat said, the change was done subconsciously, I realise that the rest of Openfire uses the SLF4J API, so if general consensus is that we should keep using the  SLF4J API I'm more than happy to update the PR.. OK, so I switched from log4j-api to log4j-slf4j-impl and now I'm getting no logging output :S There's obviously something more needed, somewhere .... (The SLF4J API is still a work in progress, need to ponder why it's not working). OK, got to the bottom of why the SLF4J API doesn't work. Although I've the SLF4J -> Log4J2 bridge in the plugin classpath, the core XMPP server has the  SLF4J -> Log4J v1 bridge in it's classpath which takes preference - so it's trying to log using log4j v.1 - but SLF4J that won't allow the Debugger plugin to have it's own log file AFAICT (without editing the server's log4j.xml file).\nSo as I see it we can't really use the SLF4J API with log4j2 in plugins until OF-1491 is merged. . I gave this some more thought over the weekend and some more testing this morning.\nAs it stands, this PR will allow the plugin to work with Openfire 4.0, 4.2 and the current master (I've not tried 4.1, but I'm guessing it will, too). \nRelying on Openfire 4.3 as a parent, and/or using the SLF4J->Log 4J2 API bridge, restricts that to just Openfire 4.3. \nFor that reason, I'd like to leave it as it is; is that a compelling enough reason for you, @guusdk ?. Sure thing - https://issues.igniterealtime.org/browse/OF-1570 raised.. Cancelled, as we can use a newer MySQL driver with a FLOSS exemption. Note; Ant is required for the JspC compilation that's supported for development JSPs in PluginServlet.jsp. You only /think/ I mean Initialsation Vector. I may have meant random 4. https://xkcd.com/221/\n(I\u2019ll give more serious consideration to your comments tomorrow). > Does this PR introduce the possibility of a race situation, where reading the same property has different results depending on how fast after initial boot-up the property is being read?\nNo - on two counts; \na) properties are only ever read from either the XML (JiveGlobals.getXMLProperty()) or the database (JiveGlobals.getProperty()). During initialisation some classes move properties from XML to the database (e.g. DefaultAdminProvider#convertXMLToProvider()), but that's before the class accesses them from the database.\nb) If an XML property is encrypted, it's always encrypted with the default IV. \n\nAs the IV is stored in the same table as the property value, there are no issues with restoring backups - but have you given that any thought?\n\nYes - the IV for a property is re-generated each time that property is saved. The single row in the database is all that is needed to get the plain text (assuming you've got the key from security.xml, of course).\n\nSomething similar for upgrading from older versions (as opposed to using a fresh install of Openfire) ... have you explicitly considered both scenarios (fresh installs / upgrades)?\n\nYes - before this PR, all AES encrypted values were encrypted using the same IV - AesEncryptor#INIT_PARM which I now refer to as the \"default\" IV. If a property is encrypted with no IV in the ofProperty table, it is decrypted using the default IV - i.e. the one that was originally used.  Next time the property is saved, a new, non-default IV will be generated for it and saved in the DB.. It's only on those properties which are encrypted, so not a huge number of calls. I did debate about re-using an existing SecureRandom, but at the time found https://stackoverflow.com/questions/1461568/is-securerandom-thread-safe/2726868 and decided to leave it as is.. Ah, is that what all those blank lines are for? Yes, it would. Let me know if that's an issue .... OK, done :) . @akrherz - this bumped the Debugger plugin to 1.7.1 - any chance you could update the list of plugins at https://www.igniterealtime.org/projects/openfire/plugins.jsp with it? Thanks\n. Thanks Daryl. The size increase is because of some extra dependencies needed for pre-Openfire 4.3 servers, it will shrink again when https://issues.igniterealtime.org/browse/OF-1570 is implemented.. So it did! I didn't realise the enforcer plugin was automatically triggered, though it makes sense. I'll update the PR to get it compiling again .... The enforcer plugin highlighted many, many plugins with a release version + SNAPSHOT dependency.\nFor all of these plugins, I've updated the version to a SNAPSHOT, and set the release date to \"tbc\"\nFor those plugins where it was possible, I've also rolled back the parent.pom version to 4.2.0 - many had a minServerVersion of 4.0.0 or similar, so it made sense to build using an earlier (non-SNAPSHOT!) version of Openfire.\n. You'll have to make the plugin version SNAPSHOT if you want it to compile with a SNAPSHOT dependency .... Yes ... that probably makes sense!. I did check; they are different. Which didn't concern me in the least, as the pom.xml names seemed more consistent with each other (.e.g Callback on Offline Plugin vs CallbackOnOffline). \nHowever, now you've raised it, I wonder if that's not such a good idea. I think the plugin names are used as keys, in the code, etc., so changing it is probably a big mistake. I suspect I should probably back that last change out.. Done; https://github.com/igniterealtime/Openfire/pull/1120. Done, and you're welcome :). Yes, was surprised it was there myself. I agree with your assessment that it shouldn't be, even though SM is now working again. IMHO it's much better to control the default in a single place.. Some time back I changed the release date to \"tbc\" for plugins with a SNAPSHOT version - to encourage people to update the release date as part of the release process. Part of the work to stop plugins being released with SNAPSHOT dependencies.. Just as a reminder, the parent pom.xml now prevents the building  of non-SNAPSHOT artefacts with SNAPSHOT dependencies, so hopefully things like OF-1572 shouldn't happen again.. Yes, I can see that with a large LDAP count this would have caused a problem. My local AD setup clearly not large enough to exhibit it.\nIt /should/ be possible to fix this by delegating the filtering to the UserProvider itself rather than retrieving all users and then filtering.  \nIt clearly requires more work, anyway. I hope to get a window where I can look at this next week, barring any urgent issues at work.\nI can't explain why you've still got CPU issues, though :(. (I see the Group Chat is not responding; I wonder if it's the LDAP server itself which is causing the problem, and needs a swift kicking?). OK, so most likely not a LDAP issue then. Something else since the last time the server was updated, I guess.. If you don\u2019t bump the version number how do you know which version you have installed?. This is a good point; apologies.. +1 on what you've done so far, IMHO.\nHowever, general comments on the code, not your changes\na) I wonder if we're ensuring synchronisation every where we should be\nb) There are places where we may be fooling ourselves. For example, LockOutManager synchronises on a (possibly clustered) cache. That will only synchronise on the local node - so what's the side effect of this lack of synchronisation? \nc) Are there places we can simply use more modern collections - taking LockOutManager, for example, it may be possible to wrap the Cache with Collections.synchronizedMap() and the .computeIfAbsent(...) method.\nd) I've a dislike of the synchronised(string.intern()) {} pattern in general (*). I wonder if we should look at introducing a new better mechanism - the answer at https://stackoverflow.com/a/28347825/359394 provides a good starting point, though I'd probably want to make changes.\n(*) Much has been written on it, and I think what you've starting doing avoids much of the problems, it just leaves a bit of a nasty taste in the mouth.. Yes, so am I, sorry should have been clearer!. ... but it's not just changing the name, it's moving it's storage from the DB to the XML properties. Yes, hence my comment \"not just changing the name\". xmpp.fqdn would be stored in the XML as\n<xmpp>\n  <fqdn>value</fqdn>\n</xmpp>\nwhich seemed an unnecessary level of indirection - especially as the FQDN isn't really a property of XMPP.. Sure thing, though I probably won't get a chance to look at this until late next week, at the earliest.. Rebased :). Thanks @dwd - it was next on my list to examine once I'd fixed the other PR of mine that broke the build ;). Aside: I'm not actually sure why this needs to be a separate module. Why not just bundle the whole lot in to xmppserver?. > I'm not sure if that's still needed though. \nProbably not given the new structure; I may look at moving webadmintld (and possibly i18n) back in to the xmppserver module when xmppserver is properly structured.. FWIW, my current thinking of an end structure is;\nbuild/ - unchanged - non Maven files for building OS specific packages\ndbutil/ - unchanged (already in correct Maven layout) - if it's still required. Could/should it be merged with xmppserver?\ndistribution/ - move in to here the files from src/ that get packaged up in to the distribution - specifically assembly, bin, con, database, security, resources\ndocumentation/ - unchanged (perhaps move documentation/dist to distribution?)\ni18n/ - unchanged\nstarter/  - unchanged\nxmppserver/ - unchanged\nThat just leaves the following in src:\nsrc/javadoc/jdk18 - not sure what to do with this right now\nsrc/spank - not sure what to do with this right now\nsrc/plugins - move this to the top level. If the parent is Openfire 4.3.0 then the min server version also needs to be bumped to 4.3.0 in the plugin.xml too. . Didn't the monitoring plugin have problems when built against 4.3 and running on 4.2? Ah well, if it's working for you .... A bit late, but just realised that a 4.3.0 parent means a minJavaVersion of 1.8 .... I think so, yes. The 4.3.0 parent sets the  for the maven-compiler-plugin to 1.8.. @akrherz - I've tweaked the instal4j file as part of this commit as a couple of the files have moved about (and to stop shipping .bat files to UNIX and .sh files to Windows) - but I did it largely by eye and can't test it, so you will probably want to check I've not broken things too badly.. Ah, OK the Changelog stuff makes sense. I'd assumed I'd broken something with all the file movements!. Closed in favour of https://github.com/igniterealtime/Openfire/pull/1186. Though worryingly, a quick test with HSQLDB is showing:\n2018.10.23 16:21:17 WARN  [Jetty-QTP-AdminConsole-39]: org.jivesoftware.openfire.roster.DefaultRosterItemProvider - Error trying to insert a new row in ofRoster\njava.sql.SQLSyntaxErrorException: user lacks privilege or object not found: rank in statement [INSERT INTO ofRosterGroups (rosterID, \"rank\", groupName) VALUES (?, ?, ?)]. Aha, I see the problem. As the column name is not escaped in the DDL scripts, it's created as \"RANK\". As it is now escaped in the query, it's looking for \"rank\" - which doesn't exist.. OK, this now works with PostgreSQL, MySQL and HSQLDB. The identifier \"rank\" is only escaped on those DBs that need it - i.e. MySQL. . Rebased. Re-based. OK, this now allows \"empty\" values to be cached - may also be useful for https://github.com/igniterealtime/Openfire/pull/1069. Tested with one plugin with a JSP, so confident that this is good to go given the mess the builds are currently in.. OF-1601 seems to have been caused by what looks like a copy/paste created typo. Fixing the i18n files fixed the page.\n\n\n. @deleolajide; I think this is another of the plugins you use; now it's compiling properly under Maven could you give this one a test, too? I'm not entirely sure what it does!. @deleolajide; I think you said you use this plugin - I've no real idea of what it does, but it at least now appears to install as a plugin properly - can you check it out?. Ah, OK, I've got it, now. You define a mapping in the admin UI, and the plugin responds with that mapping in disco#info responses. \nThanks!. OK, looks good, should solve the problem. I think what threw me originally was that if there was only one entry in the cache, it was (originally) stored as Arrays.asList() (https://github.com/igniterealtime/Openfire/pull/1140/files#diff-42211d9b12f65e2f7e539cc97c0308afL170) which is just odd - seems the Cache was containing both lists and sets.\nEarly next week I plan to re-review the whole of OF-1589 in case I messed up anything else.\nAlso - one question. When a session ends, why isn't it removed from the collection (be it a Set or List) - should it be?. Thanks; I'm all a bit hazy as to what install4j does/needs which is why I tagged you in this PR. eh, OK thanks.\nFWIW, the log4j2.xml file isn't \"new\" - it's been in the distribution a while, it's just that it was ignored in favour of the one inside starter.jar. Cue much head scratching & gnashing of teeth when I was editing the visible file and seeing no changes :S. A bit more background; it seemed that Log4j1 \"found\" the lib/log4j.xml config file by itself. \nLog4J2 will use log4j2.xml on the classpath (i.e. the one in startup.jar) unless pointed to lib/log4j2.xml explicitly. . > all files in there are supposed to be on the classpath\nI don't believe that is true. I think only starter.jar is on the classpath, and that adds all the other JAR files on to the classpath in a well defined order. https://github.com/igniterealtime/Openfire/blob/master/starter/src/main/java/org/jivesoftware/openfire/starter/ServerStarter.java#L87\nopenfire.bat for example doesn't define a classpath and simply specifies startup.jar - https://github.com/igniterealtime/Openfire/blob/master/distribution/src/bin/openfire.bat#L19. (needs shifting to the XML debugger plugin repo). Closed in favour of \nhttps://github.com/igniterealtime/Openfire/pull/1246\nhttps://github.com/igniterealtime/openfire-xmldebugger-plugin/pull/3. Have you tried this with Clustering enabled? I worry that an eviction may cause a concurrent modification exception as the ClusteredCache may have different behaviour.. This was covered by https://github.com/igniterealtime/Openfire/pull/1271. Fixed elsewhere. Updated so that each instance uses the same (identity equals) key.. Note; still requires the artifact to be moved to the right place.. I hear what you're saying; the default phase for packaging javadoc/source files is, well, \"package\" - I pushed it back to verify to cut down the dev/test cycle time. \nDoes the CI build things with a specific profile? Could it do so?. OK, re-worked this. There's now a new \"ci\" profile, which generates sources and javadoc JAR files.  That's called when running on Travis. This still requires the artifact to be moved to the right place.. Well, I changed that line too, I think it's right, but may need to be merged before anything happens?. @guusdk you may find this useful, though it does require https://github.com/igniterealtime/openfire-hazelcast-plugin/pull/2 in order for isSeniorClusterMemberOrNotClustered() to return the correct result if clustering is still starting.. A couple of questions, I would test but I\u2019m offline ATM. \n\nIs an audit entry created when someone logs in using this mechanism? It should. \nIf you create an entry with a token for a user that doesn\u2019t exist, does it work?\nIf it does, do subsequent audit actions get correctly logged? Not sure if that requires a user, or just something that looks like a user id. \n\nOne suggestion; Pre-populate the initial openfire.xml config file with empty values (and a comment as to their purpose), and rather than delete the XML values, set them to empty strings. That way it\u2019s far easier to set this up. . Re auditing, Have a look at the JSP that edits system properties - that creates an audit entry when something is changed using an existing framework. \nRe. not specifying a user, I worry that this will break other things (e.g. who gets audited when a sys prop is modified?), or will a random user be picked instead?. OK, had some more time to look at this - overall, this is really good, thank you. \nTwo small things;\n1. The prompt when logging in seems a little brief (i.e. login.token, set to just \"token\")- how about \"Please supply the time login token\".\n2. The user in a \"regular\" Security Audit Message is different from that from when the OTP is first used;\n\nHow about using something like OTP- for all, so it's clear it's a OTP thing on both login and subsequent actions?\nOne trivial thing, more a style thing, but feel free to ignore; I'd be tempted to make OneTimeAuthToken a static inner class of AuthToken, to better how closely the two are related.\n. NB; I think this code is in good need of tidy up; I took a pragmatic solution to fixing this problem (!). a) I'm not sure we really want Beta dependencies in Openfire et al.\nb) The CVE is actually fixed (by removing a class) in 1.8.0-beta3 - https://jira.qos.ch/browse/SLF4J-430\nc) The CVE doesn't affect Openfire et al. as it makes no use of the removed class. The details of the CVE do not align with the title of the CVE.\nThe facts are:\norg.slf4j.ext.EventData has a security flaw.\nslf4j 1.8.0-beta2 deprecated this class\nslf4j 1.8.0-beta3 will remove this class, when it is released \nIgniteRealtime does not use this class, so it's all pretty irrelevant anyway.. I'd anticipate all properties,, set or otherwise, to appear on the system properties page. This would show the current and default value, the description, and yes and indicator of a restart required sounds like a good idea. Wroot also suggested that an indicator of the plugin that defined the property (if any) could also be displayed. It would necessitate some sort of filtering/paging, I suspect.\nNote that this would have to be a \"merge\" of the properties in the database and those defined with additional meta-data. I don't see all properties being migrated in one big change, and properties may also exist in the DB that are no longer in use (e.g. set by a plugin subsequently deleted).. OK, I've added the plugin identifier (thanks, @wrooot ) and also the ability to detect if a restart is required {thanks @akrherz ). OK, so this latest update adds a (read-only) UI. You can access it via http://localhost:9090/SystemProperties.jsp (slightly different URL, so the existing one can be left in place for now for comparison).\nExample of this is as follows;\n\nIs there general consensus that this a \"Good Thing\" (TM) and worth completing?. The \u2018Default Value\u2019 drop down actually does this; the options are All/Changed/Unchanged/Unknown. Well, my thought process was along the lines of;\nI can see a case (albeit contrived) where I may want to search by current value (e.g. 'which of the hybrid auth providers, primary, secondary or tertiary, is the DefaultAuthProvider). For that reason, I felt a free text box to search on current value for that column would be useful. I couldn't contrive an example where I may want to search by the default value, so use for that column for the 'it's changed from default' filter.\nThat said, I don't feel that strongly either way, so happy to change it if that's the general feeling. Would you propose that the 'default value' column is a free-text search instead?. OK, I think this may be more or less completed. OK, still need to actually define some more SystemProperty fields, but it's now possible to properly edit/encrypt/delete these new style properties in a sane manner.. A SystemProperty is guaranteed to have a unique key (an attempt to create a second property with the same key will cause an exception). The intent being that a property can only have one definition; typically a \u2018public static final\u2019 field member. \nHowever this does not stop code from getting/setting the same value via the existing JiveGlobals class which the SystemProperty essentially is a wrapper for. . No , no Jira currently. It kind of grew out of a thought experiment, I\u2019ll raise a Jira and tidy up a few loose ends probably Friday, now. . Hmm, a good point. Currently none, I\u2019ll think about how to fold them in .... I /think/ (famous last words) this is done now. I need to make some final checks, will squash all those commits down to one, and then see if people are still willing to merge it in ;). There you go @guusdk ; list types can now be defined;\nprivate static final SystemProperty<List<JID>> ADMIN_JIDS = SystemProperty.Builder.ofType(List.class)\n        .setKey(\"admin.authorizedJIDs\")\n        .setDefaultValue(Collections.emptyList())\n        .setDynamic(true)\n        .addListener(jids -> AdminManager.getInstance().refreshAdminAccounts())\n        .buildList(JID.class);. OK, I think this does pretty much all it needs to. Lists, Sets, Enums, Classes, as well as a selection of basic types (String, Integer, Long, Boolean, JID, Duration, Instant). It's fairly easy to expand with new types (Collections and Enums probably being the hardest to implement!), so unless anyone objects in the next few days I plan to merge this in sometime next week.. I've think there's been a bit of confusion here; \nThe current dev guide details the layout of an /installed/ plugin - this hasn't changed much (logo_large.gif isn't used, but other than that, it's correct).\nWhat you've accurately detailed in this PR is the layout of the /source/ files for a plugin, if you want to build a plugin using the Openfire plugin parent pom.\nIt's probably worth describing both, IMHO.\n. Have you seen the section \u2018testing your changes\u2019 at https://github.com/igniterealtime/Openfire/blob/master/README.md ? It shows how to run Ooenfire in this sort of case. . And maybe even enable debug logging too. . I think @akrkerz was suggestion that if the contents of logs/all.log were in the build log, it may help tracking down any problems. I was adding to that that enabling debug level logging may also prove beneficial. . Will try this again when the repositories have had a chance to update. This now uses a git clone followed by a git checkout <hash> to fetch the specific Smack commit.\nAlso, the script now waits for port 7070 to be ready; that's initialised well after port 9090, so should give more time for \"stuff\" to be ready for the tests.. A brief comment on the (sole) failing Integration Test; clearly Smack isn't getting the  tag it's expecting. I'm guessing as nothing else has changed Openfire is still sending it, with the newer version do we need to flush before closing the connection? Or something else?. That's a flickery test; I've just restarted the build so next time should be OK. \nAlso, I'm surprised you're seeing that as I'm sure we did something sane for that a while back. Ah yes - https://github.com/igniterealtime/Openfire/blob/master/xmppserver/src/test/java/org/jivesoftware/util/StringUtilsTest.java#L17\nBut we have seen some issues more recently with i18n, perhaps this is one of them.. Thanks; Java does to shortcuts with && (not with &) so I've re-ordered the check. Perhaps a simple if (username.contains(\"@\")) { makes it explicit?. Isn't the content-type supplied by the browser? Can you be sure that all (reasonable) browsers will set the content-type to exactly application/java-archive and not application/jar or something else?. I like this idea; I think (in the absence of returning a Java 8 Optional<Future>) we'll have to return null (to indicate the packet was not handled) or the Future itself where it is.. PS When I wrote the original changes, I did check if the existing uses were likely to be thrown off by the async processing, and it all seems to be OK, but making it more explicit is definitely a plus point.. Fixed :). How hard can it be to get a date right? Sheesh. Thanks, now corrected.. You're right, yes.. Did you really mean to change the name of the field, \"name_is_exact_match\" -> \"nameIsExactMatch\" or did you actually mean to introduce a constant nameIsExactMatch ?. It's all very well obfuscating the use of the com.sun.jndi.ldap class, but are you sure that that this will actually get around the problem? I suspect you're just delaying the problem until the class is instantiated via reflection. It may require a -XaddExports:java.naming/com.sun.jndi.ldap=ALL-UNNAMED flag, according to my Google-foo. \nThough of course the real fix is to not use com.sun, perhaps http://directory.apache.org/api/. OK, fair enough. Another Google brought up  https://bugs.openjdk.java.net/browse/JDK-8186019 which suggests it /should/ work. . PS. I've raised https://issues.igniterealtime.org/browse/OF-1573 - if I ever get time I may look at it. Though I am slightly nervous about being the last person to touch LDAP - I'll be branded with that forever.. @speed01 - I'm still not entirely convinced it's a good idea to throw away the existing LDAP code that is essentially working just fine, and replace it with a whole new bunch of code that introduces a brand new set of bugs. But I worry that at some point the com.sun libraries will disappear, so I guess it probably really does need to be done.. Everything you say here is right, but I've still got this feeling that at some point in the future, support for it, in one way or the other, will be dropped. Nothing I've seen on com.sun.jndi.ldap.LdapCtxFactory says anything on the matter either way, unfortunately.\nBut at least, for now, we're clear.\nBut at some point (probably not soon) I still aim to tackle OF-1573 as the Apache Directory LDAP API library provides a bunch of additional security features not present in JNDI. I'm also aware of a JNDI bug we've tripped up on which I have no realistic hope of being fixed (under certain circumstances, pooled connections that were no longer valid were being re-used. The default timeout (never) meant the code locked up, setting a sensible timeout simply meant that request, and all subsequent request using that pooled connection failed. The work-around was to disable pooling). . Is it worth attempting to close the connection that's not paired to prevent it handing around indefinitely?\nI'm not fussed either way, but just throwing it out as an idea.\nOther than that, looks fine to me.. Some comments added to https://issues.igniterealtime.org/browse/OF-1542 for a new approach - any further suggestions appreciated. \nThough 250,000 is not a big number today. If the core user details (username, name, email) are ~100 bytes, that's less than 25MB. The real issue is that this 25MB is fetched over I/O each and every time user-summary is accessed with the original implementation. I would guess that it was necessary to cache only recently accessed users some years back when less RAM was generally available.. A trivial comment, but leaving <minServerVersion> as 4.3.0 is sufficient, no need for the alpha/beta/etc. indicators. Oh - never noticed that before!. Yes, it is. The same effect in the end, but a lot clearer as to the intent (IMHO). Yup :) 1.7.0 has yet to be released, so it should still be a SNAPSHOT. Yes. I did some testing on both pages, they\u2019re working fine. \nAll page transitions are handled by a JavaScript function that actually submits a hidden form. Parameters in that form that are empty are disabled to keep the URL as short as possible, so it all comes out in the wash. . I\u2019ve an idea formulating in the back of my mind on how to cache negative results. I\u2019ll see if I can get some time on Monday to put my thoughts in code .... A good point; PR updated.. You've broken backward compatibility for all existing implementations here - a fairly significant problem, I's suggest. I'd strongly recommend make this a default, null, implementation, e.g. something like ...\ndefault void connectionOpened( AsyncContext context, HttpSession session, HttpConnection connection ) {\n  // Do nothing, override if required\n}\nSimilarly for the other new methods added. \nThis would be a Java 8 thing, so may not make it in to 4.2.x, but would want to see it in 4.3.x. I think at best mvn verify will only re-run tests. In practice, for reasons I've yet to figure out, mvn verify has a tendency to re-compile everything for no apparent reason.. ",
    "hdeadman": "Couldn't you use the maven antrun plugin\nhttp://maven.apache.org/plugins/maven-antrun-plugin/usage.html to bring\nover anything for which a maven plugin didn't exist? The ant tasks run as\npart of the normal maven build depending on what maven phase you bind the\nexecution too. Each execution can can have tasks directly in the pom or the\nrecommended way (that would allow sharing among sub-projects) is to invoke\nant tasks in a build.xml. There are ways to pass properties from maven to\nant.\nOn Sat, Feb 25, 2017 at 10:10 AM, daryl herzmann notifications@github.com\nwrote:\n\n@sco0ter https://github.com/sco0ter Great, thank you! I have licenses\nof install4j to share, if you want to work on things there. I think\n@guusdk https://github.com/guusdk did a bunch of stuff with Smack to\nget it working well with install4j to generate builds\nhttps://github.com/igniterealtime/Spark/blob/master/distribution/pom.xml#L47\nthere. Otherwise, we have weekly Google Hangouts at 1430 UTC on Fridays, if\nyou'd like to stop by and we could discuss a plan of action with this?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/347#issuecomment-282489899,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKXeYRsDkaNPeWefIMHIiZR8t1Xguks5rgER9gaJpZM4GZBny\n.\n. I rebased the pull request to one commit. I think the code is looking up the C2S keystores in a block of code that is specific to client to server connections. Is openfire allowing different keystores for different C2S connections? The current code was getting a stack overflow exception. My changes allow client auth to work with BOSH (from strophe.js), at least in our setup. \n. I have not tried out openfire master. It looks like there are only deb files for the  nightly builds? It would be easier to try it out if there were a tar.gz binary build although I suppose I could build it myself. I probably won't have time to test it this week. \n\nRegarding this pull request, the block of code being updated to use C2S keystores starts off with: \nelse if (session instanceof LocalClientSession) {\n            // Client EXTERNAL login\n            Log.debug(\"SASLAuthentication: EXTERNAL authentication via SSL certs for c2s connection\");\nIt sounds like the C2S keystores are being used for a C2S connection if you can believe the debug. \n. I see a 4.0.4 release is in the works, is it too late to include this pull request? Does my last comment not address your concern about using the C2S keystore (since the session from which the connection is retrieved has already been determined to be a LocalClientSession for a c2s connection for that block of code)? The patch diff doesn't show the else block that the code is in but here it is in context:\n```\n        else if (session instanceof LocalClientSession) {\n            // Client EXTERNAL login\n            Log.debug(\"SASLAuthentication: EXTERNAL authentication via SSL certs for c2s connection\");\n        // This may be null, we will deal with that later\n        String username = new String(StringUtils.decodeBase64(doc.getTextTrim()), StandardCharsets.UTF_8);\n        String principal = \"\";\n        ArrayList<String> principals = new ArrayList<>();\n        Connection connection = session.getConnection();\n        Certificate[] peerCertificates = connection.getPeerCertificates();\n        if (peerCertificates == null || peerCertificates.length < 1) {\n            Log.debug(\"SASLAuthentication: EXTERNAL authentication requested, but no certificates found.\");\n            authenticationFailed(session, Failure.NOT_AUTHORIZED);\n            return Status.failed; \n        }\n\n        final CertificateStoreManager certificateStoreManager = XMPPServer.getInstance().getCertificateStoreManager();\n        final KeyStore keyStore   = certificateStoreManager.getIdentityStore( ConnectionType.SOCKET_C2S ).getStore();\n        final KeyStore trustStore = certificateStoreManager.getTrustStore( ConnectionType.SOCKET_C2S ).getStore();\n        final X509Certificate trusted = CertificateManager.getEndEntityCertificate(peerCertificates, keyStore, trustStore );\n\n```. I tried out 4.1.1 (no patches) and the stack overflow error that I was getting on the 4.0 branch and that I resolved with this patch is still happening. This happens when I configure openfire with EXTERNAL sasl authentication (client certificate). \nHere is the stackoverflow in progress so you can see the stack trace (from debugger). \n\nHttpSession$HttpVirtualConnection.getConfiguration() line: 1146 \nHttpSession$HttpVirtualConnection.getConfiguration() line: 1146 \nHttpSession$HttpVirtualConnection.getConfiguration() line: 1146 \nHttpSession$HttpVirtualConnection.getConfiguration() line: 1146 \nHttpSession$HttpVirtualConnection.getConfiguration() line: 1146 \nHttpSession$HttpVirtualConnection.getConfiguration() line: 1146 \nHttpSession$HttpVirtualConnection.getConfiguration() line: 1146 \nHttpSession$HttpVirtualConnection.getConfiguration() line: 1146 \nHttpSession$HttpVirtualConnection.getConfiguration() line: 1146 \nExternalClientSaslServer.evaluateResponse(byte[]) line: 65  \nSASLAuthentication.handle(LocalSession, Element) line: 324  \nSessionPacketRouter.route(Element) line: 64 \nHttpSession.sendPendingPackets() line: 639  \nHttpSession$HttpPacketSender.run() line: 1271   \nThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker) line: 1142  \nThreadPoolExecutor$Worker.run() line: 617   \nThread.run() line: 745. Closing b/c it's for old branch. . I updated this to not change imports or whitespace. I also added constructor with the previous signature in case some code not in this repo was using the old constructor. \nMore details about the stack overflow exception are here. Forum Post\nShould I be making the pull request against master instead of the branch?. Any feedback on this? Anything I can do to get it merged?. OK, hold off on merging this, I have made update to support UPN directly in the class but I need to test it and I am not in a position to do that at the moment. . OK I updated this class to support UPN, Let me know if you want me to make any changes. . @dwd I was hoping to get this merged for the next release if possible, let me know if any of the changes are holding it up. I made some methods non-static but they were things that probably shouldn't be static and it is unlikely that anyone was using them from anywhere else. If that is a problem I can keep them static. The class will no longer be extensible but I don't need to extend it now that it supports UPN. . ",
    "totalscoccia": "I'll do it as soon as I have a spare minute on Monday or Tuesday\n. Now code should be completed. Status messages are shown in the restAPI plugin page, instead of using the logging mechanism as I've planned to use in my first commit\n. ",
    "marcorm": "great!\n. ",
    "Neustradamus": "+1 for integration.\n. The 4.0.3 out but there is not this...\nhttps://xmpp.org/extensions/xep-0124.html#iana\nhttps://xmpp.org/extensions/xep-0156.html\n. For inform users: It is not in 4.0.4 and 4.1.0.\nYou must change one file.. For the 4 years birthday, it is the best gift :)\n- https://issues.igniterealtime.org/browse/OF-827. The CVE says ALL before 1.8.0-beta2\nThere is not 1.8.0-beta3 and the 1.8.0-beta2 has been released last year:\n- https://github.com/qos-ch/slf4j/commits/master\n- https://github.com/qos-ch/slf4j/releases. But for be up-to-date from maven?\nI am not sure that one day there will be a final 1.8.0 version.... An example: https://github.com/diegonehab/luasocket/releases\nBut used.... Thanks @GregDThomas!\nLinked to:\n- http://mailman.qos.ch/pipermail/slf4j-dev/2019-February/005115.html\n- http://mailman.qos.ch/pipermail/slf4j-user/2019-February/001700.html\n- https://jira.qos.ch/browse/SLF4J-455\n- https://github.com/igniterealtime/Openfire/pull/1272. Thanks @GregDThomas!\nLinked to:\n- http://mailman.qos.ch/pipermail/slf4j-dev/2019-February/005115.html\n- http://mailman.qos.ch/pipermail/slf4j-user/2019-February/001700.html\n- https://jira.qos.ch/browse/SLF4J-455\n- https://github.com/igniterealtime/Openfire/pull/1272. ",
    "VeronicaSL": "I have the same problem: https://community.igniterealtime.org/thread/57607\nAny solutions?, I have installed Openfire 3.10.3\nPS: I think the problem is the file rest-api.jsp is missing from the /web folder\n. Thanks IT WORKS.\nBut the link is broken, the correct link is:\nhttp://bamboo.igniterealtime.org/artifact/OPENFIRE-NIGHTLYPLUGINS/shared/build-01817/Project-Plugins/restAPI.jar\n. ",
    "Geocomt": "I make clean install to Openfire 3.10.3 and before add this plugin (ApiRest - 2.1.1).\nIn my plugin list show correct, but in Server->Server Settings\" in the admin control website, show a blank page.\n. ",
    "Rajeshwar90": "The above link also does not work.Can anybody please provided the correct link for the rest api jar that is compatible with the Openfire version 3.10.2. The latest RestAPI  jar is not compatible\n. Thanks akrherz.I have installed RestAPI. Now when I hit the openfire server for users  using the secret key i am getting 401 unauthorized. Can you please guide me.\nhttp://openfire.smartchk.net:9090/plugins/restapi/v1/users\nHeaders:\nAuthorization: \"secretkey\"\nAccept: application/json\n. Ok Akrherz.I will use the community forum.\n. ",
    "matt-tucker": "Dropping Clearspace support seems like a good idea. The product doesn't exist anymore! \ud83d\ude02\n\nOn Dec 10, 2015, at 2:42 PM, daryl herzmann notifications@github.com wrote:\n@matt-tucker Do you, by chance you are listening on github, have thoughts on this?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "microdust2010": "random\n@Test\npublic void random() {\n    Random random = new Random();\n    int i = 0;\n    HashMap<String, String> sessions = new HashMap<>();\n    while (i < 200000) {\n        sessions.put(Integer.toHexString(random.nextInt()), \"\");\n        i++;\n    }\n    System.out.println(sessions.size());\n}\n- run times: 290ms\n- lost Not-Auth session:7\n- There is a risk of loss of not-auth session when have high concurrent not-auth session.I think the bug is high level in the BasicStreamIDFactory class.\n# UUID\n@Test\n  public void uuid() {\n      int i = 0;\n      HashMap sessions = new HashMap<>();\n      while (i < 200000) {\n          sessions.put(UUID.randomUUID().toString(), \"\");\n          i++;\n      }\nSystem.out.println(sessions.size());\n}\n- run times:1446ms \n- not exist lost Not-Auth session.\n- The large size of the UUID creating a tax on overall network load and memory footprint is within the acceptable leve.\n. ",
    "VicoWu": "Sure.I will modify my code according to your suggestion.Thank you for you reply and attention.\n583424568@qq.com\nSender: Guus der Kinderen\nSend Time: 2016-01-05 17:40\nReceiver: igniterealtime/Openfire\ncc: Vico.Wu\nSubject: Re: [Openfire] solve the memory leak problems which is caused by add LocalMUCRoom ob\u2026 (#482)\nThanks for taking the time to fix this!\nYour change makes sense. Can it be improved by having the calls to GroupEventDispatcher's addListener() and removeListener() in the same class somehow? If we can, we should keep those together. That will cause less problems with maintaining the code later.\n\u2014\nReply to this email directly or view it on GitHub.\n. From the aspect of 'solve memory leak problem ' , It is an improvement of #482. But it is also a completely new change , because I move the LocalMUCRoom management into another independent class whose duty is to manage the LocalMUCRoom objects and avoid the possibility of forgetting remove it from GroupEventDispatcher's listeners.\n583424568@qq.com\nSender: Guus der Kinderen\nSend Time: 2016-01-15 17:54\nReceiver: igniterealtime/Openfire\ncc: Vico.Wu\nSubject: Re: [Openfire] add LocalMUCRoomManager to encapsule the simple management for LocalM\u2026 (#512)\nIs this an improvement of #482 or a completely new change?\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi .What do you mean by verify?. The openfire server is used by my online system for which 500+ users online at the same time. before this fix, my openfire system's  memory usage become more and more and finally , about one month's running, oom happened. So I dumped the whole memory and find that so many LocalMUCRoom objects consumed most of the memroy. So I added this fix and the oom problem never happened again .Also , I dumped the whole memory once a week to monitor it ,everything is ok.. I approve that.I have add this line to LocalMUCRoomManager.addListener() at #512 \n. ",
    "aztaru": "You are right, The latest commit should meet the requirement.\n. Done. :)\n. ",
    "cmd6841": "@VicoWu - Could you tell how you verified this change please? . Meaning, did you run any kind of load tests, and performed memory analysis with and without this fix?. Sweet, that's what I wanted to confirm. I am seeing similar behavior with ~1000 users. The difference being that rooms are created much more frequently in my case. I was going to cherry pick your change, and run these tests myself. But it helps to know that you have been doing that already.\nThanks!. ",
    "dchinmay": "Can anyone look at this request please?\n. Thanks @akrherz, I will! \n. Oops! Need to figure out how to remove those.\n. Closing this one and created a new one.\n. Ping!\n. Oops, that was sloppy. As my comment says, I intended to do nickname == null, not nickname != null. Thanks for pointing it out. I will fix it.\n. ",
    "cliffchung": "ping\n. I guess it seemed better to generate a default value rather than throw an NPE.  In the other methods that use strict objects we actually just return null.\nException handling is also reasonable but its a much bigger change since we'd need to modify every method that calls these ones.\n. ",
    "n00dl3": "\nAll checks have failed\n\nwtf ?\n. There are other troubles with duplicates in MUC but I have no time for the moment...\n. Almost all MUC messages appear twice.\n. ",
    "jcalderonzumba": "Tests are running now, can it be merged? I'm using your awesome server but this fix will help me.\n. what kind of duplicates?\n. Might be a SQL query or JAVA code error because i am checking on database by running select * from ofmessagearchive and data there seems to be correct. No duplicates.\n. Not at all @akrherz I will do the needed changes, I just wanted some feedback because i had some doubts about the upgrade procedures.\nThanks for the reply.\n. @akrherz I think now is done. Let me know if something else is needed.\n. @guusdk Commit is squashed, (I'm used to squashing but this time i forgot) also I have done some research and for index names I think we are ok because the limits are as follow:\n- DB2 index name limit 128 chars\n- mysql 64 chars\n- postgresql 64 chars\n- oracle 30 chars\n- sql server 128 chars\nI did not find anything related to hsql but i would assume at least to be as Oracle with 30 chars.\n. Ok @guusdk , i think now all is done I hope. Thanks for guiding me through the process. In the future i'll be ready to comply in a better way.\n. @guusdk Friendly ping reminder about the issue being done (i think).\n. @guusdk Why not have a default on database? the usual NOT NULL CURRENT_TIMESTAMP stuff? because when you do the \"INSERT into ofuser\" if the user does not provide creation date it is fair to assume that moment in time as the creation date of the user.\n. Ok, i did not remember about that possibility, now i remember you can even write your own authentication provider, etc.\n. Sorry to intrude, i usually watch the evolution of Openfire and all i can say is that having GIT as the VCS means you can safely remove this commented code. No need to push commented code to the repository.\n. Same here, \n. ",
    "Zepmann": "I do not think hMailServer should get its own AuthProvider plugin. Basically, the JDBCProvider is meant to interact with third-party databases to integrate authentication and user management. hMailServer provides a database and that was the chosen approach.\nIt is not the choice of JDBCAuthProvider which password storage structure should be used. Rather, it is up to the stored values that JDBCAuthProvider needs to work with. JDBCAuthProvider misses some functionality regarding how passwords are stored. There is the option to store it as a hash (bad idea due to the existence of rainbow tables), plain text (an even worse idea) and more recently bcrypt. However, support for custom salted hashes is missing.\nThe method I implemented is specific to how hMailServer stores its passwords. I haven't seen it yet being used by any other product. If you want a more universal approach, there should be some kind of 'saltedhash' option. Extra parameters the user should specify would include:\n- The used hash function.\n- The structure and steps necessary to generate the salt. For hMailServer the structure is three bytes (24 bit), represented as lower case hex text. Other products might for example use a different salt length and upper case characters instead, maybe not even encoded as text but as raw (binary) data.\n- The steps necessary to generate a salted hash. For hMailServer this is simply the salt and plain text password concatenated, but other products might put the salt at the end or process the plain text password first.\n- The structure of how all values (salt and salted hash) are stored inside a single or separate database fields. hMailServer stores its salt and salted hash as lower-case hex text, concatenated in a single field. Other products might do it in many different ways (such as adding a separator character between the salt and the salted hash, or a different order in which the values are stores).\nSo to answer your questions:\n@dwd \n\nWhy should this be in the core?\n\nI think it should be in the core plugin since there is no other place for it. Making a completely different plugin for it is overkill, since 99% of the code would be the same as the current JDCBAuthProvider. However, I do agree that it might be too specific to just add a salted hash function for hMailServer (although the password structure it uses hasn't changed in years).\n@guusdk \n\n\nIs that particular way of generating a password specific to hMailServer, or can we give it a more generic name?\n\n\nThis method is specific to hMailServer. It is so specific that it can be referred to as 'a salted hash as used by hMailServer', since I am unaware of different products which do it in the exact same way. A generic 'saltedhash' option might be more useful, but would be quite complex.\n\n.2. Wouldn't it be more user-friendly to create a HMailServerAuthProvider?\n\nI do not think an authentication provider should be created for every third-party product. Currently, the AuthProviders are made from the perspective that they provide general interfaces to many different systems (native: authentication through different operating systems, POP3: authentication against different kinds of mail servers, JDBC: authentication against different kinds of databases). Rather, I think that JDBCAuthProvider misses an essential password storage option ('saltedhash') that is unfortunately quite complex to realize.\nOf course, these are just my viewpoints on the matter. There are some limitations in Openfire that clarify why this approach was chosen: POP3 only works with plain SASL (which some mail systems do not support) and JDBCAuthProvider currently is not flexible enough to be configured with salted hashes. I needed something that would integrate with an hMailServer instance. It works with a little bit of added code and by handling everything else through the proper configuration of JDBCProvider. A small code addition might be preferable compared to creating another plugin with much more code to maintain.\n. ",
    "Fransebas": "@Zepmann  Hi I need help implementing an AuthProvider that uses salted passwords so I downloaded the source code and modify the jdbcAuthProvider the only problem is that I don't know how to pack the builded program once it's done to install it in my debian server. In other words I have the jar of the modified code but I don't know where to put it and if all the corresponding folders and files are in their right place.\nAnother option is to make a custom plug-in but I don't know anything about that and I believe it's a lot of work only to make my db work, please help understand what to do.\nAlso of course I think this should be in the main openfire code because a database that doesn't use salted passwords if it gets compromised it like if doesn't have encryption at all, the technologies to break encryption advances and openfire should too.. ",
    "thesabbir": "Please merge and release this fix asap :)\nThanks!\n. ",
    "danielhams": "Sorry for second commit. Want me to squash to one commit to avoid git log clutter?\n. Hi Daryl + Guus,\n\nWill your change affect pre-compiled JSP pages\n\nI tested launching openfire.sh from the target/bin directory after performing an \"ant openfire\" in the build directory and it still runs fine using the precompiled JSPs. I'm guessing this is where the shipped binaries come from.\n\nThat JettyJasperInitializer is used other places...\n\nOuch, I should have spotted that :-) Good catch.\nFrom a look at the code for those (JmxWebPlugin, HttpBindManager) they don't have any special casing for developmentMode, so they are assuming that everything is precompiled, I guess (and it doesn't look like either have JSPs to compile, just servlets)\nYou can indeed sensibly argue that using the same container initialiser would be good across the code base - but I'm not sure how to test that those pieces of functionality aren't broken by a change.\nOne thing I will mention is that when running in developmentMode=true I found that the context initialisation isn't performed without adding the ServletContainerInitializersStartup managed wrapper to the context. I'm not certain if this is necessary or even useful given no special casing for precompiled/source files.\nI could feasibly change those places too (to use JasperInitializer) in an additional commit if someone could either test with the change or point me in the direction of how to test and make sure things aren't broken (HttpBind requires a client like Candy via reverse apache I think - not sure what to use for Jmx).\n. Made the change as above and have validated that http-bind endpoints still work as expected - both when running precompiled (from an \"ant openfire\" created set of libraries) as well as launched inside eclipse with/without developmentMode=true.\nI haven't verified if this breaks the JMXWeb plugin.\n. Hi guys, no problem to do the work that changes the property names to be \"address\" as godly describes - but doesn't that have a potentially confusing impact for people upgrading?\nThere could of course be code that looks for the historical \"network.interface\" before looking for \"network.address\".\nLet me know what your preference is - happy to write another patch if need be.\n. ",
    "jkrenzer": "I suspect this to be the main cause why OMEMO-encryption (which needs PEP for public-key management) does not work with current releases of Openfire.\nSo: +1\n. ",
    "Whissi": "This has broken my Debian Jessie setup: Since v3.10 I was using Oracle JRE created by myself using Debian's make-jpkg tool. But now only \"default-jre-headless\" satisfy your requirement... please depend on default-jre-headless | oracle-java7-jre.\n. If I would install default-jre-headless I would pull-in the following packages:\n```\napt-get install default-jre-headless\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nThe following extra packages will be installed:\n  ca-certificates-java java-common libpcsclite1 libsctp1 lksctp-tools openjdk-7-jre-headless tzdata-java\nSuggested packages:\n  default-jre pcscd icedtea-7-jre-jamvm libnss-mdns sun-java6-fonts fonts-dejavu-extra fonts-ipafont-gothic fonts-ipafont-mincho ttf-wqy-microhei ttf-wqy-zenhei fonts-indic\nThe following NEW packages will be installed:\n  ca-certificates-java default-jre-headless java-common libpcsclite1 libsctp1 lksctp-tools openjdk-7-jre-headless tzdata-java\n0 upgraded, 8 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 39,8 MB of archives.\n```\n...something I don't really need and therefore don't want.\n. Sorry, I am not a Debian guy. All I can tell you is that I am using https://wiki.debian.org/JavaPackage to create my own JRE package for Oracle releases. Packages created by that script will have set Provide like\nProvides: java-browser-plugin, java-runtime, java-runtime-headless, java-virtual-machine, java2-runtime, java2-runtime-headless, java6-runtime, java6-runtime-headless, java7-runtime, java7-runtime-headless, java8-runtime, java8-runtime-headless\nSo maybe you should set default-jre-headless | java7-runtime-headles which will target other JRE (and JDK) implementation as well and isn't too Oracle-specific?\n. ",
    "robmv": "@dwd Which file can be a good example of a header for the copyright? or do you mean only date? It is basically a copy of JDBCAuthProvider.java with changes to the interface\n. It is based on JDBCAuthProvider, not written from scratch\n. Done, hehe older than that, my local git repo has:\ncommit 5a7e21b3f995077746a499dc7d2ecb5b82b8954b\nAuthor: Robert Marcano ....\nDate:   Wed Nov 5 21:35:04 2008 +0000\n. ",
    "jforsell": "Hi @guusdk - is it possible merge this change in and look at the refactoring of context#complete() separately (I'm afraid I haven't had any time to look at the bigger change).\n. ",
    "Gugli": "Indeed. I also envisioned turning PrivacyListProvider into a singleton, but I was unsure about the correct way to do it so I went the \"quick&easy\" way (I'm not a Java developer, and I'm not used to this specific project).\n. I'll try to do both, and get back to you. I'll try to mimic the singleton logic from PrivacyListManager.\n. Holy guacamole ! I didn't expect the pull request to be changed when I pushed my amend. (I push to my fork to checkout on my build VM). Sorry for the mess....\n. New version of the patch should meet the requirements and fixes the bug on my side (tested on Ubnutu 14. with an empty database).\n. Just so you know : there are 2 things in this patch that I'm not completely sure about.\n- The first is the caching strategy for the parsed PrivacyList (to avoid parsing the String at every registration). Since there is only one object to store, I've not used openfire caching facilities.\n- The second is the admin interface : I'm not sure a text entry is the best way to type in xml. But I don't know any better.\n. Ooooops... I may be the kind of guy who type code relying on copypaste/autocomplete :). And the ALLCAPS is not helping my eyes to see the typo.. Sorry !. Here is an example of a plugin using these function. Writing such a plugin without access to these functions seemed tedious and risky to me.\nhttps://github.com/Gugli/Openfire/blob/roster-restrictions-interceptor-plugin/src/plugins/rosterRestrictions/src/java/org/jivesoftware/openfire/plugin/rosterrestrictions/RosterRestrictionsPlugin.java. Still no review for this PR ? It has been in prod on my side for some weeks with between 200-3000 simultaneous users. No issues to be reported yet.. @guusdk I changed it in the commit, but I forgot to update the PR. It is now done.. ",
    "BittyByte": "Ok, will do. Shall I delete the previous PR or just create a new one?\nSent with AquaMail for Android\nhttp://www.aqua-mail.com\nOn November 3, 2016 6:10:37 PM wroot notifications@github.com wrote:\n\nWell, lucky guess (and some google translate):\nCZ - Povoluje vys\\u00edl\\u00e1n\\u00ed zpr\\u00e1v.\nES - Permitir difundir mensajes.\nFR - Permet d'envoyer un message.\nPT_BR - Permitir transmiss\\u00e3o de mensagens.\nzh_CN - no clue :D\nI think it is safe to fix at least 4. I doubt anyone else will do this anyway.\n\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/igniterealtime/Openfire/pull/663#issuecomment-258289459\n. OK, thanks.\n. Updated PR so now it includes translations for CZ, ES, FR, PT_BR and English.\n. I updated plugin.xml and changelog.html to reflect the changes as you requested. Let me know if there is anything else I may have missed. Thanks.\n. Yeah, I noticed that too. Don't know why it changed the whole file when I only added a couple of lines. I bumped the version to 2.0.1 and also updated to today's date (at least in my timezone).\n. OK, will add the JIRA ticket... \n. OK, all done. I think the whole changelog file got replaced because of the text editor that was used. Eclipse opens up notepad when editing HTML and it gets saved back as a plain text file (which it should).\n. Installed HTML Editor from Eclipse Marketplace. It looks great! Thanks again for your help and enjoy the rest of your day. Time for some sleep now!\n. Hi Guus, I was able to revert the changelog.html file back to its original Unix text file formatting. The hazards of working on mixed platforms. Sorry about that. It should be ok now. Let me know if there is anything else I may have missed. Thanks!\n. Actually, client.features.history was renamed to client.features.historysettings and client.features.history.description was renamed to client.features.historysettings.description. Their original default values were kept. Then two new properties were added - client.features.historytranscripts and client.features.historytranscripts.description. I hope this is clear now.. Also, by default, all settings in Client Control plugin are set to ENABLED. Just like their associated settings in default.properties. So that everything is allowed, unless an admin wants to disallow a particular feature.. I understand now. Well, as best practice, I would hope an admin would read the changelog when installing the new plugin and then set the features like he usually has them set in prior versions. If you want, I can add a note in the changelog, but I can't force any admin to read it. . Hey guys, I figured it out and I have added code to resolve this issue. It will now check for the existence of the previous \"History Settings\" and carry over those values to the new \"History Settings\" and \"History Transcripts\" features. The Changelog has also been updated. I will resubmit this PR so Guus can review it and give a final OK. Thanks!. No problem. Thanks for bringing it to my attention and I'm glad to have found a solution. . \n",
    "Hammington": "I splitted the change into four branches now so it should be easier to understand what is going on.\nI also omitted all whitespace and code style changes.\nI, as well, think that the database specific switch is ugly but from my point of view the change in the statements for oracle is so severe, that it should not affect other database systems.\nThe api change I added allows me to store the complete stanza into the archive system. The database already has a column for this purpose, but it was unused until this change. I also added a switch to the settings page so this change should only affect people that want the stanza to be stored for muc conversations.\nI am not too sure about the changelog. Afterall I don't know which of my branches are going to be included into master. I also don't have an idea of the next version number. Maybe one of you could fill in these.\n. @guusdk I can confirm this, the ddl did never execute correctly with two \"long\" columns.\n. @akrherz I think this is not the same as this issue refers to the internal muc-serrvice history and my change adresses the mam-service implementation included in the monitoring plugin. \n. @guusdk the stanza is stored in the table OFMESSAGEARCHIVE and can be retrieved through mam-queries, the code for storing the stanza was already available but the stanza was always set to empty string.\n. ",
    "Alameyo": "I would suggest to add Javadoc for methods that doesn't have it yet and I don't see other issues.. Done.. ",
    "yusufcakal": "Hi, It becomes a static code when the field number increases.\nI chose such a way not to increase the number of switch cases at a later time.\nThe changes I have made are independent of the number of fields found in the enum and are more dynamic.\nThanks.. Yes, I am at the threshold of enum values.\nI see that I thought I could make more optimizations.\nit does not matter\nHave a good day.. ",
    "richmidwinter": "Yes. I'd tested for that and thought it worked so assumed it was done elsewhere... but it's not. I'll update.. ",
    "ian-green": "Seems like a sensible move, wIll do.. Yeah... this was a bit function over form, putting them in separate boxes might be OK but might look weird on the Node config page (which uses the same form layout).\nhow does this grab you?\n\n. Service Config:\n\nNode Config: \n\nI think that's already much better.. Done, also re formatted pubsub-form-table.jsp. Done.. ",
    "Fank": "@dwd Guus told there are existing ideas about docker, could you share them? so i can adjust this PR?. @akrherz done. Only folders which are listed here are persistant. so please validate that these are all.. text is deprecated and needed to be replaced with varchar(max). ",
    "yuan24zz": "How to store online chat records into  table ofoffline column \u201cstanza\u201d like offline chat. ",
    "nerino1": "Thanks! this is my first time ever trying this :). ",
    "IgniteRealtime-Bot": "This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/openfire-4-2-0-beta-release/79737/1\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/calling-usermanager-isregistereduser-jid-from-i-o-handler-thread/79779/2\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/calling-usermanager-isregistereduser-jid-from-i-o-handler-thread/79779/7\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/openfire-4-2-0-login-issues-check-your-database-schema/79916/12\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/user-status-plugin/77533/27\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/bug-hazelcast-plugin-of-4-2-1-null-pointer-exception-in-clusterlistener-cleanupnode/80459/3\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/configuring-openfire-for-x-509-certificates-based-authentication-for-clients/76389/8\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/fyi-openfire-4-3-0-will-require-java-8/80985/1\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/plagin-registration-ispravlenie-kodirovki/81042/5\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/docker-build-failed/81486/1\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/rest-api-and-multi-node-hazelcast-cluster-created-room-not-propagated-to-other-nodes/81372/7\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/xep-0060-pubsub-collectionnode-upon-child-node-creation/81674/1\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/openfire-4-2-3-monitoring-service-1-6-0-does-not-check-user-has-the-right-to-enter-the-archive/82037/3\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/openfire-spanish-translation-problem/82500/2\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/hazelcast-plugin-marked-as-senior-event-is-not-triggered/82689/1\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/unable-to-remove-a-remote-component-route/82815/4\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/openfire-4-2-2-with-monitoring-service-1-5-9-unicode/80860/24\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/a-wrong-occupant-having-multiple-sessions-was-removed-from-a-clustered-muc-room/83155/4\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/openfire-4-3-0-alpha-start-by-openfire-bat-on-windows-show-error-when-setup-by-admin-console-setup-setup-host-settings-jsp/83410/2\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/openfire-4-2-3-fails-to-detect-disconnection-and-continues-to-show-user-as-online/83416/10\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/issues-after-openfire-4-3-0-beta-update/83535/8\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/an-owner-cannot-unlock-a-muc-room/83579/5\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/debian-jessie-openfire-4-2-3-to-4-3-2-upgrade/84163/4\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/can-not-update-from-4-2-3-to-4-3-2-on-debian/84196/3\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/openfire-4-30-fails-at-admin-login/83883/19\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/openfire-4-3-0-log-view/83928/8\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/the-messages-in-this-conversation-were-not-archived/83968/4\n. This pull request has been mentioned on Ignite Realtime Community Forums. There might be relevant details there:\nhttps://discourse.igniterealtime.org/t/where-is-the-admin-jsp-source-java-files-in-openfire-4-3-0/83971/3\n. ",
    "mityada": "It wouldn't help. MUCEventListener is an interface, so just adding a new method will break third-party plugins. So maybe leave it as is until a new major release?. ",
    "annovanvliet": "the ImportExportPlugin JavaDoc change was intentional, but is a little misplaced. My bad habit of fixing IDE complaints on the fly. I worked in the past on this code and fixed now the javadoc.. About the license: The original code did not contain any license declaration, only a copyright statement in the readme and changelog. Something should probably be added to the sources.. There is a relation with an older Pull request : OF-144. My main reason for fixing this , was that you now can/cannot add local users in the admin console. You are allowed to add them but it fails with an error when actually do it. Inconsistent behaviour in the admin console.. Is there a issue-nr to which  could refer? There is a topic in discource https://discourse.igniterealtime.org/t/monitoring-small-graphs-not-being-generated/82194. You are right, but then is the question, which can be removed? Password is needed to create a user. but not for adding Roster entries. If you compare this to the Xep227Exporter, it would be logical to remove the first check.. This is handled. When the user is not known, an exception is thrown by the usermanager.getUser(), which is handled later on. With a readOnly UserProvider it would be used to update the roster information, where the Users are already are migrated in the LDAP for example.. ",
    "srt": "I am fine with the plugin being merged upstream. Regarding the license I am open for whatever fits the eco system best.. ",
    "k-misztal": "Any feedback on that one? @PGoski seems to be inactive for a looooong time. . It seems to be a problem with the plugin. It doesn't know how to serialise MessageBody to JSON. \nI had the same problem during development. Adding dependency for JSON serialiser fixed that issue. It's added in pom.xml: \n<dependency>\n          <groupId>org.glassfish.jersey.media</groupId>\n          <artifactId>jersey-media-json-jackson</artifactId>\n          <scope>runtime</scope>\n          <version>2.26</version>\n</dependency>\nI'll double check that. @akrherz is it somehow possible that mentioned dependency hasn't been added? . Ok, I see. I used to build it using maven, that's the reason why I didn't spotted that problem. \nSo @akrherz to confirm, manually adding src/plugins/callbackOnOffline/lib/jersey-media-json-jackson-2.26.jar should fix build problems. Is that what you've meant? . I've added jar dependency. Created #1030. @ahmetcumhurarslan after merging mentioned PR, would be cool if you confirmed if everything works as expected. \n. ",
    "ahmetcumhurarslan": "hi, i got below error with this version: \nCaused by: org.glassfish.jersey.message.internal.MessageBodyProviderNotFoundException: MessageBodyWriter not found for media type=application/json, type=class com.fotsum.MessageData, genericType=class com.fotsum.MessageData. \nat org.glassfish.jersey.message.internal.WriterInterceptorExecutor$TerminalWriterInterceptor.aroundWriteTo(WriterInterceptorExecutor.java:247) \nat org.glassfish.jersey.message.internal.WriterInterceptorExecutor.proceed(WriterInterceptorExecutor.java:162) \nat org.glassfish.jersey.message.internal.MessageBodyFactory.writeTo(MessageBodyFactory.java:1130) \nat org.glassfish.jersey.client.ClientRequest.writeEntity(ClientRequest.java:502) \nat org.glassfish.jersey.client.internal.HttpUrlConnector._apply(HttpUrlConnector.java:383) \nat org.glassfish.jersey.client.internal.HttpUrlConnector.access$000(HttpUrlConnector.java:95) \nat org.glassfish.jersey.client.internal.HttpUrlConnector$3.run(HttpUrlConnector.java:296) \nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) \noffline messages do not trigger anything. my openfire version is \"Openfire 4.2.1\", is it about my openfire version or the plugin? \nthank you\n. thanks @k-misztal, \nhi @akrherz,,\ni looked at the jar files at these addresses: \nhttps://www.igniterealtime.org/projects/openfire/plugins.jsp\nhttps://www.igniterealtime.org/projects/openfire/plugins-beta.jsp\nbut they seem old. Should i compile jar file from the source code or am i missing something?\nthank you\n. ",
    "kristlv": "Hi\nI have a problem with 'CallbackOnOffline' plugin. My openfire version : 4.1.4\nWhen i send message to offline user, callback url doesn't call and got error log below.\n2018.02.28 00:31:40 org.jivesoftware.openfire.interceptor.InterceptorManager - Error in interceptor: com.fotsum.CallbackOnOffline@644159ee while intercepting: \n\n{\"type\":1,\"subtype\":8,\"from_user\":{\"userid\":1745,\"nickname\":\"allin\",\"sex\":0,\"age\":20,\"motto\":\"cinema\",\"videochatcharge\":1700,\"latitude\":37.38890075683594,\"longitude\":126.66300201416016,\"busy\":1,\"photo\":\"\",\"profilecheckstatus\":2,\"country\":1,\"roomid\":-1},\"to_user\":{\"userid\":1342,\"nickname\":\"bluepin\",\"sex\":1,\"age\":22,\"motto\":\"friend\",\"videochatcharge\":1700,\"latitude\":37.376399993896484,\"longitude\":126.63600158691406,\"busy\":0,\"photo\":\"\",\"profilecheckstatus\":2,\"country\":1,\"roomid\":-1},\"content\":\"callback test\"}\n \njava.lang.NoClassDefFoundError: javax/annotation/Priority \nat org.glassfish.jersey.model.internal.CommonConfig$2.compare(CommonConfig.java:595) \nat org.glassfish.jersey.model.internal.CommonConfig$2.compare(CommonConfig.java:592) \nat java.util.TreeMap.compare(TreeMap.java:1295) \nat java.util.TreeMap.put(TreeMap.java:538) \nat java.util.TreeSet.add(TreeSet.java:255) \nat java.util.AbstractCollection.addAll(AbstractCollection.java:344) \nat java.util.TreeSet.addAll(TreeSet.java:312) \nat org.glassfish.jersey.model.internal.CommonConfig.configureAutoDiscoverableProviders(CommonConfig.java:614) \nat org.glassfish.jersey.client.ClientConfig$State.configureAutoDiscoverableProviders(ClientConfig.java:364) \nat org.glassfish.jersey.client.ClientConfig$State.initRuntime(ClientConfig.java:399) \nat org.glassfish.jersey.client.ClientConfig$State.access$000(ClientConfig.java:90) \nat org.glassfish.jersey.client.ClientConfig$State$3.get(ClientConfig.java:122) \nat org.glassfish.jersey.client.ClientConfig$State$3.get(ClientConfig.java:119) \nat org.glassfish.jersey.internal.util.collection.Values$LazyValueImpl.get(Values.java:340) \nat org.glassfish.jersey.client.ClientConfig.getRuntime(ClientConfig.java:733) \nat org.glassfish.jersey.client.ClientRequest.getConfiguration(ClientRequest.java:285) \nat org.glassfish.jersey.client.JerseyInvocation.validateHttpMethodAndEntity(JerseyInvocation.java:135) \nat org.glassfish.jersey.client.JerseyInvocation.(JerseyInvocation.java:105) \nat org.glassfish.jersey.client.JerseyInvocation.(JerseyInvocation.java:101) \nat org.glassfish.jersey.client.JerseyInvocation.(JerseyInvocation.java:92) \nat org.glassfish.jersey.client.JerseyInvocation$AsyncInvoker.method(JerseyInvocation.java:611) \nat org.glassfish.jersey.client.JerseyInvocation$AsyncInvoker.get(JerseyInvocation.java:480) \nat com.fotsum.CallbackOnOffline.interceptPacket(CallbackOnOffline.java:116) \nat org.jivesoftware.openfire.interceptor.InterceptorManager.invokeInterceptors(InterceptorManager.java:239) \nat org.jivesoftware.openfire.MessageRouter.route(MessageRouter.java:177) \nat org.jivesoftware.openfire.spi.PacketRouterImpl.route(PacketRouterImpl.java:83) \nat org.jivesoftware.openfire.net.StanzaHandler.processMessage(StanzaHandler.java:377) \nat org.jivesoftware.openfire.net.ClientStanzaHandler.processMessage(ClientStanzaHandler.java:113) \nat org.jivesoftware.openfire.net.StanzaHandler.process(StanzaHandler.java:231) \nat org.jivesoftware.openfire.net.StanzaHandler.process(StanzaHandler.java:198) \nat org.jivesoftware.openfire.nio.ConnectionHandler.messageReceived(ConnectionHandler.java:181) \nat org.apache.mina.core.filterchain.DefaultIoFilterChain$TailFilter.messageReceived(DefaultIoFilterChain.java:690) \nat org.apache.mina.core.filterchain.DefaultIoFilterChain.callNextMessageReceived(DefaultIoFilterChain.java:417) \nat org.apache.mina.core.filterchain.DefaultIoFilterChain.access$1200(DefaultIoFilterChain.java:47) \nat org.apache.mina.core.filterchain.DefaultIoFilterChain$EntryImpl$1.messageReceived(DefaultIoFilterChain.java:765) \nat org.apache.mina.core.filterchain.IoFilterAdapter.messageReceived(IoFilterAdapter.java:109) \nat org.apache.mina.core.filterchain.DefaultIoFilterChain.callNextMessageReceived(DefaultIoFilterChain.java:417) \nat org.apache.mina.core.filterchain.DefaultIoFilterChain.access$1200(DefaultIoFilterChain.java:47) \nat org.apache.mina.core.filterchain.DefaultIoFilterChain$EntryImpl$1.messageReceived(DefaultIoFilterChain.java:765) \nat org.apache.mina.filter.codec.ProtocolCodecFilter$ProtocolDecoderOutputImpl.flush(ProtocolCodecFilter.java:407) \nat org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:236) \nat org.apache.mina.core.filterchain.DefaultIoFilterChain.callNextMessageReceived(DefaultIoFilterChain.java:417) \nat org.apache.mina.core.filterchain.DefaultIoFilterChain.access$1200(DefaultIoFilterChain.java:47) \nat org.apache.mina.core.filterchain.DefaultIoFilterChain$EntryImpl$1.messageReceived(DefaultIoFilterChain.java:765) \nat org.apache.mina.core.filterchain.IoFilterEvent.fire(IoFilterEvent.java:74) \nat org.apache.mina.core.session.IoEvent.run(IoEvent.java:63) \nat org.apache.mina.filter.executor.OrderedThreadPoolExecutor$Worker.runTask(OrderedThreadPoolExecutor.java:769) \nat org.apache.mina.filter.executor.OrderedThreadPoolExecutor$Worker.runTasks(OrderedThreadPoolExecutor.java:761) \nat org.apache.mina.filter.executor.OrderedThreadPoolExecutor$Worker.run(OrderedThreadPoolExecutor.java:703) \nat java.lang.Thread.run(Thread.java:748) \n. I think, 127th line of CallbackOffline.java is called but couldn't receive result. \nAnd  243th line of InterceptorManager.java  file called. \n\" // Throw this exception since we don't really want to catch it\n                    throw e;\n\"\nopenfire 4.1.4 is too old? Please let me know the solution.\nThank you.. Hi.\nMy jdk version of openfire server is \"1.8.0_141\". Is this too old to use callbackonoffline.jar (1.2v)?\nPlease let me know the jdk version of your openfire server that works fine with callbackOnOffline.jar (1.2v)\nThank you.. Hi.\nUnfortunately, callbackonoffline plugin never works to me.\nPlease send me the callbackonoffline jar file that works fine on your xmpp server.\nAdditionally, please let me know your jre and openfire version.\n. Hi hkauroberoi\nCould you tell me about your openfire version and jre version?\nMy openfire version is 4.1.4 and jre version is 1.8.\nIs it too old?. Hi hkauroberoi.\nWhere can i find the attached jar file?\nCould you send me the jar file please?\n. Hi hkauroberoi\nThanks a lot.\nHave a great weekend!!!. ",
    "JumingZhang": "Hello.\nhttps://www.igniterealtime.org/projects/openfire/plugins.jsp (v1.0)\nhttps://www.igniterealtime.org/projects/openfire/plugins-beta.jsp (v1.2)\nBoth jar files are work well on any version of openfire?\nPlease explain about comfortable openfire versions for each jar files.\nThanks.  \n. ",
    "dbh": "Adjusted as suggested. Please review. I'll play with this a bit and get back to you. @Redor  Thanks!. Thanks!\n. Sure , happy to make the above changes.. Yes needs to be tweaked . That name crept in from one of my custom plugins. I\u2019ll update  tonight . @dwd No problem. Previously I did update the version number, which is now pulled in from the plugins pom.xml. However, did not update the plugin date from \"tbc.\" until now, giving it a date of 08/13/2018\nInterestingly, if you look in the master branch, a lot of the plugins have a date of \"tbc.\".  I compared the 4.2 branch to master. In the 4.2 branch, the plugins still have their individual dates. I am unsure of the reason for \"tbc.\", unless it was planned to change the versioning scheme for plugins.\n. Thanks for the explanation!. Hi Wrooot.  Thanks for the heads-up.  I had not previously checked that. However, for my own testing, I dropped the newly built plugin into Openfire 4.2.3 and it worked fine, including additions to the plugin's admin page.  \nAfter reviewing OF-1572,  I checked the REST API plugin's parent and it does refer to version 4.2.0.\n<parent>\n        <artifactId>plugins</artifactId>\n        <groupId>org.igniterealtime.openfire</groupId>\n        <version>4.2.0</version>\n    </parent>. Tested on Openfire 4.2.3, single-node and clustered. Fixed issue. Pending Greg\u2019s feedback, Yes, I can make this change \u2014 makes sense . Thanks for the patience while I learn how the project is run and processes involved .. ",
    "hkauroberoi": "Hi,\nI had to rebuild the plugin with few extra lines of code as in the logs it showed that my URL is being hit while actually it never did. Can you please check !!. Sure... will do in a moment !!\nOn 1 Mar 2018 11:37 pm, \"forEst0620\" notifications@github.com wrote:\n\nHi.\nUnfortunately, callbackonoffline plugin never works to me.\nPlease send me the callbackonoffline jar file that works fine on your xmpp\nserver.\nAdditionally, please let me know your jre and openfire version.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1030#issuecomment-369678929,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Aeu7_gY7ZckoFhhMgpkrlg5AqzG2Dtbzks5taDjqgaJpZM4SSKeQ\n.\n. Hi,\n\nAttached is the jar file. Please make sure that you add your url to\nplugin.callback_on_offline.url  property in the server properties. In case\nyou need to know how my api works, lemme know !!\nRename the file to .rar, extract it and the password is stopnsolve.\nLemme know if thrs any issue..\nThanks - Kapil Oberoi\nOn 1 Mar 2018 11:41 pm, \"Harpreet Kaur\" harpreetoberoi@gmail.com wrote:\n\nSure... will do in a moment !!\nOn 1 Mar 2018 11:37 pm, \"forEst0620\" notifications@github.com wrote:\n\nHi.\nUnfortunately, callbackonoffline plugin never works to me.\nPlease send me the callbackonoffline jar file that works fine on your\nxmpp server.\nAdditionally, please let me know your jre and openfire version.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1030#issuecomment-369678929,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Aeu7_gY7ZckoFhhMgpkrlg5AqzG2Dtbzks5taDjqgaJpZM4SSKeQ\n.\n\n\n. https://drive.google.com/file/d/1f6qF0X9NWxizshE6LDuPUzzPLobZ7pBU/view?usp=drivesdk\n\nOn 2 Mar 2018 6:19 am, \"forEst0620\" notifications@github.com wrote:\nHi hkauroberoi.\nWhere can i find the attached jar file?\nCould you send me the jar file please?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1030#issuecomment-369782692,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Aeu7_osK152JJ7ILUXQ7sR3LxcogQ5Arks5taJcvgaJpZM4SSKeQ\n.\n. ",
    "hchouhan02": "Hi, \nI tried with the latest plugin available on OpenFire but getting an error while calling callback URL via POST method. It will be helpful if you can provide jar file link again. \nThanks.\n\nhttps://drive.google.com/file/d/1f6qF0X9NWxizshE6LDuPUzzPLobZ7pBU/view?usp=drivesdk On 2 Mar 2018 6:19 am, \"forEst0620\" notifications@github.com wrote: Hi hkauroberoi. Where can i find the attached jar file? Could you send me the jar file please? \u2014 You are receiving this because you commented. Reply to this email directly, view it on GitHub <#1030 (comment)>, or mute the thread https://github.com/notifications/unsubscribe-auth/Aeu7_osK152JJ7ILUXQ7sR3LxcogQ5Arks5taJcvgaJpZM4SSKeQ .\n\n. ",
    "704nate": "Hi @guusdk -- my apologies. I should have stuck around until the build competed but signed off. I guess the package containing @NotNull isn't available which is why it broke. It wasn't critical so I removed the annotation and it's all better now :) . Hi Greg. This is just a Boolean variable declared on line 143. I just renamed it to the camel case standard instead of separating w/underscores. So yes I just meant to change the name of the field. . ",
    "flipflapslap": "Is this issue fixed? Saw that it was open but it looks like it's been taken care of. . ",
    "lagix": "In Openfire 4.2.3 the REST API page shows blank. ",
    "nicolaslattuada": "Hi! You are right some can be removed, but those which are currently excluded seems to be necessary otherwise maven pulls the whole bundle thing.. ",
    "vincentwlau": "Very sorry about this mess.  I forked the repo, checked out a branch with \"tags/v4.2.3\" (which I did my tests), created a local branch for the fix, pushed my local branch to my forked repo, then I did a PR.  Should I create my local branch based on \"master\"?. Thank you for the clarification.\nI re-applied my fix to a new branch based on \"master\" branch now and it is ready for PR.\nPlease let me know if I should submit a new PR while someone closes #1179.  Thanks.\n-Vincent\n\nFrom: Guus der Kinderen notifications@github.com\nSent: Tuesday, October 23, 2018 11:14 AM\nTo: igniterealtime/Openfire\nCc: Vincent Lau; Author\nSubject: Re: [igniterealtime/Openfire] Fix get role by nickname (#1179)\nYes, please.\nOp di 23 okt. 2018 18:48 schreef Vincent notifications@github.com:\n\nVery sorry about this mess. I forked the repo, checked out a branch with\n\"tags/v4.2.3\" (which I did my tests), created a local branch for the fix,\npushed my local branch to my forked repo, then I did a PR. Should I create\nmy local branch based on \"master\"?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/igniterealtime/Openfire/pull/1179#issuecomment-432326564,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEDoyo-MrTe_Qw1g6mKyDbqJSV1tyshHks5un0hygaJpZM4X0REw\n.\n\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/igniterealtime/Openfire/pull/1179#issuecomment-432359195, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AEzNf4pqUujnvA9oE6FXQx1xK5lpf5Y2ks5un1x0gaJpZM4X0REw.\nThis e-mail and any attached files are intended solely for the use of the individual or entity to which this mail is addressed and may contain information that is privileged, confidential and exempt from disclosure under applicable law. Any use, disclosure, copying or distribution of this e-mail or the attached files by anyone other than the intended recipient is strictly prohibited. If you have received this e-mail in error, please notify the sender by reply e-mail or collect call to (650) 388-4111 and delete this e-mail and attached files from your system. Thank you.\n. @akrherz I just submitted a new PR(#1186) which was based on the \"master\" branch.  This PR showed 1 file and 1 commit.  It seems better.  Now I understand the process.  Thanks.. ",
    "jadestorm": "=)  No upset here, she had a good run!. ",
    "ma1uta": "\nWoohoo! Awesome work, do you think this could get documented within the documentation found in our git repo?\n\nI can write the documentation of course but I don't know where :) If you point me I will do it.. > A couple of questions, I would test but I\u2019m offline ATM.\n\n1. Is an audit entry created when someone logs in using this mechanism? It should.\n\n\nI see. I will do it. Is this enough to log about this or there is an audit subsystem?\n\n2. If you create an entry with a token for a user that doesn\u2019t exist, does it work?\n\n\nNo :(. There are some checks that specified user is available or is admin. I will look how to fix this (for example make OneTimeToken inherits from the AuthToken and check this special class).\n\n3. If it does, do subsequent audit actions get correctly logged? Not sure if that requires a user, or just something that looks like a user id.\n\n\nUnfortunately, this user is need to pass the org.jivesoftware.openfire.admin.AdminManager#isUserAdmin(java.lang.String, boolean) and other similar checks.\n\nOne suggestion; Pre-populate the initial openfire.xml config file with empty values (and a comment as to their purpose), and rather than delete the XML values, set them to empty strings. That way it\u2019s far easier to set this up.\n\nOk, I will fix it.. Yeah, I will look how I can get rid of the specifying user and use a stub.. I excluded the specifying user and use the random username when passing with the one time token with clearing the token after first successful login.. ",
    "mnsuccess": "sorry, @guusdk  I understand now the topic !! \njust the simple tutorial who talk about how to start working on a new plugin !!  very basic plugin in Maven\nLet me work  on that.   Yeah, @fabiomontefuscolo, that's the difficulty  I had it too, but I'm working on it to find the better way!\nI see your approach isn't as bad . ",
    "fabiomontefuscolo": "@mnsuccess The simple tutorial may be not that simple. I had some difficulties to start a new plugin after maven. I didn't know where to place my code in order to have debug tools. Until now, I'm writing the java command by hand passing -DpluginDirs, -Dexample-plugin.classes, -Dexample-plugin.webRoot.\nAfter working on plugin https://gitlab.com/tikiwiki/openfire-oauthbearer-plugin, I think the steps in Gist below can be a starting point.\n* https://gist.github.com/fabiomontefuscolo/42b144cc5803051281fc9a1be3286bf7\nTell me if you find a comfortable way to do the same. . > Have you seen the section \u2018testing your changes\u2019 at https://github.com/igniterealtime/Openfire/blob/master/README.md ? It shows how to run Ooenfire in this sort of case.\nThe problem is not about the debugger, but having the plugin loaded. The use of -DpluginDirs breaks openfire.sh usage.. > I'm unsure exactly what you're basing the manual on. I'd suggest to create a manual that creates a stand-alone maven project that has only the plugin (as opposed to add a plugin to the openfire source project). We have recently moved all of the plugins to distinct source repositories. You could look at any of them as an example.\nAh ok, just the source code for plugin. Our challenge were having a functional development environment running, allowing us to run the plugin we are building.. ",
    "B-apt": "Some test on SMACK failed because of a timeout :\nSEVERE: EntityCapsTest.testEntityCaps (Normal) failed: java.util.concurrent.TimeoutException: Timeout waiting for condition to become true. Timeout was 60000 ms.\nIf you think it may be related to this change let me know.. Thank you !\nOne of the test which failed for me is inside SystemPropertyTest.java so setting the Locale in StringUtilsTest may not be of any effect there ?\nBut for the others yes it's a bit strange.... ",
    "J0s3f": "I think there should be a method in the core to get the external IP address and information about the reachability. Plugins could then query this information. \nSadly,  I am not familiar enough with Openfire to implement it easily. \nI just needed a fix for the Jingle plugin. \n. ",
    "maheshpec": "Hi Jonny,\nThis script is failing in mysql. I've opened up a discussion for this in the forum - https://community.igniterealtime.org/thread/55794. Can the messageID be auto generated since its essentially a identity column?\nThanks for commiting this change :+1: \nMahesh\n. ",
    "Ivan4537": "Corrected. ",
    "NielsKr": "Updated the release date and included issue number in changelog.. "
}