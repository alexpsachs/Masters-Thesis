{
    "vishr": "f8e621248e39267e818cd5c0ed246c1805753104\n. Fixed in #16 16\n. @mattn Looks like people can use http://gooseberrycreative.com/cmder for colors in windows, thanks for the PR though.\n. Gave a second thought, lets merge it.\n. Thank you!\n. The routes you specified are conflicting, in this case the first one gets picked. If you look up for /alice it will work. \nThis should be fixed at router level. I will work on that.\nPS: Will keep the issue open.\n. Tracked in #3 \n. Implemented in 9d44f49ccccc77605f8539a491c0b58bfff0d6e4\n. Thanks\n. This page is auto generated and it was fixed in cd9fc7fa9147c5364041d9bec59b9c45651b5cca\n. From the example, createUser handler doesn't accept param.\n. Can you paste the full code and how you invoke the endpoint?\n. go\ne.Get(\"/users/:id\", getUser)\ne.Post(\"/users/:name\", createUser)\nWith current implementation, above is registered as conflicting routes, so if you change :name to :id, it should work. Let me know your thoughts.\nConflicting routes are captured in #3\n. Based on this example https://golang.org/pkg/net/url/#example_URL\ngo\nc.Request.URL.Query().Get(\"user\")\n. Just realized, it won't work. I will work on fixing the implementation to accommodate this scenario.\n. Duplicate routes like below will be covered in #3 \ngo\ne.Get(\"users/:id\")\ne.Get(\"users/:id\")\ne.Get(\"users/:name\")\n. I tried your original code https://gist.github.com/e168fc8fe9be985901fd for all the registered routes. Output below:\n\u279c  tmp  curl -X GET localhost:8080/users\n{\"1\":{\"id\":\"1\",\"name\":\"Wreck-It Ralph\"}}\n\u279c  tmp  curl -X GET localhost:8080/users/1\n{\"id\":\"1\",\"name\":\"Wreck-It Ralph\"}\n\u279c  tmp  curl -X POST localhost:8080/users\n{\"id\":\"2\",\"name\":\"\"}\n\u279c  tmp  curl -X POST localhost:8080/users/Joe\n{\"id\":\"3\",\"name\":\"Joe\"}\nDid you update Echo to latest?\n. http://labstack.github.io/echo/guide/#installation\n. @tekknolagi I see in your curl command you are not sending Content-Type header, context.Bind currently only supports JSON. I am not sure but looks like JSON also needs to be in double quotes. Below is the working example\n``` go\npackage main\nimport (\n    \"net/http\"\n\"strconv\"\n\n\"github.com/labstack/echo\"\nmw \"github.com/labstack/echo/middleware\"\n\n)\ntype user struct {\n    ID   string json:\"id\"\n    Name string json:\"name\"\n}\nvar users map[string]user\nvar nextid int\nfunc init() {\n    users = map[string]user{\n        \"1\": user{\n            ID:   \"1\",\n            Name: \"Wreck-It Ralph\",\n        },\n    }\n    nextid = 2\n}\nfunc nextUserId() string {\n    var next = nextid\n    nextid++\n    return strconv.Itoa(next)\n}\nfunc createUser(c echo.Context) error {\n    u := new(user)\n    if err := c.Bind(u); err != nil {\n        return err\n    }\n    u.ID = nextUserId()\n    users[u.ID] = u\n    return c.JSON(http.StatusCreated, u)\n}\nfunc getUsers(c *echo.Context) {\n    c.JSON(http.StatusOK, users)\n}\nfunc getUser(c *echo.Context) {\n    c.JSON(http.StatusOK, users[c.P(0)])\n}\nfunc main() {\n    e := echo.New()\ne.Use(mw.Logger)\n\n//--------\n// Routes\n//--------\n\ne.Get(\"/users\", getUsers)\ne.Get(\"/users/:id\", getUser)\n\ne.Post(\"/users\", createUser)\ne.Post(\"/users/:name\", createUser)\n\n// Start server\ne.Run(\":8081\")\n\n}\n```\nsh\ncurl -X POST -H 'Content-Type: application/json' --data '{\"name\":\"maxwell123\"}' localhost:8081/users\n{\"id\":\"2\",\"name\":\"maxwell123\"}\n. Thanks for your feedback. I have this in plan but wanted more detailed discussion before implementing.\nIn the example below, we have a couple of choices /admin:\n- inherit all middleware from parent and execute in this order\n  mw1 > mw2 > mw3 > mw4 > h3\n- don't inherit any middleware from parent and executes in this order\n  mw4 > h3\n``` go\ne := echo.New()\ne.Use(mw1, mw2, mw3)\ne.Get(\"/users\", h1)\ne.Get(\"/users/:1\", h2)\n// Sub router\na := e.Sub(\"/admin\")\na.Use(mw4)\na.Get(\"\", h3)\n```\nLet me know your thoughts.\n. Thank you all for your feedback. I am almost ready with the implementation, just need few more inputs to close on this.\nI was thinking of e.Sub(inherit bool) which also solves for e.Group()\n. Now just e.Group servers both cases:\nhttps://github.com/labstack/echo/blob/master/echo.go#L95\n. Thanks\n. I would like to know some practical example of this case. Please point me to some frameworks API supporting it.\n. @saml, @patrickdappollonio, @fundon:  Let me know how it looks. Further, as I have a map of handler and url, do you think an API to return it will be helpful?\nhttps://github.com/labstack/echo/blob/master/echo_test.go#L237\n. go\nr.Add('GET', '/:c/:a', func(c *Context) {})\nAbove conflicts with other two routes. Router should panic in this case. Captured in #3.\n. As @prabirshrestha suggested, I have implemented this 92e7a6c72cf3ef7ca2322373b3ce22cf7d5a9b7d.\nThank you!\n. Conflicting routes work in order static > param > catch-all\n4c8797f09eea6744eaf1332894b35405baad9fe5\n. Thanks for the PR. Just follow https://github.com/golang/go/wiki/CodeReviewComments and we should be good to take changes.\n. Thank you!\n. I was planning to use c.Render(code int, i interface{}) to select one of JSON, XML ... based on content negotiation and default to html. Somehow I not able to understand how interface would help here as I think these bind/render are just helper functions. If someone wants to use there own renderer or binder its just so simple to write one, although we should have most of them.\nI also plan to do opposite in c.Bind, so you can directly bind from JSON, XML ... to boost speed by not looking into content-type.\n. 9d44f49ccccc77605f8539a491c0b58bfff0d6e4\n. In the above example it looks like e.RenderFunc is global, wouldn't it be a problem if I want to mix and match different renders?\n. RenderFunc will be be serving all kind of formats. Now I was thinking how do we identify JSON or XML in the RenderFunc. \n. Just thinking out loud: In c.Render(200, \"doc.md\", &model{}) or c.Render(200, \"doc.html\", &model{}) since we already know that its html or md, can't we just do c.Markdown() or c.HTML() without hitting the function?\n. So primarily this render function is for templates and html. Can you think of any other types? I think c.Render implies any kind of data be it JSON, XML, HTML or any other type. Do you think we shoujld call it TemplateFunc and c.Template? Let me know your thoughts and we can discuss it further.\n. Thanks for the detailed description and links. I will have a look at them and come up with an API to discuss further.\n. @prabirshrestha This is what I have thought so far. What do you think?\n``` go\ntype RenderFunc     func(io.Writer, string, interface{}) error\n// Default RenderFunc\nEcho.renderFunc: func(w io.Writer, name string, data interface{}) (err error) {\n    // Implement golang template/html and write it to w.\n    return\n}\n// Or provide your own RenderFunc?\nfunc (c *Context) Render(code int, name string, data interface{}) error {\n    c.Response.Header().Set(HeaderContentType, MIMEHTML+\"; charset=utf-8\")\n    c.Response.WriteHeader(code)\n    return c.echo.renderFunc(c.Response.ResponseWriter, name, data)\n}\n```\ngo\n// API call\nc.Render(200, \"user.tmpl\", &Users{\"Joe\"})\n. There is a function to set custom RenderFunc now 12bd049b0d624ab6cffc222dc43ab31b90e5db16\n. @prabirshrestha I am planning to change RenderFunc to Renderer interface{} it's more idiomatic to Go.\n``` go\ntype Renderer  interface {\n        Render(io.Writer, string, interface{})\n}\nfunc (c *Context) Render(code int, name string, data interface{}) error {\n    c.Response.Header().Set(HeaderContentType, MIMEHTML+\"; charset=utf-8\")\n    c.Response.WriteHeader(code)\n    return c.echo.renderer.Render(c.Response.ResponseWriter, name, data)\n}\n// API call\nc.Render(200, \"user.tmpl\", &Users{\"Joe\"})\n```\n. @prabirshrestha I have put it back - I completely missed on rendering errors. Verifying status code is nice but I then I think we should be doing it for all invalid codes - which is a lot of work, I believe, lets assume users are adults :wink: \nI looked into the URL you posted about handlers returning errors and I liked the idea. Now the default HandlerFunc returns error. I also added handlers which returns error to the list. 381fbae\n. This test doesn't do much, I am working on to add conflicting routes and priority order to get picked up - it's not done yet. I am not even sure if that would be possible without giving up on the performance of the router. #16\n. Deferred it until few more releases - it's getting complicated.\n. Sure, thanks.\n. @fundon This is an interesting point, I never noticed it. I will implement it at next opportunity. \n. @fundon Great!\nHas property gives us node information without looking up into findEdge function. Are you talking about improvement in the mentioned cases or in general - the current implementation of the router?\nAlso can you elaborate on what all features you have implemented so far in your router? \n. @fundon Excellent, I never realized it was just a step away. I would like to incorporate these changes into the router - I already did some. How do you compare your router to other nodejs routers? Have you done any comparison?\n. Cool, you should publish your results in nodejs forum, https://www.reddit.com/r/node etc.\n. Yup, I am gonna take some time and refactor the router based on our discussion - that will cover the cleanup and other goodies ;)\n. #16\n. I will look into it. Can you try the below routes?\n```\n/users/new\n/users/:id\nFind /users/nnn\n```\n. Wouldn't it go to new? as n comes first in the search?\n. @fundon I tried below code, it returns empty.\n``` js\nvar Router = require('trek-router');\nr = new Router()\n// static route\nr.add('GET', '/users/new', {});\n// param route\nr.add('GET', '/users/:id', {});\n// catch-all route\nr.add('GET', '/books/*', {});\nresult = r.find('GET', '/users/nnn')\nconsole.log(result)\n```\n. I need some time to fix it.\n. @fundon How have you implemented param name alias?\nThanks\n. Thanks @fundon\n. Do you mean something like below?\ngo\nrouter.Add(\"GET\", \"/users/:id, \"your handler\")\nrouter.Find(\"GET\", /users/:id) (h \"your handler\", p Params)\nWhat kind of handler are you trying to use?\n. Inactivity closing for now.\n. 1) You can do it using groups. There are two flavors of echo.Group - check it out in examples\n2) I am trying to understand your question\n. @mDomingues I would like you to explain me in detail as I am not able to understand what you are trying to do. Echo context is created for each request.\nDo you want to use echo.Context in external handlers? echo.Context is only available if you use echo.HandlerFunc but Echo lets you use external middleware in the request chain.\n. Closing for now.\n. It's working for me, can you check if you have the latest code? Earlier echo.Group implementation was like that.\n. No problem.\n. Current implementation doesn't support regex but you can declare a route like /members/* which will match anything starting with /members/\n. Can you provide more details?\n. I don't have a setup for Google App Engine. Don't you have to put http.Handle(\"/\", Server) inside init function?\n. In your code, it looks like you are not calling http.Handle. Try the code below, it works for me.\n``` go\npackage hello\nimport (\n    \"fmt\"\n    \"net/http\"\n\"github.com/labstack/echo\"\n\n)\nfunc init() {\n    e := echo.New()\n    e.Get(\"/\", handler)\n    e.Get(\"/hello\", handler)\n    http.Handle(\"/\", e)\n}\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprint(w, \"Hello, world!\")\n}\n```\n. Thanks for your feedback. It's already captured in #1. If you think any additional fields need to reset please comment in #1.\n. Thanks for your feedback. I will incorporate it, at the next opportunity.\n. I will be using GitHub releases to maintain the change-log.\n. Can you share some code, so I can reproduce the issue?\n. Thanks\n. It's a good point but I would prefer to change the default functions to also accept status code. Let me know your thoughts.\n. 1da930b54cd1c1ca424137b00daaaf6730c4bd31\n. @tanema It's a good example, I will put this in the guide. As it's a minor change I am gonna skip dealing will PR merge and commit my changes.\nThanks\n. dd9bc2de9c19a6cc0a2448b19c205afb616d07e9\n. Your Go is old, Echo requires 1.4.x.\n. You can look at this examples/web. It should be pretty simple you just need to set echo.Renderer(r Renderer) where Renderer is an interface defined  here https://github.com/labstack/echo/blob/master/echo.go#L42\n. @tve Adding path parameter in a group will have unpredictable results. Change the group path to /acct/a and it will work.\n. #49 \n. Did you try with the latest code? I tried to fix it. \n. I am aware of the problem and that's the reason issue is still open. Thanks for your input, I will work on it at next opportunity. \n. @CaptainCodeman Cool\n. fcbdaae62028bac97d00ce6c966ab603afa44072\n@CaptainCodeman Fixed routes you mentioned in the example. Custom not found handler test passes. FYI http://labstack.github.io/echo/guide/#customization, the custom not found handler is only called by router incase it doesn't find any matching path. I am still working on providing an option to strip trailing slash.\n. 18dcc4bcca34db7a302f73647c007153e611d7be\n. I got it covered with other changes, thanks.\n. @mholt Just to be more specific, do you want to know how you can use just the router?\n. @mholt Got it, thanks!\n. @tve Let me think over it, I never thought this way ;)\n. I tried to fix it but it opened a can of worms. I am gonna give it a shot over the weekend, just hang on.\n. c58ec742a98c83724811d0846db175dc9c905a50\n. 18dcc4bcca34db7a302f73647c007153e611d7be\n. @laicosly Looks like a bug when used with wildcard, it's the same even without using a group e.g. e.Get(\"/v1/:thing/*, Handle). Can you create a separate issue?\n. The project is pretty new and I haven't got time to write all the documentation, but I am working on it.\nYou can do something like below, with this all HTTP error handling is centralized http://labstack.github.io/echo/guide/#customization.\n``` go\npackage main\nimport (\n    \"errors\"\n    \"net/http\"\n\"github.com/labstack/echo\"\n\n)\nfunc main() {\n    e := echo.New()\n    e.Use(func(c echo.Context) echo.HTTPError {\n        // Handled by central HTTP error handler\n        return &echo.HTTPError{\n            Code:  401,\n            Error: errors.New(\"unauthorized\"),\n        }\n        // return nil\n    })\n    e.Get(\"/welcome\", welcome)\n    e.Run(\":4444\")\n}\nfunc welcome(c echo.Context) echo.HTTPError {\n    return c.String(http.StatusOK, \"Welcome!\")\n}\n``\n. Let me know if this helps.\n. I think providing aNewContextfunction should solve this?\n. Please verify b416efc71cf9d0fa15846a658164debcae456a0b \n. Check https://github.com/labstack/echo/blob/master/context_test.go#L26.WriteHeaderandWriteshould set status and size on response.\n. Great!\n. Wouldn't writing directly toResponse.Writerhelp? Regardless, I have a plan to put log level control as part of configuration, so you may benefit from it later.\n. Yes,c.Response.Writeris http.ResponseWriter so you should be able to do anything as you will do withhttp.HandlerFunc`. I am also open to accept Streaming API design/ideas and incorporate in the library.\nFrom this https://gobyexample.com/json example you can directly stream JSON to response.\n. @tmaiaroto Appreciate your feedback and interest. Can you provide me practical example where you would like to stream JSON response to the client, I just want to get an idea about streaming API.\n. Thank you for providing detailed information. May be for now you can live with the warning message and later I will put an option to disable logs. I will also work on designing a streaming API - I just want to make sure this decision takes care HTTP2 spec as well. I will keep this issue open for that.\n. ef6440051f3b073b37999da1ddfb40c76a556048\n. @tmaiaroto I have included an example to showcase streaming JSON. Let me know your views.\n```\npackage main\nimport (\n    \"net/http\"\n    \"time\"\n\"encoding/json\"\n\n\"github.com/labstack/echo\"\n\n)\ntype (\n    Geolocation struct {\n        Altitude  float64\n        Latitude  float64\n        Longitude float64\n    }\n)\nvar (\n    locations = []Geolocation{\n        {-97, 37.819929, -122.478255},\n        {1899, 39.096849, -120.032351},\n        {2619, 37.865101, -119.538329},\n        {42, 33.812092, -117.918974},\n        {15, 37.77493, -122.419416},\n    }\n)\nfunc main() {\n    e := echo.New()\n    e.Get(\"/stream\", func(c *echo.Context) error {\n        c.Response().Header().Set(echo.ContentType, echo.ApplicationJSON)\n        c.Response().WriteHeader(http.StatusOK)\n        for _, l := range locations {\n            if err := json.NewEncoder(c.Response()).Encode(l); err != nil {\n                return err\n            }\n            c.Response().Flush()\n            time.Sleep(1 * time.Second)\n        }\n        return nil\n    })\n    e.Run(\":1323\")\n}\n```\n. Thanks. All errors are captured via centralized HTTP error handler - which can be customized, its a nice pattern. We have introduced gitter chat, do you mind joining it?\nPS: Link for gitter can be found on README.\n. It's not a bug, support for fun(*echo.Context) was dropped lately to encourage use of echo.HandlerFunc which focuses on centralized HTTP error handling using echo.HTTPErrorHandler\n. If you get the latest, it should work. echo.HandlerFunc was refactored in https://github.com/labstack/echo/releases/tag/v0.0.12\n. This is the right way, by doing so you don't have to deal with errors as it's taken care by echo.HTTPErrorHandler (which can be customized) - all you do is return them as echo.*HTTPError. For concrete examples, you can explore examples directory in the repository.\n. 4159cef81e137bf85868a7729dcdcabcf158a0ee\n. a6260b39a071c5667e3bf7e09106c89ff7f57262\n. @furkanmustafa there is nothing special to handler a streaming response, you can look into this recipe https://echo.labstack.com/cookbook/streaming-response. @mDomingues I doubt it to be an issue with Echo, do you want to try with standard http package and see?\n. Thanks!\n. https://github.com/labstack/echo/pull/64\nac908b48136ab47dc334d12ebbe35268b9eacec7\n. It's a bug.\n. You can read more here http://blog.golang.org/error-handling-and-go. In short, I wanted to have a proper error type as convention instead of a generic error. The error object can still be set inside HTTPError struct and checked against in HTTPErrorHandler.\n. > but it's the right thing to do here because ServeHTTP is the only place that sees the value and uses its contents.\nThe above statement holds true in this case as well. I am not against anything it's just that I wanted returning HTTPError to be the convention. You can even just return &HTTPError{}.\n. @tve It's from the same blog post. As caller of the handlers is ServeHTTP which should only be understanding HTTPError gives it more meaning. Also, project is already using *HTTPError from past couple of weeks and changing now will definitely break many people's code.\n. @raphael If you look at the end of the post, the author mentions about returning appError in cases like this:\ngo\ntype appError struct {\n    Error   error\n    Message string\n    Code    int\n}\n\n(It's usually a mistake to pass back the concrete type of an error rather than error, for reasons discussed in the Go FAQ, but it's the right thing to do here because ServeHTTP is the only place that sees the value and uses its contents.)\nAnd make appHandler's ServeHTTP method display the appError's Message to the user with the correct HTTP status Code and log the full Error to the developer console:\n\nWith HTTPError in the signature handler signature it brings a good convention. For instance, if all handlers start sending any error (As they don't know about HTTPError) then the default centralized HTTP error handler won't be of much use, turning everything into 500.\nReturning HTTPError is very easy with default error, just wrap it like this &HTTPError{Error: err}\nNothing is set in stone, I am open for discussion.\n. How about if I add support for func (*echo.Context) error?\n. Fixed in https://github.com/labstack/echo/pull/76.\n. Can you share the code?\n. Please verify - https://github.com/labstack/echo/pull/70\nPS: I have a plan to add web socket to the API in future.\n. @mschewe FYI, I have added support for WebSocket in the latest version, here is a small example:\n``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/middleware\"\n    \"io\"\n)\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.Logger())\n    e.WebSocket(\"/ws/:token\", func(c *echo.Context) error {\n        io.Copy(c.Socket(), c.Socket())\n        return nil\n    })\n    e.Run(\":1323\")\n}\n```\nYou can also access path parameters from the context.\n. Yes, soon.\n. Probably in a month's time. As of now, most of the APIs are stable and should not change but there could be some experimental features which needs more thought might get dropped or changed.\n. Absolutely!\n. @jpillora As we have decided to keep the framework minimal and flexible, I am open for suggestions that would help to generate docs using any library or framework - not tied to any!, it might imply that we will be just providing interfaces with some recipe code.\n. There was a recent change to factor in options for the middleware. It should work if you change e.Use(middleware.Recover) to e.Use(middleware.Recover())\n. @markbates We already have a data structure which holds all the routes. It is used by Echo.URI API. I will leverage from your code and expose an API. Let me know your thoughts.\n. Are you using echo as router or web framework? I am having little difficulty understanding your situation. If you can explain it with some examples, it will help.\nEcho.Group was separated from Echo to limit API. It should have minimum impact to most of the users.\n. Ben, to me it's a very specific case, I will just create an interface myself and use it.\n. I will look into adding options to various APIs including Echo.Static.\nGroup was recently separated from Echo. Adding more APIs to Group is still open and suggestions are welcome. \n. To me, exposing Static from Group made for sense 4159cef81e137bf85868a7729dcdcabcf158a0ee. May be later, if required, we will add options to static content APIs.\n. 4159cef81e137bf85868a7729dcdcabcf158a0ee\nEcho.Static is more conventional but I have exposed ServeDir which is called by Static\n. cd111b826ce1df29dd0ab1f8538eaa92c447a053\n. @CaptainCodeman Thanks, do you mind joining gitter chat for future communication?\n. If you call Group with middleware it overwrites parent middleware, so in this case use Group.Use.\n. Echo still shines :+1: can someone give Echo a shoutout?\n. Will make it disabled by default.\n. @ernado Thanks for your suggestions, I will consider them while making the change. In general, I am not very convinced about not allowing HTTP2 over TCP, there is already a PR pending but looks like it won't make it to the library. I would like to see HTTP2 being used for internal services where TLS is not needed.\nFor reference:\nhttps://github.com/bradfitz/http2/issues/59\nhttps://github.com/bradfitz/http2/pull/48\n. Perfect, will do the changes at next opportunity.\n. @ernado, @alehano I would propose the following:\n- Disable http2 by default\n- If enabled\n  - For TLS use it\n  - For TCP panic/error until http2 adds support for h2c\n. 07c0cf21f00a1434aa4d2336e677a4fb07f8ef99\n. 0edb31b3bd14519db22f10beb0fc2c7ffcf43877\n. @axdg Your understanding is correct. I want to minimize external dependency as much as possible and turn them into recipes aka examples.\n. This is invalid now.\n. All errors are collected and processed by centralized HTTP error handler - which can be customized, and definitely returning echo.HTTPError makes more sense.\nYou can read more here http://labstack.github.io/echo/guide/#error-handling. \n. @alehano I don't see this behavior after I fixed #95, can you confirm?\n. Thank you for your contribution. I have a plan to create a section in README.md and put all echo extensions created by contributors :+1:  I will keep this issue open for it.\nThere are some built-in generic middleware we have written\nhttp://labstack.github.io/echo/guide/#middleware\nhttps://github.com/labstack/echo/tree/master/middleware\nContrib\n- https://godoc.org/fknsrs.biz/p/echo-logrus\n- https://github.com/rightscale/go_middleware\n. Looks like version mismatch, can you try to upgrade the library? \n. Can you check how is it different then examples/website? Exposing Index API gives us flexibility to use any file name and location. Echo internally uses http.FileServer to server all static files which most likely behaves like apache and similar servers. We intentionally disabled directory listing in Echo to prevent unnecessary listing of files incase index file is not present, hence this behavior. Let me know your thoughts.\n. I got your point. I will modify API to return index.html incase directory requested.\n. You can reopen, I will pick the test cases and folder.\n. Fixed.\n. That's correct, I shouldn't go beyond index. I will fix it. How about exposing API to return map of param name > value or differently slice of param values and param names?\n. @dre1080 @Taik Before implementing it,  we would like to see some sample use cases. It will help us to write it well.\n. @ClanStyles Can you show us the expected API design?\n. Thanks!\n. Merged 356909c49e70f8ff9854e90baa1a819994544d02\nThank you!\n. I just got 1 ns diff - not worth it.\nsh\nPASS\nBenchmarkSwitch 10000000           199 ns/op\nBenchmarkIf 10000000           200 ns/op\necho.wrapMiddleware and echo.wrapHandler uses type switch and they are not on critical path - just run once.\n. Cool!\n. @syntaqx What if you return error from handler?\n. You can create another handler h2 which returns error and use it for that test.\n. Sure, I will have a look at it.\n. Just the time, it will get merged.\n. 50fb7e00505bb2b05be24587d847b5c88ed57737\n. Gracias :smiley: \n. Fixed.. Fixed in #214\n. @mertenvg Would it be a hard dependency on grace package? We want to keep Echo as minimal as possible without losing much features and still provide APIs to plug-in third party packages, thats the reason why functions like Echo.SetBinder / Echo.SetHTTPErrorHandler exists.\nRefactoring Echo.Run might have a breaking change, we can discuss about it.\nUpdate: If hard dependency can't be avoided, then we might have use use grace as pluggable package with generic options, so if we have to replace it in future, it's easy.\nBottom line: We should try to avoid external packages as much as possible and refactor Echo's API so that we can use them easily and possible showcase them using examples / recipes.\n. Sure, go ahead.\n. 07c0cf21f00a1434aa4d2336e677a4fb07f8ef99\n. @mertenvg: If you can create examples for graceful shutdown and send me PR, it would be great!\n. Can you show an example of using it with grace package?\n. Can't we simple do like below with the existing code? We can use any graceful package.\n``` go\npackage main\nimport (\n    \"net/http\"\n\"github.com/facebookgo/grace/gracehttp\"\n\"github.com/labstack/echo\"\n\n)\nfunc main() {\n    e := echo.New()\n    gracehttp.Serve(\n        &http.Server{Addr: \":1323\", Handler: e},\n    )\n}\n```\n. > One would lose the benefit of other server configuration helpers built into echo when rolling your own http.Server.\nCan you give me an example here?\nFor HTTP2, I am planning to make it disabled by default.\nUpdate: I see Server as a shorthand for &http.Server{Addr: \":1323\", Handler: e} and if you have to use TLS with grace, you can't escape constructing your own *http.Server. I am really thinking the benefit of exposing Server API.\n. HTTP2 will eventually be a part of standard library so that option will go anyways. To me the most flexible way to is to let people construct http.Server with echo as handler for such cases. But I definitely accept it as shorthand, which is nice. I don't understand why grace doesn't expose serverTLS as this one does https://github.com/tylerb/graceful\n. 07c0cf21f00a1434aa4d2336e677a4fb07f8ef99\n. 33eb3fb67b5ef647d90bfc7bcc7e265f66858284\n. @mertenvg I have limited knowledge here, can you provide some examples or how is it done in other libraries or servers? \n. @axdg Thank you! It's probably better to keep it outside the router.\n. Can you show us some code you are testing?\n. May be something like below\ngo\ne := New()\nreq, _ := http.NewRequest(GET, \"/\", nil)\nrec := httptest.NewRecorder()\nec := NewContext(req, NewResponse(rec), e)\nc := context.Context{} // Don't know much here...\nHandleGetAll(c, ec)\n// Check for rec.Code or rec.Body\nFor details, have a look at echo_test.go and router_test.go. \nI am curious to know how you are using echo router, as these handlers won't be acceptable.\n. Eventually, the examples folder will be be moved to recipes. I have already started the process. You can work on sub-domain and jwt, and send me a PR. I was just thinking on calling it virtual hosts instead of sub-domain, what do you think? Feel free to update any other markdown in the website, adding more information is always better. Currently, the markdown I wrote for recipes doesn't have much text.\n. FYI, we want to have self-created content as much as possible ;). \nPS: There is a gitter chat on README.md for discussion where you can also send a private message.\n. Thank you!\n. 35d018c671c30559348332400c63344394488976\n. @axdg Lets call it jwt-auth otherwise it looks good.\n. @axdg Can you add entry in mkdocs.yml, that will get it to the menu. Also, you can cancel gh-pages request - that's auto generated using mkdocs.\n. Merged 1757d1f8c7e4c53faa97195e8cdc736fc3c78ea1\nThank you guys!\n. Let's fix the comments and golint issues first.\n. @syntaqx Can you change the relevant markdown?\n. Never mind, I got it.\n. @CaptainCodeman Yes, we are moving to recipes. I would recommend you present a concise GAE example covering key features only.\n. Please verify.\n. @fundon Thanks, I have been translating Chinese using google translator. @panjunjie I need a bit of more context and example.\n. @panjunjie API Context.Render is used for rendering templates html. You can have a look at examples/website\n. Template rendering - http://echo.labstack.com/guide/#response\n. IC, it would be something like Context.NoContent returning nil error always. PR is welcomed.\n. Handler should be:\ngo\nfunc ans(c *echo.Context) error {\n     return c.String(200, \"hoho\")\n}\n. The changes were made to fix #135.\n. We should not call bind when there is no body :smile: but yea, it should be handled gracefully. I will take care of it.\n. I think the default behavior is correct, it's the error returned, which should be handled by handler or more idiomatically by centralized http error handler.\n. It should work in both cases, can you show some code to reproduce the issue?\n. ace58439832b65e3b49561feaf0a9694310b1832\n. Changes should be made in the markdown - website/docs\n. Below code gets me form parameter correctly. Do you want to try it?\n``` go\npackage main\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\n\n)\nfunc main() {\n    e := echo.New()\n    e.Post(\"/users\", func(c *echo.Context) error {\n        name := c.Form(\"name\")\n        return c.String(http.StatusOK, name)\n    })\n    e.Run(\":1323\")\n}\n```\nsh\n\u276f curl -d \"name=joe\" http://localhost:1323/hello\njoe\n. I think you need to explicitly parse the form, which will fill Request.Form. I would recommend to write a validator function because anyways you would need to validate all the form fields? You can also look at http://www.gorillatoolkit.org/pkg/schema which takes care of decoding form into struct.\n. I think codec for form is out of scope for now. You can easily call Request.ParseMultipartForm which populates Request.Form.\n. Can you provide some context and use case?\n. @lestrrat If APIs are more generic, we can definitely include them in Context. I also wonder how interface would help without changes to it.\n. @lestrrat Interesting, quite similar to https://godoc.org/golang.org/x/net/context. Just wondering about the impact of this change ;) otherwise it's a good idea.\n. @lestrrat Working on this branch https://github.com/labstack/echo/tree/context-as-interface\n. @lestrrat How about exposing an API in Context to set extension object? or simply use Context.Set to save custom context? Custom.Set lets you store interface{}, should be good.\n. @rbucker I would like to get some idea about the requirements, expected API and some references.\n. @rbucker Have you looked into these projects\n- https://github.com/jteeuwen/go-bindata\n- https://github.com/GeertJohan/go.rice\nThere is also a pull request open https://github.com/labstack/echo/pull/208/files\n. 5cd194b6b073541a5ab6c80d7ba8162be373d007\n. https://github.com/labstack/echo/releases/tag/v2.0.0-beta.1\n. Echo's router is based on HTTP method and path combination which it uses to lookup handler. So using just the path won't be possible.\n. @CaptainCodeman: Let me think over it.\n. @dzaytsev\n- Let's figure out what's the appropriate HTTP code to return\n- Send me a PR\n. @dzaytsev Just realized, this is already handled and returned as 404 but I need to take care of index out of bound.\n. 4dcb57d42aff8f320f04e9bac038e265a7719fa8\n. Above code should return your msg. Can you try with curl?\n. Closed 523ac4a\n. I added Sprintf like functionality for connivence but if it's getting error prone we can remove it.\n. @peppage This has been fixed by removing formatter from Context#HTML() & Context#String(). Please get the latest and verify.\n. @xxxcat For performance reasons, we haven't used ToLower the right way is to to create a middleware which modifies the Content-Type header to lowercase. Something like below (not tested):\ngo\nfunc LowerContentType() echo.HandlerFunc {\n    return func(c *echo.Context) error {\n        ct := strings.ToLower(c.Request().Header.Get(ContentType))\n        c.Request().Header.Set(echo.ContentType, strings.ToLower(ct))\n        return nil\n    }\n}\n. @xxxcat Did you try the latest? You should not have that problem anymore. Below is the code snippet:\nstrings.HasPrefix(\"application/json; charset=UTF-8\", ApplicationJSON)\nwhere ApplicationJSON = \"application/json\"\n. I don't think you can decode a string with no key into go struct. Looking into http://stackoverflow.com/a/7487892/197473, using just a string as JSON payload is not valid. You can send your request as text/plain and read request body into a string, like below:\ngo\nif b, err := ioutil.ReadAll(c.Request().Body); err == nil {\n  return string(b)\n}\n. Merged 96e5761 \n. Sure\n. 9257875cb7db7b0d1ca21fb8fe2430bfe15d4486\n. Can you provide an example for my understanding?\n. Sure, don't forget to add a test case.\n. @willf Recipe is written in markdown found in website/docs/recipes - it's easy ;). I will do the changes.\n. Merged 9257875cb7db7b0d1ca21fb8fe2430bfe15d4486\n. I think it's a general problem using templates in Go. I oam open to make changes to the API or introduce new if that helps in someway.\n. You can have a look at this package https://github.com/GeertJohan/go.rice\n. @mattn There were some issues in GAE code, you can have a look here https://github.com/labstack/echo/issues/84, moreover I wanted to disable colored log for windows by default and if someone wants them they can use go-colorable and enable ColoredLog in their own code.\n. Fixed in 4f996419e122258e55923401a01b4b7a9b472e9c\n. @danqing Do you know when Body could be nil? \n. From https://github.com/golang/go/blob/master/src/net/http/request.go#L135\ngo\n// For server requests the Request Body is always non-nil\n// but will return EOF immediately when no body is present.\n// The Server will close the request body. The ServeHTTP\n// Handler does not need to.\nBody io.ReadCloser\n. Echo uses global log object, you can set it to write to a file http://stackoverflow.com/questions/19965795/go-golang-write-log-to-file. In future version, Echo will have API to set logger.\n. If any of the response functions including Context.Render returns error, the framework doesn't send http error as the response header is already written. The http error handler do get called but currently we are not logging the message - probably we will! Let me know your thoughts.\n. IMHO, it will be an overkill to wrap cookie read & write functions via echo.Context. They are so simple, doesn't even need processing or a trick.\nSet cookie http.SetCookie(c.Response(), cookie)\nGet cookie username, _ := c.Request().Cookie(\"username\")\n. context.Request() is not standard http request object. Ideally an API should be exposed to fetch cookies but they don't exist right and are in plan. I will re-open this issue for tracking.\nFor now, if you are using standard http server, you can get standard request and response objects and use them.\nSee https://github.com/labstack/echo/issues/406\n. Using group\ngo\n    static := e.Group(\"/static\", mw.Recover()) // Passing middleware (any) overrides parent middleware.\n    static.Static(\"/\", \"public\")\n. - I do see error getting caught by http error handler and with the latest code its printing the log message too.\n- To set response header or similar code, you should to call it before h(c). As it's recursive chain, your code gets executed after sending the response.\n. Does it work as expected?\n. I think you should report it to the author.\n. @axdg You will understand if you look into implementation of binary.BigEndian.Uint32([]byte(method)). I am just saving few keystrokes. It's same for HEAD as well.\n. @konjoot The issue is still open, you can read and discuss more about it here #146.\n. If you skip calling c.Form the form is not parsed and File is nil. Either use c.Form or parse the form explicitly using req.ParseMultipartForm. Here is the recipe http://echo.labstack.com/recipes/file-upload/\n. With the code below, I got login handler for /auth/login\n``` go\npackage main\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\nmw \"github.com/labstack/echo/middleware\"\n\n)\nfunc main() {\n    e := echo.New()\n    e.Use(mw.Logger())\n    e.Use(mw.Recover())\nauth := e.Group(\"/auth\")\nauth.Use(func(c *echo.Context) error {\n    if c.Get(\"User\") != nil {\n        return echo.NewHTTPError(http.StatusForbidden, \"Don't need User\")\n    }\n    return nil\n})\nauth.Get(\"/login\", func(c *echo.Context) error {\n    return c.String(http.StatusOK, \"login\")\n})\n\nuser := e.Group(\"/user\")\nuser.Use(func(c *echo.Context) error {\n    if c.Get(\"User\") == nil {\n        return echo.NewHTTPError(http.StatusUnauthorized, \"Need User\")\n    }\n    return nil\n})\nuser.Get(\"/logout\", func(c *echo.Context) error {\n    return c.String(http.StatusOK, \"logout\")\n})\n\ne.Run(\":1323\")\n\n}\n```\n. @dre1080 It will help if you can post some code to reproduce and debug further.\n. @laicosly Can you provide a working code with comments? It helps us to debug faster.\n. Guys, I have been busy, will get to it soon.\n. @hasty Thanks for the explanation, the PR is merged - I just flipped the condition. @laicosly @dre1080 please verify.\n. @raphaeljlps Don't you think bad request is still valid? Can we keep it and still make it working?\n. Can you check if this works?\n. That was it. I have changed in master. You can get the latest.\n. We don't have a helper function to return query array. As per Go's doc\n\nTo access multiple values, use the map directly.\n\nSo you can get you do something like below:\ngo\nq := c.request.URL.Query() // Parse only once\nvalues := q[\"key\"]\n. e.Any doesn't look idiomatic to me. I would go with a wrapper to cover all the methods.\n. Reconsidering.\n. Few choices below:\ne.Any(... method string ...) or e.All(... method string ...) // For all methods\ne.Many(... methods []string ...) or e.Some(... methods []string ...) // For some methods\ne.Handle(... methods ...string ...) Passing methods will register handler for those HTTP methods, skipping it will register for all methods.\n. Please verify.\n. @se77en Can you explain your problem?\n. You should read about HTTP status codes.\n. @hvnsweeting Thanks for the fix, I know documentation is sparse. Any help on that front is much appreciated.\n. It's cool but the API won't work on windows, will it? potentially a candidate for a recipe.\n. StripTrailingSlash middleware activates during runtime, it strips trailing slash so it can match to your handler which is registered for a path without trailing slash. For example, request GET /hello/ should match the following route:\ngo\ne.Get(\"/hello\", Handler)\nIsn't it working like this? \n. Interesting, nobody uses it :smile:. It should be exposed as an option.\n. Fixed in 507c69ec80e6a6d8417231b4db93f7d9554e09cc\n. Can't you do that in a middleware? By default, if no route is matched, echo calls HTTPErrorHandler. So in your case this should be something similar to BasicAuth middleware.\n. Thx\n. Inactive, closing.. This is merged, thank you!\n. @axdg I haven't checked it, it was marked as a bug based on comments.\n. Haven't heard back, closing for now.\n. Nice!\n. Nice!, can you put a one liner godoc?\n. It's ok for now.\nSent from my iPhone\n\nOn Sep 13, 2015, at 4:12 PM, Chase Hutchins notifications@github.com wrote:\nStill want me to add the comment? Given that it's already merged, not sure if you want me to put another PR for it.\n\u2014\nReply to this email directly or view it on GitHub.\n. Not sure if I have completely understood your problem, you might want to have a look into these APIs\n\nEcho.URI\nEcho.Routes\n. Okay, I don't think it would be hard to expose it through an API, but before we start considering, I would like you to create a proposal mentioning the use cases and API design.\ncc @syntaqx, @axdg \n. @caarlos0 You also need to write a markdown about the example and probably it's better to showcase other available options too.\n. They live here => https://github.com/labstack/echo/tree/master/website/content/recipes\n. Few points:\nLet's call the recipe as embed-resources.md with title as Embed Resourses and then create recipe for each go-rice and go-bindata. Let me know your thoughts.\n. I think we should be okay if instructions are provided. You can look at graceful shutdown example for reference .\n. Thank for reporting, please verify the fix.\n. Closed #214\n. @Retired Can you try with this version eef157496916d8b21441d66b70bc69f0d2ef8117?\n. This is an interesting case, somehow I always thought it got covered :wink: \n. @Retired I tried on earlier versions and the problem persists, it's a bug. \n. @craftgear It's hard to explain here but it's mainly due to tree traversal and priority for param and match-any nodes. I have made a fix and I need help in verifying it. \n/cc @Retired @danqing @mickgardner \n. I have a similar code which works, can you try this?\n``` go\npackage main\nimport \"github.com/labstack/echo\"\nfunc main() {\n    e := echo.New()\n    e.Get(\"/\", func(c echo.Context) error {\n        return c.String(200, \"home\")\n    })\n    e.Get(\"/sessions\", func(c echo.Context) error {\n        return c.String(200, \"sessions\")\n    })\n    e.Static(\"/js/\", \"public/js\")\n    // e.Get(\"/\", func(c echo.Context) error {\n    //  return c.String(200, \"/*\")\n    // })\n    e.Run(\":8888\")\n}\n```\n. @jeromenerf I am interested in debugging this further, can you frame a setup to reproduce this, may be upload files somewhere?\n. @jeromenerf Thanks, will look into it.\n. Reopening as the fix introduced new issues.\n. @jeromenerf Please verify now\n. I haven't understood the issue but the right way to use templates can be found in this example or the project guide\n. I just tested with the following code and it is returning 500.\ngo\nfunc welcome(c *echo.Context) error {\n    return c.Render(500, \"welcome.html\", nil)\n}\nAm I missing something?\n. Well, in second code snippet it will always be 200, because that's what you are setting.\n. @axdg I will come back to this post fixing some critical bugs and documentation.\n. This is fixed in #228 \n. @axdg Is this still valid or should we close it?\n. Closing for now.\n. I have come across this earlier. It is true with any Context  response rendering function. The error do get caught in HTTPErrorHandler but the response is overridden by user's call. I will look into this later in the day.\n. Can you provide some code explaining actual and expected behavior?\n. Tried the following code and looks like it works as expected:\n``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    mw \"github.com/labstack/echo/middleware\"\n    \"github.com/rs/cors\"\n)\nfunc main() {\n    router := echo.New()\n    router.Use(mw.Logger())\nrga := router.Group(\"/auth\")\nrgo := router.Group(\"/others\")\n\ncorsMw := cors.New(cors.Options{\n    AllowedOrigins: []string{\"*\"},\n}).Handler\nrga.Use(corsMw)\n\nrga.Get(\"\", func(c *echo.Context) error {\n    return c.String(200, \"/auth\")\n})\n\nrgo.Get(\"\", func(c *echo.Context) error {\n    return c.String(200, \"/others\")\n})\n\nrouter.Run(\":1323\")\n\n}\n```\n/auth\n``` sh\n\u276f curl -D - -H 'Origin: http://foo.com' http://localhost:1323/auth\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: http://foo.com\nContent-Type: text/plain\nVary: Origin\nDate: Mon, 05 Oct 2015 16:29:18 GMT\nContent-Length: 5\n/auth%\n```\n/others\n``` sh\n\u276f curl -D - -H 'Origin: http://foo.com' http://localhost:1323/others\nHTTP/1.1 200 OK\nContent-Type: text/plain\nDate: Mon, 05 Oct 2015 16:30:41 GMT\nContent-Length: 7\n/others%\n```\n. @mandeepbrar As it goes through a critical path, this issue is being fixed in a different branch - https://github.com/labstack/echo/tree/issue-228, once stabilizes I will merge it back to the master. This fix will also addresses #204 and #223. All tests are passing. Can you trying to pull from this branch and test?\n. Can you try now?\n. I am using the following code to test, can you double check? (I have a new commit, which should not have impacted this logic, its just a temporary removal of 405 handling)\n``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    mw \"github.com/labstack/echo/middleware\"\n    \"github.com/rs/cors\"\n)\nfunc main() {\n    router := echo.New()\n    router.Use(mw.Logger())\nrga := router.Group(\"/auth\")\nrgo := router.Group(\"/others\")\n\nrga.Use(cors.Default().Handler)\n// router.Use(cors.Default().Handler)\n\nrga.Get(\"\", func(c *echo.Context) error {\n    return c.String(200, \"/auth\")\n})\n\nrgo.Get(\"\", func(c *echo.Context) error {\n    return c.String(200, \"/others\")\n})\n\nrouter.Run(\":1323\")\n\n}\n``\n. This is merged into master, do we sitl have this issue?\n. Closing as there is no response from the OP.\n. IC, if you move uprouter.Use(cors.Default().Handler)` next to logger middleware it should work.\n. @Arch-Mage Can you check if this works in master?. I just played around with redirect codes and found the following information:\n307 was introduced to allow servers to make it clear to the user agent that a method change should not be made by the client when following the Location response header.\nhttp://stackoverflow.com/a/2068504/197473\nSo you in this case you should use 301 or 302?\n. @mertenvg can you look into this?\n. Thanks guys.\n@mertenvg HTTP2 is enabled by default as eventually it will reside in the standard Go library. I will accept the recipe fix for now and once HTTP2 is part of Go library, we will reiterate on this.\n. Fixed in #233\n. /cc @axdg @mertenvg @willf\nc60f2072795c966b823601a78df46732aff5c2b2\n560d72496c069a5f1d361476a23cce4fdd41ea8c\n. /cc @CaptainCodeman\n. Not a question, I just wanted to share that recipes on the website/docs now have maintainers information - so please maintain it :smile: \nhttp://labstack.com/echo\n. Thanks!\n. Just a bit busy, I will get back to it soon.\n. Thank you.\n. You should use c.NoContent(204)\n. For reference, you should look at this recipe http://labstack.com/echo/recipes/subdomains and do a http.Redirect when host is www.example.com. \n. Can you post some code to debug?\n. There is already a helper to decode body into JSON. Have a look at Context#Bind and this http://labstack.com/echo/recipes/crud\n. @mtojek Sure, I have a few open PR, will review over the weekend.\n. As @jbub mentioned, I would prefer it to named as JSONIndent and leave JSON as is. Now xml codec also has a similar method, are we doing it too? More importantly, do we really need to put these into the API - just asking?\n. @mtojek Let's name it JSONIndent with full parameters of MarshalIndent. If you are open, we can also do the same for xml.\n. It would be helpful if you can provide some code for debugging.\n. Closing to mention in #269.\n. Closing to mention in  #269.\n. Can you provide some code for debugging?\n. In current implementation of router it assumes everything is ascii and that's the reason for this behavior. Before I start investigating further, can you double check how it works in popular web frameworks like django, rails etc? \n. That's good, but I still have a doubt as Request.URL.Path gets the decoded version, which I am using in the router, can do some more testing?\n. Adding and testing more Unicode routes, probably in a loop. You can check router_test.go\n. Can't you set log.SetOutput()?\n. It is global, yes. I have a plan to expose an API to set custom logger, something like e.SetLogger(logger io.Writer) This should fix this issue, let me know otherwise.\n. Cool, for now may be you can live with log.SetOutput and once API is thought through and ready, switch over.\nPS: I will keep this issue open.\n. @Puffton Can you provide me some code which I can directly run to reproduce the bug?\n. Is your writer static or unique for each request/response?\n. Don't know if you are still interested but there is new API Echo#Hook to alter request/response objects.\n. @PierreZ HTTP2 is enabled by default, earlier there was an option to disable it but it's not there anymore. Echo is not doing anything special but enabling it. I think from Go 1.6 it will be enabled by default.\n. Below code works for me, please re-open the issue, if needed.\n``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/prometheus/client_golang/prometheus\"\n)\nfunc main() {\n    e := echo.New()\n    e.Get(\"/metrics\", prometheus.Handler())\n    e.Run(\":8080\")\n}\n```\n. You can use groups and separate middleware. Look into documentation and test files.\n. @diiimo2k11 I just tried example below, hope it helps.\n``` go\npackage main\nimport (\n    \"log\"\n\"github.com/gorilla/websocket\"\n\"github.com/labstack/echo\"\n\n)\nvar (\n    upgrader = websocket.Upgrader{}\n)\nfunc main() {\n    e := echo.New()\n    e.Get(\"/ws\", func(c *echo.Context) error {\n        conn, err := upgrader.Upgrade(c.Response(), c.Request(), nil)\n        if err != nil {\n            return err\n        }\n        defer conn.Close()\n        for {\n            mt, message, err := conn.ReadMessage()\n            if err != nil {\n                return err\n            }\n            log.Printf(\"recv: %s\", message)\n            err = conn.WriteMessage(mt, message)\n            if err != nil {\n                return err\n            }\n        }\n    })\n    e.Run(\":1323\")\n}\n``\n. Closing to mention in #269\n. Cool, closing now.\n. @let4be I have updated WebSocket recipe https://echo.labstack.com/recipes/websocket, hope it helps.\n. Tracking in https://github.com/labstack/echox/issues/24. There is an API for thatContext#Pathhttp://labstack.com/echo/guide/request\nhttps://github.com/labstack/echo/blob/master/context.go#L63\n. You an look at https://github.com/labstack/echo/blob/master/recipes/crud/server.go#L27\n. Each request runs in a separate goroutine so unless you introduce goroutines within, there shouldn't be any problem. Further the underlying map get reset for every new request.\n. In that case, you must acquire a lock while accessingContext#SetandContext#GetAPIs.\n. For an incoming request, async.Mutexshould be created and used to access the storage inContext. This lock could be part ofContextitself, stored ingolang.org/x/net/context`. For reference: http://labstack.com/echo/guide/request\nUpdate: You can also store your own synchronized map in net/Context.\n. net/Context was added recently. The only difference now is that internal storage for echo.Context is a map, so you can store multiple key/val pair but with net/Context, by default its just one key val, although val can be a map again :smile:. There is another solution as I mentioned earlier, have a synchronized map and store it in net.Context.\n. @hhsnopek I haven't understood the problem, it would be helpful to provide some details.\n. @hexadecy The CORS middleware is almost ready. I will be checking in soon.\n. In what case I would call WriteHeader() after Write? For me this is a program error.\n. It is in.\n. Just included it.\n. You have a couple of options with latest version:\n\nSet a custom listener Echo#Listener, so you know the address\nStart server with a go routine and get the address from Echo#Listener.Addr()\n\nLMK if you have any questions.. > And hot code reloading for Go already implemented too. \nYou meant as some library?\n. @olebedev Thanks for the links, I definitely don't want to repeat what is already done. Probably it's a candidate for recipe/example.\n. Tracking in https://github.com/labstack/echox/issues/23. @joeybloggs It's mostly for convenience and even I am not sure how Go handles it.\n. @aboukirev So, you are the one :smile:. Now I am considering #146 as @joeybloggs mentioned.\n. Closing as invalid.\n. You should have a look at Context#File API.\n. Probably you don't have the latest version. \n. It is suppose to work. Just be careful about the path, with absolute path - no problem but the relative path should be from the location you are running your binary.\n. Closing now.\n. Please explain me the complete story.\n. Can you remove the Logger() middleware?\n. This is getting generated from the default HTTP error handler https://github.com/labstack/echo/blob/master/echo.go#L200.\nYou can use Echo#SetHTTPErrorHandler() API to set a custom error handler.\n. The handler is matched entirely based on request method and path. This is a very specific case and I would consider it to be handled outside of the framework.\n. You set  Request.URL.Path to any value and it will be parsed by the router.\n. As those fields are not exported, you have to rely on Router#Find() to fill up the path parameters. For reference https://github.com/labstack/echo/blob/master/context_test.go#L234. In version 2, Context will be an interface - making things quite easy.\n. Looks like a bug. For now, you can use Context.P and fetch parameter by index.\n. This should have been fixed. Please re-open if not.\n. @valyala It's in the roadmap for v2. The idea is to make using of interfaces and support multiple HTTP engine.\n. @valyala The implementation is in place with v2 https://github.com/labstack/echo/releases/tag/v2.0.0-apha.2. I will be releasing v2 soon.\n. Echo v2 alpha released https://github.com/labstack/echo/releases/tag/2.0.0-alpha\n. @AlekSi In reference to your comment, would you like to suggest name for the functions? And how do we bring compile time check on interfaces?\n. I went through that route but now I don't remember exactly what was the problem. If you want the real objects for request or response, you can use request.Object() API and typecast it.\n. @CaptainCodeman I agree with the connivence that v1 has with wrapping handler and middleware. Let me see what could be done. \n. @CaptainCodeman Can you provide some examples to support your case?\n. @CaptainCodeman  Let me know how this af4c525 looks!\n. @thedrow Benchmarks are for router, which remains unchanged. If we improve router performance, definitely.\n. API for wrapping handlers\necho.WrapStandardHandler\necho.WrapFastHTTPHandler\n. I reverted earlier commit due to cyclic dependency otherwise there wasn't any problem. The cycle dependency comes in echo test package as I use standard implementation for it. Any ideas to overcome it?\n. @fat I assume by regular functions you meant http.Handler or http.HandlerFunc. This has been done to accommodate fasthttp server in addition to standard http server via interfaces. There are utility functions available to convert standard http handlers to echo.HandlerFunc https://github.com/labstack/echo/blob/master/engine/standard/server.go#L139 \n. I understood. In v1 we had wrapHandler() which automatically converted supported anonymous handlers to echo.HandlerFunc, but we dropped that in v2 for the following reasons:\n- It gives us compile time check on handlers vs panic on runtime\n- You can use them as closure as we do in middleware functions\n. > I gather the recommendation now is to be strict about ensuring that global middleware is truly global.\nYes\nYour example looks good to me. If you add conflicting routes, the route add in the end wins.\nYou can register routes/middleware in any order.\n. @eyberg Actually README.md\n. README.md is updated with the list.\n@montanaflynn Do you want to share your company/project?\nThank you all!\n. hello all,\nEcho is looking for sponsorship. If Echo has been useful to you in your project/company, please support its development and maintenance.\nhttps://echo.labstack.com/support-echo\nPlease feel to forward it to the right people at your job.\n@montanaflynn @benpate @AlekSi @BrandonRomano @polds @Asoseil @chrisseto @caarlos0 @CaptainCodeman @eyberg @patrickdappollonio @ipfans @GeorgeErickson \nthanks\nvishal\n. @josue Thanks for your feedback. I am the only core developer in the project, any help in any form is helpful to update the documentation, may be pointers.. Not in the default statement but you can alway override default HTTP error handler and print what you wish to. For reference: http://labstack.com/echo/guide/customization/\n. Most likely, validator will just an interface with users providing the implementation. The method will be exposed from echo.Context smilar to Bind and Render.\n. Please reopen if needed.\n. From https://godoc.org/github.com/labstack/echo#Echo.Group\n\nGroup creates a new sub router with prefix. It inherits all properties from the parent. Passing middleware overrides parent middleware.\n\nSo you will create a group like\ngo\nadmin := e.Group(\"/admin\", some-middleware...) // This will override parent middleware.\nAs your group is empty, I don't know the exact behavior. I would suggest to try with named group and we can debug it further.\n. This is covered here https://github.com/labstack/echo/blob/master/echo_test.go#L322\n. Here is the working example\n``` go\npackage main\nimport \"github.com/labstack/echo\"\nfunc main() {\n    e := echo.New()\n    e.Use(func(c *echo.Context) error {\n        println(\"parent middleware\")\n        return nil\n    })\n// Overrides parent middleware\nadmin := e.Group(\"/admin\", func(c *echo.Context) error {\n    println(\"admin middleware\")\n    return nil\n})\n\n// Keeps parent middleware\n// admin := e.Group(\"/admin\")\n\nadmin.Get(\"\", func(c *echo.Context) error {\n    return c.String(200, \"OK\")\n})\n\ne.Run(\":1323\")\n\n}\n``\n. This is a case at route level and groups won't work at that detail. I would suggest to have a function which gets called from the handler of each of such route.\n. I have seen this and I am with you. Probably need to separate recipes/example to a different repo.\n. You can usehttptest.ResponseRecorder`, https://github.com/labstack/echo/blob/master/middleware/logger_test.go#L53.\n. @montanaflynn Since we have upgraded to v2, example below is based on that but you can easily modify it for v1.\ncors.go\n``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n)\n// CORS middleware\nfunc CORS() echo.MiddlewareFunc {\n    return func(h echo.Handler) echo.Handler {\n        return echo.HandlerFunc(func(c echo.Context) error {\n            c.Response().Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n            return h.Handle(c)\n        })\n    }\n}\n```\ncors_test.go\n``` go\npackage main\nimport (\n    \"net/http\"\n    \"testing\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/test\"\n\"github.com/stretchr/testify/assert\"\n\n)\nfunc TestCORS(t *testing.T) {\n    e := echo.New()\n    req := test.NewRequest(echo.GET, \"/\", nil)\n    res := test.NewResponseRecorder()\n    c := echo.NewContext(req, res, e)\ncors := CORS()\nh := cors.Handle(echo.HandlerFunc(func(c echo.Context) error {\n    return c.NoContent(http.StatusOK)\n}))\nh.Handle(c)\n\nassert.Equal(t, \"*\", res.Header().Get(\"Access-Control-Allow-Origin\"))\n\n}\n```\n. Glad you found it.\nI will keep this open:\n- [ ] Update documentation\n- [ ] May be, move it to a constant \n. @jonny-improbable When you call Context.Render you can pass any data to the function.\n. This has been fixed in v2.\n. @rayrutjes In v2, we dropped getter/setter and exposed fields for Echo#HTTPError.\n. I doubt, but you can use match any * and use regex inside the handler to forward requests.\n. Middleware is run before handler but all handler return error which is caught by a centralized HTTPErrorHandler, you can also provide your own and deal with the errors. For reference, http://labstack.com/echo/guide/customization.\n. You can look into this recipe https://echo.labstack.com/cookbook/twitter. Tracking in https://github.com/labstack/echox/issues/21. Group doesn't have Any or Match but should be easy to add (https://github.com/labstack/echo/blob/master/group.go). Do you want to send a PR with test cases?\n. Closing.\n. @ohohco please explain in detail.\n. @ohohco The website is available for offline viewing, it is a hugo project and can be run from inside website folder like hugo server --watch\n. Fixed in https://github.com/labstack/gommon/commit/25c3ce2d2abe76d8dd935305f1a8c1063dd3aac3. Please verify.\n. @BrandonRomano We have Echo.httpErrorHandler which can be used to customize any kind of error handler. The reminded me to do some cleanup on it.\n. @BrandonRomano Will close, okay for reference.\n. This has been added to v2.\n. Closing, as this is implemented in v2.\n. @o1egl Can we rename Warning to Warn and Warningf to Warnf?\n. @o1egl Can you also make a PR for master/v1? I will merge that first. I also modified (https://github.com/labstack/gommon/commit/43358a791be603db7175670d78abf544245f9941) gommon/logger to match the interface, please take care of that.\n. Do you want to send a PR on gommon/log?\n. Merged with f27de9a80412242434d6b6c8c526a59e679b887b. @o1egl If there are differences, let me know.\n. @danjac Accepting http.Handler as middleware is from the beginning, I am not sure which change are you talking about.\n. @Puffton Can you check check with Echo v2?\n. @o1egl  Thanks, closing it.\n. @o1egl Can you apply these changes to v2?\n. I don't think so, just need to review it once.\n. @syntaqx Thanks for the contribution. Looks like there is a conflict with another PR I just merged, can you resolve that?\n. See https://github.com/labstack/echo/issues/325\n. @o1egl The build failed, looks like some gofmt issue. Can you check?\n. @o1egl Here's what I thought, let's keep all the logger functions we deleted and inside make a type check if gommon/log otherwise no-op, how does this sounds?\n. I would go against new method variation just for this. If user creates logger object, we are okay but as Echo internally creates it, so just exposing logger would make them hard to tweak logger.  So either expose logger methods as they were or provide documentation explaining how to tweak logger. In my opinion, extra doc is a bit overhead in addition to typecast to gommon logger and get access to API. Let me know your thoughts. \n. Okay, let's stick to what we have in the PR but we should update docs to reflect this and provide some insights about logging and tweaks. Thanks for your contribution. \n. Logger soon will be an interface. The build has passed, are you sure you have the latest? I don't even see a call to logger at that line.\n. Can we have test cases? Coverage has dropped by 7.4%. \n. @o1egl I got that but now binder.go isn't covered fully - https://coveralls.io/files/1930225055. Let's try to keep coverage as high as possible.\n. Can you cross check with local coverage behavior? \n. @o1egl Can't leave v2 ;)\n. @raitucarp In this case you can simply use a, b or c middleware stack inside the handlers. Something like below:\ngo\na = [func(c *echo.Context) error { println(\"1\") }, func(c *echo.Context) error { println(\"2\") }]\ne.Post(\"/user\", func(c *echo.Context) error {\n  for _, m := range(a) {\n    if err := m(c); err != nil {\n      return err\n    }\n  }\n  // handler logic\n})\n. @raitucarp If you want to abort request anywhere in the middleware, just return. So if checkIdField fails check for error and return (don't execute other middleware and handler). For reference, https://github.com/labstack/echo/blob/master/middleware/auth.go#L49.\n. You can let all user routes use JWT middleware but inside the middleware filter based on method or parameter or any other property.\n. Not like this, inside your jwt middleware only check for post method and let it skip get.\n. I think the condition should be reversed. \n. You should also check this post: https://medium.com/@matryer/writing-middleware-in-golang-and-how-go-makes-it-so-much-fun-4375c1246e81#.vs27uzaxp\n. @raitucarp I have added a new API to chain middleware at route level. https://godoc.org/github.com/labstack/echo#Use\n. I believe this is already implemented, please check https://echo.labstack.com/guide/routing#list-routes. Thanks for reporting. There was a related issue https://github.com/labstack/echo/issues/103, where I mentioned to expose similar APIs. Do you think exposing c.ParamValues() too is useful too (Just being lazy to think about it). On a separate note, if you are using Echo in your company/projects consider getting it listed https://github.com/labstack/echo/issues/295 \n. Can we have a test case?\n. @Arkan Where are you using Echo?\n. @o1egl Do you want to have look at it?\n. @montanaflynn Are you using proxy server in between?\n. If you want to limit file upload try https://echo.labstack.com/middleware/body-limit\n. @o1egl Can we have coverage too?\n. @o1egl :+1: np, we will fight coverage later.\n. @dhanunjay Do you want to just want to send raw bytes?\n. This to me looks a very specify use case. I would like to get other's opinion on this @o1egl @axdg @syntaqx \n. For connivence lets extend the API. Anyone up for the PR with test case? @o1egl I will have a separate chat with you on #337.\n@dhanunjay If you are using Echo at work, please consider it getting listed on the README.md.\n. There was already a function Context#json, just renamed and exported it.\n. @elgris Thanks for your input, probably a good candidate for v2 #302 as for current branch this will bring in breaking changes to the API. Let me know your thoughts, we can include this in v2 docs.\n. One thing I just realized that to add simple handlers, users have to typecast with HandlerFunc?\nHandlerFunc(func(....)), although we can accept interface{} and do the conversion but still not very handy.\n. I agree, but if you look at the current implementation, we accept interface{} and do a runtime check. I am just worried about how do we get rid of wrapping it with HandlerFunc.\n. Okay, just looked into code https://github.com/labstack/echo/blob/master/echo.go#L708, we do support http.Handler, it's that what you want?\n. Got your point, now what can we do, any suggestions? v2-alpha is already out with interface approach, but I want to make it right. Asking users to wrap their handlers with HandlerFunc is little overdo. \n. Closing as all builds are successful. \n. #377\n. I just looked at the code and found there are very few places where actually logging is used. So here is the plan:\n- Remove logger interface and directly use gommon/log or standard log.\n- Logger middleware is always going to print as it is enabled by user.\n- Expose methods to set log output and log level.\n- With default level to fatal or error or off?\nDo you think default level to off is practical, do we really want to to skip errors logs?\nThis is pretty much how it was earlier ;)\nLet me know your thoughts.\nPS: This is proposed for v2, soon to be released. \n. Thanks for your feedback. Setting default log level to FATAL which only prints message and exits ;). Colored output is already taken care of.\n. Which logs exactly?\n. By disabling log we will will miss critical logs in the library. How do we deal with that? \n. Re-opening\n. I am not sure if we can just swallow errors by default without users getting to know about them. Another solution could be to return error as much as possible and panic (or just print a message) wherever it is not possible. There are various error/warn/critical log message in the library:\n- https://github.com/labstack/echo/blob/master/router.go#L57\n- https://github.com/labstack/echo/blob/2fab27a3780c6189f5353b76d2feb599c1e0f6cb/engine/standard/server.go#L81\n- https://github.com/labstack/echo/blob/190cf80d02c84834290f34992360a23a13900acb/test/response.go#L49\n. @azer Default is OFF now.\n. Do you mean that you are interested in writing a recipe for echo?\n. I don't have instructions for creating a new recipe, you can look into other recipes and figure it out. Use https://github.com/labstack/echox project. PR should have code and a doc in *.md format.\n. I would recommend to create an issue first to identify the problem. \n. Looks obsolete, closing.\n. How are you including those static files? Where do they reside on the server?\n. What you are doing in switch statement is done by Echo#Static function.  e.Static(\"/\", baseDir)  should deliver html and other static files without any extra code from root path /.  You don't need extra * for images, it should be e.Static(\"/img/\", baseDir+\"/img/\")\n. You should check this recipe https://labstack.com/echo/recipes/jwt-authentication. As long as you are not creating go-routines, passing Context down to other functions should be okay.\n. Passing context is the option. Echo#Context also embeds net.Context so you can use that as well or created net.Context and pass it (https://godoc.org/golang.org/x/net/context).\n. @amrnt I think you should bring this to our chat or may be on StackOverflow to get more eyes on it.\n. I did not realize, this is already done.\n. @slava-vishnyakov Sure.\n. Your understanding is correct. Examples below:\n- For route /abc* and request /abchello c.P(0) is hello \n- For route /abc/* and request /abc/hello c.P(0) is hello \n. Thanks for reporting, please verify.\n. Mac address 00:20:18:56:29:8f is conflicting with path parameter format. I don't think this will work.\n. @jcmartins I will keep that in mind, for now we have gitter chat for discussions https://gitter.im/labstack/echo\n. https://labstack.slack.com\n. How does v1 behave?\n. This line fmt.Println(\"requestUrl:\",c.Request().URI()) is printing the right url. The output of the second line fmt.Println(route.Method,route.Path) is the last element of the array persisted in the handler, nothing related to the library.\n. @mtojek Thank for PR, I will review it soon - just a bit busy.\n. @mtojek Can we have a test case? Please also mention Issue # around the fix, good to keep track.\n. @mtojek Is param value with slash a valid value in a url?\n. @mtojek I am just reluctant to modify router code on case basis. Is it possible for you to interpolate path before it touches the router, may be in a middleware or something? \n. In your example and your fix what do you get fourth's value?\n. Let me know if this resolved your issue.\n. You can define your custom HTTP error handler and return payload as you wish. For reference https://labstack.com/echo/guide/customization#http-error-handler.\n. @francoishill  Looks like the commit is lost somewhere. You can resend the PR or close it.\n. This is garbled. Closing it.\n. I tried the following with your code and it is working as expected.\n``` sh\n\u276f curl -v -X OPTIONS http://localhost:8080\n Rebuilt URL to: http://localhost:8080/\n   Trying ::1...\n* Connected to localhost (::1) port 8080 (#0)\n\nOPTIONS / HTTP/1.1\nHost: localhost:8080\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 200 OK\n< Date: Mon, 07 Mar 2016 15:47:25 GMT\n< Content-Length: 0\n< Content-Type: text/plain; charset=utf-8\n<\n Connection #0 to host localhost left intact\n/\n```\n\n``` sh\n\u276f curl -v -X GET http://localhost:8080\n Rebuilt URL to: http://localhost:8080/\n   Trying ::1...\n* Connected to localhost (::1) port 8080 (#0)\n\nGET / HTTP/1.1\nHost: localhost:8080\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 405 Method Not Allowed\n< Content-Type: text/plain; charset=utf-8\n< Date: Mon, 07 Mar 2016 15:47:32 GMT\n< Content-Length: 18\n<\n* Connection #0 to host localhost left intact\nMethod Not Allowed\n```\n\n``` sh\n\u276f curl -v -X GET http://localhost:8080/foo\n   Trying ::1...\n Connected to localhost (::1) port 8080 (#0)\n\nGET /foo HTTP/1.1\nHost: localhost:8080\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=utf-8\n< Date: Mon, 07 Mar 2016 15:49:57 GMT\n< Content-Length: 4\n<\n Connection #0 to host localhost left intact\n/foo\n``\n. For routehttp://localhost:8080/fooOPTIONS is not registered so you are getting 405./is a separate route.\n. As/has low priority, if/foois matched, search is halted and405is returned for any unregistered method, ideally we should continue and fallback on/` is registered but it brings more complications.\n\nI believe CORS should be implemented as middleware. Did you mean that CORS as middleware is a workaround?\n. Closing.\n. @bunkat which version are you using?\n. Thanks, I will update the documentation to mention using OPTIONS method check as a middleware to avoid this case.\n. Thanks!\n. That is how you will get your original object's back.\n. Static api is moved into middleware. You can find brief information at the bottom of this page. https://labstack.com/echo/guide/response  I will update docs soon. \n. New APIs are under development. Should be ready in an hour.\n. Reference: https://labstack.com/echo/guide/response#static-files:7aaab65c33493a192d50f29765cc4ef3\n. In v2, third parameter is already booked for middleware.\nEcho#Get(path string, h Handler, m ...Middleware)\n. v2 is not frozen yet. Can you show me some examples of API to have further discussion?\n. @kotchuprik You don't have to necessarily use a package manager or have to fork to use v1. Just use gopkg.in/labstack/echo.v1.\n. I made a fix, can you try this again?\n. @tossp Thanks for your PR. I have included your idea into the original Attachment function.\n. @jelinden Things have changed in v2. Echo v2 has abstracted from HTTP implementation. Below code should work.\n``` go\npackage main\nimport (\n    \"log\"\n    \"net/http\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/engine\"\n\"github.com/labstack/echo/engine/standard\"\n\n)\nfunc main() {\n    e := echo.New()\n    e.Get(\"/\", echo.HandlerFunc(func(c echo.Context) error {\n        return c.String(http.StatusOK, \"Hello, World!\")\n    }))\n// Standard HTTP server\nstd := standard.NewFromConfig(engine.Config{})\nstd.SetHandler(e)\n\nhttp.Handle(\"/\", std)\nlog.Fatal(http.ListenAndServe(\":8080\", nil))\n\n}\n``\n. @loint This is now refactored toWithConfig.\n. As there is only one instance ofcontext.Contextat any time inecho.Context. I would like to understand your use case ifNetContext()method is exposed.\n. As there is only one instance ofecho.Context, I am curious to know how do you setnet.Contextinside your three functions - don't they override it. Can you hop on to chat?\n. You can always get the original*http.Request` from the interface.\nc.Request().(*standard.Request).Request\nI would also like to know the use case? to extend engine.Request API.\n. @cgyy Please verify.\n. https://labstack.com/echo/guide/response#static-files:7aaab65c33493a192d50f29765cc4ef3\n. In v2 we process middleware before it hits the router (router is also a middleware in the end) which parses the path and sets these properties, hence this behavior. Essentially at that time middleware just have raw request and response objects from  the underlying HTTP engine.\nOne use case for this change, if you want to modify request method or path but before router parses the request, like stripping trailing slash.\nI would like to know your opinion on this as we still have time to change the APIs.\nIn your example I have change root as group as for group middleware are executed post router middleware.\ngo\nfunc main() {\n    e := echo.New()\n    g := e.Group(\"\")\n    g.Use(PrintPath())\n    g.Get(\"/base/:id\", echo.HandlerFunc(func(c echo.Context) error {\n        return c.String(200, \"Hello \"+c.Param(\"id\"))\n    }))\n    e.Run(standard.New(\":8080\"))\n}\n@CaptainCodeman what's your opinion?\n. @nikounity Just to unblock you, please use the above mentioned workaround. It will set context properties right. I will keep the bug open for tracking.\n@CaptainCodeman Couple of solutions:\n- As I mentioned earlier that router is also another middleware so if users set it explicitly in the middleware chain this situation could be avoided - it's just that router has to be explicitly set. Implementation is very easy.\n- Extend another API Echo#Hook to define middleware to be run before router middleware and leave Echo#User to run after router middleware. Implementation could be tricky but doable.\n. @nikounity Your example should work now.\nFor reference:\nEcho#Pre registers middleware to be executed before router. This is will have raw request / response objects.\nEcho#Use registers middleware to be executed after router. This will have fully loaded context.\n. Echo v2 abstracts underlying HTTP server so you don't have direct access to internal objects like request, response or url. This is done to make Echo compatible with many HTTP servers.\nWe try to expose most generic methods via engine.* interfaces but if you don't find them you can get get the real objects like below (standard HTTP server):\n`` go\n//http.Request`\nc.Request().(standard.Request).Request\n// *http.URL\nc.Request().(*standard.URL).URL\n// http.Header\nc.Request().(*standard.Header).Header\n// http.ResponseWriter\nc.Response().(*standard.Response).ResponseWriter\n// http.Header\nc.Response().(*standard.Header).Header\n```\nI will look into exposing new API to fetch query string.\n. API Request#QueryString() exposed.\n. Can you confirm behavior with standard http server?\n. Can you provide code which doesn't work?\n. This is working for me\n``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/engine/standard\"\n    \"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.Logger())\n    e.Use(middleware.Recover())\n    e.Use(middleware.Gzip())\n    e.Use(middleware.Static(\"public\"))\n    e.Get(\"/users\", echo.HandlerFunc(func(c echo.Context) error {\n        return c.String(200, \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\")\n    }))\n    e.Run(standard.New(\":1323\"))\n}\n```\nCan you send me the code which doesn't work, also your echo version/commit.\n. @mtojek This is excellent! I just pushed a slightly modified version. I am wondering about fasthttp now :smiley: \n. This should be fixed, please re-open if needed.\n. By enabling gzip middleware, it sets Content-Encoding header of response to gzip, so for empty body this is the behavior. You probably need to delete Content-Encoding header if sending empty body.\n. Are you using c.NoContent() to send empty body?\n. Okay, we can remove content-encoding inside that function and it should work.\n. Closing...\n. @kevinvandervlist Thanks for the PR. I just renamed it to Keys which makes more sense. All could be used return a map of headers (in future).\n. See https://github.com/labstack/echo/issues/406\n. Thanks for the PR. I would recommend to move Listener into engine.Config struct, just next to Address.\n. It should be like below:\n``` go\npackage main\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"strconv\"\n\"github.com/labstack/echo\"\n//\"github.com/labstack/echo/engine/standard\"\n\"github.com/labstack/echo/middleware\"\n\"github.com/labstack/echo/test\"\n\n)\ntype (\n    user struct {\n        ID   int\n        Name string\n    }\n)\nvar (\n    users = map[int]*user{}\n    seq   = 1\n)\n//----------\n// Handlers\n//----------\nfunc getUser() echo.HandlerFunc {\n    return func(c echo.Context) error {\n        fmt.Println(\"id: \" + c.Param(\"id\"))\n        id, _ := strconv.Atoi(c.Param(\"id\"))\n        return c.JSON(http.StatusOK, users[id])\n    }\n}\nfunc main() {\n    e := echo.New()\n// Middleware\ne.Use(middleware.Logger())\ne.Use(middleware.Recover())\n\n// Routes\ne.Get(\"/users/:id\", getUser())\n\n// Start server\n//e.Run(standard.New(\":1323\"))\nreq := test.NewRequest(echo.GET, \"/users/1\", nil)\nres := test.NewResponseRecorder()\ne.ServeHTTP(req, res)\n\n}\n``\n. @mtojek We are expositingfasthttp.RequestCtxin request and response structs. Isn't that what you looking for?\n. Can you provide some information about the api?\n. I got your point. Let me see what can be done here.\n. I you look into code, we have change all the references to gopkg.in/labstack/echo.v1. You probably need to rungo getwith-uoption.\n. @galeone Once fasthttp supports WebSocket or I dig into the code, we will have a better interface.\n. Duplicate #424.\n. Send me the sample code to reproduce this issue. I have also included test cases against this issue.\n. @mtojek It was a typo, fixed now. We have a pretty decent chat room https://gitter.im/labstack/echo if you want to hang around.\n. While I am looking to extending the API, you have a couple of options for now:\n- For multipart formContext#Multipart()and look forForm- Convert intohttp.Request` and get what you want. Check migrating document.\nUpdate\nNew APIs\nContext#FormParams & Context#QueryParams\n. @transtone Thanks for your feedback but be mindful that Echo v2 is still in beta and things can change until it is finally released. Once released, we will have a separate develop branch and keep master branch clean with latest release.\n@CaptainCodeman \n@syntaqx\n. @sb89 Have you found a way or do you still need these methods?\n. /cc @aarondl what's your opinion?\nExample\nhandler\n``` go\npackage handler\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\n\n)\nfunc getUser(c echo.Context) error {\n    return c.String(http.StatusOK, \"Joe Smith \"+c.Param(\"id\"))\n}\n```\ntest\n``` go\npackage handler\nimport (\n    \"testing\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/engine/standard\"\n\n)\nfunc TestGet(t testing.T) {\n    c := echo.MockContext(standard.MockRequest(), standard.MockResponse(), \"/users/:id\", []string{\"id\"}, []string{\"1\"})\n    if err := getUser(c); err != nil {\n        t.Error(err)\n    }\n}\n``\n. I believe most of the points from comments are covered in the recent commit. I droppedMockAPI in favor ofNew*. I have also droppedContext#Objectand addedContext#DelAPI. I am still looking into @aarondl's PR #470 about context interface.\n. Re-open if needed.\n. Currently bothstdandfasthttphave their ownCookie` structs. I am not very sure how we can implement it. Suggestions are welcome.\n@CaptainCodeman \n@mtojek \n. @mtojek Is it finally resolved?\n. Is it just fasthttp?\n. See #432\n. We had this problem earlier, can check if you have the latest version? If this problem still exists, please provide a minimalistic example to reproduce the problem.\n. It has resurfaced, I will look into it tomorrow.\n. @chrislewispac In Echo v3, the property is directly exposed. So you do e.Binder =. Things have changed in v2, it doesn't directly accept standard http.Request and http.ResponseWriter. This has been done to provide support for fasthttp server. What exactly are you trying to achieve?\n. You should use engine.Request and engine.Response for testing. What's the problem with test package?\n. Please follow https://labstack.com/echo/guide/migrating/ to upgrade.\n. See https://github.com/labstack/echo/issues/294#issuecomment-204045092\nOh this is from the 15% bucket :)\n. @fat @azer @CaptainCodeman This has been fixed to use handler without a wrapper while still maintaining the compile time check. It should not break your code if you are already using wrappers.\nPS: Documentation needs to be updated.\n. c *echo.Context should be c echo.Context, Context is now an interface to accommodate many HTTP server underneath e.g. fasthttp.\n. Fixed in #486.\n. - We dropped echo.Handler and echo.HandlerFunc so you don't need to wrap handlers now, just use like below:\n``` go\nfunc List(c echo.Context) error {\n  return c.String(200, \"list\")\n}\ne.Get(\"/list\", List)\n``\n- Use directlyreturn fn(c)` in your code.\nI apologize for the change (remember we are still in beta) but it is for good. Please close if this resolves your issue.\n...\nSupport Us\n. Please verify.\n. Please verify and if you like the project consider to star it.\n. Excellent!\n. This got fixed in #450\n. There was a list for v1 but somehow it got dropped for v2. I will put it back with yours in the list. Will keep this issue open for tracking.\n. Updated README.md\n. rs/cors doesn't support fasthttp so you have to write your own.\n. This has been addressed in the README now.\n. I am little late to update this issue. I already paid someone to get it done, although there is still some work to be done to make right for the website and README.md. Here is the link http://i.imgur.com/dD8L0tW.png.\nI have the source file. @Gabriel-Araujo do you think you can help here?\n. authenticated := e.Group(\"/*\", apiauth.GithubOauthMiddleware) doesn't look right to me, it will match any route, so everything is going into the last handler you define for this group.\n. So if you have defined some middleware at root level and then define group1 and group2 with their own middleware, do you want that group1 and group2 should not have root level middleware?\n. What about this code?\ngo\ne := echo.New()\ne.Use(middleware.Logger())\ne.Get(\"/log\", ...)\ng := e.Group(\"/group\", authenticationMiddleware)\ng.Get(\"/auth\", ...)\n. I got it. Just searched internet and looks like it needs to handled inside your middleware, so have a set of ignored paths and check the request URI/Path against that.\n. Group with /* is definitely going to give you unexpected results. Example below always returns get2() for /hello or /hello2. \n``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/middleware\"\n    // \"github.com/labstack/echo/engine/fasthttp\"\n    \"github.com/labstack/echo/engine/standard\"\n)\nfunc get(c echo.Context) error {\n    println(\"get()\")\n    return c.String(200, \"Hello, World!\")\n}\nfunc get2(c echo.Context) error {\n    println(\"get2()\")\n    return c.String(200, \"Hello, World!\")\n}\nfunc main() {\n    e := echo.New()\n    e.SetDebug(true)\n    e.Use(middleware.Logger())\n    g := e.Group(\"/*\", func(n echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            println(\"mw\")\n            return n(c)\n        }\n    })\n    g.Get(\"/hello\", get)\n    g.Get(\"/hello2\", get2)\n    e.Run(standard.New(\":1323\"))\n}\n``\n. Static middleware is dropped so you should useGroup#Staticand it should work fine.\n. Static is not a middleware anymore. You have to use it likee.Static(\"/static\", \"static\").\n. Yes but it is a handler now, so you have to register a route to handle static file and that's what Static method does internally. \n. This was a copy paste error from another example for file upload.\n. Now it should be fine. Thanks for reporting.\n. Do you have a sample code which triggered it? \n. Thanks!\n434bcf404bbbfc83c90ee00aaccc9f52afcd9bf5\n. Probably need to expose Context#Handler() to return the internal property handler. Will that be ok?\n. Can you try go get -u gopkg.in/labstack/echo.v1?\n. Can you compare it with standard http server?\n. English please.\n. You wrote well, just explain us what is going on and how to reproduce the issue.\n. You are not parsing all files. template.ParseGlob(\"public/views/*.html\") will only parse file directly under views folder. Check out this question http://stackoverflow.com/questions/12806474/golang-dynamically-parsing-files\n. This is out of scope, you can write your own utility methods to parse template files.\n. From the header?\n. I think we add a new method on engine.Request to fetch referer, check it out.\n. Based on http://stackoverflow.com/a/35642256/197473\nFor v1:\nCreate a custom http.Server and use Echo#RunServer().\nFor v2:\nCreate a custom tls.Listen and use <standard/fasthttp>#WithConfig()\n. @aarondl If you use Echo#NewContext to create context, you only need to call the following APIs to get fully loaded context implementation (Because these are set by router).\n- Context#Path()\n- Context#SetParamNames()\n- Context#SetParamValues()\n. Got stale, closing.\n. Tracked in #665 \n. You can use a static middleware and point it to your public directory which is constantly updated by webpack tool.\nhttps://labstack.com/echo/guide/static-files\n. Yes, just need to prioritize it.\n. @azer Update: I wanted this today and figured that you can easily use https://github.com/chimurai/http-proxy-middleware on the node dev server with all the goodies like hot reload etc...\n. Closing...\n. @azer If you are already running webpack development server it is just one line to include a proxy server to your backend. I have that setup, it's quite easy.\nWith go server doing proxy, I am not sure how HMR will work. \n. Context#FormParams()\n. I ran the following code and got form values:\n``` go\npackage main\nimport (\n    \"fmt\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/engine/standard\"\n\n)\nfunc post(c echo.Context) error {\n    fmt.Printf(\"%v\", c.FormParams())\n    return c.String(200, \"post\")\n}\nfunc main() {\n    e := echo.New()\n    e.Post(\"/post\", post)\n    e.Run(standard.New(\":1323\"))\n}\n```\nsh\ncurl -X POST -d 'who=world' localhost:1323/post\n. Accepted, will open capitalized methods API. The only problem is that we have constant with those names like GET, POST etc but they can be refactored to MethodGET etc.\nUpdate: GET, POST etc constantS are on package echo so we are good. We will add additional capitalized methods for method and mark older ones as deprecated.\n. @zjx20 What OS are you using? I am curious to know why that condition failed to disable the colored log.\n. No problem. Happy coding!\n. It is like that. In this case :piyo is overridden by :hoge; you should use the same name and if that doesn't work get it by index Context.P(0).\n. I understand. I will keep this issue open and give it a thought later.\n. @Anon-Penguin Make sure build passes after your commits.\n. Using buffer is nice but I am just wondering how come you are getting mess of logs, shouldn't OS writes in the order it gets it?\n. I am not able to reproduce it, can you provide a working sample?\n. I ran the following standard http code and it produces the same result, something to do with HEAD and 404.\n``` go\npackage main\nimport \"net/http\"\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    w.WriteHeader(404)\n}\nfunc main() {\n    http.HandleFunc(\"/\", handler)\n    http.ListenAndServe(\":8080\", nil)\n}\n```\n. I don't know about this particular case but I am not see it in other cases.\n``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/engine/standard\"\n)\nfunc ok(c echo.Context) error {\n    return c.NoContent(204)\n}\nfunc main() {\n    e := echo.New()\n    e.HEAD(\"/ok\", ok)\n    e.Run(standard.New(\":1323\"))\n}\n```\n. @coderhaoxin soon...\n. Tracking in https://github.com/labstack/echo/milestones/v2\n. Not a problem, just do a quick rfc check and send a PR or even I can do it.\n. @mtojek @Taik Looks like this is already fixed here https://github.com/labstack/echo/blob/master/middleware/compress.go#L62. Can you guys double check?\n. This is merged.\n. Please explain the issue. \n. You have few choices:\n- Define a struct with db as field and all handlers as methods. You can initialized this struct from main method.\n- Create a middleware which sets db, queue etc to the context so any handler can use it.\nFor more ideas, you can join our chat room.\n. You should check out https://labstack.com/echo/recipes/websocket\nPS: In v2 Context#Socket was dropped.\n. Just tested with latest, it works. You can clone https://github.com/labstack/echox and run example your self.\n. You don't have the latest version. \n. You should check the following links\n- https://labstack.com/echo/guide/migrating (To get access to http.Request)\n- https://labstack.com/echo/recipes/middleware#how-to-write-a-custom-middleware:37ab2f15ff048f67959bcac0a6032f32\n- https://labstack.com/echo/recipes/google-app-engine\n/cc @CaptainCodeman \n. That is weird, what happens if you just pass new(http.Request)?\nAlso show us the main code where you create Echo instance.\n. So something is wrong with the function, it doesn't even take newly created http.Request.\n. You should join our chat room, and don't forget to star the project.\n. Look at standard package, we have WrapMiddleware function. \n. @ericmdantas please verify.\n. Context is the only option and I believe it is the right way to do it. Context also provides facility to create net.context from standard library.\nPS: We have a chat room, if you want to hang around - just to get more ideas.\n. Got your point. So far, I have been using handler structs to initialize my internal services. I agree, context should only be used for request/response cycle. What's your opinion on use structs and initialized them during the startup? I am open for discussion.\n. Yes. \n. That's true. You can make this pattern even more beautiful with inheritance or embedded struct. \n. Not sure but have you looked at this project https://github.com/xyproto/echoperm?\n. https://github.com/labstack/echo-contrib/tree/master/session. Can you provide a working example for debugging?\n. It is a small fix. So returning nil for non existent cookies is ok? or should we return error too.\n. Please verify.\n. @asdine  I am looking into this suggestion and I need some more inputs. Here is what we have today:\n- Echo.Context interface already embeds net/context.Context so you can easily pass it on to any function accepting net/context.Context\n- With Context#SetNetContext you can load your context.\n- Mocking Echo.Context is already super easy https://echo.labstack.com/guide/testing\nPlease provide some code snippet to get a better understanding of the proposal.\nAs I am closing v2 issues and headed to cut v2 release very soon \ud83d\udc4d, your timely response/feedback will be appreciated.\n/cc @upamune @Taik @ipfans @dimiro1 @jmunson @lugorian @DenisNeustroev @bryanl @CaptainCodeman @mtojek \n. @asdine Can you provide signatures for Context.Set and Context.Get? I am a bit confused.\nI think with this proposal we are limiting the context to be of type value? The current implementation allows you to use different implementation of context.Context.\n. How about this or may be this is what you meant?\nContext#Set(ctx context.Context) - to set context\nContext#Get() context.Context - to get context\nThis way you can set context.Context of any type.\nTo use it as store, get the context and call Value on it. \nEdit: actually you will directly call Value on Echo context. \n. Looks cool. \n. I just did. Please verify if it needs any adjustments.\n. We just need to modify Context#Reset to \ngo\nfunc (c *echoContext) Reset(req engine.Request, res engine.Response) {\n    c.Context = context.Background()\n    c.request = req\n    c.response = res\n    c.handler = notFoundHandler\n}\n. Have you looked at https://labstack.com/echo/guide/testing?\n. @CaptainCodeman You got it working on GAE?\n. @dahankzter Have you looked at logging format configuration https://labstack.com/echo/guide/logger-middleware. You can set this format as JSON and append your message to it. The message could be just a string or another JSON embedded inside, making the entire logging message as a valid JSON.\n. Let me check on that, making format as JSON might make sense.\n. @dahankzter Let me know how it works out for you.\n. This is already covered.\n. @bdesem Can you make a local change to https://github.com/labstack/gommon/blob/master/bytes/bytes.go#L68 and https://github.com/labstack/gommon/blob/master/bytes/bytes.go#L36 to accept int64 or uint64 and try to build?\n. I did a fix, you need to get the latest gommon package and test.\n. Thanks for pointing it out. I have updated echo.go.\n. You should avoid type conversion as much as possible.\n``` go\nisInternetExplorer9(c.Request().Header())\n// check if the current browser is IE9 (has implications for routing)\nfunc isInternetExplorer9(headers engine.Header) bool {\n    agent := headers.Get(\"User-Agent\")\n    if agent == \"\" {\n        return false\n    }\nreturn strings.Contains(agent, \"MSIE 9.0\")\n\n}\n``\n. You are missing something https://golang.org/pkg/net/http/#Request hasMultipartForm`.\n. > rec := httptest.NewRecorder()\nYour rec will have all the response. Looking into Echo's test cases.\n. Before I investigate further, have you looked at this doc https://labstack.com/echo/guide/testing?\n. From the same docuemnt\n\nreq := new(http.Request)\n\nIf you set URL field in req to what you expect, it should return you right values from Echo#Context.\n. Can you provide more context with example and expectation, we can definitely look into it.\n. @jrasanen Do you mean application level variable/constant?\n. You can use Context#Set and Context#Get to store/retrieve arbitrary objects.\n. Nice!\n. Recover middleware won't prevent you from errors, it will only print the stack trace which can be used for debugging. The error you are getting is more related to the system, have you tried increasing ulimit?\n. Tracking in https://github.com/labstack/echox/issues/22. @briemarie Have you looked at this test case https://github.com/labstack/echo/blob/master/context_test.go#L249? SetParamNames/Values were exposed as there was no way to set them.\n. Cool, I will update the testing guide to include setting form and query params.\n. thank you!\n. I agree, we just need some more inputs/references from the world.\n@CaptainCodeman \n. @mtojek There is a discussion on gitter chat room.\n. Closing based on our discussion.\n. Sounds good. Can we have a better name for CustomContentBlob|String how about just Blob and String or something else?\n- Blog|String\n- CustomBlog|String\n. Cool. Somehow in this kind of implementations var args seems like a hack to me, what do you say?\n. I like it. At least it has some meaning.\n. You can send me a PR.\n. I am giving up on string to []byte and vice versa conversion for now. I have included couple of new functions Blob and Stream to address other use case.\nNow context can be extended to add custom APIs :) https://echo.labstack.com/guide/context#extending-context\n. @Anon-Penguin If you are trying to save on string []byte conversion and vice versa then for standard http response we anyways have to convert to []byte. \n. For now you can typecast get the original header object\ngo\nc.Request().(*standard.Header).Header\nI will keep this issue open to add a new method to get all values for a key.\n. \ud83d\udc4d \n. It is hard to understand your question. Please explain it with some example.\n. I will look into this but FYI we have tried this earlier https://github.com/labstack/echo/pull/349.\n. As far I remember this was intentional. Context#Error() internally calls the http error handler - generally used by middleware to asynchronously send http error and continue working. If you return this method http error handler will be called again. In your example you can just return the error it will do what c.Error is doing. You can also return https://github.com/labstack/echo/blob/master/echo.go#L78.\nLet me know if you are thinking in other direction or may be expand your example to explain it better.\n. I didn't see this PR but the build is fixed now.\n. Fixed in 0d2dac7\n. There is no concept of before and after at group level. Try to put your routes after declaring the middleware.\n. As far I know, single quotes in a JSON is not valid. Probably you need to convert dict to json before sending.\npy\njson.dumps({'amount': 23, 'reference': '8000000', 'source': 'Subir Semanal'})\n. Can you try with plain println?\n. There is a typo in RenderTpye. I also wasted my time.\n. Good work! Let's bring it back to green color before merging ;)\n. I don't think so. If you are seeing logs, they are probably from the http error handler function. The default level for logging is error so 4xx, 5xx will all be caught. Let me know if this is not the case.\n. Using Echo#SetLogLevel(glog.OFF)\n. For now you add your filtered header back using a middleware. I will keep this issue open in case we are interested in introduction a new config Force in gzip middleware.\n. @amenzhinsky what happened?\n. The guy is already comparing it.\n. Can you lookup how were you using Context#Set/Get? Some some code snippet around it? \nEdit: I can reproduce it.\n. Please verify. \n. You need to upgrade labstack/gommon. This was changed in https://github.com/labstack/gommon/commit/c8e533fc9cb891db60f659489cb7c55361ca393c\n. Can you try to run it with plain fasthttp server?\n. https://github.com/labstack/echo/pull/558\n. I have update the testing page with JSON example.\n. Fixed in https://github.com/labstack/echo/releases/tag/v2.0.1\n. What version of gommon/log? What's the exact error?\n. Isn't this already achievable? I just looked at https://github.com/labstack/echo/issues/555\n. Auth header is like auth := bearer + \" \" + token, are you not putting a space in between?\nhttps://github.com/guidola/echo/blob/master/middleware/jwt_test.go#L37\n. It is dropped in v2.\nFrom https://echo.labstack.com/guide/static-files\nServing a favicon from images/favicon.ico\ngo\ne.File(\"/favicon.ico\", \"images/favicon.ico\")\n. @oliverjanik What you suggested already exits for decoding request body, you can set a custom binder https://github.com/labstack/echo/blob/master/echo.go#L298. We should be ok with external dependencies. \n. Looks like I wasn't right about content negotiation, probably got confused with binding based on content-type. @o1egl has sent a PR. I will consider your input during code review.\n. Look into https://echo.labstack.com/guide/migrating.\n. @genez Context is meant for request scope variables only. You should have a struct holding DB instance and use it. Something like below:\n``` go\ntype Handler struct {\n  DB *Mongo\n}\nfunc (h *Handler) func Save(c echo.Context) error {\n// Save using h.DB\n}\n```\n``` go\ne := echo.New()\nh := Handler{DB: mongo}\n// Register your routes\ne.POST(\"/save\", h.Save)\n. go\ns := fasthttp.New(\":1323\")\ns.Server.ReadBufferSize = 1 << 20\ne.Run(s)\n```\nNot tested.\n. You can use Echo#StartServer which accepts http.Server and set your options.\n. Looks like you need to bump up your stack size for recover middleware https://github.com/labstack/echo/blob/master/middleware/recover.go#L16.\n. @amelius0712 Thanks for the PR, I just picked your changes and added some test cases.\n. @Paulius-Maruska Please verify.\n. Tracked in #665 \n. It's not a typo, we refactored Get to GET.\n. Your package is outdated. Do go -u get github.com/labstack/echo/...\n. I would recommend to remove /Users/sriramkota/dev/go/src/github.com/labstack/echo and do a fresh install.\n. You have to send CSRF token back. It can be read from cookie? Default CSRF middleware looks for CSRF token in header key X-CSRF-Token.\n. I will update the docs but you should look into in general how to use CSRF.\n. Thanks @skyflyer . r.GET(\"admin/dashboard\", admin) should be r.GET(\"/dashboard\", admin) the prefix admin is already covered in creating the group.\n. curl localhost:1323/restricted/dashboard -H \"Authorization: Bearer my-token\" works with a message unauthorized.\n. That's the default. You can define your own config and pass https://github.com/labstack/echo/blob/master/middleware/csrf.go#L86.\n. For me this sets cookie with 1 hr expiry\n``` go\npackage main\nimport (\n    \"fmt\"\n    \"time\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/engine/standard\"\n\"github.com/labstack/echo/middleware\"\n\n)\nfunc main() {\n    e := echo.New()\n    csrf := middleware.CSRFConfig{\n        Secret:        []byte(\"csrf\"),\n        CookieExpires: time.Now().Add(60 * time.Minute),\n    }\n    e.Use(middleware.CSRFWithConfig(csrf))\n    fmt.Println(csrf.CookieExpires)\n    e.Run(standard.New(\":1323\"))\n}\n```\n. Change to max age in seconds. Please verify. Docs needs to be updated.\ngo\n// Max age (in seconds) of the CSRF cookie.\n// Optional. Default value 86400 (24hr).\nCookieMaxAge int `json:\"cookie_max_age\"`\n. Lot of thoughts from around the world went in to implement it. I would ask for facts on CSRF implementation.\nThe current implementation was inspired from django, expressjs, wikipedia, mozilla and current golang implementations.\n. @cdfox Please verify\n. It is up now.\n. ReadTimeout and WriteTimeout are part of engine config https://echo.labstack.com/guide/customization. In addition to that you can extract the original http.Server instance like standard.Server#Server and use it as appropriate.\nIt is mentioned in the post there is no one-size fit all and using the timeouts will restrict you from uploading large file or sending a streaming response. The best approach could be based on this post by registering a callback for connection state change and take an action. http://stackoverflow.com/a/29334926/197473\n. Instead of HandleEmptyToken the errors should be returned and handled by central error handler.\n. Based on https://github.com/labstack/echo/blob/master/echo.go#L276 not sending internal error to the client was intentional. You have a couple of options to debug this:\n- By default you should see error log message\n- You can override http error handler https://echo.labstack.com/guide/customization\n. Logger middleware is different. You should see errors separately in the logs - the default http error handler implementation. \n. You response is recorded in rec so assert.Equal(t, http. StatusNotFound, rec.Code). From https://echo.labstack.com/guide/testing\n. Custom error handler only plays with real request. Are you able to test your handler (standalone) for 404 code?\n. For 404 your handler is just returning an error, rec will be filled only if it writes to the response. You should test for error like he, ok := err.(*echo.HTTPError) and check status code in he.\n. Go v1.4.x with Echo v2 is not tested. This function is only available from go 1.5. You can go back older version or upgrade go. \n. https://github.com/pillarjs/understanding-csrf\n. Agreed. Need to move secret to user level using httponly cookie. I will investigate on invalidating tokens.\n. Yea I realized that . Thanks for your input.\n. > ... but I'm not sure if the current behaviour is considered a feature or a bug? Perhaps other characters should also stop scanning parameters?\nWhat other characters should we check for?\nHave you considered writing a middleware to drop .json from the path before it hits the router? It should be a pre-middleware.\n. Yes this was changed to fix a bug in CSRF. You probably need to get CSRF token from the context and pass it down to the client via template or response header.\n. https://github.com/labstack/echo/issues/597\n. Getting access of the token is not a security issue. We rely on readonly CSRF token cookie to cross check it on the server during validation.\n. @yaa110 Can you provide code to debug?\n. I used the following code for testing.\n``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/engine/standard\"\n    \"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.CSRFWithConfig(middleware.CSRFConfig{\n        Secret:      []byte(\"secret\"),\n        TokenLookup: \"form:csrf\",\n    }))\n    e.GET(\"/\", func(c echo.Context) error {\n        return c.HTML(200, <form action=\"/\" method=\"POST\">\n                <input type=\"hidden\" name=\"csrf\" value=\"+c.Get(\"csrf\").(string)+\">\n                <input type=\"submit\" value=\"Save\">\n            </form>)\n    })\n    e.POST(\"/\", func(c echo.Context) error {\n        return c.String(200, \"Hello, World!\")\n    })\n    e.Run(standard.New(\":1323\"))\n}\n``\n. I just pushed a fix on https://github.com/labstack/echo/tree/issue-600. Please check.\n. That means the token is expired, moreover the token verification is done only onPOSTDELETE` like methods.\n. I think if you are using static middleware on top, it will never reach csrf.\nThis is a rare case possible with insane short cookie expiry time or requests made during expiry. Just curios to know how other implementation handle it.\n. > HttpOnly is optional\nI have set it to true as I don't want client to modify it. But I think if cross-domain cookie modification is not-allowed, we are good. (Just double check)\n\nRenews token if only it was expired\n\nWe do it now\n\nIt Enforce an origin check (referer) for HTTPS connections\n\nNot doing\n\nIt sets the Vary: Cookie header to protect clients from caching the response.\n\nWill do\n. How does django csrf handle the case you mentioned earlier?\n. Does that mean the token never expires?\n. Let me take a stab at it. You can review it?\n. @yaa110 I took changes from your PR and applied to mine. Please verify https://github.com/labstack/echo/tree/issue-600\n. > the token should (must) be changed after successful unsafe requests such as POST (line#136).\nI am interested in knowing the reason. I did not see that in other implementation including django.\n\nit is not a good idea to pass error messages to the client in production mode (line#135).\n\nError of type HTTPError are meant for the clients across the project. All other errors are filtered in the default error handler.\n\nit is better (more performant) to move csrfTokenFromHeader to the default case of switch, because when users used form or query for TokenLookup there is no need to extract token from the header (line#104):\n\nIt is not an actual function call but just a return of internal function (closure)\n. I don't think we have a way to expose a function from middleware.\n\nI know it, but it is not necessary, is it?\n\nTo be honest, I don't like initializing via var, I prefer := unless there is no way out and moreover it wasn't a performance issue in this case, lets leave it like that.\n. The current implementation has improved a lot. Do we really need it now?\n. Cool.\n. Not supporting v2.. @scags9876 The change is reverted for now. See https://github.com/labstack/echo/issues/606. Until we figure out the best approach the fix is on hold.\nFor fasthttp, we can reset Content-Type in ServeHTTP method somewhere in the engine implementation.\n/cc @CaptainCodeman @mtojek @syntaqx \n. @AlekSi Shouldn't we also reset it to default when on=false?\n. We don''t support fasthttp now. For Echo v3, see: https://github.com/labstack/echo-contrib/tree/master/session. @leedstyh Happy to accept a PR or even a code snipped to get better idea.\n. @denyskoch Thanks for the fix. Do you think we can do the same for XML?\n. ctx.Response().Writer() gives you access to the internal writer and writing to it won't update response size. You should directly use ctx.Response() and it will update the size correctly.\n. > I would like to apply the same middlewares for all /admin/* URLs. Is it possible ?\ngo\ng := e.Group(\"/admin\", <your-middleware>)\ng.GET(\"/secured\", <your-handler>)\nNow route /admin/secured will execute your-middleware.\n. Which param?\n. Have you tried c.QueryParams() and set your params in that map?\n. https://github.com/labstack/echo/pull/628\n. It is up now. Will look into it in detail, issue open for tracking.\n. Applied read/write timeout.\nMore https://blog.cloudflare.com/the-complete-guide-to-golang-net-http-timeouts\n. @Anon-Penguin What happened? Are you still working on it?\n. Not a problem. We can tackle []byte and string issue in a different track? Let's finish up with what we discussed the other day - and take your time.\n. Not yet but we are open for ideas. \n. Please verify.\n. @sokolovstas I believe this issue is related to #675. I will work on it asap.\n. @sokolovstas please verify\n. @ipfans \n- How about naming this function as RealIP?\n- Let's reuse the code in logger middleware\n. @mtojek  But golang.org/x/net/context still works. At least we should support Go 1.6\n. @ansel1 Can you share the code or PR, We might do the same in the library.\n. You have to typecast error back into NewError\nSomething like below:\ngo\nif he, ok := err.(NewError); ok {\n  // some code\n}\n. @k2wanko Thanks for the PR.\n- I would like to know the root cause of this problem\n- Do you think making this change in gommon/log would be better?\n. @k2wanko Now we have build constraint for appengine in gommon/log, can you verify? \n. @k2wanko Please check now\n. @k2wanko gommon/log just write to os.Stdout for appengine? How about standard log does that work?\n. Can you set output?\n. @matcornic Looks good to me. Do you want to send a PR?\n. Not a problem, I will review it before merging.\n. Per router implementation this is a conflict in param names and would result in unexpected behavior. \nThe router first looks at the param in the path and then methods attached to it, in this case ids wins as it is defined after id leading to this behavior.\n. The methods attached to the route comes into picture later. At the first place rooms/:id and rooms/:ids is a conflict. May be your case is related to this https://github.com/labstack/echo/issues/479, upvote if need it.\n. Tracked in https://github.com/labstack/echo/issues/479\n. You should look into examples on the website.\n. @k2wanko Thx!\n. @franciscocpg Thx!\n. Code below works for me:\n``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/engine/standard\"\n    \"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.StaticWithConfig(middleware.StaticConfig{\n        Root:   \"/tmp/\",\n        Browse: true,\n    }))\n    e.Run(standard.New(\":3000\"))\n}\n```\n. The following code works for me\n``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/engine/standard\"\n)\nfunc handler(c echo.Context) error {\n    return c.String(200, \"OK\")\n}\nfunc main() {\n    e := echo.New()\n    e.POST(\"/cryptography/:device/keys/:keyset/:alg/encrypt\", handler)\n    e.POST(\"/cryptography/:device/keys/:keyset/:alg/decrypt\", handler)\n    e.POST(\"/cryptography/:device/keys/:keyset/:alg/sign\", handler)\n    e.POST(\"/cryptography/:device/keys/:keyset/:alg/verify\", handler)\n    e.Run(standard.New(\":3000\"))\n}\n```\n``` sh\n\u276f http -v POST localhost:3000/cryptography/hsm/keys/us/RSA1_5/encrypt\nPOST /cryptography/hsm/keys/us/RSA1_5/encrypt HTTP/1.1\nAccept: /\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: 0\nHost: localhost:3000\nUser-Agent: HTTPie/0.9.4\nHTTP/1.1 200 OK\nContent-Length: 2\nContent-Type: text/plain; charset=utf-8\nDate: Wed, 31 Aug 2016 00:13:38 GMT\nOK\n\u276f http -v POST localhost:3000/cryptography/hsm/keys/us/RSA1_5/decrypt\nPOST /cryptography/hsm/keys/us/RSA1_5/decrypt HTTP/1.1\nAccept: /\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: 0\nHost: localhost:3000\nUser-Agent: HTTPie/0.9.4\nHTTP/1.1 200 OK\nContent-Length: 2\nContent-Type: text/plain; charset=utf-8\nDate: Wed, 31 Aug 2016 00:12:04 GMT\nOK\n\u276f http -v POST localhost:3000/cryptography/hsm/keys/us/RSA1_5/sign\nPOST /cryptography/hsm/keys/us/RSA1_5/sign HTTP/1.1\nAccept: /\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: 0\nHost: localhost:3000\nUser-Agent: HTTPie/0.9.4\nHTTP/1.1 200 OK\nContent-Length: 2\nContent-Type: text/plain; charset=utf-8\nDate: Wed, 31 Aug 2016 00:12:15 GMT\nOK\n\u276f http -v POST localhost:3000/cryptography/hsm/keys/us/RSA1_5/verify\nPOST /cryptography/hsm/keys/us/RSA1_5/verify HTTP/1.1\nAccept: /\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: 0\nHost: localhost:3000\nUser-Agent: HTTPie/0.9.4\nHTTP/1.1 200 OK\nContent-Length: 2\nContent-Type: text/plain; charset=utf-8\nDate: Wed, 31 Aug 2016 00:12:19 GMT\nOK\n``\n. @vuduo Can you cross check with https://github.com/labstack/echo/issues/622? It would be great to have a test case for this! if you are interested you can look intoecho_test.gofor reference.\n. @vuduo thanks for your support \ud83d\udc4d \n. Yes,Acceptheader sounds good.\n. Let's wait on some more votes on this one.\n. @codekoala My knowledge is limited to answer this question. If you find that Gohttp` supports it, we can definitely implement it.\n. > If the TLS files are missing it should fail - but doesn't.\nWhy it should fail? You can define engine.Config without TLSCertFile or TLSKeyFile, in that case it will run server in non-tls mode. It should fail for invalid or not-found files and it does.\n\nI should be able to define whether I want HTTP2 or not.\n\nWe can work on this, please provide input on providing this flag or option in the config.\nPS: The recipe is little off, I will update it soon.\n. @tcurdt can you try without graceful?\n. @tcurdt We have DisableHTTP2 flag in the config now. To use HTTP2 with graceful you need to do something like below:\ngo\ne := echo.New()\ns := standard.WithConfig(engine.Config{\n    Address: \":1323\",\n})\ns.SetHandler(e)\ngraceful.ListenAndServeTLS(s.Server, \"cert.pem\", \"key.pem\", 5*time.Second)\n. From the docs https://echo.labstack.com/middleware/trailing-slash, it should be registered using e.Pre.\nMore https://echo.labstack.com/middleware/overview\n. I updated the README.md\n. I tried locally and it works. Feel free re-open if needed.\n. Please update jwt library. \n. Feel free to re-open if this does not resolve the problem.\n. @gordallott Can you review the code?\n. Just added http/1.1 to the list. For h2-14, looks like it is an intermediate h2 protocol, so probably we can drop it. For tests, I will include them later.\n. I will keep an eye on that.\n. @ohohco Please provide some details and steps to reproduce. \n. Which version are you using?\n. Can try with version prior to jwt fix - the bug I mentioned earlier?\nSent from my iPhone\n\nOn Sep 12, 2016, at 10:20 PM, ohohco notifications@github.com wrote:\nThe latest!\n\n\u5728 2016\u5e749\u670813\u65e5\uff0c\u4e0b\u534812:49\uff0cVishal Rana notifications@github.com \u5199\u9053\uff1a\nWhich version are you using?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/labstack/echo/issues/656#issuecomment-246572933, or mute the thread https://github.com/notifications/unsubscribe-auth/AHmmpC_U9FySjCF9Rapo3E_cFlc7NSzuks5qpitkgaJpZM4J6VN7.\n\n\u2014\nYou are receiving this because you were assigned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I meant, did you try a version before #647 fix?\n. Show me the code where you configure JWT middleware.\n. @matcornic Including you, since I suspect it started coming after your commit to JWT middleware.  JWT config can't have fixed global value for claims, I think this config should be a type rather than value, which can be initialized based on type and passed to ParseWithClaims. What are your thoughts?\n. @ohohco As a temporary solution, you can rollback to a commit prior to https://github.com/labstack/echo/commit/2557d33c4b6608f574be47c500db27d8c021f5f1#diff-e2b5376a04adac0accff0c02e761f89e and confirm if that works.\n. @heynemann Response is written directly to the socket and we only track the status code. The best way to capture 500's message is to return error from the handler and capture it. Ideally this should be done in http error handler.\n. You can set custom writer via Response#SetWriter(io.Writer). As you mentioned about gzip, did you look into to built-in gzip middleware?\n. Tracked in #665 \n. > Is is too complex to maintain two (or more) engines?\n\nYes, it has been a challenge to maintain two implementation with one interface, we have to compromise on features like you mentioned.\n\nJust asking because some people, if not most, are attracted to the piece of the graph that shows how much faster echo is when using fasthttp - so, removing it could be pretty big (in a bad way) at least for the new people looking for new web frameworks.\n\nI think we need to find newer way to attract people ;), probably we will put old routing benchmarks :). We will figure it out :)\nIn short, we want to be aligned with Go http to benefit from all the features (current and future).\n. @lugorian Is it something similar to https://echo.labstack.com/guide/context?\n. @lugorian Will look into it soon.\n. @joeybloggs Thanks for the detailed information. I will definitely keep everything in mind for v3.\nUpdate: Context in Echo is the core of the framework, dropping it would not be a good move. We definitely need to understand this issue and address it differently.\n. @aarondl I am failing to understand the benefit of splitting the context into multiple interfaces. If you need to extend context, you can simply do it as mentioned in this guide https://echo.labstack.com/guide/context\n. @bunkat Context mostly remains same, you will have all those methods.\n. @lhecker Waiting for opinion from people...\n. @leedstyh We have dropped WebSocket API as it is much easier to to write your own handler based on the WebSocket API of your choice.\nSee: https://github.com/labstack/echo/tree/v3/recipe/websocket\n. @apaganobeleno @freWalker: Code changes are almost done, however we need support from people:\n- Any more changes to the API (e.g. the new request context... are we good?)\n- Update docs to reflect v3\n- Update recipes\nIf anyone is interested in updating docs (they are part of the main repo now), please let me know.\n. In docs:\n@bluealert: guide/\n@apaganobeleno: recipe/\nAs a first round, lets start with the above and just update code mentioned in the docs to v3 (make sure the code works!).\n. @apaganobeleno It is a hugo static site, you can run it locally. I have made sure all recipe code is compiling with v3, we just need to check if docs/recipe/* reflect the right version - all in v3 branch. Later if you are interested, you can looking into docs/middleware*.\n. Yes.\n. Once we release v3, master will be pointing to v3. Ideally, we should keep source code reference as is. With that there might not be much change in the docs. In short, we want to make sure all the code mentioned in the docs should be for v3, for instance, README.md needs a complete revamp. I am sure there will be many changes in /docs/guide*. May be you can take that too.\n. @apaganobeleno \n\nShould i send a PR with the wording chance on the v3 middleware recipe ?\n\nYes\n\nWhat should we do regarding graceful doc? same for GAE ?\n\nGraceful shutdown is now part of the core framework using graceful lib. I am still not sure what to do with the recipes, probably we will keep both, however for graceful just mention that it is part of the framework and update on how it works.\n. Looks good. For future just send me a PR and we can discuss over there. \n. Just updated.\n. Anyone up for updating the README.md for v3?\n. @apaganobeleno Sure, also look into https://github.com/labstack/echo/pull/667 PR.\n. @apaganobeleno We will just have a benchmark chart based on Echo performance for various API set.\n. A new v2 release is cut from master branch and master now has v3, still not released yet but it makes it easier to develop on master.\n. @apaganobeleno I need help in updating the migrating guide and change log, please let me know if you are in. You can send me initial PR and we can take it from there.\nPS: We will drop v1 mention from the migrating guide.\n. @apaganobeleno Update: we still need to retain v1 to v2 migration.\n. Thanks everyone!!!\n. @apaganobeleno These changes also need to be carefully copied to website/index.\n. @fcristovao What's the fix?\n. Feel free to re-open.\n. Tracking here #755. I have been struggling with it for a long time now. What are the suggestions? \n. > I would resist the temptation to have echo context implement go Context.\n\nJust because they have the same name, they aren't really the same things.\nThey have different purposes and different semantics.\n\nI agree.\n\nGo back to just having functions to get and set the go Context as a\nproperty of the echo context. And on go17 if make the setter and getter\njust forward to the http.Request context methods.\n\nI will leave it as is but in v3 I will completely remove Go context.\n. @ansel1 Let me know how https://github.com/labstack/echo/commit/4dc771611a3ed6d586abbe436541e75e391e89fe looks and we can merge it.\n. Cool, I put that in notes for v3.\nUpdate: If you have more suggestion, please comment here https://github.com/labstack/echo/issues/665\n. @leoycx Please explain in detail!\n. @victorhaggqvist Can you confirm if this issue is the same as https://github.com/labstack/echo/issues/634 and https://github.com/labstack/echo/issues/479?\n. Tracked in https://github.com/labstack/echo/issues/479\n. @andreynering What does c.Keys return?\n. Why don't you pass the whole Context as data and use its Get function inside?\nBased on https://echo.labstack.com/guide/templates\n``` go\npackage main\nimport (\n    \"html/template\"\n    \"io\"\n    \"log\"\n    \"net/http\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/engine/standard\"\n\n)\ntype Template struct {\n    templates *template.Template\n}\nfunc (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {\n    return t.templates.ExecuteTemplate(w, name, data)\n}\nfunc Hello(c echo.Context) error {\n    c.Set(\"key\", \"val\")\n    return c.Render(http.StatusOK, \"hello\", c)\n}\nfunc main() {\n    e := echo.New()\n    tmpl, _ := template.New(\"test\").Parse({{define \"hello\"}}Hello, {{ .Get \"key\"}}!{{end}})\n    t := &Template{\n        templates: tmpl,\n    }\n    e.SetRenderer(t)\n    e.GET(\"/hello\", Hello)\n    log.Fatal(e.Run(standard.New(\":1323\")))\n}\n``\n. @andreynering IMHO, we should be good. With this approach, we don't have to worry about copying the map as it stays immutable.\n. @Puffton  which version?\n. @asdine Please verify.\n. @asdine Can you try to reproduce it with a non-empty group?\n. @asdine Can you double check with a non-empty group. It works for me.\n. @jrdnull thanks for your support.\n. @timvaillancourt You can supply your customListenerwith all the configuration. In Echo v3, you will be able to supply custom TLS config.\n. Coping it is the only way out. It is originally copied fromGostandard lib. \n. Now?\n. please verify\n. @ansel1 I did a small modification, can you please verify?\n. Fixed in #682\n. What happens if you removeapp.Group(\"/test\")`?\nAs you pointed in group.go, we map Any with route * so that we can execute any group level middleware even if user doesn't specify any route. I simply could not think of any good solution.\n. Consider a case where you have a group test with a bunch of middleware but no handler e.g. serving static files using a middleware. Now all requests to serve static files will start failing as they are terminated right from the router (not found) without executing any middleware.\n. I would advice to handle your /test* within the group.\n. @apaganobeleno In v3 this was resolved by exposing a function to set Request in Context.\n. Sure, thanks for your support!\n. @thomasrusche Context#HTML is meant to be used for quick html with embedded css. For your case use Echo#Static - check static section in the guide.. \ud83d\udc4d good job! just keep an eye on the changes I am doing on v3, might have to update docs accordingly. \n. You don't need to read the request body, bind function will do it for you.\n. Can you try to update github.com/dgrijalva/jwt-go library?\n. @apaganobeleno Thanks for your support \ud83d\udc4d. Is it ok if I ping you for any documentation related work?\n. @apaganobeleno Thanks, there are open issues labeled help wanted and we definitely need people to fix those. \n. @apaganobeleno are you available on gitter chat? Question: is v3 readme/index update to latest changes in v2?\n. @apaganobeleno Sorry for the confusion. Are changes from this PR (https://github.com/labstack/echo/pull/667) applied into v3 README.md/index.md?\n. @apaganobeleno Do you think we can get them back?\n. Check index.md too. Let's get v3 out.\n. OS? Browser?\n. Should be fixed by now. Please verify.\nPS: Clear your browser cache.\n. All links are working, please clear your cache.\n. Let me know how this works now.\n. Thanks for reporting, please verify the fix.\n. @jchorl Docs need to be fixed. We now just use the standard context as a field.\n. @etnbrd What about appengine NewContext(ctx.Request())?\n. it is hard to understand what you mean by real time?\n. The idea is to extend template in logging middleware to include header, form and query param, something like https://github.com/labstack/armor/blob/master/plugin/plugin.go#L135. I am happy to accept a PR. I am shooting it for v3.\n. You will have single variable for each header like ${header:ContentType}.\n. Yes, but it is not implemented yet.\n. @apaganobeleno There is an implementation for your reference https://github.com/labstack/armor/blob/master/plugin/plugin.go#L135. The idea is to use tag like ${header|form|query:<name>}. This is should reflect in godoc and website.\n. All your changes so far are in one PR - it's hard to review. Do you mind creating a new branch/PR for each set of work?\n. Closed in https://github.com/labstack/echo/pull/708\n. something is wrong, this still has the complete list of commits so far.\n. @apaganobeleno Your branch  says\n\nThis branch is 13 commits ahead of labstack:v3.\n\n1) Make sure your changes so far are in v3\n2) Recreate your fork\n3) Send a new PR\n. @apaganobeleno Copy the middleware LoggerConfig struct as is in logger.md\n. @apaganobeleno thanks \ud83c\udf89 for your contribution.\n. @tatsuya-ogawa We need more details on this issue.\n. @tatsuya-ogawa Please verify if this is fixed with the recent changes to v2 and v3.\n. @tatsuya-ogawa How about setting allowedOrigin to origin if it is passed in the request header, otherwise use *? I am not sure about the specs but lets double check before making this change.\n. > But this method can not coexist with the method using credential.\nWhat credentials are you talking about?\n. Thanks for your work! \ud83d\udc4d \n. what is it about?\n. You have few choices\n- c.Attachment\n- c.File\n- c.Stream\n. Thanks for reporting. It is fixed now.\n. Please specify version or commit. The recent changes to v2 and v3 should fix this. Please verify.\n. I would advise to use some package manager (like glide) to retain v2 as master now points to v3. It is good to move to v3 if you don't have much change. In short, go get -u <url> will get your latest v3 and it should work.\n. go get -u https://github.com/labstack/echo this will get you the latest v3. You might have to change code to adapt to v3 (upgrade to v3), look for examples on the website.\n. Yes, it is still an issue, working on it.\n. Actually it works.\nHere is the sample code\n``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.CORS())\n    e.File(\"/\", \"swagger.json\")\n    e.Start(\":80\")\n}\n``\n. v2 is hosted here https://echo.labstack.com/v2. You need to use a package manager to pin to v2 version.\n. @jessemillar Becausemasterbranch now points to v3 (still not released). You should use a package manager to pin your dependency to v2. e.g. glide / govendor.\n. - It has to be port 443 and redirect 80 > 443\n-le.cache` will be created from where you run the server or you can provide absolute path - it should work in either case\n- List of hosts is just an added security so it should work for all domains\n. That is more of a Go question. Use goroutine.\n. Where is the redirect code?\n. Why don't you use redirect middleware?\n. You are redirecting everything in a loop. Redirect middleware does proper checks to redirect to https.\n. Try removing your vendor directory and install\n. Can you provide some routes to reproduce the problem? I am not able to reproduce this issue with provided routes.\n. Yea, a working example would speed up debugging. \n. Thank you, I will look into it.\n. Please verify\n. Sometime back there was request to add a response hook. It will be triggered before writing the response, may be that can help?. Echo v3 is not backward compatible. You need to do a fresh install.  I am not sure about the second error.\n. Is it on google app engine? https://github.com/tylerb/graceful/pull/94 should resolve it.\n. >  http/auth_test.go:53: cannot call non-function e.Logger (type echo.Logger)\necho.Logger is not a function now, it is a field.\nYou can look into latest test cases to find out more about testing.\ngo\nreq, _ := http.NewRequest(GET, \"/\", nil)\nrec := httptest.NewRecorder()\nc := e.NewContext(req, rec)\n. I am not able to reproduce it with the following code:\n``` go\npackage main\nimport (\n    \"fmt\"\n\"github.com/labstack/echo\"\n\n)\nfunc handler(c echo.Context) error {\n    fmt.Println(c.ParamNames())\n    fmt.Println(c.ParamValues())\n    fmt.Println(c.Param(\"promptID\"))\n    return nil\n}\nfunc main() {\n    e := echo.New()\n    e.GET(\"/prompts/:promptID/episodes\", handler)\n    e.GET(\"/prompts/:promptID\", handler)\n    if err := e.Start(\":1323\"); err != nil {\n        e.Logger.Fatal(err)\n    }\n}\n```\n. @fat still a bug?. Please email me routes to reproduce the issue and we can fix it. \nSent from my iPhone\n\nOn Nov 29, 2016, at 3:05 PM, fat notifications@github.com wrote:\nhaven't had time to track down whats causing it sorry\n\u2014\nYou are receiving this because you were assigned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Closing due to inactivity.. It is because of the graceful shutdown library. Can you try to set shutdowntiomeout? Also check how graceful lib works on windows. I don't have windows to verify. \n. We use this library https://github.com/tylerb/graceful, can you try to run an example using it directly?\n. Look at the project'' readme, you will find an example. The idea is the run it without Echo and see how it behaves.. @TianDaGe I am not sure about the issue and I don't have windows to test. Looking at the comments, issue seems to be with the windows setup else it should be reproducible by all users. Closing for now.. Following works for me with Go 1.7.3 and latest Echo\n\nserver.go\n```go\npackage main\nimport \"github.com/labstack/echo\"\nfunc main() {\n    e := echo.New()\n    e.GET(\"/\", func(c echo.Context) error {\n        return c.String(200, \"OK\")\n    })\n    e.Logger.Fatal(e.StartAutoTLS(\":443\", []string{\"test.lab.st\"}, \"le.cache\"))\n}\n```\nOutput\nsh\nroot@test:~# ./server\n \u21db https server started on :443\n2016/11/22 03:26:49 [INFO] acme: Registering account for\n2016/11/22 03:26:54 [INFO][test.lab.st] acme: Obtaining bundled SAN certificate\n2016/11/22 03:26:55 [INFO][test.lab.st] acme: Could not find solver for: http-01\n2016/11/22 03:26:55 [INFO][test.lab.st] acme: Could not find solver for: dns-01\n2016/11/22 03:26:55 [INFO][test.lab.st] acme: Trying to solve TLS-SNI-01\n2016/11/22 03:26:57 [INFO][test.lab.st] The server validated our request\n2016/11/22 03:26:58 [INFO][test.lab.st] acme: Validations succeeded; requesting certificates\n2016/11/22 03:26:58 [INFO] acme: Requesting issuer cert from https://acme-v01.api.letsencrypt.org/acme/issuer-cert\n2016/11/22 03:26:58 [INFO][test.lab.st] Server responded with a certificate.. Feel free to re-open.. What exactly is this? Both domains are  same.\n\nError Detail:\n    Validation for subdomain.domain.com:443\n    Resolved to:\n        xxx.yyy.zzz.aa\n    Used: xxx.yyy.zzz.aa. This error doesn't seem right to me, both IPs are same. Can you try to run this example from https://github.com/rsc/letsencrypt?. Thanks \ud83d\udc4d for your contribution!\n. thanks \ud83d\udc4d for your contribution!\n. master branch is v3, which is not backward compatible. If you want to continue using v2, use a package manager to pin your dependency.. Yes we do. . Thanks for your contribution. . @mrLSD I am not familiar with the concept. If Go supports it, we can extend the API to cover it.. @ahmdrz If you are using fasthttp you can't have http.Request. You should look into v2 branch for example and docs.. Can you provide an example and steps to deploy?. @poweroftrue We can have a build flag for not including auto TLS for gae. Do they have any issue open for this - just  for tracking, once resolved, we can revert back.. \ud83d\udc4f . Due to unavoidable reasons we had to drop static middleware so html5 mode is not available. You can trap not found error in html error handler and return your index.html page. I can keep this issue open to add a recipe for it.. This is fixed in latest code.. We need to modify jwt middleware to add AuthScheme in the config. The default value will be Bearer. I am open for a PR.. Do we want to expose third-party properties? Tomorrow Go might come up with shutdown process. Is there a better way?. @apaganobeleno That's the reason I don't want to expose third party properties via Echo. Use a package manager like glide or govendor and specify v2 as version in the config.. You don't need middleware to run this example. Make sure you have set $GOPATH and your project is within it.. /home/nlamirault/Apps/golang/src/github.com/nlamirault/toto should be in GOPATH and use the following command to get the framework.\n\ngovendor fetch github.com/labstack/echo@v3.0. It is glide issue reported here https://github.com/Masterminds/glide/issues/468. For now you can manually add your dependencies in glide.yaml.. I was thinking to extended http error handler and capture 404 (may be for specific routes e.g. /static/*).. @AlekSi Rather than changing imports to gopkg.in we should rely on some package manger to pin the dependencies.. > github.com makes it hard (v3 is pulled, and everything is broken).\nHow is this possible if you have pinned your dependency?\nOn top of that, we also face problem on the CI server:\nhttps://travis-ci.org/labstack/echo/builds/136534464\nhttps://travis-ci.org/labstack/echo/builds/136534559\nhttps://travis-ci.org/labstack/echo/builds/136534464\nPS: I haven't looked into the root cause.. @RyanCopley You can use Context#Blob. @RyanCopley You can set content type in Blob. Can you follow the sequence like JSON, JSON => JSONBlob => Blob?. Closed in #765. Thanks for your contribution \ud83d\udc4d . Rather than an option, I would recommend to add two additional functions like JSONPretty and XMLPretty in Context. Happy to accept a PR.\n/cc @apaganobeleno . Sure, we can do it.. Done.. > When upgrading from echo 2 to echo 3, this has caused some problems.\nWhat kind of problem? In v3 Binder is made public.\nAren't Scanner and Binder interface similar? May be I am missing something.. @flimzy You can send a PR to have a better understanding, doesn't have to a final one - just enough to understand and we can work through it later.. @flimzy It is still under review. I will get back to it soon.. So this is specifically for form data?. Do you mean JSON codec takes care of calling Scan()?. Bind data is not limited to forms, it can also bind query parameters, so naming it with form won't be appropriate. How about:\ngo\ntype interface Unmarshaller {\n  Unmarshal(data string) error\n}\ndata could be []byte?. How about this?\ngo\ntype Unmarshaler interface {\n        UnmarshalData([]byte) error\n}. ~~If you look into the code, we are binding string, so UnmarshalString(string) error could also be an option.~~\nUpdate:\nAnother point in favour of Unmarshal is that it is suppose to bound to struct and decode itself and not any kind of codec. With that you are free to implement it the way you want, you may decode it with json or xml inside. Let me know your thought.. UnmarshalParam(param string) error sounds good. Please extend the docs (guide/request) to mention this - few lines should be good.\nPS: Isn't interface name Unmarshaler too common? How about ParamUnmarshaler or BindUnmarshaler?. I understand, I was concerned within the package as it is too general. In Echo, we usually prepend with the behavior like Log, Bind as package is flat. Let's call it BindUnmarshaler.. Lets keep it string, as param will always be string in our case.. thanks for your contribution \ud83d\udc4d . We have gone back and forth in these issues and I am not sure how it should be addressed. Appreciate everyone's opinion.\n@cdfox @yaa110 @Anon-Penguin @ansel1 @luca-moser @CaptainCodeman . > do not unescape the URI. Let the router see the raw, escaped incoming URI, and match against that\nAgree\n\nWhen constructing the Context and populating it with the path params, unescape the path params. So in my handlers/middleware, when I call c.Param(), I get back a value which has already been unescaped\n\ncan this be done outside the framework? Not in favour of extra calculation inside.. For now, it's even with v2.. Everything is raw. . Can you explain a bit?. No problem. Thanks for using Echo \ud83d\udc4d.. What is  the content type? You can also extend it with your own binder look in the docs.. We have defined the template with name hello and that should be used in Render function. Let me know if that is not the case.. Your case makes perfect sense, but why have modified the template example to use hello.html - it should be hello as we defined the template.. @atbaig When you own http.Server, it is easy to start HTTPS see https://github.com/labstack/echo/blob/master/echo.go#L544. Please update test case and docs to reflect this change.. This is included in the logger middleware now.. thanks for your contribution \ud83d\udc4d . @c0dect thanks for your contribution \ud83d\udc4d. The PR is merged via https://github.com/labstack/echo/commit/23176c639e6838cd5413cb9415fa8fdb93f546ba\nUpdate: I took care of the docs.. thanks for your contribution \ud83d\udc4d . Closing due to inactivity.. @mitty1987 Per HTTP spec only status 204 should not send Content-Encoding header, see #489 - so we should be good here. Let me know if you have any questions.\n. Send some errors with 500, may be json or use drectly write to the response with status code, look into context.go. . > Any reason it is not accessible after first use?\nBind() reads request body directly from the socket and once read it can't read again, hence the EOF error. You can look into this blog post as a workaround: https://medium.com/@xoen/golang-read-from-an-io-readwriter-without-loosing-its-content-2c6911805361. @lunemec You missed out of log.Infoj for printing json output:\n```go\npackage main\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/middleware\"\n\"github.com/labstack/gommon/log\"\n\n)\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.Gzip())\n    e.GET(\"/\", func(c echo.Context) error {\n        log.Infoj(log.JSON{\n            \"uuid\": \"18b32b6a-c7a8-11e6-9d9d-cec0c932ce01\",\n            \"err\":  \"oops!\",\n        })\n        return c.String(http.StatusOK, \"Okay\")\n    })\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n```. @flimzy Can you look into his issue?. This has been fixed in master. Wait for next release or grab from the master.. @imeoer thanks for your contribution \ud83c\udf89 . Thanks for your contribution \ud83c\udf89 . @Noki thanks for your contribution \ud83c\udf89 . @cfreeman thanks for your contribution \ud83c\udf89 . Thanks for reporting.\nRelated issue https://github.com/labstack/echo/issues/752\nIdeas are welcome.\n/cc @Anon-Penguin. I agree to @ansel1. This can be easily achieved using Echo has http.Server handler. I will update the docs to mention it.. Similar issues are being raised more often, what's your opinion about separating out graceful from Echo? We can update the graceful shutdown examples as they were earlier.\n/cc @ansel1 @Anon-Penguin . We can expose SetOutput to control output for logger and color.  HTTPErrorHandler anyways uses logger and sends output as HTTP response.\nLet me know your thoughts.\n/cc @Anon-Penguin. @nshmura Thanks for reporting the issue, this has been fixed. There is another change in the validator function to include context - just incase you want to save any information.. Tags are available for query, form and header. You will need to change the Format property of logger. Simple example below:\n```go\npackage main\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/middleware\"\n\n)\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n        Format: {\"time\":\"${time_rfc3339}\",\"name\":\"${query:name}} + \"\\n\",\n    }))\n    // e.Debug = true\n    e.GET(\"/\", func(c echo.Context) error {\n        return c.JSON(http.StatusOK, echo.Map{\n            \"hello\": \"world\",\n        })\n    })\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n```\nsh\ncurl http://localhost:1323/\\?name\\=Jon\n. Not possible. You will have to write your own middleware. . @garrickjubiao thanks for your contribution \ud83c\udf89 . @tedkornish The idea is to capture all the errors (including not-found & method-not-allowed) via HTTPErrorHandler - which can be defined per instance. Looking at the code you can easily check for these error and take an action. Let me know if you are not convinced.\n/cc @ansel1 @Anon-Penguin  . Upgrade your github.com/labstack/gommon. Feel free to re-open in case it doesn't fix. . Sample code to debug?. @Puffton please verify.. Using form tag to bind query parameters is not right so we have introduced a new query tag. . Will take care of it next time.. Why don't you change it to query tag?. Changing code is better than not doing the right things.. @blockloop thanks for your contribution \ud83c\udf89 . @shamaton thanks for your contribution. I got it covered with the  rest.. @flimzy You have some print statements in the code.. @flimzy are you sure?. I have suggested a solution  #798. It that works for your, please close this issue.. What version of Echo are you using? Try master.. can you try with latest?. Are you talking about Echo v3? This is tracked in #797.. @Puffton  Please verify. @bbrodriges Recent changes have opened up Listener and TLSListener for use. Please let me know if you have any questions.. @moorara Thanks for your feedback, I will look into it.\nPS: Remember master is a development branch and your feedback help use to improve.. @piyushchauhan2011 thanks for your contribution \ud83d\udc4d . I got it covered.. For now, you can use this version of the library https://github.com/valyala/fasttemplate/tree/3b874956e03f1636d171bda64b130f9135f42cff.\nPlease open an issue here https://github.com/valyala/fasttemplate. I raised a PR https://github.com/valyala/fasttemplate/pull/4/files please verify if that works. I don't have a GAE env.. ok, I just fixed that.. @pdf Thanks for your contribution \ud83c\udf89 . so what's the solution?. Send over the code, we will get it reviewed.. HTTPSRedirect is a very generic middleware and it wouldn't be nice to extend it to just include this specific case. You can easily create a custom middleware and include port in the url.. Closing as dep works in the master branch.. go\nl, err := net.Listen(\"unix\", \"/tmp/echo.sock\")\nif err != nil {\n    e.Logger.Fatal(err)\n}\ne.Listener = l\ne.Logger.Fatal(e.Start(\"\")). Updated in docs https://echo.labstack.com/guide/faq. May be related https://github.com/labstack/echo/issues/176. Do you mean how to use Echo as load balancer? . Or if you want to give Armor a shot. @DiSiqueira this change should go to echox project. @DiSiqueira thanks. @DiSiqueira Thanks for your contribution \ud83c\udf89 . @ericmdantas I have added static middleware in master, can you check if it covers all your cases?. @ericmdantas Awesome!. @ericmdantas Can you verify this?. @ericmdantas Your html code makes requests to the following files:\nGET http://localhost:3000/client/index.css \nGET http://localhost:3000/client/index2.css\nWhich doesn't exists, so if you include them with / - it works.. @ericmdantas Can you check with the very latest commit. For me it works.. looking into it.. I have that problem too - env issues.. @ericmdantas It should be fixed now, please verify.. Have you looked into this doc https://echo.labstack.com/guide/error-handling?. Look into this docs https://echo.labstack.com/cookbook/auto-tls and make sure your domain maps to your public IP.. Make sure the cache directory is writable. Do you see a certificate in your cache directory?. acme library has been under active development, please retry with the latest code. Closing for now, feel free re-open.. Please wait for the next release or use the master.. @usk81 Do you mind using gommon/random to generate an ID? may be 32 chars.. @usk81 thanks for your contribution \ud83c\udf89 . @usk81 No worries, this was taken care of. The config allows you to use a customized generator, so UUID should not a be problem.. Are you looking into the right docs https://echo.labstack.com/cookbook/http2?. There is a typo about engine.Config but rest all works good, I just ran it. Where are you stuck? . What are your results with Chrome?. Please provider a working code with relevant client request.. @amenzhinsky Like you mentioned, people won't be able to serve files outside cwd, I think it is a breaking change. Even in our test cases we are using relative path, which actually failed.. I believe it uses hello as the name defined in the template, can you check if it works without the extention?. @freeformz thanks for your contribution.. @amenzhinsky They are required for the same reason as Server. Imagine when you are running both http and https and you need to have access to a Server object.. Looks good to me. Also, you can just return e.TLSServer.Close().\n. I think Server and TLSServer should be isolated, consider a case when you modify s.Addr in the code.\nHow do you use (*http.Server) Serve(net.Listener)? Can you do it by setting e.Listener or e.TLSListener?\n. @amenzhinsky This is merged with e7c89c424f0e4b0e9d5b47027701e269d4028a44, somehow I lost your commit but the code is in. Thanks for your contribution.. What is the function of NoRoute? If you are looking for handling route not found requests look at https://echo.labstack.com/guide/error-handling. Echo#DefaultErrorHandler captures all the errors and it can also be customized.. Below below works for me:\n```go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    m \"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n    e := echo.New()\n    g := e.Group(\"/group\", m.Logger())\n    g.Use(m.Logger())\n    g.GET(\"\", func(c echo.Context) error {\n        return c.JSON(200, \"Hello, World!\")\n    })\n    e.Logger.Fatal(e.Start(\":1323\"))\n}\n```\nPlease check your middleware.. @nshmura Thanks for your contribution \ud83c\udf89 . Please ask questions in the forum. I doubt that it is not being captured in the output you specify. Do you see other logs?. Have you checked where your standard logs are going? Most likely you have a call to https://golang.org/pkg/log/#SetPrefix. Can you try log.Println(\"test\") somewhere in the code and see where it lands?\nUpdate:\nRelevant issue https://github.com/labstack/echo/issues/680. What version of Echo are you using?. @chenclee Which version are you using? It is correct for Echo v3 https://github.com/labstack/echo/blob/master/echo.go#L80.. Please use https://github.com/labstack/echo/releases/tag/v3.1.0-rc.1. It seems like you are using Contex#Bind to decode an xml payload, if that is the case, we only check for application/xml. Not sure if we would like to include text/xml?\n@Anon-Penguin @ansel1\nhttp://stackoverflow.com/questions/4832357/whats-the-difference-between-text-xml-vs-application-xml-for-webservice-respons. As @ansel1 stated, for any custom content type you should use set a custom binder which wraps the default binder, however this is just an alias for application/xml so I have included it in default binder. Please verify.\nI will update document on how to use customer binder (if it's not there ;). @zwpaper: Thanks for your contribution \ud83c\udf89 . This is the behaviour with current implementation of the router. You probably need to add /social/* route to capture that request and all other requests e.g. /users/joe will go via /* route.\nPlease re-open if you have any questions.. @adred Regardless of this logic, have you tried writing to a file directly? I tried code below:\n```go\npackage main\nimport (\n    \"github.com/labstack/gommon/log\"\n    \"os\"\n)\nfunc main() {\n    file, _ := os.Create(\"/tmp/out.txt\")\n    log.SetOutput(file)\n    log.Error(\"hello\")\n}\n```. Can you make sure your gommon is update to date? I test this code on mac.. @nebiros Can you trim down your code to a minimal working example for debugging?. You have a couple of logging system here:\n\nLogger middleware for which you are setting up the output loggerConfig.Output = f\ne.Logger which defaults to stdout, you need to set its output to f as well e.Logger.SetOutput(f).. Please verify. Related: https://github.com/labstack/echo/issues/766. @mr-tron This has been discussed many times in the above mentioned issues and finally we decided to move the unescaping logic for any kind of parameter outside the framework. So in your case you can simply unescape the parameter using url.QueryUnescape(c.Param(\"s\")). Don't hesitate to continue the discussion.. Okay, we got it resolved in b2430fc4a8c023dd6a07fd3f7be19f3747861dca.. c.Request().Header.Get('X-Auth-Token'). The tutorial on the website uses Echo v2. You have to use a Go version manager to pin the dependencies as the master branch points to Echo v3.\n\nMigrating from Echo v2 to v3 is pretty straight forward. https://echo.labstack.com/guide/migration. @nownabe Thanks for your contribution \ud83c\udf89 . You need to set JWT in your request, something like below:\ngo\nreq.Header.Set(\"Authorization\", \"<JWT>\"). @VICTOR-LUO-F Thanks for your interested in Echo and support offer. I am looking into https://gohugo.io/content/multilingual documentation on multilingual. I will get back to you soon... @VICTOR-LUO-F Please use this branch to continue working on translation. Each *.md file needs a counter *.cn.md file with Chinese content in it. Good luck!. @VICTOR-LUO-F Please note that changes also need to be done in config.toml file (just adding content to the placeholder).. I have done the basic setup for translation in the configuration, you can read more here https://gohugo.io/content/multilingual. Now all we need is the Chinese content via *.cn.md and you can browse the website at http://localhost:1313/cn.. Great! . @VICTOR-LUO-F Any progress?. Sure!. Closing as no progress reported.. Fixed in #1164. In skipper you can check for request method and path?. Today, this is the expected behavior. You can use a custom binder http://www.gorillatoolkit.org/pkg/schema. More https://stackoverflow.com/a/34841218/197473. @countstarlight You can look into this project https://github.com/nicksnyder/go-i18n. Let us know if you need any help to make it work with Echo.. @ole108 Thanks for your contribution \ud83c\udf89 . @cesardevera I had a similar setup and I achieved it using a shared directory. If you are not going to hit the limit than you can also have a certificate for each server - not a problem.. Thanks for your support.. Yes Go 1.7+ is recommend. . > Does each new HTTP request spawn a new goroutine for my handler\nYes\n\nso if I call runtime.Goexit() from the main handler, it will not disrupt any other http requests?\n\nLooking at the definition of runtime.Goexit() you should be fine, but I would suggest that you run your tests to confirm it.. Thanks for your contribution.. Thanks for your contribution \ud83c\udf89 . This will be covered in https://github.com/labstack/echo/tree/issue-950. Feel free to send a PR with test coverage.. Fixed 412823eabb0f1e4c0b93fcf7a26232099469938d. Fixed in 1963e270704e8adb76521fe57dca1f8e1608cb26. Fixed in ac0a38d995f1a9075e970be40c71b3fc595dcfee. @subchen See if you also update the docs https://echo.labstack.com/guide/response#send-json?. Tracking in https://github.com/labstack/echo/issues/498. @hvarga Thanks for reporting, I have updated the docs to use httptest.NewRequest https://echo.labstack.com/guide/testing#testing-handler.. Please follow https://github.com/labstack/echox/issues/19. Closing due to insufficient information about the issue.. All error messages go to centralized http error handler, which is customisable via Echo#HTTPErrorHandler. In that function you can check for Missing or invalid jwt in the request header message and act. Ideally we should be return pre-declared error messages - I will keep this bug open for that.. Fixed in https://github.com/labstack/echo/pull/999\nDetails: https://forum.labstack.com/t/custom-error-message-in-jwt-middleware/325/4?u=vishr. Fixed 33b4940cba2aaa82812d6bb48414337040f07843. You can typecast Echo#Logger back to gommon/log#Logger and call DisableColor(). To completely disable logs set the log level to OFF. Logger is an interface, so you can definitely extend it to use any external logging library. If you have more ideas don't hesitate to comment.. Echo#colorer is only used to display the banner/info during the startup. Apart from that all the colors you see are probably from logger instance. Colors get automatically disabled for non-terminal output i.e. writing to a file or terminals that don't support it. Did you try to call DisableColor() on logger after typecasting?\nUpdate: If you are just talking about the initial setup color logs, please let me know - we can definitely do something about it.. @Gobonoid You can use Echo#HideBanner to hide the startup message.. This is expected as in your test flow JWT middleware is not invoked. As you are just testing the handler, inject the user manually to pass your test cases.. You need to parse your token and set in the context, see https://github.com/labstack/echo/blob/master/middleware/jwt.go#L142. Have you looked into https://godoc.org/github.com/labstack/echo#Echo.Routes?. Echo doesn't come with a cli; however, you are free to expose a private endpoint or output it to a file. I am working on updating the docs to cover it.\nDocs: https://echo.labstack.com/guide/routing#list-routes. @AaronWharton Sorry I am not able to understand what you mean. It is \"spread the word\". Let me know if I am missing something.. No problem.. Empty string can't be parsed to time.Time, the error is clear and originates from Go JSON parser. It should work if you don't send updated_at in the payload.. You need to create *jwt.Token from your token string https://github.com/labstack/echo/blob/master/middleware/jwt.go#L142. @xqbumu I appreciate your contribution to the project. The only concern is external dependencies and this was one of the reason I moved cookbook examples to labstack/echox. We can definitely work through this and find a home for it. Can you provide me casbin's external deps? . @xqbumu Thanks for the information. What do you think about renaming the prefix Authz to CasbinAuth? This will make it more clear.\nUpdated: I will also need some help to update middleware docs https://github.com/labstack/echox/tree/master/website/content/middleware - you can also provide a link to your docs as learn more.. @xqbumu Will get it reviewed soon.. @xqbumu Thanks for your contribution.. @xqbumu I have moved casbin middlware to https://github.com/labstack/echo-contrib/tree/master/casbin. Please review in case if I have missed something.. Try https://github.com/labstack/echo-contrib. @tiabc I am not able to understand the problem. Who creates the token? What type of token X-DreamFactory-Session-Token is?. @tiabc So is it just a matter of extra space when you provide empty AuthScheme? e.g. \" TOKEN\". @alexaandru thx  for looking into it, closing.. @tossp thanks for your contribution \ud83c\udf89 . @siredwin Have you looked at https://echo.labstack.com/cookbook/reverse-proxy?. It works with the latest code. Please share the error details.. Glad to hear.. Why do you have proxy and backend servers into one? . I got it but before I comment further please move this discussion to the forum.. You can use Skipper function in the middleware to add exception for gz files. Check for file extension in request path.. @khaf Can you provide an example or better may be a test case to understand and document it better?. @khaf Nice! Just need to write a test case and I will get it merged asap. . @khaf This is fixed differently, please verify.. @rcousens Probably https://github.com/webx-top/echo is a fork of Echo v2 maintained by someone. If you would like to submit a PR for external middleware use the official https://github.com/labstack/echo-contrib repo.. Looking at https://golang.org/pkg/net/http/httputil/#example_DumpResponse, yes you can. Are you using it for testing?. I don't think you are doing it right. What do you want to achieve? I think DumpRequest is for servers to debug incoming request and likewise DumpResponse is for clients. You already know what response you are sending to the client?. Related https://github.com/labstack/echo/issues/658, https://github.com/labstack/echo/pull/910\nHow about exposing Context#Received() & Context#Sent() for storing request and response body with limit? Will it be useful? How will it affect memory usage?\n/cc @Anon-Penguin @ansel1 @mtojek @heynemann @montanaflynn. I am not wrong the main idea of this requirement is to log messages with request and response body, so make a change to logger middleware should do it? I am planning to include optional request_body and response_body tags to the template and if they are set, dump the body via logger to the output.. @Anon-Penguin If people are using body tags then I would expect them to redirect logs to a file or external system and not display on the terminal. Custom middleware is also an option.\n\nDo we have analytics for if people even read the docs?\n\nYes, about 500 users / day.. I am ok with a new middleware, it is just that there may be overlap of some of the fields/tags.\nQuestions:\n\nMiddleware name (BodyDump, DumpIO, DumpBody???)\nWhat information do we want to capture (request body, response body???)\nJSON format is OK?. Interceptor is a very generic name. Shouldn't it be like logger middleware? With ability to set the writer.. @FrankIT60 Please verify from master branch.. Please ask questions in the forum. @jeyem Please provide a test case.. @jeyem This won't help to debug, please provide an example where it crashes.. Please ask questions in the forum.. @gambol99 The current implementation doesn't fallback in multiple levels, you need to register a route like /api/v0/events/*. Also, you can use Echo#Any() to register all methods.. @gambol99 Please verify.. @s4l1h This is happening as there is no way to pass CustomContext to Render(), however you can extend your custom context to define your own Render function, look into https://github.com/labstack/echo/blob/master/context.go#L384. Something like below:\n\ngo\nfunc (cc *CustomContext) Render(code int, name string, data interface{}) (err error) {\n    if cc.Echo().Renderer == nil {\n        return echo.ErrRendererNotRegistered\n    }\n    buf := new(bytes.Buffer)\n    if err = c.Echo().Renderer.Render(buf, name, data, cc); err != nil {\n        return\n    }\n    return cc.HTMLBlob(code, buf.Bytes())\n}. @nickhudkins Thanks for your contribution \ud83c\udf89 . Closed in https://github.com/labstack/echo/pull/959. @skyflyer Thanks for your contribution \ud83c\udf89 . Please use forum to ask questions https://forum.labstack.com. https://forum.labstack.com/t/compatibility-issues-with-a-session-packages/248. @lunemec Please verify.. @lunemec I think skipper is meant for this purpose.. But you do it based on the file extension? I recommended similar approach here https://github.com/labstack/echo/issues/946. May be we can expose an option Exclude to accept content type to be excluded.. @nicklaw5 thanks for your contribution \ud83c\udf89 . @pcdummy The ideal way to capture all HTTP error is to define a custom HTTP error handler https://echo.labstack.com/guide/error-handling. On a different note, if you are looking to serve your index.html for SPA have a look at static middleware with HTML5 option https://echo.labstack.com/middleware/static#configuration.. @pcdummy I should be ok with that. Can you scan through the code to make this change consistent across? We should cover all error handlers https://github.com/labstack/echo/blob/master/echo.go#L258.. See if you have missed any of the following:\n```\ncontext.go\n499:        return ErrNotFound\n508:            return ErrNotFound\necho.go\n261:        return ErrNotFound\ngroup.go\n24:     return ErrNotFound\nrouter.go\n285:            return MethodNotAllowedHandler\n```. @pcdummy You are missing the following:\nrouter.go\n285:            return MethodNotAllowedHandler\necho.go\n261:        return ErrNotFound. You are right.. @pcdummy thanks for your contribution \ud83c\udf89 . @paultyng thanks for your contribution \ud83c\udf89 . Today \ud83c\udf89 . https://github.com/labstack/echo/releases/tag/3.2.2, follow us on twitter to get updates https://twitter.com/labstack. @dhanunjay can you check if https://github.com/labstack/echo/pull/993 fixed it?. Closing due to scarcity of information.. @goenning Should be ok. @goenning thanks for your contribution \ud83c\udf89 . This has been reverted until we all address all the issues originated after this change #980 #989. This happens because the group you have created doesn't have any prefix and all middleware associated with it will be applied to the root.\nThe code you have deleted is used to trigger middleware for groups that lack a handler e.g. you want to run proxy middleware at /proxy group.. Sure, in the code below a group /proxy is created which proxies all requests to the upstream servers. Note that there is no handler associated with it, now to trigger this proxy middleware we have to register /* route on the group without which the router will return 404. Hope I am clear.\n```go\npackage main\nimport \"github.com/labstack/echo\"\nfunc main() {\n    e := echo.New()\n    m := func(next echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            // Proxy the request\n            return nil\n        }\n    }\n    e.Group(\"/proxy\", m)\n    e.Start(\":1323\")\n}\n```\nPS: I agree we should have a test to cover this part of the code.. @mcquackers You can look into this  comment https://github.com/labstack/echo/issues/782#issuecomment-317503513. Please ask questions in the forum https://forum.labstack.com. @tap1ra thanks for your contribution, I took your changes and got it merged with mine.. Yes, it was a copy paste mistake, I have fixed it.. This package existed in version 2. You need to use a package manager to fix the version or use http://gopkg.in/echo.v2. If you are upgrading to Echo v3, you don't need this package.. Sounds good.. Please ask question in the forum. @jerCarre Can you update the test case?. Yes in key_auth_test.go. @bartoszgolek thanks for your contribution \ud83c\udf89 . @goenning can you review this change?. @goenning A request similar request with params will fail. This change has introduced new bugs recently, do you think this can be handled in a custom binder?. @goenning I understand this PR will fix it, however, I could see a request with params binding to a map will fail. e.g.\nPath: /users/:id\nPayload:\njs\n{\n  \"name\": \"John Snow\"\n}. @goenning Multiple bugs started popping just after this change and if I am not wrong this change was done for https://github.com/labstack/echo/pull/980.. @wonderflow I have reverted this change, things should work fine now.. @amrnt thanks for your contribution \ud83c\udf89 . @jro7 thanks for your contribution \ud83c\udf89 . @splittingfield thanks for reporting, we should have at least made it backward compatible - lesson learned. If you have any suggestion to improve/fix it, please let me know.. @splittingfield Here is the complete discussion https://forum.labstack.com/t/named-routes-for-use-in-templates/241\n@skyflyer might be able to talk more about it.\nI will check on documentation mismatch.. @asdine thanks for reporting, reverting it back.. @goofle thanks for your support \ud83c\udf89 . IMHO, the right way is to return errors and handle them in the http error handler https://echo.labstack.com/guide/error-handling\nUpdate: https://github.com/labstack/echo/issues/923#issuecomment-300303687. @ljesparis @Limoli @lavenderx Let me know what you guys think about this change https://github.com/labstack/echo/compare/custom-jwt-errors?expand=1. @ljesparis I understand that it could be easier to put it in a config but this is against the error handling design for Echo and then you have to do it for all the other middleware. In the new commit, middleware.ErrJWTInvalid is public so you can change it per your need, I hope this helps. Let me know if I have missed anything.. Closing in favor of https://github.com/labstack/echo/pull/999\n@ljesparis You can look for an update here https://forum.labstack.com/t/custom-error-message-in-jwt-middleware/325/4?u=vishr. Have you looked into https://stackoverflow.com/a/33809474/197473?\nWhat is your Go and Echo version? What was it before?\n. @norx85 can you build a minimalist example to reproduce it? . @maogx8 Can you mention the problem you faced and how you resolved it? We can include that in the documentation.. https://forum.labstack.com/t/i-got-an-error-when-using-a-custom-context/334. Is your IP public?. I don't know your network settings but if your host is connected to the internet and port 443 is open it should work with the following changes:\nsh\n-p 80:80 -p 443:443. @asardak Thanks for your contribution, I got it covered in a different commit.. Please ask questions in the forum https://forum.labstack.com. Move your middleware before you define any handler and it should work.. You should define middleware first and then any handlers. So, in your example admin.Use should come before admin.GET.. @JermineHu Thanks for your input. I will have a look at it. Don't hesitate to discuss it further if you have any ideas on implementing it. . > @vishr @im-kulikov given how many upvotes this story has, I'd reopen it and give it some more thought. Maybe we can find a way to make it easier for end users to implement custom logic for logging... Thoughts?\nSure. @roxma thanks for your contribution \ud83c\udf89 . @pjebs This came up earlier as well - I think stack trace while logging, as the error is returned and later used to call the HTTP error handler from Echo#ServeHTTP the stack trace for handler is not available - so your understanding is correct. You can look into Recover middleware. Probably to fix it I would move calling http error handler logic into a middleware but I am not sure.. You can't get a stack trace from the returned error. Look into this package https://github.com/go-errors/errors which adds stack trace in the error that you can retrieve in the http error handler. I will update the guide with an example on how to use it. . That will be all internal to the framework, are you interested in that? How does you example output look like?. I am fine with it but just trying to understand how does stack trace looks like and even how to do it - here is the location https://github.com/labstack/echo/blob/master/echo.go#L583. @andizzle I am not able to understand how capturing stack trace within Echo#ServeHTTP() contains middleware/handler error details. Per your code the stack trace should look something like below:\nsh\ngoroutine 5 [running]:\ngithub.com/labstack/echo.(*Echo).ServeHTTP(0xc420080680, 0x146b5e0, 0xc420114000, 0xc420112000)\n    /Users/vr/Projects/labstack/echo/src/github.com/labstack/echo/echo.go:586 +0x2dc\nnet/http.serverHandler.ServeHTTP(0xc420082ea0, 0x146b5e0, 0xc420114000, 0xc420112000)\n    /usr/local/opt/go/libexec/src/net/http/server.go:2619 +0xb4\nnet/http.(*conn).serve(0xc42009c780, 0x146ba60, 0xc420060280)\n    /usr/local/opt/go/libexec/src/net/http/server.go:1801 +0x71d\ncreated by net/http.(*Server).Serve\n    /usr/local/opt/go/libexec/src/net/http/server.go:2720 +0x288. @andizzle @pjebs You might want to look into this package https://github.com/go-errors/errors or https://github.com/pkg/errors which is capable to return an error with stack trace.. @pjebs All  these functions are for low-level usage, for example, just using the router part from the framework otherwise they should be avoided. Let me know if you any questions.. I am not sure but looks like it can handles array out of bounds.. I understand that we can do it without a loop but it is more efficient.. @Gnouc thanks for your contribution \ud83c\udf89 . Fixed in https://github.com/labstack/echo/commit/0473c51f1dbd83487effce00702571d19033a6e5. Please ask questions in the forum https://forum.labstack.com. As I am not able to reproduce it, can you provide a sample code/repo?. Closing as no response from the OP.. See #1156. @stiks Sorry for being late on this!\n\nFor error handling I would prefer to return an error (may be of a type) and handle it in the http error handler.\nOkay with success handler, lets call it SuccessHandler\nOkay with before function, lets call it BeforeFunc - same name/type can be used by other middleware. Closed in #1156. Still needs some test cases.... @bakatz thanks for your contribution \ud83c\udf89 . @bakatz Probably next year ;). @anjmao Can you help me updating the google app engine recipe?. @anjmao thank you!, looking forward for it.. Fixed in https://github.com/labstack/echo/pull/1066. Please ask question in the forum. https://forum.labstack.com. What do you mean?. @wind0r thanks for your contribution \ud83c\udf89 . This came up from a commit https://github.com/labstack/echo/commit/fd9508ca394dd5831556cb7eb5e79f2c2f12c29f towards path param aliases. I am going to revert that change as it is buggy.. @filet0fish please verify.. @alexaandru thanks for your contribution \ud83c\udf89 . Please use it as e.Pre() as it should trigger before router.. @panlilu How about using AuthScheme to control this? If it is empty, use auth directly. Please also include a test case.. @orangain If we move https://github.com/labstack/echo/blob/master/context.go#L233 to the bottom it should work?. @orangain You are right!. @orangain thanks for your contribution.. I am in to put them into respective packages it will eliminate clutter and name clashing, as @alexaandru pointed.\n\nThe only concern is that people don't like change - even if it is for good. May be we can mark it for v4?\n. @im-kulikov I am ok to replace all := short assignment to var for empty initialization. Please make sure we are consistent across the project.. @im-kulikov I gave a second thought later and have decided as below:\n\nBetween := vs var and I would like to stick with := as much as possible.\nFor bytes initialization let's revert to new(bytes.Buffer), for reference https://golang.org/pkg/bytes/#NewBuffer\nLet's keep the internal names as is for now e.g. pnames, pvalues, err. @im-kulikov thanks for your contribution, I really appreciated it. On a side note, and lets be polite in the conversation @alexaandru is new to the project and Go (I believe), everybody here is to learn, collaborate and have fun!!! \ud83c\udf89  . @im-kulikov just a mistake - don't worry \ud83d\ude09 . @im-kulikov @alexaandru can you guys join gitter chat? @im-kulikov If you are interested in fixing autocert please let me know https://github.com/labstack/armor/issues/30. @im-kulikov I was curious to know what is the reasoning for fetching a specific version for dep, is it creating a problem? The issue I see with this approach is maintenance, with every new release of dep.. Fair enough.. @ferhatelmas If I am not mistaken isn't r.Close() called anyways?. /cc @alexaandru . @ferhatelmas Got it, thanks!. You can put a middleware just before the proxy middleware to add/modify headers?. @alexaandru do you want to have a look at it?. @airking05 thanks for your contribution \ud83c\udf89 . @alexaandru can you please have a look at it?. @jney Echo as a framework doesn't handle any kind of OS signals, so I believe with os.Interrupt in the code you hijack the handling from go runtime.. @AdrianLungu can you try this fix?. I think this is fixed. @leedstyh What error are you getting?\n\n/cc @alexandreStein . Cool. @ferhatelmas thanks!. @alexandreStein Thanks for your contribution, I am really hoping for dns based verification to be implemented https://github.com/golang/go/issues/23198. Once done, we should make changes accordingly.. @alexandreStein can you please look into it?. Send me a PR. It should be an easy merge.. /cc @alexaandru Do you want to draft a new release? Let me know if you need any help.\n\nCheck for diff in the commits since last release\nCreate a release notes\nPublish to social channels. 3.3.0 sounds good.\n\nSent from my iPhone\n\nOn Mar 7, 2018, at 5:19 AM, Alexandru Ungur notifications@github.com wrote:\n@vishr Should the next release be 3.2.7 or 3.3.0? Seems like it's more than just fixes in this release, so that would warrant a minor version increment (so 3.3.0).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @acristal thanks for your contribution. @smares You mean something like c.Render() and it should pick the write function to send the response? I am ok with that but what if that content-type is not supported?. @alexaandru Do you want to draft the release? You can put the notes from your commit.. @alexaandru Just converted to MD. Go ahead release it.. @alexaandru thanks for your work!. @IngCr3at1on Even I am not up to date with the vgo. Let's keep this PR open until a bit of more research is done - at the end it should not disturb the existing setup, otherwise we are good. Don't hesitate to reply back.. @florianholzapfel thanks for your contribution \ud83c\udf89 . @rof20004 The logic to have different names for a parameter was dropped as it created serious bugs in the router.. You can look into this issue https://github.com/labstack/echo/issues/1052. @rof20004 I will close it, if you have any questions please reach out to us via chat/forum.. @JReuling thanks for your contribution \ud83c\udf89 . @dreamans thanks for your contribution \ud83c\udf89 . As someone pointed out in the earlier discussions echo.Context and context.Context are not at all related, I would like to keep it that way and not mix them. I am ok to add any convenient methods if desired.. @axw absolutely!. @alexandreStein Will need sometime to go through it :). @alexandreStein again, thanks for your contribution \ud83c\udf89 . The caveat I see is that you can't have a param with .. What do you guys think about it?. @ansel1 @alexaandru ?. @Carpetsmoker @ansel1 thanks for your contribution \ud83c\udf89 . Go 1.7 has been dropped.. @s3rj1k This is the default template without message \n\njs\n{\"time\":\"${time_rfc3339_nano}\",\"level\":\"${level}\",\"prefix\":\"${prefix}\", \"file\":\"${short_file}\",\"line\":\"${line}\"}\nhow would you like to change it?. Ok, the logger you mentioned is different from logger middleware. If you need to modify logger middleware format see https://echo.labstack.com/middleware/logger. The default log format is from the HTTPErrorHandler, in addition to you new format for logger middleware:\nsh\ntime=2018-04-06T13:43:48-07:00, remote_ip=::1, host=localhost:1323, method=GET, uri=/, status=200\n{\"time\":\"2018-04-06T13:43:53.463006443-07:00\",\"level\":\"ERROR\",\"prefix\":\"echo\",\"file\":\"echo.go\",\"line\":\"340\",\"message\":\"code=404, message=Not Found\"}\ntime=2018-04-06T13:43:53-07:00, remote_ip=::1, host=localhost:1323, method=GET, uri=/sdf, status=404\nYou have a couple of options:\n\nImplement your own error handler\nTurn off the logging\n. @s3rj1k Please feel free to update the docs, support from the community is highly appreciated.. Done. Fixed in #1111 . @nono Are you getting this error since https://github.com/labstack/echo/pull/1106?. /cc @Carpetsmoker @ansel1 There are couple of issues report since #1101, I don't want to overload router.go for every case like this. What are your thoughts now? I am in favor of reverting that change.. Closing as #1101 is reverted. Closing due to inactivity and missing details. The only issue I have is that it is a breaking change.. Echo doesn't provide such feature, you might want to leverage 3rd party libraries.. @likuankuan Please provide a test. Have you looked at ErrJWTInvalid?\n\nThis is the proposed changes for JWT https://github.com/labstack/echo/pull/1041#issuecomment-371887936, let me know your thoughts.. @AnuchitO thanks for your contribution \ud83c\udf89 . @ribice Can you provide some code where I can reproduce this issue?. @ribice Don't use slash, it should be grB.POST(\"\", handler) or pass slash in the request.\n. Sure, closing for now, feel free to update.. The following works:\n```go\npackage main\nimport (\n    \"fmt\"\n    \"net/http\"\n\"github.com/labstack/echo\"\n\n)\nfunc main() {\n    e := echo.New()\ne.GET(\"*\", echo.WrapHandler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintln(w, \"*\")\n})))\ne.GET(\"/static\", echo.WrapHandler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintln(w, \"/static\")\n})))\n\ne.Start(\":8000\")\n\n}\n``. @faisalraja Have you looked intoResponse#Before()?. The issue is still open https://github.com/labstack/echox/issues/35. It is simple to use https://sourcegraph.com/github.com/labstack/echo/-/blob/response.go#L40, just pass the function you want to execute.. @mission712 We officially don't support go 1.7 & 1.8 https://github.com/labstack/echo/blob/master/.travis.yml#L2. @alaingilbert Specifying empty group essentially puts the middleware at root level, hence the output. Like @yinheli mentioned, you can have a middleware at handler level to achieve what you want.. @yinheli I am not following you. Do you mean to use different key for some cases? Have you looked at https://github.com/labstack/echo/blob/master/middleware/jwt.go#L15?. @toorop Can you check if this is fixed?. Fixed in #1176 . Closing due to missing details.. @jney I still haven't looked into it - I will soon.. @jney thanks for your contribution \ud83d\udc4d . @chanxuehong It would be helpful if you can provide a reason.. @JReuling thanks for your contribution \ud83d\udc4d . @kesuskim Can you rename it toprotocol?. LGTM, ok to merge. I updated this issue https://github.com/labstack/echox/issues/37. We need to find time to update the docs.. @alexaandru \nAs this is still not merged, I have a recommendation: why don't we usesync.Mapfor store inContext?. >sync.Map` was not really designed for general purpose, as the docs state.\n\nAlso, benchmarks using a regular map indicate zero allocations, while a sync.Map used 2. Perphaps nobody dies from 2 allocations, but I think you should stay away from adding a few allocations here, maybe some others with a new feature one day and so on.\nMutex: BenchmarkContext_Store-4 100000000 117 ns/op 0 B/op 0 allocs/op\nsync.Map: BenchmarkContext_Store-4 100000000 131 ns/op 32 B/op 2 allocs/op\nBoth executed with: GOMAXPROCS=4 go test -bench=Context_ -benchtime=10s -benchmem\nI believe a simple map is safer for any use case a user may have.\nThe code with sync.Map (besides the below, some adjustments would be needed for creating a new context and reseting one):\n```\ncontext struct {\n  request  http.Request\n  response Response\n  path     string\n  pnames   []string\n  pvalues  []string\n  query    url.Values\n  handler  HandlerFunc\n  store    sync.Map\n  echo     *Echo\n}\nfunc (c *context) Get(key string) interface{} {\n  v, _ := c.store.Load(key)\n  return v\n}\nfunc (c *context) Set(key string, val interface{}) {\n  c.store.Store(key, val)\n}\n``\nAnd if you still want to offer theUnsafeContext` option for maximum performance, then we need a simple map, too.\nBenchmarks environment:\ngo version\ngo version go1.11.5 linux/amd64\ngo env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOCACHE=\"/home/msd/.cache/go-build\"\nGOEXE=\"\"\nGOFLAGS=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"linux\"\nGOOS=\"linux\"\nGOPATH=\"/home/msd/go\"\nGOPROXY=\"\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTMPDIR=\"\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\nGCCGO=\"gccgo\"\nCC=\"gcc\"\nCXX=\"g++\"\nCGO_ENABLED=\"1\"\nGOMOD=\"/home/msd/work/github.com/andreiavrammsd/echo/go.mod\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build633382178=/tmp/go-build -gno-record-gcc-switches\"\n\nGot it, I am a little reluctant to introduce a new option and would favor it as default. Can you run a benchmark test (already in the repo) to see if there is any different with/without lock or is it even in the path?. > He did provide the benchmarks in the initial post: 545 ns/op with locks vs 408 ns/op without.\nI saw those and we should be ok with that difference. However, I was referring to routing benchmarks https://github.com/labstack/echo/blob/master/router_test.go#L935, if these are not affected - we should be good.. > Why would the router be affected? I don't see how the lock is attained in the router. Am I missing something?\nJust wanted to double check it's been long time ;). I would propose to make Context/Get/Set synchronized using a lock, default.. > Are you OK with keeping the new option UnsafeContext ?\nI don't want to introduce another option in the code. The overhead of a lock is negligible - let's keep it by default.. thanks for your contribution \ud83c\udf89 . @kolaente I believe this came up earlier as well. Do you mind looking at the existing PR/issues? I don't remember what we concluded but I am open for PR and any discussion around that - if it make sense.. @kolaente Why don't you send a PR?. @kolaente Does it work with older issues related to a similar PR?. How do you want to implement your after/before functions? If you are calling them within the handler you already have a reference to Context object.. I don't think this is possible at that level. At most you can externalize your common function.. @ledongthuc thanks for your contribution \ud83c\udf89 . I am traveling. Will update at next opportunity. \nSent from my iPhone\n\nOn Oct 6, 2018, at 9:24 PM, Evgeniy Kulikov notifications@github.com wrote:\n@vishr @alexaandru what you think about?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Sorry guys, I have been really busy lately! @baba2k Can you fix the conflicts and resend?\n. Which version are you using?. Can pull up master can check for logs?. Sure, I will close this issue. You can use master or wait for the next release.. To me such kind of context should begin & end within the handler.. @DarthPestilane Before sending a PR can briefly describe potential changes in the code?. I would refrain from adding a new dependency. Having said that, you can easily extend Context to include your custom JSON codec see https://echo.labstack.com/guide/context. @im-kulikov This is inline with https://semver.org (https://github.com/semver/semver/blob/master/semver.md#user-content-is-v123-a-semantic-version). I am open for discussion.. @im-kulikov We can address this in the next release.. @alexaandru Can you help me with a new release? We should change the tag back to prefixed with v.. Relesed https://github.com/labstack/echo/releases/tag/v3.3.6. I did probably needs an update. \n\nSent from my iPhone\n\nOn Sep 11, 2018, at 2:36 AM, Evgeniy Kulikov notifications@github.com wrote:\n@vishr can we do the same with gommon?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @im-kulikov Never mind, I misread it.. @appleboy thank you!. @im-kulikov Can you review this?. @ribice I think we should do it the same for JSONP and XML too.. Guys where are we with it?. @im-kulikov Can you also help me review open PRs?. Thanks for your contribution \ud83c\udf89 . @blaubaer thanks for your contribution \ud83d\udc4d . @jney I am not able to recall it - this something I wrote a couple of years ago, as far I remember this is per spec. Are you facing any issues around this? Please feel free to suggest any change.. @jney Can we close it?. It was a bot thing, please do it. It might take a while to get to it.. Don\u2019t worry I will take care of it.\nOn Jan 14, 2019, at 10:13 AM, Evgeniy Kulikov notifications@github.com wrote:\n@im-kulikov commented on this pull request.\nIn context.go https://github.com/labstack/echo/pull/1199#discussion_r247599752:\n\n@@ -206,6 +206,8 @@ const (\n  indexPage     = \"index.html\"\n )\n\n+var defaultIndent = \"  \"\nMy mistake\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub https://github.com/labstack/echo/pull/1199#discussion_r247599752, or mute the thread https://github.com/notifications/unsubscribe-auth/AATKtDrVuZJZJq3lWWMfzkDgyQgoUB4sks5vDMjlgaJpZM4XB46c.\n\n\n. @suksest thanks for your contribution \ud83d\udc4d . @phelrine thanks for your contribution. @artyomturkin thanks for your contribution \ud83d\udc4d . Standard constants for methods came recently so there may be users using it. I am okay to replace it internally but let\u2019s keep constants if just in case they people are using it. \nSent from my iPhone\n\nOn Oct 13, 2018, at 1:05 PM, Emir Ribi\u0107 notifications@github.com wrote:\n@ribice commented on this pull request.\nIn echo.go:\n\n@@ -128,20 +128,6 @@ type (\n  }\n )\n\n-// HTTP methods\nIf doubt anyone uses echo.Get instead of http.MethodGet.\nAlso it's quite easy to replace it if it becomes breaking change for someone.\nThis change simplifies the codebase by reusing constants from stdlib.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @alexaandru Sounds good, @ribice do you want to fix the commit message?. @ribice Can you fix the build? Looks like cors_test.go still uses old constants.. thanks @ribice \ud83d\udc4d . This is fixed.. It is released https://github.com/labstack/echo/releases/tag/v3.3.7. Can you guys send a PR?\n@im-kulikov Can you take care of this?. @hchood Could you please resolve the conflict?. I think we should be cognizant about adding new functions to the context. To me, in last 4 years this is the first time someone is concerned about yaml response. I would recommend to extend context and add your own functions - https://echo.labstack.com/guide/context. Thanks guys \ud83d\udc4d . @im-kulikov @alexaandru This is a good discussion. With this change will users still import github.com/labstack/echo? If this is the case and we can fix few existing releases - we should be good.. > @vishr with this PR import must be changed to github.com/labstack/echo/v3 and Go 1.11+ required\n\nThat will be too much for everyone. Somehow earlier I though this import change is just for internal code. Now I am leaning towards what @alexaandru suggested.\n. > But we should change the Echo version accordingly (to say 3.3.9 not 3.3.dev).\nLet's change version reference in the code to 3.3.9, cut a release followed by a commit setting version to next dev something like 3.3.10.dev? - Just a proposal. > Found quite a topic on this: semver/semver#124 :) Tl;dr: semver thinks this it's an implementation detail :)\n\nI'm good with the proposal with one change: should use a dash to separate the additional label, i.e.: 3.3.10-dev as per https://semver.org/#spec-item-11\n\n@alexaandru Cool, can you help me with the release?. Sounds good. Please label v4 wherever appropriate.. I think \n\nI think the DefaultLoggerConfig.Output should be set to nil, and at the end of middleware.LoggerWithConfig, if config.Output == nil then use context.Logger.Output() instead\n\nI am ok with this change, please send a PR.. You guys rock! . @alexaandru On Gitter someone is having problem with v4, can you address that?\n\nThis is new and it's a blocker:\npackage github.com/labstack/echo/v4: cannot find package \"github.com/labstack/echo/v4\" in any of:\n  /usr/lib/go-1.10/src/github.com/labstack/echo/v4 (from $GOROOT)\n  /var/lib/jenkins/jobs/customermanagement/builds/11/src/github.com/labstack/echo/v4 (from $GOPATH). > @vishr @im-kulikov the Go requirements I took straight from Go wiki: https://github.com/golang/go/wiki/Modules#releasing-modules-v2-or-higher I really think they would be the ones to know best which Go version supports what... If they have a Go 1.10 version below 1.10.3, then yes, it will not work. If however they have at least 1.10.3, then it should work.\nThey should either upgrade their Go OR stick to Echo v3.3.10. Removing support for Go modules should really be our last option (I hope)... Thoughts?\n\nI agree, the guy is using v3.3.9 now - which works.. > Can we at least get the go version that they're using?\nFrom the logs it seems Go 1.10.x. > Well, it's that tiny x that matters the most in this case :-)\nNot sure.. It is ok until someone else complains ;). @alexaandru I am leaning towards creating a develop branch for development/WIP and only merge to master what gets released. This PR should be ok to merge.. > So I lean towards a develop branch and when we merge to master, we bump up the version CORRECTLY as per semver: if we only added minor bugfixes in the branch, we increment PATCH number, if we added AT LEAST one feature (of course, backward compatible), we increment MINOR number, etc.\n\nWhich in effect ends up being pretty much what you proposed 3 days ago #1274 (comment) :) Looks like we're finally converging... :) @vishr are you on board?\n\nI like this idea. > So technically we never promised that www* is redirected, only www.\nIt was designed for www only, we should we ok with this PR in v4. Just use develop branch to gather all these changes and once we have a handful of commits, merge to master and release.. @alexaandru @im-kulikov  Going forward can we enforce PR on develop branch? Can we automate it or mention is somewhere?. > Yes @vishr I'm gonna create an issue and the prepare a PR for adding a CONTRIBUTING.md document to the repo, where I'll add what we discussed lately about this.\nPerfect!. Thanks guys!. > ping @vishr @alexaandru\nDefinitely today, I have been busy lately.. > > Why have you dropped exposed properties from Echo struct?\n\nRace condition, as I write in PR description\n\nWhat if people are using it? @alexaandru . @andreiavrammsd thanks \ud83d\udc4d . > Thoughts @vishr @im-kulikov ?\nI agree. > @vishr thoughts?\nAgree. > @vishr Seems like a first-time contributor enhancement. Can I take it up?\nAbsolutely!\n@alexaandru We need to enforce updating docs apart from just writing code and test cases, what do you say?. > @vishr I think \"enforce\" is not the right word, after all this is voluntary contribution, we cannot enforce people to contribute more... But I agree that \"something\" needs to be done (whatever that is... will have to think about it).\n\nAt the very least we could sync the versioning on echo and echox repos, so that we clearly see if we're in sync or how far behind we are. That way, keeping it up to date will be much simpler: if echo is at 4.1.5 and echox at 4.0.9, you know you need to review the changes between 4.0.9..4.1.5 and add those to the docs.\nWe need to point people to echox in the README, in the issue template and the upcoming CONTRIBUTING file (on my todo...).\n\nLets put that in the contribution guide and while the PR is open we can request to update the docs as well.. @alexaandru @im-kulikov What is your opinion?. @hemachandarv Congrats on your first PR \ud83d\udc4d. As far I remember, Pre() is called before the router, Use() is called after the router, and the handler for a route is always called at the end. Let me know your understanding.. \ud83d\udc4d . @atsushi-ishibashi I like the idea of supporting subdomains; however, I would like to see a better algorithm which can support nesting as well. Something like below:\nSplit origin & allowed origin by . and compare all tokens but *. You need to take care of length in the loop. Perhaps we can pull out this function in a util.go\ngo\nfunc IsSubDomain(domain, pattern string) bool {\n}\n//cc @im-kulikov @alexaandru . > Consider using only one log module\nWhich one?. @awbraunstein thanks for your contribution \ud83d\udc4d . - Do we get any benefit with this? If not, lets swap the condition.\n- We have a contant echo.ContentType for Content-Type.\n. It should be application/javascript\n. Can rename function as JavaScript?\n. We would like header to be coming from a constant, look at echo.go. Same for \"Basic\". I see people also using realm, check on that too.\n. This should be moved to echo.go while other header constants.\n. Can't we just display what's coming in the request?\n. I understand, getting real IP should be the case. As @axdg mentioned, we should be using  net.SplitHostPort.\n. I agree with @axdg, there could many possible values to put in the logs. In future we should be capable of specifying the format (with fields) for logger (low priority).\n. I am okay with the proxy headers, that's how it should be, I was more specific about calling net.ParseIP do we really need it, it's just a logger? We should just get the IP, split and display. What do you guys think?\n. @husobee I think, you should bring back the header logic.\n. I am outside, you guys can discuss send me the transcript. \nSent from my iPhone\n\nOn Sep 18, 2015, at 7:54 AM, axdg notifications@github.com wrote:\nIn middleware/logger.go:\n\n@@ -34,7 +64,7 @@ func Logger() echo.MiddlewareFunc {\n                code = color.Cyan(n)\n            }\n-           log.Printf(\"%s %s %s %s %d\", method, path, code, stop.Sub(start), size)\n-           log.Printf(\"%s %s %s %s %s %d\", parseIP(remoteAddr), method, path, code, stop.Sub(start), size)\n  Header is fine, it obviously useful if your running behind a proxy. But as it stands, the values that are being logged would appear to have been chosen arbitrarily. At some point it\u2019ll need a refactor, as vishr said. P.S. do you guys have some time to discuss #205 in glitter? On 19 September 2015 at 12:50:50 am, husobee (notifications@github.com) wrote: In middleware/logger.go:\n  @@ -34,7 +64,7 @@ func Logger() echo.MiddlewareFunc { code = color.Cyan(n) } - log.Printf(\"%s %s %s %s %d\", method, path, code, stop.Sub(start), size) + log.Printf(\"%s %s %s %s %s %d\", parseIP(remoteAddr), method, path, code, stop.Sub(start), size)\n  will do, thanks vishr. \u2014 Reply to this email directly or view it on GitHub.\n  \u2014\n  Reply to this email directly or view it on GitHub.\n. Put your name\n. This returns 0 for me, can you cross check?\n\n\nEdit:\nI actually used below handler\ngo\ne.Get(\"/test\", fasthttp.WrapHandler(func(c *fh.RequestCtx) {\n        c.SetStatusCode(201)\n        // c.Response.Header.SetContentLength(3)\n        c.Write([]byte(\"201\"))\n    }))\n. Can't we just use SetMethod?\n. Is it a bug? If so, lets raise it and mention it in here.\n. @o1egl You can simply return errors.New(\"binding element must be a  struct\") as we are already returning HTTPError inside the caller. \n. What's Bid?\n. Ok, I just renamed.\n. new(User) already returns a pointer.\n. How about naming Meta to MetaHandler as you have for middleware? For me it returns a handler.\n. Lets be consistent by calling it h H / m M and middleware MiddlewareFunc?\n. If this is a generic map, let's use the letter M.\n. What value do you get for anonymous middleware func?\n. Add yourself in the list.\n. Minor but to be consistent lets put a space after //. \n. We don't need path, you can remove it.\n. Change it to header:<name> etc\n. Change it to header:<name> etc\n. Make it just TestLoggerTemplate and use a template with all tags and assert on each.\n. Please change it as in godoc.\n. Do you want to extend the test to cover all tags? Just do a positive test on tag e.g. Contains.\n. You can also modify HTML to use HTMLBlob like in JSON. With that you don't need your test case as it will be already covered - just for consistency.. You can directly use _, pretty := c.QueryParams()[\"pretty\"]. Just for consistency please rename the isPretty to pretty.\nPS: Same for XML. Can you put a godoc like Any or similar methods?. Not for all methods, it should be \"for an HTTP method and path ...\". Lets stick to an.. Just for consistency can we call it bindPathData()?. What is this?. No need to have else just break is enough.. @alexaandru I like middlewareGenerator.. - Let's call this property as CustomTimeFormat\n- Put a line break between Format and CustomTimeFormat properties and add a comment\n- Include this tag (time_custom) in the list of tags at the end of time tags. We prefer without var across the project unless it is really needed, so lets stick to it.. For consistency, please search and replace similar statements across the project. . This statement should be fine as we are reassigning the variable.. Same as above. As above. As above. As above. As above. We keep all errors to lower case as it makes it easy to append further.. Same as above and let's revert all the renaming for consistency.. Please revert the naming to original for consistency.. Let's revert to original names.. Keep errors to lowercase.. I meant the same, please search and replace across the project.. You are ok.. Ok, let's make it errCh.. I think var uri bytes.Buffer is more reasonable.. Looked into append function so it uses the preallocated capacity, so we are good \ud83d\udc4d . We stick to short names as Go guidelines recommend - specially used internally.. rawPath is fine here. Please revert this and rename to pnames.. can you reuse err?. Can you move code into assert.NoError() block like https://github.com/ferhatelmas/echo/blob/6436430d464309275ea5218c1e30b6e81c1d4137/middleware/compress_test.go#L38. We can drop this function and directly use url.PathUnescape - wherever it is being used.. Instead of iterating the entire map, can you check for lowercase key existence? I know this won't work if your key is Name.\n/cc @Carpetsmoker . @ready4god2513 Got it, merged.. @kolaente What is it about?. Can you in as i?. Lets call it params. Can you provide steps to reproduces?. Perhaps you can use echo.Map. Is there a reason we don't do similar in randomBalance?. Lets call it target only. Will it consider go > 1.11?. Looks like this is an error, what do you think?. Perhaps you can add an entry here https://github.com/labstack/echo/blob/master/echo.go#L252 and use it.. Use t.Name != \"\", it is more natural.. Lets call it tgt. I did not read it right, sorry.. Well configuration is one of the case, it could also be possible where upstream server is not available. I would stick to error as we cannot recover from this.. Wouldn't it break code for users? Perhaps we can mark it deprecated and drop it in a future release.. @nipemgroup I have updated the docs to reflect this change.. Can this be a const?. I don't like the idea of using a flag to determine what arguments contain. LGTM. Shouldn't it be reporting?. > This allows iterative update of the content security policy by only reports the violations that would\nI am just talking about the comment, shouldn't reports be reporting?. @im-kulikov Have you taken away these exposed properties?. - I don't think you need o != \"*\"\n- Make equalScheme() part of isSubdomain(). I thinkmatchScheme()is a better name. Similar to abovematchSubdomain()` is a better name. ",
    "mattn": "You seems to rename bolt to echo. Should I re-make PR?\n. updated\n. disabled go-colorable on appengine.\n. crash https://github.com/labstack/gommon/pull/1\n. Sorry OT.\nI created echo-scaffold easy to create app using echo.\nhttps://github.com/mattn/echo-scaffold\nThis is based on https://github.com/dcu/gin-scaffold\nhave fun echo :). @ipfans No. it's an issue that gommon/log doesn't handle build constraint for appengine.\nhttps://github.com/labstack/gommon/blob/master/log/log.go\ngommon/log is terminal specific package. So if you want to use gommon/log via echo on appengine, gommon/log should separate codes for appengine.\n. FYI, on appengine, you should use google.golang.org/appengine/log instead of gommon/log\n. ",
    "coveralls": "\nCoverage remained the same at 62.22% when pulling 22f3cd37ff61e2c1fb32dc410e51bdee4473c2d8 on mattn:windows into 01ff47d32c611605666b1bf650e61f064300a5d5 on labstack:master.\n. \nCoverage increased (+0.42%) to 62.64% when pulling 1a3df329e2a6d396d779dd4ff2096a1e76976f2c on markbates:html into 01ff47d32c611605666b1bf650e61f064300a5d5 on labstack:master.\n. \nCoverage remained the same at 82.35% when pulling 92e25ff741e115395529e6694066951a437ff4ca on mre:patch-1 into 3868503d5156e02486be99ac90d4b55cd4702a44 on labstack:master.\n. \nCoverage remained the same at 82.35% when pulling f3fa49690d17ce437c66d524e88766ded5771550 on jbub:badgefix into cd9fc7fa9147c5364041d9bec59b9c45651b5cca on labstack:master.\n. \nCoverage decreased (-0.19%) to 80.24% when pulling b4ff49aa39624ae9205d9549b47b5b0aa8d13720 on louis-paul:master into d6b57304ef7887ba36d97999d188fb20f2c745b5 on labstack:master.\n. \nCoverage decreased (-2.06%) to 78.65% when pulling 94356721c878cf1f738bcec572c050350d9d98b5 on dlsniper:configurable-server into ab807fe8e5c73a18eb5c134d68271c405ca9ad86 on labstack:master.\n. \nCoverage remained the same at 78.65% when pulling bf6b39fae898c7c71f22be4e6b3fc1c41a4d4a66 on sekimura:typofixes into 05d52420be5bf55684f4505959fdf06eeeea5c66 on labstack:master.\n. \nCoverage remained the same at 92.73% when pulling 8ad952952367a1be9866754ee8361b41eae4571b on gitter-badger:gitter-badge into 4c8797f09eea6744eaf1332894b35405baad9fe5 on labstack:master.\n. \nCoverage remained the same at 91.19% when pulling 8ec563ed382e01cf066c88a7f1dca83763bad007 on chubais:master into d9185ddf5ca121a0e1f3e5cd0309e431609bb379 on labstack:master.\n. \nCoverage remained the same at 91.19% when pulling 5888bc10ec133c4071da7d4643df4924b0667941 on ethervoid:add_code_errorhandler into e3dc3c3fb68895024aefa990d88ddc648cf38a8b on labstack:master.\n. \nCoverage decreased (-0.56%) to 90.63% when pulling 836fdf9e4be573d34f7a592b1adb37bddd6c7aba on ethervoid:add_code_errorhandler into e3dc3c3fb68895024aefa990d88ddc648cf38a8b on labstack:master.\n. \nCoverage remained the same at 91.81% when pulling b1949753a800a76fddd6f74ffa10d3792585f39f on newoga:FixEchoURL into eee38a63764c06e3a6572c7a4801f7d891d4eded on labstack:master.\n. \nCoverage remained the same at 91.77% when pulling 8dd92bce9787e9aac78f5bdaa8640650fb273359 on tanema:master into 67b1dfea04aae6a783f72024154499b189b5ecbc on labstack:master.\n. \nCoverage increased (+0.73%) to 92.5% when pulling ff75c9c907578bae38105ab73b34cd44e305f04c on develop into a956a03841da4f5eda29f95bbc45e1b366e81e11 on master.\n. \nCoverage decreased (-0.34%) to 92.17% when pulling cbc848f721d705d2776f113e14e48cc424e9a890 on tanema:master into e3e16eeed6a57910586c9eab273ec20b42a00a7c on labstack:master.\n. \nCoverage decreased (-1.53%) to 90.98% when pulling 02ca5e44433403497a8c26f64d1744d0cee0e531 on develop into e3e16eeed6a57910586c9eab273ec20b42a00a7c on master.\n. \nCoverage increased (+0.03%) to 91.44% when pulling 5d77fdfe21a4d1bbabd7731751c9e25e1c844fce on mmaelzer:add_middlewarefunc_to_wrapm into ab1e479adac1bde81caf6f7ee895de16a977596f on labstack:master.\n. \nCoverage increased (+0.03%) to 92.45% when pulling e404e1861ec85f297555c1306eb9c200aeedcf9c on mmaelzer:add_middlewarefunc_to_wrapm into ace1453931ddebce5b8f5ab8e0472599687b2e5f on labstack:master.\n. \nCoverage increased (+0.06%) to 87.2% when pulling ba05b6e58e9b88bc45efe00823ab4be4487254be on favicon into e55f5f16366c3f4d6b00c168207d5fc7f2e6ff9a on master.\n. \nCoverage increased (+0.06%) to 87.2% when pulling 8abd4faf083b355a7b4662dd6752e372c3572be0 on favicon into e55f5f16366c3f4d6b00c168207d5fc7f2e6ff9a on master.\n. \nCoverage increased (+0.32%) to 87.52% when pulling 58ed17d35e17b4c13c4ba3c4ddfbdab4a92948c9 on middleware into 6b02099ee68f2c0bb5f5f03fa7d565d4dcfa7e95 on master.\n. \nCoverage increased (+0.12%) to 87.64% when pulling 4f45cd1517b8d409d3da3cb7fe35f26b3714a036 on middleware into a91983797d5e5d865d15ac98fa03fa7c38d8e2c6 on master.\n. \nCoverage decreased (-1.18%) to 86.46% when pulling d90395cf2be0aa79ad815320c807057519b64d7e on middleware into d42bd42d879a13a226a7b9581cbabe6b1cbf3458 on master.\n. \nCoverage remained the same at 86.46% when pulling 609879bf39d86a83ee90ec9f6bc8acd298059f03 on middleware into 9623abc64b51f10807a99452f090cecf533c3c41 on master.\n. \nCoverage increased (+1.71%) to 88.17% when pulling 73fa05f826ca05535ee986503e6807d843684617 on middleware into 561bfc59adebd39048d4c89e6025ce7371240ace on master.\n. \nCoverage increased (+2.71%) to 89.39% when pulling 1ad37ae8963a8eff7271027f08f678086f45ffbb on websocket into a45181261bd3074340b565511d9b72e29d9e9867 on master.\n. \nCoverage increased (+0.43%) to 89.82% when pulling d9c47b69bab988cae734a0c41de54dc6b7e850a8 on markbates:print into 1e117621e9006481bfc0fd8e6bafab48c1848639 on labstack:master.\n. \nCoverage increased (+0.02%) to 81.66% when pulling 87b24d3b7ee421b636d1725de95aff6cfb55c22c on CaptainCodeman:response-size into 4159cef81e137bf85868a7729dcdcabcf158a0ee on labstack:master.\n. \nCoverage increased (+0.04%) to 96.87% when pulling 33886c87586217ed97b9563df6d8f32f1e71078a on router into 80a4b41e16412996a276039e02181d3772c10ffb on master.\n. \nCoverage decreased (-0.34%) to 96.53% when pulling dba1d9f93cb8938d8649624d3178e592f7f6aeaa on ernado:master into 302e85a5ae9959e6e290fb7b89588f17451b9ac8 on labstack:master.\n. \nCoverage increased (+0.0%) to 96.88% when pulling 4ce6b279f068995ccd06f24825102b29b8661764 on ernado:master into 302e85a5ae9959e6e290fb7b89588f17451b9ac8 on labstack:master.\n. \nCoverage decreased (-0.71%) to 96.16% when pulling a71a68ff7b4f915cb64773cf4689d254c7c61c25 on ernado:master into 302e85a5ae9959e6e290fb7b89588f17451b9ac8 on labstack:master.\n. \nCoverage decreased (-0.71%) to 96.16% when pulling 5ea300dae7822f25b8ed91fafa72f3c2099e0a95 on ernado:master into 302e85a5ae9959e6e290fb7b89588f17451b9ac8 on labstack:master.\n. \nCoverage remained the same at 83.266% when pulling cc86fa2232e527175cec9df604385c9f1ebc4e86 on rlcomte:master into 3946a1839c7c7003936cb36f1abcb85042047d6f on labstack:master.\n. \nCoverage remained the same at 83.433% when pulling 3ea6024c6cfff951ac64176a0c68383dc2bd557e on galeone:master into 830b4eff3fabb61d846045ba40f28be91fe9bf14 on labstack:master.\n. \nCoverage decreased (-0.08%) to 83.366% when pulling d6682b8854b4e4117a30da394f273fe7af77ed6f on CentaurWarchief:improvements/middleware/logger into 576dfeb71d257a11e14bf637073b8c64576d2628 on labstack:master.\n. \nCoverage remained the same at 83.041% when pulling 84bf4e8434714cb38de4717751f39aac40e1470a on mtojek:fix_wrapped_handlers_2 into 16c6f478b1a1e585bc88ada99aa423544279b047 on labstack:master.\n. \nCoverage decreased (-0.3%) to 82.718% when pulling e45a61eca6144207c04a7dbc79439b47b9c74cca on ThomasMoinel:master into 16c6f478b1a1e585bc88ada99aa423544279b047 on labstack:master.\n. \nCoverage decreased (-0.4%) to 81.659% when pulling f0fdd2de18af4620f024fd7241ba11bbfca34455 on seedco:fix-gzip into be5148ae27b8d6e502307f056af73adcdee03f48 on labstack:master.\n. \nCoverage remained the same at 81.86% when pulling 4578bd91206a0a757b3f0c00af83c7ed56ff6db5 on nimmen:master into 2dc1d53da5472fc3d3b9eba77a6b46616348fc3c on labstack:master.\n. \nCoverage remained the same at 81.86% when pulling 4578bd91206a0a757b3f0c00af83c7ed56ff6db5 on nimmen:master into 2dc1d53da5472fc3d3b9eba77a6b46616348fc3c on labstack:master.\n. \nCoverage remained the same at 81.86% when pulling 4578bd91206a0a757b3f0c00af83c7ed56ff6db5 on nimmen:master into 2dc1d53da5472fc3d3b9eba77a6b46616348fc3c on labstack:master.\n. \nCoverage remained the same at 81.86% when pulling 9ab08d7daf829dd9dd77dcec4f2950ca86332d73 on zlokomatic:patch-1 into 2dc1d53da5472fc3d3b9eba77a6b46616348fc3c on labstack:master.\n. \nCoverage remained the same at 82.562% when pulling 43b36eca73869bab83bba2e9971b5d45c19b7fe3 on gavv:master into 01ac846770d4965c2fe51babc109f1df6dec0679 on labstack:master.\n. \nCoverage remained the same at 82.562% when pulling 7d6be9786ed7a305cb7268c38d9508bfbb2a987b on gavv:master into 01ac846770d4965c2fe51babc109f1df6dec0679 on labstack:master.\n. \nCoverage remained the same at 82.729% when pulling ffbf2d05ba167724bfa5a05fe20b0fed58f1d2d5 on christianpv:patch-1 into 288164d00a1c6f256c2655e96476be4b65f7629c on labstack:master.\n. \nCoverage increased (+0.4%) to 83.091% when pulling 79b97396dd3d7cf54b613e4f2e959582c201bad6 on aarondl:context-composition into 288164d00a1c6f256c2655e96476be4b65f7629c on labstack:master.\n. \nCoverage remained the same at 79.265% when pulling ac2f2016d3990da100a664c534c83c6fd2f43b8c on Anon-Penguin:patch-1 into 1c2d6341ba2e3027dc4f2371b48f4e2e9fda4790 on labstack:master.\n. \nCoverage remained the same at 79.265% when pulling 9b63bc11bf1b5f19e6d0d42bd4ed8026807ba939 on zjx20:patch-1 into 1d47a6cd30085f81c92900d23eb8cde357f64267 on labstack:master.\n. \nCoverage remained the same at 79.265% when pulling 78fe386e4094ffc072f3d3b9941759144148cb81 on roth1002:master into 1d47a6cd30085f81c92900d23eb8cde357f64267 on labstack:master.\n. \nCoverage increased (+0.7%) to 80.163% when pulling bae2e9ddba349b89b2235df8c5502903cb9b3772 on roth1002:master into c830734fd531a6bab6f7728bb197e6629d1faf5c on labstack:master.\n. \nCoverage increased (+0.2%) to 79.693% when pulling 496ea19a80c44d99eb108fc9a5fa50146f3d22eb on zjx20:patch-1 into c830734fd531a6bab6f7728bb197e6629d1faf5c on labstack:master.\n. \nCoverage remained the same at 79.51% when pulling 929be9d0624ae98016c355451dad655f89e1dbeb on coderhaoxin:test-add-405-method-not-allowed into c830734fd531a6bab6f7728bb197e6629d1faf5c on labstack:master.\n. \nCoverage remained the same at 79.985% when pulling d1d8dd447accb52623f35b4a53bbf4ca574563d1 on coderhaoxin:test-add-405-method-not-allowed into bca2fd450e2d029636ffe364fe40f85c8aa23634 on labstack:master.\n. \nCoverage remained the same at 79.216% when pulling b3dc5a16a83cb40de1cc871507dc1ffa0aa37cc6 on coderhaoxin:test-add-405-method-not-allowed into 392028c8afa28fb95574264f39cbd133978103c8 on labstack:master.\n. \nCoverage increased (+0.3%) to 79.807% when pulling 592790bb4383d16b83a32cf7d419d14078fbe650 on coderhaoxin:method into c830734fd531a6bab6f7728bb197e6629d1faf5c on labstack:master.\n. \nCoverage increased (+0.3%) to 79.688% when pulling d8dc7082c6a58dd8a843c8668eca643c6a0c0dc5 on coderhaoxin:middleware-secure-header into 61fabee05e4d8894dc340b9087449d544442d5de on labstack:master.\n. \nCoverage increased (+0.2%) to 80.207% when pulling e2faa6c2be70531913f7b64c314f57e385e7f84a on coderhaoxin:middleware-secure-header into bca2fd450e2d029636ffe364fe40f85c8aa23634 on labstack:master.\n. \nCoverage decreased (-0.2%) to 79.412% when pulling e4bba208c0abe4cd39aa7217a8ceb34446470f31 on gavv:master into fb8690d42bcb3a44f35c3483dc90e778e385a823 on labstack:master.\n. \nCoverage increased (+0.05%) to 79.644% when pulling e53c1317376b968e0cd8027f7bbe0856032be4e3 on gavv:master into fb8690d42bcb3a44f35c3483dc90e778e385a823 on labstack:master.\n. \nCoverage increased (+0.05%) to 80.015% when pulling e4a90563310adb3922ff386790dce9a55d550bc8 on gavv:master into a708a6781ab4536024047ef5680c7b501e88fad8 on labstack:master.\n. \nCoverage remained the same at 78.347% when pulling 5c392fe8bf49db19e1cb2a0647d2c75b9ff4bd45 on tors:master into 37f05202e8d94977ef9563050630cfb473d07e76 on labstack:master.\n. \nCoverage remained the same at 78.347% when pulling 003f62a640d601c35465a4538ece03274e99ead6 on jmunson:patch-1 into e943ed24be65c0716769b88318309c845b7b144c on labstack:master.\n. \nCoverage increased (+0.1%) to 77.429% when pulling 82b3f5830a90f8bfee286d539aa0848d7f191bd7 on michaelbironneau:master into 795ab0ad7791d7dd36aa1877b70a62e899441b47 on labstack:master.\n. \nCoverage increased (+0.1%) to 77.402% when pulling 5787ace1fbf679c661cd4cebf11d1bd79f07a767 on michaelbironneau:master into 795ab0ad7791d7dd36aa1877b70a62e899441b47 on labstack:master.\n. \nCoverage remained the same at 76.878% when pulling c55fea6a03a7a119c9d99f04c1e4e371bfab03cc on 0x616E676572:fix-1 into ecb021f830efad63ad9ab0bdbcf8a796ce63c412 on labstack:master.\n. \nCoverage remained the same at 76.491% when pulling 4483ad79f2ba7a8b745ebdd494f948d4b6691af3 on olliephillips:master into 23eb4f87dbbc1642de5c51e398e46ae74623f2be on labstack:master.\n. \nCoverage remained the same at 76.491% when pulling 9225ce0f18d0c4daae39d46afc854c156e3ff81c on 0x616E676572:add_cors_method into f73681b91814acbc346d9265c455fe3f7d7a1e22 on labstack:master.\n. \nCoverage remained the same at 76.801% when pulling 348edc31c63f07d416907b9db8722495ea92c800 on ansel1:master into a98843b6e58dcda9364099cc43c4d5b888baf00c on labstack:master.\n. \nCoverage remained the same at 76.801% when pulling beec665d94ca6188f9865bb8441dece97d1dd178 on xujinzheng:master into f3ff6a1d107cbf4dac30ff1ad6a5f2f0bb168f2d on labstack:master.\n. \nCoverage remained the same at 76.801% when pulling 40621eddfd1de6560497ec55770c086af0a7dae4 on o1egl:patch1 into 0d2dac7532e61dc64c14039c629e82c7f2c1b6f6 on labstack:master.\n. \nCoverage remained the same at 76.801% when pulling c71ecb845c2809f381e53fe4e53818860e5c90f7 on olliephillips:master into 0d2dac7532e61dc64c14039c629e82c7f2c1b6f6 on labstack:master.\n. \nCoverage remained the same at 76.801% when pulling af27fefaa96e4194af4a6b61341432a5010fa423 on o1egl:improve_coverage into 02f12767fd348947062580837b85b5f43a2b142f on labstack:master.\n. \nCoverage decreased (-10.3%) to 66.459% when pulling 7747468d9b1bd5e3693b9281b8f1f9f5617b4752 on o1egl:improve_coverage into 02f12767fd348947062580837b85b5f43a2b142f on labstack:master.\n. \nCoverage remained the same at 76.815% when pulling d2249c3f966bf6b6dc6e7dced7a70db0fd7e00a1 on amenzhinsky:master into 09a2ce60a6a7962727731b32ee18edee28503db0 on labstack:master.\n. \nCoverage decreased (-0.06%) to 66.418% when pulling f357f71a234738a24fb3a897572a84ad2c9ae8a7 on amenzhinsky:master into acc91b28f36e51fb0211be6e40691442a2c0ef27 on labstack:master.\n. \nCoverage decreased (-0.06%) to 66.418% when pulling f357f71a234738a24fb3a897572a84ad2c9ae8a7 on amenzhinsky:master into acc91b28f36e51fb0211be6e40691442a2c0ef27 on labstack:master.\n. \nCoverage remained the same at 66.473% when pulling 6bc385a92efe203411e72403d8a6ac1abd64b204 on amenzhinsky:master into acc91b28f36e51fb0211be6e40691442a2c0ef27 on labstack:master.\n. \nCoverage remained the same at 66.473% when pulling a60729752dad5d4c1cf49a5353de9e2d8ee56eb7 on amenzhinsky:master into acc91b28f36e51fb0211be6e40691442a2c0ef27 on labstack:master.\n. \nCoverage increased (+3.4%) to 73.534% when pulling 5c7b6dc20a322f87d1a4d90737192aa9cbec0a7f on amenzhinsky:master into d0ed5830c4b60a83271593baa3d520699882592b on labstack:master.\n. \nCoverage increased (+3.4%) to 73.595% when pulling 514f26c0f619b743c3cbcca6bc201acef1a6b33b on amenzhinsky:master into d0ed5830c4b60a83271593baa3d520699882592b on labstack:master.\n. \nCoverage remained the same at 79.841% when pulling 01ec6360b4b778f9a81c78fdf27541446f071b49 on 2matz:patch_to_body_limit into c654c422c48aa416e4fb30f1a99155ecbd1b24ca on labstack:master.\n. \nCoverage remained the same at 89.083% when pulling ef94c752bd9862ca319839b60c3df087c7975f6c on mtojek:add_echopprof_middleware_2 into a004403b115c30bf4bb0b100a33a1db20b44a35d on labstack:master.\n. \nCoverage decreased (-0.1%) to 88.972% when pulling b99488db10b3bf75f4af1b7da4c6886d324c82ec on mtojek:fix_multiple_form_params into a004403b115c30bf4bb0b100a33a1db20b44a35d on labstack:master.\n. \nCoverage decreased (-0.4%) to 88.598% when pulling aecb1e94f9e52f5dd297cafbff21fe655a3271cf on guidola:master into 6e183fd3d8063a14da04fa4439c52fb6b84d1cdb on labstack:master.\n. \nCoverage increased (+0.02%) to 88.995% when pulling 4be324bfe9a59f044c5a259b180eca4caad432a7 on ansel1:master into 6e183fd3d8063a14da04fa4439c52fb6b84d1cdb on labstack:master.\n. \nCoverage increased (+0.009%) to 89.031% when pulling 3506286b6df5c6ea780e04641bccfb566a1a5d7d on amenzhinsky:multiple-csrf-extractors into fbcdf70c52c155ae9aa58e72ee0532fa2f1cad2e on labstack:master.\n. \nCoverage decreased (-0.05%) to 88.971% when pulling 8e8e82b9df89a7851e3087b72fcc3cf37968f053 on o1egl:custom_encoders into fbcdf70c52c155ae9aa58e72ee0532fa2f1cad2e on labstack:master.\n. \nCoverage increased (+0.6%) to 89.627% when pulling 1a84dbba8889404200039131eb9249e7be18511d on o1egl:custom_encoders into fbcdf70c52c155ae9aa58e72ee0532fa2f1cad2e on labstack:master.\n. \nCoverage increased (+0.06%) to 89.086% when pulling ef0b36f2e0c9db2d154550576690a71b0e7e65e3 on o1egl:query_params_binding into fbcdf70c52c155ae9aa58e72ee0532fa2f1cad2e on labstack:master.\n. \nCoverage decreased (-0.06%) to 89.059% when pulling f9a531baecbd4c6dc4ba1e017974bc13c24cb095 on o1egl:query_params_binding into 647c0b4ec6440d7cd6c11606fd4c7150de1e5436 on labstack:master.\n. \nCoverage increased (+0.06%) to 89.182% when pulling f36ad9a987eb81b4c635db5c3f658819072e99bc on o1egl:query_params_binding into 647c0b4ec6440d7cd6c11606fd4c7150de1e5436 on labstack:master.\n. \nCoverage decreased (-1.9%) to 87.075% when pulling 20ea9c06693dbaa73a58cc3d06d2058804bf88d1 on dxvgef:master into fa80ead5e2739b8e63076081e275d80c96cd7ad7 on labstack:master.\n. \nCoverage increased (+0.1%) to 89.119% when pulling 7d2f381dbe1791af81d926e114ca763afac1c56e on o1egl:fix_bind_form into fa80ead5e2739b8e63076081e275d80c96cd7ad7 on labstack:master.\n. \nCoverage increased (+0.1%) to 89.119% when pulling 9eb924106b8d72b9abccffe58089931005cbd2b9 on o1egl:fix_bind_form into fa80ead5e2739b8e63076081e275d80c96cd7ad7 on labstack:master.\n. \nCoverage increased (+0.3%) to 89.452% when pulling a8b48af60843c288391bb115ba75d459f8fb29a5 on Komosa:master into c00d017178d23261895b096b6e39e9b6bbca37dc on labstack:master.\n. \nCoverage decreased (-0.4%) to 88.531% when pulling 0c88c592bf247949c2034ce81dcb0451a99d1393 on yaa110:master into c1358eda73823de3cab12584f27f047c7ed12b58 on labstack:master.\n. \nCoverage increased (+0.005%) to 88.967% when pulling 09ae47cbe017ea1570af0d52527b2572c64b0c9c on AlekSi:debug into 579cb79a41a2e931699bad83111728d78aa11d48 on labstack:master.\n. \nCoverage decreased (-0.1%) to 87.784% when pulling 1d9860421585344c6fc48a23158047768b3de3f1 on denyskoch:master into 8fc833b4d5ce7661fd9ff64dee028da153531779 on labstack:master.\n. \nCoverage decreased (-0.1%) to 87.744% when pulling 4fda95d76956fef5eee3a39d315ac4814e1de030 on ipfans:master into 50fed083a734a56786826cd579a0867b97a1995c on labstack:master.\n. \nCoverage remained the same at 87.855% when pulling 03bf172b70e90e581759855663b2298711ab4dfa on AdrianLungu:patch-1 into 50fed083a734a56786826cd579a0867b97a1995c on labstack:master.\n. \nCoverage decreased (-0.1%) to 87.564% when pulling 649a1e7885b5ffe915840b3aded87c9dcdba8264 on ipfans:master into e918eacd9d5326f2ec6d5e9077a1f9543c4af486 on labstack:master.\n. \nCoverage decreased (-0.3%) to 87.381% when pulling 0b7959a57d9a16c83e4d4c475c0a219f19809b5a on ipfans:master into e918eacd9d5326f2ec6d5e9077a1f9543c4af486 on labstack:master.\n. \nCoverage decreased (-0.3%) to 87.381% when pulling 0b7959a57d9a16c83e4d4c475c0a219f19809b5a on ipfans:master into e918eacd9d5326f2ec6d5e9077a1f9543c4af486 on labstack:master.\n. \nCoverage decreased (-0.3%) to 87.381% when pulling 0b7959a57d9a16c83e4d4c475c0a219f19809b5a on ipfans:master into e918eacd9d5326f2ec6d5e9077a1f9543c4af486 on labstack:master.\n. \nCoverage remained the same at 87.705% when pulling 8730ecf4948a0f39dedb69bfd2e85fea29ca8597 on mtojek:features/support_go1.7 into e918eacd9d5326f2ec6d5e9077a1f9543c4af486 on labstack:master.\n. \nCoverage decreased (-0.3%) to 87.233% when pulling c1b846c2cddff648630167c076e39235db2391b9 on k2wanko:fix-logger-for-gae into 3cf6551ef6ed6b8a0199f72f6aab69704a05dc57 on labstack:master.\n. \nCoverage decreased (-0.3%) to 87.068% when pulling 1abe9fbc9370f786bdb15a17be7f2d9af7a397f5 on k2wanko:fix-logger-for-gae into 7fa42ab97873359abb7c09db592763436abdbded on labstack:master.\n. \nCoverage decreased (-0.3%) to 87.068% when pulling 1abe9fbc9370f786bdb15a17be7f2d9af7a397f5 on k2wanko:fix-logger-for-gae into 7fa42ab97873359abb7c09db592763436abdbded on labstack:master.\n. \nCoverage decreased (-4.3%) to 83.113% when pulling 65e35ec55434b760b4f897b28b0c6816380675fd on Nomon:patch-1 into a709ca8483bd37a44eccb1238d3b8e3bf4a05241 on labstack:master.\n. \nCoverage increased (+0.09%) to 87.614% when pulling 2557d33c4b6608f574be47c500db27d8c021f5f1 on matcornic:master into ad8f0dd0122515e80a9a2b5eea9e0c6c23c6b34c on labstack:master.\n. \nCoverage remained the same at 87.614% when pulling 48c42e7b90791a62b3d3ace4398634e5d0becb6f on k2wanko:fix-set-context into 98061d3ce335f8e42f6e4092582663fbc46442a5 on labstack:master.\n. \nCoverage increased (+0.03%) to 87.643% when pulling b3d02ef6fe3e031157298586efbc00f214d033c2 on franciscocpg:Inline into 6fd725c9537e95fa20af2021ffe7e7e689dba1fa on labstack:master.\n. \nCoverage remained the same at 87.814% when pulling 02a5b1c393c733507e9c12f190c7eb1d760bb821 on vuduo:master into ab7885d3034694f50ade1b8e3b6931f5998b4395 on labstack:master.\n. \nCoverage remained the same at 87.14% when pulling 43e41f8da197bfd3246ef8ad35b41b282073ddd6 on simplechris:simplechris-patch-1 into 025c53d4cf75797440a72f2007781d8e55c79e6c on labstack:master.\n. \nCoverage increased (+0.2%) to 86.466% when pulling 94b03da8a35a325e7d3aa482de3c7a656a5f9800 on pavelsmejkal:master into 862bee4ebd5fdb34323ba86936e8b25fd6753f83 on labstack:master.\n. \nCoverage increased (+0.2%) to 86.466% when pulling 3ed26fae0f6f02350acfdde1852ccba16bcfedc4 on pavelsmejkal:master into 862bee4ebd5fdb34323ba86936e8b25fd6753f83 on labstack:master.\n. \n\nCoverage decreased (-0.9%) to 85.813% when pulling 50109eea50f6f0fdfccefcbb6ad53b7a88469586 on pavelsmejkal:master into fbce3daade239d34a70a47b9463829211b9b6cc6 on labstack:master.\n. \nCoverage remained the same at 86.279% when pulling 46e5683b288a47f606b92ea367571f5128f97006 on ericmdantas:cookie-typo into 862bee4ebd5fdb34323ba86936e8b25fd6753f83 on labstack:master.\n. \nCoverage remained the same at 86.31% when pulling 2798483877b783898b4a160563d861687aad8d14 on tshkh8:readme_fix into 04f45046b1ebb56690836391fe26f6f1187788b7 on labstack:master.\n. \nCoverage increased (+0.02%) to 86.627% when pulling 8a80f9126ff658ecb36e4e37c583043875ed89f1 on jrdnull:fix_xml_already_committed into a88c4399d4423daa17158e33f23329b330ca2727 on labstack:master.\n. \nCoverage remained the same at 86.669% when pulling 76125a53e5e677969011ae3a1bd767de74c76204 on ansel1:master into 7899588eff4831c0f07c50b6fe2fef43775715c5 on labstack:master.\n. \nCoverage remained the same at 84.856% when pulling 9ca1c7d752fb039b1f2a3c16d3fca3f05a4d012c on apaganobeleno:patch-1 into a5024b80382f0aa76657fd1ac1b6326411c9afb8 on labstack:v3.\n. \nCoverage remained the same at 84.856% when pulling 81f09b34fd6a339f1653f395572945d795fdbc0e on apaganobeleno:v3 into b2479c275d5d00535b7e8b2d9d88b03e9c74f640 on labstack:v3.\n. \nCoverage remained the same at 84.856% when pulling a1d8ef791b9c605713dda4f2c03be10d3bc5e8a3 on apaganobeleno:v3 into b2479c275d5d00535b7e8b2d9d88b03e9c74f640 on labstack:v3.\n. \nCoverage remained the same at 84.623% when pulling d5761e88c61ecd1d2ff90fbc448ab1063e23a81b on apaganobeleno:v3 into ffdb76efc78bbbb7493b7fd250c60b30b9eac14a on labstack:v3.\n. \nCoverage remained the same at 84.623% when pulling df378e892d65afb73f7fd48b9d58943205b69095 on apaganobeleno:v3 into ffdb76efc78bbbb7493b7fd250c60b30b9eac14a on labstack:v3.\n. \nCoverage remained the same at 84.623% when pulling bd2a116e3ba3749b955da94da1fb711a5164c53e on apaganobeleno:v3 into ffdb76efc78bbbb7493b7fd250c60b30b9eac14a on labstack:v3.\n. \nCoverage remained the same at 84.943% when pulling 1eef1cf62e8b33da869787a7659c3d568b5c1fa0 on apaganobeleno:v3 into 8b8aac8aef8c65ecfbf88e4e13b90c24dad4e6aa on labstack:v3.\n. \nCoverage remained the same at 84.845% when pulling 7e5d422d313b4ce3318f8d17c3a4f873be148139 on apaganobeleno:v3 into f720ea1bc8c4e133516e491d147d4bc7a8be83c2 on labstack:v3.\n. \nCoverage remained the same at 84.845% when pulling 07fa1c95a15e3d550081451bff6de39e53b10e7e on apaganobeleno:v3 into f720ea1bc8c4e133516e491d147d4bc7a8be83c2 on labstack:v3.\n. \nCoverage increased (+0.08%) to 84.927% when pulling d5fbd33452458f9d5643c714b576390219fdb95b on apaganobeleno:v3 into 2cb612ff57cbcc5dcf11981bc317b17a811f168f on labstack:v3.\n. \nCoverage increased (+0.08%) to 84.927% when pulling d5fbd33452458f9d5643c714b576390219fdb95b on apaganobeleno:feature-logger-new-tags into 2cb612ff57cbcc5dcf11981bc317b17a811f168f on labstack:v3.\n. \nCoverage increased (+0.08%) to 84.927% when pulling 0b36e61de021349aa5a5ffce9f8fccf675ba61b3 on apaganobeleno:v3 into 2cb612ff57cbcc5dcf11981bc317b17a811f168f on labstack:v3.\n. \nCoverage increased (+0.07%) to 84.911% when pulling 8311a976249c6a95f79817363ac7d73e0d7f37ce on apaganobeleno:v3 into 2cb612ff57cbcc5dcf11981bc317b17a811f168f on labstack:v3.\n. \nCoverage increased (+0.6%) to 85.452% when pulling 9805d2096e8baa99e2fbc6ec5ba1596b218a030e on apaganobeleno:v3 into 2cb612ff57cbcc5dcf11981bc317b17a811f168f on labstack:v3.\n. \nCoverage increased (+0.6%) to 85.452% when pulling 68136b69bdbe9214119604a3b93d38e538de414d on apaganobeleno:v3 into 2cb612ff57cbcc5dcf11981bc317b17a811f168f on labstack:v3.\n. \nChanges Unknown when pulling 695a70fac1c80fb240149250d7a844654ac68475 on kaey:v1 into * on labstack:v1*.\n. \nChanges Unknown when pulling 695a70fac1c80fb240149250d7a844654ac68475 on kaey:v1 into * on labstack:v1*.\n. \nChanges Unknown when pulling 695a70fac1c80fb240149250d7a844654ac68475 on kaey:v1 into * on labstack:v1*.\n. \nCoverage remained the same at 86.689% when pulling f5d3d7f50e3ada715906bdb15b1858bf4ea56d7d on tatsuya-ogawa:patch-1 into 2fc0d3d3f381f9c1d19347d68485ffb47186f9af on labstack:master.\n. \nCoverage remained the same at 85.521% when pulling 00a44fc9ccb488d8105a9d1f31d0fb57eec3446b on apaganobeleno:doc-v3-index-and-readme into c0822c0427af390553b392dd4a94259bd5dcff1f on labstack:v3.\n. \nCoverage increased (+0.2%) to 86.847% when pulling a8f20bbd31fd335891188ba83a3edc13ebb20694 on kyawmyintthein:master into e08070379af60f5b9c0fb5bb2d1527ba9624fe43 on labstack:master.\n. \nCoverage decreased (-0.3%) to 85.243% when pulling 0fca54f3893f4e1d89c757307a7f71099f1adf69 on master into a96c564fc34b3fcbc5a1a67eeb9402243cdac6b2 on v3.\n. \nCoverage decreased (-0.3%) to 85.243% when pulling 0fca54f3893f4e1d89c757307a7f71099f1adf69 on master into a96c564fc34b3fcbc5a1a67eeb9402243cdac6b2 on v3.\n. \nCoverage remained the same at 85.66% when pulling f65cdb8a8894283717e9477924c5db3f9b045ded on apaganobeleno:master into d74c6ad433a5c4ee42df203b278cd0b90d4bf71f on labstack:master.\n. \nCoverage decreased (-0.3%) to 85.335% when pulling 4c7fef153f8c0320842c882dc7853054efc981d2 on apaganobeleno-master into c59b79d45ff4086acfea7129f04742a3e9d8d8b6 on master.\n. \nCoverage remained the same at 85.629% when pulling 301ce2b635c090a06c28102940bf24e442117ffd on syntaqx:readme-updates into 64dc9138e3d61aaa3523a189045ca9a63b6cbc5c on labstack:master.\n. \nCoverage remained the same at 85.629% when pulling 8b661b589695bb6f697a5aafe9910a38684aa00c on new-look into 069cddf05ab9a854fe601966de46762ff5efd569 on master.\n. \nCoverage remained the same at 85.629% when pulling eaca865d49ff0dba0c67e867720a2b65755df64c on Skarm:patch-1 into 30181613bd78aed71477472f5e74516515a95b71 on labstack:master.\n. \nCoverage remained the same at 85.629% when pulling 2aa49982b9c429488f62b32157a24420804e8d48 on nshmura:master into a5b81074e784d6ff7d7dd1f30d1afe24009531b6 on labstack:master.\n. \n\nCoverage increased (+0.03%) to 85.66% when pulling ff4885dcada5fcd8326f53df0d189d92ccaf5354 on flimzy:doc into 054a310e70bdcbec8a60f8eab6453535b2379404 on labstack:master.\n. \n\nCoverage increased (+0.3%) to 85.813% when pulling 9a4606f176fd9da409ff56423462c905dbb14644 on pavelsmejkal:master into cd2530ea098106338b888f4fb66e966efa2fd75e on labstack:master.\n. \n\nCoverage remained the same at 85.691% when pulling eae6a29a4fb2b00bc145cbb8cafce6eb553f740f on apaganobeleno:recipe-html5 into 8d504c1b699c757b267255c53b3e5219f9974abc on labstack:master.\n. \n\nCoverage remained the same at 86.704% when pulling 8d145bebdfb01760a0a3c0ccfe62081196d7ae7d on AlekSi:v2 into bc173df6ba59e1ee2378b3d68b7ff6d6b8abe742 on labstack:v2.\n. \n\nCoverage decreased (-4.2%) to 81.462% when pulling 460b5258fc9a8b9e0f442c56010438f1dfcf9e94 on GannettDigital:master-allow-html-buffers into ff8a3bdc949d297aba8e1adb6a55d2d74a228f39 on labstack:master.\n. \n\nCoverage decreased (-4.2%) to 81.462% when pulling 9f034c29bcd20165257ed857d7c85c18a443df72 on GannettDigital:master-allow-html-buffers into ff8a3bdc949d297aba8e1adb6a55d2d74a228f39 on labstack:master.\n. \n\nCoverage decreased (-4.2%) to 81.462% when pulling 9e9676c0acbce61db637a305c9e493b252cd165a on GannettDigital:master-allow-html-buffers into ff8a3bdc949d297aba8e1adb6a55d2d74a228f39 on labstack:master.\n. \n\nCoverage decreased (-4.2%) to 81.462% when pulling daed69f4b58cc2bf7879b96c5b79777bdb99f4fb on GannettDigital:master-allow-html-buffers into ff8a3bdc949d297aba8e1adb6a55d2d74a228f39 on labstack:master.\n. \n\nCoverage increased (+0.05%) to 85.737% when pulling adb05c83171250e5130792f97ef84d6d41a0d7d2 on GannettDigital:master-allow-html-buffers into ff8a3bdc949d297aba8e1adb6a55d2d74a228f39 on labstack:master.\n. \n\nCoverage decreased (-4.2%) to 81.462% when pulling 2dff901d1288308e08c0c74f63d8ea28c880b646 on GannettDigital:master-allow-html-buffers into f10daac5d65c4fe56252d0dde8f2f6b61b31577c on labstack:master.\n. \n\nCoverage increased (+0.05%) to 85.737% when pulling a5526e6ea1f3eac9b970d12a06ab2b26be4d8454 on GannettDigital:master-allow-html-buffers into f10daac5d65c4fe56252d0dde8f2f6b61b31577c on labstack:master.\n. \n\nCoverage decreased (-4.2%) to 81.462% when pulling 2dff901d1288308e08c0c74f63d8ea28c880b646 on GannettDigital:master-allow-html-buffers into f10daac5d65c4fe56252d0dde8f2f6b61b31577c on labstack:master.\n. \n\nCoverage increased (+0.02%) to 85.714% when pulling 0d6e1e50d143561d81e178380640afb23d2ad836 on GannettDigital:master-allow-html-buffers into f10daac5d65c4fe56252d0dde8f2f6b61b31577c on labstack:master.\n. \n\nCoverage decreased (-0.02%) to 85.668% when pulling ceac2ddcecdf66eb131145159047802c32372380 on GannettDigital:master-allow-html-buffers into f10daac5d65c4fe56252d0dde8f2f6b61b31577c on labstack:master.\n. \n\nCoverage increased (+0.2%) to 85.852% when pulling 382d82d2c2a48a992b586ec1853259fa97b6e7ce on flimzy:scanner into f10daac5d65c4fe56252d0dde8f2f6b61b31577c on labstack:master.\n. \n\nCoverage increased (+0.2%) to 85.905% when pulling 6161aa054bbf031ac4edc4faec22a7167f972b50 on flimzy:scanner into f10daac5d65c4fe56252d0dde8f2f6b61b31577c on labstack:master.\n. \n\nCoverage increased (+0.3%) to 85.997% when pulling 2277b661b61082e4cbdf5de5264d0fda7d5c7273 on flimzy:scanner into f10daac5d65c4fe56252d0dde8f2f6b61b31577c on labstack:master.\n. \n\nCoverage increased (+0.2%) to 85.914% when pulling 43e3d8cd175dbd9732e1ebbccf9cfbc5c4a52461 on flimzy:scanner into f10daac5d65c4fe56252d0dde8f2f6b61b31577c on labstack:master.\n. \n\nCoverage increased (+0.2%) to 85.914% when pulling 50868122bc52c073deed149dd4247aa3df1d7f32 on flimzy:scanner into f10daac5d65c4fe56252d0dde8f2f6b61b31577c on labstack:master.\n. \n\nCoverage increased (+0.3%) to 85.952% when pulling a7928cfaa08236f93b673936bfdeba8090638133 on flimzy:scanner into f10daac5d65c4fe56252d0dde8f2f6b61b31577c on labstack:master.\n. \n\nCoverage increased (+0.3%) to 85.944% when pulling 2e7d4eb0d27be2dce669c58b3b461a8c6c33ccc4 on flimzy:scanner into f10daac5d65c4fe56252d0dde8f2f6b61b31577c on labstack:master.\n. \n\nCoverage decreased (-3.9%) to 81.462% when pulling ba9ac64355c9d4d5dd80d29a68f9ce30af11d696 on flimzy:scanner into 01334bc7b2f5cb652b54f36f9d258c7b9e2dba2a on labstack:master.\n. \n\nCoverage increased (+0.3%) to 85.654% when pulling 0c206bd9cf100785ec37de0df3533c55acaae98e on flimzy:scanner into 01334bc7b2f5cb652b54f36f9d258c7b9e2dba2a on labstack:master.\n. \n\nCoverage increased (+0.3%) to 85.654% when pulling 109e3fbeba2149955df2becc76d70c57066b37b5 on flimzy:scanner into fa280ce8828090ab4b53fea63942a64f8ef996d2 on labstack:master.\n. \n\nCoverage increased (+0.3%) to 85.654% when pulling defa53cd9c36b444191930eb32fc294f858e0f21 on flimzy:scanner into 874d336c7df10ab4ba05dac7a41ad3efd34b1db0 on labstack:master.\n. \n\nCoverage decreased (-0.05%) to 85.645% when pulling 4a8bbf38c3362bb511bcaf4d0b0fc03f4f954e52 on GannettDigital-master-allow-html-buffers into f10daac5d65c4fe56252d0dde8f2f6b61b31577c on master.\n. \n\nCoverage remained the same at 85.645% when pulling 5c4e59669fb6eb726dab115a734e6e8faac7fb03 on calmandniceperson:master into 95e1bd485f216ceb8d10e9f4cd3f65b49c1130ab on labstack:master.\n. \n\nCoverage remained the same at 85.691% when pulling fe13abbe1260a4ddefaa9bf6a678ac7bdd728bf9 on y-yagi:use_tabs into 0e7a9c1d497b84d79fca0d201638f393942e44a4 on labstack:master.\n. \n\nCoverage remained the same at 85.584% when pulling f90a5cc3f6c6a49f6f0abf3fae65c192ac9337c0 on cduez:patch-1 into 70b5cfbb26c70668255af545f743b2bd99e6e482 on labstack:master.\n. \n\nCoverage remained the same at 85.354% when pulling cfeec08fb28789fae5d6a8d4277733bc6cb26876 on nono:patch-1 into 01334bc7b2f5cb652b54f36f9d258c7b9e2dba2a on labstack:master.\n. \n\nCoverage decreased (-0.09%) to 85.263% when pulling 904f624d0c25b884ae6e5f99abfd1b14edc784cb on diegofernandes:master into 561f15ccf1a3e72841862039001bfdf453cfcb03 on labstack:master.\n. \n\nCoverage remained the same at 85.354% when pulling 9c186ca3fde74e52d87a08b8d5f880afd7504c39 on ayamamori:patch-1 into 561f15ccf1a3e72841862039001bfdf453cfcb03 on labstack:master.\n. \n\nCoverage increased (+0.02%) to 85.744% when pulling a095df3a9b99e95a0d1fecd1f697dc43a8f1511a on c0dect:master into dc92c26084ec02a6b6c186e37606081c82169a41 on labstack:master.\n. \n\nCoverage remained the same at 85.722% when pulling c59f0ca14f92af9553d256425ac492e2e51e44e1 on guidola:patch-1 into dc92c26084ec02a6b6c186e37606081c82169a41 on labstack:master.\n. \n\nCoverage decreased (-0.1%) to 93.543% when pulling 2771b46def10e11b7392f660bea45dec4e11075d on kamilchm:v1-escapedparams into 1659348a67f499ff74f6dbf386375c95b5433ded on labstack:v1.\n. \n\nCoverage decreased (-0.04%) to 86.361% when pulling eb791ed02fd31905229078d8efc1638c7d52e9f0 on flimzy:arrayparams into 869cdcd19af7797cdbaa56e0555cae05bfa3dea8 on labstack:master.\n. \n\nCoverage increased (+0.3%) to 86.653% when pulling 89ab379ac743b9ce3172ce362ee457eb49d46e4f on flimzy:arrayparams into 869cdcd19af7797cdbaa56e0555cae05bfa3dea8 on labstack:master.\n. \n\nCoverage remained the same at 86.653% when pulling 057b9c8df18aed6c512d126576a9eee570764048 on zlepper:patch-1 into 9cdc439f34530f29c36312fed9ec064673a5ff68 on labstack:master.\n. \n\nCoverage remained the same at 86.653% when pulling dfef83123b347b25726973a993b9bcbe665b670a on imeoer:master into 039394fdbc8ff4f7b22fed52c0fbc11f337454b2 on labstack:master.\n. \n\nCoverage remained the same at 86.653% when pulling a3bd66696bcaed634d9b95ba7a9fd1545d28ac2a on tedkornish:fix-documentation into 6e107bc89774fa59a1f1ffa57efbbe702f56dfeb on labstack:master.\n. \n\nCoverage remained the same at 86.653% when pulling a3bd66696bcaed634d9b95ba7a9fd1545d28ac2a on tedkornish:fix-documentation into 6e107bc89774fa59a1f1ffa57efbbe702f56dfeb on labstack:master.\n. \n\nCoverage decreased (-0.3%) to 86.39% when pulling 61fb5ab5d9a63c5cf5636e93238bcbceab231fdf on Noki:patch-1 into eb7ebca11229a842f2fc1cfaea7dcb71ae54885d on labstack:master.\n. \n\nCoverage remained the same at 86.653% when pulling 61fb5ab5d9a63c5cf5636e93238bcbceab231fdf on Noki:patch-1 into eb7ebca11229a842f2fc1cfaea7dcb71ae54885d on labstack:master.\n. \n\nCoverage remained the same at 86.653% when pulling 731077fb94cdd5f505db2114c9be476d30a59e19 on cfreeman:patch-1 into ab203bf19ce2eea3889cced1648f5ab9d6bdf637 on labstack:master.\n. \n\nCoverage decreased (-0.01%) to 86.493% when pulling e0ca28048ed95d864ccfaf580a45062ce21bc887 on nshmura:patch-basic-auth into 97c680662d30360a67e14b1dbe3711ff2cecd45a on labstack:master.\n. \n\nCoverage remained the same at 86.507% when pulling 6ada28707a84505a25689c55f84e5cebe5569312 on garrickjubiao:patch-1 into ee2ac3b9a212eb0e94868bad882a69e00b51c23f on labstack:master.\n. \n\nCoverage increased (+0.01%) to 86.317% when pulling df2a5a89c4fbb521c0c2dbb27b8cc3b42535da3b on tedkornish:custom-not-found-and-wrong-method into 9fe724dedb1d2aa4d91cef9b232868d746b29870 on labstack:master.\n. \n\nCoverage increased (+0.01%) to 86.317% when pulling 071c9130e74b74d31107353346fd1cb5ea6e972d on wednesdaysunny:query-tag-compatible-form into 8047be7f126b1ac75714e560995ed48544a9570a on labstack:master.\n. \n\nCoverage remained the same at 86.303% when pulling 3eff0923682b2da09320a48fe7e1d6ae979c9919 on blockloop:patch-1 into 8047be7f126b1ac75714e560995ed48544a9570a on labstack:master.\n. \n\nCoverage remained the same at 86.303% when pulling 2c8a216f83cb5e2153dc755acb94bd4360d855b6 on shamaton:master into 63262b2311720cabd9f55432183634fad8860ccf on labstack:master.\n. \n\nCoverage decreased (-0.2%) to 86.149% when pulling 4146e43a535231b9d8e5a1ae63a8cd677188581e on flimzy:untagged-structs into 63262b2311720cabd9f55432183634fad8860ccf on labstack:master.\n. \n\nCoverage decreased (-0.1%) to 85.374% when pulling f98e48355650bd89b7b61e501fcfefa23f34460e on flimzy:untagged-structs into 9797cf4b9c9759cc26860310817a15663f3083bd on labstack:master.\n. \n\nCoverage increased (+0.08%) to 86.387% when pulling c0accc36f872110f5447d2041ae4aa0f66d8ce7b on bbrodriges:master into ea1c7c5ba7cd46bbb7d5c09beb7ed1a4cdfc58c1 on labstack:master.\n. \n\nCoverage decreased (-0.05%) to 86.249% when pulling c0b6866d6c5fba836602a1f3157eee6787576959 on logger-middleware-interface into a09afe2c975092216c710d0ac2042b37db6f17c6 on master.\n. \n\nCoverage remained the same at 85.534% when pulling 8ddc90d871b686d8405e09ac3e112ba4b8b4c79d on piyushchauhan2011:patch-1 into 736d153c2921895462e168299df048a002e63103 on labstack:master.\n. \n\nCoverage remained the same at 85.504% when pulling f7c1233634717e81972d3ad1228ca096198da370 on Anon-Penguin:patch-1 into b2c623b07dd1362011f2677147ffbbe48ea3b178 on labstack:master.\n. \n\nCoverage remained the same at 85.239% when pulling 42b8582a33ff9adb700edfed6e123566f8d0436e on pdf:gh_710 into 069e80b9e0c2233d9c7f4609e32bb40f34d07a1a on labstack:master.\n. \n\nCoverage remained the same at 85.248% when pulling 8d82d92cb25e18adb45fd2b1ecc49ad4b4b108a7 on DiSiqueira:gofmt into c7c4395fbdf085a1d76443e2b66dc94aeba7947c on labstack:master.\n. \n\nCoverage remained the same at 85.248% when pulling 3e1ace2d012d4a7acfc6defceb66db3acf5e7f23 on DiSiqueira:misspell into c7c4395fbdf085a1d76443e2b66dc94aeba7947c on labstack:master.\n. \n\nCoverage remained the same at 85.248% when pulling c5732bf246f8d1cdeb44df40219ecc006ffcb729 on DiSiqueira:ineffassign into c7c4395fbdf085a1d76443e2b66dc94aeba7947c on labstack:master.\n. \n\nCoverage decreased (-0.2%) to 85.057% when pulling b69a45ddaf6f8079b9b61f1cbefe35516b557456 on DiSiqueira:gocyclo into c7c4395fbdf085a1d76443e2b66dc94aeba7947c on labstack:master.\n. \n\nCoverage increased (+0.06%) to 85.307% when pulling b69a45ddaf6f8079b9b61f1cbefe35516b557456 on DiSiqueira:gocyclo into c7c4395fbdf085a1d76443e2b66dc94aeba7947c on labstack:master.\n. \n\nCoverage decreased (-0.2%) to 85.057% when pulling b69a45ddaf6f8079b9b61f1cbefe35516b557456 on DiSiqueira:gocyclo into c7c4395fbdf085a1d76443e2b66dc94aeba7947c on labstack:master.\n. \n\nCoverage increased (+2.8%) to 88.048% when pulling 2995614e54686976042ef1a25c7c83c80cec00d7 on usk81:request-id into a8b6864be328fcb5c2d96d32c75b750f84e0e4be on labstack:master.\n. \n\nCoverage decreased (-0.05%) to 85.198% when pulling 3b0ffbad0829be16827cd009326d140031214abc on usk81:request-id into a8b6864be328fcb5c2d96d32c75b750f84e0e4be on labstack:master.\n. \n\nCoverage decreased (-0.05%) to 85.198% when pulling 0c7c1b78e7c9e4ecef10ced430147ccef508a02b on usk81:request-id into a8b6864be328fcb5c2d96d32c75b750f84e0e4be on labstack:master.\n. \n\nCoverage increased (+0.007%) to 85.256% when pulling 04dc4b9d035a550b9624ad88b20fb36f5d8eccdd on amenzhinsky:fs into a8b6864be328fcb5c2d96d32c75b750f84e0e4be on labstack:master.\n. \n\nCoverage increased (+0.03%) to 84.701% when pulling e9eeddf525d40d7d99765ead423453a6a8992a2f on amenzhinsky:fs into 7a858a738598a9f193db160023b6e88c900c1499 on labstack:master.\n. \n\nCoverage increased (+0.03%) to 84.701% when pulling 1ce8e189ffa8e38653ba34f38f4371e33dce868d on amenzhinsky:fs into 7a858a738598a9f193db160023b6e88c900c1499 on labstack:master.\n. \n\nCoverage remained the same at 85.248% when pulling 09db43fd50378499d900fafa13a28ca75f8e4824 on goenning:patch-1 into a8b6864be328fcb5c2d96d32c75b750f84e0e4be on labstack:master.\n. \n\nCoverage increased (+0.007%) to 85.256% when pulling 6f90742dec93cedee6424b25ccbf180bcfbdb431 on freeformz:fix806 into a8b6864be328fcb5c2d96d32c75b750f84e0e4be on labstack:master.\n. \n\nCoverage decreased (-0.007%) to 85.241% when pulling 998c5de65f82ce7d5817baf4bdaa10f4ad95ae8c on freeformz:fix806 into a8b6864be328fcb5c2d96d32c75b750f84e0e4be on labstack:master.\n. \n\nCoverage decreased (-0.007%) to 85.241% when pulling 998c5de65f82ce7d5817baf4bdaa10f4ad95ae8c on freeformz:fix806 into a8b6864be328fcb5c2d96d32c75b750f84e0e4be on labstack:master.\n. \n\nCoverage increased (+0.1%) to 85.371% when pulling 668d551380fa5e2ae325bcb6d9ae6cad7b9da64e on amenzhinsky:graceful-stop into 394f533510cc577dd4e136b56de3802a4f88f7b4 on labstack:master.\n. \n\nCoverage increased (+0.03%) to 84.998% when pulling 21fb717e2f912c7b91a49bac5b1809fcc2106a89 on amenzhinsky:graceful-stop into 0b53f397ad7709a27d37500a67735c0a639b5c38 on labstack:master.\n. \n\nCoverage decreased (-0.2%) to 84.798% when pulling b0722078365e21f1af1aef274f3a5dfdb783d512 on amenzhinsky:graceful-stop into a098bcd3b0c445dde3d380cd46461d6dd13b3730 on labstack:master.\n. \n\nCoverage decreased (-0.1%) to 84.671% when pulling d28ea936d402f4c6ded9ca44600730abfb16ecbf on nshmura:master into 70be2c2f8747c510df1f5540dc609fceb7b7b82c on labstack:master.\n. \n\nCoverage remained the same at 84.243% when pulling fb90bdeece32933e3cdfd2d3660bd0fa60a75382 on chenclee:patch-1 into 049518f8c46759fe645a7be1c71b5bc76bc27eaa on labstack:master.\n. \n\nCoverage remained the same at 84.243% when pulling 577207ae8f6b988c6ad1350e68fc164e9405bb6d on zwpaper:patch-1 into b218599906af51421ae6d6e6f4a8299cb6a468ea on labstack:master.\n. \n\nCoverage increased (+0.1%) to 84.077% when pulling 6dca623d8ff22a125253f9175f289cbd19fcf59e on nownabe:fix_request_id_middleware into b2430fc4a8c023dd6a07fd3f7be19f3747861dca on labstack:master.\n. \n\nCoverage increased (+0.02%) to 84.094% when pulling 49d29b934367609dccac40079e2c908470e63736 on rybit:update-middleware-test-docs into 22012e0e9da962b1b6a67b9e009d8eabe35d2d7e on labstack:master.\n. \n\nCoverage increased (+0.04%) to 84.117% when pulling f0e3f950cf7be23a481bdd75f3fb2c5c597845fd on ole108:master into 22012e0e9da962b1b6a67b9e009d8eabe35d2d7e on labstack:master.\n. \n\nCoverage decreased (-0.07%) to 84.006% when pulling c8cebc2b134dbb02c5092fdaf831038c5682add1 on Michsior14:master into d67c6f029c2d53820fbeb1f03dfd85a8c8ef8a57 on labstack:master.\n. \n\nCoverage remained the same at 83.762% when pulling ae7bcaff622574df4898ce92892932d11665138a on YongHaoWu:master into 9cd74c54c1619a4e77353118937b5055c1c5b5a7 on labstack:master.\n. \n\nCoverage remained the same at 83.714% when pulling 1fd7f35d8ff1f97f7e14656c9381395415e3b614 on haru01:patch-1 into 5f392f3bb1c5b0dccda4c389fa2b91b66dd180d2 on labstack:master.\n. \n\nCoverage remained the same at 83.714% when pulling 27dc8dd68567bc92411016b80624fe12cc6d6c1d on stanzhengdev:master into badd2efd56b91b272f769503b81ab72314abc31c on labstack:master.\n. \n\nCoverage increased (+0.1%) to 83.82% when pulling c3139bcafcd38547ed5308ae390a5e578b25cf5e on pyama86:request-body-outoputlog into 8173bb8f2d7ba81d65a4a33d67fd689ccc39e419 on labstack:master.\n. \n\nCoverage increased (+0.04%) to 83.758% when pulling 55087def728d16c157d18b39209e916d8e96c98a on pyama86:request-body-outoputlog into 4256489c0e1ff50bdb71aedd1a21483fe2d67607 on labstack:master.\n. \n\nCoverage increased (+0.02%) to 83.73% when pulling 8f2b4f1c74a5cb98868d75d08b0f5d3d4bc936be on chrisprobst:master into 1049c9613cd371b7ea8f219404c9a821734781ed on labstack:master.\n. \n\nCoverage increased (+0.05%) to 83.76% when pulling 950dc5290d44632ec5b2f2f0b6ba31e69993d5b2 on subchen:auto-pretty into 1049c9613cd371b7ea8f219404c9a821734781ed on labstack:master.\n. \n\nCoverage increased (+0.05%) to 83.76% when pulling 950dc5290d44632ec5b2f2f0b6ba31e69993d5b2 on subchen:auto-pretty into 1049c9613cd371b7ea8f219404c9a821734781ed on labstack:master.\n. \n\nCoverage increased (+0.05%) to 83.76% when pulling 950dc5290d44632ec5b2f2f0b6ba31e69993d5b2 on subchen:auto-pretty into 1049c9613cd371b7ea8f219404c9a821734781ed on labstack:master.\n. \n\nCoverage increased (+0.2%) to 83.946% when pulling 45f34284631e38a4b4691b46746eaf16021eb5ab on subchen:auto-pretty into 1049c9613cd371b7ea8f219404c9a821734781ed on labstack:master.\n. \n\nCoverage increased (+0.2%) to 83.916% when pulling bf4717481f6cd5d5e813b2eeafff6219fbc0b995 on subchen:auto-pretty into 1049c9613cd371b7ea8f219404c9a821734781ed on labstack:master.\n. \n\nCoverage increased (+0.04%) to 83.968% when pulling 91d4b9bc3c2d65e99309037c47f98731ad07662f on edocode:log_cookie into 533d7a8dc147b3c9ebc09726c6bc5e32857392cd on labstack:master.\n. \n\nCoverage increased (+0.08%) to 84.077% when pulling 2da9d27f2fc52fafb5d84427c7a093a4c8bf25ec on nownabe:doc into 2b1634f55680c0376d5bb5d3e532825578b05ecf on labstack:multilingual-docs.\n. \n\nCoverage remained the same at 83.943% when pulling b1df06d194186351de1a13edf4ae0ce39719abfb on AaronWharton:master into 3359eae3067d1f6dba4785ea0377796405a34429 on labstack:master.\n. \n\nCoverage decreased (-0.08%) to 83.858% when pulling 3a6c9db3d8184d124f93d80b9d074b80ee6e3600 on xqbumu:middleware-authz into 3359eae3067d1f6dba4785ea0377796405a34429 on labstack:master.\n. \n\nCoverage increased (+0.1%) to 84.042% when pulling 43e804df2b40b2914daf29ea6464325607d06d70 on xqbumu:middleware-authz into 3359eae3067d1f6dba4785ea0377796405a34429 on labstack:master.\n. \n\nCoverage increased (+0.1%) to 84.042% when pulling 0bbe2ad580caf67be1361acf8f63afe9f2beecc4 on xqbumu:middleware-authz into 3359eae3067d1f6dba4785ea0377796405a34429 on labstack:master.\n. \n\nCoverage increased (+0.1%) to 84.042% when pulling f53a65d2e475708f02bd26299e7f205442536424 on xqbumu:middleware-authz into 3359eae3067d1f6dba4785ea0377796405a34429 on labstack:master.\n. \n\nCoverage increased (+0.1%) to 84.042% when pulling 706db077cc15abdb52dca8ee4ddf85f1d4d0e653 on xqbumu:middleware-authz into 3359eae3067d1f6dba4785ea0377796405a34429 on labstack:master.\n. \n\nCoverage increased (+0.1%) to 84.042% when pulling 274dd395b7a560a18b48bd4d573bf094d6251595 on xqbumu:middleware-authz into 466d509e34e07d1313fdb152a11243ae9df10b5c on labstack:master.\n. \n\nCoverage increased (+0.1%) to 84.042% when pulling 70449143e4385710c67fde5031b7f187e08852f9 on xqbumu:middleware-authz into 466d509e34e07d1313fdb152a11243ae9df10b5c on labstack:master.\n. \n\nCoverage increased (+0.1%) to 84.059% when pulling 709609290db8725baf3a5eab200190b49254bb8a on xqbumu:middleware-authz into 466d509e34e07d1313fdb152a11243ae9df10b5c on labstack:master.\n. \n\nCoverage increased (+0.1%) to 84.059% when pulling 709609290db8725baf3a5eab200190b49254bb8a on xqbumu:middleware-authz into 466d509e34e07d1313fdb152a11243ae9df10b5c on labstack:master.\n. \n\nCoverage increased (+0.1%) to 84.042% when pulling 5f6c3e4db95caeb13d55edfdf81d004fe7c7ec5a on xqbumu:middleware-authz into 466d509e34e07d1313fdb152a11243ae9df10b5c on labstack:master.\n. \n\nCoverage decreased (-0.1%) to 83.826% when pulling 3319167a97ec04dafa86e38a542510a8505ced89 on tossp:tossp-patch-scheme into 466d509e34e07d1313fdb152a11243ae9df10b5c on labstack:master.\n. \n\nCoverage decreased (-0.1%) to 83.826% when pulling a557b3c18e76af225b96f81beef31a5677f72e33 on tossp:tossp-patch-scheme into 466d509e34e07d1313fdb152a11243ae9df10b5c on labstack:master.\n. \n\nCoverage decreased (-0.1%) to 83.826% when pulling a557b3c18e76af225b96f81beef31a5677f72e33 on tossp:tossp-patch-scheme into 466d509e34e07d1313fdb152a11243ae9df10b5c on labstack:master.\n. \n\nCoverage decreased (-0.2%) to 83.71% when pulling 279090485cdefaa12bb83e785cf0d4fe1b75e89a on tossp:tossp-patch-scheme into 466d509e34e07d1313fdb152a11243ae9df10b5c on labstack:master.\n. \n\nCoverage decreased (-0.1%) to 81.846% when pulling 5577b3a4963b74649d76720411f5b43cf568c8c3 on khaf:fix_static_traversal into c3887ebb131d996411cf13a9688ab02c8dba599e on labstack:master.\n. \n\nCoverage decreased (-0.1%) to 81.846% when pulling 5577b3a4963b74649d76720411f5b43cf568c8c3 on khaf:fix_static_traversal into c3887ebb131d996411cf13a9688ab02c8dba599e on labstack:master.\n. ",
    "markbates": "Fixed.\n. That was it. I pulled the latest code down earlier this week, so it must've been fixed between then and now. Sorry about the false alarm. :)\n. That worked.  Thanks.\n. Ultimately it would be great to have access to a simple version of the route information, like I have above. An API to gain access to that would be great so people can build middleware, and other extensions around it. \nFor example, had there an API for routes I would've written a handler that would generate this type of print out. \nAnother example would be to build route helpers, like you'd find in frameworks such as Rails e.g. generate the final href string given the name of the route and parameter values. \n. ",
    "tekknolagi": "I've modified the handlers like so:\n``` go\ne.Get(\"/users\", getUsers)\ne.Get(\"/users/:id\", getUser)\ne.Post(\"/users\", createUser)\ne.Post(\"/users/:name\", createUser)\n```\nbut now get a Method Not Allowed. If I comment out the /users/:id route, it works.\n. https://gist.github.com/e168fc8fe9be985901fd\n. Is it possible to do this without a pretty URL? Just /users?name=joel?\nSince\ngo\ne.Get(\"/users/:id\", getUser)\ne.Post(\"/users/:name\", createUser)\nshould not be conflicting routes.\n. @vishr I'm not sure what you are trying to say.\nI meant that in most other frameworks, those two routes are distinct.\nI unfortunately still get an empty string.\n. https://gist.github.com/471fb336acb72f02d726\n. Including the duplication of routes?\n. Now I just cannot connect to port 8080 (with the same code).\n. I thought I did update, but I could be wrong. How should I go about updating?\n. Alright, I've upgraded. With the same code, though, I get an empty string when supplying data like so:\ncurl -X POST --data \"{'name':'maxwell123'}\" localhost:8081/users\nPerhaps I am doing this wrong.\n. Ah, okay. This looks like it should work now. Thank you!\n. ",
    "patrickdappollonio": "I don't know clearly. What I could see from other routers + middleware combinations is that you first append site-wide routes and then you take care of the special routes. That means mw1 > mw2 > mw3 > mw4 > h3. \nThis produces obviously another problem: what if I want to chain a middleware to the stack and then I want to remove it? From what I saw, it's just a matter of be well organized and those combinations don't usually allows to \"abandon\" a middleware. That said, there are a few routers + middleware who also have an e.Abandon(mw1) who actually removes a middleware from the chain. But then, the solution brings more problems to the table than before. \nSo, in my opinion, should be executing all middlewares (both the global ones and the per-route ones) and see from there if the community needs an abandon method, a way to remove them. I guess if that happens, there should be then a better way to do what the user wants. \n. I like the idea of e.Sub() (as full inheritance) and e.Group() (as no inheritance). Adding a boolean just gave me the feel that the result will not be verbose.\n. +1! This, while it looks like nothing, could make a huge difference maintaining big websites, and you can be confident that any route change you won't need to go through your entire code base to see what to change... \n. Here's another framework who has this functionality: http://laravel.com/docs/5.0/routing#named-routes\n. My company, ImPlaces uses Echo not only for our main product (on both Backend and APIs) but we've managed to use it as well in our consultancies as part of improvements.\n. ",
    "jrobn": "I would take the later of the two options of not inheriting any middleware from parent. This gives maximum flexibility without (imho) the added complexity of adding e.Abadon() to the API. I would also change the method to e.Group() instead, since e.Sub() implies inherited hierarchy of some kind.\n``` go\ne := echo.New()\ne.Use(mw1, mw2, mw3)\na := e.Group(\"/admin\")\na.Use(mw1, mw2, mw3) // same stack\n//  or\na.Use(mw1, mw3, mw4) // combo of any middleware\n```\nOr you could offer both an e.Sub() (inherited middelware) and an e.Group() (no middleware inheritance).\n. @alehano +1. Usually, auth is a very app specific thing anyway and there are already go specific libraries for OAuth or JWT.\n. ",
    "zbindenren": "+1\n. ",
    "fundon": "+1 url path helper\n. Maybe need a recursion function likes printTree.\n. I'm looking forward. :+1: \n. Do you have plain to fix this?\n. Okay, I also try to fix this in my Node version. \nThere are some cases http://guides.rubyonrails.org/routing.html.\nI think we should support them.\n. I think we can convert any :param to :$1 first, below like this:\n/photos/:id => /photos/:$1\n// alias = ['id']\n/photos/:pid/users/:id => /photos/:$1/users/:$2\n// alias = ['pid', 'id']\nConvert the original path to format path and store the param keys.\n. @vishr I implement a version, and haven't been optimized, so currently it's very slower.\nSee\n- https://github.com/trekjs/router/blob/refoctor/src/router.js\n- https://github.com/trekjs/router/blob/refoctor/test/router.test.js test case\n- https://travis-ci.org/trekjs/router/builds/\n. @vishr I refactor the add(), insert() and find() methods. \nSee\n- https://github.com/trekjs/router/blob/master/src/router.js#L86\n- https://github.com/trekjs/router/blob/master/src/router.js#L142\n- https://github.com/trekjs/router/blob/master/src/router.js#L211\nConvert paths to special format.\n/:username/:repo/issues/:id => /:$0/:$1/issues/:$2\ne.g:\n- /users/:id => /users/:$0\n- /users/:userId/photos/:id => /users/:$0/photos/:$1\n- /users/:uid/books/:bid => /users/:$0/books/:$\nNote Make sure the param node append to the end  of the edges.\nImprove performance.\nI found the has key is unused in find method.\nfind(method, path) \nsteps:\n1. search snode\n2. search pnode\n3. search cnode\nMaybe I can submit a PR. hah\nExample:\n'/geocoder'\n'/geocoder/new'\n'/geocoder/edit'\n'/geocoder/edit/email'\n'/geocoder/edit/:item'\n'/geocoder/any*'\n'/geocoder/:action'\n\u2514\u2500\u2500 /geocoder has=1 h=function edges=1\n    \u2514\u2500\u2500 / has=0 h=null edges=4\n        \u251c\u2500\u2500 edit has=1 h=function edges=1\n        \u2502   \u2514\u2500\u2500 / has=0 h=null edges=2\n        \u2502       \u251c\u2500\u2500 email has=1 h=function edges=0\n        \u2502       \u2514\u2500\u2500 :$0 has=0 h=function edges=0\n        \u251c\u2500\u2500 new has=1 h=function edges=0\n        \u251c\u2500\u2500 any has=3 h=null edges=1\n        \u2502   \u2514\u2500\u2500 * has=0 h=function edges=0\n        \u2514\u2500\u2500 :$0 has=0 h=function edges=0\n. @vishr \nImplemented features:\n- Convert param key to special key, likes: /:username/:repo/issues/:id => /:$0/:$1/issues/:$2\n- named param multi aliases, likes: /users/:id , /users/:userId/photos/:id => /users/:$0, /users/:$0/photos/:$1\nFull cases https://github.com/trekjs/router/blob/master/test/router.test.js\n. Use GitHub API routes, compare with below:\n- path-to-regexp\n- route-recognizer\n- route-trie\n- routington\nhttps://github.com/trekjs/router/blob/master/benchmarks/index.js\n. @vishr See this https://travis-ci.org/trekjs/router#L710\n. Yes, I should. haha\nLooking forward to your implementation in Go.\n. BTW, I do not use has key in find method, maybe it is not needed\u3002\n. @vishr I fixed a bug. \nYou can see this change via: https://github.com/trekjs/router/compare/d702c01826771302156a5e949bdc66a75992d431...master?diff=unified&name=master\n. @vishr \nThe bug is below:\nBug:\n```\n/users/:id\n/users/:id/edit\nr.find('/users') // will match /users/:id.\n```\nThe right behavior is not found.\nIt's fixed in my latest Node.js version.\n. I did not try that.\n. Should match /users/:id.\n. Yes, it's a bug. I'm thinking. How to fix this?\n. Me too. Good catch! Hah\n. Wow, nice! :+1: \nThere is not goto statement in JavaScript. :sob: hah\n. @vishr  I tried the latest Echo, I found a small bug.\n```\n/users\n/users/new\n/users/:id/echo\n/users/*\nFind /users/echo/hello => empty // right, return /users/\nFind /users/echo => empty // right, return /users/\n```\n. @vishr Yes, I implemented it.\nhttps://github.com/trekjs/router/blob/master/src/router.js#L87-L121\nExamples:\n/users/:id/echo => /users/:/echo ['id']\n/users/:user_id/photos/:id => /users/:/photos/: ['user_id', 'id']\n. @panjunjie \u4f60\u8fd8\u662f\u7528\u82f1\u6587\u53d1\u95ee\u5427\n. Try this:\n``` go\ne.Any(\"/a\")\ne.Static(\"/\")\n```\n. @vishr Very interesting. haha\n. Maybe, IMO https://github.com/trekjs/router/blob/master/index.js\njs\nnode.maps = {\n   'GET': {\n      pnames,\n      handler\n   }\n}\n. ",
    "emilgpa": "+1\n. ",
    "saml": "One practical use case is when I want to write a RESTful API with hyperlinks.\nFor example, using HAL ,  I would want resource representation to include various links to other states client can go from here.\nOf course I can write methods for calculating urls for various resources. But it involves duplicate work. If I change route, I need to change my relevant UrlFor method as well.\nSome routing frameworks that support reverse url:\n- http://www.gorillatoolkit.org/pkg/mux#Route.URL\n- http://flask.pocoo.org/docs/0.10/api/#flask.url_for\n- https://playframework.com/documentation/2.3.x/ScalaRouting#Reverse-routing\nPlay one is interesting cause routes are defined in DSL and generates reverse route functions during compilation. \nIf routes are specified using URI Template, it's known to be reversible:  https://github.com/jtacoma/uritemplates  (see Expand).\n. ",
    "vanng822": "It is convenient to bind this kind of method to request/router but there is a drawback when you have small number applications/services which need those urls. We had some extra implement/workaround to make thing work. I tried to fix it just providing a route manager https://github.com/vanng822/r2router/blob/master/example/routemanager.go\nMaybe something? \n. ",
    "newoga": "@vishr, Just submitted a pull request with a couple more tests. It seems like this has some issues when the handlers are paired with a group. Was the API meant to work this way?\n. Also, a couple of other suggestions...\n1. Maybe rather than the URI() method accepting a ...string, how about it accepts ...interface{}\nThis way we can pass any type of value and determine how it should become a string. For example, we should be able to determine if the interface that was passes implements the Stringer interface. That way if you pass a UUID object to to the reverse routing method, it could still work.\n1. Also, It might be nice to support sending a map to the reverse route method, such as...\ngo\ne.Get(\"/users/:id/:files:/fid\", getFile)\ne.URL(getUser, map[string]interface{}{\n  \"id\": \"1\", // string works\n  \"fid\": 2, // int works\n  \"other_id\": guid, // as long as it implements `String()` it would work\n})\n. Okay, I closed my original pull request and created a new one #37, this one actually fixes the issue when you call the URI() method on the right instance of *Echo. \nThat being said, I think it would be useful to maintain some kind of link between instances of *Echo and child *Echo when created by calling Group(). Not quite sure what the right API would be for this, but it would be nice if I could call the root *Echo.URI() and it would know how to create the URI for all handler on itself and its child *Echo.\nTo test this, we would have to add back the two checks in the TestEchoURL method:\n``` go\n    e := New()\n    getGroups := func(Context) {}\n    getGroup := func(Context) {}\neg := e.Group(\"/groups\")\n    eg.Get(\"\", getGroups)\neg.Get(\"/:id\", getGroup)\n\n// These two tests would currently fail\nif e.URI(getGroups) != \"/groups\" {\n    t.Error(\"uri should be /groups\")\n}\nif e.URI(getGroup, \"1\") != \"/groups/1\" {\n    t.Error(\"uri should be /groups/1\")\n}\n\n// These two tests currently pass\n    if eg.URI(getGroups) != \"/groups\" {\n        t.Error(\"uri should be /groups\")\n    }\n    if eg.URI(getGroup, \"1\") != \"/groups/1\" {\n        t.Error(\"uri should be /groups/1\")\n    }\n```\nIn my opinion, ideally we can have it setup so all 4 pass.\n. FYI, a probably fairer test would be to change this:\ngo\n    if e.URI(getGroups) != \"/groups\" {\n        t.Error(\"uri should be /groups\")\n    }\n    if e.URI(getGroup, \"1\") != \"/groups/1\" {\n        t.Error(\"uri should be /groups/1\")\n    }\nto:\ngo\n    if eg.URI(getGroups) != \"/groups\" {\n        t.Error(\"uri should be /groups\")\n    }\n    if eg.URI(getGroup, \"1\") != \"/groups/1\" {\n        t.Error(\"uri should be /groups/1\")\n    }\nEven when calling the URI() methods directly on the instance of *Echo that contains the handler, the tests still fail.\n. I closed this pull request and created a new one that actually contains somewhat of a fix, even though it is testing something different that this test was testing.  Whether these tests should actually fail or not is really a different question.\n. Note: To make this build pass, we need to remove the two tests:\n``` go\nif e.URI(getGroups) != \"/groups\" {\n  t.Error(\"uri should be /groups\")\n}\nif e.URI(getGroup, \"1\") != \"/groups/1\" {\n  t.Error(\"uri should be /groups/1\")\n}\n```\nThe question is should that work from an API perspective or not...\n. ",
    "mmindenhall": "I just ran into this issue with code that looks something like the following.\n``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/engine/standard\"\n    \"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.Logger())\n    apiGroup := e.Group(\"/v1\")\n    apiGroup.GET(\"/users/:id/new_api_key\", getNewApiKey)\n// Generic CRUD for resources\napiGroup.GET(\"/:resourceName/:id\", getResourceById)\n// apiGroup.PATCH(\"/:resourceName/:id\", patchResourceById)\n// apiGroup.PUT(\"/:resourceName/:id\", updateResourceById)\n// apiGroup.DELETE(\"/:resourceName/:id\", deleteResourceById)\n// apiGroup.POST(\"/:resourceName\", createResource)\n// apiGroup.GET(\"/:resourceName\", listAllResources)\n\ne.Run(standard.New(\":1323\"))\n\n}\nfunc getNewApiKey(c echo.Context) error {\n    return c.JSONBlob(200, []byte({\"handler\": \"getNewApiKey\"}))\n}\nfunc getResourceById(c echo.Context) error {\n    return c.JSONBlob(200, []byte({\"handler\": \"getNewApiKey\"}))\n}\n```\nWhen I run the code above, I get the following results:\nGET /v1/users/1/new_api_key -> 200 {\"handler\": \"getNewApiKey\"}\nGET /v1/users/1 -> 404 Not Found\nIt seems like there is currently only one path from the root node when trying to match a route.\nCurrent matching for /v1/users/1/new_api_key:\n\nStatic match for v1 as child of root? yes\nStatic match for users as child of v1? yes\nStatic match for 1 as child of users? no\nParam defined as child of users? yes\nStatic match for new_api_key as child of param? yes\nHandler defined for new_api_key? yes, it's a match!\n\n\n\n\n\nCurrent matching for v1/users/1:\n\nStatic match for v1 as child of root node? yes\nStatic match for users as child of v1? yes\nStatic match for 1 as child of users? no\nParam defined as child of users? yes\nHandler defined for param? no, return 404\n\n\n\n\n\nIs there some reason the code can't be altered to do an exhaustive search for a match?  This could be done without altering the current priorities (static -> param -> any), by walking back up the tree and trying the next alternative when no match is found going down one path.  For example:\nExhaustive matching for /v1/users/1:\n\nStatic match for v1 as child of root node? yes\nStatic match for users as child of v1? yes\nStatic match for 1 as child of users? no\nParam defined as child of users? yes\nHandler defined for param node? no, continue\n\n\nMatch-any defined as child of users?  no, continue from parent\n\n\nParam defined as child of v1? yes\nStatic match for 1 as child of param?  no, continue\nParam defined as child of param?  yes\nHandler defined for param?  yes, it's a match!\n\n\n\n\n\nExhaustive matching for /controller/action in the first example:\n\nStatic match for controller as child of root?  no\nParam defined as child of root?  yes\nStatic match for action as child of param?  no\nParam defined as child of first param?  yes\nHandler defined for this param?  yes, it's a match!\n. What about just surrounding with braces if the variable doesn't encompass the entire path segment?\n\n\n\n``` go\n    e.GET(\"/hello/:{helloId}.json\", handle)\ne.GET(\"/world/:worldId/json\", handle)\n\n```\n. Echo already does better than httprouter in this regard.  From httprouter README:\n\nFor example you can not register the patterns /user/new and /user/:user for the same request method at the same time.\n\nEcho uses the same patterns as a working example on the Routing page of the guide:\n```go\ne.GET(\"/users/:id\", func(c echo.Context) error {\n    return c.String(http.StatusOK, \"/users/:id\")\n})\ne.GET(\"/users/new\", func(c echo.Context) error {\n    return c.String(http.StatusOK, \"/users/new\")\n})\ne.GET(\"/users/1/files/\", func(c echo.Context) error {\n    return c.String(http.StatusOK, \"/users/1/files/\")\n})\n```\n. ",
    "benpate": "+1 Looking for a fast router that solves this!\n. I\u2019m using echo mostly as a router.  Here\u2019s my use case:  In my app, there\u2019s a function that adds most of the routes into the echo router.  That makes it difficult for this function to add routes simultaneously to both the root level via echo.Get() and to a sub-group via group.Get().  It\u2019s working fine for now, because everything is just pointing to a group (and not the root level).  But, one nice thing about echo was the ability to apply routes to either the root level or a sub-level using the exact same interface.\nIt should be simple enough to add an interface something like the code below.  But, I completely understand you wanting to keep the API simple.  So I understand if you\u2019d rather skip this request.\ntype RouteMaker interface {\n    Get(string, Handler) error\n    Put(string, Handler) error\n    Post(string, Handler) error\n    Patch(string, Handler) error\n    Delete(string, Handler) error\n}\nDoes this make sense?  If it\u2019s not clear, let me know how I can help clarify. :)\n\u2014\nBen\n\nOn May 24, 2015, at 11:00 PM, Vishal Rana notifications@github.com wrote:\nAre you using echo as router or web framework? I am having little difficulty understanding your situation. If you can explain it with some examples, it will help.\nEcho.Group was separated from Echo to limit API. It should have minimum impact to most of the users.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/labstack/echo/issues/80#issuecomment-105126132.\n. Yes.  That makes sense.  I wasn\u2019t thinking that I could just make my own interface.  Thanks!\nOn May 27, 2015, at 3:17 PM, Vishal Rana notifications@github.com wrote:\nBen, to me it's a very specific case, I will just create an interface myself and use it.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/labstack/echo/issues/80#issuecomment-106081743.\n. Thanks for making progress on this.  I've been using echo for an app in development for a while, and a recent change with the static file hosting has broken my project.  I believe your latest commit is working on this issue, but I'm still having trouble with static files.\n\nHere's my scenario.  Calling http://servername/foldername still responds with the index.html from the root level, not from within the folder.  This is causing loads of trouble for me.  I believe the standard behavior should be to display the index.html from folder it's calling, NOT from the root level.  Hopefully this makes sense.  If not, here's my shot at a demo app:\nI've made a simple test app that serves a single example directory.  Unfortunately, I can't figure out how to upload a .zip file, so I'm just going to inline the code here.  It shouldn't be too bad:\nmain.go\n``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"net/http\"\n)\nfunc main() {\n// Initialize router\nrouter := echo.New()\nrouter.Static(\"/\", \"www\")\n\nhttp.ListenAndServe(\":8080\", router)\n\n}\n```\nInside there /www folder, there is a demo index.html file and another folder called \"folder\".  Inside \"folder\" is another index.html file.  They look like this:\n/www/index.html\nhtml\nI am root-index.html\n/www/folder/index.html\nhtml\nI am folder-index.html\nHere's the confusion\nI get different, inconsistent results based on the URLs that I use.  \n| URL | Result | Success? |\n| --- | --- | --- |\n| http://localhost:8080/ | I am root-index.html | OK |\n| http://localhost:8080/folder | I am root-index.html | ERROR (should be folder-index.html) |\n| http://localhost:8080/folder/index.html | I am folder-index.html | OK |\n. Yes.  This is working for me, too.  Thanks for digging in and finding the solution to this!\n. It looks like there may be a similar issue in the Param() function beginning on line 60 as well.\ngo\n// Param returns path parameter by name.\nfunc (c *Context) Param(name string) (value string) {\n    l := len(c.pnames)\n    for i, n := range c.pnames {\n        if n == name && i <= l {\n            value = c.pvalues[i]\n            break\n        }\n    }\n    return\n}\nThe \"if\" statement should probably read if (n == name) && (i < l) {\n. Thanks Vishal. Yes, exposing an API with more information about parameters would be awesome. I'd love to see that added in. It should be a pretty efficient thing to do, yes?\nSent from my iPhone\n\nOn Jun 20, 2015, at 7:58 PM, Vishal Rana notifications@github.com wrote:\nThat's correct, I shouldn't go beyond index. I will fix it. How about exposing API to return map of param name > value or differently slice of param values and param names?\n\u2014\nReply to this email directly or view it on GitHub.\n. We\u2019re using Echo to build eurekametrics.com - which is currently in private beta testing.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/labstack/echo/issues/295#issuecomment-166669212.\n. \n",
    "prabirshrestha": "Tried it out. It works. Thanks.\n. @vishr I'm not sure auto content negotiation would be ideal.\nI was sort of expecting Render to render based on the RendererFunc (view engine). My above Render and RenderFunc could had been over-enginnered. RenderFunc would be more than enough.\ngo\nc.Render(200, \"person\", &person{fname: \"...\", lname: \"\"})\nRenderFunc can then read the template in view/person.html and pass the person model. This would be the default Render.\nThen anyone can go and override the RendererFunc if they want to base on their needs.\n``` go\nimport  \"github.com/unrolled/render\"\nr := render.New()\nvar e := echo.New()\ne.RenderFunc = func(rw http.ResponseWriter, req *http.Request, statusCode int, name string, data interface{}) {\n     r.HTML(rw, statusCode, name, data)\n}\ne.Get(\"/\", func(c *echo.Context) {\n    c.Render(200, \"persons\", &person{fname:\"..\", lname:\"..\"})\n})\n``\n.e.RenderFuncis perechoinstance -erather than globalecho`. \nThis was sort of what I was thinking of.\ngo\ne.RenderFunc = func(rw http.ResponseWriter, req *http.Request, statusCode int, name string, data interface{}) {\n     if  strings.HasSuffix(name, \".md\") {\n         r.Markdown(....)\n     } else {\n         r.HTML(....)\n     }   \n}\nHere is how one could render.\n``` go\ne.Get(\"/\", func (c *echo.Context) {\n    c.Render(200, \"index\", nil)\n})\ne.Get(\"/doc\", func (e echo.Context) {\n    c.Render(200, \"doc.md\", nil)\n})\n``\n. That is where thereq http.Requestparameter comes in. TheRenderFunc` can look at the headers and do the negotiation. But I think this is a bad idea.\nI was thinking that RenderFunc should only render html style contents and not json, xml, protobuf. That should be a different api. Most likely NegotiateFunc and c.Negotiate\nThe reason is the difference in api. Notice that render takes the name while Negotiate doesn't. (Also I need to play more with the negotiate api to make it better)\ngo\nc.Render(200, \"doc.md\", &model{})\nc.Negotiate(200, &model{})\nSome references:\nhttps://github.com/gin-gonic/gin/issues/59\nhttps://github.com/gohttp/response/pull/4\nhttps://github.com/NancyFx/Nancy/wiki/Content-Negotiation\n. Also if you want to mix Render and Negotiate I think NancyFx does it in an interesting way. This allows the devs to switch models based on the content negotiation. (Need to find an idiomatic way to do this in go)\nHere is an example in c#.\nc#\nGet[\"/\"] = parameters => {\n    return Negotiate\n        .WithModel(new RatPack {FirstName = \"Nancy \"})\n        .WithMediaRangeModel(\"text/html\", new RatPack {FirstName = \"Nancy fancy pants\"})\n        .WithView(\"negotiatedview\")\n        .WithHeader(\"X-Custom\", \"SomeValue\");\n};\n. For c.HTML I expect a html text something like <div>Prabir Shrestha</div>. \ngo\nc.HTML(200, `<div>Prabir Shrestha</div>`)\nBut for c.Render I expect a template text something like <div>{{firstName}} {{lastName}}</div>\ngo\nc.Render(200, `<div>{{firstName}} {{lastName}}</div>`, &Person{\"Prabir\", \"Shrestha\"})\nAnd it is the responsibitliy of the RenderFunc to convert the template and the model to html text that could be used by c.HTML().\nAlso I don't think having c.Markdown() is good idea to put in the core fwk. Then next time someone comes up with a new spec they will want to put it in there. c.XFormat(). I think echo should provide a solid foundation to build on top off.\nLet says someone decides to use handlebars instead of the default template and they already have a bunch of existing templates. That person would want to easily update the RenderFunc to use a handlerbars for new one while using default templates for the existing ones. c.Render(200, \"doc.hbs\", nil) or c.Render(200, \"doc.html\", nil). This gives the user flexibility. My above markdown example could had been a bad sample to begin with.\n. Yes. It is only for templates and html.\nRender is a pretty common terminology in the MVC/web world. So I think it suits better. c.Template sounds awkward for me. \nSamples for c.Render\n- Expressjs uses render function. http://expressjs.com/4x/api.html#app.render\n- Ruby on Rails uses render http://guides.rubyonrails.org/layouts_and_rendering.html\n- Backbone http://backbonejs.org/#View-render\nSamples for c.View\n- HapiJS uses view. http://hapijs.com/tutorials/views\n- NancyFx uses view. https://github.com/NancyFx/Nancy/wiki/View-engines#rendering-a-view-from-a-route-action\n- ASP.NET mvc uses views. http://www.asp.net/mvc/overview/older-versions-1/views/asp-net-mvc-views-overview-cs\n  (Note: NancyFX and ASP.NET MVC returns the view from the function while HapiJS calls the view method.)\nI would prefer either c.Render or c.View but not c.Template because I would consider the .html, .hbs, .md as templates but the rendered template I would considered it as view. I would still prefer c.Render over c.View as it will read as render a view called index.html. \n. Looks awesome.\nNot related to this but would be awesome to have. Most likely a different issue. Since we now have a bunch of functions like HTML, JSON and render returning error. It would be awesome to support func serveXYZ(w http.ResponseWriter, r *http.Request) error { ... } in wraphH.\nSource: https://sourcegraph.com/blog/google-io-2014-building-sourcegraph-a-large-scale-code-search-engine-in-go\n\nHandler functions: We define our handlers with an error return value, and we use a simple wrapper function to make them implement http.Handler. This means we can centralize error handling instead of having to format error messages and pass them to the http.Error for each possible error. Our handler functions look like:\n\ngo\nfunc serveXYZ(w http.ResponseWriter, r *http.Request) error { ... }\n. RenderFunc seems to be private in Echo.\ngo\nrenderFunc      RenderFunc\n. LGTM\n. @vishr Seems like you removed the status code. Can we have it back? Useful when rendering errors.\ngo\nfunc (c *Context) Render(name string, data interface{}) error {...}\nAlso if I pass status code 0 I think it shouldn't write the head. Same for other methods like JSON that writes.\ngo\nfunc (c *Context) Render(statusCode int, name string, data interface{}) error {\n    if c.echo.renderer == nil {\n        return ErrNoRenderer\n    }\n    if statusCode != 0 {\n        c.Response.Header().Set(HeaderContentType, MIMEHTML+\"; charset=utf-8\")\n        c.Response.WriteHeader(statusCode)\n    }\n    return c.echo.renderer.Render(c.Response, name, data)\n}\n. Would be even better to have error similar to net/http - https://golang.org/pkg/net/http/#pkg-variables. ErrUnsupportedPayload so a comparison can be done by the caller.\n. ",
    "dlsniper": "Also, while doing the PR, I've noticed these issues when running golint\necho.go:11:2: exported type Echo should have comment or be unexported\necho.go:21:2: exported type Middleware should have comment or be unexported\necho.go:22:2: exported type MiddlewareFunc should have comment or be unexported\necho.go:23:2: exported type Handler should have comment or be unexported\necho.go:24:2: exported type HandlerFunc should have comment or be unexported\necho.go:28:2: exported const MethodCONNECT should have comment (or a comment on this block) or be unexported\necho.go:60:2: comment on exported var ErrUnsupportedContentType should be of the form \"ErrUnsupportedContentType ...\"\necho.go:62:2: exported var ErrBindJSON should have comment or be unexported\necho.go:228:1: exported method Echo.Run should have comment or be unexported\nrouter.go:24:2: exported type Params should have comment or be unexported\nrouter.go:33:1: exported function NewRouter should have comment or be unexported\nrouter.go:33:28: exported func NewRouter returns unexported type *echo.router, which can be annoying to use\nI'll gladly fix them after this PR if that's ok for you. \n. ",
    "cocodrino": "Hi...this is available right now?..I'm trying to handle a form without luck...what annotation must I use?..thank you. ",
    "sekimura": "You're welcome! :+1: \n. ",
    "mDomingues": "Thank you @vishr. \n1) Alright. With that solution I think I've a problem. For two concurrent requests, the context used will be the same.\n```\nqwerty := e.Group(\"/callback\")\n// Set handle for group\nqwerty.Use(func(c *echo.Context) {\n    context = c  // context is a var \n})\nqwerty.Get(\"\", myMiddleware1)\n// Set middlewares for given route\nasdf := e.Group(\"/home\")\n// Set handle for group\nasdf.Use(func(c *echo.Context) {\n    context = c  // context is a var \n})\nasdf.Get(\"\", myMiddleware2)\n```\nThen I use my context var in each of MyMiddlewareX. From the benchmark tests with multiple requests concurrently, I can understand the same context is being used and workflow doesn't work as expected. With this structure is there a way to have a new handle for each request like if I did: \ne.Get(\"/home\", func(c *echo.Context) {\n    // Do stuff\n})\nDoes it makes sense ? I'm doing something wrong ?\nNevermind 2) if 1) gets working\n. You're right. I had a problem in my code that was panic'ing the server. \nSorry about this. Congratz for the work done with Echo :)\nMany thanks.\n. ",
    "Ralvke": "Code:\n```\npackage hello\nimport (\n    \"github.com/labstack/echo\"\n)\nfunc init() {\n    Server := echo.New()\n    Server.Get(\"/\", IndexHandler)\n    Server.Get(\"/Get\", IndexHandler)\n}\nfunc IndexHandler(e *echo.Context) {\n    e.Response.Write([]byte(\"Hello world\"))\n}\n```\nAfter run this project at Cloud Platform all handlers response 404 page.\n. No changes\nHave to abandon Google App Engine\nThanks\n. Thanks. This works\nClose issue\n. ",
    "swenson": "Thanks!\n. ",
    "wunki": "I wrote a small demo app in Go and the problem was not there. So, can't reproduce. Must be some lib files which got messed up. Sorry for wasting your time.\n. ",
    "ethervoid": "That was my first approach I create two methods trying to not break\nbackward compatibility.\nMy opinion is that the error method should have error code parameter\nEl 24/4/2015 20:44, \"Vishal Rana\" notifications@github.com escribi\u00f3:\n\nIt's a good point. I plan to to change the default functions to also\naccept status code. Let me know your thoughts.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/labstack/echo/pull/35#issuecomment-96030215.\n. Merged this way I don't appear as contributor :cry: \n. \n",
    "y1": "Thank you very much\n. I got it.\nThanks a lot\n. Thanks a lot\n. ",
    "tve": "I pulled the latest code (ace1453931ddebce5b8f5ab8e0472599687b2e5f) and while the first error case is fixed, the second still produces the same panic:\n$ curl http://localhost:4444/acct/a/\n2015/05/04 19:27:33 http: panic serving [::1]:38340: runtime error: index out of range\ngoroutine 7 [running]:\nnet/http.func\u00b7011()\n        /big/usr-local/go/src/net/http/server.go:1130 +0xbb\ngithub.com/labstack/echo.(*router).Find(0xc20800a750, 0xc20801e4a0, 0x3, 0xc20801e4a4, 0x8, 0xc2080404b0, 0x0, 0x0)\n        /home/src/github.com/labstack/echo/router.go:256 +0x407\n. Cool, thanks for fixing!\nYou still have a problem with a trailing slash:\n$ curl http://localhost:4444/acct/123/hello/\n2015/05/04 21:44:20 http: panic serving [::1]:38441: runtime error: index out of range\ngoroutine 6 [running]:\nnet/http.func\u00b7011()\n        /big/usr-local/go/src/net/http/server.go:1130 +0xbb\ngithub.com/labstack/echo.(*router).Find(0xc20800a750, 0xc20801e4e0, 0x3, 0xc20801e4e4, 0x10, 0xc208040550, 0x0, 0x0)\n        /home/src/github.com/labstack/echo/router.go:256 +0x407\ngithub.com/labstack/echo.(*Echo).ServeHTTP(0xc208066000, 0x7f5e901a70d0, 0xc2080443c0, 0xc208032820)\n        /home/src/github.com/labstack/echo/echo.go:296 +0xd0\n. Can you ack this issue or do I need to fork & fix myself? Thanks!\n. Isn't the blog saying exactly what I'm saying, which is to leave error in the signature and pass a more specific type when appropriate? Being able to return err in handlers was one of the niceties of echo IMHO and now it becomes a cumbersome &echo.HttpError{Code:500, Message: ..., C: c} thing. If HTTPError implemented Error() then it could be passed as error but it wouldn't be required when a 500-error is all the user wants. Isn't this exactly what the blog post also says?\n. Not sure what you're quoting. I guess I get to fork your repo then. What I proposed still would allow you to use HTTPError everywhere you want but doesn't force it. Too bad.\n. ",
    "CaptainCodeman": "Digging into this a little more, it seems any route using the 'match any' wildcard has stopped working (e.g. \"/somepath/param\"). The Static handler adds the \"/\" part to the route.\n. Looks like that fixed it - many thanks !! :thumbsup:\nNot sure if this is a related issue or I'm just using it wrong but I noticed that the following works ok:\napi.Get(\"/folders\", folders)\napi.Get(\"/folders/*\", folder)\n... but if the first path has a trailing slash then it causes an error, i.e.\napi.Get(\"/folders/\", folders)\napi.Get(\"/folders/*\", folder)\n2015/05/01 11:52:28 http: panic serving [::1]:54452: runtime error: slice bounds out of range\ngoroutine 34 [running]:\nnet/http.func\u00b7011()\n    /usr/local/go/src/net/http/server.go:1130 +0xbb\ngithub.com/labstack/echo.(*router).Find(0xc20800a460, 0xc208108000, 0x3, 0xc208108004, 0xb, 0xc208040410, 0xc20800a9d0, 0xc20805c000)\n    /go/src/github.com/labstack/echo/router.go:239 +0x214\ngithub.com/labstack/echo.(*Echo).ServeHTTP(0xc20805c000, 0x76f670, 0xc2081500a0, 0xc208106750)\n    /go/src/github.com/labstack/echo/echo.go:296 +0xd0\nnet/http.serverHandler.ServeHTTP(0xc208070a80, 0x76f670, 0xc2081500a0, 0xc208106750)\n    /usr/local/go/src/net/http/server.go:1703 +0x19a\nnet/http.(*conn).serve(0xc208150460)\n    /usr/local/go/src/net/http/server.go:1204 +0xb57\ncreated by net/http.(*Server).Serve\n    /usr/local/go/src/net/http/server.go:1751 +0x35e\nI'm totally fine using the 1st version, just an FYI if that wasn't intended or someone else runs into the same thing or it needs to be mentioned in the docs.\n. BTW: The reason for having the trailing slash is simply convenience as it's the angular default. so it saves having to add $resourceProvider.defaults.stripTrailingSlashes = true; in the client code.\n. Thanks @vishr - really love this package (after trying every golang web framework, LOL) so let me know whenever you need me to test anything out.\nI also discovered that the NotFoundHandler doesn't seem to be working right too - the overridden handler never gets called (returns '404 page not found' no matter what) and if the request doesn't contain a '/' then it causes a panic.\n. Thanks @vishr - I'll try it out and report back\n. All seems to be working great :thumbsup:\n. Maybe more of an explanation of what form of \"support\" you are referring to?\nMy first impression of Caddy is that is't something along the lines of NGINX and would sit in front of your website serving static files and proxying your Go app (?)\nDoes a Go app need to be integrated into it somehow?\n. I found another issue cause by the log colors so I'd be strongly in favour of removing them or at least making them optional. I don't know exactly what is causing the issue but it breaks local AppEngine development (on a mac, I haven't tested it on a live environment yet).\nOn AppEngine all the services, including logging, are accessed through the context associated with a request, e.g.:\nfunc redirect(w http.ResponseWriter, r *http.Request) {\n  var ctx = appengine.NewContext(r)\n  ctx.Infof(ctx, \"I would appear in the dev console logs\")\n  ...\nI needed to switch a project I've been working on to run on AppEngine so made the tweaks necessary to make it run (which I'll writeup as a recipe at some point). But I ran into issues to do with the OAuth requests and the context. The logging also stopped working which was an inconvenience while trying to diagnose the OAuth issues (failed when making requests to Google's account API).\nAfter whittling things down to the bare minimum I ended up at the point where everything worked unless Echo was referenced which finally highlighted the culprit - the call to setup the color output in the init function.\nIf I remove that line / the colorable package then all the AppEngine logging and OAuth libs work fine and as expected.\nI'm guessing it's whatever that package or one of it's dependencies does that is incompatible with the AppEngine sandbox.\n. Ah, I found the discussion about examples vs recipes (#120) ... would it be better to code this up as a recipe instead?\n. Would it make sense to expand this to be for any binary file (with the mime type passed in) rather than just limiting it to images?. That way a single method will work for anything (zip files, pdfs etc...).\nIt would also be good to include likely download options (e.g. to set content disposition header)\n. Added\n. What's the question?\n. Ah I see - that makes sense, I didn't see the app engine one when I looked and was waiting for the merge. I'll check it's still up-to-date.\n. I'm using similar code to the above and it's working fine (unless something has broken in a recent update):\nc := cors.New(cors.Options{\n    AllowedOrigins:   []string{\"*\"},\n    AllowedHeaders:   []string{\"Origin\", \"Accept\", \"Content-Type\", \"Authorization\"},\n    AllowCredentials: true,\n    Debug:            false,\n})\ne := echo.New()\ne.Use(c.Handler)\nThere are some issues with browsers when running on localhost so maybe test with xip.io or something similar.\n. Out of date\n. That doesn't sound like a generally-useful feature for the router to have ... maybe you can explain your use case more - what are the differences in the handlers? It may be that you can do what you need with some middleware instead.\n. You still haven't provided much of the actual use case, just a hint at the format which may be irrelevant - how is it handled differently and what header changes it and why? Why does it need to be a different handler and not something within the handler? It really comes down to this: at what point should it really be a different handler (that the client requests).\nYou could have a single endpoint for every app and add something to the http headers to indicate what response is needed, It could be called \"X-URL\" ... (joke)\nThere is a hook now which allows you to change the request before the route matching - look at the echo.Hook method. It may do what you need.\n. That sounds like it's mostly 'content negotiation' to decide the format for the response (with the slight complication of having more to render for the full html rendered page I'm guessing ?).\nA good pattern for making this neat and avoiding duplications and lots of if / then blocks is the hexagonal / ports and adapters / onion architecture / clean code structure (yeah, it's known by many names). The parsing of web parameters and rendering responses is one implementation detail separate to the core \"use case\" (sometimes called 'interactor') of handling the logic. If you can separate out this core code it's simpler to create alternative wrapper for it and it also makes testing much easier as a side benefit.\n. There's some hints on how to go this in the app-engine recipe. Ignore the app-engine pieces, the standalone version does maybe what you need.\nI tend to have an echo instance in a package setup as a variable (so initialized first) and the handlers for a REST endpoint in a single file which register their routes in an init() function in the same file. It seems to keep things neat and tidy.\n. While we're discussing interfaces ...\nWould it make sense to remove the JSON | XML \"Indent\" methods and have a switch within the regular method instead (maybe based on the debug flag?). That way the output can be switched globally rather than making code changes in the app.\nThe times I use the neat formatting is mostly just development and it would simplify the API surface slightly.\n. Would it be possible to get the underlying http.Request when running on the standard engine in order to use it with AppEngine? i.e. instead of\nRequest struct {\n    request *http.Request\n    url     engine.URL\n    header  engine.Header\n}\nmaybe:\nRequest struct {\n    *http.Request\n    url     engine.URL\n    header  engine.Header\n}\nSorry, I haven't had chance to try it out to see what the implications would be.\n. Thanks, I'll give that a try.\n. It seems that the automatic handler wrapping no longer exists with v2. I like the Handler / HandlerFunc symmetry similar to the standard lib but having to write my own adapter just to be able to use a func with the standard ServeHTTP interface seems like an oversight.\nIf I was new to echo and trying several frameworks this would potentially be an issue that could possibly stop me going any further with it.\nIt would make sense for the adapters to be in the engine packages (ha, and as I typed that I thought \"shoot, did I even look there?\")\n. If I already have a handler that matches the standard sig then it's currently not immediately usable without writing my own wrapper first.\nSay I want to wire up the handlers from net/http/pprof for instance or I'm a new user and copying some example off the internet - I'd have trouble using it with echo v2 compared to v1.\nDoes that explain the need more? It's not hugely difficult to write but it seems like something that would be quite common and not having it provided by the framework just feels slightly \"lacking\".\n. Each engine should provide wrappers for their own handler signatures but the fasthttp engine should also probably use https://github.com/valyala/fasthttp/blob/master/fasthttpadaptor/adaptor.go to be able to provide wrappers for the standard handler signature as well.\nWiring up the net/http/pprof handlers to an app using echo with fasthttp would be the use case. I know it could be hosted as a separate endpoint but I can see other libs providing standard handlers that you want to add to your app.\n. The first one looked fine but I don't think the latest one will work though - the only ref to fasthttp has to be via that engine package otherwise it prevents AppEngine use (because it uses unsafe)\nso IMO ... \nstandard engine should have WrapStandardHandler\nfasthttp engine should have WrapFastHTTPHandler plus WrapStandardHandler (if possible)\n. :thumbsup:\n. Work in progress: http://showchampions.photoserve.co\nGoing to also hopefully switch a personal site from Python -> Go (Echo) over the xmas break (I'll post a link when it's up - get's about 1.5m page views a month)\n. I still have a partial implementation of automatic logging support on AppEngine so I'd be interested in any interface that could be used to swap the logger implementation.\n. Just so I understand the issue - you're wanting to have the roles allowed defined on the handler? I'm assuming you check those against roles in a JWT or something right? Does an approach like this not work?\n```\nfunc RequireRole(h echo.HandlerFunc, roles ...string) echo.HandlerFunc {\n    return func(c *echo.Context) error {\n        cl := c.Get(\"claims\")\n        if cl == nil {\n            return echo.NewHTTPError(http.StatusUnauthorized)\n        }\n    if HasAnyRole(c, roles...) {\n        return h(c)\n    }\n\n    // you shall not PAaaaaasssssssssss !!!! (waves staff)\n    return echo.NewHTTPError(http.StatusForbidden)\n}\n\n}\n```\nThen decorate the handler using g.Get(\"/:id\", RequireRole(handler, \"some-role\"))\nApologies if I didn't understand the issue you're having and this doesn't apply.\nForgot to add ... there is middleware to decode and add the claims token to the context and the HasAnyRole is a method to check the role membership.\n. I would prefer logging to be silent by default (except maybe for panic middleware?).\nIf I do want to have log output then I should need to configure a logger and ideally the default options should be very simple with few dependencies. Loggers to apply color formatting or output to external logging services should be plugins.\n. Given that it would be static, a closure would be the easiest way to do this - works for any framework, no API changes required.\n. You can still do the same with middleware - an example is JWT auth checking where your middleware needs to know which roles to allow, you end it with something like:\ne.Get(\"/protected\", auth.Allow(handler, \"operator\", \"admin\"))\nfunc Allow(h echo.HandlerFunc, roles ...string) echo.HandlerFunc {\n    return func(c *echo.Context) error {\n    ...\n    }\n}\n(or variations - setup the middleware with the roles and Use it in a group etc...)\nIf the settings are known at route-config time and are not request specific then I think adding them to the router maybe convenient but unecessary.\n. No, only if I want to decorate routes separately. The same approach can be applied to a group of routes with Use. There are lots of examples of this approach in various go middleware packages - CORS etc...\nThe point is, if you want to pass some configuration into your middleware it can already be done without adding any additional complexity to the router.\nThe Logger, Auth and Compress middleware in Echo all do it this way.\n. > For my use case the middleware needs route-specific configuration, so the answer is: yes for me, I guess?\nMore of a \"definitely maybe\" :) You only need as many configurations as there are variations. Instead of decorating each route with values I'd imagine it would be better to have a few variations like \"heavyUseLimiter\" and apply them as needed so you could update configs in one place only.\n\nAnd with Echo v1 I'd need to create a separate group for each route to have route-specific middleware -- there is no possibility to register middleware with the route directly like in v2 API?\n\nYes, that is a V2 feature but you can achieve the same result with handler wrappers (just a variation of the sig).\n. Let us know if you run into any issues.\n. I hit the same thing - the net Context doesn't appear to be included in the struct or exposed anywhere to use.\nI've added it to a branch, I'll push it as a PR to see what @vishr thinks\n. I think the different behaviour of middleware added directly to the router vs middleware added to a group would be confusing. I've always seen Group as just a way to have a common prefix and / or middleware applied to a set of routes - it would trip me up if I rearranged some code, removed a group and objects passed to the middleware changed as a result.\nI think once Echo is calling into user supplied handlers and middleware that the full context should be setup and available. I understand wanting to get rid of the hook which allowed changing the path before the routing part kicked in but I don't think the current approach is worth the compromise in expectations.\nI was playing around with some things around the context (for use with appengine) but it may also applicable to that case too. I need to rebase onto your latest changes but will run it by you and see what you think.\n. It's probably a 'surprise' to some and will break things especially if you are not vendoring echo (both the change to v2 and then the API changes within v2)\nVendoring isn't always possible depending on the version of Go being used (it isn't an option yet with App Engine which is still on 1.4).\nI means switching GOPATH or checking out a branch of Echo is necessary - a bit of an inconvenience but if you're not expecting it and you update your app I can see how it would be unsettling / frustrating.\n. Can you clarify what you mean - do you mean run the server on that port?\n. Check out Go 1.7 - looks like there are changes coming to the core language and Context.\nhttps://tip.golang.org/doc/go1.7#context\n(being added to Request)\n. It depends if you are hosting a Single Page App or not. If you have a SPA you want the index.html page to be served for most requests that aren't already mapped specifically and the response should be 200, not 404, otherwise it would kill any chances of SEO working.\nIf it is for a regular server-rendered app though then any missing file should have a 404 status code for the not found page IMO.\n. fasthttp is an interesting library and although it of course provides some great numbers for the Go-router-benchmark obsessed in reality it's use-cases are rather quite niche and I don't think the touted benefits are really worth the compromises that trying to support it within the one framework introduces.\nI found myself using echo less and less with v2 as it just seemed to have become more complex and laborious to use when much of the complexity wasn't delivering immediate benefits (if using the standard engine).\nRouter benchmarking in the Go ecosystem has jumped the shark IMO - most of the frameworks around now are more than fast enough for most people and the perf differences are imperceptible to an app as a whole so focusing on features, stability and ease-of-use makes much more sense.\nI'd rather see things being aligned with the Go standard framework more and fewer external dependencies. Less is more.\n. ",
    "mholt": "Hi - I happened upon this issue as I was looking at potential routers for a new Caddy feature.\nI also fail to see how echo could support Caddy - if you could elaborate I'd be interested to know!\n. @vishr Sorry - no, I know how to use echo :+1: I was asking for more details about @redaready's original question, just in case I could help somehow. My only guess about the original question is maybe this: Caddy has a suite of middleware that use the function signature ServeHTTP(http.ResponseWriter, *http.Request) (int, error) which is not currently supported by echo. However, at this point, I don't know of anybody using Caddy's middlewares as libraries. They can, but probably won't until Caddy is more stable. Anyway, that's just my guess...\n. ",
    "laicosly": "Potentially a similar issue, I'm seeing group middleware with a wildcard group.Get match return the wrong url segment in the param value.  \n```\n// instead of getting \"labstack\" from c.Param(\"thing\"), I get \"rules\"\nGET /v1/labstack/rules\nfunc main() {\n  e = echo.New()\n  g := e.Group(\"/v1/:thing\")\n  g.Use(ThingMiddleware)\n  g.Get(\"/*\", Handle)\n  e.Run(\":1234\")\n}\nfunc ThingMiddleware() echo.HandlerFunc {\n  return func(c *echo.Context) error {\n    log.Println(c.Param(\"thing\"))\n    return nil\n  }\n}\nfunc Handle(c *echo.Context) error {\n  return c.String(200, c.Param(\"thing\"))\n}\n```\n. I'm experiencing a scenario where nested group middleware doesn't execute, unless I add at least two mw on it.  The third handler is being executed but not the third mw.  It only seems to occur when I have multiple sibling groups (third & fourth) on the second group.  Pseudo example below.\n``` go\n// GET /first/param/third\nfirst := e.Group(\"/first\")\nsecond := first.Group(\"/:second\")\nthird := second.Group(\"/third\")\nthird.Use(func (c *echo.Context) error {\n  println(\"Hello?\")\n  return nil\n})\nthird.Get(\"\", thirdHandler)\nfourth := second.Group(\"/fourth\")\nfourth.Use(func (c *echo.Context) error {\n  // do some stuff\n  return nil\n})\nfourth.Get(\"\", thirdHandler)\n```\n. I'll try, it seems as if sibling groups are polluted by one another's middleware in my scenario.  In the example above, I expect a request handled by the third group, not to trigger the fourth group's middleware, but it is.\n. @dre180  I'm working around this issue by using the secondary arbitrary args to define middleware on siblings groups where I'm seeing unexpected cross-pollution.\n``` go\ngroupA := e.Group(\"/groupa\", mwOne, mwTwo)\ngroupB := e.Group(\"/groupb\", mwTwo)\n```\ndeclaring mw this way, instead of using e.Use seems to prevent the issue from occurring.\n. Adding the SetRenderer method on *Group seems to work.  Any reason why this shouldn't be done?\ngo\n// added to github.com/labstack/echo/group.go\nfunc (g *Group) SetRenderer(r Renderer) {\n    g.echo.renderer = r\n}\ngo\ne := echo.New()\ng := e.Group(\"/my\")\ng.SetRenderer(t)\ng.Get(\"/test\", func(c *echo.Context) error {\n  return c.Render(http.StatusOK, \"test\", \"Hello World\")\n})\n. Ah nvm, I see that I was setting the renderer too late. e.SetRenderer needs to be called before creating Groups.\nThere may be an advantage to allowing groups to use their own renderers, otherwise my issue is closed by adjusting the order of assignment to:\ngo\ne := echo.New()\ne.SetRenderer(t)\ng := e.Group(\"/my\")\ng.Get(\"/test\", func(c *echo.Context) error {\n  return c.Render(http.StatusOK, \"test\", \"Hello World\")\n})\n. ",
    "olliephillips": "Hi, really appreciate you taking the time to reply. Thank you for the steer and commit\nI had this:\n```\nfunc TestMiddleware(h http.Handler) http.Handler {\nreturn http.HandlerFunc(func (w http.ResponseWriter, r *http.Request) {\n\n    username, password, ok := r.BasicAuth()\n\n    // No Authentication header\n    if ok != true {\n        http.Error(w, http.StatusText(401), 401)\n        return\n    }\n\n    // Check validate credentials\n    ok = validateUser(username, password) // Off to database\n    fmt.Println(ok)\n    if ok != true {\n        http.Error(w, http.StatusText(401), 401)\n        return\n    }\n\n    // Authenticated user\n    h.ServeHTTP(w, r)\n    return\n})\n\n}\n```\nwhich I've been able to refactor to this using the new echo.HTTPError return , which feels much cleaner\n```\nfunc TestMiddleware(c echo.Context) echo.HTTPError {\nusername, password, ok := c.Request.BasicAuth()\n\n// No Authentication header\nif ok != true {\n    return &echo.HTTPError{\n        Code:  401,\n            Error: errors.New(\"Unauthorized\"),\n        }\n}\n\n// Check validate credentials\nok = validateUser(username, password) // Off to database\n\nif ok != true {\n    return &echo.HTTPError{\n        Code:  401,\n            Error: errors.New(\"Unauthorized\"),\n        }\n}\n\n// Authenticated user       \n    return nil\n\n}\n```\nThanks again. Hope your Echo project is a big success!\n. Thanks for the clarification @axdg hoped that might be the case!\n. ",
    "raphael": "Thanks for the quick response! Something else that doesn't work though is then trying to use c.Set() and c.Get() in tests as it tries to write to a nil hashmap.\n. Yup that would be perfect!\n. Thank you this helps. One last thing that is still not possible is to specify the response status and size because they are private fields of the Response struct. I'm using these fields in the middleware so being able to set them would help testing.\n. Yup calling c.Response.Write() worked, thanks! in case you're curious: https://github.com/rightscale/go_middleware\n. @vishr I think you're missing the point. From the article you are referring to:\n\nA sophisticated caller can then use a type assertion to check for a NegativeSqrtError and handle it specially, while callers that just pass the error to fmt.Println or log.Fatal will see no change in behavior. \n\nThe handlers should return error, then user code can check for *HTTPError with an assertion and use that if needed. There's a lot of benefit deriving from using built-in types especially for error handling. For example every single implementation of an echo app is going to have to implement some Error() functiont that creates a *HTTPError from an error because that's what every other package use to return errors. I guess you could provide such a function but again that's not idiomatic.\n. Thank you for the pointer, I understand the reference now. I guess I still don't see the benefit, it would be easy for echo to check whether the error is an HTTPError and if so use that to build the response otherwise call a generic error handler. The way it is now I have to wrap all errors in *HTTPError (like this), it would seem better if that was done in once place (the generic error handler).  In general the code for the app before that change was cleaner.\n. That would certainly help - I do wonder about how having two ways of defining handlers affects the usability of the framework though (you'd have to explain why there are two ways - when to use one vs. the other etc.). Probably something to ponder before making any change.\n. Nice! thank you. \n. ",
    "tmaiaroto": "I couldn't seem to get it to flush then. To clarify, you mean if I do, `c.Response.Writer.Write(bytes) ??\n. Yes, I thought I followed that back and saw the struct used http.ResponseWriter. Just making sure. Strange I can't get it to Flush() then when writing.\nI used to use go-json-rest and I'm basically using that as a guide. https://github.com/ant0ine/go-json-rest#streaming\nI have no real ideas for a streaming API, though it would be much appreciated. I stopped using go-json-rest because I wanted something a little faster (though it's fast enough I suppose) and tried httprouter and now echo which I'm liking a lot so far. I think go-json-rest has many extremely convenient features and I wouldn't mind seeing some of them make their way to echo one day provided they don't end up affecting performance and such.\n. I'm just building an API where I'm streaming some messages out is all. There's always paging of course for many tasks, but streams make better sense for many of the analytics I do. Think about aggregate data in smaller chunks to manage performance. Or client applications for real-time graphing, messaging, etc.\nOn the front-end, I'll use things like Oboe.js for working with the data that's coming out of the streaming API. http://oboejs.com/examples\nLooking at other APIs for ideas, I imagine Twitter's streaming API is a good example. Basically it's just line by line JSON. So it's not valid of course. That's why libraries like Oboe.js help.\nI don't know how robust things need to be, like I said it's all pretty much working just fine. I'm sure you could come up with some clever interfaces, but I'm not sure what those would even look like. Sources of data to stream can be quite varied.\nLet me know how else I can help. Thanks.\n. Looks nice. I like how context handles all that. If an error is returned will there be a 5xx status or anything?\n. Sounds good.\n. ",
    "ivoviz": "Even if I use echo.HandlerFunc it throws the exact same error for me.\n. I must be dumb, but even with that release it doesn't work. :)\nI've checked echo_test.go and I saw it uses func(c *Context) *HTTPError for NotFoundHandler. Changing the code to\nfunc index(c *echo.Context) *echo.HTTPError {\n    return c.HTML(http.StatusOK, \"<html></html>\")\n}\nmakes it work, but I'm just not sure anymore if this is the right way.\n. Okay, thanks!\n. ",
    "furkanmustafa": "Sorry for commenting in a 2 years old closed issue.\n@vishr Do you plan to handle requests in a streaming way too? or is it already possible?. ",
    "alehano": "I did it, but it would be useful to include that mw to a package by default.\n. For me, it's quite exotic. And you can do it by yourself if needed. I think it's a good idea to keep project as slim as possible.\n. E.g. https://github.com/labstack/echo/blob/master/examples/website/server.go\n. +1. Static group solves the problem. \ne.Group(\"/static\", mw.MaxAgeHeader).ServeDir(\"/\", \"static\")\n. Yes, it's still there.\n2015/06/09 20:22:24 Admin\n2015/06/09 20:22:24 GET /static/test.txt 304 775.864\u00b5s 0\n2015/06/09 20:22:25 Admin\n2015/06/09 20:22:25 GET /static/test.txt 304 70.584\u00b5s 0\n2015/06/09 20:22:27 Admin\n2015/06/09 20:22:27 GET /static/test.txt 304 62.229\u00b5s 0\n. ",
    "mschewe": "I have created a minimal example that reproduces the problem: https://gist.github.com/mschewe/47b08668e6b81f3d4b4f\n. As far as I can see it does now work perfectly. Thank you very much!\n. Great, this make Echo even more useful!\n. ",
    "alioygur": "@alehano +1\n. i just using labstack/echo for its simplicity. if you want a fullstack framewrok then you can use revel or beego\n. i think the basic auth mid. should be deleted. there are lot of middlewares out of box. and i don't think that for a performance worse.\n. great.\n. well, the context has a bind method, it is good. maybe should have a Validate() method that validates the request. so maybe should have a BindAndValidate() method.\n. ",
    "orangesoup": "Well in that case we could also just delete the basic auth middleware as well. I really wouldn't think JWT is such an exotic thing and I also wouldn't think it would make performance worse.\n. ",
    "denro": "For anyone who wants a JWT-middleware its very easy to implement one, eg:\nhttps://gist.github.com/denro/9e190d6b59923b9d0338\n. ",
    "jpillora": "Once this is ready, ill work on a module for converting what you provide into an Apiary API Blueprint :smile: \n. No worries. Since creating this I'm just using a simple wrapper around httprouter.\n. Thanks anyway :)\n. ",
    "leighmacdonald": "Try the following:\nc.Request().Header.Get(\"Referer\")\n. ",
    "runningmaster": "Thank you. Now we have a little harmony between e.ServeFile() and e.ServeDir() by analogy with http.Dir() from stdlib.\n. @fzakaria \nI think that your suggestion is simpler and more accurately (without additional wrapper). Therefore it's better. Thanks for sharing.\n. I found that with small wrapper still better (because \"/debug/vars\" is available too).\n```\n \"expvar\"\n \"net/http/pprof\"\nr := echo.New()\n// expvar\nr.Get(\"/debug/vars\", digStdHandler)\n// net/http/pprof\nr.Get(\"/debug/pprof/\", digStdHandler)\nr.Get(\"/debug/pprof/cmdline\", digStdHandler)\nr.Get(\"/debug/pprof/profile\", digStdHandler)\nr.Get(\"/debug/pprof/symbol\", digStdHandler)\nr.Get(\"/debug/pprof/trace\", digStdHandler)\n// runtime/pprof\nr.Get(\"/debug/pprof/goroutine\", digStdHandler)\nr.Get(\"/debug/pprof/threadcreate\", digStdHandler)\nr.Get(\"/debug/pprof/heap\", digStdHandler)\nr.Get(\"/debug/pprof/block\", digStdHandler)\nfunc digStdHandler(w http.ResponseWriter, r *http.Request) {\n    if h, p := http.DefaultServeMux.Handler(r); p != \"\" {\n        h.ServeHTTP(w, r)\n    }\n}\n```\nAnd this one wrapper may be improve for checking access permissions to these methods, for example:\nfunc digStdHandler(w http.ResponseWriter, r *http.Request) {\n    if !flag.Debug { // check a flag or secret key\n        forbidden(w, r)\n        return\n    }\n    if h, p := http.DefaultServeMux.Handler(r); p != \"\" {\n        h.ServeHTTP(w, r)\n    }\n}\n. There is some trick/work-around for that: https://github.com/labstack/echo/issues/251\n. @Retired \n\nI think a better approach would be for the default logger (the one attached by echo.New()) to simply be a no-op logger and if the user wants, they can explicitly call e.SetLogger(log.New(\"echo\")).\n\n+1\n. @vishr \n\nWill that be ok?\n\nNow all works fine again. Thank you.\n. ",
    "manucorporat": "There was a very important regression bug in Gin, it is fixed. I will run the performance tests again. thank you guys.\n. @vishr @alehano\nBenchmarkEcho_Param 10000000           129 ns/op           0 B/op          0 allocs/op\nBenchmarkGin_Param  10000000           130 ns/op           0 B/op          0 allocs/op\nBenchmarkEcho_Param5     5000000           258 ns/op           0 B/op          0 allocs/op\nBenchmarkGin_Param5  5000000           221 ns/op           0 B/op          0 allocs/op\nBenchmarkEcho_Param20    2000000           690 ns/op           0 B/op          0 allocs/op\nBenchmarkGin_Param20     3000000           542 ns/op           0 B/op          0 allocs/op\nBenchmarkEcho_ParamWrite     5000000           243 ns/op           8 B/op          1 allocs/op\nBenchmarkGin_ParamWrite  5000000           324 ns/op           0 B/op          0 allocs/op\nBenchmarkEcho_GithubStatic  10000000           170 ns/op           0 B/op          0 allocs/op\nBenchmarkGin_GithubStatic   10000000           157 ns/op           0 B/op          0 allocs/op\nBenchmarkEcho_GithubParam    5000000           296 ns/op           0 B/op          0 allocs/op\nBenchmarkGin_GithubParam     5000000           250 ns/op           0 B/op          0 allocs/op\nBenchmarkEcho_GithubAll    30000         59623 ns/op           0 B/op          0 allocs/op\nBenchmarkGin_GithubAll     30000         51971 ns/op           0 B/op          0 allocs/op\nBenchmarkEcho_GPlusStatic   10000000           127 ns/op           0 B/op          0 allocs/op\nBenchmarkGin_GPlusStatic    20000000           123 ns/op           0 B/op          0 allocs/op\nBenchmarkEcho_GPlusParam    10000000           173 ns/op           0 B/op          0 allocs/op\nBenchmarkGin_GPlusParam 10000000           168 ns/op           0 B/op          0 allocs/op\nBenchmarkEcho_GPlus2Params   5000000           238 ns/op           0 B/op          0 allocs/op\nBenchmarkGin_GPlus2Params   10000000           209 ns/op           0 B/op          0 allocs/op\nBenchmarkEcho_GPlusAll    500000          2934 ns/op           0 B/op          0 allocs/op\nBenchmarkGin_GPlusAll     500000          2564 ns/op           0 B/op          0 allocs/op\nBenchmarkEcho_ParseStatic   10000000           131 ns/op           0 B/op          0 allocs/op\nBenchmarkGin_ParseStatic    10000000           128 ns/op           0 B/op          0 allocs/op\nBenchmarkEcho_ParseParam    10000000           143 ns/op           0 B/op          0 allocs/op\nBenchmarkGin_ParseParam 10000000           138 ns/op           0 B/op          0 allocs/op\nBenchmarkEcho_Parse2Params  10000000           181 ns/op           0 B/op          0 allocs/op\nBenchmarkGin_Parse2Params   10000000           164 ns/op           0 B/op          0 allocs/op\nBenchmarkEcho_ParseAll    300000          5227 ns/op           0 B/op          0 allocs/op\nBenchmarkGin_ParseAll     300000          4734 ns/op           0 B/op          0 allocs/op\nBenchmarkEcho_StaticAll    50000         40169 ns/op           0 B/op          0 allocs/op\nBenchmarkGin_StaticAll     50000         33080 ns/op           0 B/op          0 allocs/op\n. ",
    "ernado": "dub of #89\n. Proposal:\nUse http2 by default only with TLS\nIf user specifies explicitly to use http2, use it http mode as well as https\nIf user specifies explicitly to not use http2, dont use it at all.\nThis will solve possible issue when go implementation of http2 will support h2c (issue on http2 repo)\n. @vishr I would realy like to use h2c too. \nI think that h2c can make it to the library, but it will be not enabled by default. There is no reason to  forbid using HTTP2 over TCP at all.\n. Maybe we need some coverage on Echo.run?\n. I can propose removal of http2. \nHTTP/2 support can be easily added to *http.Server. \nI think, even TLS support is not necessary in router/web framework.\nPros:\n- No need to update echo, when http2 implementation gets into std library\n- Simplifying API and reducing subset of non web-framework/router functionality that echo implements is ok. \n- Less 3-party deps \n- Its seems like http2 support will be default for go from some version.\n- TLS termination on reverse proxies is more common that using TLS directly, and case when user relies on http2 support is even more rare.\nCons:\n- One will need 1-3 lines of code more to make http2 enabled.\n- Broken API (removing echo.HTTP2)\n- Less http2-enabled servers by default.\n. @vishr re-adjusted http2 handling to match your proposal\n. ",
    "axdg": "@vishr You've listed JSON web token handler from the built-in auth middleware. I assume the '?' means that you're not sure whether this should be part of the package. I use JWTs, but this is only one possible authentication mechanism - I'm not sure that it should actually be part of a 'micro' framework, and I see that some others feel the same way (#71). \nWouldn't this be more appropriate as an example, especially given that it is just a closure over jwt-go?\n. @pengux The JSON-RPC v2 spec is a two minute read. The protocol seems like it would be relatively trivial to implement server side, to the extent that I'm not sure you would even want to use a library for it. That being said, the Gorilla toolkit  has a package for dealing with JSON-RPC v2 over http that could easily be combined with echo.Context.\n@vishr I'm not sure that RPC fits into the scope of a micro framework?\n. From what I can see most other libraries aren't implementing this functionality themselves. The same issue has been brought up for both Goji (here) and httprouter (here) - the solution seems to be to put some sort of hosts handler in front of the router. In Echo, this would be something like:\n```\npackage main\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\n\n)\ntype Hosts map[string]http.Handler\n// Implement a ServeHTTP method for Hosts type.\nfunc (h Hosts) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    // Check for host x in the Hosts map.\n    if handler := h[r.Host]; handler != nil {\n        handler.ServeHTTP(w, r)\n    } else {\n        // No handler is registered so redirect.\n        // Not sure redirect is appropriate here?\n        // This is just for illustration, else branch could just as easily return\n        // an error for bad port, notFound for bad subdomain etc.\n        http.Redirect(w, r, \"http://a.localhost:8080\", http.StatusTemporaryRedirect)\n    }\n}\nfunc main() {\n// Some subdomains\na := echo.New()\nb := echo.New()\n\n// Host maps.\nhosts := make(Hosts)\nhosts[\"a.localhost:8080\"] = a\nhosts[\"b.localhost:8080\"] = b\n\n// Handler for subdomain a.\na.Get(\"/\", func(c *echo.Context) error {\n    c.String(http.StatusOK, \"Welcome to host a...\")\n    return nil\n})\n\n// Handler for subdomain b.\nb.Get(\"/\", func(c *echo.Context) error {\n    c.String(http.StatusOK, \"Welcome to host b...\")\n    return nil\n})\n\nhttp.ListenAndServe(\":8080\", hosts)\n\n}\n```\n. Ok, structure makes sense now - Ignore the question in the PR I just sent.\nI called the recipe subdomains (can change this if you want), virtual hosts is probably a more accurate term, but it seems like sub-domains / multiple domains is the common terminology used by other routers.\n. No idea why CI is failing?\n. Sweet, I'll change that name and write out the markdown. \n. Done, Thanks.\n. Most (or almost all) of these seem to be problems with the comments. One the things that I think the website and docs really need at the moment is a more comprehensive guide (method reference), so fixing up the comments (for use with godoc) is something that I've been keen to start.\n@vishr what's your opinion of this approach?\n@syntaqx happy to coordinate with you on fixing the lint.\n. My bad, it's not actually missing, I just put the wrong URI in the markdown - It's actually meant to lead to http://echo.labstack.com/recipes/jwt-authentication/.\n. Cheers\n. Gorilla has a pretty flexible package for dealing with sessions - with implementations for several different stores (Redis, MySQL, Bolt) \nWriting a custom middleware using Response.SetCookie() and Request.Cookie() seems like it would probably be the most idiomatic way to go with Echo.\n. @aleSuglia I think that you may have misunderstood what *echo.Context is actually doing. Context is stored only for the duration of the request-response cycle. It is designed to persist only throughout the execution of each middleware, and is freed after a response is sent. It is not stored between requests; \n- In Login(), you send a response when you call c.Redirect(), this response instructs the client (a browser I assume, as you are rendering an HTML template) to redirect. \n- The redirect instruction will cause the browser to make a second request, this time to \"/profile\" that you will handle with GetUserInfo(). \nThe first and second request each have their own Context. Any value stored in Context.store (using c.Set()) in the first request, will not be retrievable in the second request (using c.Get).\nIn order to be able to authenticate a client on each request after login, you will need to provide the client with some data that should be sent back on each response. You could, for instance do this using cookies. The core middleware BasicAuth() might also be a good solution for you, there is an example of it's usage here.\nLet me know if you need any more help.\n. @aleSuglia The problem is that you are passing in the wrong status code. If you want to trigger a redirect in the browser you should be using a code in the 300-307 range. Some thing like:\n```\nfunc Login(c *echo.Context) error {\n    // other code...\n// `303` redirect status code\nreturn c.Redirect(http.StatusSeeOther, \"/profile\")\n\n}\n```\nWill do the trick. \nYou should check out the net/http constants, although I think that 303 is the appropriate code for this situation. \n. Oh, you removed that last code sample.\n. Yep, just looked at the source for encoding/binary. Thanks\n. express.js has a method to register a route against all http methods - I've never really understood where it would be used (except possibly in development). But I do think that (as per the OP's original question), it would be useful if there was a convenience function to register multiple methods - I frequently end up repeating code where I want an endpoint to be accessible with (for instance), both PUT and POST.\nMaybe the API could look something like\n```\ne := echo.New()\n// All methods\ne.All(\"/\", someHandler)\n// Multiple methods\ne.Multi([]string{\"PUT\", \"POST\"}, someHandler)\n``\n. @vishr awesome, thanks. That (.Any and .Match) is a much nicer API than the one that I proposed or .Handle.\n. That's pretty cool. I've never seen http over a domain socket. \n. @olliephillips Yes, entirely different domains could be hosted on the same Echo server. Echo (and most other http frameworks written in go, node.js, ruby etc.) does not inherently know which domain names / subdomains are pointing to the IP at which the server is running. The subdomain example is actually just checking to see which domain name directed a client to the server (via DNS) and executing different middleware groups or route handlers based on that.\n. @pandex I think the question is a little confusing. Ifs` is a net/http Request.Body (which it should be if you are retrieving it with c.Request().Body) It should not contain an auth header (or any other header). To retrieve an auth header you would want to look through c.Requests().Header. \nI'd need to see more of the code to be sure, but from the look of it, you are a POST request containing some JSON data to your Echo server, and that request contains an authentication token?\n. @jatlee Echo does not provide any API for dealing with cookies or sessions itself. If you'd like to use session cookies for authentication of client identification, you should look the net/http's SetCookie.\nThe Echo website contains a guide and recipe, and there API docs are on godoc. Both of these are a work in progress.\n. Where is this error - Is this referring to the JWT authentication recipe? Or @jimwei' - is this in your own code.\nJWT.parse does expect a function with this signiature as the second argument.\n. @vishr Ok, I've taken a look, can't replicate any error with the JWT-auth recipe, and the is no jwt in the core auth middleware anymore. I'll wait for a response from @jimwei - but I don't think this is a bug in Echo or it's examples.\n. I guess logging seems like a reasonable use-case for such an API.\nI'm not sure that the 'dictionary' data structure is necessary, as Context.pnames and Context.pvalues provide a mechanism to access and log key value pairs (or even just values given that keys are available in the matched route, but I guess this depends on the format of the logs). \nI'm pretty sure the simplest implementation would be in router.go, and would add a field to the context after matching a route. Context.Route, or maybe Context.MatchedRoute?\n. This looks promising. I haven't run the benchmarks myself yet (but will do). \n@vishr, we could set the EnableMethodNotAllowed option, this is what the other tree routers have been doing, although this really seems pretty hacky to me. It will degrade performance in every case where an incorrect (or a non-sensical method) is sent. My personal opinion is that I would rather have no option at all than setting a flag.\nThe more I think about it, the more I think it's a good idea to arrange the router this way (as long as the perf cost is minimal, which it appears to be). This structure would not just allow for a 405 response, It would also mean that the proper response could be sent to an OPTIONS request, and would allow for a very minimal implementation of #74. \n. @husobee, I just swapped out labstack for your fork in the benchmarks and got some very different results?\n. @husobee Yep, I'm actually seeing slightly better results than you are now.\n. Was playing around with this earlier - fix is good.\n. The problem is not with e.Static() or g.Static(). It is occurring whenever a group has been created and a request is made to the root path (localhost:1323/) - unless a handler for that path has been explicitly declared using e.Method:\n```\npackage main\nimport (\n    \"net/http\"\n\"github.com/axdg/echo\"\nmw \"github.com/axdg/echo/middleware\"\n\n)\n// Handler\nfunc hello(c *echo.Context) error {\n    return c.String(http.StatusOK, \"Hello, World!\\n\")\n}\nfunc main() {\n    // Echo instance\n    e := echo.New()\n// Middleware\ne.Use(mw.Logger())\ne.Use(mw.Recover())\n\n// localhost:1323/ - tmp fix\n// e.Get(\"/\", hello)\n\n// localhost:1323/a\ne.Get(\"/a\", hello)\n\n// create the public group\np := e.Group(\"/public\")\n\n// localhost:1323/public - static service\np.Get(\"/\", hello)\n\n// Start server\ne.Run(\":1323\")\n\n}\n```\n. Yes, I believe it is - but not with echo.static, it's it is with either echo.group or echo.router. There is also another similar bug - It should be tracked down and fixed soon.\n. @vishr, No worries\n. @vishr, awesome. Thanks.\n. If the use case that you're thinking of is actually like the example (github pages), then the username would be a parameter that you might want to have accessible in your handlers, so that you can do a db lookup using the username, together with the path parameters, then figure out the response. \nGiven the design of echo (and every other major framework in go - httpRouter, gin, goji etc.) you can't set context values prior to routing, as the ctx is created (or grabbed from a sync.pool) inside echo.ServeHTTP().\nI think that the best workaround ATM is to modify the request when you are multiplexing on subdomain, for instance, by adding the username as a url query value. Then you can grab the query value inside your echo handler. \n. You cannot declare regex route segments using echo as per #315.\nIf you need to ensure that the id param is a number, you can check this using a regular expression inside ArticleHandler or some custom middleware. \n. Wouldn't recommend it, Echo is not designed to have routes added dynamically. There isn't currently any mechanism to explicitly stop you from doing this, but as you said, it would lead to race conditions. \nIs there some reason why declaring parametric routes doesn't suite your needs?\n. @akonsu If the pages that she's adding are static, It shouldn't be a problem, you can just serve them from a directory.\nOtherwise, there's alway a graceful restart.\n. You have two options:\n1) The simple option - make a group that only has a single route in it, and apply the route specific middleware to that the group.\n2) If for some reason you don't want to do 1, you can manually wrap all of your route handlers in your middleware. Remember that a middleware is just a function that accepts a handler and returns a handler. So something kinda like;\nmiddleware1(middleware2(handler))\nWill just return a handler with all the middleware applied.\n. @syntaqx +1\nIf these middleware will exclusively be used for this route, incorporate them into the handler.\n. I'm a little confused about what you're asking. In your example, a and b are slices of middleware. They are not functions, so you cannot try to invoke them and pass in a handler. This is syntactically invalid.\n. IMHO, this logger, and the other core middleware (except maybe compression) aren't necessarily meant to be used for every production situation. The logs it produces don't contain several values that might be needed by some users. It should be kept as simple as possible.\n@husobee, out of curiosity, why not use net.SplitHostPort\n. Header is fine, it obviously useful if your running behind a proxy. But as it stands, the values that are being logged would appear to have been chosen arbitrarily. At some point it\u2019ll need a refactor, as vishr said.\nP.S. do you guys have some time to discuss #205 in gitter?\n. ",
    "ipfans": "http://labstack.com/echo/recipes/graceful-shutdown example code have mistake:\ngraceful with grace example and grace with graceful example.\n. https://github.com/echo-contrib/ there is some echo-middleware.\nYeeuu LLC. is deploy API with echo.\n. @denyskoch I think you can submit a new commit like this: https://github.com/labstack/echo/pull/619/commits/4fda95d76956fef5eee3a39d315ac4814e1de030\n. I think it is a bug from github.com/mattn/go-colorable\n. I think it should be some behaviour due to your code. As example:\ngo\n    e := echo.New()\n    g := e.Group(\"/g\")\n    g.GET(\"/dictionary/skills\", func(ctx echo.Context) error {\n        return ctx.String(200, \"skills\")\n    })\n    g.GET(\"/dictionary/:name\", func(ctx echo.Context) error {\n        return ctx.String(200, ctx.Param(\"name\"))\n    })\nRouters are working fine.\n. @vishr cool\n. @vishr done.\n. ",
    "hasty": "This is because Group is relying on unreliable behavior in append. When a new group is created, it makes a copy of the parent echo; this is a shallow copy, though, so g.echo.middleware still points to the parent middleware. That's fine if you don't add any new middleware.\nIf you do, though, then it's dependent on whether or not the slice has capacity for the new middleware. If it doesn't, then append grows the slice and returns a new pointer to the larger slice, which contains all the parent middleware and the new middleware; this is fine. If you're unlucky and there's enough capacity, it just adds the new middleware to the slice, affecting both the parent echo and any other groups that are pointing at it.\nA cheap fix is to just copy over the parent middleware into a new slice the first time you call Use() on Group. This got it working again for me. However, there are other ways that yield different results; for example, Group might keep its own mw list without copying, but then always iterate over the parent middleware before its own (or vice versa, as the case may be). This would allow you to add middleware to the parent echo after creating the group, which may be more like expected behavior.\n. This is fixed in the #197 pull request.\n. Just copying over the explanation from the previously filed issue on this:\nThis is because Group is relying on unreliable behavior in append. When a new group is created, it makes a copy of the parent echo; this is a shallow copy, though, so g.echo.middleware still points to the parent middleware slice. That's fine if you don't add any new middleware.\nIf you do, though, then it's dependent on whether or not the slice has capacity for the new middleware. If it doesn't, then append grows the slice and returns a new pointer to the larger slice, which contains all the parent middleware and the new middleware; this is fine. If you're unlucky and there's enough capacity, it just adds the new middleware to the slice, affecting both the parent echo and any other groups that are pointing at it.\nA cheap fix is to just copy over the parent middleware into a new slice the first time you call Use() on Group. This got it working again for me. However, there are other ways that yield different results; for example, Group might keep its own mw list without copying, but then always iterate over the parent middleware before its own (or vice versa, as the case may be). This would allow you to add middleware to the parent echo after creating the group, which may be more like expected behavior.\n. No, it's too late. Echo.ServeHTTP calls router.Find before any middleware executes (for obvious reasons, as the middleware may differ depending on route), but that means StripTrailingSlash doesn't get a chance to affect routing. So, not sure how it ever worked.\nTo fix it, I'd think you'd want a separate set of middleware that was a pre-routing filter of some kind.\n. So, that works... but perhaps a more generic solution would be good? I wrote one up; it's just a new property of filters that run prior to routing, which let you muck with the request as much as you'd like. I use it to authenticate the cookie for all requests, so I can have a user-customized 404 page.\n. Yeah, seemed like that wasn't working, but it was just bug #96. I'll comment over there with a proposed fix, although there are several ways you could do it.\nOn this one, seemed like the generic approach was more powerful. You could bring back RedirectToSlash, for example.\n. ",
    "sandalwing": "Ah, I wish I saw this, I made same thing.  Mine can be used for default interface of Logger too https://github.com/sandalwing/echo-logrusmiddleware. ",
    "pandex": "That was it. Thanks.\n. My bad, accidentally commented-out line in the POSTing html doc was sending out JSON.parse('{\"user\":\"joe\", \"pass\":\"123\"}') instead of just '{\"user\":\"joe\", \"pass\":\"123\"}' in the Ajax data: property. All's well.\n. Sorry, very tired. Forgot it's c.Response()  and not c.Response, as in : \nc.Response().Header().Set(\"Authorization\", \"Bearer \" + \"eyJhbGciOiJSU0E\u2026\")\nc.Response().WriteHeader(201)\nSolved, thanks.\n. Yes, I noticed this too with c.Bind() from json body. Totally borks json input.\n. A bit confused here, what exactly is the current status of this?\nWhether my json request is\ncontentType: \"application/json; charset=utf-8\" or\ncontentType: \"application/json\"\nfor err := c.Bind(myStruct),  I still get: \nerr: echo \u21d2 unsupported media type\nand c.Bind(myStruct) is empty. \n. I updated github.com/labstack/echo two minutes ago, again, now it's working. Thanks.\n. On debug, in certain sequences, multiple JSON responses are sent (two in a row in rapid succession). I'll report back if this is an obvious problem in my code (which looks like it) or some other thing.\n. Thanks for the b, err := ioutil.ReadAll(c.Request().Body) tip. \nThat works and as I was exploring different Postgres types like bytea and json, I also used\nvar b map[string]int16\n. What's your Ajax contentType? \n. If you're sending key:value pairs, I've had no problems sending them with application/json and using c.Bind(&yourStruct) to get individual keys.\n. Earlier, I'd tried c.File(\"file1.html\") above, but it gives me (type *echo.Context has no field or method File). Obviously, I'm not getting the signature correctly.\n. No, I'm a couple months behind. Before I switch, is return c.File(\"file1.html\") good enough in that flat hierarchy above, in the new version? \n. OK, great, thanks.\n. Files are served via: \n<head>\n       <script src=\"myScript.js\" type=\"text/javascript\"></script>\n       <link href=\"myStyle.css\" rel=\"stylesheet\" type=\"text/css\" /> \n   </head>\nThe architecture is extremely flat, every file is in the same directory, except images, which are in a subdirectory called img. \nIf I do this, files are served fine:\nf := c.P(0) // file name\nswitch f {\ncase \"jquery-2.2.0.min.js\":\n    return c.File(baseDir+f, \"\", false)\ncase \"myStyle.css\":\n    return c.File(baseDir+f, \"\", false)\ncase \"myScript.js\":\n    return c.File(baseDir+f, \"\", false)\n}\nwhere baseDir is the filepath to the physical place where all the files (go, js, css, etc) are on my dev machine.\n. OK, thanks.\n. ",
    "syntaqx": "Ah, so the error actually occurs from an additional line on my end (sorry for not including it in the initial example) - Here is the full snippet:\ngo\ne.Index(\"public/index.html\")\ne.Favicon(\"public/favicon.ico\")\ne.Static(\"/\", \"public\")\nThe issue here is actually specific to the e.Static, reproducible by just using:\ngo\ne.Static(\"/\", \"public\")\nSo, I guess what I would change my issue to is:\n\nWhen binding a static directory, would it be ideal to provide DirectoryIndex support outside of specifically mentioning the index.html?\n\nThe examples/website serves the public/scripts directory specifically, but there's a lot of cases where binding an entire public directory would be a lot less development overhead (ie, just serve everything in here). Not needing to specify the index.html would make it all the more beautiful (or whatever DirectoryIndex is needed)\n. Awesome! Sorry for the over elaboration, I don't comment on GitHub too much so I wasn't sure if I was being clear. Excited to see this!\n. @benpate Totally agree with what you. I was hoping the fix that happened would fix that sort of behavior, but did not have that particular type of issue on my end (only working with a root index). Hopefully @vishr can come up with something clever.\n. @vishr Seems like this is fixed by changing\nhttps://github.com/labstack/echo/blob/master/echo.go#L341\nTo:\ngo\nf, err = fs.Open(file + \"/index.html\")\nCan anyone else confirm this?\n. Looks like this fix doesn't work out for golang on Windows\n\nStill digging into as to what the issue is, but figured it was worth re-opening this until it can be diagnosed.\n. Closed in favor of fb0a5072b6498bf4297e178675e7c68bd25bc171, tis a much better way of doing things. Thanks!\n. Added.\n. Although this is different than the issue being addressed in this pull request, if you'd like, it would also be ideal to provide the Vary header to the Gzip func like so:\n``` go\nfunc Gzip() echo.MiddlewareFunc {\n    scheme := \"gzip\"\nreturn func(h echo.HandlerFunc) echo.HandlerFunc {\n    return func(c *echo.Context) error {\n        c.Response().Header().Add(\"Vary\", \"Accept-Encoding\")\n        if strings.Contains(c.Request().Header.Get(echo.AcceptEncoding), scheme) {\n            w := gzip.NewWriter(c.Response().Writer())\n            defer w.Close()\n            gw := gzipWriter{Writer: w, ResponseWriter: c.Response().Writer()}\n            c.Response().Header().Set(echo.ContentEncoding, scheme)\n            c.Response().SetWriter(gw)\n        }\n        if err := h(c); err != nil {\n            c.Error(err)\n        }\n        return nil\n    }\n}\n\n}\n```\nPlease let me know if you'd like me to also commit that change.\n. Decided to add the Vary header, as there really isn't any reason not to have that as the default. Please let me know if you disagree and I can remove it.\n. Fair enough. It wasn't a huge deal, but I did notice that part of the sale for echo is the speed at which it runs compared to others, as well as the 0b memory footprint. Thought micro optimizations may be worth. \nInteresting that you got the Switch to go faster on your though. I've ran it a bunch and have never seen Switch perform better.\nThanks!\n. Added CloseNotify coverage as well, working on seeing if I can get the entire file to 100% - Give me a bit ;)\n. Probably won't be able to figure out the Hijack and error tonight. Feel free to merge this in if you're happy with the changes.\n. I've been trying to be able to provide test coverage for L#55 but I can't seem to enter that portion of the code successfully. Thoughts on how that might get tested?\n. I'll give it a shot. I've been avoiding it, as I assumed that it would break the flow of stuff (although, that might be ideal if an error occurs at that step)\n. @vishr I think I'll pass on trying to add that coverage in this pull request. Gonna try switching contexts for a bit and seems like you might already have an easy solution for it.\nLet me know if you want me to change anything with the existing code :)\n. @vishr Anything preventing you from merging this?\n. Nice. Great job!\n. Love the idea of having this.\nYou might want to also include a reference in the README.md under the Handy functions to send variety of HTTP response: sections informing people that XML is an available output option (probably right after JSON)\n. Updated with the latest output. Working on this in a branch, should have a pull request in a couple days\n. Nevermind. Seems as though gommon didn't update correctly.\n. c.String is using Fprintf goodies, so you'd want something like:\ngo\nfunc hello(c *echo.Context) error {\n    return c.String(http.StatusOK, \"Hello, 100%% Real World!\\n\")\n}\n. Still want me to add the comment? Given that it's already merged, not sure if you want me to put another PR for it.\n. Bump - Anyone have any thoughts on this?\n. Makes sense actually. Looks like this works if using http.StatusFound - Kinda unexpected behavior, but not the fault of Go.\nThanks!\n. Additionally added some tests so that I didn't have that ugly looking :x: mark on my pull request. It made me the sad.\n. @vishr Any concerns with merging this in?\n. Resolved.\n. I would also suggest in the event you have a middleware that only applies to a single route, you might consider not having that functionality in a middleware at all.\nAlthough I don't know your specific use case, generally speaking middleware are intended to function are shared functionality allowing for DRY handlers.\n. You can implement this in a few ways, but to follow suite with @axdg's initial recommendation, you could use something like the following:\ngo\ne.Use(jwtauth)\ne.Get(\"/\", checkuser(XHandler))\ne.Post(\"/\", checkIdField(checkWhoRequest(YHandler)))\nOr optionally (depending on the number of handlers in play), you could simply attach it to your handler directly (which imho is a bit nicer for initial development when things are a bit subject to change)\ngo\ne.Use(jwtauth)\ne.Get(\"/\", YHandler)\ne.Post(\"/\", XHandler)\nUsed with:\n``` go\nfunc XHandler(c *echo.Context) error {\n    checkuser(c)\n    // ...\n}\nfunc YHandler(c *echo.Context) error {\n    checkIdField(c)\n    checkWhoRequest(c)\n    // ...\n}\n```\nEither of the above implementations are functionally similar, and you can wrap them in any number of ways (ie, having a closure that wraps a closure that wraps your handler, etc.), but the end result is pretty much the same.\nAdditional Note\nAs you end up having more cross over with multiple middlewares, I recommend utilizing groups and specifying middlewares similar to the following to achieve what you're wanting:\ngo\ngrp := e.Group(\"/base\")\ngrp.Use(middleware1, middleware2, middleware3)\ngrp.Get(\"/\", SomeHandler)\nHowever, you will still need to wrap handlers when using multiple middlewares on an individual handler basis.\n. Could you give me an example of the code you're currently using and I can diagnose? The example I used made a lot of assumptions, and might not be ideal for your implementation.\n. You need to update the github.com/labstack/gommon/log package as well, given that the dependency has been updated to allow for interface compatibility.\nsh\ngo get -u github.com/labstack/echo/...\nThat should suffice to recursively update the repository and its dependencies.\n. You might find what you're looking for here: https://github.com/syntaqx/echo-middleware/blob/master/method/override.go (shameless plug and all)\n. Habit typing. Fix has been pushed to my branch.\n. ",
    "dre1080": ":+1:\n. @vishr @Taik I added an integration package here.\n. Sorry for the trouble. Found out the issue was with one of my middlewares.\nI was using StripTrailingSlash middleware. When I removed it, it worked.\n. I get this issue when I use 5 or more global middlewares.\n. ``` go\nfunc setUser() echo.HandlerFunc {\n    return func(c *echo.Context) error {\n        user := session.GetUser(c) // eg. retrieves from db using cookie identifier\n        if user != nil && user.ID != 0 {\n            c.Set(\"User\", user)\n        }\n        return nil\n    }\n}\nfunc main() {\n    e := echo.New()\n    e.Use(mw.Logger())\n    e.Use(mw.Recover())\n    e.Use(mw.StripTrailingSlash())\n    e.Use(mw.Gzip())\n    e.Use(setUser())\nauth := e.Group(\"/auth\")\nauth.Use(func(c *echo.Context) error {\n    if c.Get(\"User\") != nil {\n        return echo.NewHTTPError(http.StatusForbidden, \"Don't need User\")\n    }\n    return nil\n})\nauth.Get(\"/login\", func(c *echo.Context) error {\n    return c.String(http.StatusOK, \"login\")\n})\n\nuser := e.Group(\"/user\")\nuser.Use(func(c *echo.Context) error {\n    if c.Get(\"User\") == nil {\n        return echo.NewHTTPError(http.StatusUnauthorized, \"Need User\")\n    }\n    return nil\n})\nuser.Get(\"/logout\", func(c *echo.Context) error {\n    return c.String(http.StatusOK, \"logout\")\n})\n\ne.Run(\":1323\")\n\n}\n``\n. @laicosly that is the same issue I'm having\n.e.Handlelikenet/http`\n. ",
    "cristiangraz": "@vishr Kami uses x/net/context and has some nice examples for using it to create a base context for all requests. It also makes it easy to swap out starting contexts for unit testing or different environments (i.e. database/sql pool, mock objects/api clients, etc). Also simplifies using something like app engine:\ngo\nctx = appengine.WithContext(ctx, req)\n. ",
    "clanstyles": "I would like this as well. It makes implementation harder with other services since we have to support echo's specific context.\n. ",
    "jbub": "+1 for gorilla/websocket support\n. If such method is going to be added, it should also allow us to pass prefix and indent params to MarshalIndent.\n. For example the API could be something like: \nJSONIndent(code int, i interface{}, prefix, indent string) (err error) {\nI like the name JSONIndent more than JSONPrettyPrint :smiley: \n. Yes its a matter of preference :)\n. @vishr you probably ment jney :). ",
    "panjunjie": "+1 for gorilla/websocket support\n. @axdg Thank  you.\n. Sorry,I can't express my thoughts very well because my english is not good. But I hope you can understand me. I will try to use it in English!\n. What I mean is that, html file in subfolder of \"public/views/\", such as  \"public/views/news\" and \"public/views/social\" , then  how use the Render function?\n. Render can not  found the html files (public/views/news/list.html and public/views/social/list.html ) \n. Thank you,I've got it.\n. But,  are there some function to parsing all html file? i hope Echo can package a function for that,it will meet some special needs.\n. ",
    "tossp": "+1 for gorilla/websocket support\n. @vishr I found something\nin https://github.com/astaxie/beego/blob/master/context/input.go#L338\n``` go\nfunc (input *BeegoInput) Bind(dest interface{}, key string) error {\n    value := reflect.ValueOf(dest)\n    if value.Kind() != reflect.Ptr {\n        return errors.New(\"beego: non-pointer passed to Bind: \" + key)\n    }\n    value = value.Elem()\n    if !value.CanSet() {\n        return errors.New(\"beego: non-settable variable passed to Bind: \" + key)\n    }\n    rv := input.bind(key, value.Type())\n    if !rv.IsValid() {\n        return errors.New(\"beego: reflect value is empty\")\n    }\n    value.Set(rv)\n    return nil\n}\nfunc (input *BeegoInput) bind(key string, typ reflect.Type) reflect.Value {\n    rv := reflect.Zero(typ)\n    switch typ.Kind() {\n    case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:\n        val := input.Query(key)\n        if len(val) == 0 {\n            return rv\n        }\n        rv = input.bindInt(val, typ)\n    case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:\n        val := input.Query(key)\n        if len(val) == 0 {\n            return rv\n        }\n        rv = input.bindUint(val, typ)\n    case reflect.Float32, reflect.Float64:\n        val := input.Query(key)\n        if len(val) == 0 {\n            return rv\n        }\n        rv = input.bindFloat(val, typ)\n    case reflect.String:\n        val := input.Query(key)\n        if len(val) == 0 {\n            return rv\n        }\n        rv = input.bindString(val, typ)\n    case reflect.Bool:\n        val := input.Query(key)\n        if len(val) == 0 {\n            return rv\n        }\n        rv = input.bindBool(val, typ)\n    case reflect.Slice:\n        rv = input.bindSlice(&input.Request.Form, key, typ)\n    case reflect.Struct:\n        rv = input.bindStruct(&input.Request.Form, key, typ)\n    case reflect.Ptr:\n        rv = input.bindPoint(key, typ)\n    case reflect.Map:\n        rv = input.bindMap(&input.Request.Form, key, typ)\n    }\n    return rv\n}\n```\n. nice ^_^,Thanks for your work\n. ",
    "o1egl": "fixed https://github.com/labstack/echo/pull/339. Could be closed\n. https://github.com/o1egl/elogs is third party loggers implementation for Echo web framework\n. @vishr I analized golang open souce libraries and most of them use Warning and Warningf anstead of Warn and Warnf\n. @vishr gommon/logger is not match echo's Logger interface\n. @vishr I think \ngo\nDebug(i ...interface{})\nis more correctly than \ngo\nDebug(i interface{})\n. Fixed in https://github.com/labstack/echo/pull/346.\n. @ohohco Because this declaration overrides parent middlewares.\n. @vishr Done https://github.com/labstack/echo/pull/350\n. @vishr everything is ok. It's cached result. How to rebuild travis task?\n. Very bad. It's not clear. My idea is to add new method to echo like\ngo\nfunc NewWithLogger(logger Logger) *Echo\nand optionaly to gommon/log\ngo\nfunc NewWithParams(prefix string, level Level, output io.Writer) *Logger\n. We made this change for flexibility. Anyone could use any logging lib. But if we keep logger functions, it breaks all ideology. For example if developer initialize some logger and then calls echo.SetLogLevel() or echo.SetLogOutput() nothing happened. And the developer will be very surprised why this methods not work. And you'll have to write documentation for this case that don't use this methods for loggers except gommon/log \nI think that it's not a big problem for developers to initialize logger with custom behavior. We shouldn't concentrate to concrete logger implementation and echo's internal logger initialization should be only for default behavior.\n. @vishr yes. It's because I move Context.Bind tests to binder.Bind\n. ok\n. @vishr I don't know what's happened. Please see this for example\nhttps://coveralls.io/builds/4927978/source?filename=echo.go#L485\nhttps://github.com/o1egl/echo/commit/e4346cea4baa29af3d87918213303dd26c129b34#diff-3293b0042320bb776f7df8cff799c850R54\n. @vishr Done\n. @vishr sure. I'll make it tomorrow :)\n. Fixed #358\n. @vishr It's because of https://github.com/labstack/echo/pull/358/files#diff-8546f89d187c3bbfaaece90714521a4cR39 \nhttps://coveralls.io/builds/4982931/source?filename=binder.go#L68 return error when body is nil.\n. @vishr I think it's not common case. We can add method like #337 for sending binary data.\n. @dhanunjay I understand that it's important for you. If we will add method for sending binary data, it will solve your issue.\n. Here is the solution\ngo\nswitch filapath.Ext(f) {\n    case \".js\", \".css\":\n        return c.File(baseDir+f, \"\", false)\n    default:\n        return c.File(baseDir+\"myReturnX.html\", \"\", false)\n}\n. Which http status code do you send?\n. I think you can do it with middleware.\n. @Anon-Penguin you can use root level middleware to override requests url\n. No need to specialty integrations. linked works as http proxy. You just need to configure it. Or you can use zookeeper or consul for auto discovery . \nI use https://github.com/eBay/fabio \n. I think we can add method like Context.Blob(contentType string, data io.Reader) error\nOr it could be Context.Data(echo.ResponseEncoder) where \ngo\ntype ResponseEncoder interface {\n    ContentType() string\n    Reader() io.Reader\n}\nWhat do you think about it?\n. What about content length? Should we set it? \n. @vishr I think that @oliverjanik is right. I create PR https://github.com/labstack/echo/pull/573 with custom encoders functionality.\n. What about middleware? You can put db object into context in middleware.\n. You can put db object into context on subdomain's echo instance declaration \n. ``` go\npackage main\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/engine/standard\"\n\"github.com/labstack/echo/middleware\"\n\n)\ntype (\n    Host struct {\n        Echo *echo.Echo\n    }\n)\nfunc main() {\n    // Hosts\n    hosts := make(map[string]*Host)\n//-----\n// API\n//-----\n\napi := echo.New()\napi.Use(middleware.Logger())\napi.Use(middleware.Recover())\napi.Use(dataSourceMiddleware(persistence.DataStore)) // Put your dbinstance to context\n\nhosts[\"api.localhost:1323\"] = &Host{api}\n\napi.GET(\"/\", func(c echo.Context) error {\n    return c.String(http.StatusOK, \"API\")\n})\n\n//------\n// Blog\n//------\n\nblog := echo.New()\nblog.Use(middleware.Logger())\nblog.Use(middleware.Recover())\nblog.Use(dataSourceMiddleware(persistence.DataStore)) // Put your dbinstance to context\n\nhosts[\"blog.localhost:1323\"] = &Host{blog}\n\nblog.GET(\"/\", func(c echo.Context) error {\n    return c.String(http.StatusOK, \"Blog\")\n})\n\n// Server\ne := echo.New()\ne.Any(\"/*\", func(c echo.Context) (err error) {\n    req := c.Request()\n    res := c.Response()\n    host := hosts[req.Host()]\n\n    if host == nil {\n        err = echo.ErrNotFound\n    } else {\n        host.Echo.ServeHTTP(req, res)\n    }\n\n    return\n})\ne.Run(standard.New(\":1323\"))\n\n}\n. go\nfunc dataSourceMiddleware(dataStore DB)  echo.MiddlewareFunc {\n    return func(next echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) err error {\n            c.Set(\"db\", dataStore)\n            return next(c)\n        }\n    }\n}\nblog.GET(\"/\", func(c echo.Context) error {\n    db, ok := c.Get(\"db\").(DB)\n    return c.String(http.StatusOK, \"Blog\")\n}\n. go\ncase strings.HasPrefix(ctype, MIMEApplicationForm), strings.HasPrefix(ctype, MIMEMultipartForm)\n```\nthis case is never pass in GET request.\n. I made PR for adding query params binding in GET request https://github.com/labstack/echo/pull/575\n. Fixed https://github.com/labstack/echo/pull/579\n. I think that it's the right way. My opinion is that if someone really needs fasthttp they use it natively.\n. Typo\n. ",
    "pengux": "@axdg The problem is not in the spec or implementation, but in the standard lib itself. It's not possible to use websocket together with contexts in the registered RPC methods and the Gorilla package only support HTTP. As there is a websocket handler in echo, it would be nice if it could handle RPC services somehow (not necessarily just JSON)\n. ",
    "stale[bot]": "This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. ",
    "mertenvg": "@vishr Echo would have no additional dependencies. The intention is purely to allow the http.Server pointer to be exported and given to grace by whoever is using Echo.\nI will make the changes and submit a pull request for review. I don't believe it would be a breaking change but you would be a better judge on that.\n. @vishr Pull request #115 is ready to rock. Thanks\n. Thats of course always an option. One would lose the benefit of other server configuration helpers built into echo when rolling your own http.Server.\n``` go\npackage main\nimport (\n    \"github.com/facebookgo/grace/gracehttp\"\n    \"github.com/labstack/echo\"\n)\nfunc main() {\n    e := echo.New()\n    e.HTTP2(false)\n    gracehttp.Serve(e.Server(\":1323\"))\n}\n```\nI have in the meantime noticed a compatibility issue between http2 and gracehttp though it's possible my testing is inadequate on the http2 front, hence the e.HTTP2(false) line. Do you have a specific method you use to test http2?\n. This currently only applies to the HTTP/2 implementation but, perhaps you'd want to configure the timeouts for better performance, or add a connection state callback at a later point for additional features within echo. \nHard to know what the possible use cases will be but maintaining limited control over the http.Server from within echo would be imho the most flexible option.\n. graceful does look like a better alternative indeed. Thanks. I'll set up examples for both grace and graceful using the shorthand version.\n. Closing failed.\n. Thanks @axdg. I'm happy with that solution also\n. Sure, I'll have a look.\n. Thanks @nkev , I'm using a Mac as well. If I recall correctly, at the time of creating the recipes both worked without a problem. It's possible that more recent updates are causing issues but will investigate. Thanks again.\n. Thanks @wangyun, After a bit of investigating it seems the http2 is enabled by default again when using echo.New(). There is currently no means to disable http2 by default so @wangyun 's example is the best way to work around this while maintaining existing behaviour. I will add this to the recipe.\n@vishr I would like to propose the addition of a echo.NewHTTP2 function that will create a new Echo instance with the http2 enabled by default. Leaving the original echo.New with http disabled.\n. Updates in PR #233. Awaiting merge if accepted.\n. The case I'm thinking of in particular is for XMLHttpRequests. The function of the endpoint remains the same but the handling of such a request (in particular the response) may be very different.\nI've considered using middleware to modify the route when a specific header is encountered but if I'm not mistaken the handler is selected before the middleware is fired so modifying the path at this point will have no impact on the routing mechanism. Aside from the fact that this approach strikes me as being more of a hack than conscientious design.\nPerhaps a more generic solution whereby an echo user can provide his/her own matcher function (returns a bool indicating a match or not) would allow for more granular control over routes without infringing too much on the inner workings of echo.\n. Ok some details. I have a form that will be submitted either through standard http request or when javascript is enabled be handled through an XMLHttpRequest (to the same form action endpoint). This sends me a \"X-Request-With\" header that I would like to match so that a different handler can be used for the ajax request.\nIn the case of the standard http request I need to create a context (for the entire page) and rerender the entire page template. For the the XMLHttpRequest only a small portion of the context and a specific sub-template is required in the response. \nGranted a conditional statement would also work when using a single handler for both cases but this is a slippery slope to spaghetti code imho. I prefer to have my handlers devoted to a specific responsibility / use case which leads me to my 2 handlers 1 endpoint problem.\nWill take a look at the echo.Hook (no rhyme intended), thanks.\n. Thanks @CaptainCodeman. I'll definitely take a look at the structure you mentioned. It's possible I've used it before without realising but don't recognise the name(s) you mentioned. It's google time :smile: \n. ",
    "ceram1": "Sorryfor delay. I want to test this \nhttps://github.com/appcore-poc/authagain/blob/e94d8cc67e41a38dfcd524534bcf231fd57fe0e9/registry/namespace/v1.go\nThis requires golang appengine sdk..\n. As all apis should be explicitly namespaced or root-only namespaced, I wrapped all apis with appcore-poc/acapi on server/routes.go\nand I initlaize context.Context with appengine.NewContext\nI think this issue can be closed, thanks.\n. ",
    "danqing": ":thumbsup: :heart_eyes:\n. I'm not entirely sure actually. I was stealing your test function for my testing, but that may not really happen in production:\ngo\nfunc request(t *testing.T, method, path string, e *echo.Echo, body io.Reader) (int, string) {\n    r, _ := http.NewRequest(method, path, body)\n    r.Header.Set(\"content-type\", \"application/json\")\n    w := httptest.NewRecorder()\n    e.ServeHTTP(w, r)\n    return w.Code, w.Body.String()\n}\nHere if it's a POST request and body is nil as in your original file, then it will crash.\n. I see. Seems that it's only a test issue then. Thanks for the info!\n. I have a similar issue:\n``` go\na := e.Group(\"/stuff\")\na.Post(\"/abc\", someHandler)\na.Get(\"/:anything\", someOtherHandler)\n```\nThen anything starting with a cannot get to the second case.\n. ",
    "fanbuchi": "\u5df2\u9a8c\u8bc1\u3002\u6b63\u786e\u3002\u697c\u4e3b\u8fc5\u901f\u3002\n. ",
    "chrisseto": "I'll submit a PR tonight!\n. https://github.com/labstack/echo/pull/138\n. @vishr we use it to power a fake version of our authentication server, for local development.\nhttps://github.com/CenterForOpenScience/fakecas\n. ",
    "lon-yang": "There has a another problem. When the request.body has no content , the echo.bind() will throw a exception of EOF. Maybe should to return it if err != nil && err != io.EOF.\n. thanks :\uff09\n. Yes, I think you are right. Thanks any way!\n. ",
    "ghost": "@axdg I'll fix it then :+1: \n. @vishr \nwell, I was thinking about:\n400 (StatusBadRequest) or 501 (StatusNotImplemented)\n400 seems to be more relevant as problem happens with non standard HTTP verb\n. There is a simpler way to do the certificate chain.\nJust concatenate the certificate files, assuming they are stored in PEM format (which is by default all CA send their certificate with PEM unless the client request them to be different)\nThe above approach mentioned in the stackoverflow which is creating a server with a specific listener, will eventually work if you change lots of code, and you should know what you are doing and how to use crypto/tls, crypto/x509, net/http packages\n(P.S: the code in stack overflow won't work out of the box, and needs lot of change)\nOr, as we said the simpler way, you just use Echo RunTLS statement, by just concatinating all certificate files into one\n. Nevermind, I changed back to HS256 cause signing and verifying happens on the same Server, so in my opinion I don't need RS256. But I still think there is maybe somewhere a bug here, not sure. I will close this because it doesn't affect me anymore.. It is actually here on GitHub: https://github.com/labstack/echo/blob/master/cookbook/twitter/server.go\nBut you're right, it is not included in the Echo Docs.. ",
    "aleSuglia": "This code works. \nI'll try to see why from my html the request is not sent.\nEDIT:\nIn my code, in order to prevent emtpy values in the request I do this control:\nif len(c.Request().Form) == 0 {\n    return c.String(http.StatusBadRequest, \"Empty POST request\")\n}\nBut I think that it's incorrect because the curl command returns \"Empty POST request\" as message.\nCan you suggest to me a way in order to prevent this?\n. Maybe you could provide an alternative Form() method which has a Decoder parameter which will let us to obtain the parsed arguments from the request automatically.\nWhat do you think?\n. Following your suggestion I've found gorilla/sessions package which handles in a very simple way session values. \n. @axdg Thank you for your support. I've solved that problem too so I've decided to close the issue which is not directly related to echo!\n. I haven't specified one so it's the default: application/x-www-form-urlencoded\nChanging it could improve the situation?\n. I'm having problem simply because I haven't converted the javascript object into a JSON string and the request payload, for this reason, contains a url encoded values.\nThank you for you help!\n. ",
    "lestrrat": "I'm not sure if this is in same line as the original issue, but I do find myself wanting to add more methods to the context, but all the function receiver types are specified as concrete *echo.Context types, so I'm having difficulties doing that.\nWould it perhaps make sense to change Context to an interface instead of a concrete type?\n. @vishr I was thinking along the lines of (note: only thought about it, so I don't know if it really works)\n``` go\nfunc Setup() {\n    ...\n    e.Use(func(h echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            myCtx := MyContextType{c}\n            return h(myCtx)\n        }\n    })\n    e.Get(\"/\", fooHandler)\n}\nfunc fooHandler(c echo.Context) error {\n    myCtx := c.(MyContextType)\n    myCtx.DoInterestingStuff()\n}\ntype MyContextType struct {\n    echo.Context\n}\nfunc (c MyContextType) DoInterestingStuff() {\n  ...\n}\n``\n. I forgot to mention: My use case for this is to add my app-specific routines to the context. The aboveDoInterestingStuff()would be interesting to _my_ app, but not for Echo in general, so I don't want to add stuff to*echo.Context` per se.\n. And here's a proof-of-concept that should allow me to do what I want, described in https://github.com/labstack/echo/issues/146#issuecomment-126524303 . https://github.com/lestrrat/echo/tree/context-as-interface\nhttps://github.com/lestrrat/echo/blob/context-as-interface/recipes/custom-context/server.go\n. @vishr Yeah, I know re: impact of this change.\nI'm sure it will break stuff for a lot of people, so I will totally understand if you can't accept it. In which case it would be awesome if you can think about it when you can make backwards incompatible changes.\n. @vishr I am using Context.Set that right now :) So it's not like I can't go on with the current *echo.Context stuff.\nI'm okay if you want to punt it for now, but I do think in the future changing echo.Context to an interface is the right way. Who knows, maybe I will want to put some wrappers around c.String for debugging. In that case using interfaces is the only way.\n. I think getting the cookie was obvious, but being able to do SetCookie(c.Response()) wasn't (now that you mentioned, duh!). Maybe I'll get you a doc patch later :D\nOtherwise, understood,  so closing.\n. ",
    "rbucker": "echo is a nice project but has a few weaknesses. Whether or not to be able to specify the root folder (probably not he best idea.). But being able to binddata into the executable would be a great idea... and if not that then at least a callback or a plugin.\n. @vishr I have used them before. Given the robustness of the echo API I thought there may be a place for it in the API.\n. @joeybloggs WTF? Isn't the point of echo to provide some other implementation of the golang http standard library? So it's already project by project. While I agree that in some multi-tier projects the deployment of the static assets is usually put closer to the client entry point to reduce the amount of duplication there are many use-cases where storing the assets in the executable is also a good idea.\n- immutability of the assets\n- auditability of the assets\n- deployment is easier\n- the assets are already cached in the executable\n- the assets can be templates providing a different level of configurability\nFrankly it's no different than storing the executable and the assets in a container without the container.\n\"very custom\"  It's no different than any other webapp.\n. @joeybloggs I disagree; (a) it's not what you said and (b) it's a perfect place for it. echo already provides a File() API that serves static content; serving content from go-binddata is not much of a leap from there.\n. duplicate of #146  moving my request there\n. ",
    "joeybloggs": "@rbucker @vishr here's another you could try https://github.com/go-playground/statics\nhowever I don't think that having statics built into the API would be a good idea, as embedding files is usually a very custom, project by project, venture.\n. @rbucker you are taking what I said way out of context...I agree with all your points about embedding static assets; never said it wasn't a good idea I do it myself.\nWhat I said if you read closely is that I don't believe it should be part of the echo API as it's not echo's job or responsibility to generate or embed them, just use/serve them and already has all of the tools to do so.\n. :-1: it would make changes like issue #146 Context as an interface problematic. Correct me if I'm wrong but Go inlines these function calls at compile time so I don't see a real performance benefit.\n. It looks like having the ability to hook a validation library may be included in the future see here https://github.com/labstack/echo/blob/master/echo.go#L71 but I don't see it being called anywhere yet.\nThe approach looks very similar to gin which should be very extensible. If you are interested in a library that would fit into the future bind & validate logic and can still be used separately right now you can check out the same one gin uses by default https://github.com/go-playground/validator\n. Hey @lugorian @vishr \njust wanted to mention about using a Context interface for handlers; I recently struggled with this in my package lars. The recent implementation of the context package to the native http.Request object has/will throw allot of frameworks for a loop; it almost makes chaining of std middleware mandator eg.\ngo\nfunc(next http.HandlerFunc) http.HandlerFunc {\n    return func(w http.ResponseWriter, r *http.Request) {\n    }\n}\nnosurf CSRF middleware is a perfect example, it was recently updated to use context on the http.Request object and in an application I was using the token wasn't being returned because adding the token to the context actually shallow copies a new http.Request object and so the caller did not have or know about the token added to the shallow copy's context and so if using Context as an interface wouldn't really work unless:\n1. You never step outside the using Context handlers\n2. The middleware does another shallow copy to update the callers http.Request object eg.\ngo\n// because 'r' is a copy of a pointer to allow the information to get\n// back to the caller, need to set the value of 'r' as below with '*r'\nfunc(w http.ResponseWriter, r *http.Request) {\n    *r = *r.WithContext(context.WithValue(r.Context(), 0, \"testval1\"))\n}\nit may not be a good idea to use a Context interface, I ranted about this in releases 3.3.0 Special Notes section and 3.3.1\nI even went so far as to create a new router pure to avoid all of these issues, here is an example application I whipped up to show how it would work here\nnot saying you shouldn't use it, just highlighting some issues I've come accross, good luck with v3! \ud83d\ude03 \n. ",
    "dahankzter": "Sorry to but in on this but how would I go about to use something like go-bindata with Echo? The obvious ways don't seem to work.\nF.y.i I tend to embed assets all the time. A static self contained program is awesome.\n. Yes and I will do so I think but if I could use the already configured\nlogstash logger that would be nice.\nOn Mon, May 9, 2016, 16:55 Vishal Rana notifications@github.com wrote:\n\n@dahankzter https://github.com/dahankzter Have you looked at logging\nformat configuration https://labstack.com/echo/guide/logger-middleware.\nYou can set this format as JSON and append your message to it. The message\ncould be just a string or another JSON embedded inside, making the entire\nlogging message as a valid JSON.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/labstack/echo/issues/505#issuecomment-217888008\n. Now it looks nice wrt logstash, thank you!\n\nHowever I have a slightly different setup. I have different logging locally and on the servers.\nLocally I log with the default setup which makes it look like this after your fix:\nINFO[0000] Configuration applied\nINFO[0000] Successfully connected to ScyllaDB\n{\"time\": \"2016-05-10T08:03:07+02:00\", \"remote_ip\": \"::1\", \"method\": \"GET\", \"uri\": \"/health\", \"status\": 200, \"latency\": \"47.335\u00b5s\", \"served\": \"15B\"}\nI.e. mixed default logging on the echo logger and logstash format on the middleware logger.\n. Ill solve it for now by simply not logging access logs locally. \nIf it was possible to do somthing like this it would be cool:\ne.Use(middleware.LoggerWithFormat(&logstash.LogstashFormatter{Type: name}))\nIn a manner similar to the normal echo logger.\n. Actually yes it works for me as well. I was stumped by the strip prefix\nthing and assumed the declared path would be part of the uri. Forgot to\nclose, sorry.\nOn Thu, Aug 25, 2016, 22:15 Vishal Rana notifications@github.com wrote:\n\nCode below works for me:\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/engine/standard\"\n    \"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.StaticWithConfig(middleware.StaticConfig{\n        Root:   \"/tmp/\",\n        Browse: true,\n    }))\n    e.Run(standard.New(\":3000\"))\n}\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/labstack/echo/issues/639#issuecomment-242522437, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAKcUwfiIXYwmsWxIpapX6vCKgY02tN_ks5qjffsgaJpZM4JtEyF\n.\n. I would like a crack at this I think. I will be a bit busy but in a week or so I should be able to do it.\n\nAccept header sounds good?\n. Did I try to purge the cache?\nOn Fri, Sep 9, 2016, 21:00 Vishal Rana notifications@github.com wrote:\n\nClosed #651 https://github.com/labstack/echo/issues/651.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/labstack/echo/issues/651#event-784378271, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAKcU0d5878Iz8EuY29peFekckAM4haBks5qoazTgaJpZM4J35ST\n.\n. \n",
    "ssl1": "It's not a question. Framework doesn't have methods for sending of string or []byte without side effects.\nPS. 2All, please don't give stupid advice like\nstrings.replace(someMagicUnpredictableString,`%`, `%%`, -1)\n. ",
    "peppage": "This is coming up on c.HTML. I'm allowing user input (and parsing the markdown) and if they enter a URL with spaces that are %20. Any ideas? Thanks.\ngo\nh := \"<html><body><a href=\\\"https://dl.dropboxusercontent.com/u/111111/Ideas%20-%202.png\\\">link</a></body></html>\"\nreturn c.HTML(http.StatusOK, h)\n. Thanks! It works.\n. I updated one of these to work with v2. Only the sessions part https://github.com/peppage/echo-middleware/tree/master/session\n. ",
    "xxxcat": "@vishr Yes, I updated to latest.  It work fine,  thanks.\n. ",
    "willf": "See https://github.com/labstack/echo/pull/159\n. I will fix the MIME type, rename to JavaScript, and add a recipe example, ok?\n. Ok, I change the method to JSONP, added test cases, and added a recipe.\n. Thanks!\n. ",
    "cgyy": "when get http://localhost:1323/, then panic error,   this is log:\necho => panic recover\n runtime error: invalid memory address or nil pointer dereference\n stack trace 1998 bytes\n goroutine 5 [running]:\ngithub.com/labstack/echo/middleware.func\u00b7006()\n    /Users/cherry/gowork/src/github.com/labstack/echo/middleware/recover.go:20 +0xb8\ngithub.com/labstack/echo/middleware.func\u00b7007(0xc208030600, 0x0, 0x0)\n    /Users/cherry/gowork/src/github.com/labstack/echo/middleware/recover.go:25 +0x7f\ngithub.com/labstack/echo/middleware.func\u00b7004(0xc208030600, 0x0, 0x0)\n    /Users/cherry/gowork/src/github.com/labstack/echo/middleware/logger.go:15 +0x88\ngithub.com/labstack/echo.(_Echo).ServeHTTP(0xc208092090, 0x1013068, 0xc20807a8c0, 0xc208032680)\n    /Users/cherry/gowork/src/github.com/labstack/echo/echo.go:454 +0x1c3\nnet/http.serverHandler.ServeHTTP(0xc2080304e0, 0x1013068, 0xc20807a8c0, 0xc208032680)\n    /opt/go/src/net/http/server.go:1703 +0x19a\nnet/http.(_conn).serve(0xc20807a820)\n    /opt/go/src/net/http/server.go:1204 +0xb57\ncreated by net/http.(*Server).Serve\n    /opt/go/src/net/http/server.go:1751 +0x35e\ngoroutine 1 [IO wait]:\nnet.(_pollDesc).Wait(0xc2080101b0, 0x72, 0x0, 0x0)\n    /opt/go/src/net/fd_poll_runtime.go:84 +0x47\nnet.(_pollDesc).WaitRead(0xc2080101b0, 0x0, 0x0)\n    /opt/go/src/net/fd_poll_runtime.go:89 +0x43\nnet.(_netFD).accept(0xc208010150, 0x0, 0x1011ba0, 0xc20800b000)\n    /opt/go/src/net/fd_unix.go:419 +0x40b\nnet.(_TCPListener).AcceptTCP(0xc208038030, 0x97d4e, 0x0, 0x0)\n    /opt/go/src/net/tcpsock_posix.go:234 +0x4e\nnet/http.tcpKeepAliveListener.Accept(0xc208038030, 0x0, 0x0, 0x0, 0x0)\n    /opt/go/src/net/http/server.go:1976 +0x4c\nnet/http.(_Server).Serve(0xc2080304e0, 0x1012eb0, 0xc208038030, 0x0, 0x0)\n    /opt/go/src/net/http/server.go:1728 +0x92\nnet/http.(_Server).ListenAndServe(0xc2080304e0, 0x0, 0x0)\n    /opt/go/src/net/http/server.go:1718 +0x154\ngithub.com/labstack/echo.(_Echo).run(0xc208092090, 0xc2080304e0, 0x0, 0x0, 0x0)\n    /Users/cherry/gowork/src/github.com/labstack/echo/echo.go:495 +0x4d\ngithub.com/labstack/echo.(_Echo).Run(0xc208092090, 0x358f30, 0x5)\n    /Users/cherry/gowork/src/github.com/labstack/echo/echo.go:474 +0x70\nmain.main()\n    /Users/cherry/main.go:20 +0x1d1\n. Thank you ,I got it\n. And, this type middleware can not set header, for example:\n    admin.Use(func(h echo.HandlerFunc) echo.HandlerFunc {\n        return func(c *echo.Context) error {\n            if err := h(c); err != nil {\n                c.Error(err)\n            }\n            c.Response().Header().Set(\"X-Request-Id\", \"value111\") \n                // this can not write to response header\n            return nil\n}\n})\n. Then, this middleware can not used?\nhttps://github.com/rightscale/go_middleware/blob/master/request_id.go\nbecause it set header after the handler called\n. No, it can not work\n. OK , I also have a question, I want to write some thing like cookie header, code like this if a good idea?\n....\ntype SessionWriter struct {\n    session *session\n    http.ResponseWriter\n}\nfunc (sw *SessionWriter) WriteHeader(code int) {\n    s := sw.session\n    if s.Written() {\n        err := s.Session().Save(s.request, s.writer)\n        if err == nil {\n            s.written = false\n        } else {\n            log.Printf(errorFormat, err)\n        }\n    }\n    sw.ResponseWriter.WriteHeader(code)\n}\nfunc Sessions(name string, store Store) echo.MiddlewareFunc {\n    return func(h echo.HandlerFunc) echo.HandlerFunc {\n        return func(c *echo.Context) error {\n            s := &session{name, c.Request(), store, nil, false, c.Response()}\n            c.Set(DefaultKey, s)\n```\n        sw := SessionWriter{s, c.Response().Writer()}\n        c.Response().SetWriter(&sw)\n    defer context.Clear(c.Request())\n    return h(c)\n}\n\n}\n```\n}\n...\n. @axdg Is this is a bug?\n. @axdg  , I see this bug has been fixed. thank you!\n. :+1: \n. I want create a middleware from https://github.com/martini-contrib/method\nThis is useful for REST APIs and services making use of many HTTP verbs, and when http clients don't support all of them.\n. @syntaqx that can not work in echo.v2\n. @vishr It works, think you!\n. ",
    "caarlos0": "@vishr oh, right...\nthanks!\n. @dre1080 please check #208 , thanks!\n. @vishr can you review this please?\n. @vishr hmmm, other recipes don't have readme either, that's why I didn't write one. But, sure, will add it...\nAbout other options: as far as I know there is no other options...\n. @vishr fixed and squashed the commits, can you re-check please?\n. @vishr ?\n. @vishr go-bindata has another approach (you must run go-bindata first), not sure if it makes sense to mix them together...\n. @vishr Don't know how to get the same results with go-bindata, seems like https://github.com/elazarl/go-bindata-assetfs should be used for that...\nright now, I'm leaving it only with go-rice...\n. @vishr thanks\n. @vishr yes, some personal projects and one project at work too. I think the only one open for the world today is http://antibody.elasticbeanstalk.com .\n. Yeah, it worked, thanks!\n. Yeah, the following code has the same problem: \n``` go\npackage main\nimport (\n    \"net/http\"\n)\nfunc main() {\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"/status\", func(w http.ResponseWriter, r *http.Request) {\n        w.Write([]byte(\"OK\"))\n    })\n    http.ListenAndServe(\":3000\", mux)\n}\n```\nI don't understand why...\n. @vishr done\n. ",
    "gernest": "I am using echo for a project of mine that uses embed assets(  both templates and the static files.) Regarding templates. Echo supports a sustom renderer which implemets the echo.Renderer interface.\nThis is how I implemented. Assuming you have created a packate template(containing theemeded templates.\n``` go\nimport (\n    \"bytes\"\n    \"html/template\"\n    \"io\"\n    \"strings\"\n\"github.com/gernest/zedlist/modules/log\"\nasset \"github.com/gernest/zedlist/modules/template\"\n\n)\n// TPL  is the default template object, with all templates loaded\nvar TPL *Template\nfunc init() {\n    config := &Config{\n        Name: \"base\",\n        IncludesDirs: []string{\n            \"base\",\n            \"partials\",\n            \"auth\",\n            \"dash\",\n            \"errors\",\n            \"resume\",\n        },\n    }\n    t, err := New(config)\n    if err != nil {\n        log.Error(nil, err)\n    }\n    TPL = t\n}\n// Config is the template configuration. Templates are loaded from embedded source, this act as a\n// guide on which to include in the Template.\ntype Config struct {\n// Name is the name of the base template. All other templates\n// will be parsed and associated with this template.\nName string\n\n// Directories to include template files. These should be the directories names\n// under the the templates path. They are relatiove to the template path.\n//\n// Say you want to include the templates in the path /templates/base and /templates/auth.\n// You will need to omit the prefix /templates/ and do like this.\n//      []string{\"base\",\"auth\"}\nIncludesDirs []string\n\n}\n// Template contains templates that are loaded from embedded assets\ntype Template struct {\n    cfg Config\n    tpl template.Template\n}\n// New returns a new template\nfunc New(cfg Config) (Template, error) {\n    t := &Template{cfg: cfg}\n    return t.load()\n}\n// Render renders a template with name tpl, passing val as context data.\nfunc (t Template) Render(tpl string, val interface{}) (string, error) {\n    out := &bytes.Buffer{}\n    err := t.tpl.ExecuteTemplate(out, tpl, val)\n    if err != nil {\n        return \"\", err\n    }\n    return out.String(), nil\n}\nfunc (t Template) RenderTo(out io.Writer, name string, data interface{}) error {\n    return t.tpl.ExecuteTemplate(out, name, data)\n}\n// loads the templates, using constraints specified in the cfg provided at initialization.\n// The templates are read from the embedded assets, no extesion observation is made. The\n// global Funcs is used as the template funcmap.\nfunc (t Template) load() (Template, error) {\n    l := t.cfg.Name\n    base := template.New(l).Funcs(Funcs)\n    t.tpl = base\n    var lerr error\n    for , dir := range t.cfg.IncludesDirs {\n        for , name := range asset.AssetNames() {\n            if strings.HasPrefix(name, dir) {\n                tpl := t.tpl.New(name)\n                nd, err := asset.Asset(name)\n                if err != nil {\n                    lerr = err\n                    break\n                }\n                _, err = tpl.Parse(string(nd))\n                if err != nil {\n                    lerr = err\n                    break\n                }\n            }\n        }\n    }\n    if lerr != nil {\n        return nil, lerr\n    }\n    return t, nil\n}\n//Renderer implements echo.Renderer, it renders zedlist templates.\ntype Renderer struct {\n    tp *Template\n}\n//NewRenderer creates a new renderer instance\nfunc NewRenderer() *Renderer {\n    return &Renderer{tp: TPL}\n}\n//Render renders a template.\nfunc (r *Renderer) Render(out io.Writer, name string, data interface{}) error {\n    return r.tp.RenderTo(out, name, data)\n}\n```\nNow in our case above you can set our Rednder implementation to be th default one like so\n``` go\ne:=echo.New()\ne.SetRenderer(NewRenderer(TPL))\n//  Somewhere in your handler just call the render method from the context object like so.\nfunc hello(ctx *echo.Context)error{\n    return ctx.Render(http.StatusOK,\"hello.html\")\n}\n```\nEDIT: I use go-bindata to embed assets.\n. ",
    "PascalLeMerrer": "This does not seem to work with echo V2.\nI've got these error messages when migrating to V2:\n```\ncontext.Request().Cookie undefined (type engine.Request has no field or method Cookie)\ncannot use context.Response() (type engine.Response) as type http.ResponseWriter in argument to http.SetCookie:\nengine.Response does not implement http.ResponseWriter (wrong type for Header method)\n  have Header() engine.Header\n  want Header() http.Header\n```\n. I use echo for a personal project, Bleu Vanille\nIt will be an application (in french only, sorry) to answer to a major question: what do we eat?\n. The documentation of the autocert package says:\n\nThis package is a work in progress and makes no API stability promises.\n\nA workaround is to replace your acme/crypto package with the one at https://github.com/golang/crypto. ",
    "raitucarp": "Hi @vishr what about fasthttp?\n. Please update the status of this issue\n. Hi, thanks for yours anwser. \nMaybe this title's issue and its explanation is unclear and misleading. Sorry for that.\nBtw, Can echo do something such this?\n``` go\na := mw([]e.Middlewares{jwtauth, checkuser})\nb := mw([]e.Middlewares{jwtauth, checkIdField, checkWhoRequest})\ne.Get(\"/\", a(XHandler))\ne.Post(\"/\", b(YHandler))\n```\n. @axdg: edited. Thanks for correction\n. Hi @syntaqx I am interested with this style:\ngo\nfunc YHandler(c *echo.Context) error {\n    checkIdField(c)\n    checkWhoRequest(c)\n    // ...\n}\nCould you explain me more the flow, how to create a middleware in such fashion?\nBecause it ended up with this warning\nresponse already committed\n. These codes below are just an example to grasp the concept, correct me if i'm wrong, because I'm new with echo\nthis doesn't effect\n``` go\nfunc XHandler(c *echo.Context) error {\n    checkuser(c)\n    // ...\n}\nfunc checkuser(c echo.Context) echo.MiddlewareFunc {\n    return func(h echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) error {\n                      if c.Query(\"user\") == \"test\" {\n                           return c.String(http.StatusNotFound, \"not found\")\n                       }\n                }\n    }\n}\n```\nthis get me warn message\ngo\nfunc checkuser(c *echo.Context) error {\n     if c.Query(\"user\") == \"test\" {\n            return c.String(http.StatusNotFound, \"not found\")\n      }\n}\nWhile I don't prefer middleware on group, because my routes seems don't fit:\n``` go\n// route group you describe above\ngrp := e.Group(\"/base\")\ngrp.Use(middleware1, middleware2, middleware3)\ngrp.Get(\"/\", SomeHandler)\n// my route example\nuser := e.Group(\"/user\")\nuser.Use(checkJwt)\n// user details and comments don't use jwt\nuser.Get(\"/:username\", UserDetails)\nuser.Get(\"/:username/comments\", UserComments)\n// all of these use jwt\nuser.Post(\"/\", CreateUser)\nuser.Put(\"/\", UpdateUser)\nuser.Delete(\"/\", DeleteUser)\n// this use middleware named checkUser, checkId, etc how?\n// It seems too long if I wrap it \n// checkUser(checkId(etcMw1(etcMw2(etcMw3(CreateComment))))\n// the code becomes unreadable\nuser.Post(\"/comment\", CreateComment)\n```\nOnce again, CMIIW\n. Actually I am looking middleware feature such as in express.js:\njavascript\nvar a = [mw1, mw2, mw3]\nvar b = [mw4, mw33]\nvar c = [mw1, mw3, mw4]\napp.post(\"/user\", a, User.create)\napp.put(\"/user\", b, User.update)\napp.delete(\"/user\", c, User.delete)\n. Hi @vishr thanks for your code. But, actually, I still confuse. How to create proper middleware?\nfor example:\ngo\nfunc YHandler(c *echo.Context) error {\n    checkIdField(c)\n    checkWhoRequest(c)\n    // ...\n}\ncheckIdField is checking id field, if there is empty id field, then it will send json with codes internal server error, checkWhoRequest will not run, and YHandler will not run\ncheckWhoRequest is also doing the same, YHandler will not execute if there is an error instead, send error response either json or html, \nbut currently, I ended it up with middleware not running or warning message response already committed\nCorrect me if I'm wrong. So how to create proper middleware?\n. And I remind you again about my case @vishr: \n``` go\n// route group you describe above\ngrp := e.Group(\"/base\")\ngrp.Use(middleware1, middleware2, middleware3)\ngrp.Get(\"/\", SomeHandler)\n// my route example\nuser := e.Group(\"/user\")\nuser.Use(checkJwt)\n// user details and comments don't use jwt\nuser.Get(\"/:username\", UserDetails)\nuser.Get(\"/:username/comments\", UserComments)\n// all of these use jwt\nuser.Post(\"/\", CreateUser)\nuser.Put(\"/\", UpdateUser)\nuser.Delete(\"/\", DeleteUser)\n// this use middleware named checkUser, checkId, etc how?\n// It seems too long if I wrap it \n// checkUser(checkId(etcMw1(etcMw2(etcMw3(CreateComment))))\n// the code becomes unreadable\nuser.Post(\"/comment\", CreateComment)\n```\n. what's wrong with this?\nI tried with this style:\ngo\nfunc XHandler(c *echo.Context) error {\n    checkuser(c)\n    // ...\n}\nHere is the result\n``` go\nfunc checkId(ctx *echo.Context) error {\n    if ctx.Param(\"id\") == \"3\" {\n        return ctx.String(http.StatusNotFound, \"test\")\n    }\n    return nil\n}\nfunc GetUser(ctx *echo.Context) error {\n    checkId(ctx)\n    return ctx.String(http.StatusOK, \"yes\")\n}\n```\nI receive this message\nWARN|echo|response already committed\nAnd the responses are:\nhttp://localhost/user/1 ==> \"yes\"\nhttp://localhost/user/3 ==> \"testyes\"\n@vishr @syntaqx \nbtw what should I do with this case?\n``` go\n// route group you describe by syntaqx \ngrp := e.Group(\"/base\")\ngrp.Use(middleware1, middleware2, middleware3)\ngrp.Get(\"/\", SomeHandler)\n// my route example\nuser := e.Group(\"/user\")\nuser.Use(checkJwt)\n// user details and comments don't use jwt\nuser.Get(\"/:username\", UserDetails)\nuser.Get(\"/:username/comments\", UserComments)\n// all of these use jwt\nuser.Post(\"/\", CreateUser)\nuser.Put(\"/\", UpdateUser)\nuser.Delete(\"/\", DeleteUser)\n// this use middleware named checkUser, checkId, etc how?\n// It seems too long if I wrap it \n// checkUser(checkId(etcMw1(etcMw2(etcMw3(CreateComment))))\n// the code becomes unreadable, and spaghetti code\nuser.Post(\"/comment\", CreateComment)\n```\n. It would be nice if echo has feature:\n``` go\nuser := e.Group(\"/user\")\n// user details and comments don't use jwt\nuser.Get(\"/:username\", UserDetails)\nuser.Get(\"/:username/comments\", UserComments)\n// all of these use jwt\nuser.Post(\"/\", CreateUser).Use(jwtAuth, checkUser)\nuser.Put(\"/\", UpdateUser).Use(jwtAuth, checkUser, checkA)\nuser.Delete(\"/\", DeleteUser).Use(jwtAuth, checkUser, checkB)\n// custom middleware\nuser.Post(\"/comment\", CreateComment).Use(checkId, etcMw1, etcMw2, etcMw3)\n```\nOr this\n``` go\nauth := e.Middlewares(jwtAuth, checkUser)\ncustom := e.Middlwares(checkId, etcMw1, etcMw2, etcMw3)\nuser := e.Group(\"/user\")\n// user details and comments don't use jwt\nuser.Get(\"/:username\", UserDetails)\nuser.Get(\"/:username/comments\", UserComments)\n// all of these use jwt\nuser.Post(\"/\", auth(CreateUser))\nuser.Put(\"/\", auth(UpdateUser))\nuser.Delete(\"/\", auth(DeleteUser))\n// custom middleware\nuser.Post(\"/comment\", custom(CreateComment))\n```\n. If I use middleware for group, what about the get method?\ngo\nuser := e.Group(\"/user\")\nuser.Use(jwt)\nuser.Get(\"/:username\", UserDetails) // this is not using jwt... How??\nuser.Post(\"/\", CreateUser)\nI think it's being ugly route:\n``` go\nrestricted := e.Group(\"/restricted\")\nrestricted.Post(\"/user\", UserCreate)\nnonRestricted := e.Group(\"/nonrestricted\")\nnonRestricted.Get(\"/user\", UserDetails)\n```\nthe result is ugly endpoint\n```\nPOST http://localhost/restricted/user\nGET   http://localhost/nonrestricted/user\nWhat??\n```\n. what about POST method that doesn't consume the middleware? Ignore it or creating more filter such that? Because it would be hard if route design is complex and keep DRY\n. Hi @vishr Thank you so much. I will try it\n. Ok I found the solution:\ngo\nif w, ok := ctx.Response().(*standard.Response); ok {\n        r.HTML(w.ResponseWriter, status, name, data)\n    } else {\n        // error\n    }\nSorry, for opening this issue\n. I need fasthttp ResponseWriter,but its type is io.Writer. How?\n. ",
    "yajiya": "Any update?\n. Agree with @mtojek .\n. I see. It should be 302, but I used 307\n. It was my mistake, and may close now. @vishr \n. Thanks\n. Glad to hear it, and thanks for let me know.\n. I see. I checked code, and learnt it like what you mentioned.\nWhile since by default it writes to cookie, is there any concern that not read from cookie directly?\n. I see, Thanks.\n. ",
    "petomalina": "True, feels like it could be more useful then just image. I'm on that.\n. I tried to dig into this and this is the result:\n- you can get the port from Listener.Addr().String()\n- Echo is using http package which provides Server\n- Server.ListenAndServe() creates new listener as a local variable and does not distribute it back to the Server structure\nBased on this, Echo can provide the copy of the ListenAndServe method from the http package, store the listener and use directly Server.Serve(). This may allow users to lookup the port e.g. by Echo.ListenerPort() .\ncode that works for me for the TCP:\ngo\nln, _ := net.Listen(\"tcp\", \":0\")\nfmt.Println(ln.Addr().String())\n. I would suggest using sync.Map instead of default map here. As of April, this can be found within the standard packages. https://github.com/golang/sync/blob/master/syncmap/map.go. ",
    "konjoot": "@vishr, why this functionality was rejected? There are so good things we able to do with it. First of all, it give us an opportunity of testing handlers in isolation, just by passing mocked context in them. And secondly we able to extend context in  middleware functions. I was about to create an issue about that, but came across this PR. I do not insist, but as for me - this functionality is noteworthy. May be we should discuss it? \n. ",
    "ansel1": "I've also got a use case like this.  Just before headers are written, we calculate a total request handling time, and put that into a header in the response, so clients can calculate network latency.\nWe do it now by hijacking the ResponseWriter in middleware outside the echo.Router.\n. Wow, this project moves too fast...thanks!\n. It seems that in v2, it is no longer possible use Group() to override the global middleware.  I gather the recommendation now is to be strict about ensuring that global middleware is truly global.\nI gather we can overlap groups, to more easily apply common middleware to routes that don't share a prefix.  For example, say I have a bunch of resourceful routes, like /users, /groups, /posts, which all require authentication, and an /auth route which doesn't.  I should be able to do:\ngo\ne := echo.New()\ne.Post(\"/auth\", AuthenticateHandler)\nauthenticated := e.Group(\"\", AuthenticateMiddleware)\nauthenticated.Get(\"/users\", GetUsersHandler)\nauthenticated.Get(\"/posts\", GetPostsHandler)\nRoute matches are strictly in the order they are added to the router, right?\nAlso, not sure if this was the case with v1, but in v2, middleware must be registered before routes are registered, correct?\n. > You can register routes/middleware in any order.\nAh, yeah, my bad.  Missed that the final chaining of the middleware happens inside the handler function passed to the router.\n. Seems like path params with escapes were only messing up the router.  But after routing and parsing out the path params, isn't it desirable to unescape the params before invoking the handlers?\nThis broke a lot of our tests, because our routes use path params with encoded spaces in them pretty often.  I'm tempted to put in a root middleware like:\nc.SetParamValues(unescapeThemAll(c.ParamValues))\n. We have ended up inserting another middleware in our chain which unescapes them all right after routing.\n. FYI: our approach to working around this was middleware which called url.QueryUnescape() on the params.  This method is flawed unfortunately.  Query escaped strings may replace spaces with '+', as golang's url.QueryEscape() function does.  So url.QueryUnescape() replaces '+' with spaces.\nBut URI path segments are allowed to have literal '+' characters in them, so \"unescaping\" them back into spaces is inappropriate.  golang's url package does have the code to correctly unescape path segments, but the only way to invoke it is:\ngo\nu, _ := url.Parse(param)\nparam = u.Path\n. I worked out a solution for a package I wrote which works with either the old context package or the new context package, depending on the version of go.  I basically wrote my own context package which just redeclares the Context interface, and wraps the package level functions like WithValue(), Background(), etc.  The package has one .go file, with the // +build go1.7 build flag, which uses go1.7's \"context\" package, and one with the // +build !go1.7 build flag, which uses the older x/net package.\n. Here's the idea wrapped in package: https://github.com/ansel1/context\nIt's a context package which is api compatible with the other context packages.  If you import that instead of context or golang.org/x/net/context, then it will pick the right implementation via build tags.\n. Just got bit by this.  In my case, it caused a panic in Route.Find() (an index out of bounds error trying to set a value in the params array which was 0 len).\nWe use SetParamValues() to PathUnescape the param values in a middleware.. I would resist the temptation to have echo context implement go Context.\nJust because they have the same name, they aren't really the same things.\nThey have different purposes and different semantics.\nGo back to just having functions to get and set the go Context as a\nproperty of the echo context. And on go17 if make the setter and getter\njust forward to the http.Request context methods.\nOn Fri, Oct 7, 2016 at 6:04 PM Vishal Rana notifications@github.com wrote:\n\nI have been struggling with it for long time now. What are the\nsuggestions?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/labstack/echo/issues/669#issuecomment-252372226, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAGlMRKMbbd45sHeA0hjmQEARzuBqMWYks5qxsH7gaJpZM4KRdn7\n.\n. That looks good for v2.\n\nFor v3, I'd consider wiring the context methods on echo's context to the\ncontext stored in the http request. Or even remove them entirely... the\nrequest is already accessible. You'll need s method to replace the request\nwith a new one. So either:\nr:= c.Request().WithContext(context.WithValue(c.Request().Context(), k, v))\nc.SetRequest(r)\nOr expose a convenience method to hide some of the boilerplate:\nc.SetContext(context.WithValue(c.Context(), k, v)\n...and wire SetRequest to http.Request.WithContext\nOn Fri, Oct 7, 2016 at 9:55 PM Vishal Rana notifications@github.com wrote:\n\n@ansel1 https://github.com/ansel1 Let me know how 4dc7716\nhttps://github.com/labstack/echo/commit/4dc771611a3ed6d586abbe436541e75e391e89fe\nlooks and we can merge it.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/labstack/echo/issues/669#issuecomment-252395472, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAGlMesk0qK9Kr7Ha8gnfwQ_PjIZQ70Lks5qxvgngaJpZM4KRdn7\n.\n. Looks good\n. I'm good with adding the XXXPretty methods, which always pretty print, but could we go back to when the Debug flag would cause JSON() to pretty print too?  It's a different use case: it's nice in development to have all responses pretty printed.. In #561, I commented that we had added middleware (early in the chain, but after routing) which used QueryUnescape on all the path params.\n\nThat turned out to be wrong to, because the rules for query escaping are not the same as for path escaping.  golang 1.8 has acknowledged this by adding new PathEscape and PathUnescape functions.\nI think the cleanest solution is:\n\ndo not unescape the URI.  Let the router see the raw, escaped incoming URI, and match against that\nWhen constructing the Context and populating it with the path params, unescape the path params.  So in my handlers/middleware, when I call c.Param(), I get back a value which has already been unescaped. path param unescaping could be done with middleware as well (so long as\necho 3 still supports Context.SetParams(), haven't checked).  Perhaps\nprovide middleware out of the box.\n\nOr, just make this a config flag on the Echo instance.\nEcho.UnscapePathParams bool\nOn Thu, Dec 8, 2016 at 2:23 PM Vishal Rana notifications@github.com wrote:\n\ndo not unescape the URI. Let the router see the raw, escaped incoming URI,\nand match against that\nAgree\nWhen constructing the Context and populating it with the path params,\nunescape the path params. So in my handlers/middleware, when I call\nc.Param(), I get back a value which has already been unescaped\ncan this be done outside the framework? Not in favour of extra calculation\ninside.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/labstack/echo/issues/766#issuecomment-265829902, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAGlMWAb9C_S0mgjCbejiZltJU84yZkQks5rGFkTgaJpZM4LHauJ\n.\n. Two things: \n\n1) It's fairly straightforward to build alternate implementation with build tags referencing go versions.  Implement one in a *.go file with:\n// +build go1.8\n\nand the other in a *.go file with:\n// +build !go1.8\n\nThis would be a good approach for switching the internal graceful shutdown implementation between graceful and native.\n2) if callers need more control, they can make their own http.Server and use what ever graceful shutdown package they want, and just treat echo as a handler.  This is a simple escape-hatch.  Don't see the need to add complexity to echo's surface for this.. I'd lean toward not exposing the graceful package.  Keep it hidden.\n\nIf echo exposes graceful, graceful becomes part of echo's API surface, and echo's backward compatibility becomes dependent on a 3rd party lib\nI'd expect echo to switch over to the native graceful support when widely available\nIf power users want to use uncommon or advanced graceful features, it's probably easier for them to just set it up themselves.  An example in the docs of how to use echo has a handler for a custom http server should be sufficient.  Especially in echov3 (it's more straightfoward than echov2, where *echo.Echo was not an http.Handler)\n\nEventually, if some graceful options are tweaked by most users, and can be easily normalized to other graceful shutdown libraries, then consider exposing just those options to Echo's surface.  In other words, keep Echo simply by requiring a high bar of convenience value before elevating config options to the API surface.  This should maintain Echo's core strengths: simple, batteries included, but plays well with others.. If there's generally pushback, I'd remove the integrated graceful.  It's so trivial for the developer to add it themselves, especially now that echo v3 is just an http.Handler again. . Wouldn't using a custom binder accomplish this?  Perhaps by wrapping the DefaultBinder?. This was a breaking change.  probably should have triggered a major version number change.. I think the danger here is that since echo.Context is now a context.Context, it means you can call this:\nfunc MyMiddleware(next echo.HandlerFunc) echo.HandlerFunc {\n  return func (c echo.Context) error {\n    ctx := context.WithValue(c, \"color\", \"blue\")\n    ... other handler stuff ...\n    return next(c)\n  }\n}\n\n\nThat's feels like an intuitive thing to do, but it will probably lead to subtle bugs, because you aren't propagating that new context (with the color->blue value in it) down to the next handler.\nThe deeper issue I have with this is that a context.Context's contract is more than just implementing those methods.  It's also intended that context objects be immutable.  echo.Context's are not immutable.  That difference is why people accidentally fell into the recursion problem before.  When a mutable object masquerades as an immutable object, subtle bugs can arise.\nAlso, context.Context objects are intended to cross API boundaries.  echo.Context's are not.  echo.Contexts hold on to a bunch of state, and are intended to be recycled between requests, but context.Contexts should not be, since they are explicitly intended to escape the bounds of the packages which create them.\nI sympathize with the desire for more ergonomics.  I think it would be OK to add a echo.Context#StdContext and echo.Context#SetStdContext, which would just be syntax sugar for c.Request().Context() and c.SetRequest(c.Request().WithContext(ctx)).  So long as echo.Context itself doesn't implement context.Context, I don't think devs will get into trouble.  A SetStdContextValue method might also be OK.\nI don't think you can get rid of the echo.Context#SetRequest method though.  Ultimately, we should keep the stdlib APIs usable, and without echo.Context#SetRequest, you can't use http.Request#WithContext, which in turn means you can use the stdlib way of managing contexts at all.  You'd be forced to use echo-specific APIs.  . They aren't serialized.  They are designed to cross in-process API\nboundaries.  For crossing inter-process boundaries, libraries typically\nprovide their own custom functions to serialize their own context values\ninto http headers or whatever.  (see opentracing API for examples).\nOn Wed, Mar 21, 2018 at 12:22 PM Brendan Ball notifications@github.com\nwrote:\n\nHow are contexts serialized when crossing API boundaries?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/labstack/echo/pull/1094#issuecomment-375026121, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAGlMaOjIiVtfh3TeA97COybSp7_RUE2ks5tgoxOgaJpZM4S0eA4\n.\n. It won\u2019t affect us. Periods in param names are probably rare.  \n\nIf the allowed chars for param names has been well documented before now, I would not make a breaking change. If it hasn\u2019t been, then this was always the intended behavior, and this is just fixing a bug ;). ",
    "mayowa": "My bad! the middleware function isnt being called twice, it was the subsequent request for favicon.ico that confused me.\nchanging the log call to: \nlog.Info(\"MW SessionMgr...: %s\", c.Request().URL.String())\nquickly cleared up the issue.\n. I deleted:\n/home/tester/golang/src/github.com/labstack\n/home/tester/golang/pkg/linux_amd64/github.com/labstack\nand then executed:\ngo get github.com/labstack/echo/...\nThis time it installed without errors.\n. ",
    "raphaeljlps": "@vishr I will take a closer look and see if I can make it work with the bad request, unfortunately I won't be able to do this today. \n. and I will make the tests pass :+1: \n. Okay @vishr I looked around and study the RFC a bit more and don't think we can maintain the BadRequest and make it work with it.\nI made the changes that you suggest about using the basic constant.\n. About adding the realm, thats where I have a problem, don't know from where we will get the realm value, do you have any suggestions @vishr ?\n. done @vishr \n. I will take a look @vishr \n. @vishr I'm getting unauthorized, but the browser is not asking for user/password\nthe browser is not getting the WWW-Authenticate header\n. @vishr I solved by the changing the location of the WWWAuthenticate header\ngo\n        if len(auth) > l+1 && auth[:l] == Basic {\n            b, err := base64.StdEncoding.DecodeString(auth[l+1:])\n            if err == nil {\n                cred := string(b)\n                for i := 0; i < len(cred); i++ {\n                    if cred[i] == ':' {\n                        // Verify credentials\n                        if fn(cred[:i], cred[i+1:]) {\n                            return nil\n                        }\n                    }\n                }\n            }\n        }\n        c.Response().Header().Set(echo.WWWAuthenticate, Basic+\" realm=Restricted\")\n        return echo.NewHTTPError(http.StatusUnauthorized)\n. it's working @vishr, thank you!\n. I will do, thanks for the notes.\n. ",
    "afeschenko": "@vishr Tell me please, when this bug will be fixed?\n. Thanks a lot! It's working.\n. ",
    "se77en": "eg: c.JSON(code, v) but I don't know which code I should choice? 200 or 500?\n. ",
    "steenzout": ":)\n. to use a unix domain socket yes, this won't work in Windows but the API will still work on Windows with all of the other stuff in echo, no?\n. ",
    "utrack": "@vishr: Echo.URI does almost the opposite :) And both of them couldn't be used from middleware.\nHere's example:\n```\nfunc main() {\n  e := echo.New()\n  e.Get(\"/users/:id\", userHandler())\n}\nfunc userHandler() echo.HandlerFunc {\n  return func(c *echo.Context) error {\n    // c.P(0) == id, but how to retrieve string literal \"/users/:id\" from context?\n    // normally should be used in middleware, but for simplicity I putted this in handler\n    return nil\n  }\n}\n```\nI want to retrieve handler's path from context without interpolated path params - which would enable sane logging by handler's path instead of path with parameters.\n. Paging @vishr\n. ",
    "husobee": "this newer version goes faster than the original PR, \nbefore: \nBenchmarkEcho_GithubAll    30000             51171 ns/op               0 B/op          0 allocs/op\nafter:\nBenchmarkEcho_GithubAll    30000             45594 ns/op               0 B/op          0 allocs/op\nBenchmarkGin_GithubAll     30000             44502 ns/op               0 B/op          0 allocs/op\nLooking into the test failures.\n. Will continue to investigate ways to lower this back down.  Have a few more ideas.\n. let me try to replicate.  Those are wildly different that what I am seeing.  Will use your benchmark repo to try to duplicate @axdg\n. I think some of my changes might have affected what you were seeing, maybe.  I have altered my fork to be more clear, (and correct, were some issues with the route tree I introduced)  Here is what I am seeing now on my machine:\nMaster labstack/echo:\nBenchmarkEcho_GithubAll    30000             40348 ns/op               0 B/op          0 allocs/op\nGin:\nBenchmarkGin_GithubAll     50000             39550 ns/op               0 B/op          0 allocs/op\nhusobee/echo:\nBenchmarkEcho_GithubAll    30000             48702 ns/op               0 B/op          0 allocs/op\nLet me know if you are still seeing differences.  I would like to continue trying to optimize, I have one idea for creation of a full radix tree (like how it is being done in this fork), then making the individual method based trees, pulling the handler struct i introduced in router.go from the full tree into the individual trees.  I feel like that extra overhead on creation of the method based trees would be worth it.  Seems to me if we went that direction, it would be very clearly keep the same physical properties labstack/echo currently has, but allow us to validate the HTTP method is valid, and insert other logic for performing OPTIONS on routes for CORS.  Will be in touch.\n. Sure, we could, lots of times I find myself proxy-ing from another web server (nginx, apache), or a load balancer, and sometimes using headers can be helpful in those cases.  Otherwise it will look like the request is coming from the proxy host or load balancer instead of who it is really coming from. \n. Sure, no problem.  Seems like we are in consensus about using net.SplitHostPort, didn't use it originally because I thought it was overkill, but I understand why you want to use it.  Are we in consensus about removing the checking of common headers used in proxy passing situations?  I will update this branch with these changes.\n. will do, thanks vishr.\n. ",
    "rvdwijngaard": "yep, the fix is ok; thanks for the quick response. \n. ",
    "Retired": "@fundon I appreciate the suggestion, however, I have already tried that and the problem persists.\n. @vishr That appears to be a commit from 6 days ago and since I have just started with Echo (did a go get for it yesterday), the code I'm using should include that revision.\nDo you mean that I should try using exactly that revision (without any newer commits)? If so, I'm not entirely sure how to do a go get for the repository at a particular commit. Can I just go into the appropriate folder in my /src folder and do a git checkout on the commit you had mentioned? If you can post some instructions, I can definitely give it a try.\nBy the way, I just wanted to say thanks for the fantastic support. :smiley: I think your dedication really makes this a great package!\n. Doh, I was still using revision def4886 instead of the latest one. Upon updating, this scenario doesn't appear to be an issue anymore.\n. ",
    "mickgardner": "Just writing to note that I have run into this same issue also. Hoping there's a fix :-)\n. ",
    "craftgear": "Same here.\nLooks like defining two or more paths starting with the same character is problematic.\nAssuming abc.html in /\ngo\ne.Get(\"/aa\")\ne.Get(\"/ab\")\ne.Static(\"/\", \"./\")\ne.Run(\":12345\")\nThen hitting localhost:12345/abc.html returns 404.\nBut once you change the second path to \"/bb\" it returns abc.html.\nHere's my repository to recreate this problem.\nhttps://github.com/craftgear/echo_routing_bug\n. OK, I found this is caused by absence of trailing slashes on each path.\nSo when I make a change to:\ngo\ne.Get(\"/aa/\")\ne.Get(\"/ab/\")\nThe problem is gone.\nThis is off topic, but could someone explain why this subtle change makes a fix?\nI used godebug to intropect route.go source code but I can't understand well.\n. Thanks @vishr! I confirm it's fixed :smile: \n. ",
    "jeromenerf": "It seems that from this commit on, my application enters an infinite loop after a successful initial request. \ngoroutine 58 [running]:\ngithub.com/labstack/echo.(*node).findChildByKind(0xc82015a2a0, 0xc8202b0001, 0x0)\n    /home/jerome/go/src/github.com/labstack/echo/router.go:221 +0x34 fp=0xc8201a1a00 sp=0xc8201a19f8\ngithub.com/labstack/echo.(*Router).Find(0xc820013920, 0xc820297360, 0x3, 0xc820297364, 0xc, 0xc820200c80, 0xac3310, 0xc820089220)\n    /home/jerome/go/src/github.com/labstack/echo/router.go:359 +0x3a8 fp=0xc8201a1a98 sp=0xc8201a1a00\ngithub.com/labstack/echo.(*Echo).ServeHTTP(0xc820089220, 0x7fdc985eb178, 0xc820207ee0, 0xc8202b21c0)\n    /home/jerome/go/src/github.com/labstack/echo/echo.go:554 +0x10f fp=0xc8201a1b70 sp=0xc8201a1a98\nnet/http.serverHandler.ServeHTTP(0xc82015e580, 0x7fdc985eb178, 0xc820207ee0, 0xc8202b21c0)\n    /opt/go/src/net/http/server.go:2081 +0x19e fp=0xc8201a1bd0 sp=0xc8201a1b70\nnet/http.(*conn).serve(0xc820201080)\n    /opt/go/src/net/http/server.go:1472 +0xf2e fp=0xc8201a1f98 sp=0xc8201a1bd0\nruntime.goexit()\n    /opt/go/src/runtime/asm_amd64.s:1998 +0x1 fp=0xc8201a1fa0 sp=0xc8201a1f98\ncreated by net/http.(*Server).Serve\n    /opt/go/src/net/http/server.go:2137 +0x44e\nMy mininal router is: \ne.Get(\"/\", app.Homepage)\n    e.Static(\"/javascripts/\", \"public/javascripts\")\n    e.Get(\"/sessions\", app.ShowSessions)\nAdding some fmt.Printf(\"%#v %#v\\n\", nn.prefix, cn)  line 385 produce endless \"/\" (*echo.node)(nil)\ncc @vishr \n. @vishr Your code works on my machine with the related commit where mine doesn't. \nMy code works if I check out the commit just before, related to HTTP/2. \nObviously, my setup is a bit more complex, with more routes and middlewares, but I can reproduce the problem with the three routes I pasted before. \nI guess I will have to dig in echo's router to get a better idea... it seems to be stuck on \"/\".\n. @vishr I am working on it, trying to produce a minimal and yet \"working\" piece of code :)\n. @vishr given your code, visit http://localhost:8888/js  (no trailing slash, it was a typo but it triggered the bug).\n. @vishr (I keep a terminal open and added some printf around your patch).\n- when requesting / or sessions, \"home\" or sessions gets written and nothing appears in the logs (in not leaking to match-any) \n- when requesting /sessions/, \"home\" gets written instead of \"sessions\" and a line appears in the logs\n- when requesting /js, the infinite loop gets triggered.\n. @vishr thanks, don't hesitate to ping me if you need.\n. @vishr :ok_hand: All tests pass now, thanks!\n. @vishr echo.SetRenderer seems to be gone from Echo, still mentioned in Context though, is it WIP?\nNB: Echo.Renderer is now public. We just need to fix the Context#Render doc.\n. @sarathsp06 many edge cases, no http/2, proved difficult to maintain a multi-engine framework.\n. @tikiatua Seconded.\n1. A simple and robust framework\n2. A good set of middlewares and extensions\n3. Good docs and recipes\n. Thanks @vishr :ok_hand: \n. ",
    "beikege": "go\nfunc welcome(c *echo.Context) error {\n    return c.Render(http.StatusOK, \"welcome.html\", nil)\n}\nstatus code is always 200 and not 500\n. Thank you, forgive me for my bad English.\n``` go\n//simulation render errors\nfunc (t *Template) Render(w io.Writer, name string, data interface{}) error {\n    return fmt.Errorf(\"render errors\")\n}\n//status code is always 200 and not 500\nfunc welcome(c *echo.Context) error {\n    return c.Render(http.StatusOK, \"welcome.html\", nil)\n}\n. Thank you for your patience.\n. thank you \n. go\npackage main\nimport (\n    \"fmt\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/engine/standard\"\n\n)\nfunc cookieTest(c echo.Context) error {\n    name := c.Cookie(\"name\")\n    fmt.Println(name.Value())\n    return nil\n}\nfunc main() {\n    server := echo.New()\n    server.GET(\"/\", cookieTest)\n    server.Run(standard.New(\":80\"))\n}\n```\n2016/05/03 13:18:52 http: panic serving 127.0.0.1:1069: runtime error: invalid memory address or nil pointer dereference\ngoroutine 18 [running]:\nnet/http.(*conn).serve.func1(0xc0820dea00)\n    c:/go/src/net/http/server.go:1389 +0xc8\npanic(0x78c780, 0xc082006090)\n    c:/go/src/runtime/panic.go:443 +0x4f7\ngithub.com/labstack/echo/engine/standard.(*Cookie).Value(0xc082026080, 0x802600, 0x4)\n    E:/golang/get/src/github.com/labstack/echo/engine/standard/cookie.go:22 +0x23\nmain.cookieTest(0x11202a8, 0xc082052750, 0x0, 0x0)\n    E:/golang/my/src/cookie/main.go:12 +0x85\ngithub.com/labstack/echo.(*Echo).add.func1(0x11202a8, 0xc082052750, 0x0, 0x0)\n    E:/golang/get/src/github.com/labstack/echo/echo.go:457 +0xb0\ngithub.com/labstack/echo.(*Echo).ServeHTTP.func1(0x11202a8, 0xc082052750, 0x0, 0x0)\n    E:/golang/get/src/github.com/labstack/echo/echo.go:534 +0x217\ngithub.com/labstack/echo.(*Echo).ServeHTTP(0xc082034820, 0x1120180, 0xc082050ff0, 0x1120240, 0xc082008820)\n    E:/golang/get/src/github.com/labstack/echo/echo.go:543 +0x260\ngithub.com/labstack/echo/engine/standard.(*Server).ServeHTTP(0xc082088280, 0x1120058, 0xc082039790, 0xc08210a380)\n    E:/golang/get/src/github.com/labstack/echo/engine/standard/server.go:137 +0x683\nnet/http.serverHandler.ServeHTTP(0xc082088180, 0x1120058, 0xc082039790, 0xc08210a380)\n    c:/go/src/net/http/server.go:2081 +0x1a5\nnet/http.(*conn).serve(0xc0820dea00)\n    c:/go/src/net/http/server.go:1472 +0xf35\ncreated by net/http.(*Server).Serve\n    c:/go/src/net/http/server.go:2137 +0x455\n. return error\n. do not use a proxy\n. should I use nginx proxy,thanks for reminding me.\n. ``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/engine/standard\"\n    \"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.CSRFWithConfig(middleware.CSRFConfig{\n        Secret:        []byte(\"csrf\"),\n        CookieExpires: time.Now().Add(10 * time.Minute),\n    }))\n    e.Run(standard.New(\":80\"))\n}\n```\nthis is also fixed, what skills?\n. CookieExpires time.Time  --> CookieExpires time.Duration\n. refresh the page\nSet-Cookie:csrf=1bff06abdad57da9104186665e5b406d5f248247%3Affa1aefa08df83b2; expires=Tue, 28 Jun 2016 23:54:10 GMT; path=/\nSet-Cookie:csrf=118dc21d2da32f199ddb3a7ed7d67dc26eb273c9%3A8f410d334648151b; expires=Tue, 28 Jun 2016 23:54:10 GMT; path=/\nSet-Cookie:csrf=2018d23fa59f10b5cc5dca1d9eaf4188185461eb%3Aa764a8dc401fcf29; expires=Tue, 28 Jun 2016 23:54:10 GMT; path=/\nTue, 28 Jun 2016 23:54:10 GMT\nTime will never change\n. Thanks, it worked. \n. remove app.Group(\"/test\")\noutput:/test*\n. \u4e00\u65e6\u8def\u7531\u5b8c\u5168\u5339\u914d\uff0c\u7ec4\u7ea7\u4e2d\u95f4\u4ef6\u5c06\u88ab\u6267\u884c\u3002\n\u4e3a\u4ec0\u4e48\u8981\u5339\u914d\u4e00\u4e2a\u524d\u7f00\u6765\u6267\u884c\u7ec4\u7ea7\u4e2d\u95f4\u4ef6\uff1f\nGoogle translation:\nOnce the route is fully matched, the group level middleware will be execute.\nWhy do match a prefix to execute group level middleware?\n. ",
    "AlekSi": "How about using tabwriter instead of fixed widths?\n. > log.Printf(\u2026) can not be redirected to a file.\n\nThis is not possible: $ echo-server > /var/log/echo/access.log\n\nYou can $ echo-server 2> /var/log/echo/access.log\nPersonally I'm not a fan of logging to stdout \u2013 stderr is for logs, stdout for \"normal\" output (and daemon shouldn't have any).\n. @vishr poke\n. > In what case I would call WriteHeader() after Write?\nFrom middleware or error handler.\nConsider this example: https://gist.github.com/AlekSi/5562d7eb06f4970161d1. Without my patch, error will be send mixed with data with HTTP code 200. With my patch error will be logged, but not send.\n. @vishr poke\n. @vishr May you please merge it to v1? We hit this issue quite often.\n. Thanks. But you decided not to me merge unit test?\n. I would like to have Context interface too.\n. In addition to interfaces for request/response I would like to have:\n- Ability to change logger (#304).\n- Better middleware compile-time checks (right now Middleware is interface{}).\n- Validators (#298).\nAlso, better names for some methods. For example, Context has methods Get, P, Param. It's confusing.\n. We use Echo in the parts of backend infrastructure of MegaFon TV, one of the biggest video services in Russia. \n. It's not a \ud83d\udcb0 but: we at @GolangShow podcast love echo so will mention your support program.\n. @vishr Something for 2.0?\n. Travis build should be restarted, coveralls hickup.\n. Personally, I think that changing log level in SetDebug at all is a bad idea. But we can't change it now \u2013 it would be a break of behavior. So I documented it and fixed what I think is clearly bug.\n. We do use vendoring tool, so we don't go get dependencies every build. The problem is updating from some v2 revision to newer. gopkg.in makes it easy (gopkg.in/echo.v2 resolves to v2.2.0 tag), github.com makes it hard (v3 is pulled, and everything is broken). The same problem will manifest itself when you start working on v4.\nWhy you don't want to use gopkg.in?\n. ",
    "mandeepbrar": "I am trying to setup a server where only a few APIs ( the ones used for auth) are enabled for CORS. The APIs are being consumed from angular client. \nIf i setup the server like: \n```\nrouter := echo.New()\nrouter.Use(mw.Logger())\ncorsMw := cors.New(cors.Options{\n            AllowedOrigins:   allowedOrigins,\n            AllowedHeaders:   []string{\"*\"},\n            ExposedHeaders:   []string{\"X-token\"},\n            AllowCredentials: true,\n}).Handler\n//used on the main router\n\nrouter.Use(corsMw) \nrga := router.Group(\"/auth\")\nrgo := router.Group(\"/others\")\n```\nIt works fine. However then the CORS mw will be used for both /auth and /others. \nIf i try to setup the server like \nrouter := echo.New()\nrouter.Use(mw.Logger())\nrga := router.Group(\"/auth\")\nrgo := router.Group(\"/others\")\ncorsMw := cors.New(cors.Options{\n            AllowedOrigins:   allowedOrigins,\n            AllowedHeaders:   []string{\"*\"},\n            ExposedHeaders:   []string{\"X-token\"},\n            AllowCredentials: true,\n}).Handler\n    //used on a group\nrga.Use(corsMw)\nIt does not work. The call never reaches CORS middleware. A 404 is returned (I think it said OPTIONS  /auth/authenticate is not a valid path)\n. Did some more testing. Turns out that the difference is in how it processes an OPTIONS request. Use the same program as above and execute \ncurl -X OPTIONS http://localhost:1323/auth\nIt says Not found\nChange the above program from \nrga.Use(corsMw)\nto \nrouter.Use(corsMw)\nThe same curl command will work.\n. The same case is still not working. \nJust the error got changed. Instead of \"Not found\",  its saying 405 \"Method Not allowed\" in case of rga.Use(corsMw). \nSame thing works when using router.Use(corsMw)\n. The behavior just reversed. Not working for router.Use(corsMw) -- (Method not allowed). Working for rga.Use(corsMw)\n. Sorry for the delay. This is still not working. In the program that you had used. Just changed \n//rga.Use(cors.Default().Handler)\nrouter.Use(cors.Default().Handler)\nThis doesnt work for me with the latest build from github.  Used \ncurl -X OPTIONS http://localhost:1323/auth\n. Yes it does. My mistake and Thank you. This is fixed.\n. How can i use a middleware to proxy the Options method. I tried it as follows. The method for Options is never called if i use it on the intended echo router. It only works if i use it on a higher level router i.e. i do a router.Use for the Options middleware below. What is the way to write an Options method for all the paths under rga router below.\n```\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/engine/standard\"\n    mw \"github.com/labstack/echo/middleware\"\n    \"github.com/rs/cors\"\n)\nfunc main() {\n    router := echo.New()\n    router.Use(mw.Logger())\n//  router.Use(cors.Default().Handler)\nrga := router.Group(\"/a\")\nrgo := router.Group(\"\")\n\nrga.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n    return func(c echo.Context) (err error) {\n        if c.Request().Method() == \"Options\" {\n            c.NoContent(200)\n            return\n        }\n        return next(c)\n    }\n})\n\nrga.Use(standard.WrapMiddleware(cors.New(cors.Options{\n    AllowedOrigins: []string{\"http://localhost\"},\n}).Handler))\n\nrga.Get(\"/a\", func(c echo.Context) error {\n    return c.String(200, \"with cors\")\n})\n\nrgo.Get(\"/b\", func(c echo.Context) error {\n    return c.String(200, \"without cors\")\n})\n\nrouter.Run(standard.New(\":1323\"))\n\n}\n```\n. Works. Thanks.\n. Looks like i had an older version of \"github.com/mattn/go-isatty\". Removing it and getting it back from git helped.\n. ",
    "transtone": "\nsorry, a cors option problem. It's down.\n. ",
    "arch-mage": "Is this fixed? I got same problem with echo 3.0.3. ",
    "Nagasir": "I'm having this problem too when sending Authorization header with \"POST\", the request method  automatically changes to OPTIONS. I have added echo.OPTIONS  inside AllowMethods parameters but it still gives me 405 response code, Method Not Allowed.\n   e := echo.New()\n   r := e.Group(\"/restricted\")\n   r.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n        AllowOrigins: []string{\"http://localhost:8080\"},\n        AllowMethods: []string{ echo.GET, echo.PUT, echo.POST, echo.DELETE, echo.OPTIONS},\n        AllowHeaders: []string{ echo.HeaderAuthorization, echo.HeaderContentType},\n    }))\nBut when I remove the router Group, the CORS works.\n. ",
    "nkev": "If you need me to test anything on Windows and/or Mac, I can help.\n. Sorry @mertenvg , it's not the second example, it's the first Facebook Grace example that doesn't work: \n``` GO\npackage main\nimport (\n    \"net/http\"\n\"github.com/facebookgo/grace/gracehttp\"\n\"github.com/labstack/echo\"\n\n)\nfunc main() {\n    // Setup\n    e := echo.New()\n    e.Get(\"/\", func(c *echo.Context) error {\n        return c.String(http.StatusOK, \"Six sick bricks tick\")\n    })\ngracehttp.Serve(e.Server(\":1323\"))\n\n}\n```\nI need to specifically use the Facebook one because it offers graceful restart as well as graceful shutdown.\nAlso, I just realised that Facebook Grace doesn't work on PC by nature so I can only help with testing on Mac.\n. @mertenvg This might help you find the bug. Doing it like this works fine:\n``` go\npackage main\nimport (\n    \"flag\"\n    \"net/http\"\n    \"time\"\n\"github.com/facebookgo/grace/gracehttp\"\n\"github.com/labstack/echo\"\nmw \"github.com/labstack/echo/middleware\"\n\n)\nvar (\n    addr = flag.String(\"addr\", \":1323\", \"Address to bind to.\")\n)\nfunc main() {\n    // Setup\n    e := echo.New()\n    e.Use(mw.Logger())\n    e.Use(mw.Recover())\ne.Get(\"/\", func(c *echo.Context) error {\n    return c.JSON(http.StatusOK, \"Six sick bricks tick\")\n})\n//e.Run(\":1323\")\n\n//gracehttp.Serve(e.Server(\":1323\"))\nflag.Parse()\ngracehttp.Serve(\n    &http.Server{Addr: *addr, Handler: e},\n)\n\n}\n```\n. ",
    "wangyun": "svr := e.Server(\":50080\")\nsvr.TLSConfig = nil\ngracehttp.Serve(svr)\ntemp hack ...\n. https://github.com/bradfitz/http2/blob/f8202bc903bda493ebba4aa54922d78430c2c42f/server.go#L141\n. I passed in a custom server, not e.Server.\n```go\npackage main\nimport (\n        \"context\"\n        \"fmt\"\n        \"net/http\"\n    \"github.com/labstack/echo\"\n\n)\nfunc main() {\n        e := echo.New()\n        done := make(chan bool)\n    go func() {\n            s := &http.Server{\n                    Addr: \":3000\",\n            }\n            fmt.Println(\"Server exit:\", e.StartServer(s))\n            done <- true\n    }()\n\n    fmt.Println(\"Shutdown\", e.Shutdown(context.Background()))\n    <-done\n\n}\n```. ",
    "noonien": "Any updates on this?\n. Take a look at the Text and spaces section in text/template which html/template uses.\n. ",
    "Puffton": "This would be very nice from another perspective as well. I'm using authentication with different roles. I have solved it by passing a list of the roles with the right to access a specific endpoint\ngo\nrights := make(map[string][]Role)\nrights[\"/api/r/users/some_endpoint\"] = []Role{Admin, User}\n... into the Auth-method (JWT):\ngo\nr.Use(uc.Auth(string(PublicKey[:]), rights))\nRight now I'm forced to loop this list, comparing it to the prefix of c.Request().URL.Path:\ngo\nfor rpath, roles := range rights {\n  if (strings.HasPrefix(path, rpath)) {\n    for _, v := range roles {\n      if v == r {\n        return true\n      }\n    }\n  }\n}\nWith this feature, I would be able to use the map indices instead. Prettier map (matching routing), no code for looping (better performance / easier to maintain).\n. Thanks! This can be a good example to add to the subdomain recipe!\nAnother improvement could be showing how to use JWT Claims (I noted that one person has asked on the site about it already, and I'm also wondering).\nCurrently I have a handler like this, but \"role\" keeps being nil:\ngo\nfunc (a MyController) MyHandler(c *echo.Context) error {\n  log.Print(c.Get(\"role\"))\n  return nil\n}\nPerhaps it's just me that's tired. I'm now getting the proper value:\ngo\nfunc (a MyController) MyHandler(c *echo.Context) error {\n  log.Print(c.Get(\"claims\"))\n  return nil\n}\n. Also in the future, a recipe of how to get echo working with moz-ssl (https://letsencrypt.org/) would be very cool!\n. Closing for tracking in #269.\n. Oh damn, how could I miss that... This framework is pretty damn neat!\n. ``` go\n  hosts := make(Hosts)\n  e := echo.New()\n  e.Use(mw.Recover())\n  e.Use(mw.Gzip())\n  e.SetDebug(true)\n  hosts[\"localhost\"] = e\ne.Get(\"/test/:id\", func (c *echo.Context) error {\n    log.Print(c.Path())\n    return nil\n  })\nhttp.ListenAndServe(\":80\", hosts)\n```\n. My misc suggestions in #245.\n. I understand if it's not top priority, but:\n- Estimated release date for v2.\n- An upgrade guide from v1.x to v2.\n. I have very few bugs/recovers happening in my framework now, so I can't say for sure if this bug persists or not.. Got it to load on port 8080 using standard http, but not on port 80 (no errors). It doesn't work at all on fasthttp.\n. Chrome is somehow competing for port 80 with me. If I switch to another browser I can use it.\nIn Firefox I'm getting: The page you are trying to view cannot be shown because it uses an invalid or unsupported form of compression.\nSo yes, it seems to be an issue with the compression.\n. My contribution (keep in mind this is on Go 1.5, latest version of echo):\ngo\n  server := echo.New()\n  server.Use(mw.Logger())\n  server.SetDebug(true)\n  server.Use(mw.Recover())\n  server.Use(mw.Gzip())\n  server.Static(\"/\", \"../static\")\n  server.Run(fasthttp.New(\":80\"))\nEDIT: Upgraded to Go 1.6, same issue there...\n. This fix worked for me.\n. No longer important to me.. After upgrading my issue is the opposite; has decoding been disabled? Possibly related to https://github.com/labstack/echo/issues/587.\nAs a workaround I have done the following:\ngo\nurl.QueryUnescape(c.Param(\"...\"))\nNo biggie, just verifying that this is intended?\n. Ah, I was too quick to post.\nThe problem is I'm doing \"go get ...\" on echo on my dev machine (go 1.7), then uploading to the server (go 1.6.2) without the deps necessary. Fixed by forcing it to download \"golang.org/x/net/context\".\n. The bug has been found in my framework and was unrelated to Echo, this issue can be closed.. Cool, thanks. But isn't \"Start\"/\"StartAutoTLS\" blocking calls? How do I start two servers at once?\n. Yeah, just figured if there was something built-in, was a bit lazy not to check the source, sorry.\n``` go\n  // Redirect www and non-www to https/non-www\n  go func() {\n    if err := www.Start(\":80\"); err != nil {\n      www.Logger.Fatal(err)\n    }\n  }()\n// Redirect www to non-www or serve non-www (actual site at subdomain.domain.com)\n  if err := server.StartAutoTLS(\":443\", []string{\"subdomain.domain.com\"}, \"le.cache\"); err != nil {\n    server.Logger.Fatal(err)\n  }\n```\nIn Chrome I'm getting the following, after a redirect to https://subdomain.domain.com/: \nsubdomain.domain.com sent an invalid response.\nERR_SSL_PROTOCOL_ERROR\nle.cache:\n{\n    \"Email\": \"\",\n    \"Reg\": {\n        \"body\": {\n            \"resource\": \"reg\",\n            \"id\": *HIDDEN*,\n            \"key\": {\n                \"kty\": \"EC\",\n                \"crv\": \"P-384\",\n                \"x\": \"*HIDDEN*\",\n                \"y\": \"*HIDDEN*\"\n            },\n            \"contact\": [],\n            \"agreement\": \"https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf\"\n        },\n        \"uri\": \"https://acme-v01.api.letsencrypt.org/acme/reg/*HIDDEN*\",\n        \"new_authzr_uri\": \"https://acme-v01.api.letsencrypt.org/acme/new-authz\",\n        \"terms_of_service\": \"https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf\"\n    },\n    \"Key\": \"-----BEGIN EC PRIVATE KEY-----*HIDDEN*-----END EC PRIVATE KEY-----\\n\",\n    \"Hosts\": [\n        \"subdomain.domain.com\"\n    ],\n    \"Certs\": null\n}\n. Sorry, here:\ngo\n  www.Any(\"/*\", func(c echo.Context) error {\n    return c.Redirect(http.StatusMovedPermanently, \"https://subdomain.domain.com/\")\n  })\n. This felt more lightweight, am I doing it wrong?\n. Removed \"www\", hosts contains the same handler for \"www.subdomain.domain.com\", \"subdomain.domain.com\" and \"localhost\". Same issue still (on the server with DNS subdomain.domain.com, although top domain/domain.com is on another server):\n``` go\n  server := echo.New()\n  server.Pre(mw.HTTPSNonWWWRedirect())\n  server.Use(mw.Recover())\n  server.Any(\"/*\", func(c echo.Context) (err error) {\n    req := c.Request()\n    res := c.Response()\n    host := hosts[req.Host]\n    if host == nil {\n      err = echo.ErrNotFound\n    } else {\n      host.Echo.ServeHTTP(res, req)\n    }\n    return\n  })\ngo func() {\n    if err := server.Start(\":80\"); err != nil {\n      server.Logger.Fatal(err)\n    }\n  }()\nif err := server.StartAutoTLS(\":443\", []string{\"subdomain.domain.com\"}, \"le.cache\"); err != nil {\n    server.Logger.Fatal(err)\n  }\n. No, this is in production (on the server with DNS subdomain.domain.com). Not bothering with https on my local dev machine.. This is what I get:\n2016/11/22 05:48:05 [INFO] acme: Registering account for \n2016/11/22 05:48:06 [INFO][subdomain.domain.com] acme: Obtaining bundled SAN certificate\n2016/11/22 05:48:06 [INFO][subdomain.domain.com] acme: Could not find solver for: dns-01\n2016/11/22 05:48:06 [INFO][subdomain.domain.com] acme: Trying to solve TLS-SNI-01\n2016/11/22 05:48:17 http: TLS handshake error from aaa.bbb.ccc.dd:54947: map[subdomain.domain.com:acme: Error 400 - urn:acme:error:connection - Failed to connect to xxx.yyy.zzz.aa:443 for TLS-SNI-01 challenge\nError Detail:\n    Validation for subdomain.domain.com:443\n    Resolved to:\n        xxx.yyy.zzz.aa\n    Used: xxx.yyy.zzz.aa\n. I could as well show:\nError Detail:\n        Validation for HIDDEN AGAIN:443\n        Resolved to:\n                HIDDEN AGAIN\n        Used: HIDDEN AGAIN\n```. Will try it later, now people are starting to wake up. I tried your minimal working example but I get the same issues.\nUPDATE: Ah, I know of a possible issue. A while back I limited access to the machine to Europe because of unwelcome guests, and it seems Let's encrypt requires access from anywhere to get the cert:\n\n\u2022 For TLS-SNI-01 (for example via certbot's standalone or apache plugin - this is probably what you used, if I'm interpreting \"automated install\" correctly): Allow incoming traffic on port 443 (HTTPS) from anywhere.\nhttps://community.letsencrypt.org/t/lets-encrypt-and-firewall-rules/18641/2. All files necessary are included in the zip-file: test.zip\n\n```go\n  ee := echo.New()\n  ee.Use(mw.Gzip())\n  ee.Static(\"/\", \"/test\")\nif err := ee.Start(\":80\"); err != nil {\n    ee.Logger.Fatal(err)\n  }\n```. WOFF2 is using a certain type of compression algorithm which I don't think for example WOFF is using (it's also compressed, but with another algo)... not sure it has anything to do with it though. It could explain why some large files work, while others don't, I meant.. Looks like it worked, thanks!. This issue is back again, I'm not getting any error messages from the server when e.Debug = true.\nAnother, related bug. If I set \"e.Debug = true\" and then use subdomains, and also set \"server.Debug = true\", I'm getting HTTP ERROR NO RESPONSE rather than even the generic \"Internal server error\". Example:\ngo\n// ...\ne.Debug = true\n// ...\n  server := echo.New()\n  server.Debug = true\n  server.Use(mw.Recover())\n  server.Use(mw.Gzip())\n  server.Any(\"/*\", func(c echo.Context) (err error) {\n    req := c.Request()\n    res := c.Response()\n    host := hosts[req.Host]\n    if host == nil {\n      err = echo.ErrNotFound\n    } else {\n      host.Echo.ServeHTTP(res, req)\n    }\n    return\n  })\nEDIT: This is the response I get with debugging enabled:\n{\"message\":\"Internal Server Error\"}\nThis is not in line with the documentation (https://echo.labstack.com/guide/error-handling):\nFor a standard error, response is sent as 500 - Internal Server Error; however, \nif you are running in a debug mode, the original error message is sent.\nIt works if I use echo.NewHTTPError, but this is not something I'm employing in my API:s.. Works, thanks!. Remember to not only open up the port within the machine, but also within the firewall, if there is one (and if you use IP whitelisting from certain countries).. Ah, stupid me, this page pretty much answers it: https://echo.labstack.com/cookbook/graceful-shutdown.. Actually still relevant with regards to \"SO_REUSEADDR\"/\"SO_REUSEPORT\", even with graceful shutdown the port/socket is not freed up straight away so my release script fails.\nEDIT: Seems to be added to the language itself in Go 1.11: https://github.com/golang/go/issues/9661.. ",
    "gouthamve": "Yep! Works, thanks!\n. Sorry, had another look at the docs, realized, that I needed to do, e.Router() to get the router. I got it working. Thanks\n. ",
    "iktakahiro": "+1\n. @CaptainCodeman Thank you for your comment.\nIt seems the same issue as https://github.com/labstack/echo/issues/228 \nI tried using your code, but cors did not work. \nresponse:\nContent-Encoding \u2192gzip\nContent-Length \u2192 126\nContent-Type \u2192 application/json; charset=utf-8\nDate \u2192 Mon, 07 Dec 2015 03:33:49 GMT\nVary \u2192 Origin, Accept-Encoding\nPostman I'm using requests to localhost:8080. I will look into that a little.\n. +1\n. ",
    "mttrs": "What if just using the JSONPrettyPrint method? I don't understand well why JSON method needs to wrap JSONPrettyPrint. And inside, there is a if condition...\n. ",
    "mtojek": "Using JSONPrettyPrint method and removing JSON will break up current API and that's why I don't want to follow that directions. Extending JSON with \"prettifying\" parameter will also break API.\nWrapping JSONPrettyPrint with JSON was left only to stay backward compatible with JSON method declaration and does not duplicate code...\n. I originated from the \"pretty print\" from go-restful project ;)\n. @vishr Please respond to the topic a make a decision :)\n. Yes, xml codec works in similar way and the indentation can be also introduced.\n\nMore importantly, do we really need to put these into the API - just asking?\nIndeed, current implementation does not allow for indentation formatting, but it is useful especially when results may be read by a human.\n\n@vishr if you have any other propositions, please share them with us.\n. @vishr I applied appropriate changes in the source code, so please review. If everything is fine, please merge it with the master branch.\n. @vishr will you have some time to check this issue?\n. @vishr It is not a valid parameter value. We expect in our API the last parameter value to be \"foo\" but it can be provided as a \"foo/bar\". The \"foo\" value is matched with the last placeholder, but the router panics when trying to match \"bar\" part with not existing placeholder (out of range).\n. @vishr I am afraid I can't do that. Frankly speaking it's rather a routing responsibility.\n. @vishr I will be glad if you merge given solution or propose a better one. Panicing begins to be a bit annoying ;]\n. In fix? It is not being matched with any pattern. It tries to match single parameter \"2\" instead of \"2/3\". I think you should browse the pull request code changes...\n. Yes, it helped. Thanks for repairing.\n. I got similar results:\n2016/03/15 20:04:14 internal 127.0.0.1 GET /favicon.ico 200 412.378\u00b5s 0\n2016/03/15 20:04:15 internal 127.0.0.1 GET /favicon.ico 200 423.288\u00b5s 0\n2016/03/15 20:04:15 internal 127.0.0.1 GET /favicon.ico 200 522.996\u00b5s 0\n2016/03/15 20:04:15 internal 127.0.0.1 GET /favicon.ico 200 470.668\u00b5s 0\n2016/03/15 20:04:15 internal 127.0.0.1 GET /favicon.ico 200 3.476323ms 0\n2016/03/15 20:04:20 internal 127.0.0.1 GET /favicon.ico 200 771.303\u00b5s 0\nI use standard HTTP provider (standard.New) with enabled Gzip and Recover middleware. Missing response issues occur when requests carry information about HTTP gzip encoding, thus forces gzip encoded responses.\nDisabled gzip middleware fixes the problem, but of course it is not a solution.\nEDIT:\nGoogle Chrome returns an ERR_CONTENT_DECODING_FAILED error.\n. Yes @vishr, I can do it right now:\nCode sample:\n`package main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/engine/standard\"\n    \"github.com/labstack/echo/middleware\"\n    \"net/http\"\n)\ntype fooHandler struct {}\nfunc (f fooHandler) ServeHTTP(w http.ResponseWriter, r http.Request) {\n    w.Write([]byte(\"Hello world\"))\n}\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.Logger())\n    e.Use(middleware.Recover())\n    e.Use(middleware.Gzip())\n    e.Use(middleware.Static(\"public\"))\n    e.Get(\"/users\", standard.WrapHandler(new(fooHandler)))\n    e.Run(standard.New(\":1323\"))\n}\n`\nVersion/commit: latest.\n. @vishr \nA quick fix may look like the sample below:\nhttps://github.com/mtojek/echo/commit/0a20de920313f5bba194cf7c8cdaa03b8eaf5f0b\n. Ok @vishr , I've updated the source code up to your recommendations.\n. No. I need to set the server name at the instance creation time. Fasthttp implementation provides a configuration which allows setting default server name.\n. Which API? Fasthttp?\n`\n// Server implements HTTP server.\n//\n// Default Server settings should satisfy the majority of Server users.\n// Adjust Server settings only if you really understand the consequences.\n//\n// It is forbidden copying Server instances. Create new Server instances\n// instead.\n//\n    // It is safe to call Server methods from concurrently running goroutines.\n    type Server struct {\n    noCopy noCopy\n```\n// Handler for processing incoming requests.\nHandler RequestHandler\n// Server name for sending in response headers.\n//\n// Default server name is used if left blank.\nName string\n```\n}\n`\nWhat I expect from the labstack/echo API, are the properties of the Server above, e.g. Name is the defaultServerName. \n. Personally I would rely on c.Response().Header() interface and extend it with own cookie wrapper basing only on simple HTTP headers.\n. @vishr I've fetched your code changes and there is a problem with serving content via fasthttp - it's missing.\n```\n$ curl -v 'http://localhost:8000/favicon.ico' -H 'Pragma: no-cache' -H 'Accept-Encoding: gzip, deflate, sdch' -H 'Accept-Language: pl,en;q=0.8,en-US;q=0.6' -H 'Upgrade-Insecure-Requests: 1' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.87 Safari/537.36' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8' -H 'Cache-Control: no-cache' -H 'Connection: keep-alive' --compressed\n Adding handle: conn: 0x7f9d5a804000\n Adding handle: send: 0\n Adding handle: recv: 0\n Curl_addHandleToPipeline: length: 1\n - Conn 0 (0x7f9d5a804000) send_pipe: 1, recv_pipe: 0\n About to connect() to localhost port 8000 (#0)\n   Trying ::1...\n   Trying fe80::1...\n   Trying 127.0.0.1...\n Connected to localhost (127.0.0.1) port 8000 (#0)\n\nGET /favicon.ico HTTP/1.1\nHost: localhost:8000\nPragma: no-cache\nAccept-Encoding: gzip, deflate, sdch\nAccept-Language: pl,en;q=0.8,en-US;q=0.6\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.87 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8\nCache-Control: no-cache\nConnection: keep-alive\n< HTTP/1.1 200 OK\n Server servername is not blacklisted\n< Server: servername\n< Date: Mon, 28 Mar 2016 07:33:41 GMT\n< Content-Type: image/x-icon\n< Content-Length: 23\n< Content-Encoding: gzip\n< Accept-Ranges: bytes\n< Last-Modified: Wed, 11 Nov 2015 22:24:49 GMT\n< \n Connection #0 to host localhost left intact\n```\n\nBesides, logged HTTP statuses and logged file sizes are fine. \nEDIT: \nthe problem concerns only gzipped responses. I will recheck my source code if there are not other bugs.\n. Try to download via web browser (accept-encoding: gzip) the /main.go resource:\n```\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/middleware\"\n    \"github.com/mtojek/echo/engine/fasthttp\"\n    valyalafasthttp \"github.com/valyala/fasthttp\"\n    \"time\"\n)\nfunc main() {\n    // Echo instance\n    e := echo.New()\n// Middleware\ne.Use(middleware.Gzip())\ne.Use(middleware.Recover())\n\n// Routes\nfs := &valyalafasthttp.FS{\n    Root:            \".\",\n    Compress:        false,\n    AcceptByteRange: true,\n    CacheDuration:   7 * 24 * time.Hour,\n}\ne.Get(\"/main.go\", fasthttp.WrapHandler(fs.NewRequestHandler()))\n\n// Start server\ne.Run(fasthttp.New(\":1323\"))\n\n}\n```\nDisabled gzipping middleware omits the problem, so the problem lies somewhere near gzipped writers. \nBTW. in my latest pull request the problem did not appear.\n. Nope, just check the sample I posted above.\n. @vishr yup, it is just fasthttp.\n. friendly ping.\n. If it is similar to already implement Context.JSON, then should be fine :)\n. > 9.4 HEAD\n\nThe HEAD method is identical to GET except that the server MUST NOT return a message-body in the response. The metainformation contained in the HTTP headers in response to a HEAD request SHOULD be identical to the information sent in response to a GET request. This method can be used for obtaining metainformation about the entity implied by the request without transferring the entity-body itself. This method is often used for testing hypertext links for validity, accessibility, and recent modification.\n\nSource: https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\nWhat we have here is generally a bug:\n```\n$ curl -v -X HEAD http://localhost:1323\n Adding handle: conn: 0x7fc8a3804000\n Adding handle: send: 0\n Adding handle: recv: 0\n Curl_addHandleToPipeline: length: 1\n - Conn 0 (0x7fc8a3804000) send_pipe: 1, recv_pipe: 0\n About to connect() to localhost port 1323 (#0)\n   Trying 127.0.0.1...\n Connected to localhost (127.0.0.1) port 1323 (#0)\n\nHEAD / HTTP/1.1\nUser-Agent: curl/7.30.0\nHost: localhost:1323\nAccept: /\n< HTTP/1.1 405 Method Not Allowed\n< Content-Type: text/plain; charset=utf-8\n< Date: Sat, 30 Jul 2016 16:22:31 GMT\n< Content-Length: 18\n<\n```\n. /cc @abador\n. \n",
    "hexadecy": "You can use nginx proxy pass:\n```\nserver {\n    listen  80;\n    server_name ~^(?.+).github.io$;\nlocation / {\n    proxy_pass http://github.io:3000/user/$username$request_uri;\n}\n\n}\n```\n. I've started a fork to rewrite rs/cors to support echo v2 engine like fasthttp.\nTodo\n\n[ ] Remove unnecessary codes\n[ ] Rewrite tests\n[ ] Update doc\n. Beenote.io Free beta meeting single page app. Powered by echo v2. \n. I also have a use case for that, it's twice faster than encoding/json:\n\nc.JSONBlob(200, []byte(`{\"timestamp\":\"` + time.Now().UTC().Format(time.RFC3339Nano) + `\"}`))\n. I can write a receipe for Echo v2.\n. Yes, I'm interested, just tell me where and what format you want.\n. https://github.com/labstack/echox/pull/5/commits/aabebf809c299facc1beab749b3206c418466afe\n. I'm trying to stream an ogg audio file. \nPreviously, I was using http.ServeFile and it worked really well.\nPlease add support or if someone have a quick workaround?\n. It works, but it's ugly:\n```\nfunc GetAudio(rw http.ResponseWriter, req *http.Request) {\n   param1 := strings.Split(req.RequestURI, \"/\")[2]\n   http.ServeFile(rw, req, param1)\n}\ne := echo.New()\ne.Group(\"/media\")\nfunc AddMediaRoutes(g *echo.Group) {\n   g.Get(\"/:param1\", standard.WrapHandler(http.HandlerFunc(GetAudio)))\n}\n```\n. Are you using net or gorilla websocket?\nHow many client connected at the same time?\nOS?\nWhat is your CPU usage?\n. Yes it was fixed , but I have a small issue related to it #886.. 404 Not Found for me also, site is down.\n. I used something like this:\nexp := token.Claims.(jwt.MapClaims)[\"exp\"].(float64)\nif int64(exp) > time.Now().Unix() {\n    c.Set(\"claims\", token.Claims)\n    return next(c)\n}\nreturn ErrJSON(419, \"Expired Token\").Send(c).Log(c)\n. https://github.com/jessfraz/binctr/blob/master/vendor/github.com/docker/docker/pkg/term/term_windows.go\nenableVirtualTerminalProcessing = 0x0004\n. As a workaround I mixed a part of v2 static middleware with v3.\n```\n    e.Static(\"/\", \"public\")\n    e.Static(\"/scripts\", \"node_modules\")\nconst staticRoot = \"public\"\ne.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n    return func(c echo.Context) error {\n        fs := http.Dir(staticRoot)\n        p := c.Request().URL.Path\n        if strings.HasSuffix(c.Path(), \"*\") { // When serving from a group, e.g. `/static*`.\n            p = c.Param(\"*\")\n        }\n\n        file := path.Clean(p)\n        f, err := fs.Open(file)\n        if err != nil {\n                            // HTML5 mode\n            err = next(c)\n            if he, ok := err.(*echo.HTTPError); ok {\n                if he.Code == http.StatusNotFound {\n                    return c.File(filepath.Join(staticRoot, \"index.html\"))\n                }\n            } else {\n                return err\n            }\n        }\n        defer f.Close()\n        return next(c)\n    }\n})\n\n. You have to fork and modify around this line:\nhttps://github.com/Code-Hex/echo-static/blob/master/static.go#L56\nif c, ok := err.(*echo.HTTPError); ok {\n    // html5 mode\n    if c.Code == http.StatusNotFound {\n        return b.Open(\"index.html\")\n    }\n} else {\n    return err\n}\n```\n. It's not a real 404 page, it's a http code from the context.. Fixed by https://github.com/labstack/echo/commit/83eadbad188df0d05305fce89bfb855a19ef5f21\nand duplicate of #963. I don't think it's related to echo.... Gogland is a beta ide. ",
    "mathvav": "@axdg don't know if this is new or not, but you can get the host using c.Request().Host. I use this to redirect to www..\nSplit using strings.Split. Thanks!\n. @o1egl how would you do that? It'd work fine if the paths were predictable (all lowercase, ect.), but that's hard to do the HTTP redirection and rerouting (presumably by changing the URL in the context.Request) if you use capitalization anywhere in the URL.\nIt's possible, but it's only a duct tape fix that only works in some cases.\n. @o1egl Again, how do you figure out which URL to redirect to?\n. @vishr what are your thoughts?\n. Blob and String sound good, except that I don't want to create issues with the current String function.\nI guess that we could move the content type to be the third variable and just make it String(int, string, ...string) so that the current c.String(200, \"Hello World\") calls would still function without issues.\nWould you like any help implementing this patch?\n. I agree that it's more hack-ish. However, unless we want to break compatibility, our only options are:\n- A new name (CustomContentBlob/CustomContentString or something else with that name)\n- Var args\n. CustomBlob/CustomString?\n. @vishr there still isn't a way to do a string with a custom content type without manually setting the header, though. Is there any way you can add this?\n. @vishr Fair enough. I was just proposing this since it might be cleaner to use a StringBlob type of function, as opposed to Blob(string()). But, that's personal preference.\n. @bobsquito sorry, nope. I'd suggest an alternate route if you can find one, including a MS Word extension (I believe those are more powerful)\nGood luck!. Ahh, I didn't see tests in the packages other than echo. I ran the main one which passed (along with manually testing each function to double check everything works), but I'll fix this later.\nAlso: I'll add the unit tests in context_test.go\n. @vishr sorry, been busy and it got pushed of my list. It's on there, however.\nAll of the response methods (CustomBlob/etc.) are properly implemented and working.\nHowever, I forgot about the fact that the compression middleware uses the io.Writer code in the engines that I took out so I'll need to work around that to get the compression library up and running again (thank goodness for unit tests).\nI was going to see if there's a way to pass the compression library strings, but it doesn't look like that is possible. Because of this, the fasthttp string optimization trick will be pointless when the user is using compression, unless we look into \"unsafe\" conversion of string to []byte.\nEither way, writing strings for fasthttp with no compression will still reduce GC for the benchmarks and instances where people haven't enabled compression or when bandwith isn't a bottleneck. Thoughts?\nThis is still on my todo list. I hopefully will push this weekend.\n. @vishr Are there any proposals in progress for such a thing? If not, it's not like anything will happen for at least several months.. @apaganobeleno a few issues with that code:\n\nThere is also a HTTPS server that needs to be separately accessed.\nAFAIK, you would need to return a pointer to the function, not the function itself in order to be able to set the function. The better way than returning a pointer, however, would just be an Echo function to set the ShutdownInitiated function directly.. @vishr would a PR be accepted?. This issue may depend somewhat on #797.\n\nRegardless, here's a proposal:\n\nAdd a start function that does NOT use Graceful\nPanic for calls to the shutdown methods (if needed: it might already panic if the pointer is nil\u2014I need to reread the code there)\nFor anyone who wants extra code, they can use the Graceful-free start and wrap it in a Graceful object outside of Echo to do all of the hard lifting\n\n\n\nThat's the reason I don't want to expose third party properties via Echo\n\nIt seems to me that you shouldn't directly expose the Graceful properties, yes. But, I don't see there being harm in duplicating the Graceful API (or important parts of it) so that it can be switched over without changing the external API when we want to drop Go <=1.7 support (in a few years).. I'm going to close this because this has evolved into the same topic as #797. Please continue conversation there (cc @apaganobeleno). So are path params currently escaped? Query string values?\n(I agree that the router should use the raw path.). It looks like you're using a software library to create software for a... library! ba doom crash\n\nIt seems as the routes are the exact same for foobar.v1.example.com and barfoo.v1.example.com. If that's not true, the rest of this comment doesn't apply; let me know and I'll help you work something else out. If that is true, follow along!\nSince the routes are different for each version, I would create an echo engine for each version subdomain. To make sure that each version subdomain goes to the correct place, you will have to directly accept requests from the http library \u2192 use a switch statement with the host (domain name) \u2192 call the ServeHTTP (https://godoc.org/github.com/labstack/echo#Echo.ServeHTTP) function with the request/response variables passed from the http library.\nThis won't be an issue with memory because I assume you only have three or four versions tops (it is more memory intensive than one, but it's totally doable).\nWithin each route, you can find the foobar part of the domain (which I assume is the library branch name, if you are really creating software for libraries) by strings.Spliting the c.Request().Host string into the different segments of the host (to get []{\"foobar\", \"v1\", \"example\", \"com\"}). You can then just grab the first element of the slice to get foobar alone.\n\nLet me know if you need more example code or explanation; I'd love to help.. Also see: https://github.com/labstack/echo/issues/250. Yeah, if you have totally different routes based on each subdomain it's best to use a proxy. If you're not hitting your latency requirements due to having a proxy, it'd be super simple to mod echo (either through middleware or a fork) to trick echo into thinking that the URL is different than it is.\nI wish I could've been of more help to you, but a.) it sounds like you have figured out most of the issues already b.) you seem to be an edge case user, so it's hard to suggest solutions without fully knowing what kind of architecture you need. :)\n. \ud83d\udc4d\ud83c\udffb. umMMMmm letmethink.\nThe core issue here is we are building for two different versions of Go, so without some weird tricks (build tags, global variables, etc.), it's hard to build for both versions.\nI don't particularly think that Go's version of Graceful would be much better than the original Graceful (disclaimer: I haven't yet seen the proposed API for Go's version), and maintaining two libraries seems unnecessarily complex for something as simple as clean shutdown.\nIf you disagree, we can start talking solutions. Unless Go supports conditional builds for version (like it does for OS), there's nothing we can do without making it more complex. It'd likely be in the form of an interface from an external package, similar to fasthttp's implementation in v2.. 1. > It's fairly straightforward to build alternate implementation with build tags referencing go versions. Implement one in a *.go file with:\nThanks! I thought I've seen that around before, but I was looking for documentation and apparently wasn't able to Google properly (ironically about a language made by Google).\n\nI swear starting the server with Echo directly does some extra magic besides Graceful that you would have to do manually. EDIT: read code; I guess not. This is a viable solution.\n\nSo, options:\n\nAdd slight complexity for the sake of a more intuitive workflow. Add a note somewhere in the docs that would be easy to find for the power users who need the parts of Graceful we deem unnecessary.\nLeave API as-is. Add a note somewhere in the docs, at least somewhat prominently placed. Make several examples of how to use Graceful.\n\nI like option one because it isn't forcing anyone to add anything new and it's not restricting anyone; however, it is a lot more clean and intuitive. I do admit that may be biased towards my current usage of echo, so it's not important to me as long as something is added to the docs (because 2 separate issues == probably many more people who have given up). :). I think the biggest thing is that both color and logger can send output to the terminal. If color didn't have the ability to directly output (you only could do logger.Fatal(color.Red(\"not enough caffeine\"))), I feel like it'd be a lot less confusing (leaving the color object there to easily disable).\nScanning through the code, the color package is only used once to actually send the output to the terminal (vs just returning a colored string). But, others may use it more and I don't know if it's worth a breaking (however tiny) API change.\nFor v4, would it be worth it to wrap the color class without the extras to keep the API clean?\n\nMy Setup (just if you're interested)\nI have to admit that I also use my own custom logging framework that deduces the caller function/line to help with debugging (not very resource intensive because I am conservative on what I log). Here's my setup:\n```go\nvar (\n    engine = func() *echo.Echo {\n        a := echo.New()\n        a.Debug = globals.Debugging\n        a.ShutdownTimeout = timeout\n        a.Logger.SetPrefix(\"[ECHO] \")\n    c := color.New()\n    c.Disable()\n    c.SetOutput(ioutil.Discard) // I got annoyed with the \" \u21db http server started on\" messages not lining up with the rest of the output hehe; that message is the only thing piped through color\n    a.Color = c\n\n            // Lots and lots of pretty middleware goes here\n\n    return a\n}()\n\n)\n```\n(If you're wondering why I have this outside of a function: to make it easy to split files, I use as many init() functions as I need. One route = one init() function. Go guarantees that the execution order is var x type declarations outside functions > init() functions > main().)\nThen, I just call my own library.. Any other places in docs/etc. that this would be present?. Although adding tags to the logger would be handy, it could easily become an issue:\n\nFormatting issues, since HTTP bodies take up more than 1 line\nstdout seems to be limited on some systems in terms of speed (compared to writing straight to disk)\n\nAlthough I'm not against adding these tags, I feel like doing this in custom middleware might be more useful to most people.\nShould we add something to the docs for this use case? (Do we have analytics for if people even read the docs?). Maybe it could be named Interceptor?\n\nProposal for implementation:\nThe configuration for the middleware is this a \"handler\" function (such as func(c echo.Context, requestBody, responseBody []byte)). The user could print to stdout, or do a log, or whatever they want inside the handler.. ",
    "fzakaria": "This is a better alternative than https://github.com/echo-contrib/echopprof/blob/master/echopprof.go\n. For those curious on how you might want to rename the handlers.\nHere is a simple alternative\nadmin := e.Group(\"/admin\")\n    admin.Get(\"/pprof/\", http.HandlerFunc(pprof.Index))\n    admin.Get(\"/pprof/heap\", pprof.Handler(\"heap\").ServeHTTP)\n    admin.Get(\"/pprof/goroutine\", pprof.Handler(\"goroutine\").ServeHTTP)\n    admin.Get(\"/pprof/block\", pprof.Handler(\"block\").ServeHTTP)\n    admin.Get(\"/pprof/threadcreate\", pprof.Handler(\"threadcreate\").ServeHTTP)\n    admin.Get(\"/pprof/cmdline\", http.HandlerFunc(pprof.Cmdline))\n    admin.Get(\"/pprof/profile\", http.HandlerFunc(pprof.Profile))\n    admin.Get(\"/pprof/symbol\", http.HandlerFunc(pprof.Symbol))\n    admin.Get(\"/pprof/trace\", http.HandlerFunc(pprof.Trace))\n. ",
    "genez": "The above solutions do not work with recent echo versions. please check following example on how to integrate expvar with echo:\n```\n    dbg := e.Group(\"/debug\")\n// expvar\ndbg.Get(\"/vars\", func(c echo.Context) error {\n    w := c.Response().(*standard.Response).ResponseWriter\n    r := c.Request().(*standard.Request).Request\n    if h, p := http.DefaultServeMux.Handler(r); p != \"\" {\n        h.ServeHTTP(w, r)\n        return nil\n     }\n     return echo.NewHTTPError(http.StatusNotFound)\n})\n\n```\n. please note that the same approach will integrate pprof aswell, without any external dependency.\nthis is IMHO the best approach, if the pprof package changes and adds new handlers you will be able to automatically wire them up to your routes without changing your code\ndbg.Get(\"/pprof/*\", func(c echo.Context) error {\n        w := c.Response().(*standard.Response).ResponseWriter\n        r := c.Request().(*standard.Request).Request\n        if h, p := http.DefaultServeMux.Handler(r); p != \"\" {\n            h.ServeHTTP(w, r)\n            return nil\n        }\n        return echo.NewHTTPError(http.StatusNotFound)\n    })\n. sorry but I don't understand how your answer applies to my situation\nI am starting from this example: https://echo.labstack.com/recipes/subdomains\nthanks\n. Thanks for your help, but I still don't understand how to accomplish this...\nWhich function should I call on the Echo object?\nAlso, please check first three lines of ServeHTTP function:\nfunc (e *Echo) ServeHTTP(req engine.Request, res engine.Response) {\n    c := e.pool.Get().(*echoContext)\n    c.Reset(req, res)\na new Context is obtained from the pool and then reset\n. thank you very much for your help.\nI understand that the data store is now available in the custom middleware.\nI still don't understand how I can retrieve my db instance in the handler\nfor example \n\nblog.GET(\"/\",` func(c echo.Context) error {\n        ds := * GET DB INSTANCE HERE *\n        return c.String(http.StatusOK, \"Blog\")\n    })\n\nFor example I want to reply with a JSON that lists all the rows from a table\n. I am going to try it and let you know.\nBTW is it a recommended approach or should I leave the DB instance as a global and live my life in peace?\n. I would suggest checking all \"reserved\" and \"special\" characters that need URLEncoding\nplease check\nUniform Resource Identifiers (URI): Generic Syntax\nThe list could be reserved + mark + delim\n. ",
    "bigodines": "I found the simpler solution is to just use:\n```\ndbg.GET(\"/debug/pprof/*\", echo.WrapHandler(http.DefaultServeMux))\n```. ",
    "rand99": "This might do the trick\nhttps://github.com/valyala/fasthttp\nand would give echo another boost\n\"Currently fasthttp is successfully used in a production serving up to 1M concurrent keep-alive connections doing 50K qps from a single server.\n\"... up to 10 times faster than net/http ...\"\n- Server provides the following anti-DoS limits:\n  - The number of concurrent connections.\n  - The number of concurrent connections per client IP.\n  - The number of requests per connection.\n  - Request read timeout.\n  - Response write timeout.\n  - Maximum request header size.\n  - Maximum request execution time.\n  - Maximum keep-alive connection lifetime.\"\n. @diiimo2k11 could you share your logrus middleware with us? :)\nmaybe it could be included in this project\n. Thank you!\nYou helped me find the problem.\nIt is \ne.Use(mw.Gzip())\nprometheus doesn't seem to like it.\nhm, I still would like to use gzip for everything but prometheus. \nDo you have an idea?\n. support for https://github.com/valyala/fasthttp :-)\n. try this, although it uses go-redis v4 which is a work in progress - https://github.com/go-redis/rate\n. @briemarie this snipped should help you doing this\n@vishr https://gist.github.com/rand99/808e6e9702c00ce64803d94abff65678\nchange the code a little to crawl folders like \"links\" for the templates\nthen u could use c.Render \"layout:links:created\" for example\n. ",
    "hhh0pE": "https://github.com/hhh0pE/labstack-echo-unicode-routing-problem/\nTested all symbols of alphabet. Some of them work some don't.\n. Yes, it works!\nInteresting solution :) You can just add url.QueryEscape inside the Get method of the router and it will works.\nI think in other languages there isn't problem like this just because they manipulate of unicode strings in another way. Just use 2 bytes for each symbols in string by default. Only Go does another, more correctly(each symbol can fill 1 or 2 or 4 or 8 bytes) but more difficult to programmers.\nThank you for your library.\n. http://www.w3schools.com/tags/ref_urlencode.asp\nWhat kind of testing do you want?\n. ",
    "diiimo2k18": "That's all right, but this is true for all loggers.\nSo I think it's better\ne.Use(mw.Logger(os.File))\n\u2026.\n\u2026.\nlog.Println(\"My log entry\")\n. Yes sounds very good.\n. No problem, have written their own middleware for logrus.\nRemember the other problem, the handler should not automatically log.\n. @rand99 \nIs similar to the variant by: https://github.com/deoxxa/echo-logrus\nWill take a fork and incorporate my changes.\n@vishr \nNice work, I like it. The logger can be used also for other.\n// System logger\nsLog := log.New(\"sys\")\nsLog.SetOutput(s.logOut)\nsLog.SetLevel(s.sysLogLevel)\nI will build the logger as a middleware based on current time. As an idea as it could be.\n. @rand99 Can look at it. https://github.com/diiimo2k11/echo-logrus\nUse:\n```\nimport \"github.com/diiimo2k11/echo-logrus\"\n\u2026\nwlog := logrus.New()\nwlog.Level = logrus.InfoLevel\nwlog.Out = os.Stdout \n// wlog.Formatter = new(logrus.JSONFormatter)\ne.Use(echologrus.LogrusLogger(\"wlog\", wlog, time.RFC3339))\n\u2026\n```\n. Is correct. Is also a question of definition. More importantly, that you flexibly stdout or stderr or file handle can pass.\n. That works for me, thanks...\ncors for websocket with CheckOrigin:\n``` go\npackage main\nimport (\n    \"log\"\n\"github.com/gorilla/websocket\"\n\"github.com/labstack/echo\"\n\n)\nvar (\n    // Websocket http upgrader\n    upgrader = websocket.Upgrader{\n        ReadBufferSize:  1024,\n        WriteBufferSize: 1024,\n        CheckOrigin: func(r *http.Request) bool {\n            return true\n        },\n    }\n)\nfunc main() {\n    e := echo.New()\n    e.Get(\"/ws\", func(c *echo.Context) error {\n        conn, err := upgrader.Upgrade(c.Response(), c.Request(), nil)\n        if err != nil {\n            return err\n        }\n        defer conn.Close()\n        for {\n            mt, message, err := conn.ReadMessage()\n            if err != nil {\n                return err\n            }\n            log.Printf(\"recv: %s\", message)\n            err = conn.WriteMessage(mt, message)\n            if err != nil {\n                return err\n            }\n        }\n    })\n    e.Run(\":1323\")\n}\n```\n. @vishr \nIs still a bug with CheckOrigin.\nWhen one submits a close event by the client, the following error:\n2015/11/24 20:58:36 http: response.WriteHeader on hijacked connection\n2015/11/24 20:58:36 http: response.Write on hijacked connection\nERROR|echo|websocket: close 1005 \nINFO|echo|::1 GET /ws 500 1.474592306s 0\n. The problem is: return err\nThe error handler does not understand the error.\nBetter solution that works:\n``` go\npackage main\nimport (\n    \"log\"\n\"net/http\"\n\"os\"\n\"strings\"\n\n\"github.com/gorilla/websocket\"\n\"github.com/labstack/echo\"\n\n)\nvar (\n    // Websocket http upgrader\n    upgrader = websocket.Upgrader{\n        ReadBufferSize:  1024,\n        WriteBufferSize: 1024,\n        CheckOrigin: func(r *http.Request) bool {\n            return true\n        },\n    }\n)\nfunc main() {\nlog.SetOutput(os.Stdout)\n\ne := echo.New()\ne.Get(\"/ws\", func(c *echo.Context) error {\n    conn, err := upgrader.Upgrade(c.Response(), c.Request(), nil)\n    if err != nil {\n        log.Printf(\"error upgrade: %s\\n\", err.Error())\n        return nil\n    }\n\n    log.Printf(\"websocket connect: %s\\n\", c.Request().RemoteAddr)\n\n    defer func() {\n        log.Printf(\"websocket close connection: %s\\n\", c.Request().RemoteAddr)\n        conn.Close()\n    }()\n    for {\n        mt, message, err := conn.ReadMessage()\n        if err != nil {\n            if strings.Contains(err.Error(), \"close 1005\") {\n                // Receive close event\n                log.Printf(\"receive close message from: %s\\n\", c.Request().RemoteAddr)\n            } else {\n                log.Printf(\"error read: %s\\n\", err.Error())\n            }\n\n            break\n        }\n        log.Printf(\"recv: %s\", message)\n        err = conn.WriteMessage(mt, message)\n        if err != nil {\n            log.Printf(\"error write: %s\\n\", err.Error())\n            break\n        }\n    }\n    return nil\n})\ne.Run(\":1323\")\n\n}\n```\n. Can you make. It would however also work with the flag -no-recurse. For GVT and glide.\n. ",
    "xboston": "For echo v2:\ngo\ne.GET(\"/metrics\", fasthttp.WrapHandler(\n    fasthttpadaptor.NewFastHTTPHandler(prometheus.Handler()),\n))\n. ",
    "bwplotka": "Just bumped into this issue. Updating provided here information with up-to-date state:\n* It seems that prometheus.Handler() is not recommended anymore (see here). Use promhttp.Handler() instead. Note that promhttp is NOT instrumented (does not have default, useful metrics regarding HTTP requests like size, duration or count). If you want them, see InstrumentHandlerDuration example.\n\nAlso not sure what fasthttp package was used above, current tip of https://github.com/valyala/fasthttp does not have WrapHandler method.. \n",
    "michelaquino": "This works:\ne.GET(\"/metrics\", echo.WrapHandler(promhttp.Handler()))\n. Hi, this is an interesting feature to be added. This can be added to jwt.go (line 126) where the parser is called. The third parameter can return the signing key according to the signing algorithm.\nLike this:\n// getSigningKey returns a interface that represents the signing key based on SigningMethod\nfunc getSigningKey(config JWTConfig) (interface{}, error) {\n    if config.SigningMethod == AlgorithmRS256 {\n        signkey, err := jwt.ParseRSAPublicKeyFromPEM(config.SigningKey)\n        if err != nil {\n            return nil, err\n        }\n        return signkey, nil\n    }\n    return config.SigningKey, nil\n}\nCan I make a pull request?\nWhat do you think?\n. ",
    "let4be": "How to use this with v2(beta)? I'm having a trouble calling upgrader.Upgrade method\n. @vishr thanks! Project is amazing\n. ",
    "mewben": "Rate Limiting would be a very very nice addition to echo... \n. Up. Sorry but this doesn't make sense. Why use c.JSON when you don't want to use json as Content-Type?\n. Please be specific.. Thank you so much for this... Now this explains why I have some cases in my app where some claims are incorrect/swapped. \ud83d\udc4d \n@vishr Can you make a release out of this PR please. I would greatly appreciate it. Thanks.. You're already reading the c.Request().Body here:\ngo\ns, _ := ioutil.ReadAll(c.Request().Body)\nlog.Printf(\"Json Received: %s\\n\", s)\nso the Bind reads nothing.\nIf you remove those lines, it will work as expected. Hope this helps.. ",
    "SlavaBobik": "I can create recipe how to user echo v3 with http request limiter. \u00a0Do you still need this recipe?\n. ",
    "homina": "@SlavaBobik \ncan you show me how to add limiter in echo v3?. ",
    "hasit": "@vishr @SlavaBobik \nI'm very interested in the rate limiting recipe as well. Any update on that front?. ",
    "goldalworming": "sorry, my mistake\nI should change line 107 to\ntemplates: template.Must(template.New(\"\").Delims(\"[[\", \"]]\").ParseFiles(\"public/views/welcome.html\")),\n. it works, thank you\ncurl -X POST -H \"content-type: application/json\" http://localhost:1323/users -d '{\"ID\" : \"1\", \"Name\":\"testing\"}'\n. ok, I'll try it. thank you captain\n. ",
    "polds": "That must have been my problem then. We were introducing additional goroutines within a request. What was happening was the goroutine for Request 1 was receiving the request ID assigned by the middleware of Request 2.\n. With the storage being unexported and no mutex added to the struct how would you recommend to obtain the lock without creating a copy of the Context?\n. Using the withValue seems to work. I'm wondering now what the difference in using the store in the echo.Context vs storing things in the net.Context? \nexample:\nWhat's the difference between:\nc.Set(\"key\", \"val\")\nc.Get(\"key\").(string)\nand\nc.Context = context.WithValue(nil, \"key\", \"val\")\nc.Value(\"key\").(string)\n. Appreciate the responses. Closing this.\n. Personal project: Using Echo as an API layer for an image sharing service called imgget (OSX App to be released soon)\nWork projects: \n  Company: www.kyani.net\n- Echo is used as the low level router for our internal microservices, new project that already powers thousands of requests per day.\n- Echo powers the geolocation router that sits at our root www.kyani.net and forwards users to the appropriate website. Benchmarked to handle 4k requests / second on 3 m3.medium EC2 instances. At present handles close to 2.1k requests / minute.\n. Ah shame :( . I may come back to this, working against a deadline so I'll change back to the standard net/http engine. Closing.\n. ",
    "hhsnopek": "any update here?\n. sorry I just dug into my code a bit more and discovered my problem lies within my request and not my api! Thank you for the quick response tho - I believe this issue is regarding the use of rs/cors within a group, which I am doing - but I no longer need to do\n. ",
    "olebedev": "Wow, I think it's not Echo issue. Hot reloading already advanced and flexible in frontend. And hot code reloading for Go already implemented too.\nPlease keep Echo clean and simple to understand for new developers. It is the most important, IMO.\n. Yeah, but not only. For example here I am showing how to do hot reloading without any special library. And here is full example with totally hot reloaded React app, rendered at server with Echo.\n. >  Probably it's a candidate for recipe/example.\n@vishr it would be great!\n. @vishr sorry for PR above. go-starter-kit is using Echo.\n. @dhanunjay Isn't better to write own helper for this case?\n``` go\nfunc JSONBlob(c *echo.Context, code int, b []byte) {\n    r := c.Response()\n    r.Header().Set(ContentType, ApplicationJSONCharsetUTF8)\n    r.WriteHeader(code)\n    r.Write(b)\n}\n// --- \nfunc handler(c *echo.Context) error {\n    JSONBlob(c, 200, []byte({\"json\": \"payload\"}))\n    return nil\n}\n```\n. ",
    "aboukirev": "I'd say don't rush it.  I argued earlier on Reddit that it is something I'd like in Echo.  However, I am all for careful consideration before an action is taken.  What I'd like to see more than that is having response writer accessible directly from context rather than through intermediate response, i.e. c.Writer() rather than c.Response().Writer().  Primarily because it is shorter and mimics direct access to writer as a parameter in a canonical handler.\n. No,  Various packages, besides main package code, have examples, recipes, etc, that import a lot of 3rd party packages.  Unfortunately gvt, glide, and like tools are dumb enough to scan everything and bring in all these dependencies, whether needed or not.  Not echos fault.  I stopped using glide because of that issue. \n. This middleware works just fine for me on the latest echo and performs redirect\nfunc SecurePages() echo.HandlerFunc {\n    return func(c *echo.Context) error {\n        uid := Uid(c)\n        if uid == 0 {\n            target := url.QueryEscape(c.Request().URL.Path)\n            c.Redirect(http.StatusTemporaryRedirect, \"/login?target=\"+target)\n        }\n        return nil\n    }\n}\nAre you properly returning nil from yours?\n. No way to make it work across different engines as fasthttp does not build on top of standard net/http.\nHowever, if you know that you use standard engine, the following might work:\n```\nimport \"github.com/labstack/echo/engine/standard\"\nctx.Request().(*standard.Request).Request\n```\n. My initial guess is something like:\n``` go\nimport \"github.com/labstack/echo/middleware\"\ne.Get(\"/static\", nil, middleware.Static(\"./content\"))\n```\nnil means no handler, it all is handled by middleware.\nI already dislike a lot of things but cannot suggest anything better.  I'll just have to crreate my own handler or middleware to serve static, favicon, and other things the way I like.\n. It means that host part of the URI is shorter than 3 characters.  It also means echo needs to check host name length before trying to take a 3-character long slice of it.\nBut also, you don't want to introduce redirects for ACME webroot challenge. Since non-www redirect is pre-middleware, you'll want to move ACME challenge processing code from GET() handler to pre-middleware invoked before the non-www redirect.. ",
    "shacoqian": "+10086\n. ",
    "monoflash": "I'm not pointing \"e.Use(Logger())\"\nBut in the case of 404 I see console logs.\nimport (\n    \"github.com/labstack/echo\"\n)\nfunc NewHandler(cnf configuration.ServersStruct) (hndl echo.Echo) {\n    hndl = echo.New()\nhndl.Static(\"/\", cnf.DocumentRoot)\nhndl.AutoIndex(true)\n...\ncurl http://127.0.0.1:8080/123123123 (non existing URL)\nResult on console:\n\"ERROR|echo|Not Found\"\n. Not certainly in that way. You connect an outside logger which is integrated into the default HTTP error handler.\nThis is evident on the code and when I connect a my logger.\n1 [             log|github.com/labstac]7790    : ERROR|echo|Not Found {github.com/labstack/gommon/log/log.go:107, func: (*Logger).Error()}\n2 [         handler|application/server]7790    : 127.0.0.1 404 GET /123123123 18.737589ms 10 {application/server/handler/logger.go:44, func: Logger.func1.1()}\nThis is one request and two entries in the log\nI would like to have the ability to disable github.com/labstac\nNow there is an opportunity to establish writer and make Echo#SetHTTPErrorHandler()\nhndl = echo.New()\nhndl.Use(Logger())\nhndl.SetLogOutput(log.GetWriter())\nBut it is not convenient. It would be more convenient to disable the external data logger.\nIn any case, thanks for the reply. I started to deal with the echo recently and I am now convinced that the issue is not solved directly and through detours.\nHow do you suggest, I do make to HTTPErrorHandler() and set filter in logger to delete messages from the logger github.com/labstac\nThanks.\n. After this fix all ok\nhttps://github.com/labstack/echo/commit/6c320ca50bce63a167763e19f2515331e39cd4c5#diff-861e7cdef93e8a1268975900051bead9L53\n. ```\nicons(opt.Echo.Group(\"\",\n....,\n), opt)\n...\nfunc icons(g *echo.Group, opt Options) {\n...\n}\n```\nPanic occurs when creating the group \"\", for non-empty groups it works.\nworkaround:\ngroup \"/\" + middleware + Get \"\" for \"/\"\ngroup \"/\" + middleware + Get \"favicon.ico\" for \"/favicon.ico\"\ngroup \"/\" + middleware + Get \"robots.txt\" for \"/robots.txt\"\netc..\nAnd it was so (now panic):\ngroup \"\" + middleware + Get \"/\" for \"/\"\ngroup \"\" + middleware + Get \"/favicon.ico\" for \"/favicon.ico\"\ngroup \"\" + middleware + Get \"/robots.txt\" for \"/robots.txt\"\netc..\n. ```\npackage main\nimport (\n    \"log\"\n    \"net\"\n    \"net/http\"\n    \"os\"\n    \"os/signal\"\n    \"syscall\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/engine\"\n\"github.com/labstack/echo/engine/standard\"\n\n)\nfunc main() {\n    var e echo.Echo\n    var hndl standard.Server\n    var interruptChan = make(chan os.Signal)\ne = echo.New()\nhndl = standard.WithConfig(engine.Config{\n    Address: \"127.0.0.1:8080\",\n})\nhndl.SetHandler(e)\n\ng := e.Group(\"\")\ng.Head(\"/ok\", Ok)\ng.Head(\"/fail\", Fail)\n\nsrv := &http.Server{\n    Handler: hndl,\n}\n\nl, _ := net.Listen(\"tcp\", \"127.0.0.1:8080\")\nsetInterceptInterrupt(interruptChan, l)\n\nsrv.Serve(l)\n\n}\nfunc Ok(ctx echo.Context) (err error) {\n    log.Printf(\"Ok\")\n    err = ctx.NoContent(204)\n    return\n}\nfunc Fail(ctx echo.Context) (err error) {\n    log.Printf(\"Fail\")\n    err = ctx.NoContent(404)\n    return\n}\nfunc setInterceptInterrupt(interruptChan chan os.Signal, l net.Listener) {\n    signal.Notify(interruptChan, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)\n    go func() {\n        _ = <-interruptChan\n        log.Printf(\"Close listener\")\n        l.Close()\n    }()\n    return\n}\n```\nI repeated the basic properties of the application\n- Use routing group\n- Managed server\n- Application exit by interrupt\n```\n$ curl -v -X HEAD http://127.0.0.1:8080/ok\n   Trying 127.0.0.1...\n Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)\n\nHEAD /ok HTTP/1.1\nHost: 127.0.0.1:8080\nUser-Agent: curl/7.48.0\nAccept: /\n< HTTP/1.1 204 No Content\nHTTP/1.1 204 No Content\n< Date: Sat, 23 Apr 2016 13:53:19 GMT\nDate: Sat, 23 Apr 2016 13:53:19 GMT\n\n< \n* Connection #0 to host 127.0.0.1 left intact\n```\n```\n$ curl -v -X HEAD http://127.0.0.1:8080/fail\n   Trying 127.0.0.1...\n Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)\n\nHEAD /fail HTTP/1.1\nHost: 127.0.0.1:8080\nUser-Agent: curl/7.48.0\nAccept: /\n< HTTP/1.1 404 Not Found\n< Date: Sat, 23 Apr 2016 13:51:30 GMT\n< Content-Type: text/plain; charset=utf-8\n* no chunk, no close, no size. Assume close to signal end\n< \n^C\n```\n\n```\n$ curl -v -X HEAD http://127.0.0.1:8080/unknownurl\n   Trying 127.0.0.1...\n Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)\n\nHEAD /unknownurl HTTP/1.1\nHost: 127.0.0.1:8080\nUser-Agent: curl/7.48.0\nAccept: /\n< HTTP/1.1 404 Not Found\n< Content-Type: text/plain; charset=utf-8\n< Date: Sat, 23 Apr 2016 14:06:16 GMT\n< Content-Length: 9\n< \n^C\n```\n. I noticed the strangeness, i call ctx.NoContent() but the server returns a header \"Content-Type: text/plain; charset=utf-8\"\nHeader 'Content-Type' not needed\n. Apparently curl updated or it's not a bug, it's not documented surprise :)\n\nOk.\nWhat about the header?\n. ",
    "xperimental": "So the idea is to test the complete router with every request?\n. Thanks for the link, I must have missed that somehow, because I already had a look at that file. Will try it out with my own tests.\n. ",
    "BrandonRomano": "Yup, it's not effecting any of my work as of now, so no rush on my end...  Thanks!\n. @vishr -- We use echo at my company Carrot Creative.  We have a pretty specific stack for building out Go API's, and we have our base here: https://github.com/carrot/burrow (warning, this is super opinionated).\nThe root of burrow is echo.\n. Awesome, must have missed that while digging through the source... Will check that out tomorrow!\n. Just for reference if anyone else encounters this, here is an example of how to accomplish this:\ngo\ne.SetHTTPErrorHandler(func(err error, context *echo.Context){\n    httpError, ok := err.(*echo.HTTPError)\n    if ok {\n        errorCode := httpError.Code()\n        switch errorCode {\n        case http.StatusNotFound:\n            // TODO handle not found case\n        default:\n            // TODO handle any other case\n        }\n    }\n})\nRef: http-error-handler\n@vishr I'll leave this up to you to close this issue, but this is resolved from my end\n. Closing as this was already implemented.\nSee the conversation in #325\n. It's also worth pointing out this line here. I changed this to methodNotAllowedHandler, as I believe that using notFoundHandler was incorrect here.\n. ",
    "jonny-improbable": "Consider adding method chaining to the API, especially for groups, use case:\ngo\ne.Group(\"/auth\").Use(requireAdminPermissions).Get(\"*\", s.handleAuthRoute)\ncompared to:\ngo\nauthGroup := e.Group(\"/auth\")\nauthGroup.Use(requireAdminPermissions)\nauthGroup.Get(\"*\", s.handleAuthRoute)\n. Aha! No sooner than asking, I found the solution, although I'm not sure if this is documented or encouraged as part of the public API :)\ngo\nfunc handleThingy(ectx *echo.Context) error {\n  thing := ectx.Param(\"thing\") // works great\n  wildcardMatch := ectx.Param(\"_*\") // shazam!\n}\nIt might be worth moving _* into a publicly exported constant, ie: echo.WILDCARD_PARAM?\n. Sure, but this results in duplication amongst all of my http handlers which would be easy to miss when modifying / adding a new handler.\nI guess one solution would be to create my own Render() method which accepts an echoContext, templateName and arbitrary data before delegating to echo.Redner()\n. ",
    "DallanQ": "The ability to replace the logger is the only thing I've run into. I'm currently using logrus with a hook to send messages to rsyslog in another docker container. I've replaced the error handler to write to logrus, but there are a couple of places where echo writes to its logger directly. It would be nice to have echo write those messages to my logger instead.\nThanks for a great library!\n. I'm not sure why you say that fasthttp is not working for file uploads? The workaround I mentioned seems to be working ok. How would I configure echo to use net/http for handling files and fasthttp for serving everything else? Currently I include fasthttp in my main run command: e.Run(fasthttp.New(\":\" + env.Port)) I'm not sure how to configure echo to use fasthttp for some routes and net/http for others.\n. ",
    "admpub": "@vishr :+1: \n. ",
    "thedrow": "We should also rerun the benchmarks with V2. The benchmarks should be run with both FastHTTP and golang's net/http engines.\n. ",
    "louwers": "Adding a note to the website saying that the docs are not up to date may be a good idea?\nhttps://labstack.com/echo/guide/routing/\n. ",
    "fat": "Out of curiosity, why go away from regular functions in the router, and adopt echo.HandlerFunc\u2026 what does it give us?\n. Yeah i guess i mean i used to have:\ne.Get(\"/e/:objectID\", getEpisode)\nbut now i have something closer to\u2026\ne.Get(\"/e/:objectID\", getEpisode())\nwhere getEpisode has to be a function returning a function\u2026 just doesn't feel as nice api wise\n. Gotchu, makes sense, thanks for explaining\n. whats' really driving me crazy is i have two routes:\ngo\n    r.POST(\"users/:userID/follow\", followUserHandler(s))\n    r.POST(\"playlists/:playlistID/follow\", followPlaylistHandler(s))\nwhich seemed to be defined almost identically, but only doesn't work for user.\n. if i revert this change specifically: https://github.com/labstack/echo/commit/c59b79d45ff4086acfea7129f04742a3e9d8d8b6#diff-56c3bb2da6c5ecf6872e89a554944453L173\nmy bug goes away\n. is there an email address, i can send you more details on our routes (rather then posting here)\u2026\n. also, tomorrow i can try to come up with a better test case \n. yah makes sense\u2026 \n. ok i think i've narrowed down why\u2026\nso we have two groups:\ngo\np := s.Echo.Group(\"/:version/\")\np.Use(OptionalJWTAuth(s))\np.GET(\"users/:userID/following\", getFollowingHandler(s))\np.GET(\"users/:userID/followedBy\", getFollowedByHandler(s))\nand \ngo\nr := s.Echo.Group(\"/:version/\")\nr.Use(JWTAuth(s))\nr.POST(\"users/:userID/follow\", followUserHandler(s))\nr.DELETE(\"users/:userID/follow\", unfollowUserHandler(s))\nif i leave like above, the post and delete don't get the paramnames, but if i comment out those two gets above, they work.\nHopefully that helps!\n. dope thanks @vishr \n. Awesome, thanks <3 - will test this morning\n. works - thanks again!\n. dang\n. ill take a look again tomorrow to see whats up\n. yeah still a bug, i ended up just pinning the app to the version before that one commit.. haven't had time to track down whats causing it sorry. ",
    "abijr": "I don't understand the checklist, there are a lot of checkpoints that link to a merged PR. Is it because the list hasn't been updated? or because those are PRs for v1 and need to be rewritten/reimplemented? \n. ",
    "eyberg": "we have some middleware for it https://github.com/deferpanic/dpecho - which website were you talking about?\n. ",
    "eolexe": "We are using echo at seesawlabs.com cc @raphaeljlps \n. ",
    "01walid": "@vishr we're using it in coursella for our notification system (Server Sent Events). I also switched to Echo for my personal projects.\n. That is some serious changes, I'm mostly Ok with. But I'm not sure if the versioning scheme fits and reflects the amount of changes, especially the breaking ones. I'd better issue a 3.0 release.\nI'm afraid v2.1 will cause a lot of confusions especially for projects using gopkg.in\n. ",
    "nwjlyons": "I just finished building a personal project using echo. It's called gomoku. It's a two player game where you need to get five stones in a row to win.\nVery simple game that reloads player 2's page using websockets whenever player 1 has put down a stone.\nColophon\n- Go\n- echo\n- gForms\n- pongo2\n- websockets\n. ",
    "GeorgeErickson": "DrinkIn uses echo for the main shopping API.\nI also use it for consulting work (gee.io).\n. ",
    "danjac": "https://podbaby.me personal project (podcast manager). Echo runs the API behind nginx, with ReactJS front end.\nCode\n. Sorry, you seem to misunderstand.\nI never suggested adding CSRF to the core Echo framework, merely adding an example recipe to the documentation, as it is a common security requirement. I also suggested making it easier to add Go middleware using http.Handler, so we can re-use popular packages such as nosurf or Gorilla packages. Failing that, again one or two examples in the documentation would be helpful.\nWhether you want to add CSRF or not, or your own solution or someone else's, is up to you. I prefer to use tried-and-tested solutions where possible.\n. With recent changes to echo, you can pass in a http.Handler as middleware so this works great:\necho.Use(nosurf.NewPure)\nThis should probably be documented but otherwise please close this.\n. OK - thought echo.Use() just accepted echo.Middleware/HandlerFunc. Thanks.\n. ",
    "montanaflynn": "We're still in dev but will likely deploy the beta of our API in ~2 weeks \n. Sure, we're https://gifs.com and building our internal and public APIs on top of echo.\n. Thanks, I saw the same thing in the middleware tests, I guess this is causing me the confusion:\nc := echo.NewContext(req, echo.NewResponse(rec, e), e)\nI don't understand how to test the middleware without sending an actual request. My middleware doesn't really deal with context, it just adds a header.\n. @heynemann did you ever get this working? We are looking for the same thing.. @heynemann for the status code we just use c.Response().Status() in the middleware. We're capturing errors and putting them in context so we can log them but we also want the response body in the logs for easier debugging and to correlate that with our frontend.. @ghost did you ever figure how out how to do this?. @vishr yeah that would be helpful, we would probably use the hook to add the response to the context? Basically we want to log the response body for non 200 responses.. This is cool, we also have custom middleware to do this for the request body. I am wondering how it would be possible to capture the response body for logging as well.. @vishr we're already doing this with for the request body to use it in logging middleware, all of our json request and response data is small and would fit in a 1kb limit so I don't think it would affect memory terribly.. ",
    "hvnsweeting": "I'm using echo as frontend for a Python job finding site http://pyjobs.vn/\nThe backend (scraping data), though, is written in Python.\nI hope that I can have an echo badge to add to the bottom of my site. \n. ",
    "ericmdantas": "I don't know if that counts, but I'm using it on ng-fullstack generator: https://github.com/ericmdantas/generator-ng-fullstack, which will lead to a lot of users use it too.\n. Now I'm also using echo in the live-reloading server for web development: https://github.com/ericmdantas/goliv.\n. There's a PR to fix this: https://github.com/labstack/echo/pull/450.\n. Just to see if I got the change correctly,\nBefore: \n``` go\nimport (\n  \"github.com/labstack/echo\"\n  \"github.com/labstack/echo/engine/standard\"\n  \"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n  e := echo.New()\ne.Use(middleware.Static(\"somewhere\"))\ne.Run(standard.New(\":9999\"))\n}\n```\nAfter:\n``` go\nimport (\n  \"github.com/labstack/echo\"\n  \"github.com/labstack/echo/engine/standard\"\n)\nfunc main() {\n  e := echo.New()\ne.Use(echo.Static(\"somewhere\"))\ne.Run(standard.New(\":9999\"))\n}\n```\nCorrect?\n. What about func Static(root string) HandlerFunc? \nIt has the same param signature as the static middleware - no need for two params, I mean.\n. Right, thanks!\n. Also, I've tried switching it to:\ngo\ne.Get(\"/\", e.Static(\"client/dev\"))\ne.Get(\"/*\", e.Static(\"\"))\nSame problem.\n. Working like a charm, thanks!\nIf anyone is lurking, here's a working example:\n``` go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    m \"github.com/labstack/echo/middleware\"\n    \"github.com/labstack/echo/engine/fasthttp\"\n)\nfunc main() {\n    e := echo.New()\ne.Use(m.Static(\"\"))\ne.Use(m.Static(\"client/dev\"))\n\ne.Get(\"/api\", func(c echo.Context) error {\n    return c.String(200, \"hey, there!\")\n})\n\ne.Run(fasthttp.New(\":3000\"))\n\n}\n```\nI also updated the repo.\n. Working perfectly, thanks, @vishr!\n. Removing and getting it again solved it for me. Thanks, @vishr!\n. I suspect it's because you're always overriding the existing cookie in the same request, then you won't be able to read what's really coming from the client.\nChanging it to:\n``` go\npackage main\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/engine/standard\"\n\n)\nfunc main() {\n    e := echo.New()\ne.GET(\"/set_cookie\", func(c echo.Context) error {\n    co := new(echo.Cookie)\n\n    co.SetName(\"session_id\")\n    co.SetValue(\"Yo!\")\n\n    c.SetCookie(co)\n\n    return nil\n})\n\ne.GET(\"/\", func(c echo.Context) error {\n    cookie, err := c.Cookie(\"session_id\")\n\n    if err == nil {\n        return c.String(http.StatusOK, cookie.Value())\n    }\n\n    return c.String(http.StatusNotFound, err.Error())\n})\ne.Run(standard.New(\":1323\"))\n\n}\n```\nDoes the trick.\nJust go to http://localhost:1213/set_cookie and go back to http://localhost:1213/ and then you should see Yo! on the screen.\n. But then when you refresh the page it does work, right?\nYou're setting the cookie for the response and you're trying to read from the request.\nSo, this is what's happening:\n1. When it first hits your server, there's no cookie written yet;\n2. Then you write your cookie calling co.SetName(\"session_id\") and co.SetValue(\"Hello, World!\");\n3. Cookie is then written to the response, there's no cookie in the request yet.\n4. Since there's no cookie in the request, you get the error cookie not found.\nAfter refreshing the page, it'll show Hello, World! correctly, because now you've already sent the cookie in the previous response - so, now it's part of the request.\nSo it goes as the following:\n1. When it hits your server, there's already the cookie there (you wrote it in the first hit);\n2. You write it again;\n3. Cookie is then written to the response, overriding the one that was there before;\n4. It shows Hello world! in the page;\nAnd on and on.\n. :+1: \n. Thanks for the heads up!\nJust out of curiosity: what exactly is holding back the fasthttp integration? Is is too complex to maintain two (or more) engines? Is it because some stuff are falling behind the actual go releases/features (like http/2 not being implemented yet) and so on? Or something else?\nJust asking because some people, if not most, are attracted to the piece of the graph that shows how much faster echo is when using fasthttp - so, removing it could be pretty big (in a bad way) at least for the new people looking for new web frameworks.\nBut I trust @vishr's decision on what might be the best for the long run.\n. I agree. In my opinion, in the long run maintainability is a better path to follow.\n. Agreed, 3.0 makes more sense.\n. So, I was just taking a look at https://github.com/labstack/armor/blob/master/plugin/static.go and, if I remember correctly, this is pretty much what echo's v2  used to do. . Sure, I'll take a look tomorrow morning.\nThank you for all the hard work, @vishr.. Seems to be working perfectly. Thanks once again!. Hmm, actually, it's not working right now.\nGiven the server:\n```go\npackage main\nimport (\n    \"fmt\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/middleware\"\n\n)\nconst port = \":3000\"\nfunc main() {\n    e := echo.New()\ne.Use(middleware.Static(\"\"))\ne.Use(middleware.Static(\"client/dev\"))\n\ne.GET(\"/api\", func(c echo.Context) error {\n    return c.String(200, \"1\")\n})\n\nfmt.Println(port)\n\nif err := e.Start(port); err != nil {\n    panic(err)\n}\n\n}\n```\nAfter running go run main.go, and navigating to http://localhost:3000/api, you'll get a page with the error:\n{\"message\":\"Not Found\"}\nEven if you try to access the /api, you'll also the the error above.\nHere's the updated repo: https://github.com/ericmdantas/echo-static\nLet me know if you'd like me to open another issue to cover this.. Thanks for the quick fix, @vishr.\nNow the /api works, but the static serving doesn't. I've run both go get -u and deleted the echo folder and installed it again - no luck.. The problem I'm seeing is that the index.html is not being served.\nThe following works:\n- http://localhost:3000/api - shows 1\n- http://localhost:3000/index2.css - the css that lives in the root\n- http://localhost:3000/client/dev/index.css - the css that lives in the client/dev\nThe following doesn't work:\n- Opening the app doesn't show the index.html and its dependencies.. To get it to work I had to add the following snippet (which is before the middleware.Static calls):\ngo\n    e.Use(middleware.StaticWithConfig(middleware.StaticConfig{\n        Root:  \"client/dev\",\n    }))\nJust pointing it out, I'm ok if that's the new way to get it to work.\nEdit: Updated snippet. @vishr, nope - doesn't work. \nI ran go get -u, removed the labstack folder and ran go get, and it still won't serve the index.html.\nThis works:\n```go\n    e := echo.New()\ne.Use(middleware.StaticWithConfig(middleware.StaticConfig{\n    Root: \"client/dev\",\n}))\n\ne.Use(middleware.Static(\"\"))\ne.Use(middleware.Static(\"client/dev\"))\n\n```\nThis doesn't:\n```go\n    e := echo.New()\ne.Use(middleware.Static(\"\"))\ne.Use(middleware.Static(\"client/dev\"))\n\n``. Not sure if it helps, but I'm on Windows, by the way.. Working as expected, thanks, @vishr!. @reilg can you share your structure? Because you might wante.Static(\"/\", \"public\")instead ofe.Static(\"/public\", \"p\")`.\nHere's an working example:\npackage main\n```go\nimport (\n    \"net/http\"\n    \"github.com/labstack/echo\"\n)\nfunc main() {\n    e := echo.New() \ne.Static(\"/\", \"public\")\n\ne.Logger.Fatal(e.Start(\":1234\"))\n\n}\n```\nhtml\n<!doctype html>\n<html>\n    <head>\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"./assets/style.css\" />\n        <title>test</title>\n    </head>\n    <body>\n        <h1>!</h1>\n    </body>\n</html>\nStructure:\n/\nmain.go\npublic/\n\u251c\u2500\u2500 index.html\n\u2514\u2500\u2500 assets/\n        \u2514\u2500\u2500 style.css. http request > HTTP request. ",
    "gmonnerat": "I'am using echo with go-bindata in my personal applications. The skeleton is here:\nhttps://github.com/gmonnerat/go-web-application-skeleton\n. ",
    "Asoseil": "we have chosen echo for Realize\n. ",
    "remylab": "http://www.yipsum.com \n. Unfortunately I tried it, and status is 200, rec.Body = \"\", I don't reach the ErrorHandler (I've put printf in there). \nAlso, I'm sure the return echo.NewHTTPError(http.StatusNotFound, err.Error()) is reached as I get the err back in the test.\n. What do you mean standalone ? I thought this one was :+1: \n``` go\nfunc TestIpsum(t *testing.T) {\n    dbm, _ := db.NewSqliteManager(\"./TestIpsum.db\")\n    defer db.AfterDbTest(dbm,\"./TestIpsum.db\")()\ntest.LoadTestData(\"./TestIpsum.db\",\"./app_test.TestIpsum.sql\")\n\nh = &Handler{dbm}\n\ne, req, rec := test.GetEcho(), new(http.Request), httptest.NewRecorder()\nc := e.NewContext(standard.NewRequest(req, e.Logger()), standard.NewResponse(rec, e.Logger()))\n\nc.SetPath(\"/:uri\")\nc.SetParamNames(\"uri\")\nc.SetParamValues(\"i-dont-exist\")\n\nassert.Error(t, h.Ipsum(c))\n\n}\n```\nIn the test above the recorded status is 200 , even if \ngo\nreturn echo.NewHTTPError(http.StatusNotFound, err.Error())\nis executed\n. Make sense ! thank you so much , code below works  \ngo\n    err := h.Ipsum(c)\n    if( assert.NotNil(t,err) ){\n        he, ok := err.(*echo.HTTPError)\n        if ok {\n            assert.Equal(t, http.StatusNotFound, he.Code)\n        } \n    }\n. Or you could you could store the serverToken in a session and only renew the value when the session expires. As suggested by wasp :\nIn general, developers need only generate this token once for the current session. After initial generation of this token, the value is stored in the session and is utilized for each subsequent request until the session expires. When a request is issued by the end-user, the server-side component must verify the existence and validity of the token in the request as compared to the token found in the session. \nSrc: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)Prevention_Cheat_Sheet#Synchronizer.28CSRF.29_Tokens\n. Same logic Works with cookies too..\n. Your controller return an error, check #593 to test the actual status code from the error object.\n. he, ok := err.(*echo.HTTPError)\n        if ok {\n            assert.Equal(t, http.StatusNotFound, he.Code)\n        } \n. ",
    "ktnyt": "I use echo to power the backend API for https://calltable.imascg.moe (*Japanese website)\nhttps://github.com/ktnyt/imascg. ",
    "josue": "I'm using Echo on several production API's & microservices.\nMy only caveat is that documentation needs to be updated pretty badly. I've spent hours looking to customize/extend parts of the framework and integrate middleware that I had to dig too deep into the actual library logic, issues & PR's - when that could have been easily solved if the documentation was more extensive and provided details/info about helpful methods not on the docs yet.. @vishr Thanks for the open invite to help, and thanks for creating Echo!. ",
    "KexinLu": "We, wide tech, is using echo for our experimental environment monitoring platform's API. We ditched Beego and went ahead with echo(there was some consideration between echo and gin). I'm very happy with the performance of Echo. Our first iteration will be closed soon and we will push out some tutorials for the following stack: echo + viper + gorm + logrus + lumberjack + redis + casbin + goi18n. Thanks for the great framework.. ",
    "StarpTech": "@vishr echo is a great framework, thanks for your work. I created serveral prototypes as well as a \"best-practice\" project https://github.com/StarpTech/go-web. Please reopen. ",
    "lee123lee123": "zaihui. ",
    "scofieldpeng": "maybe group can do it, but I think it's not a good way. use middleware is better  :)\n. ",
    "ianwalter": ":+1:\n. My Group is not empty:\n``` go\n    e.Get(\"/files/:name\", app.getFile)\nrestricted := e.Group(\"/files\", middleware.BasicAuth(func(user, password string) bool {\n    if user == \"joe\" && password == \"secret\" {\n        return true\n    }\n    return false\n}))\n\nrestricted.Post(\"/:name\", app.addFile)\n\n```\nAlso tried using the restricted.Use interface.\n. Pretty sure this is a bug, but even if it isn't, I think group_test.go should be modified to test for this case.\n. It doesn't work for us most likely because our root path is the same between the base and restricted routes while the root path is different in your example. I think this is a fairly common use case, but maybe it shouldn't be handled by groups?\n. ",
    "impronunciable": "I tried with a non-empty group and didn't work either. We ended up using a function wrapping tje handlers for the protected groups.\nThanks for the response :)\n. ",
    "polaris1119": "I agree. I have the problem, too.\n. Thanks\n. ",
    "maxvi": "Sure I'm a newbie in Go and Echo, but in my opinion it's bad idea because of Echo is just simple router we can validate request (form) using 3rd party package like https://github.com/asaskevich/govalidator or something like that.\n```go\npackage main\nimport (\n    \"net/http\"\n\"github.com/asaskevich/govalidator\"\n\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/engine/standard\"\n\n)\ntype Form struct {\n    Name  string json:\"name\" valid:\"optional,alphanum\"\n    Email string json:\"email \"valid:\"required,email\"\n    Card  string json:\"card\" valid:\"required,creditcard\"\n    Code  string json:\"code\" valid:\"numeric,length(3|4)\"\n}\nfunc main() {\n    router := echo.New()\nrouter.POST(\"/\", formHandler)\n\nrouter.Run(standard.New(\":8000\"))\n\n}\nfunc formHandler(c echo.Context) error {\n    form := Form{}\nif err := c.Bind(&form); err != nil {\n    return c.String(http.StatusBadRequest, err.Error())\n}\n\n_, err := govalidator.ValidateStruct(form)\n\nif err != nil {\n    return c.String(http.StatusBadRequest, err.Error())\n}\n\nreturn c.String(http.StatusOK, \"Ok\")\n\n}\n```. you never need to set up a router of not found error, it's a status of requested page\n``` go\npackage main\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/engine/standard\"\n\n)\nfunc main() {\necho.NotFoundHandler = func(c echo.Context) error {\n    // render your 404 page\n    return c.String(http.StatusNotFound, \"not found page\")\n}\n\ne := echo.New()\n\ne.GET(\"/something/:id\", func(c echo.Context) error {\n    if c.Param(\"id\") == \"5\" {\n        return echo.NotFoundHandler(c)\n    }\n\n    return c.String(http.StatusOK, c.Param(\"id\"))\n})\n\ne.Run(standard.New(\":8000\"))\n\n}\n```\nalso see default error handler https://github.com/labstack/echo/blob/master/echo.go#L276, you can customize it setting own error handler using e.SetHTTPErrorHandler\n. @dxvgef, seems like it can help you.\n``` go\ne := echo.New()\n// set debug mode\ne.SetDebug(true)\nfunc (t Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {\n    if e.Debug() {\n        t.templates = template.Must(template.ParseGlob(\"public/views/.html\"))\n    }\nreturn t.templates.ExecuteTemplate(w, name, data)\n\n}\n```\n. @apaganobeleno,\nIn the code above templates will be recompile, You don't neet to restart your application\nJet do almost the same code here.\nhttps://github.com/CloudyKit/jet/blob/master/template.go#L226-L239\n. ",
    "jonnyreeves": "Two pull requests raised - one for each point above.  Feel free to pick and choose.  Thanks for your hard work on this framework :+1: \n. Guessing this is not of interest?\n. Looks like this got pretty stale :(\n. My thinking is to add a new Setter on Echo to allow HEAD requests; this would then automatically reigster a Head handler alongside a Get handler.\nLet me know what you think to this approach; happy to cut a PR for it.\n. Ah to be fair, I just fixed this in my own project (using echo_v1) with some custom Middleware:\ngo\n// AllowHeadRequestsMiddleware allows HEAD requests to be made against valid routes without\n// the need to explicitally register a handler for each one.\nfunc AllowHeadRequestsMiddleware() echo.MiddlewareFunc {\n    return func(wrapped echo.HandlerFunc) echo.HandlerFunc {\n        return func(ectx *echo.Context) error {\n            err := wrapped(ectx)\n            if err != nil && ectx.Request().Method == echo.HEAD && err.Error() == http.StatusText(http.StatusMethodNotAllowed) {\n                return ectx.NoContent(http.StatusOK)\n            }\n            return err\n        }\n    }\n}\nFeel free to close this issue unless you would like to extend the public API.\n. ",
    "sb89": "+1\n. In v1, I used the following code:\ne.Use(func(c *echo.Context) error {\n    util.SetDB(c, db)\n    mail.SetMailer(c, mailer)\n    redis.SetRedisPool(c, redisPool)\n    return nil\n  })\nMy SetDB(), SetMailer(), SetRedisPool() functions allow me to add the database to the context, my mailer to the context and my redis pool to the context. By doing it this way, I can avoid having global variables to store these things.\nAs I can no longer get the instance of context.Context, I would only be able to add one of these things before the context is overwritten by the next one. If there is a more appropriate way of handling this, let me know and we can close this issue,\n. ",
    "anzellai": "@jonny-improbable I agree with your point it could be a pain to write repetitive code passing context.\nThat's why I find it more useful to just create a helper function like below and pass the context via Render: \n// just some pseudo-code\nfunc GetContext(c *echo.Context) *map[string]interface{} {\n  user := GetUser(c)\n  query := GetRequestQueryLikePageOrLimitETC(c.Request())\n  more := GetMoreStuff(c)\n  // core context which requires by common views\n  context := &map[string]interface{}{\n    \"user\": user,\n    \"query\": query,\n    \"more\": more\n  }\n  // conditional check for extra context\n  if extra, err := RequireExtraContext(c); err != nil {\n    context[\"extra\"] = extra\n  }\n  return context\n}\nthen just pass it to each render requires context:\nreturn c.Render(http.StatusOK, \"index\", map[string]interface{}{\"foo\": \"bar\", \"context\": GetContext(c)}\nIt's reusable and flexible to optionally pass extra context (like metadata for SEO).\nYou can also put logic there to see what \"common\" context should be passed depending on request or session etc.\n. ",
    "rayrutjes": "Ok great!\n. ",
    "localhosted": "Ah, true. Thanks!\n. ",
    "whidbey": "using xorm or gorp.\n. thanks but would you provide it to the github/labstack/examples? \n. dynamic url and index your content to static html file is ok\n. ",
    "DevSpouk": "Good choice. - > github.com/jinzhu/gorm\n. Recipe architectural, use middleware wrapper to test created a pool if there is no one to create. Verification takes place every request. Introduces base station + model in the context for use in subsequent handlers, and enjoy.\n. yes, ty Ahmet.\n. My mistake, I forgot to change the http. * Code corresponding to correctly redirect.\nThanks for the pointer.\n. Stupid idea, you have a wonderful context you have the ability to add via wrappers desired functionality. What is the problem? The question of adding CSRF is solved on the basis of the construction of the future architecture of the system. Will you actively use ajax + csrf or just validate forms + csrf. Adding CSRF IMHO superfluous. No need to clutter up the excellent product every trash. You need - write framework based Echo and rejoice.\n. Describe to me a couple of situations where really need to reset the current content in the framework of this, I stress this request?\nThe context of the overall stack, it is not necessary to use it as a container for the division of powers, for example. Use a container with reference to the session token - cookies as an example. Often the problem in the wrong architecture of the project and not to implement, or provided opportunities.\n. My omission, you released a new version, with a new package structure, I have an old, when you try to update a bug climbs. The question is removed, I'm sorry to trouble you.\n. You have a portable context, what do you want? Session written a couple of hours for a project of any complexity. Very lazy.\n. ",
    "giksa": "I want an example too\n. ",
    "ahmet": "If you want it to be released, you should stop it by pressing CTRL+C not CTRL+Z, IMHO.\nHere is why.\n. Possible duplicate of #277 \n. Hi @azer, \nI think it does that, am I missing something?\n. ",
    "akonsu": "@axdg thanks. I need to implement a sort of CMS where the user can add pages to her site. I guess each new page would need a URL... Of course I can use a parametric route for that, like /path/pages/:pageID, I just hoped I could let them use arbitrary URLs. For example, let the user have a hierarchy of pages, where a page's path has another one's path as its base.\n. @whidbey I did not get what you said.\n. I wonder if a simple lock that allows multiple readers and one write would suffice.\n. @agad I did not try it, sorry.. ",
    "0xCMP": "@axdg is there an ordering to which route gets picked first? If so, maybe @akonsu could create his fixed routes first and then create a final route which could take over last and make sure the page doesn't exist dynamically.\nOr even crazier: Setup all the routes normally that you can and setup an error handler to try finding that dynamic page or else you continue your error.\nAgain, these are all not the best solutions, but sometimes we have to do certain things which aren't ultra performant and these are approaches I'd take.\n. ",
    "agad": "@akonsu I was wondering whether you attempted this approach with the router?  Am looking at possibly swapping in a custom router and was wondering if your approach worked (if you tried it).  Thanks.. +1 for this feature - would love to add some additional internal route information that can't be easily handled any other way.. One issue which I came up with is that SSL could not work on a per domain basis.  But this won't be an issue for the specific use case as the SSL will be terminated at a front end proxy and ultimate communication with the API won't use SSL.. Thanks for the suggestions.  #250 describes exactly how we are handling subdomains - they hit the proxy which handles security, enforces throttling, etc. - and the proxy rewrites the URL to send to the correct upstream.  The proxy URL will contain info on the account which translates to the backend the request gets sent to.  So a domain request such as GET:www.mydomain.com/api/v1/books would get translated to http://server1.ourdomain.com/8fe297d9-b454-4ba3-4ec1-580074ddcec3/api/v1/books. \nEach subdomain can have its own set of routes and its own versioning.  We decided to go with the single echo instances and lots of routes approach to see how it goes.  So far, we're pretty happy with it so we're going to stick with it until we hit a roadblock.  Luckily, the actual routing latency with a huge amount of routes is within our acceptable range and ultimately is a small part of the overall \"cost.\"\nWe're doing this project as an experimental replacement for a node.js solution which does not have the latency characteristics we need.  Ultimately, we may have to resort to writing our own library, but that's going to take more time to do it right than we currently have.  Echo seemed like a very flexible library compared to others and so far, we've been able to get it working 98% within our constraints (which have a lot of edge cases) without too much trouble.  The one issue I see our having is the need to dynamically update the router.  Once we get to that point, we'll likely need to fork or go down the road of creating our own or rethink our architecture (ie: fireup docker to isolate each api).  But so far so good.\n. ",
    "muei": "Sorry my little english. I mean the website, the docs. If I git clone the project. I hope I can work the website dir easy ,like http://labstack.com/echo\n. +1\n. The url is /search?q=xxx, so I can get the value by c.QueryParam(\"q\"). Now I want add the param, like the url name=yyy, I hope I can use like c.SetQueryParam(\"name\", yyy)\n. But one is GET method, one is DELETE method\n. ``` go\nfunc GetJwtSub(c echo.Context) uint64 {\n    user := c.Get(\"user\").(*jwt.Token)\n    claims := user.Claims.(jwt.MapClaims)\n    sub := claims[\"sub\"]\nid, err := strconv.ParseUint(sub.(string), 10, 0)\nif err != nil {\n    panic(err)\n}\nreturn id\n\n}\n```\nThis function is used to obtain sub, but after jwt middleware, so  there must be a value of sub .\n. The latest!\n\n\u5728 2016\u5e749\u670813\u65e5\uff0c\u4e0b\u534812:49\uff0cVishal Rana notifications@github.com \u5199\u9053\uff1a\nWhich version are you using?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/labstack/echo/issues/656#issuecomment-246572933, or mute the thread https://github.com/notifications/unsubscribe-auth/AHmmpC_U9FySjCF9Rapo3E_cFlc7NSzuks5qpitkgaJpZM4J6VN7.\n. https://github.com/labstack/echo/issues/647 fixed ?\nYeah, I used the lastest version , also happen this.\n. Yeah! I tried, then I updated to the lastest version\n. \n",
    "timoreimann": "Working like a charm. Thanks for the prompt reaction!\n. ",
    "cgilling": "Actually nevermind I don't think what I wanted to do is going to work.\nI was hoping to just use the router portion of the framework, but just realized my idea of how to do that won't actually work. Sorry for not thinking if through more beforehand.\n. ",
    "arkan": "c.ParamValues could be added but isn't required per se, which could very well be a good reason to not add it.\nIn our case we're building a map and the following code is pretty straightforward: \nparams := map[string]string{}\nfor _, key := range c.ParamNames() {\n    params[key] = c.Param(key)\n}\nAbout #295 we'll happily add us there :simple_smile:\n. :up: \n. ",
    "dhanunjay": "I want a function something like this:\nfunc (c *Context) JSONBlob(code int, b []byte) {\n        c.response.Header().Set(ContentType, ApplicationJSONCharsetUTF8)\n        c.response.WriteHeader(code)\n        c.response.Write(b)\n}\n. @vishr and @o1egl It is very critical for us to store JSON encoded blobs in the DB and directly render them to the client for performance reasons. Without this API, I need to either Unmarshal it (and the framework Marshals it again which is unnecessary overhead) or write my own function to render JSON blobs. I am pretty sure multiple applications does this way.\nBTW, what is the downside to providing that extra API? You already have that API but it is private. I certainly think it is not an irrelevant API.\n. @o1egl Yes. If that method is added, it will solve our issue. Thanks.\n@vishr We are still in stealth mode. I will surely update ASAP. I very much appreciate all of you for the great work you have been doing. We really love echo. Hopefully we will find some time to contribute to it.\n. @olebedev I am currently doing something similar to that way, but it is more of like a hack. Doing it in framework is a clean way.\n. ",
    "elgris": "Hi @vishr. Indeed, this change brakes existing interface. Accepting interface{} doesn't seem right to me, because we lose benefit of compile-time type checks. I'd add it to v2 release. I can look at it if you wish :)\n. Actually, http.Handler there reduces to a function call, so I won't be able to use a handler as an object in middleware. My actual usage scenario is following:\n1. Add handler objects to router\n2. In some middleware get current routed handler, cast it to some type, get properties of that object and do something with those properties. For instance, my handler object provide a method to check whether current user can access it or not.\nPlease let me know what you think about it.\n. Decorators... Of course, why I didn't think about them at first time? :)\nThanks @CaptainCodeman, it works :+1: \n. ",
    "alimoeeny": "My mistake. \n. ",
    "robertmeta": "\nDo you think default level to off is practical, do we really want to to skip errors logs?\n\nI think assuming someone is going to see the error logs isn't very safe either, if a proper error is never sent to into the application-space, it doesn't really exist.  I personally would prefer by default no logging happening under the covers without my explicit request. \n. ",
    "dc0d": "+1\n. Same problem! Latest tags dropped the letter v. That causes problems with modules. If we try command go get -v -u github.com/labstack/echo@3.3.5 (mind the version 3.3.5 which should be v3.3.5). Then the latest version we get is: v3.2.2-0.20180412143600-6d227dfea4d2+incompatible.. If it sounds fine, maybe two tags should be added to allow people to downgrade (just in case). For example v3.3.5mod (on current released 3.3.5 commit) and the next release could be v3.3.6.. And if you see fit, go.mod should be added too, which helps the adoption with the new module system.. ",
    "azer": "@vishr I think it should be disabled by default. The logger is polluting the output rather than being useful, it doesn't make sense to configure something that you don't use as a developer. Please have a look at The Rule of Silence of Unix Philosophy. \n. Every time you hit the API with a browser, you get a 404 log in the output for favicon.ico;\n{\"time\":\"2016-08-17T16:55:21-07:00\",\"level\":\"ERROR\",\"prefix\":\"echo\",\"file\":\"echo.go\",\"line\":\"230\",\"message\":\"Not Found\"}\nIt's not really an error... \n. @vishr could you give an example for critical log ? CRUD is another library with important loggings, and it lets users enable them by passing an environment variable like LOG=crud. It uses logger behind the scenes.\n. @vishr I've pulled the latest version and tried again, still need wrapper. here is my code;\n``` go\npackage main\nimport (\n  \"github.com/labstack/echo\"\n)\nfunc main() {\n  api := echo.New()\n  api.Get(\"/\", Hi)\n}\nfunc Hi(c *echo.Context) error {\n  return c.JSON(http.StatusOK, &struct {\n    Welcome string json:\"welcome\"\n  }{\n    \"Hi, how are you today?\",\n  })\n}\n```\nerror I'm getting;\n./handler.go:10: cannot use Hi (type func(*echo.Context) error) as type echo.HandlerFunc in argument to api.Get\n. @CaptainCodeman sure. So we have an app consists of two servers;\n1. UI Development Server: Webpack serving React stuff \n2. API Server: The Go Server with Echo\nI'd like Echo to point / endpoint to UI development server as reverse proxy, and rest of the endpoints are normal API endpoints. \nIs that possible ? It'd help people simplify development environment a lot. \n. @vishr yeah I use static middleware. Do you think there can be a middleware for reverse proxying, too ? \n. @vishr I have something like that in Go but it's much better to do all these stuff in one server without getting into configuring NGinx or any other proxy tool. \n. ",
    "heynemann": "Should this go to a new PR?\n. Maybe this should be closed?\n. I get that, but what if I have different middleware looking at errors (one of them logs, one of them sends to an error aggregator, etc).\nI can check the error, but handling the body seems like a sensible operation. Imagine I want to implement my own GZip middleware. How would I go about that?\nThanks for the quick reply!\n. You are absolutely right! Sorry. Closing this issue.\n. Not really... I just keep track of status codes as part of a context in the request now. If anyone wants to do this I figured it out:\n```\n//Get from server\nfunc Get(app *api.App, url string) (int, string) {\n    return doRequest(app, \"GET\", url, auth)\n}\nfunc doRequest(app api.App, method, url string) (int, string) {\n    app.Engine.SetHandler(app.Echo)\n    ts := httptest.NewServer(app.Engine.(standard.Server))\n    defer ts.Close()\nreq, err := http.NewRequest(\"GET\", fmt.Sprintf(\"%s%s\", ts.URL, url), nil)\ngomega.Expect(err).NotTo(gomega.HaveOccurred())\n\nclient := &http.Client{}\nres, err := client.Do(req)\ngomega.Expect(err).NotTo(gomega.HaveOccurred())\n\nif res != nil {\n    defer res.Body.Close()\n}\n\nb, err := ioutil.ReadAll(res.Body)\ngomega.Expect(err).NotTo(gomega.HaveOccurred())\n\nreturn res.StatusCode, string(b)\n\n}\n```\nApp is a struct I have that has both the Engine I'm running Echo on, as well as the Echo struct.\nIt's worth noting that this approach only works if you are using the standard engine. But IMHO it's good enough for tests.\nUsing it is as simple as:\nstatus, body := Get(app, \"/experiments\", \"test@test.com\")\nExpect(status).To(Equal(http.StatusOK))\nExpect(body).NotTo(BeEmpty())\nI simplified the assertions just to show how it's used. Ideally you would assert the contents of the body (JSON in my scenario).\nAs this can be easily accomplished I'm closing this issue. I do believe that having a stronger testing infrastructure would benefit echo, though.\n. I add my engine to echo.Echo. Not sure what you mean, but you can see it in use in my repo at https://github.com/topfreegames/khan\nHope it helps!\n. ",
    "ackintosh": "Let's do so.\n. ",
    "amrnt": "I've already implemented setting/getting JWT token thru the link above. Now the data are saved in the request context. I know the only solution to access the context in other function is to pass it as an argument, but in my case, I'm trying to pass the context it to a gorm callback, which will be fired automatically: https://github.com/jinzhu/gorm#callbacks\nI'm asking here to see if there is another way to access the context, or...\n. I understand what you said. I worked around this issue by this stupid (maybe) solution.\nThis is the route:\ngo\nfunc createCompany(c *echo.Context) error {\n    company := models.Company{Ctx: c}\n    // ...\n    if err := core.App.DB.Save(&company).Error; err != nil {\n        return c.JSON(http.StatusBadRequest, err)\n    }\n        return c.JSON(http.StatusOK, company)\n}\nand this is the \"model\":\n`` go\ntype Company struct {\n    // ...\n    Ctx *echo.Contextsql:\"-\" json:\"-\"CreatorID uintjson:\"creator_id,omitempty\"UpdaterID uintjson:\"updater_id,omitempty\"`\n    // ...\n}\nfunc (c *Company) BeforeCreate() (err error) {\n    if cuid := c.Ctx.Get(\"cuid\"); cuid != nil {\n        u, _ := strconv.ParseUint(cuid.(string), 0, 64)\n        c.CreatorID = uint(u)\n        c.UpdaterID = uint(u)\n    }\n    return\n}\n```\nSo here's how I passed the context from the router to the model. I'm not really sure if this approach is valid or not, I don't have that experience in go, I'm still learning :) Any comments are welcome!\n. @vishr Thanks.\n. @vishr Why Echo#Logger.SetOutput would work if I pass logrus.Logger#Out which implements io.Writer: https://github.com/sirupsen/logrus/blob/10f801ebc38b33738c9d17d50860f484a0988ff5/logger.go#L13. ",
    "safeie": "c.Echo().URI()\n. ",
    "slava-vishnyakov": "\nc.Echo().URI()\n\nWould it be possible to add it to here? https://labstack.com/echo/guide/routing/ (\"URI building\" section)\n. ",
    "kevinvandervlist": "Awesome, works like a charm :+1: \n. ",
    "burdiyan": "Thanks a lot!\n. ",
    "francoishill": "Hi @vishr, thanks but since this pull request was created other changes implicitly \"fixed\" this issue too. So you can just keep this one closed.\n. ",
    "zahhakrnch": "The problem is that this:\n``` shell\n\u276f curl -v -X OPTIONS http://localhost:8080/foo\n   Trying ::1...\n Connected to localhost (::1) port 8080 (#0)\n\nOPTIONS /foo HTTP/1.1\nHost: localhost:8080\nUser-Agent: curl/7.43.0\nAccept: /\n< HTTP/1.1 405 Method Not Allowed\n< Content-Type: text/plain; charset=utf-8\n< X-Content-Type-Options: nosniff\n< Date: Mon, 07 Mar 2016 21:36:08 GMT\n< Content-Length: 19\n<\nMethod Not Allowed\n* Connection #0 to host localhost left intact\n```\n\nreturns a 405 instead of a 200\n. The weird thing is that whiteout this:\ngo\ne.Get(\"/foo\", func(e *echo.Context) error {\n    return nil\n})\nWe get 200 in response to OPTIONS /foo. It's a bit confusing that handling e.Get(\"/foo\", ...) bypass the e.Options(\"/*\", ...) for /foo.\nFurthermore, my wish here is to handle Options requests for every defined routes. Not for every NOT defined routes. I think it will be better to change this behavior or at least, document it.\nBy the way, I have the following workaround to deal with CORS policy:\n``` go\n    /\n     * CORS Policy\n     /\n    e.Use(func(h echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            req := c.Request()\n        headers := c.Response().Header()\n        headers.Set(\"Access-Control-Allow-Origin\", \"*\")\n        headers.Set(\"Access-Control-Allow-Headers\", \"Authorization\")\n        headers.Set(\"Access-Control-Allow-Methods\", \"GET, PATCH, PUT, POST, DELETE, OPTIONS\")\n\n        if \"OPTIONS\" != req.Method {\n            h(c)\n        }\n\n        return nil\n    }\n})\n\n```\n. ",
    "bunkat": "I just ran into this as well.  It would be great to at least get the special case of handling OPTIONS requests documented a little better since that is probably the only MATCH ALL route people will normally have.\n. v2, just pulled today.\n. I'm starting to use v2 right now, having a hard time understanding exactly what is being considered for v3.  Is echo.Context going away?  I'm currently using things like c.Bind, c.Param, c.Get/c.Set, c.JSON, and c.Attachment  - will all of my handlers need to be rewritten?\n. ",
    "Torwori": "@vishr Will ServeFile be supported in v2?\n@aboukirev That solution doesn't work, it produces a panic:\n2016/03/12 13:42:58 stderr: panic: reflect: call of reflect.Value.Type on zero Value\n2016/03/12 13:42:58 stderr: \n2016/03/12 13:42:58 stderr: goroutine 1 [running]:\n2016/03/12 13:42:58 stderr: panic(0x84bfa0, 0xc8200b1120)\n2016/03/12 13:42:58 stderr:     /usr/lib/go/src/runtime/panic.go:464 +0x3e6\n2016/03/12 13:42:58 stderr: reflect.Value.Type(0x0, 0x0, 0x0, 0x0, 0x0)\n2016/03/12 13:42:58 stderr:     /usr/lib/go/src/reflect/value.go:1671 +0x7b\n2016/03/12 13:42:58 stderr: github.com/labstack/echo.handlerName(0x0, 0x0, 0x0, 0x0)\n2016/03/12 13:42:58 stderr:     /home/igor/Projects/go/src/github.com/labstack/echo/echo.go:471 +0x86\n2016/03/12 13:42:58 stderr: github.com/labstack/echo.(*Echo).add(0xc82007b680, 0x8f93f0, 0x3, 0x8f8750, 0x7, 0x0, 0x0, 0xc82000b610, 0x1, 0x1)\n2016/03/12 13:42:58 stderr:     /home/igor/Projects/go/src/github.com/labstack/echo/echo.go:352 +0x75\n2016/03/12 13:42:58 stderr: github.com/labstack/echo.(*Echo).Get(0xc82007b680, 0x8f8750, 0x7, 0x0, 0x0, 0xc82000b610, 0x1, 0x1)\n2016/03/12 13:42:58 stderr:     /home/igor/Projects/go/src/github.com/labstack/echo/echo.go:304 +0x85\n2016/03/12 13:42:58 stderr: main.main()\n2016/03/12 13:42:58 stderr:     /home/igor/Projects/go/src/github.com/Torwori/open-analytics/server.go:37 +0x42e\n. Working as expected now, good job! :smiley: \n. ",
    "mikaelnousiainen": "Ok, well, my code was just an example -- the route context would need to be specified in another way (since the rest of the parameters are used by ...Middleware), or is v2 API already frozen? What do you think about the idea of adding this data to routes? I could provide a PR to implement this.\n. Ok, I was not clear enough with the requirements. A closure works fine (and I'm using such setup as well) if you need the route-specific context data only in the handler specified as the parameter, but I need to access route-specific data in middleware also, which would be the primary use case for this.\nIn my case, the middleware I'm working on is a rate limiter that has route-specific configuration parameters. The route is selected before any middleware is run (and the path is available already in context.Path() -- field that I'm using to detect the route), but this workaround requires additional coupling between the middleware and the handler registration process, since the middleware needs to be aware of the route paths.\nOf course I could just move the code from middleware to the handler (and not use middleware at all), but to achieve good separation of concerns, this would a be very useful feature.\n. A better example of the use of this feature would be (using v2 route registration API):\n``` go\ntype RateLimiter interface {\n    Limit(key string, count uint64) bool\n}\ntype RouteContext struct {\n    RouteName string\n    RoutePath string\n    RateLimiter RateLimiter\n}\nfunc Limiter() echo.MiddlewareFunc {\n    return func(handler echo.HandlerFunc) echo.HandlerFunc {\n        return func(context *echo.Context) error {\n            routeContext, ok := context.RouteContext.(RouteContext)\n        limited := routeContext.RateLimiter.Limit(key, 1)\n\n        log.Infof(\"Route: %s, Path: %s, Limited: %v\", routeContext.RouteName, routeContext.RoutePath, limited)\n\n        ...\n    }\n}\n\n}\nfunc main() {\n    for routeName, routePath := range routes {\n        rateLimiter := NewRateLimiter(...)\n    routeContext := &RouteContext{\n        RouteName: routeName,\n        RoutePath: routePath,\n        RateLimiter: rateLimiter,\n    }\n\n    handler := ...\n\n    // The third parameter could accept any type (interface{})\n    echo.Get(routePath, handler, routeContext, Limiter())\n}\n\n}\n```\n. Hmm, so your solution is to create a separate middleware function for each route?\n. For my use case the middleware needs route-specific configuration, so the answer is: yes for me, I guess?\nAnd with Echo v1 I'd need to create a separate group for each route to have route-specific middleware -- there is no possibility to register middleware with the route directly like in v2 API?\n. Ok, since this seems to be a pattern already in use out there, there may not be a need to add anything to the router. I'll try to change my implementation tomorrow according to your comments and see if it works well.\n. I was able to refactor my code to use the pattern you suggested, but then I ran into a middleware-related bug, which I reported as issue #405 \n. This works properly now that the middleware bug is fixed, closing the issue.\n. I was able to reproduce the same bug with Echo v2: context.Path() was empty in middleware.\n. ",
    "Gnouc": "@vishr Well, the next.Handle(c) is what I am trying in my local.\nThanks for the quickly fix.\n. ",
    "kotchuprik": "thank you, that works :)\n. It works for multipart form only, I have simple form data\n. thank you! very strange.. I test all requests with Postman and looks like this tool sent another POST data :)\n. ",
    "jelinden": "Works nicely, thank you!\nI'm using echo with github.com/googollee/go-socket.io, seems to be simplest with http server.\n. With the guide from https://labstack.com/echo/recipes/websocket, I'm getting\ninterface conversion: standard.responseAdapter is not http.Hijacker: missing method Hijack\n. https://github.com/labstack/echox/blob/master/recipe/websocket/server.go ?\ngo build server.go \n./server.go:17: e.GET undefined (type echo.Echo has no field or method GET, but does have Get)\nI fixed GET -> Get and it builds, I run it and connect, throws the same error, you have to connect to get the error\n. Yes, that's correct :)\n. ",
    "loint": "@jelinden Where I can see \"NewFromConfig\" ? Currently can not run in the master branch :(\n. ",
    "nikounity": "We have a use case where a middleware sets some properties to echo.Context which in turn are read by middlewares later in the chain, and some of those properties are derived from path parameters and other information in the request. This particular case leads to a catch-22 situation with Echo v2 where path parameters cannot be used before next.Handle(c) is called but it's too late to use them after the call because the other middleware has already been executed at that point.\nWe can use group middleware and the raw request (c.Request().URL() etc.) to work around the issue. What we really need is just a clear understanding on what echo.Context members can be used and how during different stages of middleware execution.\n. ",
    "lyzhang1999": "mark as ResponseWriter. ",
    "CentaurWarchief": "If you send an empty response with Content-Type: application/x-gzip Google Chrome fails to decode it as well. I think that Content-Type: application/x-gzip should be only present if the response has body.\nWhat do you guys think?\n. @vishr \nI don't think that it fixes the problem at all. It keeps sending Content-Type: application/x-gzip when you don't have a body. Is this behavior expected? I mean, I don't think it produces a valid gzip response so the browsers complain about ERR_CONTENT_DECODING_FAILED.\n:cry: \n. Yep, you're right. Can I do that by using a middleware or I have to hijack the response someway else?\n. Yeah, @vishr.\n. Sure. I mean, perfect. Couldn't be better :).\n. Hey @vishr \u2014 thank you!\n/cc @txgruppi\n. I reported a similar issue here: #424.\n. ",
    "galeone": "By the way, I think that the responseAdapter type should be public. In a situation like this one, where I need a context value (and thus I can't use a standar.HandlerWrapper), I had to reimplement the responseAdapter type.\nIf this type was public, I could avoid to reimplement it\n. ",
    "aarondl": "I have the same issue. Basically in Go you eventually HAVE to use the basic http.Request or http.ResponseWriter for various bits (for an example setting a cookie which is impossible with echo's implementation if you're attempting to test).\nBut the test.Request and test.Response aren't creating standard.Request and standard.Response objects, so it's impossible to type assert your way to get the http.Request for both test cases and regular code.\nIt seems like it would be mostly okay to simply export the reset functions that are present on both standard.Request and standard.Response but I'm still looking into this as a temporary work around until this issue is resolved.\n. There's a few problems with this implementation yet.\n1. Context interface still has a method which returns an unexported *context type, until that's gone no one will ever be able to implement the interface. This should not be the case.\n2. MockResponse holds the httptest.ResponseWriter. Meaning I have to do type assertions in order to get it out. What would be preferable is a standard.MockResponse(http.ResponseWriter) so that we could control where that comes from and do assertions on the responses details.\n3. MockRequest follows the same suit as MockResponse in that I have no control over the actual http.Request instance. So in my case where I actually am forced to use *http.Request to deal with other libraries, I won't be able to set up the request properly for the test easily without some nasty type assertions.\n4. I also have no control over logging, we create a log.New() in there with no ability to turn it off. So my test output will be spammy even when I don't care for it.\n. This all looks more reasonable than before. echo.NewContext along with standard.NewRequest and standard.NewResponse after revision should make echo projects a lot more testable without having to route through echo to have a proper test.\nThis solves my immediate needs and I think this should unblock me for the meantime.\nI do want to mention that I am still concerned about the size of the Context interface. I realize it's for convenience that they are all in the same place but it's almost not even worth being an interface since the only thing that can possibly implement all of it currently is *context. With this change it's actually added more methods bringing it to a total of 45. I just want us to consider solutions to this, because Go makes the case for very small interfaces being the most powerful and useful. My code is still not ideal, and could be reworked or improved upon so I'm not calling to merge that. It's sort of an example of what we COULD do. Although a real implementation would probably be a lot more aggressive in dissolving the context object down to it's routing bits as well so that context was just a collection of functionality implemented by other things (that were exported).\n. @vishr If we're talking about simplicity. One of the biggest warts that echov2 has is the ridiculously big Context interface.\nI'd like to make a case for simple interfaces and composition. In PR #470, I show how this interface could be greatly reduced in complexity by isolating it's pieces. However in this PR I was trying to be mostly API compatible and so it stayed an interface.\nhttps://github.com/aarondl/ultimateq/blob/master/irc/writer.go#L103\nThis is a good example of what I would do with this to make it simpler. io.Writer is the only thing that provides any functionality that would ever change in this example. Context is the same as this, it needs various \"pieces\" like a http.ResponseWriter, and a net.Context etc. Of course you can keep the interface AND implement it like this, as you can see in my example I also have an interface describing the massive implementation:\nhttps://github.com/aarondl/ultimateq/blob/master/irc/writer.go#L39\nI'm not hell-bent on one approach or the next, it just seems like a good time to clean up one of the messiest parts of the library and I wanted to provide an example of how it may be done :)\n. @vishr It's just about cleaner code. Current implementation goes against everything interfaces should be, small and composed. If people are somehow happy with the way the Context is implemented I'll be quiet. I just wanted to note that v3 is a refactoring opportunity for something I find unpleasant about echo, we could change it to be more idiomatic and cleanly separated. I'll leave it at that :)\n. ",
    "NateLing": "@vishr The problem still exists. this is my project, you can run it \nbat\ncd  Lim\nget.cmd\ncd /bin\nbuild.cmd\n. ",
    "LuisUrrutia": "+1\n. ",
    "chrislewispac": "i get the following err with this\ne.SetBinder undefined (type echo.Echo has no field or method SetBinder). For my purposes I changed my struct tag to time.Time and then made sure I was sending null instead of an empty string from the client.\nI'm not sure this is something echo should actually handle but it might be a quick fix that will help someone in the future.\ntype Thing struct {\n    UpdatedAt *time.Time `json:\"updated_at\"`\n}\nthen just make sure your client is sending null, not an empty string. ",
    "appleboy": "Hi @vishr \nI create the gofight project for API testing. I want to testing all golang route framework using standard http.Request and http.ResponseWriter.\n``` go\nfunc TestEchoHelloWorld(t *testing.T) {\n  r := mocha.New()\nr.GET(\"/\").\n    SetDebug(true).\n    RunEcho(EchoEngine(), func(r gofight.EchoHttpResponse, rq gofight.EchoHttpRequest) {\n      assert.Equal(t, \"Hello World\", r.Body.String())\n      assert.Equal(t, http.StatusOK, r.Status())\n    })\n}\n```\nI need integrate RunEcho func with Run func\nThanks for your reply quickly.\n. @vishr \nI want uniform Interface for request and response. If I want to test response status code, you must call r.status() not r.Code in echo framework.\n. Update gofight to v2.0.0.\n. ",
    "optimality": "Actually this doesn't quite work, and I'm not familiar enough with echo to solve this correctly.  I'll file an issue instead.\n. Sorry, it's been awhile since I looked at this, but I think the scenario was: I have two servers.  One returns some regular response.  The second is a reverse proxy that forwards queries on to the first server.  The reverse proxy uses echo's gzip middleware.\nThe problem is that the response the reverse proxy gets has a Content-Length header set.  Then the middleware zips the body, but it doesn't change the Content-Length header.  So the recipient is told to expect X bytes, but instead gets Y bytes (where Y is less than X), and throws an error.\nThe fix normally is to remove the Content-Length header in the gzip middleware.  Gorilla's compress middleware, for example, does this right here.  I tried to figure out how to do it in echo here, but I couldn't get it to work with all the weird interfaces, so I gave up.\nDo you need me to put together example code, or is the above description sufficient?\n. Note that this comes up particularly when trying to use a reverse proxy.\n. ",
    "Romanowiczmarek": "Hi, could you provide more information on why this doesn't work? Do you have code which does not work with this change?\n. ",
    "steveoc64": "Tested, all works 100%   Thanks a million, great work.\n:+1:  V2 is looking good\n. Another followup .... more good news\nI have another port of this application that uses echo v1, which really hammers the use of websockets. This app uses modified Go RPC calls over a socket connection between the front end (web browser) and the backend.  \nThe frontend is also written in Go, and compiles to JS using GopherJS.  Bit complicated, but I figured if anything is going to break, then this app will.  This app is functionally equivalent to the other app, but its written in pure Go, and uses sockets rather than HTTP requests.\nLong story short ... after a few minor changes to the code, both front and back compile with v2, all loads up and runs, no probs, and passes internal test.  V2 is working well.  \nIt actually appears to run a little bit faster than the v1 code ?  Not sure, but its certainly super quick, with sub-millisecond response times for complex page builds.  Comms throughput is generally 4-8x faster than the same app that uses HTTP.  Happy with that.\nCan mark #447 as closed whenever you want.\n. cant try it now from this machine ... will try that tomorrow and report back\n. Same issue, I have an app that uses gzip in echo, and it also happens to serve up fontawesome.css from  local assets.  Runs fine, no probs.  Deployment is on FreeBSD 11, go 1.7.1, with nginx (minus gzip) sitting on top.\nJust today, fired up a new FreeBSD server and installed + built the app on that. Went through \"go get -u\" on all tools, so that would have pulled in the latest echo as of today.\nGetting the same error as @Puffton , on fontawesome.css, and a handful of large image assets. Other large image assets in the same app are fine though ??? odd.\nCan work around it (for now) by turning off gzip in the echo portion of the app, and turning gzip on in the nginx layer that sits above it.  That works at least.\nBoth of the code bases (working server vs today's installation) use the same go1.7.1 tarball for FreeBSDl, so Im guessing that they are using identical go compress/gzip libs.  \nIn the meantime, will try and see whats causing the problem inside echo, o. My production server that is working fine, has this release of echo : \n```\ncommit 0e7a9c1d497b84d79fca0d201638f393942e44a4\nAuthor: Vishal Rana vr@labstack.com\nDate:   Sat Dec 10 08:38:27 2016 -0800\nexposed default binder, tag for binding query params\n\nSigned-off-by: Vishal Rana <vr@labstack.com>\n\n```\nLooks like @vishr  has been super busy since then.. All the images that are not working for me are .PNG of different sizes. Nothing always huge - 60k here, 3k there.\nI have other larger jpegs in the same stream that work fine.   . ",
    "EwanValentine": "Can you do... e.Get(\"/ws\", fasthttp.WrapHandler(websocket.Handler(webSocket)))? (fasthttp). \n. When I attempt to do... \nfunc wsHandler(c *echo.Context) (err error) {\n    ws := c.Socket()\n    db := c.Get(\"db\").(*mgo.Database)\n}\nI get c.Socket undefined (type echo.Context has no field or method Socket) has this been removed? If so what's the new way? \n. ",
    "Pomyk": "Thanks!\n. Why not io.Reader in Blob()?\n. ",
    "Gabriel-Araujo": "I thought of a suggestion to help...\nI made one just like sound waves reverberating. An echo.\nIn black and white, because if you like this logo, then we can choose colors\nFollow the link below:\nhttp://imgur.com/a/5DkAE\nhttp://imgur.com/KgjnBMX\nhttp://imgur.com/Ah7qui9\nhttp://imgur.com/k1i7Kks\nhttp://imgur.com/FWYUJ1Q\nIf cool, we can make the last adjustments ...\nelse, we can change ...\nthink of circular waves perhaps ...\n. Excellent, very good this new logo...\nNo problem. Yes of course I can still help within my capabilities.\n. ",
    "bmhatfield": "Splitting the groups, like so, works:\n```\nfunc main() {\n    e := echo.New()\n// Log all requests.\ne.Use(middleware.Logger())\n\n// Add the Github Callback route for clients with OAuth\ne.Get(\"/auth/github/callback\", apiauth.GithubOauthCallback)\n\n// Add a Group of requests that are secured with the GithubOauthMiddleware.\n// All requests must either have a valid signed session cookie, or are\n// able to create one by going through the OAuth flow.\nauthenticated := e.Group(\"/*\", apiauth.GithubOauthMiddleware)\n\n// Add the static assets handler. Anything that falls through to the\n// `assets` function is a 404.\nauthenticated.Get(\"/\", assets, middleware.Static(\"assets\"))\n\n// Add the Riemann query handler.\nauthenticated.Put(\"/query\", staticQuery)\n\n// Live Query\nauthenticatedWebsocket := e.Group(\"/query/live\", apiauth.GithubOauthMiddleware)\nauthenticatedWebsocket.Get(\"/\", standard.WrapHandler(websocket.Handler(liveQuery)))\n\n// Actually run the API.\ne.Run(standard.New(\":8080\"))\n\n}\n```\nWhy is this so? What is a Group doing here? This doesn't feel intuitive.\n. Hrm. I couldn't figure out a way to bind a group to the root path without this. If I just do / instead of /* (assuming the * is what you're saying isn't right), the authenticated.Get(\"/\", assets, middleware.Static(\"assets\")) stops working - everything becomes a 404.\nAdditionally, I've bound a few handlers to this path (as you can see) and they are all working as I would expect except for the Websockets one.\nMy goal was to apply a middleware to a group of routes, which include the / path, but not all routes in the application. What would your recommendation be?\n. I want something vaguely like this:\nroot: logger\n    group1: logger (inherited), authentication\nIn that setup, any routes that don't need authentication could just attach to the root.\n. That would require all of my authenticated paths to be prefixed with something (in your example, /group), right?\nI want all of my routes (including /) to be authenticated, except for routes that cannot be (ie; /login)\n. Thanks for all your help so far.\nI'm still a little confused - it feels like the question of why having a websocket handler as part of a group makes that entire group not work is still open?\n. So, I've been working on trying to follow your advice by dropping the * from the Group's path.\nOne thing that I am really struggling with is why the asset middleware never is called in this setup:\n```\n       authenticated := e.Group(\"\", apiauth.GithubOauthMiddleware)\n// Add an asset handler for authenticated assets\nfmt.Println(\"Adding Asset Middleware\")\nauthenticated.Use(middleware.Static(\"assets\"))\n\n// Add the Riemann query handler.\nauthenticated.Put(\"/query\", staticQuery)\n\n```\nI've added debug logging up and down the chain and with /* things are called properly, and with \"\" or \"/\" the middleware is never called.\n. Whoa. That's amazing. Thank you for doing such an in-depth change here!\nI'll try this out locally soon :-)\n. ",
    "billyh": "Still looks inaccurate.  file.Filename and dst appear to be used but not set.\n. ",
    "qianguozheng": "@panjunjie  I encounter this problem too.\nBut what I am confused, is how to call the desired template ?\nif write like below, server will return 500 Internal error.\nfunc (pageCtx *PageCtx) HomePage(c echo.Context) error {\n    return c.Render(http.StatusOK, \"templates/home/home.html\",\"FuckYou\")\n}\n. @vishr  could we make it support adding middleware to make it support any media type user want to use ?. Thanks, I would like to learn how to use customer binder.. ",
    "zjx20": "My bad, sorry. I would like to redirect stdout to a file, e.g. go run server.go > log.txt, instead of setting a file object into  LoggerConfig.Output. But I didn't realize that !isatty.IsTerminal(w.Fd()) could deal with this case as well.\n. It is easy to reproduce when using ab tool.\nI will show you step by step.\n```\npackage main\nimport (\n    \"net/http\"\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/engine/standard\"\n    \"github.com/labstack/echo/middleware\"\n)\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.Logger())\n    e.Use(middleware.Recover())\n    e.GET(\"/\", func(c echo.Context) error {\n        return c.String(http.StatusOK, \"Hello, World!\")\n    })\n    e.Run(standard.New(\":1323\"))\n}\n```\nCompile the snippet above, run it with command: ./main > log.txt\nNow, run ab in other terminal session: ab -k -n 10000 -c 10 http://127.0.0.1:1323/\nWait for the completion of ab, shutdown the web program, you will the mess in log.txt.\n. ",
    "ww24": "Thanks. But, this behavior is unintelligible.\nI want to use different params for code readability.\n. ",
    "chenjie4255": "+1, having a same problem :(\n. ",
    "alfg": "Same issue here. It would be great for the scenario below:\ne.Get(\"/users/:id\", handlers.GetUserByID)\ne.Get(\"/users/:name\", handlers.GetUserByName)\ne.Put(\"/users/:id\", handlers.UpdateUserByID)\nIn this case, c.Param(\"name\") doesn't work for the 2nd route above. I will use Context.P(0) for now, though.\n. ",
    "haoxins": "cc @vishr \n. ping @vishr \n. cc @vishr\n. ",
    "corvinusy": "Thanks for fixing.\n. ",
    "Taik": "Sorry I don't have time to send a PR, but according to https://tools.ietf.org/html/rfc7230#section-3.3.1:\nA server MUST NOT send a Transfer-Encoding header field in any\n   response with a status code of 1xx (Informational) or 204 (No\n   Content).  A server MUST NOT send a Transfer-Encoding header field in\n   any 2xx (Successful) response to a CONNECT request (Section 4.3.6 of\n   [RFC7231]).\nSo I think the easiest case is to just follow what @mtojek suggested.\n. ",
    "ramesh-dev": "Thanks for your help! \ni tried to get the http.Request and create an appengineContext like below,\ngo\nfunc appengineContext(c echo.Context) appengine.Context {\n   request := c.Request().(*standard.Request).Request\n    ac := appengine.NewContext(request)\n    return ac\n}\nbut i get following error, \nappengine: NewContext passed an unknown http.Request\n. still the same errror appengine: NewContext passed an unknown http.Request\n. looks like the normal handler function is also throwing the same error, will try to debug the issue and update here, thanks.\n. Hi @vishr,\nIt looks like i have been using the older version of imports for appengine packages, when i re imported with the latest appengine package google.golang.org/appengine, it started work both normally and with framework as well. \nThanks for your time and response!\n. Sure, thanks for pointing it out !\n. ",
    "nigeon": "I'm currently having this issue and no idea how to fix it.\nTrying to:\nc := e.AcquireContext()\n    request := c.Request()\n    ctx := appengine.NewContext(request)\nbigquery.NewClient(ctx,................\nBut getting this error too: appengine: NewContext passed an unknown http.Request\nI also tried using (with no luck) new(http.Request)\nCan anyone help me?\nEDIT\nI'll reply myself as reference to anyone having problems with context.\nMy main problem was that I was initializing the Bigquery client in an init() function, and as commented in http://stackoverflow.com/questions/36184701/initializing-go-appengine-app-with-cloud-datastore .\n\nYou can't use AppEngine services that require a Context outside of handlers (because the creation of a Context requires an *http.Request value). This by nature means you can't use them in package init() functions either.\n\nMy scenario is an App Engine Application built using http://manuel.kiessling.net/2012/09/28/applying-the-clean-architecture-to-go-applications/ approach. \nBasically what I ended up with a nasty but working solution:\n```\nfunc init() {\n    e.Use(initDbHandlers())\ne.GET(\"/whatever\", func(c echo.Context) error {\n    archive := new(webservice.ArchiveHandler)\n    archive.ArchiveInteractor.ArchiveRepository = repository.NewDbArchiveRepository(handlers)\n    return archive.Index(c)\n})\n\n}\nfunc initDbHandlers() echo.MiddlewareFunc {\n    return func(next echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) (err error) {\n            ctx := appengine.NewContext(c.Request())\n            WD, _ := os.Getwd()\n            dbHandler, _ = infrastructure.NewBigqueryHandler(ctx, \"project\", WD+\"/config/secret/the_secret_file.json\")\n            handlers[\"NewDbArchiveRepository\"] = dbHandler\n            handlers[\"DbAnotherRepository\"] = dbHandler\n        return next(c)\n    }\n}\n\n}\n```. ",
    "eriklott": "Thanks. Kudos on the framework by the way. Nice and clean.\n. > Does echo have a built in mechanism to pass external services to handlers besides using the context object, or global vars?\nSorry, I meant the net.context object, not the echo.context. \nPassing a service via net.contextobject is an option, but architecturally speaking, it wouldn't be my first choice for something like this. As a rule, we like to reserve the net.context object for object instances that truly live within the request cycle (current users, request id, etc), rather than using it as a dump-all transport bucket for all things - that's really not it's purpose.\nMuch like you've provided direct access to the echo.renderer from the echo.context for yourselves, it would be nice to provide the same functionality to us users... because we need access to our application services too :)\nMaybe something like this:\n```\ne := echo.New()\ne.Register(\"myservice\", serv)\ntheserv, err := e.GetService(\"myservice\")\n// access in a handler\nfunc(c echo.Context) error {\n    theserv, err := c.GetService(\"myservice\")\n}\n```\nThis is just a quick example (I'm not sold on this naming), but I'm sure you get the point.\nThoughts?\n. I'm not sure if I follow. Do you mean creating handler structs something like this?\n```\ntype handlers struct {\n   serv1 SomeService\n   serv2 AnotherService\n}\nfunc (h handlers) showResources(c echo.Context) error {\n    // do some action\n}\nfunc (h handlers) createResource(c echo.Context) error {\n    // do some action\n}\nfunc main(){\n   serv1 := SomeService.New()\n   serv2 := AnotherService.New()\n   myhandlers := handlers{serv1, serv2}\ne := echo.New()\n   e.GET(\"/resources\", myhandlers.showResources)\n   e.POST(\"/resources\", myhandlers.createResource)\n}\n```\n. Looking at the alternatives, maybe that's what we're left with - a handler factory struct. Isn't Go lovely?\n. ",
    "tors": "@vishr hey man, thanks for the hardwork!\n. ",
    "dimiro1": "I will take a look. Thanks.\n. @haoxins this library only works for echo v1. But thanks for mention this library.\n```\ngithub.com/echo-contrib/sessions\n../../../echo-contrib/sessions/sessions.go:61: cannot use func literal (type func(echo.Context) error) as type echo.HandlerFunc in return argument\n../../../echo-contrib/sessions/sessions.go:62: c.Request undefined (type echo.Context is pointer to interface, not interface)\n../../../echo-contrib/sessions/sessions.go:62: c.Response undefined (type echo.Context is pointer to interface, not interface)\n../../../echo-contrib/sessions/sessions.go:63: c.Set undefined (type echo.Context is pointer to interface, not interface)\n../../../echo-contrib/sessions/sessions.go:64: c.Request undefined (type echo.Context is pointer to interface, not interface)\n../../../echo-contrib/sessions/sessions.go:148: c.Get undefined (type echo.Context is pointer to interface, not interface)\n```\n. ",
    "coderhaoxin": "https://github.com/echo-contrib/sessions\n. ",
    "painhardcore": "@peppage what about  \"Wrap echo with a context.ClearHandler\" \n echo.Echo does not implement http.Handler (wrong type for ServeHTTP method)\n                have ServeHTTP(engine.Request, engine.Response)\n                want ServeHTTP(http.ResponseWriter, http.Request)\n. closed. v3 without fasthttp. @vishr whats wrong with\necho: http: TLS handshake error from 172.16.113.222:52573: acme: identifier authorization failed\necho: http: TLS handshake error from 172.16.113.222:52642: acme/autocert: missing certificate\necho: http: TLS handshake error from 172.16.113.222:52647: acme/autocert: missing certificate\nI used the example on https://echo.labstack.com/cookbook/auto-tls\ndomain maps on public IP.. ",
    "lon9": "@painhardcore It works with normal Run method of Echo for me.\n. ",
    "codepushr": "https://github.com/echo-contrib/sessions is already clearing the handler on line 70 of sessions.go and therefore stable! It's also migrated to v3.. Me too, but the conversion is inaccurate. Take this example:\nCreating the token:\nclaims[\"exp\"] = time.Now().Add(time.Second * 10).Unix() // 10 seconds\nAccessing the token:\nclaims := user.Claims.(jwt.MapClaims)\nlog.Println(int64(claims[\"exp\"].(float64)))\nlog.Println(time.Now().Unix())\nThe output after about 2 seconds: (as you can see the int64 parsed exp is way to high)\n2016/07/13 11:26:54 1468580444\n2016/07/13 11:26:54 1468402014\nEdit:\nIt seems the JWT library is already validating the \"exp\" claim internally but it doesn't work for me.\n. Interesting, now that I was going to submit a PR it started working all of a sudden. \n@hexadecy There's no need to validate exp by hand, the jwt package is doing this automatically.\nI will close this for now, in case anyone needs to customize the Parser, I go a PR.\n. Interesting, I'm experiencing the same issue after migrating from v2 to v3. Might also be some new dependencies that crash my website but this issue sounds reasonable!\nEDIT: It was my own session middleware that blocked the assets. So it has nothing to do with this issue.. ",
    "asdine": "The thing is it is not embedded here, it is a field in the echoContext type that is the actual type passed to each request.\nThe problem that is see is that we have two stores: echoContext.store which is a map[string]interface{} and the echoContext.context which is a context.Context. Both have the same purpose, one is custom (which is fine) and the other is about to be standard and is made to be interoperable with other libraries.\nI think what would be nice is the following behaviour:\n``` go\nc.Set(\"a\", \"b\")\nfunc (ctx context.Context) {\n  fmt.Println(ctx.Value(\"a\").(string))\n  // \"b\"\n}(c)\nfmt.Println(c.Get(\"a\") == c.Value(\"a\"))\n// true\n```\nSetwould update the internal embedded context.Context. and Getwould call context.Value, no need  to use the map[string]interface{} internally.\necho.Contextwould be a context.Context with superpowers \n. The idea is not to change the signature of echo.Context#Get and echo.Context#Set, the current signatures of these functions are great.\nWhat i propose is to change what is inside of echo.echoContext:\n- echo.echoContext#context: embed context.Context instead of having a field\n- echo.echoContext#Set: change the body with something like this:\ngo\nc.context = context.WithValue(c.context, key, val)\n- echo.echoContext#Get: change the body with something like this:\ngo\nreturn c.context.Value(key)\n. With this, if we pass echo.Context to a function that needs a context.Context it will work\n``` go\npackage service\nconst Key = \"myService\"\n...\nfunc FromContext(ctx context.Context) Service {\n  return ctx.Value(key).(Service)\n}\nfunc ToContext(ctx context.Context, s *Service) context.Context {\n  return context.WithValue(ctx, key, s)\n}\npackage main\n...\nfunc myEndpoint(c echo.Context) error {\n  // we can set values as the usual\n  c.Set(\"a\", \"b\")\n  c.Set(\"c\", 100.0)\n// we can also set via the context\n  c.SetContext(c.WithValue(ctx, \"d\", 150))\n  c.SetContext(service.ToContext(c, service.New()))\n// we can get values as the usual\n  a := c.Get(\"a\").(string)\n  a = c.Value(\"a\").(string)\n  b := c.Get(\"c\").(float64)\n  d := c.Get(\"d\").(int)\n  d = c.Value(\"d\")\n  srvc := c.Get(service.Key).(*service.Service)\n  srvc = service.FromContext(c)\n  ...\n}\n```\nEDIT: better example\n. For the users, echo.Context#Get and echo.Context#Set don't change. They work the same as before.\nThe difference is that now it uses context.Context internally and the values stored in the context are available when using echo.Context as a context.Context.\n. I can make a PR this week if you want\n. It's perfect\n. Example:\n``` go\nfunc Create(c echo.Context) error {\n  service := myService.FromContext(c)\n  item, err := service.Create()\n  if err != nil {\n    return err\n  }\nreturn c.JSON(http.StatusOK, item)\n}\n```\nHere is the test:\n``` go\nfunc TestCreate(t *testing.T) {\n  service := myService.Mock{}\n  ctx := echo.NewMockContext()\n  myService.ToContext(ctx, service)\nerr := Create(ctx)\n  if err != nil {\n    t.Errorf(\"Error blabla\")\n  }\n...\n  ...\n}\n``\n. Oups, didn't see theNewContextmethod sorry.\nThis is great\n. It works, but can you provide a fix on the v1 branch please? We (and probably others) are still stuck on v1 for now and we can't cherry pick your fix to apply it on v1 because the routing is different\n. @vishr the problem is the same with a non empty group\n. I'm using Glide actually, the problem doesn't come from Echo but from etcd, it's forcing an old version of thegolang.org/x/crypto`.\nI'm closing this issue, thank you for your time :+1: \n. ",
    "arodland": "Pretty sure this breaks code that calls Get without previously calling Set or otherwise setting a context, as c.Context may be nil at that point, resulting in a panic. Before, Get would just return a nil interface. This is a problem in code that doesn't explicitly use contexts, maybe calls Set, and then calls Get later to retrieve a value that might or might not be there.\n. ",
    "upamune": "You should call next(c) in myGroupHandler.\nlike this\ngo\nfunc myGroupHandler(next echo.HandlerFunc) echo.HandlerFunc {\n    return func(c echo.Context) error {    \n                ...\n        return next(c)\n    }\n}\n. ",
    "bdesemb": "These are my modifications. Build is working but I don't know if I broke something or not.\ngommon.diff\necho.diff\n. I have this error now.\n```\ngithub.com/labstack/echo/middleware\n../../labstack/echo/middleware/body_limit.go:49: cannot use limit (type int64) as type int in assignment\n```\nThat's why I also modified echo. (echo/middlewate/body_limit.go). \n. It's working perfectly. Thank you.\n. ",
    "abador": "If I understand right you want to do this:\nisInternetExplorer9(context.Request().Header().(*standard.Header))\nYou were trying to convert the engine.Request into the standard.Header\n. ",
    "vuduo": "Thats it. Thanks alot\n. Got it. There was a problem with the imported \"mime\" package. After I removed the mime parts and added them again everything worked as expected. Strange thing.\nThx\n. ",
    "tonymtz": "In that guide they set url params(the ones your define in your route: /users/:id). My issue is with queryparams (users/1?code=xyz).\n. I finally found a solution:\ngo\nnewUrl, _ := url.Parse(\"?code=my_code\") // this also works for a complete well formed url\nreq.URL = newUrl\nOtherwise, and for some reason, the query field never get the value.\n. Reinstall the package fixed this. Not sure why. ",
    "johndeng": "Did you using a Nginx proxy or another proxy?\n. @VICTOR-LUO-F Any progress?. ",
    "weisd": "@vishr \ni use middleware to get the flash message, if the message not null , send to the render data \n```\nfunc Sessioner() echo.MiddlewareFunc {\n    return func(next echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            if GlobalSessions == nil {\n            return errors.New(\"session manager not found, use session middleware but not init ?\")\n        }\n\n        fmt.Println(\"session start\")\n        sess, err := GlobalSessions.SessionStart(c.Response(), c.Request())\n        if err != nil {\n            return err\n        }\n\n        flashVals := url.Values{}\n\n        flashIf := sess.Get(SESSION_FLASH_KEY)\n        if flashIf != nil {\n            vals, _ := url.QueryUnescape(flashIf.(string))\n            flashVals, _ = url.ParseQuery(vals)\n            if len(flashVals) > 0 {\n                flash := Flash{}\n                flash.ErrorMsg = flashVals.Get(\"error\")\n                flash.WarningMsg = flashVals.Get(\"warning\")\n                flash.InfoMsg = flashVals.Get(\"info\")\n                flash.SuccessMsg = flashVals.Get(\"success\")\n                c.SetData(\"FLASH\", flash)  //   add render data here !\n            }\n        }\n\n        f := NewFlash()\n\n        sess.Set(SESSION_FLASH_KEY, f)\n\n        c.Set(CONTEXT_SESSION_KEY, sess)\n\n        defer func() {\n            sess.Set(SESSION_FLASH_KEY, url.QueryEscape(f.Encode()))\n            sess.SessionRelease(c.Response())\n        }()\n\n        return next(c)\n    }\n}\n\n}\n```\nand then I can use In the template\ntest.html\n{{FLASH.ErrorMsg}}\nNo need to get and render In handler\n. ``\n// FormParams implementsengine.Request#FormParams` function.\nfunc (r *Request) FormParams() (params map[string][]string) {\n    params = make(map[string][]string)\n    mf, err := r.RequestCtx.MultipartForm()\nif err == fasthttp.ErrNoMultipartForm {\n    r.PostArgs().VisitAll(func(k, v []byte) {\n        // TODO: Filling with only first value\n        // params[string(k)] = []string{string(v)}\n\n        if _, has := params[string(k)]; has {\n            params[string(k)] = append(params[string(k)], string(v))\n\n        } else {\n            params[string(k)] = []string{string(v)}\n        }\n    })\n} else if err == nil {\n    for k, v := range mf.Value {\n        if len(v) > 0 {\n            params[k] = v\n        }\n    }\n}\n\nreturn\n\n}\n```\ni modify the code like this  and it works well \n. \u4e0d\u662f\u6709\u4e2aNotFoundHandler\u5417\uff1f\u8def\u7531\u627e\u4e0d\u5230\u4f1a\u8fd4\u56deErrNotFound\uff0c \u53ef\u4ee5\u8bbe\u7f6eecho.HTTPErrorHandler \u5728\u8fd9\u5904\u7406\u6240\u6709\u9519\u8bef. +1. ",
    "jrasanen": "@vishr my use case for global data would be storing CDN url, so it'd be available for all templates\n. Yup, those :)\n. ",
    "yaa110": "Thank you @vishr, I used the following code:\ngo\ne := echo.New()\ne.GetContext().Set(\"app\", application.App)\ne.GET(\"/\", controller.IndexGet)\nbut I got nil when I used c.Get(\"app\") in IndexGet.\n. Finally, it was solved using middlewares:\n``` go\nfunc main() {\n    application.App.Build(\"path/to/config.json\")\ne := echo.New()\n\ne.Use(bindApp())\n\ne.GET(\"/\", controller.IndexGet)\ne.Run(fasthttp.New(s.HttpAddress))\n\n}\nfunc bindApp() echo.MiddlewareFunc {\n    return func(next echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            c.Set(\"app\", application.App)\n            return next(c)\n        }\n    }\n}\n``\n. The logs are only limited to 4xx and 5xx errors, BUT before updating no logs were caught.\nNow, how could I disable all logs?\n. Thank you @vishr \nBy the way, it should be noted thatglogisimport glog \"github.com/labstack/gommon/log\". @Puffton  Yes, it seems they have changed the code to escape the parameters.\nPlease check [commit: c00d017](https://github.com/labstack/echo/commit/c00d017178d23261895b096b6e39e9b6bbca37dc) (@vishr committed 11days ago)\nThis change makes sense because  prevents unintended consequences.\n. The problem was solved usingdecodeURIComponent(getCookie(\"csrf\"));. Thank you @vishr, but it makes it difficult and a little buggy to pass cookies via response header. As you knowDjango` does not use HttpOnly for the csrf token. What bug was fixed using the change?\n. Thanks for the link, there is one problem with passing token via response header. Attackers could read the token from response header rather than the cookies. So, I think it is not a good idea to make the cookie HttpOnly as Django did not do the same because it does not address the security issue for sites using AJAX. \nIsn't it better to let users change HttpOnly via CSRFConfig?\n. @vishr, I tried to get the token using c.Get(\"csrf\").(string) to pass it via view, but its value is different than the token saved in the cookie?\nThe problem is the token is changed on every Get request including STATIC file request.\n. ``` go\ntype Page struct {\n    CsrfToken string\n}\ne.Static(\"/\", \"public\")\ne.GET(\"/test\", controller.TestGet)\nfunc TestGet(c echo.Context) error {\n        view := &Page{\n                CsrfToken: c.Get(\"csrf\").(string),\n        }\n    // the `test` template includes static images, css, etc.\n    return c.Render(http.StatusOK, \"test\", view)\n\n}\n```\nI also tried the following code:\n``` go\nfunc TestGet(c echo.Context) error {\n        view := &Page{\n                CsrfToken: getCsrfToken(c),\n        }\n    // the `test` template includes static images, css, etc.\n    return c.Render(http.StatusOK, \"test\", view)\n\n}\nfunc getCsrfToken(c echo.Context) string {\n    csrfToken, err := (c).Cookie(\"csrfToken\")\nif err == nil {\n    return csrfToken.Value()\n}\n\nreturn \"\"\n\n}\n``\n. @vishr, your example should work without any problem because it does not contain any static request (such as CSS and image files). GET request of each STATIC file is the culprit. Because the token is changed after each request for static files. In the handler function of router,c.Get(\"csrf\").(string)returns the current token, but after loading the page, the token (cookie) is changed for each static file request.\n. Isn't it better to disable HttpOnly and save and validate generated cookies via simple and fast NoSQL databases like [Tiedot](https://github.com/HouzuoGuo/tiedot) or [LedisDB](https://github.com/siddontang/ledisdb). This approach helps users access cookies via Javascript and also addresses the security issue.\n. A workaround to the [issue of STATIC files](https://github.com/labstack/echo/issues/600#issuecomment-233121925) is to excludePathof root directory of static files in [csrf.go](https://github.com/labstack/echo/blob/master/middleware/csrf.go#L124) provided byCSRFConfig`. \nFor example in csrf.go:\n1- Add ExcludedPaths to CSRFConfig struct:\ngo\ntype CSRFConfig struct {\n    // ...\n    ExcludedPaths []string\n}\n2- Check if the request path is excluded:\n``` go\nfunc CSRFWithConfig(config CSRFConfig) echo.MiddlewareFunc {\n    // ...\n    return func(next echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            // ...\n            case echo.GET, echo.HEAD, echo.OPTIONS, echo.TRACE:\n                if isPathExcluded(c.Path(), config.ExcludedPaths) {\n                    return next(c)\n                }\n            // ...\n        }\n    }\n}\nfunc isPathExcluded(path string, excludedPaths []string) bool {\n    for _, p := range excludedPaths {\n        if p == path {\n            return true\n        }\n    }\n    return false\n}\n```\nthen users can exclude their static root directory:\n``` go\nfunc main() {\n    e.Static(\"/\", \"public\")\ncsrfConfig := middleware.CSRFConfig{\n    ExcludedPaths: []string{\n        \"/*\",     // The asterisk symbol is important\n    },\n    // ...\n}\n\ne.Use(middleware.CSRFWithConfig(csrfConfig))\n\n}\n``\n. Thank you @vishr, it works, but what if the cookie is expired between the request of main page and one of its static file (I know it is very rare but it is possible)?\n. @vishr, please consider the following scenario:\n1- User requests the \"/login\" at time A\n2- The handler function renders its template and passes the current token via view usingc.Get(\"csrf\").(string)` at time B\n3- The cookie (or token) expires (at time B + epsilon)\n4- The rendered view contains STATIC files such as CSS files, so it sends GET requests at time C\n5- Since the cookie (or token) has expired at time B + epsilon, a new cookie is generated which I can't access it in the pre-rendered view\n6- The login form has a hidden input for csrf token with the value passed in step 2\n7- However, the token has changed after a static request in step 5\n8- The submission of form will be failed.\nThere should be an approach to exclude static files GET requests from token generation, as I  previously suggested.\n. > I think if you are using static middleware on top, it will never reach csrf.\nNo, I've used static router on top and it changed csrf.\nI checked Gorilla/CSRF:\n- HttpOnly is optional\n- Renews token if only it was expired\n- It Enforce an origin check (referer) for HTTPS connections\n- It sets the Vary: Cookie header to protect clients from caching the response.\n. I checked Django implementation of csrf and I'll open a new Pull Request based on that.\n. it sets the CSRF cookie even if it's already set, so they renew  the expiry timer (i.e. it does not change the token but renews the timer for every request)\n. No, token expires when users leave the site (send no requests) for a long time (longer than the expiration time).\nThe final implementation should be as the following:\n- For safe requests (GET, HEAD, etc.) renew the token only if there is no valid token in the cookie.\n- For each unsafe request (POST, DELETE, etc.) renew the token.\n- For all requests (if there is a valid token) renew the timer of the token (not the token itself).\n. Off course, I do.\n. Dear @vishr, I also opened a new pull request  #602 at which the CSRF was implemented based on Django implementation.\n. Thank you @vishr for the fix and sorry for the late reply. Just a few more things to go:\n- the token should (must) be regenerated after successful unsafe requests such as POST (after line#136).\n- it is not a good idea to pass error messages to the client in production mode (line#135).\n- it is better (more performant) to move csrfTokenFromHeader to the default case of switch, because when users used form or query for TokenLookup there is no need to extract token from the header (line#104-110):\ngo\nvar extractor csrfTokenExtractor\nswitch parts[0] {\ncase \"form\":\n    extractor = csrfTokenFromForm(parts[1])\ncase \"query\":\n    extractor = csrfTokenFromQuery(parts[1])\ndefault:\n    extractor = csrfTokenFromHeader(parts[1])\n}\n. > I am interested in knowing the reason. I did not see that in other implementation including django.\nI checked Django again, they regenerate the csrf token only after login, so we need a public method to reset csrf manually.\n\nIt is not an actual function call but just a return of internal function (closure)\n\nI know it, but it is not necessary, is it?\n. > so we need a public method to reset csrf manually.\nWe do not need it, we could delete the current token after login.\n. > The current implementation has improved a lot. Do we really need it now?\nNo we don't, the current implementation is good and safe, Thank you.\n. ",
    "briemarie": "I second this. I'm working with multiple subdirectories, plus a single template in the top level directory:\ntemplates\n  -- email\n    --- preview.tmpl\n  -- links\n    --- created.tmpl\n    --- edit.tmpl\n    --- index.tmpl\n  layout.tmpl\n. Great thanks!\n. No, I did not see this before, but that will definitely work. Thanks!\n. ",
    "Nazariglez": "Hi guys, someone of you know already how to use nested templates with echo? //cc @briemarie @rand99 \nThanks!. Sorry guys, I didn't saw this https://gist.github.com/rand99/808e6e9702c00ce64803d94abff65678.\nThanks @rand99  . ",
    "TianDaGe": "Hello,\nSo did this issue solve in the past? I get this issue right now and am trying to solve this for few days.\nbut I didn't. How can I do?\nI have just do by using https://github.com/sebdeckers/express-history-api-fallback\nBut I want to listen and serve by using echo framework in golang. please support me asap.. \nI pressed Ctrl+C for a long time. currently echo framework is not exited immediately.\n. e := echo.New()\ne.Use(middleware.Recover())\ne.Use(middleware.CORS())\ne.ShutdownTimeout = 3 * time.Second\nI set shutdowntimeout like this, but it is not working...what am i wrong?\n. sir, i couldn't try graceful directly.\ncan you write down simple source to run graceful?\nI am using websocket too.\ne := echo.New()\n... ...\ne.GET(\"/ws\", ws.HandleWebsocket)\n// Start server\nif err := e.Start(\":\" + config.Port); err != nil {\n     e.Logger.Fatal(err)\n}\nHow can I run graceful directly?. Thanks a lot for your reply.\nI have just checked your code. but it is not working. same issue\nI am not rich experienced in golang. Can you post me full code.\nI did like that\nvar exitCh = make(chan struct{})\n// Run ...\nfunc Run() {\ngo startServer()\n<-exitCh\n}\nfunc startServer() {\ne := echo.New()\n...  ...\n...  ...\n// Start server\nif err := e.Start(\":8000\"); err != nil {\ne.Logger.Fatal(err)\n}\nexitCh <- struct{}{}\n}\nI am looking forward to hearing soon, Thanks,. same issue.\nI have just run example source. not resolve issue.. \nI installed windows os  2 times to resolve this issue. Mac and Linux is working fine.\nPrevious os was win 8, current os is win 10.\nGolang 1.7.3. same issue\n\n. Thanks for your efforts. . One more, I have just checked other 2 window machines. But not working. :'(\nvery strange issue.. Mr, Vishr\nPlease resolve this issue asap, Actually there is not problem in the echo running.\nBut it is strange to develop the project.\nBest Regards,. very nice! @hexadecy\nThen, when I use go-bindata-assetfs, how can I use your method?\n```\nimport static \"github.com/Code-Hex/echo-static\"\ne := echo.New()\ne.Use(static.ServeRoot(\"/\", assetFS()))\n??? ???\ne.Start(\":8080\")\n```\nThen this method is not working with NotFound(404) page. Did you check that on your side?\nhttps://github.com/Code-Hex/echo-static\nhttps://github.com/elazarl/go-bindata-assetfs. Thanks, @hexadecy\nHow is Not Found(404) page?\nCurrently NotFound404 page is not showing, is showing only blank page.. ",
    "ido50": "Oops, sorry, the bug was in my code. Closing this non issue.\n. I will only see a log message if I enable the Logger middleware.\nI see in the customization page you link that in Debug mode, I'll get the error message itself. I'll give it a try. Thanks.\n. Okay, once again I have to apologize, I've completely forgotten I had created a custom error handler, and had no logging in it... My bad, thanks for the help.\n. This commit broke my server. All my static routes are now returning 404. I'm using groups with the Static middleware to server static content.\n. ",
    "bobsquito": "@Anon-Penguin really sorry to contact you this way but I saw a question you asked on stackoverflow about getting pdf.js working to extract text in google apps script. Did you ever get it working? The further I have gone with it I just keep hitting blockers and I'm wondering if I'll ever get to the end of it and get something working or if it will just keep being a drain on my time. Again, I'm really sorry to approach you like this, I've just been pulling my hair out a bit with it. My email is rob.kj.cassidy@gmail.com Thanks!. ",
    "joeblew99": "See Goa design instead :) \n. ",
    "djgilcrease": "you can\nfunc(c echo.Context) error {\n            log := c.Logger()\n           ...\n}\n. println(c.Get(\"RenderTpye\") prints (0x0,0x0)\nwhen I try c.Get(\"RenderTpye\").(string) I get\njson\n{\"time\":\"2016-06-03T11:59:51-07:00\",\"level\":\"ERROR\",\"prefix\":\"echo\",\"file\":\"echo.go\",\"line\":\"226\",\"message\":\"interface conversion: interface is nil, not string\"}\n. ",
    "monjerry": "thanks for the help!! :D it works now\n. ",
    "amenzhinsky": "@vishr I found a few more fasthttp related bugs, have a look https://github.com/labstack/echo/pull/550\n. I'm not sure about the FS default value e.FS = http.Dir(\".\") because we won't be able to serve files outside of cwd, but at the same time this is a security enhancement.\ngo\nfunc fileHandler(c echo.Context) error {\n    return c.File(\"/etc/passwd\") // won't work\n}\nIf someone needs to make it work, FS has to be changed to Dir(\"/\") or it can be default value.. @vishr added generic FS implementation, which is basically wrapper of os.Open, please have a look.. @vishr I thought of that, but didn't figure out why they're needed, I mean TLS* fields. At the same time this is a code simplification, we can check when TLS is enabled via e.Server.TLSConfig != nil\n. @vishr so we need to stop them both, is that correct? \nIt'll look like: \n```go\nfunc (e *Echo) Close() (err error) {\n    if e.TLSListener != nil {\n        if err = e.TLSServer.Close(); err != nil {\n            return\n        }\n    }\nif e.Listener != nil {\n    if err = e.Server.Close(); err != nil {\n        return\n    }\n}\n\nreturn\n\n}\n```. @vishr I've just updated this PR, please have a look.\nI still think that having multiple server instances is not such a good idea because we use only (*http.Server) Serve(net.Listener) function that completely ignores TLSConfig since we provide it with a listener.\nIn this case we can listen to multiple ports TLS or plain, having only one server instance.\nFor compatibility issues we can use the same pointer for both Server and TLSServer\nWhat's your take on that?. Okay then, I made it simple for now. \nI'll think of that a bit later.. I'm not sure about this one, probably the FormParams method should return an error if it fails. \nhttps://github.com/valyala/fasthttp/blob/master/http.go#L603\n. No unfortunately, it appends it, so if we have \"GET\" and set it to \"POST\" it wold be \"GETPOST\"\nhttps://github.com/valyala/fasthttp/blob/b8b31526d7a61e3d43e9ae02aeed8a4ea6adf775/header.go#L464\nI had to fix it to make tests pass\n. ",
    "romeovs": "I've got about 23 locations where echo.Context.(S|G)et are being called. I'll look into it tomorrow!\n. ",
    "2matzzz": "Ops, It had overlooked...\nThanks.\n. ",
    "beast": "+1\n. ",
    "bruth": "This appears to be a problem in more files. For example:\n- https://github.com/labstack/echo/blob/v2.0.2/engine/engine.go#L10\n- https://github.com/labstack/echo/blob/v2.0.2/engine/standard/server.go#L7-L10\n. ",
    "luca-moser": "@ansel1 I second your opinion. Params should be unescaped before the handler is invoked.\n. ",
    "andreynering": "OK, I'll try it.\nThank you for the attention.\n. > What does c.Keys return?\n@vishr It's a map[string]interface{}\n. Hmm... That works, but I still think having direct access to the map leads to cleaner templates for this use case.\n. Thank you very much for your patience and time. \ud83d\udc4d I think I will keep using Gin that better fit my needs.\n. ",
    "guidola": "Just saw that on the tests. Thank you anyway.\n. ",
    "oliverjanik": "Blob looks simpler IMO, unless ResponseEncoder already exists.\nMore broadly, would content-negotiation make sense for echo?\nHandlers would return data (structs, maps or slices) and the encoder would be selected based on what was in the Accept header.\nI'm used to this from WebAPI in .NET but it might be too much for a light-weight framework.\n. That is a good practice :-)\n. @vishr would you take a hard dependency on Msgpack and protobuf libraries?\nHow about a simple interface that allow people plug in their decoder/encoder based on content-type?\n. @vishr There are 2 things here I believe. Correct me if I'm wrong, please.\n1) Echo provides a way to decode incoming data in request bodies using binders. This is great.\n2) Content Negotiation is for response encoding and is based around Accept request header. I would like if echo would choose from predefined encoders (map of content type to encoder) based on this header and encode an send appropriate content-type response header for me.\nJust a suggestion, though. If you want to keep it minimal I'll be happy with the Blob api mentioned above.\n. ",
    "shamsher31": "I would love to see c.ProtoBuf(http.StatusOK, data) where data will be ProtoBuf encoded. Probably client consuming ProtoBuf response can use responseType: \"arraybuffer\" to read and decode data.\n. ",
    "WithGJR": "Thanks\n. ",
    "tcurdt": "It surely would be nice having an example for something like this\nhttps://joeshaw.org/revisiting-context-and-http-handler-for-go-17/\n. > It should fail for invalid or not-found files and it does.\nI think we are in agreement then - but it does not fail for me.\n. ...unless that's maybe because of graceful?\n. Ha!\npanic: echo: open ../cert.pem: no such file or directory\nwith the files it then works (without graceful):\n$ curl -k -X GET -I https://localhost:8000/\nHTTP/2 200 \ncontent-type: text/plain; charset=utf-8\ncontent-length: 6\ndate: Wed, 07 Sep 2016 21:40:36 GMT\nI guess then the question is how handle this in a graceful scenario.\n. ",
    "jessemillar": "Switching to standard instead of fasthttp allows the gargantuan header, but I don't like running from problems.\n. Since fasthttp is no longer a part of Echo, what is the current method for increasing the ReadBufferSize?\n. ",
    "dotpot": "\ud83d\udc4d \n. ",
    "Paulius-Maruska": "Sorry for not responding sooner. Yes, that particular bug with wrong content-type no longer panics. Thank you.\n. ",
    "pavlik": "Yes. I'm request support of let's encrypt too.\nIt took me integration Echo & Let's Encrypt and I was faced with the fact that the server implementation of Echo differs from the standard server. And I can't pass to the server the struct Certificate (from the crypto/tls package). Only path to cert files. \nYou can realize integration for example with this package: https://godoc.org/rsc.io/letsencrypt or https://github.com/xenolf/lego\n. ",
    "skota": "@vishr this is what i am seeing when in use GET\n\"e.GET undefined (type *echo.Echo has no field or method GET, but does have Get)\"\ni just did a \"go get github.com/labstack/echo/...\"  and my go version is \n\"go version go1.5.1 darwin/amd64\"\nThis is the code i am using  http://pastebin.com/YCPEbemc\n. ## OK so i tried to update with \"go get -u github.com/labstack/echo/...\" and this is what i see\ncd /Users/sriramkota/dev/go/src/github.com/labstack/echo; git pull --ff-only\nFrom https://github.com/labstack/echo\n- fc10f66...08f7147 master     -> origin/master  (forced update)\n- [new branch]      coderhaoxin-middleware-secure-header -> origin/coderhaoxin-middleware-secure-header\n  18a78a3..5789bde  v1         -> origin/v1\n- [new tag]         v1.4.2     -> v1.4.2\n- [new tag]         v1.4.1     -> v1.4.1\n- [new tag]         v2.0.0     -> v2.0.0\n- [new tag]         v2.0.1     -> v2.0.1\n- [new tag]         v2.0.2     -> v2.0.2\n  fatal: Not possible to fast-forward, aborting.\n  package github.com/labstack/echo: exit status 128\n\ni will try to remove echo and just do a fresh install to see if that helps..\nthanks for your patience with all the questions..i am beginner in go..\n. Sorry that didn't work. here is the code http://pastebin.com/t2Ca6fUz\ntried both\ncurl localhost:1323/restricted/dashboard -H \"Authorization: Bearer my-token\"  and\ncurl localhost:1323/dashboard -H \"Authorization: Bearer my-token\"\nmy goal it to be able to execute the 'admin' handler when in try the above route. Perhaps i am misunderstanding something here??\ndoes this line 'r := e.Group(\"/restricted\")'    mean when a route like /restricted/dashboard is accessed, first the 'restricted' handler is first executed and then 'admin' handler?\nthanks for the help\n. Thanks!! it worked. I just had to do a new build for the new changes.\n. ",
    "skyflyer": "@vishr, I believe this ticket can be closed?\nFor others, searching for information on how to use CSRF protection:\n\nRegister the CSRF middleware (the example below expects the POST-ed form to contain a form field with the name csrf and the value of csrf token.\n    go\n    api.Use(middleware.CSRFWithConfig(middleware.CSRFConfig{\n        TokenLookup: \"form:csrf\",\n    }))\nGet the value of current CSRF token. The value of csrf token can be extracted from the echo#Context: csrf_value := ctx.Get(middleware.DefaultCSRFConfig.ContextKey).(string)\nMake sure that your forms which are to be posted contain this form field by passing the token value to you template.\n\nIf you need to protect other methods, you will probably need a different configuration and passing the token through HTTP headers.. @splittingfield, that rename was my bad, sorry. And to answer your question:\nName is the same as Handler was before; I wrongly assumed Handler was even used outside of Echo since it is more-or-less an infrastructure thing.. ",
    "dxvgef": "I also need the session middleware to support the fasthttp engine!\n. Browser\n. I see this information in the Google Chrome browser developer tool\n\n. These anchor links is invalid:\n- Installation\n- Migrating\n- Customization\n- Files Static\n. I changed the template file, but I can not refresh the browser to see the change immediately, I need to restart the process, how to solve this problem?\n. +1. ",
    "andradei": "Right now, Cookies aren't getting all the way to echo.Context. To be more precise, I am able to cookie := c.Cookie(\"myCookie\"), but the issue is that cookie.Value() is always empty.\nstandard is working as expected though.\n. V4 is here but just for compatibility with Go Modules. V5 then? . ",
    "cdfox": "Thanks for the quick response! Yes, it works.\n. ",
    "jaggerwang": "Oh, It just happened when I signing, so I thought it's a problem related to my account:)\n. Found in v3.2.3. ",
    "ccutch": "\ud83d\udc4d \n. ",
    "EliasSMMX": "We will update Golang version.\nThanks a lot.\n. ",
    "leenux": "@codepushr \n 'There's no need to validate exp by hand, the jwt package is doing this automatically.'\nHow to doing if I want to adjust the exp?\n. Fixed by missed WORKDIR. ",
    "jayd3e": "After further research on this topic, I've found that the Rails and Django versions of CSRF protection implement a whitelist at the session level(something that Echo is not doing), so they actually verify that the token that is presented in the request is a token that was generated specifically for the user.\n. Weird how that issue did not come up from a Google search.  I tried using the go get command to no avail, but will mess around with it.. ",
    "mmerickel": "Thanks for the link but it basically agrees with my original post.\n\nThe token just needs to be \"unguessable\", making it difficult for an attacker to successfully guess within a couple of tries. It does not have to be cryptographically secure. An attack is one or two clicks by an unbeknownst user, not a brute force attack by a server.\n\nAs I said above, the token is guessable because it is valid for any user as long as the global secret does not change. This means the attacker does not need to do a GET request per-user, which is a stated goal of the token.\n. FWIW a common trick is to simply store the token in a cookie. Then you don't need to track any concept of a user in the middleware. This gets you pretty close to a solid solution as you cannot re-use a token from one session against someone else's session because they won't have the same cookie (trusted token). Ideally there would also be an api where people could invalidate the tokens (change them) at privilege boundaries to avoid any hijacking / vulnerabilities present in HTTPP-only pages, but that's certainly less of a concern than making the tokens unique per-session.\n. I think you're even storing the token in a cookie already. The main issue appears to be that the value of the cookie isn't actually being used to validate the header/form. I think you should modify the validation routines to ensure the value is signed by the secret (this is already being done), and then compare it to the value in the header/form.\n. ",
    "Carpetsmoker": "\n\n... but I'm not sure if the current behaviour is considered a feature or a bug? Perhaps other characters should also stop scanning parameters?\n\nWhat other characters should we check for?\n\nIntuitively I'd say that scanning should stop as soon as a non-identifier character is encountered.\nThis is a backwards-compatible change though, since it's not inconceivable that some people are using /path/:variable-name, or even /path/:filter.foo or some such...\n\nHave you considered writing a middleware to drop .json from the path before it hits the router? It should be a pre-middleware.\n\nYeah, that's what I'm doing now:\n``` go\npackage main\nimport (\n    \"fmt\"\n    \"strings\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/engine/standard\"\n\n)\nfunc main() {\n    e := echo.New()\n//e.Use(fixParams())\ne.Pre(fixParams())\n\n// []string{\"id.json\"} -> []string{\"42.json\"}\ne.GET(\"/hello/:helloId.json\", handle)\n\n// []string{\"id\"} -> []string{\"42\"}\ne.GET(\"/world/:worldId/json\", handle)\n\ne.Run(standard.New(\":1323\"))\n\n}\nfunc handle(c echo.Context) error {\n    fmt.Printf(\"handle: %#v -> %#v\\n\", c.ParamNames(), c.ParamValues())\n    return nil\n}\n// FixParams strips .json from parameter names and values.\n//\n// The problem is that the echo router sees \":id.json\" as a single parameter\n// name: i.e. \":id.json\" rather than \":id\", which will have the value \"1.json\".\nfunc fixParams() echo.MiddlewareFunc {\n    return func(next echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            idx := len(c.ParamNames()) - 1\n            if idx < 0 {\n                return next(c)\n            }\n        fmt.Printf(\"fix: %#v -> %#v\\n\", c.ParamNames(), c.ParamValues())\n        if paramName := c.ParamNames()[idx]; strings.HasSuffix(paramName, \".json\") {\n            c.ParamNames()[idx] = paramName[:len(paramName)-5]\n        }\n        if paramValue := c.ParamValues()[idx]; strings.HasSuffix(paramValue, \".json\") {\n            c.ParamValues()[idx] = paramValue[:len(paramValue)-5]\n        }\n\n        return next(c)\n    }\n}\n\n}\n```\nThe problem with this is that now both /hello/42.json and /hello/42 work. This is not really something I'd like to support, because sooner or later people will accidentally use /hello/42 without the .json by accident, which may break at any given moment...\nI was invoking this as e.Use(fixParams()). I changed it to e.Pre(fixParams()), but that doesn't make any difference (in fact, that breaks it, since the value then shows up as 42.json).\n. > The caveat I see is that you can't have a param with .. What do you guys think about it?\nYeah, that's true. I don't know if anyone actually needs/does this though?\nAny change to this will be backwards-incompatible. For example someone mentioned routes in the form of /x/:{id}.json in the other issue, but this will mean routes with { and } will no longer work, so that's not compatible either (and also a bit harder to implement).. Personally I think using dots in variable values never makes sense, as it's near-universally used for file extensions, even more so than / (one of the few things Windows, Unix, and macOS all agree on!).\nWithout my previous PR supporting /path/:id.json is hard; you need to add a middleware which modifies the parameters where you need to be careful to not introduce race conditions, so I think some change somewhere would be a good idea.\nI don't know if this PR really improves things. It seems rather complex (and potentially surprising) to me. what will happen with /download/:filename.tar.gz for example?\nHow do other routers solve this problem?. If I understand the issue correct, then I think the problem is that people have this:\n/path/:param\n\nwith a param value of:\n/path/something.with.dots\n\nI think that is the \"real bug\" that needs to be fixed; we only want to drop on dots in the param name, so we don't end up with param.json as the parameter name.. RFC says nothing about routing, much less how variables in paths are treated.. Any thoughts on this @vishr? We'd like to add this to our API, and if this won't work we can look for other solutions.\nThanks :-). This will break existing Logger implementations, as they will also have to add this method.\nIt would be helpful if you could add a rationale for this change.. The package docs for json has:\n\nUnmarshal matches incoming object keys to the keys used by Marshal (either the struct field name or its tag), preferring an exact match but also accepting a case-insensitive match.\n\nSo I think that to match the json.Unmarshal behaviour, it should be something like:\ngo\ninputValue, exists := data[inputFieldName]\nif !exists {\n    inputFieldName = strings.ToLower(inputFieldName)\n    for k, v := range data {\n        if strings.ToLower(k) == inputFieldName {\n            inputValue = v\n            exists = true\n            break\n        }\n    }\n}\nif !exists {\n    continue\n}. I think it would be more helpful to rename \"strict mode\" to DisallowUnknownFields.  I had to look at the source to figure out what this does.\nAlso, maybe it would be possible to allow passing a custom json.Decoder?. ",
    "siredwin": "@vishr , why is e.POST not secure? On  a comment commented on Jul 15, 2016 your e.POST did not carry any csrf data. Is that the way it is supposed to be setup? My POST methods definitely fail and i am wondering if i should split it into 2 parts like yours for POST & GET?. \n    `func main() {\n    renderer := Renderer{\n        Debug: false,\n    }\n    e := echo.New()\n    //e.Pre(middleware.NonWWWRedirect())\n// Middleware\ne.Use(middleware.Logger())\ne.Use(middleware.Recover())\n\ne.Renderer = renderer\ne.Static(\"/static\", \"static\")\ne.Static(\"/assets\", \"assets\")\ne.Static(\"/templates\", \"emails\")\ne.File(\"/favicon.ico\", \"images/favicon.ico\")\n\ne.GET(\"/\", Index)\ne.GET(\"/contact\", Contact)\ne.POST(\"/contact\", Contact)\ne.GET(\"/success\", Success)\ne.GET(\"/aboutus\", AboutUs)\n\ne.GET(\"/zipper\", Zipper)\ne.POST(\"/zipper\", Zipper)\n\ne.GET(\"/input\", Input)\ne.POST(\"/input\", Input)\n\ne.GET(\"/.well-known/acme-challenge/hGLQIjtvBPfqIa9mWWwUKJZf36kKk5W_9J7dAeBrejk\", GetSsl)\n\nbind := fmt.Sprintf(\"%s:%s\", os.Getenv(\"OPENSHIFT_GO_IP\"), os.Getenv(\"OPENSHIFT_GO_PORT\"))\ne.Logger.Fatal(e.Start(bind))  //for openshift\n//e.Logger.Fatal(e.Start(\":8000\")) // for local\n\n}\nIt is this line e.Pre(middleware.NonWWWRedirect()) that is causing that error. All of my redirects actually give that error.. I think for safety purposes redirect.go should use req.Host + req.URL.Path instead ofhost := req.Host\n     uri := req.RequestURI`\n// echo.Context.Request().URL.Path, echo.Context.Request().RequestURI\nfor those of use that use  non-standard port (i.e., not port 80). I have the same issue too. Unfortunately i can't do much to change my situation. \nTry updating the version of OpenSSL & curl you are using.\nRefer to: https://groups.google.com/forum/#!topic/vault-tool/P7iGkH0DfnI and https://groups.google.com/forum/#!topic/vault-tool/gczD8kvDRIc. Yep, it took me 6 hours to figure it out. I was streaming Zip file downloads and they were all corrupted when Gzip was enabled for my API. I disabled Gzip and everything worked fine. Just FYI. Have you tried:\n[]struct {\nA int `json:\"first\" form:\"first\"`\nB int  `json:\"second\" form:\"second\"`\n}\n\nThen in forms and json do as below. Also remember Golang array is simple. Just repeat the same name with a different value. Don't use brackets\n<input name=\"first\" value=\"1\" />\n<input name=\"second\" value=\"2\" />\n\nI have not tried this solution but i think it is pointed in the right direction and i have one similar like this.. @vishr \nis there a fix for this yet ? \n@trtstm ,\nHow were you able to fix or get a solution for this?\nI need to be able to bind the following to  a struct from form body. So far it only works when payload is json.\n`{\n\"message\": \"Task started successfully\",\n\"chainTaskUUID\": [\n    {\n        \"streams3\": \"task_f2ff20d4-1613-4dc6-9494-c4a4cb9af976\"\n    },\n    {\n        \"email\": \"task_0bb9c2e4-691a-4bf9-8718-6679701b2200\"\n    }\n]\n}`\n\nAnd my struct is:\n`type TaskIDs struct {\n    TaskUUID      []map[string]string  `json:\"taskUUID,omitempty\" form:\"taskUUID\" schema:\"taskUUID\"`\n    ChainTaskUUID []map[string]string  `json:\"chainTaskUUID,omitempty\" form:\"chainTaskUUID\" schema:\"chainTaskUUID\"`\n}`. After a week of trying and failing, i was able to get it to work finally using the example here.\n\nhttps://github.com/labstack/echo/issues/600#issuecomment-233098970\nYou guys need to update the documentation on  CSRF. For example POST requests always fail with CSRF by default -- so one needs to separate the POST and GET Request logic.. Fixed.. c.MultipartForm()\nhttps://github.com/labstack/echo/tree/master/cookbook/file-upload/multiple\nhttps://github.com/labstack/echo/tree/master/cookbook/file-upload/multiple\n. Could you please update the proxy example? It would be nice if it showed real life example where the proxied url is given a route in main web page.. Yes, i did. It does not work. The struct params changed.\nAlso, i wanted an example where i can access contents of url1 & url2 as follows:\nhttps://localhost:1323/url1\nhttps://localhost:1323/url2. It does work with latest echo from Github. I had not bothered to update echo since i  had installed it about two weeks ago. . @vishr, the example provided works but it takes over the entire server. How do i get these results --\nhttps://localhost:1323 = my proxy server home\nhttps://localhost:1323/url1 = proxy website 1\nhttps://localhost:1323/url2 = proxy website 2\nThanks.. Think about this situation where i have my main website i.e\nhttps://localhost:1323  -- my main website.\nLet's say i have WordPress or another server running my blog. In this situation i want my blog to appear as a link from my main website or appear as part of my main site i.e\nhttps://localhost:1323/blog -- where blog is another server somewhere.. Yes, i will. Perfect!  e.Server.Shutdown(ctx). ",
    "scags9876": "Doing the following in context.go is a pretty good fix:\ngo\nfunc (c *echoContext) JSONBlob(code int, b []byte) (err error) {\n    if c.response.Header().Get(HeaderContentType) == \"\" {\n        c.response.Header().Set(HeaderContentType, MIMEApplicationJSONCharsetUTF8)\n    }\n. @vishr Thanks for the quick fix!\n@mewben  In our case, we assembling a jwt and sending it along with a content type of application/jwt; charset=utf-8.   We are migrating from gin to echo and this was the only time that we discovered a lack of feature parity.\nAdditionally, it's fairly common practice to define custom proprietary content types as a means of defining the shape of a response.   These are described in the Vendor Tree section of the media types specification.  \nWhether or not it is good practice to do this, it would be good if echo were to remain flexible in order to accommodate the needs of a wide variety of applications.  :)\n. ",
    "bradberger": "For what's worth, have also tried flushing the response, but that doesn't seem to help either.\n. Super, thanks for the quick response! I'll give that a try\n. Perfect, that was exactly what I needed. Thanks again!\n. ",
    "mreyntjens": "Thank you !\n. ",
    "ChrisRx": "Everything appears to work as expected on my end.  Thank you so much!\n. ",
    "sokolovstas": "Yes your example work as expected! Thank you for it. I will try figure out source of problem and write later.\n. Please check this exmaple. For me http://localhost:8001/g/dictionary/status return Not Found but http://localhost:8001/g/dictionary/type return type. If remove g.GET(\"/server\", than status request work as expected.\ne := echo.New()\ng := e.Group(\"/g\")\ng.GET(\"/dictionary/skills\", func(ctx echo.Context) error {\n    return ctx.String(200, \"skills\")\n})\ng.GET(\"/dictionary/:name\", func(ctx echo.Context) error {\n    return ctx.String(200, ctx.Param(\"name\"))\n})\ng.GET(\"/server\", func(ctx echo.Context) error {\n    return ctx.String(200, \"server\")\n})\n. Hi @vishr, do you have any thought about this error?\n. Yes it working fine now! Many thanks for your efforts!\n. We run our echo in docker and use Alpine linux, and found that .json doesn't return contentType. After adding mailcap to Dockerfile RUN apk add --no-cache ca-certificates mailcap contentType is returned normal.\n\n// TypeByExtension returns the MIME type associated with the file extension ext.\n//\n// The built-in table is small but on unix it is augmented by the local\n// system's mime.types file(s) if available under one or more of these\n// names:\n//\n//   /etc/mime.types\n//   /etc/apache2/mime.types\n//   /etc/apache/mime.types. \n",
    "guiferpa": "Great, I didn't think about it.\n. ",
    "k2wanko": "@vishr \nCan not use the syscall package on AppEngine Standard Enviroment.\nAlso, on Windows, Can not build echo in AppEngine/Go SDK.\nAnd mattn/go-colorable dependent of gommon/log  is using the syscall on windows.\nAnd one more thing.\non AppEngine, the Log output to the terminal will not be displayed.\ngommon/log is terminal specific package.\nyou should use google.golang.org/appengine/log to solve.\ngoogle.golang.org/appengine/log is need *http.Request(Context for AppEngine).\nTo replace the gommon/log in order to solve these problems I think that it is best.\n. @vishr \ngo-colorable is used yet.\nhttps://github.com/labstack/gommon/blob/master/log/log.go#L16\nhttps://github.com/labstack/gommon/blob/master/log/log.go#L68\n. @vishr  I was able to build!\nThanks.\n. @vishr Write to os.Stdout is not output in goapp serve.\n$ goapp serve\nINFO     2016-08-19 19:09:29,460 devappserver2.py:769] Skipping SDK update check.\nINFO     2016-08-19 19:09:29,516 api_server.py:205] Starting API server at: http://localhost:58892\nINFO     2016-08-19 19:09:29,521 dispatcher.py:197] Starting module \"default\" running at: http://localhost:8080\nINFO     2016-08-19 19:09:29,524 admin_server.py:116] Starting admin server at: http://localhost:8000\n/usr/local/Cellar/app-engine-go-64/1.9.40/share/app-engine-go-64/google/appengine/tools/devappserver2/mtime_file_watcher.py:115: UserWarning: There are too many files in your application for changes in all of them to be monitored. You may have to restart the development server to see some changes to your files.\n  'There are too many files in your application for '\nINFO     2016-08-19 19:09:45,643 module.py:788] default: \"GET / HTTP/1.1\" 400 10\n. Can output if use google.golang.org/appengine/log\n``` go\npackage main\nimport (\n    \"net/http\"\n\"google.golang.org/appengine\"\naelog \"google.golang.org/appengine/log\"\n\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/engine/standard\"\n\"github.com/labstack/gommon/log\"\n\n)\nfunc init() {\n    e := echo.New()\n    e.SetLogLevel(log.ERROR)\n    e.GET(\"/\", func(c echo.Context) error {\n        ctx := appengine.NewContext(c.Request().(*standard.Request).Request)\n        err := echo.NewHTTPError(400, \"BadRequest\")\n        aelog.Errorf(ctx, \"IndexError: %v\", err)\n        return err\n    })\n    s := standard.New(\"\")\n    s.SetHandler(e)\n    http.Handle(\"/\", s)\n}\nfunc main() {\n    http.ListenAndServe(\":8080\", nil)\n}\n```\nlog:\n$ goapp serve\nINFO     2016-08-19 19:26:30,900 devappserver2.py:769] Skipping SDK update check.\nINFO     2016-08-19 19:26:30,954 api_server.py:205] Starting API server at: http://localhost:60610\nINFO     2016-08-19 19:26:30,960 dispatcher.py:197] Starting module \"default\" running at: http://localhost:8080\nINFO     2016-08-19 19:26:30,965 admin_server.py:116] Starting admin server at: http://localhost:8000\n/usr/local/Cellar/app-engine-go-64/1.9.40/share/app-engine-go-64/google/appengine/tools/devappserver2/mtime_file_watcher.py:115: UserWarning: There are too many files in your application for changes in all of them to be monitored. You may have to restart the development server to see some changes to your files.\n  'There are too many files in your application for '\n2016/08/19 19:26:36 ERROR: IndexError: BadRequest\nINFO     2016-08-19 19:26:36,660 module.py:788] default: \"GET / HTTP/1.1\" 400 10\n. ",
    "fpt-mnes-thanhhm5": "@vishr @k2wanko \nCan you guy tell me know what echo's version to pull which can run on window?. ",
    "dinoboff": "Would disabling logging and using a custom HTTPErrorHandler works?\nThe issue is the Echo Logger interface is not compatible with app engine logger (which require a golang 1.6 Context). Echo need to either let a middleware set a Logger for each request or change the Logger interface methods to have a Echo Context parameter.. To log the http error in app engine:\n```go\npackage hello\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\n\"google.golang.org/appengine\"\n\"google.golang.org/appengine/log\"\n\n)\nfunc init() {\n    e := echo.New()\ne.HTTPErrorHandler = GaeHTTPErrorHandler\ne.GET(\"/\", func(c echo.Context) error {\n    return echo.NewHTTPError(400, \"BadRequest\")\n})\n\nhttp.Handle(\"/\", e)\n\n}\n// GaeHTTPErrorHandler decorates default error handler by logging HTTP error using appengine/log.\nfunc GaeHTTPErrorHandler(err error, c echo.Context) {\n    ctx := appengine.NewContext(c.Request())\n    log.Errorf(ctx, \"HTTP error: %s\", err)\nc.Echo().DefaultHTTPErrorHandler(err, c)\n\n}\n```. ",
    "matcornic": "I have not written the code yet, but I think I could do it \ud83d\ude04\n. @vishr PR done ;)\n. ",
    "kyokomi": "Thanks!\n. ",
    "leedstyh": "c.Request().(*standard.Request).Request\n. +1 to gorilla/websocket\n. Do you run your code on a local machine, which don't have a public IP address?. Not familiar with googollee/go-socket.io, but try these code\nfunc SoServer() (*socketio.Server, error) {\n    server, err := socketio.NewServer(nil)\n    if err != nil {\n        return nil, err\n    }\n\n    server.On(\"\", func(so socketio.Socket){\n        //...\n    })\n\n    // ...\n\n    return server, nil\n}\n\nfunc main() {\n    var e = echo.Engine\n\n    server, _ := SoServer()\n\n    e.Get(\"/socket.io/\", echo.WrapHandler(server))\n\n    e.Start(\":8080\")\n}. Hello, any chance this will be fixed soon?\n\nI'm not good at TLS/Lets Encrypt, but the example in golang.org/x/crypto/acme/autocert works well. Since echo is built on acme/autocert, why echo is not working?. @vishr , it's odd, my existing code failed ( works before TLS-SNI validation is disabled ). But I try this cookbook, it works. Anything I need to change my existing code to make it work?. error message: unable to authorize \"xxxx\"; tried [\"tls-sni-02\" \"tls-sni-01\"]. Thanks @AdrianLungu , my issue fixed follow your suggestion after removing e.Start(:80). ",
    "cloudtrends": "solved by   update jwt-go compontent \ngo get -u github.com/dgrijalva/jwt-go\nclose this issue .\n. ",
    "mdouchement": "I encountered the same bug on 2bdbf6918eac7e2e6222fb074f77d29f5946bbfa (the latest commit on current v3 branch)\nOn this version return c.File(path.Join(root, c.Param(\"_*\"))) is used in Group#Static() but it doesn't work because there is only c.Param(\"*\") in parameters (* parameter contains the wanted path).\n. I had the same problem and to makes it work I used something like that:\ngo\nengine.PUT(\"/resource\", func(c echo.Context) error {\n        if _, ok := c.QueryParams()[\"policy\"]; ok {\n            return resource.Policy(c)\n        } else if _, ok := c.QueryParams()[\"acl\"]; ok {\n            return resource.ACL(c)\n        } else {\n            return resource.Default(c)\n        }\n})\nI didn't find a native support of this kind of matching.. ",
    "karrung": "You can use json tag omitempty in the field that you want to auto remove key if the key value is null.\ngo\ntype Foo struct {\n    Bar string `json:\"omitempty\"`\n}\n. ",
    "paganotoni": "@vishr should this target v3 or v2 ?\n. @vishr is there some doc on how to help to get v3 out ? i would love to help!.\n. @vishr me too \ud83d\udc4d \n. @vishr regarding recipe/* should i simply check those work inside v3 branch ?\n. @vishr ok, thanks for clarifying, all clear now, just one more thing, by docs/recipe/* you mean https://github.com/labstack/echo/tree/master/website/content/recipes right ?\n. @vishr i just went through the recipes/*docs examples and runt each of them, i noticed few things to fix:\n- On the middleware recipe we should update wording to say Echo3.0 on the server header\n- Could not run GAE recipe (tried building the Dockerfile and it failed).\n- Don't see graceful shutdown recipe in the codebase.\nAlso, i noticed that when in a branch, hugo references files from the github repo, (master branch code) i wonder if its possible to make it reference current branch and local files.\nWould it be ok to send a PR with the change to the middleware recipe ? also, what should we do for   GAE and graceful ?\n. @vishr Oh, understood the v3 branch references to master, yes, i could cover the /guide/* section.\nI have a couple of questions i did not get answer from your last comment: \n- Should i send a PR with the wording chance on the v3 middleware recipe ?\n- What should we do regarding graceful doc? same for GAE ?\nI'll start looking on the /guide* and send appropriate PR. thanks for the chance to help.\n. thanks @vishr, i'll give it a shot soon.\n. @vishr Regarding the graceful description would it be ok do tell something like:\n\nEcho now ships with graceful server termination inside it, to accomplish it Echo uses  github.com/tylerb/graceful library.\nBy Default echo uses 15 seconds as shutdown timeout, giving 15 secs to open connections at the time the server starts to shut-down.\nIn order to change this default 15 seconds you could change the ShutdownTimeout property of your Echo instance as needed by doing something like:\ngo\ne := echo.New()\n...\ne.ShutdownTimeout = 30 * time.Second\n...\nif err := e.Start(\":1323\"); err != nil {\n    e.Logger.Fatal(err)\n}\n. @vishr sure, i just created this one https://github.com/labstack/echo/pull/688, LMK if its ok for you, IDK if maintainers section is ok.\n. @vishr are we ok to mark \"Update recipes\" > \"Put back Gracful shutdown\" task as done or it still needs more work ?\n. I could help but im out the city now, would it be ok starting next week?\n. @vishr just sent a PR (#698) that with #667 should cover most of the documentation update for v3, however i have a question regarding the benchmark, as you know it includes fasthttp comparison, should we add a different image that shows only v3 comparison ?\n. @vishr i'm in \ud83d\udc4d\n. Runt code changes against v3 codebase and works, great job @tshkh8.\n\n@vishr should we merge this into master or v3 ? i would like this to get merged before working on README.md for v3, since @tshkh8 has made good changes here.\nAlso curl examples work flawlesly, great work @tshkh8.\n. @vishr does this one still valid ? should i give it a shot ?\n. @vishr should we mark this one as closed ?\n. Will send another PR with all guides/* covered.\n. @vishr i'll do it, thanks for the chance to contribute.\n. @vishr repurposing this PR, it now adds content to the index based on #667 and also changes hello world example.\nIs this ok or i should send this PR in a different way ? WDYT ?\n. @vishr definitely anyway i could help please ping me, also if you have some code-related issues that could serve as a way to get used to the codebase i would be wiling to help :).\n. @vishr i'm not not on gitter, nos sure i understand the question, you mean if v2 README has been updated ? if so, i've not worked on v2 docs yet.\n. @vishr yes, those changes have been applied to v3.\n. @vishr sorry for the confusion, this should have been overwritten by other PR, i was checking in v3 README.md and some changes in the PR are not there.\n. @vishr sure, i'll work in a PR soon and mention you there, thanks for the heads-up with this.\n. @vishr @maxvi @dxvgef  may this be a feature that allow templates to recompile, like how Jet does here ? https://github.com/CloudyKit/jet/blob/master/example/main.go#L78\n. @vishr is the goal here to build a LoggerWithConfig middleware that receives LoggerConfig and uses that config to log accordingly ?\n. never mind, i just got it.\n. @vishr on the headers would you expect that we add something like:\n- header_name_of_the_header tag for each header\n- query_param_name and  form_param_name for the query and the form\nso for a given request:\nbash\n$ curl -H \"X-First-Name: Joe\" http://example.com/?lastName=Carl\ni should have  query_lastName and headers_X-First-Name available (maybe snake_case?).\nis that what you would expect ?\n. @vishr i just sent #706, would love to get your feedback on it, it adds what we have discussed here.\n. So, maybe i'm not doing it how i should, heres what i'm doing:\n- I have a fork of the repo\n- I have my local copy with 2 origins (this one and my fork)\n- I regularly pull from this repo and push changes to my fork\n- I go to GH and create a PR from my repo to this one.\n@vishr What do you think i should change from those steps ?\n. @vishr sending it corrected in #708 \n. @vishr thanks for the chance and all the guidance! i'll try to keep in touch to contribute.\n. @vishr thoughts on this one ?\n. @tatsuya-ogawa @vishr please correct me if i'm wrong but Echo allows to configure the \"Access-Control-Allow-Origin\" domains when you use CORSWithConfig() function.\nBy default it sets the CORS with Access-Control-Allow-Origin set to '' inside DefaultCORSConfig , but i think i will be hard to know which domain to put there by default other than , anyways for production deployments i would recommend to user the CORSWithConfig version instead of the default one.\n. @vishr its always a pleasure \ud83d\udc4d \n. @shawnye this is on master, not v3 or v1, right ?\n. @vishr would adding something like: \ngo\nfunc (e *Echo) ShutdownInitiated() func() {\n    return e.server.ShutdownInitiated\n}\nto the Echo struct be enough to cover this issue ?. @Anon-Penguin thanks for the feedback, you're right, it lacks support for the HTTPS server property.\n@vishr i see your point and given Go will come up with shutdown process, how will Echo support < 1.8 versions of Go once 1.8 comes out ?.. @vishr ok, i'll give it a shot soon, and send another PR, closing this one for now, thanks for reviewing this one. \ud83d\udc4d. All set here.\n. Done\n. Done\n. @vishr sure, i will also move to table testing.\n. ",
    "Horaddrim": "I like the idea too, serving static information as a JSON or something like that... Is this still open?\n. ",
    "codekoala": "Thanks for the quick response! I'll do some digging and try to post an example.\n. Here's an example program that I just tried out:\n``` go\npackage main\nimport (\n        \"fmt\"\n        \"log\"\n        \"net/http\"\n)\nfunc main() {\n        http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n                fmt.Fprintf(w, \"hi there\\n\")\n        })\n    log.Fatal(http.ListenAndServeTLS(\":1324\", \"server-crt.pem\", \"server-key.pem\", nil))\n\n}\n```\nWhen testing with curl, I was originally just sending the intermediate CA certificate, and that didn't work. It worked when I tried it with the intermediate bundled with the root CA. I'll have to give this a spin with echo a bit later today.\n. It seems that the CA bundle was the missing piece of my puzzle. A custom CA (with client verification) is supported with fasthttp.WithConfig(engine.Config{Listener: tlsListener}). Thanks!\n. ",
    "alexzorin": "Thanks! Nice to see there is a way to register pre-routing middleware.\nThe README links to the trailing slash middleware documentation are currently 404. I ended up reading the test code and some old Google cached docs, which misled me.\n. I ran into this as well.\n(For me) the problem was that the main goroutine was still running even after graceful had stopped the server. So before I had\n```\nfunc main() {\n    go web()\n    select {} // would block here after web goroutine finished after SIGINT\n}\nfunc web() {\n    echo.StartServer(...)\n}\n```\nWorkaround was to do something like:\n```\nfunc main() {\n    go web()\n    <- exitCh\n}\nfunc web() {\n    echo.StartServer(...)\n    exitCh <- struct{}{}\n}\n```\nHTH. Here is a working example:\n```\npackage main\nimport (\n    \"log\"\n\"github.com/labstack/echo\" // using master\n\n)\nfunc main() {\n    ch := make(chan struct{})\n    go listen(ch)\n    <-ch\n}\nfunc listen(exitCh chan struct{}) {\n    e := echo.New()\n    if err := e.Start(\":3232\"); err != nil {\n        log.Fatal(err)\n    }\n    exitCh <- struct{}{}\n}\n```\nIf you commented out the channel send, it would end up with the \"already shutting down\" problem:\n// exitCh <- struct{}{}\nAs long as the goroutine with the main function exits, the process should stop.. Not sure dude. I just tried it on two Windows machines and it worked fine. \nDo you have the latest version of echo and the graceful dependency? go get -u github.com/labstack/echo.\nI have built the above program as a binary if you wanna try it - https://id-rsa.pub/graceful.exe . Sorry, absolutely no idea. I think you have something stinking up your environment. Anti-virus? Software firewall? Good luck :.. ",
    "Wilfred": "FWIW using echo v2 I did something similar:\n```go\n// AllowHeadRequestsMiddleware allows HEAD requests to be made against valid routes without\n// the need to explicitly register a handler for each one.\n//\n// Loosely based on https://github.com/labstack/echo/issues/654\nfunc AllowHeadRequestsMiddleware(h *Handler) echo.MiddlewareFunc {\n    return func(next echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            err := next(c)\n            if err == nil {\n                return nil\n            }\n        // If it's a HEAD request that we haven't explicitly\n        // handled,\n        if c.Request().Method() == echo.HEAD && err.Error() == http.StatusText(http.StatusMethodNotAllowed) {\n            // and if we have a route configured for this path,\n            uri := c.Request().URI()\n            if isRouted(h, uri) {\n                // then return an empty HTTP 200.\n                return c.NoContent(http.StatusOK)\n            }\n        }\n\n        return err\n    }\n}\n\n}\n```\nWhere isRouted is custom code to look up the URI in a route map I've defined.. ",
    "gordallott": "hey,\nso fundamentally good but the new setup means that only http2 is supported, not even http 1.4 is supported anymore (though i'd assume most browsers would just ignore that, it's still important)\ni ran https://github.com/stefanjudis/is-http2-cli on a simple echo server built using the http2 recipe https://echo.labstack.com/recipes/http2\necho master: \n[23:32:21]@zazu \ue0b0 ~ \ue0b0 is-http2 local.host\n\u2713 HTTP/2 supported by local.host\nSupported protocols: h2 h2-14 http/1.1\ncloses-655 branch:\n[23:32:51]@zazu \ue0b0 ~ \ue0b0 is-http2 local.host\n\u2713 HTTP/2 supported by local.host\nSupported protocols: h2\nh2-14 is, i believe, just a working draft of http2, but at the very least http/1.1 should be re-added.\nif it were me, i would probably build a test around making sure that http2 and http1 are served appropriately now that echo is doing some of the work that the go http standard library used to do (things may change underneath and such, especially with http2)\n. nice, the only other thing to mention is that in go 1.8 there should be a .Clone() method on the tlsconfig which should be used in place of creating a new one, but isn't possible for now https://github.com/golang/go/commit/d24f446a90ea94b87591bf16228d7d871fec3d92\n. ",
    "AA33": "@heynemann where do you add your middleware? Is it already added to the Echo struct before you use it in doRequest? \nI'm facing a similar problem with my middleware that wraps request handling in a DB transaction.\n. ",
    "L11R": "@heynemann sorry for necroposting, but I found more correct way, I guess:\n```golang\nfunc TestReset(t *testing.T) {\n    // Setup\n    e := echo.New()\nreq := httptest.NewRequest(echo.POST, v1+\"/reset\", nil)\nreq.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)\nreq.Header.Set(echo.HeaderAuthorization, defaultUUID)\n\nrec := httptest.NewRecorder()\nc := e.NewContext(req, rec)\n\n// Middlewares chaining (it goes from inside to outside\nc.SetHandler(\n    ContextExtender(testDB, testConfig)(\n        Authorization(\n            // Your method here\n            Reset,\n        ),\n    ),\n)\n\n// Here you call it and test, magic!\nif assert.NoError(t, c.Handler()(c)) {\n    assert.Equal(t, http.StatusOK, rec.Code)\n}\n\n}\n```\nHope my example will help others.. @roman-vynar there is a problem. Okay, I disabled it. But then I want to log something from handler and fill it with usefull info from request, for example. Logger interface is not generic, it developed specifically for gommon/log package :(. @alexaandru it has many not necessary to implement methods, I have to make them do nothing or return empty.\nAnyway I fully agree with topic starter, Echo almost perfect framework for me, but stricting to use gommon/log package is pitfall for us. Now we are rewriting project to go-chi.\nEcho v5 should return all errors and let user to decide what to do with this error.\n. @im-kulikov well, I guess it's okay that you released v4 without any notable changes except modules. v5 and fewer will be for features.. ",
    "jwendel": "As I stumbled about this on how to test middleware, here's an example of using echo.ServerHTTP, which will end up triggering the router logic along with all middleware you have setup.\nsample.go\n```go \npackage sample\nimport (\n    \"net/http\"\n    \"github.com/labstack/echo\"\n)\nfunc ServerHeader(next echo.HandlerFunc) echo.HandlerFunc {\n    return func(c echo.Context) error {\n        c.Response().Header().Set(echo.HeaderServer, \"Echo/3.0\")\n        return next(c)\n    }\n}\nfunc initEcho() *echo.Echo {\n    e := echo.New()\n    e.Use(ServerHeader)\n    e.GET(\"/\", rootUrl)\n    return e\n}\nfunc rootUrl(c echo.Context) error {\n    return c.HTML(http.StatusOK, \"body output\")\n}\n```\nsample_test.go\n```go\npackage sample\nimport (\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n    \"github.com/labstack/echo\"\n    \"github.com/stretchr/testify/assert\"\n)\nfunc TestMiddleware(t *testing.T) {\n    e := initEcho()\n    req := httptest.NewRequest(echo.GET, \"/\", nil)\n    rec := httptest.NewRecorder()\n    // Using the ServerHTTP on echo will trigger the router and middleware\n    e.ServeHTTP(rec, req)\nassert.Equal(t, http.StatusOK, rec.Code)\nassert.Equal(t, rec.Body.String(), \"body output\")\nassert.Equal(t, rec.Header().Get(echo.HeaderServer), \"Echo/3.0\")\n\n}\n```. ",
    "pavelsmejkal": "Was there anything particularly wrong that i can change? To get it merged\n. Value generated same way as for anonymous handler function. Value is something like github.com/pavelsmejkal/echo.TestEchoMeta.func1 in my case. func(NUMBER) dependents on the order of definition. \nmiddleware github.com/pavelsmejkal/echo.TestEchoMeta.func1\nhandler       github.com/pavelsmejkal/echo.TestEchoMeta.func2\n. \ud83d\udc4d\n. \ud83d\udc4d\n. \ud83d\udc4d\n. ",
    "yurayko": "Yes, its works when cookie set and then read in the different requests.\nBut question is why I cannot set and immediately read cookie in the same request.\nNot cookie from client, but my, server cookie.\n1. I create cookie\n2. I add cookie in the echo.Context\n3. I immediately read cookie from echo.Context\n4. Oops, no cookie  added in the 2\n. > You're setting the cookie for the response and you're trying to read from the request.\nAaa. That it! Cookie request and cookie response its a different cookie. Thanks you.\n. Also\ngo\n  co.SetName(\"session_id\")\n  co.SetValue(\"Hello, World!\")\n  c.SetCookie(co)\n  s := c.Response().(*standard.Response).Header().Get(\"Set-Cookie\")\n  return c.String(http.StatusOK, s)\nreturn my lost cookie.\n. ",
    "lugorian": "Great decision! \nIf context still will be interface? It would be nice to implement something like this https://github.com/go-playground/lars#custom-context--avoid-type-casting--custom-handlers and make echo more extensible!?\n. @vishr Yes it is similar but with some neat tricks to avoid context casting again and again. Also provides nice api for composing custom framework..\nLook at this examples: \nhttps://github.com/go-playground/lars/blob/master/examples/all-in-one/main.go\nhttps://github.com/go-playground/lars#custom-context--avoid-type-casting--custom-handlers\nIt is really nice way to register custom context, handler and use it instead of default one..\nLars router is inspired by echo(among ather frameworks), maybe echo can borrow few tricks back from lars?  ;)\nWhat do you think?\n. ",
    "tikiatua": "Would be great if you could also try to keep the functionality provided by echo to a minimum (i.e. Cookie implementation in v2 could be handled almost identically without echo).\n. This is a great decision in my opinion. With all the discussions about whether or not to use a \"webserver framework\" with go, it seems like a good idea to keep the functionality directly provided by the echo framework to a minimum in favor of allowing users to use custom - ideally standard library compliant - packages for specific functionalities.\nBy providing a good documented list of corresponding recipies, this should also be feasible for go newcomers.\n. ",
    "lhecker": "@vishr As you probably already know x/net/websocket is kinda unmaintained and has some serious shortcomings, most of which are listed in the Readme of gorilla/websocket (especially that it can't deal with messages consisting of multiple frames). So do you think it's feasible to make Echo v3 compatible with gorilla/websocket instead of or additional to x/net/websocket? \n. ",
    "sarathsp06": "But why dropping fasthttp if it had the performance scale as mentioned in README ?\n. ",
    "freWalker": "@vishr When the v3 official version will be released?\n. @vishr Thank you.\n. ",
    "bluealert": "I am interested. @vishr \n. @vishr sorry, I am busy for debug my app, which is written by echoV3 and gorm(https://github.com/jinzhu/gorm). @apaganobeleno If you have time now, you can help me to cover the /guide/* section. Thank you. \n. ",
    "DevotionGeo": "When is V-3 going to release?\n. ",
    "gavv": "It seems that fasthttp support was finally dropped, but Feature Overview in README still notes fasthttp:\n\nRun with standard HTTP server or FastHTTP server\n. \n",
    "nbpalomino": "Echo v3 on go-echo/echo fork is NOT in sync with main repo.. ",
    "scbizu": "I use govendor  too,and this issue also happens to me . Thanks for @fcristovao 's advice ,I think that you'd better note it in the installation or somewhere else .  BTW, echo is really an awesome server framework .\n. @nlamirault  Just  check this commit . If now echo v3 is just an http.Handle again ,I think I can implement the graceful server by myself . And I agree with keeping echo simple and scalable.In this way,developers can easily  use other third packages like graceful server.. ",
    "nlamirault": "I'm using govendor. I've got the same issue. Do you know how fix it ?\nThanks. @vishr i Think error is already present.\nvendor/github.com/rsc/letsencrypt/lets.go:674: not enough arguments in call to c.ObtainCertificate\nvendor/github.com/rsc/letsencrypt/lets.go:731: undefined: acme.TLSSNI01ChallengeCertDomain\nvendor/github.com/rsc/letsencrypt/lets.go:744: undefined: acme.TLSSNI01ChallengeCertDomain\n. Yes it is.. This is the test : \n```shell\n[nlamirault]:~$ cd $GOPATH/src/github.com/nlamirault\n[nlamirault]:~/Apps/golang/src/github.com/nlamirault$ mkdir foobar\n[nlamirault]:~/Apps/golang/src/github.com/nlamirault$ cd foobar/\n[nlamirault]:~/Apps/golang/src/github.com/nlamirault/foobar$ govendor init\n[nlamirault]:~/Apps/golang/src/github.com/nlamirault/foobar$ govendor fetch github.com/labstack/echo@v3.0\n[nlamirault]:~/Apps/golang/src/github.com/nlamirault/foobar$ vi main.go\n[nlamirault]:~/Apps/golang/src/github.com/nlamirault/foobar$ cat main.go\npackage main\nimport (\n        \"net/http\"\n    \"github.com/labstack/echo\"\n\n)\nfunc main() {\n        e := echo.New()\n        e.GET(\"/\", func(c echo.Context) error {\n                return c.String(http.StatusOK, \"Hello, World!\")\n        })\n        e.Logger.Fatal(e.Start(\":1323\"))\n}\n[nlamirault]:~/Apps/golang/src/github.com/nlamirault/foobar$ go run main.go\ngithub.com/nlamirault/foobar/vendor/github.com/rsc/letsencrypt\nvendor/github.com/rsc/letsencrypt/lets.go:674: not enough arguments in call to c.ObtainCertificate\nvendor/github.com/rsc/letsencrypt/lets.go:731: undefined: acme.TLSSNI01ChallengeCertDomain\nvendor/github.com/rsc/letsencrypt/lets.go:744: undefined: acme.TLSSNI01ChallengeCertDomain\n```. ",
    "leoycx": "e.GET(\"Error404\", func(c echo.Context) error {\n    return ...\n})\n. ",
    "javmah": "You Can also pass error URL Name.  like \n echo.NotFoundHandler = func(c echo.Context) error {\n         user_input =     c.Request().URL    //  http.URL\n         msg =  \"not found page :\" , user_input\n        // render your 404 page\n        return c.String(http.StatusNotFound,  msg )\n    }. ",
    "victorhaggqvist": "Judging from the code examples, yes I believe so. Sorry about the dupe, feel free to close this one.\n. ",
    "timvaillancourt": "Edit: I will also need to set 'ClientCAs:' to my list of accepted CAs in my use case, so it looks like accepting multiple overrides is best\n. Thanks @vishr, I've passed in my own config with .WithConfig() and things are working nicely now. \nOne question though, is there any way for me to reuse the tcpKeepAliveListener from engine/standard/server.go?\nIe: https://github.com/labstack/echo/blob/master/engine/standard/server.go#L194-L206\nI'm not an export on go's import/exporting (maybe doing something wrong) but I get an error when I try to use \"standard.tcpKeepAliveListener\":\n```\ncommand-line-arguments\n./test-server.go:225: cannot refer to unexported name standard.tcpKeepAliveListener\n./test-server.go:225: undefined: standard.tcpKeepAliveListener\n```\nFor now I've completely copied L194-L206 from server.go into my own code.\n. ",
    "benjisg": "Looks good \ud83d\udc4d \n. ",
    "pfortin-urbn": "I found it - doh!\n. ",
    "krzysztofantczak": "Same question guys. I need to store original POST data sent to the server within the struct on which binder is working. So simple binding is not enough here. How can i approach this? I was trying similar thing to original creator of this question, but no luck here.. Ok, problem solved. For future reference (God bless You for request().SetBody()):\nraw, _ := ioutil.ReadAll(context.Request().Body())\ncontext.Request().SetBody(ioutil.NopCloser(bytes.NewReader(raw)))\nFrom this point on, i can use binder as usual and attach \"raw\" to my struct ;-) Other valid solution - but on Echo level - seems to be by using io.Seeker, which can reset stream position after binder is done with it. My solution however meets my needs perfectly.. ",
    "mtpc": "Same issue right here, site appears to be broken\n(W10, chrome 54)\n. Works fine, thanks !\n. Yep, works as expected.\n. ",
    "bernhardw": "In v2 context is available through StdContext(). However, in the upcoming v3, the standard context doesn't seem to be there anymore or fulfill the context.Context interface. It now is a Map as store.\n@jchorl Are you using the Google Cloud packages for Go and asking because they need a context.Context? \nI have decided on using a separate, globally available var ctx context.Context. But let me know if you have another solution :) \n. Thanks, that makes sense for v2 :)\n. ",
    "jchorl": "I am not using Google Cloud stuff at the moment, although I have used App Engine in the past which obviously uses context.Context. For my current project, I am following Go's context suggestion The Context should be the first parameter, typically named ctx. As for echo.Context vs. context.Context, I prefer context.Context as I prefer not to be deeply tied to specific frameworks. My current solution is defining a toContext(echo.Context) context.Context {...} function that converts echo.Context to context.Context in my handlers so the rest of my server code can use standard Go contexts.\n. Sure, you can see it here: https://github.com/jchorl/financejc/blob/master/api/handlers/util.go#L49\nIt pretty much just copies key-value pairs to the new context. Since I use the jwt middleware, I treat the jwt claims differently.\n. ",
    "etnbrd": "I use Google app engine, and need to transform the echo.Context into a context.Context to generate an appengine.Context.\nUntil now, I used this code :\nfunc postAllocation(ctx echo.Context) error {\n  aecontext := appengine.NewContext(ctx.Request().(*standard.Request).Request)\n  ...\n}\nBut now that echo/engine is missing, could I use the following line instead ?\naecontext := appengine.NewContext(ctx.(*context.Context).Request())\nOtherwise, @jchorl could you share your toContext function, or any other solution ?\nThanks :)\n. Yep, it worked, thanks :)\nAlso, I had to change the creation of the router.\nIt was all documented in this recipe : https://echo.labstack.com/recipes/google-app-engine\nSo, many thanks for your work :)\nCheers\n. I had the same first error : \ncannot find package \"github.com/labstack/echo/engine/standard\" ...\nI think it is related to issue #702.\nAnd I am also getting this error : \ngo-app-builder: Failed parsing input: parser: bad import \"syscall\" in github.com/tylerb/graceful/graceful.go from GOPATH\nI think I did a fresh install, because my dev env is in a docker container that I built from scratch.\nBut I keep getting this message.\nIs there a migration guide ?\nShould I forward this issue to tylerb/graceful ?\nThanks.\n. Yep, resolved, thanks :)\n. Issue opened : https://github.com/valyala/fasttemplate/issues/3\nAs far as I understand, @valyala refactored its code to use unsafe for performance reason.. ~At least, it builds :)~\nNope :/\nI will try to improve your solution on my env.. I think you just forgot the return on unsafeString2Bytes.\nWith the return, it seems to work.. ",
    "cassiothadeu": "Great, I will developing this funcionality and submit PR, do you when the echo v3 will be released?\n. I think that the log format on case of header, path, query and form can be formated like:\n{\n   \"time\":\"2016-11-01T16:50:45-02:00\",\n   \"remote_ip\":\"::1\",\n   \"method\":\"GET\",\n   \"uri\":\"/v1/eddie/inventories?branch.id=660&product.sku=213133900\",\n   \"status\":200,\n   \"latency\":212099,\n   \"latency_human\":\"212.099256ms\",\n   \"bytes_in\":0,\n   \"bytes_out\":248,\n   \"headers\":{\n     \"Content-Type\": \"application/json;charset=utf-8\",\n      \"messageid\":\"rrt-db3da20a-sa-2395-29631718-1\"\n   },\n   \"query\": {\n     \"q1\":\"1\"\n   },\n   \"path\": {\n     \"p1\":\"1\"\n   },\n   \"form\": {\n     \"f2\":\"2\"\n   }\n}\nwhen then middleware is configured like:\ne.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n        Format:{\"time\":\"${time_rfc3339}\",\"remote_ip\":\"${remote_ip}\",+\"method\":\"${method}\",\"uri\":\"${uri}\",\"status\":${status}, \"latency\":${latency},+\"latency_human\":\"${latency_human}\",\"bytes_in\":${bytes_in},+\"bytes_out\":${bytes_out},+\"headers\":${header:messageid,header:authorization}}+\n            \"\\n\",\n    }))\nwhat do you think about this?\n. So the middleware configuration would be like this\ne.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{ Format:{\"time\":\"${time_rfc3339}\",\"remote_ip\":\"${remote_ip}\",+ \"method\":\"${method}\",\"uri\":\"${uri}\",\"status\":${status}, \"latency\":${latency},+ \"latency_human\":\"${latency_human}\",\"bytes_in\":${bytes_in},+ \"bytes_out\":${bytes_out},+ \"headers\":${header:messageid} ${header:authorization}}+ \"\\n\", }))\n. ",
    "tatsuya-ogawa": "Can not passed tests.\nSo close this pull request.\n. @vishr @apaganobeleno \nWhen we use cors middleware with setting AllowOrigins \"\", then the echo server reply \"Access-Control-Allow-Origin: \".\nBut this method can not coexist with the method using credential.\nSo I thought Access-Control-Allow-Origin should be explicitly set.\nThis is my commit.\nhttps://github.com/tatsuya-ogawa/echo/commit/2e9df5bc5f717cd71d9c4cc3b273d8fe5ee35f2d\nThis commit can not pass tests.\nSince the expected value of assert contains a wildcard testcase.\nThis is related stackoverflow issues\nhttp://stackoverflow.com/questions/19743396/cors-cannot-use-wildcard-in-access-control-allow-origin-when-credentials-flag-i/19744754#19744754\n. @apaganobeleno \nCORSWithConfig do not provide the way of the dynamic  Access-Control-Allow-Origin handling,\nso we can not realize CORS with wildcard.\nSince other languages, frameworks provides the dynamic  Access-Control-Allow-Origin handling,\nI thought it is better to implement it.\n. @vishr \nv2 and v3 are same.\nAllowOrigins is same []string.\nIn order to realize dynamic setting, it must have a function field.\n. @vishr \nI'm sorry I did not tell it exactly,Credentials is Access-Control-Allow-Credentials.\n. > setting allowedOrigin to origin if it is passed in the request header\nI think so too.\nIt seems that gin-gonic/gin implementation is like that.\nIf AllowOrigins value is *, then response's Access-Control-Allow-Credentials become request header's location.\n. ",
    "shawnye": "Using /users/1/?p=on to workaround it\n. same error for StartAutoTLS():\n\necho: http: TLS handshake error from 221.4.179.11:53750: tls: client offered an unsupported, maximum protocol version of 300\n. ",
    "zouhuigang": "github.com/gin-gonic/gin\uff1a\nfunc serveGif(c *gin.Context, g *gif.GIF) {\n    b := new(bytes.Buffer)\n    w := io.Writer(b)\n    gif.EncodeAll(w, g)\n   c.Data(200, \"image/gif\", b.Bytes())\n}\nSimilar to this method : c.Data\n. thank you.\n. This is a test example\uff0c https://play.golang.org/p/GSKi1_ORbR\uff0cbut with the bind function can not bind... http://img.51tywy.com/startup/project/abc.png. In the local virtual machine\uff0cexposing a port on a live Docker container:\ndocker run -it -p 8098:80 -p 8099:443 registry.cn-hangzhou.aliyuncs.com/zhg_docker_ali_r/golang-development-anooc:1.0.1. +1. ",
    "atbaig": "Vishal I did a go get a few days ago\nHere is my main imports\npackage main\nimport (\n        \"encoding/hex\"\n        \"flag\"\nlog \"github.com/Sirupsen/logrus\"\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/engine/standard\"\n    \"github.com/labstack/echo/middleware\"\n)\nand the issue is still reproducible. \nHow do I force the use of v2 or v3?\n. Thanks Vishal I need some more help. \nDo I do\ngo get https://github.com/labstack/echo/\nor \ngo get https://github.com/labstack/echo/tree/v3.0.0-beta.1\n. Vishal I upgraded and I still get the same error\nHere is my entire main.go\npackage main\nimport (\n        \"encoding/hex\"\n        \"flag\"\nlog \"github.com/Sirupsen/logrus\"\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/middleware\"\n)\nvar restLog = log.New()\nvar Config Configuration\nfunc main() {\n        CONFIG := flag.String(\"config\", \"\", \"This is the configuration file\")\n        flag.Parse()\n        Config = New(*CONFIG)\n        Config.SoftKey, _ = hex.DecodeString(\"2b7e151628aed2a6abf7158809cf4f3c\")\n```\n    e := echo.New()\n    e.Use(middleware.Logger())\n    e.Use(middleware.Recover())\n    e.Use(middleware.CORS())\ne.Static(\"/nutoken/swagger.json\", \"./dist/swagger.json\")\ne.Static(\"/apispec\", \"./dist/\")\ne.POST(\"/nutoken/token\", GetToken)\ne.POST(\"/nutoken/payment\", ValidateToken)\ne.POST(\"/nutoken/expiretoken\", ExpireToken)\ne.POST(\"/nutoken/expirealltokens\", ExpireAllTokens)\ne.POST(\"/nutoken/pan\", GetPAN)\ne.Start(\":80\")\n\n```\n}\nReally appreciate your help\n. Thanks a lot Vishal. Yes it works now\n. Thanks Vishal It works. ",
    "pokatomnik": "There is no reason to create a new server with same routes just for redirects from http to https, so your goroutine may contain a short code like this:\n```\n  go func () {\nredirectServer := echo.New()\n\nredirectServer.Pre(middleware.HTTPSRedirect())\n\nredirectServerError := redirectServer.Start(\":80\")\n\nredirectServer.Logger.Fatal(redirectServerError)\n\n}()\n\n```\nthis code creates a web server with only one middleware and no routes, but passes all requested urls to main https server.. ",
    "neutronstein": "It doesn't work.\n. I cleared glide's cache (located in ~/.glide), reran and it worked.\n. Did you tried with this code?\nhtml\n<input name=\"[1][a]\" value=\"1\" />\n<input name=\"[1][b]\" value=\"1\" />\n<input name=\"[2][a]\" value=\"2\" />\n<input name=\"[2][b]\" value=\"2\" />. ",
    "calmandniceperson": "Thanks a lot for your help, @vishr !\n. ",
    "prestonp": "I'm dumb, it's public so we can just do\ne := echo.New()\ne.HTTPErrorHandler = customHTTPErrorHandler\n. ",
    "nshmura": "thanks! I am grateful for your great library ;)\n. @vishr Thanks for your reply and information!. @vishr Thanks! ;). ",
    "wednesdaysunny": "Do you still maintain the v2 version?. But I think it should compatible forward, I cause many problem. I have many code, I must add query tag everywhere, but why not compatible forward?. ",
    "flamedmg": "Code to reproduce an issue:\n```\n```. ",
    "rou-bai": "\u611f\u6fc0. ",
    "poweroftrue": "sorry for being late \nyes sure:\napp engine simple code: \n```go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/middleware\"\n\"net/http\"\n\n)\nfunc createMux() *echo.Echo {\n    e := echo.New()\n    e.Debug = true\ne.Pre(middleware.RemoveTrailingSlash())\nhttp.Handle(\"/\", e)\nreturn e\n\n}\nfunc init() {\n       e := createMux()\n    e.GET(\"/\", mainPage)\n}\nfunc mainPage(c echo.Context) error {\n    return c.String(200,\"hello world !\")\n}\nthis main.go file\nanother file is important for app engine app.yaml:\napplication: [app id in console.cloud.google.com]\nversion: 1\nruntime: go\napi_version: go1\nhandlers:\n- url: /assets\n  static_dir: static\n\nurl: /.*\n  script: _go_app\n```\n\nand after you download app engine SDK you can deploy it using \"goapp deploy\" I'm using ubuntu.\nI think the problem in go version because it can serve (test it locally) without any problem \"goapp serve\" and when I deploy it comes that error \ngoogle app engine support go1.6 and the error in this package golang.org/x/crypto/ocsp\n. @koba-ninkigumi  @vishr  thanks guys \ud83d\ude03 \nas app engine sdk release notes says: \n\nGo runtime notes\nApp Engine Go runtime updated to Go 1.6.2.\n\nand in the latest version of app engine is 1.9.46:\n\nGo runtime notes\nThis release does not include a new Go SDK\n\nit turns out to be issue in go1.6 but it's as @bradfitz says it already fixed but we should wait until go app engine sdk upgrade to go1.7 \ud83d\ude1e \n@koba-ninkigumi  no worries man I hope google app engine team upgrade to go1.7 as fast as japan fiexd Fukuoka sinkhole \ud83d\ude03 \n@vishr  do you any any workaround to this? if there's no workaround I think it's will be good idea to mention in echo documentation that is go1.6 have this issue or somehow disable go vet\n. @koba-ninkigumi @iwag I found a workaround \ud83d\ude04  \nafter reading google app engine go group  I think it will take some time because maybe they'll skip go1.7 to go1.8 directly\nso until then if you need to deploy your app you can just remove github.com/rsc/letsencrypt package from echo.go line 55, and remove line 72:\ngo\ntlsManager      letsencrypt.Manager\nand finally remvoe StartAutoTLS func line 522 to line 531:\ngo\n //StartAutoTLS starts the HTTPS server using certificates automatically from https://letsencrypt.org.\n func (e *Echo) StartAutoTLS(address string, hosts []string, cacheFile string) (err error) {\n    config := new(tls.Config)\n    config.GetCertificate = e.tlsManager.GetCertificate\n    e.tlsManager.SetHosts(hosts) // Added security\n    if err = e.tlsManager.CacheFile(cacheFile); err != nil {\n        return\n    }\n    return e.startTLS(address, config)\n }\nyou can find echo.go inside github.com/labstack/echo folder in your GOPATH\nafter that you can deploy without any hassle \ud83d\ude09 \n* because app engine automatically handles https nothing will break\nhappy coding !. I really get confused!\nI tried to build and run standalone simple echo v3 with go1.6.3 and go1.6.2 and even go1.6 and there is no problem \n@vishr maybe the problem in the modified version of go (goapp) so I reported the issue here. ",
    "koba-ninkigumi": "https://github.com/golang/crypto/pull/19/files\nI found a way to fix it.\nHowever, the contribution process of Golang is complicated and difficult...\n. @mostafadahab Are you good at English?\nPlease help this discussion.\nhttps://github.com/golang/crypto/pull/19/\nI am borrowing the power of Google translation.\n. This issue is fixed Go SDK version 1.9.48.\nhttps://console.cloud.google.com/storage/browser/appengine-sdks/featured/\n. @vishr This PR is merged.\nhttps://github.com/valyala/fasttemplate/pull/4/files\nI use Google Cloud SDK 145.0.0 (2017-02-22).\nNo problem.\nPlease close this issue.. ",
    "iwag": "Thank you for sharing very important information @poweroftrue @koba-ninkigumi \nActually I met the same problem this weekend and I wasted my precious two days \ud83d\ude22\nI also wish google would upgrade soon \ud83d\ude4f\n. ",
    "jadegong": "Thank you so much, that fits my need.. That's what I was looking for, thank you so much!. You can try to make a router including /resource and /resource?policy and get the param policy, see their differences.. ",
    "jgillich": "Nevermind, time zones are hard.. ",
    "hfogelberg": "I had the same problem. You need to import \"github.com/labstack/echo/middleware\" as well.\nCould somebody update the docs, please?. ",
    "lunemec": "Yes, it looks like glide bug, when doing glide up after glide get, it installed the dependencies. Don't understand why glide up didn't. Thx.. Oh, you are right, this works (although not as nicely as Logxi, but exactly what I wanted). Thank you.. Thanks! this looks good for fixing #444, but my suggestion was to gzip only certain content-type responses. Those that are known to be compressable (text), and to don't compress jpegs, movies, zips, etc ...\ngo\nvar gzipable = map[string]bool{\n    \"text/html\":              true,\n    \"text/plain\":             true,\n    \"text/css\":               true,\n    \"text/javascript\":        true,\n    \"application/json\":       true,\n    \"application/javascript\": true,\n}\n. @vishr yes, but inside skipper you don't yet have the headers set from the handler. That is executed later (I tried that first), so for now, I use skipper for certain paths I know can't be gzipped.... Well yes, #946 is kinda \"hacky\" same as directly matching the request path. I'm doing that right now, but much nicer solution would be to use the content-type. However it is just a suggestion.. ",
    "goldmoment": "Thanks @leedstyh. I got it. ",
    "RyanCopley": "Ah-- blob is the word I should've looked for. That wouldn't set the content-type, and there is both an XML and XMLBlob. Would it be cool for it to be the same as HTML? I would like to not include the content type all over my code if possible:) I'll change my wording to Blob for consistency. Absolutely! . @vishr Done :) . I'm noticing this too.. ",
    "flimzy": "\nWhat kind of problem? In v3 Binder is make public.\n\nThe problem isn't that the Binder isn't public, the problem is that it doesn't support arbitrary data types.\nIn upgrading from echo 2 to echo 3, we've found that some forms are no longer bound properly. I can't say exactly what changed that caused the problem--there have been enough subtle changes between echo 2 and 3 that finding the exact cause is a bit daunting, and I'm not sure if it's entirely worth it.\n\nAren't Scanner and Binder interface similar? May be I am missing something.\n\nNo. I don't believe they're very similar at all.  The Binder interface, as I understand it, lets you plug in an entirely new binder (which is good, for what it's worth).  The Scanner interface lets you declare a datatype that can \"bind\" itself.  For example, to add support for RFC822-formatted date strings, all I need is:\ntype Timestamp time.Time\n\nfunc (t *Timestamp) Scan(src interface{}) error {\n    t, err := time.Parse(time.RFC822Z, src.(string))\n    return err\n}\n\nWith this, one can bind to a struct such as the following, without having to create a new binder at all:\ntype Foo struct {\n    Name    string    `form:\"name\"`\n    Created Timestamp `form:\"created\"`\n}\n\nIf I'm missing some subtle functionality of the Binder interface, please enlighten me.\nIf you'd like to see a PR to better understand my proposed changes, I can put that together, too.. PR #764 is not fully functional yet, but should be sufficient to show what I have in mind.. Any further thoughts on this, @vishr, after reviewing the PR?. It should work for any input type that Binder supports: HTML forms, multi-part forms, JSON or XML POSTs, etc.. Sorry, no.  My mind is a bit of a muddle.\nThis PR would directly affect three types of inputs:\n\nURL parameters (i.e. method = GET as here.\nStandard HTML forms, of type \"application/x-www-form-urlencoded\", as here\nMulti-part forms, of type \"multipart/form-data\", also here\n\nWhere it could potentially affect JSON, etc, is that by implementing the Scanner interface, individual form fields (of the above mentioned types) could expect JSON, which could then be automatically unmarshaled (by virtue of the Scan() method calling json.Unmarshal()).  I don't know how common of a request that might be, but literally any type of data unmarshaling/decoding could be done on a per-field/per-data-type basis this way.\nI hope things are clearer now.. At this point, I believe this PR to be functionally complete.  Further discussion or requests for clarification are welcome, of course.. I spent some time thinking about this PR, and a couple issues came up in my mind.\n\n\nThis PR works with either a struct, or a pointer to a struct in the bound struct.  No other pointer types are supported, so I'm not sure if supporting pointers-to-structs is the best way forward, or if a separate PR would be appropriate to add support for the base types as well.  This is more a question of echo's philosophy, I suppose, than what is strictly appropriate for this PR.\n\n\nThe reason I chose to implement sql's Scanner interface was for compatibility with data types/structs that already implement this interface. But upon further reflection, I wonder if this is a good idea. This would make it impossible (or at least very difficult) to implement an sql Scanner that is different from the way forms are interpreted.  Perhaps a better solution is to use a different method/interface name here in Echo. That does mean that datatypes which implement sql's Scanner would also have to implement the new interface, but doing so can be as trivial as calling the existing Scan() method, if it is appropriate.\nAgain, this is a question of philosophy rather than of the technically correct answer. I'm not sure which is best.  If a separate interface is chosen, perhaps something along the lines of FormScanner or 'UnmarshalForm` would be appropriate, borrowing idioms from sql's package, and from the json package.. After discussion with my own team, I decided that borrowing the Scanner interface isn't ideal, so have renamed the interface in this PR. Alternate naming suggestions are welcome.\n\n\nIf this is accepted for merging, I should rebase to squash these commits.. @vishr Both great suggestions. I wonder, though, if Unmarshal might be too generic?  How would you feel about EchoUnmarshal, or something along those lines?. > I would say Unmarshal with []byte is the way to go as it's then the same as the JSON and XML decoders.\nIt's actually UnmarshalJSON and UnmarshalXML, which is precisely why I suggested something more specific.  UnmarshalEcho might not be ideal, though, since Echo isn't a data format. It's also why I chose UnmarshalForm previously, but @vishr is quite right that Form is too specific.. You make a good argument in favor of Unmarshal, @vishr. My only concern with that name is that it might possibly collide with some other interface. But if everyone is as thoughtful as we are, that hopefully won't happen. :)\nWhat about UnmarshalParam?  \"Param\" is a name used to reference both query parameters, and form parameters, if I'm not mistaken.\nIn any case, we've probably done enough bike shedding. Whichever your preference is, @vishr, is fine with me, and I'm happy to make the changes for this PR.. Interface names don't collide, since they, like other data types, are per-package, and can even be private (unexported) and still work just as well. So we can call it whatever we want. ParamUnmarshaler seems fine to me.. Oh of course... within the package, yes, you may want other unmarshalers as well.. I have added a mention in the documentation; let me know if it should be expanded, or further mentioned elsewhere.\nI also squished the commits, as they were becoming somewhat long-winded and verbose.. At one point you suggested using UnmarshalParam([]byte) instead of UnmarshalParam(string), but then mentioned passing a string again.  Do you want me to change that to []byte?\nInternally echo uses string there, but in theory []byte can be more efficient, so if the internals ever change to using []byte, it might be preferred to do that.  shrug I have no strong opinion on that detail myself. :). @vishr I'll take a look.. Oops. I'll fix that and update the PR tomorrow. Thanks for checking. . @vishr Should now be cleaned up.. :/\nI forgot the -f flag with my push.  Now it's updated.. ",
    "JaTochNietDan": "I think this is a good solution to the problem. It will allow anyone to specify their own unmarshalling logic for their own types by implementing the Scan() method on the type. Right now if someone wanted to do something outside of the norm then they'd have to implement their own custom binder, which I think is totally un-necessary. It's a lot more work to maintain than simply maintaining a Scan function for the types they want to support, not to mention they may have already done that because they need it for SQL scanning anyway.. I would say Unmarshal with []byte is the way to go as it's then the same as the JSON and XML decoders.. Looks good to me.\nOn Wed, 14 Dec 2016 at 17:08 Vishal Rana notifications@github.com wrote:\n\nHow about this?\ntype Unmarshaler interface {\n        UnmarshalData([]byte) error\n}\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/labstack/echo/pull/764#issuecomment-267075163, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AB8uSZ0_WpNWVkcnv2r1FEW2dqcIqYFIks5rIBSGgaJpZM4LFtfs\n.\n. \n",
    "bep": "I was going to say that that method with that signature does not exist ...\nhttps://godoc.org/github.com/labstack/echo#Echo.StartAutoTLS\nBut it does, now ... Pulling in the latest changes and it appears.. ",
    "cduez": "We define the template with the glob function which return filenames with the extension. In our case this is hello.html and not just hello.\nTell me if this makes sense for you.. Oops, my mistake. Nothing wrong with the guide, error was on my side. I forgot to define the template.. ",
    "hayeah": "I just realized that I can do this easily with CustomBinder:\n```golang\nfunc (cb *CustomBinder) Bind(i interface{}, c echo.Context) (err error) {\n    b := &echo.DefaultBinder{}\nif err = b.Bind(i, c); err != nil {\n    return\n}\n\nreturn validate.Struct(i)\n\n}\n```. ",
    "vikramsk": "If the commits are okay, I'll update the website documentation on JWT as well.. ",
    "tracymacding": "Have some urls to match, for example\nPUT /resource?policy\nPUT /resource?acl\n....... ",
    "mitty1987": "I update code in first time,it's work fo NoConten(code),but it's also affect to the reponse whit Content,the head of \"Content-Encoding :gzip\" has be removed!!!\n. @vishr . Thank you for your reply.\nYes I have one, maybe you can help me.In my android project,I used okHttp for http request,when the response head contains \"Content-Encoding :gzip\", it's aways read 10bytes, even if my server send NoContent(500), so that will throw EOFException.It makes me a headache.\n so, Your means if I used Gzip I shuldn't send NoContent() when the status not 204?. @vishr. ",
    "mbn18": "Update\nIn my case the problem was caused by middleware that also used bind. Seems bind cannot be called more than once.\nAny reason it is not accessible after first use?\nOriginal problem\nHave related issue\nIn one of my PUT request I get EOF\nThe request object is:\ngo\ntype RecommendationAddRequest struct {\n    Xyz string `json:\"xyz\" validate:\"required,gte=6\"`\n}\nThe binder is the default one:\ngo\n    if err := c.Bind(reqObj); err != nil {\n        println(\"error is:\", err.Error())\n        return false\n    }\nAnd it print out:\n\nerror is: code=400, message=EOF\n\nThe request is:\nbash\ncurl -X PUT \\\n  https://domain.com/api/whatever \\\n  -H 'authorization: Bearer some-string' \\\n  -H 'cache-control: no-cache' \\\n  -H 'content-type: application/json' \\\n  -d '{\n    \"xyz\": \"ssss\"\n}'\nTried to switch to POST and etc. The odd thing is that I have other POST/PUT actions that do work as expected. Hey devs, is that a bug. Just asking before it is going to be closed. Thx. ",
    "arthurlataks": "@vishr Isn't it possible to restore body content during the Bind or should I implement custom Binder for that purpose? For now I implemented body data restore like it is done in the Body Dump MW (and well, like in the Medium post), which makes me think that this should be handled in the MW?. ",
    "imeoer": "@vishr My pleasure :). ",
    "binlaniua": "my bad, this version is use \"graceful\". ",
    "tedkornish": "If h satisfies http.Handler, looks like you could just use echo.WrapHandler(h) \u2013\u00a0it's a constructor of echo.HandlerFunc which takes in an http.Handler.\nhttps://godoc.org/github.com/labstack/echo#WrapHandler\nSo, you probably want\ne.GET(\"/\", echo.WrapHandler(h)). If by \"do\" you mean \"handle an HTTP request\", then it would be similar:\ne.POST(\"/\", echo.WrapHandler(h))\nIf by \"do\" you mean \"perform an HTTP request\", then you'd want to use some sort of function like http.Post \u2013\u00a0https://golang.org/pkg/net/http/#Post.. Yep, you're totally right. For some reason I assumed 404s and 405s weren't making it to the HTTPErrorHandler.\nThanks!. ",
    "younisshah": "@tedkornish That worked like a charm! One more thing: How would I do a POST request to GraphQL handler using echo.POST?. Worked like a charm. Thank you :). ",
    "rskumar": "I am too stuck with this issue for same reason, conditional response. Tested on Ubuntu.. Awesome. This is fixed now.. https://github.com/golang/go/issues/5197. Echo should not focus on load balancing, rather be a slick performant framework. For load-balancing, there are good, mature products, like HAProxy, Nginx, F5 (commericial) and lots of other golang apps. Or you can write your own proxy performing RoundRobin or weighted routing to backend servers just using net/http client.. I too am having same issue. any workaround?. Looking at code  at https://github.com/labstack/echo/blob/3f8b45c8d0dd840198a6b24b3393e5ec553dcb85/echo.go#L658 \nIt looks like skipping logger. \nI think, you can skip that log by setting e.HideBanner to true, and then print your own using logger before starting server. \n. @yanyandenuonuo Hi, why you think it should match to /api/test/ too with you only provided /api/test for routes.\nYou should look into middleware.AddTrailingSlash and middleware.RemoveTrailingSlash for your requirement. \nIMO, its not a good idea to automatically handle these two, the client should be aware of right endpoint, and fallback to with and without trailing should be avoided. . ",
    "awishformore": "An example in the documents would indeed be nice, but it's good to hear there is a way around it. I will look at it again for our use case tomorrow.\nI do not completely agree with the conclusion, though. As it is now, there is too much implied behaviour in my opinion. I personally consider catching signals inside a library by default highly questionable.. Thanks a lot for being so responsive and open to feedback. Indeed, the fact that it's a http.Handler again should make it straight forward and is an elegant solution.. ",
    "djui": "I agree with @Anon-Penguin that the sparse use of Color (for this one line) seems like we have two options:\nA. Replace the message with a log message (and if desired let the default Echo logger allow colours etc. to be logged)\nB. Move that message up to the caller, which would be a cmd/myapp/main.go place. \nI prefer (B) as this particular message does not know any internals that an external caller would not know (like PORT etc). It also decreases the external dependencies for Echo.\nI think giving access to the Output is feels counter-intuitive as if that change is desired, one could already just pick their own logger and set the Output there. So: I don't want to be able to write a coloured log message to /dev/null, I want that this message is not required to be written.. I will close this issue and pick up the discussion over at #798.. It seems the following might work:\ngo\nhttpReq := c.Request().(*standard.Request).Request\nhttpRes := c.Response().(*standard.Response).ResponseWriter\nr := http.MaxBytesReader(httpRes, httpReq.Body, 1<<20)\nIs that a valid/correct use?. I just discovered there exists a middleware that has the same semantics, so I could start using that instead.. ",
    "tommoholmes10": "hmmm you code seems like get name value\nhow about all form data?\nor get all data?. okeee then\nthanks. ",
    "freshteapot": "I made a work around, hopefully there is a cleaner way.\n\nI created a function to handle \"after\".\nTriggered it via a go routine.\n```\nfunc Main() {\n// blah blah\n    go runAfter()\n    e.Logger.Fatal(e.Start(listenOn))\n}\n\nfunc runAfter() {\n    quit := make(chan bool)\n    for {\n        <-time.After(1 * time.Second)\n        func() {\n            select {\n            case <-quit:\n                return\n            default:\n                // Do something then\n                // Cancel this routine\n                quit <- true\n            }\n        }()\n}\n\n}\n```. ",
    "huyhvq": "hi @vishr,\nI see in my glide.lock version is: cd2530ea098106338b888f4fb66e966efa2fd75e. I try to use 0696d555863f15fdea1a80bd7e06ac662a131a96 and it work. Thank you.. ",
    "fabiorphp": "I'm in the same situation. Why not create a release tag?. I'm in the same situation with Validator.. ",
    "hkoske": "Having the same issue @vishr . Thanks for the temporary fix @vishr. This version of fasttemplate works like a charm.. ",
    "anisimovsergey": "I've got similar problem but with go-colorable:\nshell\ngo-app-builder: Failed parsing input: parser: bad import \"syscall\" in github.com\\mattn\\go-colorable\\colorable_windows.go from GOPATH. ",
    "blackbeans": "i will provide a function allow user create echo by passing resolveAddress.\nit's ok ? . ",
    "devarsh": "Yes, I agree a custom middleware can solve the issue. ",
    "absinsekt": "Thank you, it would be useful to be mentioned in the Cookbook as I feel.. sexy!. ",
    "smares": "I really had to lol after I read \"Formatted all project files\" and then checked changes. \ud83d\ude02 . That is because you submitted an empty string which is the initial value for strings and therefore the required validator sees this as missing value. You get the same problem if you use required for number types (int, uint16, etc.) and submit 0, or false in case of booleans. If you want to only make sure that the body contains the key, use required but your struct should hold a pointer like *string. An uninitialized string is \"\" while an uninitialized string pointer is nil and nil != \"\"\nSo change to\ngolang\ntype Todo struct {\n    Title *string `json:\"title\" validate:\"required\"`\n}. Maybe respond with HTTP 406?. ",
    "reilg": "Can someone please confirm that echo.Static() this is working for them? \nI have a very simple implementation that doesn't seem to be working.\ngo\ne := echo.New()\ne.Static(\"/public\", \"p\")\nI save an image file in public and then try to load it on the browser:\nhttp://localhost:8080/p/img.png. I'm getting message: Not Found.. @ericmdantas \nStructure:\nmain.go\napp/\n - app.go\npublic/\n  - img.png\n  - otherimg.png\nMight be worth noting that echo.Static() is being called in app/app.go\nDoes that mean I need to move my public/ folder in app/?\nAbout my issue; I'm trying to expose this folder so I can serve images in http://site.com/p. ",
    "yanmaipian": "Thank you.. ",
    "snowzach": "It looks like this may be somewhat fixed in master. 3.0.3 seems to have code that forces writing to Color which seems to be default to stdout.. ",
    "ungureanuvladvictor": "Any update on this ?. ",
    "usk81": "@vishr Sorry, I didn't know gommon/random.\ngommon/random can generate IDs longer than the UUID, but UUID is more popular.. ",
    "citizenrich": "Yes, that's what I found. Is there any more info than that?\nOn Feb 11, 2017, at 13:08, Vishal Rana notifications@github.com wrote:\nAre you looking into the right docs https://echo.labstack.com/cookbook/http2?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I get the server up, the code is great. I hit the request endpoint in curl (version 7.51.0) and get HTTP/1.1 not 2.\ncurl https://localhost:1323/request -k\nRequest Information\nProtocol: HTTP/1.1\nHost: localhost:1323\nRemote Address: [::1]:61356\nMethod: GET\nPath: /request. Works fine in Chrome! Thanks. Clearly, I need to get my head around Echo and Go. Thanks!\nRequest Information\nProtocol: HTTP/2.0\nHost: localhost:1323\nRemote Address: [::1]:61521\nMethod: GET\nPath: /request. FWIW, it was my error with curl. I updated curl and then it used HTTP/2. curl will support HTTP/2 by default but this assumes it is compiled with the correct support. On macOS:\nbrew reinstall curl --with-openssl --with-nghttp2. ",
    "Code-Hex": "Closing because it was my misunderstanding.. ",
    "goenning": "Yeah, it really works. I probably made some mistake before \ud83d\ude1e . @vishr LGTM, > 0 is the right condition.. @vishr Are you referring to #988? If so, this PR will fix that. Did you notice any other regression? \nI'd love to keep this on DefaultBinder as binding from route parameter is not an application-specific feature.. @vishr I see there's a new check reflect.TypeOf(ptr).Elem().Kind() == reflect.Slice on bindPathData. Changing it to typ.Kind() != reflect.Struct would fix it.\nI get your point, there could be more unforeseen binding issues. But still, I'd vote for keeping it. I've upgrade to the latest commit and had no issues because all my scenarios are binding to a struct, not slices/maps. But such cases are now covered by unit tests.. I have renamed as suggested.. ",
    "freeformz": "I don't understand Coveralls and why this is now red because of it.. ",
    "runner-mei": "NoRoute() have more advantage than ErrorHandler!\n1. NoRoute() can add middleware handler, ErrorHandler can't.\n2. NoRoute() more user-friendly\u3002\nNoRoute() example as follow:\n````go\npackage mai\nfunc main() {\n    engine := echo.New()\n    engine.Use(middleware.Logger())\n    engine.Use(middleware.Recover())\n       engine.NoRoute(http.DefaultServeMux)\n   q := engine.Group(\"/query\", authQuery) // authQueryis middleware handler,\n   q.GET(\"/hello\", func(ctx echo.Context) error {\n       return ctx.String(http.StatusOK \"hi!\")\n   })\n   q.NoRoute(func(ctx echo.Context) error {\n       return ctx.JSON(http.StatusOK, xxxx)\n   }, auth) // auth is middleware\n\n\n   cfg := engine.Group(\"/config\", authConfig) // authConfig is middleware handler,\n   cfg.GET(\"/hello\", func(ctx echo.Context) error {\n       return ctx.String(http.StatusOK \"hi!\")\n   })\n   cfg.NoRoute(func(ctx echo.Context) error {\n       return  ctx.JSON(http.StatusOK, xxxx)\n   })\n\n}\n````\nErrorHandler() example as follow:\n````go\npackage mai\nfunc main() {\n    engine := echo.New()\n    engine.Use(middleware.Logger())\n    engine.Use(middleware.Recover())\n   q := engine.Group(\"/query\", auth) // auth is middleware handler,\n   q.GET(\"/hello\", func(ctx echo.Context) error {\n       return ctx.String(http.StatusOK \"hi!\")\n   })\n   cfg := engine.Group(\"/config\", auth) // auth is middleware handler,\n   cfg.GET(\"/hello\", func(ctx echo.Context) error {\n       return ctx.String(http.StatusOK \"hi!\")\n   })\n\n\n   engine.ErrorHandler = func(e error, ctx Context) error {\n      if e == echo.ErrNotFound {\n           if strings.Contains(ctx.Request().URL.Path, \"/query\") {\n\n                //  hack! it isn't standard for run handler\n                authQuery(ctx, func(ctx Context) {\n                    return ctx.JSON(http.StatusOK, queryxxxx)\n                } )\n             return nil\n           } else if strings.Contains(ctx.Request().URL.Path, \"/config\") {\n\n                //  hack! it isn't standard for run handler\n                authConfig(ctx, func(ctx Context) {\n                    return ctx.JSON(http.StatusOK, configxxxx)\n                } )\n               return nil\n           }\n          http.DefaultServeMux.ServeHttp(ctx.Response(), ctx.Request())\n          return nil\n      }\n  }\n\n}\n````\n. Logger interface is unnecessary. It is rarely used and is not required in the echo.\n````\ngithub.com\\labstack\\echo\\echo.go:\nfunc (e Echo) DefaultHTTPErrorHandler(err error, c Context) {\n  360       }\n  361       if err != nil {\n  362:          e.Logger.Error(err)\n  363       }\n  364   }\n  ...\n  659  func (e Echo) StartServer(s *http.Server) (err error) {\n  660   // Setup\n  661:  e.colorer.SetOutput(e.Logger.Output())\n  662   s.ErrorLog = e.StdLogger\n  663   s.Handler = e\n  664   if e.Debug {\n  665:      e.Logger.SetLevel(log.DEBUG)\n  666   }\n  667  \ngithub.com\\labstack\\echo\\middleware\\proxy.go:\n  124       err = <-errCh\n  125       if err != nil && err != io.EOF {\n  126:          c.Logger().Errorf(\"proxy raw, copy body error=%v, url=%s\", t.URL, err)\n  127       }\n  128   })\ngithub.com\\labstack\\echo\\middleware\\proxy_1_11.go:\n   18           desc = fmt.Sprintf(\"%s(%s)\", tgt.Name, tgt.URL.String())\n   19       }\n   20:      c.Logger().Errorf(\"remote %s unreachable, could not forward: %v\", desc, err)\n   21       c.Error(echo.NewHTTPError(http.StatusServiceUnavailable))\n   22   }\ngithub.com\\labstack\\echo\\middleware\\recover.go:\n   71                   length := runtime.Stack(stack, !config.DisableStackAll)\n   72                   if !config.DisablePrintStack {\n   73:                      c.Logger().Printf(\"[PANIC RECOVER] %v %s\\n\", err, stack[:length])\n   74                   }\n   75                   c.Error(err)\ngithub.com\\labstack\\echo\\response.go:\n   54  func (r *Response) WriteHeader(code int) {\n   55   if r.Committed {\n   56:      r.echo.Logger.Warn(\"response already committed\")\n   57       return\n   58   }\n````\nOr add a simple logger like:\n````go\ntype Field struct {\n  Key string\n  Value interface{}\n}\ntype Logger interface {\n  Write(level int, msg string, fileds ...Field)\n}\n````. I don't Map\nOr remove SetParamValues() and add SetParam(idx int, name, val string)\n. I like it Context as interface, but need improve now code.\nadd methods:\n````go\n(e *Echo) SetNewContext(newCtx  func() Context) {\n e.pool.New = func() interface{} {\n        return newCtx()\n    }\n}\nfunc (e Echo) ServeHTTP(w http.ResponseWriter, r http.Request) {\n    c := e.pool.Get().(Context)\n    c.Reset(r, w)\n    ......\n    c.Free()\n    e.pool.Put(c)\n}\n````\nmy client code:\n````go\ntype MyContext strcut {\n    echo.Context\nMyField1 xxx\nMyField2 xxx\nMyField3 xxx\n.... xxx\n\n}\nfunc (ctx *MyContext) Free() {\n   ctx.MyField1 = nil\n   ctx.MyField2 = nil\n   ctx.MyField3 = nil\n   ....\n}\nfunc toEchoFunc(h func(ctx MyContext) error) echo.HandlerFunc {\n    return func(ctx echo.Context) error {\n        return h(ctx.(MyContext))\n    }\n}\necho.SetNew(func() echo.Context {\n    return &MyContext{Context: echo.NewContext()}\n})\necho.GET(\"/xxx\", toEchoFunc(func(ctx *MyContext) error {\n   xxxxxxx\n}))\n````\n. add gin.IRoutes(iris.Party)  interface.\n````go\n  e := echo.New()\n  initHandlers(e)     // now is error\n  initHandlers(e.Group(\"/\")) \n  ...\nfunc initHandlers(g *echo.Group) {\n  g.Get(\"/x\", a)\n  g.Get(\"/y\", a)\n}\n````\n. add NoRoute?\nhttps://github.com/labstack/echo/issues/900\nhttps://github.com/labstack/echo/issues/856. @aimeelaplant I don't llke that echo.Context should implement context.Context.\nbut I think context.Context as a Field in echo.Context  is good idea.. Remove logger interface{} or simple it! \nhttps://github.com/labstack/echo/issues/1017. ",
    "bxcodec": "If you looking for example, you could see what gin does here http://godoc.org/github.com/gin-gonic/gin#Engine.NoRoute \nIt will return default 404  for un-registered routes \ud83d\ude44 . ",
    "yoshi42662": "Below should work. I think Group() itself provides just namespace for url, not endpoint.\n```go\npackage main\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/middleware\"\n\n)\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.Logger())\nv1 := e.Group(\"/v1\")\n v1.GET(\"/echo\", func(c echo.Context) error {\n    return c.String(http.StatusOK, \"echo V1 API\")\n})\n\ne.Logger.Fatal(e.Start(\":1323\"))\n\n}\n```\nwhen you access to localhost:1323/v1/echo , you'll get string like echo V1 API .. ",
    "imroc": "thx. ",
    "victorct": "I'm having the same issue, the http  response is not redirected to the https one, making it unable to use http and https at the same time.\nAny update on this bug?. So I have managed to solve this, it's not possible in go to bind the http and https interfaces to the same port, in the case of golang you have to run two servers with a go routine, on the ports 80 and 443, if you do it in different ports it will fail because echo will try to redirect the http connection to the https interface on the same port of the http, and it doesn't exist, example:\nif you have your http on the port 8080 and the https on 1323, when going to 8080 it will redirect to https://localhost:8080, and it will simply fail, that's why you need to run the http on the 80 and the https on the 443.\nHere is my code:\nfunc main (){\n   e := echo.New()\n   e.Pre(middleware.HTTPSRedirect())\n   config.OpenDatabase() // Open database  connection, only once in the lifetime of the app.\n   e.GET(\"/aws/healthy\", func (c echo.Context) error {\n           return c.String(http.StatusOK, \"Healthy!\")\n   })\n   go func(c *echo.Echo){\n            e.Logger.Fatal(e.Start(\":80\"))\n    }(e)        \n   e.Logger.Fatal(e.StartTLS(\":443\", \"bundle.crt\", \"private.key\"))\n}\n\nSo when the user goes to localhost it will redirect to https://localhost, and it will work.. ",
    "renathoaz": "@vishr  sorry to comment on this closed issue, but how can I supress this error: echo: http: TLS handshake error from 192.168.10.125:59282: tls: first record does not look like a TLS handshake. And I'm not being able to get this output on my log using: e.Logger.SetOutput(lf). is there any way to supress this error or log it into a file ?\n. Yes, I'm setting e.Logger.SetOutput(lf) and \ne.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{Output: lf }))\nBoth goes to my logfile, but  this error: echo: http: TLS handshake error from 192.168.10.125:59282: tls: first record does not look like a TLS handshake which is not in json format goes to stdout. am I missing something ? There's a way to suppress it  ?. @vishr  I'm using logrus like this log \"github.com/sirupsen/logrus\" , so I'm overriding the standard log.\nBut anyway I'm telling to logrus log into my logfile:log.SetOutput(lf). shouldn't echo log this error like the others ? I tested here fmt prints to stdout and not to my file. is Echo using fmt  ? \nUpdate:\nI'm using  version = \"3.2.1\"\nin echo.go\nShouldn't this line do the trick ? \ne.stdLogger = stdLog.New(e.Logger.Output(), e.Logger.Prefix()+\": \", 0) . I stumbled at the same thing, I'm doing my application log:\nit goes like this:\n[2018-01-16 10:35:24.38231] [MiddlewareServer/server.go:147] [INFO ] \u2013 Starting....\n[2018-01-16 10:35:24.38252] [MiddlewareServer/server.go:148] [ERROR] \u2013 some error\nInstead of Json format,\nso It annoys me having echo sending logs in json format on my log file.\nIs there any workaround to it ?\nIs it safe to set echo.Logger OFF and use only middleware logger? So I could set my own custom format.\n . ",
    "justinruggles": "httputil.ReverseProxy implements http.Handler, so you could probably do something like:\ne := echo.New()\nproxy := httputil.NewSingleHostReverseProxy(&url.URL{\n    Scheme: \"http\",\n    Host:   \"localhost:8081\",\n})\ne.Any(e.WrapHandler(proxy))\ne.Start(\":8080\"). engine was removed with v3. you need to use the v2 branch or one of the v2.x.x tags.. ",
    "Charrette": "exactly what I needed, thank you :)\nExact syntax is e.Any(\"/users\", echo.WrapHandler(proxy)). ",
    "benbjurstrom": "See #633 for a JWT middleware example using the RS256 algorithm.. ",
    "cthackers": "```go\nimport \"mime\"\nfunc init() {\n    mime.AddExtensionType(\".f4v\", \"video/x-f4v\")\n}\n```\nI usually need to do this for .svg since on linux it sends svg's as xmls not as image/svg+xml. And this is Go in general not echo.\nHope it helps.. ",
    "yobyzal": "@cthackers That works. Think you!. ",
    "adred": "Sorry for the late reply. It still does not work.. This is my current code. It now creates the file. I thought that was the issue but still no logs are written. I'm using Fedora 25. I'll try updating the package tonight. Thanks for taking time to reply.\n```\n// SetLoggerOutput sets the log path\nfunc SetLoggerOutput(cfgLogPath string, debug bool) error {\n    if debug == true {\n        log.SetOutput(os.Stderr)\n        log.SetLevel(log.DEBUG)\n    } else {\n        var file *os.File\n        if _, err := os.Stat(cfgLogPath); os.IsNotExist(err) {\n            file, err = os.Create(cfgLogPath)\n            if err != nil {\n                return err\n            }\n            defer file.Close()\n        }\n        log.SetOutput(file)\n        log.SetLevel(log.WARN)\n    }\nreturn nil\n\n}\n. Never mind. I found out that there are packages out that handles case like this including validation. . @hesidoryn I'm using this [validator](https://github.com/go-playground/validator) package together with echo's Validator interface. [httprouter](https://github.com/julienschmidt/httprouter) has this problem which is a radix tree based router also.. So the test code should be like this:\nContext(\"With existing username param\", func() {\n    It(\"should return http.StatusConflict\", func() {\n        req := new(http.Request)\n        ctx = e.NewContext(req, rec)\n        ctx.SetPath(cfg.API.RootPath + \"/users/usernames/:username\")\n        ctx.SetParamNames(\"username\")\n        ctx.SetParamValues(cfg.User.Username)\n        uh.UsernameExists(ctx)\n        Expect(rec.Code).To(Equal(http.StatusConflict))\n    })\n})\n```\nIt's in the docs. Apologies.. ",
    "rof20004": "Hi, can I save all the logs to database instead stdout?\nI see in documents that needs an io.Writer but I want to save in my database.. @vishr \nIf I use the same name for path param in both methods, it works, but with different names not.. Humm, can you explain why?. Thanks @vishr I will read!. ",
    "nebiros": "Don't know why, it just saves INFO logs, here's the file:\nsh\n19:46 $ cat api.log\n{\"time\":\"2017-06-01T13:32:36.797183103-05:00\",\"id\":\"\",\"remote_ip\":\"192.168.1.50\",\"host\":\"192.168.1.50:8080\",\"method\":\"GET\",\"uri\":\"/some/url/17\",\"status\":200, \"latency\":314143039,\"latency_human\":\"314.143039ms\",\"bytes_in\":0,\"bytes_out\":3134}\n{\"time\":\"2017-06-03T10:45:48.640288865-05:00\",\"id\":\"\",\"remote_ip\":\"192.168.0.3\",\"host\":\"192.168.0.3:8080\",\"method\":\"GET\",\"uri\":\"/some/26/other/129/16/url\",\"status\":200, \"latency\":2544021986,\"latency_human\":\"2.544021986s\",\"bytes_in\":0,\"bytes_out\":0}\nBut, here's the standard output, it logs the types, like ERROR or DEBUG\n\u21e8 http server started on [::]:8080\n{\"time\":\"2017-06-08T19:39:34.074115639-05:00\",\"level\":\"DEBUG\",\"prefix\":\"echo\",\"file\":\"service.go\",\"line\":\"199\",\"message\":\"runing new WS hub (on-demand-26-136-23): 26, 136\"}\n{\"time\":\"2017-06-08T19:39:34.240292103-05:00\",\"level\":\"ERROR\",\"prefix\":\"echo\",\"file\":\"echo.go\",\"line\":\"277\",\"message\":\"code=404, message=Not Found\"}\nMy config:\n```go\nloggerConfig := middleware.DefaultLoggerConfig\nif *env == string(EnvTypeProduction) {\n  f, err := os.OpenFile(\"/var/log/api.log\", os.O_CREATE|os.O_RDWR|os.O_APPEND, 0666)\n  if err != nil {\n    os.Exit(-1)\n  }\ndefer f.Close()\nloggerConfig.Output = f\nif *debug == \"1\" {\n    e.Debug = true\n  }\n} else {\n  e.Debug = true\n}\ne.Use(middleware.LoggerWithConfig(loggerConfig))\ne.Use(middleware.Recover())\nif e.Debug {\n  e.Logger.SetLevel(log.DEBUG)\n}\ne.Logger.Fatal(e.Start(fmt.Sprintf(\":%s\", *port)))\n```. @vishr any help with https://github.com/labstack/echo/issues/871#issuecomment-307265763?. @vishr ofc\n```go\npackage main\nimport (\n    \"flag\"\n    \"net/http\"\n    \"os\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/middleware\"\n\"github.com/labstack/gommon/log\"\n\n)\nfunc main() {\n    e := echo.New()\n    e.GET(\"/\", func(ctx echo.Context) error {\n        ctx.Logger().Debug(\"woot woot!\\n\")\n    return ctx.NoContent(http.StatusOK)\n})\n\nloggerConfig := middleware.DefaultLoggerConfig\n\nf, err := os.OpenFile(\"/var/log/api.log\", os.O_CREATE|os.O_RDWR|os.O_APPEND, 0666)\nif err != nil {\n    log.Errorf(\"cannot open '/var/log/api.log', (%s)\", err.Error())\n    flag.Usage()\n    os.Exit(-1)\n}\n\ndefer f.Close()\n\nloggerConfig.Output = f\n\ne.Debug = true\n\ne.Use(middleware.LoggerWithConfig(loggerConfig))\ne.Use(middleware.Recover())\n\nif e.Debug {\n    e.Logger.SetLevel(log.DEBUG)\n}\n\ne.Logger.Fatal(e.Start(\":8080\"))\n\n}\n```. ",
    "hesidoryn": "@adred Hi! Can you list this packages?. ",
    "kaainet": "Guys? Isn't it a bug?) Or it's me doing something wrong ?. ",
    "dennypenta": "Actually problem in Binder.\nYou have to use bind via query, so you could add \"query:some-field\" tag.\n. I recommend you just implement your custom binder that would perform validation.\nIt's pretty simple and looks like gin does the same.. ",
    "abaehre": "The reason for this is the way the radix tree is created.\nRunning your test file the radix tree looks like such - \n\u2514\u2500\u2500 /, pnames=[] ppath= handler=&{<nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>}\n \u251c\u2500\u2500 users/, pnames=[] ppath= handler=&{<nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>}\n \u2502 \u2514\u2500\u2500 :, pnames=[id] ppath=/users/:id/comments handler=&{<nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>}\n \u2502  \u2514\u2500\u2500 /comments, pnames=[id] ppath=/users/:id/comments handler=&{<nil> <nil> 0x135ff50 <nil> <nil> <nil> <nil> <nil> <nil> <nil>}\n \u2514\u2500\u2500 :, pnames=[resourceName] ppath=/:resourceName/:id handler=&{<nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>}\n  \u2514\u2500\u2500 /, pnames=[] ppath= handler=&{<nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil> <nil>}\n   \u2514\u2500\u2500 :, pnames=[resourceName id] ppath=/:resourceName/:id handler=&{<nil> <nil> 0x135ff50 <nil> <nil> <nil> <nil> <nil> <nil> <nil>}\nyour 3rd test hits on /users/: which has no handlers associated with it since you didn't actually create a handler for that path. It just happened to be an intermediate step in the creation of the tree. \nI'm not sure if this is a limitation of the radix tree, or something specific to echo, but I figured I'd at least comment for those that see this in the future.. ",
    "bsed": "i  yet think known. \u53ea\u80fd\u5728\u5f53\u524d.go \u6587\u4ef6\u4e2d\u5199\u5165 HelloHandler \u65b9\u6cd5\uff0c \u5982\u679c \u653e\u5230\u5176\u4ed6\u5305\u91cc\uff0c\u5c31\u4f1a\u51fa\u73b0\u4e0a\u9762\u7684\u6587\u56fe. ```\n//\u81ea\u5b9a\u4e49claims\n    config := mw.JWTConfig{\n        Claims:     &jwtCustomClaims{},\n        SigningKey: []byte(\"secret\"),\n    }\n    j := e.Group(\"/api/v1\", mw.JWTWithConfig(config))\n    j.GET(\"/hello\", HelloHandler1)\nreturn e\n\n}\nfunc HelloHandler1(c echo.Context) error {\n    user := c.Get(\"user\").(jwt.Token)\n    claims := user.Claims.(jwtCustomClaims)\n    name := claims.Name\n    logrus.Debug(\"name: \" + claims.ID)\n    return c.String(http.StatusOK, \"Welcome \"+name+\"!\")\n}\n```\n \u5199\u5230\u540c\u4e00\u4e2a\u5305\u4e0b\u662f\u53ef\u4ee5\u7684\uff0c \u4e0d\u540c\u5305\u4e0b \u5c31\u51fa\u95ee\u9898\n\u540c\u4e00\u4e2a\u5305\u4e0b\uff0c\u8c03\u8bd5\u7684\u65f6\u5019\u51fa\u73b0claims \u4e71\u7801\nj.GET(\"/hello\", HelloHandler1)\u6539\u4e3a j.GET(\"/hello\", handler.HelloHandler1) \u5c31\u51fa\u95ee\u9898\n. \u6ca1\u4eba\u56de\u7b54\uff0c\u5173\u95edl. good~. an occasional on debug\n. \n. i  use  vscode  debug have the same problem yet\n. \u597d\u7684 \u8c22\u8c22~. @zanjs \u5bf9\u554a\u3002 \u95ee\u6211\u73b0\u5728\u7528\u7684\u662f\u81ea\u5b9a\u4e49\u9519\u8bef \u89e3\u51b3\u7684\n\n. \u4f60\u53ef\u4ee5\u770b\u770b\u77e5\u4e4e\u4e0a\u67d0\u4f4d\u7ae5\u978b\u5199\u7684\u5bf9 echo \u6846\u67b6\u8fdb\u884c\u7edf\u4e00\u7684\u81ea\u5b9a\u4e49\u9519\u8bef\u5904\u7406 \uff0c \u6211\u7684\u662f\u5728\u4ed6 \u57fa\u7840\u4e0a\u4fee\u6539\u7684\uff0c\u5e0c\u671b\u5bf9\u4f60\u6709\u5e2e\u52a9\u3002\n\u9700\u8981\u7a0d\u5fae\u4fee\u6539\u5199\u5c31\u53ef\u4ee5\u7528\u4e86\u3002\n\n. \n\n\n. \u5dee\u4e0d\u591a \u5c31\u8fd9\u4e9b\u4e86\u3002. \u5ba2\u6c14\uff0c\u5ba2\u6c14\u3001 @zanjs  (^__^) \u2026\u2026. no answer, close.. cannot load custom data \neg:\nbuf := new(bytes.Buffer)\nio.MultiWriter(c.Response().Writer, buf)\nrespBody := buf.Bytes()\nrespBody, _ = bfw.Encrypt(respBody)\nfmt.Println(\"respBody, \", respBody)\nc.Response().Write(respBody). golang\nres := c.Response()\n            rw := res.Writer\n            buf := new(bytes.Buffer)\n            io.MultiWriter(rw, buf)\n            res.Writer = rw\n            err = next(c)\n            body := buf.String()\n            fmt.Printf(\"body: %s \\n\", body)\ni use the following notation also can not\n. Nobody answered, close this link\n. ",
    "Rasarts": "Maybe you can try OPTIONS method for send cors headers from server?. ",
    "mr-tron": "i think #839 is the same problem. ",
    "xrayid": "Thanks you!. ",
    "nownabe": "@vishr Thank you!! \ud83d\ude04 :sparkles:. ",
    "MarcusMann": "You can experience integration with Twitter, as far as I know, is what you have available right now. But, you can implement your own middleware using the google lib.\nTwitter -> https://echo.labstack.com/cookbook/twitter\nGoogle -> https://github.com/golang/oauth2. I think it's a Go subject and not Echo, you can retrieve the information here.\nAnswer 1\nOr get more information about tags.\nhttps://github.com/golang/go/wiki/Well-known-struct-tags. ",
    "pcdummy": "I'm using OAuth and OAuth2 with echo\nDemo, Source, Twitter. @vishr First thanks for your response!\nI tried the SPA middleware, it seems that it eats up every other route i have defined with HTML5 enabled so it wasn't the right choice for my development environment, serving an API and static files.\nOverwriting echo.HTTPErrorHandler should do the trick. I still like the NotFoundHandler in context.File you don't?\nNOTE: The error-handling doc is missing that you have to overwrite echo.HTTPErrorHandler.\n. @vishr Done for the ErrNotFound, haven't found anything for ErrMethodNotAllowed.. Just checked, I didn't miss any of these.. Both are fine, router.go:285 is the handler itself, echo.go:261 is inside the handler.. ",
    "LemonRuss": "Thank you, i tried! There was something more. I took \"httpexpect\" library, it helps. . ",
    "VICTOR-LUO-F": "thanks.. ok. Ok. I already learned the HUGO yesterday, I will try my best, thank you .. Thank you! I already start working.. give me a week more :). ",
    "rv-rsouza": "Sorry. This was an accident.. ",
    "trtstm": "Yes, that gave me the same problem. Which makes sense looking at the code I linked. If you don't pass in a struct it doesn't work.. I tried this:\nparams := []struct {\n    Start time.Time `json:\"start\" form:\"start\"`\n    End   time.Time `json:\"end\" form:\"end\"`\n    Title string    `json:\"title\" form:\"title\"`\n}{}\n\nerr := ctx.Bind(&params)\n\nWith this form data:\nstart:2017-03-31T00:00:00+02:00\nend:2017-03-31T10:29:44+02:00\ntitle:31/03/2017\nstart:2017-03-30T00:00:00+02:00\nend:2017-03-30T23:59:59+02:00\ntitle:30/03/2017\nstart:2017-03-29T00:00:00+02:00 \nend:2017-03-29T23:59:59+02:00\ntitle:29/03/2017\nstart:2017-03-28T00:00:00+02:00\nend:2017-03-28T23:59:59+02:00\ntitle:28/03/2017\n\nWhich gives me:\nFailed to bind params: %vcode=400, message=Binding element must be a struct\n\nWhich makes perfect sense because of the code I linked in my first post. . ",
    "Noki": "@vishr\nLooks like the 1.7 build (https://travis-ci.org/labstack/echo/jobs/216771345) is broken. This is nothing we could fix.\nBest regards\nTobias. ",
    "zanjs": "@bsed \u8def\u7531\u627e\u4e0d\u5230 \u5199\u5728\u54ea\u7684. @bsed  \u54e6 \u8fd9\u662f \u91cd\u5199 HTTPErrorHandler  \u53f3\u8fb9  handler.HTTPErrorHandler  \u4f60\u662f\u600e\u4e48\u5199\u7684\u5440 . @bsed \u8c22\u8c22\u5566\ud83d\ude43. ",
    "anjmao": "Can you try it with error handling like this \ngo\nif err := c.Bind(u); err != nil {\n  return err\n}\nThis will show what is wrong\nMore examples here https://github.com/labstack/echo/blob/master/cookbook/crud/server.go#L31. This is nice, I also wanted something like this, but I think it must be configurable on the middleware like this:\ngo\ne.Use(middleware.Logger(logBody: true))\nbecause in some cases it can generate huge logs and you may not want that. @vishr What do you think ?. One thing I can think of is omitempty\n``go\ntype User struct {\n   ID   stringjson:\"id,omitempty\"Name stringjson:\"name\"`\n}\n...\nu := User{Name:\"Test\"}\nIf ID is not filled then you will not see this field in json response at all, not sure if this is hat you want.. @bsed Can you describe what is the problem with this, is it related to any security issue? I tested this case and it works fine.. 1) This works for me, I got logs to output, but json format is incorrect, not sure if it is by design @vishrjson\n{\n\"time\": \"2017-05-10T16:38:50.9863235+03:00\",\n\"level\": \"ERROR\",\n\"prefix\": \"echo\",\n\"file\": \"recover.go\",\n\"line\": \"82\",\n\"message\": \"Hi MIDDLEWARE!\"\n\n}\n{\n    \"time\": \"2017-05-10T16:38:50.9868195+03:00\",\n    \"level\": \"ERROR\",\n    \"prefix\": \"echo\",\n    \"file\": \"recover.go\",\n    \"line\": \"82\",\n    \"message\": \"Hi again MIDDLEWARE!\"\n}\n``\n1) Have you checked for err? because your code panics for me, I'm on windows so I used path with no starting slash/` and added tmp directory by hand\ngo\nlogStorage, err := os.Create(\"tmp/log.json\")\nif err != nil {\n   panic(err)\n}\n. I also tested it on docker with linux debian:jessie image and I logs has been written to /tmp/log.json successfully.. I looked at other implementations and this seems ok, usually you want to log to stdout and have some service which will get these logs, parse and put to storage like elastic search. When you choose log to file you just get the same output.  @Limoli I think this issue can be closed :). It was a problem on my side probably because I was using vendoring and go dep. I was able to fix it by creating custom GOPATH and linking GOROOT to google app engine go SDK. https://stackoverflow.com/questions/39948027/how-do-i-make-vendoring-work-with-google-app-engine/40118834#40118834. I found example https://github.com/nikolay-turpitko/x-gae-dep how to setup app engine correctly so it can also run locally. \nInstead of using commands go run main.go you can use \ngoapp serve ./appengine/echo/app.yaml which will simulate real app engine environment in production (which is really nice way to run app locally). It also gives local admin UI so can see all you app engine services with bunch of information.\nCookbook app engine tutorial seems to be out of date.. @vishr Sure, I can write a new wiki page with a tutorial how to setup app engine so you can run it even locally using GAE SDK.. @vishr I registered new issue for golang appengine https://github.com/golang/appengine/issues/114 becaus it looks like current solution is kind of a workaround. I'm waiting for response until I can start writing proper documentation :). ",
    "dignifiedquire": "I am seeing the same issue, sending the correct values as in the tests, but it always fails. Never mind, not setting the cookies in the client properly. ",
    "kiag0": "this link is broken https://github.com/labstack/echo/issues/600#issuecomment-233098970, how can i get the solution if link not working?. ",
    "pyama86": "I agree with your opinion \ud83d\udc4d \nMay I work?. fix: https://github.com/labstack/echo/issues/891. ",
    "subchen": "@vishr, Guide document updated, please help review. \nThanks. OK, I will update.. ",
    "durango": "Well, can it?. ",
    "mujdatcicek": "Hi @Anjmao, thanks for your anwser,\nI tried this, before return i filling ID as empty, but this isn't what i need. I have hundreds of models and field like this. \nI want to define all hidden fields in their model file or something like that.. ",
    "yashsriv": "How about this:\ngolang\ntype User struct {\n   ID   string `json:\"-\"`\n   Name string `json:\"name\"`\n}\n...\nu := User{ID: \"1234, Name:\"Test\"}. ",
    "aruhi": "@vishr Thanks! \ud83d\ude04 . ",
    "lavenderx": "Hi @vishr , I have the same questtion, I notice the source code about jwt.go#JWTWithConfig:\n```\nreturn func(next echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) error {\n            if config.Skipper(c) {\n                return next(c)\n            }\n        auth, err := extractor(c)\n        if err != nil {\n            return echo.NewHTTPError(http.StatusBadRequest, err.Error())\n        }\n        token := new(jwt.Token)\n        // Issue #647, #656\n        if _, ok := config.Claims.(jwt.MapClaims); ok {\n            token, err = jwt.Parse(auth, config.keyFunc)\n        } else {\n            claims := reflect.ValueOf(config.Claims).Interface().(jwt.Claims)\n            token, err = jwt.ParseWithClaims(auth, claims, config.keyFunc)\n        }\n        if err == nil && token.Valid {\n            // Store user information from token into context.\n            c.Set(config.ContextKey, token)\n            return next(c)\n        }\n        return echo.ErrUnauthorized\n    }\n}\n\n```\ntoken, err = jwt.ParseWithClaims(auth, claims, config.keyFunc), the results of JWT token validation are multiple, e.g. ValidationErrorExpired. In my view, I want to return error instead of echo.ErrUnauthorized. Although I customise error handling and jwt.StandardClaims, caused by return echo.ErrUnauthorized, the response is always {\"error\":\"Unauthorized\",\"message\":\"Unauthorized\"}.\nThis my code github.com/lavenderx/squirrel, looking forward to your reply.:blush:\n. ",
    "limoli": "Yeah, I am on OSX. \nI haven't any error on file creation.\nThe file is created at the beginning of the application and if it already exists it will be empty.\nI have no errors.\nSimply when I log something from context the logs are not put in the file.\nI will test more.\n. OK, find the problem!\nThe file was already closed, so the Echo Logger cannot write on it. . As @Anjmao said, there is a problem with the JSON format of created logs.\n```json\n{\n\"time\": \"2017-05-10T16:38:50.9863235+03:00\",\n\"level\": \"ERROR\",\n\"prefix\": \"echo\",\n\"file\": \"recover.go\",\n\"line\": \"82\",\n\"message\": \"Hi MIDDLEWARE!\"\n\n}\n{\n    \"time\": \"2017-05-10T16:38:50.9868195+03:00\",\n    \"level\": \"ERROR\",\n    \"prefix\": \"echo\",\n    \"file\": \"recover.go\",\n    \"line\": \"82\",\n    \"message\": \"Hi again MIDDLEWARE!\"\n}\n`\n**Comas miss between each block.** \nIt is impossible to work easily on a file in this way. It would be better add a coma at the end of each block when you set logger output different form Standard (Out/Err). . Ok. I thought that it was automatic since the log is in JSON format and \"there was\" the possibility to write on file. I will do manually, but sincerely this \"output feature\" seems not so useful.. Did you fix this? @jney . Ok, I have just found a little verbose solution to do that, but it works.. Hi @jney, I simply created a function that copies the values of an echo context to a default context.go\nconst (\n    contextStoreKey = \"v\"\n)\nfunc Copy(ctxFrom echo.Context, ctxParent context.Context) context.Context {\n        values := Values{}\n    for _, key := range keys {\n        if v := ctxFrom.Get(key); v != nil {\n            values[key] = v\n        }\n    }\n    return context.WithValue(ctxParent, contextStoreKey, values)\n}\n```\nExample of use\ngo\nfunc (r *Auth) SetRoutes(g *echo.Group) {\n    g.Any(\"\", func(c echo.Context) error {\n        handler.GetAuthHandler(false).ContextHandler(ctx.Copy(c, context.Background()), c.Response(), c.Request())\n        return nil\n    })\n}. @jney I think that it is not possible since echo.Context is an implementation over standard context.Context. What is implemented over context.Context cannot be transferred into an another context.Context in an elegant way. You have to copy the values that you need into a native context.. @jney Obviously, echo could provide a method on echo.Context to retrieve a native context.Context as I did.. ",
    "jimsmart": "That output format here is 'concatenated JSON', used when streaming.\nhttps://en.wikipedia.org/wiki/JSON_streaming#Concatenated_JSON\nTo parse it in Go, use json.Decoder\nhttps://golang.org/pkg/encoding/json/#example_Decoder\nI realise I'm commenting on a closed issue \u2014 maybe the info will be useful to someone in future.. ",
    "Gobonoid": "Or even to be more flexible in terms of production logging I would change \"\u21db http server started on %s\\n\" message in StartServer method to use defined logger or even delete them.. @vishr I don't want to turn off logs. I want to log to STDOUT logs relevant to my business logic with a logger that I am using also in different part of service (I use echo asynchronously).\nAccording to the code in echo repository:\n```\n// StartServer starts a custom http server.\nfunc (e Echo) StartServer(s http.Server) (err error) {\n    // Setup\n    e.colorer.SetOutput(e.Logger.Output())\n    s.Handler = e\n    s.ErrorLog = e.stdLogger\nif s.TLSConfig == nil {\n    if e.Listener == nil {\n        e.Listener, err = newListener(s.Addr)\n        if err != nil {\n            return err\n        }\n    }\n    e.colorer.Printf(\"\u21db http server started on %s\\n\", e.colorer.Green(e.Listener.Addr()))\n    return s.Serve(e.Listener)\n}\nif e.TLSListener == nil {\n    l, err := newListener(s.Addr)\n    if err != nil {\n        return err\n    }\n    e.TLSListener = tls.NewListener(l, s.TLSConfig)\n}\ne.colorer.Printf(\"\u21db https server started on %s\\n\", e.colorer.Green(e.TLSListener.Addr()))\nreturn s.Serve(e.TLSListener)\n\n}\n```\ncolorer is a private value of echo structure and is created always logger doesn't have anything common with it.\nMy code:\n```\npackage server\nimport (\n    \"fmt\"\n    \"time\"\n    \"github.com/Sirupsen/logrus\"\n    \"github.com/karhoo/svc-users/app/configuration\"\n    \"github.com/karhoo/svc-users/app/interface/rest/handler\"\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/middleware\"\n    \"github.com/pkg/errors\"\n    \"github.com/sandalwing/echo-logrusmiddleware\"\n    \"golang.org/x/net/context\"\n)\ntype WebHookServer struct {\n    echo *echo.Echo\n    conf configuration.WebHookServer\n}\nfunc NewWebHookServer(conf configuration.WebHookServer, log logrus.Logger, handler handler.WebHookHandler) *WebHookServer {\n    e := echo.New()\n    e.Logger = logrusmiddleware.Logger{Logger: log}\n    e.Use(logrusmiddleware.Hook())\n    e.Use(middleware.Recover())\n    e.GET(\"/postUserRegistration\", handler.PostUserRegistrationHookHandler)\n    return &WebHookServer{\n        echo: e,\n        conf: conf,\n    }\n}\nfunc (s WebHookServer) Start() {\n    go func() {\n        if err := s.echo.Start(fmt.Sprintf(\":%d\", s.conf.Port)); err != nil {\n            s.echo.Logger.Fatal(errors.Wrap(err, \"Failed to start WebHookServer\"))\n        }\n        s.echo.Logger.Info(\"WebHookServer started\")\n    }()\n}\nfunc (s WebHookServer) Stop() {\n    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n    if err := s.echo.Shutdown(ctx); err != nil {\n        s.echo.Logger.Fatal(errors.Wrap(err, \"failed to shutdown WebHookServer\"))\n    }\n}\n```\nI can't see how to do it. Could you point me on the right track?. @vishr Yes I am talking only about initial setup color logs.. ",
    "Crizstian": "How can i inject the user manually in the echo context ?\ni need to test the following code and i depend on the jwt value.\n```\n// create live channel > /restricted/live/create\nfunc CreateLive(c echo.Context) error {\n    // obtener el account_id desde el token\nuser := c.Get(\"user\").(*jwt.Token)\nclaims := user.Claims.(jwt.MapClaims)\naccountId := int(claims[\"account_id\"].(float64))\n\n// buscar si tiene un customer_id en la tabla \"customers\"\nvar customerInfo = new(models.CustomerInfo)\nDb.Table(\"customers c\").Select(\"c.account_id, c.customer_id, cc.card_id\").Joins(\"left join customers_cards cc on cc.customer_id = c.customer_id\").Where(\"c.account_id = ? AND cc.active = ?\", accountId, 1).First(&customerInfo)\n\n}\n```. Thanks for helping, injecting it manually works.. Solution is to create the token and dont sign it, set the context\nc.set('user', *jwtToken)\n. ",
    "jorbs": "Very nice. Even though the user must implement the listing of the routes by himself. What I meant is to have a ready tool.. ",
    "hsluoyz": "Issue solved.. You can use the APIs to get/modify the permissions dynamically: https://casbin.org/docs/en/policy-management. Hi @vishr,\nCasbin's external dep is only one: github.com/Knetic/govaluate\nSee here: https://godoc.org/github.com/casbin/casbin?imports. Hi @vishr , I found that the link you provided (https://github.com/labstack/echo-contrib/tree/master/casbin) is 404 for me:\n\nany possible causes? Thanks.. It works now, thanks!. ",
    "pratuljain": "Hello,\nI want to use Rbac of casbin in my echo golang based project.I have extracted the dynamic permissions of a user from my jwt token and now I want to apply Rbac at routing . How can I use casbin Rbac approach here. In the reference doc of casbin , I have seen a csv file approach ,but how can I use it dynamically?. ",
    "AaronWharton": "Yeah, there is nothing wrong with the project! I just misunderstood what it says. Sorry to bother you, Have a nice day!. ",
    "c-Monster": "Oops. Turns out echo just exits and sometimes my goroutine could beat it, other times no. Two-line fix. Case closed.. ",
    "hyacinthus": "Thank you!. ",
    "xqbumu": "@vishr  thank you. ",
    "tiabc": "@vishr, in DreamFactory the token is issued by POST query to /user/session and should be provided in X-DreamFactory-Session-Token to restricted endpoints.\nThe application I'm writing must do the same thing and also handles GET queries to /user/session and issues a JWT token and should expect the issued token in the same header.\nAnd the problem is that although X-DreamFactory-Session-Token is the Bearer type, it's expected to just contain the token without any AuthScheme before it in DreamFactory and so the same should apply to my application.. When I provide empty AuthScheme, it takes the default value, i.e. Bearer and it takes no effect. Providing space also didn't work but maybe I haven't tried so hard. Anyway, extra space is an unreliable solution as a consumer may or may not add a space after the header colon and it must work correctly any way.. ",
    "alexaandru": "@vishr @tiabc I propose to close this issue as it seems to no longer be a problem: https://github.com/dreamfactorysoftware/df-core/blob/474dd81b0f7a314b32ad52848065b821a3dd09fe/src/Http/Middleware/AuthCheck.php#L109-L112 - seems that nowadays DreamFactory supports JWT in standard/recommended way (Authorization: Bearer ) so the \"hack\" above is no longer needed. . Closing this as a solution was provided.. \nIt works now fine on GAE @vishr closing this.\nJust a heads up that it wasn't exactly straightforward to deploy, see here why: https://github.com/valyala/fasttemplate/issues/8\nOnce I followed the step in there, it all worked, as you can see above. But that is unrelated to this story, hence I'm closing it.\n. @roman-vynar could you please detail what you mean by \"Logger interface is not generic\" ? What exactly could it make \"more generic\"? As far as I understand it, as long as you have a type that implements that interface it, you can pass it as the logger, and then your type can decide exactly what to log and what to skip.\nThat being said, the interface is huge, that's a lot to implement...\n@vishr @im-kulikov given how many upvotes this story has, I'd reopen it and give it some more thought. Maybe we can find a way to make it easier for end users to implement custom logic for logging... Thoughts?. Thanks @L11R and @im-kulikov for your feedback! Alright then let's see what we can do about this for V5... :-) . @fanus Behind the scenes Static() does the exact same thing: https://github.com/labstack/echo/blob/master/echo.go#L451 . It looks like e.Static() uses static() https://github.com/labstack/echo/blob/3cdcc65b23540bffa1d271a22e77014f627de569/echo.go#L444 which uses c.File() which uses http.ServeContent() https://github.com/labstack/echo/blob/ec048ea5231ff36137b9efd41fec86759e21e553/context.go#L508\nNowhere along this chain I see echo setting up the Content-Type. The only place that I see in Echo that the Content-Type is set (not counting the middleware) is here: https://github.com/labstack/echo/blob/ec048ea5231ff36137b9efd41fec86759e21e553/context.go#L433 which does not seem related to this.\nThat means that whatever Content-Type is set, is set by https://golang.org/pkg/net/http/#ServeContent which basically boils down to:\n\nmime.TypeByExtension(filepath.Ext(name)) (https://golang.org/src/net/http/fs.go?s=4818:4922#L194) or, if that fails (returns empty string), then\nhttp.DetectContentType(...) (https://golang.org/src/net/http/fs.go?s=4818:4922#L199).\n\n@vishr please correct me if I'm wrong in any of this.\nShouldn't be hard to write a tiny program that tests these two functions directly and see what they return under each OS.. Did a tiny test with this (and using http://zeptojs.com/zepto.js for testing):\n```go\npackage main\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"mime\"\n    \"net/http\"\n    \"os\"\n    \"path/filepath\"\n)\nfunc main() {\n    if len(os.Args) < 2 {\n        fmt.Println(\"Need a filename\")\n        os.Exit(1)\n    }\nname := os.Args[1]\n\nfmt.Println(\"mime.TypeByExtension:\", mime.TypeByExtension(filepath.Ext(name)))\n\ncontent, err := ioutil.ReadFile(name)\nif err != nil {\n    fmt.Println(err)\n    os.Exit(2)\n}\n\nfmt.Println(\"http.DetectContentType:\", http.DetectContentType(content))\n\n}\n```\nUnder Linux Mint 18.3 I get:\n$ ./x zepto.js \nmime.TypeByExtension: application/javascript\nhttp.DetectContentType: text/plain; charset=utf-8\nUnder Windows 10 I get:\nE:\\>x.exe zepto.js\nmime.TypeByExtension: application/x-javascript\nhttp.DetectContentType: text/plain; charset=utf-8\nSo far so good. Then I tried this little program:\n```go\npackage main\nimport \"github.com/labstack/echo\"\nfunc main() {\n    e := echo.New()\n    e.Static(\"/\", \"dist\")\n    e.Start(\":3000\")\n}\n```\nUnder Linux I get:\n$ curl -IXGET http://localhost:3000/zepto.js\nHTTP/1.1 200 OK\nAccept-Ranges: bytes\nContent-Length: 58707\nContent-Type: application/javascript\nLast-Modified: Mon, 11 Dec 2017 23:15:09 GMT\nDate: Fri, 02 Mar 2018 14:54:43 GMT\nand under Windows:\nAccept-Ranges:bytes\nContent-Length:58707\nContent-Type:application/x-javascript\nDate:Fri, 02 Mar 2018 14:58:53 GMT\nLast-Modified:Fri, 02 Mar 2018 14:45:38 GMT\nIt seems to perfectly match the earlier test, and also both seem to output an accepted content type for javascript (https://mathiasbynens.be/demo/javascript-mime-type).\nNow if I add middleware.Secure into the mix, I still get the correct Content-Type under Linux BUT no Content-Type at all under Windows:\nDate:Fri, 02 Mar 2018 15:04:10 GMT\nLast-Modified:Fri, 02 Mar 2018 14:45:38 GMT\nX-Content-Type-Options:nosniff\nX-Frame-Options:SAMEORIGIN\nX-Xss-Protection:1; mode=block\nThis is quite odd, I don't see anything in that middleware that would overwrite ContentType, so http.ServeContent should kick in and add it. @vishr going to reopen this, hope that's OK.\n. Given\n```go\npackage main\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\n\n)\nfunc main() {\n    e := echo.New()\n    e.POST(\"/api/v1/:sub/:id/likes\", func(c echo.Context) error {\n        return c.String(http.StatusOK, \"All good\")\n    })\n    e.Start(\":3000\")\n}\n```\nI get\nsh\n$ curl -d \"foo\" http://localhost:3000/api/v1/foo/42/likes\nAll good\nIt all works as expected. Could you provide some actual code and what error you get?. Still works as expected:\n```go\npackage main\nimport (\n    \"fmt\"\n    \"net/http\"\n\"github.com/labstack/echo\"\n\n)\nfunc main() {\n    e := echo.New()\n    e.POST(\"/api/v1/moments/:id/like\", func(c echo.Context) error {\n        return c.String(http.StatusOK,\n            fmt.Sprintf(\"All good, from id like: %s\", c.Param(\"id\")))\n    })\n    e.POST(\"/api/v1/moments/:id/:sub/:id/likes\", func(c echo.Context) error {\n        return c.String(http.StatusOK,\n            fmt.Sprintf(\"All good, from id/sub: %s/%s\", c.Param(\"id\"), c.Param(\"sub\")))\n    })\n    e.Start(\":3000\")\n}\n```\nGives me:\n```bash\n$ curl -d '' localhost:3000/api/v1/moments/42/like\nAll good, from id like: 42\n$ curl -d '' localhost:3000/api/v1/moments/1/hello/1000/likes\nAll good, from id/sub: 1/hello\n```\nThat being said, your 2nd route makes little sense: /api/v1/moments/:id/:sub/:id/like - you have the :id parameter in there twice, which can lead to unexpected/unspecified behavior. Which parameter would you expect to receive in the code? The 1st one or the 2nd? It's only one name and two instances of that name.\n. @bogh I cannot reproduce, the code above works just fine on my end, and I am on the latest master: 6da048344775e2002ddf447d0dab104b119d9f1c\nGiven:\n```go\npackage main\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\n\n)\nfunc hello(c echo.Context) error {\n    return c.String(http.StatusOK, \"Hello World\")\n}\nfunc main() {\n    e := echo.New()\ngroups := e.Group(\"/groups\")\ngroups.GET(\"\", hello)\ngroups.POST(\"\", hello)\ngroups.GET(\"/:id/detail\", hello)\ngroups.PUT(\"/:id\", hello)\ngroups.DELETE(\"/:id\", hello)\ngroups.PUT(\"/:id/users\", hello)\n\ne.Start(\":3000\")\n\n}\n```\nI get:\n$ curl http://localhost:3000/groups/1/detail\nHello World\nCould you please provide complete code that I can run on my end in order to reproduce? Thanks!. I thank you @vishr for a really nice framework :) Cheers!. I second this request, it makes a lot of sense. Benefits would include (besides the already mentioned - clean and modularized):\n- smaller binary (which may matter for things like AWS Lambda or why not RaspberryPi & friends);\n- eliminate name clashing (for example, right now default configs are DefaultGzipConfig, DefaultLoggerConfig, etc. whereas with separate packages, they could all be simply DefaultConfig - the package already gives the necessary context of what config that is (gzip.DefaultConfig, jwt.DefaultConfig, etc.));\n- lower the barrier of entry for new middleware (they only need to be concerned with their own logic, not also with the \"careful not to conflict with other middleware vars/functions/etc.\").\nThe only catch is that this would be a breaking change, so it needs to be communicated \"properly\" (whatever that means...) to the end users.. That makes sense @vishr we should give people plenty of heads up for breaking changes.. I'm all good @im-kulikov @vishr haven't seen anything even remotely unpolite :) and I'm sorry if any of my advices caused troubles. May I know which one that was? Cheers!. @vishr This simplification assumes that everyone is using Windows, which is not the case. Going further, Windows and OSX users will need to handle deps themselves, which seems like a regression.. @im-kulikov OSX is unix-like, and so is Windows with Cygwin installed. Neither of them will be able to run dep-linux-amd64 binary though.. It seems that if we just use the provided install instructions, that is cross platform friendly:\ncurl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh\n. Or even better use the CORS middleware which will add this header (and others) for free :) . @yan-xz I cannot reproduce this.\nGiven:\n```go\npackage main\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/middleware\"\n\n)\nfunc hello(c echo.Context) error {\n    return c.String(http.StatusOK, \"hello world\")\n}\nfunc main() {\n    e := echo.New()\ne.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n    AllowOrigins: []string{\"*\"},\n    AllowMethods: []string{echo.HEAD, echo.POST, echo.OPTIONS},\n}))\n\ne.GET(\"/\", hello)\n\ne.Start(\":3000\")\n\n}\n```\nI get:\n```\n$ curl -IXGET http://localhost:3000\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nContent-Type: text/plain; charset=UTF-8\nVary: Origin\nDate: Wed, 28 Feb 2018 08:09:26 GMT\nContent-Length: 11\n```\nand no error. It all works as expected.\nWhat Echo version are you using? Could you post a sample program that exhibits this error?. @HouzuoGuo @vishr Not sure I understand what the problem is. Especially the \"run HTTP server without specifying a port number in order to listen on any\" part - could you please provide an example of such a test? \nAs far as I see, you cannot even run echo without a port https://github.com/labstack/echo/blob/master/echo.go#L590 in the 1st place and if you run net/http.Server without an address (with an empty one) it defaults to port 80 (http) NOT to \"all available ports\": https://golang.org/pkg/net/http/#Server. I also should've been more clear about the example I asked for @HouzuoGuo :) - could you please provide an example of a test case where you need to find out this port dynamically? Just trying to understand what is it that you're trying to test that you cannot simply run echo with a known port and instead need to dynamically allocate it and then dynamically find it. Being testing, I'd imagine you'd have more control over the settings/context and be able to control it, no? . Thank you @HouzuoGuo that makes sense now, I can see how this can be useful. I will look into this. Cheers!. @HouzuoGuo Sorry, I'm still not able to replicate the issue you're facing:\nGiven:\n```go\npackage main\nimport (\n    \"fmt\"\n    \"net\"\n    \"time\"\n\"github.com/labstack/echo\"\n\n)\nfunc main() {\n    e := echo.New()\n    go e.Start(\":0\")\n    time.Sleep(1 * time.Second)\n    fmt.Println(\"Port is:\", e.Listener.Addr().(*net.TCPAddr).Port)\n}\n```\nI get:\n```\n$ go run x.go \n_    _\n  / // /  \n / _// __/ _ \\/ _ \\\n//_////_/ v3.2.6\nHigh performance, minimalist Go web framework\nhttps://echo.labstack.com\n______O/_\n                                    O\\\n\u21e8 http server started on [::]:41687\nPort is: 41687\n```\nSeems to work as expected, no?. You're most welcome @HouzuoGuo :) Cheers!. Will do @vishr . @jney Did you try (as part of your cleaning()) to close the server yourself? Not sure why you would expect the echo server to close itself on Ctrl-C, it's not Echo that's catching that signal after all. All you need is either e.Close() or e.Shutdown(ctx) as part of your cleanup - you can see them here: https://github.com/labstack/echo/blob/e7c89c424f0e4b0e9d5b47027701e269d4028a44/echo_go1.8.go and you can see the latter being used here: https://echo.labstack.com/cookbook/graceful-shutdown\n@vishr - please correct me if I'm wrong, still learning... :) Cheers!. Great, thanks @jney  Closing this issue then. Cheers!. Created PR @vishr - https://github.com/labstack/echo/pull/1075  Cheers!. You're most welcome @mymtw :). Sure, I'll give it a try @vishr  Thanks! :) . @vishr Should the next release be 3.2.7 or 3.3.0? Seems like it's more than just fixes in this release, so that would warrant a minor version increment (so 3.3.0).. @vishr Created https://github.com/labstack/echo/pull/1081 - let me know what you think of the message (and the tiny addition to the Makefile, to make tagging easier). If it looks good, I'll just reuse that message for the release itself.\nAlso, it looks like historically, tags were using the \"v\" prefix (v1.2.3) but recent tags were just the \"1.2.3\" alone, no \"v\" prefix. I assume that's the way to go forward with respect to tagging (no v)? Thanks!. The new release is available at https://github.com/labstack/echo/releases/tag/3.3.0\nClosing this issue.. This reminds me of Rails' respond_with/respond_to: https://apidock.com/rails/ActionController/MimeResponds/respond_to but even in Rails, it was eventually moved out of the framework into a standalone gem: https://stackoverflow.com/questions/6118639/rails-respond-with-how-does-it-work\nThen I got curious to see how Django deals with it: http://blog.clintecker.com/post/66089491/django-multiresponse\nSounds like something that could be useful, but also sounds like something that could live in a library by itself. Even Rails \"monster framework\" (and I say that with love :-), worked in Rails for years) - refactored it out of the framework, so it doesn't feel like it would belong in a minimalist framework such as Echo. But that's just me... :)  Thoughts @vishr ?. Sure, doing that now @vishr .... I saved it as a draft @vishr - let me know if it looks good. Also - the Assets part - is that something that Github provides (when is published?) or do I have to create that .zip and .tar.gz manually?. Nice, thanks @vishr ! Done!. My pleasure @vishr :) Cheers!. You seem to have a stale acme/autocert library. autocert.Manager DOES currently have that method: https://godoc.org/golang.org/x/crypto/acme/autocert#Manager.HTTPHandler  I suggest a go get -u golang.org/x/crypto/acme/..... You're most welcome :) Cheers!. Duplicate issue: #1082   Please see the other ticket for the fix, closing this.. Please see #1082 . Using the latest master and this code:\n```Go\npackage main\nimport (\n    \"fmt\"\n    \"net/http\"\n\"github.com/labstack/echo\"\n\n)\ntype CustomBinder struct{}\ntype Request struct {\n    ID string\n}\nfunc (cb *CustomBinder) Bind(i interface{}, c echo.Context) (err error) {\n    // You may use default binder\n    db := &echo.DefaultBinder{}\n    if err = db.Bind(i, c); err != echo.ErrUnsupportedMediaType {\n        //println(string(debug.Stack()))\n        println(\"Error in custom\", err.Error())\n        return\n    }\n// Define your custom implementation\nprintln(\"And now for some logic\")\n\nreturn\n\n}\nfunc handler(c echo.Context) error {\n    req := new(Request)\n    if err := c.Bind(req); err != nil {\n        return err\n    }\n    return c.String(http.StatusOK, fmt.Sprint(\"all good, req = \", req))\n}\nfunc main() {\n    e := echo.New()\ne.POST(\"/\", handler)\n\ne.Start(\":3000\")\n\n}\n```\nI get this output:\n$ curl -H 'Content-type: application/json' -d '{\"ID\": \"42\"}' http://localhost:3000\nall good, req = &{42}\nSeems to work as expected. Could you please try the latest master and see if that works? Thank you.. Closing this, if anyone can reproduce the bug then please reopen it. Thank you.. Yup, this looks like a bug. And I agree that the bug is the automatic unescape. Since this \"thing\" is marked as a parameter, the handler should receive the data exactly as is, it is not the job of the framework to interpret the data in behalf of the user.\n. Thoughts about this @vishr @im-kulikov ?. Not familiar with dep but how is this a problem with Echo? It's just a package in a folder, like all packages in Go, nothing special about it in any way.. Most likely missed @andreiavrammsd  Thank you for the PR.\nLooks like a good idea to me. In fact I don't see why anyone would prefer the unsafe version. Thoughts @vishr @im-kulikov ? In fact, I would propose an \"opposite\" PR: change Echo so that safe is the default option and add an UnsafeContext option instead (for cases where people both: 1) know exactly what they are doing and 2) they really need every bit of speed they can squeeze out of Echo).. If anyone depends on their application crashing, then there's a very easy fix for that: just use math/rand and from time to time call panic(). That should bring things back to as they were before this :-) \nNow joking aside, I don't see how anyone could raise the \"backward compatibility\" card, when all we're doing is touching the internals and eliminate a possible crash condition. No signature changes, we don't remove anything from the public interface, we simply ensure that under certain conditions, the app will not crash.\nNow OTOH, not sure that having all requests both write and read from context is by itself a good pattern. If you need all your requests to do that concurrently, probably you're missing a datastore of some sort (could be in memory, Redis, BoltDB, whatever). I mean locks only ensure it is safe to do so, but it doesn't make it right :-) Which is probably one of the reasons why no one complained about it so far...\nI still think we should fix it, I just think we should not encourage using context like it's some sort of database.. Yeah one could try to argue that, but it would be a weak argument. There's no framework that I know of that has the speed as part of their public interface. Nowhere in the README (or any other docs) does Echo say \"a request should complete within X ms\". I think we're safe :-)\nThank you for updating the PR!. @andreiavrammsd could you please squash the branch? Makes it easier to review/comment on it. Thanks!. Thank you @andreiavrammsd :) Looks good to me! @im-kulikov @vishr ?. > LGTM, ok to merge. I updated this issue labstack/echox#37. We need to find time to update the docs.\nYup, the docs need some love :-) I'll be happy to take a stab at that, but only a little later this month. First, I want to help close as many tickets and PRs as possible, after that I'll focus on the docs.. @vishr He did provide the benchmarks in the initial post: 545 ns/op with locks vs 408 ns/op without.\nThat being said, those benchmarks mean very little as they only test one single case out of a large variety of cases (the case where each request would do both a Set and a Get). We can have a lot of possible combinations (and thus a lot of possible change in performance): not using Set/Get at all (yay, not affected), using a lot of Set() or a lot of Get(), using it only on few resources, using it on many, etc. etc. and all their possible combinations. So it's basically impossible to say \"the performance will decrease by X% after adding this\"... it depends entirely on how the context is used by each end user in particular.\nSo let's see, what options we have:\n\nthe option in here, to default to safe (lock) and offer option for unsafe (if they want extra performance);\nsame as 1., but without the option to remove safety;\nkeep it as is (don't add lock) but make it clear in the docs that it is not thread safe AND show end users how to extend context to add safety around it (which is pretty trivial, now that I think of it...).\n\nAs I already said, I believe the case of heavy read/write from/to context would be rather the exception than the norm. The context is not a database... :-) The option no. 3 starts to sound appealing to me... :-) . @vishr that's exactly how the PR works right now (Get/Set protected by a lock, by default). Only if end users opt in to avoid locking, they can do so. Are you OK with keeping the new option UnsafeContext ?\nIf we keep it, there's a couple suggestions I have: 1) let's make it clear that it is solely for backward compatibility purposes and we do not recommend it (including in the commit message but also in the docs) and 2) possibly mark it as obsolete and \"to be removed in the next major version\" ? I mean, we should just be safe by default...  For the few cases where this will impact their performance, maybe it's worth the trouble of adding it, but long term I don't think we should keep it.\nAlso, if you're suggesting to remove the unsafe option, I'm not opposed to that :-) . Works for me! :-) . I like this, but at the same time, this is so easy to implement on end user side, that I can't help wondering if it's worth it:\n```Go\ntype SmartSender struct {\n    echo.Context\n}\nfunc (c *SmartSender) Send(code int, i interface{}) {\n    accept := c.request.Header.Get(HeaderAccept)\n\ufffc \n\ufffc   if strings.Contains(strings.ToLower(accept), MIMEApplicationXML) {\n\ufffc       return c.XMLPretty(code, i, \"  \")\n\ufffc   }\n\ufffc \n\ufffc   return c.JSONPretty(code, i, \"  \")\n}\ne.GET(\"/\", func (c echo.Context) error {\n\ufffc   cc := &SmartSender{c}\n\ufffc   return cc.Send(http.StatusOK, user{...})\n}\n```\nor use a middleware and make that context available wherever needed. Bonus: end users decide if the output is pretty or not :-) (vs. adding yet another flag to control beauty). Plus add support for other content types (text? JSONP? YAML? who cares, the end user is in control... they can add anything they like).\nSo is it worth extending this or maybe it is worth extending the documentation (add another recipe to the cookbook)? Thoughts @andreiavrammsd @vishr @im-kulikov ?. As I said, I do like the feature, but looks like we have a very good mechanism already (context) to implement it on end users' end, so it makes no sense to add it to the framework itself.\nEven Ruby on Rails, as giant as it was as a framework pulled that functionality out of the framework after they already had it for a few good years. It makes even less sense from a framework that has minimalism as one of its goal to add it instead: https://stackoverflow.com/questions/6118639/rails-respond-with-how-does-it-work\nNow just because we would not add it to the framework, it does not mean that code should not exist :-) You could create it as a middleware, as a project of your own. And we could add a list of Contributed Middleware to the documentation and point to it.\nAlso, we would like to add this pattern to the documentation, if you're interested, then please open up a ticket here: https://github.com/labstack/echox and provide a documentation PR instead.\nThank you for your contribution,\nHave a great day!. @baba2k - would you mind squashing all the commits into a single one, to make it easier to review and comment on the final version (rather than on individual iterations)?. No worries @baba2k - I can help with it. There are many ways to handle it: cherry pick, rebase on top of master, etc. I'll take a look at your branch and see what's the simplest way to get this into one nice commit that is easy to review. Thanks!. Yes, that would probably be the simplest. And in the future, use a branch other than master on your own repo, so that you can freely pull the master from upstream, and rebase your branch on top of your master and/or squash them as needed. It's a lot simpler than having to deal with intermingled merges from upstream.... Answering this for the record: you use DefaultSkipper to control which files get skipped:\n```Go\nskipNonCssJs := func(c echo.Context) bool {\n  ct := c.Response().Header().Get(echo.HeaderContentType)\n  return ct != \"text/css\" && ct != \"application/javascript\"\n}\ne.Use(middleware.GzipWithConfig(middleware.GzipConfig{\n  Skipper: skipNonCssJs,\n}))\n```\nNot tested, but something like this should do the trick, assuming the Content-Type is set by the time this middleware kicks in.. There already exists a project precisely for that, so all I had to do was:\n```Go\npackage main\nimport (\n    \"github.com/labstack/echo\"\n    \"github.com/apex/gateway\"\n)\nfunc main() {\n    e := echo.New()\n    gateway.ListenAndServe(\":3000\", e)\n}\n```\nSeems redundant/overkill to replicate that functionality in Echo.. You're most welcome! :) . I think in this particular case it would be overkill to have separate functions. The idea with \"bool params is a code smell\" is that it introduces complexity and makes code harder to understand, but it's not something set in stone, context always matter. Here we have very small functions, the \"complexity\" added is negligible and definitely smaller than the complexity of adding separate functions.\nI did look into stdlib briefly and I did have a hard time finding functions that use bools as params, but I did find a couple (in the few minutes that I spent on it): https://golang.org/pkg/compress/gzip/#Reader.Multistream and https://golang.org/pkg/net/http/#Server.SetKeepAlivesEnabled\nThat being said... we could \"cheat\" a little ;) We could eliminate the bool param entirely and do the indent decision based on indent param alone: if not empty, then do the indent step, otherwise not.. I like this change, and while I value greatly backward compatibility, I also believe there is very little reason why people would use these directly. They use e.GET() & friends instead. Also, a quick search shows 0 projects using this on Github: https://github.com/search?utf8=%E2%9C%93&q=echo.Get+language%3AGo&type=Repositories&ref=advsearch&l=Go&l=\nAdd to that, that for production one should vendor their dependencies anyway & use tests, etc. so the chances of doing real damage with this become very small. \nI would just suggest to change the commit message to give a little more info by itself, so that someone would know how to fix things if they break, from the commit message alone (though the diff itself is self explanatory):\nReplace http constants with stdlib ones, i.e.: http.MethodGet instead of echo.GET, etc.. @limoli \n\nSigningKey is returned as part of keyFunc output: https://github.com/labstack/echo/blob/master/middleware/jwt.go#L58\nthis is the definition of KeyFunc: https://github.com/dgrijalva/jwt-go/blob/06ea1031745cb8b3dab3f6a236daf2b0aa468b7e/token.go#L19\n\nTherefore, the perplexity should be directed to jwt-go, Echo can do nothing about this. That function needs it as an interface.\nIf we dig further, we see the key being used here: https://github.com/dgrijalva/jwt-go/blob/master/parser.go#L77 and here: https://github.com/dgrijalva/jwt-go/blob/master/signing_method.go#L12 where we see that SigningMethod is an interface with a Verify() function that takes key as an interface{}.\nNow  if we follow further, we see that in rsa.go, it expects key to be the type of *rsa.PublicKey: https://github.com/dgrijalva/jwt-go/blob/master/rsa.go#L61 whereas in ecdsa.go it expects it of type *ecdsa.PublicKey: https://github.com/dgrijalva/jwt-go/blob/master/ecdsa.go#L70 (and so on with hmac.go, etc.).\nAt this point, we can safely conclude that a []byte could not have done the job that is expected from this key.. Issues for the documentation need to be reported here: https://github.com/labstack/echox/issues\n@vishr thoughts on adding this note (about where to comment about documentation/website) to the \"new issue\" template text?. Added it to labstack/echox#37 Closing this.. Please use forum https://forum.labstack.com to ask questions, thank you.. Re-opening this as I think it is important to investigate. Thank you for your report @arussellsaw . I can reproduce this. Not sure if we can fix it since it may change routing in backward incompatible ways. I do consider it a bug, but people may rely (even if not knowing it) on this bug to craft their routes by now, which makes it tricky to fix it. @vishr @im-kulikov what are your thoughts?. Seems like is not worth it, typecasting existing QueryString() to []byte is trivial already.\nThoughts @vishr @im-kulikov ?. Thanks @im-kulikov  Closing it then.. Hi @leoryu \nWhile I'm not disagreeing with the solution, it does make sense that the transport passed to the config is passed further down to the proxy being created, I just don't understand how this actually does work in 1.11 but not in earlier. \nIf the transport is not expressly set, AFAICS ALL Go versions behave identically: here's Go 1.4 for example: https://github.com/golang/go/blob/release-branch.go1.4/src/net/http/httputil/reverseproxy.go#L105-L107 and here the latest master: https://github.com/golang/go/blob/master/src/net/http/httputil/reverseproxy.go#L190-L192 - no change: if transport is not set it defaults to http.DefaultTransport - no surprise there.\nSo I do agree the fix is good, I just don't understand why you imply the Go version makes a difference. Seems broken in all versions of Go to me.. Reopening this, as I haven't had a chance to look at it.. Stale bot is so pushy.... :) AI with an attitude... :D We're in trouble... :-) \nReopening this.... @vishr @im-kulikov thoughts about this request? I for one would vote against, I don't think it's the job of the framework to handle configuration/user input for the application using that framework. In this case, it was the \"ini\" format suggested, maybe others would prefer JSON instead or YAML, or maybe they would prefer using command line flags instead or ENV variables, etc. etc.\nThere are many possible combinations, and it is far better left to the user to pick whatever they prefer, than adding a particular one or worse trying to add them all into the framework. There are libraries dedicated to this already, does not make sense to duplicate that work in here.. Yup, exactly! Thanks @im-kulikov , closing this.. The issue this points to was fixed, closing this.. This sounds like a very bad idea. You should instead submit a patch to the broken framework(s), handling it in here just seems wrong.. Not sure we can do much about this. We should change the way we associate names with routes, which I'm pretty sure it would be a backward incompatible change. Maybe we can improve the documentation instead to list the limitations of this function (if they aren't mentioned already) ? Thoughts @im-kulikov @vishr ?. I cannot reproduce with the latest version (latest master), I get:\n$ go run test_listener.go\n\u21e8 http server started on [::]:4343\n\u21e8 http server started on [::]:4242\nCould you please confirm the issue is resolved on your end as well? Thank you!. Great, thank you!. For the record, there's quite a bit of chatter about this in PR #1253 \nThe short answer is: no, that is not so simple (just adding a /v3 suffix to existing v3.x line).\nI did a tiny POC here: https://github.com/alexaandru/modules that replicated this precise issue: 1. have some V2+ branch; 2. add go.mod to it without suffix 3. add suffix later. The result when you try to import it (with /v2 suffix as it should be) is:\n$ go build\ngo: downloading github.com/alexaandru/modules/v2 v2.2.0\nbuild github.com/alexaandru/foobar: cannot find module for path github.com/alexaandru/modules/v2\nso, half broken. It does resolve to the proper tag (v2.2.0, the last in the V2 line) however it also throws a cannot find module. The only resolution is to push the next vN, and release the vN at the same time with the vN.x.y tag (also tested on the POC repo and that worked as expected).\nTo wrap it up, we're working on it and hope to get it back working ASAP.. @im-kulikov actually the problem is in go.mod - the fact that it was introduced from the start on a v2+ repo without the /vN suffix. I'm just not sure if removing it would fix the problem... need to try it out on my POC.\nJust tested on my POC (https://github.com/alexaandru/modules), deleting go.mod will still not fix it. An app using Go modules will still fetch the version before go.mod was introduced (even if later, go.mod was removed, it still remains in history).\nSo V4 is the only way to go at this point.. Sounds good to me, it can't make things worse :-)  Worst case scenario: it still pulls v3.3.5, at least that's how it did in my POC, but seems that @Delphier got a different outcome. I'll give it a try.... Yes, this fixed it! Thanks @Delphier @im-kulikov ! :-) Please confirm it works on your end as well, so we can close this ticket. Thanks again!. Awesome, thank you very much @CuBiC3D ! Closing this.. Thank you @Delphier :-) . Thanks @im-kulikov ! :) . Please use forum https://forum.labstack.com to ask questions, closing this.. Thank you @Nexucis for the suggestion. We'll consider it and get back to you.. Thank you for your contribution :) You're doing very well for your 1st contribution! :)\nThis feature looks small and innocent :) but I'm more worried about the trend it sets for future development... What if tomorrow someone comes with adding support for TOML (or X, Y, Z...)? Do we add them all to the core of the Echo? Also, how common is for APIs to consume YAML? Does anyone know? I have worked with YAML, just not as an API request format. Last but not least, is there even an agreed upon MIME type for YAML? :-) I see a lot of proposals and not a lot of consensus...\n@vishr @im-kulikov (and anyone else really) what are you thoughts on this?\nI for one think that using the custom binder is preferable than extending Bind() for less used formats. But that's just me. Not trying to be picky or anything, I just value the \"minimalism\" of Echo very much. But maybe others value \"batteries included\" more, so let's discuss.. Thanks @Nexucis - that's interesting. Still, from proposal to implementation many things can happen :-) Does K8s use YAML today? All I see in it's docs are JSON fragments: https://kubernetes.io/docs/reference/using-api/api-concepts/\nAlso, just because we say no today, it doesn't mean we'll say no in the future as well. If state of the industry changes, and more people start asking about this, we will reconsider it of course.\n. Thanks @Nexucis so K8s does indeed talk YAML already. Interesting...\nIf this becomes more mainstream (talking YAML, that is), we'll revisit it. At this time an alternate solution was suggested already, so closing this one. Sorry that your 1st PR ended up being rejected, hope you agree it's the best way to go for Echo, at this time. Thank you & have a great day!. @vishr @im-kulikov I don't think this is the correct solution to solve this problem. It adds unnecessary \"noise\" in the source code, makes it harder to work on subsequent versions (V4, etc.). Still accommodating to Go modules myself, but I much rather prefer to use go.mod to control version, then use the source code to hardcode that. With go.mod, all the versions are in one place, easy to review/change.\nThat being said, the problem here is NOT that Echo cannot find it's own (sub)packages. I didn't test, but I doubt that's what the problem is. Rather, when people are pulling in Echo via Go modules, they pull the latest version, which is taken from the TAGs being defined.\nWe actually have a problem with the way we tag things, and we should address that, rather than finding workarounds. Yes, we do have the v3.3.5 to v3.3.8 tags BUT they are FORKS from the mainline... no idea how that happened but it does not look right. That needs fixing, and then the issue should go away, with no other code changes.. \nSee how v3.3.4 is the last one in mainline and the rest are all forks? That's the problem.. It's even worse: https://github.com/labstack/echo/blob/master/echo.go#L224\nThe latest code in master still reads 3.3.dev not even 3.3.4, nevermind 3.3.8. @vishr I think I see what you were trying to do, just keep it 3.3.dev in the mainline, and then fork off and tag those. It makes some sense, after you do work on say 3.3.4, it's no longer 3.3.4, it's \"3.3.4 plus something\" but not yet \"3.3.5\" either. But this solution you came up with is not playing nice with Go modules. We need the tags on the master branch, not as forks.. No problem with missing v3.3.2 \nThe problem is that those tags you list there are not on the master branch, they are forks from the master branch. When end users pull this framework, with NO version selection, it will by default pull the latest tag on the master branch. Those last 4 tags are all forks from master branch, they are not tags on master branch.\nIf the end users want to, they CAN in fact force pulling these tags:\n\nimport project normally, it ends up with version 3.3.5\nedit go.mod and change v3.3.5+incompatible to v3.3.8\ngo build\nyou end up with v0.0.0-20181123063703-c7eb8da9ec73 which actually points to that fork.\n\nBut clearly, go modules does not like tags on forks, even sets version as v0.0.0 ...\nThanks for the video, haven't seen it yet, will do with the 1st chance. I've used https://github.com/golang/go/wiki/Modules and found that very helpful.. @im-kulikov - after reading some more from the link I posted, I see that you are correct. Indeed the way you started seems to be a recommended way, as per https://github.com/golang/go/wiki/Modules#releasing-modules-v2-or-higher\nHowever, per the exact same recommendations, they suggest making a major version bump when adopting go modules. The key is here: \"Update the go.mod file to include a /v3 at the end of the module path in the module directive (e.g., module github.com/my/module/v3). Update import statements within the module to also use /v3 (e.g., import \"github.com/my/module/v3/mypkg\"). Tag the release with v3.0.0.\"  Without that, things will break this way: https://stackoverflow.com/questions/52050146/go-build-keeps-complaining-that-go-mod-has-post-v0-module-path\nThat is the error I got when I tried to import your fork directly:\n1 - created this file (in a new/empty folder):\n```Go\npackage main\nimport \"github.com/im-kulikov/echo\"\nfunc main() {\n    e := echo.New()\n    e.Start(\"\")\n}\n```\n2 - ran go mod init github.com/alexaandru/foo (to initialize this project as a module. Path is irrelevant, not going to publish it)\n3 - edited go.mod and changed it from v3.3.5+incompatible to fix/issue#1244\n4 - running go build now gives me:\n$ go build\ngo: finding github.com/im-kulikov/echo fix/issue#1244\ngo: github.com/im-kulikov/echo@v0.0.0-20190115083248-3e73b62c0694: go.mod has post-v0 module path \"github.com/labstack/echo/v3\" at revision 3e73b62c0694\ngo: error loading module requirements\nDid you try importing your branch from another module yet? Did it work on your end?. OK, looking forward to the demo. Though, a /v2 demo would be impossible if I understand Go modules correctly. It would mean that the v2.0.0 tag should have a go.mod file defining it as a v2, which is impossible without rewriting the history from v2.0.0 onwards. Which of course makes little sense for a demo. Pretty much the same for /v4, cannot demo that without introducing a v4.0.0 tag... \nAlso, this PR would introduce breaking changes, for users that use Go < 1.11.x since github.com/labstack/echo/v3 does not exist physically (and won't exist even after you merge), it's just a logical construct that Go modules use to refer to v3.x.y versions as a whole. So once again, it sounds like cutting a 4x release is the only way to go with this, just as the official docs recommend.\nFWIW, the solution I proposed (properly tagging commits on the master branch, not on forks) would work both for Go module users, as well as for older Go versions. Unfortunately it's not a recommended practice, so that's it. Vn is the way to go, but we must follow the recipe in full, not just partially.. If we simply tag the current master with v3.3.9, that would work both for non Go modules users (they would not be affected in any way) and the module users will pull the v3.3.9 by default (when they don't specify a given version, which is what 99% of the will do anyway, at least for now). Sounds like a win-win.\nBut we should change the Echo version accordingly (to say 3.3.9 not 3.3.dev).. Found quite a topic on this: https://github.com/semver/semver/issues/124 :) Tl;dr: semver thinks this it's an implementation detail :)\nI'm good with the proposal with one change: should use a dash to separate the additional label, i.e.: 3.3.10-dev as per https://semver.org/#spec-item-11. Sure, I can do that.. I did change the version, tag and push, however that did not fix it :-(  v3.3.5 is still being pulled.\nWould it be OK to delete those forked tags, and reapply those tags on the master branch (right after the fork, so they would still point to pretty much the same code, minus the version change which is on the forks). Thoughts?\nI did not cut a release just yet, until we clear this out, as I want to indicate the solution in the release message (what end users need to do to get the latest).. @im-kulikov The work you did is needed, as that is the way to go, but we will need to cut a 4.0.0 release for that, since it break backward compatibility. For now, I'd just want to get it to work for both Go module users and for those that don't use them yet (well, they would just pull the latest master with go get, so nothing broke for them today). And leave this PR for a 4.0.0 release, as per the Go module guidelines.. I reapplied the tags on master, however that did not fix the problem :-( \nIt seems that go modules are stuck at selecting the last tag before go.mod file was introduced, at least for the 3.x.y branch.\nI'm sorry, I really thought this could fix it, oh well, looks like we need to follow https://github.com/golang/go/wiki/Modules#releasing-modules-v2-or-higher to the letter, which includes cutting a 4.0.0 release. Things are not that bad though, seems they introduced a \"compatibility mode\" for older releases as well: https://github.com/golang/go/issues/27009#issuecomment-414171826\nThe key phrase there is: \" The short version is the go command \"does the right thing\" when using Go 1.9.7+, 1.10.3+ or 1.11, including old code that has not opted into modules does not need to be updated to include the major version in import paths when consuming v2+ modules.\" so we will not require with V4 branch that people use 1.11 right away, they can still use 1.9 or 1.10 provided they use a recent version. Or they can remain on the latest release before V4.\nAnyway, gonna play with this a little on my own, need to understand exactly how this work. Seems that when and how exactly you introduce go.mod file makes all the difference. Simply adding a V3 now or releasing a V4 instead may not necessarily fix the issue... :-( \n. @vishr @im-kulikov I was able to reproduce the issue! :-) https://github.com/alexaandru/modules\nIntroducing go.mod file causes go modules to pull the latest version BEFORE go.mod file was introduced. \nNow playing with it further to see what the fix can be. Will introducing the next major version fix it?! We'll see... :-) . YES!! Introducing the /v3 module with the next major version, fixed it, PROVIDED that the end users import it as /v3 (without using the suffix they still pull the latest version before go.mod - 2.1.0). So we have a clear path for fixing this. @im-kulikov do you want to amend your PR? Also, could you please introduce a new section in the readme that details the constraints? I.e. something like:\nRequirements\nGo 1.9.7+, 1.10.3+ or 1.11+ are required in order to use V4. If using Go modules, then you must import with /v4 suffix. For older versions, please use the latest v3.x.y tag.\nSomething like that, to make it clear up front.  Thanks!. Thank you :-) And no, please read my earlier comment: https://github.com/labstack/echo/pull/1253#issuecomment-457918344  it is not true that we require 1.11+ They introduced changes in Go to support some compatibility, i.e. older versions will not have full module support BUT, they will understand that /vN is a logical thing and not error out that the branch does not exist. So it won't break for 1.9.7+, 1.10.3+ either, which is awesome :) Of course, below that it will break.\nAlso, just for clarity, previous version of Go (other than the ones mentioned above), will not be able to use V4. They will still be able to use Echo, but the latest would be v3.3.9. If they want a newer version they must upgrade to a newer Go 1.9.x, 1.10.x or 1.11.x.. cc @vishr we'll need your blessing on this one :-) : adding a V4 as per https://github.com/golang/go/wiki/Modules#releasing-modules-v2-or-higher to properly support Go modules. This will mean that going further (so from V4 on) we will only support Go 1.9.7+, 1.10.3+ or 1.11+. There is one other option, mentioning it for the sake of completeness: if we do add the /v4, the v4.0.0 tag but NOT the internal /v4 imports, then it should work for both Go module users AND older Go (older than the ones mentioned) users. The only thing breaking the compatibility is those internal imports. However that would be against the official recommendations, so I don't think is worth it. I don't personally agree with those recommendations, I mean the \"internal\" imports, should use the current version of the package anyway, regardless if that version is v4, v5 or whatever, so why suffix them? Makes no sense, just seems like unnecessary work to me. But if those are the recommendations, what can we do?. Closing this @im-kulikov please open a new one for V4 (if you want and have time to tackle it, if not I can look into it). Thanks!. Looks great @im-kulikov very nice catch/cleanup :-). @vishr @im-kulikov - please correct me if I'm wrong, but while I see this defined in response.go and again in body_dump.go and compress.go in don't see it actually doing anything. Shouldn't they actually read from that channel and abort their respective work in order for this to have done something useful? They clearly don't do that.\nOr is the end user supposed to use it in order to abort the work themselves from their handler?\nAnyway, looks like we can simply delete it if I read things right (and it doesn't do anything), and update the docs to have the users use c.Request().Context().Done() instead. Sounds like a V4+ feature though.... Yes, I think that would work, as long as we introduce it with the very start of v4, that is, in v4.0.0. We cannot introduce it after that, since being a backward incompatible change, we'd need to increment the major number again, and introduce v5.0.0 :-)  Thanks!. Will do!. Working on this now. Two things:\n\nI cannot create the branch on my fork, since I cannot initialize the module there (if I initialize it with the echo's repo URL, it will error out when testing it, if I initialize it with my fork repo, how can we then later merge it?). So I will create a branch directly on echo repo for this and\nwe can only introduce backward incompatible changes in 4.0.0, so the go module, and the changes for this story need to be on the same branch and same v4.0.0 tag. We cannot introduce them as 4.0.1 but we'd need to use 5.0.0 is we want to have a separate commit for CloseNotifier()\n\nSo going to do these both, hope that's ok.. Closed via #1269 . At the glance, this sounds reasonable to me, however it also sounds backward incompatible. If all of the sudden stdout logging is gone, that might break some setups. Esp., that it is the recommended way of logging for Docker, so people may actually rely on it quite a bit.\nSo I'm with you, I just don't see an easy way to handle this. Maybe keep it in mind for V4? Thoughts @vishr ?. The reason why the logger requires JWT is that currently all middleware is part of a single package. There was a ticket about it - #1059 - unfortunately it would break backward compatibility so it's not easy to roll it out.. Could you please confirm that this is working now? We have removed go.mod for now (will reintroduce it later). Thank you!. Nothing was reported here, closing.. Given:\n```Go\npackage main\nimport (\n    \"context\"\n    \"fmt\"\n\"github.com/labstack/echo\"\n\n)\nfunc main() {\n    e := echo.New()\n    done := make(chan bool)\ngo func() {\n    fmt.Println(\"Server exit:\", e.StartServer(e.Server))\n    //fmt.Println(\"Server exit:\", e.Start(\":3000\"))\n    done <- true\n}()\n\nfmt.Println(\"Shutdown\", e.Shutdown(context.Background()))\n<-done\n\n}\n```\nI get the same output with either Start() or StartServer(), it looks like it closes cleanly either way. Could you please provide a code sample that shows the error you're seeing? Thank you.. Yes, I can reproduce now, thank you. Will look into it.. I'm pretty sure that's not how static middleware is meant to be used (on a per route basis). According to the documentation, you can replace all that (including route definition) with just:\nGo\ne.File(\"/test\", \"static/moban3451/index.html\"). > but if the 404 error page file contains static image\uff0c c.File\uff08\uff09 can not use static resource\nCould you please detail that? c.File() returns a file to the consumer, that's all its job. If that file contains images, it is no longer the job of that particular c.File() to return them. I assume you're viewing these error pages in a browser and the browser does not display the images, correct? Are the images served from somewhere else or are they meant to be served by this Echo instance as well? If the latter, do routes exist for them already? Could you possibly please post the link to an image that you think it should display and the route that you defined for it? Thanks!. Alright, starting to see the picture :) Two things:\n1 - I hope that you are using iteration to create all these groups and are not defining them by hand. I can't imagine being fun to maintain all those routes manually. i.e. Something like this should do:\nGo\nfor _, pageRoot := filepath.Glob(filepath.Join(\"content\", \"*\")) {\n    g := e.Group(\"/\"+filepath.Base(pageRoot), middleware...)\n    g.Get(...)\n}\n2 - and secondly, if you need 4xx, 5xx pages to be dynamic, make them dynamic. The custom HTTPErrorHandler from the guide is just an example, nothing more. You can implement it in any way it makes sense for your particular case, which is: make them templates not static files, so that you can replace the \"group root\" with the one from the request. I.e. pseudocode:\n\nrequest comes for non existent page under /pageX/whatever.html\nin your (unique across site) custom HTTPErrorHandler, you determine that the groupRoot is \"/pageX\" (or whatever is the criteria for differentiating one pages group from another)\nyou read file from disk, parse it as a template (html/template) and replace the groupRoot variable with the actual group root. And of course all your static assets in that template, are prefixed with that variable. So the rendered page, will contain static assets, relative to the group root;\nyou display the rendered page along with an appropriate status code.\n\nThat's it!\nYou can also use custom context and define a groupRoot() function, that is then accessible from everywhere (as it seems that this concept plays a central role in your app, you may need it in more places than just the error handler).\nHope this helps!. You're most welcome :-)\nGonna close this story, since it's not really a bug. If you have further Qs, please hop over to https://forum.labstack.com/ and we'll be happy to help.\nHave a great day!. @vishr @im-kulikov the branch is ready for review. Cheers!. Oh, for some weird reason, go.sum is NOT generated on my end. No clue why :-) So I could not commit that one. Technically it's only recommended to include it, but not required (it does not act as a lock file, the go.mod has all the information needed to determine the versions to be used). I'd be happy to include it if only I could figure out why is not created... :-) . Thanks! go mod tidy did it! :-) I committed it now.. Thanks @im-kulikov ! @vishr are we good?\nAs for your comment, yes, that change looks good to me! But to keep things clean, please open a separate ticket. Also, FWIW it can be simplified a bit:\n```Go\nfunc (ln tcpKeepAliveListener) Accept() (c net.Conn, err error) {\n    if c, err = ln.AcceptTCP(); err != nil {\n        return\n    }\n    if err = c.SetKeepAlive(true); err != nil {\n                return\n        }\n    if err = c.SetKeepAlivePeriod(3 * time.Minute); err != nil {\n                return\n        }\nreturn\n\n}\n```. Thank you :) and sorry, looks like we both missed a critical thing... the version :) I'll update mine to 4.0.0 and force push it, and then you'll need to rebase on top of it and call it 4.0.1. Alright then, I reviewed it one more time, you reviewed it @im-kulikov , CI is happy. I'm merging it :-) . Odd, I know it was based off of that, but the commit did not change (well, after the 4.0.0 change, that is). The merging simply fast forwarded master on top of that commit, but the SHA didn't change. Your PR should've been unaffected. Sorry for the trouble @im-kulikov :( . Thanks! :) . We're just having fun with our favorite web framework ;-) Cheers!. @vishr @im-kulikov the Go requirements I took straight from Go wiki: https://github.com/golang/go/wiki/Modules#releasing-modules-v2-or-higher  I really think they would be the ones to know best which Go version supports what...  If they have a Go 1.10 version below 1.10.3, then yes, it will not work. If however they have at least 1.10.3, then it should work.\nThey should either upgrade their Go OR stick to Echo v3.3.10. Removing support for Go modules should really be our last option (I hope)...  Thoughts?. Can we at least get the go version that they're using?. Well, it's that tiny x that matters the most in this case :-) . In all fairness, the only ones complaining are the ones that have the least reasons: the ones that do not use any dependency management at all. We did release a MAJOR version. Major versions break things. Everywhere, not just in our project. If someone does not like their project to be broken, they should use a dependency management mechanism. Or read the Release Notes...  Just sayin'.... What happened? You should be able to merge it on top of latest master, no? The code looks good to me.. LGTM but I do have one question:\nNow that we have modules support, things have changed quite a bit:\nBEFORE: go get ... would pull the latest master, so if we pushed changes/fixes, people could still fetch them even if we did not cut a release.\nNOW: with Go modules support, people using Go modules can only pull tagged releases (well, they can forge a given commit but that is ugly). So what does this mean in practice?!? Do we create  release (and a tag) after every single commit? :-) That'll be a bit weird...  Thoughts @im-kulikov @vishr ?. Yup, I guess you're right. It's how it worked so far as well. Alright then, merge away please! :) . I'm sorry, this was me, I did reapply those tags on the master branch as they were all applied on forks, in an attempt to get go modules working :-( It didn't work in the end anyway, and we released a v4 properly instead. Tags v3.3.9 and v3.3.10 were applied on master from the start and never tampered with.\nApologies for this attempt of a fix, and rest assure that it was the first and the last time we used something like that on the project. You can see the whole discussion about it in #1253 and #1244\nHopefully you can upgrade to the latest v3 release (or even better, to v4 if you meet the required Go version, listed on the README).\nIf there's anything I can do to help (besides never doing this again), please let me know.. Also, FWIW I reapplied those tags right at the point where the forks were, so they effectively point to the same functionality as before minus the version change (from 3.3.dev to the respective tag) which happened on the forks, not on the master branch. But as I mentioned, if you can use a latter version instead, those tags are nice and clean (and the version too).. @dhduvall looking into it, but then again it will break for people who pulled it since they were changed... Found them all, thanks to git fsck --unreachable. Can anyone confirm this is correct?\n\nv3.3.5 ce4a31 -> 6d227d\nv3.3.6 c185eb -> 1abaa3\nv3.3.7 ba1891 -> 2e9f4e\nv3.3.8 c54d9e -> c7eb8d\n\n@dhduvall @dmlittle @danielbprice @vishr @im-kulikov . Going to push them. Indeed, these tags were depended on for almost a year, the new tags only for 3-5 days, so the people affected by the retagging are a lot more than the ones that could be affected by restoring the tagging. If anyone already updated to a latter version (v3.3.9+) they should be unaffected. Actually, if anyone pulled in the last few days they should have pulled one of the newer tags anyway.\nRevert it is, before this spreads too wide.... The tags are now restored: @dhduvall @dmlittle @danielbprice @vishr @im-kulikov\nCould you please confirm it's working OK on your ends? Thank you and once again sorry for this :( . v4 still builds OK. Problem was resolved for 42wim/matterbridge#698 so likely it should be resolved to everyone else affected by this. Will keep this story open for a few more days so that people coming in for this issue can find it easy, and then if no one else has other reports infirming the fix worked, I'll close it.. The least I could do after the mess I caused :(\nThank you for the confirmation! Have a great day! :). Thanks @im-kulikov ! 3.3.5 and 3.3.6 are as I have them, but what you listed for 3.3.7 and 3.3.8 are actually the new tags, the ones I had to revert. I would recommend you delete those from your end and pull the tags again.\nAlso, all the \"broken/changed\" tags were renamed to v.3.3.x-retag so that we keep them around for the record.. > Note... This is also breaking go mod as the hashes aren't aligned and constantly erroring with mismatched sums.:\n@Skarlso by \"this\" are you referring to the messing up part (changing them to the new ones) or the trying to fix it part (reverting back to the old ones)? Unfortunately there is nothing more we can do about it. The tags were in use for almost a year so we had to revert. The people that pulled within the last few days (from rewrite till reverting to the old ones) will indeed be affected. \nCould you possibly upgrade to the latest v3 ? Or remove the offending line from go.sum?\n. Awesome :) and once again, sorry for the inconvenience.. @im-kulikov yes, I think we can now. Thanks! :) . Closing this as per #1252 . Thank you, looks like a great change to me.\nThat being said, I'd like to discuss something before merging: @vishr @im-kulikov thoughts on having the version incremented with each pull request? So rather than having that 3.3.dev (or 4.0.dev) or not changing the version in between releases, how about we change the process with this:\n\nwe ask with each PR for the version to be incremented accordingly. After all, that's how semver is supposed to work;\nwe cut releases once in a while. It would be overkill to cut a release for every single commit, so we let a few accumulate (~5? more? less? you tell me...) and then we cut a new release.\n\nThat way the version will evolve naturally, we don't need no \"Bumped up version\" commits and basically change the version in a commit that nothing happened :-) but we actually change it when things do happen. Thoughts?. @im-kulikov I don't think we're disagreeing here :-) Or maybe not entirely :-)\nI do agree release on every PR doesn't make any sense. But I do think that if we want to follow semver, then we need to bump up version with every change. Like here, this is a backward compatible (ok, a little debatable, hopefully no one depends on redirecting all their www-* domains to root...), so as per semver, the version should be bumped up.\nWhat I am saying is we shouldn't call it a release but DO bump up the version, so we have, for example, 4.0.1, 4.0.2. ... 4.0.5 - and then when we consider there are enough for a release, we cut a release at whatever number we are at. That would mean releases 4.0.6, 4.0.11, 4.0.20 - only those (just examples, not actual numbers) get tagged/released, but the Echo version increases with each change. That way, even for people pulling master, a given Echo version identifies a unique commit, whereas a 4.0.1-dev would identify any of the commits between 4.0.0 and 4.0.1.\nNow indeed, that seems rather odd at 1st :-) It may even be a dumb idea, I just thought is worth discussing.\nBut let's look at it from the other end, let' look at the proposed process: in between releases, we use the -dev version (so we're at 4.0.0 now, we should be using 4.0.1-dev). Is that really accurate? Are we actually pushing \"dev\" work to master? Work that may or may not be production ready? I don't think that's the case, so using such a versioning on master would be equally misleading. We only push work that we review and know it is safe to use. We may not want to release with every single commit to master, but we certainly don't merge WIP to master either...\nMaybe we should consider a 3rd option - a dev branch. Now in there, a -dev version does actually make sense. It's clearly not master, people should not be using it until released, etc. etc. When we're ready, we change the Echo version, merge to master, tag & release it. This however is not without downsides. Maybe we have tiny fixes/improvements, not enough for a release but usable and likely useful for some people (at the very least for the ones that suggested them...). Now keeping them in the dev branch is an indication that they should not be used.\nAs always, it's all about tradeoffs :-) I just personally don't like seeing \"-dev\" versions in a master branch, but that's just me :-) I don't really have a better approach, I just thought I should open it up for discussion. I don't like the version skipping approach either :-) \nAnyway, let's not get a good PR wait because of this discussion. Should've opened up a ticket instead, sorry @rdbell for hijacking the thread :-)\n@vishr - what are your thoughts on this change? Do you feel it may break backward compatibility or was it always the case that only www should've been redirected to root from the start? Though even if people rely on a buggy behaviour, fixing it is still called breaking backward compatibility, so technically, we are doing it... Though I guess if anyone needs the old behaviour, it's just a few lines of code away (writing a middleware to replicate it).. It all sounds good to me @vishr . @im-kulikov Honestly I like your proposal better than semver :-) but it would be breaking semver. We'd effectively be creating our own versioning system, as semver clearly states when all numbers should increment (PATCH on backward compatible bugfixes, MINOR on adding backward compatible features).\nThat being said, we're already breaking semver as is :-) This project never followed semver \"ad literam\" so far. Lots of PATCH number increments, with a lot more than bug fixes in them.\nIn the words of Dave Cheney \"SemVer is no one\u2019s favourite, yet one format is everyone\u2019s favourite\". I feel about the same :-) - don't like semver in particular, but I do like the idea of following a standard, giving end users something predictable.\nSo I lean towards a develop branch and when we merge to master, we bump up the version CORRECTLY as per semver: if we only added minor bugfixes in the branch, we increment PATCH number, if we added AT LEAST one feature (of course, backward compatible), we increment MINOR number, etc. \nWhich in effect ends up being pretty much what you proposed 3 days ago https://github.com/labstack/echo/pull/1274#issuecomment-459696409 :) Looks like we're finally converging... :) @vishr are you on board?. Awesome, looks like we have consensus :-) \nNow back to this PR: technically it is backward compatible, but is it truly backward compatible? From the docs: \"NonWWW redirect redirects www requests to non www\".\nSo technically we never promised that www* is redirected, only www. If someone currently relies on this bug for their needs (for example maybe they have multiple www-1, www-2, etc. endpoints for distributing load, but then again, why it would redirect back to a single, non www endpoint?) they are kind of doing it by relying on an implementation detail, rather than something that we promised in the docs.\nDoes that however make it OK to include it in a non-MAJOR release? I already got burned with the retag :D so I'm afraid to do anything that touches on compatibility... :-) I'd likely vote on saving it for a V5. What about you @vishr @im-kulikov ?. Great then, it sounds good to me @im-kulikov @vishr ! :) . Yes @vishr I'm gonna create an issue and the prepare a PR for adding a CONTRIBUTING.md document to the repo, where I'll add what we discussed lately about this.. Nice cleanup! :+1: . The function uses named return values. The blank return returns whatever value was last set for err, so code before the change as well as after your change does exactly the same thing - it returns err.. Nothing to be sorry of @mbana  Thank YOU for taking the time to verify this and suggest a fix!. Looks good! :) . I'll review as soon as I can @im-kulikov  Would you mind squashing the commits together? Thanks! :) . I'm a bit concerned about further extending an already large interface. Could you talk a bit about the use case you're targeting here @onrik ? After all, we got so far without this method, what exactly makes it needed now?. Thanks @onrik \nThis sounds like a reasonable request at the 1st sight. But then again, Echo advertises itself as \"minimal\" (among other things) framework. In my opinion that should raise the bar for what gets added into the framework from \"sounds reasonable\" to \"can we live without it?\" (or somewhere in its neighborhood).\nIn this particular case, if you simply wrap that thing that can be nil into a thing that can never be nil, then you solve your problem, i.e. I'll call it thingX - instead of storing it directly into the context, use a things struct, that has a field x that may or may not be nil. That way regardless of whether your thing is nil or not, you know you'll always get something from the context.\nBut that's just me :-) I came to this framework for the minimalism part especially, and I think many of its end users are attracted by it as well. If we keep adding a little here, a little there, we'll quickly move further and further away from that \"ideal\". \nSo @onrik , do you still think we should add it or do you think you can get around it, hopefully without too much trouble? Thoughts @vishr @im-kulikov ?. Yes, we're aware, it's the 1st section of the README: https://github.com/labstack/echo#supported-go-versions. Echo is now available as a Go module, please see the README. Thank you.. You're most welcome @vibrantbyte :) . This sounds reasonable to me. Would you mind sending a PR?. Thanks @vibrantbyte :) In addition to that, a gentle reminder @youcandoit95  that https://forum.labstack.com/ is for asking for help/questions. Closing this now.. From the issue (that you just opened) template:\n\nPlease use forum https://forum.labstack.com to ask questions!\n\nIf you found a memory leak, then please open another issue with a description/steps to reproduce it. Thank you.. I'm sorry but I will point you to a reply I just gave in another thread, as it seems related: https://github.com/labstack/echo/pull/1280#issuecomment-466818950\nI don't think that the ability to customize the banner is critical for a minimalist framework. You can already trivially achieve that effect today: 1. disable the echo banner 2. fmt.Println(\"your own banner\") before starting Echo. No change needed to the framework...\nThoughts @vishr @im-kulikov ?. I think that forking and maintaining both the v4 and v3 would be too much work, but it's really up to @vishr \nYou could consider migrating to Go modules or making your voice heard here:  https://github.com/Masterminds/glide/issues/1017 \nBut even so, the project itself is recommending its users to migrate away and that recommendation is like ~1 year old by now: \n\n\"The Go community now has the dep project to manage dependencies. Please consider trying to migrate from Glide to dep. ...\"\n\nAs Go now has an official dependency management solution, it's probably going to be embraced by the community: it's only a few months old, and there are 1800+ repos using it already. Dep itself was \"an experiment\" as it clearly states itself, so the long term solution is only one. The sooner you embrace it, the happier you'll be :) . @mbana I'm not exactly sure what problem are you trying to address with this PR...  Echo is a web framework, why should we include that cmd when it is trivial for end users to implement it themselves?\ncc: @im-kulikov @vishr thoughts?. Thanks! Closing it then.... Sure, that sounds useful :-) . @vishr I think \"enforce\" is not the right word, after all this is voluntary contribution, we cannot enforce people to contribute more... But I agree that \"something\" needs to be done (whatever that is... will have to think about it).\nAt the very least we could sync the versioning on echo and echox repos, so that we clearly see if we're in sync or how far behind we are. That way, keeping it up to date will be much simpler: if echo is at 4.1.5 and echox at 4.0.9, you know you need to review the changes between 4.0.9..4.1.5 and add those to the docs.\nWe need to point people to echox in the README, in the issue template and the upcoming CONTRIBUTING file (on my todo...).. Please see the answer in #1292  And to answer your question: no, we cannot help you with the problem that dep cannot pull vN of Go modules projects. Only the dep team can help with that (link to the issue discussing this exact problem is in the other issue, please see it there as well). Since they're both very similar, will close this one, let's continue any conversation about this over there. Thank you!. The README simply copied those notes about the versions from the official documentation, we did not come up with them on our own: https://github.com/golang/go/wiki/Modules#non-module-code-consuming-modules\nAs you can see here: https://golang.org/doc/devel/release.html#go1.9.minor and here: https://go.googlesource.com/go/+/d4e21288e444d3ffd30d1a0737f15ea3fc3b8ad9 they clearly did backport some functionality to that version (and I assume the same for 1.10.3 though I did not check) in order to have it work with Go modules.\nThat being said, while those versions do work with latest Echo just fine, there is indeed a mistake in the README in the sense that you cannot import it as v4, but have to use the regular import (without v4) suffix, which WILL in fact bring you the latest version of the library.\n```\n$ go version\ngo version go1.9.7 linux/amd64\n$ cat x.go \npackage main\nimport \"github.com/labstack/echo\"\nimport m \"github.com/labstack/echo/middleware\"\nfunc main() {\n    println(echo.Version)\n    _ = m.CSRFConfig{}\n}\n$ go run x.go \n4.0.0\n```\nAs you can see, latest Echo of version, including middleware, worked just fine with Go 1.9.7 in spite of the fact that internally (the middleware package) uses echo/v4 imports. I will make the clarification about the import path for older Go versions, vs new ones though, to make it clearer.\n\nNow whether you can lock the vN version of a Go module package from another dependency manager, that is entirely a question for the respective dependency manager, a question that was in fact asked already here: https://github.com/golang/dep/issues/1962\nHope this helps!. Looks good of course :-). > * I don't like Context as an interface, we did it to expand on it using a custom context; however, casting it back in handler is tedious.\nI do like it, the casting is a very small price to pay for the convenience of adding your own logic on top of echo.Context\n\n\nSimplified middleware signature like in v1/v2? making it easier to write a middleware.\nWe could move the middleware in a separate repo, each in their own subfolders/Go modules. That way they can evolve at different pace.. So your complaint about Echo is that a function you created does not work?\n\n\nI'm sorry, gonna close this one. If you still consider that you found a bug in Echo, then please at the very least explain the Expected and Actual behavior. Thank you.. The 1st sentence when you click the \"new issue\" button is: \n\n\"Please use forum https://forum.labstack.com to ask questions!\"\n\nTo answer your question: you \"get\" the data as request body, you already bind it correctly in your example and for validation you can read here: https://echo.labstack.com/guide/request\nAlso, the content-type you use for JSON may not be the most common... application/vnd.api+json It will fail here: https://github.com/labstack/echo/blob/master/bind.go#L44 as this https://github.com/labstack/echo/blob/e3717be4beda1dcc2e5163c8b3fbdf0f2e365ace/echo.go#L150 is what Echo uses to detect json content. So the problem you have is that you cannot bind the data in the 1st place. Please use application/json and try again.\nIf you still have trouble with the code, please post it in the forum. Thank you.. This repo is for Echo \"the framework\". https://github.com/labstack/echox is for Echo \"the website/guide/etc.\". Copied your issue there, closing this one https://github.com/labstack/echox/issues/93. Since you do use Go modules, then you should use the \"module enabled\" version of Echo (aka Echo v4). What you do above is pull the latest version before the adoption of Go modules by Echo, which in turns does not use dependency management, which in turn pull the latest version of all the deps it has which is what breaks your build.\nIf instead, you change the last line to be:\ngo get github.com/labstack/echo/v4\nit should actually work, since we use an older version of fasttemplate: https://github.com/labstack/echo/blob/master/go.mod#L10\nDisclaimer: untested. In theory it should work though :-) . Glad to hear it :-) & you're most welcome :-) . This is probably not the best name for this type, as it's nothing specific to redirect, it's just a function that returns a middleware (and all middleware \"generators\" do this). Is there a type for this already? If not what should we call it? middlewareGen ? middlewareConstructor ? ... . Thanks @vishr middlewareGenerator it is then :). +1 for short variable declaration form (:=) in general, but maybe with the exception for empty slices? Just like https://github.com/golang/go/wiki/CodeReviewComments#declaring-empty-slices recommends.\nWhile we're at it, maybe we should add a note about the coding style to use to the \"Contributing\" section of the README?. If you preallocate it then would it be simpler to do this instead:\n```go\nroutes := make([]*Route, len(e.router.routes))\nfor i, v := range e.router.routes {\n    routes[i] = v\n}\n```\nYou can avoid the append call.. How about this?\n```go\nrealm := defaultRealm\nif config.Realm != defaultRealm {\n    realm = strconv.Quote(config.Realm)\n}\n```\nor maybe have defaultRealm unquoted and the entire variable and if can go away, and on the response we can simply use strconv.Quote(config.Realm) directly. . How about?\ngo\ntoken := k.Value\nif err != nil {\n    token = random.String(config.TokenLength)\n}\nWe have both short variable declaration, avoid the ineffectual assignment and ditch the else clause.. I'm all for short variable names, but if we need to comment variable names, maybe we should at least consider using longer names? These names seems to be used away enough from where they were declared that they qualify for longer names. paramNames, etc.. I stand corrected @im-kulikov . I don't really understand how the else if can be dropped in this context... The way it is now, a request either has  MIMEMultipartForm content type and is processed accordingly OR (and this is where else comes into play) a simple form will be parsed. If you drop the else, then in case of successful multipart (thus no return on the if branch), you will ALSO parse it as a simple form (since, you have no else, and you don't return early either).  So I'm really curious to see how the else could be dropped in this context.... All's well when it ends well :) Now that I think of it a bit more, we can still ditch the else, with a tiny twist ;)\nInstead of:\nGo\nreq := c.Request()\nif strings.HasPrefix(req.Header.Get(HeaderContentType), MIMEMultipartForm) {\n  if err := req.ParseMultipartForm(defaultMemory); err != nil {\n    return nil, err\n  }\n} else if err := req.ParseForm(); err != nil {\n  return nil, err\n}\nreturn req.Form, nil\nwe could do:\nGo\nreq := c.Request()\nif strings.HasPrefix(req.Header.Get(HeaderContentType), MIMEMultipartForm) {\n  err := req.ParseMultipartForm(defaultMemory)\n  return req.Form, err\n}\nerr := req.ParseForm()\nreturn req.Form. err\nWe can still save two lines, though I'd personally put a blank line after the if, to nicely separate them :) but that's just me.\nI was almost gonna suggest something stupid :), this: return req.Form, req.ParseForm() and on a local test it even worked! Which would've been shorter by yet another two lines :) But then I dug further and found this: https://github.com/golang/go/issues/3852 - it turns out the order of evaluation is not specified, it could go either way, and we'd rely on an implementation detail, which would be terrible.\nCheers!. This looks risky. It works fine in JSON() where we control the indent ourselves, here however it messes things up :( If they want it pretty but with a blank indent (which I have no idea what it would do? just put each field on a separate line with no indent?) they will get it \"not pretty\". Should we return an error when the indent is blank for pretty? and also update the documentation to reflect that we expect a non blank indent to be provided for this function? \nYes, just checked, that's what it currently does, with a blank indent, it prints pretty with no indent:\nJSON\n{\n\"bar\": 1,\n\"foo\": 42\n}\nWe can either revert back to using bool OR we can convert indent in jsonBlob() to be a pointer to string. That way, we don't check if it is blank, we check if it is nil. If nil == ugly json, if present (even if blank) == pretty json with that ident. That would allow us to keep the existing behavior where we accept even a blank indent.. Looks good to me :+1: . I missed the fact that they are in the docs when I reviewed this, @vishr was right to bet on backward compatibility. I pushed a PR to address this: https://github.com/labstack/echo/pull/1209 - adding the exported constants back.\nI propose we 1st change the documentation, then we give proper notice, and then (maybe?) we remove them later.. The name is misleading. It loads either from file or from the strings provided.\nIt would be nice if we could avoid adding another method to start TLS... I generally avoid using interface{} as much as possible, but can't help wondering if it wouldn't be appropriate here. If we change the signature of StartTLS() to StartTLS(address string, certFile, keyFile interface{}) then the callers could submit either string (which would mean path) or []byte (which would mean key/cert content). It would be backward compatible, it would continue to accept strings as input. But it would also support the new feature. Thoughts @mbana @im-kulikov @vishr ?\nEither way, this sounds like a very useful feature :-) Now one can feed it straight from AWS Parameter Store or from Vault :-) . Hardly @im-kulikov as https://golang.org/pkg/crypto/tls/#Certificate only takes in either path to files or content of certs (but no io.Reader). So asking for that param means both more work for callers and more fork for the function itself, makes little sense.. @im-kulikov The \"we can read from\" part is what I meant by more work ;-) More work on the caller to create the io.Reader and then more work on the function to read from it, when all is needed is either a string or a []byte. Besides, this does not solve the problem with needing an extra param to signal if this is a file or a string (that is going to be transformed into an io.Reader).\nHere's what I had in mind:\n```Go\nfunc (e *Echo) StartTLS(address string, certFile, keyFile interface{}) (err error) {\n    var cert []byte\n    switch v := certFile.(type) {\n    case string:\n        if cert, err = ioutil.ReadFile(certFile); err != nil {\n            return\n        }\n    case []byte:\n        cert = certFile\n    default:\n        return fmt.Errorf(\"invalid cert type. Can only accept string or []byte\")\n    }\n// repeat for keyFile\n\ns := e.TLSServer\ns.TLSConfig = new(tls.Config)\ns.TLSConfig.Certificates = make([]tls.Certificate, 1)\nif s.TLSConfig.Certificates[0], err = tls.X509KeyPair(cert, key); err != nil {\n    return\n}\n\nreturn e.startTLS(address)\n\n}\n```\nNo new function, no extra param, backward compatible. If you could show me what you have in mind with io.Reader then we can compare and pick the simpler one.. Great then :) \nAlso, giving it a 2nd look, I would actually introduce an unexported function to clean it up further:\n```Go\nfunc (e *Echo) StartTLS(address string, certFile, keyFile interface{}) (err error) {\n    var cert []byte\n    if cert, err = filepathOrContent(certFile); err != nil {\n        return\n    }\nvar key []byte\nif key, err = filepathOrContent(keyFile); err != nil {\n    return\n}\n\ns := e.TLSServer\ns.TLSConfig = new(tls.Config)\ns.TLSConfig.Certificates = make([]tls.Certificate, 1)\nif s.TLSConfig.Certificates[0], err = tls.X509KeyPair(cert, key); err != nil {\n    return\n}\n\nreturn e.startTLS(address)\n\n}\nfunc filepathOrContent(fileOrContent interface{}) (content []byte, err error) {\n    switch v := fileOrContent.(type) {\n    case string:\n        return ioutil.ReadFile(v)\n    case []byte:\n        return v, nil\n    default:\n        return nil, fmt.Errorf(\"invalid cert type, must be string or []byte\")\n    }\n}\n```\nYeah, I like this better.. Without an else branch, you actually end up applying both headers. Is that the intent here? Doesn't sound like it from either the description or the comment above CSPReportOnly. Also from what I read at https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only it sounds like using them together would not produce the intended result.. Looks good now @kumarharsh ! Thanks! cc: @vishr @im-kulikov . ",
    "ljesparis": "Hi.. =).. \nu forgot to use logger middleware.. \n```go\npackage main\nimport (\n    \"net/http\"\n    \"github.com/labstack/echo\"\n)\nfunc main() {\n    e := echo.New()\n     // here.\n    e.Use(middleware.Logger())\n\ne.GET(\"/\", func(c echo.Context) error {\n    return c.File(\"app/index.html\")\n}\n    e.Logger.Debug(e.Start(\"0.0.0.0:80\"))\n\n}\n```. I think custom error message should be used to keep things simple, instead of creating a big error handler function. Well, that's my opinion. What do you think @vishr @Limoli @lavenderx. @vishr ok, this is fine for me. =P. @EthanG78, you need to download  \"github.com/dgrijalva/jwt-go\" dependency.\njwt-go. ",
    "luckcolors": "Well then the documentation here then is wrong https://echo.labstack.com/guide. :)\nSo then the working code becomes:\n```go\npackage main\nimport \"net/http\"\nimport \"github.com/labstack/echo\"\nimport \"github.com/labstack/echo/middleware\"\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.Logger())\ne.GET(\"/\", func(c echo.Context) error {\n    return c.File(\"app/index.html\")\n}\n    e.Logger.Debug(e.Start(\"0.0.0.0:80\"))\n\n}\n```. Thanks for your help though! :). ",
    "khaf": "Sure, these are the type of URLs that may hit the server:\n[*] Testing Path: http://127.0.0.1:8081/..%2f..%2f..%2fetc%2fpasswd <- VULNERABLE!\n[*] Testing Path: http://127.0.0.1:8081/..%2f..%2f..%2fetc%2fissue <- VULNERABLE!\n[*] Testing Path: http://127.0.0.1:8081/..%2f..%2f..%2f..%2fetc%2fpasswd <- VULNERABLE!\n[*] Testing Path: http://127.0.0.1:8081/..%2f..%2f..%2f..%2fetc%2fissue <- VULNERABLE!\n[*] Testing Path: http://127.0.0.1:8081/..%2f..%2f..%2f..%2f..%2fetc%2fpasswd <- VULNERABLE!\nThese are out of the following tool: https://github.com/wireghoul/dotdotpwn\nThis happens as a result of not sanitizing the encoded input (in this case URL path) before passing it to the path.Clean method.. Looks like it is fixed now. Thanks.. ",
    "aenario": "Thanks !. ",
    "rcousens": "Thanks, will hopefully get a chance to implement at work tomorrow and submit. Cheers!. ",
    "FrankIT60": "I write this example.\nDumpRequest works but DumpResponse go in panic.\nCan you help me with example of middleware for print DumpRequest and DumpResponse?\nT.i.a.\nFranco\npackage main \nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/http/httputil\"\n\n    \"github.com/labstack/echo\"\n    \"github.com/labstack/echo/middleware\"\n )\n\n func hello(c echo.Context) error {\n    dumpRequest, err := httputil.DumpRequest(c.Request(), true)\n    if err != nil {\n        fmt.Println(err.Error())\n        return err\n    }\n    c.String(http.StatusOK, string(dumpRequest))\n    resp := c.Request().Response\n\n    dumpResponse, err := httputil.DumpResponse(resp, true)\n    if err != nil {\n        fmt.Println(err.Error())\n        return err\n    }\n    fmt.Println(dumpResponse)\n    return nil\n}\n\nfunc main() {\n// Echo instance\ne := echo.New()\n\n// Middleware\ne.Use(middleware.Logger())\ne.Use(middleware.Recover())\n\n// Routes\ne.GET(\"/\", hello)\n\n// Start server\ne.Logger.Fatal(e.Start(\":1323\"))\n}\n\n. Yes I know. I can save a copy of response. But in case of controversy with the client regarding the content it is better to have a track produced by an effective API rather than something written by me.. I think the better is exposing  Context#Received() & Context#Sent() with parameter for include o esclude body.  When there are disputes with other vendors using APIs at the same customer, it is important to be able to demonstrate what is actually being transmitted. Not always but often happens.\nNow we use Apache with mod_dumpio.\nBut if we want to replace with microservices written in Go we have to guarantee the same possibility.\nThe best would be to enable or disable this option at run-time, for the single API.\nThis is a possibility that, in my research, I did not find in any Go Web Framework.. The logging system is as good as it is.\nI vote for a specific and dedicated middleware.. name: DumpBody or ReadBody.\nOk for JSON format.\nOK for @Anon-Penguin \"handler\" function.\n. @vishr Thanks!!!. ",
    "codecov[bot]": "Codecov Report\n\nMerging #952 into master will increase coverage by 0.21%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #952      +/-\n==========================================\n+ Coverage   77.85%   78.07%   +0.21%   \n==========================================\n  Files          27       26       -1   \n  Lines        1820     1783      -37   \n==========================================\n- Hits         1417     1392      -25   \n+ Misses        281      272       -9   \n+ Partials      122      119       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| router.go | 90.69% <0%> (-1.49%) | :arrow_down: |\n| middleware/proxy.go | 44.26% <0%> (-0.36%) | :arrow_down: |\n| middleware/body_dump.go | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 18ccbf3...8c1dcad. Read the comment docs.\n. # Codecov Report\nMerging #955 into master will decrease coverage by 0.35%.\nThe diff coverage is 60%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #955      +/-\n==========================================\n- Coverage   78.27%   77.91%   -0.36%   \n==========================================\n  Files          26       27       +1   \n  Lines        1781     1816      +35   \n==========================================\n+ Hits         1394     1415      +21   \n- Misses        270      280      +10   \n- Partials      117      121       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/body_dump.go | 60% <60%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1e51b33...fe86d43. Read the comment docs.\n. # Codecov Report\nMerging #957 into master will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #957   +/-\n=======================================\n  Coverage   77.85%   77.85%         \n=======================================\n  Files          27       27         \n  Lines        1820     1820         \n=======================================\n  Hits         1417     1417         \n  Misses        281      281         \n  Partials      122      122\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/jwt.go | 87.87% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 18ccbf3...75b689d. Read the comment docs.\n. # Codecov Report\nMerging #958 into master will increase coverage by 0.1%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #958     +/-\n=========================================\n+ Coverage   77.85%   77.96%   +0.1%   \n=========================================\n  Files          27       27           \n  Lines        1820     1820           \n=========================================\n+ Hits         1417     1419      +2   \n+ Misses        281      279      -2   \n  Partials      122      122\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 86.8% <100%> (+0.79%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7676f85...c7ee133. Read the comment docs.\n. # Codecov Report\nMerging #960 into master will increase coverage by 0.07%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #960      +/-\n==========================================\n+ Coverage   77.96%   78.03%   +0.07%   \n==========================================\n  Files          27       27            \n  Lines        1820     1826       +6   \n==========================================\n+ Hits         1419     1425       +6   \n  Misses        279      279            \n  Partials      122      122\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.1% <100%> (+0.3%) | :arrow_up: |\n| group.go | 93.02% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 935a607...7056258. Read the comment docs.\n. # Codecov Report\nMerging #965 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #965   +/-\n======================================\n  Coverage    78.2%   78.2%         \n======================================\n  Files          27      27         \n  Lines        1831    1831         \n======================================\n  Hits         1432    1432         \n  Misses        278     278         \n  Partials      121     121\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.1% <100%> (\u00f8) | :arrow_up: |\n| group.go | 93.02% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ee85b46...cedbe9a. Read the comment docs.\n. # Codecov Report\nMerging #966 into master will decrease coverage by 1.55%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #966      +/-\n==========================================\n- Coverage   78.22%   76.66%   -1.56%   \n==========================================\n  Files          27       27            \n  Lines        1832     2216     +384   \n==========================================\n+ Hits         1433     1699     +266   \n- Misses        278      396     +118   \n  Partials      121      121\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| group.go | 94% <0%> (+0.97%) | :arrow_up: |\n| context.go | 69.8% <100%> (-3.84%) | :arrow_down: |\n| echo_go1.8.go | 20% <0%> (-5%) | :arrow_down: |\n| middleware/redirect.go | 54.86% <0%> (-4.69%) | :arrow_down: |\n| middleware/recover.go | 63.33% <0%> (-4.67%) | :arrow_down: |\n| middleware/static.go | 53.16% <0%> (-3.29%) | :arrow_down: |\n| middleware/compress.go | 65.38% <0%> (-2.8%) | :arrow_down: |\n| middleware/basic_auth.go | 55.55% <0%> (-2.78%) | :arrow_down: |\n| middleware/logger.go | 80.53% <0%> (-2.64%) | :arrow_down: |\n| ... and 16 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a5c75b0...e17bb60. Read the comment docs.\n. # Codecov Report\nMerging #967 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #967   +/-\n======================================\n  Coverage    78.2%   78.2%         \n======================================\n  Files          27      27         \n  Lines        1831    1831         \n======================================\n  Hits         1432    1432         \n  Misses        278     278         \n  Partials      121     121\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e0ea129...8fe7ac9. Read the comment docs.\n. # Codecov Report\nMerging #968 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #968      +/-\n==========================================\n+ Coverage    78.2%   78.22%   +0.01%   \n==========================================\n  Files          27       27            \n  Lines        1831     1832       +1   \n==========================================\n+ Hits         1432     1433       +1   \n  Misses        278      278            \n  Partials      121      121\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/jwt.go | 88.05% <100%> (+0.18%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d79c131...e27e517. Read the comment docs.\n. # Codecov Report\nMerging #970 into master will increase coverage by 0.19%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #970      +/-\n==========================================\n+ Coverage   76.52%   76.72%   +0.19%   \n==========================================\n  Files          26       27       +1   \n  Lines        2224     2221       -3   \n==========================================\n+ Hits         1702     1704       +2   \n+ Misses        400      396       -4   \n+ Partials      122      121       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| context.go | 70.38% <100%> (+0.58%) | :arrow_up: |\n| response.go | 69.69% <0%> (-1.74%) | :arrow_down: |\n| middleware/jwt.go | 88.23% <0%> (-0.53%) | :arrow_down: |\n| router.go | 92.65% <0%> (-0.26%) | :arrow_down: |\n| group.go | 94% <0%> (\u00f8) | :arrow_up: |\n| util_go17.go | 100% <0%> (\u00f8) | |\n| echo.go | 86.37% <0%> (+0.8%) | :arrow_up: |\n| middleware/proxy.go | 43.2% <0%> (+1.54%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f2bc680...02724d0. Read the comment docs.\n. # Codecov Report\nMerging #973 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #973      +/-\n==========================================\n+ Coverage   76.66%   76.67%   +<.01%   \n==========================================\n  Files          27       27            \n  Lines        2216     2229      +13   \n==========================================\n+ Hits         1699     1709      +10   \n- Misses        396      398       +2   \n- Partials      121      122       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bind.go | 81.59% <100%> (-0.33%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0769b34...3f749ed. Read the comment docs.\n. # Codecov Report\nMerging #974 into master will increase coverage by 0.3%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #974     +/-\n=========================================\n+ Coverage   76.66%   76.97%   +0.3%   \n=========================================\n  Files          27       27           \n  Lines        2216     2211      -5   \n=========================================\n+ Hits         1699     1702      +3   \n+ Misses        396      389      -7   \n+ Partials      121      120      -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| group.go | 100% <\u00f8> (+6%) | :arrow_up: |\n| middleware/static.go | 59.49% <0%> (+6.32%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0769b34...583c50e. Read the comment docs.\n. # Codecov Report\nMerging #975 into master will increase coverage by 0.67%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #975      +/-\n==========================================\n+ Coverage    81.3%   81.97%   +0.67%   \n==========================================\n  Files          25       25            \n  Lines        1904     1914      +10   \n==========================================\n+ Hits         1548     1569      +21   \n+ Misses        249      241       -8   \n+ Partials      107      104       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| group.go | 94.73% <100%> (+0.98%) | :arrow_up: |\n| echo.go | 88.07% <100%> (+0.43%) | :arrow_up: |\n| middleware/logger.go | 84.46% <0%> (-0.44%) | :arrow_down: |\n| middleware/middleware.go | 100% <0%> (\u00f8) | :arrow_up: |\n| middleware/jwt.go | 88.57% <0%> (+6.99%) | :arrow_up: |\n| middleware/static.go | 73.84% <0%> (+7.69%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9b4cc60...609a7b0. Read the comment docs.\n. # Codecov Report\nMerging #980 into master will decrease coverage by 0.11%.\nThe diff coverage is 40%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #980      +/-\n==========================================\n- Coverage   76.67%   76.55%   -0.12%   \n==========================================\n  Files          27       27            \n  Lines        2229     2231       +2   \n==========================================\n- Hits         1709     1708       -1   \n- Misses        398      400       +2   \n- Partials      122      123       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bind.go | 80.29% <40%> (-1.3%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f8c3008...1c3bd80. Read the comment docs.\n. # Codecov Report\nMerging #982 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #982      +/-\n==========================================\n+ Coverage   76.56%   76.61%   +0.04%   \n==========================================\n  Files          27       27            \n  Lines        2232     2236       +4   \n==========================================\n+ Hits         1709     1713       +4   \n  Misses        400      400            \n  Partials      123      123\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 86.37% <100%> (\u00f8) | :arrow_up: |\n| group.go | 94.44% <100%> (+0.44%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1e9845a...6af77b2. Read the comment docs.\n. # Codecov Report\nMerging #984 into master will decrease coverage by 0.3%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #984      +/-\n==========================================\n- Coverage   76.56%   76.26%   -0.31%   \n==========================================\n  Files          27       27            \n  Lines        2232     2241       +9   \n==========================================\n  Hits         1709     1709            \n- Misses        400      409       +9   \n  Partials      123      123\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/key_auth.go | 62.68% <0%> (-9.73%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2b6ea65...b50ff57. Read the comment docs.\n. # Codecov Report\nMerging #985 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #985   +/-\n=======================================\n  Coverage   76.56%   76.56%         \n=======================================\n  Files          27       27         \n  Lines        2232     2232         \n=======================================\n  Hits         1709     1709         \n  Misses        400      400         \n  Partials      123      123\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| group.go | 94% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2b6ea65...63cc5bd. Read the comment docs.\n. # Codecov Report\nMerging #987 into master will decrease coverage by 1.22%.\nThe diff coverage is 81.25%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #987      +/-\n=========================================\n- Coverage   77.73%   76.5%   -1.23%   \n=========================================\n  Files          27      27            \n  Lines        1922    2239     +317   \n=========================================\n+ Hits         1494    1713     +219   \n- Misses        301     402     +101   \n+ Partials      127     124       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 86.37% <100%> (-0.01%) | :arrow_down: |\n| group.go | 89.47% <80%> (-4.28%) | :arrow_down: |\n| middleware/recover.go | 63.33% <0%> (-9.4%) | :arrow_down: |\n| middleware/proxy.go | 43.2% <0%> (-5.31%) | :arrow_down: |\n| echo_go1.8.go | 20% <0%> (-5%) | :arrow_down: |\n| middleware/redirect.go | 54.86% <0%> (-4.69%) | :arrow_down: |\n| context.go | 69.8% <0%> (-3.84%) | :arrow_down: |\n| middleware/static.go | 53.16% <0%> (-3.29%) | :arrow_down: |\n| bind.go | 80.39% <0%> (-2.84%) | :arrow_down: |\n| middleware/compress.go | 65.38% <0%> (-2.8%) | :arrow_down: |\n| ... and 19 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update da083ff...e336bcb. Read the comment docs.\n. # Codecov Report\nMerging #989 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #989   +/-\n=======================================\n  Coverage   76.56%   76.56%         \n=======================================\n  Files          27       27         \n  Lines        2232     2232         \n=======================================\n  Hits         1709     1709         \n  Misses        400      400         \n  Partials      123      123\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bind.go | 80.39% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1e9845a...1e6420a. Read the comment docs.\n. # Codecov Report\nMerging #992 into master will decrease coverage by 0.1%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #992      +/-\n==========================================\n- Coverage   76.66%   76.56%   -0.11%   \n==========================================\n  Files          27       27            \n  Lines        2216     2219       +3   \n==========================================\n  Hits         1699     1699            \n- Misses        396      398       +2   \n- Partials      121      122       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/proxy.go | 41.66% <0%> (-1.55%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a26bc31...ccbb0de. Read the comment docs.\n. # Codecov Report\nMerging #993 into master will decrease coverage by 0.17%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #993      +/-\n==========================================\n- Coverage   76.56%   76.39%   -0.18%   \n==========================================\n  Files          27       25       -2   \n  Lines        2219     2207      -12   \n==========================================\n- Hits         1699     1686      -13   \n  Misses        398      398            \n- Partials      122      123       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| util_go17.go | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| router.go | 90.73% <0%> (-1.92%) | :arrow_down: |\n| echo.go | 85.38% <0%> (-1%) | :arrow_down: |\n| util_go18.go | | |\n| echo_go1.8.go | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7d67651...bf53e94. Read the comment docs.\n. # Codecov Report\nMerging #993 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #993   +/-\n=======================================\n  Coverage   76.56%   76.56%         \n=======================================\n  Files          27       27         \n  Lines        2219     2219         \n=======================================\n  Hits         1699     1699         \n  Misses        398      398         \n  Partials      122      122\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| util_go17.go | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7d67651...bf53e94. Read the comment docs.\n. # Codecov Report\nMerging #997 into master will increase coverage by 0.07%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #997      +/-\n==========================================\n+ Coverage   76.58%   76.66%   +0.07%   \n==========================================\n  Files          27       26       -1   \n  Lines        2221     2224       +3   \n==========================================\n+ Hits         1701     1705       +4   \n+ Misses        398      397       -1   \n  Partials      122      122\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/jwt.go | 89.36% <100%> (+1.12%) | :arrow_up: |\n| echo.go | 86.33% <0%> (-0.05%) | :arrow_down: |\n| util_go17.go | | |\n| router.go | 92.9% <0%> (+0.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cec7629...1dab1b7. Read the comment docs.\n. # Codecov Report\nMerging #999 into master will decrease coverage by 0.07%.\nThe diff coverage is 60%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #999      +/-\n=========================================\n- Coverage   76.58%   76.5%   -0.08%   \n=========================================\n  Files          27      26       -1   \n  Lines        2221    2222       +1   \n=========================================\n- Hits         1701    1700       -1   \n- Misses        398     400       +2   \n  Partials      122     122\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/jwt.go | 88.5% <100%> (+0.27%) | :arrow_up: |\n| echo.go | 85.57% <25%> (-0.81%) | :arrow_down: |\n| util_go17.go | | |\n| router.go | 92.9% <0%> (+0.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cec7629...a1d74a0. Read the comment docs.\n. # Codecov Report\nMerging #1006 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1006      +/-\n==========================================\n+ Coverage   76.52%   76.53%   +0.01%   \n==========================================\n  Files          26       26            \n  Lines        2224     2225       +1   \n==========================================\n+ Hits         1702     1703       +1   \n  Misses        400      400            \n  Partials      122      122\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 85.62% <100%> (+0.04%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f2bc680...cef21a8. Read the comment docs.\n. # Codecov Report\nMerging #1010 into master will decrease coverage by 0.31%.\nThe diff coverage is 23.07%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1010      +/-\n==========================================\n- Coverage   76.57%   76.26%   -0.32%   \n==========================================\n  Files          26       26            \n  Lines        2224     2237      +13   \n==========================================\n+ Hits         1703     1706       +3   \n- Misses        397      406       +9   \n- Partials      124      125       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bind.go | 78.1% <23.07%> (-3.81%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a625e58...1a741ca. Read the comment docs.\n. # Codecov Report\nMerging #1014 into master will decrease coverage by 0.02%.\nThe diff coverage is 42.85%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1014      +/-\n==========================================\n- Coverage   76.57%   76.54%   -0.03%   \n==========================================\n  Files          26       26            \n  Lines        2224     2230       +6   \n==========================================\n+ Hits         1703     1707       +4   \n- Misses        397      399       +2   \n  Partials      124      124\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bind.go | 81.44% <42.85%> (-0.48%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b28538b...1de0b16. Read the comment docs.\n. # Codecov Report\nMerging #1020 into master will decrease coverage by 4.86%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1020      +/-\n==========================================\n- Coverage   81.44%   76.57%   -4.87%   \n==========================================\n  Files          25       26       +1   \n  Lines        1902     2224     +322   \n==========================================\n+ Hits         1549     1703     +154   \n- Misses        247      397     +150   \n- Partials      106      124      +18\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 85.34% <100%> (-2.61%) | :arrow_down: |\n| middleware/redirect.go | 54.86% <0%> (-33.37%) | :arrow_down: |\n| middleware/proxy.go | 41.66% <0%> (-22.69%) | :arrow_down: |\n| middleware/body_dump.go | 61.36% <0%> (-21.5%) | :arrow_down: |\n| middleware/basic_auth.go | 55.55% <0%> (-13.02%) | :arrow_down: |\n| middleware/static.go | 53.16% <0%> (-12.99%) | :arrow_down: |\n| middleware/body_limit.go | 73.46% <0%> (-7.02%) | :arrow_down: |\n| middleware/recover.go | 67.85% <0%> (-4.88%) | :arrow_down: |\n| middleware/logger.go | 80.53% <0%> (-3.94%) | :arrow_down: |\n| context.go | 69.8% <0%> (-3.84%) | :arrow_down: |\n| ... and 18 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ce4a31c...e78de69. Read the comment docs.\n. # Codecov Report\nMerging #1021 into master will decrease coverage by 0.26%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1021      +/-\n==========================================\n- Coverage   76.57%   76.31%   -0.27%   \n==========================================\n  Files          26       26            \n  Lines        2224     2191      -33   \n==========================================\n- Hits         1703     1672      -31   \n+ Misses        397      395       -2   \n  Partials      124      124\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| router.go | 92.77% <100%> (-0.13%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b28538b...9e886e7. Read the comment docs.\n. # Codecov Report\nMerging #1029 into master will not change coverage.\nThe diff coverage is 62.5%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1029   +/-\n=======================================\n  Coverage   76.57%   76.57%         \n=======================================\n  Files          26       26         \n  Lines        2224     2224         \n=======================================\n  Hits         1703     1703         \n  Misses        397      397         \n  Partials      124      124\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/basic_auth.go | 55.55% <62.5%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b28538b...a744d9a. Read the comment docs.\n. # Codecov Report\nMerging #1031 into master will decrease coverage by 4.19%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1031     +/-\n=========================================\n- Coverage   80.78%   76.59%   -4.2%   \n=========================================\n  Files          27       26      -1   \n  Lines        1884     2226    +342   \n=========================================\n+ Hits         1522     1705    +183   \n- Misses        254      397    +143   \n- Partials      108      124     +16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/basic_auth.go | 57.44% <100%> (-11.13%) | :arrow_down: |\n| middleware/redirect.go | 54.86% <0%> (-33.37%) | :arrow_down: |\n| middleware/proxy.go | 41.66% <0%> (-22.69%) | :arrow_down: |\n| middleware/body_dump.go | 61.36% <0%> (-21.5%) | :arrow_down: |\n| echo_go1.8.go | 20% <0%> (-5%) | :arrow_down: |\n| middleware/recover.go | 67.85% <0%> (-4.88%) | :arrow_down: |\n| middleware/logger.go | 80.53% <0%> (-3.94%) | :arrow_down: |\n| context.go | 69.8% <0%> (-3.35%) | :arrow_down: |\n| middleware/static.go | 53.16% <0%> (-3.29%) | :arrow_down: |\n| ... and 17 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bdb49be...649fbe8. Read the comment docs.\n. # Codecov Report\nMerging #1033 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1033   +/-\n=======================================\n  Coverage   76.57%   76.57%         \n=======================================\n  Files          26       26         \n  Lines        2224     2224         \n=======================================\n  Hits         1703     1703         \n  Misses        397      397         \n  Partials      124      124\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/basic_auth.go | 55.55% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b28538b...28938dc. Read the comment docs.\n. # Codecov Report\nMerging #1041 into master will increase coverage by 0.09%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1041      +/-\n==========================================\n+ Coverage   81.58%   81.68%   +0.09%   \n==========================================\n  Files          25       25            \n  Lines        1901     1911      +10   \n==========================================\n+ Hits         1551     1561      +10   \n  Misses        246      246            \n  Partials      104      104\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/jwt.go | 90% <100%> (+1.42%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d36ff72...1efeb1b. Read the comment docs.\n. # Codecov Report\nMerging #1043 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1043      +/-\n==========================================\n+ Coverage   78.11%   78.16%   +0.05%   \n==========================================\n  Files          26       26            \n  Lines        1846     1832      -14   \n==========================================\n- Hits         1442     1432      -10   \n+ Misses        279      276       -3   \n+ Partials      125      124       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 86.38% <100%> (\u00f8) | :arrow_up: |\n| group.go | 93.02% <0%> (-0.73%) | :arrow_down: |\n| response.go | 71.87% <0%> (+3.58%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a028fd4...c3accc8. Read the comment docs.\n. # Codecov Report\nMerging #1044 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1044   +/-\n=======================================\n  Coverage   77.73%   77.73%         \n=======================================\n  Files          27       27         \n  Lines        1922     1922         \n=======================================\n  Hits         1494     1494         \n  Misses        301      301         \n  Partials      127      127\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c8bedd1...612a652. Read the comment docs.\n. # Codecov Report\nMerging #1051 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1051   +/-\n=======================================\n  Coverage   77.73%   77.73%         \n=======================================\n  Files          27       27         \n  Lines        1922     1922         \n=======================================\n  Hits         1494     1494         \n  Misses        301      301         \n  Partials      127      127\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b604040...c718102. Read the comment docs.\n. # Codecov Report\nMerging #1053 into master will increase coverage by 1.09%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1053      +/-\n==========================================\n+ Coverage   77.73%   78.82%   +1.09%   \n==========================================\n  Files          27       27            \n  Lines        1922     1884      -38   \n==========================================\n- Hits         1494     1485       -9   \n+ Misses        301      284      -17   \n+ Partials      127      115      -12\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/redirect.go | 86.27% <100%> (+26.72%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 40cae83...981962a. Read the comment docs.\n. # Codecov Report\nMerging #1055 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1055   +/-\n=======================================\n  Coverage   78.83%   78.83%         \n=======================================\n  Files          27       27         \n  Lines        1885     1885         \n=======================================\n  Hits         1486     1486         \n  Misses        284      284         \n  Partials      115      115\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f710bf6...81d7122. Read the comment docs.\n. # Codecov Report\nMerging #1057 into master will decrease coverage by 2.51%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1057      +/-\n==========================================\n- Coverage    81.3%   78.78%   -2.52%   \n==========================================\n  Files          25       27       +2   \n  Lines        1904     1881      -23   \n==========================================\n- Hits         1548     1482      -66   \n- Misses        249      284      +35   \n- Partials      107      115       +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/jwt.go | 86.11% <50%> (+4.53%) | :arrow_up: |\n| middleware/body_dump.go | 60% <0%> (-22.86%) | :arrow_down: |\n| middleware/proxy.go | 48.51% <0%> (-15.85%) | :arrow_down: |\n| middleware/static.go | 56.45% <0%> (-9.71%) | :arrow_down: |\n| middleware/basic_auth.go | 59.45% <0%> (-9.12%) | :arrow_down: |\n| middleware/body_limit.go | 75% <0%> (-5.49%) | :arrow_down: |\n| middleware/redirect.go | 86.27% <0%> (-1.97%) | :arrow_down: |\n| bind.go | 83.22% <0%> (-1.87%) | :arrow_down: |\n| middleware/logger.go | 83.16% <0%> (-1.74%) | :arrow_down: |\n| echo.go | 86.38% <0%> (-1.26%) | :arrow_down: |\n| ... and 8 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9b4cc60...76a5bfb. Read the comment docs.\n. # Codecov Report\nMerging #1058 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1058      +/-\n==========================================\n+ Coverage   78.87%   78.92%   +0.05%   \n==========================================\n  Files          27       27            \n  Lines        1879     1879            \n==========================================\n+ Hits         1482     1483       +1   \n+ Misses        283      282       -1   \n  Partials      114      114\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/redirect.go | 88.23% <100%> (+1.96%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ec048ea...23ca707. Read the comment docs.\n. # Codecov Report\nMerging #1060 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1060      +/-\n==========================================\n+ Coverage   78.92%   78.93%   +0.01%   \n==========================================\n  Files          27       27            \n  Lines        1879     1880       +1   \n==========================================\n+ Hits         1483     1484       +1   \n  Misses        282      282            \n  Partials      114      114\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| context.go | 73.39% <100%> (+0.12%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fad19bf...1331a74. Read the comment docs.\n. # Codecov Report\nMerging #1061 into master will increase coverage by 1.46%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1061      +/-\n==========================================\n+ Coverage      79%   80.46%   +1.46%   \n==========================================\n  Files          27       27            \n  Lines        1881     1879       -2   \n==========================================\n+ Hits         1486     1512      +26   \n+ Misses        281      259      -22   \n+ Partials      114      108       -6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/body_dump.go | 82.85% <\u00f8> (+22.85%) | :arrow_up: |\n| middleware/logger.go | 84.46% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/proxy.go | 64.35% <0%> (+15.84%) | :arrow_up: |\n| middleware/jwt.go | 88.57% <0%> (\u00f8) | :arrow_up: |\n| middleware/csrf.go | 76.71% <100%> (\u00f8) | :arrow_up: |\n| bind.go | 83.22% <100%> (\u00f8) | :arrow_up: |\n| echo.go | 86.38% <100%> (\u00f8) | :arrow_up: |\n| router.go | 93.2% <100%> (\u00f8) | :arrow_up: |\n| middleware/basic_auth.go | 68.57% <100%> (+9.11%) | :arrow_up: |\n| group.go | 93.75% <100%> (\u00f8) | :arrow_up: |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7eec915...626e513. Read the comment docs.\n. # Codecov Report\nMerging #1062 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1062   +/-\n=======================================\n  Coverage   78.92%   78.92%         \n=======================================\n  Files          27       27         \n  Lines        1879     1879         \n=======================================\n  Hits         1483     1483         \n  Misses        282      282         \n  Partials      114      114\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fad19bf...bd67cc8. Read the comment docs.\n. # Codecov Report\nMerging #1063 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1063   +/-\n=======================================\n  Coverage   78.92%   78.92%         \n=======================================\n  Files          27       27         \n  Lines        1879     1879         \n=======================================\n  Hits         1483     1483         \n  Misses        282      282         \n  Partials      114      114\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 353564c...6436430. Read the comment docs.\n. # Codecov Report\nMerging #1066 into master will increase coverage by 0.07%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1066      +/-\n=========================================\n+ Coverage   78.92%     79%   +0.07%   \n=========================================\n  Files          27      27            \n  Lines        1879    1881       +2   \n=========================================\n+ Hits         1483    1486       +3   \n+ Misses        282     281       -1   \n  Partials      114     114\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/logger.go | 84.46% <100%> (+1.29%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e9f6780...badfd7d. Read the comment docs.\n. # Codecov Report\nMerging #1068 into master will increase coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1068      +/-\n=========================================\n+ Coverage      79%     79%   +<.01%   \n=========================================\n  Files          27      28       +1   \n  Lines        1881    1886       +5   \n=========================================\n+ Hits         1486    1490       +4   \n- Misses        281     282       +1   \n  Partials      114     114\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| router.go | 92.88% <0%> (-0.32%) | :arrow_down: |\n| util_go17.go | 100% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7eec915...8015c4c. Read the comment docs.\n. # Codecov Report\nMerging #1069 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1069   +/-\n=======================================\n  Coverage   80.46%   80.46%         \n=======================================\n  Files          27       27         \n  Lines        1879     1879         \n=======================================\n  Hits         1512     1512         \n  Misses        259      259         \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/csrf.go | 76.71% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4f3080c...5df4196. Read the comment docs.\n. # Codecov Report\nMerging #1071 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1071   +/-\n=======================================\n  Coverage   80.46%   80.46%         \n=======================================\n  Files          27       27         \n  Lines        1879     1879         \n=======================================\n  Hits         1512     1512         \n  Misses        259      259         \n  Partials      108      108\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6da0483...4f4a153. Read the comment docs.\n. # Codecov Report\nMerging #1072 into master will increase coverage by 0.28%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1072      +/-\n==========================================\n+ Coverage   80.46%   80.75%   +0.28%   \n==========================================\n  Files          27       27            \n  Lines        1879     1881       +2   \n==========================================\n+ Hits         1512     1519       +7   \n+ Misses        259      254       -5   \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 88.41% <100%> (+2.03%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3641cbc...efa9160. Read the comment docs.\n. # Codecov Report\nMerging #1075 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1075   +/-\n=======================================\n  Coverage   80.75%   80.75%         \n=======================================\n  Files          27       27         \n  Lines        1881     1881         \n=======================================\n  Hits         1519     1519         \n  Misses        254      254         \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 88.41% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3cdcc65...646083d. Read the comment docs.\n. # Codecov Report\nMerging #1076 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1076      +/-\n==========================================\n- Coverage   80.75%   80.74%   -0.02%   \n==========================================\n  Files          27       27            \n  Lines        1881     1880       -1   \n==========================================\n- Hits         1519     1518       -1   \n  Misses        254      254            \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| context.go | 73.14% <100%> (-0.13%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3cdcc65...13db091. Read the comment docs.\n. # Codecov Report\nMerging #1081 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1081   +/-\n=======================================\n  Coverage   80.74%   80.74%         \n=======================================\n  Files          27       27         \n  Lines        1880     1880         \n=======================================\n  Hits         1518     1518         \n  Misses        254      254         \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 88.41% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f5491fd...961424e. Read the comment docs.\n. # Codecov Report\nMerging #1083 into master will decrease coverage by 0.51%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1083      +/-\n==========================================\n- Coverage    81.3%   80.78%   -0.52%   \n==========================================\n  Files          25       27       +2   \n  Lines        1904     1884      -20   \n==========================================\n- Hits         1548     1522      -26   \n- Misses        249      254       +5   \n- Partials      107      108       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/static.go | 56.45% <0%> (-9.71%) | :arrow_down: |\n| middleware/body_limit.go | 75% <0%> (-5.49%) | :arrow_down: |\n| bind.go | 83.22% <0%> (-1.87%) | :arrow_down: |\n| context.go | 73.14% <0%> (-0.49%) | :arrow_down: |\n| middleware/logger.go | 84.46% <0%> (-0.44%) | :arrow_down: |\n| middleware/middleware.go | 100% <0%> (\u00f8) | :arrow_up: |\n| util_go18.go | 100% <0%> (\u00f8) | |\n| echo_go1.8.go | 25% <0%> (\u00f8) | |\n| echo.go | 88.41% <0%> (+0.78%) | :arrow_up: |\n| response.go | 68.29% <0%> (+2.5%) | :arrow_up: |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9b4cc60...8f21326. Read the comment docs.\n. # Codecov Report\nMerging #1085 into master will increase coverage by 0.11%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1085      +/-\n==========================================\n+ Coverage   80.86%   80.98%   +0.11%   \n==========================================\n  Files          27       27            \n  Lines        1892     1893       +1   \n==========================================\n+ Hits         1530     1533       +3   \n+ Misses        254      253       -1   \n+ Partials      108      107       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/body_limit.go | 80.48% <100%> (+5.48%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d9da3f1...c03775b. Read the comment docs.\n. # Codecov Report\nMerging #1091 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1091      +/-\n==========================================\n+ Coverage   80.86%   80.89%   +0.03%   \n==========================================\n  Files          27       27            \n  Lines        1892     1895       +3   \n==========================================\n+ Hits         1530     1533       +3   \n  Misses        254      254            \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 88.84% <100%> (+0.12%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d79727c...e84b2d7. Read the comment docs.\n. # Codecov Report\nMerging #1092 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1092   +/-\n=======================================\n  Coverage   81.06%   81.06%         \n=======================================\n  Files          27       27         \n  Lines        1901     1901         \n=======================================\n  Hits         1541     1541         \n  Misses        253      253         \n  Partials      107      107\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a5d81b8...e465d80. Read the comment docs.\n. # Codecov Report\nMerging #1094 into master will decrease coverage by 0.45%.\nThe diff coverage is 40%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1094      +/-\n==========================================\n- Coverage    81.3%   80.84%   -0.46%   \n==========================================\n  Files          25       27       +2   \n  Lines        1904     1911       +7   \n==========================================\n- Hits         1548     1545       -3   \n- Misses        249      259      +10   \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| context.go | 72.17% <40%> (-1.47%) | :arrow_down: |\n| middleware/static.go | 56.45% <0%> (-9.71%) | :arrow_down: |\n| bind.go | 83.22% <0%> (-1.87%) | :arrow_down: |\n| middleware/logger.go | 84.46% <0%> (-0.44%) | :arrow_down: |\n| middleware/middleware.go | 100% <0%> (\u00f8) | :arrow_up: |\n| echo_go1.8.go | 25% <0%> (\u00f8) | |\n| util_go18.go | 100% <0%> (\u00f8) | |\n| echo.go | 89.05% <0%> (+1.41%) | :arrow_up: |\n| middleware/jwt.go | 88.57% <0%> (+6.99%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9b4cc60...4915575. Read the comment docs.\n. # Codecov Report\nMerging #1096 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1096   +/-\n=======================================\n  Coverage   81.06%   81.06%         \n=======================================\n  Files          27       27         \n  Lines        1901     1901         \n=======================================\n  Hits         1541     1541         \n  Misses        253      253         \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 89.05% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a5d81b8...ce3e6b6. Read the comment docs.\n. # Codecov Report\nMerging #1098 into master will decrease coverage by 0.26%.\nThe diff coverage is 91.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1098      +/-\n==========================================\n- Coverage   81.44%   81.17%   -0.27%   \n==========================================\n  Files          25       27       +2   \n  Lines        1902     1918      +16   \n==========================================\n+ Hits         1549     1557       +8   \n- Misses        247      254       +7   \n- Partials      106      107       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 89.16% <100%> (+1.22%) | :arrow_up: |\n| router.go | 93.3% <66.66%> (\u00f8) | :arrow_up: |\n| context.go | 74.78% <94.11%> (+1.14%) | :arrow_up: |\n| middleware/static.go | 56.45% <0%> (-9.71%) | :arrow_down: |\n| echo_go1.8.go | 25% <0%> (\u00f8) | |\n| util_go18.go | 100% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ce4a31c...21f7551. Read the comment docs.\n. # Codecov Report\nMerging #1099 into master will decrease coverage by 0.87%.\nThe diff coverage is 53.03%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1099      +/-\n==========================================\n- Coverage   81.06%   80.18%   -0.88%   \n==========================================\n  Files          27       27            \n  Lines        1901     1963      +62   \n==========================================\n+ Hits         1541     1574      +33   \n- Misses        253      273      +20   \n- Partials      107      116       +9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo_go1.8.go | 28.94% <28.12%> (+3.94%) | :arrow_up: |\n| echo.go | 87.58% <76.47%> (-1.47%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 60f88a7...07d5cb9. Read the comment docs.\n. # Codecov Report\nMerging #1100 into master will increase coverage by 0.08%.\nThe diff coverage is 60%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1100      +/-\n==========================================\n+ Coverage   81.06%   81.14%   +0.08%   \n==========================================\n  Files          27       25       -2   \n  Lines        1901     1899       -2   \n==========================================\n  Hits         1541     1541            \n+ Misses        253      250       -3   \n- Partials      107      108       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/static.go | 56.45% <100%> (\u00f8) | :arrow_up: |\n| echo.go | 87.94% <55.55%> (-1.11%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 60f88a7...dedf0db. Read the comment docs.\n. # Codecov Report\nMerging #1101 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1101   +/-\n=======================================\n  Coverage   81.14%   81.14%         \n=======================================\n  Files          25       25         \n  Lines        1899     1899         \n=======================================\n  Hits         1541     1541         \n  Misses        250      250         \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| router.go | 93.3% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 37f1a47...6474d5c. Read the comment docs.\n. # Codecov Report\nMerging #1106 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1106   +/-\n=======================================\n  Coverage   81.14%   81.14%         \n=======================================\n  Files          25       25         \n  Lines        1899     1899         \n=======================================\n  Hits         1541     1541         \n  Misses        250      250         \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| router.go | 93.3% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5b769f9...67f47d1. Read the comment docs.\n. # Codecov Report\nMerging #1109 into master will increase coverage by 0.07%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1109      +/-\n==========================================\n+ Coverage   81.14%   81.22%   +0.07%   \n==========================================\n  Files          25       25            \n  Lines        1899     1907       +8   \n==========================================\n+ Hits         1541     1549       +8   \n  Misses        250      250            \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| router.go | 93.51% <100%> (+0.2%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cf7b555...eca0d61. Read the comment docs.\n. # Codecov Report\nMerging #1110 into master will decrease coverage by 0.48%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1110      +/-\n==========================================\n- Coverage   81.44%   80.95%   -0.49%   \n==========================================\n  Files          25       25            \n  Lines        1902     1953      +51   \n==========================================\n+ Hits         1549     1581      +32   \n- Misses        247      260      +13   \n- Partials      106      112       +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| router.go | 93.3% <100%> (\u00f8) | :arrow_up: |\n| middleware/static.go | 64.65% <0%> (-1.5%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 38f27e2...40a9406. Read the comment docs.\n. # Codecov Report\nMerging #1118 into master will increase coverage by 0.02%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1118      +/-\n==========================================\n+ Coverage   81.43%   81.45%   +0.02%   \n==========================================\n  Files          25       25            \n  Lines        1901     1909       +8   \n==========================================\n+ Hits         1548     1555       +7   \n- Misses        247      250       +3   \n+ Partials      106      104       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.98% <100%> (+0.08%) | :arrow_up: |\n| context.go | 73.75% <100%> (+0.11%) | :arrow_up: |\n| response.go | 60.46% <16.66%> (-5.33%) | :arrow_down: |\n| bind.go | 85.09% <0%> (+1.86%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f867058...856465d. Read the comment docs.\n. # Codecov Report\nMerging #1121 into master will decrease coverage by 0.25%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1121      +/-\n==========================================\n- Coverage   81.43%   81.17%   -0.26%   \n==========================================\n  Files          25       25            \n  Lines        1901     1907       +6   \n==========================================\n  Hits         1548     1548            \n- Misses        247      251       +4   \n- Partials      106      108       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/jwt.go | 81.57% <0%> (-7%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f867058...921a6fb. Read the comment docs.\n. # Codecov Report\nMerging #1123 into master will increase coverage by 0.15%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1123      +/-\n==========================================\n+ Coverage   81.43%   81.58%   +0.15%   \n==========================================\n  Files          25       25            \n  Lines        1901     1901            \n==========================================\n+ Hits         1548     1551       +3   \n+ Misses        247      246       -1   \n+ Partials      106      104       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bind.go | 85.09% <100%> (+1.86%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f867058...e7e69bc. Read the comment docs.\n. # Codecov Report\nMerging #1136 into master will decrease coverage by <.01%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1136      +/-\n==========================================\n- Coverage   81.58%   81.57%   -0.01%   \n==========================================\n  Files          25       25            \n  Lines        1901     1900       -1   \n==========================================\n- Hits         1551     1550       -1   \n+ Misses        246      244       -2   \n- Partials      104      106       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/jwt.go | 88.57% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/request_id.go | 80% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/body_limit.go | 80.48% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/recover.go | 72.72% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/method_override.go | 84.61% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/middleware.go | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/secure.go | 92% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/static.go | 66.15% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/csrf.go | 76.71% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/body_dump.go | 82.85% <\u00f8> (\u00f8) | :arrow_up: |\n| ... and 10 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d36ff72...fe36012. Read the comment docs.\n. # Codecov Report\nMerging #1140 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1140      +/-\n==========================================\n+ Coverage   81.58%   81.65%   +0.06%   \n==========================================\n  Files          25       25            \n  Lines        1901     1908       +7   \n==========================================\n+ Hits         1551     1558       +7   \n  Misses        246      246            \n  Partials      104      104\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bind.go | 85.71% <100%> (+0.62%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d36ff72...56e5ae4. Read the comment docs.\n. # Codecov Report\nMerging #1144 into master will increase coverage by 0.53%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1144      +/-\n==========================================\n+ Coverage    81.3%   81.83%   +0.53%   \n==========================================\n  Files          25       25            \n  Lines        1904     1905       +1   \n==========================================\n+ Hits         1548     1559      +11   \n+ Misses        249      242       -7   \n+ Partials      107      104       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bind.go | 85.45% <100%> (+0.36%) | :arrow_up: |\n| middleware/logger.go | 84.46% <0%> (-0.44%) | :arrow_down: |\n| middleware/middleware.go | 100% <0%> (\u00f8) | :arrow_up: |\n| echo.go | 87.9% <0%> (+0.26%) | :arrow_up: |\n| context.go | 75.45% <0%> (+1.81%) | :arrow_up: |\n| middleware/jwt.go | 88.57% <0%> (+6.99%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9b4cc60...9681e53. Read the comment docs.\n. # Codecov Report\nMerging #1148 into master will decrease coverage by 0.12%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1148      +/-\n==========================================\n- Coverage   81.58%   81.46%   -0.13%   \n==========================================\n  Files          25       25            \n  Lines        1901     1904       +3   \n==========================================\n  Hits         1551     1551            \n- Misses        246      248       +2   \n- Partials      104      105       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/cors.go | 69.23% <0%> (-4.24%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d36ff72...483a6dc. Read the comment docs.\n. # Codecov Report\nMerging #1149 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1149      +/-\n==========================================\n+ Coverage   81.57%   81.59%   +0.02%   \n==========================================\n  Files          26       25       -1   \n  Lines        1927     1902      -25   \n==========================================\n- Hits         1572     1552      -20   \n+ Misses        248      246       -2   \n+ Partials      107      104       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.94% <100%> (+0.3%) | :arrow_up: |\n| middleware/rewrite.go | 65.21% <0%> (-2.79%) | :arrow_down: |\n| middleware/cors.go | 73.46% <0%> (-1.54%) | :arrow_down: |\n| bind.go | 85.09% <0%> (-1.22%) | :arrow_down: |\n| middleware/logger.go | 84.46% <0%> (-0.72%) | :arrow_down: |\n| context.go | 73.63% <0%> (-0.68%) | :arrow_down: |\n| middleware/method_override.go | 84.61% <0%> (\u00f8) | :arrow_up: |\n| router.go | 93.3% <0%> (\u00f8) | :arrow_up: |\n| group.go | 93.75% <0%> (\u00f8) | :arrow_up: |\n| middleware/middleware.go | 100% <0%> (\u00f8) | :arrow_up: |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a8de73e...04303f7. Read the comment docs.\n. # Codecov Report\nMerging #1151 into master will decrease coverage by 0.05%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1151      +/-\n==========================================\n- Coverage   81.58%   81.53%   -0.06%   \n==========================================\n  Files          25       25            \n  Lines        1901     1895       -6   \n==========================================\n- Hits         1551     1545       -6   \n  Misses        246      246            \n  Partials      104      104\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.63% <\u00f8> (-0.27%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d36ff72...d580255. Read the comment docs.\n. # Codecov Report\nMerging #1152 into master will increase coverage by 0.28%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1152      +/-\n==========================================\n+ Coverage    81.3%   81.58%   +0.28%   \n==========================================\n  Files          25       25            \n  Lines        1904     1901       -3   \n==========================================\n+ Hits         1548     1551       +3   \n+ Misses        249      246       -3   \n+ Partials      107      104       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/logger.go | 84.46% <0%> (-0.44%) | :arrow_down: |\n| middleware/middleware.go | 100% <0%> (\u00f8) | :arrow_up: |\n| echo.go | 87.9% <0%> (+0.26%) | :arrow_up: |\n| middleware/jwt.go | 88.57% <0%> (+6.99%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9b4cc60...dafc4db. Read the comment docs.\n. # Codecov Report\nMerging #1153 into master will increase coverage by 0.23%.\nThe diff coverage is 60%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1153      +/-\n==========================================\n+ Coverage    81.3%   81.54%   +0.23%   \n==========================================\n  Files          25       25            \n  Lines        1904     1896       -8   \n==========================================\n- Hits         1548     1546       -2   \n+ Misses        249      246       -3   \n+ Partials      107      104       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.68% <60%> (+0.04%) | :arrow_up: |\n| middleware/logger.go | 84.46% <0%> (-0.44%) | :arrow_down: |\n| middleware/middleware.go | 100% <0%> (\u00f8) | :arrow_up: |\n| middleware/jwt.go | 88.57% <0%> (+6.99%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9b4cc60...fb051da. Read the comment docs.\n. # Codecov Report\nMerging #1154 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1154   +/-\n=======================================\n  Coverage   81.53%   81.53%         \n=======================================\n  Files          25       25         \n  Lines        1895     1895         \n=======================================\n  Hits         1545     1545         \n  Misses        246      246         \n  Partials      104      104\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/rewrite.go | 65.21% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5ac8bed...c93adad. Read the comment docs.\n. # Codecov Report\nMerging #1157 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1157      +/-\n==========================================\n+ Coverage    81.3%   81.33%   +0.03%   \n==========================================\n  Files          25       25            \n  Lines        1904     1918      +14   \n==========================================\n+ Hits         1548     1560      +12   \n- Misses        249      250       +1   \n- Partials      107      108       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/logger.go | 85.18% <100%> (+0.27%) | :arrow_up: |\n| middleware/jwt.go | 79.48% <0%> (-2.1%) | :arrow_down: |\n| bind.go | 85.71% <0%> (+0.62%) | :arrow_up: |\n| middleware/cors.go | 75% <0%> (+1.53%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9b4cc60...88cc439. Read the comment docs.\n. # Codecov Report\nMerging #1158 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1158      +/-\n==========================================\n+ Coverage   81.78%   81.82%   +0.03%   \n==========================================\n  Files          26       26            \n  Lines        1933     1937       +4   \n==========================================\n+ Hits         1581     1585       +4   \n  Misses        243      243            \n  Partials      109      109\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| context.go | 74.68% <100%> (+0.43%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8896575...a91ca8c. Read the comment docs.\n. # Codecov Report\nMerging #1159 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1159      +/-\n==========================================\n+ Coverage   81.33%   81.38%   +0.04%   \n==========================================\n  Files          25       25            \n  Lines        1918     1923       +5   \n==========================================\n+ Hits         1560     1565       +5   \n  Misses        250      250            \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| context.go | 74.22% <100%> (+0.58%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 09dcba1...40a0a95. Read the comment docs.\n. # Codecov Report\nMerging #1160 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1160      +/-\n==========================================\n+ Coverage   81.33%   81.37%   +0.03%   \n==========================================\n  Files          25       25            \n  Lines        1918     1922       +4   \n==========================================\n+ Hits         1560     1564       +4   \n  Misses        250      250            \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/logger.go | 85.71% <100%> (+0.52%) | :arrow_up: |\n| middleware/jwt.go | 79.48% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 09dcba1...bb0f94b. Read the comment docs.\n. # Codecov Report\nMerging #1161 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1161      +/-\n==========================================\n+ Coverage   81.33%   81.35%   +0.01%   \n==========================================\n  Files          25       25            \n  Lines        1918     1920       +2   \n==========================================\n+ Hits         1560     1562       +2   \n  Misses        250      250            \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/static.go | 67.16% <100%> (+1.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 09dcba1...176a679. Read the comment docs.\n. # Codecov Report\nMerging #1164 into master will decrease coverage by 0.03%.\nThe diff coverage is 64.28%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1164      +/-\n==========================================\n- Coverage   81.54%   81.51%   -0.04%   \n==========================================\n  Files          25       25            \n  Lines        1913     1920       +7   \n==========================================\n+ Hits         1560     1565       +5   \n- Misses        247      248       +1   \n- Partials      106      107       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.72% <100%> (+0.13%) | :arrow_up: |\n| bind.go | 86.3% <54.54%> (-0.89%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a2d4cb9...ad47fe6. Read the comment docs.\n. # Codecov Report\nMerging #1165 into master will increase coverage by 0.08%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1165      +/-\n==========================================\n+ Coverage   81.57%   81.66%   +0.08%   \n==========================================\n  Files          26       26            \n  Lines        1927     1936       +9   \n==========================================\n+ Hits         1572     1581       +9   \n+ Misses        248      247       -1   \n- Partials      107      108       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bind.go | 85.87% <100%> (-0.44%) | :arrow_down: |\n| context.go | 75.22% <0%> (+0.91%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3f8b45c...a1797f8. Read the comment docs.\n. # Codecov Report\nMerging #1166 into master will increase coverage by 0.14%.\nThe diff coverage is 73.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1166      +/-\n==========================================\n+ Coverage   81.33%   81.48%   +0.14%   \n==========================================\n  Files          25       25            \n  Lines        1918     1928      +10   \n==========================================\n+ Hits         1560     1571      +11   \n+ Misses        250      249       -1   \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/jwt.go | 78.49% <73.33%> (-1%) | :arrow_down: |\n| echo.go | 87.59% <0%> (-0.05%) | :arrow_down: |\n| context.go | 74.31% <0%> (+0.67%) | :arrow_up: |\n| bind.go | 87.19% <0%> (+1.48%) | :arrow_up: |\n| middleware/rewrite.go | 68% <0%> (+2.78%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2017e5e...9327f2e. Read the comment docs.\n. # Codecov Report\nMerging #1169 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1169   +/-\n=======================================\n  Coverage   81.33%   81.33%         \n=======================================\n  Files          25       25         \n  Lines        1918     1918         \n=======================================\n  Hits         1560     1560         \n  Misses        250      250         \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.63% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update db8f570...368430e. Read the comment docs.\n. # Codecov Report\nMerging #1173 into master will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1173   +/-\n=======================================\n  Coverage   81.33%   81.33%         \n=======================================\n  Files          25       25         \n  Lines        1918     1918         \n=======================================\n  Hits         1560     1560         \n  Misses        250      250         \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.63% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 76d8adb...8af9206. Read the comment docs.\n. # Codecov Report\nMerging #1176 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1176      +/-\n==========================================\n+ Coverage   81.33%   81.35%   +0.01%   \n==========================================\n  Files          25       25            \n  Lines        1918     1920       +2   \n==========================================\n+ Hits         1560     1562       +2   \n  Misses        250      250            \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/rewrite.go | 68% <100%> (+2.78%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2017e5e...2df12d8. Read the comment docs.\n. # Codecov Report\nMerging #1181 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1181   +/-\n=======================================\n  Coverage   81.35%   81.35%         \n=======================================\n  Files          25       25         \n  Lines        1920     1920         \n=======================================\n  Hits         1562     1562         \n  Misses        250      250         \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.63% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 74f9806...4ce8e2e. Read the comment docs.\n. # Codecov Report\nMerging #1182 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1182      +/-\n==========================================\n- Coverage   81.35%   81.34%   -0.01%   \n==========================================\n  Files          25       25            \n  Lines        1920     1919       -1   \n==========================================\n- Hits         1562     1561       -1   \n  Misses        250      250            \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.59% <100%> (-0.05%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 74f9806...7729b27. Read the comment docs.\n. # Codecov Report\nMerging #1184 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1184   +/-\n=======================================\n  Coverage   81.35%   81.35%         \n=======================================\n  Files          25       25         \n  Lines        1920     1920         \n=======================================\n  Hits         1562     1562         \n  Misses        250      250         \n  Partials      108      108\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 74f9806...c650f57. Read the comment docs.\n. # Codecov Report\nMerging #1187 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1187   +/-\n=======================================\n  Coverage   81.34%   81.34%         \n=======================================\n  Files          25       25         \n  Lines        1919     1919         \n=======================================\n  Hits         1561     1561         \n  Misses        250      250         \n  Partials      108      108\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9082231...9b4d027. Read the comment docs.\n. # Codecov Report\nMerging #1189 into master will increase coverage by 0.11%.\nThe diff coverage is 20%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1189      +/-\n==========================================\n+ Coverage   81.34%   81.46%   +0.11%   \n==========================================\n  Files          25       25            \n  Lines        1919     1915       -4   \n==========================================\n- Hits         1561     1560       -1   \n+ Misses        250      249       -1   \n+ Partials      108      106       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bind.go | 87.19% <20%> (+1.48%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 54d5613...a7ca8b0. Read the comment docs.\n. # Codecov Report\nMerging #1192 into master will decrease coverage by <.01%.\nThe diff coverage is 60%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1192      +/-\n==========================================\n- Coverage   81.46%   81.45%   -0.01%   \n==========================================\n  Files          25       25            \n  Lines        1915     1914       -1   \n==========================================\n- Hits         1560     1559       -1   \n  Misses        249      249            \n  Partials      106      106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| context.go | 73.63% <50%> (\u00f8) | :arrow_up: |\n| echo.go | 87.54% <75%> (-0.05%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 688ab2b...1482101. Read the comment docs.\n. # Codecov Report\nMerging #1193 into master will increase coverage by 0.04%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1193      +/-\n=========================================\n+ Coverage   81.46%   81.5%   +0.04%   \n=========================================\n  Files          25      25            \n  Lines        1915    1914       -1   \n=========================================\n  Hits         1560    1560            \n+ Misses        249     248       -1   \n  Partials      106     106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| context.go | 73.97% <0%> (+0.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 688ab2b...648bf02. Read the comment docs.\n. # Codecov Report\nMerging #1193 into master will increase coverage by 0.04%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1193      +/-\n=========================================\n+ Coverage   81.46%   81.5%   +0.04%   \n=========================================\n  Files          25      25            \n  Lines        1915    1914       -1   \n=========================================\n  Hits         1560    1560            \n+ Misses        249     248       -1   \n  Partials      106     106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| context.go | 73.97% <0%> (+0.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 688ab2b...648bf02. Read the comment docs.\n. # Codecov Report\nMerging #1194 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1194   +/-\n=======================================\n  Coverage   81.46%   81.46%         \n=======================================\n  Files          25       25         \n  Lines        1915     1915         \n=======================================\n  Hits         1560     1560         \n  Misses        249      249         \n  Partials      106      106\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 688ab2b...954be64. Read the comment docs.\n. # Codecov Report\nMerging #1196 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1196   +/-\n=======================================\n  Coverage   81.54%   81.54%         \n=======================================\n  Files          25       25         \n  Lines        1913     1913         \n=======================================\n  Hits         1560     1560         \n  Misses        247      247         \n  Partials      106      106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.59% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a2d4cb9...a1517fd. Read the comment docs.\n. # Codecov Report\nMerging #1197 into master will increase coverage by 0.09%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1197      +/-\n==========================================\n+ Coverage   81.52%   81.61%   +0.09%   \n==========================================\n  Files          25       27       +2   \n  Lines        1921     1931      +10   \n==========================================\n+ Hits         1566     1576      +10   \n  Misses        248      248            \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.72% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/proxy_1_11_n.go | 100% <100%> (\u00f8) | |\n| middleware/proxy_1_11.go | 100% <100%> (\u00f8) | |\n| middleware/proxy.go | 64% <100%> (-0.71%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fcdf096...c809fdd. Read the comment docs.\n. # Codecov Report\nMerging #1199 into master will increase coverage by 0.25%.\nThe diff coverage is 82.92%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1199      +/-\n==========================================\n+ Coverage   81.61%   81.86%   +0.25%   \n==========================================\n  Files          27       27            \n  Lines        1931     1991      +60   \n==========================================\n+ Hits         1576     1630      +54   \n- Misses        248      249       +1   \n- Partials      107      112       +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| context.go | 74.24% <82.92%> (-0.07%) | :arrow_down: |\n| echo.go | 88.81% <0%> (+1.09%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ba1891b...c939bc1. Read the comment docs.\n. # Codecov Report\nMerging #1200 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1200   +/-\n=======================================\n  Coverage   81.51%   81.51%         \n=======================================\n  Files          25       25         \n  Lines        1920     1920         \n=======================================\n  Hits         1565     1565         \n  Misses        248      248         \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.72% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 036e696...fa5bfe5. Read the comment docs.\n. # Codecov Report\nMerging #1201 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1201   +/-\n=======================================\n  Coverage   81.51%   81.51%         \n=======================================\n  Files          25       25         \n  Lines        1920     1920         \n=======================================\n  Hits         1565     1565         \n  Misses        248      248         \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| router.go | 93.3% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 036e696...7b4be99. Read the comment docs.\n. # Codecov Report\nMerging #1203 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1203      +/-\n==========================================\n+ Coverage   81.51%   81.52%   +<.01%   \n==========================================\n  Files          25       25            \n  Lines        1920     1921       +1   \n==========================================\n+ Hits         1565     1566       +1   \n  Misses        248      248            \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/proxy.go | 64.7% <100%> (+0.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update af5c977...b37fd28. Read the comment docs.\n. # Codecov Report\nMerging #1204 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1204   +/-\n=======================================\n  Coverage   81.52%   81.52%         \n=======================================\n  Files          25       25         \n  Lines        1921     1921         \n=======================================\n  Hits         1566     1566         \n  Misses        248      248         \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| context.go | 74.31% <\u00f8> (\u00f8) | :arrow_up: |\n| bind.go | 86.3% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fcdf096...7b04cbe. Read the comment docs.\n. # Codecov Report\nMerging #1205 into master will not change coverage.\nThe diff coverage is 97.61%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1205   +/-\n=======================================\n  Coverage   81.61%   81.61%         \n=======================================\n  Files          27       27         \n  Lines        1931     1931         \n=======================================\n  Hits         1576     1576         \n  Misses        248      248         \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/proxy_1_11.go | 100% <100%> (\u00f8) | :arrow_up: |\n| group.go | 93.75% <100%> (\u00f8) | :arrow_up: |\n| router.go | 93.3% <100%> (\u00f8) | :arrow_up: |\n| middleware/csrf.go | 76.71% <100%> (\u00f8) | :arrow_up: |\n| middleware/method_override.go | 84.61% <100%> (\u00f8) | :arrow_up: |\n| bind.go | 86.3% <100%> (\u00f8) | :arrow_up: |\n| middleware/cors.go | 75% <100%> (\u00f8) | :arrow_up: |\n| echo.go | 87.72% <90%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 059c099...52bd56c. Read the comment docs.\n. # Codecov Report\nMerging #1206 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1206   +/-\n=======================================\n  Coverage   81.52%   81.52%         \n=======================================\n  Files          25       25         \n  Lines        1921     1921         \n=======================================\n  Hits         1566     1566         \n  Misses        248      248         \n  Partials      107      107\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fcdf096...8705388. Read the comment docs.\n. # Codecov Report\nMerging #1207 into master will increase coverage by 0.11%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1207      +/-\n==========================================\n+ Coverage   81.61%   81.73%   +0.11%   \n==========================================\n  Files          27       27            \n  Lines        1931     1927       -4   \n==========================================\n- Hits         1576     1575       -1   \n+ Misses        248      246       -2   \n+ Partials      107      106       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.72% <\u00f8> (\u00f8) | :arrow_up: |\n| bind.go | 87.8% <50%> (+1.49%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 059c099...a80db09. Read the comment docs.\n. # Codecov Report\nMerging #1208 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1208   +/-\n=======================================\n  Coverage   81.61%   81.61%         \n=======================================\n  Files          27       27         \n  Lines        1931     1931         \n=======================================\n  Hits         1576     1576         \n  Misses        248      248         \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| router.go | 93.3% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c8fd197...15bcc37. Read the comment docs.\n. # Codecov Report\nMerging #1209 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1209   +/-\n=======================================\n  Coverage   81.61%   81.61%         \n=======================================\n  Files          27       27         \n  Lines        1931     1931         \n=======================================\n  Hits         1576     1576         \n  Misses        248      248         \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.72% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 82917fd...6376ff2. Read the comment docs.\n. # Codecov Report\nMerging #1211 into master will decrease coverage by 0.47%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1211      +/-\n==========================================\n- Coverage   81.61%   81.14%   -0.48%   \n==========================================\n  Files          27       28       +1   \n  Lines        1931     1994      +63   \n==========================================\n+ Hits         1576     1618      +42   \n- Misses        248      264      +16   \n- Partials      107      112       +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/ip_filter.go | 66.66% <66.66%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ba1891b...2a25472. Read the comment docs.\n. # Codecov Report\nMerging #1212 into master will decrease coverage by 0.12%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1212      +/-\n==========================================\n- Coverage   81.61%   81.48%   -0.13%   \n==========================================\n  Files          27       27            \n  Lines        1931     1934       +3   \n==========================================\n  Hits         1576     1576            \n- Misses        248      250       +2   \n- Partials      107      108       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/jwt.go | 76.54% <0%> (-2.95%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ba1891b...ea2a323. Read the comment docs.\n. # Codecov Report\nMerging #1216 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1216      +/-\n=========================================\n- Coverage   81.61%   81.6%   -0.01%   \n=========================================\n  Files          27      27            \n  Lines        1931    1930       -1   \n=========================================\n- Hits         1576    1575       -1   \n  Misses        248     248            \n  Partials      107     107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.68% <100%> (-0.05%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ba1891b...250d444. Read the comment docs.\n. # Codecov Report\nMerging #1218 into master will decrease coverage by 0.12%.\nThe diff coverage is 25%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1218      +/-\n==========================================\n- Coverage   81.57%   81.45%   -0.13%   \n==========================================\n  Files          26       26            \n  Lines        1927     1930       +3   \n==========================================\n  Hits         1572     1572            \n- Misses        248      249       +1   \n- Partials      107      109       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/recover.go | 64% <25%> (-8.73%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e6ac002...c4a964b. Read the comment docs.\n. # Codecov Report\nMerging #1220 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1220      +/-\n=========================================\n+ Coverage   81.57%   81.6%   +0.02%   \n=========================================\n  Files          26      26            \n  Lines        1927    1930       +3   \n=========================================\n+ Hits         1572    1575       +3   \n  Misses        248     248            \n  Partials      107     107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| context.go | 74.66% <100%> (+0.34%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b37628b...343a203. Read the comment docs.\n. # Codecov Report\nMerging #1226 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1226      +/-\n==========================================\n+ Coverage   81.57%   81.59%   +0.01%   \n==========================================\n  Files          26       26            \n  Lines        1927     1929       +2   \n==========================================\n+ Hits         1572     1574       +2   \n  Misses        248      248            \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| context.go | 74.54% <100%> (+0.23%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c54d9e8...d5760e3. Read the comment docs.\n. # Codecov Report\nMerging #1227 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1227   +/-\n=======================================\n  Coverage   81.57%   81.57%         \n=======================================\n  Files          26       26         \n  Lines        1927     1927         \n=======================================\n  Hits         1572     1572         \n  Misses        248      248         \n  Partials      107      107\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c54d9e8...bb1fdbb. Read the comment docs.\n. # Codecov Report\nMerging #1228 into master will increase coverage by 1.96%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1228      +/-\n==========================================\n+ Coverage   81.51%   83.47%   +1.96%   \n==========================================\n  Files          26       26            \n  Lines        1942     2245     +303   \n==========================================\n+ Hits         1583     1874     +291   \n- Misses        250      253       +3   \n- Partials      109      118       +9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/logger.go | 85.18% <0%> (\u00f8) | :arrow_up: |\n| middleware/slash.go | 94.36% <0%> (+2.87%) | :arrow_up: |\n| bind.go | 89.4% <0%> (+3.09%) | :arrow_up: |\n| context.go | 77.46% <0%> (+3.22%) | :arrow_up: |\n| echo.go | 91.44% <0%> (+3.8%) | :arrow_up: |\n| response.go | 74.41% <0%> (+8.62%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update afe90e7...87775fa. Read the comment docs.\n. # Codecov Report\nMerging #1232 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1232   +/-\n=======================================\n  Coverage   81.57%   81.57%         \n=======================================\n  Files          26       26         \n  Lines        1927     1927         \n=======================================\n  Hits         1572     1572         \n  Misses        248      248         \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/logger.go | 85.18% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c54d9e8...80baf45. Read the comment docs.\n. # Codecov Report\nMerging #1234 into master will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1234   +/-\n=======================================\n  Coverage   81.57%   81.57%         \n=======================================\n  Files          26       26         \n  Lines        1927     1927         \n=======================================\n  Hits         1572     1572         \n  Misses        248      248         \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/logger.go | 85.18% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c54d9e8...3c05bdc. Read the comment docs.\n. # Codecov Report\nMerging #1235 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1235   +/-\n=======================================\n  Coverage   81.57%   81.57%         \n=======================================\n  Files          26       26         \n  Lines        1927     1927         \n=======================================\n  Hits         1572     1572         \n  Misses        248      248         \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/logger.go | 85.18% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a8de73e...b76e39a. Read the comment docs.\n. # Codecov Report\nMerging #1236 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1236   +/-\n=======================================\n  Coverage   81.57%   81.57%         \n=======================================\n  Files          26       26         \n  Lines        1927     1927         \n=======================================\n  Hits         1572     1572         \n  Misses        248      248         \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bind.go | 86.3% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3f8b45c...4b18f28. Read the comment docs.\n. # Codecov Report\nMerging #1239 into master will increase coverage by 0.08%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1239      +/-\n==========================================\n+ Coverage   81.57%   81.66%   +0.08%   \n==========================================\n  Files          26       26            \n  Lines        1927     1925       -2   \n==========================================\n  Hits         1572     1572            \n+ Misses        248      246       -2   \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bind.go | 87.34% <\u00f8> (+1.03%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3f8b45c...bb119d5. Read the comment docs.\n. # Codecov Report\nMerging #1242 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1242      +/-\n==========================================\n+ Coverage   81.51%   81.54%   +0.03%   \n==========================================\n  Files          26       26            \n  Lines        1942     1924      -18   \n==========================================\n- Hits         1583     1569      -14   \n+ Misses        250      248       -2   \n+ Partials      109      107       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.5% <100%> (-0.14%) | :arrow_down: |\n| context.go | 74.31% <0%> (+0.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update afe90e7...df0631b. Read the comment docs.\n. # Codecov Report\nMerging #1243 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1243   +/-\n=======================================\n  Coverage   81.57%   81.57%         \n=======================================\n  Files          26       26         \n  Lines        1927     1927         \n=======================================\n  Hits         1572     1572         \n  Misses        248      248         \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.63% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3f8b45c...4480d8b. Read the comment docs.\n. # Codecov Report\nMerging #1245 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1245   +/-\n=======================================\n  Coverage   81.57%   81.57%         \n=======================================\n  Files          26       26         \n  Lines        1927     1927         \n=======================================\n  Hits         1572     1572         \n  Misses        248      248         \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/cors.go | 75% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3f8b45c...1af7ff5. Read the comment docs.\n. # Codecov Report\nMerging #1246 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1246   +/-\n=======================================\n  Coverage   81.57%   81.57%         \n=======================================\n  Files          26       26         \n  Lines        1927     1927         \n=======================================\n  Hits         1572     1572         \n  Misses        248      248         \n  Partials      107      107\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.63% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3f8b45c...dd66ca8. Read the comment docs.\n. # Codecov Report\nMerging #1247 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1247      +/-\n==========================================\n+ Coverage   84.22%   84.23%   +0.01%   \n==========================================\n  Files          26       26            \n  Lines        1952     1954       +2   \n==========================================\n+ Hits         1644     1646       +2   \n  Misses        202      202            \n  Partials      106      106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/secure.go | 93.33% <100%> (+0.47%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 08db4bd...9336ce7. Read the comment docs.\n. # Codecov Report\nMerging #1249 into master will decrease coverage by 0.04%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1249      +/-\n==========================================\n- Coverage   81.57%   81.53%   -0.05%   \n==========================================\n  Files          26       26            \n  Lines        1927     1928       +1   \n==========================================\n  Hits         1572     1572            \n  Misses        248      248            \n- Partials      107      108       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/proxy.go | 64.64% <\u00f8> (+0.64%) | :arrow_up: |\n| middleware/proxy_1_11.go | 83.33% <0%> (-16.67%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3f8b45c...3f8db2c. Read the comment docs.\n. # Codecov Report\nMerging #1250 into master will decrease coverage by 0.04%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1250      +/-\n==========================================\n- Coverage   81.57%   81.53%   -0.05%   \n==========================================\n  Files          26       26            \n  Lines        1927     1928       +1   \n==========================================\n  Hits         1572     1572            \n  Misses        248      248            \n- Partials      107      108       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/proxy.go | 64.64% <\u00f8> (+0.64%) | :arrow_up: |\n| middleware/proxy_1_11.go | 83.33% <0%> (-16.67%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3f8b45c...b781d28. Read the comment docs.\n. # Codecov Report\nMerging #1253 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1253   +/-\n=======================================\n  Coverage   81.51%   81.51%         \n=======================================\n  Files          26       26         \n  Lines        1942     1942         \n=======================================\n  Hits         1583     1583         \n  Misses        250      250         \n  Partials      109      109\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/logger.go | 85.18% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/csrf.go | 76.71% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/key_auth.go | 71.42% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/jwt.go | 79.48% <\u00f8> (\u00f8) | :arrow_up: |\n| echo.go | 87.63% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/method_override.go | 84.61% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/recover.go | 72.72% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/request_id.go | 80% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/secure.go | 92% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/slash.go | 91.48% <\u00f8> (\u00f8) | :arrow_up: |\n| ... and 11 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7867fce...3e73b62. Read the comment docs.\n. # Codecov Report\nMerging #1254 into master will increase coverage by 0.11%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1254      +/-\n==========================================\n+ Coverage   81.51%   81.63%   +0.11%   \n==========================================\n  Files          26       26            \n  Lines        1942     1938       -4   \n==========================================\n- Hits         1583     1582       -1   \n+ Misses        250      248       -2   \n+ Partials      109      108       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bind.go | 87.8% <50%> (+1.49%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7867fce...cd69a6d. Read the comment docs.\n. # Codecov Report\nMerging #1256 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1256      +/-\n==========================================\n+ Coverage   81.88%   81.94%   +0.06%   \n==========================================\n  Files          26       26            \n  Lines        1932     1939       +7   \n==========================================\n+ Hits         1582     1589       +7   \n  Misses        242      242            \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/redirect.go | 89.65% <100%> (+1.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6d9e043...ed418a4. Read the comment docs.\n. # Codecov Report\nMerging #1256 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1256      +/-\n==========================================\n+ Coverage   81.51%   81.58%   +0.06%   \n==========================================\n  Files          26       26            \n  Lines        1942     1949       +7   \n==========================================\n+ Hits         1583     1590       +7   \n  Misses        250      250            \n  Partials      109      109\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/redirect.go | 89.65% <100%> (+1.41%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7867fce...1a782cd. Read the comment docs.\n. # Codecov Report\nMerging #1265 into master will decrease coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1265      +/-\n==========================================\n- Coverage   81.51%   81.44%   -0.07%   \n==========================================\n  Files          26       26            \n  Lines        1942     1935       -7   \n==========================================\n- Hits         1583     1576       -7   \n  Misses        250      250            \n  Partials      109      109\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.31% <100%> (-0.33%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update afe90e7...919bf72. Read the comment docs.\n. # Codecov Report\nMerging #1269 into master will increase coverage by 0.25%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1269      +/-\n==========================================\n+ Coverage   81.63%   81.88%   +0.25%   \n==========================================\n  Files          26       26            \n  Lines        1938     1932       -6   \n==========================================\n  Hits         1582     1582            \n+ Misses        248      242       -6   \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/logger.go | 85.18% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/csrf.go | 76.71% <\u00f8> (\u00f8) | :arrow_up: |\n| response.go | 69.44% <\u00f8> (+3.65%) | :arrow_up: |\n| middleware/key_auth.go | 71.42% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/jwt.go | 79.48% <\u00f8> (\u00f8) | :arrow_up: |\n| echo.go | 87.63% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/method_override.go | 84.61% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/recover.go | 72.72% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/request_id.go | 80% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/secure.go | 92% <\u00f8> (\u00f8) | :arrow_up: |\n| ... and 12 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 282a44d...33f2dbe. Read the comment docs.\n. # Codecov Report\nMerging #1269 into master will increase coverage by 0.25%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1269      +/-\n==========================================\n+ Coverage   81.63%   81.88%   +0.25%   \n==========================================\n  Files          26       26            \n  Lines        1938     1932       -6   \n==========================================\n  Hits         1582     1582            \n+ Misses        248      242       -6   \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/logger.go | 85.18% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/csrf.go | 76.71% <\u00f8> (\u00f8) | :arrow_up: |\n| response.go | 69.44% <\u00f8> (+3.65%) | :arrow_up: |\n| middleware/static.go | 66.15% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/key_auth.go | 71.42% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/jwt.go | 79.48% <\u00f8> (\u00f8) | :arrow_up: |\n| echo.go | 87.63% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/method_override.go | 84.61% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/recover.go | 72.72% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/request_id.go | 80% <\u00f8> (\u00f8) | :arrow_up: |\n| ... and 12 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 282a44d...6d9e043. Read the comment docs.\n. # Codecov Report\nMerging #1270 into v4-preview will decrease coverage by 0.09%.\nThe diff coverage is 33.33%.\n\n\n```diff\n@@              Coverage Diff              @@\nv4-preview    #1270     +/-\n=============================================\n- Coverage       81.88%   81.78%   -0.1%   \n=============================================\n  Files              26       26           \n  Lines            1932     1933      +1   \n=============================================\n- Hits             1582     1581      -1   \n- Misses            242      243      +1   \n- Partials          108      109      +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 86.95% <33.33%> (-0.68%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6d9e043...4833f9e. Read the comment docs.\n. # Codecov Report\nMerging #1271 into master will decrease coverage by 0.09%.\nThe diff coverage is 33.33%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1271     +/-\n=========================================\n- Coverage   81.88%   81.78%   -0.1%   \n=========================================\n  Files          26       26           \n  Lines        1932     1933      +1   \n=========================================\n- Hits         1582     1581      -1   \n- Misses        242      243      +1   \n- Partials      108      109      +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 86.95% <33.33%> (-0.68%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6d9e043...26eb8c8. Read the comment docs.\n. # Codecov Report\nMerging #1273 into master will decrease coverage by 0.12%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1273      +/-\n==========================================\n- Coverage   81.88%   81.75%   -0.13%   \n==========================================\n  Files          26       26            \n  Lines        1932     1935       +3   \n==========================================\n  Hits         1582     1582            \n- Misses        242      245       +3   \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 87.63% <\u00f8> (\u00f8) | :arrow_up: |\n| bind.go | 86.22% <0%> (-1.58%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6d9e043...308a23d. Read the comment docs.\n. # Codecov Report\nMerging #1274 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1274   +/-\n=======================================\n  Coverage   81.88%   81.88%         \n=======================================\n  Files          26       26         \n  Lines        1932     1932         \n=======================================\n  Hits         1582     1582         \n  Misses        242      242         \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/redirect.go | 88.23% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6d9e043...db90afb. Read the comment docs.\n. # Codecov Report\nMerging #1275 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1275   +/-\n=======================================\n  Coverage   81.78%   81.78%         \n=======================================\n  Files          26       26         \n  Lines        1933     1933         \n=======================================\n  Hits         1581     1581         \n  Misses        243      243         \n  Partials      109      109\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/slash.go | 91.48% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bc28fce...725b5d8. Read the comment docs.\n. # Codecov Report\nMerging #1276 into master will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1276   +/-\n=======================================\n  Coverage   81.78%   81.78%         \n=======================================\n  Files          26       26         \n  Lines        1933     1933         \n=======================================\n  Hits         1581     1581         \n  Misses        243      243         \n  Partials      109      109\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 86.95% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8896575...cb6e5cf. Read the comment docs.\n. # Codecov Report\nMerging #1277 into master will increase coverage by 0.2%.\nThe diff coverage is 93.75%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1277     +/-\n=========================================\n+ Coverage   81.78%   81.99%   +0.2%   \n=========================================\n  Files          26       26           \n  Lines        1933     1944     +11   \n=========================================\n+ Hits         1581     1594     +13   \n+ Misses        243      242      -1   \n+ Partials      109      108      -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 88.15% <93.75%> (+1.19%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8896575...12ba62c. Read the comment docs.\n. # Codecov Report\nMerging #1278 into master will increase coverage by 0.27%.\nThe diff coverage is 94.11%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1278      +/-\n==========================================\n+ Coverage   84.18%   84.46%   +0.27%   \n==========================================\n  Files          26       26            \n  Lines        1948     1963      +15   \n==========================================\n+ Hits         1640     1658      +18   \n+ Misses        202      199       -3   \n  Partials      106      106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 89.73% <94.11%> (+1.58%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update be919e8...1785bc9. Read the comment docs.\n. # Codecov Report\nMerging #1279 into master will increase coverage by 3.09%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1279      +/-\n==========================================\n+ Coverage   81.82%   84.91%   +3.09%   \n==========================================\n  Files          26       26            \n  Lines        1937     2082     +145   \n==========================================\n+ Hits         1585     1768     +183   \n+ Misses        243      203      -40   \n- Partials      109      111       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bind.go | 89.02% <0%> (+1.21%) | :arrow_up: |\n| echo.go | 90.49% <0%> (+3.54%) | :arrow_up: |\n| context.go | 91.56% <0%> (+16.87%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3d73323...55ab105. Read the comment docs.\n. # Codecov Report\nMerging #1279 into master will increase coverage by 3.09%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1279      +/-\n==========================================\n+ Coverage   81.82%   84.91%   +3.09%   \n==========================================\n  Files          26       26            \n  Lines        1937     2082     +145   \n==========================================\n+ Hits         1585     1768     +183   \n+ Misses        243      203      -40   \n- Partials      109      111       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bind.go | 89.02% <0%> (+1.21%) | :arrow_up: |\n| echo.go | 90.49% <0%> (+3.54%) | :arrow_up: |\n| context.go | 91.56% <0%> (+16.87%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3d73323...55ab105. Read the comment docs.\n. # Codecov Report\nMerging #1280 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1280      +/-\n==========================================\n+ Coverage   82.03%   82.07%   +0.04%   \n==========================================\n  Files          26       26            \n  Lines        1948     1953       +5   \n==========================================\n+ Hits         1598     1603       +5   \n  Misses        242      242            \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| context.go | 75.2% <100%> (+0.52%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5aec1b2...303ba2f. Read the comment docs.\n. # Codecov Report\nMerging #1286 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1286      +/-\n==========================================\n+ Coverage   84.18%   84.21%   +0.02%   \n==========================================\n  Files          26       26            \n  Lines        1948     1951       +3   \n==========================================\n+ Hits         1640     1643       +3   \n  Misses        202      202            \n  Partials      106      106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 88.27% <100%> (+0.12%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update be919e8...04850cb. Read the comment docs.\n. # Codecov Report\nMerging #1287 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1287      +/-\n==========================================\n+ Coverage   84.18%   84.21%   +0.02%   \n==========================================\n  Files          26       26            \n  Lines        1948     1951       +3   \n==========================================\n+ Hits         1640     1643       +3   \n  Misses        202      202            \n  Partials      106      106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 88.15% <\u00f8> (\u00f8) | :arrow_up: |\n| middleware/secure.go | 92.85% <100%> (+0.85%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 17b5044...1881ca4. Read the comment docs.\n. # Codecov Report\nMerging #1288 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1288   +/-\n=======================================\n  Coverage   84.18%   84.18%         \n=======================================\n  Files          26       26         \n  Lines        1948     1948         \n=======================================\n  Hits         1640     1640         \n  Misses        202      202         \n  Partials      106      106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 88.15% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update be919e8...1605d10. Read the comment docs.\n. # Codecov Report\nMerging #1289 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1289      +/-\n==========================================\n+ Coverage   84.18%   84.22%   +0.04%   \n==========================================\n  Files          26       26            \n  Lines        1948     1953       +5   \n==========================================\n+ Hits         1640     1645       +5   \n  Misses        202      202            \n  Partials      106      106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/jwt.go | 80.72% <100%> (+1.23%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update be919e8...76ed13c. Read the comment docs.\n. # Codecov Report\nMerging #1294 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1294   +/-\n=======================================\n  Coverage   84.18%   84.18%         \n=======================================\n  Files          26       26         \n  Lines        1948     1948         \n=======================================\n  Hits         1640     1640         \n  Misses        202      202         \n  Partials      106      106\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update be919e8...b8a7d89. Read the comment docs.\n. # Codecov Report\nMerging #1295 into master will increase coverage by 0.11%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1295      +/-\n==========================================\n+ Coverage   84.21%   84.33%   +0.11%   \n==========================================\n  Files          26       26            \n  Lines        1951     1953       +2   \n==========================================\n+ Hits         1643     1647       +4   \n+ Misses        202      201       -1   \n+ Partials      106      105       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| router.go | 94.14% <100%> (+0.83%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 802fb5b...e1d21a7. Read the comment docs.\n. # Codecov Report\nMerging #1296 into master will decrease coverage by 0.03%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1296      +/-\n==========================================\n- Coverage   84.21%   84.17%   -0.04%   \n==========================================\n  Files          26       26            \n  Lines        1951     1959       +8   \n==========================================\n+ Hits         1643     1649       +6   \n- Misses        202      203       +1   \n- Partials      106      107       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/jwt.go | 79.06% <75%> (-0.42%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 802fb5b...11aa97e. Read the comment docs.\n. # Codecov Report\nMerging #1299 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1299      +/-\n==========================================\n+ Coverage   84.21%   84.22%   +<.01%   \n==========================================\n  Files          26       26            \n  Lines        1951     1952       +1   \n==========================================\n+ Hits         1643     1644       +1   \n  Misses        202      202            \n  Partials      106      106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 88.19% <100%> (+0.04%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 775b2ee...4b92564. Read the comment docs.\n. # Codecov Report\nMerging #1301 into master will increase coverage by 0.05%.\nThe diff coverage is 85.71%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1301      +/-\n==========================================\n+ Coverage   84.21%   84.26%   +0.05%   \n==========================================\n  Files          26       27       +1   \n  Lines        1951     1989      +38   \n==========================================\n+ Hits         1643     1676      +33   \n- Misses        202      205       +3   \n- Partials      106      108       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/cors.go | 76.36% <100%> (+1.36%) | :arrow_up: |\n| middleware/util.go | 84.37% <84.37%> (\u00f8) | |\n| echo.go | 88.19% <0%> (+0.04%) | :arrow_up: |\n| middleware/secure.go | 93.33% <0%> (+0.47%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 775b2ee...cf1aac1. Read the comment docs.\n. # Codecov Report\nMerging #1303 into master will increase coverage by 0.01%.\nThe diff coverage is 77.77%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1303      +/-\n==========================================\n+ Coverage   84.23%   84.25%   +0.01%   \n==========================================\n  Files          26       26            \n  Lines        1954     1956       +2   \n==========================================\n+ Hits         1646     1648       +2   \n  Misses        202      202            \n  Partials      106      106\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/jwt.go | 80% <77.77%> (+0.51%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5434a53...5c05d50. Read the comment docs.\n. # Codecov Report\nMerging #1305 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1305      +/-\n==========================================\n+ Coverage   84.26%   84.27%   +<.01%   \n==========================================\n  Files          27       27            \n  Lines        1989     1990       +1   \n==========================================\n+ Hits         1676     1677       +1   \n  Misses        205      205            \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| echo.go | 88.23% <100%> (+0.04%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1f6cc36...8cd5640. Read the comment docs.\n. # Codecov Report\nMerging #1312 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1312      +/-\n==========================================\n+ Coverage   84.27%   84.29%   +0.02%   \n==========================================\n  Files          27       27            \n  Lines        1990     1993       +3   \n==========================================\n+ Hits         1677     1680       +3   \n  Misses        205      205            \n  Partials      108      108\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| middleware/proxy.go | 65.04% <100%> (+1.04%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e3717be...2db74d3. Read the comment docs.\n. \n",
    "jeyem": "echo: http: panic serving 127.0.0.1:48672: runtime error: index out of range\ngoroutine 21 [running]:\nnet/http.(conn).serve.func1(0xc42030e0a0)\n    /usr/local/go/src/net/http/server.go:1721 +0x183\npanic(0xadbdc0, 0xe20c20)\n    /usr/local/go/src/runtime/panic.go:489 +0x2f0\ngithub.com/labstack/echo.(Router).Find(0xc4200fce60, 0xc42034ef60, 0x3, 0xc42034ef64, 0x14, 0xdff7c0, 0xc420301810)\n    /home/ehsan/go/src/github.com/labstack/echo/router.go:411 +0x1beb\ngithub.com/labstack/echo.(Echo).ServeHTTP.func1(0xdff7c0, 0xc420301810, 0xc420065718, 0xb5a240)\n    /home/ehsan/go/src/github.com/labstack/echo/echo.go:553 +0x13c\ngithub.com/labstack/echo.(Echo).ServeHTTP(0xc4200656c0, 0xdf8500, 0xc420114540, 0xc4203c0000)\n    /home/ehsan/go/src/github.com/labstack/echo/echo.go:567 +0x459\nnet/http.serverHandler.ServeHTTP(0xc4200d62c0, 0xdf8500, 0xc420114540, 0xc4203c0000)\n    /usr/local/go/src/net/http/server.go:2568 +0xbd\nnet/http.(conn).serve(0xc42030e0a0, 0xdf8d40, 0xc4202fc740)\n    /usr/local/go/src/net/http/server.go:1825 +0x71b\ncreated by net/http.(Server).Serve\n    /usr/local/go/src/net/http/server.go:2668 +0x360\n. mm I really could not find where exactly it's happen but when I load statics files, It's show up.. ",
    "mbana": "Does this work?. Thanks and sorry about that.. > small fix, see above\nSee latest PR, I did a force push (sorry).\nThanks. Thanks a lot, folks. What shall I do now? I cannot see a merge button.. Thanks @alexaandru that looks good. I was worried about breaking backwards compatibility hence I introduced the new function.. ok. ok. ok. ",
    "shashanktomar": "Please make a release for this fix. This can be a cause of serious security leak.. ",
    "seriousben": "@vishr Can we have a release for this please thanks!. OMG we were just investigating this ...... . ",
    "alaingilbert": "Hello, Can you give me a concret example of it ?\nI'm not sure to understand what is a group without handler, or what is a \"proxy middleware\".\nI think we should add tests for this case as well.\n\nEdit:\ngo\ng := e.Group(\"/blog\")\ng.Use(middleware.Proxy(...))\n(from : https://echo.labstack.com/cookbook/reverse-proxy). Closing this one in favor of : https://github.com/labstack/echo/pull/975. Hi guys, I totally know that the current behavior (.Group) doesn't provide the functionality I need.\nThis is why I opened this discussion so maybe we can add a new feature to the framework.\nI know I can add the middleware to all my routes, but if I have 40 of them, I would really appreciates to have this .Wrap() functionality !\nI made a proof of concept here of what I have in mind.. ",
    "mcquackers": "I are dumb. ",
    "kieusonlam": "Thanks for reply @KenjiHosaka \nSo we can only using middleware on a group of route right? I think it's just inconvenient when we have to use different route on an api. I mean you have to make a request to /restricted/post\n. ",
    "tap1ra": "Thanks!!!. @vishr \nhttps://github.com/labstack/echo/blob/b42edd791fad73f40065178a7bf442f744ec5b2b/bind.go#L42-L47\nWhat kind of intention is it?\n(paste mistake?)\n. ",
    "paultyng": "@vishr ah I hadn't seen that, yeah we could potentially expose that and add more of the route registration methods to it.  Would you prefer that implementation?  Something like:\n```go\ntype Router interface {\n    Add...?\n    Match(methods []string, path string, handler echo.HandlerFunc, middleware ...echo.MiddlewareFunc) []*echo.Route\nGET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route\nHEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route\nOPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route\nPATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route\nPOST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route\nPUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route\nTRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route\nDELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route\n\n}\n```\n. lol, didn't even give me a couple days to finish my PR?. ",
    "jerCarre": "Ok I add one in key_auth_test.go but i'm not sure.\n2017-08-08 20:19 GMT+02:00 Vishal Rana notifications@github.com:\n\n@jerCarre https://github.com/jercarre Can you update the test case?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/labstack/echo/pull/984#issuecomment-321039330, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AVNCjiCm0zl6AyuNRhCrLJtYcX3TD5ppks5sWKafgaJpZM4OwXMb\n.\n. \n",
    "wonderflow": "@vishr  @goenning  so what will be done to this issue? . yes, I have tested, it's ok now, thanks. ",
    "splittingfield": "@vishr I think this is more of a process thing than anything else.  For example, the documentation for Listing Routes is now incorrect.  Going forward, (and what I have done in the past) is to have a suite of tests aimed at verifying API compatibility of exposed  structs and values.  It is so easy to make a change that is completely innocuous, but actually breaks users (such as this one ;-)\nAlso, documenting changes would help.  Is Name the same is Handler?  Was Handler removed as a concept?  It was unclear to me as to whether we should just change our usage to the new variable or why this change occured.\nAlso, SemVer is hard ;-). @vishr Thanks!  Echo is awesome by the way.  No hard feelings or big deal, just wasted some time to understand what happened.. No worries my friend. As I said, easy mistake to make and one I am sure I have made myself, but in software no one used so no one noticed \ud83d\udc79\nKeep up the great work!. ",
    "norx85": "With echo in debug mode i've got more information to share.\nIf in the XHR request the \"Content-Encoding\" is setted manually to \"multipart/form-data\", the log i get are these:\n2017/09/06 06:41:52 no multipart boundary param in Content-Type\necho: http2: panic serving 82.57.114.12:57072: runtime error: invalid memory address or nil pointer dereference\ngoroutine 603 [running]:\nnet/http.(*http2serverConn).runHandler.func1(0xc42000e0c8, 0xc420349faf, 0xc4200f2c40)\n        /home/ubuntu/.gvm/gos/go1.9/src/net/http/h2_bundle.go:5740 +0x190\npanic(0x8843e0, 0xb790f0)\n        /home/ubuntu/.gvm/gos/go1.9/src/runtime/panic.go:491 +0x283\ngithub.com/labstack/echo.(*Echo).DefaultHTTPErrorHandler(0xc4202281a0, 0xb48020, 0xb78ff0, 0xb53c20, 0xc42008c690)\n        /home/ubuntu/go/src/github.com/labstack/echo/echo.go:325 +0x430\ngithub.com/labstack/echo.(*Echo).DefaultHTTPErrorHandler-fm(0xb48020, 0xb78ff0, 0xb53c20, 0xc42008c690)\n        /home/ubuntu/go/src/github.com/labstack/echo/echo.go:284 +0x52\ngithub.com/labstack/echo.(*Echo).ServeHTTP(0xc4202281a0, 0xb4cca0, 0xc42000e0c8, 0xc420278800)\n        /home/ubuntu/go/src/github.com/labstack/echo/echo.go:583 +0x278\nnet/http.serverHandler.ServeHTTP(0xc4201c4ea0, 0xb4cca0, 0xc42000e0c8, 0xc420278800)\n        /home/ubuntu/.gvm/gos/go1.9/src/net/http/server.go:2619 +0xb4\nnet/http.initNPNRequest.ServeHTTP(0xc420247500, 0xc4201c4ea0, 0xb4cca0, 0xc42000e0c8, 0xc420278800)\n        /home/ubuntu/.gvm/gos/go1.9/src/net/http/server.go:3164 +0x9a\nnet/http.(*initNPNRequest).ServeHTTP(0xc42027dd80, 0xb4cca0, 0xc42000e0c8, 0xc420278800)\n        <autogenerated>:1 +0x63\nnet/http.(Handler).ServeHTTP-fm(0xb4cca0, 0xc42000e0c8, 0xc420278800)\n        /home/ubuntu/.gvm/gos/go1.9/src/net/http/h2_bundle.go:5462 +0x4d\nnet/http.(*http2serverConn).runHandler(0xc4200f2c40, 0xc42000e0c8, 0xc420278800, 0xc42000d1e0)\n        /home/ubuntu/.gvm/gos/go1.9/src/net/http/h2_bundle.go:5747 +0x89\ncreated by net/http.(*http2serverConn).processHeaders\n        /home/ubuntu/.gvm/gos/go1.9/src/net/http/h2_bundle.go:5481 +0x495\nIf i try to make the request without setting the \"Content-Type\" manually (as it was when the upload was working), the browser set the header by itself with the boundary. The resulting request just hangs forever meanwhile the cpu of the server goes to about 90% for all the time, without any log.\nRequest details without setting \"Content-Type\":\n ```\nGeneral:\nRequest URL:https://myservername/api/images\nReferrer Policy:no-referrer-when-downgrade\nRequest Headers:\nProvisional headers are shown\nAccept:application/json, application/json\nContent-Type:multipart/form-data; boundary=----WebKitFormBoundaryQtZ9wLeyduK6kibd\nOrigin:http://localhost:3000\nReferer:http://localhost:3000/\nUser-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\nx-token: xxxx.....\nRequest Payload:\n------WebKitFormBoundaryQtZ9wLeyduK6kibd\nContent-Disposition: form-data; name=\"type\"\nproduct\n------WebKitFormBoundaryQtZ9wLeyduK6kibd\nContent-Disposition: form-data; name=\"basename\"\ntest\n------WebKitFormBoundaryQtZ9wLeyduK6kibd\nContent-Disposition: form-data; name=\"images\"; filename=\"test.jpg\"\nContent-Type: image/jpeg\n------WebKitFormBoundaryQtZ9wLeyduK6kibd--\n```\nRequest details with \"Content-Type\" setted manually:\n```\nGeneral:\nRequest URL:https://myservername/api/images\nReferrer Policy:no-referrer-when-downgrade\nRequest Headers:\nProvisional headers are shown\nAccept:application/json, application/json\nContent-Type:multipart/form-data\nOrigin:http://localhost:3000\nReferer:http://localhost:3000/\nUser-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\nx-token: xxxx.....\nRequest Payload:\n------WebKitFormBoundarycdn3VCtWlcAuORDm\nContent-Disposition: form-data; name=\"type\"\nproduct\n------WebKitFormBoundarycdn3VCtWlcAuORDm\nContent-Disposition: form-data; name=\"basename\"\ntest\n------WebKitFormBoundarycdn3VCtWlcAuORDm\nContent-Disposition: form-data; name=\"images\"; filename=\"test.jpg\"\nContent-Type: image/jpeg\n------WebKitFormBoundarycdn3VCtWlcAuORDm--\n```\nThanks. Hi @vishr, thank you for reply. \nIn this stackoverflow thread the problem is that the guy sets manually the content-type to \"multipart/form-data\". In my case setting manually the content-type is only a test i done to resolve the problem (unsuccesful).\nThe go version i'm using is 1.9, the previous was 1.8.3 but i upgraded only after the problem begin (another test).\nThe echo version now is the 3.2.1, and i'm sorry but i don't remember what was the previous version but for sure was a version online the July 28.\nSorry for my bad english, i'm italian\n. Ok i've made a little build that reproduce the bug, the sources are in the zip\ntestupload.zip\n. Hi i've finally found an error im my code that create an infinite loop, so that's why the upload fails, so there's no bug in echo.\nAnyway, thanks for your help.. ",
    "mgxian": "I know where I am wrong, But I still sugguest you write a full example at the following url\n- https://echo.labstack.com/guide/context. Yes, I resoloved it just like the anwser you reply me in the last commet. ",
    "chanlito": "\n@vishr Is there a way to skip the type casting?. ",
    "pzduniak": "It must be internet-facing to automatically generate Let's Encrypt certificates.. ",
    "pjebs": "the guide has special instructions to work with GAE. Did you try them?\n. @andizzle @edwardhutchison. How about this for a change?\nThen request handler looks like this:\nfunc getUser(c echo.Context) error {\n    // User ID from path `users/:id`\n    id := c.Param(\"id\")\n    return c.String(http.StatusOK, id)\n}\nWhen the request handler returns an error, at the point where the framework collects the returned error, you can record the stack trace and store it somewhere temporarily (such as the echo context) and then we can access it via the customer error handler?\n. I didn't mean getting a stack trace from the error. Rather, when the error is returned, obtaining a stack trace at that point in time.. Yes I mean a feature request. The framework can add the stack perhaps to echo context for us to access from custom error handler.\n. @andizzle Using panics?. @andizzle @edwardhutchison. @andizzle @edwardhutchison. ",
    "goofle": "Don't know why my previously merged commit a103330 is also included in this PR.. ",
    "linux-support": "Thank you for your comments.\n\nWhat do you mean when saying 'Move your middleware'?\nDo you have an idea what lines to move or what to add to the provided example?. \n",
    "JermineHu": "@vishr  I will continue to pay attention to this project, I believe it will become better and better !\nI've tested a lot of frameworks, and Echo builds smaller files, which are great! So I chose Echo, and I hope it's getting better!. ",
    "nazieb": "I'm sorry I think it's something with my internet/laptop since when I try another variation on another computer it works. Still don't know what, but definitely not echo issue.\nApologies for the inconvenience.. ",
    "memwey": "Agree. A middleware logger is enough.. Fasthttp support is dropped in echo v3. I think this issue should be opened in fasthttp. ",
    "roman-vynar": "You can easily disable the default json logger:\ne := echo.New()\n    e.Logger.SetLevel(99)\nThen define you own LoggingMiddleware.. ",
    "im-kulikov": "I'm close to the idea that the logger interface is too complicated. In my work, I have to implement dummy methods only to fit the interface. Also, the fact that the interface requires the gommon package is a bit depressing. For example, I use uber.zap, in which the logger is set up when it is initialized, and re-set is considered inappropriate. In echo, for some purposes, the user is allowed to do that. What's the point, I don't understand.. If we can provide the ability to use a minimal interface, just what is really needed, that would be great.. I think we were too quick with release v4.. I think... In the future, we should collect more wishes, fix the maximum number of issues and only after diligent testing to roll out a new version.. @vishr any updates?. @vishr any updates before merge?. @vishr any updates?. @vishr ok. thanks for explain. @vishr hi! can you check now... @vishr there is any updates?. @vishr fixed, something else?. em.. just closed?. @vishr @alexaandru Oh.. I'm sorry if I hurt or hooked you. I was referring to the fact that it is not necessary to give advice without verifying assumptions.. I had to go crazy and look for a problem.. @alexaandru this one - https://github.com/labstack/echo/pull/1061#discussion_r169564592. @vishr if it needed :). @vishr any updates?. This is required to commit a specific version.\nOtherwise, it is likely to get a dev build with bugs and errors. @alexaandru explain?\nMakefile is available for unix-like systems... @alexaandru oh.. I understand... I can make research and fix this. @vishr any updates?. hmmm.. make sense.... I think there's been a misunderstanding. It will be more predictable if the context is to be thread safe out of the box.. Excellent detailed question. I agree with you, I also do not really like to move everything into the framework. The idea with the documentation looks like a great solution, so I would stick with that.. tests fail.. fix it please\n\nShould I add new errors for reading body and unmarshaling?\n\nas I see, you're already add this errors \ud83d\udc4d \n. can you resort imports - \nhttps://github.com/labstack/echo/pull/1166#pullrequestreview-151228822. @vishr @alexaandru what you think about?. I think, if not critical, you can take a diff and apply it to the master branch. Then perform a force push to this branch.\n@alexaandru what you think about this decision?. @baba2k Unfortunately, I can't help you. Only @vishr can help, but I don't know how to contact him... my PR was closed too, and I left all attempts to contact.. @baba2k you can merge master into your branch and resolve conflicts.. or I can do this for you. go mod init <project-name>\ngo mod tidy\ngo mod verify\ngo mod vendor. hm.. sorry, mb I don't understand question. If need, I can create simple project to show how it works now. Oh.. understand...\n\nI have some-lib (for example), that require echo@3.3.5\nCreate new project, thats require echo and some-lib\nWhen run \ngo mod init <project-name>\ngo mod vendor\nin go.mod we can v0.0.0-20180412143600-6d227dfea4d2\n\nThis tells us that the required version of echo could not be found and it was taken from the wizard or from the first tag. for example - https://github.com/im-kulikov/echo-issue-1185\n```\n\u2192 go version\ngo version go1.11 darwin/amd64\n\u2192 export GO111MODULE=on\n\u2192 go mod init github.com/im-kulikov/echo-issue-1185\ngo: creating new go.mod: module github.com/im-kulikov/echo-issue-1185\n\u2192 go mod tidy\ngo: finding github.com/im-kulikov/helium v0.5.6\ngo: finding github.com/chapsuk/mserv v0.0.0-20180706125941-107033951ceb\ngo: downloading github.com/im-kulikov/helium v0.5.6\ngo: finding github.com/smartystreets/gunit latest\ngo: finding github.com/golang/glog latest\ngo: finding golang.org/x/sync/errgroup latest\ngo: finding golang.org/x/sync latest\n\u2192 cat go.mod\nmodule github.com/im-kulikov/echo-issue-1185\nrequire (\n        github.com/BurntSushi/toml v0.3.0 // indirect\n        github.com/chapsuk/mserv v0.3.2\n        github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b // indirect\n        github.com/im-kulikov/helium v0.5.6\n        github.com/labstack/echo v0.0.0-20180412143600-6d227dfea4d2\n        github.com/smartystreets/gunit v0.0.0-20180314194857-6f0d6275bdcd // indirect\n        go.uber.org/dig v1.4.0\n        go.uber.org/zap v1.9.1\n        golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f // indirect\n        gopkg.in/go-playground/assert.v1 v1.2.1 // indirect\n)\n``. If I'm not mistaken,heliumoriginally usedgo/depandecho@3.3.5.\nAftergo mod init (to convert Gopkg.toml ingo modules`), we get the version specified in the issue header. ## Step 2:\n```\n\u2192 rm -rf $GOPATH/pkg/mod/cache/download/github.com/labstack/echo\n\u2192 cat go.mod\nmodule github.com/im-kulikov/echo-issue-1185\nrequire (\n        github.com/im-kulikov/helium v0.5.6\n)\n\u2192 go mod tidy\ngo: finding github.com/labstack/echo v0.0.0-20180412143600-6d227dfea4d2\ngo: downloading github.com/chapsuk/mserv v0.0.0-20180706125941-107033951ceb\ngo: finding github.com/smartystreets/gunit latest\ngo: finding github.com/golang/glog latest\ngo: finding golang.org/x/sync/errgroup latest\ngo: finding golang.org/x/sync latest\n\u2192 cat go.mod\nmodule github.com/im-kulikov/echo-issue-1185\nrequire (\n        github.com/BurntSushi/toml v0.3.0 // indirect\n        github.com/chapsuk/mserv v0.0.0-20180706125941-107033951ceb\n        github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b // indirect\n        github.com/im-kulikov/helium v0.5.6\n        github.com/labstack/echo v0.0.0-20180412143600-6d227dfea4d2\n        github.com/smartystreets/gunit v0.0.0-20180314194857-6f0d6275bdcd // indirect\n        go.uber.org/dig v1.3.0\n        go.uber.org/zap v1.9.0\n        golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f // indirect\n        gopkg.in/go-playground/assert.v1 v1.2.1 // indirect\n)\nAs you can see\ngithub.com/labstack/echo v0.0.0-20180412143600-6d227dfea4d2\n```. > and go.mod echo version\n```\n\u2192 cat go.mod\nmodule github.com/im-kulikov/echo-issue-1185\nrequire (\n        github.com/im-kulikov/helium v0.5.6\n)\n``. This is weird. Don't you think a drastic change in tag naming could be a problem?.go mod` can't import version above 3.2.1\nI think that's the bigger problem.\nThat is, if I do not want to use 3.2.1, and want to move to 3.3.5 - I will not (explicitly). Oh.. don't know \ud83d\ude14\nWhen I migrate from go/dep to go mod, I received v0.0.0-20180412143600-6d227dfea4d2. ## Step 3\n```\nrm -rf $GOPATH/pkg/mod/cache\n\u2192 cat go.mod\nmodule github.com/im-kulikov/echo-issue-1185\nrequire (\n        github.com/im-kulikov/helium v0.5.6\n)\n\u2192 rm go.sum\n\u2192 go mod tidy\ngo: finding github.com/im-kulikov/helium v0.5.6\ngo: finding github.com/davecgh/go-spew v1.1.0\ngo: finding github.com/prometheus/common v0.0.0-20180518154759-7600349dcfe1\ngo: finding github.com/beorn7/perks v0.0.0-20180321164747-3a771d992973\ngo: finding github.com/smartystreets/goconvey v0.0.0-20170602164621-9e8dc3f972df\ngo: finding github.com/go-playground/universal-translator v0.16.0\ngo: finding github.com/chapsuk/wait v0.0.0-20180530144602-2dc40db0485b\ngo: finding github.com/nats-io/go-nats v1.5.0\ngo: finding golang.org/x/sys v0.0.0-20180715085529-ac767d655b30\ngo: finding go.uber.org/dig v1.3.0\ngo: finding go.uber.org/multierr v1.1.0\ngo: finding github.com/urfave/cli v1.20.0\ngo: finding github.com/spf13/cast v1.2.0\ngo: finding github.com/gopherjs/gopherjs v0.0.0-20180628210949-0892b62f0d9f\ngo: finding github.com/magiconair/properties v1.8.0\ngo: finding github.com/stretchr/testify v1.2.2\ngo: finding google.golang.org/genproto v0.0.0-20180722052100-02b4e9547331\ngo: finding github.com/labstack/gommon v0.0.0-20180613044413-d6898124de91\ngo: finding github.com/pelletier/go-toml v1.2.0\ngo: finding github.com/prometheus/procfs v0.0.0-20180705121852-ae68e2d4c00f\ngo: finding github.com/bsm/redis-lock v8.0.0+incompatible\ngo: finding github.com/fsnotify/fsnotify v1.4.7\ngo: finding github.com/matttproud/golang_protobuf_extensions v1.0.1\ngo: finding golang.org/x/net v0.0.0-20180719180050-a680a1efc54d\ngo: finding github.com/chapsuk/mserv v0.0.0-20180706125941-107033951ceb\ngo: finding github.com/jtolds/gls v4.2.1+incompatible\ngo: finding github.com/smartystreets/assertions v0.0.0-20180301161246-7678a5452ebe\ngo: finding golang.org/x/text v0.3.0\ngo: finding github.com/jinzhu/inflection v0.0.0-20180308033659-04140366298a\ngo: finding github.com/golang/protobuf v1.1.0\ngo: finding github.com/chapsuk/worker v0.4.0\ngo: finding github.com/prometheus/client_golang v0.8.0\ngo: finding gopkg.in/yaml.v2 v2.2.1\ngo: finding go.uber.org/zap v1.9.0\ngo: finding github.com/mattn/go-colorable v0.0.9\ngo: finding github.com/valyala/bytebufferpool v0.0.0-20160817181652-e746df99fe4a\ngo: finding github.com/labstack/echo v0.0.0-20180412143600-6d227dfea4d2\ngo: finding github.com/pmezard/go-difflib v1.0.0\ngo: finding github.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910\ngo: finding github.com/go-pg/pg v6.14.3+incompatible\ngo: finding github.com/pkg/errors v0.8.0\ngo: finding github.com/bouk/monkey v0.0.0-20180215074647-5df1f207ff77\ngo: finding github.com/robfig/cron v0.0.0-20180505203441-b41be1df6967\ngo: finding github.com/valyala/fasttemplate v0.0.0-20170224212429-dcecefd839c4\ngo: finding github.com/mitchellh/mapstructure v0.0.0-20180715050151-f15292f7a699\ngo: finding github.com/spf13/viper v1.0.2\ngo: finding github.com/go-playground/locales v0.12.1\ngo: finding github.com/spf13/afero v1.1.1\ngo: finding github.com/mattn/go-isatty v0.0.3\ngo: finding github.com/go-redis/redis v6.13.0+incompatible\ngo: finding github.com/spf13/pflag v1.0.1\ngo: finding gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405\ngo: finding gopkg.in/go-playground/validator.v9 v9.20.2\ngo: finding google.golang.org/grpc v1.13.0\ngo: finding github.com/hashicorp/hcl v0.0.0-20180404174102-ef8a98b0bbce\ngo: finding github.com/nats-io/nuid v1.0.0\ngo: finding github.com/spf13/jwalterweatherman v0.0.0-20180109140146-7c0cea34c8ec\ngo: finding go.uber.org/atomic v1.3.2\ngo: finding golang.org/x/crypto v0.0.0-20180718160520-a2144134853f\ngo: finding github.com/smartystreets/gunit latest\ngo: finding github.com/golang/glog latest\ngo: finding github.com/BurntSushi/toml v0.3.0\ngo: finding gopkg.in/go-playground/assert.v1 v1.2.1\ngo: finding golang.org/x/sync/errgroup latest\ngo: finding golang.org/x/sync latest\n\u2192 cat go.mod\nmodule github.com/im-kulikov/echo-issue-1185\nrequire (\n        github.com/BurntSushi/toml v0.3.0 // indirect\n        github.com/chapsuk/mserv v0.0.0-20180706125941-107033951ceb\n        github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b // indirect\n        github.com/im-kulikov/helium v0.5.6\n        github.com/labstack/echo v0.0.0-20180412143600-6d227dfea4d2\n        github.com/smartystreets/gunit v0.0.0-20180314194857-6f0d6275bdcd // indirect\n        go.uber.org/dig v1.3.0\n        go.uber.org/zap v1.9.0\n        golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f // indirect\n        gopkg.in/go-playground/assert.v1 v1.2.1 // indirect\n)\nAs you can see\ngithub.com/labstack/echo v0.0.0-20180412143600-6d227dfea4d2\n```. @vishr any updates?. Before 3.2.1 tag was formatted \u201cvX.Y.Z\u201d, and after \u201cX.Y.Z\u201d..\nThis is not work with go modules.\nMaybe we can revert to old tag naming?. In many go packages, tag naming is in form \u201cvX.Y.Z\u201d. Still broken... @vishr Thanks! Did not have time to say about gommon, as you already fixed it! \ud83c\udf89\ud83d\udc4d\ud83c\udffb. Explain?. @vishr yep..\ngithub.com/labstack/gommon same issue (https://github.com/labstack/echo/issues/1185)\nAfter version v0.2.1 format was changed...\n- before vX.Y.Z\n- after X.Y.Z\n. LGTM. Good idea.. @vishr / @alexaandru what you think about?. LGTM. @vishr if I'm not confused, everything we needed is fixed.\n@alexaandru what you think?. @vishr can you restart travis?. @vishr any updates?. @vishr yep.. on this weekend. 1) https://www.w3.org/TR/cors/#preflight-request\n2) https://stackoverflow.com/a/44385327\n\nA method is said to be a simple method if it is a case-sensitive match for one of the following: GET HEAD POST\n\nperhaps this explanation will be useful?. @alexaandru Hey, what do you think about it?. Hm.. okay.. I\u2019ll fix it\n\nUPD: @alexaandru fixed. \u270c\ufe0fThx. @alexaandru / @vishr hi there! there is any chance to be merged?. > @alexaandru / @vishr hi there! there is any chance to be merged?. @vishr hi there, it is not required and possible to be closed?\n\nthere is no reaction for more than two months. @vishr can I reopen PR?. I just reopen, as I can see, all tests passed and has no conflicts with master..\n. @vishr ping?. @vishr thx. Try to hold a benchmark, for example, taking from here.\nIn my case, it turned out that there is no profit as such, on the contrary, a loss in performance.. What if we fix the bug and add a description to the release (docs) that describes the problem? \nIn one of the previous releases of Go changed the json.Unmarshal / Marshal thus breaking backwards compatibility, but described the issue in the release/docs. It was quite normal.. I agree, it is not the task of the echo. Such functionality is the user application level, which can be customized by the user.. The above can be easily repeated with viper or something else... @xinln just for example - https://github.com/im-kulikov/echo-issue-1230. @vishr yeah). @Delphier The problem is not in go.mod. @alexaandru I guess I didn't put it right. I meant that deleting the file doesn't solve the problem.. Don't quite understand how removing go.mod solved the problem?. You can repeat the experiment without deleting the file.. I suppose the result will be the same... hm.. it make sense.. @alexaandru what you think?. yay... it's work!\ngithub.com/labstack/echo v3.3.10+incompatible // indirect. I\u2019m agree with @vishr..\n. not sure... that problem with that..\nas I can see, we have:\n\nthere is no v3.3.2... mb problem with that?. my PR based on this video https://www.youtube.com/watch?v=H_4eRD8aegk. You receive error because github.com/im-kulikov/echo has no github.com/labstack/echo/v3 it's just fork.. I can create demo-repo (not before the weekend), to demonstrate how it work with /v2, /v3 and /v4. @vishr with this PR import must be changed to github.com/labstack/echo/v3 and Go 1.11+ required\nNot sure if fixing releases will help, but it's worth a try.\n. No problem, let's try. @alexaandru I take it there's no point in the demo (go mod /vX) anymore?. Agreed, only need to make changes, if we are talking about 4.x.x. No problem. If we add /v4, the minimum requirements would be go 1.11+, it\u2019s ok?\nThis means that previous versions of go will not be able to use echo... @alexaandru kk, no problem. Coverage/patch fails.. \ud83d\ude14. @vishr ping?. @alexaandru what you think about this?. I can do that for /v4 . Let me know as soon as you start forming the v4, I will make these changes. problem is with that part of code:\n```go\n// StartServer starts a custom http server.\nfunc (e Echo) StartServer(s http.Server) (err error) {\n    // Setup\n    e.colorer.SetOutput(e.Logger.Output())\n    s.ErrorLog = e.StdLogger\n    s.Handler = e\n    if e.Debug {\n        e.Logger.SetLevel(log.DEBUG)\n    }\nif !e.HideBanner {\n    e.colorer.Printf(banner, e.colorer.Red(\"v\"+Version), e.colorer.Blue(website))\n}\n\nif s.TLSConfig == nil {\n    if e.Listener == nil {\n        e.Listener, err = newListener(s.Addr)\n        if err != nil {\n            return err\n        }\n    }\n    if !e.HidePort {\n        e.colorer.Printf(\"\u21e8 http server started on %s\\n\", e.colorer.Green(e.Listener.Addr()))\n    }\n    return s.Serve(e.Listener)\n}\nif e.TLSListener == nil {\n    l, err := newListener(s.Addr)\n    if err != nil {\n        return err\n    }\n    e.TLSListener = tls.NewListener(l, s.TLSConfig)\n}\nif !e.HidePort {\n    e.colorer.Printf(\"\u21e8 https server started on %s\\n\", e.colorer.Green(e.TLSListener.Addr()))\n}\nreturn s.Serve(e.TLSListener)\n\n}\n// Shutdown stops the server gracefully.\n// It internally calls http.Server#Shutdown().\nfunc (e *Echo) Shutdown(ctx stdContext.Context) error {\n    if err := e.TLSServer.Shutdown(ctx); err != nil {\n        return err\n    }\n    return e.Server.Shutdown(ctx)\n}\n```\nwe start Server.. and try to stop another.. . the problem is that we are trying to run the server in goroutine, which is postponed for execution in the future and immediately stop.\nI believe that atomic will be enough not to start if suddenly there was a stop..\nOn the other hand, knowing that the problem is, I still believe that the code presented above is not entirely correct. You should not start the server via echo. You have to pass the echo as a handler to the server. It's more go-way style\n```go\npackage main\nimport (\n    \"context\"\n    \"fmt\"\n    \"net/http\"\n\"github.com/labstack/echo/v4\"\n\n)\nfunc main() {\n    e := echo.New()\n    s := &http.Server{Addr: \":3000\", Handler: e}\n    done := make(chan bool)\ngo func() {\n    fmt.Println(\"Server exit:\", s.ListenAndServe())\n    done <- true\n}()\n\nfmt.Println(\"Shutdown\", s.Shutdown(context.Background()))\n<-done\n\n}\n```. Small fix for that bug - https://github.com/labstack/echo/pull/1278. hm..\ngo mod tidy\ngo mod download\ngo mod verify\nAnd I see go.sum. echo.go:766\ngo\nfunc (ln tcpKeepAliveListener) Accept() (c net.Conn, err error) {\n    tc, err := ln.AcceptTCP()\n    if err != nil {\n        return\n    }\n    tc.SetKeepAlive(true)\n    tc.SetKeepAlivePeriod(3 * time.Minute)\n    return tc, nil\n}\ntc.SetKeepAlive(true)\n    tc.SetKeepAlivePeriod(3 * time.Minute)\ncan return errors, mb replace it with:\ngo\nfunc (ln tcpKeepAliveListener) Accept() (c net.Conn, err error) {\n    tc, err := ln.AcceptTCP()\n    if err != nil {\n        return\n    }\n    if err = tc.SetKeepAlive(true); err != nil {\n                return\n        }\n    if err = tc.SetKeepAlivePeriod(3 * time.Minute); err != nil {\n                return\n        }\n    return tc, nil\n}\nmiddleware/compress.go:112 errors ignored \ngo\nfunc (w *gzipResponseWriter) Flush() {\n    w.Writer.(*gzip.Writer).Flush()\n}. @alexaandru done https://github.com/labstack/echo/pull/1270. @alexaandru done. my PR was based on your.. I fix it - https://github.com/labstack/echo/pull/1271. don't worry, I quickly corrected it. @vishr @alexaandru  /usr/lib/go-1.10 mb problem in that?. I'm not sure, that suffix would work with less than go1.11. hm.. just closed... it was based on your PR(branch).. I assumed that we will merge first my PR into your PR and only then into the master...\nbut since your PR merged and the branch was removed, my PR was closed. if someone needs a specific release, he can get it:\ngo get <url>:@<version>\nor\ngo get <url>:@latest\nMaster branch is under development, and not for use.. (IMO)..\nonce we have collected a critical number of fixes, we can prepare a release. there's nothing wrong with that.\n\nI didn't think you'd create a v4 right away. @vishr what you think about PR?. > Found them all, thanks to git fsck --unreachable. Can anyone confirm this is correct?\n\n\nv3.3.5 ce4a31 -> 6d227d\nv3.3.6 c185eb -> 1abaa3\nv3.3.7 ba1891 -> 2e9f4e\nv3.3.8 c54d9e -> c7eb8d\n\n@dhduvall @dmlittle @danielbprice @vishr @im-kulikov\n\nv3.3.0  => 27b5253\nv3.3.1  => bdb49be\nv3.3.2  => 6c54ff7\nv3.3.3  => 7f44549\nv3.3.4  => a5d81b8\nv3.3.5  => 6d227df\nv3.3.6  => 1abaa30\nv3.3.7  => ba1891b\nv3.3.8  => c54d9e8\nv3.3.9  => 739700b\nv3.3.10 => 38772c6. $ git fetch origin -t -f\nFrom git://github.com/labstack/echo\n t [tag update]      v3.1.0     -> v3.1.0\n t [tag update]      v3.3.7     -> v3.3.7\n t [tag update]      v3.3.8     -> v3.3.8\n$ git tag --format='%(refname:short) => %(objectname:short)' | grep 'v3.3'\nv3.3.0  => 27b5253\nv3.3.1  => bdb49be\nv3.3.2  => 6c54ff7\nv3.3.3  => 7f44549\nv3.3.4  => a5d81b8\nv3.3.5  => 6d227df\nv3.3.6  => 1abaa30\nv3.3.7  => 2e9f4ea\nv3.3.8  => c7eb8da\nv3.3.9  => 739700b\nv3.3.10 => 38772c6. If the problem is solved, can we close the issue?. I still think releasing releases on every PR is too much and doesn't make much sense. Some changes can cause discussions, which will change the main idea and subsequently changed code\nI suggest we accumulate changes.. \nWe have two ways:\n- release once in a while\n- release by number of changes. Maybe then it would be more correct to release 4.X.0?\nIf there are corrective changes that do not break anything and only fix something in previous release (4.x.y)  - we release 4.X.y+1?. I mean, we're not changing the last number, we're changing the second.. this is consistent with semver. Increasing the latest version will be weird enough for users. Maybe a variant with increasing Y would be more logical (X.Y.Z). And as I wrote above, if we release the hotfix, it makes sense to increase the last digit... I read the documentation, it says about www redirection,and this PR solves the bug. If someone relied on this bug, then he does something wrong. As I said earlier in one of the previous PRS, go fixed the JSON Unmarshaler/Marshaler issue and that's fine. Although it did break backwards compatibility.. I think it\u2019s ok to merge PR into 4.x. and this PR fix next error:\n```go\npackage main\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"net/http/httputil\"\n)\nfunc check(err error) {\n    if err != nil {\n        panic(err)\n    }\n}\nfunc main() {\n    cli := new(http.Client)\nreq, err := http.NewRequest(http.MethodConnect, \"http://localhost:8080\", nil)\ncheck(err)\n\ndata, err := httputil.DumpRequest(req, true)\ncheck(err)\n\nfmt.Println(string(data))\n\nres, err := cli.Do(req)\ncheck(err)\n\ndata, err = httputil.DumpResponse(res, true)\ncheck(err)\n\nfmt.Println(string(data))\n\n}\n```\n2019/02/05 03:19:25 http: panic serving [::1]:56897: runtime error: index out of range\ngoroutine 84 [running]:\nnet/http.(*conn).serve.func1(0xc000166000)\n    /usr/local/Cellar/go/1.11.5/libexec/src/net/http/server.go:1746 +0xd0\npanic(0x18783c0, 0x20938c0)\n    /usr/local/Cellar/go/1.11.5/libexec/src/runtime/panic.go:513 +0x1b9\ngithub.com/labstack/echo/v4/middleware.AddTrailingSlashWithConfig.func1.1(0x1a771a0, 0xc0001ac070, 0xc0001ac070, 0xc000075d38)\n    /Users/kulikov/.golang/pkg/mod/github.com/labstack/echo/v4@v4.0.0/middleware/slash.go:52 +0x33b\ngithub.com/labstack/echo/v4.(*Echo).ServeHTTP(0xc0003948c0, 0x1a676c0, 0xc000392000, 0xc00014e300)\n    /Users/kulikov/.golang/pkg/mod/github.com/labstack/echo/v4@v4.0.0/echo.go:593 +0x220\nnet/http.serverHandler.ServeHTTP(0xc0000b5ee0, 0x1a676c0, 0xc000392000, 0xc00014e300)\n    /usr/local/Cellar/go/1.11.5/libexec/src/net/http/server.go:2741 +0xab\nnet/http.(*conn).serve(0xc000166000, 0x1a685c0, 0xc00013c400)\n    /usr/local/Cellar/go/1.11.5/libexec/src/net/http/server.go:1847 +0x646\ncreated by net/http.(*Server).Serve\n    /usr/local/Cellar/go/1.11.5/libexec/src/net/http/server.go:2851 +0x2f5. I corrected the description. In addition to simplifying and understanding the code, this PR fixes bug in the runtime.\nThoughts @vishr @alexaandru?. @alexaandru / @vishr can we merge or you wait for something else?. Any thoughts @vishr @alexaandru?. ping @vishr @alexaandru . @alexaandru @vishr  done. \ud83d\ude14. > Why have you dropped exposed properties from Echo struct?\nRace condition, as I write in PR description. This breaks backward compatibility. In this case, this PR is for version 5.x. @vishr I can prepare a solution for the v4 branch, if you consider it necessary. Agree. @vishr fixed. ineffectual assignment. ineffectual assignment. explain?. err variable shadowing. Error strings should not start with a capital letter (https://github.com/golang/go/wiki/Errors). https://play.golang.org/p/1TqVZ4GVhnF. ok. isn't it more readable and clear?. \ud83d\udc4c no problem. ok. var uri bytes.Buffer not equal uri := bytes.NewBuffer(nil). routes := make([]*Route, 0, len(e.router.routes))\nthis is prealloc space for this part:\ngo\n  for _, v := range e.router.routes {\n    routes = append(routes, v)\n  }. \n. fixed. I'll fix it with (just more simple):\ngo\nerr := c.Bind(&[]struct{ Field string }{})\nwithout variable declaration\n. fixed. fixed. @alexaandru e.router.routes is map[string]*Route\nthat's why i is a string, not an integer. thanks.. fixed. this is internal name.. and has comment. fixed. reverted. fixed. I'll revert this part. fixed. fixed. fixed. path collides with imported package name.. that's why I use rpath with a comment. not required. missing go.sum. go fmt. why error ignore?. I think these are different things.\n- in one case, we had error of unmarshaling\n- in another the absence of a JWT token. go\n    // BindUnmarshaler is the interface used to wrap the UnmarshalParam method.\n    BindUnmarshaler interface {\n        // UnmarshalParam decodes and assigns a value from an form or query param.\n        UnmarshalParam(param string) error\n    }\nand example:\n```go\ntype StringArray []string\nfunc (a StringArray) UnmarshalParam(src string) error {\n    a = StringArray(strings.Split(src, \",\"))\n    return nil\n}\n.go\n  // id-named fields\n  type testUser struct {\n        ID      int param:\"userid\"\n        NameID  int param:\"nameid\"\n        GroupID int param:\"groupid\"\n        SameID  int param:\"sameid\"\n    }\n...\nt.Run(\"should be ok for id-named fields\", func(t *testing.T) {\n    req := httptest.NewRequest(echo.GET, \"/1/2/3/4\", nil)\n    testHandler := func(ctx echo.Context) error {\n        u := new(testUser)\n        err := ctx.Bind(u)\n        if assert.NoError(t, err) {\n            assert.Equal(t, 1, u.ID)\n            assert.Equal(t, 2, u.NameID)\n            assert.Equal(t, 3, u.GroupID)\n            assert.Equal(t, 4, u.SameID)\n        }\n\n        return nil\n    }\n    e.GET(\"/:userid/:nameid/:groupid/:sameid\", testHandler)\n    e.ServeHTTP(rec, req)\n})\n\n```\ncan't reproduce this bug. nope.. there is one more nested condition. hm..\n\nIf it returns, else is not needed. If it doesn't, only if is enough.\n\nkk, we can change this \ud83d\udc4d . my fail \ud83d\ude14 @alexaandru you'll right. yeah! nice job. yeah, you'll right . fixed with indent pointer. Glad to hear.. waiting for @vishr review . My mistake . go\nfunc (e *Echo) StartTLSFromFile(address string, key string, reader io.Reader) (err error) {\nmb this is more useful?. You can read from io.Reader key and cert and pass it to X509KeyPair.. \nhttps://golang.org/pkg/crypto/tls/#X509KeyPair\nfunc X509KeyPair(certPEMBlock, keyPEMBlock []byte) (Certificate, error) {. something like this:\ngo\nfunc (e *Echo) StartTLSFromReader(address string, key, cert io.Reader) (err error) {. io.Reader can be strings.NewReader(<string>) / bytes.NewBuffer(<bytes>) / file / etc.. \nsuch a decision seems more logical to me. thank you. now I see what you mean.. sgtm. https://golang.org/pkg/io/ioutil/#ReadFile\nfunc ReadFile(filename string) ([]byte, error)\n[]byte(cert), []byte(key) is unnecessary conversion. invalid cert or key type, must be string or []byte. mb:\ngo\ntestCases := []struct {\n        cert        interface{}\n        key         interface{}\n        expectedErr error\n        name        string\n    }{\n    //...\n    }\n. pls add:\n{\n            cert:        \"_fixture/certs/cert.pem\",\n            key:         \"_fixture/certs/key.pem\",\n            expectedErr: nil,\n            name:        `ValidCertAndKeyFilePath`,\n        }. ",
    "eikebartels": "Hey @leenux what do u mean with WORKDIR? How did you fix it?. unfortunately I cant remember. Sorry!. ",
    "chinglinwen": "The same question as eikebartels,  How did you fix it ? @leenux . ",
    "andizzle": "@pjebs let's open a PR with a proposed solution.. The above PR is WIP. It allow us to do something like this in the custom HTTPErrorHandler\ngo\nfunc HTTPErrorHandler(err error, c echo.Context) {\n        tr := c.Get(echo.TraceContextKey)\n        c.JSON(err.Code, tr)\n}\nIt produces the traceback that indicates the DB connection failed to open during the test:\njson\n[\n    \"...\"\n    \"/usr/local/Cellar/go/1.9.2/libexec/src/net/http/server.go:660 +0x62: created by net/http.(*connReader).startBackgroundRead\",\n    \"/usr/local/Cellar/go/1.9.2/libexec/src/net/http/server.go:656 +0xd8: : goroutine 8 [chan receive]:: database/sql.(*DB).connectionOpener(0xc4200872c0)\",\n    \"/usr/local/Cellar/go/1.9.2/libexec/src/database/sql/sql.go:871 +0x53: created by database/sql.Open\",\n    \"/usr/local/Cellar/go/1.9.2/libexec/src/database/sql/sql.go:609 +0x1ee\"\n]. @vishr you are right, the stack trace I was looking at was occured before Echo#ServeHTTP. It's not going to be easy since the middlewares are squashed into a nested function, the error trace on individual middleware calls seems to be ... impossible inside Echo.\n@pjebs looks like the we are going to implement this at the middleware level on our own.. ",
    "madebyais": "+1. ",
    "mostafahussein": "@vishr , I have submitted a pr #1029. ",
    "fanus": "Managed to get around this issue but using GET routes that return Inline files.\nSee: https://echo.labstack.com/cookbook/file-download\nIs this the best solution for what I am looking for? I'm slightly concerned about performance.. ",
    "mymtw": "I'm sorry, everything ok with echo, this is not fault of framework, my chrome extension that prettifying JSON - it sent 2 requests. Just have removed it . @alexaandru thank you. my mistake. I called articlesC.Show(ctx); instead of articlesC.Index(ctx);\nsorry. ",
    "theAddict": "This still appears to be a valid question.\nOn a quad core system, does echo perform better when using a single\nprocess, with GOMAXPROCS=4, or four separate processes, each with\nGOMAXPROCS=1?\nOn Feb 5, 2018 20:49, \"Eloahman\" notifications@github.com wrote:\nFasthttp support is dropped in echo v3. I think this issue should be opened\nin fasthttp https://github.com/valyala/fasthttp\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/labstack/echo/issues/1037#issuecomment-363283495, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AEfQAuQBSnm6qrL0GFooMaxW7TtIJZyTks5tR6-rgaJpZM4QwkU-\n.\n. ",
    "AdrianLungu": "I also ran into this problem recently.\nA project is working as expected on Mac, and the Content-Type is correct, however, on Windows it's giving us 'text/plain' for js files. \nMac is using Go 1.9.2.\nWindows is using Go 1.10 and we're downgrading now to see if that might be the issue.\nEDIT: It seems it's not Go's version, 1.9.2 on Windows is behaving the same as 1.10 on Windows, Chrome is still reporting that the MIME Type is not correct so it won't allow the execution of js files.. Ok, so this code is enough on Windows to see the difference.\ne := echo.New()\u2028\n// e.Use(middleware.Secure())\u2028\ne.Static(`/`, `....\\dist`)\nIt seems that the content type on Windows is still text/plain in both cases, however, without the Secure option, it accepts the fact that it's text/plain. On Mac or Ubuntu this is not the case, the content type is application/javascript. \nWith Secure on Windows\n\nWithout Secure on Windows\n\nWith Secure on OS X\n\nI'll set up a small Windows dev env to test this out further.\n. I was unable to test this yet as I cannot test it in production at the moment @vishr . I'll try to set something up soon to have a go at it.\n@leedstyh the error message indicates that it's not trying to authorize through http-01, so:\n\nis the acme package up to date ?\nis the echo package up to date ?\n\nIf the answer is yes to both, and you're using StartAutoTLS, it could be either something in your code, or something in echo, but it could help us track down what it is. . @leedstyh - for some reason your code does not appear in the thread but is in the email. \nFrom what I've seen, you use e.Start(:80) before using e.StartAutoTLS, in theory, I think this is the issue since e.AutoStartTLS adds a handler on port 80 once it starts to allow Let's Encrypt to authorize using HTTP-01. \nI recommend using either 80 (for local purposes) without AutoTLS or with only AutoTLS and maybe a HTTPS redirect middleware ?. Oh, sorry, I missed the \"new\" initialization.\n. ",
    "nmclean": "\nI also ran into this problem recently.\nA project is working as expected on Mac, and the Content-Type is correct, however, on Windows it's giving us 'text/plain' for js files.\nMac is using Go 1.9.2.\nWindows is using Go 1.10 and we're downgrading now to see if that might be the issue.\nEDIT: It seems it's not Go's version, 1.9.2 on Windows is behaving the same as 1.10 on Windows, Chrome is still reporting that the MIME Type is not correct so it won't allow the execution of js files.\n\nThe cause of this issue is the Windows registry. On my Windows 7 machine, HKEY_CLASSES_ROOT/.js has a string value named Content Type whose value is text/plain. Modifying this to application/javascript causes mime.TypeByExtension(\".js\") to return correctly. You can also call mime.AddExtensionType(\".js\", \"application/javascript\") to force overwrite the mapping the mime package uses.. ",
    "lornasong": "Hello, just wanted to follow up on this issue. Is this a valid concern? Or is there a recommended alternative approach? Thank you.. ",
    "michaeloverton": "I am having the same issue. Requests to the grouped endpoint are failing the preflight when they shouldn't be.. ",
    "eduardotang": "same issue , any news?. ",
    "lcd1232": "Me too. Any workaround?. ",
    "stiks": "I've removed custom error handler for now.. @vishr Somehow missed your commends. Sorry about that.. ",
    "vedun": "@siredwin look at this file echo_go1.8\n. ",
    "bakatz": "@vishr np, thanks for merging it. when should I expect a new github release of echo that contains this change?. Ok, no problem. Thanks for the quick response. ",
    "agentmilindu": "@anjmao I'm having the same issue, cloud you find a clean solution than the workaround? . ",
    "benyu": "An example likes :\n/api/v1/moments/:id/like\n/api/v1/moments/:item/:sub/:id/like\nat this situation, the  rule 2 will not match and return 404 error.\nas if, change the :sub name parameter to a certain value (comments) it works fine.. @alexaandru Thanks.\n1st :id is spelling wrong.\nMaybe the else routes conflicts !\n. github.com/cihub/seelog \u53ef\u4ee5. ",
    "bogh": "I happen to experience the same issue after upgrading to revision 6da048344775e2002ddf447d0dab104b119d9f1c. I have routes like \ngroups := auth.Group(\"/groups\")\n    {\n        groups.GET(\"\", ...)\n        groups.POST(\"\", ...)\n        groups.GET(\"/:id/detail\", ...)\n        groups.PUT(\"/:id\", ...)\n        groups.DELETE(\"/:id\", ...)\n        groups.PUT(\"/:id/users\", ...)\n    }\nThe problem is the route \"/groups/:id/detail\" gives handler not found. Debugging found that the route is not matched. With version that I had before, which is b28538b2e3f5446fe6e0e47ee34cd74b662ca2ab, these routes worked well.\n. Hi,\nI have found the issue for my case. The example bellow:\n```\ne := echo.New()\ngroups := e.Group(\"/groups\")\ngroups.GET(\"/:id/detail\", h) // <- this results in 404 cause of the group defined below\n// Having another group that is the same as a route from the previous group\n// although doesn't have any route to match, trying to access /groups/:id/detail results in 404\ndifferentGroup := e.Group(\"/groups/:id/detail\")\ndifferentGroup.GET(\"/something\", h) // this works\n```\n. ",
    "filet0fish": "Thanks, that fixed my test case.\nWe are still seeing some inconsistencies around registration order in our production app, but it appears to be unrelated.  I will file another bug once we rule our code, have a good test case, and confirm the issue isn't a dupe of #875.\nOur current workaround is sorting routes by complexity (number of params, then number of segments) and length before registering them.\nThanks again!. ",
    "orangain": "@vishr  I don't think a position of the if statement affects behavior of redirection. Could you please explain what you concern?. ",
    "djensen47": "When will this be released? It's been almost 30 days since this was merged. \nGreat project! Thanks for all the hard work!. ",
    "ferhatelmas": "@vishr since we get error, it's not needed to defer and we add defer only after ensuring error is nil. . @mission712 https://github.com/labstack/echo/pull/1100 try vendoring.. ",
    "JakeXu": "@yan-xz like this:\ngo\ne.Use(middleware.CORSWithConfig(middleware.CORSConfig{\n    AllowOrigins: []string{\"*\"},\n    AllowMethods: []string{echo.HEAD, echo.POST, echo.OPTIONS},\n})). ",
    "xzyan": "@JakeXu Browser error : \nThe 'Access-Control-Allow-Origin' header contains multiple values '*, ',\nbut only one is allowed. Origin 'null' is therefore not allowed access\nI do not have a solution. ",
    "HouzuoGuo": "I really should have said \"specify port number 0\" instead of not specifying a port number.\nHere is an example of starting an HTTP server on the next available port, and then inspects the listener to find out actual port number:\nhttps://gist.github.com/xcsrz/538e291d12be6ee9a8c7. Oh, it's just a habit of making less assumption about the host system in regards to which ports might be free during test run, and when two or more echo servers need to be tested from independent packages, using randomly assigned port number saves the hassle of tracking which package uses which port.. Thanks very much Alexandru, you're absolutely right. I should not have used type casting on the listener itself.. ",
    "jney": "Adding a e.Close() while intercepting the signal works. the issue happens when using AllowCredentials. Is this pr OK for you? Or would you like an extra parameter to accomplish this? . hi @vishr any feedback, soon?. just to clarify the PR you can not use withcredentials and allow origin * together, you have to specify the origin one by one, this is what this PR want to accomplish. :) @jbub  i'm pretty sure you deserve more thanks than i do. especially when i see my typo here ec7b49794086504abbe4f80f7841ec5618dde32f. @limoli i didn't could you provide your solution?. thank you! i will try it asap. @vishr any thought on forwarding echo.Context to context.Context while using echo.WrapHandler?. as it could be useful for someone else, here was my solution:\ngo\nfunc contextWrapper(h http.Handler) echo.HandlerFunc {\n    return func(c echo.Context) error {\n        req := c.Request()\n        h.ServeHTTP(c.Response(), req.WithContext(co.NewFromEcho(req.Context(), c).Context))\n        return nil\n    }\n}\nI wish I could have the logger, but i don't know how I could deal with it. I think it was a misunderstanding from my side. \nReading again the the code it looks @vishr handled it here by stopping the chain.\n. yes, we can :). ",
    "tmm1": "I'm getting errors after this change:\n\nsrc/github.com/labstack/echo/echo.go:616:51: e.AutoTLSManager.HTTPHandler undefined (type autocert.Manager has no field or method HTTPHandler). It seems to be some problem with glide. I added x/crypto to my glide.yaml and now it works. Sorry for the noise.. Thanks. I saw that, but now I think I will just wait for vgo and switch to that later.. \n",
    "alexandrestein": "Good.\nBy the way this project use Dep instead of Glide.\nAnd from the Glide repo I see that they push they community to switch to Dep.\nYou could try. \ud83d\ude0a. \ud83d\udc4d. I will take look later but for now I don't see the problem. . The tests are not relevant in this case.\nI fought with a RACE which was not and the test coverage can't really be better.\nI hope you will find this OK.\nPS: the commit history needs to be rewrite because all those commits are absolutely not necessary.. Of course @vishr, I was making some tests with QUIC and I thought it would be nice to make a real thing with it.\nTake the time needed.. ",
    "danieldaeschle": "Doesn't help...\nMy solution ist:\n```Go\nfunc httpError(code int, err error) *echo.HTTPError {\n    return echo.NewHTTPError(code, strings.ToLower(err.Error()))\n}\nfunc createTodo(c echo.Context) (err error) {\n    todo := new(Todo)\n    if err = c.Bind(todo); err != nil {\n        return\n    }\n    if e := c.Validate(todo); e != nil {\n        err = httpError(400, e)\n        return\n    }\n    return c.JSONPretty(200, *todo, \"    \")\n}\n```. ",
    "bodokaiser": "+1. ",
    "IngCr3at1on": "Thinking about this some more this morning... I used the vgo replace function to allow me to test this from my fork but I'm not sure if that's entirely the right way to go about proving I have that mod file correct...\nI'm not sure if it's fully possible to test this before merging it... For those curious; https://research.swtch.com/vgo. @vishr that's kind of what I had in mind, in the meantime I'm able to modify my project mod file that I was using echo with to use a local copy but I felt like this was a good step anyway. Considering the immaturity of the project I'm sure most people aren't up on vgo yet I only just started messing with it the other day. Thanks for the openness on the matter.. Closing this, looks like a go.mod has already been created (according to conflicts) and at anyrate I have no issues using echo without custom redirect line in my go.mod.. ",
    "florianholzapfel": "thank you for this awesome project!. ",
    "BrendanBall": "How are contexts serialized when crossing API boundaries? . Oh ye that is exactly why I wanted echo.Context to implement it, so that I can just take a handler context and pass it to a DB function that takes context.Context. I guess so far I've not passed the context to an asynchronous task where the context outlives the handler context. I guess this is where it breaks down? Otherwise passing it between API boundaries would be fine right?. ",
    "a7a2": "defer func() {\n    if err := recover(); err != nil {\n        writerFile()\n    }\n}()\n\nYour English is so poor.. ",
    "ready4god2513": "@vishr Any thoughts on this?  We've had to add some unpleasant changes in our middleware and it would be great for the echo router to support this pattern out of the box.. I'm not sure that gives us any real benefit to be honest.  I can write a benchmark if you really care, but the point is that it needs to be case insensitive, not just matching upper and lower case.  Additionally at worst this will be a loop over a few keys/values which is not going to perform all that different from a map lookup.  . ",
    "LennyPenny": "Can confirm, it's probably caused by this change \nhttps://github.com/labstack/echo/commit/37f1a470efa8abb7e89ad221cb4b1cc36f7047bb#diff-252e46e448f4e037d84d69193c8fdf79L450. Okay whoops this seems to have been caused by using an old go version (1.7) it's fine on 1.9. ",
    "baba2k": "Yes, 1.7 is not working (not tested on 1.8) and 1.9 works fine. Any chance this will be added to the actual jwt middelware or do I have to write my own? Thanks!. @im-kulikov you're correct! Should I add new errors for reading body and unmarshaling?. @im-kulikov oh i've forgot to adjust the tests to new errors. It's fixed now.. @im-kulikov sure.. done. Ok @im-kulikov  :-) What else do I have to do to be merged into master?. @alexaandru sure but i can't squash all commits because i merged the labstack/master to my fork between the commits :(\n. Thanks for your help @alexaandru ! Let me know when I can do something.. @im-kulikov  I'm not familiar with applying patches and got this error:\nbaba@baba ~/dev/workspace/go/src/github.com/baba2k/echo $ git apply 1166.diff\nerror: patch failed: middleware/jwt.go:1\nerror: middleware/jwt.go: patch does not apply\nerror: patch failed: middleware/jwt_test.go:1\nerror: middleware/jwt_test.go: patch does not apply\nThanks @alexaandru for your hint. Anyone can help me with this diff? It would be very nice to have this function in echo. we use this often in our services. ",
    "zero-master": "Anyone looking to save time can use:\nfunc (h *Handler) GetUser(c echo.Context) (err error) {\n    u := c.Get(\"user\")\n    claims := u.(*jwt.Token).Claims.(jwt.MapClaims)\n    userID := claims[\"id\"].(string)\n    return c.String(http.StatusOK, userID)\n}. ",
    "s3rj1k": "@vishr Hi, in my use case i need this format\n\nFormat: \"time=${time_rfc3339}, remote_ip=${remote_ip}, host=${host}, method=${method}, uri=${uri}, status=${status}\\n\",. I am declaring log config like this:\n\ne.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{\n        Format: \"time=${time_rfc3339}, remote_ip=${remote_ip}, host=${host}, method=${method}, uri=${uri}, status=${status}\\n\",\n        Output: os.Stdout,\n    }))\nstill, if I try to curl non existent locations(endpoint) i get error 404 with default log format\n. this should be in docs, thanks. ",
    "p581581": "Any updates?. ",
    "Tethik": "I implemented this in my own project as follows:\ngo\n// BindValidate simply combines echo.Context.Bind and echo.Context.Validate for the forms.\nfunc BindValidate(c echo.Context, form interface{}) (err error) {\n    if err = c.Bind(form); err != nil {\n        return\n    }\n    return c.Validate(form)\n}\nAlthough I think it would make more sense to directly do the validation during the \"Bind\" function conditionally if the context.Validator is set. . ",
    "nono": "I think you should have the same behavior on localhost if you update echo (go get -u github.com/labstack/echo), as it looks like it's related to bfa14633f3e679c24a0bc647a9445a1237127f17.\nWe are also using echo with parameters that have dots, and the unit tests are failing today.. @vishr The error was introduced by #1101, and I still have it after #1106. My thoughts:\n\nI'd definitively expect the route /versions/:version to match /versions/1.2.3, and it's really hard to work-around if echo does not support it (for example, a route to download a file has to declined on /files/:filename for a filename without extension like README, /files/:filename.:ext for a filename with a single extension like index.html, /files/:filename.:ext.:ext for a tarball.tar.gz, etc.)\nIt'd be nice to have two routes, /users/:id and /users/:id.json, with their own handlers, but if it is not supported by echo, a middleware can do the trick\nIt looks like /users/:{id}.json and /things/:{param.name.with.dots} is overkill.. \n",
    "s32x": "I'm experiencing the same issue, getting it locally as well.\nI believe nono is right about that recent merge. I'm taking email addresses in my path (though prob not ideal) and this now breaks my app, so it's a real bummer :. I think it's also worth noting that https://github.com/labstack/echo/pull/1101 conflicts with rfc3986 section 2.3\n```\n2.3.  Unreserved Characters\nCharacters that are allowed in a URI but do not have a reserved\n   purpose are called unreserved.  These include uppercase and lowercase\n   letters, decimal digits, hyphen, period, underscore, and tilde.\n  unreserved  = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n\n``\nUnless I'm interpreting the spec wrong it seems a.` character should be treated as any other letter/number and should not have a special purpose (as reserved characters do).. Sorry, I guess I did interpret it wrong then. Just thought it might be relevant and worth mentioning. :) Either way, I'm in favor of having the change reverted as well.. ",
    "yangkghjh": "Did you mean group router?\nhttps://echo.labstack.com/guide/routing#group\nor\nYou just use query parameters.\nhttps://echo.labstack.com/guide/request#query-parameters. ",
    "posa88": "Try system level tools like logrotate . ",
    "ribice": "```go\nfunc main() {\ng := echo.New()\n\nv := g.Group(\"\", func(ctx *echo.Context) error {\n            // ....\n})\n\nv.GET(\"/\", func(ctx *gin.Context) error {\n    return ctx.JSON(200, \"OK\")\n})\n\ng.Run(\":8088\")\n\n}\n```. @vishr Did this quite quickly, hope I did not mess something up.\nv1/groupa and v1/groupb routes return 404.\n```go\npackage main\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\n\n)\nfunc main() {\n    e := echo.New()\n    authRoute(e)\nv1 := e.Group(\"/v1\")\ngroupARoute(v1)\ngroupBRoute(v1)\n\ne.Logger.Fatal(e.Start(\":1323\"))\n\n}\nfunc authRoute(e *echo.Echo) {\n    e.POST(\"/login\", handler)\n    e.GET(\"/login\", handler)\n}\nfunc groupARoute(e *echo.Group) {\n    grA := e.Group(\"/groupa\")\n    grA.POST(\"/\", handler)\n    grA.GET(\"/\", handler)\n}\nfunc groupBRoute(e *echo.Group) {\n    grB := e.Group(\"/groupb\")\n    grB.POST(\"/\", handler)\n    grB.GET(\"/\", handler)\n}\nfunc handler(c echo.Context) error {\n    return c.String(http.StatusOK, c.Request().RequestURI)\n}\n```. I've put them there by mistake (I don't put it in my repo). After removing them, the handlers now work properly.\nI'll try to further expand the example code and reproduce the issue I have (perhaps it's middleware related, or something else). I'll keep you updated.. @vishr This was one of the problems I had (this worked fine in Gin, e.g. creating groups with same name).\n```go\npackage main\nimport (\n    \"net/http\"\n\"github.com/labstack/echo\"\n\n)\nfunc main() {\n    e := echo.New()\n    authRoute(e)\nv1 := e.Group(\"/v1\")\ngroupARoute(v1)\ngroupBRoute(v1)\n\ne.Logger.Fatal(e.Start(\":1323\"))\n\n}\nfunc authRoute(e *echo.Echo) {\n    e.POST(\"/login\", handler)\n    e.GET(\"/login\", handler)\n}\nfunc groupARoute(e *echo.Group) {\n    grA := e.Group(\"/groupb\")\n    grA.POST(\"\", handler)\n    grA.GET(\"\", handler)\n}\nfunc groupBRoute(e *echo.Group) {\n    grB := e.Group(\"/groupb\")\n    grB.PATCH(\"/:id\", handler)\n    grB.GET(\"/:id\", handler)\n}\nfunc handler(c echo.Context) error {\n    return c.String(http.StatusOK, c.Request().RequestURI)\n}\nfunc handler2(c echo.Context) error {\n    return c.String(http.StatusOK, c.Param(\"id\"))\n}\n```\nIn this example, GET (/v1/groupb) and POST (/v1/groupb) do not work (firstly registered ones). I think there was already an issue mentioning this. I'll try to recreate the other problem now.. @vishr Is this resolved with #1201?. Yes it should. But I don't see how is that a relevant answer.. I can fix the failing test, if you are interested in this change?. Looks good to me. Thanks for the benchmarks!. Nice \ud83d\udc4d . Will do tomorrow.. Done, also fixed conflicts.. > @ribice Can you fix the build? Looks like cors_test.go still uses old constants.\nFixed.. Else can be removed, since the if above is returning.. I don't get it? Else if makes no sense here and rarely anyway.\n331 returns from 330.\nIf it returns, else is not needed. If it doesn't, only if is enough.. You're correct.. Since jsonBlob is simple, the code can be moved directly here.. If doubt anyone uses echo.Get instead of http.MethodGet.\nAlso it's quite easy to replace it if it becomes breaking change for someone.\nThis change simplifies the codebase by reusing constants from stdlib.. ",
    "nekketsuuu": "This should be fixed to normalize paths by framework-side. I think it's better to keep this issue open.. ",
    "rafaeljusto": "If we add the HTTP request to the response we could also add the URI in the log message:\n```diff\ndiff --git a/echo.go b/echo.go\nindex ca37e5e..48ba85e 100644\n--- a/echo.go\n+++ b/echo.go\n@@ -301,7 +301,7 @@ func New() (e Echo) {\n func (e Echo) NewContext(r http.Request, w http.ResponseWriter) Context {\n        return &context{\n                request:  r,\n-               response: NewResponse(w, e),\n+               response: NewResponse(w, r, e),\n                store:    make(Map),\n                echo:     e,\n                pvalues:  make([]string, e.maxParam),\ndiff --git a/response.go b/response.go\nindex e948ed3..adbf02e 100644\n--- a/response.go\n+++ b/response.go\n@@ -15,6 +15,7 @@ type (\n                beforeFuncs []func()\n                afterFuncs  []func()\n                Writer      http.ResponseWriter\n+               request     *http.Request\n                Status      int\n                Size        int64\n                Committed   bool\n@@ -22,8 +23,8 @@ type (\n )\n// NewResponse creates a new instance of Response.\n-func NewResponse(w http.ResponseWriter, e Echo) (r Response) {\n-       return &Response{Writer: w, echo: e}\n+func NewResponse(w http.ResponseWriter, request http.Request, e Echo) (r *Response) {\n+       return &Response{Writer: w, request: request, echo: e}\n }\n// Header returns the header map for the writer that will be sent by\n@@ -53,7 +54,7 @@ func (r Response) After(fn func()) {\n // used to send error codes.\n func (r Response) WriteHeader(code int) {\n        if r.Committed {\n-               r.echo.Logger.Warn(\"response already committed with status %d, cannot apply status %d\", r.Status, code)\n+               r.echo.Logger.Warn(\"response already committed on URI '%s' with status %d, cannot apply status %d\", r.request.RequestURI, r.Status, code)\n                return\n        }\n        for _, fn := range r.beforeFuncs {\n```\nIs it a good solution?. Just added the HTTP request URI as it is essential to discover issues like that. \ud83d\ude03 . Hi @vishr, could you please had a look on this PR? It just adds more context to the logged message.\nI need to start tracking down this message that is appearing many times in the servers' logs.. I could keep the NewResponse interface, and make request optional to avoid breaking  changes. The request would be injected into the response directly in the NewContext function.\n@vishr What do you think?\n```diff\ndiff --git a/echo.go b/echo.go\nindex ca37e5e..dc0883e 100644\n--- a/echo.go\n+++ b/echo.go\n@@ -299,9 +299,14 @@ func New() (e *Echo) {\n// NewContext returns a Context instance.\n func (e Echo) NewContext(r http.Request, w http.ResponseWriter) Context {\n+       response := NewResponse(w, e)\n+\n+       // request is injected to add more context in the warning messages\n+       response.request = r\n+\n        return &context{\n                request:  r,\n-               response: NewResponse(w, e),\n+               response: response,\n                store:    make(Map),\n                echo:     e,\n                pvalues:  make([]string, *e.maxParam),\ndiff --git a/response.go b/response.go\nindex 6244783..5681c3f 100644\n--- a/response.go\n+++ b/response.go\n@@ -2,6 +2,7 @@ package echo\nimport (\n        \"bufio\"\n+       \"fmt\"\n        \"net\"\n        \"net/http\"\n )\n@@ -15,6 +16,7 @@ type (\n                beforeFuncs []func()\n                afterFuncs  []func()\n                Writer      http.ResponseWriter\n+               request     http.Request\n                Status      int\n                Size        int64\n                Committed   bool\n@@ -53,7 +55,13 @@ func (r Response) After(fn func()) {\n // used to send error codes.\n func (r *Response) WriteHeader(code int) {\n        if r.Committed {\n-               r.echo.Logger.Warn(\"response already committed\")\n+               // request is optional in the response\n+               var requestURI string\n+               if r.request != nil {\n+                       requestURI = fmt.Sprintf(\" on URI '%s'\", r.request.RequestURI)\n+               }\n+\n+               r.echo.Logger.Warnf(\"response already committed%s with status %d, cannot apply status %d\", requestURI, r.Status, code)\n                return\n        }\n        for _, fn := range r.beforeFuncs {\n```. ",
    "yinheli": "@yan-xz please try lumberjack https://github.com/natefinch/lumberjack. why SetParamValues nil ?\nc.SetParamValues() will cause c.pvalues's len return 0\nhttps://github.com/labstack/echo/blob/master/router.go#L368 if len(pvalues) == n result infinity loop\n. current middleware data struct not supported the case which you described.\nbut you can use in this way:\ne.GET(\"/needs_auth_1\", func(c echo.Context) error { return c.String(200, \"Text2\") }, IsAuthMiddleware)\ne.GET(\"/needs_auth_2\", func(c echo.Context) error { return c.String(200, \"Text3\") }, IsAuthMiddleware). @vishr  yes use different key in the same middleware\neg:\n```\nJWTConfig{\n  KeyFunc: func(t *jwt.Token) (interface{}, error) {\n    claims := t.Claims.(jwt.MapClaims)\n    appId := claims[\"appId\"]\n// ...\n\nvar secret string\nif appId == \"app 01\" {\n  secret = \"secret 01\"\n} else if appId == \"app 02\" {\n  secret = \"secret 02\"\n}\n// ....\n\nreturn []byte(secret), nil\n\n},\n}\n```. ",
    "faisalraja": "@vishr can you point me to it's docs? I can't seem to find it. Thanks. It worked. Thank you.. ",
    "xesina": "Same for me. ",
    "mission712": "@vishr https://echo.labstack.com/guide/installation claims otherwise, though. Consider updating the page.\nEDIT: Check out https://github.com/labstack/echox/pull/70. ",
    "ledongthuc": "@yinheli: Our gateway works like as the forwarder with some modification. When client send request to our gateway, we modify and split a request to others and send to correct services. So we reuse the request context and for other forwarder requests with different modifications.\nSome actions we frequently to use is clearing path parameters, clearing post params, clearing query params.\nAs I comment, currently, when we clear path parameter, we are workaround by set []string{\"\"}, that make pvalues > 0. I just wonder why we need keep the pvalues > 0 and don't we have any notice, notification or verification in SetParamValues() to check it?\nI saw we have a internal #reset() function, that comment and don't reset the pvalues. So I think we should do that in SetParamValues().. ",
    "jjjachyty": "```go\ne.GET('/captcha',Captcha)\nfunc Captcha(c echo.Context) error {\n    id := c.Param(\"id\")\n    image := captcha.NewImage(id, captcha.RandomDigits(4), 100, 30)\n    _, err := image.WriteTo(c.Response().Writer)\n    return err\n}\n```. ",
    "matjam": "Seems like your dependency manager didn't pull it all into vendor/\nif you install it with go get -u github.com/labstack/echo, what happens?. ",
    "rafa-acioly": "with \"go get\" works fine, i've used \"go dep\" before.\nafter installing i'm getting a error that says; invalid key in the request header, even if i set a header Authorization with value valid-key. ",
    "heat": "Same error here.\n. Hi @rvtarig7  how do you solve this. I got same problem.. ",
    "careuno": "dep is not getting middleware folder. ",
    "kekek": "+1\nI have met the same problem.\nBellow is my code. In the second router, the path param's name should be \"id\", but it get nothing. I print all the path params, there is only \"tid\" lefted. \n```\npackage main\nimport (\n    \"fmt\"\n    \"github.com/labstack/echo\"\n)\nfunc main() {\n// Echo instance\ne := echo.New()\n\ne.GET(\"/teacher/:tid/room/suggestions\", func(c echo.Context) error {\n\n    fmt.Printf(\"c.ParamNames() \", c.ParamNames())\n    return nil\n})\n\n// \u8001\u5e08\u4e2a\u4eba\u4e3b\u9875\uff0c \u8fd9\u4e2a\u8def\u7531\u8981\u653e\u524d\u9762\ne.GET(\"/teacher/:id\", func(c echo.Context) error {\n    fmt.Printf(\"teacher-index parmas %d %#v\", c.Param(\"id\"), c.ParamNames())\n\n    //teacher-index parmas  , []string{\"tid\"}\n\n    return nil\n})\n\ne.Start(\":1323\")\n\n}\n```\n. ",
    "seedjyh": "I met similar problem in version 3.3.dev for echo, and go version go1.10.3 linux/amd64 for golang.\nMy code is:\ngolang\n    e.POST(\"/axb/:xmode\", handler.bindAXB)\n    e.DELETE(\"/axb/:bindid\", handler.unbindAXB)\nAnd when I send command of HTTPIE\nshell\nhttp delete 127.0.0.1:9990/axb/112233\nin method handle.unbindAXB, the parameter is xmode, the parameter for method POST, but not bindid, the parameter for method DELETE,  which means that in code below\ngolang\nfunc (this *axbHandler) unbindAXB(c echo.Context) error {\n    bindID := c.Param(\"bindid\")\nThe data in variable bindID is \"\" but not \"112233\".. ",
    "niklas-karlsson": "Made a PR to solve it: https://github.com/labstack/echo/pull/1149. ",
    "bzon": "@niklas-karlsson  how did you get by with this issue? I'm trying to fit in echo with opencensus tracing as well.. ",
    "kopaygorodsky": "this one can be closed \nhttps://github.com/uber-go/fx/issues/627. ",
    "chanxuehong": "@vishr \nsee https://github.com/labstack/echo/commit/a5d81b8d4a627f3f49dcb3164ef2bb5239682227\nthe variable path was not used after this commit. ",
    "andreiavrammsd": "Is this explicitly not desired or has it been missed? I can close it with no problem if it's not in the Echo vision.. @im-kulikov, wouldn't it break compatibility if safe context were to be default because it would be a sudden change of default behaviour?. One could argue that locking is degrading performance, but if you get to this situation, you'll be able to use the UnsafeContext.\nI'll update the PR with the opposite implementation by adding the UnsafeContext option.. @alexaandru, @im-kulikov, please take a look.. Sure, it's done.. sync.Map was not really designed for general purpose, as the docs state.\nAlso, benchmarks using a regular map indicate zero allocations, while a sync.Map used 2. Perphaps nobody dies from 2 allocations, but I think you should stay away from adding a few allocations here, maybe some others with a new feature one day and so on.\nMutex: BenchmarkContext_Store-4                100000000              117 ns/op               0 B/op          0 allocs/op\nsync.Map: BenchmarkContext_Store-4                100000000              131 ns/op              32 B/op          2 allocs/op\nBoth executed with: GOMAXPROCS=4 go test -bench=Context_ -benchtime=10s -benchmem\nI believe a simple map is safer for any use case a user may have.\n\nThe code with sync.Map (besides the below, some adjustments would be needed for creating a new context and reseting one):\n```\ncontext struct {\n    request  http.Request\n    response Response\n    path     string\n    pnames   []string\n    pvalues  []string\n    query    url.Values\n    handler  HandlerFunc\n    store    sync.Map\n    echo     *Echo\n}\nfunc (c *context) Get(key string) interface{} {\n    v, _ := c.store.Load(key)\n    return v\n}\nfunc (c *context) Set(key string, val interface{}) {\n    c.store.Store(key, val)\n}\n```\nAnd if you still want to offer the UnsafeContext option for maximum performance, then we need a simple map, too.\n\nBenchmarks environment:\ngo version\ngo version go1.11.5 linux/amd64\ngo env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOCACHE=\"/home/msd/.cache/go-build\"\nGOEXE=\"\"\nGOFLAGS=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"linux\"\nGOOS=\"linux\"\nGOPATH=\"/home/msd/go\"\nGOPROXY=\"\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTMPDIR=\"\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\nGCCGO=\"gccgo\"\nCC=\"gcc\"\nCXX=\"g++\"\nCGO_ENABLED=\"1\"\nGOMOD=\"/home/msd/work/github.com/andreiavrammsd/echo/go.mod\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build633382178=/tmp/go-build -gno-record-gcc-switches\"\n. Why would the router be affected? I don't see how the lock is attained in the router. Am I missing something?\nAnyway, I ran the router benchmarks twice for each branch:\n```\ngoos: linux\ngoarch: amd64\npkg: github.com/labstack/echo/v4\nbranch: optional-concurrency-safe-context\nBenchmarkRouterStaticRoutes-4            1000000             15580 ns/op               0 B/op          0 allocs/op\nBenchmarkRouterGitHubAPI-4                500000             28866 ns/op               0 B/op          0 allocs/op\nBenchmarkRouterParseAPI-4                3000000              4982 ns/op               0 B/op          0 allocs/op\nBenchmarkRouterGooglePlusAPI-4           2000000              8350 ns/op               0 B/op          0 allocs/op\nPASS\nok      github.com/labstack/echo/v4     76.596s\nBenchmarkRouterStaticRoutes-4            1000000             15992 ns/op               0 B/op          0 allocs/op\nBenchmarkRouterGitHubAPI-4                500000             28664 ns/op               0 B/op          0 allocs/op\nBenchmarkRouterParseAPI-4                3000000              4992 ns/op               0 B/op          0 allocs/op\nBenchmarkRouterGooglePlusAPI-4           2000000              8465 ns/op               0 B/op          0 allocs/op\nPASS\nok      github.com/labstack/echo/v4     77.293s\nbranch: master\nBenchmarkRouterStaticRoutes-4            1000000             15708 ns/op               0 B/op          0 allocs/op\nBenchmarkRouterGitHubAPI-4                500000             28530 ns/op               0 B/op          0 allocs/op\nBenchmarkRouterParseAPI-4                3000000              4951 ns/op               0 B/op          0 allocs/op\nBenchmarkRouterGooglePlusAPI-4           2000000              8273 ns/op               0 B/op          0 allocs/op\nPASS\nok      github.com/labstack/echo/v4     76.203s\nBenchmarkRouterStaticRoutes-4            1000000             15693 ns/op               0 B/op          0 allocs/op\nBenchmarkRouterGitHubAPI-4                500000             29020 ns/op               0 B/op          0 allocs/op\nBenchmarkRouterParseAPI-4                3000000              4978 ns/op               0 B/op          0 allocs/op\nBenchmarkRouterGooglePlusAPI-4           2000000              8269 ns/op               0 B/op          0 allocs/op\nPASS\nok      github.com/labstack/echo/v4     76.534s\n```\nIndeed, if \"it doesn't feel right\" it can be a good idea to leave everything as it is, like @alexaandru said, and just clearly state the situation in the docs and give the custom context solution (it's actually what I did on the project where I met the issue).\n. Please trigger the Travis build, it looks like it got stuck.. Thank you, too, for your time!. Is this explicitly not desired or has it been missed? I can close it with no problem if it's not in the Echo vision.. I am, too, into not pushing a lot of stuff into the framework just to have it there.\nThe reason for this implementation is that I see it as a very common feature, and it could be extended to include other encoders (like gob). Thus you could easily output json for a web/mobile client and another faster type for microservices communication.\nIndeed, I might be subjective and maybe it's something not really, really worth being in the core, but maybe just metioned in the docs.. @mikefaraponov, I wanted to be restrictive, a valid int or zero. I pushed your suggested change.. ",
    "hcrgm": "my bad. I found \"Trailing Slash Middleware\" was there. Closing this.. ",
    "kolaente": "@vishr There was a pr #973 which got reverted until issues with #980 and #989 get addressed. #980 seems to be merged, #989 was merged and then reverted.\nI've implemented the feature into my application using echo's functions and it seems to work without any issues. (The code is under https://git.kolaente.de/vikunja/api/src/branch/master/routes/crud/paramBinder.go#L15)\nAs #973 is now almost a year old, maybe its time to try and add this to echo and see if it fails the tests?\nConcerning #989: As far as I tested it, it binds only if it finds params in the url and doesn't error out if it doesn't (The way you'd expect it). Also as my implementation calls the default binder, all values are bound to their struct methods.. @vishr I thought discussing this first would be better, I'll send one right away!. @vishr pr is up: #1165. @vishr I've added a test case to check for a mix of bound params and POST data (this was the issue in #989 if I understood correctly). #980 is apparantly not related to the feature.\nPlease tell me if I need to add other tests.. Sure.. Done.. When the param name is defined as somethingid, echo sometimes puts this as id,somethingid (one string with a comma) into c.ParamNames(). I've tried to track this down and fix it, but I wasn't successful which is why I put that workaround here. The bug seems to occur pretty randomly. Or is that a feature?\nI know it's probably not the best place to do this here.. I've registered a route to /thing/:somethingid and printed out ParamNames in the route handler after calling the default binder (before my modifications).\nI wasn't able to reproduce this, with some tests right now, if you were able to, this should probably be fixed in a seperate pr before this one. If not, I'd better remove my workaround as in that case it probably was an issue with my setup.. Do you mean I should implement the bind param method via UnmarshalParam?\nOr do you mean I should run the map of mapped params through UnmarshalParam to fix that bug I described?. Did you test with the pr in place? Or without the dirty hack I put in to prevent it.... ",
    "masterada": "I belive there was an issue with earlier implementation when binding to map or slice instead of struct. Eg: map[string]interface{}, []user. I think you should add these test cases.  I also could not find a conclusion as to how to handle the later (slice of struct). Maybe it's worth checking how query parameters are handled in this case.. ",
    "IRuslan": "The thing that I don't want to write this code in each my handler.\nI want something like:\n```\nfunc afterHandlerFunc(c echo.Context) {\n  // Here I want to modify response body or status.\n}\necho := echo.New()\necho.POST(\"/url1\", handler1)\necho.POST(\"/url2\", handler2)\necho.UseAfter(afterHandlerFunc)\n```\nAnd I expect that afterHandlerFunc will be executed right after any handler function (e.g., handler1 or handler2) but before the response has been sent.\n. @tensor146 seems I got the idea, Thanks a lot.. ",
    "tensor146": "\nI don't think this is possible at that level. \n\nActually, @IRuslan can just use middlewares.\nSomething like:\ne := echo.New()\n    e.Use(func(handlerFunc echo.HandlerFunc) echo.HandlerFunc {\n        return func(context echo.Context) error {\n            println(\"a\")\n            defer println(\"b\")\n            return handlerFunc(context)\n        }\n    })\n    e.GET(\"/\", func(c echo.Context) error {\n        println(\"handler\")\n        return c.String(http.StatusOK, \"Hello, World!\\n\")\n    })\n    e.Logger.Fatal(e.Start(\":1323\"))\nIn output I received:\na\nhandler\nb\nSo, \"b\" - is the place which @IRuslan needs.. ",
    "shevchenkodenis": "It would be pretty useful.. ",
    "medzin": "I'm using the latest release - 3.3.5. Master seems OK - I don't have any 4xx error logs now.. ",
    "DarthPestilane": "@vishr I will add a new directory(subpackage) named \"json\" and change \"encoding/json\" to \"github.com/labstack/echo/json\" in import .... @vishr \ud83d\udc4d . ",
    "abitrolly": "Same here.\n$ go version\ngo version go1.10.3 linux/amd64. Found duplicate #1082.\nFixed by updating dependencies.\ngo get -u -v github.com/oxequa/realize. ",
    "tomoncle": "The reason is that the version of crypto is too old. \nYou should take the following commands to solve this problem.\n\n\n\n$ sudo su\n\n\n\n\n$ cd $GOROOT/src/golang.org/x\n\n\n\n\n$ rm -rf crypto\n\n\n\n\n$ git clone --depth=1 https://github.com/golang/crypto.git crypto\n\n\n\nok!, try again your app.\n. ",
    "tgxhenry": "@tomoncle \nThanks,  your solution works.. ",
    "rvtarig7": "Hi,\nPlease close this one. I was able to resolve the issue. \nThanks,. ",
    "llitfkitfk": "How to get the github.com/labstack/echo v0.0.0-20180412143600-6d227dfea4d2\n. I got github.com/labstack/echo v3.2.1+incompatible\nbut how to find v0.0.0-20180412143600-6d227dfea4d2. I got github.com/labstack/echo v3.2.1+incompatible\nWhere can I find the tag v0.0.0-20180412143600-6d227dfea4d2 ?\nAny command? go get?. Same as before github.com/labstack/echo v3.2.1+incompatible\nTry go get github.com/labstack/echo@6d227dfea4d2\nand got github.com/labstack/echo v3.2.2-0.20180412143600-6d227dfea4d2+incompatible. remove $GOPATH/pkg/mod/cache/download/github.com/labstack/echo\nand retry?\n. remove cached echo version and go.mod echo version. I found the reason \nhttps://golang.org/cmd/go/#hdr-Module_compatibility_and_semantic_versioning\n\nCode written before the semantic import versioning convention was introduced may use major versions v2 and later to describe the same set of unversioned import paths as used in v0 and v1. To accommodate such code, if a source code repository has a v2.0.0 or later tag for a file tree with no go.mod, the version is considered to be part of the v1 module's available versions and is given an +incompatible suffix when converted to a module version, as in v2.0.0+incompatible. The +incompatible tag is also applied to pseudo-versions derived from such versions, as in v2.0.1-0.yyyymmddhhmmss-abcdefabcdef+incompatible.\n. @im-kulikov I see\nThanks. Yes, I do.. Just want to know why I got v3.2.2-0.20180412143600-6d227dfea4d2+incompatible?. Options (using modules):\ndefault(v3.2.1) - go get github.com/labstack/echo\nmaster - go get github.com/labstack/echo@master\nv3.3.5 - go get github.com/labstack/echo@6d227dfea4d2. https://github.com/labstack/echo/issues/1185. \n",
    "kaey": "\nThis is inline with\n\nExample: git tag v1.2.3 -m \"Release version 1.2.3\", in which case \"v1.2.3\" is a tag name and the semantic version is \"1.2.3\".\n. ",
    "alphayan": "Is it fix now?. ",
    "onitake": "I think the only solution for this problem is to add v... tags for all the existing ones.\nThis shouldn't have any negative side-effects, the old ones can be kept if necessary.. ",
    "golyu": "go  get github.com/labstack/echo@master \nYou will be able to see\nv0.0.0-20180xxxxxxxxx-xxxxx. ",
    "zxysilent": "v3.2.1\n\n3.2.2\n\nThat's the reason.\n. \u63cf\u8ff0\u660e\u767d\u4e00\u70b9\uff1f. \u4f60\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0\u554a\uff0c\u6bd4\u5982\u7a0b\u5e8f\u542f\u52a8\u7684\u65f6\u5019\u5c31\u53bb\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6. Consider using only one log module. > > Consider using only one log module\n\nWhich one?\n\n\n. ",
    "KimMachineGun": "Sync with labstack's master branch.. Thank you for reviewing my PR. I will modify that and recommit it ASAP.. I resolved it. . @vishr Can I ask you review my code?. How about removing return statements in the else statement?\n```\nif err = json.NewDecoder(req.Body).Decode(i); err != nil {\n    if ute, ok := err.(json.UnmarshalTypeError); ok {\n        return NewHTTPError(http.StatusBadRequest, fmt.Sprintf(\"Unmarshal type error: expected=%v, got=%v, field=%v, offset=%v\", ute.Type, ute.Value, ute.Field, ute.Offset)).SetInternal(err)\n    } else if se, ok := err.(json.SyntaxError); ok {\n        return NewHTTPError(http.StatusBadRequest, fmt.Sprintf(\"Syntax error: offset=%v, error=%v\", se.Offset, se.Error())).SetInternal(err)\n    }\nreturn NewHTTPError(http.StatusBadRequest, err.Error()).SetInternal(err)\n\n}\n```. ",
    "mangas": "Thanks for the response @alexaandru I wasn't aware of that project. \nWorks perfectly and I agree he doesn't make much sense to move it/replicate it. ",
    "bt": "Thank you for the merge!. ",
    "mozey": "I also found this confusing, but usually for CORS you don't have to list OPTIONS in AllowMethods it is implicit. ",
    "oemdaro": "I still got problem with Go 1.11 modules, start from v3.3.6 to v3.3.8\nshell\n\u279c go get -u github.com/labstack/echo@v3.3.8  \ngo: finding github.com/valyala/fasttemplate latest\ngo: finding golang.org/x/crypto latest\ngo: finding golang.org/x/sys latest\nand in go.mod\nrequire (\n    github.com/labstack/echo v0.0.0-20181123063703-c7eb8da9ec73 // indirect\n    github.com/labstack/gommon v0.2.8 // indirect\n    golang.org/x/crypto v0.0.0-20181203042331-505ab145d0a9 // indirect\n    golang.org/x/sys v0.0.0-20181221143128-b4a75ba826a6 // indirect\n)\n. ",
    "mikefaraponov": "Hello, not sure that IntParam(name) -> int is expected behaivior maybe IntParam(name) -> int, ok bool will be better, so then if you won't need the check you can skip with id, _  := ...?. ",
    "bwsalmon": "Hmm, oops. Looks like I actually have an earlier version that I had realized. Closing this out, since I believe it is a dup of #1052.. ",
    "SaulDoesCode": "That library is a wrapper around a C++ implementation, introducing this as a dependency might come with some issues for some people. Is there, perhaps, a pure go brotli implementation that could be used?. ",
    "tomnattle": "\u901a\u8fc7httpclient. ",
    "Delphier": "return handler(c)  or c.Redirect. @xinln plz close this issue.. can we remove go.mod file on v3? start use go.mod from v4.. i fork echo and tested it:\n- delete go.mod and go.sum\n- release 3.3.10\nrun go get or go build or go mod tidy , the verson in go.mod is v3.3.10+incompatible.\nSeems to be able to solve this problem temporarily.. Actually in go module mode:\nmodule github.com/labstack/echo = module github.com/labstack/echo/v1\nimport github.com/labstack/echo = import github.com/labstack/echo/v1\njust v1 is omitted.\nbecase tagged v1.x release with go.mod not found,  v3.3.5 is last release without go.mod, so it is selected.\nfrom golang help: Module compatibility and semantic versioning\n\nCode written before the semantic import versioning convention was introduced may use major versions v2 and later to describe the same set of unversioned import paths as used in v0 and v1. To accommodate such code, if a source code repository has a v2.0.0 or later tag for a file tree with no go.mod, the version is considered to be part of the v1 module's available versions and is given an +incompatible suffix when converted to a module version, as in v2.0.0+incompatible. The +incompatible tag is also applied to pseudo-versions derived from such versions, as in v2.0.1-0.yyyymmddhhmmss-abcdefabcdef+incompatible.\n\n. works fine \ud83d\ude0b. ",
    "leoryu": "Hi @alexaandru ,\nYou are right, different implements for different go versions looks weird. I guess the reason is that we need to Disable not supported error handling in all go versions previous 1.11. But I'm not sure it's necessary. So if it's possible, I really hope @blaubaer cloud share more details about his work.\nThe following is my guess:\n1. Error handling is not supported in all go versions previous 1.11, so we need different implements for different go versions.\n2. @blaubaer  forgot to assign config.Transport in the case of go version is not 1.11.\n. ",
    "blaubaer": "Hi @alexaandru,\nyes, it is simply case 2. - I \"forgot\" to assign config.Transport.\nIf you compare: https://github.com/labstack/echo/blob/bc37a3a79264209e4e6f1ca9d4f7ec16c8dba429/middleware/proxy_1_11.go#L21-L24 with https://github.com/labstack/echo/blob/bc37a3a79264209e4e6f1ca9d4f7ec16c8dba429/middleware/proxy_1_11_n.go#L11-L13\nSo which means in proxy_1_11_n.go is simply the following line missing:\ngolang\nproxy.Transport = config.Transport\nThe fallback variant comes simply later because originally I developed this based on golang1.11 and also added the feature to configure the Transport. Then I realized that it was working on my machine but not on previous versions of golang1.11 and added this for at least not breaking previous versions.\nThe reason why there are two different files are: In golang1.11 they are introduced the ReverseProxy.ErrorHandler and without it the error handling of the reverse proxy is extreme weird. It will just end up in an not handable log entry on the stderr.. Yes it will do. According to the documentation at: https://golang.org/pkg/go/build/#hdr-Build_Constraints\nExcerpt:\n[..]\n- \"go1.8\", from Go version 1.8 onward\n- \"go1.9\", from Go version 1.9 onward\n- \"go1.10\", from Go version 1.10 onward\n- \"go1.11\", from Go version 1.11 onward\n[..]. Depends what we understand as an error, right? The issue is that the remote is not available is automatically an configuration problem, or a wrong written code of the application. I would say no, but I also can understand if you go for error rather than warn. Your call. \ud83d\ude03 . I got you point. I will change it accordingly.. ",
    "skrassiev": "I don't think codecov/patch \u2014 0% of diff hit (target 81.57%) is accurate.. https://github.com/labstack/echo/pull/1228. not missing, but the single double quote has been accidentally introduced. See  history of changes and https://github.com/labstack/echo/pull/1232. ",
    "xinln": "@zxysilent  \u597d\u5427\u3002. @benyu  \u54c8\u54c8\uff0c\u8c22\u5566\uff0c \u5176\u5b9e \u6709\u4e00\u4e2amuti IO \u5c31\u53ef\u4ee5\u4e24\u8fb9\u8f93\u51fa\u4e86. ",
    "jessejohnston": "The fix proposed by @wangxianzhuo worked for me also.. ",
    "godofdream": "the proposed fix activates acme also for standard TLS. the correct way is:\n// StartAutoTLS starts an HTTPS server using certificates automatically installed from https://letsencrypt.org.\nfunc (e *Echo) StartAutoTLS(address string) error {\n    s := e.TLSServer\n    s.TLSConfig = new(tls.Config)\n    s.TLSConfig.GetCertificate = e.AutoTLSManager.GetCertificate\n    s.TLSConfig.NextProtos = append(s.TLSConfig.NextProtos, acme.ALPNProto)\n    return e.startTLS(address)\n}. ",
    "awbraunstein": "I'm running into this issue as well. Can I just submit a PR for this?. I think that echo.Context should implement context.Context. This way deadlines to backends could be correctly propagated as well as tracing data.. ",
    "roberto-nascimento": "Hello there is a better one, https://github.com/labstack/echo/pull/1232/files, latency is a number.. ",
    "sueken5": "surely,  https://github.com/labstack/echo/pull/1232/files is better.\nI close this pull request .. ",
    "qudongfang": "\nThis sounds like a very bad idea. You should instead submit a patch to the broken framework(s), handling it in here just seems wrong.\n\nI think that we should use the params from URL when the body is empty or blank, while we don't want to change too much.\nAs ISSUE #1214 proposed, It is not right to just use the Content-Length == 0 as the only condition.\nhttps://github.com/labstack/echo/blob/3f8b45c8d0dd840198a6b24b3393e5ec553dcb85/bind.go#L33-L41\nOtherwise, Could you consider offering a method to let us bind query parameters to structs when the body is empty/blank?. ",
    "burgesQ": "I can confirm that with github.com/labstack/echo v3.3.5+incompatible the issue is resolved :+1: . ",
    "onrik": "Thanks. But i think this is weird and unexpected behaviour.. I store a value in context, but it can be nil also. In this case i can't check real value existing because context.Get returns nil. Fox example gin returns existing flag on Get. https://godoc.org/github.com/gin-gonic/gin#Context.Get . In my opinion this is not a feature, it's adding really missing functionality and developers need to write some hacks without it.. ",
    "yanyandenuonuo": "@rskumar \nThanks for your answer and it works. I'm sorry that i hadn't view all the document.\n- I had use several web framework and all of them handle the TrilingSlash with default. So i think it should match both of them.\n- I remember the browser will remove the TrilingSlash, i try to reproduce but i failed. Maybe it's config by those website with rewrite.\nThere is no answer Which of the best way to handle this situation. But i think it's better handle it with web framework default.. ",
    "kodabb": "pinging @vishr since this is affecting a few of my projects as well ^^. ",
    "CuBiC3D": "@alexaandru works fine for now, I get github.com/labstack/echo v3.3.10+incompatible. ",
    "hchood": "Done.  Thanks for reviewing @vishr !. ",
    "sleagon": "title: How to parse var of array type from form data?\ntype of PostForm is map[string][]string.\n```golang\npackage main\nimport (\n    \"net/http\"\n    \"strings\"\n\"github.com/labstack/echo\"\n\"github.com/labstack/echo/middleware\"\n\n)\nfunc main() {\n    // Echo instance\n    e := echo.New()\n// Middleware\ne.Use(middleware.Logger())\ne.Use(middleware.Recover())\n\n// Routes\ne.POST(\"/\", hello)\n\n// Start server\ne.Logger.Fatal(e.Start(\":1323\"))\n\n}\n// Handler\nfunc hello(c echo.Context) error {\n    // Parse form data\n    c.Request().ParseForm()\n    // PostForm is a map[string][]string\n    return c.String(http.StatusOK, strings.Join(((map[string][]string)(c.Request().PostForm))[\"test\"], \",\"))\n}\n```. ",
    "Nexucis": "Any update on this ? Just tell me if it's something that you like or not :). Thanks by advance for your response. On my side, I think YAML is becoming as standard as JSON, specially with the arrival of Kubernetes, Prometheus, and other cloud technology that proposed both format in their API.. Yeah it's not really easy to know what exactly Kubernetes support, specially when they didn't say it in their API documentation :  \nTo know it, I pass by the Openshift documentation which describe the different format produces. ",
    "thecampagnards": "Hello, I did a PR here https://github.com/labstack/echo/pull/1273 to implement YAML at Bind() :smile: .. I\u2019m using YAML because in JSON format you have to escape \u201c and you can\u2019t use line break.\n@alexaandru You right about the fact that echo has to be lightweight service\nThanks @vishr, I will check it. ",
    "tirithen": "For now I'm using the workaround:\n```go\nfunc absolutePath(input string) (path string, err error) {\n    absolute, err := filepath.Abs(input)\n    if err != nil {\n        return\n    }\npath, err = filepath.EvalSymlinks(absolute)\nif err != nil {\n    return\n}\n\nreturn\n\n}\n// Serve static files\nserver.Use(func(next echo.HandlerFunc) echo.HandlerFunc {\n    return func(context echo.Context) error {\n        request := context.Request()\n    path := request.URL.Path\n    if path == \"/\" {\n        return next(context)\n    }\n\n    filePath, err := absolutePath(staticDirectory + path)\n    if err != nil || strings.HasPrefix(filePath, staticDirectory) == false {\n        return next(context)\n    }\n\n    return context.File(filePath)\n}\n\n})\n```. ",
    "universonic": "FYI: https://github.com/uber-go/zap. How about #1261 ? . ",
    "ccampbell": "The issue is that the jwt-go version in the go.mod file is not compatible with echo:\nhttps://github.com/labstack/echo/blob/7867fce6ce3e8da711e49256e14410ca46d7ecc0/go.mod#L5\nI was able to workaround this by adding this to the top of my go.mod file:\nreplace github.com/dgrijalva/jwt-go v3.2.0+incompatible => github.com/dgrijalva/jwt-go 3af4c746e1c248ee8491a3e0c6f7a9cd831e95f8\ndgrijalva/jwt-go@3af4c746e1c248ee8491a3e0c6f7a9cd831e95f8 is the latest commit from master.. ",
    "funcsatish": "Got answers here https://echo.labstack.com/cookbook/embed-resources. ",
    "suningrass": "thank you very much ,i will try it. ```Go\nfunc customHTTPErrorHandler(err error, c echo.Context) {\n    code := http.StatusInternalServerError\n    if he, ok := err.(*echo.HTTPError); ok {\n        code = he.Code\n    }\n    errorPage := fmt.Sprintf(\"%d.html\", code)\n    if err := c.File(errorPage); err != nil {\n        c.Logger().Error(err)\n    }\n    c.Logger().Error(err)\n}\ne.HTTPErrorHandler = customHTTPErrorHandler\n```\nthe example shows custom error page \nbut if the 404 error page file contains static image\uff0c c.File\uff08\uff09 can not use static resource. > \n\nthank you very much ,i will try it\n\nit does not work\ni have to use this kind of style\n```Go\ncleanblog := e.Group(\"cleanblog\",\n    middleware.Static(\"static/startbootstrap-clean-blog-gh-pages\"))\n...........\ncleanblog.GET(\"/\",handle_cleanblog)\n...........\nfunc handle_cleanblog(c echo.Context) error {\nreturn c.File(\"static/startbootstrap-clean-blog-gh-pages/index.html\")\n\n}\n```. > \n\n\nbut if the 404 error page file contains static image\uff0c c.File\uff08\uff09 can not use static resource\n\nCould you please detail that? c.File() returns a file to the consumer, that's all its job. If that file contains images, it is no longer the job of that particular c.File() to return them. I assume you're viewing these error pages in a browser and the browser does not display the images, correct? Are the images served from somewhere else or are they meant to be served by this Echo instance as well? If the latter, do routes exist for them already? Could you possibly please post the link to an image that you think it should display and the route that you defined for it? Thanks!\n\nyou are right  thank you very much\u3002in my case\uff08somehow complicate article server\uff09\uff0cevery page \uff08including its subpage\uff0c dynamic template or static html page\uff09contains lots of static resource\uff0ceven the 404 pages or other error pages. they can not be regroup according to file type like this\uff1aall js together\uff0call images together...... . here every page is a dir\uff0cthe contents are maintaind by different people, the dir have all the resources\uff08very big and complicate\uff09. so here is my problem or confused:\n1.   i can use e.GET(\"/xxx\",handle_xxx) but i can not to set the whole static dir to different page (e.Static(\"xxx\", \"xxx\"))\uff0c so i propose e.GET(\"/test\" , handle_moban3451, middleware.Static(\"static/moban3451\")), it not work\n2.   e.File(\"/xxx\" , \"/XXX/XXX.html\") can not work correctly , i have tested that , the image or css are not loaded, as you said it need set dir first.\n3.  the valid way by now is set every page as group e.Group(\u201c/xxx\u201c\uff0cmiddleware.Static\uff08\u201dxxx\u201c\uff09)  and use group.GET() func. this method problem is : customHTTPErrorHandler have to sent html to browser, the 404 or other like 503 page are all contains static files \uff0chow to set the staitic dir independently not whole server (of course i used e.Static(\"xxx\", \"xxx\") with the whole serve r, it works )\uff0ci can not carry it out\nis this my incorrectness to use echo frame or sth other\uff0ccould you please give some advice\n. > \n\nAlright, starting to see the picture :) Two things:\n1 - I hope that you are using iteration to create all these groups and are not defining them by hand. I can't imagine being fun to maintain all those routes manually. i.e. Something like this should do:\ngo\nfor _, pageRoot := filepath.Glob(filepath.Join(\"content\", \"*\")) {\n    g := e.Group(\"/\"+filepath.Base(pageRoot), middleware...)\n    g.Get(...)\n}\n2 - and secondly, if you need 4xx, 5xx pages to be dynamic, make them dynamic. The custom HTTPErrorHandler from the guide is just an example, nothing more. You can implement it in any way it makes sense for your particular case, which is: make them templates not static files, so that you can replace the \"group root\" with the one from the request. I.e. pseudocode:\n1. request comes for non existent page under `/pageX/whatever.html`\n\n2. in your (unique across site) custom HTTPErrorHandler, you determine that the `groupRoot` is \"/pageX\" (or whatever is the criteria for differentiating one pages group from another)\n\n3. you read file from disk, parse it as a template (html/template) and replace the `groupRoot` variable with the actual group root. And of course all your static assets in that template, are prefixed with that variable. So the rendered page, will contain static assets, relative to the group root;\n\n4. you display the rendered page along with an appropriate status code.\n\nThat's it!\nYou can also use custom context and define a groupRoot() function, that is then accessible from everywhere (as it seems that this concept plays a central role in your app, you may need it in more places than just the error handler).\nHope this helps!\n\nthank you very much\uff0cgood echo frame \uff0ci will do sth trying about code refactoring acording to your suggustion :). ",
    "dhduvall": "I see that the same problem exists with the v3.3.5, v3.3.6, and v3.3.8 tags: they all have the wrong Version, and they all seem to have been moved from their previous commits. I don't have data on newer tags.. @alexaandru, can you move the tags back to where they were and push the result? If you no longer have the commit objects somewhere, I'm sure the community can help collect them.\nThe fallout from this may be wider than is practical for all dependent projects to fix it up on their end, even if an upgrade is doable.  This also breaks builds of old versions, which may not be something that can be fixed up.. Fair enough; though a) this change was in error, and b) people and projects depending on it will only have been doing so for a few weeks, rather than up to almost a year.\nThere's no perfect answer here. :frowning_face: . Our build dependent on v3.3.7 is working again, and the hashes for the versions are the ones present in my old copy. Thanks for the quick turnaround!. ",
    "dmlittle": "I think history might have been rewritten on the master branch? If this is the case I think the reason we can still see the original commits on GitHub is because there are forks that still have those commits and GitHub shares the git objects between forks. \nFetching the repository locally and trying to access commit 2e9f4ea shows it doesn't exist.\n$ git checkout 2e9f4ea4e010fa328318107ba074b1b72381c571\nfatal: reference is not a tree: 2e9f4ea4e010fa328318107ba074b1b72381c571\n$ git show 2e9f4ea4e010fa328318107ba074b1b72381c571\nfatal: bad object 2e9f4ea4e010fa328318107ba074b1b72381c571\nI agree with @danielbprice that this is a really scary practice and should never be done. Specially given that Go uses git repositories such as GitHub as its source for packages. Rewriting history on the master branch can break everyones integration.. ",
    "Skarlso": "Note... This is also breaking go mod as the hashes aren't aligned and constantly erroring with mismatched sums.:\ngo: verifying github.com/labstack/echo@v3.3.5+incompatible: checksum mismatch\n        downloaded: h1:Y3vG4kINVWNQN8Y6Jdur8uLat7fSLV5n5yLE8n+JbF4=\n        go.sum:     h1:9PfxPUmasKzeJor9uQTaXLT6WUG/r+vSTmvXxvv3JO4=. @alexaandru Yeah the whole thing. :D No worries. Will upgrade. :) Thanks. ",
    "vibrantbyte": "Thank you.. README: https://github.com/labstack/echo#supported-go-versions.  . ",
    "kumarharsh": "@vishr is it possible to include this patch in the next v3 release (whenever that happens). I'm using glide for dependency management and using latest version in v3, and I'm not sure how much work would be involved in moving to v4.. Yeah, glide is in maintenance mode, so I don't expect changes to come there. It's fine, not a big problem.. \ud83e\udd26\u200d\u2642\ufe0f will fix it shortly. @alexaandru - please check. Are you saying if the variable should be called CSPReporting ?. @vishr I think CSPReporting might cause slight confusion with the report-uri part in the CSP header, so I kept it as this. I'm open to changing it if you feel so. Thoughts?. or... were you referring to the typo in the comment for CSPReportOnly? I just realized there was a typo. After correcting it and while pushing the change, it dawned on me that maybe I had completely misunderstood your initial comment \ud83d\ude02. ",
    "DasJott": "Explanation of the kid header param. look here please. ",
    "hemachandarv": "@vishr Seems like a first-time contributor enhancement. Can I take it up?. @vishr @alexaandru I have created a PR for addressing this #1312. Please review and let me know if it helps. . > @hemachandarv Congrats on your first PR \ud83d\udc4d\n@vishr Thanks! Hopefully the start of many more! :dancer:. @vishr If this seems valid, will send a follow-up PR to fix it. Your thoughts?. Ah, got it! Misunderstood that Use() middlewares need to be executed after the handler. Thanks for the explanation.. @vishr May I request your review? This can be simplified further, as provided in #1265 . ",
    "rmasclef": "Maybe this is the expected (v4 can not be used without gomodules)\nIf so, I suggest updating the README.md in order to be clearer \ud83d\udc4d. Thank you for that answer \ud83d\udc4d\nAs you said, after the README update, the problem will be, indeed, in the dependency manager side.\nSo regarding dep:\n- adding a dependency constraint on v4 will \"not work\".\n- Adding no constraint (or a constraint on master branch) will \"work\".\nI don't know if it is a good idea but, as a lot of go devs use dep, maybe it will be nice to add this behavior as a warning or something like this in the README ?. to me a simple change from this :\n\nAny of these versions will allow you to import Echo as github.com/labstack/echo/v4 which is the recommended way of using Echo going forward.\n\nto this:\n\nAny of these versions will allow you to import Echo as github.com/labstack/echo/v4 using gomodule which is the recommended way of using Echo going forward.\nFor older versions or if you are not using gomodules yet, use the latest v3 tag\n\nit might be nothing but, imho, it is way clearer like this \ud83d\udc4d . ",
    "ozburo": "Looks like my Codecov is showing a bunch of red, any help on how to make it happy is appreciated \ud83d\udc83 . Just to follow since this PR failed code coverage -- I tried to add more tests in the style currently found, but since this adds a URL router param I failed to integrate it at that level and simply set the necessary parameters directly on the Context struct.\nAgain, not sure the best course of action here, still think this is a valid addition to expand the use-cases for JWT.\n. ",
    "QuantumGhost": "I'd like to know if we can make #1214 in v5.. ",
    "harshachandra": "StdLogger looks fine to me provided we have \"bring your own logger\" option is given. \nAnd similarly can we bring own Router like we have option to set Validator?. Can we have an examples section describing the existing APIs from https://godoc.org/gopkg.in/labstack/echo.v4 or going forward https://godoc.org/gopkg.in/labstack/echo.v5? They can be hosted from https://echo.labstack.com/. ",
    "senkasng": "all version. ",
    "velnez": "The solution you have provided does work. Thank you for your reply :) \n. ",
    "nicklaw5": "godoc added.. Sorry, my head's not int the game today :disappointed: \nShould it be \"for an HTTP method...\" or \"for a HTTP method...\"?. ",
    "airking05": "Thank you for your kind advise :)\nI have fixed what you pointed out, so pls review!\n. ",
    "pztrn": "Yes, you're probably right. This will also give us compatability with go != 1.10. I'll do new PR then.. ",
    "artyomturkin": "I did not find randomBalance in the repository. Isn't the change in ProxyWithConfig enough to cover all proxies?\n. ",
    "nipemgroup": "Indeed it's very quick to fix, but it's used in the documentation; https://echo.labstack.com/middleware/cors.\nI used those constants, rather than the stdlib ones, because of the docs. I know it's a little late, but I can't be the only one getting broken code from this change.. "
}