{
    "afollestad": "This looks great, thank you\n. @leinardi a small issue was created from this, margin was added above the buttons when a custom view is in use with a divider.\n\n. I was able to get the regular dialog pretty close to stock with the code I had before\n\n. I currently have this in my own code base (stock on the right):\n\n\nActually, dividers are part of the design guidelines when you use custom view content: http://www.google.com/design/spec/components/dialogs.html#dialogs-behavior\n. @leinardi and with that, when you have custom content, the area where the buttons are should be 48dp with no spacing below or above. The dimensions I use are all based on Google's design guidelines.\n. @leinardi this is intended behavior, you should be setting custom views from the MaterialDialog.Builder as shown in the README tutorial.\n. @leinardi oh sorry this is indeed a bug that was recently brought up, I'll have it fixed in a few minutes, thanks\n. https://github.com/afollestad/material-dialogs/commit/8fcaf35fc901515f4c3cbd424715d3d2f2a9028b\n. @leinardi even with the latest code?\n. @leinardi hmmm, I'm unable to reproduce that on my phone and in an emulator\n. @leinardi oh I have Genymotion too, I'll try it with the Nexus S once I finish my homework :)\n. @leinardi try out the latest code and let me know if it works better. There's also a new sample APK in the project's sample folder, and it will be available on Google Play soon.\n. Done https://github.com/afollestad/material-dialogs/commit/25c9c21fc2fdd56aaa6934e8ce7232969e0c2dd6\nVery useful website, btw, I was aware of a few licenses but that's really descriptive and simple.\n. Thank you\n. I've updated the README (at the bottom, under misc.) to reflect this: there's now a hideActions() method in the Builder, and a hide and show actions method in the MaterialDialog.\n. Good catch, I'll have this fixed later today \n. The dialogs guidelines have gotten a complete update, dimensions and other various things have been changed. Updating accordingly. http://www.google.com/design/spec/components/dialogs.html\n. I'm currently using dspec (https://github.com/lucasr/dspec) to get correct measurements from the latest design guidelines :smile: \n\n. @Tolriq the stuff currently on the repo isn't related to this issue yet\n. @Tolriq the latest commits include my updates for the Material design guidelines, only showing dividers when content is scrollable, scrollable lists, etc.\nI have a hide buttons functionality coming too.\n. It's there now, with the new itemProcessor API that I will document and put in the sample soon\n. I'll have to check it out on KitKat but there shouldn't anything wrong.\nThe min width isn't always 280dp, it currently measures the dialog and uses the real width of the dialog.\nThe other stuff is intended.\n. Not scrolling the title with the list isn't in the guidelines, they do it on stock Lollipop but it's ugly like that.\n. @Tolriq yeah, that was intended. Those were hacks to try to get it to work on ICS better, since API 14 apparently doesn't respect padding at all.\nAnd no, it says \"a 280dp\" dialog, it doesn't directly state that 280dp is the default dialog width. If it was, that would only apply to Lollipop too. Not necessarily other versions of Android that use different dimensions and layouts.\n. @Tolriq I see what you mean about the wrong theme though haha, I'll have that fixed in a sec\n. Oddly enough 280dp seems to work perfectly.\nThe latest commits fix a lot of the above mentioned stuff, I added padding to the bottom of lists too. And I made the selectors white on Jellybean/ICS.\n. @Tolriq oh I totally forgot to implement that, I'll have it in there today\n. @Tolriq another issue (https://github.com/afollestad/material-dialogs/issues/10) reminded me that the list content needs to be put in a scroll view. That will also be fixed today.\n. @Tolriq the latest code should now fix the issue with scrolling lists, the callback functions for single choice and multi choice now accept an index/indices, too.\nHowever, I haven't gotten to test it yet, cause for whatever reason MaterialDialog can't find its library resources (like colors) when it's initialized at runtime now.\n. @Tolriq well it's not a code bug, it doesn't happen until I run the sample and click one of the buttons in the sample. Something is wrong how the project is built or something :o\n. @Tolriq okay :)\nWell the dialog design guideline request is done too but I can't test it :(\nI'll have to look into a way to know whether or not the content is scrollable.\n. @Tolriq fixed the issues I had, the project can be safely recloned now, and this issue is complete and included in the sample and README :smile:\n. @Tolriq I rebased the repo once again to cleanup all the commits, starting fresh\n. Well one thing, you don't need to dismiss the dialog in the callbacks, it does that automatically. I'll check this out right now though.\n. @MDXDave hmmm, it's working for me in an API 19 emulator. Do you have the latest code from the repository?\n\n. @MDXDave your fork might be out of date, the main repo was recently rebased so you'd have to refork \n. @MDXDave hmmm, very odd. You may want to double check that.\n. @Tolriq the areas where I set margins via the code is important, so I don't have to maintain multiple layout files that could get out of sync if someone forgot to change something in both. Where have you run into issues with this in your situation?\nYou mean default text for the content? Or the title? And the buttons get their color from the theme colorAccent or whatever you set in the Builder.\nI'll take a look at the other stuff.\n. @Tolriq check out the latest code, I believe I've fixed mostly everything above. Including defaulting to the stock primary/secondary text colors if custom colors aren't provided (or there's no accent color for the action buttons). The dialog width is actually retrieved using an OnShow listener, so it gets the actual measured width of the dialog and it seems to work great. Let me know.\n. Wait I forgot to address the custom view with no title top margin\n. It should all work well now\n. @Tolriq they use whatever the accent color of your app is, the Material colorAccent attribute. That's what you're supposed to use. The guidelines show all of them being colored, also.\nI have no idea what you mean by missing pixels.\nIt would be easier if you tried to fix things yourself, though.\n. @Tolriq the latest commit should fix the issue with padding at the bottom of lists with actions, though.\nNot sure what you mean about spacing with a custom view.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. I'm not sure, I haven't found any understandable guides on how to set everything up in my free time from school and work. \n. @emartynov that would be great, thanks!\n. @emartynov I've successfully deployed the library to Bintray, waiting for jCenter approval. From there it'll also go to Maven Central.\n. It's not on Maven Central yet, but it's now on jCenter and can be referenced from Gradle dependencies.\n. @leinardi good find! Let me know if the code I just pushed fixes it\n. @leinardi unfortunately that seems to be a weird issue with AppCompat, I think the ones that are unchecked but still pink are in their \"focused\" state. \n. @leinardi I've pretty much confirmed that it's an issue with focused states, but clearing focus hasn't worked yet.\n. Really? Awesome! No problem\n. Because stock AlertDialogs are not themed on pre-Lollipop like various things mention, and to make it similar to Picasso's API. \n. Well in the case of the DialogInterface callbacks, I have 3 variations of\ncallbacks that are used (only positive, positive and negative,\npositive/negative/neutral). And it also lets you use a single callback for\nall action buttons rather than three separate ones. You don't even have to\nset a callback at all if you don't want to, while the other data can still be\nfilled in for lists.\nOthers and myself prefer this builder API, it's designed to be simpler.\nOn Sat Nov 08 2014 at 10:28:41 AM Paul Burke notifications@github.com\nwrote:\n\nI clearly asked why didn't you use the same method names, not the same\nmethod. No reason not to use DialogInterface.OnClickListener, and using\nthe names from AlertDialog.Builder makes a lot more sense than Picasso.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/16#issuecomment-62263805\n.\n. In case you weren't aware, one of the previous releases included a MaterialDialogCompat.Builder class that can directly replace AlertDialog.Builder.\n. The code on GitHub, and the Gradle dependency have been updated with a new method to disable this behavior (MaterialDialog.Builder#dismissOnActionPress(false)).\n\nThere's an example in the last paragraph of the README too (near https://github.com/afollestad/material-dialogs#misc).\n. Oh sorry I forgot to push some stuff. I'll do that when I get home. \n. @cmc00022 should be there in version 0.0.1.3 :)\n. @cmc00022 release 0.0.2 fixed it, I renamed the builder method to autoDismiss too\n. They use AppCompat's accent color, or the Material themes accent color. I\ndon't control that part.\nOn Sat, Nov 8, 2014, 6:16 PM Addie Baker notifications@github.com wrote:\n\nI looked through code and layouts but didn't see a way to change the list\nitem radio button color. is this possible?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/18.\n. Awesome, no problem!\n\nOn Sat, Nov 8, 2014, 6:54 PM Addie Baker notifications@github.com wrote:\n\nah. yes it does. Had my accent set to darker variant of my theme color and\ndidn't realize. thanks for the great library and support!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/18#issuecomment-62285735\n.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. This is is because a WebView is a scroll view and the dialog puts custom\nviews in a scroll view. Scroll views cannot go inside of scroll views.\n\nOn Sun, Nov 9, 2014, 5:44 AM cmc00022 notifications@github.com wrote:\n\nI'm using a ChangeLog in my app that builds the content using a webView\nand content in html. With AlertDialog it works well but when using\nMaterialDialog the content does not shows up. I guess the dialog knows that\nthe content is there as it has scroll as is the content was there but the\ncontent does not appear.\n[image: materialdialog]\nhttps://cloud.githubusercontent.com/assets/3494156/4967276/b014b528-6805-11e4-9c5c-9c9c70031f05.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/19.\n. That would be a little complicated to do at the moment, that could be a\nfuture thing though\n\nOn Sun, Nov 9, 2014, 11:42 AM Carlos Morera de la Chica \nnotifications@github.com wrote:\n\nSo, maybe you could add an option to don't add scrollview for custom\nviews. What do you think about it?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/19#issuecomment-62311853\n.\n. Oh yeah I just looked it up, and WebView doesn't actually extend\nScrollView. I'm not sure how it allows itself to scroll. But I'm guessing\nif the HTML was long enough to go past the action buttons, it would have\nissues.\nOn Tue Nov 11 2014 at 5:19:16 PM Oliver Degener notifications@github.com\nwrote:\nI wanted to provide a PR for this issue, but when I cloned the repo and\nextended the sample app to reproduce this, it just worked out of the box.\nMainActivity.java\nWebView webView = new WebView(this);\nwebView.loadUrl(\"file:///android_asset/test.html\");\nnew MaterialDialog.Builder(this)\n            .title(\"Change Log\")\n            .customView(webView)\n            .positiveText(R.string.agree)\n            .build()\n            .show();\nassets/test.html\n\n\nHTML Title\n\n\nThis is an example HTML file loaded from assets.\nKey changes in this release:\n\nFeature A\nFeature B\nFeature C\nFeature D\nFeature E\nBugfix A\nBugfix B\nBugfix C\nBugfix D\nBugfix E\n\n\n\nAnd here's a screenshot from the result:\n[image: Material Dialog with WebView]\nhttps://camo.githubusercontent.com/3334b416493322f2ac93f8cf99deb5b15dd6e0ce/687474703a2f2f692e696d6775722e636f6d2f74506c454761312e706e67\nCan you provide a simple example that leads to the empty view?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/19#issuecomment-62640238\n.\n. https://github.com/afollestad/material-dialogs/issues/19\n. Oops, I meant: https://github.com/afollestad/material-dialogs/issues/45\n. Release 0.5.0 is now available! The sample includes an example that uses a WebView to display a changelog, also.\n. Odd, material-dialogs doesn't define any attributes by that name\n\nOn Sun, Nov 9, 2014, 2:49 PM Stan Kocken notifications@github.com wrote:\n\nI think this is a conflict with an other library I use but since I added\nyour library I have this error:\nError:Attribute \"color\" has already been defined\nAny idea?\nThanks\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/20.\n. @StanKocken I prefixed the attributes, hopefully that fixes the problem. It won't be on Gradle until the next release though.\n. @StanKocken I updated it further so that every style, dimen, color, attr, etc. is prefixed.\n. Release 0.0.3 should fix these issues more\n. Does it get used other than in the Builder?\n. You set a variable for the color, but does it set to the actual text color?\n. The color doesn't get set to the text from the Builder, the MaterialDialog takes the value in its constructor and sets it to the text color in invalidateActions, I only see it being used in the Builder here \n. Ohh right I forgot about that :) thanks\n\nOn Mon, Nov 10, 2014, 8:49 AM Tolriq notifications@github.com wrote:\n\nWell I guess as for the other cases, you answer a little too fast :)\nBuilder set the neutralColor to accentColor or material blue, then dialog\nget the value from builder then apply it ...\nSo adding a neutralColor in the builder does apply the color correctly,\nthis is exactly the same as positive and negative part that you wrote :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/pull/21#issuecomment-62393788\n.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. This was actually very helpful, I wouldn't have figured this out right away.\n\nRelease 0.0.3 is out now.\n. I didn't use the set methods because I base the flow of the builder on libraries like Picasso. It would be too late to change it now anyways, lots of people already use the library in code.\n. 1. https://github.com/afollestad/material-dialogs/issues/25\n2. There was already some but I prefixed more with the latest commit. https://github.com/afollestad/material-dialogs/issues/20\n3. It's listed in library's build.gradle. Unfortunately I can't support anything below API 14, there's no reason to support Honeycomb and Gingerbread anyways :P\n4. It works fine for me and no one else has reported that. And not necessarily, it's using the TTF fonts from Android 5.0, this library's sole purpose is to use Material theming on all versions of Android along with the elements that come with that. Third party devices use custom fonts, but all devices using pure Android that respect Material theming completely using Roboto.\n5. I prefixed these with the latest commit, also.\n. These are now available in release 0.0.3 (the resource name changes)\n. 1. I explained why I can't in that issue.\n2. You're welcome\n3. Yeah barely anyone uses it anymore and you'd be surprised how many things are unsupported (literally thousands). It causes too many issues when attempting to backport, including the fact that it doesn't respect padding correctly so spacing is off everywhere.\n4. I'd recommend using Android Studio since it natively supports the project structure and will maintain support for newer versions of Gradle. I'm guessing Eclipse is the reason you have issues with that.\n5. You're welcome\n. Just to let you know, Android Studio 1.0 is out now, and Eclipse ADT is no longer in active development by Google.\nhttp://www.androidpolice.com/2014/12/08/android-studio-1-0-officially-released-eclipse-adt-longer-active-development/\n. This is included in release 0.0.3\n. This is now in release 0.0.3. MaterialDialog.Builder has a new method: #typeface(medium, regular)\n. Try out the latest commit, hopefully it fixes this\n. This should be fixed now in release 0.0.6\n. Well either way, 0.0.2 is pretty far behind and that version is deleted off the repository. 0.0.4 is the latest.\n. Yeah, I've tested it in emulators too and it works fine\n. I wouldn't recommend using it that low. There's actually issues on API 14\nand 15, they don't seem to respect padding correctly so there's spacing\nissues.\nOn Wed, Nov 12, 2014, 10:02 AM Froelich Stefan notifications@github.com\nwrote:\n\nSo, I really loved the look of the project, however my app is sdk 9 so the\nlibrary seemed like a no go.\nI downloaded the source, modified the minSDK and it compiled perfectly. I\nam yet to test it on a 2.3 device, but it compiled so.\nIs there a reason the minSdk is so high when it could be lower?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/34.\n. Well I mean it ignores padding. Replacing padding with margin doesn't work.\n\nOn Wed, Nov 12, 2014, 10:05 AM Froelich Stefan notifications@github.com\nwrote:\n\nGreat. I will see if I can possibly fix them. I really do love the project.\nThanks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/34#issuecomment-62742327\n.\n. Done\n. That's an old attribute that was renamed. You must be out of sync.\n. @luo4567 oh you're talking about that. One is from AppCompat, one is from API 21.\n. @luo4567 you should have the latest Android SDK.\n. Definitely\n. This is now implemented, both from the Builder (see the README) and the stock setIcon() method.\n\nRelease 0.0.9 is available.\n. This was a bug, that I just pushed a fix for. Before, all buttons except the positive will dismiss the dialog as long as auto dismiss is turned on (which it is by default).\n. Fixed.\n. @vishal0071 No it's not\n\n. Taking that away seemed to cause issues for others with correctly applying selectors and other theming.\n. @balysv it's a little different than the stock dialog in this case, since theme attributes are stored in my own themes for the dialog rather than stock global themes. I'm not sure how this was affected by changing from Activity to Context, but it did.\n. Well actually I pass in custom themes to the super constructor in the\ndialog, the context's parent theme is overridden for the dialog itself.\nOn Thu, Nov 13, 2014, 5:13 PM Balys Valentukevicius \nnotifications@github.com wrote:\n\nIt's because a ContextThemeWrapper which Activity extends is required for\ngetting attributes. Most common mistake is to use the Application as a\nContext. You could possible add constructors that allow a theme to be\npassed in and create a ContextThemeWrapper that can be used (similar to\nAlertDialog)\nBut needless to say, it's just good design to provide an api that allows\nsuper classes to be passed in :)\nIt's a nice project, try to make is as close to the Android SDK api and it\nwould be even better!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/40#issuecomment-62984255\n.\n. So the attributes are resolved from the MD_Light and MD_Dark themes rather than Material and Holo. Which would make me think it would be fine using a plain context, but it doesn't seem to be be.\n. I don't think that's quite what happens. I manually call the super constructor and directly pass in my own themes, there isn't anything that could be done by a library user to stop MD_Light or MD_Dark from being used which always have their associated attributes regardless of what Context is passed to the Builder. Unless there's an aspect of Java or the SDK that I'm unaware of.\n. A lot of the time I actually use getContext(), like when retrieving the primary text color and so on. getContext() returns the context passed to the super class. So in most cases (apparently not for layout inflater though) it's using the themes enforced by theme() of MaterialDialog.Builder.\n. I'm not totally sure, it just seemed like there was a correlation. It can be switched back but I would need to test it first.\n. I just had to change this as the title is no longer the part that the dialog makes visible or invisible when there's no title. You now need to get a reference to the title frame, which contains an ImageView and TextView.\n. I've fixed the first issue.\nThe second issue is the intended behavior.\nThe third issue: what'd you mean?\n. A fix for the first issue is now in release 1.0.0.\n. There's a lot of weird issues with the native dialog, actually. In a lot of\ncases, they don't follow their own design guidelines. I personally think\nthe title not scrolling looks bad, since there's white space in between the\ntitle and list content.\n\nYou shouldn't have a negative button if you don't have a positive button,\nif you only want one button you should be using the positive button.\nOn Tue Nov 18 2014 at 10:12:39 AM Eugen Martynov notifications@github.com\nwrote:\n\n@afollestad https://github.com/afollestad For the second one I don't\nsee this behaviour with native dialog on lollipop. I was thinking this\nlibrary is trying to provide native lollipop experience.\nI created gist to illustrate problem (from sample app):\nhttps://gist.github.com/emartynov/6e7f11072b1d3244a0f5\nIf you uncomment .positive() you will see both buttons\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/43#issuecomment-63495881\n.\n. They have no guidelines on it. The way I do it is the way I think looks\nbest.\n\nNo problem, it's not quite a bug, it's how the library is designed. The\naction buttons will be hidden if no positive text is passed, I should\nprobably make that more obvious though.\nAnd you're right about the version number. Good idea.\nOn Tue Nov 18 2014 at 10:31:09 AM Eugen Martynov notifications@github.com\nwrote:\n\nI've tried to find guideline about scrollable title with content here (\nhttp://www.google.com/design/spec/components/dialogs.html). But was not\nable. Can you point where you found it?\nI violate guidelines showing buttons on list dialog. So will fix it. Thank\nyou! But still I think this is a bug.\nTwo more notation about your release process:\n- you jumped from version 0.0.9 to 1.0.0, but I think it is maybe\n  because you accidentally started with \"build\" instead of \"minor\" version\n  (0.0.1 instead of 0.1)\n- I would tag release versions with release notes. It is common\n  practice which gives you easier working under hotfixes\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/43#issuecomment-63499151\n.\n. Actually I have a good solution to the positive text problem. If the coder passes negativeText, but not positiveText, the positiveText will be set to the default \"OK\" value.\n\nThis is always done with basic dialogs already, just not list dialogs and custom view dialogs. Release 0.1.0 will be available in a few minutes.\n. You should associate positive in this case more with the primary button rather than literally being positive or negative.\n. Good find.\nThat seems to support what I'm doing, don't you think?\n. Fixed.\n. No problem :)\nThis is now in release 1.0.0\n. Once I have some free time I'll work on it\n. My latest commits include the ability to NOT use a ScrollView with custom layouts, by specifying true or false in a second parameter of customView(). I'm going to test it a little more before releasing 0.5.0.\nI based it heavily off Kevin's pull request, so thanks for your help.\n. @DSteve595 no problem!\nRelease 0.5.0 is now available!\n. Release 0.1.1 is available now\n. Yeah, the pull request messed up a bunch of other theming and I need it to\nwork since I use my library in various production apps.\nOn Thu, Nov 20, 2014, 1:14 AM marbat87 notifications@github.com wrote:\n\nDid you revert the changes?\nI can not see them :(\nRegards.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/46#issuecomment-63769551\n.\n. I originally had the min API at 14, someone decided to put it down to 9.\n\nOn Thu, Nov 20, 2014, 8:03 AM Aidan Follestad drummer.aidan@gmail.com\nwrote:\n\nYeah, the pull request messed up a bunch of other theming and I need it to\nwork since I use my library in various production apps.\nOn Thu, Nov 20, 2014, 1:14 AM marbat87 notifications@github.com wrote:\n\nDid you revert the changes?\nI can not see them :(\nRegards.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/46#issuecomment-63769551\n.\n. Something different was passed to the super constructor too, it took out\nthe context theme wrapper which is necessary for correctly theming check\nboxes, radio buttons, etc. to the accent color of the activity theme.\n\n\nOn Thu, Nov 20, 2014, 8:37 AM marbat87 notifications@github.com wrote:\n\nit seems to be working for me, just adding these lines that you removed,\nafter the \"super\" call in MaterialDialog constructor method:\nif (builder.theme == Theme.LIGHT && Build.VERSION.SDK_INT <=\n  Build.VERSION_CODES.GINGERBREAD_MR1) {\n     setInverseBackgroundForced(true);\n}\nThis should not mess up anything since it's executed only for API <= 10.\nAm I wrong?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/46#issuecomment-63816672\n.\n. The wrong themed controls is a big problem on Lollipop since that's a vital\npart of material design. Using the default accented controls when\neverything else in your app is accented looks bad.\n\nOn Thu, Nov 20, 2014, 8:54 AM marbat87 notifications@github.com wrote:\n\nWell the lines I mentioned are enough for me: I'll survive with wrong\nthemed radio buttons on gingerbread.\nIf it's not a problem, could you add the only change in my post?\nThanks in advance\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/46#issuecomment-63819294\n.\n. You can have accented controls on Gingerbread using AppCompat, too.\n\nI didn't know anyone still uses Gingerbread though. I usually tend to only\nsupport API 14 and above for everything, Gingerbread is deprecated and\nobsolete.\nOn Thu, Nov 20, 2014, 8:54 AM Aidan Follestad drummer.aidan@gmail.com\nwrote:\n\nThe wrong themed controls is a big problem on Lollipop since that's a\nvital part of material design. Using the default accented controls when\neverything else in your app is accented looks bad.\nOn Thu, Nov 20, 2014, 8:54 AM marbat87 notifications@github.com wrote:\n\nWell the lines I mentioned are enough for me: I'll survive with wrong\nthemed radio buttons on gingerbread.\nIf it's not a problem, could you add the only change in my post?\nThanks in advance\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/46#issuecomment-63819294\n.\n. I know about the stats lol, I'm not sure why anyone still uses it when\nGoogle pushes to get rid of of it. ICS, JB, KK, and L are dramatically\nbetter and give you so many new APIs.\n\n\nOn Thu, Nov 20, 2014, 9:00 AM marbat87 notifications@github.com wrote:\n\n[image: image]\nhttps://cloud.githubusercontent.com/assets/8694304/5126580/519b35b8-70ce-11e4-9b67-df2a5dcbc660.png\nIt's still alive ;)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/46#issuecomment-63820369\n.\n. I don't support it cause people should know better.\n\nOn Thu, Nov 20, 2014, 9:03 AM Aidan Follestad drummer.aidan@gmail.com\nwrote:\n\nI know about the stats lol, I'm not sure why anyone still uses it when\nGoogle pushes to get rid of of it. ICS, JB, KK, and L are dramatically\nbetter and give you so many new APIs.\nOn Thu, Nov 20, 2014, 9:00 AM marbat87 notifications@github.com wrote:\n\n[image: image]\nhttps://cloud.githubusercontent.com/assets/8694304/5126580/519b35b8-70ce-11e4-9b67-df2a5dcbc660.png\nIt's still alive ;)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/46#issuecomment-63820369\n.\n. This context should be used in the builder instead of introducing a new variable, I'd prefer not adding more variables to the builder that take up extra memory and make the code more confusing.\n\n\nAlso, it looks like there's merge conflicts.\n. Yeah you do, a Context is passed in the constructor of the Builder\n. Hmmm, it might help to explicitly set a height to your GridView\n. Technically you can't put ScrollViews inside of ScrollViews (a GridView is a ScrollView) so that will cause issues until I fix that issue in the library; a temporary solution may be to use a GridLayout instead of a GridView, or maybe modify the dialog layout itself to not wrap your custom view in a ScrollView.\n. Closing this since another issue is basically the same\nhttps://github.com/afollestad/material-dialogs/issues/45\n. Release 0.5.0 is now available, with support to not put custom views in a ScrollView!\n. @emcenrue you're using deprecated methods. There's new a custom view setter method that disables the automatic use of a ScrollView with custom views, which you need to do.\n. You must be using weird contexts. Works fine in all the apps I use my\nlibrary in, and the same project.\nOn Thu, Nov 20, 2014, 3:46 AM Matt Barringer notifications@github.com\nwrote:\n\nThis is the outcome of doing something like\nMaterialDialog.Builder builder = new MaterialDialog.Builder(context);\nbuilder.items(items).build.show();\n[image: device-2014-11-20-104254]\nhttps://cloud.githubusercontent.com/assets/512888/5122546/2ed96878-70a2-11e4-8fe5-ad2547291a80.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/50.\n. *sample\n. Oh sorry I replied to this right when I woke up and misread the issue. Lol\n\nOn Thu, Nov 20, 2014, 9:58 AM Matt Barringer notifications@github.com\nwrote:\n\nNo, it's a bug in the material-dialogs library. Here's the sample app\nafter just removing .title(R.string.states) from the builder in\nshowLongList():\n[image: device-2014-11-20-162521]\nhttps://cloud.githubusercontent.com/assets/512888/5127129/7410fb4c-70d2-11e4-93da-f1c84545862b.png\nPatching the library with\n@@ -149,6 +149,10 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n         // Title is set after it's determined whether to use first title or custom view title\n         if (builder.title == null || builder.title.toString().trim().isEmpty()) {\n             titleFrame.setVisibility(View.GONE);\n-            if (customView == null) {\n-                // Hide the custom title view as well\n-                view.findViewById(R.id.titleFrameCustomView).setVisibility(View.GONE);\n-            }\nThen has a much better look, although I think the margins still might be\ntoo large on top:\n[image: device-2014-11-20-165102]\nhttps://cloud.githubusercontent.com/assets/512888/5127685/fc595dde-70d5-11e4-9f32-57106244a954.png\nI haven't looked through the code enough yet to submit an actual patch,\nbut it really is a valid bug.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/50#issuecomment-63830060\n.\n. I must've forgotten to hide the custom title view, the current master branch now contains that patch. The padding used is 24dp which is a design guidelines dimension.\n. Release 0.2.0 is available now, see the README for a changelog. This patch is included.\n. This is improved in release 0.3.2, which now uses ListViews.\n. Awesome, thank you\n. The new behavior of the library:\n\nAction buttons must be explicitly shown by setting text to them. The buttons will be hidden in any dialog type if no text is passed for them. This also allows you to display neutral or negative action buttons individually without relying on positive text.\n. Release 0.2.0 is out now\n. No problem, thanks :)\nI thought it would have no problems but the changes they made caused a bunch of issues with theming on JB/KK/L. I reverted one of the changes back to fix it, and they reported having issues specifically on Gingerbread. So I removed the support.\n. Haha thanks for the fix :) it's only 3:14 PM where I live so I have about 8 hours to go lol, but good night\n. Release 0.3.0 is available now\n. For constistency and to respect Builder patterns, it's better to not do this \n. Oh I didn't realize that existed. Can you update the really quick? I changed 2 lines in the master branch and it's preventing a merge. \n. That worked, thanks\n. Release 0.3.0 is available now\n. Someone else put it down to 9 and tried to make it work, but it messes up\ntheming on Lollipop, so unfortunately no.\nOn Sat, Nov 22, 2014, 6:24 AM Ferran Maylinch notifications@github.com\nwrote:\n\nI get this message in Android Studio:\nError:Execution failed for task ':MyApp:processDebugManifest'.\n\nManifest merger failed : uses-sdk:minSdkVersion 9 cannot be smaller than version 14 declared in library com.afollestad:material-dialogs:0.2.1\n\nCan I use your library while still keeping a minSdkVersion of 9?\nThanks\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/56.\n. Issues that were fixed for Gingerbread, but mess up Lollipop theming in the process. It's not worth trying to get it to work. \n\nI don't support Gingerbread in any of my apps, Google is pushing to get rid of it. They've had so many releases since then and people need to stop using it. \n. Release 0.3.0 is available now\n. Woops, thanks \n. Those aren't dialogs, I can't remember the exact term for it. I think\nthey're called Bottom Sheets.\nOn Tue, Nov 25, 2014, 2:00 PM Kenny Goers notifications@github.com wrote:\n\nI started implementing the chooser dialogs using MaterialDialog and\ndiscovered a few things that would be nice to add.\n1.\nChooser in Lollipop \"pops up\" from the bottom of the screen and stays\n   anchored there, you think this might be a \"thing\"? I could add my\n   implementation to the project if that fits...\n   2.\nThe Chooser selects items in the list but just shows them as selected\n   and doesn't launch, then doesn't use the combo approach as is the\n   implementation in MaterialDialog, is this an option?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/60.\n. While I would also find this useful, it would belong in another library. \n. http://www.google.com/design/spec/components/bottom-sheets.html#\n. This is now in release 0.3.1, you can add an attribute to your activity themes (see the README)\n. It already is, the android:colorAccent attribute of the Material theme. If\nyou use AppCompat for backwards compatibility like the sample, it's just\ncolorAccent with no android: prefix.\n\nOn Mon Dec 01 2014 at 10:20:19 AM bakua notifications@github.com wrote:\n\nAwesome thanks, good job. Would it be possible to make button colour\ntheming global as well please?\nThank you.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/61#issuecomment-65089254\n.\n. You're welcome :)\n\nOn Mon Dec 01 2014 at 10:23:56 AM bakua notifications@github.com wrote:\n\nI see, cool thanks :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/61#issuecomment-65089961\n.\n. I'll think about that for the future, but currently I'm basing the appearance on the Material design guidelines which have same-colored action buttons: \n\nhttp://www.google.com/design/spec/components/dialogs.html#dialogs-content\n. The latest release has the ability to customize the title, content, and accent colors in addition to globally applying the dark theme.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. The constructor is package level because you're supposed to construct the class with the Builder. Having a public constructor would make this more confusing.\n. I just pushed a commit to make the constructor protected.\n. I don't experience any performance issues. View recycling isn't necessary since they get added as child views in the layout itself. No re-inflation is done.\n. The sample app has a long list, for reference\n. Hmmm, well a pull request would be welcome. It's a pretty big change to undertake, in both the layout and the code; I'd recommend a RecyclerView rather than a ListView, though.\nI don't have much time to work on this since I'm at college during the week.\n. That's not really a separate issue, that's the same as the issue regarding\ncustom views that shouldn't be in a ScrollView.\nOn Sun, Dec 28, 2014, 2:40 PM Henri Sweers notifications@github.com wrote:\n\nAh. Should note though that my implementation didn't actually use\nrecyclerview, as it was surplus to the requirements and just adds an\nunnecessary transient dependency to the library.\nOn Sun, Dec 28, 2014 at 12:39 PM Steven Schoen notifications@github.com\nwrote:\n\nIf Aidan agrees I'll make a new issue. Only posted it here because of\nthe\nRecyclerView recommendation.\n\u2014\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/afollestad/material-dialogs/issues/64#issuecomment-68218683>\n.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/64#issuecomment-68218705\n.\n. Yeah, I would assume so. ListViews and RecyclerViews are ScrollViews, and\nAndroid doesn't let you nest ScrollViews in ScrollViews.\n\nOn Sun, Dec 28, 2014, 2:44 PM Steven Schoen notifications@github.com\nwrote:\n\nSo that's definitely the cause? I haven't tested it without a ScrollView\nas I just have the library via gradle.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/64#issuecomment-68218814\n.\n. MaterialDialog extends AlertDialog so as far as I know there shouldn't be any issues.\n. Try out the latest code from GitHub and let me know if it works better.\n. Opening more issues is unnecessary.\n\nAs this is an open source library, feel free to attempt fixes yourself. \n. This should now be fixed in release 0.3.2.\n. The latest Play Store demo is not up to date. It takes over an hour for updates to go live.\n. It's 16dp on both the top and bottom when there's no title.\n. Sorry, no; it uses the Material design guidelines dimensions.\n. There's no Material guidelines for progress dialogs, but if you use AppCompat v7 in your apps the progress dialogs will be materialized (in terms of the progress indicator).\n. android:colorAccent of the stock Material theme, colorAccent of the AppCompat Material theme. These are the attributes that affect styling throughout your app, such as checkboxes, switches, EditTexts, etc.\n. Are you using the correct context for the ProgressDialog constructor? It needs the Activity context, or a ContextThemeWrapper with a theme that contains the attribute. Using getApplicationContext() doesn't carry theme attributes.\n. Yeah, it works for me, in Cabinet for example.\n. https://play.google.com/store/apps/details?id=com.afollestad.cabinet\n. There wouldn't be a point of making a custom ProgressDialog since it would be pretty much identical to the stock one. There wouldn't be any easy way to theme the progress indicator other than what the OS does with the colorAccent attribute.\n. Changing the progress bar's theme color will be a feature in the next release: https://github.com/afollestad/material-dialogs/commit/92eac3e5541f4066a52eaf496ed75c82d28c5af2\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. I don't quite see what the problem is.\n. Oh the way you explained it was that the items are still selected after screen rotation.\nYou would persist selections the same way you save states in other Fragments or Activities, using onSaveInstanceState and retrieving it when the Fragment is recreated.\n. This isn't a library problem, this is a behavior of Android in general\n. Hmmm, I'm not able to reproduce that.\n. Is there a reason you chose not to use RecyclerView? It would be smoother and simpler than a ListView, but it looks good\n. I've noticed wrong padding used in a few places but I'll have it fixed.\nOtherwise it looks great, thanks\n. Well the one that I just noticed was below the list, there should be 16dp between the content and action buttons, but there was 24dp.\nI'm fixing the space above the list view when there's no title, too.\n. There was one logic error too :) 0.3.2 should now be available on Gradle, it may take a minute for Android Studio to see that it's live\n. Turns out there was actually an issue created from the latest code, for whatever reason Gradle doesn't want to generate Javadoc while uploading to Bintray which prevents the entire build cycle from finishing. I'll have to look into it.\n. I'll see if that's it. Out of nowhere, the sample app starting crashing even though nothing was changed, so there's yet another thing to fix before I can publish it :o\n. Got that fixed, one last thing before it can be published: the MaterialDialog class wasn't updated to display the divider for the ListView, since canContentScroll() wasn't updated to detect it.\nThe update will be up very soon.\n. Yeah, if the content is scrollable a divider is supposed to be displayed. The wifi connection dialog and ringtone selection examples on that page are examples.\n. Alright, 0.3.2 should finally be available via the Gradle dependency\n. Someone did this before and it messed up theming on Lollipop. I'll check it\nout in a bit though.\nOn Tue, Dec 2, 2014, 11:29 AM Phascinate notifications@github.com wrote:\n\nWow, nice job! Looks great. Hope he adds compatibility for it. I still\nhave friends who use my app on API 8 (sad I know) and this would make\nthings a whole lot easier.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/pull/73#issuecomment-65269540\n.\n. Awesome, thank you\n. I have to fix a compatibility error, ?android:selectableItemBackground can't be used on API 8.\n. Fixed it, 0.3.3 is now available, the sample will be on Google Play in an hour or so\n. Oh right, fixed!\n. Where specifically do you mean there's a divider?\n\nHaving one above the action buttons when the content is scrollable is\nintended.\nOn Tue, Dec 2, 2014, 11:23 AM Phascinate notifications@github.com wrote:\n\nHi! Love the library. I've noticed that in a recent build lists have a\ndivider between them. The sample app on the Play Store doesn't have a\ndivider, but the sample APK here on Github does. It's probably just a very\neasy to fix issue.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/74.\n. Oh I didn't see the image until now, I'll look into it\n. Fixed\n. That's not part of the Material guidelines so you'll need a custom adapter. . I don't see that Gradle dependenxy there on my end. \n\nAnd there won't be much of an issue with those Google libraries changing anything drastically. They get minor updates frequently. \n. Weird, I just checked that and didn't see it. But just saw and removed it;\nsomeone must've added it in a pull request or something.\nGenerally, problems that would occur with libraries are large change in\nbehavior or deprecation of methods. That's very unlikely with AppCompat,\nand v13 support. I've had to increment minor versions at least 3 times with\nthem, so it's easier to use + right now.\nOn Wed, Dec 3, 2014, 10:59 AM Tolriq notifications@github.com wrote:\n\nWell :\nhttps://github.com/afollestad/material-dialogs/blob/master/sample/build.gradle\nis your code no ?\n100% of the time you answer too fast and never check things ;)\nAnd minor does not means no problems ... this is Google recommendation to\nnot use +, this is logic to not user + and yet you do not want to follow ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/77#issuecomment-65446152\n.\n. I'm unable to reproduce that, but I also don't use Eclipse. I'd recommend Android Studio. \n. Android Studio 1.0 is out now, and Eclipse ADT is no longer in active development by Google, so you should switch. \n\nhttp://www.androidpolice.com/2014/12/08/android-studio-1-0-officially-released-eclipse-adt-longer-active-development/\n. This would cause issues, since the dialog theme has to explicitly be set to dark (using the method or global theme attribute) even when the app's theme is dark. The primary text color with the dark theme would be invisible over a white dialog.\n. I'll work on that after I'm done with class and homework\n. This is now in release 0.4.0, see the \"Global Theming\" section of the README for details.\n. You currently would have to make a custom version of the library. It follows the design guidelines right now. \n. The native dialogs don't actually follow the design guidelines perfectly on\nLollipop for whatever reason.\nWhere is the padding not correct?\nOn Wed, Dec 3, 2014, 6:09 PM Ray Massung notifications@github.com wrote:\n\nThis should not be closed. Some dialogs present in Google Play Store do\nnot use the same padding as the guidelines. Also the dialog padding is not\nfully correct.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/80#issuecomment-65516136\n.\n. Do you have the latest library code? It all works fine for me.\n\nOn Wed, Dec 3, 2014, 6:10 PM Ray Massung notifications@github.com wrote:\n\nThe latest version of the library is missing package import\ncom.afollestad.materialdialogs.list and is need by the sample app.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/81.\n. It must be, if was added though a pull request. Not by me. And it all runs\nfine.\n\nOn Wed, Dec 3, 2014, 6:25 PM Ray Massung notifications@github.com wrote:\n\nThe package is not in the library that is currently uploaded..\nhttps://github.com/afollestad/material-dialogs/tree/master/library/src/main/java/com/afollestad/materialdialogs\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/81#issuecomment-65517686\n.\n. Oops, I meant it was\n\nOn Wed, Dec 3, 2014, 6:32 PM Aidan Follestad drummer.aidan@gmail.com\nwrote:\n\nIt must be, if was added though a pull request. Not by me. And it all runs\nfine.\nOn Wed, Dec 3, 2014, 6:25 PM Ray Massung notifications@github.com wrote:\n\nThe package is not in the library that is currently uploaded..\nhttps://github.com/afollestad/material-dialogs/tree/master/\nlibrary/src/main/java/com/afollestad/materialdialogs\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/81#issuecomment-65517686\n.\n. You're sure you have the latest code?\n. Like I said, do you have the latest code? The guy who designed the current\nlist implementation might have changed something.\n\n\nOn Wed, Dec 3, 2014, 6:36 PM Ray Massung notifications@github.com wrote:\n\nGo look at the url I posted above... there is no 'list' folder. It is\nmissing\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/81#issuecomment-65518742\n.\n. There shouldn't be any issues with that. MaterialDialog directly inherits the stock AlertDialog; by default, pressing back or touching outside the dialog will close it. The only way it wouldn't do that is if you made the dialog not cancelable.\n. I forgot to note that it works fine with software buttons, I haven't had a device with a hardware button for 3-4 years.\n. The same way the stock AlertDialog does it, with setCancelable(boolean) on the MaterialDialog, or cancelable(boolean) on the Builder.\n\nBy default, it is cancelable so it will close when you press back or tap outside the window.\n. You're welcome!\n. Currently, by manually doing so. \n. See the sample project.\nIt uses string resources and it seems to work fine.\n. Wow, very odd. I'll look into it, thanks\n. Thanks!\nRelease 0.3.6 is now available, this issue should be fixed.\n. @plusCubed good find, thank you\n. Thanks, this is now fixed.\nRelease 0.3.5 of the library has been published.\n. Hmmmm, that's very odd. It works fine in the sample project (for the folder chooser).\n. This should be fixed with the latest repo code. The guy who implemented the new list implementation didn't set the list item selector correctly so the ListView was using the default. The stacked button algorithm has been slightly changed and should hopefully work better.\n. Release 0.4.0 is now available with my fixes\n. How is that any different than a regular dialog? The content will scroll if\nit's long enough. You can set the content with Html.fromHtml() to show HTML\nlinks and formatting. Since it uses a CharSequence rather than a String,\nthat is supported.\nOn Fri, Dec 5, 2014, 8:39 PM Jon Merritt notifications@github.com wrote:\n\nIs there a way to use these dialogs as a changelog? Sorry if its an easy\nanswer. Been searching around and all other options seem like a crazy\namount of code for a simple change log.\nThanks either way. Great lib.\nJon.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/88.\n. @alorma you should use a WebView as a custom view and load HTML, one of the custom view examples in the sample project do this.\n\nEven Cabinet uses a WebView for the changelog, with some extra CSS and padding added to it to make it look good.\n. Although that library does look very nice\n. Well I don't think integrating it is a good idea, adding large components increases the size of the library by quite a bit and makes apps that use it bigger.\nIt's bigger to use custom views.\n. Adding a library dependency into material-dialogs will cause apps that reference material-dialogs to download and include it automatically because the library says it needs it.\nBtw, you shouldn't use older libraries like that, Google has CardView and RecyclerView to replace that functionality. That's why my Cards-UI library is now deprecated ;)\n. Oooh! I misunderstood what you meant. Feel free to make one if you want :)\nBut again, I do this in Cabinet with only a WebView as a custom view:\n\n. @alorma just added ChangelogDialog (a dialog fragment) to the sample project here: https://github.com/afollestad/material-dialogs/blob/master/sample/src/main/java/com/afollestad/materialdialogssample/ChangelogDialog.java\n. It uses changlog.html in the assets folder and dialog_webview.xml in the sample project's layout folder.\n. Like this?\n\n. This is great, thanks!\n. Release 0.4.1 is available now, which includes both of your pull requests :)\n. How did you theme it?\n. It was actually related to list dialogs, it appears. Not themed dialogs. Just tested it on KitKat and it should be fixed now.\n. Found one more issue related to this too\n. Yeah, that's the other stuff I found. It hasn't been published yet\n. Release 0.4.2 is available now\n. If it was possible, it'd be in the README.\nI'll add it to the next release, though.\nOn Sun, Dec 7, 2014, 4:25 PM CallMeBW notifications@github.com wrote:\n\nCould you please give an example for how to preselect multiple items in a\ndialog with multi selection. Thanks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/94.\n. I wasn't on my computer so I totally forgot, but this is already possible. It's in the README and the sample project so you shouldn't really have to ask.\n. https://github.com/afollestad/material-dialogs#multi-choice-list-dialogs\n. This pull request actually lead me to see that there was more than just an issue with icons in singe/multi choice dialogs, there was some other logic errors in my code that are now fixed and in release 0.4.3.\n\nThanks!\n. Unfortunately there's not much I can do about that, the radio button style is derived from your Activity theme. You can change the theme of check boxes and radio buttons in your Activity theme.\n. This may help you http://stackoverflow.com/a/10139809/309644\n. I'm not quite sure what you mean. I technically didn't support Gingerbread, I consider if deprecated. someone else attempted to support it with a pull request.\n. This is now available in release 0.4.4, which includes show/cancel/dismiss callback methods in the Builder.\n. @jforce-dev the next release will include support for this: https://github.com/afollestad/material-dialogs/issues/155\n. 0.5.3 is now available.\n. Good find, thanks!\n. Release 0.4.4 is now available, which includes your fix\n. The action button selector comes from the accent color which is themable, but takes your apps accent color by default like the README says. The list selector should not be changed, list selectors should have a neutral color. The others are not planned to be changeable at the moment. \n. That's for the background, a light gray color. The text color part of it is\nadded through Java code.\nOn Thu, Dec 11, 2014, 10:02 PM Tae Hwan Kim notifications@github.com\nwrote:\n\nThanks for your so fast answer!!\nhttps://github.com/afollestad/material-dialogs/blob/master/library/src/main/res/drawable/md_btn_selected.xml\nIt is using specific color..TT\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/103#issuecomment-66729797\n.\n. Sorry, no, the library is designed to apply Material design across all\nversions of Android. Using blue is more of a Holo design aspect. You could\nmanually change the color of the selected drawable if you really needed to,\nthough.\n\nOn Thu, Dec 11, 2014, 10:06 PM Tae Hwan Kim notifications@github.com\nwrote:\n\nThanks for your quick answer again!!\nI was trying to change all the background and selector color here cause my\napp is using special color for background (little blue color)\nmd_btn_selector => I was hoping if I can set the selector drawable it\nself!!\nThanks Again!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/103#issuecomment-66729996\n.\n. Unfortunately there's no good way to do that. Every adapter stores information differently. Why can you use the dialog's ListView callback?\n\n``` java\nMaterialDialog d = new MaterialDialog.Builder(getActivity()).build();\nd.getListView().setOnItemClickListener(this);\nreturn d;\n```\nJust keep a reference to your adapter outside of the function so you can access it again from the callback later. \n. Oh I see what you mean, you have a Builder instance and not a Dialog instance yet. There's gotta be a point in the Fragment life cycle when the dialog is built. You could even use the onShow listener or something. \n. There's gotta be another life cycle method for when the dialog is built.\nThere's no other way it can be done when you're using a custom adapter with\nits own way of doing things.\nOn Thu, Dec 11, 2014, 10:42 PM Stephan Leuschner notifications@github.com\nwrote:\n\nI can't use it because that is not how DialogPreference works in Android!\nThe actual dialog gets build and show by Google internal code.\nAll I have is ```java\nprotected void onPrepareDialogBuilder(MaterialDialog.Builder builder)\ncallback!\nSo no, you're idea does not work with that.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/104#issuecomment-66731741\n.\n. You can just override showDialog by the looks of it\n\nOn Thu, Dec 11, 2014, 10:47 PM Stephan Leuschner notifications@github.com\nwrote:\n\nThis is from google DialogPreference...\n```\n/*     * Shows the dialog associated with this Preference. This is normally initiated     * automatically on clicking on the preference. Call this method if you need to     * show the dialog on some other event.     *      * @param state Optional instance state to restore on the dialog     /\nprotected void showDialog(Bundle state) {\n    Context context = getContext();\nmWhichButtonClicked = DialogInterface.BUTTON_NEGATIVE;\n\nmBuilder = new AlertDialog.Builder(context)\n    .setTitle(mDialogTitle)\n    .setIcon(mDialogIcon)\n    .setPositiveButton(mPositiveButtonText, this)\n    .setNegativeButton(mNegativeButtonText, this);\n\nView contentView = onCreateDialogView();\nif (contentView != null) {\n    onBindDialogView(contentView);\n    mBuilder.setView(contentView);\n} else {\n    mBuilder.setMessage(mDialogMessage);\n}\n\nonPrepareDialogBuilder(mBuilder);\n\ngetPreferenceManager().registerOnActivityDestroyListener(this);\n\n// Create the dialog\nfinal Dialog dialog = mDialog = mBuilder.create();\nif (state != null) {\n    dialog.onRestoreInstanceState(state);\n}\nif (needInputMethod()) {\n    requestInputMethod(dialog);\n}\ndialog.setOnDismissListener(this);\ndialog.show();\n\n}\n```\nIdea: add function to builder to set custom\nAdapterView.OnItemClickListener.\nThen, when that is set (maybe set it together with adapter in one call, 2\nparams) set this via listView.setOnItemClickListener(MYCALLBACK).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/104#issuecomment-66731913\n.\n. Pull Requests are a separate Git mechanism from comments on Issues\n\nOn Thu, Dec 11, 2014, 11:04 PM Stephan Leuschner notifications@github.com\nwrote:\n\n.../afollestad/materialdialogs/MaterialDialog.java |   23 +++++++++++++++++++-\n 1 files changed, 22 insertions(+), 1 deletions(-)\ndiff --git a/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java b/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java\nindex 7c37fe5..27667f1 100644\n--- a/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java+++ b/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java@@ -71,6 +71,7 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n     private ListCallback listCallback;\n     private ListCallback listCallbackSingle;\n     private ListCallbackMulti listCallbackMulti;\n-    private AdapterView.OnItemClickListener itemClicklistener;\nprivate View customView;\n   private CharSequence[] items;\n   private boolean isStacked;@@ -123,6 +124,7 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n       this.selectedIndices = builder.selectedIndicies;\n       this.autoDismiss = builder.autoDismiss;\n       this.adapter = builder.adapter;\n- ```\n     this.itemClicklistener = builder.itemClicklistener;\nthis.positiveColor = builder.positiveColor;\n   this.negativeColor = builder.negativeColor;\n  ```\n@@ -354,7 +356,15 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n         listViewContainer.setVisibility(View.VISIBLE);\n         listView.setAdapter(adapter);\n- ```\n     if (listType != null) {+        if (itemClicklistener != null) {+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {+                    @Override+                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {+                        if (autoDismiss) dismiss();+                        itemClicklistener.onItemClick(parent, view, position, id);+                    }+                });+        } else if (listType != null) {\n   // Only set listener for 1st-party adapter, leave custom adapter implementation to user with getListView()\n   listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n       @Override\n\n```\n@@ -664,6 +674,7 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n         protected Typeface mediumFont;\n         protected Drawable icon;\n         protected ListAdapter adapter;+        public AdapterView.OnItemClickListener itemClicklistener;\nprivate OnDismissListener dismissListener;\n     private OnCancelListener cancelListener;\n     private OnShowListener showListener;\n@@ -946,6 +957,16 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n             return this;\n         }\n-        /+         * Sets a custom {@link AdapterView.OnItemClickListener} for the dialog's list+         +         * @return This Builder object to allow for chaining of calls to set methods+         /+        public Builder itemClickListener(AdapterView.OnItemClickListener listener) {+            this.itemClicklistener = listener;+            return this;+        }\n+\n         public Builder showListener(OnShowListener listener) {\n             this.showListener = listener;\n             return this;\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/104#issuecomment-66732749\n.\n. Sorry I can't do that with plain text. Pull requests allow me to merge code\nfrom a repo fork with a single click\n\nI don't have enough time between college work and employment work to review\nover comments.\nOn Thu, Dec 11, 2014, 11:06 PM Stephan Leuschner notifications@github.com\nwrote:\n\nI know, but to be honest, I never used that. I don't really use git at all\nfor my stuff.\nAll I do is pull a copy, that is it :-(\nWould be great if you still could apply my patch after reviewing it.\nThanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/104#issuecomment-66732860\n.\n. I'm going to sleep now, though. I'll check further notifications tomorrow.\n\nOn Thu, Dec 11, 2014, 11:09 PM Aidan Follestad drummer.aidan@gmail.com\nwrote:\n\nSorry I can't do that with plain text. Pull requests allow me to merge\ncode from a repo fork with a single click\nI don't have enough time between college work and employment work to\nreview over comments.\nOn Thu, Dec 11, 2014, 11:06 PM Stephan Leuschner notifications@github.com\nwrote:\n\nI know, but to be honest, I never used that. I don't really use git at\nall for my stuff.\nAll I do is pull a copy, that is it :-(\nWould be great if you still could apply my patch after reviewing it.\nThanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/104#issuecomment-66732860\n.\n. Someone else had this issue a couple weeks ago, their code was of sync with the GitHub code. Try cleaning your project or repulling. \n. This would unfortunately cause a lot of compatibility with existing apps that use this library. You could maintain this yourself, though.\n. Isn't this the purpose of the auto dismiss function of the library?\n\n\nOn Fri, Dec 12, 2014, 5:57 AM Spoetnic notifications@github.com wrote:\n\nHey,\ni have the following scenario:\n- Dialog pops up (EditText as content, positive:\"cancel\",\n  negative:\"save\")\n- user changes info in dialog\n- User presses \"save\" and the button becomes disabled while a async\n  call to store the data on a server is made.\n- When the call returns the button gets reEnabled if the connection\n  failed, or at that point the dialog dismisses.\nU used to do this by setting an onShowListener after the dialog was\ncreated, and then overwrite the onclicklisteners of the buttons, manually\ndismissing the dialog when i saw fit.\nBut when I do this with this library, the dialog gets dismissed regardless.\nSo either:\n- I can achieve this scenario another way (intervening that the dialog\n  closes when a button is pressed) or\n- The library should let my onclickListener override the default one\n  that would close the dialog.\nWhat are your thoughts on this?\nRegards,\nJan-Willem\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/107.\n. Awesome, thank you\n. They've been removed from the GitHub source, the next release will include that change\n. I don't call the callbacks myself, the stock AlertDialog does. This is Android's behaivor. \n. There should be, that's part of the Material guidelines.\n. I'm assuming you're using the wrong repository. You need to use jCenter, which is the default repository for new versions of Android Studio.\n. https://bintray.com/drummer-aidan/maven/material-dialogs/view\n. Hmm. You were behind on updates for a few weeks, and you're using Eclipse I see. \n\nGoogle no longer supports Eclipse. But try cleaning the project. \n. Hmmm odd. Sorry, I have no idea.\nOn Sun, Dec 14, 2014, 9:48 AM arpit khurana notifications@github.com\nwrote:\n\nI was and am using android studio. Just switched to the new stable version\nand parallely switched to 0.4.4 from 0.0.8\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/114#issuecomment-66917270\n.\n. It's the same as the stock dialog. MaterialDialog extends AlertDialog. \n. I added a new section to the README since so many cannot figure it out: Dismissing Dialogs\n. You're probably passing a bad context to the builder constructor. \n. It should be an Activity context\n\nOn Sun, Dec 14, 2014, 9:27 AM Nitin Misra notifications@github.com wrote:\n\nI've taken activity context or I've to pass application context?\nOn 14-Dec-2014 8:55 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nYou're probably passing a bad context to the builder constructor.\n\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916523\n.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916590\n.\n. The global context doesn't have any theme attributes that you put in your\napp's theme\n\nOn Sun, Dec 14, 2014, 9:31 AM Nitin Misra notifications@github.com wrote:\n\nSo did i pass to builder, i took a global context object and used\nthroughout the activity, is it wrong approach? Or u need to see peice of\ncode?\nOn 14-Dec-2014 8:57 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nIt should be an Activity context\nOn Sun, Dec 14, 2014, 9:27 AM Nitin Misra notifications@github.com\nwrote:\n\nI've taken activity context or I've to pass application context?\nOn 14-Dec-2014 8:55 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nYou're probably passing a bad context to the builder constructor.\n\nReply to this email directly or view it on GitHub\n<\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916523\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916590\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916616\n.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916740\n.\n. Yeah\n\nOn Sun, Dec 14, 2014, 9:36 AM Nitin Misra notifications@github.com wrote:\n\nWhat would u suggest? Should i pass myactivity.this as a context to\nbuilder?\nOn 14-Dec-2014 9:02 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nThe global context doesn't have any theme attributes that you put in your\napp's theme\nOn Sun, Dec 14, 2014, 9:31 AM Nitin Misra notifications@github.com\nwrote:\n\nSo did i pass to builder, i took a global context object and used\nthroughout the activity, is it wrong approach? Or u need to see peice\nof\ncode?\nOn 14-Dec-2014 8:57 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nIt should be an Activity context\nOn Sun, Dec 14, 2014, 9:27 AM Nitin Misra notifications@github.com\nwrote:\n\nI've taken activity context or I've to pass application context?\nOn 14-Dec-2014 8:55 pm, \"Aidan Follestad\" \nnotifications@github.com\nwrote:\n\nYou're probably passing a bad context to the builder constructor.\n\nReply to this email directly or view it on GitHub\n<\n\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916523\n\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916590\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916616\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916740\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916772\n.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916882\n.\n. Sorry I'm a full time college student, I don't have time right now.\n\nOn Mon, Dec 15, 2014, 10:54 AM Nitin Misra notifications@github.com wrote:\n\nSome problem with stacked buttons i think, I'm attaching two screens where\nin normal buttons my conditional statement works good, but when the\ncontents is large and stacked button comes in action the conditional\nstatement fails any idea? or u want to see the code?\nOn 14-Dec-2014 9:08 pm, \"Nitin Mishra\" nitinmishra27@gmail.com wrote:\n\nI'll give it a try, and ask u for further help, btw I'm very thankful for\nyour work.\nOn 14-Dec-2014 9:07 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nYeah\nOn Sun, Dec 14, 2014, 9:36 AM Nitin Misra notifications@github.com\nwrote:\n\nWhat would u suggest? Should i pass myactivity.this as a context to\nbuilder?\nOn 14-Dec-2014 9:02 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nThe global context doesn't have any theme attributes that you put in\nyour\napp's theme\nOn Sun, Dec 14, 2014, 9:31 AM Nitin Misra <notifications@github.com\nwrote:\n\nSo did i pass to builder, i took a global context object and used\nthroughout the activity, is it wrong approach? Or u need to see\npeice\nof\ncode?\nOn 14-Dec-2014 8:57 pm, \"Aidan Follestad\" \nnotifications@github.com\nwrote:\n\nIt should be an Activity context\nOn Sun, Dec 14, 2014, 9:27 AM Nitin Misra \nnotifications@github.com\nwrote:\n\nI've taken activity context or I've to pass application\ncontext?\nOn 14-Dec-2014 8:55 pm, \"Aidan Follestad\" \nnotifications@github.com\nwrote:\n\nYou're probably passing a bad context to the builder\nconstructor.\n\nReply to this email directly or view it on GitHub\n<\n\n\n\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916523\n\n\n\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916590\n\n\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916616\n\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916740\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916772\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916882\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916923\n.\n\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-67025646\n.\n. This is not published to jCenter yet, it's only in the GitHub code.\n. Well the Gradle dependency, it's using Maven in the background but you don't really see that when you're using the default repo in Android Studio. But yeah, updated my comment.\n. Release 0.4.5 is now available\n. @AOrobator why would you manually do that? That's internal code. Read the README or look at the sample.\n. It's not an issue with the library though, there's plenty of documentation that answers his question.\n\nMaterialDialogCompat.Builder has methods for setting listeners to individual action buttons like the stock AlertDialog.\n. I solved this issue by making the stock AlertDialog's getButton() method actually work as intended. It's still considered deprecated but it will work. The next release will include this, which should be in a few minutes.\n. Release 0.4.5 is now available\n. @Dfmarulanda \nhttps://github.com/afollestad/material-dialogs#misc\n. @Dfmarulanda yeah, the misc. section in the README displays the method needed for that.\n. Sorry I have no idea. I don't think it's a library issue. I use this in my apps and no one else has reported it. \n. This is now in 0.4.6\n. This is an old API from 2 years ago that doesn't exist in the code base anymore.\n. There is currently no way to prevent it, there's only a way to force it. \n. Thanks, 0.4.6 is available now\n. See this issue: https://github.com/afollestad/material-dialogs/issues/45\n. Release 0.5.0 is now available, with support for not putting custom views in a ScrollView automatically\n. There's no plans for this.\nSince MaterialDialog inherits AlertDialog, you can use something similar to this:\njava\nMaterialDialog dialog = MaterialDialog.Builder(this)\n         .build();\ndialog.getWindow().getAttributes().windowAnimations = R.style.dialog_animation;\ndialog.show();\n. I'll look at this once I have some free time from college :)\n. It may be more intuitive and less confusing if there isn't two fields that can be used with custom layouts.\nI was thinking that the default scroll functionality could be disabled altogether and left to the library user, or, customView() could take a second boolean parameter that specifies whether or not it should be scrollable. The same variables would be used in the background, but the user would only need to see one method.\n. Oh yeah that's a good idea\nOn Wed, Dec 24, 2014, 2:46 PM Adam Ratana notifications@github.com wrote:\n\nI do like the fact that this library adds scrollview by default - I've had\nto previously add scrollviews to my own custom dialog layouts with the\nAndroid dialogs, so it's very convenient, until it isn't :) If anything I\nthink this will be used in edge cases to display super custom listviews and\nother items which don't behave well when wrapped in a scrollview like the\nnew datepickers etc.\nWhat about customView(View v) -- signature stays at it is, add to the\nbuilder -- applyScrollView(boolean apply) -- default true -- framework can\nthen determine branch on whether or not scrollview is applied, and doesn't\nbreak the builder pattern nor does it break compatibility with existing use?\nI feel a little guilty being the peanut gallery here but this seems like\nit would simplify the API while achieving everyone's goals.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/pull/127#issuecomment-68073634\n.\n. My latest commits include the ability to NOT use a ScrollView with custom layouts, by specifying true or false in a second parameter of customView(). I'm going to test it a little more before releasing 0.5.0.\n\nI based it heavily off this pull request, so thanks for your help.\n. I noticed this too. Unfortunately, from my observations, it appears to be an issue with some devices not respecting padding correctly. \n. I'll take a look at this later today, thanks\n. I'm not able to reproduce this, even back on Android 2.3.7. Using padding in place of margin isn't a good idea since they're treated differently in a lot of cases.\n. This is expected and intended behavior.\n. This is not on jCenter yet so it cannot be retrieved through the Gradle dependency.\n. 0.4.7 became available sometime last night if you didn't already notice\n. You need to have the right styling/theming for radio buttons in the context that you pass to the Builder (which should be an Activity context).\nBy that, I mean in your Activity theme, use the attribute android:radioButtonStyle.\n. Thanks, this is now fixed in the code base, it will be published later\n. You're using single choice with a custom adapter. Single choice means radio buttons, which are not supported with custom adapters.\n. @uzi0espil MaterialDialog extends AlertDialog so nothing is stopping you from using it like you did before.\n. This isn't published on jCenter yet so you won't get it through the Gradle dependency until 0.4.7 is published.\n. 0.4.7 became available sometime last night if you didn't already notice\n. @Aimen7 it's not a request as much as a TODO, since I'm the developer of the library, lol.\n@hzsweers that would be convenient since I don't have too much time to look at it right now\n. @Aimen7 thanks!\nThis issue is now resolved and included in release 0.4.8.\n. MaterialDialog inherits from AlertDialog, so you can choose to do what you want. \nOne of the samples in the sample project use a dialog fragment. \n. If it's in your custom layout, text views aren't touched.\n. Unfortunately, that can't be done. Two parent themes are currently used in the dialog based on whether you use Theme.Light or Theme.Dark.\nIf you're using a stock attribute in your custom layout and it doesn't match the dialog theme, you should be using the inverse version of the attribute instead.\n. This is now included with the latest commit.\n. No explicit support is intended. The light and dark themes should be enough.\nhttps://github.com/afollestad/material-dialogs/issues/100\n. @sheharyarn the next release will include support for this: https://github.com/afollestad/material-dialogs/issues/155\n. 0.5.3 is now available.\n. Some stuff accidentally got undone during merge, but I manually re-added this in. 0.4.9 is available now.\n. For now I prefer it the way it is. I designed it to work like that and\nthat's how I use it in multiple apps.\nOn Mon, Dec 29, 2014, 8:21 AM Henri Sweers notifications@github.com wrote:\n\nThe current multichoice callback implementation is weird.\n- There doesn't seem to be a way to listen in on individual item\n  clicks without forfeiting buttons.\n- Even when you do remove buttons and get per-item clicks, you can't\n  get the index of of the item clicked.\nWhile this makes sense to a degree for the current design, it's not very\nconventional and makes some things impossible. I think it should behave\nmore like stock dialogs in this regard.\n- Pass the index clicked instead of selected indices (if they want the\n  latter, they can always retrieve it with\n  materialDialog.getSelectedIndicies())\n- Always fire the multichoice listener on item clicks\n- If the user only cares about the end result, just have them\n  implement a ButtonCallback and retrieve the selected items via\n  getSelectedItems().\nI'm working on a pull request to fix some things in the compat dialog and\nadd a couple things in the main dialog. If you're open to changing this, I\ncould add this in as well. Let me know!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/147.\n. That would be fine, yeah\n\nOn Mon, Dec 29, 2014, 10:53 AM Henri Sweers notifications@github.com\nwrote:\n\nYou wouldn't even consider at least allowing the user to specify whether\nor not they want the listener to fire every click?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/147#issuecomment-68274524\n.\n. Well like I said before, I designed the callback system the way it is\nbecause for a lot of people, it's easier than what the stock system does.\n\nOn Mon, Dec 29, 2014, 12:30 PM Henri Sweers notifications@github.com\nwrote:\n\nCool, I'll add that in the PR. What about passing an index in the callback\n(and using -1 when it's from clicking \"done\")?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/147#issuecomment-68283593\n.\n. Yep, I'm limited to 500mb of storage\n. I remove less significant versions, not all of them. Eventually I'll have around 100 published versions and space will be more of an issue. \n. Well more than a 100, 12 * 100 isn't much I guess. Lol\n. The new ones won't be deleted anymore, I might have to delete old ones in\nthe future but that shouldn't be noticeable.\n\nOn Mon, Dec 29, 2014, 4:57 PM Henri Sweers notifications@github.com wrote:\n\nAt the very least it would be nice to know which ones are going to be kept\nand which ones will be deleted. This broke our master branch with no\nwarning. 500MB should still be plenty for a 12MB library though.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/148#issuecomment-68312881\n.\n. You've basically become a second developer of this library, lol. This is awesome, thanks.\n. Thanks @hzsweers.\n\nRelease 0.5.2 is available now as a quick fix. @Tolriq \nIt's 2 AM here so I'm going to sleep.\n. This looks good, but md_custom_theme seems unnecessary\n. I had to undo this pull request, there was too many things messed up unfortunately: the ripples on API 21 were removed, some weird selector bugs appeared, and support for using a Drawable instance and not just drawable resource IDs was missing. It shouldn't be too hard for me to do this though.\n. I was able to quickly redo it, I explained here why selector customization was not included: https://github.com/afollestad/material-dialogs/issues/155\n. Release 0.5.3 is now available.\n. Not sure how necessary this would be. If you mean to move them around, that would kind of defy the Material design guidelines.\n. Ohhhh okay. That makes sense. That actually should be the default behavior, I'll try to improve RTL support in the next release.\n. Release 0.5.3 is now available with hugely improved RTL support.\n. There's not much that can be done before API 17. Explicitly setting whether it's RTL or not is a bad idea, since you would then be ignoring all the people who don't use RTL.\n. Hmmm. I haven't run into this issue. Can you clarify?\n. Hmmm, that shouldn't be a recycling issue. The checked states get reset every time: https://github.com/afollestad/material-dialogs/blob/master/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java#L1481\nAny ideas @hzsweers? (he made a pull request recently that redesigned this system)\n. @FrancisCan this is now fixed via a pull request from @hzsweers. The next release will include this fix.\n. Release 0.5.4 is now available @FrancisCan \n. Oddly enough I don't remember actually creating this issue o.O\n. I think I intended it to be this, and was too tired to notice I explained the wrong thing (it's 1:57 am here):\nhttps://github.com/afollestad/material-dialogs/issues/157\n. and/or this: https://github.com/afollestad/material-dialogs/issues/158\n. Appears to be a bug. https://code.google.com/p/android/issues/detail?id=74772\n. Unfortunately it's not that simple. There's more calculation going on for non-RecyclerView scrolling views.\n. It's now implemented. It just needs to be tested.\n. Oh right, awesome thanks\n. Oh, wow, no wonder. Thanks :)\n. Fixed in release 0.5.6\n. Good find, should be fixed in release 0.5.7 :)\n. @msmozafari sorry, one more fix now in release 0.5.8\n. If you the latest update, yes, it should work\nOn Tue, Jan 6, 2015, 4:35 PM Edward McEnrue notifications@github.com\nwrote:\n\nWas this fixed? I'm building the dialog with\n.titleGravity(GravityEnum.CENTER) and it's still not centering it. When I\ntried with titleGravity(MaterialDialog.CENTER)\n'CENTER' could not be resolved as a symbol.\nBtw, thank you for the library, this is the most professional\n(understandable/useful) lib I've used to date\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/162#issuecomment-68947193\n.\n. Are you using version 0.5.7 of the library?\n. There was a fix for that earlier today\n. Sorry, no. That's not what this library is designed to do.\n. You must not have paid attention to what he did to fix this very well :P you need to use the MaterialDialog class constants for gravity rather than the Gravity constants. They're are equal to 1, 2, and 3 and are converted to gravity constants at runtime. \n\nThe gravity fix from earlier came from another issue reporter, who reported it as fixed. No testing needed. \n. It's 3am here so I'll respond to anything else tomorrow. \n. @Tolriq he's right.\n. @Tolriq I wasn't wrong with what I said. It was 3am, I was laying in bed, I had fixed it earlier and someone told me it was indeed fixed.\nI'm almost 20. Old age doesn't excuse being an ass hole in public. I'm close to blocking you from the repo.\n. @Tolriq you're the only one. Blocked.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.6.3.1\n. Someone else reported this too. You have the wrong version. \n. Didn't know about provided dependencies. That's pretty awesome. \nThanks. \n. Android Studio gives you warnings if you do that. There's lots of reasons not to do that. \n. Sorry, I had a few complaints that I was using a +. It's insecure to use that.\n. Awesome, thanks\n. Release 0.5.9 is now available\n. @hzsweers @teslacoil https://github.com/afollestad/material-dialogs/issues/175\n. @hzsweers I figured out why there's no selector. Before it was explicitly set to the list item layout backgrounds. I removed that because I thought they were set via code. Now that I was going through and adding customizable selectors, I found and fixed the issue.\n. @hzsweers try out the latest code, it's working for me\n. I haven't found a way to not make it full screen, other than explicitly setting a width to the layout (rather than match_parent), using wrap_content breaks a lot of stuff. Some experimentation needs to be done with this. \n. Do you have any ideas?\nThis would be a good thing to have in release 0.6.0\n. @hzsweers oh yeah, true, I'll wait until I've verified that the other issue is fixed\n. @hzsweers that sounds like it would be a good solution\n. Oh yeah, looks good to me\n. I'll close this for now\n. Sorry, I'm not really sure. It works out of the box for me with Android Studio. As long as you're using jcenter there shouldn't be any issues. \n. It sounds like you put the dependency string in the wrong place if it can't find 'compile'\n. This issue has nothing to do with the library. \nYou should be using the show and dismiss listeners for this rather than butto callbacks. \n. Just an FYI  guys, there's a way to do syntax highlighting on GitHub so that your code formatting doesn't get messed up, lol: https://help.github.com/articles/github-flavored-markdown/#syntax-highlighting (you can specify Java specifically).\nBut yeah, there's various ways to do it, I believe the comment above is what I use in a few of my production apps. \n. The upcoming release will have a built in dialog among lots of other things: https://github.com/afollestad/material-dialogs/commit/1ccca94bd0cac6601901f88d2a3d0c8b55f91cfe\n. Good idea. This is now in the code and will be included with the next release.\n. Release 0.6.0 is now available\n. @teslacoil @hzsweers once this is repaired, I'll push 0.6.0\n. Release 0.6.0 is now available\n. It had before but I pulled support cause it broke stuff. \n. This is not a bug, just the design. The selectors are changed via code based on the theme. \n. Well setting a static color to a button would be a bad idea, that would disable the selector states. \nI'll add selector theming capabiltiies in the next release. \n. This will be in the next release. Note that you will want to copy the default selectors, with their insets and padding, into your custom one. Otherwise they will not work correctly.\n. You must have the wrong version, it's definitely there\n. Release 0.6.0 is now available\nThanks @teslacoil and @hzsweers!\n. ButtonCallback optionally can handle all 3 actions, any combination of them. Simple callback was just the positive action. \n. I forgot to mention that the non ButtonCallbac interfaces are deprecated \n. It wouldn't be any different from the stock progress dialog, so it would be redundant\n. Well, MaterialDialog is intended to act like an AlertDialog which is why it inherits from that. Google gives users the choice on whether or not they want to embed dialogs in a DialogFragment. It's very easy to do with the existing MaterialDialog implementation.\n. I just don't think it's very necessary.\nThere's also an example of using the library with DialogFragments in the sample project (for the folder chooser).\n. Is callback not working for you? There's multiple examples of how you handle button callbacks in the README and sample. \n. I don't know off the top of my head, but there's no reason it wouldn't work as far as I know\n. @forlayo what? He didn't make this library \n. @forlayo what he mentioned should work. But why are you using ActionBarSherlock? AppCompat is a much newer and better replacement that uses Material design. \n. This is now available in release 0.6.1: https://github.com/afollestad/material-dialogs/releases/tag/v0.6.1\nSee the 'Themed' dialog in the sample for an example of how it's done.\n. Same way you do it with an AlertDialog. You can use cancelable(false) on the Builder or setCancelable(false) on the MaterialDialog.\n. Currently, a custom adapter is the only way to do so \n. That isn't how dialog fragments are used. Look at Google's documentation, you don't manually show dialogs, you return build() in onCreateDialog(). \n. There's also an example in the sample project. \n. https://github.com/afollestad/material-dialogs/issues/188#issuecomment-70121212\n. You've tested this thoroughly, correct? I'm unable to test it from where I am right now\n. Alright awesome, thank you\n. Release 0.6.1 is now available: https://github.com/afollestad/material-dialogs/releases/tag/v0.6.1\n. This issue came up after I began caching selectors, which I added in order to optimize a lot of stuff and prepare for the ability to customize selectors which will require caching variables. \n. @hzsweers I can't remember if it was you who implemented the inset button selectors, but sometime around when that was implemented, these issues started coming up if I changed anything \n. @hzsweers damn, I can't seem to remember who it was. \nAnd hahaha, funny\n. I think this issue may've had something to do with the fact that all buttons were using the same Drawable selector instances (since objects are held as references rather than literal values and they're all set to those two selectors). I got rid of the newer selector caching, for now. Custom selectors for specific buttons will have to be implemented in a different way.\n. This was recently added, actually. It shouldn't be removed. I just haven't\nsolved why it causes that weird behavior yet.\nOn Thu, Jan 15, 2015, 5:33 PM Marius Muja notifications@github.com wrote:\n\nCaching the selectors leads to the undesired behavior that when clicking\non a button, another button (who's selector was cached) may be shown as\nselected.\nYou can merge this Pull Request by running\ngit pull https://github.com/mariusmuja/material-dialogs selector_cache_fix\nOr view, comment on, or merge it at:\nhttps://github.com/afollestad/material-dialogs/pull/192\nCommit Summary\n- Do not cache selectors\nFile Changes\n- M\n  library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java\n  https://github.com/afollestad/material-dialogs/pull/192/files#diff-0\n  (55)\nPatch Links:\n- https://github.com/afollestad/material-dialogs/pull/192.patch\n- https://github.com/afollestad/material-dialogs/pull/192.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/pull/192.\n. This is related: https://github.com/afollestad/material-dialogs/issues/191\n. Like that issue mentions, being able to cache this variables is vital to upcoming features. There's no obvious reason why it would mess up the selectors to store them.\n. Cool, thank you\n. Taking note for myself or others to see later:\n\nAnother way to reproduce this is if you press the \"...\" list item in the Folder Selector of the sample project. The list will become gray for a second or two before refreshing.\n. @virsir let me know if this bug still exists in release 0.6.1\n. I can no longer reproduce it so I'm closing this issue.\n. Well there's not nearly enough here to know why it wouldn't work\n. This isn't an issue of the library itself so I'm closing this. \n. I'm assuming this is in a custom view since Material Dialogs doesn't use anything related to \"Flat Button\"?\nSee the sample project for how this is done. \n. You mean it needs padding? You can do so manually through your layout. I don't consider anything to be wrong in the library related to this.\n. Trying it out? It's in the sample project, and I use it in personal apps. It gets plenty of testing.\nThis library is not at version 1.0, it's a beta library. You should expect changes. I had complaints that I was explicitly setting padding around custom layouts, custom layouts should have the flexibility to have custom padding. It is not wrong.\n. Actually, there's two. The web view and color chooser example both DO NOT use a scroll view. \n. Just so you know, I did not make this change myself. The developer of Nova Launcher, Kevin Barry, did it. I side with his decision.\n. However, I do see what you're talking about with the layout glitch. That's very odd.\n. Looks like it's related specifically to the fact that the library sets padding to your custom view itself. EditTexts generally do not pad themselves correctly, I think Kevin must've changed how this works a bit.\nAs a temporary work around, you can wrap your EditText in a FrameLayout so the parent view gets the padding.\n. Sorry for the misunderstanding.\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.1.1\n. Awesome, no problem!\n. I don't think that's necessary or a good idea since that doesn't follow the Material guidelines \n. The radio buttons are controlled by AppCompat, the colorAccent attribute. Material dialogs can't control that past styles.xml\n. The newer algorithm for this was implemented via a pull request: https://github.com/afollestad/material-dialogs/pull/190\n@mariusmuja could you possibly look into this?\n. Release 0.6.1.3 is now available and the Gradle dependency is updated.\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.1.3\n. Awesome thanks\n. Awesome, thanks\n. 0.6.1.4 is now available\n. Had to skip up to 0.6.1.5 due to issues with 0.6.1.4\n. This is now in the latest code, it will be included in the next release\n. 0.6.1.4 is now available\n. Had to skip up to 0.6.1.5 due to issues with 0.6.1.4\n. There's not much I can do about that, sorry.\n. Hmm I kinda see what you mean now; it's actually noticeable with the \"Folder Chooser\" example in the sample project. This'll have to be looked into more.\n. I improved the lag a bit by recycling views in the ButtonItemAdapter used in the sample project.\nIf you're using your own adapter, make sure you're recycling views.\n. This is now in the repository: https://github.com/afollestad/material-dialogs/commit/bc3b3b3955f79ad34e14b51a2d3498bfb24ee8f9\nIt will be included in the next release.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.1.6\n. This was further improved in the latest release.\nhttps://github.com/afollestad/material-dialogs/releases/tag/v.0.6.2\n. One more update to how this all works:\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.2.1\n. Unfortunately I start class again tomorrow but I'll work on this when I have a little time\n. One more update to how this all works:\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.2.1\n. Could you possibly look at this too? https://github.com/afollestad/material-dialogs/issues/219\nAnd thank you\n. I realized that it might've been easier to put the TTF files back in for Roboto and Roboto Medium, and always use them unless the disableCustomFonts() method is used. That way better backwards compatibility is maintained. \n. Should be in the latest commit now, but I gotta test it after class.\n. This was accidentally undone in a recent commit that removes default\ntypefaces, it's coming back\nOn Mon, Jan 26, 2015, 5:48 AM Babelia13 notifications@github.com wrote:\n\nThe current style for the dialog title is not the same which is specified\nin official documentation:\nhttp://www.google.com/design/spec/components/dialogs.html#dialogs-specs.\nI think the correct style can be consulted in the typograpy section of the\nmaterial design documentation (\nhttp://www.google.com/design/spec/style/typography.html#typography-standard-styles).\nSpecifically, it is title style, with \"Medium 20sp\" style.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/219.\n. One more update to how this all works:\n\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.2.1\n. I'll try to work on this when I have time aside from college classes.\n. I actually don't think it's necessary to change this, the typeface(Typeface, Typeface) method still works fine; I just undeprecated it. \n. This isn't an issue with the material-dialogs\n. Weird, nothing is done to explicitly change focus of buttons from my code. How often would that be an issue though? Generally a dialog should be dismissed when the positive action button is pressed.\n. It shouldn't, very weird that it does\n. Yeah there's not much I can tell from that, unfortunately.\nOn a side note, you don't need to make a call to title() or content() if\nthey're empty. Neither is required. You also don't need to use build() and\nthen show() unless you use the MaterialDialog instance. You can immediately\ncall show() like a lot of the examples in the README and sample project do.\nOn Wed, Jan 28, 2015, 10:21 PM Viswanath L notifications@github.com wrote:\n\nMaterialDialog dialog = new MaterialDialog.Builder(this)\n.title(\"\")\n.content(\"\")\n.positiveText(\"Agree\")\n.cancelable(false)\n.negativeText(\"Diasagree\")\n.callback(new MaterialDialog.ButtonCallback() {\n@Override https://github.com/Override\npublic void onPositive(MaterialDialog dialog) {\n// Code\n}\n@Override\n                public void onNegative(MaterialDialog dialog) {\n                    // Code\n                }\n            }).build();\n            dialog.show();\nThis is the code.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/223#issuecomment-71967076\n.\n. I have a feeling that is has something to do with the fact that I recently made the buttons focusable so that users with a physical keyboard can navigate them without a touch screen. Not sure why the focus would be changed automatically, though.\n. Just so you know, this is how you do syntax highlighting with markdown (not indents) ;) https://help.github.com/articles/github-flavored-markdown/#syntax-highlighting\n\nBut, I'm not able to find away to produce this currently.\n. I can't reproduce this so I'm closing it\n. Use a custom view and hide the dialog title by not specifying one \n. See the \"Themed\" dialog in the sample project.\nbtnSelector() is mentioned in the README too: https://github.com/afollestad/material-dialogs#theming\n. Yeah, there's quite a few issues related to margin and padding on 2.3\n. Just updated your description to apply syntax highlighting and formatting to your code.\nYou can use something similar to this:\n``` java\nMaterialDialog dialog = new MaterialDialog.Builder(this)\n        .title(R.string.title)\n        .customView(R.layout.custom_view_edittext, true)\n        .positiveText(R.string.positive)\n        .build();\nEditText text = (EditText) dialog.getCustomView();\ntext.setText(\"Hi!\");\ndialog.show();\n``\n. Also, if you don't need an instance of aMaterialDialoglike you do here, you can skip usingbuild()and just go right toshow().\n. Done, this is now in the repo and will be in the next release (btnStackedGravity()`).\n. It appears the issue is that white is equal to -1. The library currently interprets -1 as no color set. I'll have to find a better default value.\n. I found a solution, this will be fixed in the next release\n. Thank you!\nIt actually became available in a release last night, no changes have to be made by you to get it work. \n. Sorry, no. This library is intended to be similar to the stock AlertDialog. Just cast your object. \n. Yes you can, see the sample project. \n. Well, first of all, the latest version is not 0.6.2.1.\nThis looks like it's probably an issue with the version of Android you're using. A few older versions don't correctly respect margins, while there's no issues with newer versions.\n. Very weird. It works fine running on my Nexus 6 with Lollipop:\n\nI have no idea why that would happen.\n. Wow, very weird.\nOne of my apps (Cabinet) uses that attribute in order to make the navigation drawer overlap the status bar. Cabinet's dialogs work fine. You must be setting the attribute in a weird spot.\n. Those attributes get applied to every view in your entire app. E.g. if you set android:background there, it would get applied to every view the user sees. fitsSystemWindows belong elsewhere, such as on views in your layouts.\nNo problem!\n. Well if it happens at line 764, you must have an old version of the library, cause that's not what exists at line 764. But I'll look into it elsewhere.\n. This will be in the next release.\nhttps://github.com/afollestad/material-dialogs/commit/63fa5124f8a25cbaa15b2daab4505424b5b8f513\n. This will be published very soon\n. 0.6.2.4 is now available.\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.2.4\n@sagilo \n. This looks great, thanks\n. I cleaned up a lot of code, and switched around how the PreferenceActivity works. It now inherits ActionBarActivity so it receives the correct theming, and uses PreferenceFragments. The sample project APK is updated and will be on Google Play, and release 0.6.2.4 is now available through the Gradle dependency.\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.2.4\n. I'll look into it, thanks\n. I think this is now fixed: https://github.com/afollestad/material-dialogs/issues/252\nIt will be in the next release.\n. It wouldn't be different enough from the stock dialog. They'd be basically identical so this isn't necessary.\n. Oh yeah, good point\n. Done\n. Release 0.6.3.0 is now available\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.3.0\n. This is now done and will be in the next release\n. Release 0.6.3.0 is now available\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.3.0\n. Thanks for finding this, it will be fixed in the next release\n. Release 0.6.3.0 is now available\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.3.0\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. That's a different system component that isn't a dialog, that would belong in a different library. \n. Hmm, I don't think it's Lollipop specific, all that I use is Lollipop\n. The original issue here has actually been reported 3 times before but I'm never able to reproduce it myself on any version of Android.\n. Hmmm, I'm not able to reproduce this issue on API 17 or 21\n. Not on API 16 either. I only use API 21 with physical devices (my old Nexus 5 and my Nexus 6). I tested API 16, 17, and 19 with emulators and it works fine.\n. If I force stacking in Cabinet (which uses the Gradle dependency), the result is this on Lollipop:\n\n. Hmm, weird, it happens with that test project.\n@hzsweers any idea why this would happen? It works fine in my apps but not in new projects. \n. This is very weird.\n. The gravity and/or text alignment is set in the code, not the layout.\nThey have to be match parent so the entire span of the dialog is clickable where they are.\n. Really? It shouldn't, since they are overrided at runtime from MaterialDialog.java\n. Oh wait! I think I know why!\nGravity is only used on certain API levels, text alignment is used on API levels where it's supported (newer ones). Thus the gravity is messed up on newer Android versions because gravity is actually not reset when text alignment is.\n. So removing it from styles would indeed be a valid fix, so there's no default value.\n. So it would probably be better to remove text alignment altogether and just use gravity. Using text alignment was added via a pull request quite a while ago, I thought it had worked back then oddly enough.\n. Text alignment does too, it's a newer API so there's no way it wouldn't (RTL support came with Jellybean).\nSee https://github.com/afollestad/material-dialogs/blob/master/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java#L344\n. This should hopefully be fixed now with the latest commits. It won't go live as a release until it's tested a bit more.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.6.3.1\n. I actually didn't intend to support API 10, someone else did it through pull requests (twice, the second time after I removed support). Gingerbread and below tend to have issues correctly respecting margin and padding.\n. Yeah, I agree.\n. Not sure there's much I can do about this unfortunately. \nManually creating progress bar drawables myself would not be efficient.\n. Good idea, didn't think of using a color filter\n. This can actually be applied to both the indeterminate drawable and the regular progress drawable, it works for both surprisingly. It will be in the next release.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.6.3.1\n. This will be even more customizable with the next release: https://github.com/afollestad/material-dialogs/commit/92eac3e5541f4066a52eaf496ed75c82d28c5af2\n. Thank you\n. Hmmm, setting center gravity to the title is working for me on 4.4.4:\n\n. This should hopefully be fixed now with the latest commits. It won't go live as a release until it's tested a bit more.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.6.3.1\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. Fixed, will be in the next release\n. https://github.com/afollestad/material-dialogs/releases/tag/0.6.3.1\n. This seems like an unnecessary class to have.\nThank you though.\n. The same way it's done with a stock Alert Dialog\n. That's what typeface(Typeface, Typeface) is for\n. I actually already pushed these changes, lol. Thank you though.\n. I don't it's necessary to have a feature for that. A custom view can be used.\n. Currently, this is intended behavior\n. Done https://github.com/afollestad/material-dialogs/commit/921e17c89275578847d13d9983aceb59012a132b\n. Release 0.6.3.2 is available now.\n. Unfortunately there's not much I can do about this.\nThis is an AppCompat issue on lower API levels.\n. Also, you can use AVD or Genymotion to test lower API levels.\n. @teslacoil that shake issue is still there.\nI came across it while creating a FAQ dialog for Moonshine icon pack's redesigned dashboard (which I'm helping the dev out with).\nIt seems as though there's an infinite redraw loop going on here or something.\n. If it doesn't shake, then it seems to move up for a second, and then move down once measured.\n. Well at the moment, it's noticeable with the library's sample project (the folder chooser).\nIt feels very laggy, and if the title divider appears for the first time it pushes the content down after 1-2 seconds.\n. @teslacoil actually, here's a good example. It's noticeable if you tap the \"FAQ\" option. When you tap to expand items in that dialog (more so when you do it a few times), the dialog lags and skips around: https://drive.google.com/file/d/0B3ztrEIRfGuCTDZEWEVlSHJkeUU/view?usp=sharing\nIt's definitely an issue with the tree observer causing padding changes.\n. The recent pull request didn't fix this, it messed up some spacing in the process.\nI undid it.\n. It looks like the major issue now is that padding is invalidated in onShow() of MaterialDialog.java. There's a short delay from when the dialog actually shows, and when the OnShow callback is invoked by the Android framework.\n. Awesome, sounds good. Whenever that's done, I will push another release along with the new progress dialog theming stuff and other tweaks.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. Fixed https://github.com/afollestad/material-dialogs/commit/a20241b6d15c1c4b54e83d5d915ce1336e7ce138\n. Release 0.6.3.2 is available now.\n. So, basically, dialogMessage should be displayed too. Lol\n. Done https://github.com/afollestad/material-dialogs/commit/7e4ac46a412f9c663957e458c66744acf6d314c8\n. Release 0.6.3.2 is available now.\n. If it was possible, it would be the same as an alert dialog. \n. Sorry, no. This library is designed to make dialogs that match the design guideline specs. \n. Hmm, that's very weird. I switched around the positive text for one of the dialogs in the sample project to use a longer string, it stills works fine for me.\n\n. Just a tip, there's a way to do syntax highlighting that doesn't involve indentation ;) I updated your comment though. https://help.github.com/articles/github-flavored-markdown/#syntax-highlighting\nBut I know why it's not working for you; if you look at the default selectors used in this library, they reference inset drawables. For an example: https://github.com/afollestad/material-dialogs/blob/master/library/src/main/res/drawable/md_btn_selected.xml\nInset drawables apply padding themselves.\n. Well, I can't really guess. I would need to see a LogCat to understand the issue.\n. Oh, that means you tried to show the dialog before the Activity was actually open or after it closed. You can only show dialogs after a call to super.onCreate() and before the Activity is hidden.\n. There must be something different from what's used in the sample project.\nNow that I look at your code at the top again, I wouldn't recommend using getApplicationContext(), that doesn't contain a window to attach to. You should be passing an Activity object in general. \nE.g.\njava\nnew MaterialDialog.Builder(this)\n       ...\nOr if it's within a callback, e.g. onChangeListeners or something:\njava\nnew MaterialDialog.Builder(ActivityName.this)\n       ...\n. Please try release 0.6.3.2, available now.\n. That isn't an issue with my library, AppCompat is a Google library. It's used by the sample project. Try rebuilding the project. \n. \"Expecting a response\" with exclamation points makes you sound pretty entitled. \nYou should read the README file or look at the sample project. \n. Just like stock progress dialogs and other fields of any app, it gets the color from the colorAccent attribute of your theme.\n. I decided to implement this for the next release: https://github.com/afollestad/material-dialogs/commit/92eac3e5541f4066a52eaf496ed75c82d28c5af2\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. Well, the logcat doesn't help too much. \nDoes the sample project run on your phone?\n. However, the code for the MaterialEditTextPreference was changed around quite a bit in the current code base so it will most likely be fixed in the next release for you.\n. Please try release 0.6.3.2, available now.\n. Release 0.6.3.3 is now available\n. I don't think there's much I can do about that, sounds like an emulator or computer issue. \nIt works fine in emulators on my end. \n. You shouldn't use the title by itself. Stock alert dialogs actually use the title as the content in this case.\n. 6a38309de97dac7dfa17ed6ed014fc3fe33cbb7f\n. Thank you!\nRelease 0.6.3.5 is now available with some improvements to this.\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.3.5\n. Actually, I looked into my code logic more and this is false.\nThere is padding applied to the view at line 217 if wrapCustomViewInScroll is true.\n. There shouldn't be any issues with that. If you look at the dialog layout, the icon ImageView is set to wrap_content, with a scaleType of fitXY.\n. Not quite sure what you mean. The icon and title views are contained in the same parent, if the icon size increases it will push the title over to the right more. \n. Ohh, currently you'd need to modify the dialog layout file, or manually resize your drawable programatically.\nThe stock AlertDialog doesn't restrict the icon size so I didn't either.\n. Release 0.6.3.5 is now available.\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.3.5\n. I'll have to look at this in a bit.\nI noticed with stock AlertDialogs, if you set a title but no message, it displays the title as the message and doesn't show a title. \n. @teslacoil let me know if https://github.com/afollestad/material-dialogs/commit/56d10ce1e7b7d51169254ffad023478f76a456f8 fixes it\n. It appears to be fixed\n. Release 0.6.3.5 is now available.\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.3.5\n. Looks great, it's simple and clean enough to trust, I'll merge it now and test it later. Thanks!\n. I improved this with a maxIconSizeRes() method too\n. Release 0.6.3.5 is now available.\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.3.5\n. That wrapper is meant for compatibility with apps that already use the stock AlertDialog. It's not meant to add features to that. If you want new features you should use this library's APIs. \n. This is now in release 0.6.4.0\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.0\n. I'll take a look at this later, thanks \n. I'm gonna trust that the dialogs are identical for now, I'm gonna have to verify tomorrow\n. Thanks!\n. I didn't include this cause it seems to take away from the minimal feel. I think it works better as a custom view option. \n. I decided it would fit in the project now that there's a progress dialog\nhttps://github.com/afollestad/material-dialogs/commit/1ccca94bd0cac6601901f88d2a3d0c8b55f91cfe\n. I actually already completed the feature before I commented last night :)\nthis upcoming release will be huge\nOn Sun, Apr 5, 2015, 5:03 AM Andrew Lord notifications@github.com wrote:\n\nAh ok excellent. Which of the features mentioned above would you be\ninterested in seeing? I can check out the latest code and re-implement the\nfeature.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/pull/306#issuecomment-89747981\n.\n. Well, generally you use PopupMenu's for this, e.g:\n\n\n. Those are a completely different UI pattern than what this library is designed for. This library extends android.app.Dialog, PopupMenu does not. It would need to go in a separate library, in my opinion.\n. Yeah this is a bit much to write over everything at the moment\n. You might need to research this a bit yourself. Unfortunately I have no way to solve this from the logcat.\n. Does this crash still happen with the latest versions of the library?\n. There's a possibility that release 0.7.0.0 fixes this issue, since large internal parts of the library were pretty much redone. Let me know.\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. https://github.com/afollestad/material-dialogs/commit/8fa6d9715584665bed9567bbcad6b13b02e071d3\n. This is now in release 0.6.4.0\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.0\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.1\n. Thanks\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.1\n. @Silvuz no, it's still the same. \n. You mean the callback has no ID? The current way matches up with what the stock AlertDialog does. \nBut I'll make it so that you can still set your own callback to the ListView directly.\n. You can set a click listener directly now and it won't be overridden.\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.1\n. @askfor this is fixed and will be in the next release\n. The new release is now available https://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.2\n. @askfor this will be in the next release for API 11 and above\n. No problem\nThe new release is now available https://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.2\n. Did you read the docs or look at the sample project?\nSwitching between them isn't a completely necessary feature IMO, I try to stay close to the stock Alert Dialog. \n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.3\n. I wouldn't recommend what @bkraszewski said. The library is on jCenter, which is Android Studio's default Maven repo. \nMake sure you didn't change the default repo or anything. \n. Oops, sorry, I meant I wouldn't recommend that.\n. Good, I was assuming that was the issue.\nYou can actually use both, for future reference.\nGradle\nrepositories {\n    jcenter()\n    mavenCentral()\n}\n. It's not the old dialog, it's adding the EditText twice to the layout. This is any easy fix though. \n. By that I mean the EditText is created and added to the layout. When the dialog is shown again, it gets added to the layout again, but the EditText had already been added to another parent thus this exception is thrown.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.3\n. Let me know if that commit fixes it, I don't have a quick way to test 4.0.3\n. The current version is 22, everything was updated when API 22 was released. They're in the SDK manager. \n. \"Default value\" is the default value specified by the sample project.\nI'm keeping append() because it positions the cursor at the end when the dialog opens, however I will empty the text beforehand to resolve this issue.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.5\n. Thanks\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.5\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.5\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.6\n. @lupajz I don't override backgrounds, windowNoTitle and windowBackground only apply to activities. Material Dialogs defaults the primary/neutral/negative colors to the colorAccent color, but they can be changed through Material Dialog global theming or the programmatic methods.\nMake sure you're passing a themed context (e.g. an Activity) to the Builder rather than a global context.\n. @GHEEV are you using AppCompat to theme your Activity? Styling for radio buttons is derived from your Activity theme during layout inflation. I don't deal with that myself.\nAppCompat also will color your UI controls with whatever your colorAccent attribute is set to in your Activity theme. It's basically a backwards compatible Material theme.\n. @GHEEV I wouldn't expect the fonts there to change below Lollipop. Roboto Medium was introduced as a system font with API 21. Below API 21, it will use Roboto Bold. \n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. I'm hoping https://github.com/afollestad/material-dialogs/commit/024598a196c7e44f1cc1ffd45a6730b30c8607c0 fixes this.\nThanks!\n. I'll need to test it before publishing, I don't want to spam users with unnecessary updates and use up versions too quickly, haha\n. Let me know if the new release fixes it\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.6\n. A full screen dialog is an Activity. \n. Let me know if https://github.com/afollestad/material-dialogs/commit/31618d2191adc7d69b73c09f8dc8c76d7dcf744d fixes this.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.6\n. Feel free to attempt this yourself. I'm on spring break from college right now. \n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.6\n. For now you have to explicitly set the dialog dark theme through global theming or the Builder method. \n. I don't know of any good way to check for a light or dark theme. The accent\ncolors are already retrieved from your theme, the title and content should\nbe.\nFeel free to make attempts yourself. I'm a little busy at the moment.\nOn Wed, Mar 18, 2015, 11:39 AM Paul Woitaschek notifications@github.com\nwrote:\n\nDo you know how to retrieve the necessary values from the AppCompat theme?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/344#issuecomment-83050898\n.\n. Themes are auto detected with the new release: https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. Thanks, but I made this a little easier. It'll automatically apply left/right gravity instead of start/end below API 17.\n\nhttps://github.com/afollestad/material-dialogs/commit/965ab656e522b728a60cc2abb79a4f380dff9602\n. RTL layout support didn't exist on Android until API 17. This is the best work around for pre-Jellybean-MR1.\n. There shouldn't be any issues on API 17+ though. Explicitly having left and right options isn't a good idea, because then those who want RTL support for API 17+ won't have it if they use these.\n. Well, below Lollipop it's necessary.\nIt'll have to be removed for pre-Lollipop selectors by adding custom selectors. I actually do not use my own custom selector on Lollipop (I can't remember if I do below either), I use Android's default.\n. Oh disregard the above, I only use the stock selector for stacked buttons.\n. Well, like I said above, it's not possible to not have the background on pre-Lollipop. For Lollipop, I don't think the ripple will render correctly unless there is a background. So unfortunately I don't think too much can be done about this, other than using a custom action button selector from global theming or the builder that lightens it up a bit.\n. Well, the action buttons aren't actually buttons. They're TextViews with\nrounded inset selectors.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.7\n. It's not much of an issue for a simple sample project. I put it here so I don't lose it. \n. Thank you!\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.4.7\n. I wouldn't completely trust AIDE to work correctly. But that usually happens if a library is referenced twice. \n. Well, not everything the stock dialogs do are correct design-guidelines wise. There isn't enough space between the radio button and text in the stock version, there should be at least 16dp between all UI elements IMO. \nBut I'll look at the other spacing issues, thank you\n. I should add, dialogs should have a top/left/right padding of 24dp, and a bottom padding of 8dp: http://www.google.com/design/spec/components/dialogs.html#dialogs-specs\nI don't think the stock alert dialog is following that, unless my eyes deceive me.\n. I made the list items 48dp in minimum height. However, I confirmed that the other padding dimensions are indeed correct when you match them with the design guidelines specs (I used dspec to generate this spacing/keyline layout):\n\n. Well, the stock list dialogs don't space radio buttons correctly either. Check out this image from the design guidelines:\nhttp://material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7YzI3dnI2ZE5QN1E/components_dialogs_content2.png\n. Personally I think the simple dialogs example is how it should be. I like symmetry and separation.\n. I agree that the link above yours looks ugly though, there's wayy too much space there (http://material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7YzI3dnI2ZE5QN1E/components_dialogs_content2.png).\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.5.0\n. You're using an AlertDialog in your code so it's not related to this library.\nAlso, setting margins from code is a Java issue, not an issue specific to this library either. \n. I implemented a way to do this with the latest commit: https://github.com/afollestad/material-dialogs/commit/1b24402bfe5b622a65e1ed11c43a3cbbf1e25931\nBasically, single choice and multi choice list callbacks will allow you to return false if you don't want selection to be allowed, or true to allow it. There's an example in the sample project to further explain what I mean. \nThis will be available in today's release in a bit.\n. No problem!\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.5.0\n. Sorry, RecyclerViews cause issues. That's why I use a ListView for list dialogs. \nRecyclerViews currently don't measure themselves correctly, thus making the dialog fill the screen. Dividers are shown when it detects the view is scrollable.\n. I should note there's a new version of the library available. But as far as I know, it's not related. Maybe it's because you're using an old version of the support library, app compat, or recycler view. They're all at version 22 since API 22 (Android 5.1) was released a week or two ago. \n. I will be going back to 21.0.3 for now in the upcoming release\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.7.1\n. The other two are fixed, this one is a little harder since PreferenceFragment cannot be used on lower API levels.\n. @Kuitsi I should mention that this isn't a Material Dialogs issue. This is an issue specific to the sample project.\n. Not sure if there's much I can do about this then, I might have to disable the Settings Activity on API 10. The preferences themselves aren't affected, but there's no AppCompat variation of PreferenceActivity (which extends ActionBarActivity) so I have to use PreferenceFragment's inside of an ActionBarActivity.\n. Well like I said above, PreferenceActivity can't be used because it won't work correctly with AppCompat theming. The Activity needs to extend ActionBarActivity.\n. Alright, the latest commit should be a more complete solution.\nThe sample will use PreferenceActivity on API 10 and below, which won't display an action bar due to AppCompat not supporting it. Above API 10, the regular solution (ActionBarActivity with API 11+ PreferenceFragments) will be used. \nThe sample project is a reflection of the library, obviously, but this PreferenceActivity sample is independent from the Material preferences themselves.\n. Nevermind already got it with the latest release\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.6.2\n. Oh sorry, good catch.\nFixed that by using xml-v11 instead: https://github.com/afollestad/material-dialogs/commit/8ac9c0374bd06ee5e15d0aaa99750a6102b3c2d3\n. Cool :) thanks for your bug reports\n. All three of these crash reports are basically the same thing. I'll have a fix in a minute or two.\n. @Kuitsi https://github.com/afollestad/material-dialogs/releases/tag/v0.6.5.2\n. Not quite sure what you mean (this is on a Nexus 6 with Lollipop)\n\n. Are you overriding any global attributes in styles.xml? e.g. fitsSystemWindows?\nBtw, for future reference, you can highlight code: https://help.github.com/articles/github-flavored-markdown/#syntax-highlighting\n. Cause I started developing this library on a Nexus 5 and have a Nexus 6 now, no one else has reported these issues for a while. The last time someone did, it was an attribute in styles.xml messing with the dialog window.\n. Glad I could help, no problem!\n. I see you're trying to fix that XML not showing, GitHub considers that literal HTML. You have to wrap in in syntax XML syntax highlighting (see the link above).\n(I fixed it for you)\n. You're right, I'm almost done with a pretty large change to the library to help with this.\n. In case you didn't see the new release yet:\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.6.0\n. The new release is another massive improvement to layout efficiency: https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. In case you didn't see the new release yet:\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.6.0\n. No problem :)\nOne more: https://github.com/afollestad/material-dialogs/releases/tag/v0.6.6.1\n. @ccrama 0.8.4.2 the current version.\n. @ccrama awesome, great to hear \ud83d\ude00\n. As far as I know there's no way to fix it, dialogs attach themselves to an Activity's Window, if no initialized window is available then the dialog won't be showable/dismissable.\nI'd recommend the workarounds they talk about on that question.\n. I'm assuming you should be using version 22 of grid layout since AppCompat and all the other Google libraries are at version 22? Using different versions can cause compatibility issues.\n. Cool, thanks. They don't update those documentation pages sometimes.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.6.2\n. There's no way for it to automatically know you're list is a single choice\nlist when you're using a custom adapter so it'd have to be done manually.\nIt actually happens before on show since there's a delay before the on show\nlistener is called.\nSee the checkIfListInitScroll() method in MaterialDialog.java.\n. @sreichholf https://github.com/afollestad/material-dialogs/releases/tag/v0.6.6.3\n. Pull request permission? You make a Fork of the repository and make a pull request to this one. No permission needed.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.6.2\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.6.2\n. This is is a duplicate issue. Please search the existing closed issues for an answer. \n. To be more specific: https://github.com/afollestad/material-dialogs/issues/326\n. This will be improved in the next update.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.7.1\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. Thanks\n. Just realized this was incorrect, where you put 'not anymore'.\n. Are you sure? This is the demo app on my Nexus 6 (Android 5.1).\n\n. Hmmm. That may be an issue with Samsung's custom Android skin overriding AppCompat. The progress bar is automatically colored by AppCompat (using the colorAccent attribute in styles.xml). It works on every 5.0+ device I've used. Nothing changed in the sample project's code between 5.0.1 and 5.1, I also started developing and testing this library on 5.0.\n. This is on a 5.0 emulator, also. I suspect your issue is related to Samsung.\n\n. I'll keep this open to see if anyone finds a solution, but as far as I know it's a Samsung issue. There's actually a lot of Samsung-related issues with AppCompat (e.g. apps will crash if they don't use certain Proguard rules).\n. I actually decided to make the progress color customizable (with methods and a global theming attribute): https://github.com/afollestad/material-dialogs/commit/92eac3e5541f4066a52eaf496ed75c82d28c5af2\nI had been using color filters below Lollipop to force the accent color to be applied. It obviously wasn't needed on Lollipop, but it appears to work perfectly on Lollipop and below to dynamically change theme colors on progress bars. I haven't tested it on very low APIs like Gingerbread, yet. But this resolves the issue since it defaults to using the colorAccent theme value.\n. This should be fixed with version 0.7.0.0, you can use widgetColor or the variants of it (or even the global theming attribute).\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. To hide an action button, set its text to null using the setActionButton() method. Changing visibility manually is not reliable. Action button text is null by default unless you set them from the Builder which is what dictates visibility from invalidateActions().\n. Because of how the library is set up.\nHaving that the mask invalidation only in setActionButton() isn't the most reliable either, because a user could still get access to the button from getActionButton() and change the visibility or text manually.\nUsing a mask is better, but there's other cases where the actions will be invalidated, e.g. if a view in the dialog invalidates its layout and causes the tree observer to fire -- There's no efficient way to know if the previous visibility state was set by the user or by the library itself. The only completely reliable way is by setting the text to null.\n. Well, yeah, there must be a better solution. But passing a mask to invalidateActions() won't quite do it since the method is used in 3 other places and could be invoked at any time.\n\n. Actually, no, I take that back. Using a mask might actually fix it completely.\n. I think your solution might work, it'd be a good idea to test it with different cases though. \nMy next class (I'm a college student) is starting now but I'll get back to this later. \n. I'm getting to the bottom of it right now, it's almost ready.\n. This should work perfectly now, I just tested it a bit.\nhttps://github.com/afollestad/material-dialogs/commit/4e37d0bd6c5edd22e9a2b2e4234e5449aa0c4278\n. One more: https://github.com/afollestad/material-dialogs/commit/1bbbd800227227f5f05f66615b8915b4ea97babe\nI'll have an update out in a few hours, most likely.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.7.0\n. I tested it pretty thoroughly. Would you rather have the behavior not work at all for your case? Lol. But yeah it seemed to work perfectly on my end. \nI don't have a lot of time either, I'm a college student and I'm an employed dev. \nUsually I use the sample project with emulators but this specific case didn't apply so I used my own temporary test code. \n. I should add that XDA featured this update today \n. You don't need to call that method if you change button text with\nsetDialogAction(), since it makes a call to invalidateActions() for you.\nThere is no other way. There's no way of knowing when the user changes\nvisibility. If you hide the positive action button, the negative action\nbutton will go over the neutral button until invalidateActions() sets the\nnegative action's LayoutParams.\nOn Tue, Mar 31, 2015, 1:11 PM Max notifications@github.com wrote:\n\nSince I did not lock in the version, it auto updated. I will take a look.\nAfter reading the release notes, if I understand correctly, any change\nwill require call to invalidateActions()... That's better in terms of\nstability of predictability but I am not sure it made the library better in\nterms of usage. Someone could be wondering why nothing happens after\nchanging the visibility but not making the call for invalidateActions()\nthat's my $0.02\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/379#issuecomment-88193458\n.\n. Please use correct indentation and syntax highlighting when posting issues, I updated your comment to fix it.\n\nI'll look into this, thanks for reporting the bug.\n. Currently, if you specify a title but no content, the title will be used as content instead.\nBut, I actually don't think this is intuitive behavior. So I'm going to change how it works.\n. https://github.com/afollestad/material-dialogs/commit/15d92202985dab4b530b8cfb48dd3efe51440d85\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.7.0\n. The Gradle dependency is used in Android Studio:\nhttps://github.com/afollestad/material-dialogs#gradle-dependency-jcenter\n. You don't download the source; you place the string you see in the README inside build.gradle of your app.\nYou may wanna look into how Gradle works, this will only work in Android Studio, also. If you're using Eclipse, it requires extra steps since it's no longer Google's official Android IDE.\n. Similar to this\n\n. Sorry, this isn't the best place to learn how Android Studio works. I'm a busy college student.\nBut yeah, Android Studio will download all of your library dependencies. Where they are doesn't really matter, they're automatically made available to your project. \nIf you want to look at the library code and run the sample, then you can download the entire project and import it as a Gradle project. But if you're referencing just the library, copying and pasting that line and syncing your project is all that's needed.\n. Good to hear, no problem!\n. Were you planning to make a pull request for this? I don't think it's necessary to add all that extra stuff, it's only really necessary to change the text at all if getText() is not null. Otherwise the text would be empty anyways.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.7.1\n. I decided to implement this for the next release: https://github.com/afollestad/material-dialogs/commit/92eac3e5541f4066a52eaf496ed75c82d28c5af2\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n. This is implemented for the next release\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.7.1\n. Well they're supposed to be capitalized, per the design guidelines: http://www.google.com/design/spec/components/dialogs.html#dialogs-content\n. Well, since all of the guidelines pictures show them as capital, it's kinda given. What's the default value of ?android:textAllCaps?\n. False I'm assuming? I don't want to default to it being false.\n. Hmm, well most of my styling stuff that can be done from themes are just theme attributes that you can put in your Activity's styles.xml: https://github.com/afollestad/material-dialogs#global-theming\nI could add a md_buttons_caps attribute or something. It works similar to how AppCompat has colorPrimary, colorAccent, etc. to replace the android: prefixed versions.\n. Actually, I might have a better solution. I should be able to default to true if the user didn't explicitly set the textAllCaps attribute in their Activity theme. This is the same way I load colors and other things from attributes in DialogUtils.\n. Could you check if this does the trick? I'm in class right now (I'm a college student): https://github.com/afollestad/material-dialogs/commit/a261b81e7bbfccd44ee8c57e56814094d6ebe5d5\nIt seems weird to me that the textAllCaps attribute would only affect the action buttons. Wouldn't it in theory affect every TextView inside the Activity layout?\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.7.2\n. You're right, thanks\n. Made the list item font smaller: https://github.com/afollestad/material-dialogs/commit/2a00c167e1872fd139e9df8cf8746b4b9973799a\nThe other values are not wrong. They're from the design guidelines specs and will not be changed.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.7.2\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.7.2\n. Can it access protected members? title and content are both protected TextView members.\nAnother option would be to use MaterialDialog#getView() and access the views with findViewById() (not sure if that library works with that though).\n. I decided you're right that it's a good idea to have getTitleView() and getContentView() though. https://github.com/afollestad/material-dialogs/commit/67b941c1de858c0cb98f103d632a6dda1696daff\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.6.7.2\n. I made the dialog derive the title, content, and list item color from the system attributes by default. But this will cause issues if you use the dark theme for a dialog in an Activity that uses a light theme (the text won't be visible), or vice versa. https://github.com/afollestad/material-dialogs/commit/7a96180c7f51a3152f28fa35d5b2f0b3651343e3\n. It will now adapt based on the theme combination between the dialog and Activity theme, it will use the inverse versions of those two system attributes if needed: https://github.com/afollestad/material-dialogs/commit/8633fc1661df55a3451c99b9122d3024466c0a08\nHowever, for the other stuff (like the font), see this: http://www.google.com/design/spec/components/dialogs.html#dialogs-content\n. To add more details to support the current spacing (if you scroll down a bit, they have specific values that should be used for padding/margin): http://www.google.com/design/spec/components/dialogs.html#dialogs-specs\nThis is what dialogs look like with the latest commit (not in a current release version yet):\n\n. Wow, this looks great. Thanks Kevin.\n. @teslacoil \nHmmm, everything is working great so far. definitely much faster. I found a weird issue that showed up with these changes though (see the stacked button example in the sample project):\n\nIt also appears this PR increased the amount of padding at the top and bottom of the list, I believe it was at 12dp before, I think 8dp or 12dp look better in those locations.\n\nIt's very late here though, so I'll to look at this more tomorrow.\n. Hmm, it's actually kinda weird that that the list padding appeared to change since the layout using 8dp for both. There must be padding coming from somewhere else too.\n. Sorry, one more thing before I sleep. It looks like the minimum width got removed for the action buttons too:\n\nThis was definitely a big step forward. But we should get this and the two other things above fixed.\n(note, the action buttons are green here because I used the color chooser dialog example in the sample project's main activity)\n. The padding between the title and list, and list and action buttons (or list view and dialog borders when there's no title or action buttons), just seems really huge compared to stock dialogs. I know people will complain, lol. http://www.google.com/design/spec/components/dialogs.html#dialogs-content\nCool, sounds good.\n. @teslacoil sorry, another thing to add, it looks like the inset selectors are no longer working and the dialog action buttons fill their space (the button bar should be 48dp, while the buttons are 32dp in height and have margin from the specs in between them). Not quite sure how that's changed in your code, I'd have to study it a bit more. The neutral button also has a lot of start padding.\n\n. Updated your comment to add syntax highlighting.\ndismiss() is a method of AlertDialog (which is at the base of MaterialDialog), so if this is a bug it's a bug with Android's AlertDialog.\nGenerally, any issue with dismissal will be due to the Activity (window) the dialog was attached to no longer being open, or not calling dismiss() on the UI thread.\n. Hmm, I'll have to look into this again more tomorrow. \nThanks for the quick initial fixes too.\nOne solution to make verify measurements are correct is to use the app Keyline Pushing, or the library dspec. Although I guess it's pretty easy to tell by eye if these values are correct or not.\nThe neutral button definitely has too much padding to the start of it though, there's a pretty big offset from the content keyline. There should only be 16dp there. The guidelines do show the big margin values being used above and below the list, but that just looks odd to me for some reason.\n. Copying this image over from the original PR for reference (for the stacked buttons layout issue).\n\n. Disregard, it appears to have went away luckily.\nSounds good, I think that will work best.\n. So it looks like the only major thing left before 0.7.0.0 is this stuff. This is gonna be a very large update with all this new layout and theming stuff that we've implemented.\n. On a side note, you have very nicely formatted comments lol.\nBut I think it looks great in those screenshots, I definitely see what you mean about the whitespace in different situations. It looks very symmetrical now.\n. Somehow #403 stopped the top divider that shows when you scroll down (and the divider above the button bar when the content is scrollable) from working :o\n. Oh odd, well I just fixed some crashes and theme issues via https://github.com/afollestad/material-dialogs/commit/0f6dbba34aef3ab49e3a7f7f060ae66ab83ed020, I'll see if it works now\n. Yep, it works now!\nDo you guys think there's anything else major left to be done before release 0.7.0.0?\n. Yeah, people are discouraged to use RecyclerViews as they force dialogs to be full height anyways. I don't think anyone will really notice it right away, but it'll be a good future fix to make everything perfect.\n. @teslacoil @plusCubed do you guys think we should limit the height of dialogs?\n\n. Hmmmm, yeah that's a good point. Oddly enough, it wasn't as tall before the recent changes for padding fixes. I'm not sure what could've possibly broken this.\nWhere does that crash happen? It's working fine from the folder selector dialog in the sample project. I'm assuming it's in Nova? Currently those are applied for use by the input dialog, the code currently sets them internally when the dialog is built (from the end of DialogInit#init) and redirects the callbacks to user-set callbacks if any. They're used within MaterialDialog to show or hide the keyboard so that you can immediately type in the input field.\n. Yeah someone told me I should make the text size smaller to match stock, I believe I copied what Android's internal dimensions were but they could be wrong.\nI think a workaround for the crash would be to only set the internal dismiss and cancel listeners when the user is specifically using an input dialog, but then that causes some needed logic changes (since the user's set callbacks won't be forwarded, they'll be directly set to the base dialog).\n. Oh, right, I see. I'm currently brainstorming a bit.\nI have an idea.\n. @teslacoil Oooh, good idea. Thanks\nhttps://github.com/afollestad/material-dialogs/commit/99571a5f7473cfcea74da0822be163778b5962dd should fix it\n. @plusCubed not 100% sure that they're currently correct, I tried to match the guidelines (not the dialog guidelines but just general guidelines on title and content text size, which generally use 18sp and 16sp). \nIt does look like the guidelines use 20sp for dialog titles, and 18sp for the content though.\n. Also, there should be 4dp external padding and 8dp internal padding for action buttons, I think what we're currently doing there is correct other than the min width needing to be 64dp.\n\n\n. Alright so now that the divider visibility stuff was fixed, all that's left before the release (as far as I know) is the text size. What'd you guys think? Should we increase the title or content size?\n. Oh, awesome. Yeah that's fine.\nAdam Powell tends to respond rather quickly on Google+, otherwise there's Roman Nurik and a few others. But I think it should be fine for now.\n. Are you talking about the Gradle version or current repo code? This was all completely redone by Kevin Barry. \n. Yeah, although there's still some issues left to fix.\nThe related PRs are https://github.com/afollestad/material-dialogs/pull/392 and https://github.com/afollestad/material-dialogs/pull/396\nThe first pull request has a list of problems I found, however everything is signifantly faster since Kevin implemented a custom root layout and class for the action buttons. There's an open issue for the required fixes also. \n. Ohh sorry I misread what you meant since I read it kinda fast. Sounds good\n. This is working great, I don't think the RecyclerView note will be too much of an issue right now\n. Once that's done, I think we should be just about ready for a release, a very large one at that.\nI pushed two small fixes just now, also.\n. Awesome, thanks\n. I'll take a look at the note later, hopefully I don't forget\n. Oh it's related to RecyclerViews. At the moment people shouldn't really be using RecyclerViews in dialogs anyways; they cause the dialog to be full height because of the way it measures itself and its children.\n. Ohhh, good catch. Using the super constructor with a theme parameter might fix this problem.\n. Can you check if this fixes it? https://github.com/afollestad/material-dialogs/commit/33a400604147a373fc6eccdd65f41fa9bd29a147\nI have to go to class, but I'll get back to this later.\n. Oh yeah, you mean the padding below the action buttons?\n. I wonder if the dialog theme is now somehow overriding the padding @teslacoil's code sets?\n. Oh yeah, good idea, that's a quick change\n. The two previous commits should hopefully fix it now, all inflation is done with LayoutInflaters created with the theme wrapper.\n. Now the action buttons got messed up, lol. It's like taking bricks out of the base of a house.\n. Yeah I should be able to fix that quickly, good catch\n. @plusCubed fixed in https://github.com/afollestad/material-dialogs/commit/048308fced7ac46094f52efe9cd308c3b9fd07c8\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.1.0\n. This is an Android framework issue, it has nothing to do with the library itself.\nYou can't directly use setCancelable(boolean) on an AlertDialog or plain Dialog in a DialogFragment.\n. I'm not using v22 of RecyclerView or the support library yet because they're very buggy.\n. I'll merge it for now but RecyclerView 22 caused crashes for over 350 people in one of my production apps (not related to this library)\n. Thanks!\n. Well, you can put that in a custom view dialog.\nIncluding it in this library will increase the size of it a bit. To follow the guidelines, it's better to match stock views.\nThat's a very cool looking library though, just starred it.\n. This was already in the README and it's no different than an AlertDialog, BTW. \n. show() of MaterialDialog is actually show() from AlertDialog. The other show() is a convenience method from Builder:\n``` java\npublic MaterialDialog build() {\n    return new MaterialDialog(this);\n}\npublic MaterialDialog show() {\n    MaterialDialog dialog = build();\n    dialog.show();\n    return dialog;\n}\n```\nI should note that this structure is exactly the same as AlertDialog and AlertDialog.Builder. This is not new to this library.\n. dismiss() is also an AlertDialog method. This library just builds upon AlertDialog and redoes how the view construction and layout works.\n. I added a new section to the README since so many cannot figure it out: Dismissing Dialogs\n. Try putting android:layout_marginTop='-24dp' on the pink view, maybe a bit less\n. Hmm, I'm in class but @teslacoil or @plusCubed could possibly help in the meantime\n. @MrBrightside29 I cleaned up your code a little bit to use Java syntax highlighting and correct the indentation.\nI'd have to look into that crash a little bit more, but just so you know: rather than using a custom view, you could just use a custom adapter (MaterialDialog.Builder#adapter()), unless there's something special in your custom view that's not a ListView.\n. If I were you, I'd try using dialog.getView().findViewById(int) rather than dialog.findViewById(). getView() returns a direct reference to the view inflated by this library.\n. Great! You're welcome!\n. You need to show the dialog after the Activity and Fragment are both visible. E.g. in onViewCreated or onResume of your Fragment. \nThis isn't a bug of this library. \n. Looks like you didn't use XML code formatting above. \n. Thank you, I'll take a look at this later\n. @FongMi if you're using Android 5.0, that's an API 21 issue. Google fixed it with 5.1 (API 22). Note that it doesn't work below API 21, also.\n. Fixed the dialog theme on API 10\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.1\n. This will be further improved with the upcoming release\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.1.0\n. Well, it's an AppCompat issue.\nIf you're using a different AppCompat version that what the library uses, you need to upgrade your app, or use {force=true} in your app to overwrite the version this library uses.\n. You may wanna learn a bit more about Android Studio if you don't know how Gradle dependencies work. It's in build.gradle.\n. That's not a library feature, that's part of the Material theme on API 21+ or AppCompat for all API levels.\n. Make sure you're passing an Activity context to your dialog builder.\n. Hmm, well there's not really much I can do. That's handled by the Android framework, not me.\nIf you're not using Android 5.0 or above, there might be an issue there.\n. Oh sorry, didn't look at those screenshots long enough (since I'm doing homework). It's very odd that it's not the right color when you're on Lollipop. But like I said, that's handled by the framework so there shouldn't be an issue.\n. No, you'll need to put a TextView in there\n. Wait! I found a bug related to this that will fix this issue\n. ASAP, there's a few other small things going into this release too.\n. Currently the issue here is theme being used for the dialog.\nIn MaterialDialog's constructor:\njava\nprotected MaterialDialog(Builder builder) {\n        super(DialogInit.getTheme(builder));\n        mBuilder = builder;\n        final LayoutInflater inflater = LayoutInflater.from(getThemedContext());\n        view = (MDRootLayout) inflater.inflate(DialogInit.getInflateLayout(builder), null);\n        DialogInit.init(this);\n}\nIn DialogInit.getTheme():\njava\npublic static ContextThemeWrapper getTheme(MaterialDialog.Builder builder) {\n        boolean darkTheme = builder.theme == Theme.DARK;\n        if (!darkTheme) {\n            darkTheme = DialogUtils.resolveBoolean(builder.context, R.attr.md_dark_theme, false);\n            builder.theme = darkTheme ? Theme.DARK : Theme.LIGHT;\n        }\n        return new ContextThemeWrapper(builder.context, darkTheme ? R.style.MD_Dark : R.style.MD_Light);\n}\nThe dialog is still using the Context that you pass to the Builder, but I think MD_Dark and MD_Light are overidding colorAccent when the context is used within the ThemeWrapper. I'm currently doing homework so I'll have to look at this later.\n@plusCubed @teslacoil \n. As a work around, I made the default accent colors in the dialog themes black (for light dialogs) and white (for dark dialogs). It looks significantly better than the Material theme's default teal.\n. The only place you notice this is the input dialog, because all other dialogs use views that don't show small theming issues like this or use views that theme themselves with library code.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.1\n. A lot of this will be improved with the next update also\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.1.0\n. Good catch, fixed\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.1\n. No, if you don't set your own from the global attribute, it will use\ntextColorPrimary. If it it determines that textColorPrimary will not be\nvisible over the dialog background (e.g black on black), it will use\ntextColorPrimaryInverse. An example of where that would happen is if your\nActivity used a light theme, and you used the dark dialog theme; the\nprimary color of a light activity is a dark shade of gray, which would not\nbe visible over a dark dialog.\nOn Tue, Apr 7, 2015, 9:15 PM Jose Toti notifications@github.com wrote:\n\nThat fixes that issue but won't it still override any color set in\n\"?android:textColorPrimary\"? In the docs it says that if md_title_color is\nnot set its supposed to use that as fallback. Right now its still using\ntextColorPrimaryInverse, which might be different.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/413#issuecomment-90781891\n.\n. @DaCardinal this issue is closed, and it's completely unrelated to that.\n\nI have no issues in 0.7.3.2 with contentColor being overwritten though. This is from the sample project's themed dialog:\n\n. Fixed\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.1\n. Wow, awesome. I'm assuming this will solve https://github.com/afollestad/material-dialogs/issues/418? I was going to make a custom TintManager but this appears to have done it a better way. @plusCubed \n. I'll merge it now, it's fine if there's issues, we can continue to fix them\n. Are you changing the dialog theme with the Builder's theme method? Black is the default color for the light theme, white is the default for the dark theme. \nWidget color only works for API 21 and above. \nThe only issue I would expect here is that you manually changed the dialog background color, but there could also somehow be a bug. \n. I should note that Material teal is the default colorAccent value in the Material theme or AppCompat, that's why it used to be there.\nIt was changed for this: https://github.com/afollestad/material-dialogs/issues/412\n. Well, that's a good idea, but those views only pull the tint colors directly from your Activity theme. However, I might try to sub-class them later (after class and homework) to pull out the custom values dynamically. \n. Commenting as a note to myself.\nThe tintDrawable method in TintManager (line 135) needs to be overridden and changed to use a custom color rather than extracting colors from theme attributes:\nhttps://android.googlesource.com/platform/frameworks/support/+/c497221ee0e2e873f49653ff1a046df2e5276759/v7/appcompat/src/android/support/v7/internal/widget/TintManager.java\n. I actually believe PR https://github.com/afollestad/material-dialogs/pull/416 will solve this \n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.1.0\n. This has already been fixed and will be in the next update.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.1.0\n. Forgot to include the input dialog too, it uses the default colorAccent value but the tint manager doesn't seem to change it (again, on API 10).\n\nWe should see if there's a way to apply a filter to the little cursor handle, too.\n@plusCubed \n. I actually believe @teslacoil mentioned something about using custom progress drawables in Nova.\n. Sweet, and yeah I think that's the only solution.\nWe may wanna add elevation shadows to the window backgrounds on API 10.\n. API 22 uses animated vectors for a few of the progress drawables, by the looks it it. So I think something slightly older will have to be used (e.g. the Holo drawables).\n. Cool, thanks. That shouldn't be too much of an issue since no one should be using Gingerbread anymore anyways, lol. \n. This is working fine for me. The divider goes away at the bottom when you scroll to the bottom.\n. E.g. at the top:\n\nTo the bottom:\n\n. Hmmm, that's possible.\nI can take a look later, or @plusCubed probably could if he's not busy.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.1.0\n. That's correct behavior. The bottom has a divider because the content right\nbefore the divider can scroll. At the top, the text view is not scrollable.\nOn Thu, Apr 9, 2015, 7:38 AM Zaldroc notifications@github.com wrote:\n\nThere's a divider at the bottom now but not at the top.\n[image: screenshot_2015-04-09-14-33-28]\nhttps://cloud.githubusercontent.com/assets/5994414/7066743/e1187998-dec5-11e4-8707-1f936fa05f07.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/422#issuecomment-91217868\n.\n. That attribute works perfectly fine. List items will match the content\ncolor unless you set md_item_color or use itemColor().\n\nOn Wed, Apr 8, 2015, 11:15 PM Darktiny He notifications@github.com wrote:\n\nSince the md_title_color global theming attributes not work any more, how\ncould I change the title text color of MaterialListPreference?\nObviously, I don't want to change the value of android:textColorPrimary.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/424.\n. Having a listener is a good idea, but I thought of a better solution to make things a bit simpler and more consistent.\n\nI added a alwaysCallInputCallback() option similar to the one used for single choice and multi choice lists. When enabled, the input callback will be called every time the input field's text changes.\n. Good catch, fixed\n. Well, actually how it works when alwaysCallSingleChoiceCallback() is disabled, is the positive callback gets sent first and then selection gets called afterwards. This is logical because pressing the positive action button is what triggers the single choice choice callback to be sent.\nThe code for this logic starts here: https://github.com/afollestad/material-dialogs/blob/master/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java#L294\nIf you enable alwaysCallSingleChoiceCallback(), the callback will be sent everytime the user changes selection.\n. You can explicitly set your own Typeface instances with typeface(Typeface, Typeface) rather than using typeface(String, String) if that's the issue.\nThe uppercase file names are correct naming conventions\n. Right now, this is intended. Unfortunately there's no easy way around this, so this is the best that could be done for such an old Android version. People should be encouraged to stop using Gingerbread anyways.\n. I should mention that's just Gingerbread's regular progress drawable with a color filter added to it.\n. Hmm, I thought 4.1 was the first API level to start full RTL support but\nmaybe I'm wrong. But yeah my intention was to not support explicit right\nand left gravities since devs need to be conscious of RTL support these\ndays.\nOn Fri, Apr 10, 2015, 11:49 AM Kevin notifications@github.com wrote:\n\nAndroid 4.1 doesn't fully support RTL. It sounds like you want to work\naround this Android 4.1 limitation by using Gravity.END for RTL languages\non 4.1 (which is exactly the same as RIGHT on 4.1) and Gravity.START on >\n4.1.\nUsing Gravity.RIGHT everywhere would sacrifice non-RTL languages\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/434#issuecomment-91618092\n.\n. We fall back to left and right on old devices that don't support start and\nend. The library automatically does this for you.\n\nOn Fri, Apr 10, 2015, 12:06 PM Reza Rg notifications@github.com wrote:\n\nBut actually I had no difficulties for RTL texts in my apps since API 8 by\nusing Right and Left Gravity (Except some HTC Models), but after android\n4.0.0 , I haven't seen any problem in RTL Text, when using Left and Right\nGravity. But now, I notices that using Gravity END and START does not work\non some android distribution (and not only 4.1, I've seen this issue in a\ndevice with android 4.2 too)\nSo, what you guess is a good solution?\nAnd by the way, it's so hard to be a developer in ME countries! Apart from\nRTL Problem, we also face date and currency conversion problem in different\nandroid version, other than sanction and ... :|\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/434#issuecomment-91623109\n.\n. What? This is current behavior. There's really nothing to fix, RTL will only work on newer API levels. LEFT and RIGHT are not included on purpose, because using them would stop RTL support from working when it can.\n. @plusCubed @teslacoil do you guys think this happens because of how MDRootLayout is setup? \n. Oh good point, thanks.\n\nI'll work on this later tonight.\nOn Fri, Apr 10, 2015, 11:50 AM Kevin notifications@github.com wrote:\n\nHrm I think it's that the MDButton isn't fully initialized if it's\ninvisible at the time DialogInit runs. Probably should always initialize\nthe buttons even if they're invisible.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/437#issuecomment-91618791\n.\n. Fixed\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.1.2\n. You can subclass MaterialEditTextPreference to do this. \n. Updated your code/log for syntax highlighting.\n\nYes, this is definitely a bug lol. Fixing it now.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.1.2\n. @jaredrummler that was one of them, but there was a few others too. Thanks :)\n. This was further improved with the latest release: https://github.com/afollestad/material-dialogs/releases/tag/v0.7.2.0\nCool to see that AcDisplay is using my library :)\n. I'll try to get this fixed.\nThe reason why this happens: when you construct a Builder, it sets a default theme (Light or Dark) based on the ?android:textColorPrimary attribute of your Activity. If it's light (e.g. a shade of white), it guesses the Activity is using a dark theme. If it's dark (e.g. a shade of gray), it guesses the Activity is using a light theme. DialogInit checks if you set md_dark_theme, but the default value is false, so it assumes if md_dark_theme is false that you didn't override the default theme in the Builder.\n. Basically, setting it to false has no effect because it's assuming that's the default value and it doesn't override the default theme that the Builder loads. But yes, it's a bug.\n. This is now fixed with https://github.com/afollestad/material-dialogs/commit/c39b09e0cefbf98282c1a8ba216b6c60038bd373, an update will come today\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.2.0\n. See the sample project, there's two DialogFragment examples\n. The only thing I could think of is the Activity not implementing ABListener.\n. @h0aX14 can you paste the LogCat error here?\n. It's alright. And yeah, that's definitely an error on your side. It says com.abc.MainActivity can not be cast to com.abc.AB$ABListener meaning it doesn't implement the interface.\n. Well you can't do that with the way you setup the dialog.\n. The only way with your current implementation is to implement the interface in your Activity, and forward it to the Fragment.\nBut sorry, I can't help today, I have exams in a few minutes.\n. @plusCubed there's not too much needed, as far as I know. Although it looks like minimum dialog widths are defined now; not sure if the OS respects that or if we have to.\n. @plusCubed it looks like the only major thing that was necessary to change is spacing between the title frame and content (which is now 20dp). I increased the title frame bottom margin to 12dp, so it adds up to 20dp with the content's 8dp padding.\n. Thanks for the contribution. To avoid making everyone using input dialogs have to add an additional parameter to the input() method, I added a separate inputType() method to the Builder.\nhttps://github.com/afollestad/material-dialogs/commit/5a9f4fe510c1459ae65f775c4ea431ef222a8b20\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.2.0\n. Good idea, done for the next update\n. I try to match them as much as possible, revised guidelines were actually published yesterday to include more information: http://www.google.com/design/spec/components/dialogs.html#dialogs-specs\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.2.0\n. This is an Android issue, more than it's a library issue.\nOne solution is to use DialogFragments, but this library is mimicking the stock preference dialogs (sub classing them to be more specific). \n. Well it looks like the developer of AcDisplay fixed this in https://github.com/afollestad/material-dialogs/commit/f342429633559cb448b32b27fec845c8aa2997d6, but it may've not completely worked\n. Nevermind, he only partially fixed it. I find the source and fixed it.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.2.0\n. You can access the edit text with getInputEditText() after you build the dialog. \n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.2.1\n. @Ph1b https://github.com/afollestad/material-dialogs/releases/tag/v0.7.2.4\n. Yeah you'd need a custom view.\nCustom colors are applied to EditTexts and other views using MDTintHelper. You don't need that if you use AppCompat or the Material theme though.\n. AppCompat colors the UI with the colorAccent attribute, to be specific.\n. Done\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.2.1\n. This isn't the case for me. Yesterday's update did the opposite. \n. Oh cool :)\nThe girl is my girlfriend, lol\n. Sorry, there's no current way to do that as far as I know.\n. You can currently customize fonts, but there's no way to remove fonts from a published library without removing them for everybody (to reduce size). That's not quite a feature, just a change.\n. Roboto is only a system font on newer API levels. It's included in this library so that older API levels get to use it too. Newer API levels tend to update Roboto too, so even API levels that had Roboto get new Roboto updates with this library.\n. Ohhh, it would require more suppressing that crash to make it work. Internal library code distributes the fonts to many different views.\n. That doesn't solve the issue though.\nI'm not planning on removing the fonts from the library itself, because most developers will be too lazy to include them in their own app and don't bother reading documentation.\n. The fonts are hardcoded into the library. You can't remove them once Gradle downloads them.\nThe only way you could be removing them is if you fork this repository and remove them yourself.\n. Hmm, good point\n. Yeah, those were my thoughts too\n. The commit that closes this catches the runtime exception thrown when the assets aren't found, and returns null in that case. Keep in mind that all fonts will look the same throughout every dialog if you remove them. \n. @gdbgeek yeah, this issue is already closed\n. @vovkab that's by design. There's a variation of typeface in MaterialDialog#Builder that takes Typeface instances. TypefaceHelper is only for internal library use.\n. That formatting doesn't get preserved even with getText(), unless you wrap it in Html.fromHtml(), as far as I know.\njava\nCharSequence content = Html.fromHtml(context.getString(R.string.s));\nnew MaterialDialog.Builder(context).\n    .content(content)\n    ...\n    .show();\n. @yukuku well I use formatted char sequences quite a lot, including in 3 production apps I've made and 2 apps I've made for others.\ngetString() doesn't omit formatting, it returns the literal string. I wasn't aware that getText() loads the HTML formatting though.\n. Done\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.2.3\n. You'll need your own solution for that. \n. That's not quite how Java works, or this library. See the README or sample project. \n. The checked items get passed in Integer[] which. You can not modify the preselection (selectedIndicesArr) because Java does not pass primitive arrays as references.\n. Not really sure what you have an issue with here. It works fine for everybody else.\n. There's more masks required, this is a framework issue more than it's a library issue \n. Oh sorry I wasn't actually at my computer when I initially read this.\nI remember using pretty much the same thing (http://stackoverflow.com/a/9893496) before, and it worked fine. You're saying you needed the transformation to make it work?\n. It actually works completely fine for me, without setTransformationMethod, if I move setting the inputType to the bottom of input dialog initialization (after setting everything else up for the EditText, it appears order matters). However, I will put setTransformationMethod in there just in case it doesn't work on some devices.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.2.3\n. Well, 8dp with non-list dialogs. With list dialogs, a larger value is used:\n\n. It is on my end, the current implementation (MDRootLayout) was actually implemented by Nova Launcher's dev.\nIt's possible it's an issue with the API level you're testing on, but it works fine on 4.4.4, 5.0, and 5.1 (and lower API levels I tested with emulators before).\n. I put this in the sample project and it works just fine for me:\nJava\nnew MaterialDialog.Builder(this)\n                .title(R.string.app_name)\n                .content(R.string.useGoogleLocationServicesPrompt)\n                .positiveText(android.R.string.ok)\n                .negativeText(android.R.string.cancel)\n                .negativeColorRes(R.color.md_material_blue_800)\n                .neutralText(android.R.string.copy)\n                .neutralColorRes(R.color.material_deep_teal_500)\n                .show();\n. Hmmm. It works fine on stock KitKat because the background fades. Sony's implementation must not do that for whatever reason.\n. Can you check if this helps? I don't have access to a Sony device\nhttps://github.com/afollestad/material-dialogs/commit/00c9c04133b42020ddeb08f63412ab1588307179\n. This library actually uses AppCompat 22.1's themes at the base.\nOn Sat, Apr 25, 2015, 7:18 AM Javi Marina notifications@github.com wrote:\n\nWell, it might be a Sony problem but the issue still isn't resolved.\nStrangely, this also happens when I use AppCompat 22.1 instead of this\nlibrary. I have opened a new issue, see\nhttps://code.google.com/p/android/issues/detail?id=170111\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/464#issuecomment-96190140\n.\n. Thank you.\n\nYeah, like the large header at the top of the README says, it accidentally got removed. No idea how long they'll take.\n. As a temporary work around, add this inside repositories { }\nGradle\nmaven { url 'https://dl.bintray.com/drummer-aidan/maven' }\n. The library is back on jCenter now\n. This looks cool, but I wanna keep the sample project as simple as possible :)\n. AppCompatDialog is just an AlertDialog wrapper; MaterialDialog does not extend AlertDialog, it extends the base Dialog class.\nI don't believe AppCompatDialog actually uses full Material theming below Lollipop, either.\n@alorma\n. It does that at inflation time, yeah. But there wouldn't be any benefits since this library already does the tinting that AppCompat would do.\nAlertDialog was recently removed from MaterialDialog's base, too, for cleanup and fixes.\n. One of the guys who contributes told me there is however new dialog themes that will make dialogs look good overall on older API levels (animations and shadows).\n. There's currently no plans for full screen dialogs. You also shouldn't use Holo themes for anything anymore, AppCompat should be used instead.\nIt is however very easy to create full-screen dialogs as seen in the design guidelines with just an Activity whose Toolbar has an 'X' icon for home up navigation. \nhttp://www.google.com/design/spec/components/dialogs.html#dialogs-full-screen-dialogs\n. Well, an Activity may actually use less resources. Material Dialogs has\nquite a lot of variables that are declared during the life cycle of a\ndialog.\nAn Activity is simpler, once you get it setup.\nOn Tue, Apr 21, 2015, 5:46 PM logicalstep notifications@github.com wrote:\n\nSo you're saying I should use an activity?\nAlertBuilder looks simpler to me, especially when the information is just\ntext and a dismiss button but I understand the flexibility of using an\nactivity.\nSeems like a lot more complexity, resources and overhead to me??\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/471#issuecomment-94965165\n.\n. In your individual app module\n. @cheenu the library is back on jCenter now\n. @plusCubed you could possibly look into this?\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.3.0\n. It shouldn't be expected that changes like that will be made when the\nlibrary isn't at version 1.0. Leaving it would be completely useless, since\nthe Roboto fonts were unbundled and that method wouldn't do anything\nanymore.\n\nThere's a global theming attributes section that lists all of the attribute\nnames.\nOn Thu, Apr 30, 2015, 5:32 AM Sven Jacobs notifications@github.com wrote:\n\nAlso it would be nice if the README mentions how to set the font via\ntheming. It only states\nThere's a global theming attribute available to automatically apply fonts\nto every Material Dialog in your app, also.\nBy looking at the diff I found out that the attribute names are\nmd_medium_font and md_regular_font.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/474#issuecomment-97732689\n.\n. @kentarosu 0.6.3.4 of Material Dialogs? That's very, very old if you're talking about my library.\n. Well regardless, you shouldn't be using a version that old. 0.7.0 was pretty much a redesign which had lots of contributions from Nova Launcher's dev. Pretty much every update after that has added very important stuff.\n. However this issue doesn't look fixable to me. \n\nI think it might be related to Google's AppCompat update (22.1.0) which changes the logic for activities (ActionBarActivity -> AppCompatActivity).\nNone of the code in that LogCat is from my library.\n. Forcing the use of AppCompat 21 may fix the issue, but I wouldn't recommend it.\ngroovy\ncompile('com.android.support:appcompat-v7:21.+@aar') {force=true}\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.2.8\n. Hmm, well sorry there's not much I can do then.\nI would still try forcing an older version of AppCompat to be used by putting the line in one of my comments above in your app's build.grade file.\n. Oh, yeah you're right. I'm using AppCompat Dialog themes now. Well the only other solution would be to tell the dev of the calligraphy library that he needs to update his library; this is ultimately an issue with his  library not being up to date.\n. His library is using build tools 21.1.2 (instead of 22.0.1) and AppCompat 21.0.3 (instead of 22.1.1).\n. Unfortunately I can't, the library had gotten removed from jCenter completely by accident. It recently went back up but I don't keep old versions around.\nIt would be easy for someone to make a pull request to Calligraphy to update it though.\n. Well, that code is identical to what the actual logic for icon(int) is. The only difference is that ResourcesCompat is used since getResources().getDrawable(int) is deprecated.\nSo there shouldn't be no issues with icon(int) accepting vector drawables.\nAlso, recycle? You only recycle bitmaps, you don't recycle drawables. Garbage collection does that.\n. To be more specific about icon(int): https://github.com/afollestad/material-dialogs/blob/master/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java#L577\n. Oh I see. Not sure why that'd happen, but I can guarantee that the warning can be ignored.\nBut yeah, you can't manually recycle drawables :)\n. Thank you :)\n. I try to the number of parameters to that method down. That's why inputType has a separate method. \nWhen you can just access the EditText directly, more option methods may not be necessary neither, for simplicity. \n. Not quite sure what you mean. Fragments don't belong in a dialog. There's already dialog fragment examples. \n. You can't use them together anyways but I'll prevent the crash.\nOn Mon, Apr 27, 2015, 8:26 AM Paul Woitaschek notifications@github.com\nwrote:\n\nWhen using a custom view combined with items, I get a crash. Without the\ncustomView everything is fine.\nnew MaterialDialog.Builder(getActivity())\n    .title(R.string.pref_support_title)\n    R.array.pref_support_values)\n    new EditText(getActivity()), true)\n    .show();\n`\njava.lang.NullPointerException: Attempt to invoke virtual method 'void  android.widget.ListView.setAdapter(android.widget.ListAdapter)' on a null object reference\n        at com.afollestad.materialdialogs.MaterialDialog.invalidateList(MaterialDialog.java:146)\n        at com.afollestad.materialdialogs.DialogInit.init(DialogInit.java:330)\n        at com.afollestad.materialdialogs.MaterialDialog.(MaterialDialog.java:84)\n        at com.afollestad.materialdialogs.MaterialDialog$Builder.build(MaterialDialog.java:1031)\n        at com.afollestad.materialdialogs.MaterialDialog$Builder.show(MaterialDialog.java:1035)\n        at de.ph1b.audiobook.fragment.SettingsFragment$2.onPreferenceClick(SettingsFragment.java:109)\n        at android.preference.Preference.performClick(Preference.java:985)\n        at android.preference.PreferenceScreen.onItemClick(PreferenceScreen.java:214)\n        at android.widget.AdapterView.performItemClick(AdapterView.java:305)\n        at android.widget.AbsListView.performItemClick(AbsListView.java:1148)\n        at android.widget.AbsListView$PerformClick.run(AbsListView.java:3059)\n        at android.widget.AbsListView$3.run(AbsListView.java:3866)\n        at android.os.Handler.handleCallback(Handler.java:739)\n        at android.os.Handler.dispatchMessage(Handler.java:95)\n        at android.os.Looper.loop(Looper.java:135)\n        at android.app.ActivityThread.main(ActivityThread.java:5293)\n        at java.lang.reflect.Method.invoke(Native Method)\n        at java.lang.reflect.Method.invoke(Method.java:372)\n        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:904)\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:699)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/482.\n. Btw, you're using an EditText as a custom view? Why?\n. You're right, https://github.com/afollestad/material-dialogs/commit/c319098bf681a0196c60fd342c9832090f33dd49 should help with that\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.3.0\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.3.1\n. This adds unnecessary bulk, you can just apply selection on the edit text after building the dialog.\n. Well, I don't use v4, I use v13 of the support library.\n\nYou shouldn't need to exclude at all as long as you're using 22.1.1 of AppCompat and the Support Library in your own app.\n. Sorry, I have no idea. I use this library in many production apps and I've never had any issues like that.\nI'd try cleaning your project, if you have a lot of libraries referenced you may need to enable multi-dex.\n. I'm assuming you mean in the input dialog, good idea.\n. Since stopping the user from typing altogether wasn't working too well (the user could still continue to type and suggestions on the keyboard would change, even though nothing actually went into the input field).\nSo, I made it so that the positive action button (which submits input) gets disabled if the user goes over the maximum length. I also made it so you pass an 'error color' in which is used on the current/max indicator and the color of the input field itself when the user goes over the max (indigo is used here but you could use red or any other color).\n\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.3.0\n. @plusCubed well, the code is relatively simplistic in Material Dialogs. It doesn't add too much bulk and it's a common thing used in a lot input dialogs.\n. I fixed the first point in that comment, but I'm unable to reproduce the second one.\n@waltervr \n. Oh yeah, I didn't notice there were guidelines for that until now\nhttp://www.google.com/design/spec/components/text-fields.html#text-fields-character-counter\n. Yeah, that works fine for me\nOn Tue, Apr 28, 2015, 11:08 PM Walter Vargas notifications@github.com\nwrote:\n\n@afollestad https://github.com/afollestad, in the second one, I did\nwent over the maxLength until got the red colored input and then started\nerasing.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/487#issuecomment-97298662\n.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.3.1\n. @waltervr that isn't quite what the issue there is; it is counting the prefill, that's why the counter shows the correct length. The input is just disabled by default when it shouldn't be. Looking into it.\n. Fixed in https://github.com/afollestad/material-dialogs/commit/490df6e9e79d18ef924feb9cdbf11fec4d7ebf20.\n\nAn update won't go out until https://github.com/afollestad/material-dialogs/issues/534 is resolved though.\n. This is a duplicate of many issues.\nAlso see the README. \n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.3.1\n. Well first of all, I cleaned up your comment a bit to use Java and Gradle syntax highlighting (indentation doesn't do that).\nSee the input dialog in the sample project, just switch out password for cap sentences.\n. I should note what you pass in is passed directly to the EditText, this is related to the Android framework itself, not this library.\n. Actually, you don't even need to look at the sample project, it's already in the README:\nhttps://github.com/afollestad/material-dialogs#input-dialogs\n. When you pass in the inputType from a layout, Android automatically handles flags like this. Setting the inputType programmatically is a bit different than how it works in XML.\nYou need the first flag that's shown in the README and sample project. \nBut again, inputType() in this library is a shortcut to EditText.setInputType(). This library doesn't do anything else with it.\n. E.g. \njava\nInputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_WORDS\n. It's displayed in the input dialog example in the README :)\n\nBut you're welcome. I guess it's not too obvious that you have to do that, but I'm assuming people know what's necessary since that's an Android mechanism.\n. I don't have any issues with the submit button being enabled when it shouldn't be.\nNot counting trailing spaces is intended behavior. However since it's unintuitive I'll remove it.\n. https://github.com/afollestad/material-dialogs/commit/bae5347c72a1679169a96388ace74b61bbfd7b14\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.3.2\n. You're putting a view pager in a dialog? You shouldn't do that \n. Because a Dialog window doesn't have a fragment manager. Fragment managers are in an Activity which has a window separate from the dialog. \nIf you really needed to you can do a fragment transaction on a custom view for this library, but you shouldn't. \n. This isn't an issue with this library \n. You most likely have fitsSystemWindows on globally in styles.XML or something \n. See the README\n. Sorry, you can't. At least not right now.\nAppCompat 22.1's dialog themes are being used at the base of the library, so Google's library is providing the window background and shadow.\n. This isn't really needed, I use Bintray (which is listed in the README). Bintray/jCenter are Google's current official choice for Maven repos.\n. To keep the library simple, no.\nBut you can do that by using alwaysCallInputCallback() and doing your own validation in the input callback.\nYou can manually enable or disable the positive action based on whether you determine the input is valid or not from the input callback.\n. See the README or sample project\n. You mean ProgressDialog? ProgressBar doesn't do that, it's a view.\n. Fixed\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.3.2\n. I don't throw an Exception, Android does. I solved your issue by posting to\nthe thread the dialog was created on.\nThere are not any views on Android that are threadsafe. That's not how\nviews work.\nOn Thu, May 7, 2015, 3:41 AM Thomas Bruyelle notifications@github.com\nwrote:\n\nNo it's really the ProgressBar who handles being invoked from another\nthread. So in your MaterialDialog you don't have to throw an exception if\nyou're not in the UI Thread. Just call ProgressBar.setProgress/setMax and\nit will be ok.\nThe only thing you have to handle is in MaterialDialog.setProgress where\nyou also update the progress label and progress minmax. Ensure those\nsetText are invoked in the UI Thread.\nI don't get why you close the issue, I didn't see any commit about the\nfix. Do you mean the fix is only on the APK pushed in 6b95674\nhttps://github.com/afollestad/material-dialogs/commit/6b95674b8b82c4e0278bbb60e05b0e13e9439414\n? Where is the code ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/505#issuecomment-99774690\n.\n. Woops, forgot to remove that.\n\nAnd you're right (http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.0.2_r1/android/widget/ProgressBar.java#ProgressBar), removed the handler usage and exception throwing for those two methods. https://github.com/afollestad/material-dialogs/commit/12b8f1d9caf4d856ed1030783456667e46a4c8f7\n. Done in the latest commit.\nThe other handler usages are useful, it makes the dialog completely thread safe other than when you initially show it.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.3.3\n. Thanks\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.7.3.2\n. This isn't an issue with this library, you need setCancelable(boolean) (http://developer.android.com/reference/android/app/Dialog.html#setCancelable(boolean)). \nThere's a convenience method in the the Builder too (cancelable(boolean)).\n. Looking into it now, thank you\n. This was an issue with MaterialSimpleListAdapter\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.3.3\n. Tinted from what? It pulls the color from the colorAccent (AppCompat) attribute.\n. I made it pull from android.R.attr.colorAccent rather than only R.attr.colorAccent now too (on Lollipop). There's no stock XML attribute for setting accent colors, so this class does not allow customization. You need to specify the color in your Activity Material/AppCompat theme.\nIf you want more customization, you can use a regular input dialog and manually save the value.\n. Oh, you're talking about the handle, not the EditText itself\n. I realized R.attr.colorAccent was also getting overridden by android.R.attr.colorAccent on Lollipop, I fixed that too.\nNot sure why the handle is white though.\n. For now, you'll need to add android:colorAccent to your v21 Activity theme. colorAccent (AppCompat) is being overwritten, it's fixed but the next release won't be available quite yet.\n. For the handle, you must be missing an attribute in your theme, or an attribute is set to white. I think it might use android:textColorHighlight. It works fine in the sample project.\n. Hmm, well this is running on stock Android with a API 19 emulator.\nIt might be an HTC issue.\n\n. Thanks @plusCubed, I can confirmed it's fixed.\nI won't have an APK until a library release goes out in a bit.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.3.4\nThank you\n. They're not too wide, they use the AppCompat dialog theme at the base \n. Simple list item isn't a concept I made, it's from the design guidelines:\nhttp://www.google.com/design/spec/components/dialogs.html#dialogs-simple-dialogs\nYou mean something like this? (this is a color chooser from my app, Cabinet)\n\n. Well, you'd need to implement it on your own. That adapter is just a basic implementation that mimics the dialog from the guidelines. It's not meant to add extra features.\n. If you want, I can provide the custom view I use in Cabinet (that draws the check mark and border).\n. This is the CircleView implementation I use in Cabinet:\nhttps://gist.github.com/afollestad/9161c6efcd75d676d242\nYou'd need to provide a drawable in place if R.drawable.ic_check.\n. Saw that library, it looks very nice.\nThe easiest solution would be to just remove the use of Handlers, it would only affect thread safety of some of the modifier methods but that only came with a recent update.\n. I can take care of this, I think I have a good solution\n. @teslacoil do you think this'll do it? https://github.com/afollestad/material-dialogs/commit/5a30e76574a44c3706bf75d42ce5de9ee56673ce\nIt's basically what you suggested above.\n. One more https://github.com/afollestad/material-dialogs/commit/f7d09c4ae1aa11ae4745e115205be43f5fef5b13\n. I looked into Dialog's source code and the messages are created with the callback setters (e.g. setOnDismissListener). Thus I set all the listeners if necessary (since the ones that user specify are still stored in the Builder object) when the dialog is shown, every time. That way the Messages are recreated every time the dialog is shown, and destroyed everytime the dialog is stopped/dismissed.\n. I think a small issue came from the current code, dialog fragments must hook into the listeners or something. A user reported a Dialog Fragment re-opens its dialog after orientation change now, even after the user manually dismissed it. \n. @Gybra removing the listeners is not a solution; it prevents the dialog from being able to be shown again after dismissal. \n. @Ph1b yep, the dialog listener messages aren't released. Not from MaterialDialog, but android.app.Dialog. It's a known Android framework issue.\nI tried methods of clearing these Message objects using refactoring, but there's no good time to do so and it caused a lot of weird issues.\n. @hzsweers that's useful info, but unfortunately this leak is deep within the Android framework itself. Dialogs don't destroy the Message objects used for various listeners, manually clearing them prevents dialogs from being re-used.\n. A major case in which a dialog is re-used is DialogFragments. The fragments save and restore instance states, removing the listeners would destroy the ability for that to work.\nNot sure if there's any good solution for this, or if it's truly needed.\n. Which is why the android.app.Dialog Messages cannot be nullified by this library.\n. Fixed\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.4.0\n. @AkshayPathak no issues with that on my end\n. I understand what you mean, but again I can't reproduce that.\nThis issue here (for the last item not animating) is specifically for API 21 and above. Are you using an API level below Lollipop?\n. @AkshayPathak I just double checked below Lollipop (in a KitKat emulator) and I have no issues there either.\nMake sure you're using the latest version of the library.\n. Not without modifying the themes in styles.XML of the library. \n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.4.0\n. Sorry, not really sure what the issue would be. There's no compilation issues on my end.\n. I just confirmed there's no issues. Try cleaning your project.\n. That's the main purpose of using a dialog fragment. That's expected and intended Android framework behavior. \n. Oh, it re-opens? I might have an idea of why. \n. Fixed\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.4.1\n. There's another issue similar to this, maybe identical, but you need another flag in there. This isn't an issue with this library, you should look into programmatically setting edit text input types on StackOverflow. \n. Fixed\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.4.1\n. dismiss() is a method of android.app.Dialog, not com.afollestad.materialdialogs.MaterialDialog#Builder.\nIn other words, you call dismiss on the Dialog created by the Builder with build(), not the Builder itself.\n. dialog.show() also returns the MaterialDialog instance.\n``` java\nMaterialDialog.Builder builder = // ...\n// Option one\nMaterialDialog dialog = builder.build();\ndialog.show();\n// Option two\nMaterialDialog dialog = builder.show();\n// Dismiss\ndialog.dismiss();\n```\n. By the way, I edited your original comment to include Java syntax highlighting. Indentation doesn't do that.\n. Looks like someone else broke this with a pull request from a week or two ago, luckily it's a simple fix\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.4.1\n. I'll look into this.\nHowever, I updated your comment to use correct syntax highlighting (indentation doesn't do that). I'd also recommend using string resources (like android.R.string.ok), because they are/can be translated.\n. You might be using an old version. The error log doesn't match up with where code actually is now.\n. Not at the moment, Material design specs are used currently. \n. No, that's left out for simplicity. There's a basic color chooser in the sample project, but all implementations will require a custom view.\n. Well, using context.getResources() here is unnecessary. Just use .icon(R.drawable.medal_selected).\nBut I'll look into this.\n. I'm unable to reproduce any issues related to this.\n. Read the available documentation (in the README) or sample project.\n. No it doesn't, you can get a reference to the ImageView later. Again, the\ndocumentation shows all of this.\nOn Wed, May 20, 2015, 6:40 AM Mohamed Fathy notifications@github.com\nwrote:\n\n@afollestad https://github.com/afollestad I got it, but i need to add\nthat image from BitMap because it's generated by the user, and your\nmethod only force me to assign a specified image!\nIs there anyway?!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/532#issuecomment-103853913\n.\n. Pass false for wrapInScrollView and handle scrolling yourself. \n. Oh, yeah you can't remove title padding. It uses the Material Design\nGuidelines specs.. An update was made available late last night:\n\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.7.5.0\n. Thanks\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.7.4.2\n. Sorry, this isn't necessary IMO.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.4.2\n. An update was made available late last night:\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.7.5.0\n. It happens with EditTexts too, thanks for reporting this\n. However I don't think too much can be done about this. \nAppCompat is vital to theming views (and their backgrounds), this library is built around and on top of AppCompat.\n@plusCubed do you think there's anything simple we can really do about this?\n\n\n. @Murphybro2 this isn't the same.\nThe padding in your issue is for list dialogs. This issue is for custom views with no title. \n. Working on this now\n. Should be fixed in the latest commit. The extra padding is removed when using a custom view dialog with no title and/or action buttons.\n. An update was made available late last night:\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.7.5.0\n. https://github.com/afollestad/material-dialogs/blob/master/core/src/main/java/com/afollestad/materialdialogs/customview/DialogCustomViewExt.kt#L50. kotlin\n    customView(..., noVerticalPadding = false). This is intended behavior\n. I should add that the developer of Nova Launcher actually implemented the padding logic here and I agree with his decision for aesthetics.\n. @brianmuse this is unrelated to custom view dialogs like that. That was in another issue that had already been resolved; make sure you're using a new version of the library.\n. Duplicate of an issue from yesterday. \n. I cleaned up your comment a bit with syntax highlighting. There's no issues there though, I'm using code almost exactly like this in several production applications. \nAlso, you shouldn't use System.out.println on Android. You should use Log.v, Log.d, Log.e, etc \n. The font color? Yes. The background color of the view? No.\n. No, this library is intended to use the Material Design guidelines. Having a background color different than the dialog itself doesn't follow the guidelines, and looks weird IMO.\n. You need to use AppCompat themes in your Activity, not Holo themes.\n. colorAccent is the AppCompat version of android:colorAccent which only works on Lollipop. AppCompat is backwards compatible Material theming.\n. Sorry, a lot of this library is built on AppCompat and it's vital for UI theming. AppCompat supports pretty much all of the Material theme back to Gingerbread, including coloring EditTexts, CheckBoxes, etc. There's no way for this library to manually do that without including a lot more resources which take up extra space in code and resources.\nIt's not very hard to switch, you just extend AppCompatActivity instead of Activity, and switch the themes in styles.xml. Any uses of getActionBar() become getSupportActionBar().\n. I'd recommend looking through your theme for anything that you don't need.\nSetting the action bar color: the colorPrimary styles.xml attribute\nSetting the status bar color: the colorPrimaryDark styles.xml attribute\nUI elements like inputs and other fields: the colorAccent styles.xml attribute\nActionBarDrawerToggle doesn't need a Toolbar, there's another constructor that doesn't take a toolbar. I think it might need AppCompat to work though.\n. An update was made available late last night:\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.7.5.0\n. You guys happened to get the second iteration of version 0.7.5.0, it wasn't there the first time I pushed 0.7.5.0. I missed this bug.\nPushing 0.7.5.1 now.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.5.1\n. Read the documentation in the README. \n. Well, the only thing that page lists is the width of a simple dialog on a phone. It doesn't say anything about tablets, or regular dialogs, so there's not too much I can do unless they add more information to the guidelines.\n. @plusCubed @teslacoil have any ideas for this?\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.8.0\n. @plusCubed good find!\n. @plusCubed here's a side by side of Material Dialogs (on the left) and a stock Marshmallow AlertDialog (on the right). Looks like it's working fine now!\n\nThe heights are slightly different. Although it looks like the AppCompat AlertDialog doesn't really follow the guidelines perfectly.\n. Unfortunately not too much can be done about that.\nThe dialog is inflated with whatever theme you specify with the theme(Theme) Builder method (or LIGHT by default). If the dialog view was inflated using the Activity theme, then there would be a lot of visual issues (e.g. wrong colors for scroll indicators and other elements).\n. @alorma not sure why I didn't think of using a different context to inflate the individual list item layouts before.\nThis issue is fixed in https://github.com/afollestad/material-dialogs/commit/c5e79ec6d2c1bd5c5fc63007f11e85a6167c613c. \n. @josalvdel1 you haven't gotten the fix yet, it's not published\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.5.3\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.5.2\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.0.0\n. I develop primarily on Lollipop and the M Developer Preview. It works fine on Android 5.0, 5.1, and M.\n\n. This may be a Samsung issue.\n. Sorry I misunderstood what you said, initially. But I can't reproduce that issue. Are you using at least version 0.7.5.0?\n. That's still not very clear.\nBut again, check that you're using a new version of the library. I've never run into that issue. \n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.5.3\n. You can't use JARs for Android Libraries, JARs only contain Java. \n. You need AARs. Eclipse doesn't support that by default, Andorid Studio does. \n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.5.4\n. That's not an issue with this library, it happens on this line: \nhttps://github.com/afollestad/material-dialogs/blob/master/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java#L614\nThis exception means the string you specified doesn't exist when retrieved using the context you passed to the Builder.\n. Which means you need to clean and rebuild your project most likely. This is a very common Android error.\n. I haven't changed anything within the content method since the very first release of the library.\nBut yeah, that line is made up of 100% Android framework methods.\n. Well wait, I don't think it's directly related to the content method.\nIt looks like it might be from the preference classes.\n. Found the issue\n. Thanks for reporting this, more people would've discovered it if it was out there for any longer.\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.7.5.5\n. This used to happen to me, but I fixed it. I'm guessing you're either using an old version of the library, or it's an issue with the version of Android you're using (e.g. Samsung TouchWiz).\n. I actually believe this was a bug that I also experienced on Android 5.0.2, but it went away with Android 5.1+ \n. @richardaum MDTintHelper, which is a shortcut to some AppCompat utilities. This bug only occurs on Android 5.0.2 as far as I know, Google fixed the issue on 5.1 and above.\n. @edvardasast the problem exists specifically on Android 5.0.2, like I said above I don't think I can do anything to fix it. Android 5.1 exists now, and the M Developer Preview.\n. @richardaum I haven't found any\n. @richardaum coloring is done using AppCompat's coloring features, with the exception of a progress bars.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.5.6\n. Because I do not have unlimited storage on Bintray.\nNot sure what you mean by \"keep\". The entire project was removed by accident before. \n. Ooh, that's a good idea\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.5.6\n. I've tested it from API 14 to API 22 and it works fine. What Android version?\n. I have Nexus 6 and it works completely fine. I actually don't modify anything about the Progress Bar for Lollipop and and above so there should be no issue.\n. Idk, I'm sorry, there's really not much I can do. This would be an issue of android.widget.ProgressBar not working correctly.\n\n. There's no setting for it, RTL is applied automatically for Android versions that support it (4.2 Jellybean and above, I believe). I thoroughly tested it before and it works like it should.\nKeep in mind Android automatically applies RTL layouts on devices with RTL languages, so your entire phone has to be switched to a language like Arabic.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.0.0\n. Sorry no, previous versions weren't too much better. 22.2.0 is actually better than a recent version, I will update the library as soon as a new version is released though.\n. Well, one solution may be to force the old version from your app.\nGradle\ncompile('com.android.support:appcompat-v7:22.1.1'){\n    force = true\n}\nFrom my understanding, this will overwrite the versions used in any libraries you depend on for your main app module.\n. Well you can force any version\n. Currently there's no support for that.\nYou can manually invalidate your input dialog by calling alwaysCallInputCallback() in the Builder so that the input callback is invoked everytime the user adds or deletes a character. You can enable or disable the EditText from code based on whether or not the input is long enough.\n. I've added a custom input dialog invalidation example to the sample project.\n. This is a Gradle issue that I suspect Google needs to solve. \n. From what I've heard, this is an issue with AppCompat 22.2.0 and it will be fixed by the time Google releases a new version of AppCompat.\n. Sorry, I misunderstood what you meant originally. \nOne thing to note is that the stock API is a separate class from the main dialog. However this is useful, so I implemented it for the next update.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.6.0\n. Sorry, this can't be done. You'll need to dismiss the old dialog and display a new one.\nLayouts are determined at dialog creation time currently, changing that will require a lot of code changes and layout inflations aren't the most efficient thing.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.7.0\n. It would be helpful if someone could try to reproduce this issue again, and possibly find a fix, since I don't have any small devices and virtual machines are currently broken on my Mac.\n. This library just wraps around stock Android dialogs so you would need to research how to do that with dialogs in general. \n. @SoAddicted how are you integrating the library? That's not an issue with the library itself, it's an issue with how you're referencing it. \n. This is most likely a issue with you including different versions of a library such as AppCompat in your library than what this library uses. Those aren't attributes of this library.\n. @danielfaust I can add a getProgressBar() method, but why did you set the alpha? View#setVisibility(int) is designed to hide views.\nsetVisibility(View.GONE) will completely remove the view from visibility, including taking up space in the layout (other views will move to replace it until it's visible again).\n. In my opinion, something like that is too much to include in this library. Dismissing the progress dialog and showing a regular dialog is the easiest solution, it's what would have to be done without this library.\nHowever, I've been brainstorming ways to switch between different types of progress dialogs efficiently, so that might be possible later.\n. Updated your comment to use syntax highlighting. I'll look into this now.\n. @ferrannp since onCreateDialog(Bundle) is always called in DialogFragment; you need to pass the currently selected indices in the DialogFragment's saved instance state.\nHowever, when I attempted to do that, DialogFragment calls onCreateDialog(Bundle) twice for some reason, and the instance state is null the second time. So using setRetainInstance(true) is the best solution for now.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.7.0\n. Unfortunately this is most likely an issue with the individual ROMs. The value of cancelable(boolean) is passed directly to the android.app.Dialog at the base of a MaterialDialog, there's no custom implementation for that.\n. @euri16 updated your comment to use correct GitHub code formatting and syntax highlighting (you don't use HTML tags).\nI've added the solution by @SimonKinds, it will be available in the next release.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.7.0\n. Update AppCompat from the SDK manager \n. With a custom view\n. No, custom views are a feature like they are for stock dialogs. See the\nREADME on the front page of this library.\n. Yeah, the usage there is valid.\n. With the dismiss() method. Same as a stock Dialog. \n. Look at the README file and sample project. \n. There is, MaterialDialog inherits android.app.Dialog. The Builder instance\nis not a dialog itself.\nLook at the README file or sample project. That's what it's for.\n. java\nMaterialDialog.Builder builder = new MaterialDialog.Builder(this)\n    .title(R.string.title)\n    .content(R.string.content)\n    .progress(true, 0)\n    .cancelable(false);\nMaterialDialog dialog = builder.show();\n// do work\ndialog.dismiss();\n. MaterialDialog.Builder is not a dialog, build() and show() of MaterialDialog.Builder return a MaterialDialog. This is how AlertDialog.Builder from the stock framework works too.\n. You'll need your own dialog theme for this.\nThis library is designed to simplify dialogs that use Material design.\n. The next release should fix this\n. With a custom view.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.7.0\n. Stock AlertDialogs can't be shown from a service either; they're not designed to. But I'll look into the solution you used.\n. Since a permission is needed (according to http://stackoverflow.com/a/4344760/309644), I don't think it's a good idea to have this as a feature of the library. Those who really need to do this can use that method on the window like you'd have to do with a stock AlertDialog anyways.\n. Read the README or look at the sample project.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.7.0\n. This library wasn't designed to allow construction without the Builder. \n. The only thing I can think of is subclassing a View class, and using it inside of your custom view.\n. You can close it yourself, too.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.0.0\n. This library was developed on Lollipop, it works fine for me on Lollipop and the M Developer Preview.\n. Make sure you're using the latest version of the library.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.0.0\n. This is because you're re-using the same EditText for both dialogs. It belongs to the previous layout when it's added to the new one.\n. If you're inflating the View that's used as a custom view, the views aren't gonna change when the dialog shows again. That's not even a bug, that's how things work.\n. Just like with a ListView or RecyclerView adapter, you have to reset the views to their default state before you show the dialog again. \n. This is an issue with the bintray-release plugin. \n. @nguyenvancuongit I didn't, I'm waiting on version 3.3 of the Bintray Release plugin; @hzsweers made a pull request to fix the issue.\n. It works fine for me in Genymotion, but I'll look into it\n. I'm guessing it's an issue with your custom DialogFragment code\n. Why are you creating a Dialog Into instance?\n. Those methods should be called on the dialog passed as a parameter to the callback, not something you just created. \n. It hasn't been released\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.7.0\n. This has alreaey been fixed but not published. \n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.7.0\n. If you look at the stock DialogPreference source, you'd see it also doesn't save any values. \n. Updated your comment for syntax highlighting; indentation doesn't do that.\n. However, I didn't intend to modify the behavior of DialogPreference in this library.\nThe stock DialogPreference doesn't do that, so this library won't either. http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.1.1_r1/android/preference/DialogPreference.java#401\n. If you follow the stack trace you can see where it's being invoked from. This is now fixed for the next release, thanks for reporting it.\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.7.0\n. Automatically? There's no way it could know when to close unless you tell it.\n. If you mean a determinate progress dialog, you still have dismiss it when it's done just like any other dialog.\n. Read the README on the front page.\n. See the README and sampl3 project. You need to use a custom adapter. Or a simple list dialog. \n. Well, first of all, the latest version on Cradle is 0.7.7.0. \nDoes your custom layout have a RecyclerView in it? It looks like the library is trying to check if your RecyclerView is empty or not but there's no adapter attached to it. \n. I'll have it fixed for the next release \u263a\n. You're welcome!\n. Set it on the Dialog instance. MaterialDialog inherits android.app.Dialog. It's no different.\n. Looks like it could be another infamous Samsung issue.\nLine 1101 and 1106 do not exist in MaterialDialog.java, and errors do not occur in Java when you cast a class to itself.\n. The only other thing it could be is you using a very old version of the library before dialog initialization code was moved to a different class. There's only 578 lines in MaterialDialog.java.\n. Not 100% sure, but that log wouldn't apply to any version above 0.7.6.0; the latest is 0.7.7.0.\nLet me know if there's a new log for the same issue.\n. You mean here? https://github.com/afollestad/material-dialogs/blob/master/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java#L90\nThis code runs on multiple production apps of mine that have over 100,000 downloads; I've never had any issues with it.\n. Sorry, there's nothing I can do. Casting an object to what it already is does not cause an error.\nThere is something wrong on Samsung's end, which isn't too unusual (it happens a lot).\n. This isn't a question related to this library. \nUse a Handler to post a delayed message. \n. Same way you would do it with a stock dialog, if it's possible. MaterialDialog  inherits android.app.Dialog.\n. Sorry for the delay.\nThanks for the library @javaguy44, since that library is relatively light weight, I think I'll be integrating it into the library. It's definitely a good solution for backwards compatibility.\n. Should be fixed for Android 4.0+ in the upcoming release.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.0.0\n. @dreamingincodezh thanks, I'll definitely use that and include credits \u263a \n. @AshkanImmortal his library is already being used, he just made it easier to use it \n. Unable to reproduce.\nMake sure you're using a newer version of the library.\n. That's a more general Android error. Look it up on StackOverflow. \n. https://github.com/afollestad/material-dialogs/blob/master/LICENSE.txt\n. https://github.com/afollestad/material-dialogs/releases/tag/v0.7.8.0\n. I would assume this would require some heavy API changes, moving methods from the current Builder to their own classes.\n. @hzsweers the current repo code has been updated to contain core and commons modules.\nThe v7 prefs stuff will be a bit more complicated since they are very, very different from stock preferences. There's a compat PreferenceManager that handles dialogs, rather than the dialogs being shown from within the preference classes themselves. \n. The progress package however won't be able to be easily moved, though. The layouts and everything are deeply integrated into MaterialDialog and DialogInit. It's not worth moving into new classes, and it's very commonly used among the people who use it.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.0.0\n. This isn't really related to this library.\nHowever, try something like this:\njava\nMaterialDialog dialog .....\nmEditText = dialog.getInputEditText();\nif (mEditText != null) {\n   mEditText.setOnKeyListener(this);\n   mEditText.setFilters(INPUT_FILTERS);\n   mEditText.setText(PrefHelper.getUserName());\n   mEditText.requestFocus();\n   mEditText.post(new Runnable() {\n      public void run() {\n          mEditText.selectAll();\n      }\n   });\n}\nIf it doesn't work, you may need to search StackOverflow or something. It's not related to dialogs, just edit texts in general.\n. Use a custom view \n. Duplicate of many issues \n. That has nothing to do with this library specifically. \nYou'd probably need your own logic to prevent duplicate dialogs. \n. It'd be easier to make a subclass of MaterialListPreference and use a custom adapter.\nThe prefix wouldn't be android: either, it would be a custom prefix.\n. This doesn't sound like it's really related to this library, as much as trying to do too much in a dialog.\nYou could use a custom list adapter that modifies text size and gravity, though.\n. The current gravity is center_vertical because that's what stock dialogs use, and that's what the Material guidelines specify (which is the purpose of this library).\nIf items are too long for a dialog, you could put them in a basic Activity that displays a list and uses Activity results.\n. I think you can close the issue yourself too\n. Are you not familiar with how gravity works on Android Jellybean and above?\nLeft is replaced with start, right is replaced with end. I updated the README, that was a typo.\n. On RTL devices, right and left get flipped around automatically. Start becomes right instead of left, and end becomes left instead of right.\n. I don't feel like this is necessary.\nUsers can get direct access to the EditText instance if they need to do this.\n. This wouldn't really be an issue with this library as much as it would be an issue with how Android measures views. \nI'm assuming that happens because if you don't use a ScrollView, Android will try to fit all of the content in the dialog on screen. If you do use a ScrollView, it can use a comfortable max height and allow content to scroll. I've never had issues with this though. \n. I don't think that would be any different. That's already what the library does for you. \nYou could probably make a custom ScrollView implementation or another parent layout implementation that measures itself differently. \nI can't do too much right now cause I just went through oral surgery for my wisdom teeth. So if you could look into it more that'd be helpful. \n. I don't really think this will change anything. I'd assume the major difference is that the v7 version uses AlertDialogCompat from AppCompat, which will get the same result this library does for the most part.\n. I'm assuming this requires an additional dependency that would increase the overall size of the library?\n. I can't seem to find any related imports.\n. Well Material Dialogs uses its own dialogs, pulling theme attributes on its own. I think support preferences would just being doing what this library already does.\n. Well this will probably have to wait until https://github.com/afollestad/material-dialogs/issues/642 is complete.\nI can't include more libraries as dependencies in this one.\n. So I looked into this a bit more, and it's a bit more complex than changing extended classes (between packages).\nThe new compat preference classes completely change the way everything is handled. Rather than the preference classes showing their own dialog, a central Preference Manager class is invoked to display dialogs. The preference classes no longer register and unregister themselves from Activity dismissal listeners, the preference manager must do that too. I'm not yet sure if severing the connection to the preference manager (in order to display custom dialogs) is a good idea.\n. Closing this for now.\n. Search StackOverflow\n. I'm unable to reproduce this issue. It's possible but unlikely it'd be due to the Design Support lib.\n. Sorry, I have no idea what could be wrong. It has to be related to something in your themes though.\nIf you look at the sample project, the Main Activity is using the AppCompat's Light.DarkActionBar theme. So I'm assuming something in MaterialNavigationDrawerTheme.Light.DarkActionBar is messing with your theme.\n. You can now manually set labels in version 0.7.9.1\n. The current behavior is how Android dialogs behave. \nIf you need a long form, e.g. for creating new users, you probably shouldn't be using a dialog; you should be using a simple Activity. \n. 0.7.9.1 didn't change anything related to Gradle, it only added some features to the ColorChooserDialog.\nI have not had any issues related to Gradle or Build Tools in any of the production apps I use this library in, so unfortunately there's not too much I can do.\n. 0.7.9.0 and 0.7.9.1 both use Build Tools v23 and SDK v23, I have no issues. \nIt must be something specific to your setup, e.g. your dependencies using conflicting versions. \n. The same way you'd do it with a regular dialog, MaterialDialog is just an android.app.Dialog.\n. It looks like you're using Gingerbread in those screenshots? RTL support does not natively exist below Android Jellybean.\n. Although it happens on Android 6.0 Marshmallow with RTL forced.\n@teslacoil looks like we may've missed something in the layout code?\n. @fangzhzh yeah, I tested it on Marshmallow. \nI'll solve the issue when I have more time. \n. Fixed:\n\nAgain, native RTL support only exists on API 17 (Android 4.2 Jellybean) and above.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.0.0\n. Well first of all, you were 100-200 versions behind, maybe more. The latest is 0.7.9.1.\nI'm assuming you're not using AppCompat in your Activity theme, which is required. You have to also have the colorAccent attribute set to a color, if you're not using global theming attributes or manually setting accent/widget colors from the dialog builder.\n. Probably not. \nTry https://github.com/borax12/MaterialDateRangePicker or https://github.com/wdullaer/MaterialDateTimePicker, for now.\n. Both of the above have difference purposes, but they both look very nice.\n. This library generally requires AppCompat themes to work correctly, and the DialogFragment used there is also a v4 support library Fragment thus requiring a support Fragment manager. \n. Should be fixed for Android 4.0+ in the upcoming release.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.0.0\n. New important update related to this: https://github.com/afollestad/material-dialogs/releases/tag/0.8.1.0\n. Well if you're using Proguard you should know how it works.\nYou need to -keep the classes that are being removed.\n. You need to pass the name of the Activity class, rather than just AppCompatActivity. If your Activity was called MainActivity:\njava\nnew ColorChooserDialog.Builder((MainActivity) getActivity(), R.string.title)\n        ...\n        .show();\nThe constructor specifies that it requires an AppCompatActivity which implements ColorCallback.\n. I have no build issues. \nBy the look of the error, Android Studio is looking in the wrong folder (AppCompat 23.0.0 != 23.0.1). \n. Make sure you have the latest updates from the SDK Manager. \n. No problem!\n. It has nothing to do with RTL:\n\nUnfortunately, I think it's a compatibility issue with Android 2.x that I can't fix.\n. Well, evidently it's not, because I tested it as shown above.\nI'm guessing it's related to something else, e.g. the version of Android you're using (Gingerbread?).\n. @mkonicek I'm not sure what you're talking about, this library and issue have nothing to do with React Native\n. inputMaxLength() will be deprecated in favor of a new method called inputRange() in version 8.0.0.\nIt will allow a min and max length to be specified.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.0.0\n. Not really sure what you mean. I just tested this and it works fine:\njava\nnew MaterialDialog.Builder(this)\n        .title(R.string.socialNetworks)\n        .items(R.array.socialNetworks)\n        .itemsCallbackMultiChoice(new Integer[]{1, 3}, new MaterialDialog.ListCallbackMultiChoice() {\n            @Override\n            public boolean onSelection(MaterialDialog dialog, Integer[] which, CharSequence[] text) {\n                // TODO\n                return true;\n            }\n        })\n        .positiveText(R.string.choose)\n        .showListener(new DialogInterface.OnShowListener() {\n            @Override\n            public void onShow(final DialogInterface dialog) {\n                final Handler handler = new Handler();\n                new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        // Updates multi choice items after 2 seconds\n                        try {\n                            Thread.sleep(2000);\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                        final MaterialDialog md = (MaterialDialog) dialog;\n                        handler.post(new Runnable() {\n                            @Override\n                            public void run() {\n                                md.setItems(new CharSequence[] { \"Hello\", \"Test\", \"How are you?\" });\n                            }\n                        });\n                    }\n                }).start();\n            }\n        }).show();\n. You'll need a custom view. \n. I know, I'm working on it, thanks\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.0.0\n. Version 0.7.6.0 is very, very old, so unfortunately no, I can't verify it\n. Newer build tools splits your layouts automatically so that those are only\nused on the API levels that support it. That can't be the issue.\n. I updated the original comment for syntax highlighting.\nIt appears this issue is specific to Samsung, like many bugs in the Android ecosystem are (unfortunately): https://code.google.com/p/android/issues/detail?id=60055\n. I haven't been able to reproduce the issue. \nBut make sure you're using a new version of Build Tools, like the version used by this library. Build Tools should separate resource files into two separate versions (for RTL support and non-RTL support). \n. Looking into it now. I should note you don't need to switch device languages to Arabic in order to test RTL, there's a \"Force RTL Layout\" option in the Developer Options.\n. I know, that's expected. \n. Fixed for the next release.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.0.1\n. You're welcome \ud83d\ude00\n. @timrae as mentioned in the other issue you mentioned me in, Bintray is no longer used anyways. \n. The library is now on jCenter, as an alternative to JitPack.io. jCenter is Android Studio's default Maven repository.\nSee the README for updated dependency info: https://github.com/afollestad/material-dialogs#gradle-dependency\n. If you use a custom adapter, selection has to be handled manually. So you want to be able to convert custom objects to strings (e.g. via toString())?\nHave you actually read the specs? They're on the left.\nhttps://www.google.com/design/spec/components/dialogs.html#dialogs-behavior\n. I don't really think converting objects to strings is something that needs to be in the library. You could construct your own array fairly easy, CharSequence and String are interchangeable.\n. @jeetdholakia https://github.com/afollestad/material-dialogs#gradle-dependency\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.0.1\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.0.1\n. Hmm. Make sure you're using version 23.0.1 of Google libs (AppCompat, Support Library, etc.) in your own app. \n. This code is in no way related to this library. \n. But you're probably using a non-support library Fragment with the support Fragment Manager. \n. Hmmmm. \nDo you use RecyclerView in your app? Make sure you're using version 23.0.1, it could be interfering with the version the library uses. \n. If you're using Build Tools 23.0.1 too, I'm not really sure what the issue could be. \nI'm using the latest in 5 or so production apps with no issue. \n. I have, I've used it with many different combinations of dependencies. Very odd. \n. It should be, or at least it's supposed to be included automatically.\n. @plusCubed ohhh, I was wondering what that property is for.\nWe need to keep @aar cause I'm using JitPack.io now. I'll update the README to include the transitive property. I noticed MaterialDrawer (https://github.com/mikepenz/MaterialDrawer) requires that property too.\n. @elsennov rather than including the RecyclerView dependency in your own app, just use this:\nGradle\ncompile('com.afollestad.material-dialogs:core:0.8.0.1@aar') {\n    transitive = true\n}\n. It might be helpful to see more of the stack trace. But I can look into this later. \nI don't think it would be necessary to put this into the library. I should also note that 0.7.8.0 isn't the latest release. \n. Actually that info will be enough. \n. @inteist I'm not able to reproduce this issue, there's no crash.\n0.7.8.0 is actually relatively old now, so it probably was fixed before.\n. Well, the current version is 0.8.0.1 and it's now hosted on JitPack.io instead of jCenter. If I remember correctly, 0.7.9.x may or may not have changed something related to view inflation.\nBut, DialogInit.init(this) handles inflating views and adding them into the dialog view. As long as init() isn't invoked multiple times, there shouldn't be any issues with views being added when they already are owned by another parent.\n. Glad you were able to figure it out\n. @mori-honest hmm, weird. That should never happen. I implemented a workaround just in case though. You can reference the associated commit:\nGradle\ndependencies {\n    // ...\n    compile('com.github.afollestad.material-dialogs:core:af108e6045@aar') {\n        transitive = true\n    }\n}\nIf you're using commons too, the version should match that of the core module.\n. Use the Android SDK Manager on your laptop. \n. Will be in the next release in a few minutes\n. You're welcome! There's a new section in the README for usage\nhttps://github.com/afollestad/material-dialogs/releases/tag/0.8.1.0\n. @yudhir no, it's called Folder Chooser Dialog for a reason. \nYou could copy the FolderChooserDialog class and modify it pretty easily though.\n. Odd. It works 100% of the time for me on 5.0 and 6.0. \n. There's gotta be a better way, there's a lot of people already using this release and most people won't know they need to include proguard rules.\n. @ashughes oh wow, it'd be great if that works.\nCan someone test if including the keep rule in the core module's proguard-rules.pro file works?\nThis will use the commit I just made:\nGradle\ndependencies {\n    compile('com.afollestad.material-dialogs:core:2c8b12b824@aar') {\n        transitive = true\n    }\n}\n. I think I figured out why: http://stackoverflow.com/a/30801516\nI'll have another commit to try in a second.\n. How about this?\njava\ndependencies {\n    compile('com.afollestad.material-dialogs:core:b65f1056b4@aar') {\n        transitive = true\n    }\n}\n. For now, I was testing it with debug too, to make sure it works.\nIf I only include -keep class com.afollestad.materialdialogs.internal.progress.** { *; }, I get a bunch of errors saying that various classes and interfaces throughout the library cannot be found.\n. @ashughes \nGradle\ndependencies {\n    compile('com.afollestad.material-dialogs:core:354cbe9316@aar') {\n        transitive = true\n    }\n}\n. @ashughes thanks for all the information!\nJust to make sure everything is alright for a release, can you test this one more time?\nGradle\ndependencies {\n    compile('com.afollestad.material-dialogs:core:8d203ec223@aar') {\n        transitive = true\n    }\n}\n. @ashughes woops, that's supposed to reference the sample app's own proguard file (which contains some rules that fix common Samsung issues with AppCompat).\nThanks for the help!\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.1.0\n. Looks like another related issue popped \nhttps://github.com/afollestad/material-dialogs/issues/714\n. https://github.com/afollestad/material-dialogs#selectors\n. Yeah, changing the color that only applies above Lollipop wasn't a\nnecessary feature IMO.\nYou may want to look into the theme attribute that ripples get their color\nfrom. You can change it globally in your app if you wanted to.\n. In the next release, it will correctly use the colorControlHighlight value for ripples. \nI'll actually just add a way to manually set it, too. Thanks for the suggestion.\n. When I publish the next release, it will respect the controlColorHighlight attribute from your Activity theme.\nYou will also be able to use a new md_btn_ripple_color attribute specifically for this library, and you'll be able to set it from the Builder (buttonRippleColor(int), buttonRippleColorRes(int), buttonRippleColorAttr(int)).\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.1.0\n. I haven't noticed any issues with it.\n@plusCubed any ideas?\n. @zouliping can you check if this version fixes the issue for you?\nGradle\ncompile('com.afollestad.material-dialogs:core:2e4f388992@aar') {\n    transitive = true\n}\n. @doc-rj the commit in a comment above fixes that error.\n. @doc-rj well the issue creator said it made that error go away but it still doesn't work. So it's not quite ready yet.\n. I haven't been able to reproduce this issue. \n. Android doesn't allow non-system apps to display dialogs outside of an Activity, nothing can be done about it.\nWhat I've done is put a DialogFragment in an Activity (since dialog fragments survive orientation changes). The Activity uses a translucent theme so you can't see it. When the dialog closes, it finishes the Activity behind it.\n. This is kind of a duplicate of another very old issue, but you can't.\nYou'll need to dismiss the first dialog and show a second. \n. Check out the multi-choice dialog example in the sample project.\n. You should read the change log for 0.8.0.0\n. To be more specific, you need the commons package.\n. Unfortunately I can't reproduce this issue. There must be something wrong on your end.\nI use this library is 5 production apps, a few use the color chooser, a few don't.\n. Not 100% sure what you mean, but this library is only intended to implement Materialized versions of AlertDialogs. Nothing more. \n. Oh okay, that'd require you to make a custom view. It wouldn't be too difficult actually \u263a\n. Read here: https://github.com/afollestad/material-dialogs#core\n. This is cool, thanks.\nThe only issue with this is that you removed the overridden final methods from ButtonCallback. They prevent Android Studio from suggesting that those methods be overridden.\n. I'm curious, how did you get lambda expressions to work with Android?\nAndroid technically does not support Java 8.\n. Oh nevermind, you used retrolambda\n. This exception occurs from an Android error: http://stackoverflow.com/questions/4343393/badtokenexception\nThere's nothing I can do to change it.\nIt means your dialog tries attaching to a Context that isn't an Activity, or an Activity that isn't fully visible or was recently closed. I'd recommend using a DialogFragment to wrap your Dialog, that should help avoid this.\n. You should read the README on the front page or look at the same project. \n. Yeah I'm guessing you have an old version of the library or something. \n. You'll have to make your own implementation for this.\nEither using a singleton in your Activity:\n``` java\npublic class MainActivity extends Activity {\nprivate static MaterialDialog mDialog;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    mDialog = new MaterialDialog.Builder(this)\n            .title(\"Hello\")\n            .content(\"Hi\")\n            .dismissListener(new DialogInterface.OnDismissListener() {\n                @Override\n                public void onDismiss(DialogInterface dialog) {\n                    mDialog = null;\n                }\n            }).build();\n}\n\n}\n```\nOr you could use DialogFragments:\n``` java\npublic class MainActivity extends Activity {\nprivate final static String TAG = \"[MY_DIALOG]\";\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    MyDialog dialog = MyDialog.create(\"Hello\", \"Hi\");\n    dialog.show(getFragmentManager(), TAG);\n}\n\nprivate MyDialog getActiveDialog() {\n    return (MyDialog) getFragmentManager().findFragmentByTag(TAG);\n}\n\n/*\n *  DialogFragment class, could go in a separate file\n */\npublic static class MyDialog extends DialogFragment {\n\n    public static MyDialog create(String title, String content) {\n        MyDialog dialog = new MyDialog();\n        Bundle args = new Bundle();\n        args.putString(\"title\", title);\n        args.putString(\"content\", content);\n        dialog.setArguments(args);\n        return dialog;\n    }\n\n    @Override\n    public Dialog onCreateDialog(Bundle savedInstanceState) {\n        return new MaterialDialog.Builder(getActivity())\n                .title(getArguments().getString(\"title\"))\n                .content(getArguments().getString(\"content\"))\n                .build();\n    }\n}\n\n}\n```\nA big plus to DialogFragments is that they survive orientation changes; they remain open when you rotate your phone, and the arguments (in the Bundle remain so the dialog can rebuild itself).\n. Notice the getActiveDialog() method in the second example retrieves the Dialog from the Activity's FragmentManager. It can be null if the dialog hasn't be shown yet.\n. The README mentions that will be introduced with version 0.8.2. \nThere's a method called callback() before that version. \n. Sorry, you'll have to use a newer version. \n. You can actually reference commits, this will give you 0.7.8.1:\n``` Gradle\nrepositories {\n    maven { url \"https://jitpack.io\" }\n}\ndependencies {\n    compile('com.afollestad.material-dialogs:core:69fe2f0@aar') {\n        transitive = true\n    }\n}\n```\nBut I wouldn't recommend using older versions.\n. The library is now on jCenter, as an alternative to JitPack.io. jCenter is Android Studio's default Maven repository.\nSee the README for updated dependency info: https://github.com/afollestad/material-dialogs#gradle-dependency\n. The library is now on jCenter, as an alternative to JitPack.io. jCenter is Android Studio's default Maven repository.\nSee the README for updated dependency info: https://github.com/afollestad/material-dialogs#gradle-dependency\n. Well that's a very old version so there's not much I can do. . @Naveentp 0.7.9.1 is very old and you're subjecting yourself to bugs and other problems by using an old version. Not to mention using JitPack instead of jCenter to resolve the dependency.. Sorry, jCenter was causing a lot of problems so I switched to JitPack.io a while ago. \n. @trevorrjohn I definitely wouldn't recommend using such an old version, but if you really need to use 0.7.8.0 you can reference the specific commit. 0.7.8.1 is basically 0.7.8.0 with some vital improvements:\nGradle\nrepositories {\n    maven { url \"https://jitpack.io\" }\n}\ndependencies {\n    compile('com.afollestad.material-dialogs:core:69fe2f0@aar') {\n        transitive = true\n    }\n}\n. Anyone still having issues, see this response from JitPack: https://github.com/jitpack/jitpack.io/issues/318\nI will be updating the project REAMDE also.\n. That magic all happens in MDRootLayout: https://github.com/afollestad/material-dialogs/blob/master/core/src/main/java/com/afollestad/materialdialogs/internal/MDRootLayout.java\nThis class is used as the root view in dialogs. It speeds up view drawing and avoids a lot of glitches, and it performs some logic like the divider visibility. It was mostly developed by the developer of Nova Launcher, though. He's contributed a lot.\n. @MDXDave I added this in the latest commit.\nThe ColorChooserDialog will automatically use 1 of 3 tags based on if it's a primary, accent, or custom dialog. I also added a utility method to make it easier:\n``` java\nColorChooserDialog primary = ColorChooserDialog.findVisible(this, ColorChooserDialog.TAG_PRIMARY);\nColorChooserDialog accent = ColorChooserDialog.findVisible(this, ColorChooserDialog.TAG_ACCENT);\nColorChooserDialog custom = ColorChooserDialog.findVisible(this, ColorChooserDialog.TAG_CUSTOM);\n```\nIf you don't want to wait, you can reference the latest commit through Gradle for core and commons like this:\n``` Gradle\nrepositories {\n    maven { url \"https://jitpack.io\" }\n}\ndependencies {\n    compile('com.afollestad.material-dialogs:core:f423baf7cc@aar') {\n        transitive = true\n    }\n    compile('com.afollestad.material-dialogs:commons:f423baf7cc@aar') {\n        transitive = true\n    }\n}\n``\n. Those versions are no longer available. They were on  jCenter. \n. Basic list items and single/multi choice list items will look better with multi-line text now.\n. By the way,MaterialSimpleListAdapter` is intended for dialogs with icons, like:\n \nFrom the guidelines. If you want a dialog with only text, use basic list dialogs.\n. This isn't something I have control over. I've experienced that on both Lollipop and Marshmallow, and in other apps. \n. This is probably related to this library: https://github.com/DreaminginCodeZH/MaterialProgressBar\nBut I'll be updating the used classes soon.\n. You can't, if you could it would be in the README. \n. You can get a reference to the action button views and do it yourself. See the README. \n. Android 5.0.1 had some issues related to that. It was fixed in 5.1. And now 6.0 is out. \n. I'd recommend looking at the code instead of opening an issue. \n. No, use a custom view\n. @AshkanImmortal sorry, I have no idea what could be wrong. I've had no problems with that.\nAlthough you shouldn't be calling dialog.setSelectedIndex(which) in the callback, that's redundant.\n. @AshkanImmortal what? No. It should just work.\nSee the single choice list dialog example in the sample project: https://play.google.com/store/apps/details?id=com.afollestad.materialdialogssample\n. I've confirmed that it works fine:\njava\nnew MaterialDialog.Builder(this)\n        .title(R.string.socialNetworks)\n        .items(R.array.socialNetworks)\n        .itemsCallbackSingleChoice(2, new MaterialDialog.ListCallbackSingleChoice() {\n            @Override\n            public boolean onSelection(MaterialDialog dialog, View view, int which, CharSequence text) {\n                Toast.makeText(getApplicationContext(), which + \": \" + text, Toast.LENGTH_SHORT).show();\n                return true; // allow selection\n            }\n        })\n        .alwaysCallSingleChoiceCallback()\n        .positiveText(R.string.md_choose_label)\n        .show();\n. As mentioned in the issue, it's not intended for that. \n. Your Activity themes all have to be based on the AppCompat themes. \n. This isn't completely necessary in my opinion. It'd also be quite inconsistent, and changing every occurrence in the README will confuse people.\n. @krokyze well, the cancel listener and show method are both handled by android.app.Dialog. None of that logic is handled by this library. \nSo if I had to guess, it would be a Android framework issue or an issue with your device.\n. The show/cancel/dismiss listener example in the sample project works on my Nexus 6, also:\nhttps://play.google.com/store/apps/details?id=com.afollestad.materialdialogssample\n. Sorry, I don't think there's anything I can about this. The cancel listener isn't part of my own logic, it's up to the device implementation (which can change with different manufacturers).\n. You can use a custom layout for this, just put an EditText above a ListView in a LinearLayout, and use it as the dialog custom view. You'll need a custom adapter set to the ListView, obviously.\n. Sorry, no, you'll have to use a custom view. I can't add too many small pre-made dialog types to the library.\n. Why didn't you check instead of opening an issue?\nThere's two ways to get a sample project without downloading code. \n. But yes, it's supported \n. Wrapping in a ScrollView literally means wrapping your content in a ScrollView \ud83d\ude1c\n``` java\n\n    <LinearLayout>\n\n            // Children here\n\n    </LinearLayout>\n\n\n```\n. Oh, but there's a ListView in there too. It'll scroll once the dialog is at max height, in my experience. But you can't put a ListView inside of a ScrollView without issues.\n. Hmmm, that's very odd. I'll look into it.\n. I believe this will no longer apply with v2. You'll probably need to use version 23.1.0 of Google's libraries, and use Build Tools 23.0.1. \nOtherwise there's not much I can do to help unfortunately. \n. I've never been able to figure it out.\nEvery time I publish a release, I immediately reference it in all of my personal apps and employer's apps, and it works fine.\nJitPack.io also reports that the latest version built successfully their servers: https://jitpack.io/#afollestad/material-dialogs\n. I'd have to guess that most of the people who have these errors aren't setting up their Gradle files correctly.\n. @mmkgitpush456 as long as it looks like this in your module build.gradle file (not your project's build.gradle file), there shouldn't be anything wrong:\n\n. Great, glad it works!\nYou're welcome\n. The library is now on jCenter, as an alternative to JitPack.io. jCenter is Android Studio's default Maven repository.\nSee the README for updated dependency info: https://github.com/afollestad/material-dialogs#gradle-dependency\n. Done\n. It's not coming back to Bintray. It's being hosted on JitPack.io, which automatically creates builds from GitHub using the tag/release system.\nYou shouldn't use a version that old, but if you really need to, find the commit ID. JitPack lets you reference commit IDs in your Gradle file.\n. For an example:\n``` Gradle\nrepositories {\n    maven { url \"https://jitpack.io\" }\n}\ndependencies {\n    compile('com.afollestad.material-dialogs:core:6e7bf4de8d@aar') {\n        transitive = true\n    }\n}\n```\nI'm referencing the commit hash 6e7bf4de8d, which is the most recent commit. If you can find a commit labeled 0.7.3.0, it can be referenced like the above.\n. Generally when someone says a library is too new, they're too lazy to update when they should \ud83d\ude09there's thousands of vital changes that you would be missing out on if you use an older version like that.\nI went back in the commit history for this library and found the right commit:\n\nJitPack likes the first 10 characters of the commit ID:\n\nYou can reference 0.7.3.0 with this:\n``` Gradle\nrepositories {\n    maven { url \"https://jitpack.io\" }\n}\ndependencies {\n    // other dependencies here\n    compile('com.afollestad.material-dialogs:core:66bf6645cf@aar') {\n        transitive = true\n    }\n}\n``\n.com.github.afollestadis the same ascom.afollestad`, I have a JitPack.io custom domains setup. Using @aar (Android Artifact) isn't optional in this case, without it the library wouldn't have any of the Android resources (e.g. layouts, dimensions, strings, etc.) that are needed to work.\nI hope you can figure it out! In the past, sometimes using older version of Google's libs (like AppCompat) in your project can interfere. Make sure you're using version 23.1.0 of Google's libs, and Build Tools 23.0.1.\n. @ex3ndr taking it out on me does nothing. Blame it on JitPack.io. \nBye. \n. Anyone still having issues, see this response from JitPack: https://github.com/jitpack/jitpack.io/issues/318\nI will be updating the project REAMDE also.\n. I'll look into it.\nBy the way, I updated your comment for syntax highlighting. Markdown is better than HTML \ud83d\ude09\n. Since I'm using JitPack, you can get it now using the commit ID:\n``` Gradle\ndependencies {\n// ... other dependencies here\ncompile('com.afollestad.material-dialogs:core:68fd646664@aar') {\n    transitive = true\n}\ncompile('com.afollestad.material-dialogs:commons:68fd646664@aar') {\n    transitive = true\n}\n\n}\n```\n. @peppe130 passing 0 for the cancel button should hide it, as long as you're using version 0.8.4.2 of the library.\nAlso, FolderChooserDialog is a DialogFragment, so you can call setCancelable on it.\njava\nFolderChooserDialog dialog = new FolderChooserDialog.Builder(this)\n    .cancelButton(0)\n    .build();\ndialog.setCancelable(false);\ndialog.show();\n. You're welcome!\n. Weird, it doesn't happen to me \ud83d\ude2e\n\n. I don't plan on adding the ability to append colors to the existing palette.\nBut, you could copy the int[] and int[][] from the ColorPalette class and add your additional colors to them for use in your app. \nhttps://github.com/afollestad/material-dialogs/blob/master/commons/src/main/java/com/afollestad/materialdialogs/color/ColorPalette.java\n. That's a limitation of older API levels, I believe. \nI can't remember how I solved it in Cabinet. Do you remember, @plusCubed?\n. @plusCubed right, thanks; hopefully that helps, @subspider. It's only really an issue below Lollipop, if I remember correctly.\n. http://stackoverflow.com/a/16109336/309644\n. Oh yeah, I didn't notice that.\nI'll have it fixed soon.\n. Fixed for the next release\n. Unfortunately I have no idea what would cause that, and have no idea how it would be fixed.\nBut I'll leave it open. \nGingerbread tends to have a lot of unfixable issues, like https://github.com/afollestad/material-dialogs/issues/685.\n. I don't think anything can be done about this.\n. There's a README page for a reason \ud83d\ude1d\n. Sorry, I misread the question in my first response.\nI'll have this fixed.\n. The crash doesn't happen in my library, it's related to your selector XML. \n. You need to use inset selector drawables. Look at the drawables in core or in the sample project.\nhttps://github.com/afollestad/material-dialogs/blob/master/core/src/main/res/drawable/md_btn_selected.xml\n. It's possible if you show the dialog yourself on the click of a preference, but it can't be embedded inside of a Preference instance. It requires a support FragmentManager and AppCompatActivity to attach to show itself and send callbacks.\n. That's all possible with the custom view, see the sample project. \n. This is a duplicate of a few other issues.\nLast time I checked, it was an issue specifically with Android 5.0.1 that couldn't really be fixed. It doesn't happen on 5.1 or 6.0.\n. No, that's what android.widget.PopupMenu is for. This library is specifically for dialogs.\n. android.app.Dialog has a show() and dismiss() method. \n. Oh, that makes more sense.\nWhen you build a MaterialDialog, its layout gets inflated once based on the dialog type (including the 3 different types of progress dialogs). So there wouldn't be a way to switch between different dialog types; hiding the individual views would be the best way to do it right now.\n. It's better to just use two dialogs, that coordinate when they're shown and hidden.\n. You'll need to dismiss the progress dialog and show another to switch between dialog types, that's true with stock dialogs also. It's not intended to allow switching between multiple types in one dialog, the specific layout is inflated when you build it.\n\nFor loading with async data, yeah. That's more of a general Android question than a question for this library:\n``` java\nfinal MaterialDialog dialog = new MaterialDialog.Builder(this)\n   // setup...\n   .build();\nfinal Handler handler = new Handler();\nnew Thread(new Runnable() {\n    public void run() {\n        try {\n            Thread.sleep(3000);\n        } catch(Throwable ignored) { }\n        handler.post(new Runnable() {\n            public void run() {\n                dialog.dismiss();\n            }\n        });      \n    }\n}).start();\n```\nYou can avoid use of the Handler if you use runOnUiThread(Runnable) in an Activity, or View.post(View) on a View instance.\n. I updated your comment for correct spacing and syntax highlighting. Please do so for any future issues, otherwise it's hard to read.\n\nThe line numbers in the crash log don't match up with anything in the current codebase, which would suggest you're using an old version.\n. The line numbers are probably off because code has changed in the repository which hasn't been released yet.\nThe only thing that I think could cause this is if the .items() array got out of sync with what is selected. sendMultichoiceCallback() looks like this:\njava\nprivate boolean sendMultichoiceCallback() {\n    if (mBuilder.listCallbackMultiChoice == null) return false;\n    Collections.sort(selectedIndicesList); // make sure the indicies are in order\n    List<CharSequence> selectedTitles = new ArrayList<>();\n    for (Integer i : selectedIndicesList) {\n        selectedTitles.add(mBuilder.items[i]);   // the error is probably here\n    }\n    return mBuilder.listCallbackMultiChoice.onSelection(this,\n            selectedIndicesList.toArray(new Integer[selectedIndicesList.size()]),\n            selectedTitles.toArray(new CharSequence[selectedTitles.size()]));\n}\nBut I've never had any issues with that, so I'm assuming your array gets modified to be smaller after the dialog is open or something.\n. Yeah, like the README shows in the Multi Choice List Dialogs section, you pass null to indicate no preselection. -1 for single choice lists.\n. And no worries, there's a lot of cool stuff you can do with Markdown on GitHub \ud83d\ude00\n. Ohhh, so you were passing -1 inside an Integer array there? That makes a lot more sense.\n. Glad I could help! \n. I don't fully understand what you mean. I develop exclusively on Lollipop and Marshmallow, there should be no issues with progress drawables. I also have tested below Lollipop and it was working.\n. No, you can't use Android libraries from JARs. JARs do not contain Android resources like layouts, dimensions, strings, etc.\nThat's what AAR packages are for.\n. There quite a few closed issues related to Eclipse, I believe other people had solutions for importing into Eclipse. I do not use Eclipse myself though, and I'd recommend not using\u00a0it for Android dev.\nhttps://github.com/afollestad/material-dialogs/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aclosed+eclipse\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.1\n. Try a newer version and let me know if it still happens.\n0.8.5.0 was released recently, 0.8.4.2 and 0.8.4.0 came before that.\n. Also, you don't need to call dismiss() in the action button methods. The dialog will always dismiss itself unless you disable autoDismiss.\n. I may've, I remember hearing about something similar to this. It's been too long to know for sure (a month is a long time with release cycles).\n. I'll double check though.\n. Another quick tip, you should use android.R.string.cancel instead of R.string.cancel, Google handles all the localization that way \ud83d\ude09\n. You're right, I can reproduce it. Currently, the action button callbacks are called before the itemsCallbackMultiChoice callback. Logically it makes sense, the click of the action button triggers the selection callback.\n. There's two options for you here:\n1. Call .alwaysCallMultiChoiceCallback() on the Builder, it will cause the selection callback to be invoked every time you select or unselect a checkbox. You can keep track of the booleans until the action button is pressed.\n2. Make a call to doSomething(boolean, boolean) on the last line of your callback. The callback is currently only called right after you press the action button, so it would have the same effect. You can remove the use of onPositive and onNegative altogether.\n. You're the only one that's had any problems thinking the multi-selection API is \"unintuitive\". It's built to work the way it does on purpose, changing that now would change the expected behavior for many developers, including that of Nova and Action Launcher. In my opinion, a lot of people wouldn't want the selection result until after the user confirms it. \n. And also, you don't have to \"scour through the documentation line by line\", I have an enormous document with organization and a table of contents to explain different components.\n. I do see your point, I'm gonna brainstorm this a bit. \n. Hmmmm, I remember @plusCubed contributing something that added that. Or we were allowing AppCompat to handle the shadows. Something may've changed, we'll have to look into it.\nThank you!\n. I don't really feel like this is an issue. This is what MD looks like in a KitKat emulator:\n\n. There's a large tutorial for a reason \ud83d\ude1b\n. I'll need a little more details, e.g. the code used to show the color chooser so I can see the combination of settings you used. \nAlso, make sure you're using the latest version (0.8.5.0). \n. I was just gonna say, I can't reproduce the issue \ud83d\ude00\nGlad it works now!\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.1\n. Hmm, odd. Thousands of apps use this library and I've never received this error before.\nI don't think it's directly related to this library.\n. This is a duplicate of other closed issues. You do it the same way you would do it with a regular android.app.Dialog\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.1\n. Technically you don't have to give credits, but if you want to you can do so however you choose \n. See the custom view section in the README, or the custom view example in the sample \n. I know, it's not a big deal.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.1\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.3\n. I was gonna fix this when I had a bit more time, but you'd only need to check for Marshmallow (M, API 23) and above. This permission model doesn't exist on KitKat or Lollipop.\n. Fixed with:\njava\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M &&\n        ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.READ_EXTERNAL_STORAGE) !=\n        PackageManager.PERMISSION_GRANTED) {\n    return new MaterialDialog.Builder(getActivity())\n            .title(R.string.md_error_label)\n            .content(R.string.md_storage_perm_error)\n            .positiveText(android.R.string.ok)\n            .build();\n}\nIn theory, ActivityCompat should always return true below API 23 but maybe there's a bug on API 15. So this is a good workaround.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.1\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.3\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.1\n. Hmmm, this should never happen since this library's proguard rules get merged with your app's.\nI'm guessing something is interfering somewhere.\n. I think I found the reason.\nThe Proguard rules file this library has uses old package names (when the MaterialProgressBar classes were integrated into this library's code base). I will have to update the Proguard rules.\n. @filipebezerra @alexwhb try this:\n``` Gradle\ndependencies {\n// ... other dependencies here\n\ncompile('com.github.afollestad.material-dialogs:core:3ebbc9549e@aar') {\n    transitive = true\n}\n\n}\n```\n. If no one reports back about the solution above, I'll close this issue in a few hours.\n. Did you guys forget to include something before?. Oh okay, glad you were able to figure it out!\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.1\n. Do you realize there was literally just two duplicate issues with the same problem?\n. You may want to report the issue to JitPack.io though \n. Two were posted yesterday, and one or two were a week or two ago \ud83d\ude09 thanks\n. See if the latest release works https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.1\n. The library is now on jCenter, as an alternative to JitPack.io. jCenter is Android Studio's default Maven repository.\nSee the README for updated dependency info: https://github.com/afollestad/material-dialogs#gradle-dependency\n. It's intended to not be scrollable, I don't think it would look too good if it was.\nIs there a device it gets cut off on?\n. It turns out it's not as simple as just wrapping it in a ScrollView. Since it's in a dialog, measuring is a bit different. I'll keep trying different ways.\n. Fixed\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.1\n. I haven't had this issue in any of the production apps using the library.\nNothing appears to be wrong above. I'll be publishing a new release soon, so that'll hopefully help.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.1\n. Anyone still having issues, see this response from JitPack: https://github.com/jitpack/jitpack.io/issues/318\nI will be updating the project REAMDE also.\n. Your app's proguard rules are probably interfering or something. You need to keep all Material Dialogs classes.\n. I'm assuming you're using version 23.1.1 of the support library?\n. It'll work whenever I release a new version of Material Dialogs that uses the new Support Library\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.1\n. There's a big tutorial on the front page. \n. It's the first thing you see when you browse to this project.\n. https://github.com/afollestad/material-dialogs\n. Set wrapInScrollView to false and use your own ScrollView. \n. When wrapInScrollView is true (in .customView(int, boolean)), default content inset padding is added around your custom view on purpose.\n. Well you're using two different tags fhsre. 0.7.8.1.0 and the version with a v in front of it are different. \nBut those older releases were originally hosted on jCenter, I switched to JitPack for newer releases. Although JitPack should still find them in theory. \n. You shouldn't be using old builds anyways, there's too many things that had to be fixed since then. \n. Sorry for the late response, you can reference old versions by commit hash ID, also.\n. No, those are incomplete JavaDoc errors.\n. Well, a much cleaner solution would be:\njava\nMaterialDialog dialog = builder.build();\nImageView icon = (ImageView) dialog.getView().findViewById(R.id.icon);\nBut I'll add a getter method.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.2\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.3\n. Why is this necessary?\n. Good find, I must've missed that. Thanks. \n. That would be great \n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.3\n. The library is now on jCenter, as an alternative to JitPack.io. jCenter is Android Studio's default Maven repository.\nSee the README for updated dependency info: https://github.com/afollestad/material-dialogs#gradle-dependency\n. Thanks again!\n. If you pass a preselected color it will default to the presets view. \nI'll try to improve this. \n. There's an example in the README and sample project. \nPass a preselected color which exists in the palette. \n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.2\n. That's a limitation of DialogFragments, android.app.Dialog dismiss listeners are ignored.\nYou override onDismiss or onCancel in your DialogFragment subclass.\n. This is one of the most unspecific issues I've ever had reported. This isn't a problem with my library.\nYour app is probably using a different version of AppCompat (older) than what this library uses.\nhttp://stackoverflow.com/questions/32441420/attribute-barlength-has-already-been-defined\n. That doesn't apply, this library prefixes all attributes. None of them are remotely close to barlength. \nIt has to be something else in your app, like mismatched library versions. \n. This isn't specific to this library. \nDismiss your dialogs when your Activities close/pause. \n. If you could, there'd be documentation for it.\nYou'll need a custom adapter. https://github.com/afollestad/material-dialogs#custom-list-dialogs\n. The library is used by thousands and it works fine. \nThe progress bar library is only used on 14+. \n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.2\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.3\n. Thank you\nhttps://github.com/afollestad/material-dialogs/releases/tag/0.8.5.2\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.3\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.2\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.3\n. Undid #848 which fixes it.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.3\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.3\n. What version are you using? This was fixed in release 0.8.5.0, the current is 0.8.5.2.\n. To be more specific, the logic that prevents layouts from being overridden now is here:\nhttps://github.com/afollestad/material-dialogs/blob/master/commons/src/main/java/com/afollestad/materialdialogs/prefs/PrefUtil.java#L22\n. Added a app:useStockLayout=\"true\" attribute which will force preferences to use the stock layout (not override the layout).\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.3\n. I don't use RxJava\n. https://github.com/afollestad/material-dialogs/pull/861\n. No, a callback instance wouldn't survive orientation changes. The color chooser is a DialogFragment. \n. @bigfoot90 that's not a valid commit hash for JitPack. JitPack uses the first 10 characters of the full commit ID. You should be using the @aar suffix too.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.3\n. The library is now on jCenter, as an alternative to JitPack.io. jCenter is Android Studio's default Maven repository.\nSee the README for updated dependency info: https://github.com/afollestad/material-dialogs#gradle-dependency\n. Thanks!\n. Like @Morocat said, dialog.setSelectedIndex(which) is redundant, that line should be removed.\nEvery time you show the dialog, you're setting the preselected index to 0.\n. Thanks, I replaced it with a generic w.x.y.z version instead.\n. You can't, this library follows Material specs\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.3\n. There shouldn't be any change required as far as I know. \n. I don't believe there's an additional API, they're loaded the same way a regular drawable is loaded. \n. Passing a callback like that is a terrible idea. If you rotate the device, the dialog would still be open but that callback would be gone. \n. https://github.com/afollestad/material-dialogs/releases/tag/0.9.0.0\n. The current dimensions are normal\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.3\n. Sorry, there's not much I can do to answer this. I use what's shown in the README in a dozen apps and it works fine. \n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.3\n. Use Flipboard/bottomsheet. \n. It's not a dialog, a dialog is a completely separate component.\nA bottomsheet is just a regular view that overlays other UI. https://github.com/Flipboard/bottomsheet\n. Can you comment with the actual stack trace so I can find the line number?\n. Sorry, I don't think that's necessary for this library.\n. Sorry, I'm not aware of any workarounds.\n. You can't use JARs for Android libraries, only AARs. You can reference old\ncommits by replacing the version name with the first 10 characters of a\ncommit ID.\n. That's a feature of JitPack.io, by the way.\n. That class isn't meant to be modified, it pulls its items from MaterialDialog.\n. You should never have a progress dialog with no content in the first place. It goes against the guidelines this library follows. \n. Updated your description for correct code formatting and syntax highlighting. \n\nYou can use the setContent(CharSequence) method which I believe is included in the documentation. \n. Oh, you'll have to build a new dialog every time. Every dialog type has a separate layout that gets inflated when it's built. \n. Sorry, no. This library is intended to follow the design guidelines. \n. Currently, no\n. Since this library is intended to follow the Material Design guidelines and normal dialog interaction, I don't think that's necessary to integrate.\n. Well, first, you should be using 0.8.5.3:\nGradle\ncompile('com.github.afollestad.material-dialogs:commons:0.8.5.3@aar') {\n    transitive = true\n}\nBut, you probably need to add rules to your app's Proguard file:\n-dontwarn\n-ignorewarnings\n-keep class android.support.design.** { *; }Gradle\n. This library uses AppCompat for quite a few things, and most new apps should too, so AppCompatActivity/FragmentActivity usage is necessary. \nEven back to API 16, AppCompat is extremely useful and has a lot of features which are used.\n. One more thing, this library is designed to be backwards compatible, so yes there's an obvious reason to use the Support versions.\n. There's nothing preventing it from working in a Fragment, although the callback goes to the Activity because the DialogFragment needs to attach to that. DialogFragments survive through orientation changes, even the callback (when it's the Activity). \n. Set it on the actual custom view. \njava\ndialog.getCustomView()\n. I don't think it's necessary to include that in the library itself\n. This library is intended to follow the Material Design guidelines, doing that wouldn't follow the guidelines at all. \nYou could try changing the background color through the Builder though. \n. Well generally if you want to put a centered progress indicator, you'd just use a ProgressBar centered inside of your layout ;)\nSuch as:\n``` xml\n\n    <LinearLayout id=\"@+id/content\">\n    </LinearLayout>\n\n    <ProgressBar layout_gravity=\"center\" />\n\n\n``\n. When it comes to dialogs, there is no example of any dialogs in the guidelines that do not have a white or dark gray background. A transparent dialog would be an anti-pattern in my opinion. :)\n.setProgress(int)is what you'd use there, notincrementProgress(int)`.\n. With a custom view. \n. Try using com.github.afollestad instead of com.afollestad. \n. It's been like that for months, that's what's displayed in the README :)\n. Read the documentation\n. Sorry, I'm not sure what the problem is.\nSomething must've been copied to the wrong place.\n. You need to use version 23.0.2 of all those libs. \n. The library is now on jCenter, as an alternative to JitPack.io. jCenter is Android Studio's default Maven repository.\nSee the README for updated dependency info: https://github.com/afollestad/material-dialogs#gradle-dependency\n. It hasn't been published. \n. This library uses Material guidelines. \n. It's working fine on my end\n\n. This can be fixed by setting the backgrounds of the radio buttons and check boxes to @null on API 21+. I'll fix it in a bit.\n. Thanks\n. No, but you can put one in a custom view\n. You'll need a custom adapter with your own logic\n. JitPack works using tags on GitHub, so no. \n. JitPack will automatically rebuild from existing tags. \n. I have custom domains, you can use com.afollestad with all of my libraries. \n. It should work as seen in the README\n. You may wanna check the tags to make sure the tag you're requesting exists. \n. Well, it looks like it's actually a build problem: https://jitpack.io/com/github/afollestad/material-dialogs/0.7.9.0/build.log\nIt's due to an out dated version of the Gradle plugin, you're probably going to upgrade to a newer version of the library.\n. You can always check on the JitPack page:\n\n. If you click the \"Builds\" button, it tends to cycle through other builds in my experience\n. The library is now on jCenter, as an alternative to JitPack.io. jCenter is Android Studio's default Maven repository.\nSee the README for updated dependency info: https://github.com/afollestad/material-dialogs#gradle-dependency\n. You'll need to create one on your own using a custom view. \n. This library isn't intended for that. You can use a PopupMenu from the Android framework.\n. This library passes that value directly to the Android framework so it can't be a bug. \n. If you're using it in a DialogFragment, you have to call setCancelable(boolean) on the DialogFragment instead \n. It's already been fixed in the code. \n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.5\n. The above won't work until JitPack installs version 23.2.0 of the Google libs repo.\n. Yeah, that's so dramatically different than a dialog (code wise) that I think it belongs in a separate library. Especially since it would take a lot of extra code to implement.\nI'd recommend using bottomsheet by Flipboard.\n. MaterialDialog#setContent(String)\n. That's already used in the code for this library\n. DialogUtils.hideKeyboard() is called here: https://github.com/afollestad/material-dialogs/blob/master/core/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java#L1810\nThe hideKeyboard() method is here: https://github.com/afollestad/material-dialogs/blob/master/core/src/main/java/com/afollestad/materialdialogs/util/DialogUtils.java#L222\n\nI haven't experienced any problems with this but I'll leave the issue open in case anyone else has.\n. @gorchg you really should use syntax highlighting and code formatting in GitHub comments. Otherwise it's impossible to read. I've updated your comment though.\nI've made the small change @rfazi suggested though.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.5\n. The above won't work until JitPack installs version 23.2.0 of the Google libs repo.\n. Convert the list to an array.\njava\nList<String> list = // ...\nString[] array = list.toArray(new String[list.size()]);\n. You're probably missing a dependency in your app such as AppCompat. \nI've never run into that issue, and haven't had any other reports of it.\n. You'll need to use a custom adapter\n. Updated your comments for syntax highlighting.\nUsing explicit language checking is not a good idea, though.\n\nI haven't had any issues with RTL languages though. It works fine with Arabic, for an example. So it's up to the device.\n. That's not true. https://www.google.com/design/spec/components/dialogs.html\nYou can use a custom selector if you want that behavior, though.\n. It does, it uses getSupportFragmentManager() since both the FileChooserDialog and FolderChooserDialog are Support Fragments.\n\nI've made them accept FragmentActivity (which is the base of AppCompatActivity), but they cannot accept a regular Activity. I usually use an AppCompatActivity and manually embed PreferenceFragments in its layout (like the sample of this library does).\n. Android Studio is the official standard. I can't help you. \n. Like I said, use Android Studio. \n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.5\n. The above won't work until JitPack installs version 23.2.0 of the Google libs repo.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.5\n. The above won't work until JitPack installs version 23.2.0 of the Google libs repo.\n. We choose not to include this on purpose.\nTravis Ci reports that this PR does not build, also.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.5\n. The above won't work until JitPack installs version 23.2.0 of the Google libs repo.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.6\n. I have, it works fine on my Nexus 5X and 6P.\n. There isn't a good solution for this because it's a DialogFragment. Callbacks (interfaces) are not Serializable so they cannot be maintained through orientation change without passing it again when an Activity is recreated.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.5\n. The above won't work until JitPack installs version 23.2.0 of the Google libs repo.\n. @SsKarthi you really should use better code formatting and syntax highlighting for issues. Updated your OG comment.\n@Spoetnic said what I would've said, though.\n. You need an Activity though. A regular Context does not have a Window which dialogs can attach to.\n. By setting it to not cancelable. \n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.5\n. The above won't work until JitPack installs version 23.2.0 of the Google libs repo.\n. I know, I already reported it. \n. JitPack hasn't installed 23.2.0 on their server. \n. This issue here is specifically for Support 23.2.0, which is not supported.\n. The developer of MaterialProgressBar mentioned why he cannot support lower API versions.\nI'm not really worried about this right now, especially since most of the world is using at least API 14 by now. If not, they're seriously stuck in the past.\n. It's probably an issue with your computer or JitPack. \n. An SSL error would suggest it's probably your computer. \n. You have to setup the GridView or whatever independent from the dialog.\n\nYou can either pass an inflated View to the dialog that's setup, or pass a layout resource ID to the Builder and set it up after you build the dialog. \n. Unable to reproduce. No problems in the sample project or any of my apps.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.6\n. It works fine for me.\n. I've had no issues with this.\nMaterialProgressBar is hosted on jCenter though.\n. The library is now on jCenter, as an alternative to JitPack.io. jCenter is Android Studio's default Maven repository.\nSee the README for updated dependency info: https://github.com/afollestad/material-dialogs#gradle-dependency\n. Read the documentation. \n. It works fine for me.\nFeel free to make a pull request and test it. I don't have time to test/fix things right now.\n. MaterialDialog will always dismiss the soft keyboard when it is cancelled or dismissed. That includes through the dismiss() method, cancel() method, or when the user taps outside of the dialog.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.1\n. Make sure you have the JitPack repository in the correct place, make sure you're using Gradle 2.11.\n\nI won't be able to help much more than that. If you can't figure it out with the above, report it to JitPack's issue tracker.\n. The library is now on jCenter, as an alternative to JitPack.io. jCenter is Android Studio's default Maven repository.\nSee the README for updated dependency info: https://github.com/afollestad/material-dialogs#gradle-dependency\n. The problem was that the single choice and multi choice layouts were explicitly referencing their selectors from AppCompat resources.\nAppCompat switched from using PNGs to Vectors in 23.2.0, so those drawables couldn't be inflated below Lollipop. I removed the direct use of those selectors and switched to using AppCompatCheckBox and AppCompatRadioButton.\n. I can't, but you could use old versions of the library through their commit ID (a feature of JitPack).\n. This isn't related to this library. \nTry cleaning your project and make sure you're using the same version of AppCompat in all of your projects. \n. I have no problems below Lollipop:\n\nI'm guessing you either have a conflicting attribute in your Activity theme, or you're using a non-stock version of Android that interferes.\n. The library is now on jCenter, as an alternative to JitPack.io. jCenter is Android Studio's default Maven repository.\nSee the README for updated dependency info: https://github.com/afollestad/material-dialogs#gradle-dependency\n. You can still reference commits by ID, through JitPack.\n. You need to use AppCompat 23.2.0 in your app.\n. You'll need to reference those pre-8.0.0 versions by commit ID.\n0.7.7.0 is here:\n\nUse a56d4278d8 in place of a version number.\n. This was intended.\n. Read the documentation.\n. There's not much I can do, it's probably a JitPack issue.\nHopefully it works for you with the next release.\n. The library is now on jCenter, as an alternative to JitPack.io. jCenter is Android Studio's default Maven repository.\nSee the README for updated dependency info: https://github.com/afollestad/material-dialogs#gradle-dependency\n. I haven't been able to reproduce any problems with this.\n. You'd see it in the documentation if it was possible. \nI'm guessing AppCompat has an attribute you can add  your Activity theme to change it everywhere though. \n. You have to be using an old version somehow, it was fixed quite a while ago by using ContextCompat.getDrawable(Context, int) instead of getResources().getDrawable(int) (which is deprecated).\n. Try com.github.afollestad instead of com.afollestad\n. Your app needs to use the same version this library uses.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.0\n. Add\nGradle\ncompile 'me.zhanghai.android.materialprogressbar:library:1.1.5'\nTo your dependencies.\n. It's not, you would see it in the documentation if you could.\n. You can't right now.\n. I forgot to close this issue, but this problem should've been fixed with release 0.8.5.8.\n. @Servus7 this is the latest version of the sample project running on a 4.4 emulator, there's definitely no issues (as long as your app is using the same versions of the Google libs as the library is):\n\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.0\n. Use com.github instead of com.afollestad. \n. Sorry, com.github.afollestad instead of com.afollestad\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.0\n. You're passing a null context to the dialog builder.\n. I haven't experienced that problem. I'm guessing it's related a ROM you're using?\n. If it happens with this library, it should be happening with regular AppCompat dialogs too.\n. @iampawan nothing I can fix, it has to be a ROM issue (never happens on stock Google Android).\n. This isn't the fault of this library, so I don't think it should be an issue.\n. It makes your app depend on libraries this library depends on \n. There should be enough in the library and sample to figure it out.\n. You should report it to JitPack.io.\n. The library is now on jCenter, as an alternative to JitPack.io. jCenter is Android Studio's default Maven repository.\nSee the README for updated dependency info: https://github.com/afollestad/material-dialogs#gradle-dependency\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.0\n. Look at the about dialog in the sample project. \n. The best way to fix this is just to set android:theme on your ScrollView.\n. I don't think this is something that should be a feature in the core module. \n. https://github.com/afollestad/material-dialogs/releases/tag/0.9.0.0\n. The fastest solution for this would be to apply android:theme to your TextInputLayout's.\n. I think that may be the only solution (what I described above), actually. There's not too much I can do automatically from code when you're using a different dialog theme than what the parent Activity is using.\n. You have to be using the same version of Material Dialogs that Digitus uses.\nGradle\ncompile('com.github.afollestad.material-dialogs:core:0.8.5.7@aar') {\n        transitive = true\n}\n. This library hasn't been updated for 23.3.0 yet.\n. No, this is a old version of the Support library.. You shouldn't add parameters to existing methods, you should add another variation (overload) the method and add the new parameter. Otherwise it could break many projects.\n. That class isn't used anymore so you're using an old version of the library. \nThe error is caused by you not using a new version of Google's libs, though. E.g. AppCompat and Support Library 23.3.0. \n. You get a reference to the dialog, cast it to MaterialDialog, and set its content \n. That's not really a bug, that's Android behavior. Your Activity needs to dismiss dialogs when it pauses, otherwise you end up leaking windows. Background tasks should usually continue from the notification drawer when your app goes into the background.\n. Yes, manually. \n. Hmm, yeah not much I can do unfortunately. Hopefully it works with newer versions (MD 0.8.6.0, AppCompat 24.0.0).\n. You should probably use a custom dialog layout to achieve this, that's not a common dialog use and there's probably much better ways to display that much information.\n. If a device is in RTL mode or is using a RTL language, it's automatic.\n\n. Because not using string resources for UI is highly discouraged in Android development.\n. The part that mentions providing a custom set of colors.\nhttps://github.com/afollestad/material-dialogs#color-chooser-dialogs\n. Yeah, passing false into the second parameter of customView(int, boolean) should help. I wouldn't recommend using a ExpandableListView in a dialog anyways.\n. This wouldn't have anything to do with this library. cancel(), dismiss(), show(), etc. are not methods I created. Their from android.app.Dialog.\nYou should use dismiss() to close dialogs, though.\n. I'm not sure what could be wrong, none of the other thousands of people using this library have reported anything wrong. \nAlthough I did notice you set cancelable(false) in one instance above which would block cancel().\n. I already closed the issue, by the way. Not much can be done on my end. \n. That was a double negative sentence, lol. \ud83d\ude1b\nThis library just wraps around regular dialogs, with a different layout. Dialog behaivor won't be much different. Although list dialogs are in a custom adapter, so if wouldn't be exactly the same as that Google Code issue. \nWhatever this logcat error means, it isn't anything that affects functionality. Thousands of apps are using my library, including Nova and Action Launcher. \n. It works fine on the Nexus 6P. I use a 6P primarily myself. \n. @dmytroKarataiev well that's entirely unrelated to anything in this issue, I can reproduce that issue but it belongs in a separate issue. \n. @dmytroKarataiev I'm guessing disabling the option to always call the selection listener (and only call it when the action button is pressed) would resolve the problem for now. \n. That has nothing to do with this library. It's your code that parses the input as an integer. \nAlso, your catch block would need to catch Throwable, rather than Exception. Exception will not catch anything that inherits RuntimeException, such as NumberFormatException.\n. I'm guessing your TextUtils method is not working, since the code attempts to parse an empty string (\"\") as an Integer.\n. Please read the documentation before posting unnecessary issues. \n. That's a little past the scope of this library. The stock dialogs look fine on Android Wear devices though. \n. That means you passed a null context to new MaterialDialog.Builder(Context).\n. @MichaDo that's never been an issue before.\nUsing the remote version there would prevent the project from even being built locally, which prevents me from being able to publish it.\n. @shabbir-dhangot today is a holiday, and I'm an employed software developer full time during the week. \n. No solutions have worked so far for publishing.\n. @auchri @Jawnnypoo @omidheshmatinia @jrgonzalezg @daniele-athome @radityagumay @ashishg656 @vonigo @shabbir-dhangot @Falcon5f @marianpavel @AkshayChordiya @csbenz @devslava @dirkam @MichaDo @wavever \nThanks everyone, 0.8.6.0 should now resolve through jCenter correctly: https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.0\n. Sorry, I've never heard of that error before and have no idea what it would be.\n. You can perform operations on dialog.getEditText()\n. Sorry, no. This library is meant to mimic Material Design dialogs that exist on Lollipop and above. \n. https://github.com/afollestad/material-dialogs#single-choice-list-dialogs\n. There's probably nothing I can do, but you should try Cleaning your project. \n. None of that stack belongs to my library, so I can't do anything about it \n. It'd have to be a problem with your setup, I've never run into such a problem with any of the many production apps this library is implemented it.\n. Oh yeah, I forgot to mention they weren't using the latest version. \nPlease check before posting issues like the issue template requests. \n. That's not the latest version, and there's already an open issue for Commons. The check boxes at the top are there for a reason, lol. \n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.0\n. You should read the documentation. \n. You don't have the latest version of Google's libs installed. 23.2.1 should be 23.4.0. \nThe solution is at the bottom, \"Install Repository...\"\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.0\n. You're not using the latest version of the library like the issue template asks. \n. This is a duplicate of a few older issues\n. You can't. This library is based on AppCompat dialogs.\n. I'm not sure, you'll have to figure that out yourself. It'd probably require a subclass with custom measuring.\n. If you're using a new version of Gradle, the latest version of AppCompat, and the latest version of this library (0.8.6.0), this should never happen. It's not a library issue.\n. Sorry, no. \nYou shouldn't link dialogs to dialogs either, that's a bad UI practice. \n. No, the default isn't ugly and it follows the Material Design guidelines. \n\nYou can make a custom implementation using a custom list adapter. \n. You can pass null if you cast to a String, null by itself is ambiguous cause the compiler doesn't know if you mean positiveText(int) or positiveText(String).\nHowever, you should not do that anyways. Instead, don't use positiveText() at all. The default is null already. \n. Also, that StackOverflow post has nothing to do with this library. \nIf you read the README documentation, you'd see there's an autoDismiss property which is true by default. When disabled, the dialog will remain open. @sarthak1996 @peppe130\n. That depends on whether or not you set a property as specified in the tutorial \n. You'll need to modify AppCompat themes.\nThis library is based on AppCompat dialogs.\n. You should just use the MIME type of the extension that you're filtering. You can use MIME wildcards too, like video/*.\n. Cast the Activity to AppCompatActivity.\n. Your Activity has to extend AppCompatActivity, too. This entire library expects that. \n. This is a completely unnecessary issue.\nRead the documentation.\n. It's not. \n. A better/easier API and more features as shown in the documentation \n. It has nothing to do with the fragment transaction, you can't pass getApplicationContext(). It needs an Activity context. Also, commit() is not an asynchronous method so it will complete before you ever try to show the dialog. \n. The reason this library does not separate the callback from the Context is because a callback will not survive through an orientation change. The Activity however gets recreated and the DialogFragment re-attaches to it. \n. Yeah, this isn't a solution.\n. R.id.brand isn't a used identifier in my library.\n. If it's not visible, there's an issue with your Activity theme, most likely.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.0\n. Well with current versions, you can just check the title.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.1\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.1\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.1\n. Please follow the issue template rather than clearing it for future issues.\n. @Arisono I'm not sure what the problem is, though. The divider is not shown in between list items. It's shown above the action buttons when necessary, and below the title when necessary.\n. You can only catch onBackPressed from the Activity, or an sub-class of Dialog.\n. Otherwise I believe you can set a key event listener to the dialog. \n. @bmbariah multi-line syntax highlighting is a bit different than how you formatted your comment ;) updated\n. You can use android:theme directly on your layout elements that need to be themed differently.\nDialogs use individual themes for themselves.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.2\n. You can't, this library uses Material Design dialog specifications.\nIf you remove the action buttons and use a custom layout, it might remove the spacing though.\n. That's not enough information to make an issue, and you didn't follow the issue template. \n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.2\n. Use dialog.getActionButton(DialogAction)\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.2\n. Looking into it now\n. @erseno I added a date picker example to the sample project. Even if I force button stacking, I don't have any issues with it fitting vertically.\nI tried it on my Nexus 6P and in a Nexus 5X emulator as seen here:\n\n. Maybe try running the sample project on your device? Download the sample APK @erseno \n. Did you check what I listed above? I have no issues, even with button stacking\n. It's been available for a month or two, publicly\n. You need AppCompat 24.0.0, not Support Library \n. You're probably not using the correct version of the Support Library in your app, this isn't something that I've had issues with or can fix since it's not in my code.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.8.6.2\n. @Tukajo why not look? This is open source, after all.\nhttps://github.com/afollestad/material-dialogs/blob/master/core/build.gradle\n. @ManuBabu update the Google support libs (e.g. AppCompat) to 25.3.0 in your app.. Otherwise, use an old version of MD.. @ManuBabu you are not using the version I mentioned in the comment above.. @ManuBabu oh, you need Material Dialogs 0.9.4.2, both core and commons.\nThis issue is completely unrelated to Material Dialogs. It's compatibility issues with having multiple versions of the Support library referenced across dependencies.. Read the documentation\n. autoDismiss\n. Thanks!\n. You can set wrapInScrollView to false and wrap your custom layout in a ScrollView.\n. Sorry, you can't. \n. Sorry, there's probably nothing I can do. I use generic Android APIs to load typefaces, so there's not much that can go wrong. \n. Unfortunately, yes\n. That log is completely unrelated to this library, so it doesn't belong in an issue here.\n. The only thing I can think of is that you're using the wrong value for the MIME type. \nJSON is application/json\n. https://github.com/afollestad/material-dialogs/releases/tag/0.9.0.0 should help\n. The latest version of the Support library and AppCompat are 24.1.0. You need to use the same version that this library uses, otherwise you will have problems like that. \n. There's also a much newer version of the Gradle plugin, 2.1.0 I believe. \n. Read the documentation.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.9.0.0\n. Android doen't support that. You'd have to put the dialog in a transparent Activity. \n. The next release will include a fix for this\n. https://github.com/afollestad/material-dialogs/releases/tag/0.9.0.0\n. https://github.com/afollestad/material-dialogs/releases/tag/0.9.0.1\n. You'll have to do that yourself. \n. I'm unable to reproduce any problems with this.\nThere's actually usage of inputRange in the sample project, it works fine there too.\n. It looks like that may be a private repo, it returns a 404\n. Well, I probably won't be able to see much more there.\nAs long as you're using a newer version of the library, it should work. It's worked fine with in all of the apps I use it in.\n. I'm still unable to reproduce any issues with this in the sample project, or any of my applications.\nWhen the input becomes empty, the button disables correctly for me.\n. I've made a small change which may help, though.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.9.0.1\n. Well, I'm still unable to reproduce any issues so it must be on your end. \n. It's not an issue with this library.\nYou're manually enabling the submit button inside of onInput.\n@abhinituk \n. .alwaysCallInputCallback() makes onInput get invoked everytime you modify the input.\n. I don't use Expresso but you're probably targeting the wrong view.\n. @rio258k this issue does not apply because it was for a version way before the 2.0.0 re-write. It sounds like the button may just not be focusable?. None of that is related to code in this library.\n. Well, it's not; the log does not reference anything in my library. \nBut, I'm guessing it's because you're using a version of AppCompat or the Support Library that doesn't match the version which this library uses. \n. I've never run into this issue or had any reports of it so I'm assuming it's another infamous Samsung related issue.\n. Well, unfortunately there's probably not much I can do.\nAll the dismiss() code is in Google's android.app.Dialog class.\n. You don't need to manually call dialog.dismiss() in the button callbacks when autoDismiss() is on (it's on by default, too, so no need to call autoDismiss(true)).\n. I don't think that's the cause, but you might want to check just in case\n. That's so weird; I've never experienced that issue ever on stock Android.\n. Ohh, yeah, your Activities need to inherit AppCompatActivity.\nCheckout the sample project, I have an AppCompatActivity in there that displays preferences like a PreferenceScreen would.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.9.0.1\n. I mentioned a change to that class in the release notes. \nCheck the documentation, it no longer accepts a Context in the constructor. \n. You'll need to create custom button selectors, which is explained in the tutorial.\nPlease use more specific titles for issues, like the issue template says.\n. You left pretty much the whole issue template blank and I don't really understand your description. \nBut any customization that's possible is listed in the tutorial. \n. Unfortunately I don't know of any methods to make Fragment's in Dialog's work well.\nI'm guessing getFragmentManager() doesn't work because the Fragment needs to attach to an Activity rather than a Dialog.\n. Sorry, I have no idea what the cause is. None of that log hints towards anything in this library.\n. This library enforces the use of an Activity because the DialogFragment attaches to the Activity and calls onAttach(Activity). This happens after rotation too, so the callback reference can be restored. There is no way to do this from another Fragment. \nYou should attach the File Chooser to your parent Activity.\n. I've experienced no issues here.\nThe color of unchecked radio buttons is derived from R.attr.colorControlNormal. You may want to check if you're overriding that in your Activity theme.\nYour Activity theme also needs to be derived from the AppCompat themes.\n. Currently, that's intended. It only works with basic dialogs. \n. I've added the ability for it to be used with list and input dialogs\n. https://github.com/afollestad/material-dialogs/releases/tag/0.9.0.1\n. Unable to reproduce. \n. Also, please follow the issue template for future issues, it's there for a reason. \n. I'm looking into it now.\nOne thing, though: checking if the text is empty is unnecessary. You set the input range to have a minimum of 2, the submit button will be disabled by the library automatically.\nAlso, with your configuration, onInput isn't called until the user presses the submit button with valid input. So that code block is unnecessary.\n. I'm still unable to reproduce any problems with 0.9.0.0 or 0.9.0.1 of this library on stock Android.\nI don't think this is a library issue.\n. All the proper theming is done by this library already.\n. The way it works currently is what's intended.\nSee this: https://github.com/afollestad/material-dialogs#gravity\n. See the tutorial on the front page and the sample project. \n. That log has nothing to do with my library. \n. Sorry, I have no idea.\n. First of all, please use the issue template for future issues. It's there for a reason.\n\nMemory leaks aren't an issue of this library. You most likely need to close the dialog when your Activity pauses, if it's open at the time.\n. Usually that means you have Proguard enabled and have to add the class to Proguard exclusions.\n. Sorry, I've never seen that before and have no idea what it means.\n. Not enough information here to make an issue.\nI'm guessing you were using an old AppCompat version or something.\n. https://github.com/afollestad/material-dialogs/releases/tag/0.9.0.2\n. Yes.\n. This isn't necessary. \n. It works fine for me on Nougat.\nYou're probably passing cancelable(false) unintentionally.\n. I don't think that's an issue with this library; it's probably a RecyclerView issue if I had to guess.. Newer builds should help.. @danielesegato because not all the required methods are abstract methods. Each LayoutManager implementation has their own methods for retrieving data used by this library in most cases.\n. Feel free to make a PR, then.\n. Wait this is happening on API 14? There are no system level APIs for RTL until API 16. . The same way you dismiss any other dialog. \n. And you need a custom view dialog for custom styles. \n. Read the documentation. There's a section called \"Dismissing Dialogs\". \n. https://github.com/afollestad/material-dialogs#dismissing-dialogs\n. I don't think this is related to this library, since this library is just wrapping around regular android.app.Dialog instances. There's probably an underlying issue in Google's code.\n. It's actually odd that it's not working, since getText(int) is being used to retrieve the string resource, rather than getString(int).\n. I have no issues with it on my Pixel XL. \nThe Android APIs are being used, so if files aren't being shown even if they're really there, it's probably a problem with your phone or app.\n. 0 is null when it comes to resource IDs.\n. That happens if you show a dialog before or after an Activity is visible.\n. You wouldn't have noticed if you used .theme(Theme.DARK), but I'll fix it. Unable to reproduce on KitKat devices.. Unable to reproduce. Works fine on my end.. If it still doesn't work, it may be an issue specific to your phone model.. https://github.com/afollestad/material-dialogs/releases/tag/0.9.2.1. https://github.com/afollestad/material-dialogs/releases/tag/0.9.2.1. Unable to reproduce. This is probably a Samsung issue.. Unfortunately this is probably a Samsung problem that I cannot fix.. https://github.com/afollestad/material-dialogs/releases/tag/0.9.2.1. https://github.com/afollestad/material-dialogs/releases/tag/0.9.2.2. https://github.com/afollestad/material-dialogs/releases/tag/0.9.2.1. https://github.com/afollestad/material-dialogs/releases/tag/0.9.2.2. Layouts are determined at dialog build-time, you cannot switch between different progress types with how everything is currently setup.. The progress layout is either indeterminate or not at build time. Switching the progress type would require switching out the layout. . Oh sorry, I think I misinterpreted what you were requesting . https://github.com/afollestad/material-dialogs/releases/tag/0.9.2.1. https://github.com/afollestad/material-dialogs/releases/tag/0.9.2.1. The README changes aren't needed. I'd prefer that they remain thread-safe.. These are the current options: https://github.com/afollestad/material-dialogs#gravity. I'm guessing you just can't use the root directory. You need special access. . https://github.com/afollestad/material-dialogs/releases/tag/0.9.2.1. No, I just don't have time for side projects at the moment. . Will be updated in next release.. https://github.com/afollestad/material-dialogs/releases/tag/0.9.2.1. https://github.com/afollestad/material-dialogs/releases/tag/0.9.2.2. That isn't really specific to this library. The implementation is up to you.. Done in https://github.com/afollestad/material-dialogs/commit/023d3482549b133e4652d6f8496f13572bffe431. It looks like you included the JavaDoc changes in this PR, and you changed all of the README header levels.. That's super weird, something must have changed with the newer version of AppCompat.. @tihomirleka well, the only change that could have affected this was the AppCompat 25.1.0 update. I will probably need to put some manually height/width limiting logic in there now.. Fixed for the next release. https://github.com/afollestad/material-dialogs/releases/tag/0.9.2.2. @rfazi use the latest version that I just commented above you. :P. Odd.\nIt works on my Pixel XL, Nexus 6P, Nexus 5X, and Nexus 9. Plus a Pixel C emulator.\n@tihomirleka @ritdaw @basefas . Well it doesn't seem to be an issue on my end.. Hmm... @franciscofranco @peppe130 @rfazi @tihomirleka @ritdaw @basefas \n\n\nDoes it still happen on your devices from the sample app? https://github.com/afollestad/material-dialogs/raw/master/sample/sample.apk\n. @rfazi probably, but it shouldn't be an issue since it uses Material specs for that. Not sure why it would work fine on my devices and not on yours. \ud83d\ude2d . That is helpful @tihomirleka, thanks. @tihomirleka can you check the updated sample? https://github.com/afollestad/material-dialogs/raw/master/sample/sample.apk. Thanks!\nhttps://github.com/afollestad/material-dialogs/releases/tag/0.9.2.3. Not through this library, no.. https://github.com/afollestad/material-dialogs/releases/tag/0.9.4.0. I'm open to PRs to fix such issues.. This problem actually occurred before I added the recent width limiting code.. But yes, wrapping the calendar tightly would be a solution.. That's logic which would have to be implemented.\nProbably checking if a custom view's measured width is less than the default dialog width?. You can check the measure spec of a view to see if the user used wrap_content, match_parent, or an explicit px/dp value.. Automatic is always better IMO, when possible. Hmm, yeah, good point.. No, I don't have much time for open source work. . Closing in favor of https://github.com/afollestad/material-dialogs/issues/1282. @sanijajoy stop posting spam comments or I'll have to block you. . What devices? Samsung devices?\nUnfortunately there isn't anything here that makes the cause obvious.. Android version?. Well if you're able to reproduce a cause, that would be great.. I don't there's anything I'll be able to do on my end here.. This isn't an issue with this library.\nYou're passing an empty string into the Builder.. @cagkanciloglu hmm, well your log here would suggest that the \"medium\" String parameter is null or empty:\n\n. The best solution would probably be to wrap your Builder code with a try/catch block. \nSuppressing this exception on my end would be bad because it may actually signal a user error in some cases.. It must be an issue with ZTE's skin.. @cagkanciloglu that sets default typefaces from the system fonts.. And that isn't related to whatever happens in this device's skin.. Actually I guess it could be if those default typefaces don't exist, which would be unusual. I'll make a workaround.. @trr-amsiq that log shows that you are passing a value to typeface(String, String) in the Builder which is not an existing font.\nhttps://github.com/afollestad/material-dialogs/blob/master/core/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java#L1404. @trr-amsiq welcome to make a pull request.. Should be fixed in 0.9.4.5.. https://github.com/afollestad/material-dialogs/releases/tag/0.9.3.0. No, not with this library.. Just use an Activity.. https://github.com/afollestad/material-dialogs/releases/tag/0.9.3.0. No worries, thanks for the contribution!. That's very possible, you just need to make a custom layout which includes the search field and list below it. Your custom list adapter could do filtering for you.. I would say it's more of a duplicate of https://github.com/afollestad/material-dialogs/issues/1264, but slightly different.\nHowever, dialogs will look best if your custom views fill the width of the dialogs. I use the specs from the Material Design guidelines for the width of dialogs.. Will no longer apply with upcoming version 2.0. That shouldn't make a difference. Passing a string ID just indirectly uses the method which passes a String/CharSequence.. I don't think is something I can fix. Sounds like a device-specific or manufacturer-specific bug.. java\npublic Builder positiveText(@StringRes int positiveRes) {\n            if (positiveRes == 0) return this;\n            positiveText(this.context.getText(positiveRes));\n            return this;\n}\nand\njava\npublic Builder negativeText(@StringRes int negativeRes) {\n            if (negativeRes == 0) return this;\n            return negativeText(this.context.getText(negativeRes));\n}\nare completely equivalent. negativeText returns this also.. @peterhav if it was fixed for 0.9.3.0, this issue would already be closed. . https://github.com/afollestad/material-dialogs/releases/tag/0.9.4.0. This isn't necessary, just pass true as the second parameter of .content(...). Thanks!. Passing 0 is null.. You can do anything with the EditText after a MaterialDialog is built using dialog.getInputEditText().. Using your own key event listener or by overriding onBackPressed() in your Activity. This isn't an issue specific to this library, search StackOverflow. . I'm not really sure what you mean. This library is specifically for dialogs. You could use a custom layout if you want a spinner inside of a dialog. . What do you mean by adapting with it?. Explicit gravity isn't supported. It will automatically go to RTL on devices which are using RTL languages (on API 16+).\nThe size is static and from the Material Design specs. @dimen/md_simplelist_icon. You need to cast getActivity(), e.g. (MainActivity)getActivity(). https://github.com/afollestad/material-dialogs/releases/tag/0.9.4.0. Feel free to submit PRs for stuff like this.. https://github.com/afollestad/material-dialogs/releases/tag/0.9.4.0. It's actually not related to action button gravity at all. It's related to not having any content. It works fine if you add content:\n\n. @peppe130 fixed the underlying issue, the progress spinner will be in the correct position if you specify no content. You should however use content instead of a title in your case above.\nRegarding the button gravity, this is how it works: https://github.com/afollestad/material-dialogs#gravity. You can use getEditText() on the built dialog.. Read over the tutorial, use item callbacks. . From https://github.com/afollestad/material-dialogs#custom-list-dialogs?\nWell you must be handling the click logic on your own, so you can dismiss() it from there.\n\nIf you're using a single choice dialog, you can use alwaysCallSingleChoiceCallback() to invoke the callback every time an item is checked or unchecked.. Unfortunately this may be a manufacturer-specific (Sony) or Android version specific issue that I won't be able to fix.. Also, you are using a very old version of the library, so that second checkbox there does not apply.. https://github.com/afollestad/material-dialogs#later-access. Then you inflate the View before building the dialog and pass in the inflated view. . ```java\nLayoutInflater li = LayoutInflater.from(context);\nView view = li.inflate(R.layout.name, null, false);\n// Setup view\nnew MaterialDialog.Builder(context)\n   .customView(view, ...)\n   .show();\n```. Actually, using \"Later Access\" is what you should do. You just show the dialog after setting the view up. \n```java\nMaterialDialog dialog = new MaterialDialog.Builder(context)\n   .customView(R.layout.name, ...)\n   .build();\nView view = dialog.getCustomView();\n// Setup view\ndialog.show();\n``. Both of the above are equivalent. . There may not be a solution, this may be an issue specific to Xiaomi devices.. I think this is probably an issue to report to https://github.com/DreaminginCodeZH/MaterialProgressBar. Don't use application context, it needs\u200b a window to attach to. . Only usegetActivity()`.  An activity is a context when it comes to the fundamentals of Android. . getActivity() definitely works. \nThere must be an issue somewhere on your end, but it's not related to this library. . https://github.com/afollestad/material-dialogs/releases/tag/0.9.4.1. No, the sub page pre-selects the color that you selected on the primary page. That's behavior that I don't intend to change.. If I were to guess, the user is pressing \"OK\" without selecting an option.. You're not using the latest version of Material Dialogs.. Hmm. Unfortunately I do not have this problem and have not had any other reports of it, so I will have to leave this issue open in case anyone else is able to solve it.. That's likely.\nYou could also be forcing a light theme on a dialog within a dark Activity (the dialog would pull white as the default text color from that activity theme).. Setting the action button's text to null hides them.. This library is not for full screen \"dialogs\". You need to use an Activity  for that.. A compatibility issue with Huawei's custom Android skin.. The crash will be gone on 0.9.4.4.. \nThe exception is caught, so there's no way this can be crashing unless you're using an older library version.. 1. You'd have to extend the adapter class and override onBindViewHolder.\n2. A title to the dialog? https://github.com/afollestad/material-dialogs#simple-list-dialogs. This isn't really an issue specific to this library. \nYou should just wrap an EditText in a ScrollView in a custom view dialog. . Added in 0.9.4.5. Bind on the view received here:\nhttps://github.com/afollestad/material-dialogs#later-access. Although, you should not bind dialog views into your Activity. The dialog lifecycle is much different and it does not make sense to do so.\nYou should make a view holder class.\n```java\npublic class MyActivity extends AppCompatActivity {\nstatic class DialogVH {\n    @BindView(R.id.my_view)\n    View view;\n\n    DialogVH(View rootView) {\n         ButterKnife.bind(rootView, this);\n    }\n}\n\n@Override\npublic void onCreate(@Nullable Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    MaterialDialog dialog = new MaterialDialog.Builder(this)\n        ...\n        .customView(R.layout.my_dialog, false)\n        .build();\n    DialogVH viewHolder = new DialogVH(dialog.getCustomView());\n    dialog.show();\n}\n\n}\n```. There's not enough information here to see any obvious problems in my code.\nI'm not able to reproduce any issues here.. @friederbluemle what for? . Fixed in 0.9.4.5. I've had no issues with RTL support, as long as you are using Android Jellybean (4.2) or above.. It happens here and uses a method from DialogUtils.\nhttps://github.com/afollestad/material-dialogs/blob/e77435b8cc7a3728820cbf20eedd87cb46e035ca/core/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java#L927. Well you can't use DialogUtils.showKeyboard(dialogInterface, builder) in your case, that focuses in the non-custom view input dialog EditText. You need to copy the behavior within that method.. I haven't experienced this issue and have had no other reports. You also did not supply any details in the template whatsoever.. There is currently no problems with RTL support:\n. \nAn integer array is expected\n. What was the problem?\nYou can do whatever you want to the EditText with dialog.getEditText().. @JeetuPal no problems on my end.\n. They can type 11 but it doesn't let you tap submit. That's what that function does.. The only way this could happen is if you were passing \"res/drawable-xxhdpi-v4/ic_mr_button_connected_00_light.png\" into the .typeface(String, String) method.. Hmm, in 0.9.4.5, this is what's at line 1250: \n\nhttps://github.com/afollestad/material-dialogs/blob/dfcc1af0dac5e2b9c4bb10f54cd01b7b5d269865/core/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java#L1250. It's using Typeface.create(\"sans-serif\", Typeface.NORMAL), I have no idea how this crash could happen. That seems possible.\nGoing to close this one, let me know if it comes up again.. @jlelse your log at the top indicates you are passing a null context into MaterialDialog.Builder's constructor.. \nThere should be no problem with using .items(Collection) for that.. Well, the ImageView that holds the icon has its width and height set to wrap_content, so this is expected behavior. \nhttps://github.com/afollestad/material-dialogs/blob/master/core/src/main/res/layout/md_stub_titleframe.xml\nYou will need to decide the size of the icon yourself.. This is too niche and doesn't belong in this library, IMO. An adapter should be used for this type of logic.. I would prefer not to allow this. Builders should be recreated each time.. That's been fixed, an update hasn't been published.. (https://github.com/afollestad/material-dialogs/issues/1376). Will no longer apply to version 2. Will no longer apply to version 2. Well, you shouldn't really be using JitPack. . But yes, this is expected. Your app has to use the same version of the Support libs that this library does.. @DesigningKnights yep, again, that's expected. Dependencies merge their manifests with your app, the two support library versions are trying to merge a value in your app manifest that have different values.. You can exclude sub-dependencies from a dependency in your build.gradle file.. @DesigningKnights I have not published a new release to jcenter. The current release as listed in the README is 0.9.4.7, https://github.com/afollestad/material-dialogs/releases/tag/0.9.4.7.. That's expected. . https://github.com/afollestad/material-dialogs/releases/tag/0.9.5.0. @aloneSingingStar nope - the Support Library is deprecated by Google.. I don't intend to have this feature in this library. . This library's focus is specific, bottom sheet libraries should be used for this kind of thing. . Also, adding a parameter to the Builder constructor is a major breaking change for everyone already using the library. . Will no longer apply to version 2. Will no longer apply with upcoming version 2.0. Hmmm, I haven't experienced this problem before.. Unable to reproduce.. Will no longer apply to version 2. @Warrocker looks like the build is failing. \nThe problem is here\n. Version 2.0 is under development as a rewrite, so this will no longer be applicable.. Version 2.0 is under development as a rewrite, so this will no longer be applicable.. I'm not really sure what you mean. \n. There's not enough information here to know if there's an actual bug or not.. Version 2.0 is under development as a rewrite, so this will no longer be applicable.. Will no longer apply to upcoming version 2.0. I'm not 100% clear on what you mean.. Will be fixed in version 2.0. Version 2.0 is under development as a rewrite, so this will no longer be applicable.. Will no longer apply with upcoming version 2.0. dialog.getContentView().setTextColor(...). Version 2.0 is under development as a rewrite, so this will no longer be applicable.. It sounds like your Proguard is removing the static method, or something.. Most likely will not be applicable to version 2, which will be in alpha today. See the sample projected, the Themed dialog.. Looks like there are some workarounds online but they are out of scope for this library.\nhttps://github.com/vganin/dpad-aware-recycler-view\nhttps://gist.github.com/vganin/8930b41f55820ec49e4d\nhttps://stackoverflow.com/questions/48129423/horizontal-recyclerview-in-tv-dpad-focus-going-cyclic-on-fast-scroll\netc.. Version 2.0 is under development as a rewrite, so this will no longer be applicable.. By default it executes when the positive action button is pressed. There is an option to make it a text change listener which is also listed in the tutorial. . Version 2.0 is under development as a rewrite, so this will no longer be applicable.. Upcoming version 2 will use the latest. Version 2.0 is under development as a rewrite, so this will no longer be applicable.. You'll have to move the window around, which is exposed in getWindow() of android.app.Dialog.\nhttps://stackoverflow.com/questions/9467026/changing-position-of-the-dialog-on-screen-android. You'll have to use spans for that, or set the movement method of the message TextView.. Hmmm. I've never seen that. \nUnfortunately I can almost guarantee it's a device or OS issue, probably something I cannot fix.. Will no longer apply with upcoming version 2.0, this class is going away. Will exist in upcoming version 2. It sounds like you didn't request permission to read external storage.. Closing since this applies to the old pre-rebuilt version . This project is currently written in Java, actually.\nVersion 2.0 is under development in Kotlin, though. Which will include features such as this.. The current version is 0.9.6.0.\nThe oldest available version is 0.8.5.9 but you should not use older versions.. https://bintray.com/drummer-aidan/maven/material-dialogs%3Acore\nhttps://bintray.com/drummer-aidan/maven/material-dialogs%3Acommons. Version 2.0.0 of Material Dialogs is now available in alpha, but yeah, androidx is not in a production state so I will not be pulling it in yet.. You still need Gradle flags and such for it to work. . @xperiafan13-rom that's because it has not been updated for AndroidX.. https://github.com/afollestad/material-dialogs/releases/tag/2.0.0-beta1. This will no longer apply to upcoming version 2.0. You can use getEditText() on a built input dialog. Does core resolve?. Have you tried the workaround mentioned at the bottom of the release notes for alpha01? https://github.com/afollestad/material-dialogs/releases/tag/2.0.0-alpha01\nAlso, alpha04 was released earlier yesterday. Hmm, was there anything in your build Gradle logs other than failed to resolve?. Glad the workaround works! It's very weird that that's required though, I suspect there is an issue with Bintray linking to jCenter for some reason \ud83e\udd14 . @taar1 there's a workaround as mentioned above. . @taar1 so you have something similar to this in your app module's build.gradle?\n```gradle\nrepositories {\n    google()\n    jcenter()\n    maven { url \"https://dl.bintray.com/drummer-aidan/maven/\" }\n}\ndependencies {\n    ....\n}\n```. @taar1 @KlaartjeD your app needs to use the same version of AndroidX that this lib does. Your app already resolved the dep just fine, now you're dealing with the local build system.. @farislivemaker if you're using alpha10 your app needs to be using AndroidX instead of the now-legacy Support Library.. Huh, I tried all of the modules last night from a fresh project and they resolved fine . @rene-dohan yeah there appears to be some sort of syncing issue on jCenter's end \ud83d\ude1e . It appears Bintray does not provide support for this sort of thing unless you're an enterprise customer. Ugh.. I've filed a ticket with jCenter, awaiting a response now.. jCenter has relinked all of the dependencies from Bintray to jCenter, and have asked to retry now.. @clarklak11 @rene-dohan @VeegaP @serjooo ^^. Definitely appears to be fixed on my end. Hmm, those image links don't work. It'd work better to upload them here. . Are you talking about the Crane Material Theme example? That's an example of how Material Theming can be adapted to a specific app use-case, but that does not say 16dp is the default corner rounding. Other examples on that page do not use 16dp.. However, I can add a method to customize the corner radius to specific use cases.. Resolved in https://github.com/afollestad/material-dialogs/commit/dbe0123f500e027319cdd080cbbdcdf0277fe9a7. The world needs to move towards newer versions.\nIt's less to test and brings up less bugs. \nAlso https://github.com/kaushikgopal/why_bump_android_minsdk. It is. You'd be surprised how many bugs show up on API 16, especially with Samsung devices. A lot of improvements from API 16->17 include RTL support. And that's fine. This is a free OS library. I don't get anything out of you using it.. Dropped to 16. . The title layout and buttons layout are hardcoded in and not intended to be changed - only the content in between are. https://github.com/afollestad/material-dialogs/releases/tag/2.0.0-rc8. You need to pass waitForPositiveButton = false in .fileChooser(...).. The code includes:\nkotlin\n  if (waitForPositiveButton && selection != null) {\n    setActionButtonEnabled(POSITIVE, false)\n    positiveButton {\n      val selectedFile = adapter.selectedFile\n      if (selectedFile != null) {\n        selection.invoke(this, selectedFile)\n      }\n    }\n  }. Technically this can be done with getInputLayout() on your dialog. ~~but I may add properties to .input(...).~~. For now, you can just use setCancelable(boolean) on your Dialog instance.\nIt isn't fluent (doesn't return the dialog) so it would have to be called on its own:\n```kotlin\nval dialog = MaterialDialog(...)\ndialog.setCancelable(false)\n``. Unfortunately you need to use Kotlin. . Actually, you can use thecolorBackgroundFloating` attribute your theme.\nBut I will something more explicit.. As the docs state, it's deprecated to discourage use per Google's guidelines. It still works. . Regarding the counter being on the right, that's the behavior of Google's support library and that will not be changed . If an icon is missing that belongs in a separate issue.. This type of issue is always a mismatched support library version issue. . Your app needs to use what the library uses. . At the time of this issue, it was whatever version of the Support Library was used in alpha9. \nAs of the more recent versions, it's now AndroidX 1.0. . As I said above, AndroidX must be used. The old support libraries won't receive support anymore. . The last version before 2.0 alpha and beta was 0.9.6.0, there's a file in the repo called README_old.md which has all of the documentation for that version . https://github.com/afollestad/material-dialogs/releases/tag/2.0.0-alpha10. The text color is set in styles here: https://github.com/afollestad/material-dialogs/blob/b571da41183cb57420a48592669f514296befc66/core/src/main/res/values/styles.xml#L50\n\nWhich is taking ?android:textColorSecondary from the dialog's base theme (would be Theme.AppCompat.Light.Dialog.Alert). This shouldn't be possible \ud83e\udd14 have you tried it on other devices?. I can't reproduce on my Pixel 2 XL or emulators, at least not with the sample project.\n\nThere must be something in Screener affecting it somehow \ud83e\udd14 . You have <item name=\"android:textColorSecondary\">@color/white</item> above, is that in your Activity theme?. https://github.com/afollestad/material-dialogs/releases/tag/2.0.0-alpha10. \n. Can you try 2.0.0-alpha09? It doesn't have AndroidX but another recent issue has the same problem with 10. . Yeah - https://github.com/afollestad/material-dialogs/releases/tag/2.0.0-alpha10. Should be fixed in alpha11. Looks like it could maybe still be an issue . Nevermind all is well. That 12dp of space is added by DialogLayout intentionally. It's 16dp when there is a title view, 12dp otherwise.\nLooks like there may need to be an option to remove it.. No problem, hopefully this works for you!\nhttps://github.com/afollestad/material-dialogs/releases/tag/2.0.0-alpha12. Your app needs to switch to AndroidX. . http://google.com/search?q=AndroidX+migration. I wouldn't say they're inverted - #e0e0e0 is the correct color for dividers in a light theme (https://material.io/design/components/dividers.html#theming).. https://github.com/afollestad/material-dialogs/releases/tag/2.0.0-beta06. I'm unable to reproduce in an Android TV emulator.\n\n. A more detailed log might be helpful - the above is kind of abstract. Unfortunately I can't do a whole lot unless I ran reproduce the issue \ud83d\ude1e \nI've combined some of the comments above into one. Do any of you have access to an actual Android TV, or are any of you able to reproduce this crash in an emulator?\nIf so, can you try running the sample with this line removed?\nhttps://github.com/afollestad/material-dialogs/blob/b3e96c5610799498458b7d59c67b6bb25e05b803/core/src/main/res/values/styles.xml#L70\nAnd see if it stops crashing?\n@jordyamc @emouawad @emartynov \n. 2.0.0-rc1 is out and hopefully resolves this crash.\nhttps://github.com/afollestad/material-dialogs/releases/tag/2.0.0-rc1. The build is failing cause you gotta run ./gradlew spotlessApply \ud83d\ude04 . @MFlisar it's just a Gradle task - I can't execute it on this branch cause it's in your fork which I don't have access to. @MFlisar that could be a good solution! Or we could always just use resources.getString(Int) directly \ud83d\ude04 . @MFlisar I guess this is something that could be tweaked after merge, but the spacing is a bit weird:\n\n\n\"Custom\" isn't centered\nThere should probably be some margin under the tabs, and under each seek bar/label\nThe seekbars aren't in the exact same X position, some of them are a bit off\nThe 'B' looks smaller than ARG. We could probably add some rounding to the rectangle that renders the current color too \ud83d\ude04 . Just going to merge and deal with the above after . I've done a ton of cleanup, re-org, formatting, etc.\n\n. https://github.com/afollestad/material-dialogs/releases/tag/2.0.0-beta4. It's not final quite yet, 2.0 is still beta after all \ud83d\ude42. Actually, all apps already use it. It's called Activity Themes and styles. . And if your activity theme for whatever strange reason does not match what your dialog should use, pass a ContedtThemeWrapper into the constructor. . Oh, and typefaces can already been configured for this library from your activity theme as well. It's something already implemented. It will not be dynamically changeable from methods though. . RecyclerView scroll bar styles are not configurable in this library.. It sounds like your icon has padding of its own?\nThe dialog uses Material spec spacing between the icon and title.. The one immediately above is correct and even on both sides . @jahirfiquitiva looks like this is actually a layout bug when the title is only one line (which is why I didn't notice it in the sample project). \nIf you turn on debug mode in the sample, and make the title one line, you see this:\n. Should be fixed\n. https://github.com/afollestad/material-dialogs/releases/tag/2.0.0-beta06. That looks good - there could probably be slightly less margin above the top slider (A, or R if A is gone) so that the sliders together look more centered next to the preview view . https://github.com/afollestad/material-dialogs/releases/tag/2.0.0-beta06. As Google suggests and other apps use, non blocking progress would be something like a spinner within your login fragment/activity. A contextual view that's in the page, vs. a blocking modal that covers the whole app. . Cool, thank you!. \"New Folder\" was in an action button in pre-2.0 versions but the neutral button is deprecated now so that isn't the best option IMO.. Putting them both in the top row is appealing. Going to leave as-is for now, further contributions are welcome. 1. Going to 0 causes a bug, so it's a workaround. Color.argb() cannot handle a 0 alpha correctly, RGB all go to 0 as well.\n2. I haven't tested on any phones where they get cut off. If the scroll view is added again, attention should be put into making them looking vertically centered, otherwise it looks weird.. Emojis are valid. Well, I'm not sure how much can be done to help that since the seek bars are inside of a ViewPager. Some trickery would probably have to be done with touch events.. No, 2.0 is intentional made for Kotlin and there are things like extension functions that are now fundamental to it. . That line still holds true. The library works from Java because Kotlin compiles to Java bytecode. But the features in the library which rely on extension functions won't be visible from Java. . https://github.com/afollestad/material-dialogs/issues/1669. Uh, that's definitely not the case. All callbacks are lambdas in 2.0. . That invoke signature above is the signature of a higher order function. https://github.com/afollestad/material-dialogs/issues/1575. That was intentionally excluded from version 2. . Sorry, no - that doesn't follow the dialog guidelines.. Just set paddingLeft and paddingRight to 16dp or 24dp in your layout.. https://github.com/afollestad/material-dialogs/blob/febb975c8498fb1e3efe56768a3703cee5a3cf4f/README.md. waitForPositiveButton = false. Your app needs to use AndroidX instead of the old Support library. . https://github.com/afollestad/material-dialogs#changes-in-version-2\n2.0 is designed specifically for Kotlin - non core modules work using extension functions which Java cannot use. . Fragment isn't a Context. Pass the Fragment's Activity. . Sorry, I'm not here to teach.. But basically, use getActivity() instead of this. \nFYI, 0.9.x versions are no longer supported so there will not be anymore updates to it.. https://github.com/afollestad/material-dialogs/blob/03fed5b82196063a983a986128cc64ec98a321f7/README.md#file-selector-dialogs. I don't think that's necessary - lots of other dependencies are used by the library and this one isn't any different as far as the consumer is concerned. . Dialog alone is not meant to save states, so you need to do so from a DialogFragment as you are.. This isn't the sort of thing I want in the main repository. Apps should declare dialog Fragments themselves. . Actually, dialog buttons are supposed to be 36dp according to the Material Design specs. . \n. That doesn't really make any sense, ObservableSeekBar is a AppCompatSeekBar. \nEdit: Oh, but it's going the opposite direction. However, there are no AppCompatSeekBar's in the color chooser layouts.. I'm also unable to reproduce any crashes here.. I've tried all the variations of color dialogs in the sample project, including one that has the full ARGB to no avail. Oh \ud83e\udd26\u200d\u2642\ufe0fit's the landscape layout.\nThanks \ud83d\ude04 . But the grid is scrollable, yes? Not sure how much can be done without changing the layout for smaller screens.. @dkrivoruchko hmm, the grid is a RecyclerView so it's definitely scrollable in all cases, even with ARGB=true.\n\n. Huh - this is puzzling. The RecyclerView is laid out correctly but it's not scrollable despite. . Sorry, I'm on vacation. . So, this is weird, I suddenly cannot reproduce the issue again with the latest master.. However I am applying a preventative fix.. It's expected that you put the color you want in your Activity theme.\nDynamic coloring isn't supported.. Unable to reproduce with the MaterialComponents theme:\n\n. Kotlin and Java are interopable.\nAs https://github.com/afollestad/material-dialogs#changes-in-version-2 states:\n\nThe whole library was completely re-written in Kotlin. All the layouts and views were remade as well. This library is now designed specifically to work with Kotlin - it technically will work with Java, but not pleasantly.\n\nThe extension modules will not work in Java because they rely on Kotlin extension functions.. A trick I use with pictures on GitHub is straight up HTML \ud83d\ude04 \n<img src=\"url\" width=\"250\" />\nAfter the picture uploads I just take out the URL and put it in an img tag . Oh interesting - the keyboard must be causing a remeasure, making the dialog change it's decision on being \"stacked\".. @jahirfiquitiva oddly, I'm unable to reproduce.\nAre you changing the soft input mode of your dialogs?\nEdit: Oh wait, your custom view isn't in a ScrollView. That's probably effecting it. Will try that way.. Huh, even when not scrollable, I don't see that problem on a Nexus 5.. https://github.com/afollestad/material-dialogs/releases/tag/2.0.0-rc8. Don't think it's the padding. Looks like it's more the margin in between:\n\n\n. \n(https://material.io/design/components/dialogs.html#specs)\n\n^ if I remove the layout margin and only rely on the button inset drawable. https://github.com/afollestad/material-dialogs/blob/master/README.md#multiple-choice. Looks like you're missing a repo in your config or something. This is not an issue with this library. . Duplicate of https://github.com/afollestad/material-dialogs/issues/1695\nI haven't been able to reproduce.. That may be an alpha bug, then - I don't really do anything to modify the text input layout in this library's code. You can do so from your app themes as the readme states. I do not plan to implement support via methods, though. . I don't plan to implement this as separate functionality.. Very weird. I haven't repro'd this issue with the code on the master branch.. https://github.com/afollestad/material-dialogs/releases/tag/2.0.0-rc8. I'm pretty sure you'll need to handle initial focus yourself, with onShow { }. There's not a reliable way I know of to check if the current device only uses a dpad controller, and initial focus is not wanted on a phone or tablet.. And losing focus on the buttons is also behavior that can't be avoided, and probably shouldn't be hacked around.. This is a duplicate of some other issues - you're also using an old version of this library.. In the other two issues it's related to using a version of the Google Material library which has this bug. . @Paul75 it's not something I can or should fix. . @Paul75 as the comments above mention it's not an issue with Material dialogs. Sorry I don't intend to do this. . Hmmm. I'm not sure if this can be fixed. onDismiss is directly corelated with Android's dialog dismiss event and it sounds like Android is destroying the view on its own. . Yeah the library is just doing this\nkotlin\nsetOnDismissListener { dismissListeners.invokeAll(this) }\nSo I don't think there's a way to avoid it \ud83d\ude1e \nDoes the frame drop happen without\ncalendarView.init(today, nextYear.time)\n            .inMode(CalendarPickerView.SelectionMode.RANGE)\n            .withSelectedDate(today)\n?. Others have reported this and it appears to be an issue with an alpha version of the Material Components lib. Linking #1707, #1701, #1695\n\n...or no background at all\n\nI don't apply any background from Material Dialogs so it's definitely an issue with the Material lib version that your app is using. rc11 is out now. Your dialog needs a positive action button to submit. . xml\n<ImageView android:id=\"@+id/item_support_image\" \n    android:layout_width=\"wrap_content\" \n    android:layout_height=\"wrap_content\" \n    tools:src=\"@drawable/support\"/>\nYou should set an explicit width and height to your view.\nThis isn't an issue with this library, more so how RecyclerView or the ImageView handles itself.. Will take a look when I get a chance. FYI, you can cleanup your declaration a lot:\nkotlin\nMaterialDialog(this).show {\n    title(R.string.update_credit_card_dialog_title)\n    positiveButton(R.string.update_credit_card_positive_text) { }\n    customView(view = view, scrollable = true)\n    negativeButton(R.string.nevermind)\n}\nYou don't need text = getString() or onClick=. @dri94 this isn't an issue with this library actually - you're passing view from your own code which has already been adding to another parent. You need to remove it. \nAlthough, I can add a workaround in the library which removes it from the internal parent when the dialog is done with it. It actually be because you've already shown the view in a dialog previously.. Will be fixed in the next release. rc11 is out now. There's not really any information here. What's the error?. You have jCenter as a repository?\nUnfortunately there's not really anything I can do here. It resolves fine for me and others. . As a temporary solution, you can use the bridge themes.\nhttps://github.com/material-components/material-components-android/blob/master/docs/getting-started.md#bridge-themes-bridge-themes. Btw, in negativeButton(android.R.string.cancel) {it.dismiss()}, you don't need to call dismiss() unless you use noAutoDismiss() as well. This requires a custom layout. . Currently, no, it's not possible. Actually no, those attributes do not exist in 2.0. . Don't plan to implement this as a feature because the current text sizes are what they are for a reason.\nMessing with them causes lots of layout problems as well, especially in the action buttons.. You can customize everything you'd need from the styles, even fonts.\n\"Dynamic\" color support generally requires reflection and other hacks that I do not want in my code base. Also, apps should have a well-defined brand and should not be switching up colors at runtime much.. Wait, is that screenshot without any changes to the sample? I must've overlooked that if that's the case.\nThe layout should be using attributes like ?android:textColorPrimary etc. to support light/dark correctly.. Could also be an issue with the Context used for custom view inflation. Text colors are hardcoded in that layout - I don't think this is a bug outside of the sample project. RTL is already there. The whole device has to be in RTL mode. . @MahdiAstanei there is no elephant in the room. This is standard Android functionality that libraries should not be concerned with if they are correctly supporting RTL mode.\nEither your device needs to be in RTL mode or the app's resource configuration needs to be in RTL mode. I will not implement a separate flag because that's reinventing the wheel and I will not maintain that.. And no, the functionality is not \"removed\". If something is not working correctly while the device is in RTL mode, then that's a valid bug. In that case, post screenshots.. Here's an example of it working as intended:\n\nNothing to do here.\n. That is bad practice. If you're setting non-standard (not start or end) gravity everywhere you'll end up missing support for other countries unless you have programmatic switches everywhere. System level RTL is the standard - it sounds like there's a gap that Google should fix at the system level if it's so common for people to want RTL outside of RTL system languages. Although you can force RTL in developer options like I did above from an emulator. . I'm not sure what the actual problem being fixed here is. A better description or screenshots/videos would make this make more sense.. The action button is not disabled with max length, at all? Or at a specific time?. Got it, thanks for the additional information.\nI want to make sure this doesn't break anything else before I merge. Nope, use listOf(...). Sorry, no.\nhttps://github.com/afollestad/material-dialogs#changes-in-version-2. Will be fixed in the next release:\n(emulator)\n\n. That dimension doesn't exist in this repository anymore and is not used in this repository so I'm not sure what this issue is for.. https://github.com/afollestad/material-dialogs/blob/master/README.md#max-length\nYou cannot \"block\" input with the included method but it prevents the input from being submitted.\nYou can use custom validation logic to do that, if you wish.. The cursor goes to the end, which is intended behavior.\nIf you want to select the whole text you can do so programatically.. I'm not really sure what the problem is here, @PetkevichPavel. checkItem isn't working how you expect?\nThe parameter is an index, index 1 is the second item in the list, which is what your GIF shows.. I still don't see a problem. Your code above does not pre-select an item. Your single choice list will not select an item by default unless you explicitly tell it to. @PetkevichPavel \nhttps://github.com/afollestad/material-dialogs#single-choice. I don't think you understand what the code you're writing here is doing unless I'm not understanding what you're trying to accomplish. \nAre you trying to preselect right when the dialog opens?\nlistItemsSingleChoice's lambda is invoked when you select an item AND press the positive action button. So you're calling checkItem at a weird time in your example. . I'm not able to reproduce any problems: \n \nI'm able to select items just fine and pre-selection works.\nIf you want to pre-select something, it should be done like this:\nkotlin\nMaterialDialog(this).show {\n    title(R.string.socialNetworks)\n    listItemsSingleChoice(\n        R.array.socialNetworks, \n        initialSelection = 1\n    ) { _, index, text ->\n        toast(\"Selected item $text at index $index\")\n    }\n}\nI'm not really sure why you're calling checkItem inside of the callback.\n. And your comments are ridiculous and condescending. I work for Square who writes libraries that you probably use like Google and many other huge companies. If you're going to be rude, don't use my libraries. I make them for free to help people.\nBut no, I really do not see what the problem is here. It's probably getting lost in translation what the problem is here, but I have not found any use cases where something in single choice dialogs does not work as they it is supposed to.. Double clicking is not used for selection. There are two ways to get selections:\n\nlistItemsSingleChoice(waitForPositiveButton = false), the inner callback is called every time an item is clicked.\nlistItemsSingleChoice(waitForPositiveButton = true), the default behavior, the inner callback is called when the positive action button is pressed.\n\n\n\n\nAn example of the default behavior:\nAnd if you specify `waitForActionButton=false`:\n\n\n\n\n\n\n. @PetkevichPavel I realized it's because you're calling positiveButton from within the single choice callback, which is not called until an item is selected.. That's intentional. You shouldn't use that style. . And Material Components are not related this library, but you should use: style=\"@style/Widget.MaterialComponents.CardView\". \nNothing there uses that style. . Odd. \nWell unfortunately, I don't plan to update the style name in this library for a legacy style since legacy styles are considered deprecated. . Will be fixed in the next release:\n(emulator)\n\n. @damsii this isn't a problem with coroutines. I use coroutines and this library in multiple production apps. KTX is separate.\nOh, you're talking about kotlinx as in kotlinx.coroutines, not KTX as in Android-KTX.. Unable to repro any problems here. Oh, that means one of the other dependencies you're using depends on the legacy Support lib. Sorry, but AndroidX is the current and future of Google's libs and this library can only go forward. I'm not sure if I can do anything to \"work\" with apps that are still using the old Support Library on my end. You may be able to do something in your Gradle files that modify your META-INF, e.g. include or exclude certain files.. For your exception:\n\nCaused by: java.lang.IllegalArgumentException: The style on this component requires your app theme to be Theme.AppCompat (or a descendant).\n\nThat means you're mismatching different styles between AppCompat and MaterialComponents.. That doesn't mean it shouldn't be implemented here - one library with multiple modules is better than two libraries with different APIs. Indeed, that's the challenge . I would not recommend using a TabLayout in a dialog anyways cause it makes landscape messy. I found that out with the color chooser dialog and ended up just using dots for the page indicator. . There is not enough information here to make an issue.. Well, I wouldn't advise using an alpha version of a Google library.. Should be fixed in the latest release. This should probably not be in the core module. \nIt forces consumers of the module to include Lifecycle. . This is matching Google's newer spec. @aelahmar this is working as intended. The positive button is responsible for calling the listener. . The only problem I see with this, is that using api allows consuming apps to see the classes that are used and returned by this library. E.g. in the callback or with methods like selectedDate(): LocalDate. If we remove that api reference, then consuming apps have to explicitly add the dependency to ThreetenBP if they don't already have it.. Right - maybe ThreeTenABP should be used here instead because of those reasons. Alternatively, we could use Calendar and not require an external dependency \ud83d\ude04 . builder.items.size() >= 0 isn't necessary, there's never a case where the length of an array will be less than 0. That check can be taken out.. Standard formatting needs to be used here. \njava\n} else if (collection.size() == 0) {\nAndroid Studio's Reformat Code function will do that for you.. I don't think changing the signature of a widely used method is a good idea. It'd be better to add an overload of show().. Same here. And here. And here. @timusus I mean:\n```java\nvoid show(FragmentActivity act) {\n    show(act.getSupportFragmentManager());\n}\nvoid show(FragmentManager fm) {\n    ...\n}\n```. The neutral button is deprecated - not just by me but also by Google . I don't believe the cancel button is \ud83d\ude04 \nHmmm, a ViewPager could be a cool solution. Oh this is cool!. We'd probably want to allow the extension method to accept custom strings for these values, e.g. for translations from consuming apps. To make it easier to find these with code completion, it'd be better for them to be tabCustomText, tabCustomTextRes, tabTextGrid, tabTextGridRes, etc.. Might be nice to make this an extension function on SeekBar. This doesn't seem like enough for a separate method \ud83d\ude04 . These one-line functions can be made expressions and maybe extension functions as well, like\nkotlin\nprivate fun MaterialDialog.getPageGridView() = findViewById(R.id.rvGrid) as RecyclerView. You'll probably need to suppress hardcoded text warnings so Lint doesn't fail the build, esp when publishing to Bintray. ktlint will fail wildcard imports, iirc. You could get rid of these separate constructor declarations:\nkotlin\ninternal class WrapContentViewPager(\n    context: Context,\n    attrs: AttributeSet? = null\n) : ViewPager {\n    ...\n}. You'd probably want to move the ? to as?, that way an exception won't be thrown if the tag isn't an integer. I think you'd want to put this ignore on the root layout so it applies to all of the other views in this layout which are using hardcoded text. These could all be combined into one on the root layout as well. Is there a reason you're using or instead of || here? They aren't equal in what they do, exactly (https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean/or.html). Same here regarding the or. This should remain internal, otherwise it gets exposed to consuming apps. If you need to access it from another module, it can be redeclared in one of its utility files, even though the duplication isn't ideal. You can avoid size - 1 by using\nkotlin\nfor (index in 0..subColors.size) {\n    ...\n}. This method signature is terribly long, wonder if it could be reduced or split up?. Kotlin style guides will want each of these arguments on separate lines - better yet, named. Unless the method signature can be reduced.. Wonder if there's something that can be done about that?. It's probably fine as-is for now. Probably worth making 255 a const val since it's used in a few places here. Can you static import ORIENTATION_LANDSCAPE? \ud83d\ude04 . Good catch!. Should probably be made internal so consumers don't see it. I realized these Util methods should probably have the @RestrictTo(LIBRARY_GROUP) annotation so people that use the library get warnings if they try to use them. Can you remove this dead block?. Have you checked what this layout will look in RTL mode?. Or private actually since it's only used in this file. Too much indent here. Same here. Looks like the value here doesn't match what you put in styles.xml. This also doesn't match the name in public.xml. This should be a when statement, the conditions are rather long. This file can be deleted. Since this is a library module, this whole can be: \nxml\n<manifest package=\"com.afollestad.materialdialogs.datetime\" />. This should be simplified to:\nkotlin\nval resId = when(position) {\n    0 -> R.id.datetimeDatePicker\n    1 -> R.id.datetimeTimePicker\n    else -> throw IllegalStateException(\"Unexpected position: $position\")\n}\nreturn container.findViewById(resId). res = isn't unnecessary here or below. This should probably be private. Rather than having this suppression on each method, it can be at the top of the file (IntelliJ has an option for that when you do Alt+Enter). The re-formatting to this file should be undone. This should be undone. All of this other formatting should be undone as well. This formatting should be undone. ",
    "leinardi": "@afollestad I'm sorry, I did not check if it worked properly with custom layout.\nAs soon as I can I will check also List Dialogs.\n. I've fixed the custom layoyt: e59bf4b58a91b0086b81e692e04e96d39ba224d3\n\nSome clarifications:\n- The custom layout must add padding (the container does not have any, as does the stock AlertDialog)\n- There is no divider in stock AlertDialog. Maybe you could make it optional?\n. @afollestad tested with 025762e8634e65d3044887b3ad50ff8e12242e6f\n. I'm using Genymotion Nexus S 4.2.2 (800x480 hdpi).\nTry using a string of at least length 6 for the negative button: if I use \"Cancel\" it work correctly, with \"Annulla\" or \"123456\" I get the stacked version...\n. I have good news and bad news:\nThe good news is that the radio and the check are back.\nThe bad news is that they are back together with a strange glitch...\n\n\n\n\n. Can confirm fix with 80c49d1d4b78ebe47d0b4162713012fcd2d7d3c9.\nThanks :+1: \n. Thanks :+1: \n. ",
    "theelfismike": "Thanks!\n. ",
    "Tolriq": "Ok took some time to test :) (I really need the hideButtons() in master do you accept PR now that you seems to no more rebase all  ? :)\nSo lists and scrolling now works correctly.\nFor long lists there's problem with title that loose it's spacing, and buttons top spacing is not good (Single selection)\nAnd there's no bottom spacing on list selection without buttons while it seems needed in the specs.\nThe bottom out of dialog spacing is not good too on bottom.\nBut apart from the last details, works great, thanks for the lib :)\n. You forget to push MeasureCallbackScrollView :)\n. Well seems dark theme is broken on 4.4 at least \nDialog does no more seems to respect the min width from specs (280dp) (Configurable would be cool)\nAnd title now scrolls with list don't know if wanted in specs.\nAnd with current broken theme it seems that too big dialog is missing some pixels on the top.\nTime for me to sleep :)\n. You deleted some styles and dimens in a commit ;)\nhttp://www.google.com/design/spec/components/dialogs.html#dialogs-simple-dialogs\nClearly states : 56*5 = 280 min width for mobiles. Using smaller values is not good, and not being able to fix it specially with lists is bad too, since content can change from time to time leading to different dialogs for the same place in app just because one entry is bigger or smaller.\n. Well 280 will not work on tablets :)\nFrom the guide it's min width 280dp on phone, I suppose more on tablets but they do not give the value and max width size of screen minus 40dp on left and on right.\nAnd in L sources they always use the match_parent and even say to use match parent for custom view.\nSo fixing size to 280dp does not seems right either :(\n. @afollestad  thanks \nAnd last one that goes with the scrollview, but when using a too big list, buttons are hidden as the end of the list :(\n. Yes I did report it ;) And I did make changes to local copy to tests waiting for your big code reorder change :)\nBut even with that the problem is still there :( Seems there's a problem at a higher level that put wrong layout params to android.R.id.custom :(\n. Will test tomorrow as right now I'm migrating all to this library so prefer avoid new bugs until all is validated on my side :)\n. Yes but since you forced push from scratch I have no way to follow your changes and my local ones so can't loose time on checking things again right now :) But will report back :) \nThis leave you some time to fill the other 2 requests ;)\nAnd tied to custom view without buttons, it seems from guidelines that the separator even for custom view should only be shown when there's scrolling and not always.\n. @afollestad You should really avoid this :) This may make people fear of proposing PR ;)\n. Me again :)\nIf using custom view and no buttons, bottom margin is added this is good :) But if buttons are shown then this should not be the case.\nWhen using customview and no title, there should be a top margin added.\nIf using a single view group as a custom view then crash.\n. Will try to test tomorrow but no more at home until Monday\n. Well tested quickly with last build.\nSeems default button colors on dark theme still have problems, what color does it take ?\n(And IMO it should not take accent color for cancel or neutral button by default).\nAnd the too big dialog missing some pixel on top is back :(\nAnd big single choice list views seems to miss some padding on line items when they take more than 1 line. Typically not enough space between lines and bottom line have 0 space with the divider.\nSpacing with custom view seems to have trouble too :( \nEven spacing with simple content no title have too much space between text and buttons now :(\n\n\n. @afollestad As I said before your library is for the moment too young and all your clear all rebase, rename everything, change api names makes making PR not efficient at all.\nFor the missing pixels at top I already explained it :) Just put a big list of items and see that in dark theme top dialog is missing the shadow effect and scrollbar continues to goes up after the dialog (meaning top title padding is wrong)\nFor the custom view padding I've added an image in the PR, spacing between view and buttons seems too big does not look like guidelines.\n. I do not understand the question.\n. Of course ... Why would I do the PR if it was not the case :)\nYou force colorAccent, I added support for setting a custom color. As you can see I just set the value I do not create an new variable.\n. Well I guess as for the other cases, you answer a little too fast :)\nBuilder set the neutralColor to accentColor or material blue, then dialog get the value from builder then apply it ...\nSo adding a neutralColor in the builder does apply the color correctly, this is exactly the same as positive and negative part that you wrote :)\n. Well : https://github.com/afollestad/material-dialogs/blob/master/sample/build.gradle is your code no ? \n100% of the time you answer too fast and never check things ;)\nAnd minor does not means no problems ... this is Google recommendation to not use +, this is logic to not user + and yet you do not want to follow ? \n. Well easy is the quickest path to problems ...\nYour library is public and used, you should assume that and follows guidelines and recommendations as laziness can generate problems for your users.\n. Big +1 on this as it's not only noise but also performance impact to write those.\n. Well well well ...\nWhy do not you just test what I write ... Now it's the 8th time ...\nGit pull your code, change one line in the build.gradle and have the error ...\nI do know perfectly that it's now new values, and I do now that the enum is now 0,1,2 ...\nAnd I do also now that it does not work as intended and the problem is still here with different values ....\nSo please stop acting like that ....\n. @hzsweers seems the problem is that you do not use : \n@Retention(RetentionPolicy.SOURCE)\nSo maybe worth trying with the Retention annotation and get back to direct Gravity support\n. Well not expert on that :(\nBut https://developer.android.com/reference/android/support/annotation/IntDef.html talk about Class.\nWhile http://tools.android.com/tech-docs/support-annotations talk about RetentionPolicy.SOURCE\nReading your comment I suppose first one is the correct one ;)\n. Can't just this part be migrated to simple debug assert or similar process ?\nAll the conversions are just more code to maintain, and complexity for devs for no real gain.\nThen when aar is better, do things correctly ?\n(And BTW I'm often right as in all the other issues ;) )\n. The point of intdef is to validate the input.\nAssert are used to validate inputs too (http://docs.oracle.com/javase/8/docs/technotes/guides/language/assert.html)\nI'm talking about the gain of enums versus directly using Gravity values that avoid all the conversion code from enums to final values. (Meaning code for nothing and associated maintenance).\nAnd thanks for your beautiful image, but everybody can make a mistake, when someone make 8 times the same mistake then he have a problem.\nSo you can take your image and play with it in any part of your anatomy you like ;)\n. @afollestad  the fact you were wrong again and yet not only refuse to see that, but come and add such a comment here only proves that I'm again right ....\nYoung age does not excuse every thing when you goes public :)\n. Please do as in fact I can't even report issues without them being closed without being read ...\nEach and every time it takes 3 to 4 messages so read.\nYou closed the issue explaining me that I did not read, while it was the opposite. Then I explain that you can easily test with how to , and you answer I do not need to test all works ...\nWhile it was obviously not the case ...\nSo perhaps stop close issue without reading, stop saying no bug when there's one, and people will stop being assholes with you ....\n. ",
    "MDXDave": "Mhm... fetched them one hour ago, so it should be the newest base...\n. Strange... I clone the repository again and now the cancel button is visible too:\n\n. With the newest Version it's working, thank you @afollestad !\n. ",
    "emartynov": "I will try to contribute\n. Hey cool! Thank you!\n. Thanks!\n. I think it is fine. I wanted just to verify. I will probably add wrapper class that will use \"set\" and proxy it to the new API\n. @afollestad For the second one I don't see this behaviour with native dialog on lollipop. I was thinking this library is trying to provide native lollipop experience.\nI created gist to illustrate problem (from sample app):\nhttps://gist.github.com/emartynov/6e7f11072b1d3244a0f5\nIf you uncomment .positive() you will see both buttons\n. I've tried to find guideline about scrollable title with content here (http://www.google.com/design/spec/components/dialogs.html). But was not able. Can you point where you found it?\nI violate guidelines showing buttons on list dialog. So will fix it. Thank you! But still I think this is a bug.\nTwo more notation about your release process:\n- you jumped from version 0.0.9 to 1.0.0, but I think it is maybe because you accidentally started with \"build\" instead of \"minor\" version (0.0.1 instead of 0.1)\n- I would tag release versions with release notes. It is common practice which gives you easier working under hotfixes\n. Ok, let me explain why I used only negative button. Because it is feeling wrong to assign \"Cancel\" to positive button. So as I said I should not have buttons at all and rely on back button. But if your PO really wants to see \"Cancel\" in addition to back button functionality it will be sad to have also \"OK\" now.\n. Thanks!\n. I think you can try to extent MD_Light/MD_Dark themes in your applications styles. I will try to confirm\n. Nothing about colors is included to themas. Lets change it\n. Thanks for commenting. Just one thing for me is not obvious. If I set md_dark_theme to false in my theme I still get dark dialogs. I don't get from your explanation is it as expected or an issue.\n. Thanks!\n. Cool! What is difference or missing part?\n. Ah, nice! I don't use dialogues much, and included functionality in support library is enough for me. Thanks for answering!\n. So the button inflation crashes.\nI've looked in the code and I first guess that Theme is not available on Android TV. Rest colours look like defined within the library. Except maybe selectable background.\n\nFound API guard here https://github.com/googlecodelabs/android-tv-leanback/blob/master/checkpoint_4/src/main/java/com/android/example/leanback/SlidingTabLayout.java#L158\n\nI actually wonder which XML parsing is failed. If I look to https://github.com/afollestad/material-dialogs/blob/master/core/src/main/res/values/styles.xml#L50 it might be also colour inherited from the theme.. ",
    "iPaulPro": "I clearly asked why didn't you use the same method names, not the same method.  No reason not to use DialogInterface.OnClickListener, and using the names from AlertDialog.Builder makes a lot more sense than Picasso.\n. ",
    "CarlosMChica": "I just playing around with the new method.\nFirst think is that if I use compile 'com.afollestad:material-dialogs:+' the method is not available there, so I have to import the dependency as compile 'com.afollestad:material-dialogs:0.0.1.2'. Then the method is there but it does not make any effects. I was checking out the code and I saw that you just set it but don't use it anywhere (At least I couldn't find it). I guess there should be a checking in the onClick method before calling dismiss.\n. Hello again, thanks for your work on the lib but still I can't get it working right. Now it never dismiss even if I set the dismissOnActionPress(true) I have to manually dismiss the dialogs in the callbacks. I was having a look at your code and it looks right but somehow it isn't. Thanks once again.\n. Works perfectly now =)\n. So, maybe you could add an option to don't add scrollview for custom views. What do you think about it?\n. That's ok. Anyway great job. \nPlease comment on the issue if you add it some day.\n. Works like a charm now. thanks a lot\n. ",
    "bignadad": "ah. yes it does. Had my accent set to darker variant of my theme color and didn't realize. thanks for the great library and support!\n. ",
    "emcenrue": "This would possibly be very beneficial for websites with forms\n. Error:Failed to find: com.afollestad:material-dialogs:0.0.4\n<a href=\"openFile\">Open File</a><br><a href=\"open.dependency.in.project.structure\">Open in Project Structure dialog</a>\nThanks for the fast response! Sadly, my hopes were dashed with the error occurring again, any ideas to fix it? I'm using the stock android studio setup, so I should be running jCenter.\n. That was the problem @ollide @afollestad \nI have been updating my android studio, but I had also been importing my project from the past (it's been in development for a loooong time sigh) Thanks all :D\n. Hi @yazeed44 Yazeed,\nCould you please share your dialog layout and dialog creation code? I am trying to create a dialog builder that is nearly identical to yours here: https://www.dropbox.com/s/r1isp9jotlxp6v9/Screenshot_2014-11-19-20-57-49.png?dl=0\nbut my gridview is not respecting it's constraints. It will not reformat itself into three columns, and it will not respect it's constraints to be below a couple other views like a TextView, TimePicker, and DatePicker. In fact, with more than 1 item in the adapter, the gridview just starts covering all the other views up as seen here: http://puu.sh/eb4lP/2265829c0d.jpg until it reaches 5 items which is when no other views can be seen.\nHere is my layout.xml for the dialog:\n```\nxml version=\"1.0\" encoding=\"utf-8\"?\n\n<TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Set your alarm time\"\n    android:id=\"@+id/setAlarmTimeTextView\"\n    android:layout_alignParentTop=\"true\"\n    android:layout_centerHorizontal=\"true\" />\n\n<TimePicker\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:id=\"@+id/timePicker\"\n    android:layout_below=\"@+id/setAlarmTimeTextView\"\n    android:layout_centerHorizontal=\"true\" />\n\n<TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Choose your alarm date\"\n    android:id=\"@+id/setAlarmDateTextView\"\n    android:layout_below=\"@+id/timePicker\"\n    android:layout_centerHorizontal=\"true\" />\n\n<DatePicker\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:id=\"@+id/datePicker\"\n    android:layout_below=\"@+id/setAlarmDateTextView\"\n    android:layout_centerHorizontal=\"true\"\n    android:calendarViewShown=\"false\"/>\n\n\n<TextView\n    android:id=\"@+id/chooseAlarmTextView\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Select a video\"\n    android:gravity=\"center\"\n\n    android:layout_below=\"@+id/datePicker\"\n    android:layout_centerHorizontal=\"true\" />\n\n<GridView\n    android:id=\"@+id/setAlarmGridView\"\n    android:layout_width=\"10dp\"\n    android:layout_height=\"10dp\"\n    android:layout_centerVertical=\"true\"\n    android:layout_centerHorizontal=\"true\"\n\n    android:layout_below=\"@+id/chooseAlarmTextView\"\n    android:numColumns=\"3\"/>\n\n\n```\nHere is the code for creating and building the dialog:\n```\nswitch (item.getItemId()) {\n            case R.id.addAlarm:\n            //===Begin Material Dialog Code===\n            //lib can be found at: https://github.com/afollestad/material-dialogs\n            ArrayList<String> exampleVideoIds = new ArrayList<String>();\n            exampleVideoIds.add(\"cpFKBSAk9OY\");\n            exampleVideoIds.add(\"Nb022FUH-6g\");\n            exampleVideoIds.add(\"-pr-xzajQo0\");\n            MaterialDialog dialog = new MaterialDialog.Builder(this.getActivity())\n                    .title(\"Youtube Alarm Dialog\")\n                    .positiveText(\"select\")\n                    .adapter(new FavoritesThumbnailAdapter(getActivity(), 0, exampleVideoIds))\n                    .customView(R.layout.dialogue_add_alarm)\n                    .titleGravity(GravityEnum.CENTER)\n                    .callback(new MaterialDialog.Callback() {\n\n\n\n\n                        @Override\n                        public void onPositive(MaterialDialog dialog) {\n                        }\n\n                        @Override\n                        public void onNegative(MaterialDialog dialog) {\n                        }\n                    }).build();\n            GridView alarmDialogGridView = (GridView) dialog.getCustomView().findViewById(R.id.setAlarmGridView);\n            if(alarmDialogGridView != null){\n                alarmDialogGridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n                    @Override\n                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n                        Toast.makeText(getActivity(), \"Clicked item \" + position, Toast.LENGTH_SHORT);\n                    }\n                });\n            }\n            dialog.show();\n            //===End Material Dialog Code===\n            return true;\n        default:\n            break;\n    }\n\n```\nMy adapter works perfectly elsewhere in my app. It creates a nicely formed 3 column gridview with the same xml constraints as the one I pasted above. I have already tried using AbsListView alarmDialogGridView = dialog.getListView();\ninstead of finding the gridview. This resulted in the same behavior of the AbsListView not respecting it's constraints.\nAny help would be much appreciated! Thank you!\n. Thank you for the quick reply @afollestad !\nI have tested my builds to include .customView(layout, true) as well as .customView(layout, false)\nI tested by feeding in 1, 3, and then 5 video thumbnails to load. Both true and false exhibited the same behavior as before where the gridview would slowly cover up the other views. I can say that true worked a little bit better, because as the gridview covered up the other views, I was still given a scrollview to scroll through the other views (although i could only see half a view at a time).\nAny thoughts? I really am perplexed as to how @yazeed44 was able to get his code to create such a nice gridview with 3 columns and good padding, even though I am using those constraints in my xml.\n. @yazeed44 thanks!\n@afollestad I removed .adapter(adapter) from my build and it then provided the numcolumns which I guess is expected since it's for a listview. However, there might still be a problem depending on what behavior you want to support.\nI removed .adapter, but now the gridview would only show 3 columns, but only 1 row. Then I removed the other views from the dialog, and then all of a sudden the gridview worked perfectly. Those views were complex (timepicker & datepicker). Therefore, I believe the dialog couldn't handle displaying all three views, which is understandable if you have a hard limit that I don't know about. Though, I would ask for some indication in the documentation on that if that case is true.\nAnyway, thanks both of you for providing support! I think I will instead use an activity to build the alarm. I thought I would be able to get by with such an easy to use library :) but I think I was pushing my luck by sticking so much stuff in it\n. Was this fixed? I'm building the dialog with .titleGravity(GravityEnum.CENTER) and it's still not centering it. When I tried with titleGravity(MaterialDialog.CENTER) \n'CENTER' could not be resolved as a symbol.\nBtw, thank you for the library, this is the most professional (understandable/useful) lib I've used to date\n. ",
    "ollide": "I wanted to provide a PR for this issue, but when I cloned the repo and extended the sample app to reproduce this, it just worked out of the box.\nMainActivity.java\n``` java\nWebView webView = new WebView(this);\nwebView.loadUrl(\"file:///android_asset/test.html\");\nnew MaterialDialog.Builder(this)\n            .title(\"Change Log\")\n            .customView(webView)\n            .positiveText(R.string.agree)\n            .build()\n            .show();\n```\nassets/test.html\n``` html\n\n\nHTML Title\n\n\nThis is an example HTML file loaded from assets.\nKey changes in this release:\n\nFeature A\nFeature B\nFeature C\nFeature D\nFeature E\nBugfix A\nBugfix B\nBugfix C\nBugfix D\nBugfix E\n\n\n\n```\n\nAnd here's a screenshot from the result:\n![Material Dialog with WebView](http://i.imgur.com/tPlEGa1.png)\n\nCan you provide a simple example that leads to the empty view?\n. Please check your top-level Gradle build file for the jCenter repository.\nEarlier versions of Android Studio defaulted to Maven Central. It depends\non the AS version that created the initial project. Google switched to\njCenter with AS 0.6, if I recall correctly..\n. Touch feedback on 4.4.4 (Nexus 5) is just fine.\n.",
    "StanKocken": "Yeah right, I don't why I have this error only with your library.\nInto this file: \nhttps://github.com/afollestad/material-dialogs/blob/499f88116e0a6629c66cf95078d1941423d7acc7/library/src/main/res/values/attrs.xml\nit's not a problem if 2 differents librairies have \"divider_color\" and \"list_selector\" like that? I don't know. Maybe we should prefix them with \"md_\".\n. ",
    "AndroidDeveloperLB": "\nYes, I've noticed it too. Can you please change the API to be more native? it would be easier to switch later this way.\n   This way, it's future proof.\nOK, thank you.\nGB is still mentioned in the Android-dashboard, and Google still supports it using the support library, and supports updating its apps to those versions too.\nI use Eclipse, so I don't see this file, which caused the sample to crash. After removing all that's related to fonts, it worked.\n   The support library of Google doesn't require (and support) this font, so it's weird that part of the app will use this font and parts of it won't.\n   Think about consistency. If the user has chosen a different font, part of the app will stay and part will change. \nOK, thank you.\n. 1.Does Android-Studio really make it hard to refactor method names? In Eclipse it's very easy...\nPicaso's style of methods is not the same that the alertDialog builder's style of methods, and it's not that hard to use Android's.\n\n3.Google succeeded supporting many things for GB on its libraries. It still does.\nI was hoping that since you add the missing part of the support library, you'd also support it for GB, just like the support library does.\nMaybe you could look at Android's code? Or at how other, similar libraries do it?\n4.Yes, but still, fonts should be optional and not mandatory, and they should force your app to be non-consistent or require you to use the same font for the whole app.\n. @afollestad Thank you. Indeed sad news for me. :(\n. ",
    "visualfanatic": "I've just checked some last commits and saw nothing, that is why I created this issue, sorry for problem and thanks for the method, it is a great library :)\n. ",
    "flynnvo": "Yeah, got it to work by adding the list_selector attribute to my app's themes.xml \n. ",
    "thedumbtechguy": "Great. I will see if I can possibly fix them. I really do love the project.\nThanks.\n. ",
    "luo4567": "in MaterialDialog.java ,line 527 and line 540 are different!line 540 code may be wrong\n------------------ \u539f\u59cb\u90ae\u4ef6 ------------------\n\u53d1\u4ef6\u4eba: \"Aidan Follestad\"notifications@github.com; \n\u53d1\u9001\u65f6\u95f4: 2014\u5e7411\u670813\u65e5(\u661f\u671f\u56db) \u4e2d\u534812:49\n\u6536\u4ef6\u4eba: \"afollestad/material-dialogs\"material-dialogs@noreply.github.com; \n\u6284\u9001: \"\u66fe\u7ecf\u6700\u7f8e\"893820662@qq.com; \n\u4e3b\u9898: Re: [material-dialogs] Missing the R.attr.colorAccent (#36)\nThat's an old attribute that was renamed. You must be out of sync.\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "markmooibroek": "Thanks for fixing =) Nice lib \n. ",
    "VishalNehra": "But it's still removed from jCenter...\n. OK. My bad :+1: \n. ",
    "balysv": "Like i mentioned in my previous issue, it is the concern of the developer - not the library. Same thing would happen if they used the Android SDK AlertDialog.Builder but we don't see them creating issues on AOSP\n. It's because a ContextThemeWrapper which Activity extends is required for getting attributes. Most common mistake is to use an Application as a Context. You could possible add constructors that allow a theme to be passed in and create a ContextThemeWrapper that can be used (similar to AlertDialog)\nBut needless to say, it's just good design to provide an api that allows super classes to be passed in :)\nIt's a nice project, try to make is as close to the Android SDK api and it would be even better!\n. Your MD_Light and MD_Dark themes extend Holo and Material which apply styling using android internal attributes. So the Context passed into the contructor must contain styles that override the attributes in question (listselectors, etc). If it does not, the default Holo/Material styling is used. \nIt could only happen if an unthemed Context is passed, boiling down to that a developer just made a mistake :)\n. That's not entirely true. Well, it would be, if you used the wrapped Context all the time. But you keep the Activity reference in your dialog and use it with LayoutInflater and it keeps all the attributes of the Context you pass. It's actually the reason the whole library works and themes nicely in the first place! \nAnyway, it got off topic. My point still stands that an Activity should not be required since it's just an instance of a Context and has nothing to do with styling unless the code has bugs or styles for view inflation are missing.\n. So... what were the problems with styling in the first place? I'd be glad to help out.\n. Sure, thanks!\n. ",
    "athornz": "Ah right, thanks!\n. What's the theming issues on Lollipop? Would be great to have this below min sdk 14. I'd be happy to try fix some of the issues.\n. I'm also getting this issue - tested on lollipop and 4.4.4\n. The stacked buttons are match the parent width with a gravity of center - should the gravity be left? Or should the buttons wrap content?\n. I can see it set in the xml style. Changing it in the style fixes the gravity.\n. Hmm I can see it being set in code as well. Let me do some debugging.\n. Removing the gravity removes the centered text, but it seems text alignment is having no effect. The text is now aligned left :(\n. Hmm. Text alignment would definitely be good if it actually worked. \n. Actually I don't know why text alignment would be any better. Gravity can be set to start and end, so that will work for RTL layouts\n. Yea. I think it may have bugs. I debugged it and setTextAlignment checks if the new alignment is different the 'raw alignment', which is always false. Although I'm not sure why - its a bit beyond me. \n. Oh haha no worries!\n. ",
    "egor-n": "About the title scrolling with the content:\n\nScrollable content either scrolls to the edges of the screen or behind another surface that casts a shadow over the content\u2019s surface. Never clip an element against an invisible edge\u2014elements don\u2019t just scroll off into nowhere. Put another way, you rarely scroll the ink on a surface; you scroll the surface itself.\n\nsource\n. Yep, I think so.\n. I was just mimicking AlertDialog.Builder#show().\n. What about now?\n. java\nnew MaterialDialog.Builder(getActivity())\n                .positiveText(\"OK\")\n                .dismissListener(new DialogInterface.OnDismissListener() {\n                    @Override\n                    public void onDismiss(DialogInterface dialog) {\n                        // this stuff gets called\n                    }\n                })\n                .show();\n. I would not use a title bar at all in this case. Just create a custom view, which contains everything you need and don't set title to the dialog.\n. #241\n. ",
    "arayray": "Any update on this?\n. This should not be closed. Some dialogs present in Google Play Store do not use the same padding as the guidelines. Also the dialog padding is not fully correct.\n. EDIT: Nevermind, I noticed the padding is correct for the bottom. However it would be a good option to be able to change it.\n. The package is not in the library that is currently uploaded..\nhttps://github.com/afollestad/material-dialogs/tree/master/library/src/main/java/com/afollestad/materialdialogs\n. Go look at the url I posted above... there is no 'list' folder. It is missing\n. Nevermind, I just refreshed the sample and all is good.\n. ",
    "teslacoil": "I've implemented this change though it's a bit invasive and might need some testing or refinement before it's ready to be merged. If anyone wants to try it out it's at:\nhttps://github.com/teslacoil/material-dialogs/commit/c017a7ae460cdaef23678aee46201a9090dccbdb\n. I don't like the idea of making this behavior the default/only option as\neven though the scrollview isn't too big of a deal (the framework\nAlertDialog never provides us with a ScrollView). However the padding is a\nbig deal. Without adding it then the quick case is more work. But adding it\nfor all views means scrollview's get their overscroll glow clipped, or some\nawkward work of removing the padding at dialog creation time.\nI considered a setup like Insettable/setInsets (\nhttps://android.googlesource.com/platform/packages/apps/Launcher3/+/kitkat-dev/src/com/android/launcher3/DragLayer.java\n), where if the view implements a specific interface then it gets a call\nwith the padding info, otherwise it gets margins applied. However it'd mean\na custom view is needed for every layout, or we'd have to write one\nsophisticated/configurable enough to handle most cases.\nBut I just thought about using LayoutParams and I think it could work\nreally well:\napp:materialDialogs_applyDefaultPadding=\"false\"\nDefault to true, the common case gets padding. Improper use of the library\n(scrollview with the default padding), just means the overscroll glow is\nclipped which is probably better than my original changeset where improper\nuse meant no padding.\nFrom XML I think it's great, from java it'd be something like\nMaterialDialog.LayoutParams lp = new\nMaterialDialog.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);\nlp.applyDefaultPadding = false;\nview.setLayoutParams(lp);\nbuilder.customView(view);\nA bit more wordy than customView(v, false), but if implementing a complex\ncustom view the dev is probably using xml anyway.\nThen it's a question of if the parameter should just control the padding\nand the built in scrollview is removed, or if there should be two\nparameters (materialDialogs_applyScrollView, and applyDefaultPadding) or\none parameter that controls both (materialDialog_dontWrap=\"true\" ?)\nOn Mon, Dec 22, 2014 at 11:33 AM, Aidan Follestad notifications@github.com\nwrote:\n\nIt may be more intuitive and less confusing if there isn't two fields that\ncan be used with custom layouts.\nI was thinking that the default scroll functionality could be disabled\naltogether and left to the library user, or, customView() could take a\nsecond boolean parameter that specifies whether or not it should be\nscrollable. The same variables would be used in the background, but the\nuser would only need to see one method.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/pull/127#issuecomment-67865414\n.\n. Unless I'm misreading, this was part of my earlier change for removing the scrollview wrapper (and is still working after your refactoring). invalidateCustomViewAssociations searches for views touching the top and/or bottom (canViewOrChildScroll) and enables the appropriate divider. It checks top/bottom separately, and only if exactly touching so that if you have other fixed views or padding (and your own frame/divider/whatever) the divider isn't enabled.\n\nThis is why I left the TODO for RecyclerView ( #158 ). I personally am not using any RecyclerViews in custom dialogs and it'd require a dependency on the recyclerview support lib, so it didn't seem worth it unless there is actual demand.\n. I only took a quick look, but I think canAdapterViewScroll is getting fooled by being at the bottom of the list, and we must be invalidateCustomViewAssociations after an item is selected. I'll take a more indepth look tonight or tomorrow, should be a quick fix if I'm right.\n. @hzsweers I couldn't directly reproduce, but could reproduce a single vibration when scrolled to the bottom and selecting an item (or doing anything to cause invalidateCustomViewAssociations).\nI've pushed a fix to my fork for what I saw, which I suspect will fix the issue you're seeing also but it'd be great if you could confirm.\nhttps://github.com/teslacoil/material-dialogs\nSpecifically https://github.com/teslacoil/material-dialogs/commit/37cd212aae30739cf257dee5413f341602c3cb23\nI'll wait to submit a pull request in case it's not a complete fix.\n. I looked at the round corners (as even in 4.x they're inconsistent across android versions and OEMs, slightly different colors, and setting the dialog color makes them completely square). There isn't a good way of doing it. Android styling does allow changing the dialog background, but that also causes it to use a different layout which has different margins, and you can't supply your own layout as it uses private resource ids.\nIt is possible to change the drawable at runtime by traveling up the view hierarchy, or intercepting the resource call, but this is hacky and doesn't seem worth including in the library.\n. Do you have sample code to reproduce? (and the device/screen size/dpi you're testing against).\nJust taking a quick look, 81197a67 seemed to add conditional titlebar padding, I'd guess that it needs similar constraints as the bottom margin in setDividerVisibility (\"Only enable the bottom margin if our available window space can hold the margin\")\nThe conditional padding is a pain. A custom root view that does the measures and applies the padding might be easier to maintain than having callbacks and checks in the Dialog, this might also help with the slow remeasure/relayouts as we should be able to do it in one pass, whereas it seem something is taking multiple passes here.\n. The shaking issue was showing the divider, triggering a relayout, and hiding the divider, so they wouldn't just wiggle once but continuously shake. (it didn't fully block the UI thread, but it was barely usable) This at least only happens once (per layout change).\nThe dividers could be simplified to be either VISIBLE or INVISIBLE, so they never cause layout changes, but the padding is killer, and the padding in the button bar changes the size of the content (which can change the size of the button bar, which we prevent, but I think still causes another measure/layout pass, and it changes the size of the window which might also cause a measure/layout pass).\nThere's also a user experience issue here, even without the lag, is it a good experience to have an on screen dialog change size? I'd say no. The FAQ example would be better if the first time you view the dialog it was full sized and clicking a question didn't change the window size/position. The folder chooser example would look a bit sparse when you're in an empty directory if the dialog didn't shrink back down, but personally I think the chooser is already bad UX for a number of reasons (file choosers in general though I admit there is a use at times, no clear way to know if back will cancel or go back, window drastically changes size, position of title and OK/Cancel move), so it might be better to ignore that use case and focus on ones like the FAQ.\nI'm not personally using any dialogs that change size while on screen, so I don't have that strong of feelings on how they should work. Killing the button bar padding is kind of a shame for small dialogs, but it would simplify things. An option to force the divider/padding/scrollable mode regardless of content is kind of a workaround and awkward to name the parameter or document, but would be easy.\nI can take a look at doing a custom root view that more intelligently handles the dividers and padding, preferably with just one pass (or at least one layout pass, maybe two measures). But it will likely need to wait until either I add require a dialog that changes size, or after I get my update released as stable.\n. I've started on this, I created a custom MDRootLayout that does it's own measure/layout of the root elements (titlebar, content, buttons) and it can make the padding/stacking decisions all from onMeasure (so no need to invalidate after onShow). The folder chooser is so much faster and doesn't wiggle or draw at the wrong size momentarily or anything. I still need to verify the padding for various things as it's implemented a bit different now, but hopefully I can submit a pull request soon.\n. Here we go: https://github.com/afollestad/material-dialogs/pull/392\n. Samsung's seekbar ignores tint as well and is blue, I work around it using a custom seekbar style (basically the AppCompat style for pre-21, however I copied the animations back in), I imagine the same could be done for the progressbar.\n. Hrm the stack issue must've come up late as I'd tested it earlier.\nThe padding change when no buttons and no scrolling is intentional, it's\nnow a total of 24dp. 8dp in the list, and 16dp margin from the\nMDRootLayout. I think this makes sense as 24dp is the general frame margin,\nand the specs suggest 16dp between the content and the button bar, and 8dp\nunder the button bar. Remove the button bar and that's 24dp. However I\ndon't feel strongly and this is easy to change, but if we do we should\ndocument it.\nGood catch on the minwidth, should be an easy fix.\nI can take a look at these tomorrow evening.\n. For the padding, the examples in google's spec do have the 24dp padding\nabove content on dialogs without titles. It's hard to measure the dialog\nwithout buttons but I agree it's less than 24dp. Unfortunately they don't\nshow any examples of no title and no buttons.\nIf we respect the 24dp above content with no title but use only 8/12dp on\nthe bottom when there are no buttons, a no title no button dialog will look\noff balanced.\nWe could do 24dp total padding above the content if there is no title but\nhas buttons, and 8dp total padding above and below content, if there is no\ntitle and no buttons. I don't really like the inconsistency, but I do agree\nthe 24dp padding feels excessive at times.\nThe change in the button selector seems to be one of your changes, as I\ndon't see it on my commit but do see it after pulling the latest.\nOn Sat, Apr 4, 2015 at 9:58 PM, Aidan Follestad notifications@github.com\nwrote:\n\n@teslacoil https://github.com/teslacoil sorry, another thing to add, it\nlooks like the inset selectors are no longer working and the dialog action\nbuttons fill their space (the button bar should be 48dp, while the buttons\nare 32dp in height and have margin from the specs in between them). Not\nquite sure how that's changed in your code, I'd have to study it a bit more.\n[image: md4]\nhttps://cloud.githubusercontent.com/assets/1820165/6995560/b3663cc8-db15-11e4-9088-52028dcb0595.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/pull/392#issuecomment-89708060\n.\n. Seems to be 7afd46fef2214c185ca7441684161e756dceba38 , setDefaultSelector\ncalls setStacked(true when !mStacked\n\nOn Sat, Apr 4, 2015 at 11:23 PM, Kevin Barry kevin@teslacoilsw.com wrote:\n\nFor the padding, the examples in google's spec do have the 24dp padding\nabove content on dialogs without titles. It's hard to measure the dialog\nwithout buttons but I agree it's less than 24dp. Unfortunately they don't\nshow any examples of no title and no buttons.\nIf we respect the 24dp above content with no title but use only 8/12dp on\nthe bottom when there are no buttons, a no title no button dialog will look\noff balanced.\nWe could do 24dp total padding above the content if there is no title but\nhas buttons, and 8dp total padding above and below content, if there is no\ntitle and no buttons. I don't really like the inconsistency, but I do agree\nthe 24dp padding feels excessive at times.\nThe change in the button selector seems to be one of your changes, as I\ndon't see it on my commit but do see it after pulling the latest.\nOn Sat, Apr 4, 2015 at 9:58 PM, Aidan Follestad notifications@github.com\nwrote:\n\n@teslacoil https://github.com/teslacoil sorry, another thing to add,\nit looks like the inset selectors are no longer working and the dialog\naction buttons fill their space (the button bar should be 48dp, while the\nbuttons are 32dp in height and have margin from the specs in between them).\nNot quite sure how that's changed in your code, I'd have to study it a bit\nmore.\n[image: md4]\nhttps://cloud.githubusercontent.com/assets/1820165/6995560/b3663cc8-db15-11e4-9088-52028dcb0595.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/pull/392#issuecomment-89708060\n.\n. Initial fixes in https://github.com/afollestad/material-dialogs/pull/396\n. Let's migrate the discussion of the padding here, from the pull request I commented:\n\n\nFor the padding, the examples in google's spec do have the 24dp padding\nabove content on dialogs without titles. It's hard to measure the dialog\nwithout buttons but I agree it's less than 24dp. Unfortunately they don't\nshow any examples of no title and no buttons.\nIf we respect the 24dp above content with no title but use only 8/12dp on\nthe bottom when there are no buttons, a no title no button dialog will look\noff balanced.\nWe could do 24dp total padding above the content if there is no title but\nhas buttons, and 8dp total padding above and below content, if there is no\ntitle and no buttons. I don't really like the inconsistency, but I do agree\nthe 24dp padding feels excessive at times.\nThe change in the button selector seems to be one of your changes, as I\ndon't see it on my commit but do see it after pulling the latest.\n\nAfter some more thought, the problem with using just 8dp when no title and no button bar is that text content dialogs would look off. Doing 8dp for no title, no button bar, lists would work, but it makes it harder to decide what to do for custom content.\n. That was (or at least should've been) fixed in https://github.com/teslacoil/material-dialogs/commit/d6dd29edda20a403363477d135a8e543cd66ec2b . I'd been testing with auto-stacking and forgot to test against force stacking.\n. > The neutral button definitely has too much padding to the start of it though, there's a pretty big offset from the content keyline.\nWhere are you seeing this? For me, the neutral dialog in the sample app has the same amount of padding to the start of the neutral button as there is at the end of the positive button, and it's 16dp from the dialog border to the edge of the selector.\nFor the no title, no button bar dialog, I'm leaning towards just using the 8dp padding applied to the list/content/etc. With the full padding, the client can't reduce it, with only the content padding the client can always increase that to 24dp if they chose (as the client always controls if the title and buttons are visible). The only problem is if they chose 24dp and it's running on a small screen device so it scrolls.\n. Here's what I propose. Dialog Edge Padding is white space between content and dialog edge (if applicable)\n| Content Type | Title | Buttons | Dialog Edge Padding | Dialog Edge Padding |\n| --- | --- | --- | --- | --- |\n| Text | N | N | 24 | 24 |\n| List | N | N | 8 | 8 |\n| List | Y | N | x | 24 |\n| List | N | Y | 24 | x |\n| Scrolling List | * | * | 8 | 8 |\n(Custom is treated the same as list)\nThe justification is that things look off balance if there is a lot of padding at the top or bottom but not the other, so a no title list with buttons has a lot of white space around the button (to match the specs) and only 8dp at the top looks weird. Likewise a title has a lot of whitespace, so only 8dp to the bottom looks weird.\nExamples:\n\n\n\n. The whitespace here still feels a bit strong, but this is to spec (16dp between content and button, 6dp between button touch zone and touch feedback, total of 22dp)\n\n. I think that's from the theme changes, not https://github.com/afollestad/material-dialogs/pull/403 . I see the dividers in my branch which is from before the theme changes.\n. I think it looks good. There's a minor fix still needed for the dividers ( https://github.com/afollestad/material-dialogs/issues/397#issuecomment-90206988 ) , but even if 0.7.0.0 was released without that I don't think it's a huge deal as it can always be fixed in a .1 update.\n. I don't think so, unless Google does or the spec says something about maximum dialog height.\nIn this case I agree it looks silly, but that's partially because we're not really looking at the content (unless you read latin I guess) and we're expecting it to scroll. For scrollable dialogs, or even dialogs that fill the space with information we care about, I think full size on the N6 is fine. I think adding an option for max height is more work (and future maintenance as well) then it's worth and making it mandatory means we have to pick a size in a non-arbitrary way. Also an option could be confusing as a developer might try using it to enlarge the dialog, but on 4.x the dialog size (and position) is restricted by the dialog background's shadows, which are controlled by the OEM.\nThough it is unfortunate the padding between the dialog bottom and navbar doesn't match the padding between the left/right edges of the screen and the dialog edges.\n. I think one of the recent changes broke dialog fragments \n\"    java.lang.IllegalStateException: You can not set Dialog's OnCancelListener or OnDismissListener\n            at android.app.DialogFragment.onActivityCreated(DialogFragment.java:474)\"\nLooking into it further but wanted to post to postpone the release while I confirm\n. @afollestad I think it was just as tall, it's just the text size was larger until a change before the padding change. But I could be wrong. When working on the MDRootLayout I was comparing screenshots between the previous release and mine and noticed the smaller text size, then started comparing to previous master and mine and the text size was the same.\nThe crash I'm seeing is Nova's Edit Shortcut dialog, which is a complex case as it has a crazy animation (On Prime, Drag app from drawer to Edit, then tap on the New Group, It's broken in the current beta, but it does a circular reveal animation to basically a second dialog. Implementation is tricky.).\nOn 5.1 I see:\ngradle\n                        E  java.lang.IllegalStateException: You can not set Dialog's OnCancelListener or OnDismissListener\n                        E      at android.app.DialogFragment.onActivityCreated(DialogFragment.java:474)\n                        E      at android.app.Fragment.performActivityCreated(Fragment.java:2061)\n                        E      at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:912)\n                        E      at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1067)\n                        E      at android.app.BackStackRecord.run(BackStackRecord.java:833)\n                        E      at android.app.FragmentManagerImpl.execPendingActions(FragmentManager.java:1452)\n                        E      at android.app.FragmentManagerImpl$1.run(FragmentManager.java:447)\n                        E      at android.os.Handler.handleCallback(Handler.java:739)\n                        E      at android.os.Handler.dispatchMessage(Handler.java:95)\n                        E      at android.os.Looper.loop(Looper.java:211)\n                        E      at android.app.ActivityThread.main(ActivityThread.java:5321)\n                        E      at java.lang.reflect.Method.invoke(Native Method)\n                        E      at java.lang.reflect.Method.invoke(Method.java:372)\n                        E      at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1016)\n                        E      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:811)\nWhich is from DialogFragment's:\n``` java\n    if (!mDialog.takeCancelAndDismissListeners(\"DialogFragment\", this, this)) {\n        throw new IllegalStateException(\n            \"You can not set Dialog's OnCancelListener or OnDismissListener\");\n    }\npublic boolean takeCancelAndDismissListeners(String msg, final OnCancelListener cancel,\n            final OnDismissListener dismiss) {\n        if (mCancelAndDismissTaken != null) {\n            mCancelAndDismissTaken = null;\n        } else if (mCancelMessage != null || mDismissMessage != null) {\n            return false;\n        }\n    setOnCancelListener(cancel);\n    setOnDismissListener(dismiss);\n    mCancelAndDismissTaken = msg;\n\n    return true;\n}\n\n```\nSo it appears that it happens because there is already a cancel/dismiss listener set which is true. I'll try to figure out why folder chooser works but mine doesn't.\n. FolderChooser is a support fragment, I'm using a native fragment, that's the difference, switching FolderChooser to use native fragments causes the crash.\n. Is the only current use for the overridden listeners to hide the keyboard? The comments for Dialog.dismiss suggest using onStop to cleanup, I didn't realize Dialog's had an onStop, but it sounds like  an appropriate place to hide the keyboard if it works.\n. Yup, looks good!\n. I considered doing this as part of the padding change, but it's a bit more complicated for custom views so I figured I'd leave it for another changeset. For the builtin list you can set an onScrollListener, but for custom views that wouldn't really work unless we had the client set it's own listener. However another approach could be that MDRootLayout does the checks in onDraw, though it might need some logic to invalidate the area of the dividers when the content is invalidated (for the scroll).\n. This incorrectly shows dividers for custom views that have fixed content in one position and a scrollable view in the other. For example a fixed preview image at the top and a listview underneath, when scrolled the divider will be drawn under the title bar even though content never scrolls under the tile. This could be fixed by confirming the scrollable views position in invalidateDividersVisibility or using a separate scroll listener for top/bottom views.\n. Oh and the divider isn't hidden if the dialog no longer needs to scroll (see the FolderChooser sample). Probably just needs to unset DrawDividers in onMeasure\n. This isn't related to the MDRootLayout change, but I've seen it before. Previously I attempted to replace the dialog background so the corners and shadows would be consistent on <5.0, however doing so with a custom dialog theme messed up the horizontal padding. It's a mess. AlertDialog chooses a theme like this:\nstatic int resolveDialogTheme(Context context, int resid) {\n    if (resid == THEME_TRADITIONAL) {\n        return com.android.internal.R.style.Theme_Dialog_Alert;\n    } else if (resid == THEME_HOLO_DARK) {\n        return com.android.internal.R.style.Theme_Holo_Dialog_Alert;\n    } else if (resid == THEME_HOLO_LIGHT) {\n        return com.android.internal.R.style.Theme_Holo_Light_Dialog_Alert;\n    } else if (resid == THEME_DEVICE_DEFAULT_DARK) {\n        return com.android.internal.R.style.Theme_DeviceDefault_Dialog_Alert;\n    } else if (resid == THEME_DEVICE_DEFAULT_LIGHT) {\n        return com.android.internal.R.style.Theme_DeviceDefault_Light_Dialog_Alert;\n    } else if (resid >= 0x01000000) {   // start of real resource IDs.\n        return resid;\n    } else {\n        TypedValue outValue = new TypedValue();\n        context.getTheme().resolveAttribute(com.android.internal.R.attr.alertDialogTheme,\n                outValue, true);\n        return outValue.resourceId;\n    }\n}\nThose styles are indeed private so we can't extend them. They reference and private layout so we can't reference it. The layout has private view ids, so we can't recreate it.\nI think we can fix the overscroll issue by making sure we always inflate our views with a ContextThemeWrapper, but the actual dialog theme should stay the system default. I can take a look.\n. Some workaround options:\n1) Make the button part of your customview (which is not wrapped in a scrollview), then the dialog won't add any margins.\n2) Use the real title instead of including it as part of your custom view and do dialog.findViewById(R.id.titleFrame).setBackgroundColor after building the dialog.\n3) Copy the md_stub_titleframe.xml from the material-dialogs source into your project, and add the background color there. This would apply to all material-dialogs in your app though and you would need to copy again after updates to material-dialogs that change the title frame.\n(1) Risks future padding changes and means you have to handle the button yourself, (2) risks future layout changes or the resource name changing. Personally I think (2) is best.\nIf there's lots of demand for adjusting the default margins we could add them as options to the builder, but I'd be inclined not to as it adds complexity both to the API and to the measure/layout code. Making something like (2) into a official api (setTitleBackgroundColor) might be reasonable alternative.\n. Android 4.1 doesn't fully support RTL. It sounds like you want to work around this Android 4.1 limitation by using Gravity.END for RTL languages on 4.1 (which is exactly the same as RIGHT on 4.1) and Gravity.START on > 4.1.\nUsing Gravity.RIGHT everywhere would sacrifice non-RTL languages\n. Hrm I think it's that the MDButton isn't fully initialized if it's invisible at the time DialogInit runs. Probably should always initialize the buttons even if they're invisible.\n. bee2ae6 does not work around the issue.\nThe issue comes from the framework's Dialog.java mCancelMessage, mDismissMessage and mShowMessage not being properly cleaned before being recycled, so they hold a reference and the Message ends up held by a background HandlerThread anywhere else in the project. Such threads could sleep a long time and hold a reference to the dialog the whole time.\nFrom app developer's point of view, they can try to work around it by posting idle messages to their HandlerThreads. From libraries that use HandlerThreads, they should try the same.\nMaterial-dialogs is a unique case in that it's actually handling dialogs. But it means we might be able to clean those Messages before they're recycled.\n. I'm not sure what the behavior would be if a dialog is reshown (I don't\nthink it's common, but I think it's allowed) after dismissing once. Also\ncan use Dialog.class directly rather than getSuperClass and should only do\nthis on <= 21 as it's been fixed in the framework.\nI'd like to dig a bit deeper to understand how the messages are improperly\nrecycled and figure out the best way to test the fix (as it won't happen\neverytime), but won't have a chance to do that for a while.\nOn Mon, May 11, 2015 at 7:11 PM, Aidan Follestad notifications@github.com\nwrote:\n\nClosed #513 https://github.com/afollestad/material-dialogs/issues/513.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/513#event-302299159\n.\n. \n",
    "ratana": "Kevin Barry -- love nova launcher.. thanks for the hard work on this one, hope it gets merged soon.  This brings this project from A to A+!\n. I do like the fact that this library adds scrollview by default - I've had to previously add scrollviews to my own custom dialog layouts with the Android dialogs, so it's very convenient, until it isn't :)   If anything I think this will be used in edge cases to display super custom listviews and other items which don't behave well when wrapped in a scrollview like the new datepickers etc.\nWhat about customView(View v) -- signature stays at it is, add to the builder -- applyScrollView(boolean apply) -- default true -- framework can then branch on the applyScrollView value, and doesn't break the builder pattern nor does it break compatibility with existing use?\nI feel a little guilty being the peanut gallery here but this seems like it would simplify the API while achieving everyone's goals.\n. ",
    "DSteve595": "Your fast updates are super appreciated, man. Thanks for the work you've put into this library!\n. Sorry to comment on this old bug but I didn't want to clutter the project up with a new one.\nI'm trying to add a RecyclerView to a MaterialDialog, but the dialog just comes up with no content. Ttitle and buttons do show.\n```\nMaterialDialog dialog = new MaterialDialog.Builder(this)\n    .theme(Theme.LIGHT)\n    .title(title)\n    .customView(R.layout.layout)\n    .neutralText(R.string.cancel)\n    .build();\nRecyclerView list = (RecyclerView) dialog.getCustomView().findViewById(R.id.list id);\nlist.setLayoutManager(new LinearLayoutManager(this));\nlist.setAdapter(new Adapter());\ndialog.show();\n```\nLayout XML:\n<android.support.v7.widget.RecyclerView xmlns:android=\"http://schemas.android.com/apk/res/android\"\nandroid:id=\"@+id/*list id*\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"wrap_content\" />\nI've also tried wrapping the RecyclerView in a FrameLayout, but it didn't change anything.\nI've confirmed that all of the above works in an activity and a normal dialog (new Dialog(), setContentView(R.layout.*layout*)). But in a Material Dialog, the adapter's onCreateViewHolder() method is never called. However, getItemCount() is called.\nIs this because of the ScrollView wrapper? If so, it would be very convenient to have a switch to not add it, and instead use strictly the layout provided. If it's something else, I'll help test however I can.\n. If Aidan agrees I'll make a new issue. Only posted it here because of the RecyclerView recommendation.\n. So that's definitely the cause? I haven't tested it without a ScrollView as I just have the library via gradle.\n. I just found teslacoil's tweak that doesn't use the ScrollView. I'm going to test it with that and report back.\n. Confirmed that it fixes the problem!\n. Thanks for the fast response! I must be doing something else wrong then.\n. Yep, it's a theming issue on my part.\nI see that the builder grabs the theme from the context of the app, but would it be possible to have an argument in the builder for a theme, like AlertDialog's builder has?\npublic AlertDialog.Builder (Context context, int theme)\nIt'd save a lot of redundant styling in some cases.\n. ",
    "vipulyaara": "Same here. On Jellybean 4.2.2. API 16.\nDialogs always appear in Dark backgrounds. Tried with both Theme.LIGHT and Theme.DARK.\n\n. ",
    "marbat87": "Did you revert the changes?\nI can not see them :(\nRegards.\n. it seems to be working for me, just adding these lines that you removed, after the \"super\" call in MaterialDialog constructor method:\n\nif (builder.theme == Theme.LIGHT && Build.VERSION.SDK_INT <=\n  Build.VERSION_CODES.GINGERBREAD_MR1) {        \n     setInverseBackgroundForced(true);      \n}\n\nThis should not mess up anything since it's executed only for API <= 10. Am I wrong?\n. Well the lines I mentioned are enough for me: I'll survive with wrong themed radio buttons on gingerbread.\nIf it's not a problem, could you add the only change in my post? \nThanks in advance\n. \nIt's still alive ;)\n. Ok. Dont' worry.\nRegards.\n. So people should throw away their phones just because their android version is old? Most people don't even know which android version they're running.. and maybe some people just cannot buy a new phone...\n. I confirm this issue starting from version 0.7.5.0.\n. @afollestad Thank you very much ;)\nIs there an ETA for the release?\nRegards,\nMarcello\n. This is not a REAL motivation, but library is your. I hope material component one would replace it at all.\nRegards. You're great \ud83d\udc4d . ",
    "blinkseb": "You don't have access to the context in the builder, since it's created after the dialog creation. You don't have others choices than moving the inflation after the dialog creation.\n. Yes, but it's not the same context!\nIn the builder, the context is not themed like the dialog, because the context is not yet wrapped in the ContextThemeWrapper.\nJust try, create an activity with a theme Light, create a dialog with the Dark theme, and use a TextView as a custom view. Set the text color to ?android:attr/textColorPrimary\nSince the dialog has a Dark theme, you expect the text color to be white. But since the context used for inflation is the one from the activity, the text color will actually be black, and the text will be unreadable.\nIf you don't want to add an additional variable to the Builder simply remove the method taking a View as argument. Most of the time the context used won't be correct.\n. ",
    "yazeed44": "https://www.dropbox.com/s/r1isp9jotlxp6v9/Screenshot_2014-11-19-20-57-49.png?dl=0\nThere's some items left , i might need to calucate the height myself , you think the bug from the scroll view you put automatically ?\n. This is the code for creating the grid view\n``` java\n private GridView getChooseView() {\nfinal ArrayList signatures = getSignatures();\nfinal GridView gridView = new GridView(this);\ngridView.setColumnWidth(getResources().getDimensionPixelSize(R.dimen.mini_signature_column_width));\ngridView.setHorizontalSpacing(getResources().getDimensionPixelSize(R.dimen.signature_spacing));\ngridView.setNumColumns(3);\ngridView.setAdapter(new ChooseSignatureAdapter(signatures, this));\nreturn gridView;\n}\n```\n. ",
    "mbarringer": "No, it's a bug in the material-dialogs library. Here's the sample app after just removing .title(R.string.states) from the builder in showLongList():\n\nPatching the library with\n@@ -149,6 +149,10 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n         // Title is set after it's determined whether to use first title or custom view title\n         if (builder.title == null || builder.title.toString().trim().isEmpty()) {\n             titleFrame.setVisibility(View.GONE);\n+            if (customView == null) {\n+                // Hide the custom title view as well\n+                view.findViewById(R.id.titleFrameCustomView).setVisibility(View.GONE);\n+            }\nThen has a much better look, although I think the margins still might be too large on top:\n\nI haven't looked through the code enough yet to submit an actual patch, but it really is a valid bug.\n. ",
    "jrgonzalezg": "Thanks!, great work :). Just a question: why the min api level is now 14? I have not yet tested it on Gingerbread but i have seen commits with fixes for Gingerbread so i thought it would work, wouldn't it?.\n. You are really quick ;). Thanks!... and good night :D\n. Haha, ok, its 22:16 here in Spain and i guess it is time for me to have some dinner :)\n. Great, the new compat builder will ease a lot the migration of old projects :)\n. The pom file seems to be being generated incorrectly: https://jcenter.bintray.com/com/afollestad/material-dialogs/commons/0.8.5.9/commons-0.8.5.9.pom with the unspecified version for core and that's why it fails or cycles when trying to resolve the dependency (depending on the task).\n. The problem is due to project :commons depending on :core and the build system being unable to identify the correct values of group, artifact and version of core to use when filling the commons pom.\nThis is currently being configured applying https://raw.githubusercontent.com/afollestad/aidanfollestad.com/master/android-release-aar.gradle at the end of core/build.gradle\nIf you just replace the contents of https://raw.githubusercontent.com/afollestad/aidanfollestad.com/master/android-release-aar.gradle with the contents of the attached txt (or something similar to that) it should work by re-generating the artifacts (gradle clean assemble generateRelease) and uploading the new versions to jcenter. A similar process can be applied to generate a local copy of the library with the fixed poms in a local maven repo for anyone wanting to depend on 0.8.5.9 before it gets fixed on jcenter.\nandroid-release-aar.txt\n. One \"easy\" way for generating a working copy on the normal mavenLocal() repository on a developer machine will be to replace the last line of both core/build.gradle and commons/build.gradle with the contents of the txt in my previous comment, but replacing the uploadArchives section with:\nGradle\nuploadArchives {\n    repositories {\n        mavenDeployer {\n            repository(url: mavenLocal().url)\n        }\n    }\n}\nFinally, to use it in your projects by using this method, you also need to have mavenLocal() in the repositories section of any project / module that needs to depend on this. It should then work just as if if were coming directly from a fixed version on jcenter. Also remember when declaring the dependency in your projects that the dependency group has changed in 0.8.5.9 from 'com.github.afollestad.material-dialogs' to 'com.afollestad.material-dialogs'.\n. That pull request causes other issues since you will not be able to compile new versions of the library without publishing it or going back and forth with the change of that PR. The fix i proposed will work for both current and future versions without requiring any project editing for compiling on different scenarios. It will also work with normal repository declaration and normal published artifacts to jcenter.\n. Of course there is @omidheshmatinia ... during development. If you are developing new features that are not yet ready it makes no sense to be publishing them to be able to test / debug them. If you raise the publish version, as you say, the build for commons and sample will fail until core is up on jcenter because before that you are depending on a yet unpublished version of core. So basically, that setup will not work well and will require either constant alternating changes on the build.gradle or publication of \"debug\" versions of core to test commons and sample (and waiting for it to be published too).\n. You're welcome!. I am glad you accepted my proposed solution :)\n. This \"fix\" will require to change that line for every new version of the library and to publish core before being able to compile commons or sample. The problem as i said on #1066 is the configuration of the group - artifact - version of the different modules and can be fixed with the instructions i already posted there.\n. ",
    "superkoni": "Hello !\nWhat are the requirement for version 14 ?\nMaybe a lower sdk can do the trick ? 10 ? 11 ?\n. ",
    "fstephany": "\\o/\n. This is great, thanks guys!\n. ",
    "TriPSs": "https://github.com/umano/AndroidSlidingUpPanel\n. Ty\n. ",
    "bakua": "Awesome thanks, good job. Would it be possible to make button colour theming global as well please?\nThank you.\n. I see, cool thanks :)\n. Although it would be nice to spit theme for different buttons. Because usually you want to have positive button of another color than negative one.\n. ",
    "ZacSweers": "?\nOn Sun, Nov 30, 2014 at 11:06 AM Aidan Follestad notifications@github.com\nwrote:\n\nClosed #63 https://github.com/afollestad/material-dialogs/issues/63.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/63#event-200289115\n.\n. You didn't even give an explanation before closing this. Why do you not allow subclassing?\n. If you're extending from AlertDialog, I feel like you should do the same as it (make the constructor protected). Siphoning off the ability to subclass just to prevent people from accidentally using the default constructor feels heavy handed. Making it protected achieves the same thing while allowing extension and matching the AlertDialog API\n. Thanks!\n. Skimming over the code, does the library not use a listview for single/multiple choice views? That would explain the scrolling performance issues (since it's inflating everything upfront).\n\nIf this is the case, would you consider a pull request to improve this? Either with an internal adapter implementation or option to do similar to AlertDialog's setAdapter() interface (or both)?\nUnfortunately this is a dealbreaker for us at the moment, and I may end up just implementing it on my own locally for our use at the very least anyway.\n. The sample has a long simple list with text only. Try making a long single choice list. The radio buttons add a nontrivial amount of work to the inflations.\n. By just changing the sample long list to be single choice like so:\njava\nprivate void showLongList() {\n    new MaterialDialog.Builder(this)\n            .title(R.string.states)\n            .items(R.array.states)\n            .itemsCallbackSingleChoice(0, new MaterialDialog.ListCallback() {\n                @Override\n                public void onSelection(MaterialDialog dialog, View itemView, int which, CharSequence text) {\n                    Toast.makeText(getApplicationContext(), which + \": \" + text, Toast.LENGTH_SHORT).show();\n                }\n            })\n            .build()\n            .show();\n}\nThis is the result: https://www.dropbox.com/s/46etfcct8fk136m/device-2014-11-30-193858.mp4?dl=0\nTowards the end it finally catches up and acts smoothly.\nDebug logs showing this as well:\n11-30 19:38:43.339    4729-4729/com.afollestad.materialdialogssample I/Choreographer\ufe55 Skipped 30 frames!  The application may be doing too much work on its main thread.\n11-30 19:38:45.402    4729-4729/com.afollestad.materialdialogssample I/Choreographer\ufe55 Skipped 31 frames!  The application may be doing too much work on its main thread.\n11-30 19:38:46.011    4729-4729/com.afollestad.materialdialogssample I/Choreographer\ufe55 Skipped 34 frames!  The application may be doing too much work on its main thread.\n11-30 19:38:47.621    4729-4729/com.afollestad.materialdialogssample I/Choreographer\ufe55 Skipped 30 frames!  The application may be doing too much work on its main thread.\n11-30 19:38:48.721    4729-4729/com.afollestad.materialdialogssample I/Choreographer\ufe55 Skipped 30 frames!  The application may be doing too much work on its main thread.\n11-30 19:38:49.860    4729-4729/com.afollestad.materialdialogssample I/Choreographer\ufe55 Skipped 33 frames!  The application may be doing too much work on its main thread.\n11-30 19:38:52.743    4729-4729/com.afollestad.materialdialogssample I/Choreographer\ufe55 Skipped 33 frames!  The application may be doing too much work on its main thread.\n. Cool, I'll take a crack at it.\n. I think that's unrelated to this, and worthy of a separate issue.\n. Ah. Should note though that my implementation didn't actually use\nrecyclerview, as it was surplus to the requirements and just adds an\nunnecessary transient dependency to the library.\nOn Sun, Dec 28, 2014 at 12:39 PM Steven Schoen notifications@github.com\nwrote:\n\nIf Aidan agrees I'll make a new issue. Only posted it here because of the\nRecyclerView recommendation.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/64#issuecomment-68218683\n.\n. My coworker @emilsjolander also looked over the code before I pushed it, so should be pretty bug free\n. RecyclerView adds an extra transient dependency that developers may not want as part of the library. It also wouldn't really make a difference in this case.\n\nPer the developer docs: \n\nUse the RecyclerView widget when you have data collections whose elements change at runtime based on user action or network events.\n\nSince the first party adapters are just simple and not updating items dynamically, there's no need for it. They're simple enough views as well that there's no noticeable performance difference.\n. I was going by the material spec for dialogs, mainly because I noticed some places had extra side padding beneath the title. Is that what you're referring to?\n. Ah, alrighty\n. Weird. Keep me posted!\nOn Mon, Dec 1, 2014 at 7:58 PM Aidan Follestad notifications@github.com\nwrote:\n\nTurns out there was actually an issue created from the latest code, for\nwhatever reason Gradle doesn't want to generate Javadoc while uploading to\nBintray which prevents the entire build cycle from finishing. I'll have to\nlook into it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/pull/72#issuecomment-65180157\n.\n. There was a place where I put @returns instead of @return, though I don't think I've seen any issues with that before\n. Are dividers shown for dialogs? Looking at the material spec, I only see one possible example of it: http://www.google.com/design/spec/components/dialogs.html#dialogs-confirmation-dialogs\n. Gotcha\n. awesome :+1:\n. The material spec suggests otherwise when dealing with scrollable content.\n. That's because this dialog's API has a different method, called contentView()\n\nThat said, this confusion is part of the reason why I think it would be better if the API didn't diverge from standard AlertDialog's API\n. Ah oops, I didn't read close enough. Yeah I feel the same way in regards to being prepared for appcompat. I did see he merged a PR that implemented some missing methods from the compat dialog, maybe this was added?\n. Published to maven you mean? :P\nOn Mon, Dec 15, 2014, 11:08 AM Aidan Follestad notifications@github.com\nwrote:\n\nThis is not published to Gradle yet, it's only in the GitHub code.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/117#issuecomment-67047052\n.\n. +1 for making the API match alertdialog. Appcompat will eventually support dialog theming, it would be nice to keep the same API in order to make that transition easier for anyone that does.\n. It's a fair question considering most dialogs (including the system ones)\ndo allow you to manually set click listeners. You should hear him out if\nyou're asking why, closing the issue before giving them a chance to respond seems dismissive.\n. Ah, I thought he meant that's what was missing. Fair enough.\n\nOn Mon, Dec 15, 2014, 11:10 AM Aidan Follestad notifications@github.com\nwrote:\n\nIt's not an issue with the library though, there's plenty of documentation\nthat answers his question.\nMaterialDialogCompat.Builder has methods for setting listeners to\nindividual action buttons like the stock AlertDialog.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/118#issuecomment-67047271\n.\n. An alternative solution is to allow the user to force one style or another by making isStackingNeeded() protected, which they can override to always return whichever they choose.\n. Scratch this, the most recent version of the library appears to have fixed this. It would still be nice to let the user override isStackingNeeded() however. An alternate use would be if they want to always force stacking\n. Perhaps a StackingBehavior enum that can be set? With values ALWAYS, NEVER, DEFAULT.\n. Pull requested a fix in #124. Sorry if I sounded frustrated in the issue text above, I spent a solid 2 hours pulling my hair out trying to figure out why the dialog listeners weren't behaving normally :fearful: \n. Great! Thanks for the quick turnaround.\n. @erawhctim did ButtonCallback work for you? I was the one that pull requested that change and just wanted to make sure it's behaving as expected. FullCallback should still work as expected. I add support so it wouldn't break existing implementations, but it's still powered by the new ButtonCallback under the hood. This isn't really preferable though, for the very reason you mentioned here. ButtonCallback allows you to override these \u00e1 la carte.\n. The fullcallback was removed some time ago, are you using the latest\nlibrary version? Also button clicks should be decoupled from item item\nclicks. If they're dependent on each other, I think you're probably trying\nto do something wonky.\n\nOn Tue, Jan 13, 2015, 10:04 AM Kyle notifications@github.com wrote:\n\n@erawhctim https://github.com/erawhctim - I'm running into the same\nproblem. I'm using itemsCallbackSingleChoice with the ListCallback' and\nthen aButtonCallbackfor the positive button. The positive button fires\nfirst, then theonSelectionevent for theListCallbacklistener. I'm not\nusing FullCallback... I need the selected position from theonSelection`\nevent to then do something when the positive button event fires. Any\nsuggestions?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/132#issuecomment-69789489\n.\n. That and there's a getSelectedIndex() method on the dialog as well. If you\nupdated your original comment, in the future you should just comment again\nbecause github doesn't send email updates for comment edits :P\n\nOn Tue, Jan 13, 2015, 10:56 AM Kyle notifications@github.com wrote:\n\n@hzsweers https://github.com/hzsweers, as I mentioned, I'm not using\nthe FullCallback, and yes, I'm using the most recent version of the\nlibrary. I don't think I'm trying to do something wonky - it seems\ncompletely legitimate to want to know the value of the item selected, prior\nto hitting OK.\n- User taps an item - I need to know what was tapped\n- User taps OK button - the selected item needs to be passed to the OK\n  button handler in order to do something based on that specific selection\nRegardless, I think the issue has been resolved, as I noted in my original\ncomment - the alwaysCallSingleChoiceCallback enables the functionality that\nI need.\nThanks for the response though.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/132#issuecomment-69798071\n.\n. I added this feature last week. I think this is a problem with your local setup. I'm able to use this just fine, and both the builder method and class itself are very clearly there.\n. This seems simple enough to add, it might happen faster if you pull request this yourself instead.\n. I added support for this last week via dialog.getSelectedIndices(), but it's currently broken. I have a pull request that fixes this\n. @TomasValenta \n\njava\nnew MaterialDialog.Builder(this)\n        .title(R.string.socialNetworks)\n        .items(R.array.socialNetworks)\n        .autoDismiss(false)\n        .itemsCallbackMultiChoice(new Integer[]{1, 3}, new MaterialDialog.ListCallbackMulti() {\n            @Override\n            public void onSelection(MaterialDialog dialog, Integer[] which, CharSequence[] text) {\n                // Do whatever\n            }\n        })\n        .positiveText(R.string.choose)\n        .callback(new MaterialDialog.ButtonCallback() {\n            @Override\n            public void onPositive(MaterialDialog dialog) {\n                Integer[] which = dialog.getSelectedIndices();\n                StringBuilder str = new StringBuilder();\n                for (Integer aWhich : which) {\n                    str.append(aWhich).append('\\n');\n                }\n                Toast.makeText(MainActivity.this, str.toString(), Toast.LENGTH_SHORT).show();\n                dialog.dismiss();\n            }\n        })\n        .show();\nAn excellent use case would be updating some sort of setting, where you want something to happen only when the positive button is clicked.\n. I probably accidentally did this when I was switching it to a listview. Want me to take a look?\n. Thanks! Is this in 0.4.9?\n. Thanks!\n. You wouldn't even consider at least allowing the user to specify whether or not they want the listener to fire every click?\n. Cool, I'll add that in the PR. What about passing an index in the callback (and using -1 when it's from clicking \"done\")?\n. I'm not suggesting removing anything from the current callback, rather adding a param\n. how...? The library is only ~12MB of code. Removing the old version is this short of a time span is a serious problem, as it breaks everyone's project if they use it and can't update just yet. \n. Why not keep the most recent 50 and then have the previous 50 before that be major versions? I feel like temporal relevance is just as important as version importance\n. At the very least it would be nice to know which ones are going to be kept and which ones will be deleted. This broke our master branch with no warning. 500MB should still be plenty for a 12MB library though.\n. Great, thanks. I think even just keeping a set of, say, the 10-15 most recent version should give people plenty of time to update while still keeping well under your data cap :smile: \n. Always happy to help :)\n. So the problem appears that the aar's class file looks like this:\njava\n@android.support.annotation.IntDef({8388611, 1, 8388613})\npublic static @interface GravityInt {\n}\nWhen it should look like this\njava\n@android.support.annotation.IntDef({Gravity.Start, Gravity.CENTER_HORIZONTAL, Gravity.End})\npublic static @interface GravityInt {\n}\nLooking in to see why these are not kept in the class file\n. I don't think there's a way around this unfortunately, I think we'll have to have constants MaterialDialog that mimic those names and use those instead of the ones from Gravity. The compiler inlines their values since they're from an external class. I'll PR with a fix for this momentarily.\nWhy Google decided that AARs can't include source code is beyond me \u0ca0_\u0ca0\n. @afollestad did you still want me to look into something related to this pull?\n. I'll look into it\n. @FrancisCan I'm unable to reproduce this with this snippet:\n``` java\nCharSequence[] items = new CharSequence[30];\nfor (int i = 0; i < items.length; ++i) {\n    items[i] = \"\" + i;\n}\nnew MaterialDialog.Builder(this)\n        .title(R.string.socialNetworks)\n        .items(items)\n        .itemsCallbackMultiChoice(new Integer[]{1, 3}, new MaterialDialog.ListCallbackMulti() {\n            @Override\n            public void onSelection(MaterialDialog dialog, Integer[] which, CharSequence[] text) {\n                StringBuilder str = new StringBuilder();\n                for (int i = 0; i < which.length; i++) {\n                    str.append(which[i]);\n                    str.append(\": \");\n                    str.append(text[i]);\n                    str.append('\\n');\n                }\n                Toast.makeText(getApplicationContext(), str.toString(), Toast.LENGTH_LONG).show();\n            }\n        })\n        .positiveText(R.string.choose)\n    .show();\n\n```\nCould you maybe provide an example code snippet that displays this behavior?\n. Best bet is probably to just do a plain old instanceof, since recyclerview extends viewgroup \n. AARs only consist of class files, so I'm not sure how Retention.SOURCE\nmakes a difference since you don't get the source. I'll look at it\nOn Mon, Jan 5, 2015 at 1:55 AM Tolriq notifications@github.com wrote:\n\n@hzsweers https://github.com/hzsweers seems the problem is that you do\nnot use :\n@Retention(RetentionPolicy.SOURCE)\nSo maybe worth trying with the Retention annotation and get back to direct\nGravity support\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/165#issuecomment-68687323\n.\n. Retention.CLASS is the default, aka what it currently is set to\nOn Mon, Jan 5, 2015 at 4:03 AM Tolriq notifications@github.com wrote:\nWell not expert on that :(\nBut\nhttps://developer.android.com/reference/android/support/annotation/IntDef.html\ntalk about Class.\nWhile http://tools.android.com/tech-docs/support-annotations talk about\nRetentionPolicy.SOURCE\nReading your comment I support first one is the correct one ;)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/165#issuecomment-68699511\n.\n. Unfortunately he's right. I don't think we can get away with using IntDef as long as the AAR package type doesn't allow including source. I'll switch it to enum and we'll have to leave it at that. This is made more annoying by the fact that this isn't easily testable without actually publishing a release of the library. \n. > Can't just this part be migrated to simple debug assert or similar process ?\n\nI don't know what this means.\n\nAll the conversions are just more code to maintain, and complexity for devs for no real gain.\n\nThere is a gain: it now works without linting errors from the IDE. Using enums is not a bad thing, it's just less nice than using IntDef (for multiple reasons).\n\n(And BTW I'm often right as in all the other issues ;) )\n\n\nI've pull requested a fix, this should resolve everything for now. Let's be done with this.\n. This doesn't seem to have fixed it for me, I still see the vibration on lists that are slightly larger than the available space.\n. Also items don't seem to be focusable when the hitter is occurring. The click is registered, but the item view doesn't update, nor is there any ripple :frowning: \n. Well it wasn't just the selector. It wouldn't update the item to be marked\nas \"clicked\" either :/\nAny luck with the jiggly windows?\nOn Fri, Jan 9, 2015, 11:08 AM Aidan Follestad notifications@github.com\nwrote:\n\n@hzsweers https://github.com/hzsweers I figured out why there's no\nselector. Before it was explicitly set to the list item layout backgrounds.\nI removed that because I thought they were set via code. Now that I was\ngoing through and adding customizable selectors, I found and fixed the\nissue.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/pull/169#issuecomment-69382507\n.\n. I'll do some research. In the meantime, you can always make the next release 0.5.10 :stuck_out_tongue: \n. So the only thing I can think of is to set the dialog width to be a fixed width and just calculate what the number of pixels it would be by subtracting the width of the margins on each side from the window's full width. Height fortunately can stay as wrap_content.\n\nNot the prettiest, but it would be the best way to go about it for the time being IMO. Let me know what you think, and if you like it I can PR tomorrow morning.\n. Alright, let me try to find out what the normal margins are and go from there\n. You know what, I think it might actually be behaving just fine...\nLooking at the different views in the samples and comparing them to stock dialogs, it seems to be fine.\n\n\n\n\n\n. @teslacoil I don't think it's that simple. In my testing, the window will wiggle even if no item's been selected.\n. @teslacoil I'll take a look this later evening\n. @teslacoil @afollestad that looks like it fixed it!\n. \u00af(\u30c4)/\u00af I didn't implement those\n. Weird, my arm is missing\n. That works, thanks!\n. I have no idea. When you or @TomasValenta press the button, does the ripple just wrap the text or does it match the width of the dialog (as in, maybe a layout gravity issue). Alternatively, does changing the order of the method calls in the builder change anything?\n. Idk then\nOn Tue, Feb 17, 2015, 1:52 AM Tom\u00e1\u0161 Valenta notifications@github.com\nwrote:\n\n@hzsweers https://github.com/hzsweers: The ripple wrap the whole width\nof the dialog. Changing order of the method calls in the builder does not\nchange anything of the situation, but I have not tried all combinations...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/256#issuecomment-74642231\n.\n. It'd be nice to have a chance to respond before you close the issue. I think it can be done by simply having a transparent background. I'll look at this weekend\n. :+1:\n. Could the examples here help? https://corner.squareup.com/2015/08/a-small-leak.html\n. Users should be mindful of this in their dialogfragment implementations\nIMO. We do for ours, and are very careful not to leak things.\nOn Mon, Sep 7, 2015 at 6:24 PM Aidan Follestad notifications@github.com\nwrote:\nA major case in which a dialog is re-used is DialogFragments. The\nfragments save and restore instance states, removing the listeners would\ndestroy the ability for that to work.\nNot sure if there's any good solution for this, or if it's truly needed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/513#issuecomment-138402599\n.\n. @plusCubed is it possible to see what insets AppCompat uses for different screen sizes, or do they not use insetRight and insetLeft? I agree that it's frustrating that Google offers little-to-no tablet information in the Material spec\n. I see. We might have a couple of contacts at google on the MD team that we can reach out to on this, I'll shake some trees and report back. In the meantime, it would probably be safe to categorize insets for phones, 7\" tablets, and 9\"+ tablets to keep things simple. What do you think?\n. So talked with our contact, and they gave us some guidelines:\nWe haven't established max widths of dialogs or bottom sheets. Instead, for the sake of flexibility, we simply determine width based on content needs and using increments (either 56dp for small screens, or 64dp for large screens). \nFor example, this dialog from spec is 5x width, or 280dp.\n\n\n\nYou can see here, in the metrics and keylines section of the Material Design spec, that we can use increments to determine multiple aspects of a layout, this way the size of various structural components relate to each other.\n\nRegarding items with variable width and can fit to the container of the parent (text, gridviews, etc):\n\nWhat I would suggest is a combination of the increments described, and an understanding of appropriate line length based on the content. \nThere is a section in spec under typography that talks about appropriate line length if you scroll down in the section a bit. \n\nI put together this gist of some examples: https://gist.github.com/hzsweers/eb76c43f1a4536173af4\nI think ultimately what we should do is just go with the width settings of the system dialogs. Open source, so we should hopefully be able to dig in and find them. Target that size, and allow custom views in the dialog to request a wider view if necessary (layoutparams + results of their onMeasure).\nWhat do you think?\n. We had a hangout with members of the material team on Tuesday and they're\ngoing to look at improving the guidelines in Themis regard. In the\nmeantime, we agreed it's probably best to define upper and lower bounds for\nwidth in accordance with the spec for line length, so I think we should\nshoot for that.\nProposed rules:\n- If a custom view and it wraps its content, try to wrap around the view's\n  intrinsic width (measure first and set the rest of the dialog's dimensions\n  accordingly)\n- If custom view and match/fill parent, then fall back to line length\n  (maybe discourage this though)\n- If no custom view (I.e. The built-in stuff), all fall back to line length\n  bounds. Message-only especially can benefit from this.\n- after calculating desired line length and dialog width, set horizontal\n  margins accordingly to force this size. Use a density-specific Boolean resource to resolve screen sizes and choose line lengths accordingly.\nThoughts?\n. I think we can be flexible regarding \"short\" lines. If it's below a certain number of characters, just assume it's a short message and measure accordingly. Default to the 60 character length though.\nI think the character size won't really be a worry across languages though. We can revisit if people bring it up, but otherwise I think we can get probably 95% of what we want with behavior just with the simple approach.\nSo to be clear, my suggestion is:\n- Default to 60 char line length + normal horizonal insets as dialog width\n- If message is less than, say, 45 chars (we can test to see what looks best), then use the narrower line spec.\n. if they wrap content, we can just use its given size. Onus is on the user to be intelligent about their custom views. If they say match/fill parent, then just limit it to the upper bound we defined above\n. Actually, I have a new idea that's much simpler. Notification panel has strict dimens for its sizes on different screen sizes, and it just so happens that this looks like it's about right. Maybe we can just steal them?\nExample: https://android.googlesource.com/platform/frameworks/base/+/13522a2/packages/SystemUI/res/values-sw600dp/dimens.xml\nSee notification_panel_width\n. Boom: https://github.com/afollestad/material-dialogs/pull/640\n. The solution I pull requested covers probably 95% of all use cases for\ndialogs. If you really need something that needs dynamic width, then you\nprobably shouldn't be using dialogs IMO. The main issue here was always\nthat dialogs took full width on tablets, which this solves. If someone can\ncome up with a good solution for reliably measuring custom view content\nbefore the dialog is shown, I'm all for it. Until then, I think this is\nenough.\nOn Mon, Aug 3, 2015, 10:22 PM Lev Shock notifications@github.com wrote:\n\nWhat about the ability to set dialog width to \"wrap_content\"?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/552#issuecomment-127482461\n.\n. This isn't a bug as much as it is yet another issue with samsung doing wonky stuff. Google should be helping us here though, IIRC build tools 22+ automatically fixes this in layout files by removing paddingStart attributes in the main files and creating copies of them in -v17 resource directories where that attribute is safe to use. @yukuku @Sivanga what build tools versions are you using?\n. Ah, yeah I believe you'll solve your problem when you update to 22.0.1.\n. No official references (classic Google...), but a redditor and I talked and confirmed it when I posted about it awhile back.\n\nBasically any xml file that has one of those problematic attributes gets copied completely into a new file under -v17 and the attributes are removed in the original file.\n. Cool! Glad that worked. I think it's probably best to just close this since\nthe solution is a build tools version. 22 has been out for awhile, so\nhopefully people can update to it soon enough.\nOn Wed, Jul 1, 2015 at 5:40 AM yukuku notifications@github.com wrote:\n\n@hzsweers https://github.com/hzsweers Thanks! Confirmed with building\nmaterial-dialogs with Build Tools 22.0.1:\nandroid:paddingStart=\"@dimen/md_listitem_control_margin\"\ndoes not appear in layout/md_listitem_singlechoice.xml, and then a copy\nof the original file is generated at layout-v17 folder.\nSame with the original layout-ldrtl variant \u2014 the original is\nautomatically located at layout-ldrtl-v17, and the one without the\npaddingStart is at layout-ldrtl folder.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/589#issuecomment-117644516\n.\n. It forces you to code defensively, and the library can't guarantee that the result won't be null if there's any case where it does.\n. @Remasky what happens if you change textColorPrimary attributes in your themes/styles?\n. Ah, then I'm out of ideas again :/\nOn Wed, Jul 1, 2015 at 5:01 AM Remasky notifications@github.com wrote:\n@hzsweers https://github.com/hzsweers nothing... the same colors as\nabove\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/596#issuecomment-117633573\n.\n. Doubtful, that kind of issue sounds like theme/style problems.\n\nOn Thu, Jul 2, 2015, 12:05 AM Remasky notifications@github.com wrote:\n\nDo you think it can be caused by PreferenceFragment?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/596#issuecomment-117936840\n.\n. Possibly. Give me a day or two and I'll try to put together a more structure proposal of what would go where.\n. Sorry late on this, completely forgot :/ \n\nHere's what I propose:\nCommons:\n- entire prefs package\n  - This can possibly even expand to a third module for supporting the new compat preferences, if necessary.\n- entire progress package\n- entire simplelist package\n- ColorChooserDialog\nCore:\n- everything else\n  - Move ThemeSingleton to internal package\nThis would include proper resource separation as well. The sample app would obviously depend on both, and the commons module would obviously depend on the core module\n. Fair enough\nOn Mon, Sep 7, 2015 at 6:19 PM Aidan Follestad notifications@github.com\nwrote:\n\nThe progress package however won't be able to be easily moved, though. The\nlayouts and everything are deeply integrated into MaterialDialog and\nDialogInit. It's not worth moving into new classes, and it's very\ncommonly used among the people who use it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/642#issuecomment-138401334\n.\n. \n",
    "daj": "FTR, the simplest workaround is to use solo.waitForText for the text you expect to see in the MaterialDialog, and don't try to use solo.waitForDialogToOpen().\n. ",
    "stleusc": "No it does not....\nMaybe you should not close issues until confirmed fixed.... will reopen a new issue.\n. yes and no\nmargin on top and bottom seem to be the same now but margin is larger when no title is shown vs title is shown.\nCan be observed in latest playstore demo as well. Check \na) Basic List\nb) Basic List (No Title)\nTo better see the bottom margin, press and hold last list item and look at white area below last list item.\nI guess for consistent L&F it should be smaller in case b)\n. can that be made configurable?\nI think it looks nicer with maybe 8dp or so. But taste is different :-)\nHaving this as a attr or so in the theme would be great...\nyou are quick :+1: \n. I can't use it because that is not how DialogPreference works in Android!\nThe actual dialog gets build and show by Google internal code.\nAll I have is ```java\nprotected void onPrepareDialogBuilder(MaterialDialog.Builder builder)\ncallback!\nSo no, you're idea does not work with that.\n. This is from google DialogPreference...\n``` java\n    /*\n     * Shows the dialog associated with this Preference. This is normally initiated\n     * automatically on clicking on the preference. Call this method if you need to\n     * show the dialog on some other event.\n     * \n     * @param state Optional instance state to restore on the dialog\n     /\n    protected void showDialog(Bundle state) {\n        Context context = getContext();\n    mWhichButtonClicked = DialogInterface.BUTTON_NEGATIVE;\n\n    mBuilder = new AlertDialog.Builder(context)\n        .setTitle(mDialogTitle)\n        .setIcon(mDialogIcon)\n        .setPositiveButton(mPositiveButtonText, this)\n        .setNegativeButton(mNegativeButtonText, this);\n\n    View contentView = onCreateDialogView();\n    if (contentView != null) {\n        onBindDialogView(contentView);\n        mBuilder.setView(contentView);\n    } else {\n        mBuilder.setMessage(mDialogMessage);\n    }\n\n    onPrepareDialogBuilder(mBuilder);\n\n    getPreferenceManager().registerOnActivityDestroyListener(this);\n\n    // Create the dialog\n    final Dialog dialog = mDialog = mBuilder.create();\n    if (state != null) {\n        dialog.onRestoreInstanceState(state);\n    }\n    if (needInputMethod()) {\n        requestInputMethod(dialog);\n    }\n    dialog.setOnDismissListener(this);\n    dialog.show();\n}\n\n```\nIdea: add function to builder to set custom AdapterView.OnItemClickListener.\nThen, when that is set (maybe set it together with adapter in one call, 2 params) set this via listView.setOnItemClickListener(MYCALLBACK).\n. yeah great... that makes it really messy\n. Ok, not a Git expert on pull requests... next post has my change as unified diff based on your latest version.\na) it shows what I mean\nb) it even implements it :-)\nIt still is now in the users hand, but I can set it via builder instead of via dialog later.\n. ``` diff\n .../afollestad/materialdialogs/MaterialDialog.java |   17 ++++++++++++++++-\n 1 files changed, 16 insertions(+), 1 deletions(-)\ndiff --git a/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java b/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java\nindex 7c37fe5..4e89f20 100644\n--- a/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java\n+++ b/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java\n@@ -71,6 +71,7 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n     private ListCallback listCallback;\n     private ListCallback listCallbackSingle;\n     private ListCallbackMulti listCallbackMulti;\n+    private AdapterView.OnItemClickListener itemClicklistener;\n     private View customView;\n     private CharSequence[] items;\n     private boolean isStacked;\n@@ -123,6 +124,7 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n         this.selectedIndices = builder.selectedIndicies;\n         this.autoDismiss = builder.autoDismiss;\n         this.adapter = builder.adapter;\n+        this.itemClicklistener = builder.itemClicklistener;\n     this.positiveColor = builder.positiveColor;\n     this.negativeColor = builder.negativeColor;\n\n@@ -354,7 +356,9 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n         listViewContainer.setVisibility(View.VISIBLE);\n         listView.setAdapter(adapter);\n\nif (listType != null) {\nif (itemClicklistener != null) {\nlistView.setOnItemClickListener(itemClicklistener);\n} else if (listType != null) {\n             // Only set listener for 1st-party adapter, leave custom adapter implementation to user with getListView()\n             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n                 @Override\n@@ -664,6 +668,7 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n         protected Typeface mediumFont;\n         protected Drawable icon;\n         protected ListAdapter adapter;\n\npublic AdapterView.OnItemClickListener itemClicklistener;\n         private OnDismissListener dismissListener;\n         private OnCancelListener cancelListener;\n         private OnShowListener showListener;\n@@ -946,6 +951,16 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n             return this;\n         }\n\n\n/**\n\n\n\nSets a custom {@link AdapterView.OnItemClickListener} for the dialog's list\n\n\n*\n\n\n@return This Builder object to allow for chaining of calls to set methods\n\n\n*/\npublic Builder itemClickListener(AdapterView.OnItemClickListener listener) {\nthis.itemClicklistener = listener;\nreturn this;\n}\n+\n         public Builder showListener(OnShowListener listener) {\n             this.showListener = listener;\n             return this;\n. added support for autodismiss() if set....\n. diff\n .../afollestad/materialdialogs/MaterialDialog.java |   23 +++++++++++++++++++-\n 1 files changed, 22 insertions(+), 1 deletions(-)\n\ndiff --git a/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java b/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java\nindex 7c37fe5..27667f1 100644\n--- a/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java\n+++ b/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java\n@@ -71,6 +71,7 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n     private ListCallback listCallback;\n     private ListCallback listCallbackSingle;\n     private ListCallbackMulti listCallbackMulti;\n+    private AdapterView.OnItemClickListener itemClicklistener;\n     private View customView;\n     private CharSequence[] items;\n     private boolean isStacked;\n@@ -123,6 +124,7 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n         this.selectedIndices = builder.selectedIndicies;\n         this.autoDismiss = builder.autoDismiss;\n         this.adapter = builder.adapter;\n+        this.itemClicklistener = builder.itemClicklistener;\n     this.positiveColor = builder.positiveColor;\n     this.negativeColor = builder.negativeColor;\n\n@@ -354,7 +356,15 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n         listViewContainer.setVisibility(View.VISIBLE);\n         listView.setAdapter(adapter);\n\nif (listType != null) {\nif (itemClicklistener != null) {\nlistView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n@Override\npublic void onItemClick(AdapterView<?> parent, View view, int position, long id) {\nif (autoDismiss) dismiss();\nitemClicklistener.onItemClick(parent, view, position, id);\n}\n});\n} else if (listType != null) {\n             // Only set listener for 1st-party adapter, leave custom adapter implementation to user with getListView()\n             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n                 @Override\n@@ -664,6 +674,7 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n         protected Typeface mediumFont;\n         protected Drawable icon;\n         protected ListAdapter adapter;\n\npublic AdapterView.OnItemClickListener itemClicklistener;\n         private OnDismissListener dismissListener;\n         private OnCancelListener cancelListener;\n         private OnShowListener showListener;\n@@ -946,6 +957,16 @@ public class MaterialDialog extends DialogBase implements View.OnClickListener,\n             return this;\n         }\n\n\n/**\n\n\n\nSets a custom {@link AdapterView.OnItemClickListener} for the dialog's list\n\n\n*\n\n\n@return This Builder object to allow for chaining of calls to set methods\n\n\n*/\npublic Builder itemClickListener(AdapterView.OnItemClickListener listener) {\nthis.itemClicklistener = listener;\nreturn this;\n}\n+\n         public Builder showListener(OnShowListener listener) {\n             this.showListener = listener;\n             return this;\n```\n. I know, but to be honest, I never used that. I don't really use git at all for my stuff.\nAll I do is pull a copy, that is it :-(\n\nWould be great if you still could apply my patch after reviewing it.\nThanks!\n. The comment is a unified diff and git can apply that to your local repo.\n. Seriously?\nExplain me how adding an API impacts existing apps?\nIf you don't call/use the new API all executed as before....\nI'm sure you have at least one example so I can work on it and fix it...\nOn Dec 14, 2014 12:15 AM, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nThis would unfortunately cause a lot of compatibility with existing apps\nthat use this library. You could maintain this yourself, though.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/pull/106#issuecomment-66903241\n.\n. No, I consider it wrong!\n2 reasons: \na) It worked in the past\nb) using the scrollview is adding the padding\n. Nope the sample does NOT have a simple Input Dialog!\nYou set the padding when scrolllayout is used, don't you?\ncustomView(view, true) <-- padding is set\ncustomView(view, false) <-- padding is NOT set\n\nI use the first version in which you SET padding. This padding is added to the EditView and screwing it up.\nWould LOVE to see a working example of this in the sample app but it only has a more complex layout....\n. Another summary:\na) I am using the scrollview feature you provide\nb) you are adding the padding\nc) it looks skewed\nd) there is no existing example that uses a simple single EditView as content\nSo I still think it's broken....\n. Thanks for acknowledging the bug....\nYes, I could warp the EditText but since I use that construct rather extensively I requires some more rework on my end.\nA fix on the Library side would be appreciated.\n. Thanks! Testing right now....\n. Appreciate the quick fix! Now it works again as expected...\nWell done!\n. ",
    "AlexKorovyansky": "In this case, which parameter of a theme should change progress indicator color?\n. I'm trying to use AppCompat, set colorAccent to blue, creating ProgressDialog fragment, but it has default blue-green color progress indicator on Lollipop device and default gray progress indicator on KitKat device.\n. Yes, I'm using Activity context.\n. Give me some time to figure out, what can be the reason of this behaviour. \n. By the way, I'm having deal infinite ProgressDialog. Are you sure, default stuff should work for it?\n. I checked Cabinet, added call of Utils.showProgressDialog(this, R.string.app_name); to entry activity, and... Progressbar color is not customized neither on Lollipop nor on KitKat.\n. I created MaterialDialog with custom layout equal to standard progress\ndialog and it works good for me. I assume the subject should be added to\nthe library.\nOn Dec 22, 2014 4:13 AM, \"eth0izzle\" notifications@github.com wrote:\n\nI also couldn't get this worked. No matter what I try it still uses the\n\"old style\". Any ideas?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/68#issuecomment-67787211\n.\n. \n",
    "asilveir": "@AlexKorovyansky you found solution for this ? I need the same thing\n. ",
    "niko001": "Here is my solution (probably very similar to @AlexKorovyansky's).\nI used the MaterialDesignLibrary to achieve a Lollipop-like ProgressBar (styled in my app's primary color).\nlayout/progress_dialog_material.xml:\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<LinearLayout\n    android:id=\"@+id/body\"\n    android:orientation=\"horizontal\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:baselineAligned=\"false\">\n\n    <!-- This can of course also be a regular indeterminate ProgressBar, but then it won't be styled -->\n    <com.gc.materialdesign.views.ProgressBarCircularIndeterminate\n        android:id=\"@+id/progress\"\n        android:layout_width=\"46dp\"\n        android:layout_height=\"46dp\"\n        android:background=\"@color/material_primary\"\n        android:layout_marginEnd=\"@dimen/alert_dialog_padding_material\"\n        android:layout_marginRight=\"@dimen/alert_dialog_padding_material\" />\n\n    <TextView\n        android:id=\"@+id/message\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center_vertical\" />\n</LinearLayout>\n\n\n```\nvalues/dimens.xml:\n<dimen name=\"alert_dialog_padding_material\">24dp</dimen>\nMyActivity.java:\njava\nMaterialDialog progressDialog = new MaterialDialog.Builder(this)\n    .title(\"Please wait\")\n    .customView(R.layout.progress_dialog_material)\n    .build();\nView customView = progressDialog.getCustomView();\nTextView tvMessage = (TextView)customView.findViewById(R.id.message);\ntvMessage.setText(\"Hard at work...\");\nprogressDialog.show();\n. To fix this, put the fonts (Roboto-Medium.ttf and Roboto-Regular.ttf) into your project's /assets/fonts-folder, rather than the library's.\n. ",
    "talentprince": "Hi, I found that progress dialog not with the rounded corner as AlertDialog, how to do like that\n. ",
    "brainail": "OK, if you don't see any problem, then please let me know, how to use library's list dialog to prevent data losing (selected item) after screen rotation?\n. Haha :+1: I know it of course. But what method should I use to get the selected item before rotation? This is the main question, because dialog behaviour isn't problem for me. I just can't find the method for this. OK, sorry for that. I will find by my self )\n. Ok, thank you. I will check soon.\n. Yep, selector is gray now. OK. BUT, the selector is rounded, I think that it isn't material design when selector is rounded for list. What do you think? And it looks not well.. (http://www.google.com/design/spec/components/dialogs.html#dialogs-simple-menus)\n. Can you fix that in the next release? Or Am I wrong in something?\n. Oh I see, it has fixed already. Thanks.\n. No, no! I just try to open the themed dialog from the sample.apk. That's all. \nLet's say more understandable, the sample doesn't work fully on my phone. It seems like this.\n. Yep, now it's fine, but all actions related to lists (folder chooser, custom adapter, and so on) crashes the sample app :)\n. OK, cool.\n. ",
    "278956952": "Thank you very much, I will down the project and run to confirm if it will crash again! O(\u2229_\u2229)O\n. ",
    "Phascinate": "Wow, nice job! Looks great. Hope he adds compatibility for it. I still have friends who use my app on API 8 (sad I know) and this would make things a whole lot easier.\n. Woops! Messed some stuff up. Will re-pull when I've fixed it.\n. ",
    "acappelli": "@afollestad on Lollipop I haven't see any problems.\n. you think to release a new version on jcenter?\n. @afollestad Amazing! \n. @afollestad Support down to API 8, thanks Phascinate \nYou have wrong the nickname :-)\n. @afollestad soon I want implement some methods for improve the usability.\n. ",
    "abselt": "please make this a feauter so any one can disable/enable dividers between list items. ",
    "Gintasz": "I can confirm niko001's solution works.\n. ",
    "HughJeffner": "I guess there isn't a way to apply title and button colors with global theming then?  I have to set 3 or more colors each time I build a dialog.  Surely most material themes don't use primary text color for the dialog title.\n. ",
    "crysan": "\nThe only way it wouldn't do that is if you made the dialog not cancelable.\n\nCan you give a simple example of how to do it?\nThanks!\n. - cancelable(boolean)\nSUPER!\nThank you very much!\n. Tried. Unfortunately the same error.\n. STOP! Slightly upgraded and it worked! \nThank you!\n. Thank you for the quick response!\n. Yes!\n. It's a pity.\n. ",
    "dirkam": "Indeed, it's not related to string resources, however, I still see some issues with stacking.\nnew MaterialDialog.Builder(context)\n                    .title(\"Use Google's Location Services?\")\n                    .content(\"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\")\n                    .positiveText(\"Turn on speed boost right now!\")\n                    .negativeText(\"No thanks\")\n                    .neutralText(\"Some neutral text\")\n                    .show();\n\nnew MaterialDialog.Builder(context)\n                    .title(\"Use Google's Location Services?\")\n                    .content(\"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\")\n                    .positiveText(\"sample button\")\n                    .negativeText(\"sample button\")\n                    .neutralText(\"sample button\")\n                    .show();\n\nTested on API 19 and 21.\n. Thanks for fast response. Awesome lib.\n. May I ask if you have tested this? I still see the same issue with 0.8.5.6.\nNo keyboard at all on 6.0.x Android (in such cases mentioned in the original post)\n. Are you sure that you have tried it while the phone was locked and in idle state? I'm just asking because this thing drives me crazy. Do you happen to have your test code somewhere where I could check it?\n(running the app while the phone is active it works fine for me as well)\n. Couldn't check this with 0.8.5.7 yet, but I believe that with 0.8.5.6 despite the change in code this issue still exists.\n. Attached a sample app to test it.\nDialogKeyboardTest.zip\n. Tested on Nexus 6 (6.0.1). If no lock screen lock is used then it works. With screen locks (PIN, pattern, etc.) the keyboard is not shown.\n. it works. thanks.\n. My bad. It's fine if you use AppCompatActivity. Sorry for this.\n. Same here.\n. ",
    "theknut": "Retest positive.\n. ",
    "plusCubed": "Issue still exists because the neutral button's width is not taken into consideration (divided by two, not the number of buttons). I'm working on it, pull request when done (along with fixing issue #89 because the algorithm has to be changed for fixing that issue).\n. Yeah, like ?android:buttonBarButtonStyle in lollipop.\n. Hmm... 0.4.0 selector's sizes still don't quite match the AlertDialog's, I think due to the inset in the native implementation. I'm working on it right now, should be an easy fix. I'll pull request when done.\n0.4.0 vs native (with layout boundaries on)\n\n\n. Actually, I happen to have some time right now (didn't earlier in the day). I'll see what I can do.\n. I believe this should be fixed with #218.\n. Another thing: the text size was made smaller to match stock, but I think now it's smaller than stock text size. I'll check.\n. @afollestad About the text size, do we follow Material Design guidelines or stock? More specifically, the guidelines picture shows the text being 18sp, while stock is 16sp. The actual written guidelines though say it's supposed to be 16sp. The title is 20sp on both ends, so there's no question there - I'll change that.\nOn a related note, the action button should have a minimum width of 64dp according to the guidelines, but stock and currently material-dialogs has only 56dp (when accounted for 4dp padding on both sides).\n. @afollestad Oh, I already changed the title size in the pull request. I thought that was determined to be 20sp. Is that fine? For the content size, I think it's fine for now. If you can contact anyone at Google or something it might be good idea to ask since it's a spec thing.\n. Gradle version. Has this enhancement already been implemented in repo code? \n. Huh, I just compiled the latest repo code and it doesn't seem to be there? \nClarification: in the long list/any other container that scrolls, when it is scrolled completely to the top, the top divider should be invisible. Likewise, when scrolled to the bottom, the bottom divider should be invisible. In all other cases, such as when I am in the middle of the list, both dividers should be visible. This doesn't seem to be implemented.\n. Working on adding this right now.\n. @teslacoil Actually, I am implementing the onScrollChangedListener in ViewTreeObserver - it seems to work universally for all views.\n. @teslacoil Ah, good catch, I'll fix it. I think I'll use separate scroll listeners.\n. @teslacoil Noted, I'll fix that.\n. Huh, it seems to fix it, but now the dialog width and some padding is messed up.\n. With the latest fixes, the dialog background color is still bugged. Pass in Theme.DARK for any of the demo dialogs and the dialog background is light. Quick fix or no?\n. EditText bug fixed. For the progress drawables, I think the only option is backporting them from lollipop (since the AppCompat library doesn't have it yet).\n. I pushed a compromise of sorts - use the multiply porterduff mode on API10 or less. The determinate progress bar will probably not look so great with other colors not similar to the gingerbread orange (e.g. if OEM chose blue, blue+pink = some muddy color not pink). The indeterminate one should work fine if it's grey as in stock, but OEM drawables can mess it up.\n\n. Note to self/others: the AppCompat TintCheckBox theming is broken on API 10 and below (everywhere, not just material-dialogs). As a workaround, if you support API 10 and use a CheckBox widget anywhere in your app (other than the multiple choice dialog b/c it's done for you), call MDTintHelper.setCheckBoxTint(checkbox, accentcolor) to set the correct drawables. This can be seen in the sample app (509cb91dcf4983b691a6e09b127774fa22d0f2f8) for the custom view demo.\n. Oh wait never mind, I see the comment in the file (ThemeSingleton is discouraged from use for now)\n. @afollestad I... don't think this should be included in material dialogs. There are material edit text libraries out there that provide this functionality while following the guidelines closely. People who want this functionality can just use those libraries.\n. Specifically this one: https://github.com/rengwuxian/MaterialEditText\nI guess what I'm trying to say is this is a feature of the edittext, not of the dialog.\n. @afollestad @waltervr I understand. The counter doesn't match the design guidelines though, regardless. I'll fix it right now.\n. Done. Also added the default to be the red color specified here: http://www.google.com/design/spec/patterns/errors.html#errors-user-input-errors. \n. @afollestad @Xyaren I think I know the issue with the lollipop styling. Fixing.\n. Fixed in 990933e269b599cd2b6a22c67d876de574ba88dc\n. Should be fixed in 990933e269b599cd2b6a22c67d876de574ba88dc\n. Hmm.... the 90 degree angle seems to happen because setting a background color overrides the default rounded background in the AppCompat styles. Fixing.\n. Fixed.\n. Use an AppCompatPreferenceActivity - it's not included in the AppCompat library, but you can just download it from the official demos here: https://github.com/android/platform_development/blob/master/samples/Support7Demos/src/com/example/android/supportv7/app/AppCompatPreferenceActivity.java\n. @afollestad I am able to modify the dialog width by changing the insetRight and insetLeft attributes of the dialog background, so it is definitely possible to modify the width. Right now, the AppCompat library's background style uses a 16dp inset on all sides of the dialog. The lack of specs for tablet layouts (and details for dialogs on mobile - it looks quite ridiculous with 40dp padding on both sides as specified by the guidelines) makes me want to wait for Google before doing anything though.\nAs for the wrap_content thing, all layout attributes for the root view of custom views are ignored (I believe). @Ph1b \nIn the mean time, for anyone who wants to change the width, call getWindow().setLayout(width, height) on the MaterialDialog instance (keep in mind the 16dp inset is still applied). I wouldn't recommend doing this unless you know how to implement ALL the factors (screen width and height, content width and height, etc).\n. @hzsweers We are using AppCompat's backgrounds, and I believe they only have one definition for all screen sizes (which is 16dp inset on all sides).\n. @hzsweers Thanks in advance. I don't know what to set for the insets for 7\" and 9\"+ though - it seems ambiguous to just assume some numbers. There is also a mechanism that I haven't fully investigated yet - if you turn a phone to landscape, something (OS/dialog theme/dialog style..? - IDK) limits the width. \n. @hzsweers Sorry for getting back to you so late - kinda forgot about this :S I think that's a good idea - I'll get started on that. Perhaps in the future we can do something with the line length.\n@freezy If you are willing to fork the repo, what you can do is get a copy of abc_dialog_material_background_light.xml from the appcompat library sources, and modify the insetLeft/insetRight. Then set that as the android:windowBackground attribute of the material-dialog theme. I don't recommend doing this - if you're just looking for a more optimized tablet layout, as I said above, I'll be working on that :)\n. @hzsweers That sounds like a good plan. How should the line lengths and specific specs for that be though? Reading the guidelines, there doesn't seem to be a hard, fast spec - there's the 60 characters per line, then the \"short lines\" guideline (which seems to point at about 30 characters per line). \nI think the simplest way to go about this would be to calculate the width for an optimal number of characters vs line length ratio (with lower/upper limits for the dialog width). In other words, the height vs width of a body of text. I have no idea whether that is an approved way under the material guidelines though. The optimal height vs width (# of char vs line length) ratio would also need to be determined.\nThe other option is to follow the guideline more closely and determine a cutoff for the number of characters for a text to be considered \"short\" and \"normal\".\nEither way, we would also need to take into account other languages - which makes me think this all needs to be either configurable or highly advanced to be able to calculate the line length correctly for all languages. Although using the first option, the optimal height vs width would probably work for most languages if we calculate the measured height vs width instead of using the # of characters.\nWhat do you think?\n. Man, I can't believe I missed how Android system dialogs did the width. So, in the latest AppCompat 23.1.0, as Chris Banes wrote here: https://plus.google.com/+ChrisBanes/posts/TX817XUewtF, the AppCompat dialog width was fixed, so I went to re-investigate. Turns out, there were just different screen width dimension resources in Android lollipop+ for the windowMinWidthMajor and windowMinWidthMinor properties, and they added them into the latest AppCompat.\nAnyway, final resolution to this issue in 56b19673fccd84597067ea62aa657f15a397f395, reverting back to using the AppCompat styles for width.\n. @afollestad I recently found out that if a library is specified by @aar, its dependencies won't be resolved unless you add the transitive=true property. Should we remove@aar from the readme?\n. I don't remember specifically, but I believe it's overriding ?actionModeStyle and ?android:actionModeStyle that fixed it. \n. Should work for the next release: 1726e5b088baa180b353fed9a389c6f41942239b\n. I don't think I ever implemented such a thing (I did fix dimming the background behind the dialog I think). I believe we would need to fake the lollipop elevation system with drawables for shadows if we are to implement this.\n. colorBackgroundFloating is an AppCompat attribute. Are you using the latest AppCompat library 24.0.0?\n. ",
    "JonathanMerritt": "OK. I may have misunderstood my own question lol sorry.\nI'm probably looking to see how to actually setup the shared pref to know the version changed. Which has nothing to do with your library. My mistake.\nBack to Google for I.\n. ",
    "alorma": "It can be great if this library supports something like MaterialDialog.Builder.withChangelog(R.xml.changelog).\nI think it can be merged with:\nhttps://github.com/gabrielemariotti/changeloglib\nAnd it will make an awesome feature!\n. That's why i think integrate something like mariotti library would be\nawesome!...\nI will try to make a PR soon :D\nOn Tue, Apr 14, 2015 at 5:05 PM Aidan Follestad notifications@github.com\nwrote:\n\nAlthough that library does look very nice\n\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/88#issuecomment-92894441\n.\n. Reopen?\n. Uhmmm\n\nMaybe, it can be added as an extra lib, like this:\nhttps://github.com/gabrielemariotti/cardslib/\nIt's just i want to use it in some apps, and adding a module to each library don't seems to be cool :)\n. But is your decision, i will respect and create my own fork :)\n. no! My way is just the inverse of that one.\nA library that depends on MaterialDialogs, but it's standalone.\n. I see, i use Cabinet :P Socan you add a gist of the webview / css? :^)\n. Great!\n. :)\nOn Thu, Apr 16, 2015, 01:03 Aidan Follestad notifications@github.com\nwrote:\n\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.7.2.1\n\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/454#issuecomment-93592647\n.\n. well... make things protected against some basic components... sounds weird.\n\nIt's something like\nString words = \"my code\";\nIf (words != null) ...\nThat have no sense\n. That't different from fonts not exist i think.\nYou can plug a font, but default are still there\nOn Thu, Apr 16, 2015, 22:24 Vladimir Baryshnikov notifications@github.com\nwrote:\n\n@alorma https://github.com/alorma as per my first suggestion - make\nfonts pluggable, this would also be fine with me.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/456#issuecomment-93831371\n.\n. Code example will be awesome!\n. We can download it and use as an aar?\n. Neither dialogs, now there is a SupportDialog :o!\n\nWill you update lib to use this as base?\n. http://android-developers.blogspot.com.es/2015/04/android-support-library-221.html?m=1\nAs i read there, all widgets are now converted to AppCompat, and also with dialogs.\nMaybe this lib can make BaseDialog uses AppCompatDialog to expand functionalities.\n. You can use the ContextThemeWrapper to inflate your layout within a specific theme\n. @afollestad nice!\n. > Ooh, that's a good idea\n:bulb: \n. Same happens for filled outlined style\n. fastest \"bugfix\" / \"feature request\" EVER\n. ",
    "pedrofsn": "Is it possible preselect items based on ids or just position/indices?\n. ",
    "markdwags": "Icons now show up, thanks again.\n. ",
    "TheFinestArtist": "This is my solution\n((LinearLayout)dialog.getTitleFrame().getParent().getParent()).setBackgroundResource(R.drawable.bt_white_bg);\n. For Custom View\n((LinearLayout)dialog.getTitleFrame().getParent().getParent().getParent().getParent()).setBackgroundResource(R.drawable.bt_white_bg);\n. Hello @afollestad, I guess people wants to customise the dialog little more here. Is it ok if I can make a pull request for this issue. By adding some global variable or adding some method for theme. Thank You\n103\n. Thanks for your so fast answer!!\nhttps://github.com/afollestad/material-dialogs/blob/master/library/src/main/res/drawable/md_btn_selected.xml\nIt is using specific color..TT\n. Thanks for your quick answer again!!\nI was trying to change all the background and selector color here cause my app is using special color for background (little blue color)\nmd_btn_selector => I was hoping if I can set the selector drawable it self!!\nThanks Again!\n. @afollestad Yep, I am currently doing it! If I succeed I will let you know! Cheers!\n. This is my last code and found that It is impossible to change the button background selector drawable. I found that your library override the selector dialog onShow() is called!! Still changing the background of dialog succeeded!\n```\n private static void themeDialog(Context context, MaterialDialog dialog) {\n        if (dialog == null)\n            return;\n    if (dialog.getCustomView() == null) {\n        if (dialog.getTitleFrame() != null\n                && dialog.getTitleFrame().getParent() != null\n                && dialog.getTitleFrame().getParent().getParent() != null\n                && dialog.getTitleFrame().getParent().getParent() instanceof LinearLayout) {\n            LinearLayout topLayout = (LinearLayout) dialog.getTitleFrame().getParent().getParent();\n            topLayout.setBackgroundResource(R.drawable.bt_white_bg);\n\n            TextView buttonDefaultNegative = (TextView) topLayout.findViewById(R.id.buttonDefaultNegative);\n            TextView buttonDefaultPositive = (TextView) topLayout.findViewById(R.id.buttonDefaultPositive);\n            if (buttonDefaultPositive != null)\n                ViewHelper.setBackground(context, buttonDefaultPositive, R.drawable.dialog_btn_selector);\n            if (buttonDefaultNegative != null)\n                ViewHelper.setBackground(context, buttonDefaultNegative, R.drawable.dialog_btn_selector);\n        }\n    } else {\n        if (dialog.getTitleFrame() != null\n                && dialog.getTitleFrame().getParent() != null\n                && dialog.getTitleFrame().getParent().getParent() != null\n                && dialog.getTitleFrame().getParent().getParent().getParent() != null\n                && dialog.getTitleFrame().getParent().getParent().getParent().getParent() != null\n                && dialog.getTitleFrame().getParent().getParent().getParent().getParent() instanceof LinearLayout) {\n            LinearLayout topLayout = (LinearLayout) dialog.getTitleFrame().getParent().getParent().getParent().getParent();\n            topLayout.setBackgroundResource(R.drawable.bt_white_bg);\n\n            TextView buttonDefaultNegative = (TextView) topLayout.findViewById(R.id.buttonDefaultNegative);\n            TextView buttonDefaultPositive = (TextView) topLayout.findViewById(R.id.buttonDefaultPositive);\n            if (buttonDefaultPositive != null)\n                ViewHelper.setBackground(context, buttonDefaultPositive, R.drawable.dialog_btn_selector);\n            if (buttonDefaultNegative != null)\n                ViewHelper.setBackground(context, buttonDefaultNegative, R.drawable.dialog_btn_selector);\n        }\n    }\n}\n\n``\n. @afollestad OK. I will removemd_custom_themeand let you know again!\n. @afollestad I was actually thinking the same thing aboutmd_custom_themeattribute. I removed the attribute so that people can use all the global attribute anytime. Also updated sample app. Themed Dialog now has background color and new button selector.\n. Works fine withcommons:0.8.5.2. @afollestad Woks like a charm. Please let people know if you change the url. Thanks\n. 1. Create the dialog using builder.\n2.dialog.getCustomView().findViewById(R.id.seekbar).setOnSeekBarChangeListener(listener). Honestly, I had same problem. So I hided keyboard myself after input dialog is dismissed.\n1. Check the keyboard hide timing\n2. Check if the inputtextview is correctly returned.\n3. Use keyboard hiding method withoutposthandler. (dialog.getInputEditText()` can be null after dialog is hidden.)\n. But.. hmm..it's your choice :)\n. ",
    "jf-rce": "@TheFinestArtist great solution, thanks\n. Would like to add, that when you're using a List Dialog, you will need 3 calls to getParent().\neg.\n((LinearLayout)dialog.getTitleFrame().getParent().getParent().getParent()).setBackgroundResource(R.color.main);\n. Thanks @IGZJcMinarro , I'll mark as closed.\nI wasn't looking at the most recent commit. Probably shouldn't open issues at 3 am, ha.\n. ",
    "sheharyarn": "+1 to @TheFinestArtist for this:\njava\n((View)dialog.getTitleFrame().getParent().getParent().getParent().getParent())\n                .setBackgroundColor(getResources().getColor(R.color.bgColor));\n. @TheFinestArtist's solution worked for me (for Custom Views):\njava\n((View)dialog.getTitleFrame().getParent().getParent().getParent().getParent())\n                .setBackgroundColor(getResources().getColor(R.color.bgColor));\n. +1\n. ",
    "Spoetnic": "Yes, i was unaware of this feature :D Thanks for pointing it out.\nThis thread can be closed\n. Personally I would solve this with a horizontal-LinearLayout, with 2 sub-layouts, both having weight 1, and width 0.\nIf you built your own Layout class, are you sure you overrode all the corrent methods? \n. This is called a bottom-sheet, and I believe has very little in common with a dialog. Besides laying on top, not covering the entire window and having a 'shadowy' dark layer underneath. \nI'd very much advise against using dialogs for this feature\n. When you use \"ActivityName.this\", you are using a Context.\nThe reason you need to write \"ActivityName.this\" and not just \"this\", is because you are starting the Dialog from a nested class. (for example an OnClickListener). When you would just write \"this\", it would pass the OnClickListener, where you actualy would pass the enclosing activity's \"this\".\nThat is why you need to add the ActivityName in front of this.\nWhen you are in a Fragment, use \"getActivity()\".\nWhen you are in an Activity, just use \"this\".\n. I'm not sure if I should make a new issue, since I think its the same as this one.\n(version 0.8.5.6, Marshmallow)\nMy softInputKeyboard wouldnt close after dismissing a dialog, so I wanted to do it myself in an onCancel or onDismissed listener. These do not seem to be called though.\nI even tried Builder.build().setOnCancelListener(...), after the call on the builder yielded no result.\nThe decompiled sourcecode that Android Studio provides shows that these 2 listeners (in the builder) are only set, but never used.\nAny thoughts on this.?\nEDIT:\nWhen a new dialog is shown, the keyboard does go away.\n. Dit you set the button color programatically?\nI use the default button text color and I did see a drawable change when I set my buttons to enabled(false)\n. I've had this problem with multiple apps a couple of CM nightlies ago. It's currently no longer a problem. \n. ",
    "AOrobator": "Thanks, using jcenter() in my gradle file worked.\n. ",
    "arpitkh96": "I was and am using android studio. Just switched to the new stable version and parallely switched to 0.4.4 from 0.0.8\n. ",
    "nitinmishra27": "I've taken activity context or I've to pass application context?\nOn 14-Dec-2014 8:55 pm, \"Aidan Follestad\" notifications@github.com wrote:\n\nYou're probably passing a bad context to the builder constructor.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916523\n.\n. So did i pass to builder, i took a global context object and used\nthroughout the activity, is it wrong approach? Or u need to see peice of\ncode?\nOn 14-Dec-2014 8:57 pm, \"Aidan Follestad\" notifications@github.com wrote:\nIt should be an Activity context\nOn Sun, Dec 14, 2014, 9:27 AM Nitin Misra notifications@github.com\nwrote:\n\nI've taken activity context or I've to pass application context?\nOn 14-Dec-2014 8:55 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nYou're probably passing a bad context to the builder constructor.\n\nReply to this email directly or view it on GitHub\n<\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916523\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916590>\n.\n\n\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916616\n.\n. What would u suggest? Should i pass myactivity.this as a context to builder?\nOn 14-Dec-2014 9:02 pm, \"Aidan Follestad\" notifications@github.com wrote:\nThe global context doesn't have any theme attributes that you put in your\napp's theme\nOn Sun, Dec 14, 2014, 9:31 AM Nitin Misra notifications@github.com\nwrote:\n\nSo did i pass to builder, i took a global context object and used\nthroughout the activity, is it wrong approach? Or u need to see peice of\ncode?\nOn 14-Dec-2014 8:57 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nIt should be an Activity context\nOn Sun, Dec 14, 2014, 9:27 AM Nitin Misra notifications@github.com\nwrote:\n\nI've taken activity context or I've to pass application context?\nOn 14-Dec-2014 8:55 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nYou're probably passing a bad context to the builder constructor.\n\nReply to this email directly or view it on GitHub\n<\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916523\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916590\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916616\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916740>\n.\n\n\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916772\n.\n. I'll give it a try, and ask u for further help, btw I'm very thankful for\nyour work.\nOn 14-Dec-2014 9:07 pm, \"Aidan Follestad\" notifications@github.com wrote:\nYeah\nOn Sun, Dec 14, 2014, 9:36 AM Nitin Misra notifications@github.com\nwrote:\n\nWhat would u suggest? Should i pass myactivity.this as a context to\nbuilder?\nOn 14-Dec-2014 9:02 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nThe global context doesn't have any theme attributes that you put in\nyour\napp's theme\nOn Sun, Dec 14, 2014, 9:31 AM Nitin Misra notifications@github.com\nwrote:\n\nSo did i pass to builder, i took a global context object and used\nthroughout the activity, is it wrong approach? Or u need to see\npeice\nof\ncode?\nOn 14-Dec-2014 8:57 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nIt should be an Activity context\nOn Sun, Dec 14, 2014, 9:27 AM Nitin Misra \nnotifications@github.com\nwrote:\n\nI've taken activity context or I've to pass application context?\nOn 14-Dec-2014 8:55 pm, \"Aidan Follestad\" \nnotifications@github.com\nwrote:\n\nYou're probably passing a bad context to the builder\nconstructor.\n\nReply to this email directly or view it on GitHub\n<\n\n\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916523\n\n\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916590\n\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916616\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916740\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916772\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916882>\n.\n\n\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916923\n.\n. still no luck the edittexts checkboxes are tinted in black color :(\n. Some problem with stacked buttons i think, I'm attaching two screens where\nin normal buttons my conditional statement works good, but when the\ncontents is large and stacked button comes in action the conditional\nstatement fails any idea? or u want to see the code?\nOn 14-Dec-2014 9:08 pm, \"Nitin Mishra\" nitinmishra27@gmail.com wrote:\nI'll give it a try, and ask u for further help, btw I'm very thankful for\nyour work.\nOn 14-Dec-2014 9:07 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nYeah\nOn Sun, Dec 14, 2014, 9:36 AM Nitin Misra notifications@github.com\nwrote:\n\nWhat would u suggest? Should i pass myactivity.this as a context to\nbuilder?\nOn 14-Dec-2014 9:02 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nThe global context doesn't have any theme attributes that you put in\nyour\napp's theme\nOn Sun, Dec 14, 2014, 9:31 AM Nitin Misra notifications@github.com\nwrote:\n\nSo did i pass to builder, i took a global context object and used\nthroughout the activity, is it wrong approach? Or u need to see\npeice\nof\ncode?\nOn 14-Dec-2014 8:57 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nIt should be an Activity context\nOn Sun, Dec 14, 2014, 9:27 AM Nitin Misra \nnotifications@github.com\nwrote:\n\nI've taken activity context or I've to pass application\ncontext?\nOn 14-Dec-2014 8:55 pm, \"Aidan Follestad\" \nnotifications@github.com\nwrote:\n\nYou're probably passing a bad context to the builder\nconstructor.\n\nReply to this email directly or view it on GitHub\n<\n\n\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916523\n\n\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916590\n\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916616\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916740\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916772\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916882>\n.\n\n\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916923\n.\n. Okay no issue, when u got time please look into this issue thanks\nOn 15-Dec-2014 10:25 pm, \"Aidan Follestad\" notifications@github.com wrote:\n\nSorry I'm a full time college student, I don't have time right now.\nOn Mon, Dec 15, 2014, 10:54 AM Nitin Misra notifications@github.com\nwrote:\n\nSome problem with stacked buttons i think, I'm attaching two screens\nwhere\nin normal buttons my conditional statement works good, but when the\ncontents is large and stacked button comes in action the conditional\nstatement fails any idea? or u want to see the code?\nOn 14-Dec-2014 9:08 pm, \"Nitin Mishra\" nitinmishra27@gmail.com wrote:\n\nI'll give it a try, and ask u for further help, btw I'm very thankful\nfor\nyour work.\nOn 14-Dec-2014 9:07 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nYeah\nOn Sun, Dec 14, 2014, 9:36 AM Nitin Misra notifications@github.com\nwrote:\n\nWhat would u suggest? Should i pass myactivity.this as a context to\nbuilder?\nOn 14-Dec-2014 9:02 pm, \"Aidan Follestad\" notifications@github.com\nwrote:\n\nThe global context doesn't have any theme attributes that you put\nin\nyour\napp's theme\nOn Sun, Dec 14, 2014, 9:31 AM Nitin Misra <\nnotifications@github.com\nwrote:\n\nSo did i pass to builder, i took a global context object and\nused\nthroughout the activity, is it wrong approach? Or u need to see\npeice\nof\ncode?\nOn 14-Dec-2014 8:57 pm, \"Aidan Follestad\" \nnotifications@github.com\nwrote:\n\nIt should be an Activity context\nOn Sun, Dec 14, 2014, 9:27 AM Nitin Misra \nnotifications@github.com\nwrote:\n\nI've taken activity context or I've to pass application\ncontext?\nOn 14-Dec-2014 8:55 pm, \"Aidan Follestad\" \nnotifications@github.com\nwrote:\n\nYou're probably passing a bad context to the builder\nconstructor.\n\nReply to this email directly or view it on GitHub\n<\n\n\n\n\n\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916523\n\n\n\n\n\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\n\n\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916590\n\n\n\n\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\n\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916616\n\n\n\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916740\n\n\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916772\n\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916882\n\n\n\n.\n\n\nReply to this email directly or view it on GitHub\n<\n\n\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-66916923\n\n\n.\n\n\n\nReply to this email directly or view it on GitHub\n<\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-67025646>\n.\n\n\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/116#issuecomment-67025807\n.\n. \n",
    "PaulWoitaschek": "Stub looks like this: https://gist.github.com/Ph1b/795ef5503b602b3bc403\n. The linked class is MaterialDialogCompat. So I thought, there the calls would be the same?\nMostly I dont want to modify my whole code, I just want to use theme the dialogs till appcompat does that.\nIts somehow linked in the code:\nhttps://github.com/afollestad/material-dialogs/blob/387d702611d91268ea82a8143b42e136f6ea3cdd/library/src/main/java/com/afollestad/materialdialogs/MaterialDialogCompat.java#L295\n. The PopupMenu does not follow the specs for the simple menu. \n- On older devices its completely misthemed. \n- Also it has no top / bottom padding. \n- It does not center the selection at the underlying selection\n- It cuts text\n- It has no preselection\nAre there any plans for supporting this?\nSee: https://material.google.com/components/menus.html#menus-simple-menus\n\n\n. Do you know how to retrieve the necessary values from the AppCompat theme?\n. Now its getting confusing. How can I manually disable the Okay button when text is emmpty? Was happy with how it worked, now my app crashes.\nMy workaround is to have a String declared before the builder, then in onInput, update that string with the text. \nBefore the builder I declared a InputCallback and before that a button, I initialized after the .show() with the POSITIVE and have the inputCallback enabled / disable the button.\nThen I use the buttonCallbacks onPositive to get the text. Oh and I had to set alwaysCallInputCallback, so I can disable the button when text changes and is empty.\nAnyway, thats really not the easy way ;-) Maybe just pass a boolean allowEmptyText to the input?\n. Okay, thats funny that you just made that change yesterday. I was at 0.7.2.0 ^^\nKeep up the good work\nbtw, are you the left or the right on the picture?\n. Thats a placeholder. I always make a stub to see if the base works. (which didn't ;-)\n. Btw. if that combination is not allowed, isnt it better to throw an Exception like new IllegalArgumentException(\"It is not supported to use .items() combined with .customView()\")?\nThat would cause less confusion for developers. A silently failing code is always weird.\n. Was there something wrong how I used it?\nFor me it is just not working, like I wrote.\nWhen using                                       \njava\nInputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT\non a normal EditText, above my keyboard (google keyboard) appears a suggestion of words. When I do it like done above, no suggestions are displayed. Even tough cap sentences works.\n. Oh sorry. Could not find anything in the documentation that you have to set TYPE_CLASS_TEXT first, where you dont have to set it in xml. Thanks for making that clear to me.\n. Is this the same leak?\n\n. Same for me, no progress involved.\njava\nnew MaterialDialog.Builder(getActivity())\n                .title(R.string.no_audiobook_folders_title)\n                .content(getString(R.string.no_audiobook_folders_summary_start) + \"\\n\\n\" +\n                        getString(R.string.no_audiobook_folders_end))\n                .positiveText(R.string.dialog_confirm)\n                .callback(new MaterialDialog.ButtonCallback() {\n                    @Override\n                    public void onPositive(MaterialDialog dialog) {\n                        startActivity(new Intent(getActivity(), FolderOverviewActivity.class));\n                    }\n                })\n                .cancelable(false)\n                .build();\njava\n05-31 21:46:30.108    9504-9504/de.ph1b.audiobook.debug E/AndroidRuntime\ufe55 FATAL EXCEPTION: main\n    Process: de.ph1b.audiobook.debug, PID: 9504\n    java.lang.IllegalAccessError: setContentView() is not supported in MaterialDialog. Specify a custom view in the Builder instead.\n            at com.afollestad.materialdialogs.DialogBase.setContentView(DialogBase.java:56)\n            at com.afollestad.materialdialogs.MaterialDialog.setContentView(MaterialDialog.java:55)\n            at com.afollestad.materialdialogs.DialogBase.setViewInternal(DialogBase.java:38)\n            at com.afollestad.materialdialogs.DialogInit.init(DialogInit.java:324)\n            at com.afollestad.materialdialogs.MaterialDialog.<init>(MaterialDialog.java:87)\n            at com.afollestad.materialdialogs.MaterialDialog$Builder.build(MaterialDialog.java:1101)\n            at de.ph1b.audiobook.fragment.BookShelfFragment.onCreate(BookShelfFragment.java:219)\n            at android.support.v4.app.Fragment.performCreate(Fragment.java:1766)\n            at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:917)\n            at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1138)\n            at android.support.v4.app.BackStackRecord.run(BackStackRecord.java:740)\n            at android.support.v4.app.FragmentManagerImpl.execPendingActions(FragmentManager.java:1501)\n            at android.support.v4.app.FragmentActivity.onStart(FragmentActivity.java:551)\n            at android.app.Instrumentation.callActivityOnStart(Instrumentation.java:1236)\n            at android.app.Activity.performStart(Activity.java:6006)\n            at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2319)\n            at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2418)\n            at android.app.ActivityThread.access$900(ActivityThread.java:154)\n            at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1321)\n            at android.os.Handler.dispatchMessage(Handler.java:102)\n            at android.os.Looper.loop(Looper.java:135)\n            at android.app.ActivityThread.main(ActivityThread.java:5289)\n            at java.lang.reflect.Method.invoke(Native Method)\n            at java.lang.reflect.Method.invoke(Method.java:372)\n            at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:904)\n            at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:699)\n. Thanks, works.\n. Im not sure if this is material design specifications, but at least for my personal design specifications this looks totally weird. This dialog has a custom view with a framelayout set to wrap_content containing an ImageView set to wrap_content\n\n. This one is wiithout a custom view and has the same too-wide layout.\n\n. A nexus 7 has a screen width of 600dp. So according to this where they use 5x56 dp = 280dp, thats  less than half of the screen width. \nIm not sure but one of  could be interpreted to have 8*64dp=512dp, which would be about 85%. But on portrait I guess that would be less.\n. Im still not sure what google did there. They added a v14 and a v7 preference package. The way it works now the regular PreferenceFragment does not have themed preferences.\nSo I guess till now it was not possible to have materialized settings before lollipop. As far as I understood it they added these so the preferences will be themed.\nBut that way the new PreferenceFragment is a support lib fragment and thus your Preference-Dialogs etc cannot be used. \nTo be added to the confusion there is the new PreferenceFragmentCompat ;-)\n. Well, you have the v7 and the v14.\nThere is a v14 PreferenceFragment\nand a v7 PreferenceFragmentCompat.\nOf cause this will increase the library size, but without these packages there won't be themed preferences on any app if I understood it correctly.\n. But the PreferenceFragmentCompat is a appcompat fragment. This I cannot use it as I use your preference dialog classes.\nSomething like this, where I use your classes declared by xml\njava\nMaterialListPreference themePreference = (MaterialListPreference) findPreference(getString(R.string.pref_key_theme));\nWon't be possible as findPreference returns a v7 Preference and not a normal one (like your MaterialListPreference).\n. @wizofaus \nA better solution is to call the positive button on the dialog directly. That way you have all the necessary callbacks as well:\njava\nView positiveButton = materialDialog.getActionButton(DialogAction.POSITIVE);\npositiveButton.callOnClick(); // callOnClick so visual feedback wont be invoked\n. I think this is not trivial. The calendar view does not resize. Thus to make this fit the library needs to have a switch to turn off the n-dp grid resizing.\nIf I understand correctly.. And how can I wrap it?. I'm not sure if that is a good solution.\nMost views are resizable. For example if I just display a single word I'm fine with the dialog being wider than the world. A builder option with an ugly name so you know this should not be the default would be good.\nlike forceWidthToCustomViewWidth(force: Boolean). But lets say its a textview with the word me. You set it to wrap_content and it is like 50dp wide. Now you would set the dialog to that width?\nCan you describe in which case you would make the dialog wrap tightly?. Any progress on this?. I'd be happy if this gets implemented. I'm using a system component so I can't redesign the layout.. What is the reasoning behind removing this?. > @PaulWoitaschek I'm not able to reproduce any problems:\nHow am I related to this issue?. ",
    "Calfredop": "I also had this problem on a non Huawei device. You could try with the method getActionButton(MaterialDialog.Button), as the exception suggest.\n. ",
    "tnache": "The exception occurs in a code which cannot be controlled. That is Huawei's implementation, therefore the suggested use of the other method is not implementable. I have worked this around by returning null instead of throwing RuntimeException. This is only a dirty hack. I think a more graceful solution needs to be implemented.\n. ",
    "Dfmarulanda": "How can i GET the Button to Change it TEXT without the deprecated method.?\n. I mean. After Build and Show.\nI had work with this Material Dialogs like for 3 weeks. Everything is fine. Except i cant figure how to do this. =D\n. OMG SORRY IM BLIND. LOVEU \n. ",
    "markuspaschi": "You are right, these values were defined in my atts already. Sorry\n. ",
    "FeedyFeedback": "Any update on this? Cause I'm facing the same issue, and I can't find IsStackingNeeded()\n. Well... How can I prevent action buttons from stacking?\n. That would be awesome, as I'm not quitte a fan of the stacked action buttons\n. Thanks!\n. ",
    "JcMinarro": "It seem that on the commit that he release the new version, it is not included.\nhttps://github.com/afollestad/material-dialogs/blob/7d885bba7dfeb4d50f645342e891c86482e3d2e1/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java\nhttps://github.com/afollestad/material-dialogs/commit/7d885bba7dfeb4d50f645342e891c86482e3d2e1\n@afollestad would be good to create a new tag on every release version, then other developer could know exactly what happen on the library.\n. ",
    "jmartingit": "After investigating a bit more, I've found a solution for the issue. Those problematic devices have a hard time setting the left margin via layoutparams but they set it correctly if the left margin is set via padding. So, if I modify this on the DialogBase.setMargin method, it works ok on any device:\npublic static void setMargin(View view, int top, int bottom, int left, int right, int height) {\n    ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) view.getLayoutParams();\n    if (top > -1) params.topMargin = top;\n    if (bottom > -1) params.bottomMargin = bottom;\n    if (right > -1) params.rightMargin = right;\n    if (height > -1) params.height = height;\n    view.setLayoutParams(params);\n    // set left margin via padding instead of layoutparams\n    view.setPadding( (left > -1 ? left : 0), 0, 0, 0);\n}\nConsider adding this modification to the method if you see it's ok.\nPS: thanks a lot for this library, it's simple awesome.\n. Hi erawhctim! Make sure you are using the last library version (0.4.6). I'm using a single choice on a sound picker and I can see all callbacks without any problem. Besides, you should use the new ButtonCallback() instead of the deprecated FullCallback().\nIf after trying this you don't see all the callbacks, tell me and I'll post my code so you can compare.\n. Well, the fact that the dialog is not recreated doesn't bother me much. In the end it's a preference and it can be clicked again after the orientation change, so that's not a problem.\nBut what worries me is the leak issue. Using the MaterialListPreference directly from the library shouldn't lead to a leak.\nI guess the solution might come from forcing a dismiss on the material dialog when the activity tries to recreate the preference. On a different preference I had to subclass ListPreference for other things and the only place where I could add a recreation detection is overriding onSaveInstanceState.\nThe stock ListPreference doesn't leave much room for operation, but at least its doable. Consider adding a dismiss on that method in the library to avoid the leak if you see it fit.\n. Brilliant!!! Many many thanks!!! ;)\n. No, my problem is different. I'm not using a custom layout. I'm using attributes in styles.xml for my preferences. The problem stays in 0.8.5.2.\nThe problem is if I don't want to use the library layout, I'm forced to create a custom layout compulsorily. There's no other option. And setting a null custom layout doesn't help, because it overrides the styles too.\nMaybe this could be bypassed with an attribute for the preference, indicating if we want to use the library layout or not.\n. Thank you very much Aidan, I really appreciate it.\n. @AkshayChordiya  Done! :)\n. Don't worry about it, Aidan. The current behavior is good for me, I'm closing the issue. Thanks.\n. ",
    "erawhctim": "Care to explain why? That doesn't make sense.\nI would think itemsCallbackSingleChoice would be similar to a list selection callback, one that gets called every time a list item is selected, and the normal Callback/SimpleCallback/FullCallback would be called on the respective button clicks. That was how I was expecting them to behave, anyway. \n. @jmartingit Thanks for the reply. I didn't realize FullCallback was deprecated so I'll update to the latest version and try it out with ButtonCallback. \n. ",
    "kyleparker": "@erawhctim - I'm running into the same problem. I'm using itemsCallbackSingleChoice with the ListCallback and then a ButtonCallback for the positive button. The positive button fires first, then the onSelection event for the ListCallback listener. I'm not using FullCallback... I need the selected position from the onSelection event to then do something when the positive button event fires. Any suggestions?\nEdit: does alwaysCallSingleChoiceCallback resolve this issue? Adding that to the builder makes the onSelection event fire each time I select something.\n. @hzsweers, as I mentioned, I'm not using the FullCallback, and yes, I'm using the most recent version of the library. I don't think I'm trying to do something wonky - it seems completely legitimate to want to know the value of the item selected, prior to hitting OK.\n- User taps an item - I need to know what was tapped\n- User taps OK button - the selected item needs to be passed to the OK button handler in order to do something based on that specific selection\nRegardless, I think the issue has been resolved, as I noted in my original comment - the alwaysCallSingleChoiceCallback enables the functionality that I need.\nThanks for the response though.\n. ",
    "kolomboss": "Thanks a lot. I will update my dependencies.\n. ",
    "lengpiseth": "I am sorry, but I also run into this problem as well as the above.\nCan you show me how android:radioButtonStyle is to be done to change the circle color.\nBecause I use the same theme for my every activity which i need @android:color/white to be white always.\nThx in advance!\n. Sorry, my typing mistake for \"@android:color/white\" refer to \"android:textColorSecondary\". See attached image for clear insight.\n\n. Below is my current styles.xml that have the problem\n\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/blue</item>\n        <item name=\"colorPrimaryDark\">@color/blue_dark</item>\n        <item name=\"colorAccent\">@color/green</item>\n        <item name=\"android:textColorSecondary\">@android:color/white</item>\n        <item name=\"android:radioButtonStyle\">@style/MyRadioStyle</item>\n        <item name=\"windowActionBar\">false</item>\n        <item name=\"android:windowTranslucentStatus\">true</item>\n    \n\n       <item name=\"?? WHAT COLOR ATTRIBUTE ??\"></item\n\n. ",
    "bliveinhack": "solved by using AppCompat.Light theme with colorPrimary and colorAccent.\n. ",
    "TomasValenta": "Ok, thank you Henri and Aidan.\n. Yeah, thank you.\nHenri can you show me please example how to use dialog.getSelectedIndices() with multi choice dialog?\n. Many times thank you Henri, now it's working fine!\n. In Multichoice dialog is the same situation.\n. Hi,\nif you want, look at code in my Application:\nhttps://github.com/TomasValenta/WebCamViewer/blob/master/app/src/main/java/cz/yetanotherview/webcamviewer/app/actions/WelcomeDialog.java\n. Here is better example:\nhttps://github.com/afollestad/material-dialogs/blob/master/sample/src/main/java/com/afollestad/materialdialogssample/ColorChooserDialog.java\nor\nhttps://github.com/afollestad/material-dialogs/blob/master/sample/src/main/java/com/afollestad/materialdialogssample/FolderSelectorDialog.java\n. Ok, I will look at it. Thank you\n. Sorry Aidan,\nbut this is not the same, I wrote about nested dialogs. Removing show() and adding build() work only on main dialog, on nested dialogs is situation different, don't show. In your examples is only one main dialog situation.\n. I found an interesting thing. When i'm trying it in emulator with different apis, the result is different:\non API 17 and 21 is the result same = align is center.\nbut\non API 15 is correct:\n\n. Ok,\nI tried now create blank new project only with stacked dialog:\n``` java\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    showStacked();\n}\n\nprivate void showStacked() {\n    new MaterialDialog.Builder(this)\n            .title(R.string.useGoogleLocationServices)\n            .content(R.string.useGoogleLocationServicesPrompt)\n            .positiveText(R.string.speedBoost)\n            .negativeText(R.string.noThanks)\n            .forceStacking(true)  // this generally should not be forced\n            .show();\n}\n\n```\nand this is the result on API 21 (Real and also in Emulator):\n\nYou can download it here.\n. I do not understand it :) Have you tried the simple project, that i have added above?\n. @hzsweers: The ripple wrap the whole width of the dialog. Changing order of the method calls in the builder does not change anything of the situation, but I have not tried all combinations...\n. Confirmed, now it's ok.\n. Ok,\nbut I think, issue is not fixed. New crash report:\ngradle\njava.lang.NullPointerException: Attempt to invoke virtual method 'int android.view.View.getBottom()' on a null object reference\nat com.afollestad.materialdialogs.internal.MDRootLayout.invalidateDividersForScrollingView(MDRootLayout.java:442)\nat com.afollestad.materialdialogs.internal.MDRootLayout.access$000(MDRootLayout.java:34)\nat com.afollestad.materialdialogs.internal.MDRootLayout$1.onScrollChanged(MDRootLayout.java:414)\n. Are you sure? Beacause with version 0.7.5.3 my dialogs works and with 0.7.5.4 not. Clean and rebuild completed...\n. It also crashing from non preference classes.\n. Rolling back to 0.7.5.3 and dialogs working again.\n. When switching between versions, clean and rebuild executed.\n. You're welcome, now it's working, thank you too.\n. ",
    "LeebeeDev": "+1 for this request\n. @afollestad, yeah I know that you are the dev, and  thank you for this awesome library. \n. ",
    "RyanDam": "Great idea, +1 for that :dancer: \n. ",
    "msmozafari": "Hi @afollestad,\nThis is not based on the Material design guideline.\nI'm from Iran. My language is Persian, an RTL language. (If I want use forceStacked, buttons aligned to the left).\nThis type of methods really is useful for RTL languages and customization.\n. Hi @afollestad,\nThank you for this release.\nYes. Unfortunately, before API 17 (specially API 14) RTL support not good enough.\n. @afollestad Thank you, it's so good.\n. Hi @forlayo ,\nYou must exclude appcompat-v7 from material-dialog:\ncompile (\"com.afollestad:material-dialogs:0.6.0\"){\n        exclude group: 'com.google.android', module: 'appcompat-v7'\n    }\n. @forlayo , I didn't make this library. This incredible library created by @afollestad. \n. ",
    "fcannizzaro": "Yes.. I have a list of 30 items .. I check only the first item, but scrolling the list, also elements 10 , 19 , 28 are apparently checked. But the callback get only the first item and this is correct. I believe is the recycle of view that cause this error.\n. @hzsweers My code is the same! The only difference is \njava\n  .itemsCallbackMultiChoice(null , new MaterialDialog.ListCallbackMulti()\n( like @afollestad wrote in the README at this line https://github.com/afollestad/material-dialogs#multi-choice-list-dialogs )\ninstead of your\njava\n.itemsCallbackMultiChoice(new Integer[]{1, 3}, new MaterialDialog.ListCallbackMulti()\nIf I use\njava\n.itemsCallbackMultiChoice(new Integer[]{}, new MaterialDialog.ListCallbackMulti()\neven if I don't want to check any item , it works.\n. Thanks :+1: \n. ",
    "com314159": "Your Official APK can show dialog list textview content in my nexus 4\n. ok, thank you @afollestad , I pull the latest code, and the bug have fixed.\n. ",
    "qiansen1386": "Got it, thanks for your fast reply and your excellent work anyway. \n. ",
    "airk000": "But when I use an old appcompat-v7, such as 21.0.2, I need to update my sdk for using this. BTW, google's opensource application use + too. link: https://github.com/google/iosched/blob/master/android/build.gradle\n. :( OK, I'll try my best for it. Thanks all the same.\n. @shufeike not yet.\n. @afollestad I'll try it later and tell u the result ASAP.\n. It has been in testing process, let's waiting for the result. @afollestad \n. @afollestad I have to say: Nice shot! It's fixed.\n. ",
    "umanusorn": "Ok thanks. I done with it.\n. I try to use show&dismiss but it still doesn't show/hide keyboard.\nMaterialDialog dialog;\n    dialog = new MaterialDialog.Builder(activity)\n                     .title(textView.getText().toString())\n                     .customView(R.layout.dialog_edittext, wrapInScrollView)\n                     .positiveText(\"Ok\")\n                     .negativeText(\"Cancel\")\n                     .cancelable(true)\n                     .positiveColor(Color.parseColor(\"#03a9f4\")).showListener(new DialogInterface.OnShowListener() {\n                @Override public void onShow(DialogInterface dialog) {\n                    MaterialDialog materialDialog = (MaterialDialog) dialog;\n                    materialDialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);\n                }\n            }).dismissListener(new DialogInterface.OnDismissListener() {\n                @Override public void onDismiss(DialogInterface dialog) {\n                    MaterialDialog materialDialog = (MaterialDialog) dialog;\n                    materialDialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\n```\n            }\n        })\n                 .callback(new MaterialDialog.ButtonCallback() {\n                     @Override public void onPositive(final MaterialDialog dialog) {\n                         super.onPositive(dialog);\n                         EditText dialogEditText = (EditText) dialog.getCustomView().findViewById(R.id.dialogEditText);\n                         textView.setText(dialogEditText.getText().toString());\n                 }\n\n                 @Override public void onNegative(MaterialDialog dialog) {\n                     super.onNegative(dialog);\n\n                 }\n             })\n             .build()\n\n```\n. ",
    "Anth06ny": "I have the same problem, I don't arrive to close keyboard after a prompt dialog. Do you have a solution ?\n. After lot of research I found this solution\njava\n.dismissListener(new DialogInterface.OnDismissListener() {\n  @Override\n  public void onDismiss(DialogInterface dialog) {\n    InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n      imm.toggleSoftInput(InputMethodManager.HIDE_IMPLICIT_ONLY, 0);\n    }\n   })\n. I have to create selector, I can not just pass the color?\n. I already change the ripple color in all application\nxml\n<style>\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n       <item name=\"colorButtonNormal\">@color/color_composant_main</item>\n        <!-- colorAccent is used as the default value for colorControlActivated,\n         which is used to tint widgets -->\n        <item name=\"colorAccent\">@color/color_composant_main</item>\n        <item name=\"colorControlNormal\">@color/color_composant_main</item>\n        <item name=\"colorControlActivated\">@color/color_composant_main_highlighted</item>\n        <item name=\"colorControlHighlight\">@color/color_composant_main_highlighted</item>\n </style>\n</style>\nBut it's not apply on your library\n. Thanks for your reactivity.\n. Be carreful it's \"colorControlHighlight\" and not \"controlColorHighlight\" in your release text.\nIt's working great job\n. ",
    "loeschg": ":+1: awesome. Thanks!\n. ",
    "eneim": "I suppose only ~~1%~~ 0.0001% of the planet's population still keep using 2.1 Android phone. Don't waste your time and creativity\n. why don't you post the place you use MaterialDialog and its xml?\n. Is there any chance you are using this: https://github.com/dexafree/MaterialList\nBut the old version. It clearly turns out that your problem caused by materiallist\\1.2.0\\res\\drawable-xhdpi-v4\\ic_launcher.png and so on. Try to fix it.\n. the last statement says that the missing class was from the other guy's library ... I would like to double check the imported package of you (the issue owner).\n. Hm i forgot to check your dependencies :trollface: It includes me.zhanghai.android.materialprogressbar:library:1.1.4 so yeah that might be so.\n. ",
    "tommienu": "@eneim You definitely have a point. But if about 10 000 weekly active users of you app are on 2.1 you might wanna backport functionality. Having thousands of angry users dumping your rating in google play isn't really ideal.\nThat said, unless there is a technical reason for targetting 2.2, we would appreciate if the target could be 2.1 (api level 7), and if not - we can always fork. No biggy.\n. Thanks for the reply @afollestad. We'll send back some PRs if we ever get around to fixing it!\n. ",
    "milek": "Right, but with only one button I can change the background and it stays, but with more than one button it reverts back. So one of the use cases contains a bug.\nPersonally I would love to have an ability to modify the background of the button. One of the requirement in project I have, is that positive button have primary color as a background and not text foreground.\n. Awesome, thanks!\n. ",
    "life1347": "Yes, you are right. i forgot to change the configuration of gradle config. Sorry for bothering you.\n. ",
    "heinrichreimer": "Maybe adding a default DialogFragment wrapper would be great option.\n. I can post a little pull request today.\n. Ok, thank you!\nBTW, the folder chooser doesn't store the current folder.\n. The goal should be to just update the support library dependencies in material-dialogs, not downgrading the app's support lib version or making other workarounds.\nFor now I guess the right way as described in the gradle docs is not to use exclude but to work around it usinng a resolution strategy like this:\ngradle\nconfigurations.all {\n    resolutionStrategy.force 'com.android.support:support-v13:26.1.0'\n}\nThat'll resolve the dependency conflict but doesn't exclude the whole support-v13 dependency from the classpath. Instead it loads the correct version.\nAnyway, looking forward to material-dialogs being updated to support lib 26.1.0!. ",
    "vnguyen972": "Yes.. callback work for me.. on none list dialog... but in the case where there are choices like list (either single or multiple choices).. example says we have to implement itemsCallbackSingleChoice.. my question was would it still work if I also implement callBack??? I guess i can just try it ..but I thought it'd be quicker if someone knew :).. \nThanks.\n. ",
    "forlayo": "Apparently is because I'm using ActionbarSherlock and your library is using appcompat-v7, someone knows any workaround ? right now I cannot replace actionbarsherlock..\n. Hi @msmozafari ,\nFirst of all thanks a lot for your support and also for your incredible work with this library, well I've tried to do it in the way that you point, everything works and now compile correctly but when I try to launch a dialog, I got a new crash:\n01-13 18:18:32.799    3484-3484/com.yuilop E/AndroidRuntime\ufe55 FATAL EXCEPTION: main\n    Process: com.yuilop, PID: 3484\n    java.lang.NoSuchFieldError: com.afollestad.materialdialogs.R$attr.colorAccent\n            at com.afollestad.materialdialogs.MaterialDialog$Builder.<init>(MaterialDialog.java:898)\n            at com.yuilop.registering.signup.SignUpProcess.onCreate(SignUpProcess.java:251)\n            at android.app.Activity.performCreate(Activity.java:5451)\n            at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1093)\n            at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2358)\n            at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2452)\n            at android.app.ActivityThread.access$900(ActivityThread.java:172)\n            at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1302)\n            at android.os.Handler.dispatchMessage(Handler.java:102)\n            at android.os.Looper.loop(Looper.java:136)\n            at android.app.ActivityThread.main(ActivityThread.java:5586)\n            at java.lang.reflect.Method.invokeNative(Native Method)\n            at java.lang.reflect.Method.invoke(Method.java:515)\n            at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1268)\n            at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1084)\n            at dalvik.system.NativeStart.main(Native Method)\nCode used to launch the dialog is the one from example:\nnew MaterialDialog.Builder(this)\n                .title(\"Use Google's Location Services?\")\n                .content(\"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\")\n                .positiveText(\"Agree\")\n                .negativeText(\"Disagree\")\n                .show();\n. @msmozafari, @afollestad Sorry about the \"little\" confusion haha.\n@afollestad I'm using ActionBarSherlock because I'm working in a company project that has few years.. and at this mommnet I cannot switch to AppCompat one..\nThere's not any workarount to be able to use your library ?\n. ",
    "safaiyeh": "Thank you.\n. ",
    "tonyshkurenko": "Is this possible to use Spannable with ImageSpan in dialog?\n. ",
    "mariusmuja": "It's been tested on two android devices and it works as intended (it doesn's stack the buttons when all of them fit, where before it did stack them because a button was larger than 1/3 of the window width).\n. Pushed a fix in #207.\n. ",
    "MohammedTaha": "Sorry.. my bad.. that was a mistake by my side.\n. ",
    "jacobtabak": "Thanks, looks great! \n. ",
    "artem-zinnatullin": "@afollestad awesome, thanks!\n. ",
    "pongpatr": "Just want to explain more.\nI think it because of how dialog measure listView again when notifyDataSetChanged() is called.\nThe problem is not because my adapter because I try to place the same listview in difference place and it operate normally.\n. ",
    "svenjacobs": "Thanks!\n. disableDefaultFonts() was removed in commit cffd86e. It would be nice if a minor version update of this library doesn't break compilation. In the future please mark such methods as deprecated, maybe doing nothing anymore, describe what needs to be done and give users of this library the chance to remove usages gracefully. Deprecated methods could then be removed in the next version after this one. Thank you!\n. Also it would be nice if the README mentions how to set the font via theming. It only states\n\nThere's a global theming attribute available to automatically apply fonts to every Material Dialog in your app, also.\n\nBy looking at the diff I found out that the attribute names are md_medium_font and md_regular_font.\n. > Leaving it would be completely useless, since the Roboto fonts were unbundled and that method wouldn't do anything anymore.\nThat's right. It wouldn't do anything anymore. But it would be marked @deprecated and users could remove usages to it before it gets removed in the next version.\n. ",
    "JoelReeves": "You can set the cancelable method in the builder to false\n. ",
    "AruLNadhaN": "Thanks it helped!\n. ",
    "ViswanathL": "Irrespective of dialog. As a button, it should not focus another when clicking on that right ?\n. ``` java\nMaterialDialog dialog = new MaterialDialog.Builder(this)\n                    .title(\"\")\n                    .content(\"\")\n                    .positiveText(\"Agree\")\n                    .cancelable(false)\n                    .negativeText(\"Diasagree\")\n                    .callback(new MaterialDialog.ButtonCallback() {\n                        @Override\n                        public void onPositive(MaterialDialog dialog) {\n                            // Code\n                        }\n                    @Override\n                    public void onNegative(MaterialDialog dialog) {\n                        // Code\n                    }\n                }).build();\n                dialog.show();\n\n```\nThis is the code.\n. No problem. Please check and update me if you find the issue. i will try to find the same.\nThank you.\n. ",
    "patelakshay13890": "Okay & thanx for quick response..!!!\n. How o i can change Background Color of Positive Negative Button Color ?\n& It is Possible to give only Border to these Buttons with out Changing the\nOriginal Height ?\nOn Thu, Jan 29, 2015 at 6:32 PM, Aidan Follestad notifications@github.com\nwrote:\n\nClosed #225 https://github.com/afollestad/material-dialogs/issues/225.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/225#event-226800784\n.\n. But There is no Method for setting Color dynamically for Progressbar...\n\nOn Fri, Feb 27, 2015 at 7:16 PM, Aidan Follestad notifications@github.com\nwrote:\n\nClosed #282 https://github.com/afollestad/material-dialogs/issues/282.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/282#event-243269046\n.\n. [?]\n\nOn Tue, Apr 7, 2015 at 5:09 AM, Aidan Follestad notifications@github.com\nwrote:\n\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.7.0.0\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/282#issuecomment-90285105\n.\n. \n",
    "Matungos": "I have the same problem.\n. ",
    "ghost": "Great! big thanks!\n. Looks a bit different in my gradle file but:\n    compile 'com.afollestad:material-dialogs:0.7.3.0'\nThe versions on https://jitpack.io/#afollestad/material-dialogs are all too new or I do not understand how to tell your package repository to create/host me the files for 0.7.3.0 this is important but okay, I tried to solve it myself and failed.\n. Thank you for so much useful help, tried various combinations now:\nGradle\ncom.afollestad.material-dialogs:core:66bf6645cf@aar\ncom.github.afollestad:material-dialogs:66bf6645cf\n<--- as suggested on their own site for use with gradle with core an w/o, same with @aar, core, -SNAPSHOT and other combinations\nnone of them worked so far, but I'm overly tired and will figure a way out tomorrow\nPS: the url to maven { url \"https://jitpack.io\" } is there as well of course and it tries to fetch files from it, I just don't have the correct dependencies { compile to make it work.\nD\u014dshio.\n. I've tryed it on my samsung galaxy s6 edge (API 23) and on my Samsung galaxy ace plus SpeedMod (API 19)\n. Simply, when start the MaterialDialogs sample application on my Android phone (When try to use the official app and library), and I try to build the progress dialog I see a progressbar, task percentage and processed files.\nwell, while PROGRESS DIALOG is running, if I press the hardware key who invoke recent app menu (multitasking mode) The progress bar will be stopped: this bug is probabilly an unexpected onResume java void. \n\n\n. My template app does not use Activity Themes and styles because it can not know what colors and fonts will be used. This is to support changing colors dynamically without releasing a new version of the app. Will ContentThemeWrapper work for my use case or must i use reflection to set the fields i need? It is a really great library i want to continue using it like before but with all new stuff.. ",
    "harlanmukdis": "why this force close?\n                   MaterialDialog mDialog = new MaterialDialog.Builder(getActivity())\n                            .title(\"Cancel order\")\n                            .customView(R.layout.dialog_cancel_order, true)\n                            .positiveText(\"SUBMIT\")\n                            .negativeText(\"CANCEL\")\n                            .onPositive(new MaterialDialog.SingleButtonCallback() {\n                            @Override\n                            public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which)\n                            {\n\n                            }\n                            })\n                            .onNegative(new MaterialDialog.SingleButtonCallback() {\n                            @Override\n                            public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                                dialog.dismiss();\n                            }\n                            })\n                            .build();\n\n                           EditText etId = (EditText)mDialog.getCustomView();\n                           etId.setText(\"How\");\n\n           mDialog.show();.\n",
    "omniuni": "Awesome! Thanks for taking a look. The library is great, by the way, and looks really slick as I'm modernizing a somewhat old application (Oh, Gingerbread). I also look forward to seeing the fix you come up with. When I looked over your code before, it didn't seem like there was anything obviously wrong and unset/default values with integers is always an interesting question. This is a great example of how that can yield unexpected results.\n. So it did! I actually think the use of the titleColorSet boolean makes the\ncode very readable. Once again, awesome job on the library!\nOn Tue Feb 03 2015 at 11:25:50 AM Aidan Follestad notifications@github.com\nwrote:\n\nThank you!\nIt actually became available in a release last night, no changes have to\nbe made by you to get it work.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/233#issuecomment-72681682\n.\n. \n",
    "fehbari": "You're correct, that was a typo. I'm actually on 0.6.2.3. My device is a Moto X running Lollipop, so the version shouldn't be an issue.\n. Looks like I'm not the only one with this issue. http://goo.gl/u6ytPx\nSeems to be a problem with android:fitsSystemWindows=\"true\". I'll let you know if removing this from my styles fixes the problem.\n. Yep, that's it. Works fine without android:fitsSystemWindows=\"true\".\n\nI'm setting the flag in my app's main theme. It's weird that it affects the dialogs.\njava\n<style name=\"Light_Theme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n    <item name=\"android:fitsSystemWindows\">true</item>\n</style>\nSince it also happens with Lollipop's regular dialogs, I think you can close the issue as invalid.\nThanks for the help!\n. Thanks for the tip! The idea was to have all my layouts inherit that property easily, but I never thought it would be applied to dialogs as well (since it didn't before on KikKat). Now that I no longer need the flag (I had it set for the SystemBarTint library) I'll just remove it entirely.\n. ",
    "sagilo": "Line 806 in latest version.\n\"for (Integer i : selectedIndicesList) {\"\n. ",
    "marchold": "Cleaned up the pull request some. This should be better.\n. This pull request is good to go now. Just the 2 new classes and the example code.\n. Thanks!\nOn Wed, Feb 11, 2015 at 10:00 AM, Aidan Follestad notifications@github.com\nwrote:\n\nI cleaned up a lot of code, and switched around how the PreferenceActivity\nworks. It now inherits ActionBarActivity so it receives the correct\ntheming, and uses PreferenceFragments. The sample project APK is updated\nand will be on Google Play, and release 0.6.2.4 is now available through\nthe Gradle dependency.\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.2.4\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/pull/246#issuecomment-73930207\n.\n\n\n/---_-_-___\\\n. ",
    "Tuxilero": "Bump, would be great to see that in next version.\nGood job by the way! :+1:\n. ",
    "frmz": "@afollestad this is true if you are running on Lollipop but if you are running on Android 4.4 or lower the progress dialog has an Holo look and i didn't find a way to make it look \"material\", so this wouldn't be the same\n. You rock\n. @andrewlord1990 can you issue a pull request to @afollestad ? that resizing bug its pretty annoying and i don't want to fork just for that since you already fixed it\n. @afollestad was it fixed in 0.8.5.7? Because I am getting the very same issues on 0.8.5.6\n. @christianlanz thanks for confirming!\n. ",
    "Unpublished": "Maybe we can use itemsCallbackSingleChoice instead of itemsCallback?\nAdditional upside would be show radio buttons just like in Lollipop's ListPreference.\n. Fixed in new AppCompat 22.1.1.\nEdit: Only fixed if you use normal fragments instead of support fragment!\n. ",
    "mkay007": "This is the dialog I am using. I am aware that you can't set content as well as a checkbox, which by the way might be a nice feature to add. I will create a workaround with a custom view in the meantime.\ndialog = new MaterialDialog.Builder(main).title(R.string.fetus_title).positiveText(R.string.done)\n                .callback(new MaterialDialog.ButtonCallback() {\n                    @Override\n                    public void onPositive(MaterialDialog dialog) {\n                        if (update) {\n                            ...\n                        }\n                    }\n                }).items(R.array.fetus_update_array).itemsCallbackMultiChoice(null,\n                    new MaterialDialog.ListCallbackMulti() {\n                        @Override\n                        public void onSelection(MaterialDialog dialog, Integer[] which, CharSequence[] text) {\n                            ...\n                        }\n                    }).content(dialogMessage).show();\n. ",
    "jemshit": "https://code.google.com/p/android-developer-preview/issues/detail?id=608&thanks=608&ts=1404735239\n. i tried with v7:22 versions and it give error. Then i tried with v7:21 error is gone. Since this library uses v7:22 i get error if i use it. Is there any way to force project to use v7:21 or change dependency of library for my project?\n. Ok, i did overwrite dependency to use v7:21 using this and i can use library as well now. \n. @ZephZeph there is MaterialDialog and MaterialDialog.Builder. I was using MaterialDialog.Builder and it doesn't have dismiss(). Now i try to use MaterialDialog and it has dismiss() but, now i cant call methods like .typeface() .How to get advantages of both ?\n. ok, i used this and worked:\njava\nMaterialDialog md=new MaterialDialog.Builder(getActivity())\n                    .title(\"\")\n                    .typeface(\"\")\n                    .content(\"\")\n                    .show();\nThen i can call md.setContent() or md.dismiss() from anywhere.\n. Still don't know difference between calling show() methods of Builder and Dialog itself\n. ",
    "drubear": "Your font extension should be .ttf, and not .tff.@mkay007\n. ",
    "iahvector": "My workaround is pass wrapInScrollView as false in builder.customView(R.layout.dialog, wrapInScrollView) and wrap my custom view in a ScrollView and set paddinRight=\"24dp\" and paddingLeft=\"24dp\" on the layout container\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<RelativeLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:paddingLeft=\"24dp\"\n    android:paddingRight=\"24dp\" >\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n</RelativeLayout>\n\n\n```\n. ",
    "dbleicher": "Understood @afollestad , I'll take a closer look myself, but it may be more trouble than it's worth.  I brought it up because in the README for the new progress dialog, the first sentence claims this capability for both Lollipop and AppCompat.  For now, this specific capability is only available for Lollipop.\n. Howdy.  I've found a fairly easy fix to make this work on Android 4.x and 5.x (have not tested with anything older than API 15).  I apologize that I have not yet learned how to create/test a proper patch and submit a pull request (shame on me, I really need to learn those).  So here's a user-land view of the fix (from code that uses your library).  I believe you will know where in the code this should properly go.  Sorry for the inconvenience.\n```\n        pd = new MaterialDialog.Builder(this)\n                .title(\"Retrieving All Messages in Thread\")\n                .content(\"please wait...\")\n                .progress(true, 0)\n                .build();\n    View v = pd.getCustomView();\n    for(int i=0; i<((ViewGroup)v).getChildCount(); ++i) {\n\n        View nextChild = ((ViewGroup)v).getChildAt(i);\n\n        if (nextChild instanceof ProgressBar) {\n\n            TypedValue typedValue = new TypedValue();\n            TypedArray a = obtainStyledAttributes(typedValue.data, new int[] { R.attr.colorAccent });\n            int accentColor = a.getColor(0, 0);\n\n            ((ProgressBar)nextChild).getIndeterminateDrawable()\n                    .setColorFilter(accentColor, PorterDuff.Mode.SRC_IN);\n            break;\n        }\n    }\n\n    pd.show();\n\n```\nThe final line before the break statement does all the work.  Everything else is just finding the proper view and getting the app theme's accentColor.  My guess it this could go in MaterialDialog.java.  There's an \"if\" statement starting on line 131, if we add an \"else\" block to this, it should accomplish the change:\nif (!mBuilder.mIndeterminateProgress) {\n            ...\n        } else {\n               TypedArray a;\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n                    a = getContext().getTheme().obtainStyledAttributes(new int[]{android.R.attr.colorAccent});\n                } else {\n                    a = getContext().getTheme().obtainStyledAttributes(new int[]{R.attr.colorAccent});\n                }\n                mProgress.getIndeterminateDrawable()\n                        .setColorFilter(a.getColor(0,0), PorterDuff.Mode.SRC_IN);\n        }\nHope this helps, and thanks for a great library.\n. ",
    "metalurgus": "Please pay attention: this problem appears as well for RadioButtons, and maybe some other views\n. ",
    "danijoo": "nvm. im stupid.\n. ",
    "msutherland4807": "A fix for this is in pull request #263 , just waiting for it to go in\n. If someone could test below v15 that'd be awesome (it's the lowest I have access too right now). Thanks\n. Open your SDK manager and make sure you have the latest version of the support library and repository. Judging by your build.gradle I'm guessing you only have version 21.0.2 where this library uses 21.0.3\n. Is there a way to get this added to lists with an adapter? Or should it just be done manually (with an OnShowListener or something)? I have a custom adapter with a RadioButton as in the screenshot\nThanks again\n\n. Fair enough. I just added a trim() to my callback as workaround\n. ",
    "iraycd": "Great library.\n:+1: I needed this feature. Waiting for this enhancement.\n. :+1: Thank you.\n. ",
    "jenzz": "Yay! Thanks for the prompt fix :smile: \n. ",
    "theblang": "@afollestad @teslacoil We noticed the issue when using MaterialEditText.  The MaterialEditText view typically does a resize animation when making room to display an error message.  When inside of a MaterialDialog the resize animation seems to happen, but the text doesn't appear until it is over.  Here is a screen capture showing the issue.\n. ",
    "lordcodes": "I was getting glitches when using the sample Folder Chooser dialog and with my \"fix\" I believe it is not happening anymore.\nThe only problem, is I can't fix the glitch with hiding the 8dp margin below the buttons once the bottom divider is shown. It seems that when you set that margin to 0, it is actually applied later than the rest, so you see the buttons move down into place. The only way I could stop this was removing the 8dp bottom margin, but that made the normal dialog buttons look too close to the edge.\n. Oh okay, fair enough. The Folder Chooser sample seemed to be much less glitchy, so thought it had improved it. Ah well!\n. I'm really sorry. I did a pull request with my changes, as I observed the Folder Chooser sample was much more stable, but @afollestad has said that I didn't actually fix it, so it was reverted. Sorry.\n. I have implemented this feature and have created a pull request for it #300.\n. You just set the width and height of the dialog through the standard mechanism.\ndialog.getWindow().setLayout(widthInPixels, heightInPixels);\nIf you want either to be left alone, you can set them to:\nLayoutParams.WRAP_CONTENT or LayoutParams.MATCH_PARENT as well.\nA mechanism I often use is sizing the dialog based on margins:\nDisplayMetrics displayMetrics = getActivity().getResources().getDisplayMetrics();\nfloat screenWidth = displayMetrics.widthPixels;\nint width = Math.round(screenWidth - (marginInPixels * 2)); // * 2 for margin on each side\ndialog.getWindow().setLayout(width, height);\n. Thanks!\n. Ok fair enough. Should have discussed it first before implementing!\nI have lots of Text input dialogs in other projects, so thought it might be a common use-case. I noticed there was a text input dialog as part of the Edit text preference but found I couldn't use it as a generic dialog, so implemented this.\nI will just use custom views to do this, like you said.\nThanks anyway!\n. Ah ok excellent. Which of the features mentioned above would you be interested in seeing? I can check out the latest code and re-implement the feature.\n. Oh okay, fair enough!\n. I knew about using them for a situation like in that screenshot. Never thought to use them for the Simple Menu situation, of selecting an option, awesome. Thanks.\n. Yeah that is okay, I understand.\nI will revert all the changes I made, then re-commit them and create a pull request for that. That means the commits will have my details correctly connected and there is no dangerous changes to the repo.\n. ",
    "osrl": "I wanted your theme, but also I wanted some opacity. You say this is not possible?\n. I think you are right. Regards to my graphic designer :)\n. ",
    "Aracem": "Yes, its very weird :S\nHere is one of my \"builds\". I use a wrapper to create different Dialogs inside the app (like, do you want to login, do you want to finish this, do you want to logout...) but I not do nothing special on it more like set text, colors and that kind of things:\njava\nnew MaterialDialog.Builder(activity)\n    .title(R.string.broadcast_stop_dialog_title)\n    .titleColorRes(R.color.app_text_black)\n    .content(R.string.broadcast_stop_dialog_content)\n    .contentColorRes(R.color.app_text_dark)\n    .btnSelector(R.drawable.selectable_item_background_red, DialogAction.POSITIVE)\n    .btnSelector(R.drawable.selectable_item_background_grey, DialogAction.NEGATIVE)\n    .positiveColorRes(R.color.app_text_red)\n    .positiveText(R.string.broadcast_stop_btn_yes)\n    .negativeText(R.string.broadcast_stop_btn_no)\n    .negativeColorRes(R.color.app_text_dark)\n    .autoDismiss(true));\nThe only thing I guest that could be it's the selectable background (I override to put special colors), Perhaps it's doing something weird with the paddings. Let me check if it works with the default selectable background.\n. Yes, that's the problem. I remove the selectable and all works.\nThanks for the tip of the selectors, I didn't know it :) I had a bug in other part of the app similar to this. It explains a lot of things hehehe\nThank you very much, I am going to close the issue. \n(Perhaps you can put a little tip in the selectors part advise about the use of inset!)\n. ",
    "fncapps": "Here you go:\n02-26 23:17:50.528  29177-29177/z.myapp.debug E/AndroidRuntime\ufe55 FATAL EXCEPTION: main\n    Process: z.myapp.debug, PID: 29177\n    android.view.WindowManager$BadTokenException: Unable to add window -- token null is not for an application\n            at android.view.ViewRootImpl.setView(ViewRootImpl.java:685)\n            at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:288)\n            at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:69)\n            at android.app.Dialog.show(Dialog.java:312)\n            at com.afollestad.materialdialogs.MaterialDialog.show(MaterialDialog.java:1463)\n            at com.afollestad.materialdialogs.MaterialDialog$Builder.show(MaterialDialog.java:1454)\n            at z.myapp.packageOne.ClassOne$6.onPreferenceClick(ClassOne.java:178)\n            at android.preference.Preference.performClick(Preference.java:1123)\n            at android.preference.PreferenceScreen.onItemClick(PreferenceScreen.java:214)\n            at android.widget.AdapterView.performItemClick(AdapterView.java:334)\n            at android.widget.AbsListView.performItemClick(AbsListView.java:1545)\n            at android.widget.AbsListView$PerformClick.run(AbsListView.java:3683)\n            at android.widget.AbsListView$3.run(AbsListView.java:5597)\n            at android.os.Handler.handleCallback(Handler.java:739)\n            at android.os.Handler.dispatchMessage(Handler.java:95)\n            at android.os.Looper.loop(Looper.java:145)\n            at android.app.ActivityThread.main(ActivityThread.java:5834)\n            at java.lang.reflect.Method.invoke(Native Method)\n            at java.lang.reflect.Method.invoke(Method.java:372)\n            at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1388)\n            at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1183)\nThanks for the help\n. Didn't manage to solve the problem..  The activity was already loaded and not closed\n. ",
    "hex6ng": "I'm getting the same error whenever I include \n\ncompile 'com.afollestad:material-dialogs:0.6.3.5'\n\nThe project compiles just fine without it.\nThese have already been included:\n\n    compile 'com.android.support:appcompat-v7:21.0.3'\n    compile 'com.android.support:support-annotations:21.0.3'\n    compile 'com.android.support:cardview-v7:21.0.3'\n    compile 'com.android.support:recyclerview-v7:21.0.3'\n\n. ",
    "magnevox": "Ok, I found the problem. It was caused by <item name=\"android:fitsSystemWindows\">true</item>\n. ",
    "conzorz": "Great, thanks.\nGood job on this library too! :)\n. <3\nOn 5 Mar 2015 22:25, \"Aidan Follestad\" notifications@github.com wrote:\n\nRelease 0.6.3.5 is now available with some improvements to this.\nhttps://github.com/afollestad/material-dialogs/releases/tag/v0.6.3.5\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/293#issuecomment-77465691\n.\n. \n",
    "ZeroBrain": "sorry man..just my mistake...\nit would be closed\n. ",
    "Gaudon": "Interesting, I'm noticing that using larger image resources is causing the title to scale much larger, let me do a rebuild as an example.\n. Here's a comparison of a 48x48 icon and a 128x128 icon as 2 separate draw-able entities in the .icon() builder of the dialog.\n\nI should mention this behavior is apparent with both .icon() and iconRes()\nJava\ndialog = new MaterialDialog.Builder(context)\n    .iconRes(R.drawable.ic_cup_small)\n    // Other stuff here.\n. Oh I think I misunderstood you to begin with. You're saying it's already set to increase the title size based on the size of the drawable, where as I'm looking for a way to restrict that size of the title, independently of the size of the drawable.\n. Right, I'm simply asking if there is a way to restrict the size of the icon (such as saying, I want it to be 32dp x 32dp) regardless of the size of the drawable I pass in through .icon(). \nI use this resource in multiple places in the application, and rather than having a small, medium, large, etc, given it's a small png to have loaded anyway, i'd rather just scale it down for this purpose. \nIf that makes sense.\n. Ah that's fair.. Feature request :D\nin the meantime I'll do a workaround like you've suggested. Thanks all the same.\n. Great work, if it all checks out I hope afollestad merges it in. Something I will be utilizing immediately. \n. Yeah I tested this earlier this evening, seconds after it was released and it seems to be working perfectly. Quite handy for my use case!\nCheers gentleman.\n. ",
    "msaudicse": "Thank you, it works.\n. ",
    "sevar83": "A small mistake in the README. The lines \n< attr name=\"md_icon_max_size\" format=\"dimension\" />\n< attr name=\"md_icon_limit_icon_to_default_size\" format=\"boolean\" />\nshould be something like this:\n< item name=\"md_icon_max_size\">32dp\n< item name=\"md_icon_limit_icon_to_default_size\">true\n. ",
    "RJFares": "please update readme as suggested above, cheers\n. If it's intended you can close this issue, but there are some circumstance where you may need it.\nFrom the example above, choosing a language has an implication of restarting the application. \nThe user can choose to restart the app (tick the checkbox) or restart later without applying the effect.\n. ",
    "askfor": "Thanks for your quick response.\nThe stock AlertDialog will call DialogInterface.OnMultiChoiceClickListener every time when you check or uncheck items.\nBut alwaysCallMultiChoiceCallback default value is false. so it will break legacy code.\nI think if we can't change alwaysCallMultiChoiceCallback  value, at least we should set it to true in AlertDialogWrapper.Builder.setMultiChoiceItems\n. Thanks!\n. MaterialMultiSelectListPreference missing getValues()\n. In the sample if I change preference_values like this:\n<string-array name=\"preference_values\">\n        <item>0</item>\n        <item>1</item>\n        <item>2</item>\n        <item>3</item>\n        <item>4</item>\n    </string-array>\nMaterialMultiSelectListPreference won't work anymore. It will throw an exception like this:\nProcess: com.afollestad.materialdialogssample, PID: 31400\njava.lang.ArrayIndexOutOfBoundsException: length=5; index=-1\n    at com.afollestad.materialdialogs.MaterialDialog.sendMultichoiceCallback(MaterialDialog.java:859)\n    at com.afollestad.materialdialogs.MaterialDialog.onClick(MaterialDialog.java:876)\n    at android.view.View.performClick(View.java:4754)\n    at android.view.View$PerformClick.run(View.java:19605)\nIt seems mBuilder.selectedIndices was set to [-1]  in  MaterialDialog line 265 , I don't know where this value come from.\n. ",
    "shufeike": "Hi, I have met the same exception on OPPO, have you fixed it?\n. ",
    "Silvuz": "how can i set the radio button now? i must use customView now?\nhttps://www.google.com/design/spec/components/dialogs.html#\n. But the RadioButtom disappeared on 6.4.1. I must be doing something wrong. will recheck\n. ",
    "bkraszewski": "Make sure you have this in your gradle file:\n    repositories {\n        maven {\n            url  \"http://dl.bintray.com/drummer-aidan/maven\"\n        }\n    }\n. ",
    "draskosaric": "Instead of mavencentar(), I set jcenter() and everything is fine now.\n. Post the code. In the code that @panrongfu provided, dialog is not dissmised in onClick method and activity is hidden by starting new activity, so message \"you cannot show a dialog before an Activity is created or after it's hidden \" totally makes sense.. @MahdiAstanei, If that problem is so big as an elephant in the room, maybe you could contribute and add that functionality to this project. @afollestad is not obliged to fulfill anyone's requests if he finds them irellevant and/or doesn't have time for them.  . ",
    "binarybucks": "Now it doesn't crash but the value is appended on every open.\nI suggest to switch back mEditText.append to mEditText.setText \nEdit: Also I suggest to call setValue after persistString during setText.\nOtherwise the saved value is not shown when the preference is opened again after changing the value. \n. ",
    "fahimk": "got a message to update sdk in android studio. I'm still using v7:21.0.3, but it's working now.\n. That worked, I needed to override the onDismiss and onCancel from DialogFragment. Thanks!\n. @afollestad seeing this same issue, will try and debug\n. ",
    "GHEEV": "Hey! Here is reverse. I'm using your library but my theme is transparent default. My dialog buttons is missing Roboto fonts and the single choice are themed like Android 2.3... What is wrong?\njava\nnew MaterialDialog.Builder(getActivity())\n    .title(\"Para qual numero deseja ligar?\")\n    .theme(Theme.LIGHT)\n    .items(parts)\n    .itemsCallbackSingleChoice(-1, new MaterialDialog.ListCallback() {\n        @Override\n        public void onSelection(MaterialDialog dialog, View view, int which, CharSequence text) {\n            final Intent intent = new Intent(Intent.ACTION_DIAL);\n            intent.setData(Uri.parse(\"tel:\"+String.valueOf(text)));\n            startActivity(intent);\n        }\n    })\n    .positiveText(R.string.call_button)\n    .negativeText(R.string.cancel_button)\n    .show();\nIs in a fragment and the activity is extended to Activity. And I tried change the color of buttons programatically but the color doesn't match :(\n\n. I change to AppCompat, but the action button fonts (positive and negative buttons) didn't change...\n. Ok so, thanks for that! :)\n. ",
    "lupajz": "No the problem was I was getting transparent background on my components like listview for example without having any dialog in project, but just pasting dependecy to gradle file. I use https://github.com/neevek/Paginize lib for my project as it is convinient for me to not work with fragments and things around them. Guess that was the problem. Anyway I solved it by specifing each components missing background color manualy as I don't have time to look into it thoroughly. Will mail u if I get time to  investigate the problem. \n. ",
    "fredyrincon": "Let me know when you going to publish again. And I will give a try of it. \nThank you.\n. Thanks cool mate!! \nNot a problem. \n. All good. It works perfect. Thank you!!\nOnce again great job.\n. ",
    "yaa110": "Dear @afollestad, thank you for considering my request. Below API 17 using RIGHT instead of END makes the text to be on right, however on API 17+ using END puts the text on left because the END and START in RTL have the opposite effect. Unfortunately, your change did not work properly. I think it would be better to have LEFT and RIGHT in GravityEnum as I mentioned.\n. ",
    "ZephZeph": "Yeah you're right. I actually removed the library from my project and re-added it but AIDE failed(bug) to remove the reference to the original library. thanks\n. There should be a dismiss function as I have used it in my app as well. If you can't find it, try to edit the MaterialDialog class and add a dismiss function if it's not there. But then again, it should be there.\n. ",
    "maniac103": "For the dialog title, I agree. I'm not sure whether I follow the argument for the radio button spacing though. Having 16dp spacing between UI elements is a good idea (in order to provide enough spacing for separating touch targets), but in this particular case, we're dealing with only one UI element (in terms of interaction). This is why the spacing feels too much to me: it looks like the text doesn't really belong to the radio button.\n. Arguably this is a mistake though, looking at the 'Simple dialogs' example below that: http://material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7VlBxRUNLdk5ZbU0/components_dialogs_simple1.png\nSubjectively it looks plain ugly ;)\n. ",
    "ivanviragine": "Thanks a lot!\n. ",
    "Kuitsi": "This is not working either. App does not crash but the screen is empty, only ActionBar is visible.\nW/PreferenceManagerCompat\ufe55 Couldn't call PreferenceManager.inflateFromResource by reflection\njava.lang.reflect.InvocationTargetException\n        at java.lang.reflect.Method.invokeNative(Native Method)\n        at java.lang.reflect.Method.invoke(Method.java:507)\n        at com.afollestad.materialdialogssample.compat.PreferenceManagerCompat.inflateFromResource(PreferenceManagerCompat.java:132)\n        at com.afollestad.materialdialogssample.compat.PreferenceFragment.addPreferencesFromResource(PreferenceFragment.java:208)\n        at com.afollestad.materialdialogssample.PreferenceActivity$SettingsFragment.onCreate(PreferenceActivity.java:17)\n. We have in Bitbeaker something that may help. It can fall back to old style preferences but it can use fragments too.\n. Nope. The first crash is a classic\nandroid.content.ActivityNotFoundException: Unable to find explicit activity class {com.afollestad.materialdialogssample/com.afollestad.materialdialogssample.PreferenceActivityCompat}; have you declared this activity in your AndroidManifest.xml?\nAfter it is fixed, the next crash is\njava.lang.RuntimeException: Unable to start activity ComponentInfo{com.afollestad.materialdialogssample/com.afollestad.materialdialogssample.PreferenceActivityCompat}: android.view.InflateException: Binary XML file line #13: Error inflating class com.afollestad.materialdialogs.prefs.MaterialMultiSelectListPreference\nYour MaterialMultiSelectListPreference requires API 11 as stated in it's source code. I tried what happens if I just comment it out from res/xml/preferences.xml. Everything seems to be ok until you click the last one, MaterialEditTextPreference.\njava.lang.ClassCastException: android.widget.TextView\n        at com.afollestad.materialdialogs.MaterialDialog.canViewOrChildScroll(MaterialDialog.java:366)\n        at com.afollestad.materialdialogs.MaterialDialog.canViewOrChildScroll(MaterialDialog.java:366)\n        at com.afollestad.materialdialogs.MaterialDialog.invalidateCustomViewAssociations(MaterialDialog.java:206)\n        at com.afollestad.materialdialogs.DialogInit$1.onGlobalLayout(DialogInit.java:266)\n. I guess you did not see my commit https://github.com/Kuitsi/material-dialogs/commit/a446b59f11747ea0ee9fb9dea02cabde2d0cef5c (in my fork, referenced in this issue but I did not create a pull request for it yet) from this morning. You can't even try to load MaterialMultiSelectListPreference in preferences.xml when opening PreferenceActivityCompat or the app will crash.\n. Thanks. No more issues at this point :)\n. Still not working: GridLayout in /sample/src/main/res/layout/dialog_color_chooser.xml requires API 14. android.support.v7.widget.GridLayout should help.\nE/AndroidRuntime\ufe55 FATAL EXCEPTION: main\nandroid.view.InflateException: Binary XML file line #9: Error inflating class GridLayout\n        at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:581)\n        at android.view.LayoutInflater.rInflate(LayoutInflater.java:623)\n        at android.view.LayoutInflater.inflate(LayoutInflater.java:408)\n        at android.view.LayoutInflater.inflate(LayoutInflater.java:320)\n        at android.view.LayoutInflater.inflate(LayoutInflater.java:276)\n        at com.afollestad.materialdialogs.MaterialDialog$Builder.customView(MaterialDialog.java:1112)\n        at com.afollestad.materialdialogssample.ColorChooserDialog.onCreateDialog(ColorChooserDialog.java:48)\n...\nCaused by: java.lang.ClassNotFoundException: android.view.GridLayout in loader dalvik.system.PathClassLoader[/data/app/com.afollestad.materialdialogssample-1.apk]\n...\nEdit: I try to make a pull-request out of this.\n. Good point, updating. https://developer.android.com/tools/support-library/features.html#v7-gridlayout did only suggest 21\n. ",
    "JackTrow": "Maybe an image might of been more clear\n\n. With the following implementation,\n``` Java\nimport com.afollestad.materialdialogs.MaterialDialog;\nnew MaterialDialog.Builder(this)\n    .title(\"Title\")\n    .content(\"Content\")\n    .positiveText(\"Positive\")\n    .negativeText(\"Negative\")\n    .show();\n```\n. Knew it must of been something simple!\nxml\n<item name=\"fitsSytemWindows\">true</item>\nIt was in my v21 folder and isn't actually needed so was just an easy remove.\n\nIts looking as it should!\nThank you!\n. I could see it was parsing it as xml, I tried to reword what I said without the code but you beat me to it.\nWhich is even better, thanks! \n. ",
    "DonTomika": "Wow, that was fast. Thanks :)\n. ",
    "ccrama": "@afollestad I'm actually experiencing this right now. Using version 0.8.2.0. Here is my code:\n``` java\n//Shortened some methods, myArrayList is the list of strings to use and checkedItems is my list of strings that should be checked\n  final String[] all = new String[myArrayList .size()];\n        final List s2 = checkedItems;\n        boolean[] checked = new boolean[all.length];\n    int i = 0;\n    for (String s : myArrayList ) {\n        all[i] = s;\n        if (s2.contains(s)) {\n            checked[i] = true;\n        }\n        i++;\n    }\n    final ArrayList<String> toCheck = new ArrayList<>();\n\n\n    toCheck.addAll(subs);\n    new AlertDialogWrapper.Builder(this)\n            .setMultiChoiceItems(all, checked, new DialogInterface.OnMultiChoiceClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which, boolean isChecked) {\n                    if (!isChecked) {\n                        toCheck.remove(all[which]);\n                    } else {\n                        toCheck.add(all[which]);\n                    }\n                    Log.v(\"Slide\", \"Done with \" + all[which]); //never runs\n                }\n            }).setTitle(\"Select subreddits to pin\").setPositiveButton(\"SAVE\", new DialogInterface.OnClickListener() {\n        @Override\n        public void onClick(DialogInterface dialog, int which) {\n            subs = toCheck;\n            Log.v(\"Slide\", subs.size() + \"SIZE \" ); //always the same as subs was before!\n            adapter.notifyDataSetChanged();\n        }\n    }).show();\n\n```\nAm I doing something wrong? Thank you! Sorry for raising this zombie issue :)\nEDIT: Can confirm it works when changing from AlertDialogWrapper to AlertDialog (v7)\n. @afollestad  awesome! Fixed it! \nSlide is now officially using material-dialogs for all dialogs :)\n. ",
    "lionelkermesse": "Hello,\nI'm still having the same issue of Leaked window when showing after activityResult. Please can you give me some advices on how to fix that or how to work around the issue. I tried many think unfortunately without success.\nThanks in advance. ",
    "sreichholf": "checkListInitScroll is currently causing an ArrayOutOfBoundsException when no item is selected in a MultiChoice List.\n. ",
    "caarmen": "Hello,\nThis is the demo app from the Play Store, on an S4 with 5.0.1.\n\n\n. Maybe this is an issue on 5.0.1 but not 5.1...\n. ",
    "imSathish": "Add this 2 line in style it will worrked for me\nsrc_in\n@color/colorAccent. ",
    "inteist": "Why is visibility status unreliable? Is that because the library is written this way or some other reason?\nI can see it in the code that null hides the button.\n- why it was designed like this?\nSuggested fix:\noverload invalidateActions() with invalidateActions(MASK) the default no params method will combine all the 3 button masks and make a call to incalidateActions(COMBINED_MASK) while the setActionButton becomes:\njava\n  public final void setActionButton(@NonNull DialogAction which, CharSequence title) {\n        switch (which) {\n            default:\n                mBuilder.positiveText = title;\n                invalidateActions(POSITIVE_BTN_MASK);\n                break;\n            case NEUTRAL:\n                mBuilder.neutralText = title;\n                invalidateActions(POSITIVE_NTRL_MASK);\n                break;\n            case NEGATIVE:\n                mBuilder.negativeText = title;\n                invalidateActions(POSITIVE_NEG_MASK);\n                break;\n        }\n    }\nThe invalidateActions() adds a check for a MASK before doing updates for the buttons. \nThis may not be the best solution but it should work with minimal changes to the flow/structure and may be even a bit more efficient as only views required to be updated will be updated. \nIf you like it I can implement it and submit a pull.\nLet me know.\n. That's a bad solution because this is an unexpected side effect in Android world and getting rid of a view by setting it to null is not common (to the best of my knowledge).\nNot sure I follow 100% but I trust you know what you are talking about still should be fixed. Why not fix it - it should not be too hard and will most likely result in a better, more modular architecture.\n. :)\nI was writing that you probably did not fully understand my proposal...\nBut this fix would still not be ideal \u2013 more of a \"hack\" way IMO. I thought of it as a way to do the fix with minimal disturbance to anything else since I saw that it is not quite simple logic of updates going on there.\n. I believe I need to point out that I only looked at the source code for a few minutes and a better solution is quite possible. \n. How well tested is it?\nI am afraid I can't go ahead with not very stable version. \nI can help test it but right now I don't really have a lot of time to dedicate to it. \nYou should think about creating a test suit to automatically test edge cases on various OSes. Since it backports to so many OS versions it is pretty important to have a coherent experience.\n. Since I did not lock in the version, it auto updated. I will take a look.\nAfter reading the release notes, if I understand correctly, any change will require call to invalidateActions()... That's better in terms of stability of predictability but I am not sure it made the library better in terms of usage. Someone could be wondering why nothing happens after changing the visibility but not making the call for invalidateActions() that's my $0.02\n. Aidan, thanks for the prompt reply as always.\nWe are well aware that this is not the latest release. We do not feel comfortable releasing bleeding edge to production. We periodically upgrade the library and make sure we run the tests. It is not too old of a release either and while I suspected you may suggest we should use the latest version and see if the problem exists there, given that we did not see this in our internal testing this would be impossible and given the simplicity of subclassing, as I mentioned it def. looks like the problem is somewhere inside the lib and is most likely present in later releases. Maybe you did not expect people to subclass MaterialDialog class. \nBtw, maybe there is a better way to implement what we need, I'd appreciate if you point me into the right direction. But again, the subclassing is pretty straightforward.\nThanks!\n. a little more info to make it easier for you to follow:\njava\n    protected OneAtATimeMaterialDialog(MaterialDialog.Builder builder) {\n        super(builder); // <---- problem is here, 18-th LINE \n    }\njava\n    @SuppressLint(\"InflateParams\")\n    protected MaterialDialog(Builder builder) {\n        super(builder.context, DialogInit.getTheme(builder));\n        mHandler = new Handler();\n        mBuilder = builder;\n        final LayoutInflater inflater = LayoutInflater.from(builder.context);\n        view = (MDRootLayout) inflater.inflate(DialogInit.getInflateLayout(builder), null);\n        DialogInit.init(this);  // <----- HERE, LINE 91\n    }\n. @afollestad \nI mentioned that this is not easily reproducible. We could not reproduce it as well but from a few thousand users, we received 500 crash reports in less than 12 hours.\nI believe this has something to do with how you construct the dialog view. Maybe you do not dispose of something or try to reuse something and so when super is called, it tries to reconstruct the existing dialog and crashes with The specified child already has a parent. You must call removeView() on the child's parent first.\n- Any thoughts on this? \nWe can try to update to the latest version but since this looks to be something really basic, I doubt it would resolve our issue.\n- Do you see any problems with our subclassing?\n. So\n1. We updated to 0.8.0.1 \u2013\u00a0SAME\n2. We know how to reproduce the problem:\n``` java\n        new OneAtATimeMaterialDialog.Builder(this)\n                .title(\"title 1\")\n                .content(\"content 1\")\n                .positiveText(\"pos\")\n                .negativeText(\"neg\")\n                .cancelable(false)\n                .build().show();\n    new OneAtATimeMaterialDialog.Builder(this)\n            .title(\"title 2\")\n            .customView(R.layout.custom_dialog_body, true)\n            .negativeText(\"neg\")\n            .positiveText(\"pos\")\n            .cancelable(false)\n            .build().show();\n\n```\nThis:   customView(R.layout.custom_dialog_body, true) in dialog 2 seems to be the problem if it's just string with content(String s) then no problem.\ncustom view can probably be any view (we used this very simple one)\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<TextView\n    android:id=\"@+id/reminder_prompt\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/reminder_add_suggestion\"\n    android:textSize=\"16sp\" />\n\n\n```\n. and it looks like we found the problem. It was indeed in our subclassing. Sorry for the trouble.\n. same thing here\nAlthough your library does not appear in the stack - it seems to be the cause/culprit for the problem.\n. The OP has the latest version and I also tried various versions and actually 0.8.5.5 seemed to work for me while 0.8.5.9 didn't.\n. I'm sorry. I did not see the difference and now I did. The compile 'com.afollestad.material-dialogs:core:0.8.5.9' works indeed.\nI spent hours yesterday fighting with various VERY WEIRD issues yesterday which all seemed to be the culprit of wrong dep... granted it was 2am... so again - lesson learned... no late night major upgrades recommended )\n. ",
    "rfazi": "Thank.\n. I solved the problem.. I modified the library builder in this way:\nI have added a boolean variable:\njava\nprotected boolean systemDialog = false;\nI have added a function who set the variable like this:\njava\npublic Builder systemDialog() {\n        this.systemDialog = true;\n        return this;\n}\nAnd finally i have modified the show() function like this:\nbefore:\njava\n@UiThread\npublic MaterialDialog show() {\n        MaterialDialog dialog = build();\n        dialog.show();\n        return dialog;\n}\nafter:\njava\n@UiThread\npublic MaterialDialog show() {\n        MaterialDialog dialog = build();\n        if (systemDialog) dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n        dialog.show();\n        return dialog;\n}\n. I use this in my app for hide keyboard:\nInputMethodManager imm = (InputMethodManager) ((AppCompatActivity) context).getSystemService(Context.INPUT_METHOD_SERVICE);\nimm.hideSoftInputFromWindow(((AppCompatActivity) context).getCurrentFocus().getWindowToken(), 0);\n. After this line: https://github.com/afollestad/material-dialogs/blob/master/core/src/main/java/com/afollestad/materialdialogs/util/DialogUtils.java#L224 i suggest to insert this:\njava\nInputMethodManager imm = (InputMethodManager) builder.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\nif (imm != null) imm.hideSoftInputFromWindow(dialog.getCurrentFocus().getWindowToken(), 0);\nbecause this line:\ndialog.getCurrentFocus().getWindowToken()\nobviates all this:\njava\ndialog.getInputEditText().post(new Runnable() {\n            @Override\n            public void run() {\n                dialog.getInputEditText().requestFocus();\n                InputMethodManager imm = (InputMethodManager) builder.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n                if (imm != null)\n                    imm.hideSoftInputFromWindow(dialog.getInputEditText().getWindowToken(), 0);\n            }\n        });\n@dsdebastiani Try my change\n. @afollestad Check my commit to see if it was right. Thank\n. @afollestad Why you have canceled the commit?\n. I confirm the problem.. After this release now the dialog occupy all width of the device.\nI have LG G3.. I'm use the version you commited above.\nTurn back to the 0.9.2.1 resolve the problem.\nEdit: Turn back to the 0.9.1.0 resolve the problem.. @afollestad Sorry I'm confused, the problem persist in 0.9.2.1.\nRevert back to 0.9.1.0 resolve the problem.. LG G3 Android 6\n\n. @afollestad Maybe the problem is the new dimension?\n<dimen name=\"md_dialog_max_width\">.\n",
    "logicalstep": "I think you're assuming people like me, know as much as people like you. and you are missing a big problem for new devs who want to use your library...like me :)\nI understand that I have to add the dependency to Gradle (same as a .Lib file)\nThe question is when I download your source file from here, it looks like this:\n\\material-dialogs-0.6.7.0\\material-dialogs-0.6.7.0\\\n\nWhich folder do I put where in my project?\nWhat's the hierarchy?\nThanks again.\n. Nope, I'm using Android Studio.\nI see, so it will download the library for me?\nWhere does it store it in Android Studio?\nJust reading through this to get an idea of Gradle:\nhttp://igorpopov.io/2014/05/01/understanding-gradle/\nThanks for your patience.\n. I appreciate the help you have given so far, so many thanks.\nI'm actually making progress now. Looking through your issues, it appears I have a similar situation to another user, where my project was imported into Android Studio and originally using Maven, not  jcenter().\nSo I'm going to work through solving that, and hopefully it'll all start working.\nThanks again.\n. Got it working.\nchanged to jCenter in build.gradle from Maven.\nDownloaded latest build tools and sdk using sdk manager.\nThanks again, for this great library!\n. So you're saying I should use an activity?\nAlertBuilder looks simpler to me, especially when the information is just text and a dismiss button but I understand the flexibility of using an activity.\nSeems like a lot more complexity, resources and overhead to me??\n. ",
    "shekibobo": "To be fair, there is nothing explicitly stating that they should or must be in all caps, uppercase, or not lowercase. Granted, the examples all use uppercase, but if it's allowed in Lollipop, it seems like it should be allowed here.\n. That's a good point. It would likely be false for < L, and that's no good.\nThere's not a way to override the styles individually, yet, right? Something like:\nxml\nmd_dialogStyle=\"@style/Custom.Theme.Dialog\"\nmd_dialogActionButtonStyle=\"@style/Custom.Theme.Dialog.ActionButton\"\n. :+1: That sounds like it'd do the trick and match the Lollipop behavior better. I was kind of trying to avoid suggesting adding an md_ attribute just to override this, since it might be against design guidelines, but if it has the same behavior as Lollipop, that's perfect, and not actively encouraging going against guideline examples.\n. I wanted to avoid using findViewById() because I would consider the view ids private API and subject to change. If these become part of the public API, we can rely on them and continue to support them even if the internals end up changing.\nThanks for the release!\n. ",
    "Falcon5f": "I think it would be better to change a list item text size too, md_listitem_textsize to 16sp instead 18sp. Also md_listitem_height and md_listitem_control_margin change to smaller value to be more consistent.\n. Ok, that's right. Thank you.\n. @marianpavel You can include core library dependency\ncompile 'com.afollestad.material-dialogs:core:0.8.5.9'.\nThen download sources from https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.9 and add commons library as a module. And in your app build.gradle include\ncompile project(':commons-library-module-name')\n. @audiultx @marianpavel Also don't forget to change commons' build.gradle:\nreplace\ncompile project(':core')\nwith\ncompile 'com.afollestad.material-dialogs:core:0.8.5.9'\n(if you don't include core library as module in your project and follow my previous message)\n. @audiultx  I'm glad that I could help you)\n. ",
    "rubengees": "Okay, works. Thank you!\n. Okay, thank you. How can I prevent the DIalog from reopening if it was explicit closed by the user?\nI think I forgot to mention that it was actually closed :D\nThis is a Dialog I use in my App: https://github.com/RubenGees/Vocabletrainer/blob/master/app/src/main/java/com/rubengees/vocables/dialog/EvaluationDialog.java\n. ",
    "agrajaghh": "Thanks for the quick fix!\nI tried it out, but the spacing between the content text lines is still bigger than in AlertDialog :(\nIts now reading the values from android:textColorPrimary and android:textColorSecondary for me. But if these values are not set in the theme, the text is displayed in gray in MaterialDialog not in black like in AlertDialog. So perhaps the standard value should be changed?\n. okay I see. But Is it possible to use the background color (\"white\" / light gray) for the darker color? This would get closer to the material design I guess...\nregarding GB: you're right, I hate it... But unfortunately there are still too many GB devices out there...\n. just saw you can just set one color, forget what I said...\n. ",
    "jedrivisser": "If you want to update progress from an AsyncTask on the UI thread, use onProgressUpdate. Something like:\nprivate class updateAllAuthors extends AsyncTask {\n    MaterialDialog dialog;\n```\nprotected void onPreExecute() {\n    dialog = new MaterialDialog.Builder(getActivity())\n            .content(R.string.dialog_loading)\n            //.progress(true, 0)\n            .progress(false, 70, false)\n            .show();\n}\n@Override\nprotected Void doInBackground(String... params) {\npublishProgress(20)\nreturn null;\n```\n}\n@Override\n     protected void onProgressUpdate(Integer... values) {\n    dialog.setProgress(values[0]);\n    }\n   .....................\n. ",
    "arfod": "Don't mind...in that scenario (in a DialogFragment) you have to use the \"setCancelable()\" method of the DialogFragment class itself.\nBye\n. ",
    "tbruyelle": "Good to know, but not sure if this wouldn't be improved.\n. No it's really the ProgressBar who handles being invoked from another thread. So in your MaterialDialog you don't have to throw an exception if you're not in the UI Thread. Just call ProgressBar.setProgress/setMax and it will be ok.\nThe only thing you have to handle is in MaterialDialog.setProgress where you also update the progress label and progress minmax. Ensure those setText are invoked in the UI Thread.\n. > I don't throw an Exception,\n? https://github.com/afollestad/material-dialogs/blob/8c78a7a1c54424ae4a2fc69d329d8bb7201ef0fc/library/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java#L1329\nYou still throw an exception and so your fix is not helpful. \n\nThere are not any views on Android that are threadsafe. That's not how\nviews work.\n\nYeah they probably make an exception for ProgressBar because methods like setProgress/setMax are commonly used in a background thread. \nBecause your MaterialDialog aims to mimic the ProgressDialog, setProgress/setMaxProgress should also be callable from a background thread. About the other methods of the class you shouldn't change them.\n. Fine, you can also remove the handler usage for setProgressMax because ProgressBar.setMax handles call from background thread just like ProgressBar.setProgress.\nAbout the other handler usages you added in the commit 8c78a7a1c54424ae4a2fc69d329d8bb7201ef0fc, I'm not sure they are really useful, my concern was only about setProgress/setProgressMax.\n. ",
    "MrBrightside29": "Tried but it doesn't work. I've tried putting it into the container layout of the custom view and into the FrameLayout that has the pink background and the white frame is still there.\n. Ok, thanks for the reply! I will try the second workaround and let you know.\n. I don't know why but I'm getting a NullPointerException when try to set the background color. Here is my code:\n``` java\nMaterialDialog dialog = new MaterialDialog.Builder(MyPlansActivity.this)\n    .title(plan.settings_plan_name)\n    .titleColor(R.color.white)\n    .customView(R.layout.dialog_header, false)\n    .positiveText(R.string.add_more_people)\n    .callback(new MaterialDialog.ButtonCallback() {\n        @Override\n        public void onPositive(MaterialDialog dialog) {\n            addMorePeople(plan.planId, plan.guests);\n        }\n    })\n    .build();\nLinearLayout titleFrame = (LinearLayout) dialog.findViewById(R.id.titleFrame);\ntitleFrame.setBackgroundColor(getResources().getColor(R.color.md_pink_500));                  \nListView dialoglistView = (ListView) dialog.getCustomView().findViewById(R.id.membersListView);\nPlanMembersAdapter dialogAdapter = new PlanMembersAdapter(MyPlansActivity.this, membersNamesArray, membersAttendanceArray, myName);\ndialoglistView.setAdapter(dialogAdapter);\ndialog.show();\n```\n. It works now using dialog.getView().findViewById(int)! Thank you very much for your help!\n. ",
    "RobertoAlvarezCeballos": "Sorry!\nxml\n<item name=\"md_dark_theme\">false</item>\n. All working fine so far using version 0.7.1.0\nThanks for the hard work.\n. ",
    "FongMi": "md_widget_color is not working on Single Choice List, It is always black, but my accent color is amber.\n. ",
    "prechtelm": "How do I change my AppCompat? never changed it in android studio\n. Thanks for your help! it is working now!\n. ",
    "Zaldroc": "I use AppCompat but it's still not colored, it only works if i use a custom view.\n. I do and the edittext itself is colored, only the Text Select Handle isn't, like in the first screenshot i posted.\n. I'm doing this with a custom view now, is it possible to use a content message AND a custom view?\n. Ok, when are you going to release the fix?\n. \nMaybe it's because of the content message?\n. There's a divider at the bottom now but not at the top.\n\n. Is it still necessary to use transitive = true ? It doesn't say so in the docs but i still get the error above. . ",
    "JoseTotiRodriguez": "That fixes that issue but won't it still override any color set in \"?android:textColorPrimary\"? In the docs it says that if md_title_color is not set its supposed to use that as fallback. Right now its still using textColorPrimaryInverse, which might be different. \n. Ok yeah you're right. Cheers. \n. ",
    "DaCardinal": "@afollestad Same issue here I'm using build '0.7.3.2' and whenever I try to set the titleColorRes() and the contentColorRes() for some reason, both take the color of titleColorRes()\n. @afollestad just tried the same thing in one of your latest sample got the same result. Is there a work around this? I want the title color to be different from the list items. Here is a screenshot using your latest MaterialDialog sample. \n\n. @afollestad Something like that but choosing multiple items. The one you have closes after the first input\n. ",
    "myanimal": "The dialog theme is set to dark in styles.xml. On 0.7 it picks up the dark theme correctly, so setting the theme explicitly has no effect (same results with it set to black theme vs not setting any theme in xml).\ncolorAccent is set to #3ADBBC using AppCompat dark theme.\nPerhaps using a TintRadioButton from AppCompat instead of a standard RadioButton would apply the correct tinting for API < 21?\n. Perfect, works as expected in 0.7.1.0. Thanks for the quick response!\n. ",
    "Reza-Rg": "But actually I had no difficulties for RTL texts in my apps since API 8 by using Right and Left Gravity (Except some HTC Models), but after android 4.0.0 , I haven't seen any problem in RTL Text, when using Left and Right Gravity. But now, I notices that using Gravity END and START does not work on some android distribution (and not only 4.1, I've seen this issue in a device with android 4.2 too)\nSo, what you guess is a good solution?\nAnd by the way, it's so hard to be a developer in ME countries! Apart from RTL Problem, we also face date and currency conversion problem in different android version, other than sanction and ... :|\n. Great.\nWaiting for update!\nThanks. :)\n. I misunderstood your comment, and I thought a fix would be provided. So, the only solution is that myself add LEFT and RIGHT Gravity for my situation? \n. Hi @afollestad \nI read GravityEnum.java  and DialogInit.java  codes again, and I guess I found where the bug is.\nAs you mentioned the library automatically change END and START Gravity to RIGHT and LEFT based on if android version is lower than 4.2 or not using this code :\n```\n        private static final boolean HAS_RTL = Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1;\npublic int getGravityInt() {\n    switch (this) {\n        case START:\n            return HAS_RTL ? Gravity.START : Gravity.LEFT;\n        case CENTER:\n            return Gravity.CENTER_HORIZONTAL;\n        case END:\n            return HAS_RTL ? Gravity.END : Gravity.RIGHT;\n        default:\n            throw new IllegalStateException(\"Invalid gravity constant\");\n    }\n}\n```\nit should be working, but problem occurs in DialogInit.java after setting Gravity, when trying to set text alignment using this code:\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n            //noinspection ResourceType\n            dialog.content.setTextAlignment(builder.contentGravity.getTextAlignment());\n        }\nWhy should set TextAlignment, when without it Gravity works fine for both RTL and LTR Languages?\nFor example, when text is RTL and Gravity is END in all version text should be on Right (and text is on right side before setting textAlignment), but after setting text alignment, text goes to Left side (which should not).\nRight?\n. @afollestad\nI also read this issue #256 and it seems you had problem with textAlignment before, I guess it's the same problem and revert using textAlignment would solve it! :)\n. ",
    "MahdiPishguy": "resolve this problem?\n. ",
    "HamedGh": "@Reza-Rg \nI wrote this code to solve the problem:\n`\npublic static boolean isRTL() {\n        return isRTL(Locale.getDefault());\n    }\n```\npublic static boolean isRTL(Locale locale) {\n    final int directionality = Character.getDirectionality(locale.getDisplayName().charAt(0));\n    return directionality == Character.DIRECTIONALITY_RIGHT_TO_LEFT ||\n            directionality == Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC;\n}\npublic void showLogoutDialog(){\nboolean HAS_RTL = Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1;\n\nGravityEnum dir,btnDir;\n\nif (HAS_RTL){\n    if (isRTL()) {\n        dir = GravityEnum.START;\n        btnDir = GravityEnum.START;\n    } else {\n        dir = GravityEnum.START;\n        btnDir = GravityEnum.END;\n    }\n}else {\n    dir = GravityEnum.END;\n    btnDir = GravityEnum.END;\n}\nnew MaterialDialog.Builder(this)\n        .titleGravity(dir)\n        .contentGravity(dir)\n        .buttonsGravity(btnDir)\n\n```\n...\n}\n`\n. ",
    "jaredrummler": "You can see the error is in invalidateDividersForScrollingView\nI would change\njava\nif (bottom || topAndBottom) {\nto\njava\nif ((bottom || topAndBottom) && view.getChildCount() > 0) {\n\nThe NPE is caused by this:\njava\nview.getChildAt(view.getChildCount() - 1).getBottom()\nhttps://github.com/afollestad/material-dialogs/blob/master/library/src/main/java/com/afollestad/materialdialogs/internal/MDRootLayout.java#L443\n. ",
    "intrications": "@crysan \nTry setting .cancelable(false).\nautoDismiss stops the dialog closing automatically when you click on one of the buttons.\n. ",
    "h0aX14": "@afollestad\nI tried taking their reference. I'm still getting errors for single choice list dialog. \nCan you please provide sample code? \nThanks in advance \n. @afollestad, I have implemented ABListener, still I get class cast exception error when any list item is selected \n. @afollestad , sorry for the delay(exams on)\n              java.lang.ClassCastException: com.abc.MainActivity cannot be cast to com.abc.AB$ABListener\n            at com.abc.AB$1.onSelection(AB.java:47)\n            at com.afollestad.materialdialogs.MaterialDialog.sendSingleChoiceCallback(MaterialDialog.java:760)\n            at com.afollestad.materialdialogs.MaterialDialog.onClick(MaterialDialog.java:782)\n            at android.view.View.performClick(View.java:4756)\n            at android.view.View$PerformClick.run(View.java:19749)\n            at android.os.Handler.handleCallback(Handler.java:739)\n            at android.os.Handler.dispatchMessage(Handler.java:95)\n            at android.os.Looper.loop(Looper.java:135)\n            at android.app.ActivityThread.main(ActivityThread.java:5221)\n            at java.lang.reflect.Method.invoke(Native Method)\n            at java.lang.reflect.Method.invoke(Method.java:372)\n            at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:899)\n            at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:694)\n. @afollestad ,I'm implementing that interface in a fragment subclass\n. @afollestad , can you help me out ? This would be useful for all when they are working with fragments subclass and dialogfragment\n. ",
    "git-commit": "Great :smiley:\nI see that you are sticking to the official way regarding text placement. Just out of curiousity, do you want to adhere to the official dialogs as much as possible or would you consider differences and improvements acceptable?\n. ",
    "alg": "Thanks!\n. ",
    "vovkab": "Maybe keep this ticket as feature request?\n. Maybe you can make that if font is missing, library would fallback to default system font?\nI will check maybe we could use shrink resource via gradle to remove this fonts in compile time, but we will need library to expect this behavior and handle it correctly.\n. What I'm saying, is if assets folder is gone, can we make library act appropriately?\nRight now I guess it will crash.\n. Something like this:\nIf (font is missing) return TypeFace.NORMAL\nThere is no need to change all views, just TypefaceManager\n. Again, as I explained it above, you don't need to remove fonts.\nBut if they are gone, library should be fine with it.\n. It is not important when and how they will be removed.\nWhat is - library should be fine without them.\n. @alorma as per my first suggestion - make fonts pluggable, this would also be fine with me.\n. @alorma not really.\nRoboto is there only to support old pre api14. Since most of the apps this days targeting min 14 or even 15, there is no point to keep fonts inside library. \nThous few people who still need support for api8, probably already have roboto fonts packaged in their assets, so now they are doubled, or don't care about fonts. They can ignore it or plug with just one more line in gradle.\n@afollestad thanks, looks like null should be fine, looks like textview fallback to default style if typeface is null\n. Btw, looks like TypeFacemanager is limited, it only accepts ttf, while there also otf and etc...\n. ",
    "gdbgeek": "From what I've seen an exception is thrown if the included font assets cant be found.\nAs per my issue (https://github.com/afollestad/material-dialogs/issues/432) I was getting an exception as my IDE was lower casing the font names (and hence they arent able to be loaded). \n. ",
    "yukuku": "No, it works without any Html.fromHtml. The key is that string resources\nMAY contain formatting, but when we retrieve the resource, we can either\nuse getString, which omits all formatting, and returns a String, or\ngetText, which preserves all formatting, and returns a CharSequence\nimplementation, which has the characters plus formatting tags.\nI can send you an example project if you need it.\nOn Apr 17, 2015 21:00, \"Aidan Follestad\" notifications@github.com wrote:\n\nThat formatting doesn't get preserved even with getText(), unless you\nwrap it in Html.fromHtml(), as far as I know.\nCharSequence content = Html.fromHtml(context.getString(R.string.s));new MaterialDialog.Builder(context).\n    .content(content)\n    ...\n    .show();\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/458#issuecomment-93991462\n.\n. By the way, you can't test this on an emulator, because this is caused by unspecified behavior on older Android versions. Prior to 4.2 (I think), Google didn't disallow OEMs to add their own attributes. Hence, paddingStart was mapped to some manufacturer-specific attributes that expects an int value, that's why it crashes when parsing '6.0dip'.\n\nThe crash report of my app from Google Play shows me 2 devices with this behavior:\n- Galaxy Tab 7.7 (GT-P6810) Android 4.1\n- Galaxy Note 10.1 (p4noterf) Android 4.1\n. I see, I was also using build tools 21.1.2. I didn't know build tools 22+ removes paddingStart attributes etc. Any reference on the web?\n. @hzsweers  Thanks! Confirmed with building material-dialogs with Build Tools 22.0.1:\nandroid:paddingStart=\"@dimen/md_listitem_control_margin\"\ndoes not appear in layout/md_listitem_singlechoice.xml, and then a copy of the original file is generated at layout-v17 folder. \nSame with the original layout-ldrtl variant \u2014 the original is automatically located at layout-ldrtl-v17, and the one without the paddingStart is at layout-ldrtl folder.\n. When passing a formatted text from string resource, getText() should be called instead of getString() plus Html.fromHtml(). \nUsing getString() will strip off all formatting attributes from a string resource, so passing that to Html.fromHtml() won't have any effect.\nPlease do not use Html.fromHtml() automatically. Sometimes the dialog text contains user-entered text. Some user-entered text may contain < , and this will be interpreted as a tag opening and the rest of the message will be gone.. There should be a separate method if the user wants to interpret HTML tags in the string resource file. For example, add .contentHtml(@StringRes int resId) and  .contentHtml(@StringRes int resId, Object ... args) that uses Html.fromHtml().\n.content(@StringRes int resId) should always use getText() internally, consistent with how all setText() and similar methods in Android SDK works.. As an additional note, MaterialDialog's .title(@StringRes int titleRes), .positiveText(@StringRes int positiveRes) and its siblings, also use getText(). It makes me feel that .content(@StringRes int resId) should also use getText() to make it work uniformly.. ",
    "st7105": "Before it is work, but after include library and switch to AlertDialogWrapper is not work.\n. builder.itemsCallbackMultiChoice(selectedIndicesArr, new MaterialDialog.ListCallbackMultiChoice() {\n            @Override\n            public boolean onSelection(MaterialDialog dialog, Integer[] which, CharSequence[] text) {\n                /* which is a list of selected indices */\n                List<Integer> whichList = Arrays.asList(which);\n                if (checkedItems != null) {\n                    for (int i = 0; i < checkedItems.length; i++) {\n                        /* save old state */\n                        boolean oldChecked = checkedItems[i];\n                        /* Record new state */\n                        checkedItems[i] = whichList.contains(i);\n                        /* Fire the listener if it changed */\n                        if (oldChecked != checkedItems[i]) {\n                            listener.onClick(dialog, i, checkedItems[i]);\n                        }\n                    }\n                }\n                return true;\n            }\n        });\nI think is not good solution.\n. ",
    "vmihalachi": "Don't understand what you mean by \"There's more masks required\", could you explain me?\n. Exactly, I think I saw the same link. Without the transformation the text is not hidden. \n. Thanks! :) \n. ",
    "chongivan": "Currently, the padding is not there for list dialogs.\nWould you be adding it? \nThanks =)\n. Im on 4.3, Samsung Note 2. \nSmall issue then.\nThanks for the lib, it's great.\n. ",
    "RadiationX": "No shadow\n\nIn real application\n\n\nAlso no animation increase dialogue. Device Meizu MX3 Android 4.4.4\n. ",
    "javmarina": "Well, it might be a Sony problem but the issue still isn't resolved. Strangely, this also happens when I use AppCompat 22.1 instead of this library. I have opened a new issue, see https://code.google.com/p/android/issues/detail?id=170111\n. ",
    "davidschreiber": "It seems this version is not hosted anymore. Also, the version from the README.md is not available via Central Maven. Here is a list of hosted library versions: http://repo.spring.io/libs-release-remote/com/afollestad/material-dialogs/\nThis worked for me:\ncompile 'com.afollestad:material-dialogs:0.6.5.2'\n. Okay, version 0.6.5.2 is empty at all. I now use \ncompile 'com.afollestad:material-dialogs:0.6.4.7'\nwhich seems to work.\n. ",
    "cheenu": "Quick question - where to add this line \nmaven { url 'https://dl.bintray.com/drummer-aidan/maven' } ?\nIf I add it here \nallprojects {\n    repositories {\n        maven { url 'https://dl.bintray.com/drummer-aidan/maven' }\n        jcenter()\n    }\n}\nthen I get errors stating it failed to find the Android Support library dependencies. \n. Thanks!\nOn Thu, Apr 23, 2015 at 10:41 PM Aidan Follestad notifications@github.com\nwrote:\n\n@cheenu https://github.com/cheenu the library is back on jCenter now\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/472#issuecomment-95608881\n.\n. \n",
    "yy1300326388": "@davidschreiber  Thanks!\n. ",
    "squeeish": "Great update. Thank you!\n. Thanks for the tip. For the benefit of others: I looked at the DialogUtils class and found showKeyboard and just did the same for my custom EditText.\n. ",
    "gatlingxyz": "I thought I was the only one. This is my exact error. I've been using 0.6.3.4, but I can only use it locally now, as it seems to have disappeared from the net so Jenkins can't find anymore. :(\nEdit:\n@markchristopherng , I think this might actually be a problem with Calligraphy.\nhttps://github.com/chrisjenx/Calligraphy/issues/155\n. Yeah, but updating to the latest doesn't solve my issue.\n. ",
    "jssingh": "On latest material dialogs (0.7.2.8) and 2.0.2 for calligraphy and still having issues with AppCompat 22.1.1. Whats the fix here? Wouldn't want to give up any library but having the same inflater issue.\nThanks!\n. Except it throws an exception in material-dialogs:\nError retrieving parent for item: No resource found that matches the given name 'Theme.AppCompat.Dialog.Alert'.\nSeems you might be using a v22+ artifact not present in v21. Or am i missing something?\n. Seems to make sense. Let me ask you something here - is it possible for your to get 0.7.2.4 (alongside 0.7.2.8) back up on jcenter again? One that uses the older appcompat. This is while Calligraphy dev gets his library on the latest and greatest. Its just a request, and 'no' would be a perfectly fine answer. \n. ",
    "tonyp": "Thanks for the quick answer.\nThe compiler complains when trying to use .icon(R.drawable.vectorDrawable) that  icon (android.graphics.drawable.Drawable) in Builder cannot be applied to (int)\nRegarding recycle: I had in mind you can recycle drawables when there's absolutely no need for them anymore to keep the application heap low. Thinking about it, this might only apply to Bitmaps, though.\n. Oh wait, now I finally got it. You linked to .iconRes() rather than .icon(), which does exactly what I want.\nI tried to use icon() as that's the only one you mentioned here for displaying an icon:\nhttps://github.com/afollestad/material-dialogs#displaying-an-icon\n. ",
    "vanniktech": "So you're suggesting to use materialDialogBuilder.getInputEditText() and set the maximum length?\n. ",
    "tommytcchan": "@afollestad it still gives me the same error if I don't exclude anything. I'm using the following in my build.gradle:\ncompile 'com.android.support:support-v4:22.1.1@aar'\n    compile 'com.android.support:appcompat-v7:22.1.1@aar'\nany ideas?\n. ",
    "Kiwifed0r": "The problem is not related to this library. I had the same problem and multi-dex fixed it.\n. ",
    "waltervr": "Sorry for the confusion, but yeah, that's what I meant!\n. Hey there, I got couple of things:\n1. When loading the dialog the first time, it doesn't calculate the available text using the prefill, just calculates according to the maxLength selected.\n2. After the max length was reached, I got the disabled submit button, however when I deleted some characters to fit, the button was not enabled.\nI'm attaching 2 screenshots for each issue. \nRegards\n\n\n. @plusCubed you are right, however I would say that if I can avoid using multiple libraries I would do that, using a library just for the EditText doesn't seem to me a good approach.\nRegards\n. @afollestad, in the second one, I did went over the maxLength until got the red colored input and then started erasing.\n. @afollestad I found the reason why it was not working for me, I did not added the .positiveText() property when creating my dialog. After I did that, finally everything worked as expected. I looked into your instructions here:\nhttps://github.com/afollestad/material-dialogs#input-dialogs but didn't find any reference of that small detail. Do you think that's really necessary? or is it just a rare coincidence?\n. @afollestad Seems like the latest update .4.2 removed the feature of counting the prefill text as part of the total text to be entered? \nScreen capture here: https://goo.gl/8Xf84Y\n. ",
    "madhavc": "My current manifest settings: \nGradle\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:22.1.+'\n    compile 'com.android.support:recyclerview-v7:21.0.+'\n    compile 'com.android.support:cardview-v7:21.0.+'\n    compile 'com.parse.bolts:bolts-android:1.+'\n    compile fileTree(dir: 'libs', include: 'Parse-*.jar')\n    compile 'com.facebook.android:facebook-android-sdk:4.0.0'\n    compile 'com.squareup.picasso:picasso:2.5.2'\n    compile 'de.hdodenhof:circleimageview:1.2.2'\n    compile 'com.afollestad:material-dialogs:0.7.2.8'\n}\n. Fixed it!!! \n. ",
    "jhonvidal": "how?\n. ",
    "romanzes": "@jhonvidal http://stackoverflow.com/questions/29790070/upgraded-to-appcompat-v22-1-0-and-now-getting-illegalargumentexception-appcompa\n. ",
    "pardom-zz": "Thanks :+1: \n. ",
    "AllanWang": "Old thread, but if you'd like, an .inputAutoCorrect() option that will add TYPE_CLASS_TEXT and TYPE_TEXT_FLAG_AUTO_CORRECT seems to be a nice option. It's true that we should know to add the TYPE_CLASS_TEXT flag but it isn't very apparent in the javadocs when we know that auto correct doesn't happen without the auto correct flag.. @piotrek1543 That's fine. Thanks for the approval. @piotrek1543 Are you referring to the materialdialogs portion of the string name? It doesn't actually matter for developers as the strings are converted to all lower case when they request it. If you'd like I can make them upper case.. @piotrek1543 these strings were done by another user and I just copied them over. mit is a keyword used by the library to generate the license. You can see in the screenshot (which is updated) that it becomes \"MIT License\".\nIf there are any issues in the description of the app that can be updated. (Again, written by another user based on how MD was at the time). ",
    "afaucogney": "Hello,\nYes this was my intention. Why not ?\nWe can do that with traditional Dialog, as for example http://stackoverflow.com/questions/13334733/viewpager-fragmentpageradapter-inside-a-dialogfragment-gets-illegalargumentex \n. @afollestad ok thanks, so how can I do, if I can ? (eg getting the onTouchEvent)\n. Ok thanks it helped. OnShowListener wasn\u2019t so obvious to understand well in the Readme.\nNevertheless, is it possible to start with a void set of items ? I think not. null is not acceptable\nIf you put new Charsequence[]{\"\"}, it does display something void with the widget.\nHow to assign the items in the onShowListener, if nothing was applied before ?\n\nLe 14 sept. 2015 \u00e0 19:20, Aidan Follestad notifications@github.com a \u00e9crit :\nNot really sure what you mean. I just tested this and it works fine:\nnew MaterialDialog.Builder(this)\n        .title(R.string.socialNetworks)\n        .items(R.array.socialNetworks)\n        .itemsCallbackMultiChoice(new Integer[]{1, 3}, new MaterialDialog.ListCallbackMultiChoice() {\n            @Override\n            public boolean onSelection(MaterialDialog dialog, Integer[] which, CharSequence[] text) {\n                // TODO\n                return true;\n            }\n        })\n        .positiveText(R.string.choose)\n        .showListener(new DialogInterface.OnShowListener() {\n            @Override\n            public void onShow(final DialogInterface dialog) {\n                final Handler handler = new Handler();\n                new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        // Updates multi choice items after 2 seconds\n                        try {\n                            Thread.sleep(2000);\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                        final MaterialDialog md = (MaterialDialog) dialog;\n                        handler.post(new Runnable() {\n                            @Override\n                            public void run() {\n                                md.setItems(new CharSequence[] { \"Hello\", \"Test\", \"How are you?\" });\n                            }\n                        });\n                    }\n                }).start();\n            }\n        }).show();\n\u2014\nReply to this email directly or view it on GitHub https://github.com/afollestad/material-dialogs/issues/688#issuecomment-140149393.\n. this is not question to show or hide the dialog, but only the progressBar item. Sorry if it wasn\"t clear enough !\n. ok, you mean with something like that:\n\n```\npublic class MainActivity extends AppCompatActivity {\nint progress = 0;\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\nMaterialDialog.Builder dialogBuilder;\n\n\ndialogBuilder = new MaterialDialog.Builder(this)\n        .title(\"Super Dialog\")\n        .content(\"blananacldcla\")\n        .progress(false, 10)\n        .negativeText(\"NON\")\n        .positiveText(\"OK\")\n        .neutralText(\"RESET\")\n        .contentGravity(GravityEnum.CENTER)\n        .cancelable(false)\n        .autoDismiss(false)\n        .onNegative(new MaterialDialog.SingleButtonCallback() {\n            @Override\n            public void onClick(MaterialDialog materialDialog, DialogAction dialogAction) {\n                materialDialog.dismiss();\n            }\n        })\n        .onPositive(new MaterialDialog.SingleButtonCallback() {\n            @Override\n            public void onClick(MaterialDialog materialDialog, DialogAction dialogAction) {\n                if (progress < 10) {\n                    progress++;\n                }\n                update(materialDialog);\n            }\n        })\n        .onNeutral(new MaterialDialog.SingleButtonCallback() {\n            @Override\n            public void onClick(MaterialDialog materialDialog, DialogAction dialogAction) {\n                progress = 0;\n                update(materialDialog);\n            }\n        });\n\ndialogBuilder.show();\n\n}\nprivate void update(MaterialDialog dialog){\n    ((MaterialDialog) dialog).setProgress(progress);\n    if (progress == 10) {\n        ((MaterialDialog) dialog).getContentView().setVisibility(View.VISIBLE);\n        ((MaterialDialog) dialog).getProgressBar().setVisibility(View.GONE);\n    } else {\n        ((MaterialDialog) dialog).getContentView().setVisibility(View.GONE);\n        ((MaterialDialog) dialog).getProgressBar().setVisibility(View.VISIBLE);\n    }\n}\n}\n```\n. this still show the progress label (100%) ? I think this is an issue.\n. \n. @AzureusSme if what I said is not fair to ask, please just give me some knowledge that I can learn.\n. ",
    "sirvon": "@afaucogney did you ever get a viewpager in the dialog to fully work?\n. ",
    "Morteza-Rastgoo": "If autoDismiss is turned off, then you must manually dismiss the dialog in these callbacks. Auto dismiss is on by default.\n. This issue is happening with custom layout given to the .custom(View , boolean) method with the latest release (v0.8.5.0).This is my code:\n``` java\n        View dialogView = getLayoutInflater().inflate(R.layout.dialog_details, null, false);\n        mPriceDetailsDialog = new MaterialDialog.Builder(this)\n                .positiveText(R.string.ok)\n                .title(R.string.price_details)\n                .customView(dialogView, false);\n    questionMarkTextView.setOnClickListener(v -> mPriceDetailsDialog.show());\n\n```\nThe first time user clicks and tries to show the dialog it works fine but the secound time it crashes the app:\nGradle\n    java.lang.IllegalStateException: The specified child already has a parent. You must call removeView() on the child's parent first.\n            at android.view.ViewGroup.addViewInner(ViewGroup.java:4273)\n            at android.view.ViewGroup.addView(ViewGroup.java:4123)\n            at android.view.ViewGroup.addView(ViewGroup.java:4095)\n            at com.afollestad.materialdialogs.DialogInit.init(DialogInit.java:331)\n            at com.afollestad.materialdialogs.MaterialDialog.<init>(MaterialDialog.java:94)\n            at com.afollestad.materialdialogs.MaterialDialog$Builder.build(MaterialDialog.java:1289)\n            at com.afollestad.materialdialogs.MaterialDialog$Builder.show(MaterialDialog.java:1294)\n. ",
    "jitpack-io": "Nevermind then:)\n. @bleckfisk which version of Gradle are you using? Upgrading to 2.11 may help https://github.com/jitpack/jitpack.io/issues/423#issuecomment-181856675\n. ",
    "WojciechKo": "That was fast :)\nThanks for reply, it works like a charm\n. ",
    "OlegWock": "Sorry, I overlooked\n. ",
    "Xyaren": "Does this mean the EditText will still use the Holo style ? \nThere is no way to use a material style EditText ?\nMy accent color (R.attr.colorAccent) is set correctly.  (See buttons)\n\nIt worked a few weeks ago.\nAwesome API by the way :) \n. The handle is just a small bug i dont really care of.\nThe screenshot in't from lollipop though...\nThe screenshots are from JellyBean (4.4.4) and is showing a holo styled EditText (blue underline). The Material Style EditTextLooks different.\nThe first screenshot is from your example app , showing that it isn't an error within my own project.\n. I'm not using v21. Screenshots are made with my HTC running on API v19.\nThe v21 style.xml shouldn't do anything here. Please correct me if I'm wrong.\n\nFor Comparison:\nScrenshot from the v21 Emulator - Same activity & dialog\n(Keybord focus is not making a difference)\n\n. Any other EditText in my normal layout files, used in Fragments and AppCompActivites are working and having the material style with correct tinting.\n. provide me the updated sample apk and i'll test it on my HTC :)\n. Sounds great ! Thank your very much! \nAwesome API!\n. Can confirm it's working too.\n. ",
    "deinlandel": "I can confirm the reappearing of a dialog after orientation change (although I thought it was a DialogFragment bug). To work around this, I had to call DialogFragment.dismiss(); method in every dialog's button callback, and also override DialogFragment's method like this:\njava\n    /**\n     * You have to dismiss through fragment method, and you have to do it manually EVERYWHERE!\n     * \"onDismiss\" callbacks are NOT working for some reason.\n     */\n    @Override\n    public void onCancel(DialogInterface dialog) {\n        dismiss();\n        onDismiss(dialog);\n    }\n. Voting on this.\nOkay, maybe not the guidelines, but I simply CANNOT set dialog width to wrap_content, or to a fixed size. Even when using a custom view.\nAs a result, the dialog looks awful on tablets in landscape mode (a long, almost empty, white bar).\n. What about custom layouts? Is it possible to just \"wrap content\" for them?\n. What about the ability to set dialog width to \"wrap_content\"?\n. Here's the (ugly) workaround that fixes the behavior:\n``` java\n    @Override\n    protected void showDialog(Bundle state) {\n        super.showDialog(state);\n        MaterialDialog dialog = (MaterialDialog) getDialog();\n        dialog.setOnDismissListener(this);\n        dialog.getBuilder().callback(new MaterialDialog.ButtonCallback() {\n            @Override\n            public void onPositive(MaterialDialog dialog) {\n                onClick(dialog, DialogInterface.BUTTON_POSITIVE);\n            }\n        @Override\n        public void onNegative(MaterialDialog dialog) {\n            onClick(dialog, DialogInterface.BUTTON_NEGATIVE);\n            super.onNegative(dialog);\n        }                  \n    });\n}\n\n```\n. ",
    "Gybra": "After opening a dialog and then dismissing it, MaterialDialog does not remove che listeners as you can see from this hprof screenshot\n\n. So how can i free that resources? It keeps a strong reference on memory and it is not garbage collected. I already tried by simulating the GC event from Android Studio\n. ",
    "ponnex": "yaaaaaaaaaaaaaay! :D thanks for thiiiis! hehe\n. ",
    "AkshayPathak": "There is a weird color issue occurring on the last radio button after the update. It does not seem to change the exterior circle color like the rest of them. Your sample project also has this issue. \n. I don't think you understood what I was trying to say. Let me elaborate: when you click the single choice button on your sample application, the selected option is Instagram. When you click Twitter and then back to Instagram, the exterior circle stays green. The same happens with Google Plus. When you click Facebook and then Instagram, the color of the exterior circle stays grey. Is this intended? Thanks for your help.\n. Oh I see. The problem is on my end. Thanks so much though!\n. Ok thanks so much!\n. ",
    "JmzTaylor": "Yup.  Makes sense.  Thank you very much\n. ",
    "MuhamedFathy": "@afollestad I got it, but i need to add that image from BitMap because it's generated by the user, and your method only force me to assign a specified image!\nIs there anyway?!\n. I have updated to 2.0.0-rc7 but the issue still exist. Yeah I have downgraded to version 1.0.0 as this comment said and it's works, Thanks.. ",
    "azizimusa": "tried that. But the title  padding is still there.\n. ",
    "hendraanggrian": "@afollestad hey there, quick question, what about bottom padding?\n. ",
    "Jdruwe": "I am sorry I had nothing to do with your awesome library! I had to unregister otto in a different fragment (it was still reporting back to it and causing a nullpointer over there). Close pls\n. ",
    "Fleker": "That padding is for the title, although I'm not sure if it can be removed.\n. To add to the OP, if you use a custom view without any buttons, you'll get a similarly odd pattern on the bottom.\n. The requirement of AppCompatActivity conflicts with being able to use a LeanbackActivity for TV.\n. ",
    "ffallah": "Well, if there is no title, I don't think there should be a padding for it. especially if you are using a custom view.\n. Thank you for the update. I can confirm the issue is resolved.\n. ",
    "Murphybro2": "I raised an issue too regarding this, the owner said that's how it's intended to work\n. Why? Makes the alerts bigger than they need to be!\n. ",
    "RalucaPostelnicu": "Hello, i've seen that this issue has been fixed on may. But right now that extra spacing on a dialog with no title and buttons but a list, is still visible. Is it posibile to remove somehow that extra padding?\n. ",
    "mahdihs76": "in the last version (kotlin version 2.0.0) I have this padding. please help me.. ",
    "brianmuse": "Found this thread via search. Agree with @Murphybro2 that it is a little bit odd to be breaking parity with the native UI behavior. The padding sometimes feels awkward, especially with dialogs that do not have titles. \nFor example, is this how a time picker dialog is intended to look?\n\n. Ah, gotcha. Thanks for the speedy response, I'll look into updating the library!\n. ",
    "pasaneramusugoda": "Is there any plans to enhance the library for that or is there any workaround to get that done in the library?\n. Ok. thanks :+1: \n. ",
    "vijaykd": "What if I don't want to use AppCompat like for Galaxy Nexus (4.3) it is working...as I have to change lot of things in my project if I use AppCompat (Actionbar, Drawable etc)\n. Yes. I have already tried it and didn't work for me. Actionbar title doesn't show up properly. I have white background and black text in the existing and after I change everything - The actionbar becomes big, ActionBarDrawerToggle is looking for toolbar etc. :(\n. Hmm.. Let me check on it again! Thanks! Hope it works on existing without any issues. Thanks!\n. ",
    "Obsttube": "same for me...\n. ok, i've found it :)\n. ",
    "danielfaust": "Yes, even if it isn't explicitly in the spec, and, @afollestad I apologize for pointing out a wrong thing, I think that implementing this feature would be no waste of time, as it should only be a matter of time when the spec includes more info on this.\nIt looks so wrong on a tablet that I had to move over to a feature-reduced popup menu.\n. @diogo10 Thanks, I will check this out.\nOn a note aside, I noticed that on a Nexus 7 in the YouTube app the filter dialog for searches, the one that pops up when pressing the slashed triangle on the top right after entering a search allowing you to refine the search also expands itself to fill the screen, instead of wrapping the content.\nSo this may be a hint that Google hasn't yet taken enough care on defining the behaviour of the dialogs.\nIf the customView allows one to wrap the dialog's content as a workaround, then it may be better to wait until Google decides what to do.\n\n. @afollestad I tried using setVisibiliy. The problem that then comes up is that the dialog's dimensions change abruptly, as well as the location of the text within the dialog. It makes it feel buggy.\nSo I animated the alpha to hide the progress indicator slowly, which does look good and indicates a transition into a new state, but the text then has a large empty area to its side, which looks wrong, unbalanced.\nIdeally a fadeout of the progress indicator, together with an animated resize/relocate of the TextView would make it feel natural.\nBut as I didn't want to spend too much time on this issue, I opted to cancel the progess dialog and immediately create a new one with the result. That feels good, uninterrupted. But having the ability to morph a progress dialog into a normal text-based one would feel more efficient.\n. ",
    "traninho": "Same here. I cannot achieve a dialog's width to be wrapped by a content's width.\n. ",
    "diogo10": "I came across with this bug too....when I use a customView work well.\n. ",
    "freezy": "\nI am able to modify the dialog width by changing the insetRight and insetLeft attributes of the dialog\nbackground, so it is definitely possible to modify the width.\n\n@plusCubed: Got more detailed instructions how to do that?\nEDIT: Sorry, @ed the wrong one ;)\n. Thanks for the info. I thought it would somehow be possible without a modified build. I fiddled with MaterialDialog#getView() but couldn't get it to display at a given width.\nFuture solutions to this problem would be very welcome. Thanks for giving it a thought!\n. ",
    "josalvdel1": "Thank you for the work! But it still working in the bad way. Is there any workaround to solve this? What context do you suggest to use? Thank you!\n. ",
    "stelmik": "It not Samsung issue.\nTo reproduce:\nGo to Settings -> Developer options (set it to On),\nthen set Animator duration scale perference in Developer options section to value Off.\nAfter that you don't see any animated circles on this device (doesn't matter if it is Samsung, LG, emulator, etc). On all of devices you don't see the animated elements.\nMaybe it is possible to check above settings and try to solve it?\n. ",
    "rakshitsoni02": "In a sync task when i am showing progress dialog in pre execute  and in\npost method i call dismiss and  the dialog also dismiss that time and in\nautomatically visible again ,.\nOn 4 June 2015 at 23:53, Aidan Follestad notifications@github.com wrote:\n\nSorry I misunderstood what you said, initially. But I can't reproduce that\nissue. Are you using at least version 0.7.5.0?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/556#issuecomment-108998318\n.\n. Okay thanks\n\nOn Sunday, June 7, 2015, Aidan Follestad notifications@github.com wrote:\n\nThat's still not very clear.\nBut again, check that you're using a new version of the library. I've\nnever run into that issue.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/556#issuecomment-109638913\n.\n. \n",
    "edvardasast": "I use latest library version and HTC ONE with android version 5.0.2  I test it on Nexus5 with android 5.1 and there is no bug on nexus.\n. Android Version 5.0.2, Library Version 0.7.6.0. Problem was solved until\nhere?\nProblem still exist.\n. ",
    "richardaum": "@afollestad How is the accent color assigned to RadioButton?\n. Isn't there any kind of work around to make this display correctly? Overriding a method...\n. Is this a problemas with coloring radiobuttons natively or is this introduced by using Compat libraries?\n. ",
    "s73v3r": "Reversing the arguments probably isn't the way to go. But the point still stands: If I set a color in the builder, that should override a color set in the theme. \n. ",
    "harri35": "First time it was when the whole lib was removed and now this is the second time I have had to figure out the upgrade. You do understand how this breaks the whole point of JCenter repo if I can't trust the binary being there?\nIf you have unlimited space then maybe divide the binaries into releases and snapshots? And keep the releases as long as possible?\n. Hmm, looking at https://bintray.com/account/pricing?tab=account&type=pricing This says that OSS artifacts are completely free? So how is the storage limited then?\n. ",
    "mendhak": "If you are reaching a limit, it would be worth contacting them to get your storage limit extended: https://twitter.com/bintray/status/479648482530041857\nYou can also go through Sonatype and have your libraries published on Maven Central.  It's a lot of waiting but once you do it, it isn't too difficult from there onwards. \nHaving said that, the size of your files is trivial and you shouldn't be reaching these limits, I've got several large files up there and haven't hit any limit.  \nPlease understand that it is not trivial to keep updating a project's dependencies; it's not always a drop-in-replacement and quite often a juggling act of dependencies, which is why the trust factor is quite important. \n. ",
    "gintechsystems": "5.1.1 Nexus 6, it just sits there and does nothing, very strange. I was thinking it may be the device if anything but not sure how to resolve the issue.\n. That could be the issue, I am using this code:\njava\ndefaultLoginProgressDialog = new MaterialDialog.Builder(login_activity)\n                        .content(\"Authenticating...\")\n                        .progress(true, 0)\n                        .cancelable(false).build();\ndefaultLoginProgressDialog.show();\nImage:\nhttp://oi57.tinypic.com/1hec06.jpg\n. The radio buttons were created programmatically and not in XML. Maybe it has something related to that?\n. I am using 0.8.4.2, that is the latest?\n. Hmmm ok I will look into it more myself, thanks.\n. Is it possible to pass empty selected indexes? I think I may be passing -1 and it is crashing. Also sorry about the syntax highlighting, I am new to github comments still.\n. Yeah that is the issue, I didn't realize you could pass null. I am used to using -1 :P thank you for the help!\n. ",
    "AAverin": "Ok, so looks like we stuck without Material dialogs until Google fixes the library.\nWe can't use Design Support Library because of the bug in 22.2.0, and we can't use your library for the same reason=(\n. Depends on your implementation, but basically I started searching for the solution because v7.AlertDialog in 22.1.1 has a weird bug with a shadow.\n. ",
    "dinhhieuac": "I have a problem like you\nError:A problem occurred configuring project ':sample'.\n\nA problem occurred configuring project ':library_material_dialogs'.\nCannot access first() element from an empty List\n\nWhen you export apk from \nhttps://play.google.com/store/apps/details?id=com.afollestad.materialdialogssample\nYou using Eclipse or Android studio?\n. ",
    "or-dvir": "hi i am running into a similar issue (material dialogs version 0.9.6.0, eventbus version 3.1.1).\nmy error is \n```\nError:Execution failed for task ':app:preDebugBuild'.\n\nAndroid dependency 'com.android.support:appcompat-v7' has different version for the compile (26.1.0) and runtime (27.0.1) classpath. You should manually set the same version via DependencyResolution\n```\n\nany ideas how to solve?. same problem.\nLG v30 android 7\nmaterial dialog commons version 0.9.6.0. @afollestad doesn't work... here is my code:\n```java\n        final MaterialDialog.Builder builder = new MaterialDialog.Builder(this)\n                .title(R.string.addMultipleItems)\n                .titleColorRes(R.color.colorPrimary)\n                .cancelable(false)\n                .customView(v, true)\n                .autoDismiss(false)\n                .positiveText(R.string.add)\n                .negativeText(R.string.cancel)\n                .onAny(new MaterialDialog.SingleButtonCallback()\n                {\n                    @Override\n                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which)\n                    {\n                        if (which == DialogAction.POSITIVE)\n                        {\n                            if (atLeastOneEditTextHasInput(etList))\n                            {\n                                ArrayList newItemsNames = new ArrayList<>(etList.size());\n                            for (EditText et : etList)\n                            {\n                                newItemsNames.add(et.getText()\n                                                    .toString()\n                                                    .trim());\n                            }\n\n                            handleEvent(new EventMultipleItemsAdded(newItemsNames));\n                        }\n\n                        else\n                        {\n                            Toast.makeText(dialog.getContext(),\n                                           R.string.atLeastOneItemMustBeNamed,\n                                           Toast.LENGTH_LONG)\n                                 .show();\n                        }\n                    }\n\n                    dialog.dismiss();\n                }\n            });\n\n    builder.showListener(new DialogInterface.OnShowListener()\n    {\n        @Override\n        public void onShow(DialogInterface dialogInterface)\n        {\n            DialogUtils.showKeyboard(dialogInterface, builder);\n        }\n    }).show();\n\n```. doing it manually worked.\nperhaps you can consider adding this feature in your next release?. ",
    "stephanedupont": "Thank you!\n. Thank you!\n. Ok, thank you anyway, keep up the good work!\n. To be more accurate:\nif I use: \n.content(stringResId)\n\\n are not working. But if I use:\n.content(context.getResources().getString(stringResId))\nit works.. ",
    "peternguyen88": "Sorry, the issue is not from your lib :)\n. ",
    "jbmlaird": "@TheFinestArtist in case you didn't find a fix, I managed to do this by the below:\n```java\nMaterialDialog materialDialog = new MaterialDialog.Builder(activity)\n                .title(R.string.dialog_title)\n                .adapter(adapter, null)\n                .build();\nmaterialDialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE, WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE);\nmaterialDialog.show();\n//Set the dialog to immersive\nmaterialDialog.getWindow().getDecorView().setSystemUiVisibility(\n                activity.getWindow().getDecorView().getSystemUiVisibility());\n//Clear the not focusable flag from the window\nmaterialDialog.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE);\n```. ",
    "marlonbosse": "@afollestad The problem was that I didn't added support library for multidex and thus I got errors on pre 5.0 devices.\nThanks anyway!\n. ",
    "songbaoqiang": "compile ('com.afollestad:material-dialogs:0.7.6.0')\n. ",
    "georgikoemdzhiev": "That would be awesome. One workaround I used recently is setting the autoDismiss property of false and than to true (because I was using 2 dialogs. One of them was shown only if a button from the first one is pressed and  I wanted the first dialog to stay when the user is finished with the 2 dialog). I have sped quite mush time on trying to get this working. Adding such an option would be very nice, indeed!\n. By custom do you mean extending one of the dialogs of this library ? :)\n. Got it, thank you very much for your time. Keep up the good work :+1: \n. ",
    "SamuelGaona": "Yes, thats the right way. \n. It works fine with me too.\n. Not yet uploaded, i think.\n\n. +1\n. Omg, Slidenerd. \u2665\n. Yeah, i'm from youtube. Your videos are great. Keep up the nice work. Greetings from M\u00e9xico. :D\n. Slidenerd, for me its working fine with the last SDK Updates and the last build of Material Dialogs.\n\n. Yeah, could be some mess with the other dependencies. Hope you can make it work!\n. I think support v4 comes by default. I mean, i can use support v4 without adding it to the dependencies. \n. Omg.\n. +1\n. Already reported, guys: https://github.com/jitpack/jitpack.io/issues/444\n. Use Support Library 23.1.1 and 0.8.5.4 until Jitpack update its support library.\n. Already fixed: https://github.com/jitpack/jitpack.io/issues/444#issuecomment-188675840\n. Please update the library to the latest version 0.8.5.6\n. ",
    "ferrannp": "Hello @afollestad, on the other hand, we should not use setRetainInstance for a fragment that has UI. It should only be used with a fragment that returns null when onCreateView is called, if not, we can leak views. setRetainInstance is more meant for fragments that can do network operation for examples and then communicate it to an activity (so it does not need UI).\nTherefore, for me this still looks like a bug.\n. ",
    "Sivanga": "Same here - about 160 crashes only for the latest version. \nFor now we don't use this library for devices with Samsung brand.\n. @hzsweers We are using buildTools version 21.1.1\n. I'll check , thanks!\n. ",
    "skindstrom": "I can confirm this running CyanogenMod with version 5.0.2 on Samsung Galaxy S5.\nInterestingly enough it worked fine when I ran Samsungs own ROM, but after I flashed CM yesterday it stopped working.\n. @euri16 Did cancable work for you or not?\n. @euri16 I'm sorry, I was not paying attention to who opened it. My bad. What version of Android are you running?\n. @mtwn105 I would recommend using an AsyncTask and then dismiss it in onPostExecute.\n. I did some research, and it seems that Dialog.setCancelable only affects back-presses (this does not work on my device). If you want to make sure the user can not cancel the dialog by pressing outside the dialog you should use Dialog.setCanceledOnTouchOutside (this does work on my device).\nSo simply build the MaterialDialog with the builder and then call setCanceledOnTouchOutside on the created Dialog.\n. NOTE: I'm far from an Android wizard, so excuse me if I'm wrong.\nI've gone through the source code of DialogPreference and it seems that the object that you're getting a NullPointerException from is the mBuilder object. This object is only instantiated in the DialogPreference.showDialog() method, which means that it'll always be null when calling onCreateDialogView() (due to us overriding the showDialog() method). \nThis is the code of DialogPreference.onCreateDialogView():\n```\nprotected View onCreateDialogView() {\n        if (mDialogLayoutResId == 0) {\n            return null;\n        }\n    LayoutInflater inflater = LayoutInflater.from(mBuilder.getContext());\n    return inflater.inflate(mDialogLayoutResId, null);\n\n}\n```\nMy example solution would be to override the DialogPreference.onCreateDialogView() in your NumberPickerPreference class like this:\n```\n@Override\nprotected View onCreateDialogView() {\n     if(getDialogLayoutResource() == 0)\n             return null;\n //the mBuilder object is created with the context from getContext(), \n //so using getContext() here is the same thing as mBuilder.getContext()\n LayoutInflater inflater = LayoutInflater.from(getContext());\n return inflater.inflate(getDialogLayoutResource(), null);\n\n}\n```\nNOTE 2: The source code of DialogPreference that I looked through does not seem to be the same one you're using (which I noted thanks to line numbering). Hopefully this works though.\n. ",
    "mtwn105": "@afollestad please help me how to dismiss the material dialog's progress dialog when its operation is completed.\n. But there is no such method. I am showing dialog.show() & after operation is completed in background, I want dismiss the dialog. But there is no dialog.dismiss() method\n. Ok I am sending the code.\njava\n// operation started\nMaterialDialog.Builder dialog = new MaterialDialog.Builder(MainActivity.this);\ndialog.title=\"Operation Started\";\ndialog.content=\"Please Wait...\";\ndialog.progress(true,0);\ndialog.cancelable(false);\ndialog.show();\n// After some time when\n// Operation Completed\ndialog.title=\"Operation Completed\";\ndialog.neutraltext=\"Dismiss\"\ndialog.show();\nBut when I click Dismiss, the second dialog dismisses but first one can't.\n. Oh is it so simple. Thanks a lot for your time. Excellent libraries from\nyou.\nOn 30-Jun-2015 9:05 am, \"Aidan Follestad\" notifications@github.com wrote:\n\nMaterialDialog.Builder builder = new MaterialDialog.Builder(this)\n    .title(R.string.title)\n    .content(R.string.content)\n    .progress(true, 0)\n    .cancelable(false);MaterialDialog dialog = builder.show();// do work\ndialog.dismiss();\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/597#issuecomment-116934203\n.\n. \n",
    "euri16": "I ran that code in my HTC One, is not rooted nor have a third-party ROM.\n. @SimonKinds as you can see I was the one who opened this issue.\n. ",
    "DavidMont": "How do I change it ?\n. close #920 \n. I experienced the same issue, \ntried setting the same compile sdk version and build tools version same error. \nMaterial Dialogs version: 0.9.4.1\n    MIN_SDK_VERSION     = 15\n    COMPILE_SDK_VERSION = 25\n    TARGET_SDK_VERSION  = 23\n    BUILD_TOOLS_VERSION = '25.0.2'\n. ",
    "Remasky": "updated\n. @hzsweers nothing... the same colors as above\n. Do you think it can be caused by PreferenceFragment?\n. I delete android:textColor and color of \"Imi\u0119\" was also changed. Look at this.\nhttp://pastebin.com/ZWRj9zDT\n. Ok, I found it. Theme.Holo.Light was messing up. I changed to \"Theme.AppCompat.Light.NoActionBar\" and add Toolbar from AppCompatActivity - everything seems ok. Thanks for advice about \"themes/styles\".\n. ",
    "airstep": "+1 for dialog transparency\n. ",
    "ranieripieper": "Solution: \n```\nMaterialDialog dialog = new MaterialDialog.Builder(getContext()..content(R.string.content).build();\n// make dialog itself transparent\ndialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\n// remove background dim\ndialog.getWindow().setDimAmount(0);\ndialog.show();\n```\n. ",
    "eternalBlast": "Hello @ranieripieper i tried as you suggested. It not worked. But if i apply to alert dialog like usual. the background become transparent as well.. Hello @afollestad is there any way to set the header background full of width to a specified color? Please help. Thanks.. ",
    "candeiasdan": "Workaround solution i found was to use a custom view like in example - CUSTOM VIEW. \n. ",
    "adaneam": "Thanks it worked :)\n. ",
    "taimur97": "I tried creating two edittext views for two dialogs but if I click the cancel button and recreate the dialog the error is show again.\nI solved it by creating a layout for edittext and setting it as the view. \n. ",
    "colarking": "console :--> gradle assenbleDebug --debug --stacktrace\n13:02:46.044 [ERROR] [org.gradle.BuildExceptionReporter] \n13:02:46.045 [ERROR] [org.gradle.BuildExceptionReporter] FAILURE: Build failed with an exception.\n13:02:46.046 [ERROR] [org.gradle.BuildExceptionReporter] \n13:02:46.110 [ERROR] [org.gradle.BuildExceptionReporter] * What went wrong:\n13:02:46.110 [ERROR] [org.gradle.BuildExceptionReporter] A problem occurred configuring project ':library'.\n13:02:46.110 [ERROR] [org.gradle.BuildExceptionReporter] > Cannot access first() element from an empty List\n13:02:46.111 [ERROR] [org.gradle.BuildExceptionReporter] \n13:02:46.111 [ERROR] [org.gradle.BuildExceptionReporter] * Exception is:\n13:02:46.112 [ERROR] [org.gradle.BuildExceptionReporter] org.gradle.api.ProjectConfigurationException: A problem occurred configuring project ':library'.\n13:02:46.112 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.configuration.project.LifecycleProjectEvaluator.addConfigurationFailure(LifecycleProjectEvaluator.java:79)\n13:02:46.113 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.configuration.project.LifecycleProjectEvaluator.notifyAfterEvaluate(LifecycleProjectEvaluator.java:74)\n13:02:46.113 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.configuration.project.LifecycleProjectEvaluator.evaluate(LifecycleProjectEvaluator.java:61)\n13:02:46.113 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.project.AbstractProject.evaluate(AbstractProject.java:487)\n13:02:46.114 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.project.AbstractProject.evaluate(AbstractProject.java:85)\n13:02:46.114 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.execution.TaskPathProjectEvaluator.configureHierarchy(TaskPathProjectEvaluator.java:47)\n13:02:46.114 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.configuration.DefaultBuildConfigurer.configure(DefaultBuildConfigurer.java:35)\n13:02:46.115 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:129)\n13:02:46.115 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:106)\n13:02:46.115 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:86)\n13:02:46.115 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.exec.InProcessBuildActionExecuter$DefaultBuildController.run(InProcessBuildActionExecuter.java:90)\n13:02:46.116 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.tooling.internal.provider.ExecuteBuildActionRunner.run(ExecuteBuildActionRunner.java:28)\n13:02:46.116 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)\n13:02:46.116 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:41)\n13:02:46.117 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:28)\n13:02:46.117 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.exec.DaemonUsageSuggestingBuildActionExecuter.execute(DaemonUsageSuggestingBuildActionExecuter.java:50)\n13:02:46.117 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.exec.DaemonUsageSuggestingBuildActionExecuter.execute(DaemonUsageSuggestingBuildActionExecuter.java:27)\n13:02:46.117 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.cli.RunBuildAction.run(RunBuildAction.java:40)\n13:02:46.118 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.internal.Actions$RunnableActionAdapter.execute(Actions.java:169)\n13:02:46.118 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.cli.CommandLineActionFactory$ParseAndBuildAction.execute(CommandLineActionFactory.java:237)\n13:02:46.118 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.cli.CommandLineActionFactory$ParseAndBuildAction.execute(CommandLineActionFactory.java:210)\n13:02:46.119 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:35)\n13:02:46.119 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:24)\n13:02:46.119 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:206)\n13:02:46.119 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:169)\n13:02:46.120 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:33)\n13:02:46.120 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:22)\n13:02:46.120 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.Main.doAction(Main.java:33)\n13:02:46.120 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.bootstrap.EntryPoint.run(EntryPoint.java:45)\n13:02:46.121 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.bootstrap.ProcessBootstrap.runNoExit(ProcessBootstrap.java:54)\n13:02:46.121 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.bootstrap.ProcessBootstrap.run(ProcessBootstrap.java:35)\n13:02:46.121 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.launcher.GradleMain.main(GradleMain.java:23)\n13:02:46.121 [ERROR] [org.gradle.BuildExceptionReporter] Caused by: java.util.NoSuchElementException: Cannot access first() element from an empty List\n13:02:46.122 [ERROR] [org.gradle.BuildExceptionReporter]        at com.novoda.gradle.release.AndroidArtifacts$_javadocJar_closure2.doCall(AndroidArtifacts.groovy:24)\n13:02:46.122 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.ClosureBackedAction.execute(ClosureBackedAction.java:67)\n13:02:46.122 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.util.ConfigureUtil.configure(ConfigureUtil.java:130)\n13:02:46.122 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.util.ConfigureUtil.configure(ConfigureUtil.java:110)\n13:02:46.123 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.AbstractTask.configure(AbstractTask.java:492)\n13:02:46.123 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.project.AbstractProject.task(AbstractProject.java:874)\n13:02:46.123 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.Project$task$6.call(Unknown Source)\n13:02:46.123 [ERROR] [org.gradle.BuildExceptionReporter]        at com.novoda.gradle.release.AndroidArtifacts.javadocJar(AndroidArtifacts.groovy:21)\n13:02:46.124 [ERROR] [org.gradle.BuildExceptionReporter]        at com.novoda.gradle.release.AndroidArtifacts$javadocJar$0.callCurrent(Unknown Source)\n13:02:46.124 [ERROR] [org.gradle.BuildExceptionReporter]        at com.novoda.gradle.release.AndroidArtifacts.all(AndroidArtifacts.groovy:10)\n13:02:46.124 [ERROR] [org.gradle.BuildExceptionReporter]        at com.novoda.gradle.release.Artifacts$all.call(Unknown Source)\n13:02:46.125 [ERROR] [org.gradle.BuildExceptionReporter]        at com.novoda.gradle.release.ReleasePlugin$_attachArtifacts_closure1_closure3_closure4.doCall(ReleasePlugin.groovy:30)\n13:02:46.125 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.ClosureBackedAction.execute(ClosureBackedAction.java:67)\n13:02:46.126 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.AbstractPolymorphicDomainObjectContainer.create(AbstractPolymorphicDomainObjectContainer.java:61)\n13:02:46.126 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.PolymorphicDomainObjectContainerConfigureDelegate._configure(PolymorphicDomainObjectContainerConfigureDelegate.java:46)\n13:02:46.126 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.ConfigureDelegate.invokeMethod(ConfigureDelegate.java:73)\n13:02:46.127 [ERROR] [org.gradle.BuildExceptionReporter]        at com.novoda.gradle.release.ReleasePlugin$_attachArtifacts_closure1_closure3.doCall(ReleasePlugin.groovy:25)\n13:02:46.127 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.ClosureBackedAction.execute(ClosureBackedAction.java:67)\n13:02:46.218 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.util.ConfigureUtil.configure(ConfigureUtil.java:130)\n13:02:46.219 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.util.ConfigureUtil.configure(ConfigureUtil.java:91)\n13:02:46.219 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.AbstractNamedDomainObjectContainer.configure(AbstractNamedDomainObjectContainer.java:68)\n13:02:46.219 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.AbstractNamedDomainObjectContainer.configure(AbstractNamedDomainObjectContainer.java:24)\n13:02:46.220 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.ClosureBackedAction.execute(ClosureBackedAction.java:59)\n13:02:46.220 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.publish.internal.DefaultPublishingExtension.publications(DefaultPublishingExtension.java:48)\n13:02:46.220 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.publish.internal.DefaultPublishingExtension_Decorated.publications(Unknown Source)\n13:02:46.221 [ERROR] [org.gradle.BuildExceptionReporter]        at com.novoda.gradle.release.ReleasePlugin$_attachArtifacts_closure1.doCall(ReleasePlugin.groovy:24)\n13:02:46.221 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.ClosureBackedAction.execute(ClosureBackedAction.java:67)\n13:02:46.221 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.listener.ActionBroadcast.execute(ActionBroadcast.java:39)\n13:02:46.221 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.plugins.ExtensionsStorage$DeferredConfigurableExtensionHolder.configureNow(ExtensionsStorage.java:183)\n13:02:46.222 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.plugins.ExtensionsStorage$DeferredConfigurableExtensionHolder.get(ExtensionsStorage.java:162)\n13:02:46.222 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.plugins.ExtensionsStorage.getAsMap(ExtensionsStorage.java:50)\n13:02:46.222 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.plugins.DefaultConvention$ExtensionsDynamicObject.getProperties(DefaultConvention.java:168)\n13:02:46.222 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.CompositeDynamicObject.getProperties(CompositeDynamicObject.java:130)\n13:02:46.223 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.project.AbstractProject$4.create(AbstractProject.java:743)\n13:02:46.223 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.project.AbstractProject$4.create(AbstractProject.java:741)\n13:02:46.223 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.util.SingleMessageLogger.whileDisabled(SingleMessageLogger.java:166)\n13:02:46.224 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.api.internal.project.AbstractProject.getProperties(AbstractProject.java:741)\n13:02:46.224 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.internal.TaskManager.createPreprocessResourcesTask(TaskManager.java:576)\n13:02:46.224 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.internal.LibraryTaskManager$7.call(LibraryTaskManager.java:203)\n13:02:46.224 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.internal.LibraryTaskManager$7.call(LibraryTaskManager.java:200)\n13:02:46.224 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.builder.profile.ThreadRecorder$1.record(ThreadRecorder.java:48)\n13:02:46.225 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.internal.LibraryTaskManager.createTasksForVariantData(LibraryTaskManager.java:199)\n13:02:46.225 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.internal.VariantManager.createTasksForVariantData(VariantManager.java:433)\n13:02:46.225 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.internal.VariantManager$2.call(VariantManager.java:277)\n13:02:46.225 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.internal.VariantManager$2.call(VariantManager.java:274)\n13:02:46.225 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.builder.profile.ThreadRecorder$1.record(ThreadRecorder.java:48)\n13:02:46.226 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.builder.profile.Recorder$record.call(Unknown Source)\n13:02:46.226 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.builder.profile.Recorder$record.call(Unknown Source)\n13:02:46.226 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.internal.profile.SpanRecorders.record(SpanRecorders.groovy:69)\n13:02:46.226 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.internal.VariantManager.createAndroidTasks(VariantManager.java:273)\n13:02:46.226 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.BasePlugin$_createAndroidTasks_closure15.doCall(BasePlugin.groovy:481)\n13:02:46.227 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.BasePlugin$_createAndroidTasks_closure15.doCall(BasePlugin.groovy)\n13:02:46.227 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.internal.profile.SpanRecorders$2.call(SpanRecorders.groovy:52)\n13:02:46.227 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.builder.profile.ThreadRecorder$1.record(ThreadRecorder.java:48)\n13:02:46.227 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.internal.profile.SpanRecorders.record(SpanRecorders.groovy:54)\n13:02:46.227 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.BasePlugin.createAndroidTasks(BasePlugin.groovy:480)\n13:02:46.228 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.BasePlugin$_createTasks_closure13_closure17.doCall(BasePlugin.groovy:413)\n13:02:46.228 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.BasePlugin$_createTasks_closure13_closure17.doCall(BasePlugin.groovy)\n13:02:46.228 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.internal.profile.SpanRecorders$2.call(SpanRecorders.groovy:52)\n13:02:46.228 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.builder.profile.ThreadRecorder$1.record(ThreadRecorder.java:48)\n13:02:46.229 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.internal.profile.SpanRecorders.record(SpanRecorders.groovy:54)\n13:02:46.229 [ERROR] [org.gradle.BuildExceptionReporter]        at com.android.build.gradle.BasePlugin$_createTasks_closure13.doCall(BasePlugin.groovy:412)\n13:02:46.229 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.listener.ClosureBackedMethodInvocationDispatch.dispatch(ClosureBackedMethodInvocationDispatch.java:40)\n13:02:46.229 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.listener.ClosureBackedMethodInvocationDispatch.dispatch(ClosureBackedMethodInvocationDispatch.java:25)\n13:02:46.229 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.internal.event.BroadcastDispatch.dispatch(BroadcastDispatch.java:87)\n13:02:46.230 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.internal.event.BroadcastDispatch.dispatch(BroadcastDispatch.java:31)\n13:02:46.230 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)\n13:02:46.230 [ERROR] [org.gradle.BuildExceptionReporter]        at com.sun.proxy.$Proxy11.afterEvaluate(Unknown Source)\n13:02:46.230 [ERROR] [org.gradle.BuildExceptionReporter]        at org.gradle.configuration.project.LifecycleProjectEvaluator.notifyAfterEvaluate(LifecycleProjectEvaluator.java:67)\n13:02:46.230 [ERROR] [org.gradle.BuildExceptionReporter]        ... 30 more\n13:02:46.230 [ERROR] [org.gradle.BuildExceptionReporter] \n13:02:46.231 [LIFECYCLE] [org.gradle.BuildResultLogger] \n13:02:46.231 [LIFECYCLE] [org.gradle.BuildResultLogger] BUILD FAILED\n13:02:46.231 [LIFECYCLE] [org.gradle.BuildResultLogger] \n13:02:46.232 [LIFECYCLE] [org.gradle.BuildResultLogger] Total time: 14.469 secs\n13:02:46.255 [DEBUG] [org.gradle.api.internal.tasks.compile.daemon.CompilerDaemonManager] Stopping 0 compiler daemon(s).\n. ",
    "nguyenvancuongit": "Error:A problem occurred configuring project ':library'.\nCannot access first() element from an empty List\n@colarking sorry when troulbe you, how did you do to resolved this? thanks you\n. ",
    "xsorifc28": "<com.afollestad.materialdialogs.prefs.MaterialDialogPreference\n...\nalso does not work. \n. The issue with DialogPreference can be fixed by: \n``` java\n    public class CustomDialogPreference extends DialogPreference {\n    public CustomDialogPreference(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    @Override\n    protected void onDialogClosed(boolean positiveResult) {\n        super.onDialogClosed(positiveResult);\n        persistBoolean(positiveResult);\n    }\n}\n\n```\nWhen I extended MaterialDialogPreference, the onDilalogClosed wouldn't get called prior to v0.7.7\nHowever, \n``` java\n    public class CustomDialogPreference extends MaterialDialogPreference {\n    public CustomDialogPreference(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    @Override\n    protected void onDialogClosed(boolean positiveResult) {\n        super.onDialogClosed(positiveResult);\n        persistBoolean(positiveResult);\n    }\n}\n\n```\nwith the XML preference \nxml\n    <com.afollestad.materialdialogs.prefs.MaterialDialogPreference\n    ...\n    />\nworks just fine. \n. ",
    "mrkhozam": "My mistake about the latest version. I just updated gradle with it, but it still produces the same error.\nAfter seeing your insight, I tried setting an empty adapter (which is weird because I still set the dataset object to null) right after initializing the RecyclerView, like so:\nJava\nmRecyclerViewMyList = (RecyclerView) dialogView.findViewById(R.id.mylist);\nmRecyclerViewMyList.setLayoutManager(new LinearLayoutManager(getActivity()));\nmAdapterMyList = new MyListAdapter(null, R.layout.mylist_row, getActivity());\nAnd sure enough, this solved the problem. I apologize for the bother, but I never thought I had to set an adapter right after I inflate a RecyclerView. Usually since I have multiple conditions to check before doing so, I never set an empty adapter.\n. Thank you, sir!\n. ",
    "ianduke": "Yeah, sorry, I'm using version 0.7.5.1 of this library. Would this be fixed in the latest version?\n. Seems like this cast is still in the constructor in the latest version of the library, so it's likely still an issue. I'll update the library version for now, but I won't be able to provide another stack trace unless I get new crash reports from users.\n. ",
    "DIYwei": "I also meet this problem with the version \"0.8.5.9\".According to the infos from user,it happens on the device of SM-G900F and SM-G900M with 5.0 os.Can this issue have a better solution?Thank you.\nAnd I use \n MaterialDialog.Builder builder = new MaterialDialog.Builder(context)\n                .customView(getDialogLy, true)\n                .cancelable(isCancelable);\n\nThe exception info is :\nFatal Exception: java.lang.ClassCastException\ncom.afollestad.materialdialogs.internal.MDRootLayout cannot be cast to com.afollestad.materialdialogs.internal.MDRootLayout\ncom.afollestad.materialdialogs.MaterialDialog. (MaterialDialog.java:95)\ncom.afollestad.materialdialogs.MaterialDialog$Builder.build (MaterialDialog.java:1335)\ncom.arcsoft.perfect365.common.themes.dialog.DialogManager.createGetDialog (DialogManager.java:239)\n. Yes\uff0cthe amount of the issue is not a lot.So it doesn't happen every time.And the number of affected users is also acceptable. Thank you for replying.\n. It happened on some devices with Android 6.0.And is there one function for us to  forbidden the font\uff1fThank you.\n\nFatal Exception: java.lang.IllegalArgumentException: No font asset found for \n       at com.afollestad.materialdialogs.MaterialDialog$Builder.typeface(MaterialDialog.java:653)\n       at com.afollestad.materialdialogs.MaterialDialog$Builder.(MaterialDialog.java:522)\n       at com.***.***.DialogManager.createButtonDialog(DialogManager.java:163)\n       at com.***.***.MainActivity.onBackPressed(MainActivity.java:456)\n       at android.app.Activity.onKeyUp(Activity.java:2511)\n       at android.view.KeyEvent.dispatch(KeyEvent.java:2726)\n       at android.app.Activity.dispatchKeyEvent(Activity.java:2764)\n       at android.support.v7.app.AppCompatActivity.dispatchKeyEvent(AppCompatActivity.java:534)\n       at android.support.v7.view.WindowCallbackWrapper.dispatchKeyEvent(WindowCallbackWrapper.java:50)\n       at android.support.v7.app.AppCompatDelegateImplBase$AppCompatWindowCallbackBase.dispatchKeyEvent(AppCompatDelegateImplBase.java:241)\n       at com.android.internal.policy.PhoneWindow$DecorView.dispatchKeyEvent(PhoneWindow.java:2353)\n       at android.view.ViewRootImpl$ViewPostImeInputStage.processKeyEvent(ViewRootImpl.java:4659)\n       at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:4615)\n       at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4111)\n       at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4164)\n       at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4130)\n       at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:4276)\n       at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:4138)\n       at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:4333)\n       at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4111)\n       at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4164)\n       at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4130)\n       at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:4138)\n       at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4111)\n       at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4164)\n       at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4130)\n       at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:4309)\n       at android.view.ViewRootImpl$ImeInputStage.onFinishedInputEvent(ViewRootImpl.java:4479)\n       at android.view.inputmethod.InputMethodManager$PendingEvent.run(InputMethodManager.java:2330)\n       at android.view.inputmethod.InputMethodManager.invokeFinishedInputEventCallback(InputMethodManager.java:1934)\n       at android.view.inputmethod.InputMethodManager.finishedInputEvent(InputMethodManager.java:1925)\n       at android.view.inputmethod.InputMethodManager$ImeInputEventSender.onInputEventFinished(InputMethodManager.java:2307)\n       at android.view.InputEventSender.dispatchInputEventFinished(InputEventSender.java:141)\n       at android.os.MessageQueue.nativePollOnce(MessageQueue.java)\n       at android.os.MessageQueue.next(MessageQueue.java:328)\n       at android.os.Looper.loop(Looper.java:164)\n       at android.app.ActivityThread.main(ActivityThread.java:5728)\n       at java.lang.reflect.Method.invoke(Method.java)\n       at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:789)\n       at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:679)\n. ",
    "GYberkeley": "Ah yeah thanks. For some reason I was thinking there must be a method attached that would delay it but you're right, I could just wrap it into a handler. Sorry about that\n. ",
    "javaguy44": "I've confirmed this bug.\n- I've confirmed myself physically via a Galaxy S2 API 16.\n- Also a user sent me a screenshot where this failed on a Galaxy S4 mini API 19 (which prompted my investigation)\nI've narrowed it down, but after spending the last few hours through the source, I have to move on.  Hope what I've found helps:\n1.  using the default layout md_dialog_progress_indeterminate_horizontal.xml in a custom view works (make sure you pass false to wrap w/in scroll view).  Snippet:\njava\nMaterialDialog dialog = new MaterialDialog.Builder(v.getContext())\n        .customView(R.layout.md_dialog_progress_indeterminate_horizontal, false)\n        .show();\n1.  I modified md_stub_progress_indeterminate_horizontal.xml, and changed ProgressBar so that  minHeight was 20dp and layout_height was 20dp.  This did not solve the issue.  It appears that MDRootLayout is not respecting those heights; or the content height is not correct\n2.  I also modified MDRootLayout of md_dialog_progress_indeterminate_horizontal.xml to have a layout_height of 200dp, and this didn't work either.\nI can't say if it is Samsung specific, but certainly could be the case.  Indeterminate horizontal works fine on the following:\n- N7, N6, Moto G 2nd gen all running Lollipop 21 and 22\nI also found this which might help:\nhttps://github.com/DreaminginCodeZH/MaterialProgressBar/issues/1\nMy workaround for now is to use a MD customView with the DreaminginCodeZ/MaterialProgressBar library...which of course is not nice, but unfortunately I'm in a sprint and don't have the time -- mainly needed a workaround for the end user complaint.\nThanks and let me know if I can run anything else.\n. Great stuff.  Sorry I couldn't be of more help, but glad that library helped.\nBest and thanks for an awesome libray\n. ",
    "DreaminginCodeZH": "Hi, I'm the author of MaterialProgressBar, and I'm glad that my library helped.\nI've just updated my library this afternoon to provide a simple widget MaterialProgressBar which saves the boilerplate java code for setting the progress drawable, please feel free to integrate it.\nDetailed usage can be found in the updated README.\n. This should be the progurad issue DreaminginCodeZH/MaterialProgressBar#1, which is mentioned in #636.\nBecause ObjectAnimators call by reflection, we need to manually configure proguard to ignore these classes before we have the @Keep annotation, as in here. A notice can be added to the README of this project.\n. Just realized that you're not using the widget; then you need to do View.setLayerType() on API < 18 as in here.\n. This PR is blocked by updating to support libraries 26.0.2 (#1451).. ",
    "AshkanImmortal": "Hey, Thanks for great library, I will integrate soon.\nOn Wed, Sep 23, 2015 at 10:43 AM, Zhang Hai notifications@github.com\nwrote:\n\nHi, I'm the author of MaterialProgressBar\nhttps://github.com/DreaminginCodeZH/MaterialProgressBar, and I'm glad\nthat my library helped.\nI've just updated my library this afternoon to provide a simple widget\nMaterialProgressBar which saves the boilerplate java code for setting the\nprogress drawable, please feel free to integrate it.\nDetailed usage can be found in the updated README\nhttps://github.com/DreaminginCodeZH/MaterialProgressBar#using-widget.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/636#issuecomment-142517174\n.\n. So I should keep the index and next time user taps on button to open build the dialog again and set new index?\n. \n",
    "Rainer-Lang": "Sounds very interesting. \n. @Pirksy Often asked. Look at \"DialogFragment\".\n. You say that I should put my custom view in a ScrollView and then pass to material-dialogs?\nIs this right?\nCould you explain me the parameter \"wrapInScrollView\"?\n. Get well soon Aidan. Best wishes.\nI will look and try some ideas.\nThanks for your reply.\n. @vhenriques Search at github for FlexibleAdapter and then look at class EditItemDialog. There is slide in and out. Hope this helps you.\n. @casolorz Same issue here.. ",
    "NeverGivinUp": "Hey Aidan,\nThanks for looking at this. I could do this using a custom list adapter and a custom view, but it would be so much easier for me if you'd put android:gravity=\"top\" instead of android:gravity=\"center_vertical\" on the radio buttons in res/layout/md_listitem_singlechoice.xml. I don't think there would be an impact on existing views, which have only one line of text per item.\nWhy do you think I'm trying to do too much in a dialog. What option would you recommend for a single choice list with long items?\nThanks,\nNavid\n. ",
    "kaiwk": "Oh,Sorry,I found the solution,just close the issue.\n. ",
    "GavinPacini": "I understand. It is just that if you add a new TextWatcher to the EditText instance, the priority is lower than the default one. i.e. the one implemented by the default input callback.\nThis new method simply means any custom TextWatcher can be used with the highest priority. It's something I needed in my project however I understand it may not be needed by everyone. :) \n. ",
    "vnh1991": "i did search but didnt find much\nsorry tho for the noob question\ncheers for the great lib\n. ",
    "tigerhawkvok": "Hm .... could one of these be a culprit?\nxml\n    <style name=\"AppBaseTheme\" parent=\"MaterialNavigationDrawerTheme.Light.DarkActionBar\">\n        <!--\n            Theme customizations available in newer API levels can go in\n            res/values-vXX/styles.xml, while customizations related to\n            backward-compatibility can go here.\n        -->\n        <item name=\"md_dark_theme\">false</item>\n        <item name=\"colorPrimaryDark\">@color/MaterialTeal800</item>\n        <item name=\"colorPrimary\">@color/MaterialTeal500</item>\n        <!--<item name=\"colorPrimaryLight\">@color/MaterialLightPrimary</item>-->\n        <!--<item name=\"colorDivider\">@color/MaterialDivider</item>-->\n        <item name=\"colorAccent\">@color/MaterialDeepOrange500</item>\n        <!--<item name=\"colorAccentPressed\">@color/MaterialDeepOrange800</item>-->\n        <!--<item name=\"statusBarColor\"></item>-->\n    </style>\n    <style name=\"TitleText\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n        <item name=\"android:textColor\">@color/white</item>\n    </style>\n    <style name=\"AppTheme\" parent=\"AppBaseTheme\">\n        <!-- Customize your theme here. -->\n        <item name=\"android:textColor\">@color/black</item>\n        <item name=\"android:textColorSecondary\">@color/MaterialSecondary</item>\n        <item name=\"android:textColorPrimary\">@color/black</item>\n        <item name=\"actionBarTabTextStyle\">@style/TitleText</item>\n        <item name=\"toolbarElevation\">true</item>\n        <item name=\"rippleBackport\">true</item>\n        <item name=\"singleAccount\">true</item>\n    </style>\n. Fair enough.\n. ",
    "r0boto": "I think that this issue is related to the   buildToolsVersion 23.0.0 or compile 'com.android.support:design:23.0.0'. Because the last mentioned library was updated today. And without using the \nGradle\ndependencies {\n    compile 'com.afollestad:material-dialogs:0.7.9.1'\n}\nCan be whole project compiled without the exceptions. \n. @PGMacDesign  Thank You, it seems to be working for now but i hope that this issue will be resolved in next update.\n. ",
    "PGMacDesign": "I am having the same issue. It looks like it is related to the fact that the project references\n\"    \n",
    "slidenerd": "I confirm the presence of this error, thanks for your suggestions in advance\n\nThis would be my app's build.gradle file\n\n. AzureusSme, it seems you are from YouTube :+1: \n. thanks for the image AzureusSme, i am running into a GC overflow, there are some differences in your app vs mine, for starters you dont have the APT plugin, perhaps that is interfering with this whole transitive dependency thing? your fb sdk is 4.5, mine is 4.7, i also have realm and parceler in addition to this, when I remove this library from dependency , everything works , if I add this the build works but the execution doesn't. I could add this entire repo as a library project dependency and perhaps it would work that but that is kinda unfair in some cases depending on the T&C of the license under which developers build libraries. besides i ll have to replicate its transitive dependency as a library project as well and that is going to be a lot of headache to display 1 simple dialog :+1: lets see what the lib maker says\n. I think I found the error, appcompat v7 and support v4!!! i think it may fix this problem :1234: \n. That wasn't the problem either, I finally fixed, there were 2 issues, 1 the gradle build version was not uptodate, 2) i had to configure dexOptions to support 4g of ram in the javaMaxHeapSize, now its working :+1:  thanks for your help mate , I owe you one\n. ",
    "fangzhzh": "@afollestad hi, we found this problem on Lolipop\n. ",
    "creperju": "Woow!! It's works, thanks a lot!!\n. ",
    "brownidj": "Thanks for that - I hadn't updated my compileSdkVersion. Super quick response!\n. ",
    "srujanb": "Even I am having the same issue. Unable to find any way to resolve it. . ",
    "XinqingHappy": "me too \n**/MainActivity/build/intermediates/res/merged/release/values-v23/values-v23.xml:4: AAPT: Error retrieving parent for item: No resource found that matches the given name 'android:TextAppearance.Material.Widget.Button.Inverse'.\n**/MainActivity/build/intermediates/res/merged/release/values-v23/values-v23.xml:34: AAPT: Error retrieving parent for item: No resource found that matches the given name 'android:Widget.Material.Button.Colored'.\n**/MainActivity/build/intermediates/res/merged/release/values-v24/values-v24.xml:3: AAPT: Error retrieving parent for item: No resource found that matches the given name 'android:TextAppearance.Material.Widget.Button.Borderless.Colored'.\n**/MainActivity/build/intermediates/res/merged/release/values-v24/values-v24.xml:4: AAPT: Error retrieving parent for item: No resource found that matches the given name 'android:TextAppearance.Material.Widget.Button.Colored'.. ",
    "jehad-suliman": "its With Rtl because i tested it on 4.4 Samsung S5\nin English its perfect \nbut if you changed the language to Arabic or Hibro \nyou can see the deference \n. ",
    "mkonicek": "React Native requires API 16+, Gingerbread is API 10. Are you sure you're running the app on Gingerbread?\n. ",
    "balazsgerlei": "That's awesome, thank you!\n. ",
    "auchri": "Yes, I know.\nBut I made it, it wasn't as much copy/paste as I expected.\n. ",
    "nguyenhoangtoan1203": "I checked your source code, and i think android:paddingStart in textview of layout is root cause. It can make crashed on some devices < 17. My device is Samsung Galaxy Tab!\n. ",
    "akbarsha03": "Even if I set the \"Force RTL Layout\" in Developer option still it is crashing. @afollestad \n. @afollestad Yep, Apart from Activity layout android doesn't flip the layout for dialogs I guess\n. Thank you @afollestad :+1: :smiley: Waiting for the update.\n. @afollestad Thank you. Got the update :smile: \n. @deivitaka the project has been moved from bintray to jitpack. please add the following to your main project build.gradle\n```\nallprojects {\n    repositories {\n        jcenter()\n        maven { url \"https://jitpack.io\" }\n    }\n}\n```\nPlease check the release notes\n. ",
    "deivitaka": "Oh, I do have added them, but now that I checked I found out that I added them under buildscript. My bad!\n. ",
    "timrae": "@afollestad It would be appreciated if you could please stop deleting uploaded releases, as it breaks the build process. This is bad for our CI, and it's even worse for potential developers or hackers that want to compile our project from source.\n. Did you fix this bug in the new version, or you're just asking me to try it and see? If I update to 0.8.5.0 then it's going to try to force me to update to the latest support library, which has a bug that breaks my app. So I'm waiting for appcompat 23.1.1 before updating (and I don't want to jump through burning hoops excluding components in gradle)\n. thanks\n. Ah thanks.\nBtw, I just checked with 0.8.5 and had the same problem\n. > Call .alwaysCallMultiChoiceCallback() on the Builder, it will cause the selection callback to be invoked every time you select or unselect a checkbox. You can keep track of the booleans until the action button is pressed.\nYes as I mentioned, I already know that this fixes the problem, but it's not intuitive. According to the POLA your API users shouldn't have to scour through the documentation line by line to figure out how to get it to work.\nHow about deprecating alwaysCallMultiChoiceCallback() and adding a new method alwaysCallMultiChoiceCallback(boolean b) with the default set to true? Having the multi choice callback always called by default would be much more intuitive and would basically fix this issue.\n\nMake a call to doSomething(boolean, boolean) on the last line of your callback. The callback is currently only called right after you press the action button, so it would have the same effect. You can remove the use of onPositive and onNegative altogether.\n\nThis won't work for me because the dismiss() method in onNegative is a special method in my class that also dismisses the context menu that the dialog was called from. I need custom onPostive() and onNegative() methods.\nI doubt many people would want to not have the itemsCallbackMultiChoice called by default on every change of a checked state if that resulted in the checked states essentially getting ignored in the onPostive() onNegative() callbacks.\n. Sorry if I offended you, that wasn't my intention. Now that I've gotten my head around how you're intending it to be used, I can understand why you're saying that it's perfectly intuitive, but I have to disagree for the following reason:\nIn the docs you write that \"multiple choice list dialogs are almost identical to regular list dialogs\". But in the case of a list dialog we have a list and an action is taken in the onSelection() method when the list item is tapped. In the same way I'd expect the onSelection() method to be called whenever a checkbox item has been tapped, and tell me what the new checked state is, like an OnCheckedChangeListener in the standard Android API.\nSince tapping a checkbox and tapping the positive button are two completely different things, I'd expect the API to have two different methods for dealing with this. onSelection() for dealing with checkbox taps, and onPostive() for dealing with positive button taps. Instead you have an onPositive() method that you don't intend the user to use at all, and you have the onSelection() method doing what the onPositive() method should be doing.\nIf you think the way you're doing it is perfectly intuitive, nobody else has complained, and it's too much hassle to change then I understand, I just thought I'd try to explain why it's an unintuitive API for me. If you don't plan on changing it then maybe you could update the documentation a bit to mention that onPositive() is not intended to be used in general.\n. Ah I see, yeah I can imagine... No problem. Thanks!\nOn Sun, Jan 8, 2017 at 9:49 AM, Aidan Follestad notifications@github.com\nwrote:\n\nhttps://github.com/afollestad/material-dialogs/releases/tag/0.9.2.2\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/1245#issuecomment-271121135,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACsA4gubXlQAg3N7URo9voeANQSWp2kpks5rQDKhgaJpZM4LVfsG\n.\n. \n",
    "cooervo": "this worked for me:\nhttp://stackoverflow.com/a/32900570/4031815\n. ",
    "koesie10": "It should say @aar instead of @arr.\n. ",
    "jeetdholakia": "How did you guys figure this out? I can't get this to work...\n. Thanks,  i followed all of that , the problem was that i didnt add a maven dependency\n. ",
    "krazdax5": "Ok. Thanks for your quick response. I'll look into this and share the results.\n. Alright. It worked. I think I didn't see the line saying that the version 0.8 required the SDK 23. Fortunately, you were there! Thanks for your help.\n. ",
    "neelayak": "Hey I am using your and it really good  but I stuck with a problem as now the on attach method is deprecated then how can I use the file dialog in my app I tried the following code\n`   @Override\n      public void onAttach(Context context) {\n        super.onAttach(context);\n    context1=this.getActivity();\n}`\n\nand using the context but still i am getting the error I followed this link .. ",
    "TYZRPVX": "There is be an Error:Failed to find: com.afollestad.material-dialogs:commons:0.8.0.1 today.\n. ",
    "elsennov": "There is no recycler view, but I am using NavigationView from 'com.android.support:design:23.0.1'. Could it be a problem?\nYes i compiled the sdk using 23.0.1 version. There is no problem if i use 0.7.9.1\n. Have you tried alongside with com.android.support:design:23.0.1?\n. Here is the complete log, hope this help.\nGradle\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime: java.lang.NoClassDefFoundError: Failed resolution of: Landroid/support/v7/widget/RecyclerView;\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at com.afollestad.materialdialogs.internal.MDRootLayout.setUpDividersVisibility(MDRootLayout.java:424)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at com.afollestad.materialdialogs.internal.MDRootLayout.onLayout(MDRootLayout.java:343)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.View.layout(View.java:15686)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewGroup.layout(ViewGroup.java:4967)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.widget.FrameLayout.layoutChildren(FrameLayout.java:573)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.widget.FrameLayout.onLayout(FrameLayout.java:508)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.View.layout(View.java:15686)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewGroup.layout(ViewGroup.java:4967)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.widget.LinearLayout.setChildFrame(LinearLayout.java:1703)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.widget.LinearLayout.layoutVertical(LinearLayout.java:1557)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.widget.LinearLayout.onLayout(LinearLayout.java:1466)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.View.layout(View.java:15686)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewGroup.layout(ViewGroup.java:4967)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.widget.FrameLayout.layoutChildren(FrameLayout.java:573)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.widget.FrameLayout.onLayout(FrameLayout.java:508)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.View.layout(View.java:15686)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewGroup.layout(ViewGroup.java:4967)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewRootImpl.performLayout(ViewRootImpl.java:2076)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:1833)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:1058)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:5796)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.Choreographer$CallbackRecord.run(Choreographer.java:767)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.Choreographer.doCallbacks(Choreographer.java:580)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.Choreographer.doFrame(Choreographer.java:550)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:753)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.os.Handler.handleCallback(Handler.java:739)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.os.Handler.dispatchMessage(Handler.java:95)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.os.Looper.loop(Looper.java:211)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.app.ActivityThread.main(ActivityThread.java:5317)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at java.lang.reflect.Method.invoke(Native Method)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at java.lang.reflect.Method.invoke(Method.java:372)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1016)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:811)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:  Caused by: java.lang.ClassNotFoundException: Didn't find class \"android.support.v7.widget.RecyclerView\" on path: DexPathList[[zip file \"/data/app/com.aql.tabunginfaq.dev-1/base.apk\"],nativeLibraryDirectories=[/vendor/lib, /system/lib]]\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:56)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at java.lang.ClassLoader.loadClass(ClassLoader.java:511)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at java.lang.ClassLoader.loadClass(ClassLoader.java:469)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at com.afollestad.materialdialogs.internal.MDRootLayout.setUpDividersVisibility(MDRootLayout.java:424)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at com.afollestad.materialdialogs.internal.MDRootLayout.onLayout(MDRootLayout.java:343)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.View.layout(View.java:15686)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewGroup.layout(ViewGroup.java:4967)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.widget.FrameLayout.layoutChildren(FrameLayout.java:573)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.widget.FrameLayout.onLayout(FrameLayout.java:508)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.View.layout(View.java:15686)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewGroup.layout(ViewGroup.java:4967)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.widget.LinearLayout.setChildFrame(LinearLayout.java:1703)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.widget.LinearLayout.layoutVertical(LinearLayout.java:1557)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.widget.LinearLayout.onLayout(LinearLayout.java:1466)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.View.layout(View.java:15686)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewGroup.layout(ViewGroup.java:4967)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.widget.FrameLayout.layoutChildren(FrameLayout.java:573)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.widget.FrameLayout.onLayout(FrameLayout.java:508)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.View.layout(View.java:15686)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewGroup.layout(ViewGroup.java:4967)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewRootImpl.performLayout(ViewRootImpl.java:2076)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:1833)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:1058)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:5796)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.Choreographer$CallbackRecord.run(Choreographer.java:767)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.Choreographer.doCallbacks(Choreographer.java:580)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.Choreographer.doFrame(Choreographer.java:550)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:753)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.os.Handler.handleCallback(Handler.java:739)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.os.Handler.dispatchMessage(Handler.java:95)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.os.Looper.loop(Looper.java:211)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at android.app.ActivityThread.main(ActivityThread.java:5317)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at java.lang.reflect.Method.invoke(Native Method)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at java.lang.reflect.Method.invoke(Method.java:372)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1016)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:811)\u00a0\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:    Suppressed: java.lang.ClassNotFoundException: android.support.v7.widget.RecyclerView\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at java.lang.Class.classForName(Native Method)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at java.lang.BootClassLoader.findClass(ClassLoader.java:781)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at java.lang.BootClassLoader.loadClass(ClassLoader.java:841)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:     at java.lang.ClassLoader.loadClass(ClassLoader.java:504)\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:            ... 34 more\n09-21 02:01:49.665 26732-26732/com.aql.tabunginfaq.dev E/AndroidRuntime:  Caused by: java.lang.NoClassDefFoundError: Class not found using the boot class loader; no stack available\n. That's it, thanks man! It finally works, after i added 'com.android.support:recyclerview-v7' into my build.gradle.\nI saw on the build.gradle within the core, it's already included. But, why is it not included automatically after i added 'com.afollestad.material-dialogs:core:0.8.0.1@aar'? Hmmm.\n. @afollestad Yes, i have updated it. Thanks all!\n. ",
    "boivie-at-sony": "MDRootLayout.class, line 424:\n} else if(view instanceof RecyclerView) {\nIf the project doesn't include the recyclerview jar, this class isn't defined.\nSo right now, this project depends on \"com.android.support:recyclerview-v7\"\n. ",
    "nicholaswilde": "Thanks!\n. ",
    "yudhir": "Is it possible to have it display Files too. preferably through builder.  File is the common abstraction for both files and folder.\n. ",
    "SandroMachado": "In my case I can confirm it is a proguard issue. Adding -keep class com.afollestad.materialdialogs.** { *; } to my proguard-rules.pro fixed the issue. \n. Just this worked for me:\n-keep class com.afollestad.materialdialogs.internal.progress.** { *; }\n. Hum, not working here. \nThe indeterminate progress drawable stills not visible using the import with the commit hash. \n. @afollestad it is working fine for me (8d203ec223). \n. Great work :+1:\nThanks\n. ",
    "ashughes": "I am indeed using proguard and I can confirm that adding the proguard rule fixes this issue.\nIs it necessary to keep the entire library? Or is there a more targeted proguard rule that would suffice?\n. I haven't verified this, but the Google Play Services documentation makes it sound like they include their proguard rules in the library itself, so the implementing project does not need to. See the note below the table breaking down the different parts of Google Play Services on this page: https://developers.google.com/android/guides/setup\n\nNote: ProGuard directives are included in the Play services client libraries to preserve the required classes. The Android Plugin for Gradle automatically appends ProGuard configuration files in an AAR (Android ARchive) package and appends that package to your ProGuard configuration. During project creation, Android Studio automatically creates the ProGuard configuration files and build.gradle properties for ProGuard use. To use ProGuard with Android Studio, you must enable the ProGuard setting in your build.gradle buildTypes. For more information, see the ProGuard guide.\n. I'm still waiting for my gradle to sync so I can test it, but I was just looking at the commit and saw that you might have added more to build.gradle than is needed. I found these links:\n\nhttps://plus.google.com/+IanLake/posts/1HfDuFFkMXG\nhttps://gist.github.com/danielgomezrico/0e860960590af04d3a45\nIt sounds like all is needed for a library is that single consumerProguardFiles line. Rather than enabling proguard in both the debug and release builds.\nAlso, I saw that you changed the proguard rules. It seems like -keep class com.afollestad.materialdialogs.internal.progress.** { *; } would be the least \"intrusive\".\n. Hmm. The b65f1056b4 commit did not work for me.\n. I was reading http://stackoverflow.com/a/27052696/287575 and I'm wondering if the issue is because you're including minifyEnabled true. Can you try removing the buildTypes section and just add the single consumerProguardFiles 'proguard-rules.pro' line to defaultConfig and I can test that?\n. That worked! :)\n. From how I understand it, the consumerProguardFiles only needs to include the rules that are necessary for this library, no need to include proguard-android.txt as the application using the library will do this.\nAnd since -keep class com.afollestad.materialdialogs.internal.progress.** { *; } seemed to work before, I would suggest changing your proguard-rules.pro file to just include this line.\nHere's some more links I found on the topic from the Google team:\nhttp://stackoverflow.com/a/22639821/287575\nhttps://android.googlesource.com/platform/tools/build/+/ef84df96b7b1a26a96a37506d95e3d427ee830ed/tests/libProguardConsumerFiles\nhttps://groups.google.com/forum/#!topic/adt-dev/BUIV_FDpq28\nI would also suggest mentioning in your README that the proguard rules are taken care of by the library.\nI'm really excited that this is possible! Will make it much easier to deal with dependencies and proguard in the future.\n. Yup, it's working! :)\nI just had one more comment after looking through the commit. It shouldn't be necessary to reference progress-proguard.txt in the sample app's build.gradle since that's already done by the core library.\n. Yea, I only noticed because I happened to clear my local gradle cache and do a build, and all of a sudden I was depending on the new 23.2.0 support libraries.\nI imagine this is going to be a huge issue for a lot of people if the tags can't be fixed since any older builds now point to the latest version.\nThe temporary workaround is to reference specific commits instead...\n. Why was this closed? It still looks like all tags 0.8.5.6 and below point to the same commit (5383df8).\n. @abhijitnukalapati That's unfortunate. I'd love to hear the reasoning behind it. There's no benefit I can think of for changing the tags. Only confusion and unnecessary time spent debugging for many developers.\n. ",
    "zouliping": "No, it is still invisible. But the error log disapppeared.\n. @afollestad This is the newest result. All my test on your latest version 0.8.2.0.\nIn Nexus 7 with Android 5.1.1:\nIf I set parameters,  like md_background_color, md_title_color, md_content_color, md_positive_color, md_negative_color, md_widget_color, the drawable won't show.\nIf all parameters are not been set, the drawable is visible.\nAnd in MI 3 with Android 4.4.4:\nThe drawable is invisible whether the parameters was being set or not.\nHope these information would help.\n. @afollestad  Sorry, it would be my mistake. When data loads quickly(just one or two second), the drawable is going to show but the dialog is being dismissed. So it looks like the drawable is invisible. When data loads slowly, it is ok.\n. ",
    "doc-rj": "I'm seeing this as well:\nGradle\n09-28 10:32:31.340  10451               dalvikvm  E  Could not find class 'android.graphics.drawable.RippleDrawable', referenced from method com.afollestad.materialdialogs.MaterialDialog.getButtonSelector\n09-28 10:32:31.340  10451               dalvikvm  W  VFY: unable to resolve instanceof 183 (Landroid/graphics/drawable/RippleDrawable;) in Lcom/afollestad/materialdialogs/MaterialDialog;\n09-28 10:32:31.340  10451               dalvikvm  D  VFY: replacing opcode 0x20 at 0x006f\n09-28 10:32:31.340  10451               dalvikvm  E  Could not find class 'android.graphics.drawable.RippleDrawable', referenced from method com.afollestad.materialdialogs.MaterialDialog.getButtonSelector\n09-28 10:32:31.340  10451               dalvikvm  W  VFY: unable to resolve instanceof 183 (Landroid/graphics/drawable/RippleDrawable;) in Lcom/afollestad/materialdialogs/MaterialDialog;\n09-28 10:32:31.340  10451               dalvikvm  D  VFY: replacing opcode 0x20 at 0x00b3\n09-28 10:32:31.340  10451               dalvikvm  E  Could not find class 'android.graphics.drawable.RippleDrawable', referenced from method com.afollestad.materialdialogs.MaterialDialog.getButtonSelector\n09-28 10:32:31.340  10451               dalvikvm  W  VFY: unable to resolve instanceof 183 (Landroid/graphics/drawable/RippleDrawable;) in Lcom/afollestad/materialdialogs/MaterialDialog;\n09-28 10:32:31.340  10451               dalvikvm  D  VFY: replacing opcode 0x20 at 0x00f9\n09-28 10:32:31.340  10451               dalvikvm  I  Could not find method android.view.ViewGroup.<init>, referenced from method com.afollestad.materialdialogs.internal.MDRootLayout.<init>\n09-28 10:32:31.340  10451               dalvikvm  W  VFY: unable to resolve direct method 12587: Landroid/view/ViewGroup;.<init> (Landroid/content/Context;Landroid/util/AttributeSet;II)V\n09-28 10:32:31.340  10451               dalvikvm  D  VFY: replacing opcode 0x70 at 0x0001\n09-28 10:32:31.344  10451               dalvikvm  I  Could not find method android.widget.TextView.<init>, referenced from method com.afollestad.materialdialogs.internal.MDButton.<init>\n09-28 10:32:31.344  10451               dalvikvm  W  VFY: unable to resolve direct method 13446: Landroid/widget/TextView;.<init> (Landroid/content/Context;Landroid/util/AttributeSet;II)V\n09-28 10:32:31.344  10451               dalvikvm  D  VFY: replacing opcode 0x70 at 0x0000\n. Thanks. Will that commit make it into an \"official\" point release soon?\n. ",
    "bohoffi": "Thank you for your quick reaction :)\n. ",
    "daniele-athome": "Introducing strings.xml manually into exploded-aar leads to unpredictable behaviour such as mixing resource IDs and crashes :-(\n. A very dirty workaround for proguard:\nGradle\n-dontwarn com.afollestad.materialdialogs.color.**\nTo be used obviously only if you don't use the color picker dialog.\n. I'm sorry, I can't give you any more data right now. I'll reopen the issue if I can find out something. Thanks anyway.\n. I can't believe I've missed that. Thanks @romulof, I'll try it again later today.\n. Same issue here:\n```\nA problem occurred configuring project ':app'.\n\nCould not resolve all dependencies for configuration ':app:_googleplayDebugCompile'.\nCould not find material-dialogs:core:unspecified.\n     Searched in the following locations:\n         https://jcenter.bintray.com/material-dialogs/core/unspecified/core-unspecified.pom\n         https://jcenter.bintray.com/material-dialogs/core/unspecified/core-unspecified.jar\n         https://jitpack.io/material-dialogs/core/unspecified/core-unspecified.pom\n         https://jitpack.io/material-dialogs/core/unspecified/core-unspecified.jar\n         https://maven.fabric.io/public/material-dialogs/core/unspecified/core-unspecified.pom\n         https://maven.fabric.io/public/material-dialogs/core/unspecified/core-unspecified.jar\n         file:/home/daniele/repository/android/android-sdk/extras/android/m2repository/material-dialogs/core/unspecified/core-unspecified.pom\n         file:/home/daniele/repository/android/android-sdk/extras/android/m2repository/material-dialogs/core/unspecified/core-unspecified.jar\n         file:/home/daniele/repository/android/android-sdk/extras/google/m2repository/material-dialogs/core/unspecified/core-unspecified.pom\n         file:/home/daniele/repository/android/android-sdk/extras/google/m2repository/material-dialogs/core/unspecified/core-unspecified.jar\n     Required by:\n         androidclient:app:unspecified > com.afollestad.material-dialogs:commons:0.8.5.9\n```\n\nWith:\ndependencies {\n    compile 'com.afollestad.material-dialogs:core:0.8.5.9'\n    compile 'com.afollestad.material-dialogs:commons:0.8.5.9'\n}\nJitpack version worked (last tried with 0.8.5.6).\n. Downgrading to 0.8.5.8 for now.\n. Thanks for your efforts @audiultx but I don't see a big deal. Here is the diff between .8 and .9:\nhttps://github.com/afollestad/material-dialogs/compare/0.8.5.8...0.8.5.9\nI think I can afford building against .8 for a few days until @afollestad fixes it :-)\n. @audiultx I think this issue should stay open. Your fix is a workaround, importing MaterialDialogs directly via Maven still doesn't work, right?\n\nEDIT: late by 10 seconds :-) thanks!\n. He might just be not available right now. Remember guys this is not his job probably (or he's on vacation or something).\n. It's not a fix, it's still a workaround.\n. ",
    "romulof": "I'm having exactly the same problem here.\nWarning:com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: can't find referenced field 'int md_done_label' in program class com.afollestad.materialdialogs.commons.R$string\nWarning:com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: can't find referenced field 'int md_back_label' in program class com.afollestad.materialdialogs.commons.R$string\nWarning:com.afollestad.materialdialogs.color.ColorChooserDialog$Builder: can't find referenced field 'int md_cancel_label' in program class com.afollestad.materialdialogs.commons.R$string\nI also don't use the ColorChooserDialog, and It started after I manually deleted the build folders of my project/subprojects.\n. I just found out the problem. On readme.md you say:\nGradle\ndependencies {\n    compile('com.afollestad.material-dialogs:core:0.8.1.0@aar') {\n        transitive = true\n    }\n}\nand\nGradle\ndependencies {\n    compile('com.afollestad.material-dialogs:commons:0.8.0.1@aar') {\n        transitive = true\n    }\n}\nThe versions are mismatching, so I changed to 8.1.0 on both and problem solved.\n. ",
    "rshah": "I'm trying to make search dialog like in Google I/O 2015 app.\nLike in this screenshot.\nhttp://i.stack.imgur.com/sTgSN.jpg\nFor the content, i think it's possible to use custom view for the dialog.\nBut i'm not sure about the top part which contains \"Search session\". \nWether it should be a custom title view or make it part of the custom view as in the dialog content too.\n. I see, thank you very much.\n. I ended up with opening new progress dialog.\nThank you.\n. ",
    "riyaz": "Opps I missed @aar. Thanks\n. ",
    "gromiloff": "Found for decision:\n- create dialog on start activity and set check dialog for null:\n  @Override\n  public void onStart() {\n      super.onStart();\n      if(dialog== null) {\n              dialog = MaterialDialog.Builder.build()\n      }\n  }\n- remove create on resume\nbug is not reproduce more\n. try to move creating alert from onCreate to onStart or onResume as in my original case.\n. ",
    "hardikramoliya": "I have created dialog onCreate method : \nBuilder mdMash = new MaterialDialog.Builder(mContext)\n.title(\"Start Mash\").titleGravity(GravityEnum.CENTER)\n.contentGravity(GravityEnum.CENTER).cancelable(false)\n.content(\"\").positiveText(\"OK\").negativeText(null)\n.callback(new MaterialDialog.ButtonCallback() {\n@Override\npublic void onPositive(MaterialDialog dialog) {\n                        dialog.dismiss();\n    }\n    });\nmdMash.show();\nBut every time i got this error on only Android (6.0 - marshmallow). why this happens?\n10-13 19:32:53.357: W/System.err(25519): com.afollestad.materialdialogs.MaterialDialog$DialogException: Bad window token, you cannot show a dialog before an Activity is created or after it's hidden.\n10-13 19:32:53.357: W/System.err(25519):    at com.afollestad.materialdialogs.MaterialDialog.show(MaterialDialog.java:1375)\n10-13 19:32:53.357: W/System.err(25519):    at com.afollestad.materialdialogs.MaterialDialog$Builder.show(MaterialDialog.java:1360)\n10-13 19:32:53.358: W/System.err(25519):    at com.sessions.ACT_ActiveSession$ActiveSessionExpanDrawerAdapter$6.onClick(ACT_ActiveSession.java:4802)\n10-13 19:32:53.358: W/System.err(25519):    at android.view.View.performClick(View.java:5198)\n10-13 19:32:53.358: W/System.err(25519):    at android.view.View$PerformClick.run(View.java:21147)\n10-13 19:32:53.358: W/System.err(25519):    at android.os.Handler.handleCallback(Handler.java:739)\n10-13 19:32:53.358: W/System.err(25519):    at android.os.Handler.dispatchMessage(Handler.java:95)\n10-13 19:32:53.358: W/System.err(25519):    at android.os.Looper.loop(Looper.java:148)\n10-13 19:32:53.358: W/System.err(25519):    at android.app.ActivityThread.main(ActivityThread.java:5417)\n10-13 19:32:53.358: W/System.err(25519):    at java.lang.reflect.Method.invoke(Native Method)\n10-13 19:32:53.358: W/System.err(25519):    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)\n10-13 19:32:53.358: W/System.err(25519):    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)\n. ",
    "jjvargas": "I had the same problem,  I was using the ApplicationContext rather than the Activity itself as a Context. What is your mContext ?\n. ",
    "cyberrob": "With an activity containing fragment and the fragment showing the dialog like this\n```\n@Override\npublic void onResume() {\n    super.onResume();\n    if (loadingDialog == null) {\n        loadingDialog = UIUtils.getLoadingDialog(getActivity(), getString(R.string.api_loading), false);\n    }\n//if(isVisible())\nloadingDialog.show();\n\n}\n```\nFirst time the dialog will show, everything works fine. But the second time  loadingDialog.show(); will crash the app. \nWith breakpoint I found \n- the first time isVisible() is true \n- but second time isVisible() is false!  \nwhich is why the app crash. Add isVisible() check could be a solution.\n\nUpdate\nalso check isResumed() could be more robust. But problem is the loading dialog might NOT be showing after all...\n. ",
    "raquezha": "I've used \"NameOfActivity.this\" on context parameter and it worked!\n. ",
    "eleree": "@raquezha works for me.\n. ",
    "MSF-Jarvis": "@raqueza, thanks, worked for me too! I had been stuck on this for about a week lol\n. Thanks Aidan, I'll fix up my code.\n. ",
    "somehand": "I resolved it by confirm that Activity hasWindowFocus. because i only got the context, in the fragment, instead of exactly which Activity it is.\nif (((Activity) mContext).hasWindowFocus()) {\n            mDialog.show();\n        }\n. ",
    "pixelbendr": "try if(context instanceof Activity){ //show dialog}\n. Thanks for this.\nOn Thu, Oct 1, 2015 at 10:45 AM Kai Eckardt notifications@github.com\nwrote:\n\nTake a look at the Readme.md\n\"If autoDismiss is turned off, then you must manually dismiss the dialog\nin the callback. Auto dismiss is on by default.\"\nSet autoDismiss to false when creating the Dialog:\nMaterialDialog dialog = new MaterialDialog.Builder(getActivity())\n                .autoDismiss(false)\n                .build();\nLater you can close the dialog by calling dismiss on the instance:\nmaterialDialog.dismiss();\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/731#issuecomment-144692086\n.\n. Please one more thing, how do I show the keyboard when the dialog is showing.\n. ok. thanks\n. ok. thanks\n. \n",
    "tir38": "Looks like I'm not the first person to come across this: #701\n. ",
    "Servus7": "Take a look at the Readme.md\n\"If autoDismiss is turned off, then you must manually dismiss the dialog in the callback. Auto dismiss is on by default.\"\nSet autoDismiss to false when creating the Dialog:\njava\nMaterialDialog dialog = new MaterialDialog.Builder(getActivity())\n                .autoDismiss(false)\n                .build();\nLater you can close the dialog by calling dismiss on the instance:\njava\nmaterialDialog.dismiss();\n. This question is not specific for the material dialogs. Please try to find a solution using google or StackOverflow next time. For examle: http://stackoverflow.com/a/2418314\n. For me this doesn't seems to be fixed. I tried Version 0.8.5.8 with AppCompat v23.2.1 and AppCompat v23.3.0 and still got the errors.\n0.8.5.6 and AppCompat v23.2.1 is my combination for getting no errors.\n. @afollestad I'm so sorry. My drawable was in the wrong folder. After moving it from from drawable-nodpi to drawable everything works fine.\n. ",
    "mahmoud-elnaggar": "this line from README \n.itemsCallbackSingleChoice(-1, new MaterialDialog.ListCallbackSingleChoice() {\nfirst parameter is selected index but I'm using itemsCallbackSingleChoice that hasn't selectedIndex parameter so I asked about it \nit seems I'm using an older version , Right ?? \n. ",
    "JuneBuug": "I am trying to sync compile 'com.afollestad:material-dialogs:0.7.8.1', \nand android studio said that could not find the library. \nI already added jcenter() and maven { url \"https://jitpack.io\"} , but it still says . \nSo i tried to use upper version, which also gives me another error( could not use string sth. it occured in v23/values-23.xml).  . ",
    "thuantran293": "i am trying to sync compile 'com.afollestad.material-dialogs:core:0.9.4.4' \ni already do the same you, but android studio still could'n find the library. \ncould you help me?. ",
    "Naveentp": "compile('com.github.afollestad.material-dialogs:core:0.7.9.1@aar') {\n        transitive = true\n    }\nThis solved my issue. ",
    "trevorrjohn": "thanks, sorry I missed that in the readme. \n. No but the issue is some of us still depend on build tools 22 and 0.8.0 requires 23.\n. Sorry bad grammar. But because I am still dependent on api build tools version 22 and cannot upgrade yet, I am stuck on the older support library which 0.8.0 requires.\n. ",
    "seba123neo": "thanks ..now works !!! excellent library !!!\n. yes, I imagined that was the way, but ask just in case...\nI thought it was possible to add a control to the basic list, and use the adapter from the list that the library offers.\n. Thanks, you can close this issue...\n. ",
    "NielsMasdorp": "You're right, I just found out it seems as this happens on normal animations as well (not always though) very weird. I'll close this.\n. ",
    "bematthias": "Because I've struggled with the same question I would like to provide a possible solution or workaround for this.\nYou can do this by extending the MaterialDialog-Class and then use the getWindow().setAttributes(WindowManager.LayoutParams a)-Method.\nFor example in my case I needed a simple, small Loading-Dialog which locks the screen and just show a rotating intermediate progress inside without any text.\nTherefor I extended the MaterialDialog and called the Super-Constructor with the Progress-Definition. Then I altered the width in the LayoutParams of the Window and set the new LayoutParams. Keep in mind, that you have to define the width and height in pixels and so you have to convert your values.\npublic class LightLoader extends MaterialDialog {\n    public LightLoader(Context context){\n        super(new MaterialDialog.Builder(context).progress(true, 0));\n        ViewGroup.LayoutParams params = getWindow().getAttributes();\n        params.width = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, \n                                                       128, \n                                                       context.getResources().getDisplayMetrics());\n        getWindow().setAttributes((android.view.WindowManager.LayoutParams) params);\n        setCancelable(false);\n        this.show();\n    }\n}\nBy the way: Great library and thanks for your work!\n. ",
    "steven274": "I used emulator 5.0.1\n. ",
    "ishanthukral": "I'm running into the same issue. How were you able to resolve it? Thanks.\n. Weirdly enough, cleaning the project fixed the issue.\n. ",
    "ajalt": "No, it's not necessary at all. It just looks a little nicer. Feel free to close this if you're not a fan.\n. ",
    "krokyze": "@afollestad previously was having this on Galaxy S5, tested on Galaxy S3 and the same result. The thing is that cancellistner works, when I cancel the dialog, but it get's called on show() too.\n. ",
    "david145": "Yeah, that's the point, if I literally wrap my Layout in a Scrollview I get an error. But with your wrapInScrollView variable it works?\n\nIt seems the max height is reached, but I just can't scroll.\n. ",
    "Jawnnypoo": "Maybe try it with a NestedScrollView instead of a ScrollView?\n. All that needs to happen is to change the \ncompile project(':core') \nline should instead be \nprovided project(':core') \nThis way, the core dependency would be resolved when working on the library, but would need to be manually resolved/added by each person who uses the lib\n. Well, after trying out the provided solution, I take back what I said. Apparently this would work properly with pure Java libraries, but causes issues when the library is a .aar dependency\n. This PR broke compatibility, there should have been a major version bump to 0.9.5.0 or something if you are attempting to follow semantic versioning. ",
    "enricocid": "Try to add this to ListView:\nandroid:layout_height=\"0dp\"\nandroid:layout_weight=\"1\". exactly:)\n. thank You:)\n. Me too:( but I'm able to solve it by downgrading the lib.\nNo problem, i'm gonna keep the previous release for now:) \n. My bad then. Changing to  com.afollestad.material-dialogs:core:0.8.5.9 solved the issue\nthank you\n. ",
    "mmkgitpush456": "It continues to fail even with the most modern tools and libraries.  May I ask why this appears to be a recurring issue with the library?\n. The reason I ask is because I am inheriting a project that is utilizing this library. \nAdditionally, just as a reference, a blank android project will cause gradle to fail with the instructions provided in the README.  Are there any other configurations required besides the 2 steps listed?\n. Thanks, now it works.  The project is using an older version of the API.  The newest release seems to have some collisions with the styling, but that can saved for another day.  \nThe most important thing was just getting this guy to compile correctly.\nI greatly appreciate your assistance on this matter.\n. ",
    "MFlisar": "If you want to force using your own support library version, something like following works as well:\ncompile('com.afollestad.material-dialogs:core:0.8.2.0@aar') {\n    transitive = true;\n    exclude group: 'com.android.support', module: 'appcompat-v7';\n}\ncompile('com.afollestad.material-dialogs:commons:0.8.2.0@aar') {\n    transitive = true;\n    exclude group: 'com.android.support', module: 'appcompat-v7';\n}\nand include whatever suppor library version you need and want...\n. Just did not know what's the id of the icon...\nAnother solution would be to add something like following to the builder as an addition:\nbuilder.icon(64, new IImageLoader()\n    {\n        public void onImageViewReady(ImageView iv)\n        {\n            // load image into iv... \n        }\n    });\nBut your solution is good enough for me... Thanks\n. Update\nNow that the design library has the android.support.design.widget.BottomSheetDialog, maybe this point should be considered again?\n. I now converted this to use a ViewPager. You may try it out...\nQuestions\n\nthe ViewPager needs titles, otherwise it's hard to discover... this will really make it look ugly in landscape on phones because of the limited space... I could add the Tabs but I'm not sure... Here it would make sense to forcefully remove the title, but that's again not user friendly... Any ideas?\nI personally would prefer the button based solution, would you accept it as an additional function that I mark as deprecated?\n\nCommit solves following issue:\nhttps://github.com/afollestad/material-dialogs/issues/1627. So far, I added everything (incl. custom labels) and it does look good, although in landscape mode it does look good without title only imho\nAs explanation, why the WrapContentViewPager is necessary in portrait mode:\nIf you use a default ViewPager it will stretch the dialogs view to max height always, this one does take the height of it's biggest child instead and won't stretch the dialog's height. Last commit solves following two issues:\nhttps://github.com/afollestad/material-dialogs/issues/1635\nhttps://github.com/afollestad/material-dialogs/issues/1631\nAdditionally it solves a undesired behaviour I think: currently, when a dialog is created it checks if something is selected or not and enabled the positive button if something is selected only. After the selection has changed, it does not recheck this and always enable the positive button. My adjustment will change this and the button will check the allowEmptySelection flag to decide if the positive button should be enabled at start as well as when the selection changes. Can you please just run the code format correction (spotlessApply) on your side. Or tell my how I can pass the script a custom java path (it should use the JRE path from android studio, I have no JDK installed). I was looking for a spotless... gradle task, but did not find it the last time, did find it today though :-)\nTwo points are still open, the one functions long signature and the MaterialDialog.getString method which I would replace with a utility function before copying it, but this is your decision ;-). Have you tried your final version in landscape mode?\nI have following issues:\n\ncontent is not scrollable in landscape mode, neither the grid page nor the custom value page\ncontent padding seems smaller than in other dialogs to me - is this intended?\nyou removed the tab titles and replaced it with a dot indicator - the titles could be removed from the builder as well as from the resources I would say\n\nOther things:\n\nmaybe the EditText could be placed above of the color view in landscape mode to save space? Any reason why you are against the color view being at the left in landscape mode - which I personally would prefer for the sake of better space usage?\n\nmaybe it would make sense to add the default material color arrays to the library? Any reason why you did not add them? Most people will probably use the material colors for the color grid...\n. I know, still you removed functionality that was working and I would say it's better to have something that works and looks not that good than something that does not work (just talking about the landscape layout). While adding this I saw, that this indirectly is solved when following issue is solved: https://github.com/afollestad/material-dialogs/issues/1631. What do you think of this layout?\n\n\nno dot indicator in landscape to save space\n\nPreviewFrameView on the left to have more vertical space for the Seekbars\na button at the end of the grid to make the second page more discoverable for the user\nViewPager still stays active to swipe between pages\n\nShort 20s demo:\n\n. This is the top margin of the ColorChooser.Label style... Will remove it in the landscape layout...\nMade a pull request with this features. all done but checking RTL layout; we can add a mirrored RTL layout if desired, although it's no big problem if it looks the same in RTL mode.... I still would prefer accessibility of the ARGB sliders in landscape over a good optic... So better wrap it in a scrollview than not.... I know, but personally I like it for this scenario... Cancel buttons are deprecated as well I think (not 100% sure now), alternatively we could remove the cancel button and use it instead? Not that beautiful either... Any other suggestion?. Alternatively I could put the two layouts in a ViewPager instead. Would you prefer this?. Probably it is :-). will add this. done. will remove both setLayout methods, it's an artefact from the neutral button solution where the layout needed to be changed whenever the button was pressed, so the method made sense there. done as well. done as well, will adjust the other view getters a well. the IDE did this without me realising it ;-). done as well. Did not know this. So if I use or instead of || corrected ordering does not have any advantage, good to know. Why not change the extension function to a normal utility function instead? Then it could be exposed without polluting the dialog namespace... This seems like something that probably is used in all modules at some time.... Views could be put into an array like seekbars: Array<Seekbar> and textViews: Array<TextView>, but it's a private function only, I don't see any disadvantage in the long signature? Using an array would be ok though, if you prefer this.... No idea... The tabs could be disabled in landscape mode or the title could be ignored in landscape mode, both not that intuitive though... Currently it's the user's decision, he could provide a title in portrait mode only e.g..... Just realised, that this is wrong, probably you meant until ;-) ... is including the last value. it's needed by the adapter, so internal is the lowest valid visibility. ",
    "ex3ndr": "Insane. We are unable to release libs that dependent on this library anymore. Bye.\n. ",
    "goldmont": "Perfect!!!!! Thank you very much!\n. I found a bug! Also in root directory \"/\" the Dialog keep showing the three dots to get to parent folder. By pressing on them, the app crashes :)\n. Could you write an example please?\n. I solved by setting transitive = false\n. https://github.com/afollestad/material-dialogs#global-theming\n. See here\n. Also on my Galaxy S6 Flat the dialog occupies all the width.\nAndroid 6.0.1 and version 9.0.2.2. @afollestad Thank you so much.. ",
    "subspider": "Thanks for the tip it worked from v19 up @afollestad  and @plusCubed \n. Doesn't look like \n```\npublic Builder inputRange(@IntRange(from = 0, to = Integer.MAX_VALUE) int minLength,\n                                  @IntRange(from = 1, to = Integer.MAX_VALUE) int maxLength) {\n            return inputRange(minLength, maxLength, 0);\n        }\n    /**\n     * @param errorColor Pass in 0 for the default red error color (as specified in guidelines).\n     */\n    public Builder inputRange(@IntRange(from = 0, to = Integer.MAX_VALUE) int minLength,\n                              @IntRange(from = 1, to = Integer.MAX_VALUE) int maxLength,\n                              @ColorInt int errorColor) {\n        if (minLength < 0)\n            throw new IllegalArgumentException(\"Min length for input dialogs cannot be less than 0.\");\n        if (maxLength < 1)\n            throw new IllegalArgumentException(\"Max length for input dialogs cannot be less than 1.\");\n\n```\nBut i'm a bit confused you want to use this for length value or value range?\n. So I just created the styles to override the themes MD_Dark and MD_Light and colouring the actionMode . Can you tell me then what can I do ? I just wanted my ActionMode to have a darkBlue color.\nIn v21 styles I had this:\n``` xml\n\n        <item name=\"windowActionModeOverlay\">true</item>\n        <item name=\"actionModeStyle\">@style/--.ActionMode</item>\n        <item name=\"android:actionModeStyle\">@style/--.ActionMode</item>\n    \n<style name=\"MD_Dark\" parent=\"Theme.AppCompat.Dialog.Alert\">\n    <item name=\"windowActionModeOverlay\">true</item>\n    <item name=\"actionModeStyle\">@style/--.ActionMode</item>\n    <item name=\"android:actionModeStyle\">@style/--.ActionMode</item>\n</style>\n\n<style name=\"--.ActionMode\" parent=\"@style/Widget.AppCompat.ActionMode\">\n    <item name=\"titleTextStyle\">@style/ActionMode.--.Title</item>\n    <item name=\"subtitleTextStyle\">@style/ActionMode.--.Subtitle</item>\n    <item name=\"android:titleTextStyle\">@style/ActionMode.--.Title</item>\n    <item name=\"android:subtitleTextStyle\">@style/ActionMode.--.Subtitle</item>\n    <item name=\"background\">@color/dodger_blue</item>\n    <item name=\"android:background\">@color/dodger_blue</item>\n    <item name=\"actionModeBackground\">@color/dodger_blue</item>\n    <item name=\"android:actionModeBackground\">@color/dodger_blue</item>\n</style>\n\n<style name=\"ActionMode.--.Title\" parent=\"@style/TextAppearance.AppCompat.Widget.ActionMode.Title\">\n    <item name=\"android:textColor\">@android:color/transparent</item>\n</style>\n\n<style name=\"ActionMode.--.Subtitle\" parent=\"@style/TextAppearance.AppCompat.Widget.ActionMode.Subtitle\">\n    <item name=\"android:textColor\">@android:color/transparent</item>\n</style>\n\n```\n. ",
    "edellepi": "Thank you,\nbut the point is that my custom layout is apparently ignored.\n\nOn 19 Oct 2015, at 19:40, Aidan Follestad notifications@github.com wrote:\nhttp://stackoverflow.com/a/16109336/309644 http://stackoverflow.com/a/16109336/309644\n\u2014\nReply to this email directly or view it on GitHub https://github.com/afollestad/material-dialogs/issues/776#issuecomment-149292974.\n. \n",
    "carmas123": "You can handle onBackPressed on activity caller.\nIl domenica 25 ottobre 2015, steven274 notifications@github.com ha\nscritto:\n\nI want to show a series of dialog, when user click back button on second\ndialog, it will show first dialog again.\nThanks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/787.\n. \n",
    "hristorv": "This issue happens on Android 5.0.1 , 4.2 and 4.4 , i have tested it on real devices and that bug happens on all of them. On 5.0.1 there is even more bugs when you select radio buttons.\nThis is most likely caused by loosing the \"last selected\" on recreation, and after selecting new radio button the old one doesnt get cleared.\n. For all Android versions there is a bug, when you rotate the device and select another radio button the previous one does not reset. In the MaterialDialog.class in the method onItemClick(), where you uncheck the previous item you need to add adapter.notifyDataSetChanged() after you use setChecked(false). That will fix the issue.\nAs for 5.0.1 issue, we can easiliy fix it with using       android:button=\"@drawable/abc_btn_radio_material\"\nIn the radio button in md_listitem_singlechoice. This is hard coding the drawable, but this should not be a problem of any kind. I hope this helps anyone else who is trying to fix those issues.\n. ",
    "Najibsaurus": "it will happen when you dont reset the progress of material dialog.\nset progress a nil value while dismiss() method.\nmaterialDialog.setProgress(0);\n. ",
    "JenyaKirmiza": "thanks. I don't like eclipse either, but anyway the friend of mine asked me to add this awesome dialogs to eclipse. So thanks for help  i will search for solution in former issues about eclipse\n. ",
    "programmer-lucas": "Ok. I'm waiting. Thanks for your reply.\n. Thank you. I need to do something else besides using the library to have available javadoc? Are all methods and classes that are documented?\n. ",
    "DurgaArunkumarSmitiv": "Hi I need to uncheck a single checkbox  alone if some other item is selected. Example everyday,Monday Tuesday etc.. Initially everyday is checked by default,now if i check Monday ,Everyday should be unchecked.I couldnt find any OnCheckedChangeListener.Kindly help me how can we do this.. ",
    "alexsmithfanning": "I'm pretty sure that some old versions had it. I remember seeing it at some point.\n. I don't really think its an issue either, but it adds more of the \"material experience\" with shadows.\nI do have to admit, it still looks damn good.\n. ",
    "iampawan": "Thanks i did it... Awesome library bro\n. Using this:\njava\nnew ColorChooserDialog.Builder(this, R.string.color_palette)\n    .allowUserColorInput(false)\n    .customButton(R.string.md_custom_label)\n    .presetsButton(R.string.md_presets_label)\n    .show();\nOr:\njava\nnew ColorChooserDialog.Builder(this, R.string.color_palette)\n    .allowUserColorInput(false)\n    .titleSub(R.string.colors)\n     .preselect(primaryPreselect)\n    .show();\n. When not using allowUserColorInput(false) it's working perfectly\n. I'm using 8.4.2\n. Updating helped ... :) Thanks a lot\n. hahahaha ... well i know this is very difficult to produce any issue in this awesome library ..\nThanks to u ;)\n. @afollestad thank you !!!\n. Can you tell me what can be the problem ?   @afollestad \n. ",
    "filipebezerra": "My quick solution until this bug isn't fixed was: I created another FolderChooserDialog class with the same code, the only difference is:\n- I included if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) before checking if READ_EXTERNAL_STORAGE was granted.\nAnyway this checking it's right, since READ_EXTERNAL_STORAGE was introduced in KitKat (API 19).\nThe final onCreateDialog() is:\n``` java\n@SuppressWarnings(\"ConstantConditions\")\n@NonNull\n@Override\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n            if (ActivityCompat.checkSelfPermission(getActivity(),\n                    Manifest.permission.READ_EXTERNAL_STORAGE) !=\n                    PackageManager.PERMISSION_GRANTED) {\n                return new MaterialDialog.Builder(getActivity())\n                        .title(R.string.md_error_label)\n                        .content(R.string.md_storage_perm_error)\n                        .positiveText(android.R.string.ok)\n                        .build();\n            }\n        }\n    if (getArguments() == null || !getArguments().containsKey(\"builder\"))\n        throw new IllegalStateException(\n                \"You must create a FolderChooserDialog using the Builder.\");\n\n    if (!getArguments().containsKey(\"current_path\"))\n        getArguments().putString(\"current_path\", getBuilder().mInitialPath);\n\n    parentFolder = new File(getArguments().getString(\"current_path\"));\n    parentContents = listFiles();\n\n    return new MaterialDialog.Builder(getActivity())\n            .title(parentFolder.getAbsolutePath())\n            .items(getContentsArray())\n            .itemsCallback(this)\n            .onPositive((dialog, which) -> {\n                dialog.dismiss();\n                mCallback.onFolderSelection(parentFolder);\n            })\n            .onNegative((dialog, which) -> dialog.dismiss())\n            .autoDismiss(false)\n            .positiveText(getBuilder().mChooseButton)\n            .negativeText(getBuilder().mCancelButton)\n            .build();\n}\n\n``\n. Thanks\u00b2\n. It works fine, and when I rungradle -q dependencies`:\n\nThank you.\n. Hi @alexwhb , you can include the dependencies as follows:\nGradle\ncompile (com.github.afollestad.material-dialogs:core:0.8.5.0@aar) { transitive = true }\ncompile (com.github.afollestad.material-dialogs:commons:0.8.5.0@aar) { transitive = true }\n. ",
    "alexwhb": "I am getting this exception too. But @filipebezerra your temp fix worked for me too, so thank you for that. \n. @filipebezerra worked perfectly! Thank you so much! much cleaner solution. :+1: \n. @afollestad I did. That was a stupid oversight on my part. I did not see this in the docs: {transitive=true}\n. ",
    "ibu2710": "# Still now i am getting the error help me out...\nFATAL EXCEPTION: main\n                                                               Process: com.appgodz.evh, PID: 5523\n                                                               java.lang.NoClassDefFoundError: me.zhanghai.android.materialprogressbar.IndeterminateCircularProgressDrawable\n                                                                   at com.afollestad.materialdialogs.DialogInit.setupProgressDialog(DialogInit.java:468)\n                                                                   at com.afollestad.materialdialogs.DialogInit.init(DialogInit.java:353)\n                                                                   at com.afollestad.materialdialogs.MaterialDialog.(MaterialDialog.java:94)\n                                                                   at com.afollestad.materialdialogs.MaterialDialog$Builder.build(MaterialDialog.java:2183). ",
    "mladenrakonjac": "I am still getting same error:\njava.lang.NoClassDefFoundError: Failed resolution of: Lme/zhanghai/android/materialprogressbar/IndeterminateProgressDrawable;\n                                                                     at com.afollestad.materialdialogs.DialogInit.setupProgressDialog(DialogInit.java:369)\n                                                                     at com.afollestad.materialdialogs.DialogInit.init(DialogInit.java:297)\n                                                                     at com.afollestad.materialdialogs.MaterialDialog.<init>(MaterialDialog.java:96)\n                                                                     at com.afollestad.materialdialogs.MaterialDialog$Builder.build(MaterialDialog.java:1335)\n                                                                     at com.afollestad.materialdialogs.MaterialDialog$Builder.show(MaterialDialog.java:1340)\nThis is how I added it:\ncompile('com.github.afollestad.material-dialogs:core:0.8.5.1@aar'){\n        transitive = true\n    }. ",
    "adamvarhegyi": "At the time i posted there was 0 duplicates, and now also zero topics open about this problem.\nI will report to jitpack.\n. ",
    "roshaplus": "compile 'com.afollestad.material-dialogs:core:0.8.6.1'\n    compile 'com.afollestad.material-dialogs:commons:0.8.6.1'.  compile 'com.afollestad.material-dialogs:core:0.8.6.1'\n    compile 'com.afollestad.material-dialogs:commons:0.8.6.1'. ",
    "stanleyguevara": "Yep, on devices with small screen, and what's more important on larger ones in landscape mode.\nmd_stub_colorchooser_grid.xml is scrollable and looks good in both orientations.\nMaybe another layout for landscape with vertical bars to the right of current color and EditText would be more appealing, but AFAIK vertical seekbars are kind of a pain to implement.\n. ",
    "casolorz": "Thanks, I'll test that.\n. I haven't tried again, I'll give it a try tomorrow and let you know. \n. Sadly that didn't help me. It is very strange. I can see your stuff under exploded-aar but when compiling Android Studio just can't find your classes. \n. Got it fixed. It wasn't even getting to proguard, it was all compiler errors on all afollestad classes but the errors went away once I removed an import for com.afollestad.materialdialogs.internal.progress.IndeterminateProgressDrawable, which I'm not using anymore. \nThanks for the help.\n. Just got this error as well. Guess I'll go back to 23.1.1\n. ",
    "tellfa": "please send me link to tutorial. tnx\n. ",
    "iad24": "Hi @afollestad great lib here. The example on the custom font u have in the front page is thru themes. Is it possible to configure the fonts per dialog? and not using the theme?. ",
    "JasperG": "Because; A couple of lines later, .customView() may be called, which will throw an exception if content has been set.\nAnd, on top of that, the call to customView() is in an if/else that sets content after all, if no customView is set.\n. -- Just noticed the exact same issue in some other files. ( ex. MaterialListPreference )\nWould you like me to patch?\n. ",
    "longxianlin": "allprojects {\n    repositories {\n        jcenter()\n        maven {\n            url \"https://jitpack.io\"\n        }\n    }\n}\nthen solved\n. ",
    "RolonGabriel": "please read all discution, especially comment number 3 and up\nhttps://code.google.com/p/android/issues/detail?id=22576\n. please read all discution, especially comment number 3 and up\nhttps://code.google.com/p/android/issues/detail?id=22576\n2015-11-23 17:34 GMT-03:00 Aidan Follestad notifications@github.com:\n\nThis is one of the most unspecific issues I've ever had reported. This\nisn't a problem with my library.\nYour app is probably using a different version of AppCompat (older) than\nwhat this library uses.\nhttp://stackoverflow.com/questions/32441420/attribute-barlength-has-already-been-defined\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/841#issuecomment-159056341\n.\n. \n",
    "AkshayChordiya": "@afollestad Your welcome and are the best!\n. @afollestad Sweet!\nEDIT: When is this new version coming?\n. @afollestad When is v0.8.5.3 coming?\n. @jmartingit Seems nice. Make a pull request so that @afollestad can easily add it into the library.\n. @muratogat The workaround for this library to work is\n1. Use AppCompat v23.2.1\n2. Use material-dialog library with version 0.8.5.5\nI have used it and the app doesn't crash on any Android version.\n. Workaround till the library is updated\n1. Use AppCompat v23.2.1\n2. Use material-dialog library with version 0.8.5.5\nI have used it and the app doesn't crash on any Android version.\n. I'm also facing this issue. Any workaround for this issue?\n. ",
    "Morocat": "This issue was caused by the resolution to issue #848 which removed the super.onDismiss() call. The super function calls onDialogClosed(), which is what triggers the onChange listener.\n. Once a dialog is dismissed it is destroyed so you will need to save which item was selected in a variable somewhere. Calling setSelectedIndex() from within the itemsCallback is redundant, as the item has already been selected and is generally used before the dialog is created. Once you've saved that index value, you can then use it in place of the 0 you're currently using.\n. Well when I loaded it up this morning it began working fine and I've been unable to reproduce the issue. The error must have been on my end so I'm closing this issue for now.\n. This thread might be helpful for anyone still struggling with vector drawables:\nhttp://stackoverflow.com/questions/35693288/android-studio-1-5-1-could-not-find-property-vectordrawables\n. Try the following code:\njava\n    MaterialDialog d = [mdBuilderInstance].build();\n    d.getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM,\n                WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n    d.show();\nTaken from http://stackoverflow.com/questions/27817783/show-dialog-infront-of-keyboard\n. Not working on API >21, closed until fixed.\n. Could you elaborate more on this? Are you adding a MaterialProgressBar to a custom view in a dialog? Post some code so we can help.\n. Two immediate things that pop out:\n1. By calling customView(R.layout.select_category_layout, true) you are wrapping your ListView in a scrollable container, something you should never do.\n2. Material Dialogs 0.8.1.0 is quite old. Update to the latest version 0.8.5.8 and try again.\n. This happens from a variety of causes. I would suggest searching google for the error message and finding a post relevant to your issue. I get this message as well from time to time but it does not seem to cause any issues with my app.\n. if (!Utils.isEmpty(negativeButtonTxt)) {\n        materialBuilder.negativeText(negativeButtonTxt);\n    }\n    if (!Utils.isEmpty(positiveButtonTxt)) {\n        materialBuilder.positiveText(positiveButtonTxt);\n    }\nThis section is the issue. If only one of the button text functions is run then only that button shows up. If you are setting the text of the buttons you must do so for all buttons, even if you define button callbacks later on.\n. ",
    "vertuxx": "thank you.\n. ",
    "tennessine": "+1\n. ",
    "davigotxi": "thanks for the clarification, working now.\n. ",
    "innocarpe": "@afollestad Then you may replace the generic version to Commons too :)\n. ",
    "CanGokdere": "Compiling with @aar seemed to solve the issue\n. ",
    "Aqua-Ye": "Problem appeared again with 0.8.6.2\nError:Module 'com.afollestad.material-dialogs:commons:0.8.6.2' depends on one or more Android Libraries but is a jar\n. ",
    "jahirfiquitiva": "I was going to ask about this, but I think it would be better as a Material Dialog Neutral button. Can't wait to see this implemented.\nThanks in advance, Aidan.\n. A long time ago, when there was only 1 library (no commons one), FolderSelectorDialog was a class in the sample app.\nI have been using that code for a long time, even after commons library was released.\nToday I added some things of the class in the commons library and adapted it to the old code. I also included the option to create new folders.\nIt's working fine in my app, but I don't suggest you to use it unless you know what you're doing.\nAnyways, I'm sure @afollestad will be able to implement this in the class in commons library, and even improve it.\nHere's the code\n``` java\nimport android.Manifest;\nimport android.app.Activity;\nimport android.app.Dialog;\nimport android.content.Context;\nimport android.content.pm.PackageManager;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.os.Environment;\nimport android.support.annotation.NonNull;\nimport android.support.v4.app.ActivityCompat;\nimport android.support.v4.app.DialogFragment;\nimport android.support.v4.app.Fragment;\nimport android.support.v7.app.AppCompatActivity;\nimport android.text.InputType;\nimport android.view.View;\nimport com.afollestad.materialdialogs.DialogAction;\nimport com.afollestad.materialdialogs.MaterialDialog;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport jahirfiquitiva.apps.iconshowcase.R;\npublic class FolderChooserDialog extends DialogFragment implements MaterialDialog.ListCallback {\nprivate File parentFolder;\nprivate File[] parentContents;\nprivate boolean canGoUp = true;\nprivate FolderSelectionCallback mCallback;\nprivate String initialPath;\n\npublic interface FolderSelectionCallback {\n    void onFolderSelection(File folder);\n}\n\npublic FolderChooserDialog() {\n}\n\npublic void setInitialPath(String path) {\n    if (path == null)\n        path = File.separator;\n    initialPath = path;\n}\n\npublic String getInitialPath() {\n    return initialPath == null ? Environment.getExternalStorageDirectory().getAbsolutePath() : initialPath;\n}\n\nString[] getContentsArray() {\n    if (parentContents == null) return new String[]{};\n    String[] results = new String[parentContents.length + (canGoUp ? 1 : 0)];\n    if (canGoUp) results[0] = \"...\";\n    for (int i = 0; i < parentContents.length; i++)\n        results[canGoUp ? i + 1 : i] = parentContents[i].getName();\n    return results;\n}\n\nFile[] listFiles() {\n    File[] contents = parentFolder.listFiles();\n    List<File> results = new ArrayList<>();\n    if (contents != null) {\n        for (File fi : contents) {\n            if (fi.isDirectory()) results.add(fi);\n        }\n        Collections.sort(results, new FolderSorter());\n        return results.toArray(new File[results.size()]);\n    }\n    return null;\n}\n\n@SuppressWarnings(\"ConstantConditions\")\n@NonNull\n@Override\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M &&\n            ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.READ_EXTERNAL_STORAGE) !=\n                    PackageManager.PERMISSION_GRANTED) {\n        return new MaterialDialog.Builder(getActivity())\n                .title(R.string.md_error_label)\n                .content(getResources().getString(R.string.md_storage_perm_error, R.string.app_name))\n                .positiveText(android.R.string.ok)\n                .build();\n    } else {\n\n        parentFolder = new File(getInitialPath());\n        parentContents = listFiles();\n\n        return new MaterialDialog.Builder(getActivity())\n                .title(parentFolder.getAbsolutePath())\n                .items(getContentsArray())\n                .itemsCallback(this)\n                .onPositive(new MaterialDialog.SingleButtonCallback() {\n                    @Override\n                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                        dialog.dismiss();\n                        mCallback.onFolderSelection(parentFolder);\n                    }\n                })\n                .onNegative(new MaterialDialog.SingleButtonCallback() {\n                    @Override\n                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                        dialog.dismiss();\n                    }\n                })\n                .onNeutral(new MaterialDialog.SingleButtonCallback() {\n                    @Override\n                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                        createFolder(getActivity(), dialog, parentFolder.getAbsolutePath());\n                    }\n                })\n                .autoDismiss(false)\n                .positiveText(R.string.choose)\n                .negativeText(android.R.string.cancel)\n                .neutralText(R.string.new_folder)\n                .build();\n    }\n}\n\n@Override\npublic void onSelection(MaterialDialog materialDialog, View view, int i, CharSequence s) {\n    if (canGoUp && i == 0) {\n        parentFolder = parentFolder.getParentFile();\n        canGoUp = parentFolder.getParent() != null;\n    } else {\n        parentFolder = parentContents[canGoUp ? i - 1 : i];\n        canGoUp = true;\n    }\n    parentContents = listFiles();\n    MaterialDialog dialog = (MaterialDialog) getDialog();\n    dialog.setTitle(parentFolder.getAbsolutePath());\n    dialog.setItems(getContentsArray());\n}\n\n@Override\npublic void onAttach(Activity activity) {\n    super.onAttach(activity);\n    mCallback = (FolderSelectionCallback) activity;\n}\n\npublic void show(AppCompatActivity context) {\n    Fragment frag = context.getSupportFragmentManager().findFragmentByTag(\"FOLDER_SELECTOR\");\n    if (frag != null) {\n        ((DialogFragment) frag).dismiss();\n        context.getSupportFragmentManager().beginTransaction()\n                .remove(frag).commit();\n    }\n    show(context.getSupportFragmentManager(), \"FOLDER_SELECTOR\");\n}\n\nprivate void createFolder(Context context, final MaterialDialog folderChooserDialog, final String folderPath) {\n    new MaterialDialog.Builder(context)\n            .title(R.string.new_folder_title)\n            .content(R.string.new_folder_content)\n            .inputType(InputType.TYPE_CLASS_TEXT |\n                    InputType.TYPE_TEXT_VARIATION_PERSON_NAME |\n                    InputType.TYPE_TEXT_FLAG_CAP_WORDS)\n            .positiveText(android.R.string.ok)\n            .negativeText(android.R.string.cancel)\n            .input(R.string.new_folder_hint, 0, false, new MaterialDialog.InputCallback() {\n                @Override\n                public void onInput(MaterialDialog dialog, CharSequence input) {\n                    File folder = new File(folderPath + File.separator + input.toString());\n                    if (!folder.exists()) {\n                        folder.mkdir();\n                    }\n                    parentContents = listFiles();\n                    folderChooserDialog.setItems(getContentsArray());\n                }\n            }).show();\n\n}\n\nprivate static class FolderSorter implements Comparator<File> {\n    @Override\n    public int compare(File lhs, File rhs) {\n        return lhs.getName().compareTo(rhs.getName());\n    }\n}\n\n}\n```\n. Awesome. Thank you Aidan.\n. Hey @afollestad Thank you so much for all the fixes!\nAnyways, this particular issue isn't really fixed. The OP has a screenshot using Material Dialogs 0.9.6.0 in my app Pals, this one is using 2.0.0-beta5 see how different they look.\nI really like the one from 0.9.6.0 better\n\n. Here's a side-by-side comparison\nLeft uses MaterialDialogs 0.9.6.0 and right uses 2.0.0-beta5\nSee how the icon+title looks evenly spaced on left+right and top+bottom in the old version.\nThat's what I mean \ud83d\ude4f\ud83c\udffc\n\n. Thanks @afollestad \ud83d\ude00 . Thanks for letting me know about the images trick.\nMy custom view is a full width card, and a recyclerview below\nAlso, I set these flags in the AndroidManifest.xml:\nandroid:windowSoftInputMode=\"stateAlwaysHidden|adjustResize\". The thing is the spacing between the button text and the dialog border looks bigger than when not using a custom view in the dialog \ud83e\udd14 \n. ",
    "natsihitt": "tnx\n. ",
    "jfabrix101": "Thanks to suggestion of @jahirfiquitiva  and starting from the code of @afollestad \nI have implemented a version of FolderChooserDialog with this feature\n- Added option in Builder to specify a newFolder button (and text for content in dialog)\n- Separate the FolderCallback implementation from Activity (now you can specify the callback as inner class)\nHere the full code :\nMyFolderChooserDialog.txt\nExample of usage\njava\nnew MyFolderChooserDialog.Builder((ApkManagerSettingsActivity)getActivity())\n    .chooseButton(R.string.md_choose_label)  \n    .initialPath(myPath, Environment.getExternalStorageDirectory().getAbsolutePath()))\n    .folderCallback(new MyFolderChooserDialog.FolderCallback() {\n        @Override\n            public void onFolderSelection(@NonNull File folder) {\n                   // Do something whith the new folder created\n            }\n        })\n    .newFolderButton(R.string.newFolder, getString(R.string.newFolderDialogContent))\n    .show();\n. Yes, you must pass as builder argoment \"((YuourActivityClass)getActivity)\"\nwhere yourActivityClass must implements the FolderCallback interface.\nIn this method you can obtain the SharedPrefenrece and set the value for the file\nI also suggest to you to maintain the reference to your fragment in your activity and in a \"onFolderSelection\" method call some method in your fragment to do some work  (as for example set the summary for the preference changing the file path as current value to give some feedback to user)\n. I have made a modified version of FolderChooserDialog that allow to specify a separate Listener (useful in case of fragment) and a button for new folder.\nSee this issue - https://github.com/afollestad/material-dialogs/issues/872. \n. ",
    "AlexMomotov": "whoops    \n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n. ",
    "dmitrikudrenko": "hmm, it seems useful\n. ",
    "lancelinksp": "Any chance you have an older jar for a version I can target sdk version 22?\n. ",
    "l123456789jy": "compile('com.github.afollestad.material-dialogs:core:0.8.5.3@aar') {\n        transitive = false\n    }\nThis is solved\n. ",
    "macarthor": "@afollestad in my project, some dialogs have content but no title, while some have title but no content, while some are input dialogs, and some are list dialogs...\ni wanna use only one instance for the dialog, without calling new Builder() everytime.\n. @afollestad got, thx~\n. ",
    "mfpolat": "The result is the same . I still get same error\n. ",
    "loregr": "It happens to me as well. I \"fixed\" using\ncompile('com.afollestad.material-dialogs:core:0.8.2.0@aar') {\n        transitive = true\n    }\n. ",
    "LiangCY": "Still get the same error\n. ",
    "raphaelbussa": "I solved it by putting callbacks in parent activity, thanks for the clarification.\n. Just for curiosity, why you don't want to integrate this feature?. For the parameter in the builder, you're right, in fact I had moved it as a method in the builder, but I have not yet pushed the change. \nFor the library's focus I do not quite agree, I think the possibility of having all the customizable material dialog as bottom dialog can be very useful. I have update the fork, if you want you can take a look. ",
    "abdulrahmanmajeed": "please send me the line how to do as I already try this but all in vain ....\njava\ndialogCaution.getCustomView().setLayoutParams(); and also set \ndialogCaution.getCustomView().setMinimumHeight(700);\ndialogCaution.getCustomView().setMinimumWidth(700);\n. ",
    "jp1017": "so, what's your final valid codes? @abdulrahmanmajeed \nand how to set? @afollestad :smile: \n. @afollestad We can't set dialog width, isn't it ?\n. @afollestad Yes, I make it using later access, thank you very much, great job. :+1: :smile: \n. ",
    "sflanders": "I don't see the progress dialog with spinner and text actually recommended in the guidelines.  It actually appears to use spinners or other graphic indicators that typically have no text and almost always transparent backgrounds with no borders around those graphic artifacts.  You can see most of this here:   https://www.google.com/design/spec/components/progress-activity.html#progress-activity-types-of-indicators\nI tinkered around with your library and its much friendlier to use than the stock stuff.  :-)\n. Sounds good.  I'll look into that.  Thanks.\n. ",
    "GutoMartins019": "@afollestad, thank you for your nice work, can you explain in more details how i use this  to center de loading dialog?\n. ",
    "MansoorJafari": "Thank You Friends.\n. Excuse me.\nCan I use material dialog for play Video and show image or play sound?\nThank You\n. ",
    "piotrek1543": "\nI've tried to refresh my browser (Chrome), but still the same result\n. Update please screenshot - add one with right API value. Change also this misleading MR name - it's more for supporting another library than just creating a new about file.\nMaybe: 'Adding support for 'About Libraries' Android library'\nThen you would have my approval. @AllanWang lol, it seems that only author of this repo can review this correctly and then merge.\nFor me it's nice-to-have feature, so... approve.. Shouldn't it be uppercase?. @AllanWang i was curious about why 'mit' is lowercase. No, I don't see this change as necessary. ",
    "erva": "I have already fixed it. Making pull request just now\n. ",
    "EpsilonOrionis": "Thank you\n. This is to access later, I want to access before. Could you give me an example please?. Ok thank you, I'll try tomorrow and I'll tell you if I solved the problem \ud83d\ude04 . It works \ud83d\udc4d . ",
    "DanielJette": "Yeah, seems to be missing ... \n```\n\nArtifact 'material-dialogs.aar (com.afollestad:material-dialogs:0.7.9.0)' not found.\n     Searched in the following locations:\n         https://jitpack.io/com/afollestad/material-dialogs/0.7.9.0/material-dialogs-0.7.9.0.aar\n``\n. Well, apparently not for 0.7.9\n. It seems the tag0.7.9.0refers to0.8.5.2`, which might be the problem\n. \n\nhttps://github.com/afollestad/material-dialogs/commit/245e2be343cd6e5cd1ad8020d14d12fe31e6313c\n. TIL\nThanks! That explains that, then. Thanks for your help.\n. ",
    "efung": "According to https://jitpack.io/docs/ANDROID/ , the library's build.gradle should be defining group as com.github.USERNAME. But you've defined it as com.afollestad.\nWhat is the proper Gradle dependency line we need, in order to get the 0.7.9.0 release?\nI've tried the following, all with no success:\ncompile 'com.afollestad:material-dialogs:0.7.9.0'\ncompile 'com.github.afollestad:material-dialogs:0.7.9.0'\ncompile 'com.github.afollestad.material-dialogs:core:0.7.9.0'\n. Ah, didn't know about JitPack custom domains\nSo\u2026 how can we use the 0.7.9.0 release then?\n. Absolutely: https://github.com/afollestad/material-dialogs/releases/tag/0.7.9.0\nI've tried several variations on the group ID and artifact ID but no luck.\nIt worked fine up until a few days ago. That's what makes this so puzzling. This is what we had in our module's build.gradle in the dependencies:\ncompile 'com.afollestad:material-dialogs:0.7.9.0'\n. How are you displaying the older releases? When I go to https://jitpack.io/#afollestad/material-dialogs, all I see is:\n\n. ",
    "mbarrben": "Well it's not working since https://github.com/afollestad/material-dialogs/pull/931. The reason is that in Dialog class setCanceledOnTouchOutside overrides cancelable property http://developer.android.com/intl/es/reference/android/app/Dialog.html#setCanceledOnTouchOutside(boolean) and it's being called after calling setCancelable.\n. ",
    "falkontre": "It should be reopened...It's not working too for me\n. ",
    "gorchg": "How about like this.\nMateriaDialog.java\njava\npublic Builder(@NonNull Activity activity) {\n    this.context = activity;     \n    activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\n...\nAlertDialogWrapper.java\njava\n...\npublic Builder(@NonNull Activity activity) {\n    builder = new MaterialDialog.Builder(\n...\nDialogUtils.java\n``` java\n    public static void showKeyboard(DialogInterface di, final MaterialDialog.Builder builder) {\n        final MaterialDialog dialog = (MaterialDialog) di;\n        if (dialog.getInputEditText() == null) return;\n        dialog.getInputEditText().post(new Runnable() {\n            @Override\n            public void run() {\n                dialog.getInputEditText().requestFocus();\n                InputMethodManager imm = (InputMethodManager) builder.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n                imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);\n            }\n        });\n    }\npublic static void hideKeyboard(DialogInterface di, final MaterialDialog.Builder builder) {\n    final MaterialDialog dialog = (MaterialDialog) di;\n    if (dialog.getInputEditText() == null) return;\n    dialog.getInputEditText().post(new Runnable() {\n        @Override\n        public void run() {\n            dialog.getInputEditText().requestFocus();\n            InputMethodManager imm = (InputMethodManager) builder.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\n            if (imm != null) {\n                imm.hideSoftInputFromWindow(dialog.getInputEditText().getWindowToken(), 0);\n            }\n        }\n    });\n}\n\n```\nMy source is worked.\n. ",
    "cherry-wave": "I have the same problem, when returning to home screen with the devices' home button.\n. ",
    "MGasztold": "up, same problem. When dialog is dismissed the keyboard is not closing. I use .customView with my own layout in which I have EditText objects.\nMy expectation is that when onNegative or onPositive callbacks are called the keyboard is already gone.\nAny hints on that?. ",
    "koskimas": "This happens to me every time I open a dialog on android 5 and 6 devices. The dialogs work perfectly, but my log fills up with these stack traces:\n```\nDrawable android:drawable/text_cursor_material has unresolved theme attributes! Consider using Resources.getDrawable(int, Theme) or Context.getDrawable(int).\n                                                                           java.lang.RuntimeException\n                                                                               at android.content.res.Resources.getDrawable(Resources.java:726)\n                                                                               at android.support.v7.widget.ResourcesWrapper.getDrawable(ResourcesWrapper.java:128)\n                                                                               at android.support.v7.widget.TintContextWrapper$TintResources.getDrawable(TintContextWrapper.java:70)\n                                                                               at com.afollestad.materialdialogs.internal.MDTintHelper.setCursorTint(MDTintHelper.java:151)\n                                                                               at com.afollestad.materialdialogs.internal.MDTintHelper.setTint(MDTintHelper.java:118)\n                                                                               at com.afollestad.materialdialogs.DialogInit.setupInputDialog(DialogInit.java:428)\n                                                                               at com.afollestad.materialdialogs.DialogInit.init(DialogInit.java:300)\n                                                                               at com.afollestad.materialdialogs.MaterialDialog.(MaterialDialog.java:95)\n                                                                               at com.afollestad.materialdialogs.MaterialDialog$Builder.build(MaterialDialog.java:1334)\n                                                                               at com.afollestad.materialdialogs.MaterialDialog$Builder.show(MaterialDialog.java:1339)\n```\n. Thanks!\n. ",
    "Arash-gm": "Dear Aidan @afollestad , i've struggled with this issue for some hours and after some workarounds i've found that my other custom dialogs doesn't drive LayoutDirectionfrom their parent Activities too , like your MaterialDialogs , so Start or End Gravity on English app locale and Persian(RTL) system locale doesn't work as expected.i've set layoutDirectionfor my master Activity \n``` java\nAppLocaleEnum appLocaleEnum = localeHelper.getCurrentLocale(this);\n        if(appLocaleEnum == AppLocaleEnum.PERSIAN)\n        {\n            forceRTLIfSupported();\n        }\n        else\n        {\n            forceLTRIfSupported();\n        }\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\n    private void forceRTLIfSupported()\n    {\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n            getWindow().getDecorView().setLayoutDirection(View.LAYOUT_DIRECTION_RTL);\n        }\n    }\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)\nprivate void forceLTRIfSupported()\n{\n    if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1){\n        getWindow().getDecorView().setLayoutDirection(View.LAYOUT_DIRECTION_LTR);\n    }\n}\n\n```\nfor fixing the problem i've used to set LayoutDirection on my Dialogs too on onCreateDialog : \njava\nLocaleHelper localeHelper = LocaleHelper.getInstance();\n        AppLocaleEnum appLocaleEnum = localeHelper.getCurrentLocale(dialog.getContext());\n        if(appLocaleEnum == AppLocaleEnum.PERSIAN)\n        {\n            forceRTLIfSupported(dialog);\n        }\n        else\n        {\n            forceLTRIfSupported(dialog);\n        }\ni think this will fix the issue on my custom dialogs , do you agree with me on this, i wanted to hear your opinion? but on MaterialDialogs i'm checking app and system locale and change gravity according to them so can you add such behavior on your next release?\n. ",
    "MDSIBTAINALAM": "actually i want to use this library..\n. ",
    "jlelse": "Oh ok\n. Any progress on this issue?. ",
    "Ashish-Bansal": "@afollestad Thanks for this addition!\n. ",
    "novalu": "Same here. Cannot build project with material-dialogs 0.8.5.4 and new support libraries 23.2.0.\n. ",
    "JulienDev": "Same here\n. ",
    "marianpavel": "How much can this take ?\n. This post is for 16 days ago, any solution for this issue ?\nThe sad part is that downgrade to 0.8.5.8 doesn't work for me either.\nThanks :)\n. ",
    "subinsebastien": "Affected by the same issue. Subscribing.\n. @AzureusSme :+1: \n. ",
    "jmodrako": "Closed.\n. ",
    "carloxavier": "this seems to be back on v24.2.1 \n. ",
    "nikunjgundaniya": "@carloxavier yeah, back again! any workaround?\n. ",
    "FedericoPonzi": "Same problem here c:\n. ",
    "PDDStudio": "/me.zhanghai.android.materialprogressbar/ is not a package of this repository's library\n. ",
    "abusuioc": "Well, I see a:\ncompile 'me.zhanghai.android.materialprogressbar:library:1.1.5'\nin https://github.com/afollestad/material-dialogs/blob/master/core/build.gradle\n. Ok, makes sense.\nThen I suggest to change the minSdkVersion 8 to  minSdkVersion 14 in https://github.com/afollestad/material-dialogs/blob/master/core/build.gradle\nThanks a lot!\n. ",
    "webmaster128": "MaterialProgressBar is a dependency and MaterialProgressBar is API 14+ so we either need to remove the dependency or drop support for API 8\u201313.\nOne could fix/fork MaterialProgressBar to support lower APIs but is it really worth it? Would someone be willing to dig into that?\n. Okay, this should not be the issue. My dialog layout is 100 % ready at build time\nmScalingDialog = new MaterialDialog.Builder(ComposeActivity.this)\n                        .title(\"Scaling\")\n                        .content(\"Scaling down images\")\n                        .progress(imagesCount < 3, imagesCount, true)\n                        .cancelable(false)\n                        .build();\n                mScalingDialog.show();\nNow in the indeterminate case I am not allowed to call setProgress because of the exception.. I am not planning to switch the layout. I just want to avoid additional case distinctions in my application code and call setProgress on an indeterminate dialog. I think I can write a PR for this, if you like. Is there an easy way to read the javadocs of this project?. Hey @afollestad, I would be happy to provide a patch for this issue as well as #1236. But in order to be able to work on that, I need a resolution for #1238. Without a solid base it just makes no sense to build on top.. I think we should fully allow this behaviour here, i.e. just do nothing and don't log anything. With the patch that was linked, uses get spammend with warnings, so still cannot really use it.. Works now as expected, thanks. I updated this using gradle instead of make for javadoc generation. Now the described way works on Windows as well.. Which ones? The headline changes or the new Documentation section?\nThe headline changes are indeed not necessarily needed, but they improve the overall structure of the document, since it is common and useful to have exactly one h1-headline, which defines the document title, in this  the library name. Do you want me to remove the  \"Minor cleanups\" commit?. I see. That could be done as well. I just tried to see what needs to be done to make those methods thread safe and I think the biggest problem is that we need to call mProgress.getProgress() from the UIThread. That should be doable by Instrumentation.runOnMainSync, if we can somehow pass the value from the UI thread back to the original thread. Are you interested in such a PR?. I just tried to implement setProgress in a thread-safe way. It turns out this would require a lot of restructuring, since we would have to synchronize access of at least the mBuilder and the mProgress members. Both members are exposed via public methods (getBuilder()/getProgressBar()) so we do not have control about when the objects are accessed.\nEnsuring that only the three getCurrentProgress/incrementProgress/setProgress are implemented in a thread-safe way would lead to massive development afford, a more complex codebase, API changes and slower runtime performance.\nThus I'd like to ask you to reconsider this PR.. Yes, because I needed the #1237 changes in order to do this one. I'll rebase as soon as #1237 is merged.. ",
    "JordanGout": "See #964\n. ",
    "gpulido": "I already though so, but I also have other libraries that use ssl and the only one that throws me the error is this one. If I disable it on the gradle.build it synchronizes without problem.\nI will try again with the new beta6 that t has been released this night (I'm on GMT time), \n. Hello.\nJust as a following up.\nThe problem has been solved with the 2.0.0-beta6 version of the android gradle tool.\nHope it helps anyone\n. ",
    "Tortel": "I had the same issue with multiple versions of the gradle tool - I fixed it by changing my JRE from openjdk7 to openjdk8 (On Arch linux)\n. ",
    "csbenz": "OK thanks, will try!\nOn Thu, Feb 25, 2016, 22:55 Aidan Follestad notifications@github.com\nwrote:\n\nYou have to setup the GridView or whatever independent from the dialog.\nYou can either pass an inflated View to the dialog that's setup, or pass a\nlayout resource ID to the Builder and set it up after you build the\ndialog.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/969#issuecomment-189003384\n.\n. Same issue here\n. \n",
    "mfietz": "We get similar reports. So far only from people running CyanogenMod (12.x and 13.x).\n. We are facing the same issue. We are currently using version 0.8.5.3\nDuring building, I noticed that this version now seems to depend on support 23.2.0 instead of 23.1.1 as it is supposed to.\nJust checked the jitpack build logs and it looks like that something really went wrong there: https://jitpack.io/com/github/afollestad/material-dialogs/0.8.5.3/build.log\nSeems updating to support 23.2.0 solves the issue, though.\n. ",
    "devslava": "Unfortunately I have issue with keyboard behavior too.\nBut my issue is another. When input dialog opens, soft keyboard opens for a second and immediately closes. After that I am not able to get keyboard. Neither focus change nor clicking at the EditText have no effect.\n. @afollestad Library has been updated for 23.3.0 but unfortunately issue still exists. \n. Same issue:\nError:Failed to resolve: material-dialogs:core:unspecified\n. ",
    "Bill871": "I think that this is still broken in 0.8.5.6. Or at least the behavior changed and in my opinion the SHOW_IMPLICIT worked better:\n- when you have an dialog with input text, the keyboard opens automatically, which is alright\n- but when you tap an button to open another dialog over this one that does NOT have an input text, the keyboard now stays open (which in my opinion is wrong), in version 0.8.5.4 this worked correctly\n. From a little testing, it looks like that the opening of the 2nd dialog and closing of the soft keyboard is dependent on the fact whether the 1st dialog is using custom view or not.\n1) when 1st dialog is built using .customView() with input inside of it - opening an 2nd dialog without input closes the keyboard (correct)\n2) but when 1st dialog is built using a builder with .input(\"\", \"\", ...) - opening an 2nd dialog without input does NOT close the keyboard (wrong)\n. Well, true. But in my opinion the 2) should work even when you are not dismissing the 1st dialog (as it worked in 0.8.5.4). Never mind, I will revert back to 0.8.5.4 where it works correctly, too bad that I do have to revert also to 23.1.1 support libraries. Thanks for your work, though.\n. ",
    "MichaelTague": "Ok, I made it work by moving the repositories { maven { url \"https://jitpack.io\" } } element into the app specific build.gradle. \n. ",
    "ecbjo": "@jitpack-io I'm using the default gradle wrapper provided by Android Studio and there have been no problems at all up til this point.\nTested to change the distriubutionUrl to the following, without success.\ndistriubutionUrl=https\\://services.gradle.org/distributions/gradle-2.11-all.zip\n. Okay. Downloaded Gradle 2.11 and set it up. It seems like it worked but now i'm getting error \nFailed to resolve: me.zhanghai.android.materialprogressbar:library:1.1.4\nIt says that Material dialogs core package requires that apparently.\n. ",
    "leveychen": "I read the documentation again, but no gains.\nI dont know what is the .db file mimetype.\nHow to use it with file extension?\n. ",
    "anggrayudi": "Hi @leveychen, I also ask this feature to @afollestad, in issue #1088. Seems that he ignored this important feature. You can check the mime-type for .db file extension here, and see if it's there. On my search, there's no mime-type for .db file extension.\n. Using mime with wildcards is not enough. For some cases, I just want to view files with numbered-extension, like 001, 002, 003 and so on. Where you can find this mime-type? I have searched theirs in this site, but I can't find one. Or, can we create our custom mime-type and list them in that site?\n. In my case, adding this method\n.customView(int layoutRes, boolean wrapInScrollView, int marginLeft, int marginRight)\nwould be great.. @sametceylan Is it free?. @afollestad Well, does that mean you will add these dialogs later?. That is why I put the current folder into DialogFragment's arguments. The problem is, this library doesn't provide a method to get the current directory. How can I save the state if I cannot get the current path? I am sure that someone will ask this question again in the future.. It is like a dilemma. When I want to save current path each time users selected a folder, I can't detect whether they press positive or negative button. Otherwise, when I want to detect when users press positive button and get the selected folder, I cannot save the state on orientation change. At least, we have a method like this MaterialDialog.getCurrentFolder().\nBTW, thank you for reopening this issue.. I think this kind of dialog already created as MaterialDateTimePicker. ",
    "FrancescoCapari": "In DialogUtils#showKeyboard() the second parameter into the showSoftInput() on line 217 method should be InputMethodManager.SHOW_IMPLICIT instead of InputMethodManager.SHOW_FORCED. That would fix all these issues. FORCED should be used if any only if user e.g. pressed the key to display the keyboard. Since this method is called onShow() of any dialog, this is obviously not the case.\n. I absolutely agree with what @yukuku said. .content(@StringRes int resId) should always internally use getText(). Creating several instances of String (String.format and String.replace), converting them to Spannable by passing it into the Html.fromHtml() is just an absolutely unnecessary (although small) performance drawback, when one only wants to get an CharSequence implementation with replaced params.\nThe Html.fromHtml() should never be called automatically - also for the reason that it does not work if you don't put CDATA into your resources.. ",
    "othreecodes": "Hey, Im getting this same Issue while using Material Dialog in a fragment\n. ",
    "tomiu": "+1\n. ",
    "fichna": "I have also problem with this library and support 23.2\nMy problem is described on stackoverflow\n. Yes, I know, but problem stays... \n. Error is in file \\app\\build\\intermediates\\exploded-aar\\com.afollestad\\material-dialogs\\0.7.6.0\\res\\values-v11\\values-v11.xml\nIt says Error:(5, 5) No resource found that matches the given name (at 'android:actionModeCloseDrawable' with value '@drawable/abc_ic_ab_back_mtrl_am_alpha').\n. Oh, sorry... I'm using this library only for fernandodev/easy-rating-dialog and there is bad dependency (version) in the library\nThanks\n. ",
    "jacobras": "@fichna for the moment I have reverted to support library 23.1.1 and Material Dialogs 0.8.5.1. Tested and works fine on Android 4 (I also replied this to your StackOverflow question).\n. But at least it's a workaround for now @fichna ;-) I had to stop rolling out an update and now it can continue again so I will patiently wait until it's fixed.\n. ",
    "ShaymaaEssa": "I have the same problem even i used AppCompatRadioButton , I solved the problem by compile 'com.android.support:appcompat-v7:23.1.1'\n. ",
    "eincioch": "04-29 09:55:42.224 2536-2536/ev_softsa.appmedicacoorporativo E/AndroidRuntime: FATAL EXCEPTION: main\n                                                                               Process: ev_softsa.appmedicacoorporativo, PID: 2536\n                                                                               java.lang.NullPointerException: Attempt to invoke virtual method 'void ev_softsa.appmedicacoorporativo.PdfManager.createPdfDocument(ev_softsa.appmedicacoorporativo.model.bean.InvoiceObject)' on a null object reference\n                                                                                   at ev_softsa.appmedicacoorporativo.ActivityVerProforma$1.onClick(ActivityVerProforma.java:94)\n                                                                                   at android.view.View.performClick(View.java:5198)\n                                                                                   at android.view.View$PerformClick.run(View.java:21147)\n                                                                                   at android.os.Handler.handleCallback(Handler.java:739)\n                                                                                   at android.os.Handler.dispatchMessage(Handler.java:95)\n                                                                                   at android.os.Looper.loop(Looper.java:148)\n                                                                                   at android.app.ActivityThread.main(ActivityThread.java:5417)\n                                                                                   at java.lang.reflect.Method.invoke(Native Method)\n                                                                                   at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)\n                                                                                   at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)\n. Soluci\u00f3n: Cambiar <RadioButton...\ny utilizar <android.support.v7.widget.AppCompatRadioButton...\nEjemplo: ahora funciona OK!..\n\n. ",
    "Hackmodford": "I have this problem when using a API 16 simulator.\nI am using appcompat-v7:24.0.0\n. ",
    "Orbar": "How?\nI would like to use 0.8.5.4? ie pre support 23.2\n. ",
    "ErickPaul": "Anybody who got a solution to this problem?\nStill bugging for days...\n. ",
    "yigitserin": "Nevermind got it to work. Used this method:\npublic void MakeDialogButtonsLowercase(MaterialDialog myDialog){\n        MDButton negative =myDialog.getActionButton(DialogAction.NEGATIVE);\n        MDButton positive =myDialog.getActionButton(DialogAction.POSITIVE);\n        negative.setAllCaps(false);\n        positive.setAllCaps(false);\n    }\n. ",
    "ArmandL7": "Thx, it works. . ",
    "echthard": "https://code.google.com/p/android/issues/detail?id=201851 \n// Gradle Plugin 2.0+\nandroid {  \n   defaultConfig {  \n     vectorDrawables.useSupportLibrary = true  \n    }  \n }\n// Gradle Plugin 1.5\nandroid {  \n   defaultConfig {  \n     generatedDensities = []  \n  } \n  // This is handled for you by the 2.0+ Gradle Plugin \n  aaptOptions {  \n    additionalParameters \"--no-version-vectors\"  \n  }  \n }\n. ",
    "abhijitnukalapati": "@afollestad thanks for the response. perhaps I was unclear, I am using 0.8.5.3 (and not v0.7.7.0), but see support lib 23.2.0 as part of the dependency graph. does that make more sense? \nAlso, this might help too. On the releases page, all the tags say '4 commits to master since this release', which seems odd to me. \n. @ashughes this seems to have been intended, and there isn't an explanation from the author unfortunately - see thread here: https://github.com/afollestad/material-dialogs/issues/995\n. ",
    "ImTosS": "@PDDStudio Have the same issue even with com.github.afollestad.material-dialogs:core:0.8.5.6@aar... jitpack.io is added too into root gradle too. I solved temporarily downgrading to com.github.afollestad.material-dialogs:core:0.8.5.3@aar\n. ",
    "teeeeeegz": "Also when I toggle mDialogPositiveButton.setEnabled(true/false), and log the respective state of isEnabled() when setEnabled() action is triggered, logcat shows the correct alternating True/False value but the Button's UI always remains visually Enabled\n. Before you check out the below snippet, initially the dialog was a \"material dialog custom dialog\" created inside the activity for a change password action, in which the dialog was working as expected. When the password fields were emptied, the text listeners would act accordingly and disable the SAVE button.\nUpon decoupling the instantiation and functionality of that dialog to a separate class (to reduce the size of the class and provide the ability to instantiate that identical dialog elsewhere), when the dialog was displayed all the functionality still worked accordingly apart from the visual state of the SAVE button alternating between being enabled and disabled when the password text field was empty (as i said earlier, logging isEnabled() returned the correct TRUE or FALSE value accordingly)\n``` java\n    public class ChangePasswordDialog extends MaterialDialog {\nprivate EditText passwordInput, confirmPasswordInput;\nprivate CheckBox showPasswordCheckbox;\nprivate View positiveAction; // Save Button\n\npublic ChangePasswordDialog(Context context) {\n    super(new MaterialDialog.Builder(context));\n\n    getBuilder().title(context.getResources().getString(R.string.change_password_dialog_title))\n        .customView(R.layout.view_change_password_dialog, true)\n        .positiveText(context.getResources().getString(R.string.change_password_dialog_button_positive))\n        .negativeText(android.R.string.cancel)\n        .onNegative((dialog, which) -> dialog.dismiss())\n        .autoDismiss(false);\n\n    initLayoutActions();\n}\n\n/**\n * Set a callback to the SAVE button when pressed\n *\n * @param callback\n */\npublic void setPositiveAction(SingleButtonCallback callback) {\n    getBuilder().onPositive(callback);\n}\n\n/**\n * Build and show the dialog. Called straight after Dialog is instantiated\n */\npublic void showDialog() {\n    getBuilder().build().show();\n}\n\n/**\n * Initialise dialog actions\n */\nprivate void initLayoutActions() {\n    passwordInput = (EditText) getCustomView().findViewById(R.id.password);\n    confirmPasswordInput = (EditText) getCustomView().findViewById(R.id.confirmPassword);\n    showPasswordCheckbox = (CheckBox) getCustomView().findViewById(R.id.showPassword);\n\n    positiveAction = getActionButton(DialogAction.POSITIVE);\n    positiveAction.setEnabled(false); // disabled by default\n\n    setInputTextChangedListeners();\n\n    // Toggling the show password CheckBox will mask or unmask the password input EditText\n    showPasswordCheckbox.setOnCheckedChangeListener((buttonView, isChecked) -> {\n        passwordInput.setInputType(!isChecked ? InputType.TYPE_TEXT_VARIATION_PASSWORD : InputType.TYPE_CLASS_TEXT);\n        passwordInput.setTransformationMethod(!isChecked ? PasswordTransformationMethod.getInstance() : null);\n        confirmPasswordInput.setInputType(!isChecked ? InputType.TYPE_TEXT_VARIATION_PASSWORD : InputType.TYPE_CLASS_TEXT);\n        confirmPasswordInput.setTransformationMethod(!isChecked ? PasswordTransformationMethod.getInstance() : null);\n    });\n}\n/**\n * Enable/Disable SAVE button depending whether password fields match and aren't empty\n * // TODO: 10/03/16 positiveAction enabled state changes do not take effect as of v0.8.5.6\n * // Review this in a later version of the Material Dialogs library\n */\nprivate void setInputTextChangedListeners() {\n    passwordInput.addTextChangedListener(new TextWatcher() {\n        @Override\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n        @Override\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\n            if (s.toString().trim().length() > 0 && s.toString().equals(confirmPasswordInput.getText().toString()))\n                positiveAction.setEnabled(true);\n            else\n                positiveAction.setEnabled(false);\n        }\n        @Override\n        public void afterTextChanged(Editable s) {}\n    });\n\n    confirmPasswordInput.addTextChangedListener(new TextWatcher() {\n        @Override\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n        @Override\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\n            if (s.toString().trim().length() > 0 && s.toString().equals(passwordInput.getText().toString()))\n                positiveAction.setEnabled(true);\n            else\n                positiveAction.setEnabled(false);\n        }\n        @Override\n        public void afterTextChanged(Editable s) {}\n    });\n}\n\n/**\n * Return the password field's value\n * @return\n */\npublic String getPasswordString() {\n    return passwordInput.getText().toString();\n}\n\n/**\n * Check if Password fields are matching and are minimum of 1 character\n *\n * This method is used in response to a bug in Material Dialogs library \n * @return\n */\npublic boolean arePasswordFieldsMatching() {\n    return (passwordInput.getText().toString().equals(confirmPasswordInput.getText().toString()) && passwordInput.getText().toString().trim().length() > 0);\n}\n\n}\n```\nI updated to 0.8.5.7 and the issue remains still.\nTry calling that class in a project via the following snippet and you should be able to replicate the issue\njava\n        ChangePasswordDialog cdu = new ChangePasswordDialog(getActivity());\n        cdu.showDialog();\n. ",
    "ddmmcjmm": "@teeeeeegz Yes, I saw the same thing. Perhaps there is something wrong with the drawable?\n. @Spoetnic No, I have not done anything with the button's colour. The same piece of code worked when I was using the 0.7.9.0 release.\n. ",
    "nate-eisner": "I'm using 0.8.5.7 and I'm trying to replicate this but it seems to be working fine for me.\n```\n      MaterialDialog dialog = new MaterialDialog.Builder(this)\n                .title(R.string.useGoogleLocationServices)\n                .content(R.string.useGoogleLocationServicesPrompt)\n                .positiveText(R.string.agree)\n                .negativeText(R.string.disagree)\n                .show();\n        MDButton mDialogPositiveButton = dialog.getActionButton(DialogAction.POSITIVE);\n        mDialogPositiveButton.setEnabled(false);\n```\n\nSomething more must be going on. Can you post more of your code? How you built your dialog?\n. ",
    "JonathonFry": "Thanks for raising this, was scratching my head trying to figure out why it wasn't respecting the version number. This is definitely a blocker issue for anyone not pointing at the latest version.\n. ",
    "rekt0x": "@frmz After cleaning my project and using 0.8.5.7 it works for me now.\n. ",
    "amugox": "0.8.5.7 also works for me\n. ",
    "agatti": "The CI system is complaining that there is no connected Android device.\n. ",
    "keith30xi": "Also occurs with a single choice dialog\njava.lang.NullPointerException\n                                                                              at android.support.v4.graphics.drawable.DrawableWrapperDonut.setCompatTintList(DrawableWrapperDonut.java:272)\n                                                                              at android.support.v4.graphics.drawable.DrawableCompatBase.setTintList(DrawableCompatBase.java:42)\n                                                                              at android.support.v4.graphics.drawable.DrawableCompat$BaseDrawableImpl.setTintList(DrawableCompat.java:94)\n                                                                              at android.support.v4.graphics.drawable.DrawableCompat.setTintList(DrawableCompat.java:390)\n                                                                              at com.afollestad.materialdialogs.internal.MDTintHelper.setTint(MDTintHelper.java:45)\n                                                                              at com.afollestad.materialdialogs.DefaultAdapter.getView(DefaultAdapter.java:67)\n                                                                              at android.widget.AbsListView.obtainView(AbsListView.java:2255)\n                                                                              at android.widget.ListView.measureHeightOfChildren(ListView.java:1263)\n                                                                              at android.widget.ListView.onMeasure(ListView.java:1175)\n                                                                              at android.view.View.measure(View.java:16497)\n                                                                              at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5125)\n                                                                              at android.widget.FrameLayout.onMeasure(FrameLayout.java:310)\n                                                                              at android.view.View.measure(View.java:16497)\n                                                                              at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5125)\n                                                                              at android.widget.LinearLayout.measureChildBeforeLayout(LinearLayout.java:1404)\n                                                                              at android.widget.LinearLayout.measureVertical(LinearLayout.java:695)\n                                                                              at android.widget.LinearLayout.onMeasure(LinearLayout.java:588)\n                                                                              at android.view.View.measure(View.java:16497)\n                                                                              at com.afollestad.materialdialogs.internal.MDRootLayout.onMeasure(MDRootLayout.java:199)\n                                                                              at android.view.View.measure(View.java:16497)\n                                                                              at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5125)\n                                                                              at android.widget.FrameLayout.onMeasure(FrameLayout.java:310)\n                                                                              at android.view.View.measure(View.java:16497)\n                                                                              at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5125)\n                                                                              at android.widget.LinearLayout.measureChildBeforeLayout(LinearLayout.java:1404)\n                                                                              at android.widget.LinearLayout.measureVertical(LinearLayout.java:695)\n                                                                              at android.widget.LinearLayout.onMeasure(LinearLayout.java:588)\n                                                                              at android.view.View.measure(View.java:16497)\n                                                                              at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5125)\n                                                                              at android.widget.FrameLayout.onMeasure(FrameLayout.java:310)\n                                                                              at com.android.internal.policy.impl.PhoneWindow$DecorView.onMeasure(PhoneWindow.java:2291)\n                                                                              at android.view.View.measure(View.java:16497)\n                                                                              at android.view.ViewRootImpl.performMeasure(ViewRootImpl.java:1912)\n                                                                              at android.view.ViewRootImpl.measureHierarchy(ViewRootImpl.java:1084)\n                                                                              at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:1291)\n                                                                              at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:996)\n                                                                              at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:5600)\n                                                                              at android.view.Choreographer$CallbackRecord.run(Choreographer.java:761)\n                                                                              at android.view.Choreographer.doCallbacks(Choreographer.java:574)\n                                                                              at android.view.Choreographer.doFrame(Choreographer.java:544)\n                                                                              at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:747)\n                                                                              at android.os.Handler.handleCallback(Handler.java:733)\n                                                                              at android.os.Handler.dispatchMessage(Handler.java:95)\n                                                                              at android.os.Looper.loop(Looper.java:136)\n                                                                              at android.app.ActivityThread.main(ActivityThread.java:5001)\n                                                                              at java.lang.reflect.Method.invokeNative(Native Method)\n                                                                              at java.lang.reflect.Method.invoke(Method.java:515)\n                                                                              at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:785)\n                                                                              at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:601)\n                                                                              at dalvik.system.NativeStart.main(Native Method)\n. Appears to be new in 0.8.5.7.\nWorks fine in 0.8.5.6.\n. ",
    "mariotaku": "Seems MDTintHelper trying to load a non-vector drawable https://github.com/afollestad/material-dialogs/blob/master/core/src/main/java/com/afollestad/materialdialogs/internal/MDTintHelper.java#L135 , I'll issue a pr to fix that.\n. ",
    "smilecs": "experiencing the same thing\n. ",
    "kalyaganov": "Same problem here. Fail to parse vector drawable.\nclass: MDTintHelper\nmethod:setTint\nDrawable radioVector = VectorDrawableCompat.create(radioButton.getContext().getResources(),\n                    R.drawable.abc_btn_radio_material, null);\nRadioVector is null.\n. I think that error is because R.drawable.abc_btn_radio_material point to non vector images...\n. Correct method:\njava\npublic static void setTint(@NonNull RadioButton radioButton, @ColorInt int color) {\n        ColorStateList sl = new ColorStateList(new int[][]{\n                new int[]{-android.R.attr.state_checked},\n                new int[]{android.R.attr.state_checked}\n        }, new int[]{\n                DialogUtils.resolveColor(radioButton.getContext(), R.attr.colorControlNormal),\n                color\n        });\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            radioButton.setButtonTintList(sl);\n        } else {\n//            Drawable radioVector = VectorDrawableCompat.create(radioButton.getContext().getResources(),\n//                    R.drawable.btn_radio_material, null);\n            Drawable radioVector = ResourcesCompat.getDrawable(radioButton.getContext().getResources(),\n                    R.drawable.abc_btn_radio_material, radioButton.getContext().getTheme());\n            Drawable d = DrawableCompat.wrap(radioVector);\n            DrawableCompat.setTintList(d, sl);\n            radioButton.setButtonDrawable(d);\n        }\n    }\n. You can import library as module into your projects until it will be fixed.\n. ",
    "muratogat": "Could someone please give an AppCompat - Material Dialogs version combination that doesn't have this issue, as a temporary workaround until this issue gets fixed?\n. Great! Thanks a lot @AkshayChordiya . I confirm that v23.2.1 - 0.8.5.5 versions are compatible.\n. ",
    "plusema86": "Could we modify MDTintHelper.java in our project?\n. ",
    "brunolopes446": "I also have this problem.\n. ",
    "iroyo": "+1\n. ",
    "tarek360": "i have got the same issue but this combination is working with me:\n-  AppCompat v23.2.1\n- material-dialog v0.8.5.6\n. ",
    "ramu2514": "Thanks it worked\n. ",
    "AntonyGolovin": "Just got same crash. Android 4.2.2, HP Slate 7. There is no crash on 0.8.5.6. \n``` java\npublic class SingleChoiceDialog extends DialogFragment {\n    private static final String PARAM_INDEX = \"SingleChoiceDialog.index\";\n    private static final String PARAM_TITLE = \"SingleChoiceDialog.title\";\n    private static final String PARAM_ITEMS = \"SingleChoiceDialog.items\";\npublic interface OnItemSelectedListener {\n    void onSelected(int index, String name);\n}\n\nprivate OnItemSelectedListener mOnItemSelectedListener;\n\npublic static SingleChoiceDialog instantiate(Context context, int index, @StringRes int titleRes, String[] items) {\n    Bundle bundle = new Bundle();\n    bundle.putInt(PARAM_INDEX, index);\n    bundle.putInt(PARAM_TITLE, titleRes);\n    bundle.putStringArray(PARAM_ITEMS, items);\n\n    return (SingleChoiceDialog) Fragment.instantiate(context, SingleChoiceDialog.class.getName(), bundle);\n}\n\n@NonNull\n@Override\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\n    Bundle bundle = getArguments();\n    int selectedIndex = bundle.getInt(PARAM_INDEX);\n    int titleRes = bundle.getInt(PARAM_TITLE);\n    String[] items = bundle.getStringArray(PARAM_ITEMS);\n\n    return new MaterialDialog.Builder(getActivity())\n            .title(titleRes)\n            .items(items)\n            .itemsCallbackSingleChoice(selectedIndex, (materialDialog, view, i, charSequence) -> {\n                onItemSelected(i, charSequence);\n                return false;\n            })\n            .positiveText(R.string.dialog_button_select)\n            .build();\n}\n\nprivate void onItemSelected(int index, CharSequence name) {\n    if (index != -1 && mOnItemSelectedListener != null) {\n        mOnItemSelectedListener.onSelected(index, name.toString());\n    }\n}\n\npublic void show(FragmentActivity activity) {\n    show(activity.getSupportFragmentManager(), SingleChoiceDialog.class.getName());\n}\n\npublic void setOnItemSelectedListener(OnItemSelectedListener onItemSelectedListener) {\n    mOnItemSelectedListener = onItemSelectedListener;\n}\n\n}\n```\n. ",
    "colinrtwhite": "+1 I have the same problem (no issue on 0.8.5.6). Tested on a Nexus S 4.1 (emulator).\nThough, I think this is a duplicate of #1006, which has been marked as fixed. Best to just stick on 0.8.5.6 and wait for the next release.\n. ",
    "yorkwang": "Also meet this problem on 4.4.2\n. ",
    "lukef": "This seems fixed in 0.8.5.8 for me\n. ",
    "JuliaZozulia": "I just notice that this issue is already fixed. Can you tell when new release of library is going to be done?\n. ",
    "ntaloventi": "works on me..\nget the latest ''com.github.afollestad.material-dialogs:core:0.8.5.7@aar'\nand android.support '23.2.1'\nbut single choice has dprecated method \n1. android.content.Context.getColorStateList\n2. android.content.Context.getColor\n@author Aidan Follestad (afollestad)\nneed your comment here...\nthanks\n. @koolll have you try my comment above?\n. ",
    "ashmosaheb": "I am getting this issue to on a 4.2.2 device with the latest com.github.afollestad.material-dialogs:core:0.8.5.7@aar\n. ",
    "koolll": "i having this issue also . any solution ? crash on android 4.2 also\n. ",
    "alexander-fischer": "Is there a way to fix it?. ",
    "sidsaxena0": "Sorry didn't see the 0.8.5.8, and later realized issue is resolved.\n. ",
    "javiersantos": "Seems there is an issue affecting to AppCompat 23.3.0. Reverting to 23.2.1 fixes the issue.\nBTW, this issue is related to this one too http://stackoverflow.com/questions/26561235/error-inflating-class-android-support-v7-widget-toolbar\n. As @MGLaboratory says, this bug is present in the latest v0.9.3.0. Rolling back to v0.9.2.3 fixes the issue for now.. @afollestad, this issue is affecting to all dialogs using a list, not only FolderChooserDialogs.. ",
    "maxotov": "Thank you for replies! I successfully displayed expandablelistview in my dialog. And i had a new problem, can you help to find solution? My problem describe below link: http://stackoverflow.com/questions/37100732/expandablelistview-with-checkboxes-display-in-dialog . Write any solutions may help, please. Thank you.\n. ",
    "bahmandamia6982": "Thanks @afollestad , Great work.\n. ",
    "masudias": "java\nnew MaterialDialog.Builder(MyActivity.this)\n    .title(\"Title\")\n    .content(\"Content\")\n    .positiveText(R.string.ok)\n    .onPositive(new MaterialDialog.SingleButtonCallback() {\n        @Override\n        public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n            dialog.dismiss();\n            startActivityForResult(intent);\n        }\n    }).show();\nHere's how I built the dialog and still experiencing the same issue they reported. I understand its not much to do with you as you're using the default behaviour. I just pointed out that it doesn't get dismissed or cancelled even if the cancelable(false) is not set. \n. Somehow I figured out to get my problem solved. So I feel like sharing here. \njava\nnew MaterialDialog.Builder(MyActivity.this)\n    .title(\"Title\")\n    .content(\"Content\")\n    .positiveText(R.string.ok)\n    .onPositive(new MaterialDialog.SingleButtonCallback() {\n        @Override\n        public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n            dialog.dismiss();\n            startActivityForResult(intent);\n        }\n    }).show();\nThis implementation was not working. Cancelling or dismissing the dialog from inside the onClick function was not working for me. So I created an instance of the MaterialDialog and called build \n``` java\nprivate void initializeDialog() {\n    mDialogBuilder = new MaterialDialog.Builder(MainActivity.this)\n        .title(\"Title\")\n        .content(\"Content\")\n        .cancelable(false)    // cancelable is set to false\n        .positiveText(R.string.ok)\n        .onPositive(new MaterialDialog.SingleButtonCallback() {\n            @Override\n            public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                // Removed the cancel/dismiss call from here. \n                startActivityForResult(intent);\n            }\n        });\n// Build the dialog\nmDialog = mDialogBuilder.build();\n\n}\n```\nThen I could show and dismiss/cancel the dialog using \njava\nmDialog.show();  // Show the dialog\nmDialog.dismiss()  // Dismiss  the dialog\nThis is strange but working and I don't know why. May the the reference of the MaterialDialog passed to onClick of MaterialDialog.SingleButtonCallback has the wrong reference.\n. ",
    "dmytroKarataiev": "Can confirm, neither your app nor my app with your AlertDialog work and both show this error in the logcat on a Nexus 6P.\nI tried to use your library, because of this error with an Android AlertDialog: https://code.google.com/p/android/issues/detail?id=208886\n. But why even your app isn't working on a Nexus 6P? Can you check please? \n. Sorry, but it doesn't work, here is a video: \nhttps://youtu.be/cYDA3zsmqWY\n. ",
    "HD-AD": "This issue has nothing to do with the library, it is caused whenever you launch a activity from a alertDialog/popupMenu. Some people got this message when starting a service and not declaring it in the manifest. It is a warning message that should have been removed long ago  or changed to avoid confusion. If you do a google search you will find at least 40 questions about this with minimal answers/info.\nI've launched a application with this warning, in the hope it doesn't cause any issues, its been like that for a year now.. ",
    "mag2007": "Well, i don't think so. The stock dialog looks like Holo style. But when i use appcompat theme, the dialog goes off the screen (like your material dialog too). Cause of it, i thought, maybe it would be nice to have nice material dialog for round screens too(i know, the rect screen with stock dialog using appcompat theme looks good. But thanks anyway.\n. ",
    "wavever": "I meet this problem too , Error:Failed to resolve: material-dialogs:core:unspecified .\n. ",
    "MichaDo": "The problem is in commons/build.gradle. There is a local dependency to the core project.\nMichael\n. @afollestad I don't no why this works in 0.8.5.8 but not in 0.8.5.9. But :commons found no :core in local cache or not looking for. If I use both libs completely local it works fine. If I use only :commons local, :core from remote and replace compile project(':core') with compile('com.afollestad.material-dialogs:core:0.8.5.9') in build.gradle from :commons, it works also.\nMaybe it helps if you have a direct referral to the local repository in :commons build.gradle:\nrepositories {\n    mavenLocal()\n}\n. I think, you use the dependency as com.github.afollestad.material-dialogs:core:0.8.5.9. But currently it is com.afollestad.material-dialogs:core:0.8.5.9.\n. ",
    "audiultx": "oh i see now. I hope that it's gonna be fixed soon. Would need that to work for my app\n. @afollestad do you have any idea why it's complaining to us?\n. @shabbir-dhangot did you try the 0.8.5.8 version? below 0.8.5.9 you have to include:\nmaven {\n            url \"https://jitpack.io\"\n        }\nto the root build.gradle\nand then in your app build.gradle include the dependencies:\ncompile('com.github.afollestad.material-dialogs:core:0.8.5.8@aar') {\n        transitive = true\n    }\ncompile('com.github.afollestad.material-dialogs:commons:0.8.5.8@aar')\nit works perfectly for me.\n. @shabbir-dhangot  have you added:\n compile('com.github.afollestad.material-dialogs:core:0.8.5.8@aar') {\n        transitive = true\n    }\nto the build.gradle in your \"app\" directory? \nand  maven {\n            url \"https://jitpack.io\"\n        }\nto the root build.gradle in your project?\nit should really work. \n. @shabbir-dhangot hmm, it's hard to say what could be wrong when not having it infront of you. Except from trying to remove the dependency rebuild, then add it back and  rebuild i can't give any tips unfortunately.\n. @shabbir-dhangot thats very strange, let's hope @afollestad  can change the POM file like @InnoDayHackathonMasta proposed soon.\n. @Falcon5f I will also try that and get back with the results.\n. @Falcon5f  i\u00b4ve tried your solution now and it seams to work good, thank you very much man. Everyone here should try this solution:\n1. Download the latest project from  https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.9\n2. File -> New -> New module (select the commons from the material-dialogs-0.8.5.9) , give a name to it\n3. In the module you just imported, open the build.gradle \nchange \"compile project(...)\" to compile 'com.afollestad.material-dialogs:core:0.8.5.9'\n4. In your apps build.gradle add compile project(':name-of-the-module')\n5. Run a be happy.\n. Sry i accidently closed after I wrote the last comment.  Yeah it should still be open.  No it still doesn't work for me.\n. @ashishg656 just a workaround for now\nhere should try this solution:\n1. Download the latest project from https://github.com/afollestad/material-dialogs/releases/tag/0.8.5.9\n2. File -> New -> New module (select the commons from the material-dialogs-0.8.5.9) , give a name to it\n3. In the module you just imported, open the build.gradle \nchange \"compile project(...)\" to compile 'com.afollestad.material-dialogs:core:0.8.5.9'\n4. In your apps build.gradle add compile project(':name-of-the-module')\n5. Run a be happy.\n. ",
    "shabbir-dhangot": "@afollestad  I need it badly. Any other way to get it. I tried some old version too but the same result.\n. @audiultx in one of my PC 0.8.5.8 @arr not working. It always show a \nError:(21, 13) Failed to resolve: com.github.afollestad.material-dialogs:core:0.8.5.8\nCan you help me with that. \n. Yes @audiultx Its perfectly working in my PC. But when my mate importing that code in his laptop error comes. I have checked everything is proper but still not working. \n. @audiultx  actually I tried everything. I hope @afollestad  solve main issue soon.\n. @audiultx  @daniele-athome @Falcon5f but author not trying to solve this, Might be he having some problem.\n. @afollestad we appreciate your contribution towards the community. Please don't take it wrong.\n. ",
    "InnoDayHackathonMasta": "I have the same problems: \n```\nError:Could not find material-dialogs:core:unspecified.\nRequired by:\n    XXX:app:unspecified > com.afollestad.material-dialogs:commons:0.8.5.9\n```\nI think, according to @jrgonzalezg the POM file should get corrected to:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.afollestad.material-dialogs</groupId>\n  <artifactId>commons</artifactId>\n  <version>0.8.5.9</version>\n  <packaging>aar</packaging>\n  <dependencies>\n    <dependency>\n      <groupId>com.afollestad.material-dialogs</groupId>\n      <artifactId>core</artifactId>\n      <version>0.8.5.9</version>\n      <scope>compile</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.android.support</groupId>\n      <artifactId>appcompat-v7</artifactId>\n      <version>23.4.0</version>\n      <scope>compile</scope>\n    </dependency>\n  </dependencies>\n</project>\nThat should do the trick... \nCan you @afollestad  change these two lines and update the POM on jcenter? \n. ",
    "vonigo": "Hello guys,\nI try to integrate the core library compile 'com.afollestad.material-dialogs:core:0.8.5.9' in my application that does not work, it returns me an error like this Error:Failed to resolve: material-dialogs:core:unspecified.\n However the other lib compile 'com.afollestad.material-dialogs:commons:0.8.5.9' it works well\nI don't know what to do?\n. Hi \nI build the aar commons lib and I tested it works very well, you can download here\ncommons-release-0.8.5.9.zip\n. ",
    "ashishg656": "any solution?\n. ",
    "omidheshmatinia": "I solved it by doing this :\ncompile 'com.afollestad.material-dialogs:core:0.8.5.9'\n    compile ('com.afollestad.material-dialogs:commons:0.8.5.9'){\n        exclude module: 'core'\n    }\nalso add these lines to my main gradle file\nallprojects {\n    repositories {\n        ..........\n        maven { url \"http://dl.bintray.com/drummer-aidan/maven\" }\n        maven { url \"http://dl.bintray.com/drummer-aidan/maven/com/afollestad\" }\n    }\n}\nenjoy ... \n. i fix that problem in a pull request @daniele-athome . waiting for someone to accept&merge that\n. Is there any scenario in which we have new versions that are not published ?!?! if not how do you get them ?!\nAlso if we want to publish a new version, It is a must to change PUBLISH_VERSION Variable, isn't it?\nBoth Core and Common would update parallelly and that version parameter won't hurt anyone i guess @jrgonzalezg \n. It seems you are right :Y\n@jrgonzalezg \n. ",
    "radityagumay": "@omidheshmatinia   answer fix this issue. please close this issue.\n. ",
    "mohsen-shafiee": "where can I getEditText()?\nis it possible at builder? dialog.getEditText() \n. thanks :)\nI got it this way:\ninputType(InputType.TYPE_CLASS_TEXT|InputType.TYPE_TEXT_FLAG_MULTI_LINE)\n. ",
    "architjn": "Use\ncompile 'com.afollestad.material-dialogs:core:0.8.5.9'\nInstead \nThat worked \n. ",
    "DAKZH": "Where link goes to?. ",
    "emretekin": "I got the same error :/\n. I changed my classpath to 'com.android.tools.build:gradle:2.1.0' now \u0131t's works.\nThank You @psohm \n. ",
    "aelimill": "Only the Lollipop devices right? Try to check on pre-lollipop device. This is a google issues, i think :(\nhttps://code.google.com/p/android/issues/detail?id=210467\n. ",
    "psohm": "same problem with galaxy s5 with android 5.0 :(\ni'm compiling the project with android studio 2.1.1\ntryied with google lib 23.4.0 and 23.2.2\nat least I noticed I used an old lib\ncompile('com.github.afollestad.material-dialogs:core:0.8.5.7@aar') {\n    transitive = true\n}\nI migrated to \n    compile 'com.afollestad.material-dialogs:core:0.8.5.9'\nbut it doesn't work also\n. @ismaelaarab  gradle 2.12\n. thank you it solve the problem on the same device again (marshmallow is ok)\nbut I have another issue, the theme is strange http://imgur.com/mJQuAZb\ni don't understand why the accent color is applied, I read https://github.com/afollestad/material-dialogs#global-theming\nI tryied to force the theme, remove the accent color but there is still the big border\nnew MaterialDialog.Builder(this).theme(Theme.LIGHT)\nMy theme is pretty simple (also try to remove all buttonStyle / editTextStyle)\n```\n  ",
    "ismaelaarab10": "@oursgris wich gradle version do you use?\n. @oursgris it is a bug with the android plugin version not with this package. Meanwhile you can copy this to   drawable-v21/abc_edit_text_material.xml \nIt wil show a hazy input form but the crash will be gone.\n``` java\nxml version=\"1.0\" encoding=\"utf-8\"?\n\n<selector>\n    <item android:state_enabled=\"true\" android:state_focused=\"true\" android:drawable=\"@drawable/abc_textfield_activated_mtrl_alpha\"/>\n    <item android:state_enabled=\"true\" android:state_activated=\"true\" android:drawable=\"@drawable/abc_textfield_activated_mtrl_alpha\"/>\n    <item android:state_enabled=\"true\" android:drawable=\"@drawable/abc_textfield_default_mtrl_alpha\"/>\n    <item android:drawable=\"@drawable/abc_textfield_default_mtrl_alpha\"/>\n</selector>\n\n\n```\nYou can also try to downgrade the android plugin version\n. ",
    "yungfan": "Thank you\n. ",
    "sarthak1996": "The .positiveText method of this dialog only takes one parameter (the title of the positive button). I can't pass null as done in the stackoverflow eg..\n. Thanks a lot....\n. ",
    "easycheese": "Disregard, apparently this only runs after the positive button is selected, not upon input change.\n. ",
    "gao746700783": "sorry\uff0ci didn't check you release note 0.8.5.8,it's solved already !!!\n. ",
    "jeremyclee": "Just got the same error running core-0.8.6.2, support lib version 25.0.0. It seems to only occur on Android 4.4.*\nFatal Exception: java.lang.NullPointerException\n       at android.support.v4.graphics.drawable.DrawableWrapperDonut.getState(DrawableWrapperDonut.java:147)\n       at android.support.v4.graphics.drawable.DrawableWrapperDonut.setTintList(DrawableWrapperDonut.java:267)\n       at android.support.v4.graphics.drawable.DrawableCompatBase.setTintList(DrawableCompatBase.java:42)\n       at android.support.v4.graphics.drawable.DrawableCompat$BaseDrawableImpl.setTintList(DrawableCompat.java:94)\n       at android.support.v4.graphics.drawable.DrawableCompat.setTintList(DrawableCompat.java:391)\n       at com.afollestad.materialdialogs.internal.MDTintHelper.setTint(MDTintHelper.java:45)\n       at com.afollestad.materialdialogs.DefaultAdapter.getView(DefaultAdapter.java:67)\n       at android.widget.AbsListView.obtainView(AbsListView.java:2310)\n       at android.widget.ListView.measureHeightOfChildren(ListView.java:1274)\n       at android.widget.ListView.onMeasure(ListView.java:1186)\n       at android.view.View.measure(View.java:16749)\n       at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5295)\n       at android.widget.FrameLayout.onMeasure(FrameLayout.java:310)\n       at android.view.View.measure(View.java:16749)\n       at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5295)\n       at android.widget.LinearLayout.measureChildBeforeLayout(LinearLayout.java:1404)\n       at android.widget.LinearLayout.measureVertical(LinearLayout.java:695)\n       at android.widget.LinearLayout.onMeasure(LinearLayout.java:588)\n       at android.view.View.measure(View.java:16749)\n       at com.afollestad.materialdialogs.internal.MDRootLayout.onMeasure(MDRootLayout.java:199)\n       at android.view.View.measure(View.java:16749)\n       at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5295)\n       at android.widget.FrameLayout.onMeasure(FrameLayout.java:310)\n       at android.view.View.measure(View.java:16749)\n       at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5295)\n       at android.widget.LinearLayout.measureChildBeforeLayout(LinearLayout.java:1404)\n       at android.widget.LinearLayout.measureVertical(LinearLayout.java:695)\n       at android.widget.LinearLayout.onMeasure(LinearLayout.java:588)\n       at android.view.View.measure(View.java:16749)\n       at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5295)\n       at android.widget.FrameLayout.onMeasure(FrameLayout.java:310)\n       at com.android.internal.policy.impl.PhoneWindow$DecorView.onMeasure(PhoneWindow.java:2439)\n       at android.view.View.measure(View.java:16749)\n       at android.view.ViewRootImpl.performMeasure(ViewRootImpl.java:2080)\n       at android.view.ViewRootImpl.measureHierarchy(ViewRootImpl.java:1176)\n       at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:1380)\n       at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:1063)\n       at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:5993)\n       at android.view.Choreographer$CallbackRecord.run(Choreographer.java:761)\n       at android.view.Choreographer.doCallbacks(Choreographer.java:574)\n       at android.view.Choreographer.doFrame(Choreographer.java:544)\n       at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:747)\n       at android.os.Handler.handleCallback(Handler.java:733)\n       at android.os.Handler.dispatchMessage(Handler.java:95)\n       at android.os.Looper.loop(Looper.java:136)\n       at android.app.ActivityThread.main(ActivityThread.java:5584)\n       at java.lang.reflect.Method.invokeNative(Method.java)\n       at java.lang.reflect.Method.invoke(Method.java:515)\n       at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1268)\n       at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1084)\n       at dalvik.system.NativeStart.main(NativeStart.java)\n. ",
    "Vall0n": "Hi @CeJienAJPC,\nthis is not a bug. You can deny the custom color selection by setting the option \"allowUserColorInput\" to false.\nbuilder.allowUserColorInput(false);\nBest regards, \nVall0n\n. Hi, \nOK, I didn't knew it, thanks for clarifying!\nBest regards,\nVall0n\n. Hi @wizofaus \nIf you want to close your dialog after the user  hits the Done or Enter Button call dialog.dismiss() or dlg.dismiss() in the onEditorAction.\n``` Java\nclass OnShowListener implements MaterialDialog.OnShowListener\n{\n    @Override\n    public void onShow(DialogInterface dialog)\n    {\n        final MaterialDialog dlg = (MaterialDialog)dialog;\n        dlg.getInputEditText().setOnEditorActionListener(new TextView.OnEditorActionListener() {\n            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {\n                if ((event != null && (event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) || (actionId == EditorInfo.IME_ACTION_DONE)) {\n                    dialog.dismiss(); // or dlg.dismiss() alternatively\n                }\n                return false;\n            }\n        });\n    }\n}\n```\nHope it helps!\nBest regards,\nVall0n\n. ",
    "CeJienAJPC": "@Vall0n \nThank you for the solution. I know it ain't a bug. I was just looking if there was a way. Thanks again\n. ",
    "franklyinnovations": "got it !\nIn DialogInit class\nyou need to replace \njava\ndialog.title = (TextView) dialog.view.findViewById(R.id.title);\nas\ndialog.title = (TextView) dialog.view.findViewById(R.id.brand);\n. ",
    "trr-amsiq": "Thanks \n. Hi @afollestad,\nHas this issue been fixed? I'm seeing this issue on ZTE devices also. using 0.9.4.4. Fabric. I'm not calling any typeface setter. Wouldn't this happen on other devices if what you are saying is true?\n@afollestad \nThis is the code running:\n```\nnew MaterialDialog.Builder(mainActivity)\n                .title(mainActivity.getString(R.string.app_name))\n                .content(mainActivity.getString(R.string.Application_Dialog_titleAboutToClose))\n                .positiveText(mainActivity.getString(R.string.Application_Dialog_actionClose))\n                .negativeText(mainActivity.getString(R.string.Shared_actionCancel))\n                .onPositive(new MaterialDialog.SingleButtonCallback() {\n                    @Override\n                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                        if (mainActivity != null) {\n                            mainActivity.finish();\n                        }\n                    }\n                })\n                .onNegative(new MaterialDialog.SingleButtonCallback() {\n                    @Override\n                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                        dialog.dismiss();\n                    }\n                })\n                .iconRes(R.drawable.ic_shared_icons_shared_alert)\n                .show();\n. @afollestad won't fix ?? Really!!. What I mean is that an issue should not be closed if it is a bug.\nKeep it open so it is obvious that a pull request is welcome.\nI added these two lines to styles.xml and it stopped crashing.\nNotoSans-Regular.ttf\nNotoSans-Regular.ttf\n```. ",
    "jymycc": "did you fix that ? what's the issue?\n. ",
    "jushlwest": "the same issue\n. ",
    "diceroll123": "In the meantime I did this on the dialog builder. Set lightMode to use your preference value...\n``` java\n.titleColorRes((lightMode ? android.R.color.black : android.R.color.white))\n.contentColorRes((lightMode ? android.R.color.black : android.R.color.white))\n.backgroundColorRes((lightMode ? android.R.color.white : R.color.dark_background))\n```\nIt's not the same but it'll do for now. :stuck_out_tongue_closed_eyes: \n. ",
    "garretyoder": "I suggested this because the dialog.getTitle() method was returning a completely different resource Id than the two dialog's titles. A bit later I discovered it was returning the value of titleSub from the builder, which I had the same between the two dialogs. Not sure if this is the intended functionality or a bug, but now that I know what value it's returning I can work around it. That possible bug aside, I still think it should support the tag, simply for some people may want multiple dialogs with the same title. In a bit I'll submit a pull request to add it in.\nEDIT:\nAfter looking through the code to add in tag, I see it is indeed the intended functionality, it just doesn't seem like it would work too well because then you'd always be getting the titleSub inside the callback.\nEDIT2:\nPull request at afollestad/material-dialogs#1103\n. ",
    "summers314": ":)\n. ",
    "wizofaus": "That doesn't trigger the callbacks you normally get when clicking OK.\nAnd I don't really understand why you've closed this - would you really not consider it as a feature worth adding (personally I think it should be the default as currently the \"done\" button on the keyboard isn't really useful at all)?\n. ",
    "Arisono": "Thanks, I already know.\n. ",
    "sunit09": "I think, the divider will only be visible, if the content is scroll-able.. ",
    "bejibx": "@afollestad I think you are not quite right about it. There is a Dialog#onBackPressed() method which you can use to catch back button press. BackButtonCallback could be really usefull.\n. Great job, thank you!\n. ",
    "bmbariah": "@bejibx You can handle onBackPressed when dialog is open like this...\n``` java\ndialog.setOnKeyListener(new Dialog.OnKeyListener() {\n            @Override\n            public boolean onKey(DialogInterface arg0, int keyCode,\n                                 KeyEvent event) {\n                if (keyCode == KeyEvent.KEYCODE_BACK) {\n                    Log.i(\"back key pressed\", \"Back key pressed\");\n                    if (condition)\n                        dialog.dismiss();\n                }\n                return true;\n            }\n});\ndialog.show();\n```\n. ",
    "douglasjunior": "Right, then I leave a suggestion. \ud83d\ude04 \nIt would be interesting to have an option to override the default style using only the styles.xml, just as happens in native Dialogs.\nAdd the theme manually in each layout is bad, because the same layout can be reused in others parts of the app.\nThank you for create the library.\n. I did work. Apparently the internal components of MaterialDialog is using the default themes.\nThank you.\n. ",
    "erseno": "As far as I know you can only remove the top and bottom distance by having no .title and no buttons (.positive, .neutral and .negative) \n. Hi apologies for the late reply. Thanks for adding the API to force unstacking the buttons.\nI will give the sample a try on the Samsung S7\nThis is the solution I came up with in the meantime, it basically checks if the buttons are stacked and uses short versions of strings that help in buttons not stacking\n``` java\npublic void setShortActionBtnText(@NonNull MaterialDialog materialDialog,\n                                      @StringRes int positiveBtnShortRes,\n                                      @StringRes final int negativeBtnShortRes,\n                                      @StringRes final int neutralBtnShortRes) {\n    mPositiveBtnShortRes = positiveBtnShortRes;\n    mNegativeBtnShortRes = negativeBtnShortRes;\n    mNeutralBtnShortRes = neutralBtnShortRes;\n\n    materialDialog.setOnShowListener(new DialogInterface.OnShowListener() {\n        @Override\n        public void onShow(DialogInterface dialog) {\n            MaterialDialog materialDialog = ((MaterialDialog) dialog);\n            //We check if the button is stacked by checking if the width of the button is more than half of the dialog\n            //which is only possible if the button is stacked.\n\n            //We get the positive button as it is something that every dialog should have so we check this\n            MDButton positiveButton = materialDialog.getActionButton(DialogAction.POSITIVE);\n\n            if (positiveButton.getWidth() > (materialDialog.getWindow().getDecorView().getWidth() / 2)) {\n                if (mPositiveBtnShortRes != 0) {\n                    positiveButton.setText(mPositiveBtnShortRes);\n                }\n\n                if (mNegativeBtnShortRes != 0) {\n                    materialDialog.getActionButton(DialogAction.NEGATIVE).setText(negativeBtnShortRes);\n                }\n\n                if (mNeutralBtnShortRes != 0) {\n                    materialDialog.getActionButton(DialogAction.NEUTRAL).setText(neutralBtnShortRes);\n                }\n            }\n        }\n    });\n}\n\n```\n. I do not have the Samsung S7 to test this at the moment but I will let you know my findings.\nThe only difference from the image you posted is that all 3 buttons (positive, neutral and negative) should be present with stacking. \n. ",
    "rushilMethsof": "I am facing the same issue , using version \"0.8.6.0\" \nIt was working few days ago but not anymore\n. I did that , but its still the same , no progress animation whatsoever\n. API : 4.1.2\ndevice: samsung , Model number : Gt-l18730\ni havent verified the sample app yet , but I will do it soon let you know\n. yes it is samsung galaxy express\n. @jfresen :+1:\nyep Animation Scale 1x did the trick , salute for digging deeper to find a solution\n. ",
    "Johann673": "The progressBar use the AccentColor in your theme. Try to change this attribute, or you can redifined color for this dialog using: \n    .widgetColorRes(R.color.your_progress_color)\n. ",
    "jfresen": "I tested the sample app on several more devices and added the result to the list in the issue description. I can't find any clear pattern, so it's a bit of a mystery to me.\n. @rushilMethsof: on which device and with what android version did you see the bug?\nCan you verify that the sample application from this project did not show the indeterminate progress bar?\n. Thanks for following up! I'll add the device to the list of affected devices after confirmation of the bug with the sample app. It's the Samsung Galaxy Express, right? http://www.gsmarena.com/samsung_galaxy_express_i8730-5271.php\n. I ran another test this morning that puzzles me a bit. I happen to have access to two different Galaxy Tab 2 10.1's, running the same android version, having the same build number and the same kernel version. The only differences are the date they were bought (by about one or two years) and the language that is set (Dutch vs English).\nI built the sample project on the commit described above, sent the same apk to both devices and guess what... The indeterminate progress bar shows on the tablet that is set to Dutch, but not on the tablet that is set to English.\nFollowup: language didn't matter. The new device still showed the indeterminate progress bar when set to English, and the old device still did not show the indeterminate progress bar when set to Dutch.\n. My colleague has finally found the issue, and it is both embarrassing and understandable at the same time. The culprit is the developer option 'Animation duration scale' which was set to 'Animation off'. Setting this to 'Animation scale 1x' magically made the animation appear again on the S3 and the 'affected' Tab 2 10.1. Visa versa, setting it to 'Animation off' on some 'non-affected' devices, or even devices with a different Android version (e.g., Android 6.0.1), produced the same 'bug' on those devices.\nI suggest to add a Known Issue or something similar to the readme and make everyone aware of the fact that this option causes several material widgets to 'vanish' (actually: stop the animation in the first completely transparent frame).\n. ",
    "SoloRobo": "@jfresen \nExactly this issue and resolution myself, I had Animation duration scale: Animation scale off set in Developer options and this \"broke\" the progressBar Horizonal indeterminate true option on my Sony Xperia, displaying only the background tint with not foreground or progress bar itself being displayed.\nOnce I had set it back to 1x everything worked as expect.\nI honestly thought it was an Xperia Android build issue, it was instead a developer bored of animation transitions issue. . ",
    "vijayanandkh": "I had disabled that option due to JUnit Testing code execution and felt this progress spinner is broken in my app. Did lot of analysis and hit this page. Thanks for reminding. \n  . ",
    "Igor-Baimastruc-Technosoft": "Hi, the issue is reproduced on lower resolution screens event without buttons stacking.\nI have Galaxy XCover 3 (480 x 800 pixels (~207 ppi pixel density)) running Android OS 6.0.1\n\n. ",
    "meizi88": "same problem above , samsung and oppo has same problem. ",
    "MisterY": "Just reverted back to 0.8.5.9 and the list opens.\n. https://github.com/afollestad/material-dialogs/commit/0821d5202c65510e4cc896e44341880eeddd0cc0\n. Hm, no, not yet. It is not even showing as available in the SDK Manager. Must be still in the pre-release channel?\nShouldn't this be compatible with older versions of the support library?\nUpdate: Just checked - I have the preview tools enabled but still no trace of the support library v24. This is interesting.\n. I've added the Support library 24.0.0 but still the same exception with dialogs 0.8.6.1\n. Right. I mean, I've upgraded all the support-related version numbers to 24:\n, 'com.android.support:support-v4:24.0.0'\n            , 'com.android.support:appcompat-v7:24.0.0',\n            'com.android.support:cardview-v7:24.0.0',\n            'com.android.support:design:24.0.0',    \n            'com.android.support:preference-v14:24.0.0',\n            'com.android.support:support-annotations:24.0.0',\nWhat could be the problem in your opinion?\n. ",
    "Ovoke": "From the error log, maybe you should try changing com.afollestad.materialdialogs.R.attr.colorBackgroundFloating or R.attr.colorBackgroundFloating to \nandroid.R.attr.colorBackgroundFloating in the DialogInit.java file at line 80\n. ",
    "antonioallen": "It seems there is a bug in the latest update. I just went ahead and downgraded to v0.7.9.0 adding the whole library in the project. Works perfectly. Follow this link https://github.com/afollestad/material-dialogs/releases?after=0.7.9.1 \n. No problem glad I could help!\nOn Tue, Jul 12, 2016 at 6:33 AM Nabeel Kottol notifications@github.com\nwrote:\n\nThanks @aaadesignstudios https://github.com/aaadesignstudios it worked.\nsaved my day\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/1123#issuecomment-232001742,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AK-Fm5taBLUGb7iWZzKA5M-cpVy5Gz4mks5qU22GgaJpZM4JISLi\n.\n. \n",
    "nabeelpkl": "Thanks @aaadesignstudios it worked. saved my day\n. ",
    "Tukajo": "@afollestad Could you state what the correct Support Library would be for 9.0.0+?\n. @afollestad I had looked, the reason I ask however is I still seeing similar errors to what @nabeelpkl originally commented. Despite having \"matching\" library versions.\nSorry if I was not clear and thanks for your prompt reply.\n. ",
    "ManuBabu": "java.lang.NoSuchFieldError: No static field colorBackgroundFloating of type I in class Lcom/afollestad/materialdialogs/R$attr; or its superclasses (declaration of 'com.afollestad.materialdialogs.R$attr' appears in /data/app/manu.poketcommerce.com.openofficeuser-2/base.apk).  @afollestad, i am using these libraries.. still i am getting this error \n  please help\nError: java.lang.NoSuchFieldError: No static field colorBackgroundFloating of type I in class Lcom/afollestad/materialdialogs/R$attr; or its superclasses (declaration of 'com.afollestad.materialdialogs.R$attr' appears in /data/app/manu.mobile.com.apps-2/base.apk)\ncompile 'com.android.support:appcompat-v7:25.2.0'\ncompile 'com.android.support:support-v4:25.2.0'\ncompile 'com.afollestad.material-dialogs:commons:0.8.6.1'\ncompile 'com.jpardogo.materialtabstrip:library:1.1.0'\ncompile 'com.jakewharton:butterknife:8.1.0'\n\n. @afollestad \n    compile 'com.android.support:appcompat-v7:25.3.0'\n    compile 'com.android.support:support-v4:25.3.0'\n    compile 'com.afollestad.material-dialogs:commons:0.9.4.1'\n    compile 'com.jpardogo.materialtabstrip:library:1.1.0'\n    compile 'com.jakewharton:butterknife:8.1.0'\n :( still no luck\n. ",
    "RezaOruji": "@afollestad  i have read it . but i couldn't find such thing . the cancelable() does not solve it .\n. ",
    "deniztuna": "You can use a custom layout for that purpose. For example you can use following piece for assigning a custom layout to your dialog. On your custom dialog simply create your needs as usual.\nfinal MaterialDialog.Builder builder = new MaterialDialog.Builder(ctx);\n        builder.customView(layoutID, false);\nIf you want to reach out your custom views afterwards, you can directly use dialog itself to reach views as follows:\nButton yourButton = (Button) yourDialog.getView().findViewById(R.id.yourButton);\n. ",
    "oalpayli": "Ok Thank You. I will try customview. \n. ",
    "Dagzo": "Thanks for your quick reply.\nYou mean it is a bug of the device, right?\n. Noted with thanks :smile:\n. ",
    "faezesaghafi": "I want to use this dialogs in my apps because these can change direction of multiple choice list. I have CollapsingToolbarLayout in my app too, but when I add this lib to my gradle file this error happens. what can I do?\nFATAL EXCEPTION: main\n                                                                              Process: ir.yasin.dordaneh.shahre_namha, PID: 6940\n                                                                              android.view.InflateException: Binary XML file line #138: Error inflating class android.support.design.widget.CollapsingToolbarLayout\n                                                                                  at android.view.LayoutInflater.createView(LayoutInflater.java:620)\n                                                                                  at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:696)\n                                                                                  at android.view.LayoutInflater.rInflate(LayoutInflater.java:755)\n                                                                                  at android.view.LayoutInflater.rInflate(LayoutInflater.java:758)\n                                                                                  at android.view.LayoutInflater.inflate(LayoutInflater.java:492)\n                                                                                  at android.view.LayoutInflater.inflate(LayoutInflater.java:397)\n                                                                                  at ir.yasin.dordaneh.shahre_namha.Show_Name.NameShowFragment.onCreateView(NameShowFragment.java:44)\n                                                                                  at android.support.v4.app.Fragment.performCreateView(Fragment.java:2074)\n                                                                                  at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1104)\n                                                                                  at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1286)\n                                                                                  at android.support.v4.app.BackStackRecord.run(BackStackRecord.java:758)\n                                                                                  at android.support.v4.app.FragmentManagerImpl.execSingleAction(FragmentManager.java:1632)\n                                                                                  at android.support.v4.app.BackStackRecord.commitNowAllowingStateLoss(BackStackRecord.java:637)\n                                                                                  at android.support.v4.app.FragmentStatePagerAdapter.finishUpdate(FragmentStatePagerAdapter.java:166)\n                                                                                  at android.support.v4.view.ViewPager.populate(ViewPager.java:1237)\n                                                                                  at android.support.v4.view.ViewPager.populate(ViewPager.java:1085)\n                                                                                  at android.support.v4.view.ViewPager.onMeasure(ViewPager.java:1611)\n                                                                                  at android.view.View.measure(View.java:16538)\n                                                                                  at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5140)\n                                                                                  at android.support.design.widget.CoordinatorLayout.onMeasureChild(CoordinatorLayout.java:668)\n                                                                                  at android.support.design.widget.CoordinatorLayout.onMeasure(CoordinatorLayout.java:735)\n                                                                                  at android.view.View.measure(View.java:16538)\n                                                                                  at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5140)\n                                                                                  at android.widget.FrameLayout.onMeasure(FrameLayout.java:310)\n                                                                                  at android.support.v7.widget.ContentFrameLayout.onMeasure(ContentFrameLayout.java:135)\n                                                                                  at android.view.View.measure(View.java:16538)\n                                                                                  at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5140)\n                                                                                  at android.widget.LinearLayout.measureChildBeforeLayout(LinearLayout.java:1406)\n                                                                                  at android.widget.LinearLayout.measureVertical(LinearLayout.java:697)\n                                                                                  at android.widget.LinearLayout.onMeasure(LinearLayout.java:590)\n                                                                                  at android.view.View.measure(View.java:16538)\n                                                                                  at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5140)\n                                                                                  at android.widget.FrameLayout.onMeasure(FrameLayout.java:310)\n                                                                                  at android.view.View.measure(View.java:16538)\n                                                                                  at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5140)\n                                                                                  at android.widget.LinearLayout.measureChildBeforeLayout(LinearLayout.java:1406)\n                                                                                  at android.widget.LinearLayout.measureVertical(LinearLayout.java:697)\n                                                                                  at android.widget.LinearLayout.onMeasure(LinearLayout.java:590)\n                                                                                  at android.view.View.measure(View.java:16538)\n                                                                                  at android.view.ViewGroup.measureChildWithMargins(ViewGroup.java:5140)\n                                                                                  at android.widget.FrameLayout.onMeasure(FrameLayout.java:310)\n                                                                                  at com.android.internal.policy.impl.PhoneWindow$DecorView.onMeasure(PhoneWindow.java:2422)\n                                                                                  at android.view.View.measure(View.java:16538)\n                                                                                  at android.view.ViewRootImpl.performMeasure(ViewRootImpl.java:1964)\n                                                                                  at android.view.ViewRootImpl.measureHierarchy(ViewRootImpl.java:1160)\n                                                                                  at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:1342)\n                                                                                  at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:1047)\n                                                                                  at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:5896)\n                                                                                  at android.view.Choreographer$CallbackRecord.run(Choreographer.java:761)\n                                                                                  at android.view.Choreographer.doCallbacks(Choreographer.java:574)\n                                                                                  at android.view.Choreographer.doFrame(Choreographer.java:544)\n                                                                                  at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:747)\n                                                                                  at android.os.Handler.handleCallback(Handler.java:733)\n                                                                                  at android.os.Handler.dispatchMessage(Handler.java:95)\n                                                                                at android.os.Looper.loop(Lo\n. ",
    "artests87": "Unfortunately, MIME type is right.\n2016-07-20 21:18 GMT+03:00 Aidan Follestad notifications@github.com:\n\nThe only thing I can think of is that you're using the wrong value for the\nMIME type.\nJSON is application/json\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/1131#issuecomment-234035285,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ANhcYZbt85dx7sO2v-8QIgRmOahvqFjvks5qXmZ0gaJpZM4JRDxw\n.\n. \n",
    "zhangqiang9": "i use the settings,\nclasspath 'com.android.tools.build:gradle:2.1.0'\n......\ncompile 'com.android.support:appcompat-v7:24.1.0'\ncompile 'com.android.support:support-v4:24.1.0'\nit does not work.Also throw the exception.\n. ",
    "cha25228": "issue\n. ",
    "abhinituk": "inputRangeRes(2, 20, R.color.material_red_500)  works well initially but once I have given some input & then erasing the input causes the input dialog to its default behaviour.\n. Link: https://github.com/abhinituk/StockHawk/blob/Detail_Activity_Implementation/app/src/main/java/com/sam_chordas/android/stockhawk/ui/MyDialogFragment.java\nYou can have a look at it. Material dialog has default behaviour if we erase the input. \nIf you wish, you can clone repo & run the project to reproduce the error.\nhttps://github.com/abhinituk/StockHawk/tree/Detail_Activity_Implementation\n. It's a private repo which I have forked from Udacity GitHub. If you wish, I can mail you the complete project zip file with detailed information to reproduce the error.\n. I am using the latest version of the library but still the problem exists. I have updated the comment which shows that positive text button is disabled earlier but when I write some input & erase the input, positive text button is enabled. \nFor more information please see the project: \nStockHawk.zip\n. Still the issue exist after updating the library version.\n. ``` java\npublic class MyDialogFragment extends DialogFragment {\n    private static final String TAG = \"tag\";\n    private static final String ADD = \"add\";\n    private static final String SYMBOL = \"symbol\";\n    private final String LOG_TAG = getClass().getSimpleName();\n    private String mInputSymbol;\n    private Intent mServiceIntent;\n@Override\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\n\n    MaterialDialog dialog = new MaterialDialog.Builder(getActivity())\n            .title(R.string.symbol_search)\n            .content(R.string.content_test)\n            .inputRange(1, 20)\n            .inputType(InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS)\n            .positiveText(R.string.positive_text)\n            .negativeText(R.string.negative_text)\n            .alwaysCallInputCallback()\n            .input(R.string.input_hint, R.string.input_prefill, new MaterialDialog.InputCallback() {\n                @Override\n                public void onInput(@NonNull MaterialDialog dialog, CharSequence input) {\n\n                    if (input.toString().contains(\" \")) {\n                        dialog.setContent(R.string.whitespace);\n                        dialog.getActionButton(DialogAction.POSITIVE).setEnabled(false);\n                    } else {\n                        dialog.setContent(R.string.content_test);\n                        dialog.getActionButton(DialogAction.POSITIVE).setEnabled(true);\n                        mInputSymbol = input.toString();\n\n                    }\n                }\n            })\n\n            .onPositive(new MaterialDialog.SingleButtonCallback() {\n                @Override\n                public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                    Cursor c = getActivity().getContentResolver().query(QuoteProvider.Quotes.CONTENT_URI,\n                            new String[]{QuoteColumns.SYMBOL}, QuoteColumns.SYMBOL + \"= ?\",\n                            new String[]{mInputSymbol}, null);\n                    if ((c != null ? c.getCount() : 0) != 0) {\n                        Toast toast =\n                                Toast.makeText(getActivity(), R.string.stock_already_saved,\n                                        Toast.LENGTH_LONG);\n                        toast.setGravity(Gravity.CENTER, Gravity.CENTER, 0);\n                        toast.show();\n                        return;\n                    } else {\n                        // Add the stock to DB\n                        mServiceIntent = new Intent(getActivity(), StockIntentService.class);\n                        mServiceIntent.putExtra(TAG, ADD);\n                        mServiceIntent.putExtra(SYMBOL, mInputSymbol);\n                        getActivity().startService(mServiceIntent);\n                    }\n                    if (c != null) {\n                        c.close();\n                    }\n                }\n            })\n            .build();\n\n    return dialog;\n}\n\n}\n```\n. Please have a look at DialogFragment class which I am using.\n. Alright @afollestad , Thanks for helping me out.\n. ",
    "mikegr": "I tracked down the reason why AlertDialog from the support library works. \nThe Dialog is calling:\nWindow.setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM,WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\nI have no idea why this flag is required to set. \n. ",
    "rio258k": "This still appears to be an issue, espresso core 3.1.0 can match text and tags in the dialog, but clicking the positive button doesn't result in the handler being invoked or the dialog being dismissed. . ",
    "SanjayGubaju": "it is in fact a library issue. Collapsing toolbar works when i remove the library dependency from app.gradle.\n. Ok, i'll check it out. Thank you for the quick response\n. ",
    "Berlon": "Thanks for the reply. I have heard back from my users and it is also in LG G4, G3 and V10 and HTC M One and Asus Nexus 7.\n. I have a little more information. I have narrowed it down to the nested dialog's. \n``` java\npublic class ExportDialog extends AppCompatActivity {\nprivate DatabaseManager mDbHelper;\nprivate int STORAGE_PERMISSION_CODE = 23;\n\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    Fabric.with(this, new Crashlytics());\n    Fabric.with(this);\n    Fabric.with(this, new Answers());\n    mDbHelper = new DatabaseManager(this);\n    mDbHelper.open();\n    //First checking if the app is already having the permission\n    if (isReadStorageAllowed()) {\n        //If permission is already having then showing the toast\n        new MaterialDialog.Builder(this)\n                .autoDismiss(true)\n                .title(\"Backup Utility\")\n                .content(\"Backup as a Database File which is not editable or as a CSV File that can be edited. If you are not familiar with CSV choose Database File.\")\n                .positiveText(\"As DB File\")\n                .negativeText(\"As CSV File\")\n                .onPositive(new MaterialDialog.SingleButtonCallback() {\n                    @Override\n                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                        new MaterialDialog.Builder(ExportDialog.this)\n                                .title(\"Backup as Database File\")\n                                .content(\"This will backup the entire database of Recipes and Flavors. The file will be located on your devices storage in a file called ejuice as \\\"data\\\".\")\n                                .positiveText(\"Backup Now\")\n                                .onPositive(new MaterialDialog.SingleButtonCallback() {\n                                    @Override\n                                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                                        if (Environment.getExternalStorageState().equals(\n                                                Environment.MEDIA_MOUNTED)) {\n\n                                            exportdb();// Loads the list\n\n                                        } else if (Environment.getExternalStorageState().equals(\n                                                Environment.MEDIA_UNMOUNTED)) {\n                                            Toast.makeText(ExportDialog.this, \"External storage is not available, unable to export data.\",\n                                                    Toast.LENGTH_SHORT).show();\n                                        }\n                                        finish();\n                                    }\n                                })\n                                .show();\n                    }\n                })\n                .onNegative(new MaterialDialog.SingleButtonCallback() {\n                    @Override\n                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n\n                        new MaterialDialog.Builder(ExportDialog.this)\n                                .autoDismiss(true)\n                                .title(\"Backup as CSV File\")\n                                .content(\"I would like to backup ...\")\n                                .positiveText(\"Recipes only\")\n                                .negativeText(\"Flavors only\")\n                                .neutralText(\"All\")\n                                .onPositive(new MaterialDialog.SingleButtonCallback() {\n                                    @Override\n                                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                                        exportCSV();\n                                        dialog.dismiss();\n                                    }\n                                })\n                                .onNegative(new MaterialDialog.SingleButtonCallback() {\n                                    @Override\n                                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                                        exportCSV2();\n                                        dialog.dismiss();\n                                    }\n                                })\n                                .onNeutral(new MaterialDialog.SingleButtonCallback() {\n                                    @Override\n                                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                                        exportCSVAll();\n                                        dialog.dismiss();\n                                    }\n                                })\n\n                                .show();\n                    }\n                })\n\n                .show();\n        //Toast.makeText(Export.this, \"You already have the permission\", Toast.LENGTH_LONG).show();\n        //Existing the method with return\n        return;\n    } else {\n        requestStoragePermission();\n    }\n}\n\n//We are calling this method to check the permission status\nprivate boolean isReadStorageAllowed() {\n    //Getting the permission status\n    int result = ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE);\n\n    //If permission is granted returning true\n    if (result == PackageManager.PERMISSION_GRANTED)\n        return true;\n\n    //If permission is not granted returning false\n    return false;\n}\n\n//Requesting permission\nprivate void requestStoragePermission() {\n\n    if (ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_EXTERNAL_STORAGE)) {\n        //If the user has denied the permission previously your code will come to this block\n        //Here you can explain why you need this permission\n        //Explain here why you need this permission\n    }\n\n    //And finally ask for the permission\n    ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, STORAGE_PERMISSION_CODE);\n}\n\n//This method will be called when the user will tap on allow or deny\n@Override\npublic void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n\n    //Checking the request code of our request\n    if (requestCode == STORAGE_PERMISSION_CODE) {\n\n        //If permission is granted\n        if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n\n            new MaterialDialog.Builder(this)\n                    .autoDismiss(true)\n                    .cancelable(false)\n                    .title(\"Backup Utility\")\n                    .content(\"Backup as a Database File which is not editable or as a CSV File that can be edited. If you are not familiar with CSV choose Database File.\")\n                    .positiveText(\"As DB File\")\n                    .negativeText(\"As CSV File\")\n                    .onPositive(new MaterialDialog.SingleButtonCallback() {\n                        @Override\n                        public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                            new MaterialDialog.Builder(ExportDialog.this)\n                                    .autoDismiss(true)\n                                    .cancelable(false)\n                                    .title(\"Backup as Database File\")\n                                    .content(\"This will backup the entire database of Recipes and Flavors. The file will be located on your devices storage in a file called ejuice as \\\"data\\\".\")\n                                    .positiveText(\"Backup Now\")\n                                    .onPositive(new MaterialDialog.SingleButtonCallback() {\n                                        @Override\n                                        public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                                            if (Environment.getExternalStorageState().equals(\n                                                    Environment.MEDIA_MOUNTED)) {\n\n                                                exportdb();// Loads the list\n\n                                            } else if (Environment.getExternalStorageState().equals(\n                                                    Environment.MEDIA_UNMOUNTED)) {\n                                                Toast.makeText(ExportDialog.this, \"External storage is not available, unable to export data.\",\n                                                        Toast.LENGTH_SHORT).show();\n                                            }\n                                            finish();\n                                        }\n                                    })\n                                    .show();\n                        }\n                    })\n                    .onNegative(new MaterialDialog.SingleButtonCallback() {\n                        @Override\n                        public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n\n                            new MaterialDialog.Builder(ExportDialog.this)\n                                    .autoDismiss(true)\n                                    .cancelable(false)\n                                    .title(\"Backup as CSV File\")\n                                    .content(\"I would like to backup ...\")\n                                    .positiveText(\"Recipes only\")\n                                    .negativeText(\"Flavors only\")\n                                    .neutralText(\"All\")\n                                    .onPositive(new MaterialDialog.SingleButtonCallback() {\n                                        @Override\n                                        public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                                            exportCSV();//Recipes\n                                            dialog.dismiss();\n                                            Toast.makeText(ExportDialog.this, \"Positive\", Toast.LENGTH_LONG).show();\n                                            finish();\n                                        }\n                                    })\n                                    .onNegative(new MaterialDialog.SingleButtonCallback() {\n                                        @Override\n                                        public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                                            exportCSV2();//Flavors\n                                            dialog.dismiss();\n                                            Toast.makeText(ExportDialog.this, \"Negative\", Toast.LENGTH_LONG).show();\n                                        }\n                                    })\n                                    .onNeutral(new MaterialDialog.SingleButtonCallback() {\n                                        @Override\n                                        public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                                            exportCSVAll();//Both\n                                            dialog.dismiss();\n                                            Toast.makeText(ExportDialog.this, \"Neutral\", Toast.LENGTH_LONG).show();\n                                        }\n                                    })\n                                    .show();\n                        }\n                    })\n\n                    .show();\n            //Displaying a toast\n            // Toast.makeText(this, \"Permission granted now you can read the storage\", Toast.LENGTH_LONG).show();\n        } else {\n            //Displaying another toast if permission is not granted\n            new MaterialDialog.Builder(this)\n                    .autoDismiss(true)\n                    .cancelable(false)\n                    .title(\"Oops, Permissions Denied!\")\n                    .content(\"By denying permissions, you will not be able to backup or restore your Recipes and Flavors list to the SDCard.\")\n                    .positiveText(\"Grant Permissions\")\n                    .negativeText(\"Cancel\")\n                    .onNegative(new MaterialDialog.SingleButtonCallback() {\n                        @Override\n                        public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                            dialog.dismiss();\n\n                        }\n                    })\n                    .onPositive(new MaterialDialog.SingleButtonCallback() {\n                        @Override\n                        public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n\n                            requestStoragePermission();\n                        }\n                    })\n                    .show();\n            //Toast.makeText(this, \"Oops you just denied the permission\", Toast.LENGTH_LONG).show();\n        }\n    }\n}\n\n```\nMaybe this will help? Thanks for a great library! and all your efforts.\n. OK, I removed all the calls to dismiss.dialog, autodismiss() removed all the nested dialogs to there own private void. I still get the artifact.\n. afollestad,\nI found the issue, but I do not know how to fix it. The activity is being called from a preference screen which had a theme set to it. I removed the theme and the artifact is gone. But the preference screen is no longer there. So basically, I want to call the dialog from a preference screen.\n. ",
    "MSay2": "Sorry I'm new to Github and I do not have the habit. Merci for your reply\n. ",
    "thibautd": "Thanks for your answer I will do it differently !\n. This is not always true. If the parent fragment is a retained fragment (which is my case), the instance of the parent fragment does not change on screen rotation, and that's a valid use case imho.\n. ",
    "aresares": "Solved, just added android:theme=\"@style/AppTheme\" to my application in the manifest file\n. ",
    "abcghy": "I had the same problem before. And my textColorSecondary was #FFFFFF. I changed it and it worked.\n. ",
    "riadhnet": "same happen with me, i can't change , when i change \n  @color/white\nit changes , but i can't do this for my theme, because this will change other component colors too, \nany way to change this only for the radio button ?\n. same problem here with samsung galaxy s5. ",
    "zateo": "Thanks @afollestad!\n. Thanks @afollestad!\n. ",
    "pawankumar01": "Sorry for not using the template.\nI am using the following code.\njava\nnew MaterialDialog.Builder(getActivity())\n                .title(\"Change Name\")\n               .inputRangeRes(2, 20, R.color.red)\n                .inputType(InputType.TYPE_CLASS_TEXT |\n                       InputType.TYPE_TEXT_VARIATION_PERSON_NAME)\n                .input(null,  PreferenceUtil.getInstance().getUserName(),\n                        false,\n                        new MaterialDialog.InputCallback() {\n                    @Override\n                    public void onInput(MaterialDialog dialog, CharSequence input) {\n                        if(input == null || input.equals(\"\")){\n                            dialog.getActionButton(DialogAction.POSITIVE).setEnabled(false);\n                        }else{\n                            PreferenceUtil.getInstance().setUserName(input.toString());\n                            profileName.setText(input);\n                            dialog.dismiss();\n                        }\n                    }\n                }).show();\n\nAnd on Pressing K, the result becomes\n\nPawan becomes PawanPawan\nThanks,\nPawan\n. ",
    "Vandalko": "I believe it is caused by this line https://github.com/afollestad/material-dialogs/blob/0.9.0.1/core/src/main/res/layout/md_listitem.xml#L5\nselectableItemBackground is a part of v7-appcompat so you have to use Theme.AppCompat or derivative and if you are not... than inlfation failing because it can't find theme attribute reference.\nLike in the sameple app https://github.com/afollestad/material-dialogs/blob/master/sample/src/main/res/values/styles.xml#L4\n. @afollestad btw, I wonder why don't you use AppCompatDialog ?\nIt's already present in library's dependencies and the theming / customizing process it the same as aforementioned md_listitem.xml resource\nDialogBase is an ordinary Dialog which heavily depends on current platform implementation while AppCompatDialog allow to properly theme a dialog\n. ",
    "dsbl41": "Below is a screenshot to illustrate thevissue:\n\n. ",
    "talalelafchal": "The list is hiding the checkbox, I fixed this bug by giving a higher layout_weight to the checkbox. And now the checkbox is visible \n. ",
    "LcTerry": "thank you\n. ",
    "khalid-mahmood": "Strange behavior after add MD \n. Not using Proguard.. My App is Multidex!\n. ",
    "danielesegato": "I can confirm this.\nI've also digged a little in the code which basically works like this:\n1. see how many items are currently shown\n2. remove from the selected item position half the count of that number\n3. scroll to the computed value\nThis assume that:\n- the recyclerview would scroll to the point that the indicated position is the first visible one\n- items have all the same height\nThe first assumption is completely wrong, the list actually scroll down until the indicated position is visible and stop. So if anything it would be more correct to add positions instead of subtracting it (and check it does not go over the max value).\nEven \"fixing\" it like that it may not necessary be a fix. In fact how the actual scroll happens depends on the LayoutManager implementation and the library shouldn't try to guess it. It should just ask for it to scroll to the given position and nothing else and, eventually, provide a custom callback for that to be handled by the user.\nFor example the LinearLayoutManager has an handy scrollToPositionWithOffset that, if you know the height of the view and the average height of each item, let you position your view exactly in the middle.\nEDIT: some more detail\nEverything happens inside the MaterialDialog.checkIfListInitScroll()\nThere's an if switch that try to guess how many items fit for a LinearLayoutManager or a GridLayoutManager, if the layout manager is not one of these it crash with an exception. This is also very bad because I could set my custom adapter and I wouldn't expect it to crash...\nReally, just do not try to guess the position, provide a custom callback or just go to the correct position. Or if you really want to support out of the box those two layout manager do it with scrollToPositionWithOffset() and fallback gracefully to just the recyclerView scrollToPosition. If you add the callback to override this will just be perfect :)\n. By the way this is a blocking bug for me: not using your library for this specific reason.\n. I would actually support ANY layout manager, I don't see why not :)\n. @afollestad you use them in 2 point:\nHere: to try to center the currently selected item in the screen:\nhttps://github.com/afollestad/material-dialogs/blob/990450904ee440efc587a269c9867bcd8e4a79fe/core/src/main/java/com/afollestad/materialdialogs/MaterialDialog.java#L136\nWhich is wrong and shouldn't be done like that, see my comment on this other bug: #1173\nAnd here to check if the recyclerview can scroll: https://github.com/afollestad/material-dialogs/blob/e79d3c0117eb4a50cdda8b274bffe50897c0040b/core/src/main/java/com/afollestad/materialdialogs/internal/MDRootLayout.java#L527\nwhich is also a bad idea, and you should be using RecyclerView.canScrollVertically() method to check that.\nSo you really have no reason to limit on those 2 layout.\nEven if you want to add support specific for those two you can have a fallback or check if the other LayoutManager implement an interface you specify or just require the user to specify that interface implementation on the builder.\n. > @danielesegato you're pretty condescending, aren't you\nno I'm not :) [dunno why you removed the comment]\nI just wanted to give you suggestions to improve your library.\nI'm not using your library right now, I tested it out and I always look at the code when I do. Since I'm not using it I can't spend the time on doing PR on it.\nYou can chose to ignore what I said but it doesn't make it false.\nI like to go straight to the point, I'm not good at being polite and do not even make an effort to be most of the time. If I took the time to open these two bugs and write all that. It is because I think you did a good job with your library and that it  with this 2 little improvement it could get so much better.\nBy the way I saw you did the modifications I suggested, happy about that :) I'm gonna have a look at it again next project ;-) good job there\n. ",
    "harcoPro": "try create dialog without positive listener\njava\nnew MaterialDialog.Builder(this)\n                .title(R.string.socialNetworks)\n                .items(R.array.socialNetworks)\n                .itemsCallbackSingleChoice(2, new MaterialDialog.ListCallbackSingleChoice() {\n                    @Override\n                    public boolean onSelection(MaterialDialog dialog, View view, int which, CharSequence text) {\n                        showToast(which + \": \" + text);\n                        return true; // allow selection\n                    }\n                })\n//               .positiveText(R.string.md_choose_label)  -- without this\n                .show();\n. ",
    "palaima": "One possible solution:\n``` java\nprivate Dialog dialog;\n\n\nfinal MaterialSimpleListAdapter adapter = new MaterialSimpleListAdapter(new MaterialSimpleListAdapter.Callback() {\n    @Override\n    public void onMaterialListItemSelected(int index, MaterialSimpleListItem item) {\n        if (dialog != null)\n            dialog.dismiss();\n    }\n});\ndialog = new MaterialDialog.Builder(this)\n    .title(R.string.set_backup)\n    .adapter(adapter, null)\n    .build();\ndialog.show();\n```\nAre there more ways to do that?\n. ",
    "rovo89": "Similar question here... the old API used to provide the MaterialDialog reference to ListCallback.onSelection(), so the dialog could easily be dismissed. The new API is missing that.\n. @afollestad Would you please consider adding a dialog parameter again?\nWith the current API, there's the following situation: We need to create the MaterialSimpleListAdapter and therefore also the MaterialSimpleListAdapter.Callback before calling build(). I don't see any chance of getting hold of the created MaterialDialog instance before creating the callback. However, this reference would be required for probably the most common action - closing the dialog before proceeding.\nThe workaround mentioned by @palaima is to store the dialog reference in a member (or static) variable. That's working, but unless we add some cleanup code to the dismiss handler, it means we're keeping this reference and therefore also references its views and its Context (probably an Activity) alive. Sure, there are other ways to do it, but it can get very complicated. Considering that pretty much every action will dismiss the dialog and MaterialSimpleListAdapter already holds the reference in a private field, it would be great if it could pass it on to the callback.\n. ",
    "loki666": "thanks\n. ",
    "YasinRI": "I have this problem too, my language is Persian. in some Strings, it wraps it from middle of the string, but when I scroll the list and return to first items it get solved.\nI appreciate if u help me how to solve it. \nbefore Scroll :\n\nafterScroll:\n\n. can you help me what to do to solve it? please answer me because my application is going to publish\n. ",
    "weichao66666": "canceledOnTouchOutside = false\n. ",
    "mseroczynski": "It started to work suddenly. I guess it may have been gradle related issue. \n. ",
    "SunnyBongiri": "MaterialDialog.Builder progressDialog = new MaterialDialog.Builder(this)\n                .title(\"Logging In\")\n                .content(\"Please Wait...\")\n                .progress(true, 0);\nthen I show this dialog inside onClick method using progressDialog.show();\ndismiss() method is not available bro...\n. ",
    "inneke-dc": "This seems to still be an issue because I don't see files (only folders) on a nexus 5X. I just installed the demo app from the play store and the file chooser in the demo doesn't show any files either. I also tried with my nexus 6.\nIt seems that either the mimetype or the extensions provided to the builder can not be null. A possible fix is to add an empty extension, like this:\nnew FileChooserDialog.Builder(this)\n                            .extensionsFilter(\"\")\n                            .show();\nA possible fix in the library could be to add an 'else' statement in the listFiles method:\nif (extensions != null) {\n            //existing code\n          } else if (mimeType != null) {\n            //existing code\n          } else {\n            //add all files to the results list\n          }. ",
    "boswelja": "A workaround would be to make an empty string and use that, but it would be more efficent if there was a way to just pass null instead of an empty string\n. ",
    "gronel": "same issue. ",
    "fgl27": "on main page README\nhttps://github.com/afollestad/material-dialogs#dismissing-dialogs\nuse onPause() to dismiss it.\nI use \nif (dialog != null) dialog.dismiss();\nand have that dialog as a private object on the activity...\nWith v7.app.AlertDialog you can use the same dialog to create() the Builder and dismiss the one active, has can really be only one active it always dissmiss. Did not try having the same MaterialDialog dialog to build() diferente Builder() but I believe it works.. this issue can have more info from @farsiad and @pooya1366\nI say because I don't have a problem, I using\nsupport-v4:26.0.2 and support-v13:26.0.2\nand only using material-dialogs for progress dialogs.\nSo extra info from what is the problem and how it happens, will probably help.. Now I understand way this did not cause problem on one of my apps... as I use support-v4 and support-v13 for others things the build error/warning is not present. But on another app of my I don't use support-vX and get the error if I update others support related as \"appcompat, cardview or recyclerview\"\nadding\napi 'com.android.support:support-v4:26.1.0'\napi 'com.android.support:support-v13:26.1.0'\n\nto  gradle dependencies fix the problem, did not notice any size difference on the apk, probably because proguard.\nSo minor workaround may help someone to use latest support libs, particularly I don't see a problem on dialogs or anywhere in the app\n:+1: . latest support is 26.1.0 now.. yes the solution is described on the issue, just add/compile the dependency even if you don't use it, so all are on the same version, at least it works for me as I post before.. @firestormza \njust read it all\nhttps://github.com/afollestad/material-dialogs/issues/1451#issuecomment-328670297. ",
    "AndreaCioccarelli": "I'm having the same results after testing dialogs. \n. I have got ACCESS_SUPERUSER, READ_EXTERNAL_STORAGE and I've set my context as u:r:init:s0.\nThis is a material-dialog error because it cannot determine if you are in the root directory at the first dialog launch. To fix you could reinforce the materialdialog's memory handler. . Having the same problem. Dialogs uses the 100% of the screen\njava\nnew FolderChooserDialog.Builder(MainActivity.this)\n            .chooseButton(R.string.md_choose_label)  // changes label of the choose button\n            .initialPath(\"/\")  // changes initial path, defaults to external storage directory\n            .tag(\"0\")\n            .show();\n\n. @Zebra67 there is no reason to use Java anymore in Android app development. @afollestad Yes It's the latest APK, downloaded by the repo. Checks if you are in the root directory and prevent dialog to show \"go up\". this code will try to split the path and get the first array index. for example, /data/media will split as [0] null | [1] data | [2] media\nif the directory is \"/\", we cannot access to [1] index and it will return an error handled from the catch block that will set the canGoUp boolean as false, because you are in the root path. Caste CharSequence[]. Additional check used to verify the path from mInitialPath. Fixed a toast text bug. access can be package-local. Null view cannot be injected. Null view cannot be injected. DialogBase access can be package-local. ",
    "butich": "It's ok, pre lollipop android cant draw ripple.. ",
    "antonio10": "Please, did someone find the soluction for this problem, it may be so helpfully.. ",
    "AndyGu": "same question on my devices which use 25 compileSdkVersion. ",
    "carboleda": "Thanks, probably this not work in android 4.3. I downgraded to 0.8.6.2 version and work successfully.. ",
    "tihomirleka": "So, I tried out some of the old versions of material-dialogs library and it seems the bug is introduced in version 0.9.2.0. I used latest version of support library (25.1.0) and decreased md lib version and I got normal width when I got to version 0.9.1.0. So I guess workaround for now is to stick with version 0.9.1.0 until there is a fix.. I tried it out with latest release of the library and have the same issue. The dialogs now occupies full width of the screen. As I said, the last version that doesn't present the width bug is 0.9.1.0.. Different devices, resolutions and Android versions, all taken on actual devices, not emulators.\nHope this helps.\n. No problem. Let me know if you want me to re-test on all devices after the fix.. Looks like its fixed.\n\n. ",
    "basefas": "I have the same problem on the 0.9.2.2 version.I'm testing on Nexus 5 with Android 6.0.1 and buildToolsVersion is  25.0.2, support library is 25.1.0.. I clone the project and install it on my Nexus5 ,has the same problem\uff0cthe same as your sample.apk. ",
    "ritdaw": "Same issue on 0.9.2.2. Android 6.0.1.. This is from the 0.9.2.2 release on Google Play. Android 6.0.1 (Moto Z Play).\n\n. ",
    "franciscofranco": "I'm also affected with 0.9.2.2, all latest versions of appcompat etc on my Nexus 5. Can debug whatever if needed.. ",
    "PavelSynek": "Nexus 5, Android 6.0.1\n\n. ",
    "aritraroy": "According to CrashAnalytics, these are some of the devices having the issue.\n1) ASUS_Z007\n2) Lenovo A5500-HV\n3) LG-K332\n4) Lenovo A6020a40\n5) LG-D802\n6) HUAWEI Y560-L01\n7) Redmi Note 3\n8) Lenovo S856\nand many more. . Several versions, 4.4.2, 5.1.1, 5.0.2, 5.1 and more.. If I could have reproduced a cause, I would have either fixed it myself or mentioned it already.. ",
    "cagkanciloglu": "Code works for every other phone except this one though. This is what I don't understand about your code maybe there is a logic behind it I don't see. The function typeface throws that exception when mediumFont is null right? On the code you first call typeface then you check whether if mediumFont is null or not. Why don't you do this check before calling typeface function or inside the typeface function? \nMaterialDialog line 556\n```java\ntypeface(mediumFont, regularFont);\n        if (this.mediumFont == null) {\n            try {\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)\n                    this.mediumFont = Typeface.create(\"sans-serif-medium\", Typeface.NORMAL);\n                else\n                    this.mediumFont = Typeface.create(\"sans-serif\", Typeface.BOLD);\n            } catch (Exception ignored) {\n            }\n        }\n        if (this.regularFont == null) {\n            try {\n                this.regularFont = Typeface.create(\"sans-serif\", Typeface.NORMAL);\n            } catch (Exception ignored) {\n            }\n        }\n\n```. @trr-amsiq default medium typefaces don't exist for some models @afollestad should make a workaround. \nbut he kinda doesn't give a sh*t and closed the issue.\nput try-catch around the block and show default dialog in catch.. ",
    "vitkidd": "Recently, I got the same crash on ZTE BLADE A910, Android 6.0.. ",
    "smartjinyu": "Sorry for my carelessness. Thanks for your advice. And I will pay attention to that in my future development.. ",
    "odin-": "Seems to be a duplicate of #552\n. Thanks for the input. I'll try to redesign the layout. Although it might be a not so good solution as I need to rework the content to the dialog, not sure it'll look great.\nFor AlertDialog I use AlertDialog.getWindow().setLayout to force the width. Can I do similar with MaterialDialog?. There's always something selected so I do not really understand how the user is able to selecting \"nothing\". But I'll just make sure to catch -1. \nThanks.. My fault.... ignore everything above :-). ",
    "AlejandroHCruz": "I subscribe to this since I require a taller dialog than the standard one.\nBeing able to call something like this on the dialog might help, as @odin- said\ndialog.getWindow().setLayout(WindowManager.LayoutParams.MATCH_PARENT,WindowManager.LayoutParams.WRAP_CONTENT);\n. ",
    "JGeraldoLima": "I've searched for differences on the sample dialogs implementation and on mine, and I realized that on the sample you do not set onPositive and onNegative callbacks, just the texts, and it shows all configured buttons normally. So, I did the same but the bug keeps happening! I really can't figure out what's going on \ud83d\ude14 . Oh man, great idea! Just hold two or three days while I finish home moving, so I'll be able to use my computer. Hi everyone! Sorry for the delay, I was out of internet!\nSo, I follow @powerhcm8 tip and it worked! I've tested several times, switching between stringID and string value and the button just appeared! Maybe it is some bug or particularity of M build, I really don't know...\n```java\n public static void openEnableLocationServicesDialog(final Activity activity) {\n        MaterialDialog.Builder builder = new MaterialDialog.Builder(activity)\n            .title(R.string.notice)\n            .content(R.string.enable_location_services)\n            .positiveColorRes(R.color.colorPrimaryDark)\n            .negativeColorRes(R.color.colorPrimaryDark)\n            .positiveText(/R.string.ok/\"OK\")\n            .negativeText(R.string.cancel)\n            .onPositive(new MaterialDialog.SingleButtonCallback() {\n                @Override\n                public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                    final Intent i = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);\n                    activity.startActivity(i);\n                    dialog.dismiss();\n                }\n            })\n            .onNegative(new MaterialDialog.SingleButtonCallback() {\n                @Override\n                public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                    showSnackBar(activity, getString(activity, R.string.locations_permission_denied_msg));\n                    dialog.dismiss();\n                }\n            });\n    MaterialDialog alertDialog = builder.build();\n    alertDialog.show();\n}\n\n```\nResult:\n\n. ",
    "henriquecm": "Try putting a string directly in .positiveText instead of a Resource id.. I was checking the source code and the public Builder positiveText(@StringRes int positiveRes) is slightly different from neutralText and negativeText.\nThe method positiveText returns this, while the others return the result of method that sets the text when a string is passed.\nI know that this shouldn't make difference, but i think i could be related to the problem that @JGeraldoLima  is having.. ",
    "oradkovsky": "I was observing such behavior when string resource was empty (like this ).. ",
    "peterhav": "Encountering the same issue in 0.9.3.0!. Would it be possible to release a new version of the library (0.9.3.1) that includes this fix?. Would it be possible to release a 0.9.3.1 version that includes this fix?. Note that this library works fine with AndroidX. I do have this setup running without problems. Just make sure that the Jetifier and AndroidX flags have been configured correctly as defined here: https://developer.android.com/topic/libraries/support-library/androidx-overview. Yes, the button height should be 36dp, but the touch area should be 48dp as indicated here: \n\nSource: https://material.io/design/usability/accessibility.html#layout-typography\n. ",
    "juani21": "java\nnew ColorChooserDialog.Builder(this, R.string.color_palette)\n                .titleSub(R.string.choose_colors)  // webSite of dialog when viewing shades of a color\n                .customColors(primary, null)\n                .allowUserColorInput(false)\n                //.accentMode(accent)  // when true, will display accent palette instead of primary palette\n                .doneButton(R.string.md_done_label)  // changes label of the done button\n                //.cancelButton(R.string.md_cancel_label)  // changes label of the cancel button\n                .backButton(R.string.md_back_label)  // changes label of the back button\n                .customButton(R.string.action_search)\n                //.preselect(accent ? accentPreselect : primaryPreselect)  // optionally preselects a color\n                .dynamicButtonColor(true)  // defaults to true, false will disable changing action buttons' color to currently selected color\n                .show();\ni don't see the back button, the cancel button there is .\nThe dismiss dont work for me\nmaybe i wrong something\nthank you. ",
    "avipars": "Refer to this: http://stackoverflow.com/a/37905107/4276951 for more information. ",
    "webserveis": "In my custom dialogs, I use @onResume with DialogInterface.OnKeyListener()\n```java\npublic class MyCustomDialog extends DialogFragment \n   ....\n    @Override\n    public void onResume() {\n        super.onResume();\n    getDialog().setOnKeyListener(new DialogInterface.OnKeyListener() {\n        @Override\n        public boolean onKey(DialogInterface dialog,\n                             int keyCode, android.view.KeyEvent event) {\n            if ((keyCode == android.view.KeyEvent.KEYCODE_BACK)) {\n                dismiss();\n                return true;\n            } else return false;\n        }\n    });\n}\n\n```\nIf you like this implementation, add this feature in library\n. ",
    "Reegan01": "Thank you for your reply\nOh, okay. Actually I mean, I used EditText <TextInputLayout><TextInputEditText></TextInputEditText</TextInputLayout> on this dialog. It looks good. But normal spinner is isn't adapt with it.. ",
    "AlirezaGhanbarinia": "I want to set gravity for MaterialSimpleListItem.there is no method to set gravity for this item:\nadapter.add(new MaterialSimpleListItem.Builder(this)\n    .content(\"username@gmail.com\")\n    .icon(R.drawable.ic_account_circle)\n    .backgroundColor(Color.WHITE)\n    .build());\nif possible i need to set \n.contentGravity(GravityEnum.CENTER)\nto the above builder.\nanother thing to say, I have set android:supportsRtl=\"false\" in manifest of my app and i need this case to be false.. any Help?\nare you going to add this in next update or i should handle it?. Thank you so much. I am using \" .checkBoxPromptRes(R.string.dont_ask_again, false, null)\" \nand i have only one item as you see in the image.\n\n. ",
    "Ankurjain30": "Still getting error \"inconvertible types, cannot cast 'android.support.v4.app.fragmentActivity to packagename.myjavaclassname\nFew classes imported:\nimport android.support.annotation.Nullable;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.content.ContextCompat;\nimport android.support.v7.app.ActionBarActivity;\nimport android.support.v7.app.AlertDialog;\nimport android.support.v7.preference.PreferenceManager;\nUpdated Code used as ((ALR)getActivity(),R.string.color_palette), ALR.java is class name extends to Fragment and implementing ColorChooserDialog.. Full code:\nimport android.content.SharedPreferences;\nimport android.graphics.drawable.ColorDrawable;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.support.annotation.ColorInt;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.support.v4.app.Fragment;\nimport android.support.v7.app.ActionBarActivity;\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TextView;\nimport com.afollestad.materialdialogs.color.CircleView;\nimport com.afollestad.materialdialogs.color.ColorChooserDialog;\nimport com.afollestad.materialdialogs.internal.ThemeSingleton;\nimport com.afollestad.materialdialogs.util.DialogUtils;\npublic class Frag1 extends Fragment implements ColorChooserDialog.ColorCallback {\n    private int startuppri, startuppridark;\n    @ColorInt\n    int existingpricolor;\n    TextView tv;\n@Nullable\n@Override\npublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    View view = inflater.inflate(R.layout.frag1, container, false);\n\n    tv= (TextView) view.findViewById(R.id.tvfrg1);\n    //Code for Color\n    startuppri = DialogUtils.resolveColor(getActivity(), R.attr.colorPrimary);\n    startuppridark = DialogUtils.resolveColor(getActivity(), R.attr.colorPrimaryDark);\n\n    SharedPreferences sharedPreferences5 = android.preference.PreferenceManager.getDefaultSharedPreferences(getActivity());\n    existingpricolor = sharedPreferences5.getInt(\"wrucolor\", startuppri);\n\n    startuppri = existingpricolor;\n    if (((ActionBarActivity) getActivity()).getSupportActionBar() != null)\n\n    {\n        ((ActionBarActivity) getActivity()).getSupportActionBar().setBackgroundDrawable(new ColorDrawable(existingpricolor));\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            getActivity().getWindow().setStatusBarColor(CircleView.shiftColorDown(existingpricolor));\n            getActivity().getWindow().setNavigationBarColor(existingpricolor);\n        }\n    }\n\n    tv.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            new ColorChooserDialog.Builder(((Frag1)getActivity()),R.string.color_palette)\n                    .titleSub(R.string.colors)\n                    .preselect(startuppri)\n                    .show();\n        }\n    });\n    return view;\n\n}\n\n@Override\npublic void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n    inflater.inflate(R.menu.frag1_menu, menu);\n}\n\n\n@Override\npublic void onColorSelection(@NonNull ColorChooserDialog dialog, @ColorInt int selectedColor) {\n    SharedPreferences.Editor editor = android.preference.PreferenceManager.getDefaultSharedPreferences(getActivity()).edit();\n    if (dialog.isAccentMode()) {\n        startuppri = selectedColor;\n        ThemeSingleton.get().positiveColor = DialogUtils.getActionTextStateList(getActivity(), selectedColor);\n        ThemeSingleton.get().neutralColor = DialogUtils.getActionTextStateList(getActivity(), selectedColor);\n        ThemeSingleton.get().negativeColor = DialogUtils.getActionTextStateList(getActivity(), selectedColor);\n        ThemeSingleton.get().widgetColor = selectedColor;\n        editor.putInt(\"wrucolor\", startuppridark).apply();\n    } else {\n        startuppri = selectedColor;\n        if (((ActionBarActivity) getActivity()).getSupportActionBar() != null)\n            ((ActionBarActivity) getActivity()).getSupportActionBar().setBackgroundDrawable(new ColorDrawable(selectedColor));\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            getActivity().getWindow().setStatusBarColor(CircleView.shiftColorDown(selectedColor));\n            getActivity().getWindow().setNavigationBarColor(selectedColor);\n        }\n        editor.putInt(\"wrucolor\", startuppri).apply();\n    }\n}\n\n@Override\npublic void onColorChooserDismissed(@NonNull ColorChooserDialog dialog) {\n\n}\n\n}\n. Then how to handle it. MaterialDialog materialDialog = new MaterialDialog.Builder(getActivity()); does not work.\n. and if i use \nMaterialDialog.Builder materialDialog = new MaterialDialog.Builder(getActivity());\n                              materialDialog.customView(R.layout.getlocationvia, true)\n                                .positiveText(\"Continue\")\n                                .positiveColor(Color.BLUE)\n                                .neutralColor(Color.RED)\n                                .neutralText(\"Cancel\")\n                                .onPositive(new MaterialDialog.SingleButtonCallback() {\n                                    @Override\n                                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {\n                                    if (truefr.isChecked()) {\n\n                                        }\n                                    } else if (trd.isChecked()) {\n\n                                        }\n                                    }\n                                }\n                            })\n\n                            .show();\n\n                    locviainternet = (RadioButton) materialDialog.getCustomView().findViewById(R.id.locviainternet);\n                    locviasms = (RadioButton) materialDialog.getCustomView().findViewById(R.id.locviasms);\n                    viacheckpref = (CheckBox) materialDialog.getCustomView().findViewById(R.id.viapref);\n\nThen All below gives error \n locviainternet = (RadioButton) materialDialog.getCustomView().findViewById(R.id.locviainternet);\n                    locviasms = (RadioButton) materialDialog.getCustomView().findViewById(R.id.locviasms);\n                    viacheckpref = (CheckBox) materialDialog.getCustomView().findViewById(R.id.viapref);\n\nfor .getCustomView\n. fixed, i put ; by mistake in end of getActivity. Sorry to bother you.. ",
    "Alexandre-Nut": "Ok,\nWith your app i need to D-pad Down three times to have focus on button dialogs.\nI think for user experience we need methods to set focus.\nWith remote, we need to have focus already set for me.\nThanks for any help.\n. Ok Nice,\nIt's work!\nThanks.. ",
    "abbasamini": "i use Custom List Dialogs and when Use item Callback dialog don't dismiss. ",
    "AlvarVG": "I have also checked on a different terminal. The model is a Zebra TC51 (Android 6.0.1). You sample application and mine. The result is that your application work fine, but mine does not. I dont know if this gives to you some light. \nAnd also, you may know that a week ago, i had the progress dialog working fine. \nI will try to install it on different terminal, yours and mine, and write it down here.. I have tested on two different terminals. As i mentioned above, on the Zebra TC51, if the dialog is not show in enough time, the animation is not visible, but if there is time to show it it will appear. \nIn othe terminal i have check, is the Huawei P9 Lite (also with a modified version of Android [EMUI]), and it works fine.\nXiaomi, with his, MIUI version (MI 5 is updated to version 8) modifies something that does not make Dialog to show properly. Maybe talking with MIUI developers, we could have some idea of what happens.. ",
    "Aditya-Sh": "Have updated to latest version 0.9.4.2 of MaterialDialogs. Still facing issue.. Alright thanks, will try to debug and find what's the problem. Will get back to you if I find something.. Ohh, I'll check since I am using dark theme for my app. Will check and report back.\nThanks.. I want to use light theme with dialog but my app has dark theme. What can be done in this case to show title properly?\nSince setting .titleColorRes(R.color.primary_black) also does not help in this case.. Below info might help you in debugging.\nI don't think this is an theme issue because sometimes title shows in some of my dialogs but doesn't in some even when code for both are same.\n. ",
    "sfworxco": "@Aditya-Sh my rough guess, check you might have mistakenly used same colour for title and dialog background via global theming. i.e. white colour for both.. ",
    "AlexTip": "\nSetting the action button's text to null hides them.\n\nHi again! Thank you for your reply, but seems like we have a little misunderstanding here. I was talking about using material dialog with immersive window mode described here: https://developer.android.com/training/system-ui/immersive.html. ",
    "Jiiiiiin": "i use huawei Mate9,or an error this,and my currrnt version is the latest:\n`\njava.lang.NoSuchFieldException: No field mCursorDrawable in class Lhuawei/com/android/internal/widget/HwEditor; (declaration of 'huawei.com.android.internal.widget.HwEditor' appears in /system/framework/hwEmui.jar)\n07-18 23:17:27.384 2336-2336/com.csii.vmobileapplication W/System.err:     at java.lang.Class.getDeclaredField(Native Method)\n07-18 23:17:27.384 2336-2336/com.csii.vmobileapplication W/System.err:     at com.afollestad.materialdialogs.internal.MDTintHelper.setCursorTint(MDTintHelper.java:185)\n07-18 23:17:27.384 2336-2336/com.csii.vmobileapplication W/System.err:     at com.afollestad.materialdialogs.internal.MDTintHelper.setTint(MDTintHelper.java:173)\n07-18 23:17:27.384 2336-2336/com.csii.vmobileapplication W/System.err:     at com.afollestad.materialdialogs.DialogInit.setupInputDialog(DialogInit.java:537)\n07-18 23:17:27.384 2336-2336/com.csii.vmobileapplication W/System.err:     at com.afollestad.materialdialogs.DialogInit.init(DialogInit.java:356)\n07-18 23:17:27.384 2336-2336/com.csii.vmobileapplication W/System.err:     at com.afollestad.materialdialogs.MaterialDialog.(MaterialDialog.java:94)\n07-18 23:17:27.384 2336-2336/com.csii.vmobileapplication W/System.err:     at com.afollestad.materialdialogs.MaterialDialog$Builder.build(MaterialDialog.java:2183)\n07-18 23:17:27.384 2336-2336/com.csii.vmobileapplication W/System.err:     at com.afollestad.materialdialogs.MaterialDialog$Builder.show(MaterialDialog.java:2188)\n07-18 23:17:27.384 2336-2336/com.csii.vmobileapplication W/System.err:     at com.csii.vmobileapplication.LaunchActivity.isFirstIn(LaunchActivity.java:38)\n07-18 23:17:27.384 2336-2336/com.csii.vmobileapplication W/System.err:     at com.csii.vmobileapplication.LaunchActivity.onCreate(LaunchActivity.java:24)\n`\n. ",
    "ivanstang": "Is the issue resolved?\nI have the same.. ",
    "tacmanvsa": "I still have this issue, and I'm using the latest library version...\n\nDevice: Huawei P9 lite\nAndroid: 24 API\n. ",
    "Queskr": "Thanks!. ",
    "sirmagid": "DialogVH(View rootView) {\n             ButterKnife.bind(rootView, this);\n        }\nis??\nButterKnife.bind(this,rootView);. ",
    "seefutureLee": "same error. ",
    "friederbluemle": "@afollestad Please also push the tag for 0.9.4.4. Thanks :+1:. I noticed 0.9.4.4 was already released, but doesn't show here: https://github.com/afollestad/material-dialogs/releases. ",
    "MortezaAriyan": "@afollestad Thanks for your reply. But I have tasted it on Android 4.4, 6.0 and 7.0 but the problem was the same! After every change in language I always change Layout direction and restart my application, but still no change!\nI have attached the picture. As you see the whole Layout is RTL but the dialog is not!\n. ",
    "royhenengel": "And what is this? \nint[] actions = {0, 1, 2};\nAm I missing something?. Found the problem thank you\n. @afollestad Is there a way in the input dialog editText to set the gravity of the cursor?. ",
    "AlaaZarifa": "use this .inputRangeRes(10,10, R.color.Red) instead of this .inputRange(10, 10)\n. ",
    "JeetuPal": "I have tried this does't work.. Hey @afollestad  i want to restrict user to type exactly 10 digits thats why i use inputRange(10, 10).\nBut as u see user can type 11 digits. Thats the issue.. ok thanks for quick reply.. ",
    "codesForLiving": "I have not called .typeface(String, String) anywhere in my code.\nI have these in my xml\n    <item name=\"md_medium_font\">Roboto-Regular.ttf</item>\n\n    <item name=\"md_regular_font\">Roboto-Regular.ttf</item>\n\n    <item name=\"android:alertDialogTheme\">@style/Theme.AppCompat.Dialog.Alert</item>\n\n    <item name=\"android:alertDialogStyle\">@style/Theme.AppCompat.Dialog.Alert</item>\n\nic_mr_button_connected_00_light is not referenced anywhere in my project. On googling \"ic_mr_button_connected_00_light\", I have found it mentioned in the following file.\nhttps://github.com/android/platform_frameworks_support/blob/master/v7/mediarouter/res/drawable/mr_button_connected_light.xml. Since I have \n<item name=\"md_regular_font\">Roboto-Regular.ttf</item>\nin my theme, this.refularFont should not have been null and line 1250 should not have been executed.\nEven if it is executed, since line 1250 is surrounded by try-catch it should not have thrown exception.\nCan apk tampering be the reason for this  behaviour?. ",
    "Mauker1": "I was about to open an issue with this problem. I'm getting crash reports through Crashlytics with almost the same stack trace.\nDevice where it happened: Galaxy Tab3 Lite 7.0 (SM-G530H)\nAndroid version: 4.4.4 (API 19)\nStacktrace\njava\nFatal Exception: java.lang.NullPointerException\n       at com.afollestad.materialdialogs.util.DialogUtils.getColor(DialogUtils.java:126)\n       at com.afollestad.materialdialogs.MaterialDialog$Builder.<init>(MaterialDialog.java:491)\n       at br.com.pentagrama.vuptonline.fragments.NotificationsFragment.getNotifications(NotificationsFragment.java:134)\n       at br.com.pentagrama.vuptonline.fragments.NotificationsFragment.access$100(NotificationsFragment.java:41)\n       at br.com.pentagrama.vuptonline.fragments.NotificationsFragment$2.onClick(NotificationsFragment.java:235)\n       at android.support.design.widget.Snackbar$1.onClick(Snackbar.java:250)\n       at android.view.View.performClick(View.java:4496)\n       at android.view.View$PerformClick.run(View.java:18603)\n       at android.os.Handler.handleCallback(Handler.java:733)\n       at android.os.Handler.dispatchMessage(Handler.java:95)\n       at android.os.Looper.loop(Looper.java:136)\n       at android.app.ActivityThread.main(ActivityThread.java:5426)\n       at java.lang.reflect.Method.invokeNative(Method.java)\n       at java.lang.reflect.Method.invoke(Method.java:515)\n       at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1268)\n       at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1084)\n       at dalvik.system.NativeStart.main(NativeStart.java)\nThe code\njava\nloadingDialog = new MaterialDialog.Builder(getActivity())\n                .cancelable(false)\n                .content(R.string.activity_main_progress_dialog)\n                .progress(true, 0)\n                .show();. I'm not 100% sure of that. Is it possible for an attached fragment to return null on getActivity()? As for OP, we can't be sure on which context he's using.. ",
    "AdamMc331": "Are you 100% sure the context you're using isn't null at the time this is called?\nI did some googling, and I found another project where someone made a similar issue - https://github.com/mozilla-mobile/focus-android/issues/73\nHis solution was, inside a fragment, to use a view's context instead of calling getActivity(). Perhaps that can help here.. ",
    "vivek50": "Ok...Thank You....Silly MIstake from me... ",
    "paulomcnally": "@afollestad this is valid.\n\nAll com.android.support libraries must use the exact same version specification (mixing versions can lead to runtime crashes). Found versions 26.0.0-beta2, 25.3.1. Examples include com.android.support:animated-vector-drawable:26.0.0-beta2 and com.android.support:support-v13:25.3.1\n\nThis warning is in Android Studio 3.0 Canary x. Another thing, do not mention because you close, only saws and now.. ",
    "sam4444": "@paulomcnally i was faced same issue when i tried to use library and my project version was 26.0.0-beta2. For update library to version 26.0.0-beta2 need to do mnay changes in whole project.. ",
    "BatshevaR": "thanx for the quick reply !\nin the documentation it didn't mention.. a question : \nhow can i set the color of the stroke(border) of the circles when they are not selected?\nit is not getting the color of the full circle selected. ",
    "hugocastelani": "This is useful for those who want to theme the dialog or change buttons onClickListeners.. I've tested everything. Don't know why Travis build fails at all.. @afollestad Following the main idea these changes wouldn't interfere with the builder creation, they just would add what you want everytime it's created. See the correct use:\nfinal MaterialDialogPreference preference = (MaterialDialogPreference) findPreference(\"preference\");\npreference.setBuilder(\n        preference.resetBuilder()\n                .backgroundColor(Color.RED));\nThe variable builder would store original builder with your changes.\nI thought about put it in README, but there has almost nothing about preferences.. Hm... I'm getting IllegalArgumentException with dialog's RecyclerView when opening it twice, surely what you said. I'll try to bypass it.. All right. Do you still not considering my changes?. Ignore it. I've accidentally make some other changes. . ",
    "MenosGrante": "Gradle Plugin 2.4.0 will not be finished, as all work from 2.4.0 and 2.5.0 alpha versions merged in 3.0.0. So, if you don't want to use Gradle 4.0 you have to use latest stable release - 2.3.3. If you want to use unstable versions the latest is 3.0.0-beta1 (contains 2.4.0 and 2.5.0).. ",
    "bingohf": "when release a new version for this fix?. ",
    "pooya1366": "I have this issue too. ",
    "DesigningKnights": "I'm getting the same issue. I'm using support libraries version 26.0.2.  When syncing Gradle, I get the following error:\nError:Execution failed for task ':app:processDebugManifest'.\n\nManifest merger failed : Attribute meta-data#android.support.VERSION@value value=(26.0.2) from [com.android.support:preference-v14:26.0.2] AndroidManifest.xml:25:13-35\n    is also present at [com.android.support:support-v13:26.0.1] AndroidManifest.xml:28:13-35 value=(26.0.1).\n    Suggestion: add 'tools:replace=\"android:value\"' to  element at AndroidManifest.xml:23:9-25:38 to override.\n. As a followup, if I change the tag to the latest commit, it works (that is, if I do this: implementation 'com.afollestad.material-dialogs:core:fdec81d') . Did you create a new release when you made the latest changes and commit?  if not, jitpack won't compile and package any changes.\n\nHere's the last jitpack log: \nBuild starting...\nStart: Thu Aug 17 16:44:32 UTC 2017\nGit:\n0.9.4.7\ncommit a29c038520970fb3d1336e1ac5d534c61305f283\nAuthor: Aidan Follestad \nDate:   Thu Aug 17 10:54:17 2017 -0500\n0.9.4.7\n\nNotice it shows Aug. 17 for the build, which means it hasn't packaged any of your commits to a new aar since that date.. Yeah see, here's the thing,  Here's my repositories, in order:\nbuildscript {\n    repositories {\n        jcenter()\n        maven { url 'https://maven.fabric.io/public' }\n        maven { url 'https://maven.google.com' }\n        maven { url 'https://jitpack.io' }\n    }\nEven using jcenter first, I still get this error\nError:Execution failed for task ':app:processDebugManifest'.\n\nManifest merger failed : Attribute meta-data#android.support.VERSION@value value=(26.0.2) from [com.android.support:preference-v14:26.0.2] AndroidManifest.xml:25:13-35\n    is also present at [com.android.support:support-v13:26.0.1] AndroidManifest.xml:28:13-35 value=(26.0.1).\n    Suggestion: add 'tools:replace=\"android:value\"' to  element at AndroidManifest.xml:23:9-25:38 to override.\n\nSo I have to use this to get it to  work:\n    implementation 'com.afollestad.material-dialogs:core:fdec81d'\n. Ah, here's the problem.  Look at the date at jcenter.  \nVersion Publication Date Version Badge \nReleased Aug 17, 2017\nIt doesn't show anything updated, so it's still pulling the old version from jcenter.. yes, true, but it would be better if jcenter was actually distributing the current build, would it not?\nmaven-metadata.xml | 22 days ago | 971 B | \u00a0\n-- | -- | -- | --\nmaven-metadata.xml.md5 | 22 days ago | 32 B\n.. | - | - | \u00a0\n-- | -- | -- | --\ncore-0.9.4.7-javadoc.jar | 22 days ago | 119.9 KB | \u00a0\ncore-0.9.4.7-javadoc.jar.md5 | 22 days ago | 32 B | \u00a0\ncore-0.9.4.7-sources.jar | 22 days ago | 37.37 KB | \u00a0\ncore-0.9.4.7-sources.jar.md5 | 22 days ago | 32 B | \u00a0\ncore-0.9.4.7.aar | 22 days ago | 116.3 KB | \u00a0\ncore-0.9.4.7.aar.md5 | 22 days ago | 32 B | \u00a0\ncore-0.9.4.7.pom | 22 days ago | 1.39 KB | \u00a0\ncore-0.9.4.7.pom.md5 | 22 days ago | 32 B\n. That explains the problem then.  . ",
    "Gordey": "I have same problem now:\n> Manifest merger failed : Attribute meta-data#android.support.VERSION@value value=(26.1.0) from [com.android.support:design:26.1.0] AndroidManifest.xml:28:13-35\n    is also present at [com.android.support:support-v13:26.0.1] AndroidManifest.xml:28:13-35 value=(26.0.1).\n    Suggestion: add 'tools:replace=\"android:value\"' to <meta-data> element at AndroidManifest.xml:26:9-28:38 to override.. So, no have solution?. Oh now i see. Thank so much.. ",
    "firestormza": "I'm so sorry, but I still can't get this to work. \nI'm using v26.1.0 of appcompat etc. but still get the error.\nYou say \"just add/compile the dependency even if you don't use it...\"\nWhere? Which dependency? \nSorry, I'm lost...\nEdit: \nOk, so am I correct in saying that the current library only works with AppCompat 26.0.1? \nAnd this issue is that it still needs to be updated to 26.1.0?. ",
    "P-Zenker": "Until material-dialogs support libs are updated to v26.1.0, just try something like this:\nWith ./gradlew -q dependencies app:dependencies --configuration compile you see all dependencies of all packages, e.g.\n|    +--- com.afollestad.material-dialogs:core:0.9.4.7\n|    |    +--- com.android.support:support-annotations:26.0.1 -> 26.1.0\n|    |    +--- com.android.support:support-v13:26.0.1\n|    |    |    +--- com.android.support:support-annotations:26.0.1 -> 26.1.0\n|    |    |    \\--- com.android.support:support-v4:26.0.1 -> 26.1.0 (*)\n|    |    +--- com.android.support:appcompat-v7:26.0.1 -> 26.1.0 (*)\n|    |    +--- com.android.support:recyclerview-v7:26.0.1 -> 26.1.0 (*)\n|    |    \\--- me.zhanghai.android.materialprogressbar:library:1.4.1\n|    |         +--- com.android.support:appcompat-v7:25.3.1 -> 26.1.0 (*)\n|    |         \\--- com.android.support:support-annotations:25.3.1 -> 26.1.0\nJust add the top level dependencies from \"com.afollestad.material-dialogs\" and  \"me.zhanghai.android.materialprogressbar\" manually: \n```\ncompile 'com.android.support:support-annotations::26.1.0'\ncompile 'com.android.support:support-v13:26.1.0'\n...\ncompile('com.afollestad.material-dialogs:core:0.9.4.7') {\n    transitive = false\n}\ncompile('me.zhanghai.android.materialprogressbar:library:1.4.1') {\n    transitive = false\n}\n```\nHowever, errors may be caused ;). @vnidens Yes, that is a smart approach. ",
    "shkhaksar": "I had the same issue with Manifest Merging but when I downgraded to \n  implementation 'com.afollestad.material-dialogs:core:0.9.4.5'\nall the problems solved completely. i think it's an issue with the new version (0.9.4.7);. ",
    "RafaelCarlos": "I solved with making downgrade. . ",
    "vnidens": "@P-Zenker It's working solution but to keep transitive dependencies (and to avoid an explicit dependency on me.zhanghai.android.materialprogressbar:library:1.4.1) you can use the following approach:\nimplementation(\"com.afollestad.material-dialogs:core:0.9.4.7\") {\n    exclude group: 'com.android.support', module: 'support-v13'\n}. ",
    "deibeeed": "If you want to use the latest library version while running the latest android support library version (since 0.9.4.7 uses android support library 26.0.1), put this in your build.gradle file\n```// Material dialog\n    final MATERIAL_DIALOG_LIB_VERSION = '0.9.4.7'\n    compile (\"com.afollestad.material-dialogs:core:$MATERIAL_DIALOG_LIB_VERSION\") {\n        exclude group: 'com.android.support'\n    }. ",
    "vmzdl": "I'm doing it this way and it's working.\ncompile 'com.android.support:appcompat-v7:26.1.0'\ncompile 'com.android.support:support-compat:26.1.0'\ncompile 'com.android.support:design:26.1.0'\ncompile 'com.android.support:cardview-v7:26.1.0'\ncompile 'com.android.support.constraint:constraint-layout:1.0.2'\n// ... other dependencies here\ncompile ('com.afollestad.material-dialogs:commons:0.9.4.7') {\n    exclude group: 'com.android.support'\n}. ",
    "aloneSingingStar": "this project depend on  the AndroidX,and maybe your project also use the support library,and it makes the confict. if i use the support library ,don't use AndroidX,so i can't use material-dialogs?. ",
    "Ashok-Varma": "can we release this update soon because AndroidStudio 3.0.0 rc1 came out => people started updating support-libs and build tools ..etc. this will stay as conflict till we update it. #1465 for travis build fix(updated build tools version in travis.yml).. ",
    "mtrakal": "@afollestad  could you please look on this issue, or merge partial fix from me? ^. ",
    "smihajlovski": "Adding<item name=\"android:textColorSecondary\">#ffffff</item> - white color, in the theme, will cause this bug. Turns out this will change the color of the unselected items in the dialog.. ",
    "Warrocker": "Travis logs is strange, similar it can't find android libraries, I've to look what might went wrong . Thanks,  I'll fix it . ",
    "sweet2o09": "Sorry, I'm not good at English.\nPlease look at the picture\nTwitter and Google+ is default options.It should not be emptied\n\n\n. ",
    "alexruskovski": "The same merge error for me. Did you figure it out?. ",
    "ethanyuwang": "I have tried literally everything and the problem is still there. ",
    "sbLaughing": "In my case it's support appcompat conflict.Upgrade your support lib version to 27+ if you use\nimplementation 'com.afollestad.material-dialogs:core:0.9.6.0'. ",
    "lambrohan": "Please solve this problem.. ",
    "toledorobson": "Same problem.. ",
    "jeffdcamp": "I'm also seeing this error show up on Huawei devices (Model MHA-L29 / Mate 9). ",
    "odlund": "\ud83d\udc4d for this feature request. ",
    "amzer-n": "is there any workaround for this for now? . ",
    "CrazyXacker": "Checked again. I need only one click to select first element. Before that i tried to do this \njava\ndialog.getRecyclerView().scrollTo(0);\ndialog.getRecyclerView().getAdapter().notifyDataSetChanged();\nand after that i've need to click twice.. ",
    "ohodovaniuk": "The codacy/pr failure seems to be unrelated to the changes i have made. However, if you would like me to do something about it, please let me know.. ",
    "julesbond007": "This can be fixed as seen here: https://github.com/julesbond007/android-jigsaw-puzzle/blob/97b1b7df3d15f7df0ea65c3ca0d3019fca092b63/app/build.gradle#L55\nso basically you need to include the libraries individually:\nimplementation 'com.android.support:cardview-v7:27.1.0'\nimplementation 'com.android.support:recyclerview-v7:27.1.0'\nimplementation 'com.android.support:appcompat-v7:27.1.0'\nimplementation 'com.android.support:animated-vector-drawable:27.1.0'. ",
    "chweez": "You mean a BottomSheetDialog like this one here?. ",
    "davisoqt": "I mean do this with your lib, place a dialog at top, left,right,bottom and animate de dialog show.. ",
    "cdcdec": "```\n basic.setOnClickListener {\n      var dia=MaterialDialog(this)\n      val window = dia.window\n      var windowManager=windowManager\n      var display=windowManager.defaultDisplay\n      var  params = window.attributes\n      var point=Point()\n      display.getSize(point)\n      params.height=point.y/2  // \u9ad8\u5ea6\u8bbe\u7f6e\u4e3a\u5c4f\u5e55\u76840.5\n      params.width=point.x   // \u5bbd\u5ea6\u8bbe\u7f6e\u4e3a\u5c4f\u5e55\u7684\u5bbd\u5ea6\n      Log.e(\"111\",\"x=${point.x},y=${point.y/2}\")\n      params.flags=WindowManager.LayoutParams.FLAG_DIM_BEHIND\n      params.gravity=Gravity.BOTTOM\n      window.attributes=params\n      dia.show {\n        message(R.string.shareLocationPrompt)\n        debugMode(debugMode)\n      }\n    }\n```. ",
    "devjta": "Stacktrace with newest version:\n04-04 18:29:25.002 21293-21293/com.defectradar.dev2 W/ResourceType: No package identifier when getting value for resource number 0x00000000\n04-04 18:29:25.003 21293-21293/com.defectradar.dev2 W/System.err: android.content.res.Resources$NotFoundException: Resource ID #0x0\n        at android.content.res.ResourcesImpl.getValueForDensity(ResourcesImpl.java:224)\n        at android.content.res.Resources.getDrawableForDensity(Resources.java:876)\n        at android.content.res.Resources.getDrawable(Resources.java:819)\n        at android.content.Context.getDrawable(Context.java:605)\n04-04 18:29:25.004 21293-21293/com.defectradar.dev2 W/System.err:     at android.support.v4.content.ContextCompat.getDrawable(ContextCompat.java:351)\n        at com.afollestad.materialdialogs.internal.MDTintHelper.setCursorTint(MDTintHelper.java:186)\n        at com.afollestad.materialdialogs.internal.MDTintHelper.setTint(MDTintHelper.java:171)\n        at com.afollestad.materialdialogs.DialogInit.setupInputDialog(DialogInit.java:527)\n        at com.afollestad.materialdialogs.DialogInit.init(DialogInit.java:346)\n        at com.afollestad.materialdialogs.MaterialDialog.<init>(MaterialDialog.java:92)\n        at com.afollestad.materialdialogs.MaterialDialog$Builder.build(MaterialDialog.java:2183)\n        at com.afollestad.materialdialogs.MaterialDialog$Builder.show(MaterialDialog.java:2188). ",
    "amiyo-biswas": "use compile 'com.afollestad.material-dialogs:core:0.9.6.0'. @NrajaeiCS  For your above issue you should take a look here https://stackoverflow.com/questions/47164768/failed-to-resolve-com-android-supportappcompat-v727-dependency-error. @NrajaeiCS Kindly check my answer https://stackoverflow.com/a/50346556/3395198. ",
    "NrajaeiCS": "thank u amiyo-biswas,\nwhen i use compile 'com.afollestad.material-dialogs:core:0.9.6.0' i have this error : \nError:Failed to resolve: com.android.support:appcompat-v7:27.0.1\nInstall Repository and sync project\nOpen File\nShow in Project Structure dialog. ",
    "bernaferrari": "Everything becomes AndroidX, even Fragments and Activities. When this change is made, there is no going back.. Sure it will eventually be compatible, but AndroidX is still on Alpha 1, even Glide is incompatible for now, and it is considered a bad practice to release something on a non stable API, so there is still a long way to go. You can use Support 28 until it gets stable, since it has the same changes as AndroidX.\nAs for the new dialogs, I wouldn't count on them. I didn't check the new implementation, but they are usually very very basic and do not provide 5% of the functionality from this library.. > Looks like there may need to be an option to remove it.\nThanks! I am completely favourable to this idea. . That was fast. Really fast. Thanks a lot!! . I just tested. Everything is great again! Thanks!!. Also, I might be wrong, but on Material specification the content/message margin is 24dp and IT LOOKS (I really didn't measure) that Material Dialogs is using less than 24, since on my screenshot the distance is the same as the button to the corner, so it looks like 16dp.. ",
    "hardysim": "That's fine - but material-dialogs needs to be compatible. Or, maybe this lib gets deprecated because MDC comes (finally) with a good dialog-api.\nCurrently, I cannot use either of them - therefor this issue.. ",
    "dri94": "from AndroidX Docs\n\n1.0.0-rc02\n(August 27, 2018)\nThis release candidate of AndroidX is considered feature-complete and its public API surface is stable. This release will be shipped as final stable version barring any critical issues that may arise. This release should be safe to use in production.. Ahhhhh. thanks for the info and quick response! i jumped into the source code and understand better now. Would we always want to focus a button if the devices does have a dpad? or only if it has a dpad (basically has a dpad but no touch screen)?. MIght be better to close the Issue. Feel free to still send me some info on it too though. This was never an issue before. So it seems something did change (even if maybe with Google's library). But your suggestion is still appropriate, thanks for the quick response!. \n",
    "xperiafan13-rom": "Icant get this work on androidx. ",
    "loyilin": "Thanks!. ",
    "clarklak11": "Yes, core works properly. Also adding the color dependency produce the same error.. Adding this to my repositories fix it. Thanks!\ngradle\nmaven { url \"https://dl.bintray.com/drummer-aidan/maven/\" }. ",
    "LossyDragon": "I get the following. Manually adding the .aar for colors fails to implement too. \nhttps://i.imgur.com/ltVC6Mc.png. I'm not sure if this is still relevant to this thread since its closed, but I still get Failed to resolve: com.afollestad.material-dialogs:input:2.0.0-rc1 without the temporary workaround. Putting it back works fine. \ud83e\udd14. ",
    "taar1": "It's not working for me either, rolling back to 0.9.6. I've seen that and tried it out but it didn't work in my case either.. ",
    "farislivemaker": "@afollestad  i got a \"error: failed linking references.\" issue while adding core, tried using the workaround in repository still same error... ",
    "serjooo": "I just tried installing and ran into the same problem; however, I realized later that I was trying to download the wrong version. \nHow I thought versioning was done initially that the extension modules take the same version number as the core module. However, after taking a glance at the project I realized that the core module was at 2.0.0-beta6 while input was at 2.0.0-beta1. After I picked beta1 everything worked smoothly after that! Maybe this is the same problem everyone is facing without realizing and I thought it might be helpful mentioning it here.. I forgot to mention I had kept the workaround while installing. I was mentioning my issue as it wouldn't compile with the workaround as some other developers. However, yes without the workaround the problem still persists on my side as well.. ",
    "VeegaP": "Facing this as well. Core works fine, but input needs the mentioned workaround to resolve properly.. ",
    "Belka1000867": "Facing the same problem with necessity to implement workaround.\nWhat about the problem \"Unresolved reference\" if my project does not use androidx, which version should I use? . ",
    "iballan": "Adding this line to my app level gradle file solved the problem for me!\nconfigurations.all {exclude group: 'com.android.support', module: 'support-v13'}. @vizvamitra It did not work for me. Even when i set waitForPositiveButton = false. ",
    "rene-dohan": "maven { url \"https://dl.bintray.com/drummer-aidan/maven/\" }  woks...\nIts somehow not pushed to jcenter but don't understand why...\n. ",
    "Demonjkee": "Sorry\n\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0438\u0437 Mail.Ru \u0434\u043b\u044f Android \u0441\u0443\u0431\u0431\u043e\u0442\u0430, 18 \u0430\u0432\u0433\u0443\u0441\u0442\u0430 2018\u0433., 22:23 +03:00 \u043e\u0442 Aidan Follestad  notifications@github.com :\n\nClosed  #1577 .\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly,  view it on GitHub , or  mute the thread .. \n",
    "victorlapin": "Also, folderChooser sorting is case-sensitive, but I can't tell whether it's intended. Hmm, I have a pet project with coroutines and this lib, and no build errors.... Now that's weird, because:\n- I'm using kotlin synthetics\n- I'm using Picasso. @damsii here's my build.gradle paste, if it will be of any use: https://pastebin.com/SgcfEBb3. ",
    "panda912": "I have the same problem.\nversion: 2.0.0-rc7. ",
    "TheZoker": "I updated to alpha08 today, but still the cursor is at the beginning of the text not the end. I know how that works, but it would be better to include it in the input options or make it like that by default . Works! Thank you \ud83d\ude04 . ",
    "supervara91": "Example cursor at the end\nval dialog = MaterialDialog(requireContext())\n            .title(text = \"Example\")\n            .positiveButton(text = \"Update\")\n            .negativeButton(text = \"Cancel\")\n            .input(prefill = \"Example\")\nval inputField = dialog.getInputField()!!\nval cursor = inputField.text.length\ninputField.setSelection(cursor)\ndialog.show(). When is it used\n.input (maxLength = 10)\nand reaches the character limit, the positive button is not disabled. I have solved it with\n.input(waitForPositiveButton = false) { dialog, text ->\n    when {\n        text.length > 10 -> {\n            dialog.setActionButtonEnabled(WhichButton.POSITIVE, false)\n        }\n        else -> true\n    }\n}\nbut should do it by default\nSee attached video\nmax length.mp4.zip\n. When an icon is used for the dialog, the title is cut off\nSee attached video\nicon.mp4.zip\n. When is it used\n.input(maxLength = 10) { dialog, text ->\n    when {\n        text.length > 10 -> {\n            dialog.setActionButtonEnabled(WhichButton.POSITIVE, false)\n            dialog.getInputField()!!.error = \"Only 10\"\n        }\n    }\n}\nthe default error of the inputtext goes to the right, just above the counter. It would be better if the counter were on the left.\nSee attached video\nerror.mp4.zip\n. ",
    "LeoSnek": "Why was this closed? Is there a fix? I have the same issue.. ",
    "waleedmakarem": "same issue too. has anyone resolved this ?  Thanks... sorry, I am new to the android :).... What libraries shall I use... Thanks.\n. these are the support libraries into my project, and getting this error: error: failed linking references\nimplementation 'com.afollestad.material-dialogs:core:2.0.0-beta2'\n implementation fileTree(dir: 'libs', include: ['*.jar'])\nimplementation 'com.android.support:appcompat-v7:26.1.0'\nimplementation 'com.android.support.constraint:constraint-layout:1.1.3'\nimplementation 'com.android.support:design:26.1.0'\ntestImplementation 'junit:junit:4.12'\nandroidTestImplementation 'com.android.support.test:runner:1.0.2'\nandroidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'. last question  :). what is the old version of your library i shall use\n\n. ",
    "timbremer": "Tested on 4 devices and various different emulators. Let me know if you need more info!. That was actually the cause. When testing, we missed changing the v23+ styles. However, removing that style would affect many other elements in the app. Do you think custom text colors could be something for a future release?. ",
    "CHOIMINSEOK": "It resolved. Thanks!. ",
    "JZDevelopers": "going back to version 09 fixed the problem for me too, so whatever changed after 09 in version 10 is causing this problem\n. I want to override content color for my dialog which does not seem to be possible in version 09\n(gives me an error when compiling). ",
    "themuco": "I saw that same error \nbut \u0131 didnt understand what should i do \nhow can i switch to AndroidX ? \ncan you tell me . i migrate androidX from refactor \nbut same error occured\n. ",
    "jordyamc": "Don't pay attention to Crashlytics line numbers, since the migration to Kotlin is showing wrong line numbers. I thought the same, but the implementation of LifecycleObserver needs the OnLifecycleEvent annotation so i did't know how to separate from core. I tried separating all the code into a new module.... i don't have much experience separating things into modules so... probably it will have some errors. ",
    "emouawad": "Any updates on this? Having the same issue.. In retested this on an Android TV - used: \nimplementation 'com.afollestad.material-dialogs:core:2.0.0-beta4'\njava\nnew MaterialDialog(this.activity)\n                .show();\ngradle\nFATAL EXCEPTION: main\n                  Process: [redacted], PID: 12206\n                  android.view.InflateException: Binary XML file line #50: Binary XML file line #50: Error inflating class com.afollestad.materialdialogs.internal.button.DialogActionButton\n                      at android.view.LayoutInflater.inflate(LayoutInflater.java:539)\n                      at android.view.LayoutInflater.inflate(LayoutInflater.java:423)\n                      at com.afollestad.materialdialogs.utils.ViewExtKt.inflate(ViewExt.kt:32)\n                      at com.afollestad.materialdialogs.utils.ViewExtKt.inflate$default(ViewExt.kt:31)\n                      at com.afollestad.materialdialogs.MaterialDialog.<init>(MaterialDialog.kt:79)\n                      at com.[redacted].fragments.MainFragment.processFinish(MainFragment.java:86). ",
    "eakteam": "if so, delete this line from Readme : \nThe whole library was completely re-written in Kotlin. All the layouts and views were remade as well. This library is now designed specifically to work with Kotlin - it technically will work with Java, but not pleasantly.. ",
    "MahdiAstanei": "why?\n. Well thank you @afollestad for your response but I think it's better to try solving the issue instead of ignoring the elephant in the room!\nactually, I don't want to force the user to change \"whole device\" language for just a dialog, Some of the people use the phones in LTR languages and RTL apps.. First Hi @draskosaric, I do not want to insult but according to Wikipedia, there are 18 RTL languages in the world and nearly 1 Billion people in these countries and almost 300M of android users Use RTL, I think it's big enough \"Elephant\" and besides, this functionality already been in this project and if it's removed, I think it's ignoring that \"elephant\".. It's ok, the point is that in my country, I'm not sure about the whole device language, many people using English language in their devices while using Persian(RTL) apps and for that, I used to set gravity to views and layouts to make sure the layout is laid out correctly. I start using version '0.9.6.0' that made my job.\nAnyway I did not intend to blame on you or do any insulting, but if it happened, I'm sorry \ud83d\ude42\u2764\ufe0f @afollestad . ",
    "vizvamitra": "It seems that the solution above doesn't work well with prefill: positive button became disabled when I erase the contents on an input field. @iballan This works for me:\n```kotlin\nimport com.afollestad.materialdialogs.WhichButton\nimport com.afollestad.materialdialogs.actions.setActionButtonEnabled\nMaterialDialog(this).show {\n  // ...\n  input(waitForPositiveButton = false, prefill = \"Test\") { dialog, text ->\n    dialog.setActionButtonEnabled(WhichButton.POSITIVE, true)\n    // other stuff\n  }\n}\n```\nYet I think that it is not very intuitive. \ud83d\udc4f. ",
    "ghost1372": "@afollestad  im new in android can you help me? can you give me example code?. @afollestad  unfortantly my project is java and i cant use updated version, i used your help but i get error\nFileChooserDialog needs to be shown from an Activity/Fragment implementing FileCallback.. ",
    "stasbar": "Ok, I get it.. I'm wondering if scrollable = true should be moved into the MaterialDialogFragment's constructor parameter.. ",
    "dkrivoruchko": "Crash happens only when\nallowCustomArgb = true. Did you:\n1. Open color dialog\n2. Rotate screen\n3. Open the same color dialog\n?\nSimple open color dialog is ok. This\nmd_color_chooser_base_argb.xml#L49\nHas to be com.afollestad.materialdialogs.color.view.ObservableSeekBar. Screen is scrabble only when\nallowCustomArgb = false\nWhen its set to true - no vertical scrolling available, only horizontal for tabs  . Make a dialog title long so it will take two text lines.\nThen no scrolling available but colors are crop . This issue present only when allowCustomArgb = true\nWhen it's true -> layout is md_color_chooser_base_pager.\nLook at WrapContentViewPager#onMeasure - it's height set to MAXIMUM of all it's children.\nOne of it's children is a DialogRecyclerView and it measured height with  View.MeasureSpec.UNSPECIFIED so it's height is WRAP_CONTENT so no scroll in it.\nAnd this DialogRecyclerView height then set to WrapContentViewPager height .\nWrapContentViewPager height has to be set to MAX.of(MaxHeightForAllChildren, MaximumAlowedByParent). After that all children have to be reMesured with new known WrapContentViewPager height. @afollestad Any update on this issue?. That's OK. Have your time.. Well, fix you've add doesn't actually fix issue.\nI made PR to fix it properly #1710\n. ",
    "DeweyReed": "I reproduced this bug when I upgraded materail version from 1.0.0 to com.google.android.material:material:1.1.0-alpha02.. ",
    "sonhvp": "It's a bug with material library, downgrade to \"com.google.android.material:material:1.0.0\" and it works like a charm.. ",
    "ghus-raba": "Ok, I had a look and it is hard to reproduce, since it requires just right width of the buttons. I created a PR https://github.com/afollestad/material-dialogs/pull/1713. ",
    "jrcacd": "My fault. ",
    "AndyGOBrien": "To be honest, I'm not sure if this is worth your efforts. I can hack in the\nfunctionality I need on a case by case basis, it's ugly but it works. I'll\nsend some details to you tomorrow though in case you're interested. If I\nfind some time I can probably dig in and send you a PR.\nOn Mon, Feb 4, 2019, 9:04 PM Adrian Devezin <notifications@github.com wrote:\n\nWould we always want to focus a button if the devices does have a dpad? or\nonly if it has a dpad?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/afollestad/material-dialogs/issues/1706#issuecomment-460486958,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AERxfE4Ln8QOvb5_bjeu0GCCUVAZdEtmks5vKObCgaJpZM4aIWXC\n.\n. \n",
    "Paul75": "Same error with the 2.0.0-rc9. why ? That means you leave this bug ?. yes but downgrad the version 2.00 to 1.00 ? it this the solve?. ",
    "MathieuAndrade": "Why ? . ",
    "adawoud": "I figured you're just delegating these callbacks to the framework anyway. It's a bit weird. Can you think of any workaround? I tried doing this, but onResume() is only called if I turn my screen off and on again. I was actually under the impression that opening a Dialog calls onPause() in Activity/Fragment, and closing it calls onResume() again.\noverride fun onResume() {\n    super.onResume()\n    if (::firstDate.isInitialized && ::lastDate.isInitialized) {\n        btnSelectDates?.text =\n            getString(R.string.dateFromTo, formatter.format(firstDate), formatter.format(lastDate))\n    }\n}\n\nAlso, if it's not much trouble, I could use your input on another issue as well! Here's exactly what I do when the selectDates Button is clicked, and it always skips ~49 frames the first time the dialog is loaded. Could you put your hands on what might be doing this? \nbtnSelectDates.setOnClickListener {\n        nextYear.add(Calendar.MONTH, 11)\n        val dialog = MaterialDialog(requireContext()).show {\n            customView(R.layout.calendar_dialog, scrollable = true)\n            positiveButton(R.string.action_done, click = {\n                val selectedDates = calendarView.selectedDates\n                firstDate = selectedDates.first()\n                lastDate = selectedDates.last()\n            })\n            onDismiss {\n                btnSelectDates?.text =\n                    getString(R.string.dateFromTo, formatter.format(firstDate), formatter.format(lastDate))\n            }\n        }\n        val calendarView = dialog.getCustomView().findViewById<CalendarPickerView>(R.id.calendarView)\n        calendarView.init(today, nextYear.time)\n            .inMode(CalendarPickerView.SelectionMode.RANGE)\n            .withSelectedDate(today). I ended up switching to a regular DialogFragment and the system callback worked alright. A bit weird tbh\u2014sorry I couldn't do a lot of investigating because I'm on a tight deadline.\n\nAlso, the frame drops remained after the switch so I'm pretty sure the culprit is that piece of code, yeah.. ",
    "ReBirth11": "ERROR: Failed to resolve: com.afollestad:material-dialogs:2.0.0 . ",
    "hadi72h": "@severinewillez \n@afollestad \nit's possible, override these dimens\n<dimen name=\"md_title_textsize\" tools:override=\"true\">@dimen/large_text_size</dimen>\n<dimen name=\"md_message_textsize\" tools:override=\"true\">@dimen/default_text_size</dimen>\n<dimen name=\"md_action_button_textsize\" tools:override=\"true\">@dimen/default_text_size</dimen>. I'm using 2.0.0 and it works.\nIf it works, Don't touch it \ud83d\ude09. Android studio without this (tools:override=\"true\") just show bellow warning message but it works.\nOverriding @dimen/md_title_textsize which is marked as private in com.afollestad.material-dialogs:input. If deliberate, use tools:override=\"true\", otherwise pick a different name. less... (Ctrl+F1) \nInspection info:Private resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.  To fix this, copy the resource into your own project instead.  Issue id: PrivateResource. ",
    "RingoMckraken": "Code leaning on reflection hacks is definitely a great reason not implement a feature. Consider my question answered, thanks! Love the Aesthetic library too btw keep up the good work!. ",
    "ShurikuS57": "Problem description. \n1. Start origin sample app.\n2. Click button \"Input + counter\"\n3. First problem. In code value allowEmpty=false, but the agree button is available. It is wrong.\n4. Second problem. Enter text up to 8 characters. The agree  button remains available.\n\n. ",
    "yuzhiqiang1993": "Well, thank you all the same. ",
    "Hugonauta": "problem solved by migrating to androidx. ",
    "PetkevichPavel": "Hi @afollestad, thanks for your answer, of course I know what\u2019s mean index in checkItem method, but if you look one more time on the gif which I sent, you will se that: I have some button which render dialog with this single choice list items, after choose some item I set this button by chosen item text, and for future want to open dialog with current chosen item, for that I use the method checkItem by index, but because of your flow it wasn\u2019t work correctly. Look on this gif one more time and you will see that at first open the item wasn\u2019t check( as nafta) and only after click on some item the correct item will checked.\nThis flow is wrong, isn\u2019t it? \nAnd another same situation when you open dialog for the first time and you don\u2019t have some item choosed and for choose you should doble click on item because on first click you show the button and after second click you enable button for confirm, this is too very strange..\n. For sure I wasnt post my original code i posted the test code without pre-select, but with the static index pre-select(0/1) this is doesnt metter.\nHere is my original code:\nbtnFuelType?.setOnClickListener {\n            MaterialDialog(this).show {\n                title(R.string.car_dialog_fuel_type_title_str)\n                listItemsSingleChoice(R.array.FuelType) { dialog, index, text ->\n                    resources.getStringArray(R.array.FuelType).getIndexViaString()?.let {\n                        checkItem(it)\n                    }\n                    dialog.positiveButton(R.string.car_choose_dialog_positive) {\n                        text.getFuelTypeViaString(this@CarCreateEditActivity)?.let {\n                            render(CarCreationModel.RenderFuelType(it))\n                        }\n                    }\n                }\n            }\n        }\nOne more time look on video, which I recorded for you know:  HERE\nAnd if you don't understand it after that video where you have problems I don't know how to explain to you some other way.\nThanks and have a nice day.\n. I using this library from first time when this library apear and only because of that i wrote you that i see here this problem, if you do not se this problem after last video: double click for choosing is not a good idea.... First of all sorry if you fill from my comments some \"unrespect\", I know who you are and where you working. Thank you for answering tomorrow morning I will double check it and tell you actual state. \nOne more thanks for your time.\n. Hi, @afollestad one more time thank you for your explanation, you were right, that I shouldn't use chekItem(index) enough set it as a parameter inside listItemsSingleChoice() and after that pre-select work perfectly! \nAfter all, I still didn't get why when you start a dialog without pre-select the button is not visible and only after the first click it will be visible but not enable and after second click it enabled for the click.\n\n. ",
    "Raykud": "then why the documentation says you should. Try reading the: Legacy Material Style. \n. ",
    "leif123": "me too, Manifest merger failed with multiple errors, see logs. ",
    "iamdamjanmiloshevski": "Are you using Synthetic Binding for binding the views or you are using the standard binding? Because I think the problem is the KotlinX compatibility, not the Coroutines themselves. Because I added the lib and I get META INF errors from androidx, which is in this case kotlinx, if I try to skip all of them from building in the gradle specified in packageOptions, the error appears that cannot compile without it, since I use Synthetic Binding, when I removed the lib, and created a dialog with the standard native code in Java i.e Kotlin, it worked and built fine. I'm using Picasso as well as a library in the project. \nPlease tell me if I'm missing something and that may be the cause of the error, because I really appreciate this library and I use it. Cheers!. @victorlapin Thank you very much, I'll check it out and let you know of the outcome. Cheers!. Manifest merger failed : Attribute application@appComponentFactory value=(android.support.v4.app.CoreComponentFactory) from [com.android.support:support-compat:28.0.0] AndroidManifest.xml:22:18-91\n    is also present at [androidx.core:core:1.0.1] AndroidManifest.xml:22:18-86 value=(androidx.core.app.CoreComponentFactory).\n    Suggestion: add 'tools:replace=\"android:appComponentFactory\"' to <application> element at AndroidManifest.xml:5:5-27:19 to override.\nThis build problem appears after I add the dependency. It's related with AndroidX as far as I understand\nThen after adding tools:replace=\"android:appComponentFactory\"\n            android:appComponentFactory=\"\"\nthis to my Manifest in the application tag\nMore than one file was found with OS independent path 'META-INF/androidx.localbroadcastmanager_localbroadcastmanager.version' this error appears.\nThe project builds fine if I remove the dependency and revert the changes in Manifest. I don't want to use AndroidX in this project, is there a way to bypass this, downgrade the version maybe or something else? Since I researched deeply and saw that other people have encountered the same problem, and most of them solved it by migrating to AndroidX, I don't want to do it, and frankly, I may face many other problems by doing so, and no time to fix them. I'd be happy if I can find a workaround for the problem. Anyway, cheers and thanks. . ",
    "guger": "The stacktrace (shortened):\n\nandroid.view.InflateException: Binary XML file line #7: Binary XML file line #7: Error inflating class com.google.android.material.tabs.TabLayout\n    Caused by: android.view.InflateException: Binary XML file line #7: Error inflating class com.google.android.material.tabs.TabLayout\n    Caused by: java.lang.reflect.InvocationTargetException\n        at com.afollestad.materialdialogs.utils.ViewExtKt.inflate(ViewExt.kt:47)\n        at com.afollestad.materialdialogs.utils.ViewExtKt.inflate$default(ViewExt.kt:46)\n        at com.afollestad.materialdialogs.internal.main.DialogContentLayout.addCustomView(DialogContentLayout.kt:122)\n        at com.afollestad.materialdialogs.customview.DialogCustomViewExtKt.customView(DialogCustomViewExt.kt:54)\n        at com.afollestad.materialdialogs.customview.DialogCustomViewExtKt.customView$default(DialogCustomViewExt.kt:50)\n        at com.afollestad.materialdialogs.datetime.DialogDateTimePickerExtKt.dateTimePicker(DialogDateTimePickerExt.kt:41)\n        at com.afollestad.materialdialogs.datetime.DialogDateTimePickerExtKt.dateTimePicker$default(DialogDateTimePickerExt.kt:35)\n        at com.afollestad.materialdialogssample.MainActivity.showDateTimePicker(MainActivity.kt:792)\n        at com.afollestad.materialdialogssample.MainActivity.access$showDateTimePicker(MainActivity.kt:54)\n        at com.afollestad.materialdialogssample.MainActivity$onCreate$55.onClick(MainActivity.kt:683)\n        at android.view.View.performClick(View.java:6597)\n     Caused by: java.lang.IllegalArgumentException: The style on this component requires your app theme to be Theme.AppCompat (or a descendant).\n        at com.google.android.material.internal.ThemeEnforcement.checkTheme(ThemeEnforcement.java:221)\n        at com.google.android.material.internal.ThemeEnforcement.checkAppCompatTheme(ThemeEnforcement.java:196)\n        at com.google.android.material.tabs.TabLayout.(TabLayout.java:417)\n        at android.view.LayoutInflater.inflate(LayoutInflater.java:423)\u00a0\n        at com.afollestad.materialdialogs.utils.ViewExtKt.inflate(ViewExt.kt:47)\u00a0\n        at com.afollestad.materialdialogs.utils.ViewExtKt.inflate$default(ViewExt.kt:46)\u00a0\n        at com.afollestad.materialdialogs.internal.main.DialogContentLayout.addCustomView(DialogContentLayout.kt:122)\u00a0\n        at com.afollestad.materialdialogs.customview.DialogCustomViewExtKt.customView(DialogCustomViewExt.kt:54)\u00a0\n        at com.afollestad.materialdialogs.customview.DialogCustomViewExtKt.customView$default(DialogCustomViewExt.kt:50)\u00a0\n        at com.afollestad.materialdialogs.datetime.DialogDateTimePickerExtKt.dateTimePicker(DialogDateTimePickerExt.kt:41)\u00a0\n        at com.afollestad.materialdialogs.datetime.DialogDateTimePickerExtKt.dateTimePicker$default(DialogDateTimePickerExt.kt:35)\u00a0\n        at com.afollestad.materialdialogssample.MainActivity.showDateTimePicker(MainActivity.kt:792)\u00a0\n        at com.afollestad.materialdialogssample.MainActivity.access$showDateTimePicker(MainActivity.kt:54)\u00a0\n        at com.afollestad.materialdialogssample.MainActivity$onCreate$55.onClick(MainActivity.kt:683)\u00a0\n        at android.view.View.performClick(View.java:6597)\u00a0. @anggrayudi I think MaterialDateTimePicker does not provide a combination of both Date and Time picker in one dialog, and this library here provides an awesome framework for android dialogs, it'd be a pity not to use it.. . > For your exception:\n\nCaused by: java.lang.IllegalArgumentException: The style on this component requires your app theme to be Theme.AppCompat (or a descendant).\n\nThat means you're mismatching different styles between AppCompat and MaterialComponents.\n\n@afollestad Okay, but where exactly? I mean setting the 'core-dialog-theme' to MaterialComponents will cut backwards compatibility with AppCompat...\nDo you know where and how to solve this?. Well, but that would only cost a line in the docs, but actually, users of the library are not able to use e.g. the ThreeTenABP library.\nIn my case, I need this lib, since the standard ThreeTenBP library causes an error 'No time-zone data files registered' on devices loading the time-zones of the ThreeTenBP lib too slow. ThreeTenABP provides another loading mechanims, which prevents this error.. Well, sounds appropriate, since this is an android library.. Okay! . ",
    "BrendonParkFC": "Cheers!. ",
    "malamel": "package com.afollestad.materialdialogs.color;\nimport android.content.Context;\nimport android.content.res.ColorStateList;\nimport android.content.res.Resources;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.graphics.Rect;\nimport android.graphics.drawable.Drawable;\nimport android.graphics.drawable.RippleDrawable;\nimport android.graphics.drawable.ShapeDrawable;\nimport android.graphics.drawable.StateListDrawable;\nimport android.graphics.drawable.shapes.OvalShape;\nimport android.os.Build;\nimport android.support.annotation.ColorInt;\nimport android.support.annotation.ColorRes;\nimport android.support.annotation.FloatRange;\nimport android.support.v4.view.GravityCompat;\nimport android.support.v4.view.ViewCompat;\nimport android.util.AttributeSet;\nimport android.util.TypedValue;\nimport android.view.Gravity;\nimport android.widget.FrameLayout;\nimport android.widget.Toast;\nimport com.afollestad.materialdialogs.util.DialogUtils;\npublic class CircleView extends FrameLayout {\n```\nprivate final int borderWidthSmall;\nprivate final int borderWidthLarge;\nprivate final Paint outerPaint;\nprivate final Paint whitePaint;\nprivate final Paint innerPaint;\nprivate boolean mSelected;\npublic CircleView(Context context) {\n    this(context, null, 0);\n}\npublic CircleView(Context context, AttributeSet attrs) {\n    this(context, attrs, 0);\n}\npublic CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n    final Resources r = getResources();\n    borderWidthSmall = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 3, r.getDisplayMetrics());\n    borderWidthLarge = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, r.getDisplayMetrics());\nwhitePaint = new Paint();\nwhitePaint.setAntiAlias(true);\nwhitePaint.setColor(Color.WHITE);\ninnerPaint = new Paint();\ninnerPaint.setAntiAlias(true);\nouterPaint = new Paint();\nouterPaint.setAntiAlias(true);\n\nupdate(Color.DKGRAY);\nsetWillNotDraw(false);\n\n}\nprivate void update(@ColorInt int color) {\n    innerPaint.setColor(color);\n    outerPaint.setColor(shiftColorDown(color));\nDrawable selector = createSelector(color);\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n    int[][] states = new int[][]{\n            new int[]{android.R.attr.state_pressed}\n    };\n    int[] colors = new int[]{shiftColorUp(color)};\n    ColorStateList rippleColors = new ColorStateList(states, colors);\n    setForeground(new RippleDrawable(rippleColors, selector, null));\n} else {\n    setForeground(selector);\n}\n\n}\n@Override\npublic void setBackgroundColor(@ColorInt int color) {\n    update(color);\n    requestLayout();\n    invalidate();\n}\n@Override\npublic void setBackgroundResource(@ColorRes int color) {\n    setBackgroundColor(DialogUtils.getColor(getContext(), color));\n}\n/*\n * @deprecated\n /\n@Deprecated\n@Override\npublic void setBackground(Drawable background) {\n    throw new IllegalStateException(\"Cannot use setBackground() on CircleView.\");\n}\n/*\n * @deprecated\n /\n@SuppressWarnings(\"deprecation\")\n@Deprecated\n@Override\npublic void setBackgroundDrawable(Drawable background) {\n    throw new IllegalStateException(\"Cannot use setBackgroundDrawable() on CircleView.\");\n}\n/*\n * @deprecated\n /\n@SuppressWarnings(\"deprecation\")\n@Deprecated\n@Override\npublic void setActivated(boolean activated) {\n    throw new IllegalStateException(\"Cannot use setActivated() on CircleView.\");\n}\npublic void setSelected(boolean selected) {\n    mSelected = selected;\n    requestLayout();\n    invalidate();\n}\n@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    super.onMeasure(widthMeasureSpec, widthMeasureSpec);\n    setMeasuredDimension(getMeasuredWidth(), getMeasuredWidth());\n}\n@Override\nprotected void onDraw(Canvas canvas) {\n    super.onDraw(canvas);\n    final int outerRadius = getMeasuredWidth() / 2;\n    if (mSelected) {\n        final int whiteRadius = outerRadius - borderWidthLarge;\n        final int innerRadius = whiteRadius - borderWidthSmall;\n        canvas.drawCircle(getMeasuredWidth() / 2,\n                getMeasuredHeight() / 2,\n                outerRadius,\n                outerPaint);\n        canvas.drawCircle(getMeasuredWidth() / 2,\n                getMeasuredHeight() / 2,\n                whiteRadius,\n                whitePaint);\n        canvas.drawCircle(getMeasuredWidth() / 2,\n                getMeasuredHeight() / 2,\n                innerRadius,\n                innerPaint);\n    } else {\n        canvas.drawCircle(getMeasuredWidth() / 2,\n                getMeasuredHeight() / 2,\n                outerRadius,\n                innerPaint);\n    }\n}\n@ColorInt\nprivate static int translucentColor(int color) {\n    final float factor = 0.7f;\n    int alpha = Math.round(Color.alpha(color) * factor);\n    int red = Color.red(color);\n    int green = Color.green(color);\n    int blue = Color.blue(color);\n    return Color.argb(alpha, red, green, blue);\n}\nprivate Drawable createSelector(int color) {\n    ShapeDrawable darkerCircle = new ShapeDrawable(new OvalShape());\n    darkerCircle.getPaint().setColor(translucentColor(shiftColorUp(color)));\n    StateListDrawable stateListDrawable = new StateListDrawable();\n    stateListDrawable.addState(new int[]{android.R.attr.state_pressed}, darkerCircle);\n    return stateListDrawable;\n}\n@ColorInt\npublic static int shiftColor(@ColorInt int color, @FloatRange(from = 0.0f, to = 2.0f) float by) {\n    if (by == 1f) return color;\n    float[] hsv = new float[3];\n    Color.colorToHSV(color, hsv);\n    hsv[2] *= by; // value component\n    return Color.HSVToColor(hsv);\n}\n@ColorInt\npublic static int shiftColorDown(@ColorInt int color) {\n    return shiftColor(color, 0.9f);\n}\n@ColorInt\npublic static int shiftColorUp(@ColorInt int color) {\n    return shiftColor(color, 1.1f);\n}\npublic void showHint(int color) {\n    final int[] screenPos = new int[2];\n    final Rect displayFrame = new Rect();\n    getLocationOnScreen(screenPos);\n    getWindowVisibleDisplayFrame(displayFrame);\n    final Context context = getContext();\n    final int width = getWidth();\n    final int height = getHeight();\n    final int midy = screenPos[1] + height / 2;\n    int referenceX = screenPos[0] + width / 2;\n    if (ViewCompat.getLayoutDirection(this) == ViewCompat.LAYOUT_DIRECTION_LTR) {\n        final int screenWidth = context.getResources().getDisplayMetrics().widthPixels;\n        referenceX = screenWidth - referenceX; // mirror\n    }\n    Toast cheatSheet = Toast.makeText(context, String.format(\"#%06X\", 0xFFFFFF & color), Toast.LENGTH_SHORT);\n    if (midy < displayFrame.height()) {\n        // Show along the top; follow action buttons\n        cheatSheet.setGravity(Gravity.TOP | GravityCompat.END, referenceX,\n                screenPos[1] + height - displayFrame.top);\n    } else {\n        // Show along the bottom center\n        cheatSheet.setGravity(Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, height);\n    }\n    cheatSheet.show();\n}\n```\n}\n. ",
    "timusus": "In order to do that, the default show() method would have to assume the passed in Context is an Activity, and try to glean the FragmentManager from that (as it used to). This would mean that the Dialog would crash (or otherwise fail to show) if presented from a Fragment without using the overloaded show() method. I can see this being more confusing for someone trying to understand how to use these dialogs.\nI kind of understand where you're coming from, but I think it's safer to force the caller to pass in the correct FragmentManager. And although it's a 'widely used' method, remember that this is only for these 3 types of custom dialogs, which are different to your normal MaterialDialogs (which do not require a FragmentManager at all)\nI think it's important to allow these Dialogs to be hosted somewhere other than an Activity, and it's not safe to then assume by default that they are shown from an Activity. . Ah yes, makes sense. Sorry, I was fixated on the 0-arg show() method below.. ",
    "petedoyle": "Brand new 2.0 user (rc9), may be off-\nIn order to match md_color_title and md_color_content, would it make sense to call this md_color_button? \nOr, possibly:\nmd_color_button_positive and md_color_button_negative.\n. "
}