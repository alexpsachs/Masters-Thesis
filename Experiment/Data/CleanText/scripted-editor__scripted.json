{
    "aeisenberg": "Looks like the server crashed on you.  Try restarting the server.  Just type from the command line:\nscr\nAlso, you can take a look at the scripted.log file at the root of your project.  A server crash will have been logged there.\n. Add the following to the top of your file:\n/*global $ */\nAlternatively, you can configure the globals for the entire project.  See the configuration section of the features wiki page:\nhttps://github.com/scripted-editor/scripted/wiki/Features\n. We have definitely been thinking about this.  Our todo list is so long right now and we need to prioritize.  A large part of how this feature will be prioritized will be how many users are asking for it.\n. When you are asking for type script support, what specifically do you\nexpect?\nsyntax highlighting, content assist. hovers and navigation, or is there\nsomething else?\nOn Tue, Jan 22, 2013 at 5:23 AM, Sergey Kamenskiy\nnotifications@github.comwrote:\n\n+1\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/5#issuecomment-12544042.\n. Maybe we should add trello integration.  :-)  But I agree this could be confusing.  As we progress with scripted, there will be many UI changes.  So, this is something to consider.\n. Fixed and pushed. 183eba5\n. Nice works like a charm.  Commit 3fcbc29\n. I can get this to fail reliably if I use a /jslint node:true / directive\n. Fixed the problem with regression tests. 9f1cdbe\n\nI see that your original issue did not include any jslint comments,  Are you able to reproduce without jslint involved?\n. Great.  Then I'll consider this issue fixed.\n. Getting a chance to look at this now.\n. Hmmm...it is working for me.  Marking as invalid for now.  Can you try to reproduce on your end?\n. Yep...fixed.  Closing now.\n. Fixed.  I changed the outline style to be dashed instead of solid and you can now see the caret always.\n. Change nomen from true to false.  This works for me.\nThe linter only runs on save and so when you initially paste to an empty file you won't see any problems until the save.\n. This has already been implemented and will be available in the 0.3 release.  Scripted will keep track of navigator width and side-panel width in local storage so the layout will be more consistent on refresh.\n. Thanks for raising the issue.\n. > It seems like what's ultimately needed here is a plugin mechanism so you can contribute an extension to our amd-resolver module to handle your plugin's resolution. This is a bit of a complex issue and probably we are not ready yet to put in such a plugin mechanism.\nI'd want to avoid this solution if possible.  Requiring users to\ninstall a scripted plugin for every AMD loader plugin will be very\npainful (see M2E v1.0 and later).  Now, if the scripted  plugin could\nbe discovered and used without requiring any user actions, that would\nbe great.\nBut, we're getting ahead of things here.  I just wanted to point out a\npotential trap that we should avoid.\n. Looks like it.  I tried on the esprima web console http://esprima.org/demo/parse.html and the slocs all looked correct.\n. OK...This has to do with the way that we are associating doc comments with AST nodes.  We assume a single pass through the file that is in lexical order.  This used to be true, but now that we are visiting the entire file, the target function is always visited last even if there are other statements lexically after the function declaration.\nWhat's happening in this case is that the var x is visited before the parseFile function.  The doc comment is then associated with the var x instead of being associated with the function parseFile (as it should be).\n. Pushed a fix.\n. Fixed.  Now, the readable type will include the full name of enclosed types if they are not objects.  Eg, the example above now looks like: \nfoo :: { a : { b : String } }\nAnd the following\n/** @type {{a:{b:{}}}} */    \nvar foo;\nlooks like the old way:\nfoo :: { a : { b : {...} } }\nClosing this issue since the immediate problem is addressed, but happy to discuss better ways to display complex types.\n. Pushed the fix.  Now hovers over parameterized arrays will look like this:\nArray[Number]\nAnd, scripted will assume that for array literals, the type of the first element is representative of the entire array.  Also, any assignments to array elements will change the type of the array to whatebver the type of the element is.  Eg-\nvar foo = [];\nfoo[0] = 9;\nfoo[1] = '';\nfoo\nHover over the last foo and you will see `Array[String].\n. What are the contents of the file?\nOn Tue, Dec 11, 2012 at 12:38 PM, cawoodm notifications@github.com wrote:\n\nIf you save .scripted as a UTF-8 (with BOM) you get the following error in\nthe console:\nProblems getting scripted configuration:\nCouldn't parse (JSON5)\n'C:/Marc/Pers/Work/JavaScript/offline/bible/.scripted'\nERROR: SyntaxError: Unexpected ''\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/54.\n. I guess I am confused now...what do you mean by BOM?\n\nOn Wed, Dec 12, 2012 at 12:04 AM, cawoodm notifications@github.com wrote:\n\nI stripped the file down to {} and it still failed until I removed the\nBOM. However this was the original file:\n{\n```\n\"ui\": {\n    \"font\": \"Courier New\"\n},\n\"editor\": {\n    \"expandtab\": true,\n    \"tabsize\": 2\n},\n\"jshint\" : {\n    \"global\" : [\"console\", \"define\", \"exports\", \"module\", \"process\", \"__dirname\", \"require\", \"$\", \"window\"]\n}\n```\n}\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/54#issuecomment-11280029.\n. Interesting....we are loading the file as UTF-8, so I don't know why this\nis failing.  It might be that the JSON5 library that we are using doesn't\nrecognize it.\n\nCan you attach a failing file or send it to me directly if you can't attach\nfiles here?\nI can try to isolate the problem through invoking the library directly.\nOn Wed, Dec 12, 2012 at 11:12 AM, cawoodm notifications@github.com wrote:\n\nhttp://en.wikipedia.org/wiki/Byte_order_mark\nIt's basically a FEFF byte sequence at the start of a unicode text file\nwhich tells the interpreter in which order the bytes of multi-byte\ncharacters appear in a byte stream. Unicode is real important to those\nworking in multi-lingual environments. True, your configuration file\nprobably doesn't need to be unicode but many people have switched to\nunicode on principle and all new files we make are UTF-8.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/54#issuecomment-11304164.\n. Not too forward or undesired.  We gladly accept pull requests.  See the\n\"Can I contribute?\" section at the bottom of\nhttps://github.com/scripted-editor/scripted/\n\nOne of us will take a look on Monday.\nOn Sat, Dec 15, 2012 at 5:24 AM, cawoodm notifications@github.com wrote:\n\nOK, I just did my first ever fork and it's made a new issue. Sorry if this\nis too forward or undesired...\nhttps://github.com/scripted-editor/scripted/issues/75\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/55#issuecomment-11403380.\n. We started with the springsource.com issue tracker, but it seems that most\nusers are more comfortable with the built-in github issue tracker.  So, we\nare migrating away from the sprinsource.com one.  For now, at least, both\nissue trackers are active and we will respond to either one.\n\nOn Sat, Dec 15, 2012 at 9:25 AM, cawoodm notifications@github.com wrote:\n\nSo you guys have 2 issue lists: SpringSource and GitHub. Any plans to\nmerge?\nIt seems this issue is the same as\nhttps://issuetracker.springsource.com/browse/SCRIPTED-197\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/55#issuecomment-11406805.\n. There is some smarts in navHistory.js that does a bit to handle the\nproblem, but not enough.  See the scrollToSelection function in\nnavHistory.js.\n\nscrollToSelection\nscrollToSelection\nscrollToSelection\nscrollToSelection function in\nOn Wed, Dec 12, 2012 at 3:42 PM, Andy Clement notifications@github.comwrote:\n\nWe have some dialogs (and no doubt other things..) that cause an editor to\njump to a selection. The selection can be horribly positioned and be\ndifficult to instantly spot, it is annoying.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/56.\n. We need to catch this error and clean out the localStorage and try again.\nThe question is, how do we know what to clean out?\n\nI have an implementation that I think is working. Idea is this:\nAfter quota is exceeded, delete everything older than 2 days and try again.\nIf still over quota, delete older than one day. If STILL over quota, 6\nhours, and then 1 hour. And then just fail if still not working.\nThis implementation only clears out indexes. Does not touch history.\nOn Thu, Dec 13, 2012 at 8:29 AM, Andy Clement\n\n\nwrote:\nWe need to properly deal with:\nUncaught Error: QUOTA_EXCEEDED_ERR: DOM Exception 22\nthrown by the IndexerService (line 378). It leaves you in a bad way and if\nyou don't notice the problem in the console all you will see is a poorly\nbehaving editor.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/57.\n. Fixed exactly as described above.  Now pushed to github.\n. Nice work!\n\nOn Thu, Feb 14, 2013 at 11:33 PM, Andy Clement notifications@github.comwrote:\n\nthose little style things annoyed me so I fixed them too.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/58#issuecomment-13595418.\n. I can't reproduce this one any more.  closing.\n. Oops...closed before I saw your comment on focus.  Even with that, I still can't reproduce.  Can you?  If so, worth re-oening.\n. Unfortunately, these lower end Fn keys cannot be rebound.  We cannot override some of these browser and system keybindings.\n. Thanks for the test case.  We'll take a look and see how we can get these\nkinds of keys overridable in scripted.  Seems to work on mac-chrome, too.\n\nOn Fri, Dec 14, 2012 at 10:01 AM, cawoodm notifications@github.com wrote:\n\nWell Ctrl+L is a Chrome hotkey which can be overridden by scripted so I\ntried this out:\ndocument.onkeydown = function(event){\n    event.preventDefault();\n    console.log('Key: '+event.keyCode);\n    if (event.keyCode == 114) console.log(\"You pressed F3 and Chrome doesn't know!\");\n    return false; }\nand it seeems to work: Chrome doesn't open it's Find dialog when you press\nF3. Works in FF too.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/60#issuecomment-11385746.\n. Not sure what you mean by this.  There is nowhere that specifies the number\nof searches found.  And navigation between the search results seems fine.\n\nOn Fri, Dec 14, 2012 at 4:03 AM, cawoodm notifications@github.com wrote:\n\nIf my code contains the word \"function\" thrice and I search for it and\nstep through the locations it seems to find 4. I suspect the 4th (or 1st)\nis the word \"function\" in the actual search box.\nLow prio obviously.\n[image: 2012-12-14_1301]https://f.cloud.github.com/assets/498834/13149/355be722-45e6-11e2-8ea8-b0ee5c35a656.png\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/61.\n. Fixed.  Thanks for pointing out.\n. Would need to include a (configurable) delay.\n. Having a look at this now.\n. Depending on content type, we should have different keys bring up content assist.  Eg- html should do it on '<' and css should do it on '#' and '.', etc.\n. Partial fix.  Proposals are now sorted case-insensitively.  But the check for proposal application is still case-sensitive.\n. I've got something really good here.  I re-implemented the \"looselyMatches\" algorithm that I use in Groovy-Eclipse.  This means that we can match on camel case as well as case-insensitively.\n\nThings appear to be working, but this has caused havoc on the tests.  I will need to spend a good deal of time reworking the tests to make sure everything still passes.\n. Pushed this to master.  See a9998c7\nAll tests passing and things looking good. \nBut here are some things that will match toLocalString() (content assist at the |):\nfoo.t|\nfoo.tLS|\nfoo.tolocal|\nfoo.toLoSt|\nNot closing yet because I need to add some more tests. I have tests for the loose matcher, but none for content assist that uses loose matching.\n. Regression tests now committed.  See 64a1fc2.\nClosing this issue.  Will be available in the 0.3.0 release.  Nice.\n. This is a duplicate of #77, which is now fixed.\n. This is fixed in latest from master.\n. This will be fixed when we move to orion 1.0.  They have this working in the editor now.  However, we will not be able to score the bonus points for auto-closing the curly.\n. In the latest builds of scripted, you will see a completions folder in the top level directory.  In there you will find .scripted-completions files.  You can create custom completions files using the same syntax.  \nCustom completions files should be placed in your .scriptedrc folder so that they are not removed when you upgrade.\nAnd if you do create your own completion file, then contributing it back to scripted would be appreciated.  :-)\nThe file format is compatible with sublime text completions.  See here for full documentation: https://sublime-text-unofficial-documentation.readthedocs.org/en/latest/extensibility/completions.html\nPlay around with this and let me know if it is sufficient for your purpose.  There are other things that we are considering supporting, like the current selection or the current line.\n. Yeah.. I've confirmed that this is a problem in windows.  I'll be taking a\nlook at this right now.\nOn Wed, Dec 19, 2012 at 12:29 PM, cawoodm notifications@github.com wrote:\n\nbtw. I'm getting \"Error finding the completions directory.\" which sounds a\nlikely source of error...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/87#issuecomment-11546965.\n. Thanks for the pointer. I will try this out, but there is currently a power\noutage at my home. Can only connect through my iPhone. So not much can get\ndone right now.\n\nIdea: get a version of scripted that can run on handheld devices.\nOn Wednesday, December 19, 2012, cawoodm wrote:\n\nserver\\templates\\completions.js line 61 (cb(null)) is where we are at...\nA console.log(this.completionsFolders) reveals\n[ 'undefined/.scriptedrc/', 'C:\\Users\\me\\Google\nDrive\\Work\\completions/' ]\nWindows issue for sure but there are 2 issues:\n1. process.env.HOME is not defined on windows it's HOMEPATH\n2. completionFolders1 + '/'`) is totally incorrect\nYou might want to try this require('path').dirname(require.main.filename).\nSee the discussion here:\nhttp://stackoverflow.com/questions/3133243/how-to-get-path-to-current-script-with-node-js/7352912#7352912\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/87#issuecomment-11548065.\n. OK.  I just pushed some fixes that should address the path problems.  Can you pull and try again?\n. > 1. When I type in \"fun\" it auto-completes to \"function\" although there is no such trigger in any of my completion files. I assume that Scripted just \"knows\" about basic JavaScript keywords like function and if. This is cool though the downside is you can't name your templates \"fun\" and expect Ctrl+Space -> Enter to get the right one. Maybe we should prioritize templates over keywords in the code-completion dropdown.\n\nRight now, there are two kinds of \"templates\".  The built in ones,\nthat were originally supplied by Orion, and the new ones that use the\ntemplating mechanism just implemented.  The first one will go away\neventually and be replaced completely by the templating mechanism.\nEven so, you should be able to tell what the template produces by\nlooking at whatever is after the ':'.\nJust for fun, I added two more templates: one \"function (named)\" and\none \"function (anon)\".\n\n\nThe code-base seems to have too many places where the root path is evaluated. This should be centralised so each component can call getScriptedPath() or getUserPath() and pass a folder or filename and have it resolved.\n\n\nAre you talking specifically about the completions support, or\ngenerally throughout the codebase?  I just made some changes so that\ncompletions.js calls out to some common functions to get the\nscriptedrc location.\n\n\nThere also seem to be a lot of '/'s in use which is platform specific but seems to work...mostly on Windows but I am seeing weird // or /\\ paths. Best use path.resolve or the centralized functions I mentioned.\n\n\nAgain, are you talking about the completions or generally in the\ncodebase?  In completions, the only '/' left are in a single call to\npath.resolve.\nWe'll be refactoring this area over time to ensure all of our\nfilesystem calls go through a single module, but that will not make it\ninto 0.3.\n. Done.  Now available on 0.4.0 branch.\n. Fixed this issue into master.  In the end, I mostly just removed the isBinary method call in navHiistory.\nAdditionally, changed the response code to 500 from the server and made a more explicit error message.\nSee 3352e09.\n. Are you talking about navigating via module reference inside of\nrequire/define calls? This should work. If it doesn't then this is a bug.\nIf you're talking about something else, then can you give specific examples?\nOn Saturday, December 22, 2012, cawoodm wrote:\n\nSimilar to F8 which takes me to the variable declaration I want to jump to\nthe script path under the cursor.\nIf my cursor is inside the text 'require.js' it should navigate to that\nscript if I press F8 (or Shift+F8 etc).\nLogic:\n1. Find the string I am at by searching forwards and backwards for ' or \"\n2. Check if the file exists\n3. Open if it exists, subtle warning if it doesn't\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/95.\n. I see what you are describing now. This is definitely doable. It would require calling js-depend in different ways and in different kinds of files, but not overly challenging to implement. It would be something nice for 0.4.0.\n. Most definitely a bug. I'll take a look when I get my first chance.\n\nOn Saturday, December 22, 2012, cawoodm wrote:\n\ncar.js:\ndefine(function() {\n    function Car(model) {\n        this.model = model;\n    }\n    Car.prototype = {\n        show: function() {\n            console.log(this.model);\n        }\n    };\n    return Car;});\napp.js:\nrequire(['car'], function(Car) {\n    var c = new Car('ford');\n    c.show();});\nc.show() works in the browser but Scripted cannot see it.\nUncaught TypeError: Cannot read property 'show' of undefined\n:7261/scripts/plugins/esprima/esprimaJsContentAssist.js:1959\n[image: show]https://f.cloud.github.com/assets/498834/28469/adb11f20-4c31-11e2-93bc-fd0296617733.png\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/96.\n. Fixed.  The problem  was that the algorithm for determining the reachable types of a summarized module was incorrect.  When summarizing a dependency, we do not store all types declared in it.  Rather we only store types that are reachable by the exported properties.  In this case, the inferencing engine was getting tripped up over having a constructor whose prototype has been changed as the exported object.\n\nFixed now with regression tests.\nSee ec874d60ae.\n. Working on the tooltips is something that we will look at for 0.4  They definitely need to be formatted better, use colors, and where appropriate  show the docs.  In this case, are you specifically talking about the parameter types?\n. I changed the title to better reflect what you are describing. This is the direction that we want to go in where the tooltip hovers are more informative. I'd also consider putting some form of this information in a side panel.\n. I think this bug is the same one described in issue #185.  Are you still seeing this?  Are you using canary builds?\nI have not been able to reproduce this issue at all, but I will leave this open for now if you still see it.\n. Fixed.  Now, we make a best guess as to the final selection.  If starting with an existing selection (ie- formatting only part of the text), then we expand/contract the original selection to match exactly the part that was formatted.\nIf formatting w/o a selection, then we can't be certain exactly where the final selection should be since offsets of the file may have changed.  Instead, we keep track of the starting line/column and after formatting, we place the caret in that line/col if it exists.\nThis is not perfect since there may be lines added or removed, but it will get you much closer to the original selection than before.\nsee a62dca0 and 35f596d\nI see that there are no unit tests for formatting.  We need to create some.  Different issue.  Closing this one.\n. Forgot to mention that I committed this fix on the v0.4.0 branch.  We will be releasing 0.3.0 in the new year and we will only be placing critical fixes into the master branch until it is released.\n. Thanks for the Christmas present!\n. Can you do a rebase and add this change to the current pull request?  Or\njust close the pull request and open a new one.  It is important to have\nthe correct author tags on all external commits for copyright and egal\npurposes.  And speaking of legal, we won't be able to do anything with this\nuntil the new year for reasons that we already discussed.\nOn Wed, Dec 26, 2012 at 8:38 AM, cawoodm notifications@github.com wrote:\n\nHo ho ho!\nI have an update/addition. If you run exec in a subfolder (foo/) it seems\nto remain in the projectDir so you need the subpath foo/db.js.\nShould we adapt my code above or add a new ${filenamer} (filename\n_r_elative):\ndef(\"${filenamer}\", function() {\n    var p = editor.getFilePath();\n    return p.substring((window.fsroot || getDir()).length+1);});\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/pull/100#issuecomment-11689416.\n. I changed the title of this issue since it is not just windows where the tests are failing.  I also see failures in firefox on mac.  Other users have reported errors in Chrome on Mac.\n\nI need to determine what the problematic tests are and refactor them so they are less brittle.\nThis is difficult since the tests are so tied to the dom and events that happen to it.\n. Currently, \nNav History tests: testHistorycrumb5 (2, 6, 8)\nfailing for me on mac/firefox.  Same error as Andy reports in original comment.\n. The first problem is fixable.  Looks like a slight difference between the way that firefox and chrome handle scrolling (both are behaving correctly when I try it manually).  I added a switch so that the expected result is different depending on whether or not it is firefox or chrome.\nI don't really like this solution since it will potentially require different test assertions for each browser.  I have not tried this on phantomjs or safari, so I may need to add a switch statement for the assertion.\nThe second problem is more insidious.  The failures occur when there is a programmatic forward or back click.  It looks like this action is triggered asynchronously, but there is no way to listen for the event's completion.  Currently, I have an arbitrary 1000ms setTimeout after the history.forward and history.back calls.  This seems to work on chrome (mostly), but fails in firefox presumably because the browser takes longer to perform the action.\nif there is no forward/back event that I can look for, then I should be hooking into some other event instead rather than rely on a timeout.\n. The commit above makes navHistoryTests.js more reliable.  I removed the setTimeouts around the history.forward and back calls.  Instead, I added an extra event handler to check that the page state had correctly changed after history forward and back buttons were pressed.\nThis wasn't enough.  I also needed to add an extra 0ms timeout call to ensure that the non-test pop state handler was added before tests started running.\nWorking for me now on firefox and chrome.  Should test on windows, but I am feeling fairly confident about this change.\n. This is working locally for me in the phantomjs build.  Pushed cf2c1fa to github so that travis ci will pick it up.  Let's see if it works.  If so, I will close this bug.\n. Yippee!! https://travis-ci.org/scripted-editor/scripted/builds/4135050\n. Sounds reasonable to me.\n. All calls to localStorage are now going through the storage.js module.  When a new file summary is added to storage, but storage is full, scripted purges localStorage of items older than 1 hour.  There are one of 3 things happening here:\n1. there is a group of files that you are working on with so many dependencies that they fill up localStorage.\n2. there was some other junk in your local storage that is not getting purged (only items that have a timestamp associated with them can be purged (and right now that is the file summaries, which contain the bulk of localStorage) ).  I don't know what else this could be, but it's a possibility.\n3. the localStorage purge is not purging correctly.\nThere's not much I can do unless this is reproducible, but it would be helpful if you could answer the following:\n1. Before manually clearing localStorage, did this happen more than once (ie- every time you refreshed the page)?  Or did this happen just one time?\n2. What project did this happen on?  Is it a particularly large project with many dependencies? Have you been opening many files across different projects lately?\nIf this happens again, or you just notice any other lags due to indexing, look at your console and paste any errors or messages here.\n. One thing I can do is run the purge as a series of async operations.  This would at least free up the UI while the purge is happening, but would only fix the symptom, not the problem.  So, I am reluctant to go this way without more data.\n. I've hit the local storage maximum a few times now (that I am aware of).  I have noticed no more slowing down of the UI.  The only way that I know this has occurred is that I happen to have been looking at the console and see the messages in there.  I would say that this is no longer a problem.  So, I am closing, but please reopen if you still feel the sluggishness.\n. Now complete.  Logging the amount of time it is searching backwards to remove keys.\n. Fixed. Will raise new issues for further problems.\n. This is something that is available in Orion Editor 1.0.  When we migrate to this version, we will just pick this fix up.\n. Now available in the orion 1.0 branch.  We will be merging this with master soon.\n. I'm going to take a look at this to see if it makes sense for us to implement.\n. I have the zen coding support working for me locally.  I'm having trouble finding good key bindings for this, though.\nI want to do alt+1, alt+2, ...alt+9 for all the commands, but on mac chrome (and other browsers) Alt+anything types a special char.  Need to find a way to disable it.\nTomorrow I will chat with Kris and convert this into a proper client-side plugin.\n. Looks like that was part of a bad commit.  There should be no dependency on\nunderscore.  I removed it.  This issue should now be fixed in master.\nOn Sun, Jan 27, 2013 at 5:16 AM, Marc C. notifications@github.com wrote:\n\nI'm getting a 404 on for /components/zen/javascript/underscore.js on the\nlatest master branch.\nFailed to load resource: the server responded with a status of 404 (Not\nFound) http://localhost:7261/components/zen/javascript/underscore.js\nThe whole components/ folder is missing I would say.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/126#issuecomment-12753953.\n. Zen coding has been moved to the plugins branch and will be merged back in with master soon.  We are using this as one of our first example plugins.  I would say that this is now implemented even though it is not formally available.  Closing this issue now.\n. Zen coding support is now available in master.  We still need some work on\nfinding better keybindings, but this is a good start.  We may change things\nin the future.\n\nOn Sat, Feb 2, 2013 at 2:44 AM, Ashok Koyi notifications@github.com wrote:\n\nThank you!!!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/126#issuecomment-13027660.\n. Ugh.\n\nWell, I updated the wiki and reorganized the quick start page a bit.  \nCould it be that on windows bower is not being found or can't be installed?  It has been added to the package.json, but maybe there's something wrong with it for windows.\n. Probably best if Andy does the merge since he wrote this code in the first place and is more familiar with it.\n. Yes.  Travis CI build not passing for the same reason that the tests were\nfailing for us locally earlier.  I'll have to take a look at this, but\nsince this isn't the master branch, I'm not too worried about the failing\ntests.\nOn Tue, Jan 15, 2013 at 1:16 PM, Brian Cavalier notifications@github.comwrote:\n\nSure, sounds good. Heh, I failed the travis build, is that expected?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/pull/133#issuecomment-12289678.\n. Done. and configurable in .scripted using the ui.history_drop_down_auto_activation property.\n. Closed too quickly, now the menus hide sporadically when trying to click on them.\n. OK.  Much better now.  The problem was that there is a 1px border around parts of the breadcrumb and if the mouse goes in there, then the dropdowns will disappear.  Now, I added a timeout for mouse leave events that will handle this.\n. Initial implementation is working for me locally.  I have updated all of the JS templates for this style.  \n\nNow, if the selection is empty, templates and completions are proposed as normal (ie- using prefix), but if the selection is non-empty, then all and only templates are proposed irrespective of the prefix.\nNote that I am now distinguishing between completions and templates.  Completions are the normal things that we think of for content assist and are always prefix-based.  Templates are the new kind of surround-with templates.\n. Basically done here.  Will do more tweaks to the templates themselves, but the work in this issue is done.\n. Nope. Nothing regex based. I could see how that's useful. Concern would be\nperformance  if we have lots of them.\nDo you have some concrete examples?\nOn Friday, January 18, 2013, Andy Clement wrote:\n\nNice feature. Just one question - there is nothing conditional about the\ntemplates I presume? So any that I add will appear for all selections.\nThere isn't a way to restrict templates by saying \"if the selection matches\nthis regex, this template should be proposed\". Regex's might indicate \"if\nits all numbers\" or \"if its the shape of an object\" or \"if it is a quoted\nstring\".\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/137#issuecomment-12430654.\n. This should work depending on how and where the constructor is defined and\nhow that other file is referenced.  If the constructor is referenced via an\namd or commonjs modules then it should be fine.\n\nIf there are no modules being used (ie- global), then this can work if all\nthe files are referenced via script tags in an html file.  So, in this case\nI would need to see your full setup to know exactly why it is not working\nfor you.\nOn Fri, Jan 18, 2013 at 2:08 AM, Angelo notifications@github.com wrote:\n\nIt should be cool if Ctrl+Click could be managed (like Eclipse Java Editor\nto open a referenced classes).\nEx:\nascript.js : var p = new Person(); person.js var Person = function ....\nCtrl+Clic on the new Person from ascript.js opens the person.js\nThe same idea could be done with\n<script src=\"....\nAn other idea is to manage completion on script/@srchttps://github.com/srcattribute\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/141.\n. Closing this since this is working and there is no indication of what is missing other than navigation in script tags, which is covered by a different bug,\n. Under this situation, we would treat json files like js files, except also\nflag invalid json as jshint errors.\n\nOn Fri, Jan 18, 2013 at 11:02 AM, Angelo notifications@github.com wrote:\n\nIt should be cool if scripted provides a JSON Editor with\n- syntax color\n- syntax error\n- format JSON\n\u2014\n  Reply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/142.\n. Try running npm install on the scripted repo.\n. This is actually a recent change (last week).  Our dependency list is\ngetting long and we don't want it cluttering up the git repository.  I\nhaven't gotten around to updating the readme, but will do.\n\nOn Mon, Jan 21, 2013 at 2:22 PM, asampal notifications@github.com wrote:\n\nThat did it, thanks. Don't know why I didn't try a local npm install, but\nit might be worth adding this to readme.md for others.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/144#issuecomment-12520754.\n. This even hits the devs when new dependencies are added and we forget to npm install.\n\nI'd consider re-adding the modules, but this would drastically increase the size of our repo, especially over time as dependencies change/are removed/are added.  So, this might change in the future.\n. This mostly looks good to me, but as I mentioned earlier, this seems more intuitive to me:\nweb: {\n  \"client\" : \"/\",\n  \"test/client\" : \"/\",\n  \"foo\": \"/foo\"\n}\nSo the difference is that the web section is from fs -> web layout, not the other way around.  I don't have any particular reason for this, other than that it feels more intuitive. So, I can't really say that it's better.\n. I agree, this is a personal taste, so I am not pushing on this.  However,\nif others who are lurking on this bug report feel one way or the other,\nthen it would be a good idea to comment.\nOtherwise, just go ahead and implement as you like.\nOn Thu, Jan 24, 2013 at 9:44 AM, Kris De Volder notifications@github.comwrote:\n\nI'm not sure you why find the file -> web mapping more intuitive than the\nweb -> file mapping. That of course is personal taste.\nIf I look at how you setup static file serving for express it resembles\nmore the pattern where the web path is on the left-hand-side and the\ncorresponding filesystem path is on the right:\napp.use(\"/media\", express.static(__dirname + '/media'));\n  app.use(\"/\", express.static(__dirname+'/main'));\nSo to me that seems more intuitive as it resembles more what I'd do to\nsetup the web server.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/145#issuecomment-12663374.\n. Fix has been pushed.  I think this should be ok.  Change to textView.js so that it prevents the default scroll event in the editor on mac-chrome.\n\nThis means that scrolling in editor will not allow history navigation, but scrolling outside of the editor will.\n. This is not something that we have implemented yet.  Take a look at:\nhttps://github.com/scripted-editor/scripted/blob/master/client/scripts/orion/editor/contentAssist.js#L204\nYou can change this so that content assist is invoked based on a set of pre-defined chars, or it can be configurable in th e.scripted file.  I'd be willing to accept a pull request for making this configurable through .scripted.\n. There are some UI implications of opening the content assist dialog on any\nalpha-numeric character.  For example, the up and down arrows will no\nlonger work in the editor.  Rather the dialog will steal focus. Also, not\nall content assist invocations are fast enough, and you may feel\nsluggishness as you type.  I initially played around with something like\nthis, but found these were blockers for me.\nThere are ways around this.  But I am interested in hearing your opinion on\nhow this kind of interaction works out for you.\nOn Fri, May 24, 2013 at 1:04 PM, chris marx notifications@github.comwrote:\n\nWow, nice, that works great, for now, I've edited the file, adding this:\nthis.contentAssistRegex = new RegExp(\"[a-z]|[A-Z]|/.\");\nthis.contentAssistRegex.test(e.text)\nand I'll play with these settings before committing a pull request-\nOn Fri, May 24, 2013 at 3:45 PM, chris marx cm325@cornell.edu wrote:\n\nAre you suggesting to change this (in contentAssist,js):\n/** @private\n- provides auto-activation for content assist on '.'\n*/\nautoActivate : function(e) {\nif (e.text === '.' && !this.activationRequest) {\nto something that includes more than just the '.'?\nOn Fri, May 24, 2013 at 3:38 PM, Andrew Eisenberg \nnotifications@github.com wrote:\n\nThis is not something that we have implemented yet. Take a look at:\nhttps://github.com/scripted-editor/scripted/blob/master/client/scripts/orion/editor/contentAssist.js#L204\nYou can change this so that content assist is invoked based on a set of\npre-defined chars, or it can be configurable in th e.scripted file. I'd\nbe\nwilling to accept a pull request for making this configurable through\n.scripted.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/scripted-editor/scripted/issues/147#issuecomment-18425520>\n.\n\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/147#issuecomment-18426889\n.\n. Unfortunately, looks like any of these changes will require updating the doctrine library that we are using for jsdoc parsing.\n. I'd mark this for the 0.5 release, but we don't have that release available.\n. Looks like this is an orion bug (after playing around with this on an orion instance).  I'll see if there is an easy fix here and port back the fix.\n. Not a small fix, so will wait for 0.5 to look at this.  In editorFeatures.js, the enterLinkedMode function will just return if already in linked mode (hence nested linked mode is just not supported).  What needs to happen is that each time we enter linked mode, we push the old linked mode model (if one exists) on a stack so that it can be popped later when the current linked mode is existed.\n. Related issue is this block:\n\n{ \"formatter\": {\n    \"js\": {\n      \"indent_size\": 1,\n      \"indent_char\": \"\\t\"\n    }\n  }\nit duplicates the editor options.  I'd say that we deprecate the above and use the editor options to feed the formatter.\n. sLogger is passed into the function as a parameter and it is not coming through as a module.  So, we are not really inferring the real scriptedLogger.  We are only inferring that the reference to info is the same reference as used above.  So, you are just navigated to the first known use of info.\nI think we can do better here by being dumber.\n1. we should be able to recognize that the first known use of info is not really a declaration, but a use\n2. We should also be able to find somewhere in our file summaries the real declaration of info.\n3. And although we won't be able to tell definitively that the declaration of info corresponds to the use of info where you press ctrl+click, it's actually a pretty good guess.  And we should just go there.\n4. In the case where this non-inferencing finding comes up with multiple answers, then perhaps we can have a little popup that displays all of them and you can choose.\nThe only wrinkle that I can see here is that currently, the only way that we can find the actual definition is if the scriptedLogger is transitively depended on by the current file, and if it's not, then I don't know how to find it.\n. I have not seen the blinking hover problem.  What OS are you on?\n. Could also be something about running the canary builds.  I used to run canary, but things started randomly breaking and so I moved back to the release channel.  Much happier now.\n. If you still get this problem, please raise a new issue for it.  This issue is about jsdoc in hovers.  This is a feature that is becoming more important.  Will try to get this for the 0.4 release.\n. Done. Just pushed 6ec9c87 that now shows jsdoc comments in hovers.  I do some minimal formatting to remove the * and trailing whitespace, but it is not formatted like proper docs should be.  I would like to use a library to do this, but so far have not found a good library for jsdoc rendering that doesn't expect an entire project.\nI will raise a new issue for proper rendering of jsdoc.\n. The goal is to allow mouse-less navigation and we are mostly there. One keybinding that we are missing is for switching editor focus.  I'm not sure if there is an open issue for this.\nWe do not support multiple tabs, but you can use the recently used file menu to easily switch between files.  Also, you can use multiple editor tabs.\n. We won't be able to get to proper support for content types by 0.4, but this is something that I would like to see in 0.5.\n. Did you run npm install?\nOn Wed, Feb 6, 2013 at 1:56 AM, Marc notifications@github.com wrote:\n\nGetting no script editor (in any project) in the latest build:\n[image: 2013-02-06_1051]https://f.cloud.github.com/assets/498834/130954/f89caccc-7042-11e2-9a14-855795c410c8.png\nThe only error I can see in scripted.log (which I can't attach here) is:\nError in request for\n'/jsdepend/getContents?args=%5B%22G%3A%2FWork%2FJavaScript%2Fentity%2Fcrafty%2Fentities.js%22%5D':\nError: ENOENT, open 'G:\\Work\\JavaScript\\entity\\crafty\\entities.js'\nWhile the file is missing, it's also not referenced AFAIK - my .html\nreferences a ./scripts/entities.js and not ./entities.js\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/184.\n. I have been working on hovers over the last week.  Primarily, I have been focused on the formatting of JavaScript hovers.  One of the other things I have done is exactly what you said. The hovers are no longer disappearing on a timeout.  Rather, they remain active as long as the mouse pointer remains on the annotation.\n\nYou can try cloning the latest from master and see if this fixes your problem.  If you do, don't forget to also run npm install to get all the dependencies.\n. I'll take a look at this for the 0.4 release.\n. Just installed Chrome canary on my windows vm.  I can't reproduce.\n. Noticed that somehow this is version 23.0.1271.97. Updating now.\n. Unfortunately, even after upgrading to 27.0.1417.2 canary still no flashing hovers bug.\n. Maybe there is something specific about a particular file you are working in. Can you attach a file or text of a file where you are seeing this happen?  Also, explain exactly where to hover.\nJust to be sure we are working on the same scripted, update to the latest from master.\n. Already fixed.\n. Fixed.  See ed85f01 and dabf82197d2914808eb1f5211976d7c21ee89bac\n. Fixed. See dabf82197d2914808eb1f5211976d7c21ee89bac and 0a8aed5bc91c515e6958bc401e34024ead7d8309\n. Seems to be working now.\n. After a very brief look, there are a few things going on here:\n1. most of the jsdoc comments in crafty are malforned,  Currently, we only support a strict interpretation of Closure compiler jsdoc.  See here: https://developers.google.com/closure/compiler/docs/js-for-compiler. I'd like to make this more flexible and error tolerant, but that is just one of the many things we need to work on.\n2. Crafty makes use of a custom extend function as a form of mixins.  This is not something we recognize (and I'm not sure how we could recognize this in a generalizable way).\nSo, I don't see any bugs here, only things that haven't been implemented yet (or are difficult to implement), even though it may not seem that way from a user's perspective.\n. Already fixed.\n. fixed. See fcbda77\n. No longer relevant.  Switch editors does not open the confirm dialog any more.\n. Fixed\n. Lots of things here. Some easy to fix, some hard.\nI'll start by taking a look at the non-navigable links you have above and see if there are any improvements we can make.\nAs for formatting of hovers, particularly jsdoc, my intention is to use doctrine to parse the docs and then use that to feed into a formatter.  However currently, doctrine is not error tolerant enough and will barf on too many reasonably formatted jsdoc comments.\n. More work done in recent commit.  Closing this issue. Raised issue #226 for remaining work.\n. Also, this should work as well, but doesn't:\n```\nfunction TextView (options) {\n    this._init(options);\n}\nTextView.prototype._init = function(options) { };\n```\n. Messy, but fixed.  This problem comes about by how we defer inferring certain parts of the file until after all other parts of the file are inferred.  We were originally deferring inferring the entire function that contains the offset of interest.  But we should have been deferring just the function body.  This was we get to have a stable type for the function..\n. Not much I can do w/o knowing which file this is in.\n. Originally reported in Issue #220 \n. Also, shorter hovers shold have return types on same line.\n. Done. The refactoring of type signatures fixes this.\n. Looks like the algorithm for attaching comments to ast nodes is too naive.  When inferring the entire file, things work fine, but when doing a hover on the method name, the comment does not attach. This is because we are inferring everything except for the enclosing function first, before inferring the enc actual function.\nAnd with this, the doc comment gets attached to the final function first.\n. I have a fix that appears to be working.  Will create tests for this.  What happens is that when we have a deferred block, we splice out all comments from that block before starting the initial infer.  The spliced comments are then used for the deferred infer.\n. Fix has been pushed.\n. It is working for me on windows....What version of node are you using and\nwhat version of scripted?  Did you get scripted from master or did you\ninstall the 0.3 version?\nOn Thu, Feb 21, 2013 at 8:10 PM, hallysonh notifications@github.com wrote:\n\nrbyte use depreciated note-waf.\nConsole log:\nnpm http GET https://registry.npmjs.org/scripted\nnpm http 304 https://registry.npmjs.org/scripted\nnpm http GET https://registry.npmjs.org/amdefine/0.0.2\nnpm http GET https://registry.npmjs.org/enhanced-resolve/0.4.5\nnpm http GET https://registry.npmjs.org/formidable/1.0.9\nnpm http GET https://registry.npmjs.org/htmlparser/1.7.6\nnpm http GET https://registry.npmjs.org/json5/0.1.0\nnpm http GET https://registry.npmjs.org/node-static/0.5.9\nnpm http GET https://registry.npmjs.org/optimist/0.3.5\nnpm http GET https://registry.npmjs.org/rest/0.8.4\nnpm http GET https://registry.npmjs.org/sockjs/0.3.1\nnpm http GET https://registry.npmjs.org/when/1.6.1\nnpm http GET https://registry.npmjs.org/express/3.0.6\nnpm http GET https://registry.npmjs.org/bower/0.6.8\nnpm http GET https://github.com/aclement/serv/archive/master.tar.gz\nnpm http GET\nhttps://github.com/kdvolder/websocket-multiplex/archive/master.tar.gz\nnpm http GET\nhttps://github.com/tgeorgiev/node-fake-fs/archive/master.tar.gz\nnpm http 304 https://registry.npmjs.org/amdefine/0.0.2\nnpm WARN package.json amdefine@0.0.2 No README.md file found!\nnpm http 304 https://registry.npmjs.org/formidable/1.0.9\nnpm http 304 https://registry.npmjs.org/json5/0.1.0\nnpm http 304 https://registry.npmjs.org/htmlparser/1.7.6\nnpm http 304 https://registry.npmjs.org/enhanced-resolve/0.4.5\nnpm http 304 https://registry.npmjs.org/node-static/0.5.9\nnpm http 304 https://registry.npmjs.org/optimist/0.3.5\nnpm http 304 https://registry.npmjs.org/rest/0.8.4\nnpm http 304 https://registry.npmjs.org/sockjs/0.3.1\nnpm http 304 https://registry.npmjs.org/when/1.6.1\nnpm http 304 https://registry.npmjs.org/express/3.0.6\nnpm http 304 https://registry.npmjs.org/bower/0.6.8\nnpm http 200\nhttps://github.com/tgeorgiev/node-fake-fs/archive/master.tar.gz\nnpm http 200\nhttps://github.com/kdvolder/websocket-multiplex/archive/master.tar.gz\nnpm http 200 https://github.com/aclement/serv/archive/master.tar.gz\nnpm http GET https://registry.npmjs.org/livereload-server\nnpm http GET https://registry.npmjs.org/express\nnpm http GET https://registry.npmjs.org/open\nnpm http GET https://registry.npmjs.org/wordwrap\nnpm http GET https://registry.npmjs.org/connect/2.7.2\nnpm http GET https://registry.npmjs.org/commander/0.6.1\nnpm http GET https://registry.npmjs.org/range-parser/0.0.4\nnpm http GET https://registry.npmjs.org/mkdirp/0.3.3\nnpm http GET https://registry.npmjs.org/cookie/0.0.5\nnpm http GET https://registry.npmjs.org/buffer-crc32/0.1.1\nnpm http GET https://registry.npmjs.org/fresh/0.1.0\nnpm http GET https://registry.npmjs.org/methods/0.0.1\nnpm http GET https://registry.npmjs.org/send/0.1.0\nnpm http GET https://registry.npmjs.org/cookie-signature/0.0.1\nnpm http GET https://registry.npmjs.org/debug\nnpm http GET https://registry.npmjs.org/node-uuid/1.3.3\nnpm http GET https://registry.npmjs.org/faye-websocket/0.4.0\nnpm http GET https://registry.npmjs.org/rbytes/0.0.2\nnpm http 304 https://registry.npmjs.org/express\nnpm http 304 https://registry.npmjs.org/livereload-server\nnpm http 304 https://registry.npmjs.org/open\nnpm http GET https://registry.npmjs.org/debug\nnpm http GET https://registry.npmjs.org/websocket.io\nnpm http GET https://registry.npmjs.org/livereload-protocol\nnpm http 304 https://registry.npmjs.org/commander/0.6.1\nnpm http 304 https://registry.npmjs.org/wordwrap\nnpm http 304 https://registry.npmjs.org/range-parser/0.0.4\nnpm http 304 https://registry.npmjs.org/mkdirp/0.3.3\nnpm http 304 https://registry.npmjs.org/connect/2.7.2\nnpm http GET https://registry.npmjs.org/mime/1.2.4\nnpm http GET https://registry.npmjs.org/qs\nnpm http GET https://registry.npmjs.org/connect\nnpm http GET https://registry.npmjs.org/mkdirp/0.3.0\nnpm http GET https://registry.npmjs.org/tmp\nnpm http GET https://registry.npmjs.org/vows\nnpm http GET https://registry.npmjs.org/nopt\nnpm http GET https://registry.npmjs.org/archy\nnpm http GET https://registry.npmjs.org/glob\nnpm http GET https://registry.npmjs.org/colors\nnpm http GET https://registry.npmjs.org/mkdirp\nnpm http GET https://registry.npmjs.org/rimraf\nnpm http GET https://registry.npmjs.org/semver\nnpm http GET https://registry.npmjs.org/fstream\nnpm http GET https://registry.npmjs.org/hogan.js\nnpm http GET https://registry.npmjs.org/request\nnpm http GET https://registry.npmjs.org/async\nnpm http GET https://registry.npmjs.org/stable\nnpm http GET https://registry.npmjs.org/read-package-json\nnpm http GET https://registry.npmjs.org/lodash\nnpm http GET https://registry.npmjs.org/rc\nnpm http 304 https://registry.npmjs.org/cookie/0.0.5\nnpm http GET https://registry.npmjs.org/unzip/0.0.4\nnpm http GET https://registry.npmjs.org/tar\nnpm http 304 https://registry.npmjs.org/buffer-crc32/0.1.1\nnpm http 304 https://registry.npmjs.org/fresh/0.1.0\nnpm http 304 https://registry.npmjs.org/methods/0.0.1\nnpm http 304 https://registry.npmjs.org/send/0.1.0\nnpm WARN package.json methods@0.0.1 No README.md file found!\nnpm http 304 https://registry.npmjs.org/cookie-signature/0.0.1\nnpm http 304 https://registry.npmjs.org/debug\nnpm http 304 https://registry.npmjs.org/node-uuid/1.3.3\nnpm http 304 https://registry.npmjs.org/rbytes/0.0.2\nnpm http 304 https://registry.npmjs.org/faye-websocket/0.4.0\nnpm http 304 https://registry.npmjs.org/debug\nnpm http 304 https://registry.npmjs.org/websocket.io\nnpm http 304 https://registry.npmjs.org/livereload-protocol\nnpm http 304 https://registry.npmjs.org/mime/1.2.4\nnpm http 304 https://registry.npmjs.org/qs\nnpm http 304 https://registry.npmjs.org/connect\nnpm http 304 https://registry.npmjs.org/mkdirp/0.3.0\nnpm http 304 https://registry.npmjs.org/tmp\nnpm http 304 https://registry.npmjs.org/vows\nnpm http 304 https://registry.npmjs.org/nopt\nnpm http 304 https://registry.npmjs.org/archy\nnpm http 304 https://registry.npmjs.org/glob\nnpm http 304 https://registry.npmjs.org/colors\nnpm http 304 https://registry.npmjs.org/mkdirp\nnpm http 304 https://registry.npmjs.org/rimraf\nnpm http 304 https://registry.npmjs.org/semver\nnpm http 304 https://registry.npmjs.org/request\nnpm http 304 https://registry.npmjs.org/hogan.js\nnpm http 304 https://registry.npmjs.org/fstream\nnpm http 304 https://registry.npmjs.org/async\nnpm http 304 https://registry.npmjs.org/stable\nnpm http 304 https://registry.npmjs.org/read-package-json\nnpm http 304 https://registry.npmjs.org/lodash\nnpm http 304 https://registry.npmjs.org/rc\nnpm WARN package.json connect@1.9.2 No README.md file found!\nnpm http 304 https://registry.npmjs.org/unzip/0.0.4\nnpm http GET https://registry.npmjs.org/mime/1.2.6\nnpm http 304 https://registry.npmjs.org/tar\nrbytes@0.0.2 install\nC:\\Users\\AppData\\Roaming\\npm\\node_modules\\scripted\\node_modules\\sockjs\\node_modules\\rbytes\nnode-waf configure build\n'node-waf' n\u00e3o \u00e9 reconhecido como um comando interno\nou externo, um programa oper\u00e1vel ou um arquivo em lotes.\nnpm WARN optional dep failed, continuing rbytes@0.0.2\nnpm http GET https://registry.npmjs.org/config-chain\nnpm http GET https://registry.npmjs.org/graceful-fs\nnpm http GET https://registry.npmjs.org/abbrev\nnpm http GET https://registry.npmjs.org/ws/0.4.20\nnpm http GET https://registry.npmjs.org/lru-cache\nnpm http GET https://registry.npmjs.org/slide\nnpm http GET https://registry.npmjs.org/npmlog\nnpm http GET https://registry.npmjs.org/graceful-fs\nnpm http GET https://registry.npmjs.org/pullstream/0.0.4\nnpm http GET https://registry.npmjs.org/binary\nnpm http GET https://registry.npmjs.org/minimatch\nnpm http GET https://registry.npmjs.org/graceful-fs\nnpm http GET https://registry.npmjs.org/inherits\nnpm http GET https://registry.npmjs.org/inherits\nnpm http GET https://registry.npmjs.org/inherits\nnpm http GET https://registry.npmjs.org/block-stream\nnpm http 304 https://registry.npmjs.org/mime/1.2.6\nnpm http GET https://registry.npmjs.org/eyes\nnpm http GET https://registry.npmjs.org/diff\nnpm http 304 https://registry.npmjs.org/lru-cache\nnpm http 304 https://registry.npmjs.org/slide\nnpm http 304 https://registry.npmjs.org/npmlog\nnpm http 304 https://registry.npmjs.org/config-chain\nnpm http 304 https://registry.npmjs.org/graceful-fs\nnpm http 304 https://registry.npmjs.org/abbrev\nnpm http GET https://registry.npmjs.org/proto-list\nnpm http GET https://registry.npmjs.org/ini\nnpm http 304 https://registry.npmjs.org/graceful-fs\nnpm http 304 https://registry.npmjs.org/pullstream/0.0.4\nnpm http 304 https://registry.npmjs.org/binary\nnpm http GET https://registry.npmjs.org/ansi\nnpm http 304 https://registry.npmjs.org/minimatch\nnpm http 304 https://registry.npmjs.org/ws/0.4.20\nnpm http 304 https://registry.npmjs.org/graceful-fs\nnpm http 304 https://registry.npmjs.org/inherits\nnpm http GET https://registry.npmjs.org/over\nnpm http GET https://registry.npmjs.org/stream-buffers\nnpm http 304 https://registry.npmjs.org/inherits\nnpm http 304 https://registry.npmjs.org/inherits\nnpm http 304 https://registry.npmjs.org/block-stream\nnpm http 304 https://registry.npmjs.org/eyes\nnpm http 304 https://registry.npmjs.org/diff\nnpm http GET https://registry.npmjs.org/sigmund\nnpm http 304 https://registry.npmjs.org/proto-list\nnpm http 304 https://registry.npmjs.org/ini\nnpm http GET https://registry.npmjs.org/qs/0.5.1\nnpm http GET https://registry.npmjs.org/formidable/1.0.11\nnpm http GET https://registry.npmjs.org/bytes/0.1.0\nnpm http GET https://registry.npmjs.org/pause/0.0.1\nnpm http 304 https://registry.npmjs.org/ansi\nnpm http 304 https://registry.npmjs.org/over\nnpm http GET https://registry.npmjs.org/chainsaw\nnpm http GET https://registry.npmjs.org/buffers\nnpm http 304 https://registry.npmjs.org/stream-buffers\nnpm http 304 https://registry.npmjs.org/sigmund\nnpm http 304 https://registry.npmjs.org/formidable/1.0.11\nnpm http 304 https://registry.npmjs.org/bytes/0.1.0\nnpm http 304 https://registry.npmjs.org/pause/0.0.1\nnpm http 304 https://registry.npmjs.org/chainsaw\nnpm http 304 https://registry.npmjs.org/buffers\nnpm http 304 https://registry.npmjs.org/qs/0.5.1\nnpm http GET https://registry.npmjs.org/traverse\nnpm http GET https://registry.npmjs.org/tinycolor\nnpm http GET https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/options\nnpm http 304 https://registry.npmjs.org/traverse\nnpm http 304 https://registry.npmjs.org/tinycolor\nnpm http 304 https://registry.npmjs.org/commander\nnpm http 304 https://registry.npmjs.org/options\nws@0.4.20 install\nC:\\Users\\AppData\\Roaming\\npm\\node_modules\\scripted\\node_modules\\serv\\node_modules\\livereload-server\\node_modules\\\nwebsocket.io\\node_modules\\ws\nnode install.js\nbower@0.6.8 postinstall\nC:\\Users\\AppData\\Roaming\\npm\\node_modules\\scripted\\node_modules\\bower\nnode cleanup\n[ws v0.4.20] Attempting to compile blazing fast native extensions.\n[ws v0.4.20] Native code compile failed (but the module will still work):\n[ws v0.4.20] The native extensions are faster, but not required.\n[ws v0.4.20] On Windows, native extensions require Visual Studio and\nPython.\n[ws v0.4.20] On Unix, native extensions require Python, make and a C++\ncompiler.\n[ws v0.4.20] Start npm with --ws:verbose to show compilation output (if\nany).\nC:\\Users\\AppData\\Roaming\\npm\\scr ->\nC:\\Users\\AppData\\Roaming\\npm\\node_modules\\scripted\\bin\\scr\nC:\\Users\\AppData\\Roaming\\npm\\scripted ->\nC:\\Users\\AppData\\Roaming\\npm\\node_modules\\scripted\\bin\\scripted\nscripted@0.3.0 postinstall\nC:\\Users\\AppData\\Roaming\\npm\\node_modules\\scripted\ncd client && bower install\nbower cloning git://github.com/cujojs/wire.git\nbower cached git://github.com/cujojs/wire.git\nbower fetching wire\nbower error status code of git: 127\nbower cloning git://github.com/requirejs/i18n\nbower cached git://github.com/requirejs/i18n\nbower fetching requirejs-i18n\nbower cloning git://github.com/requirejs/text\nbower error status code of git: 127\nbower cloning git://github.com/jrburke/requirejs\nbower cached git://github.com/requirejs/text\nbower fetching requirejs-text\nbower cloning git://github.com/cujojs/meld.git\nbower error status code of git: 127\nbower cached git://github.com/jrburke/requirejs\nbower fetching requirejs\nbower error status code of git: 127\nbower cached git://github.com/cujojs/meld.git\nbower fetching meld\nbower cloning git://github.com/cujojs/when.git\nbower error status code of git: 127\nbower cached git://github.com/cujojs/when.git\nbower fetching when\nbower error status code of git: 127\nbower cloning git://github.com/aseemk/json5.git\nbower cached git://github.com/aseemk/json5.git\nbower fetching json5\nbower cloning git://github.com/components/qunit.git\nbower error status code of git: 127\nbower cached git://github.com/components/qunit.git\nbower fetching qunit\nbower error status code of git: 127\nbower cloning git://github.com/s2js/rest\nbower cached git://github.com/s2js/rest\nbower fetching rest\nbower error status code of git: 127\nbower cloning git://github.com/s2js/probes.git\nbower cached git://github.com/s2js/probes.git\nbower fetching probes\nbower cloning git://github.com/cujojs/curl\nbower error status code of git: 127\nbower cached git://github.com/cujojs/curl\nbower fetching curl\nbower error status code of git: 127\nbower cloning git://github.com/Constellation/doctrine.git\nbower cached git://github.com/Constellation/doctrine.git\nbower fetching doctrine\nbower error status code of git: 127\nThere where errors, here's a summary of them:\n-\nwire status code of git: 127\n   CreateProcessW: O sistema n?o pode encontrar o arquivo especificado.\n   -\nrequirejs-i18n status code of git: 127\n   CreateProcessW: O sistema n?o pode encontrar o arquivo especificado.\n   -\nrequirejs-text status code of git: 127\n   CreateProcessW: O sistema n?o pode encontrar o arquivo especificado.\n   -\nrequirejs status code of git: 127\n   CreateProcessW: O sistema n?o pode encontrar o arquivo especificado.\n   -\nmeld status code of git: 127\n   CreateProcessW: O sistema n?o pode encontrar o arquivo especificado.\n   -\nwhen status code of git: 127\n   CreateProcessW: O sistema n?o pode encontrar o arquivo especificado.\n   -\njson5 status code of git: 127\n   CreateProcessW: O sistema n?o pode encontrar o arquivo especificado.\n   -\nqunit status code of git: 127\n   CreateProcessW: O sistema n?o pode encontrar o arquivo especificado.\n   -\nrest status code of git: 127\n   CreateProcessW: O sistema n?o pode encontrar o arquivo especificado.\n   -\nprobes status code of git: 127\n   CreateProcessW: O sistema n?o pode encontrar o arquivo especificado.\n   -\ncurl status code of git: 127\n   CreateProcessW: O sistema n?o pode encontrar o arquivo especificado.\n   -\ndoctrine status code of git: 127\n   CreateProcessW: O sistema n?o pode encontrar o arquivo especificado.\nscripted@0.3.0C:\\Users\\AppData\\Roaming\\npm\\node_modules\\scripted\n\u251c\u2500\u2500 amdefine@0.0.2\n\u251c\u2500\u2500 node-static@0.5.9\n\u251c\u2500\u2500 fake-fs@0.2.0\n\u251c\u2500\u2500 when@1.6.1\n\u251c\u2500\u2500 websocket-multiplex@0.1.0\n\u251c\u2500\u2500 enhanced-resolve@0.4.5\n\u251c\u2500\u2500 formidable@1.0.9\n\u251c\u2500\u2500 json5@0.1.0\n\u251c\u2500\u2500 rest@0.8.4\n\u251c\u2500\u2500 optimist@0.3.5 (wordwrap@0.0.2)\n\u251c\u2500\u2500 htmlparser@1.7.6\n\u251c\u2500\u2500 sockjs@0.3.1 (node-uuid@1.3.3, faye-websocket@0.4.0)\n\u251c\u2500\u2500 express@3.0.6 (methods@0.0.1, range-parser@0.0.4,\ncookie-signature@0.0.1, fresh@0.1.0, buffer-crc32@0.1.1, cookie@0.0.5,\ncommander@0.6.1, debug@0.7.2, mkdirp@0.3.3, send@0.1.0,\nconnect@2.7.2)\n\u251c\u2500\u2500 bower@0.6.8 (stable@0.1.3, semver@1.1.3, colors@0.6.0-1, archy@0.0.2,\nasync@0.1.22, tmp@0.0.16, mkdirp@0.3.4, lodash@0.9.2, request@2.11.4,\nhogan.js@2.0.0, rimraf@2.0.3, nopt@2\n.0.0, fstream@0.1.22, tar@0.1.16, rc@0.0.8, vows@0.6.4,\nread-package-json@0.1.13, glob@3.1.20, unzip@0.0.4)\n\u2514\u2500\u2500 serv@0.0.2 (open@0.0.3, express@2.5.11, livereload-server@0.2.1)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/229.\n. Can you try cloning the master repo and running like that?  This is the way I got scripted running on windows:\n\ngit clone https://github.com/scripted-editor/scripted\ncd scripted\nnpm install\nI am on windows 7\n```\n$ git --version\ngit version 1.8.0.msysgit.0\n$ npm --version\n1.1.69\n$ node --version\nv0.8.16\n```\nWhen I ran npm install -g https://github.com/scripted-editor/scripted/tarball/master, I get the following message, but scripted is still installed:\n[ws v0.4.20] Native code compile failed (but the module will still work):\n[ws v0.4.20] The native extensions are faster, but not required.\n[ws v0.4.20] On Windows, native extensions require Visual Studio and Python.\n[ws v0.4.20] On Unix, native extensions require Python, make and a C++ compiler.\nBut, looks like you are having the same message, so probably not relevant. In your error log, I see messages like this:\ncreateProcessW: O sistema n?o pode encontrar o arquivo especificado.\nNot sure what this means.\n. Googled around a bit and it looks like others have similar problems when trying to run npm install on other projects.\nhttps://github.com/isaacs/npm/issues/2362#issuecomment-5515120\nI forgot to mention before that I was running my commands from inside of msysgit (which is a very nice way to have a real *nix-like shell in windows).  The comments seem to imply that you can get around the problem by using a recent version of msysgit or by adding some configuration to npm.\n. Looks like our comments crossed.  It may be that your bower cache is corrupted.  Go to ~/.bower/cache and delete it and try again.\n. For now, this is not supported, having a $ as part of the trigger.  Best I can suggest now is to remove the '$' at the beginning and it will work.  \nBut another thing, does the syntax ${1:GET|POST|PUT|DELETE} mean that when you tab through, an additional completions drop-down appears with the 4 possibilities in it?  This is not supported either, but would be quite nice.\n. Thanks.  Looks right to me.  I'll raise a new bug for linked editing choices.  This would be a bit of a major feature since there is no infra for invoking content assist inside of linked editing.\n. Appears fixed along with my fix for issue #258.\n. Committed a fix.  I had to add a new method to textView in scriptedEditor.js so that we could figure out if incremental find is active.\n. Thanks for the bug report.  Looks like the problem is actually coming from api.js. I've narrowed it down to this snippet:\n/**\n * @type Array.<nuthin>\n */\nvar graph = {};\ngraph[''].k === 'unknown';\nThe problem appears to be that the type parameter on the array is not known.\n. Fixed with regression test.\n. That's interesting...\nAnd in this case, you are not referring to the module, but naming it.\n. Mostly fixed. Content assist now shows the jsonMerge variable is a function that returns a number.  The return value is incorrect, but I think that is a different problem.  The inferencer is getting conused by the line var merged = args[0];.I will reaise new issue for that.\nI am resolving this issue.\n. Thanks. Confirmed this is a problem.\n. Fixed in dev branch.\n. I'll take a look at this.\n. This is some great work.  Thanks for contributing some great functionality that really should be in scripted. Before we can proceed with merging, I would like some clarifications and changes:\nLicensing and IP questions:\n1. Please include license headers on all files that do not have them yet.  They should be made available under an EPL license using a header like this (but use your own name and affiliation):\n/*******************************************************************************\n    * @license\n    * Copyright (c) 2013 VMware, Inc. All Rights Reserved.\n    * THIS FILE IS PROVIDED UNDER THE TERMS OF THE ECLIPSE PUBLIC LICENSE\n    * (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS FILE\n    * CONSTITUTES RECIPIENTS ACCEPTANCE OF THE AGREEMENT.\n    * You can obtain a current copy of the Eclipse Public License from\n    * http://www.opensource.org/licenses/eclipse-1.0.php\n    *\n    * Contributors:\n    *     Andrew Eisenberg\n    ******************************************************************************/\n2. The remaining files, I'm guessing, are Microsoft files and are released under ASL.  We have some friendly lawyers who can figure out how we can use these files.  It may be that they can't reside directly in the repository, but must be installed separately using npm.\nFunctionality questions:\n1. Hovers and navigation are working great for me (yay!).  However, content assist appears to be returning no results. I haven't looked into why yet.  Will follow up.\n2. The editor feels a bit sluggish.  I wonder if this is because there is a lot of work going on as you type.  Some of this should be pushed to a webworker to free up the UI event loop.\n3. Navigation to a definition of a variable highlights the entire statement not just the name. Eg- perform navigation on the second user and the entire first line is highlighted:\n   var user = \"Jane User\";\n   user\n4. I see that you have jshint (or would they be tshint???) annotations being displayed as you type.  That's great and it's something I would like to see for scripted JS files, but I am concerned that this is contributing to the feeling of sluggishness.  I would probably change this to only updating on save and seeing if this helps somewhat.\nImplementation questions:\n1. It looks like you are hooking into the typescript compiler to get the references, hovers, definitions, etc. I am cautious about adding a dependency on a third-party library, but I thin kin this case it makes sense.  We will probably not be able to store this in our repo (see above) and will need to move it to an npm dependency.\n2. You are using built-in typescript dependency loader. Once a file is loaded, does the dependency stay in memory?  Are dependencies grabbed from the server on each inference invocation?  Neither of these solutions are likely scalable.  We will probably need to store some sort of module summary to local storage as we currently do for JS files.  This way files do not need to be re-requested and re-parsed on each inference invocation, nor will memory be overwhelmed by files that take lots of memory. We will have to experiment a bit to make sure, though.  I'm guessing, though, that this is also a contributing factor to the sluggishness.\n3. There is obviously a build step to translate from ts to js.  What is that step and can a compile script be included in the repo?  We can probably add an exec command in the .scripted file to automatically run the build whenever a .ts file changes.\nNot all of these problems need to be fixed before we can merge.  At a minimum, we need to have the ip issues resolved, as well as ensure the build step is seamless. Thanks again for your work.\n. We don't need to work on all of the performance issues before this can be merged, but I do fear that the plugin would be unusable for any real files and projects without a more asynchronous and background compilation step.\nYou do need to add proper license headers for each file. Licensing is quite a tricky thing to do properly.  EPL does allow you to use and create derivative works, but the license header must remain in tact and the source code must always be available.  Furthermore, there needs to be some due diligence done to ensure that the code was not borrowed from a proprietary source (note- I am NOT accusing you of doing anything nefarious, these are just standard procedures for many open source projects).\nAlso, mixing code with different licenses is problematic since they have different restrictions on what you are allowed to do.  So, we will not commit the MIT or ASL-licensed code into the repository. This is standard practice for most open source projects.\nWhat this means for you is this, before I can integrate your patch:\n1. Create a new commit that removes all code that is MIT licensed\n2. Add EPL license headers for all files that you wrote yourself\n3. Document the build step in a readme file that you will also commit\n4. Let me know where to find the version of the typescript sources that you are using.\nOnce this is available, I can merge this request.\n. All files to be checked into the repo require a license header. So, yes,\nthe generated files need them as well since we will likely check them into\nthe repo.  And please include the build script.\nI'll take a look at the npm scripts.  We actually use bower for our client\nside dependency management, so I'll see if it is already in the bower repo.\nIf not, I can add it.\nOn Thu, Apr 4, 2013 at 9:21 PM, Bei Zhang - Ikari Enator \nnotifications@github.com wrote:\n\nThanks for the explanation! I will be working on that soon.\nBTW, do I need to add headers to generated files as well? If we do, I will\nedit the build script to add it.\nThe included typescriptServices.js and typescriptServices.d.ts are\ncompiled from the source code found here:\nhttps://typescript.codeplex.com/releases/view/98308 It can also be found\nin the npm package typescript 0.8.3.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/pull/266#issuecomment-15938347\n.\n. Coffeescript is something that we would like to support in the future, but we are currently stretched and will not have time to look at this for the next few releases.  Jade support is not something that we have talked about yet.\n\nWe are willing to help guide you through submitting a pull request if you are willing to get a patch together.\n. Thanks for the suggestion.\nFrom what I understand, the actions of textmate bundles are written in python, which would be difficult to interpret inside of scripted.  However, the textmate styles are written in json.  We already have some capability of understanding them (borrowed from Eclipse Orion project) and our HTML syntax highlighting is written using the styler. This functionality is not directly exposed to the plugin model and it would be nice to let plugin devs use an existing tetmate styler for highlighting.\n. Thanks for the pull request.  I'll have a look at this on Monday.\nDoes your pull request include any tests?\nThe tests are located here: https://github.com/scripted-editor/scripted/tree/master/tests/client/esprima  summaryBuildingTests.js and contentAssistDependencyTests.js are what are most relevant here.\n. Well, if the file is generated by closure compiler, part of the mock\nindexer for these tests would just be to supply this generated file. Or is\nthere a complication that I'm missing?\nI'm not sure what that error message means.  You can try running the tests\non the command line npm test or in the browser http://localhost:7261/clientTests. If all the tests pass this way, then I\nam less concerned about the travis failure.\nOn Sun, Jun 2, 2013 at 6:24 PM, akngo notifications@github.com wrote:\n\nNope, that was one of the things I wanted to ask one of you guys about.\nSince my resolver is dependent on a generated file, what is the best way\nfor me to write test for this?\nIt looks like I can get started on writing some of the tests with a\nMockIndexer. In addition, it looks like the Travis build failed with Unable\nto access network: fail. I'm not sure what that's all about, so I'll take\na look into that either today or tomorrow.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/pull/280#issuecomment-18818034\n.\n. Comments:\n1. please run git rebase -i to squash everything into a single commit.  This helps with checking for changes.\n2. The client side pieces look good to me, except for the minor issue below.\n3. In checkForClosureModule, there is a potential type error.  body[0].expression.callee may be null if the code is malformed.  So, add a check for that.\n4. I'll ask @kdvolder  to comment on the server side pieces, since this is the part that he wrote.\n5. I'd like to see some server side tests as well.  Again, @kdvolder  can give you some pointers on how to do this.\n6. Lastly, and the most fun part.  You will need to sign a CLA before we can merge.\n\nThanks again for your effort.\n. Don't go for the printing option.  It should be available online very soon.\nOn Thu, Jun 6, 2013 at 3:00 AM, akngo notifications@github.com wrote:\n\nAdded server side tests for the deps file loader, the resolver, and the\nreference finder. Is there an electronic CLA for scripted? Or do you\nrecommend me going with the pdf printing option?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/pull/280#issuecomment-19035502\n.\n. Wonder if this is a node version problem. Scripted was originally developed on node 0.8. Can you try installing with a 0.10 version or earlier?\n. Is this line necessary?  I'm surprised that our resolving is still working even though we have absolute paths in this file.\n. \n",
    "sriharshav": "Thanks I will look for log.\n. Thanks @aeisenberg tried global configuration, it works\n{\n   \"jslint\": {\n       \"global\": [\"$\",\"window\"]\n   }\n}\n. ",
    "aclement": "We have been considering this (and I even partially prototyped it up). At the moment we have a nice separation where the client could use any server technology and we choose to use node. To some degree we'll lose that separation if we go 'full node' and turn it entirely into an npm module. I'm not saying we wont' do it, we're just still thinking about it. I thought we had an issue tracking this on the main issue tracker at https://issuetracker.springsource.com/browse/SCRIPTED but I can't find one at the moment.  The benefits of easy install and easy update would be nice, as you say.\n. Revisiting this is on the todo list, it is just a long list. I'll update this issue when we make some progress.\n. Now fixed, installable via:\nnpm install -g scripted\nstill needs work on windows though.\n. Hi - how exactly was it failing for you? I'm trying on windows and the paths are behaving OK. I can start scripted from anywhere and the node process starts up ok.\n. All fixed yesterday, if scripted was on a different drive than where you were using it the use of 'cd' in the batch file wasn't right, it needed a '/d' option suffixing. \n. The rename support exists in our dev branch now, not yet rolled out to master.\nThe reference search results is interesting, I sometimes find I need that as the 'file search' is too general for me (across project). I see they show the results as an inline window in the editor. I quite like that although inlining JS within JS is a little jarring. I don't think the orion editor supports inlining like that yet (without hacking it directly). Someway to show reference results (kind of like a pulling together of what mark occurrences already shows) would be useful - is that what you were proposing to show in a hover?\nThis isn't strictly TS related of course.\n. I meant JS rename - basically I meant that we have the UI mechanics in place for a rename at multiple locations, which we didn't until recently. There is no TS specifics in scripted yet so your work wouldn't be redundant and would be much appreciated ! Looking forward to seeing it.\nWe are currently actively working on the hovers. Adding the jsdoc has made them a little too big on some occasions, the formatting of signatures also needs some finessing.\n. Yep, I'll change it. I drew that (i'm not an artist) with no idea about trello... thanks for the heads up.\n. icon changed. Not ideal but hopefully will avoid confusion now.\n. Alain - have you signed the committer level agreement? Once that is done I can work to integrate this pull request.  In the project lead box I think you can just put my email address (aclement@vmware.com)\nthanks for doing this!\n. I'm playing around with the changes now - but I guess you are on linux? The readlink option you are using does not exist on Mac. We'll need to fix that before it can be merged in.\n. Yep, I'd googled around and seen that post already.  I agree about moving as much as possible into JavaScript and was planning to head that way until I saw your pull request pop-up.  That would also, hopefully, help the windows story - windows is always lagging a bit behind the behaviour of the mac/linux scripts.\n. I merged the pull request manually then modified the launch script with a hand crafted variant of negotiating links. It won't work in all link cases but hopefully for the case that results from an npm install.  I'm now hitting a problem due to our nested node_modules (we have effectively a node app inside a node app) - the npm install process seems to be failing to unpack the node_modules in the server directory, so when the server runs it can't find any dependencies.\n. Ok, I bit the bullet and adjusted the structure. Promoted the nested package.json to the root of the project.  With that done (and the correct dependencies inserted), you can now install with npm !!\nsudo npm install -g https://github.com/scripted-editor/scripted/archive/master.tar.gz\n. I was a little hesitant to do this - since both our client and our server code currently share the same .scripted file (which is a deficiency of the current simplistic approach we are using). But in the end just decided we are better off with it.\n. thanks Alain!\n. Hey Ben. I believe this is because we are currently using the same 'special' version of jslint that is used in Orion. This version wasn't node aware and so doesn't understand the directive. I hope to update it soon. In the meantime you can switch to jshint, where we are running the latest version.\nThis section in the .scripted file will switch us to jshint, or if you create a .jshintrc file it should be noticed by Scripted and switch it into jshint mode.\njavascript\n{\n  editor: {\n    linter: \"jshint\"\n  }\n}\nThe directives are the same I believe, just use jshint rather than jslint. I will leave this issue open until I do that upgrade.\n. I'm waiting on some feedback on the feature before I make the call and switch it to the default linter. Likely to happen in 0.3 I think.\n. jshint is default now, jslint is gone.  jshint will continue to recognize jslint directives in code comments but primary configuration should be through .jshintrc\n. @scothis Just want to double check the pull requests leave everything in a working state? (They are just stepping stones along the way to the full impl)\n. .html files had it run against them because jslint can run against them (and it is supposed to skip the html and check the JS).  I haven't confirmed if jshint cannot be used for similar purposes.\n. Fixed - no longer applying jshint to these file types.\n. I'm hacking in the scr script right now, I'll have a look at this. \n. Issue #4 is now fixed, let me see how far we can now get with npm installed version on windows.\n. with the new smarts in the actual script, if you can get it to run it will do the right thing. For me I had to manually edit the generated npm.cmd and remove the bash pieces from the front of the commands, then scr worked. I don't yet know how/if the construction of that script is configurable. Depending on the pain we may just have to wait until the launch scripts are rewritten in node.\n. Ok, done via a slightly dirty trick.  The inclusion of the bash prefix is because the actual scripted referenced in the bin section of package.json have #!/bin/bash.  There isn't a notion (as far as I can see) of specifying different scripts per platform.  So this means on windows it thinks it is linking to 'scr' and so it also uses /bin/bash.  In fact when it calls 'scr' it will find 'scr.bat' in the same folder and run it instead.  So the solution for now is to remove the #! line from scr - this means they will run with the 'default' shell (so 'sh') and on windows it will not find a #! and create a cmd file that directly calls the scr.\n. tested and it installs and runs fine on windows. 0.3 will be the first version taking advantage of this.\n. i find this can be a bit hit and miss, some of the caching perhaps influencing what I see, but I certainly can make it fail.\n. It was only failing for me if I have a comment mentioning 'jslint node:true' (or 'jshint node:true'). Without the comments it always seemed to work.\n. Fixed. Now supports absolute refs and also those starting with a leading slash which should be 'relative' to the current drive.\n. fixed with quotes in both scr.bat and scripted.bat. thanks.\n. Fixed.\nNew options are '-r/--restart' to force a server restart and '-h/--help' for usage help. Run scr by itself to open the current directory.\n. Is it fixed in more recent esprimas?\n. All 3 dialogs have now had dojo removed.  Some files still remain and there is the navigator too.\n. Changed scope of this issue to cover work done for 0.3 - will raise new issue for further work.\n. This is now fixed using SCRIPTED_BROWSER so that windows and unix are using the same property. Hope thats ok.\n. Fixed the key case I was aware of, navigating via outline view.\n. Based on Nieraj's final bits I've now removed dojo completely from Scripted. This reduces the size of the client folder (excluding 'components') from 14k to 3k.  The new in file search is in master. Rather than covering the text it replaces the breadcrumb, in any editor. Supports the same options as the previous dojo based searcher. Some minor styling tweaks still necessary:\n- when navigator is open the drop shadow for the nav is overwritten by the search bar\n- the up/down arrows get slightly clipped\nI'm sure people will let me know if the functionality isn't behaving like it used to with the old one.\n. those little style things annoyed me so I fixed them too.\n. Just commenting that Chris knows about this one, rapidly flipping has always been an issue.\n. I'd like this in 0.3 if we can manage it? can we?\n. The side panel on the right, which is currently hosting the second editor is going to be able to host all kinds of things, one of which is likely to be the running app (which hopefully will be live updateable without the need to refresh).  We've only had time to stick one editor in at the moment.  I'll leave this issue open until the 'running-app pane' is implemented. Users will be able to extend the editor to provide their own panes too.\n. to match the behaviour on unix the variable has been called SCRIPTED_BROWSER and it has been added in both scr.bat and scripted.bat\n. following the unix pattern, home is %TEMP%\n. This wasn't fixed in Orion. Instead we have a local implementation in Scripted. We have auto indentation and auto un-indentation on close. The latter is not massively sophisticated right now and is not about correcting them if you put them in totally the wrong column, it just does the autoindent if it recognizes your coding pattern.\n. fixed\n. fixed\n. let me have a look\n. fixed - was a problem on mac too.  I don't see the 'no more parents' issue though, wonder what that is.\n. Help was moved to F1, to avoid being to close to other 'h' related keypresses on some OSes, like the one that deletes a character. If you click the '?' in the corner you should see it listed as F1.\n. Shift+Click in the navigator does open the clicked file in the 2nd editor. The shift modifier on any file reference (in navigator, results view, etc) should always open the target in the 2nd editor. No-shift will target the main editor. I'll agree some kind of shift mechanic could be nice to push the main to the side and load the new element in the main.\nBut we are going to have multiple editors I hope - hosted in the side panel - and we will need a way to target an editor window for the file being clicked/selected. I've not decided what that'll be yet. It could be Shift+1,2,3,4,5,6,7,8,9 or something like that. When shift is held over a openable element possibly some overlay appears on the browser window to show which number will select which editor window as the target for the load.\n. @Marc - opening the file in the browser seems a very reasonable context menu action. We should spin that out as another issue (I don't recall already having one).  On a related topic. Have you tried the integrated play/stop button for serving the project? I'd be interested in whether that is of any use to you.  If not, is there something 'play' and 'stop' could call that would be better in your case? Scott wants 'play' to call npm start, for example.\n@Scott Yes, I think you are right. We need to get those secondary side panel things open so we can start experimenting with the user experience.  I am not using the side panel secondary editor much myself at all, and I don't know why that is. I guess in Eclipse I don't often find I need to work on two files at once, just occasionally.\n. Marc - I'm afraid we are still waiting for a contributor agreement to be setup so that you can sign it and we can take the contribution. I'm really hoping it'll be in the next few days.\n. all fixed up. Configuration via .scripted is as per documented at: https://github.com/scripted-editor/scripted/wiki/Configuration\n. It occurred to me yesterday that this could happen, whilst I was tweaking the jshint handling. But no-one had raised it so I kept quiet :) I think I know what needs doing.\n. Fixed up. I believe this would only happen if your .jshintrc is at the project root and you opened scripted on that root. Opening it on a subdirectory should have still discovered the .jshintrc file at the root.\nHowever, we still don't go hunting for a .jshintrc - if the .jshintrc is not at the project root, we can 'miss it' depending on what you open (we search from the thing-you-open to the project-root).  In the future we'll correctly support different .jshintrc files per directory, I know some projects use that.\n. We do want to support a remote deployment mode - currently it'll only really work running the server on localhost - and we hope to start experimenting in this area very soon.  Your point about installing it into a project to make that project editable is an interesting one, I'm not totally sure it will be possible but I'll factor that into the discussion on remote deployment\n. I have applied this, but the changes are not yet 'live'.  Both sets of scripts are currently there, I'm about to do some testing of the node scripts across platforms and if they behave I'll make them live. I removed the path/when references that Scott eluded to being unused.\n. yes, they weren't committed (I think that is what I did, it is certainly what I hoped I'd do!)\n. i'll be playing with this as part of integrating the work Jeremy and I did on launch scripts being moved to node.\n. \"GET /kill\" is gone. Replace with \"DELETE /status\". This is now used by the script -k (kill) and -r (restart) options. This seems preferable to grepping the process list and directly killing node.\n. I believe this is OK - but please, in the interim whilst we discuss it, update the README and the wiki 'getting started' to indicate the extra step.\n. It appears these changes break windows. npm install will not work by itself, this is very serious.\n``\nERR! scripted@0.3.0 postinstall:cd client;bower installERR!cmd \"/c\" \"cd client;bower install\"` failed with 1\nERR! System Windows_NT 6.1.7601\nERR! command \"C:\\Program Files\\nodejs\\\\node.exe\" \"C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\"\nERR! cwd N:\\gits\\scripted\nERR! node -v v0.8.16\nERR! npm -v 1.1.69\nERR! code ELIFECYCLE\n```\n. quick try, that seems to behave. I'll do a bit more testing.\n. Change looks OK to me - I think there is scope for lots of little improvements like this. Unfortunately we don't have any jshint tests right now (work in progress) so we do have to be careful pulling this kind of thing in and manually smoke test it.\n. Nice feature. Just one question - there is nothing conditional about the templates I presume? So any that I add will appear for all selections. There isn't a way to restrict templates by saying \"if the selection matches this regex, this template should be proposed\". Regex's might indicate \"if its all numbers\" or \"if its the shape of an object\" or \"if it is a quoted string\".\n. believe I fixed all the positioning of the subeditor for now.  Still more refactoring to do in the layout manager though. The navigator was also slightly overlapping the status bar at the bottom, that is also fixed.\n. Pushed.  The system works as follows: A new control is added to the UI, this play/stop button appears alongside the other icons at the top.  When a server is not running it will be a play icon, when a server is running it will be a stop icon. The 'server' will be a static file server and by default serves the project root. This can be configured via .scripted:\napplication : {\n    webroot:\"client\" // the subfolder of the project that will be served\n}\nClicking play will make a request to the Scripted server which will in turn use the s2js/serv library (well, my fork of it) to start the server.  The server will be running at http://localhost:8000 - this is not configurable ( TODO ).\nClicking stop will use 'serv' to stop the server.\nThe server starts with livereload integration. In order to exploit this you need to include this tag in the HTML constituting your app:\n<script src=\"http://localhost:35729/livereload.js\"></script>\nWe need to add this automatically to html served through the static server ( TODO ).\nOnce the server is started a new listener is attached to a new save event that this branch introduces. This listener tells the scripted server to tell the reload system that something has changed (passing the path of the file that was saved). The reload system will decide what to do - css changes dynamically reflected in the page whilst js changes cause a page reload (for any viewers on the http://localhost:8000 port).\nWe still need to handle the case where the resources to reload are not those that the user saves, instead they might be those that get created by (for example) a less compile step that runs.  For this we'll probably need to reactivate the dirwatch feature we had previously, modify it to support file changes (it currently detects on creations/deletions I think), perhaps make it configurable by suffix. (so we don't watch more than necessary) ( TODO ).\nLet's see if we can get some feedback whilst it is in this state.\nOh, and the s2js/serv module produces a serv.log file, this goes into the folder being served by the managed server.\n. I'll open another bug to cover the further work items, close this one to cover what is working in 0.4\n. I'll take a look\n. All fixed up in master. I guess some of these are slipping through because we've switched to .jshintrc now.\n. Scripted searches from the file being edited up to the inferred project root, it doesn`t search higher than that. Would you be happy with us checking your home directory as another possible location? I'm a little loathe to search outside of the inferred project area other than the home dir.\n. From my point of view I see these kinds of settings as something to share with the project, via the repository.  If you don't share it then the other users are not going to get the same experience when working on the project as you have . They may see errors where you don't.  What level are you sharing your projects in the repository?  Do you have a root directory shared via a repo but different sub projects within that? (hence keeping the configuration at the root) or?\nWhen we look at new URL schemes and tidying up the security around scripted, we kind of want it to avoid doing anything outside of the inferred project root (and user home) (right now it can serve anything from anywhere on the disk, regardless of what the server was started for - this seems bad).  It is possible we could special case configuration, as that is something specific that the server is requesting rather than the user, but I'll need to think about it.\n. Kris - what scope do you have here to control the exec'd process?  I had to use these flags in the original 'non node' startup scripts to avoid the DOS command window popping up.\n. Investigating this, I can recreate the flicker. As Kris says we are using the node child_process stuff to launch the secondary process. I can adjust the string on windows to prefix with start /MIN /b cmd /c but it makes no difference which makes me suspect the exec is causing it to happen regardless of the command. However, if I knock up a simple node script on the command line which does the equivalent to our servlet, I don't get the secondary window popping up.  I wonder if spawn() as an alternative to exec might behave any better. \n. not going to make 0.4\n. We have an ongoing activity to improve the URL scheme, and part of it is along the lines you describe here (in our variant we are using pseudo-random-hash but no longer have the 'editor' component in the URL). I will post the proposal in a more public place soon so everyone knows where we are heading and can comment.  But beyond the design discussion we haven't had any time to do any implementation yet.\n. Here we go, this is the proposal we were batting around, written by Scott Andrews:\nAfter studying the HTTP interactions within Scripted and how the server and client are structured to handle them, there are opportunities to be realized. \u00a0The current collection of server side endpoint seem haphazard and overly command based instead of being resource based. \u00a0The REST model works really, really well for loading and saving files; there's no reason not to embrace REST (with a little WebSockets on the side).\nWhere there are operations that occur server-side on a resource, instead of treating them as a separate endpoint, they are instead treated as an alternate representation of the same resource. \u00a0For example, when loading a path, it could represent a file, or a directory. \u00a0The requestor should not need to care what the underlying resource is, but instead distinguish the response by a MIME type. \u00a0Additionally, the raw file content can be distinguished from the linter output for that file. \u00a0The HTTP 'Accepts' and 'Content-Type' headers work well for this purpose. \u00a0The 'Accepts' header indicates the preferred 'Content-Type' of the response.\nOne serious issue I have with the current API, is that there are no restrictions preventing the editor from loading and editing any file on the file system. \u00a0http://localhost:7261/editor.html?/etc/hosts is a completely legitimate file to edit, as is http://localhost:7261/editor.html?/Users/aclement/.ssh/id_rsa. \u00a0While the browser will restrict direct access from a malicious website, if there are any cross site scripting XSS vulnerabilities, the browser can be tricked into accessing and loading the file content. \u00a0While I'd like to think we won't have any XSS in our code, they are far too common in the wild and the stakes of local file system access too high.\nThis proposal introduces the concept of a secure, random token that essentially defines a chroot jail. \u00a0The user has full access to files under the jailed directory, but is prevented from accessing or modifying files outside that directory. (How to limit access of exec commands is an open question). \u00a0When the user starts a scritped process, a random token is generated representing the project root. \u00a0Only with that token can the editor load and save files.\nWhile this proposal strives to follow REST best practices there are often accommodations that must be made for human vs machine interactions. \u00a0In this case, the API is biased towards human interactions and de-normalized machine interactions.\u00a0I don't mean this to be \"the way\", but rather the beginning of a discussion.\nGET http://localhost:7261/\nScripted hello world, overview\nGET http://localhost:7261/resources/**\nStatic resources, shared across all projects\nGET http://localhost:7261/{secureRandom}/{filePath}\nBootstrap page for the project editor\nPath segments:\n\u00a0\u00a0 \u00a0- secureRandom: unguessable token that maps to a location on the file system\n\u00a0\u00a0 \u00a0- filePath: [optional] file within the project to open by default\nResponse Codes:\n\u00a0\u00a0 \u00a0- 200: the editor bootstrap\n\u00a0\u00a0 \u00a0- 403: the secure random is unknown/untrusted\nGET http://localhost:7261/files/{secureRandom}/{filePath}\nLoad a file resource\nPath segments:\n\u00a0\u00a0 \u00a0- secureRandom: unguessable token that maps to a location on the file system\n\u00a0\u00a0 \u00a0- filePath: the path on the file system relative to it's container\nContent-Types:\n\u00a0\u00a0 \u00a0- application/vnd.scripted.raw: raw file content\n\u00a0\u00a0 \u00a0- application/vnd.scripted.directory: directory listing\n\u00a0\u00a0 \u00a0- application/vnd.scripted.lint: linter output for the resource\n\u00a0\u00a0 \u00a0- application/vnd.scripted.dependencies: list of dependent resources\nResponse Codes:\n\u00a0\u00a0 \u00a0- 200: file content\n\u00a0\u00a0 \u00a0- 403: secure random is unknown/untrusted\n\u00a0\u00a0 \u00a0- 404: file does not exsist\nPUT http://localhost:7261/files/{secureRandom}/{filePath}\nSave a file resource\nPath segments:\n\u00a0\u00a0 \u00a0- secureRandom: unguessable token that maps to a location on the file system\n\u00a0\u00a0 \u00a0- filePath: the path on the file system relative to it's container\nContent-Types:\n\u00a0\u00a0 \u00a0- application/vnd.scripted.raw: the raw file content\nResponse Codes:\n\u00a0\u00a0 \u00a0- 201: file saved\n\u00a0\u00a0 \u00a0- 403: secure random is unknown/untrusted\n\u00a0\u00a0 \u00a0- 409: file has changed on disk since it was loaded\nDELETE http://localhost:7261/files/{secureRandom}/{filePath}\nDelete a file within a project\nResponse Codes:\n\u00a0\u00a0 \u00a0- 204: deleted\n\u00a0\u00a0 \u00a0- 403: secure random is unknown/untrusted\n\u00a0\u00a0 \u00a0- 404: file does not exsist\n\u00a0\u00a0 \u00a0- 409: file has changed on disk since it was loaded\nGET http://localhost:7261/preferences/{secureRandom}\nThe project preferences\nPath segments:\n\u00a0\u00a0 \u00a0- secureRandom: unguessable token that maps to a location on the file system\nContent-Types:\n\u00a0\u00a0 \u00a0- application/vnd.scripted.preferences: scripted preferences\nResponse Codes:\n\u00a0\u00a0 \u00a0- 200: preferences\n\u00a0\u00a0 \u00a0- 403: secure random is unknown/untrusted\nGET http://localhost:7261/commands/{secureRandom}\nList of available commands to run for the project\nPath segments:\n\u00a0\u00a0 \u00a0- secureRandom: unguessable token that maps to a location on the file system\nContent-Types:\n\u00a0\u00a0 \u00a0- application/vnd.scripted.commands: project commands list\nResponse Codes:\n\u00a0\u00a0 \u00a0- 200: commands\n\u00a0\u00a0 \u00a0- 403: secure random is unknown/untrusted\nPOST http://localhost:7261/commands/{secureRandom}/{command}\nExecute the desired command. \u00a0The response should be chunked to give the user the most up to date console output. \u00a0WebSockets may also be appropriate.\nPath segments:\n\u00a0\u00a0 \u00a0- secureRandom: unguessable token that maps to a location on the file system\n\u00a0\u00a0 \u00a0- command: the command to execute\nContent-Types:\n\u00a0\u00a0 \u00a0- application/vnd.scripted.console: console output from the command execution\nResponse Codes:\n\u00a0\u00a0 \u00a0- 200: commands\n\u00a0\u00a0 \u00a0- 403: secure random is unknown/untrusted\n\u00a0\u00a0 \u00a0- 404: the command is undefined\n(http|ws)://localhost:7261/events/{secureRandom}\nReserved for future use\nPossible uses:\n\u00a0\u00a0 \u00a0- presence detection\n\u00a0\u00a0 \u00a0- notification of file system changes\n\u00a0\u00a0 \u00a0- realtime peer collaberation\nPath segments:\n\u00a0\u00a0 \u00a0- secureRandom: unguessable token that maps to a location on the file system\n. it doesn't duplicate those options directly, the formatter ones are actually more flexible. They are set based on any editor configuration supplied. But, yes, configuring the formatter also feeds into this sort-out issue.\n. Almost completed, should be in soon.\n. Done. F2 will close/open it (or the new icon in the top right). Setting is persisted in local storage. It will be overridden by any setting forced in the .scripted file. I also adjusted the shadows on the navigator edge and the left ruler (when in dark mode), I think it looks better. Running without the navigator feels very clean.\n. Work being done in branch neweditor20130123 (date stamp is orion version we are moving to, full stamp 20130123-1139).\nBranch is now able to startup (and you can edit/save) but content assist and key binding configuration still hosed.\n. completed.\n. Committed the first part of this, there is a toggle button in the UI to switch between light/dark - the choice is not persisted between page reloads at the moment. This bug can be a catch-all for feedback on it.  Some notes so far:\n- colours aren't meant to be the final ones, they are a work in progress. html colours are particularly bad.\n- changing the font as part of the theme switch won't currently behave, would like to fix that.\n- the dark css file does not yet contain all possible config options. If changing some of the border sizes (rather than just colours), the editor will not redraw appropriately until you click in it.\n- the scrollbar 'corner' in the navigator needs tweaking to match the new scrollbar colours.\n- the shadows behind the editor look weird in dark mode. Needs tweaking (perhaps removing)\nAnyone wanting to hack, look at dark.css which contains the configuration options.\nAs part of this change I've also started using the webkit config options for scrollbars. The default ones were quite jarring when they appear between the navigator and editor. The new ones may be a bit too invisible, but lets see what people think...\n. done what I plan to for the release.\n. On Thursday night I made a bunch of changes to the layout manager to better improve this - can you try master and see how it behaves for you? (Also note that we now have a dark theme for the editor, click the new icon in the top right to toggle day/night mode). \n. Interesting you should raise this, I was just thinking of doing it this week. Although I'm just in two minds whether I'd like to see the path at least somewhere (e.g. top of the navigator).\n. breadcrumb shortened. Added inferred root to top of navigator but I don't think it'll look great for a loooong inferred root, needs further improvement.\n. A couple of people have mentioned the desire to do this, I'd love scripted to be used that way. How to include it in the game may depend on the technology you are using for it.  Leaving Scripted as a module would be the most straightforward. Does your game have a server side component? What tech are you using for it?\nThe most important piece will likely be serving up the application files for editing rather than using the local filesystem. We do have the beginnings of a basic filesystem abstraction in there, but:\n- I don't believe it isn't totally complete, and certainly not all fs accesses are using it yet\n- it isn't externally configurable, via .scripted or via a plugin mechanism\nBoth of these things are likely to happen when we get some time.\nSearching the codebase for uses of the node 'fs' module in the server component will be the places that likely need modifying.\n. Yes, you can have multiple editors on the same site, but currently there is no coordination. Edits made in one page/editor will not dynamically be reflected in page another accessing the same file (until that page reloads). I want to have them aware of each other but this hasn't bubbled up the priority list yet.\nFor our current experiments with reloading we are using live reload but that only dynamically replaces css styling/html without restarting, if you change JS it causes a page reload. We'd like to support something where JS could be hot reloaded but I'm not 'up' on the projects currently supporting that.\nFile Explorer has a dojo dependency that will be gone this week. Whether you want to use it or remove it will depend on what navigation options you want to have. I use our 'open file' dialog much more than I use the fileexplorer/navigator.  If your buttons (like the config button) open all the editors you will need, then sounds like you can ditch the explorer.  If you want a completely different structure, it does sounds like you don't want our layoutmanager either.  You kind of just want to manufacture editor objects and position them as you see fit. The benefit of doing that with Scripted rather than just using a generic editor JS component should be the content assist and better dev experience you get. I want to support this but I'm not sure how consumable Scripted is for this use case just yet.  Look at scriptedEditor.makeEditor() - maybe in your front end you just need to call that a few times (4 in your case). I'd be open to making some changes to suit your usecase (i.e. making us more consumable)\n. We haven't created a set of reusable scripts/configurations for git control yet, but obviously we use git ourselves and want to improve the integration story. We'd rather do this through integrating command line git rather than building UI to support it (and I believe that is what you are asking for). If you come up with any useful command configs, let us know. Given that we'll run out of key bindings we know we are shortly going to need another way to execute some of these things.\n. I do see some weirdness on a windows npm install this morning, but not the error you have there. I'll try on a second windows box in a few minutes. All working fine on mac.\n. action is in 'Toggle Visible Whitespace', no key binding by default, open help panel and bind it if you want to try it. Setting only applies to current editor and will not persist across reloads or even page navigations.\n. I am progressing getting this in. It just messes with some of the UI timings and I need to sort that out.\n. these changes are now in master. Some not as elegantly as I'd like but I don't have time right now to rewrite all the tests to cope with async behaviour. thanks Tony!\n. I played a bit on windows and couldn't get anything weird to happen. The 'short editor' problem in your previous screenshot, that just looks like you have the exec console open, which you can do just by clicking the console button. If you have no command output it will appear just like that, a blank pane with scroll bar.\n. As I was adjusting some styling the other day, it did feel like I might be breaking zoom. Let's reopen and use this bug to address that (if we can).\n. I just tried on Win 7 64 bit too, canary 27.0.1418.2 - no flickering. That is running master from just now.\n. Also needs the side panel open to happen. Occurs because two handlers are registered for the click event (one for each editor). fixed\n. Our navigator was a bit of a rushed job, just so we had some way to access files before the 'open file' dialog was born. There is plenty of room for improving things here, I think we should make the change.\n. I think we haven't done this on purpose so far as it can return too many results and there is no way to say \"i want case sensitive\". So in supporting the feature here we probably need a small toggle to select case sensitivity.  I find sometimes the case sensitivity is a hindrance, sometimes a bonus.\n. All done, as listed. Can also press 'HOME' to jump to the top of the results.\n. as i couldn't recreate, you might have to dig into this one Kris.\n. may need server side changes to return a better code for this situation and prevent the client logging an error.\n. When this happens is there a jquery message in the js console?\n. Does it happen only with that file?\n. Seeing something like this opening our types.js file, the last line is under the footer for me (on chrome). Doesn't happen on firefox.\n. In my case it is a 'rogue' character in the text. The right arrow (\u21d2) causes the line size in the editor window to be taller than a regular line. so the line numbers are right and fit on screen but the text in the editor window content is slightly longer and off the bottom of the page.  Scott - can you tell if the line numbers are correctly all there and it is the text that is wrong or are they both wrong? (which file is it, maybe I can try it)\n. I believe this is now fixed, at least in dev, not sure the fix has made it into master yet but hopefully we'll have a push to master in the next day or so. I believe it was related to the 'jquery missing' problem which caused sizing problems in layoutmanager.\n. Since the 'jquery is not defined' issue has been fixed I've seen no more occurrences of problems like this. That fix is now in master, I believe this is now addressed.\n. I have seen this but not by closing/opening the navigator. Constantly toggling the navigator works fine for me at 100% zoom. Now if I zoom to 110%, then I can get it to happen after a few toggles. Are you zoomed?\n. Fixed\n. I see, I thought that might be enough for you, guess I better close this for now then, I'll try to remember to reopen when i see it again.\n. Kris - can you look at merging this.\n. certainly we could have an option to operate in this mode (externally configurable but perhaps also settable via the dialog that you hit when you encounter this for the first time).\n. we have been toying with the right approach to support this. Right now there is no comms channel for the server to tell the client that it has old contents, but that will be coming in the not too distant future, when we start to add the infrastructure for multi-user editing. This approach feels preferable to the client constantly polling whether it has an up to date version.\n. fixed\n. Doesn't happen for me, I don't see the entry in bold in the open file dialog list any more. But I do still see it in the history crumb pulldown.\n. Fixed in dev, will be in master by end of day. The layout manager was calling an update function rather than a resize function. If you are using word wrapping a lot, we could make that configuration persist - you must be having to turn it on every time you switch editors.\n. fixed\n. In the UI block in the config you can now all or any of these:\nfont_size_breadcrumb: 16,\nfont_size_nav: 16,\nfont_size_help: 14\n. They are now F1->F6 and they are reordered to match that sequence.\n. We should also migrate jshint support to being a plugin. Although we have the API for adding annotations there is some configuration processing used to prep jshint that we may need to add API for.\n. This is awesome, thanks! Demo site seems to have gone down for me unfortunately. I'll have a play with it tomorrow.\n. Sorry I didn't get to this sooner, I was at EclipseCon last week and tied up with so much stuff. I'll be taking a look this week\n. I knew that moving the cursor during the edit would break things (due to how we intercept the key presses), I don't think that is the same as the problem I was seeing with renaming misbehaving on undo. In my situation I was just typing the new chars and then undo, no cursor movement/pasting or anything else.\n. I think the preferable way of setting those is via expandtab/tabsize in the editor block:\n\"editor\": {\n  \"expandtab\": true,\n  \"tabsize\": 4\n}\nBut I presume you are seeing them in the formatter block?\n\"formatter\": {\n  \"js\": {\n    \"indent_size\": 4,\n    \"indent_char\": \"\\t\"\n  }\n}\nis that right?\n. fixed up in dev. I believe this came about when the new config options where forced into the editor block for auto indent/unindent. The existence of the editor block (even though it had no spacing config entries) interfered with the mirroring of formatter/js settings to editor settings.\n. Yep, they should be two views of the same up-to-date file. We have an issue open elsewhere to cover this I believe.  Prior to that being implemented, I agree there should be a more active warning.\n. You may have luck installing from master:\nnpm install -g https://github.com/scripted-editor/scripted/tarball/master\nWe know that the 0.4 release has problems with Node 0.10 (so an alternative workaround is to downgrade to node 0.8) - I believe it is the old version of bower we have been using.\nWe hope to have a Scripted 0.5 out soon with the fix in it.\n. I just pushed out Scripted 0.5 which hopefully addresses this problem (by updating the bower version).  Please try again.\n. I merged the patch request as that is all I have time to do and it helps people along. If we want another pull request to switch it to some other version, anyone is free to submit one.\n. Hi - have you signed the CLA at https://support.springsource.com/spring_eclipsecla_committer_signup - that is a pre-req for me to merge commits. let me know.\n. ",
    "lroal": "I agree with jden. Make it \"node native\". This was the first thing I was looking for. There really should be an npm alternative for the installation.\n. ",
    "junosuarez": "I don't think having an npm install option would lock the project to be node-only. There are plenty of projects that are committed to running in other environments, like Rhino or WSH, which also have npm packages. It's just a nice convenience for those of us who are totally spoiled by such an excellent package manager. Notably, even the recently released TypeScript has an npm distribution.\n. ",
    "ackalker": "Please check out my fork of scripted, 'npm-support' branch: https://github.com/ackalker/scripted/tree/npm-support\nI've added some minimal support (Linux only, maybe works on Mac OS X too, needs testing) for packaging and installing scripted using npm.\nnpm install -g .\nfrom within scripted's Git repository directory to install scripted globally,  linking the command scripts scr and scripted into npm's PREFIX/bin directory.\nThe server log will be written to PREFIX/lib/node_modules/scripted/scripted.log .\nThe scr and scripted commands should work as expected.\n. Sure :-)\nI have signed the committer agreement, and have sent you my confirmation number by email.\n. Please have a look at: http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac\nNote that this may open up a whole other can'o'worms, because, for example, realpath may be available on Mac, but it isn't in the default install for many Debian-based distributions. Any of the options mentioned in the SO question would probably require users to install additional dependencies for scripted.\nI think it would be best to implement as much code in the shell scripts as possible in Javascript, abstracting out everything but OS dependent stuff.\n. Please also look at this: http://documentup.com/arturadib/shelljs\nMaybe shelljs can help out until we fully convert the scripts to JavaScript.\n. Thanks for the heads-up :-)\n. Thank you for the pointer to the other issue. I will definitely take a look.\nI think require.resolve() is entirely agnostic about which context it is being called in (that's why I used it from within the REPL, running from my home dir, for example), it just looks at its path argument.\n. Quoting from: http://nodejs.org/api/modules.html#modules_folders_as_modules (emphasis mine)\n\"Modules are cached after the first time they are loaded. This means (among other things) that every call to require('foo') will get exactly the same object returned, if it would resolve to the same file.\"\nFrom this I'm inferring that the path resolution isn't cached (which is exactly what we want in this case).\nThis should be easy to test (I'm trying it at this moment).\n. Dang! node does cache require.resolve, so it's no use if the package.json file changes during the server's lifetime.\nOne solution would be to restart the server on a package.json change; the browser would need to refresh its contents anyway.\nLots more hairy stuff regarding file auto-save, persisting settings, etcetera. Not nice.\n. Found a solution! Use substack's 'resolve' package (yup, what's in a name) from npm or https://github.com/substack/node-resolve\nInstead of require.resolve('<path>'), use resolve.sync('<path>').\nNo caching whatsoever. Also has very convenient resolve.isCore(pkg) function, to check if pkg is 'node native'.\n. Hmm, today bower info requirejs shows me versions between 2.1.0 and 2.1.10. Odd indeed...\n. ...and no more errors on npm install :-)\nGuess it's okay to close this now.\n. Quick-fixing the paths to QUnit files leads to yet more errors about missing files, notably .../tests/client/components/requirejs/require.js and .../tests/client/tests/client/testsetup.js.\n. Thanks for the quick reply :-)\nI will push the QUnit fix and add the part of the log with the resulting other errors.\nEDIT: Yes, the path to qunit.js is that strange. It appears to have been fixed in newer versions.\n. wow, sorry about that :-)\nI used hub pull-request -i <#issue>, which gave me the warning:\nWarning: Issue to pull request conversion is deprecated and might not work in the future.\nand then spammed this conversation with all the old commits.\n. Guess I should have used git push --all ...\n. With the proposed fix, all clientTests pass.\nThe clientServerTests progress up to:\nStarting to find completions in /home/miki/vcs/git/node-modules/scripted/tests/client/test-resources/completions/test4.scripted-completions\nClient requested content assist templates complete\nProcessing get request for /home/miki/vcs/git/node-modules/scripted/tests/client/test-resources/foo.js\nand then appears to hang . Killing the test runner with ^C does clean up all processes, so it isn't a freeze.\n. Are you working from a clean clone on dev branch?\nI normally do:\n$ git clean -dfx # make sure you've committed / backed up _all_ local changes, _including_ untracked files!!\n$ git status # Be sure to be on 'dev' branch\n$ git reset --hard # force everything to tip of branch (i.e. 'dev')\n$ npm install\n$ npm test\nAlso, I've noticed that npm install postinstall step appears to use the version of bower installed within scripted/node_modules/bower, which makes working with a globally-installed bower from the command line difficult. For one, newer bower now requires name property in component.json, etc., so better use the one included in scripted.\nThis is output on my system:\n$ cd client && ../node_modules/bower/bin/bower list\nbower discover Please wait while newer package versions are being discovered\n/home/miki/vcs/git/node-modules/scripted/client\n\u251c\u2500\u2500 curl#0.7.3 (0.8.8 now available)\n\u251c\u2500\u2500 doctrine#0.0.4 (0.2.0 now available)\n\u251c\u2500\u2500 json5#0.1.0 (0.3.0 now available)\n\u251c\u2500\u2500 meld#1.1.0 (1.3.0 now available)\n\u251c\u2500\u2500 probes#0.1.0\n\u251c\u2500\u2500 qunit#1.10.0 (1.14.0 now available)\n\u251c\u2500\u2500 requirejs#2.1.4 (2.1.10 now available)\n\u251c\u2500\u2500 requirejs-i18n#2.0.1 (2.0.4 now available)\n\u251c\u2500\u2500 requirejs-text#2.0.4 (2.0.10 now available)\n\u251c\u2500\u252c rest#0.8.4 (1.0.0 now available)\n\u2502 \u2514\u2500\u2500 when#1.7.1 (2.8.0 now available)\n\u251c\u2500\u2500 when#1.7.1 (2.8.0 now available)\n\u2514\u2500\u2500 wire#0.9.0 (0.10.5 now available)\nNote that qunit is an old version which has qunit.js in the odd path.\nPlease compare.\n. Congrats! :-)\nThanks for merging.\n. ",
    "pashaie": "So, then it's probably my windows settings. In my machine, %rootdir% points to current directory, so when calling node to start scripted server, it wont find \\server\\scripted.js. \nBut using %thisdir% instead of %rootdir%, solved my problem.\n. Yeah, I was opening a file from an other drive than one where scripted was installed. So maybe that's it?\n. ",
    "RicoP": "I would be very happy about TS support.\n. ",
    "ghost": "+1 from me  :)\n. ",
    "ulanda": "+1 here!!\n. ",
    "SergKam": "+1\n. Syntax highlighting \nCompilation.\nType errors highlighter.\nCode competition based on types. \nNavigation. \nsee http://www.typescriptlang.org/Playground/\n. ",
    "ikarienator": "The online TypeScript editor of Microsoft also supports simple refactors like renaming symbols. It can also display reference searching results in a hovering window. Go to the page and select an symbol and click on the triangle under it to know more.\nI'm reading both of your code and making some experiments. I can support mouse hovering information now. I think I may help you with this issue if you want.\n. @aclement Sorry, do you mean scripted supports TS rename or JS rename? I was not able to even show syntax highlighting in dev branch. Maybe I was wrong. I'm currently working on adding TS supporting to scripted. hope my work is not redundant.\nIMO The hover should be showing some much shorter things like type or arguments information. I'm not quite sure the way Microsoft does with showing reference result is the best way to do it. For me is not comfortable to see a huge, scrollable box covering my current code. I would rather have it the docked at one side of the workspace.\n. I also set up a demo at: http://twbs.in:7261/editor/src/render/Program.ts#0,0\n. @aclement Yeah I put too many contents on the VPS. I restarted it just now.\n. @aclement I check the log and found this you may be interested: \n(node) warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.\nTrace\n    at Socket.EventEmitter.addListener (events.js:160:15)\n    at Socket.Readable.on (_stream_readable.js:653:33)\n    at Socket.EventEmitter.once (events.js:179:8)\n    at TCP.onread (net.js:527:26)\n(node) warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.\nTrace\n    at Socket.EventEmitter.addListener (events.js:160:15)\n    at Socket.Readable.on (_stream_readable.js:653:33)\n    at Socket.EventEmitter.once (events.js:179:8)\n    at TCP.onread (net.js:527:26)\n(node) warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.\nTrace\n    at Socket.EventEmitter.addListener (events.js:160:15)\n    at Socket.Readable.on (_stream_readable.js:653:33)\n    at Socket.EventEmitter.once (events.js:179:8)\n    at TCP.onread (net.js:527:26)\nFATAL ERROR: Evacuation Allocation failed - process out of memory\n. Many thanks for the review!\n1. I didn't even know there would be an IP problem until today. I though Apache means \"use freely\". I think I'm quite wrong about that.\n2. I think the sluggishness comes from the recompile. I'm incrementally recompiling every 1 second in the main process. :( I can move it to the worker process, but may need some rework though.\n3. TypeScript compiler is a little bit huge and not easy to hack on. I didn't find a way to create summary instead of including all the files in the service host. Maybe it's possible or maybe we have to create our own compile unit management functionality and use only the parser provided by Microsoft. It is also possible to make the indexer running on the server side and exchange only the summary to the browser. This might also work on JavaScript editing too.\n. Thanks for the explanation! I will be working on that soon.\nBTW, do I need to add headers to generated files as well? If we do, I will edit the build script to add it.\nThe included typescriptServices.js and typescriptServices.d.ts are compiled from the source code found here: https://typescript.codeplex.com/releases/view/98308 It can also be found in the npm package typescript 0.8.3.\n. I'll close this PR for now. Will create another PR soon as I finished it.\n. ",
    "kdvolder": "We do some things. E.g. we try to \"guess/find\" an html file that contains require config code. If we find it we try to parse it and use it to resolve amd module references.\nThis is still a bit limited and sure to fail for many real projects. Essentially, we know it works for our own code and if your code looks much like ours, then it will likely work. But if it doesn't... then all bets are off. (It may or may not work)\nWe are quite interested in seeing samples of real projects, and how they configure their amd dependencies. That gives some good test cases to play with and try come up with some way to extract the necessary information.\nSo if you can provide an actual sample of how your project structure is setup and how your project configures requirejs... that gives us something to play with. And it gives you a better chance that scripted will be able to figure out your project configuration in the future.\nSo, my question to you: do you have a nice sample project for me to play with? :-)\n. Thanks for that snippet. Actually this kind of code we already understand. The trouble with how we (fail to) handle your project is probably that scripted isn't finding this code snippet so it is not parsing and analyzing it.\nI don't really want to have to read and parse every js file in a project to try and find the one with a 'require.config' block in it. So the key question is, is there some kind of a hint we could pickup from a project like yours to figure out where its config block is? (without reading and trying to parse every file in the project).\n. > We don't use the data-main way of loading a module, but have another way to do it.\nCan you explain this 'other way' a little. I'm just wondering how scripted might be able to detect what you are doing so it might guess where your config file is. What you told me so far is a little too vague to be able to do much with it.\nIf it doesn't seem like there's an obvious way for us to guess this, then perhaps what you would need is to be able to add something to the .scripted file of your project to points to the config file. \nThen we wouldn't have to guess where it is (but it takes more work from the user to set things up )\n. Closing this issue. Without more info on the specifics of your project there's isn't much we can do to make it work better for you.\nI did add a note about possibility of requirejs config in .js rather than html files to this existing issue.\nhttps://issuetracker.springsource.com/browse/SCRIPTED-65\n. Yes, you are absolutely correct. In fact we already have an issue open for it in our 'main' issue tracker. See here: https://issuetracker.springsource.com/browse/SCRIPTED-117\nI'll close this issue since it is a duplicate. Please make further comments etc. on the SCRIPTED-117 issue in our main tracker.\nKris\nPS: You make an interesting point about require.resolve, maybe we can somehow call this function instead of implementing our own resolve logic. Though we have to find a way to keep the resolve logic for the user's project separate somehow from the resolve used to load scripted itself.\n. Yes, I can see how this might work if we make the paths absolute first. The only thing I'm still a little worried about is how require.resolve would cache things internally, and if it would appropriately re-resolve if file system changes have made the previous resolution invalid (e.g. let's say I've edited the package.json and pointed the 'main' file to something else.\nFor node, it is a reasonable assumption to make that you don't edit files while your program is running, so once resolved it probably caches the result indefinitely. But for an editor this isn't such a good idea. That would be a possible reason to keep our own implementation of the resolver, where we can control the module resolution cache.\nKris\nPS: All of the above is just a guess about how require.resolve probably works, it isn't based on looking at the nodejs code. Anyhoo... your suggestion is interesting. I'll think about it :-)\n. My guess it has to do with the logic of server-side code that finds the .scripted and project root.\nI think my assumption for that code was that it gets passed a file reference. If passed a directory, I believe it will examine the parent of directory but not the directory itself.\nSo I'd consider this a bug in 'dot-scripted.js'.\nI can fix it.\nKris\n. Raised a ticket on our main issue tracker: https://issuetracker.springsource.com/browse/SCRIPTED-244\n. I pushed a fix.\n. > Is this line necessary? I'm surprised that our resolving is still working even though we have absolute paths in this file.\nAmd resolver discovery doesn't take <base href=\"/\"> into account. So I guess it is still working purely by accident. The / path relative to the 'webroot' is actually the same as the parent directory of editor.html. So that is why it is still working. \n. > @kdvolder it's not \"by accident\" that it works. With the editor.html view now rendered at multiple depths in the URL path, any relative URLs will break without the base href. Absolute URLs are unaffected.\nI probably need to clarify. With 'amd resolver discovery' what I was referring to is the static analysis scripted attempts to try and pull out the amd configuration from some html and js file combination so that we can do dependency analysis. I am guessing you are talking about requirejs itself doing resolution 'at runtime'. \nThe scripted amd config discovery is working by accident because it interprets the config it discovers in setup.js relative to the location of the editor.html file. It only does this because it has no understanding of <base .../>.\nSo it arrives at the right solution by performing an incorrect analysis.\n. Pushed a fix\n. I think we should do this before https://issuetracker.springsource.com/browse/SCRIPTED-180\nI.e. try to fix the 'architectural problem' of how we currently use websockets before doing much more additional coding on top of the current websocket code we already have.\n. The above example no longer exist in the current scripted code base. But there is another example in our use of the 'rest' library and its sub-packages on the client side.\n. Of course... root cause needs fixing. But I think the client should also be able to recover if the socket gets closed by an error, server restart, user...\n\nYou probably didn't notice before as the sockets were more transient.\n\nCorrect. A socket was only opened for the duration of a search dialog. Then closed again.\nNow we have one \"always open\" multiplexing socket and it gets reused, no matter how many sockets we need.\nThe drawback is that presently, if this socked 'dies' its dead forever since there's no recovery logic yet.\n. Same problem with Chrome on windows.\n. I just pushed out some changes that remove the two uses of 'PWD' that I could find.\nQuickly tested on both Linux and Windows and seems to work.\nhttps://github.com/scripted-editor/scripted/commit/bce36fafb0ca989df87ed1c3078e3190281860dc\nhttps://github.com/scripted-editor/scripted/commit/6cd0fae7f4a6c26ab44debb8d5c54af382e48bbb\n. Thanks, exactly the kind of example I'm looking for. Actually, at first sight, this example should work, but it seems like it isn't. I'll investigate. \n. There was an error in the logic for interpreting baseUrl for the data-main case. Apparantly not covered by the current sets of tests. This case should work now :-)\n. Actually there's a bit of code in orion that is FF specific and it adds the SHIFT-INSERT style shortcuts.\nNot sure why this is being done.\nThe shortcuts do trigger, but stepping through the code it seems to fail to actually copy data to and from the clipboard.\n. Interesting... In a way I'm not surprised. Our handling of amd plugins is rather limited. It really only works for 'text!' and 'i18n!' plugins. \nThe problem with plugins as I understand them, is that there's no way to know, in general, what a particular plugin will do without running its code.\nIt seems like what's ultimately needed here is a plugin mechanism so you can contribute an extension to our amd-resolver module to handle your plugin's resolution. This is a bit of a complex issue and probably we are not ready yet to put in such a plugin mechanism.\nFor now, what we could do easily is take care of the error. I.e. we know that your plugin is not on the list of amd-plugins that we understand, so we could change the error to a warning 'unknown amd plugin'. Or simply ignore the whole entry without any warning or error.\nSo that's probably what we will do. (Would you prefer a warning? Or just no message at all?).\nI'm also interested still interested in the 'how' of your original request:\n\nProvide a way for a curl.js plugin to tell Scripted \n\nI.e. do you have an idea of what would be a good/nice way for you to do that for your particular plugin?\nYour thoughts may help getting a better idea of what's needed here to handle various plugins.\nKris\n. Hi Andy, thanks for the info. That is all very interesting.\nRight now we have basically two slightly different ways for resolving the 'xxx!blah' references. When the 'xxx'==='text' then we look for the name 'blah' 'as is'. In all other cases we look for 'blah.js'. The way we look for it is using the exact same mechanism as it would resolve other dependencies.\nThough my sample size is still small (only three plugins so far :-) it looks like all the plugins in this 'sample' do something similar which is to append some extension to the name and then resolve that in the usual way.\nIt seems that we could make things work for you by changing the default extension for 'uknown' plugins to be the empty string instead of '.js'. Perhaps that is a more logical default than adding '.js'.\nThe choice I made their of using \"add '.js' \" as the default instead of the empty string was really quite arbitrary, so I don't mind changing that if that will make things work better for you.\nAlso... maybe we could get a lot of mileage from allowing some kind of config option to specify an extension for a particular plugin name. But... before doing that I want to wait longer, I don't feel like we have seen enough different plugins yet to really know if that's the right thing to do.\n\nIt feels like this isn't possible without the plugin providing a function to tell you what url it'll actually use when it performs a load. Rather than plugins providing separate Scripted extensions, could the plugin itself provide a function with a well-known name that performs the required mapping and tells scripted what it'll need to know? This would essentially be an extension to the AMD spec that enables better integration with tools like Scripted.\n\nSomething like that might work, but... it means we have to execute the code from the plugin inside the editor or on the scripted server. For many reasons that seems undesirable impractical. I.e. we are then firmly on the road to an extension mechanism that lets non-scripted code be run inside of scripted.\nIn the long run we do want something like an extension mechanims, but we are far away from having ideas on how that would work. So for now... any ideas involving running arbitrary external javascript code bits inside of scripted are off the table. \n. I just pushed something that should still work for text and i18n plugins and make anything else 'ignored' so no errors will be reported.\nAlthough that doesn't actually do what you really asked for (i.e. 'allow curl to tell scripted...'). I think that probably adresses your immediate problem.\nAlso, while I have not yet made the list of plugins configurable via config file... as a quick hack you can easily add your plugins to the list at the top of 'amd-resolver.js'.\n. BTW: if there are other 'standard' plugins that can be handled by adding them to this list... let me know and we can add them really easily.\n. Over the last few days I have pushed bits and pieces of something that does the following.\n1) Keybindings can be specified in a file  \"${user.home}/.scriptedrc/keymap-.json\".\nThe keybindings are in a similar format as exec-keys:\n{\n        \"ctrl+alt+shift+g\":  \"some command name\"\n }\n\"some command name\" is the name of an editor action that is registered in the scripted editor. \nReplacing the action name with null has the effect of unbinding that particular key so it is no longer\nassociated with an editor action.\nThese changes are applied to every editor after all of its default keybindings have been setup.\nThus the keybinding in this file will override the defaults.\n2) A UI to edit/change keybindings from the editor.\nThe UI is integrated in the help side panel. Simply click on a key-combo in the side panel to bring up a small inline dialog. \nThe dialog allows pressing some keys to bind them to the action. There is also an 'unbind' button to remove a current keybinding.\nActions that are not currently bound to any keys are shown at the bottom of the panel where you can click on them to bind them to something.\nWhen a keybinding is changed/removed/added via the UI this is immediately applied to all open editors.\nThe keybindings are then also persisted by saving them to '${user.home}/.scriptedrc/keymap-${os.name}.json'. \nOnly keybindings that differ from the default are saved to the file.\n. Rebinding F3 seems to work just fine for me on linux + Chrome. also tried\nby a mac person.\nPerhaps the issue there was the action you tried to rebind not F3.\nOn Fri, Dec 14, 2012 at 6:51 AM, cawoodm notifications@github.com wrote:\n\n3) Ability to bind stuff defined in Chrom (Ctrl+L works but F3 doesn't)\n. I guess we could do that, or we could do something similar to how we allow you to exclude files/folders from searches. This info may be hard to find as I don't see it documented on our wiki. Only info is herein our old issue tracker:\n\nhttps://issuetracker.springsource.com/browse/SCRIPTED-272\nI should fix this and add some docs on configuring the search to wiki. Lest I forget again I raised https://github.com/scripted-editor/scripted/issues/259\nIn the name of consistency I propose we allow configuring navigator exclude patterns in similar fashion. E.g\nnavigator: {\n        exclude: [ \"**/*.exe\", \"**/node_modules\", \"**/cache\"] \n  }\nBTW: '.git', '.svn' and '.cvs' are always excluded fro both searches and navigator and there's no way to configure/override that.\nI did this because when I started playing with overriding the 'default' behavior I found it an unpleasant surprise that those popped up again and I can't really imagine anyone really ever wants to see or search inside their .git or other SCM files.\nWe chose to keep search and navigator excludes separate since I think it is possible you may want to exclude some things from searches yet still want to be able to navigate into them.\n. It doesn't appear to get unbound at all. At least not according to the help panel.\nI suspect its not the keybinding that gets lost but a bug in the 'toggle logic'.\n. Actually, looks like this is a focus-related problem. \nThe keybinding is not handled after the 'off' toggle because the editor no longer has focus.\nClick in the editor and toggle works again.\n. Yes, I can. In FF. Just press the key several times in a row, happens every time.\nAlso it is indeed a focus issue. I also cannot type into the editor after the double togle. I have to click in it first.\nI made a fix by adding the toggle sub-editor as a 'global' action. This makes the toggle work, but doesn't fix the focussing issue.\n. PS, I also fixed a problem with the toggle action not returning 'true' to indicate it has processed the event.\nIf not return true, then problems will ensue if the keybinding assigned to the action already has meaning to the browser. Plus... it results in a automatic 'double togle' if the action is marked as global, because it gets handled locally but then still bobles to get handled once more globally.\n. Reopening, still have the focus issue.\n. To correct Andrew's info: there's actually really no problem rebinding F3 key in general, I think. Just tried it out and bound 'insert newline at end of line' action to F3. Not a problem.\nWhat I think may be the problem is the 'Find next occurence' isn't really an action like most others in that it has to be executed in the context of a search. So it isn't handled by the orion keybinding/handling code in the same way. I think these actions/keybindings are hard-coded in the search dialog code that pops out at the top of the window.\nSince they are are hard-coded, rebinding the keys doesn't work.\nThat's my current theory at least. I'll have to take a deeper look.\nKris\n. What you are telling me seems to confirm my theory. I know there is some special handling code for CTRL+K and CTRL+R keys in the 'search dialog'. This code is a bit naughty and hard-codes the keys so I already suspected it won't play nice with key-rebinding support.\n. I agree, a way to clear the console would be nice. \nAlso you have implicitly pointed out a bug in the 'scroll to bottom' logic. It should show all of your text scrolled to the bottom. And indeed it does, but it looks like the horizonal scrollbar at the bottom of the view is covering up the last line of text.\nI.e. the scrolltobottom works ok only if there's no vertical scrollbar.\n. Don't want to do too much work on this console for now. Next round after 0.3 expect it may be reshuffled with the panes coming and all that :-)\nBut for now, I think I can probably muster clearing the console automatically before every exec.\n. Closed by https://github.com/scripted-editor/scripted/commit/60715a7a0ee0cb5f89659ed4078578c7461ee19a\n. Oops commit tagged with wrong issue. This issue is not fixed, reopening. \n. The enter key is handled by triggering a click event with jquery, but the triggered 'fake' click event doesn't have the modifier keys set.\n. I agree, it seems like logical next step to add a place where you can type commands to execute.\nIn terms of UI design, a somewhat open question before we can do this is, what directory does the command execute in? Similarly: do we need some UI widgetry to display and change the working directory? What should this look like? \nFor on-save and exec-keys commands specified in .scripted, the .scripted file specifies the working dir for each command. So we need something similar for commands typed into the textbox.\n. Likely has something to do with the fact that this maps to a 'fake' file. The fake file is known when retrieving file contents via jsdepend api, but not when the editor uses one of the other 'get' urls.\nThat, combined with the fact that the custom getter requrestHandler there seems not to properly capture the exceptions. I'll look into it a bit.\n. The 'No more parents' is an error message printed when the search for a 'global dependencies' html file rejects its final promise.\nI'll have a look at disabling this message. \n. Sounds easy enough, just one thing is a bit 'not so well-defined' here. How do we 'resolve' a string. What base directory do we use?\nIt seems for script tags in html files we should probably use the directory this html file is in as base.\nFor js files it may not be so easy as it can depend on how the file is loaded and how the string is used.\nI'm sure we can do something that works for some cases which is better than not working at all :-)\nE.g. we could do something special for html files and use the project dir for other cases, although it\nmay not be correct in all cases, it may way do what one wants for some cases.\n. Actually, for completeness it should be added that there's a third client of dirwatch: the node-modules-resolver module\nwhich resolves node-modules inside node-modules directories. This uses dirwatch to clear its module cache.\nHowever... this node-modules-resolver module should also no longer be in use since we moved to using the 'enhanced-resolve' library to deal with node moule resolution.\n. Pushed some changes that cleanup some unused bits. I've verified that dirwatch is not loaded/initialized during normal use of the editor. It is still used / initialized in testing code. \nTo make the tests stop hanging, I have switched 'dirwatch' into a 'fake it' mode so it doesn't actually watch for changes. \nThis should make it relatively easy to re-enable sloppy mode in the future should we want to.\n. Subsumed by #136 the line-by-line utility used there also has a mechanims to detect minified files.\n. I put in that 'kill' switch when Chris was working on the windows bat scripts way back when. He was having trouble killing processes reliably on windows. I put that in quickly, but I don't think he ended up using it.\nMaybe it got broken since then. If the commandline scripts don't need it, the kill switch can be removed.\n. This is not limited to exec key bindings, in fact most of the keybindings (actually it's the actions they are bound to) are specific to an editor context.\nSome actions have explicitly been listed as 'global' and can (or should :-) be executable anywhere.\nFor exec keybindings I didn't, since they potentially refer to things like '${file}' which is specific to an editor context.\nPerhaps it would be possible to determine if an exec keybindings should be 'global' if it doesn't make use of ${...} variables that are only defined for editor contexts. I suppose a typical 'build' command is running from project root and so should be ok.\nOr, we could also use the last editor that had focus to provide an 'editor context'.\n. Related issue and discussion about events and such: https://issuetracker.springsource.com/browse/SCRIPTED-260\n. I've pushed a fix that makes all exec keybindings 'global'. If invoked outside an editor, will use the last editor that had focus to provide an editor context.\nFor truly 'global' commands that shouldn't matter, but for commands that use things like '${file}' this will determine the value of '${file}'.\n. So far, we've been holding of on any manual configuration options for the resolver.\nWe know we are probably going to have to add something to do this eventually...\nBut we don't want to fall into the trap of becoming too dependent on requiring manual configuration.\nSo the longer we can hold of.. the better.\nFor your example, perhaps it would be better if we add a test project like yours to our regression tests and try to make it work correctly by discovering / recognizing the project structure.\nThanks for raising the ticket. I'll setup a test project and try to make it work ASAP :-)\n. Debugging now...\nThe reason why we aren't finding the config appears to be a bug in our discovery logic. Our analysis of datamain tag is assuming that it points to a .js file with explicit '.js' extension. If I add the extension then the require('one') resolves correctly.\nSo as a workaround, you can change your index.html file to have this for now:\n<script data-main=\"js/app.js\" src=\"js/lib/require.js\"></script>\nOf course, I will fix the bug so it will accept either 'js/app' or 'js/app.js' and work correctly.\n. I've already got some work towards this in a branch called 'line-by-line'.\nI've got a utility there to iterate through a file line-by-line but it isn't hooked up yet to the actual text searcher.\nhttps://github.com/scripted-editor/scripted/tree/line-by-line\n. Can you try uninstalling scripted first then installing it again.\nnpm uninstall -g scripted\nAlso not sure which version of scripted you are trying to install. If you are trying current dev version from a git clone you can try cleaning out all the 'old crap' from the git clone by doing\ngit clean -fxd\nThen try again (from the root of the git clone directory):\nnpm install -g\n. I've seen that error before. Another Windows user was getting this. I'm trying to find now where I saw it. Somehow the problem got solved for that other user. So maybe that might help.\n. This is where I saw that error before: #178\nUnfortunately it seems like problem got solved for him without really understanding why.\nI think that user is tracking the master branch of our git repo so maybe you can try that instead of the '0.3' version you'd get when just running npm install -g scripted.\nYou probably don't need to install a git client. You can just download a master zip ball from github and try to use that. See the github readme for our project some more information. Let me know if you need more info and whether or not master works for you. I'll try to help you further if it does not.\nKris\n. I'm not sure you why find the file -> web mapping more intuitive than the web -> file mapping. That of course is personal taste.\nIf I look at how you setup static file serving for express it resembles more the pattern where the web path is on the left-hand-side and the corresponding filesystem path is on the right:\napp.use(\"/media\", express.static(__dirname + '/media'));\n  app.use(\"/\", express.static(__dirname+'/main'));\nSo to me that seems more intuitive as it resembles more what I'd do to setup the web server.\n. Quick follow up question. To this:\n\nNow, if you are using config files, much like maven, you don't want to hard code an absolute path, because it may be different for each developer.\n\nI imagine that you could use relative paths as in the examples shown above and those relative paths would be resolved relative to the 'project' dir. \nTo make sure I get this right... That wouldn't work for your case because the files in question aren't even inside of your project folder?\nIf so, perhaps this would work. How we currently get the '.scripted' config file data actually mixes in data from here as well: '~/.scriptedrc/scripted.json'. So it would be possible to add something in that file like so:\nweb: {\n         \"libs\": \"/mylocalfilesystem/jslibs\"\n  }\nThe path mapping for libs would then be implicitly added by default to every .scripted config for this particular user.\nBut it would be overridden if a project provides its own mapping for \"libs\".\nI think this would allow each user to map 'libs' to an absolute path on their local filesystem but those paths don't have to be added to source control.\nSince we already have this config merging thing currently, I think that might mean my proposed solution might actually already work for your use case (if using it together with the config merging to keep user-specific paths out of the project's config).\nCaveat: if one user has multiple projects and each of those projects needs a different absolute path pointed to by the 'libs' folder then this may be a problem. In that case something with user-defined properties, as you suggest, may be required.\n. Duplicate of this one I think #139\n. Marc, I wonder if perhaps your config is simply not being found or parsed correctly for some reason (wrong place, typo etc.).\nTo ascertain whether it is processed ok you can try logging it or examining in chrome debugger at line 34\nin scripted.js\n. I'm just using node's childprocess api to start the process.\nI didn't really add any os-dependent handling to our code. It just passes the string and options the user specifies of to the node api.\nNot sure how node does things under the hood to execute the command string.\nI'll have to dig into it a bit to figure out if we can pass these options automatically when on windows.\n. Hmmm, I think you can already do this:\n\"afterSave\":  {\n       \"**/components/*.js\": \"copy /y /b components\\\\*.js components.js\",\n        \"**/systems/*.js\": \"copy /y /b systems\\\\*.js systems.js\"\n  }\nThe afterSave block is an object and it can have multiple properties.\nI believe that if there's more than one we will try each pattern you have added until one matches.\nDoesn't that do what you want?\n. No problem. And thanks for confirming this does what you want.\n. I googled the error and found this which may be useful information:\nhttp://stackoverflow.com/questions/12784161/is-there-any-node-waf-for-node-js-on-windows\nApparantly more recent version of node (0.8) may no longer provide 'node-waf'.\nA bit strange though that you are getting this error now and didn't get it before... assuming still on the same nodejs version?\nWhen I have had npm weirdness in the past it has sometimes helped to do a 'full clean' like so:\ncd <my-scripted-git-clone>\n git clean -fxd\nThen try running npm install again.\nIts worth a try.\n. Another thing... the text you posted doesn't really indicate a failure as far as I can tell. \nIt seems to just warn of a problem installing an optional dependency. \nnpm WARN optional dep failed, continuing rbytes@0.0.2\nOr am I not looking at the right part of the output?\nKris\n. There is now a simple plugin loader for client-side scripted plugins.\nEssentially, a client-side scripted plugin is an AMD module that gets autoloaded asynchronously by scripted when it starts up. \nThe module will appear to be a module with a name like this: scripted/plugins/<plugin-name>.\nA plugin is a 'first class' citizen in the sense that it is really not any different from any other AMD module in the client-side scripted code. It can 'require' any other AMD module in the scripted and use the APIs on those modules. \nAllthough technically a scripted plugin can load-up any existing client side AMD module with a require call, we don't want to encourage this. Instead the idea is to make specific 'nice to use' apis under 'scripted/api' that will be designed to make writing plugins for various interesting use cases relatively easy.\nA few sample plugins already exist:\n- copyright-plugin: Adds copyright headers on save if it detects the copyright header is missing.\n- trailing-whitespace-pluging: Removes trailing white space on save\n- zen-coding-plugin: Provides 'zen coding' edtitor actions and keybindings\nProvisional apis currently available:\n- 'scripted/api/editor-extensions': \n       - allows creating editor actions across all scripted editor instances\n       - allows registering 'preSave' transform functions that modify editor contents prior to save.\n- 'scripted/api/keybinder': allows binding keystrokes to actions\nThere's much more work to do in cleaning up and fleshing out the loader architecture and the apis but we'll deal with those under separately tracked issues.\n. I thinks that's all tidied up now by Andrew.\n. The batch scripts are now all replaced with node scripts (i.e all written in javascript). \nCould you try out the latest from head and see if symlinks are still a problem in the new scripts (I believe that they shouldn't be but won't close this bug until its confirmed.\nKris\n. Thanks for confirming that it works for you now with master. Unfortunately the npm packages will probably not be updated until 0.4 is released.\n. Actually implemented a while back. Closing. There's already some documentation on the wiki on how to configure if the defaults aren't good enough.\nSee: https://github.com/scripted-editor/scripted/wiki/Configuration near the bottom.\n. Not sure what has changed, but it doesn't seem to block anymore. \n. Problem seems to be the code that clear the old contents from exec-console. I use 'remove' method on dom nodes which doesn't seem to exist in FF.\n. Not 'my area' of the code. But Andrew's on leave for a bit so I'll take a look. \n. I'll just take a peek anyway. If its not a hard thing to fix we may still get it into 0.4 release.\n. I've got a fix. I just changed the regexp to find the 'start' of the trigger to include $.\n. Of course that only fixes the 'trigger' issue... not the ${1:GET|POST|PUT|DELETE} support.\n. Evidently, the outline view can't really populate when it can't get a parse tree, but the errors should be handled more gracefully. \n. On Ubuntu 10.04. I tried installing Chromium from the 'Multiverse' repos.\nI wasn't able to reproduce the problem shown in the picture. Could be that is because I seem to be on Chromium 24 already not Chromium 18.\nOut of curiosity, a while back I pointed an iPad at scripted and I did see something a lot like that image. I wasn't too worried then because I can hardly imagine truly using Scripted on an iPad. The UI is too much keyboard shortcut driven for that to be practical.\nTo gauge the seriousness of this bug report.... Why do you need to use Chromium 18? I.e. how much should we care it doesn't work on Chromium 18 given that it does seem to work on more recent versions of Chromium.\nJust trying to get an idea of how pressing this problem is for you. If this is really important to you I'll try and dig up a Chromium 18 somehow and continue to try and reproduce/fix.\nKris\n. Wiki updated.\n. How similar is goog.require to standard AMD require? If it is as simple as just looking for a different name then it would be realtively easy generalize current implementation to recognize goog.require.\nBut if the algorithms for configuring and resolving differ then it may be more difficult.\nAlso the dependency resolution is not really plugable at the moment. It is pretty much hard coded to support amd/requirejs and commonjs/node.\nMaking it plugable would be desirable of course, but probably take quite a bit more engineering/coding work.\n. Sorry for not ansering earlier. It's just not an easy question :-)\nUnfortunately I don't think its as simple as just computing a list of files\nto be processed.\nThe harder question is how to process them and how to use the information\nderived from them.\nI think that really depends on the mechanics of your particular module\nsystem.\nScripted does have some support for 'global' dependencies. I.e. when people\njust load\nup files via script tags rather than via require / exports mechanism.\nI.e. in one fille you write:\nfunction myGlobalFunction() {... }\nThen in another file you write\nvar result = myGlobalFunction()\nIf all you wanted is this kind of support, then it may be possible to hack\nsomething up that just\nreads / processes all the other files for global definitions.\nIs that what you wanted? Or does the google module system actually have\nsome specific\nmechanim/syntax for importing / exporting things rather than just use\nglobal defines and global\nvariables?\nKris\nOn Fri, May 24, 2013 at 12:08 PM, chris marx notifications@github.comwrote:\n\nOn the configuration page (\nhttps://github.com/scripted-editor/scripted/wiki/Configuration)\nI see an option for \"search\" -\nsearch: {\nexclude: [\n'/require.js',\n'/*.min.js'\n],.....\nBut it's all about excluding or deemphasizing, could this be a location\nthat is used to configure files that should get processed for\ncontent-assist?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/279#issuecomment-18423975\n.\n. No problem. There's no rush. Let me know if you have questions about the server side code.\n. I remember hitting a problem similar to this. Don't recall the details... but it was a problem with bower and how it uses folders when running in -g mode. There was some permission problem because trying to install stuff into global folders owned by root. Even running as 'sudo' didn't seem to work right in some cases.\n\nI never really found a good solution to make the -g install option work nicely. \nMy workaround for the problem was to not install scripted globally with -g but instead just create a node_modules under under my users home dir. Then install scripted into that dir:\ncd ~\nmkdir node_modules\nnpm install scripted\nThis will install scripted into your ~/node_modules dir. The start scripts will be under ~/node_modules/bin. So add this bin dir to your path.\nNot sure your case is the same as mine, but this is worth a try.\nKris\n. Oh I remember something else about this. The bower cache was involved as well. The problem I remember was when running via sudo it would create cached data inside your home directory that ended up being owned by root. So you may need to sudo and delete the bower cache before the above workaround will work.\n. At the moment scripted explicitly limits access from localhost. This restriction is easy to remove by editing the source code and then it should be possible to access it remotely if you paste in the right url on your remote web browser.\nEdit here:\nhttps://github.com/scripted-editor/scripted/blob/master/server/server.js#L80\nBe warned however you are exposing yourself to some serious attack vectors. Scripted server exposes API that allows clients connecting to read/delete all data on your server's hard-drive or execute shell commands.\nThis is precisely why if only accepts local host connections.\nI certainly wouldn't want to do this on a mission critical server. \nIf its a toy server acceslble only on a LAN you might chance it. It's your call.\n. I closed the issue because the question has been answered (I think :-). \nNothing left to do.\n. That is very odd. See:\nhttps://github.com/jrburke/requirejs/releases/tag/2.1.4\n. Actually those first few ones I don't think are test failures. These are errors that happen during 'normal' operation (resolving / looking for stuff scipted will look for files in several places and results in a exception that is handled when these don't exist. The exceptions are getting logged to the console which is confusing, but the tests themselves are actually passing.\nThe QUnit error I have seen before and that is a real failure there. It has something to do with how the client side tests are running. Unfortunately I'm not that familiar with the client-side code/tests.\nLooks like you are trying to get to the bottom of that. If you manage it please let me know what changes you made to get client-side tests running again.\n. I pulled those changes but still getting the same error that 'QUnit' isn't defined.\n. I'm confused now. I tried to go back to older commits to find where this actually broke.\nThe tests passing at 'Upgrade to doctrine 0.0.4'.\nThen I went forward one commit at a time and tried to run the tests again.\nFinally... all tests are passing on the current dev branch with none of your fixes in.\nI don't have time right now to look into it further. I'm guessing probably something todo with bower component being in wrong/different place.\nI didn't actually run bower to install all the client-side modules.\nI'm guessing me and you are probably using different versions of QUnit somehow.\n. I've merged the PR into 'dev' branch. Github is not auto closing it because it looks like it wants to see that PR merged into master. So I'm closing it manually.\n. Although the list command you gave me shows same version of QUnit it must actually be a different one somehow.\nI git cleaned and reran npm install and tests are all passing for me with your path fixes in the mix.\nSo I merged in the pull request.\n. Build passed all tests on travis:\nhttps://travis-ci.org/scripted-editor/scripted/builds/18372736\n. I have seen this error before and had problems running npm install via '-g'. Check the owner and read/write access for your bower cache directory. \nThe workaround I had found working for me was to not use -g option but install scripted into my own ~/node_modules instead. Like this:\ncd ~\n     mkdir node_modules\n     npm install https://github.com/scripted-editor/scripted/tarball/master\nThen you also have to add the ~/node_modules/bin directory to your path to be able to run scr commands from the commandline.\nI beleave this is a bug in bower and it is most likely fixed in a later version of bower. But you should be able to use the workaround until we can update the bower version that scripted uses.\n. I recently fixed this problem in the dev branch. Unfortunately we don't have time / resources now to do a proper release any time soon. But you can install from the dev branch in a similar way as the master branch install instructions. Just replace the word 'master' with 'dev' in the tarbal link:\nsudo npm install -g https://github.com/scripted-editor/scripted/tarball/dev\nI've been using the dev branch install recently and it looks in good shape.\n. There's a fix for the problem in the 'dev' branch. It uses a version of 'when' that's probably closer to what it was when the 'noisy-deferred' dependency was inadvertently inserted. Using when 'master' is not much better than using the noisy deferred version.\nI got all the tests passing on the dev branch so I suggest using it instead of master branch.\n. Using https://github.com/cujojs/when/archive/master.tar.gz is a bad idea.\nI did a proper fix in the dev branch.\n. Why was this changed?\n. Why was this changed?\nIt seems odd you'd have to make changes to a test suite unrelated to your changes.\n. The filesystem should be passed in as an argument to the configure function. This is to keep the door open on using something different than direct nodefs.\nIf not too hard this pattern should be adhered to. \nIn this case, I beleave that the context where 'closure-resolver' is imported should already have an instance of filesystem available. That instance should probably be passed in instead of creating a new instance here.\nBTW: we already have an implementation of one alternate 'fs' that use a github repo as a read-only file system.\nThe code written here means that closure resolver will not work on the read-only github-fs.\n. Further to clarify. The only filesystem instance created in a running server process should be the one created at line 25 in scripted.js. The instance is passed down from there to everyone else as a parameter of the 'configure' function.\nhttps://github.com/scripted-editor/scripted/blob/master/commands/scripted.js#L25\n. The tests should create a 'sandboxed' filesystem instance something like so:\nvar sandbox = require(\"..../filesystem.js\").withBaseDir(<path to test file system contents>);\nOther apis (the ones being tested) should be 'configured' by passing in the sandbox filesystem. E.g like so\nvar api = require('../../server/jsdepend/amd-resolver').configure(sandbox);\nSee amd-resolver-test for example. It may be a little confusing there that 'filesystem' is consistently called 'configuration'.\nReally most places where the variable or parameter name 'configuration' or 'conf' is used, what is being passed in or \nstored is in fact a filesystem instance. Sometimes with some extra properties added on top. The names should be\nchanged... but you know how that goes :-)\n. Calls to apis of the tested modules should never need to pass in paths composed by prepending __basedir.\nThis is a red-flag that the nodefs is being used directly. (Since files like __basedir+\"..more stuf...\") don't or shouldn't exist in the sandbox.\n. Here also an absolute path on the nodefs (conf.rootDir) is being passed to an api under test.\nThat seems to indicate this api implementation is working in terms of references to files interpreted outside the 'sandbox' (i.e. doing direct nodefs access).\n. ",
    "mariusGundersen": "I can't give you the project, since it is private. But I can give you the config file, which we have in a separate js file. This file is project wide and is used for require on all the pages. We don't use the data-main way of loading a module, but have another way to do it. This means that there is no config in the HTML file.\nThis is the config file we use:\nrequire.config({\n    baseUrl: \"/Features\",\n    paths: {\n        concepts: '/Content/scripts/concepts',\n        administration: '/Areas/Administration/Features',\n        async: '/Content/scripts/libs/async'\n    },\n    urlArgs: \"cacheKey=\"+($('[data-cacheKey]').attr(\"data-cacheKey\") || \"noKeyFound\")\n});\nThe last line adds a cache busting value to the required files, which is the current build of the project. \n. ",
    "cnicodeme": "I'm in the same problem here, and I can give you specifics regarding the way I load require js.\nI'm working with PlayFramework for the backend, but I'm sure it would be the same for any other framework in any language. When I load requireJs, I use a generated route, based on the environment : \n<script id=\"require-js-loader\" data-main=\"@{if(play.api.Mode.Prod == play.api.Play.maybeApplication.map(_.mode).getOrElse(play.api.Mode.Dev)) Template.staticUrl(\"/js-min/app\") else Template.staticUrl(\"/js/app\")}\" data-base-url=\"@{if(play.api.Mode.Prod == play.api.Play.maybeApplication.map(_.mode).getOrElse(play.api.Mode.Dev)) Template.staticUrl(\"/js-min/app/\") else Template.staticUrl(\"/js/app/\")}\" src=\"@Template.staticUrl(\"/assets/requirejs-2.1.8/requirejs.min.js\")\"></script>\nTry to parse that one ;)\nMoreover, my project is oddly structured, based on how Play! handles files : \n1. I have a /public/ folder, containing assets/ and other files (images, etc). This assets folder contains all libraries I use in my project, like requirejs, jquery, bootstrap, handlebars, etc. I put them here because /public/ is considered as static content.\n2. I have a /app/assets/js/. This is the main application. It's located here because once I run Play!Framework, it will compile all those files and put them in the /public/js/ folder and /public/js-min folder (for minified version, hence the odd data-main tag described up here). (The 'js' folder name here is the same as in the app/assets/* folder\nTo be clear : \n/\n| - app/\n| - app/assets\n| - app/assets/js/\n| - app/assets/js/app.js <- main application\n| - app/assets/js/app <- All the modules called via RequireJs\n| - public/\n| - public/assets/ <- Libraries used.\nHere's a look at my app.js config file : \n``` javascript\nrequirejs.config({\n  //By default load any module IDs from js/app\n  'baseUrl': document.getElementById('require-js-loader').getAttribute('data-base-url'),\n//except, if the module ID starts with \"app\",\n  //load it from the js/app directory. paths\n  //config is relative to the baseUrl, and\n  //never includes a \".js\" extension since\n  //the paths config could be for a directory.\n  'paths': {\n    'jQuery':     '../../assets/jquery-2.0.3/jquery.min',\n    'handlebars':  '../../assets/handlebars-1.0.0/handlebars',\n    'bootstrap':  '../../assets/bootstrap-3.0.0-rc1/js/bootstrap.min',\n    'plugins':    '../../assets/jquery.plugins',\n    'underscore': '../../assets/underscore-1.5.1/underscore.min',\n    'backbone':   '../../assets/backbone-1.0.0/backbone.min',\n    'JsonView':   '../../assets/jsonview/jsonview',\n    'moment':   '../../assets/moment-2.1.0/moment.min',\n    'highlight': '../../assets/highlight-7.3/js/highlight.min'\n  },\n  'shim': {\n    'jQuery': {\n      'exports': '$'\n    },\n    'bootstrap': {\n      'deps': ['jQuery']\n    },\n    'plugins': {\n      'deps': ['jQuery']\n    },\n    'underscore': {\n      'exports': '_'\n    },\n    'backbone': {\n      'deps': ['underscore', 'jQuery'],\n      'exports': 'Backbone'\n    }\n  }\n});\nvar modules = [];\nmodules.push('jQuery');\n// Logic part\nmodules.push('router');\n// At last, non-AMD modules\nmodules.push('backbone');\nmodules.push('bootstrap');\nmodules.push('plugins');\nmodules.push('handlebars');\nmodules.push('utils/handlebars-helpers');\n// Start the main app logic.\nrequirejs(modules, function (jQuery, Router) { // All the work done here });\n```\nI think it would be more efficient to indicate the location of the app.js in the .scripted config file.\nNow my configuration may gives you a lot of headaches : the paths parameter in my app.js gives wrong file paths (since they are moved to /public/ before being executed) leading Scripted to consider those assets as invalid paths. I don't know how you would fix that, but I know it's kind of specific (affects Play!Framework dev users at least), but a simple workaround for me would be to put the /public/assets/ folder in the /app/assets/ to make path corrects.\nI hope my comment helped you, I'd really enjoy using Scripted and can't wait to have a workaround for the require config file dependency !\nGood luck :)\n. If you don't want to add a config entry to explicit indicate where the requirejs configuration file is, and where to find modules, you can eventually do this : \nInstead of searching data-main in any html file, search require(js).config in all the .js files, which should lead to the requirejs ... configuration ;)\nAnd regarding the possible invalid paths (like I indicated for me before), you can do this in this order : \n1. Search in the correct path based on the RequireJs config\n2. If not found, find the similar path (like \"some/thing/views/app\") starting from the root of the project, and returning \"true\" only if one instance of that file/folder is found\nDoing so, it would keep Scripted \"intelligent guessing\" while working with many more app structures :)\n. ",
    "nebhale": "Sounds good.  Seems like jshint is a better way to go anyway, maybe it should be made the default?\n. @scothis Do you have any thoughts on restify versus express?  Is there a particular reason you chose express or was it more just familiarity?\n. OK, let me clarify things a little.  When run through SCR against those files, it appears to return the wrong answers.  Let me see if I can put together an example.\n. > It seems that we could make things work for you by changing the default extension for 'uknown' plugins to be the empty string instead of '.js'. Perhaps that is a more logical default than adding '.js'.\n\nThe choice I made their of using \"add '.js' \" as the default instead of the empty string was really quite arbitrary, so I don't mind changing that if that will make things work better for you.\n\nI'd recommend not changing this default, and perhaps even expanding it a bit (which I realize might make things worse for our current problem).  In essence I'd recommend that Scripted stay as close to the module loaders' default behaviors as possible.  In the case where no extension is specified, these are:\n- Node:  .js, .json, .node\n- Require: .js\n- Curl: .js\nIf we start behaving differently to these expectations, it's quite likely that the code you'd write to satisfy Scripted (i.e. always adding the extension) wouldn't work for your production environment.  Beyond that, I'm not sure how helpful I can be as every scenario I imagine seems to involve instantiating the plugin to ask it a question and that instantiation probably involves instantiating the entire application.\n. ",
    "sindresorhus": "JSHint should be the default one. It's more actively developed, larger user-base, and more configurable, and generally just better.\n. ",
    "scothis": "@nebhale ignorance and familiarity explain it.  Looking at restify, it looks just like express.  The only bit that's interesting is the content negotiation, but even then it's not full content negotiation like we would expect.  I don't see the ability to route by acceptable mime types (that would sell me in a second).  Content negotiation in restify appears limited to serializing an entity based on the content-type header.\nFor now I'd pass, but it should be easy to swap in should the need arise.\n. @aclement as far as I can tell, yes.  The tests @aeisenberg pointed me at pass.\nI haven't started to refactor any of the URLs yet, this is just putting a foundation in place.\n. @kdvolder it's not \"by accident\" that it works.  With the editor.html view now rendered at multiple depths in the URL path, any relative URLs will break without the base href.  Absolute URLs are unaffected.\nYou are correct that AMD module resolution is unaffected.  However, I did run into an issue with loading the main script in FF as a absolute URL.  It's probably just a bug in requirejs, but the base href works around it.\n. Take a look at outline instead of border.  The border is included in the with of an element, while outline extends beyond.\n. All websocket connections would need to be reestablished after the server is killed.  You probably didn't notice before as the sockets were more transient.\nKilling the server is an anti-pattern that should be phased out.  The root issues that cause the server to get stuck/crash need to be fixed.\n. Yep, SockJS doesn't provide a recovery mechanism because WebSockets doesn't provide one either. You're expected to bring your own to the table.\n. -1 for shift-[0-9]-click\nWhen asking to open a file, if it's already open just focus it, otherwise open it.  I can't imagine a case where I would want to explicitly target a particular side pannel.  A user should be able to reorder and close side panels as needed.\n. The node_modules files are also now redundant.\n. Perhaps this should not be accessible via http\n. try this instead:\ncd client && bower install\n. My hunch is that the key events are being captured on the editor DOM element.  A two stage approach should be employed.  Most keybinding need to be captured within the editor pane as they are specific to text input/manipulation.  Exec keybinding are not editor specific and should be captured at the document level.\n. Rebase/merge from master.  That issue was fixed last week.\n. never mind, it already does this...\n. When refreshing the page, there's a 50-50 chance the last few lines will be accessible.\n. I'm having trouble reproducing after resetting the zoom yesterday.  I have still seen it, so I'm not sure it's 'fixed'\n. I didn't think I was zoomed...\nAfter forcing the browser back to 'Actual Size', despite not seeing an visible change, I can't reproduce.\n. Correct, if I was trying to load the module, the arg would be an array instead of a string.\n. The error looks to be coming from bower.  Node 0.10 added the additional assertion that args to path.join must be strings instead of being coerced to strings.\nI know this is a lame response, but for now you can fall back to Node 0.8 to install scripted.\n. You can also install from master, which doesn't suffer from this issue.\n. Yes, it's necessary.  Without it we need to use an absolute URL for the data-main attribute on the requirejs script tag.  That absolute URL breaks FF.\nAll of the other paths are absolute anyway, so they are unaffected.\n. when appears to be unused\n. ",
    "asampal": "Two issues that I see here, Andy. I should mention, though, that I only partially got the npm install to work (node process started, but browser reports problem with the GET request (Cannot GET /editor/C:/Users/adi/AppData/Roaming/npm/node_modules/scripted/foo.js).\nFirst problem is that the .cmd files that are created by npm and placed under %userprofile%\\appdata\\roaming\\npm (this directory being on the path as a result of installing node), contain the following content (which doesn't work):\n:: Created by npm, please don't edit manually.\n@IF EXIST \"%~dp0\\/bin/bash.exe\" (\n  \"%~dp0\\/bin/bash.exe\"  \"%~dp0\\node_modules\\scripted\\bin\\scr\" %\n) ELSE (\n  /bin/bash  \"%~dp0\\node_modules\\scripted\\bin\\scr\" %\n)\nbash.exe is not going to be found at either of those locations, if it is to be found at all, under a typical Windows install. Better to just use a simple 'call' to invoke the batch files that launch Scripted under the /bin.\nSecond, issue #4, mentioned a problem of launching Scripted under Windows. I've found this to be a problem for me as well. Looking into it, if the current directory isn't the directory where Scripted is installed, launching fails and the browser page just says:\nFirefox can't establish a connection to the server at localhost:7261\nLooking with process explorer, I can see the node process starting, but, after a couple of seconds or so, shutting down. I'm not sure how you managed to have it working, as per your comment in that issue.\nThe fix I would suggest, as opposed to the proposed fix in that pull request, would be to change the current directory right before invoking node in scr(ipted).bat, as below:\n...\ncd %rootdir% <-- add this\nstart /MIN cmd /c node %rootdir%\\server\\scripted.js^>^>scripted.log\nI don't know why the app would fail if this is not done since, looking at the js file, all the required deps seem properly prefixed. BTW, this second problem is also there when trying to launch using the latest github source.\nWith the current dir change above, Scripted correctly starts from anywhere though there is still an issue opening a file depending on what sort of path you give it. I'll open another issue detailing this.\nI'm running Windows 7 64 bit, node 0.8.14.\n. I would think it should be possible to generate the cmd files without a bash prefix. Take CoffeeScript, for example - they don't have this in theirs.\n. That did it, thanks. Don't know why I didn't try a local npm install, but it might be worth adding this to readme.md for others.\n. I don't think the dependencies should be included. Maybe you could just emphasize the \"npm install\" a bit more, as it doesn't really stand out and it seems some people still miss it.\n. ",
    "tommytcchan": "Committer ID: 37520121113092140\n. ",
    "cawoodm": "The solution would likely be on line 36 of scr.bat by adding \" quotes:\nstart /MIN cmd /c node \"%rootdir%\\server\\scripted.js\"^>^>scripted.log\nUnrelated tip: create a scr.cmd file in your C:\\windows\\system32 with these contents:\nC:\\path_to_scripted\\bin\\scr.bat %*\nThis saves you adding C:\\path_to_scripted\\bin to your path.\n. I would also like to see:\n1) A way to overwrite a binding in one click without having to create a new one then go in and delete the old one. A \"Overwrite\" button would do or IMO, this should be the default behaviour of the \"Bind\" button as you hardly ever want to have 2 bindings.\n2) A view of which bindings are default vs. overridden. (* or italic or something)\n3) Ability to bind stuff defined in Chrom (Ctrl+L works but F3 doesn't)\n4) Help (list of bindings) should disappear when it loses focus\n. Yes, the action was \"Find Next Occurance\" which only works if the hotkey is pressed inside the Find dialog. However, whilst Ctrl+K works, F3 (bound to Find Next) inside the dialog doesn't.\n. Just noticed that this feature is available in Sublime Text 2:\n\"folder_exclude_patterns\": [\".svn\", \".git\", ...],\n    \"file_exclude_patterns\": [\"*.pyc\", \"*.pyo\", \"*.exe\", ...],\nso, in the name of plagiarism: gimme!\n. Si, is good if is consistent and is a documented.\n. I stripped the file down to {} and it still failed until I removed the BOM. However this was the original file:\n``` javascript\n{\n\"ui\": { \n    \"font\": \"Courier New\"\n},\n\n\"editor\": {\n    \"expandtab\": true,\n    \"tabsize\": 2\n},\n\n\"jshint\" : {\n    \"global\" : [\"console\", \"define\", \"exports\", \"module\", \"process\", \"__dirname\", \"require\", \"$\", \"window\"]\n}\n\n}\n``\n. http://en.wikipedia.org/wiki/Byte_order_mark\nIt's basically a FEFF byte sequence at the start of a unicode text file which tells the interpreter in which order the bytes of multi-byte characters appear in a byte stream. Unicode is real important to those working in multi-lingual environments. True, your configuration file probably doesn't need to be unicode but many people have switched to unicode on principle and all new files we make are UTF-8.\n. Andrew/Andy. Could you change line 38 of scr.bat to:start \"\" %SCRBROWSER% \"http://localhost:7261/editor/%patharg%\"`\nThat way users can define SCRBROWSER themselves. They just do:\nSET SCRBROWSER=\"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"\n. OK, I just did my first ever fork and it's made a new issue. Sorry if this is too forward or undesired...\nhttps://github.com/scripted-editor/scripted/issues/74\n. So you guys have 2 issue lists: SpringSource and GitHub. Any plans to merge?\nIt seems this issue is the same as https://issuetracker.springsource.com/browse/SCRIPTED-197\n. Cool, I thought I'd read something about this feature already and I just wasn't seeing it.\n. Well Ctrl+L is a Chrome hotkey which can be overridden by scripted so I tried this out:\njavascript\ndocument.onkeydown = function(event){\n    event.preventDefault();\n    console.log('Key: '+event.keyCode);\n    if (event.keyCode == 114) console.log(\"You pressed F3 and Chrome doesn't know!\");\n    return false; \n}\nand it seeems to work: Chrome doesn't open it's Find dialog when you press F3. Works in FF too.\n. Often times one searches for something, does an edit then presses the \"Find Next\" hotkey to continue searching. This doesn't work with the standard binding Ctrl+K either which only seems to work inside the search dialog. Strangely F3 doesn't even work inside the search dialog so there is a) a need to support this binding in the editor and b) some inconsistent behaviour.\n. Weird, it's not doing it now. Previously it would require 4 clicks to return to where you were in a 3-result set.\n. Why? If you're quick you just type past the suggestions. They should be non-intrusive.\n. Quickfix Idea: It's trivial to frame Scripted and my application in a left/right frameset. I can do this by myself:\n<frameset cols=\"50%,50%\">\n        <frame name=\"scripted\" src=\"http://localhost:7261/editor/...\"></frame>\n        <frame name=\"myframe\" src=\"http://localhost/myapp/index.html\"></frame>\n</frameset>\nI just need Scripted to call window.top.frames[1].document.location.reload(); whenever I save in Scripted. To this end we should make \"cmdJS\" commands possible as an alternative to console/OS commands in \"exec\".\n\"exec\": {\n        \"afterSave\": {\n            \"*.*\": {\n                        \"cmdJS\" : \"window.top.frames[1].document.location.reload();\"\n                }\n        }\n}\n\n. Actually, Ctrl+Space in an html file does nothing at all which is strange given the completion templates are there.\n. btw. I'm getting \"Error finding the completions directory.\" which sounds a likely source of error...\n. server\\templates\\completions.js line 61 (cb(null)) is where we are at...\nA console.log(this.completionsFolders) reveals\n[ 'undefined/.scriptedrc/', 'C:\\\\Users\\\\me\\\\Google Drive\\\\Work\\\\completions/' ]\nWindows issue for sure but there are 2 issues:\n1. process.env.HOME is not defined on windows it's HOMEPATH\n2. completionFolders[1] (path.resolve('../completions') + '/') is totally incorrect\nYou might want to try this require('path').dirname(require.main.filename) to get the path to scripted. See the discussion here: http://stackoverflow.com/questions/3133243/how-to-get-path-to-current-script-with-node-js/7352912#7352912\n. Now we're cookin' with gas Andrew - code completion now works on Windows - congratulations!\n:+1:\n. Some final comments:\n1. When I type in \"fun\" it auto-completes to \"function\" although there is no such trigger in any of my completion files. I assume that Scripted just \"knows\" about basic JavaScript keywords like function and if. This is cool though the downside is you can't name your templates \"fun\" and expect Ctrl+Space -> Enter to get the right one. Maybe we should prioritize templates over keywords in the code-completion dropdown.\n2. The code-base seems to have too many places where the root path is evaluated. This should be centralised so each component can call getScriptedPath() or getUserPath() and pass a folder or filename and have it resolved.\n3. There also seem to be a lot of '/'s in use which is platform specific but seems to work...mostly on Windows but I am seeing weird // or /\\ paths. Best use path.resolve or the centralized functions I mentioned.\n. Thanks!\n. Okey Dokey.\n. I mean in general, in any file. But you can try it inside a .html file in a <script> tag - it don't work.\nI also wonder that there are 2 hotkeys for such similar behaviour (F8 and Ctrl+click).\n. Example, 3rd party loader.\n\nExample HTML Script Tag.\n\nAs I say, Scripted should just look at the current string and resolve() it and open it if it exists.\n. It should be generic and language agnostic and even work in .txt or .md files.\nIn 99% of the cases (in my experience) resolution is relative to the file being viewed. Indeed it should work as require('./module') works today.\n1. Identify the string at the cursor\n2. Call node's path.resolve based on the current dir of the file being viewed\n3. See if a file exists\n4. Open if it does\n5. Ignore (or msg in bottom right status bar) if it doesn't\nLater it could be enhanced to support /paths/like/this and resolve them relative to the project root, a pre-defined folder or the OS root.\n. Gimme gimme.\n. I think it was all and any hover tooltips but today it's not flickering any more.\nMy aside was a question about displaying the JSDoc description in the tooltip instead of just the @ stuff.\n. Yep, still seeing it occasionally -> Chrome 24, nothing fancy. It could be a browser problem though.\n. Also, when you swap (Ctrl+Shift+S) Scripted warns about unsaved changes but they are actually not lost.\n. In that case I would not be a fan of Shift+digit+click but would suggest for your consideration the right-click context menu not least because...\n...I'd still like to be able to open a file in my browser. So there would then be a case for right-clicking on a project file and saying \"View in Browser\". There would have to be some prefix which mapped the filename to a URL so maybe a .scripted setting:\n\"previewURL\": \"http://localhost/work/$filename\"\n. @aclement, the play button is a cool feature - I don't need it as I have mongoose running all the time. I did think that \"Play\" should not only start a server but actually run the application* as it does in other IDEs like Visual Studio etc. And that get's back to my request above which I may have forgotten to place.\n- Run the application means something different to node developers and to web developers. To webbies we want a browser to launch with a fixed URL or a base URL + our relative path.\n. One intuitive way to target a panel would be drag and drop but I think it's an edge case really. Not sure it's worth it to have > 2 panels...\n. Trust me - it's awesome:\n\n. Ho ho ho!\nI have an update/addition. If you run exec in a subfolder (foo/) it seems to remain in the projectDir so you need the subpath foo/db.js.\nShould we adapt my code above or add a new ${filenamer} (filename __r__elative):\njavascript\ndef(\"${filenamer}\", function() {\n    var p = editor.getFilePath();\n    return p.substring((window.fsroot || getDir()).length+1);\n});\n. OK, I went with:\n$fileName -> hello.js\n$fileBase -> hello\n$filePath -> subdir/hello.js\n. @aeisenberg can you merge my https://github.com/cawoodm/scripted/commit/dfbbd33fbabe0fcc034c8dc67e4063efcfc8c98b changes? \n. Nice! +1\n. Am I only one that sees home take you to line 1 (instead of column 1) when you press it twice and have \"Toggle Wrap Mode\" switched on?\n. Home also doesn't quite work when selecting text (Shift+Home goes to first char and not first non-whitespace char).\n. I'm getting a 404 on for /components/zen/javascript/underscore.js on the latest master branch.\nFailed to load resource: the server responded with a status of 404 (Not Found) http://localhost:7261/components/zen/javascript/underscore.js\nThe whole components/ folder is missing I would say - but the author knew that it was \"bad bad bad\"\n<!-- bad bad bad!  Should not load underscore here -->\n<script src=\"components/zen/javascript/underscore.js\"></script>\n. Just had the same issue. I guess that's why the call the edge \"bleeding\".\n. Oops, a dup of https://github.com/scripted-editor/scripted/issues/121\n. \nJust read that you switched to scripted.json - that's a good move but here's my scripted.json and the behaviour above is the same:\n```\n{\n    \"jshint\": {\n        \"global\": [\n            \"window\",\"console\", \"$\", \"requirejs\", \"require\", \"define\"\n        ],\n        \"options\": {\n            \"browser\"       : true,\n            \"jquery\"        : true\n        }\n    },\n\"ui\": {\n    \"font\":\"Consolas, Lucida Console, Courier New\",\n    \"font_size\":14\n},\n\n\"editor\": { \"expandtab\": true, \"tabsize\": 2 },\n\n\"formatter\": {\n    \"js\": {\n      \"indent_size\": 2\n    }\n},\n\n\"lint\" : {\n    //The directories to exclude while running jslint/jshint\n    exclude_dirs : 'node_modules',\n }\n\n}\n``\n. I didconsole.log(dotScripted);and I can see the \"window\" global but as you can see it don't work:\n![jshint](https://f.cloud.github.com/assets/498834/108230/83a23042-6a46-11e2-9fb3-f13a313b4168.png)\n. For me personally it makes sense to keep searching up and then, if nothing is found, use the home directory and then fall back to the master. I can't see anyone having a problem with this because if they have arranged their projects in a directory hierarchy, they've done so for a reason. To me it sounds like a great feature.\n. But it's not a given that sharing a project means everyone experiences the same thing. Each user may have a different.scripted(orscripted.json) in their user folder, they have different templates. The whole idea of a scripted.json is that I can control things at a global level. Hierarchical searching upwards for.scripted` takes this idea further but, I hope, not onto absurdity.\nMy situation is a myriad of small hobby projects all with pretty much the same settings. But I could easily imagine a commercial developer separating a single application into separate projects but all sharing the same settings.\nI won't push it further, I just thought I'd read that scripted searches upwards and that doesn't make much sense to  me from inside subfolders in the same project.\n. Aye it does. I do apologise for troubling ye!\n. I'm on master but weirdly this problem stopped manifesting itself shortly after I posted and it's been fine all day. I'm gonna put it down to cosmic rays.\nSchweet new dark theme by the bye!\n. OK today everything looks different. Could be because I re-installed msysgit or because you guys changed something in master (I see that bower is now used!).\nSo, scripted now installed and I can get the UI up but my scripts aren't loading. I guess this is a separate issue though.\n. Just did and it helped not a bit. I assume I don't have to do -g?\n. Oooh, ooh! I clicked through the new icons (top left) and \"Toggle Side Panel\" did it for me. Not sure why one would want to toggle the whole editor though nor why it's hidden by default.\nAnyhoo. Now, if I close the subeditor I get a blank screen again and also the left (main) editor is a bit short.\n\nLiving on the edge...\n. OK, noticed the editor was at the bottom of the screen. Resizing the left navigation slightly smaller brings it up. It could be that you guys need to adjust the css by a pixel or two to get things to float correctly.\n. Try at a zoom level of 110%\nhttp://screencast.com/t/AUkU2Z9f\n. It seems zooming is not a good idea in general and the editor gets confused about what line you're on when you, say, double click a word it will select the line above at zoom 90%.\n. OK the original bug is reproducible at a zoom of 90%, 110% and 150% in Chrome 24 under Windows z (1024x768).\n. Looking like it's fixed in the latest build. And I'm DIGGING the new Toggle Navigation button :+1: \n. OK, I think I'm gonna invest some time in re-writing the library to suit scripted. I so want to be able to do this:\nhttp://vimeo.com/36579366 (see esp 6:00)\nor\nhttp://livecoding.io/3419309\n. With all due respect, I suspect it happened accidentally because JavaScript does case sensitive string comparisons by default :-) I do still think that good searches are case insensitive by default though I'll grant you that when searching for very short identifiers it can be good to specify case. In such cases however you probably need the \"Whole Word\" option as well so it's a question of how far you want to go on this. For now I'd just like to see s.toUpperCase().indexOf(f) or a /i on the RegExp.\n. ",
    "xseignard": "Hello,\nAfter pulling the master branch, everything is ok now.\nThanks for your great work!\n. If I re-add the hashbang line #!/bin/bash, I can run the scr command from zsh.\nBut as far I understand, the hashbang messes things with npm under windows.\nSo what can be done?\nRegards\n. #120 will hopefully change that issue.\n. I'm using Chromium 18 because it's the version available from the default ubuntu repos (for 12.04). I added the following repo: https://launchpad.net/~a-v-shkop/+archive/chromium-dev and everything is ok now. Thanks!\nEdit: after checking on another pc, i don't now why i still was on chromium18. sorry for this false alert :s\n. ",
    "nierajsingh": "Issue 2 above has been fixed and pushed to master. Issue 1 appears to be a firefox problem, as it works fine in chrome.\n. Fix pushed for issue 1 above. When right click/release, the menu now stays open until further input is received from the user. \n. Fix pushed to master.\n. Pushed initial changes in navigator where span element creation has been replaced with jquery, and expand onclick handler is no longer using dojo hitch. \n. Pushed remaining dojo-to-jquery changes in the navigator to dojoless branch. All dojo usage is now removed from navigator.\n. Pushed fix such that context menu now closes when escape key is pressed.\n. Pushed fix such that if there is not enough remaining space to show the context menu to the immediate bottom of the mouse click event, the context menu will show to the immediate top of the click location. Now the context menu should be visible even when selecting an element towards the bottom of the navigator.\n. Pushed fix such that when right-clicking on an element in the navigator, the element row is selected. For now the right-click selection behaviour only selects the row. It does NOT:\n1. Open the selected file\n2. Expand selected directories\n. Right-click now highlights selected element in the navigator.\n. Pushed ability to display errors to dialogues. Errors are now shown in a div above the dialogue message in red, and get reset any time a user clicks the \"OK\" button.\n. Changed how context menu is opened and then closed on subsequent clicks. Now, there are two mousedown event handlers, one on window to close the context menu when clicking outside the context menu area, and one on the context menu itself, which prevents propagation of the mousedown event when a user clicks on the context menu area. Leaving the issue open until further testing is done to ensure context menu behaves correctly when being opened and closed.\n. Context menu seems to close consistently when clicking outside the context menu for 0.4. \n. Fix pushed such that if deleted file is in sub editor, the side panel is closed automatically and help page is displayed.\n. Partial fix pushed for context menus, where the deleted or old name of the renamed file is deleted from history through page state API.\n. Pushed fix to 0.4 that should resolve this as the context menu is now offset by 1 pixel from the click point.\n. Removed reference to window.explorer in contextmenuprovider.js and passed dependency\nthrough new context menu API from scripted.js. Also refactored and\ncleaned up context menu and context menu provider code.\n. Removed last references to window.explorer from explorer-table and test cases.\n. Fix pushed to dev branch. Now, the API to refresh scripted after an file operation takes two extra parameters. 1. Resource to open in main editor. If null, the main editor remains unchanged 2. Resource to select in navigator. In some cases both are the same, unless deleting/renaming a resource that is not currently opened in an editor.\n. ",
    "wilkinsona": "Beautiful. I'm running on master so a pull was all I needed to do. Thanks.\n. > For now, what we could do easily is take care of the error. I.e. we know that your plugin is not on the list of amd-plugins that we understand, so we could change the error to a warning 'unknown amd plugin'. Or simply ignore the whole entry without any warning or error.\n\nSo that's probably what we will do. (Would you prefer a warning? Or just no message at all?).\n\nI'd probably lean towards no message at all as I dislike the false positives. However, others may be happy with the false positives to avoid the false negatives...\n\nI'm also interested still interested in the 'how' of your original request:\n\nProvide a way for a curl.js plugin to tell Scripted\nI.e. do you have an idea of what would be a good/nice way for you to do that for your particular plugin?\n\nYour thoughts may help getting a better idea of what's needed here to handle various plugins.\n\nOur plugin automatically appends a suffix to load the Handlebars template, so hbars!alpha/bravo will looks for the file alpha/bravo.hbars. Interestingly we have some situations where an error isn't reported when our Handlebars plugin is used. This happens when there's a .js file with the same name (excluding the suffix). For example hbars!alpha/bravo will not report an error if alpha/bravo.js exists.\nThe automatic appending of the .hbars suffix may have been a mistake, but if we did away with it hbars!alpha/bravo.hbars still reports a missing module even if alpha/bravo.hbars exists. I don't know how Scripted's internals work, but this surprised me a little. Playing around some more, I noticed that js!alpha/bravo does not report an error if alpha/bravo.js exists. I guess Scripted may be appending a .js suffix when looking for a file?\nIn our particular case, this would work if:\n- Scripted looked for a file by appending the plugin's name as a suffix. For example hbars!alpha/bravo looked for alpha/bravo.hbars\n- We removed the automatic appending of .bars and Scripted used the path as-is. For example hbars!alpha/bravo.hbars looked for alpha/bravo.hbars\nThe former doesn't feel like a good idea as I don't think it's generally applicable. The latter feels like it would work, but not having to specify an extension appears to be a common pattern and is one that I'd like to be able to use. For example curl.js's css plugin automatically appends a .css suffix if no suffix is specified, or lets you specify one if you want something different.\nIt feels like this isn't possible without the plugin providing a function to tell you what url it'll actually use when it performs a load. Rather than plugins providing separate Scripted extensions, could the plugin itself provide a function with a well-known name that performs the required mapping and tells scripted what it'll need to know? This would essentially be an extension to the AMD spec that enables better integration with tools like Scripted.\nI'm working with @nebhale at the moment. He may have some thoughts on this too. He's certainly interested in the discussion.\n. > It seems that we could make things work for you by changing the default extension for 'uknown' plugins to be the empty string instead of '.js'. Perhaps that is a more logical default than adding '.js'.\nI agree that would be a better default.\n\nThe choice I made their of using \"add '.js' \" as the default instead of the empty string was really quite arbitrary, so I don't mind changing that if that will make things work better for you.\n\nThat would work for our plugin. Having to always provide a suffix to allow Scripted's resolution to work seems like a reasonable trade-off to me. It'd also work for the (limited) set of other plugins that I've looked at.\n. ",
    "jeremyg484": "One thing that still needs to be added for full parity with the old scripts is purging of the scripted log file when it gets past a certain size.\n. While such things are getting sorted, can we get indent size and indent character individually configurable for different file types? Consider the example of having some YAML files, which require using spaces instead of tabs, within a project where you might want to use tabs for everything else.\n. ",
    "thekalinga": "Thank you!!!\n. ",
    "Phoscur": "should include:\n- indention and star after /**\n- autocomplete supported @-tags\n- autocomplete types\n. While doing this, fix hovers!\nBug: try to get type info from hover: hover blinks in and out of sight -> unreadable\nleaving the mouse somewhere in the editor also produces this annoying blinking hover\nSeems to be chrome specific.\n. Windows 7 x64\nChrome 26\nChrome Canary\nnpm install -g scripted\n. Currently I only have a simple static connect server. I'm not decided on the packaging yet (webpack?).\nProbable choices: angular as Framework, twitter bootstrap for visual groundwork.\nIs it possible yet to have multiple (more than two) editors on the same site?\nI would like to start with a simple site navigation bar, which displays up to 4 editors per navigation link. \nClicking the link \"Config\" for example would open editors for specific config files.\nInstead of one or two editors one could have a running app component. Refreshing it should not require a pagereload. (-> hot code reloading?)\n. So that component is FileExplorer? Do I have to wrap it or do you think it would make more sense to completely replace it? Is it the only thing that has that dojo dependency?\nI probably want to switch out the layoutManager too..\n. I see I should be able to fix this by moving away from chrome canary.\nBut I'd rather have you fix it for me, at least I have an idea how:\nInstead of removing the hint overlay after some time(out), keep it there as long as the mouse stays on the element.\n. Now its a bigger hover with more information, but it's still blinking in an out of view. :(\nI don't want to uninstall chrome canary...\n. Windows 7 x64\nVersion 27.0.1417.2 canary\nVersion 24.0.1312.57 m\nI just pulled origin master again.\nIt is not file specific, I tried this with multiple projects, including scripted itself.\nIt's also not specific on the target objects for the hover, it's on every type inference hint there is. Flashing in and out of sight.\n. Well I guess you can't fix it if you can't reproduce it..\n. I'm even getting that in Iron Version 23.0.1300.0 (170000).\nNot in Firefox thought, nice and steady there.\n. Lol now I lost Skype somehow and can't reinstall. Feels like I have to reinstall Windows... maybe I'll give Win8 a try..\nClosed, as this can't be reproduced on other machines.\n. ",
    "jrburke": "Awesome, thanks!\n. ",
    "briancavalier": "Sure, sounds good.  Heh, I failed the travis build, is that expected?\n. ",
    "japj": "@jcollum is this still happening for you with the latest version? (I saw that the startup scripts were completely rewritten and sleep is not present in them anymore)\n. ",
    "jcollum": "Looks like it's not installing correctly now: \n```\nnpm http GET https://registry.npmjs.org/node-uuid/1.3.3                                   \nnpm WARN package.json connect@1.9.2 No README.md file found!                                \n\nrbytes@0.0.2 install C:\\Users\\jcollum\\AppData\\Roaming\\npm\\node_modules\\scripted\\node_modul\nes\\sockjs\\node_modules\\rbytes                                                             \nnode-waf configure build                                                                  \n\n'node-waf' is not recognized as an internal or external command,                          \noperable program or batch file.                                                           \nnpm WARN optional dep failed, continuing rbytes@0.0.2                                     \nC:\\Users\\jcollum\\AppData\\Roaming\\npm\\scr -> C:\\Users\\jcollum\\AppData\\Roaming\\npm\\node_module\ns\\scripted\\bin\\scr                                                                        \nC:\\Users\\jcollum\\AppData\\Roaming\\npm\\scripted -> C:\\Users\\jcollum\\AppData\\Roaming\\npm\\node_m\nodules\\scripted\\bin\\scripted                                                              \nscripted@0.3.0 C:\\Users\\jcollum\\AppData\\Roaming\\npm\\node_modules\\scripted                 \n\u251c\u2500\u2500 amdefine@0.0.2                                                                        \n\u251c\u2500\u2500 node-static@0.5.9                                                                     \n\u251c\u2500\u2500 when@1.6.1                                                                            \n\u251c\u2500\u2500 websocket-multiplex@0.1.0                                                             \n\u251c\u2500\u2500 formidable@1.0.9                                                                      \n\u251c\u2500\u2500 enhanced-resolve@0.4.5                                                                \n\u251c\u2500\u2500 json5@0.1.0                                                                           \n\u251c\u2500\u2500 htmlparser@1.7.6                                                                      \n\u251c\u2500\u2500 express@2.5.11 (mime@1.2.4, qs@0.4.2, mkdirp@0.3.0, connect@1.9.2)                    \n\u2514\u2500\u2500 sockjs@0.3.1 (node-uuid@1.3.3, faye-websocket@0.4.0)                                    \n``\n. I'm trying anupdate` now, I'm not sure if I uninstalled scripted from my global. \n. Nope, still happening: \n```\njcollum@DEVELOPER01 ~/Dev\n$ npm update -g scripted\nnpm http GET https://registry.npmjs.org/scripted\nnpm http GET https://registry.npmjs.org/scripted\nnpm http GET https://registry.npmjs.org/scripted\njcollum@DEVELOPER01 ~/Dev\n$ cd ~/AppData/Roaming/npm/node_modules/scripted/bin\njcollum@DEVELOPER01 ~/AppData/Roaming/npm/node_modules/scripted/bin\n$ scripted\n/c/Users/jcollum/AppData/Roaming/npm/scripted: line 1: /node_modules/scripted/bin/scripted: No such file or directory\njcollum@DEVELOPER01 ~/AppData/Roaming/npm/node_modules/scripted/bin\n$ ls\ndebug.bat  killserver      launchnode  scr      scripted\ngscripted  killserver.bat  restart     scr.bat  scripted.bat\njcollum@DEVELOPER01 ~/AppData/Roaming/npm/node_modules/scripted/bin\n$ scr\nsleep: invalid time interval `0.20'\nCould not detect the web browser to use.\n``\n. Rannpm uninstall -g scripted` just now. Don't have any git artifacts, I've only installed the npm version. \nRan install again: \n```\n$ npm install -g scripted                                             \nnpm http GET https://registry.npmjs.org/scripted                      \nnpm http 200 https://registry.npmjs.org/scripted                      \nnpm http GET https://registry.npmjs.org/node-static/0.5.9             \nnpm http GET https://registry.npmjs.org/json5/0.1.0                   \n... \nnpm http 200 https://registry.npmjs.org/node-uuid/-/node-uuid-1.3.3.tgz                                       \nnpm http 200 https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.4.0.tgz                               \n\nrbytes@0.0.2 install C:\\Users\\jcollum\\AppData\\Roaming\\npm\\node_modules\\scripted\\no                          \nes\\sockjs\\node_modules\\rbytes                                                                                 \nnode-waf configure build                                                                                      \n\n'node-waf' is not recognized as an internal or external command,                                              \noperable program or batch file.                                                                               \nnpm WARN optional dep failed, continuing rbytes@0.0.2                                                         \nC:\\Users\\jcollum\\AppData\\Roaming\\npm\\scr -> C:\\Users\\jcollum\\AppData\\Roaming\\npm\\nod                          \ns\\scripted\\bin\\scr                                                                                            \nC:\\Users\\jcollum\\AppData\\Roaming\\npm\\scripted -> C:\\Users\\jcollum\\AppData\\Roaming\\np                          \nodules\\scripted\\bin\\scripted                                                                                  \nscripted@0.3.0 C:\\Users\\jcollum\\AppData\\Roaming\\npm\\node_modules\\scripted                                     \n\u251c\u2500\u2500 amdefine@0.0.2                                                                                            \n\u251c\u2500\u2500 node-static@0.5.9                                                                                         \n\u251c\u2500\u2500 when@1.6.1                                                                                                \n\u251c\u2500\u2500 websocket-multiplex@0.1.0                                                                                 \n\u251c\u2500\u2500 formidable@1.0.9                                                                                          \n\u251c\u2500\u2500 enhanced-resolve@0.4.5                                                                                    \n\u251c\u2500\u2500 json5@0.1.0                                                                                               \n\u251c\u2500\u2500 htmlparser@1.7.6                                                                                          \n\u251c\u2500\u2500 express@2.5.11 (mime@1.2.4, qs@0.4.2, mkdirp@0.3.0, connect@1.9.2)                                        \n\u2514\u2500\u2500 sockjs@0.3.1 (node-uuid@1.3.3, faye-websocket@0.4.0)                                                        \n```\nStill failing. \n. ",
    "jlgrock": "I'm going to throw a different kind of curve in here.  I agree with the problem.  I do have it too.  However, I don't necessarily agree that the files are going to be there in a single web root.  \nExample: the majority of the times we use build tools (ant/maven/gradle/whatever) that will grab packaged JavaScript files.  This guarantees that a set of files is static and versioned appropriately - and most importantly is totally separate from the project you are working with.  Similar to the above example, these are mixed in at testing/package time.\nSo, for our development, it is a common action to download these files into a directory somewhere and reference them via your IDE.  Now, if you are using config files, much like maven, you don't want to hard code an absolute path, because it may be different for each developer.\nHow I would solve this problem in maven is to set a property variable in the pom file (which is checked in to your SCM) that needs resolution before completing.  This can be injected by a property override in my home path or something like that.  So, I put the property in my local .m2/settings.xml and it overrides the property in the pom file and builds properly for my system.\nObviously, this is just an example and not necessarily the appropriate solution for this product, but I'm hoping this brings a slightly different view on the problem space here.\n. You are correct in your statement that in some projects we have, these files would not be inside the project dir.  So, as long as I can mix in a variable representing a directory of a relative/absolute path, this solution would likely work for us as well.\n. ",
    "cm325": "Is it possible now to have the content assist show up automatically for other characters besides the \".\"? \n. Are you suggesting to change this (in contentAssist,js):\n/** @private\n- provides auto-activation for content assist on '.'\n*/\nautoActivate : function(e) {\nif (e.text === '.' && !this.activationRequest) {\nto something that includes more than just the '.'?\nOn Fri, May 24, 2013 at 3:38 PM, Andrew Eisenberg\nnotifications@github.comwrote:\n\nThis is not something that we have implemented yet. Take a look at:\nhttps://github.com/scripted-editor/scripted/blob/master/client/scripts/orion/editor/contentAssist.js#L204\nYou can change this so that content assist is invoked based on a set of\npre-defined chars, or it can be configurable in th e.scripted file. I'd be\nwilling to accept a pull request for making this configurable through\n.scripted.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/147#issuecomment-18425520\n.\n. Wow, nice, that works great, for now, I've edited the file, adding this:\n\nthis.contentAssistRegex = new RegExp(\"[a-z]|[A-Z]|/.\");\nthis.contentAssistRegex.test(e.text)\nand I'll play with these settings before committing a pull request-\nOn Fri, May 24, 2013 at 3:45 PM, chris marx cm325@cornell.edu wrote:\n\nAre you suggesting to change this (in contentAssist,js):\n/** @private\n- provides auto-activation for content assist on '.'\n*/\nautoActivate : function(e) {\nif (e.text === '.' && !this.activationRequest) {\nto something that includes more than just the '.'?\nOn Fri, May 24, 2013 at 3:38 PM, Andrew Eisenberg \nnotifications@github.com wrote:\n\nThis is not something that we have implemented yet. Take a look at:\nhttps://github.com/scripted-editor/scripted/blob/master/client/scripts/orion/editor/contentAssist.js#L204\nYou can change this so that content assist is invoked based on a set of\npre-defined chars, or it can be configurable in th e.scripted file. I'd be\nwilling to accept a pull request for making this configurable through\n.scripted.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/147#issuecomment-18425520\n.\n. On the configuration page (https://github.com/scripted-editor/scripted/wiki/Configuration)\nI see an option for \"search\"  - \n\n\nsearch: {\n   exclude: [\n     '/require.js', \n     '/*.min.js'\n   ],.....\nBut it's all about excluding or deemphasizing, could this be a location that is used to configure files that should get processed for content-assist?\n. Any update on when this will be able?\n. ",
    "lokywin": "Colors are removed from the icon.\n. ",
    "btrask": "Sounds great. I'll look forward to seeing the proposal. Thanks.\n. Thanks for sharing it, and so quickly. Overall it looks solid, and I'd be happy to see it used as-is. That said... ;-)\nI think using the Accepts header to specify the type of resource is a poor fit. Each resource has a real content type, which is what the Content-Type field should be used for.\nI considered using Accepts in the case of my image viewer mentioned above, but it isn't possible to specify headers when loading images from the <img> tag. That doesn't apply to Scripted, of course, but there are plenty of other cases, like viewing resources in the WebKit debugger, or offering a \"raw file\" view (like GitHub does).\nI think the split between /{hash}/path and /file/{hash}/path is similar. You can't control the browser's Accepts header, so you've given them two separate paths, but the HTML editor really is a view of \"the resource\" itself, and they should ideally have the same path.\nWhat I ended up doing in that case was using query parameters. Advantages:\n- They work no matter how the resource is being requested\n- They can be passed around as regular links\n- They let multiple views of the same file share the same path\nFor example, how GitHub does it:\nhttps://github.com/scripted-editor/scripted/blob/master/README.md\nhttps://github.com/scripted-editor/scripted/raw/master/README.md\nHow I'd propose doing it:\nhttps://github.com/scripted-editor/scripted/master/README.md (no type specified, uses HTML viewer as default)\nhttps://github.com/scripted-editor/scripted/master/README.md?view=raw\nBut this is just aesthetics, and I'd be perfectly happy with whatever the Scripted team chooses.\nI'd also suggest namespacing the hashes in the path, to avoid collisions with other resources and for forward-compatibility. For example, /id/{hash} instead of just /{hash}. However, it's not necessary if your hashes have a fixed length and you can make sure no other resources will have names of the same length with the same possible character set (if you want to have /resources/, don't let your hashes be 9 characters long).\nRegarding the hashes themselves, YouTube uses 11 characters base-64 encoded, with two characters (+ and /) replaced with - and _. However, base-64 is case sensitive, which can cause problems if you ever decide to represent a hash in the file system (some file systems are case sensitive, others aren't). I don't really have a suggestion here\u2014there's tradeoffs whichever way you go.\nThanks again,\nBen\n. ",
    "ugin": "Now it works :)\nThe package on npm should be updated, I believe is the simplest way to install scripted.\n. ",
    "hallysonh": "I install node 0.8.20 using npm -v show me 1.2.11\nI tried to install the scripted like this:\n    npm install -g https://github.com/scripted-editor/scripted/tarball/master\nand\n    npm install -g scripted\nand showed the same result\nthis link (http://dailyjs.com/2012/05/17/windows-and-node-3/) explain that the plugins must be updated to use the node-gyp and not node-waf to work in Windows\n. I've installed Microsoft Visual Studio to Windows 8 and Web, Python 2.7.3 and node-gyp and does not work anyway. I don't found node-waf to windows\n. I tested as you showed, but resulted in the same thing.\nI am on Windows 8:\n```\n$ git --version\ngit version 1.8.1.msysgit.1\n$ npm --version\n1.2.11\n$ node --version\nv0.8.20\n```\nThe key messages are:\n```\ncreateProcessW: The system will no might find the file specified\nnode-waf' is not recognized as an internal command or external, operable program or batch file.\n```\n. I discovered the reason for the message below:\ncreateProcessW: The system will no might find the file specified\nIt's because the git.exe was not in the PATH system variable.\nBut the problem continue now with message below\n```\n[...]\n\nscripted@0.3.0 postinstall D:\\Programming\\Repository\\git\\scripted\ncd client && bower install\n\nbower cloning git://github.com/jrburke/requirejs\nbower cached git://github.com/jrburke/requirejs\nbower fetching requirejs\nbower cloning git://github.com/cujojs/wire.git\nbower error status code of git: 128\nbower cached git://github.com/cujojs/wire.git\nbower fetching wire\nbower error status code of git: 128\nbower cloning git://github.com/requirejs/i18n\nbower cached git://github.com/requirejs/i18n\nbower fetching requirejs-i18n\nbower error status code of git: 128\nbower cloning git://github.com/requirejs/text\nbower cached git://github.com/requirejs/text\nbower fetching requirejs-text\nbower error status code of git: 128\nbower cloning git://github.com/cujojs/when.git\nbower cached git://github.com/cujojs/when.git\nbower fetching when\nbower cloning git://github.com/cujojs/meld.git\nbower cached git://github.com/cujojs/meld.git\nbower fetching meld\nbower cloning git://github.com/cujojs/curl\nbower error status code of git: 128\nbower cached git://github.com/cujojs/curl\nbower fetching curl\nbower error status code of git: 128\nbower error status code of git: 128\nbower cloning git://github.com/s2js/rest\nbower cached git://github.com/s2js/rest\nbower fetching rest\nbower error status code of git: 128\nbower cloning git://github.com/components/qunit.git\nbower cached git://github.com/components/qunit.git\nbower fetching qunit\nbower error status code of git: 128\nbower cloning git://github.com/Constellation/doctrine.git\nbower cached git://github.com/Constellation/doctrine.git\nbower fetching doctrine\nbower cloning git://github.com/s2js/probes.git\nbower cloning git://github.com/aseemk/json5.git\nbower cached git://github.com/s2js/probes.git\nbower fetching probes\nbower cached git://github.com/aseemk/json5.git\nbower fetching json5\nbower error status code of git: 128\nbower error status code of git: 128\nbower error status code of git: 128\nThere where errors, here's a summary of them:\n- requirejs status code of git: 128\nfatal: Not a git repository (or any of the parent directories): .git\n\n\nwire status code of git: 128\nfatal: Not a git repository (or any of the parent directories): .git\n\n\nrequirejs-i18n status code of git: 128\nfatal: Not a git repository (or any of the parent directories): .git\n\n\nrequirejs-text status code of git: 128\nfatal: Not a git repository (or any of the parent directories): .git\n\n\nwhen status code of git: 128\nfatal: Not a git repository (or any of the parent directories): .git\n\n\nmeld status code of git: 128\nfatal: Not a git repository (or any of the parent directories): .git\n\n\ncurl status code of git: 128\nfatal: Not a git repository (or any of the parent directories): .git\n\n\nrest status code of git: 128\nfatal: Not a git repository (or any of the parent directories): .git\n\n\nqunit status code of git: 128\nfatal: Not a git repository (or any of the parent directories): .git\n\n\ndoctrine status code of git: 128\nfatal: Not a git repository (or any of the parent directories): .git\n\n\nprobes status code of git: 128\nfatal: Not a git repository (or any of the parent directories): .git\n\n\njson5 status code of git: 128\nfatal: Not a git repository (or any of the parent directories): .git\n\n\n[...]\n```\n. I delete folders bower and npm-cache in C:\\Users\\AppData\\Roaming and all function fine. Thanks for help.\n. ",
    "bkbonner": "It's fine... It can wait.\nOn Mar 4, 2013 1:19 PM, \"Kris De Volder\" notifications@github.com wrote:\n\nNot 'my area' of the code. But Andrew's on leave for a bit so I'll take a\nlook.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/scripted-editor/scripted/issues/251#issuecomment-14395772\n.\n. Yes, this is how I would imagine the content assist working as well.  Perfect!\n. I'm interested in this as well:   https://groups.google.com/d/msg/scripted-dev/uA8-p-tokOI/SNbCl9cLK2QJ\n\nIt looks like they use jsbeautifier, so there should be a way of changing the configuration to support.\n. I'm seeing the same result as https://github.com/scripted-editor/scripted/issues/282#issuecomment-19872190  trying to install it on Windows.  :frowning: \nThis is a roadblock to getting more users of Scripted onboard.\n. I just found this:  https://github.com/scripted-editor/scripted/blob/master/completions/AndyjQuery.scripted-completions.   I guess I thought it was using JSDoc...but I'm wondering is this how scripted is handling code complete?\nI guess I need to try some other things out.\nAlso, please look at this link that has describes more of what I'm talking about:  https://groups.google.com/forum/#!topic/scripted-dev/0-N-N1kXKy4\n. ",
    "bestander": "@ikarienator it would be great to see your TypeScript support in scripted.\nI hope you'll have time to finish it :+1: \n. ",
    "chrismarx": "hmm... well, actually its a bit different, instead of assuming any kind of file structure, closure reads through all the js files in a directory and looks for goog.provide statements (the modules), and assembles a goog/deps.js which has the module name to file location mapping. hmm... well sounds like this won't be possible in the near future. Is there any way to just specify a directory whose contents would just get added to the auto complete, regardless of what file you're working on?\n. ",
    "peaches": "Nope, that was one of the things I wanted to ask one of you guys about. Since my resolver is dependent on a generated file, what is the best way for me to write test for this?\nIt looks like I can get started on writing some of the tests with a MockIndexer. In addition, it looks like the Travis build failed with Unable to access network: fail. I'm not sure what that's all about, so I'll take a look into that either today or tomorrow.\n. My main concern was the server side portion of the dependency resolution. File location and \"module\" names are not at all related to one another. I'll take a look at the server side tests to see if there's something I can imitate.\nAs far as client side testing goes, I added c2a150f476ecf997bcc2db6a9f271b831ae833fc, which has limited testing since closure is just relying on the global namespace, which are tested via the global tests. Let me know if you have anymore insights on what other things I could test on.\nThe network problem seemed like a transient network issue, tests were passing locally.\n. 1. Squashed into a single commit, is it customary to do this with each subsequent commits or is it okay just before the merge?\n2. Fixed callee issue\n3. I can't find this project at https://support.springsource.com/spring_committer_signup, and should I put your name for project lead?\nAs for server side tests, I will get to it Wednesday, I got stuck trying to add something else today, since I'd like to have it for my current project.\n. Added server side tests for the deps file loader, the resolver, and the reference finder. Is there an electronic CLA for scripted? Or do you recommend me going with the pdf printing option?\n. Sorry for the late response, I'm preparing for finals and it's taking up all of my time. I'll respond to these PRs after finals.\n. Closing this as I no longer have the time to follow up on this.. ",
    "kokujin": "Same here. ETA when this would be looked into?\n. ",
    "rodoherty1": "Hi Guys,\nThank you very much for your replies.  \nI have no problem downgrading to Node 0.8.  I'll try that as soon as I have reinstalled my Linux Mint at home.\nThanks again for your help!!\nRob.\n. Hmmm ... thanks for the suggestion, Scott.  I did try installing scripted-editor from the master but I recall hitting the same problem.\nI'll try it again but at least I have the choice of rolling back to Node 0.8.\nThanks again,\nRob.\n. ",
    "mchirkov": "I think it worse to state on home page, to not use the latest version of nodejs.\nAnd I tried master version but without success. (Linux Mint 15)\nNodejs: v0.10.12\n\nws@0.4.20 install /usr/lib/node_modules/scripted/node_modules/serv/node_modules/livereload-server/node_modules/websocket.io/node_modules/ws\nnode install.js\n\n[ws v0.4.20] Attempting to compile blazing fast native extensions.\n[ws v0.4.20] Native extension compilation successful!\nnpm http 304 https://registry.npmjs.org/traverse\n/usr/bin/scr -> /usr/lib/node_modules/scripted/bin/scr\n/usr/bin/scripted -> /usr/lib/node_modules/scripted/bin/scripted\n\nscripted@0.4.0 postinstall /usr/lib/node_modules/scripted\ncd client && bower install\n\nbower cloning git://github.com/cujojs/wire.git\n/usr/lib/node_modules/scripted/node_modules/bower/node_modules/tmp/lib/tmp.js:260\n  throw err;\n        ^\nError: spawn ENOENT\n    at errnoException (child_process.js:980:11)\n    at Process.ChildProcess._handle.onexit (child_process.js:771:34)\nnpm ERR! weird error 7\nnpm ERR! not ok code 0\n. ",
    "KidSysco": "I have been getting the same thing for many months. On both Ubuntu 13.04 and Windows 7. I really, really enjoyed using scripted while it worked for me. I would love to use it again someday. I will watch the project for now and see how it goes. If you need any testers, feel free to ask.\n. ",
    "michaelkantor": "Completely uninstalling node and then installing the version recommended on the scripted github page should address this.  Correctly uninstalling node may be harder than necessary though.\n. ",
    "rockotseng": "Got same problem with windows 7\n14659 info postuninstall scripted@0.5.0\n14660 error scripted@0.5.0 postinstall: cd client && bower install\n14660 error Exit status 8\n14661 error Failed at the scripted@0.5.0 postinstall script.\n14661 error This is most likely a problem with the scripted package,\n14661 error not with npm itself.\n14661 error Tell the author that this fails on your system:\n14661 error     cd client && bower install\n14661 error You can get their info via:\n14661 error     npm owner ls scripted\n14661 error There is likely additional logging output above.\n14662 error System Windows_NT 6.1.7601\n14663 error command \"D:\\tools\\nodejs\\node.exe\" \"D:\\tools\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\" \"-g\" \"scripted\"\n14664 error cwd C:\\Users\\Rocko\n14665 error node -v v0.10.25\n14666 error npm -v 1.3.24\n14667 error code ELIFECYCLE\n14668 verbose exit [ 1, true ]\n. ",
    "xandout": "\ncd client && bower install\nbower cloning git://github.com/cujojs/wire.git\nbower cloning git://github.com/jrburke/requirejs-bower.git\nbower cloning git://github.com/cujojs/when.git\nbower caching git://github.com/cujojs/when.git\nbower cached git://github.com/cujojs/wire.git\nbower fetching wire\nbower cloning git://github.com/requirejs/i18n\nbower cloning git://github.com/cujojs/meld.git\nevents.js:72\n        throw er; // Unhandled 'error' event\n              ^\n\nWindows 7 Pro SP1\n node -v v0.10.26\n npm -v 1.4.3\n. ",
    "dwking2000": "Got same problem with Windows 7 running in the cmd.exe console. Solved it by running GitBash (mingw32) as Admin and then running npm commands.\n. ",
    "wesleycoder": "Better not to keep it open, linux solved my problem...\n. ",
    "moricard": "Same error here\n. ",
    "jimmack1963": "Me too.\n. And thanks to the people who wrote this and keep it going; I use it often on another box.  Sorry I'm not clever enough to help fix!\n. ",
    "ludekstepan": "Me too :-)\n. ",
    "gjrwebber": "Is there a workaround?\n. ",
    "shadeimi": "me too\n. ",
    "kfiku": "+1\n. ",
    "lzbgt": "hi - just signed; code: 56120140507050252\n. ",
    "buzypi": "I see this too. But the git clone of the repository worked fine.\n. ",
    "herrernst": "me too\n. ",
    "royts": "me too\n. ",
    "chipmccormick": "and another\n. ",
    "danShumway": "Same with me:\nhttps://github.com/cujojs/when/archive/noisy-deferred-then.tar.gz doesn't exist, although when is a valid github repo.\n. ",
    "vaalgit": "me too.\nnpm -v\n2.15.9\nnode -v\nv4.6.0\nbower -v\n1.7.9\n. "
}