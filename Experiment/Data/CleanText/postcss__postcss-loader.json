{
    "bebraw": "+1\nDo you want help with this?\n. The problem is that\njavascript\npostcss: function () {\n    return {\n        defaults: [precss, autoprefixer],\n        cleaner:  [autoprefixer({ browsers: [] })]\n    };\n}\nisn't composable either.\nI cannot tell from outside a function what it's going to return. What I would like to achieve is just that.\n. To give you a better idea, here's what a webpack-merge part could look like if we had something composable:\njavascript\nexports.enableStylelint = function(paths) {\n  return {\n    module: {\n      preLoaders: [\n        {\n          test: /\\.css$/,\n          loaders: ['postcss'],\n          include: paths\n        }\n      ]\n    },\n    postcss: [\n      function () {\n        return [\n          stylelint({\n            rules: {\n              'color-hex-case': 'lower'\n            }\n          })\n        ];\n      }\n    ]\n  };\n}\n. The tool can deal with objects and arrays. We would have to do array -> fn to adapt. Redux compose does this essentially.\n. Basically webpack-merge concats arrays and merges objects. The problem is that I cannot do this type of work with pure functions. Those will get replaced.\n. Ok, I'll get it done. Good luck with the talk. \ud83d\udc4d \n. I actually realized postcss-loader supports arrays already (good to mention at the README).\nThis commit (https://github.com/postcss/postcss-loader/commit/1ab50df0ca88baab8f918326ac360afcec8f71f6) illustrates the support.\nSorry for the delay. I've been a bit busy with work. \ud83d\ude08 \n. Ok, cool. \ud83d\udc4d . To refer to https://github.com/survivejs/webpack/issues/129, in that case it would be enough if you could perform a check against enforce option, right @Velenir?\nI'm sure this is not the only use case, though. It would be good to know how people are actually using postcss-loader in their projects now.\n\nBesides that, since webpack core member is present, I like to propose merging postcss-loader/css-loader \ud83d\ude1b . css-loader uses postcss for CSS Modules under the hood anyways\n\nMy understanding is that we actually might want to go to the opposite direction in the future as it feels like the current css-loader does too much. This would mean pushing the CSS Modules functionality out of it entirely and possibly handling it through postcss-loader.\nThat said, I would love to see a strong design for CSS pipeline as it feels like a sore point at the moment. Simplifying css-loader would just push the problem elsewhere.\nI have a feeling we might need some kind of concept of context in the design in order to eliminate weirdness like importLoaders index. I guess at minimum this might mean a separate option for css-loader where you specify which loaders it should use to parse on @import (loader definition within loader definition).\nMinification is another interesting point, but that goes beyond this issue so I won't expand on that. The things I mentioned above are more of longer term concerns.. >So basically postcss-loader 'lacks' advanced webpack support, while on the other hand css-loader 'lacks' advanced postcss support. \u00af(\u30c4)/\u00af\nThat's the core point. Some design decisions are needed. Esp. importLoaders feels like a hack and this particular overlap is troublesome. I'll get more eyes on this.\n\n@bebraw postcss-loader now offically support plugins parameter in webpack config. https://github.com/postcss/postcss-loader#plugins\n\nThat looks good to me. \ud83d\udc4d \n\nDo we need multiple config anymore?\n\nI'm not sure. Is the above the recommended way now?. > @bebraw Could we ask Tobias to guide someone through the css-loader code base?\nYeah, I'll try to get a little session together. Let's continue on Slack about that.. Yeah, let's close. Thanks for the fixes. \ud83d\udc4d . @michael-ciniawsky Alright. I think the biggest concern is finding a good direction so we can align efforts like discussed here. There are a lot of little pain points at the moment.. ",
    "ai": "Hm. I can\u2019t remember why I create this issue because it was finished a monthes ago. Current version of PostCSS is 4.0.\n. Problem is because Autoprefixer expects PostCSS 3.0 and some other PostCSS plugin uses PostCSS 4.0.\nDowngrade other plugins until Autoprefixer will be updated to new PostCSS.\nWe try to find some better solution here: https://github.com/w0rm/gulp-postcss/issues/14\n. PostCSS has source map autodetect, so here we has problems not with a options.\n. Try to move css-loader?sourceMap before postcss-loader to take source map from Stylus. I think Stylus loader can set source map in wrong way and webpack didn\u2019t see them to pass to PostCSS loader.\n. @boopathi some of libsass versions had a problems with source map. What node-sass is used in your build?\n. I found a problem. Your webpack settings made sourcesContent empty.\n. In Sass and in PostCSS too. So browsers can\u2019t show you anything in styles.scss\n. @boopathi show me please source map sources before PostCSS and after.\n. @boopathi why you think path should be webpack:///styles.scss?\nI take file path by loaderUtils.getRemainingRequest(this). What is a best way?\nhttps://github.com/postcss/postcss-loader/blob/master/index.js#L7\nAnyway extract-sass-test use strange stdin. I think you should create a Issue in Sass loader too.\n. @boopathi I am open for PR :)\n. You use only Autoprefixer. Autoprefixer adds prefixes. font-size doesn\u2019t need any prefix. So you output will be equal input.\nPostCSS is totally modular thing. You take only necessary plugin. Take plugins from Plugins list and add them to postcss array.\n. val() is supported only in some browsers. So to use universal solution you should add cssnext PostCSS plugin\n. @simonsmith postcss-custom-properties requires brackets:\njs\n    postcss: [customProperties()],\nI will finish PostCSS Plugins Guidelines on this week and all plugins will be forced to use brackets-free API.\n/cc @MoOx \n. @MoOx postcss.plugin() already handled it.\n. @pburtchaell show your module.loader config\n. Can you test your webpack processing on some prefix like:\ncss\n:fullscreen a {\n    display: flex\n}\n. I think some of your plugins need the brackets like: require('postcss-css-variables')().\n@MoOx what about PostCSS 4.1 API? =^_^=\n. @badsyntax np, I fixing test right now. Also I will move loader to PostCSS 4.1.\n. Released in 0.4.0 with all other PostCSS 0.4.1 features\n. @badsyntax I will publish it when we will finish PostCSS Runner/Plugin Guidelines\n. But what if user want to hide linter warnings but emit a error from postcss-mixins?\nI think we need this settings in linter plugins.\n. Sorry, but I am not webpack user anymore, so I have no skills to fix hotloading.\n@0nn0 maybe you can ask somebody in webpack team?\n. @0nn0 I think postcss-import is a bad way to use postcss-loader. Webpack already has good dependency system. So it is better to load CSS dependencies by webpack.\n. Maybe we can ask postcss-import team for some config to set addDependency, but it seems like to complicated. I really doesn\u2019t see a point of using postcss-import when you have webpack to concat files.\n. I will add some notice about postcss-import to this project README.md\n. @MoOx yeap, css-loader is one of the reason why I migrated away from webpack. But postcss-import will not fix issue, because anyway some files will be processed by css-loader.\n@MoOx can you set a PR with recommendations for postcss-import users? What onImport they need to set?\n. @gaearon BTW, why webpack uses so bad parser in css-loader and not PostCSS parser?\nFor example, PostCSS parser has a safe mode to load legacy CSS with any mistakes.\nAlso PostCSS parser is one of the fastest JS parsers. There are only CSSOm faster that PostCSS, but only because it has mistakes in parsing.\n. Released in 0.5\n. @faergeek oops :) fixed\n. @matthewmueller do you use postcss-import? Do you add hook for it from docs?\n. Open a new issue with all output and plugin list\n. @hustcer yeap, webpack 2 issue is here https://github.com/postcss/postcss-loader/issues/92\n. Sorry, I will have time to see only on next week.\nRight now, try to remove less or postcss loader to see, who is a source.\n. @lydell maybe you can help me here? I think you know webpack better as author of autoprefixer-loader.\n. Oops :). Yeap @passy maybe you can help me here, because you know webpack better as author of autoprefixer-loader?\n. @Dakuan does @badsyntax fix helps?\n. I will add a check to ignore PostCSS if PostCSS's config is missing, like in your case.\nYou don't need a PostCSS in Karma, right?\n. Fix released in 0.4.4\n. Double for https://github.com/postcss/postcss-loader/issues/8\n. Current answer: use a webpack dependency :)\n. Awesome.\nMaybe we need to use function by default?\nCan you send a PR with default function and special section with onImport example?\n. Yeap :)\n. @cybercase I am waiting for second PR to make a release :)\n. Sorry, this feature is unreleased yet :)\nWe just need small fix: https://github.com/postcss/postcss-loader/pull/12\n. @quicksilver7 I use Gulp and Browserify, because webpack has ugly parameters for loaders and works very bad with CSS.\n. Released in 0.5\n. There is no need to use ?sourceMap, source mas should load automatically.\n. @sokra maybe we can move postcss-loader to webpack support? I didn\u2019t use it and it is very difficult to fix complicated issues :(.\n. @jantimon can you create some small playground with this issue?\n. @markdalgleish =^_^=\n. I test your case, PostCSS correctly receives previous map, so there is no need for ?sourceMap parameter.\n. Hm. Seems like as strange case of Less/webpack/PostCSS conflict. Right not it will not be a important issue :).\n. If Less send a source with only one file it is definitely Less bug.\n. What file was main and what was imported?\n. BTW, very strange, that Less file doesn't have file field.\n. Can you add a file field to Less map and see will it fix a problem?\n. @jantimon awesome! Let\u2019s my find out why string maps doesn\u2019t work in PostCSS core. Maybe PR to core is a better solution.\n. Oh, exactly\n. Fix released in 0.5.1.\nThanks for doing all job by this task :D.\n. @markdalgleish yeap :) I am bad maintainer for webpack projects =^_^=\n. We do not have this code in PostCSS or postcss-loader. Why you think it is relevant?\n. As I understand, cssnano already is used in css-loader.\nBut maybe some transformation after css-loader can uncompress CSS.\n. As you can see code is very simple and should works in both cases https://github.com/postcss/postcss-loader/blob/master/index.js#L26\nShow me your loader, when you select plugins pack.\nAnd do you use latest version of postcss-loader?\n. There will not be a error, if PostCSS has no plugins at all ;).\n. If you add map: true, it will enable always inlined source maps.\nBut according loader API, loader should return map object. I think webpack should inline maps itself.\nSo it is a dirty fix, we have a issue in some other place.\n. What version of loader and cssnext you used before and update before this issue?\n. @taion can you help me (I am on the way and can do research myself). Do you update cssnext too? Can you reduce cssnext back and update only postcss-loader?\n. @taion technically, cssnext should works wihout (). Do I right @MoOx ?\n. @taion the most easy way is a cssnext-loader. But PostCSS has many awesome plugin, so I didn\u2019t see a reason why you should use only Autoprefixer and cssnext :D. For example, font-magician.\n. Seems like. OK, so it is not a problem of PostCSS 5.0 (we made so many changes there :D ).\n. @taion yeap, I will change example\n. Done 246c90f\n. This issue from old version of postcss-import, which still uses PostCSS 4.x with many hacks, so we can't handle compatibility fixes.\n@MoOx was released new version. Maybe we need to wait for cssnext update.\nDowngrade postcss-loader until cssnext update.\n. Sorry, @olegakbarov was first\n. postcss-loader has no connection with react ;). You has different conflict in peerDependencies.\n. Nope. It is a syntax conflict.\nYou can fix it by replacing Sass with PreCSS, which is based on PostCSS.\n. You can also report to Sass tracker, because postcss-media-minmax use W3C syntax, so standard CSS will broke Sass in future.\n. @davidkpiano it is official W3C editor\u2019s draft :). I mean that it is highly probable that it became a standard soon.\n. Yeap, this is strange API. Do you want to send a PR to store you name in history? :)\n. The problem is that you use style-loader, which add JS code to insert <style>you CSS content</style>. You can use ExtractTextPlugin to extract that CSS from JS to separated file.\nAnyway, sorry but it is not relative with PostCSS :-P.\n. Awesome! But can you aslo provide some test for this case? You can look to other test as a sample.\n. Sorry, that I add more and more sub tasks :). But it is really awesome feature :).\nCan you asl add some docs (my English is bad) about it. I think many users can miss this awesome way to use PostCSS.\n. :D\n. Yeap. There was Styling project. But seems like it doesn\u2019t need anymore.\n. I will release version right after move project to AVA\n. fixed :)\n. Released in 0.8\n. Use postcss-import to import files inside PostCSS and process it with Autoprefixer after import.\n. @andyhall the best way is to use one dependency tree for components. Require one component to other, not import one CSS file to other CSS.\nSo, for example, you have button component. And you will have separated dir with all things for this component:\nbutton/\n  index.js\n  button.css\n  button.js\n  image.svg\nIn index.js you load all stuff (there are few webpack plugins, which will create it automatically):\njs\nrequire('./button.js');\nrequire('./button.css');\nSo, if you need to use button inside a form, you write in form/form.js:\njs\nrequire('../button');\n. Yeap, importLoaders=1 looks like a solution.\nBTW, autoprefixer-loader is not a official way to load Autoprefixer :). You will have delay for updates.\n. Nope, autoprefixer-loader is OK. But it just unnecessary extra wrap for my opinion. So, when new major Autoprefixer will be release, autoprefixer-loader will require a week or more for update.\n. Because CSS has no inline comments. Use SCSS parser in PostCSS\n1. npm install postcss-scss\n2. postcss-loader?parser=postcss-scss\n. Very strange, that in webpack outut transform has no indent like in first one. Do you sure, that there is no other CSS tools?\nAlso you can put a console.log inside a postcss-loader to get real input/output to the loader.\n. Sorry, have no idea, but it is definatly not a postcss-loader issue.\n. @adriaanmeuris put browserslist config with your browsers support list https://github.com/ai/browserslist#config-file\n. Can you explain your idea in some code examples?\n. PostCSS right now is really very fast. Cache is for cases when you can\u2019t really fix bad perfomance :).\nBut anyway I no against cache. Please send PR.\n. You should use css-loader before postcss-loader.\n. Also you can use postcss-modules. I think CSS\u2192JSON magic is not really good.\nhttps://github.com/outpunk/postcss-modules\n. @iamakulov maybe we should add this info to docs? Can you send a PR?\n. Sorry postcss-loader can\u2019t have a docs for every webpack loader.\nI can change my mind if this issue will be popular.\n. I am open for PR. But try to suggest some compact changes. We already have too many config for different cases.\n. @IamManchanda I am not a maintainer anymore =^_^= ask @michael-ciniawsky . Thanks :).\n. Thanks :)\n. Yes, postcss-loader is a special module (\u201cloader\u201d in webpack terms) to run PostCSS inside webpack.\n. /cc @MoOx \n. Nope. You can use postcss-js to handle CSS-in-JS styles.\n. Can you debug what file variable value was here: https://github.com/postcss/postcss-loader/blob/master/index.js#L7\n. Hm. Seems like we need to use different way to get file path.\n@davidjbradshaw because this issue is reproduced only for you, can you try some methods locally? Or add new test?\n. @davidjbradshaw don\u2019t worry, I am not a weback user at all, but developing this module :D.\n. Main problem is really big webpack API complexity. Taking a file name is a common procedure for loader, but I can\u2019t find good way to do it :(.\n. @davidjbradshaw can you debug what will be in this.resourcePath in loader context?\n. @davidjbradshaw same line 7\n. Awesome. I will replace a way to get current file path. Sorry, new release could be released only in Sunday (I am traveling between cities).\n. Done 3c9b715264f5eed4f8a18ff716e4effdacf6a077\n. Released in 0.8.1.\n. Webpack config are hell \ud83d\ude1f. Code snippets become as spattered program. Maybe for this case you should release some small npm module to keep config readable?\n. @MoOx yeap, like postcssImport.webpack. Do I need to create issue in postcss-import?\n/cc @TrySound \n. @JesseFarebro please send other PR when you add postcssImport.webpack\n. This loader generates source map by default https://github.com/postcss/postcss-loader/blob/master/index.js#L13-L16\n. Show me your input CSS. Maybe it really contains this errors.\nAnd why you think this issue is related to postcss-loader, not to your CSS or Stylint?\n. And what is wrong? Do you write origin sources in SCSS, then you compile SCSS to CSS and this CSS goes to PostCSS with *.scss fiilenames.\n. Can you remove ExtractTextPlugin and test again?\n. ExtractTextPlugin accepts only 2 arguments. You write before and after loaders. If after loaders contains more than one loader you write it like postcss!css.\n. Try to put css-loader before postcss-loader.\n. As I know loaders works from right to left. Try postcss-loader!css-loader.\n. @jiyinyiyong I thought that style-loader transform CSS to JS. But css-loader only processes @import and url().\nhttps://github.com/webpack/style-loader/blob/master/index.js\n. Ouh. Thank.\nDo I understand correctly, that css-loader without postcss-loader finds file?\nSeems like postcss-loader brake a file path somehow. Can you debug into css-loader and check what file path it uses?\n. Nope, postcss-loader has no autoprefixer in dependencies. You need to add autoprefixer to your own package.json.\n. @cspotcode thanks for well documented PR.\nSometimes result.map could be null. Does this fix is correct: 139d572\n. Released in 0.8.2.\n. Yeap, we should update API. I agree that we should support only one syntax.\nLet\u2019s change syntax in 2 steps:\n1. Add support for two syntaxes. And print a warning for old one.\n2. After few months remove old syntax.\n. Because this changes is very important and we should be cautious, I will accept this PR few hours later (I am in the hangover right now :D).\n. @jenius require() query string should overrides config options \n. Sorry, I need to spend all my today and tomorrow time for work. I will accept it on weekend.\n. I thought about this issue and there is a one problem. All current loaders uses query string for options. Right now we move plugins to separate webpack.config.js only because plugin options can be passed in query string.\nBut why we need to move all options here?\n. @jenius GET parameters is a webpack API. Why we should add extra non-standard way?\n. @jenius maybe we need to fix require instead of changing a options?\nHow did other webpack loaders fix this issue?\nCan you show me some examples of your problem to understand it better?\n. And what is your problem exactly?\nSorry for asking so many questions, but API is very important thing. Especially, when you have so bad API basement as in webpack :D.\n. Sorry, I am not native speaker. Can you just show me a code? Abstract things is always hard for me, I think better with real use case and real code example.\n. Thanks for clarification.\nI well will accept this PR and release new version, when I will find some stable place (I am in travel). I think on this week.\n. Released in 0.9\n. Sorry for long delay \ud83d\ude1e\n. Sure. Do you want to send PR?\n. Thanks :)\n. What error did you have a what config do you use?\n/cc @outpunk\n. @Strate how did you use CSS file in JS?\n. @Strate nope, you miss whole idea of postcss-modules. It doesn\u2019t return a JSON. It saves JSON to separated file. So you should load it by require(\"json!./style.css.json\") (or you can move json! to webpack config)\n. Done https://github.com/postcss/postcss-loader/commit/6c15025b3cf006b1e17fa0ed8a0d1c0a5a1ccf4e\n. Sorry. I will have time to see it only on weekend :(.\n. Sorry for big delay.\nOI found a problem. It was a SugarSS issue. Fixed in 0.1.3: https://github.com/postcss/sugarss/commit/8eebbcaa0c67974c3794eeaf6bcc6cf30d2f7aa3\n. cc @MoOx\n. Big snippets is not good UX. Could we integrate it to postcss-loader on development environment?\nOr we could hot reload only \u201cnot in node_modules\u201d plugins.\n. Hm, in most of cases users will use require() in config as the most common way for every cases. So we will not have a path.\n@michael-ciniawsky do you have any ideas, maybe?\n. Maybe we could provide some syntax sugar like:\njs\nexport default ctx => {\n  hotReload: [\n    './my-plugin'\n  ],\n  plugins: [\n    require('./my-plugin')\n    require('stanble-3rd-party-plugin')\n  ]\n}\n. But will we calculate ./my-plugin path correctly?\n. @satazor show your webpack config\n. Fixed in 0.9.1\n. PreCSS is not required :)\n. Are you asking about using different plugins for different loaders? https://github.com/postcss/postcss-loader#plugins-packs\n. Sorry, I am not native. What do you mean for compose in this issue?\n. Ouh, you mean that there are some webpack tools, that could merge few configs into a one config, but they will generate a arrays inside arrays in PostCSS plugin, so PostCSS plugin will not work?\n. Ouh, OK.\nYou need to send PR (I don't use this webpack tool and could not test the solution). I will accept it and release a version (I could do it for 1 day after May 12, right now I am preparing for talk).\n. It is because of style-loader in your loaders section for *.css. This plugin wrap CSS to autoinsert <style> JS\nhttps://github.com/webpack/style-loader/blob/master/index.js\n. Show me your config, your input and output.\n. Of course, you should write a issue description and show why you thing it doesn\u2019t work. Do it throw a error? Or return empty string? Or do not apply PostCSS plugins (what plugins exactly).\n. js\n    postcss: function () {\n        return [precss({ /* options object */ }), autoprefixer];\n    }\n. Sorry, I can't have a section for every plugin \ud83d\ude1e. Documentation will be too long and unreadable.\nMaybe you should ask in postcss-devtools repo for help?\n. Could you show full error stacktrace?\n. Can you should some example of your CSS?\nAlso you don\u2019t need cssnano in postcss, css-loader already use it.\n. Could you show config with PostCSS?\n. Do you load JS module and then you have a issue? Very strange. I have no idea where I should look. Maybe you should ask in webpack chat and they will have some ideas?\n. Ouh, I see. I mess that you use postcss-js. Could you show me your style file?\n. Ouh, I understand the issue :). You are using postcss-loader in wrong way ;).\nIf you have style object in JSX files:\n``` js\nconst style = {\n  display: 'flex'\n}\nexport class Logo extends React.Component {\n}\n```\nyou don\u2019t need postcss-loader at all. postcss-loader is used only when you store styles in separated files like:\njs\nexport default {\n  display: 'flex'\n}\nUse postcss-js or babel-plugin-csjs-postcss if you want to process styles in JSX files.\n. I give you a 2 links for solutions \u2014 look to last paragraph ;).\n. Yeap, there is no solution withour code changes right now. But you could write a Babel plugin to do it.\n. Could you add a { display: flex } in this file and show me the result?\n. Do you use browserslist config?\n. Could you open autoprefixer sources in node_modules and put there console.log to test, that autoprefixer was executed? You need lib/autoprefixer.js and module.exports function.\n. Could you debug result.css here? https://github.com/postcss/postcss-loader/blob/master/index.js#L67\n. OK. So we sure, that its happen in Autoprefixer :-/\n. Could you write in CSS:\na {\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n}\nAnd show output?\n. I found problem. Put postcss key to the root of config, not to the module.\n. Some plugins will be loaded from relative paths. But we are thinking about global PostCSS config and it will work with this syntax in simple cases\nhttps://github.com/postcss/postcss/issues/813\n. Could I ask you to help me a little a create small demo project to reproduce issue?\n. No demo project, no help ;).\nI think problem is in used reporter \u2014 it doesn\u2019t clean result.warnings() after output them to CLI.\n. Thanks. I try to look it today evening or tomorrow.\n. You asked about this warnings?\n```\n\nreact-webpack-postcss-loader@1.0.0 build /home/ai/react-webpack-postcss-loader\nwebpack --config webpack.config.js --progress --colors\n\n45% 83/140 build modules\nsrc/components/HelloWorld/HelloWorld.scss\n7:15    \u26a0  Unexpected invalid hex color \"#00000\" (color-no-invalid-hex) [stylelint]\n69% 178/180 build modules\nsrc/components/HelloWorld/HelloWorld.scss\n7:15    \u26a0  Unexpected invalid hex color \"#00000\" (color-no-invalid-hex) [stylelint]\nHash: 86a7f4064d10da29a716\n``\n. @tysonnero this warnings came frompostcss-reporter`, not from loader itself. Seems like it is result of some conflict with webpack output magic.\nMaybe we could fix it, but I think using special stylelint loader is better.\nAlso, maybe console it not a best way for webpack. I think you should:\n1. Add linter to Atom.\n2. Add linter to lint-staged to lint changed files before commit.\n3. Add linter to CI.\nSo you don\u2019t really need linter in webpack loader.\n. @tysonnero I pulled changed, run build and didn\u2019t get any watnings:\n```\n\u27a4 npm run build\n\nreact-webpack-postcss-loader@1.0.0 build /home/ai/react-webpack-postcss-loader\nwebpack --config webpack.config.js --progress --colors\n\nHash: 86a7f4064d10da29a716\nVersion: webpack 1.13.1\nTime: 4028ms\n       Asset     Size  Chunks             Chunk Names\njs/bundle.js  1.92 MB       0  [emitted]  main\n    + 179 hidden modules\nERROR in ./src/index.js\n/home/ai/react-webpack-postcss-loader/src/index.js\n  1:27  error  Expected linebreaks to be 'CRLF' but found 'LF'  linebreak-style\n  2:34  error  Expected linebreaks to be 'CRLF' but found 'LF'  linebreak-style\n  3:61  error  Expected linebreaks to be 'CRLF' but found 'LF'  linebreak-style\n  4:1   error  Expected linebreaks to be 'CRLF' but found 'LF'  linebreak-style\n\u2716 4 problems (4 errors, 0 warnings)\nERROR in ./src/components/HelloWorld/HelloWorld.js\n/home/ai/react-webpack-postcss-loader/src/components/HelloWorld/HelloWorld.js\n  1:27   error  Expected linebreaks to be 'CRLF' but found 'LF'  linebreak-style\n  2:40   error  Expected linebreaks to be 'CRLF' but found 'LF'  linebreak-style\n  3:1    error  Expected linebreaks to be 'CRLF' but found 'LF'  linebreak-style\n  4:43   error  Expected linebreaks to be 'CRLF' but found 'LF'  linebreak-style\n  5:13   error  Expected linebreaks to be 'CRLF' but found 'LF'  linebreak-style\n  6:117  error  Expected linebreaks to be 'CRLF' but found 'LF'  linebreak-style\n  7:4    error  Expected linebreaks to be 'CRLF' but found 'LF'  linebreak-style\n  8:2    error  Expected linebreaks to be 'CRLF' but found 'LF'  linebreak-style\n  9:1    error  Expected linebreaks to be 'CRLF' but found 'LF'  linebreak-style\n\u2716 9 problems (9 errors, 0 warnings)\nERROR in ./~/css-loader?modules&importLoaders=2!./~/sass-loader!./~/postcss-loader!./src/components/HelloWorld/HelloWorld.scss\nModule build failed: \n  font-color: #00000;\n            ^\n      Invalid CSS after \"  font-color:\": expected expression (e.g. 1px, bold), was \"#00000;\"\n      in /home/ai/react-webpack-postcss-loader/src/components/HelloWorld/HelloWorld.scss (line 7, column 14)\n @ ./src/components/HelloWorld/HelloWorld.scss 4:14-205\nERROR in ./src/components/HelloWorld/HelloWorld.scss\nModule build failed: ModuleBuildError: Module build failed: \n  font-color: #00000;\n            ^\n      Invalid CSS after \"  font-color:\": expected expression (e.g. 1px, bold), was \"#00000;\"\n      in /home/ai/react-webpack-postcss-loader/src/components/HelloWorld/HelloWorld.scss (line 7, column 14)\n    at DependenciesBlock.onModuleBuildFailed (/home/ai/react-webpack-postcss-loader/node_modules/webpack-core/lib/NormalModuleMixin.js:315:19)\n    at nextLoader (/home/ai/react-webpack-postcss-loader/node_modules/webpack-core/lib/NormalModuleMixin.js:270:31)\n    at /home/ai/react-webpack-postcss-loader/node_modules/webpack-core/lib/NormalModuleMixin.js:292:15\n    at context.callback (/home/ai/react-webpack-postcss-loader/node_modules/webpack-core/lib/NormalModuleMixin.js:148:14)\n    at Object.onRender (/home/ai/react-webpack-postcss-loader/node_modules/sass-loader/index.js:272:13)\n    at /home/ai/react-webpack-postcss-loader/node_modules/async/lib/async.js:906:35\n    at _arrayEach (/home/ai/react-webpack-postcss-loader/node_modules/async/lib/async.js:85:13)\n    at Object. (/home/ai/react-webpack-postcss-loader/node_modules/async/lib/async.js:898:17)\n    at Object.callback (/home/ai/react-webpack-postcss-loader/node_modules/async/lib/async.js:44:16)\n    at options.error (/home/ai/react-webpack-postcss-loader/node_modules/node-sass/lib/index.js:275:32)\nChild extract-text-webpack-plugin:\n        + 1 hidden modules\nERROR in ./~/css-loader?modules&importLoaders=2!./~/sass-loader!./~/postcss-loader!./src/components/HelloWorld/HelloWorld.scss\nModule build failed: \n  font-color: #00000;\n            ^\n      Invalid CSS after \"  font-color:\": expected expression (e.g. 1px, bold), was \"#00000;\"\n      in /home/ai/react-webpack-postcss-loader/src/components/HelloWorld/HelloWorld.scss (line 7, column 14)\n\n```\n. Seems like it is ExtractTextPlugin issue :(. Sorry, I am not good in webpack internal parts. I use official API to set a warning.\nExtractTextPlugin has many issues (it is a reason why I came back to Gulp).\n. Please show me node -v output?\n. You should update your node.js. Current version is 6.0 ;).\n. postcss-loder will compile CSS, that you will use in webpack.\nSo when you write require('./some/path/to/style.css') it will be processed by PostCSS.\n. Seems like it is problem of css-loader CSS minifier. Please check Autoprefixer FAQ for details (sorry I am in the train in the middle of Kazakhstan) - you should move browser requirements to browserslist config.\nAlso last 10 versions is very lame config. I am sure, that you don't care about IE 3 or old Chrome \ud83d\ude09. Be responsible developer, talk with your client and set actual browser requirements (it should be equal to browsers where you test your website).\n. Please check Autoprefixer FAQ section in Autoprefixer README. It contains question \"No prefixes in production\", answer will contain explanation and solution.\nSorry, I can't give you a direct link.\n. Webpack fixed a Autoprefixer issue, so we could just remove this section!\n. @hugojing please write +1 in this issue https://github.com/webpack/css-loader/issues/281\nThis is very important\n. Thanks!\n. @BorelTung sorry for delay.\nYeap, This issue should be related with file path.\n1. Could you show me your plugin list?\n2. Could you put console.log(file) after [this line](https://github.com/postcss/postcss-loader/blob/master/index.js#L7) and show me your output?\n. Sorry, I have no idea too \ud83d\ude1e\n. Great work, thanks\n. I renames it to3305c74` and add docs. Is it OK?\n. Sure, I will release it today (not at laptop right now, sorry)\n. Released in 0.10\n. Hi. Thanks for good issue start text \ud83d\ude06\nWhat you mean about this.exec? How it could be fixed? (I didn't use HappyPack).\n. So, how I could fix it?\n. Awesome. It will be very useful.\nBut maybe we should change it in PostCSS core? Could you send PR there?\n. Yeap:\n1. We could add line numbers to PostCSS core.\n2. Then we could fix file path in error in loader.\nLooks good?\n. @ertrzyiks this issue is best for first PR. Do you want help me with it? (right now I am developing other project)\nWe already have library to load config \u2014 you need just to add it to loader: postcss-load-config.\nHere is discussion about config: https://github.com/postcss/postcss/issues/813\n. Sorry, you should ask CSS Modules team :(\n. I'm. Do you use CSS Modules from css-loader or from postcss-modules?\n. I see that you use modules param in css-loader, but you told about JSON files, which could be created only by postcss-modules. Maybe you enable CSS Modules in css-loader and by postcss-modules PostCSS plugin?\n. Of course, it is impossible. You need to use only one way.\n. You could load JSON from postcss-loader from React too ;).\njs\nconst styles = require('./style.css.json')\n. Hi. I am on mobile phone. Could you copy error message and error stack trace as text?\n. Could you show app.css?\n. Is it ./src/app.css style file?\n. Sorry, ask ExtactTextPlugin developers. This plugin is so complicated, so I just gave up.\n. Do you have any docs of API changes in loaders?\n. Fixed in https://github.com/postcss/postcss-loader/pull/104\n. @edmundo096 why not fix webpack? ident is bad UX \ud83d\ude15.. Looks great. Could I ask you two changes:\n1. Remove ChangeLog and version release commits. I will make separated config with version bump with GPG sign (I am cryptopunk :D ).\n2. We need better docs for this feature (my English is poor). We need to describe how other developers could use this feature in their plugins.\n. Looks good. Wait I second, I need to finish my talk and them I will release all changes in PostCSS projects.\nYou don\u2019t need this feature right now, correct?\n. Released in 0.11.\n. Sorry, it is related with webpack, not PostCSS loader. I am not big user of webpack to help here.\nSeems like wrong loaders accepted to color.js.\n. Here is how we read JS file: https://github.com/postcss/postcss-loader/blob/master/index.js#L85\nMaybe you know better way?\n. Thanks!\n. Released in 0.11.1\n. Hm. Adding a new option looks like a hack. Other developers with same issue could miss this option.\nCould you describe this issue, that you want to fix here? Maybe we will find some better way?\n. Yeap, we could change API. postcss-js is not so widely used, so we could change it.\n. I don\u2019t like the __webpackExec: true property in parser. It looks like hack ;).\nMaybe we should add parserExec parameter? But it will be a string parameter ?parserExec=postcss-js.\nI would be happy to avoid changing array to object in postcss section of webpack config (because it will affect to many users). Any suggestions?\n. @nealgranger \njs\npostcss: function () {\n        return {\n            parser: require('postcss-js'),\n            exec: true,\n        };\n    }\nRight now postcss section in webpack returns only plugins list.\n. Ouh, I forget about it :(. Sure, we could add parser option to postcss section.\nBut what if developer need postcss-js to some files and CSS parser to others?\n. I am suggesting to remove postcss-loader?parser=postcss-js for postcss-js.\nLet\u2019s introduce one way to load exec based parsers. Because I don\u2019t like exec option idea \u2014 other developers could miss this option.\n. I know. But what if other developers got #86? How did he find this exec option?\nThis is why I suggest to change how we load postcss-js. So having #86 will be impossible.\n. Sure, let\u2019s use something like this instead:\njs\n    postcss: function () {\n        return {\n            parser: require('postcss-js'),\n            plugins: [require('autoprefixer')]\n        };\n    }\n. Other question: how it will be changed in webpack 2 ;)\n. Hm, mayb I miss the point. Could you repeat what is the problem?\n. @nealgranger I mean what is the main problem? #86 was that exec doesn\u2019t work in some environments.\n. OK. So why you need this PR? To run postcss-js behavior to some custom parsers?\n. Sure, let\u2019s me finish with PostCSS 5.2 and I will return to this issue.\n. Sure, I agree that parserExec was a bad idea, because exec is about style file, to a parser.\n. Please check docs https://github.com/postcss/postcss-loader/commit/54a644e657fc34c23f98938e4dc1007445a961c6\n. Released in 0.13.\n. Great! Fast work :). Sorry, I could review it only tomorrow (I am not so fast :( )\n. Looks good. Only few very small things:\n1. Why you comment postcssrc?\n2. Could you please fix my weird manually indent in package.json :D\n. Feel free to return error on using pack with config\n. Great work, I will review it tomorrow (sorry, working day was started)\n. Looks good. Sorry, it could take a while (need be sure, that it will help in webpack 2 too)\n. New webpack 2 issue bring new question. Could we do everything with this config?\nHow we could cover addDependecyTo case in this PostCSS global config? https://github.com/postcss/postcss-loader#with-postcss-import\n/cc @michael-ciniawsky\n. @ertrzyiks do we have any way to pass webpack instance to config?\nIf not, we could ask @michael-ciniawsky for some solution\n. Hm. Maybe we could use result.message and set new files to some dependencies. And then it will work out of box in postcss-loader?\n@ertrzyiks sorry for delay, it is very big API changes, let\u2019s think twice to avoid haters to hate :D\n. @swernerx @MoOx @TrySound @borodean what do you think if all import plugin should set absolute path for all used resources to use it then in webpack?\njs\nresult.messages.push({ type: 'dependency', path: '/home/ai/test/images/logo.png' })\nAs result hot reload will work out-of-box in postcss-loader, without painful config.\n. @michael-ciniawsky result.file requires PostCSS release :). We specially have messages for plugins communications.\n. @michael-ciniawsky awesome!\n@ertrzyiks you will kill me :D sorry, for real big delay. I will try to release it tomorrow. Feel free to ping me every day since Saturday.\n(The only excuse for me, that I did awesome new secret open source :) )\n. Finally merged. Thanks, great work. I just need to update docs, add result.messages with dependencies and we are ready for release.\n. @michael-ciniawsky great work! Few moments:\n1. Yeap, sponsor badge should be right after main description.\n2. You could remove my name from README :).\n3. I love your style. But could we keep old, please? =^_^= I love that right now all PostCSS project has same style. Maybe in the future I will be ready for global changes.\n4. We also added plugins loader query params for webpack 2.0 https://github.com/postcss/postcss-loader/pull/104\nI could pull your changes and fix all this list tomorrow (you did a lot with config loader) :).\n. Hm, by the way, maybe somebody want to take maintaining for this loader? It is not hard.\nBut I ma not webpack user at all. You showed great productivity and good understanding of webpack.\nI think project will be better if maintainer could at least test it on work project :D.\n. @michael-ciniawsky yeap, you could keep it :)\nIf you want to move them to postcss org, I could give you a access to org too.\n. @michael-ciniawsky what exactly \u201ccontent related ajustments\u201d?\nI like that you split webpack 1 and webpack 2. But maybe we should promote your config first?\n1. Install\n2. Usage\n   1. PostCSS Config\n   2. Webpack 2 config\n   3. Webpack 3 config\n3. Options\n4. Examples\n. @michael-ciniawsky I pulled docs changes, thanks.\n. I wrk polish docs today \ud83d\ude0a\ud83d\udc4d\n. I finished all changes and ready for release. Could somebody test this plugin on real application? (Just replace version in package.json to postcss/postcss-loader)\n. @richardscarrott @michael-ciniawsky fix for webpack 2 config example: e6351b8\nIs it correct?\n. Oops, it was merge confict :D. Fixed.\n. @MoOx @michael-ciniawsky so in practice webpack anyway strip functions from options?\nSo, should we remove plugins from query options and force to use postcss.config.js?\n. @MoOd it is great. But @michael-ciniawsky shows different \ud83d\ude15. Do we have any mistakes? Maybe we should replace loaderUtils.parseQuery to accepts functions?\n. I made a test case: https://github.com/ai/webpack2-postcss-test\nplugins key works perfect from webpack config, but postcss config has same issue. I will open a issue in postcss-load-config.\n. You should ask postcss-less-engine, seems like they try to require postcss and you didn\u2019t install it\n. Yeap, it is postcss-less-engine issue. They load postcss in index.js, but didn\u2019t add postcss to dependencies in their package.json.\nCould you create a issue there? Just put a link to my comments and mention me to subscribe me on this issue :).\n. I will start this feature after we will stabilize config https://github.com/postcss/postcss-loader/pull/97\n. @MoOx do we have any webpack 2 loader API changelog?\nWhat changes do you suggest?\n. Fix by https://github.com/postcss/postcss-loader/pull/104\nNow we have plugins option to query.\n. I finished all changes and ready for release. Could somebody test this plugin on real application? (Just replace version in package.json to postcss/postcss-loader)\n. Guys! Thanks for you tests.\nNow we fixed most of them. Could you test postcss-loader from GitHub again?\nAfter 3 \u201cworking\u201d reports, I will release new version ;).\n. @farwayer hm, very strange it works for one users, and doesn\u2019t work for rest :-/\n. @farwayer new syntax in rules and options/plugins works fine in my test https://github.com/ai/webpack2-postcss-test\n. OK. @michael-ciniawsky publish postcss-load-confg release candidate. Let\u2019s check postcss-loader last time.\n. 1.0 was released. Thanks to everyone for help.\n. @fmal postcss-loader 1.0 doesn't need LoaderOptionsPlugin.\nCould you show your config, I will try to find issue there.\n. @Birowsky define them in package.json: https://github.com/michael-ciniawsky/postcss-load-config#packagejson\n. Sorry, I will release it with config (maybe on next week)\n. Why extra option instead of having option in root level in query?\n. Maybe we should name it as plugins?\n. I just need to update docs, add result.messages with dependencies and we are ready for release.\n. I finished all changes and ready for release. Could you test this plugin on real application? (Just replace version in package.json to postcss/postcss-loader)\n. Fix in master. Release will be in next 5 days.\n. We still in webpack 2 support development. Did you use postcss-loader from master by \"postcss-loader\": \"postcss/postcss-loader\" in your package.json?\n. Here is a discuss: https://github.com/postcss/postcss-loader/issues/99\nWe tried to fix webpack 2 support, change docs, but didn\u2019t release it to npm yet (there are many changes, we need to check them first).\n. 0.13 has no webpack 2 support.\nCould you help us and test postcss-loader from git master for webpack 2 support?\nHere is discussion https://github.com/postcss/postcss-loader/pull/97\n. Hm. Could you try to move plugins to postcss.config.js (docs contains example).\n. Could you show your webpack and PostCSS config?\n. You sets PostCSS plugins to LoaderOptionsPlugin abd to PostCSS config \ud83d\ude0a.\nCould you remove it from LoaderOptionsPlugin?\n. And please set syntax in gist to syntax highlight.\n. Maybe issue cane from vue loader? At least it is vue in stacktrace.\nCould you test it without vue?\n. Yeap, very strange. But I have no idea \ud83d\ude15.\n. cc @michael-ciniawsky\n. @lavezzi1 try this postcss.config.js:\n``` js\nmodule.exports = {\n    plugins: [\n        'postcss-import': false,\n        'postcss-nested': false,\n    'postcss-simple-vars': false,\n    'postcss-cssnext': {\n        warnForDuplicates: false\n    }),\n    'postcss-calc': false,\n    'postcss-functions': {\n        functions: {\n            darken: function (value, frac) {\n              var hsla = color(value).toHslaArray();\n              hsla[2] = Math.round(Math.max(Math.min(100, hsla[2] - hsla[2] * frac), 0));\n              return color().fromHsla(hsla).toHexString();\n            }\n        }\n    }),\n    'lost': false\n]\n\n}\n``\n. Oops, I forget to remove)`:\nCorrected config:\n``` js\nmodule.exports = {\n    plugins: [\n        'postcss-import': false,\n        'postcss-nested': false,\n    'postcss-simple-vars': false,\n    'postcss-cssnext': {\n        warnForDuplicates: false\n    },\n    'postcss-calc': false,\n    'postcss-functions': {\n        functions: {\n            darken: function (value, frac) {\n              var hsla = color(value).toHslaArray();\n              hsla[2] = Math.round(Math.max(Math.min(100, hsla[2] - hsla[2] * frac), 0));\n              return color().fromHsla(hsla).toHexString();\n            }\n        }\n    },\n    'lost': false\n]\n\n}\n``\n. @lavezzi1 try this one (I forget to change[]to{}`):\n``` js\nmodule.exports = {\n    plugins: {\n        'postcss-import': false,\n        'postcss-nested': false,\n    'postcss-simple-vars': false,\n    'postcss-cssnext': {\n        warnForDuplicates: false\n    },\n    'postcss-calc': false,\n    'postcss-functions': {\n        functions: {\n            darken: function (value, frac) {\n              var hsla = color(value).toHslaArray();\n              hsla[2] = Math.round(Math.max(Math.min(100, hsla[2] - hsla[2] * frac), 0));\n              return color().fromHsla(hsla).toHexString();\n            }\n        }\n    },\n    'lost': false\n}\n\n}\n```\n. :) I fixed example in docs.\nCould you help in second test. Could you set PostCSS plugins in webpack config instead of PostCSS config?\nReplace 'postcss-loader' to:\njs\n{\n  loader: 'postcss-loader',\n  options: {\n    plugins: () => {        \n      return [      \n          require('postcss-import')({       \n              addDependencyTo: webpack      \n          }),       \n          require('postcss-nested')(),      \n          require('postcss-simple-vars'),       \n          require('postcss-cssnext')({      \n              warnForDuplicates: false      \n          }),       \n          require('postcss-calc'),      \n          require('postcss-functions')({        \n              functions: {      \n                  darken: function (value, frac) {      \n                    var hsla = color(value).toHslaArray();      \n                    hsla[2] = Math.round(Math.max(Math.min(100, hsla[2] - hsla[2] * frac), 0));     \n                    return color().fromHsla(hsla).toHexString();        \n                  }     \n              }     \n          }),       \n          require('lost')       \n      ]\n    }\n  }\n}\nAnd remove postcss.config.js\n. @michael-ciniawsky we fixed this issue \ud83d\ude0a\ud83d\udc4d it was my mistake, I used wrong config example docs (array instead of object).\nI think we don't need dynamic parser, so we could set function only to plugins.\n. @michael-ciniawsky you could ignore addDependencyTo case, we found better solution\n. Yeap, it is how I see it.\n. Thanks!\n. We wait for postcss-load-config release (I planned to release in Saturday, so didn't create a branch).\nSeems like release will be in this week.\n. 1.0 was released. Thanks for waiting.\n. Could you test Autoprefixer by user-select: none?\n. Autoprefixer works? Hm, maybe I was wrong that it is postcss-loader issue.\nYou told that other syntax work. Could you repeat?\n. Try to put postcss-nested before postcss-mixin.\njs\n    postcss: [\n        values,\n        autoprefixer({ browsers: ['last 2 versions'] }),\n        require('postcss-mixins'),\n        require('postcss-nested')\n    ],\nAlso I recommend to use PreCSS. It has all Sass-like plugins in right order.\n. What version exactly you have?\nWhat webpack/postcss config you have?\n. Could you show full config? :)\n. You have .scss files, but rule in webpack config has test: /\\.css$/,, so it works only for .css files ;)\n. Could you show your exactly config if you changed that config? ;)\n. Could you show your final config, please? Not base config with a diff ;).\n. Could you try to use postcss-loader without Angular magic? I think problems is in .scss \u2192 .css Angular AOT things.\n. @michael-ciniawsky ^ seems like we still have warnings\nWhy you use node-sass outside of webpack and don\u2019t do it by sass-loader? Sorry, your config seems like too complicated to me, I have no idea, how to fix it ;).\nTry to make it more simple.\n. Sorry, have no idea. You should ask somebody who know all that Angular magic or make build process more simple \ud83d\ude0a.\n. We suggests only plugins to be a function, not options:\njs\n          {\n            loader: 'postcss-loader',\n            options: {\n              plugins: function () {\n                return [\n                  require('precss'),\n                  require('autoprefixer')\n                ];\n              }\n            }\n          }\n. Hm. Very strange, I testes with latest webpack 2 and its accepts function. What exactly version of webpack do you use?\n. If you need configurable syntax option, you should use PostCSS config (also it is better way, than put plugins to webpack config)\n. What is makePostcssConfig? :D\nHere is a docs about common PostCSS config: https://github.com/postcss/postcss-loader#postcss-config\nAnd here is a example how to use config https://github.com/michael-ciniawsky/postcss-load-config#examples\n. For my /\\.(sss|css)$/ case is too complicated. I think you should use power of webpack\u2019s test and have separated loaders:\n``` js\nmodule: {\n  rules: [\n    {\n      test: /.sss$/,\n      use: [\n        ...,\n        {\n          loader: 'postcss-loader', \n          options: {\n            parser:  'sugarss'\n          }\n        }\n      ]\n    },\n{\n  test: /\\.css$/,\n  use: [\n    ...,\n    {\n      loader: 'postcss-loader'\n    }\n  ]\n}\n\n]\n}\n``\n. @michael-ciniawsky oops, we forget aboutresourcePath. How I can set current file path inpostcss-load-config`?\n. @Kovensky\n\nThirdly, postcss-load-plugins refuses my generated config, even though it works through the postcss API used by postcss-loader 0.13.0.\n\nWhat config exactly? postcss-load-plugins loads special new config. It is not a webpack config, it is common PostCSS config. So postcss-loader 0.13 had no this config.\n. @Kovensky \n\nThe problem with having separate loader configs is how css-loader handles @import or composes: x from 'y'.\n\nI think it is css-loader issue. We could make some hacks in postcss-loader to handle resourcePath sss hack, you wrote. But new users will not be so smart as you.\ncss-loader should handle it out-of-box. Adding more hacks is not a user friendly way :(.\nIf you need some solution right now. Maybe you should try postcss-modules? I am really not happy, how hacky CSS Modules are in css-loader. So postcss-loader is a simpler way.\n. @michael-ciniawsky my path concern is not relevant for ctx. I told about:\npostcss.config.js\nscr/\n  index.css\n  legacy/\n    postcss.config.js\n    index.css\nSo src/legacy/index.css will have different plugins.\nAre we ready for it? I hust need to set path to second argument?\n. @michael-ciniawsky of couse, we could set ctx in 1.1 too. Right now a (how some strange reason, I think it is a mistake) calls loadConfig(pack) (pack is a plugins pack name).\nI should replace it to loadConfig(loader, loader.resourcePath)?\n. @michael-ciniawsky pack is a mistake, I will replace it to loader.\n. @michael-ciniawsky everything is fine here? 7152ad63a8816e74626345d5b37589f6\nI set webpack instance to ctx.webpack (because you merge ctx with default context, so all webpack instance functions could be missed).\nIf everything is fine, I will release 1.1.\n. @michael-ciniawsky :+1: sure, ping when when you will release it\n. @michael-ciniawsky any updates or it is bog task?\n. postcss-loader 1.1 is now released\n. You could not do like this\npostcss-loader?browsers=last 2 versions\nbrowsers is a autoprefixer options. postcss accepts only plugins list and syntax options.\nPlease, read docs more careful.\n. Autoprefixer browsers should be in browserslist config.\n. You have\nTypeError: Cannot read property 'config' of null at postcss-load-config\\index.js:50:22\nwarning because you didn\u2019t set common PostCSS config (with Autoprefixer)\n. I added browserslist to docs: ec2b13e\n. @dkrutsko this warning is temporary problem of postcss-load-config. postcss-load-config shows this warning when it could not find a config.\nReal problem is that you use wrong syntax and PostCSS doesn\u2019t see a plugins that you set. So PostCSS loader try to look for config and show this warning.\n@dkrutsko why you write plugins in query key? We recommends common PostCSS config.\nIf you don\u2019t want to use common PostCSS config (it is not a good idea) you should set plugins in options key, not query.\n. @dkrutsko check our documentation :) we wrote how to set loader options https://github.com/postcss/postcss-loader#webpack-2x-config\n. @EvNaverniouk yeap, warnings happens because of issue in postcss-load-config.\nI hope @michael-ciniawsky will fix it soon :).\nDon\u2019t worry about this warning, it happens because postcss-load-config could not find a config.\n. It doesn\u2019t work even if you change function to object in postcss key?\nVery strange, because we have a tests for this case.\nCould you try object and show a full config.\n. Object is just:\njs\n  postcss: [\n      postcssImport({\n        glob: true\n      }),\n      cssnext()\n  ]\npostcss-loader don\u2019t need a addDependencyTo hack anymore. But auto-addDependencyTo works right now only in postcss-smart-import. If you want this support in postcss-import, please support this issue: https://github.com/postcss/postcss-import/issues/233\n. postcss-loader 1.1 is now released\n. I have tested loaderUtils.parseQuery and it works fine. Could you provide your config? Also have you tested PostCSS common config, that we recommend to use?\n. And what is your results with common PostCSS config?\n. Could you create a test project? I will look at it today evening\n. I found a problem ;). You will be surprised.\nProblem is with your JS coding style ;). You insert a \\n between return and plugins list:\njs\n                    {\n                        loader: \"postcss\",\n                        options:\n                        {\n                            plugins: function()\n                            {\n                                return\n                                [\n                                    require (\"postcss-cssnext\"),\n                                    require (\"postcss-position-alt\")\n                                ];\n                            }\n                        }\n                    }\nSo JS think that you returns nothing ;). I remove this new line and everything works on me.\nI got his bundle.css:\ncss\nbody\n{\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    color: rgb(200, 200, 200);\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    top: 0;\n}\n. @soulhunter1987 string-replace \u2014 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u0441\u043f\u043e\u0441\u043e\u0431. \u0412\u043e\u0437\u044c\u043c\u0438 postcss-simple-vars, \u043e\u043d \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u043f\u0446\u0438\u044e variables \u0441 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u2014 \u043f\u043e\u0441\u0442\u0430\u0432\u044c \u043a\u0430\u043a\u0438\u0435 \u0445\u043e\u0447\u0435\u0448\u044c.\ncss\n:root {\n    --some-var: $systemColor;\n}\njs\npostcss: function () {\n  return [\n    postcssSimpleVars({\n      variables: {\n        systemColor: process.env.COLOR\n      }\n    })\n    postcssCustomProperties,\n    postcssApply,\n    autoprefixer\n  ];\n}\n. Sure. I am not native speaker, so it is hard to me to write docs.\nCould you help here? What questions do you have? How I can improve it?\n. @michael-ciniawsky it will be very helpful.\nHere is a browserslist config docs https://github.com/ai/browserslist#config-file\n. I removed this section b6c38c1 because AP issue was fixed in css-loader\n. Thanks, it is very big docs mistake. It is good that you find it :+1: \n. What you mean exactly? What part of CSS didn't reloading? Variables in JS files? Entire CSS? Config changes?\n. Fast solution: use postcss-smart-import, instead of postcss-import\nI will update docs later, about this problem with postcss-import\n. @troutowicz here is a issue in postcss-import, could you ping it, so postcss-import will fix a problem? https://github.com/postcss/postcss-import/issues/233\n. Done b6c38c1\n. It is still supported un webpack 1.0 config. But in PostCSS common config and in webpack 2.0 you just don't need packs hack.\n. So we remove this hack from docs. Webpack 2.x users should use different loaders. Webpack 1.x users should use different dir with different PostCSS config inside.\n. It is just a warning, when you didn't provide any plugins to PostCSS.\nBoth your config had no plugins, just set plugins and warning will be removed \ud83d\ude0a.\nWe fixed this issue, just waiting for postcss-load-config release.\n. @michael-ciniawsky let\u2019s release new version ;)\n. @lourd don\u2019t use LoaderOptionsPlugin ;) postcss-loader supports webpack 2\n. @lourd did you try PostCSS Common Config? It is on the top in docs, because it is recommended way to use postcss-loader.\n. postcss-loader 1.1 is now released and it doesn\u2019t show this warning anymore.\n. @CrashyBang please show you PostCSS common config and webpack config.. @CrashyBang please check postcss-loader docs. You need to put plugins into separated postcss.config.js config.. @michael-ciniawsky did we already release config option?. \u201c1 month ago\u201d \ud83d\ude05\nYeap, we need a Config section in options docs.. postcss.config.js should be in project root.\nCould you show your webpack config when you try to put PostCSS plugins there?\n. Strange. Could you comment vue-loader, to be sure, that error came from postcss-loader?\n. @marcelaraujo could you show webpack config without LoaderOptionsPlugin?\nYou don\u2019t need LoaderOptionsPlugin. We recommend to use postcss.config.js, but it is not requirement.\n. @marcelaraujo what do you have at params and loader.query on this line https://github.com/postcss/postcss-loader/blob/master/index.js#L46 ?\n. Strange, could you create some small test project? I will look on next week.\n. Seems like query works in some cases and didn't work in other (on same versions).\nRight now just use PostCSS common config. Anyway it is recommended way \n. Until webpack 2 is not released I will promote only common config 8c7cede95def570c79a497981e3d57ef173fa853\nHave no idea how to fix this problems (webpack has really problems with complexity)\n. @Imanullah don\u2019t use LoaderOptionsPlugin. Just check current postcss-loader docs. Use PostCSS common config.\n. @azat-io Could you try PostCSS common config?\n. Seems like we have a mystery issue in webpack 2.\nI have no idea how to fix it and just will force a common config.\n. If you worry about too many config files, just put PostCSS plugins in package.json.\nOr help me with debugging \ud83d\ude06\n. Also you could try postcss-modules'\n. Please +1 this issue in postcss-import: https://github.com/postcss/postcss-import/issues/233\nOr just use postcss-smart-import https://github.com/sebastian-software/postcss-smart-import\n. postcss-import now supports automatically addDependencyTo.\n@wonderbeyond postcss-smart-import supports it too. Use PostCSS common config as mentioned in docs.\n. PostCSS common config will be possible to use for all PostCSS runners. But right now postcss-cli use old own format :(.\nHere is a issue in postcss-cli about moving to new config.\nhttps://github.com/postcss/postcss-cli/issues/45\nPlease +1 there to mark that this issue is really important.\n. https://github.com/postcss/autoprefixer/blob/master/README.md#no-prefixes-in-production\n. Please support this issue to fix this problem https://github.com/webpack/css-loader/issues/281\n. 1. Use PostCSS common config with ctx.webpack\n2. I will accept this PR only tomorrow (it is time to go to bed for me :) )\n. Loader options are deprecated (because of webpack bug).\nConfig: https://github.com/postcss/postcss-loader#usage\nWebpack instance: https://github.com/postcss/postcss-loader#dynamic-config\n. webpack loader context is in ctx.webpack. ctx is not node global context. It is a argument for PostCSS common config:\njs\nmodule.exports = function (ctx) {\n. Here is more docs about ctx in PostCSS common config https://github.com/michael-ciniawsky/postcss-load-config#context\n. I told that I am sleeping \ud83d\ude09\nI anyway planned to merge it and release tomorrow.\n. I will do it tomorrow \n. @jescalan released as 1.1.1.\nBut note, that loader options was deprecated ;).\n. Thank you for fix :)\n. Hm. Should we add sourceMap=false or check prev maps?\nI don\u2019t like to check prev maps, because postcss-loader could be used wuthout css-loader.\n. @princed thanks for report. I fixed a example: a3ea3ec\n@michael-ciniawsky should we add more warnings in postcss-load-config about mistakes in config?\n. @Skilgarriff what errors exactly? We need stacktrace too.\n. @catalin-miron-hs why you open a caniuse-db issue here? Or we could fix it here?\n. @ntwb why we should add engines here and not to postcss-load-config?\n. @ntwb so, do we need a engines in postcss-loader if it is already in postcss-load-config?\n. @ntwb and why we need it if it is already in postcss-load-config?\n. I mean when benefits user will get? npm warning will be the same?\n. It is correct extension for SugarSS \ud83d\ude0a this example show how to change a parser.\nBut thanks for be attentive.. Thanks for PR. Let\u2019s discuss one thing.\nMain idea behind common PostCSS config is to share same config between different tools: webpack-loader, IDE, etc. With config path other tools will not find config and will work in different way.\nDoes babel CLI has option for config? Where you put .babelrc?. I like clean project tree too. But I think right now root is a common place for config \ud83d\ude06.\nBecause I love global config idea. What do you think about this solution. We will add this option, but still not as part of public API?\nIt will not be in docs to not blocking global config promotion. OK?. Sorry. This questions is for ExtractTextPlugin. I didn\u2019t use it. Especially because webpack 2 is in beta and have many small issues.\nOpen issue if they found some issue in postcss-loader.. I will confirm and release today at evening. Published in 1.2. Thanks for your work =^_^=.. Sorry, you should ask webpack team. Webpack 2 is in beta has many issues and I even don't use it to give you good support \ud83d\ude15. IMHO, your config is right. Thanks! Release in 1.2.1.. What postcss-import do you use? The latest version supports dependency message and postcss-loader use this message for behavior that you want:\nhttps://github.com/postcss/postcss-loader/blob/master/index.js#L125. Custom config path is a private API for rare cases.\nYou should put PostCSS config somewhere in style files path. Babel has no custom path at all.\nCustom config path is bad practice because of:\n\nOther tools (IDE, linters, etc) will not understand custom config path automatically.\nOther developers could miss config too.\n\nIn this case, I am not big fan of improving this feature.\nWhat your use case why you need custom config path?. @jrmlstfMt why not put config files to root? Do you have ration reason for separated dir? :). @jrmlstfMt I understand that one config dir is better :). I want it too :D.\nBut I think having option without a some config dir agreement in community will reduce maintainability.\nMaybe we should start some movement about having .config/* dir in project root?. BTW, you could store your PostCSS config in package.json to reduce config files in root.. @jrmlstfMt unfortunately, Babel developers did not support .config/ idea (I asked them in prev. week). @CrashyBang https://github.com/michael-ciniawsky/postcss-load-config#packagejson. Yeap, you can replace it. You can even replace styl-loader by SugarSS syntax in postcss-loader.\nBut, because many developers uses different ways, I can\u2019t show single example. For instance, some of React developers doesn\u2019t like a separated JSON from postcss-modules.. Anyway PR is welcome, maybe you can write example better. In 1.0 we promote only PostCSS common config. You don't need a pack option for it. So this is a reason, why we don't mentioned it in docs. \nYou could create a issue in boilerplate to move to latest postcss-loader API.. Instead of force users to change API I prefer lazy API updates. I removed webpack config docs, so new users will start to use new API. But we still support old API.\nHere is PostCSS common config docs: https://github.com/postcss/postcss-loader#usage. Good question. Could you find an author of this change by git blame and ask him why he add it. If he will not give a good reason, let\u2019s remove this line.. Sure. But let's wait few days for origin author reasons. Maybe we missed something.. @TrySound send PR with removing it.. @felixsanz please create a issue in extract-text-plugin and mention me there. Webpack 2 is still in development, seems like they have a issue.. We don\u2019t need multiple configs anymore https://github.com/postcss/postcss-loader#plugins. @samjbmason please, debug what you have here in params.plugins and loader.options?\nhttps://github.com/postcss/postcss-loader/blob/master/index.js#L48. @samjbmason open plugin code in node_modules/postcss-loader, put console.log(params.plugins, loader.options) after line 48. Run build. Post here the output.. Replace it to console.log(options). Did you put it after 48 line? What output will be for console.log(params.plugins || loader.options.postcss)?. @michael-ciniawsky seems like it has postcss in loader by some reason :-/. @samjbmason Could you replace line 48 to:\njs\nvar options  = params.plugins || loader.postcss || loader.options.postcss;\nDid it fix build for you?. @michael-ciniawsky oops, it was webpack plugins :). @samjbmason go to webpack team. It is webpack 2 issue or webpack UX issue.\n/cc @TheLarkInn . @samjbmason they will need your full config, full webpack version and that loaderUtils.parseQuery(loader.query) didn\u2019t contains config options.. @TheLarkInn maybe I use API in wrong way? But I didn\u2019t found good 2.0 migration guide for loader authors.\nWe load plugins from:\njs\n{\n  loader: 'posctss-loader',\n  options: {\n    plugins: [function () { \u2026 }]\n  }\n}\nby loaderUtils.parseQuery(loader.query).plugins. BTW, we should not use LoaderOptionsPlugin here.\nSeems like webpack 2 has a issue. If we will fix it by a hack, issue will be released version and many users will get it.\nSo, don't use hack. Create a issue in webpack repo.. I will add config option on this week.. Do we need a ctx magic if we will have different config paths? But I am OK with both syntax: config: \"path\" and config: \"path\", ctx: { \u2026 }. @bebraw postcss-loader now offically support plugins parameter in webpack config. https://github.com/postcss/postcss-loader#plugins\nDo we need multiple config anymore?. @michael-ciniawsky OK, let\u2019s add config. But I want a PR for it :).. Wow. Great addition.. Released in 1.2.2. Thanks for you big help in this project.. Could you remove all webpack plugins and try again?. Nope, in that PR config could be generated from loader options. Check then above.\nTests are passed too.. @TheLarkInn I need you help here. Do we need to change our current docs?\nhttps://github.com/postcss/postcss-loader#webpack-2-1. @maratfakhreev @artemkaint please show your full configs. In most previous cases it was not a PostCSS loader problem, but Extract Text plugin or other crazy thing.. PostCSS doesn\u2019t use Browserslist. But Autoprefixer uses Browserslist. So if you use Autoprefixer in this loader, it will load browserslist from package.json.. @craigcosmo post a full stacktrack please. Show full console output when you get this error.. @iamvdo seems like this issue from pleeease-filters. @craigcosmo it is stacktrace:\nERROR in ./~/css-loader?sourceMap&importLoaders=1!./~/postcss-loader?sourceMap&parser=postcss-scss!./app/style/page.css\n    Module build failed: TypeError: oneColor(...).cssa is not a function\n        at Object.Filter.filters.dropShadow (/Users/craigcosmo/Desktop/lark chat app/node_modules/pleeease-filters/index.js:401:36)\n        at Filter.convert (/Users/craigcosmo/Desktop/lark chat app/node_modules/pleeease-filters/index.js:543:30)\n        at /Users/craigcosmo/Desktop/lark chat app/node_modules/pleeease-filters/index.js:575:36\n        at /lib/container.es6:152:28\n        at /lib/container.es6:110:26\n        at Rule.each (/lib/container.es6:78:22)\n        at Rule.walk (/lib/container.es6:109:21)\n        at Rule.walkDecls (/lib/container.es6:150:25)\n        at /Users/craigcosmo/Desktop/lark chat app/node_modules/pleeease-filters/index.js:556:8\n        at /lib/container.es6:199:28\n        at /lib/container.es6:110:26\n        at Root.each (/lib/container.es6:78:22)\n        at Root.walk (/lib/container.es6:109:21)\n        at Root.walkRules (/lib/container.es6:197:25)\n        at Filter.postcss (/Users/craigcosmo/Desktop/lark chat app/node_modules/pleeease-filters/index.js:554:6)\n        at LazyResult.run (/lib/lazy-result.es6:321:20)\n        at /lib/lazy-result.es6:248:32\n        at LazyResult.asyncTick (/lib/lazy-result.es6:246:13)\n        at /lib/lazy-result.es6:260:22\n        at LazyResult.asyncTick (/lib/lazy-result.es6:246:13)\n        at /lib/lazy-result.es6:260:22\n        at LazyResult.asyncTick (/lib/lazy-result.es6:246:13)\nAlways post it in issues.. @craigcosmo this issue is not came from postcss-loader. It came from PostCSS plugin, that you use inside loader. Please open issue here: https://github.com/iamvdo/pleeease-filters. Good change. I will accept it and release on this weekend (sorry, I am in the travel right now).. Released in 1.3.0.. Just put postcss.config.js to Project_1. The whole idea of postcss.config.js is to store plugins to process file with the files.\nSo if you will start to use Project_1 in some new Project_3 you will be free to remembering what plugins do I need to Project_1\u2019s files.. Advice about was from things like PreCSS. If you need just project-specific tools, like Autoprefixer. You should pass plugins as options to loader (there is no other way).. Will you have a error if you will remove postcss-loader?. And if you will remove extract text plugin?. You should write to extract-text-plugin. I could not see how it should be relevant with postcss-loader.\n@michael-ciniawsky do you agree? I think you saw some issue like it before.. Thanks. Released in 1.3.1.. .sss is a SugarSS. :D You are not first who send this PR. Maybe we should find better example.. > Remove ctx.webpack (big && slow) in favour of ctx.file ?\nMaybe. What other useful information could be in loader?\n\nRemove Presets/Packages options.pack ?\n\nI afraid webpack 1 users :D. But pack is not so popular. We can ask them to migrate to webpack 2 or keep old version.\n\nDrop node v0.10/0.12?\n\nOf course.\n\nWait for PostCSS v6.0.0?\n\nGood idea if we can wait about month (I am preparing for React London).. I added issue to bookmarks and will tweet about it on next week to collect more feedback.\nAlso we will need good step-by-step migration instructions.. @michael-ciniawsky maybe you should be a maintainer for this loader? Anyway you answered for most of issues. Rest work is simple and doesn't need too much time.. Good idea too. Let's wait for @michael-ciniawsky answer and transfer maintaince \ud83d\ude0a. @michael-ciniawsky welcome on board (you can add @evilebottnawi as well).\nI hope to release PostCSS 6 in next week.. Released in 1.3.2. @jantimon maybe we could remove whole warning? Or make it more smarter?. Maybe we should remove this warning? Event is very rare and I don\u2019t think warning is very useful.. Released in 1.3.3. Released in 1.3.3. This loader works with many plugins. For example, Autoprefixer has warnings too. If loader will always throw a error on warning, it will break many systems.\nAll PostCSS plugins have access to result.messages. If you need to different behaviour for warnings, just add plugin. Like postcss-reporter.. Do you have @import in you input fixes? Maybe input files affect to precss?. Show full config. I think you need @michael-ciniawsky help (it is webpack UX overall problem, not postcss-loader only).. 1. Show full config.\n2. Show input, output and expected output.. Nope. Could you remove config? Maybe options doesn\u2019t work on your webpack. Show your configs.. What is your use case for it?. OK, I will try to fix it after React London. If you want if sooner, feel free to send PR.. Do we need some loader changes? . I still don\u2019t understand this issue and what we should change :). Why user would have empty plugins and options?. If someone will have good use case for it, we will reopen issue.\nRight now I think, error message for wrong configuration is more important (it is easy to miss warning, instead of error).. @evilebottnawi can you show your config?. Hm, maybe we should do not show warning when user pass [] and still show it when user didn\u2019t pass anything (here is a problem, that we try to fix with this warning).\nI will think for few days and then decide.. Sure, we can wait few days.\n\nPlugin API changes are small and should not affect most of plugins.\nWhat is map.names? Where I can read more about it?\nSure, you are maintainer and you can change project docs style.. Let\u2019s move map.sources fix on next PostCSS release. Looks like we will not fix it very soon. Is it OK?. Nope. I will look in next few hours.. @koresar tell me more about the issue. I can remove the release from npm, but I need to clearly understand what happened to not make it worse.. @koresar it is not a \u201ctell me more\u201d ;). How options['useConfigFile'] is an invalid additional property is connected with this PR?. I reverted additionalProperties and released 2.1.3\n\n@michael-ciniawsky sorry that I did it for you, emergency situation. I reverted additionalProperties and released 2.1.3. I reverted additionalProperties and released 2.1.3. Looks good. But I prefer to wait @michael-ciniawsky. I will release only critical issue.\n@kisenka you can use GitHub version of postcss-loader before this PR will released.. OK. I will release it today. Released :+1: \n. Or even move it to the core \ud83d\ude0f. I don\u2019t have npm access to help here with a quick release. Try to write an email.. Forking is not an option. Especially, just to update dependencies.. @michael-ciniawsky glad you are back \ud83d\ude38. Yeap, no rush.\nCould you give me (iskin at npm) npm access just in case of security or other critical issue?\nI am still thinking what we will get from adding library as dependency to PostCSS core. Seems like right now all PostCSS runners anyway use it.. @michael-ciniawsky there is a nice technique with browser key in package.json, which we discovered for Nano ID during Size Limit benchmarking.\nWe used in Browserslist to have separated parts for Node.js and browser.. I think my contact will be enough.\nYeap. Let's create a issue in postcss/postcss. The problem is between Sass, source-map and PostCSS :D. Nope. The best way to understand what happens https://sokra.github.io/source-map-visualization/. /cc @michael-ciniawsky . I removed && !opts.syntax to allow override syntax in query (somebody may need it)\n. ",
    "gaearon": "I see! Thanks.\n. I checked it out but I can't figure out what exactly postcss-import plugin does and how it's different from running without it :-(.\nDoes it make a real difference, or is it an optimization? Do you need it enabled in development?\n. I think the problem is that Webpack is ignorant of PostCSS dependencies. Generally loaders should tell Webpack what files the processed file depends on, so that when dependant files change, the parent is recompiled. addDependency might (or might not :-) be the API for this.\nI don't know if PostCSS exposes the dependency tree after compiling a file. If not, there's no way to make postcss-import work with hot reloading because Webpack is unaware of internal dependencies.\n. Agreed, this seems like overcomplication.\n. > @gaearon BTW, why webpack uses so bad parser in css-loader and not PostCSS parser?\nI can't speak for @sokra but I'm sure that it is only for historical reasons? If you port it to use a better parser, I think that would be awesome.\n. ",
    "at0g": "I tried swapping the order of css-loader and postcss-loader so that:\nstyle-loader!css-loader?sourceMap!postcss-loader\nbecomes:\nstyle-loader!postcss-loader!css-loader?sourceMap\nThis caused an error and the module would not build :(\nI've also tried using a plain old css file instead of stylus, and the source map refers to the output of postcss and not the source file .\nAlso tried a stylus file on it's own (no postcss) and that failed to generate the correct sourcemap, making 3 for 3.\nI've made an example repo here showing the 3 failures: \nhttps://github.com/at0g/webpack-css-sourcemaps\n. @MoOx - I know totally weird right - one or the other would make more sense.\nI tried a different approach here:\nhttps://github.com/at0g/webpack-css-sourcemaps/tree/gulp\nThis time gulp is being used to preprocess stylus and generate an external sourcemap.\nThe compiled css then goes to webpack (postcss-loader & css-loader).\nIn this configuration, postcss-loader works exactly as expected, so I'm going to close this issue.\nSorry about the red herring and thanks for the help.\n. @boopathi - I think that sass (and stylus) loaders are not generating sourcemaps correctly. \nhttps://github.com/jtangelder/sass-loader/issues/92\n. ",
    "MoOx": "css-loader returns javascript so you can not execute it before any related css stuff.\nYour output in sourcemap is weird since it seems to be a mix of stylus / mqpaker (no { or :).\n. @ai since you create a new way to declare plugin (postcss.plugin()), can you handle that automatically ? That would be cool.\n. Ok I need to finish custom-properties 4.0 but one issue is still to handle.\n. So I will be able to remove .postcss export from plugin that have it. That's nice. :)\n. You are using ExtractTextPlugin the wrong way, check the doc again.\n. I probably missed the optional notExtractLoader. So I have no idea.\n. Don't do that. postcss-import can already handle this. Like said in the description or the linked issue, cssnext-loader already handle this using postcss-import onImport option.\ncss-loader (which handle import) is using an old and deprecated parser and break in a multitudes of cases if it is run before postcss/cssnext-loader.\nSo, since this can be handled here (like cssnext-loader does) you should totally handle it in this loader.\n. This has already been mentioned here https://github.com/webpack/css-loader/issues/36\n@ai I don't really know what they should put in onImport, probably something like this https://github.com/cssnext/cssnext-loader/blob/c7b79f5281a5e63adca933fc4ec434f965e686e3/index.js#L25-L27 and chaging this by webpack. This need some work to try and check it works.\n. Indeed. And you cannot use postcss after css-loader since this one return js code. So this must be handled when calling postcss-loader.\n. Do you use style-loader?\n. Can you show how you disable the ExtractTextPlugin ?\n. Reminders:\n- it's mentionned as the first note in bold https://github.com/postcss/postcss-import#readme\n- cssnext includes autoprefixer.\n. cssnext also have a \"plugins\" option to pipe more plugins.\n. This will be more clear in cssnext 2.x when cssnext will deprecate all cssnext runners in favors of postcss ones.\n. We need to get all modules compatible. Please track this issue https://github.com/cssnext/cssnext/issues/202\n. I guess we can close this.\n. Btw, we can even reduce the current boilerplate to\n``` js\n    postcss: function () {\n        // The context of this function is the webpack loader-context\n        // see: http://webpack.github.io/docs/loaders.html#loader-context\n    return [\n        postcssImport({\n            // see postcss-import docs to learn about onImport callback\n            // https://github.com/postcss/postcss-import\n\n            onImport: (files) => files.forEach(this.addDependency);\n        })\n    ];\n}\n\n``\n. Sure. Will do with proper instructions in the readme.\n. @ai It's not possible.\npostcss-loader execute the postcss transformation before css-modules produce the css to javascript code. That's probably an discussion that should be done in the css-loader repo. I asked @sokra to make the postcss instance of css modules public so we can plug and transform at the same moment (which might helps in the kind of situation) but we refused :/\n. With my knowledge, there isn't. css-loader does things in a different context... That's sucks for css-modules, like a lot.\n. :+1: \n. Just use sass-loader before (so after in the loader definition). This should not need any specific doc.\n. @ajsharp I think you are not using ExtractTextPlugin the right way.\nYou should useloader: ExtractTextPlugin.extract('style-loader', ['css-loader', 'postcss-loader', 'sass-loader'])}` (an array for the default loaders you want to use, the first parameter is used when extracttextplugin is disabled (so optional).\n. This does not have sense since you are posting an issue on postcss-loader tracker (which is obviously made for webpack, as it's a loader).\nDid you read the readme?\n. For now postcss-import does not handle scss parser. This should be fixed soon. Please track https://github.com/postcss/postcss-import/issues/96\n. Or even include this in this module?\n. maybe @JesseFarebro can do a pull request over there directly by inspiring himself from the addDependencyTo ?\n. 2 solutions: use postcss-import or carefully read css-loader doc on how to use loaders for imported files.\n. What is your postcss config?\nThe problem here (I think) is that css-loader with imports does not rebase url according to source?\nMaybe you can try to add in your stack postcss-import and postcss-url.\n. I have to admit that I am proposing a workaround. Not sure why you are getting differences...\n. It's related to babel@6 breaking change that do not export to module.exports if there is a single (default) export (which was the case in babel@5).\nSo it's definitely not a postcss-loader issue.\nMaybe this can be solved the thing that consume the export (postcss-js?).\nMeanwhile you can use \"module.exports\" instead of \"export default\".\n. it's supposed to work (and it's working for me). What is your version of postcss-import? If v8, can you try v7 please?\n. The only thing that is required is require(\"postcss-import\")({ addDependencyTo: webpack }),. addDependencyTo is the key to declare dependency to webpack, and so handle the rebuild that will trigger the hot loading. Does updating base.css trigger a rebuild?\n. addDependencyTo is what you passed to postcss-import. So it looks like a problem with your config or runtime env.\n. https://github.com/postcss/postcss-import/issues/210\n. +1 for this PR, but I would keep support for current syntax, and not deprecate it (because it's clearly enough for 99% of users (since nobody raised this issue before).\n. Some plugins like postcss-custom-properties and postcss-custom-media have options to define via JS some global options.\nExample: https://github.com/putaindecode/putaindecode.io/blob/381503c68be9c25403e40408f8dd1d2ede1e6089/scripts/webpack.config.babel.js#L104-L125\nFor my concern, I avoid at all cost global classes (hacks) so I don't have to solves this issues.\n. postcss entry expect a function that returns postcss plugins, not directly a postcss plugins.\nChange postcss: cssnano( to postcss: function () { return [ cssnano( or something like that. Please read the documentation and example in the README.\n. hot loading can be done for compiled code and config is not compiled.\n2 workarounds for you:\n- use a imported files (so hot loading ok)\n- auto restart webpack when webpack config changes\n. I just found a simple trick to hot load entire postcss config that even rebuild everything when you save your config from an external file.\nhttps://twitter.com/MoOx/status/797906437259169793\nYou might add that in the readme.\n. Here is the raw config:\n``` js\nconst postcssPluginFile = require.resolve(\"./postcss.config.js\")\n// ...\npostcss: (webpackInstance) => {\n    // hot loading on postcss config\n    webpackInstance.addDependency(postcssPluginFile)\n    delete require.cache[postcssPluginFile]\n    return require(postcssPluginFile)(config)\n  }\n```\nI guess you can handle that directly in the core: if postcss option is a string (we assume a path), you play the snippet. In my case, \"config\" is the webpack env option which is mandatory to tweak the postcss config\neg:\n``` js\nmodule.exports = (config) => [\n    require(\"stylelint\")(),\n    require(\"postcss-cssnext\")({\n      browsers: \"last 2 versions\",\n      features: {\n        customProperties: {\n          variables: {\n            maxWidth: \"60rem\",\n            colorPrimaryDark: \"#107491\",\n            colorPrimary: \"#007acc\",\n            colorSecondaryDark: \"#22846C\",\n            colorSecondary: \"#46BE77\",\n            colorNeutralDark: \"#111\",\n            colorNeutral: \"#8C8D91\",\n            colorNeutralLight: \"#FBFCFC\",\n            colorText: \"#555\",\n          },\n        },\n      },\n    }),\n    require(\"postcss-reporter\")(),\n    ...!config.production ? [\n      require(\"postcss-browser-reporter\")(),\n    ] : [],\n  ]\n```\n. The only way to get this working is by letting postcss-loader doing the require on each compilation (with a fresh node cache) with an absolute path (so we can clean the node cache, which is stored with absolute path). That's why I used path.resolve().\nUsing a require() before runtime just make this impossible...\nYou current \"syntax sugar\" is at the end more long than this\njs\n  postcss: path.resolve(\"./postcss.config.js\")\n(then the config in the file export a function like I just shown in a previous comment)\n. Do you use import statements?\n. You need to use postcss-import. (use v7 as v8 is buggy and will be replaced soon)\n. Since import plugins are used first, there is no need to put all resources, because the work will be done by webpack when css is inlined by the plugin. So maybe ok for the path, but no need for all resources. Anyway, for postcss-import, there is a total mess to handle. @TrySound made some huge changes and never really finished the job, so there are tons of issues related to race conditions... But current algorithm looks to complicated for my brain, and I am busy with new projects, so no time to handle this... That's why I called for contributor for postcss-import, but, as usual, not a single person responded.\n. Webpack 2 remove this restriction. You can pass anything in query now.\n. It's written in https://github.com/webpack/webpack/releases/tag/v2.1.0-beta.23\nIf this does not work, you are doing something wrong.\n. We must implement this asap. I can handle it, this change is required for me to cut a release for phenomic which require webpack 2.\nI will try to push a PR quickly. It should be easy to support webpack 1 & 2 at the same time since query can know accept normal JS (so function).\n. Well according to #97 I am going to wait. @ai I think with webpack 2 something could be done to support both version of webpack. I wrote several webpack loaders so poke me if you need a hand ;)\n. Problem is, the workaround mentionned earlier is not working if you use css modules. @ai poke me when you are ready to more forward, this is a small \"big deal\" we have to handle here :D\n. Changelog is: you can't rely on \"random\" properties in webpack global config.\nSo what you use to call via this.options.postcss have to be replaced.\nThe good news is: your params (the \"query\"  associated with the loader) now accept real JS, not just json (like it used to). So we \"simply\" need to normalize options passed to the loader by only using the \"query\". This will basically deprecate the \"pack\" option since it won't be necessary anymore.\ntl;dr: no more this.options.postcss and everything should be in params.\nFor backward compat we can refactor the code and simply read options like this\njs\nconst options = {\n   ...{ some default ? },\n   ...this.options.postcss,  // backward compat with v1\n   ...loaderUtils.parseQuery(this.query)\n}\nIt's what I am doing for eslint-loader and it's working like a charm https://github.com/MoOx/eslint-loader/blob/f965eecfd5dac6489abeaebeb8fc7e5fa010bade/index.js#L128-L136\n. You can use it, by passing the function as you used too.\n. @kevinSuttle This have NOTHING to do with how postcss-loader works, or webpack 2 update. This is why you have a way to define variables directly from your customProperties config. See readme of postcss-custom-properties.\n. Any reason why now some plugin called with () are crashing postcss-loader?\nhttps://gitter.im/MoOx/postcss-cssnext?at=582eccc42291180a7a6637d8\n. ",
    "boopathi": "I still face this issue with source-maps. Using extract-text-webpack-plugin, postcss, and sass. \nThe input map to postcss-loader is \n{ version: 3,\n  file: '/Users/boopathi.rajaa/workspace/phrontend/examples/hello-github/styles.scss',\n  sources: [ '../styles.scss' ],\n  sourcesContent: [],\n  mappings: 'AAAA,IAAI,CAAC;EACJ,UAAU,EAAE,KAAM,GADb',\n  names: [] }\nand the output map of postcss-loader is \n{ _file: 'styles.scss',\n  _sourceRoot: null,\n  _skipValidation: false,\n  _sources:\n   { _array: [ '../styles.scss', 'styles.scss' ],\n     _set: { '$../styles.scss': 0, '$styles.scss': 1 } },\n  _names: { _array: [], _set: {} },\n  _mappings:\n   { _array: [ [Object], [Object], [Object], [Object], [Object], [Object] ],\n     _sorted: true,\n     _last:\n      { generatedLine: 4,\n        generatedColumn: 39,\n        originalLine: 4,\n        originalColumn: 39,\n        source: 'styles.scss',\n        name: null } },\n  _sourcesContents: null }\nand the file styles.scss is empty in browser.\n. node-sass - 3.1.1\n. https://github.com/boopathi/extract-sass-test \nI tried something, and got sourcesContent to work from node-sass using this option (https://github.com/boopathi/extract-sass-test/blob/master/sass-loader.js#L9)\nNow sourceMap is generated, and the resultant sourceMap file contents match the original sass file, but the sourcemap itself is located in a different location - webpack:///styles.scss instead of webpack:///./styles.scss.\n. Oh. yeah. \nBefore: \nsources: [ \"stdin\" ],\nsourcesContent: [ \"...\" ]\nAfter: \n_sources: { _array: [ 'styles.scss' ], _set: { '$styles.scss': 0 } },\n_sourcesContents: { '$styles.scss': '...' }\nthe full output: http://pastebin.com/MA7W0n0V \n. > why you think path should be webpack:///styles.scss?\nIt should be webpack:///./styles.scss instead of webpack:///styles.scss.\n\nThe highlighted one (webpack:///./styles.scss) is mapped. The other styles.scss (webpack:///styles.scss) contains the original source.\n\nI take file path by loaderUtils.getRemainingRequest(this)\n\nThe output of getRemainingRequest is like this\n/Users/boopathi.rajaa/workspace/extract-sass-test/echo-loader.js!/Users/boopathi.rajaa/workspace/extract-sass-test/sass-loader.js!/Users/boopathi.rajaa/workspace/extract-sass-test/styles.scss\nShouldn't it be just the filename (this.resourcePath) ? But changing it to resourcePath too didn't do any good. The same issue was there.\n\nAnyway extract-sass-test use strange stdin. I think you should create a Issue in Sass loader too.\n\n@ai yes. But, I still can't figure out properly what the issue is. That's why I'm using a custom sass-loader (https://github.com/boopathi/extract-sass-test/blob/master/sass-loader.js) in extract-sass-test - which passes sourceMapContents. \nMaybe what the css-loader receives is not proper ? Will experiment more.\n. @ai It works!. I overlooked the fact that original source should be available at webpack://./styles.scss cuz that's where the actual file is. But the styles are actually mapped to the other one properly, though it didn't happen when using !sass-loader?sourceMap. Looks like there is an option in sass-loader which does export the sourcemap contents that were not available for the postcss-loader.\ncss?sourceMap!postcss!sass?sourceMap&sourceMapContents\n. ",
    "nwhite89": "correct me if I'm wrong (apologies very new to post-css) val() can be used without any plugins no?\n. @ai I see thanks apologies meant var() have seen that it comes with postcss-custom-properties and thought it actually came built in with post-css. Will close this issue\n. ",
    "simonsmith": "Having a similar issue, also trying custom properties funnily enough. Have tried cssnext and also postcss-custom-properties but my CSS remains the same.\nwebpack-config below:\n``` js\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar webpack = require('webpack');\nvar customProperties = require(\"postcss-custom-properties\")\nmodule.exports = {\n  entry: {\n    module: \"./source/javascripts/app.js\",\n  },\n  output: {\n    path: './source/built/',\n    filename: 'app.js'\n  },\n  resolve: {\n    modulesDirectories: [\n      'node_modules',\n      'source/components'\n    ],\n    extensions: ['', '.js', '.js.erb', '.jsx']\n  },\n  module: {\n    loaders:[\n      {\n        test: /.js$/, exclude: /node_modules/, loader: 'babel-loader'\n      },\n      {\n        test: /.css$/,\n        loader: ExtractTextPlugin.extract('style-loader', 'css-loader!postcss-loader')\n      }\n    ]\n  },\n  postcss: [customProperties],\n  plugins: [\n    new ExtractTextPlugin('app.css')\n  ]\n};\n```\n@nwhite89 Did you get it working?\n. Ah, good spot. That solved it for me. Cheers\n. ",
    "pburtchaell": "@ai \n{\n  test: /\\.css$/,\n  loader: 'style-loader!css-loader!postcss-loader?safe=1'\n},\nAnd since my original message was accidentally deleted:\npostcss: [\n    require('postcss-custom-selectors'),\n    require('postcss-custom-media'),\n    require('postcss-css-variables'),\n    require('postcss-nested'),\n    require('autoprefixer-core'),\n  ]\n. I tried it with:\n:root h1 {\n  --color: blue;\n  display: flex;\n  color: var(--color);\n}\nWhich appears to be working. Let me try adding some more complex rules and figure out what went wrong.\n. @ai Was able to get it all working. Thanks.\n. Ah, didn't realize that was the same issue at a first glance. I'll jump in on the conversation there.\n. ",
    "jeron-diovis": "@ai, well, have same issue too. Now it's with postcss-mixins.\nWebpack config fragment:\n``` js\nimport autoprefixer from \"autoprefixer\";\nimport mixins from \"postcss-mixins\";\n...\nmodule: {\n    loaders: [\n      {\n        test: /.css$/,\n        loader: ExtractTextPlugin.extract(\"css?modules=true!postcss\"),\n      }\n    ]\n  },\npostcss: [\n    mixins(),\n    autoprefixer({\n      browsers: \"last 2 versions\"\n    })\n  ],\n```\nstyles.css\n``` css\n@define-mixin mixThis $url {\n  content: url($url);\n}\n.test {\n  @mixin mixThis \"./home.png\";\n}\n```\nAnd exactly the same I see in output.\nThe most interesting thing here is that autoprefixer works. But mixins are not.\nTried both mixins() and mixins in postcss array, no effect.\n. Isn't it better to point out what exactly is wrong?\nI see this in docs:\n\nExtractTextPlugin.extract([notExtractLoader], loader, [options])\n- loader the loader(s) that should be used for converting the resource to a css exporting module.\n\nI see that autoprefixer works for me even with this \"wrong\" approach - so, I think that postcss loader already works.\nAnd I don't understand what am I doing wrong.\nThis is exactly why I'm posting question here. This is for what issues are, aren't they?\n. @MoOx Actually, without ExtractTextPlugin nothing changes.\nmodule: {\n    loaders: [\n      {\n        test: /\\.css$/,\n        loaders: [\n          \"css?modules=true\",\n          \"postcss\"\n        ]\n      }\n    ]\n  },\nAnd in module inside webpack bundle I still see unprocessed mixins.\nWhat now is incorrect?\n. ",
    "badsyntax": "Thanks for the merge. This change breaks the tests though, I'm wondering if it would be better to allow configuration of map options with loader params...\n. Great, thanks a lot :+1: \n. Thanks a lot!\n. @ai :+1: \n. As I understand it, you need to pipe the output of the compiled css into the css-loader. Thus, this should be the correct order: \njs\nExtractTextPlugin.extract(\"style-loader\", \"css-loader!postcss-loader!less-loader\")\n..which results in:\ncss\n.foo {\n  background-color: red;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n.bar {\n  background-color: yellow;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n. @avindra @Dakuan \nIt's been a while since I've used webpack and i'd be damned if I knew the point of these loaders anymore. I hate you so much webpack.\ncss-loader expects CSS code, there's nothing more to it than that. pass in your final compiled CSS into css-loader. \nI guess the output of css-loader is not a stream of CSS, thus you can't pipe that ouput into postcss-loader. \n- style-loader|css-loader is the way to do it just with css\n- style-loader|css-loader|postcss-loader is the way to post-process css\n- style-loader|css-loader|less-loader is the way to do it if you want to use less\n- style-loader|css-loader|postcss-loader|less-loader is the way to post-process the compiled less (css)\n. ",
    "0nn0": "Hi @gaearon, do you by any chance have an idea how solve solve this problem?\nI've checked other repo's like react-hot-postcss-boilerplate, but haven't found one that has this workflow with webpack, postcss and react hotloader working...\n. Without the use of the postcss-import plugin the reloading does work, however then the PostCSS plugins get applied solely to the main stylesheet (styles.css) but to none of the css files that get imported in there (component.css). You can see that in the postcss branch. \n. ",
    "faergeek": "Seems like you forgot to publish new version to npm.\n. ",
    "matthewmueller": "Did anyone test that this worked? I don't think it's working for me.\n. > do you use postcss-import? Do you add hook for it from docs?\nyep following the docs\ncorrection: it works, sort of. if there's no syntax errors, it will reload. if there's a syntax error, it stops compiling and you have to restart the webpack server.\n. ",
    "luisfontes": "I'm having a bit of trouble getting webpack to watch the imported css files. They're being processed on the first run, but webpack does not recompile when I modify these files.\nI have a colors.css with some vars (w/ postcss-simple-vars) that I want to import in my other css files to use the $vars. Like in a SCSS project. So I set up my webpack config with postcss and postcss-import and everything is working as expected, except for the file watch on my color.css.\nHere is my postcss config: \n``` javascript\n  config.postcss = function(webp) {\n    let cssnanoOpt = {\n      discardUnused: false,\n      zindex: false\n    };\n    let rucksackOpt = { autoprefixer: true };\nlet devPlugins = [\n  postcssImport({ addDependencyTo: webp }),\n  mixins,\n  nested,\n  simpleVars,\n  rucksack(rucksackOpt),\n  cssnext\n];\nlet prodPlugins = [cssnano(cssnanoOpt)];\n\nlet plugins;\nif (BUILD) {\n  plugins = devPlugins;\n} else {\n  plugins = devPlugins.concat(prodPlugins);\n}\n\nreturn plugins;\n\n};\n```\nAny hints on what I'm doing wrong?\n. Yes, with extract-text-webpack-plugin. But I disable the extract-text plugin in development for hot loading.\n``` javascript\n  const cssLoader = {\n    test: /.css$/,\n    // Reference: https://github.com/webpack/extract-text-webpack-plugin\n    // Extract css files in production builds\n    //\n    // Reference: https://github.com/webpack/style-loader\n    // Use style-loader in development for hot-loading\n    loader: ExtractTextPlugin.extract('style', 'css?sourceMap!postcss'),\n  };\n```\n. I've set up a repo where you can reproduce this behavior: https://github.com/luisfontes/webpack-postcss-import-hotload\nJust npm install and npm run dev. Thanks for the help :+1: \n. ",
    "timaschew": "@luisfontes I had also issues and I realized that it only works if this line postcssImport({addDependencyTo: webpack}), is the first in the array of \npostcss: function(webpack) {\n    return []\nIn my case I use cssnext and autoprefixer and the postcssImport need to be the first entry!\n. @MoOx \nOh, you're right about the first note in bold. \nI meant cssnext and precss, not autoprefixer, thanks :)\n@luisfontes \nI checked out the repo, there are really lot of plugins, It think you need to turn some of them off to figure out which is not working in combination with postcss/potscss-import\n. ",
    "mummybot": "For those new to Webpack and coming to this thread and going \"wah?!?\" the exact code is:\njavascript\n    //webpack.config.js\n    var postcssImport = require('postcss-import');\n    ...\n    postcss: function(webpack) {\n        return [\n            postcssImport({ addDependencyTo: webpack }), // Must be first item in list\n            precss,\n            autoprefixer\n        ];\n    },\nHopefully precss will support this soon, so we won't need to use the postcss-import plugin as well.\n. ",
    "ghost": "+6 months and precss still does not support this.  Ridiculous  \ud83d\ude20 \n. Had this same issue, managed to track down the cause. The css-loader has its own autoprefixer implementation during minification as it uses CSS Nano.\nYou can disable this option by using 'css-loader?-autoprefixer!postcss-loader'. This prevented the -ms-transform rule being removed.\n. yes, I import bootstrap or semantic ui. \ne.g....\nscss\n@import \"~semantic-ui-css/semantic.min.css'\nand handle woff2, png... etc.\nI think this problem be caused  by url-loader and file-loader...\nterminal shows 'can't not find module' even though I imported module correctly. works nicely config\nmain.scss\nscss\n@import \"~semantic-ui-css/semantic.min.css'\nwebpack.config.js\n```js\nvar webpack = require('webpack')\nmodule.exports = {\n  entry: ['babel-polyfill', ${__dirname}/src/index.jsx, ${__dirname}/src/stylesheets/main.scss],\n  output: {\n    path: ${__dirname}/public,\n    filename: 'bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        enforce: 'pre',\n        test: /.jsx?$/,\n        use: ['flow-bin-loader', 'eslint-loader'],\n        exclude: /node_modules/\n      },\n      {\n        use: 'babel-loader',\n        test: /.jsx?$/,\n        exclude: /node_modules/\n      },\n      {\n        use: [\n          'style-loader',\n          'css-loader?importLoaders=1',\n          'postcss-loader',\n          'sass-loader'\n        ],\n        test: /.scss$/\n      },\n      { test: /.(woff2?|svg|jpe?g|png|gif|ico|eot|ttf)$/, loader: 'url-loader?limit=10000' },\n    ]\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.LoaderOptionsPlugin({\n      options: {\n        postcss: [\n          require('autoprefixer')\n        ]\n      }\n    })\n  ],\n  devServer: {\n    ...\n  }\n}\n```\nBut, If i add precss like below,\n```js\nvar webpack = require('webpack')\nmodule.exports = {\n  entry: ['babel-polyfill', ${__dirname}/src/index.jsx, ${__dirname}/src/stylesheets/main.scss],\n  output: {\n    path: ${__dirname}/public,\n    filename: 'bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        enforce: 'pre',\n        test: /.jsx?$/,\n        use: ['flow-bin-loader', 'eslint-loader'],\n        exclude: /node_modules/\n      },\n      {\n        use: 'babel-loader',\n        test: /.jsx?$/,\n        exclude: /node_modules/\n      },\n      {\n        use: [\n          'style-loader',\n          'css-loader?importLoaders=1',\n          'postcss-loader',\n          'sass-loader'\n        ],\n        test: /.scss$/\n      },\n      { test: /.(woff2?|svg|jpe?g|png|gif|ico|eot|ttf)$/, loader: 'url-loader?limit=10000' },\n    ]\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.LoaderOptionsPlugin({\n      options: {\n        postcss: [\n          require('precss')({...anything options...}) / HERE. /\n          require('autoprefixer')\n        ]\n      }\n    })\n  ],\n  devServer: {\n    ...\n  }\n}\n```\nerror shows\nERROR in ./~/css-loader?importLoaders=1!./~/postcss-loader!./~/sass-loader/lib/loader.js!./src/stylesheets/main.scss\nModule build failed: Error: ENOENT: no such file or directory, open '/Users/highdali/tmp/book-review-moa/src/stylesheets/~semantic-ui-css/semantic.min.css'\n @ ./src/stylesheets/main.scss 4:14-181 13:2-17:4 14:20-187\n @ multi (webpack)-dev-server/client?http://localhost:4000 webpack/hot/dev-server babel-polyfill ./src/index.jsx ./src/stylesheets/main.scss. Problem is my config? or postcss-loader? sass-loader ? precss ? i don't know why this error occurs sorry. Sass-loader provides custom importer that import modules from /node_modules/.\ndocumentation here\nSo I don't need to specify includePaths option, right?. Sorry, I am beginner for web development.\nI just put stylesheets/main.scss on bundle entry. so, stylesheets will be in bundle.js finally.\nAccording to postcss doc, i can import the css/sass module. Here, ~ does not mean home directory. It tells webpack resolve engine should find the module from 'node_modules'.\nI tried your solution, but i didn't know what should put in includePaths: 'path/to/@imports/'\nthanks.. thanks, you're genius.. @michael-ciniawsky Thanks, self-answer though.\nThere wasn't provided the path to a postCSS config file in Webpack. It was only a matter of placing these in Webpack config: \noptions: {\n  config: {\n     path: 'postcss.config.js'\n  }\n}\n. ",
    "ZeeCoder": "Use postcss-import@8.1.0. (https://github.com/postcss/postcss-import/issues/207)\n. ",
    "hustcer": "@mummybot It does not work for me, I'm using webpack@2.1.0-beta.21 and postcss-import@8.1.0, does this matter?\n. @ai Thanks, maybe I have to wait.\n. ",
    "Dakuan": "It's been suggested to change the order of the loaders to:\nloader: ExtractTextPlugin.extract(\"style-loader\", \"postcss-loader!css-loader!less-loader\")\nbut this results in:\n```\n-> webpack\nHash: 396f0bfb9d565b6f60f0\nVersion: webpack 1.9.7\nTime: 399ms\n    + 1 hidden modules\nERROR in ./bar.less\nModule build failed: Error: Didn't get a result from child compiler\n    at Object. (/Users/Dom/git/postcss-webpack-bug/node_modules/extract-text-webpack-plugin/loader.js:91:22)\n    at Tapable. (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/lib/Compiler.js:213:10)\n    at /Users/Dom/git/postcss-webpack-bug/node_modules/webpack/lib/Compiler.js:401:12\n    at Tapable.next (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/node_modules/tapable/lib/Tapable.js:67:11)\n    at Tapable. (/Users/Dom/git/postcss-webpack-bug/node_modules/extract-text-webpack-plugin/loader.js:78:5)\n    at Tapable.next (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/node_modules/tapable/lib/Tapable.js:69:14)\n    at Tapable. (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/lib/CachePlugin.js:40:4)\n    at Tapable.applyPluginsAsync (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/node_modules/tapable/lib/Tapable.js:71:13)\n    at Tapable. (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/lib/Compiler.js:398:9)\n    at Tapable. (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/lib/Compilation.js:555:13)\nChild extract-text-webpack-plugin:\n        + 2 hidden modules\nERROR in ./~/postcss-loader!./~/css-loader!./~/less-loader!./bar.less\n/Users/Dom/git/postcss-webpack-bug/node_modules/css-loader/index.js!/Users/Dom/git/postcss-webpack-bug/node_modules/less-loader/index.js!/Users/Dom/git/postcss-webpack-bug/bar.less:1:1: Unknown word\nexports = module.exports = require(\"./node_modules/css-loader/lib/css-base.js\")();\n^\nexports.push([module.id, \".foo {\\n  background-color: red;\\n  display: flex;\\n}\\n.bar {\\n  background-color: yellow;\\n  display: flex;\\n}\\n\", \"\"]);\n\nERROR in ./~/postcss-loader!./~/css-loader!./~/less-loader!./bar.less\nModule build failed: Error: Final loader didn't return a Buffer or String\n    at DependenciesBlock.onModuleBuild (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:299:42)\n    at nextLoader (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:275:25)\n    at /Users/Dom/git/postcss-webpack-bug/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:292:15\n    at context.callback (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:148:14)\n    at /Users/Dom/git/postcss-webpack-bug/node_modules/postcss-loader/index.js:40:17\n    at lib$es6$promise$$internal$$tryCatch (/Users/Dom/git/postcss-webpack-bug/node_modules/postcss-loader/node_modules/postcss/node_modules/es6-promise/dist/es6-promise.js:319:16)\n    at lib$es6$promise$$internal$$invokeCallback (/Users/Dom/git/postcss-webpack-bug/node_modules/postcss-loader/node_modules/postcss/node_modules/es6-promise/dist/es6-promise.js:331:17)\n    at /Users/Dom/git/postcss-webpack-bug/node_modules/postcss-loader/node_modules/postcss/node_modules/es6-promise/dist/es6-promise.js:876:13\n    at Object.lib$es6$promise$asap$$flush [as _onImmediate] (/Users/Dom/git/postcss-webpack-bug/node_modules/postcss-loader/node_modules/postcss/node_modules/es6-promise/dist/es6-promise.js:113:9)\n    at processImmediate [as _immediateCallback] (timers.js:354:15)\n\n.\nloader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader!less-loader\")\n```\nworks, but obviously does not prefix files:\n.foo {\n  background-color: red;\n  display: flex;\n}\n.bar {\n  background-color: yellow;\n  display: flex;\n}\nloader: ExtractTextPlugin.extract(\"style-loader\", \"postcss-loader!css-loader\")\nerrors\n```\n -> webpack\nHash: 396f0bfb9d565b6f60f0\nVersion: webpack 1.9.7\nTime: 173ms\n    + 1 hidden modules\nERROR in ./bar.less\nModule build failed: Error: Didn't get a result from child compiler\n    at Object. (/Users/Dom/git/postcss-webpack-bug/node_modules/extract-text-webpack-plugin/loader.js:91:22)\n    at Tapable. (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/lib/Compiler.js:213:10)\n    at /Users/Dom/git/postcss-webpack-bug/node_modules/webpack/lib/Compiler.js:401:12\n    at Tapable.next (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/node_modules/tapable/lib/Tapable.js:67:11)\n    at Tapable. (/Users/Dom/git/postcss-webpack-bug/node_modules/extract-text-webpack-plugin/loader.js:78:5)\n    at Tapable.next (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/node_modules/tapable/lib/Tapable.js:69:14)\n    at Tapable. (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/lib/CachePlugin.js:40:4)\n    at Tapable.applyPluginsAsync (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/node_modules/tapable/lib/Tapable.js:71:13)\n    at Tapable. (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/lib/Compiler.js:398:9)\n    at Tapable. (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/lib/Compilation.js:555:13)\nChild extract-text-webpack-plugin:\n        + 1 hidden modules\nERROR in ./~/postcss-loader!./~/css-loader!./bar.less\n/Users/Dom/git/postcss-webpack-bug/node_modules/css-loader/index.js!/Users/Dom/git/postcss-webpack-bug/bar.less:1:1: Unknown word\nexports = module.exports = require(\"./node_modules/css-loader/lib/css-base.js\")();\n^\nexports.i(require(\"-!./node_modules/css-loader/index.js!./foo\"), \"\");\n\nERROR in ./~/postcss-loader!./~/css-loader!./bar.less\nModule build failed: Error: Final loader didn't return a Buffer or String\n    at DependenciesBlock.onModuleBuild (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:299:42)\n    at nextLoader (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:275:25)\n    at /Users/Dom/git/postcss-webpack-bug/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:292:15\n    at context.callback (/Users/Dom/git/postcss-webpack-bug/node_modules/webpack/node_modules/webpack-core/lib/NormalModuleMixin.js:148:14)\n    at /Users/Dom/git/postcss-webpack-bug/node_modules/postcss-loader/index.js:40:17\n    at lib$es6$promise$$internal$$tryCatch (/Users/Dom/git/postcss-webpack-bug/node_modules/postcss-loader/node_modules/postcss/node_modules/es6-promise/dist/es6-promise.js:319:16)\n    at lib$es6$promise$$internal$$invokeCallback (/Users/Dom/git/postcss-webpack-bug/node_modules/postcss-loader/node_modules/postcss/node_modules/es6-promise/dist/es6-promise.js:331:17)\n    at /Users/Dom/git/postcss-webpack-bug/node_modules/postcss-loader/node_modules/postcss/node_modules/es6-promise/dist/es6-promise.js:876:13\n    at Object.lib$es6$promise$asap$$flush [as _onImmediate] (/Users/Dom/git/postcss-webpack-bug/node_modules/postcss-loader/node_modules/postcss/node_modules/es6-promise/dist/es6-promise.js:113:9)\n    at processImmediate [as _immediateCallback] (timers.js:354:15)\n\n```\n. @ai worked a charm! \n. @avindra that was the source of my head banging. Made sense for the final step to be at either end of the chain, but not the middle!\n. ",
    "lydell": "I think you confused autoprefixer-loader with autoprefixer-brunch :) autoprefixer-loader is written by @passy.\n. ",
    "passy": "@ai Sorry, I'm not sure what's happening here and I'm not really a great person to ask about webpack. Except for maintaining autoprefixer-loader I don't have any webpack-related projects at the moment. :(\n. ",
    "avindra": "Thanks @badsyntax  that order works. Can you explain why this works? It seems really unintuitive that postcss-loader is right in the middle. \nI would think that postcss-loader should appear at the end as it is the last step...\n. @MatTheCat : looks like you're missing \"-loader\" from your loaders... unless you're using some special webpack config to eliminate those suffixes :-)\n@badsyntax : the loaders are kind of like black magic. I've yet to come across good technical documentation on how it works.  Out of curiosity - in terms of big module bundling systems (i.e, webpack, browserify, jspm), which do you like the most?\n. ",
    "MatTheCat": "Doesn't work for me when I run webpack -p:\njavascript\nExtractTextPlugin.extract(\"style\", \"css!postcss!less\")\nAm I missing something?\n. @avindra well I don't know but I'm sure it doesn't change anything: Autoprefixer runs with just webpack, but not with -p option.\nEDIT: more specifically it's the --optimize-minimize option which seems problematic.\n. My apologies, I didn't know css-loader run autoprefixer to remove prefixes when using  --optimize-minimize. So postcss-loader added prefixes and css-loader removed them. :persevere:\n. ",
    "iamstarkov": "Thanks.\nYes, probably I don\u2019t need it in karma, 'cause as far as I understand I need markup and js for tests, and probably don\u2019t need css for this\n. awsm!\n. problem solved \ud83d\ude0a\n. ",
    "cybercase": "Thanks for merging!\nOf course I can send another PR\nAre the following changes ok?\n- Update of \"Usage\" and \"Plugins Pack\" sections to use function instead of Objects or Array.\n- Update of \"Plugin Function\" section with an \"Integration with postcss-import\"\n. ",
    "quicksilver7": "Great, excited for the release.\n@ai I saw a comment you made where you mentioned you aren't a webpack user anymore. Just curious, do you use an alternative and why? Are you supporting postcss-loader actively or just merging PRs?\n. ",
    "jantimon": "Thanks I tried that however the bug is still there.\na.less\n@import 'b.less';\nb.less\nbody {background: red}\nWhen inspecting the body element I get different results:\nResult without postcss-loader: b.less\nResult with postcss-loader: a.less (which is obviously wrong)\n. @ai here you go: http://we.tl/niZkeyeQrl\nnpm i\nnpm run dev\nInspect the h1 - you will see that the mapping for the color attribute does not work but the mapping for the font weight does.\n. So postcss won't work with less?\n. Just compared the two source maps post css receives:\nLess (as described before the example did not work with less)\n``` json\n{\n  \"sources\" : [\n    \"b.less\"\n  ],\n  \"mappings\" : \"AAAA;EACE,aAAA\",\n  \"sourcesContent\" : [\n    \"h2 {\\n  color: orange;\\n}\"\n  ],\n  \"names\" : [\n],\n  \"version\" : 3\n}\n```\nScss (the same example works with scss)\n``` json\n{\n  \"sources\" : [\n    \"example\\/with-postcss\\/a.scss\",\n    \"example\\/with-postcss\\/b.scss\"\n  ],\n  \"sourcesContent\" : [\n],\n  \"mappings\" : \"ACAA,EAAE,CAAC;EACD,KAAK,EAAE,MAAO,GADZ\",\n  \"names\" : [\n],\n  \"file\" : \"example\\/with-postcss\\/a.scss\",\n  \"version\" : 3\n}\n```\nSeems like postcss needs more information - is this a post css or less bug?\n. But the css-loader can handle it correctly\n. Just took a look at what post-css does with the less map.\n{\n  \"sources\" : [\n    \"b.less\"\n  ],\n  \"mappings\" : \"AAAA;EACE,aAAA\",\n  \"sourcesContent\" : [\n    \"h2 {\\n  color: orange;\\n}\"\n  ],\n  \"names\" : [],\n  \"version\" : 3\n}\nbecomes\n{ version: 3,\n  sources: [ 'a.less' ],\n  names: [],\n  mappings: 'AAAA;EACE,cAAc;CACf',\n  file: 'a.less',\n  sourcesContent: [ 'h2 {\\n  color: orange;\\n}\\n' ] \n}\nAs you can see postcss changes the sources from 'b.less' to 'a.less'\n. a.less is the file which imports b.less.\nAs post-css throws away the information about b.less the result is wrong.\n. Maybe I mixed it up with other debug tests but it seems like the following change would fix the issue:\nif (typeof map === 'string') {\n  map = JSON.parse(map);\n}\n. Hm actually that really seems to fix the issue - do you want me to file a merge request?\nI guess the reason is this line: https://github.com/postcss/postcss-loader/blob/master/index.js#L17\nIt won't work if the map is a string.\n. Only a guess but it's probably a loader bug:\nfrom https://github.com/postcss/postcss-loader/blob/master/index.js#L17\nif ( map && map.mappings ) opts.map.prev = map;\nWill be false if map is a string.\n. Cool thanks :)\n. ExtractTextPlugin 1 doesn't work with Webpack 2 - maybe that's the issue not the postcss-loader\n. Updated the pull request as requested. :)\n. Cool :) which talk will you give? releasing in the near future would be great but doesn't need to be right now.\n. Why would a loader have no access to its current compilation?\nWhat about firing the event from the compiler instead?. @ertrzyiks why? it is the general purpose intermodule communication protocol and used by many plugins..\nwhat would be the workaround?. @michael-ciniawsky the current implementation of the iconfont-webpack-plugin is using the compiler to resolve the filename of url(demo.svg).\nAccording to the official documentation there would be a new api for that which is not deprecated:\nhttps://webpack.js.org/api/loaders/#this-resolve\njs\nresolve(context: string, request: string, callback: function(err, result: string))\nIf I read your readme correctly we could access this from the your loader if we change the config to:\njs\nplugins: (loader) => [\n      require('iconfont-webpack-plugin')(loader),\n]);\nIs this correct?. @naBausch just released a new version which works with postcss-loader 2.x\nI guess this issue can be closed . ",
    "sokra": "Maybe @markdalgleish like to maintain it...\n. ",
    "markdalgleish": "@ai Did we still want to move this project to the webpack org?\n. ",
    "levitanong": "I was thinking maybe postcss-loader needed something special to work with postcss-import. After all, you do mention the latter in your docs. Anyway! I figured it out. My bad!\n. @ppiekarczyk I knew I should have documented it. I can't remember! Are you encountering this?\n. ... I do remember ExtractTextPlugin here. I was also trying to do server side rendering when this happened.\n. ",
    "peterpme": "Hey @levitanong what did you end up doing to fix this?\n. It had to do with server side rendering and the ExtractTextPlugin :) I didn't document it either, ha!\n. ",
    "Semigradsky": "Yeah, I use latest version.\nMy full code:\njs\n  postcss: function() {\n    return {\n      defaults: [\n        cssnext({\n          browsers: ['last 1 version', '> 2%'],\n          import: {\n            root: 'styles'\n          }\n        })\n      ],\n      lint: [\n        stylelint(configSuitcss),\n        cssnext({\n          browsers: ['last 1 version', '> 2%'],\n          import: {\n            root: 'styles'\n          }\n        })\n      ]\n    };\n  },\nI have errors:\n\nModule build failed: Error: D:\\Dev\\git\\React\\react-admin-example\\src\\scripts\\components\\popups\\modal.css:1:1: Failed to find '--selectors.css' from styles\n\nBecause postcss-import in cssnext not received rule { root: 'styles' }\nWhen I use object style:\njs\n  postcss: {\n      defaults: [\n        cssnext({\n          browsers: ['last 1 version', '> 2%'],\n          import: {\n            root: 'styles'\n          }\n        })\n      ],\n      lint: [\n        stylelint(configSuitcss),\n        cssnext({\n          browsers: ['last 1 version', '> 2%'],\n          import: {\n            root: 'styles'\n          }\n        })\n      ]\n  },\nall is fine.\n. My css loaders:\njs\n  module: {\n    preLoaders: [\n      { test: /\\.css$/, loader: 'postcss-loader?pack=lint', exclude: /node_modules/ }\n    ],\n    loaders: [\n      ...,\n      { test: /\\.css$/, loader: 'style-loader!css-loader!postcss-loader' },\n      ...\n    ]\n  },\n. Oh, I understand. This worked:\n``` js\nvar cssnextOptions = cssnext({\n  browsers: ['last 1 version', '> 2%'],\n  import: {\n    root: 'styles'\n  }\n});\nvar stylelintOptions = stylelint(configSuitcss);\n...\n  postcss: function() {\n    return {\n      defaults: [\n        cssnextOptions\n      ],\n      lint: [\n        stylelintOptions,\n        cssnextOptions\n      ]\n    };\n  },\n...\n```\nThank for responses! :smile_cat: \n. ",
    "taion": "postcss-loader@0.6.0 and cssnext@1.8.3. I was setting this up from scratch - didn't have this working at any point. I could just be doing something wrong though.\n. Oh, I see that this example just got added. I think there's just a slight typo there. Instead of:\njs\n    postcss: function () {\n        return [autoprefixer, cssnext];\n    }\nit should be\njs\n    postcss: function () {\n        return [autoprefixer, cssnext()];\n    }\nBTW, I'm unclear as to when it's better to use postcss-loader with the cssnext plugin v just using cssnext-loader. Could it be worth explaining that?\n. This is far beyond anything I know, but it looks like cssnext exports a function that returns a plugin, rather than directly exporting a plugin: https://github.com/cssnext/cssnext/blob/1.8.3/src/index.js#L20\n. Although this example is a little weird if you think about it, since cssnext already includes autoprefixer if I'm not mistaken.\n. @ai @MoOx Oof. That only makes it more confusing as to whether I should use postcss-loader or cssnext-loader.\n. ",
    "iam4x": "Okey thank's subscribed :)\n. ",
    "timdorr": "Dupe of #27, which was merged in.\n. ",
    "davidkpiano": "@ai It's not official W3C syntax; it's only in editor's draft and it is invalid syntax in all current browsers. This is not a problem with Sass; this is a problem with an overzealous plugin.\n. ",
    "christiansakai": "ah I see. thanks for the clarification!\n. ",
    "sompylasar": "Looks related: https://github.com/kriasoft/isomorphic-style-loader\n. ",
    "sergeylukin": "This may be helpful too: http://stackoverflow.com/questions/28223040/window-not-defined-error-when-using-extract-text-webpack-plugin-react\n. ",
    "SimonDegraeve": "Done and rebased ;-)\n. Done.\n\n(my English is bad)\n\nWell, I am French, so mine too...\n. For the record, I am using postcss-js because I am working on an implementation of material design with React.\nI am not a big fan of inline styles and all their cons (media-query, pseudo-element, prefix, etc). Of course many modules solve them (or try to) but the performance are not good enough for me (and my company). Check Material UI on mobile...\nAnd for theming, I have been trying to achieve my goal with css-modules-values, postcss-functions, postcss-simple-vars, etc... but none was a good fit.\nSo after weeks of trying different approach, I think having all power of JS with postcss-js and then css-modules for composability and pattern is a real win.\n. Indeed, I am glad I finally found my dream stack.\n. Actually I just realised that in the readme the reference to postcssImport in the postcss-js example is useless. Damn copy/paste.\n. ",
    "andyhall": "@ai I considered that, but in #8 you say using postcss-import is a bad way to use this module. Is that no longer the case?\n. @ai That's basically what I'm doing, it's just that the css is quite large and separated into modular pieces.\nWith that said, I just found that passing importLoaders=1 to css-loader seems to resolve my problem, if I chain from autoprefixer instead of postcss. That is:\njs\n    {\n        test: /\\.css$/, \n        loader: 'style-loader!css-loader?importLoaders=1!autoprefixer-loader',\n    }\nI'm brand new to webpack and I don't really understand the difference between this and using postcss, but for the moment it seems to avoid the problem..?\n. Hmm, now that I check, adding importLoaders=1 works with postcss too. So I can do that if it's better.\nBy not official, do you mean autoprefixer-loader is unmaintained or incorrect or something? I'm just looking for whatever is the standard, default way to autoprefix CSS files that might contain imports.\n. Ah, I get you. Okay, thanks for your help!\n. ",
    "ahmedelgabri": "@ai I copied and pasted the Webpack output from the css file that's why there is no indentation.\nI added a console.log() here and surprisingly the output is right\n``` css\n.Demo {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translate(-50%, -50%);\n      -ms-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n```\nand no I don't have any other CSS tools running in this project.\n. Thanks anyway\n. Looks like it something related to extract-text-webpack-plugin https://github.com/webpack/extract-text-webpack-plugin/issues/85\n. @RShackleton Thanks!\n. That's the error I get now after adding ident, I'm using the latest version BTW.\nWith plugins as a fn()\nERROR in ./~/css-loader?{\"sourceMap\":false,\"modules\":true,\"importLoaders\":1,\"localIdentName\":\"[local]\"}!./~/postcss-loader/lib?{\"ident\":\"postcss\",\"syntax\":\"postcss-scss\"}!./~/sass-loader/lib/loader.js!./stories/styles/stories.scss\nWith plugins as a n Array\nERROR in ./~/css-loader?{\"sourceMap\":false,\"modules\":true,\"importLoaders\":1,\"localIdentName\":\"[local]\"}!./~/postcss-loader/lib?{\"ident\":\"postcss\",\"syntax\":\"postcss-scss\",\"plugins\":[null,null]}!./~/sass-loader/lib/loader.js!./stories/styles/stories.scss\n. This is the output of the console.logs\nBefore:\njs\n() => [\n  atImport(),\n  autoprefixer({ browsers: pkg.browserslist }),\n]\nAfter: \njs\n[ { [Function] postcssPlugin: 'postcss-import', postcssVersion: '6.0.1' },\n  { [Function: plugin]\n    options: { browsers: [Object], grid: false },\n    info: [Function],\n    postcssPlugin: 'autoprefixer',\n    postcssVersion: '6.0.12' } ]. Ignore the postcss-scss I was just testing something :)\nProviding a repo will be very hard, but maybe this info will help. So this is part of a storybook custom webpack config and it's part of a monorepo.\n```js\nconst path = require('path');\nconst atImport = require('postcss-import');\nconst autoprefixer = require('autoprefixer');\nconst packageInfo = require('../package.json');\nconst cssModulesIdent = '[local]';\nmodule.exports = {\n  resolve: {\n    alias: {\n      'some_alias': path.resolve(__dirname, 'path/to/alias'),\n    },\n  },\n  module: {\n    rules: [\n      {\n        test: /.scss$/,\n        use: [\n          {\n            loader: 'style-loader',\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: false,\n              modules: true,\n              importLoaders: 1,\n              localIdentName: cssModulesIdent,\n            },\n          },\n          {\n            loader: 'postcss-loader',\n            options: {\n              ident: 'postcss',\n              syntax: 'postcss-scss',\n              plugins: () => [atImport(), autoprefixer({ browsers: packageInfo.browserslist })],\n            },\n          },\n          {\n            loader: 'sass-loader',\n          },\n        ],\n      },\n      {\n        test: /.(png|jpg|jpeg|gif|svg|eot|ttf|woff|woff2)$/,\n        loader: 'file-loader',\n      },\n      {\n        test: /.md$/,\n        loader: 'raw-loader',\n      },\n    ],\n  },\n};\n``\nWhat I'm trying to achieve, is to change the@importpaths to point to local desk only in storybook usingpostcss-import`\n```scss\n@import 'a_node_module/file.scss';\n// some CSS here\n```\nbut I want storybook to do this instead \n```scss\n// when it see this, to use ./packages/module/file.scss instead\n@import 'a_node_module/file.scss'; \n// some CSS here\n```\nMy problem is that it seems that postcss-loader is not passing the options, so I can't even try & change postcss-import options.. ",
    "iest": "Spent the last hour trying to figure this one out. Thanks for getting to the bottom of it!\n. ",
    "taseenb": "From css-loader readme:\n\nIn some cases the minification is destructive to the css, so you can provide some options to it. cssnano is used for minification and you find a list of options here. Just provide them as query parameter: i. e. require(\"css-loader?-autoprefixer\") to disable removing of deprecated vendor prefixes.\n\nhttps://github.com/webpack/css-loader#minification\n. ",
    "adriaanmeuris": "adding \"-autoprefixer\" to the css-loader doesn't solve the problem in my case. Any ideas if it's possible to disable css nano in the css loader?\n. @ai thanks, resolved!\n. ",
    "Duan112358": "it hurt me so much, thks all \ud83d\ude02\n. ",
    "iamakulov": "+1, tried it before submitting the issue.\n@MoOx, do you know if there is a way to fix the issue without changes from the css-loader side?\n. Found the solution: webpack/css-loader#137.\n. Yep, sure, today or tomorrow.\n. ",
    "ovaldi": "Good job!. ",
    "ajsharp": "@MoOx Yea, I tried that autoprefixer, and it doesn't seem to work. Here's my config:\n``` js\nvar webpack = require('webpack');\nvar path = require('path');\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nvar autoprefixer = require('autoprefixer');\nvar precss = require('precss');\nmodule.exports = {\n  context: __dirname,\noutput: {\n    path: path.join(__dirname, 'build'),\n    filename: '[name].js'\n  },\nentry: {\n    app: './js/app.js'\n  },\nmodule: {\n    loaders: [\n      {\n        test: /.(scss|sass)$/,\n        loader: ExtractTextPlugin.extract('style-loader', 'css-loader', 'postcss-loader', 'sass-loader')}\n    ]\n  },\npostcss: function() {\n    return [autoprefixer, precss];\n  },\nsassLoader: {\n    includePaths: [path.join(__dirname, 'scss')]\n  },\nplugins: [\n    new ExtractTextPlugin('styles.css')\n  ]\n}\n```\nHere's the sass file:\nscss\n.banner {\n  background-color: green;\n  font-size: 48px;\n  text-align: center;\n  color: white;\n  border-radius: 4px;\n  box-shadow: black 1px 1px 1px;\n  transform: rotate(7deg);\n}\nAnd the output file:\ncss\n.banner {\n  background-color: green;\n  font-size: 48px;\n  text-align: center;\n  color: white;\n  border-radius: 4px;\n  box-shadow: black 1px 1px 1px;\n  transform: rotate(7deg);\n}\n@ai Using this loader with sass or less is an extremely common use-case -- no one in practice is writing plain-vanilla CSS. I think it would be very useful to have a concrete example of how to use these tools together.\n. @MoOx Ah, that was it :smile: Thanks very much for the help.\n. ",
    "mattdanna": "+1\n. ",
    "chrisbarless": "@MoOx this saved my life\n. ",
    "occultskyrong": "In the .scss file, use the Chinese comments, \nwill complain \u2018Unknown word\u2019,\n I have used in scss the @charset 'utf-8'\n. ",
    "l-zhi": "@MoOx Ah +1\n. ",
    "dqisme": "@MoOx gooood job!\n. ",
    "rmoddel": "@MoOx Thanks!!\n. ",
    "aseem2625": "Using auto prefixer as last 2 versions of browser doesn't add prefixes but if I remove 'last 2 versions' then it works fine. Can someone tell me how does this happen?\npostcss: function () {\n    return [autoprefixer({browsers: ['last 2 versions']})];\n},\n@MoOx \nAlso, can you please tell me what do you mean by \"an array for the default loaders you want to use, the first parameter is used when extracttextplugin is disabled (so optional).\"\nI mean, by your 'first parameter is optional' will my style-loader be ignored?\nloader: ExtractTextPlugin.extract('style-loader', ['css-loader', 'postcss-loader', 'sass-loader'])\n. ",
    "sertaconay": "@aseem2625 It's because last 2 versions of browsers don't need any prefix. :p\n. ",
    "kutsan": "Not related but this is somehow top Google result. Here is my Stylus, PostCSS, Webpack 2 config for React, if someone needs.. ",
    "YousefMMS": "I just used it like so loader: 'style-loader!css-loader!postcss-loader!sass-loader' and it works with me, is this may generate any other issue?. ",
    "IamManchanda": "@ai I think It should reopen with webpack being so popular!. ",
    "himdel": "I think there may be differing definitions of what \"works for me\" means here.\nloader: 'style-loader!css-loader!postcss-loader!sass-loader'\nindeed works fine .. until you need to do @import \"~package/file\" in your sass and find out that postcss is completely ignoring webpack resolvers and fails on path not found.\nStill no idea how to order the plugins so that this works. (And yes, it works fine if postcss-loader is removed from the mix.). ",
    "davidjbradshaw": "Thanks for taking a look. This is the value of the file var when I get the error.\n/Users/dave/dev/mobile/node_modules/sass-loader/index.js?sourceMap!/Users/dave/dev/mobile/node_modules/stylelint-loader/index.js!/Users/dave/dev/mobile/src/components/Footer/Footer.scss\n. Happy to try something locally.\nNot sure I have a deep enough understanding of webpack and postcss to write a test case. \n. Can you point me at where the break point should be for that?\n. Sorry for the slow reply. This is what I get for this.resourcePath.\n/Users/dave/dev/mobile/src/components/Footer/Footer.scss\n. Thanks and next week is fantastic.\n. ",
    "Grawl": "still have the same problem using symfony/webpack-encore and postcss-inline-svg. ",
    "JesseFarebro": "@ai I couldn't agree more with you!\n@MoOx I'll shoot a PR there way and see how they feel. If not this should be gist worthy, it's a pretty elegant solution considering all things.\n. ",
    "doxavore": "Just to follow up, it appears that resolve-url-loader only likes inline sourcemaps. For anyone who is not using PostCSS's file resolution methods, it seems to work by moving resolve-url-loader before postcss-loader, eg:\njs\n  {\n    test: /\\.css$/,\n    loader: ExtractTextPlugin.extract('style', 'css?-minimize!postcss!resolve-url')\n  }\n. ",
    "craigcosmo": "@doxavore before or after? in your code you pust resolve-url after postss. For future lost soul who is also stuck with webpack.\nFor those who want to use post-css, extract-text-plugin, resolve-url-loader, css-module and  react-css-module with webpack 2 and source map enable Here is how\npackage.json\n```json\n{\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.18.0\",\n    \"babel-core\": \"^6.21.0\",\n    \"babel-loader\": \"^6.2.10\",\n    \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\",\n    \"babel-plugin-transform-remove-console\": \"^6.8.0\",\n    \"babel-preset-es2015\": \"^6.18.0\",\n    \"babel-preset-react\": \"^6.16.0\",\n    \"babel-preset-stage-0\": \"*\",\n    \"css-loader\": \"^0.26.1\",\n    \"extract-text-webpack-plugin\": \"2.0.0-beta.4\",\n    \"file-loader\": \"^0.9.0\",\n    \"imports-loader\": \"^0.7.0\",\n    \"node-sass\": \"^4.1.1\",\n    \"postcss-cssnext\": \"^2.9.0\",\n    \"postcss-import\": \"^9.0.0\",\n    \"postcss-loader\": \"^1.2.1\",\n    \"precss\": \"^1.4.0\",\n    \"react-css-modules\": \"^4.1.0\",\n    \"resolve-url-loader\": \"^1.6.1\",\n    \"sass-loader\": \"^4.1.1\",\n    \"style-loader\": \"^0.13.1\",\n    \"url-loader\": \"^0.5.7\",\n    \"webpack\": \"2.1.0-beta.25\",\n    \"webpack-dev-server\": \"2.1.0-beta.10\",\n  }\n}\n```\nwebpack.config.babel.js\n```js\nimport ExtractTextPlugin from 'extract-text-webpack-plugin'\nimport path from 'path'\nexport default {\n  devtool: 'source-map',\n  entry: './app/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.join(__dirname, 'dist'),\n    publicPath: 'http://localhost:1111/dist/'\n  },\n  devServer: {\n    historyApiFallback: true,\n    contentBase: path.join(__dirname, 'dist'),\n    noInfo: true,\n    port: 1111\n  },\n  module: {\n    rules: [\n      {\n        test: /.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: 'babel-loader'\n      },\n      {\n        test: /.(jpe?g|gif|png|svg)$/i,\n        use: 'file-loader?name=/image/[name].[ext]'\n      },\n      {\n        test: /.(css|scss)$/,\n        loader: ExtractTextPlugin.extract({\n          loader: [\n            { loader: 'css-loader?sourceMap&modules&importLoaders=1&localIdentName=[path][local][hash:base64:5]'},\n            { loader: 'resolve-url-loader?sourceMap'},\n            { loader: 'sass-loader?sourceMap'},\n            { loader: 'postcss-loader?sourceMap' },\n          ]\n        })\n      }\n    ]\n},\n  plugins: [\n    new ExtractTextPlugin({\n      filename:'bundle.css',\n      disable:false,\n      allChunks: true\n    }),\n]\n}\n```\npostcss.config.js\njs\nmodule.exports = {\n    plugins: {\n        'postcss-import': {},\n        'postcss-cssnext': {\n            browsers: ['last 2 versions', '> 5%'],\n        },\n    },\n}\n.babelrc\njs\n{\n    \"presets\": [\n        \"es2015\",\n        \"react\",\n        \"stage-0\"\n    ],\n    \"plugins\": [\n        [\n            \"react-css-modules\",\n            {\n                \"generateScopedName\": \"[path]___[local]___[hash:base64:5]\"\n            }\n        ]\n    ]\n}\nFor those who don't use url-resolve you can remove this\nwebpack.config.babel.js\njs\n{ loader: 'sass-loader'}, // remove this line\n{ loader: 'resolve-url-loader'} // remove this line\nFor those who wonder why my webpack config file is webpack.config.babel.js not webpack.config.js\nis because I use es6 syntax in webpack config, I had to name my config webpack.config.babel.js so webpack would understand the syntax.. it's the space that caused the bug\nerror\n-webkit-filter: drop-shadow( 3px 3px 2px rgba(0,0,0,.7) );\n    filter: drop-shadow( 3px 3px 2px rgba(0,0,0,.7) );\nno error\n-webkit-filter: drop-shadow( 3px 3px 2px rgba(0,0,0,.7));\n    filter: drop-shadow( 3px 3px 2px rgba(0,0,0,.7));. ```\n    ERROR in ./~/css-loader?sourceMap&importLoaders=1!./~/postcss-loader?sourceMap&parser=postcss-scss!./app/style/page.css\n    Module build failed: TypeError: oneColor(...).cssa is not a function\n        at Object.Filter.filters.dropShadow (/Users/craigcosmo/Desktop/lark chat app/node_modules/pleeease-filters/index.js:401:36)\n        at Filter.convert (/Users/craigcosmo/Desktop/lark chat app/node_modules/pleeease-filters/index.js:543:30)\n        at /Users/craigcosmo/Desktop/lark chat app/node_modules/pleeease-filters/index.js:575:36\n        at /lib/container.es6:152:28\n        at /lib/container.es6:110:26\n        at Rule.each (/lib/container.es6:78:22)\n        at Rule.walk (/lib/container.es6:109:21)\n        at Rule.walkDecls (/lib/container.es6:150:25)\n        at /Users/craigcosmo/Desktop/lark chat app/node_modules/pleeease-filters/index.js:556:8\n        at /lib/container.es6:199:28\n        at /lib/container.es6:110:26\n        at Root.each (/lib/container.es6:78:22)\n        at Root.walk (/lib/container.es6:109:21)\n        at Root.walkRules (/lib/container.es6:197:25)\n        at Filter.postcss (/Users/craigcosmo/Desktop/lark chat app/node_modules/pleeease-filters/index.js:554:6)\n        at LazyResult.run (/lib/lazy-result.es6:321:20)\n        at /lib/lazy-result.es6:248:32\n        at LazyResult.asyncTick (/lib/lazy-result.es6:246:13)\n        at /lib/lazy-result.es6:260:22\n        at LazyResult.asyncTick (/lib/lazy-result.es6:246:13)\n        at /lib/lazy-result.es6:260:22\n        at LazyResult.asyncTick (/lib/lazy-result.es6:246:13)\n``. If I removepostcss-loaderI will have no error.. If I removeextract text plugin` I will have no error as well.. I figure out, I misconfig webpack. Webpack css loader doesn't by default resolve asset. \nThe reason I can do  .div{ background: url('image/bg.png')} is because that .div is declared inside a .scss  file. For scss I was using babel-plugin-react-css-module which actually helps resolve asset.\n. ",
    "feimosi": "@ai Take a look a the filename, line number and column.\nThe CSS is just a test file. To simplify for such input:\n``` css\n@import \"variables.scss\";\nbody {\n    background-color: #3FACE4;\n}\n.test {\n    .nested {\n        .classes {\n            font-size: 2em;\n        }\n    }\n}\n```\nI get this error:\n```\nWARNING in ./src/app/app.scss\nstylelint: F:\\CS\\Websites\\angularTest\\src\\app\\app.scss:6:1: Expected empty line before non-nested rule (rule-non-nested-empty-line-before)\nWARNING in ./src/app/app.scss\nstylelint: F:\\CS\\Websites\\angularTest\\src\\app\\app.scss:6:1: Expected empty line before non-nested rule (rule-non-nested-empty-line-before)\n[...]\nChild extract-text-webpack-plugin:\nChild extract-text-webpack-plugin:\nWARNING in ./~/css-loader!./~/postcss-loader!./src/app/app.scss\nstylelint: F:\\CS\\Websites\\angularTest\\src\\app\\app.scss:6:1: Expected empty line before non-nested rule (rule-non-nested-empty-line-before)\n\n```\nYou can see the same error appears 3 times. It's not related to the Stylint itself as I run it with the CLI and everything's fine.\n. The problem is that I get the same linting error printed 3 times to the console.\nI write everything in Sass, then it goes to PostCSS via Webpack and using plugins it's linted and compiled.\nIt's either postcss-loader, ExtractTextPlugin or Webpack issue. That's what I'm trying to determine.\n. Ok, you were right. I forgot to test that before, but removing ExtractTextPlugin resolved the issue. I need to look for help somewhere else.\n. @klimashkin unfortunately not. ",
    "klimashkin": "Hi @feimosi! Did you find out what was the reason of the issue?\nSee the same problem with babel-loader. Seems like just putting postcss.config.js into babel-register doesn't work because postcss-load-config uses cosmiconfig, which reads file manually and uses require-from-string.\nSo you need also to require postcss.config.js manually and assign it to loader options property.. ",
    "rodrigobacelli": "I know that this is not the case here, but if you're getting block-closing-brace-newline-before warning using sass-loader, take a look on this issue: https://github.com/phenomic/phenomic/issues/814\nThat may be the same problem when using PreCSS, but I'm not sure how to disable nesting in it.. ",
    "f0rmat1k": "@ai thank you\n. @ai still have a trouble.\ni have page.css, that imports index.css;\ni tried to throw ExtractTextPlugin and did as in example:\njs\n{ test: /\\.css$/, loader: \"style-loader!css-loader!postcss-loader\" }\nbut now it works only on page.css, but there isn't prefixes index.css.\n. @MoOx thank you, postcss-import helped\n. ",
    "webmobiles": "@MoOx i don't understand well how to use postcss-import for imported files, with sass files i don' need to do nothing special, @f0rmat1k  maybe is with css loader the problem;\nmy webpack.common.js file (webpack version 1) for angular2:\n```\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar autoprefixer  = require('autoprefixer');\nvar helpers = require('./helpers');\nmodule.exports = {\n  entry: {\n    'polyfills': './src/polyfills.ts',\n    'vendor': './src/vendor.ts',\n    'app': './src/main.ts'\n  },\nresolve: {\n    extensions: ['', '.ts', '.js', '.json', '.css', '.scss', '.html']\n  },\nmodule: {\n    loaders: [\n      {\n        test: /.ts$/,\n                loaders: ['awesome-typescript-loader', 'angular2-template-loader']\n      },\n      {\n        test: /.html$/,\n        loader: 'html'\n      },\n      {\n        test: /.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\n        loader: 'file?name=assets/[name].[hash].[ext]'\n      },\n      {\n        test: /.css$/,\n        exclude: helpers.root('src', 'app'),\n        loader: ExtractTextPlugin.extract('style', 'css?sourceMap')\n      },\n      {\n        test: /.css$/,\n        include: helpers.root('src', 'app'),\n        loader: 'raw'\n      },\n            {\n                test: /.scss$/,\n                exclude: helpers.root('src', 'app'),\n                loader: ExtractTextPlugin.extract(\n                    'style-loader',\n                    'css-loader!postcss-loader!sass-loader'\n                )\n            },\n            {\n                test: /.scss$/,\n                include: helpers.root('src', 'app'),\n                loader: 'raw!css!postcss-loader!sass'\n            },\n            {\n        test: /.json$/,\n        loader: 'json-loader'\n      }\n    ]\n  },\npostcss: function(webpack) {\n    return [\n        autoprefixer({ browsers: ['last 10 versions'] }),\n    ];\n},\n\nplugins: [\nnew webpack.optimize.CommonsChunkPlugin({\n  name: ['app', 'vendor', 'polyfills']\n}),\n\nnew HtmlWebpackPlugin({\n  template: 'src/index.html'\n}),\n\n    new ExtractTextPlugin('css/[name].css')\n\n]\n};\n```. ",
    "jiyinyiyong": "@ai you can see from the error message there was css-loader before postcss-loader\nERROR in ./~/css-loader?importLoaders=1!./~/postcss-loader!./~/cirru-editor/style/layout.css\nand otherwise autoprefixer-loader would not work by just replacing postcss-loader.\n. css-loader is transforming CSS into JavaScript and when postcss-loader gets JavaScript:\nERROR in ./~/postcss-loader!./~/css-loader?importLoaders=1!./~/cirru-editor/style/layout.css\n/Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/layout.css:1:1: Unknown word\nexports = module.exports = require(\"/Users/chen/repo/cirru/cirru-light-editor/node_modules/css-loader/cssToString.js\")();\n^\n. css-loader is enough to make CSS code into something that postCSS doesn't not recognize:\nhttps://github.com/webpack/css-loader/blob/6ade74035c845978e3cf4026bdacb829fcf300d7/lib/loader.js#L116\n. I'm not familiar with debugging Webpack path, but does this error messages help?\nWDS] Errors while compiling.\nvendor.js:25701 ./~/css-loader?importLoaders=1!./~/postcss-loader!./~/cirru-editor/style/layout.css\nModule not found: Error: Cannot resolve 'file' or 'directory' ./source-code-pro.woff2 in /Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style\nresolve file\n  /Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro.woff2.cirru doesn't exist\n  /Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro.woff2.js doesn't exist\n  /Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro.woff2 doesn't exist\nresolve directory\n  /Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro.woff2 doesn't exist (directory default file)\n  /Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro.woff2/package.json doesn't exist (directory description file)\n[/Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro.woff2.cirru]\n[/Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro.woff2.js]\n[/Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro.woff2]\n @ ./~/css-loader?importLoaders=1!./~/postcss-loader!./~/cirru-editor/style/layout.css 2:209-243onSocketMsg.errors @ vendor.js:25701sock.onmessage @ vendor.js:25736EventTarget.dispatchEvent @ vendor.js:28169(anonymous function) @ vendor.js:31237SockJS._transportMessage @ vendor.js:31235EventEmitter.emit @ vendor.js:28107WebSocketTransport.ws.onmessage @ vendor.js:27263\nvendor.js:25701 ./~/css-loader?importLoaders=1!./~/postcss-loader!./~/cirru-editor/style/layout.css\nModule not found: Error: Cannot resolve 'file' or 'directory' ./source-code-pro-extend.woff2 in /Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style\nresolve file\n  /Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro-extend.woff2.cirru doesn't exist\n  /Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro-extend.woff2 doesn't exist\n  /Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro-extend.woff2.js doesn't exist\nresolve directory\n  /Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro-extend.woff2 doesn't exist (directory default file)\n  /Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro-extend.woff2/package.json doesn't exist (directory description file)\n[/Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro-extend.woff2.cirru]\n[/Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro-extend.woff2]\n[/Users/chen/repo/cirru/cirru-light-editor/node_modules/cirru-editor/style/source-code-pro-extend.woff2.js]\n @ ./~/css-loader?importLoaders=1!./~/postcss-loader!./~/cirru-editor/style/layout.css 2:543-584\n. it's just like that in README:\npostcss: function () {\n        return [autoprefixer, precss];\n    }\nI haven't figured out what postcss-import and postcss-url yet...\n. ",
    "hamczu": "I have the same issue - temporarily I commented out \"precss\" and it started working correctly. So I think the bug is somewhere there...\nAfter some investigation I discovered that \"postcss-partial-import\" part of precss causes that bug.\nThis issue can be related: https://github.com/postcss/postcss-import/issues/190\n. ",
    "montemishkin": "Thanks for the lightning response!\nAs suggested, I'll file this issue with postcss-js and use module.exports in the meantime.\n. ",
    "kvnlnt": "installing postcss-import@7.1.3 did not resolve the issue. \nTo expand a little\nI have a main.js file which includes a main.css file:\nvar Css = require('./main.css');\nI have a main.css file which imports all my styles:\n@import url(\"./css/base.css\");\n...\nFacts so far:\n1. Change to javascript files results in hotreloading working correctly\n2. Change to the main.css file directly results in hotreloading correctly\n3. Change to any imported css file in main.cs results in nothing happening\n4. This process worked in cssnext-loader\n5. Tried both @import \"./css/base.css\" and @import url(\"./css/base.css\") syntaxes\n6. Tried different IDE's (sublime, intelliJ)\n7. Tried different version of postcss-import (7.1.3)\n. @MoOx could you post a \"working\" webpack.config.js file with it's companion package.json that utilizes the webpack-dev-server? I've been fiddling with these configurations for over a week now but can't seem to get the right combination down to recreate the workflow I had with cssnext and cssnext-loader. \n. updating base.css does not trigger a reload (Fact 3). Updating main.css which includes base.css does (Fact 2). Therefore the processing and hotreloading pipeline for imported css files seems to be the suspect. More confusing: I copied my entire project and 1. deleted all source files except the main.js, main.css and base.css files. 2. Kept my package.json and webpack.config.js files the exact same and everything works! My app has no compilation errors, etc so I'm left to wonder if there is some kind of issue related to module loading with more complex applications.\n. Found something interesting in postcss-import/index.js at line ~95\nconsole.log(opts);\n{\n...\naddDependencyTo: undefined,\nfrom: '/<path>/src/main.css'\n}\nand console.log(Object.keys(state.importedFiles)) seems to show that it is aware of my base.css file:\n[ '/<path>/src/main.css', '/<path>/src/css/base.css', ]\nShouldn't addDependencyTo be an object?\n. ",
    "thoughtbyte": "@kvnlnt did you ever figure out the culprit? i'm having the same issue in my setup.\n. ",
    "paulyoung": "I'm also seeing this behavior.\n. ",
    "buob": "@MoOx I created the following repo to show the problem exists in a super simple reproduction -- https://github.com/buob/postcss-import-issue (despite the fact I'm passing in addDependencyTo)\nThe hot reloading works when you edit \"required-file\", but it doesn't when editing \"imported-file\".\nHopefully this helps, let me know if I'm making a stupid mistake, totally possible.\n. Dang, well it was a stupid mistake -- I was using precss which (obviously) didn't play well with postcss-import; there were duplicate intentions.  There's a very low chance of that helping someone else, but just in case, worth the pride hit.\nI hope a maintainer is found!  I appreciate the work on these plugins!  \ud83c\udf20 \n. ",
    "davidcalhoun": "@MoOx Dang, appreciate the help, but adding addDependencyTo didn't seem to have any effect for me.\n\"postcss-cssnext\": \"2.9.0\",\n    \"postcss-import\": \"8.1.0\",\n    \"postcss-loader\": \"1.2.2\",\n    \"webpack\": \"2.2.0\",\n    \"webpack-dev-server\": \"2.2.0\",. ",
    "michael-ciniawsky": "@davidcalhoun  webpack.config.js / postcss.config.js and update to postcss-import >= v9.x please :D. @MoOx  Cool \ud83d\ude1b \n@ai postcss-load-config simply must expose the config (postcss.config.js) filepath e.g \nCurrent\njs\npostcssrc(ctx).then((config) => {\n   console.log(config.plugins)\n   console.log(config.options)\n})\nNeeded\njs\npostcssrc(ctx).then((config) => {\n   console.log(config.file) // => e.g `${process.cwd()}/path/to/postcss.config.js` (absolute)\n   console.log(config.plugins)\n   console.log(config.options)\n})\nCLI\njs\nif (argv.watch) {\n   // Watch Config\n   postcssrc(ctx).then((config) => {\n      chokidar\n       .watch(config.file)\n       .on('change', (config) => postcss()...) // Restart the CSS Input processing\n  })\n  // Watch CSS\n  chokidar\n    .watch(input)\n    .on('change', (file) => postcss()...) // Restart the CSS Input processing\n  })\n}\nGulp\nbash\nnpm uninstall gulp-postcss && npm i -D michael-ciniawsky/gulp-postcssrc\n\nSadly the maintainer of gulp-postcss refused to add postcss-load-config:(\n\n```js\nimport { src, dest, task, series, watch } from 'gulp'\nimport postcss from 'gulp-postcssrc'\nconst css = () => {\n  return src('src/.css')\n   .pipe(postcss())\n   .pipe(dest('dest/css'))\n}\n// Add 'path/to/postcss.config.js' to CSS watch task for hotreload\ntask('watch', () => {\n  watch(['src/.css', 'postcss.config.js'], css)\n})\ntask('default', series(css, 'watch'))\n````\nWebpack\n@MoOx's  concept but inside of postcss-loader, needs more investigation from my side nevertheless ;)\nCurrent\njs\nif ( typeof options !== 'undefined' ) {\n            return parseOptions.call(loader, options, pack);\n        } else {\n            if ( pack ) {\n                throw new Error('PostCSS plugin pack is supported ' +\n                                'only when use plugins in webpack config');\n            }\n            return loadConfig({ webpack: loader }, path.dirname(file));\n        }\nMaybe \ud83d\ude1b\n```js\nif ( typeof options !== 'undefined' ) {\n            return parseOptions.call(loader, options, pack);\n        } else {\n            if ( pack ) {\n                throw new Error('PostCSS plugin pack is supported ' +\n                                'only when use plugins in webpack config');\n            }\n        return loadConfig({ webpack: loader }, path.dirname(file))\n           .then((config) => {\n               loader.addDependencyTo(config.file)\n\n               // TODO => Invalidate caches (webpack, cosmiconfig) correctly \n               delete require.cache(config.file)\n\n               return config\n           })\n    }\n\n``. I discussed HMR with folks in the webpack slack and it's seems not to be possible to add it to the  loader itself,postcss.config.jsis watched and rebuilds on changes, closing for now as won't fix. . It's advised to always use the*-loader` appendix to prevent loading something else @see #2986 :)\nwebpack.config.js\njs\n...\nmodule: {\n  rules: [\n     {\n       test: /\\.css$/,\n       use: [\n         'style-loader', \n         { loader: 'css-loader' options: { importLoaders: 2 } },\n         'postcss-loader', \n         'sass-loader'\n        ]\n      },\n    ...\n  ]\n}\n...\n. @szykov \nJust for getting started, but could you please use try using webpack 2 loader syntax inside ExtractTextPlugin.extract() ?\nwebpack.config.js\njs\nExtractTextPlugin.extract({\n   fallback: 'style-loader',\n   use: [ \n     { \n       loader: 'css-loader', \n       options : { autoprefixer: false, sourceMap: true, importLoaders: 1 } \n     }, \n     'postcss-loader'\n   ]\n })\npostcss.config.js\ndiff\nplugins: [\n- require('autoprefixer')\n+ require('autoprefixer')()\n]. webpack.config.js\njs\nExtractTextPlugin.extract({\n   fallback: 'style-loader',\n   use: [ \n     { \n       loader: 'css-loader', \n       options: { importLoaders: 1 } \n     }, \n     { \n        loader: 'postcss-loader', \n        options: {\n          ident: 'postcss',\n          plugins: () => [ require('autoprefixer')({...options}) ]\n        }\n     }\n   ]\n }). @asnowwolf Can you please give a short explanation and example why you need inline sourcemaps for angular \ud83d\ude1b ? Is this still relevant from your side ?. @StevenIseki \njs\n...\nmodule: {\n    rules: [\n      { \n        test: /\\.css$/, \n        use: [\n          'style-loader',\n          { loader: 'css-loader', options: { modules: true, importLoaders: 1 } },\n          { loader: 'postcss-loader', options: { plugins: () => [...plugins] } },\n        ]\n      },\n      { \n        test: /\\.js$/,\n        use:  [\n           { loader: 'babel-loader', options: { presets: ['es2015', 'react', 'stage-2'] } }\n        ],\n        exclude: /node_modules/, \n      }\n    ]\n  }\n...\nloaders -> rules, loader -> use, LoaderOptionsPlugin  was a 'polyfill' required in webpack =< 2.1.0-beta.24and is unnessecary beginning from 2.1.0-beta.25. This is the final syntax for webpack@2. @owenDods \ud83d\udc4d but this is going away in webpack >= v2.3.x (next v2 minor), after talking with sokra about it #4109, the ident will be added by webpack and no config step required for complex options anymore. Also the reason this was not documented until yet \ud83d\ude1b . @edmundo096 I'm already working on a README.md overhaul, but as commented before this is blocked until #4109 is released (v2.3 Milestone)\nwhich removes the necessity for ident. LoaderOptionsPlugin was just an early way to use the incompatible loaders (v1) with webpack v2 beta. It will vanish in the future aswell and shouldn't be used anymore. Sry for the inconvenience we also struggle with that atm, we currently fix extract-text-webpack-plugin to not conflict with postcss-loader in the future anymore which is another nasty issue may folks have had recently.\n. @edmundo096 It's a webpack core issue, which can't be fixed within loaders (the query is already malformed when the loader receives it), I addressed it to sokra and it will be fixed in webpack v2.3+, see the PR I linked above for more info, it basically has to do with how webpack stringifies the loader query. Your example is the desired syntax and will be working in webpack v2.3+. @francoisromain Yep webpack 2.2.1 ships with ident removed so loader.options finally work correctly now and extract-text-webpack-plugin v2 is also nearly finished. Be aware that extract-text-plugin v2 final will have an API change fallbackLoader => fallback &&  loader => use. @francoisromain\n```diff\n    test: /.css$/,\n      use: ExtractTextPlugin.extract({\n-       fallbackLoader: 'style-loader',\n+       fallback: 'style-loader',\n-        loader: [{\n+        use: [{\n-         loader: 'css-loader?sourceMap',\n+         loader: 'css-loader',\n+         options: { sourceMap: true, importLoaders: 1 }\n        }, {\n-        loader: 'postcss-loader?sourceMap',\n+        loader: 'postcss-loader',\n          options: {\n+          sourceMap: true\n            plugins: () => [\n              postcssImport({ addDependencyTo: webpack }),\n              postcssCssnext({\n                browsers: ['last 2 versions', 'ie >= 9'],\n                compress: true,\n              }),\n              postcssInlineSvg,\n            ],\n          },\n        }],\n      })\n```\nbut not atm \ud83d\ude1b  (v2-rc*), wait until v2@latest is out\n@edmundo096 webpack v2.2.1 ships the ident fix, it's finally working now. @koutsenko \ndiff\n- require('autoprefixer')\n+ require('autoprefixer')({ browsers: 'last 2 versions' }). @gazpachu Webpack Version >= v2.2.1? Are you trying to set PostCSS options in both webpack.config.js and postcss.config.js? Where in you directory structure is postcss.config.js located?. @milewski Hmm that's weird I need to check that, got a similiar issue @extract-text-webpack-plugin maybe it's a bug :/ introduced recently again, please post your webpack.config.js here \ud83d\ude1b   . According to Tobias (sokra) there weren't any changes in webpack, could you please try \n\nPostCSS Options inside the rule\nWith and without ETWP\nWith and without resolve-url-loader\nWithout { sourceMap: true }in postcss-loader\n\nThe Error sounds unrelated to what was bug before, when the ident is missing ({Function}/ require() not stringified correctly => plugins:  {}). diff\n- { loader: 'sass-loader', query: { sourceMap: true } }\n+ { loader: 'sass-loader', options: { sourceMap: true } }. @kroko https://github.com/WARP-LAB/WARP-GUIDES-WEBPACK-2/blob/master/01-webpack-guide-basic/webpacktest-basic/.postcssrc.js#L20\ndiff\n- .filter((e) => e !== null)\nnull => false  &&  postcss-load-config filters {Boolean} by default \ud83d\ude09 \n@DanDvoracek Yes this config and don't forget to actually add postcss-loader \ndiff\n{ // for css stuff...\n        test: /\\.sass$/,\n        use: extractSass.extract({\n          fallback: \"style-loader\",\n          use: [\n            { loader: \"css-loader\" },\n+           'postcss-loader',\n            { loader: \"sass-loader\" }\n          ]\n        })\n      }. I don't know for webpack.config.js, but for postcss.config.js I'm nearly \ud83d\udcaf  certain \ud83d\ude1b  It's just cosmetics anyways, all good :D. @ai @ertrzyiks  I'm on it (addDependencyTo + webpack 2), but I'm on my way to Rome picking up lost ones \ud83d\udc45 , so i will not made it this weekend.Next week I will finish postcss-load-config + gulp + cli, promised \ud83d\udc4d .\n@ai  \ud83d\udc4d interesting\njs\nresult.messages.push({ type: 'dependency', path: '/home/ai/test/images/logo.png' })\nbut maybe it's own 'prop'\njs\nresult.file = { root: dirname(options.from), name: basename(options.from), paths: [] }\nsomething like that \ud83d\ude1b \n@MoOx  I will take a look at postcss-import after the weekend, basically if I can grasp whats going on. I'm eager to help maintainig it in the future, but must get used to the code base / issues first :).\n. > result.file requires PostCSS release :). We specially have messages for plugins communications.\n@ai yep, yep just trolling around \ud83d\ude1b, sry for the delay, working on postcss-load-* now. For the webpack issue currently testing if\n``` js\n// postcss.config.js -> [Function]\nif (typeof config === 'function') {\n  config = config(ctx)\n}\n// postcssrc.json, package.json... -> [Object]\nif (!typeof config === 'function') {\n  config = new Function (ctx, return ${config})\n}\n```\ninside postcss-load-config does the job. So when the config is an object e.g loaded from postcssrc.json, package.json, postcss.config.js (module.exports = {...config}) evaluate it first. It will be possible to pass context to the config either from the loader this.addDependencyTo() or use a function in postcss.config.js from the start.\n. @ai yep no need to rush, we need to stablize config before anyways :). When this PR gets merge interested in the 'offical' loader README boilerplate I made for loaders? README.\nOff topic here but should I open respective issues @postcss-cli @gulp-postcss for PR discussion first? E.g yesterday I updated gulp-posthtml and woud like to update the tests in the same direction (official gulp guidlines) for gulp-postcss aswell + make a few small refactorings despite adding load-config. Same for CLI. \n. @ai docs WIP :)\nSponsor badge directly under the logo or is the sponors section at the bottom ok aswell?\npostcss-load-config supports passing a function now, finishing the eval stuff and test it with especially this loader, if it does what it is supposed to be :). @ai can you give me an example/explanation ( little more in-depth :) ) of how the result.messages.push(dependencies) will look like?\n. @ai \n1. kk\n2. you mean change to @ai, or completely, guessing the latter \ud83d\ude1b \n3. yep of course, didn't know there was already consitent styleing accress postcss org, \n\nMaybe in the future I will be ready for global changes.\n\nI can do and would liveto do it, but secondary chore work :)\n1. gotcha i will add it.\nI can do it, already maintaining html-loader, posthtml-loader. webpack org peasant member :D\nMaybe @ertrzyiks wants to give a hand too, we can share the 'burden'\nSend invite and grant access here, I can also transfer the load-* stuff then and update it at the weekend, to finally move out of alpha, beta. It makes things a lot easier for me (update it to v1.0.0 asap, add jsdoc, keep track of webpack 2 beta etc.)\n. \ud83d\udc4d \nBut transfering the postcss-load-* repos doesn't work, should the stay at my github?\n. @ai Can some the content related ajustments stay?\n\nyeap, you could keep it :)\n\nkk\n. @ai  README\nThe structure is awesome :+1:\nI had the postcss.config.js example when postcss-load-config is finished + #104\n. @ai so you want to push them later? I'm asking because otherwise I will do it today, during the day with postcss-load-config release? :) It's neglectible, adding the postcss.config.js example later, just don't  want to mess things up here \n. \ud83d\udc4d \n. @richardscarrott yep, i was wondering about that too, your example with \njs\n{\n  loader: 'postcss-loader'\n  options: {\n    plugins: () => [ require('autoprefixer') ]\n  }\n}\nis the correct one, but to my knowledge, it's currently not possible to use a function inside options. This is a work in progress and currently 'polyfilled' by the LoaderOptionsPlugin\n``` js\nconst { LoaderOptionsPlugin } = require('webpack')\nconst config = {\n  module: {\n   rules: [\n    {\n     test: /.css$/,\n     use: ['style-loader', {loader: 'css-loader', options: { importLoaders: 1 }}, 'postcss-loader']\n    }\n  ],\n  plugins : [\n    new LoaderOptionsPlugin({\n      options: {\n        postcss: () => {\n          return [ require('autoprefixer') ]\n       }\n     }\n   })\n ]\n}\nmodule.exports = config\n```\nI check the webpack slack quickly, just one moment please :)\n. @richardscarrott kk, I will check that \n@ai can't find that commit too \ud83d\ude1b, by the way an example with ExtractTextPlugin maybe valuable in general :) \n. @ai  basically yes, currently nope \ud83d\ude1b , and combined with ExtractTextPlugin for now LoaderOptionsPlugin is definitely needed, I add an example for usage with ExtractTextPlugin, but let me finished all the postcss-load-config stuff first :)\njs\n{\n   loader: 'postcss-loader'\n   options: { \n     plugins: () => [...plugins] // Error\n   } \n}\n!==\njs\n{\n   loader: 'postcss-loader'\n   options: () => { parser: sugarss, plugins: [...plugins] } \n   // According to @sokra this should be possible since webpack v2.1.0-beta.25, \n   // when ['loader-utils'].parseQuery(loader.query) is used as it currently is in postcss-loader\n   // but API Schema complains that typeof module.rules[1].use[2].options === 'string' || 'options'\n   // always fun, fun... , fun...... :D  \n}\nBut there seems to be an issue with parseOptions in postcss-loader in general\nwebpack.config.js\n1.\njs\n{\n   loader: 'postcss-loader',\n   options: {\n     plugins: () => [ require('postcss-nested') ]\n   }\n}\npostcss-loader/index.js\n``` js\nvar params = loaderUtils.parseQuery(loader.query)\nconsole.log(params)\n// => {} params.plugins stripped\n```\n2.\njs\n{\n   loader: 'postcss-loader',\n   options: {\n     parser: 'sugarss',\n     plugins: () => [ require('postcss-nested') ]\n   }\n}\npostcss-loader/index.js\n``` js\nvar params = loaderUtils.parseQuery(loader.query)\nconsole.log(params)\n// => { parser: 'sugarss' } params.plugins stripped\n```\n3.\njs\n{\n   loader: 'postcss-loader',\n   options: {\n     parser: 'sugarss',\n     plugins: [ require('postcss-nested') ]\n   }\n}\npostcss-loader/index.js\n``` js\nvar params = loaderUtils.parseQuery(loader.query)\nconsole.log(params)\n// => { parser: 'sugarss' plugins: [ null ] } params.plugins not loaded\n```\n. @ kevinShuttle @farwayer \nfixed in postcss-load-config v1.0.0-beta\n. @Birowsky \nwebpack: >v2.0.0-beta.25\nwebpack.config.js\njs\nmodule: {\n rules : [{\n   test: /\\.(sass|less|styl|sss|css)$/,\n   use: [\n        ...// style-loader, css-loader\n        {\n          loader: 'postcss-loader',\n          options: { options: { /* PostCSS Options */ }, plugins: () => [ /* PostCSS Plugins */ ]  }\n        }\n       ...// less-loader, sass-loader, stylus-loader\n    ]\n  }]\n}\nBasically like in LoaderOptionsPlugin, the plugin was more of an 'polyfill' for webpack 2 < beta.25, webpack 2 development is still a bit in flux :)\n. webpack v2.1.0-beta.25\nLoaderOptionsPlugin: \u2705 \npostcss.config.js:  :no_entry_sign:\nI'm on it... :)\n. @izaakschroeder postcss-load-config issue should be fixed now. \n. @lavezzi1 so postcss.config.jsworked for you?  if you haven't already update to webpack v2.1.0-beta.25 it has lots of updates\n@ai  i'm on it testing webpack, i'm aware of the issues :). sokra replied and for webpack 2 options must be an object or string but can contain a funtion inside\njs\n{\n  loader: 'postcss-loader',\n  options: { // -> {Object}\n    plugins: () => { // -> {Function}        \n      return [      \n          require('postcss-import')({ addDependencyTo: webpack })  \n          // addDependencyTo is deprecated \n      ]\n    }\n  }\n}\nmy question is, how the options will/should look like when e.g parser needs to be set etc?\njs\n{\n  loader: 'postcss-loader',\n  options: { // -> {Object}\n    postcss: () => { // -> {Function}  e.g options[config] ? postcss : config      \n      return {\n        parser: 'sugarss',\n        plugins: [\n          require('postcss-import')()  \n        ]\n      }\n    }\n  }\n}\n. > I think we don't need dynamic parser, so we could set function only to plugins.\nkk, but how will the config look like if you want to set parser, syntay, stringifier in loader.options\njs\n{\n  loader: 'postcss-loader',\n  options: { \n    parser: 'sugarss',\n    plugins: (ctx)  => { \n      return [\n        require('postcss-import')({ addDependencyTo: ctx.addDependencyTo })  \n        // ctx.addDependencyTo for e.g but obsolete  ctx === var loader = this\n      ]\n    }\n  }\n}\n? \n. @ai yep i have seen it in the source very nice solution :), this was just a stupid example of passing the loader context, besides that is the example above correct?\n. @motorguo As @ai mentioned put postcss-nested before postcss-mixins and maybe autoprefixer at the bottom, bc your nested and mixed CSS will not be prefixed otherwise :). Besides that, is the mixin definition in the same file bzw. require(file.css) or are these different files/requires? Can you please give me information about your overall organisation of CSS ?\n. \ud83d\udc4d \n. In https://github.com/qdouble/angular-webpack2-starter/blob/master/webpack.config.ts#L132\ndiff\n- { test: /\\.css$/, loader: 'raw-loader' }\n+ { \n+   test: /\\.scss$/,\n+   use: [\n+     'style-loader',\n+     {loader: 'css-loader', options: { importLoaders: 2 }}, \n+     {loader: 'postcss-loader', options: { plugins: () => [ require('autoprefixer') ] }}\n+     'sass-loader'\n+   ]\n+ }\n. Can you show the config you used please :) ?\njs\nmodule: {\n  rules: [\n      ...,\n     {loader: 'postcss-loader', options: { plugins: () => [ require('postcss-plugin') ] }}\n     // With PostCSS Options, e.g custom parser\n     {\n       loader: 'postcss-loader', \n       options: {\n         parser: 'sugarss', \n         plugins: () => [ require('postcss-plugin') ] \n       }\n     }\n     ...,\n  ]\n}\nloader.options must be a {String} or {Object}, but loader.options.prop can be 'everything'\n. @Kovensky yep, postcss-load-config\npostcss.config.js (located in root directory)\njs\nmodule.exports = (ctx) => {\n   parser: ctx.resourcePath.endsWith('.sss') ? 'sugarss' : false,\n   plugins: { \n     'postcss-plugin': {}\n  }\n}\n. But test for .cssand .sss extname in your webpack.config.js separately, like in the  example @postcss-load-config to enable/disable the custom parser :)\n. ``` js\nconst webpack = require('webpack')\nmodule: {\n  rules: [\n    {\n      test: /.(sss|css)$/,\n      use: [\n        ...,\n        {\n          loader: 'postcss-loader', \n          options: {\n            parser: webpack.resourcePath.endsWith('.sss') ? 'sugarss' : false, \n            plugins: () => [ require('postcss-plugin') ] \n          }\n        }\n      ]\n    }\n  ]\n}\n```\nNot tested, but it should work like that in webpack.config.js\n. > oops, we forget about resourcePath. How I can set current file path in postcss-load-config?\n@ai I did not forget :), but first the config must work in general, for each build tool integration there must be a good default context found \ud83d\ude1b and discussed when it gets to complicated and error prone again, starting to put the config  in the root ('as standard') for the beginning was the best solution imo, but yep agreed search from this.resourcePath is the better solution  for webpack usage long-term.\npostcss-load-config accepts the following  arguments\n- ctx: Context (default: { env: process.env_NODE_ENV, cwd: process.cwd() }\n- path: Config Search Directory (default: process.cwd())\n- options: Cosmiconfig Options (default: {})\njs\npostcssrc(ctx, path, options).then(...)\nBut the path param currently refers to dir search only, cosmiconfig  separates dir / file search\njs\ncosmiconfig('postcss', options).load(dirpath, filepath)\nso maybe this.resourcePath as absolute path does not worka atm, but fixing this is trivial ;)\npostcss-loader/index.js\njs\n...\n  return config(pack, loader.resourcePath) \n  // pack === ctx ? :) => var ctx = assign{{}, pack, loader}\n  // return config(ctx, loader.resourcePath) \n  // Why pack in general, it's for plugins packs only I thought?\n...\npostcss.config.js\njs\nmodule.exports = (ctx) => {\n   parser: ctx.resourcePath.endsWith('.sss') // etc.\n   plugins: {}\n}\nBut maybe find some sane context defaults specific to postcss-loader first and add them to README.md, e.g like ctx.env works atm.\njs\nctx.file === loader.resourcePath\nctx.ext() === loader.resourcePath.endWith()\nctx.add === loader.addDependencyTo\npostcss.config.js\njs\nmodule.exports = (ctx) => {\n   parser: ctx.ext('.sss') ? 'sugarss' : false\n   plugins: {}\n}\nin the next postcss-load-config release, when process.env.NODE_ENV === undefined, config sets it 'development', I was uncertain at the beginning if setting the env should be the business of build tools etc. but seems fine in the first battle tests :D. I take a look at it today/tomorrow (as soon as possible) with new config release, but testing CLI usage atm/before release  \ud83d\ude1b \n\n. @ai yep, but needs to be tested, if the path param works with this.resourcePath out-of-the-box, since it's the absolute path not the just the directory. Asap solution would be either with\njs\nreturn config(pack, loader.resourcePath)\njs\nreturn config(pack, path.dirname(loader.resourcePath))\nfor now, guessing the latter ;)\n. What is pack refering to when loading the config ?\n. :+1: yep, gotcha saw the comment popping up after writing :)\n. Plugins Packs / Presets is coming soon to postcss-load-config\n. after discussion about it of course, but I have something in mind :)\n. @ai \ud83d\udc4d  tested it locally and your changes work fine, but can you wait maybe 1/2 days before release next minor  ? :) final postcss-load-config needs onyl a few small fixes (mostly done) and testing for \njs\nif (plugin.default && typeof plugin.default === 'function')  plugin = plugin.default\ne.g  for postcss-sprites\nThe fixes and adding the above is really easy but I'm again busy requesting church asylum for someone, it's always extremely time consuming and when there is progress you need to be responsive quickly, it's really damaging to the 'flow' currently, but bla bla bla \ud83d\ude1b , the issue for autoprefixer/css-loader docs refactoring is also pending and I would also like to find and experiment with aliases for ctx.webpack. But the latter could also be part of next minor and load-config is a patch anyways, so in case you don't want to wait, go ahead \ud83d\ude0e \n. @ai headinf home right no and ill ten finally ork on it, I'm done or now with social work :). Bit more patience please \ud83d\udc40 \ud83d\ude1b \n. @ai finally done \ud83d\ude1b \n. Where can I find information about browserlist config ? I can change this section in terms of language and try to better explain the issue with redundancy, different options, because of the crappy hack solution currently implemented in css-loader.\n. @ai \ud83d\udc4d ok I rewrite it and make a new branch when ready, but the css-loader/postcss-loader overlaps is a big topic on it's own, either postcss-loader exports the string on it's own and css-loader keeps it's options or it removes them and folks use postcss-loader, which would in my opinion be the saner solution. `loader-utils' could provide a export method for loader authors in general  or otherwise  maybe port the logic form css-loader (stringify result.css) to postcss-loader\n. @ai released \ud83d\udc4d \n@lourd \njs\nmodule.exports = (ctx) => {\n return { // <-- ;)\n    plugins: [\n      require('autoprefixer')(ctx.plugin)\n    ]\n  }\n}\n. @lourd yep, yep I missed that als a few times myself \ud83d\ude0b \nYou mean e.g looking for the config in another dir then process.cwd()? Should be resolved now, postcss-loader will look in the dir of the file currently processed for config and move upwards if none is found.\n. @tomeraz This should be the correct warning, when loading fails, if you don't use postcss.config.js etc. at all, postcss-load-config shouldn't be executed. Can you show/describe your current setup?\n. hmm.. :) I will take a look at postcss-loader later, when query/options are set, postcss-loader shouldn't trigger postcss-load-config at all and no warning popping up either. Otherwise the warning is right there. @tomeraz @albertogasparin does the CSS get transformed? Because normally when postcss-load-config gets executed without config plugins === [] options === {} and the PostCSS instance should run with this 'setup'.\n. @tomeraz kk, but it's still buggy, because has metioned before postcss-load-coni8g shouldn't be executed and that the inline options are applied is even wierder. Seems just to be a missing/falsy check in postcss-loader I patch it later, just ignore the warning for now :)\n. @DylanPiercey \njs\n{\n  loader: 'postcss-loader', options: { config: 'alternative/path/to/postcss.config.js' }\n}. @ai Yep \ud83d\ude1b #145 but without being able to handle/set context, released in 1.2.0. I can add docs for it in PR for ctx. Yep \ud83d\udc4d  that's definitely confusing, maybe it is the 'webpack' way to describe it or simply a typo \u00af(\u30c4)/\u00af, your fix is more 'common sense' nevertheless, always a bit messy \ud83d\ude1b. Thx\n. There is  bug that triggers postcss-load-config atm which shouldn't be the case, i'm on it you can ignore this warning, when setting options in your webpack.config.js instead of using postcss.config.js, For the TypeError this is actually a check inside of postcss-load-config when using an Array in config.plugins. You also need to use a function when using an Array in postcss.config.js. Is sourceMap webpack related or should it set the PostCSS sourcemaps options? In the example below it sets the postcss sourcemap options :)\npostcss.config.js\njs\nmodule.exports = (ctx) => {\n  return {\n    map: ctx.env === 'development' ? 'inline' : false, \n   // ctx.env === process.env.NODE_ENV === 'development' (default)\n    plugins: [\n        require('postcss-smart-import')(),\n        require('postcss-url')(),\n        require('postcss-mixins')()\n        require('postcss-cssnext')(),\n        require('postcss-inline-comment')()\n    ]\n  } \n}\nOff topic: postcss-mixins before postcss-cssnext is better/safer imo :)\n. The TypeError is not related to your imports :). You use webpack.config.js or postcss.config.js to set postcss plugins/options atm? Can you please show your current config, could be related to the current bug, when autoload is triggered although it shouldn't be\n. diff\nloader: 'postcss-loader',\noptions: {\n- plugins: function () {\n-   return [\n+ plugins: [\n     require('postcss-smart-import')(),\n     require('postcss-url')(),\n     require('postcss-mixins')(),\n     require('postcss-cssnext')(),\n     require('postcss-inline-comment')()\n   ]\n},\nTry using an Array instead of a function for now, normally it's correct that way, but as mentioned before there seems to be a bug here postcss-load-config is triggered incorrectly when options are specified. Otherwise try/use this postcss.config.js meanwhile.\npostcss.config.js\njs\nmodule.exports = (ctx) => {\n  return {\n    plugins: [\n      require('postcss-smart-import')(),\n      require('postcss-url')(),\n      require('postcss-mixins')(),\n      require('postcss-cssnext')(),\n      require('postcss-inline-comment')()\n   ] \n   // or\n   // plugins: {\n   //  'postcss-smart-import': {...options},\n   //  'postcss-url': {},\n   //  'postcss-mixins': {},\n   //  'postcss-cssnext': {},\n   //  'postcss-inline-comment`: {}\n   // },\n  }\n}\n. What 'result' do you get atm? Untransformed CSS or an Error ? If neither config works there must be an additional problem somewhere...\n. Could you remove cssnext please, there is another issue with resolving it (package). PR pending I'm waiting for response there, best with just a simple CSS File and 1, 2 postcss plugins, if that works, we at least know the reason(s) for sure, I'm on fix both of them atm, I will notify you asap when done and stop wasting your time here any longer for now :).\n. @kmiyashiro Please post your webpack.config.js / postcss.config.js (if). @kmiyashiro \n```diff\n// In General\n- 'css-loader'\n+ { loader: 'css-loader', options: { importLoaders: 1 } } // .css\n+ { loader: 'css-loader', options: { importLoaders: 2 } } // .scss\n// In Build/Production\nif (TARGET === 'build') {\n  module.exports = merge.smart(common, {\n    module: {\n      rules: [\n        {\n          test: /.scss$/,\n          use: ExtractTextPlugin.extract({\n            fallback: 'style-loader',\n            use: [\n            // you don't want the logic for adding  in your CSS bundle :D\n-              'style-loader',\n              'css-loader',\n              {\n```\nOtherwise I can't see any obvious errors in your webpack.config.js, despite UgilfyJSPlugin as the first in webpack.config.plugins. Be aware that any ES2015 Syntax may also break with UglifyJS[Plugin] atm, another more modern option would be babel-preset-babili \ud83d\ude1b .Also HTMLWebpackPlugin { inject: false } doesn't inject the bundles, but I guess that's on propose \ud83d\ude43 .  Can you give my the error logs please (message && stacktrace) in case it still doesn't work?. @kmiyashiro Yep, likely to be the cause of your problem \ud83d\ude43 . Please try the fix branch and provide feedback \ud83d\ude1b npm i -D postcss/postcss-loader#fix. @JiDai  postcssrc-cli I implemented the common config in this PoC/Fork but it's not overall stable yet, but for simple src.css -> dest.css with common config \ud83d\udc4d , if you want to test/help resolving issues, file them there ;) + vote on postcss-cli for integration.\n. @ai like @jescalan said this inside parseOptions is not bound to loader, likely that is the source of a few weird bugs, we recently experienced :). \n@jescalan \ud83d\udc4d \n. @ai updated CHANGELOG.md and package.json locally, can you approve patch release on npm please ? :)\n. > I told that I am sleeping \ud83d\ude09\nYou're sleeping as it seems \ud83d\ude1b , but sry I didn't see it, not to make any stress here, can I push CHANGELOG and pkg version bump with 'Release 1.1.1 version' or better you do it tomorrow :)?\n. But can't make npm patch release anyways. Sleep well \n@ai kk discared\n. @barraponto raw-loader or source-loader. What's the status here ? Is this still relevant ? :) What/How should we fixed it ?. \ud83d\ude43 ?. js\nmap: params.sourceMap\n        ? params.sourceMap === 'inline' \n          ? { inline: true, annotation: false }  // => '/*# sourceMappingURL='\n          : { inline: false, annotation: false }  // true => extrenal (result.map)\n        : false // default\nWill be fixed in v2, no sourcemap is generated by default, and external sourceMap: true && Inline sourceMap: 'inline' must be set explicitly. @prince In your first example, there is no plugins prop :) , {plugins: {} || [] } \ud83d\udc4d\u263a\n. yep, was on mobile when replying, didn't check the repo tbh :), I will fix it \n. @ai Thx for update README.md hadn't found the time yet \ud83d\udc4d \n\nshould we add more warnings in postcss-load-config about mistakes in config?\n\nYes, I have something in mind already and will look at the latest issues whats needed else, a few days please \ud83d\ude1b \n. \ud83d\udc4b \nThe missing ' is in the example I assume :)\njs\n// required('precss // <= ')({}),\nCould be a bug because those two a packages, there was are PR handling that better, but not released yet since I hadn't found the time to test it out, maybe @kovensky can elaborate on this :)\n. @Skilgarriff few minutes please, out of the gut you can try to hotfix at least postcss-cssnext with\nrequire('cssnext')({}).plugins\nBut not sure if it will work that way tbh :)\n. @ai @Skilgarriff  Still on it, will take a day longer, this is \ud83d\udc4e \ud83d\ude1b   any new info on this errors, detail config etc ? :)\n. @Skilgarriff  @princed  @YasserKaddour  Sry for the delay you guys, I do it today/tomorrow with other small fixes already on the list , I'm always busy with social work, there is no 'doing later' \ud83d\ude1b . Use {Object} style in your postcss.config.js plugins section meanwhile.. fixed in #161 via postcss-load-config update + watching config file for changes is supported now. @ai Doesn't hurt to provide metadata about node and npm version, I would say merge it \ud83d\ude1b \n@ntwb Doesnpm install --save|--save-dev postcss-loader currently display any warnings, because of missing pkg.engines prop?\n. @jfmercer \nbroken.webpack.config.js\njs\n{\n          loader: 'postcss-loader',\n          options: {\n            // sourceMap: true,\n            postcss: function() {\n              return {\n                plugins: [\n                  require('postcss-import'),\n                  require('css-mqpacker'),\n                  require('lost'),\n                  require('postcss-calc'),\n                  require('postcss-clean'),\n                  require('postcss-discard-comments'),\n                  require('postcss-extend'),\n                  require('postcss-mixins'),\n                  require('postcss-modular-scale'),\n                  require('postcss-nested'),\n                  require('postcss-utilities')\n                ]\n              };\n            }\n          }\n}\nWhy ?\ndiff\n...\noptions: {\n  // sourceMap: true,\n/* postcss property is unnecessary here, it's for webpack =< v1 only :) */\n- postcss: function() {\n- return {\n+  plugins: (ctx) => [\n  require('postcss-import'),\n  require('css-mqpacker'),\n  require('lost'),\n...\nwebpack.config.js\n``` js\n{\n          loader: 'postcss-loader',\n          options: {\n            // sourceMap: true,\n            plugins: (ctx) => [\n                  require('postcss-import'),\n                  require('css-mqpacker'),\n                  require('lost'),\n                  require('postcss-calc'),\n                  require('postcss-clean'),\n                  require('postcss-discard-comments'),\n                  require('postcss-extend'),\n                  require('postcss-mixins'),\n                  require('postcss-modular-scale'),\n                  require('postcss-nested'),\n                  require('postcss-utilities')\n            ]\n          }\n}\n``\n. If is just for the warning this is buggy atm, normally if options/plugins are set inwebpack.config.jsthis warning shouldn't pop up, feel free to ignore it as long as you get transpiled CSS output with your config :). The warning is entirely related topostcss.config.jsand has nothing to do with your inline config inwebpack.config.js. When you runwebpack-dev-server` does it load your spa(styles in particular) as expected/intended ?\n. > Many thanks for your help\n@jfmercer \ud83d\udc4d  np, welcome\n\nI still see a lot of this in the output, but the postcss-loader now works\nMany thanks for your help. Should I add some documentation to this project regarding the issue I encountered?\n\nNope thx, I'm aware of this weird bug PostCSS Config could not be loaded. Please check your PostCSS Config., and try to fix it soon ( need to do a bug fix release @postcss-load-config first :) ) and then investigate where/why the check for query (webpack.config.js) ? parseOptions(query) : loadConfig() doesn't work as expected and shows the postcss-load-config warning unnecessarily.\n. @sainthkh The behaviour you want to achieve is having all config files in a separate  e.g ./config folder? Because postcss.config.js should be loaded relative to the current file processed by postcss-loader e.g\n|\u2013src\n|   |\u2013styles\n|       |\u2013index.css\n|       |\u2013postcss.config.js\n|   |\u2013scripts\n|       |\u2013index.js\n|       |\u2013.babelrc\n|   |\u2013components\n|       |\u2013index.html\n|       |\u2013posthtml.config.js\n|\u2013webpack.config.js / gulpfile.js / gruntfile.js / postcss -i ... -o result.css (CLI)\n|\u2013package.json\nIf you want to have it all in one place and don't need a function as config => package.json\npackage.json\njs\n{\n  \"name\": \"\",\n   \"version\": \"\",\n   \"scripts\": \"\",\n   \"dependencies\": {}\n   \"postcss\": { parser: \"\",  plugins: {}}\n   \"babel\":  { env: {}, presets: [] }\n    ...\n}. > So, if you want to move postcss.config.js to ./config and handle the configuration, the code change is necessary.\n@sainthkh Yep, I understand, was not meant to be against it, asked to clearify usecase :). @sainthkh did you test it with webpack >= v2.x ?\njs\n{\n  test: /\\.css/,\n  use: [ \n    { loader: 'css-loader', options: { importLoaders: 1 } }, \n    { loader: 'postcss-loader', options: { config: 'alternative/path/to/postcss.config.js' } }\n  ]\n}\nNormally should be working just fine as it is implemented atm. @sainthkh This has popped in my mind recently, but I can also add it later :) \nwebpack.config.js\njs\n{\n  test: /\\.css/,\n  use: [ \n    { loader: 'css-loader', options: { importLoaders: 1 } }, \n    { \n       loader: 'postcss-loader', \n       options: { \n         config: { file: 'alternative/path/to/postcss.config.js', ctx: { modules: true } } \n       }\n    }\n  ]\n}\npostcss.config.js\njs\nmodule.exports = (ctx) => {\n   return {\n    parser: 'sugarss',\n    plugins: {\n      'postcss-import': {},\n      'postcss-modules': ctx.modules ? {} : false\n    }\n  }\n}\n@ai Please confirm PR. @QuantumInformation Can you show the various '' tags style-loader should have added to the index.html please\nFor getting started try to comment out/ remove ExtractTextPlugin in plugins. There are know issues with this plugin and CSS/PostCSS atm. , but I need to look them up again first.... > It seemed that we can use css-modules & other optimization plugin of postcss to process name mangle and optimization\nCan you explain that a bit further please ? \ud83d\ude1b \n\nand thus make it unnecessary to use css-loader...\n\nNope, css-loader adds the module syntax, while postcss-loader 'just' transforms the CSS {String} and returns it. You can use/try something like raw-loader || source-loader, but only postcss-loader won't work.\n. @kechol Nope \ud83d\ude1b the .sss is correct, it's the recommended extension when using SugarSS  => 'postcss-loader?parser=sugarss'. np \ud83d\ude03, this is unfamiliar to non SugarSS users (most users) and .css .foo would work perfectly fine aswell. @TrySound setting npm version was my fault, it's unnecessary crap, the PR author wanted to get rid of warnings triggert, because of npm version set in postcss-load-config package.json. Next postcssrc minor will fix that and I remove it in postcss-loader when bumping postcssrc version. @TrySound fixed in #161 . @samjbmason Could you try removing the .scss ext from webpack.resolve.extensions, since you testing for /\\$.(css|scss}/ in webpack.module.rules?\n. @samjbmason I think issue is locate somewhere here. Does it build correctly without postcss-loader ?\njs\n resolve:\n   { extensions: [ '.js', '.json', '.scss' ],\n     alias:\n      { component: '/Users/samm/Sites/design-system/node_modules/@lostmyname/components/dist',\n        chameleon: '/Users/samm/Sites/design-system/node_modules/chameleon-sass/assets/stylesheets',\n        css: '/Users/samm/Sites/design-system/node_modules/@lostmyname/css/scss',\n        fonts: '/Users/samm/Sites/design-system/node_modules/@lostmyname/css/fonts',\n        scss: '/Users/samm/Sites/design-system/src/scss',\n        helpers: '/Users/samm/Sites/design-system/src/js/helpers' },\n     modules:\n      [ '/Users/samm/Sites/design-system/src',\n        'node_modules',\n        '/Users/samm/Sites/design-system/node_modules' ],\n     unsafeCache: true,\n     aliasFields: [ 'browser' ],\n     mainFields: [ 'browser', 'module', 'main' ] },\n  resolveLoader:\n   { modules: [ '/Users/samm/Sites/lmn-webpack-config/node_modules' ],\n     unsafeCache: true,\n     mainFields: [ 'loader', 'main' ],\n     extensions: [ '.js', '.json' ] },. @samjbmason To my knowledge there is no importLoaders: true option for sass-loader. @samjbmason Yep, I can confirm that's a bug, functions/requires inside of rules.use[index].options are not parsed/loaded at all in webpack@2.2.0-rc4+. Meanwhile switch to either postcss.config.js (recommended) or try with LoaderOptionsPlugin\nTracking issue is here\n/cc @sokra @TheLarkInn. @samjbmason Ok I understand, so with LoaderOptionsPlugin the No PostCSS Config found in: ...vanishes (Definitely no postcss.config.js present somewhere, 'inline' options get parsed (especially functions) correctly)?. @ai Already open. @bebraw What context would be needed ? ctx.webpack is on the ctx by default, it's just not 'harmonised' with other build tool integrations, due to time leakings of mine atm. (ctx.env, ctx.ext, ctx.dir etc.)\nctx.env = process.env.NODE_ENV ( :shipit: )\nctx.dir = dirname(webpack.resourcePath) (:shipit: as ctx.webpack)\nctx.ext = webpack.resourcePath.endsWith('.sss') (:shipit: as ctx.webpack)\nAnything else that could be shimmed from ctx.webpack to its own prop? Note that build tool specific ctx should be always on it's own ctx['webpack'], but things like dir, ext, file || filename etc can be harmonised between them.\n@ai Implementation proposal for config \ud83d\udcaa \ud83d\ude1b \nwebpack.config.js\njs\n{\n  test: /\\.css/,\n  use: [ \n    { loader: 'css-loader', options: { importLoaders: 1 } }, \n    { \n       loader: 'postcss-loader', \n      // options.config is -1 in terms of code style/cide cleaness, \n      // maybe better solution can be found :)\n       options: { \n         config: { file: 'alternative/path/to/postcss.config.js', ctx: { modules: true } } \n       }\n    }\n  ]\n}\npostcss.config.js\njs\nmodule.exports = (ctx) => ({\n    parser: ctx.ext === '.sss' ? 'sugarss' : false\n    plugins: {\n      'postcss-import': { root: ctx.dir },\n      'postcss-modules': ctx.modules ? {} : false\n      'postcss-whatever': ctx.whatever ? {...ctx.foo} : {..ctx.bar}\n    }\n})\nBesides that, since webpack core member is present, I like to propose merging postcss-loader/css-loader \ud83d\ude1b . css-loader uses postcss for CSS Modules under the hood anyways\nwebpack.config.js\njs\n{\n  test: /\\.css/,\n  use: [ \n   // via postcss.config.js\n    { \n       loader: 'css-loader', \n       options: { \n         config: { file: 'alternative/path/to/postcss.config.js', ctx: { modules: true } }\n       }\n    },\n   // or inline \n    { \n       loader: 'css-loader', \n       options: { \n         parser: 'sugarss',\n         modules: true,\n         plugins: () => [...plugins]\n       }\n    }\n  ]\n}\nAnd by the way the same would apply to html-loader+ posthtml-loader + posthtml.config.js :). @ai Yes and no \ud83d\ude1b . If it's clear separation of concerns like e.g linting .scss files with postcss-loader and stylelint => use separate postcss.config.js in .scss directory\nIt's not possible to override plugin options via context, if required e.g ctx.modules\npostcss.config.js\njs\nmodule.exports = (ctx) => ({\n   parser: 'sugarss'\n   plugins: {\n     'postcss-nested' : ctx.package ==='spa' : {} : false\n     'postcss-bem':  ctx.package !=== 'spa' && { style: bem } : false\n     'postcss-modules': ctx.package === 'spa' && ctx.modules ? {} :  false     \n   }\n})\nwebpack.config.js\njs\n{ \n   loader: 'postcss-loader', \n   options: { ctx:  { modules: true, package: 'spa' } }\n}\nIs it really needed? Probably not, but it gives you max control over your config for whatever usecase you might have.. > Also, currently in the context a preloader is simply appended to the loaders array with nothing to distinguish it from a normal first loader -- both would be first in the chain (first from the right in the array) -- no enforce property, no nothing. So loaderIndex === loaders.length -1 doesn't guarantee that the current loader is pre.\n@Velenir I never understood that feature from the beginning since the loader chain is an array which gets reduced/composed  loader3(loader2(loader1())), setting anylint-loader/test-loader related loader as the first in the chain should basically do the same.\njs\nuse: [ 'style-loader', 'css-loader', 'postcss-loader' (build), 'sass-loader', 'postcss-loader' (lint) ]\n\nMy understanding is that we actually might want to go to the opposite direction in the future as it feels like the current css-loader does too much. This would mean pushing the CSS Modules functionality out of it entirely and possibly handling it through postcss-loader.\nMy understanding is that we actually might want to go to the opposite direction in the future as it feels like the current css-loader does too much. This would mean pushing the CSS Modules functionality out of it entirely and possibly handling it through postcss-loader.\n\nThat said, I would love to see a strong design for CSS pipeline as it feels like a sore point at the moment. Simplifying css-loader would just push the problem elsewhere.\n@bebraw Actually people even want to use it with postcss-loader when the getting started with all that fuss, the issue here is that postcss-loader lacks the logic to include CSS Modules into the bundle like css-loader does. Then folks switch to the 'css-loaderimplementation of CSS Modules. If someone could enlighten/guide me where/howcss-loaderhandles that I will try to find a solution forpostcss-loader`\n```js\n// css-loader { modules: true }\nimport $ from 'style.css'\n// postcss-loader { modules: true }\nimport $ from 'modules.json' \n```\n\nI have a feeling we might need some kind of concept of context in the design in order to eliminate weirdness like importLoaders index.\n\nHow in details does importLoaders work? :)\ne.g postcss-import with result.messages.dependency returns all @import paths && postcss-loader adds them to this.addDependencyTo(...messages.dependencies) automatically. Would that be enough to replace it, assuming that loaders like less/stylus/sass-loader take care of adding there @imports to webpack theirselves?\n\nI guess at minimum this might mean a separate option for css-loader where you specify which loaders it should use to parse on @import (loader definition within loader definition).\nSimplifying css-loader would just push the problem elsewhere.\n\nYep, to some point. Sourcemaps, Minifier, CSS Linter, CSS Modules, @import (Loading && Tracking) that's all provided by PostCSS.  The problem is the implementation 'chaos', it's just smells like this could be handled in a easier way with the right combo.\n/------CSS*(AST)--------\\\nbundle.js                                       ------.....\n                \\------CSS**(STRING)---/\n\n*PostCSS: Lint, Minify, Modules, @import, plugins ('advanced')\n**: Just include CSS {String} into the bundle ('simple')\n\nSo basically postcss-loader 'lacks'  advanced webpack support, while on the other hand css-loader 'lacks' advanced postcss support.  \u00af_(\u30c4)_/\u00af\n. @bebraw Could we ask Tobias to guide someone through the css-loader code base?\n\nDo we need multiple config anymo8re?\n\n1. Inline (no postcss.config.js)\njs\nconst options = { parser: 'sugarss'  map: 'false' }\nconst plugins = (ctx) => [ require('postcss-import')({ root: ctx.resourcePath }) ]\njs\n{\n  loader: 'postcss-loader',  options: {...options, plugins: plugins(webpack) } // ctx === webpack\n}\n2. Common Config (postcss.config.js)\njs\n{\n  loader: 'postcss-loader',  options: {}\n}\n3. Common Config (postcss.config.js) Advanced\njs\nconst config = { file: 'alternative/path/to/postcss.config.js', ctx: {} }\njs\n{\n  loader: 'postcss-loader',  options: {...config }\n}\n@ai These 3 should cover 99,9% of usecases and personal dev preferences. @ai ok, postcss-load-config seems to need revisited for error handling (postcss-cli) beforehand + config.file. The latter I have locally working for a while, mainly bc of #66 (Hotreload postcss.conig.js), but also for postcss-cli now. When resolved I send PR with ctx option + harmonisedctx (ctx.dir/ctx.ext), maybe hotreload if that works (in separate PR).. @Velenir @bebraw @ai anything left here or can I close? PR for context support is underway \ud83d\ude1b . @bebraw I have seen the styling-team channel, while I'm uncertain if I can add immediate value to it atm, I will definitely take a look when spare time. @AlexanderTserkovniy Could you remove extract-text-pluginand see if it builds without it, there are know issues with webpack 2 atm. Also if I'm not mistaken NODE_ENV=production webpack  === webpack -p the -p flag sets NODE_ENV=production to my knowledge. Otherwise please make config as simple as possible and enhance it with e.g webpack-merge gracefully to narrow the issue down.. @AlexanderTserkovniy It's an comfirmed issue with extract-text-webpack-plugin && webpack v2 there is already discussion about it in the webpack slack. Bugfix for it will hopefully be released soon. Closing as unrelated to postcss-loader . > btw @michael-ciniawsky webpack -p does set the NODE_ENV=production but not for webpack.config.js itself, that's why it have to be explicitly added.\nI see \ud83d\ude1b likely never had an issue until now \ud83d\ude4f \nSo the solution is to use query params/strings for now instead of the 'new' plain JS variant in loader options? postcss.config.js is loaded and applied ?. @QuantumInformation You need url-loader || file-loader to get images/assets into your bundle :)\nurl-loader\nfile-loader\nwebpack.config.js\njs\n// loaders\n...\n{...css.loaders},\n{\n  test: /\\.(png|jpeg|ttf|...)$/,\n  use: [\n   { loader: 'url-loader', options: { limit: 8192 } } \n   // limit => file.size =< 8192 bytes ? DataURI : File\n  ]\n}\n...\n\ud83d\udeab Closing as unrelated to postcss-loader\n. @QuantumInformation Then you must specify the publicPath in your webpack.config.js. But if your files are on the server what is webpack trying to load here? \nModule parse failed: /Users/nikos/WebstormProjects/quantumjs/img/globe.png\nUnexpected character '\ufffd' <---. ```\npublicPath: '/'\nbackground-image: url(img/image.png)\n```. @QuantumInformation \njs\n{ loader: 'css-loader', options: { url: false } } // disable webpack url() handling\n```css\nbackground-image: url('http://mysite.com/path/to/image.png') \n/ to display/see the image, it must be served already or test with a random google picture URL \nThe css-loader error should be gone now\n/\n```. @ai Blazing fast \ud83d\udc87\u200d\u2642\ufe0f . Thx np && appreciated \ud83d\ude1b . @AlexanderTserkovniy \nwebpack Config\n\nconfig.resolve may cause problems, please use it when a simple setup works to be sure it's not another problem\n\nwebpack.config.js\ndiff\nresolve: {\n-  extensions: ['.jsx', '.js', '.json', '.css'],\n+ extensions: ['.jsx', '.js', '.json'],\n-  alias: {\n-     css: resolve(__dirname, '../', 'app', 'src', 'styles')\n-  }\n}\n\nuse a String with the loader name instead of an Object, it should work in both ways, but for now I can personally confirm that the string approach definitely works :)\n\nwebpack.config.js\ndiff\n- {\n-   loader: 'postcss-loader'\n- }\n+ 'postcss-loader'\nPostCSS Config\n\ntest with one plugin without any side effects (e.g relying on external resources like @import)\n\npostcss.config.js\njs\nmodule.exports = (ctx) => ({\n   plugins: {\n     'postcss-nested': {}\n   }\n})\ntest.css\n```css\n.test {\n  color: red;\n&__title {\n     color: blue;\n   }\n}\n```\nIf there is any bug occuring when you raise config complexity, please make a test repo so I can reproduce and fix.. > Seems like it started working with latest version of loader as well as following postcss.config.js:\n@AlexanderTserkovniy We can close \ud83d\ude1b ?\n@AlexYankee Can you elaborate on the style-loader issue a bit more please ? :)\n```diff\n- const atImport = require('postcss-smart-import')\n+ const atImport = require('postcss-import')\n// postcss-import  >= v9 + postcss-loader adds @import automatically to webpack now\n// webpack -> ctx.webpack \n\nmodule.exports = function(webpack) {\nmodule.exports = (ctx)  => ({\nreturn {\n    plugins: [\n        ...\n        atImport({\naddDependencyTo: webpack\naddDependencyTo: ctx.webpack\n        }),\n```\n\njs\nmodule.exports = (ctx) => ({\n   plugins: [\n      atImport()\n   ]\n}) . @AlexYankee Can you try the following please, I currently on fixing that, but haven't found time to test with extract-text-webpack-plugin and was unaware of style-loader until now. In general there is a problem with 'advanced' options in webpack since rc. Using functions and require() in loader options  doesn't work/parse without an identifier anymore...I'm currently asking why and if thats the final behavior, if so I will update the docs soon.\njs\n [\n   'style-loader',\n   'css-loader',\n    {\n      loader: 'postcss-loader',\n      options: {\n        ident: 'postcss', // <---\n        plugins: function () {\n          return [\n            require('precss'),\n            require('autoprefixer')\n          ];\n        }\n      }\n    }\n]. @AlexanderTserkovniy Will do, on it already, but for you it works with your setup atm? If close please and of course feel free to reopen anytime if an error occurs :). @AlexanderTserkovniy  \ud83d\udc4d \npostcss.config.js\njs\nmodule.exports = {\n  plugins: {\n    'postcss-import': {},\n    'postcss-cssnext': {\n      browsers: ['last 2 versions', '> 5%'],\n    },\n    'postcss-nested': {} // unnecessary, nesting is already supported by cssnext\n  },\n};\nCSSNext\nEverything else seems to be pretty sane \ud83d\ude1b. @csmosx \n\nIt fixed the \"No PostCSS Config found\" error I couldn't figure out.\n\n\ud83e\udd23  I was searching for it for weeks...\n\nI'm currently asking why and if thats the final behavior, if so I will update the docs soon.\nI'm interested in that too.\n\nA gentle :shipit: on webpack/webpack#4073 \ud83d\udc4d to get rid of the { ident: 'crap' } \ud83d\ude1b. diff\n- require(\"autoprefixer\")\n+ require(\"autoprefixer\")({...options}). webpack >= v2.2.1. precss is unmaintained and if you use Less then you don't need it, since it's propose is to mimic SASS . require(\"autoprefixer\")() // defaults\nShould also work, otherwise the bug is somewhere else \ud83d\ude1b . That looks weird, could you post the full log please?. [8] ./~/css-loader!./~/postcss-loader?{}!./~/less-loader!./src/less/main.less 37.6 kB {0} [built]\n./~/css-loader!./~/postcss-loader?{ /* Plugins? */ }!./~/less-loader\nWhich versions of webpack, ETWP && loaders you are running on atm ? . css-loader/postcss-loader? :). You will need postcss-loader > v1.0.0 for webpack v2 compatibility, this should also remove\n(node:134) DeprecationWarning: loaderUtils.parseQuery() received a non-string value \nwhich can be problematic, see https://github.com/webpack/loader-utils/issues/56\nparseQuery() will be replaced with getOptions() in the next major version of loader-utils.\nplease make sure to have the latest style-loader/css-loader aswell\n. @detj What is the current version of webpack you use? webpack v1.x ? . > Creating postcss.config.js and moving the configuration solves my problem, but what I want to understand is why the configuration from webpack not being read?\n@detj Yep thats what I'm also interest in, bc normally options in webpack.config.js supersede postcss.config.js\nCould you please do the following to help debugging\nbash\ncd node_modules/postcss-loader\neditor index.js\npostcss-lodader/index.js\n[L47] console.log(params)\n[L51] console.log(options)\nand run that with options in webpack.config.js + afterwards post the result here please? :)\n\nAlso, there now seems to be multiple ways of loading postcss config including adding it in package.json or creating .postcssrc file. Is there any difference among them?\n\npackage.json|.postcssrc (JSON) [static] <=> postcss.config.js(JS) [dynamic] :)\npackage.json\n```json\n{\n   \"devDependencies\": {\n     \"cssnano\": \"^3.10.0\",\n     \"postcss-nested\": \"^1.0.0\"\n},\n  \"postcss\": {\n    \"parser\": \"sugarss\",\n    \"plugins\": {\n      \"postcss-nested\": {},\n      \"cssnano\": { \"autoprefixer\": false }\n    }\n  }\n}\n```\npostcss.config.js (recommended)\njs\nmodule.exports = (ctx) => ({\n   // works for both (file.sss, file.css) automatically\n   parser: ctx.webpack.resourcePath.endsWith('.sss') : 'sugarss' : false,\n   plugins: {\n     'postcss-nested': {}\n     'cssnano': ctx.env === 'production' ? {} : false // Will only load in production mode \n  }\n}). extract-text-webpack-plugin-output-filename\n@detj  Yep, thx I think we found the 'bug' \ud83d\ude1b , you use  extract-text-wbepack-plugin as it seems, which version and could you try if it works without extract-text-webpack-plugin + post your whole webpack.config.js please and say it directly extract-text-webpack-plugin + postcss in it's current state is a troublemaker and straight out mess, we recieve tickets for it nearly every day atm, I already stressed out to fix it in the webpack slack and work on fixing it myself, but the code is very complicated and verbose.. \n@ai I work on new docs for inline config already, but I'm waiting for reply if 'this' (@example) will stay or not because I absolutely don't like it \ud83d\ude1b  => { ident: 'whatever' }  => https://webpack.js.org/guides/migrating/#complex-options\n@artemkaint @maratfakhreev \u2b07\ufe0f \njs\n{\n  loader: 'postcss-loader',\n  options: { ident: 'postcss', plugins: () => [ require('plugin') ] }\n}\nREADME (WIP)\n@ai I push (PR) them as quickly as possible, should I in addition push just the example fixes asap? I also wanted to add an example for extract-text-plugin but it must be fixed/working before I can write docs :D. https://github.com/webpack/extract-text-webpack-plugin/pull/343 etc.. @ai @artemkaint @maratfakhreev guys please a :shipit:  on https://github.com/webpack/webpack/pull/4073  to get rid of { ident: 'crap' } \ud83d\ude1b \ud83d\udc4d . @VladShcherbin You where faster \ud83d\ude1b \nAs a note for anyone coming here using an older webpack || extract-text-plugin version => \n1. webpack >= v2.2.1 solves bugs in loader.options by automatically creating an ident now. Options containing functions and require()  statements work as expected. \n2. ExtractTextPlugin is on the finish line, be aware of an API change fallbackLoader => fallback &&  loader => use before ExtractTextPlugin v2 final\nwebpack.config.js\n```js\nimport ExtractText from 'extract-text-webpack-plugin'\nexport default {\n  module: {\n    rules: [\n       {\n          test: /.css$/,\n          include: 'path/to/includes', // optional\n          exclude: 'path/to/excludes', // optional\n          use: [\n            'style-loader',\n             { loader: 'css-loader', options: { importLoaders: 1 } },\n             { \n               loader: 'postcss-loader', \n               options: { plugins: (ctx) => [ require('plugin')({ option: ctx.resourcePath }) ] }\n             }\n          ]\n       },\n       // Extract Text Plugin\n       {\n          test: /.css$/,\n          include: 'path/to/includes', // optional\n          exclude: 'path/to/excludes', // optional\n          use: ExtractText.extract({\n            fallback: 'style-loader'\n            use: [\n               { loader: 'css-loader', options: { importLoaders: 1 } },\n               { \n                 loader: 'postcss-loader', \n                 options: { plugins: (ctx) => [ require('plugin')({ option: ctx.resourcePath }) ] }\n               }\n             ]\n          })\n        }\n     ]\n  },\n  plugins: [\n    new ExtractText([name].css)\n  ]\n}\n``` \nClosed as fixed :). @whisher According to your StackOverflow post, it could be an issue with your @imports. Do you import modules (node_modules) using this syntax@import '~bootstrap.css' aswell ? The ~ is webpack specific (css-loader), postcss-import on the other hand resolves @imports automatically  @import 'bootstrap.css' => node_modules > root  etc., so you don't need the ~ here \ud83d\ude1b . Be also careful/aware of css-loader having his own logic for handling url(https://...) and @import 'https://...'  in case you want to load within the browser later on. postcss-import is fine with them as long as there is a http(s):// prefix etc.\njs\n{\n  loader: 'css-loader',\n  options: { url: false, import: false }\n}. @Quantuminformation Google Fonts are @imported \ud83d\ude1b \n\nGetting Started\n```css\n@import url('https://fonts.googleapis.com/css?family=Roboto');\n.roboto {\n   font-family: 'Roboto', sans-serif;\n}\n``\n. @QuantumInformation ahh... \ud83d\ude1b ok you meant@font-faceworks fine with justcss-loader(nopostcss-loader). Yes please make test repo for debugging \ud83d\udc4d . @QuantumInformation Did you find something in regard of the issue? I'm a bit clueless here and couldn't reproduce. Closing for now, if you find something related topostcss-loaderfeel free to reopen anytime. @willin Could you try the following please ?style-loader` should in any case not be part of the extract pipeline and only used as fallback in case the extraction fails.\nwebpack: v2.2.1\nextract-text-plugin: v2.0.0-rc.3\njs\nuse: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: [ \n              { loader: 'css-loader', options: { importLoaders: 1 } },\n              'postcss-loader'\n          ]\n       }). \"extract-text-webpack-plugin\": \"^1.0.1\" => \"extract-text-webpack-plugin\": \"^2.0.0-rc.3\" . @willin postcss.config.js please, asap you can try without @font-face if that's the root cause . @willin What's the status here? \ud83d\ude1b Did you resolve the issue? I'm closing for now, feel free to reopen, but please include the info requested above for debugging. @egoist Thx \ud83d\ude1b . @ai I add a comment that .sss === SugarSS in the new docs, taking it into account, I push them tomorrow when I finally have some spare time for OSS. @kidney Yep loader-utils >= v1.0.0 had a API breaking change I'm working on it :), feel free to ignore this warning meanwhile. @NekR Which version of postcss-loader ?.  >Maybe. What other useful information could be in loader?\nThe only important I can think of atm is loader.addDependency(file) => ctx.watch(file)/ctx.webpack.watch(file) , but I will check what else we may have there \ud83d\ude1b \n\nI afraid webpack 1 users :D. But pack is not so popular. We can ask them to migrate to webpack 2 or keep old version.\n\nI have no Twitter, but maybe a poll would be a good idea to see how popular the feature is, never seen it in the endless configs @extrac-text-webpack-plugin and the like, but who knows...\n\nOf course.\n\n\ud83d\udc4d \n\nGood idea if we can wait about month (I am preparing for React London).\n\nYep I also in favour to wait, no rush at all and if I have a month to get it working I will continue experimenting with 'removing' css-loader and get CSSModules working with postcss-loader ou-of-the-box e.g \njs\n// Last Loader e.g 'postcss-loader!sass-loader'\nif (loader.loaderIndex >= 0) \n   // webpack 2 => ES2015 Module\n   if (process.env.WEBPACK_VERSION === 2) {\n      const module = `export default ${result.css}`\n      return callback(null, module)\n   }\n   // webapck 1 => CJS Module\n   const module = `module.exports = ${result.css}`\n   return callback(null, module)\n} else {\n   // Next Loader => {String}\n   return callback(null, result.css)\n}\nBut experimental and only if it works without headaches :D. @evilebottnawi I need to triage a few small things before actually ready and @ai needs to approve it then :), It's blocked by a few other things, while we can go with module.exports (CJS) for now, I need to test adding css-base from css-loader first (Module Deduplication), it's more complicated \ud83d\ude1b . @ai ? \ud83d\ude43 I can take 'full' maintainance of this loader of course \ud83d\ude1b npm owner add or an npm organisation (teams) in case you want more 'control'.\n@evilebottnawi Yeah sure welcome, Angular Commit Convention (standard-version => CHANGELOG.md), StandardJS >= v2.0.0 and we are up and running :). @evilebottnawi I will recommend you for css-loader and co aswell, if you are interested, we need all hands we can get :D. @ai postcss-loader => webpack-contrib?. No rush the webpack part will take longer :D. @evilebottnawi Could you please drop my your e-mail so we can add you to the @webpack slack \ud83d\ude1b? . You should got or get an invite soon :)\n. @ryani33 Thx . @ertrzyiks Is it possible to detect Happypack usage somehow ?. Done #180. But if @amireh could give a insight nevertheless, would be appreciated \ud83d\ude1b . @kenisteward Just to clearify you mean warnings generated by stylelint in particular here ?. @kenisteward Can you point to where in the source of stylint-webpack-plugin it throws the warnings as errors?\nI basically agree that throwing an error might sometimes be the better solution, especially to 'enforce' a certain code style, but if stylelint pushes warnings/errors to result.warnings it will be difficult to handle, bc that's normally it's propose and other plugins expecting to display a warning via result.warnings will break.\ncc @ai \n. @MatteoGabriele What is your exact version of webpack ? You can of course use PostCSS via configuration in webpack.config.js if you prefer. FWIW vue-loader now supports postcss.config.js aswell :D so with one postcss.config.js you could get rid of the redundant PostCSS Setup \ud83d\udcaf . If your are using webpack < v2.2.1 you need to update to this version, bc there was a bug with 'complex' (functions, require()) options for loaders. webpack 2.2.1 fixes this and your setup should work as expected. >  I'm using a custom CLI so the entire dev server and webpack\n@MatteoGabriele uhh... all this custom configs all the time :D\n\nif you can not update to v2.2.1 now => \n\nwebpack.config.js\n{ \n   loader: 'postcss-loader', \n   options: {\n        ident: 'postcss', // this one\n        ...\n   }\n}\nComplex Options\n\nCan I choose where to drop my postcss.config.js file?\n\n\nYes everywhere down the file tree, but in the same directory as the file (no './config' subfolder), it's even possible to cascade them and nearest postcss.config.js  found relative to dirname(file) applies. \ud83d\ude1b (Recommended is './' (root)). \n\n|\u2013 src\n|    |\u2013 postcss.config.js (.vue && .css)\n|    |\u2013 components\n|    |    | \u2013 component.vue\n|    |    | \u2013 postcss.config.js (.vue only)\n|    | \u2013 styles \n|    |    | \u2013 style.css\n|    |    | \u2013 postcss.config.js (.css only)\n|\n|\u2013 postcss.config.js (.vue && .css) [recommended]\n|\u2013 webpack.config.js\nThe above works out-of-the-box, no setup required \n\nFor subfolders you need to set the config path explicitly (not recommended) =>\n\nwebpack.config.js\n{ loader: 'postcss-loader', options: { config: 'path/to/config/folder/with/postcss/config ' } }\n|\u2013 config\n|   | \u2013  postcss.config.js (.vue && .css)\n|\u2013 src\n|   |\u2013 components\n|   |    | \u2013 component.vue\n|   | \u2013 styles \n|   |    | \u2013 style.css\n|\n|\u2013 webpack.config.js. @highdali :D Where should I start here... \ud83d\ude1b  \njs\nentry: [ ..., `${__dirname}/src/stylesheets/main.scss`]\nYou can't use a .scss file as an entry point :). Instead require it in your components e.g in \nindex.jsx\n|\u2013components\n|   |\u2013 MyComponent\n|   |    | \u2013 index.scss\n|   |    | \u2013 index.jsx\n|\n|\u2013 App.scss\n|\u2013 App.jsx\n|\u2013webpack.config.js\nMyComponent/index.jsx\n```js\nimport React, { Component } from 'react'\nimport $ from './index.scss' // <=\nclass MyComponent extends Component {\n   render () {...}\n}\nexport default MyComponent\n``` \nApp.jsx\n```js\nimport React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport $ from './App.scss'\nimport MyComponent from './components/MyComponent'\nclass App extends Component {\n   render () {\n      return (\n         \n      )\n   }\n}\nReactDOM.render(, document.getElementById('app'))\n```\nwebpack.config.js\njs\nentry: './App.jsx'\n\nModule build failed: Error: ENOENT: no such file or directory, open '/Users/highdali/tmp/book-review-moa/src/stylesheets/~semantic-ui-css/semantic.min.css'\n\nThat's sass-loader because of the ~ and no includePaths option is set see below\n'/Users/highdali/tmp/book-review-moa/src/stylesheets/~semantic-ui-css/semantic.min.css'\nYou want to load bootstrap/semantic-ui from node_modules, but it treats them as a normal @import\nwebpack.config.js\ndiff\n{\n   test: /\\.scss$/\n   use: [\n     'style-loader',\n+   { loader: 'css-loader, options: { importLoaders: 1 } },\n+   { loader: 'postcss-loader', options: { plugins: [ require('autoprefixer')({...options}) ] },\n+   { loader: 'sass-loader', options: { includePaths: 'path/to/@imports/' } }\n  ],\n}\nYou won't need PreCSS if you use SASS (sass-loader)\nPlease remove LoaderOptionsPlugin you don't need it anymore since postcss-loader fully supports webpack 2\nwebpack.config.js\ndiff\n plugins: [\n   new webpack.HotModuleReplacementPlugin(),\n- new webpack.LoaderOptionsPlugin({\n-    options: {\n-      postcss: [\n-          require('precss')({...anything options...}) /* HERE. */\n-          require('autoprefixer')\n-        ]\n-      }\n-    })\n  ]. > So I don't need to specify includePaths option, right?\n@highdali I'm not \ud83d\udcaf  sure about that tbh \ud83d\ude1b , does it work now/work without @import ~/semantic-ui-css/semantic.min.css at least?.  > does not mean home directory. It tells webpack resolve engine should find the module from 'node_modules'\nYep exactly, but in the Error above it didn't work and reied to search in your project for e.g semantic-ui-css/semantic.min.cssand the error was simply that it doesn't exists there :)\n\nI tried your solution, but i didn't know what should put in includePaths: 'path/to/@imports/'\nthanks.\n\n| \u2013 src\n|    | \u2013 components (@imports)\n|    | \u2013 index.scss\n|\n|\u2013 webpack.config.js\n|\u2013 package.json\nwebpack.config.js\njs\n{\n   test: /\\.scss$/\n   use: [\n     'style-loader',\n     { loader: 'css-loader', options: { importLoaders: 1 } }\n     { loader: 'sass-loader', options: { inlcudePaths: path.resolve('src/components') }\n  ]\n}\nIf you're a beginner, its good to learn webpack inside out but also very hard :), If you want just to get something running maybe try create-react-app which handles all the webpack things (setup) for you and you can focus on your actual app also. On the other hand if you want to play around webpack Guides can help you a ton in getting up and running with webpack \ud83d\ude1b. . @towry \ndiff\n- var autoprefixier = require('autoprefixier');\n+ var autoprefixer = require('autoprefixer');\nautoprefixier => autoprefixer \ud83d\ude1b . Please ensure it is installed correctly and the package name in package.json is also correct in case a package named autoprefixier exists run npm prune && npm i -D autoprefixer after fixing  package.json. @yangg webpack version please \ud83d\ude1b. If you're on webpack <= 2.2.1. That's a known bug with 'Complex Options' in loader options like using {Function}/require(). 2.2.1 fixed this and if you can't upgrade (highly recommended) then try this\nwebpack.config.js\njs\n{\n  loader: 'postcss-loader',\n  options: {\n    ident: 'postcss' // <= \n    plugins: [\n      require('autoprefixer')({\n        browsers: [ 'iOS >= 5.1' ]\n      }),\n      require('postcss-pxtorem')({\n        rootValue: 46.875,\n        propWhiteList: []\n      })\n    ]\n  }\n}\nAlso a fresh rm -rf node_modules && npm i can do wonders \ud83d\ude04 . If you still have any regressions feel free to reopen \ud83d\ude1b . @jerexyz Example for that (in code) please \ud83d\ude1b. @jerexyz I see, so basically you want to change the config resolving order ? \ud83d\ude1b \nCurrent\nwebpack.config.js> postcss.config.js > Error\nProposed\npostcss.config.js> webpack.config.js > Error\nThe logic for config loading starts here, but I must try and think of possibilities to do so first, please be patient and if you have a non breaking solution please share :). @jerexyz But not for all current users of postcss-loader :), especially existing webpack.config.js/postcss.config.js combos expecting webpack.config.js > postcss.config.js will break with this change \ud83d\ude1b . Maybe we can introduce this in v2.0.0, how will the loader logic look like if someone doesn't use a Promise in options.plugins, but a {Function} or {Array} ? How to determine config loading ? . Send PR please \ud83d\ude1b it seems I'm not \ud83d\udcaf getting it. @jerexyz Did you find a solution for this ? I will try to help wherever I can, but I don't think switching the current config loading behaviour is applicable in the proposed way. . @kud There is an issue open in postcss-load-config, but I don't intend to support it out-of-the-box, the babel deps would be bigger than the whole module itself \ud83d\ude1b , you can try babel-register and see if it works. Otherwise nope sry . @kud The purpose of LoaderOptionsPlugin was for the transition phase from webpack v1 => webpack v2 in particular for loaders, which didn't support the new syntax during that time. Since postcss-loader > v1.0.0 webpack v2 is fully supported and the LoaderOptionsPlugin can be safely removed \ud83d\ude1b \nwebpack.config.js\n```diff\n{\n  module: {\n     rules: [\n        {\n             test: /.css/,\n             use: [\n                 'style-loader'\n                 { loader: 'css-loader', options: { importLoaders: 1 } }\n+                { loader: 'postcss-loader', options: { plugins: [...plugins] }}\n+                // 'postcss-loader'  (postcss.config.js)\n             ]\n        }\n     ]\n  },\n  plugins: [\n-    new webpack.LoaderOptionsPlugin(...)\n  ]\n}\n```\nMake sure to have webpack >= v2.2.1 installed, since there was a bug using require() inside loader.options before v2.2.1. @pmsorhaindo Hmm...:stuck_out_tongue: normally this is intentional, the config search algo starts searching from dirname(file) currently processed by the the loader and goes upwards until it hits the project root. You can pass a fixed config path for config lookup to disable the config cascade\nwebpack.config.js\njs\n{\n   loader: 'postcss-loader', options: { config: 'path/to/postcss.config.js' }\n}\nCan you provide a link to the module you are using, containing the postcss.config.js? I would like to investigate how to disable this :). And if you have the time could you try by excluding node_modules ?\nwebpack.config.js\njs\n{ \n   test: /\\.css$/,\n   use: [\n     ...,\n     ...,\n     { loader: 'postcss-loader' }\n   ],\n   exclude: /node_modules/\n}. @pmsorhaindo Still curious why it actually gets picked up, bc normally only the file containing the @import, should trigger config lookup :D Do you import the lib via webpack (1) or a postcss-plugin (2) postcss-import? postcss-cssnextdoesn't seem to ship with an import plugin \ud83d\ude1b \n(1)\ncomponent.js (css-loader!postcss-loader)\njs\nimport lib from 'some/lib.css'\nimport style from './style.css'\n(2)\ncomponent.css\ncss\n@import 'some/lib.css'. yeah... \ud83d\ude1b  still need to find a way to ignore this properly \ud83d\ude0a. kk if still any regressions feel free to reopen or just open a new issue . @evilebottnawi Yep, right, could you check the #177, I intend to do that for v2.0.0 since it is technically a semver major, but wainting for other related loaders I need to update first style-loader/ extract-text-webpack-plugin. @evilebottnawi Yep \ud83d\ude1b  test if disabling sourcemaps works correctly\nSourcemap Implementation is here\nv2.0.0 should work without css-loader and export a module directly (perf), but it is planned to export ES2015 Modules in the near future and style-loader/ extract-text-webpack-plugin don't support that yet. If you what to try that out you need to change this line to a CJS Export\ndiff\n- const module = `export default ${JSON.stringify(css)}`\n+ const module = `module.exports = ${JSON.stringify(css)}`\nwebpack.config.js\njs\nconst config = {\n  module: {\n    rules: [\n      {\n         test: /\\.css$/,\n         use: [ 'style-loader', 'postcss-loader' ]\n      }\n    ]\n  }\n}\nOtherwise by using use: [ 'style-loader', 'css-loader', 'postcss-loader' ] you can skip that part, since postcss-loader will export a {String}  as it is the current behaviour.. npm i -D michael-ciniawsky/postcss-loader#v2. Fixed by #191 . We could add a check here and early return the css with a warning to maybe  remove postcss-loader from webpack.config.js. Good catch \ud83d\udc4d \n. We need to take care of options too, in case postcss-loader is used for e.g SugarSS. Maybe around here, but if postcss-loader should take care of user/usage error(s) is another question \ud83d\ude1b . if const plugin = [], const options= {} skip parsing + display warning and early return, but if that is the case postcss-loader shouldn't be setup from the beginning and it can only happen if postcss.config.js is empty, which also errors in postcss-load-config. hmm... so while thinking about it I would say nothing :D, already fine, maybe test again if all cases are covered. \u00af_(\u30c4)_/\u00af\nThat change would be more of 'save me from my own stupidness' kind of thing I guess and ensure it doesn't hit performance while doing so. @dmytro-lymarenko \npostcss-css-variables\npostcss-custom-properties\npostcss.config.js\n```js\nconst vars = {} || require('path/to/vars.json')\nmodule.exports = (ctx) => ({\n   plugins: {\n     'postcss-custom-properties': { variables: vars }\n   }\n})\n```. > ERROR in ./~/css-loader?{\"modules\":true,\"importLoaders\":1,\"localIdentName\":\"[local]_[hash:base64:8]\"}!./~/postcss-loader?{\"parser\":\"postcss-scss\"}\n!./~/postcss-loader?{\"parser\":\"postcss-scss\"  => plugins? <=  }\n@rozzzly Your plugins are missing in the query, that happend (bug) in webpack versions < v2.2.1  with so called 'complex options' ({Function}|| require()), so either update to latest webpack in case your version is < v2.2.1 or use an options prop called ident\nwebpack.confg.js\njs\n{\n  loader: 'postcss-loader',\n  options: {\n    ident: 'postcss', // <= this line\n    parser: '...',\n    plugins: () => [...plugins]\n  }\n}\n\u26a0\ufe0f Note that postcss-scss does not compile any SASS Syntax :)\nIf you still have any regressions feel free to reopen \ud83d\ude1b \n. @Kikobeats Try this config \nwebpack.config.js\njs\n{\n  test: /\\.(css|scss)$/,\n  use: ExtractTextPlugin.extract({\n    fallback: 'style-loader',\n    use: [{\n      loader: 'css-loader',\n      options: {\n        minimize: true,\n        sourceMap: true,\n        importLoaders: 2\n      }\n    }, {\n      loader: 'postcss-loader',\n      options: {\n        parser: require('postcss-scss'), // Why ?\n        sourceMap: true\n      }\n    }, {\n      loader: 'sass-loader'\n      options: {\n        sourceMap: true\n      }\n    }]\n  })\n}\n\nNote how I commented sourcemap: 'inline' because I undestand sass-loader is the last loader in the pipeline and is enough with generate the sourcemap in these step? or is necessary generate twice?\n\nsass-loader is the first loader that receives your .css/.scss files. (reduceRight)\n\nAnother question related: inline is the unique value available for sourcemap? I didn't found docs.\n\nYes, atm this is postcss-loader specific, @webpack-contrib we are currently discussing  about supporting that in general (css-loader/style-loader) if needed or otherwise removed it enterily to avoid confusion \ud83d\ude1b . It was added in postcss-loader via a PR from an angular folk a while ago, but doesn't really work with other loaders tbh. Below is the loader skeleton explaining the data flow applying to all loaders in the CSS Pipeline + a Sourcemap Blueprint compatible with webpack\nloader.js\n```js\nmodule.exports = function (css, map) {\n  return transform(source)\n    .then((result) => {\n       css = result.css\n       options.sourceMap ? map = result.map : map\n   return this.callback(/* Error */, css, map)\n})\n\n}\n``` \nmap.json\njs\n{\n  filename: \"\",  // will be ignored\n  sourceRoot: \"\",  // needs to be empty\n  // only the content from the entry, intermediate loaders shouldn't touch this at all \n  sourceContent: `${ source.scss }`,\n  sources: [ path.resolve('path/to/css'), ... ],  // absolute path, each loader needs to update this\n  mappings: '' // every loader needs to update these after transformation\n}. Ooops... \ud83d\ude1b yep sry postcss-loader sourcemaps are always generated atm, but this will change in the upcoming v2.0.0 release for perf reasons\nDeveloper Guides\nLoader Runner\nLoader API\nTapable (Plugin 'Runner') \n\n\u26a0\ufe0f Most of webpack is a Tapable (Plugin) Instance, an Event Emitter with Flow Control and webpack API \ud83d\ude1b \n\nPlugin API. .css files can not be used as entry points, webpack is a JS Module Bundler and HTML, CSS, Assets require a loader to work correctly.\npostcss-cssnext has a plugin for CSS Custom Properties included, you can save your variables in a JSON file etc and add them via postcss-cssnext, if you use a postcss.confg.js file autoreloading them works out-of-the-box :)\npostcss.config.js\n```js\nconst vars = {...}\nmodule.exports = (ctx) =>\u00a0({\n plugins: [\n   require('postcss-cssnext')({\n      variables: vars,\n      browsers: '...'\n   })\n ]\n})\n```\n|\u2013 src\n|   |\u2013 entry.js\n|   |\u2013 entry.css \n|   |\u2013 components\n|       |\u2013 component\n|           |\u2013 index.css\n|           |\u2013 index.js\n|\n|\u2013 postcss.config.js\n|\u2013 webpack.config.js\nentry.js\njs\nimport styles from './entry.css'\n...\nentry.css\n```css\n@import 'normalize.css';\n@import 'bootstrap.css';\n.entry {}\n```\n./components/component/index.js\njs\nimport styles from './index.css'\n./components/component/index.css\ncss\n.component1 {}\nextracted.css\n```css\n/ Order Critical  [Global] CSS /\n@import 'normalize.css';\n@import 'bootstrap.css';\n.entry {}\n/ Order Non-Critical Components [Local] CSS /\n.component1 {}\n.component2 {}\n.componentN {}\n...\n```\nwebpack walks the require()/import' s (that's the only 'order' you will get \ud83d\ude1b ), in terms of CSS usage think of require()/import  as an @import and try to keep component CSS always relative ./ to the component JS to avoid 90% of ExtractTextPlugin Order Issues.\n. @nsfmc Some tests are failing I take a deeper look tomorrow \ud83d\ude1b . @nsfmc Sry for the delay I've been busy \ud83d\ude1b , the config in your example looks sane and when postcss options are set in webpack.config.js, postcss-load-config (postcss.config.js) shouldn't trigger at all, I will test the  upcoming postcss-loader v2.0.0 with ETWP extensively and marked your example to do so :) Meanwhile I close this PR since it isn't fixing the issue and I'm on the finishing line for v2.0.0 \ud83d\udcaf \nTracking issue is #205, so if you find anything that could be a possible hint please let me know \ud83d\ude43 \nThx \ud83d\udc4d . It's complicated \ud83d\ude1b  and could be a bug somewhere else enterily, see #203, the cause in this issue is unrelated to the problem here enterily, but some error happend elsewhere in css-loader and then the options in postcss-loader set in webpack.config.js didn't get picked up anymore \u00af_(\u30c4)_/\u00af. @kud First, sry for the delay \ud83d\ude1b \n\nI always read postcss-loader?{\"plugins\":[null]} before, even when defining the plugins this way but had no troubles so I didn't take care so much.\n\nThe alias only works on e.g .a { background: url() }  the TypeError: Cannot read property 'postcss' of null comes from css-loader, which also uses PostCSS internally for CSS Modules atm and the hacky solution there, fails at some point and postcss can't process the content. \n\n\nWhy it doesn't work with my way to define directly the plugins in webpack config?\n\n\nThat's a good question and something seems to be flanky within loader-runner but no clue what atm, see #201, where it also bugs elsewhere in 'wepack' (ETWP) and the postcss options for postcss-loader  set in webpack.config.js don't get applied anymore \u00af_(\u30c4)_/\u00af\n\n\nI don't like having so many files to define my compilation\n\n\nAgreed it's personal preference and both (webpack.config.js/postcss.config.js) should work\n\n\nI can't use ES6 in postcss.config.js\n\n\nIf you are on Node v6+ I'm sure besides of ES2015 modules you can \ud83d\ude1b, note that e.g babel would need to run everytime for every file which is unnecessary overhead for a simple config file.\nI will test it with the upcoming v2.0.0 of postcss-loader, but it seem to be unrelated to the loader itself, since postcss options in webpack.config.js are so called Complex Options ({Function}) which require webpack to generate an  ident interally to stringify them, I guess it fails/bugs there, when something else fails and this could get complicated \ud83d\ude43 \n!./~/postcss-loader?{\"plugins\":[null]}!./src/styles/ui.local.css\n!./~/postcss-loader?-->ref--0-0<--{\"plugins\":[ [function], [function] ]}!./src/styles/ui.local.css\n. @jeffijoe Please post your webpack.config.js here, both ways are supported \ud83d\ude1b I will help to fix it, looks like a setup error somewhere . @jeffijoe Still free free to post your webpack.config.js \ud83d\ude1b . webpack version and the error log aswell please :) . The ERROR in ./.../... ... postcss-loader?->{}<- is empty ? The config doesn't seem to be applied and that's why it tries to load postcss.config.js. Please post the full webpack.config.js\n. diff\n    options: {\n      plugins: () => {\n-       return clean([\n+      return [\n          require('rucksack-css')({\n            autoprefixer: true\n          }),\n-          prod && require('postcss-csso')\n        ])\n      }\n    }\nThis won't work because webpack stringifies the returned value internally, that's why we have postcss.config.js and recommend it \nwebpack.config.js\njs\n...\nplugins: () => prod ? return [ ...plugins ] : return [ ...plugins, ...devPlugins ] // maybe\nor\npostcss.config.js\njs\nmodule.exports = (ctx) => ({\n  plugins: [\n    ...\n    ctx.env === 'production' ? require('postcss-csso') : false\n  ]\n}). It needs an ident stringifies the functions in options: {}+ references the the require() calls based on the ident. The LoaderOptionsPlugin works enterily different and it's purpose was to make loaders not supporting webpack 2 option syntax work with webpack 2 beta during the webpack 2 beta phase and is deprecated now. It should be used only for loaders not supporting webpack 2 syntax, otherwise removed.\nDoes it work now? . hmm... last resort is trying with postcss-csso instead of rucksack-css (Plugin Package), otherwise it's a more nasty issue somewhere else, if still no luck please try a config file aswell for debugging purposes. Can you tree your project and post it here please \ud83d\udc4d :). Out of the gut I guess neither postcss-load-config when placed in ./src nor webpack.config.js  in ./src can pick up the packages in node_module. Nope \ud83d\ude1b at least not to my knowledge. @funkyLover No both are supported and webpack.config.js > postcss.config.js in terms of loading behaviour, we still recommend postcss.config.js. @yarnball webpack v1 || v2 ? postcss-loader v?\ndiff\n {\n        test: /\\.css$/,\n        loaders: [\n          'style-loader',\n-         'postcss-loader',\n          'css-loader?sourceMap&modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]!postcss?sourceMap&sourceComments',\n+         'postcss-loader',\n        ],\n}\nDo you use have a postcss.config.js in place ?. How do you intend to use postcss-loader ? :)  Your current webpack.config.js does nothing... . You need to either use a postcss.config.js file or add a config.postcss prop to your webpack.config.js  with your plugins then \ud83d\ude1b \nwebpack.config.js\njs\nmodule: {\n  loaders: [\n    {\n      test: /\\.css$/,\n      loaders: [\n       'style-loader',\n       'css-loader',\n       'postcss-loader'\n      ]\n    }\n  ]\n},\npostcss: () => [...plugins]. @remotezygote \ndiff\nconst postCSSConfig = {\n+ ident: 'postcss',  // <= this line\n  plugins () {\n    return [\n      autoprefixer({ browsers: ['last 2 versions'] }),\n      classprefixer('scoped-', {\n        ignore: [\n          /^tether/,\n        ],\n      }),\n    ];\n  },\n  sourceMap: useSourceMaps,\n};\nYes {Function} && require() are both buggy in webpack config atm, it should have been solved in webpack >= 2.2.0 by autogenerating the ident, but since webpack >= 2.4.0 it doesn't seem to work anymore \ud83d\ude1e . I will try one last attempt @webpack/webpack if this can be solved, otherwise it is likely that postcss.config.js  will be mandatory in the near future. Fixed in https://github.com/postcss/postcss-loader/commit/c4f006472a85d3bc36ae3f2f0e750291fd732b7b\nReleased in v2.0.1. @ai Nope \ud83d\ude1b let's release v2.0.0 as quickly as possible, I only need to update docs && finish release notes I try to do it today/until tomorrow. The 'webpack CSS' related changes will take more time and blocking a new release for postcss-loader way too long anyways \ud83d\ude43. \n\nIs PostCSS v6.0.0 breaking any major plugins atm?\nSokra mentioned that the map.names (source maps) are 'off', they need to contain an absolute path, how can we fix it ?\nOk to use the webpack loader README template (similiar to postcss-cli README style, I wrote \ud83d\ude1b ), because the folks from webpack.js.org would like to list postcss-loader as an common loader on the docs page then? \ud83d\ude0a . > Plugin API changes are small and should not affect most of plugins\n\nkk, should be fine when there is no known issue with something like e.g cssnext yet :)\n\nWhat is map.names? Where I can read more about it?\n\n\ud83d\ude06 I'm an idiot, map.sources  of course \ud83d\ude1b needs to contain absolute paths as the source name , maybe it'a the same 'issue' adressed here, but not \ud83d\udcaf  waiting for reply to confirm \n\nSure, you are maintainer and you can change project docs style\n\n\ud83d\udc4d \ud83d\ude1b . The map issue can be a bugfix release later, so a bit offtopic I get the release ready :stuck_out_tongue:. js\nif (map) {\n  map.file = path.resolve(map.file)\n  map.sources = map.sources.map((src) => path.resolve(src))\n}\nDone, if there is still something is flanky it's ax.x.1 patch release, just finishing the docs an good to go \ud83d\ude1b (today). Thats weird \ud83d\ude1b , you don't need to set sourceMap: false  no source map is the default, still needs to be fixed I wonder why this happens tbh . hmm.... \ud83d\ude1b on it. @le0nik @polco Please post your config (webpack.config.js)  aswell just in case :). Guys I can't reproduce the issue locally, but both of you use sourcemap: true in cssnano, could you both try without that? \ud83d\ude43 . @le0nik I see what you mean, mom I need another check for https://github.com/postcss/postcss-loader/blob/master/lib/index.js#L79 to avoid the delete options.x. Yep confirmed it happens after the first file is processed by the loader, I have a fix but a few minutes please \ud83d\ude1b \n. Fixed in https://github.com/postcss/postcss-loader/commit/c4f006472a85d3bc36ae3f2f0e750291fd732b7b\nReleased in v2.0.1. The check between options.inWebpackConfig ? useConfig() : loadConfig() is flanky I'm working on a solution (again \ud83d\ude1b ), but it is a nasty bug happening 'setup related'.. Please try the fix branch and provide feedback \ud83d\ude1b npm i -D postcss/postcss-loader#fix\n. [Hopefully \ud83d\ude1b] fixed by https://github.com/postcss/postcss-loader/commit/e764761\nReleased in v2.0.2\nReopen if still regressions. @Meeeeow Please try with { sourceMap: true } in postcss-loader aswell, postcss.config.js still works with sourceMap option, otherwise the source map is discarded by postcss-loader anyways (without throwing an Error, I will check that again \ud83d\ude1b ). But map inside postcss.config.js isn't supported atm :), this is debateable, but I left it on purpose, because it doesn't fit into the way one enables sourcemaps 'normally'  with webpack (consistency).\nPlease use { sourceMap: true } in webpack.config.js . Thx for the quick PR \ud83d\ude1b , but already done in https://github.com/postcss/postcss-loader/commit/c4f006472a85d3bc36ae3f2f0e750291fd732b7b. Fixed in https://github.com/postcss/postcss-loader/commit/c4f006472a85d3bc36ae3f2f0e750291fd732b7b\nReleased in v2.0.1\n\ud83d\ude1b. Did you update to v2.0.1? This should also be fixed by v2.0.1 \ud83d\ude1b \n. You make me sweat here :D, mom I will investigate. Please try the fix branch and provide feedback \ud83d\ude1b npm i -D postcss/postcss-loader#fix\n@iAdramelk I'm especially interested in your setup :D. @jmbelloteau With the fix branch npm i -D postcss/postcss-loader#fix ? && please don't use the LoaderOptionsPlugin anymore, it was only meant for webpack 2 beta to support loaders incompatible with webpack 2 config syntax, which isn't the case for postcss-loader > 1.0.0\n. js\n {\n    test: /\\.css$/,\n    use: ExtractCSSPlugin.extract({\n          fallback: 'style-loader',\n          use: [\n             'css-loader', \n             { \n                loader: 'postcss-loader', \n                options: { \n                  plugins: [ require('autoprefixer')(...options) ] \n                }\n             }\n           ]\n        })\n}. ```diff\n\n// LOADER OPTIONS PLUGIN\nnew webpack.LoaderOptionsPlugin({\noptions: {\npostcss: [\nautoprefixer()\n]\n}\n}),\n``. Config lookup starts frompath.dirname(file)and then walks the file tree upwards, if the config is in a separate folder, you need to setoptions: { config: { path: 'path/to/postcss.config.js' }}inwebpack.config.js` See the README. You config setup is insanely complex tbh \ud83d\ude1b . @iAdramelk \n\n|\u2013 src\n| |\u2013 admin\n| | |\u2013 style.css\n| | |\u2013 postcss.config.js\n| |\u2013 application\n| | |\u2013 style.css\n| | |\u2013 postcss.config.js\n|\n|\u2013 webpack.config.js\n|\u2013 package.json\nDoesn't work ?. With npm i -D postcss/postcss-loader#fix in case you're currently on v2.0.1 \ud83d\ude1b . @iAdramelk kk please post the relevant part of your webpack.config.js. Which webpack version are you on atm?. postcss.config.js\njs\nmodule.exports = ({ file, options, env }) => ({\n  parser: file.extname === '.sss' ? 'sugarss' : false,\n  plugins: {\n    'postcss-nested': {},\n    'cssnano': env === 'production' ? { safe: true } : false\n  }\n})\nwebpack.config.js\njs\n{\n  test: /\\.(sss|css)$/,\n  use: env === 'development'\n    ? [\n      'style-loader',\n      { loader: 'css-loader', options: { importLoaders: 1 } },\n      {\n        loader: 'postcss-loader',\n        options: {\n          sourceMap: true\n        }\n      }\n    ]\n    : ExtractTextPlugin.extract({\n      fallback: 'style-loader',\n      use: [\n        { loader: 'css-loader', options: { importLoaders: 1 } },\n        {\n          loader: 'postcss-loader',\n          options: {\n            sourceMap: true\n          }\n        }\n      ]\n    })\n},\nNODE_ENV=production webpack \nNODE_ENV=development webpack-dev-server\nWorks on the fix branch \ud83d\ude0a . [Hopefully \ud83d\ude1b] fixed by https://github.com/postcss/postcss-loader/commit/e764761\nReleased in v2.0.2\nReopen if still regressions\n@iAdramelk Please share link to a small repo I can debug, out of the gut I guess there is an error somewhere else aswell e.g postcss-assets + webpack didn't work well for me a while ago \ud83d\ude1b . LoaderOptionsPlugin is deprecated/unnecessary, it was just for the webpack 2 beta phase to support loaders, which didn't support the new webpack config syntax during that time, please don't use it anymore \ud83d\ude1b \npostcss-loader =< v1.0.0\nconst query = loaderUtils.parseQuery(this.query) || this.options.postcss // <= the old webpack v1 config.postcss prop\npostcss-loader > v1.0.0 (2.0.0)\nconst options = loaderUtils.getOptions(this) // no config.postcss support since it's not needed anymore\n. If you need a dynamic config, 'polluting' your project would be the wisest decision\njs\n{\n   loader: 'postcss-loader'\n   options: {\n     config: { \n       ctx: { plugin2: {...options} } // ctx.options in postcss.config.js\n    }\n  }\n}\npostcss.config.js\njs\nmodule.exports = ({ file, options, env }) => {\n  parser: file.extname === '.sss' ? 'sugarss' : false\n  plugins: {\n    'plugin1': { root: file.dirname }\n    'plugin2':  env === 'development' ? options.plugin2 : false\n    'cssnano': env == 'production' { safe: true } : false\n  }\n}\nand so on....\nwebpack.config.js\n```js\nconst env = process.env.NODE_ENV\nfunction plugins (loader) {\n   return [\n      require('plugin')({ root: loader.resourcePath }),\n      env === 'production' ? require('cssnano')({ safe: true }) : false\n   ].filter(Boolean)\n}\nconst config = {\n  ...\n  { \n     loader: 'postcss-loader',\n     options: { plugins: plugins(loader) }\n   }\n  ...\n}\n```\nThat's all steps I resolved via postcss-load-config in a nutshell, sry but I won't give any futher support upon this,  use postcss.config.js or find your way \ud83d\ude1b \n. @iAdramelk Thx I will take a look as soon as possible :). @iAdramelk Fixed && Released in v2.0.4\nI was sloppy... \ud83d\ude1b . @JPortegijs Both are supported && loading hierarchy iswebpack.config.js > postcss.config.js. I need to add this to the README... :stuck_out_tongue: \n@th3fallen LoaderOptionsPlugin doesn't work with postcss-loader >= v2.0.0 anymore since it's deprecated to use for loader options, when the loader supports webpack 2 config syntax \n**webpack.config.js\njs\n{\n   test: /\\.css$/,\n   use: [ \n     ..., \n     ..., \n    { loader: 'postcss-loader', options: { plugins: [ require('autoprefixer')(options)) ] } }\n  ]\n}. diff\nnew webpack.LoaderOptionsPlugin({\n      minimize: false,\n      debug: true,\n-      options: {\n-        postcss: [autoprefixer({ browsers: ['last 2 versions'] })],\n-      },\n    }),. @th3fallen \n**webpack.config.js\njs\n// webpack 2 module.loaders => module.rules \n{\n   test: /\\.(scss|css)$/,\n   use: [ // webpack 2 loader => use \n     'style-loader' \n    { loader: 'css-loader', options: { importLoaders: 2 }, // needed for webpack @import handling\n    { loader: 'postcss-loader', options: { plugins: [ require('autoprefixer')(options)) ] } },\n    { loader: 'sass-loader', options: { includePaths: [ /* path/to/@imports */ ]}\n  ]\n}. @th3fallen latest postcss-loader ? (v2.0.5)\nand please remove style-loader from ExtractTextPlugin.extract().use it should only get triggered via fallback and isn't needed for the extract process\ndiff\n{\n        test: /\\.(scss|css)$/,\n-       loader: ExtractTextPlugin.extract({\n+       use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: [\n-           'style-loader',\n            'css-loader',\n            {\n              loader: 'postcss-loader',\n              options: { plugins: [require('autoprefixer')({ browsers: ['last 2 versions'] })] },\n            },\n            'sass-loader',\n          ],\n          publicPath,\n        }),\n      },\n. style-loader 'pitches'  code for <style></style> into your files, loading this madness can break ETWP and then the automatically generated ident might be missing, bc of a former error and your plugins don't get stringified etc etc... \ud83d\ude1b It works now and you get a separate 'autoprefixed' CSS file ?. @heisian That's the intended behaviour, either the setup (plugins && options) is specified in webpack.config.js or otherwise look for postcss.config.js and finally throw none are present, because without any setup, you parse the CSS to an AST for no reason and don't need postcss-loader (perf regression). > that config was in my webpack.config.js - not a fan of having a postcss.config.js file in 20+ folders, so webpack.config.js is preferred..\nYou need one postcss.config.js in the root (./), but it's enterily a personal choice, where to specify options :). Multiple postcss.configs.js is only needed if you need different transforms (plugins) for certain files (Config Cascade)\nCSS File {String} \n=> CSS Parser (e.g PostCSS) \n=> [Post]CSS AST {Object} (JSON)\n=> plugin1(plugin2(pluginN(ast))) \n=> CSS Stringifier (e.g PostCSS)\n=> CSS File {String}\n\nWhat is an AST? \n\nAST => Abstract Syntax Tree \nFile (Source)\ncss\n.class {\n   width: 25%;\n}\nInterface (Syntax)\n<Selector> {\n  <Declaration>: <Value>;\n}\nAST (PostCSS)\njs\nRoot {\n  raws: { semicolon: false, after: '\\n' },\n  type: 'root',\n  nodes: \n   [ \n    Rule {\n       raws: [Object],\n       type: 'rule',\n       nodes: [Object],\n       parent: [Circular],\n       source: [Object],\n       selector: '.class',\n       lastEach: 2,\n       indexes: {} \n    } \n  ],\n  source: \n   { \n     input: \n     Input {\n        css: '.class {\\n  width: 25%;\\n}\\n',\n        file: './src/index.css' \n     },\n     start: { line: 1, column: 1 } \n  },\n  lastEach: 2,\n  indexes: {} \n}\n\nSo.. why does adding the autoprefixer plugin get rid of the error?\n\nIn theory you could of course parse the CSS and stringify it back without any plugins (transforms), but this computation is unnecessary/useless then \ud83d\ude1b. Yep, you can lock the thread anytime if you want \ud83d\ude1b . webpack.config.js  && postcss.config.js please \ud83d\ude1b . As a heads up postcss-nested v2.0.0 (6 hours ago) maybe related to the PostCSS v6.0.0 major bump in postcss-loader\ncssnext ships with it's own nesting plugin included postcss-nesting, so maybe try with/without cssnext and put postcss-nested before cssnext in the plugin chain :). https://github.com/postcss/postcss-nested/pull/52\nReleased in postcss-nested v2.0.1. Resolved \ud83d\ude43 ? No rush, but there is another bug which is to \ud83d\udcaf  in postcss-loader, otherwise\nplease try the fix branch and provide feedback \ud83d\ude1b npm i -D postcss/postcss-loader#fix. @skipjack \nPostCSS Issue Demo\npackage.json (The most likely case) \ndiff\n- \"postcss-nested\": \"^1.0.0\",\n+ \"postcss-nested\": \"^2.x\",\nThe most likely reason \u261d\ufe0f  \ud83d\ude1b  since postcss-nested =< v1.0.0 is incompatible with postcss-loader >= v2.0.0 bc of a PostCSS 6. I can confirm this, it broke my stuff aswell \ud83d\ude43 \n.postcssrc.js\ndiff\nmodule.exports = {\n    plugins: [\n        require('postcss-import'),\n        require('postcss-modular-scale'),\n+       require('postcss-nested') // Maybe you don't need it, \n        require('postcss-cssnext'), // because I include postcss-nesting :),\n-       require('postcss-nested') // but postcss-nested [SASS] !== postcss-nesting [CSSWG Spec]\n    ]\n}\nYou need to test that, if it worked before all good \u00af_(\u30c4)_/\u00af, but it could be related to postcss-nesting aswell, which may also has eventual incompabilities with PostCSS 6 API atm. . \n@skipjack It's cssnext (postcss-nesting) @see https://github.com/MoOx/postcss-cssnext/issues/374 either disable cssnext for now or take the risk that other plugins maybe flanky aswell, postcss-nested && postcss-loader are working fine  . It worked with cssnext in this small example as you can see in the screenshot, but it doesn't really use any other cssnext features besides nesting so be really \u26a0\ufe0f using it :D. Could you update webpack to v2.5.1 (latest stable) && extract-text-webpack-plugin to v2.1.0? Especially ETWP v1.0.0 isn't compatible with webpack v2.0.0. How does the config.plugins part look like now ?. diff\n- loader: ExtractTextPlugin.extract({\n+ use: ExtractTextPlugin.extract({\n````. `loader` => `use` everywhere in webpack `>= 2.0.0` \ud83d\ude1b .diff\n preLoaders: [\n      {\n        test: /.(js|jsx)$/,\n        use: 'eslint',\n        include: paths.appSrc\n      }\n    ],\n```\nDisable/remove preLoaders for now please I have no idea, how to set that up.\ndiff\n- loaders: []\n+ rules: []\nloaders => rules\ndiff\n- use: 'url',\n- query: {\n-   limit: 10000,\n-   name: 'static/media/[name].[hash:8].[ext]'\n- }\ndiff\n+ use:  [\n+  { \n+    loader: 'url-loader', \n+    options: {\n+      limit: 10000,\n+      name: 'static/media/[name].[hash:8].[ext]'\n+    }\n+  }\n+ ]\nthe same in file-loader etc etc... \ud83d\ude1b  Could you please consider reading the Migration Guide  at the official docs (webpack.js.org) ?\n. Also the postcss prop on the the config is obsolete (Validation Error), for postcss-loader the webpack 2 syntax is\njs\n{\n   test: /\\.css$/\n   use: [\n     { \n       loader: 'postcss-loader', \n       options: {\n         plugins: [...plugins]\n       }\n     }\n   ]\n}\ndiff\n-  postcss: function() {\n-   return [\n-      autoprefixer({\n-       browsers: [\n-          '>1%',\n-          'last 4 versions',\n-          'Firefox ESR',\n-          'not ie < 9', // React doesn't support IE8 anyway\n-       ]\n-      }),\n-    ];\n-  },\nMaybe start with a fresh config with minimal setup to avoid countless Validation Errors \ud83d\ude1b . Please try the fix branch and provide feedback \ud83d\ude1b npm i -D postcss/postcss-loader#fix\nWe have a config applying bug in 2.0.1 atm \ud83d\ude1f Hopefully the fixbranch resolved this. postcss.comfig.js\nreturn {\n  sourceMap: true,\n  ...\nThat's not supported, you need to set this in webpack.config.js,\nwebpack.config.js\njs\n{\n  loader: 'postcss-loader'\n  options: {\n    sourceMap: true\n  }\n}\n\u26a0\ufe0f  but only if you installed the fix branch, otherwise by removing this, it should work atm from a postcss-loader perspective. (without sourceMap). discardComments only ? (it gets minified at all \ud83d\ude1b ?). [Hopefully \ud83d\ude1b] fixed by https://github.com/postcss/postcss-loader/commit/e764761\nReleased in v2.0.2\nAwaiting futher reply :D. How do your comments look like // (SASS) or  /* */ (CSS) ?. With v2.0.2 you can now use { sourceMap: true } in postcss-loader, postcss.config.js still works (the same), but without sourceMap option the source map from  e.g sass-loader will be discarded by postcss-loader enterily otherwise :) \njs\n// css-loader...\n{\n   loader: 'postcss-loader',\n   options: { sourceMap: true }\n}\n// sass-loader.... They are still not getting discarded with latest postcss-loader(v2.0.3) ?  // is SASS Comment Style but the should get transpiled to /* */ by sass-loader && it doesn't work for both {test: /\\.css$/} (CSS Files) && { test: /\\.scss$/ } (SASS Files) ?. Yep, I was guessing that too @someok quoted from the issue \n\nThis is caused by https://github.com/postcss/postcss-filter-plugins - will be removed for v4. To resolve, pass {filterPlugins: false}.\n\nSry but won't fix in postcss-loader. Did you set { sourceMap: true } in postcss-loader when using source maps? It fails because postcss-loader doesn't generate a source map by default anymore and dicardes the previous source map, albeit the hard fail is a bug \ud83d\ude1b . Fixed by https://github.com/postcss/postcss-loader/commit/159b66a\nReleased in v2.0.3. How do you consume postcss-loader? npm? \nindex.js (Current master)\njs\nif (sourceMap && typeof map === 'string') map = JSON.parse(map)\nif (sourceMap && map) options.map.prev = map\nWhat is the issue ? \ud83d\ude1b . diff\n{\n  loader: 'postcss-loader',\n  options: {\n    plugins: function () {\n      return [\n-        require('precss'),\n+       require('precss')(),\n-        require('autoprefixer')()\n+       require('autoprefixer')()\n      ];\n   }\n}\nIf I remember right, we had issues with precss (Plugin Package), maybe try without\nERROR in ./~/css-loader?{...options}!./~/postcss-loader/lib?{} <= isEmpty\nThe options are not picked up and then postcss-loader tries to look for a postcss.config.js\nOff topic, but please update webpack-dev-server to v2.x it's definitely partially incompatible with webpack >= v2.0.0 \ud83d\ude1b \n. Please try { plugins: [ require('')(), require('')() ] } && { plugins: () => [...plugins] } aswell and did you remove precss ?\nOff topic again, but please also remove var webpack = require('webpack') at the top of your webpack.config.js, it's unnecessary there :). And... it shouldn't be needed anymore 'normally', but in webpack < 2.2.1, one needed to use an identifier, when using so called Complex Options ({Function}/require()), so try this aswell\nwebpack.config.js\njs\n{\n  loader: 'postcss-loader',\n  options: {\n    ident: 'postcss', // <= this line\n    plugins: () => [...plugins]\n  }\n}. I started to debug this and { plugins: () => [...plugins] } \ud83d\uded1  while { plugins: [...plugins] } \u2705 , (it's a bug in webpack), you can try again with precss, but for @import I recommend using postcss-import instead, some of the 'sassy' features of precss are better achieved with manually selected plugins aswell (lesser bloat) e.g postcss-nested for nesting selectors etc... \ud83d\ude1b . js\n{\n  loader: 'postcss-loader'\n  options: {\n    plugins: [ // no function () => {} \n       require('plugin'),\n       ...\n    ]\n  }\n}\nThe { plugins: (loader) => [...plugins] } bugs for an unknown reason atm, use postcss.config.js instead or an {Array} in options.plugins in the meantime. I keep this issue open for tracking porposes since a {Function} should normally work . @moimael But the CSS is getting minified? Locally for me that's the case, but there is bug somewhere in webpack (where the so called 'Complex Options' get applied ({Function}/require()))\nSuper annonying stuff, it's the third time this happens \ud83d\udc4e . Fixed && Released in v2.0.5. @psirenny I update the docs soon, I was reluctant tbh, bc this should be handle automatically since webpack >= 2.2.1 you need to add an ident: 'postcss' to loader options, bc as you mentioned the options need to be serialized by webpack internally.\nwebpack.config.js\njs\n{\n   loader: 'postcss-loader'\n   options: {\n      ident: 'postcss',\n      plugins: () => [ require('postcss-plugin')({...options}) ]\n   }\n}\n. @edwardfhsiao I need more info on this please and maybe a test repo to reproduce if possible, both postcss-loader && css-loader use postcss internally and this is a standard webpack Error ModuleBuildError. See #217 please I try to fix it soon, I hope you can pass the 'new' { sourceMap: true } to postcss-loader options in vue-loader otherwise disable source map enterily for now or pin postcss-loader down to v1.x. @jerexyz \ud83d\udc4d That could fix it, but could you make this change against current master, currently it's is the v1.0.0 branch, which doesn't have the issue :). Fixed && superseded  by https://github.com/postcss/postcss-loader/commit/159b66a Thx \ud83d\ude1b . Please try without the concat part and try using an ident \njs\n{\n  loader: 'postcss-loader',\n  options: {\n    ident: 'postcss',\n    plugins: () => [...plugins]\n  }\n}. I started to debug this and { plugins: () => [...plugins] } \ud83d\uded1  while { plugins: [...plugins] } \u2705  (it's a bug in webpack)\njs\n{\n  loader: 'postcss-loader'\n  options: {\n    plugins: [ // no function () => {} \n       require('plugin'),\n       ...\n    ]\n  }\n}\n. I leave #209 open for tracking purposes, but I will need to get a core dev in the webpack slack on the line for this \ud83d\ude1b . @chrisblossom Yep please provide a small repo, are you using sourcemaps in postcss-loader ?\nNote that we are in the transition phase to move CSS Modules from css-loader into postcss-loader via a compatible PostCSS Plugin in the future . I resolve the source paths for maps https://github.com/postcss/postcss-loader/blob/master/lib/index.js#L151, as according to @ sokra it should be the case, but maybe there is still something wrong. Could you please provide more info the example image is hard to ready (small) && uses bootstrap-loader which I have no context about \ud83d\ude1b . You can't currently debug your CSS in DevTools at all ?. Coud you please provide your webpack.config.js aswell \ud83d\ude1b  and maybe tree myProject on the CLI. I wonder why the are concatenated \ud83d\ude1f regradless if relative or absolute . @evilebottnawi I requested all the fuss, but discussion about it kicked-off in the PostCSS Gitter Channel then, we need to test with a simpler setup (no angular-starter-seed) \ud83d\ude1b . https://github.com/postcss/postcss-loader/blob/master/lib/index.js#L149 is the relevant part that changed between v1.0.0 => v2.0.0\njs\nif (map) {\n  map.file = path.resolve(map.file)\n  map.sources = map.sources.map((src) => path.resolve(src))\n}\nI'm not on windows, but thought path.resolve() is handling the posix/win32 path.sep by default , so my apologise if that isn't the case \ud83d\ude1b . https://github.com/webpack-contrib/css-loader/pull/532. Sloppy.. \ud83d\ude1b I fix asap. Fixed && Released in v2.0.4. @felixsanz Are you using LoaderOptionsPlugin in your webpack.config.js? Normally it shouldn't  affect the CSS Modules implementation of css-loader, but this was claimed a few times now. #232 #222 . I don't think so, show your config . When did it exactly stop working?. You can't really use the postcss-modules plugin with webpack. It purpose is for other build tools like gulp/grunt. CSS Modules are handled by css-loader which is responsible for exporting the locals correctly \n```js\nimport styles from './file.css' // <= only works with 'css-loader' atm\nexport default (props) => (\n  \n)\n```\n``js\nimport './file.css'\nimport styles from './modules.json' // <=postcss-modules` (Crap, don't use it)\nexport default (props) => (\n  \n)\n``. That's why this issue exists \ud83d\ude1b . You are usingpostcss.config.jsatm ? Remove thepostcss-modulesplugin from it and change yourwebpack.config.js` to the following.\njs\n {\n   test: /\\.css$/,\n   use: env === 'production' \n    ? ExtractTextPlugin.extract({\n      fallback: 'style-loader',\n      use: [\n        { \n          loader: 'css-loader',\n          options: { \n            modules: true,\n            localIdentName: '[name]__[local]___[hash:base64:5]',\n            importLoaders: 1\n          },\n          'postcss-loader'\n       ]\n     }),\n     : [ // `style-loader` pitches the HMR Code and enables HMR\n       { loader: 'style-loader', options: { sourceMap: true } },\n       { \n         loader: 'css-loader',\n         options: { \n           modules: true,\n           localIdentName: '[name]__[local]___[hash:base64:5]',\n           importLoaders: 1,\n           sourceMap: true\n         },\n         { loader: 'postcss-loader', options: { sourceMap: true } }\n    ],\n    include: [\n      path.resolve(__dirname, 'src')\n    ]\n }\nAlso remove your custom HMR Code from the component,style-loader adds the necessary HMR Code automatically. HMR doesn't work with the extract-text-webpack-plugin (full reload only in watch mode). ```diff\nif (process.env.NODE_ENV !== 'production') {\n  if (module.hot) {\n    const reloadTheme = require('provide-theme').reloadTheme;\nmodule.hot.accept([\n  './root.css',\n  './App.css',\n  './Foo.css',\n  './Bar.css'\n], () => {\n  reloadTheme('BasicTheme', {\n    classes: {\n\n\n...require('./root.css'),\n...require('./root.css').default,\n...require('./App.css'),\n...require('./App.css').default,\n...require('./Foo.css'),\n...require('./Foo.css').default,\n...require('./Bar.css')\n...require('./Bar.css').default\n        }\n      });\n    });\n  }\n}\n. **from.js** js\nconst x = {}\n\nexport default x\n```\ntoCJS.js\njs\nconst x = require('./from.js').default\ntoESM.js\njs\nimport x from './from.js'. Otherwise please post your issue on e.g StackOverflow as it is unrelated to this issue and postcss-loader. @clydin Something in that direction yes, but if possible we should try to avoid adding build tool specifics to postcss plugins (postcss-url), but a generic replace, inject option (unrelated, but compatible with webpack (postcss-loader)) would be ok I guess \ud83d\ude1b. Also help wanted on this\ud83e\udd47 . Yep \ud83d\ude1b , is it for url() only ?. @TrySound \ud83d\udc4d && postcss-modules-parser => postcss-icss (ICSS 2) for @import =>:import :export with media query support ?. @TrySound The plugin (postcss-icss-url) is awesome \ud83d\udc4d \njs\nconst plugins = [\n  require('postcss-modules-values')(),\n  require('postcss-modules-local-by-default')(),\n  require('postcss-modules-extract-imports')(),\n  // require('postcss-modules-resolve-imports')(),\n  require('postcss-modules-scope')(),\n  // postcss-modules-parser => postcss-icss\n  require('postcss-modules-parser')(), // <= | I wonder about the plugin order here, but\n  require('postcss-icss-url')() // <======== | postcss-modules-parser after postcss-icss-url   \n                                            // throws unhandled exception, maybe my fault \u00af\\_(\u30c4)_/\u00af\n]\n```css\n:import('img.png'){\n  __url_0: default\n}\n:import('/img.png'){\n  __url_1: default\n}\n:import('./img.png'){\n  __url_2: default\n}\n:import('../img.png'){\n  __url_3: default\n}\n/  postcss-icss-import /\n@import '/style.css';\n@import './style.css';\n@import '../style.css';\n@import '@org/package';\n@import 'package';\n@import 'https://domain.com/assets/style.css';\n._Users_Cini_Github_PostCSS_test_src_index__url {\n  background-url: url(__url_0)\n}\n._Users_Cini_Github_PostCSS_test_src_index__url2 {\n  background-url: url(__url_1)\n}\n._Users_Cini_Github_PostCSS_test_src_index__url3 {\n  background-url: url('//img.png') / <= maybe bug, but egde case none will use :) / \n}\n._Users_Cini_Github_PostCSS_test_src_index__url4 {\n  background-url: url(__url_2);\n}\n._Users_Cini_Github_PostCSS_test_src_index__url5 {\n  background-url: url(__url_3);\n}\n._Users_Cini_Github_PostCSS_test_src_index__url7 {\n  background-url: ('https://domain.com/assets/img.png');\n}\n```\n// result.root.tokens (postcss-modules-parser [postcss-icss])\n// Could/Should we change that to result.messages ? (result.messages.?)\n{\n  \"url\": \"_Users_Cini_Github_PostCSS_test_src_index__url\",\n  \"url2\": \"_Users_Cini_Github_PostCSS_test_src_index__url2\",\n  \"url3\": \"_Users_Cini_Github_PostCSS_test_src_index__url3\",\n  \"url4\": \"_Users_Cini_Github_PostCSS_test_src_index__url4\",\n  \"url5\": \"_Users_Cini_Github_PostCSS_test_src_index__url5\",\n  \"url7\": \"_Users_Cini_Github_PostCSS_test_src_index__url7\"\n}\n\npostcss-icss-import will work the same ?  \n\n// result.root.tokens || result.messages.?\n{\n  \"import\": \"...__import\"\n  \"import2\": \"...__import2\"\n} \n:warning: \ud83d\ude1b  General question of mine in terms of plugin order, is it safe to we push/append the ICSS Plugins (automatically) via postcss-loader or will this break, so explicit user setup is better ?  \ud83d\ude1b \u26a0\ufe0f \n@evilebottnawi How did you build the new-loader branch to test it in a webpack setup, manually run the build and copy & paste ? \ud83d\ude2d . kk are there some rough notes what's missing (besides postcss-icss-import plugin, still not \ud83d\udcaf into all the CSSM stuff yet ? \ud83d\ude43 . postcss-resolve-imports currently moves the tokens from result.root.tokens => result.root.exports. We should fine a unified way to handle this :)\nWill it be possible to update postcss-modules as the CSSM package wrapper or a new package sice it relies on css-module-loader-core atm?\n. That's what I'm after :D \ud83d\ude09 \nThe default issue is here ? https://github.com/css-modules/postcss-icss/blob/master/src/index.js#L56. Or the none existing dependency for fetch ? \nhttps://github.com/css-modules/postcss-icss/blob/master/src/index.js#L51\nhttps://github.com/css-modules/postcss-icss/blob/master/src/index.js#L52. I assume, you solved it in https://github.com/css-modules/postcss-icss/pull/9  already \ud83d\ude1b . diff\n+ const defaultFetch = (importee, importerDir, processor) => {\n+  const ext = path.extname(importee);\n+  if (ext !== \".css\") { // <=\n+    return Promise.resolve({\n+      default: `'${importee}'` // <=\n+    });\n+  }\nIf you pass your own, this needs to be implemented aswell of course :D, I need to test it with a custom fetcher when ready. Where and when is a custom fetch needed and is it avoidable ? \ud83d\ude1b \n. Yep that's where postcss-loader needs to provide the fetch 'glue', I don't get the stub part though. https://github.com/postcss/postcss-loader/releases/tag/v2.0.5. \ud83d\ude15 \ud83d\ude1b . postcss-loader uses PostCSS v6 and this is an PostCSS API error from one of your plugins (postcss-partial-import)\n\nat [project]/node_modules/postcss-partial-import/index.js:109:21\n\nOpen an issue at postcss-partial-import please \ud83d\ude1b . Yep, but I can't do anything in postcss-loader scope to address this :D, the author is aware of it already via PostCSS Gitter it's breaking his gulp setup aswell.... Maybe because you are setting context in LoaderOptionsPlugin (not supportd by postcss-loader >= v2.0.0) anymore.. Which CSS is missing (from @import only or all CSS) ? \nCSS Modules from src or node_modules, please elaborate further on this \ud83d\ude1b . Maybe releated to #222 (needs more info). js\n...\nplugins: (loader) => { loader.context } // it should be there already\n...\nWhat it's purpose atm? I couldn't really reason about, where it actually gets used? :)\nWhen you disable postcss-loader CSS Modules work ? This is odd, because they get generated by css-loader which runs after postcss-loader, could you post 1-2 components which import CSS ?. @olegstepura I need your more info on how you utilise the lib (source files, webpack.config.js, [postcss.config.js]), normally postcss-loader doesn't alter anything 'unexpected' without the plugins you use :). The biggest improvement was to not generate a sourcemap by default anymore and cleanup some old API's (webpack && PostCSS). v2.0.0 uses PostCSS v6 (breaking change), so please check if your plugins are yet compatible with v6 by now, e.g cssnext isn't atm and maybe you need to manually update some plugins due to semver range in package.json. @carlitux See https://github.com/postcss/postcss-loader/issues/222#issuecomment-302167872, but feel free to reopen if still regressions\n@olegstepura See @evilebottnawi comments, the only postcss-loader related issue is that { sourceMap: true || 'inline' } needs to be in webpack.config,js, bc postcss.config.js 'only' supports 'pure' PostCSS (Plugins && Options) Config, since it's used as a common config format one can use across different build tools (CLI, grunt, gulp, webpack) with any changes \nPlease update webpack v2.2.0-rc6 to the lastest version available \ud83d\ude09 \n. js\ndevtool: 'sourcemap',\noutput: {\n  filename: '[name].js',\n  sourceMapFilename: '[name].js.map'\n}\nOutput. @felixsanz The only obvious thing I can see is (but likely unrelated)\ndiff\n{\n   loader: 'css-loader',\n-  query: {\n+  options: {\n      modules: true,\n      importLoaders: 1,\n      localIdentName: '[local]-[hash:base64:5]',\n    },\n}\nWhat how does your current postcss.config.js look like ? Maybe try without importLoaders and @import, otherwise the CSS Modules implementation is independent from postcss-loader it must be a bug somewhere else, which surfaces via modules. > I don't understand whats going on, i just see that many rules just dissappeared while others are just there.\nYour postcss plugin versions package.json aswell please. postcss-loader  >= v2.0.0 uses PostCSS v6 (breaking change) not all plugins support it yet, e.g if you use cssnext and it's nesting plugin, your rules are off, could be missing etc. atm. The version of postcss-import is >= 10.0.0 ?. Please also provide an input -> output example. I'm not in favour of changing the config loader behaviour to {config: true }. This neglects the reason for postcss.config.js which is simply to have no in webpack.config.js for most cases at all. I'm also concerned about merging options from (webpack.config.js) && (postcss.config.js). It should be a single source of truth and therefore an either or, I don't see the usecase for this, but if besides an edge case or personal perference one exists we can change it.\n\nAlways load config if your pass config.path, now it is not working as expected if i pass config.path and sourceMap: false my config file not loading -> options.config && !sourceMap && length > 1 (i want to load config and set sourceMap use loader options ), also sometimes i want setup some option from options loader.\n\n{ sourceMap: false }  is basically unnessecary (default), just omit it, we need to fix the conditional checks for sure agreed upon that, but without breaking the current behaviour\n\nSome perf (we don't create rc object because it is not necessary if i use only options without options.config)\n\n\ud83d\udc4d \n\nAllow to passing options to postcss throw loader.options, now it is possibly only using postcss config.\n\nWhat kind of options besides parser || syntax || stringifier && plugins ? The only two suitable options for map are external or inline as an annotation comment, which works via sourceMap: true || 'inline', from, to are handled by webpack aswell. The current loading algo is crap for sure, but still the behaviour shouldn't change :)\n\u274c { config: true } or similiar isn't an option (neglect's zero config approach)\npostcss.config.js\njs\nmodule.exports = ({ file, options, env }) => ({\n   // Maybe support options for `map` (PostCSS),\n   // but `true` || `inline` handles that fine for the 99% cases,\n   // webpack also sets specific requirements here\n    sourceMap: options.sourceMap \n});\nThe reason for not supporting sourceMap within  postcss.config.js is during the fact that, it should work with different PostCSS middlewares and therefore only supports PostCSS options && plugins (middleware agnostic). All other middleware related options are set, where the particular middleware normally provides an interface to do so. { sourceMap: true } is a webpack (postcss-loader) specific option and is better defined in webpack.config.js\nwebpack.config.js\njs\n{\n   test: '..',\n   use: [\n     { loader: 'style-loader', options: { sourceMap: env === 'development' ? true : false} },\n     { loader: 'css-loader', options: { sourceMap: env === 'development' ? true : false } },\n     // { loader: 'postcss-loader', options: { sourceMap: env === 'development' ? true : false } },\n     // Usage worst case scenario\n     { \n       loader: 'postcss-loader', \n       options: { config: { ctx: { sourceMap: env === 'development' ? true : false } } } \n     },\n     { loader: 'sass-loader', options: { sourceMap: env === 'development' ? true : false } }\n   ]\n}\nAll we need is to find a better way to filter the loader options and either parse the options, if we have additional ones (parser &&|| plugins), or try to load a config file. @evilebottnawi What is the issue in insin/nwb#311 (comment) regarding postcss-loader?\n\nalso adding any options to options (test: true) break all loading logic.\n\nAny additional properties should ideally throw OptionsValidationError, what is the propose of { test: true } or is the a stub example?. I still don't get the issue with the example \ud83d\ude1b  Yeah.. additionalProperties is set to true, bc plugins prop {Function} isn't testable with schema-utils atm. Still additional properties should fail, but with ValidationError. And were does it exactly choke, seems unrelated to postcss-loader?. The ident seems to be the problem again\ndiff\nExtractTextPlugin.extract({\n            fallback: 'style-loader',\n            use: [\n              {\n                loader: 'css-loader',\n                options: { importLoaders: 2, sourceMap: true }\n              },\n              {\n                loader: 'postcss-loader',\n                options: {\n                  config: { ctx: { test: 1 } },\n-                 ident: 'postcss',\n                  plugins: [ require('postcss-nested')() ],\n                  sourceMap: true\n                }\n              },\n              {\n                loader: 'sass-loader', options: { sourceMap: true }\n              }\n            ]\n})\nERROR in ../~/css-loader?{\"importLoaders\":2,\"sourceMap\":true}!../~/postcss-loader/lib?{\"config\":{\"ctx\":{\"test\":1}},\"plugins\":[null],\"sourceMap\":true}!../~/sass-loader/lib/loader.js?{\"sourceMap\":true}!./components/component/index.css\n    Module build failed: TypeError: Cannot read property 'postcss' of null\n        at Processor.normalize (/Users/Cini/Github/Webpack/__test__/node_modules/postcss-loader/node_modules/postcss/lib/processor.js:136:12)\n        at new Processor (/Users/Cini/Github/Webpack/__test__/node_modules/postcss-loader/node_modules/postcss/lib/processor.js:51:25)\n        at postcss (/Users/Cini/Github/Webpack/__test__/node_modules/postcss-loader/node_modules/postcss/lib/postcss.js:73:10)\n        at Promise.resolve.then.then (/Users/Cini/Github/Webpack/__test__/node_modules/postcss-loader/lib/index.js:137:12)\n        at <anonymous>\n     @ ../~/css-loader?{\"importLoaders\":2,\"sourceMap\":true}!../~/postcss-loader/lib?{\"config\":{\"ctx\":{\"test\":1}},\"plugins\":[null],\"sourceMap\":true}!../~/sass-loader/lib/loader.js?{\"sourceMap\":true}!./App.scss 3:10-313\ndiff\nExtractTextPlugin.extract({\n            fallback: 'style-loader',\n            use: [\n              {\n                loader: 'css-loader',\n                options: { importLoaders: 2, sourceMap: true }\n              },\n              {\n                loader: 'postcss-loader',\n                options: {\n                  config: { ctx: { test: 1 } },\n+                 ident: 'postcss',\n                  plugins: [ require('postcss-nested')() ],\n                  sourceMap: true\n                }\n              },\n              {\n                loader: 'sass-loader', options: { sourceMap: true }\n              }\n            ]\n})\nHash: 730caef604ad1e57d3b2\nVersion: webpack 2.6.1\nTime: 4578ms\n        Asset       Size  Chunks             Chunk Names\n     index.js  683 bytes   index  [emitted]  index\n    vendor.js    5.98 kB  vendor  [emitted]  vendor\n    index.css  324 bytes   index  [emitted]  index\n index.js.map  938 bytes   index  [emitted]  index\nindex.css.map  846 bytes   index  [emitted]  index\nvendor.js.map    6.07 kB  vendor  [emitted]  vendor\n[./App.js] ./App.js 97 bytes {index} [built]\n[./App.scss] ./App.scss 41 bytes {index} [built]\nChild extract-text-webpack-plugin:\n    [../node_modules/css-loader/index.js?{\"importLoaders\":2,\"sourceMap\":true}!../node_modules/postcss-loader/lib/index.js?{\"config\":{\"ctx\":{\"test\":1}},\"ident\":\"postcss\",\"plugins\":[null],\"sourceMap\":true}!../node_modules/sass-loader/lib/loader.js?{\"sourceMap\":true}!./App.scss] ../~/css-loader?{\"importLoaders\":2,\"sourceMap\":true}!../~/postcss-loader/lib?{\"config\":{\"ctx\":{\"test\":1}},\"ident\":\"postcss\",\"plugins\":[null],\"sourceMap\":true}!../~/sass-loader/lib/loader.js?{\"sourceMap\":true}!./App.scss 1.36 kB {0} [built]\n    [../node_modules/css-loader/lib/css-base.js] ../~/css-loader/lib/css-base.js 2.26 kB {0} [built]\n        + 1 hidden modules. We can simply the loading checks by throwing if options.config && options.plugins are set simultaneously, since this doesn't make any sense at all.. The same goes for the importLoaders issue, it works with postcss.config.js, but chokes on options.plugins atm, needs more investigation. @evilebottnawi Are you intending to update this PR or can I close and open a new one ? \ud83d\ude1b . sourceMap  should be the only way to steup source maps\n postcss.config.js is still not implicitly loaded . The sourcemap is mainly because of the loader chain \njs\n[\n   { loader: 'style-loader', options:\u00a0{ sourceMap: true } },\n   { loader: 'css-loader', options: { sourceMap: true } },\n   'postcss-loader'  // ?sourceMap\n   { loader: 'style-loader', options: { sourceMap: true } }\n]\nAlso a webpack user will then need to know, how to config PostCSS Sourcemap Options  instead of true || 'inline'. > we already have inline or true source map. We ignore the source maps from postcss.config.js?\n\u261d\ufe0f https://github.com/postcss/postcss-loader/pull/234#issuecomment-308409814\nThe missing options.exec check and #250 + maybe throw if options.plugins && options.config are set at the same time, is all we can do in the v2.0.0 line, but better with a fresh PR :). kk mom I'm trying to sum it up . @evilebottnawi Please reduce the PR here only to your proposed sourceMap changes. But that's not the only two options for map, what happens of e.g { inline: true, annotation: false } is directly passed via postcss.config does it work ?. > Do you have specific examples of why this code is not working (example of config or failed tests), all tests are passed, or is this a subjective non-constructive mono solution?\nYou mean the config resolving here ?. ```js\nconst length = Object.keys(options)\n      .filter((option) => {\n        // if (option === 'exec') return\n        if (option === 'config') return\n        if (option === 'sourceMap') return\n    return option\n  })\n  .length\n\nif (length) {\n  return parseOptions.call(this, options)\n}\n\nconst rc = {\n  path: path.dirname(file),\n  ctx: {\n    file: {\n      extname: path.extname(file),\n      dirname: path.dirname(file),\n      basename: path.basename(file)\n    },\n    options: {}\n  }\n}\n\nif (options.config) {\n  if (options.config.path) {\n    rc.path = path.resolve(options.config.path)\n  }\n\n  if (options.config.ctx) {\n    rc.ctx.options = options.config.ctx\n  }\n}\n\nreturn postcssrc(rc.ctx, rc.path, { argv: false })\n\n```\nYou can also take that and I close #259, it was just as another approach to test and discuss for now \nhttps://github.com/postcss/postcss-loader/blob/master/lib/index.js#L99\npostcss.config.js\njs\nmodule.exports = (ctx) => ({\n  map: { inline: true, annotation: false }\n})\nWill this work ?. Why are you closing this now? \ud83d\ude43 . What do you mean by non-constructive argument and ignoring ? Ignoring is just plain wrong... Disagreement !== Ignoring\nConstrcutive or not is subjective, but\n\n\nThe PR at first changed the config loading enterily and I explained more then once, why I don't think it is a good idea to do it that way \n\n\nFor sourceMap my concern is that there will be confusion about it, when postcss.config.js supports it, but I'm not against it in general (there would still heve been edge case in the PR as is )\n\n\nThe other PR was not meant offensive in any way and I have had no problem by just closing it, I don't care about these things\n\n\njs\nlet options = Object.assign({\n      to: file,\n      from: file,\n      map: sourceMap // <=\n        ? sourceMap === 'inline'\n          ? { inline: true, annotation: false }\n          : { inline: false, annotation: false }\n        : false\n}, config.options)\nThis would require additional changes to work with all possible options map PostCSS (postcss.config.js) supports\n. kk, can we please in general agree to take it a bit more relaxed and avoid the childish behaviour ?\n\nyour just close my PR without explaining what is wrong - it is non-constructive.\n\nWhen I closed the PR is still changed the loading behaviour, that was the reason\n\nYour say\nThe only two suitable options for map are external or inline as an annotation comment, which \nworks via sourceMap: true || 'inline', from, to are handled by webpack aswell\nBecause I do only true and inline value supporting for sourceMap\n\nYes, that's the two ways to handle sourcemaps, postcss.config.js supports {Object} e.g { inline: true, annotation: false } which postcss-loader needs handle aswell then, which is ok if needed\n\nIgnoring - #234 (comment), #234 (comment), #234 (comment), #234 (comment)\n\nI answered all of them and the second isn't even addressed at me \ud83d\ude43 \n\nNo Respect for my time and effort, thanks\n\nI hearing this for the third+ time now, what about other people's time ? This is just trying to personify matters to passive aggressively offend  && push others to do what you want?  As I said I don't mind closing my PR's, waste my time in your speaking and in general the least thing I intend to do is to actively disrespect others. Which is disagree I did in anyway, but if you felt that way I apologize \n. > should we respect map from postcss.config.js \nYes, but we need to add a check / refactor https://github.com/postcss/postcss-loader/blob/master/lib/index.js#L99 properly to support 'full' PostCSS Sourcemap Options {Object}, also the config.options.from/config.options.to  sanitizing you added was a good idea . Also check if some possible PostCSS Sourcemap Options doesn't play well with webpack (I don't know \ud83d\udcaf yet). postcss-nested (if update to  v2.0.0) / cssnext @see https://github.com/MoOx/postcss-cssnext/issues/374 postcss-loader uses PostCSS 6 and a few plugins haven't been updated yet.. @moimael See @evilebottnawi's comment, please check the versions of your plugins for PostCSS v6 compatibility. So it works,  if you don't use { loader: 'postcss-loader', options: { sourceMap: false } } but just 'postcss-loader' in webpack.config.js ? (Just omit the { sourceMap: false }) (It's the default)\n\nif I disable sourcemaps, there are sources in built file (all those --palette-grey-300:#e0e0e0;--palette-grey-400:#bdbdbd;--palette-grey-500:#9e9e9e;) and it's size is 971kb\n\nThese are CSS Variables (CSS Custom Properties) not related to source maps in any way. It's normal to have them  in the source :). Do you in general mean the CSS in your webpack bundle, when you refer to 'sources' ?. Did you solve it or still regressions ? :). Feel free to reopen anytime, but closing for now. 1. Is actually an issue with webpack/webpack.config.js. postcss-loaderhas no influence upon that, output.sourceMapFilename + devtool: 'source-map' should do the trick normally \n\n\n\njs\nvariables: {\n  'color-primary': 'var(--palette-indigo-500)',\n  'color-primary-dark': 'var(--palette-indigo-700)',\n  'color-primary-light': 'var(--palette-indigo-500)',\n  'color-accent': 'var(--palette-pink-a200)',\n  'color-accent-dark': 'var(--palette-pink-700)',\n  'color-primary-contrast': 'var(--color-dark-contrast)',\n  'color-accent-contrast': 'var(--color-dark-contrast)'\n}\nThis is off, you need to actually provide a value :). Current is e.g var(--palette-indigo-500) no wonder it is still 'there'\n```css\n/ picked up by cssnext /\n:root {\n  --color: red;\n}\n.class {\n  background: var(--color);\n}\n```\nor \npostcss.config.js\njs\n...\nvariables: {\n  'color': 'red',\n  ...\n}\n...\ncss\n.class {\n  background: var(--color);\n}\npostcss-custom-properties (used by cssnext). 1. webpack/webpack \n\nAll off the following will have no effect and can be safely removed, only { sourceMap: true || 'inline' } in webpack.config.js will change the behaviour regarding source maps.\n\ndiff\n-      map: {\n-        sourcesContent: false,\n-        inline: false\n-      },. parser: 'sugarss' , if you have .css files using SugarSS syntax but your .less files get compiled to standard CSS (with curley brackets), you need a dynamic config to handle that.\npostcss.config.js\njs\nmodule.exports = ({ file, options, env }) => ({\n   parser: file.extname === '.css' ? 'sugarss' : false \n   // .css (SugarSS) => use sugarss parser (SugarSS Parser)\n   // .(less|sass) (CSS) => use css parser (PostCSS Parser)\n   plugins: {...}\n})\n\u26a0\ufe0f  This requires postcss-loader >= v2.0.0, otherwise the syntax is \ndiff\n- file.extname === '.css' ? 'sugarss' : false \n+ ctx.webpack.resourcePath.endsWith('.css') ? 'sugarss' : false. css-raw-loader can be replaced by postcss-loader >= v2.0.0 aswell, since it will export a 'raw' JS Module, if it is the last loader in the chain. The loader!loader!loader! is deprecated, please use webpack 2 config syntax . @phyllisstein Just remove { sourceMap: true } from all preceding loaders and the warning should be gone (e.g sass-loader), there is sadly no way to display warnings like that only once and therefore won't fix from an implementation point of view sry. resolve-url-loader requires sourceMap  to work correctly, but that's another issue \ud83d\ude04 :stuck_out_tongue:. That's a warning from the Plugin API && PostCSS Core since v6 had a few breaking changes, mostly removal of old v4 API's and node.raws fix, if the plugin still works ignore this warning. Otherwise you will need to open an issue @postcss-atrribute-case-insensitive instead asking to bump PostCSS to v6, postcss-loader >=v2.0.0 uses PostCSS v6 I can't do anything from the loader sinde here \ud83d\ude1f . From the former issue like I commented in a example, you basically use 2 nesting plugins atm, but that shouldn't be the main issue here \ud83d\ude1b (Still \u26a0\ufe0f )\n```css\n.app {\n  display: flex;\n&__foo {\n    color: red;\n  }\n&__bar {\n    color: blue;\n  }\n}\n```\ncss\n.app { display: flex; }\n.app__foo { color: red; }\n.app__bar { color: blue; }\nRemove the .app prefixes from the nested selectors, that's what nesting is actually for  \ud83d\ude1b :D. ```diff\n.app-header { \n   position: relative;\n   padding-top: 33px;\n\n&.app-title\n&-title {  // no '.'\n    font: 300 48px/1 var(--font-family-base-oscine);\n    color: #FFFFFF;\n    cursor: default;\n    position: relative;\n    z-index: 3;\n    max-width: 730px;\n    word-break: break-all;\n  }\n}\n```\n\n.app-header { ... }\n.app-header-title { ... }. Reopen if still regressions. @TrySound Via extra loader option ? How strong is the perf impact approximately ? Does it potentially clash with other plugins ? One option for implicit config could be \njs\n...\nif (this.loaderIndex !== 0) plugins.concat([...icss]) // `css-loader` in loader chain ? push : skip\n.... We need to think about config for CSS Modules to in near future aswell, best would be to have plugin config only and postcss-loader handles the rest implicitly (fetch, resolve, etc). Yeah I'm all in not adding them if avoidable, but I'm seriously worried about the downgrade between old && new CSS pipeline in terms of url() && @importhandling then (more config). This shouldn't be a concern for average users not familiar with any webpack 'internals' at all. Without these plugins none of the currently working runner specific stuff works anymore (url-loader/file-loader [url()]) && @import => import css from './import.css then. CSS Modules as plugin explicitly setup \ud83d\udc4d, but if url() && @import don't work out-of-the-box one could use the raw-loader aswell \ud83d\ude1b. This isn't really and opt-in. Plugin Order is also a potential issue then.\n\nWhy is explicit config better here ?\nWhat are the usecases where ICSS isn't needed and are the common ?\n\nICSS is bsically a requirement not an opt-in and in the grey area between 'normal' PostCSS Config and webpack specific, with a high tendency to be webpack specific => PostCSS Runner (IMHO). js\nconst plugins = [\n  require('postcss-icss-url')(),\n  require('postcss-nested')()\n]\nWould this still work for e.g ?\nYeah it would need an additional option at least for url(), in case there should be no rewrite at all \ud83d\ude15. So better remove postcss-icss-url agreed. Hmm... this all so unconvenient... \ud83d\ude1b  \n. kk I write initial docs and open new PR with docs only for now. postcss-cssnext is the right name, cssnext is deprecated in favour of && superseded by postcss-cssnext. PR would be appreciated \ud83d\ude1b . ### postcss.config.js\npostcss.config.js (postcss-load-config) support both {Object} && {Array} notation\njs\n...\nplugins: [\n  require('postcss-plugin')({...options})\n]\n...\n...\nplugins: {\n  'postcss-plugin': {} || false // empty {} === true\n}\n...\nKey/Value is mandatory, when using {Object} notation\nwebpack.config.js\nDoesn't support {Object} Notation, since this is a convenience methof of postcss-load-config, PostCSS Plugins are an {Array}\njs\n{ \n  loader: 'postcss-loader', \n  options: {\n    plugins: [] // {Array}\n  }\n}\nStatic vs. Dynamic\nBoth postcss.config.js && webpack.config.js config can be either static {Array|Object} or dynamic {Function}\npostcss.config.js\njs\n // {Function} && ctx === { file, options, env }\nmodule.exports = (ctx) => ({\n   parser: file.extname === '.sss' ? 'sugarss' : false\n   plugins: []\n})\nwebpack.config.js\njs\n{ \n  loader: 'postcss-loader', \n  options: {\n    // {Function} && loader === Loader API\n    plugins: (loader) => [\n      require('postcss-plugin')({ root: loader.resourcePath })\n    ]\n  }\n}. Done in https://github.com/postcss/postcss-loader/commit/2ef4449d5715935a214a8ea588d3d09eb0c72241. @danyim The typo should be fixed on master already, thx \ud83d\ude1b . Can you try without sourceMapContents: !isDev in sass-loader options? I will test it in a few minutes. @danyim I can't reproduce this in a small local test, could you please setup a small repo for debugging ?. Feel free to reopen if still regressions and please provide a small test repo, since I couldn't reproduce this myself . @Janaka-Steph  sass-loader (generates map) => postcss-loader (gets prev map from sass-loader, but doesn't update it, without ?sourceMap) => \u26a0\ufe0f \ndiff\n+ 'postcss-loader?sourceMap',\n  'sass-loader?sourceMap'. Please post your package.json && webpack.config.js && postcss.config.js I don't believe this is an npm issue :), but npm@5got a enterily new cache implementation, so maybe runnpm cache clean --force and in your project rm -rf node_modules && npm i, if your setup really worked before. @HeadFox Do you still have this regression? I couldn't reproduce your issue. Feel free to reopen if still regressions :). Yep, it's a know issue with the current config algo using !sourceMap internally, I try to fix it as soon as possible, but please omit it for now . Fixed && Released in 2.0.6 please test and verify :) Reopen if still regressions. Could you try without resolve-url-loader && css-loader minimize uses cssnano, you won't need it as a plugin in postcss-loader. Can you post some output please ?. The before commit shows a major bump for resolve-url-loader :), which uses sourcemaps to resolve the urls, the paths for source maps (relative => absolute) changed in postcss-loader  >= v2.0.0, but why is resolve-url-loader needed ? :). You can try by commenting out these lines in postcss-loader  and if it works we can triage to eventually revert this change. Although I made this change because webpack seems to need absolute paths for source maps to work correctly according to it's author. Are you on a windows machine ?. You paths are simly incorrect :) ./ => ../\n```diff\n@font-face {\n    font-family: 'San Francisco';\n-   src: url('./assets/sf.eot'); \n+   src: url('../assets/sf.eot'); \n-   src: url('./assets/sf.eot?#iefix') format('embedded-opentype'),\n+   src: url('../assets/sf.eot?#iefix') format('embedded-opentype'),\n-        url('../assets/sf.woff2') format('woff2'),\n+        url('../assets/sf.woff2') format('woff2'),\n-        url('./assets/sf.woff') format('woff'),\n+        url('../assets/sf.woff') format('woff'),\n-        url('./assets/sf.ttf') format('truetype');\n+        url('../assets/sf.ttf') format('truetype');\n    font-weight: 300;\n    font-style: normal;\n}\nbody {\n-    background-image: url('../logo.svg');\n+    background-image: url('../../logo.svg');\n}\n.fontSf {\n    font-family: 'San Francisco';\n}\n.underline {\n    text-decoration: underline;\n}\n```\nTested without resolve-url-loader && build:dev. Yes via postcss-load-config && postcss prop in package.json, recommended way is to use\npostcss.config.js. For stylelint there maybe an additional stylelint prop needed/possible or you use the Stylelint PostCSS Plugin, I'm not personally using Stylelint via webpack, so please consider their README for more info about that. It warns about a source map from a previous loader, since postcss-loader discards the source map enterily when { sourceMap: true } isn't set in postcss-loader options, The default is to not generate a sourcemap for perf reasons. The warning is correct, please either set { sourceMap: true } or disable source maps in any previous loader.\n@evilebottnawi No please no additional options for a trivial usecase, the warning maybe annoying but it is intended to do so :), bc the config is simply incorrect. @ndbroadbent This warning should already be removed in the 2.x && 3.x line what exact version of postcss-loader are you using ?. kk just saw the EDIT :D. It is safer to use a postcss.config.js file I highly recommend it, the reason is that in this case a webpack config related bug sometimes doesn't apply functions in webpack.config.js. You can ducktape it in webpack.config.js by using a so called ident in the loader options :)\njs\n...\n{\n  loader: 'postcss-loader'\n  options: {\n    ident: 'postcss',  // <= \n    plugins: [ require('postcss-plugin')(options), ... ]\n  }\n}\n...\nAlso remove style-loader from use in ExtractTextPlugin.extract it's used as fallback already and extraction will fail when it is applied in the use chain\nUse stylus-loader instead of stylus-relative-loader it seems to emit a sourcemap by default which is bad for performance. In terms of postcss-loader choose either postcss.config.js (recommended) or set options in webpack.config.js. You are doing both atm :), but that isn't a problem webpack.config.js > postcss.config.js in terms of config loading \nwebpack.config.js (when using postcss.config.js)\ndiff\n- { loader: 'postcss-loader', options: { plugins: () => [...plugins] } }\n+ 'postcss-loader'\nPlease try  { sourceMap: false } in stylus-loader options, it is a warning and everything should still work, but the sourcemap will be discarded by postcss-loader . Your first example looks sane, the second not sooo tbh :), you're using postcss twice there, once in prejss (babel-loader) and then again in postcss-loader. As you can see from the Error log,  it already fails in babel-loader (babylon is the babel parser :)). Where is the GIF actually used, what is the usecase/goal?. You can eventually drop the (last) raw-loader after postcss-loader since postcss-loader exports a module by default in case it's the last loader in the chain :). I need your config please, postcss-cssnextstill doesn't support PostCSS v6.0.0 which is used by  postcss-loader >= 2.0.0. postcss-apply should have gotten an update for PostCSS v6.0.0 recently, please check if you have the latest version. postcss-nesting (part of postcss-cssnext) for instance is also not compatible with PostCSS 6 (postcss-loader) yet. For postcss-cssnext usage you will have to wait for compatible release of the plugin sry :). The current way is webpack.config.js (explicit) > postcss.config.js (implicit) > {Error}, which should stay as is imho. Since postcss.config.js doesn't support any webpack specific props and never will be, we need to have a few ugly checks \ud83d\ude1b . The main problem is the buggy ident atm \nit worked fine in webpack = v2.2.0  and started to bug again around  v2.4.0+. webpack.config.js\njs\n{\n   loader: 'blabla'\n   options: {\n     ident: 'whatever',  // <= mandantory in webpack =< 2.2.0 when using\n     function: (blub) => require(blub) // <= a 'Complex Option' (`{Function}` || `require()`) \n  }\n}\nto stringify the request '!css-loader?{}!postcss-loader?{plugins: [...]}!./file.css' and keep the references to the require() calls somewhere, somehow in webpack core \ud83d\ude1b \nBut  again this should have been fixed  in webpack >= 2.2.0\n. I'm closigf this for now and instead, add the ident back to the docs, it would affect too many builds to be a sufficient fix, maybe I can fix it in webpack in the long run :). Fixes #250 . Yep we should add one, there is already a bad one imho https://raw.githubusercontent.com/postcss/postcss-loader/master/README.md (comment after the heading block) \ud83d\ude1b. Any sugesstions ?. postcss.config.js\ndiff\nmodule.exports = ({env}) => {\n    return {\n-       sourceMap: true,\n        plugins: {\n            // filterPlugins: false,\n            autoprefixer: {},\n            cssnano: {discardComments: {removeAll: true}}          \n        }\n    }\n};\nwebpack.config.js\ndiff\n- 'postcss-loader'\n+ { loader: 'postcss-loader', options: { sourceMap: true } }\n\npostcss-loader version ?\ncssnano version ?\n\ncss-loader integrates cssnano via the minimize option aswell, if you are using postcss-loader >= v2.0.0 ensure to have cssnano v4.0.0-rc.0 (npm i -D cssnano@next) installed .  > Module build failed: Inconsistent rule global/local result in rule \".navbar,.navbar :global .pt-navbar-group\" (multiple selectors must result in the same mode for the rule) (29:0)\nThat's css-loader modules (CSSModules) issue\n\nModule not found: Error: Can't resolve 'icon/iconfont.eot' in '/Users/wjx/MyFolder/Develop/MyWorkspace/blah-projects/projects/app/outline/container/navbar'\n @ /Users/wjx/MyFolder/Develop/MyWorkspace/blah-projects/~/css-loader?{\"sourceMap\":true,\"modules\":true,\"importLoaders\":2,\"localIdentName\":\"[hash:base64]\"}!/Users/wjx/MyFolder/Develop/MyWorkspace/blah-projects/~/postcss-loader/lib?{\"sourceMap\":true}!/Users/wjx/MyFolder/Develop/MyWorkspace/blah-projects/~/sass-loader/lib/loader.js?{\"sourceMap\":true,\"outputStyle\":\"nested\",\"sourceComments\":true}!./outline/container/navbar/Icon.scss 6:70-98 6:116-144\n\nPlease show the file and file tree for this, I don't understand why cssnano should cause this and where from the current context provided\nMaybe http://cssnano.co/optimisations/normalizeurl/\ncss-loader seems to disable it by default https://github.com/webpack-contrib/css-loader/blob/master/lib/processCss.js#L189-L192\n. I will open an issue in cssnano about this, maybe adding a webpack preset would be accepted :). https://github.com/ben-eb/cssnano/issues/376 Feel free to comment \ud83d\ude1b . It's the recommended way in webpack-contrib to handle it, but I don't really 'like' the peerDependency pattern, as @TrySound already mentioned it can be really noisy and is basically useless if you go ahead anyways \ud83d\ude1b and in the worst case misleading if you follow and everything is still fine e.g webpack v2.0.0 => v3.0.0 in most cases. postcss-loader also doesn't use postcss as a peerDependency for the same reason. Better maintain the loader as good && fast as possible, cut a branch and release a major, when breaking changes occur. The v1 branch is still in 'maintenance mode' here for e.g. If a peerDependency of webpack >= 2.0.0 (specifing the minimum only) works with webpack >= v3.0.0, we could/should add it, nothing wrong about that. But peerDependency ranges like ^2.0.0 || ^2.0.0-rc.0 || ^3.0.0-beta.0  || ^3.0.0-rc.0  || ^3.0.0 are bad . Let it be for now, but if webpack-contrib is in better shape and the workflow works, we could/should align with webpack-contrib imho. \n. @JadedDragoon See @evilebottnawi's  comment :). Normally postcss-loader doesn't mess with paths by default, it is just a wrapper for  postcss and the rest is done via plugins. Could you show the 'full' relevant part rule > test.scss of webpack.config.js and maybe setup a small test repo? \u26a0\ufe0f Note that css-loader uses cssnano aswell internally. I take a look into it soon :) . It's recommend to use the cssnano implementation in css-loader via options.minimize for the time being, since css-loader rewrites url() by default to resolve assets 'the webpack way'. Just remove cssnano from postcss.config.js. The @font-face issue is likely to be caused by css-loader aswell, bc of how it handles assets resolving url(). You could set options.url = false to disable this behaviour in css-laoder completely, but this affects all url()'s then \ud83d\ude43. I recommend to include fonts via <link href=\"path/to/fonts.css\"> in index.html instead (e.g via/like Google Fonts). Also postcss-urlrewrite seems to be unnecessary  and can be removed aswell, I personally never had the need for plugins like that, when using webpack . @mahnunchik You need to add a babel plugin transforms-add-module-exports (something like that) and ensure to have only one export default per style.js. @mcjfunk I which usecases does this occur? It might not throw, but looks odd tbh :). e.g the current file would be lost then right? . I need a reproducible case for this to land it in postcss-loader directly, as long as it isn't coming from the loader itself, I would like to avoid adding workarounds. css-loader will get an overhaul soon. It is dog slow and buggy atm. If you tracked it to css-loader open an issue there aswell please either @evilebottnawi or I can fix it there also. Released in v2.0.7 . yeah.. \ud83d\ude1e, I restarted and cleared the cache hopefully this fixes the npm bugs. postcss-scss: 1.0.1\n precss: 1.4.0\nYou won't need them when using SASS (sass-loader) itself, the former is for stylelint (syntax) and the latter is mimicking SASS for folks who want to use PostCSS standalone, either remove sass-loader or remove those two \nbabel-plugin-react-css-modules: 3.0.0\nI perosnally never used it myself but if you have \njs\n{\n  loader: 'css-loader' \n  options: { modules: true }\n}\nyou won't need ot either. It's another way to use CSS Modules, both in the same config won't make much sense and I recommend using css-loader \nAs stated on gitter I also would simply use a a CDN link for vendor CSS libs instead of such madness loaders like boostrap-loader, webpack doesn't shine on this (Global CSS) in general\nstyle.css\ncss\n.title {\n  font-size: 3rem;\n}\ncomponent.js\n```js\nimport React from 'react'\nimport $ from './style.css'\nexport default (props) => (\n    // Bootstrap CSS (Global)\n       {props.title} // Custom CSS (Local)\n   \n) \n```\nI take a a deeper look at bootstrap-loader when time, please try by removing it for now and notify when you get a working build without it :)\n. @kishorevarma sourceMap isn't supported by postcss.config.js, you need to add it to webpack.config.js instead. The separate config only supports PostCSS related Options && Plugins to work across the different PostCSS runners (CLI, gulp, ...) seemlessly. sourceMap is webpack specific and therefore => webpack.config.js\npostcss.config.js\ndiff\nmodule.exports = {\n- sourceMap: true,\n  plugins: [require('autoprefixer')]\n};\nwebpack.config.js\ndiff\n{\n   loader: 'postcss-loader'\n+  options: { sourceMap: true }\n}\n@Janaka-Steph I can only recommend to skip frameworks like bootstrap when using webpack, the component based archictecture isn't well suited for CSS frameworks in general\nOn attempt (i wasn'T too 'lucky' with either) is to require()/import bootstrap in  the app entry App.js \nbootstrap.scss\ncss\n/* Individualize (S)CSS here */\n@import bootstrap/../...scss;\n...\n...\nwebpack.confg.js\n```js\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\n// Instances \nconst ETWP = new ExtractTextPlugin('bootstrap.css')\nconst ETWP2 = new ExtractTextPlugin('app.css')\nconst config = {\n ...\n module: {\n   rules: [\n       {\n           test: /bootstrap.scss$/\n           use: ETWP.extract({ \n                 fallback: 'style-loader', \n                 use: [ \n                    'css-loader' \n                    'postcss-loader'\n                    'sass-loader'\n                 ]\n          })\n       },\n       {\n           test: /.scss$/\n           use: ETWP2.extract({ \n                 fallback: 'style-loader', \n                 use: [ \n                     { loader: 'css-loader', options: { modules: true } },\n                    'postcss-loader'\n                    'sass-loader'\n                 ],\n                 ignoreOrder: true\n          })\n          exclude: /bootstrap.scss$/\n       }     \n   ]\n  },\n  plugins: [\n    ETWP,\n    ETWP2 \n  ]\n}\n```\nApp.js\n``` js\nimport React from 'react'\n// Only imported once in the entry (Global)\nimport 'bootstrap.scss'\n// Modulized Component CSS (Local)\nimport $ from 'style.scss'\n// => Component [index.js, style.scss, ...assets]\nimport Component from './components/component' \n...\nclass App extends React.Component {\n   render () {\n     return (\n        \n\n\n     )\n   }\n}\n```\n\n\u26a0\ufe0f  You will need the extract-text-webpack-plugin in production then, since the whole bootstrap blob is in the JS otherwise :)\n\nIn any case, just the compare <link href=\"path/to/boostrap.min.css\"> to hunderds of lines  for requiring a CSS file like boostrap-loader does atm. Not to black-mouth the bootstrap-loader in particular here, there is simply no straightforward way to do it, but the approach is off in general imho :). I also couldn't find the section where postcss-loader is required by boostrap-loader tbh, so please open an issue there if you intend to use the loader nevertheless \ud83d\ude1b . posthtml-loader + posthtml-postcss plugin . Please post your $ tree $PROJECT_ROOT and  your postcss.config.js && webpack.config.js  . postcss-load-config #91 Tracking Issue (schema-validation). It should warn about incorrect config via postcss-load-config. . The loader will fallback to { plugins: [], options: {} } and simply not run any PostCSS transforms then atm. > Module build failed: TypeError: Path must be a string. Received undefined\n\nat eachParent (/Users/tom/projects/lec/node_modules/browserslist/index.js:65:18)\n\nhttps://github.com/ai/browserslist/pull/161 :) . Yep, it was removed in postcss-loader >= v2.0.0, because it was widely used and the Loader API accessing the webpack compilation from inside a loader directly is officially deprecated. What is the usecase, could you provide more info? :). @jantimon Thx . This is actually a css-loader issue, since CSS Modules are implemented there atm :). Could you reopen in css-loader please and I will triage it there then. It might be difficult to fix this appropiately, because all postcss-modules-* (CSS Modules) plugins need to emit warnings/errors to result.messages beforehand to get meaningful messages. postcss-loader throws pretty printed Error messages + code frames on CssSyntaxError already.\n\nMaybe stylelint could help you here aswell :)\n. The examples main purpose is to just show if you want to use a custom parser how this looks like/works. It uses a conditional to clearify file.extname !== .css ? 'custom' :  'default' this\njs\nfile.extname === '.sss' ? 'sugarss' : false,. Yep agreed, I will add a note when I update the docs with the other docs related nits currently in the issue tracker . What version of postcss-loader && webpack ?  Please try this \njs\n{\n   loader: 'postcss-loader'\n   options: {\n     ident: 'postcss', // <= this line\n     plugins: () => [...plugins]\n   }\n} . Feel free to reopen if still any regressions :). js\n{\n  loader : 'css-loader',\n  options: {\n    importLoaders: 1, // <= this line \n    sourceMap: true\n  }\n}\n...loaders. What's the status here ? Maybe related to #269, but postcss-loader won't receive any changes for custom libs unrelated to itself, especially if an ECMA Standard exists . Does this only happen for postcss-loader errors? The loader uses standard webpack error handling, not sure what we can do here, but open for suggestions to handle them gracefully in watch mode . The reason I avoided this is that in a normal setup you need to enable sourceMap in various places (style-loader, css-loader, sass-loader etc) to work correctly and all possible PostCSS Sourcemap Options are not 1:1 compatible with how webpack handles sourcemaps internally. config.options.map would need to have a safeguard at least to ensure it is either { inline: false, annotation: false } || { inline: true , annotation: false }. The current approach in this PR can lead to subtile bugs. I'm not really in favour of this change tbh.\n. This also needs a (separate) test. > What I'm confusing about here is postcss-loader prioritize some options from config files but ignore some other options from them at all. \noptions.from && options.to are handled by webpack as it is resposible for File I/O. For using the bare PostCSS Node API + postcss-load-config options.from && options.to can be useful, albeit the usecase is even limited there. For postcss-loader or gulp-postcss these two options don't make sense at all so they are ignored if set via config\n\nI have to configure in both places and be aware of the details under the hood if I want to put things into config files.\n\nYeah agreed, it is in one way or the other not optimal, but the standard way for sourceMap in webpack.config.js is { sourceMap: {Boolean} } and webpack sets specific requirements of how a sourcemap file needs to look like to work correctly, so not all supported options.map values are valid for postcss-loader,  but are for postcss.config.js\nwebpack.config.js (No options.map possible [Current]) \njs\n[\n   { loader: 'style-loader', options: { sourceMap: true } },\n   { loader: 'css-loadder', options: { sourceMap: true } },\n   { loader: 'postcss-loader', options: { sourceMap: true } },\n   { loader: 'sass-loader', options: { sourceMap: true } }\n]\nwebpack.config.js (with options.map possible [Proposed]) \njs\n[\n   { loader: 'style-loader', options: { sourceMap: true } },\n   { loader: 'css-loadder', options: { sourceMap: true } },\n   'postcss-loader', // <= \"Inconsistent\" for options.sourceMap (as the point of view) \n   { loader: 'sass-loader', options: { sourceMap: true } }\n]\nSince { sourceMap: .. } needs to be set on all loaders within a rule, the optioniated decision was to only allow sourceMap to be set via webpack.config.js for consistency reasons (nits), since both approaches are not \ud83d\udcaf sufficient anyways.. @Justineo I gave this some though and this two paths are possible\nL99+\nWarning\n```js\nif (config.options.map && sourceMap) delete config.options.map\nif (config.options.map && !sourceMap) {\n  this.emitWarning(\\n\\n \u26a0\ufe0f  PostCSS Loader\\n\\nSetting source map via 'postcss.config.js' isn't supported due to inconsistent behaviour between source map options, please use options.sourceMap in 'webpack.config.js' instead.\\nThe loader will not generate a source map with the current configuration.\\nSee https://github.com/postcss/postcss-loader#sourcemap for more information.\\n\\n)\ndelete config.options.map\n}\n```\nFallback (no inline)\n```js\nif (config.options.map && sourceMap) delete config.options.map\nif (config.options.map && !sourceMap)  {\n  delete config.options.map\n  sourceMap = true // !  Needs a change from const to let for sourceMap (L50)\n}\n```\nOr a mixture of both, totally open for suggestions here cc @evilebottnawi \ud83d\ude1b . webpack.config.js\njs\n{\n  loader: 'postcss-loader',\n  options: {\n    ident: 'postcss', // <= this line \n    plugins: [\n       require('autoprefixer')(...options)\n    ],\n    sourceMap: true,\n  }\n}\n\n\u26a0\ufe0f  Either use options.config or options.plugins but not both \n\nReopen if still regressions :). #272 Feel free to send PR I just hadn't the time to do it until now and it worked without it (ident) in webpack v2.2.1 =< v2.6.0 with v2.6.0+ introducing a bug \ud83d\ude1e . diff\nconst postCSS = () => ({\n  loader: 'postcss-loader',\n  options: {\n+    ident: 'postcss', // <= this line\n    plugins: [\n      require('autoprefixer')({\n        browsers: ['last 2 versions'],\n      }),\n      require('postcss-flexboxfixer'),\n    ],\n    sourceMap: true\n  },\n});. postcss-scss is syntax parsing only to my knowledge, so the migration effort depends on how much Sass functionality (mixins, extends etc) you currently use in your project. It will definitely take some effort. Also don't use precss anymore as it is deprecated and unmaintained => use the PostCSS Plugins you need standalone in postcss.config.js instead (postcss-nested, postcss-mixins, ...). Otherwise please ask folks in the PostCSS Channel, if someone haas done such a migration before and if the have some tips and tricks how to do it at best. diff\n{\n      loader: 'postcss-loader',\n      options: {\n+       ident: 'postcss', // <= This line (fix)\n        sourceMap: true,\n        // https://github.com/postcss/postcss-loader/issues/92\n        // https://github.com/postcss/postcss-loader/issues/8\n        plugins: () => [\n-          precss(), // deprecated, unmaintained (additionally)\n-          postcssImport({ addDependencyTo: webpack }), // @import is handled by `css-loader` (additionally)\n          postcssCssnext({\n            browsers: ['last 2 versions', 'ie >= 9'],\n            compress: true,\n          }),\n        ],\n      }. The warning you get is bc 'postcss-import' is unable to find/resolve configs/color, the path seems to be simply incorrect. In your boilerplate you use precss (Includes a nesting plugin), postcss-nested (dito) && cssnext (Includes a nesting plugin aswell), so you definitely should choose one nesting solution. PreCSS && CSSNext are just wrappers around PostCSS Plugins. The same goes for cssnext, check their package.json for plugin duplicates. Also if you really want to use postcss-import (it will cause duplicates in your bundle) then use it as the first plugin and not after precss && postcss-nested . postcss-partial-import supports _partial.css (SASS) import style to my knowledge, but... \nas long as you don't \ud83d\udcaf  need to migrate a SASS code base to PostCSS free yourself from SASS conventions whenever possible as you won't really need them anymore \ud83d\ude1b . What do you exactly mean by 'weird' ?  The [null,null,null,null,null,null,null,null,null,null,null,null,null... stuff? Hard to believe at first but this is 'correct' and has to do with webpack internals nothing to worry about here. Check the bundle.css file for incorrect CSS, use a small setup (1-2 files) at best. It always appears like that, bc webpack uses a query string like syntax (JSON) postcss-loader?[...options]./path/to/file.css internally an needs to handle {Function} options with additional logic to stringify them and keep the reference. The {Function} name is lost during this process and it simply displays null as the name per {Function} \u00af_(\u30c4)_/\u00af. Where is your postcss.config.js located in the file tree? Could you show tree $PROJECT please. Config lookup starts from dirname(file) upwards by default and something like e.g \n|\u2013 node_modules\n| |\u2013 package\n| | |\u2013 style.css\n|\n|\u2013 postcss.config.js\n|\u2013 webpack.config.js\nshould normally work. \nOtherwise either set Plugins/Options directly webpack.config.js or provide the config.path\nwebpack.config.js\njs\n{\n  loader: 'postcss-loader',\n  options: {\n    config: { \n      path: 'path/to/postcss.config.js' \n    } \n  }\n}. Could you show the file where you import/require the component style + postcss.config.js + webpack.config.js. Do you run webpack via gulp ? Any possibility that postcss-load-config would need to to move the file tree downwards during config lookup, starting from dirname(file) ?\n. diff\n{\n  loader: 'postcss-loader',\n  options: {\n+   ident: 'postcss',\n    syntax: 'postcss-scss',\n    plugins: () => [\n       atImport(),\n       autoprefixer({ browsers: require('./package.json').browserslist }),\n     ],\n  },\n}\n\nThis becomes the error with plugins being [null, null]\n\nThis is 'correct' as the function name gets lost during options stringification . Could you add a console.log(params.plugins) before/after this line please ?\nAlso try to move \nwebpack.config.js\n```diff\n- autoprefixer({ browsers: require('./package.json').browserslist })\n\n\nconst pkg = require('./package.json')\n\n\nconst config = {\n\n...\n...autoprefixer({ browsers: pkg.browserslist })\n}\n```\n\nplease, since require inside options tends also to be buggy unfortunately \ud83d\ude1e . Hmm... the issue must be somewhere else. Can you post the full {Error} and provide a small repo repo I will try to debug it myself :). Why is postcss-scss needed here? sass-loader already passes valid CSS to postcss-loader in your current setup. @cedeber Could you provide a small repo for reproduction or at least provide more info/context (webpack.config.js etc....) please :). I couldn't reproduce this so far, please provide a reproduction repo and feel free to reopen then :). Don't use LoaderOptionsPlugin, it isn't needed anymore since postcss-loader  supports webpack >= v2.0.0 for a long time now and I removed 'support' for LoaderOptionsPlugin in postcss-loader >= v2.0.0. The No Config... Error occurs bc no options fromLoaderOptionsPlugin are passed to postcss-loader anymore\ndiff\n{\n    test: /\\.(sass|scss)?$/,\n    use: [\n        'style-loader',\n        'css-loader',\n-        'postcss-loader',\n+      { \n+        loader: 'postcss-loader',\n+        options: { \n+          ident: 'postcss', \n+          plugins: () => [ require('postcss-plugin'), ... ]\n+        }\n+      }\n        'sass-loader'\n    ],\n    include: [ path.join( __dirname, 'src' ) ],\n    exclude: /node_modules/\n}, \nor use a postcss.config.js file. js\n{\n  test: /\\.pcss$/,\n  exclude: /node_modules/,\n  use: [\n    {  loader: 'style-loader' },\n    {\n      loader: 'css-loader',\n      options: {  importLoaders: 1 }\n     },\n     {  loader: 'postcss-loader' }\n  ]\n}\njs\n module.exports = {\n   plugins: [\n    require('precss'),\n    require('postcss-simple-vars'),\n    require('autoprefixer')\n   ]\n}. Do you use css-loader minimize ? Which version of cssnano are you using ? >= v4-rc.1? postcss-loader doesn't alter any options to plugins by default, so the issue must by elsewhere. cosmiconfig caches the file by default to avoid repetitive fs calls. The config needs to be evaluated for each file, bc of the context when using a {Function}. Do you have a concrete solution for one of our proposed solutions in mind ? Does your build time decline when using a fixed path to the config file ?. What do you mean by remove :) ? If there is a way to refactor with the current logic staying in place but improved caching/memoization feel free to open a PR. Otherwise I'm afraid this is won't fix . >  I haven't used the word remove :)\nThen I misunderstood your intend \ud83d\ude1b \n\nOk, I'll send a PR today\n\nkk. Did you find a solution ? . I have something in mind but this needs to be done in postcss-load-config instead with the next upgrade (memoize the config {Function}), I will leave the issue open for tracking purposes. @simonbuchan Thx I will definitely look into it :). Should be similar to memoizing the {Function} calls in postcss-load-config, but I will check what they did aswell \ud83d\ude1b . I need to check if cosmiconfig provides a solution here, otherwise this isn't supported directly and you need to explicitly set the config path. If you use postcss.config.js the only option you need to set in webpack.config.js is sourceMap in case you are using them. Yeah normally  ident shouldn't be necessary anymore since webpack >= 2.2.0, but in reality it is. You only need the ident if options contain a {Function}|require() statement, so webpack can keep the reference to them internally.. Could you try using postcss-reporter (added after cssnano) and see if you get any warnings ?  postcss-loader handles errors, warnings emitted via result.messages, but can't do anything if the plugin doesn't have support for this mechanism. Oops \ud83d\ude05 I also didn't catch it.... Thx \ud83d\udc4d Fixed in #315, you only need the ident if you are using a {Function} || require() withinoptions (normally when using options.plugins instead of a postcss.config.js). Fixed && Released in  v2.0.9 \ud83c\udf89 . Does ./path/name.css or /path/name.css work? I need more info about your file structure, did you change anything else besides updating postcss-loader v2.0.6...2.0.7. From the history it's unlikely to be a regression between v2.0.6...v2.0.7. Did you try to revert to v2.0.6 ? Maybe \npostcss.config.js\njs\nmodule.exports = ({ file }) => ({\n   plugins: {\n      'postcss-import': { root: file.dirname } // @import relative to the file currently processed by postcss-loader \n   }\n}). https://github.com/postcss/postcss-loader/compare/v2.0.6...v2.0.7 There doesn't seem to be a code change possibly related to your issue. As mentioned I need more info about your setup :). webpack alias did never work with postcss-import, but may work without it and letting the css-loader revolve the @import's (better anyways). Could you try without postcss-import please?. Did you find a solution  e.g tried without postcss-import and changing the @import path to the correct URL ?   . $ROOT\n|\u2013src\n||\u2013 styles\n|||\n|||\u2013 a.css\n||\n||\u2013 file.css\n||\u2013 file.js\n|\n|\u2013 postcss.config.js\n|- package.json\npostcss.config.js\njs\nmodule.exports = ({ file, options, env }) => ({\n   plugins: {\n     'postcss-import': { root: file.dirname }\n   }\n})\nfile.css\ncss\n@import './styles/a.css';\nfile.js\n```js\nimport css from './file.css'\n...\n```. Please provide a small repo for reproduction for debugging then, it maybe also related to \nwebpack.config.js\n```js\n...\nresolve: {\n    modules: [\n      src, // <=\n      demo_src + '/imports',\n      'node_modules'\n    ]\n  },\n...\n```\nbut I can't tell \ud83d\udcaf . hmm... \ud83d\ude43  If that works for you but I personally wouldn't rely on it, both postcss-import (node-resolve) && webpack (enhanced-resolve)  use the same underlying resolve algo for node_modules resolving. I'm still wondering why you add the src directory to resolve.modules though. Is  newer version of happypack able to serialize {Function} in loader.options ?  Your current issue occurs if the options in webpack.config.js aren't applied (not found) for some reason so postcss-loader tries to load a postcss.config.js file instead and finally fails. I don't use happypack myself but it uses workers and therefore needs to serialize the data. Using a postcss.config.js file should resolve this. It's unlikely to be a regression between v2.0.7...2.0.8. https://github.com/postcss/postcss-loader/compare/v2.0.7...v2.0.8 I can't spot anything suspicious in the diff that may relate to this within the commit range. Please provide a reproduction repo for debugging . https://github.com/amireh/happypack/wiki/Loader-Compatibility-List  According to this list a postcss.config.js file is mandatory to work with happypack in general (see my previous comment), if this changed a while ago in happypack and the changes to the options filterFn in postcss-loader v2.0.8...2.0.9  are the cause for this I will revisit this asap, albeit I doubt it tbh since tests for this pass and happypack is known to not work with complex options ({Function} || require()) by design. If reverting to v2.0.8 works, please provide a small reproduction repo and I will try to debug it. Feel free to reopen the issue if a reproduction is provided.. You can't configure source maps via postcss.config.js (remove it anything related to source maps entirely from the config file please) when using postcss-loader (webpack), since webpack sets [strict] requirements about the source map generation (format). The 90%  correct way to go is simply using sourceMap: true in webpack.config.js's postcss-loaderoptions.sourceMap: inline can be used with style-loader && postcss-loader  (standalone, no css-loader) so the source map is inlined in the CSS source as an annotation comment /*# sourceMappingURL= ... */  which loads faster in development.\nTL:DR remove all source map related props from postcss.config.js && use sourceMap: true in webpack.config.js postcss-loader options\nFeel free to reopen if still regressions . hmm.. I wonder where this is actually coming from in v2.0.0 since I removed the 'Custom Plugin Compilation Hook' in v1.0.0...v2.0.0. Could you point my to the where in angular-cli the loader is getting used atm ?. This might be a bug in [postcss-load-plugins]  could you reopen the issue there please and I will fix it as soon as possible ? :). Thx I will fix it as soon as possible alongside with a few other minor changes in the postcss-load-* repos :). @teazean This warning is mainly displayed if you have a previous source map (map, e.g from the sass-loader) and options.sourceMap = undefined || false || null in postcss-loader. If the following 2 configs still work\nwebpack.config,js\njs\n// 1\n{\n   test: /\\.scss$/.\n   use: [\n      ...,\n      { loader: 'postcss-loader', options: {} }, // warning\n      { loader: 'sass-loader', options: { sourceMap: true } }\n   ]\n},\n// 2\n{\n   test: /\\.scss$/.\n   use: [\n      ...,\n      { loader: 'postcss-loader', options: { sourceMap: false } }, // warning\n      { loader: 'sass-loader', options: { sourceMap: true } } // if false/unset => no warning\n   ]\n}\nbut the main (your) issue is that currently explicitly setting sourceMap = false is a false negative that triggers the warning I will accept this PR. Otherwise I'm afraid have to declined it.. @teazean If the vue-loader generates a source map this warning will still appear and rightfully so then, could you open an issue about this in vuejs/vue-loader aswell and verify if/why vue-loader adds a map of some kind here ?  . I'm of course open to improve the warning message if it's misleading/confusing :). I working on upstreaming the first bits to the appropiate plugins, this PR was never intented to land in postcss-loader. I opened it for discussion and visibility for others. I have the css-webpack-plugin && css-loader && style-loader ready for polishing, but there are a few things to discuss and I will summarize them in a gist instead when the code for each package is ready for alpha testing, so it's hopefully easier to finish the remaining TODO's and find consensus. Please always put our code in backticks `` Code \\``` and feel free to reopen an new issue. @clydin Did you test withpostcss.config.js` aswell ? This shouldn't be an issue here I assume...\nCan you give an small usage example where this is reproducible ? (When exactly does this cause undesired behavior/breaks ?)\n  . Released in v2.0.10 \ud83c\udf89  Thx\n  . https://github.com/npm/registry/issues/255#issuecomment-355771177. js\nrequire('postcss-import')({ root: loader.resourcePath }),\nThis config resolves @import relative to the current file processed by postcss-loader and is expected behaviour\nYou can either make the fonts.css file a separate import to your JS entry \nentry.js\n```js\nimport fonts from './fonts.css'\nimport component1 from './src/components/component1'\nimport component2 from './src/components/component2'\n...\n``` \nor put the fonts for the component relative to the file\n:warning: precss !== SASS  It's provides SASS like functionality for CSS (.css) but isn't SASS. '{system path}/node_modules/@std/esm/esm.js.gz'\nI can't really tell from the info provided, but did you try to clean your node_modules folder and the @std/esm cache ? Looks unrelated to postcss-loader... Are you using a postcss.config.js file ?\nAs mentioned I need more info about your setup please. Did you find a solution ? . You're getting this warning from postcss-cssnext which already includes postcss-custom-properties https://github.com/MoOx/postcss-cssnext/blob/master/package.json#L31 warnings in postcss-custom-properties are enabled there . Of course, I think it's \njs\ncssnext({\n  features: {\n    customProperties: { warnings: false }\n  }\n}). Released in v2.1.0 \ud83c\udf89 . There isn't a Firefox 61 released yet (latest is 58) ? \ud83d\ude1b  Did you mean Chrome 61 ?. @egorpavlikhin browserslist is not directly used by postcss-loader, please include your current postcss dependencies and I also think this was fixed in a newer version of browserslist (but not \ud83d\udcaf sure). It might be better to open an issue in browserslist instead. Are you using >= webpack v4.0.0-beta.0 ?. https://github.com/webpack/webpack/pull/6430 webpack =< v4.0.0 (>= v3.11.0) also updated ajv. Good to know :) I will release a patch for schema-utils (the dependency updates are already on master) and the warning should be fixed. mom.... https://github.com/webpack-contrib/schema-utils/releases/tag/v0.4.4. Released in v2.1.1  \ud83c\udf89. Thx. Sry, I didn't think of resolve-url-loader when merging #339 :). The fact is that \n\nresolve-url-loader is basically a hack in general\nThis should be fixed in/guarded by resolve-url-loader itself\nThe use case for resolve-url-loader can be implemented in a cleaner way \nIt forces other loaders like e.g postcss-loader to produce malformed source maps then\n\nThe change should not have landed this way (as a patch) in retro spec, but since resolve-url-loader should/could be fixed and changing the loader order seems to work aswell, I'm not going to revert this change for now . > The problem above could probably be solved by setting additionalProperties to false\nYep, we should definitely do that :)\n. > I am totally with you on that point. My thinking was that it was better to stick with how (most) other loaders work. I may be wrong, and I have not a lot to back this up with except babel-loader, but I believe that many loaders (that also allow rc-files) have support for merging. On the other hand, it's probably a good idea to disallow merging as long as we can prevent misunderstanding.\nbabel has lots of issues with this (aswell) e.g published .babelrc files from node_modules which then get merged with your .babelrc and their is a third flavor in the making to prevent that already :) https://github.com/babel/babel/pull/7358. babel has the benefit that it's plugins work differently and don't rely that heavily on exact plugin order (In-order AST Reducing (postcss) vs. Visitor Pattern (babel))\n\nOne of the somewhat weird behaviours (although justified) is that configuration done in webpack options apply to either the actual loader or postcss. Also, it is not obvious to me that adding syntax: 'sugarss' to webpack config will cause postcss.config.js not to be parsed at all.\n\nThings like ident && sourceMap etc are webpack loader specifics which in terms of consistency is a valid point of critique, but that won't be resolvable without filtering these props out before passing it to postcss in either way :). E.g declaring sourceMap in webpack.config.js still works with postcss.config.js since it's webpack loader specific and has restrictions compared to postcss sourcemap options. If this is too unclear/confusing in your opinion it should be better documented in the README instead\n\nI do not have any good answers to your questions, so maybe that is enough to close this PR. Do you think a warning message is appropriate when an option is causing postcss.config.js to be skipped?\n\nIt's edgy in the nuances and still not perfect even with  a 'clean' approach taken by separation :)\n\nDo you think a warning message is appropriate when an option is causing postcss.config.js to be skipped?\n\nThe problem I see with warnings is that webpack doesn't offer a way to only display them once, so everytime a .css file is processed by the loader the warning will be displayed which can easily stack up to hundreds of warnings... Still agreeing that there should be some hint in this case as one gets and {Error} in case both no webpack.config.js options or postcss.config.js is found \ud83e\udd14 . Released in v2.1.2 \ud83c\udf89 . Closing due to inactivity for now, feel free to reopen :). env is set by process.env.NODE_ENV or defaults to development. Since webpack decided to not rely/fallback on NODE_ENV  for mode, it is unfortunate but you need to add mode to the ctx yourself or set NODE_ENV separately to webpack's  mode\n1\nwebpack.config.js\njs\nmodule.exports = {\n   mode: 'development'\n   ...\n     {\n        loader: 'postcss-loader'\n        options: { \n           config: { \n             ctx: { mode: this.mode } \n           } \n     }\n   ...\n}\npostcss.config.js\njs\nmodule.exports = ({ file, options, env }) => {\n   console.log(options.mode)  // 'development'\n}\n2\nwebpack.config.js\n```js\nconst env = process.env.NODE_ENV || 'development'\nmodule.exports = {\n   mode: env\n   ...\n    { loader: 'postcss-loader' }\n   ...\n}\n```. Yep :)\n\"build\": \"NODE_ENV=production webpack\"\n\"start\": \"NODE_ENV=development webpack-dev-server'\nwebpack.config.js\n```js\nconst env = process.env.NODE_ENV || 'development'\nconst config = {\n   mode: env,\n   ...\n}\nmodule.exports = config\n```\nSee my comment above for how to add webpack mode to the config (postcss.config.js) context, albeit I don't recommend doing so, since it is needlessly verbose and redundant to use mode over env here. Just ensure to set mode via env in the config (webpack.config.js) to enable all webpack related optimizations in production. I like the idea, but need more info about exact requirements here. @kisenka could you share a small demo project ?\n\n\u26a0\ufe0f this._compilation is also deprecated so we need to ensure that e.g this.emitFile or adding the asset directly to module.assets works/is sufficient. The name is an hardcoded requirement of cosmiconfig and 'enforces' are convention which is intended. You are revering to extends within eslintrc configs which isn't currently supported by postcss.config.js directly. A postcss.config.js file is scoped to the project, but you may require() a preset shared through an node module as follows\n\npostcss.config.js\njs\nmodule.exports = require('my-preset')(options). https://github.com/postcss/postcss-loader/pull/326. We can of course move it under postcss and everyone who needs it can have any access to, since it is meant to be the common postcss config and not just some opinionated module of mine. @evilebottnawi It works without any issues atm, so their is really no need to rush anything here :). Any kind of  'perf' improvement is claiming until it is actually benchmarked... There are a few things outstanding for postcss-load-config but all changes need to be tested across the different runners and I just haven't found the time to do so yet. Global requires for the CLI and better {Error}s are needed, but I was personally waiting for a few things while there isn't any urgency, hoping that \n\nnode's decision on how ES Modules will work in the future and what this may mean for postcss-load-config and global/local plugin loading (unresolved). This is important since loading local plugins from a global config requires to hook into module (CJS) which may not be possible with import() (ES Modules) and may cause trouble to migrate later on.\nBreaking Changes of cosmiconfig v5.0.0 (which was released ~2 hours ago) (resolved). We may also consider just resolving the config on our own since cosmiconfig includes extras we don't really need. Supporting postcss.config.js,.postcssrc.js && pkg.postcss with ctx should be enough. The search algo is trivial here and doesn't really require and an additional module. Still ensuring searching works the same for existing postcss.config.js etc would be needed then\nplugins: <Array> won't work with 'global' requires, so this means that it's not just a choice of 'style', but can also result in different config behavior (bad)\n\nAlso for a new major version we might in general triage what we can do better beforehand, what breaking changes (should be avoided at all cost) this would cause etc etc..\nMaking it just one module would also be a good idea, since splitting it into 3 was a very bad idea of mine back then. It could also be included in core directly instead of being a separate module or core ships with the module included by default (with a condition to exclude it for other targets then node) trying to load a config via options.from || process.cwd(). Since it will always require access to the File System and therefore 'only' really work with node (which is the main use case), the question is if this unnecessarily complicates bundling postcss for other targets (e.g browser). Still something to explore since the implementation is small and trivial atm\n\nCould you give me (iskin at npm) npm access just in case of security or other critical issue?\n\nDone. Yep, something like that :). \ud83d\ude2e I just added @ai on npm atm. Who and what access does anyone envolved need (github/npm) ? Should we move it to postcss or leave it and discuss core integration first (since the module(s) is then deprecated and obsolete soon anyways) ?. https://github.com/postcss/postcss/issues/1147. Released in v2.1.5 \ud83c\udf89 . As this seems to be an {Error} within your code somwhere I'm closing this for now. But in case you still have an issue and provide a minimal repro I will reopen the issue. Closing in favor of https://github.com/postcss/postcss-loader/pull/384/commits/6eb82be7e7115f010946c1df1ab2072b59975e7c Thx. @PawelGIX I need a (minimal) reproduction to debug this please. Closing due to inactivity for now, if you can provide a concrete repo for reproduction feel free to reopen :). Since postcss.config.js works with multiple build tools (CLI, grunt, gulp, ...)  env is explicitly based on process.env.NODE_ENV. I suggested to set NODE_ENV alongside mode since they are very similiar and basically solve the probem, but this was rejetced by the webpack maintainers as 'relying on env variables'  is a concern for them. You need to set process.env.NODE_ENV alongside mode e.g\nNODE_ENV='...' npm run build\nwebpack.config.js\n```js\nconst env = process.env.NODE_ENV || 'development'\nconst config = {\n  mode: env,\n  ...\n}\nexport default config\n``.postcss-loadersupports watching additional files via [result.messages](https://github.com/postcss/postcss-loader/blob/master/lib/index.js#L148-L150).postcss-image-sizesneeds to add every image passed by it'sassetPathoption toresult.messages` in the following way\npostcss-images-sizes/*.js\njs\n// Images URL's (options.assetPath + img)\nurls.forEach((url) => {\n  result.messages.push({ \n     type: 'dependency',\n     file: url\n  })\n})\nand postcss-loader will add them as a dependency to webpack automatically. This eventually fixes the css-loader issue aswell, since the image file is being watch then (no need to add that logic to css-loader). I suggest you open a PR in the postcss-image-sizes repo or fork the plugin :). There simply needs to be a more 'advanced' caching mechanism, the extracted helpers from the CSS fle + the image source path need to construct a cache key which is invalidates the cache for an image \n```js\nconst cache = new WeakMap()\nfunction key (img, options) {\n  // e.g path/to/image.png?w=300&h=400 (Image Path + Options/Helpers/Metadata)\n  const buffer = Buffer.from(${img}?${options})\n  // zgg574h1 => Cache Key (Unique Hash)\n  return crypto\n    .createHash('md4')\n    .update(buffer)\n    .digest('hex')\n    .substr(0, 8)\n}\nfunction plugin (img, options) {\n   if (cache.has(key(img, options))) {\n     return cache.get(key(img, options))\n   }\nconst result = // process ...\ncache.set({ \n       [key(img, options)]: result  // { 'zgg574h1': {Result} }\n   })\n}\n```\n\n\u26a0\ufe0f This above is just sloppy pseudo code :), but that's the idea\n\nThe plugin doesn't currently work well for your use case and I can't possibly do anything on the postcss-loader side here to fix it. You need to either write your own plugin or send a PR to fix the cache and add missing dependency tracking to postcss-image-sizes. >I might make PRs to postcss-image-sizes repository. But you must be missing the point here. postcss-image-sizes replaces image-width(./1.png) in css code with say 100px. Not resizes the image. No options besides assetsPath.\nBy 'options'  I meant the values within the CSS Code, image path + css values === cache key, the cache currently only checks if the image exists or not , there might be a mtime (Did the file change ?) check needed aswell here (mtime is on the fs.stat() {Object}). But most importantly if one changes something within the CSS the cache isn't currently invalidated and the change won't have any effect. Only the image path as cache key simply isn't enough.... > So to check if the cache is invalid, you've got to read the file (which makes the cache meaningless), or subscribe to some sort of file system notifications (which makes no sense when postcss is running standalone, and is probably overkill). Or clear the cache every time webpack builds the bundle. E.g. add clearCache() method to postcss-image-sizes plugin, and create a webpack plugin in webpack.config.js, which calls the method every time webpack invalidates the build. And maybe make it public? Like, PostCSSImageSizesClearCachePlugin :)\nThat will be magnitudes more complicated as fixing or simply disabling the cache within the plugin to begin with, but yes there are other solution possible in general but that's complicated to explain and won't solve your problem asap. In case you favor or want to try out the webpack plugin approach\n```js\nclass Plugin {\n  constructor (options = {}) {\n    this.plugin = { name: 'PostCSSImageSizes' }\n    this.options = options\n  }\napply (compiler) {\n    const { plugin, options } = this\n    const { compilation } = compiler.hooks\ncompilation.tap(plugin, (compilation) => {\n   // Have fun...\n})\n\n}\n}\nmodule.exports = Plugin\n```\nFor handling CSS assets (images etc), instead of a loader a webpack PostCSS Plugin might be good idea. Processing images and co kg within CSS is not straightforward in webpack atm.... I promise to throughly answer your questions within the next few days, I have something for most of this already in mind and I wrote a postcss-webpack-plugin (e.g use postcss-custom-properties on the whole CSS Chunk instead of each CSS Module separately) and a new css-loader I use locally, which transpiles CSS to an ES Module for @import && url() resolving/support (I will explain that approach in detail as promised and link to the repo's when once pushed :)). E.g\nmodule.css\n```css\n@import './file.css';\n.class {\n   background-image: url('./file.png');\n}\n```\nmodule.js (after css-loader!postcss-loader)\n``js\n// => triggers the CSS Loaders (recursion)\nimport CSS__IMPORT__0 from './file.css'\n// => triggers Loaders for{ test: /.png/$ }e.g thefile-loader` (recursion)\nimport CSS__URL__0 from './file.png' \n// CSS Modules (if present)\nexport const modules = {}\nexport default ${CSS__IMPORT__0}\n  .class {\n    background-url: url(${CSS__URL__0});\n  }\n```\n\nHere I suppose you're hinting at Webpack 4 CSS Module Type\n\nI'm the author of the initial CSS Module Type PR in webpack/webpack :stuck_out_tongue:, but the same is solveable with a plugin and a loader while 'native' CSS support is complicated (on the edges) with the way webpack currently works (Multi Compiler, many ways to specify entries and the affects this has on the module graph, communication between different module types e.g exporting CSS Modules to a JS Module, HMR ...). One needs to rebuild most functionality for a new module type since most of the features are implemented as methods of the JS Parser atm. Can you post a screenshot and does this also happen with other symbols (e.g the various \u26a0\ufe0f) ? Chrome only or in other browsers aswell ?. I need to make a quick check on the weekend what else might be a good idea to potentionally include in  the next a major release + the additional chores like docs polishing etc. I don't think there are other (needed) breaking changes atm, so I'm heading to cut a release on the weekend/monday for PostCSS v7.0.0 (#375). If there is anything else to triage please open an issue. > \u26a0\ufe0f Do not merge before v2.0.0 branch has been cut. Closed by #379 . \ud83e\udd14 We could remove all current references to autoprefixer and add a autoprefixing example  to the examples section instead with a note/warning for postcss-preset-env users about that matter. \n```\nAutoprefixing\n```js\n// ...example\n```\n\n:warning: postcss-preset-env already includes the autoprefixer plugin.... and so forth\n``. https://github.com/postcss/postcss-loader/pull/384/commits/6bf774fe24a2eaa87fa5e53065a63af13f51ee9b. Should we use the semver major part of the PostCSS version for the ast version and make it a{Number}` instead?\n\ndiff\n{\n-  version: '7.0.2'\n+  version: 7\n}. Already on it, closing in favor of https://github.com/webpack-contrib/schema-utils/issues/31. I was also under the impression that it shouldn't be necessary anymore as I initially open the issue about it in the webpack repo and asked if a unique ident could be assigned by default to every loader instead, without the need to manually specify it. The reality though is that there where still plenty of reports where postcss-loader stopped working when the custom ident was missing. So I'm inclined to still better leave it within the docs for now. If v3 is refering to postcss-loader then nope since it has already been released :). There isn't really anything to drop, besides removal from the docs. There was never been any PR made to webpack which fixed or refactored the logic for ident. I'm pretty sure it will still doesn't \ud83d\udcaf work. @rjgotten Could you try with the following patch ? \nhttps://github.com/postcss/postcss-loader/blob/master/src/index.js#L157-L159\ndiff\nif (map) {\n-  map.file = path.isAbsolute(map.file) ? map.file : path.resolve(map.file)\n+  map.file = path.isAbsolute(map.file) ? map.file : path.resolve(map.file)\n-  map.sources = map.sources.map((src) => path.resolve(src))\n+  map.sources = map.sources.map((src) => {\n+     if (path.isAbsolute(src))\n+        return src\n+     }\n+\n+     return path.resolve(src)\n+  })\n}\n. This seems to be likely the offending line causing the issue on windows when the postcss-loader resolves the paths. I don't have access to a windows machine and therefore can't verify, but on Linux/macOS with and without the suggested patch sourcemaps seem to work correctly (besides using the style-loader but that's definitely another bug there, so try with e.g the mini-css-extract-plugin when testing)\nmap.json\njs\n{ \n  version: 3,\n  sources: [\n     '/Users/Cini/Github/webpack/__test__/client/styles/imports/import.css',\n     '/Users/Cini/Github/webpack/__test__/client/styles/App.scss' \n  ],\n  names: [],\n  mappings: 'AAAA,yBAAA;ACAA;EACE,...',\n  file: '/Users/Cini/Github/webpack/__test__/client/styles/App.scss',\n  sourcesContent: [ '...' ] \n} \n\n. Did you also try with commenting out these lines completely to see if the path.resolve in potcss-loader causes this weird concatination on windows? I wll try my best to debug it, but as mentioned before I don't have aceess to a windows machine so it is hard for me to get my hands on this :). I think it does that already, but later (after loaders) within a webpack (core) plugin (SourceMapDevToolPlugin) and this plugin needs absolute file paths to work correctly and it's seems to be also working on UNIX platforms (see https://github.com/postcss/postcss-loader/issues/390#issuecomment-417393099). The problem we are having are malformed paths on windows caused by some loader. Likely because the sass-loader is normalizing the file paths incorrectly atm. Once I get access to a windows machine I will debug it myself, but it may take a few days.... https://github.com/webpack/webpack/blob/master/lib/SourceMapDevToolPlugin.js#L174-L223\nI don't know the exact why behind it, webpack currently supports 12 different 'types' of sourcemaps flavours, some the world never heard about before :). Anyways this won't likely change in the near future and we should focus on finding the bug that causes the malformed paths instead :). Did you use this syntax with a postcss.config.js file or in the webpack.config.js ? The latter does definitely not work.... Loaders are executed from right to left dest <=loader-2 <= loader-1 <= loader-0 <= src\njs\n{\n  test: /\\.ext$/,\n  use: [ 'loader-2', 'loader-1', 'loader-0' ]\n}\ndiff\n{\n   test: /\\.scss$/,\n-  use: ['css-loader', 'sass-loader', 'postcss-loader']\n+  use: [ 'css-loader', 'postcss-loader', 'sass-loader' ]\n}. https://github.com/michael-ciniawsky/postcss-load-config/issues/182#issuecomment-470604665. I'm not familiar with neither nutui nor vue-cli and I don't think this is problem related to postcss-loader, but my guess is that the order of @imports provided to the data options is incorrect. (wrong order)\n\n\u26a0\ufe0f  Google Translate\n\n\u6211\u4e0d\u719f\u6089nutri\u548cvue-cli\uff0c\u6211\u4e0d\u8a8d\u70ba\u9019\u662fpostcss-loader\u7684\u554f\u984c\uff0c\u4f46\u6211\u8a8d\u70ba\u63d0\u4f9b\u7d66data\u9078\u9805\u7684@imports\u7684\u9806\u5e8f\u662f\u4e0d\u6b63\u78ba\u7684\u3002 \uff08\u8a02\u55ae\u932f\u8aa4\uff09\ndiff\nmodule.exports = { \n  baseUrl: '', \n  devServer: { proxy: { '/api': { target: process.env.VUE_APP_URL, changeOrigin: true } } }, \n  css: { \n    loaderOptions: { \n      sass: { \n-        data: @import \"./src/styles/_custom.scss\"; @import \"@nutui/nutui/dist/styles/variable.scss\";\n+        data: @import \"@nutui/nutui/dist/styles/variable.scss\"; @import \"./src/styles/_custom.scss\";\n      } \n    } \n  } \n}. @trigun539 Rename postcss.conf.js to postcss.config.js and it should work. See https://github.com/michael-ciniawsky/postcss-load-config#usage for more info about valid config names/conventions. https://gist.github.com/trigun539/2b8ebf739b64881ec0b3ea2a9e37ba92#gistcomment-2866264. - babel 6 compiler => Babel >= v6 \n- in order for setup  => in order for the/your setup to work. only => only one  || only => one ?. Maybe switch order here?  But I'm nitpicking \ud83d\udc24 \ud83d\ude1b \n\nadd babel-plugin-add-module-exports\nonly one default export per module/file. sourceMap-true => sourceMap. function => {Function} . plugins-function => plugins.fn || pluginsFn. ```diff\ntrue\n``.sourceMap-inline=>map( Referring to PostCSS{ map: 'inline'}).inline=>Inline. yeah... \ud83d\ude43 \ud83d\ude1b  I just don't like thedashstyle :D. Why this ? \ud83d\ude1b . Willoptionsfromwebpack.config.js`  e.g \n\njs\n{\n  test: /\\.css$/,\n  use: [ { loader: 'postcss-loader', options: { parser: 'sugarss' } ]\n}\nbe assigned when postcss.config.js is present ?. This caused problems on 'multiple' runs for some weird reason, but maybe because it was defined in the wrong place, not sure here tbh \u00af_(\u30c4)_/\u00af. It work for the first loader run and was then missing for all further runs, which lead to const sourceMap being always undefined. Besides that delete options.sourceMap => options.sourceMap = null (perf) ?. This changes to config loading behaviour ? See comment below where options get reassigned. postcss-load-config has it's config lookup algo backed in via cosmiconfig, options.config.path should only be used for cases like \n|\u2013 .config\n| |\u2013 postcss.config.js\n|\u2013 src\n| |\u2013 style.css\n|\n|\u2013 webpack.config.js\nThe current trigger for loading postcss.config.js is if no other options are set in webpack.config.js =>postcss.config.js . > using options allow change map, it is bad, for some it is misleading behavior\n? \ud83d\ude43  You mean that currently one has to set map via { sourceMap: true || 'inline' } (webpack.config.js) exclusively?\n\nbut to and from now also we can change through config.options\n\nThey shouldn't be changeable, since File I/O is handled by the webpack (Runner) \ud83d\ude1b . Does the exact minor.patch really matter when the ^ is used ? . rm . rm . rm . Why was this renamed? Should be options. wrong ident. #259 . #259 . the code indentation is off :), at least looks it  . It works atm due to lexical scope, as long as there is no need to rename it please leave it as is . js\ncb(null, `module.exports = ${JSON.stringify(css)}`, map)\nreturn null. js\ncb(null, css, map)\nreturn null. @DmitriWolf Are you also using bluebird ?. \ud83d\ude05 \ud83d\udc4d . test/helpers/fileChange => test/helpers/fs. readCssFile => read . fileName => file. c => content || data. writeCssFile => write. copyCssFile => copy. deleteCssFile  => delete. js\nconst { copy, delete } = require('./helpers/fs'). js\ndescribe('Watching', () => {\n   describe('Dependencies', () => {\n     test('Error', () => {\n        // ...\n     })\n   })\n}). ```js\nif (err.file) this.addDependency(file)\nreturn ...\n``.testSteps=>steps.\\n.\\n. For each element insteps` please. Either \njs\nconst options = {\n  watch (err, stats, close) {\n     // ...handling\n  }\n}\nor \njs\nconst options = {\n   watch: {\n      handler (err, stats, close) { // ...handling }\n   }\n}. css-watching  => watch/watching (Fixtures). c => watcher. This should be config.watch(ing) instead of config.loader.watch(ing) ?. Ooops \ud83d\ude1b yeah right...  *File is \ud83d\udc4d . I need to check the Postcss API docs, but I think warnings can contain location info and a code frame if the plugin author used the appropiated PostCSS Plugin API. If that's the case it would be better to reuse the code located in lib/Error.js and create a new class LoaderWarning (lib/Warning.js) based upon that to be consistent in terms of formatting. > \u26a0\ufe0f Note that you can't use other filename other then the supported config formats (e.g .postcssrc.js, postcss.config.js), this option only allows you to manually specify the directory where config lookup should start from\nwebpack.config.js\njs\n{\n   config: {\n      path: 'path/to/.config/' \u2705 \n      path: 'path/to/.config/css.config.js' \u274c \n   }\n}. Please still leave the previous warning \n\n\u26a0\ufe0f  Otherwise it is unnecessary to set this option and is not recommended.. >= 6. Please leave it as ^1.0.0 since the ^ will already install the latest semver minor && patch within the v1.x.x range. - Drop the /issues fragment from the link please\n- Maybe also link to the autoprefixer repo similiar to how it's done for postcss-preset-env\n\nOptional\ndiff\n- , so adding it ...\n+ , so adding it **separately** ... you **already** use the .... Using 'postcss-preset-env' as the key here conflicts with the usage in the config file (options.presetEnv) above, one would have to access it via bracket notation options['postcss-preset-env'] instead of dot notation (options.presetEnv) as currently used. Either rename the key in webpack.config.js or use bracket notation in postcss.confg.js aswell :). TL;DR Due to experience with the ecosystem I do prefer to have 'control' over webpack deps I need and use by now, but in this case I'm open to eventually revert that change as it isn't optimal either for reasons you already mentioned...\nIs there any discussion/documentation about the (planned) changes to the Loader (Runner) API ? (Guessing no)\n\nThe problem is that I'm fairly sceptical by now, if relying on webpack/webpack-contrib modules is a safer choice long-term then maintaining my own. Take webpack-contrib/schema-utils as an example here, where someone introduces breaking changes to the module then seemed to have noticed that webpack already uses that module in it's current form and finally concludes stupidly to release a new package (@webpack-contrib/schema-utils) as a result without giving a shit and with no easy way to at least maintain the 'old' version already in use. I'm not getting started on the unnecessary changes made there.... I'm simply sick and tired of working on xyz and at the end of the day it is for nothing concrete because of organisational issues/no feedback and/but on the other hand to top it still every time someone bluntly chimes in and does his/her own thing anyways causing nothing but havoc and burden. I'm not 'for fun' forking and yet planning to release/releasing modules of my interest + x under @webpack-utilties/*, @webpack-loader/* and @webpack-plugins/* again where 'needed'. It took my ~2 days to cleanup the useless bloat (e.g webpack-defaults madness) for my pending PR's and get those changes of mine in compared to partaitly months of fruitless discussion resulting in stalled PR's in zero progress one way or the other. (It's for e.g not really true that I abandoned most of my PR's some where also simply closed depsite the fact that they were basically ready but may have contained breaking changes like a higher node version (because of webpack-defaults) I sometimes simply left them since there was no pressure or need to immediately release them). Anyways... my main intention for contributing was to cleanup and simplify the horribly redundant loader and plugin landscape wherever possible, but it more and more turns out that this seems to be impossible within that ecosystem and is even getting worser every day (Mutliple CLIs, Mutliple devServer's etc). I'm not interested in that and to some point I already simply sticked the finger to it\n\nNote that the issues and complains made above do explicitly not apply to you. I check for it within the loader already via err.name = 'CssSyntaxError' ? new SyntaxError(err) : err so the properties are always defined . I will change it. Since we can't change addtionalProperties to false due to third parties anyways I will test and remove it. I want consistent formatting with the current {Error} Format and the toString() message looks weird imho\n\nWarning\n{{ Name }}\n\\n\n({{ Line }}:{{ Column }}) {{ Text }}\n\\n\n```\nWarning \n(1:1) I'm a Warning\n```\n(Syntax)Error\n{{ Name }}\n\\n\n({{ Line }}:{{ Column }}) {{ Message }}\n\\n\n{{ Code Frame }}\n\\n\n```\nSyntaxError\n(1:1) I'm an Error\n1 |\n2 >|  .class \n3 |\n```. I was not sure about that and took the risk for now, will update. remove. wrong \ndiff\n- processor.version[0]\n+ processor.version. ",
    "jescalan": "Awesome! Let me know if there's anything else I can do to help.\nThere is one drawback here I realized that I feel like should be brought up at least. If we swap over to accepting all syntax options only through the webpack postcss option, using webpack's require decorator will no longer be as effective without the querystring options. I don't ever use this feature personally since my settings are always inside the config file, I'm not sure if anyone does honestly, but it's possible that some others do so it might be worth asking around.\n. Ah yeah I see what you're saying here, disregard the last comment then. Agreed.\n. Sorry I'm not entirely sure I understand, but I tried to make it clear what my use case was at least in the initial description:\n\nThis patch allows users to pass in any of these options as a function instead of a string, which is important to be able to do if the option is passed from elsewhere and not required directly as is done internally.\n\nSorry if I misunderstood!\n. ???\n. So some of the options come in as strings are are require-ed internally. You can see this here. The user in this case has no control over where the modules can be require-ed from. This also makes it impossible to take a library that the user has loaded up and initialized manually and use it along with postcss.\nPassing a string and requiring internally limits the loading of any other options to only libraries that can be found directly in node's require pathway and gives the user no options when it comes to customizing the behavior of the loaded module.\nI made this PR because I have a use case where this is limiting enough to require a fork -- this is a real issue that affected me, not some craziness I made up.\nIf you don't want to accept it, that's ok but I want to make sure that you do understand the reasons behind it and the fact that this is an issue which will require myself and other users who need this functionality to rely on a fork indefinitely.\n. Well, webpack has an established way of handling this use case, which is documented here. There are a number of other loaders that use this method to solve the issue.\nThis is exactly the pattern I submitted in this PR, so I think it should be the right way to handle it.\n. I'm sorry, I have tried my best to explain why this is necessary a number of times in this issue, and I'm not sure how I can make it more clear. This was my last attempt to explain it. Was there anything that I did a bad job of explaining there that I can try to re-word?\n. Yeah, this particular PR does keep the current syntax, just adds the secondary syntax as well.\n. So for a code example, usage would look like this in a webpack config file:\n``` js\nvar autoprefixer = require('autoprefixer')\nvar customParser = require('./custom_parser')\nmodule.exports = {\n  module: {\n    loaders: [{ test: /.css$/, loader: 'postcss' }]\n  },\n  postcss: { plugins: [autoprefixer], parser: customParser }\n}\n```\nHope this helps!\n. \ud83c\udf89 \n. Not sure what you mean with #1 there, but thanks so much! Would be great to see a patch for this, it's breaking some of my software \ud83d\ude1e \n. Not entirely sure I understand why this would be the case. Either way, the ctx coming in was the node global previously, not the webpack loader context, which I assume wasn't the desired result!\n. So I am not sure what postcss-load-config is, but I am not interested is using it at all here. I just need to get the webpack loader context available in a config function passed directly to the loader. Right now, that context is not available at all, you can trace it as such:\nAt this point, in the direct context of the exported function called by webpack, this is the webpack loader context. You save it off as a variable called loader. Now we move through the code, and here is where the parseOptions function is called without setting the context to anything specifically, so it retains its own context for this, and we have lost the webpack loader context.\nNow, when we're inside parseOptions is when the config function is called, if one was passed. It gets called with this, which is set to the global context since there is no this bound to the function when its called -- the function is called without context, so it is automatically the global context. So inside of the config function passed in, it's the global context. This is a this/context bug in this specific codebase, it doesn't have anything to do with webpack at all, and is completely and entirely fixed by this PR alone.\nThe bug was introduced in this commit, when the options function call was extracted into a different file which didn't have the correct loader context.\nHope this makes sense!\n. @ai @michael-ciniawsky thanks so much guys for the quick response and release! \ud83c\udf89 \n. Extra context -- it's important to be able to pass the actual parser as required as opposed to passing a string and having this library require it for you, since you cannot guarantee that the require path of this library will match the context you are using it in (for global packages especially this is the case). The actual code can accommodate this, which is why the requires from a string are inside an if statement, however, the recently added validation broke this.\nThanks for fixing it here @liitfr! \ud83c\udf89 \n\nAlso as an aside, honestly I think it's an antipattern to have loaders require dependencies from a string for you. Require resolution is not as simple as this often times, and it's best to force a guarantee that you are requiring the correct library from the correct location by asking the user to pass the actual item, rather than a string. Using a string is limiting and has a lot of edge cases that can cause bugs and confusing behavior (require path must be exactly correct within this library, local requires will not necessarily work, etc), whereas the option to pass in a parser directly is the opposite. If any maintainers also agree here, I would be happy to add a PR that eliminates the ability to pass a string and have it required internally, although this would be a breaking change for the next semver major update.. Would be great to get a patch release for this when you have a moment!. ",
    "kylemac": "the code in this PR's readme.md commit is also a real world code example, from a month ago\n. ",
    "wesleyboar": "Fixes #60 \n. ",
    "Strate": "Config (cut):\nconst autoprefixer = require(\"autoprefixer\")\nconst postcssModules = require(\"postcss-modules\")\nmodule.exports = {\n  // ....\n  module: {\n    // ....\n    loaders: [\n      test: /\\.css$/\n      loaders: [\n        \"style\",\n        \"postcss\"\n      ]\n    ]\n  },\n  postcss: function() {\n    return [autoprefixer, postcssModules]\n  }\n}\nGot an error like:\nLine 1: Unexpected token .\nYou may need an appropriate loader to handle this file type.\n| ._headerCard_12w42_1 {\n|   margin-bottom: 7px;\n|   display: table;\nSeems that it happens because postcss-loader with postcss-modules emits a json, not a commonjs module. How can it be fixed?\n. jsx\nconst style = require(\"./style.css\")\nreturn <div className={style.myClassName} />\nThis is standard way to do with css-loader?modules loader\n. Could you please remove this line in readme?\n\nor replace css-loader with postcss-modules plugin.\n\nBecause I can't just replace css-loader without complete rewriting all my code.\n. ",
    "unindented": ":+1: \nThanks for your input.\n. ",
    "burrack": "Would you avoid global variables?\nbecause I wouldn't want to duplicate my website colors and stuff for each component. ",
    "tmaximini": "Thanks, that worked!\n. ",
    "siemiatj": "Just for the record, I got the same error when using old postcss version with webpack 4 config.. ",
    "dacz": "@MoOx Thanks. I was trying to avoid imports for the reason that I need to explicitly import variables to all css modules that needs them (and most do, because I use variables as default padding, main color, etc.). Restart webpack is burden for me (bigger project, long time to restart), so I hoped that css loader may be instructed to reload when variables.js changes. No luck with this so I reverted to (more clear but more typing) import to every module that needs variables.\nWould be nice that postcss loader used with variables (when this func exists) has hot reloading made built in. I'd help but I'm new to webpack.\nThanks anyway!\n. ",
    "chibicode": "In case someone finds this helpful, postcss-simple-vars allows hot reloading of variables. \n. ",
    "franciscolourenco": "@michael-ciniawsky is it possible to watch variable files imported in postcss.config.js or do they need to be added as dependencies like @MoOx suggested and the cache invalidated?. ",
    "MartinMuzatko": "@ai Yes,  I just noticed that. I was looking for a guide how to use autoprefixer, as the old package is outdated for webpack (see https://github.com/passy/autoprefixer-loader)\nQuickly after taking a second look, I saw that this was just an example in this guide.. Thanks for clearing that up anyway :)\n. ",
    "binjospookie": "Try to use this:\n{\n        test: /\\.scss$/,\n        loader: ExtractTextPlugin.extract(\n          'css-loader?modules' +\n          '&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]' +\n          '!postcss-loader' +\n          '!sass'\n        ),\n      },'\n. ",
    "kevinSuttle": "@binjospookie Do you need to use ExtractTextPlugin to be able to specify a localIdentName if you're not using CSS Modules (only CSS Loader, Style Loader, PostCSS Loader?)\n. So, are the Webpack options for postcss or the postcss-plugins? e.g.\nWhat would the new syntax look like compared to the current? \njs\npostcss()\n  .use(smartImport({\n    path: [\"src/css\"],\n    transform: require(\"css-whitespace\")\n  }))\n  .process(cssString)\n  .then(function (result) {\n    var css = result.css\n  })\n. @Oopscurity Can you not use import ?\n. So it beta 25 the stable one now?\n. Following up on: https://github.com/postcss/postcss-loader/issues/99#issuecomment-248388686 \nBefore, there was this method:\n``` js\n// dependencies\nvar fs = require(\"fs\")\nvar postcss = require(\"postcss\")\nvar customProperties = require(\"postcss-custom-properties\")\n// css to be processed\nvar css = fs.readFileSync(\"input.css\", \"utf8\")\n// process css using postcss-custom-properties\nvar output = postcss()\n  .use(customProperties())\n  .process(css)\n  .css\n```\nbut now the API has changed. \nwebpack config\njs\nnew webpack.LoaderOptionsPlugin({\n        options: {\n          postcss: function (webpack) {\n            return [\n            importCSS({\n              addDependencyTo: webpack\n            }),\n              customProperties({\n                   preserve: true,\n                   appendVariables: true,\n              }),\n              cssApply,\n              autoprefixer,\n            ]\n          }\n        }\n      }),\nDirectory structure\n- webpack.config.js\n- /src/Buttons/Button.jsx \n  - (contains a require(./Buttons.css), \n  - which relies on the custom properties defined in ./src/Styles/Index.css\n  - which are imported from ./node_modules/ (\nYet I still get warnings the custom properties as used without fallbacks, unless I @import ./Styles/Index.css into every single component's css file (e.g. Buttons.css). \nThat solves one problem, but then introduces another:\nNow every single component has the imports inlined, bloating up the CSS.\nI've noticed that there are multiple style tags too, but I'm not sure why that's happening.\nI suppose it's because I'm not using Extract-Text. \nWith this new API, I'm not sure which file should be imported where and when, etc.\nI have a repo I can send privately if it helps. \n. I can, but I don't see a newer version than 0.13.0 (the one I have now)?\n. Er, I thought it worked with \"postcss\":\"postcss/postcss-loader\", but now I'm getting this:\nERROR in ./~/css-loader?{\"importLoaders\":1}!./~/postcss-loader?{}!./src/Tooltips/Tooltips.css\nModule build failed: Error: Cannot find module 'postcss-load-options/lib/loadOptions.js'\n    at Function.Module._resolveFilename (module.js:455:15)\n    at Function.Module._load (module.js:403:25)\n    at Module.require (module.js:483:17)\n    at require (internal/module.js:20:19)\n    at Object.<anonymous> (/Users/kevinSuttle/Code/ui-primitives-react/node_modules/postcss-load-config/index.js:9:19)\n    at Module._compile (module.js:556:32)\n    at Object.Module._extensions..js (module.js:565:10)\n    at Module.load (module.js:473:32)\n    at tryModuleLoad (module.js:432:12)\n    at Function.Module._load (module.js:424:3)\n    at Module.require (module.js:483:17)\n    at require (internal/module.js:20:19)\n    at Object.<anonymous> (/Users/kevinSuttle/Code/ui-primitives-react/node_modules/postcss-loader/index.js:2:19)\n    at Module._compile (module.js:556:32)\n    at Object.Module._extensions..js (module.js:565:10)\n    at Module.load (module.js:473:32)\n    at tryModuleLoad (module.js:432:12)\n    at Function.Module._load (module.js:424:3)\n    at Module.require (module.js:483:17)\n    at require (internal/module.js:20:19)\n    at loadLoader (/Users/kevinSuttle/Code/ui-primitives-react/node_modules/loader-runner/lib/loadLoader.js:13:17)\n    at iteratePitchingLoaders (/Users/kevinSuttle/Code/ui-primitives-react/node_modules/loader-runner/lib/LoaderRunner.js:164:2)\n    at iteratePitchingLoaders (/Users/kevinSuttle/Code/ui-primitives-react/node_modules/loader-runner/lib/LoaderRunner.js:160:10)\n    at /Users/kevinSuttle/Code/ui-primitives-react/node_modules/loader-runner/lib/LoaderRunner.js:168:18\n    at loadLoader (/Users/kevinSuttle/Code/ui-primitives-react/node_modules/loader-runner/lib/loadLoader.js:36:3)\n    at iteratePitchingLoaders (/Users/kevinSuttle/Code/ui-primitives-react/node_modules/loader-runner/lib/LoaderRunner.js:164:2)\n    at runLoaders (/Users/kevinSuttle/Code/ui-primitives-react/node_modules/loader-runner/lib/LoaderRunner.js:357:2)\n    at NormalModule.doBuild (/Users/kevinSuttle/Code/ui-primitives-react/node_modules/webpack/lib/NormalModule.js:131:2)\n    at NormalModule.build (/Users/kevinSuttle/Code/ui-primitives-react/node_modules/webpack/lib/NormalModule.js:179:15)\n    at Compilation.buildModule (/Users/kevinSuttle/Code/ui-primitives-react/node_modules/webpack/lib/Compilation.js:127:9)\n @ ./src/Tooltips/Tooltips.css 4:14-152\n @ ./src/Inputs/FormControl.js\n @ ./src/Selects/index.js\n @ ./src/index.js\n @ multi main\nMy config:\njs\nmodule.exports = {\n  entry: ['./src/'],\n  resolve: {\n    descriptionFiles: [\"package.json\"],\n  },\n  output: {\n    filename: 'ui-primitives-react.js',\n    path: path.resolve(__dirname, 'build'),\n    library: 'WatsonIoTUIPrimitives',\n    libraryTarget: 'commonjs2',\n  },\n  externals: nodeEnv === 'production' ? {\n    'react': 'var React',\n    'react-dom': 'var ReactDOM',\n  } : null,\n  module: {\n    rules: [{\n      test: /\\.js?$/,\n      loader: 'babel-loader',\n      exclude: /(node_modules|bower_components)/,\n    }, {\n      test: /\\.css$/,\n      use: [\n        'style-loader', {\n          loader: 'css-loader',\n          options: {\n            importLoaders: 1\n          }\n        }, {\n          loader: 'postcss-loader',\n          options: {\n            plugins: function () {\n              return [\n                require('postcss-import')(),\n                require('cssnext')({\n                  features: {\n                    customProperties: {\n                      preserve: true,\n                      appendVariables: true\n                    }\n                  }\n                }),\n                postCSSPrefix(CssClassPrefix, {\n                  ignore: [/react-autosuggest/]\n                }),\n              ];\n            }\n          }\n        }\n      ]\n    }]\n  },\n. ah, seems like they're on it. \nhttps://github.com/webpack/extract-text-webpack-plugin/issues/265\n. ",
    "danielhusar": "Thanks!\n. ",
    "export-mike": "sure! see: https://github.com/postcss/postcss-devtools/issues/17\n. ",
    "lvauvillier": "The stacktrace is too long to post here as it contains the full sass processed bootstrap code.\nHere is the another version with the beginning : \n```\n\ntestproject@1.0.0 build /Users/me/Documents/workspace/node/testproject\nenv NODE_ENV=production babel-node ./node_modules/.bin/webpack --config webpack.config.js\n\nHash: 291bfa15d557c3739953\nVersion: webpack 1.13.1\nTime: 1099ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  10.3 kB       0  [emitted]  main\n    + 4 hidden modules\nERROR in ./~/css-loader!./~/postcss/lib/postcss.js!./~/sass-loader!./vendor/bootstrap/scss/bootstrap.scss\nModule build failed: Error: /!\n * Bootstrap v4.0.0-alpha.2 (http://getbootstrap.com)\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n /\n/! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css /\nhtml {\n  font-family: sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%; }\nbody {\n  margin: 0; }\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block; }\n... [trunkated css code]\n.visible-print-block {\n      display: none !important; }\n      @media print {\n        .visible-print-block {\n          display: block !important; } }\n.visible-print-inline {\n  display: none !important; }\n  @media print {\n    .visible-print-inline {\n      display: inline !important; } }\n\n.visible-print-inline-block {\n  display: none !important; }\n  @media print {\n    .visible-print-inline-block {\n      display: inline-block !important; } }\n\n@media print {\n  .hidden-print {\n    display: none !important; } }\n is not a PostCSS plugin\n    at Processor.normalize (/Users/me/Documents/workspace/node/testproject/node_modules/postcss/lib/processor.js:60:23)\n    at new Processor (/Users/me/Documents/workspace/node/testproject/node_modules/postcss/lib/processor.js:23:29)\n    at Object.postcss (/Users/me/Documents/workspace/node/testproject/node_modules/postcss/lib/postcss.js:55:12)\n\n```\n. ",
    "rmurphey": "I am running into a similar issue; I spent some time trying to create a reduced test case but didn't have any luck. I think this is due to some bad combination of webpack, Babel, postcss, postcss-loader, and maybe some other things that I haven't tracked down yet. Right now I'm only able to repro this when npm link-ing to a local version of a dependency; loading the same (private) dependency from a git URL works fine. I will do my best to get you more details as I find them, but in the meantime I wanted to share a fuller stack trace in case it's helpful. \nModuleBuildError: Module build failed: Error: .sg-Body,.sg-Heading1,.sg-Heading2,.sg-Heading3,.sg-Heading4,.sg-Heading5,.sg-Heading6,a,fieldset,h1,h2,h3,h4,h5,h6,html,ol,p,ul{margin:0;padding:0;font:inherit;box-sizing:border-box;vertical-align:baseline}fieldset{border:none}html{font-family:Helvetica Neue,Helvetica,Arial,Lucida Grande,sans-serif;font-size:100%}h1,h2,h3,h4,h5,h6{font-size:1rem;font-weight:400}ol,ul{padding-left:2rem;margin:1rem 0}.sg-Heading1{font-weight:700}.sg-Heading1,.sg-Heading2{margin-bottom:1.2em;font-size:1.4375rem}.sg-Heading2{font-weight:400}.sg-Heading3{font-size:1.125rem}.sg-Heading3,.sg-Heading4{margin-bottom:1.2em;font-weight:700}.sg-Heading4{font-size:1rem}.sg-Heading5{font-size:1rem}.sg-Heading5,.sg-Heading6{margin-bottom:1.2em;font-weight:400}.sg-Body,.sg-Heading6,p{font-size:.875rem}.sg-Body,p{margin-bottom:1em;line-height:1.5em;color:#000}.sg-Body--lg,p--lg{font-size:.9375rem}.sg-Body--sm,p--sm{font-size:.8125rem}.sg-Body--xs,p--xs{font-size:.6875rem}.sg-Body--secondary,p--secondary{color:#6f6f6f}.sg-Body--tertiary,p--tertiary{color:#999}a{text-decoration:none}a:hover{text-decoration:underline}.sg-TextLink--primary,a{color:#00c}.sg-TextLink--secondary{color:#77c}.sg-u-listUnstyled{margin-left:0;padding-left:0;list-style:none}\n/*# sourceMappingURL=Typography.css.map*/ is not a PostCSS plugin\n    at Processor.normalize (/Users/rebeccam/indeed/frontend/components-react/node_modules/postcss/lib/processor.js:60:23)\n    at new Processor (/Users/rebeccam/indeed/frontend/components-react/node_modules/postcss/lib/processor.js:23:29)\n    at Object.postcss (/Users/rebeccam/indeed/frontend/components-react/node_modules/postcss/lib/postcss.js:55:12)\n    at DependenciesBlock.onModuleBuildFailed (/Users/rebeccam/indeed/frontend/prototype/node_modules/webpack-core/lib/NormalModuleMixin.js:315:19)\n    at nextLoader (/Users/rebeccam/indeed/frontend/prototype/node_modules/webpack-core/lib/NormalModuleMixin.js:270:31)\n    at /Users/rebeccam/indeed/frontend/prototype/node_modules/webpack-core/lib/NormalModuleMixin.js:292:15\n    at runSyncOrAsync (/Users/rebeccam/indeed/frontend/prototype/node_modules/webpack-core/lib/NormalModuleMixin.js:173:4)\n    at nextLoader (/Users/rebeccam/indeed/frontend/prototype/node_modules/webpack-core/lib/NormalModuleMixin.js:290:3)\n    at /Users/rebeccam/indeed/frontend/prototype/node_modules/webpack-core/lib/NormalModuleMixin.js:259:5\n    at Storage.finished (/Users/rebeccam/indeed/frontend/prototype/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:38:16)\n    at /Users/rebeccam/indeed/frontend/prototype/node_modules/graceful-fs/graceful-fs.js:78:16\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:380:3)\n. OK; I feel like I've eliminated any potential dependency conflicts, and what I'm seeing now is this:\n- Module1 has a dependency on Module2.\n- Module2 has a dependency on Module3; specifically, JS files in Module2 require CSS from Module3: require('Module3/css/foo.css'). Webpack is set up to run /\\.css$/ requires through a style!css!postcss loader. \n- When Module1 installs Module2 normally -- that is, by running npm install to process a package.json file that points to Module2 using a git URL -- then everything works as expected.\n- When, instead, Module1 uses npm link to link to a local version of Module2 for development purposes, I see the error above when processing a JS file from Module2 that requires a CSS file from Module3.\nI'm sharing this not because it makes any sense to me, but in the hopes maybe it will trigger a light bulb for someone else. \n. I think for me what was happening was webpack was looking for the postcss-loader module but, due to how webpack does loader resolution, it was finding the regular postcss module and trying to use it instead. When I installed the postcss-loader module in Module2, the problem went away. Given that Module2 doesn't itself need postcss-loader, this is a bummer, but doesn't really have anything to do with postcss-loader itself. This seems to be an issue with how webpack does loader resolution when it comes to linked modules. \nI think none of this was happening in the \"normal\" installation case because webpack was properly finding the postcss-loader module. I'm using NPM3; I can imagine that if a project was using NPM2, it could possibly run into this situation even in the normal installation case, but I'm not sure.\n. ",
    "tackley": "Just for others who came here with this problem from google like I did. It's exactly as @rmurphey says, although I had a much simpler problem: I had postcss installed, but not postcss-loader, and so webpack located postcss itself as a webpack loader, generating this error.\nTo fix: npm install --save-dev postcss-loader\n. ",
    "matthax": "@tackley I love you\n. ",
    "datatypevoid": "@tackley me too!\n. ",
    "AbsoluteStratos": "@tackley papa bless\n. ",
    "duxiaofeng-github": "@tackley thanks for saving my life\n. ",
    "zhangfaliang": "@tackley hahha thanks for save my life\n. ",
    "dimafeldman": "Thanks @tackley \n. ",
    "Damaotimlin": "@tackley Love you too!\n. ",
    "flyg101": "Thanks @tackley && @michael-ciniawsky Saved me a whole day of googling!. ",
    "arddor": "Yes, the css modules work and the elements are styled, however there are just no PostCss transformations done. When I then try to use syntax from precss (e.g. mixins, variables, ...) nothing is in the resulting css. If I put the precss stuff before existing \"normal\" css then some of it also no longer works.\n. Short trivia to the css: I'm trying to make some styled buttons with React and PostCss. I figured I could use precss mixins to minimize the repetition. The css, how it is now works, but if you add for example a variable (e.g. $blue: #056ef0;) before .default the result will be that all the styling from .default is no longer applied while the color from .primary is still there. The reason that this works is because of the browser support for the variables (--primary-color).\n```\n@import url('../../styles/variables.css');\n/ $blue: #056ef0; /\n.default{\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin: 4px 2px;\n    cursor: pointer;\n}\n.primary{\n    composes: default;\n    background-color: var(--primary-color);\n}\n.success{\n    composes: default;\n    background-color: var(--success-color);\n}\n.info{\n    composes: default;\n    background-color: var(--info-color);\n}\n.warning{\n    composes: default;\n    background-color: var(--warning-color);\n}\n.danger{\n    composes: default;\n    background-color: var(--danger-color);\n}\n```\n. ",
    "pke": "@ai Sure, just copied what I found in the readme, as written above.\nresolve: {\n    extensions: [\"\", \".js\", \".jsx\"],\n    root: [\n      path.join(process.cwd(), \"src\"),\n    ],\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.jsx?$/,\n        loader: \"style-loader!css-loader!postcss-loader?parser=postcss-js!babel\",\n        exclude: /node_modules/,\n        include: src,\n      },\n      {\n        test: /\\.json$/,\n        loader: \"json\",\n      },\n    ],\n  },\n. well it works when I remove all the css loader stuff and just leave:\nloader: babel\nSo, the webpack setup seems correct.\n. So with this config:\npostcss: [\n    autoprefixer({ browsers: [\"last 2 versions\"] }),\n  ],\n  module: {\n    loaders: [\n      {\n        test: /\\.jsx?$/,\n        loader: \"postcss-loader?parser=postcss-js!babel\",\n        exclude: /node_modules/,\n        include: src,\n      },\n      {\n        test: /\\.json$/,\n        loader: \"json\",\n      },\n    ],\n  },\nthe actual console output is:\nERROR in ./src/index.js\nModule build failed: Error: Cannot find module 'api/api'\n    at Function.Module._resolveFilename (module.js:440:15)\n    at Function.Module._load (module.js:388:25)\n    at Module.require (module.js:468:17)\n    at require (internal/module.js:20:19)\n    at Object.<anonymous> \\app\\src\\index.js:15:12)\n    at Module._compile (module.js:541:32)\n    at Object.loaderContext.exec (\\app\\node_modules\\webpack-core\\lib\\NormalModuleMixin.js:88:7)\n    at Object.module.exports (\\app\\node_modules\\postcss-loader\\index.js:59:23)\nseems like postcss-loader is not running in the correct webpack context which specifies where to find modules\n. There are no style files. All styles are inline, in the .js* files. There is no style in index.js, the entry file that contains the import to api/api. As written, when I leave out postcss-loader as a loader, the config works just fine.\n. So there is no solution out there to use webpack to transform all occurrences of inline styles like those?\n``` es6\nconst STYLE = {\n  display: \"flex\"\n}\nconst Component = () => (\n  \n)\nconst OtherComponent = () => (\n  \n)\n```\n. I checked your 2 solutions. Both are not doing what I hoped they would. Both require code changes, that would be massive in our code base.\nMaybe I need to read up on how babel transform plugins work and do this wherever a style prop is used replace it with a call toprefixer(style)`.\n. ",
    "hankthewhale": "when I log source and this on this line, I get the following,\nsource\n``` css\n/ a component styling /\n.common {\n  composes: flex spaced v-centered from \"../shared/flex-layout.css\";\n  composes: padded from \"../shared/layout.css\";\n  composes: dark-bg light-text from \"../shared/colors.css\";\n  composes: main-font-family from \"../shared/typography.css\";\n}\n.greeting {\n  composes: massive-font from \"../shared/typography.css\";\n}\n.message {\n  composes: large-font from \"../shared/typography.css\";\n}\n/ flex-layout styling /\n.spaced {\n  justify-content: space-between;\n}\n.v-centered {\n  align-items: center;\n}\n```\nThis all looks correct. All of these styles actually load and do the things they should... just no prefixed vendor names.\nthis\njs\n// For each source, I get the following result for `this`\n{ data: undefined,\n  inputValue: undefined,\n  query: '',\n  async: [Function: async],\n  callback: [Function] \n}\nI'm guessing the undefined data, inputValue, and empty string query are where the problem is. \n. Sure thing. The output is:\ncss\na {\n  display: flex;\n}\nMy previously logged this is still the same result as before.\n. I do not. I wasn't sure if that was required. Many tutorials/demos I've seen do not pass in a browserlist config. That said, I did try it at some point and it still didn't work.\n. I put a console.log within module.exports = postcss.plugin('autoprefixer', function() { }); and it fired so it appears that it is in fact calling it.\nSo it seems that postcss-loader is doing its job but autoprefixer is failing? Precss is also failing then. \n. Here's the output of result.css\n``` css\n.root {\n  composes: flex spaced v-centered from \"../shared/flex-layout.css\";\n  composes: padded from \"../shared/layout.css\";\n  composes: dark-bg light-text from \"../shared/colors.css\";\n  composes: main-font-family from \"../shared/typography.css\";\n}\n.greeting {\n  composes: massive-font from \"../shared/typography.css\";\n}\n.message {\n  composes: large-font from \"../shared/typography.css\";\n}\na {\n  display: flex;\n}\n.flex {\n  display: flex;\n}\n.spaced {\n  justify-content: space-between;\n}\n.v-centered {\n  align-items: center;\n}\n.flex {\n  display: flex;\n}\n.spaced {\n  justify-content: space-between;\n}\n.v-centered {\n  align-items: center;\n}\n.padded {\n  padding: 1rem;\n}\n.padded-major {\n  padding: 5rem;\n}\n.padded {\n  padding: 1rem;\n}\n.padded-major {\n  padding: 5rem;\n}\n.dark-bg {\n  background: #212121;\n}\n.light-text {\n  color: #efefef;\n}\n.dark-bg {\n  background: #212121;\n}\n.light-text {\n  color: #efefef;\n}\n.main-font-family {\n  font-family: helvetica, arial, sans-serif;\n}\n.large-font {\n  font-size: 2rem;\n}\n.massive-font {\n  font-size: 7rem;\n}\n.main-font-family {\n  font-family: helvetica, arial, sans-serif;\n}\n.large-font {\n  font-size: 2rem;\n}\n.massive-font {\n  font-size: 7rem;\n}\n``\n. Forgive me but just for clarification, are you saying that we're sure that it's a problem with autoprefixer?\n. The output fromresult.css`\ncss\na {\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n}\n. Well this is just embarrassing. Good catch and sorry for pestering you! \n. ",
    "tysonnero": "@ai My apologies... stylelint became a low priority on the project I was working on, so this was the first time I've looked again at this ticket. \nTo note, I totally removed postcss-reporter, and was still seeing duplicate warnings in the console. I've since switched to a webpack plugin called stylelint-webpack-plugin, and duplicate warnings/errors went away.\nI'll see if I can create a demo project to replicate when time permits. Thanks!\n. @ai I've put a project together that's experiencing the issue: https://github.com/tysonnero/react-webpack-postcss-loader. Just clone it, run npm install, then npm run build or npm run watch. \nThere is one error in the SCSS. You should see two duplicate errors reported in the console. You can remove postcss-reporter or autoprefixer from webpack, and the problem will persist.\nThanks!\n. @ai \nYes, those duplicate warnings.  Do you know why they're displaying double?\n. @ai Thanks for checking on that. I removed postcss-reporter and autoprefixr from the webpack.config and pushed the changes: https://github.com/tysonnero/react-webpack-postcss-loader/commit/934144176cb82958b749b9bfea2ec883e6f3434c.\nI am still seeing duplicate warnings in the console. Any thoughts? I'd like to keep the linter in webpack for both JS and CSS for my company's build process. We actually have things we want to fail the build per the whole team\n. @ai The bottom half is reporting the \"font-color: #00000;\" warning/error twice. That was the same duplicate warning/error when I had the reporter in.\n. ",
    "m-sureshraj": "@ai @tysonnero \nVery late comment, Hope maybe useful to someone.\nSetting { allChunks: true } option in ExtractTextPlugin solve the issue for me.\nFYI: https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/217\n. ",
    "folmert": "v0.10.26\nAfter running npm update the output's still the same, so I assume it's the newest version...?\nInstalling: npm install es6-promise helped me to get rid of this error.\nBut I still don't get it how it works.\n\nNow your CSS files requirements will be processed by selected PostCSS plugins:\nvar css = require('./file.css');\n\nWhere I put this var css and what does it do?\nIf I put it in one of my .js files where exactly this file.css will be appended?\nEdit: nvm, I see it now at the end of the <head>\n. > found that using an object worked instead of a function with require for the plugins in it. \nWhere have you put this config? For me similar syntax in postcsss.config.js doesn't work:\nmodule.exports = {\n    plugins: {\n        'postcss-precss':  {},\n        'postcss-cssnext': {}\n    }\n};\nit returns:\nError: Cannot find module 'postcss-precss'\n(...)\nTypeError: Cannot read property 'default' of undefined. I have Webpack 2.1.0-beta.27 and postcss-precss 1.4.0.\nBut the error is gone once I've installed postcss-load-plugins (using the Array syntax with require()).. Confirmed: postcss-load-plugins does the job. But I'm still a bit confused - I ended up with 3 very similar modules:\n\npostcss-load-plugins\npostcss-load-options\npostcss-load-config\n\nAny reason now to keep last two?. ",
    "badtant": "I'm not sure what you mean :)\nFirst you point me to css-loader and then to autoprefixer?\nAnd yes, thats just a test config with the last 10 browsers so that I can see if it's working or not.\n. Ahh, now I see. Thanks!\n. @donpinkus right now:\nextractTextInstance.extract('style-loader', ['css-loader?-autoprefixer', 'postcss-loader')\n. I'm using 2.0.1 and still get the error\n{\n    test: /\\.scss$/,\n    use: [\n        {\n            loader: 'style-loader'\n        },\n        {\n            loader: 'css-loader',\n            options: {\n                sourceMap: true\n            }\n        },\n        {\n            loader: 'postcss-loader',\n            options: {\n                plugins: [autoprefixer]\n            }\n        },\n        {\n            loader: 'sass-loader',\n            options: {\n                sourceMap: true,\n                precision: 8\n            }\n        }\n    ]\n}\nIt works when I remove sourceMap from sass-loader. I would say so. ",
    "JounQin": "@badtant You should disable the Minification option of css-loader with css?-minimize.\nminification\n. ",
    "donpinkus": "@badtant - would love to see an example of your final working config\n. Basically it sounds like you're saying \"Don't put _ in plugin options in the webpack config. Instead do ______.\" \nIf you want, just give a \"bad\" example of a config and a \"good\" example of a config.  People will copy paste the good one, so be sure it works or that you've given instructions on all the steps needed to get it to work :)\nThanks for putting time into the docs! It makes a big difference when people try to use it.\n. ",
    "hugojing": "Thanks @JounQin and @badtant ! Both works!\njs\n    loader: ExtractTextPlugin.extract(\n      'style-loader',\n      'css-loader?-autoprefixer!postcss-loader'\n    )\nor\njs\n    loader: ExtractTextPlugin.extract(\n      'style-loader',\n      'css-loader?-minimize!postcss-loader'\n    )\n. ",
    "szykov": "Tried everything but still nothing. :\nmodule: {\n        rules: [\n            {\n                test: /\\.css$/,\n                exclude: path.join(__dirname, '/angular2App/app/'),\n                use: ExtractTextPlugin.extract({\n                    fallback: ['style-loader'],\n                    use: ['css-loader?-autoprefixer&sourceMap=true&importLoaders=1', 'postcss-loader']\n                })\n            },\n       ...\n      ]\npostcss.config.js\nmodule.exports = {\n  plugins: [\n    require('autoprefixer')\n  ]\n}\npackage.json\n\"browserslist\": [\n    \"> 1%\",\n    \"last 2 versions\"\n  ],\nNo change, it doesn't add prefixes....\n. @michael-ciniawsky it worked, thanks. :+1: . ",
    "cordoval": "@michael-ciniawsky is there a way to disappear that postcss.config.js and push it into the webpack.config.js file? sorry to abuse you on this one \ud83d\udc74 . \ud83d\udc4d . ",
    "rouberg": "I find the real reason of no prefix, it's not the problem of extract-text-webpack-plugin. when build we use optimize-css-assets-webpack-plugin normally, optimize-css-assets-webpack-plugin use cssnano as default processor, and cssnano removed all prefix, so autoprefixer seemed  not work in production.\nwe can config like this:\njavascript\nnew OptimizeCssAssetsPlugin({\n    cssProcessorOptions: {\n      safe: true,\n      autoprefixer: { disable: true },\n      discardComments: {\n        removeAll: true\n      }\n    }\n  });\nthe option of autoprefixer: { disable: true }will disable cssnano's autoprefixer and saved prefixer that already exist by ourselves.\nalso see the issue optimize-css-assets-webpack-plugin/issues/51\nmaybe some brother need this so I copy and attach this although this issue closed a long time ago.\n. ",
    "BorelTung": "maybe related to issue#53\n. @ai sorry for long long delay\nI've found out what's wrong.\nEmpty path will cause this error. So I did some workaround:\n@mixin icon($width, $height, $img, $imgActive) {\n  width: $width;\n  height: $height;\n  display: inline-block;\n  vertical-align: middle;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-image: url($img);\n  @if $imgActive {\n    &:hover {\n      background-image: url($imgActive);\n    }\n  }\n}\n.iconLogo {\n  @include icon(224px, 13px, '../assets/icon-logo.png', null);\n}\nAlso, I print file, it's quite normal. It's the absolute path of the HeaderView.scss.\n. ",
    "asnowwolf": "Ok!\nplease publish a new version as soon as possible ^_^\n. https://github.com/angular/angular/pull/10724\nI've submitted a PR to angular team too, I hope angular will have perfect supporting for source map when it's released.\n. ",
    "7rulnik": "Here you use this.exec but happypack can't support it.\nUPD: oh, I was wrong. You use exec only for postcss-js parser.\nSorry T____T\n. ",
    "andreypopp": "Hey @ai, I'd be glad to make a PR to PostCSS core but this PR is specific to webpack as it doesn't render filename of the file errors happened into (something you don't want to miss in general case). \nI'd suggest taking this PR here and then I'd make PostCSS reuse babel-code-frame for source code formatting.\n. Thanks @ai!\nOn Wed, 17 Aug 2016 at 18:07, Andrey Sitnik notifications@github.com\nwrote:\n\nMerged #87 https://github.com/postcss/postcss-loader/pull/87.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/postcss/postcss-loader/pull/87#event-758630577, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAB3glJy-e-W1m1UYRrFaeKAUsR-UyC7ks5qgyPIgaJpZM4JkjIx\n.\n. \n",
    "ertrzyiks": "any progress on that? \nIf I understand correctly by reading this thread it will enable object based config instead of an array, right?\n. @ai yeah, I would like to help. I need that change to use postcss-loader with happypack (see corresponding thread)\n. Awesome! Please keep in mind that I've just started and submitted PR already because it will not be one liner and any tip on this stage can prevent a headache later on :) \n. 1. In the middle of work my gulp process was dying without any notice. It was fine when I commented out that part. It may even work right now, a lot of code changed since then. I will check it today.\n2. Ok, I will revert all unrelated changes there, will leave only a new dependency entry.\nFrom what I see it may be tricky to support pack feature when config loader is used. Are you ok with having it only for the current behavior? \n. @ai I think it's done more or less. I've tried to utilize postcss-load-config better, but ended up using it only when there is no explicit postcss config for webpack. \nI've added more tests and they require separate configs, so we have multiple gulp tasks generated per each config scenario.\nWhat do you think about it?\n. I don't think so we can cover addDependecyTo in the current version of this config, we have no access to that webpack reference when defining configuration. Even with webpack 1 we can not support pack feature, so I would see load-config solution as a secondary right now.\n. @ai we could do this but by breaking the whole idea of having config object with primitive values (as it requires a config value being a function). \nMaybe @michael-ciniawsky can come up with some idea. I'm wondering if it would be possible to feed postcss with webpack instance and use internal pub-sub communication (if any) between postcss and plugins to propagate it.\n. @ai no worries, it's not any urgent to me and secret open source sounds like a perfect excuse!\n. @jantimon it is unavailable if you use happypack. I don't know details behind missing _compilation, I can only guess that it was difficult to parallelize it in a reliable way. Maybe @amireh could jump in and share some thoughts.\nHaving the guard condition enable people to use postcss-loader with happypack. On the other hand, the warning in the else block is just for information and can be removed.. ",
    "soluml": "Thanks for your prompt reply!\nThe CSS Modules bit is working fine, it's the postcss-loader passing the values to css-loader that I'm having issues with.  It's possible that what I'm trying to do won't work, but the aforementioned readme gives me hope.. it just doesn't look like importLoaders does anything with postcss-loader. \n. Yea, that's what I've done.  I'm trying to use both postcss-modules and css-loader modules and I'm trying to pass in my postcss-modules stuff into css-loader.  css-loader treats the postcss-modules class as the original, which makes it impossible to use together.\n. That's too bad, I kinda figured as much.  css-loader injects the modules into the JS how I want but has limited class name customizations.  CSS Modules has a function that let's you do whatever you want with the class names, but has no way to pass that into the JS like css-loader does.\nThanks!\n. I'm seeing the same warning in v2.1.0-beta.27 but only when style-loader is in my chain.\nI also noticed that if I set plugins: to [] instead of () => []  everything works as expected without style-loader, but completely blows up the build when style-loader is in the chain and I get a more cryptic warning:\nModule build failed: TypeError: Cannot read property 'postcss' of null\nWhich is weird, because I'd expect it to fail regardless of whether or not style-loader is in the chain.. ",
    "amcdnl": "Already done ;)\n. ```\n// style-loader: Adds some css to the DOM by adding a ",
    "lavezzi1": "No docs, it's webpack you know. Anyway I found this, take a look please at loaders section https://gist.github.com/sokra/27b24881210b56bbaff7\n. @jantimon I use extract-text-webpack-plugin@^2.0.0-beta\n. @ai in my package.json I have \"postcss-loader\": \"^0.13.0\", \"webpack\": \"^2.1.0-beta.19\"\nSo you wanna say that currently postcss doesn't support webpack 2?\n. @ai Its pleasure to help! So I changed version of \"postcss-loader\": \"postcss/postcss-loader\" but in my case it still doesnt works. Is my config correct?\n. I created. Got a lot of errors, example: \n```\nERROR in /code/webpack2/ss2/node_modules/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!/code/webpack2/ss2/node_modules/vue-style-loader/index.js!/code/webpack2/ss2/node_modules/css-loader/index.js!/code/webpack2/ss2/node_modules/postcss-loader/index.js!/code/webpack2/ss2/node_modules/vue-loader/lib/style-rewriter.js!/code/webpack2/ss2/source/blocks/smart-table/smart-table-icon-has-status/style.css doesn't export content\nERROR in ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader!./~/postcss-loader!./~/vue-loader/lib/style-rewriter.js!./source/blocks/smart-table/smart-table-icon-title-caption/style.css\nModule build failed: (SystemJS) ENOENT: no such file or directory, open '/code/webpack2/ss2/loader-utils'\n    Error: ENOENT: no such file or directory, open '/code/webpack2/ss2/loader-utils'\n        at Error (native)\n    Error loading /code/webpack2/ss2/loader-utils as \"loader-utils\" from /code/webpack2/ss2/node_modules/extract-text-webpack-plugin/loader.js\nERROR in /code/webpack2/ss2/node_modules/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!/code/webpack2/ss2/node_modules/vue-style-loader/index.js!/code/webpack2/ss2/node_modules/css-loader/index.js!/code/webpack2/ss2/node_modules/postcss-loader/index.js!/code/webpack2/ss2/node_modules/vue-loader/lib/style-rewriter.js!/code/webpack2/ss2/source/blocks/table-icon-title-caption/style.css doesn't export content\n```\n. @ai webpack.config.js \u2013 https://gist.github.com/lavezzi1/089d4f561ba7604a1387de971878b3df\npostcss.config.js https://gist.github.com/lavezzi1/f706711ad47813b5bff2ab6365b6c0aa\n. @ai oh my bad, I removed but still errors. And changed syntax. \n. @ai Take a look at this error:\nERROR in ./source/blocks/wizard-blocks/plan/style.css\nModule build failed: (SystemJS) ENOENT: no such file or directory, open '/code/webpack2/ss2/loader-utils'\n    Error: ENOENT: no such file or directory, open '/code/webpack2/ss2/loader-utils'\n        at Error (native)\n    Error loading /code/webpack2/ss2/loader-utils as \"loader-utils\" from /code/webpack2/ss2/node_modules/extract-text-webpack-plugin/loader.js\nWhy it imports from projects root directory instead of node_modules. \n. @ai I downgraded to postcss-import 8.0.2 and got another errors:\nhttps://github.com/babel/babel-loader/issues/242\nERROR in ./~/css-loader!./~/postcss-loader!./~/vue-loader/lib/style-rewriter.js!./source/blocks/tooltip-trigger/style.css\n    Module build failed: Error: Cannot find module '0'\n        at Function.Module._resolveFilename (module.js:440:15)\n        at Function.Module._load (module.js:388:25)\n        at Module.require (module.js:468:17)\n        at require (internal/module.js:20:19)\n        at load (/code/webpack2/ss2/node_modules/postcss-load-plugins/lib/loadPlugins.js:21:50)\n        at /code/webpack2/ss2/node_modules/postcss-load-plugins/lib/loadPlugins.js:27:18\n        at Array.forEach (native)\n        at loadPlugins (/code/webpack2/ss2/node_modules/postcss-load-plugins/lib/loadPlugins.js:26:24)\n        at /code/webpack2/ss2/node_modules/postcss-load-config/index.js:19:18\n. What is module '0'\n. Additional errors:\n```\nChild extract-text-webpack-plugin:\nERROR in ./~/css-loader!./~/postcss-loader!./~/vue-loader/lib/style-rewriter.js!./source/blocks/logo-spinner/style.css\nModule build failed: TypeError: Cannot read property 'config' of undefined\n    at /code/webpack2/ss2/node_modules/postcss-load-config/index.js:19:36\n\n\n....\nSyntaxError: Unexpected token :\n    at Object.exports.runInThisContext (vm.js:76:16)\n    at Module._compile (module.js:513:28)\n    at requireFromString (/code/webpack2/ss2/node_modules/require-from-string/index.js:27:4)\n    at /code/webpack2/ss2/node_modules/cosmiconfig/lib/loadJs.js:20:15\n 63% building modules 867/966 modules 99 active ...urce/blocks/tooltip-trigger/style.css/code/webpack2/ss2/postcss.config.js:3\n        'postcss-import': false,\n                        ^\nSyntaxError: Unexpected token :\n    at Object.exports.runInThisContext (vm.js:76:16)\n    at Module._compile (module.js:513:28)\n    at requireFromString (/code/webpack2/ss2/node_modules/require-from-string/index.js:27:4)\n    at /code/webpack2/ss2/node_modules/cosmiconfig/lib/loadJs.js:20:15\n 63% building modules 868/966 modules 98 active ...urce/blocks/tooltip-trigger/style.css/code/webpack2/ss2/postcss.config.js:3\n        'postcss-import': false,\n....\n```\n. @ai nothing changes. The same errors. \n. @ai Black magician! Works! Big thanks.\n. ",
    "agileago": "same with me . \n. ",
    "soyuka": "Maybe this stack can help:\n```\nERROR in ./~/postcss-loader!./~/css-loader!./~/sass-loader?{\"includePaths\":[\"/home/abluchet/angular2-electron/~/foundation-sites/scss\"]}!./scss/app.scss\nModule build failed: Unknown word (1:1)\n\n1 | exports = module.exports = require(\"./../node_modules/css-loader/lib/css-base.js\")();\n    | ^\n  2 | // imports\n  3 |\n  4 |\n\n@ ./scss/app.scss 4:14-249\n @ ./src/app.js\nERROR in ./scss/app.scss\nModule build failed: ModuleBuildError: Module build failed: Unknown word (1:1)\n\n1 | exports = module.exports = require(\"./../node_modules/css-loader/lib/css-base.js\")();\n    | ^\n  2 | // imports\n  3 |\n  4 |\n\nat /home/abluchet/angular2-electron/node_modules/webpack/lib/NormalModule.js:137:35\nat /home/abluchet/angular2-electron/node_modules/loader-runner/lib/LoaderRunner.js:328:11\nat /home/abluchet/angular2-electron/node_modules/loader-runner/lib/LoaderRunner.js:201:18\nat context.callback (/home/abluchet/angular2-electron/node_modules/loader-runner/lib/LoaderRunner.js:87:13)\nat /home/abluchet/angular2-electron/node_modules/postcss-loader/index.js:105:17\n\nERROR in /home/abluchet/angular2-electron/node_modules/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!/home/abluchet/angular2-electron/node_modules/style-loader/index.js!/home/abluchet/angular2-electron/node_modules/postcss-loader/index.js!/home/abluchet/angular2-electron/node_modules/css-loader/index.js!/home/abluchet/angular2-electron/node_modules/sass-loader/index.js?{\"includePaths\":[\"/home/abluchet/angular2-electron/node_modules/foundation-sites/scss\"]}!/home/abluchet/angular2-electron/scss/app.scss doesn't export content\nChild extract-text-webpack-plugin:\n        + 1 hidden modules\nERROR in ./~/postcss-loader!./~/css-loader!./~/sass-loader?{\"includePaths\":[\"/home/abluchet/angular2-electron/~/foundation-sites/scss\"]}!./scss/app.scss\nModule build failed: Unknown word (1:1)\n\n> 1 | exports = module.exports = require(\"./../node_modules/css-loader/lib/css-base.js\")();\n    | ^\n  2 | // imports\n  3 |\n  4 |\n\n```\nLooks like the css loader exports javascript.\nLogging console.log(plugins, source) in this plugin shows:\n(master \u2717)\u276f ./node_modules/.bin/webpack\n[ { [Function]\n    options: { browsers: [Object] },\n    info: [Function],\n    postcssPlugin: 'autoprefixer',\n    postcssVersion: '5.2.0' } ] \n'exports = module.exports = require(\"./../node_modules/css-loader/lib/css-base.js\")();\\n// imports\\n\\n\\n// module\\nexports.push([module.id, \"/**\\\\n * Foundation for Sites by ZURB\\\\n * Version 6.2.3\\\\n * foundation.zurb.com\\\\n * Licensed under MIT Open Source\\\\n */\\\\n/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\\\\n/**\\\\\nI tried postcss-js but had font import path issue Module build failed: Error: Cannot find module '../font/xxx.eot?85062211'.\n. Are you using css loader?\nOn Thu, 8 Sep 2016 at 06:09, Eugene notifications@github.com wrote:\n\nFWIW, I'm using postcss-loader and webpack2 with no issues, but I don't\nhave sass-loader in the stack\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/postcss/postcss-loader/issues/92#issuecomment-245488461,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABQr80V0QhGtZHBtrN2ZK3HMAY1b_rr9ks5qn4qBgaJpZM4JpN_3\n.\n. Indeed, I'm trying this later and'll let you know thx!\n. \n",
    "eugene1g": "FWIW, I'm using postcss-loader and webpack2 with no issues, but I don't have sass-loader in the stack. I've had issues with combining the setup with other magic loader, like postcss-import etc.\n. Yep, and the config structure is the same:\nExtractTextPlugin.extract({ fallbackLoader: 'style-loader', loader: 'css-loader?sourceMap!postcss-loader'})\n. Ah I see the execution order is different - for me postcss runs first, css-loader second. Maybe that's causing an issue on your end if css-loader is producing JS, and later post-css loader is expecting css input?\n. ",
    "akrawchyk": "@eugene1g I'm having issues using webpack2 with postcss-import as well. My use case is with SUITCSS preprocessor, here's the stack trace:\nERROR in ./client/client.css\nModule build failed: TypeError: Path must be a string. Received { raws: { semicolon: true, after: '\\n' },\n  type: 'root',\n  nodes:\n   [ AtRule {\n       raws: [Object],\n       type: 'atrule',\n       name: 'import',\n       parent: [Object],\n       source: [Object],\n       params: '\\'suitcss\\'' } ],\n  source:\n   { input:\n      { css: '@import \\'suitcss\\';\\n',\n        file: '/Users/andrew/Developer/sc-comms/client/client.css' },\n     start: { line: 1, column: 1 } } }\n    at assertPath (path.js:7:11)\n    at Object.resolve (path.js:1148:7)\n    at AtImport (/Users/andrew/Developer/sc-comms/node_modules/postcss-import/index.js:19:23)\n    at creator (/Users/andrew/Developer/sc-comms/node_modules/postcss/lib/postcss.js:150:35)\n    at /Users/andrew/Developer/sc-comms/node_modules/postcss-easy-import/index.js:41:21\n    at creator (/Users/andrew/Developer/sc-comms/node_modules/postcss/lib/postcss.js:150:35)\n    at /Users/andrew/Developer/sc-comms/node_modules/suitcss-preprocessor/lib/index.js:69:23\n    at Array.map (native)\n    at preprocessor (/Users/andrew/Developer/sc-comms/node_modules/suitcss-preprocessor/lib/index.js:65:29)\n    at LazyResult.run (/Users/andrew/Developer/sc-comms/node_modules/postcss/lib/lazy-result.js:286:20)\n    at /Users/andrew/Developer/sc-comms/node_modules/postcss/lib/lazy-result.js:200:37\n    at LazyResult.asyncTick (/Users/andrew/Developer/sc-comms/node_modules/postcss/lib/lazy-result.js:214:15)\n    at processing.Promise.then._this2.processed (/Users/andrew/Developer/sc-comms/node_modules/postcss/lib/lazy-result.js:240:20)\n    at LazyResult.async (/Users/andrew/Developer/sc-comms/node_modules/postcss/lib/lazy-result.js:237:27)\n    at LazyResult.then (/Users/andrew/Developer/sc-comms/node_modules/postcss/lib/lazy-result.js:141:21)\n    at Object.module.exports (/Users/andrew/Developer/sc-comms/node_modules/postcss-loader/index.js:93:10)\n @ ./client/client.js 9:0-23\n. ",
    "panjiesw": "The loader configuration in webpack 2 itself has changed, which, i think, requires you to set the loader name without the query string.\nSo maybe you should change the config to this (untested):\njs\nExtractTextPlugin.extract({\n  fallbackLoader: \"style-loader\",\n  loader: [\n    { loader: 'css-loader', query: {sourceMap: true} },\n    { loader: 'postcss-loader' }\n  ]\n})\nI'm not so sure about the order, but you get the idea.\n. ",
    "rozzzly": "@panjiesw You've pretty much got it. Here's an excerpt from my webpack.config.js. Hopefully anyone else looking for how to get webpack@2 to play nice with postcss-loader will see this because I had to spend several hours crawling github seeing as webpack@2 is in beta there's no documentation. I have tested this, and at of the time I'm posting this, using the latest releases, it works, but may require some tweaking to fit into your setup.\n``` typescript\nconst filePath = require('./paths');\nconst webpack = require('webpack');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nmodule.exports = {\n    devtool: 'source-map',\n    resolve: {\n        modules: [ 'node_modules', filePaths.SRC ],\n        extensions: [ '.css', '.ts', '.tsx', '.js', '.jsx' ]\n    },\n    output: {\n        path: filePaths.DIST,\n        publicPath: '/',\n        filename: '[name].js'\n    },\n    module: {\n        loaders: [\n            // .... other loaders\n            {\n                test: /.css$/,\n                include: [ filePaths.src ],\n                loader: ExtractTextPlugin.extract({\n                    fallbackLoader: 'style-loader',\n                    loader: [\n                        { loader: 'css-loader', query: { modules: true, sourceMaps: true } },\n                        'postcss-loader'\n                    ]\n                })\n            }\n        ]\n    },\n    plugins: [ // https://github.com/webpack/webpack/issues/3018#issuecomment-248633498\n        new webpack.LoaderOptionsPlugin({\n            options: {\n                context: filePaths.root,\n                postcss: [ // <---- postcss configs go here under LoadOptionsPlugin({ options: { ??? } })\n                    require('postcss-cssnext'),\n                    require('lost')(),\n                    require('postcss-reporter')()\n                ]\n                // ...other configs that used to directly on modules.exports\n            }\n        }),\n        new ExtractTextPlugin({ filename: 'css/[name].css', disable: false, allChunks: true })\n    ]\n};\n```\n. ",
    "StevenIseki": "I am using the following setup for postcss-loader with webpack 2 \ud83d\udd3d\nThe important part is new webpack.LoaderOptionsPlugin({ options: { postcss: [ autoprefixer ] } }) in plugins and !postcss-loader in css-loader.\n```js\nconst webpack = require('webpack')\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst autoprefixer = require('autoprefixer')\nmodule.exports = {\n  entry: './index.js',\n  devtool: 'inline-source-map',\n  output: {\n    filename: 'bundle.js',\n    publicPath: ''\n  },\n  module: {\n    loaders: [\n      { \n        test: /.css$/, \n        loader: 'style-loader!css-loader?modules&importLoaders=1!postcss-loader' \n      },\n      { \n        test: /.js$/, exclude: /node_modules/, \n        loader: 'babel-loader?presets[]=es2015&presets[]=react&presets[]=stage-2' \n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({ title: 'Example', template: './index.html' }),\n    new webpack.LoaderOptionsPlugin({ options: { postcss: [ autoprefixer ] } })\n  ],\n}\n``\n. @michael-ciniawsky What is[...plugins]?\nI get the errorPostCSS Config could not be loaded. Please check your PostCSS Config` \nHere is my config...\n```\nconst webpack = require('webpack')\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst autoprefixer = require('autoprefixer')\nmodule.exports = {\n  entry: './index.js',\n  devtool: 'inline-source-map',\n  output: { filename: 'bundle.js', publicPath: '' },\n  module: {\n    rules: [\n      {\n        test: /.css$/,\n        use: [\n          'style-loader',\n          { loader: 'css-loader', options: { modules: true, importLoaders: 1 } },\n          { loader: 'postcss-loader', options: { plugins: () => [...plugins] } },\n        ]\n      },\n      {\n        test: /.js$/,\n        use: [ { loader: 'babel-loader', options: { presets: ['es2015', 'react', 'stage-2'] } } ],\n        exclude: /node_modules/,\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({ title: 'Example', template: './index.html' })\n  ],\n}\n``. @andykenward I am using just the 1 pluginautoprefixerIf I change it to{ loader: 'postcss-loader', options: { plugins: () => [autoprefixer] } },` it still doesn't work.. The repo I am testing this on is https://github.com/vacenz/last-draft \nHere is the webpack.config\nOnce I get the setup working I will port it over to my boilerplate projects as well \ne.g. react-webpack-example and react-router-redux-example, react-webpack-static-site-example. Thanks for the tip on localIdentName I missed that when converting to the newer syntax, and thanks for testing it out.\nUnfortunately we are back to the issue of using the no longer recommended webpack.LoaderOptionsPlugin \n@michael-ciniawsky suggested removing that and updating to: \n{ loader: 'postcss-loader', options: { plugins: () => [...plugins] } } \nThat doesn't work for me, and neither does: \n{ loader: 'postcss-loader', options: { plugins: () => [autoprefixer] } }. ",
    "yhaiovyi": "Absolutely the same here. ",
    "andykenward": "@StevenIseki if you aren't using any postcss plugins then just remove it to get it to work.\nuse: [\n          'style-loader',\n          { loader: 'css-loader', options: { modules: true, importLoaders: 1 } },\n          'postcss-loader'\n        ]\nFYI\nFor some reason I have to use query instead of options for a production build for me. using \"webpack\": \"2.1.0-beta.25\",\n. Just spent some time fixing this issue in my react boilerplate.\nCheck this commit\nI had to move my postcss plugins to a postcss.config.js. Also had to return an object in that file to get postcss-cssnext to work with browser settings.\nThen had a weird issue with a production build if I use options instead of query for my .css files.\n\"engines\": {\n    \"node\": \"6.9.1\",\n    \"npm\": \"3.10.8\"\n  },\n\"webpack\": \"2.1.0-beta.25\",\n\"css-loader\": \"0.26.1\",\n\"postcss\": \"5.2.6\",\n\"postcss-browser-reporter\": \"0.5.0\",\n\"postcss-cssnext\": \"2.9.0\",\n\"postcss-focus\": \"1.0.0\",\n\"postcss-load-config\": \"1.0.0\",\n\"postcss-loader\": \"1.2.1\",\n\"postcss-reporter\": \"3.0.0\",\n\"postcss-simple-vars\": \"3.0.0\",\n\"postcss-smart-import\": \"0.6.3\",. @StevenIseki do you have a repo i can look at?. @StevenIseki the latest commit https://github.com/vacenz/final-draft/commit/a0f1bb21fcdb60e2e052ad7af8d22ed9177628c3 worked for me. \nSaw it autoprefixing this css when i changed it to display: flex\nI suggest you add localIdentName: '[name]__[local]__[hash:base64:5] to the css-loader to make it easier to read the classnames while in development mode\n'style-loader',\n{ loader: 'css-loader', options: { modules: true,localIdentName: '[name]__[local]__[hash:base64:5]', importLoaders: 1 } },\n'postcss-loader',. @gazpachu dependant on what browsers you have defined. Add some older browsers and it should prefix as required. Been having the same issue and found that using an object worked instead of a function with require for the plugins in it. It was postcss-cssnext that was breaking when I tried to pass browser config to it for me.\n\"postcss\": \"5.2.6\",\n\"postcss-browser-reporter\": \"0.5.0\",\n\"postcss-cssnext\": \"2.9.0\",\n\"postcss-focus\": \"1.0.0\",\n\"postcss-load-config\": \"1.0.0\",\n\"postcss-loader\": \"1.2.1\",\n\"postcss-reporter\": \"3.0.0\",\n\"postcss-smart-import\": \"0.6.3\",\n\"webpack\": \"2.1.0-beta.25\",\nThis WORKS\nmodule.exports = {\n  plugins: {\n    'postcss-smart-import': {\n      path: path.join(process.cwd(), constants.APP),\n    },\n    'postcss-simple-vars': {\n      variables: () => require('../app/styles-vars'),\n      unknown: (node, name, result) => node.warn(result, 'Unknown CSS variable ', name),\n    },\n    'postcss-focus': {},\n    'postcss-cssnext': {\n      browsers: ['last 2 versions', 'IE > 11'],\n    },\n    'postcss-reporter': {\n      clearMessages: true,\n    },\n  },\n};\nThis did NOT work.\nTypeError: [object Object] must be a function, did you require() it ?\nmodule.exports = () => {\n  return {\n    plugins: [\n    require('postcss-smart-import')({\n      path: path.join(process.cwd(), constants.APP),\n    }),\n    require('postcss-simple-vars')({\n      variables: () => require('../app/styles-vars'),\n      unknown: (node, name, result) => node.warn(result, 'Unknown CSS variable ', name),\n    }),\n    require('postcss-cssnext')({\n      browsers: ['last 2 versions', 'IE > 11'],\n    }),\n    require('postcss-reporter')()\n  ]}\n};\nIt did work when I didn't pass anything to postcss-cssnext.\nmodule.exports = () => {\n  return {\n    plugins: [\n    require('postcss-smart-import')({\n      path: path.join(process.cwd(), constants.APP),\n    }),\n    require('postcss-simple-vars')({\n      variables: () => require('../app/styles-vars'), // eslint-disable-line global-require\n      unknown: (node, name, result) => node.warn(result, 'Unknown CSS variable ', name),\n    }),\n    require('postcss-cssnext')(),\n    require('postcss-reporter')()\n  ]}\n};\nI tried passing a function to postcss-cssnext that returned an object. But that didnt work for me.\nFYI This is my webpack loader config for css files\n'style-loader',\n    {\n      loader: 'css-loader',\n      options: {\n        modules: true,\n        localIdentName: '[name]__[local]__[hash:base64:5]',\n        sourceMaps: true,\n        importLoaders: 1,\n      },\n    },\n    {\n      loader: 'postcss-loader',\n      options: {\n        config: path.join(process.cwd(), 'internals/postcss.config.js'),\n      },\n    },. @folmert using webpack 2.1.0-beta.25\nHave you installed postcss-precss?\nnpm i -D -E postcss-precss\n. @azat-io css-mqpacker doesn't seem to support sorting separate .css files together. Is it suppose to?\nIt worked fine when I added the example to just one of your .css files.\nMight you have to run it on the Webpack CSS output afterwards?. ",
    "matteocng": "@StevenIseki that doesn't work for me too. This is the only way I managed to make it work using Css Modules, ExtractTextPlugin and the Autoprefixer plugin.\npostcss.config.js\njs\nmodule.exports = {\n  plugins: {\n    autoprefixer: {\n      browsers: ['last 2 versions']\n    },\n  },\n};\nwebpack.config.js\n```js\nimport webpack from 'webpack'\nimport HtmlWebpackPlugin from 'html-webpack-plugin'\nimport ExtractTextPlugin from 'extract-text-webpack-plugin'\nimport autoprefixer from 'autoprefixer'\n...\nconst CSS_REGEX = /.css$|.scss$/\nconst config = options => {\n  return {\n    ...\n    plugins:[\n      new ExtractTextPlugin('bundle.css'),\n      ...\n    ],\n    module: {\n      rules: [\n        {\n          test: CSS_REGEX,\n          loader: ExtractTextPlugin.extract({\n            fallbackLoader: \"style-loader\",\n            loader: [\n              { loader: 'css-loader', query: { modules: true, importLoaders: 2, localIdentName: '[name][local][hash:base64:5]' } },\n              { loader: 'postcss-loader' },\n              { loader: 'sass-loader', options: {} }\n            ]\n          }),\n        },\n        ...\n      ]\n    }\n  }\n}\nexport default config\n```\npackage.json\njs\n...\n\"webpack\": \"^2.2.0-rc.1\",\n\"webpack-dev-server\": \"^2.2.0-rc.0\"\n\"extract-text-webpack-plugin\": \"^2.0.0-beta.4\",\n\"css-loader\": \"^0.26.1\",\n\"postcss-loader\": \"^1.2.1\",\n\"sass-loader\": \"^4.1.0\",\n\"style-loader\": \"^0.13.1\",\n\"css-loader\": \"^0.26.1\",\n.... ",
    "bansalritesh18": "I am using postcss-loader (with postcss-import) with webpack 2. I am having two files : Style.css and CommonStyle.css. When I am importing CommonStyle.css file in Style.css file, the contents of CommonStyle.css file is not included in Style.css. But contents of Style.css is available in js file.. ",
    "cbrwizard": "The missing importLoaders: 1 in a query key in for a css-loader was the reason why postcss wasn't working for me.\nThis is my css-related config:\njs\n{\n    test: /\\.css$/,\n    exclude: /node_modules/,\n    loader: ExtractTextPlugin.extract({\n        fallbackLoader: \"style-loader\",\n        loader: [\n            {\n            loader: 'css-loader',\n            query: {\n                importLoaders: 1,\n            }\n            },\n            {\n            loader: 'postcss-loader',\n            }\n        ]\n    })\n}. ",
    "owenDods": "@StevenIseki , @michael-ciniawsky : Came up against this issue with the postcss-loader blowing up when I tried to pass it the autoprefixer plugin as well. Found a solution that worked for me at the bottom of this thread: -\n{\n  loader: 'postcss-loader',\n  options: { ident: 'postcss', plugins: () => [ require('plugin') ] }\n}\nHadn't seen the use of ident in this thread yet so I figured I'd post this here in case anyone else finds themselves here after googling this problem.\nAlso, I didn't want another smelly config file in my repo root... \ud83d\ude1c \nWebpack docs regarding Complex Options. @michael-ciniawsky - nice one! Thanks for the info, I'll tidy up my config as soon as it gets released.. ",
    "edmundo096": "So basically, what I conclude after reading and some researching, there are 4 ways (as for now) to load the PostCSS configuration for Webpack 2:\n\nUsing a postcss.config.js file, which must be \"anywhere down the file tree\" where Webpack matches a file (e.g. if a match was on a \\assets\\stylesheets file, postcss.config.js must be anywhere inside that path). \nThis is due how postcss-loader works. It uses postcss-load-config module, which uses cosmiconfig module (see more in davidtheclark/cosmiconfig).\nThat is why there is almost no documentation about where one can place that file.\nPlacing it on the root almost assures that postcss.config.js will just work, although this is not prefered by everybody.\n\nAs a side note, since this depends mainly on cosmiconfig we also have other 3 ways here:\n  - package.json property (anywhere down the file tree). An example reached reading this is here\n  - JSON or YAML \"rc file\" (anywhere down the file tree).\n  -  CLI --config argument.\n  - As already commented, .config.js CommonJS module (anywhere down the file tree).\n\n\nOLD workaround for Webpack <= 2.2.0, using the ident on the options object (as @owenDods commented).\nUnnecessary in the in Webpack >= 2.2.1, see point 4\njavascript\n{\n  loader: 'postcss-loader',\n  options: {\n    ident: 'postcss',     // <- This..\n    plugins: () => [ require('plugin') ]\n  }\n}\n\n\nUsing the webpack.LoaderOptionsPlugin.\nThis makes postcss-loader load the options (and plugins) as if we were using Webpack 1.\nSee more here https://webpack.js.org/plugins/loader-options-plugin/\n\n\nThe last 2 are handled respectively by this line of code: var options  = params.plugins || loader.options.postcss; in the index.js#L48.\nAll of this 3 proaches support an array of plugins.\nMaybe documentating or mentioning this 3 ways in the Webpack 2 section on the README.md would be nice in my opinion @ai \nHope this helps someone else (avoiding possible headaches) in the future.\n\nEDIT: Update as for Webpack >= v2.2.1\n\nThe preferred way (without the ident workaround for webpack <= 2.2.0).\njavascript\n{\n  loader: 'postcss-loader',\n  options: {\n    plugins: () => [ require('plugin') ]\n  }\n}. @ai, yeah, didn't liked the ident neither.\nMore like a workaround and took me several Google searches to find it as a mere \"workaround solution\", specially because it doccumented with intention for the Loader devs (I skipped it haha, https://webpack.js.org/guides/migrating/#loader-changes)\n\nHave not digged more into it, but.. There is any way that we could use options normally (without the ident)? Something like:\njavascript\n{\n  loader: 'postcss-loader',\n  options: {\n    plugins: () => [ require('plugin') ]\n  }\n}\nIt's something that could be fixed on PostCSS-loader? (or it's something from Webpack 2 itself?)\nOr which of the ways do you recommend us using?. @michael-ciniawsky Nice! I didn't saw your reply when I posted my reply to ai.\nWhen I first replied about the use of ident I had just installed Webpack 2.2.0 (seems that it 2.2.1 was published just after I updated my Webpack install & config from 1.x to 2.2.0, lucky me...).\nSo it's more of waiting for it to be fixed by Webpack 2.3 (although seems that on 2.2.1 it's already fixed/removed, but haven't tested it yet).\nThanks for clarifying it out!\n(I will edit my first reply after testing it out on 2.2.1). @gazpachu I got the same issue. After some research, I concluded how the loading of postcss.config.js worked.\nI recommend you read my suggestions in the comment above https://github.com/postcss/postcss-loader/issues/92#issuecomment-276036682. Summed up, if you use postcss.config.js, it must be \"anywhere down the file tree\" where Webpack matches a file (in your case, of /src/app/components/bundle.scss file, postcss.config.js must be anywhere inside that path; using the same folder level where the webpack.config.js file is located, as you said, wouldn't work).\nOtherwise, you should pass the options by any of other ways used by cosmiconfig, or indicate its location by the query params ?config as you have used, which I believe is processed at https://github.com/postcss/postcss-loader/blob/master/index.js#L54\nFor the prefixes, Autoprefixer applies it depending the current browser use. See the README first lines of https://github.com/postcss/autoprefixer.. I commented a summary of possible ways to resolve this on another (closed) issue. Here is my comment:\nSo basically, what I conclude after reading and some researching, there are 4 ways (as for now) to load the PostCSS configuration for Webpack 2:\n\nUsing a postcss.config.js file, which must be \"anywhere down the file tree\" where Webpack matches a file (e.g. if a match was on a \\assets\\stylesheets file, postcss.config.js must be anywhere inside that path). \nThis is due how postcss-loader works. It uses postcss-load-config module, which uses cosmiconfig module (see more in davidtheclark/cosmiconfig).\nThat is why there is almost no documentation about where one can place that file.\nPlacing it on the root almost assures that postcss.config.js will just work, although this is not prefered by everybody.\n\nAs a side note, since this depends mainly on cosmiconfig we also have other 3 ways here:\n  - package.json property (anywhere down the file tree). An example reached reading this is here\n  - JSON or YAML \"rc file\" (anywhere down the file tree).\n  -  CLI --config argument.\n  - As already commented, .config.js CommonJS module (anywhere down the file tree).\n\n\nOLD workaround for Webpack <= 2.2.0, using the ident on the options object (as owenDods commented).\nUnnecessary in the in Webpack >= 2.2.1, see point 4\njavascript\n{\n  loader: 'postcss-loader',\n  options: {\n    ident: 'postcss',     // <- This..\n    plugins: () => [ require('plugin') ]\n  }\n}\n\n\nUsing the webpack.LoaderOptionsPlugin.\nThis makes postcss-loader load the options (and plugins) as if we were using Webpack 1.\nSee more here https://webpack.js.org/plugins/loader-options-plugin/\n\n\nThe last 2 are handled respectively by this line of code: var options  = params.plugins || loader.options.postcss; in the index.js#L48.\nAll of this 3 proaches support an array of plugins.\nHope this helps someone else (avoiding possible headaches) in the future.\n\nEDIT: Update as for Webpack >= v2.2.1\n\nThe preferred way (without the ident workaround for webpack <= 2.2.0).\njavascript\n{\n  loader: 'postcss-loader',\n  options: {\n    plugins: () => [ require('plugin') ]\n  }\n}. \n",
    "francoisromain": "Finally I had something working (with webpack 2.2.1. and extract text plugin @2.0.0-beta). I'll put it here: \ntest: /\\.css$/,\n      use: ExtractTextPlugin.extract({\n        fallbackLoader: 'style-loader',\n        loader: [{\n          loader: 'css-loader?sourceMap',\n        }, {\n          loader: 'postcss-loader?sourceMap',\n          options: {\n            plugins: () => [\n              postcssImport({ addDependencyTo: webpack }),\n              postcssCssnext({\n                browsers: ['last 2 versions', 'ie >= 9'],\n                compress: true,\n              }),\n              postcssInlineSvg,\n            ],\n          },\n        }],\n      }). @michael-ciniawsky thanks for the info. Could you please show what will be the equivalent of the code above with webpack 2 and extract-text-webpack-plugin 2? . @michael-ciniawsky cool, thank you!. ",
    "koutsenko": "I don't understand a simple thing.\nMy webpack 2.2.1 rule:\n{ \n        test: /\\.less$/, \n        use: [\n          \"style-loader\",\n          \"css-loader\",\n          {\n            loader: 'postcss-loader',\n            options: {\n              plugins: function () {\n                return [\n                  require('autoprefixer')\n                ];\n              }\n            }\n          },\n          \"less-loader\"\n        ]\n      },\nIt works, but where must I add an option to support only 2 latest browser versions?\nIn Webpack 1 things was simple: \n{ test: /\\.less$/, loader: 'style!css!autoprefixer?browsers=last 2 version!less' },\nPlease dont suggest LoaderOptionsPlugin, or postcss.config.js, or another bloatware. \nThanks.. ",
    "gazpachu": "What am I doing wrong? I don't get any build errors but I don't see the CSS rules prefixed. The autoprefixer was working fine when I was using webpack 1.\n``\nconst ExtractSASS = new ExtractTextPlugin(/commit/styles/${options.cssFileName}`);\n...\ninside isProduction condition:\nwebpackConfig.plugins.push(\n  ExtractSASS\n);\nwebpackConfig.module.rules.push({\n      test: /.scss$/,\n      use: ExtractSASS.extract([\n        'css-loader',\n        {\n          loader: 'postcss-loader',\n          options: {\n            plugins: () => [\n              Autoprefixer({ browsers: 'last 2 versions' })\n            ]\n          }\n        },\n        'sass-loader'\n      ])\n    });\n```\nIf I use the propossed configuration in the readme:\nwebpackConfig.module.rules.push({\n      test: /\\.scss$/,\n      use: ExtractSASS.extract([\n        'css-loader?importLoaders=1',\n        'postcss-loader',\n        'sass-loader'\n      ])\n    });\nI get this error:\n```\nERROR in ./src/app/components/bundle.scss\nModule build failed: Error: No PostCSS Config found in: /Users/martosj/Dev/Webs/commit-frontend/src/app/components\n    at /Users/martosj/Dev/Webs/commit-frontend/node_modules/postcss-load-config/index.js:51:26\n @ ./src/app/index.jsx 51:0-35\nERROR in ./src/app/components/bundle.scss\nModule build failed: Error\n    at /Users/martosj/Dev/Webs/commit-frontend/node_modules/webpack/lib/NormalModule.js:141:35\n    at /Users/martosj/Dev/Webs/commit-frontend/node_modules/loader-runner/lib/LoaderRunner.js:364:11\n    at /Users/martosj/Dev/Webs/commit-frontend/node_modules/loader-runner/lib/LoaderRunner.js:230:18\n    at context.callback (/Users/martosj/Dev/Webs/commit-frontend/node_modules/loader-runner/lib/LoaderRunner.js:111:13)\n    at /Users/martosj/Dev/Webs/commit-frontend/node_modules/postcss-loader/index.js:148:13\nERROR in /Users/martosj/Dev/Webs/commit-frontend/node_modules/extract-text-webpack-plugin/loader.js??ref--4-0!/Users/martosj/Dev/Webs/commit-frontend/node_modules/css-loader/index.js?importLoaders=1!/Users/martosj/Dev/Webs/commit-frontend/node_modules/postcss-loader/index.js!/Users/martosj/Dev/Webs/commit-frontend/node_modules/sass-loader/lib/loader.js!/Users/martosj/Dev/Webs/commit-frontend/src/app/components/bundle.scss doesn't export content\n```\nI'm using this postcss.config.js:\n```\nconst AutoPrefixer = require('autoprefixer');\nmodule.exports = {\n  plugins: [\n    AutoPrefixer({ browsers: ['last 2 versions'] })\n  ]\n};\n```. @michael-ciniawsky it turned out to be that I had to specify the location of the config file. I thought it would automatically read the same folder level where the webpack.config.js file is located but that was not the case.\n'postcss-loader?config=webpack/postcss.config.js'\nOn the other hand, I've noticed that the autoprefixer is not adding -moz nor -ms nor -o prefixes. Aren't they required anymore?. ",
    "milewski": "as webpack 2.4.1 i could only get it working using the ident: 'postcss' as mentioned here https://github.com/postcss/postcss-loader/issues/92#issuecomment-276036682. const options = {\n    sourceMap: true,\n    ident: 'postcss', //<-- without this doesnt work.. says postcss couldnt be found in the dir.......\n    plugins: () => {\n        return [\n            require('autoprefixer')({\n                browsers: [\n                    \"> 5%\",\n                    \"last 2 versions\"\n                ]\n            })\n        ]\n    }\n}\n...\n{\n    test: /\\.s?css$/,\n    use: ExtractTextPlugin.extract({\n        fallback: 'style-loader',\n        use: [\n            { loader: 'css-loader', options: { minimize: true, importLoaders: 1 } },\n            { loader: 'postcss-loader', options: options },\n            { loader: 'resolve-url-loader' },\n            { loader: 'sass-loader', query: { sourceMap: true } }\n        ]\n    })\n},. Okay here we go\nChanging query to options fails\njs\n{ loader: 'sass-loader', options: { sourceMap: true } }\nremoving resolve-url-loader fails\njs\n// { loader: 'resolve-url-loader' },\nPostCSS options inside. also fails\njs\n{\n    loader: 'postcss-loader',\n    options: {\n        plugins: () => {\n            return [\n                require('autoprefixer')({\n                    browsers: [\n                        \"> 5%\",\n                        \"last 2 versions\"\n                    ]\n                })\n            ]\n        }\n    }\n},\nwithout ETWP also fails\njs\n{\n    test: /\\.s?css$/,\n    use: [\n        { loader: 'style-loader' },\n        { loader: 'css-loader', options: { minimize: true, importLoaders: 1 } },\n        {\n            loader: 'postcss-loader',\n            options: {\n                plugins: () => {\n                    return [\n                        require('autoprefixer')({\n                            browsers: [\n                                \"> 5%\",\n                                \"last 2 versions\"\n                            ]\n                        })\n                    ]\n                }\n            }\n        },\n        // { loader: 'resolve-url-loader' },\n        { loader: 'sass-loader', options: { sourceMap: true } }\n    ]\n},\nwithout ETWP + ident = Works\njs\n{\n    test: /\\.s?css$/,\n    use: [\n        { loader: 'style-loader' },\n        { loader: 'css-loader', options: { minimize: true, importLoaders: 1 } },\n        {\n            loader: 'postcss-loader',\n            options: {\n                ident: 'postcss',\n                plugins: () => {\n                    return [\n                        require('autoprefixer')({\n                            browsers: [\n                                \"> 5%\",\n                                \"last 2 versions\"\n                            ]\n                        })\n                    ]\n                }\n            }\n        },\n        // { loader: 'resolve-url-loader' },\n        { loader: 'sass-loader', options: { sourceMap: true } }\n    ]\n},\nYou can have a look at this with the real files i am using here: https://github.com/milewski/portfolio. oh..\nthis works\njs\n// { loader: 'style-loader' },\n   { loader: 'css-loader', options: { minimize: true, importLoaders: 1 } },\nand this also works\njs\n   { loader: 'style-loader' },\n   { loader: 'css-loader', options: { minimize: true } },\nbut together both fail (unless ident is set)\nso the problem might be in style-loader and css-loader->importLoaders. ",
    "AndreKR": "I also find that I have to give ident: 'something' to make @import work:\njavascript\n{\n  entry: './src/css/test.css',\n  output: {\n    path: __dirname,\n    filename: 'assets/dummy.css'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ExtractTextPlugin.extract({\n          use: [\n            { loader: 'css-loader', options: { importLoaders: 1 } },\n            {\n              loader: 'postcss-loader',\n              options: {\n//                    ident: 'remove-this-and-it-fails',\n                plugins: [ require('postcss-cssnext')() ]\n              }\n            }\n          ]\n        })\n      }\n    ]\n  },\n  plugins: [\n    new ExtractTextPlugin(\"assets/bundle.css\")\n  ]\n}\nwith test.css:\n```css\n@import url('inner.css');\nbody {\n  & div {\n    color: red;\n  }\n}\n```\nleads to:\n\nModule build failed: ModuleBuildError: Module build failed: TypeError: plugin is not a function\n\nWith ident: 'remove-this-and-it-fails' uncommented it works.\nHere's a complete example:\nhttps://github.com/AndreKR/issue-webpack-postcss-ident\n. ",
    "kroko": "I can confirm behaviour.\nThere is site.global.scss (imported as entry point intro entry javascript file)\nAnd site.global.scss has @import \"site.legacy.css\"; in it. Note the vanilla CSS.\nAnd PostCSS plugins are defined within webpack config, say\nwebpack.config.js\n```javascript\n// ...\n// ----------------\n// PostCSS plugins\nconst postCssPlugins = function () {\n  let postPluginConf = [];\n  postPluginConf.push(\n    require('autoprefixer')({\n      browsers: ['> 0.0001%'],\n      cascade: true,\n      remove: true\n    })\n  );\n  postPluginConf.push(\n    require('css-mqpacker')()\n  );\n  postPluginConf.push(\n    require('cssnano')({\n      discardComments: {\n        removeAll: true\n      },\n      autoprefixer: false,\n      zindex: false,\n      normalizeUrl: false\n    })\n  );\n  return postPluginConf;\n};\n// ...\n// ----------------\n// MODULE RULES\nconfig.module = {\n  rules: [\n    {\n      test: /.(css)$/,\n      use: ExtractTextPlugin.extract({\n        fallback: 'style-loader',\n        use: [\n          {\n            loader: 'css-loader',\n            options: {\n              importLoaders: 1,\n              sourceMap: true\n            }\n          },\n          {\n            loader: 'postcss-loader',\n            options: {\n              plugins: postCssPlugins,\n              sourceMap: true\n            }\n          }\n        ]\n      })\n    },\n    {\n      test: /.(scss)$/,\n      use: ExtractTextPlugin.extract({\n        fallback: 'style-loader',\n        use: [\n          {\n            loader: 'css-loader',\n            options: {\n              importLoaders: 2,\n              sourceMap: true\n            }\n          },\n          {\n            loader: 'postcss-loader',\n            options: {\n              // ident: 'remove-this-and-it-fails',\n              plugins: postCssPlugins,\n              sourceMap: true\n            }\n          },\n          {\n            loader: 'sass-loader',\n            options: {\n              sourceMap: true\n            }\n          }\n        ]\n      })\n    }\n  ]\n};\n// ...\n```\nThe build will fail.\nIt can be resolved either by adding indent key, or moving PostCSS plugins in plugin conf file (as it actually should be done).\npostcss.config.js\njavascript\nmodule.exports = {\n  plugins: [\n    require('autoprefixer')({\n      cascade: true,\n      remove: true\n    }),\n    require('css-mqpacker')(),\n    require('cssnano')({\n      discardComments: {\n        removeAll: true\n      },\n      autoprefixer: false,\n      zindex: false,\n      normalizeUrl: false\n    })\n  ]\n};\nwebpack.config.js\n```javascript\n// ----------------\n// MODULE RULES\nconfig.module = {\n  rules: [\n    {\n      test: /.(css)$/,\n      use: ExtractTextPlugin.extract({\n        fallback: 'style-loader',\n        use: [\n          {\n            loader: 'css-loader',\n            options: {\n              importLoaders: 1,\n              sourceMap: true\n            }\n          },\n          {\n            loader: 'postcss-loader',\n            options: {\n              sourceMap: true\n            }\n          }\n        ]\n      })\n    },\n    {\n      test: /.(scss)$/,\n      use: ExtractTextPlugin.extract({\n        fallback: 'style-loader',\n        use: [\n          {\n            loader: 'css-loader',\n            options: {\n              importLoaders: 2,\n              sourceMap: true\n            }\n          },\n          {\n            loader: 'postcss-loader',\n            options: {\n              sourceMap: true\n            }\n          },\n          {\n            loader: 'sass-loader',\n            options: {\n              sourceMap: true\n            }\n          }\n        ]\n      })\n    }\n  ]\n};\n// ...\n```\n. @DanDvoracek try this\nwebpack config\n.postcssrc.js\nbuild without any scripts definition in package.json \nsh\nrm -rf public/assets/** && NODE_ENV=development ./node_modules/webpack/bin/webpack.js --config=$(pwd)/webpack.front.config.js --progress. @michael-ciniawsky i haven't checked it. i remember that some time ago that was not the case (see my ticket), so it has stuck as a habit to clear out nulls from plugins, rules and entries arrays. actually, for all arrays :). ",
    "inthegarage": "Sadly none of these suggestions worked for me, still getting postcss error. Oh well, reverting to angular-cli for the moment.. ",
    "DanDvoracek": "Same here... Nothing worked in my case. However I have a slightly different setup regarding css as I use sass:\n{ // for css stuff...\n        test: /\\.sass$/,\n        use: extractSass.extract({\n          fallback: \"style-loader\",\n          use: [\n            { loader: \"css-loader\" },\n            { loader: \"sass-loader\" }\n          ]\n        })\n      }\nI have tried all the things I have been reading about. The only thing that changes for me is that I use sass where most of the people use pure css (in the examples I see).. I wonder if I have any issue because of this as none of the solution provided here is working for me. Any hint?\nI'm basically slowly giving up on the autoprefixer thing... It becomes very annoying. No doc matches, it's unclear whether the plugins are for webpack 1 or 2.. I start to get lost. Any ideas, suggestions would be very welcome. Thanks for reading!. Thanks a lot @kroko and @michael-ciniawsky \ud83d\udc4d  I will give it a try and let you know :D\nEDIT: tested.Thanks @kroko , your file put me on the track for what I was doing wrong. All good now!. ",
    "rogchap": "colors.js uses the same loader as the babel-loader (with the same config), and is working with the rest of my normal (babel-loadered) js files.\nPostCSS loader does not give much info on how to implement postcss-js\n. ",
    "10xjs": "~~This is basically a fix for #86~~\nEDIT: This is not a fix for #86\n. It's useful to be able to conditionally load the required module with exec. This opens the door for parsers other than postcss-js and allows support for specifying the postcss-js parser in ways other than ?parser=postcss-js in the loader query.\nWe will be able to do this:\njs\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test:   /\\.style.js$/,\n                loader: \"style-loader!css-loader!postcss-loader\"\n            }\n        ]\n    },\n    postcss: function () {\n        return {\n            parser: require('postcss-js'),\n            exec: true,\n        };\n    }\n}\nOr this:\njs\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test:   /\\.style.xyz$/,\n                loader: \"style-loader!css-loader!postcss-loader?parser=custom-parser&exec\"\n            }\n        ]\n    },\n}\n. @ai Having the parser itself define the exec behaviour is also an option.\nIn https://github.com/postcss/postcss-js/blob/master/index.js, for example:\ndiff\n  var postcssJs = {\n      objectify: require('./objectifier'),\n      parse:     require('./parser'),\n      async:     require('./async'),\n      sync:      require('./sync'),\n+     __webpackExec: true,\n  };\n  module.exports = postcssJs;\nAnd then in the loader:\ndiff\n-   if ( params.parser === 'postcss-js' || exec ) {\n+   if ( opts.parser.__webpackExec ) {\n        source = this.exec(source, this.resource);\n    }\n. /cc @izaakschroeder\n. @ai What do you mean about \"array to object\". The changes I have staged are 100% compatible with the existing interface. This should have absolutely no impact on current users.\n. there's already a case for this: https://github.com/postcss/postcss-loader/blob/master/index.js#L59. The webpack config can be an array or an object with a plugins array.\n. @ai The loader query syntax is still supported of course.\nI'm currently doing something similar to this:\njs\nloaders: [\n  {\n    test:   /\\.css$/,\n    loader: \"style-loader!css-loader!postcss-loader\"\n  },\n  {\n    test:   /\\.css\\.js$/,\n    loader: \"style-loader!css-loader!postcss-loader?parser=custom-parser&exec\"\n  }\n]\n. @ai The exec option is not necessary if you are using ?parser=postcss-js. This is a totally non-breaking enhancement.\n. @ai Were you thinking of a separate parameter like ?execParser=custom-parser?\n. I understand #86 better now, exec is not supported when using happypack.\nThe solution would be to allow using plain old require instead.\n. We would need a way to specify whether to use loader.exec, require or nothing at all.\n. ..and have ?parser=postcss-js automatically trigger exec for compatibility.\n. how does\njs\n    postcss: function () {\n        return {\n            parser: require('postcss-js'),\n            plugins: [require('autoprefixer')]\n        };\n    }\ntrigger using exec?\n. How does the loader know to call exec in the example postcss config above?\n. I was wrong to say that this is a fix for #86 \n. To solve #86, we would need to do something like:\njs\nif ( params.parser === 'postcss-js') {\n  source = require(source);\n}\nwhich would prevent any code in the source file from being processed with webpack, but at least it would work.\n. yup\n. I'm currently doing:\njs\nexport const parse = (source) => postcssJs.parse(transformSource(source)));\nas a \"custom\" parser\n. @ai It's getting used here https://github.com/webpack-config/webpack-config-postcss/compare/postcss-js?expand=1.\n. I hadn't considered parserExec=my-parse until our conversation. I do prefer?exec though. It avoids the ambiguity of ?parserExec=my-parse?parser=other-parser.\n. @ai Thanks for looking at this!! \ud83d\ude04 \n. ",
    "borodean": "@ai that should be fine for postcss-assets, however, I'd need someone's help implementing this.\n. ",
    "swernerx": "@ai IMHO this seems to be a good idea. Makes it far easier to track paths from different \"viewpoints\" and unify them.\n. ",
    "richardscarrott": "@ai I get a webpack validation error when using the following config:\n{\n        loader: 'postcss-loader',\n        plugins: () => [require('autoprefixer')]\n}\nI think Webpack 2 expects loaders to nest options like this, e.g.\n{\n        loader: 'postcss-loader',\n        options: {\n            plugins: () => [require('autoprefixer')]\n        }\n}\nwebpack: 2.1.0-beta.25\npostcss-loader:  postcss/postcss-loader (d867d02c6a5af853cde13b3ea09b04c17ae08d41)\n. @michael-ciniawsky yeah I just noticed it does work with options.plugins as a function but as soon as you try to use the ExtractText plugin it fails because that serializes the query / options which obviously won't work with a fn.\nLooks like your LoaderOptionsPlugin workaround is the best approach or I guess create a separate postcss.config.js.\n@ai I can't find that commit?\n. ",
    "alisonailea": "thanks!!!\n. ",
    "donaldpipowitch": "Would this work as an ad-hoc fix? https://github.com/webpack/webpack/pull/2974#issuecomment-245857168\n. ",
    "phaistonian": "@donaldpipowitch I am also curious. Would using this approach enable us use postCSS on the latest beta?\n. ",
    "wellyshen": "Same issue +1\n. ",
    "SpaceK33z": "See https://github.com/webpack/webpack/issues/3018#issuecomment-248187254 for a temporary workaround, which should work without a fix in postcss-loader. Note that this is meant to be temporary, because it is now possible to configure the options in the query object (but it looks like you already know this).\n. @kevinSuttle, as @ai said, you need replace postcss-loader temporarily in package.json with this:\n\"postcss-loader\": \"postcss/postcss-loader\"\n. ",
    "artkravchenko": "Validation succeeds for me:\njavascript\nplugins: [\n  new webpack.LoaderOptionsPlugin({\n    options: {\n      context: __dirname,\n      postcss: [\n        autoprefixer\n      ]\n    }\n  }\n]\nWhere autoprefixer is\njavascript\nconst autoprefixer = require('autoprefixer');\nSee more at https://github.com/webpack/webpack/issues/3018#issuecomment-248633498\n. ",
    "dkrutsko": "@Oopscurity: I was having an issue with extract-loader as well because it couldn't find the output.publicPath definition. So in addition to context, you also need to provide any additional options for the loaders you are using. I'm guessing webpack.LoaderOptionsPlugin creates a localized webpack configuration environment.\n. Hey, I'm actually having the same problem and I don't think it's because of autoprefixer.\nHere's my error message:\nbash\nTypeError: Cannot read property 'config' of null\n    at postcss-load-config/index.js:50:22\nHere's my loader config:\njs\nloader: \"postcss\",\nquery : {\n    plugins()\n    {\n        return [\n            // Plugins\n        ];\n    }\n}\nI don't minimize my CSS with css-loader so it shouldn't be doing double autoprefixing. I also don't have a postcss-load-config file.\n. @ai: Yeah I changed it to options but that error never went away. But like you said, just a temporary solution that will get fixed soon, right?\nThe reason I use query and not options is because of the early versions of webpack. I still can't find any up to date documentation on the later changes so I'm assuming that rules/loaders and options/query are interchangeable. If I use query will it not work? What about sourceMaps can I do something like this:\njs\nloader: \"postcss\",\nquery : {\n    sourceMap: true,\n    plugins() { ... }\n}\n. Yes I have tested the common config. Here's the relevant part of my config:\n``` js\n{\n  module: {\n    rules: [\n      {\n        test: /.scss$/i,\n        use:\n        [\n          {\n            loader: \"style\"\n          },\n          {\n            loader: \"css\"\n          },\n          {\n            loader : \"postcss\",\n            options: {\n              plugins: function()\n              {\n                return [\n                  require (\"postcss-cssnext\")\n                  ({\n                    // Config\n                  }),\n              require (\"postcss-position-alt\")\n            ];\n          }\n        }\n      }\n    ]\n  }\n]\n\n}\n}\n```\nIn postcss-loader, loaderUtils.parseQuery returns an empty object.\n. Absolutely! Attached is a zip containing 4 files. Unzip them inside a folder and run the following:\nbash\nnpm install\nnpm install -g webpack@~2.1.0-beta\nwebpack\nThis will compile style.css into bundle.css. The expected output of bundle.css should be:\ncss\nbody\n{\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    color: rgb(200, 200, 200);\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n}\n. oh wow, thanks a lot @ai. It's interesting because it was working elsewhere before and I'm surprised the V8 parser never caught it. I'll confirm tomorrow but that's probably the solution!\n. ",
    "farwayer": "@kevinSuttle I opened issue https://github.com/michael-ciniawsky/postcss-load-config/issues/24\n. I'm afraid config from readme is not working:\njs\n{\n    loader: 'postcss-loader',\n    options: {\n        plugins: function () {\n            return [\n                require('precss'),\n                require('autoprefixer')\n            ];\n        }\n    }\n}\nPlease read https://github.com/webpack/webpack/issues/3018#issuecomment-253336540.\n. @ai syntax with loader options or with LoaderOptionsPlugin? \n. Something wrong with style-loader https://github.com/webpack/webpack/issues/3018#issuecomment-253361436\n. Loader options configurations will not work with style-loader but it's webpack core issue so nothing to do. Maybe it is better to keep note about this in readme before https://github.com/webpack/webpack/issues/3136 will be fixed. \n. @ai add style-loader to loader chain and configuration via options will not work. Please check this issue. Of course it is not postcss-loader bug but using postcss with style is very often used configuration in dev.\nSo adding warning to readme is very desirable.\n. ",
    "fmal": "@ai i've updated to 1.0 and followed instructions in readme for webpack 2.x config (i'm using latest webpack beta.25). Due to issue mentioned by @farwayer i couldn't make it work. Providing options via webpack.LoaderOptionsPlugin solved the problem.\njs\nnew webpack.LoaderOptionsPlugin({\n  options: {\n    postcss () {\n      return [ ... ];\n    }\n  }\n});\nPlease consider updating the readme, so that people using beta builds of webpack don't waste time running into this.\n. ",
    "Birowsky": "\n@fmal postcss-loader 1.0 doesn't need LoaderOptionsPlugin.\n\n@ai I couldn't a guide for how to specify plugins without creating a new file. Help?\n. @ai I prefer keeping all the config inside the webpack config file. So I'll stick with the LoaderOptionsPlugin. Thanx anyways.\n. ",
    "farskid": "@Oopscurity Your solution worked for me on webpack@2.2.1. ",
    "garmjs": "I was wrong, i forget postcss is a function wich accept webpack , issue solved \nnew webpack.LoaderOptionsPlugin({\n  test: /\\.css$/,\n  options: {\n    postcss (webpack) {\n      return [\n        postcssImport({\n          addDependencyTo: webpack\n        })\n      ]\n    }\n  }\n})\n. ",
    "izaakschroeder": "The query itself must either be object or string and it's nice to have options as a function. It's also the least intrusive change.\n. Yea we could do query.plugins instead of query.options; that works. \ud83d\udc4d \n. Thanks! Let me know when a new version is published @ai \ud83d\ude04 \n. \ud83d\udc4c \n. Will try and get this working will my configuration tonight \ud83d\ude04 \n. @ai Running into a few hiccups. First of which is ./node_modules/postcss-load-config/index.js. There's some mismatch between versions going on here, where that file is trying to require postcss-load-options/lib/loadOptions.js which doesn't exist; the file is instead called postcss-load-options/lib/options.js. I'm not sure which version is intended to be correct or where the mismatch is coming from.\n. @ai The way you've refactored parseOptions also results in failing to pass the webpack context through.\njs\nreturn parseOptions(options, pack);\nshould be:\njs\nreturn parseOptions(loader, options, pack);\nand then:\njs\nfunction parseOptions(context, options, pack) {\n// ...\noptions = options.call(context, context);\nThis will break postcss-imports (and possibly more) otherwise.\n. You can verify these by checking out the branch here: https://github.com/webpack-config/webpack-config-postcss/pull/10 and running npm run smoke.\n. Thanks @michael-ciniawsky it is \ud83d\ude04 Just waiting on @ai now.\n. ",
    "wSLecHayfIeNdock": "Autoprefixer no problem.\n. @ai \n Configuration should be no problem.\nBut this can be used:\n@define-mixin fonts $elem, $fs {\n    .$(elem) { font-size: $(fs)px; }\n    .test { font-size: calc($(fs)px*10); }\n}\n@mixin fonts search, 40;\n/* @mixin fonts search:hover, 89; */\nanyway, is not written as sass.\n```\n@mixin font($fs){\n    font-size: $fs;\n.test & {\n    font-size: $fs * 2;\n}\n\n.test & {\n    font-size: $fs * 3;\n}\n\n}\n@include font(16px);\n```\n. @ai Thank you very much. you're right.\npostcss: [\n    values,\n    autoprefixer({ browsers: ['last 2 versions'] }),\n    postcssMixins,\n    postcssNested, \n],\n. @michael-ciniawsky Already solved. thank you for your reply.\n. ",
    "Matmo10": "\"webpack\": \"2.1.0-beta.25\"\nI don't have a postcss config file, is that the problem? I thought the section with \nrequire('precss'),\nrequire('autoprefixer')\nwas a substitute for the config file, to specify which plugins to run? \nMy webpack config for css is literally straight from the README at this point. \n. Sure, here it is: https://gist.github.com/Matmo10/04da27830124b9ededfed03a214a5f93#file-webpack-config-ts-L86\n. I write my styles with .scss, but my app uses the .css files, because Angular2 AOT compilation requires .css files at this point. \nSo my angular2 components look like this: \n@Component({\n   selector: 'my-loader',\n   templateUrl: 'loader.component.html',\n   styleUrls: ['loader.component.css']\n})\nIn this case, I would actually be developing in loader.component.scss. Correct me if I'm wrong, but wouldn't webpack \"test\" here (at the styleUrls) and use the .css block/rule/loader(s) ? \nBefore I actually \"compile\" the angular2 project, I run node-sass to generate all my css files. While I develop, I also use node-sass -w to watch and continuously re-generate the css files.\n. The gist I provided is my config, I've only made a few tweaks from the started project I linked above\n. This is the full config: https://gist.github.com/Matmo10/62643df359d4697aac337165007ee013\nIts basically the same as the last one I posted though, the last one was already my final config, not a diff? I'm confused D:\n. In my case, angular and webpack have no idea about the .scss files. I use node-sass totally outside the context of webpack to create the .css files, and that happens before I even start webpack. \nWhen the webpack starts compiling/serving the angular app, it should only know and care about the .css files. \n{test: /\\.css$/, loader: 'raw-loader'} works fine to load the css (without any postcss stuff), but when I try the config from the README I get the following error: Uncaught Error: Expected 'styles' to be an array of strings.(\u2026) from angular, because it seems to be loading an array of a single empty object instead of a string like the raw-loader does. \nI also see all these errors when I use postcss-loader, not sure if its related:\n66% building modules 794/850 modules 56 active ...orms/src/directives/error_examples.jsTypeError: Cannot read property 'config' of null\n    at /Users/myUserNameHere/myProjectHere/ng2app/node_modules/postcss-load-config/index.js:50:22\n 66% building modules 819/865 modules 46 active ...es/@angular/common/src/facade/intl.jsTypeError: Cannot read property 'config' of null\n    at /Users/myUserNameHere/myProjectHere/ng2app/node_modules/postcss-load-config/index.js:50:22\n 66% building modules 820/865 modules 45 active ...es/@angular/common/src/facade/intl.jsTypeError: Cannot read property 'config' of null\n    at /Users/myUserNameHere/myProjectHere/ng2app/node_modules/postcss-load-config/index.js:50:22\n 66% building modules 848/905 modules 57 active .../compiler/src/i18n/serializers/xtb.jsTypeError: Cannot read property 'config' of null\n    at /Users/myUserNameHere/myProjectHere/ng2app/node_modules/postcss-load-config/index.js:50:22\n 66% building modules 849/905 modules 56 active .../compiler/src/i18n/serializers/xtb.jsTypeError: Cannot read property 'config' of null\n    at /Users/myUserNameHere/myProjectHere/ng2app/node_modules/postcss-load-config/index.js:50:22\n 66% building modules 863/919 modules 56 active ...g-monitor/src/dock-monitor/reducer.jsTypeError: Cannot read property 'config' of null\n    at /Users/myUserNameHere/myProjectHere/ng2app/node_modules/postcss-load-config/index.js:50:22\n 66% building modules 864/919 modules 55 active ...g-monitor/src/dock-monitor/reducer.jsTypeError: Cannot read property 'config' of null\n    at /Users/myUserNameHere/myProjectHere/ng2app/node_modules/postcss-load-config/index.js:50:22\n 66% building modules 865/919 modules 54 active ...g-monitor/src/dock-monitor/reducer.jsTypeError: Cannot read property 'config' of null\n    at /Users/myUserNameHere/myProjectHere/ng2app/node_modules/postcss-load-config/index.js:50:22\n 66% building modules 866/919 modules 53 active ...g-monitor/src/dock-monitor/reducer.jsTypeError: Cannot read property 'config' of null\n    at /Users/myUserNameHere/myProjectHere/ng2app/node_modules/postcss-load-config/index.js:50:22\n 67% building modules 883/919 modules 36 active ...g-monitor/src/dock-monitor/reducer.jsTypeError: Cannot read property 'config' of null\n    at /Users/myUserNameHere/myProjectHere/ng2app/node_modules/postcss-load-config/index.js:50:22\nMaybe I just need to read up on the differences between styles-loader, css-loader, and raw-loader. I feel like I just need the right combination or configuration to make it work, but all the documentation related to webpack is so lacking :|\nI'm wondering if theres a way I can pass the output of raw-loader into style-loader..\n. Because angular2 AOT compilation requires css at the moment. I'm using this specialized angular loader, but I see other angular2 projects which are also using this angular2-template-loader using the following loader setups for css instead of raw-loader:\nhttps://github.com/angular/angular2-seed/blob/master/webpack.config.js :\n{ test: /\\.css$/, loaders: ['to-string-loader', 'css-loader'] }\nhttps://github.com/aspnet/JavaScriptServices/blob/dev/templates/Angular2Spa/webpack.config.js :\n{ test: /\\.css$/, loader: 'to-string!css' },\nhttps://github.com/AngularClass/angular2-webpack-starter/blob/master/config/webpack.common.js :\n{\n          test: /\\.css$/,\n          loaders: ['to-string-loader', 'css-loader']\n        }\nso I think I need just need to swap out raw-loader and use to-string-loader after postcss-loader and css-loader run instead. I just need to get the order right now.\nMy understanding from the README is that postcss-loader should run first, then css-loader should run second.\nSo I think I need to do this:  loaders: ['to-string-loader', 'css-loader', 'postcss-loader'] (or loader: to-string!css!postcss). I just need to figure out how to do this correctly in the webpack config now. Time to experiment :)\n. ",
    "Jessidhia": "(on the phone, but) I need the syntax option to also be configurable, which is why I didn't make only plugins be a function.\n. js\nfunction postcss () {\n  return makePostcssConfig(__DEV__, this.resourcePath.endsWith('.sss') ? sugarss : null)\n}\nmakePostcssConfig returns an object with { plugins, parser }.\nThere is a way to configure postcss other than the loader options?\n. The problem with having separate loader configs is how css-loader handles @import or composes: x from 'y'.\ncss-loader will basically invoke its current chain but starting importLoaders loaders before itself. This prevents having .sss files import .css files, and vice-versa, as they would run the same postcss-loader with the same hardcoded parser as was used to load itself.\nI am still doing some refactoring to try out the the postcss.config.js method. I actually had my config in a file named postcss.config.js that I required in the webpack config, so at best I should only need to change the export format and the file location...\n. The postcss.config.js method (via postcss-load-config) does not work for me.\nFirstly, it looks like the lookup for postcss.config.js is relative to the CWD, and not to the resourcePath (like .eslintrc or .babelrc are). If I put the postcss.config.js in src/postcss.config.js but invoke webpack outside src, the postcss.config.js is not even visited.\nSecondly, the exported function (module.exports = function () { console.log(this, arguments) }, for testing) only receives an object with cwd and env keys, so I have no access to the resourcePath to conditionally load sugarss. this is also undefined. The value cwd is also the cwd of the webpack process, and the env value is undefined.\nThirdly, postcss-load-plugins refuses my generated config, even though it works through the postcss API used by postcss-loader 0.13.0.\nIt refuses the object returned by require('doiuse')({}), which looks like { info: [Function: info], postcss: [Function: postcss] }. It also refuses require('postcss-cssnext')({}), as it returns an instance of Processor.\nI have not checked this, but it's also possible that the use of a postcss.config.js might interfere with the postcss used internally by css-loader for its implementation of css modules.\n. While trying to adapt my codebase to use 1.1, I found a few problems that I am working around / fixing with https://github.com/michael-ciniawsky/postcss-load-plugins/pull/17 and https://github.com/michael-ciniawsky/postcss-load-options/pull/18.\nHowever, I hit a snag because one of the files I am trying to process is a symlink that points outside the tree with the postcss.config.js, so postcss-load-options can't find it. I could work around it by reversing the symlink, though, but it could be good to have another alternative.\n. These version numbers look wrong. You're already using the semver caret; using the x placeholder probably only works by accident.. ",
    "EvHaus": "@ai I configured my webpack config to be the same as https://github.com/postcss/postcss-loader#webpack-2x-config but I still see these warnings still appear:\nat /myapp/node_modules/postcss-load-config/index.js:50:22\n 66% building modules 1312/1385 modules 73 active ...form/node_modules/lodash/_nodeUtil.jsTypeError: Cannot read property 'config' of null\nRemoving:\noptions: {\n    plugins () {\n        return [\n            require('autoprefixer')\n        ];\n    }\n}\nmakes the warning go away.\n. ",
    "oyvinmar": "Here is a full example of my config: https://github.com/NDLANO/ndla-frontend/blob/master/webpack.config.base.js\nI may be able to create a simpler example later.\nI not quite sure I understand how a object would help. I don't know what type of object i should pass to postcssImport({addDependencyTo: ??}) in that case.\n. ",
    "DavidWells": "Holy snap. This just tripped me up for a bit.\nDisabling the webpackInstance made postCSS hot-module reloading not work. =(\nReverting back to a version before 1.0 fixed my problem\nFor those curious on hot-reloading postcss variables that are defined in the webpack config see https://github.com/serverless/site/blob/master/webpack.config.js#L32-L43. ",
    "netcitylife": "\u0422\u0430\u043a, \u044f \u043f\u043e\u0445\u043e\u0436\u0435 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043b\u0441\u044f, \u0434\u0435\u043b\u043e \u0431\u044b\u043b\u043e \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u043b\u043e\u0430\u0434\u0435\u0440\u043e\u0432. \u041e\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0441\u043f\u0440\u0430\u0432\u0430 \u043d\u0430\u043b\u0435\u0432\u043e, \u0447\u0442\u043e \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u0442\u0440\u0430\u043d\u043d\u043e, \u043d\u0443 \u0434\u0430 \u043b\u0430\u0434\u043d\u043e.\n. \u0421\u043f\u0430\u0441\u0438\u0431\u043e, \u044d\u0442\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0435\u0435. \u041f\u0440\u0430\u0432\u0434\u0430 \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c string-replace, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0435\u0449\u0435 \u0432\u043d\u0435\u0434\u0440\u044f\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 html \u0438 svg, \u043d\u043e \u0434\u043b\u044f css \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u044e postcssSimpleVars.\n. ",
    "troutowicz": "I have an index.scss file which imports other scss files. Changes made to those imported files are not caught by Webpack's HMR. This works correctly in 0.13.0.\n. Thanks @ai that seems to fix things!\n. ",
    "mattsbennett": "Ah - thanks @ai ! Turns out I don't actually need packs - using the postcss-scss parser means I can run all my plugins at the same time. I'm pretty new to postcss so just had to do some more learning.\n. ",
    "azat-io": "Same problem:\n``` js\nimport webpack from 'webpack'\nimport path from 'path'\nimport cssnext from 'postcss-cssnext'\nimport easyImport from 'postcss-easy-import'\nexport default {\n    entry: path.join(process.cwd(), './components/App/index.jsx'),\n    output: {\n        path: path.join(process.cwd(), './public'),\n        filename: 'main.js',\n    },\n    plugins: [\n        new webpack.LoaderOptionsPlugin({\n            postcss: () => [\n                easyImport,\n                cssnext({\n                    browsers: ['last 2 versions', 'IE > 10'],\n                }),\n            ],\n        }),\n    ],\nmodule: {\n    loaders: [{\n        test: /\\.jsx?$/,\n        exclude: /node_modules/,\n        loader: 'babel',\n    }, {\n        test: /\\.css$/,\n        loader:\n            'css-loader?modules&localIdentName=[local]--[hash:base64:5]' +\n            '!postcss-loader',\n    }],\n},\n\n}\n``\n. @ai Yes. All works good if I put list of plugins to.postcssrcfile :smiley: \n. Okay :disappointed: \n. I have the same issue withcss-mqpacker`:\nI'm using:\n\nwebpack v2.2.0-rc.2\npostcss-loader v1.2.1\ncss-mqpacker v5.0.1\n\nHere is a part of my  webpack.config.babel.js:\n```js\nexport default {\n    entry: './components/App/index.jsx',\n    output: {\n        path: path.join(process.cwd(), './public'),\n        filename: 'main.[hash].js',\n    },\nplugins: [\n    new webpack.LoaderOptionsPlugin({\n        options: {\n            context: __dirname,\n            postcss: [\n                cssnext({\n                    browsers: ['last 2 versions', 'IE > 10'],\n                }),\n                cssMqpacker(),\n            ],\n        },\n    }),\n\n    new ExtractTextPlugin({\n        filename: 'style.[hash].css',\n        disable: false,\n        allChanks: true,\n    }),\n],\n\nmodule: {\n    loaders: [{\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract({\n            fallbackLoader: 'style-loader',\n            loader: 'css-loader?modules&localIdentName=[local]--[hash:base64:5]!postcss-loader',\n        }),\n    }],\n},\n\n}\n```\nAnd postcss-cssnext and other plugins works good. But not css-mqpacker. When I'm building app I see the following CSS code:\ncss\n.title--Njw1N {\n    color: red\n}\n@media (max-width: 800px) {\n    .title--Njw1N {\n        color: darkred\n    }\n}\n.title--13b4T {\n    color: yellow\n}\n@media (max-width: 800px) {\n    .title--13b4T {\n        color: orange\n    }\n}\n.title--FYL1K {\n    color: green\n}\n@media (max-width: 800px) {\n    .title--FYL1K {\n        color: darkgreen\n    }\n}\nPlease see the example here: https://github.com/azat-io/webpack2-css-modules-demo. @anandthakker Oh, you are right. It looks like I need to concatenate all files before using CSS Mqpacker. ",
    "gaastonsr": "Are you sure this is just a warning? because I tried to setup webpack 2 + postcss-loader 1 and couldn't get it to work.\n. We shouldn't be using the query key insted of options in the config?\nDocs for reference.\n. Oh thanks for that. Great info in there. I will try to debug this tonight if I have some time.\n. @tomeraz did you load the plugins through the webpack 2 config?\n. Right. Loading plugins with webpack2 doesn't work yet.\nI took the time to investigate more why it's not working and found it's because of a bug when style-loader is in the loader chain.\nwebpack/webpack#3136 for reference.\nPossible solutions:\n- Load plugins with a config file (e.g. postcss.config.js)\n- Use weback 2.1.0-beta22 and use the webpack 1 config style.\n- Maybe use webpack.LoaderOptionsPlugin to load the plugins (not sure if this will work)\n. Here's his full config file for reference \nhttp://pastebin.com/Lmka3rju\n. ~~But you will still get the PostCSS Config could not be loaded. Please check your PostCSS Config. warning.~~\n~~The only way to get rid of that message at the moment is to create one config file for postcss.~~\nSee response below. Apparently this will also prevent the warning from showing up.\n. Loading plugins through webpack 2 is not working at the moment. Check this comment for reference.\n. ",
    "lourd": "I also just ran into this problem. Using the recommended Webpack 2 configuration does not work. The plugins key of options is not being passed to the loader. It appears that this.query only does not keys that are functions. It works fine when I make a postcss.config.js file. Otherwise I get the very cryptic:\n[TypeError: Cannot read property 'config' of null]\nHere is my config file:\n```\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst autoprefixer = require('autoprefixer')\nmodule.exports = {\n  devtool: 'eval-source-map',\n  entry: {\n    app: './src',\n  },\n  output: {\n    path: path.join(__dirname, './build'),\n    filename: \"[name].[hash:6].js\",\n    chunkFilename: \"chunk.[id].[hash:6].js\"\n  },\n  module: {\n    rules: [\n      {\n        test: /.jsx?$/,\n        exclude: /node_modules/,\n        loader: 'babel-loader',\n      },\n      {\n        test: /.css$/,\n        use: [\n          {\n            loader: 'style-loader',\n            options: {\n              sourceMap: true\n            }\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              importLoaders: 1,\n              modules: true,\n              localIdentName: '[name][local][hash:base64:5]'\n            },\n          },\n        ],\n      },\n      {\n        test: /.scss$/,\n        use: [\n          {\n            loader: 'style-loader',\n            options: {\n              sourceMap: true\n            }\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              importLoaders: 1,\n              modules: true,\n              localIdentName: '[name][local][hash:base64:5]'\n            },\n          },\n          {\n            loader: 'postcss-loader',\n            options: {\n              sourceMap: true,\n              plugins: () => [autoprefixer],\n            },\n          },\n          {\n            loader: 'sass-loader',\n            options: {\n              sourceMap: true,\n            },\n          },\n        ],\n      },\n    ],\n  },\n  resolve: {\n    extensions: ['.js', '.jsx'],\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: 'src/index.html',\n    }),\n  ],\n}\n```\nThe exception is being thrown from loadConfig on line 60. The returned object from loaderUtils.parseQuery includes sourceMap but not plugins.\nIt's not crashing the build, but Autoprefixer is not running. The CSS contains no vendor prefixes. If I use a postcss.config.js file for configuration, it does.\nTest case here https://github.com/lourd/react-learning/tree/style, on the style branch.\n. I'm also getting the same error if I give the configuration using webpack's LoaderOptionsPlugin.\nnew webpack.LoaderOptionsPlugin({\n      postcss: {\n        sourceMap: true,\n        plugins: () => [autoprefixer],\n      }\n    })\n. It works when I use a postcss.config.js or .postcssrc file in the top directory of my project, using these formats:\n```\n// js\nmodule.exports = {\n  plugins: [\n    require('autoprefixer')\n  ]\n}\n// rc\n{\n  \"plugins\": {\n    \"autoprefixer\": {}\n  }\n}\n```\nIt does not work when I export a function, as postcss-load-config would lead me to believe\nmodule.exports = (ctx) => {\n  plugins: [\n    require('autoprefixer')(ctx.plugin)\n  ]\n}\n// [TypeError: Cannot read property 'plugins' of undefined]\nIt also does not work when I put the config file somewhere other than the top level directory, such as in config/. I thought that might \"just work\" after reading the cosmiconfig docs, but it looks like they're swapping what I normally think of as \"lower\" or \"higher\" in the filesystem -- no \"just working\" there. If I'm going to have to specify my postcss config separately from my webpack config, I would strongly prefer to at least keep it out of the main directory.\n. Ah, right, thanks @michael-ciniawsky. I submitted a PR to fix the example on your README, too.\nI'm confused, should the new version of postcss-load-config fix this problem of webpack 2 not passing the config as expected?\n. ",
    "tomeraz": "Using webpack2 + postcss-loader 1.1, warning is now:\n\nPostCSS Config could not be loaded. Please check your PostCSS Config.\n\nHow do I fix this ?\n. Here:\n\n  module: {\n    rules: [\n      {\n        test: /\\.jsx?$/,\n        include: paths.src,\n        use: {\n          loader: 'babel'\n        }\n      },\n      {\n        test: /\\.s?css/,\n        use: [\n          {\n            loader: 'style-loader',\n            options: {\n              sourceMap: true\n            }\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              importLoaders: 1,\n              modules: true,\n              localIdentName: '[path]_[name]_[local]_[hash:base64:5]'\n            }\n          },\n          {\n            loader: 'postcss-loader',\n            options: {\n              sourceMap: true,\n              plugins: () => []\n          },\n          {\n            loader: 'sass-loader',\n            options: {\n              sourceMap: true\n            }\n          }\n        ]\n      }\n\n. @michael-ciniawsky yes, the CSS gets transformed.\nCompilation works well, the error seems to have no effect on it.\n. @gaastonsr haven't used any plugins\n. ",
    "albertogasparin": "Same \"Config could not be loaded\" error here. I don't have an external config file but I'm adding plugins inline:\njs\n// bunch of other loaders...\n{\n  loader: 'postcss-loader',\n  options: {\n    plugins: () => [\n      autoprefixer({ browsers: ['last 3 versions'] })\n    ],\n  },\n}\n. The options key is part of some new webpack2 changes. \nmodule.loaders \u2013> module.rules\nloaders \u2013> use\nquery \u2013> options\n. ",
    "marcelaraujo": "This is working!\nWebpack 2.1.0-beta.25\nnew webpack.LoaderOptionsPlugin({\n      test: /\\.css$/,\n      debug: true,\n      options: {\n        postcss: [\n          precss(),\n          autoprefixer({\n            browsers: [\n              'last 3 version',\n              'ie >= 10',\n            ],\n          }),\n          mqpacker(),\n        ],\n        context: path.join(__dirname, 'src'),\n        output: {\n          path: path.join(__dirname, 'dist'),\n        },\n      },\n    }),\n. Probably after this fix #3306 on Webpack, solves this issue.. @ai postcss.config.js is a requirement now? Because I got that issue too and I had to use LoaderOptionsPlugin to solve it (http://pastebin.com/Lmka3rju).\nWhen I did this http://pastebin.com/0J9dcXCp, it did not work as I expected. After a while debugging, I found that \n```\nmodule.exports = function (source, map) {\n    if ( this.cacheable ) this.cacheable();\nvar loader = this;\nvar file   = loader.resourcePath;\nvar params = loaderUtils.parseQuery(loader.query);\n\nvar options  = params.plugins || loader.options.postcss;\n\n// can not read `postcss` of undefined\n\n```\n. @ai \n``` js\nconst path = require('path');\nconst webpack = require('webpack');\nconst autoprefixer = require('autoprefixer');\nconst precss = require('precss');\nconst mqpacker = require('css-mqpacker');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n  entry: [\n    'react-hot-loader/patch',\n    'babel-polyfill',\n    'whatwg-fetch',\n    'webpack-dev-server/client?http://localhost:3000',\n    'webpack/hot/only-dev-server',\n    './src/index',\n  ],\n  output: {\n    path: path.resolve(process.cwd(), 'dist'),\n    publicPath: '/',\n    filename: 'app.[hash].js',\n  },\n  devtool: 'eval',\n  module: {\n    rules: [{\n      test: /.js$/,\n      include: [\n        path.resolve(process.cwd(), 'src'),\n      ],\n      use: [{\n        loader: 'babel-loader',\n        options: {\n          presets: [['es2015', { modules: false }], 'stage-0', 'react'],\n          plugins: ['transform-runtime', 'transform-object-rest-spread', 'react-hot-loader/babel'],\n        },\n      }],\n    }, {\n      test: /.css$/,\n      include: [\n        path.resolve(process.cwd(), 'src'),\n      ],\n      use: [{\n        loader: 'style-loader',\n      }, {\n        loader: 'css-loader',\n        options: {\n          modules: true,\n          importLoaders: true,\n          localIdentName: '[hash:base64:5]',\n        },\n      }],\n    }, {\n      test: /.css$/,\n      include: [\n        path.resolve(process.cwd(), 'node_modules'),\n      ],\n      use: [{\n        loader: 'style-loader',\n      }, {\n        loader: 'css-loader',\n        options: {\n          autoprefixer: false,\n        },\n      }, {\n        loader: 'postcss-loader',\n        options: {\n          postcss: [\n            precss(),\n            autoprefixer({\n              browsers: [\n                'last 3 version',\n                'ie >= 10',\n              ],\n            }),\n            mqpacker(),\n          ],\n        },\n      }],\n    }, {\n      test: /.(jpe?g|png|gif|svg)$/,\n      use: [{\n        loader: 'file-loader',\n      }, {\n        loader: 'image-webpack',\n        options: {\n          progressive: true,\n          optimizationLevel: 7,\n          interlaced: false,\n          pngquant: {\n            quality: '65-90',\n            speed: 4,\n          },\n        },\n      }],\n    }],\n  },\n  plugins: [\n    new webpack.NamedModulesPlugin(),\n    new webpack.HotModuleReplacementPlugin(),\n    // new webpack.ProgressPlugin(),\n    new HtmlWebpackPlugin({\n      hash: false,\n      template: './index.html',\n    }),\n    // new webpack.LoaderOptionsPlugin({\n    //   test: /.css$/,\n    //   debug: true,\n    //   options: {\n    //     postcss: [\n    //       precss(),\n    //       autoprefixer({\n    //         browsers: [\n    //           'last 3 version',\n    //           'ie >= 10',\n    //         ],\n    //       }),\n    //       mqpacker(),\n    //     ],\n    //     context: path.join(__dirname, 'src'),\n    //     output: {\n    //       path: path.join(__dirname, 'dist'),\n    //     },\n    //   },\n    // }),\n  ],\n};\n```\nand the Webpack output\n```\nPostCSS Config could not be loaded. Please check your PostCSS Config.\n[./node_modules/css-loader/index.js?{\"autoprefixer\":false}!./node_modules/postcss-loader/index.js?{\"postcss\":[{\"version\":\"5.2.5\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"precss\",\"postcssVersion\":\"5.2.5\"},null,null]}!./node_modules/sanitize.css/sanitize.css] ./~/css-loader?{\"autoprefixer\":false}!./~/postcss-loader?{\"postcss\":[{\"version\":\"5.2.5\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"precss\",\"postcssVersion\":\"5.2.5\"},null,null]}!./~/sanitize.css/sanitize.css 10.7 kB {0} [built]\n [./node_modules/css-loader/index.js?{\"modules\":true,\"importLoaders\":true,\"localIdentName\":\"[hash:base64:5]\"}!./src/components/NavigationBar/styles.css] ./~/css-loader?{\"modules\":true,\"importLoaders\":true,\"localIdentName\":\"[hash:base64:5]\"}!./src/components/NavigationBar/styles.css 531 bytes {0} [built]\n [./node_modules/css-loader/index.js?{\"modules\":true,\"importLoaders\":true,\"localIdentName\":\"[hash:base64:5]\"}!./src/containers/App/style.css] ./~/css-loader?{\"modules\":true,\"importLoaders\":true,\"localIdentName\":\"[hash:base64:5]\"}!./src/containers/App/style.css 856 bytes {0} [built]\n [./node_modules/css-loader/index.js?{\"modules\":true,\"importLoaders\":true,\"localIdentName\":\"[hash:base64:5]\"}!./src/containers/Dashboard/style.css] ./~/css-loader?{\"modules\":true,\"importLoaders\":true,\"localIdentName\":\"[hash:base64:5]\"}!./src/containers/Dashboard/style.css 359 bytes {0} [built]\n [./node_modules/css-loader/index.js?{\"modules\":true,\"importLoaders\":true,\"localIdentName\":\"[hash:base64:5]\"}!./src/containers/Setup/style.css] ./~/css-loader?{\"modules\":true,\"importLoaders\":true,\"localIdentName\":\"[hash:base64:5]\"}!./src/containers/Setup/style.css 401 bytes {0} [built]\n.\n{ postcss:\n   [ { version: '5.2.5',\n       plugins: [Object],\n       postcssPlugin: 'precss',\n       postcssVersion: '5.2.5' },\n     null,\n     null ] }\nPostCSS Config could not be loaded. Please check your PostCSS Config.\n```\nmy package.json\n{\n  \"name\": \"app\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"start\": \"node ./webpack/webpack.server.js\",\n    \"build\": \"rimraf ./dist && webpack --config ./webpack/webpack.prod.config.js\",\n    \"preview\": \"http-server ./dist -p 3001 -c-1\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"dependencies\": {\n    \"babel-runtime\": \"^6.18.0\",\n    \"immutable\": \"^3.8.1\",\n    \"react\": \"^15.3.2\",\n    \"react-dom\": \"^15.3.2\",\n    \"react-redux\": \"^4.4.5\",\n    \"react-router\": \"^4.0.0-alpha.4\",\n    \"react-router-redux\": \"^4.0.6\",\n    \"redux\": \"^3.6.0\",\n    \"redux-immutable\": \"^3.0.8\",\n    \"redux-saga\": \"^0.12.0\",\n    \"reselect\": \"^2.5.4\",\n    \"sanitize.css\": \"^4.1.0\",\n    \"whatwg-fetch\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"auto-prefixer\": \"^0.4.2\",\n    \"autoprefixer\": \"^6.5.1\",\n    \"babel-core\": \"^6.18.0\",\n    \"babel-loader\": \"^6.2.5\",\n    \"babel-plugin-transform-object-rest-spread\": \"^6.16.0\",\n    \"babel-plugin-transform-react-constant-elements\": \"^6.9.1\",\n    \"babel-plugin-transform-react-inline-elements\": \"^6.8.0\",\n    \"babel-plugin-transform-runtime\": \"^6.15.0\",\n    \"babel-polyfill\": \"^6.16.0\",\n    \"babel-preset-es2015\": \"^6.18.0\",\n    \"babel-preset-react\": \"^6.16.0\",\n    \"babel-preset-stage-0\": \"^6.16.0\",\n    \"css-loader\": \"^0.25.0\",\n    \"css-mqpacker\": \"^5.0.1\",\n    \"eslint\": \"^3.9.0\",\n    \"eslint-config-airbnb\": \"^12.0.0\",\n    \"eslint-plugin-import\": \"^2.0.1\",\n    \"eslint-plugin-jsx-a11y\": \"^2.2.3\",\n    \"eslint-plugin-react\": \"^6.4.1\",\n    \"extract-text-webpack-plugin\": \"^2.0.0-beta.4\",\n    \"html-webpack-plugin\": \"^2.22.0\",\n    \"http-server\": \"^0.9.0\",\n    \"image-webpack-loader\": \"^3.0.0\",\n    \"postcss-loader\": \"^1.1.0\",\n    \"precss\": \"^1.4.0\",\n    \"react-hot-loader\": \"^3.0.0-beta.6\",\n    \"react-router-loader\": \"^0.5.4\",\n    \"redux-logger\": \"^2.7.2\",\n    \"rimraf\": \"^2.5.4\",\n    \"style-loader\": \"^0.13.1\",\n    \"webpack\": \"^2.1.0-beta.25\",\n    \"webpack-dev-server\": \"^2.1.0-beta.9\",\n    \"webpack-module-hot-accept\": \"^1.0.4\"\n  }\n}\n. Output for line https://github.com/postcss/postcss-loader/blob/master/index.js#L63\n{ plugins: [],\n  options:\n   { cwd: '/Users/marcelaraujo/WebstormProjects/webapp-admin',\n     env: undefined,\n     webpack:\n      { version: 2,\n        emitWarning: [Function: emitWarning],\n        emitError: [Function: emitError],\n        exec: [Function: exec],\n        resolve: [Function: resolve],\n        resolveSync: [Function: resolveSync],\n        options: [Object],\n        webpack: true,\n        sourceMap: false,\n        emitFile: [Function: bound ],\n        _module: [Object],\n        _compilation: [Object],\n        _compiler: [Object],\n        fs: [Object],\n        target: 'web'\n        ....\n. Yeap. I'll send to you later ;)\n. ",
    "BerndWessels": "@marcelaraujo not working for me. Anything else you did other than\nconfig.plugins.push(new webpack.LoaderOptionsPlugin({\nI still get PostCSS Config could not be loaded. Please check your PostCSS Config.\n. Great, thank you @gaastonsr .\n. Same issue here, I tried multiple things, but nothing seemed to work.\n{\n            loader: 'postcss-loader',\n            options: {\n              plugins: [\n                autoprefixer({\n                  browsers: [\n                    'last 3 version',\n                    'ie >= 10',\n                  ],\n                })\n              ]\n            }\n          },\n. ",
    "albv": "Solution @marcelaraujo mentioned works for me with webpack 2.1.0-beta.25. No PostCSS Config could not be loaded. Please check your PostCSS Config. warning.\n. ",
    "ImranAhmed": "PostCSS Config could not be loaded. Please check your PostCSS Config.\nI am still seeing this in v2.1.0-beta.27, tried @marcelaraujo solution too with no luck.. ",
    "CrashyBang": "@soluml same issue.. Using webpack v2.2.0-rc.1. PostCSS config:\njs\n{\n    test: /\\.scss$/,\n    exclude: ['/node_modules/'],\n    use: [{\n        loader: 'style-loader',\n        query: {\n            plugins: [],\n        },\n    }, {\n        loader: 'css-loader',\n        query: {\n            sourceMap: true,\n            plugins: [],\n        },\n    }, {\n        loader: 'postcss-loader',\n        query: {\n            plugins: () => ([\n                require('autoprefixer')({\n                    browsers: ['last 2 versions', 'ie > 8'],\n                }),\n            ]),\n            // If you disable the style-loader\n            // the below will work but styles\n            // will not actually be compiled\n            // plugins: [\n            //     require('autoprefixer')({\n            //         browsers: ['last 2 versions', 'ie > 8'],\n            //     }),\n            // ],\n        }\n    }, {\n        loader: 'sass-loader',\n        query: {\n            sourceMap: true,\n            plugins: [],\n        },\n    }]\n},\nPackage details:\njson\n{\n  \"name\": \"hassle\",\n  \"version\": \"0.0.0\",\n  \"description\": \"Hassle an event organisation app\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"dev\": \"NODE_ENV=development node build/server.js\",\n    \"build\": \"NODE_ENV=production webpack --config build/webpack.prod.js\",\n    \"test\": \"echo 'lets implement'\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/Shipwrecked/Hassle.git\"\n  },\n  \"author\": \"Otis Wright\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Shipwrecked/Hassle/issues\"\n  },\n  \"homepage\": \"https://github.com/Shipwrecked/Hassle#readme\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"autoprefixer\": \"^6.5.4\",\n    \"babel-core\": \"^6.2\",\n    \"babel-loader\": \"^6.2\",\n    \"babel-preset-env\": \"^1.0\",\n    \"css-loader\": \"^0.26\",\n    \"debug\": \"git://github.com/visionmedia/debug#master\",\n    \"file-loader\": \"^0.9\",\n    \"node-sass\": \"^4.0\",\n    \"postcss-loader\": \"^1.2.1\",\n    \"rimraf\": \"^2.5\",\n    \"sass-loader\": \"^4.1\",\n    \"style-loader\": \"^0.13\",\n    \"webpack\": \"^2.2.0-rc.1\",\n    \"webpack-dev-server\": \"^2.2.0-rc.0\"\n  }\n}. Hey @ai what does the package.json config look like?. hey @ai chhers. ",
    "DylanPiercey": "@ai do you know if there is a way to change the config file path?. ",
    "LoganBarnett": "For posterity: I just ran into this issue and the fix for me was downgrading file-loader from 0.11.2 to 0.11.1. I've seen nothing to indicate the degree or method of involvement.. ",
    "mscienski": "Thanks for the tip about the plugin order, I've updated that.\nSo my main problem is still [TypeError: [object Object] must be a function, did you require() it ?]\nwhen I use es6 style imports for my styles: import styles from 'App/SearchSuggestions/SuggestedTerms/SuggestedTerms.css';\nAs I mentioned, I've tried both es-css-modules and postcss-modules plugins, but neither worked for me.\n. Here is my current production webpack config: \nhttps://gist.github.com/mscienski/5815c97a3bb4018e7646030361d9e1b0\n. Unfortunately that doesn't seem to have worked, using either config in my webpack file, nor using postcss.config.js.\nI appreciate your help to this point. I'm going to pause for now, and try again after the bug is fixed (in fact, I can help try to track it down and submit a PR).\n. Hmm, based on the output, it appears that my CSS is not being transformed. With the cssnext plugin defined, I'd expect\n```\n:root {\n    --os-base-url: \"\";\n/* IMAGE URL - this should be used for 99.9% of images that you reference */\n--os-image-url: \"var(--os-base-url)/img/mxc\";\n\n```\nto not be in my bundle, and instead for the custom properties to be applied inline.\nI do continue to see [TypeError: [object Object] must be a function, did you require() it ?] in the console.\n. I'm going to go ahead and close this issue, since it looks like I'm dependant on a few updates in my toolchain. I'll see what I can do to help solve the aforementioned bugs.\nThanks again.\n. ",
    "thox": "This appears to be closed, but FWIW I got this message to go away by adding a postcss property to my webpack config object that requires the postcss config file:\nwebpack.config.js:\nmodule.exports = {\n    ...\n    postcss: require('./postcss.config.js'),\n    ...\n}\n. @Skilgarriff Did you try adding the line to your webpack.config.js as I demonstrated above your comment?\n. ",
    "kilpatty": "I'm having this exact same issue while copy/pasting the code from the Readme :/\n. @spectralsun I did - I've done a lot more testing and it turns out that postcss-next and precss both break and postcss configuration. \nCurrently I have my setup working when I only load two plugins - postcss-simple-import, and postcss-simple-vars. If I add either precss or postcss-cssnext then all the other plugins stop working as well.\n. @michael-ciniawsky Yes, sorry about that - I added precss in while working in the Github editor as it wasn't still in my code, but I had tried it earlier. \n. @michael-ciniawsky No worries! hahaha I'll try and report back\nEdit: No luck with that :/ throws some crazy errors.\n. TypeError: [object Object] must be a function, did you require() it ?\n    at /Users/Sean/Sites/Sean Kilgarriff/www/node_modules/postcss-load-plugins/lib/plugins.js:23:17\n    at Array.forEach (native)\n    at plugins (/Users/Sean/Sites/Sean Kilgarriff/www/node_modules/postcss-load-plugins/lib/plugins.js:21:15)\n    at /Users/Sean/Sites/Sean Kilgarriff/www/node_modules/postcss-load-config/index.js:67:18\n@ai \nHere is a stack trace for when I include postcss-cssnext as a plugin. \n@michael-ciniawsky No worries, I appreciate you working on it! No new information - I have basically recreated all of the functionality that I needed from these two plugins with other smaller plugins and not one of them has throw an error yet. Only getting broken Postcss/errors when I include one of those two. \n. ",
    "shjyh": "here's my webpack.config.js\n``` js\nconst path = require('path');\nconst webpack = require('webpack');\nconst Md5HashPlugin = require('webpack-md5-hash');\nconst autoprefixer = require('autoprefixer');\nfunction getPostcssPlugins(){\n    return [\n        autoprefixer({\n            cascade : false,\n            browser : ['Chrome >= 49', 'Firefox >= 49', 'Edge >= 13']\n        })\n    ]\n}\nconst {DEBUG,readJson,commonPath,webpackPlugins:{StatsWritterPlugin}} = require('../helper');\nconst babelrc = readJson(path.resolve(__dirname,'./.babelrc'));\nconst publicPath = '/resource/';\nconst vendor = ['vue','vue-router'];\nmodule.exports = function (name){\nconst config = {\n    plugins:[\n    ]\n};\n\nswitch(name){\n    case 'vendor':\n        config.entry = {vendor};\n        config.output={\n            path : path.resolve(__dirname, './web/resource'),\n            filename : DEBUG?'[name].hash.js':'[name].[chunkhash].js',\n            library:'[name]_[chunkhash]',\n            publicPath\n        };\n        config.plugins.push(new webpack.DllPlugin({\n            path:'./.manifest/vendor.manifest.json',\n            name:'[name]_[chunkhash]',\n            context:__dirname\n        }));\n        config.plugins.push(new StatsWritterPlugin(path.resolve(__dirname,'./.manifest/vendor.stats.json'),{\n            source:false,\n            modules:false,\n            children:false,\n            chunks:false\n        }));\n        break;\n    default:\n        config.entry = {app:'./resource/app.entry.js'};\n        config.output={\n            path:path.resolve(__dirname,'./web/resource'),\n            filename:DEBUG?'app.hash.js':'app.[chunkhash].js',\n            publicPath\n        };\n        config.module={\n            rules : [\n                {\n                    test : /\\.js$/,\n                    include:[path.resolve(__dirname,'./resource'),commonPath],\n                    loader : 'babel-loader',\n                },\n                {\n                    test : /\\.scss$/,\n                    use : [\n                        'style-loader',\n                        `css-loader${DEBUG ? '' : '?minimize'}`,\n                        {\n                            loader : 'postcss-loader',\n                            options : {\n                                plugins:getPostcssPlugins\n                            }\n                        },\n                        'sass-loader'\n                    ]\n                },\n                {\n                    test : /\\.(png|jpg|svg)$/,\n                    loader : 'file-loader',\n                    options : {\n                        name : 'assets/[hash].[ext]',\n                        publicPath\n                    }\n                },\n                {\n                    test : /\\.vue$/,\n                    loader : 'vue-loader',\n                    options : {\n                        postcss : getPostcssPlugins(),\n                        loaders : {\n                            js : 'babel-loader',\n                            sass: `style-loader!css-loader${DEBUG?'':'?minimize'}!sass-loader`\n                        }\n                    }\n                }\n            ]\n        };\n        config.resolve={\n            extensions:['.js','.json','.vue'],\n            alias:{\n                common:commonPath\n            }\n        };\n        if(babelrc) config.module.rules[0].options = babelrc;\n\n        config.plugins.push(new webpack.DefinePlugin({\n            DEBUG\n        }));\n        config.plugins.push(new webpack.DllReferencePlugin({\n            context:__dirname,\n            manifest:require('./.manifest/vendor.manifest.json')\n        }));\n\n        if(DEBUG){\n            config.watch = true;\n            config.watchOptions = {\n                aggregateTimeout : 500,\n                ignored : /node_modules/\n            };\n            config.devtool = 'inline-source-map';\n        }\n        config.plugins.push(new StatsWritterPlugin(path.resolve(__dirname,'./.manifest/app.stats.json'),{\n            source:false,\n            modules:false,\n            children:false,\n            chunks:false\n        }));\n        break;\n}\n\n\nif (!DEBUG){\n    config.plugins.push(new webpack.optimize.UglifyJsPlugin({\n        compress : { warnings : false },\n        output : { comments : false },\n        sourceMap : false\n    }));\n    config.plugins.push(\n        new webpack.DefinePlugin({\n            'process.env' : {\n                NODE_ENV : '\"production\"'\n            }\n        })\n    );\n    config.plugins.push(new webpack.optimize.OccurrenceOrderPlugin());\n    config.plugins.push(new webpack.optimize.DedupePlugin());\n}\n\nconfig.plugins.push(new Md5HashPlugin());\n\nreturn config;\n\n};\n``\n. great, and now i usepostcss.config.js` to config my options. ",
    "tleunen": "I'm experiencing the same issue\n\nwhat do you have at params and loader.query on this line https://github.com/postcss/postcss-loader/blob/master/index.js#L46 ?\n\nloader.query is empty and params is {}.\nHere's my config:\n{\n    loader: 'postcss',\n    options: {\n        plugins: () => [autoprefixer]\n    }\n}\n. ",
    "flying-sheep": "the issue is webpack/webpack#3136\n. ",
    "Imanullah": "if you are using webpack 2 \nin plugin webpack config add this \nnew webpack.LoaderOptionsPlugin({\n        options: {\n            postcss: [\n                autoprefixer({\n                    browsers: ['last 2 version']\n                })\n            ]\n        }\n    })\n. ",
    "cebor": "@ai whats wrong with LoaderOptionsPlugin? Does it not work the same?. ",
    "kmiyashiro": "I am getting this problem and webpack 2 has been released.. \nwebpack.config.babel.js\n```js\n// bable.js extension tells babel-register to process this with babel\nconst path = require('path');\nconst webpack = require('webpack');\nconst merge = require('webpack-merge');\nconst HtmlPlugin = require('html-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n// npm script\nconst SEGMENT_KEY = process.env.BEER_SEGMENT_KEY;\nconst TARGET = process.env.npm_lifecycle_event;\nconst PATHS = {\n  app: path.join(__dirname, 'app'),\n  build: path.join(__dirname, 'build'),\n};\nconst commonHtmlConfig = {\n  title: 'Beer Feels',\n  appMountId: 'root',\n  mobile: true,\n  template: 'templates/index.html',\n  inject: false,\n  segmentKey: SEGMENT_KEY,\n};\nconst common = {\n  entry: {\n    app: PATHS.app,\n  },\n  resolve: {\n    extensions: ['.js', '.jsx'],\n    modules: [\n      PATHS.app,\n      'node_modules',\n    ],\n    alias: {\n      beerfeels: PATHS.app,\n    },\n  },\n  output: {\n    path: PATHS.build,\n    filename: 'app.js',\n  },\n  module: {\n    rules: [\n      {\n        test: /.css$/,\n        use: [\n          'style-loader',\n          'css-loader',\n        ],\n        include: PATHS.app,\n      },\n      {\n        test: /.jsx?$/,\n        use: 'babel-loader',\n        include: PATHS.app,\n      },\n    ],\n  },\n  plugins: [\n    new webpack.EnvironmentPlugin([\n      'BEER_FEELS_API_URL',\n    ]),\n  ],\n};\nif (TARGET === 'start' || !TARGET) {\n  module.exports = merge.smart(common, {\n    output: {\n      publicPath: 'http://localhost:8080/',\n    },\n    // https://webpack.github.io/docs/webpack-dev-server.html\n    devServer: {\n      contentBase: PATHS.build,\n      historyApiFallback: true,\n      hot: true,\n      inline: true,\n  stats: 'errors-only',\n  host: process.env.HOST,\n  port: process.env.PORT,\n},\nmodule: {\n  rules: [\n    {\n      test: /\\.scss$/,\n      use: [\n        'style-loader',\n        'css-loader',\n        {\n          loader: 'postcss-loader',\n          options: {\n            plugins() {\n              return [\n                require('autoprefixer')({\n                  browsers: ['last 2 versions'],\n                  remove: false,\n                }),\n              ];\n            },\n          },\n        },\n        {\n          loader: 'sass-loader',\n          options: {\n            includePaths: ['node_modules'],\n          },\n        },\n      ],\n      include: PATHS.app,\n    },\n  ],\n},\n// devtool: 'eval-source-map',\nplugins: [\n  new HtmlPlugin(Object.assign({\n    cache: true,\n  }, commonHtmlConfig)),\n  new webpack.HotModuleReplacementPlugin(),\n],\n\n});\n}\nif (TARGET === 'build') {\n  module.exports = merge.smart(common, {\n    module: {\n      rules: [\n        {\n          test: /.scss$/,\n          use: ExtractTextPlugin.extract({\n            fallback: 'style-loader',\n            use: [\n              'style-loader',\n              'css-loader',\n              {\n                loader: 'postcss-loader',\n                options: {\n                  plugins() {\n                    return [\n                      require('autoprefixer')({\n                        browsers: ['last 2 versions'],\n                        remove: false,\n                      }),\n                    ];\n                  },\n                },\n              },\n              {\n                loader: 'sass-loader',\n                options: {\n                  includePaths: ['node_modules'],\n                },\n              },\n            ],\n          }),\n          include: PATHS.app,\n        },\n      ],\n    },\nplugins: [\n  new webpack.optimize.UglifyJsPlugin({\n    sourceMap: true,\n  }),\n  new webpack.DefinePlugin({\n    'process.env': {\n      NODE_ENV: JSON.stringify('production'),\n    },\n  }),\n  new HtmlPlugin(Object.assign({\n    hash: true,\n  }, commonHtmlConfig)),\n  new ExtractTextPlugin('style/main.css'),\n],\n\n});\n}\n```\n. @michael-ciniawsky thanks! It may have been the style-loader that was causing the issue? I removed it and added the importLoaders options to the css-loaders and it works now. Thanks!. ",
    "zhengjunxiang": "@shjyh  Hello, you can try this:\n```\nconst Webpack = require('webpack');\nconst Autoprefixer = require('autoprefixer');\nnew Webpack.LoaderOptionsPlugin({ options: { postcss: [ Autoprefixer({\n    browsers: ['Chrome >= 49', 'Firefox >= 49', 'Edge >= 11', 'ie >= 9']\n  }) ] } })\n``\nIt's out of usepostcss.config.js.\nI added it to theplugins` options and it works now. Thanks!. ",
    "mythz": "I'm getting the same error with the latest version of postcss-loader whilst configuring it in postcss options in LoaderOptionsPlugin. \nThe error is resolved by putting an empty postcss.config.js file in my project's root but it's absurd I need to pollute my source folder with empty config files, so I just reverted back to:\n\"postcss-loader\": \"^1.3.3\",\n\ninstead, which doesn't have this issue.. Had the same issue after installing the latest postcss-loader, so I reverted back to:\n\"postcss-loader\": \"^1.3.3\",. Same behavior as @rolele, v2.0.2 is still generates this error even when I have:\n\njs\nnew webpack.LoaderOptionsPlugin({\n    options: {\n        postcss: [\n            require('precss'),\n            require('autoprefixer')\n        ]\n    }\n}),\nThis works with v2.0.2 though:\njs\n    loader: ExtractTextPlugin.extract({\n        fallback: 'raw-loader',\n        use: [\n            'css-loader' + (isProd ? '?minimize' : ''), \n            {loader: 'postcss-loader', options: { plugins: () => [ require('precss'), require('autoprefixer') ] }}, \n            'sass-loader'\n        ]\n    }). What's the best way to maintain config in webpack.config so we can avoid polluting our projects with a more config files?\nThis works when you only need to define it for one rule:\njs\n{loader: 'postcss-loader', options: { plugins: () => [ require('precss'), require('autoprefixer') ] }},\nBut it gets unwieldy when you have to apply it on multiple rules, what's the best way to define it once in a central location in webpack.config and have it applies to all postcss-loader rules?\n. ",
    "wZi": "this work for me. hope it is helpful. ",
    "pirelenito": "This worked for me https://github.com/webpack-contrib/css-loader/issues/413#issuecomment-283944881. ",
    "wonderbeyond": "+1 also for postcss-smart-import. Many thanks!. ",
    "hiroppy": "Oops... I overlooked the config file in docs. Thanks.\n. ",
    "JiDai": "Ok, thanks.\n. Ok, I will try with my config\n. Thanks\n. ",
    "barraponto": "@ai do you know any example of a webpack-config with postcss-loader but no css-loader?. @michael-ciniawsky css-loader also parses imports (postcss-import). I'm trying to document a no-css-loader solution, but I didn't manage to get it working yet. do you have a working example?. Sorry, my bad. I had set {map: true} in the options, but I forgot to set the proper devtool in webpack.\nThanks for the attention :). Neutrino is a Webpack-wrapper which allows presets to be added and edited to make project setup easier. The neutrino-postcss-preset is designed to ship with a configuration in-code, without relying on any postcss.config.js.. ",
    "princed": "Looks like it happens when dynamic returns Array as described in README.\nWhen object is returned, everything works as expected:\nmodule.exports = ctx => ({\n  plugins: [\n    require('autoprefixer')\n  ]\n});\n. Yep, I've taken it from README.\nSo it is a README issue probably.\n. Great, thanks!\n. @michael-ciniawsky I have the same issue with array form of config, although object form works fine. \n~~I've searched for differences between them and it looks like that the bug could be hidden in postcss-load-plugins. It won't work probably because plugin isn't really replaced by plugin.postcss in array. However, I haven't time to check it yet.~~\nUpdate: see my next comment.\n. Actually it works just fine with https://github.com/michael-ciniawsky/postcss-load-plugins/pull/17.\nSo all we need is to publish latest version if postcss-load-plugins as a patch or minor version.\n@michael-ciniawsky Could you please do it?\n. ",
    "yasserkaddour": "I have the same error with the same trace while trying to upgrade to webpack 2:\nI am using:\n    \"webpack\": \"2.1.0-beta.27\",\n    \"postcss-cssnext\": \"^2.8.0\",\n    \"postcss-loader\": \"1.1.0\",\n    \"precss\": \"^1.4.0\",\n    \"doiuse\": \"^2.5.0\",\nMy postcss.config.js\nmodule.exports = {\n    plugins: [\n        require('precss'),\n        require('postcss-cssnext')(),\n        require('doiuse')({\n            browsers: ['ie >= 11', '> 1%'],\n            ignore: [\n                'flexbox',\n                'border-radius'\n            ]\n        })\n    ]\n}\nWhen I remove the parenthesis for the options like this, \nplugins: [\n        require('precss'),\n        require('postcss-cssnext'),\n        require('doiuse')\n    ]\nIt works.\nThank you for all your awesome contribution.\n. Thanks @princed, indeed this work for me\nmodule.exports = {\n    plugins: {\n        'precss': {},\n        'postcss-cssnext': {},\n        'doiuse': {\n            browsers: ['ie >= 11', '> 1%'],\n            ignore: [\n                'flexbox',\n                'border-radius'\n            ]\n        }\n    }\n}\n. ",
    "ntwb": "@ai, postcss-load-config already has engines defined: https://github.com/michael-ciniawsky/postcss-load-config/blob/master/package.json#L5\nHere's the details of Travis CI job I noticed this in:  https://travis-ci.org/stylelint/stylelint-demo/jobs/175820550#L172\n. > @ntwb so, do we need a engines in postcss-loader if it is already in postcss-load-config?\nYes, which is what this PR fixes \ud83d\ude04 \n. If a repo you depend upon requires NodeJS v7.x, then this repo should also state that the minimum requirement is NodeJS v7.x\nIn this case though postcss-load-config has a minimum NPM requirement for NPM v3.x, so that same minimum requirement should be included in postcss-loader\nEdit: You cannot use postcss-loader if you use NPM 2.x, you must have NPM 3.x\n. They will no longer get the NPM warning\n. Thanks :)\n. ",
    "jfmercer": "@michael-ciniawsky \nThanks for the swift reply. I changed the loader config exactly as suggested, but still get the exact same error output. I also replaced the fat arrow with a good ole' fashioned anonymous function (which should be identical to the fat arrow), but it still didn't work. \njs\n          options: {\n            // sourceMap: true,\n            plugins: function(ctx) {\n              return [\n                // requires\n              ];\n            }\nAny ideas? I don't know why it still says PostCSS Config could not be loaded. Please check your PostCSS Config. when PostCSS is configured in the options object.\n. @michael-ciniawsky Both webpack-dev-server and webpack are building & working as expected. I still see a lot of this in the output, but the postcss-loader now works:\nsh\n60% building modules 601/717 modules 116 active ...de_modules/object-keys/isArguments.jsPostCSS Config could not be loaded. Please check your PostCSS Config.\nMany thanks for your help. Should I add some documentation to this project regarding the issue I encountered?\n. ",
    "sainthkh": "As for your question, it seems that you cannot change your .babelrc path.\nActually, I don't use .babelrc file and I included the babel options in my webpack.config.js. In there, there are css-loader for CSS Modules and postcss-loader for those CSS files. The loader setting is like below.\nloaders: [{  \n    test: path.join(__dirname, '..', 'app'),  \n    loader: ['babel-loader'],  \n    query: {\n        cacheDirectory: './temp/babel_cache',\n        presets: ['react', 'es2015']\n    }\n}, {\n    test: /\\.css$/,\n    loaders: [\n        'style?sourceMap',\n        'css?modules&importLoaders=1&localIdentName=[path]___[name]__[local]___[hash:base64:5]',\n        'postcss?config=./build/postcss.config.js',\n    ]\n}]\nAnd below is my project folder.\n+app\n- Various Components and code\n+build\n-webpack.config.js\n-pocstcss.config.js\n+static\n-various static assets\nindex.js\npackage.json\nThere are some people like me who love organizing config files in one place. I think it's not a harmful option. \nAs for webpack-dev-server, it has --config option, too. So, it works perfect for the people like me. \np.s. \nI checked the travis CI and it seems that I ignored the coding convention. If you decide to accept this PR, I will change that code to meet the convention. . Good. \nI agree that my personal preference(separate folder for config) is a bit minor. So, I think that your solution is the best for everyone. \nThen, I will send you another PR that meets code convention. . @michael-ciniawsky Yes, that's possible. However, PostCSS has a lot of configuration. In json file, you cannot handle them. \nSo, if you want to move postcss.config.js to ./config and handle the configuration, the code change is necessary. . @michael-ciniawsky I've checked it out and there was no problem. . ",
    "QuantumInformation": "roger. Ok roger! . @michael-ciniawsky sorry forget it I made the royal error of forgetting to change the link to a script tag when moving from extracttextplugin, it works fine.. I see, I was actually not needing to move any assets into the bundle, the files already exist on the server.. I want webpack to bundle the postcss files, but not the assets they refer to (except other pcss files)\nSo for this structure I don't want webpack to bundle the fonts and img folder (I use relative paths):\n\nI tried:\noutput: {\n    path: PATHS.build,\n    filename: '[name].js',\n    publicPath: '/img'\n  },\nbut that didn't effect the error for the .png. if I do that I get:\n\n. Great thanks for that!Works fine!. It works fine with css-loader.\n. I'll make an example if that helps?. So the issue only occurs when the component that is exported from the library is added to the page:\nIf this line is commented out the error doesn't occur:\nhttps://github.com/quantumjs/smart-terminal/blob/master/demo/typescriptImport/index.ts#L5\nThe font is imported here:\nhttps://github.com/quantumjs/smart-terminal/blob/master/src/SmartTerminal.pcss#L4\nconfig:\nhttps://github.com/quantumjs/smart-terminal/blob/master/postcss.config.js\n. think i was fine in v2.2. ",
    "gnarf": ":/ sorry I coulda sworn I had updated to latest of both of these things before filing.... ",
    "jrmlstfMt": "I agree with you, especially point 1.\nBut I have a lot of files : webpack (x4), eslint, postcss, styelint, karma, protractor, etc. So i'm using a config dir to organize it a bit.\nESLint is implementing this feature https://github.com/MoOx/eslint-loader#options. No more rational than putting files in a directory to keep them organized. Which is why directories exists I guess ;-). Yep package.json is a solution. But less powerful than a js function.\nHaving a .config/* dir in project root is a good convention I agree.\nMaybe this kind of convention should be supported by the guys behind\nhttps://github.com/davidtheclark/cosmiconfig ?\n. ",
    "hh9527": "@michael-ciniawsky \ncss-loader provide the following features:\n- module syntax & ident name mapping\n- optimization of css (by css-nano@3)\nand the compile process follows this:\n.(less|styl) files\n  -> (less|styl)-loader\n  -> postcss-loader (autoprefixer)\n  -> css-loader\n  -> style-loader\nthese features can be replaced by relative postcss plugins:\n- module syntax & ident name mapping: postcss-modules\n- optimization: css-nano@latest\nthe the process become:\n.(less|styl) files\n  -> (less|styl)-loader\n  -> postcss-loader (autoprefixer + postcss-modules + css-nano)\n  -> style-loader\n. ",
    "kechol": "Oh, I see. Sorry for interrupting you \ud83d\ude13. ",
    "jorrit": "Thanks for explaining!. I still have a question about this: the boilerplate uses version ^1.1.1 and it seems the pack option is still present and used in the postcss-loader code and tests. Also, changing the option does have an effect. Also, I can't find any documentation about 'PostCSS common config'.. ",
    "TrySound": "Hm.. I see https://github.com/postcss/postcss-loader/pull/140 But warnings are not affects build process. So this change doesn't make sense.. Add postcss config to postcss.config.js as specified in documentation. Shouldn't postcss-modules use messages for output instead of callback for this feature?\nBtw, this works great in modular-css. @michael-ciniawsky Yep. Only url in properties.. For @import I guess we need another plugin converter. . Yep. I'm gonna do this in next few days.. Did you already run new loader?. Did you check url plugin?. It's not ready yet. It can't handle default word.. Just import prop and default value.. Nope, tokens will be pushed to messages. It's better way, than monkey patching.. Maybe. Didn't refactored icss plugin yet.. @michael-ciniawsky default should work if you will interpret non-object require('request') result as \njs\nconst importeeTokens = {\n  default: requestResult\n}\nor\njs\nimport * as result from 'request.png';. Nope. I introduced minimal dumb behavior. All magic will happen in your own fetcher.. @michael-ciniawsky It's not wanted implementation. Just a stub. The feature is that you will let webpack resolve your url content.. With stylesheet it will be implemented in webpack core.. I'd like to make them disablable (fogot the word). @michael-ciniawsky Not everybody want to use this url processor and the same with imports.. Maybe we better need configurable plugin pack for css-modules.. Yeah. I'm about it.. Plugin order won't be a problem. Each stuff should have only own responsibility. I for example always disable url in css loader. Maybe just because it has some problems, but still a lot of people converts their build steps and may have different url process.. Well I meant icss plugins order. But yeah this case will work.. I think plugin pack is good solution about order. Just pass pack in the end.. @LeG3nDz What do you mean If i remove var postcss? Do you use any plugins then?. @sukazavr postcss-loader works correctly. But postcss-js requires js object value, not string with module.exports = {}. Look at val-loader. I don't think it's a good idea. Fragmenting config sometimes feels like abuse. Such behavior will confuse folks. Gulp postcss have both ways afaik. . Just add priority in options over config. Without merging. It's simplest and bulletproof way.. What is ident thing? Didin't find even in source code.. @evilebottnawi Why restrict version? To anger user with noise messages on webpack 4 and 5 release?. Peer warnings are really useless and noisy IMHO.. Maybe. But specifying all compatible version can be painful with betas at least which don't seem work with ranges.. All problems was with webpack 2 prereleases.. Don't know current behavior but previously such noises broke my deploy.. @mahnunchik The problem is that you are trying to run es-modules in node. postcss-js requires a value, not a string with code. postcss-loader checks if postcss-js is used and evaluate that code (runs in node). The result is passed to postcss-js. Use commonjs if you like this style.. Because Babel defined after postcss-loader. Also you need to add css extension to test.. @jimryanzulueta What do you mean by \"still\"? We don't know the context.. ",
    "komlev": "Done. ",
    "samjbmason": "Is there a way to specify the postcss config location as even with adding the configuration to webpack 2\njs\n{\n        test: /\\.(css|scss)$/,\n        use: [\n          { loader: 'style-loader' },\n          { loader: 'css-loader' },\n          {\n            loader: 'postcss-loader',\n            options: {\n              plugins: function () {\n                return [\n                  require('autoprefixer')({\n                    browsers: [\n                      '>1%',\n                      'last 3 versions',\n                      'Firefox ESR',\n                      'not ie < 9', // React doesn't support IE8 anyway\n                    ]\n                  })\n                ];\n              }\n            }\n          },\n          {\n            loader: 'sass-loader',\n            options: {\n              importLoaders: true\n            }\n          }\n        ]\n      },\nIm still getting an error saying Module build failed: Error: No PostCSS Config found in:. @ai Im not sure I follow what your asking for\n. Ah right yeah sure thing \njs\nundefined { devtool: 'cheap-module-source-map',\n  entry:\n   [ '/Users/samm/Sites/lmn-webpack-config/node_modules/react-dev-utils/webpackHotDevClient.js',\n     './src/js/main.js' ],\n  output:\n   { pathinfo: true,\n     path: '/Users/samm/Sites/design-system/build',\n     publicPath: '/',\n     filename: 'bundle.js',\n     chunkFilename: '[id].bundle.js',\n     library: '',\n     hotUpdateFunction: 'webpackHotUpdate',\n     jsonpFunction: 'webpackJsonp',\n     libraryTarget: 'var',\n     sourceMapFilename: '[file].map[query]',\n     hotUpdateChunkFilename: '[id].[hash].hot-update.js',\n     hotUpdateMainFilename: '[hash].hot-update.json',\n     crossOriginLoading: false,\n     hashFunction: 'md5',\n     hashDigest: 'hex',\n     hashDigestLength: 20,\n     devtoolLineToLine: false,\n     strictModuleExceptionHandling: false },\n  resolve:\n   { extensions: [ '.js', '.json', '.scss' ],\n     alias:\n      { component: '/Users/samm/Sites/design-system/node_modules/@lostmyname/components/dist',\n        chameleon: '/Users/samm/Sites/design-system/node_modules/chameleon-sass/assets/stylesheets',\n        css: '/Users/samm/Sites/design-system/node_modules/@lostmyname/css/scss',\n        fonts: '/Users/samm/Sites/design-system/node_modules/@lostmyname/css/fonts',\n        scss: '/Users/samm/Sites/design-system/src/scss',\n        helpers: '/Users/samm/Sites/design-system/src/js/helpers' },\n     modules:\n      [ '/Users/samm/Sites/design-system/src',\n        'node_modules',\n        '/Users/samm/Sites/design-system/node_modules' ],\n     unsafeCache: true,\n     aliasFields: [ 'browser' ],\n     mainFields: [ 'browser', 'module', 'main' ] },\n  resolveLoader:\n   { modules: [ '/Users/samm/Sites/lmn-webpack-config/node_modules' ],\n     unsafeCache: true,\n     mainFields: [ 'loader', 'main' ],\n     extensions: [ '.js', '.json' ] },\n  module:\n   { rules: [ [Object], [Object], [Object], [Object], [Object], [Object] ],\n     unknownContextRequest: '.',\n     unknownContextRegExp: false,\n     unknownContextRecursive: true,\n     unknownContextCritical: true,\n     exprContextRequest: '.',\n     exprContextRegExp: false,\n     exprContextRecursive: true,\n     exprContextCritical: true,\n     wrappedContextRegExp: /.*/,\n     wrappedContextRecursive: true,\n     wrappedContextCritical: false,\n     unsafeCache: true },\n  plugins:\n   [ OccurrenceOrderPlugin { preferEntry: undefined },\n     EnvironmentPlugin { keys: [Object] },\n     HotModuleReplacementPlugin { multiStep: undefined, fullBuildTimeout: 200 } ],\n  node:\n   { fs: 'empty',\n     net: 'empty',\n     tls: 'empty',\n     console: false,\n     process: true,\n     global: true,\n     Buffer: true,\n     setImmediate: true,\n     __filename: 'mock',\n     __dirname: 'mock' },\n  cache: true,\n  context: '/Users/samm/Sites/design-system',\n  target: 'web',\n  performance:\n   { maxAssetSize: 250000,\n     maxEntrypointSize: 250000,\n     hints: 'warning' } }. Additional info is that this is running the latest webpack 2 RC. Getting undefined logged out. Yeah sure did here is the code\n```\nvar loader = this;\n    var file   = loader.resourcePath;\n    var params = loaderUtils.parseQuery(loader.query);\nvar options  = params.plugins || loader.options.postcss;\nconsole.log(options)\nvar pack     = params.pack;\nvar callback = loader.async();\n\n``. @ai Still gettingundefinedafter addingvar options  = params.plugins || loader.postcss || loader.options.postcss;. Brilliant thanks, do you know what kind of info they will need when I log the issue?\n. @michael-ciniawsky Yeah it works when i removepostcss-loader. @michael-ciniawsky Unfortunately using apostcss.config.jsdoesnt work as Im creating the webpack within another npm module similar to howcreate-react-app` works. \nHowever, I can confirm LoaderOptionsPlugin works for now \ud83d\udc4d \nThanks for all your help on this . @ai I agree LoaderOPtionsPlugin is not a long term solution but was useful that I could use it, before the bug gets fixed.. ",
    "Velenir": "Yes, in case of linting in a preloader it would be enough to check for enforce. But there may be cases of postcss-loader in different arbitrary positions in the loaders' chain, so some kind of loader specialization would still be necessary.\nAlso, currently in the context a preloader is simply appended to the loaders array with nothing to distinguish it from a normal first loader -- both would be first in the chain (first from the right in the array) -- no enforce property, no nothing. So loaderIndex === loaders.length -1 doesn't guarantee that the current loader is pre.. ",
    "AlexanderTserkovniy": "So, when I remove extract-text-plugin the issue is seems to gone, but I am not entirely sure that it does not depend on postcss.. Found solution here if someone still having this problem. Works perfectly!\nSo my changes looks like this:\njs\n  const ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n  module.exports.plugins.push(new ExtractTextPlugin(\"styles.css\"));\n  module.exports.module.rules[1] = {\n    test: /\\.css$/,\n    exclude: /node_modules/,\n    loader: ExtractTextPlugin.extract({\n      fallbackLoader: 'style-loader',\n      loader: [\n        'css-loader?modules&importLoaders=1&localIdentName=[path]___[name]__[local]___[hash:base64:5]',\n        'postcss-loader'\n      ]\n    })\n  };\nThanks guys!\nbtw @michael-ciniawsky webpack -p does set the NODE_ENV=production but not for webpack.config.js itself, that's why it have to be explicitly added.. @michael-ciniawsky nope, does not work either. Should probably create a repo.. Seems like it started working with latest version of loader as well as following postcss.config.js:\njs\nmodule.exports = {\n  plugins: {\n    'postcss-import': {},\n    'postcss-cssnext': {\n      browsers: ['last 2 versions', '> 5%'],\n    },\n  },\n};. Thanks @michael-ciniawsky as soon as you figure out everything else, you can close the ticket.. Yes it works, here are some details:\npostcss.config.js\njs\nmodule.exports = {\n  plugins: {\n    'postcss-import': {},\n    'postcss-cssnext': {\n      browsers: ['last 2 versions', '> 5%'],\n    },\n    'postcss-nested': {}\n  },\n};\npackage.json\njson\n\"dependencies\": {\n    \"react\": \"^15.4.2\",\n    \"react-dom\": \"^15.4.2\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^6.13.2\",\n    \"babel-loader\": \"^6.2.10\",\n    \"babel-preset-es2015\": \"^6.13.2\",\n    \"babel-preset-react\": \"^6.11.1\",\n    \"babel-preset-stage-2\": \"^6.13.0\",\n    \"css-loader\": \"^0.23.1\",\n    \"extract-text-webpack-plugin\": \"^2.0.0-beta.5\",\n    \"postcss-cssnext\": \"^2.9.0\",\n    \"postcss-import\": \"^9.1.0\",\n    \"postcss-loader\": \"^1.2.2\",\n    \"postcss-nested\": \"^1.0.0\",\n    \"react-css-modules\": \"^4.1.0\",\n    \"react-hot-loader\": \"^3.0.0-beta.6\",\n    \"style-loader\": \"^0.13.1\",\n    \"webpack\": \"^2.2.0-rc.7\",\n    \"webpack-dev-server\": \"^2.2.0-rc.0\"\n  }\nFull webpack.config.js in case:\n```js\nconst {resolve} = require('path');\nconst webpack = require('webpack');\nmodule.exports = {\n  context: resolve(__dirname, 'src'),\n  entry: [\n    'react-hot-loader/patch',\n    // activate HMR for React\n'webpack-dev-server/client?http://localhost:8080',\n// bundle the client for webpack-dev-server\n// and connect to the provided endpoint\n\n'webpack/hot/only-dev-server',\n// bundle the client for hot reloading\n// only- means to only hot reload for successful updates\n\nresolve(__dirname, 'index.js')\n\n],\n  output: {\n    path: resolve(__dirname, 'dist'),\n    filename: 'bundle.js',\n    publicPath: '/'\n  },\n  module: {\n    rules: [\n      {\n        test: /.jsx?$/,\n        use: [\n          'babel-loader',\n        ],\n        exclude: /node_modules/\n      },\n      {\n        test: /.css$/,\n        use: [\n          'style-loader',\n          'css-loader?sourceMap&modules&importLoaders=1&localIdentName=[path][name]_[local]_[hash:base64:5]',\n          'postcss-loader'\n        ],\n      }\n    ]\n  },\n  resolve: {\n    extensions: ['.js', '.json', '.jsx']\n  },\n  devServer: {\n    hot: true,\n    // enable HMR on the server\ncontentBase: resolve(__dirname, 'dist'),\n// match the output path\n\npublicPath: '/'\n// match the output `publicPath`\n\n},\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    // enable HMR globally\nnew webpack.NamedModulesPlugin(),\n// prints more readable module names in the browser console on HMR updates\n\n],\n  devtool: 'cheap-module-eval-source-map'\n};\n```. ",
    "AndreyPatseiko": "If use weback version 4, you can need install url-loader from npm and use rule - \n{\n        test: /\\.(png|woff|woff2|eot|ttf|svg)$/,\n        use: {\n          loader: 'url-loader?limit=100000',\n        },\n      }. ",
    "AMar4enko": "Got stuck with this one as well. After digging around a while i narrowed it down - style-loader.\nWhile generating JS source it uses loaderUtils.stringify to stringify loader context. Having this done further loaders will loose all the options, defined locally, except of query params (can be noticed in webpack output btw):\n./~/css-loader?{\"test\":\"1\"}!./~/postcss-loader?{}!./src/style/style.css\nnotice how style-loader passes call down to postcss-loader supplying it with empty query obj.\nThe workaround is to pass config file name to postcss-loader via query param:\nuse: [\n    'style-loader',\n    'css-loader',\n    'postcss-loader?config=postcss.config.js'\n]\nthen delegate all the magic to the config file. As it turned out config file can export function, which will be invoked with webpack env variable first argument - useful if one wants to use postcss-smart-import\nmodule.exports = function(webpack) {\n  return {\n    plugins: [\n        ...\n        atImport({\n          addDependencyTo: webpack\n        }),\n. @michael-ciniawsky keeping it brief - it's impossible to pass options to postcss-loader via in-place loader configuration while using style-loader, so your Webpack 2 options example will not work with style-loader:\n[\n   'style-loader',\n   'css-loader',\n    {\n      loader: 'postcss-loader',\n      // Options will have no effect\n      options: {\n        plugins: function () {\n          return [\n            require('precss'),\n            require('autoprefixer')\n          ];\n        }\n      }\n    }\n]. @michael-ciniawsky Will do! Thanks for all your hard work, postcss delivers!. ",
    "csmosx": "@michael-ciniawsky thank you for the options.ident = 'postcss' tip.\nIt fixed the \"No PostCSS Config found\" error I couldn't figure out.\nYou said:\n\nI'm currently asking why and if thats the final behavior, if so I will update the docs soon.\n\nI'm interested in that too.\nDid you ask somewhere on Github? If so, could you provide the link?\nThanks.. ",
    "andrebautista": "Pulling my hair out over why this doesn't seem to run the autoprefixer plugin.  Trying to debug the loader also but documentation is pretty poor around how to do that.  Any advice would be greatly appreciated, I've scoured the autoprefixer, postcss, and extract text issue boards to find a solution and this is the closest I've come.\n{\n                test: /\\.less$/,\n                use: ExtractTextPlugin.extract({\n                    fallback: \"style-loader\",\n                    use: [\n                        {\n                            loader: \"css-loader\"\n                        },\n                        {\n                            loader: \"postcss-loader\",\n                            options: {\n                                plugins: function() {\n                                    return [\n                                        require('precss'), //tried with and without this\n                                        require(\"autoprefixer\")\n                                    ];\n                                }\n                            }\n                        },\n                        {\n                            loader: \"less-loader\"\n                        }\n                    ]\n                })\n            }. @michael-ciniawsky 2.4.1.  Are options required?  I previously had this plugin on webpack 1.x and I thought it was working with no values being passed in.. Hmm no dice there.  Here's some of my build, I see nothing about autoprefixer (line 8) but then again I'm not sure if I should.\n[0] ./src/images/globals/sprite-checkbox-radio.svg 1.71 kB {0} [built]\n       [1] ./~/less-loader/stringify.loader.js!./src/less/core/fcGlobals.less 1.37 kB [built]\n       [2] ./~/css-loader/lib/css-base.js 1.51 kB {0} [built]\n       [3] ./~/less-loader/stringify.loader.js!./src/less/core/assets.less 421 bytes [built]\n       [4] ./~/css-loader!./~/remodal/dist/remodal-default-theme.css 5.97 kB {0} [built]\n       [5] ./~/css-loader!./~/remodal/dist/remodal.css 1.84 kB {0} [built]\n       [6] ./src/images/site_images/abc/img_intro-mbl.jpg 20.3 kB {0} [built]\n       [7] ./src/images/site_images/abc/img_intro.jpg 70.1 kB {0} [built]\n       [8] ./~/css-loader!./~/postcss-loader?{}!./~/less-loader!./src/less/main.less 37.6 kB {0} [built]\n       [9] ./~/less-loader/stringify.loader.js!./src/less/core/buttons.less 588 bytes [built]\n      [10] ./~/less-loader/stringify.loader.js!./src/less/core/colors.less 565 bytes [built]\n      [11] ./~/less-loader/stringify.loader.js!./src/less/core/typography.less 913 bytes [built]\n      [13] ./~/less-loader/stringify.loader.js!./src/less/layout/modal.less 2.82 kB [built]\n      [14] ./~/less-loader/stringify.loader.js!./src/less/pages/intro.less 1.45 kB [built]\n      [23] ./~/less-loader/stringify.loader.js!./src/less/widgets/quizStatusBar.less 1.6 kB [built]. Like so?\n```\nWebpack is watching the files\u2026\n(node:134) DeprecationWarning: loaderUtils.parseQuery() received a non-string value which can be problematic, see https://github.com/webpack/loader-utils/issues/56\nparseQuery() will be replaced with getOptions() in the next major version of loader-utils.\nHash: 6c762d33e4e6256bbfd9\nVersion: webpack 2.4.1\nTime: 2941ms\n                 Asset      Size  Chunks                    Chunk Names\n     abcJeanius.js    526 kB       0  [emitted]  [big]  abcJeanius\n      abcEvents.js    313 kB       1  [emitted]  [big]  abcEvents\n    abcLauncher.js   15.1 kB       2  [emitted]         abcLauncher\n    abcJeanius.css    141 kB       0  [emitted]         abcJeanius\n abcJeanius.js.map    649 kB       0  [emitted]         abcJeanius\nabcJeanius.css.map  95 bytes       0  [emitted]         abcJeanius\n  abcEvents.js.map    406 kB       1  [emitted]         abcEvents\nabcLauncher.js.map   17.8 kB       2  [emitted]         abcLauncher\n   [0] ./src/js/site_configs/ag/dev/agUrls.dev.js 373 bytes {0} {1} {2} [built]\n   [1] ./~/jquery/dist/jquery.js 268 kB {0} {1} [built]\n   [2] ./src/js/events/events.js 7.13 kB {0} {1} [built]\n   [3] ./src/js/site_configs/ag/agCore.config.js 1.85 kB {0} {1} {2} [built]\n   [6] ./src/js/core/menu.js 9.2 kB {0} [built]\n  [10] ./src/js/site_configs/ag/agEvents.js 12.9 kB {0} {1} [built]\n  [11] ./src/js/site_configs/ag/agPage.js 2.29 kB {0} {1} [built]\n  [13] ./src/js/badges/fcBadges.js 8.16 kB {0} [built]\n  [14] ./src/js/core/user.js 1.63 kB {0} {2} [built]\n  [17] ./src/less/main.less 41 bytes {0} [built]\n  [18] ./src/js/core/init.js 1.56 kB {0} [built]\n  [19] ./src/js/quiz/quiz.js 5.27 kB {0} [built]\n  [44] ./src/js/abcEvents.js 393 bytes {1} [built]\n  [45] ./src/js/abcJeanius.js 3.5 kB {0} [built]\n  [47] ./src/js/site_configs/ag/dev/agLauncher.dev.js 8.22 kB {2} [built]\n    + 61 hidden modules\nChild extract-text-webpack-plugin:\n       [0] ./src/images/globals/sprite-checkbox-radio.svg 1.71 kB {0} [built]\n       [1] ./~/less-loader/stringify.loader.js!./src/less/core/fcGlobals.less 1.37 kB [built]\n       [2] ./~/css-loader/lib/css-base.js 1.51 kB {0} [built]\n       [3] ./~/less-loader/stringify.loader.js!./src/less/core/assets.less 421 bytes [built]\n       [4] ./~/css-loader!./~/remodal/dist/remodal-default-theme.css 5.97 kB {0} [built]\n       [5] ./~/css-loader!./~/remodal/dist/remodal.css 1.84 kB {0} [built]\n       [6] ./src/images/site_images/ag/ag_img_intro-mbl.jpg 20.3 kB {0} [built]\n       [7] ./src/images/site_images/ag/ag_img_intro.jpg 70.1 kB {0} [built]\n       [8] ./~/css-loader!./~/postcss-loader?{}!./~/less-loader!./src/less/main.less 37.6 kB {0} [built]\n       [9] ./~/less-loader/stringify.loader.js!./src/less/core/buttons.less 588 bytes [built]\n      [10] ./~/less-loader/stringify.loader.js!./src/less/core/colors.less 565 bytes [built]\n      [11] ./~/less-loader/stringify.loader.js!./src/less/core/typography.less 913 bytes [built]\n      [13] ./~/less-loader/stringify.loader.js!./src/less/layout/modal.less 2.82 kB [built]\n      [14] ./~/less-loader/stringify.loader.js!./src/less/pages/intro.less 1.45 kB [built]\n      [23] ./~/less-loader/stringify.loader.js!./src/less/widgets/quizStatusBar.less 1.6 kB [built]\n        + 9 hidden modules```. webpack:  2.4.1\nless-loader: 2.2.3\nETWP: 2.1.0\nautoprefixer: 6.7.7. Oh of course, how could I forget that one \ud83d\ude1d \npostcss-loader: 0.13.0. ",
    "detj": "@ai okay, yes you are right.\n@michael-ciniawsky Yeah, I'm using webpack@v1.12.14. Sorry, I should have explained my problem in detail.\nSo, my project is based on React Redux Starter Kit. It uses webpack@v1.x and has the following postcss config in its webpack config.\nwebpackConfig.postcss = [\n  cssnano({\n    autoprefixer : {\n      add      : true,\n      remove   : true,\n      browsers : ['last 2 versions']\n    },\n    discardComments : {\n      removeAll : true\n    },\n    discardUnused : false,\n    mergeIdents   : false,\n    reduceIdents  : false,\n    safe          : true,\n    sourcemap     : true\n  })\n]\nI recently moved my project to a new machine and ran npm install (yeah, I should have used yarn, I know, but otherwise I couldn't have discovered issues like these :)). After installing fresh node_modules, npm run test started failing with the following error.\nNo PostCSS Config found in: /path/to/dir/where/style/resides\nI read in the README of postcss-loader and postcss-load-config that the recommended way to now write postcss config is to create a postcss.config.js file in the root directory or any subdirectory as required.\nCreating postcss.config.js and moving the configuration solves my problem, but what I want to understand is why the configuration from webpack not being read?\nAlso, there now seems to be multiple ways of loading postcss config including adding it in package.json or creating .postcssrc file. Is there any difference among them?\nI'm sure I'm missing something, just don't know what exactly :)\nThanks\n. @michael-ciniawsky That makes so much sense! Thank you for the detailed answer :)\nOkay, so I added a few console.logs and here's what I discovered.\nconsole.log(params)\n{}\nconsole.log(options)\nundefined\nI also added more logs to debug further\n```\nvar loader = this;\nconsole.log('loader', loader);\nconsole.log('loader.options', loader.options);\nconsole.log('loader.options.postcss', loader.options.postcss);\n// output\nloader { data: undefined,\n  inputValue: null,\n  query: '',\n  async: [Function: async],\n  callback: [Function] }\nloader.options { output:\n   { filename: 'extract-text-webpack-plugin-output-filename',\n     publicPath: '/karma_webpack//' } }\nloader.options.postcss undefined\n```\nIs this helpful? Let me know if I should do more debugging.. @caseyduquettesc you're right. I did as you said and the tests are passing. But the thing is, tests were passing before and because of some change in this package (my guess), this error started showing up. Anyways, I'll update the react-redux-starter-kit about this development nonetheless. Appreciate it! Thanks.\n@michael-ciniawsky okay, will take a look when I have some time. thanks. \ud83d\udc4d . ",
    "caseyduquettesc": "@detj In that starter project, I noticed for npm run test it uses the karma.config to build and not the webpack.config. The karma config actually doesn't include any postcss options in it. I think if you add postcss: webpackConfig.postcss right below sassLoader : webpackConfig.sassLoader then the postcss config will be passed into your test bundle and should clear your error.\nAlthough, if you're running tests, you probably don't need to waste the extra build time on css processing, so I would just pass {} instead of webpackConfig.postcss. ",
    "artemkaint": "now we have to use ident key in options to pass function\nhttps://webpack.js.org/guides/migrating/#complex-options. ",
    "maratfakhreev": "@ai @artemkaint Same issue, seems like postcss.config.js doesn't work for 2.2.0 . @ai yeah, thx, have found the problem on my side. Loader works correctly.. ",
    "vladshcherbin": "Works for me with webpack 2.2.1:\njs\n{\n  test: /\\.scss$/,\n  use: [\n    ...,\n    {\n      loader: 'postcss-loader',\n      options: {\n        plugins: () => [ require('autoprefixer')({ browsers: ['last 2 versions'] }) ]\n      }\n    },\n    ...\n  ]\n}. ",
    "whisher": "@michael-ciniawsky \nThanks for the quick reply.\nSorry I haven't seen the tilde off \nnow it workish :)\nSorry you can close the issue\n. ",
    "iamvdo": "Fixed in 3.0.1 :+1: . ",
    "willin": "oh yes. thx. ```css\n@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url(MaterialIcons-Regular.eot); / For IE6-8 /\n  src: local('Material Icons'),\n       local('MaterialIcons-Regular'),\n       url(MaterialIcons-Regular.woff2) format('woff2'),\n       url(MaterialIcons-Regular.woff) format('woff'),\n       url(MaterialIcons-Regular.ttf) format('truetype');\n}\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;  / Preferred icon size /\n  display: inline-block;\n  line-height: 1;\n  text-transform: none;\n  letter-spacing: normal;\n  word-wrap: normal;\n  white-space: nowrap;\n  direction: ltr;\n/ Support for all WebKit browsers. /\n  -webkit-font-smoothing: antialiased;\n  / Support for Safari and Chrome. /\n  text-rendering: optimizeLegibility;\n/ Support for Firefox. /\n  -moz-osx-font-smoothing: grayscale;\n/ Support for IE. /\n  font-feature-settings: 'liga';\n}\n```\nERROR in ./assets/fonts/iconfont/material-icons.css\nModule build failed: Error\n    at /Users/willin/Documents/js.cool/hosts.js/node_modules/webpack/lib/NormalModule.js:141:35\n    at /Users/willin/Documents/js.cool/hosts.js/node_modules/loader-runner/lib/LoaderRunner.js:364:11\n    at /Users/willin/Documents/js.cool/hosts.js/node_modules/loader-runner/lib/LoaderRunner.js:230:18\n    at context.callback (/Users/willin/Documents/js.cool/hosts.js/node_modules/loader-runner/lib/LoaderRunner.js:111:13)\n    at /Users/willin/Documents/js.cool/hosts.js/node_modules/postcss-loader/index.js:141:13\n @ ./src/app/main.js 1:457-495\n @ multi webpack-hot-middleware/client?noInfo=true&reload=true ./src/app/main.js\n. ",
    "breeswish": "Ok, figured out config path can be specified. To help others with similar demands: use options.config to specify a config directory.. ",
    "josephdburdick": "\n. ",
    "NekR": "It's still there, right?. \"postcss-loader\": \"^2.0.6\",\nI'm not 100% sure if it's postcss-loader, but I got it when I started updating postcss related things, including the loader.. Nevermind, I found the problematic one, it was css-loader. Thanks!. ",
    "mcohoon": "For those following this chain here is the issue in css-loader.. ",
    "evilebottnawi": "/cc @michael-ciniawsky Should we wait postcss 6.0.0 before we can release 2.0.0? Maybe for postcss 6.0.0 version we will use 3.0.0. I'm interested in a new version where there will not be a css-loader. They are use css-modules, but in most project i don't use their ( i am losing performance :sob: ). . @ai @michael-ciniawsky i can help with this, besides, I am well acquainted with postcss and webpack :smile: . @michael-ciniawsky Today I thought and came to a conclusion: now css-loader is not css loader (some project don't use css-modules, but css-loader use their and it is weird and no way disable their, module: false it is not solution, because postcss-modules-* plugins anyway apply). \nIn postcss-loader we want using their without css-loader, be right move all logic exclude css-modules from css-loader, also be right rename css-loader to css-modules-loader and remove all behavior not related to css-modules (imports, urls and etc). It is allow use postcss-loader for project don't use css-modules, if you need css-modules, just add css-modules-loader above postcss-loader. \nThis would not only give a huge performance advantage, but also clearly divide the mixed logic, which causes the head to explode. @michael-ciniawsky Also after release postcss-loader v2 it is should be named as css-loader :smile: (because it is veritable loader for css, without extra mixed logic as in css-loader).. @michael-ciniawsky sheo13666q@gmail.com :1st_place_medal: . @michael-ciniawsky can i help you with this?. /cc @michael-ciniawsky let's do this, add options sourceMap as in css-loader?. /cc @michael-ciniawsky ping :smile: . @ai i use difference plugins for difference files, examples foo.cssnext.css for files contain cssnext and foo.css for simple css. why? some modules from npm contain only css and i speedup my build.. @ai \njs\nconst filterPostcssPlugins = (plugins) => plugins.filter(\n    (postcssPlugin) => !(postcssPlugin.postcssPlugin === 'cssnano' || postcssPlugin.postcssPlugin === 'css-mqpacker')\n);\nconst cssPostcssPlugins = filterPostcssPlugins(config.get('compiler.loaders.postcss').css); // Also i have this for cssnext and scss, for some situation i have zero plugins, but this increases the compilation time, because postcss spends time on parsing :(\nLoader \u0440as approximately this configuration:\njs\n{\n    loader: 'postcss',\n    options: {\n        plugins: () => cssPostcssPlugins // Or scssPostcssPlugins and etc\n    }\n}. @ai thanks for helping :1st_place_medal: . @th3fallen ./~/postcss-loader/lib?{\"plugins\":[null]} in error line, seems require('autoprefixer')({ browsers: ['last 2 versions'] }) return null. @michael-ciniawsky can we close conversation here? If someone want to write about bug or other stuff, let create new issue.. If someone has problems, please create a new issue. Thanks!. @skipjack try to npm cache clear and remove node_modules and again npm i. @skipjack can your create minimal test repo? Seems it is related to postcss plugin. I don't see any logic in loader related to this problem.. @someok Thanks for issue, but seems not related to postcss-loader, original issue https://github.com/ben-eb/cssnano/issues/90.\n/cc @michael-ciniawsky . @moimael In the near future (today) I will tackle this problem :+1: . @DBosley please don't put all code here, create gist or test repo. This prevents reading information about the problem. Thanks!\n@michael-ciniawsky seems bugs only for windows users and related to sass-loader.. @michael-ciniawsky https://github.com/TrySound/postcss-icss-url. @TrySound After implement postcss-icss-import we can have a full compatibility with icss2 and in theory use new-css-loader, right?. @TrySound awesome! Let me know when you do it. I will test this on a couple of big projects. @TrySound yep, all works fine excluding @import (so icss2 doesn't support @import) and url :smile: . @TrySound Not yet, I'll try in the near future. @michael-ciniawsky manually :smile: . /cc @michael-ciniawsky some fixed done, but i think using sourceMap-inline.js and sourceMap-true.js name is more clear. @olegstepura can your provide minimal reproducible test repo?. @olegstepura without minimal repo we can't do anything, seems your use postcss plugins based on postcss v5, new loader working on v6, also seems sorceMap: false don't using in loader options.. @olegstepura oh, sorry don't saw your test repo :smile: let's see what is wrong. @olegstepura \n1. Some plugins don't compatibility with postcss-loader v2 (new loader use postcss v6) \n- postcss-each\n- postcss-cssnext\nThe problems in markup (space) are related to this. Don't use this loader with plugins used postcss v5, need update all postcss plugins to compatibility with v6\n2. Source map\njs\n{\n    loader: 'postcss-loader',\n    options: {\n        sourceMap: false\n    }\n}\nPlease, use the search before writing about the problem. Thanks!. @felixsanz Why do you duplicate it? It is create noise, just wait for someone to get free, also you can try to find the problem yourself and describe where it was found it will speed up the solution. @felixsanz It would also be nice to see minimal test reproducible repo, it is difficult say that it is wrong just the configuration. @felixsanz just create new issue with minimal repo and what your expected and actually output. Please don't write your problems in closed issue. @felixsanz yep create new issue and try to show what is wrong (screenshots, console, example of code and etc.). Don't write here otherwise the problem may not be noticed.. @olegstepura yep, create new issue with repo and description problem, otherwise we can lose it here. Thanks!. /cc @michael-ciniawsky friendly ping. @michael-ciniawsky we should finish and merge this PR asap, i spend about 5 hours for migrate to new postcss loader in most of my projects, in half the configuration is not loaded or source maps not working, current loading algorithm is misleading and incorrect.\nMy solution:\n1. By default config is false and don't load postcss config.\n2. If your have config: true or config: { ctx : {...options}} we loading config (also working good for nested config). Now config: true is disable by schema, but we can fix this.\n3. If your have config: { path: '/path/to/config' } we loading config (absolutly path).\nThis may seem small breaking changed, but it is bugfix, because now postcss config don't loading in most use case.. @michael-ciniawsky \n\nI'm not in favour of changing the config loader behaviour to {config: true }. This neglects the reason for postcss.config.js which is simply to have no in webpack.config.js for most cases at all. I'm also concerned about merging options from (webpack.config.js) && (postcss.config.js). It should be a single source of truth and therefore an either or, I don't see the usecase for this, but if besides an edge case or personal perference one exists we can change it.\n\nWhy now algorithm don't work as expected:\n\n!options.config && !sourceMap && length\n\nI want to use postcss.config.js (options.config is undefined) and disable source map (sourceMap is true), but not setup absolute config path.\n\noptions.config && !sourceMap && length > 1\n\nI want to use config (absolutly, options.config is { path: \"/path/to/config/\"}) and disable source map (sourceMap is false or undefined) (see https://github.com/postcss/postcss-loader/pull/234#issue-229052711 point 2).\n\n!options.config && sourceMap && length > 1\n\nSeems works as expected.\n\noptions.config && sourceMap && length > 2\n\nI want to use config and have source map, also i have exec. Why my postcss config don't loading.\n\n{ sourceMap: false } is basically unnessecary (default), just omit it, we need to fix the conditional checks for sure agreed upon that, but without breaking the current behaviour \n\nI can't change this in many boilerplate (many of popular them use this option also in config). It is using for all loader options from config.\nconfig.js\njs\nmodule.exports = {\n    // ...\n    sourceMap: false,\n    // ...\n};\nAnd in webpack.config.js it is setup to all loaders.\n\nWhat kind of options besides parser || syntax || stringifier && plugins ? The only two suitable options for map are external or inline as an annotation comment, which works via sourceMap: true || 'inline', from, to are handled by webpack aswell\n\nexec option example. Now also don't work see above.. @michael-ciniawsky ~~Today~~ (sorry, few time :disappointed: ) I will create a table with all the options and behavior that should, so it will be easier to come to a final decision.. @TrySound Maybe you can help us and with this?. @michael-ciniawsky now using css inside sass/less/etc throw error, https://github.com/insin/nwb/issues/311#issuecomment-304957316 (https://webpack.slack.com/archives/C3NUYSYF4/p1496168402383007). @michael-ciniawsky also adding any options to options (test: true) break all loading logic.. @michael-ciniawsky stub example, now it is not throw OptionsValidationError :disappointed:  and break loading logic. Bug is simple\nsass\n// test.scss\n@import \"~swiper/dist/css/swiper.css\";\nin style-loader -> css-loader -> postcss-loader -> sass-loader. @michael-ciniawsky \njs\nwebpackConfig.module.rules.push({\n        test: /\\.s[ac]ss$/,\n        use: [\n            {\n                loader: 'style-loader',\n                options: {\n                    sourceMap: true\n                }\n            },\n            {\n            loader: 'css-loader',\n            options: {\n                import: true,\n                sourceMap: true,\n                importLoaders: 1\n            }\n        },\n        {\n            loader: 'postcss-loader',\n            options: {\n                sourceMap: true,\n                plugins: () => [require('autoprefixer')]\n            }\n        },\n        {\n            loader: 'sass-loader',\n            options: { \n                sourceMap: true\n            }\n        }\n    });\nscss\n// test.scss\n@import \"~swiper/dist/css/swiper.css\";. @michael-ciniawsky Module build failed: Error: No PostCSS Config found in: because tries to load the configuration and css-loader (https://github.com/webpack-contrib/css-loader/blob/master/lib/getImportPrefix.js#L12) return only { sourceMap: true }, seems not respect function.\nProblems:\n1. We need disallow to using plugins as function or try to solve respect function options in https://github.com/webpack-contrib/css-loader/blob/master/lib/getImportPrefix.js#L12\n2. Throw OptionsValidationError on additional argument in options (not a few people are setting the wrong options in an unnecessary place).\n3. Also some strange behavior: using importLoaders for handling @import, i got options for postcss-loader from style-loader -> css->loader -> postcss-loader (actual options) -> sass-loader (test: /\\.s[ac]ss$/,), but i have difference plugins for sass and pure css (maybe expected behavior, but i was surprised), i think it will be use options from style-loader -> css->loader -> postcss-loader (expected options) (test: /\\.css$/). @michael-ciniawsky why we use parseOptions then:\n1. options.config && !sourceMap && length > 1 (also not working, see first message)\n2. options.config && sourceMap && length > 2\nCan i see example configuration for this use case?\n. @ai Maybe you can help us solve this problem :disappointed: . @michael-ciniawsky ok then current implementation is correct, only need throw. @michael-ciniawsky What is wrong with this PR now? Check on only plugins and config is incorrectly, i can use only parser and stringifier for parsing my style (not css) and output to css.. /cc @michael-ciniawsky what is wrong here?. @michael-ciniawsky i.e. we ignore source map from postcss.config.js?\nIt would be nice to see the options under which the config should not boot. @michael-ciniawsky we already have inline or true source map. We ignore the source maps from postcss.config.js?. @michael-ciniawsky why your close? I will now have to do most of it again, having spent this time, thanks for respecting my time. Main of problems, we have ugly algo and few test, I just do not understand when we need to load config when not, and no specific comments, I'm glad to help and close this problem, but I just do not know what's wrong now :disappointed: . @michael-ciniawsky \n1. Please describe all options when we load config when not or add tests, now behavior is misleading and no one understands except you.\n2. What wrong with source map now? We load source map from options, if your have config and map we get source map from config, if your have config but don't have map we get they from loader options?. @michael-ciniawsky Please understand me, we have an internal boilerplate config where we can't remove sourceMap from source code, it is global variable for all loaders and we need support postcss.config.js, it is bug really critical (seems other people have same problem), we can't fix this along time, let's do it asap. Let's do it:\n1. If we have exec and/or parser and/or syntax and/or stringifier and/or plugins - we don't load config.\n2. If we have config - we load config\n3. If we don't have options - we load config.\n4. sourceMap option does not affect logic, we can use sourceMap in 1 and 2 and 3 point.. @TrySound can your review my commit? All tests fine. @michael-ciniawsky this PR contain only relevant changed. @michael-ciniawsky true || inline. @michael-ciniawsky Do your have specific examples of why this code is not working (example of config or failed tests), all tests are passed, or is this a subjective non-constructive mono solution?. @michael-ciniawsky i mean where algo don't work as expected\n. @michael-ciniawsky https://github.com/postcss/postcss-loader/pull/259 Thanks for respect my work and my time.. @michael-ciniawsky because I'm tired of non constructive argument and ignoring, for me it will be faster to create fork. \n\nWill this work ?\n\nNo, because your say:\n\nThe only two suitable options for map are external or inline as an annotation comment, which works via sourceMap: true || 'inline', from, to are handled by webpack aswell\n. @michael-ciniawsky \n1. Your just close my PR without explaining what is wrong - it is non-constructive.\n2. Your say \nThe only two suitable options for map are external or inline as an annotation comment, which works via sourceMap: true || 'inline', from, to are handled by webpack aswell\n\nBecause i do only true and inline value supporting for sourceMap\n\nIgnoring - https://github.com/postcss/postcss-loader/pull/234#issuecomment-303085769, https://github.com/postcss/postcss-loader/pull/234#issuecomment-304947846, https://github.com/postcss/postcss-loader/pull/234#issuecomment-305237199, https://github.com/postcss/postcss-loader/pull/234#issuecomment-306444817\nNo Respect for my time and effort, thanks\n\nJust don't ignore https://github.com/postcss/postcss-loader/pull/259 and merge PR to solve issue. @michael-ciniawsky thanks for apologize, let's first fix unexpected behavior with sourceMap https://github.com/postcss/postcss-loader/pull/259. @michael-ciniawsky and then solve problems: should we respect map from postcss.config.js and how we should do this, or now all ok. @rfgamaral both valid, if your want to pass options to plugin use require('postcss-cssnext')({...options}) (see in docs pluginFunction), if not - just use require('postcss-cssnext') (see in docs Plugin). It is related to postcss (http://api.postcss.org/Processor.html#use). More simple with examples:\nUsing postcss.plugin(\"postcss-plugin\", (options) => {}); your got Plugin (http://api.postcss.org/postcss.html#.plugin)\nUsing postcss.plugin(\"postcss-plugin\", (options) => {})(); your got pluginFunction (http://api.postcss.org/global.html#pluginFunction). @rfgamaral ping me if need more help. @moimael your use postcss-cssnext which now have incompatible\n with new version of loader (we use postcss v6, postcss-cssnext use postcss v5). Your can help postcss-cssnext to upgrade to postcss v6 https://github.com/MoOx/postcss-cssnext/issues/374.. @michael-ciniawsky i agree with @TrySound, not all want to using these plugins, best way for this add docs about this.. @TrySound Sounds good too, but we definitely should not use them always in postcss-loader. @clydin your can pass icss url and import plugins to end and avoid problems with other plugins. Also your can create own icss-loader and insert them after css-loader.. @clydin ICSS is new gulp of fresh css. Now css don't have module system, no import and export, but js have support modules. This is probably one of main reason why ICSS was created. Don't worry about inefficient, it is faster and easy. You continue to write on CSS (with own postcss plugins and etc). ICSS v1 already used in css-loader. New css-loader have only support ICSS v2 and it is great, fast and easy to use. Wait and enjoy ICSS, do not worry.. @clydin your can join to slack general channel https://webpack.slack.com/messages/C1LUX2DS9/ and ask sokra about related questions.\n. @HeadFox don't use npm@5 right now in production, now it is very buggy, give time to new npm become more stable. @vedadsose seems loader before postcss-loader emit source map (add sourceMap: false) for sass/less/etc-loader. /cc @michael-ciniawsky maybe we can add option supressSourceMapWarning, but for me this is a bad solution. But resolve-url-loader need to source maps from sass/less/etc-loader.. @michael-ciniawsky How about if your release a major where only configuration files are allowed, it would be great and solved all these problems (maybe not related to this issue, sorry) :+1: . @TrySound friendly ping. @TrySound now we have problems to determinate when we should load config when not https://github.com/postcss/postcss-loader/pull/234. I can't found best way for this. Now i use fork this loader because it is really problems in many projects.. @TrySound i.e. if we have don't have config we load options, if we have config we load config?. @michael-ciniawsky Also we have problems with ident, we should documentation this :disappointed: . @michael-ciniawsky can we found issue or create about this, because it is very important problem. Let's finish today https://github.com/postcss/postcss-loader/pull/234 and do release :+1: . @michael-ciniawsky I will not argue again because it's useless, just merge this pr to solve https://github.com/postcss/postcss-loader/issues/250. @michael-ciniawsky let's do release :+1: after merge. @TrySound hm, why other peoples use peerDeps? maybe if webpack v4 shipped and have incompatibility (without peerDeps it is break semver idea for safe deps). @michael-ciniawsky we can avoid all beta, rc and etc. Because it is not stable and noise in this case is normal. @TrySound @michael-ciniawsky we can use webpack-default strategy here or let it be as it is. What is our decision?\n. I think we can close this issue, if necessary in the future we will reopen it. Let's leave it at that.. @KagamiChan can your provide minimal reproducible test repo?. @KagamiChan ~~try to rename .postcssrc.js to postcss.config.js, maybe a problem in loading the configuration file~~. @KagamiChan sorry, misunderstood, your got this warning because some loader before postcss-loader generate source map.. @KagamiChan Info when it is happens:\nRemainingRequest - /home/evilebottnawi/IdeaProjects/postcss-loader-demo/node_modules/vue-loader/lib/selector.js?type=styles&index=0!/home/evilebottnawi/IdeaProjects/postcss-loader-demo/src/App.vue\nLoaders:\n[ { path: '/home/evilebottnawi/IdeaProjects/postcss-loader-demo/node_modules/css-loader/index.js',\n    query: '?{\"minimize\":false,\"sourceMap\":false}',\n    options: '{\"minimize\":false,\"sourceMap\":false}',\n    ident: undefined,\n    normal: [Function],\n    pitch: undefined,\n    raw: undefined,\n    data: null,\n    pitchExecuted: true,\n    normalExecuted: false,\n    request: [Getter/Setter] },\n  { path: '/home/evilebottnawi/IdeaProjects/postcss-loader-demo/node_modules/vue-loader/lib/style-compiler/index.js',\n    query: '?{\"vue\":true,\"id\":\"data-v-7cf643c8\",\"scoped\":false,\"hasInlineConfig\":false}',\n    options: '{\"vue\":true,\"id\":\"data-v-7cf643c8\",\"scoped\":false,\"hasInlineConfig\":false}',\n    ident: undefined,\n    normal: [Function],\n    pitch: undefined,\n    raw: undefined,\n    data: null,\n    pitchExecuted: true,\n    normalExecuted: false,\n    request: [Getter/Setter] },\n  { path: '/home/evilebottnawi/IdeaProjects/postcss-loader-demo/node_modules/less-loader/dist/index.js',\n    query: '?{\"sourceMap\":false}',\n    options: '{\"sourceMap\":false}',\n    ident: undefined,\n    normal: [Function: lessLoader],\n    pitch: undefined,\n    raw: undefined,\n    data: null,\n    pitchExecuted: true,\n    normalExecuted: false,\n    request: [Getter/Setter] },\n  { path: '/home/evilebottnawi/IdeaProjects/postcss-loader-demo/node_modules/postcss-loader/lib/index.js',\n    query: '?{\"sourceMap\":false}',\n    options: '{\"sourceMap\":false}',\n    ident: undefined,\n    normal: [Function: loader],\n    pitch: undefined,\n    raw: undefined,\n    data: null,\n    pitchExecuted: true,\n    normalExecuted: true,\n    request: [Getter/Setter] },\n  { path: '/home/evilebottnawi/IdeaProjects/postcss-loader-demo/node_modules/vue-loader/lib/selector.js',\n    query: '?type=styles&index=0',\n    options: 'type=styles&index=0',\n    ident: undefined,\n    normal: [Function],\n    pitch: undefined,\n    raw: undefined,\n    data: null,\n    pitchExecuted: true,\n    normalExecuted: true,\n    request: [Getter/Setter] } ]\nSeems before postcss-loader we have vue-loader, which generate source maps. I am not familiar with vue-loader, seems your need set source Map false for this.. @KagamiChan  yep, your should set sourceMap: false for each loader. @JadedDragoon seems postcss-cssnext use postcss v5, loader use postcss v6, postcss v5 and postcss v6 have incompatibility, be good use postcss-loader v1 for postcss-cssnext, just wait new release postcss-cssnext with support postcss v6. @dan-gamble seems postcss-easy-import use \"postcss\": \"^5.0.15\",, loader use postcss v6, maybe incompatibility?. @dan-gamble also can your check postcss.config.js is loading, try to console.log('LOAD'); process.exit() in postcss config file?. @dan-gamble try to use, seems your config invalid https://github.com/michael-ciniawsky/postcss-load-config \njs\nmodule.exports = {\n  plugins: {\n    'postcss-easy-import': {}\n  }\n}\nWithout minimal test repo i can not help your anymore. @dan-gamble My example solved the problem? if so, we can make the configuration validation for the future\n/cc @michael-ciniawsky . @mcjfunk seems related to less-loader, can your create minimum reproducible test repo? . @michael-ciniawsky seems npm@5 output invalid node_modules :disappointed: . @czaarek99 what is version postcss-loader your use ? Because on https://github.com/postcss/postcss-loader/blob/master/lib/index.js#L173 line there is no promises which return something. @czaarek99 can your create minimum reproducible test repo?. @michael-ciniawsky What do your think about this? Should we prioritize loader options over config?. @SerhiiBilyk use ['css-loader', 'postcss-loader', 'sass-loader']. @teazean can you describe use case for this?. @teazean this mean previous loader return source map, you should disable source map on all loaders, this message allow to track this problem (i.e. you previous loader generate source map but other loader after postcss don't get source map, you just spend build time on generate source maps but you don't use)  . @michael-ciniawsky why close?. @sandiprb use sourceMap: true for css-loader, because sourceMap is false by default. Thank for issue!. @ameyakarve need minimum reproducible test repo, looks like bug in css-loader or in postcss plugin. @ameyakarve looks we need minimum reproducible test repo :disappointed: . /cc @filipesilva looks like this bug happens only for angular-cli (old versions) and don't related to postcss-loader?. @filipesilva Thanks!. Move postcss-loader above resolve-url-loader. Also resolve-url-loader use rework (which deprecated and very buggy). /cc @michael-ciniawsky . @jussikinnula we can just rewrite resolve-url-loader on postcss and release this to avoid problem in url for  scss/stylus and etc. @aleen42 please move your issue in autoprefixer, it is not related to postcss-loader. Thanks!. @eivisand Thanks for issue, but no related to postcss-loader. We just wrapper around postcss. You problem arise from cssnano, please create issue there.. @milewski don't related to postcss-loader, problem in resolve-url-loader, it is very buggy and old loader. You can use absolute url or create new resolve-url-loader for solve this problem, sorry, but we have time on this.. Also you can have resolve-url-loader above postcss-loader, just change their order. /cc @michael-ciniawsky it is breaking, need revert and release new major version :+1: . Sorry, just wait in near future will be revert and release. @Kovensky can you create minimum reproducible test repo? Or it is enough throw error inside postcss plugin?. @Cybolic tests failed, can you fix it?. @systemist can you create issue in webpack-cli?. Looks like bug, PR welcome, should be easy to fix. @michael-ciniawsky looks like we break plugins which emit assets. I think we should return this behaviour. @kisenka friendly ping. @kisenka will be great if you add test. /cc @ai looks @michael-ciniawsky unavaliable, i can't merge without second eye and can't have right on publish. @ai looks like regression, in 1 version we have this feature https://github.com/postcss/postcss-loader/blob/v1.0.0/index.js#L72. For someone, this can be critical. @palmerye Look on { loader: 'postcss-loader', options: { parser: 'sugarss' } }, sugarss use sss extension. But anyway thanks for PR :+1:  . @bspies-work You use old version of postcss-loader (i.e. 1, here code https://github.com/postcss/postcss-loader/blob/1.3.3/index.js#L122). Also you remove issue template. And don't provide minimum reproducible test repo. We can't help you here, sorry. Feel free to reopen issue when you upgrade postcss-loader and fix issue template. Thanks!. @galvarez421 looks like bug inside postcss-load-config package\nFeel free investigate and send PR :+1: . @ai I think moving it to the core can take more time (triangle/discussion/other meta stuff). I agree will be great have this in core. Just to eliminate current issues, it would be enough to transfer this to repo and upgrade deps.. /cc @michael-ciniawsky can we update deps for postcss-load-config? cosmiconfig has better perf on 4 version. @ai let's wait @michael-ciniawsky if no answer, we can recreate new repo :disappointed: . @michael-ciniawsky thanks for access, now we can solve security problems and big bugs  :+1: . @goldfire please create minimum reproducible test repo, thanks!. @maurocolella not related to postcss-loader, we don't use walkAtRules, problems in postcss plugin or your deps. Try to reinstall node_modules and debug what postcss plugin throw this error. Thanks!. @bifunctor looks you have invalid configuration and scss doesn't compile to css. Can you create minimum reproducible test repo?. @bifunctor hm, looks good, can you create minimum reproducible test repo?. @bifunctor Also you forget add MiniCssExtractPlugin to plugin section https://github.com/webpack-contrib/mini-css-extract-plugin#minimal-example. @bifunctor it is syntax error, you have invalid scss or css, please create minimum reproducible test repo. Also in future use gitter or stackoverflow. @bifunctor problem still exists?. /cc @Kovensky can you test this too, thanks. /cc @ai Problem in postcss? We send file https://github.com/postcss/postcss-loader/blob/master/lib/index.js#L108\n@PawelGIX Can you create minimum reproducible test repo?. @ai can you provide link on issue or to some other related stuff?. @Tanuj69 problem in npm, try to reinstall npm. /cc @michael-ciniawsky looks problem in jsdom :confused: . Also can you provide here https://github.com/postcss/postcss-loader/blob/7e3a95624aeba0634ca9fac178805e052a02df3b/src/index.js#L161 postcss version, future postcss release can have difference ast, i will release new version of css-loader in near future, will be great use ast only when postcss version is same. @michael-ciniawsky thanks!. @michael-ciniawsky i think better return full version, where necessary I can check only the major version myself, also in theory minor version can change ast too. /cc @michael-ciniawsky let's finish this PR asap and then continue working on css-loader, because I want to use postcss@7 in css-loader. /cc @michael-ciniawsky . @rjgotten can you create minimum reproducible test repo?. @michael-ciniawsky good catch! Don't think what source map can have absolute path :confused: . @michael-ciniawsky what do you think about this https://github.com/webpack-contrib/sass-loader/blob/master/lib/loader.js#L70? Maybe we should fix it in sass-loader. Somebody can create minimum reproducible test repo?. Very thanks, we work on refactor postcss-loader/css-loader (already refactored) and style-loader, in near future i will see how we can fix it :+1: . @manniL problem in cssnano, thanks for issue. Issue https://github.com/cssnano/cssnano/issues/618. @sancelot better create this issue in angular-cli (ng). @owenstrevor not here, it is just postcss loader, also we already have this https://github.com/webpack-contrib/mini-css-extract-plugin#mini-css-extract-plugin, feel free to send a PR if you have better description. @lilong7676 use difference loader to difference files based on regex (test option) with another config. @lovetingyuan config should be aromatic and should not be merge to avoid bad DX, also please use issue template in future. Bug in css-loader (and already fixed in master), cssnano rewrite url:\ncss\na {\n  background: url(./fonts/open-sasns-400.woff2);\n}\nto\n```css\na {\n  background: url(fonts/open-sasns-400.woff2);\n}\nBut css-loader can't resolve this url. Workaround - disable postcss-normalize-url in cssnano (normalizeUrl: false). sss uses for sugarss. @ehzhang it is good practice emit warnings as warnings and errors as errors (all loaders and plugins do it), maybe good idea create issue/PR in webpack and implement this feature in core, not in loaders/plugins (otherwise we need implement this option in all loaders/plugins and it is not good). @yanhaijing not related to postcss-loader, sass-loader already support alias, but in your case you have wrong path to scss. @yanhaijing alias for what?. Aliasing url and @import in css do in css-loader, alias for @import in sass/scss do in sass-loader. What you need aliases in postcss-loader? We just wrapper around postcss. @yanhaijing aliases works using css-loader. @yanhaijing Please read documentation how write aliases https://webpack.js.org/configuration/resolve/. @egoist what is sense use postcss without parser/plugins/strigifier? It is doesn't has sense, also it bad DX. You can implement option like usePostcss in you build system.. @egoist postcss generate warning when can't find config, so you build system will be generate warning always. CRA doesn't allow define own configuration https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/config/webpack.config.js#L97 (I saw projects what allow change this behavior, use search on github). Also i don't think this related to this repo, we use postcss-load-config projects to load configuration, so i think you should create issue in their repo. Because you do not have plugins for postcss-loader, it is error from postcss. @michael-ciniawsky i think we late add sourceMap - false. @michael-ciniawsky https://github.com/postcss/postcss-loader/pull/230#discussion_r115759553. @michael-ciniawsky Will not it be a bit confused?. @michael-ciniawsky when i write code i want run only test to avoid regression (without lint), full test with lint and test i do before PR :smile: . @michael-ciniawsky we don't load postcss config file when config not present or present but without path. . @michael-ciniawsky weird, should works, I will test in the near future. @michael-ciniawsky using options allow change map, it is bad, for some it is misleading behavior, but to and from now also we can change through config.options. I think about this.. @michael-ciniawsky current behavior not works as expected we should fix this, see https://github.com/postcss/postcss-loader/pull/234#issue-229052711 (point 2). . @michael-ciniawsky two solution:\n1. Load postcss config always and them merge option from loader with config options (i think loader options more important than postcss config option, but ).\n2. Load postcss config only when config: true or config: { path: '/path/to/config'} (best way, no problems with perf and understandable using). Disable override important options from postcss config. it is break build.. We always have params as object, because we have const options = loaderUtils.getOptions(this) || {}. Special for config: true. postcss-load-config return map, we should also return map from parseOptions (consistently and don't misleading for future options).. config is always object parseOptions return object and postcss-load-config also return object. @michael-ciniawsky because options related to loader (const options = loaderUtils.getOptions(this) || {}), postcssOptions related to postcss options. @michael-ciniawsky How can I run only tests?. @michael-ciniawsky don't understand, please provide example. @michael-ciniawsky we don't need rc if we don't load config. @michael-ciniawsky why? your ugly algo is don't work as expected. @michael-ciniawsky \n``js\nreturn postcssrc(rc.ctx, rc.path, { argv: false })\n      .then((config) => {\n        // GetsourceMapoption from loader options when nomapoption inpostcss.config.js`\n        if (!config.options.map) config.options.map = options.sourceMap\n    return config\n  })\n\n```\nWhere?. Don't use this package, we don't have time support this package, also he use own logic for parse query, in webpack@5 logic will be change in some places (loader-utils will be update too).\nYou will not have time to rewrite the logic, you already started a lot of PR and abandoned their. Does rational things, if you understand that you will not be able to lead the package in the future, use the standard api (loader-utils).. > Is there any discussion/documentation about the (planned) changes to the Loader (Runner) API ? (Guessing no)\nOnly in private messages\nIn fact, it is only now that work has begun on who is responsible for what, although this should have been done much earlier. And frankly it's bad that we lost you as contributor, I would be glad to see if you would return back. \n\nI'm simply sick and tired of working on xyz and at the end of the day it is for nothing concrete because of organisational issues/no feedback and/but on the other hand to top it still every time someone bluntly chimes in and does his/her own thing anyways causing nothing but havoc and burden.\n\nRight now I perform this function and opened for any communication and feedback. \nI know that we have a lot of legacy stuff in many loaders/utils/plugins, which should be removed/refactored, and feel free to do this. Also webpack-default is just a repository that helps make the code more consistently. We do not necessarily have to release a huge update (webpack-default + breaking change) in one major release - the most important thing is stable code.. You should use err.reason ? err.reason : err.message instead SyntaxName, not all errors is syntax.\nYou should check on line/column here, because not all error contain line and column (without source map line and column doesn't exists and you will get (undefined:undefied) reason).. If you using OOP for Error please use name as class name - Warning. It is best practice.. ident is property for webpack, we should not check this here, webpack this do already. Use warning.toString() here  (https://github.com/postcss/postcss/blob/master/lib/warning.es6#L74). @michael-ciniawsky :+1: but you should check line and column anyway, because not all warnings contain this. @michael-ciniawsky also using own warning text message can lead to loss of information (https://github.com/postcss/postcss/blob/master/lib/warning.es6#L74)\nOriginal\npostcss-lint:a.css:10:14: Avoid !important\nYou lose plugin name, you lose original source file path. Be careful postcss warning is not error, it is just text message, better use postcss logic for this instead own. There is nothing to worry about that they have difference view. Remember - we just wrapper and should provide easy interface. In next version of postcss message properties can be changes and it is require modify loader source code, it is not good idea.. Line and column can be undefined if you don't use source map https://github.com/postcss/postcss/blob/8157278c743564555a22da67da2b5972945462d8/lib/input.es6#L124. @michael-ciniawsky also any warning can be SyntaxError https://github.com/postcss/postcss/blob/master/lib/warning.es6#L76 and https://github.com/postcss/postcss/blob/8157278c743564555a22da67da2b5972945462d8/lib/node.es6#L84. In fact, I do not understand why you asked so much about how they should look if you have not studied the source code before :confused: . Line can be 0, column also, based on the source code https://github.com/postcss/postcss/blob/master/lib/css-syntax-error.es6#L144. ",
    "amireh": "The reason is because this._compilation and this._compiler can not be serialized for distributing to other processes since they're constructed and meant to be used in the main webpack process, which is a different \"process\" than the one that the loaders run in when using happypack.\nIn the docs for webpack 1 they dubbed it as \"hacky access\" to these constructs, simply because there was no better way (and I get it that the use cases are usually valid). It's just a limitation we need to live with until webpack (hopefully in v3) starts substituting their use with proper APIs.. ",
    "kenisteward": "For my use case stylelint but for a more generic one any warnings or errors\ngenerated through a postcss loader.  That way if someone is using any\nassortment of postcss plugins the loader will have the option to upgrade\nwarning to error and emit them as it already does as errors .\nOn Wed, Mar 1, 2017, 2:50 PM Michael Ciniawsky notifications@github.com\nwrote:\n\n@kenisteward https://github.com/kenisteward Just to clearify you mean\nwarnings generated by stylelint in particular here ?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/postcss/postcss-loader/issues/181#issuecomment-283449712,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AMPLtcCxXw7Pqd2YgRHxvXGdfL2KIXqnks5rhcwNgaJpZM4MQGUn\n.\n. @michael-ciniawsky  in it's options api for webpack you can pass these\nemitErrors: Display Stylelint errors as actual errors, rather than just warnings. Default: true\nfailOnError: Have Webpack's build process die on error. Default: false\nTogether they allow you to specifically force a codestyle\n\nin their actual code this file has the error handling.\nhttps://github.com/JaKXz/stylelint-webpack-plugin/blob/master/lib/run-compilation.js\nAs a change to this loader I think all that would need to be done is a refactoring of when to use error or not.  Just wanted to know if it were in the pipeline.. @michael-ciniawsky also someone has made \nhttps://github.com/JasonAMartin/style-warning-breaker/blob/master/index.js\nwhich basically gobbles up the lint stuff from it.  \nLike I said before this works for my use case but I was thinking more generically.  Just seems odd to postcss but then not be able to force rules with it.. ",
    "MatteoGabriele": "I was working with webpack 2.2.1 but there is a problem with the js compression plugin and temporarily rolled back to 2.2.0. Apparently a version fix one part of my application and breaks the other :D but whatever. Now I'll go to 2.2.1 again to try what you are saying.\nCan i choose where to drop my postcss.config.js file?  I'm using a custom CLI so the entire dev server and webpack, with all postcss plugins, are not locally installed and using such a configuration is not really possible or at least not easy/clean for me.\nWould be nice if I can just choose where postcss should look up for that file and take that file close where it belongs ( at least for what i need ).\nIn case i want to go for the most redundant way: how can i just use only webpack to load plugins?\nthanks again!  . @michael-ciniawsky ok I'm going to try one of this setup then! Hope to find my way! :D \nMy custom config is to avoid other custom configs aahahahha. One package to rule them all! \nThanks a lot for you explanation. Super!. ",
    "mrmartineau": "@kud I was going to update this myself. Do you think that an example with the webpack extract-text plugin should also be included: https://github.com/postcss/postcss/pull/989/files#diff-04c6e90faac2675aa89e2176d2eec7d8R214. ",
    "kud": "Could be interesting indeed. :). I used this conf on another project, yes.. Thank you. :). Hey Michael,\nThank you for your answer.\nIndeed, it works like you did.\nBefore, I did like this:\njavascript\n{\n              loader: 'postcss-loader',\n              options: {\n                plugins: () => {\n                  return [\n                    autoprefixer,\n                  ]\n                }\n              }\n            }\nSo yes, I wasn't be able to give some arguments to my plugins. With your configuration, it's ok!\nThank you again. :)\nNote: the config which works:\njavascript\n{\n              loader: 'postcss-loader',\n              options: {\n                plugins: [\n                  autoprefixer(),\n                  customMedia({\n                    extensions: {\n                      \"--mobile\": \"(max-width: 375px)\",\n                      \"--tablet\": \"(max-width: 1024px)\",\n                      \"--desktop\": \"(min-width: 1025px)\",\n                    }\n                  })\n                ]\n              }\n            }. Okay, thank you for your explanation @michael-ciniawsky !. ",
    "towry": "I fixed this by not using a postcss.config.js in my project root directory, I put the plugins option in the webpack config file.. ",
    "littp": "@michael-ciniawsky \u7b54\u6848\u4fee\u590d\u6210\u529f\uff0c\u8c22\u8c22\uff01. ",
    "rmar72": "near 2019 update, following a webpack tutorial that uses postcss.config.js the autopprefixer is required, but got an error for missing module, the above worked ^ npm prune && npm i -D autoprefixer thanks michael-ciniawsky. ",
    "yangg": "Update webpack from 2.2.0  to 2.3 fixed this problem.\nThanks for your help.\ud83d\ude04. ",
    "jerexyz": "I am developing a tool like  create react app\uff0cUsed postcss \u3002\nI can read the user's configuration if it does not exist I can give a default configuration\u3002\nif support return promise\uff0cI can doing is dynamic\u3002. @michael-ciniawsky    https://github.com/jerexyz/postcss-loader-demo\nthanks. @michael-ciniawsky    yes,this is what i wanted.a non breaking solution  is   options.plugins function  support Promise, so can change  the config dynamic.. webpack.config.js > postcss.config.js can be keeped. For now, options.plugins support {Function}   so  can write some logic. but can't do everything sync.  . ",
    "pmsorhaindo": "Ah! Thanks @michael-ciniawsky, The config option gets me the desired functionality, \ud83d\ude03 thanks for pointing that out! The pattern library bw-axiom is the library I was using, unfortunately in this case just excluding the node_modules leads to webpack being unable to handle the cssnext @imports in these files.. Yeah, you're right. The library provides react components, which are imported via webpack. but the CSS in that library is making use of postcss-import.. ",
    "Kikobeats": "Thanks for reply!\nVery interesting know about reduceRight. Have a lot of sense, Can you say where can I read more about webpack internals? Always I had the doubt if the order of the plugin list is important.\nYou said inline the unique value available (and I saw that [here] (https://github.com/postcss/postcss-loader/blob/833df03f8f6bd0ab24f2bff9bf8d15138bd39cda/index.js#L85)) but your code suggested have a trueInstead \ud83d\ude1b.\nBut yes, ideally, align with value with the rest of loaders could be great.\n. ",
    "IlianYotov": "Thank you for the comment. \nI'm not sure how do you output two extracted.css files with different set of variables. . Nope. ",
    "ben-pr-p": "@IlianYotov did you ever figure it out?. As a work around, you can leave the CSS variables in the CSS, and include a Javascript polyfill (what I'm doing). Or use gulp. ",
    "nsfmc": "fwiw, i see those tests failing, but i tested with this project https://github.com/nsfmc/extract-text-test and i see @value imports working as well as composing doing the right thing, clearly not an exhaustive test or anything, but a not bad smoketest if you're looking for a bare repo to test against.. hahahaha, i want to apologize @michael-ciniawsky , i totally did not understand how loaders work at all when i opened this pr (and still my understanding of the pattern they use for async execution is hazy). this pr does something but it's not correct... at all, however, if you take a look at https://github.com/nsfmc/extract-text-test and revert the postcss-loader req back to ^1.3.3 you'll see that the problem does seem to come from postcss loader assuming that it will get its config from the postcss.config.js file\nbuild failure when running yarn build-plain\n\n```shell\nmarcos@Dalarna in ~/projects/extract-text-test on master!\n\u00b1 yarn build-plain\nyarn build-plain v0.23.2\n$ webpack --config regular-postcss-config.js \nHash: b9d02904b81cc385128c\nVersion: webpack 2.4.1\nTime: 504ms\n   Asset     Size  Chunks             Chunk Names\nindex.js  74.1 kB       0  [emitted]  main\n   [0] ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name]__[local][hash:base64:5]\",\"importLoaders\":1}!./~/postcss-loader?{}!./src/index.css 240 bytes {0} [built] [failed] [1 error]\n   [1] ./src/styles.css 1.08 kB {0} [built]\n   [2] ./~/base64-js/index.js 3.48 kB {0} [built]\n   [3] ./~/buffer/index.js 48.6 kB {0} [built]\n   [4] ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name]_[local]_[hash:base64:5]\",\"importLoaders\":1}!./~/postcss-loader?{}!./src/styles.css 929 bytes {0} [built]\n   [5] ./~/css-loader/lib/css-base.js 2.19 kB {0} [built]\n   [6] ./~/ieee754/index.js 2.05 kB {0} [built]\n   [7] ./~/isarray/index.js 132 bytes {0} [built]\n   [8] ./~/style-loader/addStyles.js 8.51 kB {0} [built]\n   [9] ./~/style-loader/fixUrls.js 3.01 kB {0} [built]\n  [10] (webpack)/buildin/global.js 509 bytes {0} [built]\n  [11] ./src/index.js 51 bytes {0} [built]\nERROR in ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name]__[local][hash:base64:5]\",\"importLoaders\":1}!./~/postcss-loader?{}!./src/index.css\nModule build failed: Error: No PostCSS Config found in: /Users/marcos/projects/extract-text-test/src\n    at Error (native)\n    at /Users/marcos/projects/extract-text-test/nodemodules/postcss-load-config/index.js:51:26\n @ ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name][local]___[hash:base64:5]\",\"importLoaders\":1}!./~/postcss-loader?{}!./src/styles.css 3:10-209 6:63-262 10:13-212\n @ ./src/styles.css\n @ ./src/index.js\nerror Command failed with exit code 2.\n```\n\nwhen i console.log this, i notice that the first execution of the loader, it picks up its options correctly, but i think that subsequently, the loader runner is not using the previous config (and i still don't understand enough to know why other than to think that it is looking for config in the webapp scope and finding nothing and bailing without looking for it in the original loader def).\nagain, apologies for this wild goose chase, i'm trying to figure out more, but this isn't top of mind for me, so i'm just picking at it for a few minutes each day.. thanks for taking a look @michael-ciniawsky sorry i didn't have time to figure out how to fix the problem though. ",
    "jeffijoe": "The docs specify 2 ways of config: a file and inline as loader options. I want to use the latter, which according to docs is supported. I think this behavior is unintended.. js\n{\n  loader: 'postcss-loader',\n  options: {\n    plugins: () => [require('autoprefixer')]\n  }\n}. Webpack 2.4.1\n\n. Sure thing.\n```js\nconst path = require('path')\nconst webpack = require('webpack')\nconst yenv = require('yenv')\nconst filter = require('lodash/fp/filter')\nconst identity = require('lodash/fp/identity')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst BabiliPlugin = require('babili-webpack-plugin')\n// Used to filter out environment-specific\n// entries in arrays.\nconst clean = filter(identity)\n// Webpack 2 supports function configurations.\n// In our package.json we set --env.prod when building for\n// production.\nmodule.exports = function ({ prod }) {\n  // Since we use ExtractTextPlugin in production, we can't use\n  // the new way of declaring loaders, so defining all the CSS loader\n  // stuff here to avoid repeating it.\n  const cssLoaders = [{\n    loader: 'css-loader',\n    options: {\n      modules: true,\n      importLoaders: 2,\n      localIdentName: '[name]__[local][hash:base64:5]'\n    }\n  }, {\n    loader: 'postcss-loader',\n    options: {\n      plugins: () => {\n        return clean([\n          require('rucksack-css')({\n            autoprefixer: true\n          }),\n          prod && require('postcss-csso')\n        ])\n      }\n    }\n  }, {\n    loader: 'sass-loader'\n  }]\n  const dev = !prod\n  // Used to pass environment variables from env.yaml\n  // to DefinePlugin.\n  const env = Object.assign(\n    yenv(),\n    { NODEENV: prod ? 'production' : 'development' }\n  )\n  return {\n    devtool: dev ? 'inline-source-map' : 'source-map',\n    entry: {\n      vendor: [\n        'inferno',\n        'moment',\n        'classnames',\n        'jwt-decode',\n        'mobx',\n        'mobx-task',\n        'libx',\n        'marked',\n        'messageformat',\n        'memoizee',\n        'inferno-mobx',\n        'standalone-react-css-transition-group',\n        'react-textarea-autosize',\n        'react-router',\n        'react-helmet',\n        'tinycolor2'\n      ],\n      app: clean([\n        dev && 'react-hot-loader/patch',\n        dev && 'webpack-hot-middleware/client',\n        path.resolve(dirname, './index.jsx')\n      ])\n    },\n    plugins: clean([\n      new webpack.LoaderOptionsPlugin({\n        minimize: prod,\n        debug: dev\n      }),\n      new webpack.optimize.CommonsChunkPlugin({ name: 'vendor' }),\n      new webpack.DefinePlugin({\n        'process.env': {\n          NODE_ENV: JSON.stringify(env.NODE_ENV),\n          API_ROOT: JSON.stringify(env.API_ROOT)\n        }\n      }),\n      new webpack.NamedModulesPlugin(),\n      prod && new webpack.NoErrorsPlugin(),\n      dev && new webpack.NoEmitOnErrorsPlugin(),\n      dev && new webpack.HotModuleReplacementPlugin(),\n      prod && new BabiliPlugin(),\n      prod && new webpack.optimize.UglifyJsPlugin({\n        output: { comments: false },\n        compress: {\n          sequences: true,\n          dead_code: true,\n          conditionals: true,\n          booleans: true,\n          unused: true,\n          if_return: true,\n          join_vars: true,\n          drop_console: true\n        }\n      }),\n      prod && new ExtractTextPlugin({ filename: 'bundle.css', allChunks: true })\n    ]),\n    output: {\n      // This is only used for production\n      path: path.join(__dirname, '../../dist/public'),\n      filename: '[name].js',\n      publicPath: '/',\n      pathinfo: dev\n    },\n    module: {\n      rules: [{\n        test: /.[jt]sx?$/i,\n        use: clean([\n          'babel-loader'\n        ]),\n        exclude: /node_modules/\n      }, {\n        test: /.(css|sass)$/i,\n        use: dev\n          ? [{ loader: 'style-loader' }, ...cssLoaders]\n          : ExtractTextPlugin.extract({\n            fallback: 'style-loader',\n            use: cssLoaders\n          })\n      }, {\n        test: /.(gif|png|jpe?g|svg)$/i,\n        use: [\n          {\n            loader: 'image-webpack-loader',\n            options: {\n              progressive: true,\n              pngquant: { quality: '65-90', speed: 4 }\n            }\n          },\n          {\n            loader: 'url-loader',\n            options: { limit: 5000 }\n          }\n        ]\n      }, {\n        // Favicon\n        test: /favicon.ico/i,\n        use: [{\n          loader: 'file-loader',\n          options: { name: 'favicon.ico' }\n        }]\n      }]\n    },\n    resolve: {\n      extensions: ['.js', '.jsx'],\n      modules: ['./', 'node_modules'],\n      alias: Object.assign(\n        {},\n        prod && {\n          react: 'inferno-compat',\n          'react-dom': 'inferno-compat',\n          'mobx-react': 'inferno-mobx',\n          'react-addons-css-transition-group': 'standalone-react-css-transition-group'\n        }\n      )\n    },\n    performance: {\n      hints: prod ? 'warning' : false\n    }\n  }\n}\n``. The returned value is an array -clean()simply filters out falsy values. Unless you're saying Webpack stringifies theoptionshash? That can't be, because if that was the case it would choke on the fact thatplugins` is a function.\nAlso, it works perfectly fine when using LoaderOptionsPlugin.. I tried:\noptions: {\n      plugins: () => {\n        return [\n          require('rucksack-css')({\n            autoprefixer: true\n          })\n        ]\n      }\n    }\nStill no luck. Removed the conditional.. I put a postcss.config.js in the root of my client folder, although node_modules is 2 levels above that, causing issues when importing css from node_modules.\nPutting the config file at the root of the project works, but now my project root is littered with client code and breaks my otherwise clean separation of server and client code. This is why I preferred the inline approach.. \n. Yeah its probably using the same resolution strategy as .babelrc\nSo there's no way to work around this within the Webpack config?. Fair enough, didn't know about that Webpack stringify behaviour. \ud83d\ude04 . ",
    "funkyLover": "so the conclusion is we can't replace postcss.config.js with inline options in webpack? I get the same issue.. ",
    "yarnball": "Hi, I'm having the same issue. I am trying to use react-toolbox but keep getting this error (No PostCSS config found). It does so in 2 locations.\nAny ideas on a fix?\nHere is my config file:\n```\nconst webpack = require('webpack');\nconst path = require('path');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst config = {\n  context: dirname,\n  entry: './src/index.js',\n  output: {\n    path: __dirname,\n    filename: 'bundle.js',\n  },\n  module: {\n    loaders: [{\n      exclude: /node_modules/,\n      test: /.(js|jsx)$/,\n      loader: 'babel',\n    },\n    {\n    test: /.(eot|svg|ttf|woff|woff2)$/,\n    loader: 'file?name=public/fonts/[name].[ext]'\n    },\n    { test: /.json$/, loader: \"json-loader\" },\n      {\n        test: /.css$/,\n        loaders: [\n          'style-loader',\n          'postcss-loader',\n          'css-loader?sourceMap&modules&importLoaders=1&localIdentName=[name][local]___[hash:base64:5]!postcss?sourceMap&sourceComments',\n        ],\n      },\n    {\n    test: /.scss$/, loader: ExtractTextPlugin.extract('css!sass'),\n    }],\n  },\n  devServer: {\n    historyApiFallback: true,\n    contentBase: './',\n  },\n  plugins: [\n    new webpack.DefinePlugin({ 'process.env': { NODE_ENV: JSON.stringify('production') } }),\n    new webpack.optimize.DedupePlugin(),\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new ExtractTextPlugin('src/public/stylesheets/app.css', {\n      allChunks: true,\n    }),\n  ],\n};\nmodule.exports = config;\n```. I'm on webpack v1. I don't have a post.css.config in place anywhere- as the react toobox did not say it was needed.. I did intend to use it yes- where have i gone wrong with it?. ",
    "Bnaya": "Hey, i'n having the same issue\nMy relevant webpack2 config is:\njs\n      new webpack.LoaderOptionsPlugin({\n        options: {\n          context: sourcePath,\n          postcss: [\n            require('postcss-import')({ addDependencyTo: webpack }),\n            // this was breaking url-loader / file-loader require('postcss-url')(),\n            require('postcss-cssnext')({\n              browsers: [\n                \"last 2 Chrome versions\",\n                \"last 2 Edge versions\",\n                \"last 2 Safari versions\",\n                \"last 2 Firefox versions\",\n              ],\n            }),\n            require('postcss-reporter')(),\n            require('postcss-browser-reporter')({ disabled: isProduction })\n          ]\n        }\n      }),\nIt was working until the last update\nThanks!. ",
    "dwolfhub": "@Bnaya i had same issue. when updating to 2.x please check readme for new configuration.\nhere is mine:\n{\n      loader: 'postcss-loader',\n      options: {\n        plugins: (loader) => [\n          require('autoprefixer')({browsers: ['last 3 versions', 'iOS 9']}),\n        ]\n      }\n    },. ",
    "remotezygote": "I am having this issue also after updating to the latest version. My webpack config is dynamically generated, but here is the relevant config section:\nconst postCSSConfig = {\n  sourceMap: useSourceMaps,\n  plugins() {\n    return [\n      autoprefixer({ browsers: ['last 2 versions'] }),\n      classprefixer('scoped-', {\n        ignore: [\n          /^tether/,\n        ],\n      }),\n    ];\n  },\n};\nthen when used:\n{\n  loader: 'postcss-loader',\n  options: postCSSConfig,\n},\nIt looks correct to me, but I still get this error for every single directory that has any css file loaded in it. Any ideas?. FYI, I walked this back all the way to 2.0.0, and it worked differently (resolved paths differently), but all had the same error as before. I do not believe config loading from webpack config is working properly. Possibly it is only breaking in certain cases? In my case, I load many SCSS files throughout my app. Was that case tested, or only a case of a single entry point? Grasping at straws a bit here. I would just go back to pre-2.0 versions, but then I get warnings about loader options deprecation. Kind of bad either way at this point.... ",
    "brandonaaskov": "This same error popped up for me, but the issue wasn't due to the postcss-loader, it was because I was using the importLoaders option for css-loader.\nBefore\n{ loader: 'css-loader', options: { sourceMap: true, importLoaders: 1 } }\nAfter\n{ loader: 'css-loader', options: { sourceMap: true } }\nI'm not going to imply that will fix the issue for others, but I hope that it does :). ",
    "lucasmotta": "@michael-ciniawsky adding the ident: 'postcss' to the options config works fine.\nI understand that webpack has its issues, but do you think this option can be documented on the README? I don't mind having to add the ident line to my config.. ",
    "littlenewbee": "I use the webpack 2.x,and I have the same error when I use the importLoaders option .which one get the reason?. ",
    "nickperkinslondon": "All of this webpack confusion is unfortunate.\nI use React and Webpack, but I don't use CSS myself ( and I don't know or care what \"postcss\" is )\nI just wanted to try React Toolbox, but I have been unable to make it work!\nI am going back to Material-UI\n. ",
    "dudewad": "I have to back this up, I'm experiencing issues using the most basic of configurations for 2.x versions of webpack. The documentation is in severe need of updating; I've been stuck on this for several hours now and its killing me.. ",
    "japboy": "This might be irrelevant though, postcss.config.js seems to be named as it is as always.\njs\n      {\n        loader: 'postcss-loader',\n        options: {\n          config: {\n            path: path.resolve(__dirname, 'postcss.config.js'),\n          },\n        },\n      },\nThis works unless I change the config name to something different like postcss.amp.conf.js or something.. ",
    "mattmewton": "Bump. I'm having similar issues with the PostCSS config not being found. I am using the path.resolve function to find my config, but it seems that Webpack is still searching for the config in folders relative to where postcss is being called. So for example, if I have a .vue file that uses postcss at a path of src/javascript/, PostCSS will say there is no config in the src/javascript folder, when I am explicitly pointing to a config located somewhere else.\nHere is a snippet of my config with the issue in question:\n{\n    test: /\\.vue$/,\n    loader: 'vue-loader',\n    options: {\n        loaders: {\n            css: ExtractTextPlugin.extract({\n                use: [\n                    'css-loader?importLoaders=1',\n                    {\n                        loader: 'postcss-loader',\n                        options: {\n                            config: {\n                                path: path.resolve(__dirname('build/webpack/postcss.config.js')),\n                            },\n                            sourceMap: true,\n                        },\n                    },\n                ],\n                fallback: 'vue-style-loader',\n            }),\n        },\n    }\n},\nIs there something I'm doing wrong here or is there another issue at play perhaps?\nEDIT: I'm not sure why this issue is marked as closed, clearly many developers are still experiencing issues with this.. ",
    "ParallelUniv3rse": "@mattmewton I think you're just using the __dirname variable wrong. \nI managed to finally get everything working and I'm set up as follows: \ndirectory structure for reference:\nconfig/\n\u251c\u2500\u2500 webpack.config.js/\n\u2514\u2500\u2500 postcss.config.js/\nin webpack.config.js:\n{\n  loader: 'postcss-loader',\n  options: {\n    sourceMap: true,\n    config: {\n       path: path.resolve(__dirname, './postcss.config.js'),\n    },\n  },\n},\npostcss.config.js:\nmodule.exports = {\n  plugins: [\n    require('autoprefixer')({ browsers: ['last 3 versions', '> 1%'] }),\n  ],\n};. ",
    "MrVichr": "Just a note to anyone with this problem, I spent quite a few hours checking all configs back and forth until I figured out that I had to add an empty plugins() function for PostCSS to recognize the options.\ndiff\n {\n    loader: 'postcss-loader',\n    options: {\n      sourceMap: true,\n+     plugins: function() { return []; } //had to add this line to avoid Error: No PostCSS Config found in ...\n    }\n }. ",
    "kleinfreund": "The following will do when you want to use inline configuration for postcss without any plugins:\njs\n{\n  loader: 'postcss-loader',\n  options: {\n    plugins: []\n  }\n}\nWhen you want to use plugins with require, you need the ident option:\njs\n{\n  loader: 'postcss-loader',\n  options: {\n    ident: 'postcss',\n    plugins: [\n      require('cssnano')()\n    ]\n  }\n}\nThis needs to be documented. Without the plugin property, the build throws the no config error.. ",
    "charleslaw": "I stumbled on this thread after hitting the same issue.  I eventually found this reference very helpful: https://github.com/react-toolbox/react-toolbox-example/. ",
    "angusmunro": "Empty plugins did it for me. Thanks. ",
    "Chucheen": "Empty plugins did for me too :). ",
    "polco": "i got the same error with the sourceMap set to 'true'  ;). webpack config:\nwebpackConfig.module.rules.push({\n    test: /\\.less$/,\n    include: /src/,\n    use: [\n        { loader: 'style-loader', options: { sourceMap: true } },\n        { loader: 'css-loader', options: { importLoaders: 2, root: config.get('ui-asset-url'),  sourceMap: true } },\n        { loader: 'postcss-loader', options: { sourceMap: true } },\n        { loader: 'less-loader', options: { sourceMap: true } }\n    ]\n});\npostcss.config.js\n```\nvar cssnano = require('cssnano');\nmodule.exports = {\n    plugins: [\n        cssnano({\n            sourcemap: true,\n            autoprefixer: {\n                add: true,\n                remove: true,\n                browsers: ['last 2 versions']\n            },\n            safe: true,\n            discardComments: {\n                removeAll: true\n            }\n        })\n    ]\n};\n```. tried it, still broken :/. yeah, it works with the previous version, so no rush :). ",
    "le0nik": "@polco oh sorry my fault, this error appears when it's set to true, not false. @michael-ciniawsky my config is huge and complex with lots of conditions and is spread across multiple files. Here's the styles loaders part:\n{\n      loader: 'style-loader',\n      options: {\n        sourceMap: env.isDev,\n      },\n    }\n    {\n      loader: 'css-loader',\n      options: {\n        modules: true,\n        importLoaders: 4,\n        localIdentName: '[local]--[hash:base64:8]',\n        minimize: {\n          options: {\n            safe: true,\n            sourcemap: env.isDev,\n          },\n          // Otherwise it changes order of `z-index` which breaks our styles\n          zindex: false,\n        },\n        sourceMap: env.isDev,\n      },\n    },\n    {\n      loader: 'resolve-url-loader',\n      options: {\n        sourceMap: env.isDev,\n      },\n    },\n    {\n      loader: 'postcss-loader',\n      options: {\n        sourceMap: env.isDev,\n        plugins: getPostcssPlugins,\n      },\n    },\n    {\n      loader: 'sass-loader',\n      options: {\n        sourceMap: env.isDev,\n      },\n    },\nThe error happened when env.isDev was set to true. If set to false the error doesn't occur.\nMy postcss.config.js file is empty(i pass plugins through the postcss-loader options)\nmodule.exports = {};. Looks like the reason it happens is in this line https://github.com/postcss/postcss-loader/blob/master/lib/index.js#L76\nloaderUtils.getOptions always returns the same object in case of options(query gets parsed and a new object is returned every time) and when you delete sourceMap for one file it's always undefined after that.\nSame logic should be applied for this line: https://github.com/postcss/postcss-loader/blob/master/lib/index.js#L72. ",
    "rejas": "This error happens too for me, here is my webpack.config-part: \n{\n                test: /\\.less$/,\n                use: ExtractTextPlugin.extract({\n                    fallback: 'style-loader',\n                    use: [{\n                        loader: 'css-loader',\n                        options: {\n                            minimize: true,\n                            sourceMap: true\n                        }\n                    }, {\n                        loader: 'postcss-loader',\n                        options: {\n                            plugins: function () {\n                                return [\n                                    require('autoprefixer')(config.autoprefixer),\n                                    require('css-mqpacker')(),\n                                    require('postcss-sprites')({\n                                        spritePath: 'tmp/'\n                                    })\n                                ]\n                            }\n                        }\n                    }, {\n                        loader: 'less-loader',\n                        options: {\n                            sourceMap: true\n                        }\n                    }]\n                })\n            },\nError goes away, when I remove the two sourcemap-options (don't aks why they were in there and not in post-css :-). No worries and hurry from my side, it's monday morning after all :-D. ",
    "frederikschubert": "I was working in parallel on this and did just see this issue as I wanted to make a PR. :). This also fixes the issue that the postcss.config.js can not be found when setting the path via the options.config.path property.. ",
    "DanielRamosAcosta": "This is strange, I've set sourceMap to 'inline', but the error persists. I tried printing the value of options in lib/index.js#L99 and the config is getting loaded for the first file, (with map set to { inline: true, annotation: false }), but for the remaining files is set to false.... ",
    "brendanmoore": "Issue also persists for me with version 2.0.1. Is it worth reopening this issue?. ",
    "Meeeeow": "Said. Still got this error with v2.0.2:\nHere is my loader configure:\njs\n {\n        test: /\\.less$/,\n        use: [\n          {\n            loader: 'style-loader'\n          },\n          {\n            loader: 'css-loader',\n            options: {\n              sourceMap: true\n            }\n          },\n          {\n            loader: 'postcss-loader'\n          },\n          {\n            loader: 'less-loader',\n            options: {\n              sourceMap: true,\n              modifyVars: theme\n            }\n          }\n        ]\n      }\nERROR in ./~/css-loader?{\"sourceMap\":true}!./~/postcss-loader/lib!./~/less-loader/dist?{\"sourceMap\":true,\"modifyVars\":{\"primary-color\":\"#00a5ff\",\"link-color\":\"#00a5ff\",\"font-size-base\":\"14px\",\"@animation-duration-slow\":\".2s\",\"@animation-duration-base\":\".1s\",\"@animation-duration-fast\":\".05s\"}}!./~/antd-mobile/lib/style/index.less\nModule build failed: TypeError: Cannot create property 'prev' on boolean 'false'\n    at Promise.resolve.then.then (D:\\Corp\\Project\\node_modules\\postcss-loader\\lib\\index.js:131:47)\n @ ./~/antd-mobile/lib/style/index.less 4:14-160 18:2-22:4 19:20-166\n @ ./~/antd-mobile/lib/style/index.web.js\n @ ./~/antd-mobile/lib/button/style/index.web.js\n @ ./src/modules/home/index.jsx. @michael-ciniawsky Thanks, it works. . ",
    "gregorskii": "FYI I think this error occurs if the loader is set to pass sourceMaps:\nuse: [\n  {\n    loader: 'css-loader',\n    options: {\n      modules: true,\n      minimize: true,\n      importLoaders: 1,\n      localIdentName: '[local]--[hash:base64:5]',\n      sourceMap\n    }\n  },\n  {\n    loader: 'postcss-loader',\n    options: {\n      sourceMap\n    }\n  },\n  {\n    loader: 'sass-loader',\n    options: {\n      sourceMap\n    }\n  }\n]\nAnd the postcss.config.js also includes the map property:\nmap: process.env.NODE_ENV === 'development' ? 'inline' : false. ",
    "TrejGun": "@gregorskii removing of\njson\nmap: true\nfixed my issue, thanks. @michael-ciniawsky \nhi there!\ni can see fix in repo but when i'm installing from npm i see old code\nif (sourceMap && typeof map === 'string') map = JSON.parse(map)\n    if (sourceMap && map) options.map.prev = map\nyou can see in zip package here\nhttps://github.com/postcss/postcss-loader/releases/tag/v2.0.6. @michael-ciniawsky oops\nyes i'm consuming it via npm\nand i have this error\nERROR in ./client/shared/components/imageViewer.less\nModule build failed: ModuleBuildError: Module build failed: TypeError: Cannot create property 'prev' on boolean 'true'\nat Promise.resolve.then.then (~/node_modules/postcss-loader/lib/index.js:135:44)\nat <anonymous>\nat runLoaders (~/node_modules/webpack/lib/NormalModule.js:194:19)\nat ~/node_modules/loader-runner/lib/LoaderRunner.js:364:11\nat ~/node_modules/loader-runner/lib/LoaderRunner.js:230:18\nat context.callback (~/node_modules/loader-runner/lib/LoaderRunner.js:111:13)\nat Promise.resolve.then.then.catch (~/node_modules/postcss-loader/lib/index.js:176:71)\nat <anonymous>\n@ ./client/shared/components/imageViewer.jsx 17:0-28\n@ ./client/office/components/vehicle/read.jsx\n@ ./client/office/components/vehicle/index.jsx\n@ ./client/office/app.jsx\n@ ./client/office.js\n@ multi react-hot-loader/patch webpack-hot-middleware/client?path=http://localhost:5000/__webpack_hmr ./client/office\nmy config is here https://github.com/postcss/postcss-loader/issues/283. @michael-ciniawsky \nthanks a lot\nplease take a look at this one too\nhttps://github.com/postcss/postcss-loader/issues/217#issuecomment-320733551. ",
    "Uriziel01": "Now I'm getting other type of error messages:\njs\nModule build failed: TypeError: Cannot create property 'prev' on boolean 'false'\n    at Promise.resolve.then.then (C:\\Users\\Uriziel\\ponteus\\wp-content\\themes\\ponteus\\node_modules\\postcss-loader\\lib\\index.js:125:47). Yes, I've updated everything and even cleaned npm cache. \ud83d\ude03 . ",
    "gtwilliams03": "I am getting the same error using the font-awesome-webpack2 package:\nERROR in ./~/css-loader?sourceMap&-minimize!./~/postcss-loader/lib!./~/sass-loader/lib/loader.js?sourceMap!./~/bootstrap-sass/assets/stylesheets/_bootstrap.scss\nModule build failed: TypeError: Cannot create property 'prev' on boolean 'false'\n    at Promise.resolve.then.then (/Users/gtw/clearwater-public-web/node_modules/postcss-loader/lib/index.js:125:47)\n @ ./~/bootstrap-sass/assets/stylesheets/_bootstrap.scss 4:14-175 18:2-22:4 19:20-181\n @ ./src/layouts/CoreLayout/CoreLayout.js\n @ ./src/main.js\n @ multi font-awesome-webpack2 ./src/main.js webpack-hot-middleware/client?path=http://192.168.4.61:3000/__webpack_hmr\nI am using (what I think is) a pretty standard postcss options from a starter kit:\nwebpackConfig.plugins.push(\nnew webpack.LoaderOptionsPlugin({\n    options: {\n      postcss: [\n        cssnano({\n          autoprefixer : {\n            add      : true,\n            remove   : true,\n            browsers : ['last 2 versions']\n          },\n          discardComments : {\n            removeAll : true\n          },\n          discardUnused : false,\n          mergeIdents   : false,\n          reduceIdents  : false,\n          safe          : true,\n          sourcemap     : true\n        })\n      ]\n    }\n  })\n). ",
    "iAdramelk": "Don't use starter kit, and tried to update to postcss-loader 2.0.1, still have No PostCSS Config found message. Have pretty big postcss config in few separate postcss.config.js files. What should I upload to help you find problem cause?. To clarify I do have postcss.config.js files, but not in the root category, they are in separate subfolders fro different entry points.. @michael-ciniawsky still failing with #fix.\nMy file structure:\n/\n    webpack/\n        admin/\n            postcss.config.js\n        application/\n            postcss.config.js\n        config/\n            postcss/\n                index.js\n                media.js\n                vars.js\npostcss.config.js in webpack/application/\n```\nconst config = require('../config/postcss');\nmodule.exports = ctx => config(ctx, 'application');\n```\nwebpack/config/postcss/index.js\n```\n/ eslint import/no-extraneous-dependencies: 0 /\nconst assets = require('postcss-assets');\nconst nested = require('postcss-nested');\nconst autoprefixer = require('autoprefixer');\nconst colorAlpha = require('postcss-color-alpha');\nconst flexbugs = require('postcss-flexbugs-fixes');\nconst simpleVars = require('postcss-simple-vars');\nconst customMedia = require('postcss-custom-media');\nconst inlineSVG = require('postcss-inline-svg');\nconst csso = require('postcss-csso');\nconst applicationMediaConfig = require('./media');\nconst {\n  application: applicationVarsConfig,\n  admin: adminVarsConfig,\n  homepage: homepageVarsConfig,\n} = require('./vars');\nmodule.exports = function postcssConfig(ctx, pack) {\n  const mediaPlugin = customMedia({ extensions: applicationMediaConfig });\nconst applicationPlugins = [\n    simpleVars({ variables: applicationVarsConfig }),\n    mediaPlugin, flexbugs, autoprefixer, colorAlpha, nested, inlineSVG, assets,\n  ];\nconst landingPlugins = [\n    simpleVars({ variables: applicationVarsConfig }),\n    mediaPlugin, flexbugs, autoprefixer, colorAlpha, nested, inlineSVG, assets,\n  ];\nconst homepagePlugins = [\n    simpleVars({ variables: homepageVarsConfig }),\n    mediaPlugin, flexbugs, autoprefixer, colorAlpha, nested, inlineSVG, assets,\n  ];\nconst adminPlugins = [\n    simpleVars({ variables: adminVarsConfig }), flexbugs,\n    autoprefixer, colorAlpha, nested, assets,\n  ];\nif (ctx.env === 'production') {\n    adminPlugins.push(csso({ restructure: false }));\n    applicationPlugins.push(csso({ restructure: false }));\n    landingPlugins.push(csso({ restructure: false }));\n    homepagePlugins.push(csso({ restructure: false }));\n  }\nconst packs = {\n    admin: adminPlugins,\n    application: applicationPlugins,\n    landing: landingPlugins,\n    homepage: homepagePlugins,\n  };\nreturn {\n    plugins: packs[pack],\n  };\n};\n``. @michael-ciniawsky not sure how to change it. Basically I have some css files in:webpack/admin//*.pcss andwebpack/application//*.pcss`.\nIf I understand readme correctly, files in webpack/admin/**/*.pcss should see and use webpack/admin/postcss.config.js and files in webpack/application/**/*.pcss should see and use config from webpack/application/postcss.config.js. It worked this way in 1.3.3, but now it doesn't work for some reason.\nWhat should I change?. In my case structure was:\n|\u2013 webpack\n| |\u2013 admin\n| | |\u2013 components\n| | | |\u2013 button\n| | | | |\u2013 style.css\n| | |\u2013 postcss.config.js\n| |\u2013 application\n| | |\u2013 components\n| | | |\u2013 button\n| | | | |\u2013 style.css\n| | |\u2013 postcss.config.js\n|\u2013 webpack.config.js\n|\u2013 package.json\nAnd in wasn't working with #fix branch.. Here comes another insane config piece :)\n```\nconst pcssLoader = {\n  test: /.*.pcss$/,\n};\nconst pcssLoaders = [\n  {\n    loader: 'css-loader',\n    query: {\n      sourceMap: !isProduction,\n      modules: true,\n      localIdentName: isProduction ? '[hash:base64:4]' : '[name]__[local]___[hash:base64:3]',\n      camelCase: true,\n      minimize: false,\n      importLoaders: 1,\n    },\n  },\n  {\n    loader: 'postcss-loader',\n    query: {\n      sourceMap: !isProduction\n    }\n  },\n];\nif (isProduction) {\n  pcssLoader.loader = ExtractTextPlugin.extract({\n    fallback: 'style-loader',\n    use: pcssLoaders,\n  });\n} else {\n  pcssLoader.use = ['style-loader', ...pcssLoaders];\n}\nconfig.module.rules.push(pcssLoader);\n``. @michael-ciniawsky here, I created simplified repo without insane configs and inheritance. :) Justpostcss.config.jswithautoprefixerin folder andwebpack.config.js` in root directory.\nStill failing in 2.0.2:\nhttps://github.com/iAdramelk/postcss-loader-bug. @michael-ciniawsky yep, no more error! Thank you very much.. ",
    "Fardinak": "I'm also getting the original error (using 2.0.1).\nNow, I'm not sure... am I allowed to NOT have a separate postcss.config.js? I don't have much to config; would rather keep it in my webpack.config.js.. ",
    "jimblue": "Same error here since I've upgrade:\nModule build failed: Error: No PostCSS Config found in: /websites/webpack\nBasicaly I was doing this:\n```js\n// ===========================\n// LOADERS\n// ===========================\nmodule: {\n    rules: [\n      {\n        test: /.scss$/,\n        use: ExtractCSSPlugin.extract({\n          fallback: 'style-loader',\n          use: ['css-loader', 'postcss-loader', 'sass-loader']\n        })\n      },\n      {\n        test: /.css$/,\n        use: ExtractCSSPlugin.extract({\n          fallback: 'style-loader',\n          use: ['css-loader', 'postcss-loader']\n        })\n      }\n    ]\n  },\n// ===========================\n// PLUGINS\n// ===========================\nplugins: [\n// LOADER OPTIONS PLUGIN\nnew webpack.LoaderOptionsPlugin({\n  options: {\n    postcss: [\n      autoprefixer()\n    ]\n  }\n}),\n\n// EXTRACT CSS PLUGIN\nnew ExtractCSSPlugin({\n  filename: '[name].[contenthash:8].css',\n  disable: config.debug\n})\n\n]\n}\n```\nIf you want to see the complete config I just made a gist:\nwebpack config gist\n. I just try with the fix branch, that doesn't fix the bug. Got the same error message:\nModule build failed: Error: No PostCSS Config found. @michael-ciniawsky sure I can make an other trial with your advice. If I don't use LoaderOptionsPlugin what is the recommended method to pass autoprefixer option to postcss?. @michael-ciniawsky thank you so much It's working \ud83d\ude04 . ",
    "rolele": "if there is no options passed to the postcss-loader I still get the error with 2.0.2\n{\n          test: /\\.scss$/,\n          use: [{\n              loader: 'style-loader'\n            }, {\n              loader: 'css-loader?modules&localIdentName=[hash:base64:4]&importLoaders=1&sourceMap&camelCase=true'\n            }, {\n              loader: 'postcss-loader'\n            }, {\n...\nadding\n}, {\n              loader: 'postcss-loader',\n              options: {\n                sourceMap: true\n              }\n            }, {\nsolved the issue with 2.0.2. ",
    "mdudek": "I'm also using LoaderOptionsPlugin and it does not work with 2.0.2.. ",
    "kgrigas": "Removing postcss config from LoaderOptionsPlugin fixed the problem for me.. ",
    "JPortegijs": "Is postcss.config.js actually required, can't I just specify the options directly in my webpack.config?. Everything good here, too! Thanks!. ",
    "th3fallen": "still getting the mentioned error on postcss-loader@2.0.5 using \nnew webpack.LoaderOptionsPlugin({\n      minimize: false,\n      debug: true,\n      options: {\n        postcss: [autoprefixer({ browsers: ['last 2 versions'] })],\n      },\n    }),. @michael-ciniawsky thanks for the input but how would i manage that in this syntax? \n{\n        test: /\\.(scss|css)$/,\n        loader: ['style-loader', 'css-loader', 'postcss-loader', 'sass-loader'],\n      },. thanks @michael-ciniawsky that works for my dev env. but in my productions build that's formatted like this...\n```\nconst webpack = require('webpack');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nimport getConfig from '../config';\nconst path = require('path');\nconst config = getConfig(process.env.NODE_ENV).config;\nconst publicPath = (config.PREFIX || '').replace(/\\/$/, '') + path.join(process.env.PUBLIC_PATH || '/').replace(/^./, '');\nmodule.exports =  {\n  plugins: [\n    new webpack.LoaderOptionsPlugin({\n      minimize: true,\n      debug: false,\n    }),\n    new ExtractTextPlugin({\n      filename: 'assets/css/[name]-[hash].css',\n      allChunks: true,\n    }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /.(scss|css)$/,\n        loader: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: [\n            'style-loader',\n            'css-loader',\n            {\n              loader: 'postcss-loader',\n              options: { plugins: [require('autoprefixer')({ browsers: ['last 2 versions'] })] },\n            },\n            'sass-loader',\n          ],\n          publicPath,\n        }),\n      },\n    ],\n  },\n};\n```\nim getting...\nERROR in ./~/css-loader!./~/postcss-loader/lib?{\"plugins\":[null]}!./~/sass-loader/lib/loader.js!./app/styles/app.scss\n    Module build failed: TypeError: Cannot read property 'postcss' of null\n        at Processor.normalize (/Users/clarktomlinson/Sites/When-I-Work/wheniwork-js/node_modules/postcss-loader/node_modules/postcss/lib/processor.es6:101:18)\n        at new Processor (/Users/clarktomlinson/Sites/When-I-Work/wheniwork-js/node_modules/postcss-loader/node_modules/postcss/lib/processor.es6:35:29)\n        at postcss (/Users/clarktomlinson/Sites/When-I-Work/wheniwork-js/node_modules/postcss-loader/node_modules/postcss/lib/postcss.es6:34:12)\n        at Promise.resolve.then.then (/Users/clarktomlinson/Sites/When-I-Work/wheniwork-js/node_modules/postcss-loader/lib/index.js:137:12)\n     @ ./~/style-loader!./~/css-loader!./~/postcss-loader/lib?{\"plugins\":[null]}!./~/sass-loader/lib/loader.js!./app/styles/app.scss 4:14-189 \nany ideas?. so why would that exact same config work for my dev environment?. ~apparently adding ident: 'postcss', fixed it....~ scratch that. @michael-ciniawsky yep, what you suggested works, not sure why not it does.... no, i get 1 css file but that's what's expected from my build thanks so much for the help.. ",
    "heisian": "Kept getting\nERROR in ./~/css-loader?{\"modules\":true,\"importLoaders\":3,\"localIdentName\":\"[name]__[local]__[hash:base64:5]\"}!./~/postcss-loader/lib!./~/resolve-url-loader!./~/sass-loader/lib/loader.js?{\"outputStyle\":\"expanded\",\"sourceMap\":true}!./main/src/accountPages/MyPolicies/Policy/policy.scss\nModule build failed: Error: No PostCSS Config found in:\n...\nuntil I added:\ndiff\n      {\n        test: /\\.scss$/,\n        use: [{\n          loader: 'style-loader'\n        }, {\n          loader: 'css-loader', options: {\n            modules: true,\n            importLoaders: 3,\n            localIdentName: '[name]__[local]__[hash:base64:5]'\n          }\n        }, {\n          loader: 'postcss-loader', options: {\n+            plugins: [require('autoprefixer')]\n          }\n        }, {\n          loader: 'resolve-url-loader'\n        }, {\n          loader: 'sass-loader', options: {\n            outputStyle: 'expanded',\n            sourceMap: true\n          }\n        }]\n      },\nNow all compiles great. thanks all.. that config was in my webpack.config.js - not a fan of having a postcss.config.js file in 20+ folders, so webpack.config.js is preferred..\nwhat is an AST? I apologize but this is about my 6th day of using Webpack in this manner.\nRandom tweaking has gotten me successful configs for both dev and production, however I could very well stand to learn more about what's actually going on here.\nSo.. why does adding the autoprefixer plugin get rid of the error? Isn't autoprefixer just a plugin for expanding out all the various permutations of CSS properties across browsers? Does postcss-loader by default require autoprefixer to function?\nValidation?. ",
    "skipjack": "That I can do \ud83d\udc4d \nwebpack.config.js (excluding non css-related bits)\n``` js\n// Imports...\nmodule.exports = (env = {}) => ({\n    // ...\nmodule: {\n    loaders: [\n        // ...\n        { \n            test: /\\.css$/, \n            use: ExtractTextPlugin.extract({\n                fallback: 'style-loader',\n                use: [\n                    'css-loader',\n                    'postcss-loader' \n                ]\n            })\n        }\n    ]\n},\n\nplugins: [\n    // ...\n    new ExtractTextPlugin({\n        filename: '[name].[contenthash].css',\n        allChunks: true,\n        disable: env.dev === true\n    })\n],\n\n// ...\n\n})\n```\n.postcssrc.js\njs\nmodule.exports = {\n    plugins: [\n        require('postcss-import'),\n        require('postcss-modular-scale'),\n        require('postcss-cssnext'),\n        require('postcss-nested')\n    ]\n}\nHaven't checked extract text output yet although I'm pretty sure it'd be the same. I'm seeing this with env.dev set to true (i.e. when the ExtractTextPlugin is disabled.. Thanks I'll try that and report back.. Haven't tested yet but let's close and, if anything, I'll re-open if the postcss-nested fix doesn't work.. I tried that fix (upgraded both this loader as well as postcss-nested) and I'm still seeing the issue unfortunately. Digging around a bit to see if someone has opened a ticket for this in one one of the other plugins I'm using but it doesn't look like it.\n\ncssnext ships with it's own nesting plugin included postcss-nesting, so maybe try with/without cssnext and put postcss-nested before cssnext in the plugin chain :)\n\nYeah, however we are using the &__element and &--modifier rules to follow BEM which require also adding postcss-nested. I did try messing with the order of plugins which didn't seem to have an effect.\nMy gut feeling is that it must be either this package or postcss-nested that's causing this issue. I'll open an issue over there as well.. Also tried blowing away all node_modules and re-installing from scratch with no luck. I'll keep testing and see if I can nail it down to one thing.. Ok I'm pretty sure it is this package that's causing the issue. It happens when I upgrade just loader.\n@evilebottnawi tried that as well with no luck, thanks though.. Yeah I can do that.. As promised: postcss-issue-demo. I'm happy to close this issue and move it elsewhere once we determine the root cause of the problem.. Unfortunately that doesn't fix it, I had tried that locally when I first experienced the issue. See this commit I just pushed in the demo repo. The ordering issue still remains.\nI think postcss-nesting wouldn't affect it, as postcss-nesting only allows & .class not class concatenation with the parent (i.e. &--modifier). @ai have you had a chance to look at that demo yet (no pressure, just curious)?\n@michael-ciniawsky I guess it could be another one of the plugins that somehow isn't compatible with updated postcss under this package.. Awesome, thanks for all of your help! Sorry I didn't pick up on this earlier.. Yeah, I subscribed to that cssnext issue and will wait to upgrade everything until that's complete.. ",
    "depaolif": "I just tried updating both of them like you said. For npm start, I'm still getting the same error message as before, but for npm run build I'm now getting:\n```\nError: Breaking change: extract now only takes a single argument. Either an options object or the loader(s).\nExample: if your old code looked like this:\n    ExtractTextPlugin.extract('style-loader', 'css-loader')\nYou would change it to:\n    ExtractTextPlugin.extract({ fallback: 'style-loader', use: 'css-loader' })\nThe available options are:\n    use: string | object | loader[]\n    fallback: string | object | loader[]\n    publicPath: string\n```\nAfter that, I tried changing:\n{\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract({\n          'style',\n          'css?importLoaders=1!postcss',\n          extractTextPluginOptions\n        })\n        // Note: this won't work without `new ExtractTextPlugin()` in `plugins`.\n      },\nto:\n{\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: [\n              { loader: 'css-loader', options: { importLoaders: 1 } },\n              'postcss-loader'\n          ]\n        })\n      },\nBut now I'm just back to the WebpackOptionsValidationError (same for npm start).. I just updated all the loaders in config.module to use. But I'm still getting the same error \ud83d\ude15 \nmodule and plugins now looks like this:\n```\n  module: {\n    preLoaders: [\n      {\n        test: /.(js|jsx)$/,\n        use: 'eslint',\n        include: paths.appSrc\n      }\n    ],\nloaders: [\n  {\n    exclude: [\n      /\\.html$/,\n      /\\.(js|jsx)$/,\n      /\\.css$/,\n      /\\.json$/,\n      /\\.svg$/\n    ],\n    use: 'url',\n    query: {\n      limit: 10000,\n      name: 'static/media/[name].[hash:8].[ext]'\n    }\n  },\n  {\n    test: /\\.(js|jsx)$/,\n    include: paths.appSrc,\n    use: 'babel',\n\n  },\n  {\n    test: /\\.css$/,\n    use: ExtractTextPlugin.extract({\n      fallback: 'style-loader',\n      use: [\n          { loader: 'css-loader', options: { importLoaders: 1 } },\n          'postcss-loader'\n      ]\n    })\n  },\n  {\n    test: /\\.json$/,\n    use: 'json'\n  },\n  {\n    test: /\\.svg$/,\n    use: 'file',\n    query: {\n      name: 'static/media/[name].[hash:8].[ext]'\n    }\n  }\n]\n\n},\npostcss: function() {\n    return [\n      autoprefixer({\n        browsers: [\n          '>1%',\n          'last 4 versions',\n          'Firefox ESR',\n          'not ie < 9', // React doesn't support IE8 anyway\n        ]\n      }),\n    ];\n  },\nplugins: [\n    new InterpolateHtmlPlugin(env.raw),\nnew HtmlWebpackPlugin({\n  inject: true,\n  template: paths.appHtml,\n  minify: {\n    removeComments: true,\n    collapseWhitespace: true,\n    removeRedundantAttributes: true,\n    useShortDoctype: true,\n    removeEmptyAttributes: true,\n    removeStyleLinkTypeAttributes: true,\n    keepClosingSlash: true,\n    minifyJS: true,\n    minifyCSS: true,\n    minifyURLs: true\n  }\n}),\n\nnew webpack.DefinePlugin(env.stringified),\n\nnew webpack.optimize.OccurrenceOrderPlugin(),\n\nnew webpack.optimize.DedupePlugin(),\n\nnew webpack.optimize.UglifyJsPlugin({\n  compress: {\n    screw_ie8: true, // React doesn't support IE8\n    warnings: false\n  },\n  mangle: {\n    screw_ie8: true\n  },\n  output: {\n    comments: false,\n    screw_ie8: true\n  }\n}),\n\nnew ExtractTextPlugin(cssFilename),\n\nnew ManifestPlugin({\n  fileName: 'asset-manifest.json'\n})\n\n]. Thanks for letting me know! I'll take a look and make the necessary adjustments.. ",
    "someok": "I install the fix version, but discardComments problem still there. If postcss-loader is 2 loader after sass, the process is right.\nThe problem is that it as 1 loader.\nMichael Ciniawsky notifications@github.com\u4e8e2017\u5e745\u67089\u65e5\u5468\u4e8c 10:04\u5199\u9053\uff1a\n\n[Hopefully \ud83d\ude1b] fixed by e764761\nhttps://github.com/postcss/postcss-loader/commit/e764761\nReleased in v2.0.2\nhttps://github.com/postcss/postcss-loader/releases/tag/v2.0.2\nAwaiting futher reply :D\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/postcss/postcss-loader/issues/213#issuecomment-300040689,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABc9iibzkj35SKLG3A1KNzBjnGtq-Ii7ks5r38mygaJpZM4NUn1h\n.\n. Two comment style /**/ and // are all used.. orignal version:\n\"postcss-loader\": \"^2.0.6\"\n\"cssnano\": \"3.10.0\"\n\nupdate cssnano v4.0.0-rc.0 the problem still exist.\ncss-loader with minimize is correct:\n{\nloader: 'css-loader',\noptions: {\n            minimize: cssMinimizeOptions(isDev)\n}\n}\nI think this should be a bug?. @michael-ciniawsky yes, you are right, normalizeUrl cause of this problem.\nI think the best practice is not enable cssnano at postcss-loader, use minimize at css-loader.. ",
    "doberkofler": "@michael-ciniawsky Thank you. It's working now.. ",
    "duleigiser": "I  use ExtractTextPlugin to put all kinds of style files into one files.\n\nhere is my config files fragments\n``\n{\n        test: /\\.(css$|styl)$/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use://\"css-loader!postcss-loader!stylus-loader\"\n           [\n             \"css-loader\",\n           {\n              loader:\"postcss-loader\",\n              options: {\n               sourceMap:true //webpack config when we setdev-tool: true'\n             }\n            },\n            {\n              loader:\"stylus-loader\",//put this loader  in the end\n              options: {\n                importLoaders: 1\n              }\n            }\n          ]\n        })\n      }\n\n```. ",
    "Malenconiaprincep": "@michael-ciniawsky \nThanks for your advice\nI upgrade webpack-dev-server to v2.4.5  and modify code , but still not work; I think my config loader postcss-loaders has plugins config that why it still tries to look for a postcss.config.js. {\n        loader: 'postcss-loader',\n        options: {\n               plugins: function () {\n                    return [\n                      require('autoprefixer')\n                    ];\n             }\n        }\n}\nI remove precess , it can works , but I need to use @import colors.css variable , is plugin precss has problem in postcss-loader?. @michael-ciniawsky \nThanks for your advice\nmodule.exports = {\n  plugins: {\n    'postcss-import': {},\n    'autoprefixer': {},\n    // Enjoy a familiar syntax with variables, mixins, conditionals, and other goodies.\n    'precss':{},\n  }\n}\nIt's strange , I use postcss.config.js instead of webpack's config  , then I use postcss.config.js is work , but webpack's config is not work ~~~  \n\nI follow your example \uff0cbut not work   \ud83d\ude1b    \n. Thanks , use {Array} in options.plugins is OK,  thanks u  \ud83d\ude1b. ",
    "moimael": "Using an array lead to weird output in webpack compilation:\n{\"plugins\":[null,{\"version\":\"5.2.16\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"postcss-cssnext\",\"postcssVersion\":\"5.2.16\"},{\"version\":\"5.2.16\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.16\"},null]}. Yes minification seems to work. All the null in plugins are just a bit scary :). Both removing the concat and adding ident: 'postcss' didn't change anything.. That works, thanks a lot for your help :). ",
    "zhe-he": "@michael-ciniawsky \nwhen i use Webpack code splitting feature.\nrequire.ensure(['./xxx.vue'], () => {\n    resolve(require('./xxx.vue'))\n  })\n\nxxx.vue\n\nerror: \nERROR in ./~/_css-loader@0.27.3@css-loader!./~/_postcss-loader@1.3.3@postcss-loader?{\"config\":{\"path\":\"config/postcss.config.js\"}}!./~/_sass-loader@6.0.5@sass-loader/lib/loader.js!./css/credentials.scss\nModule build failed: TypeError: Path must be a string. Received { path: 'config/postcss.config.js' }\n\nwebpack.config.js .\nvar loaders = [\n    {loader: 'css-loader'},\n    {\n        loader: 'postcss-loader',\n        options: {\n            config: {\n                path: 'config/postcss.config.js'\n            }\n        }\n    }\n]; \n{\n                test: /\\.(scss|sass)$/,\n                exclude:/node_modules/,\n                use: ExtractTextPlugin.extract({\n                    fallback: 'style-loader',\n                    use: loaders.concat({loader: 'sass-loader'})\n                })\n            }, \n``{\n                test: /.vue$/,\n                exclude:/node_modules/,\n                use: [\n                    {\n                        loader: 'vue-loader',\n                        options: {\n                            extractCSS: true,\n                            preserveWhitespace: false,\n                            postcss: [ autoprefixer({browsers: ['last 9 versions']}) ],\n                            loaders: {\n                                'js': 'babel-loader?presets[]=es2015&plugins[]=transform-object-rest-spread'\n                        }\n                    }\n                }\n            ]\n        },``\n\n\npostcss.config.js.  \nconst autoprefixer = require('autoprefixer')\nmodule.exports = {\n    plugins: [\n        autoprefixer({ browsers: ['last 9 versions'], cascade: false })\n    ]\n} \n\npostcss-loader@2.0.5 .\nvue-loader@11.3.4.\nsass-loader@6.0.3.. ",
    "psirenny": "I think this issue might be back with webpack 3. loaderUtils.getOptions() seems to be discarding functions passed into it. I'm guessing because they are non-serializable. See https://github.com/webpack/loader-utils/issues/56.. ",
    "edwardfhsiao": "actually,\njs\nident: 'postcss',\nfixed my problem.\nMy problem was that when I just start building using webpack3 watch mode, postcss-loader worked fine, however, if I got typos to have a syntax error in a js file, for example, I accidentally typed two commas, the js file broked, right? \n\nRight after I fixed the comma thing, postcss-loader immediately had this Module build failed: ModuleBuildError: Module build failed: TypeError: Cannot read property 'postcss' of null error and my css file broked.\n\n\n. @michael-ciniawsky  well, the error messages were solved by using ident: 'postcss'\nhere is the repo I made to reproduce: https://github.com/edwardfhsiao/test__postcss-loader, and hope its helpful\n. ",
    "chrisblossom": "During the process of gutting my app to give an example repository, I found the following in my server webpack config:\njs\n        new webpack.LoaderOptionsPlugin({\n            options: {\n                context: __dirname,\n            },\n        }),\nAfter removing that, everything works as expected. Thanks for the quick reply!. ",
    "theasia-Ashish": "@chrisblossom  your comment save my life, after struggling this checksum warning nearly a month. . ",
    "DBosley": "This issue seems to affect multiple loaders. Posted the same issue on all affected loaders:\nhttps://github.com/webpack-contrib/css-loader/issues/529\nhttps://github.com/webpack-contrib/sass-loader/issues/451\nhttps://github.com/webpack-contrib/style-loader/issues/231\nhttps://github.com/postcss/postcss-loader/issues/224. I actually disabled bootstrap loader because I saw it was making the problem even worse.\nhere's the path I'm getting with the above config:\nC:/Users/Dave/_DEV/ModernEra/bdhp_ui/src/styles/C:\\Users\\Dave\\_DEV\\ModernEra\\bdhp_ui/src\\styles\\bootstrap\\_bootswatch.scss. This is my styles folder\n\nstyles.scss:\n$fa-font-path: \"~font-awesome/fonts\";\n@import 'variables'; // from ./bootstrap\n@import '~bootstrap-sass/assets/stylesheets/bootstrap';\n@import 'bootswatch'; // from ./bootstrap\n@import '~font-awesome/scss/font-awesome';\n. My project is based off this starter project:\nhttps://github.com/AngularClass/angular2-webpack-starter\nmy configs:\nwebpack.common.js:\n```\n/*\n * @author: @AngularClass\n /\nconst webpack = require('webpack');\nconst helpers = require('./helpers');\n/\n * Webpack Plugins\n /\n// problem with copy-webpack-plugin\nconst AssetsPlugin = require('assets-webpack-plugin');\nconst NormalModuleReplacementPlugin = require('webpack/lib/NormalModuleReplacementPlugin');\nconst ContextReplacementPlugin = require('webpack/lib/ContextReplacementPlugin');\nconst CommonsChunkPlugin = require('webpack/lib/optimize/CommonsChunkPlugin');\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\nconst CheckerPlugin = require('awesome-typescript-loader').CheckerPlugin;\nconst HtmlElementsPlugin = require('./html-elements-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst LoaderOptionsPlugin = require('webpack/lib/LoaderOptionsPlugin');\nconst ScriptExtHtmlWebpackPlugin = require('script-ext-html-webpack-plugin');\nconst ngcWebpack = require('ngc-webpack');\nconst ProvidePlugin = require('webpack/lib/ProvidePlugin');\n/\n * Webpack Constants\n /\nconst HMR = helpers.hasProcessFlag('hot');\nconst AOT = helpers.hasNpmFlag('aot');\nconst METADATA = {\n  title: 'Big Dogs Huge Paws',\n  baseUrl: '/',\n  isDevServer: helpers.isWebpackDevServer()\n};\n/\n * Webpack configuration\n \n * See: http://webpack.github.io/docs/configuration.html#cli\n */\nmodule.exports = function (options) {\n  isProd = options.env === 'production';\n  return {\n/*\n * Cache generated modules and chunks to improve performance for multiple incremental builds.\n * This is enabled by default in watch mode.\n * You can pass false to disable it.\n *\n * See: http://webpack.github.io/docs/configuration.html#cache\n */\n//cache: false,\n\n/*\n * The entry point for the bundle\n * Our Angular.js app\n *\n * See: http://webpack.github.io/docs/configuration.html#entry\n */\nentry: {\n\n  'polyfills': './src/polyfills.browser.ts',\n  'main': AOT ? './src/main.browser.aot.ts' : './src/main.browser.ts',\n\n},\n\n/*\n * Options affecting the resolving of modules.\n *\n * See: http://webpack.github.io/docs/configuration.html#resolve\n */\nresolve: {\n\n  /*\n   * An array of extensions that should be used to resolve modules.\n   *\n   * See: http://webpack.github.io/docs/configuration.html#resolve-extensions\n   */\n  extensions: ['.ts', '.js', '.json'],\n\n  // An array of directory names to be resolved to the current directory\n  modules: [helpers.root('src'), helpers.root('node_modules')],\n\n},\n\n/*\n * Options affecting the normal modules.\n *\n * See: http://webpack.github.io/docs/configuration.html#module\n */\nmodule: {\n\n  rules: [\n\n    /*\n     * Typescript loader support for .ts\n     *\n     * Component Template/Style integration using `angular2-template-loader`\n     * Angular 2 lazy loading (async routes) via `ng-router-loader`\n     *\n     * `ng-router-loader` expects vanilla JavaScript code, not TypeScript code. This is why the\n     * order of the loader matter.\n     *\n     * See: https://github.com/s-panferov/awesome-typescript-loader\n     * See: https://github.com/TheLarkInn/angular2-template-loader\n     * See: https://github.com/shlomiassaf/ng-router-loader\n     */\n    {\n      test: /\\.ts$/,\n      use: [{\n          loader: '@angularclass/hmr-loader',\n          options: {\n            pretty: !isProd,\n            prod: isProd\n          }\n        },\n        { // MAKE SURE TO CHAIN VANILLA JS CODE, I.E. TS COMPILATION OUTPUT.\n          loader: 'ng-router-loader',\n          options: {\n            loader: 'async-import',\n            genDir: 'compiled',\n            aot: AOT\n          }\n        },\n        {\n          loader: 'awesome-typescript-loader',\n          options: {\n            configFileName: 'tsconfig.webpack.json'\n          }\n        },\n        {\n          loader: 'angular2-template-loader'\n        }\n      ],\n      exclude: [/\\.(spec|e2e)\\.ts$/]\n    },\n\n    /*\n     * Json loader support for *.json files.\n     *\n     * See: https://github.com/webpack/json-loader\n     */\n    {\n      test: /\\.json$/,\n      use: 'json-loader'\n    },\n\n    /*\n     * to string and css loader support for *.css files (from Angular components)\n     * Returns file content as string\n     *\n     */\n    {\n      test: /\\.css$/,\n      use: [{\n        loader: 'to-string-loader'\n      }, {\n        loader: 'css-loader',\n        options: {\n          sourceMap: true,\n        }\n      }, {\n        loader: 'postcss-loader',\n      }],\n      exclude: [helpers.root('src', 'styles')]\n    },\n    // {\n    //   test: /bootstrap-sass[\\/\\\\]assets[\\/\\\\]javascripts[\\/\\\\]/,\n    //   loader: 'imports-loader?jQuery=jquery'\n    // },\n\n    /*\n     * to string and sass loader support for *.scss files (from Angular components)\n     * Returns compiled css content as string\n     *\n     */\n    {\n      test: /\\.scss$/,\n      use: [{\n          loader: 'to-string-loader'\n        }, \n        {\n          loader: 'css-loader',\n          options: {\n            sourceMap: true,\n          }\n        },\n        {\n          loader: 'sass-loader',\n          options: {\n            includePaths: [\n              './src/styles/bootstrap',\n              './src/styles/partials'\n            ],\n            sourceMap: true,\n          }\n        },\n        {\n          loader: 'postcss-loader',\n          options: {\n            parser: require('postcss-scss'),\n          }\n        }\n      ],\n      exclude: [helpers.root('src', 'styles')]\n    },\n\n    /* Raw loader support for *.html\n     * Returns file content as string\n     *\n     * See: https://github.com/webpack/raw-loader\n     */\n    {\n      test: /\\.html$/,\n      use: 'raw-loader',\n      exclude: [helpers.root('src/index.html')]\n    },\n\n    /* \n     * File loader for supporting images, for example, in CSS files.\n     */\n    {\n      test: /\\.(jpg|png|gif)$/,\n      use: 'file-loader'\n    },\n\n\n    {\n      test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n      loader: \"url-loader?limit=10000&mimetype=application/font-woff\"\n    },\n    /* File loader for supporting fonts, for example, in CSS files.\n     */\n    {\n      test: /\\.(ttf|eot|svg)(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/,\n      loader: \"file-loader\"\n    }\n\n  ],\n\n},\n\n/*\n * Add additional plugins to the compiler.\n *\n * See: http://webpack.github.io/docs/configuration.html#plugins\n */\nplugins: [\n  new AssetsPlugin({\n    path: helpers.root('dist'),\n    filename: 'webpack-assets.json',\n    prettyPrint: true\n  }),\n\n  /*\n   * Plugin: ForkCheckerPlugin\n   * Description: Do type checking in a separate process, so webpack don't need to wait.\n   *\n   * See: https://github.com/s-panferov/awesome-typescript-loader#forkchecker-boolean-defaultfalse\n   */\n  new CheckerPlugin(),\n  /*\n   * Plugin: CommonsChunkPlugin\n   * Description: Shares common code between the pages.\n   * It identifies common modules and put them into a commons chunk.\n   *\n   * See: https://webpack.github.io/docs/list-of-plugins.html#commonschunkplugin\n   * See: https://github.com/webpack/docs/wiki/optimization#multi-page-app\n   */\n  new CommonsChunkPlugin({\n    name: 'polyfills',\n    chunks: ['polyfills']\n  }),\n  // This enables tree shaking of the vendor modules\n  new CommonsChunkPlugin({\n    name: 'vendor',\n    chunks: ['main'],\n    minChunks: module => /node_modules/.test(module.resource)\n  }),\n  // Specify the correct order the scripts will be injected in\n  new CommonsChunkPlugin({\n    name: ['polyfills', 'vendor'].reverse()\n  }),\n\n  /**\n   * Plugin: ContextReplacementPlugin\n   * Description: Provides context to Angular's use of System.import\n   *\n   * See: https://webpack.github.io/docs/list-of-plugins.html#contextreplacementplugin\n   * See: https://github.com/angular/angular/issues/11580\n   */\n   new ContextReplacementPlugin(\n    // The (\\\\|\\/) piece accounts for path separators in *nix and Windows\n    /angular(\\\\|\\/)core(\\\\|\\/)@angular/,\n    helpers.root('src'), // location of your src\n    {\n      // your Angular Async Route paths relative to this root directory\n    }\n  ),\n\n  /*\n   * Plugin: CopyWebpackPlugin\n   * Description: Copy files and directories in webpack.\n   *\n   * Copies project static assets.\n   *\n   * See: https://www.npmjs.com/package/copy-webpack-plugin\n   */\n  new CopyWebpackPlugin([{\n      from: 'src/assets',\n      to: 'assets'\n    },\n    {\n      from: 'src/meta'\n    }\n  ]),\n\n\n  /*\n   * Plugin: HtmlWebpackPlugin\n   * Description: Simplifies creation of HTML files to serve your webpack bundles.\n   * This is especially useful for webpack bundles that include a hash in the filename\n   * which changes every compilation.\n   *\n   * See: https://github.com/ampedandwired/html-webpack-plugin\n   */\n  new HtmlWebpackPlugin({\n    template: 'src/index.html',\n    title: METADATA.title,\n    chunksSortMode: 'dependency',\n    metadata: METADATA,\n    inject: 'head'\n  }),\n\n  /*\n   * Plugin: ScriptExtHtmlWebpackPlugin\n   * Description: Enhances html-webpack-plugin functionality\n   * with different deployment options for your scripts including:\n   *\n   * See: https://github.com/numical/script-ext-html-webpack-plugin\n   */\n  new ScriptExtHtmlWebpackPlugin({\n    defaultAttribute: 'defer'\n  }),\n\n  /*\n   * Plugin: HtmlElementsPlugin\n   * Description: Generate html tags based on javascript maps.\n   *\n   * If a publicPath is set in the webpack output configuration, it will be automatically added to\n   * href attributes, you can disable that by adding a \"=href\": false property.\n   * You can also enable it to other attribute by settings \"=attName\": true.\n   *\n   * The configuration supplied is map between a location (key) and an element definition object (value)\n   * The location (key) is then exported to the template under then htmlElements property in webpack configuration.\n   *\n   * Example:\n   *  Adding this plugin configuration\n   *  new HtmlElementsPlugin({\n   *    headTags: { ... }\n   *  })\n   *\n   *  Means we can use it in the template like this:\n   *  <%= webpackConfig.htmlElements.headTags %>\n   *\n   * Dependencies: HtmlWebpackPlugin\n   */\n  new HtmlElementsPlugin({\n    headTags: require('./head-config.common')\n  }),\n\n  /**\n   * Plugin LoaderOptionsPlugin (experimental)\n   *\n   * See: https://gist.github.com/sokra/27b24881210b56bbaff7\n   */\n  new LoaderOptionsPlugin({}),\n\n  // Fix Angular 2\n  new NormalModuleReplacementPlugin(\n    /facade(\\\\|\\/)async/,\n    helpers.root('node_modules/@angular/core/src/facade/async.js')\n  ),\n  new NormalModuleReplacementPlugin(\n    /facade(\\\\|\\/)collection/,\n    helpers.root('node_modules/@angular/core/src/facade/collection.js')\n  ),\n  new NormalModuleReplacementPlugin(\n    /facade(\\\\|\\/)errors/,\n    helpers.root('node_modules/@angular/core/src/facade/errors.js')\n  ),\n  new NormalModuleReplacementPlugin(\n    /facade(\\\\|\\/)lang/,\n    helpers.root('node_modules/@angular/core/src/facade/lang.js')\n  ),\n  new NormalModuleReplacementPlugin(\n    /facade(\\\\|\\/)math/,\n    helpers.root('node_modules/@angular/core/src/facade/math.js')\n  ),\n\n  new ngcWebpack.NgcWebpackPlugin({\n    disabled: !AOT,\n    tsConfig: helpers.root('tsconfig.webpack.json'),\n    resourceOverride: helpers.root('config/resource-override.js')\n  })\n\n],\n\n/*\n * Include polyfills or mocks for various node stuff\n * Description: Node configuration\n *\n * See: https://webpack.github.io/docs/configuration.html#node\n */\nnode: {\n  global: true,\n  crypto: 'empty',\n  process: true,\n  module: false,\n  clearImmediate: false,\n  setImmediate: false\n}\n\n};\n}\n```\nwebpack.dev.js:\n```\n/*\n * @author: @AngularClass\n /\nconst helpers = require('./helpers');\nconst path = require('path');\nconst webpackMerge = require('webpack-merge'); // used to merge webpack configs\nconst webpackMergeDll = webpackMerge.strategy({\n  plugins: 'replace'\n});\nconst commonConfig = require('./webpack.common.js'); // the settings that are common to prod and dev\n/*\n * Webpack Plugins\n /\nconst AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin');\nconst DefinePlugin = require('webpack/lib/DefinePlugin');\nconst NamedModulesPlugin = require('webpack/lib/NamedModulesPlugin');\nconst LoaderOptionsPlugin = require('webpack/lib/LoaderOptionsPlugin');\n/*\n * Webpack Constants\n /\nconst ENV = process.env.ENV = process.env.NODE_ENV = 'development';\nconst HOST = process.env.HOST || 'localhost';\nconst PORT = process.env.PORT || 3000;\nconst HMR = helpers.hasProcessFlag('hot');\nconst METADATA = webpackMerge(commonConfig({\n  env: ENV\n}).metadata, {\n  host: HOST,\n  port: PORT,\n  ENV: ENV,\n  HMR: HMR\n});\nconst DllBundlesPlugin = require('webpack-dll-bundles-plugin').DllBundlesPlugin;\n/\n * Webpack configuration\n \n * See: http://webpack.github.io/docs/configuration.html#cli\n /\nmodule.exports = function (options) {\n  return webpackMerge(commonConfig({\n    env: ENV\n  }), {\n/**\n * Developer tool to enhance debugging\n *\n * See: http://webpack.github.io/docs/configuration.html#devtool\n * See: https://github.com/webpack/docs/wiki/build-performance#sourcemaps\n */\ndevtool: 'cheap-module-source-map',\n\n/**\n * Options affecting the output of the compilation.\n *\n * See: http://webpack.github.io/docs/configuration.html#output\n */\noutput: {\n\n  /**\n   * The output directory as absolute path (required).\n   *\n   * See: http://webpack.github.io/docs/configuration.html#output-path\n   */\n  path: helpers.root('dist'),\n\n  /**\n   * Specifies the name of each output file on disk.\n   * IMPORTANT: You must not specify an absolute path here!\n   *\n   * See: http://webpack.github.io/docs/configuration.html#output-filename\n   */\n  filename: '[name].bundle.js',\n\n  /**\n   * The filename of the SourceMaps for the JavaScript files.\n   * They are inside the output.path directory.\n   *\n   * See: http://webpack.github.io/docs/configuration.html#output-sourcemapfilename\n   */\n  sourceMapFilename: '[file].map',\n\n  /** The filename of non-entry chunks as relative path\n   * inside the output.path directory.\n   *\n   * See: http://webpack.github.io/docs/configuration.html#output-chunkfilename\n   */\n  chunkFilename: '[id].chunk.js',\n\n  library: 'ac_[name]',\n  libraryTarget: 'var',\n  devtoolModuleFilenameTemplate: \"webpack:///[resource-path]\"\n\n},\n\nmodule: {\n\n  rules: [{\n      test: /\\.ts$/,\n      use: [{\n        loader: 'tslint-loader',\n        options: {\n          configFile: 'tslint.json'\n        }\n      }],\n      exclude: [/\\.(spec|e2e)\\.ts$/]\n    },\n\n    /*\n     * css loader support for *.css files (styles directory only)\n     * Loads external css styles into the DOM, supports HMR\n     *\n     */\n    {\n      test: /\\.css$/,\n      use: [{\n          loader: 'style-loader',\n        },\n        {\n          loader: 'css-loader',\n          options: {\n            sourceMap: true\n          }\n        },\n        {\n          loader: 'postcss-loader',\n        }\n      ],\n      include: [helpers.root('src', 'styles')]\n    },\n\n    /*\n     * sass loader support for *.scss files (styles directory only)\n     * Loads external sass styles into the DOM, supports HMR\n     *\n     */\n    {\n      test: /\\.scss$/,\n      use: [{\n          loader: 'style-loader',\n        },\n        {\n          loader: 'css-loader',\n          options: {\n            sourceMap: true,\n          }\n        },\n        {\n          loader: 'sass-loader',\n          options: {\n            includePaths: [\n              './src/styles/bootstrap',\n              './src/styles/partials'\n            ],\n            sourceMap: true,\n          }\n        },\n        {\n          loader: 'postcss-loader',\n          options: {\n            parser: require('postcss-scss'),\n          }\n        }\n      ],\n      include: [helpers.root('src', 'styles')]\n    },\n  ]\n},\n\nplugins: [\n\n  /**\n   * Plugin: DefinePlugin\n   * Description: Define free variables.\n   * Useful for having development builds with debug logging or adding global constants.\n   *\n   * Environment helpers\n   *\n   * See: https://webpack.github.io/docs/list-of-plugins.html#defineplugin\n   */\n  // NOTE: when adding more properties, make sure you include them in custom-typings.d.ts\n  new DefinePlugin({\n    'ENV': JSON.stringify(METADATA.ENV),\n    'HMR': METADATA.HMR,\n    'process.env': {\n      'ENV': JSON.stringify(METADATA.ENV),\n      'NODE_ENV': JSON.stringify(METADATA.ENV),\n      'HMR': METADATA.HMR,\n    }\n  }),\n\n  new DllBundlesPlugin({\n    bundles: {\n      polyfills: [\n        'core-js',\n        {\n          name: 'zone.js',\n          path: 'zone.js/dist/zone.js'\n        },\n        {\n          name: 'zone.js',\n          path: 'zone.js/dist/long-stack-trace-zone.js'\n        },\n      ],\n      vendor: [\n        '@angular/platform-browser',\n        '@angular/platform-browser-dynamic',\n        '@angular/core',\n        '@angular/common',\n        '@angular/forms',\n        '@angular/http',\n        '@angular/router',\n        '@angularclass/hmr',\n        'rxjs',\n      ]\n    },\n    dllDir: helpers.root('dll'),\n    webpackConfig: webpackMergeDll(commonConfig({\n      env: ENV\n    }), {\n      devtool: 'cheap-module-source-map',\n      plugins: []\n    })\n  }),\n\n  /**\n   * Plugin: AddAssetHtmlPlugin\n   * Description: Adds the given JS or CSS file to the files\n   * Webpack knows about, and put it into the list of assets\n   * html-webpack-plugin injects into the generated html.\n   *\n   * See: https://github.com/SimenB/add-asset-html-webpack-plugin\n   */\n  new AddAssetHtmlPlugin([{\n      filepath: helpers.root(`dll/${DllBundlesPlugin.resolveFile('polyfills')}`)\n    },\n    {\n      filepath: helpers.root(`dll/${DllBundlesPlugin.resolveFile('vendor')}`)\n    }\n  ]),\n\n  /**\n   * Plugin: NamedModulesPlugin (experimental)\n   * Description: Uses file names as module name.\n   *\n   * See: https://github.com/webpack/webpack/commit/a04ffb928365b19feb75087c63f13cadfc08e1eb\n   */\n  // new NamedModulesPlugin(),\n\n  /**\n   * Plugin LoaderOptionsPlugin (experimental)\n   *\n   * See: https://gist.github.com/sokra/27b24881210b56bbaff7\n   */\n  new LoaderOptionsPlugin({\n    debug: true,\n    options: {\n\n    }\n  }),\n\n],\n\n/**\n * Webpack Development Server configuration\n * Description: The webpack-dev-server is a little node.js Express server.\n * The server emits information about the compilation state to the client,\n * which reacts to those events.\n *\n * See: https://webpack.github.io/docs/webpack-dev-server.html\n */\ndevServer: {\n  port: METADATA.port,\n  host: METADATA.host,\n  historyApiFallback: true,\n  watchOptions: {\n    aggregateTimeout: 300,\n    poll: 1000\n  }\n},\n\n/*\n * Include polyfills or mocks for various node stuff\n * Description: Node configuration\n *\n * See: https://webpack.github.io/docs/configuration.html#node\n */\nnode: {\n  global: true,\n  crypto: 'empty',\n  process: true,\n  module: false,\n  clearImmediate: false,\n  setImmediate: false\n}\n\n});\n}\n. project tree\nC:.\n\u251c\u2500\u2500\u2500.github\n\u251c\u2500\u2500\u2500.vscode\n\u251c\u2500\u2500\u2500config\n\u2502   \u251c\u2500\u2500\u2500github-deploy\n\u2502   \u2514\u2500\u2500\u2500html-elements-plugin\n\u2514\u2500\u2500\u2500src\n    \u251c\u2500\u2500\u2500app\n    \u2502   \u251c\u2500\u2500\u2500header\n    \u2502   \u251c\u2500\u2500\u2500no-content\n    \u2502   \u2514\u2500\u2500\u2500theme-palette\n    \u251c\u2500\u2500\u2500assets\n    \u2502   \u251c\u2500\u2500\u2500css\n    \u2502   \u251c\u2500\u2500\u2500icon\n    \u2502   \u2514\u2500\u2500\u2500img\n    \u251c\u2500\u2500\u2500meta\n    \u2514\u2500\u2500\u2500styles\n        \u251c\u2500\u2500\u2500bootstrap\n        \u2514\u2500\u2500\u2500partials\n```. ",
    "pgmanutd": "@evilebottnawi Yes I am facing the same issue on windows machine (weird path : C:/Projects/test/node_modules/bootstrap/dist/css/C:\\scss\\utilities\\_flex.scss), but it is not related to sass-loader (I am not using sass-loader).\nHere are my css loaders:\n{\n      loader: 'css-loader',\n      options: {\n        modules: true,\n        importLoaders: 1,\n        camelCase: true,\n        sourceMap: true\n      }\n    }, {\n      loader: 'postcss-loader',\n      options: {\n        sourceMap: true\n      }\n    }\nIt was working fine @1.3.3, but not @2.x.x\n. ",
    "felixsanz": "@michael-ciniawsky Looks like with 2.x my CSS modules are now broken. Is this related?\nIs there a workaround? Thanks!. @michael-ciniawsky I'm using css-loader's modules: true option. I'm not using LoaderOptionsPlugin anywhere. I'll continue in #232. My CSS Modules also stopped working with css-loader 2.x. Heres my webpack config:\n```javascript\nimport path from 'path'\nimport fs from 'fs'\nconst externals = fs.readdirSync('node_modules')\n  .filter((file) => !file.includes('.bin'))\n  .map((name) => ({ [name]: commonjs ${name} }))\n  .reduce((prev, curr) => ({ ...prev, ...curr }))\nconst defaultConfig = {\n  context: path.resolve(__dirname, '..'),\n  entry: './src/server',\n  externals,\n  node: {\n    __dirname: true,\n  },\n  target: 'node',\n  output: {\n    path: path.resolve(__dirname, '..', 'dist'),\n    filename: 'server.js',\n  },\n  module: {\n    rules: [\n      {\n        test: /.js$/,\n        use: [{\n          loader: 'babel-loader',\n        }],\n        exclude: [\n          path.resolve(__dirname, 'node_modules'),\n        ],\n      },\n      {\n        test: /.css$/,\n        use: ExtractTextWebpackPlugin.extract({\n          fallback: 'style-loader',\n          use: [\n            {\n              loader: 'css-loader',\n              query: {\n                modules: true,\n                importLoaders: 1,\n                localIdentName: '[local]-[hash:base64:5]',\n              },\n            },\n            {\n              loader: 'postcss-loader',\n            },\n          ],\n        }),\n      },\n    ],\n  },\n  plugins: [\n    new ExtractTextWebpackPlugin({\n      filename: 'styles.css',\n      ignoreOrder: true,\n    }),\n  ],\n  devtool: 'cheap-module-eval-source-map',\n}\nexport default defaultConfig\n```\nAny idea why this happens?. @evilebottnawi I'm not duplicating anything, i just moved my conversation here to avoid polluting the other issue :/\nNotice that i deleted my message from the other issue. Sorry if it triggered notfiications. @evilebottnawi  I tried to create one reproducible test case but i don't even know what i'm supposed to reproduce. I don't understand whats going on, i just see that many rules just dissappeared while others are just there.\nOpen it then please? It's clearly not fixed. @michael-ciniawsky It was working fine with 1.3.3. So the bug was introduced with postcss-loader 2.x, directly or indirectly.\nMy .postcssrc is this:\n{\n  \"plugins\": {\n    \"postcss-import\": {}\n  }\n}. I'll try create a testcase, but I spent an hour before with no success. I'll try again tomorrow.. ",
    "timbur": "Could this issue be the reason why webpack HMR no longer detects when I change the style of an existing class?. I've narrowed it down to the following updates (older version of postcss works without issue):\ndiff\n-    \"postcss\": \"^5.2.18\",\n+    \"postcss\": \"^6.0.13\",\n-    \"postcss-loader\": \"^0.8.0\",\n+    \"postcss-loader\": \"^2.0.8\",\n-    \"postcss-modules\": \"^0.3.0\",\n+    \"postcss-modules\": \"^1.1.0\",\n-    \"postcss-nested\": \"^1.0.0\",\n+    \"postcss-nested\": \"^2.1.2\",\nWebpack config looks like:\n```js\n'use strict';\nvar path = require('path');\nvar webpack = require('webpack');\nvar DotenvPlugin = require('dotenv-to-webpack');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar envPath;\nif (process.env.DOTENV_PATH) {\n  envPath = path.join(process.env.DOTENV_PATH, './.env.development');\n} else {\n  envPath = path.join(__dirname, './.env.development');\n}\nmodule.exports = {\n  devtool: 'cheap-module-eval-source-map',\n  entry: {\n    App: [\n      'webpack-hot-middleware/client',\n      'babel-polyfill',\n      './src/renderApp.js'\n    ],\n    BasicTheme: [\n      'webpack-hot-middleware/client',\n      './src/themes/BasicTheme/BasicTheme.js'\n    ]\n  },\n  resolve: {\n    extensions: ['.js']\n  },\n  output: {\n    path: path.join(dirname, 'dist'),\n    filename: '[name].js',\n    chunkFilename: '[id].js',\n    publicPath: '/dist/',\n    library: '[name]',\n    libraryTarget: 'umd'\n  },\n  plugins: [\n    new DotenvPlugin({ path: envPath }),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoEmitOnErrorsPlugin(),\n    new ExtractTextPlugin('[name].css')\n  ],\n  module: {\n    noParse: /dist\\/localforage(|.min).js/,\n    rules: [\n      {\n        test: /.js$/,\n        use: ['babel-loader?'+JSON.stringify({\n          plugins: [\n            ['react-transform', {\n              transforms: [{\n                transform: 'react-transform-hmr',\n                imports: ['react'],\n                locals:  ['module']\n              }]\n            }]\n          ]\n        })],\n        include: [\n          path.resolve(__dirname, 'src')\n        ]\n      },\n      {\n        test: /.css$/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: 'css-loader?modules&sourceMap&importLoaders=1&localIdentName=[name][local]___[hash:base64:5]!postcss-loader'\n        }),\n        include: [\n          path.resolve(__dirname, 'src')\n        ]\n      }\n    ]\n  }\n};\n```\nThe CSS files are imported like so (from within the theme's .js file which maps the class names from their original class name to their localIdentName):\n```js\nimport root from './root.css';\nimport App from './App.css';\nimport Foo from './Foo.css';\nimport Bar from './Bar.css';\nexport default {\n  classes: {\n    ...root,\n    ...App,\n    ...Foo,\n    ...Bar\n  }\n};\nif (process.env.NODE_ENV !== 'production') {\n  if (module.hot) {\n    const reloadTheme = require('provide-theme').reloadTheme;\nmodule.hot.accept([\n  './root.css',\n  './App.css',\n  './Foo.css',\n  './Bar.css'\n], () => {\n  reloadTheme('BasicTheme', {\n    classes: {\n      ...require('./root.css'),\n      ...require('./App.css'),\n      ...require('./Foo.css'),\n      ...require('./Bar.css')\n    }\n  });\n});\n\n}\n}\n```\nThe problem is that, after upgrading the postcss dependencies above, it no longer detects when one of the CSS files have changed... unless a new class name is added or a class name is removed.\nFor example, if we start with:\ncss\n.App {\n  background: red;\n}\nAnd change the background:\ncss\n.App {\n  background: blue;\n}\nIt no longer detects that the CSS has changed.\nOnly if we add a new class name will it say the CSS has changed:\ncss\n.App {\n  background: blue;\n}\n.SomeNewClass {\n  background: green;\n}. I'm confused as to what to do here.  Is the problem with css-loader then?  What can I do to help?. The problem is that, for theming, I need the object which comes from the generated CSS class names so that it may be provided to components as a classes prop.\ncss\n/* App.css */\n.App {\n  background: red;\n}\n.AppContainer {\n  margin: 0 auto;\n}\n```js\n/ BasicTheme.js /\nimport App from './App.css';\nexport default {\n  classes: {\n    ...App\n  }\n};\n```\n```js\nimport theme from './BasicTheme';\nconsole.log(theme);\n/\n{\n  classes: {\n    App: '_someMinifiedClassName',\n    AppContainer: '_anotherMinifiedClassName'\n  }\n}\n/\n```\nThe minified class names are used within components like so:\n```js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nconst App = ({ classes }) => (\n  \n    etcetera\n  \n);\nApp.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default App;\n```\nWhen the CSS changes, these class names (the classes object) might change, and the components need to be given the new classes object.  This used to work without issues, but now HMR isn't detecting simple changes (like changing the background color of an existing class).. The require statements are not the issue (just verified that it does not need .default).\nThe issue is that it never even makes it to this block of code because it doesn't accept the css files as being changed (when they are in fact changed):\n```js\nif (process.env.NODE_ENV !== 'production') {\n  if (module.hot) {\n    const reloadTheme = require('provide-theme').reloadTheme;\nmodule.hot.accept([\n  './root.css',\n  './App.css',\n  './Foo.css',\n  './Bar.css'\n], () => {\n  /*\n   * NEVER REACHES THIS POINT\n   */\n  reloadTheme('BasicTheme', {\n    classes: {\n      ...require('./root.css'),\n      ...require('./App.css'),\n      ...require('./Foo.css'),\n      ...require('./Bar.css')\n    }\n  });\n});\n\n}\n}\n```\nAs far as I can tell, the issue is related to postcss, as it only began happening after the following updates:\ndiff\n-    \"postcss\": \"^5.2.18\",\n+    \"postcss\": \"^6.0.13\",\n-    \"postcss-loader\": \"^0.8.0\",\n+    \"postcss-loader\": \"^2.0.8\",\n-    \"postcss-nested\": \"^1.0.0\",\n+    \"postcss-nested\": \"^2.1.2\",. It is entirely possible the issue is actually with css-loader.  I guess I'll start a thread over there.. ",
    "clydin": "With dependency message support, inlining, I believe, is handled quite nicely.\nFor copying to the output, however, this is really only half the puzzle.  To fully support webpack plugins that modify/optimize assets as well as virtual filesystem support (for webpack-dev-server, etc.), additional support is required by both postcss-loader and postcss-url to provide a mechanism to inject the asset into the webpack compilation instance.\nAn additional asset message could be handled by postcss-loader.  This message would provide the name/size/content of the asset.  On the postcss-url side, a new action type could be created (inject for instance) which would construct and send the message.. Another option that keeps everything incredibly generic would be to create a helper function addAsset on the postcss-loader instance.  Then provide documentation with a sample custom postcss-url action function that leverages addDependency, addAsset, and adjusts the URL.\nThe large downside is the complexity of the function that everyone would have to reuse.  The URL would potentially need to be rebased, the file would need to be resolved, the add* calls, etc.. Is there a reason ICSS is a requirement?  Making a non-standard (albeit quite novel) extension to CSS a requirement doesn't seem like a good long-term plan.  There's bound to be compatibility issues in the future.  For the CSS Module use cases (which do look quite nice), ICSS should be a supported option but there should be a path that doesn't require its use.  Further, the ICSS concept still relies on the special string marker and replace strategy.  (Some form of this is inevitable if the goal is to support url/file-loader but it could be cleaner).  Especially since the ICSS postcss plugins are essentially adding additional text content to the stylesheets to have them almost immediately removed.\nWas a side channel path considered as an alternative or companion?  Postcss plugins could analyze any url() or @import and then generate postcss messages containing the asset and the actual text to match and replace (potentially with position hint information to optimize replacement) and eliminate the special string marker hack (although that could still be used).  The postcss-loader could than add the collected data to the generated webpack module for the stylesheet.  Downside is this would currently break the raw-loader-like functionality; although that functionality is not overly useful in this scenario in general (maybe an option for more basic scenarios?).   Also with the pending move of stylesheets becoming first-class, this could potentially be remedied (allow passing ancillary data through the callback?).  Upside is that it removes the back and forth CSS manipulation and gives webpack actual structured data to use directly; which should provide a more direct stylesheet processing pipeline and a decent performance improvement.  Also it appears that postcss plugins already exist to extract the ICSS import/export pseudo-selector information, so they could be used if the ICSS features were desired and eliminate the need for webpack to support them directly.. Fundamentally, my concern is that webpack directly using ICSS seems unnecessary, inefficient (although less inefficient than the current css-loader), and non-standard.  On the javascript front, proprietary methods are being relegated as legacy (e.g., require.ensure).  However, stylesheets appear to be going in the opposite direction.  This is of course mainly in regards to the use cases of url() and @import handling; two exceptionally common use cases that should ideally be highly optimized.. Thank you for the response.  However, with the widespread use of webpack (and postcss-loader) and further use in major downstream integration projects, I was hoping for a more technical discussion on the merits of the design decision based on both common and advanced use cases. As well as some insight into the analysis of alternatives aspects of the re-architecting of a major webpack subsystem.\nAlthough this PR is probably not the appropriate place for such a conversation and I apologize for the inappropriate segue.. The issue stems from this line which is modifying the options object: https://github.com/postcss/postcss-loader/blob/master/lib/options.js#L5\nSince that line changes the plugins property value from the function to the returned array and that options object is still used and kept by webpack, the function will never be called again as the plugins property is now an array for the rest of the webpack compilation.  This essentially captures the passed in loader context object inside the returned plugins array.  So the example in the readme (https://github.com/postcss/postcss-loader#plugins) for accessing loader.resourcePath only works for the first resource loaded.  Every subsequent file processed with the loader will have the same first loader.resourcePath.. ",
    "obartra": "Sure thing I filed it https://github.com/jonathantneal/postcss-partial-import/issues/40. The issue remains though with postcss-loader being compatible with it on version 1.3.3 and not on 2.0.0 onwards. Ah got it, thanks for checking!. ",
    "carlitux": "\nWhich CSS is missing (from @import only or all CSS) ?\nCSS Modules from src or node_modules, please elaborate further on this \ud83d\ude1b\n\ncss modules from src are not in css bundle.\n\nMaybe because you are setting context in LoaderOptionsPlugin (not supportd by postcss-loader\n\n= v2.0.0) anymore.\n\n\nI was thinking same but how could I do same without context option?. ",
    "olegstepura": "Hi!\nI did not investigate too deep, but after upgrade from 1.x to 2.0.5 version animations are broken in a project with react-toolbox (2.0 beta). \nI can confirm that it's exactly the upgrade of postcss-loader breaks it. In my case it's an upgrade from 1.3.3 to 2.0.5. \nBut seems like there are some improvements as well, since build is now way smaller (1.1 Mb with 2.0.5 vs \n 1.5 Mb with 1.3.3) Previously I noticed lots of unprocessed postcss code in a build. Currently there are some sourcemaps inside build, but maybe it's my fault of misconfiguration.\nSo I assume you optimized importing logic, but looks like optimizations were too hard =) It's a pity i cannot upgrade due to the mentioned issue.. Hi, @michael-ciniawsky!\nThanks for your response. Here are my config files: gist \nIn build.js I've placed some code in which you can see that sources are still included (I would like to remove it, but sourceMap: true in postcss.config.js does not seem to help).\n@evilebottnawi I will try to prepare test repo.. Here is my test repo with react-toolbox: olegstepura/postcss-loader-test\nThe only change between two versions below is an edit in package.json:\ndiff\n-    \"postcss-loader\": \"^1.3.3\",\n+    \"postcss-loader\": \"^2.0.5\",\nAnd run npm i inside test repo folder after edit.\nWith version 1.3.3:\n\nBig screen, everything is stacked good (click to see screenshot)\n\n\n\nSmall screen, animation is smooth  (click to see gif)\n\n  ![940f45f3008aaed768ae5d0d39f216bf](https://cloud.githubusercontent.com/assets/534510/26149021/f1803ef6-3af8-11e7-8941-b616e4510c1b.gif)\n\n\nWith version 2.0.5:\n\nBig screen, strange spacing between navbar and appbar  (click to see screenshot)\n\n![2017-05-17 11_56_14-test](https://cloud.githubusercontent.com/assets/534510/26149014/e6f7274c-3af8-11e7-8b47-9013be6b35bc.png)\n\n\n\nSmall screen   (click to see gif and comments)\n\n- animation  is broken: fade out first, no transition animation of nav bar, it just disappears.\n- icon color is also wrong (black instead of white)\n\n![87e299ea8ba4172b6a58865cc7b9c9c3](https://cloud.githubusercontent.com/assets/534510/26149022/f19d0e64-3af8-11e7-8ef3-ce2589dc1258.gif)\n\n\n. Also I would love to hear any suggestion on how to remove source maps from build.js in my test repo.\nnpm run build produces src/main/webapp/asset/test.js\ninside of that there is such content (with postcss-loader version 2.0.5, I inserted some newlines to make it more visually readable)\njs\n// ..\n{\"\n.M7gDzYJNjHIL0YutSEctg :before{-webkit-touch-callout:none}._3pcMeyQKXVxkWHxAmg7hCU{background:rgba(97,97,97,.9);border-radius:2px;color:#fff;display:block;padding:8px}\",\n\"\",\n{version:3,\nsources:[\"c:/Temp/test/postcss-loader-test/node_modules/react-toolbox/lib/tooltip/theme.css\"],\nnames:[],\nmappings:\"AAAA,+CACI,0DAA2D,AACnD,kDAAmD,AAE3D,0BACE,0DAA2D,AACnD,iDAAmD,CAC5D,CACJ,AAED,+CACI,8DAA+D,AACvD,sDAAuD,AAE/D,0BACE,8DAA+D,AACvD,qDAAuD,CAChE,CACJ,AAED,6CACI,8DAA+D,AACvD,sDAAuD,AAE/D,0BACE,8DAA+D,AACvD,qDAAuD,CAChE,CACJ,AAED,+CACI,4CAA6C,AACrC,mCAAqC,CAChD,uBACC,cAAe,AAEf,eAAgB,AAChB,gBAAiB,AACjB,iBAAkB,AAClB,gBAAiB,AACjB,YAAa,AACb,oBAAqB,AACrB,kBAAmB,AACnB,kBAAmB,AACnB,oBAAqB,AACrB,4CAA6C,AACrC,oCAAqC,AAC7C,kCAAmC,AAC3B,0BAA2B,AACnC,iDAAyD,AACzD,YAAa,AAEX,6CAAwD,CAM3D,AAED,6GATI,sBAAuB,AAEvB,mCAAoC,AACpC,2BAA4B,AAC5B,8BAA+B,AAC3B,0BAA2B,AACvB,qBAAsB,CAajC,AAVD,sFASM,0BAA4B,CACjC,AACD,yBACE,6BAAkC,AAClC,kBAAmB,AACnB,WAA0B,AAC1B,cAAe,AACf,WAAa,CACd\",\nfile:\"theme.css\",\nsourcesContent:[\".tooltip.tooltipRight {\\n    -webkit-transform: scale(0) translateX(0) translateY(-50%);\\n            transform: scale(0) translateX(0) translateY(-50%);\\n\\n    &.tooltipActive {\\n      -webkit-transform: scale(1) translateX(0) translateY(-50%);\\n              transform: scale(1) translateX(0) translateY(-50%);\\n    }\\n}\\n\\n.tooltip.tooltipLeft {\\n    -webkit-transform: scale(0) translateX(-100%) translateY(-50%);\\n            transform: scale(0) translateX(-100%) translateY(-50%);\\n\\n    &.tooltipActive {\\n      -webkit-transform: scale(1) translateX(-100%) translateY(-50%);\\n              transform: scale(1) translateX(-100%) translateY(-50%);\\n    }\\n}\\n\\n.tooltip.tooltipTop {\\n    -webkit-transform: scale(0) translateX(-50%) translateY(-100%);\\n            transform: scale(0) translateX(-50%) translateY(-100%);\\n\\n    &.tooltipActive {\\n      -webkit-transform: scale(1) translateX(-50%) translateY(-100%);\\n \"\n]}    \n// ...\nthis clearly states that there are source maps inside, which just make build heavier. I'm not even sure if this can somehow help debugging. @evilebottnawi, @michael-ciniawsky  thanks. I used search, that was how I found this issue not opened by me.\n\nThe problems in markup (space) are related to this.\n\nSo the animation problems are related to this as well, right? \nBest solution? Wait while all the plugins will support PostCSS v6?. About sourceMaps:\nSo I made this change: changeset (added sourceMap: false to webpack.config.js)\nIf I run npm run build final built file is 1.6Mb\nIf I remove this back to just string with the loader name, and run npm run build again final built file is 0.8Mb\nIt becomes even heavier with this change. \nSourcemaps stuff is complex, sorry to bother you. \nUse case 1: I do not want source maps for CSS\n\nI  perform this changes\nnpm run build\nbult file has sources! And it's size is 971kb.\n\nOk, maybe some PostCSS config should be added.\n\nAdd some config to postcss.config.js: changeset\nnpm run build\nbult file has sources! And it's size is still 971kb.\n\nUse case 2: I want source maps to be stored in separate build.js.map file. This would be usefull to debug production build one day.\n\nI perform\n```diff\nsourceMap: false\nsourceMap: true\n``` \nsee this changeset\nnpm run build\nbult file has sources! Sources are not in .map file (maybe there as well) And built file is 1.23 MB\n\nI'm kind of lost... Am I doing something wrong? What is going on with sourceMaps? I tried to remove postcss-each and postcss-cssnext since you wrote these do not support PostCSS v6, but result is the same: if I disable sourcemaps, there are sources in built file (all those --palette-grey-300:#e0e0e0;--palette-grey-400:#bdbdbd;--palette-grey-500:#9e9e9e;) and it's size is 971kb.\nPlease help me figuring out on how to manage sourceMaps, I've read this guide and your README section according source maps. Nothing helps. \nThanks!. @michael-ciniawsky This is exactly (except of sourceMapFilename which is generated by default with this naming pattern) what I got in my test repo. Build file contains CSS sources, CSS sources are not in .map file (actually it may be in .map as well). @evilebottnawi, @michael-ciniawsky please let me know if you will answer anything to my sourcemap issue. If I should create a new separate issue, I will. If you think this is not anyhow related to postcss-loader, please tell me as well (but please let me know where should I create such an issue). Thanks!. Hi!\n\n\nWhat cannot be achieved: \nsources should be in .map file, not in build file itself (if I turn sourceMap: true, sources are inside of build file, but my opninion is that it should not be there). \n\n\nWhat I'm not sure about: \nthere are sources with var(---some-var) syntax, which should be eleminated after running postcss with cssnext. Build file should contain only final css, which browsers understand. Here I'm not sure, maybe currently old version of cssnext (without support for PostCSS v6) is the issue. But this issue was for sure actual with previous versions of all stuff (including postcss-loader v1.3.3 and PostCSS v5).. Hi!\n\n\n@michael-ciniawsky Thanks for your time!\n\n\nThere is this: sourceMapFilename: '[name].js.map', and this: devtool: 'source-map', and  build file contains sources. Sorry, I'm not expert here, but this is an issue. Where should I report? Thanks!\n\n\nSeems like you are right. I created a separate branch.  I commented out those variables. If I remove variables section and turn off sourcemaps, there is no vars in final CSS. Thanks!\n\n\n. ",
    "rfgamaral": "No need. I get it now. Thanks very much.. ",
    "phyllisstein": "Understood! Thanks for the quick response. Looks like resolve-url-loader was doing something funky and always emitting source maps, which was the actual proximate cause of the frustration. Sorry for the bother. \ud83d\ude2c . ",
    "ecbrodie": "@michael-ciniawsky thank you for the fast feedback. I will submit a PR later today.\nWhile I have your attention and also on the subject of README and plugins, I want to get some clarification about specifying postcss plugins in postcss.config.js (or inlined within webpack.config.js). Some examples in the README have theplugins specified as an objects whose string keys represent the names of postcss plugins to apply. Other examples has the plugins represent a function that accepts a single webpack parameter and returns an array of require'd plugin references. Which one is valid, or are both valid? Also, in the latter case of the object, can the plugins array contain string references or must they be key-value pairs? For example, if I wanted to specify the postcss-import plugin without any custom options, can I specify just 'postcss-import' in the plugins array or must it be 'postcss-import': {}?\nThank you.. @michael-ciniawsky I realize that I never thanked you for your excellent response to my question about the different ways to specify plugins. It was quite clear and answered my question well. Thank you!. ",
    "stephane-r": "Hi @TrySound \nIt's ok, i've resolve my update my var postcss (in the top) :\nvar postcss = [\n  require('css-mqpacker')({\n    sort: true\n  }),\n  require('autoprefixer')\n];\nNow, .browserslistrc file is loaded :). ",
    "yoyo837": "(Emitted value instead of  an instance of error)\nthe same, when i use postcss-loader vue-cli@2+ \uff08.scss or other\uff0cnot .vue\uff09. @danyim look at this\nhttps://github.com/postcss/postcss-loader/commit/159b66a\nI switch to a low version @1.3.3. @michael-ciniawsky \nI created one, too.\nHere is the repo if you want to have a look: https://github.com/yoyo837/postcss-loader-248\n. Maybe it's the same thing. I'm not sure \uff0c#248\n. Released in ~~v2.0.5~~ v2.1.5 \ud83c\udf89. ",
    "Janaka-Steph": "Hello,\nPostcss-loader: 2.0.6\nWebpack: 2\nI still have the warning \"Previous source map found, but options.sourceMap isn't set.\" \nHere is part of my webpack.config.js : \nmodule: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader']\n      },\n      {\n        test: /\\.scss$/,\n        use: [\n          'style-loader',\n          'css-loader?module&importLoaders=1&localIdentName=[local]_[hash:base64:5]',\n          'postcss-loader',\n          'sass-loader?sourceMap'\n        ]\n      },\n      {\n        test: /\\.jsx?$/,\n        exclude: /node_modules/,\n        loader: 'babel-loader',\n        query: {\n          plugins: [\n            //'transform-react-jsx',\n            [\n              'react-css-modules',\n              {\n                \"generateScopedName\": \"[local]_[hash:base64:5]\",\n                \"filetypes\": {\n                  \".scss\": \"postcss-scss\"\n                },\n                \"webpackHotModuleReloading\": true\n              }\n            ]\n          ]\n        },\n      }\n}\nThank you for your help. No it doesn't work for me :-( \nI tried what you said, I tried sourceMap everywhere, nowhere, in postcss.config, true, false. Nothing works. I don't know what to do. Nope :-/\nI print the error, maybe you understand something at this.\n```\nclient?cd17:43 ./~/css-loader!./~/postcss-loader/lib!./~/resolve-url-loader!./~/sass-loader/lib/loader.js?sourceMap!./~/bootstrap-loader/lib/bootstrap.styles.loader.js?{\"bootstrapVersion\":4,\"preBootstrapCustomizations\":\"/Users/steph/Desktop/PRO/Projects/dao1901_NewDawn/ui/assets/theme/pre-customizations.scss\",\"bootstrapCustomizations\":\"/Users/steph/Desktop/PRO/Projects/dao1901_NewDawn/ui/assets/theme/customizations.scss\",\"appStyles\":\"/Users/steph/Desktop/PRO/Projects/dao1901_NewDawn/ui/assets/theme/app.scss\",\"extractStyles\":false,\"styleLoaders\":[\"style-loader\",\"css-loader\",\"postcss-loader\",\"sass-loader\"],\"styles\":[\"mixins\",\"normalize\",\"print\",\"reboot\",\"type\",\"images\",\"code\",\"grid\",\"tables\",\"forms\",\"buttons\",\"transitions\",\"dropdown\",\"button-group\",\"input-group\",\"custom-forms\",\"nav\",\"navbar\",\"card\",\"breadcrumb\",\"pagination\",\"jumbotron\",\"alert\",\"progress\",\"media\",\"list-group\",\"responsive-embed\",\"close\",\"badge\",\"modal\",\"tooltip\",\"popover\",\"carousel\",\"utilities\"],\"scripts\":[\"alert\",\"button\",\"carousel\",\"collapse\",\"dropdown\",\"modal\",\"popover\",\"scrollspy\",\"tab\",\"tooltip\",\"util\"],\"configFilePath\":\"/Users/steph/Desktop/PRO/Projects/dao1901_NewDawn/.bootstraprc\",\"bootstrapPath\":\"/Users/steph/Desktop/PRO/Projects/dao1901_NewDawn/~/bootstrap\",\"bootstrapRelPath\":\"../bootstrap\"}!./~/bootstrap-loader/no-op.js\n(Emitted value instead of an instance of Error) \n\u26a0\ufe0f  PostCSS Loader\nPrevious source map found, but options.sourceMap isn't set.\nIn this case the loader will discard the source map entirely for performance reasons.\nSee https://github.com/postcss/postcss-loader#sourcemap for more information.\n@ ./~/style-loader!./~/css-loader!./~/postcss-loader/lib!./~/resolve-url-loader!./~/sass-loader/lib/loader.js?sourceMap!./~/bootstrap-loader/lib/bootstrap.styles.loader.js?{\"bootstrapVersion\":4,\"preBootstrapCustomizations\":\"/Users/steph/Desktop/PRO/Projects/dao1901_NewDawn/ui/assets/theme/pre-customizations.scss\",\"bootstrapCustomizations\":\"/Users/steph/Desktop/PRO/Projects/dao1901_NewDawn/ui/assets/theme/customizations.scss\",\"appStyles\":\"/Users/steph/Desktop/PRO/Projects/dao1901_NewDawn/ui/assets/theme/app.scss\",\"extractStyles\":false,\"styleLoaders\":[\"style-loader\",\"css-loader\",\"postcss-loader\",\"sass-loader\"],\"styles\":[\"mixins\",\"normalize\",\"print\",\"reboot\",\"type\",\"images\",\"code\",\"grid\",\"tables\",\"forms\",\"buttons\",\"transitions\",\"dropdown\",\"button-group\",\"input-group\",\"custom-forms\",\"nav\",\"navbar\",\"card\",\"breadcrumb\",\"pagination\",\"jumbotron\",\"alert\",\"progress\",\"media\",\"list-group\",\"responsive-embed\",\"close\",\"badge\",\"modal\",\"tooltip\",\"popover\",\"carousel\",\"utilities\"],\"scripts\":[\"alert\",\"button\",\"carousel\",\"collapse\",\"dropdown\",\"modal\",\"popover\",\"scrollspy\",\"tab\",\"tooltip\",\"util\"],\"configFilePath\":\"/Users/steph/Desktop/PRO/Projects/dao1901_NewDawn/.bootstraprc\",\"bootstrapPath\":\"/Users/steph/Desktop/PRO/Projects/dao1901_NewDawn/~/bootstrap\",\"bootstrapRelPath\":\"../bootstrap\"}!./~/bootstrap-loader/no-op.js 4:14-1454 18:2-22:4 19:20-1460\n @ ./~/bootstrap-loader/lib/bootstrap.loader.js!./~/bootstrap-loader/no-op.js\n @ ./~/bootstrap-loader/loader.js\n @ multi (webpack)-dev-server/client?http://localhost:8080 webpack/hot/dev-server bootstrap-loader\n```\nMaybe it is due to bootstrap-loader ?\nHere is the repo if you want to have a look: https://github.com/asseth/dao1901/tree/develop . If I remove all things related to bootstrap, but not the rest, and import bootstrap from CDN, then I don't have the warnings anymore, but now it doesn't load my custom styles. :-( . I agree that requiring Bootstrap from the CDN is much simpler but then we loose the scss bootstrap variables.. . ",
    "matthopson": "@Janaka-Steph I got around this by adding sourceMap: true to my postscss-loader config - so in your case, adding ?sourceMap to postcss-loader may help.\n. Dah! @michael-ciniawsky wins the day! \ud83c\udf2e \ud83c\udf2e  for you.. @Janaka-Steph Here's exactly what I changed in my config to get rid of the warning.\n{\n      test: /\\.scss$/,\n      use: [\n        'style-loader',\n        cssModulesLoader,\n        {\n          loader: 'postcss-loader',\n          options: {\n            ident: 'postcss',\n            sourceMap: true, // <-------- Added this line\n            plugins: () => postcssConfig\n          }\n        },\n        'sass-loader?sourceMap'\n}. ",
    "adi518": "@matthopson That doesn't fix the problem properly. The a source map is needed for production, so by enabling it in development environment, you are increasing the build time, because it has to generate a Source map, which is really not needed, because while developing, your CSS is not minified.\nSo far, the only thing that fixes it for me is moving to postcss-loader@1.3.3.. Such an annoying bug. I have the same issue as @KagamiChan.. ",
    "HeadFox": "Hey ! \nSo i tried what you ask me to do, but after npm install with npm5 i still got the error and when i install with yarn for example, webpack command perfectly work.\nYou can check the 3 files here : https://github.com/HeadFox/PackIt. ",
    "leebenson": "Works great, thanks @michael-ciniawsky !. ",
    "damianobarbati": "@michael-ciniawsky thanks for helping! Same error without resolve-url-loader :(((. Sure:\n```\nCounting objects: 21, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (19/19), done.\nWriting objects: 100% (21/21), 185.43 KiB | 0 bytes/s, done.\nTotal 21 (delta 3), reused 2 (delta 0)\nremote: Resolving deltas: 100% (3/3), completed with 3 local objects.\nTo github.com:damianobarbati/react-simple-app.git\n   6ec4558..28f62d3  master -> master\nmacbook:react-simple-app damiano$ yarn build:dev\nyarn build:dev v0.24.5\n$ NODE_ENV=development yarn webpack -- --config ./config/webpack.config.js --watch --progress \nyarn webpack v0.24.5\n$ ./node_modules/webpack/bin/webpack.js --config ./config/webpack.config.js --watch --progress\nclean-webpack-plugin: /Users/damiano/Desktop/react-simple-app/build has been removed.\n 10% building modules 1/1 modules 0 active                                       \nWebpack is watching the files\u2026\n10% building modules 7/37 modules 30 active ...-app/node_modules/redux/es/compose.jsbabel-preset-env: DEBUG option\nUsing targets:\n{\n  \"chrome\": \"58\"\n}\nModules transform: false\nUsing plugins:\nUsing polyfills:\n  web.timers {\"chrome\":\"58\"}\n  web.immediate {\"chrome\":\"58\"}\n  web.dom.iterable {\"chrome\":\"58\"}\nHash: 887a02f091ee8e9877f8                                                            \nVersion: webpack 2.6.1\nTime: 8930ms\n[./app/index.js] ./app/index.js 575 bytes {1} [built]\n[./app/index.scss] ./app/index.scss 3.94 kB {1} [built] [failed] [1 error]\n[./app/reducers.js] ./app/reducers.js 0 bytes {1} [built]\n[./app/router.js] ./app/router.js 821 bytes {1} [built]\n[./node_modules/react-create-app/dist/index.min.js] ./~/react-create-app/dist/index.min.js 14.2 kB {1} [built]\n[./node_modules/react-create-store/dist/index.min.js] ./~/react-create-store/dist/index.min.js 30.6 kB {1} [built]\n[./node_modules/react-dom/index.js] ./~/react-dom/index.js 59 bytes {0} [built]\n[./node_modules/react-redux/es/index.js] ./~/react-redux/es/index.js 230 bytes {0} [built]\n[./node_modules/react-router-dom/es/index.js] ./~/react-router-dom/es/index.js 925 bytes {0} [built]\n[./node_modules/react-router/es/index.js] ./~/react-router/es/index.js 637 bytes {0} [built]\n[./node_modules/react-router/es/withRouter.js] ./~/react-router/es/withRouter.js 1.4 kB {0} [built]\n[./node_modules/react/react.js] ./~/react/react.js 56 bytes {0} [built]\n[./node_modules/redux/es/compose.js] ./~/redux/es/compose.js 965 bytes {0} [built]\n[./node_modules/redux/es/index.js] ./~/redux/es/index.js 1.08 kB {0} [built]\n   [0] multi react react-dom react-router react-router-dom redux react-redux 88 bytes {0} [built]\n    + 263 hidden modules\nERROR in ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name][local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss\nModule not found: Error: Can't resolve 'assets/sf.eot' in '/Users/damiano/Desktop/react-simple-app/app'\n @ ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name][local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss 6:75-99 6:117-141\n @ ./app/index.scss\n @ ./app/index.js\nERROR in ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name][local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss\nModule not found: Error: Can't resolve 'assets/sf.woff2' in '/Users/damiano/Desktop/react-simple-app/app'\n @ ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name][local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss 6:192-218\n @ ./app/index.scss\n @ ./app/index.js\nERROR in ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name][local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss\nModule not found: Error: Can't resolve 'assets/sf.woff' in '/Users/damiano/Desktop/react-simple-app/app'\n @ ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name][local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss 6:250-275\n @ ./app/index.scss\n @ ./app/index.js\nERROR in ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name][local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss\nModule not found: Error: Can't resolve 'assets/sf.ttf' in '/Users/damiano/Desktop/react-simple-app/app'\n @ ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name][local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss 6:306-330\n @ ./app/index.scss\n @ ./app/index.js\nERROR in ./app/index.scss\nModule build failed: ModuleNotFoundError: Module not found: Error: Can't resolve 'assets/sf.eot' in '/Users/damiano/Desktop/react-simple-app/app'\n    at factoryCallback (/Users/damiano/Desktop/react-simple-app/node_modules/webpack/lib/Compilation.js:264:39)\n    at factory (/Users/damiano/Desktop/react-simple-app/node_modules/webpack/lib/NormalModuleFactory.js:247:20)\n    at resolver (/Users/damiano/Desktop/react-simple-app/node_modules/webpack/lib/NormalModuleFactory.js:65:21)\n    at asyncLib.parallel (/Users/damiano/Desktop/react-simple-app/node_modules/webpack/lib/NormalModuleFactory.js:138:21)\n    at /Users/damiano/Desktop/react-simple-app/node_modules/webpack/node_modules/async/dist/async.js:3838:9\n    at /Users/damiano/Desktop/react-simple-app/node_modules/webpack/node_modules/async/dist/async.js:421:16\n    at iteratorCallback (/Users/damiano/Desktop/react-simple-app/node_modules/webpack/node_modules/async/dist/async.js:996:13)\n    at /Users/damiano/Desktop/react-simple-app/node_modules/webpack/node_modules/async/dist/async.js:906:16\n    at /Users/damiano/Desktop/react-simple-app/node_modules/webpack/node_modules/async/dist/async.js:3835:13\n    at resolvers.normal.resolve (/Users/damiano/Desktop/react-simple-app/node_modules/webpack/lib/NormalModuleFactory.js:130:23)\n    at onResolved (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/lib/Resolver.js:70:11)\n    at loggingCallbackWrapper (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\n    at afterInnerCallback (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/lib/Resolver.js:138:10)\n    at loggingCallbackWrapper (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\n    at Resolver.applyPluginsAsyncSeriesBailResult1 (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/node_modules/tapable/lib/Tapable.js:181:46)\n    at innerCallback (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/lib/Resolver.js:125:19)\n    at loggingCallbackWrapper (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\n    at /Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/node_modules/tapable/lib/Tapable.js:283:15\n    at /Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/lib/UnsafeCachePlugin.js:38:4\n    at loggingCallbackWrapper (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\n    at afterInnerCallback (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/lib/Resolver.js:138:10)\n    at loggingCallbackWrapper (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\n    at Resolver.applyPluginsAsyncSeriesBailResult1 (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/node_modules/tapable/lib/Tapable.js:181:46)\n    at innerCallback (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/lib/Resolver.js:125:19)\n    at loggingCallbackWrapper (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\n    at /Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/node_modules/tapable/lib/Tapable.js:283:15\n    at innerCallback (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/lib/Resolver.js:123:11)\n    at loggingCallbackWrapper (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/lib/createInnerCallback.js:31:19)\n    at /Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/node_modules/tapable/lib/Tapable.js:283:15\n    at resolver.doResolve.createInnerCallback (/Users/damiano/Desktop/react-simple-app/node_modules/enhanced-resolve/lib/DescriptionFilePlugin.js:44:6)\nERROR in /Users/damiano/Desktop/react-simple-app/node_modules/extract-text-webpack-plugin/loader.js??ref--1-0!/Users/damiano/Desktop/react-simple-app/node_modules/style-loader/index.js!/Users/damiano/Desktop/react-simple-app/node_modules/css-loader/index.js??ref--1-2!/Users/damiano/Desktop/react-simple-app/node_modules/postcss-loader/lib/index.js??ref--1-3!/Users/damiano/Desktop/react-simple-app/node_modules/sass-loader/lib/loader.js!/Users/damiano/Desktop/react-simple-app/app/index.scss doesn't export content\nChild html-webpack-plugin for \"build/index.html\":\n    [./node_modules/html-webpack-plugin/lib/loader.js!./app/index.html] ./~/html-webpack-plugin/lib/loader.js!./app/index.html 965 bytes {0} [built]\n    [./node_modules/lodash/lodash.js] ./~/lodash/lodash.js 540 kB {0} [built]\n    [./node_modules/webpack/buildin/global.js] (webpack)/buildin/global.js 509 bytes {0} [built]\n    [./node_modules/webpack/buildin/module.js] (webpack)/buildin/module.js 517 bytes {0} [built]\nChild html-webpack-plugin for \"build/503.html\":\n    [./node_modules/html-webpack-plugin/lib/loader.js!./app/503.html] ./~/html-webpack-plugin/lib/loader.js!./app/503.html 395 bytes {0} [built]\n    [./node_modules/lodash/lodash.js] ./~/lodash/lodash.js 540 kB {0} [built]\n    [./node_modules/webpack/buildin/global.js] (webpack)/buildin/global.js 509 bytes {0} [built]\n    [./node_modules/webpack/buildin/module.js] (webpack)/buildin/module.js 517 bytes {0} [built]\nChild extract-text-webpack-plugin:\n    [./node_modules/css-loader/index.js?{\"modules\":true,\"localIdentName\":\"[name][local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./node_modules/postcss-loader/lib/index.js?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./node_modules/sass-loader/lib/loader.js!./app/index.scss] ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name][local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss 583 bytes {0} [built]\n    [./node_modules/css-loader/lib/css-base.js] ./~/css-loader/lib/css-base.js 2.26 kB {0} [built]\nERROR in ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name]__[local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss\nModule not found: Error: Can't resolve 'assets/sf.eot' in '/Users/damiano/Desktop/react-simple-app/app'\n @ ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name]__[local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss 6:75-99 6:117-141\n\nERROR in ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name]__[local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss\nModule not found: Error: Can't resolve 'assets/sf.woff2' in '/Users/damiano/Desktop/react-simple-app/app'\n @ ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name]__[local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss 6:192-218\n\nERROR in ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name]__[local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss\nModule not found: Error: Can't resolve 'assets/sf.woff' in '/Users/damiano/Desktop/react-simple-app/app'\n @ ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name]__[local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss 6:250-275\n\nERROR in ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name]__[local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss\nModule not found: Error: Can't resolve 'assets/sf.ttf' in '/Users/damiano/Desktop/react-simple-app/app'\n @ ./~/css-loader?{\"modules\":true,\"localIdentName\":\"[name]__[local]--[chunkhash:base64:12]\",\"importLoaders\":1,\"minimize\":true}!./~/postcss-loader/lib?{\"plugins\":[{\"version\":\"5.2.17\",\"plugins\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"postcssPlugin\":\"cssnano\",\"postcssVersion\":\"5.2.17\"},null]}!./~/sass-loader/lib/loader.js!./app/index.scss 6:306-330\n\n``. Here the url requiring => https://github.com/damianobarbati/react-simple-app/blob/master/app/index.scss. Sorry to reopen this but I can confirm that upgrading from:\"postcss-loader\": \"^1.3.3\"to\"postcss-loader\": \"^2.0.5\"` is breaking relative imports.\nHere repro before and after:\nBefore and working =>\nhttps://github.com/damianobarbati/react-simple-app/commit/984bc6a04b6db3d5d7566f2268042e66ae0bdfbe\nAfter update and broken =>\nhttps://github.com/damianobarbati/react-simple-app/commit/9c33d6714e542f81c824a659cba08f4938f7405a\nError thrown:\n```\n    ERROR in ./~/css-loader?{\"modules\":true,\"camelCase\":true,\"localIdentName\":\"[name]-[local]\",\"importLoaders\":1,\"minimize\":{\"reduceIdents\":false,\"discardDuplicates\":true,\"autoprefixer\":false,\"zindex\":false}}!./~/resolve-url-loader!./~/postcss-loader/lib?{\"plugins\":[null]}!./~/sass-loader/lib/loader.js!./app/styles/common.scss\n    Module not found: Error: Can't resolve '../logo.svg' in '/Users/damiano/Desktop/react-simple-app/app/styles'\n     @ ./~/css-loader?{\"modules\":true,\"camelCase\":true,\"localIdentName\":\"[name]-[local]\",\"importLoaders\":1,\"minimize\":{\"reduceIdents\":false,\"discardDuplicates\":true,\"autoprefixer\":false,\"zindex\":false}}!./~/resolve-url-loader!./~/postcss-loader/lib?{\"plugins\":[null]}!./~/sass-loader/lib/loader.js!./app/styles/common.scss 6:431-453\nERROR in ./~/css-loader?{\"modules\":true,\"camelCase\":true,\"localIdentName\":\"[name]-[local]\",\"importLoaders\":1,\"minimize\":{\"reduceIdents\":false,\"discardDuplicates\":true,\"autoprefixer\":false,\"zindex\":false}}!./~/resolve-url-loader!./~/postcss-loader/lib?{\"plugins\":[null]}!./~/sass-loader/lib/loader.js!./app/styles/common.scss\nModule not found: Error: Can't resolve './assets/sf.eot' in '/Users/damiano/Desktop/react-simple-app/app/styles'\n @ ./~/css-loader?{\"modules\":true,\"camelCase\":true,\"localIdentName\":\"[name]-[local]\",\"importLoaders\":1,\"minimize\":{\"reduceIdents\":false,\"discardDuplicates\":true,\"autoprefixer\":false,\"zindex\":false}}!./~/resolve-url-loader!./~/postcss-loader/lib?{\"plugins\":[null]}!./~/sass-loader/lib/loader.js!./app/styles/common.scss 6:75-101 6:119-145\n\nERROR in ./~/css-loader?{\"modules\":true,\"camelCase\":true,\"localIdentName\":\"[name]-[local]\",\"importLoaders\":1,\"minimize\":{\"reduceIdents\":false,\"discardDuplicates\":true,\"autoprefixer\":false,\"zindex\":false}}!./~/resolve-url-loader!./~/postcss-loader/lib?{\"plugins\":[null]}!./~/sass-loader/lib/loader.js!./app/styles/common.scss\nModule not found: Error: Can't resolve './assets/sf.woff2' in '/Users/damiano/Desktop/react-simple-app/app/styles'\n @ ./~/css-loader?{\"modules\":true,\"camelCase\":true,\"localIdentName\":\"[name]-[local]\",\"importLoaders\":1,\"minimize\":{\"reduceIdents\":false,\"discardDuplicates\":true,\"autoprefixer\":false,\"zindex\":false}}!./~/resolve-url-loader!./~/postcss-loader/lib?{\"plugins\":[null]}!./~/sass-loader/lib/loader.js!./app/styles/common.scss 6:196-224\n\nERROR in ./~/css-loader?{\"modules\":true,\"camelCase\":true,\"localIdentName\":\"[name]-[local]\",\"importLoaders\":1,\"minimize\":{\"reduceIdents\":false,\"discardDuplicates\":true,\"autoprefixer\":false,\"zindex\":false}}!./~/resolve-url-loader!./~/postcss-loader/lib?{\"plugins\":[null]}!./~/sass-loader/lib/loader.js!./app/styles/common.scss\nModule not found: Error: Can't resolve './assets/sf.woff' in '/Users/damiano/Desktop/react-simple-app/app/styles'\n @ ./~/css-loader?{\"modules\":true,\"camelCase\":true,\"localIdentName\":\"[name]-[local]\",\"importLoaders\":1,\"minimize\":{\"reduceIdents\":false,\"discardDuplicates\":true,\"autoprefixer\":false,\"zindex\":false}}!./~/resolve-url-loader!./~/postcss-loader/lib?{\"plugins\":[null]}!./~/sass-loader/lib/loader.js!./app/styles/common.scss 6:256-283\n\nERROR in ./~/css-loader?{\"modules\":true,\"camelCase\":true,\"localIdentName\":\"[name]-[local]\",\"importLoaders\":1,\"minimize\":{\"reduceIdents\":false,\"discardDuplicates\":true,\"autoprefixer\":false,\"zindex\":false}}!./~/resolve-url-loader!./~/postcss-loader/lib?{\"plugins\":[null]}!./~/sass-loader/lib/loader.js!./app/styles/common.scss\nModule not found: Error: Can't resolve './assets/sf.ttf' in '/Users/damiano/Desktop/react-simple-app/app/styles'\n @ ./~/css-loader?{\"modules\":true,\"camelCase\":true,\"localIdentName\":\"[name]-[local]\",\"importLoaders\":1,\"minimize\":{\"reduceIdents\":false,\"discardDuplicates\":true,\"autoprefixer\":false,\"zindex\":false}}!./~/resolve-url-loader!./~/postcss-loader/lib?{\"plugins\":[null]}!./~/sass-loader/lib/loader.js!./app/styles/common.scss 6:314-340\n\nChild extract-text-webpack-plugin:\n    [./node_modules/css-loader/index.js?{\"modules\":true,\"camelCase\":true,\"localIdentName\":\"[name]-[local]\",\"importLoaders\":1,\"minimize\":{\"reduceIdents\":false,\"discardDuplicates\":true,\"autoprefixer\":false,\"zindex\":false}}!./node_modules/resolve-url-loader/index.js!./node_modules/postcss-loader/lib/index.js?{\"plugins\":[null]}!./node_modules/sass-loader/lib/loader.js!./app/styles/reset.scss] ./~/css-loader?{\"modules\":true,\"camelCase\":true,\"localIdentName\":\"[name]-[local]\",\"importLoaders\":1,\"minimize\":{\"reduceIdents\":false,\"discardDuplicates\":true,\"autoprefixer\":false,\"zindex\":false}}!./~/resolve-url-loader!./~/postcss-loader/lib?{\"plugins\":[null]}!./~/sass-loader/lib/loader.js!./app/styles/reset.scss 980 bytes {0} [built]\n    [./node_modules/css-loader/lib/css-base.js] ./~/css-loader/lib/css-base.js 2.26 kB {0} [built]\nChild extract-text-webpack-plugin:\n    [./node_modules/css-loader/lib/css-base.js] ./~/css-loader/lib/css-base.js 2.26 kB {0} [built]\n        + 1 hidden modules\n```. @michael-ciniawsky thanks so much for the effort!\nNo I'm not on a windows machine but on MacOS.\nI have no idea why the bump, I regularly upgrade dependencies to keep up to date.\nI tried commenting out those lines but nothing (neither with relative-url-loader or not).\nI'm using it so I can import assets with a relative url(./relative/path/to/current/file) in my scss files.\nWhat other solutions do I have? . Oh my what a dumb. T-HA-N-K-S @michael-ciniawsky!. ",
    "vedadsose": "@evilebottnawi If you think the warning should still be there even if options.sourceMap is false, then it shouldn't contain but options.sourceMap isn't set part.. ",
    "ndbroadbent": "I really want to disable this warning, because I only need source maps for JS, and I want to explicitly disable them for CSS in production. I know webpack is still creating some empty .css.map files, but I'll just delete those. (There doesn't seem to be any way to only enable source maps for JS and skip CSS.)\nI think setting sourceMap: false in postcss-loader should not log any warnings, since it's a valid choice.\nEDIT: Sorry I updated to postcss-loader 2.1.6 and the warnings went away.\n. ",
    "taigi0315": "Thanks for your comment !\nI followed your suggestions, still having an issue with warning (postcss)\nI can build/deploy app, the problem is my Material-ui error does not show require error\n---prod.config.js\n\n---postcss.config.js\n\n---Error message\n\nI located postcss.config.js right under the App(where the package.js goes)\nif I am doing stupid mistake, please forgive me, I am a new starter who took over built project from senior developer :( . Thanks for the help, \nI took off options from webpack config, add sourceMap : false in stylus-loader as well\nApp builds without any warning/Error but for some reason material-ui/yup schema error does not display.(works find in de). Now I start wondering where to look to fix this.\nI really appreciate your time. thank you so much! . ",
    "davidrf": "I've created a simplified example repo that reproduces this error. I am not entirely sure if this is a postcss-loader issue, or a Webpack issue, or an issue from something else. Adding a postcss.config.js file or ident does solve the problem, but I believe that this issue should be re-opened and remain open until one of the following occurs:\n\nThe webpack configuration is removed from the postcss-loader README and postcss.config.js becomes the only configuration.\nident is not longer needed for this to work with the Webpack configuration.\nAn issue is opened in another repository which is causing the error. (I did look for open issues in other repositories that may explain this error, but found none)\n\n@michael-ciniawsky would you please take a look at the example repo and weigh in on whether or not this issue is fully resolved??. ",
    "sukazavr": "@michael-ciniawsky thank you for reactive answer :-)\nThe goal is to reach opportunity of use CSS in JS with sugar CSS syntax. I've chosen prejss to have ability write in SugarSS which will be transpiled in CSSinJS (object), then this object will be transpiled into pure CSS. So, in that way, I'll get transparent JS-modules and CSS Modules, code reuse, and that is all without the runtime overhead.. The problem is that postcss-loader can't work correctly, even if I have removed transform-prejss from babel config.. I've found a point:\nhttps://github.com/postcss/postcss-loader/blob/master/lib/index.js#L106-L110\nJS\n    // Loader Exec (Deprecated)\n    // https://webpack.js.org/api/loaders/#deprecated-context-properties\n    if (options.parser === 'postcss-js') {\n      css = this.exec(css, this.resource)\n    }\nAnyone who is interesting in subject, look this: Loader.exec method does not eval loaders\n. I've found a temporary solution in use value-loader with raw-loader.\nIt's not elegant, but it works even with webpack 2 treeshaking :-)\nNow my config looks like this:\nJS\n[\n  'raw-loader',\n  {\n    loader: 'postcss-loader',\n    options: {\n      parser: 'postcss-js',\n      plugins: (loader) => [\n        autoprefixer({ browsers: browserslist }),\n      ]\n    }\n  },\n  'raw-loader',\n  {\n    loader: 'value-loader',\n    options: {\n      name: 'default',\n    }\n  },\n  {\n    loader: 'babel-loader',\n    options: {\n      babelrc: false,\n      cacheDirectory: true,\n      presets: [\n        ['env', {\n          targets: {\n            node: true,\n          },\n          debug: true,\n          modules: false,\n        }]\n      ],\n      plugins: [\n        'transform-class-properties',\n        'transform-object-rest-spread',\n        ['transform-prejss', {\n          namespace: 'prejss',\n          config: {\n            options: {\n              parser: sugarss,\n            },\n            plugins: [\n              'postcss-nested',\n            ]\n          }\n        }]\n      ]\n    }\n  },\n]. ",
    "ZeroCho": "postcss.config.js\n```\nconst path = require('path');\nmodule.exports = {\n  plugins: {\n    'postcss-import': {\n      path: path.join(__dirname, '..', 'app', 'css'),\n    },\n    'postcss-cssnext': {\n      browsers: ['> 1%', 'last 2 versions'],\n    },\n    'postcss-browser-reporter': {},\n  },\n};\n```\nI checked that everything is the latest version.\nOne thing is that postcss-cssnext has postcss-apply@0.3.0 as a dependency, which is a bit old, so I overrided it by installing postcss-apply@0.8.0. ",
    "liitfr": "Using Spike with latest version of postcss-loader generates an error during compilation because parser is passed as an object. Error is : \n```\n\u2717 ERROR\n{ ModuleBuildError: Module build failed: Validation Error\nPostCSS Loader Invalid Options\noptions.parser should be string\nat runLoaders (/home/mathias/.nvm/versions/node/v8.1.0/lib/node_modules/spike/node_modules/webpack/lib/NormalModule.js:192:19)\nat /home/mathias/.nvm/versions/node/v8.1.0/lib/node_modules/spike/node_modules/loader-runner/lib/LoaderRunner.js:364:11\nat /home/mathias/.nvm/versions/node/v8.1.0/lib/node_modules/spike/node_modules/loader-runner/lib/LoaderRunner.js:230:18\nat runSyncOrAsync (/home/mathias/.nvm/versions/node/v8.1.0/lib/node_modules/spike/node_modules/loader-runner/lib/LoaderRunner.js:143:3)\nat iterateNormalLoaders (/home/mathias/.nvm/versions/node/v8.1.0/lib/node_modules/spike/node_modules/loader-runner/lib/LoaderRunner.js:229:2)\nat Array.<anonymous> (/home/mathias/.nvm/versions/node/v8.1.0/lib/node_modules/spike/node_modules/loader-runner/lib/LoaderRunner.js:202:4)\nat Storage.finished (/home/mathias/.nvm/versions/node/v8.1.0/lib/node_modules/spike/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:38:15)\nat /home/mathias/.nvm/versions/node/v8.1.0/lib/node_modules/spike/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js:69:9\nat /home/mathias/.nvm/versions/node/v8.1.0/lib/node_modules/spike/node_modules/graceful-fs/graceful-fs.js:78:16\nat FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:503:3) id: '208ed5bd' }\n\n```\nIs it possible to use postcss-loader with parser as an object ?\nThanks team.\nMathias. ",
    "andrewdushane": "Upgrading from Webpack 1 to 3, I was getting \"Module build failed: TypeError: Cannot read property 'postcss' of null\"\nAdding an ident option fixed it. Looks like this is still an issue in Webpack 3.0.0.\nEnded up with \n{\n  loader: 'postcss-loader',\n  options: {\n    ident: 'postcss-ident',\n    plugins: () => [\n      require('postcss-nested'),\n      require('postcss-import'),\n      require('postcss-simple-vars'),\n      require('postcss-calc')(),\n      require('postcss-color-function')(),\n      require('autoprefixer')({ browsers: ['last 2 versions'] }),\n    ],\n  },\n},. ",
    "jcrben": "Disappointed that no peerDependency is documented. It's really better to figure out what versions of webpack you support - you depend upon their API. If you support all, then perhaps '*' would work (haven't tested it)\nSee https://lexi-lambda.github.io/blog/2016/08/24/understanding-the-npm-dependency-model/. ",
    "KagamiChan": "@evilebottnawi Sorry I forgot that.\nFor now I can give a repo for reproducing this:\nhttps://github.com/KagamiChan/postcss-loader-demo\nHave to say it is not quite minimal because it was created upon vue-cli webpack template, but I try to limit my own changes: https://github.com/KagamiChan/postcss-loader-demo/commit/c19ef7a1df568fcece5aa97727c8f97eb37fe584\nwhen running npm run dev there'll be 2 warnings, the latter one is what I want to resolve.\n```\n WARNING  Compiled with 2 warnings                                                                                   17:52:20\nwarning  in ./src/components/Hello.vue\n(Emitted value instead of an instance of Error)\n\u26a0\ufe0f  PostCSS Loader\nPrevious source map found, but options.sourceMap isn't set.\nIn this case the loader will discard the source map entirely for performance reasons.\nSee https://github.com/postcss/postcss-loader#sourcemap for more information.\n@ ./~/vue-style-loader!./~/css-loader?{\"minimize\":false,\"sourceMap\":false}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-25bba16e\",\"scoped\":true,\"hasInlineConfig\":false}!./~/postcss-loader/lib?{\"sourceMap\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/Hello.vue 4:14-395 13:3-17:5 14:22-403\n @ ./src/components/Hello.vue\n @ ./src/router/index.js\n @ ./src/main.js\n @ multi ./build/dev-client ./src/main.js\nwarning  in ./src/App.vue\n(Emitted value instead of an instance of Error)\n\u26a0\ufe0f  PostCSS Loader\nPrevious source map found, but options.sourceMap isn't set.\nIn this case the loader will discard the source map entirely for performance reasons.\nSee https://github.com/postcss/postcss-loader#sourcemap for more information.\n@ ./~/vue-style-loader!./~/css-loader?{\"minimize\":false,\"sourceMap\":false}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-7cf643c8\",\"scoped\":false,\"hasInlineConfig\":false}!./~/less-loader/dist?{\"sourceMap\":false}!./~/postcss-loader/lib?{\"sourceMap\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/App.vue 4:14-446 13:3-17:5 14:22-454\n @ ./src/App.vue\n @ ./src/main.js\n @ multi ./build/dev-client ./src/main.js\n```\nI you want a simpler repro, I'll try something from scratch.. @evilebottnawi Thank you for investigating this. So setting sourceMap to false for other loaders prior to postcss-loader does not mean that the source map will be dropped before flowing into postcss-loader? I'm not quite sure for that.\nIf it is the case, this issue can be closed.. I'm using postcss alone bacause vue-loader only handles .vue files and I have some other css files. \nThe style-compiler in vue-loader in fact uses postcss and also reads the postcss config file, but setting sourceMap option in .postcssrc.js (also tried renaming to postcss.config.js) or in build config cannot remove the warning.. Anyway I think postcss-loader is working fine, I'm looking into vue-loader, closing this. Thank you very much. @evilebottnawi I finally prevent vue-loader from producing source map by changing its code (map in callback is then undefined), but the warning persists. Seems I should look into less-loader instead. ",
    "dan-gamble": "```\nwebpack: Compiling...\nwebpack building...\nLOAD\n~/Workspace/cms-test develop* 32m 40s\n```\nIt's getting loaded.\nI could try forking postcss-easy-import myself and updating it to postcss 6.0 or using postcss-import with a glob function to see if that helps?. Hmm you are right, that's weird. postcss-load-config works though so i'll explore that avenue. Thanks @evilebottnawi :). Changing my postcss-config.js to:\njs\nmodule.exports = {\n  plugins: {\n    'postcss-easy-import': {}\n  }\n}\nFixed it \ud83d\udc4d . ",
    "janslu": "Of course! Here's the whole scss block. The address remains ok (with www.)  if I remove either  loader: \"postcss-loader\" block or both plugins from  loader: \"postcss-loader\" > plugins array... \n{\n    test: /\\.scss$/,\n    loader: ExtractTextPlugin.extract({\n        fallback: 'style-loader',\n        use: [\n            {\n                loader: \"css-loader\",\n                options: {\n                    sourceMap: false,\n                    modules: false,\n                    importLoaders: true\n                }\n            },\n            {\n                loader: \"postcss-loader\",\n                options: {\n                    plugins: function () {\n                        return [\n                            require('autoprefixer')('last 2 versions', 'ie 11'),\n                            require('cssnano')({normalizeUrl: {stripWWW: false}})\n                        ]\n                    },\n                    sourceMap: false\n                }\n            },\n            {\n                loader: \"sass-loader\",\n                options: {\n                    sourceMap: false,\n                    includePaths: [\"node_modules/foundation-sites/scss\", \"node_modules/motion-ui\"]\n                }\n            }\n        ]\n    })\n},. Sorry to bother you. I lack the knowledge to dig deeper and find the reason, but here's some more information, maybe you will be able to find the culprit... \nI found a config that works for me, but it seems to be patching something that shouldn't need patching... \n\ncode being changed - www. is being stripped from font-face declaration:\n\n@font-face{font-family:bb-icons;src:url(https://www.babyboom.pl/fonts/bb-icons/bb-icons.svg#bb-icons) format(\"svg\"),url(https://www.babyboom.pl/fonts/bb-icons/bb-icons.ttf) format(\"truetype\"),url(https://www.babyboom.pl/fonts/bb-icons/bb-icons.eot) format(\"eot\"),url(https://www.babyboom.pl/fonts/bb-icons/bb-icons.woff2) format(\"woff2\"),url(https://www.babyboom.pl/fonts/bb-icons/bb-icons.woff) format(\"woff\")}\nI have stripped options and require from above scss test, so I have only:\n{\n      loader: \"postcss-loader\"\n},\nand my postcss.config.js is:\nmodule.exports = {\n  plugins: {\n    'autoprefixer': { browsers: ['last 2 versions', 'ie 11'] },\n    'cssnano': {normalizeUrl: {stripWWW: false}},\n    'postcss-urlrewrite': {\n      imports: true,\n      properties: true,\n      rules: [\n          { from: '//babyboom.pl', to: '//www.babyboom.pl' }\n      ]\n    }\n  },\n}\nthis url rewrite is necessary but not enough, I also need to disable:\n//new webpack.LoaderOptionsPlugin({\n   //    minimize: true\n//}),\nand this configuration works fine. \nJust to make sure - even running \"empty\" postcss with no other plugins removes the www. Therefore I have to have the 'postcss-urlrewrite' plugin enabled. But then having LoaderOptionsPlugin minimize enabled, removes the www (again?)... This option doesn't seem to make any difference at the moment, so I can live with that. I just hate not knowing what's really going on... . ",
    "mahnunchik": "Copy of original issue https://github.com/postcss/postcss-js/issues/26\nI've faced with the following error:\n```bash\nERROR in ./src/test.style.js\nModule build failed: /test-webpack/src/test.style.js:3\nexport default {\n^^^^^^\nSyntaxError: Unexpected token export\n    at createScript (vm.js:74:10)\n    at Object.runInThisContext (vm.js:116:10)\n    at Module._compile (module.js:533:28)\n    at Object.exec (/test-webpack/node_modules/webpack/lib/NormalModule.js:127:12)\n    at Promise.resolve.then.then (/test-webpack/node_modules/postcss-loader/lib/index.js:109:18)\n    at \n```\nMy webpack.config.js:\n```js\nconst path = require('path');\nconst webpack = require('webpack');\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  module: {\n    rules: [\n      {\n        test: /.(js|jsx)$/,\n        exclude: /(node_modules|bower_components)/,\n        use: {\n          loader: 'babel-loader',\n        },\n      },\n      {\n        test: /.style.js$/,\n        use: [\n          'style-loader',\n          { loader: 'css-loader', options: { importLoaders: 2 } },\n          { loader: 'postcss-loader', options: { parser: 'postcss-js' } },\n          'babel-loader'\n        ]\n      },\n    ],\n  },\n};\n```\nindex.js:\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport style from './test.style.js';\nclass Hello extends React.Component {\n  render() {\n    return Hello World!;\n  }\n}\nReactDOM.render(\n  ,\n  document.getElementById('root')\n);\n```\ntest.style.js:\njs\nexport default {\n  'main': {\n    color: 'black',\n    height: 25,\n    display: 'flex',\n  }\n}\nVersions\nbash\n$ node -v\nv8.1.2\n$ npm -v\n5.0.3\njson\n    \"babel-core\": \"^6.25.0\",\n    \"babel-loader\": \"^7.1.0\",\n    \"babel-preset-env\": \"^1.5.2\",\n    \"babel-preset-react-app\": \"^3.0.0\",\n    \"css-loader\": \"^0.28.4\",\n    \"postcss-js\": \"^1.0.0\",\n    \"postcss-loader\": \"^2.0.6\",\n    \"react\": \"^15.6.1\",\n    \"react-dom\": \"^15.6.1\",\n    \"style-loader\": \"^0.18.2\",\n    \"webpack\": \"^3.0.0\",\n    \"webpack-dev-server\": \"^2.5.0\",. @TrySound using commonjs style module helps:\ntest.style.js:\nmodule.exports = {\n  'main': {\n    color: 'black',\n    height: 25,\n    display: 'flex',\n  }\n}\n@michael-ciniawsky if I add https://github.com/59naga/babel-plugin-add-module-exports and use es modules then it produces the same error: SyntaxError: Unexpected token export\nMy babel settings:\njson\n  \"babel\": {\n    \"presets\": [\n      \"react-app\"\n    ],\n    \"plugins\": [\n      \"add-module-exports\"\n    ]\n  },\n. ",
    "mcjfunk": "Using the configuration below running the webpack-dev-middleware with a hapi.js server.\n{\n    test: /\\.less$/,\n    use: [\n        {loader: 'css-loader', options: {importLoaders: 1}},\n        {loader: 'postcss-loader', options: {plugins: [autoprefixer({browsers}), cssnano({safe: true})]}},\n        'less-loader'\n    ]\n},\nThere is no promise warning outside of the 'webpack-dev-middleware` workflow.\nWith (and without) the fix, the styles are correctly processed and injected onto the page. The fix quiets down the promise warning that happens on every less file it processes.\nLooks like others have had to implement a similar fix:\nhttps://github.com/vuejs/vue-loader/issues/625\nThanks!\n. I won't have a chance to put together a test repo anytime soon :(.\nI tried a test with a CSS file instead of less, and removed the less-loader. The warnings were still present.\nWhen I remove the css-loader, the warnings go away.. ",
    "timmolendijk": "Returning null there instead of undefined is definitely the way to go!\nPrevious versions (1.3.3 f.e.) returned null there, so let's stick to that behavior.. ",
    "kishorevarma": "Hi, \nI have a similar issue, even though I set the soureMap true in config.\nmodule.exports = {\n  sourceMap: true,\n  plugins: [require('autoprefixer')]\n};\nI have tried to debug issue. I think we are not checking sourceMap option from config file.\n. thanks @michael-ciniawsky . ",
    "kostasmanionis": "https://webpack.js.org/guides/migrating/#complex-options\nSo it's required again? \ud83e\udd14 . ",
    "ds-codemag": "Same issue. ",
    "ronaldgj": "With all the new stuff it is fixed nouw @ds-codemag !. ",
    "naBausch": "Oh too bad I am using https://github.com/jantimon/iconfont-webpack-plugin and without the postcss-loader-before-processing the iconfont-webpack-plugin doesn't work anymore :/ . ",
    "Rufflewind": "The conditional is not present in the very first example:\nmodule.exports = {\n  parser: 'sugarss',\n  plugins: {\n    'postcss-import': {},\n    'postcss-cssnext': {},\n    'autoprefixer': {},\n    'cssnano': {}\n  }\n}\nAll it needs is a short explanation of what parser: sugarss is for, e.g. // enables sugarss syntax instead of standard CSS.. ",
    "29er": "same issues here : \n\"webpack\": \"^2.7.0\",  \"postcss-loader\": \"^2.0.6\",\nadding that ident  fixed the problem. thanks. ",
    "ManikTechy": "\nI am getting this error. I am using post-css. ",
    "spalger": "Oops, looks like this was fixed in https://github.com/postcss/postcss-loader/pull/174. ",
    "czaarek99": "I'm using version 2.0.6. @michael-ciniawsky Yeah, that's for sure the same issue that I'm having.. ",
    "cihadturhan": "@michael-ciniawsky I'm using postcss/postcss-mixins and I was redirected to here. Gotta check some other syntax errors if same problem exists. \nSee https://github.com/postcss/postcss-mixins/issues/77. ",
    "Justineo": "@evilebottnawi\nThis is not prioritizing loader options over config. Loader options are already extended by config here:\nhttps://github.com/postcss/postcss-loader/blob/271ab9a86799a97e3b230815e8365728b4072615/lib/index.js#L101-L109\nThis PR is just making sure that we can enable source map from config.\nAlthough I think loader options should have higher priority, considering changing this might include a big breaking change, I'm not gonna suggest you to change current logic.. > Needs tests and a safeguard to ensure config.options.map is consistent with the two sourcemap options currently possible for webpack setups ( true|'inline')\nI'm not sure if I understand this correctly:\nBecause postcss-loader only support true and 'inline' as the value of sourceMap option, which is converted into { inline: false, annotation: false } and { inline: true, annotation: false } as the value of map option for Postcss, we have to make sure people won't configure something like { annotation: true } in config files if we are gonna accept map options directly from config files.. What I'm confusing about here is postcss-loader prioritize some options from config files but ignore some other options from them at all. I have to configure in both places and be aware of the details under the hood if I want to put things into config files.. Thanks for the explanation. So rather than changing current behavior, I think we'd better clarify this in the docs to prevent confusion like \"I've configured source maps in my config file, why do postcss-loader still giving warnings?\".. @michael-ciniawsky\nI think updating warning should be enough for my case. The fallback solution may add extra complication here IMO. I'm closing this PR and thanks for your explanation. \ud83d\udc4d . undefined \u2192 isn't set\nfalsy value \u2192 is disabled\nI think it's just a wording issue for the warning message.. ",
    "jinker": "Thanks!\nBut why the option ident is not in the doc.. ",
    "sanriqing": "emmm.i met the same problem,i add  ident: 'postcss' ,but it still doestn't work . and i use it with vue-cli.the postcss-loader config like yours,\n\"webpack\": \"^3.6.0\",\n\"postcss-loader\": \"^2.1.5\", \n. ",
    "jianzhou520": "in my situation, dynamic plugin import in callback function returned null, so I definded the plugin solved the problem\njavascript\n var postcssLoader = {\n    loader: 'postcss-loader',\n    options: {\n      sourceMap: true,\n      plugins: () => [\n        require('xxx-loader') // that returned null\n      ]\n    }\n  }\njavascript\n var postcssLoader = {\n    loader: 'postcss-loader',\n    options: {\n      sourceMap: true,\n      plugins: () => [\n        targetDefinedPlugin, // fixed\n      ]\n    }\n  }. ",
    "iroy2000": "Actually it doesn't seem fixing my problem, I still see the same thing \njavascript\n{\n  test: /\\.css$/,\n  use: [\n    {\n      loader: 'style-loader',\n    },\n    {\n      loader: 'css-loader',\n      options: { sourceMap: true, importLoaders: 1 }\n    },\n    {\n      loader: 'postcss-loader',\n      options: {\n        ident: 'postcss',\n        sourceMap: true,\n        // https://github.com/postcss/postcss-loader/issues/92\n        // https://github.com/postcss/postcss-loader/issues/8\n        plugins: () => [\n          postcssCssnext({\n            browsers: ['last 2 versions', 'ie >= 9'],\n            compress: true,\n          }),\n        ],\n      },\n    },\n  ],\n}\nAnd @michael-ciniawsky , did you get this working with this ---> https://github.com/iroy2000/react-redux-boilerplate ?. Thanks a lot @michael-ciniawsky this solved my issues. \nI thought I can include config/_colors.css as @import config/colors  ( e.g. sass like ).  \nBut it turns out it cannot recognize it, so I just rename my file from config/_colors.css to config/colors.css, and it solved the issues.  . Yes, I'm talking about the [null,null,null,null,null,null,null,null,null,null,null,null,null, ....\nI check the css output, it seems correct.  I thought that was a bug, but not sure if anyone has that issues also.\n. ",
    "meyer": "@michael-ciniawsky sorry to resurrect an old issue, but should this issue be forwarded to the webpack issue tracker? I found this page by googling postcss-loader \"null,null,null,null,null\".. ",
    "GiancarlosIO": "@michael-ciniawsky yep, i have my postcss.config.js in the root directory\n\n. @michael-ciniawsky \npostcss.config.js:\n\nwe have created our a custom \"library\"\n\nin this file we have, \"react-infinite-calendar\" is a node_module:\n\nand we import that component with:\nimport { Datepicker } from '@crehana/aegis'\nwebpack.config.js\nhttps://gist.github.com/GiancarlosIO/63044ca1ed3e3fb5d8a5421412125290\nand we run the webpack with \"yarn watch\":\n\"watch\": \"ENV=development webpack --watch --progress\",\nThanks :)\n. using this solve my problem:\nconfig: { \n      path: 'path/to/postcss.config.js' \n    }\nso I'll close this i think.. ",
    "cedeber": "\nMy problem is that it seems that postcss-loader is not passing the options, so I can't even try & change postcss-import options.\n\nSame problem here. It works only if I configure it onto postcss.config.js. The options in webpack config file are not taken into account.. ",
    "SerhiiBilyk": "d*mn, it works:)\nThank you very much:)!. ",
    "coveralls": "\nChanges Unknown when pulling ec07e63346965989d67b86dd61b23b8f54f0b601 on test into  on master.\n. \n\nCoverage remained the same at 84.906% when pulling 2b370290704a155b5155ca2bf0bb8a41f5b4a8af on fix into 30d8d514b50965aeeda952f59a64b3d134dc84c1 on master.\n. \n\nCoverage remained the same at 84.906% when pulling 1c58e12624049cc66b5992fe7667851f1bec3b0c on fix into 30d8d514b50965aeeda952f59a64b3d134dc84c1 on master.\n. \n\nCoverage increased (+1.3%) to 86.164% when pulling 817680d09ba285f7a438ec6ea486736faafeba2c on fix into 58e99961108aaea62b529eb6a16cef785dbe1c80 on master.\n. \n\nCoverage increased (+0.6%) to 85.526% when pulling 3bf0a33d7bbf57ea947553ad4e29c6e4753007e8 on refactor into 58e99961108aaea62b529eb6a16cef785dbe1c80 on master.\n. \n\nCoverage remained the same at 84.906% when pulling 1821d0525ad50f7658dfffd3c4353de91b21960c on docs into 58e99961108aaea62b529eb6a16cef785dbe1c80 on master.\n. \n\nCoverage remained the same at 84.906% when pulling 371196dfc7604d26d67cf08cf79e8969f5c2ee55 on docs into 58e99961108aaea62b529eb6a16cef785dbe1c80 on master.\n. \n\nCoverage remained the same at 84.906% when pulling 371196dfc7604d26d67cf08cf79e8969f5c2ee55 on docs into 58e99961108aaea62b529eb6a16cef785dbe1c80 on master.\n. \n\nCoverage remained the same at 84.906% when pulling f6670aed30fa9ce44e67b507ad114df38c88394f on docs into 58e99961108aaea62b529eb6a16cef785dbe1c80 on master.\n. \n\nCoverage remained the same at 84.906% when pulling f6670aed30fa9ce44e67b507ad114df38c88394f on docs into 58e99961108aaea62b529eb6a16cef785dbe1c80 on master.\n. \n\nCoverage remained the same at 86.842% when pulling c98b1180b3684756a44e70b387ec50c0d719c2d6 on fix into 31a25e808a5db096e486b4c9fdd0fbab3cc43669 on master.\n. \n\nChanges Unknown when pulling 33a25fb0f0079d2ce8e710acda55797f37ad3b49 on fix into  on master.\n. \n\nCoverage remained the same at 86.842% when pulling b2b65f945e8a18276b36c91c9f68dac8c5a8818e on teazean:master into b9c1add9a1c5abfebd58006965d278787ce28d4a on postcss:master.\n. \n\nCoverage remained the same at 86.842% when pulling a617b4680dda60af204672e0c91f2e734b9ede41 on teazean:master into b9c1add9a1c5abfebd58006965d278787ce28d4a on postcss:master.\n. \n\nCoverage decreased (-0.3%) to 87.975% when pulling b722a9e84034e87a029c077446fb28ccaa7eb819 on feature/meta into 4e8e20c97a8c888198af24761dc1e5cea7647611 on master.\n. \n\nCoverage decreased (-0.3%) to 86.335% when pulling 1d6929a9ff3f138de6e89266b436f46e5caa7614 on feature/modules into 60220832b4095013a59bd196717cc77dd5b5221e on feature/meta.\n. \n\nCoverage increased (+0.5%) to 87.333% when pulling 3d1f59aaaabb88807e4dfbe87dcaea4384e045ad on clydin:clone-options into b9c1add9a1c5abfebd58006965d278787ce28d4a on postcss:master.\n. \n\nCoverage increased (+0.9%) to 88.235% when pulling 6a6968dca5d9ec6559ad5379e77bcbafb7f88dd2 on zenbrent:master into 08c063ad664853efedbdc3526b10b74d5b45ade0 on postcss:master.\n. \n\nCoverage remained the same at 87.975% when pulling 69faac48d5d064d42480559baa2f5f353381dfa3 on stsdc:patch-1 into 6ddc2bb595fee7800908ac910d8d8fe91489e6cf on postcss:master.\n. \n\nCoverage remained the same at 87.975% when pulling 69faac48d5d064d42480559baa2f5f353381dfa3 on stsdc:patch-1 into 6ddc2bb595fee7800908ac910d8d8fe91489e6cf on postcss:master.\n. \n\nCoverage remained the same at 87.975% when pulling aa52605c3b67d6001683f62ce9ebfd4cbae0278c on camshaft:patch-1 into 0a643de66a251e0539d0f385a87cddd8ec853ebc on postcss:master.\n. \n\nCoverage remained the same at 87.975% when pulling f0476472676ac53b150776e31312792c5c6d6ed0 on iMaximal:patch-1 into e2f44986aaa91a8fd9357580de009d37909db040 on postcss:master.\n. \n\nCoverage decreased (-1.2%) to 86.792% when pulling 37752860123a423fec928fbe9d7fafc52e3a74f2 on Fnatte:feat/merge-options into 1e0cade20890a150e2187172616ffb523cb17bab on postcss:master.\n. \n\nCoverage decreased (-1.2%) to 86.792% when pulling 37752860123a423fec928fbe9d7fafc52e3a74f2 on Fnatte:feat/merge-options into 1e0cade20890a150e2187172616ffb523cb17bab on postcss:master.\n. \n\nCoverage decreased (-1.2%) to 86.792% when pulling 37752860123a423fec928fbe9d7fafc52e3a74f2 on Fnatte:feat/merge-options into 1e0cade20890a150e2187172616ffb523cb17bab on postcss:master.\n. \n\nCoverage remained the same at 87.975% when pulling b90a5614d5d611a11ec8d683b870c74962930379 on Fnatte:fix/update-options-json into 1e0cade20890a150e2187172616ffb523cb17bab on postcss:master.\n. \n\nCoverage remained the same at 87.975% when pulling cbe58578519db9d261ac5416e773fb92a5034a65 on AntonRatnick:feature/fix_2.1.2 into 0c2259b515d6b91f140c9a5d5fb9ce2c2674dc0d on postcss:master.\n. \n\nCoverage increased (+1.3%) to 89.308% when pulling 53a000590142636c54c9a3459fff8643259b1329 on kisenka:loader-in-ctx into ce2adca93d37bdd40676799b0edd8313b1167349 on postcss:master.\n. \n\nCoverage remained the same at 89.308% when pulling 9271beb6385a46c71c1c4b95be437dcb1d6a42c5 on palmerye:patch-1 into 2484275a616e218dea6cd49db2f278a373366dda on postcss:master.\n. \n\nCoverage decreased (-0.5%) to 88.82% when pulling 6a2f0b08352a4ea4b458992215016adbfeddd40b on evilebottnawi-patch-1 into 2484275a616e218dea6cd49db2f278a373366dda on master.\n. \n\nCoverage increased (+0.9%) to 90.196% when pulling 2bb855c025b1817392af8253dfe62f6ed32f8b39 on yyx990803:patch-1 into 2484275a616e218dea6cd49db2f278a373366dda on postcss:master.\n. \n\nCoverage increased (+0.07%) to 89.375% when pulling 367f1808fb6f30ebbab7d7541bdcf60ab9017fee on yyx990803:patch-1 into 2484275a616e218dea6cd49db2f278a373366dda on postcss:master.\n. \n\nCoverage decreased (-10.0%) to 80.233% when pulling 3ff59fbba664d8ec817b2e51a430db997cefb51e on fix/config into 928d5c41d5e2bdec130b3c0899760889466ae7bd on master.\n. \n\nCoverage remained the same at 80.233% when pulling 5e3aa5dfc1bf428b6d0a2552dbe0b79e3bff8db1 on y-gagar1n:docs-config-path-directory into 49557925544de7b5ec7f922be29af1cf43a69e20 on postcss:master.\n. \n\nCoverage remained the same at 80.233% when pulling bf413ae1d03cf73adb95aef6dbda05b415f550a5 on patrickabkarian:patch-1 into 5c1c10834fa072785a9d73a0e5cfe75318b1f9c3 on postcss:master.\n. \n\nCoverage remained the same at 80.233% when pulling 2b3c85ff89b0b53a2855cafd5bdc7b43274e62ed on Munter:patch-1 into 5c1c10834fa072785a9d73a0e5cfe75318b1f9c3 on postcss:master.\n. \n\nCoverage remained the same at 80.233% when pulling a7c37555a1d000009ba61f69b8286d59fcaeb933 on appveyor into 0bb835cd487b7583d359ff47a59a1c638ae9fd7e on master.\n. \n\nCoverage remained the same at 80.233% when pulling 3eb64e9a66af1899006503c611d5cd6782cdee4e on travis into 6f10898e5c8ca22ca84f4279dd91c2688a21f5b5 on master.\n. \n\nCoverage increased (+7.07%) to 87.302% when pulling 1d496f64851ad69124bf44caa77aa3d41c98fbb0 on develop into 114db125074a80db436c25323683c94f5d7aa741 on master.\n. \n\nCoverage remained the same at 87.302% when pulling bb625bb3267e5ed7a5cf260c37ee0a71bbecc9f8 on aorinevo:FEATURE/I-388_master_AN_ident_docs into 7647ac9051a17a3a6add7364828bf7bd9955b968 on postcss:master.\n. \n\nCoverage remained the same at 87.302% when pulling 8918bc7bc323edee2b788775e45e36c10ee64365 on rengokantai:patch-1 into 7647ac9051a17a3a6add7364828bf7bd9955b968 on postcss:master.\n. \n\nCoverage increased (+0.3%) to 87.629% when pulling 634681ed6e44459ef5df95f09c0d0b905b82ef87 on ehzhang:ehzhang/error-on-warnings into 7647ac9051a17a3a6add7364828bf7bd9955b968 on postcss:master.\n. \n\nCoverage increased (+0.3%) to 87.629% when pulling 634681ed6e44459ef5df95f09c0d0b905b82ef87 on ehzhang:ehzhang/error-on-warnings into 7647ac9051a17a3a6add7364828bf7bd9955b968 on postcss:master.\n. \n\nCoverage increased (+0.3%) to 87.629% when pulling 634681ed6e44459ef5df95f09c0d0b905b82ef87 on ehzhang:ehzhang/error-on-warnings into 7647ac9051a17a3a6add7364828bf7bd9955b968 on postcss:master.\n. ",
    "s-panferov": "@michael-ciniawsky \nYes, I have a fixed path to a config file. The main problem is evaluation, not reading from a file system. \nThe simplest solution is to take this function from options. This would allow me to write a simple caching decorator.\n. @michael-ciniawsky I haven't used the word remove :) Ok, I'll send a PR today. ",
    "simonbuchan": "Sounds like OP wants something like babel 7's caching api for .babelrc.js. Essentially:\njs\nmodule.exports = api => {\n  const a = api.cache(() => aExpr);\n  const b = api.cache(() => bExpr);\n  ...\n};\nnow babel only needs to evaluate aExpr and bExpr for each file. There's a bunch more detail, but no docs yet, other than the error you get when it's not configured: https://github.com/babel/babel/pull/5608/files. ",
    "edouard-lopez": "Pluging are not in the core, you need to install them, for instance\nyarn add --dev \\\n  postcss-loader \\\n  postcss-import \\\n  postcss-cssnext \\\n  cssnano \\\n  sugarss \\\n  autoprefixer. ",
    "t00768nh": "\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30a4\u30e1\u30fc\u30b8\u3067\u5199\u771f\u30a2\u30c3\u30d7\u3059\u308b\u3068\u5927\u304d\u304f\u306f\u307f\u51fa\u307e\u3059\u306d\nhttps://gyazo.com/1bfc1606b3feb9579395b776d52b0ad8. ",
    "moonbreezee": "thank you. ",
    "perrywarner": "Quick Google Translate of what @t00768nh was saying: \n\nMight be a valid point but @t00768nh didn't do his/her due diligence in defining whatever bug or providing steps to reproduce, resulting in irrelevant info.. doesn't look like that \"gyazo.com\" link is that vulnerable though, but step carefully.. \n. ",
    "malydok": "postcss-reporter didn't spit out any warnings so I decided to dig around a bit and finally found that it was sass-loader which caused the problem. A moment later I read in postcss-loader documentation the following sentence:\n\nUse it after css-loader and style-loader, but before other preprocessor loaders like e.g sass|less|stylus-loader, if you use any.\n\nWhich solves the case. Thanks a lot and sorry for not reading the docs properly (happens to us all I guess).. ",
    "hualu00": "I didn't do anything else other than postcss-loader upgrade. And I've  tried to revert to v2.0.6, it turns out to be fine.\nI think this path has been resolved by webpack as I also use it in other js files.\nWhy it works fine with blank postcss-import before with v2.0.6 ?. Did you update the dependencies?\nFollowing is my webpack config\n```\nconst config = {\n  entry: {\n    polyfills:  './polyfills.js',\n    ie: 'eventsource-polyfill',\n    demo: [\n      demo_src + '/imports/demo-layout'\n    ]\n  },\noutput: {\n    path: demo_src,\n    filename: '[name].[chunkhash].js',\n    publicPath: '/assets/'\n  },\nresolve: {\n    modules: [\n      src,\n      demo_src + '/imports',\n      'node_modules'\n    ]\n  },\ndevtool: false,\nplugins: [\n    new CaseSensitivePathsPlugin(),\n    new webpack.NoEmitOnErrorsPlugin(),\n    new Dotenv({ path: ROOT + '/.env' }),\n    new AssetsPlugin(),\n    new webpack.DefinePlugin({\n      'process.env':{\n        'NODE_ENV': '\"production\"'\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin()\n  ],\nmodule: {\n    rules: [\n      {\n        test: /.css$/,\n        exclude: /.modules.css$/,\n        use: [ 'style-loader', 'css-loader', 'postcss-loader' ]\n      },\n      {\n        test: /.modules.css$/,\n        use: [\n          'style-loader',\n          'css-loader?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]&camelCase=only',\n          'postcss-loader'\n        ]\n      },\n      {\n        test: /.woff(2)?(\\?v=[0-9].[0-9].[0-9])?$/,\n        loader: 'url-loader?limit=200000&mimetype=application/font-woff'\n      },\n      {\n        test: /.md$/,\n        use: 'raw-loader'\n      }\n};\nas for 'path/name.css', path is a sub-folder in src which is resolved by webpack. I've tried it and still no work. I don't quite understand what is the right url? relative url? and it's quite complex because we have many levels of folders.\nI tried to config postcss-import in postcss.config.js, however, it doesn't work.\nI'm confused with the mechanism behind postcss resolve.. I surely did this and print the root, it shows the right path, however still failed to find the css file.\nAnd it seems that no resolve(webpack or postcss-import) works.. After some time with postcss-import, I find this works: \nmodule.exports = {\n  plugins: {\n    'postcss-import': { addModulesDirectories: [ src ] },\n    'postcss-cssnext': {},\n    'postcss-browser-reporter': {},\n    'postcss-reporter': {}\n  }\n};. ",
    "davidlago": "The same version of HappyPack was used when building the project successfully with postcss-loader 2.0.8 though... same configuration with the Function in the loader options.. So sorry... wrong version. It was 2.0.8 to 2.0.9:\nhttps://github.com/postcss/postcss-loader/compare/v2.0.8...v2.0.9. ",
    "filipesilva": "We use it here: https://github.com/angular/angular-cli/blob/master/packages/@angular/cli/models/webpack-configs/styles.ts#L175-L182\nBut now that you mention the versions, I went and checked and it seems that in that project the postcss-loader version was actually 1.3.x. I updated to 2.0.8 and didn't have that problem anymore. So, user error :/. @evilebottnawi we fixed the similar problem we had on Angular CLI but did so by fixing a bug in our custom postcss plugins. I don't it is related to postcss-loader at all.. ",
    "TimeBandit": "Saw same issue, upgrading to \"postcss-loader\": \"^2.1.5\" and the problem went away. ",
    "OliverJAsh": "What was the exact fix for this issue, and in which release did it first appear?\nUpgrading to the latest version isn't a great solution, as many times that only replaces old bugs for new bugs (as I have just found). If we can work in terms of specific fixes, then we can deal with bugs on a case-by-case basis.. It appears the fix for this issue first appeared in v2.0.0, although the changelog doesn't mention it: https://github.com/postcss/postcss-loader/blob/928d5c41d5e2bdec130b3c0899760889466ae7bd/CHANGELOG.md#200-2017-05-08\nFrom this PR: https://github.com/postcss/postcss-loader/pull/191. ",
    "matheusdallrosa": "Ok, i'll do it. I decided to post the issue here because the configuration was given on this repository. Thank you.. ",
    "teazean": "@evilebottnawi \nWhen I was developing, I was confused by the warning tip\u3002\nPrevious source map found, but options.sourceMap isn't set.\n\nBut I have already set sourceMap to false, I suspected some configuration is still wrong. It wasted a lot of time finding out why I got a warning.\nI think warning tip should be more precise. \n. @evilebottnawi \nyes, but maybe we can choose one from below which could be more precise: \n\nchange options.sourceMap isn't set to options.sourceMap is a falsy value\nchange if (!sourceMap to if (sourceMap === undefined\n\nBy the way, if I set options.sourceMap to false clearly, I will know what's the result, and then I think the warning tip is unnecessary. \n. @michael-ciniawsky Here is my warning tip.\n\nAnd below is my webpack config for vue-loader options.\n{\n  \"loaders\": {\n    \"css\": [\n      \"vue-style-loader\",\n      {\n        \"loader\": \"css-loader\",\n        \"options\": {\n          \"minimize\": false,\n          \"sourceMap\": false\n        }\n      },\n      {\n        \"loader\": \"postcss-loader\",\n        \"options\": {\n          \"sourceMap\": false\n        }\n      }\n    ],\n    \"postcss\": [\n      \"vue-style-loader\",\n      {\n        \"loader\": \"css-loader\",\n        \"options\": {\n          \"minimize\": false,\n          \"sourceMap\": false\n        }\n      },\n      {\n        \"loader\": \"postcss-loader\",\n        \"options\": {\n          \"sourceMap\": false\n        }\n      }\n    ]\n  },\n  \"transformToRequire\": {\n    \"video\": \"src\",\n    \"source\": \"src\",\n    \"img\": \"src\",\n    \"image\": \"xlink:href\"\n  }\n}\nThe file compiled with warning is a Vue file with no style#lang configed. @michael-ciniawsky \nI mean that the waring tip should not be displayed when postcss-loader#sourceMap is set to false explicitly.\nOr we can change the tip, not using not set(I set the postcss-loader#sourceMap already, and why do I get a not set warning?).. @michael-ciniawsky \nCan we just change the warning  tip from options.sourceMap isn't set to options.sourceMap is a falsy value, since it actually cost a lot of time finding out why I get a warning options.sourceMap isn't set when I set options.sourceMap to false explicitly.. @michael-ciniawsky \nUpdating warning is enough for my case. I'm closing this PR, and thanks for your explanation.\ud83d\udc4d\nLooking forward to your warning improvement.. \ud83d\ude1e Sorry for reopening this PR, and  I will push the improved warning.. ",
    "sandiprb": "Hey, @evilebottnawi that worked like a charm. Thanks a lot \ud83d\udc4d . ",
    "marko911": "Thank you sir.. ",
    "theboyWhoCriedWoolf": "I cleared and reinstalled a few times. I am using the following config in webpack:\n{\n                test: /\\.css$/,\n                use: [\n                    require.resolve('style-loader'),\n                    {\n                        loader: require.resolve('css-loader'),\n                        options: {\n                            importLoaders: 1,\n                            modules: false,\n                        },\n                    },\n                    {\n                        loader: require.resolve('postcss-loader'),\n                        options: {\n                            ident: 'postcss',\n                            plugins: () => [\n                                require('postcss-flexbugs-fixes'),\n                                require('postcss-cssnext')(),\n                            ],\n                        },\n                    },\n                ],\n            },. Hello @michael-ciniawsky, it seemed to be a mismatch in versions and I not only had to clear cache but also clear my directory and move files. So possibly just an issue with my system. \nAll good now. Thanks. ",
    "amir20": "I have tried this for hours and I can't figure out how to configure ExtractTextPlugin with postcss. It doesn't seem like it is working with custom config. . Thanks for the quick response. So is there no way to disable it within cssnext?. Thanks, @michael-ciniawsky. I realize css-next is not even your project. But that worked. This has been annoying me for 2 months now and you finally figured it out. . ",
    "zenbrent": "That should cover everything.. delete is a reserved keyword, want me to call the functions deleteFile, copyFile, etc?. Good catch, it isn't needed at all since I'm calling .watch() on the compiler.. ",
    "mrkhanakia": "I know firefox has not 61 version\nPlease check the error log it is saying Unknown version 61 of firefox. ",
    "egorpavlikhin": "Even an empty scss file triggers this error. Why was this closed? . ",
    "MathiasSM": "Nope. I'm using Webpack 3.11.0. ",
    "kirjai": "Explicitly installing autoprefixer, rather than relying on in being installed by the dependencies is the way to go. \nsimply running npm i autoprefixer solved the problem.. ",
    "codedumper": "It is affecting google/material-design-icons too.\nhttps://www.w3.org/TR/CSS1/#url doesn't require quotes.\nI opened issue (736) and PR is on the way adding quotes to url, but it shouldn't be required. . ",
    "Brampage": "It seems that the next release of Angular-CLI contains the fix for this issue. Take a look at this thread.. ",
    "ameyakarve": "Any updates here? If no one is working on this, I could give it a shot maybe. I was able to reproduce independently; that's when I stumbled upon this. I'll post steps in a while @evilebottnawi . @ameyakarve @evilebottnawi it happened to be in a different layer. PostCSS wasn't the problem . ",
    "fubar-coder": "It seems that the angular team fixed in in their copy: https://github.com/angular/angular-cli/pull/9738. ",
    "camshaft": "Without this fix:\n\nWith this fix:\n\n. ",
    "jussikinnula": "Manually readding to: file, to options (ultimately reverting the PR #339 fix) resolves the issue:\nhttps://github.com/postcss/postcss-loader/blob/master/lib/index.js#L105-L112. After changing the order (moving postcss-loader above resolve-url-loader) gets rid of the error.\nI understand the fact that many webpack loaders are buggy, but for now I haven't been able to resolve resolve importing/requiring a Stylus file inside a Stylus file - without using resolve-url-loader. Without it, the imported Stylus files are looking url() inside the same directory where the file requiring another is.. @evilebottnawi, that would be superb. It would simplify our life of bundling a lot of reusable React components in component libraries :-). ",
    "Demivan": "Have same issue with resolve-url-loader.\nresolve-url-loader uses SourceMapConsumer.originalPositionFor from mozilla/source-map.  Path resolved by that method is now wrong:\njs\n{ source: 'D:/Projects/test/node_modules/video.js/dist/D:/Projects/test/node_modules/video.js/dist/video-js.css',\n  line: 17,\n  column: 2,\n  name: null }\nwith version 2.1.0:\njs\n{ source: 'D:/Projects/test/node_modules/video.js/dist/video-js.css',\n  line: 17,\n  column: 2,\n  name: null }. Yeah, I know :). But it does not change that mozilla/source-map is now returning wrong path. It could break other loaders too.. There is already pending pull request to use postcss in resolve-url-loader. but resolve-url-loader as postcss plugin would be just great. ",
    "bholloway": "It seems like the source-map outgoing from postcss-loader is corrupted before it enters resolve-url-loader, at least on windows.\nSee analysis here. Please let me know your thoughts.. There could be a couple of issues going on here. But for Windows I am suggesting there is probably a large problem.\nAfter some digging it looks like mozilla/source-map (used by postcss) has considered paths to be URIs for at least 2 years. Hence this silly concatenation on windows.\nI note that postcss state that \"you should always set 'to' to generate correct source maps\". This could mean a lot of things but I would bet this avoids the Windows issue most of the time.\n(P.S. I use postcss-loader myself and appreciate all your work). ",
    "julmot": "@michael-ciniawsky Coming here since I had this issue and debugged this with the help of @bholloway's analysis (see above). I could only fix it with https://github.com/postcss/postcss-loader/issues/340#issuecomment-368464592. However, it took a while to come here, so this can't be a solution for the mass. I'd highly appreciate if you and @bholloway could please coordinate a solution. The points you've written may be right, but they don't offer a solution to the problem. To me it feels like: \"not my problem, I don't care\".. ",
    "aleen42": "It seems that autoprefixer has also acted like this when specify browsers with defaults. ",
    "Fnatte": "\nDeclaring related options in two different places and adding additional complexity should be avoided whenever possible and is bad practice in general imho.\n\nI am totally with you on that point. My thinking was that it was better to stick with how (most) other loaders work. I may be wrong, and I have not a lot to back this up with except babel-loader, but I believe that many loaders (that also allow rc-files) have support for merging. On the other hand, it's probably a good idea to disallow merging as long as we can prevent misunderstanding.\nOne of the somewhat weird behaviours (although justified) is that configuration done in webpack options apply to either the actual loader or postcss. Also, it is not obvious to me that adding syntax: 'sugarss' to webpack config will cause postcss.config.js not to be parsed at all.\nI do not have any good answers to your questions, so maybe that is enough to close this PR. Do you think a warning message is appropriate when an option is causing postcss.config.js to be skipped?\nI will open another PR regarding additionalProperties.. ",
    "koresar": "According to SemVer it should have been the v3.0.0 release. This broke many builds across the internet. Mostly Vue.js projects which include postcss by default.\nWould you please revert this? . @ai Hi Adnrey. Whole Internet is shocked with this bug. Could you please revert the PR and publish v2.1.3 it? Looks like @michael-ciniawsky is missing somewhere.. Andrey, there are dozens of links linked to this github issues.\nHere is a full error.\nhttps://github.com/nuxt/nuxt.js/issues/3048\nOn 20 Mar. 2018 12:28, \"Andrey Sitnik\" notifications@github.com wrote:\n\n@koresar https://github.com/koresar tell me more about the issue. I can\nremove the release from npm, but I need to clearly understand what happened\nto not make it worse.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/postcss/postcss-loader/pull/346#issuecomment-374441217,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABjCL-1AlDeVMPBN-q3as1XlOL6u4CHRks5tgFtOgaJpZM4Su9HP\n.\n. Thank you @ai for the collaboration and dedication.. \n",
    "saknarak": "I found additionalProperties has been changed from true to false will be cause this problem.\nWhen I switch back to true, it's work without problem.\n  . ",
    "derevandal": "346.",
    "qimu-fe": "encounter similar problem\n`Module build failed: ModuleBuildError: Module build failed: ValidationError: PostCSS Loader Invalid Options\noptions['minimize'] is an invalid additional property`. ",
    "AntonRatnick": "Same error with options['outputStyle']\nlinux\nnode - 8\nwebpack@3.11.0\npostcss-loader@2.1.2\n. Revert changes of additionalProperties in 2.1.2. ",
    "Nemo64": "Can confirm. This is really annoying since the log is really verbose.. ",
    "Cybolic": "The test fail on comparing the snapshot, not on the actual code. I'm afraid I'm not familiar enough with the test setup to know what needs to be done to fix the error.. ",
    "minhtranite": "I tried inject env from webpack config into postcss config but it inject to context.options.env instead of context.env. Is it a bug ?\nInside webpack config:\njs\n{\n              loader: 'postcss-loader',\n              options: {\n                sourceMap: true,\n                config: {\n                  ctx: {\n                    env: argv.mode,\n                  },\n                },\n              },\n            },\nRun webpack --mode=production and the context in postcss config file:\n{\n  cwd: '...',\n  env: 'development',\n  file:\n    {\n      extname: '.scss',\n      dirname: '...',\n      basename: 'index.scss',\n    },\n  options: { env: 'production' },\n}. ",
    "systemist": "There seems to be a bug in webpack-cli. \nNODE_ENV=production ./node_modules/.bin/webpack works as expected.\n./node_modules/.bin/webpack --env.NODE_ENV=production doesn't work. The value of process.env.NODE_ENV is development;\n. @evilebottnawi actually I was wrong (kind of). When passing --env.NODE_ENV=production argument, the value of process.env.NODE_ENV will be production inside webpack.config.js, but development inside postcss.config.js; \nUsing the shell to set environment var works in both configs.. ",
    "nikolay-borzov": "Have the same issue. It seems like webpack sets process.env.NODE_ENV=production after postcss-loader processes postcss.config.js\nwebpack.prod.js:\nmodule.exports = merge(common, {\n  mode: 'production',\n  // other parameters\n}}\nnpm script:\n\"build:prod\": \"webpack --config webpack.prod.js\"\npostcss.config.js:\n```\nmodule.exports = ({ file, options, env }) => {\n  console.log('ENVIRONMENT', env, process.env.NODE_ENV)\nreturn {\n    plugins: {\n      autoprefixer: true\n    }\n  }\n}\n```\nOutputs: ENVIRONMENT development development.\nChange script to:\nbuild:prod\": \"cross-env NODE_ENV=production webpack --config webpack.prod.js\"\nAnd output will be: ENVIRONMENT production production\n. ",
    "ZSkycat": "```js\n// webpack.production.js\nconst merge = require('webpack-merge');\nconst base = require('./webpack.base');\nlet config = merge(base, {\n    mode: 'production',\n    ...\n});\nmodule.exports = config;\nprocess.env.NODE_ENV = 'production';\n```\nAdd this line of code to fix the bug temporarily:\nprocess.env.NODE_ENV = 'production';. ",
    "zenoven": "I got env undefined in postcss.config.js\nin the npm scripts there is no env set \n\"start\": \"npm run dev\",\njs\n// webpack.config.js\nconst env = process.env.NODE_ENV || 'development'\nconst mode = env === 'production' ? 'production' : 'development'\n...\nconsole.log('process.env.NODE_ENV:', process.env.NODE_ENV)\nconsole.log('mode:', mode)\nconst config = {\n  mode: mode,\n  ...\n}\n which output is \nprocess.env.NODE_ENV: undefined\nmode: development\njs\n// postcss.config.js\nmodule.exports = ({ file, options, env }) => {\n  console.log('env:', env, 'process.env.NODE_ENV:', process.env.NODE_ENV )\n  return {\n    plugins: {\n      'postcss-import': { root: file.dirname },\n      // 'postcss-cssnext': options.cssnext ? options.cssnext : false,\n      'autoprefixer': env === 'production' ? options.autoprefixer : false,\n      'cssnano': env === 'production' ? options.cssnano : false\n    }\n  }\n}\n which output is \nenv: undefined process.env.NODE_ENV: development \nI'm really confused, shoud I set env in the npm scripts first?\n. ",
    "kisenka": "@michael-ciniawsky could you please take a look, thanks!. @evilebottnawi @michael-ciniawsky could someone please merge and publish a new version?. ",
    "yyx990803": "Done.. ",
    "goldfire": "While putting the minimal test repo together I discovered that the issue was I had an index.css file that was @importing each CSS file. I guess the behavior with this changed from Webpack 3 to 4 (or I didn't notice it was duplicating before)? This caused all of those CSS files to be included in the output twice.. ",
    "bifunctor": "That is the whole configuration:\n```\nconst HtmlWebPackPlugin = require(\"html-webpack-plugin\");\nconst CopyWebpackPlugin = require(\"copy-webpack-plugin\");\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nconst path = require(\"path\");\nconst glob = require(\"glob\");\nmodule.exports = {\n  entry: [\"./src/index.js\"],\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"bundle.[hash].js\"\n  },\n  module: {\n    rules: [\n      {\n        test: /.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: \"babel-loader\",\n          options: {\n            presets: [\"@babel/preset-env\", \"@babel/preset-react\"]\n          }\n        }\n      },\n      {\n        test: /.html$/,\n        use: [\n          {\n            loader: \"html-loader\",\n            options: {\n              minimize: true\n            }\n          }\n        ]\n      },\n      {\n        test: /.scss$/,\n        use: [\n          {\n            loader: MiniCssExtractPlugin.loader\n          },\n          {\n            loader: \"css-loader\"\n          },\n          /{\n            loader: \"postcss-loader\"\n          },/\n          {\n            loader: \"sass-loader\",\n            options: {\n              sourceMap: true,\n              includePaths: [\"node_modules\", \"node_modules/@material/*\", \"src\"].map(\n                d => path.join(__dirname, d)\n              )\n            }\n          }\n        ]\n      },\n      {\n        test: /.(woff(2)?|ttf|eot|svg)(\\?v=\\d+.\\d+.\\d+)?$/,\n        use: [\n          {\n            loader: \"file-loader\",\n            options: {\n              name: \"[name][hash].[ext]\",\n              outputPath: \"fonts/\"\n            }\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebPackPlugin({\n      template: \"./public/index.html\",\n      filename: \"./index.html\"\n    }),\n    new CopyWebpackPlugin([\n      {\n        from: \"public\"\n      }\n    ])\n  ]\n};\n``` \nHope it helps.\nTHanks. I change my configuration again:\n```\nconst HtmlWebPackPlugin = require(\"html-webpack-plugin\");\nconst CopyWebpackPlugin = require(\"copy-webpack-plugin\");\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\nconst path = require(\"path\");\nconst glob = require(\"glob\");\nmodule.exports = {\n  entry: [\"./src/index.js\"],\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"bundle.[hash].js\"\n  },\n  module: {\n    rules: [\n      {\n        test: /.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: \"babel-loader\",\n          options: {\n            presets: [\"@babel/preset-env\", \"@babel/preset-react\"]\n          }\n        }\n      },\n      {\n        test: /.html$/,\n        use: [\n          {\n            loader: \"html-loader\",\n            options: {\n              minimize: true\n            }\n          }\n        ]\n      },\n      {\n        test: /.scss$/,\n        use: [\n          {\n            loader: MiniCssExtractPlugin.loader\n          },\n          {\n            loader: \"css-loader\"\n          },\n          {\n            loader: \"postcss-loader\"\n          },\n          {\n            loader: \"sass-loader\",\n            options: {\n              sourceMap: true,\n              includePaths: [\"node_modules\", \"node_modules/@material/*\", \"src\"].map(\n                d => path.join(__dirname, d)\n              )\n            }\n          }\n        ]\n      },\n      {\n        test: /.(woff(2)?|ttf|eot|svg)(\\?v=\\d+.\\d+.\\d+)?$/,\n        use: [\n          {\n            loader: \"file-loader\",\n            options: {\n              name: \"[name][hash].[ext]\",\n              outputPath: \"fonts/\"\n            }\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebPackPlugin({\n      template: \"./public/index.html\",\n      filename: \"./index.html\"\n    }),\n    new CopyWebpackPlugin([\n      {\n        from: \"public\"\n      }\n    ])\n  ]\n};  \nBut still I've got the error message:\n    ERROR in ./src/index.scss (./node_modules/css-loader!./node_modules/postcss-loader/lib!./node_modules/sass-loader/lib/loader.js??ref--6-3!./src/index.scss)\n    Module build failed: Syntax Error\n(1:18) Unnecessary curly bracket\n\n> 1 | .mdc-top-app-bar {\n    |                  ^\n  2 |   background-color: #6200ee;\n  3 |   /* @alternate */\n\n``` \nWhat am I still doing wrong? \nThanks. Yes, I will create an example and will post it. \nThanks. ",
    "Rouche": "Thanks for clarification. But i had to use this workaround, as the context.env always end up undefined.\nnew webpack.LoaderOptionsPlugin({\n                //test: /postcss-loader$/, // only for this module\n                options: {\n                  mode: mode\n                }\n            }),\nAnd access it in postcss.config like this : context.webpack.options.mode\nActually i like it, its regression bullet proof :). ",
    "x-yuri": "@michael-ciniawsky Indeed, that would probably solve the first issue (CSS file doesn't get rebuilt). But not the second one. postcss-image-sizes [caches][cache] image extents. So even if it were to be asked about image extents on a successive build, it would give the same reply. How can it know when to clear the cache?\n[cache]: https://github.com/s0ber/postcss-image-sizes/blob/3014e1decd972bdc273cc4f319298ba55a6cc45c/src/index.js#L38. @michael-ciniawsky I might make PRs to postcss-image-sizes repository. But you must be missing the point here. postcss-image-sizes replaces image-width(./1.png) in css code with say 100px. Not resizes the image. No options besides assetsPath.\nSo to check if the cache is invalid, you've got to read the file (which makes the cache meaningless), or subscribe to some sort of file system notifications (which makes no sense when postcss is running standalone, and is probably overkill). Or clear the cache every time webpack builds the bundle. E.g. add clearCache() method to postcss-image-sizes plugin, and create a webpack plugin in webpack.config.js, which calls the method every time webpack invalidates the build. And maybe make it public? Like, PostCSSImageSizesClearCachePlugin :)\nWhat do you think?. @michael-ciniawsky Let me explain myself. That's not a big issue for me. I can fix it by adding (PR) clearCache() method to postcss-image-sizes plugin, and the following code to webpack.config.js:\njs\nplugins: [\n    {apply: function(compiler) {\n        compiler.plugin('invalid', () => {\n            imageSizesPlugin.clearCache();\n        });\n    }}\n],\nBut it may be a sign of something being off in Webpack or postcss-loader.\nCome to think of it, I had a similar issue with postcss-custom-properties plugin. I used this plugin to provide variables to CSS from a file. But when the file changes, I've got to somehow make new values available to the plugin. So I used a similar approach to call customProperties.setVariables(...).\nSo, it might be an issue with postcss-loader, since it's supposedly doesn't reinstantiate plugins when a build starts. Considering I can pass an initialized instance of a plugin to postcss-loader, it might not even have a chance to:\njs\n{loader: 'postcss-loader',\noptions: [\n    plugins: [\n        require('postcss-custom-properties')({\n            variables: ...,\n        }),\n    ],\n]}\nIf making postcss-loader reinstantiate plugins on every build (option 1) is not a good solution, the next thing that comes to mind is to make Webpack notify loaders of starting a build (option 2), which in its turn can notify the plugins.\nBut it's probably best to leave webpack loaders oblivious to the fact that files may be built more than once (to not make them any more complex). So it might make sense to turn postcss-loader into a plugin with a loader (option 3). Then it can subscribe to invalid event.\nNow we have two suboptions:\n\n\nProvide a mechanism for postcss-loader to notify plugins of starting a build (option 3.1). But considering that postcss\u2014when used outside of Webpack infrastructure\u2014generally compiles assets just once, this might be not a good option. Not to mention that in more complex cases, you might need to pass some info (new variables in case of postcss-custom-properties plugin).\n\n\nLeave the user responsible for taking necessary actions in webpack.config.js by calling plugin methods (option 3.2), for instance:\n\n\njs\nplugins: [\n    new PostCSSPlugin({\n        onInvalid: plugins => {\n            plugins['postcss-custom-properties'].setVariables(...);\n        },\n    }),\n],\nI'd like to contribute to resolving this issue. But I might not know Webpack well enough to come up with a good solution. (Although, I've spent a lot of time inspecting it with a debugger.) So I decided to ask. And was surprised with the direction it took. I feel a bit uneasy about me not being able to fully understand you. Particularly:\n\nThere simply needs to be a more 'advanced' caching mechanism, the extracted helpers from the CSS fle + the image source path need to construct a cache key which is invalidates the cache for an image\nBy 'options' I meant the values within the CSS Code, image path + css values === cache key, the cache currently only checks if the image exists or not, there might be a mtime (Did the file change ?) check needed aswell here (mtime is on the fs.stat() {Object}). But most importantly if one changes something within the CSS the cache isn't currently invalidated and the change won't have any effect. Only the image path as cache key simply isn't enough...\n\nI understand the idea of adding mtime to the cache key. But wouldn't it make the cache less useful? It might result in reading from disk, might it not?\nRegarding \"extracted helpers from css\", \"values withing the css code\", \"css values\", I have no clue what they might be. Can you tell what they are specifically for postcss-image-sizes case?\nAs for \"if one changes something within the CSS\", I see nothing in css that might need the cache to be invalidated. When path to an image in CSS changes, the cache key changes as well, but that doesn't mean that the value under the new key is invalid. The only thing that makes the cache invalid is the fact that an image has been changed. Adding modification time to the cache key is just a way (workaround) to check if image has been changed without reading it.\nAll this (values from CSS, modification time) seems like a workaround to me. Which is okay. I'm referring here to, \"Only the image path as cache key simply isn't enough\". I think just image path is enough, but maybe adding other things to the key might result in a better solution.\n\nProcessing images and co kg within CSS is not straightforward in webpack atm...\n\nHere I suppose you're hinting at Webpack 4 CSS Module Type. If it's going to solve the issue, or change the solution significantly, we can wait until it's there.\nP.S. I'd like to know the best (optimal) way to solve the issue. Not the easiest one.\n. ",
    "y-gagar1n": "Fixed. Fixed. Turns out those \u2705 and \u274c symbols are shown as squares on Chrome in Debian.. Hmm, must've been some specific version of Chrome or something. Seen that on my work machine today. Now I check on my personal machine (also Chrome and Debian) and everything is OK. Will discover it more tomorrow. . It's caused by the lack of some system fonts on my Debian. I've made a little research and found out that there are more widely supported symbols for 'cross' and 'check' marks. The downside is that they are not so fancy looking.\nHere they are with their supported fonts:\nUsed now:\n\u2705 http://www.fileformat.info/info/unicode/char/2705/fontsupport.htm\n\u274c http://www.fileformat.info/info/unicode/char/274c/fontsupport.htm\nRecommended:\n\u2714 https://www.fileformat.info/info/unicode/char/2714/fontsupport.htm\n\u2716 https://www.fileformat.info/info/unicode/char/2716/fontsupport.htm\n. And here is the screenshot you asked for. Same behavior in Chrome and Opera. \nFirefox works fine.\n\n. ",
    "patrickabkarian": "made a pull request. ",
    "halfzebra": "Thanks for merging this, I'm wondering if it would make sense to remove autoprefixer from examples featuring postcss-preset-env, because it has autoprefixer already?. Good catch, thanks for the feedback! I have addressed it by renaming the options.presetEnv -> options['postcss-preset-env']. ",
    "aorinevo": "I did see that in the closed issues.  Do you plan to drop support in v3?. ",
    "rjgotten": "@evilebottnawi \nI'll try to work on that tomorrow.. > @michael-ciniawsky\n\nCould you try with the following patch ?\n\nSadly has no effect.\nI'll start working on building a test case.. @evilebottnawi \nTestcase is ready: https://github.com/NetMatch/postcss-loader-testcase\nThe build has a passthrough loader woven in which shows the source map sources going into and coming out of postcss loader.\nWhat I'm seeing when running this on Windows:\n```\nSourcemap spy - postcss-loader input:\n  src\\style\\app.scss\n  src\\style\\sub\\a.scss\n  src\\style\\sub\\b.scss\nSourcemap spy - postcss-loader output:\n  D:\\github_git\\postcss-loader-testcase\\src\\style\\D:\\github_git\\postcss-loader-testcase\\src\\style\\sub\\a.scss\n  D:\\github_git\\postcss-loader-testcase\\src\\style\\D:\\github_git\\postcss-loader-testcase\\src\\style\\sub\\b.scss\n  D:\\github_git\\postcss-loader-testcase\\src\\style\\D:\\github_git\\postcss-loader-testcase\\src\\style\\app.scss\n```\n. > I don't have aceess to a windows machine\nI think Microsoft offers VMs for developers, with licenses that auto-expire after a set period.\nMight be a bit of a help in that department, if you're dealing with this type of thing.\n\nDid you also try with commenting out these lines completely\n\nHmm.. I should've remembered to try that. Ok. I've made a note to try commenting out the path.resolve lines completely. Will get to that after the weekend.. @mutoo \nImho all loaders should be producing source maps that are based on relative URIs from generated source to original source. Any loader that doesn't generate source maps in that way is - quite frankly - \"doing it wrong\" and should be fixed.\nIt should be Webpack's responsibility to remap those relative paths to the webpack://./ rooted form once it bundles everything into an entry-point or chunk output file.. > this plugin needs absolute file paths\nAnd here's the likely root cause of all these loaders having bad implementations: the fact that Webpack requires intentionally malformed source maps to work 'correctly' to begin with. \nIf it all winds back to Webpack itself, then they need a good boot up the ass to fix this.\nThe fact that it \"seems to be also working on UNIX platforms\" is probably why this problem came to be so wide-spread and persistent in the first place. Odds are someone half-assed the core source mapping functionality and never bothered looking at it any further, because \"works on my machine\". i.e. it works under their *nix OS, where OS paths happily are close enough to URIs to be compatible. Not so with Windows, ofcourse.\nLord knows why Webpack's core source maps plugin requires absolute file paths. It has access to Webpack's own output paths as the generated source paths, which it should already be able to combine with relative paths in the source map just fine. And that should give it the absolute paths it needs to produce its project-relative webpack://./ source map entries.\n. @michael-ciniawsky \nThose 12 different types are various ways of outputting maps, and variations on including intermediate compilation/bundling stages into the maps or not.\nShould have very little, if anything, to do with the types it can take in. Which should just be spec-adherent.. > Somebody can create minimum reproducible test repo?\nYou missed this, maybe?\nhttps://github.com/postcss/postcss-loader/issues/390#issuecomment-417584816. ",
    "mutoo": "I once found there is a key function (util.join()) in source-map lib could probably cause this problem:\nhttps://github.com/mozilla/source-map/issues/355\nbut after discussing, I realized that the paths in the sources field should be URLs but the os paths, that why util.join() doesn't treat windows device path as an absolute path. so it generated the paths like this.\nI read the code of the build pipeline: [css-loader, postcss-loader, sass-loader], then I got many bad idea in them:\nsass-loader: normalize all the relative path in the sources field to os path, bad! since it should be URLs, should always use POSIX path separator (/) rather than os path separator (\\ on windows).\npostcss-loader: convert relative paths to os absolute paths (\\), bad! see below.\ncss-loader: use whatever paths from the previous loader, but convert to POSIX path separator (/), so-so. should be responsible to convert the paths to relative paths, or better, the webpack-internal path.\n\nDon't insert absolute paths into the module code as they break hashing when the root for the project is moved.\nhttps://webpack.js.org/contribute/writing-a-loader/#absolute-paths\n\nThere will be much effort to fix the bug since it's related to 3 loaders & 1 lib, so I wrote a small loader to fix the sourcemap temporary in my projects. Which fix and convert the os absolute path to webpack-internal:// path\nhttps://gist.github.com/mutoo/ad6dd6101535e82a44bcc2a051d7cb22\n. ",
    "KidkArolis": "I did this in the webpack.config.js. ",
    "sancelot": "fixed : npm outdated pointed me that I was using 1.3.0 instead of 3.0.0. ",
    "lilong7676": "thanks, this issue has been resolved, \njust use:\n{\n  loader: 'postcss-loader',\n  options: {\n    config: {\n      path: 'path/to/.config/' \n    }\n  }\n}. ",
    "budarin": "thenks! it works! ). ",
    "ehzhang": "Is it the implementation that isn't a good idea, or the addition of this config value?\nI'm not sure what you mean by implementing result.errors() - my use case here is to effectively set the \"log level\" for warnings and escalate them from warnings to errors (and I use emitError with the Warning class). Sounds reasonable - kind of the response that I would've expected. I did notice that not many loaders do this (maybe the only exception would be one like ts-loader, that allows setting error levels).\nI'll close this - thanks for taking the time to look it over!. ",
    "yanhaijing": "Bad news, but thanks, have a plan(idea) to support webpack alias?. I see what you mean. my idea is not use sass-loader\uff0conly use postcss-loader+postcss-node-sass. Look at what I gave you demo, using css-loader + postcss-loader+postcss-node-sass, but don't work. postcss-import is different with webpack alias, need to change the code. ",
    "ifmos": "@yanhaijing I resolved it using postcss-import plugin with its resolve method when I'm using stylelint and less, maybe you can have a try. ",
    "egoist": "\nwhat is sense use postcss without parser/plugins/strigifier? \n\nwhat I mean is optional config, babel-loader (and almost everything except postcss-loader) won't report errors when there's no .babelrc \ud83d\ude42. ",
    "smalldice": "All right. Thank you for your solution. But the problem is still there.. ",
    "trigun539": "@michael-ciniawsky Sorry the file actually is postcss.config.js. It is still not working.. > Because you do not have plugins for postcss-loader, it is error from postcss\nI have precss/autoprefixer/lost postcss plugins that should work.. ",
    "DmitriWolf": "I'm working on a React app that spits out a long string of broken promise warnings every time I build, and either of these two fixes makes them all go away.\nSeems like a trivial fix to a constantly annoying problem. \nPlease merge one or the other. Thank you.\n. We are!. "
}