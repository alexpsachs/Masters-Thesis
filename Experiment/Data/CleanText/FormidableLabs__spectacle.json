{
    "kenwheeler": "Thanks!\n. Thanks!\n. done\n. Added\n. done\n. @ryan-roemer It does, and good point. Would you retain layout for a print style sheet and just cast all the text colors black? Or would you default to a more default version?\n. Reopened for adding printer paper mode (white background, black text)\n. Fixed via 9e7553919b12fcf230354a9e740b8893303e8f5b\n. Its Safari. Not much can be done...\n. Yes\n. Please\n. Done\n. Thanks!\n. Thanks!\n. Repurpose it?\n. Well that sounds fun. I'll throw it under a MIT license this morning (on mobile atm)\n. Added MIT, enjoy\n. Great catch, thanks!\n. Thanks!\n. Spectacle doesn't do vertical navigation so I'm thinking a grid might be a better option. What do you think @waywaaard?\n. localStorage for the win\n. You can just throw one in. You mean like YouTube or locally hosted video tag?\n. Hmm, I might try using https://github.com/webpack/file-loader for this\n. Let me know if that works out for you\n. @davej got a repo I can look at? Is the video 404'ing?\n. You are gonna wanna write:\nstyle={height: '70vh'}\n. Sorry on mobile:\nstyle={{height: '70vh'}}\n. Np!\n. Nice catch. I'll put logic in to determine direction and set that correctly.\n. I actually think this behavior is correct. Any time a slide is being transitioned to , it takes z precedence, while transitioning out always drops a level. Right?\n. Ok I'm seeing some zIndex inconsistency, fixing now.\n. Hey, while we're here, I switched from left to translate, seeing improved perf on your phone?\n. I might try and switch to batching the updates, might speed things up\n. Ok Z's should be all set on master\n. :+1: \n. Nice catch, just add\nif (process.argv[1].indexOf('webpack-dev-server') !== -1) {\n  webpackConfig.module.loaders[0].loaders.unshift('react-hot')\n}\nto the end of the file before the export\n. Thank you!\n. Awesome , I'll run it and check it out when I get home. Been meaning to add a progress element.\n. Finally ran this, and you just blew my mind. Most creative thing I've seen in like a month!\n. I'm kind of wary to include pac man as a lib default, but if you want to make it a bar across the bottom, I'll gladly merge into core\n. amazing\n. Code looks fantastic, once I get to test across browsers, merging. Thank you so much.\n. This is downright perfect. Looks amazing everywhere. Only thing is, can we change showProgress to just progress and should the bar version start with bar showing, or should it be width: 0 for the first slide?\n. @mathieudutour By the way, thanks again, you are killing it.\n. Boom!\n. Generator is not the answer\n. Oh wow, @ryan-roemer  thats awesome. Gonna have a look at this for the next release.\n. How would you set it up? Trying to get the 0.14 update merged as the first order of business. \n. Yeah thats up next after the 0.14 update. I figure we could split it into two parts, a core npm library, and a boilerplate that comes with a theme. thoughts?\n. npm installable spectacle@1.0.0-rc1. Boilerplate project forthcoming.\n. This is great. I'm actually doing a massive linting of this lib right now, so I'll pull and try it out once I get it pushed.\n. Can you rebase this after we merge the other two? \n. Actually, I'll just do it, I gotta clean the lint up anyway.\n. Can't wait to check it out, you're a machine!\n. Just added a couple notes, other than that stuff, this looks great.\n. This is looking good, but we have to figure out how to keep the appears in sync. \n. Perfect, thanks dude\n. The same could be said of flux, no?\n. https://justgetflux.com/\n. Not sure I like this level of boilerplate. Does this kill transitions?\n. @mathieudutour It's definitely a feature that's been requested a couple times and I can see the value. I wonder if this can be accomplished without the wrapper, like Radium, the class definition , etc... Perhaps it could be accomplished with raw-loader. \nI'll merge the notes in a bit, I gotta do it by hand and clean the lint up.\n. @mathieudutour So using this syntax, or at least separate slide syntax might fix the Appear issue. In a nutshell, we want to pass the slide index down via context. We have two options.\n1. Upgrade to 0.14 beta, and use parent based context\n2. Use separate slide syntax, where the slide becomes the owner of Appear and allows for us to pass the index down via context.\nThoughts?\n. btw, I would probably pull the tweenState logic right into the slide component, as CSS transitions are jank city.\n. Option 3, confirmed working:\nAdd fid prop to any Appear component, use to resolve duplicates caused by presentation mode.\n. Ok I'm going to close this one because I'm going to do it a bit differently. The new context setup in 0.14 should allow for external slides.\n. Technically, they are two instances of the same slide, but the embedded component is using component local state. Not sure if it would be possible or worth it to try to sync the two.\n. If you look at the interactive component, the click count variable is stored in the component local state via setState. So each new instance of that component, for example in presenter mode or overview,  or after mount/unmount, will have its own instance specific internal state. You could sync them up if you wanted to, by storing that data in a flux store and pushing the data to the other window in the localStorage callbacks.\n. Fixed here d5f6e3c2f21402f09116beb9e4fb802f39e59fc8, but I'd like a better solution moving forward\n. So those slides are real slides, and with that, are actually clickable. So clicking won't happen, but what do you think about hitting enter to exit?\n. Overview mode sucks right now. For 1.0.0, lets do a scrollable grid of slides that are clickable. \n. Fixed on master\n. How did I not see this... lol. Awesome dude. That whole setup isn't really the React way, but there really isn't a React way to do this feature, at least until 0.14 is out of beta.\n. Hell yeah it would be.\n. Closing in favor of specific issues\n. Oh thats a weird one, good catch\n. Fixed, thanks\n. Would anyone else use this?\n. I'll look into this, but the reason I use Heading tags instead of free form HTML is to provide that context. For this to work I would have to parse the markdown and generate Spectacle tags based upon the syntax\n. @bebraw great find, going to look into this\n. @ryan-roemer that's how I invision the implementation would look like. \n. Whoah that looks great\n. Totally\n. Should marked just be dumped into the presentation folder like this?\n. I am refactoring the webpack config so that this will be easier to do without overriding imports\n. Wouldn't you want to deploy the built/dist version to EC2 rather than running it off of a dev server? In the event that you actually do, I use hjs-webpack for the webpack config, and you can change the port using these options https://github.com/henrikjoreteg/hjs-webpack#devserver-optional-object\n. Dude that's rad! Any chance I can see i?\n. Sure, ping me at ken.wheeler@formidablelabs.com\n. Can I see a code example @emcenrue ?\n. You can just put a break tag in if you want. It still accepts any regular HTML you want to throw at it\n. deploy won't include build moving forward so it won't auto run\n. I'm switching away from hjs-webpack in the very near future\n. Closing as I'm refactoring the webpack config\n. Closing as I'm refactoring the webpack config\n. Good call\n. Done\n. @suevalov What isn't working? I just fired up my FF with master and didn't see a problem.\n. What code is it erroring on?\n. Whats line 160?\n. I have not been able to reproduce in FF. Do you know the line in Spectacle that this originates from?\n. Any news on this? Closing, will reopen pending more details.\n. cc @ryan-roemer as I prep for 1.0.0 release, this is a big one I want to solve. You had mentioned being able to hop set by set, like in Reveal. Is there an ideal way that this would work?\n. Closing this because 1. There is very specific dom reference in this lib that will have a bad time on the server and 2. It is designed to be built and hosted as a static SPA.\n. would this initiate on load? start button in presenter mode?\n. Going to bundle this with #61 \n. I'm not sure what you mean?\n. And you want this in presentation mode?\n. So implementation wise, you would want a slide preview as the selectable tile in the dropdown right?\n. Closing this in favor of the Overview mode overhaul\n. I\"m going to group this with #65 \n. Its caused by the TransitionGroup not being able to keep up. Would you prefer to have this flagged as wontfix and you can switch fast, or have it flagged as bug and I can add a conditional so that the next slide won't enter if you're already animating?\n. Maybe a dot based slide count indicator isn't a good fit for that use case? \n. Thats a great looking preso. Also, I see what you mean. My first thought would be to adjust the css to make the pac's smaller. Then again, you could just use the progress bar across the bottom too. I've run into this problem with carousels with dot indicators, and I'm not sure I have a great solution. You can always drop down to two rows, but that looks a little iffy.\n. I suppose it makes sense to make it go to two rows if need be, rather than just overflowing, which renders it unusable.\n. Closing for now, fixing progress indicators in the grouping/sectioning feature. Sure thing\n. done\n. I think I'll test with latest and then hard pin to it. Thanks for finding this! I'll have an update out soon.\n. thanks @luisrudge !\n. Pinned on master. I'll update to the new API when it 1.0's\n. Not including the notes right now, but I'll flag as a feature request\n. @lanmaster53 scheduled and prioritized. expect it in the near future\n. cc @ryan-roemer This should be helpful, want it in the next release?\n. Thanks for the PR! Sorry it took so long!\n. We were actually talking about making the highlighter a bit more interchangeable. Let me give it a try and see what I can come up with.\n. @bebraw what about just including prism.js and calling highlightElement on mount?\n. Done\n. Awesome, thanks so much!\n. Can you do that one separately\n. Done!. Thanks!\n. Yeah that would be awesome. I mean, you can embed now, but if you wanted to make it super easy, do like <Tweet id=\"\"/> or <Tweets user=\"ken_wheeler\"/>\n. I'm gonna go ahead and close this one. It's the sort of thing someone can just add to a slide and I'm not sure it should be in core\n. Closing pending pull of #90 \n. Awesome, I'm going to try and find and fix any errors, and merge when both of them are officially released.\n. Closing, opening a migration to 0.14 ticket now that it's been released\n. Would love a PR for this stuff\n. Working on it. Git clone seemed like the best way to go about it, because you'll inevitably want to edit the theme, but when I upgrade for 0.14 I'll likely separate the core modules as npm installable and then get a generator set up for the rest.\n. @kevinsimper Thats awesome! We're working on making it clearer moving forward and removing even more friction to getting started.\n. https://github.com/FormidableLabs/spectacle/issues/27 @kevinsimper \n. Yeah that'd be helpful, maybe use mouse movement to trigger the opacity on it, have the screen toggle fixed position in the corner\n. @zpao if you're on master, hovering in the bottom right corner brings the button up. 1.0.0 release w/ docs to this effect is forthcoming.\n. @jjt Awesome! let me know when its good to go\n. @jjt I'll add that stuff and then get this merged\n. @jjt I'm getting the 0.14 conversion PR in today, after that did you want to update to 0.14 compat or do you want me to during the merge?\n. Ok @jjt I have this all set locally, just messing around with the slide design & documentation. Merging soon.\n. @pedrottimark @knowbody what do you guys think about factoring hjs webpack out after this is merged. Moving to a react-transform based build?\n. So, the didLeave errors are fixed and releasing soon https://github.com/facebook/react/issues/4876\n. Closing via dep update in the 0.14 branch, thank you\n. Closing, pending merge of #90 \n. Getting #90 in, fixing some small stuff prior, should fix this\n. Thanks so much\n. From an initial inspection, it looks like the thats coming from the routing hash change. Does anyone see anything else there that could be the culprit?\n. I have the 0.14 update branch coming in probably today, so after thats in I'll see if I can isolate and fix this issue.\n. @kevinsimper have you built using the production flag?\n. I would assume it probably has something to do with hash url navigation? I'll look into it.\n. Good catch, can you PR this after I merge the 0.14 PR? I just figured out the last bug on that one, so its going in today\n. you found it , you get the credit dude :)\n. it should\n. They should\n. It should\n. Noted\n. I'll ping you back channel tomorrow about assets\n. Fixed on master\n. Already noted \n. #56 , thanks though\n. react-motion has no onEnd listener, so canning this for now\n. Thanks for confirming, closing this out\n. Thank you sir!\n. What about a higher order component via decorator?\n```\nimport Base from \"./base\";\n@Base\n@Radium\nclass Link extends React.COmponent {\n  render() {\n    return (\n      // Base catches original props, and passes them and a new prop that's a function getStyles\n      \n        {this.props.children}\n      \n    );\n  }\n}\nLink.propTypes = {\n  children: PropTypes.node,\n  href: PropTypes.string,\n  style: PropTypes.object\n};\n.\nexport default function Base(component) {\n    return class Base extends React.Component {\n        getStyles() {\n        .... style resolution logic\n        }\n        render() {\n            return cloneElement(component, Object.assign({this.props, {getStyles: this.getStyles.bind(this)}});\n        }\n    }\n}\n```\n. So I ended up using it as a util function in the latest edits. If you want to take a crack at a cleaner style API, please do.\n. Ok so everything looks pretty good, except for build. Build should wrap everything up into dist. HTML & images included. @knowbody \n. Thanks dude\n. I was thinking something like:\n<Replace>\n   <Heading>Hey</Heading>\n   <Heading>Yall</Heading>\n</Replace>\n. ^ where it shows one child at a time in order\n. I'm doing a major refactor at the moment to pull react-router out and replace it with History, once I get everything pushed I'll revisit the Appear PR's and get them merged/updated\n. indeed\n. Closing in favor of extended fragments coming in 3.0. How does this work with nested fits?\n. Can I see how this works?\n. Closing for now as its out of date. Fixed on master\n. For which files?\n. cc @knowbody \n. What file were you editing\n. Fixed on master\n. Fixed now, sorry about that!\n. Should the presenter mode only show it completed? One would think while presenting you would want to see the appears as they appear?\n. It shouldn't show in the next slide\n. Fixed on master\n. Yeah I had something similar where I had a live typing transpiler component and I needed to do it on the crowd facing browser. I wonder how to do this. Maybe serialize all events and pass them through localStorage and fire them on the other side? Thoughts?\n. Yeah that's how I do slide syncing now, maybe setup reverse event delegation where I listen to events on the document and serialize the event and the targets and trigger it. I'll play and see how it goes.\n. I wasn't able to get this working. . What an asburd typo. Thanks!\n. Thanks dude!\n. Or would this interfere with typing while in an interactive slide w/ input?\n. Any thoughts on how to handle that scenario? I could check the event target...\n. @ryan-roemer good call. Updated to check for input.\n. Thanks for finding this! On it.\n. Fixed on master\n. @threeve Thanks so much!\n. Ship it!\n. \n. A PR would be happily accepted. Great catch!\n. closing pending PR\n. Whoah, I'll get this one fixed quick\n. Thanks!\n. Fixing this now\n. Ok, I'm going to try to get 1.0.4 out tonight, can you check again after I push it out? @insin \n. Just republished, thanks again\n. @aickin youre welcome, and its my pleasure\n. Pushed now, i'm dumb. Sorry!\n. Alternatively, use tag naming to access style object keys and pass the values on to generated component tags\n. @ryan-roemer proposing an API for this:\n<Markdown\n    propOverrides={{\n         h1: {\n             fit: true\n         },\n         p: {\n            style: { margin: 20 }\n         }\n    }}\n/>\n^ Using this method would allow us to predefine props to be passed onto supported markdown element. Thoughts?\n. The advantage in my mind is the addition of layout props like fit in as well as style overrides\n. Remark doesn't seem to be nearly as feature rich or extensible. Spectacle's core value is derived from the ability to embed interactive React components into your slideshow. Also, if you work primarily in react, writing your presentation in JSX is also nice. The option to write markdown is there for convenience, but markdown isn't nearly expressive enough for a lot of the interactions that I require in a typical presentation.\n. Aww yeah\n. @ryan-roemer do you have a simple way to reproduce this?\n. Awesome, thanks. just needed something to test against\n. This might be my favorite PR comment of all time\n. Thanks for the heads up!\n. Fixed in the last commit\n. Thanks so much!\n. In full agreement, I'll try to carve time out this weekend\n. I'm partial to the second syntax\n. got a branch?\n. splendid\n. Thanks so much!\n. Awesome idea indeed\n. What would children necessarily do? Are you trying to feed that as renderable source, or as renderable elements?\n. If you want to PR, I'd be more than happy to accept that feature\n. @luisrudge are you seeing this on OSX as well, or just on windows?\n. Wondering if this is a windows specific thing. Can anyone with both env's set up confirm?\n. what do you guys think for the API? A prop on the <Spectacle/> or <Deck/> tags?\n. History is now configurable\n. Thanks!\n. Thanks!\n. Can you post a gist? That error is usually indicative of an error in the imported component.\n. Yeah, its looking for the children themselves, not wrapped children, which is why there is a problem. Let me see if I can set something up to look another level deep if necessary\n. Couldn't you just export an array of slides? It's the external wrapper that causes the problem because Deck is expecting a valid slide component as a direct child.\n. You're amazing \n. Thank you!\n. The reason it's pointed at github is because this pull request is pending https://github.com/mapbox/remark-react/pull/11\n. I definitely want the 2d matrix at some point. That said, it would be cool to do an atom style key map config to support a variety of remotes.\n. Electron style*\n. Closing in favor of a feature discussion regarding keymapping. Fixed, sorry about that.\n. Scaling in spectacle is an interesting challenge. I look at it as adaptive vs responsive design. I think of adaptive design as, the page snaps to a new layout/sizing at certain breakpoints. This is where media queries are helpful. For spectacle however, you want a smooth scaling responsive approach. While this can be generally achieved with clever relative units, it doesn't account for mobile or height. The spectacle scaling system is set up like this:\nYour base content area is 1000px x 700px. If you go below that, in width or height, it begins to scale the content using css transforms. In fact, it takes the min from height vs width and scales to that, so that visual consistency remains. \nThis does present an issue on mobile though. On mobile, there is special logic that width fits the content area and doesn't let it drop below a certain size. This is so that text and context remain legible on phones, providing presentation creators adhere to em/rem units and plan for a responsive preso.\nCheck out this gif here, I devtool'd the content area to be yellow so you can see how it rolls:\n\n. In what context? Where would you listen for the event.\n. Hmm, let me look into this, might be able to use this.context to get you that by extending Slide and adding contextTypes\n. I'm working on updating the core lib to 15, trying to unearth stuff just like this.\n. Got a gist of what you're trying to do so I can verify?\n. Any interest in PR'ing an improved markdown component?\n. Closing because we're switching away from mdast, and moving to markdown-it\n. That would be pretty cool. What would an ideal API look like for you?\n. Right now its tween state based, but I'd love to switch to react motion and expose the transition hooks so that you can make your own. I tried to cover the most requested ones, but yeah depending upon cpu some can get a bit choppy. Most of my presos I turn transitions off and instead have interactive react stuff inside the slides, so it might not be as visible to me personally.\n. Not positive on that. Both are rAF based IIRC. I'd have to check to see what kind of optimizations are included in the motion wrappers.\n. Animation is indeed due for an overhaul and will be probably completely rewritten\n. Added!. Not sure it merits core support, but a cjsx boilerplate would be cool if you want to share it. Its just loaders right?\n. You would set it in the theme\n. Right now we take a hard dep on \"mdast-react\": \"git://github.com/jjt/mdast-react.git#2ea3bcd\", I'd like to move off a repo based dep for this.\nRe: routing using the base URL, in total agreement.\n. I'll look into this.\n. Closing for now, keeping on the table as a separate addon component. Awesome. \n. You would have to pass the props down from the timeline component to that div\n. It doesn't need to be a div but it needs style passed down. Appear works by tweening opacity. So if your TImelineEvent isn't passing down style to its first rendered child, that never happens. So on that div, you could write style={Object.assign({}, yourStyles, this.props.style)} or some equivalent.\n. We are working on a CLI tool much like CRA, but that also includes presentation specific features like remote sync.\n. @jonasws expect it pretty soon. It will likely be based off of https://github.com/FormidableLabs/builder-init/\n. I can add that.\n. This will be easier the new theme API, but not done this way. You can use es6 template strings or import using webpack raw loader\n. \ud83d\udc4d \n. thanks bmats @bmathews \n. I'll check it out. For the Fit text, the lineHeight is important. for non-fitText, it doesn't really matter.\n. @waywaaard the style prop should take precendence here?\nhttps://github.com/FormidableLabs/spectacle/blob/master/src/components/text.js#L77\n. Hmm. are you trying to render it server side or something?\n. Looks like ReactRouterSSR is indeed trying to server render it. Server rendering is not available for spectacle at this time.\n. Right now you can add them in the boilerplate index as shown here: https://github.com/FormidableLabs/spectacle-boilerplate/blob/master/index.html#L7 , and then edit your theme to set primary/secondary fonts https://github.com/FormidableLabs/spectacle/blob/master/src/themes/default/screen.js#L11\n. Absolutely. This is a P1 feature that will be resolved soon.\n. Offline support is possible by using local versions of prism. Thanks so much!\n. Is there a configuration preventing it from working properly? I'm wary to add it to core, but totally open to removing any friction to adding it.\n. You should be able to adjust it at the theme level like you see here: https://github.com/FormidableLabs/spectacle/blob/master/src/themes/default/screen.js#L170-L192\n. you could just extend the current one and pass it explicitly via {...theme, code: {}} or something to that effect.\n. We're planning a ton of improvements to land before the new year, and a better default theme + more theme selection is definitely on that list.\n. Thanks @alexandercbooth ! So spectacle is just react, meaning you can just drop an iframe in. That said, another plus is, you can run interactive content right there on the slide, using Victory for viz and Component Playground to fiddle with it. See an example here: http://reacteurope.surge.sh\n. ahh, you'd have to add whatever you want served to the public path in webpack.\n. Just reverted the commit that borked that, npm start should be all set now\n. Refactoring the theme system in 3.0 which will take this into account. Closing pending merged PR\n. We do that using https://github.com/FormidableLabs/component-playground . That said, this will be built into core in the very near future.\n. Thanks!\n. I can't see it in the screenshot? Although I know what you mean.\n. cc @carlospaelinck\n. not yet, certainly open to suggestions\n. I mean, inline styles are an inevitability for things like fragments and transitions. I was thinking more along the lines of class names on markdown generated components and having a style sheet\n. Probably some kind of PostCSS setup \n. I want to keep the main API external API the same though, like support  and  and  and . Or #H1. \n. This looks pretty great, @carlospaelinck can you check this out?\n. is this in progress or done?\n. Fixed. well done\n. Removed transitionable. @stefvhuynh can you rebase this with master?\n. You could do something like git subtree push --prefix docs origin gh-pages\n. right in the output section of the webpack config. It should be centered by default. If not, you can always add additional styles via the style prop, use Layout/Fit/Fill tags, or just wrap it with regular html like a div with inline styles.. This is great!. We allow custom history to be passed in now, closing in favor of that approach. Whoah thats nuts. How would one go about integration? We've discussed having a tool that converts Jupyter notebooks to slides. Is that sort of similar?. \ud83d\udc4d . you can host the js/css for prism locally instead of from a CDN. Are you including the prism css for that language?. https://github.com/FormidableLabs/spectacle/blob/master/index.html#L14. ah, yeah. I usually name them like mysource.example to prevent that.. Still having this issue? Do you have raw-loader installed?. whats the failure. I'm going to remove prop based styling in favor of style tag/styled-components/glamorous type styling, so Base is going away. Thanks!. The 3.0 release will actually not use SC. Instead I will use glamor, and make it SC compatible. . got rid of it. This is awesome, thank you so much!. @stefvhuynh can you review and merge this too if all good?. This should be resolved upstream with the emotion conversion. This looks great. @stefvhuynh can you check this out, and if its all good pull it in?. Fixed this upstream. Thanks!.. Can you rebase this to use the latest markdown style on master?. LGTM. Yeah, its a 5 problem, not a PR problem. LGTM. What versions are you using? I've been able to go up and down without a problem?. Interesting, it should be getting passed here https://github.com/FormidableLabs/spectacle/blob/master/src/components/manager.js#L365-L385\nGot a gist I can check out?. @ericvicenti yeah wrapping slides has historically been a problem. I should probably get the next version to supply all this with context.. You want to use the bgImage prop on Slide for that. Oh wait, you want the header not on top of it?. Oh cool, PR it to the README. You can add a list-style-type via a style prop. Looking into this, thanks for the detailed report!. Shouldn't mount give you that?. Well done. Can you PR this?. Care to PR with a max height and overflow scroll?. You can override it with a theme\nhttps://github.com/FormidableLabs/spectacle/blob/master/src/themes/default/screen.js#L138-L142. Not atm. You're probably gonna wanna hook into history for that. Marking as feature request. the on-active prop in the other issue should solve this, closing as a dupe. yeah, there isn't a good way around that right now. working through this category of issues, trying to find a good way to not have to recurse too far.. Its in the latest release. There isn't a way right now, but I want to enable this. I need to figure out an API that makes sense.. fixed upstream. Are you still experiencing this on latest?. Thanks!. I'll take a look at that and see what it entails. Might have to abstract some primitives out to make it work. I closed this as a dupe of this other ticket where its proposed to do it with headless chrome, planning on giving that a spin. Would love a PR. When I've had to do it, I've set up a file like:\njs\nexport const slideGroup = [\n   <Slide>...</Slide>,\n   <Slide>...</Slide>\n];\nIs there a different API for this that you think would be cool?. this is fixed with the hasSlideChildren prop. Fixed with this right here https://github.com/FormidableLabs/spectacle-renderer. \ud83d\udc4d . Yeah that will be tough to work around. Closing for now. Do you mean slide changes like navigation, or like slide hot reload edits?. I just gave this a shot and it worked for, any other details you can provide? what you changed, what happened, what you expected to happen? OS? . Let me know if you were able to reproduce, closing for now, but will reopen if necessary. Thats perfect! Thanks so much and congrats on your first PR!. This is probably better configured in spectacle-scripts or spectacle-boilerplate, as this repo isnt a base for authoring presentations. I'll get it updated in those, thanks!. We have transitioned away from radium. OK hold up, got some prollems. I'll send you videos. you can modify the theme thats imported and passed in,  or you can wrap a ListItem component with emotion/styled-components/glamor and add it there. Thanks kitz. Leaving open pending completion of todos. Dude. Amazing.. \ud83d\udc4d \n. Closing as a dupe of #152 , definitely on deck. Updated. We use the <S> tag for that. It inherits from Base so you can do anything you could do on a Text with it.. In the 4.0 release every component should have this functionality. If you notice a specific one doesn't let me know and i'll reopen.. Just fixed with 4.0.2 release. Done. @ryan-roemer it probably just needs a browser defaults reset for heading elements, I'll give it a go. I'll get this updated and released by tomorrow!. nope. Once I push this out, I super recommend running create-react-app presentation-name  --scripts-version spectacle-scripts, and then pasting into there. You'll get a service worker which helps present in bad network conditions if you have to from the web.. @marcysutton just pushed out v4.0.3, both issues should be all set!. Hey, gave this a shot locally and had some issues with sizing and alignment. Further, I think we should chat about how it should work in mobile. Should the dots stack? Perhaps we should default to the progress bar for smaller screens?. Lets do that. That will be tight. Today. Fixed in 4.0.5. Use the Fit and Fill tags. Nice! and sorry \ud83d\ude43. Are you using spectacle-scripts or the boilerplate?. Not at the moment. URLs are pretty coupled to operation right now.. The Deck tag takes a custom history. This should allow you to pass in different histories more suited for the server.. Thanks dude!. Closing in favor of #476, where we'll likely make the key map override-able.. I would love these updates!. Whats the ideal API here? Like a config on Deck that allows overrides by event key?. Whoah this is sick. Hmm. You might have to put your provider inside the slide. Other than that, not seeing a clear fix for this atm. We'll be migrating to use the new context API, so in the future this conflict wont exist.. I'm not sure I understand this request? Do you mean like when you press option-o in spectacle?. Does this happen in prod as well as dev?. is this good to go?. Just had to find some time to manually test it. \ud83d\udcaf. This will go away in the near future. You would have to either update the theme, or use the Markdown tag. Deck takes a configurable history prop that you could use to override it. There is an Anim component now that should suffice. That's currently not supported. Order is serial not parallel. Maybe wrap in a common parent?. If thats a heading, its a block level element, you would have to change it to inline block or set the justification to left. Right now, yes. Moving forward, hopefully not.. Probably overriding the CSS and doing an absolutely positioned video at full width/height. Closing for inactivity, will reopen if object assign doesn't work. @kitten is this good to go?. Can you update the snapshots?. Whoops, looks like lint too. Can you update the snapshots?. Can someone provide a repo that demonstrates this issue so that I can investigate further?. Does using the hasSlideChildren prop, when using the new component work for you?. @kitten I fully support that refactor, but does that solve this particular issue?. been meaning to do this. this is great.\n. We should probably clear the flux stores when going into these modes. Sometime you have to hit the right arrow double as many times to get the fragments to start appearing.\n. We shouldn't do this. Open up the presentation in regular mode and scale to mobile size, you'll see what I mean.\n. I'll do it. I think the issue is that they are being indexed in flux by their internal react ID, which is different in the modes. If I can ID them by slide + order of appearance it should match up.\n. In the current presenter mode, on desktop at least, it looks ok. Mobile is questionable, but generally useable. I see the difficulty for overview though, because you can't really flexbox that layout.\n. definitely been meaning to get this in too. good stuff.\n. This is a tricky one. Debating enforcing a ref on fragments to help with non instance based identification. Thoughts?\n. Ok so requiring a keying prop works magically. But requiring a key sucks, so I'm going to see if I can find any way of doing that without requiring the user to add a key.\n. What do you mean?\n. switch to presenter mode, navigate fragments and switch back\n. Indeed it is. But with the new functionality which makes switching back and forth a lot easier I can see the bug being more visible.\n. Why this change?\n. Typo?\n. This value can be a hash string\n. why is this changed? This messes up slide transition direction. @knowbody \n. You'll have to get that slide from elsewhere. location perhaps?\n. it looks like slide is on context, so if you add slide to contextTypes you can reference this.context.slide\n. Ok this is a hoot. With 0.14, you have to add children: React.Children.toArray(child.props.children) here for it to work. Otherwise, TransitionGroup remounts. I have no idea why.\n. why retrun\n. the font weights should be comma separated like 300,700. All the regular text is bold now.\n. Awesome catch @ryan-roemer , fixed here a32123c36ee9f47d6e7fbd61c3f95820d6ee43b8 \nDoes it make sense to build a Spectacle builder archetype for core too? Or just for the boilerplate?\n. I didn't fully review yet. We are starting work on a mobile presenter remote app, and I want the person tasked to have a look too. good catch.. THIS TEXT IS UNFIT. Yes, but i'll code defensively against it anyway\n. I thought it might be helpful for debugging on the user side, but you're right, should probably just remove all that.. ",
    "tikotzky": "Thank you for the awesome lib!\n. I updated the PR\n. Thanks!\n. ",
    "ryan-roemer": "@kenwheeler -- Does this print to PDF as a direct analogue to the presentation itself? (meaning background images, background colors, etc.)\nIf so, maybe also consider an export to printable-paper-friendly PDF?\n. @kenwheeler -- I've got a working POC using just a raw git+https dependency on spectacle that builds at this snapshot https://github.com/ryan-roemer/surge2015/tree/533937a17eea75c2ae092fe019ca6d6c83b3bd2b with your straight up demo deck.\nI think this ticket really isn't that far off, and it's really just a matter of perhaps removing deps from this repo and making them required in the upstream implementing repo (or whatever the official replacement for peerDependencies is now that they're deprecated).\nAt any rate, hope this helps!\n. Cool idea! Could maybe even just import https://github.com/acdlite/react-remarkable directly as an \"out of band\" solution (or something like it).\n. Ah, sounds like I need to leave it to the experts!\n\n. In case it helps, how I'd like to use markdown when authoring would be scenarios of mixed / pure MD usage within a slide:\n```\n\n\n    ## Hello MD Heading\n* One\n* Two \n* Three\n\n\n\n\n\n    React Heading\n  \n\n    * One\n    * Two \n    * Three\n  \n\n```\n. @kenwheeler -- Basically, just like reveal for http://cascadiajs2014.formidablelabs.com/#/title\n- Esc: Overview and arrows navigate grid\n- Up / Down / Left / Right normally navigate grid\n- Space / Shift Space: Replace normal \"forward\" / \"back\" capability going through slides in actual order.\n. @jrios thanks for the work!\n@kenwheeler I don't have editable code areas, so I'm not affected. But change makes sense. Btw, here's what I do for custom events for my handheld remote: https://github.com/ryan-roemer/surge2015/blob/master/presentation/deck.jsx#L44-L64\n``` js\n// Custom overrides for the deck\nclass CustomDeck extends Deck {\n  _handleKeyPress(e) {\n    // Call base method.\n    super._handleKeyPress(e);\n// Add some extra key bindings for Satechi remote.\n/*globals window:false*/\nconst event = window.event || e;\n\nconst SATECHI_PREV_KEY = 38;\nif (event.keyCode === SATECHI_PREV_KEY) {\n  this._prevSlide();\n}\n\nconst SATECHI_NEXT_KEY = 40;\nif (event.keyCode === SATECHI_NEXT_KEY) {\n  this._nextSlide();\n}\n\n}\n}\n```\n. @kenwheeler -- LGTM! (But haven't tried it out.. Let me know if I should!)\n. In the meantime while @kenwheeler works out the official path, I've got an example repo with an NPM install of spectacle and a custom theme at: https://github.com/ryan-roemer/surge2015\nHope that helps!\n. @jjt -- Love it!!!\n. @kenwheeler -- For interactive code editing, I think the best bet is disable everything / almost everything (but escape) for navigation while focused and in the demo... For our other training stuff this is easier because we have a modal pop, so state management is separate from the slide deck (that deck / system is reveal-based).\nHTH!\n. @knowbody -- The ambiguity with the event listener default on ctrl-p is if someone wants http://localhost:3000/#/?export&print instead.\n. LGTM. But, I'm fine with the first-class React component overrides instead if that makes more sense from an API perspective...\n@jjt -- Any thoughts?\n. <Markdown>\n{`\nHere's some code: \\`a > b ? 'bar' : \"foo\"\\`\n`}\n</Markdown>\nProduces:\nHere's some code: a &gt; b ? &apos;bar&apos; : &quot;foo&quot;\n. And if we could also make the resulting history scheme \"pluggable\" for my case of already having a react router in the middle of a route when I hit a spectacle deck that would be super-awesome!!!\n. @kenwheeler -- Where did we end up with the \"2d matrix\" idea of slides like reveal does it? (If we're still toying with that may want up/down to be saved for just within a column)\n. It is probably best to leave up / down for the 2-d grid / \"slide sets\" feature if we still want to pursue that per https://github.com/FormidableLabs/spectacle/issues/57 for competitiveness with Reveal.js and other presentation frameworks that support 2-d grids...\n.  I think this needs updates to the ignore files as well. Gitignore and npmignore to be consistent with the existing source and lib directories\n. @ebrillhart -- One nit, after which LGTM. No re-review needed.\n. Need Node 4.3+ update to .travis.yml\nSuggest switching to:\nyml\n  - 4\n  - 5\n  - 6. @jonasws -- Thanks so much for throwing your hat in the ring! If you've got some bandwidth, we'd love to get your help to kick this one into shippable shape (either via a from scratch PR or extending this one).\nI'm happy to review / kick the tires anywhere along the way (disclaimer I absolutely loved Reveal.js having this feature from back in the day, so I excited to see it in spectacle) and I can rope in @kenwheeler , @stefvhuynh , and co for nitty-gritty technical feedback when needed.. @jonasws -- Yep! The existing PR has navigation support that mostly brings in the reveal conventions.\nI'm not sure if we're exactly following the Reveal.js shortcuts (https://github.com/hakimel/reveal.js/wiki/Keyboard-Shortcuts), so if you'd like to propose a different set of keys that (1) are sensible for legacy 1-d sequence, and (2) enable good 2-d slide navigation and overview slide jumping, go for it!. @denysdovhan -- Can brunch just \"include\" them manually via a config? I'm pretty sure webpack can do that...\n@philpl -- Is the order of those CSS files coming in significant?. @philpl -- The emotion-based solution does seem a little cleaner to me.  (We're still in for the import problem of the two CSS files at the top though, so not a solution to the issue here -- does perhaps make it easier to external import in / resolve them maybe if brunch works like webpack alias/externals do). Please ticket out if you like the idea!. I'm not able to reproduce the failure:\n```sh\n$ yarn install\nyarn install v0.24.4\n[1/4] \ud83d\udd0d  Resolving packages...\n[2/4] \ud83d\ude9a  Fetching packages...\n[3/4] \ud83d\udd17  Linking dependencies...\nwarning \"react-in-markdown@0.0.2\" has incorrect peer dependency \"markdown-to-react-components@0.2.1\".\n[4/4] \ud83d\udcc3  Building fresh packages...\nwarning Your current version of Yarn is out of date. The latest version is \"0.24.5\" while you're on \"0.24.4\".\ninfo To upgrade, run the following command:\n$ npm upgrade --global yarn\n\u2728  Done in 33.17s.\n$ node --version && npm --version && yarn --version\nv4.6.2\n4.1.2\n0.24.4\n```\n@Schoonology -- can you give us full output from a fresh git clone of the boilerplate on to the install?\nBasically:\nsh\n$ node --version && npm --version && yarn --version\n$ git clone https://github.com/FormidableLabs/spectacle-boilerplate.git\n$ cd spectacle-boilerplate\n$ yarn install\nThanks!. All victory repos now have a change merged to master (but not yet published) that will remove package.json:scripts.postinstall entirely on npm publication which works around whatever the underlying behavior bug in npm is. (tl;dr -- this entire issue should never come up if npm actually worked correctly).\nWatch for next version publications of victory-core and check to verify that https://unpkg.com/victory-core/package.json no longer contains a postinstall, then upgrade to that and that should completely fix this issue.. Implemented in #348 . @ebertmi  -- Going to get a chance to finish the todos and drive this one home?\n@sglyon -- If @ebertmi is swamped right now, maybe you could create a new branch from this one and polish off the todos.\nAlso, this branch needs a catch up to master...\nThanks folks!!!. @ebello -- Haha, indeed I did! ( grr... github user autocomplete ) \ud83d\ude1b . Thanks!. @AndersDJohnson -- Haha, github interpolated that. I used my admin superpowers to fix @kenwheeler 's comment. (And it's the https://github.com/FormidableLabs/spectacle#s-base tag he's referring to).. @kenwheeler -- Is there something specific about fit that won't work with h1-h6 and if not, how much work would it be to keep the h1-h6 originally specified when fit is applied? Thanks!. @kenwheeler -- unrelated question: are those data-radium fields supposed to still be there?. @interglobalmedia -- I have no idea what's up with the rickroll video. I'm guessing it's something to do with surge.sh on their side. Feel free to open up a separate issue with your repo + deploy steps you're taking and I'll see if I can reproduce the same thing on my end and dig in.\nI dug into that ancient tar thing and it's from the surge package:\n```\nsurge@latest:\n  version \"0.18.0\"\n  resolved \"https://registry.yarnpkg.com/surge/-/surge-0.18.0.tgz#1c4378c7a5204b96f45eeaf29bfa117a19995ce9\"\n  dependencies:\n    du \"0.1.0\"\n    fstream-ignore \"1.0.2\"\n    is-domain \"0.0.1\"\n    minimist \"1.1.1\"\n    moniker \"0.1.2\"\n    netrc \"0.1.4\"\n    progress \"1.1.8\"\n    prompt \"~0.2.14\"\n    read \"1.0.5\"\n    request \"2.40.0\"\n    split \"0.3.1\"\n    surge-ignore \"0.2.0\"\n    tar \"1.0.0\"\n    tar.gz \"0.1.1\"\n    url-parse-as-address \"1.0.0\"\ntar.gz@0.1.1:\n  version \"0.1.1\"\n  resolved \"https://registry.yarnpkg.com/tar.gz/-/tar.gz-0.1.1.tgz#e914ce23b2fdc627575fbdb3485a5b228ed59947\"\n  dependencies:\n    commander \"1.1.x\"\n    fstream \"0.1.x\"\n    tar \"0.1.x\"\ntar@0.1.x:\n  version \"0.1.20\"\n  resolved \"https://registry.yarnpkg.com/tar/-/tar-0.1.20.tgz#42940bae5b5f22c74483699126f9f3f27449cb13\"\n  dependencies:\n    block-stream \"*\"\n    fstream \"~0.1.28\"\n    inherits \"2\"\n```\nWhich still has the tar.gz package dep at 0.1.1. https://github.com/sintaxi/surge/blob/master/package.json#L19\nUnfortunately, that project is deprecated https://github.com/alanhoff/node-tar.gz which means that's why tar@0.1.x is there and why it won't get updated. There is already an upstream issue on the surge repo at https://github.com/sintaxi/surge/issues/293 so I'm going to slightly adjust your original description with the action item of \"update surge once 293 is resolved\".\nThanks for reporting the error on our side -- we definitely want to keep on top of these things!. spectacle-code-slide needs to produce a UMD build that you can then <script tag include into a one-page deck. Suggest opening an upsteam issue / PR at https://github.com/thejameskyle/spectacle-code-slide/pulls. Ah, yeah -- looks like this project https://github.com/tt-acm/Spectacles.WebViewer. Thanks @jbovenschen !. It looks like this landed in spectacle-scripts a while ago https://github.com/FormidableLabs/spectacle-scripts/pull/2 but we maybe forgot to publish it to npm.\nCan someone verify / try things off of github master and report back here? Thanks!. I would assume you need the raw-loader! like MarkdownSlides needs.\nIf you get a chance, can you try:\njs\n<Markdown source={require(\"raw-loader!../assets/stuff.md\")}></Markdown>\nand\njs\n<Markdown>{require(\"raw-loader!../assets/stuff.md\")}</Markdown>\nreport back if either work for you? Thanks!. This is a total guess, but IIRC, you can do something like require(\"!raw-loader!../assets/stuff.md\") to make the raw-loader win over everything else?\n(That might be 100% wrong, but worth a character of testing :P ). @ryantuck -- Can you try require(\"!raw-loader!../assets/stuff.md\") since you've already got it downloaded and ready? Thanks!. Yeah, as I (very poorly) understand it, the leading ! says \"whatever comes next WINS\" or something :). For documentation sake, here is the part of the webpack config causing problems (it's higher priority than raw-loader without the !raw-loader hack): https://github.com/FormidableLabs/spectacle-boilerplate/blob/master/webpack.config.js#L24-L27. Thanks!. Spectacle doesn't have any @babel/* (babel7/next) dependencies in \nI installed just fine on node v8.4.0 and npm v5.3.0 with output: \n```\n$ npm install --save spectacle@4.0.5\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN spectacle@4.0.5 requires a peer of react@^16.0.0 but none was installed.\nnpm WARN spectacle@4.0.5 requires a peer of react-dom@^16.0.0 but none was installed.\nnpm WARN react-redux@5.0.7 requires a peer of react@^0.14.0 || ^15.0.0-0 || ^16.0.0-0 but none was installed.\nnpm WARN react-transition-group@1.2.1 requires a peer of react@^15.0.0 || ^16.0.0 but none was installed.\nnpm WARN react-transition-group@1.2.1 requires a peer of react-dom@^15.0.0 || ^16.0.0 but none was installed.\nnpm WARN react-typography@0.16.13 requires a peer of react@^0.14.0 || ^15.0.0 || ^16.0.0 but none was installed.\nnpm WARN TEMP_SPECTACLE@1.0.0 No description\nnpm WARN TEMP_SPECTACLE@1.0.0 No repository field.\n\nspectacle@4.0.5\nadded 110 packages in 307.319s\n```\n\nJust guessing here, but do you have anything else in your project's package.json besides spectacle? That may be the cause.\nIf you think there's a scenario that spectacle itself is legitimately causing, then please create a minimal repository with install + error reproduction steps to create because for here, I just did an\n$ npm init\n$ npm install --save spectacle@4.0.5\nand that worked just fine, so I suspect something more complicated is at play.\nGood luck!. No activity so closing.. Thanks for the PR -- we've switched to env w/ babel7 in #493 . Hi @sodoku -- Thanks for the PR. Currently this is failing CI -- can you read through our PR submission guidelines + practices to get this PR in shape? https://github.com/FormidableLabs/spectacle/blob/master/CONTRIBUTING.md#before-submitting-a-pr\nThanks!. As of spectacle@4.2.0 we've updated to babel7 and on viewing https://unpkg.com/spectacle@4.2.0/lib I don't see any runtime strings anywhere.. @kenwheeler can comment more, but Spectacle is usually targeted at making a presentation deck and not as part of something else. So we have \"the kitchen sink\" of things like:\n\nVictory: A visualization library (bringing in d3)\nReact Live: For live code samples\n... and lots of other stuff.\n\nOne thing we can do, is also export es/ for our code with ESM (import/export). Then, if you are building with something like webpack or rollup, it should DCE anything unused.\nI've filed #491 to provide this infrastructure feature. Once that lands, will that take care of all your use cases?. @hellochar -- Take a look at https://github.com/FormidableLabs/spectacle/pull/493 . If you're using modern webpack we now have an es/ ESM output directory that should get picked up by webpack4 to efficiently include only the files you really need.. Released in https://github.com/FormidableLabs/spectacle/releases/tag/v4.2.0. Released in spectacle@4.2.1. Thanks for opening a PR!\nI'll let @kenwheeler opine as to the substantive PR when he has a moment, but on the tests front master build is fully green, both in Travis master and on my local machine from a fresh install.\nAll of the failures I see for one of the travis builds here are for the autoplay stuff you've added failing because of mismatch with the fixtures -- https://travis-ci.org/FormidableLabs/spectacle/jobs/360482085 . I'm guessing a jest snapshot update is in order.\nAs a helpful tip, all code needs to pass:\nsh\n$ yarn run build\n$ yarn run check\n... which is what travis is doing...\nThanks!. @nuragic -- Can you create a gist of the entire terminal log from a fresh master clone + yarn install (since we're using a yarn.lock). Then echo your node -v and yarn -v into the terminal, then run the tests. And paste that all in a gist so I can take a look. Thanks!. Can you try polyfilling Object.assign and see if that helps.\nSee, e.g. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill or https://www.npmjs.com/package/object.assign. @knitcodemonkey -- Looks great! Feel free to merge once we get green CI.. @samwhale -- We have a broader discussion of Prism imports (and conflicts with react-live) going on at: https://github.com/FormidableLabs/spectacle/issues/546\nI suspect that ticket subsumes this specific work. Perhaps we can add a tag to collect all the prism import related issues + PRs and tackle them all at once?\n/cc @kenwheeler @kitten . Have these files (like the readme) been run through prettier? (We\u2019ve got a lot of unrelated formatting changes \u2014 we can probably roll with it here for an otherwise small pr, but we typically like to keep prs focused on \u201cjust one thing\u201d). Thanks @sam-whale -- we'll fix this after this PR in https://github.com/FormidableLabs/spectacle/pull/532. As expected, failed with:\n```\n\nspectacle@4.2.3 prettier /home/travis/build/FormidableLabs/spectacle\nprettier \"*/.{js,json,css,md}\" \"--list-different\"\ndocs/basic-concepts.md\ndocs/extensions.md\ndocs/getting-started.md\ndocs/props.md\ndocs/tag-api.md\nexample/src/index.js\nindex.js\nREADME.md\nserver.js\nsrc/components/anim.js\nsrc/components/appear.js\nsrc/components/autoplay-controls.js\nsrc/components/block-quote.js\nsrc/components/block-quote.test.js\nsrc/components/cite.js\nsrc/components/clock.js\nsrc/components/code-pane.js\nsrc/components/code-pane.test.js\nsrc/components/code.js\nsrc/components/code.test.js\nsrc/components/component-playground.js\nsrc/components/component-playground.test.js\nsrc/components/controls.js\nsrc/components/controls.test.js\nsrc/components/deck.js\nsrc/components/export.js\nsrc/components/fullscreen-button.js\nsrc/components/fullscreen.test.js\nsrc/components/go-to-action.js\nsrc/components/go-to-action.test.js\nsrc/components/heading.js\nsrc/components/heading.test.js\nsrc/components/image.js\nsrc/components/layout.js\nsrc/components/layout.test.js\nsrc/components/list-item.test.js\nsrc/components/list.js\nsrc/components/list.test.js\nsrc/components/magic-wrapper.js\nsrc/components/magic.js\nsrc/components/manager.js\nsrc/components/manager.test.js\nsrc/components/markdown-slides.js\nsrc/components/markdown-slides.test.js\nsrc/components/markdown.js\nsrc/components/markdown.test.js\nsrc/components/notes.test.js\nsrc/components/overview.js\nsrc/components/presenter-components.js\nsrc/components/presenter.js\nsrc/components/presenter.test.js\nsrc/components/progress.js\nsrc/components/quote.test.js\nsrc/components/s.js\nsrc/components/s.test.js\nsrc/components/slide-components.js\nsrc/components/slide.js\nsrc/components/slide.test.js\nsrc/components/table-body.js\nsrc/components/table-body.test.js\nsrc/components/table-header-item.test.js\nsrc/components/table-header.js\nsrc/components/table-header.test.js\nsrc/components/table-item.test.js\nsrc/components/table-row.js\nsrc/components/table-row.test.js\nsrc/components/table.test.js\nsrc/components/text.js\nsrc/components/time-components.js\nsrc/components/time.js\nsrc/components/timer.js\nsrc/components/typeface.js\nsrc/components/typeface.test.js\nsrc/one-page.js\nsrc/reducers/fragment.js\nsrc/reducers/route.js\nsrc/reducers/style.js\nsrc/sync/mocks/index.js\nsrc/sync/index.js\nsrc/themes/default/print.js\nsrc/themes/default/prism.dark.js\nsrc/themes/default/prism.light.js\nsrc/themes/default/screen.js\nsrc/utils/base.js\nsrc/utils/context.js\nsrc/utils/controller.js\nsrc/utils/fullscreen.js\nsrc/utils/magic.js\nsrc/utils/preloader.js\nsrc/utils/slides.js\nsrc/utils/slides.test.js\nsrc/utils/step-counter.js\nsrc/utils/types.js\nwebpack.config.js\nwebpack.config.production.js\nwebpack.config.umd.js\nwebpack.config.umd.production.js\n```\n\nThen noticed that node10 on travis failed because of upath having a curious >4 <9 node dep. Regen'ed yarn.lock which picks up a fix, but then got new lint errors for react deprecating stuff.\nPlan is to \"go forward\" and fix lint too.. Introduced in https://github.com/FormidableLabs/spectacle/pull/495. One page spectacle is already hitting this (which uses current off unpkg). For example, https://rawgit.com/seanode/welcome/meetup/may-2018/welcome.html#/1 gives us:\n\nAnd even master in this repo hits it: https://rawgit.com/FormidableLabs/spectacle/master/one-page.html. Reverted websocket integration in https://github.com/FormidableLabs/spectacle/pull/543\nhttps://rawgit.com/seanode/welcome/meetup/may-2018/welcome.html#/1 and https://rawgit.com/FormidableLabs/spectacle/master/one-page.html both work now.... @vpicone -- I've just merged in a massive (but superficial) PR actually applying prettier to all our files, which produces a merge conflict here. Can you rebase / merge in current master to catch up here?\nThanks! We've got folks who will be verifying this after that.... CI broke because prettier is unhappy. Our postcommit hooks should have fixed things per prettier's demands, so if we can diagnose why that didn't happen here, I'm very interested.\nBut to move us along here, just run:\n$ yarn run prettier-fix\nand commit the result.. We decided to revert the WS stuff in https://rawgit.com/FormidableLabs/spectacle/master/one-page.html instead, so closing here. Thanks so much for the quick stab at fixing things!. @kitten -- Do we even need an implementation in Spectacle or just some verbiage + a link to spectacle-sync in the README here?. Released in spectacle@4.3.1. @sslotsky -- If your deck is in a public repo, can you point me to it? If not, can you create a minimal repository that exposes the issue?\nWe should be able to force a resolution correctly, but I need to see the full tree + build configuration to better understand what's going on.\nLooking at your links:\n\nhttps://github.com/PrismJS/prism/blob/gh-pages/components/index.js -- looks Node.js specific and mucks directly with require.cache which gives me the heeby geebies.\n\n@kenwheeler @kitten -- could we use either of these? Would we want to?\n\nhttps://prismjs.com/plugins/autoloader/\nhttps://prismjs.com/download.html#themes=prism&languages=markup+css+clike+javascript \n\nOnce we have a clearer reproduction of the error, we can all chat out best path forward.... @mAAdhaTTah @Golmote -- Thanks. We do use babel and everything starts at src with ESM, so looks like https://github.com/mAAdhaTTah/babel-plugin-prismjs may be an option. And we can integrate with all of react-live, component-playground and spectacle if needed.\n@sslotsky -- I'm slammed today, but having a short repository is invaluable to us. We'll dig into this, verify the error, then assess in code what's actually going wrong, and then most likely work in some of the solutions mentioned above.. Error is verified. Will try to find time this week to dig in more, but I'm on vacation half the week, so may be after.... If someone wants to throw up a WIP / POC PR that could potentially work, that may aide our efforts. \nBut if we're changing two projects simultaneously the infrastructure stuff might get complicated -- I'm pretty familiar with this type of situation and we've even written a dev tool lank to assist with the shortcomings of npm link and multi-repo dev.\nSo tl;dr, any work that may help us along is appreciated, but we can probably get it done on our side if we get enough free time in the coming weeks.... @sslotsky -- I haven't worked much in the react-live repo, but a lot of us have. As long as there is a babel step for the SSR stuff, I'm guessing we can get something going.\nThanks for the info -- we'll start there first rather than spectacle itself.. @sslotsky -- It works provided no other packages you add have a prismjs version that is different and that npm flattening properly collapses to only one used prismjs package. If there are 2+ packages in node_modules tree then this temporary bandaid hack won't work.\nBut from spectacles POV only, this is sufficient to tide us by until we get a real solution.. @vadimshvetsov -- As a hopefully helpful clarifying note, no current Formidables are part of the https://github.com/jamiebuilds/spectacle-code-slide project, so we don't have any present relationship with those folks. (Dr. @kenwheeler has sailed on to new pastures to help bring his special blend of code flair and Americanness \ud83d\ude04 ). Suggest verifying against local host for our own demo first w 1. Export to pdf in browser, 2. Using spectacle-renderer\nIf that doesn\u2019t repro the issue, let\u2019s then ask for a full non working sample to verify against. Could we just make this a property on Markdown to allow consumers to override the class if they want?\n. You've got a different check for this same thing at https://github.com/FormidableLabs/spectacle/pull/87/files#diff-2d8f174e85e5217d3672c29687ab543cR12 -- maybe harmonize them?\n. How's about some eslint folks :wink: \n. GLOBAL: eslint-config-defaults uses double quotes. We should revert and get lint turned on for all JS files in this repo. (Can be separate file).\n. @knowbody -- This should be linted as node code, not frontend React code. We should use https://github.com/walmartlabs/eslint-config-defaults/blob/master/configurations/walmart/es5-node.js for node files.\n. As a helpful tip, take a look at how I linted a Spectacle presentation in https://github.com/ryan-roemer/surge2015/blob/master/package.json#L10-L12\nSide note -- the lint may be too unwieldy / complicate this specific PR, so feel free to ticket out + revert the quotes thing and then have this PR just focus on the babel stuff.\nThanks!\n. > oh okay but that should be in the separate PR, right? I'll just make sure that we use double quotes here.\nHaha -- simultaneous messages. Sounds perfect Thanks!\n. Side Note -- this will break windows compatibility. The build:dist is probably OK for breaking, but might be nice to have this still work. Can we just leave no NODE_ENV and have that be defaulted to be development?\n(or, use builder envs ;) )\n. @kenwheeler -- I think just add builder alone to get the extra's like builder envs and builder concurrent and not worry about an archetype since spectacle itself is kind of a \"one-off\".\nThe spectacle-boilerplate could definitely be replaced by an archetype like builder-spectacle now that builder-init has landed.\nThat's my gut intuition, but it may be the case we could add init/ templates and init.js to spectacle itself and just have it all together.\n. Let's get that newline back too \ud83d\ude09 \n. NIT: In this pr or another, let's remove:\njs\n    \"eslint-config-defaults\": \"^9.0.0\",\n. I actually did that twice in the readme. Thanks!. Why did we disable filenames for this file?. How much weight does this add to the bundle seeing that we're including \"everything\"?. It's complaining about src/utils/prismImport.js name of this file, not the imports within the code I believe.. Actually, all the prismjs imported file names abide by the lint rule we have for this repo \ud83d\ude1b . How much is just the prism part if you \"external\" it?. So that's just a ~0.3MB min difference? If so, I'm totally cool with that.... Can we update the spectacle unpkg link to include a major semver range? Here we'll proactively get ahead of things with our anticipated major bump to 4:\n<link href=\"https://unpkg.com/spectacle@^4/lib/themes/default/index.css\" rel=\"stylesheet\" type=\"text/css\">\n...\n    <script src=\"https://unpkg.com/spectacle@^4/dist/spectacle.js\"></script>\n    <script src=\"https://unpkg.com/spectacle@^4/lib/one-page.js\"></script>. NIT: Extra newline?. Let's not permanently destroy localStorage for the other tests.\nsuggest at the top:\n```js\nconst realStorage = window.localStorage;\n// ...\nafterEach((() => {\n  window.localStorage = realStorage;\n});\n``. Actually, ifsetItem()is all you need to override, justsandbox.stub()it.. I'm not totally following. Leavingwindow.localStorage = undefined;as a final state is a potential footgun down the road for unrelated tests that may uselocalStoragefor something innocuous... . If we're super sure of that, then as a protective measure, I suggest a globalbeforeEachthat setswindow.localStorage = undefined;so we discover any kinks immediately in the future.... Let's do that. It's a footgun here and in the existing code, so we'll just take care of both.. Yep -- or maybe moveconst origLocalStorage = window.localStorage;above the firstdescribe, so that you're sure no tests have mucked with things. And you only have to set it once. But your call there -- as you have it already is fine too.... We were publishingdist/bundle.jsand other example deck stuff. this hones it down more, and removesdocsbecause they're not needed for downloads to save space. Currentls`:\nLICENSE\nREADME.md\ndist\nes\nlib\npackage.json\nsrc. Let's also remove package.json. yarn and npm write these in incompatible ways IIRC.. Did we want to mutate the styles object passed into us?. typeof italic? Looks like the wrong variable referenced.\nShouldn't lint catch this?. I'm guessing piggybacking off a separate library's dependency is not a good long term approach and we really need to solve the underlying prismjs version conflict problem discussed in detail in #546 first...\n/cc @kenwheeler @kitten . Are we completely confident relying on the load order of react-live and then piggy-backing here won't break? Including if react-live changes semver under the hood what it does with prism? I'm guessing we can't make that guarantee.... Basically, I don't want to open up new bugs for a hack here when we have a larger overall issue that needs solving \ud83d\ude04 . You need to test for connectionList and then too...\nMaybe:\njs\nif (((((navigator || {}).presentation || {}).receiver || {}).connectionList) {\n(assume set connectionList implies thennable). Do we want all these logs with no way to disable?. Noting function here vs. fat arrow for the one above:  is the this context used in .presentationConnection  and ._goToSlide correctly bound?. A lot of the time, we end up asking bug submitters for:\n\nA public minimal repository that we can git clone\nWith install + error reproduction steps\n\nThis saves us an enormous amount of time from somewhat manual reproductions that can have different dependencies, etc. Put another way, I can't even underestimate how much time a lot of folks have lost trying to reproduce something that the submitter could have had a separate project that much more easily encapsulates the issue...\nI propose that we default to asking for that or a WIP PR with a simple failing regression test. And I think that might be a good thing as a default for all our projects.\n/cc @boygirl . @ebrillhart -- I tend to vote against any pre-commit hooks, as a personal preference. The wait for any commit to succeed adds up as number of files increases and number of things fixes increases. (Maybe because I commit a lot and squash later). Fine to do whatever here, but I'd rather manually fix and have CI / a runnable check I run before final PR-ing fail me.. Let me back up. The problem is that for a lot of repositories we get a report of a bug that looks like it may be a bug, but it isn't reproducible without a lot of work for the maintainers. Things that have cropped up in the past:\n\nBespoke webpack config\nDependencies variants\nWeird other libraries conflicting\nThe bug not actually being a bug and something else being wrong.\n\nFor the maintainers, if something isn't immediately reproducible, that takes our valuable time trying to experiment and guess at how to set up the bug reproduction. That means trading off constrained time from everything else that we could otherwise focus on.\nContrast this with the bug opener. They're actually hitting the bug. They have it! They are in the best, and most easy place to produce a working simulation (or the real repo if open source) for us of something that they can easily confirm is \"the issue\". On average, takes them way less time that us experimenting because they're already hitting the issue. So, the better balance if we have any resource constraints is to place a little more burden on the issue openers than the maintainers so that the maintainers can field more bugs and work on fixing confirmed, reproducible bugs.\nFor jr devs, we most certainly can and should provide extra help with opening a failing WIP PR and/or reproduction. That's a good community investment too. But, I think we can roll in some language for that support while going for the overall goal of having \"immediately reproducible\" bugs that maintainers can easily verify. (It's just a goal -- won't always happen...)\nSo turning back to what we should ask for to meet our goal of \"immediately reproducible\" -- it's whatever does that! Things that should work:\n\nA failing regression test WIP PR\nA minimal repository with install + error reproduction instructions\nA code sandbox! (It has locked deps and is git cloneable, so it essentially is the above \ud83d\ude09 )\n... other things!\n\nHope that helps!. ... and as a final thought -- not everyone has the time to do this / the capacity (for complicated stuff). And that's fine!\nBut, for stuff that does have an immediately reproducible bug, that should influence us on what we fix first -- because it is something we can easily verify is wrong and much more readily fix. So it's not a requirement just a way for the community to help incentivize us to triage it higher priority / fix it sooner \ud83d\ude09 . IIRC we have a tension with how CRA makes assumptions about loaders and spectacle's varying use of raw-loader (sometimes we want raw markdown, sometimes we want it processed). If it works, maybe we can just disable the warning?. WARNING: prismjs has to match whatever is in react-live exactly or horrible things happen. (Also, if any other transitive dep brings prismjs in that also has to match).\nSee, e.g. #546 #558 #516 . Do we want to require 16.7 above? Or can we support anything below that? Ideally all peerDependencies are as permissive as possible to allow folks to use this package that aren't at the latest version if everything is still correct.\nSame for all other deps here.. Love it! Finally an end to all the related -beta issues!. This should be removed. @babel/core is the replacement after 7 when the @babel namespace replaced babel- in all the official Babel project packages.. Should likely be removed too.... ",
    "bebraw": "FYI, I have an implementation at https://github.com/survivejs/frontend-in-2015/commit/31cb3378059829c2804e96a31668090759e2d29f . I'm not sure if that's what was on your mind but it works. Note that Appear is not supported yet. I'll probably wait your version for that.\n. @kenwheeler Are you going to include some kind of Table tags to the lib?\n. @kenwheeler Any idea what happened to this? Are you going to include Table at some point? Need a PR?\n. \ud83d\udc4d  to idea. I guess you would need to rework the implementation, though.\n. FYI markdown-to-react-components produces real React components based on Markdown. I actually found a little bug in it but for the most part it seems better than most of the libraries out there.\n. I thought about this further. If we had SlideSets (#57), we could do something like this:\ndemo.slideset\n```\nDemo Section\n\n\nAwesome\nSection\nMagix\n\n\n> Design is awesome - John Doe\nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell\n---\nTwo\nHeaders\n```\nThis markdownish syntax could then be converted to a SlideSet through a Webpack loader. You would do something like import slideSet from './demo.slideset';. The loader would then parse the custom syntax and convert it to React elements spectacle expects.\nThe only potential problem is that if you author a SlideSet this way, it doesn't allow a lot of customization. If you need something totally custom, you still need to write JSX. Perhaps there could be an import statement to work around this? You would do something like require('./interactive.jsx') within our syntax. Then we would resolve that through Webpack as usual.\nI think something like this would make it more fun to author slides with spectacle as you could focus on the slide contents instead of JSX, transitions and such. Ideally you should still have some level of control over transitions, though, but I believe it may be better to deal with that through configuration by default. We can also do custom syntax to match JSX perfectly.\n. @ryan-roemer I would be happy with that esp. if we get #57. I feel that would help a lot with big presentations. :+1:\n. Actually probably what you want to do is to skip http or https altogether and let browser resolve it. Likely just // will do the trick.\n. Since I created the issue I've learned it's actually far better to deal with this at OS level (~/.gitignore). So it might be safe to close this unless you want to implement this for some particular reason.\n. Good question. Start button would likely make sense. Might as well have \"stop\" as well (change button state) so you can take a break. :+1:\n. > For an attribute in the JSX, your comment in #67 about #57 causes me to ask: if you could also set the intended length for sections (slide subsets) of a presentation, whether you have any brainstorm about a visual indicator in Presenter mode to see if you are approximately on your intended pace?\nThat's a great idea! Perhaps the setting belongs to JSX level indeed. :+1:\nOriginally I had just generic presentation time in mind since usually you have a fixed amount of time. Even then, it's fixed to certain actual time (i.e., 14:00) rather than length. Anyway, that's semantics.\nThe timing point you made is interesting and I had not thought about that. I feel it's important, though, as this way you have more control during presentation and can slow/speed up as needed. Maybe it takes some experimentation to find a good solution for this.\n. @pedrottimark I don't do a lot of presentations sadly. Just being able to set the end time at the beginning of a presentation for the countdown would be enough for my simple purposes. :+1:\n. Yeah, that was the point. Thanks. :+1:\n. That's where it would be the most useful, yes.\nThe idea would be to provide means to jump within the presentation fast without forcing a refresh or such.\n. Even an old fashioned dropdown with slide headers would be great. Of course how to get that meta to to the dropdown is another story...\nMVP would be an input that would accept the slide number.\n. I'm not sure what would be the right way to fix this. Is it possible to cancel TransitionGroup if you detect another one is getting triggered? If so, perhaps we can meet somewhere in the middle.\n. That could be true. You can see the presentation here. Pacman sort of works but it's true there are likely nicer ways.\nActually it might be neat to have it run around the presentation.\n. Yeah, good ideas, thanks. I'll give those a go. :+1:\nFeel free to close unless you feel like changing the current implementation somehow.\n. One alternative way would be to rethink the problem. If we had means to mark presentation sections (#57), then you could do a Pacman per section. Maybe there would be a \"master\" Pacman then that would move across the sections. Example:\n*     *     *     * (sections)\n* * * * * * * * * * (current section)\n. @MarkRedeman That would be awesome.\n. Never mind. Just saw #27.\n. FYI, I made a tiny prism loader. I haven't extracted it to a project of its own as I know there's another one and we're investigating a merge at the moment.\n. That looks good to me. I think you could reuse the current table implementation behind a facade like that somewhat easily.\n. @kenwheeler Yeah, localStorage is nice for syncing given it's shared state.\nReferences: http://stackoverflow.com/a/12514384/228885, https://ponyfoo.com/articles/cross-tab-communication .\n. Here are mine:\n- jsDelivr in 5 minutes - A couple of quick slides about jsDelivr CDN.\n- How to Write a Book and SurviveJS It - Book business and open source.\n- React for Awesome People - Quick introduction to React.\n- Frontend in 2015 - Clear the Decks - My views on where the front-end is at the moment and where we might be headed.\n- JavaScript - Quo Vadis? - Thoughts on the direction of JavaScript.\n- SurviveJS - Training - Webpack/React course slides.\n- React API Design - Case Reactabular\n. Maybe it would make sense to expose the keys through a prop while using the current defaults. You could also consider mapping strings to ASCII to make it easy to use.\n\ud83d\udc4d  to reveal.js style slide sets. That would be awesome but also a separate PR.\n. On a related note, it might be nice if you had a regression test in place (stats/stop server on Travis or something like that) to avoid this kind of breakage in the future.\n. http://presentations.survivejs.com/webpack-from-apprentice-to-journeyman/#/?overview is the same.\nI checked Appear and it actually has a check for this. Perhaps routing has changed breaking that.\n293 might be related to this.. There's definitely something weird going on. First it didn't work and now it does. Some race condition thingy?\nI don't mind closing this in favor of #293.. I think I got it (initial reason anyway). It's the first loading that doesn't work. After that it seems to be fine.\nI have a theory too. The current check is done only in componentWillReceiveProps. We probably want to handle it in componentWillMount too to capture the first phase.. @kstratis Nice research! git bisect was designed for this. \ud83d\ude04 . ",
    "eligolding": "Thank you! Excited about this project!\n. ",
    "mdamien": "Yeah, as a game for kids where you makes choices at each slide and it redirect you to another slide.  (like \"be your own hero\" books).\nAlso the project structure is really well done, I think a lot of people are gonna use it to bootstrap their projects.\n. ",
    "ebertmi": "Yes, a grid is completely sufficient, I do not use vertical slides. This would also reduce the required scrolling in order to reach a slide.\n. I am not really profound with react and flux. Do the slide share a common context? When they do, then it would be easy to change the behavior. It is not really required, I just noticed this while playing around.\n. Can't we just put an overlay over the slides? Or at least make them selectable?\n. The problem with most react-markdown libraries is that they just output the generated HTML and just use dangerouslySetInnerHTML. This does not allow the styling that we would apply otherwise with Radium and the spectacle tags.\n. I've tried to implement the dynamic creation of the slide from a markdown source.\nSee: https://github.com/waywaaard/spectacle/blob/markdown/presentation/markdownspectacle.jsx\nHowever, it is not working because my dynamically created elements like <Heading> do not receive the same context as the other elements of the type.\nI get the following error that holds me back:\n\nUncaught TypeError: Cannot read property 'components' of undefined heading.jsx:100\n. That is what I was trying to do. I am also not sure where src\\utils\\context is actually used.\n. That's basically what I am doing :P in my repo\n. Yes, that slipped into this PR. Sorry for the late reply.\n. I just need to update the PR. And yes KaTeX does not have the same LaTeX coverage as MathJax has, but it is a lot faster and easier to integrate.\n. closing this in favor of new math tag based on latest spectacle version. I think he means a auto generated table of contents dropdown which allows to jump to other sections\n. You could also just check the target element of the event and prevent triggering the pause and overview when we are typing in a input or textarea.\n. This can be closed or stay open as react really changes fast\n. I want to render the inline HTML nodes in Markdown. I am using spectacle to dynamically create presentations from Juypter Notebooks.\n\nTry rendering following markdown with inline HTML.\nmarkdown\nYou can use <kbd>Shift</kbd>+<kbd>Tab</kbd> to ....\nThe HTML nodes are rendered as pure Text, though I've added an HTML renderer for handling those. Of course there is an difference between inline and block nodes.\nFor now, I've written a completely new Markdown Component, that can render those nodes. That component is based on the markdown-it parser and does also build up a tree of React-Nodes, which can be rendered.\nSetting a custom renderer for the built-in Markdown-Component did not work for me.\n. Just a quick question. I've implemented a my own Markdown Tag using markdown-it, though it is quite difficult to support inline HTML. I try to make a PR, when I've got more time.\n. You could just pass the contentEditable as a prop to the Text component.\nDepending on how you are using Spectacle you can also create a new Component that behaves like the Text one by either inheritance or copying and add your behavior in there.\n. Something like, this: untested!\n``` javascript\nimport React from 'react';\nimport { Text } from \"spectacle/lib/index\";\nclass EditableText extends Text {\n    constructor(props) {\n        super(props);\n    }\nrender() {\n    const { lineHeight, fit, style, children } = this.props;\n    const styles = {\n      container: {\n        display: \"block\",\n        width: \"100%\",\n        height: this.state.height\n      },\n      text: {\n        fontSize: 16,\n        display: \"block\",\n        margin: \"0\",\n        padding: \"0\",\n        lineHeight,\n        transform: scale(${this.state.scale}),\n        transformOrigin: \"center top\"\n      },\n      nonFit: {\n        lineHeight\n      }\n    };\n    return (\n      fit ? (\n        \n\n            {children}\n          \n\n      ) : (\n        \n          {children}\n        \n      )\n    );\n  }\n}\n```\n. The duration is currently hardcoded, though it would be easy to move to the prop types. But I think, that the overall animation stuff needs and overhaul.\n. What do you mean by moving of the markdown fork? I try to put a new PR together with a markdown-it based solution for the markdown to spectacle element creation with inline html support.\nI think the current routing which always uses the base url is quiet annoying.\n. But the styles from screen.js are retrieved by getStyles(), right? So, the lineHeight will be always overriden.\n. @sebald You have to pass it as a property in order to override it (works only if you do not use the fit prop).\n. Good addition, especially the support for the start attribute.\n. I've added a first draft of a markdown-it component for spectacle that supports inline html. See #235 \n. I rebased on the latest changes and added Object.assign.\n. I tried to fix most of the errors. Using the variable name props caused a lot of errors... I did not fix too many parameters, the * too many statements*  and the complexity stuff that is caused by the recursiv tree iterating.\n. I just discovered a bug using the Markdown-Component inside an <Appear>. It seems that I am somewhere missing to pass the style or to receive the style from the parent, hence the appear is not working.\nSimple example:\n`` jsx\n          <Slide transition={[\"spin\", \"zoom\"]} bgColor=\"tertiary\">\n            <Heading caps fit size={1} textColor=\"primary\">\n              Inline Markdown\n            </Heading>\n            <Markdown>\n              {\n\nYou can write inline images, Markdown Links, paragraph text and most other markdown syntax\n Lists too!\n With ~~strikethrough~~ and italic\n And let's not forget bold\n And basic inline HTML support: Ctrl + Yeah\n}\n            </Markdown>\n            <Appear>\n              <Markdown>{\"And some more Markdown in antag.\"}</Markdown>\n            </Appear>\n          </Slide>\n```\n. But wrapping the markdown component would prevent the styles to be passed down, right?\n. Does this also fix the problem, that spectacle does always show the first slide even if you link to a specific slide with#6` or so?\nI've added support in the controller for my local branch because this was quite annoying.\n. I got a different but maybe related error. The <Appear> tag seems to be not working correctly. The state gets updated to be active but the opacity is always 0. -.-\n. This is caused by the non-peer-dependency of react-15.6 in component-playground. spectacle needs to update the dependency to component-playground v3.0.0. Or just manually delete react in the node_modules inside component_playground to get rid of this error.. What is the reasoning behind switching from radium to emotion?. @philpl I implemented a custom \"editor\" component and also integrated a fullscreen mode by putting the content into a wrapper with absolute positioning and a z-index. This works even if spectacle is already in fullscreen mode.. @LucaFranceschini are you using slides.com or spectacle? Slides.com uses reval.js for the presentations and is not react based.. I think the proper way would be to use reacts defaultProps to set the transitionDuration, e.g.\njavascript \nAppear.defaultProps = { \n    transitionDuration : 300\n};. transitionDuration needs to be added to the propTypes. Travis error:\n'transitionDuration' is missing in props validation  react/prop-types. ",
    "davej": "Locally, specifically how do I make it available to dev server? If I require it then I get a parse error.\n. Couldn't get it working :-/\n. Got it working with ogv for some reason it wasn't working with mp4. Issue I'm having now is that the style attribute on the video is getting parsed weirdly. I'm not familiar with react/jsx so there is probably an obvious solution\njsx: \nhtml\n<video src={video} style=\"height:70vh;\"></video>\nCompiles to html: \nhtml\n<video src=\"3959600e6c93efcb28ee0d6f798eff69.ogv\" style=\"0:h;1:e;2:i;3:g;4:h;5:t;6::;7:7px;8:0px;9:v;10:h;11:;;\"></video>\n. Thanks!\nFor posterity: var video = require('file!./my-video.webm');\n. ",
    "shreyasbharath": "Another newbie here, can you provide a full example of how to embed a video in a slide?\nI can add it to the docs.. Sure I can give it a shot. I am new to JS/NodeJS/React so please bear with me.. Thanks, it would be great if this was documented too.. ",
    "jlbribeiro": "Slightly related to this is the idea of a full-width video/background video (optionally in loop). Not sure if it would make sense supporting this as first class citizen (couldn't find another issue mentioning this) or if it should be achieved only through a <video> tag, but I'm having some difficulty getting it to work seamlessly in full screen (without paddings/margins), stretched to fit like background images do. Any thoughts?. ",
    "marcysutton": "I am also looking for full-screen video just like images, FWIW. It also needs discernible text, like the previous and next buttons. Something like aria-label=\"Fullscreen\". FYI I forked the boilerplate a week or two ago, in terms of the data-radium thing.. Lookin' good! Thanks, @kenwheeler!. Nice, that was quick!. When will this be released?. ",
    "davidkpiano": "@kenwheeler much thanks, great work!\n. Yeah, it feels a bit smoother, although (and you might notice this too) sometimes there's still a little bit of jank, though this is probably the fault of react-tween-state. I can take a deeper look and see if any optimizations can be made to give it a super smooth transition.\n. ",
    "mathieudutour": "btw, all the warnings come from here : https://github.com/FormidableLabs/radium/issues/232\n. Thanks!\n. Done. There is 4 different options now: pacman, bar, number and none.\n. done. thanks\n. it's quite a big refactoring, happy to hear your thoughts\n. Maybe let's merge this one and work on a fix for the duplication of fragments in another PR since this one is quite big already.\n. it adds some boilerplate though\n. no no, it uses css transition to do the job\n. my motivation was spliting each slide in its own file. But it's not possible to put everything related to a slide inside it: all the props still need to be defined in the parent file.\nAlso, if you want to merge the notes PR, being able to define the notes in this slide file is really useful and doesn't' mess with the markup\n. this would be awesome: https://github.com/Rich-Harris/ramjet\n. Did you import it at the beginning of your file?\n. View -> Enter Presentation Mode ?\n. agreed but there are some issues in the presenter mode and overview mode: the preview doesn't match the actual slide. Don't really know what to do. Need to dig in more \n. Not sure how to do it. What we really want is not clearing totally the store but bypassing the Appear fragment: if i'm in a middle of a slide with some Appears, going into overview mode and back again should keep the Appears already revealed\n. yeah might do the trick\n. i think i found it\n. ok so it's actually dead simple.\n. it's even keeping Appears already revealed\n. test the last commit\n. oh sorry i was speaking about the overview mode\nFor the presenter mode, the same issue is in master i believe\n. the bug only appear when switching to presenter mode, not when switching to overview view. It's not that you would usually do, maybe there is no need for a quick switch ?\n. ",
    "luisrudge": ":+1: \n. I had this problem before too.\nFix:\n- Update to react-router beta4\n- npm i -S history\n- import createHistory from 'history/lib/createHashHistory';\n- ReactDOM.render(<Router history={createHistory()} routes={routes}/>, document.getElementById('app'));\n. > Which operating system version does your computer have?\nWindows 10\n\nWhich browser versions at the left and right?\n\nLeft:\n\nRight: Chrome 46.0.2490.86 m\n\nIn which browser, does this slide work they way that you expect?\n\nChrome is alright.\n\nIn the browser at the right, the list bullets appeared at the same time as the text when you pressed an arrow key?\n\nYes\n. Using listStylePosition: \"outside\" solved the issue in MS EDGE and, to be honest, should be the default style. \nThe first item is using \"inside\" and the second one \"outsite\". The second one is much better than the first one IMO\n\n. It shows the dots right away (like your firefox example) with this code:\njs\n<List>\n  <ListItem><Appear fid=\"1\">item 1</Appear></ListItem>\n  <ListItem><Appear fid=\"2\">item 2</Appear></ListItem>\n  <ListItem><Appear fid=\"3\">item 1</Appear></ListItem>\n</List>\n. ./index.js\nHere's what I'm doing:\ngit clone [this repo]\nnpm i\nnpm start\nedit ./index.js file \nnothing happens\n. If I do type webpack-dev-server --hot --inline --port 3000, it kinda works, but it's doing a full page refresh\n. Here's the log info:\n\nHowever, it doesn't reload the page automatically\n. the ./index.js file, where you have the <Deck> and <Slide>'s\n. It's still a little weird:\nNotice how the preview is moving the slides forward..\n\n. @pedrottimark that's correct. I think the preview should always show the final state, with all appear elements shown.\n. In the current slide preview, it should show the appear in with the default behavior.. but in the next slide preview, it should show completed\n. I'm seeing the same issue as well\n. I don't have a mac, so I can't say anything about osx :(\n. ",
    "fru": "+1\n. ",
    "Spy-Seth": "This is a must to have feature :+1: \n. ",
    "firstdoit": "This! Do you guys need help? What if we had a repo called spectacle-core as suggested by #69? \nUpgradeability, easier to have lots of presentations on the same repo, etc.\n. Is someone working on this, or is a PR welcome?\n. I'm currently using the approach in https://github.com/ryan-roemer/surge2015. \nHowever, I think the correct metaphor would be to \"just work\" with a default index.jsx instead of having that boilerplate on the root of my project. Also, instead of having a themes/theme-name folder, we should have a theme/ folder from where it's picked up automatically. Finally, presentation/deck.jsx could be presentation/index.jsx, because that's where we'd expect the presentation to begin, I guess.\nAt least for me, that would be the ideal setup :) :dancer:\n. Oh, and porting it to https://github.com/gaearon/react-transform-boilerplate would be awesome.\n. Splitting it is a requirement either way, so I'm all for that! Then we will be able to see better how much boilerplate we need on the \"client\" repo. :)\nHappy to know you're working on it!\n. :tada: great work!\n. This is a nice hack, but SlideSets would definitely be simpler.\n. ",
    "knowbody": "I'm not really sure about this feature. You don't really use your mouse when you are presenting, do you? Is there any specific use case I'm not seeing here @waywaaard?\n. @kenwheeler this can be closed as we don't use hjs-webpack anymore (#110) and this is no longer an issue\n. also resolved @kenwheeler \n. @pedrottimark definitely yes :)\n. @kenwheeler updated. And I agree with @pedrottimark about hjs-webpack, not sure why but I find it very confusing, maybe because I was playing with webpack a lot and I don't find it difficult to config, at least not for the things I used it for. Also agreeing with @kenwheeler to do it after this PR is merged.\n. @kenwheeler should be good now (RE: crurrentSlide in transitions.jsx)\n. this also seems to be resolved @kenwheeler \n. It seems like this is resolved, at least I can't reproduce it anymore. @kenwheeler \n. closing in favor of #110 \n. @kenwheeler forgot about that, will fix now. thanks\n. :boom: \n. we can't change it to Babel 6 as that would break the react-transform dependency. We can do that whenever react-transform will support Babel 6.\n. @LeoAJ already on it, check #131\n. confirmed we broke it :construction_worker: \nworking to fix it\n. good catch! @kenwheeler we want that :point_up: \n. @kenwheeler is anything stopping this from merging?\n. @detj just make sure that your URL has: ?export in the end and tick the: Background graphics option.\nThis is what I've tried on master:\n\n@kenwheeler maybe we can just add this flag (?export) after someone hits cmd/ctrl + p?\n. I see, you've got a point here @ryan-roemer, thanks :+1: \n. It's because we use browser history, if you are using hash history than the hash would be valid. I will update the docs with:\n\nappend your URL with ?export\n\ndoes that sound better?\n. done here: #140\n. @ami44 looks good to me, thank you. Could you squash your commits, please?\n. I'm AFK, mind adding those here and squashing. Or i can have a look at it in a few hours\u00a0\n\nBest,\nMatt\nOn Sat, Jan 9, 2016 at 6:34 AM -0800, \"ami44\" notifications@github.com wrote:\nWhy not, but can you before update package.json to set \"babel-core\" with a correct version (see @pedrottimark comment) \nCan you also update README.markdow like https://github.com/FormidableLabs/spectacle/pull/142/files\nOr accept this pullrequest :-)\nAmi44\n\u2014\nReply to this email directly or view it on GitHub.\n. yeah, could be just:\njson\n{\n  \"presets\": [\"es2015\", \"stage-0\", \"react\"],\n  \"plugins\": [\n    [\"transform-decorators-legacy\"],\n  ]\n}\n. lgtm! :rocket: \n. great idea! mind putting PR for that?\n. awesome! thank you! :rocket: \n. thanks @paulathevalley \n. mind sending PR for that?\n. yup, thanks :)\n. we validate slide prop as PropTypes.number that's why I've done this change\n. in React Router 1.0 there is no more router on the context\n. lol, very good point, give me a minute, fixing it. Sorry didn't realise it wasn't there\n. yeah, I think this is what @kenwheeler was pointing out to me and yeah oneOfType is the solution to that. I'll make that update as soon as find some time. or if you want, feel free to jump in and update.\nby the way @kenwheeler maybe it will be better if you create separate branch update-dependencies on spectacle and I send the PR there, you can merge it and we can work there. Then y'all don't need to wait for me.\n. there must be some return in those functions, else eslint is complaining \n. this is me loving single quotes ;p I will update the PR\n. @ryan-roemer is /* eslint-disable no-var */ ok in this file?\n. oh okay but that should be in the separate PR, right? I'll just make sure that we use double quotes here.\n. Ha! I like your solution for your surge2015 presentation.\n. ",
    "MarkRedeman": "@knowbody it can be nice to use an overview when answering questions after the presentation (instead of having to either remember the slide number or having to \"scroll\" to some slide mentioned during the question).\n. I could see myself using this when creating a small slideshow app. In this case it would also be useful if we could set the presentation to loop (similar to how Reveal.js has support for loop & autoplay).\n. What's the status of this PR / Is there anything I can do to get this merged?\nOne thing that I'm missing in KaTeX is the ability to define commands, i.e. \\newcommand\\abs[1]{\\left\\lvert #1 \\right\\rvert}. \nRecently this PR was merged in master that adds support for basic macros. Once this feature is released it's probably useful to add a property to the component that adds the macros.\n. For anyone else wanting to separate their slides from their decks, this is how I've done it (it is similar to how #32 has implemented extension of slides):\nFirst I've extended the Slide component so that it will render the ouput of a contents() method.\n```\nimport {Slide as SpectacleSlide} from \"../src/spectacle\";\n/*\n * I'm using this class so that in deck.js I can use small independent slide components\n * Since most of my slides will use a default transition I also provide some default props\n /\nexport default class Slide extends SpectacleSlide {\n    render() {\n      this.props.children = this.contents();\n      return super.render();\n    }\n}\nSlide.defaultProps = {\n  ...SpectacleSlide.defaultProps,\n  transition: [\"slide\", \"fade\"]\n};\n```\nThen if I want to create a new slide I can do this:\n```\nexport class Title extends Slide {\n  contents() {\n    return (\n      \n\n          My Title\n        \n\n    );\n  }\n}\nTitle.defaultProps = {\n  ...Slide.defaultProps,\n  bgImage: images.dna.replace(\"/\", \"\"),\n  bgDarken: 0.5\n};\nexport class AboutMe extends Slide {\n  contents() {\n    return (\n      \n\n          @MarkRedeman\n        \n\n    );\n  }\n}\n```\nNext in deck.js I import all slides and render them one at a time:\n```\nimport * as Introduction from \"./introduction\";\n// other stuff\nrender() {\n    return (\n        \n\n\n\n    );\n}\n``\n. If we could mark presentations sections then It would be awesome if at each special mark (for example at the end of a section) instead of a white dot we would have one of the ghosts.\nNot only would it be fun to watch pacman eat the ghosts, I think it would also be a nice indicator for your audience when to expect a new topic.\n. The sizing of the font can easily be fixed by usingreminstead ofem` in the stylesheets.\n. Mutation Testing in PHP How to use mutation testing to improve the quality of your code.\nI'm using stateless functions to seperate the contents of my slides from my main slide deck.\n. Neat!\nI'm assuming this won't work when you deploy the slides to surge with npm run deploy? (Maybe add this remark to the documentation?)\nWould it be difficult to add a constraint so that only the presenter can change slides? Perhaps we could add an option so that participants can either \"follow\" the presenter (and use the state from the websocket), or manually look through the slides without changing the slides for other participants.. Did you overlook this comment?. ",
    "pedrottimark": "@kenwheeler Similar to Light Table view in Keynote or Slide Sorter view in PowerPoint?\n@MarkRedeman In Keynote, if you double-click a slide in Light Table view it displays that slide in whichever single-slide view was active most recently (for example, Navigator, Slide Only, or Outline). How would you apply that analogy to Spectacle for the use case you describe?\nAnd worth thinking what simple-minded fall-back might occur to a flustered presenter? When I needed to do answer a question several weeks ago, what occurred to me in the moment was switch to Navigator view, scroll up the single column of thumbnails, click the slide, and then play the presentation at that point.\n. @bebraw When you say \"set the presentation length at config\" do you mean an attribute of the Deck component or a property in the JavaScript config object?\nFor an attribute in the JSX, your comment in #67 about #57 causes me to ask: if you could also set the intended length for sections (slide subsets) of a presentation, whether you have any brainstorm about a visual indicator in Presenter mode to see if you are approximately on your intended pace?\n. @bebraw Good points about a fixed end point and the need for some experimentation. I will ask some people at the local meet ups how they think about this issue. Any \u201cuser research\u201d you can do is welcome.\n. @tcoopman Can you suggest a layout of slide and notes on an exported page?\nYou might compare to or critique layout in Presenter mode.\nEven better is an example: paste screen picture of slide into word processor, type note text in approximate format and layout, and then paste screen picture in this issue?\nBest of all, two or three possible layouts with comparison of strengths and weaknesses (or when and why you would use them :)\n. @tcoopman Thank you, that analogy gives a starting point.\nA brief question to follow up: Would you print or view the pages as you develop the presentation and review it with coworkers, or at then end possibly even as a deliverable to hand out, or both?\n. @kenwheeler In the default deck, Appear components have fid props, but they are ignored, true?\nWould you like me to push an appear-77 branch to my fork, so you can review some minimal changes for an optional order prop in the Appear component as described below?\n@garetht What do you think about a close analogy to the order attribute in CSS flexbox?\nhttp://www.w3.org/TR/css3-flexbox/#order-property\n1. It has a number value. Negative values are okay.\n2. The default value is zero if the prop is unspecified.\n3. The Appear components on a slide become visible in ascending order. Document order is the tie-breaker for components which have the same order. Therefore, if no Appear components have order props, the default is current behavior.\n. Yes, on a branch from the current master. Only 3 files will have changes:\nindex.js (remove fid prop from default deck and add a few slides with order prop)\nsrc/components/appear.js\nsrc/components/slide.js\n. @kenwheeler https://github.com/pedrottimark/spectacle/tree/appear-77\n. While you are at it, should hjs-webpack move from dependencies to devDependencies?\n. @kenwheeler @knowbody Without any disrespect to Henrik Joretag, unless you expect hjs-webpack to become mainstream, it seems worth the effort to divide webpack settings according to principle of loose coupling and tight cohesion. Combining all the options (for example, transpilers with dev server and hot reloading) makes it harder to understand, not easier, for me at least.\n. Yes, thank you for giving me the opportunity. It will be my third PR total in open source, first with JavaScript code.\n. One zero zero, what an honor. But maybe you want to throw some stale sea weed at me, ha ha?\n. Update to goal 3: Now able to test whether the result of Radium mergeStyles is the expected value of a property which occurs two or more times, independently of React components.\nMaybe less than the best to reach inside the Radium package, but then maybe this is evidence for the important mergeStyles function to become a public export.\n. The destructuring assignment was some nice code craftsmanship.\nI will submit a pull request to rename the function and make it independent of this:\ngetStyles.call(this) > styleBase(this.props, this.context)\n. @kenwheeler Hey, when you get a chance, can you add a few short snippets of JSX in this issue to illustrate this component?\nMy mental picture is hazy, thinking of JavaScript ternary (replaced ? from : to) or HTML fromto but those analogies might be way off.\nReplace probably has a lot in common with Appear, so I want to think ahead as I explore potential changes to Appear for #77 and #117. Also whether there are any other ways to display these components than inspecting and mutating the rendered DOM elements.\n. Thank you. So an analogy is an explicitly-controlled carousel which always\ndisplays one child.\nAfter the refactoring, will Spectacle use Redux to store the app state\nincluding current view, current slide, number of Appear fragments visible\non current slide, which Replace children are visible?\nOn Thu, Dec 3, 2015 at 2:00 PM, Ken Wheeler notifications@github.com\nwrote:\n\nI'm doing a major refactor at the moment to pull react-router out and\nreplace it with History, once I get everything pushed I'll revisit the\nAppear PR's and get them merged/updated\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/FormidableLabs/spectacle/issues/114#issuecomment-161747818\n.\n. If this is merged, I can submit a follow-up with tests/specs/base.spec.js\n. What do you think about including lineHeight in base style props to reduce special cases?\n\nThen Text would have no unique style props and Heading would have only size.\nTesting hit a problem that the default value of lineHeight = 1 for Heading and Text components, and also values in the theme for h1, h2, h3, h4, h5, h6, and quote, stop ordinary CSS inheritance from ancestor to descendant HTML elements. It prevents DRYness if you set the prop in a parent component (for example, FullWidth) so children can inherit it, instead of setting in each child.\nSo I will open an issue about setting initial default lineHeight in root styles.\n. For your info, the implementation is ready.\nIt works for the default deck and some additional cases (including use cases above).\nIt works well with <br/> explicit line breaks.\nIt even preserves different explicit alignments for different children!\nThe main surprise was when FullWidth contains several lines which have a narrow max width, then its scaled height is taller than the slide. For example, the countdown example.\n. Good question. Do you mean\nhtml\n<FullWidth>...<FullWidth>...</FullWidth>...</FullWidth> or\n<FullWidth>...<Text fit>...</Text>...</FullWidth> or\ninteraction with Layout Fit and Fill?\nMy thought was to remove the fit prop from Heading and Text but provide a console message (imitating deprecations in React) if someone uses it. But in case you think it is better to keep fit as a prop and use FullWidth as its implementation, then I'll see how that works nested.\n. Yes, for sure. When to do what is an important part of the learning for me here.\nAnother part is get past silly stuff like remember to commit the changes before push the branch. Duh!\nI pushed changes to https://github.com/pedrottimark/spectacle/tree/fit-to-full-width\nThis is one corner of the design space: replace fit prop with FullWidth container.\nIt is very likely that FullWidth could be private implementation of fit prop,\nor it would even be possible to provide both in public API.\nThe significant changes are in src/components/full-width.js, heading.js, text.js\nI rewrote the existing fit props in index.js and appended the exploratory slides.\n. @luisrudge Thank you for the helpful screen pictures. Here are a few questions:\nWhich operating system version does your computer have?\nWhich browser versions at the left and right?\nIn which browser, does this slide work they way that you expect?\nIn the browser at the right, the list bullets appeared at the same time as the text when you pressed an arrow key?\nFor comparison, on OS X 10.11.1,\nFirefox 42 and 44 look as the picture at the left\nChrome 46 and Opera 33 and Safari 9 look as the picture at the right\n. @luisrudge Can you please do an experiment?\n1. First add enough text to a ListItem so it wraps to a second line.\n   See what you think of the appearance in Chrome.\n2. In src/themes/default/screen.js see what difference it makes if you change listStylePosition: \"inside\" to listStylePosition: \"outside\"\nIn Chrome, please confirm that the difference is (a) the second line of the long item has a hanging indent to align with the first line and (b) the behavior of appearing items remains the same as before.\nWhat difference does it make in Edge?\nDo you have Firefox on your computer? The difference is makes for me is no weird line break, and (a) same as Chrome, but (b) all bullets are visible, even before the text of the items appears.\n. @luisrudge Thank you for your detailed comments. I agree with your comment about the default style.\nOne more question about Edge with listStylePosition: \"outside\" how does it display the bullet if a ListItem contains an Appear element? For example, on the slide with Inline style based theme system, and so on.\nIn Chrome, the bullet is invisible when the text is invisible and visible when the text is visible. In Firefox, all bullets are visible, even before the text becomes visible.\nA way to solve the inconsistency might be to change the recommended JSX for lists in Spectacle so Appear contains ListItem <List><Appear><ListItem>\u2026</ListItem></Appear>\u2026</List> especially if it is possible for Appear not to output an enclosing div if is has only one child. That would prevent invalid HTML <ul><div><li>\u2026</li></div>\u2026</ul> Edited comment to include back quotes around markup :-|\n. @luisrudge When you write \"It's still a little weird\" do you mean that in presenter mode, if the current slide and the next (look ahead) slide both contain Appear components, then the arrow keys affect the Appear components in both slides?\nThat just happened to me. Also in a deck made with 0.0.5, so apparently not a recent regression.\nWhich is more useful for you: all Appear components in the next (look ahead) slide are visible or not visible?\n. @kenwheeler Result of research: Appear components contained in either the main or next (look ahead) slide assume that the current slide index number from context applies to them. A possible direction is for them to receive the slide index number of their ancestor slide from context. Appear components whose ancestor slide differs from the current slide would be visible in presenter mode. Slide components already receive their own index number as a key prop, but it is unused.\n. Babel had previously overlooked the missing semicolon, but 6.4.0 has made it a parsing error.\nhttps://phabricator.babeljs.io/T6873\n. Agree! That change would put all of the state in the URL so much logic can be brought together in Redux reducers.\nAs Michael Jackson and Ryan Florence say, \u201cMake the URL your first thought, not an afterthought.\u201d\nA reason in favor of your second pattern (which unlike a query key, does not require an explicit name) is the pending proposal to add a Replace component, which would share that part of the state with Appear. In my mind, I am calling it the count of visible steps (in analogy with animation steps).\n. @kenwheeler If there's a way for me to help, let me know. For example, I have explored an alternative way to count the number of steps on a slide by passing callbacks to instances via context instead of querying rendered elements in the DOM.\n. Can push a branch with just that part on my fork before the weekend.\n. @kenwheeler Here is a warm-up act. Looking forward to what you do in the main attraction.\n- Needed to update version of Radium because of bug which prevented childContextType in Slide\n- Several console.log to let you see the data flow and verify stepCount is equivalent to fragment count.\n- Didn't touch fragments logic in Slide or Deck. You can change it as little as you need or as much as you want.\nhttps://github.com/pedrottimark/spectacle/tree/step-visitor\n. @knowbody Can you please confirm that packman progress has animation of moving jaws when a slide changes wIth any of the following versions of radium: 0.13.2, 0.15.0, 0.15.1. I didn't narrow it down any more precise than that.\n. @knowbody @kenwheeler 1. When I added a slide with a string id, forward navigation did fail with Number(this.props.params.slide) and succeeded when I changed this line back to this.props.params slide. 2. But there are two warnings about the type of slide, so its contextType needs to become PropTypes.oneOfType([PropTypes.number,PropTypes.string]) here and also in src/deck.jsx\n. ",
    "code-chimp": "I missed the imports at the beginning of the deck.jsx file, thanks.\n. ",
    "opensourcegeek": "+1\n. ",
    "jjt": "I did some investigating with markdown-to-react-components, and knocked together something usable here: https://github.com/jjt/spectacle/pull/1. It works from a user-facing perspective, but the implementation is cludgy.\nA better approach might use mdast and mdast-react, or a custom mdast plugin based on mdast-react.\n. Made some more progress toward this, and I've got markdown rendering to Spectacle elements for headings (1-6), paragraphs, links, strikethrough/italic/bold text, images, and lists. The <Markdown> component accepts a source prop or inline contents.\nBlockquotes are a bit weird right now because markdown-to-react-components (MTRC) wraps the content in a <p>, and it ends up rendering comically large.\nI couldn't find an interface for a code block from MTRC, so code doesn't work either at the moment.\n`` js\n       <Slide>\n          <Markdown>\n            {\nMarkdown text, inline\nSub-heading\nBacon ipsum dolor amet jerky t-bone fatback, pork alcatra beef ribs bresaola swine pancetta rump shank kielbasa.\n List\n ~~Prosciutto~~ shankle sirloin\n* Tenderloin doner short ribs\n            `}\n          \n\n\n\n\n\n\n\n```\n\n\n\n. Thx! If you could see this in Spectacle (instead of userland), I can start a PR and we can go from there.\nNeed to tackle blockquoting and code issues, figure out a good user config story, and clean up the implementation.\n. Previous PR to mdast-react landed, submitted a new one (https://github.com/mapbox/mdast-react/pull/11) to support rendering blockquote content without a wrapping <p> element. Targeting my fork once again https://github.com/jjt/mdast-react/commit/a6d6b02\nI also exported the mdastConfig object from markdown.jsx. This enables users to extend it themselves like \n``\nimport Markdown, { mdastConfig } from '../src/markdown;\nconst myMdastConfig = {\n   ...mdastConfig,\n   mdastReactComponents: {\n    ...mdastReactComponents,\n    a: MyLinkComponent,\n  }\n}\n```\nI noticed that there's no support for inline code blocks, so tackling that next.\nThen we should be GTG.\n. Looks like rendering inline code in <Text> components is a little wonky in Spectacle currently.\nmarkdown\nChoose from `inline code` or code blocks:\nWhen inlineCode: Code is passed in as an option, mdast-react turns the above into\njs\n<Text>Choose from <Code>inline code</Code> or code blocks:</Text>\nWhich looks like this:\n\nBut if we don't specify inlineCode: Code in the options to mdast-react we get something that looks okay, albeit unstyled.\n\n. Alright, support for inline code is sketched out but due to https://github.com/FormidableLabs/spectacle/issues/88 we should wait on passing inlineCode: Code to mdast-react.\nOnce again targeting my fork (https://github.com/jjt/mdast-react/commit/2ea3bcd) of mdast-react until the inline code PR lands: https://github.com/mapbox/mdast-react/pull/12\n. @kenwheeler I think the code itself is GTG. We can hold off until those PRs land in mdast-react, or we can use my fork.\nI'll need to get your opinion on two things (or just hand these tasks over to you):\nExample Markdown Slide content\nREADME additions\n. @kenwheeler Great, let me know if I can help in any way.\n. :confetti_ball: \n. I like @kenwheeler's example from an API standpoint. Should cover 99% of the use cases for Markdown props/styling.\nFor the people who really need first class component overrides, they could pass in a different mdastConfig prop. Though it is currently up to the user to merge the defaults object with their customization, and it's a bit wonky because of how mdast works (see the spectacleComponent function). Would probably want to clean that up and expose a better API.\n. Yup, good call.\n. Oooh, nice, I like it.\n. Also need mdastConfig - I'll add that rn.\n. ",
    "krvajal": "What's the status on this?. ",
    "saralkochar": "Thanks Ken. I\u2019m sorry that I didn\u2019t reply until now as I forgot. But your suggestion solved my problem and I simply took the build and deployed. We made an awesome presentation and won the most disruptive idea award\u2026all thanks to your amazing innovation. :) \nOn Sep 9, 2015, at 6:47 AM, Ken Wheeler notifications@github.com wrote:\n\nClosed #46.\n\u2014\nReply to this email directly or view it on GitHub.\n. sure, I will forward you as I get to the office later. (writing from HK). Also, I see great things you guys do\u2026wondering if you have time to chat sometime tomorrow? Our application is build on MEAN however we foresee issues with conquerency as we move towards collaboration so would like to start discussions early on. \n\nOn Sep 9, 2015, at 9:23 AM, Ken Wheeler notifications@github.com wrote:\n\nDude that's rad! Any chance I can see i?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "andrew-medvedev": "Thanks!\n. ",
    "alexlande": "// is an anti-pattern, no reason not to use https :+1:\n. ",
    "suevalov": "Sorry for insufficient explanation. \nTransition between slides doesn't work. Basically, slide is rendered, but with these errors. After this you can't translate between slides.\nI reproduced the bug on FF 35.0.1 on MacOS, but today I was notified by my colleague about the same problem on latest version on Windows. My presentation just didn't work in his FF.\nJust jumped to the latest revision and launched demo presentation. \n\n. It goes to 1385 line, which is CSSPropertyOperations React module.\nThe only thing I could find is https://github.com/anselmh/object-fit/issues/5, but i didn't help to localize the problem in Spectacle. \n. Did you manage to reproduce the issue?\n. ",
    "mikenikles": "This looks related to #164 where I left a comment with a link to a blog post and Github repo to show how I load slides dynamically.\nIf there's any feedback on my approach, I'd be happy to see if I can open a PR. I'd like to see what people think though before I go too deep into the code. Thanks. I was curious about modularization as well and played with it for a while. I ended up using import()'s returned Promise to dynamically load slides from subfolders. A blog post explains the steps taken in the repo on Github.\nWhat do you guys think? I may miss something, but was at least able to convert the Spectacle boilerplate code to dynamically loading slides.. ",
    "zachhale": "I wrote a solution for adding support for <SlideSet /> in #280! It currently just includes support for organizing slides. Support for 2D navigation of slides like in reveal isn't implemented yet.. Upgraded the overview to navigate slides as a 2D grid in #285 /cc @ryan-roemer @kenwheeler . ",
    "otorrillas": "@bebraw @pedrottimark check out my PR and see if that suits for you: #295 . @kenwheeler I guess the issue can be closed, as the PR has been merged to master. Cheers!. @stefvhuynh fixed the code-styling issues according to your comments. Hope it is good now.. ",
    "ebrillhart": "Closing this - I think #295 satisfies the general need!. @kenwheeler also lmk if you have any opinions on that Content Outline that I've created with the help of Elise and Paula\n. @ryan-roemer @bmathews good to go once I revert the gitignore and npmignore back?\n. @bmathews how did I just see this. thank you!! I should be easily able to pull in the example to spectacle-docs now and set it up to run at open-source/spectacle/example?\n. @bmathews has this been npm published yet?\n. @bmathews welp. yeah. duh. hasn't even been merged yet. do you want to merge it?\n. hey @kitten I'm going through and cleaning up the backlog - was this feature ever implemented/can this issue be closed?. hi @Charimon, so sorry for the delay on this. if you wouldn't mind resolving the merge issues and updating snapshots/tests, I'll get this merged!. closed with #542 . Hey @aravindballa thank you so much for your work on this! I am closing this since the functionality was added in #531 (along with some other changes we needed), which will be merged soon.. Hey everyone, this issue is related to a known bug that we're in the process of fixing! Just wanted to give an update.. Hey @mpeyper! Sorry for the delay. I'm taking over as maintainer for the project and will review this and merge or give feedback within the week. Thanks!. closed by #511 . Hey @nuragic, sorry for the delay - if you could fix the merge conflicts I'll accept this PR. . @nuragic ah sorry, it also looks like prettier is failing in CI, which is something we've added since you originally pushed this. If you could pull down, make sure you have latest master merged in/do a fresh yarn or npm install, and run yarn prettier-fix, that should solve the problem! Thanks for working with me on this.. Hi @thomasfarago the textAlign prop seems to be working as intended when I test it out. Closing for now, but if I'm misunderstanding the issue or you're encountering another one, please feel free to open a new issue!. hi @JakeGinnivan - I'm going to close this PR and implement it separately since it's been failing CI since April. Thanks for your help!. hey @rainboxx I'm going to close this PR for the reason you mentioned - #546 should cover the major issue.. sorry @samwhale this got added in a larger PR so I am closing this one!. closed with #591 . Thanks @LucaFranceschini, we'll look into this!. Thanks @thochra, we'll look into this!. Hi @thomasfarago, unfortunately this is a pretty complicated piece of functionality and has much more to do with the .gif file itself than with anything that we could reasonably add to the Spectacle library. I hope you're able to find another workaround for this issue! Might be worth looking into processing the image with something like https://davidwalsh.name/prevent-gif-loop before adding it to the presentation. I am going to close this as it's not a feature that we are planning to add. . Thanks @Alekos92, we'll consider this.. Closing this issue as type defs have been updated in DefinitelyTyped! See Kylie's comment for more details. . closed by #587 . Thanks @Alekos92, we'll look into this.. Hey @tstirtz! Sorry for the delay. I'm taking over as maintainer for the project and will review this and merge or give feedback within the week. Thanks!. @tstirtz tested this out and looks good to me! thanks for working on this \ud83d\ude42 \n. This issue was confirmed to be resolved, so I am closing this PR! Thanks for your work, @HappyHackingNinja . Thanks @romellogoodman! We'll look into this.. Thanks @Benjamsk! Looking into this.. Hey @benwiley4000! Sorry for the delay. I'm taking over as maintainer for the project and will review this and merge or give feedback within the week. Thanks!. Hey @codepunkt! This is something that's in-progress and will be merged soon. Thanks! Closing with reference to #445 . Thanks @wonism!. Hi @totemcaf! Could you give a bit more detail about what you're trying to do/looking for, or the issue you're running into? That would help me make sure we answer your question fully!. Hey @totemcaf since we haven't heard from you I'm going to close this issue. Please feel free to re-open if it's still causing you problems!. Thanks for adding, @badlamer . @ElreyB this looks great so far! Exactly the right approach.. oh I will note that we tend to use the convention of including [WIP] in the PR title - so in this case it would be [WIP] update docs or something like that!. @ElreyB running yarn prettier-fix and pushing those changes should allow this to pass CI!. Thanks @philipwhiuk, we'll look into adding this!. hey @ElreyB! my suspicion is that in the default theme, both the slide background and the quote tag are assigned the same color. can you try applying textColor: 'primary' as a prop to the <Quote/> tag?. okay! I might look at this a little more to make sure my assumptions are correct. thanks for raising!. Okay, my assumptions on this were correct, and the right fix is to update which color the Quote uses if default theme is applied. Thanks for helping to clarify this in the docs! . Hi @LucaFranceschini thanks for the info, we'll look into this.. closed by #637 . Hi @limoozyn thanks for the feedback! This is an interesting idea, but not one that we are going to pursue - for the meantime, a manual way to get around this would be sharing the link in a password-protected document or other secure file-sharing method. I'll close this issue, but hope this helps!. Hey @ElreyB on first glance this looks awesome - let me review more in-depth later today and I'll let you know if it's ready to merge!\nCloses #557 . This actually should, ideally, not be a breaking change in the sense that it should not affect the functionality for any users of the library, only how the code is written and runs under the hood!. I will merge this and make a note of dependency stuff in the release notes for next release!. Hi @ganeshchand, thanks for raising this issue. \nThis was a feature that is currently broken and that we're in the process of fixing. I'll remove that heading for the time being - sorry about that!. Going to close this since it's not actionable beyond the feature that we're already slated to fix.. @audoralc yep! feel free to take a whack at it. assign yourself to the issue if you start working on it, and good luck \ud83d\ude42! . github won't let me formally assign you @suhailsinghbains but go for it!. Note: This is going to be handled by an internal team member after some discussion. Thank you to everyone who has expressed interest in helping, and I encourage you all to try some of the other issues tagged good first issue!. Hi @clemgrim thanks for letting me know that you're running into this! We'll investigate ASAP.\n. I think this is connected to #586 . Thanks @AdamMaras, we'll look into this. hey @AdamMaras, try wrapping the codepane element inside a div as recommended here: https://github.com/FormidableLabs/spectacle/pull/598\nand let me know if that solves your problem!. hey @CaoThien96 could you throw together a quick codesandbox to illustrate more fully the problem you're running into? thanks!. @lecardozo we'll look into this, thanks!. closed since it seems to be fixed in the relevant dependency. thanks everyone.. hey @shreyasbharath, could you please put together some sort of code snippet with what you're trying to illustrate the issue you're running into? thanks!. This should be fixed with an update to spectacle scripts. Thanks for starting on this, @suhailsinghbains! I'll review and give feedback.. Hey @suhailsinghbains, thank you so much for your work on this! After a lot of discussion, we think we need this particular task to be handled by someone on our internal team. I really appreciate the time you put into this and would definitely encourage you to try your hand on another issue that's tagged as a good first issue!. Hey @sarath-sasikumar are you trying to display the code for the component or the component itself?. @sarath-sasikumar If I understand correctly, this should just be working as-is! If you could post an example from codesandbox or similar, that might help us see the issue you're running into.. Thanks for flagging @lennerd! We'll look into this.. merge away!. If you add a small note in CONTRIBUTING about updating typedefs (just so we can say it's there) and also a note in the README for anyone interested in using TS that they can find them from DefinitelyTyped, that would be perf! Otherwise LGTM\n. approved once CI passes!. I agree with all the above - if we can find a way to do it that's clean and works, I say we go for it if someone is willing to take on the task!. Because yeah, the DT PR submission process makes me nervous. Hi @MathEman-1, go ahead and create a PR from your forked repo to this repo and I'll review and give feedback! Thanks for putting in some work on this!. Hey @matheman-1! Looks like it's failing on prettier. Try running yarn prettier-fix again and pushing back up.. Hey @stevenmusumeche! This functionality was actually not released until 5.3.0, let me know if it's working for you on that version.. Closing since this should be working in current version.. Hrmmm, good q, I'll look into it!. Thanks @plemarquand!. @debel let me know when you feel that this PR is feature complete and I'll do a final review and merge!. thanks @dougbacelar!. Thanks so much, @markerikson! I'm going to dig into this a bit more later this week . Thanks for the report, @boardfish! We'll look into this.. Thank you!. Hey @dkosasih! PR would be totally welcome - would love for it to be flexible enough for a user to disable the feature, but this makes sense!. Thanks @mwanago! We'll fix this.. Hi @guillaumepn, the website docs are actually quite out of date, so the Readme should have the latest documentation. We'll look into why this isn't working.. @ryan-roemer like so?\n. I think we can take out the \"new\" at this point and just leave it as The best way to get started. so we actually have a yarn prettier-fix which will do the trick more easily than adjusting the individual files, we may want to update this section to basically have them run lint and prettier-fix. I also for later still want to consider adding prettier-fix to the pre-commit hook but we've already chatted about that \ud83d\ude42 . @ryan-roemer An issue we run into a lot is people PR, CI fails, and then the submitters are unresponsive to requests to fix lint or tests or whatever and repush, which usually means duplicating the work to actually make the fix, since we don't have the same access to forked branches. I'd love to try to prevent that particular scenario, but am certainly open to alternatives to the pre-commit hook!. I guess just having in the checklist that people should run the relevant scripts is probably a good compromise and we can revisit if it continues to be an issue!. @ryan-roemer would you be okay with a codesandbox of the error or is that fall into the category of somewhat manual reproduction? If so, I'd be partial to a WIP PR - I think a separate repo could be a lot of overhead to submit an issue, especially for more jr devs. I'd actually also remove the a as well before speedy development, just a personal preference!. just noticed that you is in there twice - should be just you can go to. oooh, like this change!. Love the table! for this number section, let's change it to 0, 1, 2, 3... etc. | Will take you to the corresponding slide, with0being the first slide in the presentation. TINY nit, but whether its emotion itself should be whether it's emotion itself. let's say default is quaternary color set by theme. I think we actually need to get rid of the yarn one - it should only be the npx one after re-reviewing the react docs. the second option - anyone who's using yarn will know that it's interchangeable, but worth a quick mention!. let's leave it for now, and I'll think about how/whether to update it later. commend => command\nlet's also maybe end this section with a : instead of a period if that sounds good!. changed => change. The third way to get started is by runningnpm install spectaclein your terminal and writing your own build configurations.. if it is what you say it is, I love it. I'd change this to instructing the user to download/remove version control like we have in the boilerplate getting started instructions, just so that people don't get confused. Isn't spectacle already a dependency for spectacle-boilerplate on download?. I think we can get rid of the first sentence just to make sure people don't get confused. the rest makes sense!. okay - will make the latest major version the base-level requirement for peer deps, which I think is reasonable!. The latest version of babel-jest unfortunately still requires this bridge version as a peer dependency, so we'll need to leave in for now. Otherwise, all tests fail.. huh, never mind, this must have been an extension of issues related to updating source-map. removed!. It does need this as a resolution for the babel-jest dependency, so I'm leaving it here until that changes. Phil knows more about the specific carriage return stuff than I do, so I'll defer to him on that particular issue.\nWith regards to the longer than necessary separators, I do think it would be a good idea to introduce catches - @debel if you'd like to work that into this PR then feel free, otherwise I'll open a separate issue.. we can keep it like this for now!. ",
    "codepunkt": "There's quite a few issues that have been closed without further information.\nIt might just be that i'm new to spectacle and this repo and missed something.\nIsn't this issue still a thing? I'd love animations to be cancelled when transitioning further mid-animation.. @kwelch any chance my PR does what you need? :). Thanks Emma! \ud83d\udc4d . ",
    "AlanFoster": "This is failing because the dependency is on ^1.0.0-beta2 which allows 1.0.0-beta4 to be installed, which does not contain HashHistory. \nThoughts on updating the node dependencies to use beta2/3 explicitly for now, and aligning to the newest API as part of a separate unit of work? Potentially tagged releases of spectacle should also include a npm shrinkwrap file to aid with this type of issue in the future too.\n. :+1: to this idea\n. @QuantumInformation Yes - you can build/deploy your presentation - shown here.\nFor instance, I generally build my static presentation, then upload it to a gh-pages branch on github, or place it into the docs folder.. As an example use case:\nI wish to embed a video into my slides, and the existing functionality is to play/pause the video based on the space bar being pressed. However, currently Spectacle instead goes to the next Slide.. For my particular use case I wished to provide my own implementation for the key shortcuts on a particular set of slides, but I believe @AjkP may have wanted a global handler implementation.\nPerhaps the config could be implemented at the slide level, and follow the normal event bubbling mechanism that developers would expect. i.e. If a slide doesn't specify a handler, it will reach the Deck handler which may have the default implementation available \ud83e\udd14 . We don't explicitly need it; But can we either use Number(this.props.params.slide) or pass in our radix here, parseInt(this.props.params.slide, 10)\n. ",
    "ryoia": "Yup, I tested with just 1.0.0-beta2 without the ^, worked just fine. \n. ",
    "tcoopman": "@pedrottimark I'm not using Spectacle for something at the moment, and a bit short on time for this.\nBut it would be probably be possible to take some ideas from powerpoint for example?\nI'd probably go for 2 or 4 slides on a page with the notes under the slides.\n. @pedrottimark The previous use case was to print them (to pdf) at the end as a deliverable. So after the presentation, everyone could have the full output.\n. ",
    "lanmaster53": "Hey folks, been looking for a reason to leave PowerPoint in the rear view for a while now, and Spectacle seems to be a really good reason. The thing that has consistently pulled me back to PP time and time again has been this issue: the ability to export slides with notes as a deliverable. Typically I use the page with single slide at the top and notes at the bottom format. It creates more of a book and allows for a lot more room in the notes. Anyway, this issue is the ticket to freedom from PP for me. Has there been any movement on this? Is anyone working on a solution that I could help with? Thanks all!\n. Kinda related to this, is there a way to add notes other than as a prop value? I use the notes section to store large amounts of text that eventually becomes an important part of a deliverable. How difficult would it be to create a Notes component, rather than use a prop value? Just thinking it may be a little less unwieldy to build notes in JSX as opposed to a prop value. Thoughts?\n. ",
    "kale-stew": "@lanmaster53 we've added a Notes component and documented it here if you're still interested in this feature \ud83d\ude42 . I was able to produce a successful markdown table with your sample code, so it's possible this issue is occurring somewhere else in your project or was patched in a recent update. \nYour code (only changed to be wrapped in an unadulterated set of <Deck> tags):\nrender() {\n    return (\n      <Deck>\n        <Slide transition={['spin', 'zoom']} bgColor=\"tertiary\" controlColor=\"primary\" progressColor=\"primary\">\n          <Markdown>\n              {`\n  | Tables        | Are           | Cool  |\n  | ------------- |:-------------:| -----:|\n  | col 3 is      | right-aligned | $1600 |\n  | col 2 is      | centered      |   $12 |\n  | zebra stripes | are neat      |    $1 |  \n              `}\n          </Markdown>\n        </Slide>\n      </Deck>\n    );\n  }\nrenders this:\n\nIf you are still having trouble with this issue in your project, feel free to reopen with updated context. \ud83d\ude42 . Hi @Phalanstere! Are you still having this issue? I would love to help, but I think I'm going to need a little more information to dig into this problem deeper.\n\nWhat do you mean by 'content of the slides gets not updated'? Is the presentation not hot-reloading the way you are expecting it to? Is the slide content not displaying as expected?\nWhat are some steps to reproduce what you are seeing on your machine? Could you take a screenshot or share some of your code?\n\nAs soon as we get a better idea of what's going on, I can help troubleshoot the error. \ud83d\ude42. There are a couple ways you could go about this currently, but we are open to changing the API and updating the docs to make this more easily accomplished! \nWould you rather\n- import an entirely separate <Deck/> component to your main index.js that would need to be wrapped in a pair of <SlideSet> tags? (this is already possible but not outlined in our docs)\n- wrap slides inline of your main <Deck/> with a set of <StyleGroup> tags that would apply a designated theme (similar to <span>)? \n- a third API type of your recommendation that I haven't considered?. @siakaramalegos thank you for pointing these inconsistencies out! we are addressing these in #577 and working to update <SlideSet /> so it actually functions as documented \ud83d\ude05 . Hi @coryarmbrecht  - thank you for submitting a PR to improve Spectacle! We would love to merge your changes, but it looks like CI is failing for mysterious reasons (The command \"eval yarn \" failed. Retrying, 3 of 3.) and your fork is out of date with the latest in our master branch.\nCould you kindly update your fork and make sure you've run yarn prettier-fix so we can merge your fix?. Consolidating my notes on this issue for our own reference. I'm going to take this issue on\ncomponentWillMount\n\ntypically replaced by the constructor or componentDidMount\nwe're using this method in two places:\n[x]  notes.js\n[x] manager.js\n\ncomponentWillReceiveProps\n\nshould be replaced by getDerivedStateFromProps\nwe're using this method in five places:\n[x]  heading.js\n[x]  text.js\n[x]  magic-wrapper.js\n[x]  component-playground.js\n[x]  manager.js. Hi @vadimshvetsov - thank you for submitting a PR to improve Spectacle! We would love to merge your changes, but it looks like CI is failing because prettier is unhappy with the markdown table formatting and your fork is out of date with the latest in our master branch.\n\nCould you kindly update your fork and make sure you've run yarn prettier-fix so we can merge your fix?. The spacing inside of that markdown table was affected by a single char, and our prettier config reeeeally wants the furthest righthand side of the box to have a completely straight line. Thank you for updating your fork @vadimshvetsov! \ud83c\udf89 . I've opened a PR in DefinitelyTyped to update our type definitions, which you can track here. It looks like the current definitions are extremely out of date with the latest features/API, which would explain the problems you're reporting @Alekos92.. @ebrillhart done!. For context: I initially opted to keep our type definitions in DefinitelyTyped because\n1- they were already there and broken, so it seemed more maintainable to just update them\n2- the TypeScript docs recommend publishing type defs to DT instead of colocating them with the package if the library is not written in TS. Honestly, I do not understand the reasoning behind this and would be open to removing the type defs from DT and shipping them with the library so long as there is no adverse side effect from doing so. The above being said, I agree that updating the defs separately from introducing the feature is a rough process and, since a bot handles merging DefinitelyTyped's PRs, there's potential for type defs to merge without the feature itself. This could get ugly quick. Tested these changes out and they look great! Thank you for updating the docs as well. This is a handy feature that should also close #583 when merged.\nI've only got one follow up request for you @MathEman-1 - could you please add this new boolean autoplayOnStart prop to Spectacle's type definitions here in our index.d.ts? If you don't want to we can merge anyway and follow up with a PR to update these, it would just be simpler if you wrapped it into this body of work. :) Thank you!. I did not test these changes with MDX so there's a really good chance this was an oversight on my part. I can dig in @ebrillhart I think I know where the problem lies. @mattfwood thank you for the PR! It looks like prettier is failing in CI. Could you please run yarn prettier-fix and push up changes so we can merge this doc update?. @ryan-roemer Do you think the CodeSandbox link might also minimize some of this bug reproduction pain? We could require at least one of these three reproduction methods is included in every bug report, so we're not limiting anyone to use of one method but we ensure there is always a way to checkout the buggy code in the issue.\nAlso, I realize now I had the sandbox link at the bottom of this section; it would probably be better to reword this template so it's a more prominent requirement for a bug report.. We might want to remove the index from this query parameter to avoid confusion. The user only needs to append their url with ?, the index before it can vary.. Small grammar nit: we've provided. What does this \\_k=wbyhif slug represent? We could probably use some clarification for the docs if we want to recommend using it. It might be handy to have some kind of markdown chart with the available query parameters for these various features, as a summary somewhere in this doc\ni.e.\nQuery | Description\n------ | ------------\n?export | Creates a single-page overview of your slides, that you can then print\n?export&print | Creates a black & white single-page overview of your slides\n... | Another cool feature that we offer. Would it be useful to just add a Default value column to this chart instead of wrapping it into the description?. Updating this thread per our discussion: we don't need it after all. \ud83d\ude42 . Could you please remove the // @TODO block on lines 38 - 41?. Could you please remove this //@TODO block? \ud83d\ude42. Could I ask why you opted to move this method outside the component?. This looks great!. Small nit: could you update this to proper camelCase? I think playgroundSetState is just a bit more pronounced. Another small nit: I think prevState is more conventional (you can see the same pattern here). Note: There's only a diff here because I reordered these lib imports alphabetically. @samwhale it looks like the docs might be wrong, when I spin up a new presentation it starts at 0 and navigating to /#/0 directs me to the first slide \ud83e\udd14 Does the same happen for you? If so, I can update the docs in this PR.\n. \n. @ebrillhart It is, but for the sake of a tutorial I thought it might be useful to cover? Open to removing it. I followed a pattern I saw in the Victory Docs for this step. I've opted to add a clarifying sentence that handles the case where a user has chosen not to use the boilerplate and does need to add the library. \ud83d\udc4d . Adding a check for the prop bulletStyle here might solve some of the snapshot issues where an empty array is being passed into the styles obj. Although, you could just opt to not pass an empty array if none of the above styles are applicable and instead return;. ",
    "jrios": "Thanks for merging! Great project.\n. No problem at all. Thanks for maintaining. Looking forward to using it more. \n. ",
    "zpao": "Actually, have some more coming\u2026\n. @mathieudutour We don't all use Chrome \ud83d\ude1b (also, I don't see presentation mode in Chrome anymore but maybe my config is screwed up).\n@kenwheeler Exactly what I was thinking (not really sure why I said visibility:hidden, I totally meant opacity for a nice fade in).\n. \ud83c\udf89\n. ",
    "garetht": "@pedrottimark That sounds great to me - thanks for looking at it!\n. ",
    "AndersDJohnson": "@pedrottimark @kenwheeler @garetht Any update on this feature? Really need it.. Haha, not on <Deck>.... @kenwheeler Which tag? Markdown formatting of your comment seems off.. ",
    "ivanoats": "Thanks, actually using the official docs here: https://dev.twitter.com/web/embedded-tweets/javascript-create. I will submit a PR linked to this issue.\n. I am having trouble getting the twttr script to load.. any comments on the approach I am taking? \nhttps://github.com/ivanoats/spectacle/blob/tweet/src/tweet.jsx#L13\nThe easy answer would be to just include it in the site template.. https://github.com/ivanoats/spectacle/blob/tweet/themes/default/html.js ?\nfrom this: https://dev.twitter.com/web/javascript/loading\n. @KyleAMathews could you share your code where you did that as an example please?\n. ",
    "KyleAMathews": "I added the script @ivanoats suggested to html.js. I also needed to make a mini Tweet component to run twttr.widgets.load() in componentDidMount.\n. @ivanoats \nAdd this to your HTML file:\njavascript\n      <script>window.twttr = (function(d, s, id) {\n        var js, fjs = d.getElementsByTagName(s)[0],\n          t = window.twttr || {};\n        if (d.getElementById(id)) return t;\n        js = d.createElement(s);\n        js.id = id;\n        js.src = \"https://platform.twitter.com/widgets.js\";\n        fjs.parentNode.insertBefore(js, fjs);\n        t._e = [];\n        t.ready = function(f) {\n          t._e.push(f);\n        };\n        return t;\n      }(document, \"script\", \"twitter-wjs\"));</script>\nThen this is the component:\n``` javascript\nconst Tweet = React.createClass({\ncomponentDidMount() {\n    twttr.widgets.load()\n  },\nrender() {\n    return (\n      \n        {this.props.children}\n      \n    )\n  }\n})\n```\n. ",
    "kevinsimper": "I git clone it and was working right away :+1: It is just not clear from the readme.\nSpectacle has been by far the best experience for creating a presentation! This is super awesome! :dancers: \n. @kenwheeler Is there a issue for that?\n. :+1: \n. I tried to update all the dependencies, because I did also find that it was Reac-router that caused the delay but then Radium seemed to break. \nI think this is important, since it essential make the presentation lag, which is not cool.\n. Still seeing it in the latest master\n\n. No, but why should that make a difference? :)\nIt seems that the build info in README is not up to date\n. The production flag is confusing as running npm run build:dist builds the js file, but npm start does not seem to have a config to serve that dist.\n. I made a working example of babel-jest after an hour of errors, so if any poor soul lands on this issue: https://github.com/kevinsimper/babel-jest-example. ",
    "adamdicarlo": "Seeing this after cloning spectacle-boilerplate yesterday. npm ls tells me I have Spectacle 1.0.5 which uses Radium 0.17.1.\nLooks like pacman's issue has something to do with this:\nanimation:[object Object] 0.12s linear 10 alternate both\n. ",
    "BenDiuguid": "This works on a clean install of Spectacle Boilerplate\nwith npm -v : 3.9.5 and node -v : 6.2.2\n\ud83d\udc4d \n. Long Live GraphQL Introduction to GraphQL with examples\n. ",
    "LeoAJ": "react-transform beta is supporting babel 6 now, try to update from babel 5 to babel 6 but looks like babel 6 is not currently supporting decorator yet, check this issue on babel 6 tracker.\n. @knowbody Cool! Totally miss that, apologized, thanks!\n. ",
    "vvo": "Sorry to just drop this but I was excited by the project, checked out in the subway and.. this slide did not meet my expectations! Good work still it seems a great project.\n. ",
    "rektide": "WebPush Away on the WebPush protocol. Couple notables: JSX free, created a bunch of constructors up top, and use one \"overview\" slide numerous times.\n. ",
    "yonibot": "Dead-Simple MobX - A gentle intro to MobX. Repo. ",
    "detj": "Okay @knowbody. That worked. The README says /#/?export instead of just ?export. I think it should be updated.\n. Yup, it does.\n. ",
    "insin": "Looks like the 1.0.3 tarball has been bitten by the npm history bug, which has only been fixed in npm2 at the time of writing: npm/npm#9642\nIt looks like previous spectacle releases included node_modules/history and all of its contents as a workaround.\nDeleting node_modules/history before running npm publish will get around this - here's how react-router does it, as it was recently re-bitten by this bug: https://github.com/rackt/react-router/commit/4e0a633c2741225e73c378d820bc126965cc6f8c\n. ",
    "aickin": "Awesome. Thanks so much, and thanks for creating cool stuff and putting it out into the world!\n. ",
    "AlbanMinassian": "Update also README.markdown because link http://localhost:3000/#/?presenter not work on windows (firefox 42 or chrome 38)\n. Why not, but can you before update package.json to set \"babel-core\" with a correct version (see @pedrottimark comment) \nCan you also update README.markdow like https://github.com/FormidableLabs/spectacle/pull/142/files\nOr accept this pullrequest :-)\nAmi44\n. ",
    "Hunter-Github": "I don't get the need for all this react-ful awesomeness when there is remark.\n. ",
    "iamdustan": "I was feeling rather kenspired.\n. ",
    "veggiemonk": "This change made impossible to npm install spectacle behind a company proxy.\nping @kenwheeler \nWhy not publishing a package?\n. @BaumgartnerWilliam IT WORKED!!! It changed everything for me!\nThank you very much!\n. @kenwheeler Thanks for the quick answer. I'll close this as soon as the PR is merged.\n. There is a workaround here #150 for those who are behind a proxy. Thanks to @BaumgartnerWilliam\ngit config --global url.\"https://github.com/\".insteadOf git@github.com:\ngit config --global url.\"https://\".insteadOf git://\nIssue can be closed since this issue is searchable.\n. ",
    "BaumgartnerWilliam": "Hi @veggiemonk \nHave you configured node and git to use your company proxy ? If that's not the case here's the how to\nYou can easily check it with :\n npm config list\ngit config --list\nI am behind a corporate proxy too and it does work...\nPS: NPM seems to ignore .gitconfig in some cases so you can simply do\ngit config --global url.\"https://github.com/\".insteadOf git@github.com:\ngit config --global url.\"https://\".insteadOf git://\nas mentionned HERE \nHope it helps,\nCheers.\n. ",
    "toddmotto": "@pedrottimark Thanks! Yes, I think the second pattern is much clearer - just wanted to provide potential options for discussion :dancer: \n. ",
    "oliviertassinari": "I wanted to submit a PR on another topic. Looks like it will be a two in one :). \n. Oups, I have forgotten to remove this line from my commit. Fell free to fix it, sorry. \n. ",
    "iansinnott": "I may have misunderstood the intended use of children in this component, but I was hoping to render those children onto the screen as a formatted text block, just like CodePane does when passed a source prop.\nI'm guessing the following would work fine:\njs\n<Slide transition={['zoom', 'fade']}>\n  <CodePane lang='jsx' margin='20px auto'>\n    {`<div></div>`}\n  </CodePane>\n</Slide>\n. Cool, I'll close this out then and reference if in PR if i end up making one\n. ",
    "dumbNickname": "Is your issue present after building pure spectacle on master branch, or have you already changed something? I am asking because I had the same issue on Widows, which (in my case) was related to improper export of presentation component and hmr was getting lost. Currently everything works fine,\n. I wanted to cut my presentation into smaller parts as well and bumped from the same problem. I found a nice solution here: https://github.com/MarkRedeman/mutation-testing-in-php/blob/master/src/slidify.js (all the credits go to @MarkRedeman)  and used it in my presentation as well:  https://github.com/dumbNickname/summit2016-react-redux . Maybe spactacle could expose such a utils function (probably it would be easier to maintain than some children lookup logic). Hope it helps!\n. ",
    "agdolla": "Did a fresh install of spectacle boilerplate and now it works\nsorry for the noise\n. ",
    "scottnonnenberg": "Development mode today requires a custom server backend, because reloads result in 404 responses. It also demands that the deck be served at the root URL of the website, because new slides, no matter where the presentation is hosted, result in a rewritten URL of '/1', '/2' and so on.\n. ",
    "ericclemmons": "@kenwheeler That'd work great for me!  Either that, or using whatever window.location.path (or whatever /my-presentation is) and using hashHistory (e.g. /my-presentation#0). \n. ",
    "bencripps": "Slide Wrapper\n```\nimport { Slide, Text } from 'spectacle';\nexport const SlideWrapper = ({ text }) => {\n    const slideProps = {};\n    return (\n         \n{ text }\n\n         );\n}\n```\nDeck\n```\nimport { Deck } from 'spectacle';\nimport { SlideWrapper } from './SlideWrapper';\nconst app = () => {\nreturn (\n          <Spectacle>\n               <Deck><SlideWrapper text=\"hello /></Deck>\n          </Spectacle>\n     );\n\n}\n```\n. ",
    "tdmckinn": "Put together this gist something like this seems to work for me  when trying to import children slides and or grouping slide section together.\nhttps://gist.github.com/tdmckinn/7d47bf5e088457a571fdcfa043f684e8 \nOnce my presentation past 200+ lines I immediately started trying to make the presentation more modular. React can pretty much figure out the elements in that array form which are children of Deck.\nAs a follow up I started receiving: Each child in an array should have a unique \"key\" prop. Check the render method of Presentation\nI had to add React.Children.toArray in my render method and that seemed to fix the issue.\n. ",
    "gpltaylor": "I had the same issue. Was surprised that someone was able to make React Components not support Components. This is not an easy thing to break! :insert smiley face here:\nThe following allows you to split up the code base and include where required. As the code needs a given Type (For example a Slide) if the Component is not of this type (or implements the expected members) then the code dies. It doesn't handle this gracefully. \nThis is a little poor as I would like to use this for a lot of presentations as the idea is sound. However, I don't want lots of JS projects with slides copied and pasted.\nhttps://gist.github.com/gpltaylor/d0e6a25bcacc00dddda19295a7eb2dd1\n. ",
    "jamiebuilds": "Yay\n. ",
    "patrick91": "@ryan-roemer I'd make it at least configurable if we have something like reveal :)\nMy remote has only up/down buttons :\\\n. @kenwheeler can you point me at some examples? I wasn't able to find anything.\n. ",
    "halhenke": "Glad i checked this PR - was thinking of taking a crack at the Reveal style grid as in #57 and was wondering how people would feel about the change in key bindings (in Reveal the left and right arrows switch between \"stacks of slides\" while up and down goes between slides/fragments). \nMaking it configurable should make everyone happy.\n. ",
    "cimi": "Sorry to resurrect this after so much time, but there's still a problem here. I seem to be able to reproduce the initial problem on a fresh checkout of the boilerplate (using Spectacle 1.0.7).\nI had tested when you initially fixed and it did work in my presentation. However, my presentation broke when I wanted to generate 14 slides programatically, instead of 9.\nI've tried adding a key={} prop to the generated slide to get rid of the warning in the browser console but that doesn't help with the navigation breaking.\n. ",
    "sidsarasvati": "Thanks for the explanation. \n. ",
    "hacke2": "@kenwheeler I would like to create a visual design website based on spectacle\uff0cbut when I add some slides I don't konw current Index when I append other component in current slide\n. but...how..\n.  extend Slide  or  extend Desk?\nI see desk.js has this.context.history\n. ```\nclass MyDeck extends Deck {\n  constructor(props, context) {\n        super(props, context);\n    }\ncomponentDidMount () {\n    console.log(this.context.store.getState());\n}\n\n}\n```\n. I see #160 and know why  is there this problem ..\n. Why such a design ?\n. If I want use browserHistory, can it http://xxxxx/spectacle/0 ?\n. Yes, but How to encapsulate based on text ? \n. ok, thx!\n. ",
    "XVincentX": "Hey @kenwheeler,\nI do not know how much you're involved in this project; however my use case here would be to change the state of a Victory Chart component in order to display different data instead of going to the next slide. Does that make sense to you?. ",
    "adamscybot": "On the same note, is there a reason why react and react-dom are dependencies in this project and not peer dependencies? Most projects have moved over.\n. ",
    "joshburgess": "I just tried to update react & react-dom in the spectacle boilerplate so that I could change the hot reloading method to the new react-hot-loader v3 beta so that I could use use functional components with hot reloading in the presentation I'm building, and I kept running into the \"Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs\" error due to hard dependencies on react & react-dom @ 0.14.8 somewhere within Spectacle or one of its dependencies (react-transitions-group maybe?). \nEverything else seemed fine, but having multiple versions of react was breaking it, so I had to go back to 0.14.8, and then hot reloading wouldn't work anymore due to the new beta requiring v15+. Basically locked me into the current boilerplate with out of date versions...\n. I tried to put together a PR after posting that, but had issues when I went to test my fork and didn't have time to go figure out what was breaking it. I think there were some incompatibilities with some of the dependencies.\n. I'm not sure. I'd have to think about it. I'd be down to collaborate on this/contribute also if you want. \nOh, and just to be clear, I wasn't bashing the transitions. I've noticed they're actually quite smooth if you're on a pretty recent computer with a strong CPU, but they were a bit laggy/choppy when I was testing on older laptops & phones. I thought that they might have been CSS3-powered until I looked and saw they were using react-tween-state.\nI'm not 100% sure if something like velocity or GSAP would provide a performance boost there, as I don't have much experience with react-tween-state, but I think there's a good chance they would. I have a lot of experience with velocity and have seen it do really complex animations on some of these same older laptops/phones I've tested with and they were really smooth. I know GSAP is also really, really good, but I'm not sure if there's a React wrapper/integration library for it yet.\n. Besides being based on spring physics, does react-motion have any performance advantages over react-tween-state?\n. ",
    "markerikson": "Would also be nice to at least set duration for stuff like <Appear>.  With Powerpoint, I usually just want my appears to be instant-on-next.\n. Cool. Looking forward to the next version of the awesome! :). Yeah, I'm rather confused by all this too.  I think I\"ll have to stick with my existing workaround of doing a bunch of array exporting and concating.. Yeah, that's almost exactly what I'm doing myself.\nI'd still like to be able to render a <MyCustomSlide /> that itself renders a <Slide />, but I've been busy and haven't had time to play around with that idea further.. I'd be fine with adding raw-loader to spectacle scripts.  After all, that's the point of having a custom fork of react-scripts in the first place.  (Also, spectacle-scripts needs to have the latest version of react-scripts merged in anyway.). Pretty much, yeah.  . Sweet, thanks.  Can I get an updated release with that change too?. ",
    "ryanrogalski": "Closing this as I added my own cjsx support, if you want me to make a PR just say the word.\n. ",
    "pawel2105": "I've spotted one thing:\n@bebraw kindly linked one of his presentations in the examples issue. There seems to be a FOUC for slides that have image elements underneath text. Notice the Module Counts slide - once the image loads it repaints and moves the text up. See attached gif*:\n\nPossible solution would be to maybe inject a transparent gif with the same dimensions that gets replaced when the asset loads. Or is this overthinking a pain point that isn't really a pain point? For reference I'm in \ud83c\uddff\ud83c\udde6 browsing on a 4G connection and unfortunately still suffer from poor latency.\n- The gif doesn't do a good job of portraying the severity of the jolt, but it's very noticeable.\n. ",
    "ssssssssssss": "How about having a presentation render for React Native?\n. ",
    "0xR": "I think it should be possible to run your entire presentation offline. So no more CDN's in the bootstrap. Maybe download the custom fonts during postinstall. Running offline also make the problem with slow images less visible.\n. Thanks for looking into it!. Thanks for addressing this! . ",
    "jo12bar": "Is the autoplay feature discussed in #42 still of interest? If it is, and no one else is working on it, I'd be willing to give it a crack.\n. ",
    "coopy": "I'm thinking this type of feature should be provided as a separate installable component much like https://github.com/thejameskyle/spectacle-code-slide\n. These templates are great! I made a couple of suggestions. :shipit: . ",
    "captainsafia": "Hello! I'm a contributor on the nteract project and I think I might have some pertinent info. nteract is a desktop-based version of the Jupyter interactive notebook that is built using React. One of our initiatives is separating some of the React components used in the application and making them importable in other contexts (link). Another is the ability to connect a Notebook or a cell to a remote kernel (link).\nThese are all on the roadmap, but the idea is that hopefully you'll be able to bring an executable code cell into any React-based application. I can't promise you anything immediate or in the near future but it is definitely possible and doable with some people power on it.\n. ",
    "firedev": "Try it like this:\n<Appear>\n  <div>\n    <Whatever />\n  </div>\n</Appear>\n. ",
    "zekenie": "Do you mean that whatever is inside the appear needs to be a div?\nSent from my iPhone\n\nOn Jul 22, 2016, at 12:28 AM, Nick Ostrovsky notifications@github.com wrote:\nTry it like this:\n\n\n\n\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Ok thanks I'll give it a try\n\nSent from my iPhone\n\nOn Jul 22, 2016, at 7:56 AM, Ken Wheeler notifications@github.com wrote:\nIt doesn't need to be a div but it needs style passed down. Appear works by tweening opacity. So if your TImelineEvent isn't passing down style to its first rendered child, that never happens. So on that div, you could write style={Object.assign({}, yourStyles, this.props.style)} or some equivalent.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "jonasws": "Any update on the progress of said CLI tool, @kenwheeler?\n. @kenwheeler Care to take a look?\n. @stefvhuynh @kenwheeler Is this getting any love lately? I'd be happy to help out if the original submitter is busy or \"doesn't need\" this feature as badly anymore.. Do we also want to be able to use up/down to navigate slide sets while in presenter mode, similar to how it is done with reveal.js? As far as I know it would not conflict with any existing behavior. . @ryan-roemer As the SlideSet components at the time is actually not documented, is there any behavior related to it that we actually need to keep? In terms of backwards compatibility with linear navigation etc? I figured it may be a smooth solution to have SlideSet work as a \"vertical grouping\" of Slides.\nIf we want this behavior to be optional, I'm sure one can do this with a prop ala verticalGroup, which would then default to false.. @ryan-roemer I've tried to get this working, but have failed to achieve some of the nitty-gritty details. \nI've heard talk about Spectacle eventually getting a \"custom keymap\" feature, and I think one should revisit this issue when that is in place. At the moment there is no good way to make this backwards compatible, and make it play along nicely with third-party components such as the Terminal component.\nI think it would be wise to start this from scratch, as the progress of the codebase has overtaken me in trying to get this all working (I cannot promise I will be able to put in the tine and work myself). You may want to close this PR to indicate this is not something being currently worked on, and potentially create an issue with a \"feature request\" label. That way the community can all join in and discuss how to best implement such a major feature.. Looks to have been fixed. Closing.. ",
    "Koleok": "It seems like the context key slide is present to provide this functionality, but it is never used anywhere else in the component.\n. ",
    "welcoMattic": "I didn't know that 2-d grid / slide sets feature is planned. It's looks ok to me to close my PR ;) No regrets\n. +1 for a prop to allow horizontal-nav or vertical-nav ;). ",
    "zhaozhiming": "Sorry, the reason is because I use the old index.js file.\n. ",
    "bmathews": "@ebrillhart If the docs have all the proper webpack loaders, yeah.\nhttps://github.com/FormidableLabs/spectacle/blob/master/webpack.config.js#L43-L58\n. Nope\n. /cc @kenwheeler @rgerstenberger \n. not needed, since the prior lib will cover it\n. npmignore follows same rules as gitignore. prior src will cover example/src, so this is not needed\n. typo: bespoke script tage. ",
    "sebald": "Ran into the same problem :-/ Would be nice to have a default lineHeight for <Text> and <Markdown>.\nI tried <Text style={{lineHeight: 1.3}}>...</Text> as a work around, but this isn't working (for lineHeight) either.\n. @waywaaard Thx, I actually just checked the source code and found it :) But this only works for <Text> not for <Markdown> :-/\nEDIT: My above example works btw, I used a <Markdown> and not a <Text>. My bad!\n. ",
    "costaoeste": "No, im importing the elements to a single page , but on my main.js im doing this:\n\nMeteor.startup(() => {\n  ReactRouterSSR.Run(routes, {\n    rootElement: 'app-container'\n  });\n});\n. \n",
    "vadimshvetsov": "There is another way, but it's more complicated.\nSometimes you need to set your own downloaded font, which does not exist at Google Fonts.\n\nAt first you need to place your font at assets folder for example (of course you can make nested folders as I did). Let's say it would be a .woff font file.\nThen you need to add module resolving rule at webpack.config.js like that:\njs\n  module: {\n    ...\n    }, {\n      test: /\\.woff$/,\n      loader: 'file-loader',\n      include: path.join(__dirname, \"assets\") // Or different path if you use store fonts there\n    }],\n  }\nThen you can register fonts inside any custom CSS file and import it inside ./presentation/index.js. Is it possible to change width with styled(Slide)?\nI'm trying to add styles to SlideContent with className from styled-components, but it breaks Slide.\nHere is a code:\njs\nconst StyledSlide = styled(Slide)`\n  && {\n    width: 1500px;\n  }\n`\nAnd the nothing is shown except background.\n\nEven this sample breaks Slide:\njs\nconst StyledSlide = styled(Slide)``\n. Hey, @kale-stew . Thank you. I've done with it. That was strange, because I've only tried to change one word via github interface.. @ebrillhart I've faced many restrictions and workarounds while was using spectacle-code-slide because of incompatibility with new spectacle versions. The idea with jumping in code is so awesome for presenting, but there is no active maintainers. I see many great PR's and nobody merges this. I would like to maintain this library or trying to transfer this functional to spectacle as a component.Is it possible? @kenwheeler has an access for maintaining this library as I know. @ryan-roemer yeah, I know that this project is not a Formidable project, but there is a closed issue tracker and the last publisher is Ken \ud83d\ude04 Anyway, I would be glad to do anything in this direction to get convenient code-walking slide (maintain or reimplement inside spectacle)\ncc @jamiebuilds. ",
    "BrandonBoone": "There wasn't anything in the project that was actually blocking me from accomplishing this. For whatever reason, my initial thinking was that I needed to have an <Icon> component to render <i class=\"\"></i> baked into the library. I actually did create this component (basically a copy and past of another component), and using the boilerplate as a template, I added font-awesome and font-awesome-webpack. In hindsight, this was probably overkill as I could have just used an <i className=\"\"></i> directly and perhaps even just pulled fontawesome from a CDN.... :-/\nOh, well... It's working nonetheless, and the presentation went over well!. \nAnyway, fontawesome does pair rather nicely. While it may be overkill for the core library, you could consider it for the boilerplate.\n\n. ",
    "alexandercbooth": "Hi @just-boris,\nSpectacle uses prism for code highlighting so you could just override the defaults in the way they recommend. \nFor example, in your index.html file you could include:\nhtml\n  <style>\n  .language-jsx,\n  .style {\n    font-size: 4em;\n  }\n  </style>\nwith the following slide, \njsx\n<Slide bgColor=\"black\">\n          <Text fit textColor=\"secondary\">\n            With default font size\n          </Text>\n          <CodePane lang=\"jsx\">\n             import React from \"react\";\n          </CodePane>\n</Slide>\nwhich by default looks like this:\n\nAnd once you add in the css to the html file:\n\nI am sure there are other (probably better) ways to do it, but that was what seemed the most straightforward to me. \nHere's a link to prism's faq where they mention this: http://prismjs.com/faq.html\nHope it helps.\n. Thanks @kenwheeler, I'll definitely checkout victory! And I love the idea of component playground (I always try to make presentations with as dynamic content as possible). \nI can get iframes to work that render an outside page, but when I try to get them to load a local page that I have created, say in a folder test/index.html, it only renders a smaller version of the presentation itself. I think it's just a silly error on my part with the path, but where should I place my  test folder in the spectacle-boilerplate directory and how should I call it in the frame itself?\nAt the moment, I have placed the folder in the base directory of spectacle-boilerplate and am calling it in my presentation/index.js like this:\njsx\n<Slide>\n   <iframe src=\"../test.html\"></iframe>\n</Slide>\nThanks so much!\n. Sorry, I knew it was something silly. New to react -- thanks again for your patience \ud83d\ude05.\n. ",
    "just-boris": "@alexandercbooth well, that works, I have used some similar workaround in my presentation.\nBut the concept of component-based presentation means that you should not touch styles directly. For example, now you can specify Heading size with the respective prop, so I'd like to do the same for code block.\nThis is why I created this issue.\n. @kenwheeler should I create a new theme for that?\nSo far I am using default and I pretty happy with it, except code examples, as I showed on the screenshot in my initial comment. \n. Well, that solves the question how to change code font size at one place and apply this everywhere.\nBut there is one more question: are you happy with current defaults? Now the code looks very small comparing to other texts size.\nAlso, you can look at Shower \u2013 another presentation framework, that has better text/code size ratio, IMO.\n. Now that's clear, thank you for elaboration!\n. ",
    "nick-brady": "old thread.. but I looked here while trying to find the answer. You can pass textSize={20}\n<CodePane\n            textSize={20}\n            className=\"code-blocks\"\n            lang=\"javascript\"\n            source={code}\n          />. ",
    "chabou": "Workaround : \nYou can try to put this in index.html file.\nI did this, to put my company logo on top left (position absolute) on every slide. \n. I didn't share code. Only the idea that putting whatever in index.html will make it visible on all slides :). ",
    "Naoto-Ida": "@chabou Thanks for the simple solution!\n. ",
    "dbendy": "@chabou: can you please share your solution again?  I don't see it in your comment above.  Thanks!. ",
    "flexzuu": "Instead go to http://localhost:3000 and hit enter. \nYou will get redirected to something like http://localhost:3000/#/?_k=wu0uco.\nNow add ?export like: http://localhost:3000/#/?_k=wu0uco?export and you are ready to print. You can even add &print to get http://localhost:3000/#/?_k=wu0uco?export&print for a black white version.\n. Yeah ?presenter is the same again you need to add it after the hash. \nMaybe we need to make that more clear in the docs. \nOr even just redirect to the right URL \n. ",
    "hkrutzer": "Thanks! That worked\nI feel like the docs can be improved here, there is a direct link to http://localhost:3000/?export in README.md, and one to http://localhost:3000/?presenter which doesn't work either.\n. Someone in Gitter was having this problem as well, so I made a PR. Redirecting might be better though.\n. ",
    "rawrmonstar": "I think this is an optical illusion? Using a color picker all of the blue in the screenshot is #1024fa. This appears to be resolved.\n\n. This doesn't seem to be an issue with Spectacle itself.. I'm closing this in favor of #294 since #294 includes more discussion on the issue.. This was fixed in #546 . @thochra sorry for taking so long to investigate this. I can no longer reproduce using the current spectacle boilerplate and up-to-date stable Firefox. Please let me know if you are still experiencing this issue. Thanks \ud83d\ude04 . I'll do this today. ",
    "JonathanCooperD": "After digging into this a while, it appears that Redux is pretty heavily integrated into the app. To strip it out will require some fairly heavy rewriting. I am a bit reluctant to go down that path unless future releases/updates will never need any of the features Redux has to offer. Let me know what you think, I am happy to discus more.\n. A PR has been submitted addressing the new theme.\n. ",
    "kwelch": "Is there a specific CSS solution in mind to use?\n. One thing I really liked with react-toobox is that they apply styling using an HOC and also export the unstyled components. That is one flexible way to handle it, but I am not sure how well that concept would apply to spectacle. Just an idea. \n. Will review Monday. Thanks!. My bad for forgetting to review, but this is exactly what I was hoping for. Awesome \ud83c\udf89 . I reviewed the PR and I see how you would be able to say that Slide 2 goes to Slide 5 with the goTo prop.\nHow would one setup a button on a slide that would allow you to go to either Slide 5 or Slide 3?\nI apologize because I didn't describe this functionality well. \nHere is my attempt of a graph of what I am hoping to be able to do. \n1\n      |\n      2\n     / \\\n    3   4\n   /|   |\\\n  5 6   5 7\n. Awesome! Thanks. . That is epic! Nice works. Thank you so much for this. Cannot wait to use it. . ",
    "carlos-kelly": "I've noticed that as well before and after the conversion to VictoryAnimation. Wrapping <Markdown /> in a <div> appears to do the trick. Not sure why yet.\n. It's done.\n. You're right. I've added support to enter into Spectacle with any valid slide index with checking for too big or negative numbers.\n. LGTM\n. I am able to base base props into the <S /> tag. It does require a type however.\nHere is what I am seeing:\n<S type=\"bold\" italic caps textColor=\"#ff0\" bgColor=\"#000\">Hello</S>\n. @ryan-roemer Thanks for the suggestion! That worked.. This looks good to me \n// cc: @kenwheeler . Yeah, we\u2019re going to add support for a button that does effectively calls goTo and supports the slide number or identifier. . @kwelch Hopefully <GoToAction /> gives you what you need. Two configs supported, standard button or custom rendered component.. @mAAdhaTTah The file is incomplete. We get an unexpected end of line.\nhttps://unpkg.com/prismjs@1.8.3/prism.js. @ebertmi This is the first phase in rewriting the themeing story and also a general refactor. We want to move to a modern css-in-js styling solution. Then look at where things are in how to make theming more approachable.. @philpl Yeah that sounds fine!. I'd prefer to use Object.assign or object rest spread over the lodash assign usages.\n. \ud83d\udc4d \n. viewedIndexes is just a property on the class because we don\u2019t need to re-render the Manager when it changes. Therefore having it in state isn't necessary.. The goToIndex() func prevents the infinite viewing loop. If we\u2019ve already seen that out-of-order slide, let\u2019s go to the next unviewed index.. Will the first element of these arrays always exist?. \ud83d\udc4d . Should we also pass context? I know theming uses it. (Same with other components)\nOr alternatively \nconstructor() {\n  super(...arguments);. ",
    "QuantumInformation": "Thx, what is the easiest way to create the /docs folder as an output? All the references point to /dist. roger, that simple, cool!. that worked!. thanks!. ",
    "jpwesselink": "@MarkRedeman Using a secret would be an easy way of to prevent non-presenting users from running the show. Have you observed how this was solved in revealjs?. ",
    "sirinath": "Jupyter integration may be similar by Jupyter does not support much user interaction and live data.. ",
    "elazzabi": "The check is done here, but looks like it's not working :question: . ",
    "sibelius": "jsx\nloaders: [{\n      test: /\\.md$/,\n      loader: \"html-loader!markdown-loader?gfm=false\"\n    }, {\n      test: /\\.(js|jsx)$/,\n      exclude: /node_modules|assets/,\n      loader: \"babel-loader\",\n      query: {\n        presets:['react', 'es2015'],\n        env: {\n          development: {\n            plugins: [[\"react-transform\", {\n              transforms: [{\n                transform: \"react-transform-hmr\",\n                imports: [\"react\"],\n                locals: [\"module\"]\n              }]\n            }]]\n          }\n        }\n      }\nexcluded assets folder from webpack babel loader. yep\nthis is the breaking test: https://github.com/sibelius/jest-everywhere/blob/master/presentation/tests/presentation.spec.js#L8. the failure is described above: https://github.com/FormidableLabs/spectacle/issues/270#issue-201531580\nyou can test using yarn test\nmy guess is that this is a problem with jest and raw-loader. I've tried this https://github.com/sibelius/jest-everywhere/blob/master/package.json#L56\nbut didn't worked it. ",
    "salzhrani": "Maybe making it an extension is better?. rebased and added documentation. ready for review.. ",
    "kachkaev": "Great to see that PR is already merged to master! What are the current plans on releasing a new version with styled-components? Just curious.. ",
    "alexrussell": "Assuming you're using the boilerplate, open up server.js and look at line 11. Either change it there or pass PORT in as an env variable.\nIf you're not using the boilerplate, then as far as I gather from the docs, you have to write your own dev/build scripts anyway, so change it there.. ",
    "rsp2k": "Good explanation, this \"issue\" should be closed.. ",
    "elijahmanor": "This is an awesome feature! Is there a plan on a new release of spectacle that will include this?. ",
    "stefvhuynh": "@kenwheeler, there are some pretty gnarly merge conflicts in this branch. is @zachhale around to help sort it out?. lgtm. just a few nitpicky style things.. :+1:. @exogen, the unit tests are passing on my machine on master and on this branch.. yeah, it looks the CI failure is the timeout on several PRs here.. @kenwheeler, should we merge this even with the CI failure?. Can we put this on one line so that's uniform with the rest of the code?. Unnecessary space. Same thing here.. indent. indent. ",
    "jmfirth": "This was done a week ago.  I thought it was just broken since the front page README contains doc about it and came here to fix it.  https://github.com/FormidableLabs/spectacle/pull/284. ",
    "jlongster": "Responded to review!. Sorry for the churn! I'll see if the tests pass this time myself.. Yay they passed! Thanks for the quick review. Let me know if there is anything else.. ",
    "Schoonology": "On an unrelated note, what is the best way to npm link Spectacle into a Spectacle Boilerplate presentation for local development?. I'm not sure what the failures are. There are local test failures, but they're not different than the results on master.. I'm sorry I don't know enough of this ecosystem to be more useful, but some amount of re-trying eventually passed the install step. Even though I have automated this part of the process, I have yet to find a repeatable solution.. This is fantastic news, @ryan-roemer, thank you!. ",
    "kitten": "@denysdovhan another solution would be to use our prebundled UMD build. So instead of just importing spectacle directly, you could try to alias it to spectacle/dist/spectacle.js\nThe bundle in there is prebuilt using Webpack, so it doesn't actually call require to mount the CSS sheet.. @ryan-roemer it shouldn't no. Those files only add classes that we switch to for prism themes. In fact, we could also just inject them globally.\nor we could alternatively add them using emotion:\n``js\nconst darkTheme = css\n  / prism theme /\n`\nconst lightTheme = css/* prism theme */\nconst PlaygroundEditor = styled(Editor)${p => p.useDarkTheme && darkTheme}\n  ${p => !p.useDarkTheme && lightTheme}\n```. @ryan-roemer those other CSS imports are gone in the new react-live based version :wink:\nEdited to add some proof: https://github.com/FormidableLabs/spectacle/blob/master/src/components/component-playground.js#L1-L4. Talked to @carlospaelinck and this PR will be superseded by an up-to-date one. @mAAdhaTTah No, it's still not resolved. I've actually started to think about this and how we can solve it, but it's unfortunately really tricky. We're trying to bridge the gap between the transition group in the Manager and the Slide component. So right now there must not be any wrapping components in-between those, so the transition methods can be called on the slide, which then manages its own transition.. @carlospaelinck where did you encounter these errors? I can take a look and see whether it outputs any warnings/errors w/ this PR\nEdit: Ok, I see what you mean. That's not fixed but I'll make the change\nEdit 2: So the warnings are coming from the playground. I'd have to add a small component inbetween react-live and emotion to make the errors go away. Separate PR?. @carlospaelinck I've got a follow up PR for the props issue here: https://github.com/FormidableLabs/spectacle/pull/391 (includes a fix for the key propagation). Quick note after testing Safari w/ @carlospaelinck: this doesn\u2019t take into account yet that spectacle might already be in full screen mode\nEdit: It turns out that I can't replace the fullscreen element for Safari by closing and reopening as browsers only accept a fullscreen request as part of a user interaction.. @evertmi the way to go if we need more fullscreen-able components is definitely an abstraction, maybe even a portal component, to support Safari.\nFor now this should definitely be sufficient for the current use case. It doesn't seem like this will be necessary after #399. It turns out that we don't need normalize anymore. Most components do accept the style prop and use it with emotion to add it to dynamic styles. In cases where that\u2019s not supported the theme would also be a place to modify styling.\nBut are there any components in particular, that you\u2019ve noticed, that do not accept the style prop. Unfortunately it would take a while to go through all of them otherwise \ud83d\ude05. @ebrillhart It was started by Ken before he left. Not sure if any more cleanup work is needed :). Since this is not our library we can\u2019t do much to fix it ASAP, but there\u2019s a PR open over at the spectacle-code-slide repo: https://github.com/thejameskyle/spectacle-code-slide/pull/45. cc @kenwheeler: Could it be that the portal messes up its own position, or maybe getBoundingClientRect is not quite doing the right thing we want it to do on the magic element?. Hm, unfortunately I think that the order of style tags in your head tag is reversed. Right now there\u2019s no solution for SC to work around that apart from using SSR.\nIf you wrap your styles inside the styled component in \u201c& { ... }\u201d that will add the class twice around your styles, thus increasing specificity.\nSorry, I\u2019m not sure how to solve it in a more sensible way right now, but we\u2019re working on a Stylesheet provider over at SC for this exact problem.\nYou could also try out emotion, since the API is quite similar . @prayasht do you have time to create a little reproduction on CodeSandbox or sth similar? That should give me an environment to find a solution in combination with emotion . Hm, adding a prism theme css file should still work. Can you post a small snippet of your index.html and maybe a screenshot of the codepane\u2019s styles in the devtools please?. That looks like the solution here :)\nI\u2019ll close this issue for now, but feel free to comment and ask more questions if you need more help :). The exported Deck component renders three other components and passes most props on to the Manager. But unfortunately currently the StyledDeck there doesn't accept additional classNames: https://github.com/FormidableLabs/spectacle/blob/master/src/components/manager.js#L39-L50\nHowever, since it utilises position: absolute you should be able to just wrap the entire Deck component in a position: relative container. I haven't tried this before but it might be worth a shot :wink:\nEdit: It works reasonably well: https://codesandbox.io/s/qz29xpowqj\nBut it'll probably be necessary to make further adjustments to get this to work perfectly. I'm a little confused :wink: I think you've got the wrong \"spectacle\" project here. Please be more careful next time.\nEither way, this is likely a question that belongs on StackOverflow, and not into GitHub issues.. That is a conscious limitation of create-react-app. It says right here that it doesn't allow webpack loaders to be specified manually as port of import statements:\n\nDo not use import syntax to configure webpack loaders import/no-webpack-loader-syntax\n\nFurthermore it doesn't come with the support for any kind of raw-loader out of the box.\nThere's an ongoing issue on how to improve this situation: https://github.com/facebookincubator/create-react-app/issues/3722\nMeanwhile you have three other options luckily:\n\nCopy the contents of your file over into a js file and use template strings (this will allow you to not change them drastically)\nUse rewired to add the raw-loader for specific file names yourself: https://github.com/timarney/react-app-rewired\nor (the probably worst option) eject and configure it yourself\n\nI don't think there's a lot about it actually.\nOne option would for us to add a raw-loader to spectacle-scripts, which we can discuss, but that'd mean that spectacle-scripts would further diverge from the regular react-scripts.\ncc @kenwheeler . Hm, weird \ud83e\udd14 I previously made sure that this is working, but I've read in some other issue before that it isn't \ud83d\ude22 \nOur theme's specificity should be the same as the theme you're importing https://github.com/FormidableLabs/spectacle/blob/master/src/themes/default/prism.dark.js\nI guess it'd work if you could add the stylesheet after emotion's sheet, but that's not possible I suppose \ud83d\ude05 I'll see if I can put together a quick reproduction to try and fix it. Wait, I just tried it and it worked... I'm a little confused, am I doing something non-obvious that we need to clarify in the docs \ud83d\ude15 \ud83d\ude3f \nis it maybe the location of the <link> tag? I think, in case it is, that'd definitely be something we'd need to add to the readme \ud83d\ude05 (hope it's not too hard to recognise what's going on in the gif, but I'm adding the tag to the end of the head there)\n\nEdit: btw it's a CRA app so I'm just editing its index.html. @peggyrayzis oh dear, that explains it. The themes are being mixed...\nWe\u2019re back to my original dilemma then I guess. I\u2019d like to prevent the built-in prism themes from being dynamically imported when they\u2019re being used.\nMaybe I can add a \u201c.builtin\u201d class to them and the CodePane so that they don\u2019t match at all when they\u2019re not in use. But that in turn would require us to introduce a new prop to disable the builtin themes \ud83e\udd14. @peggyrayzis That's an amazing idea \u2728I'm working on a quick PR now, but I'm thinking of calling it theme=\"external\" to make it more explicit. (hope that makes sense)\nAlso adding a oneOf prop-types validation, which was long overdue \nEdit: Opened a PR to get this fixed \ud83d\ude01 . @kenwheeler I just went ahead and merged this since it was pending for a while. If anyone else finds sth wrong with th it we can always path or revert :). Unfortunately a couple of third party libraries depend on up/down keys for their own transitions, e.g spectacle-code-slide\n@kenwheeler is it worth adding a prop for enabling this optionally?. Can you provide a reproduction please? it could simply be that the language you're trying is not supported or that something is going wrong with either the theming or a custom prism CSS file.\n\nin chrome dev tools I see <pre> tag with language-prism class\n\nSpectacle performs highlighting using the react-live editor, which doesn't use global classes but highlights by generating html using prism's utility functions.. @MikeDabrowski Weird! Maybe someone else will surface some more details at some point so we can document some gotchas :). I think the problem here is quite simple. Spectacle's Appear component is right now just passing on a style prop;\nhttps://github.com/FormidableLabs/spectacle/blob/master/src/components/appear.js#L81\nNow unfortunately some components take that style prop and are interpolating it into emotion, which then considers it part of its styles, which means that it'll be mounted into the style tag. \nhttps://github.com/FormidableLabs/spectacle/blob/master/src/components/text.js#L99-L103\nNow, this is not a horrible thing to do, but it'll definitely constrict the performance, as it'd be much faster to in this case just use the normal React style prop, which I'd consider a best practice for both emotion and styled-components.\ncc @kenwheeler: Any thoughts? Would this be a pain to change?\n. Duplicate of: https://github.com/FormidableLabs/spectacle/issues/512#issuecomment-382697952 (link leads to a proposed temporary workaround). @kenwheeler I've tried researching and refactoring to support this use-case before, if you recall it, and the biggest (only?) blocker was how slide transitions are handled using hooks on the component, instead of props or other means of animating.\nNow that popmotion pose is pretty solid I'd propose for us to refactor to that and introduce a state for the transitions, i.e.: 'before-active' | 'active' | 'after-active' (this would probably be enough to encode all three states and hence transitions of a slide). @kenwheeler it's a long way off tbh, but such a refactor would ultimately aim at removing all assumptions around the deck, slides, and context structure. It's a huge chunk of work though. Maybe a reimplementation of websocket-syncing would make more sense to be similar to: https://github.com/kitten/spectacle-sync, as in being a separate package?. If I'm correct this plugin requires some additional markup, like line-numbers-rows, which shouldn't be too hard to add? Its JS file might attempt to add this code by targeting specific other classes that we are not setting on the codepane. This was an older, conscious decision in this project, and also in react-live.\nThis is because modifying the DOM that React controls can sometimes be a bad idea, unless its encapsulated in a component of its own. So it's definitely possible, but a little fiddly.\nInstead, as we've posted on Twitter, prism-react-renderer might be a project worth checking out, if you want to create a highly customised component for rendering your code, including additional bits like line numbering. https://github.com/FormidableLabs/prism-react-renderer\nIn fact for mdx-deck there's already sth that does this so this could also be ported to Spectacle in theory . @sag1v that's not possible since they're both essentially solving the same problem, but differently with different approaches and internal workings.\nWhat I would recommend though is to look at prism-react-renderer as it shouldn't be too difficult to add some line numbering using it.\nSpecifically, code-surfer is interesting because it has done just that.. The rule didn\u2019t like something about the prism core import :(. All in all if we take the other React-live PR into account it\u2019s a net minus altogether:\n\nbefore the react-live and codepane refactors: 2.4M (min, non-gzip, without prism) and after: 1.6M (min, non-gzip, with prism) . Oh, ok. Sorry, I\u2019ll make a change . I\u2019ll check. good point, I'll clarify this a little. @ryan-roemer so, it's tough to exclude prism without excluding buble as both are also imported by react-live with the respective prism subpaths as well, but if I exclude: prism, react-live, and (thus also) buble, then I land at ~1.33MB. Done :) https://github.com/FormidableLabs/spectacle/pull/389/commits/c190c00460a247b679d3b8be2a701a8c7a509ddb\n\nThe links will obviously not work until we release v4. Oh, sorry, I'm used to separate some CSS properties from each other. Will get rid of it :smile:. @ryan-roemer I just copied this from the manager's tests :wink: I think we're testing in an environment where the local storage is not mocked out-of-the-box anyway. Depends; we'd have to update it here as well: https://github.com/FormidableLabs/spectacle/blob/master/src/components/manager.test.js#L65. @ryan-roemer Is this what you had in mind? https://github.com/FormidableLabs/spectacle/pull/407/commits/af1c727b0af1b4a0055f2b5d5407bdad82f8214c. Good point!\nEdit: Done. Nice :heart:. Please don\u2019t bump the version, since we\u2019ll bump it as we push out new releases :). Sorry, another nit; we\u2019d rather update dependencies in separate PRs or commits instead of mixing these changes into unrelated PRs\nSorry, but thanks for suggesting the upgrade :). Instead of maintaining this piece of code ourselves it should probably use a helper. Polished has some excellent ones and we won't need to pull in the entire library \u2728 \nhttps://polished.js.org/docs/#transparentize\nor\nhttps://polished.js.org/docs/#parsetorgb. I wouldn't call this prop \"intensity\" as that would refer to the saturation of the colour: https://www.uwgb.edu/heuerc/2D/ColorTerms.html\nInstead I would just call this \"opacity\" or \"opacify\" or \"transparentize\" depending on what it'll do.. I'd propose the newlines to be defined as (\\r\\n|\\r|\\n) which is more correct, since carriage returns \\r and line feeds \\n can both be used individually as well as together. This would cover all styles of line endings.\nDo we also want to introduce ---+ or -{3,} to cover the possibility of separators being longer than necessary?\ncc @ebrillhart. @ebrillhart: @debel is completely correct in that \\r has become super rare. It's basically what the old Mac OS used, so it's often only used by accident if at all.\nI'd basically do the changes of allowing more -s and \\r in case of user error. Something might go wrong rarely and someone might have typo'd ---- or used the wrong encoding, but that doesn't mean that this should break imho :)\nBut either way, @debel, thanks for submitting this PR! I think it'd make sense to let you make the last call on what to do about these two suggestions naturally :). ",
    "denysdovhan": "Seems like legit. Thanks for the great support!. ",
    "kstratis": "293 is definitely the same thing. However you probably mean presenter mode instead of print mode.\n@bebraw Even stranger though is the fact that your presentation example works exactly as it should while the example in the src tree doesn't.... I don't mind either. I've mentioned both issues on gitter but no updates yet. \nI'll try to figure out what's going on here but I believe I'll have to dig deep for this one and it may take some time.\nAny help would be much appreciated.. @bebraw What we could do in the meantime is to check the part of your source code against the one on the main example. There may be something in there.... Which file are you talking about?\nMy bet is at the manager.js file in the _checkFragments function.\nBut I'm not sure yet...\nDid you come up with a solution?. @bebraw I haven't found the culprit yet but I've made some progress.\nHere's what I know so far:\nThe issue appears in the master branch only. \nIf you checkout spectacle-boilerplate which uses the NPM version of spectacle you get no such error. That's why the slideshow you shared in your post worked correctly.\nHowever if you run spectacle from the master branch the issue is there. Using a \"binary search\" technique I managed to spot the PRs responsible for this behaviour even though I couldn't pin down where exactly the error is cause there is a vast amount of files and lines involved.\n\n\n280 introduced part of the issue: While in presenter mode, a slide with <Appear> tags will render properly. However if a user chooses to progress to the next slide (regardless of content) and then decides to go back again, the slide (which includes the <Appear> tags) will render again but the tags won't be visible anymore.\n\n\n281 completed the issue: While in presenter mode, the <Appear> tags won't render at all regardless of whether we traverse our slide set forwards or backwards.\n\n\nI believe that now it should be easier for someone to pick it up...\n. oh well... I guess you're always learning\nbtw, @zachhale may have a clue about this one.... ",
    "shaunwallace": "@stefvhuynh @kenwheeler have you guys thought about introducing lint-staged(or alternative) with prettier to enforce consistent code styling?. remove this empty block :-). ",
    "goldhand": "Nm I see that it's kind in the spectacle-code-slide demo.. ",
    "IanVS": "I hit this as well.  As a workaround, adding a transition={[]} prop to the <Deck> seems to work.. ",
    "mAAdhaTTah": "This should fix #329.. @kenwheeler @sjstyle I integrated the above changes + changes to Code for the Markdown component but I'm getting a new error in my code. See here: https://github.com/mAAdhaTTah/spectacle/commit/a71765c3b3b217f9dba4b58d1d04e2ef6b8a50a2\nEdit: Actually, this may be unrelated.. I just ran into this with an inline code bit:\nmarkdown\nHere is a piece of `code`\nSlightly different stack, but same error:\nUncaught TypeError: str.replace is not a function\n    at format (webpack-internal:///./node_modules/spectacle/lib/components/code-pane.js:47)\n    at RadiumEnhancer.createMarkup (webpack-internal:///./node_modules/spectacle/lib/components/code-pane.js:69)\n    at RadiumEnhancer.render (webpack-internal:///./node_modules/spectacle/lib/components/code-pane.js:80)\n    at RadiumEnhancer.render (webpack-internal:///./node_modules/radium/lib/enhancer.js:132)\n    at eval (webpack-internal:///./node_modules/react-dom/lib/ReactCompositeComponent.js:795)\n    at measureLifeCyclePerf (webpack-internal:///./node_modules/react-dom/lib/ReactCompositeComponent.js:75)\n    at ReactCompositeComponentWrapper._renderValidatedComponentWithoutOwnerOrContext (webpack-internal:///./node_modules/react-dom/lib/ReactCompositeComponent.js:794)\n    at ReactCompositeComponentWrapper._renderValidatedComponent (webpack-internal:///./node_modules/react-dom/lib/ReactCompositeComponent.js:821)\n    at ReactCompositeComponentWrapper.performInitialMount (webpack-internal:///./node_modules/react-dom/lib/ReactCompositeComponent.js:361)\n    at ReactCompositeComponentWrapper.mountComponent (webpack-internal:///./node_modules/react-dom/lib/ReactCompositeComponent.js:257)\nLooking at the devtools, it looks like str is coming in as an array with a single value, the contents of the code. I'm using the MarkdownSlides component in this case.. Hacky workaround: convert the slide from a ES6 class component to a stateless function component and render it by calling the function, rather than passing the function around as a component:\njsx\n    <Deck transition={['slide']} transitionDuration={500} theme={theme}>\n        <Slide transition={['slide']}>\n            <Heading size={1} fit lineHeight={1}>\n                Meet\n            </Heading>\n            <Heading size={1} fit lineHeight={1}>\n                <code>brookjs</code>\n            </Heading>\n            <Text textSize={'40px'}>\n                A framework for building streaming web applications.\n            </Text>\n        </Slide>\n        {AboutMe()} <--- here\n    </Deck>. Heuristically, 2 or 3 levels should probably be enough. I'm mostly extracting a single slide into a separate component or a group of slides into a component. It hasn't gotten deeper than that in my experience.. This is not resolved in 4.0.0. Is this intended to work?. What's the issue w/ 1.8.3?. Digging into this, I'm beginning to think this is a bug in marksy itself. It doesn't appear codespan is even making an appearance the way we expect it to.. Yeah, error is in marksy, where both inline codespans & code blocks are route through the same element. PR w/ marksy test case is here: https://github.com/cerebral/marksy/pull/50 probs not going to get a chance to investigate much deeper than that today, but maybe the marksy guys can figure it out.\nEdit: There's a fix in a PR to marksy already: https://github.com/cerebral/marksy/pull/47 I do think some minor modifications may be required after that gets merged, so I'll keep this PR open.. The latest version of marksy resolves the issue noted here. I also borrowed the code I wrote for #337, which resolves the replace error reported #329 and either reintroduced or never resolved in Spectacle 4.*. The \"CodePane not highlighting\" issue mentioned above is also not an issue, so that may have been a 2.* only issue (which I was using previously). This PR resolves all the markdown+code-related issues in spectacle currently.\nI generally prototype my slides in Markdown before moving them over to React components as needed, so getting this merged and pubbed would be extremely beneficial to my workflow.\nLet me know if you have any suggestions. Specifically, the this.props.children appeared as an array when used with marksy, so you may have an alternate approach preferred for dealing with that.\nThanks for the great project! . > It may also be because I've broken off all my slides into their own stateless function components...?\nThis is the issue. See #340. . You're pointing prism-atom-dark.css to a path on disk that doesn't exist. webpack-dev-server falls back to the index.html file on a 404, so that's what you're seeing. You may not have the css file in the correct location.. webpack-dev-server is serving the file out of the dist folder, so it needs to be in there. You can use the copy-webpack-plugin to do this.. I had a similar problem (see #340). While that one was closed, the issue wasn't fully resolved, although the workaround you present is basically what I'm doing today.. You probably have a loader compiling your Markdown to html. . That's invalid JSX. The format overall is as such:\njsx\n<Appear endValue={ /* put values in here */ } />\nThe values in there is the object, so you need two curlies:\njsx\n<Appear endValue={{opacity: 0.5}} />. @ryan-roemer Yes, the components/index.js is Node-specific and isn't intended to be used in webapps. The cache-clearing is to ensure that Prism modules are reloaded in the correct order so dependencies function correctly.\nThe intention was definitely to solve this problem with the babel plugin, although I think you might need to use it both in spectacle & react-live (and possibly component-playground, if you're using it there too). The autoloader might also work, but it would require adding a build step in the project to copy all the components into the dist directory and setting the autoloader path at runtime.. @ryan-roemer Great! And we're here to help if you need anything. The babel plugin is brand new, so if you run into issues, let us know. I use Spectacle myself, so happy to do what I can.. @sslotsky SSR shouldn't really impact things. All the babel plugin does is ensure all the dependencies are loaded in the correct order. Prism should otherwise work fine on the server; the highlight method doesn't require the DOM, though the other methods do.. Yeah, PrismJS itself assumes a browser(-like) environment. That's not really specific to the babel plugin.\nThe plugin configuration needs to be in an array:\njs\n{\n  \"plugins\": [\n    [\"prismjs\", {\n      \"languages\": [\"clike\", \"javascript\", \"markup\", \"jsx\", \"reason\"],\n      \"plugins\": [\"line-numbers\"],\n      \"theme\": \"twilight\",\n      \"css\": true\n    }] \n  ]\n}\nMore generically speaking, your .babelrc needs to be structured like this:\njs\n{\n  \"plugins\": [\n    [\"prismjs\", config] \n  ]\n}. Do you have a branch / fork I can look at?. When react-live itself is built, it sticks with the import Prism from 'prismjs' bit for the ESM build, which is good, but it means that the prism babel configuration needs to be at the app level, e.g. in the demo. This would allow the consumer of react-live to configure how much of Prism they wants to include in their app.\nThis also requires consumers to run babel over their entire dependency chain, or at least any dependency that has Prism as a dependency.\nIs that a reasonable expectation for consumers?\nAlso, right now, babel-plugin-prismjs doesn't support CJS, although I don't think adding support would be difficult, but let's sort out the easy case first.. Documentation in all 3 packages, plus default + links in the changelog should cover it. Maybe even update the starter / generator packages.\nYeah, I'll add validation to the babel plugin settings though. It should yell at you.\nThose 3 packages will have to remove their current Prism imports, so the consumer can configure it completely. This might be a breaking change for those packages; not sure if there's any way around that \ud83d\ude15.\n. It looks like you're importing a number of prism components, so you may want to modify this to match.. ",
    "sjstyle": "I noticed that this issue was solved by other commits. So I will close this pull request. \n. @mAAdhaTTah  @kenwheeler \nI opened another pull request #338, which relates 329 issue.. ",
    "exogen": "Looks like tests are already failing in master even without this.. That's weird, the snapshot tests involving SVG values fail locally for me. Looks like the CI failure here is not that, though, just a timeout?. Now tracking in #307 and #306.. @stefvhuynh If you rebase/merge master, CI should be fixed.. @stefvhuynh If you don't have the same failures on master, can you post the output of:\nconsole\n$ npm ls react react-dom react-addons-test-utils jest\nspectacle@2.0.0 /Users/brianbeck/Projects/Formidable/spectacle\n\u251c\u2500\u2500 jest@17.0.3\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY markdown-to-react-components@0.2.3\n\u251c\u2500\u2500 react@15.4.2\n\u251c\u2500\u2500 react-addons-test-utils@15.4.1\n\u2514\u2500\u2500 react-dom@15.4.2\n. I rebooted my computer and now they work. Everything is terrible.. Looks like #308 fixes Node v5. I'm going to change this to just add Node v7 instead of replacing v5.. ",
    "ericvicenti": "I just used the boilerplate + npm i --save spectacle-code-slide\n\"spectacle\": \"^2.0.0\",\n    \"spectacle-code-slide\": \"^0.4.0\". Oh, I see whats happening. I was trying to do this:\n```js\nclass CustomCodeSlide extends Component {\n  render() { return ; }\n}\nexport default class Presentation extends Component {\n  render() {\n    return (\n      \n\n\n    );\n  }\n}\n```\nThe fix was easy, but how was I supposed to know that I had to pass this slideIndex prop through?? This is why element copying can result in super confusing APIs\njs\nclass CustomCodeSlide extends Component {\n  render() { return <CodeSlide slideIndex={this.props.slideIndex} ... />; }\n}. ",
    "amaity": "@ericvicenti how do I include spectacle-code-slide in spectacle-boilerplate? I am a complete noob.and struggling to get codeslide up and running since the last two days. . ",
    "FezVrasta": "Yup I want header + image below.\nI created this to do so: https://fezvrasta.github.io/spectacle-image-slide/\nIt's not perfect but does what I need.. https://github.com/FormidableLabs/spectacle/pull/321. ",
    "glennreyes": "list-style-type is great for default bullet characters like square, circle, etc. but it doesn't allow me to replace it with custom characters eg. an emoji. For emoji's for example, I would need either an image or workaround with pseudo selectors.\nIt would be awesome if we had something like <List type=\"\u2705\"> instead \ud83d\udc4d . ",
    "travi": "I finally got back around to investigating this further. It looks like the Image that is intended for use here is the Image constructor. \nI'm seeing this error when running smoke tests against jsdom, which doesnt make the constructor available as a true global by default. When I tried to change the usage that fails to be new window.Image() instead of new Image(), the smoke tests passed successfully again. That told me that the fairly typical need to elevate jsdom properties was needed here, so I was able to get past this issue with the following addition to my jsdom configuration:\n```js\n// my preexisting config included the following\nconst dom = new JSDOM('<!doctype html>', {url: 'http://localhost'});\n// adding this made the Image constructor available as a global\nglobal.Image = dom.window.Image;\n``. is #324 the other issue you're referring to? seems like that could do the trick. might be worth also including the link to the list of supported languages: http://prismjs.com/#languages-list. false alarm, i guess. it looks like the errors i was seeing were related to getting caught by the [incorrect@latesttag](https://github.com/webpack-contrib/raw-loader/issues/37) on the beta ofraw-loader` a few days ago.\ni thought i'd confirmed that my presentations were all working after upgrading to v2 before now, but i incorrectly assumed this was an issue between spectacle and code-slide.\nI'll close this for now since the errors weren't related to what i thought. it would still be nice to understand the proper way to ask for help with code-slide, since it would be nice if there was at least a version that specified compatible peer dependencies. if there are recommendations on how to properly move something like that forward, i'd love to know. i ended up opening https://github.com/thejameskyle/spectacle-code-slide/pull/41 to make it more clear that code-slide should work with v2. ",
    "nuragic": "@kenwheeler could this one be released? <Notes> is not available in the last v2.1.0 \ud83d\ude15 ... Thanks!\n. @ryan-roemer Wow, I get totally different results even on a fresh install on master \ud83d\ude15 ... no idea right now. Just checked the CI log and I have different versions of Node, etc... but even if I switch to v6.14.1 (which is the one used by Travis), I get the same errors... :finnadie: \n\nAny suggestion? Thanks!\n. @ryan-roemer Sorry, I removed my entire folder, cloned the fork again... and it worked \ud83d\ude05 ... wondering what could have originated the problem, anyway... nevermind! Thanks for your time, I've just updated the snapshots for this branch. . Hi Emma! No worries... done! \ud83d\udea2 . Upsss sorry \ud83d\ude05 fixed! Thanks to you for your time \ud83d\ude4c . ",
    "jebeck": "PRed in #334!. ",
    "MikeDabrowski": "I'm affraid this fixes only <Image>. Images added as Slide background become broken after such fix.. No it does not. Images are not available on such url.. I used boilerplate, but bear in mind that was in jan/feb so things could change since then.. Ok, so I tried to clean my project of prism js and css bring it back to unmodified state. It didn't work. Then I created new projects using CRA and boilerplate - both works for jsx, java and javascript. \nI think its a matter of my corrupted project.. ",
    "jtama": "Great; I tested it and it works just fine!. ",
    "delvedor": "Hi! When this fix will be released? :). ",
    "patsissons": "also note, this will likely require setting the output.library value in the webpack config.. ",
    "philipphenkel": "Potential fix is available in PR #330. PR #330 was merged. Thanks!. This PR also fixes the broken snapshot of the markdown slide.. ",
    "ahfarmer": "@kenwheeler \n\ntrying to find a good way to not have to recurse too far\n\nCan't you recurse until you hit a <Slide>?\nI'm new to Spectacle but it looks like these are the only components that ever exist within <Deck>:\n\nSlide\nSlideSet\nIntermediate component that renders Slide components or other intermediate components\n\nFirst thing I tried to do when I got the boilerplate was to put my slides into separate files and it was pretty frustrating.\n. ",
    "danilomiranda": "Never mind, I figure out that only sync in same browser :). ",
    "nnals": "in case it's necessary to adapt the code, would it work to export _nextSlide() from manager.js and call it in my application?. ",
    "paulathevalley": "Update: Added play/pause buttons at the top of the slide deck to control autoplaying: \n\n. ",
    "tlakomy": "Okay, so the issue mentioned in my previous comment is a bit different. It turns out that there's a difference in slide width between dev build and a production build, see below:\n\n. I've debugged this issue a bit because I had a free evening and it seems to be caused by differences in slide.js setZoom function between development and production builds. If you put a debugger inside of this function, you'll get different values for offsetWidth/offsetHeight depending on which build you are debugging.\nDevelopment build:\n\nProduction build:\n\nI've used a following simple deck to minimise potential error factors:\njs\nexport default class Presentation extends React.Component {\n  render() {\n    return (\n      <Deck transition={[\"zoom\", \"slide\"]} theme={theme} transitionDuration={500}>\n        <Slide transition={[\"zoom\"]} bgColor=\"primary\">\n          <Heading size={1} caps lineHeight={1} textColor=\"black\">\n            Spectacle\n          </Heading>\n        </Slide>\n      </Deck>\n    );\n  }\n}\nHope this will help a bit.\n. @kenwheeler it's fixed for me - thanks for looking into it!. ",
    "cmckni3": "Was this not feasible, @kenwheeler?. ",
    "adamgruber": "Not too sure what API I'd want but here's what I did based on your suggestion. I'm grouping slides based on section so I've got a slides folder inside src and a folder for each section and inside that. Each section folder contains an index.js file and a notes.js file, plus markdown files for notes and any code examples for that section.\n\u2500\u2500 src\n\u00a0 \u2514\u2500\u2500 slides\n\u00a0     \u251c\u2500\u2500 01_intro\n\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 code.example\n\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 index.js\n\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 notes.js\n\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 notes_1.md\n\u00a0     \u2514\u2500\u2500 index.js\nThe index file exports an array of <Slide> components like you suggest:\n```jsx\n// 01_intro/index.js\nimport React from 'react';\nimport { Slide } from 'spectacle';\nimport notes from './notes';\nexport default [\n  \n    {notes.one}\n    ...\n  ,\n  \n    {notes.two}\n    ...\n  ,\n];\n```\nMy notes are written in markdown and then I export <Notes> components using react-markdown:\n```jsx\n// 01_intro/notes.js\nimport React from 'react';\nimport { Notes } from 'spectacle'\nimport ReactMarkdown from 'react-markdown';\nimport notes1 from './notes_1.md';\nconst one = ;\nexport default { one };\n```\nThe main presentation.js file imports all the slides:\n```jsx\n// src/presentation.js\nimport React from \"react\";\nimport { Deck } from 'spectacle';\nimport createTheme from \"spectacle/lib/themes/default\";\nimport Slides from './slides';\n// Require CSS\nrequire(\"normalize.css\");\nrequire(\"spectacle/lib/themes/default/index.css\");\n// Define theme\nconst theme = createTheme({\n  primary: \"#fff\",\n  secondary: \"#505e67\",\n  tertiary: \"#00b478\",\n  quarternary: \"#2e7ad1\",\n});\nconst Presentation = () => (\n  \n    { Slides }\n  \n);\nexport default Presentation;\n```\nAnd the slides are exported like this:\n```js\n// src/slides/index.js\nimport { cloneElement } from 'react';\nimport Intro from './01_intro';\nimport OtherSection from './02_section';\nconst slides = [].concat(\n  Intro,\n  OtherSection\n);\nexport default slides.map((slide, i) => cloneElement(slide, { key: i }));\n```\nI'm not saying this is ideal, there's still a bit too much code repetition in each slide and section, but it worked for me. There's a decent level of organization and it's easy to add more sections or reorder things.. ",
    "bbaaxx": "I've created a pull request with a proposed new organization and optional auto-import of slide components please review it here: https://github.com/FormidableLabs/spectacle-boilerplate/pull/49\nIt allows to compose each slide in its own file and either import them separately and insert them into <Deck> or order the slide files in alphabetical order and let the auto import handle the job for you.. ",
    "joelgriffith": "I'd recommend https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagepdfoptions for this as the chrome-remote-interface is a bit complex to setup for a simple thing like this.\nIt also comes with a bundled version of Chrome guaranteed:tm: to work with the library, which really nice atm since both Chrome and the debugging protocol's are still revving pretty frequently.. ",
    "DSchau": "@knpwrs @joelgriffith I kinda started working on this.\nhttps://github.com/DSchau/screenie\nI have it working for a past Spectacle presentation I've given; thinking about making it a utility or something to make it easy to integrate and use with Spectacle (and other slide decks).\nIt's kinda hacky now; requires waiting for 2500 ms before and after taking a screenshot (so it's painfully slow) but hey, it works!. As an example, the following markup demonstrates the issue\njs\n<Slide>\n  <Heading size={1}>Visible by default</Heading>\n  <Appear><Heading size={2}>I appear</Heading></Appear>\n</Slide>\n<Slide id=\"i-am-broken\">\n  <Heading size={1}>Visible by default</Heading>\n  <Appear><Heading size={2}>I do not appear</Heading></Appear>\n</Slide>\nHere's a CodeSandbox\nI'll see if I can fix/PR this later, I wouldn't think it'd be that challenging to diagnose \ud83d\ude43 . ",
    "karlhorky": "Yeah, looks like I missed some things. It's expecting number values here:\nhttps://github.com/karlhorky/spectacle/blob/content-dimensions-strings/src/components/manager.js#L214\nhttps://github.com/karlhorky/spectacle/blob/content-dimensions-strings/src/components/manager.js#L532-L533\nI guess there's probably not a desire to refactor these for this feature.... No problem, if this is a desired feature then this can be reopened or another PR started.. ",
    "robeau": "Hi Ken. I mean the navigation. The address bar changes, but the view doesn't. This is only on the create-react-app version (I didn't make any changes) -- the boilerplate works fine.\nThis is on macOS Sierra 10.12.6 I tried clearing everything and rerunning the generator a few times with the same result. I'll try it out on a windows computer tonight and let you know if I get the same result.\nAnd I'll try on my mac from home as well -- now that I think about it, my work network might be blocking something essential. I'll let you know how it goes.\n. ",
    "michellescripts": "Looks like this is fixed with #357 . ",
    "gagyibenedek": "I'll start working on this.\nThis is the plan: https://twitter.com/ken_wheeler/status/919667788754677760. ",
    "sglyon": "Ping! Is there anything an outsider can do to help move this along?. I'll see if I can give this a go over the next few days!. Sorry for the noise, but my short-run need for this has been resolved so it is no longer near the top of my todo list.\nIf that changes and I'm able to reconsider implementing I'll leave a message here. ",
    "ebello": "@ryan-roemer I think you meant to tag @ebertmi.. ",
    "hyunwoona": "It also needs a keyboard shortcut. ",
    "nwaywood": "Ok thanks, I'll keep an eye on that PR. cc @thejameskyle . Ok I did a bit more debugging and I think the issue is that the webpack config in the spectacle-boilerplate is not handling the css file properly.\nMy index.html:\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width initial-scale=1 user-scalable=no\" />\n  <title>Modern JavaScript</title>\n  <link href=\"https://fonts.googleapis.com/css?family=Montserrat:400,700\" rel=\"stylesheet\">\n  <link href=\"./prism-atom-dark.css\" rel=\"stylesheet\">\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script src=\"./dist/bundle.js\"></script>\n</body>\n</html>\nWebpack css loader config:\n{\n        test: /\\.css$/,\n        loaders: [\"style-loader\", \"raw-loader\"],\n        include: __dirname\n      },\nBut the css doesn't seem to be being served:\n\nSo maybe the issue is with the boilerplate webpack config? I don't understand webpack enough to really debug this any further without your assistance. Here is the path I am using from index.html:\n<link href=\"./prism-atom-dark.css\" rel=\"stylesheet\">\nand prism-atom-dark.css is in the same directory as the index.html file:\n\nI am fairly sure that is correct right? Thats why it lead me to think that there must be something wrong with the boilerplates webpack config since the css file is not being served. oh and my webpack config is unchanged from the boilerplate https://github.com/FormidableLabs/spectacle-boilerplate/blob/master/webpack.config.js. @philpl Just a suggestion, but it also might be less confusing if the boilerplate included the default prism theme within the index.html. That would make it very easy to \"swap\" the prism themes as the documentation suggests.\nAtm I can't even figure out where the default prism theme is being added from in the boilerplate. ",
    "interglobalmedia": "And then, I removed dist from .gitignore to see what would happen and then re-deployed. Then tried out the link I was given for Surge, and I was directed to a youtube video??? This is the link: surge link. Not good. I have an important presentation, and this is not working well.. Yeah it is. Ken figured that out last night and I removed the dep, pushed the changes to remote, and then my warnings were gone. And even tho the warnings highlighted versions < 2, the version in package-lock.json was 2.2.1. So that was strange! Surge has been wonky of late, at least for me anyway. I have seen issues pop up here and there about it. I don't have time now, but will try and come up with a solution for deploying (somewhere). You don't want to know how I deployed after removing Surge lol. There just was no time for a good fix.. ",
    "prayash": "@kitten Could you give a more detailed example? I tried this and it's still being overwritten by the default styles. Such a bummer that it's not possible to write a stylesheet on top like most CSS things.\njavascript\nconst CustomHeading = styled(Heading)`\n  & {\n    font-size: 1.2em;\n    font-weight: 200;\n  }\n`. ",
    "Hypnosphi": "What's the recommended workaround for it? className property on Slide sets className for slide inner content not for slide itself. It also declares a style prop in its PropTypes but looks like it isn't actually used in any way. ",
    "sw-yx": "are you running this in a server? it depends on socket.io to sync the two things.. hmm you're right. i thought it worked when i tried it out.  now it no longer works.. I think thats a discussion thats best done with the maintainers as I'm kind of a drive-by user of Spectacle right now and you guys have the long term vision. I do think the small screen progress bar default makes sense, would be friendly for longish presentations without compromising on the desktop experience.. ",
    "ivorpad": "@sw-yx Yes, I'm running on a server and also tried with ngrok. ",
    "TomiS": "I think there might be some things broken because I'm getting this error\nmanager.js:335 Uncaught TypeError: Cannot read property 'forward' of null\n    at Manager._goToSlide (manager.js:335)\non viewer tab console when I click right arrow on presenter tab. . ",
    "TigerWolf": "I fixed this issue by updating to 4.0.4. It looks like the code you mentioned above was fixed since 4.0.0 which is in the boilerplate repository.. ",
    "aravindballa": "I too tried this once. Couldn't make it work. Probably height and width of html, body are set to 100%.\nMy workaround was to embed this in an iframe.. Custom overlay colours would be a great one. Something like bgOverlayColour and bgOverlayIntensity. . Please review and check whether we can continue like this or not.\n@kenwheeler @philpl . Can you verify if I did it right? @philpl \ncc @kenwheeler . @kitten @kenwheeler Can you check?. Its bgTransparentize now \u2728 . ",
    "chrisheninger": "Wrapping with position: relative works nicely\u2013 the only other adjustment I found I had to make was add a body {  overflow-y: auto !important; } to cancel out the overflow:hidden; applied by Spectacle.. ",
    "Charimon": "Sorry, somehow missed your comments. I've removed the version bumps.. ",
    "amitnkukanur": "@philpl - Sure i will be carefull regarding same..\n@ryan-roemer -  Thanks for guiding me to right plac\nThanks for Info Gentlemen.\nCheers,\nAmit. ",
    "jbovenschen": "This is resolved now, the marksy package is updated to the latest release of marked, which includes fixes for both vulnerabilities.. ",
    "Phoenixmatrix": "ok, if I have a module that exports (notice this is not a component, just a bunch of JSX):\njs\nexport default (\n   <SlideSet>\n       <Slide>1</Slide>\n       <Slide>2</Slide>\n   </SlideSet>\n)\nand then I consume this, eg:\n```js\nimport Foo from './foo'\n/ lower down/\nrender() {\n   return   (\n        {Intro}\n    \n  );\n}\n```\nThat works. But somehow I expect that's not the intended usage. (Its good enough to unblock me for now though)\n  . ",
    "baptooo": "Hello, same issue here, it works with <SlideSet /> component but not with hasSlideChildren, does the doc needs to be updated ?\nEDIT : in fact no this is not working, here is how I managed to do it,\n```js\n// mySlides.js\nconst category = 'foo';\nexport default [\n  { transition: ['fade'], children: Foo },\n  { transition: ['slide'], children: Bar },\n].map((props, idx) => (\n  ${category}-slide-${idx}} {...props} />\n));\n```\n```js\n// myPresentation.js\nimport mySlides from './mySlides';\nexport default () => (\n  \n{mySlides}\n\n);\n```. ",
    "siakaramalegos": "What is <SlideSet>? I don't see it in the docs. My guess is for when you want to group a bunch of slides, but does it have special behaviors? I also have this problem with importing slides so doing one of the workarounds above. Just wanted more info on SlideSet. ",
    "g3r4n": "I've just started to use the library and here the template i used to start:\nhttps://stackblitz.com/edit/react-kgu6gt\nThis solution do not use SlideSet or hasSlideChildren, it's more a concatenation of JSX (maybe the same solution than yours @markerikson ).\nThis solution let's you have one Slide per file to organise your presentation. You can also easily re-organise your presentation as you go just by changing the Slides/index.js\nWhat do you think about the solution ? \nDo you see any limitation of this solution ? I'm just starting to create my presentation, I don't have any experience with this library that's why it's hard for me to tell.\nShould i make a PR as a second example for users who would like to have a single file per Slide?\nBy the way, i found that using the stackblitz site to start experimenting with the library is easier than the create-react-app or boilerplate solution, what do you think about proposing it as a alternative ? A potential user of the library will just fork the project and start doing the slides. A plus of this solution : your slides are already in the cloud, no need to deploy them again and again \ud83d\ude03 . ",
    "tim-soft": "@markerikson I tried doing just that and everything appeared to work... except for the transitions. \nThere must be some databinding underneath that isn't getting passed related to animations. Hopefully someone can dig deeper, as this is the obvious and best way to organise the slides.. SSR support would be excellent, conditional require in componentDidMount is obviously not great on performance\nEdit: Why not assume you're on the first slide on the server, then goto the correct slide in the DOM if the hash is different? In most cases, the initial render where SSR comes into play will be the beginning.. I see references to \"Add your own history config\" but no examples of what that would actually look like. You can add a className prop to the slide and use the mySlideStyles::first-child to override the size of your workable area. I didn't build this thing ;)\nI think it would make some sense to add a style prop to Slide for directly manipulating the flex container styles. . ",
    "greeeg": "@markerikson @tim-soft I finally found a way to organize custom slides and pass them data.\nA custom slide might look like this:\n```js\nimport React from 'react';\nimport { Heading, Slide, Text, Layout, Appear } from 'spectacle';\nclass HeadingSlide {\n  constructor(data) {\n    this.data = data;\n  }\nrender() {\n    return (\n      \n\n\n            {this.data.title}\n          \n\n\n\n            This is a description\n          \n\n\n    );\n  }\n}\nexport default HeadingSlide;\n```\nAnd then comes the tricky way to use this slide:\n```js\nimport React, { Component } from 'react';\nimport {\n  BlockQuote,\n  Cite,\n  Deck,\n  Heading,\n  ListItem,\n  List,\n  Quote,\n  Slide,\n  Text\n} from 'spectacle';\nimport createTheme from 'spectacle/lib/themes/default';\nimport 'normalize.css';\nconst theme = createTheme(\n  {\n    white: '#f7f7f7',\n    black: '#080808',\n    blue: '#2752ff',\n    grey: '#CECECE'\n  },\n  {\n    primary: 'Larsseit',\n    secondary: 'LarsseitLight'\n  }\n);\nconst slidesImports = [\n  {\n    name: 'HeadingSlide',\n    import: import('./slides/HeadingSlide')\n  },\n  {\n    name: '2',\n    import: import('./slides/2')\n  }\n];\nexport default class Presentation extends Component {\n  constructor(props) {\n    super(props);\nthis.state = {\n  slides: Array(slidesImports.length).fill(<Slide key=\"loading\" />)\n};\n\n}\ncomponentDidMount() {\n    const importedSlides = [];\n    const imports = slidesImports.map(slideImport => slideImport.import);\nPromise.all(imports).then(slidesImportsResolved => {\n  slidesImportsResolved.forEach((slide, index) => {\n    console.log(slide, slidesImports[index].name);\n    const _slide = new slide.default({\n      title: 'Hello World'\n    });\n    importedSlides.push(_slide.render());\n  });\n  this.setState({ slides: importedSlides });\n});\n\n}\nrender() {\n    const { slides } = this.state;\n    return (\n      \n        {slides.map((slide, index) => {\n          return React.cloneElement(slide, { key: index });\n        })}\n      \n    );\n  }\n}\n```\nI set up a small repository to demonstrate how you could create a modularized presentation https://github.com/greeeg/spectaculus. ",
    "joshacheson": "Alright I love the heck out of spectacle and can't stand that this is still a thing \ud83d\ude02 \nI will very happily do whatever work is required here. What's the move? Add raw-loader to spectacle scripts?. ",
    "datagurkhas": "I am stuck on this issue too. I have been trying to use CodePane to load my code from a file and it doesn't seem to work. I wonder how these people got it working:\n\n\nhttps://github.com/sebald/spectacle-theme-nova/blob/master/example/index.js#L154\n\n\nhttps://github.com/FormidableLabs/spectacle/blob/master/example/src/index.js#L132\n\n\nhttps://github.com/jamiebuilds/spectacle-code-slide\nThis also means I am unable to use spectacle-code-slide. If this extension no longer works with the current version, should we remove the reference from README.md?. \n\n",
    "JCofman": "I had the same issue so the easiest way for me to resolve this was to:\n\nInstall dependencies\n$ npm install react-app-rewired --save-dev\n$ npm install raw-loader --save-dev\n$ npm install @baristalabs/react-app-rewire-raw-loader --save-dev\nConfigure react-app-rewired create a config-overides.js file in the root directory and add the following:\n```\n/ config-overrides.js /\nconst rewireRawLoader = require(\"@baristalabs/react-app-rewire-raw-loader\");\n\nmodule.exports = function override(config, env) {\n  config = rewireRawLoader(config, env);\n  return config;\n};\n``\n3. Replace standard scripts in thepackage.json` with react-rewired:\n```diff\n\"scripts\": {\n-   \"start\": \"react-scripts start\",\n-   \"build\": \"react-scripts build\",\n},\n\"scripts\": {\n+    \"start\": \"react-app-rewired start\",\n+    \"build\": \"react-app-rewired build\",\n},\n```. ",
    "mfellner": "Apparently it's enough to turn off the eslint check by adding this comment line:\n/* eslint import/no-webpack-loader-syntax: off */\nSee https://github.com/facebook/create-react-app/issues/1517. @jmagrippis Using .txt is OK but the downside is that it's more cumbersome to work with such files inside an editor, e.g. in VS code I need to manually set the correct file type, or to reuse them in some other context, e.g. use as actual working code.\nFortunately the raw-loader approach just works in the latest create-react-app version of spectacle: require('!raw-loader!./something.js'), the leading ! is essential.\nOne must also work around the linting errors, which is relatively easy with https://github.com/sharegate/craco, for example.\nIn the end this seems to be more an issue with create-react-app than with spectacle, imo. Possibly spectacle-scripts could offer some customisation over the cra defaults but then this creates another maintainability problem.. ",
    "jmagrippis": "All those workarounds are clever, but what's the problem we want to solve here? All we really want is to load plain text files, right?\nSo you can get around this problem just by suffixing your examples with .txt and not using the raw loader.\njs\n<CodePane lang=\"elixir\" source={require(\"./assets/digger_step1.example.txt\")} />\n<CodePane lang=\"elixir\" source={require(\"./assets/digger_step2.txt\")} />\nYou could use imports at the top with this method, do anything you want. I don't think anybody is really precious about the .example suffix, it just happened to be in the docs because it just happened to work at the time.. ",
    "samwhale": "Hi @MikeDabrowski, could you give me a small pen that I could take a look at to reproduce the problem?\nEdit: I got the bug to show itself, so no worries.. @thomasfarago Can you share a minimal repo with the bug?. The margin is applied as padding for the SlideContent:\nhttps://github.com/FormidableLabs/spectacle/blob/d31c3467fc885245830477cd50845d099ab0a55f/src/components/slide-components.js#L51\nIs this the expected behavior @kenwheeler? We could remove that and provide a padding prop that's passed through the Slide. README.md was logging an error on commit. The file hadn't been through prettier yet. To commit and pass the tests, I ran prettier on README.md.. I'm not seeing 502 errors anymore. Just this: Error during service worker registration: DOMException: Only secure origins are allowed (see: https://goo.gl/Y0ZkNV). I think it's good to go.. Why are we removing prism-core? This is used for the playground via react-live. wow. Is this supposed to start at 1? I'm looking at the docs here https://github.com/FormidableLabs/spectacle#appear. I think this.props.order isn't the slide index but the order in which the animation should occur. ",
    "peggyrayzis": "Thanks for the prompt reply! \ud83d\ude00 I tried uncommenting out the stylesheet like in your gif and was able to confirm that the stylesheet is changing the font color. What's weird is that the syntax highlighting looks nothing like it does when you visit Prism's homepage and click on Okaidia.\nIs it possible the language is not being properly applied here? I'm doing <CodePane lang=\"javascript\" /> in this example:\n\nHere, you can see that const should be blue (consistent with what's on the Prism homepage), but the font color is being overridden by another rule w/ greater specificity.\n\n. Maybe you could disable the built in themes by passing in theme=\"none\"? It's not the best solution, but it would at least save you from having to introduce a new prop.. Sounds great! \ud83c\udf89 Thanks again for making this fix so quickly :). ",
    "prakharcipher": "@MikeDabrowski Is it not working in the manner like this - \nurl('./example/assets/{image-name}'). ",
    "tlenclos": "Yep, can't override style, can we merge this ?. ",
    "mpeyper": "I'll take a look later today. Hey @ebrillhart,\nSorry for the delay.  The PR is now up to date with master.\nHave a good day \ud83d\ude03 . ",
    "ryantuck": "Ah, that's even worse :)\nBoth suggestions yield the following:\n\n. ### Steps to replicate\n\nClone boilerplate: https://github.com/FormidableLabs/spectacle-boilerplate/\nReplace presentation/index.js with code below, and add assets/stuff.md with example above.\nnpm install && npm start\n\n```javascript\n// Import React\nimport React from \"react\";\n// Import Spectacle Core tags\nimport {\n  BlockQuote,\n  Cite,\n  Deck,\n  Heading,\n  ListItem,\n  List,\n  Quote,\n  Slide,\n  Text,\n  CodePane,\n  Code,\n  Markdown\n} from \"spectacle\";\n// Import theme\nimport createTheme from \"spectacle/lib/themes/default\";\n// Require CSS\nrequire(\"normalize.css\");\nconst theme = createTheme({\n  primary: \"white\",\n  secondary: \"#1F2022\",\n  tertiary: \"#03A9FC\",\n  quarternary: \"#CECECE\"\n}, {\n  primary: \"Montserrat\",\n  secondary: \"Helvetica\"\n});\nexport default class Presentation extends React.Component {\n  render() {\n    return (\n      \n\n\n\n\n    );\n  }\n}\n``. @ryan-roemer thanks! looks like adding that line anywhere above theexport` of the presentation component works! \nI'll be adopting the following strategy - would add to the docs myself but not sure where they live. \n```javascript\n...\nvar stuff = require(\"!raw-loader!../assets/stuff.md\");\nexport default class Presentation extends React.Component {\n  render() {\n    return (\n      \n\n\n\n\n    );\n  }\n}\n```\n. Oh wait, I see the subtlety now. \nThe ! at the very beginning of the string is the thing that matters. No need to do anything higher up in the file or anything. \n```javascript\n// works\n\n// doesn't work\n\n```. ",
    "romelperez": "In case there is no workaround, I used a conditional import of Spectacle in the client side.\nBut it would be great to have server-side support, at least to \"import\" them not use them.. ",
    "iamstarkov": "@kenwheeler indeed Deck takes custom history, but you have no chance to get that far: somehow any import from spectacle throws Invariant Violation: Hash history needs a DOM. i had to write special component to load spectacle only on client side\n```js\n// prettier-ignore\nconst spectacleExports = [ \"Anim\", \"Appear\", \"BlockQuote\", \"Cite\", \"CodePane\", \"Code\", \"ComponentPlayground\", \"Deck\", \"Fill\", \"Fit\", \"Heading\", \"Image\", \"GoToAction\", \"Layout\", \"Link\", \"ListItem\", \"List\", \"Magic\", \"Markdown\", \"MarkdownSlides\", \"Notes\", \"Quote\", \"S\", \"Slide\", \"SlideSet\", \"TableBody\", \"TableHeader\", \"TableHeaderItem\", \"TableItem\", \"TableRow\", \"Table\", \"Text\", \"Typeface\", \"themes\" ];\nconst setToFalse = (state, key) => ({ ...state, key: false });\nconst setTo = spectacle => (state, key) => ({\n  ...state,\n});\nconst isReady = o => Object.values(o).every(x => !!x);\nclass WithSpectacle extends React.Component {\n  constructor(props) {\n    super(props);\nthis.state = spectacleExports.reduce(setToFalse, {});\n\n}\n  componentDidMount() {\n    const spectacle = require(\"spectacle\");\nthis.setState(spectacleExports.reduce(setTo(spectacle), {}));\n\n}\n  render() {\n    if (!isReady(this.state)) return null;\nreturn this.props.render(this.state);\n\n}\n}\n```\n/cc @romelperez . it is due to this line in in controller.js\njs\nconst history = createHistory();\nwhich is invoked straight away, so it will be invoked whenever this file is imported. And it happens in deck.js. And deck is imported in index.js. /cc @kenwheeler . @dharmeshkakadia have you tried it? I use dynamic import in client-side only react lifecycle method. @dharmeshkakadia  you do not import anything from spectacle manually, you should utilise (like I use Deck from the callback argument) render prop's callback's arguments which reflects spectacle's exports and they are:\njs\nconst spectacleExports = [\n  \"Anim\",\n  \"Appear\",\n  \"BlockQuote\",\n  \"Cite\",\n  \"CodePane\",\n  \"Code\",\n  \"ComponentPlayground\",\n  \"Deck\",\n  \"Fill\",\n  \"Fit\",\n  \"Heading\",\n  \"Image\",\n  \"GoToAction\",\n  \"Layout\",\n  \"Link\",\n  \"ListItem\",\n  \"List\",\n  \"Magic\",\n  \"Markdown\",\n  \"MarkdownSlides\",\n  \"Notes\",\n  \"Quote\",\n  \"S\",\n  \"Slide\",\n  \"SlideSet\",\n  \"TableBody\",\n  \"TableHeader\",\n  \"TableHeaderItem\",\n  \"TableItem\",\n  \"TableRow\",\n  \"Table\",\n  \"Text\",\n  \"Typeface\",\n  \"themes\"\n];\nand I dont see createTheme in this list. ",
    "dharmeshkakadia": "@iamstarkov I am running into exactly same. I am trying to set theme and any import of createTheme from spectacle results into Invariant Violation: Hash history needs a DOM. How do you solve it with your WithSpectacle component? . yeah, I did. It worked fine as is, but I kept getting Hash history needs a DOM error whenever/whereever I tried to import createTheme. \nHere is how I am using it Deck.js\n```\nimport { WithSpectacle } from '../components/with-spectacle.js'\nexport default () => (\n   (\n    \nTest\n      {MarkdownSlides `\nTest\n\n  `}\n</Deck>\n\n)}/>\n)\n``\nBut if I putimport {createTheme} from 'spectacle'inwith-spectacle.jsorDeck.js` I get the hash history error. Where should I import them? How should I set the theme for Deck?\n. ",
    "gosseti": "Is there a code example available for how I might go about styling up specific slides in my deck? \nI\u2019ve tried wrapping Slide as a styled-component but unfortunately this doesn\u2019t change the deck\u2019s theme, just the slide in the middle.\nEssentially I want to achieve what @dbendy described in an easy and scalable way. Any tips or hints would be much appreciated! . ",
    "AjkP": "I really want a set of hotkeys to be overridden by spectacle into doing nothing.\nI.e. in the preferences have a disable hotkeys, where I can input a bunch of hotkeys I want to do NOTHING ever.\nAs an explanation about why... it's because I already do it.\nSpectacle hotkeys take precedence over all other apps. I use this fact to hack some hotkeys into spectacle hotkeys that I don't care about, so I do not accidentally do something unintended in other apps.. ",
    "bali182": "Cheers, I wasn't able to figure out much, but you are right, spectacle by itself can be installed.. ",
    "sodoku": "@ryan-roemer thanks for telling me so nicely and sorry for wasting extra time. I committed a fix.. ",
    "elifitch": "@kyleshevlin destructured those props \ud83d\ude04. @kenwheeler as far as I'm concerned yeah I think so, as long as you're okay with the testing situation. I would have preferred to add some tests for the new fragment behavior, but I wasn't 100% sure whether the manager tests was the place to add them, and I had some trouble wrapping my head around the tests there.. @kenwheeler anything I can do to carry this across the finish line?. ",
    "gagarski": "Here is my complete example: git clone https://github.com/gagarski/spectacle-boilerplate.git && cd spectacle-boilerplate && git checkout no-hash-history. It suddenly started working after upgrading to 4.2.2. \nIt still adds #/ to URL when I open the page in browser but now navigation works normally.. ",
    "shuminyang": "Yeah, I see. I \"solved\" it by using the Context API on my side.. ",
    "dileep-kishore": "No, I was referring to the ability to show multiple spectacle slide decks in an index page. Something like a table of contents that would contain a grid or a table of all the slide decks that are part of the \"project\".. What I meant was an overview (just a preview of the first slide maybe) of a collection of Decks not Slides.. ",
    "sylvainar": "You mean overview ?\u00a0http://stack.formidable.com/spectacle/#/?overview&_k=9k1bip. I personally use : \n```jsx\nconst slideDefaults = {\n  bgColor: \"primary\",\n\u2026\n};\n\u2026\n\n\n```\nHOCs can help you too.. ",
    "hellochar": "Looks like 4.2.0 fixed it! Thanks :). ",
    "zhaostan": "@WhoMeNope This works great! Can you fix the merge conflicts and I will get it merged. Thanks!. @joshuacrass thanks for fixing the merge conflicts! Looks like now CI is failing, if you sync with master it should fix it. Thanks!. :shipit: . ",
    "WhoMeNope": "@zhaostan There you go! . @manjula91 svg files are already handled by their own rule\njavascript\n{\n    test: /\\.(png|jpg|gif)$/,\n    loader: 'url-loader?limit=8192',\n},\n{\n    test: /\\.svg$/,\n    loader: 'url-loader?limit=10000&mimetype=image/svg+xml',\n},. ",
    "vpicone": "Created #541 to fix the issues introduced from using the insecure web socket protocol.. @ryan-roemer done!. @ryan-roemer  Is this CI build broken? Not sure why this would fail.. ",
    "joshuacrass": "@ryan-roemer I'm looking to get involved in some open source projects. Do you mind if I work on this?. This was my bad. Sorry. This PR needs to be merged or the build will continue to fail as the mirror no longer exists. . \u2705. ",
    "manjula91": "Shouldn't we add svg support as well fir future?\nexample:\n{\n    test: /\\.(jpe?g|png|gif|svg)$/i, \n    loader: \"file-loader?name=/public/icons/[name].[ext]\"\n}\n. Can take this up !!. ",
    "rainboxx": "Travis should pass once #527 is merged and this branch rebased.. @WhoMeNope #527 is merged, could you rebase this so the checks are going through again? Thanks!. @sevenfoxes #528 should fix this, too. Just recognized that tests were failing and pushed a new change.. This PR will pass CI checks once #527 is merged and this branch is rebase.. #527 is merged, rebased.. Missed updating snapshots, should be fixed now.. FYI: I'm no longer using this project for myself/my project. I wanted to raise the question whether this PR is still needed/wanted given that #546 is merged.. AFAIRemember it's removed since importing this overwrites the instance of Prism in window, removing all configurations made by react-live. It's imported by react-live as well, which is why I came to the conclusion that the import is no longer needed. (And it worked, AFAIRemember.). I agree but this was the solution I could find for #526. Maybe it would still be a valid approach to merge this (if it works for you) and refactor this through #546?. Load order: I'm confident, there's nothing asynchronous happening.\nSemver: we can never guarantee that changes in react-live don't break anything here. Currently it already is broken since no languages other than the default of react-live can be used. The issue here is with how prism works: it creates a global object and syntax settings are added to this. Re-importing prism will overwrite the global object, thus removing all prior settings. This also means: importing prism-import.js has no effect at all the way it is now (without the PR).. ",
    "joshwcomeau": "Awesome! Thanks @tim-soft.\nDo you think it'd be good to add this to the docs somewhere? Happy to open a PR to add it (although I also imagine this isn't a common concern, so totally respect if you don't feel it's important enough to clutter up the README!). Ah, sorry for the assumption!. ",
    "westmark": "I worked around this problem like so\n```import React from 'react';\nimport { Slide as SpectacleSlide } from 'spectacle';\nimport styled from 'styled-components';\nimport logoSrc from '../assets/logo.svg';\nconst Logo = styled.imgposition: absolute;\n  bottom: 5vw;\n  right: 5vw;\n  width: 5vw;;\nconst Content = styled.divdisplay: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vw;;\nexport default function Slide({ children, className, ...props }) {\n  return (\n    \n\n        {children}\n        \n\n\n  );\n}\n```\nNo idea if this will break things along the way. I only just started with Spectacle an hour ago :). ",
    "romellogoodman": "Thanks! . ",
    "davidsusu": "@kenwheeler Most of the time common parent isn't applicable. See my example, for example. Furthermore, do you know a manageable workaround for a two-column layout, where text comes from left while image comes from right, at the same time?. ",
    "thomasfarago": "Ah! Solved it.\nFirst, I wasn't importing S.\nThen, for color, I wasn't assigning type='none'.. Cheers!\n(in the documentation, they don't show valid curly braces!). ",
    "ghost": "@joshuacrass this looks good! Please fix the merge conflicts. If all looks good I\u2019ll go ahead and merge.. ",
    "sslotsky": "To be even more thorough, I built a react/parcel project by hand and was still able to reproduce the error. . It looks like the buildPlaceholders logic was introduced to prism here:\nhttps://github.com/PrismJS/prism/commit/5f9c078a10237699aa0a6268903ecdae10bd7f4c\nIs the answer here to put an upper bound on the prism version in spectacle's package.json?. I built this project locally with a few different versions of prism. The latest release, 1.14.0, is the first with the issue I reported. The previous release, 1.13.0, seemed not to work at all. But 1.6.0 and 1.12.0 both appear to work fine.. @kenwheeler @kitten please see here. The Prism team has some suggestions for dealing with this. I did spend some time with this in hopes to have a PR but I didn't get anywhere with it. I couldn't seem to import loadLanguages correctly, and even if I could, it wouldn't work for anyone running < 1.13.0, which is allowed in spectacle's package.json. . Is there a plan to make this work with newer versions by following the advice offered by the prism team? https://github.com/PrismJS/prism/issues/1394. @ryan-roemer thanks for jumping on this so quickly and for bringing in the Prism folks!\nI have a minimal repo here that has the problem. Much appreciated.. :bowing_man: :pray: :raised_hands: . Understood. Any way I can help?. @mAAdhaTTah I actually took a crack at this on the react-live repo and did run into some trouble trying to run the demo app, which is SSR with next.js. Do you have any examples of using the babel plugin with a React SSR app? I think react-live might be a good place to start since we can test the demo app without having to worry about duplicated dependencies, and also make sure that it works for SSR.. @mAAdhaTTah I found that if I just naively follow the example on the babel plugin's README page, I get an error from highlightAll because document is undefined.\nI tried to move the highlightAll call to a place where there would surely be a dom (e.g. componentDidMount). I wound up with this:\n```javascript\n  //componentWillMount() {\n  //  const html = prism(normalizeCode(this.props.code), this.props.language)\n  //  this.setState({ html })\n  //}\ncomponentDidMount() {\n    Prism.highlightAll();\n    const html = prism(normalizeCode(this.props.code), this.props.language)\n    this.setState({ html })\n    this.recordChange(this.getPlain())\n    this.undoTimestamp = 0 // Reset timestamp\n  }\n``\nTheprism` function is defined as:\n```javascript\nimport Prism from 'prismjs';\nconst prism = (code, language = 'jsx') => Prism.highlight(code, Prism.languages[language])\n```\nWith this change I get an error in the tokenize method as it seems that grammar is undefined.\nHopefully my mistake is simple?. .babelrc\n\"plugins\": [\n    \"prismjs\", {\n      \"languages\": [\"clike\", \"javascript\", \"markup\", \"jsx\", \"reason\"],\n      \"plugins\": [\"line-numbers\"],\n      \"theme\": \"twilight\",\n      \"css\": true\n    },. Good catch, thanks. I made this change and it doesn't seem to help? Here's the languages that are available at runtime.\n\n. https://github.com/sslotsky/react-live/tree/babel-prism. Speaking only for myself as a consumer, I think that the extra step of configuring the babel plugin might fall into the annoying-but-tolerable category, as long as the requirements and steps are highly discoverable. A way to automate as much of it as possible would be preferred, or at least have something make a lot of noise if the configuration is missing.. @imranolas thanks! Question: willing pinning prism to 1.6.0 allow me to use ReasonML syntax? I have some concerns that whichever Prism loading code that gets executed first/last could take precedent in terms of which languages are actually loaded.. ",
    "jooj123": "This is the same for me @sslotsky - i had to downgrade to get it work for me. Ideally prism is fixed, but if thats not a trivial thing then upper bound sounds good enough for now so this manual workaround isnt required \ud83d\udc4d . ",
    "MarcelCutts": "For folks looking for a solution that works right now, you'll have to add something like this to your package.json\njson\n\"resolutions\": {\n    \"spectacle/**/prismjs\": \"1.6.0\"\n  }\nThen run yarn again. I do not think a solution like this exists for NPM users but may be wrong.\nThis will enforce all your sub-dependencies of spectacle to use prism at exactly 1.6.0, which does not have these issues.\nN.B. You may have to eject first, but I am unsure about this and have not tested it on an un-ejected instance.. ",
    "octalmage": "I was able to get this to work, but I did have to eject. Thanks! . ",
    "jessepinho": "FWIW, I was able to get this to work simply by running yarn install prismjs@1.6.0\u2014no eject or resolutions required.. ",
    "JakeGinnivan": "@ebrillhart sorry about that, must have missed the notifications from Ken at the time. ",
    "PT-Jessica": "Please any help ? I installed updated version for babel 7 but this error displays in console while I run npm start or npm install.\nError: Requires Babel \"^7.0.0-0\", but was loaded with \"6.26.3\". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention \"@babel/core\" or \"babel-core\" to see what is calling Babel. (While processing preset: \"C:\\Users\\japolinar\\Documents\\orion-github\\pt-orion-rh\\node_modules\\@babel\\preset-env\\lib\\index.js\")\n. ",
    "joeLloyd": "@PT-Jessica try this\nyarn add babel-core@7.0.0-bridge.0\nit got rid of the error for me by creating a bridge that supports babel 6 & 7\nsrc https://github.com/parcel-bundler/parcel/issues/868#issuecomment-386829133\n. ",
    "LeBenLeBen": "I have a similar issue on a fresh clone of the repository, here\u2018s more info:\nERROR in ./index.js\nModule build failed: Error: Requires Babel \"^7.0.0-0\", but was loaded with \"6.26.3\". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention \"@babel/core\" or \"babel-core\" to see what is calling Babel.\n    at throwVersionError (/Users/leben/Sites/spectacle/node_modules/@babel/helper-plugin-utils/lib/index.js:62:11)\n    at Object.assertVersion (/Users/leben/Sites/spectacle/node_modules/@babel/helper-plugin-utils/lib/index.js:11:11)\n    at /Users/leben/Sites/spectacle/node_modules/@babel/plugin-proposal-object-rest-spread/lib/index.js:15:7\n    at /Users/leben/Sites/spectacle/node_modules/@babel/helper-plugin-utils/lib/index.js:16:12\n    at Function.memoisePluginContainer (/Users/leben/Sites/spectacle/node_modules/babel-core/lib/transformation/file/options/option-manager.js:113:13)\n    at Function.normalisePlugin (/Users/leben/Sites/spectacle/node_modules/babel-core/lib/transformation/file/options/option-manager.js:146:32)\n    at /Users/leben/Sites/spectacle/node_modules/babel-core/lib/transformation/file/options/option-manager.js:184:30\n    at Array.map (<anonymous>)\n    at Function.normalisePlugins (/Users/leben/Sites/spectacle/node_modules/babel-core/lib/transformation/file/options/option-manager.js:158:20)\n    at OptionManager.mergeOptions (/Users/leben/Sites/spectacle/node_modules/babel-core/lib/transformation/file/options/option-manager.js:234:36)\n    at OptionManager.init (/Users/leben/Sites/spectacle/node_modules/babel-core/lib/transformation/file/options/option-manager.js:368:12)\n    at File.initOptions (/Users/leben/Sites/spectacle/node_modules/babel-core/lib/transformation/file/index.js:212:65)\n    at new File (/Users/leben/Sites/spectacle/node_modules/babel-core/lib/transformation/file/index.js:135:24)\n    at Pipeline.transform (/Users/leben/Sites/spectacle/node_modules/babel-core/lib/transformation/pipeline.js:46:16)\n    at transpile (/Users/leben/Sites/spectacle/node_modules/babel-loader/lib/index.js:50:20)\n    at Object.module.exports (/Users/leben/Sites/spectacle/node_modules/babel-loader/lib/index.js:173:20)\n @ multi (webpack)-dev-server/client?http://localhost:3000 webpack/hot/dev-server ./index\n@joeLloyd tip doesn\u2019t seem to work for me.. ",
    "artyomtrityak": "you can use npm install babel-loader@next if you're using webpack. ",
    "gogulanareshkw": "please help me to resolve compatibilty issue.\n\"dependencies\": {\n    \"@babel/core\": \"^7.0.0-beta.55\",\n    \"@babel/preset-env\": \"^7.0.0-beta.55\",\n    \"@babel/preset-react\": \"^7.0.0-beta.55\",\n    \"native-base\": \"^2.6.1\",\n    \"react\": \"^16.4.1\",\n    \"react-native\": \"^0.55.4\",\n    \"react-native-code-push\": \"^5.4.1\",\n    \"react-native-vector-icons\": \"^4.6.0\",\n  },\n  \"devDependencies\": {\n    \"babel-eslint\": \"^6.1.2\",\n    \"babel-jest\": \"^23.4.2\",\n    \"babel-preset-react-native\": \"^4.0.0\",\n    \"chai\": \"^3.5.0\",\n    \"eslint\": \"^3.5.0\",\n    \"eslint-config-airbnb\": \"^11.1.0\",\n    \"eslint-plugin-import\": \"^1.14.0\",\n    \"eslint-plugin-jsx-a11y\": \"^2.2.1\",\n    \"eslint-plugin-react\": \"^6.2.0\",\n    \"eslint-plugin-react-native\": \"^2.0.0\",\n    \"jest\": \"17.0.0\",\n    \"jest-react-native\": \"17.0.0\",\n    \"mocha\": \"^2.5.3\",\n  },\n\n. ",
    "rmc33": "npm install --save-dev babel-loader@^8.0.0-beta\nhttps://webpack.js.org/loaders/babel-loader/\nYou are using babel-core instead of @babel/core, installing babel-loader@^8.0.0-beta will use @babel/core and should fix the issue. Hi @rayj10 \nThat is because you are using babel-loader@8.0.0-beta instead of babel-loader@^8.0.0-beta. There is no specific version 8.0.0-beta so if you wanted to reference a specific 8 version check https://www.npmjs.com/package/babel-loader, I see the latest is babel-loader@8.0.0-beta.4\n. @rayj10 no problem, as you can see babel-core changed to @babel/core at version 7 which will cause these problems if you are still using loaders, plugins or presets that use babel-core, maybe you need to keep babel-core for some time or go ahead and upgrade if they are available for @babel/core.. Hi you can uninstall babel-loader and install it again to make sure webpack is still not picking up 6.26.3\n\nOn Oct 29, 2018, at 3:44 PM, GTOsss notifications@github.com wrote:\nI have the same problem.\nError: Requires Babel \"^7.0.0-0\", but was loaded with \"6.26.3\"...\nI tryed install\nPackage.json:\n\"dependencies\": {\n    \"colors\": \"^1.3.2\",\n    \"stringify-object\": \"^3.3.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.1.2\",\n    \"@babel/plugin-transform-modules-commonjs\": \"^7.1.0\",\n    \"@babel/preset-env\": \"^7.1.0\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-core\": \"^7.0.0-bridge.0\",\n    \"babel-loader\": \"^8.0.4\",\n    \"cross-env\": \"^5.2.0\",\n    \"webpack\": \"^4.23.1\",\n    \"webpack-cli\": \"^3.1.2\"\n  }\n.babelrc:\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"],\n  \"env\": {\n    \"development\": {\n      \"plugins\": [\"@babel/plugin-transform-modules-commonjs\"]\n    },\n    \"production\": {\n      \"plugins\": [\"@babel/plugin-transform-modules-commonjs\"]\n    }\n  }\n}\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Oh I see you don\u2019t need babel-core since you have @babel/core and replace babel-cli with @babel/cli\nOn Oct 29, 2018, at 3:44 PM, GTOsss notifications@github.com wrote:\nI have the same problem.\nError: Requires Babel \"^7.0.0-0\", but was loaded with \"6.26.3\"...\nI tryed install\nPackage.json:\n\"dependencies\": {\n    \"colors\": \"^1.3.2\",\n    \"stringify-object\": \"^3.3.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.1.2\",\n    \"@babel/plugin-transform-modules-commonjs\": \"^7.1.0\",\n    \"@babel/preset-env\": \"^7.1.0\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-core\": \"^7.0.0-bridge.0\",\n    \"babel-loader\": \"^8.0.4\",\n    \"cross-env\": \"^5.2.0\",\n    \"webpack\": \"^4.23.1\",\n    \"webpack-cli\": \"^3.1.2\"\n  }\n.babelrc:\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"],\n  \"env\": {\n    \"development\": {\n      \"plugins\": [\"@babel/plugin-transform-modules-commonjs\"]\n    },\n    \"production\": {\n      \"plugins\": [\"@babel/plugin-transform-modules-commonjs\"]\n    }\n  }\n}\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "rayj10": "@rmc33 tried ur solution, giving me this upon installation:\nNo matching version found for babel-loader@8.0.0-beta\nnpm ERR! notarget In most cases you or one of your dependencies are requesting\nnpm ERR! notarget a package version that doesn't exist.\nany idea why?\n. @rmc33 Ah yes i see thanks for the pointers! :smile: . ",
    "peterrattew": "I would recommend using Babel Upgrade and let it update all your dependencies to whats needed.. ",
    "developer239": "@peterrattew thank you so much \ud83d\ude42 that tool is priceless. ",
    "harrison-ifeanyichukwu": "@PT-Jessica, @LeBenLeBen , @joeLloyd \nin version 7, babel decided to implement their stuffs as scoped packages, whereby you simply replace babel- to @babel/.\nExamples:\nbabel-register => @babel/register\nbabel-core => @babel/core.\nif you are using babel 7, then you have to install all dependencies with the naming convention shown above. babel-eslint would be @babel/eslint, same applies to babel-jest, etc.\nwhen referencing the packages, reference them as they are too.\ne.g is shown in this babelrc below\n{\n    \"presets\": [\"@babel/preset-env\"]\n}\nRead migration article at babel website. I am using jest with babel 7. here is how i did it and it is working very fine, install the following packages\nbash\nnpm install -D @babel/core @babel/preset-env babel-jest babel-core@^7.0.0-bridge.0 regenerator-runtime\nI also installed babel cli globally\nbash\nnpm install -g @babel/cli\nsetup your .babelrc.json file to use the preset like shown below\njson\n{\n    \"env\": {\n      \"test\": {\n        \"presets\": [\n          [\n            \"@babel/preset-env\"\n          ]\n        ]\n      },\n      \"build\": {\n        \"presets\": [\n          [\n            \"@babel/preset-env\",\n            {\n              \"modules\": false\n            }\n          ]\n        ]\n      }\n    }\n  }\nin your test script in package.json, this is how i did it\njson\n{\n    \"test\": \"BABEL_ENV=test jest --config ./jest.config.json\",\n}. ",
    "ccorcos": "I think the problem has to do with Jest using an older version of Babel.. Maybe try forcing Jest to use babel 7. \nhttps://github.com/babel/babel/issues/8206#issuecomment-399137890\n\"resolutions\": {\n    \"babel-core\": \"7.0.0-bridge.0\"\n},. ",
    "elangovanshanthi": "Just add  \"@babel/cli\": \"^7.0.0\"  into your package.json file and npm install.\nIt will resolve this issue.. ",
    "za-ek": "Replacing all packages like 'babel-core', 'babel-cli' etc.. with '@babel/core', '@babel/cli' solve the problem.. ",
    "brybrophy": "I just dealt with this issue after upgrading all of the packages in react-progressive-image.\nThe problem there was with babel-jest.  The babel-jest repo has this note in it.\n\n. ",
    "bhariyani": "install \"@babel/core\": \"^7.1.0\" that will fix.. ",
    "DZuz14": "For me it was as simple as:\n\"@babel/core\": \"^7.0.0\",\n\"babel-core\": \"^7.0.0-bridge.0\",\nJest was not working until I added the bridge package below @babel/core. ",
    "ruslankhh": "I fix this problem with them.\nnpm i -D jest babel-jest babel-core@^7.0.0-bridge.0 @babel/core regenerator-runtime\n```js\n// babel.config.js\n'use strict';\nmodule.exports = {\n  presets: [\n    '@babel/preset-env',\n    '@babel/preset-react'\n  ],\n  plugins: [\n    '@babel/plugin-transform-modules-commonjs',\n    '@babel/plugin-transform-object-assign',\n    '@babel/plugin-proposal-class-properties',\n    '@babel/plugin-proposal-object-rest-spread'\n  ]\n};\njs\n// jest.config.js\n'use strict';\nmodule.exports = {\n    transform: {\n        '^.+\\.jsx$': 'babel-jest',\n        '^.+\\.js$': 'babel-jest'\n    }\n};\n``. @GTOsss try rewrite.babelrctobabel.config.js` ;). ",
    "GTOsss": "I have the same problem.\nError: Requires Babel \"^7.0.0-0\", but was loaded with \"6.26.3\"...\nI tryed install   babel-core@7.0.0-bridge.0.\nPackage.json:\n\"dependencies\": {\n    \"colors\": \"^1.3.2\",\n    \"stringify-object\": \"^3.3.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.1.2\",\n    \"@babel/plugin-transform-modules-commonjs\": \"^7.1.0\",\n    \"@babel/preset-env\": \"^7.1.0\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-core\": \"^7.0.0-bridge.0\",\n    \"babel-loader\": \"^8.0.4\",\n    \"cross-env\": \"^5.2.0\",\n    \"webpack\": \"^4.23.1\",\n    \"webpack-cli\": \"^3.1.2\"\n  }\n.babelrc:\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"],\n  \"env\": {\n    \"development\": {\n      \"plugins\": [\"@babel/plugin-transform-modules-commonjs\"]\n    },\n    \"production\": {\n      \"plugins\": [\"@babel/plugin-transform-modules-commonjs\"]\n    }\n  }\n}\n. @rmc33 Thank you!. ",
    "xuxinhang": "Please check carefully whether there is babel-core or other Babel7-styled npm package in your node_modules. Remove the whole node_modules and yarn.lock, then re-install all the packages again.\nThat works for my gulp configuration.. ",
    "yutianhaijiao": "I started with NPM and then I started with yarn \uff0cso I use rm -rf node_moudules  and package_lock.json without work . at last  rm -rf yarn.lock and rm -rf node_moudules . and then  yarn install  .it is work fine.. ",
    "ashishdommety": "Installing babel-core@^7.0.0-bridge.0 seems to work for me -- I already had \"@babel/core\": \"^7.1.6\" installed though.\nAny pointers on why just @babel-core doesn't do the trick?\n. ",
    "inovramadani": "\nI have the same problem.\nError: Requires Babel \"^7.0.0-0\", but was loaded with \"6.26.3\"...\nI tryed install babel-core@7.0.0-bridge.0.\n\nI have the same problem. My project using webpack 4 and fixed the problem with npm install babel-core@7.0.0-bridge.0 --save-dev. ",
    "SilentFlute": "hi guys, i occur this problem too, and i try many solve ways above these answers, babel-core@7.0.0-bridge.0 even upgraded babel-loader from 8.0.0 to 8.0.4, until i see @Harrison Ifeanyichukwu , he mentioned @babel/register, and i realized i had babel-register, so i install @babel/register to instead it, then the problem still there, and i search babel-register, i find there is a js use it, and i change it to @babel/register, so that's it, the problem is solved!!!!!!!!!!!!!!!!!!!!!!!!!!!!. @harrison-ifeanyichukwu i am sorry\ud83d\ude02\ud83d\ude02. > > hi guys, i occur this problem too, and i try many solve ways above these answers, babel-core@7.0.0-bridge.0 even upgraded babel-loader from 8.0.0 to 8.0.4, until i see @harrison Ifeanyichukwu , he mentioned @babel/register, and i realized i had babel-register, so i install @babel/register to instead it, then the problem still there, and i search babel-register, i find there is a js use it, and i change it to @babel/register, so that's it, the problem is solved!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nDid you edit your node_modules file?\n\nNope!!!! Only the webpack config files, and now, I used a scaffold, it solved all the bundle and compile things, that I can focus on programming. ",
    "bruevin-paul": "\"dependencies\": {\n    \"express\": \"^4.16.4\",\n    \"mongodb\": \"^3.1.10\",\n    \"react\": \"^16.7.0\",\n    \"react-dom\": \"^16.7.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.2.2\",\n    \"@babel/preset-env\": \"^7.2.3\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"@babel/preset-stage-2\": \"^7.0.0\",\n    \"babel-core\": \"^7.0.0-bridge.0\",\n    \"babel-eslint\": \"^10.0.1\",\n    \"babel-loader\": \"^8.0.4\",\n    \"eslint\": \"^5.11.0\",\n    \"eslint-plugin-react\": \"^7.11.1\",\n    \"nodemon\": \"^1.18.9\",\n    \"webpack\": \"^4.28.2\",\n    \"webpack-cli\": \"^3.1.2\"\n  }\nGetting same error pls assist me to fix\nstruck with this error for couple of days. ",
    "igbominadeveloper": "\nhi guys, i occur this problem too, and i try many solve ways above these answers, babel-core@7.0.0-bridge.0 even upgraded babel-loader from 8.0.0 to 8.0.4, until i see @harrison Ifeanyichukwu , he mentioned @babel/register, and i realized i had babel-register, so i install @babel/register to instead it, then the problem still there, and i search babel-register, i find there is a js use it, and i change it to @babel/register, so that's it, the problem is solved!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nDid you edit your node_modules file?. ",
    "paulowski": "I searched on the internet and tried different solutions (attempts). Nothing worked. Among others I also removed package.json and node_modules. What worked is to uninstall babel-jest with having jest as the only modules parsing my tests.\nThis confuses me because I thought the jest module's responsibility is only parsing test (\\(...).+\\.test.js\\) files. Or does babel the job? Would be a pleasure to enlighten me.\nPS: Of course I tried the normal and officially documented way of installation.\njs\n{\n  (...)\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.2.3\",\n    \"@babel/core\": \"^7.2.2\",\n    \"@babel/preset-env\": \"^7.2.3\",\n    \"@babel/preset-typescript\": \"^7.1.0\",\n    \"@types/jest\": \"^23.3.12\",\n    \"babel-core\": \"^7.0.0-bridge.0\",\n    \"jest\": \"^23.6.0\",\n    \"regenerator-runtime\": \"^0.13.1\",\n    \"tslint\": \"^5.12.0\",\n    \"typescript\": \"^3.2.2\"\n  },\n  \"dependencies\": {}\n}\n. ",
    "blairbodnar": "\nI made a working example of babel-jest after an hour of errors, so if any poor soul lands on this issue: https://github.com/kevinsimper/babel-jest-example\n\nThanks for this @kevinsimper !. ",
    "sevenfoxes": "I have this problem with Dart too.. ",
    "DDunc": "closing in favor of https://github.com/FormidableLabs/spectacle/pull/542. Since we're using styles as an initial value and returning a new value, I don't think it would be expected behavior to have side effects.. I would certainly prefer it to, but eslint no-undef skips typeof by default. After declaring\"no-undef\": [\"error\", { \"typeof\": true }] in the eslintrc and running it against all the project files it doesn't look like we're using that typeof 'feature' anywhere else.. ",
    "bdarnell": "hasSlideChildren didn't help. I think it's because Slide is not a \"child\" of MySlide (that is, it doesn't appear in props.children), it's something that appears when rendering MySlide. . I didn't use transitions in my presentation, so it's possible that I missed something that would make transitions work (I see that codeslide has some methods that I didn't implement here)\nI think my issue is mainly separate from transitions: function-based components raise errors (related to methods like componentWillMount being undefined) and if props aren't passed through things don't get sized properly.\nEven with components defined as shown in my original message, things still don't get sized properly in presenter view or PDF export, so I may be missing something else here. . ",
    "loraxx753": "Not sure if it helps or is even related, but I've been building up my custom slides like these:\n```\nimport React from 'react'\nimport { Deck, Slide, Text } from 'spectacle'\nconst FirstSlide = props => {\n  return (\n    \nHello there {props.key}.\nReady?\n\n  )\n}\nconst SecondSlide = props => {\n  return (\n    \nHello there {props.key}.\nSteady...\n\n  )\n}\nexport const slides = [\n  FirstSlide,\n  SecondSlide,\n  props => {\n    return (\n      \nHello there {props.key}.\nLet's rock.\n\n    )\n  }\n]\nexport default props => (\n  \n    {slides.map((Slide, i) => Slide({ key: i }))}\n  \n)\n```\n. ",
    "benwiley4000": "The comments in the first post helped me solve my problem. Animations started kicking in once I started spreading all my unused props to the child Slide component in my custom components.\njsx\nclass MyCustomSlide extends Component {\n  render() {\n    const { someprop, ...rest } = this.props;\n    return (\n      <Slide {...rest}>\n        {/*...*/}\n      </Slide>\n    ); \n  }\n}. @affanshahid you have a code example? It can be tricky sometimes but spreading should work.. Oops! Yep I'll do it, sorry.. Done!. ",
    "affanshahid": "Even spreading the props isnt working for me, is this something thats on the \"roadmap\" ? Amazing stuff would be even better if I can break up my slides into components. ",
    "moarwick": "all good, found an example in the main repo: https://github.com/FormidableLabs/spectacle/blob/master/example/src/index.js#L17. ",
    "Golmote": "Hi!\nDo Spectacle's builds always use Babel? @mAAdhaTTah took the time to think about this and ended up writing a babel plugin for this: https://www.npmjs.com/package/babel-plugin-prismjs Maybe you could take a look at it and see if it can generate an appropriate file taking languages dependencies into account automatically.. ",
    "imranolas": "I've pinned prismjs to 1.6.0 in react-live and bumped the version as a stopgap for the moment.\n@sslotsky I agree that a config would be annoying and I'd worry that forcing users to setup a babel plugin creates friction in what should be a relatively painless experience otherwise.\nNB. Some surprising behaviour when using the hub cli - I intended to reference the issue in the PR but instead hub converted the issue into a PR. I didn't even know that was a thing! Sorry everyone!\nWe can open a new issue to continue the discussion if preferred.. @sslotsky No problem. I've tested it against your minimal repro and it appears to work but I hadn't considered the issue could be loading precedence. Hopefully this is stable for now until we can find the right solution.. ",
    "tizano": "Hello @coreybruyere, I don't know if you resolved the issue. But there is a workaround. You can set the progress bar's color by changing the quarternary theme's color.\nFor example :\njavascript\nconst theme = createTheme({\n  primary: \"#ffffff\",\n  secondary: \"#1f2022\",\n  tertiary: \"#03a9fc\",\n  quarternary: \"#e1e1e1\", // <-- change it\n  bgOrange: \"#f65b54\",\n  react: \"#61dafb\",\n  bgReact: \"#282c34\"\n});\nand then set it to the Deck component\njavascript\n<Deck transition={[\"zoom\", \"slide\"]} transitionDuration={500} theme={theme}>\nI hope it will be useful \ud83d\ude04. ",
    "ElreyB": "Hello @coreybruyere, I tried to recreate the issue using your code snippet but was able to change the colors of both arrow and progress bar. Are you still getting the same bug or has this been resolved?\n<Slide\n     transition={['zoom']}\n     bgColor=\"secondary\"\n     align=\"flex-start\"\n     controlColor=\"red\"\n     progressColor=\"red\"\n       >\n         Some stuff\n       </Slide>\nBefore\n\nAfter\n\nI will close this issue for now but if the issue persists write a comment and I will look more into it.  Side note, your have controlColor=\u201dred\u201d declare twice. This should not cause the issue but it worth removing just in case.. @ebrillhart When using textColor: 'primary' it still doesn't show up. I am assume this is the default textColor for the Quote tag because when I use textColor: 'secondary' it shows up.. @ebrillhart cool beans. I think I just pick the wrong option for that section. . @ebrillhart I updated my origin comment to reflect the changes I made to the Readme and also add a link for the Anim tag.. @ebrillhart is it worth mentioning in the Development section that the corresponding yarn commend will also work?\nDevelopment\nAfter downloading the boilerplate, run the following commands on the project's root directory...\n\nnpm install\nrm -R .git to remove the existing version control\nnpm start to start up the local server or visit http://localhost:3000/#/\n\n... and we are ready to roll. Note that the corresponding `yarn` commends  also work.\nor\n- `npm install` (you can also use `yarn`)\n. @ebrillhart I am not sure about the wording of this.\n. @ebrillhart when I try to use the raw loader I get this message....\n\nAfter googling for a bit and raw-loader! seems to be the old way to import files. I am not sure how to properly document this since it appears to be apart of the webpack configuration.\n. It does work in for the demo. If disabling the warning will not hurt anything we should do it. In this way it will comply with the original docs.. @kale-stew getDerviedStateFromProps does not have access to the component instance. Since buildSlideReference didn't have any component instances in the method itself, I opted to take it out of the class and use it as a regular method that the class can use. . ",
    "mplis": "This seems to have resolved itself for me. Installing with spectacle-scripts works now and I can't reproduce the above error.. ",
    "suhailsinghbains": "Hi @Alekos92 \nAre you using Visual Studio, because, if you are, I had already worked on it, none of the libraries seem to work it, and if they work, some components always fail.\nIf you are not using Visual Studio, this shouldn't happen and hence, I'll try to fix it.. I had been working on Visual Studio, it's a pain to use it with TypeScript and importing ReactJS Libraries. However, this is not our issue.\n\nIf I do and realize that the issue has been resolved, I will report back.\n\nYeah, sure. I'll try it myself in a bit too :). Hi, can I please be assigned this bug, would love to work on it :). Okay, no problem, working on it :). r ? @ebrillhart . ",
    "Alekos92": "Greetings, \nI have not been using Visual Studio, I have been using WebStorm. I don't think it's an IDE-specific problem, though. I think the main issue is missing definitions and definitions with wrong argument types.\nFor the time being, I have decided to bite the bullet and use regular-old JavaScript, and I haven't touched on this issue for months. If I do and realize that the issue has been resolved, I will report back. . ",
    "jalmarazg": "Hi! \nActually I tried what you wanted and actually got a workaround. So, I'll first tell you why It's not working with the actual properties of the \"Slide\" tag:\nReproducing the scenario\nIn this case I tried using bgColor as you suggested but got no results. After that, I tried creating a theme with the createTheme method and tried with bgImage again with no results. \nI decided to check what could it be that cause the radial-gradient not to show by inspecting the page and I got the following: \n\n\nUsing bgColor\n\n\n\nUsing bgImage\n\n\n\nChecking the topic more in depth I came to realize that radial-gradient only works if it's declared on css with the key background-image or background ( As shown in here) ). After this, I tried another approach.\nWorkaround\nI created a CSS file with the gradient value on it:\ncss\n.ComponentStyle {\n      background: radial-gradient(ellipse farthest-corner at 45px 45px , #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%);\n      height: 100%;\n      width: 100%;\n      background-position: center;\n      background-repeat: no-repeat;\n      background-size: cover;\n}\nand add it as a className to the \"Slide\" tag like this: \njsx\n<Slide transition={[\"fade\"]} className = \"ComponentStyle\">\nAfter adding the class I got the gradient background but there's some kind of margin around it. \n\nIf you have another workaround, let me know. It would be cool to have a native \"property\" for the \"Slide\" tag like bgGradient but, actually, there's no other way at the moment.\n. ",
    "tstirtz": "This is my first pull request for this project so any feedback on standards for this repo or anything, in general, would be greatly appreciated!. ",
    "boygirl": "@HappyHackingNinja thank you for this work, and sorry for the delay. I'll take a look today :). \ud83d\ude80 Thank you for this change! . closed by https://github.com/FormidableLabs/spectacle/pull/566. @benwiley4000 this change looks good to me, but would you mind running prettier?. Thanks!. After digging into the behavior for arrays in emotion, it looks like Object.assign does not handle undefined values the same way. I think _.defaults might be the appropriate replacement. ",
    "doronnac": "@boygirl No problemo. @boygirl Hello, I've updated the prop name, test snapshots and documentation.\nPlease let me know if you would like me to add or modify anything else.. ",
    "LucaFranceschini": "@ebertmi Sorry I messed up cause I was trying both. Edited, thanks. Sorry for confusion.. ",
    "parkerziegler": "Looks awesome! @ebrillhart I think this looks good to merge, but would prefer you give the final approval!. @ebrillhart @kale-stew I symlinked this locally against one of my Spectacle presentations and it worked as expected. I also ran the demo locally after fresh install and all seemed normal there. I think we are likely good for a merge.\nIt may be worth noting in the CHANGELOG that users will need to ensure they have React and ReactDOM ^16.3.1 as their local dependency (earliest version with stable getDerivedStateFromProps). Not a huge issue, people should hopefully get that update automatically if they yarn upgrade / npm update or start fresh from the boilerplate, but I can see folks just upgrading their spectacle dep, running yarn / npm i, and not getting the React / ReactDOM update b/c of yarn.lock / package-lock.json.. So this will disable the entirety of ESLint for the file. We want to avoid doing this so that if future contributors alter this file they won't unintentionally be violating our ESLint setup. Prefer to always use eslint-disable-line or eslint-disable-next-line with the specific rule. In this case, it looks like you're violating the max-statements rule, which is totally fine for a test file. So just replace /* eslint-disable */ with eslint-disable-next-line max-statements here.. You'll get an ESLint quotes violation here and on L190, so just disable it line by line, i.e. eslint-disable-next-line quotes.. I know I was the one who demo'ed using fn and res \ud83e\udd26\u200d\u2642\ufe0f , but let's use variable names more consistent with what the function actually does. res in particular has significant meaning on the server-side. What do you think about this:\n~~fn~~ -> generateStyles\n~~res~~ -> styles. I find it helpful to prefix comments like this with @TODO. For example:\n// @TODO add test for textSize\nMakes comments like this easily searchable across the codebase!. No need to re-enable here since there's no more to this file \u2013 see comments about selective disabling above!. This function signature is incorrect \u2013 componentDidUpdate takes prevProps as the first argument and prevState as an optional second argument. Unfortunately, this means that the prevProps reference below is actually to prevState \ud83d\ude31. https://reactjs.org/docs/react-component.html#componentdidupdate. One thing to note here. By removing that first argument, you actually changed what prevProps means in the method. In the first iteration:\ncomponentDidUpdate(prevState, prevProps) {\n   if (prevProps.fit !== this.props.fit) {\n      //\n   }\n}\nprevProps, because of its position as the second argument, actually refers to prevState.\nIn the new iteration:\ncomponentDidUpdate(prevProps) {\n   if (prevProps.fit !== this.props.fit) {\n      //\n   }\n}\nprevProps correctly refers to prevProps, but your function hasn't changed at all to reflect that update. I think that's likely fine based on the other patterns you've implemented here, but want to make sure you understand the difference :). ",
    "audoralc": "Would be happy to help out with this if it's still available. . ",
    "glennsayers": "I can reproduce this pretty reliably. It occurs for me when I import a slide from another file rather than having everything inline.\nThis works:\n<Deck theme={theme}>\n   <Slide transition={[\"zoom\"]} bgColor=\"primary\">\n     <Heading size={1} fit caps lineHeight={1}>\n        React\n     </Heading>\n     <Image src={Logo} height={200} width={200}/>\n   </Slide>\n </Deck>\nThis doesn't:\n```\nimport Intro from './intro';\n...\n\n\n\n```. ",
    "sreimer15": "I would love to help out with this bug, if at all possible. Is there any information on what might be going wrong with this one? Thank you!. ",
    "AdamMaras": "I can confirm that this workaround indeed fixes the problem, and that the Appear'd CodePanes are now behaving as expected.\nThanks!. ",
    "condef5": "I found the answers in the source code xd.\nLeave these links for future curious people like me:\n PresentationRequest\n Events localstorage\n* Pull request. ",
    "denny64": "Any updates on if this will happen?. ",
    "jtiscione": "I'm getting stopped by this too. It's a shame because Spectacle looked interesting, but it looks like all it does is crash.\nI tried cloning and running spectacle-boilerplate, but that yields a similar error message.\n\nThe console also prints this error over and over again:\nWARNING in ./node_modules/buble/dist/buble-browser.es.js\n263:9-19 \"export 'default' (imported as 'require$$0') was not found in 'acorn'\n @ ./node_modules/buble/dist/buble-browser.es.js\n @ ./node_modules/react-live/dist/react-live.es.js\n @ ./node_modules/spectacle/es/components/component-playground.js\n @ ./node_modules/spectacle/es/index.js\n @ ./presentation/index.js\n @ ./index.js\n @ multi babel-polyfill webpack-hot-middleware/client react-hot-loader/patch ./index\nI tried deleting package-lock.json and rerunning npm install, but that didn't fix anything.. Success here also, with the \"classic setup\" created by npx create-react-app my-presentation --scripts-version spectacle-scripts. I inserted \"buble\": \"0.19.4\" in package.json (i.e. the exact version).. ",
    "ssmyczynski": "+1. @timkuilman I tried to checkout a fresh copy of spectacle-boilerplate with commit version you mentioned but it didn't help on. I still see a lot of warnings like this:\n./node_modules/buble/dist/buble-browser.es.js\n263:9-19 \"export 'default' (imported as 'require$$0') was not found in 'acorn'\n./node_modules/buble/dist/buble-browser.es.js\n264:17-27 \"export 'default' (imported as 'require$$0') was not found in 'acorn'\n./node_modules/buble/dist/buble-browser.es.js. Found solution somewhere else:\nnpm install buble@0.19.4\nWorks for me.\n(https://github.com/pedronauck/docz/issues/416#issuecomment-430520805). ",
    "timkuilman": "@jtiscione You can reset the Spectacle boilerplate to commit be8cfa6dd7f207b2a11b09542ec68cd18e24833f. This is the first commit that is working properly! \nIt seems that this bug was introduced when the spectacle version was bumped from 4.0.0 to 5.1.0.. Works for me too! I had to save it as a dev dependency on the boilerplate though! . ",
    "jeffzaccagnini": "Same issue. The only thing that worked for me was switching to branch: be8cfa6dd7f207b2a11b09542ec68cd18e24833f. I hope this gets fixed soon!. ",
    "andyrichardson": "Good news - this issue doesn't seem to be present anymore.\nAs @ssmyczynski found, the problem was specific to version 0.19.5 of buble (discussion here) and looks to be fixed in version 0.19.6. \nMaybe adding a package-lock.json to  spectacle-scripts would prevent issues like this in the future?. ",
    "fullstackzach": "I was able to workaround this by adding my own Footer component outside of the Deck component like this\n<React.Fragment>\n<Footer />\n<Deck>\n    ...Presentation...\n</Deck>\n</React.Fragment>\n and assigning the styles\n.footer {\n  z-index: 2;\n  position: fixed;\n  left: 20px;\n  bottom: 20px;\n}\nThis placed my Footer component at the bottom left of every page. ",
    "ibelem": "Exact same build error on Windows 10 + Linux Ubuntu 16.04, please help.\npackage.json file:\n{\n  \"name\": \"my-presentation\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"jest-cli\": \"^23.6.0\",\n    \"react\": \"^16.6.1\",\n    \"react-dom\": \"^16.6.1\",\n    \"spectacle-scripts\": \"2.0.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  }\n}\nnpm run-script build\n```\n\nmy-presentation@0.1.0 build C:\\Users\\zhangmin\\Documents\\GitHub\\webgpu_webml_updates\nreact-scripts build\n\nCreating an optimized production build...\nFailed to compile.\nFailed to minify the code from this file:\n    ./node_modules/buble/node_modules/regexpu-core/rewrite-pattern.js:33\n\nRead more here: http://bit.ly/2tRViJ9\n```. ",
    "justsml": "Tested, looks great! Thanks @ebrillhart . ",
    "motleydev": "Wow, thanks for the super fast fix on this! I would have looked into it myself, but I actually need to get the presentation done! :). The issue is that it doesn't work without units like px after the values.. ",
    "sarath-sasikumar": "Hey @ebrillhart \nI would like to just display the component. \nSo basically, I want to create a presentation of the components.. Is there any answer for this !!.\nIt would be of great help !. ",
    "lennerd": "I think the ComponentPlayground should actually be an uncontrolled component, right? Mixing both concepts in my experience is a very hard task leading to a lot of pitfalls and very complex components.\nIn the case of ComponentPlayground its currently not even working correctly when using the examples in this repo. Simply because the component overwrites changes to the code (in state) with the default code snippet.\nhttps://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#preferred-solutions. ",
    "mighty-titan": "Any update at this? This is still a problem and only @lennerd  solution works for the moment.. ",
    "sag1v": "Thanks.\nInteresting, how can i combine mdx-deck with Spectacle ?. Yeah i have looked at prism-react-renderer and its flexible as hell, though i'm not sure it will help me, i mean it can help but there is a lot of work to do in order to achieve something that is already built in for prism.  \nAs for code-surfer , this is  an amazing abstraction and a great tool, but again this is not what i'm looking for.\nI'm actually trying to do something similar to this presentation i made before but with react and mdx instead of remarkjs.\nI don't want the code box to take most of the screen and i would like to keep it simple, it seems that code-surfer is a bit too much for my current needs.\nSpectacle on the other hand with its CodePane component, seems just what i need. but i'll have to think how to get around the lines highlights and numbering. or maybe just live without it :man_shrugging: \nThanks for the help though @kitten! :+1:  :heart: \n. ",
    "MathEman-1": "Thanks for continued support of this cool library :)\nI created a PR and went through the checklist, seems like the travis check failed - but not sure what to do about that.. Hey @ebrillhart, there were just some empty spaces in the readme - thats pretty strict :) Seems to have passed now.. Hey @kale-stew, I think you mean just adding the autoplayOnStart boolean definition to the index.d.ts file - I added it now. I looked into the file but somehow forgot to add it - thanks for the reminder!. ",
    "stevenmusumeche": "Hey @ebrillhart, I upgraded to the following packages, but the notes are still not included.  Maybe the use of MDX has something to do with it?\n\"spectacle\": \"^5.3.0\",\n    \"spectacle-renderer\": \"0.0.3\". ",
    "mattfwood": "@kale-stew Sorry about that! Should be fixed with Prettier now.. ",
    "urmaul": "Nevermind. I connected presenter to wrong laptop \ud83d\ude05. ",
    "boardfish": "There's now a demo repo too.. ",
    "gkn06": "@ebrillhart  Even am facing this issue. \nHow to use bulletstyle in List item. Am using typescript. And in Index.d.ts I can't find bulletstyle prop.\nAlso I can't fine TypeFace component in Index.d.ts.. ",
    "jpbourgeon": "I have the exact same problem. But my deck is still small and this is not blocking me, so far.\nAFAIK this usually happens when you try to setState after an async callback on unmounted Components\nThis link may be useful ? https://www.robinwieruch.de/react-warning-cant-call-setstate-on-an-unmounted-component/\nindex.js:1446 Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.\n\nClick to show the full warning message\nin SlideWrapper (created by TransitionGroup)\n    in div (created by TransitionGroup)\n    in TransitionGroup (created by Styled(TransitionGroup))\n    in Styled(TransitionGroup) (created by Manager)\n    in div (created by Styled(div))\n    in Styled(div) (created by Manager)\n    in Manager (created by Connect(Manager))\n    in Connect(Manager) (created by Deck)\n    in Context (created by Controller)\n    in Controller (created by Deck)\n    in Provider (created by Deck)\n    in Deck (at 2019-INGE-01/index.js:48)\n    in Presentation (created by InnerLoadable)\n    in InnerLoadable (created by Context.Consumer)\n    in Unknown (created by ForwardRef)\n    in ForwardRef (at Presentation/index.js:19)\n    in Presentation (created by WithStyles(Presentation))\n    in WithStyles(Presentation) (created by InnerLoadable)\n    in InnerLoadable (created by Context.Consumer)\n    in Unknown (created by ForwardRef)\n    in ForwardRef (at Loadable/index.js:45)\nfunction.console.(anonymous function) @ index.js:1446\nwarningWithoutStack @ react-dom.development.js:520\nwarnAboutUpdateOnUnmounted @ react-dom.development.js:19357\nscheduleWork @ react-dom.development.js:20844\nenqueueSetState @ react-dom.development.js:11571\npush../node_modules/react/cjs/react.development.js.Component.setState @ react.development.js:336\ncomponentWillLeave @ slide-wrapper.js:175\nTransitionGroup._this.performLeave @ TransitionGroup.js:145\nTransitionGroup._this._handleDoneAppearing @ TransitionGroup.js:113\n(anonymous) @ slide-wrapper.js:191\nsetTimeout (async)\nrouterCallback @ slide-wrapper.js:190\ncomponentWillAppear @ slide-wrapper.js:170\nTransitionGroup._this.performAppear @ TransitionGroup.js:97\ncomponentDidMount @ TransitionGroup.js:195\ncommitLifeCycles @ react-dom.development.js:18071\ncommitAllLifeCycles @ react-dom.development.js:19630\ncallCallback @ react-dom.development.js:147\ninvokeGuardedCallbackDev @ react-dom.development.js:196\ninvokeGuardedCallback @ react-dom.development.js:250\ncommitRoot @ react-dom.development.js:19854\n(anonymous) @ react-dom.development.js:21402\nunstable_runWithPriority @ scheduler.development.js:255\ncompleteRoot @ react-dom.development.js:21401\nperformWorkOnRoot @ react-dom.development.js:21324\nperformWork @ react-dom.development.js:21229\nperformSyncWork @ react-dom.development.js:21203\nrequestWork @ react-dom.development.js:21058\nscheduleWork @ react-dom.development.js:20871\nenqueueSetState @ react-dom.development.js:11571\npush../node_modules/react/cjs/react.development.js.Component.setState @ react.development.js:336\nsafeSetState @ loadable.es.js:173\n(anonymous) @ loadable.es.js:226\nPromise.then (async)\nloadAsync @ loadable.es.js:217\ncomponentDidMount @ loadable.es.js:161\ncommitLifeCycles @ react-dom.development.js:18071\ncommitAllLifeCycles @ react-dom.development.js:19630\ncallCallback @ react-dom.development.js:147\ninvokeGuardedCallbackDev @ react-dom.development.js:196\ninvokeGuardedCallback @ react-dom.development.js:250\ncommitRoot @ react-dom.development.js:19854\n(anonymous) @ react-dom.development.js:21402\nunstable_runWithPriority @ scheduler.development.js:255\ncompleteRoot @ react-dom.development.js:21401\nperformWorkOnRoot @ react-dom.development.js:21324\nperformWork @ react-dom.development.js:21229\nperformSyncWork @ react-dom.development.js:21203\nrequestWork @ react-dom.development.js:21058\nscheduleWork @ react-dom.development.js:20871\nenqueueSetState @ react-dom.development.js:11571\npush../node_modules/react/cjs/react.development.js.Component.setState @ react.development.js:336\nsafeSetState @ loadable.es.js:173\n(anonymous) @ loadable.es.js:226\nPromise.then (async)\nloadAsync @ loadable.es.js:217\ncomponentDidMount @ loadable.es.js:161\ncommitLifeCycles @ react-dom.development.js:18071\ncommitAllLifeCycles @ react-dom.development.js:19630\ncallCallback @ react-dom.development.js:147\ninvokeGuardedCallbackDev @ react-dom.development.js:196\ninvokeGuardedCallback @ react-dom.development.js:250\ncommitRoot @ react-dom.development.js:19854\n(anonymous) @ react-dom.development.js:21402\nunstable_runWithPriority @ scheduler.development.js:255\ncompleteRoot @ react-dom.development.js:21401\nperformWorkOnRoot @ react-dom.development.js:21324\nperformWork @ react-dom.development.js:21229\nperformSyncWork @ react-dom.development.js:21203\nrequestWork @ react-dom.development.js:21058\nscheduleWork @ react-dom.development.js:20871\nenqueueSetState @ react-dom.development.js:11571\npush../node_modules/react/cjs/react.development.js.Component.setState @ react.development.js:336\n(anonymous) @ index.js:145\nrequestAnimationFrame (async)\n(anonymous) @ index.js:143\nPromise.then (async)\n(anonymous) @ index.js:141\npopstateListener @ history.js:47\nreplaceHashPath @ createHashHistory.js:77\n(anonymous) @ createHashHistory.js:225\nconfirmTransitionTo @ createTransitionManager.js:45\nreplace @ createHashHistory.js:214\n_prevSlide @ manager.js:555\n_handleEvent @ manager.js:394\n_handleKeyPress @ manager.js:430\n\n. ",
    "glassblowerscat": "I strongly suspect that this is indeed the problem. Unfortunately, there is no way that I know of to correct this behavior in Spectacle. If you're thinking of rolling your own slideshow at some point to solve this problem, I'm using react-timeout to implement a safe setInterval() that prevents this behavior.. ",
    "mattvoss": "Actually that is cruft that I should have removed before making the commit. My fault there. Anyways this pull request will need to be refactored in light of the pending removal of the spectacle tag.. ",
    "kyleshevlin": "I would be a fan of destructuring props to clean this up more. Above line 62, you could destructure children, easing, endValue, and startValue. Otherwise, I think this is solid addition, but I'll leave that to the requested reviewers to decide.. ",
    "chrisbolin": "this is the key here: we were sometimes referring to fragments by their slide's index and other times by their slide's hash. Usually those two are the same. Until you set a custom slide id. \ud83d\ude04 . ",
    "HappyHackingNinja": "The nulland undefined value will be ignored inside the Object.assign method.. ",
    "debel": "@kitten\nAFAIK, no modern system uses \\r only, but I can update the PR if needed \ud83d\ude42 . ",
    "johannam999": "@ebrillhart I believe this whole piece of styling should go to the body.js file, however, I was not able to move it with Mariano's help as this file required getBulletStyle function to return an object which is not an option at this moment as we are returning an object and a string at once. Is there any built in method I can use to convert it to an object or it is ok to keep it here for now?. @ebrillhart I had to use !important as List element had higher specificity than ListItem and I wanted to overwrite List styling with ListItem styling in some cases. Mariano mentioned that in this scenario it will be ok to use it. Let me know what you think. . ",
    "mariano-formidable": "Hmmm... it looks like these styles are shared by both the li::before and &::before style blocks:\ndisplay: inline-block;\nmargin-right: 40px;\nwidth: 20px;\nfont-size: 20px;\ntext-align: center;\nvertical-align: middle;\nI feel there should be a way to share them so we have don't two separate style blocks to maintain should we need to update them styles \ud83d\ude0e . "
}